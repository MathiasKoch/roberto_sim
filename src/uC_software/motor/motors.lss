
motors.none-eabi:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001475c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002164  08014870  08014870  00024870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000050  080169d4  080169d4  000269d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001a8  08016a24  08016a24  00026a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08016bcc  08016bcc  00026bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08016bd4  08016bd4  00026bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000009c  20000000  08016bd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .jcr          00000004  2000009c  08016c74  0003009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  200000a0  08016c78  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  08016c78  00030d28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bdcc  00000000  00000000  000300c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ab6  00000000  00000000  0005be95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c3c7  00000000  00000000  0006194b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000748  00000000  00000000  0006dd12  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f8  00000000  00000000  0006e45a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e5c  00000000  00000000  0006ee52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000eaf8  00000000  00000000  00075cae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000006e  00000000  00000000  000847a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005634  00000000  00000000  00084814  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000cc  00000000  00000000  00089e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00089f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <deregister_tm_clones>:
 8000110:	4b04      	ldr	r3, [pc, #16]	; (8000124 <deregister_tm_clones+0x14>)
 8000112:	4805      	ldr	r0, [pc, #20]	; (8000128 <deregister_tm_clones+0x18>)
 8000114:	1a1b      	subs	r3, r3, r0
 8000116:	2b06      	cmp	r3, #6
 8000118:	d902      	bls.n	8000120 <deregister_tm_clones+0x10>
 800011a:	4b04      	ldr	r3, [pc, #16]	; (800012c <deregister_tm_clones+0x1c>)
 800011c:	b103      	cbz	r3, 8000120 <deregister_tm_clones+0x10>
 800011e:	4718      	bx	r3
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop
 8000124:	200000a3 	.word	0x200000a3
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000

08000130 <register_tm_clones>:
 8000130:	4905      	ldr	r1, [pc, #20]	; (8000148 <register_tm_clones+0x18>)
 8000132:	4806      	ldr	r0, [pc, #24]	; (800014c <register_tm_clones+0x1c>)
 8000134:	1a09      	subs	r1, r1, r0
 8000136:	1089      	asrs	r1, r1, #2
 8000138:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800013c:	1049      	asrs	r1, r1, #1
 800013e:	d002      	beq.n	8000146 <register_tm_clones+0x16>
 8000140:	4b03      	ldr	r3, [pc, #12]	; (8000150 <register_tm_clones+0x20>)
 8000142:	b103      	cbz	r3, 8000146 <register_tm_clones+0x16>
 8000144:	4718      	bx	r3
 8000146:	4770      	bx	lr
 8000148:	200000a0 	.word	0x200000a0
 800014c:	200000a0 	.word	0x200000a0
 8000150:	00000000 	.word	0x00000000

08000154 <__do_global_dtors_aux>:
 8000154:	b510      	push	{r4, lr}
 8000156:	4c06      	ldr	r4, [pc, #24]	; (8000170 <__do_global_dtors_aux+0x1c>)
 8000158:	7823      	ldrb	r3, [r4, #0]
 800015a:	b943      	cbnz	r3, 800016e <__do_global_dtors_aux+0x1a>
 800015c:	f7ff ffd8 	bl	8000110 <deregister_tm_clones>
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__do_global_dtors_aux+0x20>)
 8000162:	b113      	cbz	r3, 800016a <__do_global_dtors_aux+0x16>
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <__do_global_dtors_aux+0x24>)
 8000166:	f3af 8000 	nop.w
 800016a:	2301      	movs	r3, #1
 800016c:	7023      	strb	r3, [r4, #0]
 800016e:	bd10      	pop	{r4, pc}
 8000170:	200000a0 	.word	0x200000a0
 8000174:	00000000 	.word	0x00000000
 8000178:	08014850 	.word	0x08014850

0800017c <frame_dummy>:
 800017c:	b508      	push	{r3, lr}
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <frame_dummy+0x24>)
 8000180:	b11b      	cbz	r3, 800018a <frame_dummy+0xe>
 8000182:	4908      	ldr	r1, [pc, #32]	; (80001a4 <frame_dummy+0x28>)
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <frame_dummy+0x2c>)
 8000186:	f3af 8000 	nop.w
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <frame_dummy+0x30>)
 800018c:	6803      	ldr	r3, [r0, #0]
 800018e:	b913      	cbnz	r3, 8000196 <frame_dummy+0x1a>
 8000190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000194:	e7cc      	b.n	8000130 <register_tm_clones>
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <frame_dummy+0x34>)
 8000198:	2b00      	cmp	r3, #0
 800019a:	d0f9      	beq.n	8000190 <frame_dummy+0x14>
 800019c:	4798      	blx	r3
 800019e:	e7f7      	b.n	8000190 <frame_dummy+0x14>
 80001a0:	00000000 	.word	0x00000000
 80001a4:	200000a4 	.word	0x200000a4
 80001a8:	08014850 	.word	0x08014850
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	00000000 	.word	0x00000000

080001b4 <_mainCRTStartup>:
 80001b4:	4b15      	ldr	r3, [pc, #84]	; (800020c <_mainCRTStartup+0x58>)
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	bf08      	it	eq
 80001ba:	4b13      	ldreq	r3, [pc, #76]	; (8000208 <_mainCRTStartup+0x54>)
 80001bc:	469d      	mov	sp, r3
 80001be:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001c2:	2100      	movs	r1, #0
 80001c4:	468b      	mov	fp, r1
 80001c6:	460f      	mov	r7, r1
 80001c8:	4813      	ldr	r0, [pc, #76]	; (8000218 <_mainCRTStartup+0x64>)
 80001ca:	4a14      	ldr	r2, [pc, #80]	; (800021c <_mainCRTStartup+0x68>)
 80001cc:	1a12      	subs	r2, r2, r0
 80001ce:	f013 f953 	bl	8013478 <memset>
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <_mainCRTStartup+0x5c>)
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d000      	beq.n	80001da <_mainCRTStartup+0x26>
 80001d8:	4798      	blx	r3
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <_mainCRTStartup+0x60>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d000      	beq.n	80001e2 <_mainCRTStartup+0x2e>
 80001e0:	4798      	blx	r3
 80001e2:	2000      	movs	r0, #0
 80001e4:	2100      	movs	r1, #0
 80001e6:	0004      	movs	r4, r0
 80001e8:	000d      	movs	r5, r1
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <_mainCRTStartup+0x6c>)
 80001ec:	2800      	cmp	r0, #0
 80001ee:	d002      	beq.n	80001f6 <_mainCRTStartup+0x42>
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <_mainCRTStartup+0x70>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	f013 f8ef 	bl	80133d8 <__libc_init_array>
 80001fa:	0020      	movs	r0, r4
 80001fc:	0029      	movs	r1, r5
 80001fe:	f00f feff 	bl	8010000 <main>
 8000202:	f013 f879 	bl	80132f8 <exit>
 8000206:	bf00      	nop
 8000208:	00080000 	.word	0x00080000
	...
 8000218:	200000a0 	.word	0x200000a0
 800021c:	20000d28 	.word	0x20000d28
	...
 8000228:	08016bd8 	.word	0x08016bd8
 800022c:	20000000 	.word	0x20000000
 8000230:	2000009c 	.word	0x2000009c
 8000234:	200000a0 	.word	0x200000a0
 8000238:	20000d28 	.word	0x20000d28

0800023c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800023c:	4b38      	ldr	r3, [pc, #224]	; (8000320 <SystemInit+0xe4>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800023e:	b082      	sub	sp, #8
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	f042 0201 	orr.w	r2, r2, #1
 8000246:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000248:	6859      	ldr	r1, [r3, #4]
 800024a:	4a36      	ldr	r2, [pc, #216]	; (8000324 <SystemInit+0xe8>)
 800024c:	400a      	ands	r2, r1
 800024e:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000256:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800025a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000262:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800026a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800026c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000270:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000272:	2200      	movs	r2, #0
 8000274:	9200      	str	r2, [sp, #0]
 8000276:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800027e:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000286:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8000288:	9a00      	ldr	r2, [sp, #0]
 800028a:	3201      	adds	r2, #1
 800028c:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800028e:	9a01      	ldr	r2, [sp, #4]
 8000290:	b91a      	cbnz	r2, 800029a <SystemInit+0x5e>
 8000292:	9a00      	ldr	r2, [sp, #0]
 8000294:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000298:	d1f2      	bne.n	8000280 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80002a0:	bf18      	it	ne
 80002a2:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002a4:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002a6:	9a01      	ldr	r2, [sp, #4]
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	d005      	beq.n	80002b8 <SystemInit+0x7c>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <SystemInit+0xec>)
 80002ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80002b4:	b002      	add	sp, #8
 80002b6:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80002b8:	4a1c      	ldr	r2, [pc, #112]	; (800032c <SystemInit+0xf0>)
 80002ba:	6811      	ldr	r1, [r2, #0]
 80002bc:	f041 0110 	orr.w	r1, r1, #16
 80002c0:	6011      	str	r1, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80002c2:	6811      	ldr	r1, [r2, #0]
 80002c4:	f021 0103 	bic.w	r1, r1, #3
 80002c8:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80002ca:	6811      	ldr	r1, [r2, #0]
 80002cc:	f041 0102 	orr.w	r1, r1, #2
 80002d0:	6011      	str	r1, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002e0:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80002e8:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80002f0:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002f8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002fa:	6819      	ldr	r1, [r3, #0]
 80002fc:	4a08      	ldr	r2, [pc, #32]	; (8000320 <SystemInit+0xe4>)
 80002fe:	0189      	lsls	r1, r1, #6
 8000300:	d5fb      	bpl.n	80002fa <SystemInit+0xbe>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000302:	6851      	ldr	r1, [r2, #4]
 8000304:	f021 0103 	bic.w	r1, r1, #3
 8000308:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800030a:	6851      	ldr	r1, [r2, #4]
 800030c:	f041 0102 	orr.w	r1, r1, #2
 8000310:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000312:	685a      	ldr	r2, [r3, #4]
 8000314:	f002 020c 	and.w	r2, r2, #12
 8000318:	2a08      	cmp	r2, #8
 800031a:	d1fa      	bne.n	8000312 <SystemInit+0xd6>
 800031c:	e7c6      	b.n	80002ac <SystemInit+0x70>
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	f8ff0000 	.word	0xf8ff0000
 8000328:	e000ed00 	.word	0xe000ed00
 800032c:	40022000 	.word	0x40022000

08000330 <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000330:	4a13      	ldr	r2, [pc, #76]	; (8000380 <SystemCoreClockUpdate+0x50>)
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <SystemCoreClockUpdate+0x54>)
 8000334:	6851      	ldr	r1, [r2, #4]
  
  switch (tmp)
 8000336:	f001 010c 	and.w	r1, r1, #12
 800033a:	2904      	cmp	r1, #4
 800033c:	d003      	beq.n	8000346 <SystemCoreClockUpdate+0x16>
 800033e:	2908      	cmp	r1, #8
 8000340:	d003      	beq.n	800034a <SystemCoreClockUpdate+0x1a>
 8000342:	4911      	ldr	r1, [pc, #68]	; (8000388 <SystemCoreClockUpdate+0x58>)
 8000344:	e011      	b.n	800036a <SystemCoreClockUpdate+0x3a>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000346:	4911      	ldr	r1, [pc, #68]	; (800038c <SystemCoreClockUpdate+0x5c>)
 8000348:	e00f      	b.n	800036a <SystemCoreClockUpdate+0x3a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800034a:	6851      	ldr	r1, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800034c:	6850      	ldr	r0, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800034e:	f3c1 4183 	ubfx	r1, r1, #18, #4
      
      if (pllsource == 0x00)
 8000352:	03c0      	lsls	r0, r0, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000354:	f101 0102 	add.w	r1, r1, #2
      
      if (pllsource == 0x00)
 8000358:	d401      	bmi.n	800035e <SystemCoreClockUpdate+0x2e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <SystemCoreClockUpdate+0x60>)
 800035c:	e004      	b.n	8000368 <SystemCoreClockUpdate+0x38>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800035e:	6850      	ldr	r0, [r2, #4]
 8000360:	0380      	lsls	r0, r0, #14
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000362:	bf4c      	ite	mi
 8000364:	4808      	ldrmi	r0, [pc, #32]	; (8000388 <SystemCoreClockUpdate+0x58>)
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 8000366:	4809      	ldrpl	r0, [pc, #36]	; (800038c <SystemCoreClockUpdate+0x5c>)
 8000368:	4341      	muls	r1, r0
 800036a:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800036c:	6852      	ldr	r2, [r2, #4]
 800036e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000372:	441a      	add	r2, r3
 8000374:	7911      	ldrb	r1, [r2, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	40ca      	lsrs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	20000004 	.word	0x20000004
 8000388:	007a1200 	.word	0x007a1200
 800038c:	00f42400 	.word	0x00f42400
 8000390:	003d0900 	.word	0x003d0900

08000394 <LED_Init>:
 8000394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000396:	2302      	movs	r3, #2
 8000398:	4c18      	ldr	r4, [pc, #96]	; (80003fc <LED_Init+0x68>)
 800039a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800039e:	2318      	movs	r3, #24
 80003a0:	a901      	add	r1, sp, #4
 80003a2:	f88d 3007 	strb.w	r3, [sp, #7]
 80003a6:	4816      	ldr	r0, [pc, #88]	; (8000400 <LED_Init+0x6c>)
 80003a8:	2303      	movs	r3, #3
 80003aa:	f88d 3006 	strb.w	r3, [sp, #6]
 80003ae:	f001 ff3e 	bl	800222e <GPIO_Init>
 80003b2:	4620      	mov	r0, r4
 80003b4:	f003 fa04 	bl	80037c0 <TIM_OCStructInit>
 80003b8:	2360      	movs	r3, #96	; 0x60
 80003ba:	2501      	movs	r5, #1
 80003bc:	8023      	strh	r3, [r4, #0]
 80003be:	4621      	mov	r1, r4
 80003c0:	2300      	movs	r3, #0
 80003c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003c6:	80e3      	strh	r3, [r4, #6]
 80003c8:	8123      	strh	r3, [r4, #8]
 80003ca:	8065      	strh	r5, [r4, #2]
 80003cc:	f003 f924 	bl	8003618 <TIM_OC2Init>
 80003d0:	2108      	movs	r1, #8
 80003d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003d6:	f003 fb13 	bl	8003a00 <TIM_OC2PreloadConfig>
 80003da:	4629      	mov	r1, r5
 80003dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003e0:	f003 fad6 	bl	8003990 <TIM_ARRPreloadConfig>
 80003e4:	4629      	mov	r1, r5
 80003e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003ea:	f003 fa10 	bl	800380e <TIM_CtrlPWMOutputs>
 80003ee:	4629      	mov	r1, r5
 80003f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003f4:	f003 f9ff 	bl	80037f6 <TIM_Cmd>
 80003f8:	b003      	add	sp, #12
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	20000d12 	.word	0x20000d12
 8000400:	40010800 	.word	0x40010800

08000404 <led_set>:
 8000404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000408:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800040a:	b29b      	uxth	r3, r3
 800040c:	4358      	muls	r0, r3
 800040e:	23ff      	movs	r3, #255	; 0xff
 8000410:	fb90 f0f3 	sdiv	r0, r0, r3
 8000414:	b280      	uxth	r0, r0
 8000416:	8710      	strh	r0, [r2, #56]	; 0x38
 8000418:	4770      	bx	lr

0800041a <DEBUG_Init>:
 800041a:	b507      	push	{r0, r1, r2, lr}
 800041c:	2330      	movs	r3, #48	; 0x30
 800041e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000422:	2303      	movs	r3, #3
 8000424:	f88d 3006 	strb.w	r3, [sp, #6]
 8000428:	a901      	add	r1, sp, #4
 800042a:	2310      	movs	r3, #16
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <DEBUG_Init+0x22>)
 800042e:	f88d 3007 	strb.w	r3, [sp, #7]
 8000432:	f001 fefc 	bl	800222e <GPIO_Init>
 8000436:	b003      	add	sp, #12
 8000438:	f85d fb04 	ldr.w	pc, [sp], #4
 800043c:	40010c00 	.word	0x40010c00

08000440 <debug_toggle>:
 8000440:	2120      	movs	r1, #32
 8000442:	b508      	push	{r3, lr}
 8000444:	4807      	ldr	r0, [pc, #28]	; (8000464 <debug_toggle+0x24>)
 8000446:	f001 ff55 	bl	80022f4 <GPIO_ReadOutputDataBit>
 800044a:	2801      	cmp	r0, #1
 800044c:	f04f 0120 	mov.w	r1, #32
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <debug_toggle+0x24>)
 8000452:	d103      	bne.n	800045c <debug_toggle+0x1c>
 8000454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000458:	f001 bf57 	b.w	800230a <GPIO_ResetBits>
 800045c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000460:	f001 bf51 	b.w	8002306 <GPIO_SetBits>
 8000464:	40010c00 	.word	0x40010c00

08000468 <SHUTDOWN_Init>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	b085      	sub	sp, #20
 800046c:	4669      	mov	r1, sp
 800046e:	2404      	movs	r4, #4
 8000470:	2303      	movs	r3, #3
 8000472:	4813      	ldr	r0, [pc, #76]	; (80004c0 <SHUTDOWN_Init+0x58>)
 8000474:	f88d 3002 	strb.w	r3, [sp, #2]
 8000478:	2508      	movs	r5, #8
 800047a:	f8ad 4000 	strh.w	r4, [sp]
 800047e:	f88d 4003 	strb.w	r4, [sp, #3]
 8000482:	f001 fed4 	bl	800222e <GPIO_Init>
 8000486:	a802      	add	r0, sp, #8
 8000488:	f001 f9ae 	bl	80017e8 <EXTI_StructInit>
 800048c:	2300      	movs	r3, #0
 800048e:	9402      	str	r4, [sp, #8]
 8000490:	eb0d 0005 	add.w	r0, sp, r5
 8000494:	2401      	movs	r4, #1
 8000496:	f88d 300c 	strb.w	r3, [sp, #12]
 800049a:	f88d 500d 	strb.w	r5, [sp, #13]
 800049e:	f88d 400e 	strb.w	r4, [sp, #14]
 80004a2:	f001 f967 	bl	8001774 <EXTI_Init>
 80004a6:	a801      	add	r0, sp, #4
 80004a8:	f88d 5004 	strb.w	r5, [sp, #4]
 80004ac:	f88d 4005 	strb.w	r4, [sp, #5]
 80004b0:	f88d 4006 	strb.w	r4, [sp, #6]
 80004b4:	f88d 4007 	strb.w	r4, [sp, #7]
 80004b8:	f003 fe90 	bl	80041dc <NVIC_Init>
 80004bc:	b005      	add	sp, #20
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	40010800 	.word	0x40010800

080004c4 <I2C1_Init>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	2101      	movs	r1, #1
 80004c8:	b086      	sub	sp, #24
 80004ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004ce:	f002 fb19 	bl	8002b04 <RCC_APB1PeriphClockCmd>
 80004d2:	23c0      	movs	r3, #192	; 0xc0
 80004d4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80004d8:	2303      	movs	r3, #3
 80004da:	f88d 3006 	strb.w	r3, [sp, #6]
 80004de:	a901      	add	r1, sp, #4
 80004e0:	231c      	movs	r3, #28
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <I2C1_Init+0x70>)
 80004e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80004e8:	f001 fea1 	bl	800222e <GPIO_Init>
 80004ec:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80004f0:	2300      	movs	r3, #0
 80004f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80004f6:	f8ad 3010 	strh.w	r3, [sp, #16]
 80004fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8000502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000506:	f8ad 3014 	strh.w	r3, [sp, #20]
 800050a:	4c0b      	ldr	r4, [pc, #44]	; (8000538 <I2C1_Init+0x74>)
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <I2C1_Init+0x78>)
 800050e:	a906      	add	r1, sp, #24
 8000510:	f841 3d10 	str.w	r3, [r1, #-16]!
 8000514:	4620      	mov	r0, r4
 8000516:	f8ad 200e 	strh.w	r2, [sp, #14]
 800051a:	f001 ff7f 	bl	800241c <I2C_Init>
 800051e:	2101      	movs	r1, #1
 8000520:	4620      	mov	r0, r4
 8000522:	f001 fff3 	bl	800250c <I2C_Cmd>
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <I2C1_Init+0x7c>)
 8000528:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	b006      	add	sp, #24
 8000530:	bd10      	pop	{r4, pc}
 8000532:	bf00      	nop
 8000534:	40010c00 	.word	0x40010c00
 8000538:	40005400 	.word	0x40005400
 800053c:	000186a0 	.word	0x000186a0
 8000540:	e000e100 	.word	0xe000e100

08000544 <I2C1_EV_IRQHandler>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	495b      	ldr	r1, [pc, #364]	; (80006b4 <I2C1_EV_IRQHandler+0x170>)
 8000548:	485b      	ldr	r0, [pc, #364]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800054a:	f002 f90a 	bl	8002762 <I2C_GetITStatus>
 800054e:	2801      	cmp	r0, #1
 8000550:	4604      	mov	r4, r0
 8000552:	d110      	bne.n	8000576 <I2C1_EV_IRQHandler+0x32>
 8000554:	4b59      	ldr	r3, [pc, #356]	; (80006bc <I2C1_EV_IRQHandler+0x178>)
 8000556:	4602      	mov	r2, r0
 8000558:	7819      	ldrb	r1, [r3, #0]
 800055a:	4857      	ldr	r0, [pc, #348]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800055c:	0049      	lsls	r1, r1, #1
 800055e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000562:	f002 f84a 	bl	80025fa <I2C_Send7bitAddress>
 8000566:	4b56      	ldr	r3, [pc, #344]	; (80006c0 <I2C1_EV_IRQHandler+0x17c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d02b      	beq.n	80005c6 <I2C1_EV_IRQHandler+0x82>
 800056e:	4622      	mov	r2, r4
 8000570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000574:	e08a      	b.n	800068c <I2C1_EV_IRQHandler+0x148>
 8000576:	4953      	ldr	r1, [pc, #332]	; (80006c4 <I2C1_EV_IRQHandler+0x180>)
 8000578:	484f      	ldr	r0, [pc, #316]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800057a:	f002 f8f2 	bl	8002762 <I2C_GetITStatus>
 800057e:	2801      	cmp	r0, #1
 8000580:	d123      	bne.n	80005ca <I2C1_EV_IRQHandler+0x86>
 8000582:	4c4f      	ldr	r4, [pc, #316]	; (80006c0 <I2C1_EV_IRQHandler+0x17c>)
 8000584:	7823      	ldrb	r3, [r4, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d103      	bne.n	8000592 <I2C1_EV_IRQHandler+0x4e>
 800058a:	2100      	movs	r1, #0
 800058c:	484a      	ldr	r0, [pc, #296]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800058e:	f001 fff9 	bl	8002584 <I2C_AcknowledgeConfig>
 8000592:	4849      	ldr	r0, [pc, #292]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000594:	8a83      	ldrh	r3, [r0, #20]
 8000596:	8b03      	ldrh	r3, [r0, #24]
 8000598:	4b4b      	ldr	r3, [pc, #300]	; (80006c8 <I2C1_EV_IRQHandler+0x184>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	f040 8087 	bne.w	80006b0 <I2C1_EV_IRQHandler+0x16c>
 80005a2:	7821      	ldrb	r1, [r4, #0]
 80005a4:	b2c9      	uxtb	r1, r1
 80005a6:	2901      	cmp	r1, #1
 80005a8:	d101      	bne.n	80005ae <I2C1_EV_IRQHandler+0x6a>
 80005aa:	f001 ffdf 	bl	800256c <I2C_GenerateSTOP>
 80005ae:	7823      	ldrb	r3, [r4, #0]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d17d      	bne.n	80006b0 <I2C1_EV_IRQHandler+0x16c>
 80005b4:	2100      	movs	r1, #0
 80005b6:	4840      	ldr	r0, [pc, #256]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005b8:	f001 ffe4 	bl	8002584 <I2C_AcknowledgeConfig>
 80005bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c0:	483d      	ldr	r0, [pc, #244]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005c2:	f002 f863 	bl	800268c <I2C_NACKPositionConfig>
 80005c6:	2200      	movs	r2, #0
 80005c8:	e7d2      	b.n	8000570 <I2C1_EV_IRQHandler+0x2c>
 80005ca:	4940      	ldr	r1, [pc, #256]	; (80006cc <I2C1_EV_IRQHandler+0x188>)
 80005cc:	483a      	ldr	r0, [pc, #232]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005ce:	f002 f8c8 	bl	8002762 <I2C_GetITStatus>
 80005d2:	2801      	cmp	r0, #1
 80005d4:	d125      	bne.n	8000622 <I2C1_EV_IRQHandler+0xde>
 80005d6:	493e      	ldr	r1, [pc, #248]	; (80006d0 <I2C1_EV_IRQHandler+0x18c>)
 80005d8:	4837      	ldr	r0, [pc, #220]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005da:	f002 f8c2 	bl	8002762 <I2C_GetITStatus>
 80005de:	4605      	mov	r5, r0
 80005e0:	b9f8      	cbnz	r0, 8000622 <I2C1_EV_IRQHandler+0xde>
 80005e2:	4a3c      	ldr	r2, [pc, #240]	; (80006d4 <I2C1_EV_IRQHandler+0x190>)
 80005e4:	4834      	ldr	r0, [pc, #208]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005e6:	7814      	ldrb	r4, [r2, #0]
 80005e8:	b2e4      	uxtb	r4, r4
 80005ea:	1c63      	adds	r3, r4, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	7013      	strb	r3, [r2, #0]
 80005f0:	f002 f800 	bl	80025f4 <I2C_ReceiveData>
 80005f4:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <I2C1_EV_IRQHandler+0x194>)
 80005f6:	5518      	strb	r0, [r3, r4]
 80005f8:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <I2C1_EV_IRQHandler+0x17c>)
 80005fa:	7819      	ldrb	r1, [r3, #0]
 80005fc:	461c      	mov	r4, r3
 80005fe:	3901      	subs	r1, #1
 8000600:	b2c9      	uxtb	r1, r1
 8000602:	7019      	strb	r1, [r3, #0]
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	2a03      	cmp	r2, #3
 8000608:	d105      	bne.n	8000616 <I2C1_EV_IRQHandler+0xd2>
 800060a:	462a      	mov	r2, r5
 800060c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000610:	4829      	ldr	r0, [pc, #164]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000612:	f001 ffe4 	bl	80025de <I2C_ITConfig>
 8000616:	7823      	ldrb	r3, [r4, #0]
 8000618:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800061c:	2b00      	cmp	r3, #0
 800061e:	d147      	bne.n	80006b0 <I2C1_EV_IRQHandler+0x16c>
 8000620:	e032      	b.n	8000688 <I2C1_EV_IRQHandler+0x144>
 8000622:	492b      	ldr	r1, [pc, #172]	; (80006d0 <I2C1_EV_IRQHandler+0x18c>)
 8000624:	4824      	ldr	r0, [pc, #144]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000626:	f002 f89c 	bl	8002762 <I2C_GetITStatus>
 800062a:	2801      	cmp	r0, #1
 800062c:	4601      	mov	r1, r0
 800062e:	d13f      	bne.n	80006b0 <I2C1_EV_IRQHandler+0x16c>
 8000630:	4c23      	ldr	r4, [pc, #140]	; (80006c0 <I2C1_EV_IRQHandler+0x17c>)
 8000632:	4d28      	ldr	r5, [pc, #160]	; (80006d4 <I2C1_EV_IRQHandler+0x190>)
 8000634:	7823      	ldrb	r3, [r4, #0]
 8000636:	4f28      	ldr	r7, [pc, #160]	; (80006d8 <I2C1_EV_IRQHandler+0x194>)
 8000638:	2b03      	cmp	r3, #3
 800063a:	d104      	bne.n	8000646 <I2C1_EV_IRQHandler+0x102>
 800063c:	2100      	movs	r1, #0
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000640:	f001 ffa0 	bl	8002584 <I2C_AcknowledgeConfig>
 8000644:	e027      	b.n	8000696 <I2C1_EV_IRQHandler+0x152>
 8000646:	7823      	ldrb	r3, [r4, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d124      	bne.n	8000696 <I2C1_EV_IRQHandler+0x152>
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800064e:	f001 ff8d 	bl	800256c <I2C_GenerateSTOP>
 8000652:	782e      	ldrb	r6, [r5, #0]
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000656:	b2f6      	uxtb	r6, r6
 8000658:	1c73      	adds	r3, r6, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	702b      	strb	r3, [r5, #0]
 800065e:	f001 ffc9 	bl	80025f4 <I2C_ReceiveData>
 8000662:	7823      	ldrb	r3, [r4, #0]
 8000664:	55b8      	strb	r0, [r7, r6]
 8000666:	3b01      	subs	r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	7023      	strb	r3, [r4, #0]
 800066c:	782e      	ldrb	r6, [r5, #0]
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000670:	b2f6      	uxtb	r6, r6
 8000672:	1c73      	adds	r3, r6, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	702b      	strb	r3, [r5, #0]
 8000678:	f001 ffbc 	bl	80025f4 <I2C_ReceiveData>
 800067c:	7823      	ldrb	r3, [r4, #0]
 800067e:	55b8      	strb	r0, [r7, r6]
 8000680:	3b01      	subs	r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	7023      	strb	r3, [r4, #0]
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800068e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000692:	f001 bfa4 	b.w	80025de <I2C_ITConfig>
 8000696:	782e      	ldrb	r6, [r5, #0]
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800069a:	b2f6      	uxtb	r6, r6
 800069c:	1c73      	adds	r3, r6, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	702b      	strb	r3, [r5, #0]
 80006a2:	f001 ffa7 	bl	80025f4 <I2C_ReceiveData>
 80006a6:	7823      	ldrb	r3, [r4, #0]
 80006a8:	55b8      	strb	r0, [r7, r6]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	7023      	strb	r3, [r4, #0]
 80006b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	02000001 	.word	0x02000001
 80006b8:	40005400 	.word	0x40005400
 80006bc:	20000ce5 	.word	0x20000ce5
 80006c0:	20000cdd 	.word	0x20000cdd
 80006c4:	02000002 	.word	0x02000002
 80006c8:	20000cdc 	.word	0x20000cdc
 80006cc:	06000040 	.word	0x06000040
 80006d0:	02000004 	.word	0x02000004
 80006d4:	20000ce6 	.word	0x20000ce6
 80006d8:	20000cde 	.word	0x20000cde

080006dc <SysTick_Init>:
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <SysTick_Init+0x24>)
 80006de:	4a09      	ldr	r2, [pc, #36]	; (8000704 <SysTick_Init+0x28>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	21f0      	movs	r1, #240	; 0xf0
 80006e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <SysTick_Init+0x2c>)
 80006ea:	3b01      	subs	r3, #1
 80006ec:	6053      	str	r3, [r2, #4]
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <SysTick_Init+0x30>)
 80006f0:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80006f4:	2300      	movs	r3, #0
 80006f6:	6093      	str	r3, [r2, #8]
 80006f8:	2307      	movs	r3, #7
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004
 8000704:	000f4240 	.word	0x000f4240
 8000708:	e000e010 	.word	0xe000e010
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <SysTick_Handler>:
 8000710:	4a02      	ldr	r2, [pc, #8]	; (800071c <SysTick_Handler+0xc>)
 8000712:	6813      	ldr	r3, [r2, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	200000bc 	.word	0x200000bc

08000720 <delay>:
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <delay+0x20>)
 8000722:	b510      	push	{r4, lr}
 8000724:	6814      	ldr	r4, [r2, #0]
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	4611      	mov	r1, r2
 800072c:	fbb4 f4f3 	udiv	r4, r4, r3
 8000730:	461a      	mov	r2, r3
 8000732:	680b      	ldr	r3, [r1, #0]
 8000734:	fbb3 f3f2 	udiv	r3, r3, r2
 8000738:	1b1b      	subs	r3, r3, r4
 800073a:	4283      	cmp	r3, r0
 800073c:	d3f9      	bcc.n	8000732 <delay+0x12>
 800073e:	bd10      	pop	{r4, pc}
 8000740:	200000bc 	.word	0x200000bc

08000744 <millis>:
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <millis+0x10>)
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200000bc 	.word	0x200000bc

08000758 <micros>:
 8000758:	4b01      	ldr	r3, [pc, #4]	; (8000760 <micros+0x8>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	200000bc 	.word	0x200000bc

08000764 <RCC_Configuration>:
 8000764:	b508      	push	{r3, lr}
 8000766:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800076a:	f002 f919 	bl	80029a0 <RCC_PCLK1Config>
 800076e:	2101      	movs	r1, #1
 8000770:	2007      	movs	r0, #7
 8000772:	f002 f9c7 	bl	8002b04 <RCC_APB1PeriphClockCmd>
 8000776:	2101      	movs	r1, #1
 8000778:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800077c:	f002 f9b6 	bl	8002aec <RCC_APB2PeriphClockCmd>
 8000780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000784:	2101      	movs	r1, #1
 8000786:	201d      	movs	r0, #29
 8000788:	f002 b9b0 	b.w	8002aec <RCC_APB2PeriphClockCmd>

0800078c <ADC_DeInit>:
 800078c:	b508      	push	{r3, lr}
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <ADC_DeInit+0x54>)
 8000790:	4298      	cmp	r0, r3
 8000792:	d108      	bne.n	80007a6 <ADC_DeInit+0x1a>
 8000794:	2101      	movs	r1, #1
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f002 f9bf 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 800079e:	2100      	movs	r1, #0
 80007a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a4:	e016      	b.n	80007d4 <ADC_DeInit+0x48>
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <ADC_DeInit+0x58>)
 80007a8:	4298      	cmp	r0, r3
 80007aa:	d108      	bne.n	80007be <ADC_DeInit+0x32>
 80007ac:	2101      	movs	r1, #1
 80007ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007b2:	f002 f9b3 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80007b6:	2100      	movs	r1, #0
 80007b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007bc:	e00a      	b.n	80007d4 <ADC_DeInit+0x48>
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <ADC_DeInit+0x5c>)
 80007c0:	4298      	cmp	r0, r3
 80007c2:	d10b      	bne.n	80007dc <ADC_DeInit+0x50>
 80007c4:	2101      	movs	r1, #1
 80007c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007ca:	f002 f9a7 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80007ce:	2100      	movs	r1, #0
 80007d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007d8:	f002 b9a0 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
 80007dc:	bd08      	pop	{r3, pc}
 80007de:	bf00      	nop
 80007e0:	40012400 	.word	0x40012400
 80007e4:	40012800 	.word	0x40012800
 80007e8:	40013c00 	.word	0x40013c00

080007ec <ADC_Init>:
 80007ec:	6843      	ldr	r3, [r0, #4]
 80007ee:	b510      	push	{r4, lr}
 80007f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80007f4:	680b      	ldr	r3, [r1, #0]
 80007f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007fa:	4313      	orrs	r3, r2
 80007fc:	790a      	ldrb	r2, [r1, #4]
 80007fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000802:	6043      	str	r3, [r0, #4]
 8000804:	68ca      	ldr	r2, [r1, #12]
 8000806:	688b      	ldr	r3, [r1, #8]
 8000808:	6884      	ldr	r4, [r0, #8]
 800080a:	431a      	orrs	r2, r3
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <ADC_Init+0x44>)
 800080e:	4023      	ands	r3, r4
 8000810:	4313      	orrs	r3, r2
 8000812:	794a      	ldrb	r2, [r1, #5]
 8000814:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000818:	6083      	str	r3, [r0, #8]
 800081a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800081c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000820:	7c0b      	ldrb	r3, [r1, #16]
 8000822:	3b01      	subs	r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 800082a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800082c:	bd10      	pop	{r4, pc}
 800082e:	bf00      	nop
 8000830:	fff1f7fd 	.word	0xfff1f7fd

08000834 <ADC_StructInit>:
 8000834:	2300      	movs	r3, #0
 8000836:	6003      	str	r3, [r0, #0]
 8000838:	7103      	strb	r3, [r0, #4]
 800083a:	7143      	strb	r3, [r0, #5]
 800083c:	6083      	str	r3, [r0, #8]
 800083e:	60c3      	str	r3, [r0, #12]
 8000840:	2301      	movs	r3, #1
 8000842:	7403      	strb	r3, [r0, #16]
 8000844:	4770      	bx	lr

08000846 <ADC_Cmd>:
 8000846:	6883      	ldr	r3, [r0, #8]
 8000848:	b111      	cbz	r1, 8000850 <ADC_Cmd+0xa>
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	e001      	b.n	8000854 <ADC_Cmd+0xe>
 8000850:	f023 0301 	bic.w	r3, r3, #1
 8000854:	6083      	str	r3, [r0, #8]
 8000856:	4770      	bx	lr

08000858 <ADC_DMACmd>:
 8000858:	6883      	ldr	r3, [r0, #8]
 800085a:	b111      	cbz	r1, 8000862 <ADC_DMACmd+0xa>
 800085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000860:	e001      	b.n	8000866 <ADC_DMACmd+0xe>
 8000862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000866:	6083      	str	r3, [r0, #8]
 8000868:	4770      	bx	lr

0800086a <ADC_ITConfig>:
 800086a:	b2c9      	uxtb	r1, r1
 800086c:	6843      	ldr	r3, [r0, #4]
 800086e:	b10a      	cbz	r2, 8000874 <ADC_ITConfig+0xa>
 8000870:	4319      	orrs	r1, r3
 8000872:	e001      	b.n	8000878 <ADC_ITConfig+0xe>
 8000874:	ea23 0101 	bic.w	r1, r3, r1
 8000878:	6041      	str	r1, [r0, #4]
 800087a:	4770      	bx	lr

0800087c <ADC_ResetCalibration>:
 800087c:	6883      	ldr	r3, [r0, #8]
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6083      	str	r3, [r0, #8]
 8000884:	4770      	bx	lr

08000886 <ADC_GetResetCalibrationStatus>:
 8000886:	6880      	ldr	r0, [r0, #8]
 8000888:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800088c:	4770      	bx	lr

0800088e <ADC_StartCalibration>:
 800088e:	6883      	ldr	r3, [r0, #8]
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6083      	str	r3, [r0, #8]
 8000896:	4770      	bx	lr

08000898 <ADC_GetCalibrationStatus>:
 8000898:	6880      	ldr	r0, [r0, #8]
 800089a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800089e:	4770      	bx	lr

080008a0 <ADC_SoftwareStartConvCmd>:
 80008a0:	6883      	ldr	r3, [r0, #8]
 80008a2:	b111      	cbz	r1, 80008aa <ADC_SoftwareStartConvCmd+0xa>
 80008a4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80008a8:	e001      	b.n	80008ae <ADC_SoftwareStartConvCmd+0xe>
 80008aa:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 80008ae:	6083      	str	r3, [r0, #8]
 80008b0:	4770      	bx	lr

080008b2 <ADC_GetSoftwareStartConvStatus>:
 80008b2:	6880      	ldr	r0, [r0, #8]
 80008b4:	f3c0 5080 	ubfx	r0, r0, #22, #1
 80008b8:	4770      	bx	lr

080008ba <ADC_DiscModeChannelCountConfig>:
 80008ba:	6843      	ldr	r3, [r0, #4]
 80008bc:	3901      	subs	r1, #1
 80008be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80008c2:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 80008c6:	6043      	str	r3, [r0, #4]
 80008c8:	4770      	bx	lr

080008ca <ADC_DiscModeCmd>:
 80008ca:	6843      	ldr	r3, [r0, #4]
 80008cc:	b111      	cbz	r1, 80008d4 <ADC_DiscModeCmd+0xa>
 80008ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d2:	e001      	b.n	80008d8 <ADC_DiscModeCmd+0xe>
 80008d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008d8:	6043      	str	r3, [r0, #4]
 80008da:	4770      	bx	lr

080008dc <ADC_RegularChannelConfig>:
 80008dc:	2909      	cmp	r1, #9
 80008de:	b570      	push	{r4, r5, r6, lr}
 80008e0:	d90d      	bls.n	80008fe <ADC_RegularChannelConfig+0x22>
 80008e2:	f1a1 040a 	sub.w	r4, r1, #10
 80008e6:	68c6      	ldr	r6, [r0, #12]
 80008e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80008ec:	2507      	movs	r5, #7
 80008ee:	40a5      	lsls	r5, r4
 80008f0:	ea26 0505 	bic.w	r5, r6, r5
 80008f4:	fa03 f404 	lsl.w	r4, r3, r4
 80008f8:	432c      	orrs	r4, r5
 80008fa:	60c4      	str	r4, [r0, #12]
 80008fc:	e00a      	b.n	8000914 <ADC_RegularChannelConfig+0x38>
 80008fe:	6906      	ldr	r6, [r0, #16]
 8000900:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8000904:	2507      	movs	r5, #7
 8000906:	40a5      	lsls	r5, r4
 8000908:	ea26 0505 	bic.w	r5, r6, r5
 800090c:	fa03 f404 	lsl.w	r4, r3, r4
 8000910:	432c      	orrs	r4, r5
 8000912:	6104      	str	r4, [r0, #16]
 8000914:	2a06      	cmp	r2, #6
 8000916:	d80c      	bhi.n	8000932 <ADC_RegularChannelConfig+0x56>
 8000918:	3a01      	subs	r2, #1
 800091a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800091c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000920:	231f      	movs	r3, #31
 8000922:	4093      	lsls	r3, r2
 8000924:	ea24 0303 	bic.w	r3, r4, r3
 8000928:	fa01 f202 	lsl.w	r2, r1, r2
 800092c:	431a      	orrs	r2, r3
 800092e:	6342      	str	r2, [r0, #52]	; 0x34
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	2a0c      	cmp	r2, #12
 8000934:	d80c      	bhi.n	8000950 <ADC_RegularChannelConfig+0x74>
 8000936:	3a07      	subs	r2, #7
 8000938:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800093a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800093e:	231f      	movs	r3, #31
 8000940:	4093      	lsls	r3, r2
 8000942:	ea24 0303 	bic.w	r3, r4, r3
 8000946:	fa01 f202 	lsl.w	r2, r1, r2
 800094a:	431a      	orrs	r2, r3
 800094c:	6302      	str	r2, [r0, #48]	; 0x30
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	3a0d      	subs	r2, #13
 8000952:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000954:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000958:	231f      	movs	r3, #31
 800095a:	4093      	lsls	r3, r2
 800095c:	ea24 0303 	bic.w	r3, r4, r3
 8000960:	fa01 f202 	lsl.w	r2, r1, r2
 8000964:	431a      	orrs	r2, r3
 8000966:	62c2      	str	r2, [r0, #44]	; 0x2c
 8000968:	bd70      	pop	{r4, r5, r6, pc}

0800096a <ADC_ExternalTrigConvCmd>:
 800096a:	6883      	ldr	r3, [r0, #8]
 800096c:	b111      	cbz	r1, 8000974 <ADC_ExternalTrigConvCmd+0xa>
 800096e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000972:	e001      	b.n	8000978 <ADC_ExternalTrigConvCmd+0xe>
 8000974:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000978:	6083      	str	r3, [r0, #8]
 800097a:	4770      	bx	lr

0800097c <ADC_GetConversionValue>:
 800097c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800097e:	b280      	uxth	r0, r0
 8000980:	4770      	bx	lr

08000982 <ADC_GetDualModeConversionValue>:
 8000982:	4b01      	ldr	r3, [pc, #4]	; (8000988 <ADC_GetDualModeConversionValue+0x6>)
 8000984:	6818      	ldr	r0, [r3, #0]
 8000986:	4770      	bx	lr
 8000988:	4001244c 	.word	0x4001244c

0800098c <ADC_AutoInjectedConvCmd>:
 800098c:	6843      	ldr	r3, [r0, #4]
 800098e:	b111      	cbz	r1, 8000996 <ADC_AutoInjectedConvCmd+0xa>
 8000990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000994:	e001      	b.n	800099a <ADC_AutoInjectedConvCmd+0xe>
 8000996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800099a:	6043      	str	r3, [r0, #4]
 800099c:	4770      	bx	lr

0800099e <ADC_InjectedDiscModeCmd>:
 800099e:	6843      	ldr	r3, [r0, #4]
 80009a0:	b111      	cbz	r1, 80009a8 <ADC_InjectedDiscModeCmd+0xa>
 80009a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a6:	e001      	b.n	80009ac <ADC_InjectedDiscModeCmd+0xe>
 80009a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009ac:	6043      	str	r3, [r0, #4]
 80009ae:	4770      	bx	lr

080009b0 <ADC_ExternalTrigInjectedConvConfig>:
 80009b0:	6883      	ldr	r3, [r0, #8]
 80009b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80009b6:	4319      	orrs	r1, r3
 80009b8:	6081      	str	r1, [r0, #8]
 80009ba:	4770      	bx	lr

080009bc <ADC_ExternalTrigInjectedConvCmd>:
 80009bc:	6883      	ldr	r3, [r0, #8]
 80009be:	b111      	cbz	r1, 80009c6 <ADC_ExternalTrigInjectedConvCmd+0xa>
 80009c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c4:	e001      	b.n	80009ca <ADC_ExternalTrigInjectedConvCmd+0xe>
 80009c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009ca:	6083      	str	r3, [r0, #8]
 80009cc:	4770      	bx	lr

080009ce <ADC_SoftwareStartInjectedConvCmd>:
 80009ce:	6883      	ldr	r3, [r0, #8]
 80009d0:	b111      	cbz	r1, 80009d8 <ADC_SoftwareStartInjectedConvCmd+0xa>
 80009d2:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 80009d6:	e001      	b.n	80009dc <ADC_SoftwareStartInjectedConvCmd+0xe>
 80009d8:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 80009dc:	6083      	str	r3, [r0, #8]
 80009de:	4770      	bx	lr

080009e0 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
 80009e0:	6880      	ldr	r0, [r0, #8]
 80009e2:	f3c0 5040 	ubfx	r0, r0, #21, #1
 80009e6:	4770      	bx	lr

080009e8 <ADC_InjectedChannelConfig>:
 80009e8:	2909      	cmp	r1, #9
 80009ea:	b570      	push	{r4, r5, r6, lr}
 80009ec:	d90d      	bls.n	8000a0a <ADC_InjectedChannelConfig+0x22>
 80009ee:	f1a1 040a 	sub.w	r4, r1, #10
 80009f2:	68c6      	ldr	r6, [r0, #12]
 80009f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80009f8:	2507      	movs	r5, #7
 80009fa:	40a5      	lsls	r5, r4
 80009fc:	ea26 0505 	bic.w	r5, r6, r5
 8000a00:	fa03 f404 	lsl.w	r4, r3, r4
 8000a04:	432c      	orrs	r4, r5
 8000a06:	60c4      	str	r4, [r0, #12]
 8000a08:	e00a      	b.n	8000a20 <ADC_InjectedChannelConfig+0x38>
 8000a0a:	6906      	ldr	r6, [r0, #16]
 8000a0c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8000a10:	2507      	movs	r5, #7
 8000a12:	40a5      	lsls	r5, r4
 8000a14:	ea26 0505 	bic.w	r5, r6, r5
 8000a18:	fa03 f404 	lsl.w	r4, r3, r4
 8000a1c:	432c      	orrs	r4, r5
 8000a1e:	6104      	str	r4, [r0, #16]
 8000a20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000a22:	3202      	adds	r2, #2
 8000a24:	f3c3 5401 	ubfx	r4, r3, #20, #2
 8000a28:	1b12      	subs	r2, r2, r4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000a30:	241f      	movs	r4, #31
 8000a32:	4094      	lsls	r4, r2
 8000a34:	ea23 0304 	bic.w	r3, r3, r4
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	4319      	orrs	r1, r3
 8000a3c:	6381      	str	r1, [r0, #56]	; 0x38
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}

08000a40 <ADC_InjectedSequencerLengthConfig>:
 8000a40:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000a42:	3901      	subs	r1, #1
 8000a44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000a48:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8000a4c:	6383      	str	r3, [r0, #56]	; 0x38
 8000a4e:	4770      	bx	lr

08000a50 <ADC_SetInjectedOffset>:
 8000a50:	b082      	sub	sp, #8
 8000a52:	2300      	movs	r3, #0
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	9001      	str	r0, [sp, #4]
 8000a58:	9b01      	ldr	r3, [sp, #4]
 8000a5a:	4419      	add	r1, r3
 8000a5c:	9101      	str	r1, [sp, #4]
 8000a5e:	9b01      	ldr	r3, [sp, #4]
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	b002      	add	sp, #8
 8000a64:	4770      	bx	lr

08000a66 <ADC_GetInjectedConversionValue>:
 8000a66:	b082      	sub	sp, #8
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	9001      	str	r0, [sp, #4]
 8000a6e:	9b01      	ldr	r3, [sp, #4]
 8000a70:	3328      	adds	r3, #40	; 0x28
 8000a72:	4419      	add	r1, r3
 8000a74:	9101      	str	r1, [sp, #4]
 8000a76:	9b01      	ldr	r3, [sp, #4]
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	b280      	uxth	r0, r0
 8000a7c:	b002      	add	sp, #8
 8000a7e:	4770      	bx	lr

08000a80 <ADC_AnalogWatchdogCmd>:
 8000a80:	6843      	ldr	r3, [r0, #4]
 8000a82:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a8a:	4319      	orrs	r1, r3
 8000a8c:	6041      	str	r1, [r0, #4]
 8000a8e:	4770      	bx	lr

08000a90 <ADC_AnalogWatchdogThresholdsConfig>:
 8000a90:	6241      	str	r1, [r0, #36]	; 0x24
 8000a92:	6282      	str	r2, [r0, #40]	; 0x28
 8000a94:	4770      	bx	lr

08000a96 <ADC_AnalogWatchdogSingleChannelConfig>:
 8000a96:	6843      	ldr	r3, [r0, #4]
 8000a98:	f023 031f 	bic.w	r3, r3, #31
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	6041      	str	r1, [r0, #4]
 8000aa0:	4770      	bx	lr

08000aa2 <ADC_TempSensorVrefintCmd>:
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <ADC_TempSensorVrefintCmd+0x16>)
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	b110      	cbz	r0, 8000aae <ADC_TempSensorVrefintCmd+0xc>
 8000aa8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000aac:	e001      	b.n	8000ab2 <ADC_TempSensorVrefintCmd+0x10>
 8000aae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40012400 	.word	0x40012400

08000abc <ADC_GetFlagStatus>:
 8000abc:	6803      	ldr	r3, [r0, #0]
 8000abe:	4219      	tst	r1, r3
 8000ac0:	bf14      	ite	ne
 8000ac2:	2001      	movne	r0, #1
 8000ac4:	2000      	moveq	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <ADC_ClearFlag>:
 8000ac8:	43c9      	mvns	r1, r1
 8000aca:	6001      	str	r1, [r0, #0]
 8000acc:	4770      	bx	lr

08000ace <ADC_GetITStatus>:
 8000ace:	6843      	ldr	r3, [r0, #4]
 8000ad0:	6800      	ldr	r0, [r0, #0]
 8000ad2:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 8000ad6:	d004      	beq.n	8000ae2 <ADC_GetITStatus+0x14>
 8000ad8:	b2c9      	uxtb	r1, r1
 8000ada:	4219      	tst	r1, r3
 8000adc:	bf14      	ite	ne
 8000ade:	2001      	movne	r0, #1
 8000ae0:	2000      	moveq	r0, #0
 8000ae2:	4770      	bx	lr

08000ae4 <ADC_ClearITPendingBit>:
 8000ae4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8000ae8:	6001      	str	r1, [r0, #0]
 8000aea:	4770      	bx	lr

08000aec <BKP_DeInit>:
 8000aec:	b508      	push	{r3, lr}
 8000aee:	2001      	movs	r0, #1
 8000af0:	f002 f82c 	bl	8002b4c <RCC_BackupResetCmd>
 8000af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000af8:	2000      	movs	r0, #0
 8000afa:	f002 b827 	b.w	8002b4c <RCC_BackupResetCmd>

08000afe <BKP_TamperPinLevelConfig>:
 8000afe:	4b01      	ldr	r3, [pc, #4]	; (8000b04 <BKP_TamperPinLevelConfig+0x6>)
 8000b00:	6018      	str	r0, [r3, #0]
 8000b02:	4770      	bx	lr
 8000b04:	420d8604 	.word	0x420d8604

08000b08 <BKP_TamperPinCmd>:
 8000b08:	4b01      	ldr	r3, [pc, #4]	; (8000b10 <BKP_TamperPinCmd+0x8>)
 8000b0a:	6018      	str	r0, [r3, #0]
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	420d8600 	.word	0x420d8600

08000b14 <BKP_ITConfig>:
 8000b14:	4b01      	ldr	r3, [pc, #4]	; (8000b1c <BKP_ITConfig+0x8>)
 8000b16:	6018      	str	r0, [r3, #0]
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	420d8688 	.word	0x420d8688

08000b20 <BKP_RTCOutputConfig>:
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <BKP_RTCOutputConfig+0x14>)
 8000b22:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8000b24:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	0c1b      	lsrs	r3, r3, #16
 8000b2c:	4318      	orrs	r0, r3
 8000b2e:	8590      	strh	r0, [r2, #44]	; 0x2c
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40006c00 	.word	0x40006c00

08000b38 <BKP_SetRTCCalibrationValue>:
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <BKP_SetRTCCalibrationValue+0x14>)
 8000b3a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8000b3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b40:	041b      	lsls	r3, r3, #16
 8000b42:	0c1b      	lsrs	r3, r3, #16
 8000b44:	4318      	orrs	r0, r3
 8000b46:	8590      	strh	r0, [r2, #44]	; 0x2c
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40006c00 	.word	0x40006c00

08000b50 <BKP_WriteBackupRegister>:
 8000b50:	b082      	sub	sp, #8
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <BKP_WriteBackupRegister+0x18>)
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	9b01      	ldr	r3, [sp, #4]
 8000b5c:	4418      	add	r0, r3
 8000b5e:	9001      	str	r0, [sp, #4]
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	6019      	str	r1, [r3, #0]
 8000b64:	b002      	add	sp, #8
 8000b66:	4770      	bx	lr
 8000b68:	40006c00 	.word	0x40006c00

08000b6c <BKP_ReadBackupRegister>:
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <BKP_ReadBackupRegister+0x1c>)
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	9b01      	ldr	r3, [sp, #4]
 8000b78:	4418      	add	r0, r3
 8000b7a:	9001      	str	r0, [sp, #4]
 8000b7c:	9b01      	ldr	r3, [sp, #4]
 8000b7e:	8818      	ldrh	r0, [r3, #0]
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b002      	add	sp, #8
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40006c00 	.word	0x40006c00

08000b8c <BKP_GetFlagStatus>:
 8000b8c:	4b01      	ldr	r3, [pc, #4]	; (8000b94 <BKP_GetFlagStatus+0x8>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	b2c0      	uxtb	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	420d86a0 	.word	0x420d86a0

08000b98 <BKP_ClearFlag>:
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <BKP_ClearFlag+0x10>)
 8000b9a:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	8693      	strh	r3, [r2, #52]	; 0x34
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40006c00 	.word	0x40006c00

08000bac <BKP_GetITStatus>:
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <BKP_GetITStatus+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	b2c0      	uxtb	r0, r0
 8000bb2:	4770      	bx	lr
 8000bb4:	420d86a4 	.word	0x420d86a4

08000bb8 <BKP_ClearITPendingBit>:
 8000bb8:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <BKP_ClearITPendingBit+0x10>)
 8000bba:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	8693      	strh	r3, [r2, #52]	; 0x34
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40006c00 	.word	0x40006c00

08000bcc <CAN_DeInit>:
 8000bcc:	b508      	push	{r3, lr}
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <CAN_DeInit+0x30>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d107      	bne.n	8000be6 <CAN_DeInit+0x1a>
 8000bd6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000bda:	f001 ffab 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8000bde:	2100      	movs	r1, #0
 8000be0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000be4:	e006      	b.n	8000bf4 <CAN_DeInit+0x28>
 8000be6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bea:	f001 ffa3 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000bf8:	f001 bf9c 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 8000bfc:	40006400 	.word	0x40006400

08000c00 <CAN_Init>:
 8000c00:	6803      	ldr	r3, [r0, #0]
 8000c02:	f023 0302 	bic.w	r3, r3, #2
 8000c06:	6003      	str	r3, [r0, #0]
 8000c08:	6803      	ldr	r3, [r0, #0]
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6003      	str	r3, [r0, #0]
 8000c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c14:	6842      	ldr	r2, [r0, #4]
 8000c16:	07d2      	lsls	r2, r2, #31
 8000c18:	d401      	bmi.n	8000c1e <CAN_Init+0x1e>
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	d1fa      	bne.n	8000c14 <CAN_Init+0x14>
 8000c1e:	6843      	ldr	r3, [r0, #4]
 8000c20:	f013 0301 	ands.w	r3, r3, #1
 8000c24:	d055      	beq.n	8000cd2 <CAN_Init+0xd2>
 8000c26:	798b      	ldrb	r3, [r1, #6]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	bf0c      	ite	eq
 8000c2e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8000c32:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8000c36:	6003      	str	r3, [r0, #0]
 8000c38:	79cb      	ldrb	r3, [r1, #7]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	6803      	ldr	r3, [r0, #0]
 8000c3e:	bf0c      	ite	eq
 8000c40:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8000c44:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000c48:	6003      	str	r3, [r0, #0]
 8000c4a:	7a0b      	ldrb	r3, [r1, #8]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	6803      	ldr	r3, [r0, #0]
 8000c50:	bf0c      	ite	eq
 8000c52:	f043 0320 	orreq.w	r3, r3, #32
 8000c56:	f023 0320 	bicne.w	r3, r3, #32
 8000c5a:	6003      	str	r3, [r0, #0]
 8000c5c:	7a4b      	ldrb	r3, [r1, #9]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	6803      	ldr	r3, [r0, #0]
 8000c62:	bf0c      	ite	eq
 8000c64:	f043 0310 	orreq.w	r3, r3, #16
 8000c68:	f023 0310 	bicne.w	r3, r3, #16
 8000c6c:	6003      	str	r3, [r0, #0]
 8000c6e:	7a8b      	ldrb	r3, [r1, #10]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	6803      	ldr	r3, [r0, #0]
 8000c74:	bf0c      	ite	eq
 8000c76:	f043 0308 	orreq.w	r3, r3, #8
 8000c7a:	f023 0308 	bicne.w	r3, r3, #8
 8000c7e:	6003      	str	r3, [r0, #0]
 8000c80:	7acb      	ldrb	r3, [r1, #11]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	6803      	ldr	r3, [r0, #0]
 8000c86:	bf0c      	ite	eq
 8000c88:	f043 0304 	orreq.w	r3, r3, #4
 8000c8c:	f023 0304 	bicne.w	r3, r3, #4
 8000c90:	6003      	str	r3, [r0, #0]
 8000c92:	78cb      	ldrb	r3, [r1, #3]
 8000c94:	788a      	ldrb	r2, [r1, #2]
 8000c96:	061b      	lsls	r3, r3, #24
 8000c98:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000c9c:	790a      	ldrb	r2, [r1, #4]
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	794a      	ldrb	r2, [r1, #5]
 8000ca4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000ca8:	880a      	ldrh	r2, [r1, #0]
 8000caa:	3a01      	subs	r2, #1
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61c3      	str	r3, [r0, #28]
 8000cb0:	6803      	ldr	r3, [r0, #0]
 8000cb2:	f023 0301 	bic.w	r3, r3, #1
 8000cb6:	6003      	str	r3, [r0, #0]
 8000cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbc:	6842      	ldr	r2, [r0, #4]
 8000cbe:	07d2      	lsls	r2, r2, #31
 8000cc0:	d501      	bpl.n	8000cc6 <CAN_Init+0xc6>
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	d1fa      	bne.n	8000cbc <CAN_Init+0xbc>
 8000cc6:	6840      	ldr	r0, [r0, #4]
 8000cc8:	f000 0001 	and.w	r0, r0, #1
 8000ccc:	f080 0001 	eor.w	r0, r0, #1
 8000cd0:	4770      	bx	lr
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	4770      	bx	lr

08000cd6 <CAN_FilterInit>:
 8000cd6:	7a83      	ldrb	r3, [r0, #10]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	b570      	push	{r4, r5, r6, lr}
 8000ce0:	43dc      	mvns	r4, r3
 8000ce2:	4a33      	ldr	r2, [pc, #204]	; (8000db0 <CAN_FilterInit+0xda>)
 8000ce4:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8000ce8:	f041 0101 	orr.w	r1, r1, #1
 8000cec:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
 8000cf0:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000cf4:	4021      	ands	r1, r4
 8000cf6:	f8c2 121c 	str.w	r1, [r2, #540]	; 0x21c
 8000cfa:	7b01      	ldrb	r1, [r0, #12]
 8000cfc:	b9a1      	cbnz	r1, 8000d28 <CAN_FilterInit+0x52>
 8000cfe:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8000d02:	88c6      	ldrh	r6, [r0, #6]
 8000d04:	4021      	ands	r1, r4
 8000d06:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
 8000d0a:	7a81      	ldrb	r1, [r0, #10]
 8000d0c:	8845      	ldrh	r5, [r0, #2]
 8000d0e:	3148      	adds	r1, #72	; 0x48
 8000d10:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8000d14:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
 8000d18:	8802      	ldrh	r2, [r0, #0]
 8000d1a:	8881      	ldrh	r1, [r0, #4]
 8000d1c:	7a85      	ldrb	r5, [r0, #10]
 8000d1e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d22:	4a24      	ldr	r2, [pc, #144]	; (8000db4 <CAN_FilterInit+0xde>)
 8000d24:	00ed      	lsls	r5, r5, #3
 8000d26:	5151      	str	r1, [r2, r5]
 8000d28:	7b02      	ldrb	r2, [r0, #12]
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d115      	bne.n	8000d5a <CAN_FilterInit+0x84>
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <CAN_FilterInit+0xda>)
 8000d30:	8806      	ldrh	r6, [r0, #0]
 8000d32:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8000d36:	8845      	ldrh	r5, [r0, #2]
 8000d38:	4319      	orrs	r1, r3
 8000d3a:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
 8000d3e:	7a81      	ldrb	r1, [r0, #10]
 8000d40:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8000d44:	3148      	adds	r1, #72	; 0x48
 8000d46:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
 8000d4a:	88c2      	ldrh	r2, [r0, #6]
 8000d4c:	8881      	ldrh	r1, [r0, #4]
 8000d4e:	7a85      	ldrb	r5, [r0, #10]
 8000d50:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <CAN_FilterInit+0xde>)
 8000d56:	00ed      	lsls	r5, r5, #3
 8000d58:	5151      	str	r1, [r2, r5]
 8000d5a:	7ac2      	ldrb	r2, [r0, #11]
 8000d5c:	4914      	ldr	r1, [pc, #80]	; (8000db0 <CAN_FilterInit+0xda>)
 8000d5e:	b91a      	cbnz	r2, 8000d68 <CAN_FilterInit+0x92>
 8000d60:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 8000d64:	4022      	ands	r2, r4
 8000d66:	e002      	b.n	8000d6e <CAN_FilterInit+0x98>
 8000d68:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	8905      	ldrh	r5, [r0, #8]
 8000d70:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <CAN_FilterInit+0xda>)
 8000d76:	b92d      	cbnz	r5, 8000d84 <CAN_FilterInit+0xae>
 8000d78:	f8d1 5214 	ldr.w	r5, [r1, #532]	; 0x214
 8000d7c:	402c      	ands	r4, r5
 8000d7e:	f8c1 4214 	str.w	r4, [r1, #532]	; 0x214
 8000d82:	e006      	b.n	8000d92 <CAN_FilterInit+0xbc>
 8000d84:	2d01      	cmp	r5, #1
 8000d86:	bf02      	ittt	eq
 8000d88:	f8d2 1214 	ldreq.w	r1, [r2, #532]	; 0x214
 8000d8c:	4319      	orreq	r1, r3
 8000d8e:	f8c2 1214 	streq.w	r1, [r2, #532]	; 0x214
 8000d92:	7b41      	ldrb	r1, [r0, #13]
 8000d94:	2901      	cmp	r1, #1
 8000d96:	bf02      	ittt	eq
 8000d98:	f8d2 121c 	ldreq.w	r1, [r2, #540]	; 0x21c
 8000d9c:	430b      	orreq	r3, r1
 8000d9e:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
 8000da2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	40006400 	.word	0x40006400
 8000db4:	40006644 	.word	0x40006644

08000db8 <CAN_StructInit>:
 8000db8:	2300      	movs	r3, #0
 8000dba:	7183      	strb	r3, [r0, #6]
 8000dbc:	71c3      	strb	r3, [r0, #7]
 8000dbe:	7203      	strb	r3, [r0, #8]
 8000dc0:	7243      	strb	r3, [r0, #9]
 8000dc2:	7283      	strb	r3, [r0, #10]
 8000dc4:	72c3      	strb	r3, [r0, #11]
 8000dc6:	7083      	strb	r3, [r0, #2]
 8000dc8:	70c3      	strb	r3, [r0, #3]
 8000dca:	2303      	movs	r3, #3
 8000dcc:	7103      	strb	r3, [r0, #4]
 8000dce:	2302      	movs	r3, #2
 8000dd0:	7143      	strb	r3, [r0, #5]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	8003      	strh	r3, [r0, #0]
 8000dd6:	4770      	bx	lr

08000dd8 <CAN_SlaveStartBank>:
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <CAN_SlaveStartBank+0x38>)
 8000dda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000dde:	f042 0201 	orr.w	r2, r2, #1
 8000de2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000de6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000dea:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000dee:	f022 020e 	bic.w	r2, r2, #14
 8000df2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000df6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000dfa:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000dfe:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
 8000e02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000e0e:	4770      	bx	lr
 8000e10:	40006400 	.word	0x40006400

08000e14 <CAN_DBGFreeze>:
 8000e14:	6803      	ldr	r3, [r0, #0]
 8000e16:	b111      	cbz	r1, 8000e1e <CAN_DBGFreeze+0xa>
 8000e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1c:	e001      	b.n	8000e22 <CAN_DBGFreeze+0xe>
 8000e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e22:	6003      	str	r3, [r0, #0]
 8000e24:	4770      	bx	lr

08000e26 <CAN_TTComModeCmd>:
 8000e26:	6803      	ldr	r3, [r0, #0]
 8000e28:	b199      	cbz	r1, 8000e52 <CAN_TTComModeCmd+0x2c>
 8000e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2e:	6003      	str	r3, [r0, #0]
 8000e30:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
 8000e3c:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 8000e48:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	e012      	b.n	8000e78 <CAN_TTComModeCmd+0x52>
 8000e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e56:	6003      	str	r3, [r0, #0]
 8000e58:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e60:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
 8000e64:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e6c:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 8000e70:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e78:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 8000e7c:	4770      	bx	lr

08000e7e <CAN_Transmit>:
 8000e7e:	6883      	ldr	r3, [r0, #8]
 8000e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e82:	015c      	lsls	r4, r3, #5
 8000e84:	d407      	bmi.n	8000e96 <CAN_Transmit+0x18>
 8000e86:	6883      	ldr	r3, [r0, #8]
 8000e88:	011a      	lsls	r2, r3, #4
 8000e8a:	d406      	bmi.n	8000e9a <CAN_Transmit+0x1c>
 8000e8c:	6883      	ldr	r3, [r0, #8]
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	d405      	bmi.n	8000e9e <CAN_Transmit+0x20>
 8000e92:	2404      	movs	r4, #4
 8000e94:	e03e      	b.n	8000f14 <CAN_Transmit+0x96>
 8000e96:	2400      	movs	r4, #0
 8000e98:	e002      	b.n	8000ea0 <CAN_Transmit+0x22>
 8000e9a:	2401      	movs	r4, #1
 8000e9c:	e000      	b.n	8000ea0 <CAN_Transmit+0x22>
 8000e9e:	2402      	movs	r4, #2
 8000ea0:	0125      	lsls	r5, r4, #4
 8000ea2:	1943      	adds	r3, r0, r5
 8000ea4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000ea8:	f002 0201 	and.w	r2, r2, #1
 8000eac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8000eb0:	7a0e      	ldrb	r6, [r1, #8]
 8000eb2:	7a4a      	ldrb	r2, [r1, #9]
 8000eb4:	b92e      	cbnz	r6, 8000ec2 <CAN_Transmit+0x44>
 8000eb6:	680f      	ldr	r7, [r1, #0]
 8000eb8:	f8d3 6180 	ldr.w	r6, [r3, #384]	; 0x180
 8000ebc:	ea42 5247 	orr.w	r2, r2, r7, lsl #21
 8000ec0:	e006      	b.n	8000ed0 <CAN_Transmit+0x52>
 8000ec2:	684f      	ldr	r7, [r1, #4]
 8000ec4:	f8d3 e180 	ldr.w	lr, [r3, #384]	; 0x180
 8000ec8:	ea46 06c7 	orr.w	r6, r6, r7, lsl #3
 8000ecc:	ea46 060e 	orr.w	r6, r6, lr
 8000ed0:	4332      	orrs	r2, r6
 8000ed2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8000ed6:	7a8a      	ldrb	r2, [r1, #10]
 8000ed8:	4428      	add	r0, r5
 8000eda:	f002 020f 	and.w	r2, r2, #15
 8000ede:	728a      	strb	r2, [r1, #10]
 8000ee0:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000ee4:	f022 020f 	bic.w	r2, r2, #15
 8000ee8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8000eec:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000ef0:	7a8e      	ldrb	r6, [r1, #10]
 8000ef2:	4332      	orrs	r2, r6
 8000ef4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8000ef8:	f8d1 200b 	ldr.w	r2, [r1, #11]
 8000efc:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8000f00:	f8d1 200f 	ldr.w	r2, [r1, #15]
 8000f04:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8000f08:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000f0c:	f042 0201 	orr.w	r2, r2, #1
 8000f10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8000f14:	4620      	mov	r0, r4
 8000f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f18 <CAN_TransmitStatus>:
 8000f18:	2901      	cmp	r1, #1
 8000f1a:	d008      	beq.n	8000f2e <CAN_TransmitStatus+0x16>
 8000f1c:	d304      	bcc.n	8000f28 <CAN_TransmitStatus+0x10>
 8000f1e:	2902      	cmp	r1, #2
 8000f20:	d118      	bne.n	8000f54 <CAN_TransmitStatus+0x3c>
 8000f22:	6882      	ldr	r2, [r0, #8]
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <CAN_TransmitStatus+0x40>)
 8000f26:	e004      	b.n	8000f32 <CAN_TransmitStatus+0x1a>
 8000f28:	6882      	ldr	r2, [r0, #8]
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <CAN_TransmitStatus+0x44>)
 8000f2c:	e001      	b.n	8000f32 <CAN_TransmitStatus+0x1a>
 8000f2e:	6882      	ldr	r2, [r0, #8]
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <CAN_TransmitStatus+0x48>)
 8000f32:	4013      	ands	r3, r2
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <CAN_TransmitStatus+0x44>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00a      	beq.n	8000f50 <CAN_TransmitStatus+0x38>
 8000f3a:	d801      	bhi.n	8000f40 <CAN_TransmitStatus+0x28>
 8000f3c:	b933      	cbnz	r3, 8000f4c <CAN_TransmitStatus+0x34>
 8000f3e:	e009      	b.n	8000f54 <CAN_TransmitStatus+0x3c>
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <CAN_TransmitStatus+0x48>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d004      	beq.n	8000f50 <CAN_TransmitStatus+0x38>
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <CAN_TransmitStatus+0x40>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d001      	beq.n	8000f50 <CAN_TransmitStatus+0x38>
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	4770      	bx	lr
 8000f50:	2001      	movs	r0, #1
 8000f52:	4770      	bx	lr
 8000f54:	2002      	movs	r0, #2
 8000f56:	4770      	bx	lr
 8000f58:	10030000 	.word	0x10030000
 8000f5c:	04000003 	.word	0x04000003
 8000f60:	08000300 	.word	0x08000300

08000f64 <CAN_CancelTransmit>:
 8000f64:	2901      	cmp	r1, #1
 8000f66:	d007      	beq.n	8000f78 <CAN_CancelTransmit+0x14>
 8000f68:	d302      	bcc.n	8000f70 <CAN_CancelTransmit+0xc>
 8000f6a:	2902      	cmp	r1, #2
 8000f6c:	d008      	beq.n	8000f80 <CAN_CancelTransmit+0x1c>
 8000f6e:	4770      	bx	lr
 8000f70:	6883      	ldr	r3, [r0, #8]
 8000f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f76:	e006      	b.n	8000f86 <CAN_CancelTransmit+0x22>
 8000f78:	6883      	ldr	r3, [r0, #8]
 8000f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7e:	e002      	b.n	8000f86 <CAN_CancelTransmit+0x22>
 8000f80:	6883      	ldr	r3, [r0, #8]
 8000f82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f86:	6083      	str	r3, [r0, #8]
 8000f88:	4770      	bx	lr

08000f8a <CAN_Receive>:
 8000f8a:	010b      	lsls	r3, r1, #4
 8000f8c:	b530      	push	{r4, r5, lr}
 8000f8e:	18c4      	adds	r4, r0, r3
 8000f90:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000f94:	f005 0504 	and.w	r5, r5, #4
 8000f98:	b2ed      	uxtb	r5, r5
 8000f9a:	7215      	strb	r5, [r2, #8]
 8000f9c:	b925      	cbnz	r5, 8000fa8 <CAN_Receive+0x1e>
 8000f9e:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000fa2:	0d6d      	lsrs	r5, r5, #21
 8000fa4:	6015      	str	r5, [r2, #0]
 8000fa6:	e003      	b.n	8000fb0 <CAN_Receive+0x26>
 8000fa8:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000fac:	08ed      	lsrs	r5, r5, #3
 8000fae:	6055      	str	r5, [r2, #4]
 8000fb0:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000fb4:	4403      	add	r3, r0
 8000fb6:	f005 0502 	and.w	r5, r5, #2
 8000fba:	7255      	strb	r5, [r2, #9]
 8000fbc:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
 8000fc0:	f005 050f 	and.w	r5, r5, #15
 8000fc4:	7295      	strb	r5, [r2, #10]
 8000fc6:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
 8000fca:	0a24      	lsrs	r4, r4, #8
 8000fcc:	74d4      	strb	r4, [r2, #19]
 8000fce:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000fd2:	72d4      	strb	r4, [r2, #11]
 8000fd4:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000fd8:	0a24      	lsrs	r4, r4, #8
 8000fda:	7314      	strb	r4, [r2, #12]
 8000fdc:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000fe0:	0c24      	lsrs	r4, r4, #16
 8000fe2:	7354      	strb	r4, [r2, #13]
 8000fe4:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000fe8:	0e24      	lsrs	r4, r4, #24
 8000fea:	7394      	strb	r4, [r2, #14]
 8000fec:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000ff0:	73d4      	strb	r4, [r2, #15]
 8000ff2:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000ff6:	0a24      	lsrs	r4, r4, #8
 8000ff8:	7414      	strb	r4, [r2, #16]
 8000ffa:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000ffe:	0c24      	lsrs	r4, r4, #16
 8001000:	7454      	strb	r4, [r2, #17]
 8001002:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001006:	0e1b      	lsrs	r3, r3, #24
 8001008:	7493      	strb	r3, [r2, #18]
 800100a:	b921      	cbnz	r1, 8001016 <CAN_Receive+0x8c>
 800100c:	68c3      	ldr	r3, [r0, #12]
 800100e:	f043 0320 	orr.w	r3, r3, #32
 8001012:	60c3      	str	r3, [r0, #12]
 8001014:	bd30      	pop	{r4, r5, pc}
 8001016:	6903      	ldr	r3, [r0, #16]
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6103      	str	r3, [r0, #16]
 800101e:	bd30      	pop	{r4, r5, pc}

08001020 <CAN_FIFORelease>:
 8001020:	b921      	cbnz	r1, 800102c <CAN_FIFORelease+0xc>
 8001022:	68c3      	ldr	r3, [r0, #12]
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	60c3      	str	r3, [r0, #12]
 800102a:	4770      	bx	lr
 800102c:	6903      	ldr	r3, [r0, #16]
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	6103      	str	r3, [r0, #16]
 8001034:	4770      	bx	lr

08001036 <CAN_MessagePending>:
 8001036:	b909      	cbnz	r1, 800103c <CAN_MessagePending+0x6>
 8001038:	68c0      	ldr	r0, [r0, #12]
 800103a:	e002      	b.n	8001042 <CAN_MessagePending+0xc>
 800103c:	2901      	cmp	r1, #1
 800103e:	d103      	bne.n	8001048 <CAN_MessagePending+0x12>
 8001040:	6900      	ldr	r0, [r0, #16]
 8001042:	f000 0003 	and.w	r0, r0, #3
 8001046:	4770      	bx	lr
 8001048:	2000      	movs	r0, #0
 800104a:	4770      	bx	lr

0800104c <CAN_OperatingModeRequest>:
 800104c:	b999      	cbnz	r1, 8001076 <CAN_OperatingModeRequest+0x2a>
 800104e:	6803      	ldr	r3, [r0, #0]
 8001050:	f023 0303 	bic.w	r3, r3, #3
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6003      	str	r3, [r0, #0]
 800105a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105e:	6842      	ldr	r2, [r0, #4]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	2a01      	cmp	r2, #1
 8001066:	d001      	beq.n	800106c <CAN_OperatingModeRequest+0x20>
 8001068:	3b01      	subs	r3, #1
 800106a:	d1f8      	bne.n	800105e <CAN_OperatingModeRequest+0x12>
 800106c:	6840      	ldr	r0, [r0, #4]
 800106e:	f000 0003 	and.w	r0, r0, #3
 8001072:	2801      	cmp	r0, #1
 8001074:	e028      	b.n	80010c8 <CAN_OperatingModeRequest+0x7c>
 8001076:	2901      	cmp	r1, #1
 8001078:	d111      	bne.n	800109e <CAN_OperatingModeRequest+0x52>
 800107a:	6803      	ldr	r3, [r0, #0]
 800107c:	f023 0303 	bic.w	r3, r3, #3
 8001080:	6003      	str	r3, [r0, #0]
 8001082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001086:	6842      	ldr	r2, [r0, #4]
 8001088:	0792      	lsls	r2, r2, #30
 800108a:	d001      	beq.n	8001090 <CAN_OperatingModeRequest+0x44>
 800108c:	3b01      	subs	r3, #1
 800108e:	d1fa      	bne.n	8001086 <CAN_OperatingModeRequest+0x3a>
 8001090:	6843      	ldr	r3, [r0, #4]
 8001092:	f013 0f03 	tst.w	r3, #3
 8001096:	bf0c      	ite	eq
 8001098:	2001      	moveq	r0, #1
 800109a:	2000      	movne	r0, #0
 800109c:	4770      	bx	lr
 800109e:	2902      	cmp	r1, #2
 80010a0:	d116      	bne.n	80010d0 <CAN_OperatingModeRequest+0x84>
 80010a2:	6803      	ldr	r3, [r0, #0]
 80010a4:	f023 0303 	bic.w	r3, r3, #3
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6003      	str	r3, [r0, #0]
 80010ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b2:	6842      	ldr	r2, [r0, #4]
 80010b4:	f002 0203 	and.w	r2, r2, #3
 80010b8:	2a02      	cmp	r2, #2
 80010ba:	d001      	beq.n	80010c0 <CAN_OperatingModeRequest+0x74>
 80010bc:	3b01      	subs	r3, #1
 80010be:	d1f8      	bne.n	80010b2 <CAN_OperatingModeRequest+0x66>
 80010c0:	6840      	ldr	r0, [r0, #4]
 80010c2:	f000 0003 	and.w	r0, r0, #3
 80010c6:	2802      	cmp	r0, #2
 80010c8:	bf14      	ite	ne
 80010ca:	2000      	movne	r0, #0
 80010cc:	2001      	moveq	r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	2000      	movs	r0, #0
 80010d2:	4770      	bx	lr

080010d4 <CAN_Sleep>:
 80010d4:	6803      	ldr	r3, [r0, #0]
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	6003      	str	r3, [r0, #0]
 80010e0:	6840      	ldr	r0, [r0, #4]
 80010e2:	f000 0003 	and.w	r0, r0, #3
 80010e6:	1e83      	subs	r3, r0, #2
 80010e8:	4258      	negs	r0, r3
 80010ea:	4158      	adcs	r0, r3
 80010ec:	4770      	bx	lr

080010ee <CAN_WakeUp>:
 80010ee:	6803      	ldr	r3, [r0, #0]
 80010f0:	f023 0302 	bic.w	r3, r3, #2
 80010f4:	6003      	str	r3, [r0, #0]
 80010f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fa:	6842      	ldr	r2, [r0, #4]
 80010fc:	0792      	lsls	r2, r2, #30
 80010fe:	d501      	bpl.n	8001104 <CAN_WakeUp+0x16>
 8001100:	3b01      	subs	r3, #1
 8001102:	d1fa      	bne.n	80010fa <CAN_WakeUp+0xc>
 8001104:	6840      	ldr	r0, [r0, #4]
 8001106:	f080 0002 	eor.w	r0, r0, #2
 800110a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800110e:	4770      	bx	lr

08001110 <CAN_GetLastErrorCode>:
 8001110:	6980      	ldr	r0, [r0, #24]
 8001112:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001116:	4770      	bx	lr

08001118 <CAN_GetReceiveErrorCounter>:
 8001118:	6980      	ldr	r0, [r0, #24]
 800111a:	0e00      	lsrs	r0, r0, #24
 800111c:	4770      	bx	lr

0800111e <CAN_GetLSBTransmitErrorCounter>:
 800111e:	6980      	ldr	r0, [r0, #24]
 8001120:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001124:	4770      	bx	lr

08001126 <CAN_ITConfig>:
 8001126:	6943      	ldr	r3, [r0, #20]
 8001128:	b10a      	cbz	r2, 800112e <CAN_ITConfig+0x8>
 800112a:	4319      	orrs	r1, r3
 800112c:	e001      	b.n	8001132 <CAN_ITConfig+0xc>
 800112e:	ea23 0101 	bic.w	r1, r3, r1
 8001132:	6141      	str	r1, [r0, #20]
 8001134:	4770      	bx	lr

08001136 <CAN_GetFlagStatus>:
 8001136:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800113a:	d001      	beq.n	8001140 <CAN_GetFlagStatus+0xa>
 800113c:	6983      	ldr	r3, [r0, #24]
 800113e:	e00b      	b.n	8001158 <CAN_GetFlagStatus+0x22>
 8001140:	01cb      	lsls	r3, r1, #7
 8001142:	d501      	bpl.n	8001148 <CAN_GetFlagStatus+0x12>
 8001144:	6843      	ldr	r3, [r0, #4]
 8001146:	e007      	b.n	8001158 <CAN_GetFlagStatus+0x22>
 8001148:	010a      	lsls	r2, r1, #4
 800114a:	d501      	bpl.n	8001150 <CAN_GetFlagStatus+0x1a>
 800114c:	6883      	ldr	r3, [r0, #8]
 800114e:	e003      	b.n	8001158 <CAN_GetFlagStatus+0x22>
 8001150:	018b      	lsls	r3, r1, #6
 8001152:	bf4c      	ite	mi
 8001154:	68c3      	ldrmi	r3, [r0, #12]
 8001156:	6903      	ldrpl	r3, [r0, #16]
 8001158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800115c:	420b      	tst	r3, r1
 800115e:	bf14      	ite	ne
 8001160:	2001      	movne	r0, #1
 8001162:	2000      	moveq	r0, #0
 8001164:	4770      	bx	lr

08001166 <CAN_ClearFlag>:
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <CAN_ClearFlag+0x2a>)
 8001168:	4299      	cmp	r1, r3
 800116a:	d102      	bne.n	8001172 <CAN_ClearFlag+0xc>
 800116c:	2300      	movs	r3, #0
 800116e:	6183      	str	r3, [r0, #24]
 8001170:	4770      	bx	lr
 8001172:	018a      	lsls	r2, r1, #6
 8001174:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8001178:	d501      	bpl.n	800117e <CAN_ClearFlag+0x18>
 800117a:	60c3      	str	r3, [r0, #12]
 800117c:	4770      	bx	lr
 800117e:	014a      	lsls	r2, r1, #5
 8001180:	d501      	bpl.n	8001186 <CAN_ClearFlag+0x20>
 8001182:	6103      	str	r3, [r0, #16]
 8001184:	4770      	bx	lr
 8001186:	010a      	lsls	r2, r1, #4
 8001188:	bf4c      	ite	mi
 800118a:	6083      	strmi	r3, [r0, #8]
 800118c:	6043      	strpl	r3, [r0, #4]
 800118e:	4770      	bx	lr
 8001190:	30f00070 	.word	0x30f00070

08001194 <CAN_GetITStatus>:
 8001194:	6943      	ldr	r3, [r0, #20]
 8001196:	400b      	ands	r3, r1
 8001198:	d05c      	beq.n	8001254 <CAN_GetITStatus+0xc0>
 800119a:	2940      	cmp	r1, #64	; 0x40
 800119c:	d042      	beq.n	8001224 <CAN_GetITStatus+0x90>
 800119e:	d810      	bhi.n	80011c2 <CAN_GetITStatus+0x2e>
 80011a0:	2904      	cmp	r1, #4
 80011a2:	d033      	beq.n	800120c <CAN_GetITStatus+0x78>
 80011a4:	d805      	bhi.n	80011b2 <CAN_GetITStatus+0x1e>
 80011a6:	2901      	cmp	r1, #1
 80011a8:	d027      	beq.n	80011fa <CAN_GetITStatus+0x66>
 80011aa:	2902      	cmp	r1, #2
 80011ac:	d154      	bne.n	8001258 <CAN_GetITStatus+0xc4>
 80011ae:	68c0      	ldr	r0, [r0, #12]
 80011b0:	e02f      	b.n	8001212 <CAN_GetITStatus+0x7e>
 80011b2:	2910      	cmp	r1, #16
 80011b4:	d02c      	beq.n	8001210 <CAN_GetITStatus+0x7c>
 80011b6:	2920      	cmp	r1, #32
 80011b8:	d030      	beq.n	800121c <CAN_GetITStatus+0x88>
 80011ba:	2908      	cmp	r1, #8
 80011bc:	d14c      	bne.n	8001258 <CAN_GetITStatus+0xc4>
 80011be:	68c0      	ldr	r0, [r0, #12]
 80011c0:	e035      	b.n	800122e <CAN_GetITStatus+0x9a>
 80011c2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80011c6:	d03b      	beq.n	8001240 <CAN_GetITStatus+0xac>
 80011c8:	d80c      	bhi.n	80011e4 <CAN_GetITStatus+0x50>
 80011ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80011ce:	d031      	beq.n	8001234 <CAN_GetITStatus+0xa0>
 80011d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80011d4:	d032      	beq.n	800123c <CAN_GetITStatus+0xa8>
 80011d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80011da:	d13d      	bne.n	8001258 <CAN_GetITStatus+0xc4>
 80011dc:	6980      	ldr	r0, [r0, #24]
 80011de:	f000 0001 	and.w	r0, r0, #1
 80011e2:	4770      	bx	lr
 80011e4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80011e8:	d01e      	beq.n	8001228 <CAN_GetITStatus+0x94>
 80011ea:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80011ee:	d01d      	beq.n	800122c <CAN_GetITStatus+0x98>
 80011f0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80011f4:	d130      	bne.n	8001258 <CAN_GetITStatus+0xc4>
 80011f6:	6840      	ldr	r0, [r0, #4]
 80011f8:	e029      	b.n	800124e <CAN_GetITStatus+0xba>
 80011fa:	6880      	ldr	r0, [r0, #8]
 80011fc:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8001200:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8001204:	3000      	adds	r0, #0
 8001206:	bf18      	it	ne
 8001208:	2001      	movne	r0, #1
 800120a:	4770      	bx	lr
 800120c:	68c0      	ldr	r0, [r0, #12]
 800120e:	e006      	b.n	800121e <CAN_GetITStatus+0x8a>
 8001210:	6900      	ldr	r0, [r0, #16]
 8001212:	f010 0003 	ands.w	r0, r0, #3
 8001216:	bf18      	it	ne
 8001218:	2001      	movne	r0, #1
 800121a:	4770      	bx	lr
 800121c:	6900      	ldr	r0, [r0, #16]
 800121e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001222:	4770      	bx	lr
 8001224:	6900      	ldr	r0, [r0, #16]
 8001226:	e002      	b.n	800122e <CAN_GetITStatus+0x9a>
 8001228:	6840      	ldr	r0, [r0, #4]
 800122a:	e7f8      	b.n	800121e <CAN_GetITStatus+0x8a>
 800122c:	6840      	ldr	r0, [r0, #4]
 800122e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001232:	4770      	bx	lr
 8001234:	6980      	ldr	r0, [r0, #24]
 8001236:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800123a:	4770      	bx	lr
 800123c:	6980      	ldr	r0, [r0, #24]
 800123e:	e006      	b.n	800124e <CAN_GetITStatus+0xba>
 8001240:	6983      	ldr	r3, [r0, #24]
 8001242:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001246:	bf14      	ite	ne
 8001248:	2001      	movne	r0, #1
 800124a:	2000      	moveq	r0, #0
 800124c:	4770      	bx	lr
 800124e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001252:	4770      	bx	lr
 8001254:	4618      	mov	r0, r3
 8001256:	4770      	bx	lr
 8001258:	2000      	movs	r0, #0
 800125a:	4770      	bx	lr

0800125c <CAN_ClearITPendingBit>:
 800125c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001260:	d035      	beq.n	80012ce <CAN_ClearITPendingBit+0x72>
 8001262:	d80c      	bhi.n	800127e <CAN_ClearITPendingBit+0x22>
 8001264:	2908      	cmp	r1, #8
 8001266:	d024      	beq.n	80012b2 <CAN_ClearITPendingBit+0x56>
 8001268:	d804      	bhi.n	8001274 <CAN_ClearITPendingBit+0x18>
 800126a:	2901      	cmp	r1, #1
 800126c:	d01c      	beq.n	80012a8 <CAN_ClearITPendingBit+0x4c>
 800126e:	2904      	cmp	r1, #4
 8001270:	d01d      	beq.n	80012ae <CAN_ClearITPendingBit+0x52>
 8001272:	4770      	bx	lr
 8001274:	2920      	cmp	r1, #32
 8001276:	d01f      	beq.n	80012b8 <CAN_ClearITPendingBit+0x5c>
 8001278:	2940      	cmp	r1, #64	; 0x40
 800127a:	d01f      	beq.n	80012bc <CAN_ClearITPendingBit+0x60>
 800127c:	4770      	bx	lr
 800127e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001282:	d022      	beq.n	80012ca <CAN_ClearITPendingBit+0x6e>
 8001284:	d806      	bhi.n	8001294 <CAN_ClearITPendingBit+0x38>
 8001286:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800128a:	d020      	beq.n	80012ce <CAN_ClearITPendingBit+0x72>
 800128c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001290:	d01d      	beq.n	80012ce <CAN_ClearITPendingBit+0x72>
 8001292:	4770      	bx	lr
 8001294:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001298:	d013      	beq.n	80012c2 <CAN_ClearITPendingBit+0x66>
 800129a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800129e:	d012      	beq.n	80012c6 <CAN_ClearITPendingBit+0x6a>
 80012a0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80012a4:	d115      	bne.n	80012d2 <CAN_ClearITPendingBit+0x76>
 80012a6:	e010      	b.n	80012ca <CAN_ClearITPendingBit+0x6e>
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <CAN_ClearITPendingBit+0x78>)
 80012aa:	6083      	str	r3, [r0, #8]
 80012ac:	4770      	bx	lr
 80012ae:	2308      	movs	r3, #8
 80012b0:	e000      	b.n	80012b4 <CAN_ClearITPendingBit+0x58>
 80012b2:	2310      	movs	r3, #16
 80012b4:	60c3      	str	r3, [r0, #12]
 80012b6:	4770      	bx	lr
 80012b8:	2308      	movs	r3, #8
 80012ba:	e000      	b.n	80012be <CAN_ClearITPendingBit+0x62>
 80012bc:	2310      	movs	r3, #16
 80012be:	6103      	str	r3, [r0, #16]
 80012c0:	4770      	bx	lr
 80012c2:	2308      	movs	r3, #8
 80012c4:	e004      	b.n	80012d0 <CAN_ClearITPendingBit+0x74>
 80012c6:	2310      	movs	r3, #16
 80012c8:	e002      	b.n	80012d0 <CAN_ClearITPendingBit+0x74>
 80012ca:	2300      	movs	r3, #0
 80012cc:	6183      	str	r3, [r0, #24]
 80012ce:	2304      	movs	r3, #4
 80012d0:	6043      	str	r3, [r0, #4]
 80012d2:	4770      	bx	lr
 80012d4:	00010101 	.word	0x00010101

080012d8 <CEC_DeInit>:
 80012d8:	b508      	push	{r3, lr}
 80012da:	2101      	movs	r1, #1
 80012dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012e0:	f001 fc28 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 80012e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012e8:	2100      	movs	r1, #0
 80012ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012ee:	f001 bc21 	b.w	8002b34 <RCC_APB1PeriphResetCmd>

080012f2 <CEC_Init>:
 80012f2:	b510      	push	{r4, lr}
 80012f4:	4c05      	ldr	r4, [pc, #20]	; (800130c <CEC_Init+0x1a>)
 80012f6:	8842      	ldrh	r2, [r0, #2]
 80012f8:	6823      	ldr	r3, [r4, #0]
 80012fa:	f003 01f3 	and.w	r1, r3, #243	; 0xf3
 80012fe:	8803      	ldrh	r3, [r0, #0]
 8001300:	4313      	orrs	r3, r2
 8001302:	430b      	orrs	r3, r1
 8001304:	b29b      	uxth	r3, r3
 8001306:	6023      	str	r3, [r4, #0]
 8001308:	bd10      	pop	{r4, pc}
 800130a:	bf00      	nop
 800130c:	40007800 	.word	0x40007800

08001310 <CEC_Cmd>:
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <CEC_Cmd+0x10>)
 8001312:	6018      	str	r0, [r3, #0]
 8001314:	b918      	cbnz	r0, 800131e <CEC_Cmd+0xe>
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <CEC_Cmd+0x14>)
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	07db      	lsls	r3, r3, #31
 800131c:	d4fc      	bmi.n	8001318 <CEC_Cmd+0x8>
 800131e:	4770      	bx	lr
 8001320:	420f0000 	.word	0x420f0000
 8001324:	40007800 	.word	0x40007800

08001328 <CEC_ITConfig>:
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <CEC_ITConfig+0x8>)
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	420f0004 	.word	0x420f0004

08001334 <CEC_OwnAddressConfig>:
 8001334:	4b01      	ldr	r3, [pc, #4]	; (800133c <CEC_OwnAddressConfig+0x8>)
 8001336:	6058      	str	r0, [r3, #4]
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007800 	.word	0x40007800

08001340 <CEC_SetPrescaler>:
 8001340:	4b01      	ldr	r3, [pc, #4]	; (8001348 <CEC_SetPrescaler+0x8>)
 8001342:	6098      	str	r0, [r3, #8]
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40007800 	.word	0x40007800

0800134c <CEC_SendDataByte>:
 800134c:	4b01      	ldr	r3, [pc, #4]	; (8001354 <CEC_SendDataByte+0x8>)
 800134e:	6158      	str	r0, [r3, #20]
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40007800 	.word	0x40007800

08001358 <CEC_ReceiveDataByte>:
 8001358:	4b01      	ldr	r3, [pc, #4]	; (8001360 <CEC_ReceiveDataByte+0x8>)
 800135a:	6998      	ldr	r0, [r3, #24]
 800135c:	b2c0      	uxtb	r0, r0
 800135e:	4770      	bx	lr
 8001360:	40007800 	.word	0x40007800

08001364 <CEC_StartOfMessage>:
 8001364:	4b01      	ldr	r3, [pc, #4]	; (800136c <CEC_StartOfMessage+0x8>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4770      	bx	lr
 800136c:	420f0200 	.word	0x420f0200

08001370 <CEC_EndOfMessageCmd>:
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <CEC_EndOfMessageCmd+0x8>)
 8001372:	6018      	str	r0, [r3, #0]
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	420f0204 	.word	0x420f0204

0800137c <CEC_GetFlagStatus>:
 800137c:	0f02      	lsrs	r2, r0, #28
 800137e:	bf14      	ite	ne
 8001380:	4a05      	ldrne	r2, [pc, #20]	; (8001398 <CEC_GetFlagStatus+0x1c>)
 8001382:	4a06      	ldreq	r2, [pc, #24]	; (800139c <CEC_GetFlagStatus+0x20>)
 8001384:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	bf18      	it	ne
 800138c:	0c1b      	lsrne	r3, r3, #16
 800138e:	4213      	tst	r3, r2
 8001390:	bf14      	ite	ne
 8001392:	2001      	movne	r0, #1
 8001394:	2000      	moveq	r0, #0
 8001396:	4770      	bx	lr
 8001398:	4000780c 	.word	0x4000780c
 800139c:	40007810 	.word	0x40007810

080013a0 <CEC_ClearFlag>:
 80013a0:	43c0      	mvns	r0, r0
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <CEC_ClearFlag+0x18>)
 80013a4:	f020 0003 	bic.w	r0, r0, #3
 80013a8:	6913      	ldr	r3, [r2, #16]
 80013aa:	6911      	ldr	r1, [r2, #16]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	4303      	orrs	r3, r0
 80013b2:	400b      	ands	r3, r1
 80013b4:	6113      	str	r3, [r2, #16]
 80013b6:	4770      	bx	lr
 80013b8:	40007800 	.word	0x40007800

080013bc <CEC_GetITStatus>:
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <CEC_GetITStatus+0x10>)
 80013be:	6811      	ldr	r1, [r2, #0]
 80013c0:	6913      	ldr	r3, [r2, #16]
 80013c2:	4018      	ands	r0, r3
 80013c4:	bf18      	it	ne
 80013c6:	f3c1 0040 	ubfxne	r0, r1, #1, #1
 80013ca:	4770      	bx	lr
 80013cc:	40007800 	.word	0x40007800

080013d0 <CEC_ClearITPendingBit>:
 80013d0:	43c0      	mvns	r0, r0
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <CEC_ClearITPendingBit+0x18>)
 80013d4:	f020 0003 	bic.w	r0, r0, #3
 80013d8:	6913      	ldr	r3, [r2, #16]
 80013da:	6911      	ldr	r1, [r2, #16]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	4303      	orrs	r3, r0
 80013e2:	400b      	ands	r3, r1
 80013e4:	6113      	str	r3, [r2, #16]
 80013e6:	4770      	bx	lr
 80013e8:	40007800 	.word	0x40007800

080013ec <CRC_ResetDR>:
 80013ec:	4b01      	ldr	r3, [pc, #4]	; (80013f4 <CRC_ResetDR+0x8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	4770      	bx	lr
 80013f4:	40023000 	.word	0x40023000

080013f8 <CRC_CalcCRC>:
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <CRC_CalcCRC+0x8>)
 80013fa:	6018      	str	r0, [r3, #0]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	4770      	bx	lr
 8001400:	40023000 	.word	0x40023000

08001404 <CRC_CalcBlockCRC>:
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <CRC_CalcBlockCRC+0x18>)
 8001406:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800140a:	4288      	cmp	r0, r1
 800140c:	d003      	beq.n	8001416 <CRC_CalcBlockCRC+0x12>
 800140e:	f850 2b04 	ldr.w	r2, [r0], #4
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e7f9      	b.n	800140a <CRC_CalcBlockCRC+0x6>
 8001416:	4b01      	ldr	r3, [pc, #4]	; (800141c <CRC_CalcBlockCRC+0x18>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	4770      	bx	lr
 800141c:	40023000 	.word	0x40023000

08001420 <CRC_GetCRC>:
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <CRC_GetCRC+0x8>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023000 	.word	0x40023000

0800142c <CRC_SetIDRegister>:
 800142c:	4b01      	ldr	r3, [pc, #4]	; (8001434 <CRC_SetIDRegister+0x8>)
 800142e:	7118      	strb	r0, [r3, #4]
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023000 	.word	0x40023000

08001438 <CRC_GetIDRegister>:
 8001438:	4b01      	ldr	r3, [pc, #4]	; (8001440 <CRC_GetIDRegister+0x8>)
 800143a:	7918      	ldrb	r0, [r3, #4]
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023000 	.word	0x40023000

08001444 <DAC_DeInit>:
 8001444:	b508      	push	{r3, lr}
 8001446:	2101      	movs	r1, #1
 8001448:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800144c:	f001 fb72 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8001450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001454:	2100      	movs	r1, #0
 8001456:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800145a:	f001 bb6b 	b.w	8002b34 <RCC_APB1PeriphResetCmd>

0800145e <DAC_Init>:
 800145e:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001462:	b530      	push	{r4, r5, lr}
 8001464:	4d08      	ldr	r5, [pc, #32]	; (8001488 <DAC_Init+0x2a>)
 8001466:	4083      	lsls	r3, r0
 8001468:	682a      	ldr	r2, [r5, #0]
 800146a:	ea22 0303 	bic.w	r3, r2, r3
 800146e:	e891 0014 	ldmia.w	r1, {r2, r4}
 8001472:	4314      	orrs	r4, r2
 8001474:	688a      	ldr	r2, [r1, #8]
 8001476:	4314      	orrs	r4, r2
 8001478:	68ca      	ldr	r2, [r1, #12]
 800147a:	4322      	orrs	r2, r4
 800147c:	fa02 f000 	lsl.w	r0, r2, r0
 8001480:	4318      	orrs	r0, r3
 8001482:	6028      	str	r0, [r5, #0]
 8001484:	bd30      	pop	{r4, r5, pc}
 8001486:	bf00      	nop
 8001488:	40007400 	.word	0x40007400

0800148c <DAC_StructInit>:
 800148c:	2300      	movs	r3, #0
 800148e:	6003      	str	r3, [r0, #0]
 8001490:	6043      	str	r3, [r0, #4]
 8001492:	6083      	str	r3, [r0, #8]
 8001494:	60c3      	str	r3, [r0, #12]
 8001496:	4770      	bx	lr

08001498 <DAC_Cmd>:
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <DAC_Cmd+0x1c>)
 800149a:	2301      	movs	r3, #1
 800149c:	b119      	cbz	r1, 80014a6 <DAC_Cmd+0xe>
 800149e:	6811      	ldr	r1, [r2, #0]
 80014a0:	4083      	lsls	r3, r0
 80014a2:	430b      	orrs	r3, r1
 80014a4:	e003      	b.n	80014ae <DAC_Cmd+0x16>
 80014a6:	6811      	ldr	r1, [r2, #0]
 80014a8:	4083      	lsls	r3, r0
 80014aa:	ea21 0303 	bic.w	r3, r1, r3
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40007400 	.word	0x40007400

080014b8 <DAC_DMACmd>:
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <DAC_DMACmd+0x1c>)
 80014ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014be:	b119      	cbz	r1, 80014c8 <DAC_DMACmd+0x10>
 80014c0:	6811      	ldr	r1, [r2, #0]
 80014c2:	4083      	lsls	r3, r0
 80014c4:	430b      	orrs	r3, r1
 80014c6:	e003      	b.n	80014d0 <DAC_DMACmd+0x18>
 80014c8:	6811      	ldr	r1, [r2, #0]
 80014ca:	4083      	lsls	r3, r0
 80014cc:	ea21 0303 	bic.w	r3, r1, r3
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4770      	bx	lr
 80014d4:	40007400 	.word	0x40007400

080014d8 <DAC_SoftwareTriggerCmd>:
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <DAC_SoftwareTriggerCmd+0x1c>)
 80014da:	0900      	lsrs	r0, r0, #4
 80014dc:	2301      	movs	r3, #1
 80014de:	b119      	cbz	r1, 80014e8 <DAC_SoftwareTriggerCmd+0x10>
 80014e0:	6851      	ldr	r1, [r2, #4]
 80014e2:	4083      	lsls	r3, r0
 80014e4:	430b      	orrs	r3, r1
 80014e6:	e003      	b.n	80014f0 <DAC_SoftwareTriggerCmd+0x18>
 80014e8:	6851      	ldr	r1, [r2, #4]
 80014ea:	4083      	lsls	r3, r0
 80014ec:	ea21 0303 	bic.w	r3, r1, r3
 80014f0:	6053      	str	r3, [r2, #4]
 80014f2:	4770      	bx	lr
 80014f4:	40007400 	.word	0x40007400

080014f8 <DAC_DualSoftwareTriggerCmd>:
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <DAC_DualSoftwareTriggerCmd+0x14>)
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	b110      	cbz	r0, 8001504 <DAC_DualSoftwareTriggerCmd+0xc>
 80014fe:	f042 0203 	orr.w	r2, r2, #3
 8001502:	e001      	b.n	8001508 <DAC_DualSoftwareTriggerCmd+0x10>
 8001504:	f022 0203 	bic.w	r2, r2, #3
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	4770      	bx	lr
 800150c:	40007400 	.word	0x40007400

08001510 <DAC_WaveGenerationCmd>:
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <DAC_WaveGenerationCmd+0x18>)
 8001512:	4081      	lsls	r1, r0
 8001514:	b112      	cbz	r2, 800151c <DAC_WaveGenerationCmd+0xc>
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4311      	orrs	r1, r2
 800151a:	e002      	b.n	8001522 <DAC_WaveGenerationCmd+0x12>
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	ea22 0101 	bic.w	r1, r2, r1
 8001522:	6019      	str	r1, [r3, #0]
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007400 	.word	0x40007400

0800152c <DAC_SetChannel1Data>:
 800152c:	b082      	sub	sp, #8
 800152e:	2300      	movs	r3, #0
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <DAC_SetChannel1Data+0x1c>)
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	9b01      	ldr	r3, [sp, #4]
 8001538:	3308      	adds	r3, #8
 800153a:	4418      	add	r0, r3
 800153c:	9001      	str	r0, [sp, #4]
 800153e:	9b01      	ldr	r3, [sp, #4]
 8001540:	6019      	str	r1, [r3, #0]
 8001542:	b002      	add	sp, #8
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40007400 	.word	0x40007400

0800154c <DAC_SetChannel2Data>:
 800154c:	b082      	sub	sp, #8
 800154e:	2300      	movs	r3, #0
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <DAC_SetChannel2Data+0x1c>)
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	3314      	adds	r3, #20
 800155a:	4418      	add	r0, r3
 800155c:	9001      	str	r0, [sp, #4]
 800155e:	9b01      	ldr	r3, [sp, #4]
 8001560:	6019      	str	r1, [r3, #0]
 8001562:	b002      	add	sp, #8
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007400 	.word	0x40007400

0800156c <DAC_SetDualChannelData>:
 800156c:	2808      	cmp	r0, #8
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <DAC_SetDualChannelData+0x14>)
 8001570:	bf0c      	ite	eq
 8001572:	ea42 2201 	orreq.w	r2, r2, r1, lsl #8
 8001576:	ea42 4201 	orrne.w	r2, r2, r1, lsl #16
 800157a:	50c2      	str	r2, [r0, r3]
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40007420 	.word	0x40007420

08001584 <DAC_GetDataOutputValue>:
 8001584:	b082      	sub	sp, #8
 8001586:	2300      	movs	r3, #0
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <DAC_GetDataOutputValue+0x20>)
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	9b01      	ldr	r3, [sp, #4]
 8001590:	332c      	adds	r3, #44	; 0x2c
 8001592:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8001596:	9001      	str	r0, [sp, #4]
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	b280      	uxth	r0, r0
 800159e:	b002      	add	sp, #8
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007400 	.word	0x40007400

080015a8 <DMA_DeInit>:
 80015a8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80015ac:	6802      	ldr	r2, [r0, #0]
 80015ae:	4013      	ands	r3, r2
 80015b0:	6003      	str	r3, [r0, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	6003      	str	r3, [r0, #0]
 80015b6:	6043      	str	r3, [r0, #4]
 80015b8:	6083      	str	r3, [r0, #8]
 80015ba:	60c3      	str	r3, [r0, #12]
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <DMA_DeInit+0xb8>)
 80015be:	4298      	cmp	r0, r3
 80015c0:	d101      	bne.n	80015c6 <DMA_DeInit+0x1e>
 80015c2:	4a28      	ldr	r2, [pc, #160]	; (8001664 <DMA_DeInit+0xbc>)
 80015c4:	e027      	b.n	8001616 <DMA_DeInit+0x6e>
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <DMA_DeInit+0xc0>)
 80015c8:	4298      	cmp	r0, r3
 80015ca:	d101      	bne.n	80015d0 <DMA_DeInit+0x28>
 80015cc:	4a25      	ldr	r2, [pc, #148]	; (8001664 <DMA_DeInit+0xbc>)
 80015ce:	e02a      	b.n	8001626 <DMA_DeInit+0x7e>
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <DMA_DeInit+0xc4>)
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d101      	bne.n	80015da <DMA_DeInit+0x32>
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <DMA_DeInit+0xbc>)
 80015d8:	e02d      	b.n	8001636 <DMA_DeInit+0x8e>
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <DMA_DeInit+0xc8>)
 80015dc:	4298      	cmp	r0, r3
 80015de:	d101      	bne.n	80015e4 <DMA_DeInit+0x3c>
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <DMA_DeInit+0xbc>)
 80015e2:	e030      	b.n	8001646 <DMA_DeInit+0x9e>
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <DMA_DeInit+0xcc>)
 80015e6:	4298      	cmp	r0, r3
 80015e8:	d101      	bne.n	80015ee <DMA_DeInit+0x46>
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <DMA_DeInit+0xbc>)
 80015ec:	e033      	b.n	8001656 <DMA_DeInit+0xae>
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <DMA_DeInit+0xd0>)
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d104      	bne.n	80015fe <DMA_DeInit+0x56>
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <DMA_DeInit+0xbc>)
 80015f6:	6853      	ldr	r3, [r2, #4]
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	e02e      	b.n	800165c <DMA_DeInit+0xb4>
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <DMA_DeInit+0xd4>)
 8001600:	4298      	cmp	r0, r3
 8001602:	d104      	bne.n	800160e <DMA_DeInit+0x66>
 8001604:	4a17      	ldr	r2, [pc, #92]	; (8001664 <DMA_DeInit+0xbc>)
 8001606:	6853      	ldr	r3, [r2, #4]
 8001608:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800160c:	e026      	b.n	800165c <DMA_DeInit+0xb4>
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <DMA_DeInit+0xd8>)
 8001610:	4298      	cmp	r0, r3
 8001612:	d104      	bne.n	800161e <DMA_DeInit+0x76>
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <DMA_DeInit+0xdc>)
 8001616:	6853      	ldr	r3, [r2, #4]
 8001618:	f043 030f 	orr.w	r3, r3, #15
 800161c:	e01e      	b.n	800165c <DMA_DeInit+0xb4>
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <DMA_DeInit+0xe0>)
 8001620:	4298      	cmp	r0, r3
 8001622:	d104      	bne.n	800162e <DMA_DeInit+0x86>
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <DMA_DeInit+0xdc>)
 8001626:	6853      	ldr	r3, [r2, #4]
 8001628:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800162c:	e016      	b.n	800165c <DMA_DeInit+0xb4>
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <DMA_DeInit+0xe4>)
 8001630:	4298      	cmp	r0, r3
 8001632:	d104      	bne.n	800163e <DMA_DeInit+0x96>
 8001634:	4a13      	ldr	r2, [pc, #76]	; (8001684 <DMA_DeInit+0xdc>)
 8001636:	6853      	ldr	r3, [r2, #4]
 8001638:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800163c:	e00e      	b.n	800165c <DMA_DeInit+0xb4>
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <DMA_DeInit+0xe8>)
 8001640:	4298      	cmp	r0, r3
 8001642:	d104      	bne.n	800164e <DMA_DeInit+0xa6>
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <DMA_DeInit+0xdc>)
 8001646:	6853      	ldr	r3, [r2, #4]
 8001648:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800164c:	e006      	b.n	800165c <DMA_DeInit+0xb4>
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <DMA_DeInit+0xec>)
 8001650:	4298      	cmp	r0, r3
 8001652:	d104      	bne.n	800165e <DMA_DeInit+0xb6>
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <DMA_DeInit+0xdc>)
 8001656:	6853      	ldr	r3, [r2, #4]
 8001658:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800165c:	6053      	str	r3, [r2, #4]
 800165e:	4770      	bx	lr
 8001660:	40020008 	.word	0x40020008
 8001664:	40020000 	.word	0x40020000
 8001668:	4002001c 	.word	0x4002001c
 800166c:	40020030 	.word	0x40020030
 8001670:	40020044 	.word	0x40020044
 8001674:	40020058 	.word	0x40020058
 8001678:	4002006c 	.word	0x4002006c
 800167c:	40020080 	.word	0x40020080
 8001680:	40020408 	.word	0x40020408
 8001684:	40020400 	.word	0x40020400
 8001688:	4002041c 	.word	0x4002041c
 800168c:	40020430 	.word	0x40020430
 8001690:	40020444 	.word	0x40020444
 8001694:	40020458 	.word	0x40020458

08001698 <DMA_Init>:
 8001698:	6a0a      	ldr	r2, [r1, #32]
 800169a:	b510      	push	{r4, lr}
 800169c:	688c      	ldr	r4, [r1, #8]
 800169e:	6803      	ldr	r3, [r0, #0]
 80016a0:	4314      	orrs	r4, r2
 80016a2:	690a      	ldr	r2, [r1, #16]
 80016a4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016a8:	4314      	orrs	r4, r2
 80016aa:	694a      	ldr	r2, [r1, #20]
 80016ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016b0:	4314      	orrs	r4, r2
 80016b2:	698a      	ldr	r2, [r1, #24]
 80016b4:	4314      	orrs	r4, r2
 80016b6:	69ca      	ldr	r2, [r1, #28]
 80016b8:	4314      	orrs	r4, r2
 80016ba:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80016bc:	4314      	orrs	r4, r2
 80016be:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80016c0:	4322      	orrs	r2, r4
 80016c2:	4313      	orrs	r3, r2
 80016c4:	6003      	str	r3, [r0, #0]
 80016c6:	68cb      	ldr	r3, [r1, #12]
 80016c8:	6043      	str	r3, [r0, #4]
 80016ca:	680b      	ldr	r3, [r1, #0]
 80016cc:	6083      	str	r3, [r0, #8]
 80016ce:	684b      	ldr	r3, [r1, #4]
 80016d0:	60c3      	str	r3, [r0, #12]
 80016d2:	bd10      	pop	{r4, pc}

080016d4 <DMA_StructInit>:
 80016d4:	2300      	movs	r3, #0
 80016d6:	6003      	str	r3, [r0, #0]
 80016d8:	6043      	str	r3, [r0, #4]
 80016da:	6083      	str	r3, [r0, #8]
 80016dc:	60c3      	str	r3, [r0, #12]
 80016de:	6103      	str	r3, [r0, #16]
 80016e0:	6143      	str	r3, [r0, #20]
 80016e2:	6183      	str	r3, [r0, #24]
 80016e4:	61c3      	str	r3, [r0, #28]
 80016e6:	6203      	str	r3, [r0, #32]
 80016e8:	6243      	str	r3, [r0, #36]	; 0x24
 80016ea:	6283      	str	r3, [r0, #40]	; 0x28
 80016ec:	4770      	bx	lr

080016ee <DMA_Cmd>:
 80016ee:	b119      	cbz	r1, 80016f8 <DMA_Cmd+0xa>
 80016f0:	6803      	ldr	r3, [r0, #0]
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	e003      	b.n	8001700 <DMA_Cmd+0x12>
 80016f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80016fc:	6802      	ldr	r2, [r0, #0]
 80016fe:	4013      	ands	r3, r2
 8001700:	6003      	str	r3, [r0, #0]
 8001702:	4770      	bx	lr

08001704 <DMA_ITConfig>:
 8001704:	6803      	ldr	r3, [r0, #0]
 8001706:	b10a      	cbz	r2, 800170c <DMA_ITConfig+0x8>
 8001708:	4319      	orrs	r1, r3
 800170a:	e001      	b.n	8001710 <DMA_ITConfig+0xc>
 800170c:	ea23 0101 	bic.w	r1, r3, r1
 8001710:	6001      	str	r1, [r0, #0]
 8001712:	4770      	bx	lr

08001714 <DMA_SetCurrDataCounter>:
 8001714:	6041      	str	r1, [r0, #4]
 8001716:	4770      	bx	lr

08001718 <DMA_GetCurrDataCounter>:
 8001718:	6840      	ldr	r0, [r0, #4]
 800171a:	b280      	uxth	r0, r0
 800171c:	4770      	bx	lr

0800171e <DMA_GetITStatus>:
 800171e:	00c3      	lsls	r3, r0, #3
 8001720:	bf4c      	ite	mi
 8001722:	4b04      	ldrmi	r3, [pc, #16]	; (8001734 <DMA_GetITStatus+0x16>)
 8001724:	4b04      	ldrpl	r3, [pc, #16]	; (8001738 <DMA_GetITStatus+0x1a>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4203      	tst	r3, r0
 800172a:	bf14      	ite	ne
 800172c:	2001      	movne	r0, #1
 800172e:	2000      	moveq	r0, #0
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40020400 	.word	0x40020400
 8001738:	40020000 	.word	0x40020000

0800173c <DMA_GetFlagStatus>:
 800173c:	f7ff bfef 	b.w	800171e <DMA_GetITStatus>

08001740 <DMA_ClearITPendingBit>:
 8001740:	00c3      	lsls	r3, r0, #3
 8001742:	bf4c      	ite	mi
 8001744:	4b01      	ldrmi	r3, [pc, #4]	; (800174c <DMA_ClearITPendingBit+0xc>)
 8001746:	4b02      	ldrpl	r3, [pc, #8]	; (8001750 <DMA_ClearITPendingBit+0x10>)
 8001748:	6058      	str	r0, [r3, #4]
 800174a:	4770      	bx	lr
 800174c:	40020400 	.word	0x40020400
 8001750:	40020000 	.word	0x40020000

08001754 <DMA_ClearFlag>:
 8001754:	f7ff bff4 	b.w	8001740 <DMA_ClearITPendingBit>

08001758 <EXTI_DeInit>:
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <EXTI_DeInit+0x14>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	4a02      	ldr	r2, [pc, #8]	; (8001770 <EXTI_DeInit+0x18>)
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40010400 	.word	0x40010400
 8001770:	000fffff 	.word	0x000fffff

08001774 <EXTI_Init>:
 8001774:	7982      	ldrb	r2, [r0, #6]
 8001776:	b570      	push	{r4, r5, r6, lr}
 8001778:	6801      	ldr	r1, [r0, #0]
 800177a:	7903      	ldrb	r3, [r0, #4]
 800177c:	b342      	cbz	r2, 80017d0 <EXTI_Init+0x5c>
 800177e:	43ce      	mvns	r6, r1
 8001780:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <EXTI_Init+0x70>)
 8001782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001786:	6815      	ldr	r5, [r2, #0]
 8001788:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 800178c:	4035      	ands	r5, r6
 800178e:	6015      	str	r5, [r2, #0]
 8001790:	6854      	ldr	r4, [r2, #4]
 8001792:	4034      	ands	r4, r6
 8001794:	6054      	str	r4, [r2, #4]
 8001796:	681c      	ldr	r4, [r3, #0]
 8001798:	4321      	orrs	r1, r4
 800179a:	6019      	str	r1, [r3, #0]
 800179c:	6801      	ldr	r1, [r0, #0]
 800179e:	6894      	ldr	r4, [r2, #8]
 80017a0:	43cd      	mvns	r5, r1
 80017a2:	402c      	ands	r4, r5
 80017a4:	6094      	str	r4, [r2, #8]
 80017a6:	68d3      	ldr	r3, [r2, #12]
 80017a8:	402b      	ands	r3, r5
 80017aa:	60d3      	str	r3, [r2, #12]
 80017ac:	7943      	ldrb	r3, [r0, #5]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d106      	bne.n	80017c0 <EXTI_Init+0x4c>
 80017b2:	6893      	ldr	r3, [r2, #8]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6093      	str	r3, [r2, #8]
 80017b8:	68d3      	ldr	r3, [r2, #12]
 80017ba:	4319      	orrs	r1, r3
 80017bc:	60d1      	str	r1, [r2, #12]
 80017be:	bd70      	pop	{r4, r5, r6, pc}
 80017c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017c4:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4311      	orrs	r1, r2
 80017cc:	6019      	str	r1, [r3, #0]
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
 80017d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017d4:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	ea22 0201 	bic.w	r2, r2, r1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
 80017e2:	bf00      	nop
 80017e4:	40010400 	.word	0x40010400

080017e8 <EXTI_StructInit>:
 80017e8:	2300      	movs	r3, #0
 80017ea:	220c      	movs	r2, #12
 80017ec:	6003      	str	r3, [r0, #0]
 80017ee:	7103      	strb	r3, [r0, #4]
 80017f0:	7142      	strb	r2, [r0, #5]
 80017f2:	7183      	strb	r3, [r0, #6]
 80017f4:	4770      	bx	lr

080017f6 <EXTI_GenerateSWInterrupt>:
 80017f6:	4a02      	ldr	r2, [pc, #8]	; (8001800 <EXTI_GenerateSWInterrupt+0xa>)
 80017f8:	6913      	ldr	r3, [r2, #16]
 80017fa:	4318      	orrs	r0, r3
 80017fc:	6110      	str	r0, [r2, #16]
 80017fe:	4770      	bx	lr
 8001800:	40010400 	.word	0x40010400

08001804 <EXTI_GetFlagStatus>:
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <EXTI_GetFlagStatus+0x10>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	4203      	tst	r3, r0
 800180a:	bf14      	ite	ne
 800180c:	2001      	movne	r0, #1
 800180e:	2000      	moveq	r0, #0
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40010400 	.word	0x40010400

08001818 <EXTI_ClearFlag>:
 8001818:	4b01      	ldr	r3, [pc, #4]	; (8001820 <EXTI_ClearFlag+0x8>)
 800181a:	6158      	str	r0, [r3, #20]
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40010400 	.word	0x40010400

08001824 <EXTI_GetITStatus>:
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <EXTI_GetITStatus+0x18>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	4003      	ands	r3, r0
 800182c:	d004      	beq.n	8001838 <EXTI_GetITStatus+0x14>
 800182e:	4202      	tst	r2, r0
 8001830:	bf14      	ite	ne
 8001832:	2001      	movne	r0, #1
 8001834:	2000      	moveq	r0, #0
 8001836:	4770      	bx	lr
 8001838:	4618      	mov	r0, r3
 800183a:	4770      	bx	lr
 800183c:	40010400 	.word	0x40010400

08001840 <EXTI_ClearITPendingBit>:
 8001840:	4b01      	ldr	r3, [pc, #4]	; (8001848 <EXTI_ClearITPendingBit+0x8>)
 8001842:	6158      	str	r0, [r3, #20]
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40010400 	.word	0x40010400

0800184c <FLASH_SetLatency>:
 800184c:	4a03      	ldr	r2, [pc, #12]	; (800185c <FLASH_SetLatency+0x10>)
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001854:	4318      	orrs	r0, r3
 8001856:	6010      	str	r0, [r2, #0]
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <FLASH_HalfCycleAccessCmd>:
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <FLASH_HalfCycleAccessCmd+0x14>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f022 0208 	bic.w	r2, r2, #8
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4310      	orrs	r0, r2
 800186e:	6018      	str	r0, [r3, #0]
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000

08001878 <FLASH_PrefetchBufferCmd>:
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <FLASH_PrefetchBufferCmd+0x14>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f022 0210 	bic.w	r2, r2, #16
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4310      	orrs	r0, r2
 8001886:	6018      	str	r0, [r3, #0]
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40022000 	.word	0x40022000

08001890 <FLASH_UnlockBank1>:
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <FLASH_UnlockBank1+0x10>)
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <FLASH_UnlockBank1+0x14>)
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000
 80018a4:	45670123 	.word	0x45670123

080018a8 <FLASH_Unlock>:
 80018a8:	f7ff bff2 	b.w	8001890 <FLASH_UnlockBank1>

080018ac <FLASH_LockBank1>:
 80018ac:	4a02      	ldr	r2, [pc, #8]	; (80018b8 <FLASH_LockBank1+0xc>)
 80018ae:	6913      	ldr	r3, [r2, #16]
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	6113      	str	r3, [r2, #16]
 80018b6:	4770      	bx	lr
 80018b8:	40022000 	.word	0x40022000

080018bc <FLASH_Lock>:
 80018bc:	f7ff bff6 	b.w	80018ac <FLASH_LockBank1>

080018c0 <FLASH_GetUserOptionByte>:
 80018c0:	4b01      	ldr	r3, [pc, #4]	; (80018c8 <FLASH_GetUserOptionByte+0x8>)
 80018c2:	69d8      	ldr	r0, [r3, #28]
 80018c4:	0880      	lsrs	r0, r0, #2
 80018c6:	4770      	bx	lr
 80018c8:	40022000 	.word	0x40022000

080018cc <FLASH_GetWriteProtectionOptionByte>:
 80018cc:	4b01      	ldr	r3, [pc, #4]	; (80018d4 <FLASH_GetWriteProtectionOptionByte+0x8>)
 80018ce:	6a18      	ldr	r0, [r3, #32]
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000

080018d8 <FLASH_GetReadOutProtectionStatus>:
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <FLASH_GetReadOutProtectionStatus+0xc>)
 80018da:	69d8      	ldr	r0, [r3, #28]
 80018dc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40022000 	.word	0x40022000

080018e8 <FLASH_GetPrefetchBufferStatus>:
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <FLASH_GetPrefetchBufferStatus+0xc>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000

080018f8 <FLASH_ITConfig>:
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <FLASH_ITConfig+0x14>)
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	b109      	cbz	r1, 8001902 <FLASH_ITConfig+0xa>
 80018fe:	4310      	orrs	r0, r2
 8001900:	e001      	b.n	8001906 <FLASH_ITConfig+0xe>
 8001902:	ea22 0000 	bic.w	r0, r2, r0
 8001906:	6118      	str	r0, [r3, #16]
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000

08001910 <FLASH_GetFlagStatus>:
 8001910:	2801      	cmp	r0, #1
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <FLASH_GetFlagStatus+0x1c>)
 8001914:	d103      	bne.n	800191e <FLASH_GetFlagStatus+0xe>
 8001916:	69d8      	ldr	r0, [r3, #28]
 8001918:	f000 0001 	and.w	r0, r0, #1
 800191c:	4770      	bx	lr
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4218      	tst	r0, r3
 8001922:	bf14      	ite	ne
 8001924:	2001      	movne	r0, #1
 8001926:	2000      	moveq	r0, #0
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000

08001930 <FLASH_ClearFlag>:
 8001930:	4b01      	ldr	r3, [pc, #4]	; (8001938 <FLASH_ClearFlag+0x8>)
 8001932:	60d8      	str	r0, [r3, #12]
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <FLASH_GetStatus>:
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <FLASH_GetStatus+0x24>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	07d1      	lsls	r1, r2, #31
 8001942:	d409      	bmi.n	8001958 <FLASH_GetStatus+0x1c>
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	0752      	lsls	r2, r2, #29
 8001948:	d408      	bmi.n	800195c <FLASH_GetStatus+0x20>
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f013 0f10 	tst.w	r3, #16
 8001950:	bf14      	ite	ne
 8001952:	2003      	movne	r0, #3
 8001954:	2004      	moveq	r0, #4
 8001956:	4770      	bx	lr
 8001958:	2001      	movs	r0, #1
 800195a:	4770      	bx	lr
 800195c:	2002      	movs	r0, #2
 800195e:	4770      	bx	lr
 8001960:	40022000 	.word	0x40022000

08001964 <FLASH_GetBank1Status>:
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <FLASH_GetBank1Status+0x24>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	07d1      	lsls	r1, r2, #31
 800196a:	d409      	bmi.n	8001980 <FLASH_GetBank1Status+0x1c>
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	0752      	lsls	r2, r2, #29
 8001970:	d408      	bmi.n	8001984 <FLASH_GetBank1Status+0x20>
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f013 0f10 	tst.w	r3, #16
 8001978:	bf14      	ite	ne
 800197a:	2003      	movne	r0, #3
 800197c:	2004      	moveq	r0, #4
 800197e:	4770      	bx	lr
 8001980:	2001      	movs	r0, #1
 8001982:	4770      	bx	lr
 8001984:	2002      	movs	r0, #2
 8001986:	4770      	bx	lr
 8001988:	40022000 	.word	0x40022000

0800198c <FLASH_WaitForLastBank1Operation>:
 800198c:	b510      	push	{r4, lr}
 800198e:	4604      	mov	r4, r0
 8001990:	f7ff ffe8 	bl	8001964 <FLASH_GetBank1Status>
 8001994:	2801      	cmp	r0, #1
 8001996:	d106      	bne.n	80019a6 <FLASH_WaitForLastBank1Operation+0x1a>
 8001998:	b11c      	cbz	r4, 80019a2 <FLASH_WaitForLastBank1Operation+0x16>
 800199a:	f7ff ffe3 	bl	8001964 <FLASH_GetBank1Status>
 800199e:	3c01      	subs	r4, #1
 80019a0:	e7f8      	b.n	8001994 <FLASH_WaitForLastBank1Operation+0x8>
 80019a2:	2005      	movs	r0, #5
 80019a4:	bd10      	pop	{r4, pc}
 80019a6:	2c00      	cmp	r4, #0
 80019a8:	bf08      	it	eq
 80019aa:	2005      	moveq	r0, #5
 80019ac:	bd10      	pop	{r4, pc}

080019ae <FLASH_EraseAllBank1Pages>:
 80019ae:	b510      	push	{r4, lr}
 80019b0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80019b4:	f7ff ffea 	bl	800198c <FLASH_WaitForLastBank1Operation>
 80019b8:	2804      	cmp	r0, #4
 80019ba:	d111      	bne.n	80019e0 <FLASH_EraseAllBank1Pages+0x32>
 80019bc:	4c09      	ldr	r4, [pc, #36]	; (80019e4 <FLASH_EraseAllBank1Pages+0x36>)
 80019be:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80019c2:	6923      	ldr	r3, [r4, #16]
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6123      	str	r3, [r4, #16]
 80019ca:	6923      	ldr	r3, [r4, #16]
 80019cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d0:	6123      	str	r3, [r4, #16]
 80019d2:	f7ff ffdb 	bl	800198c <FLASH_WaitForLastBank1Operation>
 80019d6:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 80019da:	6922      	ldr	r2, [r4, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	6123      	str	r3, [r4, #16]
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000

080019e8 <FLASH_EraseAllPages>:
 80019e8:	f7ff bfe1 	b.w	80019ae <FLASH_EraseAllBank1Pages>

080019ec <FLASH_UserOptionByteConfig>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	4d13      	ldr	r5, [pc, #76]	; (8001a3c <FLASH_UserOptionByteConfig+0x50>)
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <FLASH_UserOptionByteConfig+0x54>)
 80019f2:	4604      	mov	r4, r0
 80019f4:	60ab      	str	r3, [r5, #8]
 80019f6:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80019fa:	60ab      	str	r3, [r5, #8]
 80019fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a00:	460f      	mov	r7, r1
 8001a02:	4616      	mov	r6, r2
 8001a04:	f7ff ffc2 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001a08:	2804      	cmp	r0, #4
 8001a0a:	d116      	bne.n	8001a3a <FLASH_UserOptionByteConfig+0x4e>
 8001a0c:	692b      	ldr	r3, [r5, #16]
 8001a0e:	f044 04f8 	orr.w	r4, r4, #248	; 0xf8
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	612b      	str	r3, [r5, #16]
 8001a18:	ea47 0104 	orr.w	r1, r7, r4
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <FLASH_UserOptionByteConfig+0x58>)
 8001a1e:	ea46 0201 	orr.w	r2, r6, r1
 8001a22:	805a      	strh	r2, [r3, #2]
 8001a24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a28:	f7ff ffb0 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001a2c:	2805      	cmp	r0, #5
 8001a2e:	bf1f      	itttt	ne
 8001a30:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001a34:	692a      	ldrne	r2, [r5, #16]
 8001a36:	4013      	andne	r3, r2
 8001a38:	612b      	strne	r3, [r5, #16]
 8001a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	45670123 	.word	0x45670123
 8001a44:	1ffff800 	.word	0x1ffff800

08001a48 <FLASH_ReadOutProtection>:
 8001a48:	b538      	push	{r3, r4, r5, lr}
 8001a4a:	4605      	mov	r5, r0
 8001a4c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001a50:	f7ff ff9c 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001a54:	2804      	cmp	r0, #4
 8001a56:	d136      	bne.n	8001ac6 <FLASH_ReadOutProtection+0x7e>
 8001a58:	4c1b      	ldr	r4, [pc, #108]	; (8001ac8 <FLASH_ReadOutProtection+0x80>)
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <FLASH_ReadOutProtection+0x84>)
 8001a5c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001a60:	60a3      	str	r3, [r4, #8]
 8001a62:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001a66:	60a3      	str	r3, [r4, #8]
 8001a68:	6923      	ldr	r3, [r4, #16]
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	6123      	str	r3, [r4, #16]
 8001a70:	6923      	ldr	r3, [r4, #16]
 8001a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a76:	6123      	str	r3, [r4, #16]
 8001a78:	f7ff ff88 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001a7c:	2804      	cmp	r0, #4
 8001a7e:	d11b      	bne.n	8001ab8 <FLASH_ReadOutProtection+0x70>
 8001a80:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8001a84:	6922      	ldr	r2, [r4, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	6123      	str	r3, [r4, #16]
 8001a8a:	6923      	ldr	r3, [r4, #16]
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	6123      	str	r3, [r4, #16]
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <FLASH_ReadOutProtection+0x88>)
 8001a94:	b10d      	cbz	r5, 8001a9a <FLASH_ReadOutProtection+0x52>
 8001a96:	2200      	movs	r2, #0
 8001a98:	e000      	b.n	8001a9c <FLASH_ReadOutProtection+0x54>
 8001a9a:	22a5      	movs	r2, #165	; 0xa5
 8001a9c:	801a      	strh	r2, [r3, #0]
 8001a9e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001aa2:	f7ff ff73 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001aa6:	2805      	cmp	r0, #5
 8001aa8:	d00d      	beq.n	8001ac6 <FLASH_ReadOutProtection+0x7e>
 8001aaa:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8001aae:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <FLASH_ReadOutProtection+0x80>)
 8001ab0:	6911      	ldr	r1, [r2, #16]
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	6113      	str	r3, [r2, #16]
 8001ab6:	bd38      	pop	{r3, r4, r5, pc}
 8001ab8:	2805      	cmp	r0, #5
 8001aba:	bf1f      	itttt	ne
 8001abc:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8001ac0:	6922      	ldrne	r2, [r4, #16]
 8001ac2:	4013      	andne	r3, r2
 8001ac4:	6123      	strne	r3, [r4, #16]
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	45670123 	.word	0x45670123
 8001ad0:	1ffff800 	.word	0x1ffff800

08001ad4 <FLASH_EnableWriteProtection>:
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001adc:	f7ff ff56 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001ae0:	2804      	cmp	r0, #4
 8001ae2:	d143      	bne.n	8001b6c <FLASH_EnableWriteProtection+0x98>
 8001ae4:	43e4      	mvns	r4, r4
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <FLASH_EnableWriteProtection+0x9c>)
 8001ae8:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <FLASH_EnableWriteProtection+0xa0>)
 8001aea:	b2e1      	uxtb	r1, r4
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	29ff      	cmp	r1, #255	; 0xff
 8001af8:	f042 0210 	orr.w	r2, r2, #16
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	d104      	bne.n	8001b0a <FLASH_EnableWriteProtection+0x36>
 8001b00:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8001b04:	2bff      	cmp	r3, #255	; 0xff
 8001b06:	d109      	bne.n	8001b1c <FLASH_EnableWriteProtection+0x48>
 8001b08:	e010      	b.n	8001b2c <FLASH_EnableWriteProtection+0x58>
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <FLASH_EnableWriteProtection+0xa4>)
 8001b0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b10:	8119      	strh	r1, [r3, #8]
 8001b12:	f7ff ff3b 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001b16:	2804      	cmp	r0, #4
 8001b18:	d120      	bne.n	8001b5c <FLASH_EnableWriteProtection+0x88>
 8001b1a:	e7f1      	b.n	8001b00 <FLASH_EnableWriteProtection+0x2c>
 8001b1c:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <FLASH_EnableWriteProtection+0xa4>)
 8001b1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b22:	8153      	strh	r3, [r2, #10]
 8001b24:	f7ff ff32 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001b28:	2804      	cmp	r0, #4
 8001b2a:	d117      	bne.n	8001b5c <FLASH_EnableWriteProtection+0x88>
 8001b2c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8001b30:	2bff      	cmp	r3, #255	; 0xff
 8001b32:	d007      	beq.n	8001b44 <FLASH_EnableWriteProtection+0x70>
 8001b34:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <FLASH_EnableWriteProtection+0xa4>)
 8001b36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b3a:	8193      	strh	r3, [r2, #12]
 8001b3c:	f7ff ff26 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001b40:	2804      	cmp	r0, #4
 8001b42:	d10b      	bne.n	8001b5c <FLASH_EnableWriteProtection+0x88>
 8001b44:	0e24      	lsrs	r4, r4, #24
 8001b46:	2cff      	cmp	r4, #255	; 0xff
 8001b48:	d101      	bne.n	8001b4e <FLASH_EnableWriteProtection+0x7a>
 8001b4a:	2004      	movs	r0, #4
 8001b4c:	e008      	b.n	8001b60 <FLASH_EnableWriteProtection+0x8c>
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <FLASH_EnableWriteProtection+0xa4>)
 8001b50:	b2a4      	uxth	r4, r4
 8001b52:	81dc      	strh	r4, [r3, #14]
 8001b54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b58:	f7ff ff18 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001b5c:	2805      	cmp	r0, #5
 8001b5e:	d005      	beq.n	8001b6c <FLASH_EnableWriteProtection+0x98>
 8001b60:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8001b64:	4a02      	ldr	r2, [pc, #8]	; (8001b70 <FLASH_EnableWriteProtection+0x9c>)
 8001b66:	6911      	ldr	r1, [r2, #16]
 8001b68:	400b      	ands	r3, r1
 8001b6a:	6113      	str	r3, [r2, #16]
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	45670123 	.word	0x45670123
 8001b78:	1ffff800 	.word	0x1ffff800

08001b7c <FLASH_ProgramOptionByteData>:
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	4606      	mov	r6, r0
 8001b80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b84:	460d      	mov	r5, r1
 8001b86:	f7ff ff01 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001b8a:	2804      	cmp	r0, #4
 8001b8c:	d116      	bne.n	8001bbc <FLASH_ProgramOptionByteData+0x40>
 8001b8e:	4c0c      	ldr	r4, [pc, #48]	; (8001bc0 <FLASH_ProgramOptionByteData+0x44>)
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <FLASH_ProgramOptionByteData+0x48>)
 8001b92:	b2ad      	uxth	r5, r5
 8001b94:	60a3      	str	r3, [r4, #8]
 8001b96:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001b9a:	60a3      	str	r3, [r4, #8]
 8001b9c:	6923      	ldr	r3, [r4, #16]
 8001b9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6123      	str	r3, [r4, #16]
 8001ba8:	8035      	strh	r5, [r6, #0]
 8001baa:	f7ff feef 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001bae:	2805      	cmp	r0, #5
 8001bb0:	bf1f      	itttt	ne
 8001bb2:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001bb6:	6922      	ldrne	r2, [r4, #16]
 8001bb8:	4013      	andne	r3, r2
 8001bba:	6123      	strne	r3, [r4, #16]
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	45670123 	.word	0x45670123

08001bc8 <FLASH_ProgramHalfWord>:
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	4605      	mov	r5, r0
 8001bcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bd0:	460e      	mov	r6, r1
 8001bd2:	f7ff fedb 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001bd6:	2804      	cmp	r0, #4
 8001bd8:	d10e      	bne.n	8001bf8 <FLASH_ProgramHalfWord+0x30>
 8001bda:	4c08      	ldr	r4, [pc, #32]	; (8001bfc <FLASH_ProgramHalfWord+0x34>)
 8001bdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001be0:	6923      	ldr	r3, [r4, #16]
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6123      	str	r3, [r4, #16]
 8001be8:	802e      	strh	r6, [r5, #0]
 8001bea:	f7ff fecf 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001bee:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001bf2:	6922      	ldr	r2, [r4, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	6123      	str	r3, [r4, #16]
 8001bf8:	bd70      	pop	{r4, r5, r6, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000

08001c00 <FLASH_ProgramWord>:
 8001c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001c02:	2300      	movs	r3, #0
 8001c04:	4606      	mov	r6, r0
 8001c06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	f7ff febd 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001c12:	2804      	cmp	r0, #4
 8001c14:	d11a      	bne.n	8001c4c <FLASH_ProgramWord+0x4c>
 8001c16:	4c0e      	ldr	r4, [pc, #56]	; (8001c50 <FLASH_ProgramWord+0x50>)
 8001c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c1c:	6923      	ldr	r3, [r4, #16]
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6123      	str	r3, [r4, #16]
 8001c24:	b2ab      	uxth	r3, r5
 8001c26:	8033      	strh	r3, [r6, #0]
 8001c28:	f7ff feb0 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001c2c:	2804      	cmp	r0, #4
 8001c2e:	d108      	bne.n	8001c42 <FLASH_ProgramWord+0x42>
 8001c30:	3602      	adds	r6, #2
 8001c32:	9601      	str	r6, [sp, #4]
 8001c34:	9b01      	ldr	r3, [sp, #4]
 8001c36:	0c2d      	lsrs	r5, r5, #16
 8001c38:	801d      	strh	r5, [r3, #0]
 8001c3a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c3e:	f7ff fea5 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001c42:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001c46:	6922      	ldr	r2, [r4, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	6123      	str	r3, [r4, #16]
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	40022000 	.word	0x40022000

08001c54 <FLASH_EraseOptionBytes>:
 8001c54:	b538      	push	{r3, r4, r5, lr}
 8001c56:	f7ff fe3f 	bl	80018d8 <FLASH_GetReadOutProtectionStatus>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001c60:	bf0c      	ite	eq
 8001c62:	25a5      	moveq	r5, #165	; 0xa5
 8001c64:	2500      	movne	r5, #0
 8001c66:	f7ff fe91 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001c6a:	2804      	cmp	r0, #4
 8001c6c:	d129      	bne.n	8001cc2 <FLASH_EraseOptionBytes+0x6e>
 8001c6e:	4c15      	ldr	r4, [pc, #84]	; (8001cc4 <FLASH_EraseOptionBytes+0x70>)
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <FLASH_EraseOptionBytes+0x74>)
 8001c72:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001c76:	60a3      	str	r3, [r4, #8]
 8001c78:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001c7c:	60a3      	str	r3, [r4, #8]
 8001c7e:	6923      	ldr	r3, [r4, #16]
 8001c80:	f043 0320 	orr.w	r3, r3, #32
 8001c84:	6123      	str	r3, [r4, #16]
 8001c86:	6923      	ldr	r3, [r4, #16]
 8001c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8c:	6123      	str	r3, [r4, #16]
 8001c8e:	f7ff fe7d 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001c92:	2804      	cmp	r0, #4
 8001c94:	d10e      	bne.n	8001cb4 <FLASH_EraseOptionBytes+0x60>
 8001c96:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8001c9a:	6922      	ldr	r2, [r4, #16]
 8001c9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	6123      	str	r3, [r4, #16]
 8001ca4:	6923      	ldr	r3, [r4, #16]
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6123      	str	r3, [r4, #16]
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <FLASH_EraseOptionBytes+0x78>)
 8001cae:	801d      	strh	r5, [r3, #0]
 8001cb0:	f7ff fe6c 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001cb4:	2805      	cmp	r0, #5
 8001cb6:	bf1f      	itttt	ne
 8001cb8:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001cbc:	6922      	ldrne	r2, [r4, #16]
 8001cbe:	4013      	andne	r3, r2
 8001cc0:	6123      	strne	r3, [r4, #16]
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	45670123 	.word	0x45670123
 8001ccc:	1ffff800 	.word	0x1ffff800

08001cd0 <FLASH_ErasePage>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4605      	mov	r5, r0
 8001cd4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001cd8:	f7ff fe58 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001cdc:	2804      	cmp	r0, #4
 8001cde:	d112      	bne.n	8001d06 <FLASH_ErasePage+0x36>
 8001ce0:	4c09      	ldr	r4, [pc, #36]	; (8001d08 <FLASH_ErasePage+0x38>)
 8001ce2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001ce6:	6923      	ldr	r3, [r4, #16]
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6123      	str	r3, [r4, #16]
 8001cee:	6165      	str	r5, [r4, #20]
 8001cf0:	6923      	ldr	r3, [r4, #16]
 8001cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf6:	6123      	str	r3, [r4, #16]
 8001cf8:	f7ff fe48 	bl	800198c <FLASH_WaitForLastBank1Operation>
 8001cfc:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8001d00:	6922      	ldr	r2, [r4, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	6123      	str	r3, [r4, #16]
 8001d06:	bd38      	pop	{r3, r4, r5, pc}
 8001d08:	40022000 	.word	0x40022000

08001d0c <FLASH_WaitForLastOperation>:
 8001d0c:	f7ff be3e 	b.w	800198c <FLASH_WaitForLastBank1Operation>

08001d10 <FSMC_NORSRAMDeInit>:
 8001d10:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001d14:	b918      	cbnz	r0, 8001d1e <FSMC_NORSRAMDeInit+0xe>
 8001d16:	f243 02db 	movw	r2, #12507	; 0x30db
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e003      	b.n	8001d26 <FSMC_NORSRAMDeInit+0x16>
 8001d1e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d22:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8001d26:	0080      	lsls	r0, r0, #2
 8001d28:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 8001d2c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001d30:	6043      	str	r3, [r0, #4]
 8001d32:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8001d36:	4770      	bx	lr

08001d38 <FSMC_NANDDeInit>:
 8001d38:	2810      	cmp	r0, #16
 8001d3a:	bf0c      	ite	eq
 8001d3c:	4b05      	ldreq	r3, [pc, #20]	; (8001d54 <FSMC_NANDDeInit+0x1c>)
 8001d3e:	4b06      	ldrne	r3, [pc, #24]	; (8001d58 <FSMC_NANDDeInit+0x20>)
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	2118      	movs	r1, #24
 8001d44:	6019      	str	r1, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	a0000060 	.word	0xa0000060
 8001d58:	a0000080 	.word	0xa0000080

08001d5c <FSMC_PCCARDDeInit>:
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <FSMC_PCCARDDeInit+0x18>)
 8001d5e:	2218      	movs	r2, #24
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	a00000a0 	.word	0xa00000a0

08001d78 <FSMC_NORSRAMInit>:
 8001d78:	6881      	ldr	r1, [r0, #8]
 8001d7a:	6843      	ldr	r3, [r0, #4]
 8001d7c:	b530      	push	{r4, r5, lr}
 8001d7e:	ea41 0203 	orr.w	r2, r1, r3
 8001d82:	68c3      	ldr	r3, [r0, #12]
 8001d84:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d86:	431a      	orrs	r2, r3
 8001d88:	6903      	ldr	r3, [r0, #16]
 8001d8a:	2908      	cmp	r1, #8
 8001d8c:	ea42 0203 	orr.w	r2, r2, r3
 8001d90:	6943      	ldr	r3, [r0, #20]
 8001d92:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001d94:	ea42 0203 	orr.w	r2, r2, r3
 8001d98:	6983      	ldr	r3, [r0, #24]
 8001d9a:	680d      	ldr	r5, [r1, #0]
 8001d9c:	ea42 0203 	orr.w	r2, r2, r3
 8001da0:	69c3      	ldr	r3, [r0, #28]
 8001da2:	ea42 0203 	orr.w	r2, r2, r3
 8001da6:	6a03      	ldr	r3, [r0, #32]
 8001da8:	ea42 0203 	orr.w	r2, r2, r3
 8001dac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dae:	ea42 0203 	orr.w	r2, r2, r3
 8001db2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001db4:	ea43 0302 	orr.w	r3, r3, r2
 8001db8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001dba:	ea43 0304 	orr.w	r3, r3, r4
 8001dbe:	ea43 0302 	orr.w	r3, r3, r2
 8001dc2:	6802      	ldr	r2, [r0, #0]
 8001dc4:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8001dc8:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	bf02      	ittt	eq
 8001dd0:	6813      	ldreq	r3, [r2, #0]
 8001dd2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8001dd6:	6013      	streq	r3, [r2, #0]
 8001dd8:	698b      	ldr	r3, [r1, #24]
 8001dda:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8001dde:	ea43 0305 	orr.w	r3, r3, r5
 8001de2:	684d      	ldr	r5, [r1, #4]
 8001de4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001de8:	688d      	ldr	r5, [r1, #8]
 8001dea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001dee:	68cd      	ldr	r5, [r1, #12]
 8001df0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001df4:	690d      	ldr	r5, [r1, #16]
 8001df6:	6949      	ldr	r1, [r1, #20]
 8001df8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8001dfc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001e00:	6053      	str	r3, [r2, #4]
 8001e02:	d110      	bne.n	8001e26 <FSMC_NORSRAMInit+0xae>
 8001e04:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001e06:	6808      	ldr	r0, [r1, #0]
 8001e08:	698b      	ldr	r3, [r1, #24]
 8001e0a:	4303      	orrs	r3, r0
 8001e0c:	6848      	ldr	r0, [r1, #4]
 8001e0e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001e12:	6888      	ldr	r0, [r1, #8]
 8001e14:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001e18:	6908      	ldr	r0, [r1, #16]
 8001e1a:	6949      	ldr	r1, [r1, #20]
 8001e1c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8001e20:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001e24:	e001      	b.n	8001e2a <FSMC_NORSRAMInit+0xb2>
 8001e26:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001e2a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8001e2e:	bd30      	pop	{r4, r5, pc}

08001e30 <FSMC_NANDInit>:
 8001e30:	6842      	ldr	r2, [r0, #4]
 8001e32:	6883      	ldr	r3, [r0, #8]
 8001e34:	b530      	push	{r4, r5, lr}
 8001e36:	4313      	orrs	r3, r2
 8001e38:	68c2      	ldr	r2, [r0, #12]
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	6903      	ldr	r3, [r0, #16]
 8001e42:	69c4      	ldr	r4, [r0, #28]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	6942      	ldr	r2, [r0, #20]
 8001e48:	6861      	ldr	r1, [r4, #4]
 8001e4a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001e4e:	6982      	ldr	r2, [r0, #24]
 8001e50:	6a05      	ldr	r5, [r0, #32]
 8001e52:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001e56:	68a2      	ldr	r2, [r4, #8]
 8001e58:	6800      	ldr	r0, [r0, #0]
 8001e5a:	0412      	lsls	r2, r2, #16
 8001e5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e60:	6821      	ldr	r1, [r4, #0]
 8001e62:	2810      	cmp	r0, #16
 8001e64:	ea42 0201 	orr.w	r2, r2, r1
 8001e68:	68e1      	ldr	r1, [r4, #12]
 8001e6a:	68ac      	ldr	r4, [r5, #8]
 8001e6c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8001e70:	686a      	ldr	r2, [r5, #4]
 8001e72:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8001e76:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001e7a:	682a      	ldr	r2, [r5, #0]
 8001e7c:	bf08      	it	eq
 8001e7e:	4806      	ldreq	r0, [pc, #24]	; (8001e98 <FSMC_NANDInit+0x68>)
 8001e80:	ea42 0204 	orr.w	r2, r2, r4
 8001e84:	68ec      	ldr	r4, [r5, #12]
 8001e86:	bf18      	it	ne
 8001e88:	4804      	ldrne	r0, [pc, #16]	; (8001e9c <FSMC_NANDInit+0x6c>)
 8001e8a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8001e8e:	6003      	str	r3, [r0, #0]
 8001e90:	6081      	str	r1, [r0, #8]
 8001e92:	60c2      	str	r2, [r0, #12]
 8001e94:	bd30      	pop	{r4, r5, pc}
 8001e96:	bf00      	nop
 8001e98:	a0000060 	.word	0xa0000060
 8001e9c:	a0000080 	.word	0xa0000080

08001ea0 <FSMC_PCCARDInit>:
 8001ea0:	6803      	ldr	r3, [r0, #0]
 8001ea2:	6842      	ldr	r2, [r0, #4]
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001eac:	6882      	ldr	r2, [r0, #8]
 8001eae:	4915      	ldr	r1, [pc, #84]	; (8001f04 <FSMC_PCCARDInit+0x64>)
 8001eb0:	b510      	push	{r4, lr}
 8001eb2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001eb6:	68c4      	ldr	r4, [r0, #12]
 8001eb8:	600b      	str	r3, [r1, #0]
 8001eba:	68a2      	ldr	r2, [r4, #8]
 8001ebc:	6863      	ldr	r3, [r4, #4]
 8001ebe:	0412      	lsls	r2, r2, #16
 8001ec0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	68e2      	ldr	r2, [r4, #12]
 8001eca:	6904      	ldr	r4, [r0, #16]
 8001ecc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ed0:	608b      	str	r3, [r1, #8]
 8001ed2:	68a2      	ldr	r2, [r4, #8]
 8001ed4:	6863      	ldr	r3, [r4, #4]
 8001ed6:	0412      	lsls	r2, r2, #16
 8001ed8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	6940      	ldr	r0, [r0, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	68e2      	ldr	r2, [r4, #12]
 8001ee4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ee8:	60cb      	str	r3, [r1, #12]
 8001eea:	6882      	ldr	r2, [r0, #8]
 8001eec:	6843      	ldr	r3, [r0, #4]
 8001eee:	0412      	lsls	r2, r2, #16
 8001ef0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001ef4:	6803      	ldr	r3, [r0, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	68c2      	ldr	r2, [r0, #12]
 8001efa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001efe:	610b      	str	r3, [r1, #16]
 8001f00:	bd10      	pop	{r4, pc}
 8001f02:	bf00      	nop
 8001f04:	a00000a0 	.word	0xa00000a0

08001f08 <FSMC_NORSRAMStructInit>:
 8001f08:	2202      	movs	r2, #2
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	6042      	str	r2, [r0, #4]
 8001f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f12:	6242      	str	r2, [r0, #36]	; 0x24
 8001f14:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1a:	6282      	str	r2, [r0, #40]	; 0x28
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	220f      	movs	r2, #15
 8001f20:	24ff      	movs	r4, #255	; 0xff
 8001f22:	6003      	str	r3, [r0, #0]
 8001f24:	6083      	str	r3, [r0, #8]
 8001f26:	60c3      	str	r3, [r0, #12]
 8001f28:	6103      	str	r3, [r0, #16]
 8001f2a:	6143      	str	r3, [r0, #20]
 8001f2c:	6183      	str	r3, [r0, #24]
 8001f2e:	61c3      	str	r3, [r0, #28]
 8001f30:	6203      	str	r3, [r0, #32]
 8001f32:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001f34:	6303      	str	r3, [r0, #48]	; 0x30
 8001f36:	600a      	str	r2, [r1, #0]
 8001f38:	604a      	str	r2, [r1, #4]
 8001f3a:	608c      	str	r4, [r1, #8]
 8001f3c:	60ca      	str	r2, [r1, #12]
 8001f3e:	610a      	str	r2, [r1, #16]
 8001f40:	614a      	str	r2, [r1, #20]
 8001f42:	618b      	str	r3, [r1, #24]
 8001f44:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001f46:	600a      	str	r2, [r1, #0]
 8001f48:	604a      	str	r2, [r1, #4]
 8001f4a:	608c      	str	r4, [r1, #8]
 8001f4c:	60ca      	str	r2, [r1, #12]
 8001f4e:	610a      	str	r2, [r1, #16]
 8001f50:	614a      	str	r2, [r1, #20]
 8001f52:	618b      	str	r3, [r1, #24]
 8001f54:	bd10      	pop	{r4, pc}

08001f56 <FSMC_NANDStructInit>:
 8001f56:	2310      	movs	r3, #16
 8001f58:	6003      	str	r3, [r0, #0]
 8001f5a:	69c2      	ldr	r2, [r0, #28]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6043      	str	r3, [r0, #4]
 8001f60:	6083      	str	r3, [r0, #8]
 8001f62:	60c3      	str	r3, [r0, #12]
 8001f64:	6103      	str	r3, [r0, #16]
 8001f66:	6143      	str	r3, [r0, #20]
 8001f68:	6183      	str	r3, [r0, #24]
 8001f6a:	23fc      	movs	r3, #252	; 0xfc
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	6053      	str	r3, [r2, #4]
 8001f70:	6093      	str	r3, [r2, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
 8001f74:	6a02      	ldr	r2, [r0, #32]
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	6053      	str	r3, [r2, #4]
 8001f7a:	6093      	str	r3, [r2, #8]
 8001f7c:	60d3      	str	r3, [r2, #12]
 8001f7e:	4770      	bx	lr

08001f80 <FSMC_PCCARDStructInit>:
 8001f80:	68c2      	ldr	r2, [r0, #12]
 8001f82:	2300      	movs	r3, #0
 8001f84:	6003      	str	r3, [r0, #0]
 8001f86:	6043      	str	r3, [r0, #4]
 8001f88:	6083      	str	r3, [r0, #8]
 8001f8a:	23fc      	movs	r3, #252	; 0xfc
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	6053      	str	r3, [r2, #4]
 8001f90:	6093      	str	r3, [r2, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
 8001f94:	6902      	ldr	r2, [r0, #16]
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	6053      	str	r3, [r2, #4]
 8001f9a:	6093      	str	r3, [r2, #8]
 8001f9c:	60d3      	str	r3, [r2, #12]
 8001f9e:	6942      	ldr	r2, [r0, #20]
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	6053      	str	r3, [r2, #4]
 8001fa4:	6093      	str	r3, [r2, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
 8001fa8:	4770      	bx	lr

08001faa <FSMC_NORSRAMCmd>:
 8001faa:	0080      	lsls	r0, r0, #2
 8001fac:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 8001fb0:	b119      	cbz	r1, 8001fba <FSMC_NORSRAMCmd+0x10>
 8001fb2:	6803      	ldr	r3, [r0, #0]
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	e002      	b.n	8001fc0 <FSMC_NORSRAMCmd+0x16>
 8001fba:	6802      	ldr	r2, [r0, #0]
 8001fbc:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <FSMC_NORSRAMCmd+0x1a>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	6003      	str	r3, [r0, #0]
 8001fc2:	4770      	bx	lr
 8001fc4:	000ffffe 	.word	0x000ffffe

08001fc8 <FSMC_NANDCmd>:
 8001fc8:	b139      	cbz	r1, 8001fda <FSMC_NANDCmd+0x12>
 8001fca:	2810      	cmp	r0, #16
 8001fcc:	bf0c      	ite	eq
 8001fce:	4a07      	ldreq	r2, [pc, #28]	; (8001fec <FSMC_NANDCmd+0x24>)
 8001fd0:	4a07      	ldrne	r2, [pc, #28]	; (8001ff0 <FSMC_NANDCmd+0x28>)
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	e006      	b.n	8001fe8 <FSMC_NANDCmd+0x20>
 8001fda:	2810      	cmp	r0, #16
 8001fdc:	bf0c      	ite	eq
 8001fde:	4a03      	ldreq	r2, [pc, #12]	; (8001fec <FSMC_NANDCmd+0x24>)
 8001fe0:	4a03      	ldrne	r2, [pc, #12]	; (8001ff0 <FSMC_NANDCmd+0x28>)
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <FSMC_NANDCmd+0x2c>)
 8001fe4:	6811      	ldr	r1, [r2, #0]
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4770      	bx	lr
 8001fec:	a0000060 	.word	0xa0000060
 8001ff0:	a0000080 	.word	0xa0000080
 8001ff4:	000ffffb 	.word	0x000ffffb

08001ff8 <FSMC_PCCARDCmd>:
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <FSMC_PCCARDCmd+0x18>)
 8001ffa:	b118      	cbz	r0, 8002004 <FSMC_PCCARDCmd+0xc>
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f042 0204 	orr.w	r2, r2, #4
 8002002:	e002      	b.n	800200a <FSMC_PCCARDCmd+0x12>
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <FSMC_PCCARDCmd+0x1c>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	a00000a0 	.word	0xa00000a0
 8002014:	000ffffb 	.word	0x000ffffb

08002018 <FSMC_NANDECCCmd>:
 8002018:	b139      	cbz	r1, 800202a <FSMC_NANDECCCmd+0x12>
 800201a:	2810      	cmp	r0, #16
 800201c:	bf0c      	ite	eq
 800201e:	4a07      	ldreq	r2, [pc, #28]	; (800203c <FSMC_NANDECCCmd+0x24>)
 8002020:	4a07      	ldrne	r2, [pc, #28]	; (8002040 <FSMC_NANDECCCmd+0x28>)
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002028:	e006      	b.n	8002038 <FSMC_NANDECCCmd+0x20>
 800202a:	2810      	cmp	r0, #16
 800202c:	bf0c      	ite	eq
 800202e:	4a03      	ldreq	r2, [pc, #12]	; (800203c <FSMC_NANDECCCmd+0x24>)
 8002030:	4a03      	ldrne	r2, [pc, #12]	; (8002040 <FSMC_NANDECCCmd+0x28>)
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <FSMC_NANDECCCmd+0x2c>)
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	400b      	ands	r3, r1
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4770      	bx	lr
 800203c:	a0000060 	.word	0xa0000060
 8002040:	a0000080 	.word	0xa0000080
 8002044:	000fffbf 	.word	0x000fffbf

08002048 <FSMC_GetECC>:
 8002048:	2810      	cmp	r0, #16
 800204a:	bf0c      	ite	eq
 800204c:	4b01      	ldreq	r3, [pc, #4]	; (8002054 <FSMC_GetECC+0xc>)
 800204e:	4b02      	ldrne	r3, [pc, #8]	; (8002058 <FSMC_GetECC+0x10>)
 8002050:	6958      	ldr	r0, [r3, #20]
 8002052:	4770      	bx	lr
 8002054:	a0000060 	.word	0xa0000060
 8002058:	a0000080 	.word	0xa0000080

0800205c <FSMC_ITConfig>:
 800205c:	b17a      	cbz	r2, 800207e <FSMC_ITConfig+0x22>
 800205e:	2810      	cmp	r0, #16
 8002060:	d101      	bne.n	8002066 <FSMC_ITConfig+0xa>
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <FSMC_ITConfig+0x40>)
 8002064:	e008      	b.n	8002078 <FSMC_ITConfig+0x1c>
 8002066:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800206a:	d104      	bne.n	8002076 <FSMC_ITConfig+0x1a>
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <FSMC_ITConfig+0x44>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4311      	orrs	r1, r2
 8002072:	6059      	str	r1, [r3, #4]
 8002074:	4770      	bx	lr
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <FSMC_ITConfig+0x48>)
 8002078:	6853      	ldr	r3, [r2, #4]
 800207a:	4319      	orrs	r1, r3
 800207c:	e00c      	b.n	8002098 <FSMC_ITConfig+0x3c>
 800207e:	2810      	cmp	r0, #16
 8002080:	ea6f 0101 	mvn.w	r1, r1
 8002084:	d101      	bne.n	800208a <FSMC_ITConfig+0x2e>
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <FSMC_ITConfig+0x40>)
 8002088:	e004      	b.n	8002094 <FSMC_ITConfig+0x38>
 800208a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800208e:	bf0c      	ite	eq
 8002090:	4a03      	ldreq	r2, [pc, #12]	; (80020a0 <FSMC_ITConfig+0x44>)
 8002092:	4a04      	ldrne	r2, [pc, #16]	; (80020a4 <FSMC_ITConfig+0x48>)
 8002094:	6853      	ldr	r3, [r2, #4]
 8002096:	4019      	ands	r1, r3
 8002098:	6051      	str	r1, [r2, #4]
 800209a:	4770      	bx	lr
 800209c:	a0000060 	.word	0xa0000060
 80020a0:	a0000080 	.word	0xa0000080
 80020a4:	a00000a0 	.word	0xa00000a0

080020a8 <FSMC_GetFlagStatus>:
 80020a8:	2810      	cmp	r0, #16
 80020aa:	d101      	bne.n	80020b0 <FSMC_GetFlagStatus+0x8>
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <FSMC_GetFlagStatus+0x20>)
 80020ae:	e004      	b.n	80020ba <FSMC_GetFlagStatus+0x12>
 80020b0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80020b4:	bf0c      	ite	eq
 80020b6:	4b05      	ldreq	r3, [pc, #20]	; (80020cc <FSMC_GetFlagStatus+0x24>)
 80020b8:	4b05      	ldrne	r3, [pc, #20]	; (80020d0 <FSMC_GetFlagStatus+0x28>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	420b      	tst	r3, r1
 80020be:	bf14      	ite	ne
 80020c0:	2001      	movne	r0, #1
 80020c2:	2000      	moveq	r0, #0
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	a0000060 	.word	0xa0000060
 80020cc:	a0000080 	.word	0xa0000080
 80020d0:	a00000a0 	.word	0xa00000a0

080020d4 <FSMC_ClearFlag>:
 80020d4:	2810      	cmp	r0, #16
 80020d6:	ea6f 0101 	mvn.w	r1, r1
 80020da:	d101      	bne.n	80020e0 <FSMC_ClearFlag+0xc>
 80020dc:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <FSMC_ClearFlag+0x20>)
 80020de:	e004      	b.n	80020ea <FSMC_ClearFlag+0x16>
 80020e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80020e4:	bf0c      	ite	eq
 80020e6:	4a04      	ldreq	r2, [pc, #16]	; (80020f8 <FSMC_ClearFlag+0x24>)
 80020e8:	4a04      	ldrne	r2, [pc, #16]	; (80020fc <FSMC_ClearFlag+0x28>)
 80020ea:	6853      	ldr	r3, [r2, #4]
 80020ec:	4019      	ands	r1, r3
 80020ee:	6051      	str	r1, [r2, #4]
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	a0000060 	.word	0xa0000060
 80020f8:	a0000080 	.word	0xa0000080
 80020fc:	a00000a0 	.word	0xa00000a0

08002100 <FSMC_GetITStatus>:
 8002100:	2810      	cmp	r0, #16
 8002102:	d101      	bne.n	8002108 <FSMC_GetITStatus+0x8>
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <FSMC_GetITStatus+0x28>)
 8002106:	e004      	b.n	8002112 <FSMC_GetITStatus+0x12>
 8002108:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800210c:	bf0c      	ite	eq
 800210e:	4b07      	ldreq	r3, [pc, #28]	; (800212c <FSMC_GetITStatus+0x2c>)
 8002110:	4b07      	ldrne	r3, [pc, #28]	; (8002130 <FSMC_GetITStatus+0x30>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	ea13 0001 	ands.w	r0, r3, r1
 8002118:	d004      	beq.n	8002124 <FSMC_GetITStatus+0x24>
 800211a:	ea13 03d1 	ands.w	r3, r3, r1, lsr #3
 800211e:	bf14      	ite	ne
 8002120:	2001      	movne	r0, #1
 8002122:	2000      	moveq	r0, #0
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	a0000060 	.word	0xa0000060
 800212c:	a0000080 	.word	0xa0000080
 8002130:	a00000a0 	.word	0xa00000a0

08002134 <FSMC_ClearITPendingBit>:
 8002134:	2810      	cmp	r0, #16
 8002136:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 800213a:	d101      	bne.n	8002140 <FSMC_ClearITPendingBit+0xc>
 800213c:	4a05      	ldr	r2, [pc, #20]	; (8002154 <FSMC_ClearITPendingBit+0x20>)
 800213e:	e004      	b.n	800214a <FSMC_ClearITPendingBit+0x16>
 8002140:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002144:	bf0c      	ite	eq
 8002146:	4a04      	ldreq	r2, [pc, #16]	; (8002158 <FSMC_ClearITPendingBit+0x24>)
 8002148:	4a04      	ldrne	r2, [pc, #16]	; (800215c <FSMC_ClearITPendingBit+0x28>)
 800214a:	6853      	ldr	r3, [r2, #4]
 800214c:	ea23 0101 	bic.w	r1, r3, r1
 8002150:	6051      	str	r1, [r2, #4]
 8002152:	4770      	bx	lr
 8002154:	a0000060 	.word	0xa0000060
 8002158:	a0000080 	.word	0xa0000080
 800215c:	a00000a0 	.word	0xa00000a0

08002160 <GPIO_DeInit>:
 8002160:	b508      	push	{r3, lr}
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <GPIO_DeInit+0x9c>)
 8002164:	4298      	cmp	r0, r3
 8002166:	d106      	bne.n	8002176 <GPIO_DeInit+0x16>
 8002168:	2101      	movs	r1, #1
 800216a:	2004      	movs	r0, #4
 800216c:	f000 fcd6 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8002170:	2100      	movs	r1, #0
 8002172:	2004      	movs	r0, #4
 8002174:	e03c      	b.n	80021f0 <GPIO_DeInit+0x90>
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <GPIO_DeInit+0xa0>)
 8002178:	4298      	cmp	r0, r3
 800217a:	d106      	bne.n	800218a <GPIO_DeInit+0x2a>
 800217c:	2101      	movs	r1, #1
 800217e:	2008      	movs	r0, #8
 8002180:	f000 fccc 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8002184:	2100      	movs	r1, #0
 8002186:	2008      	movs	r0, #8
 8002188:	e032      	b.n	80021f0 <GPIO_DeInit+0x90>
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <GPIO_DeInit+0xa4>)
 800218c:	4298      	cmp	r0, r3
 800218e:	d106      	bne.n	800219e <GPIO_DeInit+0x3e>
 8002190:	2101      	movs	r1, #1
 8002192:	2010      	movs	r0, #16
 8002194:	f000 fcc2 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8002198:	2100      	movs	r1, #0
 800219a:	2010      	movs	r0, #16
 800219c:	e028      	b.n	80021f0 <GPIO_DeInit+0x90>
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <GPIO_DeInit+0xa8>)
 80021a0:	4298      	cmp	r0, r3
 80021a2:	d106      	bne.n	80021b2 <GPIO_DeInit+0x52>
 80021a4:	2101      	movs	r1, #1
 80021a6:	2020      	movs	r0, #32
 80021a8:	f000 fcb8 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80021ac:	2100      	movs	r1, #0
 80021ae:	2020      	movs	r0, #32
 80021b0:	e01e      	b.n	80021f0 <GPIO_DeInit+0x90>
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <GPIO_DeInit+0xac>)
 80021b4:	4298      	cmp	r0, r3
 80021b6:	d106      	bne.n	80021c6 <GPIO_DeInit+0x66>
 80021b8:	2101      	movs	r1, #1
 80021ba:	2040      	movs	r0, #64	; 0x40
 80021bc:	f000 fcae 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80021c0:	2100      	movs	r1, #0
 80021c2:	2040      	movs	r0, #64	; 0x40
 80021c4:	e014      	b.n	80021f0 <GPIO_DeInit+0x90>
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <GPIO_DeInit+0xb0>)
 80021c8:	4298      	cmp	r0, r3
 80021ca:	d106      	bne.n	80021da <GPIO_DeInit+0x7a>
 80021cc:	2101      	movs	r1, #1
 80021ce:	2080      	movs	r0, #128	; 0x80
 80021d0:	f000 fca4 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80021d4:	2100      	movs	r1, #0
 80021d6:	2080      	movs	r0, #128	; 0x80
 80021d8:	e00a      	b.n	80021f0 <GPIO_DeInit+0x90>
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <GPIO_DeInit+0xb4>)
 80021dc:	4298      	cmp	r0, r3
 80021de:	d10b      	bne.n	80021f8 <GPIO_DeInit+0x98>
 80021e0:	2101      	movs	r1, #1
 80021e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021e6:	f000 fc99 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80021ea:	2100      	movs	r1, #0
 80021ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80021f4:	f000 bc92 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
 80021f8:	bd08      	pop	{r3, pc}
 80021fa:	bf00      	nop
 80021fc:	40010800 	.word	0x40010800
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40011000 	.word	0x40011000
 8002208:	40011400 	.word	0x40011400
 800220c:	40011800 	.word	0x40011800
 8002210:	40011c00 	.word	0x40011c00
 8002214:	40012000 	.word	0x40012000

08002218 <GPIO_AFIODeInit>:
 8002218:	b508      	push	{r3, lr}
 800221a:	2101      	movs	r1, #1
 800221c:	4608      	mov	r0, r1
 800221e:	f000 fc7d 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8002222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002226:	2100      	movs	r1, #0
 8002228:	2001      	movs	r0, #1
 800222a:	f000 bc77 	b.w	8002b1c <RCC_APB2PeriphResetCmd>

0800222e <GPIO_Init>:
 800222e:	78ca      	ldrb	r2, [r1, #3]
 8002230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002234:	06d4      	lsls	r4, r2, #27
 8002236:	bf48      	it	mi
 8002238:	788c      	ldrbmi	r4, [r1, #2]
 800223a:	880e      	ldrh	r6, [r1, #0]
 800223c:	f002 030f 	and.w	r3, r2, #15
 8002240:	bf48      	it	mi
 8002242:	4323      	orrmi	r3, r4
 8002244:	f016 0fff 	tst.w	r6, #255	; 0xff
 8002248:	d01e      	beq.n	8002288 <GPIO_Init+0x5a>
 800224a:	6801      	ldr	r1, [r0, #0]
 800224c:	2400      	movs	r4, #0
 800224e:	f04f 0e01 	mov.w	lr, #1
 8002252:	f04f 0c0f 	mov.w	ip, #15
 8002256:	fa0e f704 	lsl.w	r7, lr, r4
 800225a:	ea37 0506 	bics.w	r5, r7, r6
 800225e:	d10f      	bne.n	8002280 <GPIO_Init+0x52>
 8002260:	00a5      	lsls	r5, r4, #2
 8002262:	fa0c f805 	lsl.w	r8, ip, r5
 8002266:	ea21 0108 	bic.w	r1, r1, r8
 800226a:	fa03 f505 	lsl.w	r5, r3, r5
 800226e:	2a28      	cmp	r2, #40	; 0x28
 8002270:	ea41 0105 	orr.w	r1, r1, r5
 8002274:	d101      	bne.n	800227a <GPIO_Init+0x4c>
 8002276:	6147      	str	r7, [r0, #20]
 8002278:	e002      	b.n	8002280 <GPIO_Init+0x52>
 800227a:	2a48      	cmp	r2, #72	; 0x48
 800227c:	bf08      	it	eq
 800227e:	6107      	streq	r7, [r0, #16]
 8002280:	3401      	adds	r4, #1
 8002282:	2c08      	cmp	r4, #8
 8002284:	d1e7      	bne.n	8002256 <GPIO_Init+0x28>
 8002286:	6001      	str	r1, [r0, #0]
 8002288:	2eff      	cmp	r6, #255	; 0xff
 800228a:	d920      	bls.n	80022ce <GPIO_Init+0xa0>
 800228c:	6841      	ldr	r1, [r0, #4]
 800228e:	2400      	movs	r4, #0
 8002290:	f04f 0e01 	mov.w	lr, #1
 8002294:	f04f 0c0f 	mov.w	ip, #15
 8002298:	f104 0508 	add.w	r5, r4, #8
 800229c:	fa0e f505 	lsl.w	r5, lr, r5
 80022a0:	ea35 0706 	bics.w	r7, r5, r6
 80022a4:	d10f      	bne.n	80022c6 <GPIO_Init+0x98>
 80022a6:	00a7      	lsls	r7, r4, #2
 80022a8:	fa0c f807 	lsl.w	r8, ip, r7
 80022ac:	ea21 0108 	bic.w	r1, r1, r8
 80022b0:	fa03 f707 	lsl.w	r7, r3, r7
 80022b4:	2a28      	cmp	r2, #40	; 0x28
 80022b6:	ea41 0107 	orr.w	r1, r1, r7
 80022ba:	d101      	bne.n	80022c0 <GPIO_Init+0x92>
 80022bc:	6145      	str	r5, [r0, #20]
 80022be:	e002      	b.n	80022c6 <GPIO_Init+0x98>
 80022c0:	2a48      	cmp	r2, #72	; 0x48
 80022c2:	bf08      	it	eq
 80022c4:	6105      	streq	r5, [r0, #16]
 80022c6:	3401      	adds	r4, #1
 80022c8:	2c08      	cmp	r4, #8
 80022ca:	d1e5      	bne.n	8002298 <GPIO_Init+0x6a>
 80022cc:	6041      	str	r1, [r0, #4]
 80022ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080022d2 <GPIO_StructInit>:
 80022d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d6:	8003      	strh	r3, [r0, #0]
 80022d8:	2302      	movs	r3, #2
 80022da:	7083      	strb	r3, [r0, #2]
 80022dc:	2304      	movs	r3, #4
 80022de:	70c3      	strb	r3, [r0, #3]
 80022e0:	4770      	bx	lr

080022e2 <GPIO_ReadInputDataBit>:
 80022e2:	6883      	ldr	r3, [r0, #8]
 80022e4:	4219      	tst	r1, r3
 80022e6:	bf14      	ite	ne
 80022e8:	2001      	movne	r0, #1
 80022ea:	2000      	moveq	r0, #0
 80022ec:	4770      	bx	lr

080022ee <GPIO_ReadInputData>:
 80022ee:	6880      	ldr	r0, [r0, #8]
 80022f0:	b280      	uxth	r0, r0
 80022f2:	4770      	bx	lr

080022f4 <GPIO_ReadOutputDataBit>:
 80022f4:	68c3      	ldr	r3, [r0, #12]
 80022f6:	4219      	tst	r1, r3
 80022f8:	bf14      	ite	ne
 80022fa:	2001      	movne	r0, #1
 80022fc:	2000      	moveq	r0, #0
 80022fe:	4770      	bx	lr

08002300 <GPIO_ReadOutputData>:
 8002300:	68c0      	ldr	r0, [r0, #12]
 8002302:	b280      	uxth	r0, r0
 8002304:	4770      	bx	lr

08002306 <GPIO_SetBits>:
 8002306:	6101      	str	r1, [r0, #16]
 8002308:	4770      	bx	lr

0800230a <GPIO_ResetBits>:
 800230a:	6141      	str	r1, [r0, #20]
 800230c:	4770      	bx	lr

0800230e <GPIO_WriteBit>:
 800230e:	b10a      	cbz	r2, 8002314 <GPIO_WriteBit+0x6>
 8002310:	6101      	str	r1, [r0, #16]
 8002312:	4770      	bx	lr
 8002314:	6141      	str	r1, [r0, #20]
 8002316:	4770      	bx	lr

08002318 <GPIO_Write>:
 8002318:	60c1      	str	r1, [r0, #12]
 800231a:	4770      	bx	lr

0800231c <GPIO_PinLockConfig>:
 800231c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 8002320:	6183      	str	r3, [r0, #24]
 8002322:	6181      	str	r1, [r0, #24]
 8002324:	6183      	str	r3, [r0, #24]
 8002326:	6983      	ldr	r3, [r0, #24]
 8002328:	6983      	ldr	r3, [r0, #24]
 800232a:	4770      	bx	lr

0800232c <GPIO_EventOutputConfig>:
 800232c:	4a05      	ldr	r2, [pc, #20]	; (8002344 <GPIO_EventOutputConfig+0x18>)
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	0c1b      	lsrs	r3, r3, #16
 8002338:	4319      	orrs	r1, r3
 800233a:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 800233e:	6010      	str	r0, [r2, #0]
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000

08002348 <GPIO_EventOutputCmd>:
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <GPIO_EventOutputCmd+0x8>)
 800234a:	6018      	str	r0, [r3, #0]
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	4220001c 	.word	0x4220001c

08002354 <GPIO_PinRemapConfig>:
 8002354:	2800      	cmp	r0, #0
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <GPIO_PinRemapConfig+0x5c>)
 8002358:	b530      	push	{r4, r5, lr}
 800235a:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 800235e:	bfb4      	ite	lt
 8002360:	69d3      	ldrlt	r3, [r2, #28]
 8002362:	6853      	ldrge	r3, [r2, #4]
 8002364:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8002368:	b284      	uxth	r4, r0
 800236a:	d106      	bne.n	800237a <GPIO_PinRemapConfig+0x26>
 800236c:	6855      	ldr	r5, [r2, #4]
 800236e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002372:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8002376:	6055      	str	r5, [r2, #4]
 8002378:	e00e      	b.n	8002398 <GPIO_PinRemapConfig+0x44>
 800237a:	02c2      	lsls	r2, r0, #11
 800237c:	bf55      	itete	pl
 800237e:	0d42      	lsrpl	r2, r0, #21
 8002380:	2203      	movmi	r2, #3
 8002382:	0112      	lslpl	r2, r2, #4
 8002384:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8002388:	bf4c      	ite	mi
 800238a:	40aa      	lslmi	r2, r5
 800238c:	fa04 f202 	lslpl.w	r2, r4, r2
 8002390:	ea23 0302 	bic.w	r3, r3, r2
 8002394:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002398:	b119      	cbz	r1, 80023a2 <GPIO_PinRemapConfig+0x4e>
 800239a:	0d42      	lsrs	r2, r0, #21
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	4094      	lsls	r4, r2
 80023a0:	4323      	orrs	r3, r4
 80023a2:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <GPIO_PinRemapConfig+0x5c>)
 80023a4:	2800      	cmp	r0, #0
 80023a6:	bfb4      	ite	lt
 80023a8:	61d3      	strlt	r3, [r2, #28]
 80023aa:	6053      	strge	r3, [r2, #4]
 80023ac:	bd30      	pop	{r4, r5, pc}
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000

080023b4 <GPIO_EXTILineConfig>:
 80023b4:	f001 0303 	and.w	r3, r1, #3
 80023b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80023bc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80023c0:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80023c4:	b510      	push	{r4, lr}
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	688c      	ldr	r4, [r1, #8]
 80023ca:	220f      	movs	r2, #15
 80023cc:	409a      	lsls	r2, r3
 80023ce:	ea24 0202 	bic.w	r2, r4, r2
 80023d2:	608a      	str	r2, [r1, #8]
 80023d4:	688a      	ldr	r2, [r1, #8]
 80023d6:	4098      	lsls	r0, r3
 80023d8:	4310      	orrs	r0, r2
 80023da:	6088      	str	r0, [r1, #8]
 80023dc:	bd10      	pop	{r4, pc}

080023de <GPIO_ETH_MediaInterfaceConfig>:
 80023de:	4b01      	ldr	r3, [pc, #4]	; (80023e4 <GPIO_ETH_MediaInterfaceConfig+0x6>)
 80023e0:	6018      	str	r0, [r3, #0]
 80023e2:	4770      	bx	lr
 80023e4:	422000dc 	.word	0x422000dc

080023e8 <I2C_DeInit>:
 80023e8:	b508      	push	{r3, lr}
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <I2C_DeInit+0x30>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d107      	bne.n	8002402 <I2C_DeInit+0x1a>
 80023f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80023f6:	f000 fb9d 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 80023fa:	2100      	movs	r1, #0
 80023fc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002400:	e006      	b.n	8002410 <I2C_DeInit+0x28>
 8002402:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002406:	f000 fb95 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 800240a:	2100      	movs	r1, #0
 800240c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002414:	f000 bb8e 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 8002418:	40005400 	.word	0x40005400

0800241c <I2C_Init>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	4604      	mov	r4, r0
 8002422:	8886      	ldrh	r6, [r0, #4]
 8002424:	a801      	add	r0, sp, #4
 8002426:	460d      	mov	r5, r1
 8002428:	f000 fb0e 	bl	8002a48 <RCC_GetClocksFreq>
 800242c:	9a03      	ldr	r2, [sp, #12]
 800242e:	482e      	ldr	r0, [pc, #184]	; (80024e8 <I2C_Init+0xcc>)
 8002430:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8002434:	fbb2 f0f0 	udiv	r0, r2, r0
 8002438:	0436      	lsls	r6, r6, #16
 800243a:	0c36      	lsrs	r6, r6, #16
 800243c:	b281      	uxth	r1, r0
 800243e:	430e      	orrs	r6, r1
 8002440:	80a6      	strh	r6, [r4, #4]
 8002442:	8823      	ldrh	r3, [r4, #0]
 8002444:	4e29      	ldr	r6, [pc, #164]	; (80024ec <I2C_Init+0xd0>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	8023      	strh	r3, [r4, #0]
 8002450:	682b      	ldr	r3, [r5, #0]
 8002452:	42b3      	cmp	r3, r6
 8002454:	d80a      	bhi.n	800246c <I2C_Init+0x50>
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	3101      	adds	r1, #1
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b03      	cmp	r3, #3
 8002462:	b289      	uxth	r1, r1
 8002464:	bf98      	it	ls
 8002466:	2304      	movls	r3, #4
 8002468:	8421      	strh	r1, [r4, #32]
 800246a:	e023      	b.n	80024b4 <I2C_Init+0x98>
 800246c:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 8002470:	88ee      	ldrh	r6, [r5, #6]
 8002472:	428e      	cmp	r6, r1
 8002474:	bf1b      	ittet	ne
 8002476:	2119      	movne	r1, #25
 8002478:	434b      	mulne	r3, r1
 800247a:	eb03 0343 	addeq.w	r3, r3, r3, lsl #1
 800247e:	fbb2 f3f3 	udivne	r3, r2, r3
 8002482:	bf0b      	itete	eq
 8002484:	fbb2 f3f3 	udiveq	r3, r2, r3
 8002488:	b29b      	uxthne	r3, r3
 800248a:	b29b      	uxtheq	r3, r3
 800248c:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
 8002490:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002494:	b90a      	cbnz	r2, 800249a <I2C_Init+0x7e>
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800249e:	fb01 f200 	mul.w	r2, r1, r0
 80024a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a6:	fb92 f2f1 	sdiv	r2, r2, r1
 80024aa:	3201      	adds	r2, #1
 80024ac:	b292      	uxth	r2, r2
 80024ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b2:	8422      	strh	r2, [r4, #32]
 80024b4:	83a3      	strh	r3, [r4, #28]
 80024b6:	8823      	ldrh	r3, [r4, #0]
 80024b8:	88a9      	ldrh	r1, [r5, #4]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	8023      	strh	r3, [r4, #0]
 80024c2:	8823      	ldrh	r3, [r4, #0]
 80024c4:	896a      	ldrh	r2, [r5, #10]
 80024c6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80024ca:	f023 0302 	bic.w	r3, r3, #2
 80024ce:	041b      	lsls	r3, r3, #16
 80024d0:	430a      	orrs	r2, r1
 80024d2:	0c1b      	lsrs	r3, r3, #16
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	8023      	strh	r3, [r4, #0]
 80024da:	89aa      	ldrh	r2, [r5, #12]
 80024dc:	892b      	ldrh	r3, [r5, #8]
 80024de:	4313      	orrs	r3, r2
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	8123      	strh	r3, [r4, #8]
 80024e4:	b006      	add	sp, #24
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
 80024e8:	000f4240 	.word	0x000f4240
 80024ec:	000186a0 	.word	0x000186a0

080024f0 <I2C_StructInit>:
 80024f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80024f4:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80024f8:	6003      	str	r3, [r0, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	8083      	strh	r3, [r0, #4]
 80024fe:	8103      	strh	r3, [r0, #8]
 8002500:	8143      	strh	r3, [r0, #10]
 8002502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002506:	80c2      	strh	r2, [r0, #6]
 8002508:	8183      	strh	r3, [r0, #12]
 800250a:	4770      	bx	lr

0800250c <I2C_Cmd>:
 800250c:	8803      	ldrh	r3, [r0, #0]
 800250e:	b119      	cbz	r1, 8002518 <I2C_Cmd+0xc>
 8002510:	b29b      	uxth	r3, r3
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	e003      	b.n	8002520 <I2C_Cmd+0x14>
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	8003      	strh	r3, [r0, #0]
 8002522:	4770      	bx	lr

08002524 <I2C_DMACmd>:
 8002524:	8883      	ldrh	r3, [r0, #4]
 8002526:	b119      	cbz	r1, 8002530 <I2C_DMACmd+0xc>
 8002528:	b29b      	uxth	r3, r3
 800252a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800252e:	e003      	b.n	8002538 <I2C_DMACmd+0x14>
 8002530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	8083      	strh	r3, [r0, #4]
 800253a:	4770      	bx	lr

0800253c <I2C_DMALastTransferCmd>:
 800253c:	8883      	ldrh	r3, [r0, #4]
 800253e:	b119      	cbz	r1, 8002548 <I2C_DMALastTransferCmd+0xc>
 8002540:	b29b      	uxth	r3, r3
 8002542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002546:	e003      	b.n	8002550 <I2C_DMALastTransferCmd+0x14>
 8002548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	8083      	strh	r3, [r0, #4]
 8002552:	4770      	bx	lr

08002554 <I2C_GenerateSTART>:
 8002554:	8803      	ldrh	r3, [r0, #0]
 8002556:	b119      	cbz	r1, 8002560 <I2C_GenerateSTART+0xc>
 8002558:	b29b      	uxth	r3, r3
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	e003      	b.n	8002568 <I2C_GenerateSTART+0x14>
 8002560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	0c1b      	lsrs	r3, r3, #16
 8002568:	8003      	strh	r3, [r0, #0]
 800256a:	4770      	bx	lr

0800256c <I2C_GenerateSTOP>:
 800256c:	8803      	ldrh	r3, [r0, #0]
 800256e:	b119      	cbz	r1, 8002578 <I2C_GenerateSTOP+0xc>
 8002570:	b29b      	uxth	r3, r3
 8002572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002576:	e003      	b.n	8002580 <I2C_GenerateSTOP+0x14>
 8002578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	8003      	strh	r3, [r0, #0]
 8002582:	4770      	bx	lr

08002584 <I2C_AcknowledgeConfig>:
 8002584:	8803      	ldrh	r3, [r0, #0]
 8002586:	b119      	cbz	r1, 8002590 <I2C_AcknowledgeConfig+0xc>
 8002588:	b29b      	uxth	r3, r3
 800258a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258e:	e003      	b.n	8002598 <I2C_AcknowledgeConfig+0x14>
 8002590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	8003      	strh	r3, [r0, #0]
 800259a:	4770      	bx	lr

0800259c <I2C_OwnAddress2Config>:
 800259c:	8983      	ldrh	r3, [r0, #12]
 800259e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80025a8:	430b      	orrs	r3, r1
 80025aa:	8183      	strh	r3, [r0, #12]
 80025ac:	4770      	bx	lr

080025ae <I2C_DualAddressCmd>:
 80025ae:	8983      	ldrh	r3, [r0, #12]
 80025b0:	b119      	cbz	r1, 80025ba <I2C_DualAddressCmd+0xc>
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	e003      	b.n	80025c2 <I2C_DualAddressCmd+0x14>
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	8183      	strh	r3, [r0, #12]
 80025c4:	4770      	bx	lr

080025c6 <I2C_GeneralCallCmd>:
 80025c6:	8803      	ldrh	r3, [r0, #0]
 80025c8:	b119      	cbz	r1, 80025d2 <I2C_GeneralCallCmd+0xc>
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d0:	e003      	b.n	80025da <I2C_GeneralCallCmd+0x14>
 80025d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	8003      	strh	r3, [r0, #0]
 80025dc:	4770      	bx	lr

080025de <I2C_ITConfig>:
 80025de:	8883      	ldrh	r3, [r0, #4]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b10a      	cbz	r2, 80025e8 <I2C_ITConfig+0xa>
 80025e4:	4319      	orrs	r1, r3
 80025e6:	e001      	b.n	80025ec <I2C_ITConfig+0xe>
 80025e8:	ea23 0101 	bic.w	r1, r3, r1
 80025ec:	8081      	strh	r1, [r0, #4]
 80025ee:	4770      	bx	lr

080025f0 <I2C_SendData>:
 80025f0:	8201      	strh	r1, [r0, #16]
 80025f2:	4770      	bx	lr

080025f4 <I2C_ReceiveData>:
 80025f4:	8a00      	ldrh	r0, [r0, #16]
 80025f6:	b2c0      	uxtb	r0, r0
 80025f8:	4770      	bx	lr

080025fa <I2C_Send7bitAddress>:
 80025fa:	b112      	cbz	r2, 8002602 <I2C_Send7bitAddress+0x8>
 80025fc:	f041 0101 	orr.w	r1, r1, #1
 8002600:	e001      	b.n	8002606 <I2C_Send7bitAddress+0xc>
 8002602:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002606:	b289      	uxth	r1, r1
 8002608:	8201      	strh	r1, [r0, #16]
 800260a:	4770      	bx	lr

0800260c <I2C_ReadRegister>:
 800260c:	b082      	sub	sp, #8
 800260e:	2300      	movs	r3, #0
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	9001      	str	r0, [sp, #4]
 8002614:	9b01      	ldr	r3, [sp, #4]
 8002616:	4419      	add	r1, r3
 8002618:	9101      	str	r1, [sp, #4]
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	8818      	ldrh	r0, [r3, #0]
 800261e:	b280      	uxth	r0, r0
 8002620:	b002      	add	sp, #8
 8002622:	4770      	bx	lr

08002624 <I2C_SoftwareResetCmd>:
 8002624:	8803      	ldrh	r3, [r0, #0]
 8002626:	b129      	cbz	r1, 8002634 <I2C_SoftwareResetCmd+0x10>
 8002628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002630:	b29b      	uxth	r3, r3
 8002632:	e001      	b.n	8002638 <I2C_SoftwareResetCmd+0x14>
 8002634:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002638:	8003      	strh	r3, [r0, #0]
 800263a:	4770      	bx	lr

0800263c <I2C_SMBusAlertConfig>:
 800263c:	8803      	ldrh	r3, [r0, #0]
 800263e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002642:	bf15      	itete	ne
 8002644:	f423 5300 	bicne.w	r3, r3, #8192	; 0x2000
 8002648:	b29b      	uxtheq	r3, r3
 800264a:	041b      	lslne	r3, r3, #16
 800264c:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8002650:	bf18      	it	ne
 8002652:	0c1b      	lsrne	r3, r3, #16
 8002654:	8003      	strh	r3, [r0, #0]
 8002656:	4770      	bx	lr

08002658 <I2C_TransmitPEC>:
 8002658:	8803      	ldrh	r3, [r0, #0]
 800265a:	b119      	cbz	r1, 8002664 <I2C_TransmitPEC+0xc>
 800265c:	b29b      	uxth	r3, r3
 800265e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002662:	e003      	b.n	800266c <I2C_TransmitPEC+0x14>
 8002664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	8003      	strh	r3, [r0, #0]
 800266e:	4770      	bx	lr

08002670 <I2C_PECPositionConfig>:
 8002670:	8803      	ldrh	r3, [r0, #0]
 8002672:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002676:	bf15      	itete	ne
 8002678:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 800267c:	b29b      	uxtheq	r3, r3
 800267e:	041b      	lslne	r3, r3, #16
 8002680:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8002684:	bf18      	it	ne
 8002686:	0c1b      	lsrne	r3, r3, #16
 8002688:	8003      	strh	r3, [r0, #0]
 800268a:	4770      	bx	lr

0800268c <I2C_NACKPositionConfig>:
 800268c:	f7ff bff0 	b.w	8002670 <I2C_PECPositionConfig>

08002690 <I2C_CalculatePEC>:
 8002690:	8803      	ldrh	r3, [r0, #0]
 8002692:	b119      	cbz	r1, 800269c <I2C_CalculatePEC+0xc>
 8002694:	b29b      	uxth	r3, r3
 8002696:	f043 0320 	orr.w	r3, r3, #32
 800269a:	e003      	b.n	80026a4 <I2C_CalculatePEC+0x14>
 800269c:	f023 0320 	bic.w	r3, r3, #32
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	0c1b      	lsrs	r3, r3, #16
 80026a4:	8003      	strh	r3, [r0, #0]
 80026a6:	4770      	bx	lr

080026a8 <I2C_GetPEC>:
 80026a8:	8b00      	ldrh	r0, [r0, #24]
 80026aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80026ae:	4770      	bx	lr

080026b0 <I2C_ARPCmd>:
 80026b0:	8803      	ldrh	r3, [r0, #0]
 80026b2:	b119      	cbz	r1, 80026bc <I2C_ARPCmd+0xc>
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f043 0310 	orr.w	r3, r3, #16
 80026ba:	e003      	b.n	80026c4 <I2C_ARPCmd+0x14>
 80026bc:	f023 0310 	bic.w	r3, r3, #16
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	0c1b      	lsrs	r3, r3, #16
 80026c4:	8003      	strh	r3, [r0, #0]
 80026c6:	4770      	bx	lr

080026c8 <I2C_StretchClockCmd>:
 80026c8:	8803      	ldrh	r3, [r0, #0]
 80026ca:	b919      	cbnz	r1, 80026d4 <I2C_StretchClockCmd+0xc>
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d2:	e003      	b.n	80026dc <I2C_StretchClockCmd+0x14>
 80026d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	8003      	strh	r3, [r0, #0]
 80026de:	4770      	bx	lr

080026e0 <I2C_FastModeDutyCycleConfig>:
 80026e0:	8b83      	ldrh	r3, [r0, #28]
 80026e2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80026e6:	bf1b      	ittet	ne
 80026e8:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 80026ec:	041b      	lslne	r3, r3, #16
 80026ee:	b29b      	uxtheq	r3, r3
 80026f0:	0c1b      	lsrne	r3, r3, #16
 80026f2:	bf08      	it	eq
 80026f4:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80026f8:	8383      	strh	r3, [r0, #28]
 80026fa:	4770      	bx	lr

080026fc <I2C_CheckEvent>:
 80026fc:	8a83      	ldrh	r3, [r0, #20]
 80026fe:	8b00      	ldrh	r0, [r0, #24]
 8002700:	b29b      	uxth	r3, r3
 8002702:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002706:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800270a:	ea03 0002 	and.w	r0, r3, r2
 800270e:	1a43      	subs	r3, r0, r1
 8002710:	4258      	negs	r0, r3
 8002712:	4158      	adcs	r0, r3
 8002714:	4770      	bx	lr

08002716 <I2C_GetLastEvent>:
 8002716:	8a83      	ldrh	r3, [r0, #20]
 8002718:	8b00      	ldrh	r0, [r0, #24]
 800271a:	b29b      	uxth	r3, r3
 800271c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002720:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002724:	4770      	bx	lr

08002726 <I2C_GetFlagStatus>:
 8002726:	b082      	sub	sp, #8
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	0f0b      	lsrs	r3, r1, #28
 8002730:	9001      	str	r0, [sp, #4]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	9b00      	ldr	r3, [sp, #0]
 8002736:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800273a:	b113      	cbz	r3, 8002742 <I2C_GetFlagStatus+0x1c>
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	3314      	adds	r3, #20
 8002740:	e002      	b.n	8002748 <I2C_GetFlagStatus+0x22>
 8002742:	9b01      	ldr	r3, [sp, #4]
 8002744:	0c09      	lsrs	r1, r1, #16
 8002746:	3318      	adds	r3, #24
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	9b01      	ldr	r3, [sp, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4219      	tst	r1, r3
 8002750:	bf14      	ite	ne
 8002752:	2001      	movne	r0, #1
 8002754:	2000      	moveq	r0, #0
 8002756:	b002      	add	sp, #8
 8002758:	4770      	bx	lr

0800275a <I2C_ClearFlag>:
 800275a:	43c9      	mvns	r1, r1
 800275c:	b289      	uxth	r1, r1
 800275e:	8281      	strh	r1, [r0, #20]
 8002760:	4770      	bx	lr

08002762 <I2C_GetITStatus>:
 8002762:	8883      	ldrh	r3, [r0, #4]
 8002764:	8a80      	ldrh	r0, [r0, #20]
 8002766:	b29b      	uxth	r3, r3
 8002768:	b280      	uxth	r0, r0
 800276a:	4008      	ands	r0, r1
 800276c:	d006      	beq.n	800277c <I2C_GetITStatus+0x1a>
 800276e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002772:	ea13 4311 	ands.w	r3, r3, r1, lsr #16
 8002776:	bf14      	ite	ne
 8002778:	2001      	movne	r0, #1
 800277a:	2000      	moveq	r0, #0
 800277c:	4770      	bx	lr

0800277e <I2C_ClearITPendingBit>:
 800277e:	43c9      	mvns	r1, r1
 8002780:	b289      	uxth	r1, r1
 8002782:	8281      	strh	r1, [r0, #20]
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <IWDG_WriteAccessCmd>:
 8002788:	4b01      	ldr	r3, [pc, #4]	; (8002790 <IWDG_WriteAccessCmd+0x8>)
 800278a:	6018      	str	r0, [r3, #0]
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40003000 	.word	0x40003000

08002794 <IWDG_SetPrescaler>:
 8002794:	4b01      	ldr	r3, [pc, #4]	; (800279c <IWDG_SetPrescaler+0x8>)
 8002796:	6058      	str	r0, [r3, #4]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40003000 	.word	0x40003000

080027a0 <IWDG_SetReload>:
 80027a0:	4b01      	ldr	r3, [pc, #4]	; (80027a8 <IWDG_SetReload+0x8>)
 80027a2:	6098      	str	r0, [r3, #8]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40003000 	.word	0x40003000

080027ac <IWDG_ReloadCounter>:
 80027ac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80027b0:	4b01      	ldr	r3, [pc, #4]	; (80027b8 <IWDG_ReloadCounter+0xc>)
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40003000 	.word	0x40003000

080027bc <IWDG_Enable>:
 80027bc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80027c0:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <IWDG_Enable+0xc>)
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40003000 	.word	0x40003000

080027cc <IWDG_GetFlagStatus>:
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <IWDG_GetFlagStatus+0x10>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4218      	tst	r0, r3
 80027d2:	bf14      	ite	ne
 80027d4:	2001      	movne	r0, #1
 80027d6:	2000      	moveq	r0, #0
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40003000 	.word	0x40003000

080027e0 <PWR_DeInit>:
 80027e0:	b508      	push	{r3, lr}
 80027e2:	2101      	movs	r1, #1
 80027e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80027e8:	f000 f9a4 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 80027ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80027f0:	2100      	movs	r1, #0
 80027f2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80027f6:	f000 b99d 	b.w	8002b34 <RCC_APB1PeriphResetCmd>

080027fa <PWR_BackupAccessCmd>:
 80027fa:	4b01      	ldr	r3, [pc, #4]	; (8002800 <PWR_BackupAccessCmd+0x6>)
 80027fc:	6018      	str	r0, [r3, #0]
 80027fe:	4770      	bx	lr
 8002800:	420e0020 	.word	0x420e0020

08002804 <PWR_PVDCmd>:
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <PWR_PVDCmd+0x8>)
 8002806:	6018      	str	r0, [r3, #0]
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	420e0010 	.word	0x420e0010

08002810 <PWR_PVDLevelConfig>:
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <PWR_PVDLevelConfig+0x10>)
 8002812:	6813      	ldr	r3, [r2, #0]
 8002814:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002818:	4318      	orrs	r0, r3
 800281a:	6010      	str	r0, [r2, #0]
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40007000 	.word	0x40007000

08002824 <PWR_WakeUpPinCmd>:
 8002824:	4b01      	ldr	r3, [pc, #4]	; (800282c <PWR_WakeUpPinCmd+0x8>)
 8002826:	6018      	str	r0, [r3, #0]
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	420e00a0 	.word	0x420e00a0

08002830 <PWR_EnterSTOPMode>:
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <PWR_EnterSTOPMode+0x2c>)
 8002832:	2901      	cmp	r1, #1
 8002834:	6813      	ldr	r3, [r2, #0]
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	ea40 0003 	orr.w	r0, r0, r3
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <PWR_EnterSTOPMode+0x30>)
 8002840:	6010      	str	r0, [r2, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	f042 0204 	orr.w	r2, r2, #4
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	d101      	bne.n	8002850 <PWR_EnterSTOPMode+0x20>
 800284c:	bf30      	wfi
 800284e:	e000      	b.n	8002852 <PWR_EnterSTOPMode+0x22>
 8002850:	bf20      	wfe
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	f022 0204 	bic.w	r2, r2, #4
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	4770      	bx	lr
 800285c:	40007000 	.word	0x40007000
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <PWR_EnterSTANDBYMode>:
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <PWR_EnterSTANDBYMode+0x20>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	f042 0204 	orr.w	r2, r2, #4
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f042 0202 	orr.w	r2, r2, #2
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <PWR_EnterSTANDBYMode+0x24>)
 8002878:	6913      	ldr	r3, [r2, #16]
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	6113      	str	r3, [r2, #16]
 8002880:	bf30      	wfi
 8002882:	4770      	bx	lr
 8002884:	40007000 	.word	0x40007000
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <PWR_GetFlagStatus>:
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <PWR_GetFlagStatus+0x10>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4203      	tst	r3, r0
 8002892:	bf14      	ite	ne
 8002894:	2001      	movne	r0, #1
 8002896:	2000      	moveq	r0, #0
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40007000 	.word	0x40007000

080028a0 <PWR_ClearFlag>:
 80028a0:	4a02      	ldr	r2, [pc, #8]	; (80028ac <PWR_ClearFlag+0xc>)
 80028a2:	6813      	ldr	r3, [r2, #0]
 80028a4:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 80028a8:	6010      	str	r0, [r2, #0]
 80028aa:	4770      	bx	lr
 80028ac:	40007000 	.word	0x40007000

080028b0 <RCC_DeInit>:
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <RCC_DeInit+0x38>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <RCC_DeInit+0x3c>)
 80028be:	400a      	ands	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	f8ff0000 	.word	0xf8ff0000

080028f0 <RCC_HSEConfig>:
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <RCC_HSEConfig+0x34>)
 80028f2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	d003      	beq.n	8002910 <RCC_HSEConfig+0x20>
 8002908:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800290c:	d004      	beq.n	8002918 <RCC_HSEConfig+0x28>
 800290e:	4770      	bx	lr
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002916:	e002      	b.n	800291e <RCC_HSEConfig+0x2e>
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000

08002928 <RCC_AdjustHSICalibrationValue>:
 8002928:	4a03      	ldr	r2, [pc, #12]	; (8002938 <RCC_AdjustHSICalibrationValue+0x10>)
 800292a:	6813      	ldr	r3, [r2, #0]
 800292c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002930:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8002934:	6010      	str	r0, [r2, #0]
 8002936:	4770      	bx	lr
 8002938:	40021000 	.word	0x40021000

0800293c <RCC_HSICmd>:
 800293c:	4b01      	ldr	r3, [pc, #4]	; (8002944 <RCC_HSICmd+0x8>)
 800293e:	6018      	str	r0, [r3, #0]
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	42420000 	.word	0x42420000

08002948 <RCC_PLLConfig>:
 8002948:	4a03      	ldr	r2, [pc, #12]	; (8002958 <RCC_PLLConfig+0x10>)
 800294a:	6853      	ldr	r3, [r2, #4]
 800294c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002950:	4319      	orrs	r1, r3
 8002952:	4308      	orrs	r0, r1
 8002954:	6050      	str	r0, [r2, #4]
 8002956:	4770      	bx	lr
 8002958:	40021000 	.word	0x40021000

0800295c <RCC_PLLCmd>:
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <RCC_PLLCmd+0x8>)
 800295e:	6018      	str	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	42420060 	.word	0x42420060

08002968 <RCC_SYSCLKConfig>:
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <RCC_SYSCLKConfig+0x10>)
 800296a:	6853      	ldr	r3, [r2, #4]
 800296c:	f023 0303 	bic.w	r3, r3, #3
 8002970:	4318      	orrs	r0, r3
 8002972:	6050      	str	r0, [r2, #4]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <RCC_GetSYSCLKSource>:
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <RCC_GetSYSCLKSource+0xc>)
 800297e:	6858      	ldr	r0, [r3, #4]
 8002980:	f000 000c 	and.w	r0, r0, #12
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000

0800298c <RCC_HCLKConfig>:
 800298c:	4a03      	ldr	r2, [pc, #12]	; (800299c <RCC_HCLKConfig+0x10>)
 800298e:	6853      	ldr	r3, [r2, #4]
 8002990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002994:	4318      	orrs	r0, r3
 8002996:	6050      	str	r0, [r2, #4]
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <RCC_PCLK1Config>:
 80029a0:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <RCC_PCLK1Config+0x10>)
 80029a2:	6853      	ldr	r3, [r2, #4]
 80029a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029a8:	4318      	orrs	r0, r3
 80029aa:	6050      	str	r0, [r2, #4]
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <RCC_PCLK2Config>:
 80029b4:	4a03      	ldr	r2, [pc, #12]	; (80029c4 <RCC_PCLK2Config+0x10>)
 80029b6:	6853      	ldr	r3, [r2, #4]
 80029b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80029bc:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80029c0:	6050      	str	r0, [r2, #4]
 80029c2:	4770      	bx	lr
 80029c4:	40021000 	.word	0x40021000

080029c8 <RCC_ITConfig>:
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <RCC_ITConfig+0x14>)
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	b109      	cbz	r1, 80029d2 <RCC_ITConfig+0xa>
 80029ce:	4310      	orrs	r0, r2
 80029d0:	e001      	b.n	80029d6 <RCC_ITConfig+0xe>
 80029d2:	ea22 0000 	bic.w	r0, r2, r0
 80029d6:	7018      	strb	r0, [r3, #0]
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40021009 	.word	0x40021009

080029e0 <RCC_USBCLKConfig>:
 80029e0:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <RCC_USBCLKConfig+0x8>)
 80029e2:	6018      	str	r0, [r3, #0]
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	424200d8 	.word	0x424200d8

080029ec <RCC_ADCCLKConfig>:
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <RCC_ADCCLKConfig+0x10>)
 80029ee:	6853      	ldr	r3, [r2, #4]
 80029f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029f4:	4318      	orrs	r0, r3
 80029f6:	6050      	str	r0, [r2, #4]
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000

08002a00 <RCC_LSEConfig>:
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <RCC_LSEConfig+0x1c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	2801      	cmp	r0, #1
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	d002      	beq.n	8002a12 <RCC_LSEConfig+0x12>
 8002a0c:	2804      	cmp	r0, #4
 8002a0e:	d002      	beq.n	8002a16 <RCC_LSEConfig+0x16>
 8002a10:	4770      	bx	lr
 8002a12:	7018      	strb	r0, [r3, #0]
 8002a14:	4770      	bx	lr
 8002a16:	2205      	movs	r2, #5
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	4770      	bx	lr
 8002a1c:	40021020 	.word	0x40021020

08002a20 <RCC_LSICmd>:
 8002a20:	4b01      	ldr	r3, [pc, #4]	; (8002a28 <RCC_LSICmd+0x8>)
 8002a22:	6018      	str	r0, [r3, #0]
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	42420480 	.word	0x42420480

08002a2c <RCC_RTCCLKConfig>:
 8002a2c:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <RCC_RTCCLKConfig+0xc>)
 8002a2e:	6a13      	ldr	r3, [r2, #32]
 8002a30:	4318      	orrs	r0, r3
 8002a32:	6210      	str	r0, [r2, #32]
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <RCC_RTCCLKCmd>:
 8002a3c:	4b01      	ldr	r3, [pc, #4]	; (8002a44 <RCC_RTCCLKCmd+0x8>)
 8002a3e:	6018      	str	r0, [r3, #0]
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	4242043c 	.word	0x4242043c

08002a48 <RCC_GetClocksFreq>:
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <RCC_GetClocksFreq+0x78>)
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	6853      	ldr	r3, [r2, #4]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d003      	beq.n	8002a5e <RCC_GetClocksFreq+0x16>
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d003      	beq.n	8002a62 <RCC_GetClocksFreq+0x1a>
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <RCC_GetClocksFreq+0x7c>)
 8002a5c:	e011      	b.n	8002a82 <RCC_GetClocksFreq+0x3a>
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <RCC_GetClocksFreq+0x80>)
 8002a60:	e00f      	b.n	8002a82 <RCC_GetClocksFreq+0x3a>
 8002a62:	6853      	ldr	r3, [r2, #4]
 8002a64:	6851      	ldr	r1, [r2, #4]
 8002a66:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8002a6a:	03cc      	lsls	r4, r1, #15
 8002a6c:	f103 0302 	add.w	r3, r3, #2
 8002a70:	d401      	bmi.n	8002a76 <RCC_GetClocksFreq+0x2e>
 8002a72:	4916      	ldr	r1, [pc, #88]	; (8002acc <RCC_GetClocksFreq+0x84>)
 8002a74:	e004      	b.n	8002a80 <RCC_GetClocksFreq+0x38>
 8002a76:	6851      	ldr	r1, [r2, #4]
 8002a78:	0389      	lsls	r1, r1, #14
 8002a7a:	bf4c      	ite	mi
 8002a7c:	4911      	ldrmi	r1, [pc, #68]	; (8002ac4 <RCC_GetClocksFreq+0x7c>)
 8002a7e:	4912      	ldrpl	r1, [pc, #72]	; (8002ac8 <RCC_GetClocksFreq+0x80>)
 8002a80:	434b      	muls	r3, r1
 8002a82:	6003      	str	r3, [r0, #0]
 8002a84:	6853      	ldr	r3, [r2, #4]
 8002a86:	4912      	ldr	r1, [pc, #72]	; (8002ad0 <RCC_GetClocksFreq+0x88>)
 8002a88:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002a8c:	5ccc      	ldrb	r4, [r1, r3]
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	40e3      	lsrs	r3, r4
 8002a92:	6043      	str	r3, [r0, #4]
 8002a94:	6854      	ldr	r4, [r2, #4]
 8002a96:	f3c4 2402 	ubfx	r4, r4, #8, #3
 8002a9a:	5d0c      	ldrb	r4, [r1, r4]
 8002a9c:	fa23 f404 	lsr.w	r4, r3, r4
 8002aa0:	6084      	str	r4, [r0, #8]
 8002aa2:	6854      	ldr	r4, [r2, #4]
 8002aa4:	f3c4 24c2 	ubfx	r4, r4, #11, #3
 8002aa8:	5d0c      	ldrb	r4, [r1, r4]
 8002aaa:	40e3      	lsrs	r3, r4
 8002aac:	60c3      	str	r3, [r0, #12]
 8002aae:	6852      	ldr	r2, [r2, #4]
 8002ab0:	f3c2 3281 	ubfx	r2, r2, #14, #2
 8002ab4:	440a      	add	r2, r1
 8002ab6:	7c12      	ldrb	r2, [r2, #16]
 8002ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002abc:	6103      	str	r3, [r0, #16]
 8002abe:	bd10      	pop	{r4, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	007a1200 	.word	0x007a1200
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	003d0900 	.word	0x003d0900
 8002ad0:	20000018 	.word	0x20000018

08002ad4 <RCC_AHBPeriphClockCmd>:
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <RCC_AHBPeriphClockCmd+0x14>)
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	b109      	cbz	r1, 8002ade <RCC_AHBPeriphClockCmd+0xa>
 8002ada:	4310      	orrs	r0, r2
 8002adc:	e001      	b.n	8002ae2 <RCC_AHBPeriphClockCmd+0xe>
 8002ade:	ea22 0000 	bic.w	r0, r2, r0
 8002ae2:	6158      	str	r0, [r3, #20]
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <RCC_APB2PeriphClockCmd>:
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <RCC_APB2PeriphClockCmd+0x14>)
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	b109      	cbz	r1, 8002af6 <RCC_APB2PeriphClockCmd+0xa>
 8002af2:	4310      	orrs	r0, r2
 8002af4:	e001      	b.n	8002afa <RCC_APB2PeriphClockCmd+0xe>
 8002af6:	ea22 0000 	bic.w	r0, r2, r0
 8002afa:	6198      	str	r0, [r3, #24]
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <RCC_APB1PeriphClockCmd>:
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <RCC_APB1PeriphClockCmd+0x14>)
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	b109      	cbz	r1, 8002b0e <RCC_APB1PeriphClockCmd+0xa>
 8002b0a:	4310      	orrs	r0, r2
 8002b0c:	e001      	b.n	8002b12 <RCC_APB1PeriphClockCmd+0xe>
 8002b0e:	ea22 0000 	bic.w	r0, r2, r0
 8002b12:	61d8      	str	r0, [r3, #28]
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <RCC_APB2PeriphResetCmd>:
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <RCC_APB2PeriphResetCmd+0x14>)
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	b109      	cbz	r1, 8002b26 <RCC_APB2PeriphResetCmd+0xa>
 8002b22:	4310      	orrs	r0, r2
 8002b24:	e001      	b.n	8002b2a <RCC_APB2PeriphResetCmd+0xe>
 8002b26:	ea22 0000 	bic.w	r0, r2, r0
 8002b2a:	60d8      	str	r0, [r3, #12]
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <RCC_APB1PeriphResetCmd>:
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <RCC_APB1PeriphResetCmd+0x14>)
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	b109      	cbz	r1, 8002b3e <RCC_APB1PeriphResetCmd+0xa>
 8002b3a:	4310      	orrs	r0, r2
 8002b3c:	e001      	b.n	8002b42 <RCC_APB1PeriphResetCmd+0xe>
 8002b3e:	ea22 0000 	bic.w	r0, r2, r0
 8002b42:	6118      	str	r0, [r3, #16]
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000

08002b4c <RCC_BackupResetCmd>:
 8002b4c:	4b01      	ldr	r3, [pc, #4]	; (8002b54 <RCC_BackupResetCmd+0x8>)
 8002b4e:	6018      	str	r0, [r3, #0]
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	42420440 	.word	0x42420440

08002b58 <RCC_ClockSecuritySystemCmd>:
 8002b58:	4b01      	ldr	r3, [pc, #4]	; (8002b60 <RCC_ClockSecuritySystemCmd+0x8>)
 8002b5a:	6018      	str	r0, [r3, #0]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	4242004c 	.word	0x4242004c

08002b64 <RCC_MCOConfig>:
 8002b64:	4b01      	ldr	r3, [pc, #4]	; (8002b6c <RCC_MCOConfig+0x8>)
 8002b66:	7018      	strb	r0, [r3, #0]
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40021007 	.word	0x40021007

08002b70 <RCC_GetFlagStatus>:
 8002b70:	0942      	lsrs	r2, r0, #5
 8002b72:	2a01      	cmp	r2, #1
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <RCC_GetFlagStatus+0x24>)
 8002b76:	d101      	bne.n	8002b7c <RCC_GetFlagStatus+0xc>
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e003      	b.n	8002b84 <RCC_GetFlagStatus+0x14>
 8002b7c:	2a02      	cmp	r2, #2
 8002b7e:	bf0c      	ite	eq
 8002b80:	6a1b      	ldreq	r3, [r3, #32]
 8002b82:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 8002b84:	f000 001f 	and.w	r0, r0, #31
 8002b88:	fa23 f000 	lsr.w	r0, r3, r0
 8002b8c:	f000 0001 	and.w	r0, r0, #1
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000

08002b98 <RCC_WaitForHSEStartUp>:
 8002b98:	b507      	push	{r0, r1, r2, lr}
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	2031      	movs	r0, #49	; 0x31
 8002ba0:	f7ff ffe6 	bl	8002b70 <RCC_GetFlagStatus>
 8002ba4:	9b01      	ldr	r3, [sp, #4]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	9b01      	ldr	r3, [sp, #4]
 8002bac:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002bb0:	d001      	beq.n	8002bb6 <RCC_WaitForHSEStartUp+0x1e>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d0f3      	beq.n	8002b9e <RCC_WaitForHSEStartUp+0x6>
 8002bb6:	2031      	movs	r0, #49	; 0x31
 8002bb8:	f7ff ffda 	bl	8002b70 <RCC_GetFlagStatus>
 8002bbc:	3000      	adds	r0, #0
 8002bbe:	bf18      	it	ne
 8002bc0:	2001      	movne	r0, #1
 8002bc2:	b003      	add	sp, #12
 8002bc4:	f85d fb04 	ldr.w	pc, [sp], #4

08002bc8 <RCC_ClearFlag>:
 8002bc8:	4a02      	ldr	r2, [pc, #8]	; (8002bd4 <RCC_ClearFlag+0xc>)
 8002bca:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	6253      	str	r3, [r2, #36]	; 0x24
 8002bd2:	4770      	bx	lr
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <RCC_GetITStatus>:
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <RCC_GetITStatus+0x10>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4218      	tst	r0, r3
 8002bde:	bf14      	ite	ne
 8002be0:	2001      	movne	r0, #1
 8002be2:	2000      	moveq	r0, #0
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000

08002bec <RCC_ClearITPendingBit>:
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <RCC_ClearITPendingBit+0x8>)
 8002bee:	7018      	strb	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	4002100a 	.word	0x4002100a

08002bf8 <SPI_I2S_DeInit>:
 8002bf8:	b508      	push	{r3, lr}
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <SPI_I2S_DeInit+0x58>)
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	d10b      	bne.n	8002c18 <SPI_I2S_DeInit+0x20>
 8002c00:	2101      	movs	r1, #1
 8002c02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c06:	f7ff ff89 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8002c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c14:	f7ff bf82 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <SPI_I2S_DeInit+0x5c>)
 8002c1a:	4298      	cmp	r0, r3
 8002c1c:	d108      	bne.n	8002c30 <SPI_I2S_DeInit+0x38>
 8002c1e:	2101      	movs	r1, #1
 8002c20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c24:	f7ff ff86 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8002c28:	2100      	movs	r1, #0
 8002c2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c2e:	e00a      	b.n	8002c46 <SPI_I2S_DeInit+0x4e>
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <SPI_I2S_DeInit+0x60>)
 8002c32:	4298      	cmp	r0, r3
 8002c34:	d10b      	bne.n	8002c4e <SPI_I2S_DeInit+0x56>
 8002c36:	2101      	movs	r1, #1
 8002c38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c3c:	f7ff ff7a 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8002c40:	2100      	movs	r1, #0
 8002c42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002c4a:	f7ff bf73 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 8002c4e:	bd08      	pop	{r3, pc}
 8002c50:	40013000 	.word	0x40013000
 8002c54:	40003800 	.word	0x40003800
 8002c58:	40003c00 	.word	0x40003c00

08002c5c <SPI_Init>:
 8002c5c:	8803      	ldrh	r3, [r0, #0]
 8002c5e:	880a      	ldrh	r2, [r1, #0]
 8002c60:	b510      	push	{r4, lr}
 8002c62:	f403 5441 	and.w	r4, r3, #12352	; 0x3040
 8002c66:	884b      	ldrh	r3, [r1, #2]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	888a      	ldrh	r2, [r1, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	88ca      	ldrh	r2, [r1, #6]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	890a      	ldrh	r2, [r1, #8]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	894a      	ldrh	r2, [r1, #10]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	898a      	ldrh	r2, [r1, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	89ca      	ldrh	r2, [r1, #14]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	4323      	orrs	r3, r4
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	8003      	strh	r3, [r0, #0]
 8002c88:	8b83      	ldrh	r3, [r0, #28]
 8002c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	8383      	strh	r3, [r0, #28]
 8002c94:	8a0b      	ldrh	r3, [r1, #16]
 8002c96:	8203      	strh	r3, [r0, #16]
 8002c98:	bd10      	pop	{r4, pc}

08002c9a <I2S_Init>:
 8002c9a:	8b83      	ldrh	r3, [r0, #28]
 8002c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ca2:	f023 030f 	bic.w	r3, r3, #15
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	8383      	strh	r3, [r0, #28]
 8002cac:	2302      	movs	r3, #2
 8002cae:	8403      	strh	r3, [r0, #32]
 8002cb0:	688b      	ldr	r3, [r1, #8]
 8002cb2:	8b86      	ldrh	r6, [r0, #28]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	4605      	mov	r5, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	b2b6      	uxth	r6, r6
 8002cbe:	d023      	beq.n	8002d08 <I2S_Init+0x6e>
 8002cc0:	888b      	ldrh	r3, [r1, #4]
 8002cc2:	a801      	add	r0, sp, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2702      	movne	r7, #2
 8002cca:	2701      	moveq	r7, #1
 8002ccc:	f7ff febc 	bl	8002a48 <RCC_GetClocksFreq>
 8002cd0:	88e3      	ldrh	r3, [r4, #6]
 8002cd2:	9901      	ldr	r1, [sp, #4]
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd8:	bf1c      	itt	ne
 8002cda:	017f      	lslne	r7, r7, #5
 8002cdc:	fbb1 f1f7 	udivne	r1, r1, r7
 8002ce0:	f04f 020a 	mov.w	r2, #10
 8002ce4:	bf08      	it	eq
 8002ce6:	0a09      	lsreq	r1, r1, #8
 8002ce8:	434a      	muls	r2, r1
 8002cea:	68a3      	ldr	r3, [r4, #8]
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	3305      	adds	r3, #5
 8002cf2:	220a      	movs	r2, #10
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cfa:	f003 0201 	and.w	r2, r3, #1
 8002cfe:	0212      	lsls	r2, r2, #8
 8002d00:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8002d04:	b292      	uxth	r2, r2
 8002d06:	e000      	b.n	8002d0a <I2S_Init+0x70>
 8002d08:	2200      	movs	r2, #0
 8002d0a:	1e99      	subs	r1, r3, #2
 8002d0c:	b289      	uxth	r1, r1
 8002d0e:	29fe      	cmp	r1, #254	; 0xfe
 8002d10:	bf24      	itt	cs
 8002d12:	2200      	movcs	r2, #0
 8002d14:	2302      	movcs	r3, #2
 8002d16:	4313      	orrs	r3, r2
 8002d18:	88e2      	ldrh	r2, [r4, #6]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	842b      	strh	r3, [r5, #32]
 8002d20:	8823      	ldrh	r3, [r4, #0]
 8002d22:	88a2      	ldrh	r2, [r4, #4]
 8002d24:	431e      	orrs	r6, r3
 8002d26:	8863      	ldrh	r3, [r4, #2]
 8002d28:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 8002d2c:	4333      	orrs	r3, r6
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	89a2      	ldrh	r2, [r4, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	83ab      	strh	r3, [r5, #28]
 8002d38:	b007      	add	sp, #28
 8002d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d3c <SPI_StructInit>:
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	8003      	strh	r3, [r0, #0]
 8002d40:	8043      	strh	r3, [r0, #2]
 8002d42:	8083      	strh	r3, [r0, #4]
 8002d44:	80c3      	strh	r3, [r0, #6]
 8002d46:	8103      	strh	r3, [r0, #8]
 8002d48:	8143      	strh	r3, [r0, #10]
 8002d4a:	8183      	strh	r3, [r0, #12]
 8002d4c:	81c3      	strh	r3, [r0, #14]
 8002d4e:	2307      	movs	r3, #7
 8002d50:	8203      	strh	r3, [r0, #16]
 8002d52:	4770      	bx	lr

08002d54 <I2S_StructInit>:
 8002d54:	2300      	movs	r3, #0
 8002d56:	2202      	movs	r2, #2
 8002d58:	8003      	strh	r3, [r0, #0]
 8002d5a:	8043      	strh	r3, [r0, #2]
 8002d5c:	8083      	strh	r3, [r0, #4]
 8002d5e:	80c3      	strh	r3, [r0, #6]
 8002d60:	6082      	str	r2, [r0, #8]
 8002d62:	8183      	strh	r3, [r0, #12]
 8002d64:	4770      	bx	lr

08002d66 <SPI_Cmd>:
 8002d66:	8803      	ldrh	r3, [r0, #0]
 8002d68:	b119      	cbz	r1, 8002d72 <SPI_Cmd+0xc>
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d70:	e003      	b.n	8002d7a <SPI_Cmd+0x14>
 8002d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	8003      	strh	r3, [r0, #0]
 8002d7c:	4770      	bx	lr

08002d7e <I2S_Cmd>:
 8002d7e:	8b83      	ldrh	r3, [r0, #28]
 8002d80:	b119      	cbz	r1, 8002d8a <I2S_Cmd+0xc>
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d88:	e003      	b.n	8002d92 <I2S_Cmd+0x14>
 8002d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	8383      	strh	r3, [r0, #28]
 8002d94:	4770      	bx	lr

08002d96 <SPI_I2S_ITConfig>:
 8002d96:	2301      	movs	r3, #1
 8002d98:	0909      	lsrs	r1, r1, #4
 8002d9a:	fa03 f101 	lsl.w	r1, r3, r1
 8002d9e:	8883      	ldrh	r3, [r0, #4]
 8002da0:	b289      	uxth	r1, r1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b10a      	cbz	r2, 8002daa <SPI_I2S_ITConfig+0x14>
 8002da6:	4319      	orrs	r1, r3
 8002da8:	e001      	b.n	8002dae <SPI_I2S_ITConfig+0x18>
 8002daa:	ea23 0101 	bic.w	r1, r3, r1
 8002dae:	8081      	strh	r1, [r0, #4]
 8002db0:	4770      	bx	lr

08002db2 <SPI_I2S_DMACmd>:
 8002db2:	8883      	ldrh	r3, [r0, #4]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b10a      	cbz	r2, 8002dbc <SPI_I2S_DMACmd+0xa>
 8002db8:	4319      	orrs	r1, r3
 8002dba:	e001      	b.n	8002dc0 <SPI_I2S_DMACmd+0xe>
 8002dbc:	ea23 0101 	bic.w	r1, r3, r1
 8002dc0:	8081      	strh	r1, [r0, #4]
 8002dc2:	4770      	bx	lr

08002dc4 <SPI_I2S_SendData>:
 8002dc4:	8181      	strh	r1, [r0, #12]
 8002dc6:	4770      	bx	lr

08002dc8 <SPI_I2S_ReceiveData>:
 8002dc8:	8980      	ldrh	r0, [r0, #12]
 8002dca:	b280      	uxth	r0, r0
 8002dcc:	4770      	bx	lr

08002dce <SPI_NSSInternalSoftwareConfig>:
 8002dce:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8002dd2:	4299      	cmp	r1, r3
 8002dd4:	8803      	ldrh	r3, [r0, #0]
 8002dd6:	bf0b      	itete	eq
 8002dd8:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
 8002ddc:	b29b      	uxthne	r3, r3
 8002dde:	041b      	lsleq	r3, r3, #16
 8002de0:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
 8002de4:	bf08      	it	eq
 8002de6:	0c1b      	lsreq	r3, r3, #16
 8002de8:	8003      	strh	r3, [r0, #0]
 8002dea:	4770      	bx	lr

08002dec <SPI_SSOutputCmd>:
 8002dec:	8883      	ldrh	r3, [r0, #4]
 8002dee:	b119      	cbz	r1, 8002df8 <SPI_SSOutputCmd+0xc>
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	e003      	b.n	8002e00 <SPI_SSOutputCmd+0x14>
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	8083      	strh	r3, [r0, #4]
 8002e02:	4770      	bx	lr

08002e04 <SPI_DataSizeConfig>:
 8002e04:	8803      	ldrh	r3, [r0, #0]
 8002e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	8003      	strh	r3, [r0, #0]
 8002e10:	8803      	ldrh	r3, [r0, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4319      	orrs	r1, r3
 8002e16:	8001      	strh	r1, [r0, #0]
 8002e18:	4770      	bx	lr

08002e1a <SPI_TransmitCRC>:
 8002e1a:	8803      	ldrh	r3, [r0, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e22:	8003      	strh	r3, [r0, #0]
 8002e24:	4770      	bx	lr

08002e26 <SPI_CalculateCRC>:
 8002e26:	8803      	ldrh	r3, [r0, #0]
 8002e28:	b119      	cbz	r1, 8002e32 <SPI_CalculateCRC+0xc>
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e30:	e003      	b.n	8002e3a <SPI_CalculateCRC+0x14>
 8002e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	8003      	strh	r3, [r0, #0]
 8002e3c:	4770      	bx	lr

08002e3e <SPI_GetCRC>:
 8002e3e:	2901      	cmp	r1, #1
 8002e40:	bf14      	ite	ne
 8002e42:	8b00      	ldrhne	r0, [r0, #24]
 8002e44:	8a80      	ldrheq	r0, [r0, #20]
 8002e46:	b280      	uxth	r0, r0
 8002e48:	4770      	bx	lr

08002e4a <SPI_GetCRCPolynomial>:
 8002e4a:	8a00      	ldrh	r0, [r0, #16]
 8002e4c:	b280      	uxth	r0, r0
 8002e4e:	4770      	bx	lr

08002e50 <SPI_BiDirectionalLineConfig>:
 8002e50:	8803      	ldrh	r3, [r0, #0]
 8002e52:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002e56:	bf15      	itete	ne
 8002e58:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8002e5c:	b29b      	uxtheq	r3, r3
 8002e5e:	041b      	lslne	r3, r3, #16
 8002e60:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002e64:	bf18      	it	ne
 8002e66:	0c1b      	lsrne	r3, r3, #16
 8002e68:	8003      	strh	r3, [r0, #0]
 8002e6a:	4770      	bx	lr

08002e6c <SPI_I2S_GetFlagStatus>:
 8002e6c:	8903      	ldrh	r3, [r0, #8]
 8002e6e:	4219      	tst	r1, r3
 8002e70:	bf14      	ite	ne
 8002e72:	2001      	movne	r0, #1
 8002e74:	2000      	moveq	r0, #0
 8002e76:	4770      	bx	lr

08002e78 <SPI_I2S_ClearFlag>:
 8002e78:	43c9      	mvns	r1, r1
 8002e7a:	b289      	uxth	r1, r1
 8002e7c:	8101      	strh	r1, [r0, #8]
 8002e7e:	4770      	bx	lr

08002e80 <SPI_I2S_GetITStatus>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	8884      	ldrh	r4, [r0, #4]
 8002e84:	8903      	ldrh	r3, [r0, #8]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f001 000f 	and.w	r0, r1, #15
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	fa02 f000 	lsl.w	r0, r2, r0
 8002e92:	4018      	ands	r0, r3
 8002e94:	b2a4      	uxth	r4, r4
 8002e96:	d005      	beq.n	8002ea4 <SPI_I2S_GetITStatus+0x24>
 8002e98:	0909      	lsrs	r1, r1, #4
 8002e9a:	408a      	lsls	r2, r1
 8002e9c:	4214      	tst	r4, r2
 8002e9e:	bf14      	ite	ne
 8002ea0:	2001      	movne	r0, #1
 8002ea2:	2000      	moveq	r0, #0
 8002ea4:	bd10      	pop	{r4, pc}

08002ea6 <SPI_I2S_ClearITPendingBit>:
 8002ea6:	f001 010f 	and.w	r1, r1, #15
 8002eaa:	2301      	movs	r3, #1
 8002eac:	fa03 f101 	lsl.w	r1, r3, r1
 8002eb0:	43c9      	mvns	r1, r1
 8002eb2:	b289      	uxth	r1, r1
 8002eb4:	8101      	strh	r1, [r0, #8]
 8002eb6:	4770      	bx	lr

08002eb8 <USART_DeInit>:
 8002eb8:	b508      	push	{r3, lr}
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <USART_DeInit+0x88>)
 8002ebc:	4298      	cmp	r0, r3
 8002ebe:	d10b      	bne.n	8002ed8 <USART_DeInit+0x20>
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ec6:	f7ff fe29 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8002eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ed4:	f7ff be22 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <USART_DeInit+0x8c>)
 8002eda:	4298      	cmp	r0, r3
 8002edc:	d108      	bne.n	8002ef0 <USART_DeInit+0x38>
 8002ede:	2101      	movs	r1, #1
 8002ee0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ee4:	f7ff fe26 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002eee:	e022      	b.n	8002f36 <USART_DeInit+0x7e>
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <USART_DeInit+0x90>)
 8002ef2:	4298      	cmp	r0, r3
 8002ef4:	d108      	bne.n	8002f08 <USART_DeInit+0x50>
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002efc:	f7ff fe1a 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8002f00:	2100      	movs	r1, #0
 8002f02:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002f06:	e016      	b.n	8002f36 <USART_DeInit+0x7e>
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <USART_DeInit+0x94>)
 8002f0a:	4298      	cmp	r0, r3
 8002f0c:	d108      	bne.n	8002f20 <USART_DeInit+0x68>
 8002f0e:	2101      	movs	r1, #1
 8002f10:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f14:	f7ff fe0e 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f1e:	e00a      	b.n	8002f36 <USART_DeInit+0x7e>
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <USART_DeInit+0x98>)
 8002f22:	4298      	cmp	r0, r3
 8002f24:	d10b      	bne.n	8002f3e <USART_DeInit+0x86>
 8002f26:	2101      	movs	r1, #1
 8002f28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f2c:	f7ff fe02 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8002f30:	2100      	movs	r1, #0
 8002f32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002f3a:	f7ff bdfb 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 8002f3e:	bd08      	pop	{r3, pc}
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40004400 	.word	0x40004400
 8002f48:	40004800 	.word	0x40004800
 8002f4c:	40004c00 	.word	0x40004c00
 8002f50:	40005000 	.word	0x40005000

08002f54 <USART_Init>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	460e      	mov	r6, r1
 8002f58:	4604      	mov	r4, r0
 8002f5a:	8a03      	ldrh	r3, [r0, #16]
 8002f5c:	88ca      	ldrh	r2, [r1, #6]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f64:	4313      	orrs	r3, r2
 8002f66:	8203      	strh	r3, [r0, #16]
 8002f68:	8982      	ldrh	r2, [r0, #12]
 8002f6a:	8889      	ldrh	r1, [r1, #4]
 8002f6c:	8933      	ldrh	r3, [r6, #8]
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	430b      	orrs	r3, r1
 8002f72:	8971      	ldrh	r1, [r6, #10]
 8002f74:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	f022 020c 	bic.w	r2, r2, #12
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	8183      	strh	r3, [r0, #12]
 8002f84:	8a83      	ldrh	r3, [r0, #20]
 8002f86:	89b2      	ldrh	r2, [r6, #12]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8e:	b086      	sub	sp, #24
 8002f90:	4313      	orrs	r3, r2
 8002f92:	8283      	strh	r3, [r0, #20]
 8002f94:	a801      	add	r0, sp, #4
 8002f96:	f7ff fd57 	bl	8002a48 <RCC_GetClocksFreq>
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <USART_Init+0xa4>)
 8002f9c:	9b03      	ldr	r3, [sp, #12]
 8002f9e:	9d04      	ldr	r5, [sp, #16]
 8002fa0:	6831      	ldr	r1, [r6, #0]
 8002fa2:	4294      	cmp	r4, r2
 8002fa4:	bf18      	it	ne
 8002fa6:	461d      	movne	r5, r3
 8002fa8:	2219      	movs	r2, #25
 8002faa:	436a      	muls	r2, r5
 8002fac:	89a3      	ldrh	r3, [r4, #12]
 8002fae:	2664      	movs	r6, #100	; 0x64
 8002fb0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002fb4:	bf14      	ite	ne
 8002fb6:	004d      	lslne	r5, r1, #1
 8002fb8:	008d      	lsleq	r5, r1, #2
 8002fba:	fbb2 f5f5 	udiv	r5, r2, r5
 8002fbe:	fbb5 f0f6 	udiv	r0, r5, r6
 8002fc2:	89a2      	ldrh	r2, [r4, #12]
 8002fc4:	0100      	lsls	r0, r0, #4
 8002fc6:	0901      	lsrs	r1, r0, #4
 8002fc8:	0412      	lsls	r2, r2, #16
 8002fca:	fb06 5311 	mls	r3, r6, r1, r5
 8002fce:	d507      	bpl.n	8002fe0 <USART_Init+0x8c>
 8002fd0:	00d9      	lsls	r1, r3, #3
 8002fd2:	3132      	adds	r1, #50	; 0x32
 8002fd4:	fbb1 f2f6 	udiv	r2, r1, r6
 8002fd8:	f002 0207 	and.w	r2, r2, #7
 8002fdc:	4310      	orrs	r0, r2
 8002fde:	e006      	b.n	8002fee <USART_Init+0x9a>
 8002fe0:	011a      	lsls	r2, r3, #4
 8002fe2:	3232      	adds	r2, #50	; 0x32
 8002fe4:	fbb2 f3f6 	udiv	r3, r2, r6
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	4318      	orrs	r0, r3
 8002fee:	b280      	uxth	r0, r0
 8002ff0:	8120      	strh	r0, [r4, #8]
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40013800 	.word	0x40013800

08002ffc <USART_StructInit>:
 8002ffc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003000:	6003      	str	r3, [r0, #0]
 8003002:	220c      	movs	r2, #12
 8003004:	2300      	movs	r3, #0
 8003006:	8083      	strh	r3, [r0, #4]
 8003008:	80c3      	strh	r3, [r0, #6]
 800300a:	8103      	strh	r3, [r0, #8]
 800300c:	8142      	strh	r2, [r0, #10]
 800300e:	8183      	strh	r3, [r0, #12]
 8003010:	4770      	bx	lr

08003012 <USART_ClockInit>:
 8003012:	884b      	ldrh	r3, [r1, #2]
 8003014:	b510      	push	{r4, lr}
 8003016:	880c      	ldrh	r4, [r1, #0]
 8003018:	8a02      	ldrh	r2, [r0, #16]
 800301a:	4323      	orrs	r3, r4
 800301c:	888c      	ldrh	r4, [r1, #4]
 800301e:	88c9      	ldrh	r1, [r1, #6]
 8003020:	b292      	uxth	r2, r2
 8003022:	4323      	orrs	r3, r4
 8003024:	430b      	orrs	r3, r1
 8003026:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800302a:	4313      	orrs	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	8203      	strh	r3, [r0, #16]
 8003030:	bd10      	pop	{r4, pc}

08003032 <USART_ClockStructInit>:
 8003032:	2300      	movs	r3, #0
 8003034:	8003      	strh	r3, [r0, #0]
 8003036:	8043      	strh	r3, [r0, #2]
 8003038:	8083      	strh	r3, [r0, #4]
 800303a:	80c3      	strh	r3, [r0, #6]
 800303c:	4770      	bx	lr

0800303e <USART_Cmd>:
 800303e:	8983      	ldrh	r3, [r0, #12]
 8003040:	b119      	cbz	r1, 800304a <USART_Cmd+0xc>
 8003042:	b29b      	uxth	r3, r3
 8003044:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003048:	e003      	b.n	8003052 <USART_Cmd+0x14>
 800304a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	8183      	strh	r3, [r0, #12]
 8003054:	4770      	bx	lr

08003056 <USART_ITConfig>:
 8003056:	2301      	movs	r3, #1
 8003058:	b510      	push	{r4, lr}
 800305a:	f3c1 1442 	ubfx	r4, r1, #5, #3
 800305e:	429c      	cmp	r4, r3
 8003060:	f001 011f 	and.w	r1, r1, #31
 8003064:	fa03 f101 	lsl.w	r1, r3, r1
 8003068:	d101      	bne.n	800306e <USART_ITConfig+0x18>
 800306a:	300c      	adds	r0, #12
 800306c:	e003      	b.n	8003076 <USART_ITConfig+0x20>
 800306e:	2c02      	cmp	r4, #2
 8003070:	bf0c      	ite	eq
 8003072:	3010      	addeq	r0, #16
 8003074:	3014      	addne	r0, #20
 8003076:	6803      	ldr	r3, [r0, #0]
 8003078:	b10a      	cbz	r2, 800307e <USART_ITConfig+0x28>
 800307a:	4319      	orrs	r1, r3
 800307c:	e001      	b.n	8003082 <USART_ITConfig+0x2c>
 800307e:	ea23 0101 	bic.w	r1, r3, r1
 8003082:	6001      	str	r1, [r0, #0]
 8003084:	bd10      	pop	{r4, pc}

08003086 <USART_DMACmd>:
 8003086:	8a83      	ldrh	r3, [r0, #20]
 8003088:	b29b      	uxth	r3, r3
 800308a:	b10a      	cbz	r2, 8003090 <USART_DMACmd+0xa>
 800308c:	4319      	orrs	r1, r3
 800308e:	e001      	b.n	8003094 <USART_DMACmd+0xe>
 8003090:	ea23 0101 	bic.w	r1, r3, r1
 8003094:	8281      	strh	r1, [r0, #20]
 8003096:	4770      	bx	lr

08003098 <USART_SetAddress>:
 8003098:	8a03      	ldrh	r3, [r0, #16]
 800309a:	f023 030f 	bic.w	r3, r3, #15
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	8203      	strh	r3, [r0, #16]
 80030a4:	8a03      	ldrh	r3, [r0, #16]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4319      	orrs	r1, r3
 80030aa:	8201      	strh	r1, [r0, #16]
 80030ac:	4770      	bx	lr

080030ae <USART_WakeUpConfig>:
 80030ae:	8983      	ldrh	r3, [r0, #12]
 80030b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	8183      	strh	r3, [r0, #12]
 80030ba:	8983      	ldrh	r3, [r0, #12]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4319      	orrs	r1, r3
 80030c0:	8181      	strh	r1, [r0, #12]
 80030c2:	4770      	bx	lr

080030c4 <USART_ReceiverWakeUpCmd>:
 80030c4:	8983      	ldrh	r3, [r0, #12]
 80030c6:	b119      	cbz	r1, 80030d0 <USART_ReceiverWakeUpCmd+0xc>
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	e003      	b.n	80030d8 <USART_ReceiverWakeUpCmd+0x14>
 80030d0:	f023 0302 	bic.w	r3, r3, #2
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	8183      	strh	r3, [r0, #12]
 80030da:	4770      	bx	lr

080030dc <USART_LINBreakDetectLengthConfig>:
 80030dc:	8a03      	ldrh	r3, [r0, #16]
 80030de:	f023 0320 	bic.w	r3, r3, #32
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	8203      	strh	r3, [r0, #16]
 80030e8:	8a03      	ldrh	r3, [r0, #16]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	4319      	orrs	r1, r3
 80030ee:	8201      	strh	r1, [r0, #16]
 80030f0:	4770      	bx	lr

080030f2 <USART_LINCmd>:
 80030f2:	8a03      	ldrh	r3, [r0, #16]
 80030f4:	b119      	cbz	r1, 80030fe <USART_LINCmd+0xc>
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	e003      	b.n	8003106 <USART_LINCmd+0x14>
 80030fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	8203      	strh	r3, [r0, #16]
 8003108:	4770      	bx	lr

0800310a <USART_SendData>:
 800310a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800310e:	8081      	strh	r1, [r0, #4]
 8003110:	4770      	bx	lr

08003112 <USART_ReceiveData>:
 8003112:	8880      	ldrh	r0, [r0, #4]
 8003114:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003118:	4770      	bx	lr

0800311a <USART_SendBreak>:
 800311a:	8983      	ldrh	r3, [r0, #12]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	8183      	strh	r3, [r0, #12]
 8003124:	4770      	bx	lr

08003126 <USART_SetGuardTime>:
 8003126:	8b03      	ldrh	r3, [r0, #24]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	8303      	strh	r3, [r0, #24]
 800312c:	8b03      	ldrh	r3, [r0, #24]
 800312e:	b29b      	uxth	r3, r3
 8003130:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003134:	8301      	strh	r1, [r0, #24]
 8003136:	4770      	bx	lr

08003138 <USART_SetPrescaler>:
 8003138:	8b03      	ldrh	r3, [r0, #24]
 800313a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800313e:	8303      	strh	r3, [r0, #24]
 8003140:	8b03      	ldrh	r3, [r0, #24]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4319      	orrs	r1, r3
 8003146:	8301      	strh	r1, [r0, #24]
 8003148:	4770      	bx	lr

0800314a <USART_SmartCardCmd>:
 800314a:	8a83      	ldrh	r3, [r0, #20]
 800314c:	b119      	cbz	r1, 8003156 <USART_SmartCardCmd+0xc>
 800314e:	b29b      	uxth	r3, r3
 8003150:	f043 0320 	orr.w	r3, r3, #32
 8003154:	e003      	b.n	800315e <USART_SmartCardCmd+0x14>
 8003156:	f023 0320 	bic.w	r3, r3, #32
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	8283      	strh	r3, [r0, #20]
 8003160:	4770      	bx	lr

08003162 <USART_SmartCardNACKCmd>:
 8003162:	8a83      	ldrh	r3, [r0, #20]
 8003164:	b119      	cbz	r1, 800316e <USART_SmartCardNACKCmd+0xc>
 8003166:	b29b      	uxth	r3, r3
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	e003      	b.n	8003176 <USART_SmartCardNACKCmd+0x14>
 800316e:	f023 0310 	bic.w	r3, r3, #16
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	8283      	strh	r3, [r0, #20]
 8003178:	4770      	bx	lr

0800317a <USART_HalfDuplexCmd>:
 800317a:	8a83      	ldrh	r3, [r0, #20]
 800317c:	b119      	cbz	r1, 8003186 <USART_HalfDuplexCmd+0xc>
 800317e:	b29b      	uxth	r3, r3
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	e003      	b.n	800318e <USART_HalfDuplexCmd+0x14>
 8003186:	f023 0308 	bic.w	r3, r3, #8
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	8283      	strh	r3, [r0, #20]
 8003190:	4770      	bx	lr

08003192 <USART_OverSampling8Cmd>:
 8003192:	8983      	ldrh	r3, [r0, #12]
 8003194:	b129      	cbz	r1, 80031a2 <USART_OverSampling8Cmd+0x10>
 8003196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800319e:	b29b      	uxth	r3, r3
 80031a0:	e001      	b.n	80031a6 <USART_OverSampling8Cmd+0x14>
 80031a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80031a6:	8183      	strh	r3, [r0, #12]
 80031a8:	4770      	bx	lr

080031aa <USART_OneBitMethodCmd>:
 80031aa:	8a83      	ldrh	r3, [r0, #20]
 80031ac:	b119      	cbz	r1, 80031b6 <USART_OneBitMethodCmd+0xc>
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031b4:	e003      	b.n	80031be <USART_OneBitMethodCmd+0x14>
 80031b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	8283      	strh	r3, [r0, #20]
 80031c0:	4770      	bx	lr

080031c2 <USART_IrDAConfig>:
 80031c2:	8a83      	ldrh	r3, [r0, #20]
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	0c1b      	lsrs	r3, r3, #16
 80031cc:	8283      	strh	r3, [r0, #20]
 80031ce:	8a83      	ldrh	r3, [r0, #20]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4319      	orrs	r1, r3
 80031d4:	8281      	strh	r1, [r0, #20]
 80031d6:	4770      	bx	lr

080031d8 <USART_IrDACmd>:
 80031d8:	8a83      	ldrh	r3, [r0, #20]
 80031da:	b119      	cbz	r1, 80031e4 <USART_IrDACmd+0xc>
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	e003      	b.n	80031ec <USART_IrDACmd+0x14>
 80031e4:	f023 0302 	bic.w	r3, r3, #2
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	8283      	strh	r3, [r0, #20]
 80031ee:	4770      	bx	lr

080031f0 <USART_GetFlagStatus>:
 80031f0:	8803      	ldrh	r3, [r0, #0]
 80031f2:	4219      	tst	r1, r3
 80031f4:	bf14      	ite	ne
 80031f6:	2001      	movne	r0, #1
 80031f8:	2000      	moveq	r0, #0
 80031fa:	4770      	bx	lr

080031fc <USART_ClearFlag>:
 80031fc:	43c9      	mvns	r1, r1
 80031fe:	b289      	uxth	r1, r1
 8003200:	8001      	strh	r1, [r0, #0]
 8003202:	4770      	bx	lr

08003204 <USART_GetITStatus>:
 8003204:	2301      	movs	r3, #1
 8003206:	b510      	push	{r4, lr}
 8003208:	f3c1 1442 	ubfx	r4, r1, #5, #3
 800320c:	f001 021f 	and.w	r2, r1, #31
 8003210:	429c      	cmp	r4, r3
 8003212:	fa03 f202 	lsl.w	r2, r3, r2
 8003216:	d101      	bne.n	800321c <USART_GetITStatus+0x18>
 8003218:	8983      	ldrh	r3, [r0, #12]
 800321a:	e003      	b.n	8003224 <USART_GetITStatus+0x20>
 800321c:	2c02      	cmp	r4, #2
 800321e:	bf0c      	ite	eq
 8003220:	8a03      	ldrheq	r3, [r0, #16]
 8003222:	8a83      	ldrhne	r3, [r0, #20]
 8003224:	b29b      	uxth	r3, r3
 8003226:	4013      	ands	r3, r2
 8003228:	8802      	ldrh	r2, [r0, #0]
 800322a:	b292      	uxth	r2, r2
 800322c:	b143      	cbz	r3, 8003240 <USART_GetITStatus+0x3c>
 800322e:	2301      	movs	r3, #1
 8003230:	0a09      	lsrs	r1, r1, #8
 8003232:	fa03 f101 	lsl.w	r1, r3, r1
 8003236:	420a      	tst	r2, r1
 8003238:	bf14      	ite	ne
 800323a:	4618      	movne	r0, r3
 800323c:	2000      	moveq	r0, #0
 800323e:	bd10      	pop	{r4, pc}
 8003240:	4618      	mov	r0, r3
 8003242:	bd10      	pop	{r4, pc}

08003244 <USART_ClearITPendingBit>:
 8003244:	0a09      	lsrs	r1, r1, #8
 8003246:	2301      	movs	r3, #1
 8003248:	fa03 f101 	lsl.w	r1, r3, r1
 800324c:	43c9      	mvns	r1, r1
 800324e:	b289      	uxth	r1, r1
 8003250:	8001      	strh	r1, [r0, #0]
 8003252:	4770      	bx	lr

08003254 <TI1_Config>:
 8003254:	b530      	push	{r4, r5, lr}
 8003256:	8c05      	ldrh	r5, [r0, #32]
 8003258:	f025 0501 	bic.w	r5, r5, #1
 800325c:	042d      	lsls	r5, r5, #16
 800325e:	0c2d      	lsrs	r5, r5, #16
 8003260:	8405      	strh	r5, [r0, #32]
 8003262:	8b05      	ldrh	r5, [r0, #24]
 8003264:	8c04      	ldrh	r4, [r0, #32]
 8003266:	b2ad      	uxth	r5, r5
 8003268:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 800326c:	432a      	orrs	r2, r5
 800326e:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <TI1_Config+0x64>)
 8003276:	b2a4      	uxth	r4, r4
 8003278:	4298      	cmp	r0, r3
 800327a:	d012      	beq.n	80032a2 <TI1_Config+0x4e>
 800327c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003280:	4298      	cmp	r0, r3
 8003282:	d00e      	beq.n	80032a2 <TI1_Config+0x4e>
 8003284:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003288:	d00b      	beq.n	80032a2 <TI1_Config+0x4e>
 800328a:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800328e:	4298      	cmp	r0, r3
 8003290:	d007      	beq.n	80032a2 <TI1_Config+0x4e>
 8003292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003296:	4298      	cmp	r0, r3
 8003298:	d003      	beq.n	80032a2 <TI1_Config+0x4e>
 800329a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800329e:	4298      	cmp	r0, r3
 80032a0:	d102      	bne.n	80032a8 <TI1_Config+0x54>
 80032a2:	f024 0402 	bic.w	r4, r4, #2
 80032a6:	e001      	b.n	80032ac <TI1_Config+0x58>
 80032a8:	f024 040a 	bic.w	r4, r4, #10
 80032ac:	f044 0401 	orr.w	r4, r4, #1
 80032b0:	4321      	orrs	r1, r4
 80032b2:	8302      	strh	r2, [r0, #24]
 80032b4:	8401      	strh	r1, [r0, #32]
 80032b6:	bd30      	pop	{r4, r5, pc}
 80032b8:	40012c00 	.word	0x40012c00

080032bc <TI2_Config>:
 80032bc:	b530      	push	{r4, r5, lr}
 80032be:	8c04      	ldrh	r4, [r0, #32]
 80032c0:	f024 0410 	bic.w	r4, r4, #16
 80032c4:	0424      	lsls	r4, r4, #16
 80032c6:	0c24      	lsrs	r4, r4, #16
 80032c8:	8404      	strh	r4, [r0, #32]
 80032ca:	8b05      	ldrh	r5, [r0, #24]
 80032cc:	8c04      	ldrh	r4, [r0, #32]
 80032ce:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 80032d2:	052d      	lsls	r5, r5, #20
 80032d4:	0d2d      	lsrs	r5, r5, #20
 80032d6:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 80032da:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <TI2_Config+0x74>)
 80032e0:	b2a4      	uxth	r4, r4
 80032e2:	4290      	cmp	r0, r2
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	d012      	beq.n	800330e <TI2_Config+0x52>
 80032e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ec:	4290      	cmp	r0, r2
 80032ee:	d00e      	beq.n	800330e <TI2_Config+0x52>
 80032f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032f4:	d00b      	beq.n	800330e <TI2_Config+0x52>
 80032f6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80032fa:	4290      	cmp	r0, r2
 80032fc:	d007      	beq.n	800330e <TI2_Config+0x52>
 80032fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003302:	4290      	cmp	r0, r2
 8003304:	d003      	beq.n	800330e <TI2_Config+0x52>
 8003306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800330a:	4290      	cmp	r0, r2
 800330c:	d107      	bne.n	800331e <TI2_Config+0x62>
 800330e:	f024 0420 	bic.w	r4, r4, #32
 8003312:	f044 0410 	orr.w	r4, r4, #16
 8003316:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
 800331a:	b289      	uxth	r1, r1
 800331c:	e004      	b.n	8003328 <TI2_Config+0x6c>
 800331e:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
 8003322:	f044 0410 	orr.w	r4, r4, #16
 8003326:	4321      	orrs	r1, r4
 8003328:	8303      	strh	r3, [r0, #24]
 800332a:	8401      	strh	r1, [r0, #32]
 800332c:	bd30      	pop	{r4, r5, pc}
 800332e:	bf00      	nop
 8003330:	40012c00 	.word	0x40012c00

08003334 <TIM_DeInit>:
 8003334:	b508      	push	{r3, lr}
 8003336:	4b61      	ldr	r3, [pc, #388]	; (80034bc <TIM_DeInit+0x188>)
 8003338:	4298      	cmp	r0, r3
 800333a:	d108      	bne.n	800334e <TIM_DeInit+0x1a>
 800333c:	2101      	movs	r1, #1
 800333e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003342:	f7ff fbeb 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8003346:	2100      	movs	r1, #0
 8003348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800334c:	e0b1      	b.n	80034b2 <TIM_DeInit+0x17e>
 800334e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003352:	d106      	bne.n	8003362 <TIM_DeInit+0x2e>
 8003354:	2101      	movs	r1, #1
 8003356:	4608      	mov	r0, r1
 8003358:	f7ff fbec 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 800335c:	2100      	movs	r1, #0
 800335e:	2001      	movs	r0, #1
 8003360:	e008      	b.n	8003374 <TIM_DeInit+0x40>
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <TIM_DeInit+0x18c>)
 8003364:	4298      	cmp	r0, r3
 8003366:	d109      	bne.n	800337c <TIM_DeInit+0x48>
 8003368:	2101      	movs	r1, #1
 800336a:	2002      	movs	r0, #2
 800336c:	f7ff fbe2 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8003370:	2100      	movs	r1, #0
 8003372:	2002      	movs	r0, #2
 8003374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003378:	f7ff bbdc 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 800337c:	4b51      	ldr	r3, [pc, #324]	; (80034c4 <TIM_DeInit+0x190>)
 800337e:	4298      	cmp	r0, r3
 8003380:	d106      	bne.n	8003390 <TIM_DeInit+0x5c>
 8003382:	2101      	movs	r1, #1
 8003384:	2004      	movs	r0, #4
 8003386:	f7ff fbd5 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 800338a:	2100      	movs	r1, #0
 800338c:	2004      	movs	r0, #4
 800338e:	e7f1      	b.n	8003374 <TIM_DeInit+0x40>
 8003390:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <TIM_DeInit+0x194>)
 8003392:	4298      	cmp	r0, r3
 8003394:	d106      	bne.n	80033a4 <TIM_DeInit+0x70>
 8003396:	2101      	movs	r1, #1
 8003398:	2008      	movs	r0, #8
 800339a:	f7ff fbcb 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 800339e:	2100      	movs	r1, #0
 80033a0:	2008      	movs	r0, #8
 80033a2:	e7e7      	b.n	8003374 <TIM_DeInit+0x40>
 80033a4:	4b49      	ldr	r3, [pc, #292]	; (80034cc <TIM_DeInit+0x198>)
 80033a6:	4298      	cmp	r0, r3
 80033a8:	d106      	bne.n	80033b8 <TIM_DeInit+0x84>
 80033aa:	2101      	movs	r1, #1
 80033ac:	2010      	movs	r0, #16
 80033ae:	f7ff fbc1 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 80033b2:	2100      	movs	r1, #0
 80033b4:	2010      	movs	r0, #16
 80033b6:	e7dd      	b.n	8003374 <TIM_DeInit+0x40>
 80033b8:	4b45      	ldr	r3, [pc, #276]	; (80034d0 <TIM_DeInit+0x19c>)
 80033ba:	4298      	cmp	r0, r3
 80033bc:	d106      	bne.n	80033cc <TIM_DeInit+0x98>
 80033be:	2101      	movs	r1, #1
 80033c0:	2020      	movs	r0, #32
 80033c2:	f7ff fbb7 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 80033c6:	2100      	movs	r1, #0
 80033c8:	2020      	movs	r0, #32
 80033ca:	e7d3      	b.n	8003374 <TIM_DeInit+0x40>
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <TIM_DeInit+0x1a0>)
 80033ce:	4298      	cmp	r0, r3
 80033d0:	d108      	bne.n	80033e4 <TIM_DeInit+0xb0>
 80033d2:	2101      	movs	r1, #1
 80033d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033d8:	f7ff fba0 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80033dc:	2100      	movs	r1, #0
 80033de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033e2:	e066      	b.n	80034b2 <TIM_DeInit+0x17e>
 80033e4:	4b3c      	ldr	r3, [pc, #240]	; (80034d8 <TIM_DeInit+0x1a4>)
 80033e6:	4298      	cmp	r0, r3
 80033e8:	d108      	bne.n	80033fc <TIM_DeInit+0xc8>
 80033ea:	2101      	movs	r1, #1
 80033ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033f0:	f7ff fb94 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80033f4:	2100      	movs	r1, #0
 80033f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033fa:	e05a      	b.n	80034b2 <TIM_DeInit+0x17e>
 80033fc:	4b37      	ldr	r3, [pc, #220]	; (80034dc <TIM_DeInit+0x1a8>)
 80033fe:	4298      	cmp	r0, r3
 8003400:	d108      	bne.n	8003414 <TIM_DeInit+0xe0>
 8003402:	2101      	movs	r1, #1
 8003404:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003408:	f7ff fb88 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 800340c:	2100      	movs	r1, #0
 800340e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003412:	e04e      	b.n	80034b2 <TIM_DeInit+0x17e>
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <TIM_DeInit+0x1ac>)
 8003416:	4298      	cmp	r0, r3
 8003418:	d108      	bne.n	800342c <TIM_DeInit+0xf8>
 800341a:	2101      	movs	r1, #1
 800341c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003420:	f7ff fb7c 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8003424:	2100      	movs	r1, #0
 8003426:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800342a:	e042      	b.n	80034b2 <TIM_DeInit+0x17e>
 800342c:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <TIM_DeInit+0x1b0>)
 800342e:	4298      	cmp	r0, r3
 8003430:	d106      	bne.n	8003440 <TIM_DeInit+0x10c>
 8003432:	2101      	movs	r1, #1
 8003434:	2040      	movs	r0, #64	; 0x40
 8003436:	f7ff fb7d 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 800343a:	2100      	movs	r1, #0
 800343c:	2040      	movs	r0, #64	; 0x40
 800343e:	e799      	b.n	8003374 <TIM_DeInit+0x40>
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <TIM_DeInit+0x1b4>)
 8003442:	4298      	cmp	r0, r3
 8003444:	d106      	bne.n	8003454 <TIM_DeInit+0x120>
 8003446:	2101      	movs	r1, #1
 8003448:	2080      	movs	r0, #128	; 0x80
 800344a:	f7ff fb73 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 800344e:	2100      	movs	r1, #0
 8003450:	2080      	movs	r0, #128	; 0x80
 8003452:	e78f      	b.n	8003374 <TIM_DeInit+0x40>
 8003454:	4b25      	ldr	r3, [pc, #148]	; (80034ec <TIM_DeInit+0x1b8>)
 8003456:	4298      	cmp	r0, r3
 8003458:	d108      	bne.n	800346c <TIM_DeInit+0x138>
 800345a:	2101      	movs	r1, #1
 800345c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003460:	f7ff fb68 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8003464:	2100      	movs	r1, #0
 8003466:	f44f 7080 	mov.w	r0, #256	; 0x100
 800346a:	e783      	b.n	8003374 <TIM_DeInit+0x40>
 800346c:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <TIM_DeInit+0x1bc>)
 800346e:	4298      	cmp	r0, r3
 8003470:	d108      	bne.n	8003484 <TIM_DeInit+0x150>
 8003472:	2101      	movs	r1, #1
 8003474:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003478:	f7ff fb50 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 800347c:	2100      	movs	r1, #0
 800347e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003482:	e016      	b.n	80034b2 <TIM_DeInit+0x17e>
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <TIM_DeInit+0x1c0>)
 8003486:	4298      	cmp	r0, r3
 8003488:	d108      	bne.n	800349c <TIM_DeInit+0x168>
 800348a:	2101      	movs	r1, #1
 800348c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003490:	f7ff fb44 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 8003494:	2100      	movs	r1, #0
 8003496:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800349a:	e00a      	b.n	80034b2 <TIM_DeInit+0x17e>
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <TIM_DeInit+0x1c4>)
 800349e:	4298      	cmp	r0, r3
 80034a0:	d10b      	bne.n	80034ba <TIM_DeInit+0x186>
 80034a2:	2101      	movs	r1, #1
 80034a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80034a8:	f7ff fb38 	bl	8002b1c <RCC_APB2PeriphResetCmd>
 80034ac:	2100      	movs	r1, #0
 80034ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80034b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80034b6:	f7ff bb31 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
 80034ba:	bd08      	pop	{r3, pc}
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40001000 	.word	0x40001000
 80034d0:	40001400 	.word	0x40001400
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40014c00 	.word	0x40014c00
 80034dc:	40015000 	.word	0x40015000
 80034e0:	40015400 	.word	0x40015400
 80034e4:	40001800 	.word	0x40001800
 80034e8:	40001c00 	.word	0x40001c00
 80034ec:	40002000 	.word	0x40002000
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40014400 	.word	0x40014400
 80034f8:	40014800 	.word	0x40014800

080034fc <TIM_TimeBaseInit>:
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <TIM_TimeBaseInit+0x8c>)
 80034fe:	8803      	ldrh	r3, [r0, #0]
 8003500:	4290      	cmp	r0, r2
 8003502:	b29b      	uxth	r3, r3
 8003504:	d012      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 8003506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800350a:	4290      	cmp	r0, r2
 800350c:	d00e      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 800350e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003512:	d00b      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 8003514:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003518:	4290      	cmp	r0, r2
 800351a:	d007      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 800351c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003520:	4290      	cmp	r0, r2
 8003522:	d003      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 8003524:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003528:	4290      	cmp	r0, r2
 800352a:	d103      	bne.n	8003534 <TIM_TimeBaseInit+0x38>
 800352c:	884a      	ldrh	r2, [r1, #2]
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	4313      	orrs	r3, r2
 8003534:	4a15      	ldr	r2, [pc, #84]	; (800358c <TIM_TimeBaseInit+0x90>)
 8003536:	4290      	cmp	r0, r2
 8003538:	d008      	beq.n	800354c <TIM_TimeBaseInit+0x50>
 800353a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800353e:	4290      	cmp	r0, r2
 8003540:	bf1f      	itttt	ne
 8003542:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8003546:	88ca      	ldrhne	r2, [r1, #6]
 8003548:	b29b      	uxthne	r3, r3
 800354a:	4313      	orrne	r3, r2
 800354c:	8003      	strh	r3, [r0, #0]
 800354e:	888b      	ldrh	r3, [r1, #4]
 8003550:	8583      	strh	r3, [r0, #44]	; 0x2c
 8003552:	880b      	ldrh	r3, [r1, #0]
 8003554:	8503      	strh	r3, [r0, #40]	; 0x28
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <TIM_TimeBaseInit+0x8c>)
 8003558:	4298      	cmp	r0, r3
 800355a:	d00f      	beq.n	800357c <TIM_TimeBaseInit+0x80>
 800355c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003560:	4298      	cmp	r0, r3
 8003562:	d00b      	beq.n	800357c <TIM_TimeBaseInit+0x80>
 8003564:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003568:	4298      	cmp	r0, r3
 800356a:	d007      	beq.n	800357c <TIM_TimeBaseInit+0x80>
 800356c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003570:	4298      	cmp	r0, r3
 8003572:	d003      	beq.n	800357c <TIM_TimeBaseInit+0x80>
 8003574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003578:	4298      	cmp	r0, r3
 800357a:	d101      	bne.n	8003580 <TIM_TimeBaseInit+0x84>
 800357c:	7a0b      	ldrb	r3, [r1, #8]
 800357e:	8603      	strh	r3, [r0, #48]	; 0x30
 8003580:	2301      	movs	r3, #1
 8003582:	8283      	strh	r3, [r0, #20]
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40001000 	.word	0x40001000

08003590 <TIM_OC1Init>:
 8003590:	8c03      	ldrh	r3, [r0, #32]
 8003592:	b570      	push	{r4, r5, r6, lr}
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	0c1b      	lsrs	r3, r3, #16
 800359c:	8403      	strh	r3, [r0, #32]
 800359e:	8c02      	ldrh	r2, [r0, #32]
 80035a0:	8886      	ldrh	r6, [r0, #4]
 80035a2:	8b03      	ldrh	r3, [r0, #24]
 80035a4:	880d      	ldrh	r5, [r1, #0]
 80035a6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	431d      	orrs	r5, r3
 80035b0:	f022 0202 	bic.w	r2, r2, #2
 80035b4:	890c      	ldrh	r4, [r1, #8]
 80035b6:	884b      	ldrh	r3, [r1, #2]
 80035b8:	0412      	lsls	r2, r2, #16
 80035ba:	0c12      	lsrs	r2, r2, #16
 80035bc:	4323      	orrs	r3, r4
 80035be:	4313      	orrs	r3, r2
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <TIM_OC1Init+0x84>)
 80035c2:	b2b6      	uxth	r6, r6
 80035c4:	4290      	cmp	r0, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	d00f      	beq.n	80035ea <TIM_OC1Init+0x5a>
 80035ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ce:	4290      	cmp	r0, r2
 80035d0:	d00b      	beq.n	80035ea <TIM_OC1Init+0x5a>
 80035d2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80035d6:	4290      	cmp	r0, r2
 80035d8:	d007      	beq.n	80035ea <TIM_OC1Init+0x5a>
 80035da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035de:	4290      	cmp	r0, r2
 80035e0:	d003      	beq.n	80035ea <TIM_OC1Init+0x5a>
 80035e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035e6:	4290      	cmp	r0, r2
 80035e8:	d10e      	bne.n	8003608 <TIM_OC1Init+0x78>
 80035ea:	894c      	ldrh	r4, [r1, #10]
 80035ec:	f023 0308 	bic.w	r3, r3, #8
 80035f0:	431c      	orrs	r4, r3
 80035f2:	888b      	ldrh	r3, [r1, #4]
 80035f4:	f024 0404 	bic.w	r4, r4, #4
 80035f8:	f426 7240 	bic.w	r2, r6, #768	; 0x300
 80035fc:	4323      	orrs	r3, r4
 80035fe:	898e      	ldrh	r6, [r1, #12]
 8003600:	89cc      	ldrh	r4, [r1, #14]
 8003602:	4334      	orrs	r4, r6
 8003604:	4322      	orrs	r2, r4
 8003606:	b296      	uxth	r6, r2
 8003608:	88ca      	ldrh	r2, [r1, #6]
 800360a:	8086      	strh	r6, [r0, #4]
 800360c:	8305      	strh	r5, [r0, #24]
 800360e:	8682      	strh	r2, [r0, #52]	; 0x34
 8003610:	8403      	strh	r3, [r0, #32]
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	40012c00 	.word	0x40012c00

08003618 <TIM_OC2Init>:
 8003618:	8c03      	ldrh	r3, [r0, #32]
 800361a:	b530      	push	{r4, r5, lr}
 800361c:	f023 0310 	bic.w	r3, r3, #16
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	8403      	strh	r3, [r0, #32]
 8003626:	8c03      	ldrh	r3, [r0, #32]
 8003628:	8885      	ldrh	r5, [r0, #4]
 800362a:	8b02      	ldrh	r2, [r0, #24]
 800362c:	880c      	ldrh	r4, [r1, #0]
 800362e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8003632:	0412      	lsls	r2, r2, #16
 8003634:	0c12      	lsrs	r2, r2, #16
 8003636:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800363a:	f023 0320 	bic.w	r3, r3, #32
 800363e:	b294      	uxth	r4, r2
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	890a      	ldrh	r2, [r1, #8]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800364a:	884a      	ldrh	r2, [r1, #2]
 800364c:	b2ad      	uxth	r5, r5
 800364e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <TIM_OC2Init+0x84>)
 8003654:	b29b      	uxth	r3, r3
 8003656:	4290      	cmp	r0, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC2Init+0x4a>
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	4290      	cmp	r0, r2
 8003660:	d115      	bne.n	800368e <TIM_OC2Init+0x76>
 8003662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003666:	894a      	ldrh	r2, [r1, #10]
 8003668:	b29b      	uxth	r3, r3
 800366a:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 800366e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003672:	4013      	ands	r3, r2
 8003674:	888a      	ldrh	r2, [r1, #4]
 8003676:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
 800367a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800367e:	898a      	ldrh	r2, [r1, #12]
 8003680:	b29b      	uxth	r3, r3
 8003682:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 8003686:	89ca      	ldrh	r2, [r1, #14]
 8003688:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 800368c:	b2ad      	uxth	r5, r5
 800368e:	88ca      	ldrh	r2, [r1, #6]
 8003690:	8085      	strh	r5, [r0, #4]
 8003692:	8304      	strh	r4, [r0, #24]
 8003694:	8702      	strh	r2, [r0, #56]	; 0x38
 8003696:	8403      	strh	r3, [r0, #32]
 8003698:	bd30      	pop	{r4, r5, pc}
 800369a:	bf00      	nop
 800369c:	40012c00 	.word	0x40012c00

080036a0 <TIM_OC3Init>:
 80036a0:	8c03      	ldrh	r3, [r0, #32]
 80036a2:	b530      	push	{r4, r5, lr}
 80036a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	0c1b      	lsrs	r3, r3, #16
 80036ac:	8403      	strh	r3, [r0, #32]
 80036ae:	8c03      	ldrh	r3, [r0, #32]
 80036b0:	8884      	ldrh	r4, [r0, #4]
 80036b2:	8b82      	ldrh	r2, [r0, #28]
 80036b4:	880d      	ldrh	r5, [r1, #0]
 80036b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80036ba:	0412      	lsls	r2, r2, #16
 80036bc:	0c12      	lsrs	r2, r2, #16
 80036be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c2:	4315      	orrs	r5, r2
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	890a      	ldrh	r2, [r1, #8]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80036ce:	884a      	ldrh	r2, [r1, #2]
 80036d0:	b2a4      	uxth	r4, r4
 80036d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <TIM_OC3Init+0x80>)
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4290      	cmp	r0, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_OC3Init+0x46>
 80036de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e2:	4290      	cmp	r0, r2
 80036e4:	d115      	bne.n	8003712 <TIM_OC3Init+0x72>
 80036e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ea:	894a      	ldrh	r2, [r1, #10]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80036f2:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80036f6:	4013      	ands	r3, r2
 80036f8:	888a      	ldrh	r2, [r1, #4]
 80036fa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
 80036fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003702:	898a      	ldrh	r2, [r1, #12]
 8003704:	b29b      	uxth	r3, r3
 8003706:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800370a:	89ca      	ldrh	r2, [r1, #14]
 800370c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003710:	b2a4      	uxth	r4, r4
 8003712:	88ca      	ldrh	r2, [r1, #6]
 8003714:	8084      	strh	r4, [r0, #4]
 8003716:	8385      	strh	r5, [r0, #28]
 8003718:	8782      	strh	r2, [r0, #60]	; 0x3c
 800371a:	8403      	strh	r3, [r0, #32]
 800371c:	bd30      	pop	{r4, r5, pc}
 800371e:	bf00      	nop
 8003720:	40012c00 	.word	0x40012c00

08003724 <TIM_OC4Init>:
 8003724:	8c03      	ldrh	r3, [r0, #32]
 8003726:	b530      	push	{r4, r5, lr}
 8003728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	8403      	strh	r3, [r0, #32]
 8003732:	8c03      	ldrh	r3, [r0, #32]
 8003734:	8884      	ldrh	r4, [r0, #4]
 8003736:	8b82      	ldrh	r2, [r0, #28]
 8003738:	880d      	ldrh	r5, [r1, #0]
 800373a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800373e:	0412      	lsls	r2, r2, #16
 8003740:	0c12      	lsrs	r2, r2, #16
 8003742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003746:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800374a:	041b      	lsls	r3, r3, #16
 800374c:	890d      	ldrh	r5, [r1, #8]
 800374e:	0c1b      	lsrs	r3, r3, #16
 8003750:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8003754:	884d      	ldrh	r5, [r1, #2]
 8003756:	b2a4      	uxth	r4, r4
 8003758:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 800375c:	4d0a      	ldr	r5, [pc, #40]	; (8003788 <TIM_OC4Init+0x64>)
 800375e:	b292      	uxth	r2, r2
 8003760:	42a8      	cmp	r0, r5
 8003762:	b29b      	uxth	r3, r3
 8003764:	d003      	beq.n	800376e <TIM_OC4Init+0x4a>
 8003766:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800376a:	42a8      	cmp	r0, r5
 800376c:	d105      	bne.n	800377a <TIM_OC4Init+0x56>
 800376e:	898d      	ldrh	r5, [r1, #12]
 8003770:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8003774:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003778:	b2a4      	uxth	r4, r4
 800377a:	8084      	strh	r4, [r0, #4]
 800377c:	8382      	strh	r2, [r0, #28]
 800377e:	88ca      	ldrh	r2, [r1, #6]
 8003780:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8003784:	8403      	strh	r3, [r0, #32]
 8003786:	bd30      	pop	{r4, r5, pc}
 8003788:	40012c00 	.word	0x40012c00

0800378c <TIM_BDTRConfig>:
 800378c:	880a      	ldrh	r2, [r1, #0]
 800378e:	884b      	ldrh	r3, [r1, #2]
 8003790:	4313      	orrs	r3, r2
 8003792:	888a      	ldrh	r2, [r1, #4]
 8003794:	4313      	orrs	r3, r2
 8003796:	88ca      	ldrh	r2, [r1, #6]
 8003798:	4313      	orrs	r3, r2
 800379a:	890a      	ldrh	r2, [r1, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	894a      	ldrh	r2, [r1, #10]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	898a      	ldrh	r2, [r1, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80037ac:	4770      	bx	lr

080037ae <TIM_TimeBaseStructInit>:
 80037ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037b2:	8083      	strh	r3, [r0, #4]
 80037b4:	2300      	movs	r3, #0
 80037b6:	8003      	strh	r3, [r0, #0]
 80037b8:	80c3      	strh	r3, [r0, #6]
 80037ba:	8043      	strh	r3, [r0, #2]
 80037bc:	7203      	strb	r3, [r0, #8]
 80037be:	4770      	bx	lr

080037c0 <TIM_OCStructInit>:
 80037c0:	2300      	movs	r3, #0
 80037c2:	8003      	strh	r3, [r0, #0]
 80037c4:	8043      	strh	r3, [r0, #2]
 80037c6:	8083      	strh	r3, [r0, #4]
 80037c8:	80c3      	strh	r3, [r0, #6]
 80037ca:	8103      	strh	r3, [r0, #8]
 80037cc:	8143      	strh	r3, [r0, #10]
 80037ce:	8183      	strh	r3, [r0, #12]
 80037d0:	81c3      	strh	r3, [r0, #14]
 80037d2:	4770      	bx	lr

080037d4 <TIM_ICStructInit>:
 80037d4:	2300      	movs	r3, #0
 80037d6:	2201      	movs	r2, #1
 80037d8:	8003      	strh	r3, [r0, #0]
 80037da:	8043      	strh	r3, [r0, #2]
 80037dc:	8082      	strh	r2, [r0, #4]
 80037de:	80c3      	strh	r3, [r0, #6]
 80037e0:	8103      	strh	r3, [r0, #8]
 80037e2:	4770      	bx	lr

080037e4 <TIM_BDTRStructInit>:
 80037e4:	2300      	movs	r3, #0
 80037e6:	8003      	strh	r3, [r0, #0]
 80037e8:	8043      	strh	r3, [r0, #2]
 80037ea:	8083      	strh	r3, [r0, #4]
 80037ec:	80c3      	strh	r3, [r0, #6]
 80037ee:	8103      	strh	r3, [r0, #8]
 80037f0:	8143      	strh	r3, [r0, #10]
 80037f2:	8183      	strh	r3, [r0, #12]
 80037f4:	4770      	bx	lr

080037f6 <TIM_Cmd>:
 80037f6:	8803      	ldrh	r3, [r0, #0]
 80037f8:	b119      	cbz	r1, 8003802 <TIM_Cmd+0xc>
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	e003      	b.n	800380a <TIM_Cmd+0x14>
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	041b      	lsls	r3, r3, #16
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	8003      	strh	r3, [r0, #0]
 800380c:	4770      	bx	lr

0800380e <TIM_CtrlPWMOutputs>:
 800380e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003812:	b129      	cbz	r1, 8003820 <TIM_CtrlPWMOutputs+0x12>
 8003814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381c:	b29b      	uxth	r3, r3
 800381e:	e001      	b.n	8003824 <TIM_CtrlPWMOutputs+0x16>
 8003820:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003824:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8003828:	4770      	bx	lr

0800382a <TIM_GenerateEvent>:
 800382a:	8281      	strh	r1, [r0, #20]
 800382c:	4770      	bx	lr

0800382e <TIM_DMAConfig>:
 800382e:	430a      	orrs	r2, r1
 8003830:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8003834:	4770      	bx	lr

08003836 <TIM_DMACmd>:
 8003836:	8983      	ldrh	r3, [r0, #12]
 8003838:	b29b      	uxth	r3, r3
 800383a:	b10a      	cbz	r2, 8003840 <TIM_DMACmd+0xa>
 800383c:	4319      	orrs	r1, r3
 800383e:	e001      	b.n	8003844 <TIM_DMACmd+0xe>
 8003840:	ea23 0101 	bic.w	r1, r3, r1
 8003844:	8181      	strh	r1, [r0, #12]
 8003846:	4770      	bx	lr

08003848 <TIM_ITConfig>:
 8003848:	f7ff bff5 	b.w	8003836 <TIM_DMACmd>

0800384c <TIM_InternalClockConfig>:
 800384c:	8903      	ldrh	r3, [r0, #8]
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	8103      	strh	r3, [r0, #8]
 8003858:	4770      	bx	lr

0800385a <TIM_ITRxExternalClockConfig>:
 800385a:	8903      	ldrh	r3, [r0, #8]
 800385c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	4319      	orrs	r1, r3
 8003866:	8101      	strh	r1, [r0, #8]
 8003868:	8903      	ldrh	r3, [r0, #8]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f043 0307 	orr.w	r3, r3, #7
 8003870:	8103      	strh	r3, [r0, #8]
 8003872:	4770      	bx	lr

08003874 <TIM_TIxExternalClockConfig>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	460d      	mov	r5, r1
 8003878:	2d60      	cmp	r5, #96	; 0x60
 800387a:	4611      	mov	r1, r2
 800387c:	4604      	mov	r4, r0
 800387e:	f04f 0201 	mov.w	r2, #1
 8003882:	d102      	bne.n	800388a <TIM_TIxExternalClockConfig+0x16>
 8003884:	f7ff fd1a 	bl	80032bc <TI2_Config>
 8003888:	e001      	b.n	800388e <TIM_TIxExternalClockConfig+0x1a>
 800388a:	f7ff fce3 	bl	8003254 <TI1_Config>
 800388e:	8921      	ldrh	r1, [r4, #8]
 8003890:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003894:	0409      	lsls	r1, r1, #16
 8003896:	0c09      	lsrs	r1, r1, #16
 8003898:	4329      	orrs	r1, r5
 800389a:	8121      	strh	r1, [r4, #8]
 800389c:	8923      	ldrh	r3, [r4, #8]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f043 0307 	orr.w	r3, r3, #7
 80038a4:	8123      	strh	r3, [r4, #8]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}

080038a8 <TIM_ETRConfig>:
 80038a8:	b510      	push	{r4, lr}
 80038aa:	8904      	ldrh	r4, [r0, #8]
 80038ac:	b2e4      	uxtb	r4, r4
 80038ae:	4321      	orrs	r1, r4
 80038b0:	430a      	orrs	r2, r1
 80038b2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80038b6:	b299      	uxth	r1, r3
 80038b8:	8101      	strh	r1, [r0, #8]
 80038ba:	bd10      	pop	{r4, pc}

080038bc <TIM_ETRClockMode1Config>:
 80038bc:	b510      	push	{r4, lr}
 80038be:	f7ff fff3 	bl	80038a8 <TIM_ETRConfig>
 80038c2:	8903      	ldrh	r3, [r0, #8]
 80038c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	0c1b      	lsrs	r3, r3, #16
 80038cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038d0:	8103      	strh	r3, [r0, #8]
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <TIM_ETRClockMode2Config>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	f7ff ffe7 	bl	80038a8 <TIM_ETRConfig>
 80038da:	8903      	ldrh	r3, [r0, #8]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e2:	8103      	strh	r3, [r0, #8]
 80038e4:	bd10      	pop	{r4, pc}

080038e6 <TIM_PrescalerConfig>:
 80038e6:	8501      	strh	r1, [r0, #40]	; 0x28
 80038e8:	8282      	strh	r2, [r0, #20]
 80038ea:	4770      	bx	lr

080038ec <TIM_CounterModeConfig>:
 80038ec:	8803      	ldrh	r3, [r0, #0]
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	4319      	orrs	r1, r3
 80038f8:	8001      	strh	r1, [r0, #0]
 80038fa:	4770      	bx	lr

080038fc <TIM_SelectInputTrigger>:
 80038fc:	8903      	ldrh	r3, [r0, #8]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	4319      	orrs	r1, r3
 8003908:	8101      	strh	r1, [r0, #8]
 800390a:	4770      	bx	lr

0800390c <TIM_EncoderInterfaceConfig>:
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	8906      	ldrh	r6, [r0, #8]
 8003910:	8b04      	ldrh	r4, [r0, #24]
 8003912:	8c05      	ldrh	r5, [r0, #32]
 8003914:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8003918:	b2ad      	uxth	r5, r5
 800391a:	f024 0403 	bic.w	r4, r4, #3
 800391e:	f025 0522 	bic.w	r5, r5, #34	; 0x22
 8003922:	f026 0607 	bic.w	r6, r6, #7
 8003926:	0424      	lsls	r4, r4, #16
 8003928:	432a      	orrs	r2, r5
 800392a:	0436      	lsls	r6, r6, #16
 800392c:	0c24      	lsrs	r4, r4, #16
 800392e:	0c36      	lsrs	r6, r6, #16
 8003930:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003934:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8003938:	4331      	orrs	r1, r6
 800393a:	f044 0401 	orr.w	r4, r4, #1
 800393e:	b29d      	uxth	r5, r3
 8003940:	8101      	strh	r1, [r0, #8]
 8003942:	8304      	strh	r4, [r0, #24]
 8003944:	8405      	strh	r5, [r0, #32]
 8003946:	bd70      	pop	{r4, r5, r6, pc}

08003948 <TIM_ForcedOC1Config>:
 8003948:	8b03      	ldrh	r3, [r0, #24]
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	4319      	orrs	r1, r3
 8003954:	8301      	strh	r1, [r0, #24]
 8003956:	4770      	bx	lr

08003958 <TIM_ForcedOC2Config>:
 8003958:	8b03      	ldrh	r3, [r0, #24]
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003966:	b289      	uxth	r1, r1
 8003968:	8301      	strh	r1, [r0, #24]
 800396a:	4770      	bx	lr

0800396c <TIM_ForcedOC3Config>:
 800396c:	8b83      	ldrh	r3, [r0, #28]
 800396e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	4319      	orrs	r1, r3
 8003978:	8381      	strh	r1, [r0, #28]
 800397a:	4770      	bx	lr

0800397c <TIM_ForcedOC4Config>:
 800397c:	8b83      	ldrh	r3, [r0, #28]
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800398a:	b289      	uxth	r1, r1
 800398c:	8381      	strh	r1, [r0, #28]
 800398e:	4770      	bx	lr

08003990 <TIM_ARRPreloadConfig>:
 8003990:	8803      	ldrh	r3, [r0, #0]
 8003992:	b119      	cbz	r1, 800399c <TIM_ARRPreloadConfig+0xc>
 8003994:	b29b      	uxth	r3, r3
 8003996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399a:	e003      	b.n	80039a4 <TIM_ARRPreloadConfig+0x14>
 800399c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	8003      	strh	r3, [r0, #0]
 80039a6:	4770      	bx	lr

080039a8 <TIM_SelectCOM>:
 80039a8:	8883      	ldrh	r3, [r0, #4]
 80039aa:	b119      	cbz	r1, 80039b4 <TIM_SelectCOM+0xc>
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	e003      	b.n	80039bc <TIM_SelectCOM+0x14>
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	0c1b      	lsrs	r3, r3, #16
 80039bc:	8083      	strh	r3, [r0, #4]
 80039be:	4770      	bx	lr

080039c0 <TIM_SelectCCDMA>:
 80039c0:	8883      	ldrh	r3, [r0, #4]
 80039c2:	b119      	cbz	r1, 80039cc <TIM_SelectCCDMA+0xc>
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f043 0308 	orr.w	r3, r3, #8
 80039ca:	e003      	b.n	80039d4 <TIM_SelectCCDMA+0x14>
 80039cc:	f023 0308 	bic.w	r3, r3, #8
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	8083      	strh	r3, [r0, #4]
 80039d6:	4770      	bx	lr

080039d8 <TIM_CCPreloadControl>:
 80039d8:	8883      	ldrh	r3, [r0, #4]
 80039da:	b119      	cbz	r1, 80039e4 <TIM_CCPreloadControl+0xc>
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	e003      	b.n	80039ec <TIM_CCPreloadControl+0x14>
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	0c1b      	lsrs	r3, r3, #16
 80039ec:	8083      	strh	r3, [r0, #4]
 80039ee:	4770      	bx	lr

080039f0 <TIM_OC1PreloadConfig>:
 80039f0:	8b03      	ldrh	r3, [r0, #24]
 80039f2:	f023 0308 	bic.w	r3, r3, #8
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	4319      	orrs	r1, r3
 80039fc:	8301      	strh	r1, [r0, #24]
 80039fe:	4770      	bx	lr

08003a00 <TIM_OC2PreloadConfig>:
 8003a00:	8b03      	ldrh	r3, [r0, #24]
 8003a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	0c1b      	lsrs	r3, r3, #16
 8003a0a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a0e:	b289      	uxth	r1, r1
 8003a10:	8301      	strh	r1, [r0, #24]
 8003a12:	4770      	bx	lr

08003a14 <TIM_OC3PreloadConfig>:
 8003a14:	8b83      	ldrh	r3, [r0, #28]
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	4319      	orrs	r1, r3
 8003a20:	8381      	strh	r1, [r0, #28]
 8003a22:	4770      	bx	lr

08003a24 <TIM_OC4PreloadConfig>:
 8003a24:	8b83      	ldrh	r3, [r0, #28]
 8003a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a32:	b289      	uxth	r1, r1
 8003a34:	8381      	strh	r1, [r0, #28]
 8003a36:	4770      	bx	lr

08003a38 <TIM_OC1FastConfig>:
 8003a38:	8b03      	ldrh	r3, [r0, #24]
 8003a3a:	f023 0304 	bic.w	r3, r3, #4
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	4319      	orrs	r1, r3
 8003a44:	8301      	strh	r1, [r0, #24]
 8003a46:	4770      	bx	lr

08003a48 <TIM_OC2FastConfig>:
 8003a48:	8b03      	ldrh	r3, [r0, #24]
 8003a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a56:	b289      	uxth	r1, r1
 8003a58:	8301      	strh	r1, [r0, #24]
 8003a5a:	4770      	bx	lr

08003a5c <TIM_OC3FastConfig>:
 8003a5c:	8b83      	ldrh	r3, [r0, #28]
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	4319      	orrs	r1, r3
 8003a68:	8381      	strh	r1, [r0, #28]
 8003a6a:	4770      	bx	lr

08003a6c <TIM_OC4FastConfig>:
 8003a6c:	8b83      	ldrh	r3, [r0, #28]
 8003a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	0c1b      	lsrs	r3, r3, #16
 8003a76:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a7a:	b289      	uxth	r1, r1
 8003a7c:	8381      	strh	r1, [r0, #28]
 8003a7e:	4770      	bx	lr

08003a80 <TIM_ClearOC1Ref>:
 8003a80:	8b03      	ldrh	r3, [r0, #24]
 8003a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	4319      	orrs	r1, r3
 8003a8c:	8301      	strh	r1, [r0, #24]
 8003a8e:	4770      	bx	lr

08003a90 <TIM_ClearOC2Ref>:
 8003a90:	8b03      	ldrh	r3, [r0, #24]
 8003a92:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a96:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a9a:	b289      	uxth	r1, r1
 8003a9c:	8301      	strh	r1, [r0, #24]
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_ClearOC3Ref>:
 8003aa0:	8b83      	ldrh	r3, [r0, #28]
 8003aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	4319      	orrs	r1, r3
 8003aac:	8381      	strh	r1, [r0, #28]
 8003aae:	4770      	bx	lr

08003ab0 <TIM_ClearOC4Ref>:
 8003ab0:	8b83      	ldrh	r3, [r0, #28]
 8003ab2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ab6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003aba:	b289      	uxth	r1, r1
 8003abc:	8381      	strh	r1, [r0, #28]
 8003abe:	4770      	bx	lr

08003ac0 <TIM_OC1PolarityConfig>:
 8003ac0:	8c03      	ldrh	r3, [r0, #32]
 8003ac2:	f023 0302 	bic.w	r3, r3, #2
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	4319      	orrs	r1, r3
 8003acc:	8401      	strh	r1, [r0, #32]
 8003ace:	4770      	bx	lr

08003ad0 <TIM_OC1NPolarityConfig>:
 8003ad0:	8c03      	ldrh	r3, [r0, #32]
 8003ad2:	f023 0308 	bic.w	r3, r3, #8
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	4319      	orrs	r1, r3
 8003adc:	8401      	strh	r1, [r0, #32]
 8003ade:	4770      	bx	lr

08003ae0 <TIM_OC2PolarityConfig>:
 8003ae0:	8c03      	ldrh	r3, [r0, #32]
 8003ae2:	f023 0320 	bic.w	r3, r3, #32
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003aee:	b289      	uxth	r1, r1
 8003af0:	8401      	strh	r1, [r0, #32]
 8003af2:	4770      	bx	lr

08003af4 <TIM_OC2NPolarityConfig>:
 8003af4:	8c03      	ldrh	r3, [r0, #32]
 8003af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003b02:	b289      	uxth	r1, r1
 8003b04:	8401      	strh	r1, [r0, #32]
 8003b06:	4770      	bx	lr

08003b08 <TIM_OC3PolarityConfig>:
 8003b08:	8c03      	ldrh	r3, [r0, #32]
 8003b0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003b16:	b289      	uxth	r1, r1
 8003b18:	8401      	strh	r1, [r0, #32]
 8003b1a:	4770      	bx	lr

08003b1c <TIM_OC3NPolarityConfig>:
 8003b1c:	8c03      	ldrh	r3, [r0, #32]
 8003b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003b2a:	b289      	uxth	r1, r1
 8003b2c:	8401      	strh	r1, [r0, #32]
 8003b2e:	4770      	bx	lr

08003b30 <TIM_OC4PolarityConfig>:
 8003b30:	8c03      	ldrh	r3, [r0, #32]
 8003b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8003b3e:	b289      	uxth	r1, r1
 8003b40:	8401      	strh	r1, [r0, #32]
 8003b42:	4770      	bx	lr

08003b44 <TIM_CCxCmd>:
 8003b44:	b530      	push	{r4, r5, lr}
 8003b46:	8c04      	ldrh	r4, [r0, #32]
 8003b48:	408a      	lsls	r2, r1
 8003b4a:	b2a5      	uxth	r5, r4
 8003b4c:	2401      	movs	r4, #1
 8003b4e:	408c      	lsls	r4, r1
 8003b50:	ea25 0404 	bic.w	r4, r5, r4
 8003b54:	8404      	strh	r4, [r0, #32]
 8003b56:	8c03      	ldrh	r3, [r0, #32]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	8403      	strh	r3, [r0, #32]
 8003b5e:	bd30      	pop	{r4, r5, pc}

08003b60 <TIM_CCxNCmd>:
 8003b60:	b530      	push	{r4, r5, lr}
 8003b62:	8c04      	ldrh	r4, [r0, #32]
 8003b64:	408a      	lsls	r2, r1
 8003b66:	b2a5      	uxth	r5, r4
 8003b68:	2404      	movs	r4, #4
 8003b6a:	408c      	lsls	r4, r1
 8003b6c:	ea25 0404 	bic.w	r4, r5, r4
 8003b70:	8404      	strh	r4, [r0, #32]
 8003b72:	8c03      	ldrh	r3, [r0, #32]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	8403      	strh	r3, [r0, #32]
 8003b7a:	bd30      	pop	{r4, r5, pc}

08003b7c <TIM_SelectOCxM>:
 8003b7c:	b530      	push	{r4, r5, lr}
 8003b7e:	8c04      	ldrh	r4, [r0, #32]
 8003b80:	f100 0318 	add.w	r3, r0, #24
 8003b84:	b2a5      	uxth	r5, r4
 8003b86:	2401      	movs	r4, #1
 8003b88:	408c      	lsls	r4, r1
 8003b8a:	ea25 0404 	bic.w	r4, r5, r4
 8003b8e:	8404      	strh	r4, [r0, #32]
 8003b90:	f021 0008 	bic.w	r0, r1, #8
 8003b94:	b930      	cbnz	r0, 8003ba4 <TIM_SelectOCxM+0x28>
 8003b96:	0849      	lsrs	r1, r1, #1
 8003b98:	58c8      	ldr	r0, [r1, r3]
 8003b9a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8003b9e:	50c8      	str	r0, [r1, r3]
 8003ba0:	58c8      	ldr	r0, [r1, r3]
 8003ba2:	e009      	b.n	8003bb8 <TIM_SelectOCxM+0x3c>
 8003ba4:	3904      	subs	r1, #4
 8003ba6:	f3c1 014e 	ubfx	r1, r1, #1, #15
 8003baa:	58c8      	ldr	r0, [r1, r3]
 8003bac:	0212      	lsls	r2, r2, #8
 8003bae:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8003bb2:	50c8      	str	r0, [r1, r3]
 8003bb4:	58c8      	ldr	r0, [r1, r3]
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	4302      	orrs	r2, r0
 8003bba:	50ca      	str	r2, [r1, r3]
 8003bbc:	bd30      	pop	{r4, r5, pc}

08003bbe <TIM_UpdateDisableConfig>:
 8003bbe:	8803      	ldrh	r3, [r0, #0]
 8003bc0:	b119      	cbz	r1, 8003bca <TIM_UpdateDisableConfig+0xc>
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	e003      	b.n	8003bd2 <TIM_UpdateDisableConfig+0x14>
 8003bca:	f023 0302 	bic.w	r3, r3, #2
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	8003      	strh	r3, [r0, #0]
 8003bd4:	4770      	bx	lr

08003bd6 <TIM_UpdateRequestConfig>:
 8003bd6:	8803      	ldrh	r3, [r0, #0]
 8003bd8:	b119      	cbz	r1, 8003be2 <TIM_UpdateRequestConfig+0xc>
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	e003      	b.n	8003bea <TIM_UpdateRequestConfig+0x14>
 8003be2:	f023 0304 	bic.w	r3, r3, #4
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	8003      	strh	r3, [r0, #0]
 8003bec:	4770      	bx	lr

08003bee <TIM_SelectHallSensor>:
 8003bee:	8883      	ldrh	r3, [r0, #4]
 8003bf0:	b119      	cbz	r1, 8003bfa <TIM_SelectHallSensor+0xc>
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf8:	e003      	b.n	8003c02 <TIM_SelectHallSensor+0x14>
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	8083      	strh	r3, [r0, #4]
 8003c04:	4770      	bx	lr

08003c06 <TIM_SelectOnePulseMode>:
 8003c06:	8803      	ldrh	r3, [r0, #0]
 8003c08:	f023 0308 	bic.w	r3, r3, #8
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	0c1b      	lsrs	r3, r3, #16
 8003c10:	8003      	strh	r3, [r0, #0]
 8003c12:	8803      	ldrh	r3, [r0, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4319      	orrs	r1, r3
 8003c18:	8001      	strh	r1, [r0, #0]
 8003c1a:	4770      	bx	lr

08003c1c <TIM_SelectOutputTrigger>:
 8003c1c:	8883      	ldrh	r3, [r0, #4]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	8083      	strh	r3, [r0, #4]
 8003c28:	8883      	ldrh	r3, [r0, #4]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4319      	orrs	r1, r3
 8003c2e:	8081      	strh	r1, [r0, #4]
 8003c30:	4770      	bx	lr

08003c32 <TIM_SelectSlaveMode>:
 8003c32:	8903      	ldrh	r3, [r0, #8]
 8003c34:	f023 0307 	bic.w	r3, r3, #7
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	8103      	strh	r3, [r0, #8]
 8003c3e:	8903      	ldrh	r3, [r0, #8]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4319      	orrs	r1, r3
 8003c44:	8101      	strh	r1, [r0, #8]
 8003c46:	4770      	bx	lr

08003c48 <TIM_SelectMasterSlaveMode>:
 8003c48:	8903      	ldrh	r3, [r0, #8]
 8003c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	8103      	strh	r3, [r0, #8]
 8003c54:	8903      	ldrh	r3, [r0, #8]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	4319      	orrs	r1, r3
 8003c5a:	8101      	strh	r1, [r0, #8]
 8003c5c:	4770      	bx	lr

08003c5e <TIM_SetCounter>:
 8003c5e:	8481      	strh	r1, [r0, #36]	; 0x24
 8003c60:	4770      	bx	lr

08003c62 <TIM_SetAutoreload>:
 8003c62:	8581      	strh	r1, [r0, #44]	; 0x2c
 8003c64:	4770      	bx	lr

08003c66 <TIM_SetCompare1>:
 8003c66:	8681      	strh	r1, [r0, #52]	; 0x34
 8003c68:	4770      	bx	lr

08003c6a <TIM_SetCompare2>:
 8003c6a:	8701      	strh	r1, [r0, #56]	; 0x38
 8003c6c:	4770      	bx	lr

08003c6e <TIM_SetCompare3>:
 8003c6e:	8781      	strh	r1, [r0, #60]	; 0x3c
 8003c70:	4770      	bx	lr

08003c72 <TIM_SetCompare4>:
 8003c72:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8003c76:	4770      	bx	lr

08003c78 <TIM_SetIC1Prescaler>:
 8003c78:	8b03      	ldrh	r3, [r0, #24]
 8003c7a:	f023 030c 	bic.w	r3, r3, #12
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	8303      	strh	r3, [r0, #24]
 8003c84:	8b03      	ldrh	r3, [r0, #24]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4319      	orrs	r1, r3
 8003c8a:	8301      	strh	r1, [r0, #24]
 8003c8c:	4770      	bx	lr

08003c8e <TIM_SetIC2Prescaler>:
 8003c8e:	8b03      	ldrh	r3, [r0, #24]
 8003c90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	8303      	strh	r3, [r0, #24]
 8003c9a:	8b03      	ldrh	r3, [r0, #24]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003ca2:	b289      	uxth	r1, r1
 8003ca4:	8301      	strh	r1, [r0, #24]
 8003ca6:	4770      	bx	lr

08003ca8 <TIM_PWMIConfig>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	460c      	mov	r4, r1
 8003cac:	8849      	ldrh	r1, [r1, #2]
 8003cae:	88a2      	ldrh	r2, [r4, #4]
 8003cb0:	2900      	cmp	r1, #0
 8003cb2:	f8b4 e000 	ldrh.w	lr, [r4]
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2602      	moveq	r6, #2
 8003cba:	2600      	movne	r6, #0
 8003cbc:	2a01      	cmp	r2, #1
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2702      	moveq	r7, #2
 8003cc2:	2701      	movne	r7, #1
 8003cc4:	8923      	ldrh	r3, [r4, #8]
 8003cc6:	f1be 0f00 	cmp.w	lr, #0
 8003cca:	d10e      	bne.n	8003cea <TIM_PWMIConfig+0x42>
 8003ccc:	f7ff fac2 	bl	8003254 <TI1_Config>
 8003cd0:	88e1      	ldrh	r1, [r4, #6]
 8003cd2:	f7ff ffd1 	bl	8003c78 <TIM_SetIC1Prescaler>
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	8923      	ldrh	r3, [r4, #8]
 8003cda:	463a      	mov	r2, r7
 8003cdc:	f7ff faee 	bl	80032bc <TI2_Config>
 8003ce0:	88e1      	ldrh	r1, [r4, #6]
 8003ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ce6:	f7ff bfd2 	b.w	8003c8e <TIM_SetIC2Prescaler>
 8003cea:	f7ff fae7 	bl	80032bc <TI2_Config>
 8003cee:	88e1      	ldrh	r1, [r4, #6]
 8003cf0:	f7ff ffcd 	bl	8003c8e <TIM_SetIC2Prescaler>
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	8923      	ldrh	r3, [r4, #8]
 8003cf8:	463a      	mov	r2, r7
 8003cfa:	f7ff faab 	bl	8003254 <TI1_Config>
 8003cfe:	88e1      	ldrh	r1, [r4, #6]
 8003d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d04:	f7ff bfb8 	b.w	8003c78 <TIM_SetIC1Prescaler>

08003d08 <TIM_SetIC3Prescaler>:
 8003d08:	8b83      	ldrh	r3, [r0, #28]
 8003d0a:	f023 030c 	bic.w	r3, r3, #12
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	8383      	strh	r3, [r0, #28]
 8003d14:	8b83      	ldrh	r3, [r0, #28]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4319      	orrs	r1, r3
 8003d1a:	8381      	strh	r1, [r0, #28]
 8003d1c:	4770      	bx	lr

08003d1e <TIM_SetIC4Prescaler>:
 8003d1e:	8b83      	ldrh	r3, [r0, #28]
 8003d20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	8383      	strh	r3, [r0, #28]
 8003d2a:	8b83      	ldrh	r3, [r0, #28]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003d32:	b289      	uxth	r1, r1
 8003d34:	8381      	strh	r1, [r0, #28]
 8003d36:	4770      	bx	lr

08003d38 <TIM_ICInit>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	880e      	ldrh	r6, [r1, #0]
 8003d3c:	460d      	mov	r5, r1
 8003d3e:	890b      	ldrh	r3, [r1, #8]
 8003d40:	888a      	ldrh	r2, [r1, #4]
 8003d42:	4604      	mov	r4, r0
 8003d44:	8849      	ldrh	r1, [r1, #2]
 8003d46:	b936      	cbnz	r6, 8003d56 <TIM_ICInit+0x1e>
 8003d48:	f7ff fa84 	bl	8003254 <TI1_Config>
 8003d4c:	88e9      	ldrh	r1, [r5, #6]
 8003d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d52:	f7ff bf91 	b.w	8003c78 <TIM_SetIC1Prescaler>
 8003d56:	2e04      	cmp	r6, #4
 8003d58:	d106      	bne.n	8003d68 <TIM_ICInit+0x30>
 8003d5a:	f7ff faaf 	bl	80032bc <TI2_Config>
 8003d5e:	88e9      	ldrh	r1, [r5, #6]
 8003d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d64:	f7ff bf93 	b.w	8003c8e <TIM_SetIC2Prescaler>
 8003d68:	2e08      	cmp	r6, #8
 8003d6a:	88ef      	ldrh	r7, [r5, #6]
 8003d6c:	8c00      	ldrh	r0, [r0, #32]
 8003d6e:	d139      	bne.n	8003de4 <TIM_ICInit+0xac>
 8003d70:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003d74:	0400      	lsls	r0, r0, #16
 8003d76:	0c00      	lsrs	r0, r0, #16
 8003d78:	8420      	strh	r0, [r4, #32]
 8003d7a:	8ba6      	ldrh	r6, [r4, #28]
 8003d7c:	8c20      	ldrh	r0, [r4, #32]
 8003d7e:	b2b6      	uxth	r6, r6
 8003d80:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 8003d84:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	4b35      	ldr	r3, [pc, #212]	; (8003e64 <TIM_ICInit+0x12c>)
 8003d8e:	b280      	uxth	r0, r0
 8003d90:	429c      	cmp	r4, r3
 8003d92:	d012      	beq.n	8003dba <TIM_ICInit+0x82>
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	429c      	cmp	r4, r3
 8003d9a:	d00e      	beq.n	8003dba <TIM_ICInit+0x82>
 8003d9c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003da0:	d00b      	beq.n	8003dba <TIM_ICInit+0x82>
 8003da2:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8003da6:	429c      	cmp	r4, r3
 8003da8:	d007      	beq.n	8003dba <TIM_ICInit+0x82>
 8003daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dae:	429c      	cmp	r4, r3
 8003db0:	d003      	beq.n	8003dba <TIM_ICInit+0x82>
 8003db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003db6:	429c      	cmp	r4, r3
 8003db8:	d107      	bne.n	8003dca <TIM_ICInit+0x92>
 8003dba:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8003dbe:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8003dc2:	b280      	uxth	r0, r0
 8003dc4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003dc8:	e004      	b.n	8003dd4 <TIM_ICInit+0x9c>
 8003dca:	f420 6320 	bic.w	r3, r0, #2560	; 0xa00
 8003dce:	f441 7080 	orr.w	r0, r1, #256	; 0x100
 8003dd2:	4318      	orrs	r0, r3
 8003dd4:	83a2      	strh	r2, [r4, #28]
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	8420      	strh	r0, [r4, #32]
 8003dda:	4620      	mov	r0, r4
 8003ddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003de0:	f7ff bf92 	b.w	8003d08 <TIM_SetIC3Prescaler>
 8003de4:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003de8:	0400      	lsls	r0, r0, #16
 8003dea:	0c00      	lsrs	r0, r0, #16
 8003dec:	8420      	strh	r0, [r4, #32]
 8003dee:	8ba6      	ldrh	r6, [r4, #28]
 8003df0:	f8b4 e020 	ldrh.w	lr, [r4, #32]
 8003df4:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8003df8:	052d      	lsls	r5, r5, #20
 8003dfa:	0d2d      	lsrs	r5, r5, #20
 8003dfc:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <TIM_ICInit+0x12c>)
 8003e02:	ea45 3303 	orr.w	r3, r5, r3, lsl #12
 8003e06:	4294      	cmp	r4, r2
 8003e08:	fa1f fe8e 	uxth.w	lr, lr
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	d012      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e14:	4294      	cmp	r4, r2
 8003e16:	d00e      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e18:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003e1c:	d00b      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e1e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003e22:	4294      	cmp	r4, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e2a:	4294      	cmp	r4, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e32:	4294      	cmp	r4, r2
 8003e34:	d107      	bne.n	8003e46 <TIM_ICInit+0x10e>
 8003e36:	f42e 5000 	bic.w	r0, lr, #8192	; 0x2000
 8003e3a:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 8003e3e:	b280      	uxth	r0, r0
 8003e40:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8003e44:	e006      	b.n	8003e54 <TIM_ICInit+0x11c>
 8003e46:	f647 52ff 	movw	r2, #32255	; 0x7dff
 8003e4a:	f441 5080 	orr.w	r0, r1, #4096	; 0x1000
 8003e4e:	ea0e 0202 	and.w	r2, lr, r2
 8003e52:	4310      	orrs	r0, r2
 8003e54:	83a3      	strh	r3, [r4, #28]
 8003e56:	4639      	mov	r1, r7
 8003e58:	8420      	strh	r0, [r4, #32]
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e60:	f7ff bf5d 	b.w	8003d1e <TIM_SetIC4Prescaler>
 8003e64:	40012c00 	.word	0x40012c00

08003e68 <TIM_SetClockDivision>:
 8003e68:	8803      	ldrh	r3, [r0, #0]
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	8003      	strh	r3, [r0, #0]
 8003e74:	8803      	ldrh	r3, [r0, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4319      	orrs	r1, r3
 8003e7a:	8001      	strh	r1, [r0, #0]
 8003e7c:	4770      	bx	lr

08003e7e <TIM_GetCapture1>:
 8003e7e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8003e80:	b280      	uxth	r0, r0
 8003e82:	4770      	bx	lr

08003e84 <TIM_GetCapture2>:
 8003e84:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8003e86:	b280      	uxth	r0, r0
 8003e88:	4770      	bx	lr

08003e8a <TIM_GetCapture3>:
 8003e8a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 8003e8c:	b280      	uxth	r0, r0
 8003e8e:	4770      	bx	lr

08003e90 <TIM_GetCapture4>:
 8003e90:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 8003e94:	b280      	uxth	r0, r0
 8003e96:	4770      	bx	lr

08003e98 <TIM_GetCounter>:
 8003e98:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8003e9a:	b280      	uxth	r0, r0
 8003e9c:	4770      	bx	lr

08003e9e <TIM_GetPrescaler>:
 8003e9e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8003ea0:	b280      	uxth	r0, r0
 8003ea2:	4770      	bx	lr

08003ea4 <TIM_GetFlagStatus>:
 8003ea4:	8a03      	ldrh	r3, [r0, #16]
 8003ea6:	4219      	tst	r1, r3
 8003ea8:	bf14      	ite	ne
 8003eaa:	2001      	movne	r0, #1
 8003eac:	2000      	moveq	r0, #0
 8003eae:	4770      	bx	lr

08003eb0 <TIM_ClearFlag>:
 8003eb0:	43c9      	mvns	r1, r1
 8003eb2:	b289      	uxth	r1, r1
 8003eb4:	8201      	strh	r1, [r0, #16]
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_GetITStatus>:
 8003eb8:	8a03      	ldrh	r3, [r0, #16]
 8003eba:	8982      	ldrh	r2, [r0, #12]
 8003ebc:	ea11 0003 	ands.w	r0, r1, r3
 8003ec0:	b292      	uxth	r2, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_GetITStatus+0x14>
 8003ec4:	4211      	tst	r1, r2
 8003ec6:	bf14      	ite	ne
 8003ec8:	2001      	movne	r0, #1
 8003eca:	2000      	moveq	r0, #0
 8003ecc:	4770      	bx	lr

08003ece <TIM_ClearITPendingBit>:
 8003ece:	43c9      	mvns	r1, r1
 8003ed0:	b289      	uxth	r1, r1
 8003ed2:	8201      	strh	r1, [r0, #16]
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop

08003ed8 <SDIO_DeInit>:
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <SDIO_DeInit+0x1c>)
 8003eda:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <SDIO_DeInit+0x20>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eec:	6399      	str	r1, [r3, #56]	; 0x38
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40018000 	.word	0x40018000
 8003ef8:	00c007ff 	.word	0x00c007ff

08003efc <SDIO_Init>:
 8003efc:	6843      	ldr	r3, [r0, #4]
 8003efe:	6881      	ldr	r1, [r0, #8]
 8003f00:	b510      	push	{r4, lr}
 8003f02:	4319      	orrs	r1, r3
 8003f04:	68c3      	ldr	r3, [r0, #12]
 8003f06:	4c08      	ldr	r4, [pc, #32]	; (8003f28 <SDIO_Init+0x2c>)
 8003f08:	4319      	orrs	r1, r3
 8003f0a:	6803      	ldr	r3, [r0, #0]
 8003f0c:	6862      	ldr	r2, [r4, #4]
 8003f0e:	4319      	orrs	r1, r3
 8003f10:	6903      	ldr	r3, [r0, #16]
 8003f12:	4319      	orrs	r1, r3
 8003f14:	f422 43fd 	bic.w	r3, r2, #32384	; 0x7e80
 8003f18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f1c:	7d02      	ldrb	r2, [r0, #20]
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	6063      	str	r3, [r4, #4]
 8003f24:	bd10      	pop	{r4, pc}
 8003f26:	bf00      	nop
 8003f28:	40018000 	.word	0x40018000

08003f2c <SDIO_StructInit>:
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	7503      	strb	r3, [r0, #20]
 8003f30:	6003      	str	r3, [r0, #0]
 8003f32:	6043      	str	r3, [r0, #4]
 8003f34:	6083      	str	r3, [r0, #8]
 8003f36:	60c3      	str	r3, [r0, #12]
 8003f38:	6103      	str	r3, [r0, #16]
 8003f3a:	4770      	bx	lr

08003f3c <SDIO_ClockCmd>:
 8003f3c:	4b01      	ldr	r3, [pc, #4]	; (8003f44 <SDIO_ClockCmd+0x8>)
 8003f3e:	6018      	str	r0, [r3, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	423000a0 	.word	0x423000a0

08003f48 <SDIO_SetPowerState>:
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <SDIO_SetPowerState+0x14>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f022 0203 	bic.w	r2, r2, #3
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4310      	orrs	r0, r2
 8003f56:	6018      	str	r0, [r3, #0]
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40018000 	.word	0x40018000

08003f60 <SDIO_GetPowerState>:
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <SDIO_GetPowerState+0xc>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	f000 0003 	and.w	r0, r0, #3
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40018000 	.word	0x40018000

08003f70 <SDIO_ITConfig>:
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <SDIO_ITConfig+0x14>)
 8003f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f74:	b109      	cbz	r1, 8003f7a <SDIO_ITConfig+0xa>
 8003f76:	4310      	orrs	r0, r2
 8003f78:	e001      	b.n	8003f7e <SDIO_ITConfig+0xe>
 8003f7a:	ea22 0000 	bic.w	r0, r2, r0
 8003f7e:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40018000 	.word	0x40018000

08003f88 <SDIO_DMACmd>:
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <SDIO_DMACmd+0x8>)
 8003f8a:	6018      	str	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	4230058c 	.word	0x4230058c

08003f94 <SDIO_SendCommand>:
 8003f94:	6803      	ldr	r3, [r0, #0]
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <SDIO_SendCommand+0x28>)
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	6093      	str	r3, [r2, #8]
 8003f9c:	6881      	ldr	r1, [r0, #8]
 8003f9e:	6844      	ldr	r4, [r0, #4]
 8003fa0:	68d3      	ldr	r3, [r2, #12]
 8003fa2:	430c      	orrs	r4, r1
 8003fa4:	68c1      	ldr	r1, [r0, #12]
 8003fa6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003faa:	430c      	orrs	r4, r1
 8003fac:	6901      	ldr	r1, [r0, #16]
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	4321      	orrs	r1, r4
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	60d3      	str	r3, [r2, #12]
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	bf00      	nop
 8003fbc:	40018000 	.word	0x40018000

08003fc0 <SDIO_CmdStructInit>:
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6003      	str	r3, [r0, #0]
 8003fc4:	6043      	str	r3, [r0, #4]
 8003fc6:	6083      	str	r3, [r0, #8]
 8003fc8:	60c3      	str	r3, [r0, #12]
 8003fca:	6103      	str	r3, [r0, #16]
 8003fcc:	4770      	bx	lr

08003fce <SDIO_GetCommandResponse>:
 8003fce:	4b02      	ldr	r3, [pc, #8]	; (8003fd8 <SDIO_GetCommandResponse+0xa>)
 8003fd0:	6918      	ldr	r0, [r3, #16]
 8003fd2:	b2c0      	uxtb	r0, r0
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40018000 	.word	0x40018000

08003fdc <SDIO_GetResponse>:
 8003fdc:	b082      	sub	sp, #8
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <SDIO_GetResponse+0x14>)
 8003fe4:	4403      	add	r3, r0
 8003fe6:	9301      	str	r3, [sp, #4]
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	b002      	add	sp, #8
 8003fee:	4770      	bx	lr
 8003ff0:	40018014 	.word	0x40018014

08003ff4 <SDIO_DataConfig>:
 8003ff4:	6803      	ldr	r3, [r0, #0]
 8003ff6:	4909      	ldr	r1, [pc, #36]	; (800401c <SDIO_DataConfig+0x28>)
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	624b      	str	r3, [r1, #36]	; 0x24
 8003ffc:	6843      	ldr	r3, [r0, #4]
 8003ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8004000:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004002:	6884      	ldr	r4, [r0, #8]
 8004004:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004008:	68c3      	ldr	r3, [r0, #12]
 800400a:	431c      	orrs	r4, r3
 800400c:	6903      	ldr	r3, [r0, #16]
 800400e:	6940      	ldr	r0, [r0, #20]
 8004010:	4323      	orrs	r3, r4
 8004012:	4303      	orrs	r3, r0
 8004014:	4313      	orrs	r3, r2
 8004016:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004018:	bd10      	pop	{r4, pc}
 800401a:	bf00      	nop
 800401c:	40018000 	.word	0x40018000

08004020 <SDIO_DataStructInit>:
 8004020:	f04f 33ff 	mov.w	r3, #4294967295
 8004024:	6003      	str	r3, [r0, #0]
 8004026:	2300      	movs	r3, #0
 8004028:	6043      	str	r3, [r0, #4]
 800402a:	6083      	str	r3, [r0, #8]
 800402c:	60c3      	str	r3, [r0, #12]
 800402e:	6103      	str	r3, [r0, #16]
 8004030:	6143      	str	r3, [r0, #20]
 8004032:	4770      	bx	lr

08004034 <SDIO_GetDataCounter>:
 8004034:	4b01      	ldr	r3, [pc, #4]	; (800403c <SDIO_GetDataCounter+0x8>)
 8004036:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40018000 	.word	0x40018000

08004040 <SDIO_ReadData>:
 8004040:	4b01      	ldr	r3, [pc, #4]	; (8004048 <SDIO_ReadData+0x8>)
 8004042:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8004046:	4770      	bx	lr
 8004048:	40018000 	.word	0x40018000

0800404c <SDIO_WriteData>:
 800404c:	4b01      	ldr	r3, [pc, #4]	; (8004054 <SDIO_WriteData+0x8>)
 800404e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8004052:	4770      	bx	lr
 8004054:	40018000 	.word	0x40018000

08004058 <SDIO_GetFIFOCount>:
 8004058:	4b01      	ldr	r3, [pc, #4]	; (8004060 <SDIO_GetFIFOCount+0x8>)
 800405a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40018000 	.word	0x40018000

08004064 <SDIO_StartSDIOReadWait>:
 8004064:	4b01      	ldr	r3, [pc, #4]	; (800406c <SDIO_StartSDIOReadWait+0x8>)
 8004066:	6018      	str	r0, [r3, #0]
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	423005a0 	.word	0x423005a0

08004070 <SDIO_StopSDIOReadWait>:
 8004070:	4b01      	ldr	r3, [pc, #4]	; (8004078 <SDIO_StopSDIOReadWait+0x8>)
 8004072:	6018      	str	r0, [r3, #0]
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	423005a4 	.word	0x423005a4

0800407c <SDIO_SetSDIOReadWaitMode>:
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <SDIO_SetSDIOReadWaitMode+0x8>)
 800407e:	6018      	str	r0, [r3, #0]
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	423005a8 	.word	0x423005a8

08004088 <SDIO_SetSDIOOperation>:
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <SDIO_SetSDIOOperation+0x8>)
 800408a:	6018      	str	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	423005ac 	.word	0x423005ac

08004094 <SDIO_SendSDIOSuspendCmd>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <SDIO_SendSDIOSuspendCmd+0x8>)
 8004096:	6018      	str	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	423001ac 	.word	0x423001ac

080040a0 <SDIO_CommandCompletionCmd>:
 80040a0:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <SDIO_CommandCompletionCmd+0x8>)
 80040a2:	6018      	str	r0, [r3, #0]
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	423001b0 	.word	0x423001b0

080040ac <SDIO_CEATAITCmd>:
 80040ac:	f000 0001 	and.w	r0, r0, #1
 80040b0:	4b02      	ldr	r3, [pc, #8]	; (80040bc <SDIO_CEATAITCmd+0x10>)
 80040b2:	f080 0001 	eor.w	r0, r0, #1
 80040b6:	6018      	str	r0, [r3, #0]
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	423001b4 	.word	0x423001b4

080040c0 <SDIO_SendCEATACmd>:
 80040c0:	4b01      	ldr	r3, [pc, #4]	; (80040c8 <SDIO_SendCEATACmd+0x8>)
 80040c2:	6018      	str	r0, [r3, #0]
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	423001b8 	.word	0x423001b8

080040cc <SDIO_ClearFlag>:
 80040cc:	4b01      	ldr	r3, [pc, #4]	; (80040d4 <SDIO_ClearFlag+0x8>)
 80040ce:	6398      	str	r0, [r3, #56]	; 0x38
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40018000 	.word	0x40018000

080040d8 <SDIO_GetITStatus>:
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <SDIO_GetITStatus+0x10>)
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040dc:	4203      	tst	r3, r0
 80040de:	bf14      	ite	ne
 80040e0:	2001      	movne	r0, #1
 80040e2:	2000      	moveq	r0, #0
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40018000 	.word	0x40018000

080040ec <SDIO_GetFlagStatus>:
 80040ec:	f7ff bff4 	b.w	80040d8 <SDIO_GetITStatus>

080040f0 <SDIO_ClearITPendingBit>:
 80040f0:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <SDIO_ClearITPendingBit+0x8>)
 80040f2:	6398      	str	r0, [r3, #56]	; 0x38
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40018000 	.word	0x40018000

080040fc <WWDG_DeInit>:
 80040fc:	b508      	push	{r3, lr}
 80040fe:	2101      	movs	r1, #1
 8004100:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004104:	f7fe fd16 	bl	8002b34 <RCC_APB1PeriphResetCmd>
 8004108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800410c:	2100      	movs	r1, #0
 800410e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004112:	f7fe bd0f 	b.w	8002b34 <RCC_APB1PeriphResetCmd>

08004116 <WWDG_SetPrescaler>:
 8004116:	4a03      	ldr	r2, [pc, #12]	; (8004124 <WWDG_SetPrescaler+0xe>)
 8004118:	6853      	ldr	r3, [r2, #4]
 800411a:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800411e:	4318      	orrs	r0, r3
 8004120:	6050      	str	r0, [r2, #4]
 8004122:	4770      	bx	lr
 8004124:	40002c00 	.word	0x40002c00

08004128 <WWDG_SetWindowValue>:
 8004128:	b082      	sub	sp, #8
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <WWDG_SetWindowValue+0x24>)
 800412c:	2300      	movs	r3, #0
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	6853      	ldr	r3, [r2, #4]
 8004132:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	9b01      	ldr	r3, [sp, #4]
 800413e:	4303      	orrs	r3, r0
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	9b01      	ldr	r3, [sp, #4]
 8004144:	6053      	str	r3, [r2, #4]
 8004146:	b002      	add	sp, #8
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40002c00 	.word	0x40002c00

08004150 <WWDG_EnableIT>:
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <WWDG_EnableIT+0x8>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	4770      	bx	lr
 8004158:	420580a4 	.word	0x420580a4

0800415c <WWDG_SetCounter>:
 800415c:	4b02      	ldr	r3, [pc, #8]	; (8004168 <WWDG_SetCounter+0xc>)
 800415e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004162:	6018      	str	r0, [r3, #0]
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40002c00 	.word	0x40002c00

0800416c <WWDG_Enable>:
 800416c:	4b02      	ldr	r3, [pc, #8]	; (8004178 <WWDG_Enable+0xc>)
 800416e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004172:	6018      	str	r0, [r3, #0]
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40002c00 	.word	0x40002c00

0800417c <WWDG_GetFlagStatus>:
 800417c:	4b01      	ldr	r3, [pc, #4]	; (8004184 <WWDG_GetFlagStatus+0x8>)
 800417e:	6898      	ldr	r0, [r3, #8]
 8004180:	b2c0      	uxtb	r0, r0
 8004182:	4770      	bx	lr
 8004184:	40002c00 	.word	0x40002c00

08004188 <WWDG_ClearFlag>:
 8004188:	4b01      	ldr	r3, [pc, #4]	; (8004190 <WWDG_ClearFlag+0x8>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	4770      	bx	lr
 8004190:	40002c00 	.word	0x40002c00

08004194 <DBGMCU_GetREVID>:
 8004194:	4b01      	ldr	r3, [pc, #4]	; (800419c <DBGMCU_GetREVID+0x8>)
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	0c00      	lsrs	r0, r0, #16
 800419a:	4770      	bx	lr
 800419c:	e0042000 	.word	0xe0042000

080041a0 <DBGMCU_GetDEVID>:
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <DBGMCU_GetDEVID+0xc>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e0042000 	.word	0xe0042000

080041b0 <DBGMCU_Config>:
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <DBGMCU_Config+0x14>)
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	b109      	cbz	r1, 80041ba <DBGMCU_Config+0xa>
 80041b6:	4310      	orrs	r0, r2
 80041b8:	e001      	b.n	80041be <DBGMCU_Config+0xe>
 80041ba:	ea22 0000 	bic.w	r0, r2, r0
 80041be:	6058      	str	r0, [r3, #4]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e0042000 	.word	0xe0042000

080041c8 <NVIC_PriorityGroupConfig>:
 80041c8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80041cc:	4b02      	ldr	r3, [pc, #8]	; (80041d8 <NVIC_PriorityGroupConfig+0x10>)
 80041ce:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80041d2:	60d8      	str	r0, [r3, #12]
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <NVIC_Init>:
 80041dc:	78c2      	ldrb	r2, [r0, #3]
 80041de:	b510      	push	{r4, lr}
 80041e0:	7803      	ldrb	r3, [r0, #0]
 80041e2:	b30a      	cbz	r2, 8004228 <NVIC_Init+0x4c>
 80041e4:	4a16      	ldr	r2, [pc, #88]	; (8004240 <NVIC_Init+0x64>)
 80041e6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80041ea:	68d1      	ldr	r1, [r2, #12]
 80041ec:	7842      	ldrb	r2, [r0, #1]
 80041ee:	43c9      	mvns	r1, r1
 80041f0:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80041f4:	f1c1 0404 	rsb	r4, r1, #4
 80041f8:	fa02 f404 	lsl.w	r4, r2, r4
 80041fc:	220f      	movs	r2, #15
 80041fe:	40ca      	lsrs	r2, r1
 8004200:	7881      	ldrb	r1, [r0, #2]
 8004202:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8004206:	400a      	ands	r2, r1
 8004208:	4322      	orrs	r2, r4
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004212:	7803      	ldrb	r3, [r0, #0]
 8004214:	2201      	movs	r2, #1
 8004216:	0959      	lsrs	r1, r3, #5
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	4a08      	ldr	r2, [pc, #32]	; (8004244 <NVIC_Init+0x68>)
 8004222:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004226:	bd10      	pop	{r4, pc}
 8004228:	095a      	lsrs	r2, r3, #5
 800422a:	2101      	movs	r1, #1
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	4903      	ldr	r1, [pc, #12]	; (8004244 <NVIC_Init+0x68>)
 8004236:	3220      	adds	r2, #32
 8004238:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800423c:	bd10      	pop	{r4, pc}
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00
 8004244:	e000e100 	.word	0xe000e100

08004248 <NVIC_SetVectorTable>:
 8004248:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800424c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004250:	4b01      	ldr	r3, [pc, #4]	; (8004258 <NVIC_SetVectorTable+0x10>)
 8004252:	4308      	orrs	r0, r1
 8004254:	6098      	str	r0, [r3, #8]
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <NVIC_SystemLPConfig>:
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <NVIC_SystemLPConfig+0x14>)
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	b109      	cbz	r1, 8004266 <NVIC_SystemLPConfig+0xa>
 8004262:	4310      	orrs	r0, r2
 8004264:	e001      	b.n	800426a <NVIC_SystemLPConfig+0xe>
 8004266:	ea22 0000 	bic.w	r0, r2, r0
 800426a:	6118      	str	r0, [r3, #16]
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <SysTick_CLKSourceConfig>:
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <SysTick_CLKSourceConfig+0x14>)
 8004276:	2804      	cmp	r0, #4
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	bf0c      	ite	eq
 800427c:	f042 0204 	orreq.w	r2, r2, #4
 8004280:	f022 0204 	bicne.w	r2, r2, #4
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	4770      	bx	lr
 8004288:	e000e010 	.word	0xe000e010

0800428c <led_cb(std_msgs::UInt8 const&)>:

__IO bool shuttingDown = false;
__IO bool waitForServos = false;

void led_cb( const std_msgs::UInt8& cmd_msg){
  led_set(cmd_msg.data);
 800428c:	7900      	ldrb	r0, [r0, #4]
 800428e:	f7fc b8b9 	b.w	8000404 <led_set>

08004292 <motor_cb(roberto_msgs::MotorState const&)>:
}



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 8004292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004296:	4681      	mov	r9, r0
  lastMsg = millis();
 8004298:	f7fc fa54 	bl	8000744 <millis>
 800429c:	4c57      	ldr	r4, [pc, #348]	; (80043fc <motor_cb(roberto_msgs::MotorState const&)+0x16a>)
  uint8_t intMode = cmd_msg.mode;
 800429e:	f899 8028 	ldrb.w	r8, [r9, #40]	; 0x28
  if(intMode == cmd_msg.DRIVE_MODE_AUTO){

  }

  if(currentMode != intMode){
 80042a2:	7923      	ldrb	r3, [r4, #4]
}



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
  lastMsg = millis();
 80042a4:	6020      	str	r0, [r4, #0]
  uint8_t intMode = cmd_msg.mode;
  if(intMode == cmd_msg.DRIVE_MODE_AUTO){

  }

  if(currentMode != intMode){
 80042a6:	4543      	cmp	r3, r8
    waitForServos = true;
 80042a8:	bf1c      	itt	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	7163      	strbne	r3, [r4, #5]
  }

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
 80042ae:	f1b8 0f01 	cmp.w	r8, #1
 80042b2:	d174      	bne.n	800439e <motor_cb(roberto_msgs::MotorState const&)+0x10c>
    float angle[2] = {0, 0};
    float speedMult = 1;
    if (cmd_msg.heading_angle != 0){
 80042b4:	f8d9 7018 	ldr.w	r7, [r9, #24]
 80042b8:	2100      	movs	r1, #0
 80042ba:	4638      	mov	r0, r7
 80042bc:	f001 fc4e 	bl	8005b5c <__aeabi_fcmpeq>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d130      	bne.n	8004326 <motor_cb(roberto_msgs::MotorState const&)+0x94>
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
 80042c4:	4639      	mov	r1, r7
 80042c6:	4638      	mov	r0, r7
 80042c8:	f001 fab4 	bl	8005834 <__aeabi_fmul>
 80042cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80042d0:	f001 f9a8 	bl	8005624 <__addsf3>
 80042d4:	4639      	mov	r1, r7
 80042d6:	4605      	mov	r5, r0
 80042d8:	4638      	mov	r0, r7
 80042da:	f001 f9a3 	bl	8005624 <__addsf3>
 80042de:	4601      	mov	r1, r0
 80042e0:	4628      	mov	r0, r5
 80042e2:	f001 fb5b 	bl	800599c <__aeabi_fdiv>
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
 80042e6:	68a5      	ldr	r5, [r4, #8]

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
    float angle[2] = {0, 0};
    float speedMult = 1;
    if (cmd_msg.heading_angle != 0){
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
 80042e8:	4682      	mov	sl, r0
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
 80042ea:	4629      	mov	r1, r5
 80042ec:	f001 f99a 	bl	8005624 <__addsf3>
 80042f0:	4601      	mov	r1, r0
 80042f2:	4628      	mov	r0, r5
 80042f4:	f001 fb52 	bl	800599c <__aeabi_fdiv>
 80042f8:	f000 fe28 	bl	8004f4c <__aeabi_f2d>
 80042fc:	f00d fb84 	bl	8011a08 <atan>
 8004300:	f001 f93a 	bl	8005578 <__aeabi_d2f>
      angle[1] = atan(L/(L-R));
 8004304:	4651      	mov	r1, sl
    float angle[2] = {0, 0};
    float speedMult = 1;
    if (cmd_msg.heading_angle != 0){
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
 8004306:	4606      	mov	r6, r0
      angle[1] = atan(L/(L-R));
 8004308:	4628      	mov	r0, r5
 800430a:	f001 f989 	bl	8005620 <__aeabi_fsub>
 800430e:	4601      	mov	r1, r0
 8004310:	4628      	mov	r0, r5
 8004312:	f001 fb43 	bl	800599c <__aeabi_fdiv>
 8004316:	f000 fe19 	bl	8004f4c <__aeabi_f2d>
 800431a:	f00d fb75 	bl	8011a08 <atan>
 800431e:	f001 f92b 	bl	8005578 <__aeabi_d2f>
 8004322:	4605      	mov	r5, r0
 8004324:	e001      	b.n	800432a <motor_cb(roberto_msgs::MotorState const&)+0x98>
  if(currentMode != intMode){
    waitForServos = true;
  }

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
    float angle[2] = {0, 0};
 8004326:	2500      	movs	r5, #0
 8004328:	462e      	mov	r6, r5
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
      angle[1] = atan(L/(L-R));
    }
    motorCmd[0] = cmd_msg.speed*speedMult;
 800432a:	f8d9 3020 	ldr.w	r3, [r9, #32]
    motorCmd[1] = cmd_msg.speed*speedMult;
    motorCmd[2] = cmd_msg.speed*speedMult;
    motorCmd[3] = cmd_msg.speed*speedMult;

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 800432e:	4934      	ldr	r1, [pc, #208]	; (8004400 <motor_cb(roberto_msgs::MotorState const&)+0x16e>)
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
      angle[1] = atan(L/(L-R));
    }
    motorCmd[0] = cmd_msg.speed*speedMult;
 8004330:	60e3      	str	r3, [r4, #12]
    motorCmd[1] = cmd_msg.speed*speedMult;
 8004332:	6123      	str	r3, [r4, #16]
    motorCmd[2] = cmd_msg.speed*speedMult;
 8004334:	6163      	str	r3, [r4, #20]
    motorCmd[3] = cmd_msg.speed*speedMult;
 8004336:	61a3      	str	r3, [r4, #24]

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 8004338:	4630      	mov	r0, r6
 800433a:	f001 fc37 	bl	8005bac <__aeabi_fcmpgt>
 800433e:	b930      	cbnz	r0, 800434e <motor_cb(roberto_msgs::MotorState const&)+0xbc>
 8004340:	4930      	ldr	r1, [pc, #192]	; (8004404 <motor_cb(roberto_msgs::MotorState const&)+0x172>)
 8004342:	4630      	mov	r0, r6
 8004344:	f001 fc14 	bl	8005b70 <__aeabi_fcmplt>
 8004348:	b110      	cbz	r0, 8004350 <motor_cb(roberto_msgs::MotorState const&)+0xbe>
 800434a:	4e2e      	ldr	r6, [pc, #184]	; (8004404 <motor_cb(roberto_msgs::MotorState const&)+0x172>)
 800434c:	e000      	b.n	8004350 <motor_cb(roberto_msgs::MotorState const&)+0xbe>
 800434e:	4e2c      	ldr	r6, [pc, #176]	; (8004400 <motor_cb(roberto_msgs::MotorState const&)+0x16e>)
    angle[1] = angle[1] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[1] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[1]);
 8004350:	492b      	ldr	r1, [pc, #172]	; (8004400 <motor_cb(roberto_msgs::MotorState const&)+0x16e>)
 8004352:	4628      	mov	r0, r5
 8004354:	f001 fc2a 	bl	8005bac <__aeabi_fcmpgt>
 8004358:	b930      	cbnz	r0, 8004368 <motor_cb(roberto_msgs::MotorState const&)+0xd6>
 800435a:	492a      	ldr	r1, [pc, #168]	; (8004404 <motor_cb(roberto_msgs::MotorState const&)+0x172>)
 800435c:	4628      	mov	r0, r5
 800435e:	f001 fc07 	bl	8005b70 <__aeabi_fcmplt>
 8004362:	b110      	cbz	r0, 800436a <motor_cb(roberto_msgs::MotorState const&)+0xd8>
 8004364:	4d27      	ldr	r5, [pc, #156]	; (8004404 <motor_cb(roberto_msgs::MotorState const&)+0x172>)
 8004366:	e000      	b.n	800436a <motor_cb(roberto_msgs::MotorState const&)+0xd8>
 8004368:	4d25      	ldr	r5, [pc, #148]	; (8004400 <motor_cb(roberto_msgs::MotorState const&)+0x16e>)

    if(cmd_msg.heading_angle > 0){
 800436a:	2100      	movs	r1, #0
 800436c:	4638      	mov	r0, r7
 800436e:	f001 fc1d 	bl	8005bac <__aeabi_fcmpgt>
 8004372:	b148      	cbz	r0, 8004388 <motor_cb(roberto_msgs::MotorState const&)+0xf6>
      servo_left->setReference(angle[0]);
 8004374:	69e0      	ldr	r0, [r4, #28]
 8004376:	4631      	mov	r1, r6
 8004378:	6803      	ldr	r3, [r0, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	4798      	blx	r3
      servo_right->setReference(angle[1]);
 800437e:	6a20      	ldr	r0, [r4, #32]
 8004380:	4629      	mov	r1, r5
 8004382:	6803      	ldr	r3, [r0, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	e008      	b.n	800439a <motor_cb(roberto_msgs::MotorState const&)+0x108>

    }else{
      servo_left->setReference(angle[1]);
 8004388:	69e0      	ldr	r0, [r4, #28]
 800438a:	4629      	mov	r1, r5
 800438c:	6803      	ldr	r3, [r0, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	4798      	blx	r3
      servo_right->setReference(angle[0]);
 8004392:	4631      	mov	r1, r6
 8004394:	6a20      	ldr	r0, [r4, #32]
 8004396:	6803      	ldr	r3, [r0, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4798      	blx	r3
 800439c:	e02a      	b.n	80043f4 <motor_cb(roberto_msgs::MotorState const&)+0x162>
    }

  }else if(intMode == cmd_msg.DRIVE_MODE_SPIN){
 800439e:	f1b8 0f02 	cmp.w	r8, #2
 80043a2:	d112      	bne.n	80043ca <motor_cb(roberto_msgs::MotorState const&)+0x138>
    float h = 45;
    servo_left->setReference(h);
 80043a4:	69e0      	ldr	r0, [r4, #28]
 80043a6:	4918      	ldr	r1, [pc, #96]	; (8004408 <motor_cb(roberto_msgs::MotorState const&)+0x176>)
 80043a8:	6803      	ldr	r3, [r0, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	4798      	blx	r3
    servo_right->setReference(h);
 80043ae:	6a20      	ldr	r0, [r4, #32]
 80043b0:	4915      	ldr	r1, [pc, #84]	; (8004408 <motor_cb(roberto_msgs::MotorState const&)+0x176>)
 80043b2:	6803      	ldr	r3, [r0, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4798      	blx	r3

    motorCmd[0] = cmd_msg.speed;
 80043b8:	f8d9 3020 	ldr.w	r3, [r9, #32]
    motorCmd[1] = -cmd_msg.speed;
 80043bc:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
  }else if(intMode == cmd_msg.DRIVE_MODE_SPIN){
    float h = 45;
    servo_left->setReference(h);
    servo_right->setReference(h);

    motorCmd[0] = cmd_msg.speed;
 80043c0:	60e3      	str	r3, [r4, #12]
    motorCmd[1] = -cmd_msg.speed;
 80043c2:	6122      	str	r2, [r4, #16]
    motorCmd[2] = -cmd_msg.speed;
 80043c4:	6162      	str	r2, [r4, #20]
    motorCmd[3] = cmd_msg.speed;
 80043c6:	61a3      	str	r3, [r4, #24]
 80043c8:	e014      	b.n	80043f4 <motor_cb(roberto_msgs::MotorState const&)+0x162>

  }else if(intMode == cmd_msg.DRIVE_MODE_SIDEWAYS){
 80043ca:	f1b8 0f03 	cmp.w	r8, #3
 80043ce:	d111      	bne.n	80043f4 <motor_cb(roberto_msgs::MotorState const&)+0x162>
    float h = 90;
    servo_left->setReference(h);
 80043d0:	69e0      	ldr	r0, [r4, #28]
 80043d2:	490e      	ldr	r1, [pc, #56]	; (800440c <motor_cb(roberto_msgs::MotorState const&)+0x17a>)
 80043d4:	6803      	ldr	r3, [r0, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	4798      	blx	r3
    servo_right->setReference(h);
 80043da:	6a20      	ldr	r0, [r4, #32]
 80043dc:	490b      	ldr	r1, [pc, #44]	; (800440c <motor_cb(roberto_msgs::MotorState const&)+0x17a>)
 80043de:	6803      	ldr	r3, [r0, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4798      	blx	r3

    motorCmd[0] = cmd_msg.speed;
 80043e4:	f8d9 3020 	ldr.w	r3, [r9, #32]
    motorCmd[1] = -cmd_msg.speed;
 80043e8:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
  }else if(intMode == cmd_msg.DRIVE_MODE_SIDEWAYS){
    float h = 90;
    servo_left->setReference(h);
    servo_right->setReference(h);

    motorCmd[0] = cmd_msg.speed;
 80043ec:	60e3      	str	r3, [r4, #12]
    motorCmd[1] = -cmd_msg.speed;
 80043ee:	6122      	str	r2, [r4, #16]
    motorCmd[2] = cmd_msg.speed;
 80043f0:	6163      	str	r3, [r4, #20]
    motorCmd[3] = -cmd_msg.speed;
 80043f2:	61a2      	str	r2, [r4, #24]
  }
  currentMode = intMode;
 80043f4:	f884 8004 	strb.w	r8, [r4, #4]
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	200000c0 	.word	0x200000c0
 8004400:	41700000 	.word	0x41700000
 8004404:	c1700000 	.word	0xc1700000
 8004408:	42340000 	.word	0x42340000
 800440c:	42b40000 	.word	0x42b40000

08004410 <USART1_IRQHandler>:
};



extern "C"{
  void USART1_IRQHandler(void){
 8004410:	b538      	push	{r3, r4, r5, lr}

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET 
 8004412:	f240 5125 	movw	r1, #1317	; 0x525
 8004416:	480f      	ldr	r0, [pc, #60]	; (8004454 <USART1_IRQHandler+0x44>)
 8004418:	f7fe fef4 	bl	8003204 <USART_GetITStatus>
      && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){
 800441c:	b140      	cbz	r0, 8004430 <USART1_IRQHandler+0x20>
 800441e:	4c0e      	ldr	r4, [pc, #56]	; (8004458 <USART1_IRQHandler+0x48>)
 8004420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004422:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004424:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	4293      	cmp	r3, r2
 800442e:	d104      	bne.n	800443a <USART1_IRQHandler+0x2a>
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear inerrupt flag by reading byte
    }
  }   
 8004430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

      USART_FIFO[USART_CNTIN] = USART_ReceiveData(USART1);
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear inerrupt flag by reading byte
 8004434:	4807      	ldr	r0, [pc, #28]	; (8004454 <USART1_IRQHandler+0x44>)
 8004436:	f7fe be6c 	b.w	8003112 <USART_ReceiveData>
  void USART1_IRQHandler(void){

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET 
      && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){

      USART_FIFO[USART_CNTIN] = USART_ReceiveData(USART1);
 800443a:	4806      	ldr	r0, [pc, #24]	; (8004454 <USART1_IRQHandler+0x44>)
 800443c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800443e:	f7fe fe68 	bl	8003112 <USART_ReceiveData>
 8004442:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8004446:	85a8      	strh	r0, [r5, #44]	; 0x2c
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
 8004448:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800444a:	3301      	adds	r3, #1
 800444c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004450:	62a3      	str	r3, [r4, #40]	; 0x28
 8004452:	bd38      	pop	{r3, r4, r5, pc}
 8004454:	40013800 	.word	0x40013800
 8004458:	200000c0 	.word	0x200000c0

0800445c <EXTI2_IRQHandler>:
  return 0;
}



extern "C" void EXTI2_IRQHandler(void){
 800445c:	b508      	push	{r3, lr}
  if(EXTI_GetITStatus(EXTI_Line2) != RESET){
 800445e:	2004      	movs	r0, #4
 8004460:	f7fd f9e0 	bl	8001824 <EXTI_GetITStatus>
 8004464:	b140      	cbz	r0, 8004478 <EXTI2_IRQHandler+0x1c>
    shuttingDown = true;
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <EXTI2_IRQHandler+0x20>)
 8004468:	2201      	movs	r2, #1
 800446a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    EXTI_ClearITPendingBit(EXTI_Line2);
 800446e:	2004      	movs	r0, #4
  }
}
 8004470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


extern "C" void EXTI2_IRQHandler(void){
  if(EXTI_GetITStatus(EXTI_Line2) != RESET){
    shuttingDown = true;
    EXTI_ClearITPendingBit(EXTI_Line2);
 8004474:	f7fd b9e4 	b.w	8001840 <EXTI_ClearITPendingBit>
 8004478:	bd08      	pop	{r3, pc}
 800447a:	bf00      	nop
 800447c:	200000c0 	.word	0x200000c0

08004480 <assert_failed(unsigned char*, unsigned long)>:
  }
}



void assert_failed(uint8_t* file, uint32_t line){
 8004480:	b500      	push	{lr}
 8004482:	b0a7      	sub	sp, #156	; 0x9c
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  char str[150];

  sprintf(str, "Wrong parameters value: file %s on line %u\r\n", file, (unsigned int)line);
 8004484:	460b      	mov	r3, r1
 8004486:	4602      	mov	r2, r0
 8004488:	4908      	ldr	r1, [pc, #32]	; (80044ac <assert_failed(unsigned char*, unsigned long)+0x2c>)
 800448a:	4668      	mov	r0, sp
 800448c:	f00f f97c 	bl	8013788 <siprintf>
  nh.logerror(str);
 8004490:	4669      	mov	r1, sp
 8004492:	4807      	ldr	r0, [pc, #28]	; (80044b0 <assert_failed(unsigned char*, unsigned long)+0x30>)
 8004494:	f00b fb86 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  while (1){
    debug_toggle();
 8004498:	f7fb ffd2 	bl	8000440 <debug_toggle>
    delay(100);
 800449c:	2064      	movs	r0, #100	; 0x64
 800449e:	f7fc f93f 	bl	8000720 <delay>
    nh.spinOnce();
 80044a2:	4803      	ldr	r0, [pc, #12]	; (80044b0 <assert_failed(unsigned char*, unsigned long)+0x30>)
 80044a4:	f00b fca4 	bl	800fdf0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>
 80044a8:	e7f6      	b.n	8004498 <assert_failed(unsigned char*, unsigned long)+0x18>
 80044aa:	bf00      	nop
 80044ac:	08015c2c 	.word	0x08015c2c
 80044b0:	200004f0 	.word	0x200004f0

080044b4 <motor::createMotor(motorSettings*)>:
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 80044b4:	b538      	push	{r3, r4, r5, lr}
    switch (settings->m_motorType) {
 80044b6:	6803      	ldr	r3, [r0, #0]
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 80044b8:	4605      	mov	r5, r0
    switch (settings->m_motorType) {
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d002      	beq.n	80044c4 <motor::createMotor(motorSettings*)+0x10>
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d00e      	beq.n	80044e0 <motor::createMotor(motorSettings*)+0x2c>
 80044c2:	e015      	b.n	80044f0 <motor::createMotor(motorSettings*)+0x3c>
	    case MOTOR_TYPE_SERVO:
	    	settings->m_ServoLimitMax = 6800;
 80044c4:	f641 2390 	movw	r3, #6800	; 0x1a90
 80044c8:	6103      	str	r3, [r0, #16]
  			settings->m_ServoLimitMin = 2000;
 80044ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80044ce:	6143      	str	r3, [r0, #20]
	        return new servo(settings);
 80044d0:	203c      	movs	r0, #60	; 0x3c
 80044d2:	f00c ff91 	bl	80113f8 <operator new(unsigned int)>
 80044d6:	4629      	mov	r1, r5
 80044d8:	4604      	mov	r4, r0
 80044da:	f000 f8df 	bl	800469c <servo::servo(motorSettings*)>
 80044de:	e009      	b.n	80044f4 <motor::createMotor(motorSettings*)+0x40>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);
 80044e0:	202c      	movs	r0, #44	; 0x2c
 80044e2:	f00c ff89 	bl	80113f8 <operator new(unsigned int)>
 80044e6:	4629      	mov	r1, r5
 80044e8:	4604      	mov	r4, r0
 80044ea:	f000 f9c9 	bl	8004880 <DCMotor::DCMotor(motorSettings*)>
 80044ee:	e001      	b.n	80044f4 <motor::createMotor(motorSettings*)+0x40>

	    default:
	        return 0;
 80044f0:	2000      	movs	r0, #0
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
motor *motor::createMotor(motorSettings *settings){
    switch (settings->m_motorType) {
	    case MOTOR_TYPE_SERVO:
	    	settings->m_ServoLimitMax = 6800;
  			settings->m_ServoLimitMin = 2000;
	        return new servo(settings);
 80044f4:	4620      	mov	r0, r4
 80044f6:	bd38      	pop	{r3, r4, r5, pc}
 80044f8:	e7ff      	b.n	80044fa <motor::createMotor(motorSettings*)+0x46>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);
 80044fa:	4620      	mov	r0, r4
 80044fc:	f00c fc60 	bl	8010dc0 <operator delete(void*)>
 8004500:	f00c fff2 	bl	80114e8 <__cxa_end_cleanup>

08004504 <motor::motor(motorSettings*)>:
	        return 0;
    }
}


motor::motor(motorSettings *settings){
 8004504:	4a01      	ldr	r2, [pc, #4]	; (800450c <motor::motor(motorSettings*)+0x8>)
    m_settings = settings;
 8004506:	6041      	str	r1, [r0, #4]
	        return 0;
    }
}


motor::motor(motorSettings *settings){
 8004508:	6002      	str	r2, [r0, #0]
    m_settings = settings;
}
 800450a:	4770      	bx	lr
 800450c:	08014894 	.word	0x08014894

08004510 <motor::~motor()>:

motor::~motor()
{
 8004510:	4770      	bx	lr

08004512 <motor::~motor()>:

motor::motor(motorSettings *settings){
    m_settings = settings;
}

motor::~motor()
 8004512:	b510      	push	{r4, lr}
 8004514:	4604      	mov	r4, r0
{
 8004516:	f00c fc53 	bl	8010dc0 <operator delete(void*)>
 800451a:	4620      	mov	r0, r4
 800451c:	bd10      	pop	{r4, pc}
 800451e:	bf00      	nop

08004520 <servo::setReference(float)>:
	std::copy(a_, a_ + 5, a);

	return true;
}

void servo::setReference(float setPoint){
 8004520:	b510      	push	{r4, lr}
 8004522:	4604      	mov	r4, r0
	pos = (int) setPoint;
 8004524:	4608      	mov	r0, r1
 8004526:	f001 fb4b 	bl	8005bc0 <__aeabi_f2iz>
 800452a:	60a0      	str	r0, [r4, #8]
 800452c:	bd10      	pop	{r4, pc}

0800452e <servo::getReference()>:
	//pos = (int)setPoint > 90? 90 : ( (int)setPoint < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : (int)setPoint);
}

float servo::getReference(){
 800452e:	b508      	push	{r3, lr}
	return (float)pos;
 8004530:	6880      	ldr	r0, [r0, #8]
 8004532:	f001 f92b 	bl	800578c <__aeabi_i2f>
}
 8004536:	bd08      	pop	{r3, pc}

08004538 <servo::motorName()>:
const char* servo::motorName(){
	return m_settings->m_motorName;
 8004538:	6843      	ldr	r3, [r0, #4]
}
 800453a:	6858      	ldr	r0, [r3, #4]
 800453c:	4770      	bx	lr

0800453e <servo::~servo()>:
servo::servo(motorSettings *settings) : motor(settings)
{

}

servo::~servo()
 800453e:	b510      	push	{r4, lr}
 8004540:	4604      	mov	r4, r0
 8004542:	4b03      	ldr	r3, [pc, #12]	; (8004550 <servo::~servo()+0x12>)
 8004544:	6003      	str	r3, [r0, #0]
 8004546:	f7ff ffe3 	bl	8004510 <motor::~motor()>
{
}
 800454a:	4620      	mov	r0, r4
 800454c:	bd10      	pop	{r4, pc}
 800454e:	bf00      	nop
 8004550:	080148cc 	.word	0x080148cc

08004554 <servo::~servo()>:
servo::servo(motorSettings *settings) : motor(settings)
{

}

servo::~servo()
 8004554:	b510      	push	{r4, lr}
 8004556:	4604      	mov	r4, r0
{
}
 8004558:	f7ff fff1 	bl	800453e <servo::~servo()>
 800455c:	4620      	mov	r0, r4
 800455e:	f00c fc2f 	bl	8010dc0 <operator delete(void*)>
 8004562:	4620      	mov	r0, r4
 8004564:	bd10      	pop	{r4, pc}

08004566 <servo::motorInit()>:

bool servo::motorInit()
{
 8004566:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 8004568:	6843      	ldr	r3, [r0, #4]
servo::~servo()
{
}

bool servo::motorInit()
{
 800456a:	b091      	sub	sp, #68	; 0x44

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 800456c:	699a      	ldr	r2, [r3, #24]
servo::~servo()
{
}

bool servo::motorInit()
{
 800456e:	4604      	mov	r4, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 8004570:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004574:	2218      	movs	r2, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 8004576:	69d8      	ldr	r0, [r3, #28]
{

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004578:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 800457c:	4669      	mov	r1, sp

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800457e:	2203      	movs	r2, #3
 8004580:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 8004584:	f7fd fe53 	bl	800222e <GPIO_Init>




	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
 8004588:	f64e 235f 	movw	r3, #59999	; 0xea5f
 800458c:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
 8004590:	2317      	movs	r3, #23
 8004592:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 8004596:	6863      	ldr	r3, [r4, #4]


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8004598:	2500      	movs	r5, #0
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 800459a:	6898      	ldr	r0, [r3, #8]
 800459c:	a901      	add	r1, sp, #4


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800459e:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80045a2:	f8ad 5006 	strh.w	r5, [sp, #6]

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80045a6:	f7fe ffa9 	bl	80034fc <TIM_TimeBaseInit>


	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80045aa:	a804      	add	r0, sp, #16
 80045ac:	f7ff f908 	bl	80037c0 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80045b0:	2360      	movs	r3, #96	; 0x60
 80045b2:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80045b6:	2301      	movs	r3, #1
 80045b8:	f8ad 3012 	strh.w	r3, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 80045bc:	6863      	ldr	r3, [r4, #4]
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80045be:	f8ad 5016 	strh.w	r5, [sp, #22]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 80045c2:	68da      	ldr	r2, [r3, #12]

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80045c4:	f8ad 5018 	strh.w	r5, [sp, #24]

	switch(m_settings->m_TimerChannel){
 80045c8:	3a01      	subs	r2, #1
 80045ca:	2a03      	cmp	r2, #3
 80045cc:	d861      	bhi.n	8004692 <servo::motorInit()+0x12c>
 80045ce:	e8df f002 	tbb	[pc, r2]
 80045d2:	0c02      	.short	0x0c02
 80045d4:	2016      	.short	0x2016
		case 1:
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80045d6:	a904      	add	r1, sp, #16
 80045d8:	6898      	ldr	r0, [r3, #8]
 80045da:	f7fe ffd9 	bl	8003590 <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80045de:	6863      	ldr	r3, [r4, #4]
 80045e0:	2108      	movs	r1, #8
 80045e2:	6898      	ldr	r0, [r3, #8]
 80045e4:	f7ff fa04 	bl	80039f0 <TIM_OC1PreloadConfig>
 80045e8:	e01c      	b.n	8004624 <servo::motorInit()+0xbe>
			break;
		case 2:
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80045ea:	a904      	add	r1, sp, #16
 80045ec:	6898      	ldr	r0, [r3, #8]
 80045ee:	f7ff f813 	bl	8003618 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80045f2:	6863      	ldr	r3, [r4, #4]
 80045f4:	2108      	movs	r1, #8
 80045f6:	6898      	ldr	r0, [r3, #8]
 80045f8:	f7ff fa02 	bl	8003a00 <TIM_OC2PreloadConfig>
 80045fc:	e012      	b.n	8004624 <servo::motorInit()+0xbe>
			break;
		case 3:
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80045fe:	a904      	add	r1, sp, #16
 8004600:	6898      	ldr	r0, [r3, #8]
 8004602:	f7ff f84d 	bl	80036a0 <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004606:	6863      	ldr	r3, [r4, #4]
 8004608:	2108      	movs	r1, #8
 800460a:	6898      	ldr	r0, [r3, #8]
 800460c:	f7ff fa02 	bl	8003a14 <TIM_OC3PreloadConfig>
 8004610:	e008      	b.n	8004624 <servo::motorInit()+0xbe>
			break;
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004612:	6898      	ldr	r0, [r3, #8]
 8004614:	a904      	add	r1, sp, #16
 8004616:	f7ff f885 	bl	8003724 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800461a:	6863      	ldr	r3, [r4, #4]
 800461c:	2108      	movs	r1, #8
 800461e:	6898      	ldr	r0, [r3, #8]
 8004620:	f7ff fa00 	bl	8003a24 <TIM_OC4PreloadConfig>
		default:
			return false;
	}


	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 8004624:	6863      	ldr	r3, [r4, #4]
 8004626:	2101      	movs	r1, #1
 8004628:	6898      	ldr	r0, [r3, #8]
 800462a:	f7ff f9b1 	bl	8003990 <TIM_ARRPreloadConfig>

	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 800462e:	6863      	ldr	r3, [r4, #4]
 8004630:	2101      	movs	r1, #1
 8004632:	6898      	ldr	r0, [r3, #8]
 8004634:	f7ff f8eb 	bl	800380e <TIM_CtrlPWMOutputs>

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 8004638:	6863      	ldr	r3, [r4, #4]

	// Setup Controller
	float b_[] = {0.0029,    0.0087,    0.0087,    0.0029};
 800463a:	4f17      	ldr	r7, [pc, #92]	; (8004698 <servo::motorInit()+0x132>)

	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 800463c:	2101      	movs	r1, #1
 800463e:	6898      	ldr	r0, [r3, #8]
 8004640:	f7ff f8d9 	bl	80037f6 <TIM_Cmd>

	// Setup Controller
	float b_[] = {0.0029,    0.0087,    0.0087,    0.0029};
 8004644:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004648:	ae08      	add	r6, sp, #32
	float a_[] = {1.0000,   -2.3741,    1.9294,   -0.5321};
 800464a:	ad0c      	add	r5, sp, #48	; 0x30
 800464c:	3710      	adds	r7, #16

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	// Setup Controller
	float b_[] = {0.0029,    0.0087,    0.0087,    0.0029};
 800464e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	float a_[] = {1.0000,   -2.3741,    1.9294,   -0.5321};
 8004652:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8004656:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800465a:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 800465e:	4632      	mov	r2, r6
 8004660:	ca03      	ldmia	r2!, {r0, r1}
 8004662:	42aa      	cmp	r2, r5
 8004664:	6018      	str	r0, [r3, #0]
 8004666:	6059      	str	r1, [r3, #4]
 8004668:	4616      	mov	r6, r2
 800466a:	f103 0308 	add.w	r3, r3, #8
 800466e:	d1f6      	bne.n	800465e <servo::motorInit()+0xf8>
 8004670:	6810      	ldr	r0, [r2, #0]
 8004672:	343c      	adds	r4, #60	; 0x3c
 8004674:	6018      	str	r0, [r3, #0]
 8004676:	aa10      	add	r2, sp, #64	; 0x40
 8004678:	462b      	mov	r3, r5
 800467a:	cb03      	ldmia	r3!, {r0, r1}
 800467c:	4293      	cmp	r3, r2
 800467e:	6020      	str	r0, [r4, #0]
 8004680:	6061      	str	r1, [r4, #4]
 8004682:	461d      	mov	r5, r3
 8004684:	f104 0408 	add.w	r4, r4, #8
 8004688:	d1f6      	bne.n	8004678 <servo::motorInit()+0x112>
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	6020      	str	r0, [r4, #0]
	std::copy(b_, b_ + 5, b);
	std::copy(a_, a_ + 5, a);

	return true;
 800468e:	2001      	movs	r0, #1
 8004690:	e000      	b.n	8004694 <servo::motorInit()+0x12e>
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
			break;
		default:
			return false;
 8004692:	2000      	movs	r0, #0
	float a_[] = {1.0000,   -2.3741,    1.9294,   -0.5321};
	std::copy(b_, b_ + 5, b);
	std::copy(a_, a_ + 5, a);

	return true;
}
 8004694:	b011      	add	sp, #68	; 0x44
 8004696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004698:	080148ec 	.word	0x080148ec

0800469c <servo::servo(motorSettings*)>:

#include "servo.h"
#include "motorSettings.h"


servo::servo(motorSettings *settings) : motor(settings)
 800469c:	b510      	push	{r4, lr}
 800469e:	4604      	mov	r4, r0
 80046a0:	f7ff ff30 	bl	8004504 <motor::motor(motorSettings*)>
 80046a4:	4b01      	ldr	r3, [pc, #4]	; (80046ac <servo::servo(motorSettings*)+0x10>)
{

}
 80046a6:	4620      	mov	r0, r4

#include "servo.h"
#include "motorSettings.h"


servo::servo(motorSettings *settings) : motor(settings)
 80046a8:	6023      	str	r3, [r4, #0]
{

}
 80046aa:	bd10      	pop	{r4, pc}
 80046ac:	080148cc 	.word	0x080148cc

080046b0 <servo::filterUpdate(float)>:
}

float servo::filterUpdate(float sp){
	int i;
	for(i = 3; i>0; i++){
		u[i-1] = u[i]; 
 80046b0:	6983      	ldr	r3, [r0, #24]
	}
	u[0] = sp; 
 80046b2:	60c1      	str	r1, [r0, #12]
}

float servo::filterUpdate(float sp){
	int i;
	for(i = 3; i>0; i++){
		u[i-1] = u[i]; 
 80046b4:	6143      	str	r3, [r0, #20]
 80046b6:	e7fe      	b.n	80046b6 <servo::filterUpdate(float)+0x6>

080046b8 <servo::update(float, bool)>:
const char* servo::motorName(){
	return m_settings->m_motorName;
}

std::tuple<float, float, int, int> servo::update(float dt, bool connected){
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;	
 80046b8:	684b      	ldr	r3, [r1, #4]
}
const char* servo::motorName(){
	return m_settings->m_motorName;
}

std::tuple<float, float, int, int> servo::update(float dt, bool connected){
 80046ba:	b510      	push	{r4, lr}
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;	
 80046bc:	6958      	ldr	r0, [r3, #20]
	sp = (int) filterUpdate(sp);
 80046be:	691b      	ldr	r3, [r3, #16]
}
const char* servo::motorName(){
	return m_settings->m_motorName;
}

std::tuple<float, float, int, int> servo::update(float dt, bool connected){
 80046c0:	460c      	mov	r4, r1
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;	
	sp = (int) filterUpdate(sp);
 80046c2:	1a1a      	subs	r2, r3, r0
 80046c4:	688b      	ldr	r3, [r1, #8]
 80046c6:	4353      	muls	r3, r2
 80046c8:	22b4      	movs	r2, #180	; 0xb4
 80046ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80046ce:	4418      	add	r0, r3
 80046d0:	f001 f85c 	bl	800578c <__aeabi_i2f>
 80046d4:	4601      	mov	r1, r0
 80046d6:	4620      	mov	r0, r4
 80046d8:	f7ff ffea 	bl	80046b0 <servo::filterUpdate(float)>
 80046dc:	0000      	movs	r0, r0
	...

080046e0 <DCMotor::setReference(float)>:
 80046e0:	6081      	str	r1, [r0, #8]
 80046e2:	4770      	bx	lr

080046e4 <DCMotor::getReference()>:
 80046e4:	6880      	ldr	r0, [r0, #8]
 80046e6:	4770      	bx	lr

080046e8 <DCMotor::motorName()>:
 80046e8:	6843      	ldr	r3, [r0, #4]
 80046ea:	6858      	ldr	r0, [r3, #4]
 80046ec:	4770      	bx	lr

080046ee <DCMotor::~DCMotor()>:
 80046ee:	b510      	push	{r4, lr}
 80046f0:	4604      	mov	r4, r0
 80046f2:	4b03      	ldr	r3, [pc, #12]	; (8004700 <DCMotor::~DCMotor()+0x12>)
 80046f4:	6003      	str	r3, [r0, #0]
 80046f6:	f7ff ff0b 	bl	8004510 <motor::~motor()>
 80046fa:	4620      	mov	r0, r4
 80046fc:	bd10      	pop	{r4, pc}
 80046fe:	bf00      	nop
 8004700:	08014928 	.word	0x08014928

08004704 <DCMotor::~DCMotor()>:
 8004704:	b510      	push	{r4, lr}
 8004706:	4604      	mov	r4, r0
 8004708:	f7ff fff1 	bl	80046ee <DCMotor::~DCMotor()>
 800470c:	4620      	mov	r0, r4
 800470e:	f00c fb57 	bl	8010dc0 <operator delete(void*)>
 8004712:	4620      	mov	r0, r4
 8004714:	bd10      	pop	{r4, pc}

08004716 <DCMotor::motorInit()>:
 8004716:	b570      	push	{r4, r5, r6, lr}
 8004718:	4604      	mov	r4, r0
 800471a:	6843      	ldr	r3, [r0, #4]
 800471c:	b088      	sub	sp, #32
 800471e:	6a1a      	ldr	r2, [r3, #32]
 8004720:	2503      	movs	r5, #3
 8004722:	2610      	movs	r6, #16
 8004724:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004726:	4669      	mov	r1, sp
 8004728:	f8ad 2000 	strh.w	r2, [sp]
 800472c:	f88d 6003 	strb.w	r6, [sp, #3]
 8004730:	f88d 5002 	strb.w	r5, [sp, #2]
 8004734:	f7fd fd7b 	bl	800222e <GPIO_Init>
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	4669      	mov	r1, sp
 800473c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004740:	f8ad 2000 	strh.w	r2, [sp]
 8004744:	f88d 6003 	strb.w	r6, [sp, #3]
 8004748:	f88d 5002 	strb.w	r5, [sp, #2]
 800474c:	f7fd fd6f 	bl	800222e <GPIO_Init>
 8004750:	6863      	ldr	r3, [r4, #4]
 8004752:	2614      	movs	r6, #20
 8004754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004756:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004758:	4669      	mov	r1, sp
 800475a:	f8ad 2000 	strh.w	r2, [sp]
 800475e:	f88d 5002 	strb.w	r5, [sp, #2]
 8004762:	f88d 6003 	strb.w	r6, [sp, #3]
 8004766:	f7fd fd62 	bl	800222e <GPIO_Init>
 800476a:	6863      	ldr	r3, [r4, #4]
 800476c:	4669      	mov	r1, sp
 800476e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004770:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004772:	f8ad 2000 	strh.w	r2, [sp]
 8004776:	f88d 5002 	strb.w	r5, [sp, #2]
 800477a:	f88d 6003 	strb.w	r6, [sp, #3]
 800477e:	f7fd fd56 	bl	800222e <GPIO_Init>
 8004782:	6863      	ldr	r3, [r4, #4]
 8004784:	4669      	mov	r1, sp
 8004786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004788:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800478a:	f8ad 2000 	strh.w	r2, [sp]
 800478e:	2218      	movs	r2, #24
 8004790:	f88d 2003 	strb.w	r2, [sp, #3]
 8004794:	f88d 5002 	strb.w	r5, [sp, #2]
 8004798:	f7fd fd49 	bl	800222e <GPIO_Init>
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	2500      	movs	r5, #0
 80047a0:	6898      	ldr	r0, [r3, #8]
 80047a2:	4b36      	ldr	r3, [pc, #216]	; (800487c <DCMotor::motorInit()+0x166>)
 80047a4:	a901      	add	r1, sp, #4
 80047a6:	4298      	cmp	r0, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	f247 037e 	movweq	r3, #28798	; 0x707e
 80047ae:	f643 033f 	movwne	r3, #14399	; 0x383f
 80047b2:	f8ad 5004 	strh.w	r5, [sp, #4]
 80047b6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80047ba:	f8ad 500a 	strh.w	r5, [sp, #10]
 80047be:	f8ad 5006 	strh.w	r5, [sp, #6]
 80047c2:	f7fe fe9b 	bl	80034fc <TIM_TimeBaseInit>
 80047c6:	a804      	add	r0, sp, #16
 80047c8:	f7fe fffa 	bl	80037c0 <TIM_OCStructInit>
 80047cc:	2360      	movs	r3, #96	; 0x60
 80047ce:	f8ad 3010 	strh.w	r3, [sp, #16]
 80047d2:	2301      	movs	r3, #1
 80047d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	f8ad 5016 	strh.w	r5, [sp, #22]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	f8ad 5018 	strh.w	r5, [sp, #24]
 80047e4:	3a01      	subs	r2, #1
 80047e6:	2a03      	cmp	r2, #3
 80047e8:	d844      	bhi.n	8004874 <DCMotor::motorInit()+0x15e>
 80047ea:	e8df f002 	tbb	[pc, r2]
 80047ee:	0c02      	.short	0x0c02
 80047f0:	2016      	.short	0x2016
 80047f2:	a904      	add	r1, sp, #16
 80047f4:	6898      	ldr	r0, [r3, #8]
 80047f6:	f7fe fecb 	bl	8003590 <TIM_OC1Init>
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	2108      	movs	r1, #8
 80047fe:	6898      	ldr	r0, [r3, #8]
 8004800:	f7ff f8f6 	bl	80039f0 <TIM_OC1PreloadConfig>
 8004804:	e01c      	b.n	8004840 <DCMotor::motorInit()+0x12a>
 8004806:	a904      	add	r1, sp, #16
 8004808:	6898      	ldr	r0, [r3, #8]
 800480a:	f7fe ff05 	bl	8003618 <TIM_OC2Init>
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	2108      	movs	r1, #8
 8004812:	6898      	ldr	r0, [r3, #8]
 8004814:	f7ff f8f4 	bl	8003a00 <TIM_OC2PreloadConfig>
 8004818:	e012      	b.n	8004840 <DCMotor::motorInit()+0x12a>
 800481a:	a904      	add	r1, sp, #16
 800481c:	6898      	ldr	r0, [r3, #8]
 800481e:	f7fe ff3f 	bl	80036a0 <TIM_OC3Init>
 8004822:	6863      	ldr	r3, [r4, #4]
 8004824:	2108      	movs	r1, #8
 8004826:	6898      	ldr	r0, [r3, #8]
 8004828:	f7ff f8f4 	bl	8003a14 <TIM_OC3PreloadConfig>
 800482c:	e008      	b.n	8004840 <DCMotor::motorInit()+0x12a>
 800482e:	6898      	ldr	r0, [r3, #8]
 8004830:	a904      	add	r1, sp, #16
 8004832:	f7fe ff77 	bl	8003724 <TIM_OC4Init>
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	2108      	movs	r1, #8
 800483a:	6898      	ldr	r0, [r3, #8]
 800483c:	f7ff f8f2 	bl	8003a24 <TIM_OC4PreloadConfig>
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	2101      	movs	r1, #1
 8004844:	6898      	ldr	r0, [r3, #8]
 8004846:	f7ff f8a3 	bl	8003990 <TIM_ARRPreloadConfig>
 800484a:	6863      	ldr	r3, [r4, #4]
 800484c:	2101      	movs	r1, #1
 800484e:	6898      	ldr	r0, [r3, #8]
 8004850:	f7fe ffdd 	bl	800380e <TIM_CtrlPWMOutputs>
 8004854:	6863      	ldr	r3, [r4, #4]
 8004856:	2101      	movs	r1, #1
 8004858:	6898      	ldr	r0, [r3, #8]
 800485a:	f7fe ffcc 	bl	80037f6 <TIM_Cmd>
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	2001      	movs	r0, #1
 8004862:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004866:	7322      	strb	r2, [r4, #12]
 8004868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486a:	2200      	movs	r2, #0
 800486c:	62a2      	str	r2, [r4, #40]	; 0x28
 800486e:	6262      	str	r2, [r4, #36]	; 0x24
 8004870:	6123      	str	r3, [r4, #16]
 8004872:	e000      	b.n	8004876 <DCMotor::motorInit()+0x160>
 8004874:	2000      	movs	r0, #0
 8004876:	b008      	add	sp, #32
 8004878:	bd70      	pop	{r4, r5, r6, pc}
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00

08004880 <DCMotor::DCMotor(motorSettings*)>:
 8004880:	b510      	push	{r4, lr}
 8004882:	4604      	mov	r4, r0
 8004884:	f7ff fe3e 	bl	8004504 <motor::motor(motorSettings*)>
 8004888:	4b01      	ldr	r3, [pc, #4]	; (8004890 <DCMotor::DCMotor(motorSettings*)+0x10>)
 800488a:	4620      	mov	r0, r4
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd10      	pop	{r4, pc}
 8004890:	08014928 	.word	0x08014928

08004894 <DCMotor::setSpeed(int)>:
 8004894:	4a35      	ldr	r2, [pc, #212]	; (800496c <DCMotor::setSpeed(int)+0xd8>)
 8004896:	b538      	push	{r3, r4, r5, lr}
 8004898:	4291      	cmp	r1, r2
 800489a:	4605      	mov	r5, r0
 800489c:	6843      	ldr	r3, [r0, #4]
 800489e:	db06      	blt.n	80048ae <DCMotor::setSpeed(int)+0x1a>
 80048a0:	f643 043f 	movw	r4, #14399	; 0x383f
 80048a4:	428c      	cmp	r4, r1
 80048a6:	bfa8      	it	ge
 80048a8:	460c      	movge	r4, r1
 80048aa:	b1f4      	cbz	r4, 80048ea <DCMotor::setSpeed(int)+0x56>
 80048ac:	e000      	b.n	80048b0 <DCMotor::setSpeed(int)+0x1c>
 80048ae:	4614      	mov	r4, r2
 80048b0:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80048b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80048b4:	f7fd fd27 	bl	8002306 <GPIO_SetBits>
 80048b8:	686b      	ldr	r3, [r5, #4]
 80048ba:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80048bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80048be:	f7fd fd22 	bl	8002306 <GPIO_SetBits>
 80048c2:	2c00      	cmp	r4, #0
 80048c4:	dd05      	ble.n	80048d2 <DCMotor::setSpeed(int)+0x3e>
 80048c6:	686b      	ldr	r3, [r5, #4]
 80048c8:	8c19      	ldrh	r1, [r3, #32]
 80048ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80048cc:	f7fd fd1b 	bl	8002306 <GPIO_SetBits>
 80048d0:	e019      	b.n	8004906 <DCMotor::setSpeed(int)+0x72>
 80048d2:	d046      	beq.n	8004962 <DCMotor::setSpeed(int)+0xce>
 80048d4:	686b      	ldr	r3, [r5, #4]
 80048d6:	8c19      	ldrh	r1, [r3, #32]
 80048d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80048da:	f7fd fd16 	bl	800230a <GPIO_ResetBits>
 80048de:	686b      	ldr	r3, [r5, #4]
 80048e0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80048e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80048e4:	f7fd fd0f 	bl	8002306 <GPIO_SetBits>
 80048e8:	e012      	b.n	8004910 <DCMotor::setSpeed(int)+0x7c>
 80048ea:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80048ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80048ee:	f7fd fd0a 	bl	8002306 <GPIO_SetBits>
 80048f2:	686b      	ldr	r3, [r5, #4]
 80048f4:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80048f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80048f8:	f7fd fd05 	bl	8002306 <GPIO_SetBits>
 80048fc:	686b      	ldr	r3, [r5, #4]
 80048fe:	8c19      	ldrh	r1, [r3, #32]
 8004900:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004902:	f7fd fd02 	bl	800230a <GPIO_ResetBits>
 8004906:	686b      	ldr	r3, [r5, #4]
 8004908:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800490a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800490c:	f7fd fcfd 	bl	800230a <GPIO_ResetBits>
 8004910:	686a      	ldr	r2, [r5, #4]
 8004912:	4917      	ldr	r1, [pc, #92]	; (8004970 <DCMotor::setSpeed(int)+0xdc>)
 8004914:	6893      	ldr	r3, [r2, #8]
 8004916:	68d2      	ldr	r2, [r2, #12]
 8004918:	428b      	cmp	r3, r1
 800491a:	f102 32ff 	add.w	r2, r2, #4294967295
 800491e:	bf08      	it	eq
 8004920:	0064      	lsleq	r4, r4, #1
 8004922:	2a03      	cmp	r2, #3
 8004924:	d81f      	bhi.n	8004966 <DCMotor::setSpeed(int)+0xd2>
 8004926:	e8df f002 	tbb	[pc, r2]
 800492a:	0802      	.short	0x0802
 800492c:	140e      	.short	0x140e
 800492e:	2c00      	cmp	r4, #0
 8004930:	bfb8      	it	lt
 8004932:	4264      	neglt	r4, r4
 8004934:	b2a4      	uxth	r4, r4
 8004936:	869c      	strh	r4, [r3, #52]	; 0x34
 8004938:	e011      	b.n	800495e <DCMotor::setSpeed(int)+0xca>
 800493a:	2c00      	cmp	r4, #0
 800493c:	bfb8      	it	lt
 800493e:	4264      	neglt	r4, r4
 8004940:	b2a4      	uxth	r4, r4
 8004942:	871c      	strh	r4, [r3, #56]	; 0x38
 8004944:	e00b      	b.n	800495e <DCMotor::setSpeed(int)+0xca>
 8004946:	2c00      	cmp	r4, #0
 8004948:	bfb8      	it	lt
 800494a:	4264      	neglt	r4, r4
 800494c:	b2a4      	uxth	r4, r4
 800494e:	879c      	strh	r4, [r3, #60]	; 0x3c
 8004950:	e005      	b.n	800495e <DCMotor::setSpeed(int)+0xca>
 8004952:	2c00      	cmp	r4, #0
 8004954:	bfb8      	it	lt
 8004956:	4264      	neglt	r4, r4
 8004958:	b2a4      	uxth	r4, r4
 800495a:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
 800495e:	2001      	movs	r0, #1
 8004960:	bd38      	pop	{r3, r4, r5, pc}
 8004962:	4620      	mov	r0, r4
 8004964:	bd38      	pop	{r3, r4, r5, pc}
 8004966:	2000      	movs	r0, #0
 8004968:	bd38      	pop	{r3, r4, r5, pc}
 800496a:	bf00      	nop
 800496c:	ffffc7c1 	.word	0xffffc7c1
 8004970:	40012c00 	.word	0x40012c00

08004974 <DCMotor::initEncoder(unsigned short)>:
 8004974:	7301      	strb	r1, [r0, #12]
 8004976:	4770      	bx	lr

08004978 <DCMotor::readEncoder()>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <DCMotor::readEncoder()+0x78>)
 800497c:	2207      	movs	r2, #7
 800497e:	4d1d      	ldr	r5, [pc, #116]	; (80049f4 <DCMotor::readEncoder()+0x7c>)
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	7b0a      	ldrb	r2, [r1, #12]
 8004986:	702b      	strb	r3, [r5, #0]
 8004988:	4b1b      	ldr	r3, [pc, #108]	; (80049f8 <DCMotor::readEncoder()+0x80>)
 800498a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	4604      	mov	r4, r0
 8004992:	2201      	movs	r2, #1
 8004994:	4819      	ldr	r0, [pc, #100]	; (80049fc <DCMotor::readEncoder()+0x84>)
 8004996:	f7fd fe22 	bl	80025de <I2C_ITConfig>
 800499a:	2101      	movs	r1, #1
 800499c:	4817      	ldr	r0, [pc, #92]	; (80049fc <DCMotor::readEncoder()+0x84>)
 800499e:	f7fd fdf1 	bl	8002584 <I2C_AcknowledgeConfig>
 80049a2:	2101      	movs	r1, #1
 80049a4:	4815      	ldr	r0, [pc, #84]	; (80049fc <DCMotor::readEncoder()+0x84>)
 80049a6:	f7fd fdd5 	bl	8002554 <I2C_GenerateSTART>
 80049aa:	f7fb fed5 	bl	8000758 <micros>
 80049ae:	4606      	mov	r6, r0
 80049b0:	782b      	ldrb	r3, [r5, #0]
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d809      	bhi.n	80049ca <DCMotor::readEncoder()+0x52>
 80049b6:	f7fb fecf 	bl	8000758 <micros>
 80049ba:	1b80      	subs	r0, r0, r6
 80049bc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80049c0:	d3f6      	bcc.n	80049b0 <DCMotor::readEncoder()+0x38>
 80049c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049c6:	2300      	movs	r3, #0
 80049c8:	e00b      	b.n	80049e2 <DCMotor::readEncoder()+0x6a>
 80049ca:	480d      	ldr	r0, [pc, #52]	; (8004a00 <DCMotor::readEncoder()+0x88>)
 80049cc:	7882      	ldrb	r2, [r0, #2]
 80049ce:	7843      	ldrb	r3, [r0, #1]
 80049d0:	7805      	ldrb	r5, [r0, #0]
 80049d2:	0211      	lsls	r1, r2, #8
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	78c2      	ldrb	r2, [r0, #3]
 80049d8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80049dc:	4313      	orrs	r3, r2
 80049de:	430b      	orrs	r3, r1
 80049e0:	430a      	orrs	r2, r1
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80049e2:	8022      	strh	r2, [r4, #0]
 80049e4:	4a06      	ldr	r2, [pc, #24]	; (8004a00 <DCMotor::readEncoder()+0x88>)
 80049e6:	4620      	mov	r0, r4
 80049e8:	7912      	ldrb	r2, [r2, #4]
 80049ea:	6063      	str	r3, [r4, #4]
 80049ec:	70a2      	strb	r2, [r4, #2]
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	20000cdd 	.word	0x20000cdd
 80049f4:	20000ce6 	.word	0x20000ce6
 80049f8:	20000ce5 	.word	0x20000ce5
 80049fc:	40005400 	.word	0x40005400
 8004a00:	20000cde 	.word	0x20000cde

08004a04 <DCMotor::updateRegulator(float, float)>:
 8004a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a08:	4604      	mov	r4, r0
 8004a0a:	4690      	mov	r8, r2
 8004a0c:	6880      	ldr	r0, [r0, #8]
 8004a0e:	f000 fe07 	bl	8005620 <__aeabi_fsub>
 8004a12:	4641      	mov	r1, r8
 8004a14:	4607      	mov	r7, r0
 8004a16:	f000 ff0d 	bl	8005834 <__aeabi_fmul>
 8004a1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a1c:	f000 fe02 	bl	8005624 <__addsf3>
 8004a20:	6866      	ldr	r6, [r4, #4]
 8004a22:	62a0      	str	r0, [r4, #40]	; 0x28
 8004a24:	6df5      	ldr	r5, [r6, #92]	; 0x5c
 8004a26:	4681      	mov	r9, r0
 8004a28:	4629      	mov	r1, r5
 8004a2a:	f001 f8bf 	bl	8005bac <__aeabi_fcmpgt>
 8004a2e:	b930      	cbnz	r0, 8004a3e <DCMotor::updateRegulator(float, float)+0x3a>
 8004a30:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004a34:	4629      	mov	r1, r5
 8004a36:	4648      	mov	r0, r9
 8004a38:	f001 f89a 	bl	8005b70 <__aeabi_fcmplt>
 8004a3c:	b100      	cbz	r0, 8004a40 <DCMotor::updateRegulator(float, float)+0x3c>
 8004a3e:	62a5      	str	r5, [r4, #40]	; 0x28
 8004a40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a42:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8004a44:	f000 fef6 	bl	8005834 <__aeabi_fmul>
 8004a48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004a4a:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8004a4c:	4681      	mov	r9, r0
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 fef0 	bl	8005834 <__aeabi_fmul>
 8004a54:	4601      	mov	r1, r0
 8004a56:	4648      	mov	r0, r9
 8004a58:	f000 fde4 	bl	8005624 <__addsf3>
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4681      	mov	r9, r0
 8004a60:	4638      	mov	r0, r7
 8004a62:	f000 fddd 	bl	8005620 <__aeabi_fsub>
 8004a66:	4641      	mov	r1, r8
 8004a68:	f000 ff98 	bl	800599c <__aeabi_fdiv>
 8004a6c:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8004a6e:	f000 fee1 	bl	8005834 <__aeabi_fmul>
 8004a72:	4601      	mov	r1, r0
 8004a74:	4648      	mov	r0, r9
 8004a76:	f000 fdd5 	bl	8005624 <__addsf3>
 8004a7a:	6267      	str	r7, [r4, #36]	; 0x24
 8004a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004a80 <DCMotor::update(float, bool)>:
 8004a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a84:	4607      	mov	r7, r0
 8004a86:	4688      	mov	r8, r1
 8004a88:	4616      	mov	r6, r2
 8004a8a:	b33b      	cbz	r3, 8004adc <DCMotor::update(float, bool)+0x5c>
 8004a8c:	4668      	mov	r0, sp
 8004a8e:	f7ff ff73 	bl	8004978 <DCMotor::readEncoder()>
 8004a92:	9801      	ldr	r0, [sp, #4]
 8004a94:	f000 fa48 	bl	8004f28 <__aeabi_i2d>
 8004a98:	a31b      	add	r3, pc, #108	; (adr r3, 8004b08 <DCMotor::update(float, bool)+0x88>)
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	f000 faa9 	bl	8004ff4 <__aeabi_dmul>
 8004aa2:	f000 fd69 	bl	8005578 <__aeabi_d2f>
 8004aa6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004aaa:	f000 fec3 	bl	8005834 <__aeabi_fmul>
 8004aae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4916      	ldr	r1, [pc, #88]	; (8004b10 <DCMotor::update(float, bool)+0x90>)
 8004ab6:	6858      	ldr	r0, [r3, #4]

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
	  _M_head(*this) = std::forward<_UHead>
 8004ab8:	f89d 5002 	ldrb.w	r5, [sp, #2]

      template<typename _UHead>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead>&& __in)
        {
	  _M_head(*this)
 8004abc:	f8bd 9000 	ldrh.w	r9, [sp]
 8004ac0:	f00e fe9b 	bl	80137fa <strstr>
 8004ac4:	b108      	cbz	r0, 8004aca <DCMotor::update(float, bool)+0x4a>
 8004ac6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8004aca:	4632      	mov	r2, r6
 8004acc:	4621      	mov	r1, r4
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f7ff ff98 	bl	8004a04 <DCMotor::updateRegulator(float, float)>
 8004ad4:	f001 f874 	bl	8005bc0 <__aeabi_f2iz>
 8004ad8:	4606      	mov	r6, r0
 8004ada:	e003      	b.n	8004ae4 <DCMotor::update(float, bool)+0x64>
 8004adc:	461d      	mov	r5, r3
 8004ade:	4699      	mov	r9, r3
 8004ae0:	461e      	mov	r6, r3
 8004ae2:	4c0c      	ldr	r4, [pc, #48]	; (8004b14 <DCMotor::update(float, bool)+0x94>)
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f7ff fed4 	bl	8004894 <DCMotor::setSpeed(int)>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004aec:	f8c7 9000 	str.w	r9, [r7]
 8004af0:	607d      	str	r5, [r7, #4]
 8004af2:	4630      	mov	r0, r6
 8004af4:	f000 fe4a 	bl	800578c <__aeabi_i2f>
 8004af8:	60b8      	str	r0, [r7, #8]
 8004afa:	4638      	mov	r0, r7
 8004afc:	60fc      	str	r4, [r7, #12]
 8004afe:	b003      	add	sp, #12
 8004b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b04:	f3af 8000 	nop.w
 8004b08:	7047711c 	.word	0x7047711c
 8004b0c:	3fa88b2f 	.word	0x3fa88b2f
 8004b10:	08015b71 	.word	0x08015b71
 8004b14:	bf800000 	.word	0xbf800000

08004b18 <motorSettings::motorSettings()>:

motorSettings::motorSettings()
{
    //  preset general defaults

    m_motorType = 0;
 8004b18:	2200      	movs	r2, #0
 8004b1a:	6002      	str	r2, [r0, #0]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 8004b1c:	4770      	bx	lr

08004b1e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>:

motorSettings::motorSettings(int type, const char* name, TIM_TypeDef* timer, int timerChannel)
 8004b1e:	b510      	push	{r4, lr}
{
    //  preset general defaults

    m_motorType = type;
    m_motorName = name;
    m_Timer = timer;
 8004b20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    m_TimerChannel = timerChannel;
 8004b24:	9b02      	ldr	r3, [sp, #8]
 8004b26:	60c3      	str	r3, [r0, #12]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 8004b28:	bd10      	pop	{r4, pc}

08004b2a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>:
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
 8004b2a:	6283      	str	r3, [r0, #40]	; 0x28
    m_DCEnAPort = m_DCEnAPort_;
 8004b2c:	9b00      	ldr	r3, [sp, #0]

void motorSettings::setDCPins(int m_DCInAPin_, GPIO_TypeDef* m_DCInAPort_, int m_DCEnAPin_, GPIO_TypeDef* m_DCEnAPort_,
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
 8004b2e:	6201      	str	r1, [r0, #32]
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
    m_DCEnAPort = m_DCEnAPort_;
 8004b30:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_DCInBPin = m_DCInBPin_;
 8004b32:	9b01      	ldr	r3, [sp, #4]
void motorSettings::setDCPins(int m_DCInAPin_, GPIO_TypeDef* m_DCInAPort_, int m_DCEnAPin_, GPIO_TypeDef* m_DCEnAPort_,
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
 8004b34:	6242      	str	r2, [r0, #36]	; 0x24
    m_DCEnAPin = m_DCEnAPin_;
    m_DCEnAPort = m_DCEnAPort_;
    m_DCInBPin = m_DCInBPin_;
 8004b36:	6303      	str	r3, [r0, #48]	; 0x30
    m_DCInBPort = m_DCInBPort_;
 8004b38:	9b02      	ldr	r3, [sp, #8]
 8004b3a:	6343      	str	r3, [r0, #52]	; 0x34
    m_DCEnBPin = m_DCEnBPin_;
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	6383      	str	r3, [r0, #56]	; 0x38
    m_DCEnBPort = m_DCEnBPort_;
 8004b40:	9b04      	ldr	r3, [sp, #16]
 8004b42:	63c3      	str	r3, [r0, #60]	; 0x3c
    m_DCPWMPin = m_DCPWMPin_;
 8004b44:	9b05      	ldr	r3, [sp, #20]
 8004b46:	6403      	str	r3, [r0, #64]	; 0x40
    m_DCPWMPort = m_DCPWMPort_;
 8004b48:	9b06      	ldr	r3, [sp, #24]
 8004b4a:	6443      	str	r3, [r0, #68]	; 0x44
 8004b4c:	4770      	bx	lr

08004b4e <motorSettings::setRegulator(float, float, float, float)>:
}

void motorSettings::setRegulator(float KP_, float KI_, float KD_, float integralSaturation_){
    KP = KP_;
    KI = KI_;
    KD = KD_;
 8004b4e:	6583      	str	r3, [r0, #88]	; 0x58
    integralSaturation = integralSaturation_;
 8004b50:	9b00      	ldr	r3, [sp, #0]
    m_DCPWMPin = m_DCPWMPin_;
    m_DCPWMPort = m_DCPWMPort_;
}

void motorSettings::setRegulator(float KP_, float KI_, float KD_, float integralSaturation_){
    KP = KP_;
 8004b52:	6501      	str	r1, [r0, #80]	; 0x50
    KI = KI_;
 8004b54:	6542      	str	r2, [r0, #84]	; 0x54
    KD = KD_;
    integralSaturation = integralSaturation_;
 8004b56:	65c3      	str	r3, [r0, #92]	; 0x5c
 8004b58:	4770      	bx	lr
	...

08004b5c <ros::normalizeSecNSecSigned(long&, long&)>:
#include "ros/duration.h"

namespace ros
{
  void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
  {
 8004b5c:	b510      	push	{r4, lr}
    int32_t nsec_part = nsec;
 8004b5e:	680b      	ldr	r3, [r1, #0]
    int32_t sec_part = sec;
 8004b60:	6802      	ldr	r2, [r0, #0]

    while (nsec_part > 1000000000L)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <ros::normalizeSecNSecSigned(long&, long&)+0x38>)
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	dd07      	ble.n	8004b78 <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
    {
      nsec_part -= 1000000000L;
 8004b68:	f103 4344 	add.w	r3, r3, #3288334336	; 0xc4000000
 8004b6c:	f503 03ca 	add.w	r3, r3, #6619136	; 0x650000
 8004b70:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
      ++sec_part;
 8004b74:	3201      	adds	r2, #1
  void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
  {
    int32_t nsec_part = nsec;
    int32_t sec_part = sec;

    while (nsec_part > 1000000000L)
 8004b76:	e7f5      	b.n	8004b64 <ros::normalizeSecNSecSigned(long&, long&)+0x8>
    {
      nsec_part -= 1000000000L;
      ++sec_part;
    }
    while (nsec_part < 0)
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	da07      	bge.n	8004b8c <ros::normalizeSecNSecSigned(long&, long&)+0x30>
    {
      nsec_part += 1000000000L;
 8004b7c:	f103 536e 	add.w	r3, r3, #998244352	; 0x3b800000
 8004b80:	f503 13d6 	add.w	r3, r3, #1753088	; 0x1ac000
 8004b84:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
      --sec_part;
 8004b88:	3a01      	subs	r2, #1
    while (nsec_part > 1000000000L)
    {
      nsec_part -= 1000000000L;
      ++sec_part;
    }
    while (nsec_part < 0)
 8004b8a:	e7f5      	b.n	8004b78 <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
    {
      nsec_part += 1000000000L;
      --sec_part;
    }
    sec = sec_part;
 8004b8c:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004b8e:	600b      	str	r3, [r1, #0]
 8004b90:	bd10      	pop	{r4, pc}
 8004b92:	bf00      	nop
 8004b94:	3b9aca00 	.word	0x3b9aca00

08004b98 <ros::Duration::operator+=(ros::Duration const&)>:
  }

  Duration& Duration::operator+=(const Duration &rhs)
  {
    sec += rhs.sec;
 8004b98:	6802      	ldr	r2, [r0, #0]
 8004b9a:	680b      	ldr	r3, [r1, #0]
    sec = sec_part;
    nsec = nsec_part;
  }

  Duration& Duration::operator+=(const Duration &rhs)
  {
 8004b9c:	b510      	push	{r4, lr}
    sec += rhs.sec;
 8004b9e:	4413      	add	r3, r2
 8004ba0:	6003      	str	r3, [r0, #0]
    nsec += rhs.nsec;
 8004ba2:	684b      	ldr	r3, [r1, #4]
 8004ba4:	4601      	mov	r1, r0
 8004ba6:	6842      	ldr	r2, [r0, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004bae:	f7ff ffd5 	bl	8004b5c <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004bb2:	bd10      	pop	{r4, pc}

08004bb4 <ros::Duration::operator-=(ros::Duration const&)>:

  Duration& Duration::operator-=(const Duration &rhs){
    sec += -rhs.sec;
 8004bb4:	6803      	ldr	r3, [r0, #0]
 8004bb6:	680a      	ldr	r2, [r1, #0]
    nsec += rhs.nsec;
    normalizeSecNSecSigned(sec, nsec);
    return *this;
  }

  Duration& Duration::operator-=(const Duration &rhs){
 8004bb8:	b510      	push	{r4, lr}
    sec += -rhs.sec;
 8004bba:	1a9b      	subs	r3, r3, r2
    nsec += -rhs.nsec;
 8004bbc:	684a      	ldr	r2, [r1, #4]
 8004bbe:	4601      	mov	r1, r0
    normalizeSecNSecSigned(sec, nsec);
    return *this;
  }

  Duration& Duration::operator-=(const Duration &rhs){
    sec += -rhs.sec;
 8004bc0:	6003      	str	r3, [r0, #0]
    nsec += -rhs.nsec;
 8004bc2:	6843      	ldr	r3, [r0, #4]
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004bca:	f7ff ffc7 	bl	8004b5c <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004bce:	bd10      	pop	{r4, pc}

08004bd0 <ros::Duration::operator*=(double)>:

  Duration& Duration::operator*=(double scale){
 8004bd0:	b5d0      	push	{r4, r6, r7, lr}
 8004bd2:	4616      	mov	r6, r2
 8004bd4:	461f      	mov	r7, r3
 8004bd6:	4604      	mov	r4, r0
    sec *= scale;
 8004bd8:	6800      	ldr	r0, [r0, #0]
 8004bda:	f000 f9a5 	bl	8004f28 <__aeabi_i2d>
 8004bde:	4632      	mov	r2, r6
 8004be0:	463b      	mov	r3, r7
 8004be2:	f000 fa07 	bl	8004ff4 <__aeabi_dmul>
 8004be6:	f000 fc9f 	bl	8005528 <__aeabi_d2iz>
 8004bea:	6020      	str	r0, [r4, #0]
    nsec *= scale;
 8004bec:	6860      	ldr	r0, [r4, #4]
 8004bee:	f000 f99b 	bl	8004f28 <__aeabi_i2d>
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	f000 f9fd 	bl	8004ff4 <__aeabi_dmul>
 8004bfa:	f000 fc95 	bl	8005528 <__aeabi_d2iz>
 8004bfe:	4621      	mov	r1, r4
 8004c00:	f841 0f04 	str.w	r0, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff ffa9 	bl	8004b5c <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	bdd0      	pop	{r4, r6, r7, pc}
 8004c0e:	bf00      	nop

08004c10 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>:
 8004c10:	b530      	push	{r4, r5, lr}
 8004c12:	680d      	ldr	r5, [r1, #0]
 8004c14:	4c04      	ldr	r4, [pc, #16]	; (8004c28 <ros::normalizeSecNSec(unsigned long&, unsigned long&)+0x18>)
 8004c16:	6802      	ldr	r2, [r0, #0]
 8004c18:	fbb5 f3f4 	udiv	r3, r5, r4
 8004c1c:	441a      	add	r2, r3
 8004c1e:	fb04 5313 	mls	r3, r4, r3, r5
 8004c22:	6002      	str	r2, [r0, #0]
 8004c24:	600b      	str	r3, [r1, #0]
 8004c26:	bd30      	pop	{r4, r5, pc}
 8004c28:	3b9aca00 	.word	0x3b9aca00

08004c2c <ros::Time::fromNSec(long)>:
 8004c2c:	4a06      	ldr	r2, [pc, #24]	; (8004c48 <ros::Time::fromNSec(long)+0x1c>)
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	fb91 f3f2 	sdiv	r3, r1, r2
 8004c34:	6003      	str	r3, [r0, #0]
 8004c36:	fb02 1313 	mls	r3, r2, r3, r1
 8004c3a:	4601      	mov	r1, r0
 8004c3c:	f841 3f04 	str.w	r3, [r1, #4]!
 8004c40:	f7ff ffe6 	bl	8004c10 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	bf00      	nop
 8004c48:	3b9aca00 	.word	0x3b9aca00

08004c4c <ros::Time::operator+=(ros::Duration const&)>:
 8004c4c:	6802      	ldr	r2, [r0, #0]
 8004c4e:	680b      	ldr	r3, [r1, #0]
 8004c50:	b510      	push	{r4, lr}
 8004c52:	4413      	add	r3, r2
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	684b      	ldr	r3, [r1, #4]
 8004c58:	4601      	mov	r1, r0
 8004c5a:	6842      	ldr	r2, [r0, #4]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f841 3f04 	str.w	r3, [r1, #4]!
 8004c62:	f7ff ffd5 	bl	8004c10 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 8004c66:	bd10      	pop	{r4, pc}

08004c68 <ros::Time::operator-=(ros::Duration const&)>:
 8004c68:	6803      	ldr	r3, [r0, #0]
 8004c6a:	680a      	ldr	r2, [r1, #0]
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	684a      	ldr	r2, [r1, #4]
 8004c72:	4601      	mov	r1, r0
 8004c74:	6003      	str	r3, [r0, #0]
 8004c76:	6843      	ldr	r3, [r0, #4]
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	f841 3f04 	str.w	r3, [r1, #4]!
 8004c7e:	f7ff ffc7 	bl	8004c10 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 8004c82:	bd10      	pop	{r4, pc}

08004c84 <__aeabi_drsub>:
 8004c84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004c88:	e002      	b.n	8004c90 <__adddf3>
 8004c8a:	bf00      	nop

08004c8c <__aeabi_dsub>:
 8004c8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004c90 <__adddf3>:
 8004c90:	b530      	push	{r4, r5, lr}
 8004c92:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004c96:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004c9a:	ea94 0f05 	teq	r4, r5
 8004c9e:	bf08      	it	eq
 8004ca0:	ea90 0f02 	teqeq	r0, r2
 8004ca4:	bf1f      	itttt	ne
 8004ca6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004caa:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004cae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004cb2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004cb6:	f000 80e2 	beq.w	8004e7e <__adddf3+0x1ee>
 8004cba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004cbe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004cc2:	bfb8      	it	lt
 8004cc4:	426d      	neglt	r5, r5
 8004cc6:	dd0c      	ble.n	8004ce2 <__adddf3+0x52>
 8004cc8:	442c      	add	r4, r5
 8004cca:	ea80 0202 	eor.w	r2, r0, r2
 8004cce:	ea81 0303 	eor.w	r3, r1, r3
 8004cd2:	ea82 0000 	eor.w	r0, r2, r0
 8004cd6:	ea83 0101 	eor.w	r1, r3, r1
 8004cda:	ea80 0202 	eor.w	r2, r0, r2
 8004cde:	ea81 0303 	eor.w	r3, r1, r3
 8004ce2:	2d36      	cmp	r5, #54	; 0x36
 8004ce4:	bf88      	it	hi
 8004ce6:	bd30      	pophi	{r4, r5, pc}
 8004ce8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004cec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004cf0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004cf4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004cf8:	d002      	beq.n	8004d00 <__adddf3+0x70>
 8004cfa:	4240      	negs	r0, r0
 8004cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004d00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004d04:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004d08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004d0c:	d002      	beq.n	8004d14 <__adddf3+0x84>
 8004d0e:	4252      	negs	r2, r2
 8004d10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004d14:	ea94 0f05 	teq	r4, r5
 8004d18:	f000 80a7 	beq.w	8004e6a <__adddf3+0x1da>
 8004d1c:	f1a4 0401 	sub.w	r4, r4, #1
 8004d20:	f1d5 0e20 	rsbs	lr, r5, #32
 8004d24:	db0d      	blt.n	8004d42 <__adddf3+0xb2>
 8004d26:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004d2a:	fa22 f205 	lsr.w	r2, r2, r5
 8004d2e:	1880      	adds	r0, r0, r2
 8004d30:	f141 0100 	adc.w	r1, r1, #0
 8004d34:	fa03 f20e 	lsl.w	r2, r3, lr
 8004d38:	1880      	adds	r0, r0, r2
 8004d3a:	fa43 f305 	asr.w	r3, r3, r5
 8004d3e:	4159      	adcs	r1, r3
 8004d40:	e00e      	b.n	8004d60 <__adddf3+0xd0>
 8004d42:	f1a5 0520 	sub.w	r5, r5, #32
 8004d46:	f10e 0e20 	add.w	lr, lr, #32
 8004d4a:	2a01      	cmp	r2, #1
 8004d4c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004d50:	bf28      	it	cs
 8004d52:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004d56:	fa43 f305 	asr.w	r3, r3, r5
 8004d5a:	18c0      	adds	r0, r0, r3
 8004d5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004d60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004d64:	d507      	bpl.n	8004d76 <__adddf3+0xe6>
 8004d66:	f04f 0e00 	mov.w	lr, #0
 8004d6a:	f1dc 0c00 	rsbs	ip, ip, #0
 8004d6e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004d72:	eb6e 0101 	sbc.w	r1, lr, r1
 8004d76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004d7a:	d31b      	bcc.n	8004db4 <__adddf3+0x124>
 8004d7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004d80:	d30c      	bcc.n	8004d9c <__adddf3+0x10c>
 8004d82:	0849      	lsrs	r1, r1, #1
 8004d84:	ea5f 0030 	movs.w	r0, r0, rrx
 8004d88:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004d8c:	f104 0401 	add.w	r4, r4, #1
 8004d90:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004d94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004d98:	f080 809a 	bcs.w	8004ed0 <__adddf3+0x240>
 8004d9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004da0:	bf08      	it	eq
 8004da2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004da6:	f150 0000 	adcs.w	r0, r0, #0
 8004daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004dae:	ea41 0105 	orr.w	r1, r1, r5
 8004db2:	bd30      	pop	{r4, r5, pc}
 8004db4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004db8:	4140      	adcs	r0, r0
 8004dba:	eb41 0101 	adc.w	r1, r1, r1
 8004dbe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004dc2:	f1a4 0401 	sub.w	r4, r4, #1
 8004dc6:	d1e9      	bne.n	8004d9c <__adddf3+0x10c>
 8004dc8:	f091 0f00 	teq	r1, #0
 8004dcc:	bf04      	itt	eq
 8004dce:	4601      	moveq	r1, r0
 8004dd0:	2000      	moveq	r0, #0
 8004dd2:	fab1 f381 	clz	r3, r1
 8004dd6:	bf08      	it	eq
 8004dd8:	3320      	addeq	r3, #32
 8004dda:	f1a3 030b 	sub.w	r3, r3, #11
 8004dde:	f1b3 0220 	subs.w	r2, r3, #32
 8004de2:	da0c      	bge.n	8004dfe <__adddf3+0x16e>
 8004de4:	320c      	adds	r2, #12
 8004de6:	dd08      	ble.n	8004dfa <__adddf3+0x16a>
 8004de8:	f102 0c14 	add.w	ip, r2, #20
 8004dec:	f1c2 020c 	rsb	r2, r2, #12
 8004df0:	fa01 f00c 	lsl.w	r0, r1, ip
 8004df4:	fa21 f102 	lsr.w	r1, r1, r2
 8004df8:	e00c      	b.n	8004e14 <__adddf3+0x184>
 8004dfa:	f102 0214 	add.w	r2, r2, #20
 8004dfe:	bfd8      	it	le
 8004e00:	f1c2 0c20 	rsble	ip, r2, #32
 8004e04:	fa01 f102 	lsl.w	r1, r1, r2
 8004e08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004e0c:	bfdc      	itt	le
 8004e0e:	ea41 010c 	orrle.w	r1, r1, ip
 8004e12:	4090      	lslle	r0, r2
 8004e14:	1ae4      	subs	r4, r4, r3
 8004e16:	bfa2      	ittt	ge
 8004e18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004e1c:	4329      	orrge	r1, r5
 8004e1e:	bd30      	popge	{r4, r5, pc}
 8004e20:	ea6f 0404 	mvn.w	r4, r4
 8004e24:	3c1f      	subs	r4, #31
 8004e26:	da1c      	bge.n	8004e62 <__adddf3+0x1d2>
 8004e28:	340c      	adds	r4, #12
 8004e2a:	dc0e      	bgt.n	8004e4a <__adddf3+0x1ba>
 8004e2c:	f104 0414 	add.w	r4, r4, #20
 8004e30:	f1c4 0220 	rsb	r2, r4, #32
 8004e34:	fa20 f004 	lsr.w	r0, r0, r4
 8004e38:	fa01 f302 	lsl.w	r3, r1, r2
 8004e3c:	ea40 0003 	orr.w	r0, r0, r3
 8004e40:	fa21 f304 	lsr.w	r3, r1, r4
 8004e44:	ea45 0103 	orr.w	r1, r5, r3
 8004e48:	bd30      	pop	{r4, r5, pc}
 8004e4a:	f1c4 040c 	rsb	r4, r4, #12
 8004e4e:	f1c4 0220 	rsb	r2, r4, #32
 8004e52:	fa20 f002 	lsr.w	r0, r0, r2
 8004e56:	fa01 f304 	lsl.w	r3, r1, r4
 8004e5a:	ea40 0003 	orr.w	r0, r0, r3
 8004e5e:	4629      	mov	r1, r5
 8004e60:	bd30      	pop	{r4, r5, pc}
 8004e62:	fa21 f004 	lsr.w	r0, r1, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	bd30      	pop	{r4, r5, pc}
 8004e6a:	f094 0f00 	teq	r4, #0
 8004e6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004e72:	bf06      	itte	eq
 8004e74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004e78:	3401      	addeq	r4, #1
 8004e7a:	3d01      	subne	r5, #1
 8004e7c:	e74e      	b.n	8004d1c <__adddf3+0x8c>
 8004e7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004e82:	bf18      	it	ne
 8004e84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004e88:	d029      	beq.n	8004ede <__adddf3+0x24e>
 8004e8a:	ea94 0f05 	teq	r4, r5
 8004e8e:	bf08      	it	eq
 8004e90:	ea90 0f02 	teqeq	r0, r2
 8004e94:	d005      	beq.n	8004ea2 <__adddf3+0x212>
 8004e96:	ea54 0c00 	orrs.w	ip, r4, r0
 8004e9a:	bf04      	itt	eq
 8004e9c:	4619      	moveq	r1, r3
 8004e9e:	4610      	moveq	r0, r2
 8004ea0:	bd30      	pop	{r4, r5, pc}
 8004ea2:	ea91 0f03 	teq	r1, r3
 8004ea6:	bf1e      	ittt	ne
 8004ea8:	2100      	movne	r1, #0
 8004eaa:	2000      	movne	r0, #0
 8004eac:	bd30      	popne	{r4, r5, pc}
 8004eae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004eb2:	d105      	bne.n	8004ec0 <__adddf3+0x230>
 8004eb4:	0040      	lsls	r0, r0, #1
 8004eb6:	4149      	adcs	r1, r1
 8004eb8:	bf28      	it	cs
 8004eba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004ebe:	bd30      	pop	{r4, r5, pc}
 8004ec0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004ec4:	bf3c      	itt	cc
 8004ec6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004eca:	bd30      	popcc	{r4, r5, pc}
 8004ecc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004ed0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004ed4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ed8:	f04f 0000 	mov.w	r0, #0
 8004edc:	bd30      	pop	{r4, r5, pc}
 8004ede:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004ee2:	bf1a      	itte	ne
 8004ee4:	4619      	movne	r1, r3
 8004ee6:	4610      	movne	r0, r2
 8004ee8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004eec:	bf1c      	itt	ne
 8004eee:	460b      	movne	r3, r1
 8004ef0:	4602      	movne	r2, r0
 8004ef2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004ef6:	bf06      	itte	eq
 8004ef8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004efc:	ea91 0f03 	teqeq	r1, r3
 8004f00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004f04:	bd30      	pop	{r4, r5, pc}
 8004f06:	bf00      	nop

08004f08 <__aeabi_ui2d>:
 8004f08:	f090 0f00 	teq	r0, #0
 8004f0c:	bf04      	itt	eq
 8004f0e:	2100      	moveq	r1, #0
 8004f10:	4770      	bxeq	lr
 8004f12:	b530      	push	{r4, r5, lr}
 8004f14:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004f18:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004f1c:	f04f 0500 	mov.w	r5, #0
 8004f20:	f04f 0100 	mov.w	r1, #0
 8004f24:	e750      	b.n	8004dc8 <__adddf3+0x138>
 8004f26:	bf00      	nop

08004f28 <__aeabi_i2d>:
 8004f28:	f090 0f00 	teq	r0, #0
 8004f2c:	bf04      	itt	eq
 8004f2e:	2100      	moveq	r1, #0
 8004f30:	4770      	bxeq	lr
 8004f32:	b530      	push	{r4, r5, lr}
 8004f34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004f38:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004f3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004f40:	bf48      	it	mi
 8004f42:	4240      	negmi	r0, r0
 8004f44:	f04f 0100 	mov.w	r1, #0
 8004f48:	e73e      	b.n	8004dc8 <__adddf3+0x138>
 8004f4a:	bf00      	nop

08004f4c <__aeabi_f2d>:
 8004f4c:	0042      	lsls	r2, r0, #1
 8004f4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004f52:	ea4f 0131 	mov.w	r1, r1, rrx
 8004f56:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004f5a:	bf1f      	itttt	ne
 8004f5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004f60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004f64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004f68:	4770      	bxne	lr
 8004f6a:	f092 0f00 	teq	r2, #0
 8004f6e:	bf14      	ite	ne
 8004f70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004f74:	4770      	bxeq	lr
 8004f76:	b530      	push	{r4, r5, lr}
 8004f78:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004f7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004f80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004f84:	e720      	b.n	8004dc8 <__adddf3+0x138>
 8004f86:	bf00      	nop

08004f88 <__aeabi_ul2d>:
 8004f88:	ea50 0201 	orrs.w	r2, r0, r1
 8004f8c:	bf08      	it	eq
 8004f8e:	4770      	bxeq	lr
 8004f90:	b530      	push	{r4, r5, lr}
 8004f92:	f04f 0500 	mov.w	r5, #0
 8004f96:	e00a      	b.n	8004fae <__aeabi_l2d+0x16>

08004f98 <__aeabi_l2d>:
 8004f98:	ea50 0201 	orrs.w	r2, r0, r1
 8004f9c:	bf08      	it	eq
 8004f9e:	4770      	bxeq	lr
 8004fa0:	b530      	push	{r4, r5, lr}
 8004fa2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004fa6:	d502      	bpl.n	8004fae <__aeabi_l2d+0x16>
 8004fa8:	4240      	negs	r0, r0
 8004faa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004fae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004fb2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004fb6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004fba:	f43f aedc 	beq.w	8004d76 <__adddf3+0xe6>
 8004fbe:	f04f 0203 	mov.w	r2, #3
 8004fc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004fc6:	bf18      	it	ne
 8004fc8:	3203      	addne	r2, #3
 8004fca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004fce:	bf18      	it	ne
 8004fd0:	3203      	addne	r2, #3
 8004fd2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004fd6:	f1c2 0320 	rsb	r3, r2, #32
 8004fda:	fa00 fc03 	lsl.w	ip, r0, r3
 8004fde:	fa20 f002 	lsr.w	r0, r0, r2
 8004fe2:	fa01 fe03 	lsl.w	lr, r1, r3
 8004fe6:	ea40 000e 	orr.w	r0, r0, lr
 8004fea:	fa21 f102 	lsr.w	r1, r1, r2
 8004fee:	4414      	add	r4, r2
 8004ff0:	e6c1      	b.n	8004d76 <__adddf3+0xe6>
 8004ff2:	bf00      	nop

08004ff4 <__aeabi_dmul>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004ffa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004ffe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005002:	bf1d      	ittte	ne
 8005004:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005008:	ea94 0f0c 	teqne	r4, ip
 800500c:	ea95 0f0c 	teqne	r5, ip
 8005010:	f000 f8de 	bleq	80051d0 <__aeabi_dmul+0x1dc>
 8005014:	442c      	add	r4, r5
 8005016:	ea81 0603 	eor.w	r6, r1, r3
 800501a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800501e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005022:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005026:	bf18      	it	ne
 8005028:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800502c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005034:	d038      	beq.n	80050a8 <__aeabi_dmul+0xb4>
 8005036:	fba0 ce02 	umull	ip, lr, r0, r2
 800503a:	f04f 0500 	mov.w	r5, #0
 800503e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005042:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005046:	fbe0 e503 	umlal	lr, r5, r0, r3
 800504a:	f04f 0600 	mov.w	r6, #0
 800504e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005052:	f09c 0f00 	teq	ip, #0
 8005056:	bf18      	it	ne
 8005058:	f04e 0e01 	orrne.w	lr, lr, #1
 800505c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005060:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005064:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005068:	d204      	bcs.n	8005074 <__aeabi_dmul+0x80>
 800506a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800506e:	416d      	adcs	r5, r5
 8005070:	eb46 0606 	adc.w	r6, r6, r6
 8005074:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005078:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800507c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8005080:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8005084:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8005088:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800508c:	bf88      	it	hi
 800508e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005092:	d81e      	bhi.n	80050d2 <__aeabi_dmul+0xde>
 8005094:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005098:	bf08      	it	eq
 800509a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800509e:	f150 0000 	adcs.w	r0, r0, #0
 80050a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80050ac:	ea46 0101 	orr.w	r1, r6, r1
 80050b0:	ea40 0002 	orr.w	r0, r0, r2
 80050b4:	ea81 0103 	eor.w	r1, r1, r3
 80050b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80050bc:	bfc2      	ittt	gt
 80050be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80050c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80050c6:	bd70      	popgt	{r4, r5, r6, pc}
 80050c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80050cc:	f04f 0e00 	mov.w	lr, #0
 80050d0:	3c01      	subs	r4, #1
 80050d2:	f300 80ab 	bgt.w	800522c <__aeabi_dmul+0x238>
 80050d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80050da:	bfde      	ittt	le
 80050dc:	2000      	movle	r0, #0
 80050de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80050e2:	bd70      	pople	{r4, r5, r6, pc}
 80050e4:	f1c4 0400 	rsb	r4, r4, #0
 80050e8:	3c20      	subs	r4, #32
 80050ea:	da35      	bge.n	8005158 <__aeabi_dmul+0x164>
 80050ec:	340c      	adds	r4, #12
 80050ee:	dc1b      	bgt.n	8005128 <__aeabi_dmul+0x134>
 80050f0:	f104 0414 	add.w	r4, r4, #20
 80050f4:	f1c4 0520 	rsb	r5, r4, #32
 80050f8:	fa00 f305 	lsl.w	r3, r0, r5
 80050fc:	fa20 f004 	lsr.w	r0, r0, r4
 8005100:	fa01 f205 	lsl.w	r2, r1, r5
 8005104:	ea40 0002 	orr.w	r0, r0, r2
 8005108:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800510c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005110:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005114:	fa21 f604 	lsr.w	r6, r1, r4
 8005118:	eb42 0106 	adc.w	r1, r2, r6
 800511c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005120:	bf08      	it	eq
 8005122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	f1c4 040c 	rsb	r4, r4, #12
 800512c:	f1c4 0520 	rsb	r5, r4, #32
 8005130:	fa00 f304 	lsl.w	r3, r0, r4
 8005134:	fa20 f005 	lsr.w	r0, r0, r5
 8005138:	fa01 f204 	lsl.w	r2, r1, r4
 800513c:	ea40 0002 	orr.w	r0, r0, r2
 8005140:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005144:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005148:	f141 0100 	adc.w	r1, r1, #0
 800514c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005150:	bf08      	it	eq
 8005152:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	f1c4 0520 	rsb	r5, r4, #32
 800515c:	fa00 f205 	lsl.w	r2, r0, r5
 8005160:	ea4e 0e02 	orr.w	lr, lr, r2
 8005164:	fa20 f304 	lsr.w	r3, r0, r4
 8005168:	fa01 f205 	lsl.w	r2, r1, r5
 800516c:	ea43 0302 	orr.w	r3, r3, r2
 8005170:	fa21 f004 	lsr.w	r0, r1, r4
 8005174:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005178:	fa21 f204 	lsr.w	r2, r1, r4
 800517c:	ea20 0002 	bic.w	r0, r0, r2
 8005180:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005184:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005188:	bf08      	it	eq
 800518a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	f094 0f00 	teq	r4, #0
 8005194:	d10f      	bne.n	80051b6 <__aeabi_dmul+0x1c2>
 8005196:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800519a:	0040      	lsls	r0, r0, #1
 800519c:	eb41 0101 	adc.w	r1, r1, r1
 80051a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80051a4:	bf08      	it	eq
 80051a6:	3c01      	subeq	r4, #1
 80051a8:	d0f7      	beq.n	800519a <__aeabi_dmul+0x1a6>
 80051aa:	ea41 0106 	orr.w	r1, r1, r6
 80051ae:	f095 0f00 	teq	r5, #0
 80051b2:	bf18      	it	ne
 80051b4:	4770      	bxne	lr
 80051b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80051ba:	0052      	lsls	r2, r2, #1
 80051bc:	eb43 0303 	adc.w	r3, r3, r3
 80051c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80051c4:	bf08      	it	eq
 80051c6:	3d01      	subeq	r5, #1
 80051c8:	d0f7      	beq.n	80051ba <__aeabi_dmul+0x1c6>
 80051ca:	ea43 0306 	orr.w	r3, r3, r6
 80051ce:	4770      	bx	lr
 80051d0:	ea94 0f0c 	teq	r4, ip
 80051d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80051d8:	bf18      	it	ne
 80051da:	ea95 0f0c 	teqne	r5, ip
 80051de:	d00c      	beq.n	80051fa <__aeabi_dmul+0x206>
 80051e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80051e4:	bf18      	it	ne
 80051e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80051ea:	d1d1      	bne.n	8005190 <__aeabi_dmul+0x19c>
 80051ec:	ea81 0103 	eor.w	r1, r1, r3
 80051f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	bd70      	pop	{r4, r5, r6, pc}
 80051fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80051fe:	bf06      	itte	eq
 8005200:	4610      	moveq	r0, r2
 8005202:	4619      	moveq	r1, r3
 8005204:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005208:	d019      	beq.n	800523e <__aeabi_dmul+0x24a>
 800520a:	ea94 0f0c 	teq	r4, ip
 800520e:	d102      	bne.n	8005216 <__aeabi_dmul+0x222>
 8005210:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005214:	d113      	bne.n	800523e <__aeabi_dmul+0x24a>
 8005216:	ea95 0f0c 	teq	r5, ip
 800521a:	d105      	bne.n	8005228 <__aeabi_dmul+0x234>
 800521c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005220:	bf1c      	itt	ne
 8005222:	4610      	movne	r0, r2
 8005224:	4619      	movne	r1, r3
 8005226:	d10a      	bne.n	800523e <__aeabi_dmul+0x24a>
 8005228:	ea81 0103 	eor.w	r1, r1, r3
 800522c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005230:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005234:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005238:	f04f 0000 	mov.w	r0, #0
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005242:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005246:	bd70      	pop	{r4, r5, r6, pc}

08005248 <__aeabi_ddiv>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800524e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005252:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005256:	bf1d      	ittte	ne
 8005258:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800525c:	ea94 0f0c 	teqne	r4, ip
 8005260:	ea95 0f0c 	teqne	r5, ip
 8005264:	f000 f8a7 	bleq	80053b6 <__aeabi_ddiv+0x16e>
 8005268:	eba4 0405 	sub.w	r4, r4, r5
 800526c:	ea81 0e03 	eor.w	lr, r1, r3
 8005270:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005274:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005278:	f000 8088 	beq.w	800538c <__aeabi_ddiv+0x144>
 800527c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005280:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005284:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005288:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800528c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005290:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005294:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005298:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800529c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80052a0:	429d      	cmp	r5, r3
 80052a2:	bf08      	it	eq
 80052a4:	4296      	cmpeq	r6, r2
 80052a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80052aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80052ae:	d202      	bcs.n	80052b6 <__aeabi_ddiv+0x6e>
 80052b0:	085b      	lsrs	r3, r3, #1
 80052b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80052b6:	1ab6      	subs	r6, r6, r2
 80052b8:	eb65 0503 	sbc.w	r5, r5, r3
 80052bc:	085b      	lsrs	r3, r3, #1
 80052be:	ea4f 0232 	mov.w	r2, r2, rrx
 80052c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80052c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80052ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80052ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80052d2:	bf22      	ittt	cs
 80052d4:	1ab6      	subcs	r6, r6, r2
 80052d6:	4675      	movcs	r5, lr
 80052d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	ea4f 0232 	mov.w	r2, r2, rrx
 80052e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80052e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80052ea:	bf22      	ittt	cs
 80052ec:	1ab6      	subcs	r6, r6, r2
 80052ee:	4675      	movcs	r5, lr
 80052f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80052fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80052fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005302:	bf22      	ittt	cs
 8005304:	1ab6      	subcs	r6, r6, r2
 8005306:	4675      	movcs	r5, lr
 8005308:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005312:	ebb6 0e02 	subs.w	lr, r6, r2
 8005316:	eb75 0e03 	sbcs.w	lr, r5, r3
 800531a:	bf22      	ittt	cs
 800531c:	1ab6      	subcs	r6, r6, r2
 800531e:	4675      	movcs	r5, lr
 8005320:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005324:	ea55 0e06 	orrs.w	lr, r5, r6
 8005328:	d018      	beq.n	800535c <__aeabi_ddiv+0x114>
 800532a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800532e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005332:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005336:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800533a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800533e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005342:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005346:	d1c0      	bne.n	80052ca <__aeabi_ddiv+0x82>
 8005348:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800534c:	d10b      	bne.n	8005366 <__aeabi_ddiv+0x11e>
 800534e:	ea41 0100 	orr.w	r1, r1, r0
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800535a:	e7b6      	b.n	80052ca <__aeabi_ddiv+0x82>
 800535c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005360:	bf04      	itt	eq
 8005362:	4301      	orreq	r1, r0
 8005364:	2000      	moveq	r0, #0
 8005366:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800536a:	bf88      	it	hi
 800536c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005370:	f63f aeaf 	bhi.w	80050d2 <__aeabi_dmul+0xde>
 8005374:	ebb5 0c03 	subs.w	ip, r5, r3
 8005378:	bf04      	itt	eq
 800537a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800537e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005382:	f150 0000 	adcs.w	r0, r0, #0
 8005386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005390:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005394:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005398:	bfc2      	ittt	gt
 800539a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800539e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80053a2:	bd70      	popgt	{r4, r5, r6, pc}
 80053a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80053a8:	f04f 0e00 	mov.w	lr, #0
 80053ac:	3c01      	subs	r4, #1
 80053ae:	e690      	b.n	80050d2 <__aeabi_dmul+0xde>
 80053b0:	ea45 0e06 	orr.w	lr, r5, r6
 80053b4:	e68d      	b.n	80050d2 <__aeabi_dmul+0xde>
 80053b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80053ba:	ea94 0f0c 	teq	r4, ip
 80053be:	bf08      	it	eq
 80053c0:	ea95 0f0c 	teqeq	r5, ip
 80053c4:	f43f af3b 	beq.w	800523e <__aeabi_dmul+0x24a>
 80053c8:	ea94 0f0c 	teq	r4, ip
 80053cc:	d10a      	bne.n	80053e4 <__aeabi_ddiv+0x19c>
 80053ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80053d2:	f47f af34 	bne.w	800523e <__aeabi_dmul+0x24a>
 80053d6:	ea95 0f0c 	teq	r5, ip
 80053da:	f47f af25 	bne.w	8005228 <__aeabi_dmul+0x234>
 80053de:	4610      	mov	r0, r2
 80053e0:	4619      	mov	r1, r3
 80053e2:	e72c      	b.n	800523e <__aeabi_dmul+0x24a>
 80053e4:	ea95 0f0c 	teq	r5, ip
 80053e8:	d106      	bne.n	80053f8 <__aeabi_ddiv+0x1b0>
 80053ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80053ee:	f43f aefd 	beq.w	80051ec <__aeabi_dmul+0x1f8>
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	e722      	b.n	800523e <__aeabi_dmul+0x24a>
 80053f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80053fc:	bf18      	it	ne
 80053fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005402:	f47f aec5 	bne.w	8005190 <__aeabi_dmul+0x19c>
 8005406:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800540a:	f47f af0d 	bne.w	8005228 <__aeabi_dmul+0x234>
 800540e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005412:	f47f aeeb 	bne.w	80051ec <__aeabi_dmul+0x1f8>
 8005416:	e712      	b.n	800523e <__aeabi_dmul+0x24a>

08005418 <__gedf2>:
 8005418:	f04f 3cff 	mov.w	ip, #4294967295
 800541c:	e006      	b.n	800542c <__cmpdf2+0x4>
 800541e:	bf00      	nop

08005420 <__ledf2>:
 8005420:	f04f 0c01 	mov.w	ip, #1
 8005424:	e002      	b.n	800542c <__cmpdf2+0x4>
 8005426:	bf00      	nop

08005428 <__cmpdf2>:
 8005428:	f04f 0c01 	mov.w	ip, #1
 800542c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005430:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005438:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800543c:	bf18      	it	ne
 800543e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005442:	d01b      	beq.n	800547c <__cmpdf2+0x54>
 8005444:	b001      	add	sp, #4
 8005446:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800544a:	bf0c      	ite	eq
 800544c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005450:	ea91 0f03 	teqne	r1, r3
 8005454:	bf02      	ittt	eq
 8005456:	ea90 0f02 	teqeq	r0, r2
 800545a:	2000      	moveq	r0, #0
 800545c:	4770      	bxeq	lr
 800545e:	f110 0f00 	cmn.w	r0, #0
 8005462:	ea91 0f03 	teq	r1, r3
 8005466:	bf58      	it	pl
 8005468:	4299      	cmppl	r1, r3
 800546a:	bf08      	it	eq
 800546c:	4290      	cmpeq	r0, r2
 800546e:	bf2c      	ite	cs
 8005470:	17d8      	asrcs	r0, r3, #31
 8005472:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005476:	f040 0001 	orr.w	r0, r0, #1
 800547a:	4770      	bx	lr
 800547c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005480:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005484:	d102      	bne.n	800548c <__cmpdf2+0x64>
 8005486:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800548a:	d107      	bne.n	800549c <__cmpdf2+0x74>
 800548c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005490:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005494:	d1d6      	bne.n	8005444 <__cmpdf2+0x1c>
 8005496:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800549a:	d0d3      	beq.n	8005444 <__cmpdf2+0x1c>
 800549c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop

080054a4 <__aeabi_cdrcmple>:
 80054a4:	4684      	mov	ip, r0
 80054a6:	4610      	mov	r0, r2
 80054a8:	4662      	mov	r2, ip
 80054aa:	468c      	mov	ip, r1
 80054ac:	4619      	mov	r1, r3
 80054ae:	4663      	mov	r3, ip
 80054b0:	e000      	b.n	80054b4 <__aeabi_cdcmpeq>
 80054b2:	bf00      	nop

080054b4 <__aeabi_cdcmpeq>:
 80054b4:	b501      	push	{r0, lr}
 80054b6:	f7ff ffb7 	bl	8005428 <__cmpdf2>
 80054ba:	2800      	cmp	r0, #0
 80054bc:	bf48      	it	mi
 80054be:	f110 0f00 	cmnmi.w	r0, #0
 80054c2:	bd01      	pop	{r0, pc}

080054c4 <__aeabi_dcmpeq>:
 80054c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80054c8:	f7ff fff4 	bl	80054b4 <__aeabi_cdcmpeq>
 80054cc:	bf0c      	ite	eq
 80054ce:	2001      	moveq	r0, #1
 80054d0:	2000      	movne	r0, #0
 80054d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80054d6:	bf00      	nop

080054d8 <__aeabi_dcmplt>:
 80054d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80054dc:	f7ff ffea 	bl	80054b4 <__aeabi_cdcmpeq>
 80054e0:	bf34      	ite	cc
 80054e2:	2001      	movcc	r0, #1
 80054e4:	2000      	movcs	r0, #0
 80054e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80054ea:	bf00      	nop

080054ec <__aeabi_dcmple>:
 80054ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80054f0:	f7ff ffe0 	bl	80054b4 <__aeabi_cdcmpeq>
 80054f4:	bf94      	ite	ls
 80054f6:	2001      	movls	r0, #1
 80054f8:	2000      	movhi	r0, #0
 80054fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80054fe:	bf00      	nop

08005500 <__aeabi_dcmpge>:
 8005500:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005504:	f7ff ffce 	bl	80054a4 <__aeabi_cdrcmple>
 8005508:	bf94      	ite	ls
 800550a:	2001      	movls	r0, #1
 800550c:	2000      	movhi	r0, #0
 800550e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005512:	bf00      	nop

08005514 <__aeabi_dcmpgt>:
 8005514:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005518:	f7ff ffc4 	bl	80054a4 <__aeabi_cdrcmple>
 800551c:	bf34      	ite	cc
 800551e:	2001      	movcc	r0, #1
 8005520:	2000      	movcs	r0, #0
 8005522:	f85d fb08 	ldr.w	pc, [sp], #8
 8005526:	bf00      	nop

08005528 <__aeabi_d2iz>:
 8005528:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800552c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005530:	d215      	bcs.n	800555e <__aeabi_d2iz+0x36>
 8005532:	d511      	bpl.n	8005558 <__aeabi_d2iz+0x30>
 8005534:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005538:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800553c:	d912      	bls.n	8005564 <__aeabi_d2iz+0x3c>
 800553e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005542:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005546:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800554a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800554e:	fa23 f002 	lsr.w	r0, r3, r2
 8005552:	bf18      	it	ne
 8005554:	4240      	negne	r0, r0
 8005556:	4770      	bx	lr
 8005558:	f04f 0000 	mov.w	r0, #0
 800555c:	4770      	bx	lr
 800555e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005562:	d105      	bne.n	8005570 <__aeabi_d2iz+0x48>
 8005564:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005568:	bf08      	it	eq
 800556a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800556e:	4770      	bx	lr
 8005570:	f04f 0000 	mov.w	r0, #0
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop

08005578 <__aeabi_d2f>:
 8005578:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800557c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005580:	bf24      	itt	cs
 8005582:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005586:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800558a:	d90d      	bls.n	80055a8 <__aeabi_d2f+0x30>
 800558c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005590:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005594:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005598:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800559c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80055a0:	bf08      	it	eq
 80055a2:	f020 0001 	biceq.w	r0, r0, #1
 80055a6:	4770      	bx	lr
 80055a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80055ac:	d121      	bne.n	80055f2 <__aeabi_d2f+0x7a>
 80055ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80055b2:	bfbc      	itt	lt
 80055b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80055b8:	4770      	bxlt	lr
 80055ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80055c2:	f1c2 0218 	rsb	r2, r2, #24
 80055c6:	f1c2 0c20 	rsb	ip, r2, #32
 80055ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80055ce:	fa20 f002 	lsr.w	r0, r0, r2
 80055d2:	bf18      	it	ne
 80055d4:	f040 0001 	orrne.w	r0, r0, #1
 80055d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80055dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80055e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80055e4:	ea40 000c 	orr.w	r0, r0, ip
 80055e8:	fa23 f302 	lsr.w	r3, r3, r2
 80055ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80055f0:	e7cc      	b.n	800558c <__aeabi_d2f+0x14>
 80055f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80055f6:	d107      	bne.n	8005608 <__aeabi_d2f+0x90>
 80055f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80055fc:	bf1e      	ittt	ne
 80055fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005602:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005606:	4770      	bxne	lr
 8005608:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800560c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005610:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop

08005618 <__aeabi_frsub>:
 8005618:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800561c:	e002      	b.n	8005624 <__addsf3>
 800561e:	bf00      	nop

08005620 <__aeabi_fsub>:
 8005620:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08005624 <__addsf3>:
 8005624:	0042      	lsls	r2, r0, #1
 8005626:	bf1f      	itttt	ne
 8005628:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800562c:	ea92 0f03 	teqne	r2, r3
 8005630:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8005634:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005638:	d06a      	beq.n	8005710 <__addsf3+0xec>
 800563a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800563e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8005642:	bfc1      	itttt	gt
 8005644:	18d2      	addgt	r2, r2, r3
 8005646:	4041      	eorgt	r1, r0
 8005648:	4048      	eorgt	r0, r1
 800564a:	4041      	eorgt	r1, r0
 800564c:	bfb8      	it	lt
 800564e:	425b      	neglt	r3, r3
 8005650:	2b19      	cmp	r3, #25
 8005652:	bf88      	it	hi
 8005654:	4770      	bxhi	lr
 8005656:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800565a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800565e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005662:	bf18      	it	ne
 8005664:	4240      	negne	r0, r0
 8005666:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800566a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800566e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005672:	bf18      	it	ne
 8005674:	4249      	negne	r1, r1
 8005676:	ea92 0f03 	teq	r2, r3
 800567a:	d03f      	beq.n	80056fc <__addsf3+0xd8>
 800567c:	f1a2 0201 	sub.w	r2, r2, #1
 8005680:	fa41 fc03 	asr.w	ip, r1, r3
 8005684:	eb10 000c 	adds.w	r0, r0, ip
 8005688:	f1c3 0320 	rsb	r3, r3, #32
 800568c:	fa01 f103 	lsl.w	r1, r1, r3
 8005690:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005694:	d502      	bpl.n	800569c <__addsf3+0x78>
 8005696:	4249      	negs	r1, r1
 8005698:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800569c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80056a0:	d313      	bcc.n	80056ca <__addsf3+0xa6>
 80056a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80056a6:	d306      	bcc.n	80056b6 <__addsf3+0x92>
 80056a8:	0840      	lsrs	r0, r0, #1
 80056aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80056ae:	f102 0201 	add.w	r2, r2, #1
 80056b2:	2afe      	cmp	r2, #254	; 0xfe
 80056b4:	d251      	bcs.n	800575a <__addsf3+0x136>
 80056b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80056ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80056be:	bf08      	it	eq
 80056c0:	f020 0001 	biceq.w	r0, r0, #1
 80056c4:	ea40 0003 	orr.w	r0, r0, r3
 80056c8:	4770      	bx	lr
 80056ca:	0049      	lsls	r1, r1, #1
 80056cc:	eb40 0000 	adc.w	r0, r0, r0
 80056d0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80056d4:	f1a2 0201 	sub.w	r2, r2, #1
 80056d8:	d1ed      	bne.n	80056b6 <__addsf3+0x92>
 80056da:	fab0 fc80 	clz	ip, r0
 80056de:	f1ac 0c08 	sub.w	ip, ip, #8
 80056e2:	ebb2 020c 	subs.w	r2, r2, ip
 80056e6:	fa00 f00c 	lsl.w	r0, r0, ip
 80056ea:	bfaa      	itet	ge
 80056ec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80056f0:	4252      	neglt	r2, r2
 80056f2:	4318      	orrge	r0, r3
 80056f4:	bfbc      	itt	lt
 80056f6:	40d0      	lsrlt	r0, r2
 80056f8:	4318      	orrlt	r0, r3
 80056fa:	4770      	bx	lr
 80056fc:	f092 0f00 	teq	r2, #0
 8005700:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8005704:	bf06      	itte	eq
 8005706:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800570a:	3201      	addeq	r2, #1
 800570c:	3b01      	subne	r3, #1
 800570e:	e7b5      	b.n	800567c <__addsf3+0x58>
 8005710:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005714:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005718:	bf18      	it	ne
 800571a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800571e:	d021      	beq.n	8005764 <__addsf3+0x140>
 8005720:	ea92 0f03 	teq	r2, r3
 8005724:	d004      	beq.n	8005730 <__addsf3+0x10c>
 8005726:	f092 0f00 	teq	r2, #0
 800572a:	bf08      	it	eq
 800572c:	4608      	moveq	r0, r1
 800572e:	4770      	bx	lr
 8005730:	ea90 0f01 	teq	r0, r1
 8005734:	bf1c      	itt	ne
 8005736:	2000      	movne	r0, #0
 8005738:	4770      	bxne	lr
 800573a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800573e:	d104      	bne.n	800574a <__addsf3+0x126>
 8005740:	0040      	lsls	r0, r0, #1
 8005742:	bf28      	it	cs
 8005744:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005748:	4770      	bx	lr
 800574a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800574e:	bf3c      	itt	cc
 8005750:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8005754:	4770      	bxcc	lr
 8005756:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800575a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800575e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005762:	4770      	bx	lr
 8005764:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005768:	bf16      	itet	ne
 800576a:	4608      	movne	r0, r1
 800576c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8005770:	4601      	movne	r1, r0
 8005772:	0242      	lsls	r2, r0, #9
 8005774:	bf06      	itte	eq
 8005776:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800577a:	ea90 0f01 	teqeq	r0, r1
 800577e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8005782:	4770      	bx	lr

08005784 <__aeabi_ui2f>:
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	e004      	b.n	8005794 <__aeabi_i2f+0x8>
 800578a:	bf00      	nop

0800578c <__aeabi_i2f>:
 800578c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8005790:	bf48      	it	mi
 8005792:	4240      	negmi	r0, r0
 8005794:	ea5f 0c00 	movs.w	ip, r0
 8005798:	bf08      	it	eq
 800579a:	4770      	bxeq	lr
 800579c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80057a0:	4601      	mov	r1, r0
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	e01c      	b.n	80057e2 <__aeabi_l2f+0x2a>

080057a8 <__aeabi_ul2f>:
 80057a8:	ea50 0201 	orrs.w	r2, r0, r1
 80057ac:	bf08      	it	eq
 80057ae:	4770      	bxeq	lr
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	e00a      	b.n	80057cc <__aeabi_l2f+0x14>
 80057b6:	bf00      	nop

080057b8 <__aeabi_l2f>:
 80057b8:	ea50 0201 	orrs.w	r2, r0, r1
 80057bc:	bf08      	it	eq
 80057be:	4770      	bxeq	lr
 80057c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80057c4:	d502      	bpl.n	80057cc <__aeabi_l2f+0x14>
 80057c6:	4240      	negs	r0, r0
 80057c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80057cc:	ea5f 0c01 	movs.w	ip, r1
 80057d0:	bf02      	ittt	eq
 80057d2:	4684      	moveq	ip, r0
 80057d4:	4601      	moveq	r1, r0
 80057d6:	2000      	moveq	r0, #0
 80057d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80057dc:	bf08      	it	eq
 80057de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80057e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80057e6:	fabc f28c 	clz	r2, ip
 80057ea:	3a08      	subs	r2, #8
 80057ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80057f0:	db10      	blt.n	8005814 <__aeabi_l2f+0x5c>
 80057f2:	fa01 fc02 	lsl.w	ip, r1, r2
 80057f6:	4463      	add	r3, ip
 80057f8:	fa00 fc02 	lsl.w	ip, r0, r2
 80057fc:	f1c2 0220 	rsb	r2, r2, #32
 8005800:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005804:	fa20 f202 	lsr.w	r2, r0, r2
 8005808:	eb43 0002 	adc.w	r0, r3, r2
 800580c:	bf08      	it	eq
 800580e:	f020 0001 	biceq.w	r0, r0, #1
 8005812:	4770      	bx	lr
 8005814:	f102 0220 	add.w	r2, r2, #32
 8005818:	fa01 fc02 	lsl.w	ip, r1, r2
 800581c:	f1c2 0220 	rsb	r2, r2, #32
 8005820:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8005824:	fa21 f202 	lsr.w	r2, r1, r2
 8005828:	eb43 0002 	adc.w	r0, r3, r2
 800582c:	bf08      	it	eq
 800582e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005832:	4770      	bx	lr

08005834 <__aeabi_fmul>:
 8005834:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005838:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800583c:	bf1e      	ittt	ne
 800583e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005842:	ea92 0f0c 	teqne	r2, ip
 8005846:	ea93 0f0c 	teqne	r3, ip
 800584a:	d06f      	beq.n	800592c <__aeabi_fmul+0xf8>
 800584c:	441a      	add	r2, r3
 800584e:	ea80 0c01 	eor.w	ip, r0, r1
 8005852:	0240      	lsls	r0, r0, #9
 8005854:	bf18      	it	ne
 8005856:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800585a:	d01e      	beq.n	800589a <__aeabi_fmul+0x66>
 800585c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005860:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8005864:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005868:	fba0 3101 	umull	r3, r1, r0, r1
 800586c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005870:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005874:	bf3e      	ittt	cc
 8005876:	0049      	lslcc	r1, r1, #1
 8005878:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800587c:	005b      	lslcc	r3, r3, #1
 800587e:	ea40 0001 	orr.w	r0, r0, r1
 8005882:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8005886:	2afd      	cmp	r2, #253	; 0xfd
 8005888:	d81d      	bhi.n	80058c6 <__aeabi_fmul+0x92>
 800588a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800588e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005892:	bf08      	it	eq
 8005894:	f020 0001 	biceq.w	r0, r0, #1
 8005898:	4770      	bx	lr
 800589a:	f090 0f00 	teq	r0, #0
 800589e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80058a2:	bf08      	it	eq
 80058a4:	0249      	lsleq	r1, r1, #9
 80058a6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80058aa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80058ae:	3a7f      	subs	r2, #127	; 0x7f
 80058b0:	bfc2      	ittt	gt
 80058b2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80058b6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80058ba:	4770      	bxgt	lr
 80058bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	3a01      	subs	r2, #1
 80058c6:	dc5d      	bgt.n	8005984 <__aeabi_fmul+0x150>
 80058c8:	f112 0f19 	cmn.w	r2, #25
 80058cc:	bfdc      	itt	le
 80058ce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80058d2:	4770      	bxle	lr
 80058d4:	f1c2 0200 	rsb	r2, r2, #0
 80058d8:	0041      	lsls	r1, r0, #1
 80058da:	fa21 f102 	lsr.w	r1, r1, r2
 80058de:	f1c2 0220 	rsb	r2, r2, #32
 80058e2:	fa00 fc02 	lsl.w	ip, r0, r2
 80058e6:	ea5f 0031 	movs.w	r0, r1, rrx
 80058ea:	f140 0000 	adc.w	r0, r0, #0
 80058ee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80058f2:	bf08      	it	eq
 80058f4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80058f8:	4770      	bx	lr
 80058fa:	f092 0f00 	teq	r2, #0
 80058fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005902:	bf02      	ittt	eq
 8005904:	0040      	lsleq	r0, r0, #1
 8005906:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800590a:	3a01      	subeq	r2, #1
 800590c:	d0f9      	beq.n	8005902 <__aeabi_fmul+0xce>
 800590e:	ea40 000c 	orr.w	r0, r0, ip
 8005912:	f093 0f00 	teq	r3, #0
 8005916:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800591a:	bf02      	ittt	eq
 800591c:	0049      	lsleq	r1, r1, #1
 800591e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005922:	3b01      	subeq	r3, #1
 8005924:	d0f9      	beq.n	800591a <__aeabi_fmul+0xe6>
 8005926:	ea41 010c 	orr.w	r1, r1, ip
 800592a:	e78f      	b.n	800584c <__aeabi_fmul+0x18>
 800592c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005930:	ea92 0f0c 	teq	r2, ip
 8005934:	bf18      	it	ne
 8005936:	ea93 0f0c 	teqne	r3, ip
 800593a:	d00a      	beq.n	8005952 <__aeabi_fmul+0x11e>
 800593c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005940:	bf18      	it	ne
 8005942:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005946:	d1d8      	bne.n	80058fa <__aeabi_fmul+0xc6>
 8005948:	ea80 0001 	eor.w	r0, r0, r1
 800594c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005950:	4770      	bx	lr
 8005952:	f090 0f00 	teq	r0, #0
 8005956:	bf17      	itett	ne
 8005958:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800595c:	4608      	moveq	r0, r1
 800595e:	f091 0f00 	teqne	r1, #0
 8005962:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8005966:	d014      	beq.n	8005992 <__aeabi_fmul+0x15e>
 8005968:	ea92 0f0c 	teq	r2, ip
 800596c:	d101      	bne.n	8005972 <__aeabi_fmul+0x13e>
 800596e:	0242      	lsls	r2, r0, #9
 8005970:	d10f      	bne.n	8005992 <__aeabi_fmul+0x15e>
 8005972:	ea93 0f0c 	teq	r3, ip
 8005976:	d103      	bne.n	8005980 <__aeabi_fmul+0x14c>
 8005978:	024b      	lsls	r3, r1, #9
 800597a:	bf18      	it	ne
 800597c:	4608      	movne	r0, r1
 800597e:	d108      	bne.n	8005992 <__aeabi_fmul+0x15e>
 8005980:	ea80 0001 	eor.w	r0, r0, r1
 8005984:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005988:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800598c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005990:	4770      	bx	lr
 8005992:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005996:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800599a:	4770      	bx	lr

0800599c <__aeabi_fdiv>:
 800599c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80059a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80059a4:	bf1e      	ittt	ne
 80059a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80059aa:	ea92 0f0c 	teqne	r2, ip
 80059ae:	ea93 0f0c 	teqne	r3, ip
 80059b2:	d069      	beq.n	8005a88 <__aeabi_fdiv+0xec>
 80059b4:	eba2 0203 	sub.w	r2, r2, r3
 80059b8:	ea80 0c01 	eor.w	ip, r0, r1
 80059bc:	0249      	lsls	r1, r1, #9
 80059be:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80059c2:	d037      	beq.n	8005a34 <__aeabi_fdiv+0x98>
 80059c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059c8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80059cc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80059d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80059d4:	428b      	cmp	r3, r1
 80059d6:	bf38      	it	cc
 80059d8:	005b      	lslcc	r3, r3, #1
 80059da:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80059de:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80059e2:	428b      	cmp	r3, r1
 80059e4:	bf24      	itt	cs
 80059e6:	1a5b      	subcs	r3, r3, r1
 80059e8:	ea40 000c 	orrcs.w	r0, r0, ip
 80059ec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80059f0:	bf24      	itt	cs
 80059f2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80059f6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80059fa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80059fe:	bf24      	itt	cs
 8005a00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8005a04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005a08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8005a0c:	bf24      	itt	cs
 8005a0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8005a12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	bf18      	it	ne
 8005a1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8005a1e:	d1e0      	bne.n	80059e2 <__aeabi_fdiv+0x46>
 8005a20:	2afd      	cmp	r2, #253	; 0xfd
 8005a22:	f63f af50 	bhi.w	80058c6 <__aeabi_fmul+0x92>
 8005a26:	428b      	cmp	r3, r1
 8005a28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005a2c:	bf08      	it	eq
 8005a2e:	f020 0001 	biceq.w	r0, r0, #1
 8005a32:	4770      	bx	lr
 8005a34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005a38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005a3c:	327f      	adds	r2, #127	; 0x7f
 8005a3e:	bfc2      	ittt	gt
 8005a40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8005a44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005a48:	4770      	bxgt	lr
 8005a4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	3a01      	subs	r2, #1
 8005a54:	e737      	b.n	80058c6 <__aeabi_fmul+0x92>
 8005a56:	f092 0f00 	teq	r2, #0
 8005a5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005a5e:	bf02      	ittt	eq
 8005a60:	0040      	lsleq	r0, r0, #1
 8005a62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005a66:	3a01      	subeq	r2, #1
 8005a68:	d0f9      	beq.n	8005a5e <__aeabi_fdiv+0xc2>
 8005a6a:	ea40 000c 	orr.w	r0, r0, ip
 8005a6e:	f093 0f00 	teq	r3, #0
 8005a72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005a76:	bf02      	ittt	eq
 8005a78:	0049      	lsleq	r1, r1, #1
 8005a7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005a7e:	3b01      	subeq	r3, #1
 8005a80:	d0f9      	beq.n	8005a76 <__aeabi_fdiv+0xda>
 8005a82:	ea41 010c 	orr.w	r1, r1, ip
 8005a86:	e795      	b.n	80059b4 <__aeabi_fdiv+0x18>
 8005a88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005a8c:	ea92 0f0c 	teq	r2, ip
 8005a90:	d108      	bne.n	8005aa4 <__aeabi_fdiv+0x108>
 8005a92:	0242      	lsls	r2, r0, #9
 8005a94:	f47f af7d 	bne.w	8005992 <__aeabi_fmul+0x15e>
 8005a98:	ea93 0f0c 	teq	r3, ip
 8005a9c:	f47f af70 	bne.w	8005980 <__aeabi_fmul+0x14c>
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	e776      	b.n	8005992 <__aeabi_fmul+0x15e>
 8005aa4:	ea93 0f0c 	teq	r3, ip
 8005aa8:	d104      	bne.n	8005ab4 <__aeabi_fdiv+0x118>
 8005aaa:	024b      	lsls	r3, r1, #9
 8005aac:	f43f af4c 	beq.w	8005948 <__aeabi_fmul+0x114>
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	e76e      	b.n	8005992 <__aeabi_fmul+0x15e>
 8005ab4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005ab8:	bf18      	it	ne
 8005aba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005abe:	d1ca      	bne.n	8005a56 <__aeabi_fdiv+0xba>
 8005ac0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8005ac4:	f47f af5c 	bne.w	8005980 <__aeabi_fmul+0x14c>
 8005ac8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005acc:	f47f af3c 	bne.w	8005948 <__aeabi_fmul+0x114>
 8005ad0:	e75f      	b.n	8005992 <__aeabi_fmul+0x15e>
 8005ad2:	bf00      	nop

08005ad4 <__gesf2>:
 8005ad4:	f04f 3cff 	mov.w	ip, #4294967295
 8005ad8:	e006      	b.n	8005ae8 <__cmpsf2+0x4>
 8005ada:	bf00      	nop

08005adc <__lesf2>:
 8005adc:	f04f 0c01 	mov.w	ip, #1
 8005ae0:	e002      	b.n	8005ae8 <__cmpsf2+0x4>
 8005ae2:	bf00      	nop

08005ae4 <__cmpsf2>:
 8005ae4:	f04f 0c01 	mov.w	ip, #1
 8005ae8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005aec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005af0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005af4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005af8:	bf18      	it	ne
 8005afa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005afe:	d011      	beq.n	8005b24 <__cmpsf2+0x40>
 8005b00:	b001      	add	sp, #4
 8005b02:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005b06:	bf18      	it	ne
 8005b08:	ea90 0f01 	teqne	r0, r1
 8005b0c:	bf58      	it	pl
 8005b0e:	ebb2 0003 	subspl.w	r0, r2, r3
 8005b12:	bf88      	it	hi
 8005b14:	17c8      	asrhi	r0, r1, #31
 8005b16:	bf38      	it	cc
 8005b18:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005b1c:	bf18      	it	ne
 8005b1e:	f040 0001 	orrne.w	r0, r0, #1
 8005b22:	4770      	bx	lr
 8005b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b28:	d102      	bne.n	8005b30 <__cmpsf2+0x4c>
 8005b2a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005b2e:	d105      	bne.n	8005b3c <__cmpsf2+0x58>
 8005b30:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005b34:	d1e4      	bne.n	8005b00 <__cmpsf2+0x1c>
 8005b36:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005b3a:	d0e1      	beq.n	8005b00 <__cmpsf2+0x1c>
 8005b3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop

08005b44 <__aeabi_cfrcmple>:
 8005b44:	4684      	mov	ip, r0
 8005b46:	4608      	mov	r0, r1
 8005b48:	4661      	mov	r1, ip
 8005b4a:	e7ff      	b.n	8005b4c <__aeabi_cfcmpeq>

08005b4c <__aeabi_cfcmpeq>:
 8005b4c:	b50f      	push	{r0, r1, r2, r3, lr}
 8005b4e:	f7ff ffc9 	bl	8005ae4 <__cmpsf2>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	bf48      	it	mi
 8005b56:	f110 0f00 	cmnmi.w	r0, #0
 8005b5a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005b5c <__aeabi_fcmpeq>:
 8005b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b60:	f7ff fff4 	bl	8005b4c <__aeabi_cfcmpeq>
 8005b64:	bf0c      	ite	eq
 8005b66:	2001      	moveq	r0, #1
 8005b68:	2000      	movne	r0, #0
 8005b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005b6e:	bf00      	nop

08005b70 <__aeabi_fcmplt>:
 8005b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b74:	f7ff ffea 	bl	8005b4c <__aeabi_cfcmpeq>
 8005b78:	bf34      	ite	cc
 8005b7a:	2001      	movcc	r0, #1
 8005b7c:	2000      	movcs	r0, #0
 8005b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005b82:	bf00      	nop

08005b84 <__aeabi_fcmple>:
 8005b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b88:	f7ff ffe0 	bl	8005b4c <__aeabi_cfcmpeq>
 8005b8c:	bf94      	ite	ls
 8005b8e:	2001      	movls	r0, #1
 8005b90:	2000      	movhi	r0, #0
 8005b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8005b96:	bf00      	nop

08005b98 <__aeabi_fcmpge>:
 8005b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b9c:	f7ff ffd2 	bl	8005b44 <__aeabi_cfrcmple>
 8005ba0:	bf94      	ite	ls
 8005ba2:	2001      	movls	r0, #1
 8005ba4:	2000      	movhi	r0, #0
 8005ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005baa:	bf00      	nop

08005bac <__aeabi_fcmpgt>:
 8005bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bb0:	f7ff ffc8 	bl	8005b44 <__aeabi_cfrcmple>
 8005bb4:	bf34      	ite	cc
 8005bb6:	2001      	movcc	r0, #1
 8005bb8:	2000      	movcs	r0, #0
 8005bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bbe:	bf00      	nop

08005bc0 <__aeabi_f2iz>:
 8005bc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005bc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005bc8:	d30f      	bcc.n	8005bea <__aeabi_f2iz+0x2a>
 8005bca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005bce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005bd2:	d90d      	bls.n	8005bf0 <__aeabi_f2iz+0x30>
 8005bd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bdc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005be0:	fa23 f002 	lsr.w	r0, r3, r2
 8005be4:	bf18      	it	ne
 8005be6:	4240      	negne	r0, r0
 8005be8:	4770      	bx	lr
 8005bea:	f04f 0000 	mov.w	r0, #0
 8005bee:	4770      	bx	lr
 8005bf0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005bf4:	d101      	bne.n	8005bfa <__aeabi_f2iz+0x3a>
 8005bf6:	0242      	lsls	r2, r0, #9
 8005bf8:	d105      	bne.n	8005c06 <__aeabi_f2iz+0x46>
 8005bfa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8005bfe:	bf08      	it	eq
 8005c00:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005c04:	4770      	bx	lr
 8005c06:	f04f 0000 	mov.w	r0, #0
 8005c0a:	4770      	bx	lr

08005c0c <__aeabi_f2uiz>:
 8005c0c:	0042      	lsls	r2, r0, #1
 8005c0e:	d20e      	bcs.n	8005c2e <__aeabi_f2uiz+0x22>
 8005c10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005c14:	d30b      	bcc.n	8005c2e <__aeabi_f2uiz+0x22>
 8005c16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005c1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005c1e:	d409      	bmi.n	8005c34 <__aeabi_f2uiz+0x28>
 8005c20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c28:	fa23 f002 	lsr.w	r0, r3, r2
 8005c2c:	4770      	bx	lr
 8005c2e:	f04f 0000 	mov.w	r0, #0
 8005c32:	4770      	bx	lr
 8005c34:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005c38:	d101      	bne.n	8005c3e <__aeabi_f2uiz+0x32>
 8005c3a:	0242      	lsls	r2, r0, #9
 8005c3c:	d102      	bne.n	8005c44 <__aeabi_f2uiz+0x38>
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	4770      	bx	lr
 8005c44:	f04f 0000 	mov.w	r0, #0
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop

08005c4c <selfrel_offset31>:
 8005c4c:	6803      	ldr	r3, [r0, #0]
 8005c4e:	005a      	lsls	r2, r3, #1
 8005c50:	bf4c      	ite	mi
 8005c52:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005c56:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	4418      	add	r0, r3
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop

08005c60 <search_EIT_table>:
 8005c60:	b361      	cbz	r1, 8005cbc <search_EIT_table+0x5c>
 8005c62:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c66:	f101 3aff 	add.w	sl, r1, #4294967295
 8005c6a:	4690      	mov	r8, r2
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	46d1      	mov	r9, sl
 8005c70:	2700      	movs	r7, #0
 8005c72:	eb07 0409 	add.w	r4, r7, r9
 8005c76:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8005c7a:	1064      	asrs	r4, r4, #1
 8005c7c:	00e5      	lsls	r5, r4, #3
 8005c7e:	1971      	adds	r1, r6, r5
 8005c80:	4608      	mov	r0, r1
 8005c82:	f7ff ffe3 	bl	8005c4c <selfrel_offset31>
 8005c86:	45a2      	cmp	sl, r4
 8005c88:	4683      	mov	fp, r0
 8005c8a:	f105 0008 	add.w	r0, r5, #8
 8005c8e:	4430      	add	r0, r6
 8005c90:	d009      	beq.n	8005ca6 <search_EIT_table+0x46>
 8005c92:	f7ff ffdb 	bl	8005c4c <selfrel_offset31>
 8005c96:	45c3      	cmp	fp, r8
 8005c98:	f100 30ff 	add.w	r0, r0, #4294967295
 8005c9c:	d805      	bhi.n	8005caa <search_EIT_table+0x4a>
 8005c9e:	4540      	cmp	r0, r8
 8005ca0:	d209      	bcs.n	8005cb6 <search_EIT_table+0x56>
 8005ca2:	1c67      	adds	r7, r4, #1
 8005ca4:	e7e5      	b.n	8005c72 <search_EIT_table+0x12>
 8005ca6:	45c3      	cmp	fp, r8
 8005ca8:	d905      	bls.n	8005cb6 <search_EIT_table+0x56>
 8005caa:	42a7      	cmp	r7, r4
 8005cac:	d002      	beq.n	8005cb4 <search_EIT_table+0x54>
 8005cae:	f104 39ff 	add.w	r9, r4, #4294967295
 8005cb2:	e7de      	b.n	8005c72 <search_EIT_table+0x12>
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4608      	mov	r0, r1
 8005cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4770      	bx	lr

08005cc0 <__gnu_unwind_get_pr_addr>:
 8005cc0:	2801      	cmp	r0, #1
 8005cc2:	d007      	beq.n	8005cd4 <__gnu_unwind_get_pr_addr+0x14>
 8005cc4:	2802      	cmp	r0, #2
 8005cc6:	d007      	beq.n	8005cd8 <__gnu_unwind_get_pr_addr+0x18>
 8005cc8:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <__gnu_unwind_get_pr_addr+0x1c>)
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	bf0c      	ite	eq
 8005cce:	4618      	moveq	r0, r3
 8005cd0:	2000      	movne	r0, #0
 8005cd2:	4770      	bx	lr
 8005cd4:	4802      	ldr	r0, [pc, #8]	; (8005ce0 <__gnu_unwind_get_pr_addr+0x20>)
 8005cd6:	4770      	bx	lr
 8005cd8:	4802      	ldr	r0, [pc, #8]	; (8005ce4 <__gnu_unwind_get_pr_addr+0x24>)
 8005cda:	4770      	bx	lr
 8005cdc:	080063d5 	.word	0x080063d5
 8005ce0:	080063d9 	.word	0x080063d9
 8005ce4:	080063dd 	.word	0x080063dd

08005ce8 <get_eit_entry>:
 8005ce8:	b530      	push	{r4, r5, lr}
 8005cea:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <get_eit_entry+0x98>)
 8005cec:	b083      	sub	sp, #12
 8005cee:	4604      	mov	r4, r0
 8005cf0:	1e8d      	subs	r5, r1, #2
 8005cf2:	b37b      	cbz	r3, 8005d54 <get_eit_entry+0x6c>
 8005cf4:	a901      	add	r1, sp, #4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f3af 8000 	nop.w
 8005cfc:	b320      	cbz	r0, 8005d48 <get_eit_entry+0x60>
 8005cfe:	9901      	ldr	r1, [sp, #4]
 8005d00:	462a      	mov	r2, r5
 8005d02:	f7ff ffad 	bl	8005c60 <search_EIT_table>
 8005d06:	4601      	mov	r1, r0
 8005d08:	b1f0      	cbz	r0, 8005d48 <get_eit_entry+0x60>
 8005d0a:	f7ff ff9f 	bl	8005c4c <selfrel_offset31>
 8005d0e:	684b      	ldr	r3, [r1, #4]
 8005d10:	64a0      	str	r0, [r4, #72]	; 0x48
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d012      	beq.n	8005d3c <get_eit_entry+0x54>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f101 0004 	add.w	r0, r1, #4
 8005d1c:	db21      	blt.n	8005d62 <get_eit_entry+0x7a>
 8005d1e:	f7ff ff95 	bl	8005c4c <selfrel_offset31>
 8005d22:	2300      	movs	r3, #0
 8005d24:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005d26:	6523      	str	r3, [r4, #80]	; 0x50
 8005d28:	6803      	ldr	r3, [r0, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	db1d      	blt.n	8005d6a <get_eit_entry+0x82>
 8005d2e:	f7ff ff8d 	bl	8005c4c <selfrel_offset31>
 8005d32:	2300      	movs	r3, #0
 8005d34:	6120      	str	r0, [r4, #16]
 8005d36:	4618      	mov	r0, r3
 8005d38:	b003      	add	sp, #12
 8005d3a:	bd30      	pop	{r4, r5, pc}
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	6123      	str	r3, [r4, #16]
 8005d40:	2305      	movs	r3, #5
 8005d42:	4618      	mov	r0, r3
 8005d44:	b003      	add	sp, #12
 8005d46:	bd30      	pop	{r4, r5, pc}
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6123      	str	r3, [r4, #16]
 8005d4c:	2309      	movs	r3, #9
 8005d4e:	4618      	mov	r0, r3
 8005d50:	b003      	add	sp, #12
 8005d52:	bd30      	pop	{r4, r5, pc}
 8005d54:	490b      	ldr	r1, [pc, #44]	; (8005d84 <get_eit_entry+0x9c>)
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <get_eit_entry+0xa0>)
 8005d58:	4608      	mov	r0, r1
 8005d5a:	1a59      	subs	r1, r3, r1
 8005d5c:	10c9      	asrs	r1, r1, #3
 8005d5e:	9101      	str	r1, [sp, #4]
 8005d60:	e7ce      	b.n	8005d00 <get_eit_entry+0x18>
 8005d62:	2301      	movs	r3, #1
 8005d64:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005d66:	6523      	str	r3, [r4, #80]	; 0x50
 8005d68:	e7de      	b.n	8005d28 <get_eit_entry+0x40>
 8005d6a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005d6e:	f7ff ffa7 	bl	8005cc0 <__gnu_unwind_get_pr_addr>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	6120      	str	r0, [r4, #16]
 8005d76:	bf14      	ite	ne
 8005d78:	2300      	movne	r3, #0
 8005d7a:	2309      	moveq	r3, #9
 8005d7c:	e7db      	b.n	8005d36 <get_eit_entry+0x4e>
 8005d7e:	bf00      	nop
 8005d80:	00000000 	.word	0x00000000
 8005d84:	08016a24 	.word	0x08016a24
 8005d88:	08016bcc 	.word	0x08016bcc

08005d8c <restore_non_core_regs>:
 8005d8c:	6803      	ldr	r3, [r0, #0]
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	07da      	lsls	r2, r3, #31
 8005d92:	4604      	mov	r4, r0
 8005d94:	d406      	bmi.n	8005da4 <restore_non_core_regs+0x18>
 8005d96:	079b      	lsls	r3, r3, #30
 8005d98:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005d9c:	d509      	bpl.n	8005db2 <restore_non_core_regs+0x26>
 8005d9e:	f000 fc5b 	bl	8006658 <__gnu_Unwind_Restore_VFP_D>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	0759      	lsls	r1, r3, #29
 8005da6:	d509      	bpl.n	8005dbc <restore_non_core_regs+0x30>
 8005da8:	071a      	lsls	r2, r3, #28
 8005daa:	d50e      	bpl.n	8005dca <restore_non_core_regs+0x3e>
 8005dac:	06db      	lsls	r3, r3, #27
 8005dae:	d513      	bpl.n	8005dd8 <restore_non_core_regs+0x4c>
 8005db0:	bd10      	pop	{r4, pc}
 8005db2:	f000 fc49 	bl	8006648 <__gnu_Unwind_Restore_VFP>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	0759      	lsls	r1, r3, #29
 8005dba:	d4f5      	bmi.n	8005da8 <restore_non_core_regs+0x1c>
 8005dbc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005dc0:	f000 fc52 	bl	8006668 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	071a      	lsls	r2, r3, #28
 8005dc8:	d4f0      	bmi.n	8005dac <restore_non_core_regs+0x20>
 8005dca:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8005dce:	f000 fc53 	bl	8006678 <__gnu_Unwind_Restore_WMMXD>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	06db      	lsls	r3, r3, #27
 8005dd6:	d4eb      	bmi.n	8005db0 <restore_non_core_regs+0x24>
 8005dd8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8005ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de0:	f000 bc8e 	b.w	8006700 <__gnu_Unwind_Restore_WMMXC>

08005de4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8005de4:	6803      	ldr	r3, [r0, #0]
 8005de6:	b10b      	cbz	r3, 8005dec <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8005de8:	4418      	add	r0, r3
 8005dea:	4770      	bx	lr
 8005dec:	4618      	mov	r0, r3
 8005dee:	4770      	bx	lr

08005df0 <__gnu_unwind_24bit.isra.1>:
 8005df0:	2009      	movs	r0, #9
 8005df2:	4770      	bx	lr

08005df4 <_Unwind_DebugHook>:
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop

08005df8 <unwind_phase2>:
 8005df8:	b570      	push	{r4, r5, r6, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	e008      	b.n	8005e12 <unwind_phase2+0x1a>
 8005e00:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	6162      	str	r2, [r4, #20]
 8005e06:	4621      	mov	r1, r4
 8005e08:	462a      	mov	r2, r5
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	4798      	blx	r3
 8005e0e:	2808      	cmp	r0, #8
 8005e10:	d108      	bne.n	8005e24 <unwind_phase2+0x2c>
 8005e12:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005e14:	4620      	mov	r0, r4
 8005e16:	f7ff ff67 	bl	8005ce8 <get_eit_entry>
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d0ef      	beq.n	8005e00 <unwind_phase2+0x8>
 8005e20:	f00d fa5c 	bl	80132dc <abort>
 8005e24:	2807      	cmp	r0, #7
 8005e26:	d1fb      	bne.n	8005e20 <unwind_phase2+0x28>
 8005e28:	4630      	mov	r0, r6
 8005e2a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005e2c:	f7ff ffe2 	bl	8005df4 <_Unwind_DebugHook>
 8005e30:	1d28      	adds	r0, r5, #4
 8005e32:	f000 fbfd 	bl	8006630 <__restore_core_regs>
 8005e36:	bf00      	nop

08005e38 <unwind_phase2_forced>:
 8005e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8005e42:	ad03      	add	r5, sp, #12
 8005e44:	1d0c      	adds	r4, r1, #4
 8005e46:	4617      	mov	r7, r2
 8005e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005e58:	ac02      	add	r4, sp, #8
 8005e5a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005e5e:	f8d6 9018 	ldr.w	r9, [r6, #24]
 8005e62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005e66:	2300      	movs	r3, #0
 8005e68:	4630      	mov	r0, r6
 8005e6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	f7ff ff3b 	bl	8005ce8 <get_eit_entry>
 8005e72:	4605      	mov	r5, r0
 8005e74:	2f00      	cmp	r7, #0
 8005e76:	bf14      	ite	ne
 8005e78:	270a      	movne	r7, #10
 8005e7a:	2709      	moveq	r7, #9
 8005e7c:	b17d      	cbz	r5, 8005e9e <unwind_phase2_forced+0x66>
 8005e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e80:	f047 0110 	orr.w	r1, r7, #16
 8005e84:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005e88:	4632      	mov	r2, r6
 8005e8a:	6463      	str	r3, [r4, #68]	; 0x44
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	4633      	mov	r3, r6
 8005e90:	47c0      	blx	r8
 8005e92:	bb78      	cbnz	r0, 8005ef4 <unwind_phase2_forced+0xbc>
 8005e94:	4628      	mov	r0, r5
 8005e96:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ea0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ea4:	6173      	str	r3, [r6, #20]
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	a87a      	add	r0, sp, #488	; 0x1e8
 8005eaa:	f00d fada 	bl	8013462 <memcpy>
 8005eae:	6933      	ldr	r3, [r6, #16]
 8005eb0:	aa7a      	add	r2, sp, #488	; 0x1e8
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	4798      	blx	r3
 8005eb8:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8005eba:	4682      	mov	sl, r0
 8005ebc:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	6463      	str	r3, [r4, #68]	; 0x44
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	4633      	mov	r3, r6
 8005ec8:	2001      	movs	r0, #1
 8005eca:	47c0      	blx	r8
 8005ecc:	b990      	cbnz	r0, 8005ef4 <unwind_phase2_forced+0xbc>
 8005ece:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ed2:	a97a      	add	r1, sp, #488	; 0x1e8
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f00d fac4 	bl	8013462 <memcpy>
 8005eda:	f1ba 0f08 	cmp.w	sl, #8
 8005ede:	d106      	bne.n	8005eee <unwind_phase2_forced+0xb6>
 8005ee0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	f7ff ff00 	bl	8005ce8 <get_eit_entry>
 8005ee8:	2709      	movs	r7, #9
 8005eea:	4605      	mov	r5, r0
 8005eec:	e7c6      	b.n	8005e7c <unwind_phase2_forced+0x44>
 8005eee:	f1ba 0f07 	cmp.w	sl, #7
 8005ef2:	d004      	beq.n	8005efe <unwind_phase2_forced+0xc6>
 8005ef4:	2009      	movs	r0, #9
 8005ef6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efe:	4628      	mov	r0, r5
 8005f00:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f02:	f7ff ff77 	bl	8005df4 <_Unwind_DebugHook>
 8005f06:	a803      	add	r0, sp, #12
 8005f08:	f000 fb92 	bl	8006630 <__restore_core_regs>

08005f0c <_Unwind_GetCFA>:
 8005f0c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005f0e:	4770      	bx	lr

08005f10 <__gnu_Unwind_RaiseException>:
 8005f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f12:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005f14:	b0f9      	sub	sp, #484	; 0x1e4
 8005f16:	640b      	str	r3, [r1, #64]	; 0x40
 8005f18:	1d0e      	adds	r6, r1, #4
 8005f1a:	ad01      	add	r5, sp, #4
 8005f1c:	460f      	mov	r7, r1
 8005f1e:	4604      	mov	r4, r0
 8005f20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005f30:	f04f 36ff 	mov.w	r6, #4294967295
 8005f34:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005f38:	9600      	str	r6, [sp, #0]
 8005f3a:	e006      	b.n	8005f4a <__gnu_Unwind_RaiseException+0x3a>
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	466a      	mov	r2, sp
 8005f40:	4621      	mov	r1, r4
 8005f42:	4798      	blx	r3
 8005f44:	2808      	cmp	r0, #8
 8005f46:	4605      	mov	r5, r0
 8005f48:	d108      	bne.n	8005f5c <__gnu_Unwind_RaiseException+0x4c>
 8005f4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f7ff fecb 	bl	8005ce8 <get_eit_entry>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d0f2      	beq.n	8005f3c <__gnu_Unwind_RaiseException+0x2c>
 8005f56:	2009      	movs	r0, #9
 8005f58:	b079      	add	sp, #484	; 0x1e4
 8005f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5c:	4668      	mov	r0, sp
 8005f5e:	f7ff ff15 	bl	8005d8c <restore_non_core_regs>
 8005f62:	2d06      	cmp	r5, #6
 8005f64:	d1f7      	bne.n	8005f56 <__gnu_Unwind_RaiseException+0x46>
 8005f66:	4639      	mov	r1, r7
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f7ff ff45 	bl	8005df8 <unwind_phase2>
 8005f6e:	bf00      	nop

08005f70 <__gnu_Unwind_ForcedUnwind>:
 8005f70:	b430      	push	{r4, r5}
 8005f72:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8005f74:	60c1      	str	r1, [r0, #12]
 8005f76:	6182      	str	r2, [r0, #24]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	641d      	str	r5, [r3, #64]	; 0x40
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	bc30      	pop	{r4, r5}
 8005f80:	e75a      	b.n	8005e38 <unwind_phase2_forced>
 8005f82:	bf00      	nop

08005f84 <__gnu_Unwind_Resume>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	6943      	ldr	r3, [r0, #20]
 8005f88:	68c6      	ldr	r6, [r0, #12]
 8005f8a:	640b      	str	r3, [r1, #64]	; 0x40
 8005f8c:	b126      	cbz	r6, 8005f98 <__gnu_Unwind_Resume+0x14>
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f7ff ff52 	bl	8005e38 <unwind_phase2_forced>
 8005f94:	f00d f9a2 	bl	80132dc <abort>
 8005f98:	6903      	ldr	r3, [r0, #16]
 8005f9a:	460a      	mov	r2, r1
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	460d      	mov	r5, r1
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	2002      	movs	r0, #2
 8005fa4:	4798      	blx	r3
 8005fa6:	2807      	cmp	r0, #7
 8005fa8:	d007      	beq.n	8005fba <__gnu_Unwind_Resume+0x36>
 8005faa:	2808      	cmp	r0, #8
 8005fac:	d103      	bne.n	8005fb6 <__gnu_Unwind_Resume+0x32>
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff ff21 	bl	8005df8 <unwind_phase2>
 8005fb6:	f00d f991 	bl	80132dc <abort>
 8005fba:	4630      	mov	r0, r6
 8005fbc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005fbe:	f7ff ff19 	bl	8005df4 <_Unwind_DebugHook>
 8005fc2:	1d28      	adds	r0, r5, #4
 8005fc4:	f000 fb34 	bl	8006630 <__restore_core_regs>

08005fc8 <__gnu_Unwind_Resume_or_Rethrow>:
 8005fc8:	68c2      	ldr	r2, [r0, #12]
 8005fca:	b12a      	cbz	r2, 8005fd8 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8005fcc:	b410      	push	{r4}
 8005fce:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	640c      	str	r4, [r1, #64]	; 0x40
 8005fd4:	bc10      	pop	{r4}
 8005fd6:	e72f      	b.n	8005e38 <unwind_phase2_forced>
 8005fd8:	e79a      	b.n	8005f10 <__gnu_Unwind_RaiseException>
 8005fda:	bf00      	nop

08005fdc <_Unwind_Complete>:
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop

08005fe0 <_Unwind_DeleteException>:
 8005fe0:	6883      	ldr	r3, [r0, #8]
 8005fe2:	b113      	cbz	r3, 8005fea <_Unwind_DeleteException+0xa>
 8005fe4:	4601      	mov	r1, r0
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	4718      	bx	r3
 8005fea:	4770      	bx	lr

08005fec <_Unwind_VRS_Get>:
 8005fec:	b500      	push	{lr}
 8005fee:	2904      	cmp	r1, #4
 8005ff0:	d807      	bhi.n	8006002 <_Unwind_VRS_Get+0x16>
 8005ff2:	e8df f001 	tbb	[pc, r1]
 8005ff6:	0903      	.short	0x0903
 8005ff8:	0906      	.short	0x0906
 8005ffa:	09          	.byte	0x09
 8005ffb:	00          	.byte	0x00
 8005ffc:	b90b      	cbnz	r3, 8006002 <_Unwind_VRS_Get+0x16>
 8005ffe:	2a0f      	cmp	r2, #15
 8006000:	d905      	bls.n	800600e <_Unwind_VRS_Get+0x22>
 8006002:	2002      	movs	r0, #2
 8006004:	f85d fb04 	ldr.w	pc, [sp], #4
 8006008:	2001      	movs	r0, #1
 800600a:	f85d fb04 	ldr.w	pc, [sp], #4
 800600e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006012:	6852      	ldr	r2, [r2, #4]
 8006014:	4618      	mov	r0, r3
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	f85d fb04 	ldr.w	pc, [sp], #4
 800601e:	bf00      	nop

08006020 <_Unwind_GetGR>:
 8006020:	b510      	push	{r4, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	2300      	movs	r3, #0
 8006026:	ac03      	add	r4, sp, #12
 8006028:	460a      	mov	r2, r1
 800602a:	9400      	str	r4, [sp, #0]
 800602c:	4619      	mov	r1, r3
 800602e:	f7ff ffdd 	bl	8005fec <_Unwind_VRS_Get>
 8006032:	9803      	ldr	r0, [sp, #12]
 8006034:	b004      	add	sp, #16
 8006036:	bd10      	pop	{r4, pc}

08006038 <_Unwind_VRS_Set>:
 8006038:	b500      	push	{lr}
 800603a:	2904      	cmp	r1, #4
 800603c:	d807      	bhi.n	800604e <_Unwind_VRS_Set+0x16>
 800603e:	e8df f001 	tbb	[pc, r1]
 8006042:	0903      	.short	0x0903
 8006044:	0906      	.short	0x0906
 8006046:	09          	.byte	0x09
 8006047:	00          	.byte	0x00
 8006048:	b90b      	cbnz	r3, 800604e <_Unwind_VRS_Set+0x16>
 800604a:	2a0f      	cmp	r2, #15
 800604c:	d905      	bls.n	800605a <_Unwind_VRS_Set+0x22>
 800604e:	2002      	movs	r0, #2
 8006050:	f85d fb04 	ldr.w	pc, [sp], #4
 8006054:	2001      	movs	r0, #1
 8006056:	f85d fb04 	ldr.w	pc, [sp], #4
 800605a:	9901      	ldr	r1, [sp, #4]
 800605c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006060:	6809      	ldr	r1, [r1, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	6051      	str	r1, [r2, #4]
 8006066:	f85d fb04 	ldr.w	pc, [sp], #4
 800606a:	bf00      	nop

0800606c <_Unwind_SetGR>:
 800606c:	b510      	push	{r4, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	ac04      	add	r4, sp, #16
 8006072:	f844 2d04 	str.w	r2, [r4, #-4]!
 8006076:	2300      	movs	r3, #0
 8006078:	460a      	mov	r2, r1
 800607a:	9400      	str	r4, [sp, #0]
 800607c:	4619      	mov	r1, r3
 800607e:	f7ff ffdb 	bl	8006038 <_Unwind_VRS_Set>
 8006082:	b004      	add	sp, #16
 8006084:	bd10      	pop	{r4, pc}
 8006086:	bf00      	nop

08006088 <__gnu_Unwind_Backtrace>:
 8006088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800608a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800608c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8006090:	6413      	str	r3, [r2, #64]	; 0x40
 8006092:	1d15      	adds	r5, r2, #4
 8006094:	ac17      	add	r4, sp, #92	; 0x5c
 8006096:	4607      	mov	r7, r0
 8006098:	460e      	mov	r6, r1
 800609a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800609c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800609e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80060aa:	f04f 35ff 	mov.w	r5, #4294967295
 80060ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80060b2:	9516      	str	r5, [sp, #88]	; 0x58
 80060b4:	e011      	b.n	80060da <__gnu_Unwind_Backtrace+0x52>
 80060b6:	a816      	add	r0, sp, #88	; 0x58
 80060b8:	466a      	mov	r2, sp
 80060ba:	f7ff ffd7 	bl	800606c <_Unwind_SetGR>
 80060be:	4631      	mov	r1, r6
 80060c0:	a816      	add	r0, sp, #88	; 0x58
 80060c2:	47b8      	blx	r7
 80060c4:	b980      	cbnz	r0, 80060e8 <__gnu_Unwind_Backtrace+0x60>
 80060c6:	9b04      	ldr	r3, [sp, #16]
 80060c8:	aa16      	add	r2, sp, #88	; 0x58
 80060ca:	4669      	mov	r1, sp
 80060cc:	2008      	movs	r0, #8
 80060ce:	4798      	blx	r3
 80060d0:	2805      	cmp	r0, #5
 80060d2:	4604      	mov	r4, r0
 80060d4:	d009      	beq.n	80060ea <__gnu_Unwind_Backtrace+0x62>
 80060d6:	2809      	cmp	r0, #9
 80060d8:	d006      	beq.n	80060e8 <__gnu_Unwind_Backtrace+0x60>
 80060da:	9926      	ldr	r1, [sp, #152]	; 0x98
 80060dc:	4668      	mov	r0, sp
 80060de:	f7ff fe03 	bl	8005ce8 <get_eit_entry>
 80060e2:	210c      	movs	r1, #12
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d0e6      	beq.n	80060b6 <__gnu_Unwind_Backtrace+0x2e>
 80060e8:	2409      	movs	r4, #9
 80060ea:	a816      	add	r0, sp, #88	; 0x58
 80060ec:	f7ff fe4e 	bl	8005d8c <restore_non_core_regs>
 80060f0:	4620      	mov	r0, r4
 80060f2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80060f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060f8 <__gnu_unwind_pr_common>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80060fe:	4691      	mov	r9, r2
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	b08b      	sub	sp, #44	; 0x2c
 8006104:	3404      	adds	r4, #4
 8006106:	460d      	mov	r5, r1
 8006108:	9207      	str	r2, [sp, #28]
 800610a:	9408      	str	r4, [sp, #32]
 800610c:	f000 0b03 	and.w	fp, r0, #3
 8006110:	461e      	mov	r6, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d164      	bne.n	80061e0 <__gnu_unwind_pr_common+0xe8>
 8006116:	0212      	lsls	r2, r2, #8
 8006118:	2303      	movs	r3, #3
 800611a:	9207      	str	r2, [sp, #28]
 800611c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8006120:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006124:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006126:	f1bb 0f02 	cmp.w	fp, #2
 800612a:	bf08      	it	eq
 800612c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800612e:	f013 0301 	ands.w	r3, r3, #1
 8006132:	d143      	bne.n	80061bc <__gnu_unwind_pr_common+0xc4>
 8006134:	f000 0008 	and.w	r0, r0, #8
 8006138:	b2c2      	uxtb	r2, r0
 800613a:	9203      	str	r2, [sp, #12]
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	6827      	ldr	r7, [r4, #0]
 8006140:	2f00      	cmp	r7, #0
 8006142:	d03d      	beq.n	80061c0 <__gnu_unwind_pr_common+0xc8>
 8006144:	2e02      	cmp	r6, #2
 8006146:	d047      	beq.n	80061d8 <__gnu_unwind_pr_common+0xe0>
 8006148:	8827      	ldrh	r7, [r4, #0]
 800614a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 800614e:	3404      	adds	r4, #4
 8006150:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8006152:	f028 0a01 	bic.w	sl, r8, #1
 8006156:	210f      	movs	r1, #15
 8006158:	4648      	mov	r0, r9
 800615a:	449a      	add	sl, r3
 800615c:	f7ff ff60 	bl	8006020 <_Unwind_GetGR>
 8006160:	4582      	cmp	sl, r0
 8006162:	d837      	bhi.n	80061d4 <__gnu_unwind_pr_common+0xdc>
 8006164:	f027 0301 	bic.w	r3, r7, #1
 8006168:	449a      	add	sl, r3
 800616a:	4550      	cmp	r0, sl
 800616c:	bf2c      	ite	cs
 800616e:	2000      	movcs	r0, #0
 8006170:	2001      	movcc	r0, #1
 8006172:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8006176:	f008 0802 	and.w	r8, r8, #2
 800617a:	f007 0701 	and.w	r7, r7, #1
 800617e:	ea48 0807 	orr.w	r8, r8, r7
 8006182:	f1b8 0f01 	cmp.w	r8, #1
 8006186:	d041      	beq.n	800620c <__gnu_unwind_pr_common+0x114>
 8006188:	d338      	bcc.n	80061fc <__gnu_unwind_pr_common+0x104>
 800618a:	f1b8 0f02 	cmp.w	r8, #2
 800618e:	d11d      	bne.n	80061cc <__gnu_unwind_pr_common+0xd4>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006196:	9202      	str	r2, [sp, #8]
 8006198:	f1bb 0f00 	cmp.w	fp, #0
 800619c:	d179      	bne.n	8006292 <__gnu_unwind_pr_common+0x19a>
 800619e:	b130      	cbz	r0, 80061ae <__gnu_unwind_pr_common+0xb6>
 80061a0:	9903      	ldr	r1, [sp, #12]
 80061a2:	2900      	cmp	r1, #0
 80061a4:	f000 8081 	beq.w	80062aa <__gnu_unwind_pr_common+0x1b2>
 80061a8:	2a00      	cmp	r2, #0
 80061aa:	f000 80a8 	beq.w	80062fe <__gnu_unwind_pr_common+0x206>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	db79      	blt.n	80062a6 <__gnu_unwind_pr_common+0x1ae>
 80061b2:	9b02      	ldr	r3, [sp, #8]
 80061b4:	3301      	adds	r3, #1
 80061b6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80061ba:	e7c0      	b.n	800613e <__gnu_unwind_pr_common+0x46>
 80061bc:	2300      	movs	r3, #0
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	2e02      	cmp	r6, #2
 80061c2:	dd40      	ble.n	8006246 <__gnu_unwind_pr_common+0x14e>
 80061c4:	f7ff fe14 	bl	8005df0 <__gnu_unwind_24bit.isra.1>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d042      	beq.n	8006252 <__gnu_unwind_pr_common+0x15a>
 80061cc:	2009      	movs	r0, #9
 80061ce:	b00b      	add	sp, #44	; 0x2c
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	2000      	movs	r0, #0
 80061d6:	e7cc      	b.n	8006172 <__gnu_unwind_pr_common+0x7a>
 80061d8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80061dc:	3408      	adds	r4, #8
 80061de:	e7b7      	b.n	8006150 <__gnu_unwind_pr_common+0x58>
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	dc9f      	bgt.n	8006124 <__gnu_unwind_pr_common+0x2c>
 80061e4:	0c13      	lsrs	r3, r2, #16
 80061e6:	b2d9      	uxtb	r1, r3
 80061e8:	0412      	lsls	r2, r2, #16
 80061ea:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80061ee:	2302      	movs	r3, #2
 80061f0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80061f4:	9207      	str	r2, [sp, #28]
 80061f6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80061fa:	e793      	b.n	8006124 <__gnu_unwind_pr_common+0x2c>
 80061fc:	f1bb 0f00 	cmp.w	fp, #0
 8006200:	d002      	beq.n	8006208 <__gnu_unwind_pr_common+0x110>
 8006202:	2800      	cmp	r0, #0
 8006204:	f040 80b0 	bne.w	8006368 <__gnu_unwind_pr_common+0x270>
 8006208:	3404      	adds	r4, #4
 800620a:	e798      	b.n	800613e <__gnu_unwind_pr_common+0x46>
 800620c:	f1bb 0f00 	cmp.w	fp, #0
 8006210:	d126      	bne.n	8006260 <__gnu_unwind_pr_common+0x168>
 8006212:	b1b0      	cbz	r0, 8006242 <__gnu_unwind_pr_common+0x14a>
 8006214:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006218:	1c99      	adds	r1, r3, #2
 800621a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800621e:	d0d5      	beq.n	80061cc <__gnu_unwind_pr_common+0xd4>
 8006220:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8006224:	3301      	adds	r3, #1
 8006226:	9106      	str	r1, [sp, #24]
 8006228:	f000 8094 	beq.w	8006354 <__gnu_unwind_pr_common+0x25c>
 800622c:	1d20      	adds	r0, r4, #4
 800622e:	f7ff fdd9 	bl	8005de4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8006232:	ab06      	add	r3, sp, #24
 8006234:	4601      	mov	r1, r0
 8006236:	4628      	mov	r0, r5
 8006238:	f00b f97a 	bl	8011530 <__cxa_type_match>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 80b8 	bne.w	80063b2 <__gnu_unwind_pr_common+0x2ba>
 8006242:	3408      	adds	r4, #8
 8006244:	e77b      	b.n	800613e <__gnu_unwind_pr_common+0x46>
 8006246:	a907      	add	r1, sp, #28
 8006248:	4648      	mov	r0, r9
 800624a:	f000 faf3 	bl	8006834 <__gnu_unwind_execute>
 800624e:	2800      	cmp	r0, #0
 8006250:	d1bc      	bne.n	80061cc <__gnu_unwind_pr_common+0xd4>
 8006252:	9b01      	ldr	r3, [sp, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d15c      	bne.n	8006312 <__gnu_unwind_pr_common+0x21a>
 8006258:	2008      	movs	r0, #8
 800625a:	b00b      	add	sp, #44	; 0x2c
 800625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006260:	210d      	movs	r1, #13
 8006262:	4648      	mov	r0, r9
 8006264:	6a2f      	ldr	r7, [r5, #32]
 8006266:	f7ff fedb 	bl	8006020 <_Unwind_GetGR>
 800626a:	4287      	cmp	r7, r0
 800626c:	d1e9      	bne.n	8006242 <__gnu_unwind_pr_common+0x14a>
 800626e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006270:	429c      	cmp	r4, r3
 8006272:	d1e6      	bne.n	8006242 <__gnu_unwind_pr_common+0x14a>
 8006274:	4620      	mov	r0, r4
 8006276:	f7ff fce9 	bl	8005c4c <selfrel_offset31>
 800627a:	210f      	movs	r1, #15
 800627c:	4602      	mov	r2, r0
 800627e:	4648      	mov	r0, r9
 8006280:	f7ff fef4 	bl	800606c <_Unwind_SetGR>
 8006284:	4648      	mov	r0, r9
 8006286:	462a      	mov	r2, r5
 8006288:	2100      	movs	r1, #0
 800628a:	f7ff feef 	bl	800606c <_Unwind_SetGR>
 800628e:	2007      	movs	r0, #7
 8006290:	e79d      	b.n	80061ce <__gnu_unwind_pr_common+0xd6>
 8006292:	210d      	movs	r1, #13
 8006294:	4648      	mov	r0, r9
 8006296:	6a2f      	ldr	r7, [r5, #32]
 8006298:	f7ff fec2 	bl	8006020 <_Unwind_GetGR>
 800629c:	4287      	cmp	r7, r0
 800629e:	d048      	beq.n	8006332 <__gnu_unwind_pr_common+0x23a>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da85      	bge.n	80061b2 <__gnu_unwind_pr_common+0xba>
 80062a6:	3404      	adds	r4, #4
 80062a8:	e783      	b.n	80061b2 <__gnu_unwind_pr_common+0xba>
 80062aa:	9b02      	ldr	r3, [sp, #8]
 80062ac:	b33b      	cbz	r3, 80062fe <__gnu_unwind_pr_common+0x206>
 80062ae:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80062b2:	1d27      	adds	r7, r4, #4
 80062b4:	f8cd b010 	str.w	fp, [sp, #16]
 80062b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80062bc:	46a3      	mov	fp, r4
 80062be:	f8dd a008 	ldr.w	sl, [sp, #8]
 80062c2:	461c      	mov	r4, r3
 80062c4:	9605      	str	r6, [sp, #20]
 80062c6:	e002      	b.n	80062ce <__gnu_unwind_pr_common+0x1d6>
 80062c8:	45b2      	cmp	sl, r6
 80062ca:	46b0      	mov	r8, r6
 80062cc:	d016      	beq.n	80062fc <__gnu_unwind_pr_common+0x204>
 80062ce:	4638      	mov	r0, r7
 80062d0:	9406      	str	r4, [sp, #24]
 80062d2:	f7ff fd87 	bl	8005de4 <_Unwind_decode_typeinfo_ptr.isra.0>
 80062d6:	ab06      	add	r3, sp, #24
 80062d8:	4601      	mov	r1, r0
 80062da:	2200      	movs	r2, #0
 80062dc:	4628      	mov	r0, r5
 80062de:	f00b f927 	bl	8011530 <__cxa_type_match>
 80062e2:	f108 0601 	add.w	r6, r8, #1
 80062e6:	3704      	adds	r7, #4
 80062e8:	2800      	cmp	r0, #0
 80062ea:	d0ed      	beq.n	80062c8 <__gnu_unwind_pr_common+0x1d0>
 80062ec:	9b02      	ldr	r3, [sp, #8]
 80062ee:	465c      	mov	r4, fp
 80062f0:	4543      	cmp	r3, r8
 80062f2:	f8dd b010 	ldr.w	fp, [sp, #16]
 80062f6:	9e05      	ldr	r6, [sp, #20]
 80062f8:	d1d2      	bne.n	80062a0 <__gnu_unwind_pr_common+0x1a8>
 80062fa:	e000      	b.n	80062fe <__gnu_unwind_pr_common+0x206>
 80062fc:	465c      	mov	r4, fp
 80062fe:	4648      	mov	r0, r9
 8006300:	210d      	movs	r1, #13
 8006302:	f7ff fe8d 	bl	8006020 <_Unwind_GetGR>
 8006306:	9b06      	ldr	r3, [sp, #24]
 8006308:	6228      	str	r0, [r5, #32]
 800630a:	62ac      	str	r4, [r5, #40]	; 0x28
 800630c:	626b      	str	r3, [r5, #36]	; 0x24
 800630e:	2006      	movs	r0, #6
 8006310:	e75d      	b.n	80061ce <__gnu_unwind_pr_common+0xd6>
 8006312:	210f      	movs	r1, #15
 8006314:	4648      	mov	r0, r9
 8006316:	f7ff fe83 	bl	8006020 <_Unwind_GetGR>
 800631a:	210e      	movs	r1, #14
 800631c:	4602      	mov	r2, r0
 800631e:	4648      	mov	r0, r9
 8006320:	f7ff fea4 	bl	800606c <_Unwind_SetGR>
 8006324:	4648      	mov	r0, r9
 8006326:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <__gnu_unwind_pr_common+0x2d8>)
 8006328:	210f      	movs	r1, #15
 800632a:	f7ff fe9f 	bl	800606c <_Unwind_SetGR>
 800632e:	2007      	movs	r0, #7
 8006330:	e74d      	b.n	80061ce <__gnu_unwind_pr_common+0xd6>
 8006332:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006334:	429c      	cmp	r4, r3
 8006336:	d1b3      	bne.n	80062a0 <__gnu_unwind_pr_common+0x1a8>
 8006338:	2204      	movs	r2, #4
 800633a:	9902      	ldr	r1, [sp, #8]
 800633c:	2700      	movs	r7, #0
 800633e:	18a3      	adds	r3, r4, r2
 8006340:	62a9      	str	r1, [r5, #40]	; 0x28
 8006342:	62ef      	str	r7, [r5, #44]	; 0x2c
 8006344:	632a      	str	r2, [r5, #48]	; 0x30
 8006346:	636b      	str	r3, [r5, #52]	; 0x34
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	42bb      	cmp	r3, r7
 800634c:	db1f      	blt.n	800638e <__gnu_unwind_pr_common+0x296>
 800634e:	2301      	movs	r3, #1
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	e72e      	b.n	80061b2 <__gnu_unwind_pr_common+0xba>
 8006354:	4648      	mov	r0, r9
 8006356:	210d      	movs	r1, #13
 8006358:	f7ff fe62 	bl	8006020 <_Unwind_GetGR>
 800635c:	6228      	str	r0, [r5, #32]
 800635e:	9b06      	ldr	r3, [sp, #24]
 8006360:	626b      	str	r3, [r5, #36]	; 0x24
 8006362:	62ac      	str	r4, [r5, #40]	; 0x28
 8006364:	2006      	movs	r0, #6
 8006366:	e732      	b.n	80061ce <__gnu_unwind_pr_common+0xd6>
 8006368:	4620      	mov	r0, r4
 800636a:	f7ff fc6f 	bl	8005c4c <selfrel_offset31>
 800636e:	3404      	adds	r4, #4
 8006370:	4606      	mov	r6, r0
 8006372:	63ac      	str	r4, [r5, #56]	; 0x38
 8006374:	4628      	mov	r0, r5
 8006376:	f00b f937 	bl	80115e8 <__cxa_begin_cleanup>
 800637a:	2800      	cmp	r0, #0
 800637c:	f43f af26 	beq.w	80061cc <__gnu_unwind_pr_common+0xd4>
 8006380:	4648      	mov	r0, r9
 8006382:	4632      	mov	r2, r6
 8006384:	210f      	movs	r1, #15
 8006386:	f7ff fe71 	bl	800606c <_Unwind_SetGR>
 800638a:	2007      	movs	r0, #7
 800638c:	e71f      	b.n	80061ce <__gnu_unwind_pr_common+0xd6>
 800638e:	4608      	mov	r0, r1
 8006390:	3001      	adds	r0, #1
 8006392:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006396:	f7ff fc59 	bl	8005c4c <selfrel_offset31>
 800639a:	210f      	movs	r1, #15
 800639c:	4602      	mov	r2, r0
 800639e:	4648      	mov	r0, r9
 80063a0:	f7ff fe64 	bl	800606c <_Unwind_SetGR>
 80063a4:	4648      	mov	r0, r9
 80063a6:	462a      	mov	r2, r5
 80063a8:	4639      	mov	r1, r7
 80063aa:	f7ff fe5f 	bl	800606c <_Unwind_SetGR>
 80063ae:	2007      	movs	r0, #7
 80063b0:	e70d      	b.n	80061ce <__gnu_unwind_pr_common+0xd6>
 80063b2:	4607      	mov	r7, r0
 80063b4:	210d      	movs	r1, #13
 80063b6:	4648      	mov	r0, r9
 80063b8:	f7ff fe32 	bl	8006020 <_Unwind_GetGR>
 80063bc:	2f02      	cmp	r7, #2
 80063be:	6228      	str	r0, [r5, #32]
 80063c0:	d1cd      	bne.n	800635e <__gnu_unwind_pr_common+0x266>
 80063c2:	462b      	mov	r3, r5
 80063c4:	9a06      	ldr	r2, [sp, #24]
 80063c6:	f843 2f2c 	str.w	r2, [r3, #44]!
 80063ca:	626b      	str	r3, [r5, #36]	; 0x24
 80063cc:	e7c9      	b.n	8006362 <__gnu_unwind_pr_common+0x26a>
 80063ce:	bf00      	nop
 80063d0:	080117b5 	.word	0x080117b5

080063d4 <__aeabi_unwind_cpp_pr0>:
 80063d4:	2300      	movs	r3, #0
 80063d6:	e68f      	b.n	80060f8 <__gnu_unwind_pr_common>

080063d8 <__aeabi_unwind_cpp_pr1>:
 80063d8:	2301      	movs	r3, #1
 80063da:	e68d      	b.n	80060f8 <__gnu_unwind_pr_common>

080063dc <__aeabi_unwind_cpp_pr2>:
 80063dc:	2302      	movs	r3, #2
 80063de:	e68b      	b.n	80060f8 <__gnu_unwind_pr_common>

080063e0 <_Unwind_VRS_Pop>:
 80063e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e2:	4604      	mov	r4, r0
 80063e4:	b0c5      	sub	sp, #276	; 0x114
 80063e6:	2904      	cmp	r1, #4
 80063e8:	d80d      	bhi.n	8006406 <_Unwind_VRS_Pop+0x26>
 80063ea:	e8df f001 	tbb	[pc, r1]
 80063ee:	0357      	.short	0x0357
 80063f0:	310c      	.short	0x310c
 80063f2:	0f          	.byte	0x0f
 80063f3:	00          	.byte	0x00
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80063fa:	b295      	uxth	r5, r2
 80063fc:	d166      	bne.n	80064cc <_Unwind_VRS_Pop+0xec>
 80063fe:	1972      	adds	r2, r6, r5
 8006400:	2a10      	cmp	r2, #16
 8006402:	f240 809f 	bls.w	8006544 <_Unwind_VRS_Pop+0x164>
 8006406:	2002      	movs	r0, #2
 8006408:	b045      	add	sp, #276	; 0x114
 800640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1fa      	bne.n	8006406 <_Unwind_VRS_Pop+0x26>
 8006410:	2a10      	cmp	r2, #16
 8006412:	d8f8      	bhi.n	8006406 <_Unwind_VRS_Pop+0x26>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	06d8      	lsls	r0, r3, #27
 8006418:	f100 80c9 	bmi.w	80065ae <_Unwind_VRS_Pop+0x1ce>
 800641c:	ae22      	add	r6, sp, #136	; 0x88
 800641e:	4630      	mov	r0, r6
 8006420:	9201      	str	r2, [sp, #4]
 8006422:	f000 f977 	bl	8006714 <__gnu_Unwind_Save_WMMXC>
 8006426:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006428:	9a01      	ldr	r2, [sp, #4]
 800642a:	2300      	movs	r3, #0
 800642c:	2501      	movs	r5, #1
 800642e:	fa05 f103 	lsl.w	r1, r5, r3
 8006432:	4211      	tst	r1, r2
 8006434:	d003      	beq.n	800643e <_Unwind_VRS_Pop+0x5e>
 8006436:	6801      	ldr	r1, [r0, #0]
 8006438:	3004      	adds	r0, #4
 800643a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800643e:	3301      	adds	r3, #1
 8006440:	2b04      	cmp	r3, #4
 8006442:	d1f4      	bne.n	800642e <_Unwind_VRS_Pop+0x4e>
 8006444:	63a0      	str	r0, [r4, #56]	; 0x38
 8006446:	4630      	mov	r0, r6
 8006448:	f000 f95a 	bl	8006700 <__gnu_Unwind_Restore_WMMXC>
 800644c:	2000      	movs	r0, #0
 800644e:	e7db      	b.n	8006408 <_Unwind_VRS_Pop+0x28>
 8006450:	2b03      	cmp	r3, #3
 8006452:	d1d8      	bne.n	8006406 <_Unwind_VRS_Pop+0x26>
 8006454:	0c15      	lsrs	r5, r2, #16
 8006456:	b297      	uxth	r7, r2
 8006458:	19eb      	adds	r3, r5, r7
 800645a:	2b10      	cmp	r3, #16
 800645c:	d8d3      	bhi.n	8006406 <_Unwind_VRS_Pop+0x26>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	071e      	lsls	r6, r3, #28
 8006462:	f100 80b8 	bmi.w	80065d6 <_Unwind_VRS_Pop+0x1f6>
 8006466:	ae22      	add	r6, sp, #136	; 0x88
 8006468:	4630      	mov	r0, r6
 800646a:	007f      	lsls	r7, r7, #1
 800646c:	f000 f926 	bl	80066bc <__gnu_Unwind_Save_WMMXD>
 8006470:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8006474:	1e7b      	subs	r3, r7, #1
 8006476:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006478:	b157      	cbz	r7, 8006490 <_Unwind_VRS_Pop+0xb0>
 800647a:	4629      	mov	r1, r5
 800647c:	3a04      	subs	r2, #4
 800647e:	f851 0b04 	ldr.w	r0, [r1], #4
 8006482:	3b01      	subs	r3, #1
 8006484:	f842 0f04 	str.w	r0, [r2, #4]!
 8006488:	1c58      	adds	r0, r3, #1
 800648a:	d1f8      	bne.n	800647e <_Unwind_VRS_Pop+0x9e>
 800648c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8006490:	4630      	mov	r0, r6
 8006492:	63a5      	str	r5, [r4, #56]	; 0x38
 8006494:	f000 f8f0 	bl	8006678 <__gnu_Unwind_Restore_WMMXD>
 8006498:	2000      	movs	r0, #0
 800649a:	e7b5      	b.n	8006408 <_Unwind_VRS_Pop+0x28>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1b2      	bne.n	8006406 <_Unwind_VRS_Pop+0x26>
 80064a0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80064a2:	b297      	uxth	r7, r2
 80064a4:	1d20      	adds	r0, r4, #4
 80064a6:	2601      	movs	r6, #1
 80064a8:	fa06 f103 	lsl.w	r1, r6, r3
 80064ac:	4239      	tst	r1, r7
 80064ae:	f103 0301 	add.w	r3, r3, #1
 80064b2:	d002      	beq.n	80064ba <_Unwind_VRS_Pop+0xda>
 80064b4:	6829      	ldr	r1, [r5, #0]
 80064b6:	3504      	adds	r5, #4
 80064b8:	6001      	str	r1, [r0, #0]
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	f100 0004 	add.w	r0, r0, #4
 80064c0:	d1f2      	bne.n	80064a8 <_Unwind_VRS_Pop+0xc8>
 80064c2:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80064c6:	d13b      	bne.n	8006540 <_Unwind_VRS_Pop+0x160>
 80064c8:	63a5      	str	r5, [r4, #56]	; 0x38
 80064ca:	e79d      	b.n	8006408 <_Unwind_VRS_Pop+0x28>
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d19a      	bne.n	8006406 <_Unwind_VRS_Pop+0x26>
 80064d0:	1977      	adds	r7, r6, r5
 80064d2:	2f20      	cmp	r7, #32
 80064d4:	d897      	bhi.n	8006406 <_Unwind_VRS_Pop+0x26>
 80064d6:	2e0f      	cmp	r6, #15
 80064d8:	d965      	bls.n	80065a6 <_Unwind_VRS_Pop+0x1c6>
 80064da:	462f      	mov	r7, r5
 80064dc:	2d00      	cmp	r5, #0
 80064de:	d148      	bne.n	8006572 <_Unwind_VRS_Pop+0x192>
 80064e0:	462a      	mov	r2, r5
 80064e2:	2700      	movs	r7, #0
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80064e8:	dd71      	ble.n	80065ce <_Unwind_VRS_Pop+0x1ee>
 80064ea:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80064ee:	4601      	mov	r1, r0
 80064f0:	a844      	add	r0, sp, #272	; 0x110
 80064f2:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80064f6:	388c      	subs	r0, #140	; 0x8c
 80064f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80064fc:	4291      	cmp	r1, r2
 80064fe:	f840 5f04 	str.w	r5, [r0, #4]!
 8006502:	d1f9      	bne.n	80064f8 <_Unwind_VRS_Pop+0x118>
 8006504:	4608      	mov	r0, r1
 8006506:	b197      	cbz	r7, 800652e <_Unwind_VRS_Pop+0x14e>
 8006508:	4632      	mov	r2, r6
 800650a:	2e10      	cmp	r6, #16
 800650c:	a944      	add	r1, sp, #272	; 0x110
 800650e:	bf38      	it	cc
 8006510:	2210      	movcc	r2, #16
 8006512:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006516:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800651a:	0079      	lsls	r1, r7, #1
 800651c:	3a04      	subs	r2, #4
 800651e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006522:	f850 5b04 	ldr.w	r5, [r0], #4
 8006526:	4281      	cmp	r1, r0
 8006528:	f842 5f04 	str.w	r5, [r2, #4]!
 800652c:	d1f9      	bne.n	8006522 <_Unwind_VRS_Pop+0x142>
 800652e:	2b01      	cmp	r3, #1
 8006530:	d047      	beq.n	80065c2 <_Unwind_VRS_Pop+0x1e2>
 8006532:	2e0f      	cmp	r6, #15
 8006534:	63a1      	str	r1, [r4, #56]	; 0x38
 8006536:	d932      	bls.n	800659e <_Unwind_VRS_Pop+0x1be>
 8006538:	b117      	cbz	r7, 8006540 <_Unwind_VRS_Pop+0x160>
 800653a:	a802      	add	r0, sp, #8
 800653c:	f000 f894 	bl	8006668 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8006540:	2000      	movs	r0, #0
 8006542:	e761      	b.n	8006408 <_Unwind_VRS_Pop+0x28>
 8006544:	2e0f      	cmp	r6, #15
 8006546:	f63f af5e 	bhi.w	8006406 <_Unwind_VRS_Pop+0x26>
 800654a:	2700      	movs	r7, #0
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	07d1      	lsls	r1, r2, #31
 8006550:	d50d      	bpl.n	800656e <_Unwind_VRS_Pop+0x18e>
 8006552:	f022 0101 	bic.w	r1, r2, #1
 8006556:	2b05      	cmp	r3, #5
 8006558:	6021      	str	r1, [r4, #0]
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	4620      	mov	r0, r4
 800655e:	d052      	beq.n	8006606 <_Unwind_VRS_Pop+0x226>
 8006560:	f022 0203 	bic.w	r2, r2, #3
 8006564:	f840 2b48 	str.w	r2, [r0], #72
 8006568:	f000 f872 	bl	8006650 <__gnu_Unwind_Save_VFP>
 800656c:	9b01      	ldr	r3, [sp, #4]
 800656e:	2f00      	cmp	r7, #0
 8006570:	d051      	beq.n	8006616 <_Unwind_VRS_Pop+0x236>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	0751      	lsls	r1, r2, #29
 8006576:	d436      	bmi.n	80065e6 <_Unwind_VRS_Pop+0x206>
 8006578:	2b01      	cmp	r3, #1
 800657a:	d03e      	beq.n	80065fa <_Unwind_VRS_Pop+0x21a>
 800657c:	2e0f      	cmp	r6, #15
 800657e:	d806      	bhi.n	800658e <_Unwind_VRS_Pop+0x1ae>
 8006580:	a822      	add	r0, sp, #136	; 0x88
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	f000 f86c 	bl	8006660 <__gnu_Unwind_Save_VFP_D>
 8006588:	9b01      	ldr	r3, [sp, #4]
 800658a:	2f00      	cmp	r7, #0
 800658c:	d0a8      	beq.n	80064e0 <_Unwind_VRS_Pop+0x100>
 800658e:	a802      	add	r0, sp, #8
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	f000 f86d 	bl	8006670 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8006596:	9b01      	ldr	r3, [sp, #4]
 8006598:	f1c6 0210 	rsb	r2, r6, #16
 800659c:	e7a2      	b.n	80064e4 <_Unwind_VRS_Pop+0x104>
 800659e:	a822      	add	r0, sp, #136	; 0x88
 80065a0:	f000 f85a 	bl	8006658 <__gnu_Unwind_Restore_VFP_D>
 80065a4:	e7c8      	b.n	8006538 <_Unwind_VRS_Pop+0x158>
 80065a6:	2f10      	cmp	r7, #16
 80065a8:	d9cf      	bls.n	800654a <_Unwind_VRS_Pop+0x16a>
 80065aa:	3f10      	subs	r7, #16
 80065ac:	e7ce      	b.n	800654c <_Unwind_VRS_Pop+0x16c>
 80065ae:	f023 0310 	bic.w	r3, r3, #16
 80065b2:	6023      	str	r3, [r4, #0]
 80065b4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80065b8:	9201      	str	r2, [sp, #4]
 80065ba:	f000 f8ab 	bl	8006714 <__gnu_Unwind_Save_WMMXC>
 80065be:	9a01      	ldr	r2, [sp, #4]
 80065c0:	e72c      	b.n	800641c <_Unwind_VRS_Pop+0x3c>
 80065c2:	3104      	adds	r1, #4
 80065c4:	63a1      	str	r1, [r4, #56]	; 0x38
 80065c6:	a822      	add	r0, sp, #136	; 0x88
 80065c8:	f000 f83e 	bl	8006648 <__gnu_Unwind_Restore_VFP>
 80065cc:	e7b8      	b.n	8006540 <_Unwind_VRS_Pop+0x160>
 80065ce:	2f00      	cmp	r7, #0
 80065d0:	d19a      	bne.n	8006508 <_Unwind_VRS_Pop+0x128>
 80065d2:	4601      	mov	r1, r0
 80065d4:	e7ab      	b.n	800652e <_Unwind_VRS_Pop+0x14e>
 80065d6:	f023 0308 	bic.w	r3, r3, #8
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80065e0:	f000 f86c 	bl	80066bc <__gnu_Unwind_Save_WMMXD>
 80065e4:	e73f      	b.n	8006466 <_Unwind_VRS_Pop+0x86>
 80065e6:	4620      	mov	r0, r4
 80065e8:	f022 0204 	bic.w	r2, r2, #4
 80065ec:	f840 2bd0 	str.w	r2, [r0], #208
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	f000 f83d 	bl	8006670 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80065f6:	9b01      	ldr	r3, [sp, #4]
 80065f8:	e7be      	b.n	8006578 <_Unwind_VRS_Pop+0x198>
 80065fa:	a822      	add	r0, sp, #136	; 0x88
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	f000 f827 	bl	8006650 <__gnu_Unwind_Save_VFP>
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	e7c8      	b.n	8006598 <_Unwind_VRS_Pop+0x1b8>
 8006606:	f041 0102 	orr.w	r1, r1, #2
 800660a:	f840 1b48 	str.w	r1, [r0], #72
 800660e:	f000 f827 	bl	8006660 <__gnu_Unwind_Save_VFP_D>
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	e7ab      	b.n	800656e <_Unwind_VRS_Pop+0x18e>
 8006616:	2b01      	cmp	r3, #1
 8006618:	d003      	beq.n	8006622 <_Unwind_VRS_Pop+0x242>
 800661a:	2e0f      	cmp	r6, #15
 800661c:	f63f af60 	bhi.w	80064e0 <_Unwind_VRS_Pop+0x100>
 8006620:	e7ae      	b.n	8006580 <_Unwind_VRS_Pop+0x1a0>
 8006622:	a822      	add	r0, sp, #136	; 0x88
 8006624:	9301      	str	r3, [sp, #4]
 8006626:	f000 f813 	bl	8006650 <__gnu_Unwind_Save_VFP>
 800662a:	9b01      	ldr	r3, [sp, #4]
 800662c:	e758      	b.n	80064e0 <_Unwind_VRS_Pop+0x100>
 800662e:	bf00      	nop

08006630 <__restore_core_regs>:
 8006630:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8006634:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8006638:	469c      	mov	ip, r3
 800663a:	46a6      	mov	lr, r4
 800663c:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8006640:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8006644:	46e5      	mov	sp, ip
 8006646:	bd00      	pop	{pc}

08006648 <__gnu_Unwind_Restore_VFP>:
 8006648:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop

08006650 <__gnu_Unwind_Save_VFP>:
 8006650:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop

08006658 <__gnu_Unwind_Restore_VFP_D>:
 8006658:	ec90 0b20 	vldmia	r0, {d0-d15}
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop

08006660 <__gnu_Unwind_Save_VFP_D>:
 8006660:	ec80 0b20 	vstmia	r0, {d0-d15}
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop

08006668 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8006668:	ecd0 0b20 	vldmia	r0, {d16-d31}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop

08006670 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8006670:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop

08006678 <__gnu_Unwind_Restore_WMMXD>:
 8006678:	ecf0 0102 	ldfe	f0, [r0], #8
 800667c:	ecf0 1102 	ldfe	f1, [r0], #8
 8006680:	ecf0 2102 	ldfe	f2, [r0], #8
 8006684:	ecf0 3102 	ldfe	f3, [r0], #8
 8006688:	ecf0 4102 	ldfe	f4, [r0], #8
 800668c:	ecf0 5102 	ldfe	f5, [r0], #8
 8006690:	ecf0 6102 	ldfe	f6, [r0], #8
 8006694:	ecf0 7102 	ldfe	f7, [r0], #8
 8006698:	ecf0 8102 	ldfp	f0, [r0], #8
 800669c:	ecf0 9102 	ldfp	f1, [r0], #8
 80066a0:	ecf0 a102 	ldfp	f2, [r0], #8
 80066a4:	ecf0 b102 	ldfp	f3, [r0], #8
 80066a8:	ecf0 c102 	ldfp	f4, [r0], #8
 80066ac:	ecf0 d102 	ldfp	f5, [r0], #8
 80066b0:	ecf0 e102 	ldfp	f6, [r0], #8
 80066b4:	ecf0 f102 	ldfp	f7, [r0], #8
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop

080066bc <__gnu_Unwind_Save_WMMXD>:
 80066bc:	ece0 0102 	stfe	f0, [r0], #8
 80066c0:	ece0 1102 	stfe	f1, [r0], #8
 80066c4:	ece0 2102 	stfe	f2, [r0], #8
 80066c8:	ece0 3102 	stfe	f3, [r0], #8
 80066cc:	ece0 4102 	stfe	f4, [r0], #8
 80066d0:	ece0 5102 	stfe	f5, [r0], #8
 80066d4:	ece0 6102 	stfe	f6, [r0], #8
 80066d8:	ece0 7102 	stfe	f7, [r0], #8
 80066dc:	ece0 8102 	stfp	f0, [r0], #8
 80066e0:	ece0 9102 	stfp	f1, [r0], #8
 80066e4:	ece0 a102 	stfp	f2, [r0], #8
 80066e8:	ece0 b102 	stfp	f3, [r0], #8
 80066ec:	ece0 c102 	stfp	f4, [r0], #8
 80066f0:	ece0 d102 	stfp	f5, [r0], #8
 80066f4:	ece0 e102 	stfp	f6, [r0], #8
 80066f8:	ece0 f102 	stfp	f7, [r0], #8
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop

08006700 <__gnu_Unwind_Restore_WMMXC>:
 8006700:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8006704:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8006708:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800670c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop

08006714 <__gnu_Unwind_Save_WMMXC>:
 8006714:	fca0 8101 	stc2	1, cr8, [r0], #4
 8006718:	fca0 9101 	stc2	1, cr9, [r0], #4
 800671c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8006720:	fca0 b101 	stc2	1, cr11, [r0], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop

08006728 <_Unwind_RaiseException>:
 8006728:	46ec      	mov	ip, sp
 800672a:	b500      	push	{lr}
 800672c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006730:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e92d 000c 	stmdb	sp!, {r2, r3}
 800673c:	a901      	add	r1, sp, #4
 800673e:	f7ff fbe7 	bl	8005f10 <__gnu_Unwind_RaiseException>
 8006742:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006746:	b012      	add	sp, #72	; 0x48
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop

0800674c <_Unwind_Resume>:
 800674c:	46ec      	mov	ip, sp
 800674e:	b500      	push	{lr}
 8006750:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006754:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006760:	a901      	add	r1, sp, #4
 8006762:	f7ff fc0f 	bl	8005f84 <__gnu_Unwind_Resume>
 8006766:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800676a:	b012      	add	sp, #72	; 0x48
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop

08006770 <_Unwind_Resume_or_Rethrow>:
 8006770:	46ec      	mov	ip, sp
 8006772:	b500      	push	{lr}
 8006774:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006778:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006784:	a901      	add	r1, sp, #4
 8006786:	f7ff fc1f 	bl	8005fc8 <__gnu_Unwind_Resume_or_Rethrow>
 800678a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800678e:	b012      	add	sp, #72	; 0x48
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop

08006794 <_Unwind_ForcedUnwind>:
 8006794:	46ec      	mov	ip, sp
 8006796:	b500      	push	{lr}
 8006798:	e92d 5000 	stmdb	sp!, {ip, lr}
 800679c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80067a8:	ab01      	add	r3, sp, #4
 80067aa:	f7ff fbe1 	bl	8005f70 <__gnu_Unwind_ForcedUnwind>
 80067ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80067b2:	b012      	add	sp, #72	; 0x48
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop

080067b8 <_Unwind_Backtrace>:
 80067b8:	46ec      	mov	ip, sp
 80067ba:	b500      	push	{lr}
 80067bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80067c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80067cc:	aa01      	add	r2, sp, #4
 80067ce:	f7ff fc5b 	bl	8006088 <__gnu_Unwind_Backtrace>
 80067d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80067d6:	b012      	add	sp, #72	; 0x48
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop

080067dc <next_unwind_byte>:
 80067dc:	7a03      	ldrb	r3, [r0, #8]
 80067de:	b91b      	cbnz	r3, 80067e8 <next_unwind_byte+0xc>
 80067e0:	7a43      	ldrb	r3, [r0, #9]
 80067e2:	b943      	cbnz	r3, 80067f6 <next_unwind_byte+0x1a>
 80067e4:	20b0      	movs	r0, #176	; 0xb0
 80067e6:	4770      	bx	lr
 80067e8:	1e5a      	subs	r2, r3, #1
 80067ea:	6803      	ldr	r3, [r0, #0]
 80067ec:	7202      	strb	r2, [r0, #8]
 80067ee:	021a      	lsls	r2, r3, #8
 80067f0:	6002      	str	r2, [r0, #0]
 80067f2:	0e18      	lsrs	r0, r3, #24
 80067f4:	4770      	bx	lr
 80067f6:	6842      	ldr	r2, [r0, #4]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b410      	push	{r4}
 80067fc:	7243      	strb	r3, [r0, #9]
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	2103      	movs	r1, #3
 8006802:	1d14      	adds	r4, r2, #4
 8006804:	7201      	strb	r1, [r0, #8]
 8006806:	021a      	lsls	r2, r3, #8
 8006808:	6044      	str	r4, [r0, #4]
 800680a:	6002      	str	r2, [r0, #0]
 800680c:	bc10      	pop	{r4}
 800680e:	0e18      	lsrs	r0, r3, #24
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop

08006814 <_Unwind_GetGR.constprop.0>:
 8006814:	b500      	push	{lr}
 8006816:	b085      	sub	sp, #20
 8006818:	aa03      	add	r2, sp, #12
 800681a:	2300      	movs	r3, #0
 800681c:	9200      	str	r2, [sp, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	220c      	movs	r2, #12
 8006822:	f7ff fbe3 	bl	8005fec <_Unwind_VRS_Get>
 8006826:	9803      	ldr	r0, [sp, #12]
 8006828:	b005      	add	sp, #20
 800682a:	f85d fb04 	ldr.w	pc, [sp], #4
 800682e:	bf00      	nop

08006830 <unwind_UCB_from_context>:
 8006830:	e7f0      	b.n	8006814 <_Unwind_GetGR.constprop.0>
 8006832:	bf00      	nop

08006834 <__gnu_unwind_execute>:
 8006834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006838:	4606      	mov	r6, r0
 800683a:	460d      	mov	r5, r1
 800683c:	b085      	sub	sp, #20
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	4628      	mov	r0, r5
 8006844:	f7ff ffca 	bl	80067dc <next_unwind_byte>
 8006848:	28b0      	cmp	r0, #176	; 0xb0
 800684a:	4604      	mov	r4, r0
 800684c:	f000 80b4 	beq.w	80069b8 <__gnu_unwind_execute+0x184>
 8006850:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 8006854:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8006858:	d020      	beq.n	800689c <__gnu_unwind_execute+0x68>
 800685a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d07a      	beq.n	8006958 <__gnu_unwind_execute+0x124>
 8006862:	2b90      	cmp	r3, #144	; 0x90
 8006864:	d035      	beq.n	80068d2 <__gnu_unwind_execute+0x9e>
 8006866:	2ba0      	cmp	r3, #160	; 0xa0
 8006868:	d048      	beq.n	80068fc <__gnu_unwind_execute+0xc8>
 800686a:	2bb0      	cmp	r3, #176	; 0xb0
 800686c:	d05c      	beq.n	8006928 <__gnu_unwind_execute+0xf4>
 800686e:	2bc0      	cmp	r3, #192	; 0xc0
 8006870:	f000 8089 	beq.w	8006986 <__gnu_unwind_execute+0x152>
 8006874:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8006878:	2bd0      	cmp	r3, #208	; 0xd0
 800687a:	d10b      	bne.n	8006894 <__gnu_unwind_execute+0x60>
 800687c:	f000 0207 	and.w	r2, r0, #7
 8006880:	3201      	adds	r2, #1
 8006882:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006886:	2305      	movs	r3, #5
 8006888:	2101      	movs	r1, #1
 800688a:	4630      	mov	r0, r6
 800688c:	f7ff fda8 	bl	80063e0 <_Unwind_VRS_Pop>
 8006890:	2800      	cmp	r0, #0
 8006892:	d0d6      	beq.n	8006842 <__gnu_unwind_execute+0xe>
 8006894:	2009      	movs	r0, #9
 8006896:	b005      	add	sp, #20
 8006898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800689c:	f10d 090c 	add.w	r9, sp, #12
 80068a0:	4619      	mov	r1, r3
 80068a2:	0087      	lsls	r7, r0, #2
 80068a4:	f8cd 9000 	str.w	r9, [sp]
 80068a8:	220d      	movs	r2, #13
 80068aa:	4630      	mov	r0, r6
 80068ac:	f7ff fb9e 	bl	8005fec <_Unwind_VRS_Get>
 80068b0:	b2ff      	uxtb	r7, r7
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	3704      	adds	r7, #4
 80068b6:	0660      	lsls	r0, r4, #25
 80068b8:	bf4c      	ite	mi
 80068ba:	1bdf      	submi	r7, r3, r7
 80068bc:	18ff      	addpl	r7, r7, r3
 80068be:	2300      	movs	r3, #0
 80068c0:	f8cd 9000 	str.w	r9, [sp]
 80068c4:	4619      	mov	r1, r3
 80068c6:	220d      	movs	r2, #13
 80068c8:	4630      	mov	r0, r6
 80068ca:	9703      	str	r7, [sp, #12]
 80068cc:	f7ff fbb4 	bl	8006038 <_Unwind_VRS_Set>
 80068d0:	e7b7      	b.n	8006842 <__gnu_unwind_execute+0xe>
 80068d2:	f000 030d 	and.w	r3, r0, #13
 80068d6:	2b0d      	cmp	r3, #13
 80068d8:	d0dc      	beq.n	8006894 <__gnu_unwind_execute+0x60>
 80068da:	af03      	add	r7, sp, #12
 80068dc:	2300      	movs	r3, #0
 80068de:	f000 020f 	and.w	r2, r0, #15
 80068e2:	4619      	mov	r1, r3
 80068e4:	9700      	str	r7, [sp, #0]
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff fb80 	bl	8005fec <_Unwind_VRS_Get>
 80068ec:	2300      	movs	r3, #0
 80068ee:	9700      	str	r7, [sp, #0]
 80068f0:	4619      	mov	r1, r3
 80068f2:	220d      	movs	r2, #13
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff fb9f 	bl	8006038 <_Unwind_VRS_Set>
 80068fa:	e7a2      	b.n	8006842 <__gnu_unwind_execute+0xe>
 80068fc:	43c2      	mvns	r2, r0
 80068fe:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8006902:	f002 0207 	and.w	r2, r2, #7
 8006906:	fa43 f202 	asr.w	r2, r3, r2
 800690a:	0701      	lsls	r1, r0, #28
 800690c:	ea02 0203 	and.w	r2, r2, r3
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	bf48      	it	mi
 8006916:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800691a:	4619      	mov	r1, r3
 800691c:	4630      	mov	r0, r6
 800691e:	f7ff fd5f 	bl	80063e0 <_Unwind_VRS_Pop>
 8006922:	2800      	cmp	r0, #0
 8006924:	d1b6      	bne.n	8006894 <__gnu_unwind_execute+0x60>
 8006926:	e78c      	b.n	8006842 <__gnu_unwind_execute+0xe>
 8006928:	28b1      	cmp	r0, #177	; 0xb1
 800692a:	d04a      	beq.n	80069c2 <__gnu_unwind_execute+0x18e>
 800692c:	28b2      	cmp	r0, #178	; 0xb2
 800692e:	d053      	beq.n	80069d8 <__gnu_unwind_execute+0x1a4>
 8006930:	28b3      	cmp	r0, #179	; 0xb3
 8006932:	f000 8081 	beq.w	8006a38 <__gnu_unwind_execute+0x204>
 8006936:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800693a:	2bb4      	cmp	r3, #180	; 0xb4
 800693c:	d0aa      	beq.n	8006894 <__gnu_unwind_execute+0x60>
 800693e:	f000 0207 	and.w	r2, r0, #7
 8006942:	3201      	adds	r2, #1
 8006944:	2301      	movs	r3, #1
 8006946:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800694a:	4619      	mov	r1, r3
 800694c:	4630      	mov	r0, r6
 800694e:	f7ff fd47 	bl	80063e0 <_Unwind_VRS_Pop>
 8006952:	2800      	cmp	r0, #0
 8006954:	d19e      	bne.n	8006894 <__gnu_unwind_execute+0x60>
 8006956:	e774      	b.n	8006842 <__gnu_unwind_execute+0xe>
 8006958:	4628      	mov	r0, r5
 800695a:	f7ff ff3f 	bl	80067dc <next_unwind_byte>
 800695e:	0224      	lsls	r4, r4, #8
 8006960:	4320      	orrs	r0, r4
 8006962:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006966:	d095      	beq.n	8006894 <__gnu_unwind_execute+0x60>
 8006968:	0104      	lsls	r4, r0, #4
 800696a:	2300      	movs	r3, #0
 800696c:	b2a2      	uxth	r2, r4
 800696e:	4619      	mov	r1, r3
 8006970:	4630      	mov	r0, r6
 8006972:	f7ff fd35 	bl	80063e0 <_Unwind_VRS_Pop>
 8006976:	2800      	cmp	r0, #0
 8006978:	d18c      	bne.n	8006894 <__gnu_unwind_execute+0x60>
 800697a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800697e:	bf18      	it	ne
 8006980:	f04f 0801 	movne.w	r8, #1
 8006984:	e75d      	b.n	8006842 <__gnu_unwind_execute+0xe>
 8006986:	28c6      	cmp	r0, #198	; 0xc6
 8006988:	d062      	beq.n	8006a50 <__gnu_unwind_execute+0x21c>
 800698a:	28c7      	cmp	r0, #199	; 0xc7
 800698c:	d06c      	beq.n	8006a68 <__gnu_unwind_execute+0x234>
 800698e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8006992:	2bc0      	cmp	r3, #192	; 0xc0
 8006994:	d07b      	beq.n	8006a8e <__gnu_unwind_execute+0x25a>
 8006996:	28c8      	cmp	r0, #200	; 0xc8
 8006998:	f000 8091 	beq.w	8006abe <__gnu_unwind_execute+0x28a>
 800699c:	28c9      	cmp	r0, #201	; 0xc9
 800699e:	f47f af79 	bne.w	8006894 <__gnu_unwind_execute+0x60>
 80069a2:	4628      	mov	r0, r5
 80069a4:	f7ff ff1a 	bl	80067dc <next_unwind_byte>
 80069a8:	0302      	lsls	r2, r0, #12
 80069aa:	f000 000f 	and.w	r0, r0, #15
 80069ae:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80069b2:	3001      	adds	r0, #1
 80069b4:	4302      	orrs	r2, r0
 80069b6:	e766      	b.n	8006886 <__gnu_unwind_execute+0x52>
 80069b8:	f1b8 0f00 	cmp.w	r8, #0
 80069bc:	d06e      	beq.n	8006a9c <__gnu_unwind_execute+0x268>
 80069be:	2000      	movs	r0, #0
 80069c0:	e769      	b.n	8006896 <__gnu_unwind_execute+0x62>
 80069c2:	4628      	mov	r0, r5
 80069c4:	f7ff ff0a 	bl	80067dc <next_unwind_byte>
 80069c8:	4602      	mov	r2, r0
 80069ca:	2800      	cmp	r0, #0
 80069cc:	f43f af62 	beq.w	8006894 <__gnu_unwind_execute+0x60>
 80069d0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80069d4:	d0b9      	beq.n	800694a <__gnu_unwind_execute+0x116>
 80069d6:	e75d      	b.n	8006894 <__gnu_unwind_execute+0x60>
 80069d8:	2300      	movs	r3, #0
 80069da:	f10d 090c 	add.w	r9, sp, #12
 80069de:	220d      	movs	r2, #13
 80069e0:	4619      	mov	r1, r3
 80069e2:	f8cd 9000 	str.w	r9, [sp]
 80069e6:	4630      	mov	r0, r6
 80069e8:	f7ff fb00 	bl	8005fec <_Unwind_VRS_Get>
 80069ec:	4628      	mov	r0, r5
 80069ee:	f7ff fef5 	bl	80067dc <next_unwind_byte>
 80069f2:	0602      	lsls	r2, r0, #24
 80069f4:	f04f 0402 	mov.w	r4, #2
 80069f8:	d50c      	bpl.n	8006a14 <__gnu_unwind_execute+0x1e0>
 80069fa:	9b03      	ldr	r3, [sp, #12]
 80069fc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006a00:	40a0      	lsls	r0, r4
 8006a02:	4403      	add	r3, r0
 8006a04:	4628      	mov	r0, r5
 8006a06:	9303      	str	r3, [sp, #12]
 8006a08:	f7ff fee8 	bl	80067dc <next_unwind_byte>
 8006a0c:	0603      	lsls	r3, r0, #24
 8006a0e:	f104 0407 	add.w	r4, r4, #7
 8006a12:	d4f2      	bmi.n	80069fa <__gnu_unwind_execute+0x1c6>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006a1a:	fa00 f204 	lsl.w	r2, r0, r4
 8006a1e:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8006a22:	2300      	movs	r3, #0
 8006a24:	4414      	add	r4, r2
 8006a26:	f8cd 9000 	str.w	r9, [sp]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	220d      	movs	r2, #13
 8006a2e:	4630      	mov	r0, r6
 8006a30:	9403      	str	r4, [sp, #12]
 8006a32:	f7ff fb01 	bl	8006038 <_Unwind_VRS_Set>
 8006a36:	e704      	b.n	8006842 <__gnu_unwind_execute+0xe>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7ff fecf 	bl	80067dc <next_unwind_byte>
 8006a3e:	0301      	lsls	r1, r0, #12
 8006a40:	f000 000f 	and.w	r0, r0, #15
 8006a44:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8006a48:	1c42      	adds	r2, r0, #1
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	e77c      	b.n	800694a <__gnu_unwind_execute+0x116>
 8006a50:	4628      	mov	r0, r5
 8006a52:	f7ff fec3 	bl	80067dc <next_unwind_byte>
 8006a56:	0301      	lsls	r1, r0, #12
 8006a58:	f000 000f 	and.w	r0, r0, #15
 8006a5c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8006a60:	1c42      	adds	r2, r0, #1
 8006a62:	2303      	movs	r3, #3
 8006a64:	430a      	orrs	r2, r1
 8006a66:	e770      	b.n	800694a <__gnu_unwind_execute+0x116>
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f7ff feb7 	bl	80067dc <next_unwind_byte>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f43f af0f 	beq.w	8006894 <__gnu_unwind_execute+0x60>
 8006a76:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8006a7a:	f47f af0b 	bne.w	8006894 <__gnu_unwind_execute+0x60>
 8006a7e:	2104      	movs	r1, #4
 8006a80:	4630      	mov	r0, r6
 8006a82:	f7ff fcad 	bl	80063e0 <_Unwind_VRS_Pop>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f47f af04 	bne.w	8006894 <__gnu_unwind_execute+0x60>
 8006a8c:	e6d9      	b.n	8006842 <__gnu_unwind_execute+0xe>
 8006a8e:	f000 020f 	and.w	r2, r0, #15
 8006a92:	3201      	adds	r2, #1
 8006a94:	2303      	movs	r3, #3
 8006a96:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8006a9a:	e756      	b.n	800694a <__gnu_unwind_execute+0x116>
 8006a9c:	ac03      	add	r4, sp, #12
 8006a9e:	4643      	mov	r3, r8
 8006aa0:	220e      	movs	r2, #14
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	9400      	str	r4, [sp, #0]
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f7ff faa0 	bl	8005fec <_Unwind_VRS_Get>
 8006aac:	9400      	str	r4, [sp, #0]
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4643      	mov	r3, r8
 8006ab2:	220f      	movs	r2, #15
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	f7ff fabf 	bl	8006038 <_Unwind_VRS_Set>
 8006aba:	4640      	mov	r0, r8
 8006abc:	e6eb      	b.n	8006896 <__gnu_unwind_execute+0x62>
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f7ff fe8c 	bl	80067dc <next_unwind_byte>
 8006ac4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006ac8:	f000 030f 	and.w	r3, r0, #15
 8006acc:	3210      	adds	r2, #16
 8006ace:	3301      	adds	r3, #1
 8006ad0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006ad4:	e6d7      	b.n	8006886 <__gnu_unwind_execute+0x52>
 8006ad6:	bf00      	nop

08006ad8 <__gnu_unwind_frame>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006adc:	b084      	sub	sp, #16
 8006ade:	2003      	movs	r0, #3
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	f88d 000c 	strb.w	r0, [sp, #12]
 8006ae6:	79dc      	ldrb	r4, [r3, #7]
 8006ae8:	0212      	lsls	r2, r2, #8
 8006aea:	3308      	adds	r3, #8
 8006aec:	4608      	mov	r0, r1
 8006aee:	a901      	add	r1, sp, #4
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	f88d 400d 	strb.w	r4, [sp, #13]
 8006af6:	9302      	str	r3, [sp, #8]
 8006af8:	f7ff fe9c 	bl	8006834 <__gnu_unwind_execute>
 8006afc:	b004      	add	sp, #16
 8006afe:	bd10      	pop	{r4, pc}

08006b00 <_Unwind_GetRegionStart>:
 8006b00:	b508      	push	{r3, lr}
 8006b02:	f7ff fe95 	bl	8006830 <unwind_UCB_from_context>
 8006b06:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006b08:	bd08      	pop	{r3, pc}
 8006b0a:	bf00      	nop

08006b0c <_Unwind_GetLanguageSpecificData>:
 8006b0c:	b508      	push	{r3, lr}
 8006b0e:	f7ff fe8f 	bl	8006830 <unwind_UCB_from_context>
 8006b12:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006b14:	79d8      	ldrb	r0, [r3, #7]
 8006b16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b1a:	3008      	adds	r0, #8
 8006b1c:	bd08      	pop	{r3, pc}
 8006b1e:	bf00      	nop

08006b20 <_Unwind_GetTextRelBase>:
 8006b20:	b508      	push	{r3, lr}
 8006b22:	f00c fbdb 	bl	80132dc <abort>
 8006b26:	bf00      	nop

08006b28 <_Unwind_GetDataRelBase>:
 8006b28:	b508      	push	{r3, lr}
 8006b2a:	f7ff fff9 	bl	8006b20 <_Unwind_GetTextRelBase>
 8006b2e:	bf00      	nop

08006b30 <d_make_comp>:
 8006b30:	b470      	push	{r4, r5, r6}
 8006b32:	1e4c      	subs	r4, r1, #1
 8006b34:	2c4a      	cmp	r4, #74	; 0x4a
 8006b36:	d82c      	bhi.n	8006b92 <d_make_comp+0x62>
 8006b38:	e8df f004 	tbb	[pc, r4]
 8006b3c:	3c3c3c3c 	.word	0x3c3c3c3c
 8006b40:	2b2b2b2b 	.word	0x2b2b2b2b
 8006b44:	263c2626 	.word	0x263c2626
 8006b48:	26262626 	.word	0x26262626
 8006b4c:	26262626 	.word	0x26262626
 8006b50:	2b262626 	.word	0x2b262626
 8006b54:	27272727 	.word	0x27272727
 8006b58:	27272727 	.word	0x27272727
 8006b5c:	2626263c 	.word	0x2626263c
 8006b60:	262b2626 	.word	0x262b2626
 8006b64:	2b3c3d27 	.word	0x2b3c3d27
 8006b68:	3d27273c 	.word	0x3d27273c
 8006b6c:	26262b2b 	.word	0x26262b2b
 8006b70:	3c3c3c3c 	.word	0x3c3c3c3c
 8006b74:	3c3c263c 	.word	0x3c3c263c
 8006b78:	2b2b3c26 	.word	0x2b2b3c26
 8006b7c:	2b262626 	.word	0x2b262626
 8006b80:	26262b2b 	.word	0x26262b2b
 8006b84:	3c26      	.short	0x3c26
 8006b86:	3c          	.byte	0x3c
 8006b87:	00          	.byte	0x00
 8006b88:	b1ca      	cbz	r2, 8006bbe <d_make_comp+0x8e>
 8006b8a:	6944      	ldr	r4, [r0, #20]
 8006b8c:	6985      	ldr	r5, [r0, #24]
 8006b8e:	42ac      	cmp	r4, r5
 8006b90:	db02      	blt.n	8006b98 <d_make_comp+0x68>
 8006b92:	2000      	movs	r0, #0
 8006b94:	bc70      	pop	{r4, r5, r6}
 8006b96:	4770      	bx	lr
 8006b98:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8006b9c:	6906      	ldr	r6, [r0, #16]
 8006b9e:	3401      	adds	r4, #1
 8006ba0:	00ad      	lsls	r5, r5, #2
 8006ba2:	6144      	str	r4, [r0, #20]
 8006ba4:	1974      	adds	r4, r6, r5
 8006ba6:	d00c      	beq.n	8006bc2 <d_make_comp+0x92>
 8006ba8:	5571      	strb	r1, [r6, r5]
 8006baa:	6062      	str	r2, [r4, #4]
 8006bac:	60a3      	str	r3, [r4, #8]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	bc70      	pop	{r4, r5, r6}
 8006bb2:	4770      	bx	lr
 8006bb4:	b11a      	cbz	r2, 8006bbe <d_make_comp+0x8e>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e7      	bne.n	8006b8a <d_make_comp+0x5a>
 8006bba:	4618      	mov	r0, r3
 8006bbc:	e7ea      	b.n	8006b94 <d_make_comp+0x64>
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	e7e8      	b.n	8006b94 <d_make_comp+0x64>
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	e7e6      	b.n	8006b94 <d_make_comp+0x64>
 8006bc6:	bf00      	nop

08006bc8 <d_cv_qualifiers>:
 8006bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	68c3      	ldr	r3, [r0, #12]
 8006bce:	f1b2 0a00 	subs.w	sl, r2, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	bf15      	itete	ne
 8006bda:	f04f 081c 	movne.w	r8, #28
 8006bde:	f04f 0819 	moveq.w	r8, #25
 8006be2:	f04f 091d 	movne.w	r9, #29
 8006be6:	f04f 091a 	moveq.w	r9, #26
 8006bea:	bf14      	ite	ne
 8006bec:	261e      	movne	r6, #30
 8006bee:	261b      	moveq	r6, #27
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	e012      	b.n	8006c1a <d_cv_qualifiers+0x52>
 8006bf4:	2a56      	cmp	r2, #86	; 0x56
 8006bf6:	d01b      	beq.n	8006c30 <d_cv_qualifiers+0x68>
 8006bf8:	2a4b      	cmp	r2, #75	; 0x4b
 8006bfa:	d122      	bne.n	8006c42 <d_cv_qualifiers+0x7a>
 8006bfc:	60e1      	str	r1, [r4, #12]
 8006bfe:	4631      	mov	r1, r6
 8006c00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c02:	3306      	adds	r3, #6
 8006c04:	6323      	str	r3, [r4, #48]	; 0x30
 8006c06:	2300      	movs	r3, #0
 8006c08:	461a      	mov	r2, r3
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f7ff ff90 	bl	8006b30 <d_make_comp>
 8006c10:	6028      	str	r0, [r5, #0]
 8006c12:	b1a0      	cbz	r0, 8006c3e <d_cv_qualifiers+0x76>
 8006c14:	68e3      	ldr	r3, [r4, #12]
 8006c16:	1d05      	adds	r5, r0, #4
 8006c18:	781a      	ldrb	r2, [r3, #0]
 8006c1a:	2a72      	cmp	r2, #114	; 0x72
 8006c1c:	f103 0101 	add.w	r1, r3, #1
 8006c20:	d1e8      	bne.n	8006bf4 <d_cv_qualifiers+0x2c>
 8006c22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c24:	3301      	adds	r3, #1
 8006c26:	3209      	adds	r2, #9
 8006c28:	60e3      	str	r3, [r4, #12]
 8006c2a:	6322      	str	r2, [r4, #48]	; 0x30
 8006c2c:	4641      	mov	r1, r8
 8006c2e:	e7ea      	b.n	8006c06 <d_cv_qualifiers+0x3e>
 8006c30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c32:	3301      	adds	r3, #1
 8006c34:	3209      	adds	r2, #9
 8006c36:	60e3      	str	r3, [r4, #12]
 8006c38:	6322      	str	r2, [r4, #48]	; 0x30
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	e7e3      	b.n	8006c06 <d_cv_qualifiers+0x3e>
 8006c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c42:	f1ba 0f00 	cmp.w	sl, #0
 8006c46:	d101      	bne.n	8006c4c <d_cv_qualifiers+0x84>
 8006c48:	2a46      	cmp	r2, #70	; 0x46
 8006c4a:	d002      	beq.n	8006c52 <d_cv_qualifiers+0x8a>
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c52:	42bd      	cmp	r5, r7
 8006c54:	d0fa      	beq.n	8006c4c <d_cv_qualifiers+0x84>
 8006c56:	201d      	movs	r0, #29
 8006c58:	211e      	movs	r1, #30
 8006c5a:	221c      	movs	r2, #28
 8006c5c:	e007      	b.n	8006c6e <d_cv_qualifiers+0xa6>
 8006c5e:	2b1b      	cmp	r3, #27
 8006c60:	d00b      	beq.n	8006c7a <d_cv_qualifiers+0xb2>
 8006c62:	2b19      	cmp	r3, #25
 8006c64:	d100      	bne.n	8006c68 <d_cv_qualifiers+0xa0>
 8006c66:	703a      	strb	r2, [r7, #0]
 8006c68:	3704      	adds	r7, #4
 8006c6a:	42bd      	cmp	r5, r7
 8006c6c:	d0ee      	beq.n	8006c4c <d_cv_qualifiers+0x84>
 8006c6e:	683f      	ldr	r7, [r7, #0]
 8006c70:	783b      	ldrb	r3, [r7, #0]
 8006c72:	2b1a      	cmp	r3, #26
 8006c74:	d1f3      	bne.n	8006c5e <d_cv_qualifiers+0x96>
 8006c76:	7038      	strb	r0, [r7, #0]
 8006c78:	e7f6      	b.n	8006c68 <d_cv_qualifiers+0xa0>
 8006c7a:	7039      	strb	r1, [r7, #0]
 8006c7c:	e7f4      	b.n	8006c68 <d_cv_qualifiers+0xa0>
 8006c7e:	bf00      	nop

08006c80 <d_ref_qualifier>:
 8006c80:	b410      	push	{r4}
 8006c82:	68c3      	ldr	r3, [r0, #12]
 8006c84:	460a      	mov	r2, r1
 8006c86:	781c      	ldrb	r4, [r3, #0]
 8006c88:	2c52      	cmp	r4, #82	; 0x52
 8006c8a:	d00d      	beq.n	8006ca8 <d_ref_qualifier+0x28>
 8006c8c:	2c4f      	cmp	r4, #79	; 0x4f
 8006c8e:	d002      	beq.n	8006c96 <d_ref_qualifier+0x16>
 8006c90:	4608      	mov	r0, r1
 8006c92:	bc10      	pop	{r4}
 8006c94:	4770      	bx	lr
 8006c96:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006c98:	2120      	movs	r1, #32
 8006c9a:	3403      	adds	r4, #3
 8006c9c:	6304      	str	r4, [r0, #48]	; 0x30
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60c3      	str	r3, [r0, #12]
 8006ca2:	bc10      	pop	{r4}
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e743      	b.n	8006b30 <d_make_comp>
 8006ca8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006caa:	211f      	movs	r1, #31
 8006cac:	3402      	adds	r4, #2
 8006cae:	6304      	str	r4, [r0, #48]	; 0x30
 8006cb0:	e7f5      	b.n	8006c9e <d_ref_qualifier+0x1e>
 8006cb2:	bf00      	nop

08006cb4 <d_count_templates_scopes>:
 8006cb4:	2a00      	cmp	r2, #0
 8006cb6:	d04c      	beq.n	8006d52 <d_count_templates_scopes+0x9e>
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4605      	mov	r5, r0
 8006cbc:	460e      	mov	r6, r1
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	7823      	ldrb	r3, [r4, #0]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	2b4a      	cmp	r3, #74	; 0x4a
 8006cc6:	d82a      	bhi.n	8006d1e <d_count_templates_scopes+0x6a>
 8006cc8:	e8df f003 	tbb	[pc, r3]
 8006ccc:	3e353535 	.word	0x3e353535
 8006cd0:	26262929 	.word	0x26262929
 8006cd4:	35353535 	.word	0x35353535
 8006cd8:	35353535 	.word	0x35353535
 8006cdc:	35353535 	.word	0x35353535
 8006ce0:	29353535 	.word	0x29353535
 8006ce4:	35353535 	.word	0x35353535
 8006ce8:	35353535 	.word	0x35353535
 8006cec:	2e2e3535 	.word	0x2e2e3535
 8006cf0:	35293535 	.word	0x35293535
 8006cf4:	2a353535 	.word	0x2a353535
 8006cf8:	35353535 	.word	0x35353535
 8006cfc:	35352629 	.word	0x35352629
 8006d00:	35353535 	.word	0x35353535
 8006d04:	35353535 	.word	0x35353535
 8006d08:	29293535 	.word	0x29293535
 8006d0c:	2a2a2a35 	.word	0x2a2a2a35
 8006d10:	3535292a 	.word	0x3535292a
 8006d14:	3535      	.short	0x3535
 8006d16:	35          	.byte	0x35
 8006d17:	00          	.byte	0x00
 8006d18:	68a4      	ldr	r4, [r4, #8]
 8006d1a:	2c00      	cmp	r4, #0
 8006d1c:	d1d0      	bne.n	8006cc0 <d_count_templates_scopes+0xc>
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	6864      	ldr	r4, [r4, #4]
 8006d22:	2c00      	cmp	r4, #0
 8006d24:	d1cc      	bne.n	8006cc0 <d_count_templates_scopes+0xc>
 8006d26:	e7fa      	b.n	8006d1e <d_count_templates_scopes+0x6a>
 8006d28:	6862      	ldr	r2, [r4, #4]
 8006d2a:	7813      	ldrb	r3, [r2, #0]
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d103      	bne.n	8006d38 <d_count_templates_scopes+0x84>
 8006d30:	6833      	ldr	r3, [r6, #0]
 8006d32:	3301      	adds	r3, #1
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	6862      	ldr	r2, [r4, #4]
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f7ff ffba 	bl	8006cb4 <d_count_templates_scopes>
 8006d40:	68a4      	ldr	r4, [r4, #8]
 8006d42:	2c00      	cmp	r4, #0
 8006d44:	d1bc      	bne.n	8006cc0 <d_count_templates_scopes+0xc>
 8006d46:	e7ea      	b.n	8006d1e <d_count_templates_scopes+0x6a>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	602b      	str	r3, [r5, #0]
 8006d4e:	6862      	ldr	r2, [r4, #4]
 8006d50:	e7f2      	b.n	8006d38 <d_count_templates_scopes+0x84>
 8006d52:	4770      	bx	lr

08006d54 <d_append_buffer>:
 8006d54:	b382      	cbz	r2, 8006db8 <d_append_buffer+0x64>
 8006d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006d62:	18af      	adds	r7, r5, r2
 8006d64:	f04f 0800 	mov.w	r8, #0
 8006d68:	e009      	b.n	8006d7e <d_append_buffer+0x2a>
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	42bd      	cmp	r5, r7
 8006d6e:	f101 0101 	add.w	r1, r1, #1
 8006d72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006d76:	54e6      	strb	r6, [r4, r3]
 8006d78:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006d7c:	d01a      	beq.n	8006db4 <d_append_buffer+0x60>
 8006d7e:	29ff      	cmp	r1, #255	; 0xff
 8006d80:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006d84:	d1f1      	bne.n	8006d6a <d_append_buffer+0x16>
 8006d86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006d8a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006d8e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006d92:	4620      	mov	r0, r4
 8006d94:	4798      	blx	r3
 8006d96:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	440b      	add	r3, r1
 8006d9e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006da2:	42bd      	cmp	r5, r7
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006dac:	54e6      	strb	r6, [r4, r3]
 8006dae:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006db2:	d1e4      	bne.n	8006d7e <d_append_buffer+0x2a>
 8006db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <d_number.isra.0>:
 8006dbc:	b430      	push	{r4, r5}
 8006dbe:	6803      	ldr	r3, [r0, #0]
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	781a      	ldrb	r2, [r3, #0]
 8006dc4:	2a6e      	cmp	r2, #110	; 0x6e
 8006dc6:	d015      	beq.n	8006df4 <d_number.isra.0+0x38>
 8006dc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006dcc:	2909      	cmp	r1, #9
 8006dce:	d81b      	bhi.n	8006e08 <d_number.isra.0+0x4c>
 8006dd0:	2500      	movs	r5, #0
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ddc:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	3830      	subs	r0, #48	; 0x30
 8006de4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006de8:	2909      	cmp	r1, #9
 8006dea:	d9f3      	bls.n	8006dd4 <d_number.isra.0+0x18>
 8006dec:	b105      	cbz	r5, 8006df0 <d_number.isra.0+0x34>
 8006dee:	4240      	negs	r0, r0
 8006df0:	bc30      	pop	{r4, r5}
 8006df2:	4770      	bx	lr
 8006df4:	1c59      	adds	r1, r3, #1
 8006df6:	6001      	str	r1, [r0, #0]
 8006df8:	785a      	ldrb	r2, [r3, #1]
 8006dfa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006dfe:	2b09      	cmp	r3, #9
 8006e00:	d802      	bhi.n	8006e08 <d_number.isra.0+0x4c>
 8006e02:	460b      	mov	r3, r1
 8006e04:	2501      	movs	r5, #1
 8006e06:	e7e4      	b.n	8006dd2 <d_number.isra.0+0x16>
 8006e08:	2000      	movs	r0, #0
 8006e0a:	e7f1      	b.n	8006df0 <d_number.isra.0+0x34>

08006e0c <d_number_component>:
 8006e0c:	6943      	ldr	r3, [r0, #20]
 8006e0e:	6982      	ldr	r2, [r0, #24]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	da14      	bge.n	8006e3e <d_number_component+0x32>
 8006e14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006e18:	6901      	ldr	r1, [r0, #16]
 8006e1a:	0092      	lsls	r2, r2, #2
 8006e1c:	b510      	push	{r4, lr}
 8006e1e:	3301      	adds	r3, #1
 8006e20:	188c      	adds	r4, r1, r2
 8006e22:	6143      	str	r3, [r0, #20]
 8006e24:	d008      	beq.n	8006e38 <d_number_component+0x2c>
 8006e26:	2340      	movs	r3, #64	; 0x40
 8006e28:	548b      	strb	r3, [r1, r2]
 8006e2a:	300c      	adds	r0, #12
 8006e2c:	f7ff ffc6 	bl	8006dbc <d_number.isra.0>
 8006e30:	4623      	mov	r3, r4
 8006e32:	6060      	str	r0, [r4, #4]
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd10      	pop	{r4, pc}
 8006e38:	4623      	mov	r3, r4
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	2300      	movs	r3, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	4770      	bx	lr

08006e44 <d_compact_number>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	68c3      	ldr	r3, [r0, #12]
 8006e48:	4604      	mov	r4, r0
 8006e4a:	781a      	ldrb	r2, [r3, #0]
 8006e4c:	2a5f      	cmp	r2, #95	; 0x5f
 8006e4e:	d00b      	beq.n	8006e68 <d_compact_number+0x24>
 8006e50:	2a6e      	cmp	r2, #110	; 0x6e
 8006e52:	d006      	beq.n	8006e62 <d_compact_number+0x1e>
 8006e54:	300c      	adds	r0, #12
 8006e56:	f7ff ffb1 	bl	8006dbc <d_number.isra.0>
 8006e5a:	68e3      	ldr	r3, [r4, #12]
 8006e5c:	781a      	ldrb	r2, [r3, #0]
 8006e5e:	2a5f      	cmp	r2, #95	; 0x5f
 8006e60:	d006      	beq.n	8006e70 <d_compact_number+0x2c>
 8006e62:	f04f 30ff 	mov.w	r0, #4294967295
 8006e66:	bd10      	pop	{r4, pc}
 8006e68:	2000      	movs	r0, #0
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60e3      	str	r3, [r4, #12]
 8006e6e:	bd10      	pop	{r4, pc}
 8006e70:	3001      	adds	r0, #1
 8006e72:	e7fa      	b.n	8006e6a <d_compact_number+0x26>

08006e74 <d_template_param>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	68c3      	ldr	r3, [r0, #12]
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	2a54      	cmp	r2, #84	; 0x54
 8006e7c:	d001      	beq.n	8006e82 <d_template_param+0xe>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	bd38      	pop	{r3, r4, r5, pc}
 8006e82:	3301      	adds	r3, #1
 8006e84:	60c3      	str	r3, [r0, #12]
 8006e86:	4604      	mov	r4, r0
 8006e88:	f7ff ffdc 	bl	8006e44 <d_compact_number>
 8006e8c:	1e05      	subs	r5, r0, #0
 8006e8e:	dbf6      	blt.n	8006e7e <d_template_param+0xa>
 8006e90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e92:	6963      	ldr	r3, [r4, #20]
 8006e94:	69a1      	ldr	r1, [r4, #24]
 8006e96:	3201      	adds	r2, #1
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e9c:	daef      	bge.n	8006e7e <d_template_param+0xa>
 8006e9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006ea2:	6921      	ldr	r1, [r4, #16]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	0092      	lsls	r2, r2, #2
 8006ea8:	6163      	str	r3, [r4, #20]
 8006eaa:	188b      	adds	r3, r1, r2
 8006eac:	d0e7      	beq.n	8006e7e <d_template_param+0xa>
 8006eae:	2005      	movs	r0, #5
 8006eb0:	5488      	strb	r0, [r1, r2]
 8006eb2:	605d      	str	r5, [r3, #4]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}

08006eb8 <d_source_name>:
 8006eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eba:	4604      	mov	r4, r0
 8006ebc:	300c      	adds	r0, #12
 8006ebe:	f7ff ff7d 	bl	8006dbc <d_number.isra.0>
 8006ec2:	1e06      	subs	r6, r0, #0
 8006ec4:	dd4f      	ble.n	8006f66 <d_source_name+0xae>
 8006ec6:	68e5      	ldr	r5, [r4, #12]
 8006ec8:	6863      	ldr	r3, [r4, #4]
 8006eca:	1b5b      	subs	r3, r3, r5
 8006ecc:	429e      	cmp	r6, r3
 8006ece:	dc2c      	bgt.n	8006f2a <d_source_name+0x72>
 8006ed0:	68a2      	ldr	r2, [r4, #8]
 8006ed2:	19ab      	adds	r3, r5, r6
 8006ed4:	0752      	lsls	r2, r2, #29
 8006ed6:	60e3      	str	r3, [r4, #12]
 8006ed8:	d504      	bpl.n	8006ee4 <d_source_name+0x2c>
 8006eda:	5daa      	ldrb	r2, [r5, r6]
 8006edc:	2a24      	cmp	r2, #36	; 0x24
 8006ede:	bf04      	itt	eq
 8006ee0:	3301      	addeq	r3, #1
 8006ee2:	60e3      	streq	r3, [r4, #12]
 8006ee4:	2e09      	cmp	r6, #9
 8006ee6:	dd0c      	ble.n	8006f02 <d_source_name+0x4a>
 8006ee8:	2208      	movs	r2, #8
 8006eea:	4920      	ldr	r1, [pc, #128]	; (8006f6c <d_source_name+0xb4>)
 8006eec:	4628      	mov	r0, r5
 8006eee:	f00c faa9 	bl	8013444 <memcmp>
 8006ef2:	b930      	cbnz	r0, 8006f02 <d_source_name+0x4a>
 8006ef4:	7a2b      	ldrb	r3, [r5, #8]
 8006ef6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ef8:	d01a      	beq.n	8006f30 <d_source_name+0x78>
 8006efa:	2b5f      	cmp	r3, #95	; 0x5f
 8006efc:	d018      	beq.n	8006f30 <d_source_name+0x78>
 8006efe:	2b24      	cmp	r3, #36	; 0x24
 8006f00:	d016      	beq.n	8006f30 <d_source_name+0x78>
 8006f02:	6963      	ldr	r3, [r4, #20]
 8006f04:	69a2      	ldr	r2, [r4, #24]
 8006f06:	4293      	cmp	r3, r2
 8006f08:	da0f      	bge.n	8006f2a <d_source_name+0x72>
 8006f0a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006f0e:	6921      	ldr	r1, [r4, #16]
 8006f10:	3301      	adds	r3, #1
 8006f12:	0092      	lsls	r2, r2, #2
 8006f14:	6163      	str	r3, [r4, #20]
 8006f16:	188b      	adds	r3, r1, r2
 8006f18:	d007      	beq.n	8006f2a <d_source_name+0x72>
 8006f1a:	b135      	cbz	r5, 8006f2a <d_source_name+0x72>
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	2700      	movs	r7, #0
 8006f20:	548f      	strb	r7, [r1, r2]
 8006f22:	605d      	str	r5, [r3, #4]
 8006f24:	609e      	str	r6, [r3, #8]
 8006f26:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f30:	7a6b      	ldrb	r3, [r5, #9]
 8006f32:	2b4e      	cmp	r3, #78	; 0x4e
 8006f34:	d1e5      	bne.n	8006f02 <d_source_name+0x4a>
 8006f36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f38:	6962      	ldr	r2, [r4, #20]
 8006f3a:	69a1      	ldr	r1, [r4, #24]
 8006f3c:	3316      	adds	r3, #22
 8006f3e:	1b9e      	subs	r6, r3, r6
 8006f40:	428a      	cmp	r2, r1
 8006f42:	6326      	str	r6, [r4, #48]	; 0x30
 8006f44:	daf1      	bge.n	8006f2a <d_source_name+0x72>
 8006f46:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006f4a:	6921      	ldr	r1, [r4, #16]
 8006f4c:	3201      	adds	r2, #1
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	6162      	str	r2, [r4, #20]
 8006f52:	18ca      	adds	r2, r1, r3
 8006f54:	d0e9      	beq.n	8006f2a <d_source_name+0x72>
 8006f56:	4e06      	ldr	r6, [pc, #24]	; (8006f70 <d_source_name+0xb8>)
 8006f58:	2000      	movs	r0, #0
 8006f5a:	2515      	movs	r5, #21
 8006f5c:	54c8      	strb	r0, [r1, r3]
 8006f5e:	4610      	mov	r0, r2
 8006f60:	6056      	str	r6, [r2, #4]
 8006f62:	6095      	str	r5, [r2, #8]
 8006f64:	e7e2      	b.n	8006f2c <d_source_name+0x74>
 8006f66:	2000      	movs	r0, #0
 8006f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08015f20 	.word	0x08015f20
 8006f70:	08015f2c 	.word	0x08015f2c

08006f74 <d_abi_tags>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	68c3      	ldr	r3, [r0, #12]
 8006f78:	460d      	mov	r5, r1
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	2a42      	cmp	r2, #66	; 0x42
 8006f7e:	d110      	bne.n	8006fa2 <d_abi_tags+0x2e>
 8006f80:	4604      	mov	r4, r0
 8006f82:	3301      	adds	r3, #1
 8006f84:	60e3      	str	r3, [r4, #12]
 8006f86:	4620      	mov	r0, r4
 8006f88:	f7ff ff96 	bl	8006eb8 <d_source_name>
 8006f8c:	462a      	mov	r2, r5
 8006f8e:	4603      	mov	r3, r0
 8006f90:	214a      	movs	r1, #74	; 0x4a
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff fdcc 	bl	8006b30 <d_make_comp>
 8006f98:	68e3      	ldr	r3, [r4, #12]
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	2a42      	cmp	r2, #66	; 0x42
 8006fa0:	d0ef      	beq.n	8006f82 <d_abi_tags+0xe>
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	bd38      	pop	{r3, r4, r5, pc}
 8006fa6:	bf00      	nop

08006fa8 <d_substitution>:
 8006fa8:	68c2      	ldr	r2, [r0, #12]
 8006faa:	7813      	ldrb	r3, [r2, #0]
 8006fac:	2b53      	cmp	r3, #83	; 0x53
 8006fae:	d002      	beq.n	8006fb6 <d_substitution+0xe>
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4608      	mov	r0, r1
 8006fb4:	4770      	bx	lr
 8006fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fba:	1c53      	adds	r3, r2, #1
 8006fbc:	60c3      	str	r3, [r0, #12]
 8006fbe:	7853      	ldrb	r3, [r2, #1]
 8006fc0:	b18b      	cbz	r3, 8006fe6 <d_substitution+0x3e>
 8006fc2:	1c93      	adds	r3, r2, #2
 8006fc4:	60c3      	str	r3, [r0, #12]
 8006fc6:	7854      	ldrb	r4, [r2, #1]
 8006fc8:	2c5f      	cmp	r4, #95	; 0x5f
 8006fca:	d12d      	bne.n	8007028 <d_substitution+0x80>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6a02      	ldr	r2, [r0, #32]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d21c      	bcs.n	800700e <d_substitution+0x66>
 8006fd4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006fd6:	69c1      	ldr	r1, [r0, #28]
 8006fd8:	3201      	adds	r2, #1
 8006fda:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fde:	6282      	str	r2, [r0, #40]	; 0x28
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe6:	461c      	mov	r4, r3
 8006fe8:	6883      	ldr	r3, [r0, #8]
 8006fea:	f003 0308 	and.w	r3, r3, #8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bf14      	ite	ne
 8006ff2:	2501      	movne	r5, #1
 8006ff4:	2500      	moveq	r5, #0
 8006ff6:	d00e      	beq.n	8007016 <d_substitution+0x6e>
 8006ff8:	4b4d      	ldr	r3, [pc, #308]	; (8007130 <d_substitution+0x188>)
 8006ffa:	2274      	movs	r2, #116	; 0x74
 8006ffc:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
 8007000:	e000      	b.n	8007004 <d_substitution+0x5c>
 8007002:	781a      	ldrb	r2, [r3, #0]
 8007004:	4294      	cmp	r4, r2
 8007006:	d038      	beq.n	800707a <d_substitution+0xd2>
 8007008:	331c      	adds	r3, #28
 800700a:	428b      	cmp	r3, r1
 800700c:	d3f9      	bcc.n	8007002 <d_substitution+0x5a>
 800700e:	2100      	movs	r1, #0
 8007010:	4608      	mov	r0, r1
 8007012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007016:	2900      	cmp	r1, #0
 8007018:	d0ee      	beq.n	8006ff8 <d_substitution+0x50>
 800701a:	68c3      	ldr	r3, [r0, #12]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	3b43      	subs	r3, #67	; 0x43
 8007020:	2b01      	cmp	r3, #1
 8007022:	bf98      	it	ls
 8007024:	2501      	movls	r5, #1
 8007026:	e7e7      	b.n	8006ff8 <d_substitution+0x50>
 8007028:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 800702c:	b2eb      	uxtb	r3, r5
 800702e:	2b09      	cmp	r3, #9
 8007030:	d879      	bhi.n	8007126 <d_substitution+0x17e>
 8007032:	2100      	movs	r1, #0
 8007034:	e00d      	b.n	8007052 <d_substitution+0xaa>
 8007036:	3b30      	subs	r3, #48	; 0x30
 8007038:	4299      	cmp	r1, r3
 800703a:	d8e8      	bhi.n	800700e <d_substitution+0x66>
 800703c:	68c2      	ldr	r2, [r0, #12]
 800703e:	7814      	ldrb	r4, [r2, #0]
 8007040:	1c51      	adds	r1, r2, #1
 8007042:	b11c      	cbz	r4, 800704c <d_substitution+0xa4>
 8007044:	60c1      	str	r1, [r0, #12]
 8007046:	7814      	ldrb	r4, [r2, #0]
 8007048:	2c5f      	cmp	r4, #95	; 0x5f
 800704a:	d014      	beq.n	8007076 <d_substitution+0xce>
 800704c:	4619      	mov	r1, r3
 800704e:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8007052:	b2ed      	uxtb	r5, r5
 8007054:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8007058:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800705c:	2d09      	cmp	r5, #9
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007064:	d9e7      	bls.n	8007036 <d_substitution+0x8e>
 8007066:	2a19      	cmp	r2, #25
 8007068:	d8d1      	bhi.n	800700e <d_substitution+0x66>
 800706a:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800706e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007072:	3b37      	subs	r3, #55	; 0x37
 8007074:	e7e0      	b.n	8007038 <d_substitution+0x90>
 8007076:	3301      	adds	r3, #1
 8007078:	e7a9      	b.n	8006fce <d_substitution+0x26>
 800707a:	695c      	ldr	r4, [r3, #20]
 800707c:	2c00      	cmp	r4, #0
 800707e:	d049      	beq.n	8007114 <d_substitution+0x16c>
 8007080:	6942      	ldr	r2, [r0, #20]
 8007082:	6981      	ldr	r1, [r0, #24]
 8007084:	428a      	cmp	r2, r1
 8007086:	da43      	bge.n	8007110 <d_substitution+0x168>
 8007088:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800708c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8007090:	00b6      	lsls	r6, r6, #2
 8007092:	3201      	adds	r2, #1
 8007094:	eb1e 0706 	adds.w	r7, lr, r6
 8007098:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800709c:	6142      	str	r2, [r0, #20]
 800709e:	d040      	beq.n	8007122 <d_substitution+0x17a>
 80070a0:	f04f 0c18 	mov.w	ip, #24
 80070a4:	f80e c006 	strb.w	ip, [lr, r6]
 80070a8:	463e      	mov	r6, r7
 80070aa:	607c      	str	r4, [r7, #4]
 80070ac:	f8c7 8008 	str.w	r8, [r7, #8]
 80070b0:	62c6      	str	r6, [r0, #44]	; 0x2c
 80070b2:	b345      	cbz	r5, 8007106 <d_substitution+0x15e>
 80070b4:	68de      	ldr	r6, [r3, #12]
 80070b6:	691c      	ldr	r4, [r3, #16]
 80070b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80070ba:	4291      	cmp	r1, r2
 80070bc:	4423      	add	r3, r4
 80070be:	6303      	str	r3, [r0, #48]	; 0x30
 80070c0:	dd24      	ble.n	800710c <d_substitution+0x164>
 80070c2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80070c6:	6905      	ldr	r5, [r0, #16]
 80070c8:	0089      	lsls	r1, r1, #2
 80070ca:	3201      	adds	r2, #1
 80070cc:	186b      	adds	r3, r5, r1
 80070ce:	6142      	str	r2, [r0, #20]
 80070d0:	d025      	beq.n	800711e <d_substitution+0x176>
 80070d2:	2218      	movs	r2, #24
 80070d4:	546a      	strb	r2, [r5, r1]
 80070d6:	4619      	mov	r1, r3
 80070d8:	605e      	str	r6, [r3, #4]
 80070da:	609c      	str	r4, [r3, #8]
 80070dc:	68c3      	ldr	r3, [r0, #12]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b42      	cmp	r3, #66	; 0x42
 80070e2:	f47f af7d 	bne.w	8006fe0 <d_substitution+0x38>
 80070e6:	4604      	mov	r4, r0
 80070e8:	f7ff ff44 	bl	8006f74 <d_abi_tags>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d08e      	beq.n	800700e <d_substitution+0x66>
 80070f0:	6a23      	ldr	r3, [r4, #32]
 80070f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80070f4:	4293      	cmp	r3, r2
 80070f6:	da10      	bge.n	800711a <d_substitution+0x172>
 80070f8:	69e1      	ldr	r1, [r4, #28]
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007100:	4601      	mov	r1, r0
 8007102:	6222      	str	r2, [r4, #32]
 8007104:	e76c      	b.n	8006fe0 <d_substitution+0x38>
 8007106:	685e      	ldr	r6, [r3, #4]
 8007108:	689c      	ldr	r4, [r3, #8]
 800710a:	e7d5      	b.n	80070b8 <d_substitution+0x110>
 800710c:	2100      	movs	r1, #0
 800710e:	e7e5      	b.n	80070dc <d_substitution+0x134>
 8007110:	2600      	movs	r6, #0
 8007112:	e7cd      	b.n	80070b0 <d_substitution+0x108>
 8007114:	6981      	ldr	r1, [r0, #24]
 8007116:	6942      	ldr	r2, [r0, #20]
 8007118:	e7cb      	b.n	80070b2 <d_substitution+0x10a>
 800711a:	4601      	mov	r1, r0
 800711c:	e760      	b.n	8006fe0 <d_substitution+0x38>
 800711e:	4619      	mov	r1, r3
 8007120:	e7dc      	b.n	80070dc <d_substitution+0x134>
 8007122:	463e      	mov	r6, r7
 8007124:	e7c4      	b.n	80070b0 <d_substitution+0x108>
 8007126:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800712a:	2b19      	cmp	r3, #25
 800712c:	d981      	bls.n	8007032 <d_substitution+0x8a>
 800712e:	e75b      	b.n	8006fe8 <d_substitution+0x40>
 8007130:	08014960 	.word	0x08014960

08007134 <d_call_offset>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	4604      	mov	r4, r0
 8007138:	b929      	cbnz	r1, 8007146 <d_call_offset+0x12>
 800713a:	68c3      	ldr	r3, [r0, #12]
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	b132      	cbz	r2, 800714e <d_call_offset+0x1a>
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	60c2      	str	r2, [r0, #12]
 8007144:	7819      	ldrb	r1, [r3, #0]
 8007146:	2968      	cmp	r1, #104	; 0x68
 8007148:	d019      	beq.n	800717e <d_call_offset+0x4a>
 800714a:	2976      	cmp	r1, #118	; 0x76
 800714c:	d001      	beq.n	8007152 <d_call_offset+0x1e>
 800714e:	2000      	movs	r0, #0
 8007150:	bd38      	pop	{r3, r4, r5, pc}
 8007152:	f104 050c 	add.w	r5, r4, #12
 8007156:	4628      	mov	r0, r5
 8007158:	f7ff fe30 	bl	8006dbc <d_number.isra.0>
 800715c:	68e3      	ldr	r3, [r4, #12]
 800715e:	781a      	ldrb	r2, [r3, #0]
 8007160:	2a5f      	cmp	r2, #95	; 0x5f
 8007162:	d1f4      	bne.n	800714e <d_call_offset+0x1a>
 8007164:	3301      	adds	r3, #1
 8007166:	60e3      	str	r3, [r4, #12]
 8007168:	4628      	mov	r0, r5
 800716a:	f7ff fe27 	bl	8006dbc <d_number.isra.0>
 800716e:	68e3      	ldr	r3, [r4, #12]
 8007170:	781a      	ldrb	r2, [r3, #0]
 8007172:	2a5f      	cmp	r2, #95	; 0x5f
 8007174:	d1eb      	bne.n	800714e <d_call_offset+0x1a>
 8007176:	3301      	adds	r3, #1
 8007178:	60e3      	str	r3, [r4, #12]
 800717a:	2001      	movs	r0, #1
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	f104 000c 	add.w	r0, r4, #12
 8007182:	f7ff fe1b 	bl	8006dbc <d_number.isra.0>
 8007186:	e7f2      	b.n	800716e <d_call_offset+0x3a>

08007188 <d_lookup_template_argument.isra.6>:
 8007188:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800718c:	4602      	mov	r2, r0
 800718e:	b1c3      	cbz	r3, 80071c2 <d_lookup_template_argument.isra.6+0x3a>
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	680b      	ldr	r3, [r1, #0]
 8007194:	6890      	ldr	r0, [r2, #8]
 8007196:	b170      	cbz	r0, 80071b6 <d_lookup_template_argument.isra.6+0x2e>
 8007198:	7802      	ldrb	r2, [r0, #0]
 800719a:	2a2f      	cmp	r2, #47	; 0x2f
 800719c:	d10d      	bne.n	80071ba <d_lookup_template_argument.isra.6+0x32>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	dc04      	bgt.n	80071ac <d_lookup_template_argument.isra.6+0x24>
 80071a2:	e009      	b.n	80071b8 <d_lookup_template_argument.isra.6+0x30>
 80071a4:	7802      	ldrb	r2, [r0, #0]
 80071a6:	2a2f      	cmp	r2, #47	; 0x2f
 80071a8:	d107      	bne.n	80071ba <d_lookup_template_argument.isra.6+0x32>
 80071aa:	b143      	cbz	r3, 80071be <d_lookup_template_argument.isra.6+0x36>
 80071ac:	6880      	ldr	r0, [r0, #8]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d1f7      	bne.n	80071a4 <d_lookup_template_argument.isra.6+0x1c>
 80071b4:	4770      	bx	lr
 80071b6:	4770      	bx	lr
 80071b8:	d001      	beq.n	80071be <d_lookup_template_argument.isra.6+0x36>
 80071ba:	2000      	movs	r0, #0
 80071bc:	4770      	bx	lr
 80071be:	6840      	ldr	r0, [r0, #4]
 80071c0:	4770      	bx	lr
 80071c2:	2101      	movs	r1, #1
 80071c4:	4618      	mov	r0, r3
 80071c6:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 80071ca:	4770      	bx	lr

080071cc <d_find_pack>:
 80071cc:	2900      	cmp	r1, #0
 80071ce:	d041      	beq.n	8007254 <d_find_pack+0x88>
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4605      	mov	r5, r0
 80071d4:	460c      	mov	r4, r1
 80071d6:	7823      	ldrb	r3, [r4, #0]
 80071d8:	2b4a      	cmp	r3, #74	; 0x4a
 80071da:	d827      	bhi.n	800722c <d_find_pack+0x60>
 80071dc:	e8df f003 	tbb	[pc, r3]
 80071e0:	2626262e 	.word	0x2626262e
 80071e4:	2b2e3026 	.word	0x2b2e3026
 80071e8:	2626262b 	.word	0x2626262b
 80071ec:	26262626 	.word	0x26262626
 80071f0:	26262626 	.word	0x26262626
 80071f4:	26262626 	.word	0x26262626
 80071f8:	2626262e 	.word	0x2626262e
 80071fc:	26262626 	.word	0x26262626
 8007200:	26262626 	.word	0x26262626
 8007204:	2e262626 	.word	0x2e262626
 8007208:	26262626 	.word	0x26262626
 800720c:	26262626 	.word	0x26262626
 8007210:	262b2e26 	.word	0x262b2e26
 8007214:	26262626 	.word	0x26262626
 8007218:	26262626 	.word	0x26262626
 800721c:	2e262626 	.word	0x2e262626
 8007220:	26262626 	.word	0x26262626
 8007224:	262e262e 	.word	0x262e262e
 8007228:	2e26      	.short	0x2e26
 800722a:	2e          	.byte	0x2e
 800722b:	00          	.byte	0x00
 800722c:	6861      	ldr	r1, [r4, #4]
 800722e:	4628      	mov	r0, r5
 8007230:	f7ff ffcc 	bl	80071cc <d_find_pack>
 8007234:	b918      	cbnz	r0, 800723e <d_find_pack+0x72>
 8007236:	68a4      	ldr	r4, [r4, #8]
 8007238:	2c00      	cmp	r4, #0
 800723a:	d1cc      	bne.n	80071d6 <d_find_pack+0xa>
 800723c:	2000      	movs	r0, #0
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	1d21      	adds	r1, r4, #4
 8007242:	4628      	mov	r0, r5
 8007244:	f7ff ffa0 	bl	8007188 <d_lookup_template_argument.isra.6>
 8007248:	2800      	cmp	r0, #0
 800724a:	d0f7      	beq.n	800723c <d_find_pack+0x70>
 800724c:	7803      	ldrb	r3, [r0, #0]
 800724e:	2b2f      	cmp	r3, #47	; 0x2f
 8007250:	d1f4      	bne.n	800723c <d_find_pack+0x70>
 8007252:	bd38      	pop	{r3, r4, r5, pc}
 8007254:	2000      	movs	r0, #0
 8007256:	4770      	bx	lr

08007258 <d_growable_string_callback_adapter>:
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	6853      	ldr	r3, [r2, #4]
 800725c:	6894      	ldr	r4, [r2, #8]
 800725e:	3301      	adds	r3, #1
 8007260:	440b      	add	r3, r1
 8007262:	42a3      	cmp	r3, r4
 8007264:	b083      	sub	sp, #12
 8007266:	4615      	mov	r5, r2
 8007268:	460e      	mov	r6, r1
 800726a:	4607      	mov	r7, r0
 800726c:	d813      	bhi.n	8007296 <d_growable_string_callback_adapter+0x3e>
 800726e:	68ec      	ldr	r4, [r5, #12]
 8007270:	b10c      	cbz	r4, 8007276 <d_growable_string_callback_adapter+0x1e>
 8007272:	b003      	add	sp, #12
 8007274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007276:	e895 0009 	ldmia.w	r5, {r0, r3}
 800727a:	4632      	mov	r2, r6
 800727c:	4639      	mov	r1, r7
 800727e:	4418      	add	r0, r3
 8007280:	f00c f8ef 	bl	8013462 <memcpy>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	686a      	ldr	r2, [r5, #4]
 8007288:	4433      	add	r3, r6
 800728a:	549c      	strb	r4, [r3, r2]
 800728c:	686b      	ldr	r3, [r5, #4]
 800728e:	441e      	add	r6, r3
 8007290:	606e      	str	r6, [r5, #4]
 8007292:	b003      	add	sp, #12
 8007294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007296:	68d2      	ldr	r2, [r2, #12]
 8007298:	2a00      	cmp	r2, #0
 800729a:	d1ea      	bne.n	8007272 <d_growable_string_callback_adapter+0x1a>
 800729c:	b91c      	cbnz	r4, 80072a6 <d_growable_string_callback_adapter+0x4e>
 800729e:	2b02      	cmp	r3, #2
 80072a0:	f04f 0402 	mov.w	r4, #2
 80072a4:	d902      	bls.n	80072ac <d_growable_string_callback_adapter+0x54>
 80072a6:	0064      	lsls	r4, r4, #1
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d8fc      	bhi.n	80072a6 <d_growable_string_callback_adapter+0x4e>
 80072ac:	4621      	mov	r1, r4
 80072ae:	6828      	ldr	r0, [r5, #0]
 80072b0:	f00c f982 	bl	80135b8 <realloc>
 80072b4:	b110      	cbz	r0, 80072bc <d_growable_string_callback_adapter+0x64>
 80072b6:	6028      	str	r0, [r5, #0]
 80072b8:	60ac      	str	r4, [r5, #8]
 80072ba:	e7d8      	b.n	800726e <d_growable_string_callback_adapter+0x16>
 80072bc:	9001      	str	r0, [sp, #4]
 80072be:	6828      	ldr	r0, [r5, #0]
 80072c0:	f00c f8b8 	bl	8013434 <free>
 80072c4:	9b01      	ldr	r3, [sp, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	606b      	str	r3, [r5, #4]
 80072cc:	60ab      	str	r3, [r5, #8]
 80072ce:	60ea      	str	r2, [r5, #12]
 80072d0:	e7cf      	b.n	8007272 <d_growable_string_callback_adapter+0x1a>
 80072d2:	bf00      	nop

080072d4 <d_print_comp_inner>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	4604      	mov	r4, r0
 80072da:	b095      	sub	sp, #84	; 0x54
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f000 80c3 	beq.w	8007468 <d_print_comp_inner+0x194>
 80072e2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f040 80b6 	bne.w	8007458 <d_print_comp_inner+0x184>
 80072ec:	7813      	ldrb	r3, [r2, #0]
 80072ee:	460f      	mov	r7, r1
 80072f0:	4615      	mov	r5, r2
 80072f2:	2b4b      	cmp	r3, #75	; 0x4b
 80072f4:	f201 81ec 	bhi.w	80086d0 <d_print_comp_inner+0x13fc>
 80072f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80072fc:	094c096d 	.word	0x094c096d
 8007300:	08bf094c 	.word	0x08bf094c
 8007304:	09cd087b 	.word	0x09cd087b
 8007308:	09e509a2 	.word	0x09e509a2
 800730c:	085407c7 	.word	0x085407c7
 8007310:	0806082d 	.word	0x0806082d
 8007314:	05d607df 	.word	0x05d607df
 8007318:	057a05af 	.word	0x057a05af
 800731c:	07100553 	.word	0x07100553
 8007320:	06c206e9 	.word	0x06c206e9
 8007324:	0674069b 	.word	0x0674069b
 8007328:	0626064d 	.word	0x0626064d
 800732c:	07ad05fd 	.word	0x07ad05fd
 8007330:	07ad07ad 	.word	0x07ad07ad
 8007334:	07a807a8 	.word	0x07a807a8
 8007338:	07a807a8 	.word	0x07a807a8
 800733c:	07a807a8 	.word	0x07a807a8
 8007340:	077607a8 	.word	0x077607a8
 8007344:	07a80776 	.word	0x07a80776
 8007348:	073707a8 	.word	0x073707a8
 800734c:	04fd07da 	.word	0x04fd07da
 8007350:	04760491 	.word	0x04760491
 8007354:	047603d4 	.word	0x047603d4
 8007358:	03940394 	.word	0x03940394
 800735c:	03470371 	.word	0x03470371
 8007360:	02f90320 	.word	0x02f90320
 8007364:	02c702f5 	.word	0x02c702f5
 8007368:	0472004c 	.word	0x0472004c
 800736c:	04170512 	.word	0x04170512
 8007370:	04420417 	.word	0x04420417
 8007374:	041b0442 	.word	0x041b0442
 8007378:	02b102be 	.word	0x02b102be
 800737c:	0233025a 	.word	0x0233025a
 8007380:	01d001f7 	.word	0x01d001f7
 8007384:	09ea01a9 	.word	0x09ea01a9
 8007388:	028a0183 	.word	0x028a0183
 800738c:	0110015c 	.word	0x0110015c
 8007390:	00bc00e6 	.word	0x00bc00e6
 8007394:	68ae      	ldr	r6, [r5, #8]
 8007396:	7833      	ldrb	r3, [r6, #0]
 8007398:	2b37      	cmp	r3, #55	; 0x37
 800739a:	d165      	bne.n	8007468 <d_print_comp_inner+0x194>
 800739c:	686a      	ldr	r2, [r5, #4]
 800739e:	6853      	ldr	r3, [r2, #4]
 80073a0:	6819      	ldr	r1, [r3, #0]
 80073a2:	7848      	ldrb	r0, [r1, #1]
 80073a4:	2863      	cmp	r0, #99	; 0x63
 80073a6:	f002 8089 	beq.w	80094bc <d_print_comp_inner+0x21e8>
 80073aa:	7811      	ldrb	r1, [r2, #0]
 80073ac:	2931      	cmp	r1, #49	; 0x31
 80073ae:	f002 815e 	beq.w	800966e <d_print_comp_inner+0x239a>
 80073b2:	6853      	ldr	r3, [r2, #4]
 80073b4:	49d1      	ldr	r1, [pc, #836]	; (80076fc <d_print_comp_inner+0x428>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	f007 fd12 	bl	800ede0 <strcmp>
 80073bc:	6872      	ldr	r2, [r6, #4]
 80073be:	b918      	cbnz	r0, 80073c8 <d_print_comp_inner+0xf4>
 80073c0:	7813      	ldrb	r3, [r2, #0]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	f002 81ed 	beq.w	80097a2 <d_print_comp_inner+0x24ce>
 80073c8:	4639      	mov	r1, r7
 80073ca:	4620      	mov	r0, r4
 80073cc:	f003 fa4c 	bl	800a868 <d_print_subexpr>
 80073d0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80073d4:	49ca      	ldr	r1, [pc, #808]	; (8007700 <d_print_comp_inner+0x42c>)
 80073d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073da:	f8d3 9000 	ldr.w	r9, [r3]
 80073de:	4648      	mov	r0, r9
 80073e0:	f007 fcfe 	bl	800ede0 <strcmp>
 80073e4:	4606      	mov	r6, r0
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f041 87ee 	bne.w	80093c8 <d_print_comp_inner+0x20f4>
 80073ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80073f0:	29ff      	cmp	r1, #255	; 0xff
 80073f2:	f002 827c 	beq.w	80098ee <d_print_comp_inner+0x261a>
 80073f6:	1c4a      	adds	r2, r1, #1
 80073f8:	235b      	movs	r3, #91	; 0x5b
 80073fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80073fe:	5463      	strb	r3, [r4, r1]
 8007400:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007404:	68ab      	ldr	r3, [r5, #8]
 8007406:	4639      	mov	r1, r7
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	4620      	mov	r0, r4
 800740c:	f002 fb7a 	bl	8009b04 <d_print_comp>
 8007410:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007414:	29ff      	cmp	r1, #255	; 0xff
 8007416:	f002 827a 	beq.w	800990e <d_print_comp_inner+0x263a>
 800741a:	235d      	movs	r3, #93	; 0x5d
 800741c:	1c4a      	adds	r2, r1, #1
 800741e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007422:	5463      	strb	r3, [r4, r1]
 8007424:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007428:	686b      	ldr	r3, [r5, #4]
 800742a:	781a      	ldrb	r2, [r3, #0]
 800742c:	2a31      	cmp	r2, #49	; 0x31
 800742e:	d113      	bne.n	8007458 <d_print_comp_inner+0x184>
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	2a01      	cmp	r2, #1
 8007436:	d10f      	bne.n	8007458 <d_print_comp_inner+0x184>
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b3e      	cmp	r3, #62	; 0x3e
 800743e:	d10b      	bne.n	8007458 <d_print_comp_inner+0x184>
 8007440:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007444:	29ff      	cmp	r1, #255	; 0xff
 8007446:	f002 8323 	beq.w	8009a90 <d_print_comp_inner+0x27bc>
 800744a:	2329      	movs	r3, #41	; 0x29
 800744c:	1c4a      	adds	r2, r1, #1
 800744e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007452:	5463      	strb	r3, [r4, r1]
 8007454:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007458:	b015      	add	sp, #84	; 0x54
 800745a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745e:	f1b8 0f00 	cmp.w	r8, #0
 8007462:	d001      	beq.n	8007468 <d_print_comp_inner+0x194>
 8007464:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8007468:	2301      	movs	r3, #1
 800746a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800746e:	b015      	add	sp, #84	; 0x54
 8007470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007474:	4ea3      	ldr	r6, [pc, #652]	; (8007704 <d_print_comp_inner+0x430>)
 8007476:	686a      	ldr	r2, [r5, #4]
 8007478:	f002 fb44 	bl	8009b04 <d_print_comp>
 800747c:	f106 0a08 	add.w	sl, r6, #8
 8007480:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007484:	f04f 0900 	mov.w	r9, #0
 8007488:	e00a      	b.n	80074a0 <d_print_comp_inner+0x1cc>
 800748a:	460b      	mov	r3, r1
 800748c:	3101      	adds	r1, #1
 800748e:	45b2      	cmp	sl, r6
 8007490:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007494:	f804 8003 	strb.w	r8, [r4, r3]
 8007498:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800749c:	f001 8299 	beq.w	80089d2 <d_print_comp_inner+0x16fe>
 80074a0:	29ff      	cmp	r1, #255	; 0xff
 80074a2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80074a6:	d1f0      	bne.n	800748a <d_print_comp_inner+0x1b6>
 80074a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80074ac:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80074b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80074b4:	4620      	mov	r0, r4
 80074b6:	4798      	blx	r3
 80074b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074bc:	2101      	movs	r1, #1
 80074be:	440b      	add	r3, r1
 80074c0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80074c4:	2300      	movs	r3, #0
 80074c6:	e7e2      	b.n	800748e <d_print_comp_inner+0x1ba>
 80074c8:	4e8f      	ldr	r6, [pc, #572]	; (8007708 <d_print_comp_inner+0x434>)
 80074ca:	686a      	ldr	r2, [r5, #4]
 80074cc:	f002 fb1a 	bl	8009b04 <d_print_comp>
 80074d0:	f106 0a05 	add.w	sl, r6, #5
 80074d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80074d8:	f04f 0900 	mov.w	r9, #0
 80074dc:	e00a      	b.n	80074f4 <d_print_comp_inner+0x220>
 80074de:	460b      	mov	r3, r1
 80074e0:	3101      	adds	r1, #1
 80074e2:	45b2      	cmp	sl, r6
 80074e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80074e8:	f804 8003 	strb.w	r8, [r4, r3]
 80074ec:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80074f0:	f001 8248 	beq.w	8008984 <d_print_comp_inner+0x16b0>
 80074f4:	29ff      	cmp	r1, #255	; 0xff
 80074f6:	f816 8b01 	ldrb.w	r8, [r6], #1
 80074fa:	d1f0      	bne.n	80074de <d_print_comp_inner+0x20a>
 80074fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007500:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007504:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007508:	4620      	mov	r0, r4
 800750a:	4798      	blx	r3
 800750c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007510:	2101      	movs	r1, #1
 8007512:	440b      	add	r3, r1
 8007514:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007518:	2300      	movs	r3, #0
 800751a:	e7e2      	b.n	80074e2 <d_print_comp_inner+0x20e>
 800751c:	6869      	ldr	r1, [r5, #4]
 800751e:	f7ff fe55 	bl	80071cc <d_find_pack>
 8007522:	f04f 0900 	mov.w	r9, #0
 8007526:	2800      	cmp	r0, #0
 8007528:	f002 8149 	beq.w	80097be <d_print_comp_inner+0x24ea>
 800752c:	7803      	ldrb	r3, [r0, #0]
 800752e:	2b2f      	cmp	r3, #47	; 0x2f
 8007530:	f041 8315 	bne.w	8008b5e <d_print_comp_inner+0x188a>
 8007534:	6843      	ldr	r3, [r0, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f001 8311 	beq.w	8008b5e <d_print_comp_inner+0x188a>
 800753c:	6880      	ldr	r0, [r0, #8]
 800753e:	f109 0901 	add.w	r9, r9, #1
 8007542:	2800      	cmp	r0, #0
 8007544:	d1f2      	bne.n	800752c <d_print_comp_inner+0x258>
 8007546:	686b      	ldr	r3, [r5, #4]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	f04f 0b00 	mov.w	fp, #0
 800754e:	46da      	mov	sl, fp
 8007550:	f109 33ff 	add.w	r3, r9, #4294967295
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	f8c4 b11c 	str.w	fp, [r4, #284]	; 0x11c
 800755a:	9a00      	ldr	r2, [sp, #0]
 800755c:	4639      	mov	r1, r7
 800755e:	4620      	mov	r0, r4
 8007560:	f002 fad0 	bl	8009b04 <d_print_comp>
 8007564:	9b01      	ldr	r3, [sp, #4]
 8007566:	455b      	cmp	r3, fp
 8007568:	f341 80b7 	ble.w	80086da <d_print_comp_inner+0x1406>
 800756c:	4d67      	ldr	r5, [pc, #412]	; (800770c <d_print_comp_inner+0x438>)
 800756e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007572:	f105 0802 	add.w	r8, r5, #2
 8007576:	e009      	b.n	800758c <d_print_comp_inner+0x2b8>
 8007578:	460b      	mov	r3, r1
 800757a:	3101      	adds	r1, #1
 800757c:	45a8      	cmp	r8, r5
 800757e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007582:	54e6      	strb	r6, [r4, r3]
 8007584:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007588:	f001 80a7 	beq.w	80086da <d_print_comp_inner+0x1406>
 800758c:	29ff      	cmp	r1, #255	; 0xff
 800758e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007592:	d1f1      	bne.n	8007578 <d_print_comp_inner+0x2a4>
 8007594:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007598:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 800759c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075a0:	4620      	mov	r0, r4
 80075a2:	4798      	blx	r3
 80075a4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075a8:	2101      	movs	r1, #1
 80075aa:	440b      	add	r3, r1
 80075ac:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80075b0:	2300      	movs	r3, #0
 80075b2:	e7e3      	b.n	800757c <d_print_comp_inner+0x2a8>
 80075b4:	4e56      	ldr	r6, [pc, #344]	; (8007710 <d_print_comp_inner+0x43c>)
 80075b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80075ba:	f106 0a1a 	add.w	sl, r6, #26
 80075be:	f04f 0900 	mov.w	r9, #0
 80075c2:	e00a      	b.n	80075da <d_print_comp_inner+0x306>
 80075c4:	460b      	mov	r3, r1
 80075c6:	3101      	adds	r1, #1
 80075c8:	45b2      	cmp	sl, r6
 80075ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80075ce:	f804 8003 	strb.w	r8, [r4, r3]
 80075d2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80075d6:	f001 81e8 	beq.w	80089aa <d_print_comp_inner+0x16d6>
 80075da:	29ff      	cmp	r1, #255	; 0xff
 80075dc:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80075e0:	d1f0      	bne.n	80075c4 <d_print_comp_inner+0x2f0>
 80075e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80075e6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80075ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075ee:	4620      	mov	r0, r4
 80075f0:	4798      	blx	r3
 80075f2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075f6:	2101      	movs	r1, #1
 80075f8:	440b      	add	r3, r1
 80075fa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80075fe:	2300      	movs	r3, #0
 8007600:	e7e2      	b.n	80075c8 <d_print_comp_inner+0x2f4>
 8007602:	4e44      	ldr	r6, [pc, #272]	; (8007714 <d_print_comp_inner+0x440>)
 8007604:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007608:	f106 090e 	add.w	r9, r6, #14
 800760c:	f04f 0800 	mov.w	r8, #0
 8007610:	e009      	b.n	8007626 <d_print_comp_inner+0x352>
 8007612:	460b      	mov	r3, r1
 8007614:	3101      	adds	r1, #1
 8007616:	45b1      	cmp	r9, r6
 8007618:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800761c:	54e7      	strb	r7, [r4, r3]
 800761e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8007622:	f001 80b1 	beq.w	8008788 <d_print_comp_inner+0x14b4>
 8007626:	29ff      	cmp	r1, #255	; 0xff
 8007628:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800762c:	d1f1      	bne.n	8007612 <d_print_comp_inner+0x33e>
 800762e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007632:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007636:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800763a:	4620      	mov	r0, r4
 800763c:	4798      	blx	r3
 800763e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007642:	2101      	movs	r1, #1
 8007644:	440b      	add	r3, r1
 8007646:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800764a:	2300      	movs	r3, #0
 800764c:	e7e3      	b.n	8007616 <d_print_comp_inner+0x342>
 800764e:	4e32      	ldr	r6, [pc, #200]	; (8007718 <d_print_comp_inner+0x444>)
 8007650:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007654:	f106 0a08 	add.w	sl, r6, #8
 8007658:	f04f 0900 	mov.w	r9, #0
 800765c:	e00a      	b.n	8007674 <d_print_comp_inner+0x3a0>
 800765e:	460b      	mov	r3, r1
 8007660:	3101      	adds	r1, #1
 8007662:	45b2      	cmp	sl, r6
 8007664:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007668:	f804 8003 	strb.w	r8, [r4, r3]
 800766c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007670:	f001 80c6 	beq.w	8008800 <d_print_comp_inner+0x152c>
 8007674:	29ff      	cmp	r1, #255	; 0xff
 8007676:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800767a:	d1f0      	bne.n	800765e <d_print_comp_inner+0x38a>
 800767c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007680:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007684:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007688:	4620      	mov	r0, r4
 800768a:	4798      	blx	r3
 800768c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007690:	2101      	movs	r1, #1
 8007692:	440b      	add	r3, r1
 8007694:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007698:	2300      	movs	r3, #0
 800769a:	e7e2      	b.n	8007662 <d_print_comp_inner+0x38e>
 800769c:	4e1f      	ldr	r6, [pc, #124]	; (800771c <d_print_comp_inner+0x448>)
 800769e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80076a2:	f106 0a1c 	add.w	sl, r6, #28
 80076a6:	f04f 0900 	mov.w	r9, #0
 80076aa:	e00a      	b.n	80076c2 <d_print_comp_inner+0x3ee>
 80076ac:	460b      	mov	r3, r1
 80076ae:	3101      	adds	r1, #1
 80076b0:	45b2      	cmp	sl, r6
 80076b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80076b6:	f804 8003 	strb.w	r8, [r4, r3]
 80076ba:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80076be:	f001 805c 	beq.w	800877a <d_print_comp_inner+0x14a6>
 80076c2:	29ff      	cmp	r1, #255	; 0xff
 80076c4:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80076c8:	d1f0      	bne.n	80076ac <d_print_comp_inner+0x3d8>
 80076ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80076ce:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80076d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80076d6:	4620      	mov	r0, r4
 80076d8:	4798      	blx	r3
 80076da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80076de:	2101      	movs	r1, #1
 80076e0:	440b      	add	r3, r1
 80076e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80076e6:	2300      	movs	r3, #0
 80076e8:	e7e2      	b.n	80076b0 <d_print_comp_inner+0x3dc>
 80076ea:	4e0d      	ldr	r6, [pc, #52]	; (8007720 <d_print_comp_inner+0x44c>)
 80076ec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80076f0:	f106 0a1d 	add.w	sl, r6, #29
 80076f4:	f04f 0900 	mov.w	r9, #0
 80076f8:	e01f      	b.n	800773a <d_print_comp_inner+0x466>
 80076fa:	bf00      	nop
 80076fc:	080160fc 	.word	0x080160fc
 8007700:	08016100 	.word	0x08016100
 8007704:	080161bf 	.word	0x080161bf
 8007708:	08015f44 	.word	0x08015f44
 800770c:	080160d4 	.word	0x080160d4
 8007710:	0801609f 	.word	0x0801609f
 8007714:	080161af 	.word	0x080161af
 8007718:	0801619f 	.word	0x0801619f
 800771c:	0801617f 	.word	0x0801617f
 8007720:	0801615f 	.word	0x0801615f
 8007724:	460b      	mov	r3, r1
 8007726:	3101      	adds	r1, #1
 8007728:	45b2      	cmp	sl, r6
 800772a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800772e:	f804 8003 	strb.w	r8, [r4, r3]
 8007732:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007736:	f001 80db 	beq.w	80088f0 <d_print_comp_inner+0x161c>
 800773a:	29ff      	cmp	r1, #255	; 0xff
 800773c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007740:	d1f0      	bne.n	8007724 <d_print_comp_inner+0x450>
 8007742:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007746:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800774a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800774e:	4620      	mov	r0, r4
 8007750:	4798      	blx	r3
 8007752:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007756:	2101      	movs	r1, #1
 8007758:	440b      	add	r3, r1
 800775a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800775e:	2300      	movs	r3, #0
 8007760:	e7e2      	b.n	8007728 <d_print_comp_inner+0x454>
 8007762:	4eca      	ldr	r6, [pc, #808]	; (8007a8c <d_print_comp_inner+0x7b8>)
 8007764:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007768:	f106 0a0a 	add.w	sl, r6, #10
 800776c:	f04f 0900 	mov.w	r9, #0
 8007770:	e00a      	b.n	8007788 <d_print_comp_inner+0x4b4>
 8007772:	460b      	mov	r3, r1
 8007774:	3101      	adds	r1, #1
 8007776:	45b2      	cmp	sl, r6
 8007778:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800777c:	f804 8003 	strb.w	r8, [r4, r3]
 8007780:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007784:	f000 87e6 	beq.w	8008754 <d_print_comp_inner+0x1480>
 8007788:	29ff      	cmp	r1, #255	; 0xff
 800778a:	f816 8b01 	ldrb.w	r8, [r6], #1
 800778e:	d1f0      	bne.n	8007772 <d_print_comp_inner+0x49e>
 8007790:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007794:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007798:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800779c:	4620      	mov	r0, r4
 800779e:	4798      	blx	r3
 80077a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80077a4:	2101      	movs	r1, #1
 80077a6:	440b      	add	r3, r1
 80077a8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80077ac:	2300      	movs	r3, #0
 80077ae:	e7e2      	b.n	8007776 <d_print_comp_inner+0x4a2>
 80077b0:	686a      	ldr	r2, [r5, #4]
 80077b2:	a804      	add	r0, sp, #16
 80077b4:	49b6      	ldr	r1, [pc, #728]	; (8007a90 <d_print_comp_inner+0x7bc>)
 80077b6:	f00b ffe7 	bl	8013788 <siprintf>
 80077ba:	a804      	add	r0, sp, #16
 80077bc:	f007 fb1a 	bl	800edf4 <strlen>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	f43f ae49 	beq.w	8007458 <d_print_comp_inner+0x184>
 80077c6:	ad04      	add	r5, sp, #16
 80077c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80077cc:	182f      	adds	r7, r5, r0
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	e009      	b.n	80077e8 <d_print_comp_inner+0x514>
 80077d4:	460b      	mov	r3, r1
 80077d6:	3101      	adds	r1, #1
 80077d8:	42af      	cmp	r7, r5
 80077da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80077de:	54e6      	strb	r6, [r4, r3]
 80077e0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80077e4:	f43f ae38 	beq.w	8007458 <d_print_comp_inner+0x184>
 80077e8:	29ff      	cmp	r1, #255	; 0xff
 80077ea:	f815 6b01 	ldrb.w	r6, [r5], #1
 80077ee:	d1f1      	bne.n	80077d4 <d_print_comp_inner+0x500>
 80077f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80077f4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80077f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80077fc:	4620      	mov	r0, r4
 80077fe:	4798      	blx	r3
 8007800:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007804:	2101      	movs	r1, #1
 8007806:	440b      	add	r3, r1
 8007808:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800780c:	2300      	movs	r3, #0
 800780e:	e7e3      	b.n	80077d8 <d_print_comp_inner+0x504>
 8007810:	4ea0      	ldr	r6, [pc, #640]	; (8007a94 <d_print_comp_inner+0x7c0>)
 8007812:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007816:	f106 0a16 	add.w	sl, r6, #22
 800781a:	f04f 0900 	mov.w	r9, #0
 800781e:	e00a      	b.n	8007836 <d_print_comp_inner+0x562>
 8007820:	460b      	mov	r3, r1
 8007822:	3101      	adds	r1, #1
 8007824:	45b2      	cmp	sl, r6
 8007826:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800782a:	f804 8003 	strb.w	r8, [r4, r3]
 800782e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007832:	f001 8056 	beq.w	80088e2 <d_print_comp_inner+0x160e>
 8007836:	29ff      	cmp	r1, #255	; 0xff
 8007838:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800783c:	d1f0      	bne.n	8007820 <d_print_comp_inner+0x54c>
 800783e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007842:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007846:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800784a:	4620      	mov	r0, r4
 800784c:	4798      	blx	r3
 800784e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007852:	2101      	movs	r1, #1
 8007854:	440b      	add	r3, r1
 8007856:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800785a:	2300      	movs	r3, #0
 800785c:	e7e2      	b.n	8007824 <d_print_comp_inner+0x550>
 800785e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007862:	792d      	ldrb	r5, [r5, #4]
 8007864:	29ff      	cmp	r1, #255	; 0xff
 8007866:	f001 846d 	beq.w	8009144 <d_print_comp_inner+0x1e70>
 800786a:	1c4b      	adds	r3, r1, #1
 800786c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8007870:	5465      	strb	r5, [r4, r1]
 8007872:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8007876:	e5ef      	b.n	8007458 <d_print_comp_inner+0x184>
 8007878:	686a      	ldr	r2, [r5, #4]
 800787a:	f002 f943 	bl	8009b04 <d_print_comp>
 800787e:	68aa      	ldr	r2, [r5, #8]
 8007880:	4639      	mov	r1, r7
 8007882:	4620      	mov	r0, r4
 8007884:	f002 f93e 	bl	8009b04 <d_print_comp>
 8007888:	e5e6      	b.n	8007458 <d_print_comp_inner+0x184>
 800788a:	686e      	ldr	r6, [r5, #4]
 800788c:	68ad      	ldr	r5, [r5, #8]
 800788e:	7833      	ldrb	r3, [r6, #0]
 8007890:	2b31      	cmp	r3, #49	; 0x31
 8007892:	f001 82b9 	beq.w	8008e08 <d_print_comp_inner+0x1b34>
 8007896:	2b33      	cmp	r3, #51	; 0x33
 8007898:	f041 83fc 	bne.w	8009094 <d_print_comp_inner+0x1dc0>
 800789c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80078a0:	2bff      	cmp	r3, #255	; 0xff
 80078a2:	f001 872f 	beq.w	8009704 <d_print_comp_inner+0x2430>
 80078a6:	1c59      	adds	r1, r3, #1
 80078a8:	f04f 0e28 	mov.w	lr, #40	; 0x28
 80078ac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80078b0:	1d32      	adds	r2, r6, #4
 80078b2:	4639      	mov	r1, r7
 80078b4:	f804 e003 	strb.w	lr, [r4, r3]
 80078b8:	4620      	mov	r0, r4
 80078ba:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 80078be:	f002 fec1 	bl	800a644 <d_print_cast.isra.12>
 80078c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80078c6:	29ff      	cmp	r1, #255	; 0xff
 80078c8:	f001 870b 	beq.w	80096e2 <d_print_comp_inner+0x240e>
 80078cc:	2329      	movs	r3, #41	; 0x29
 80078ce:	1c4a      	adds	r2, r1, #1
 80078d0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80078d4:	5463      	strb	r3, [r4, r1]
 80078d6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80078da:	462a      	mov	r2, r5
 80078dc:	4639      	mov	r1, r7
 80078de:	4620      	mov	r0, r4
 80078e0:	f002 ffc2 	bl	800a868 <d_print_subexpr>
 80078e4:	e5b8      	b.n	8007458 <d_print_comp_inner+0x184>
 80078e6:	686a      	ldr	r2, [r5, #4]
 80078e8:	f002 ff80 	bl	800a7ec <d_print_expr_op>
 80078ec:	e5b4      	b.n	8007458 <d_print_comp_inner+0x184>
 80078ee:	4e6a      	ldr	r6, [pc, #424]	; (8007a98 <d_print_comp_inner+0x7c4>)
 80078f0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80078f4:	f106 0a09 	add.w	sl, r6, #9
 80078f8:	f04f 0900 	mov.w	r9, #0
 80078fc:	e00a      	b.n	8007914 <d_print_comp_inner+0x640>
 80078fe:	460b      	mov	r3, r1
 8007900:	3101      	adds	r1, #1
 8007902:	45b2      	cmp	sl, r6
 8007904:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007908:	f804 8003 	strb.w	r8, [r4, r3]
 800790c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007910:	f001 8031 	beq.w	8008976 <d_print_comp_inner+0x16a2>
 8007914:	29ff      	cmp	r1, #255	; 0xff
 8007916:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800791a:	d1f0      	bne.n	80078fe <d_print_comp_inner+0x62a>
 800791c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007920:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007924:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007928:	4620      	mov	r0, r4
 800792a:	4798      	blx	r3
 800792c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007930:	2101      	movs	r1, #1
 8007932:	440b      	add	r3, r1
 8007934:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007938:	2300      	movs	r3, #0
 800793a:	e7e2      	b.n	8007902 <d_print_comp_inner+0x62e>
 800793c:	4e56      	ldr	r6, [pc, #344]	; (8007a98 <d_print_comp_inner+0x7c4>)
 800793e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007942:	f106 0a09 	add.w	sl, r6, #9
 8007946:	f04f 0900 	mov.w	r9, #0
 800794a:	e00a      	b.n	8007962 <d_print_comp_inner+0x68e>
 800794c:	460b      	mov	r3, r1
 800794e:	3101      	adds	r1, #1
 8007950:	45b2      	cmp	sl, r6
 8007952:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007956:	f804 8003 	strb.w	r8, [r4, r3]
 800795a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800795e:	f001 8031 	beq.w	80089c4 <d_print_comp_inner+0x16f0>
 8007962:	29ff      	cmp	r1, #255	; 0xff
 8007964:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007968:	d1f0      	bne.n	800794c <d_print_comp_inner+0x678>
 800796a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800796e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007972:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007976:	4620      	mov	r0, r4
 8007978:	4798      	blx	r3
 800797a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800797e:	2101      	movs	r1, #1
 8007980:	440b      	add	r3, r1
 8007982:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007986:	2300      	movs	r3, #0
 8007988:	e7e2      	b.n	8007950 <d_print_comp_inner+0x67c>
 800798a:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800798e:	4d43      	ldr	r5, [pc, #268]	; (8007a9c <d_print_comp_inner+0x7c8>)
 8007990:	f8da 7008 	ldr.w	r7, [sl, #8]
 8007994:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007998:	f105 0808 	add.w	r8, r5, #8
 800799c:	f04f 0900 	mov.w	r9, #0
 80079a0:	e009      	b.n	80079b6 <d_print_comp_inner+0x6e2>
 80079a2:	460b      	mov	r3, r1
 80079a4:	3101      	adds	r1, #1
 80079a6:	45a8      	cmp	r8, r5
 80079a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80079ac:	54e6      	strb	r6, [r4, r3]
 80079ae:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80079b2:	f000 8756 	beq.w	8008862 <d_print_comp_inner+0x158e>
 80079b6:	29ff      	cmp	r1, #255	; 0xff
 80079b8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80079bc:	d1f1      	bne.n	80079a2 <d_print_comp_inner+0x6ce>
 80079be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80079c2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80079c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80079ca:	4620      	mov	r0, r4
 80079cc:	4798      	blx	r3
 80079ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80079d2:	2101      	movs	r1, #1
 80079d4:	440b      	add	r3, r1
 80079d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80079da:	2300      	movs	r3, #0
 80079dc:	e7e3      	b.n	80079a6 <d_print_comp_inner+0x6d2>
 80079de:	686a      	ldr	r2, [r5, #4]
 80079e0:	68ae      	ldr	r6, [r5, #8]
 80079e2:	b10a      	cbz	r2, 80079e8 <d_print_comp_inner+0x714>
 80079e4:	f002 f88e 	bl	8009b04 <d_print_comp>
 80079e8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80079ec:	2bff      	cmp	r3, #255	; 0xff
 80079ee:	f001 8484 	beq.w	80092fa <d_print_comp_inner+0x2026>
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	257b      	movs	r5, #123	; 0x7b
 80079f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80079fa:	4639      	mov	r1, r7
 80079fc:	54e5      	strb	r5, [r4, r3]
 80079fe:	4632      	mov	r2, r6
 8007a00:	4620      	mov	r0, r4
 8007a02:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8007a06:	f002 f87d 	bl	8009b04 <d_print_comp>
 8007a0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007a0e:	29ff      	cmp	r1, #255	; 0xff
 8007a10:	f001 8367 	beq.w	80090e2 <d_print_comp_inner+0x1e0e>
 8007a14:	1c4a      	adds	r2, r1, #1
 8007a16:	237d      	movs	r3, #125	; 0x7d
 8007a18:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007a1c:	5463      	strb	r3, [r4, r1]
 8007a1e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007a22:	e519      	b.n	8007458 <d_print_comp_inner+0x184>
 8007a24:	686a      	ldr	r2, [r5, #4]
 8007a26:	b10a      	cbz	r2, 8007a2c <d_print_comp_inner+0x758>
 8007a28:	f002 f86c 	bl	8009b04 <d_print_comp>
 8007a2c:	68ab      	ldr	r3, [r5, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f43f ad12 	beq.w	8007458 <d_print_comp_inner+0x184>
 8007a34:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8007a38:	2efd      	cmp	r6, #253	; 0xfd
 8007a3a:	f201 830b 	bhi.w	8009054 <d_print_comp_inner+0x1d80>
 8007a3e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007aa0 <d_print_comp_inner+0x7cc>
 8007a42:	f04f 0a00 	mov.w	sl, #0
 8007a46:	f108 0b02 	add.w	fp, r8, #2
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	e009      	b.n	8007a62 <d_print_comp_inner+0x78e>
 8007a4e:	460b      	mov	r3, r1
 8007a50:	3101      	adds	r1, #1
 8007a52:	45c3      	cmp	fp, r8
 8007a54:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007a58:	54e6      	strb	r6, [r4, r3]
 8007a5a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007a5e:	f001 8060 	beq.w	8008b22 <d_print_comp_inner+0x184e>
 8007a62:	29ff      	cmp	r1, #255	; 0xff
 8007a64:	f818 6b01 	ldrb.w	r6, [r8], #1
 8007a68:	d1f1      	bne.n	8007a4e <d_print_comp_inner+0x77a>
 8007a6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007a6e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8007a72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007a76:	4620      	mov	r0, r4
 8007a78:	4798      	blx	r3
 8007a7a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007a7e:	2101      	movs	r1, #1
 8007a80:	440b      	add	r3, r1
 8007a82:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007a86:	2300      	movs	r3, #0
 8007a88:	e7e3      	b.n	8007a52 <d_print_comp_inner+0x77e>
 8007a8a:	bf00      	nop
 8007a8c:	08016140 	.word	0x08016140
 8007a90:	08015f60 	.word	0x08015f60
 8007a94:	080160a3 	.word	0x080160a3
 8007a98:	080160e3 	.word	0x080160e3
 8007a9c:	080160d7 	.word	0x080160d7
 8007aa0:	080160d4 	.word	0x080160d4
 8007aa4:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f041 8186 	bne.w	8008dba <d_print_comp_inner+0x1ae6>
 8007aae:	686a      	ldr	r2, [r5, #4]
 8007ab0:	4bd3      	ldr	r3, [pc, #844]	; (8007e00 <d_print_comp_inner+0xb2c>)
 8007ab2:	6851      	ldr	r1, [r2, #4]
 8007ab4:	4299      	cmp	r1, r3
 8007ab6:	f001 817c 	beq.w	8008db2 <d_print_comp_inner+0x1ade>
 8007aba:	4639      	mov	r1, r7
 8007abc:	4620      	mov	r0, r4
 8007abe:	f002 f821 	bl	8009b04 <d_print_comp>
 8007ac2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007ac6:	2bff      	cmp	r3, #255	; 0xff
 8007ac8:	f001 85be 	beq.w	8009648 <d_print_comp_inner+0x2374>
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ad4:	54e2      	strb	r2, [r4, r3]
 8007ad6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007ada:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f001 8100 	beq.w	8008ce4 <d_print_comp_inner+0x1a10>
 8007ae4:	4dc7      	ldr	r5, [pc, #796]	; (8007e04 <d_print_comp_inner+0xb30>)
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	1daf      	adds	r7, r5, #6
 8007aec:	e009      	b.n	8007b02 <d_print_comp_inner+0x82e>
 8007aee:	460b      	mov	r3, r1
 8007af0:	3101      	adds	r1, #1
 8007af2:	42bd      	cmp	r5, r7
 8007af4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007af8:	54e6      	strb	r6, [r4, r3]
 8007afa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007afe:	f43f acab 	beq.w	8007458 <d_print_comp_inner+0x184>
 8007b02:	29ff      	cmp	r1, #255	; 0xff
 8007b04:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007b08:	d1f1      	bne.n	8007aee <d_print_comp_inner+0x81a>
 8007b0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007b0e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007b12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007b16:	4620      	mov	r0, r4
 8007b18:	4798      	blx	r3
 8007b1a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007b1e:	2101      	movs	r1, #1
 8007b20:	440b      	add	r3, r1
 8007b22:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007b26:	2300      	movs	r3, #0
 8007b28:	e7e3      	b.n	8007af2 <d_print_comp_inner+0x81e>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007b30:	e492      	b.n	8007458 <d_print_comp_inner+0x184>
 8007b32:	4eb5      	ldr	r6, [pc, #724]	; (8007e08 <d_print_comp_inner+0xb34>)
 8007b34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007b38:	f106 0a0e 	add.w	sl, r6, #14
 8007b3c:	f04f 0900 	mov.w	r9, #0
 8007b40:	e00a      	b.n	8007b58 <d_print_comp_inner+0x884>
 8007b42:	460b      	mov	r3, r1
 8007b44:	3101      	adds	r1, #1
 8007b46:	45b2      	cmp	sl, r6
 8007b48:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007b4c:	f804 8003 	strb.w	r8, [r4, r3]
 8007b50:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007b54:	f000 867e 	beq.w	8008854 <d_print_comp_inner+0x1580>
 8007b58:	29ff      	cmp	r1, #255	; 0xff
 8007b5a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007b5e:	d1f0      	bne.n	8007b42 <d_print_comp_inner+0x86e>
 8007b60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007b64:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007b68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4798      	blx	r3
 8007b70:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007b74:	2101      	movs	r1, #1
 8007b76:	440b      	add	r3, r1
 8007b78:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e7e2      	b.n	8007b46 <d_print_comp_inner+0x872>
 8007b80:	686a      	ldr	r2, [r5, #4]
 8007b82:	7811      	ldrb	r1, [r2, #0]
 8007b84:	2927      	cmp	r1, #39	; 0x27
 8007b86:	f001 81a6 	beq.w	8008ed6 <d_print_comp_inner+0x1c02>
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007b90:	29ff      	cmp	r1, #255	; 0xff
 8007b92:	f001 8428 	beq.w	80093e6 <d_print_comp_inner+0x2112>
 8007b96:	1c4a      	adds	r2, r1, #1
 8007b98:	2328      	movs	r3, #40	; 0x28
 8007b9a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007b9e:	5463      	strb	r3, [r4, r1]
 8007ba0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007ba4:	686a      	ldr	r2, [r5, #4]
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f001 ffab 	bl	8009b04 <d_print_comp>
 8007bae:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007bb2:	2bff      	cmp	r3, #255	; 0xff
 8007bb4:	f001 83ed 	beq.w	8009392 <d_print_comp_inner+0x20be>
 8007bb8:	1c59      	adds	r1, r3, #1
 8007bba:	2229      	movs	r2, #41	; 0x29
 8007bbc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007bc0:	54e2      	strb	r2, [r4, r3]
 8007bc2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007bc6:	782b      	ldrb	r3, [r5, #0]
 8007bc8:	2b3c      	cmp	r3, #60	; 0x3c
 8007bca:	f001 827e 	beq.w	80090ca <d_print_comp_inner+0x1df6>
 8007bce:	2e08      	cmp	r6, #8
 8007bd0:	f001 8221 	beq.w	8009016 <d_print_comp_inner+0x1d42>
 8007bd4:	68aa      	ldr	r2, [r5, #8]
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f001 ff93 	bl	8009b04 <d_print_comp>
 8007bde:	e43b      	b.n	8007458 <d_print_comp_inner+0x184>
 8007be0:	2301      	movs	r3, #1
 8007be2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007be6:	e437      	b.n	8007458 <d_print_comp_inner+0x184>
 8007be8:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8007bec:	ab14      	add	r3, sp, #80	; 0x50
 8007bee:	f843 2d40 	str.w	r2, [r3, #-64]!
 8007bf2:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8007bf6:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	68aa      	ldr	r2, [r5, #8]
 8007bfe:	9306      	str	r3, [sp, #24]
 8007c00:	9505      	str	r5, [sp, #20]
 8007c02:	9607      	str	r6, [sp, #28]
 8007c04:	f001 ff7e 	bl	8009b04 <d_print_comp>
 8007c08:	9b06      	ldr	r3, [sp, #24]
 8007c0a:	b923      	cbnz	r3, 8007c16 <d_print_comp_inner+0x942>
 8007c0c:	462a      	mov	r2, r5
 8007c0e:	4639      	mov	r1, r7
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 ff87 	bl	8009b24 <d_print_mod>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8007c1c:	e41c      	b.n	8007458 <d_print_comp_inner+0x184>
 8007c1e:	f8d0 a114 	ldr.w	sl, [r0, #276]	; 0x114
 8007c22:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8007c26:	4656      	mov	r6, sl
 8007c28:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8007c2c:	f849 ad40 	str.w	sl, [r9, #-64]!
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8cd a000 	str.w	sl, [sp]
 8007c36:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8007c3a:	9505      	str	r5, [sp, #20]
 8007c3c:	9207      	str	r2, [sp, #28]
 8007c3e:	9306      	str	r3, [sp, #24]
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	f001 8585 	beq.w	8009750 <d_print_comp_inner+0x247c>
 8007c46:	6873      	ldr	r3, [r6, #4]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	3b19      	subs	r3, #25
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	f201 857f 	bhi.w	8009750 <d_print_comp_inner+0x247c>
 8007c52:	46ac      	mov	ip, r5
 8007c54:	f04f 0801 	mov.w	r8, #1
 8007c58:	464d      	mov	r5, r9
 8007c5a:	e004      	b.n	8007c66 <d_print_comp_inner+0x992>
 8007c5c:	6873      	ldr	r3, [r6, #4]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	3b19      	subs	r3, #25
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d81e      	bhi.n	8007ca4 <d_print_comp_inner+0x9d0>
 8007c66:	68b3      	ldr	r3, [r6, #8]
 8007c68:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007c6c:	b9bb      	cbnz	r3, 8007c9e <d_print_comp_inner+0x9ca>
 8007c6e:	f1b8 0f03 	cmp.w	r8, #3
 8007c72:	f201 82d0 	bhi.w	8009216 <d_print_comp_inner+0x1f42>
 8007c76:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007c7a:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 8007c7e:	eb0e 0b0a 	add.w	fp, lr, sl
 8007c82:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
 8007c86:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8007c8a:	f84b 5c40 	str.w	r5, [fp, #-64]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	eb09 050a 	add.w	r5, r9, sl
 8007c94:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8007c98:	f108 0801 	add.w	r8, r8, #1
 8007c9c:	60b3      	str	r3, [r6, #8]
 8007c9e:	6836      	ldr	r6, [r6, #0]
 8007ca0:	2e00      	cmp	r6, #0
 8007ca2:	d1db      	bne.n	8007c5c <d_print_comp_inner+0x988>
 8007ca4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007ca8:	4639      	mov	r1, r7
 8007caa:	4620      	mov	r0, r4
 8007cac:	4665      	mov	r5, ip
 8007cae:	f001 ff29 	bl	8009b04 <d_print_comp>
 8007cb2:	9a00      	ldr	r2, [sp, #0]
 8007cb4:	9b06      	ldr	r3, [sp, #24]
 8007cb6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f47f abcc 	bne.w	8007458 <d_print_comp_inner+0x184>
 8007cc0:	f1b8 0f01 	cmp.w	r8, #1
 8007cc4:	d00e      	beq.n	8007ce4 <d_print_comp_inner+0xa10>
 8007cc6:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 8007cca:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8007cce:	f108 38ff 	add.w	r8, r8, #4294967295
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f001 ff25 	bl	8009b24 <d_print_mod>
 8007cda:	f1b8 0f01 	cmp.w	r8, #1
 8007cde:	f1a9 0910 	sub.w	r9, r9, #16
 8007ce2:	d1f2      	bne.n	8007cca <d_print_comp_inner+0x9f6>
 8007ce4:	1d2a      	adds	r2, r5, #4
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007cec:	4620      	mov	r0, r4
 8007cee:	f002 fad7 	bl	800a2a0 <d_print_array_type.isra.10>
 8007cf2:	f7ff bbb1 	b.w	8007458 <d_print_comp_inner+0x184>
 8007cf6:	068b      	lsls	r3, r1, #26
 8007cf8:	f101 8048 	bmi.w	8008d8c <d_print_comp_inner+0x1ab8>
 8007cfc:	686b      	ldr	r3, [r5, #4]
 8007cfe:	b11b      	cbz	r3, 8007d08 <d_print_comp_inner+0xa34>
 8007d00:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8007d04:	f001 82ca 	beq.w	800929c <d_print_comp_inner+0x1fc8>
 8007d08:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 8007d0c:	f105 0208 	add.w	r2, r5, #8
 8007d10:	4639      	mov	r1, r7
 8007d12:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007d16:	4620      	mov	r0, r4
 8007d18:	f002 fb9e 	bl	800a458 <d_print_function_type.isra.11>
 8007d1c:	f7ff bb9c 	b.w	8007458 <d_print_comp_inner+0x184>
 8007d20:	68ab      	ldr	r3, [r5, #8]
 8007d22:	781a      	ldrb	r2, [r3, #0]
 8007d24:	2a39      	cmp	r2, #57	; 0x39
 8007d26:	f47f ab9f 	bne.w	8007468 <d_print_comp_inner+0x194>
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	7811      	ldrb	r1, [r2, #0]
 8007d2e:	293a      	cmp	r1, #58	; 0x3a
 8007d30:	f47f ab9a 	bne.w	8007468 <d_print_comp_inner+0x194>
 8007d34:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8007d38:	4934      	ldr	r1, [pc, #208]	; (8007e0c <d_print_comp_inner+0xb38>)
 8007d3a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8007d3e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007d42:	6800      	ldr	r0, [r0, #0]
 8007d44:	6856      	ldr	r6, [r2, #4]
 8007d46:	6895      	ldr	r5, [r2, #8]
 8007d48:	f007 f84a 	bl	800ede0 <strcmp>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	f001 850d 	beq.w	800976c <d_print_comp_inner+0x2498>
 8007d52:	2204      	movs	r2, #4
 8007d54:	492e      	ldr	r1, [pc, #184]	; (8007e10 <d_print_comp_inner+0xb3c>)
 8007d56:	4620      	mov	r0, r4
 8007d58:	f7fe fffc 	bl	8006d54 <d_append_buffer>
 8007d5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d60:	b183      	cbz	r3, 8007d84 <d_print_comp_inner+0xab0>
 8007d62:	4639      	mov	r1, r7
 8007d64:	4642      	mov	r2, r8
 8007d66:	4620      	mov	r0, r4
 8007d68:	f002 fd7e 	bl	800a868 <d_print_subexpr>
 8007d6c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007d70:	29ff      	cmp	r1, #255	; 0xff
 8007d72:	f001 8628 	beq.w	80099c6 <d_print_comp_inner+0x26f2>
 8007d76:	2320      	movs	r3, #32
 8007d78:	1c4a      	adds	r2, r1, #1
 8007d7a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007d7e:	5463      	strb	r3, [r4, r1]
 8007d80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007d84:	4632      	mov	r2, r6
 8007d86:	4639      	mov	r1, r7
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f001 febb 	bl	8009b04 <d_print_comp>
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	f43f ab62 	beq.w	8007458 <d_print_comp_inner+0x184>
 8007d94:	462a      	mov	r2, r5
 8007d96:	4639      	mov	r1, r7
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f002 fd65 	bl	800a868 <d_print_subexpr>
 8007d9e:	f7ff bb5b 	b.w	8007458 <d_print_comp_inner+0x184>
 8007da2:	4e1c      	ldr	r6, [pc, #112]	; (8007e14 <d_print_comp_inner+0xb40>)
 8007da4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007da8:	f106 0a11 	add.w	sl, r6, #17
 8007dac:	f04f 0900 	mov.w	r9, #0
 8007db0:	e00a      	b.n	8007dc8 <d_print_comp_inner+0xaf4>
 8007db2:	460b      	mov	r3, r1
 8007db4:	3101      	adds	r1, #1
 8007db6:	4556      	cmp	r6, sl
 8007db8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007dbc:	f804 8003 	strb.w	r8, [r4, r3]
 8007dc0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007dc4:	f000 84bf 	beq.w	8008746 <d_print_comp_inner+0x1472>
 8007dc8:	29ff      	cmp	r1, #255	; 0xff
 8007dca:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007dce:	d1f0      	bne.n	8007db2 <d_print_comp_inner+0xade>
 8007dd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007dd4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007dd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007ddc:	4620      	mov	r0, r4
 8007dde:	4798      	blx	r3
 8007de0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007de4:	2101      	movs	r1, #1
 8007de6:	440b      	add	r3, r1
 8007de8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007dec:	2300      	movs	r3, #0
 8007dee:	e7e2      	b.n	8007db6 <d_print_comp_inner+0xae2>
 8007df0:	4e09      	ldr	r6, [pc, #36]	; (8007e18 <d_print_comp_inner+0xb44>)
 8007df2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007df6:	f106 0a15 	add.w	sl, r6, #21
 8007dfa:	f04f 0900 	mov.w	r9, #0
 8007dfe:	e018      	b.n	8007e32 <d_print_comp_inner+0xb5e>
 8007e00:	08014ac4 	.word	0x08014ac4
 8007e04:	080160c4 	.word	0x080160c4
 8007e08:	0801612f 	.word	0x0801612f
 8007e0c:	08016104 	.word	0x08016104
 8007e10:	0801610c 	.word	0x0801610c
 8007e14:	08015feb 	.word	0x08015feb
 8007e18:	08015fe7 	.word	0x08015fe7
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	3101      	adds	r1, #1
 8007e20:	45b2      	cmp	sl, r6
 8007e22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e26:	f804 8003 	strb.w	r8, [r4, r3]
 8007e2a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007e2e:	f000 8483 	beq.w	8008738 <d_print_comp_inner+0x1464>
 8007e32:	29ff      	cmp	r1, #255	; 0xff
 8007e34:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007e38:	d1f0      	bne.n	8007e1c <d_print_comp_inner+0xb48>
 8007e3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e3e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007e42:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007e46:	4620      	mov	r0, r4
 8007e48:	4798      	blx	r3
 8007e4a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007e4e:	2101      	movs	r1, #1
 8007e50:	440b      	add	r3, r1
 8007e52:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007e56:	2300      	movs	r3, #0
 8007e58:	e7e2      	b.n	8007e20 <d_print_comp_inner+0xb4c>
 8007e5a:	4eda      	ldr	r6, [pc, #872]	; (80081c4 <d_print_comp_inner+0xef0>)
 8007e5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007e60:	f106 0a10 	add.w	sl, r6, #16
 8007e64:	f04f 0900 	mov.w	r9, #0
 8007e68:	e00a      	b.n	8007e80 <d_print_comp_inner+0xbac>
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	3101      	adds	r1, #1
 8007e6e:	45b2      	cmp	sl, r6
 8007e70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e74:	f804 8003 	strb.w	r8, [r4, r3]
 8007e78:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007e7c:	f000 8455 	beq.w	800872a <d_print_comp_inner+0x1456>
 8007e80:	29ff      	cmp	r1, #255	; 0xff
 8007e82:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007e86:	d1f0      	bne.n	8007e6a <d_print_comp_inner+0xb96>
 8007e88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007e90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007e94:	4620      	mov	r0, r4
 8007e96:	4798      	blx	r3
 8007e98:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	440b      	add	r3, r1
 8007ea0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e7e2      	b.n	8007e6e <d_print_comp_inner+0xb9a>
 8007ea8:	4ec7      	ldr	r6, [pc, #796]	; (80081c8 <d_print_comp_inner+0xef4>)
 8007eaa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007eae:	f106 0a12 	add.w	sl, r6, #18
 8007eb2:	f04f 0900 	mov.w	r9, #0
 8007eb6:	e00a      	b.n	8007ece <d_print_comp_inner+0xbfa>
 8007eb8:	460b      	mov	r3, r1
 8007eba:	3101      	adds	r1, #1
 8007ebc:	45b2      	cmp	sl, r6
 8007ebe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ec2:	f804 8003 	strb.w	r8, [r4, r3]
 8007ec6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007eca:	f000 85d5 	beq.w	8008a78 <d_print_comp_inner+0x17a4>
 8007ece:	29ff      	cmp	r1, #255	; 0xff
 8007ed0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007ed4:	d1f0      	bne.n	8007eb8 <d_print_comp_inner+0xbe4>
 8007ed6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007eda:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007ede:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	4798      	blx	r3
 8007ee6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007eea:	2101      	movs	r1, #1
 8007eec:	440b      	add	r3, r1
 8007eee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e7e2      	b.n	8007ebc <d_print_comp_inner+0xbe8>
 8007ef6:	68af      	ldr	r7, [r5, #8]
 8007ef8:	686d      	ldr	r5, [r5, #4]
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	f43f aaac 	beq.w	8007458 <d_print_comp_inner+0x184>
 8007f00:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f04:	442f      	add	r7, r5
 8007f06:	f04f 0800 	mov.w	r8, #0
 8007f0a:	e009      	b.n	8007f20 <d_print_comp_inner+0xc4c>
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	3101      	adds	r1, #1
 8007f10:	42af      	cmp	r7, r5
 8007f12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f16:	54e6      	strb	r6, [r4, r3]
 8007f18:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007f1c:	f43f aa9c 	beq.w	8007458 <d_print_comp_inner+0x184>
 8007f20:	29ff      	cmp	r1, #255	; 0xff
 8007f22:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007f26:	d1f1      	bne.n	8007f0c <d_print_comp_inner+0xc38>
 8007f28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007f30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f34:	4620      	mov	r0, r4
 8007f36:	4798      	blx	r3
 8007f38:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	440b      	add	r3, r1
 8007f40:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f44:	2300      	movs	r3, #0
 8007f46:	e7e3      	b.n	8007f10 <d_print_comp_inner+0xc3c>
 8007f48:	4ea0      	ldr	r6, [pc, #640]	; (80081cc <d_print_comp_inner+0xef8>)
 8007f4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f4e:	f106 0a11 	add.w	sl, r6, #17
 8007f52:	f04f 0900 	mov.w	r9, #0
 8007f56:	e00a      	b.n	8007f6e <d_print_comp_inner+0xc9a>
 8007f58:	460b      	mov	r3, r1
 8007f5a:	3101      	adds	r1, #1
 8007f5c:	45b2      	cmp	sl, r6
 8007f5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f62:	f804 8003 	strb.w	r8, [r4, r3]
 8007f66:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007f6a:	f000 858c 	beq.w	8008a86 <d_print_comp_inner+0x17b2>
 8007f6e:	29ff      	cmp	r1, #255	; 0xff
 8007f70:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007f74:	d1f0      	bne.n	8007f58 <d_print_comp_inner+0xc84>
 8007f76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f7a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007f7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f82:	4620      	mov	r0, r4
 8007f84:	4798      	blx	r3
 8007f86:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	440b      	add	r3, r1
 8007f8e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f92:	2300      	movs	r3, #0
 8007f94:	e7e2      	b.n	8007f5c <d_print_comp_inner+0xc88>
 8007f96:	4e8e      	ldr	r6, [pc, #568]	; (80081d0 <d_print_comp_inner+0xefc>)
 8007f98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f9c:	f106 0a15 	add.w	sl, r6, #21
 8007fa0:	f04f 0900 	mov.w	r9, #0
 8007fa4:	e00a      	b.n	8007fbc <d_print_comp_inner+0xce8>
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	3101      	adds	r1, #1
 8007faa:	45b2      	cmp	sl, r6
 8007fac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007fb0:	f804 8003 	strb.w	r8, [r4, r3]
 8007fb4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007fb8:	f000 8533 	beq.w	8008a22 <d_print_comp_inner+0x174e>
 8007fbc:	29ff      	cmp	r1, #255	; 0xff
 8007fbe:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007fc2:	d1f0      	bne.n	8007fa6 <d_print_comp_inner+0xcd2>
 8007fc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007fc8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007fcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	4798      	blx	r3
 8007fd4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007fd8:	2101      	movs	r1, #1
 8007fda:	440b      	add	r3, r1
 8007fdc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e7e2      	b.n	8007faa <d_print_comp_inner+0xcd6>
 8007fe4:	4e7b      	ldr	r6, [pc, #492]	; (80081d4 <d_print_comp_inner+0xf00>)
 8007fe6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007fea:	f106 0a19 	add.w	sl, r6, #25
 8007fee:	f04f 0900 	mov.w	r9, #0
 8007ff2:	e00a      	b.n	800800a <d_print_comp_inner+0xd36>
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	3101      	adds	r1, #1
 8007ff8:	45b2      	cmp	sl, r6
 8007ffa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ffe:	f804 8003 	strb.w	r8, [r4, r3]
 8008002:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008006:	f000 8545 	beq.w	8008a94 <d_print_comp_inner+0x17c0>
 800800a:	29ff      	cmp	r1, #255	; 0xff
 800800c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008010:	d1f0      	bne.n	8007ff4 <d_print_comp_inner+0xd20>
 8008012:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008016:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800801a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800801e:	4620      	mov	r0, r4
 8008020:	4798      	blx	r3
 8008022:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008026:	2101      	movs	r1, #1
 8008028:	440b      	add	r3, r1
 800802a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800802e:	2300      	movs	r3, #0
 8008030:	e7e2      	b.n	8007ff8 <d_print_comp_inner+0xd24>
 8008032:	4e69      	ldr	r6, [pc, #420]	; (80081d8 <d_print_comp_inner+0xf04>)
 8008034:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008038:	f106 0a16 	add.w	sl, r6, #22
 800803c:	f04f 0900 	mov.w	r9, #0
 8008040:	e00a      	b.n	8008058 <d_print_comp_inner+0xd84>
 8008042:	460b      	mov	r3, r1
 8008044:	3101      	adds	r1, #1
 8008046:	45b2      	cmp	sl, r6
 8008048:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800804c:	f804 8003 	strb.w	r8, [r4, r3]
 8008050:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008054:	f000 84d7 	beq.w	8008a06 <d_print_comp_inner+0x1732>
 8008058:	29ff      	cmp	r1, #255	; 0xff
 800805a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800805e:	d1f0      	bne.n	8008042 <d_print_comp_inner+0xd6e>
 8008060:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008064:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008068:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800806c:	4620      	mov	r0, r4
 800806e:	4798      	blx	r3
 8008070:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008074:	2101      	movs	r1, #1
 8008076:	440b      	add	r3, r1
 8008078:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800807c:	2300      	movs	r3, #0
 800807e:	e7e2      	b.n	8008046 <d_print_comp_inner+0xd72>
 8008080:	4e56      	ldr	r6, [pc, #344]	; (80081dc <d_print_comp_inner+0xf08>)
 8008082:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008086:	f106 0a13 	add.w	sl, r6, #19
 800808a:	f04f 0900 	mov.w	r9, #0
 800808e:	e00a      	b.n	80080a6 <d_print_comp_inner+0xdd2>
 8008090:	460b      	mov	r3, r1
 8008092:	3101      	adds	r1, #1
 8008094:	4556      	cmp	r6, sl
 8008096:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800809a:	f804 8003 	strb.w	r8, [r4, r3]
 800809e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80080a2:	f000 84b7 	beq.w	8008a14 <d_print_comp_inner+0x1740>
 80080a6:	29ff      	cmp	r1, #255	; 0xff
 80080a8:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80080ac:	d1f0      	bne.n	8008090 <d_print_comp_inner+0xdbc>
 80080ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80080b2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80080b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80080ba:	4620      	mov	r0, r4
 80080bc:	4798      	blx	r3
 80080be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80080c2:	2101      	movs	r1, #1
 80080c4:	440b      	add	r3, r1
 80080c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80080ca:	2300      	movs	r3, #0
 80080cc:	e7e2      	b.n	8008094 <d_print_comp_inner+0xdc0>
 80080ce:	4e44      	ldr	r6, [pc, #272]	; (80081e0 <d_print_comp_inner+0xf0c>)
 80080d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80080d4:	f106 0a0f 	add.w	sl, r6, #15
 80080d8:	f04f 0900 	mov.w	r9, #0
 80080dc:	e00a      	b.n	80080f4 <d_print_comp_inner+0xe20>
 80080de:	460b      	mov	r3, r1
 80080e0:	3101      	adds	r1, #1
 80080e2:	4556      	cmp	r6, sl
 80080e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80080e8:	f804 8003 	strb.w	r8, [r4, r3]
 80080ec:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80080f0:	f000 830d 	beq.w	800870e <d_print_comp_inner+0x143a>
 80080f4:	29ff      	cmp	r1, #255	; 0xff
 80080f6:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80080fa:	d1f0      	bne.n	80080de <d_print_comp_inner+0xe0a>
 80080fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008100:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008104:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008108:	4620      	mov	r0, r4
 800810a:	4798      	blx	r3
 800810c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008110:	2101      	movs	r1, #1
 8008112:	440b      	add	r3, r1
 8008114:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008118:	2300      	movs	r3, #0
 800811a:	e7e2      	b.n	80080e2 <d_print_comp_inner+0xe0e>
 800811c:	4e31      	ldr	r6, [pc, #196]	; (80081e4 <d_print_comp_inner+0xf10>)
 800811e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008122:	f106 0a1a 	add.w	sl, r6, #26
 8008126:	f04f 0900 	mov.w	r9, #0
 800812a:	e00a      	b.n	8008142 <d_print_comp_inner+0xe6e>
 800812c:	460b      	mov	r3, r1
 800812e:	3101      	adds	r1, #1
 8008130:	4556      	cmp	r6, sl
 8008132:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008136:	f804 8003 	strb.w	r8, [r4, r3]
 800813a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800813e:	f000 82ed 	beq.w	800871c <d_print_comp_inner+0x1448>
 8008142:	29ff      	cmp	r1, #255	; 0xff
 8008144:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008148:	d1f0      	bne.n	800812c <d_print_comp_inner+0xe58>
 800814a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800814e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008152:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008156:	4620      	mov	r0, r4
 8008158:	4798      	blx	r3
 800815a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800815e:	2101      	movs	r1, #1
 8008160:	440b      	add	r3, r1
 8008162:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008166:	2300      	movs	r3, #0
 8008168:	e7e2      	b.n	8008130 <d_print_comp_inner+0xe5c>
 800816a:	f011 0704 	ands.w	r7, r1, #4
 800816e:	f040 8539 	bne.w	8008be4 <d_print_comp_inner+0x1910>
 8008172:	686a      	ldr	r2, [r5, #4]
 8008174:	6853      	ldr	r3, [r2, #4]
 8008176:	6815      	ldr	r5, [r2, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f43f a96d 	beq.w	8007458 <d_print_comp_inner+0x184>
 800817e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008182:	eb05 0803 	add.w	r8, r5, r3
 8008186:	e009      	b.n	800819c <d_print_comp_inner+0xec8>
 8008188:	460b      	mov	r3, r1
 800818a:	3101      	adds	r1, #1
 800818c:	4545      	cmp	r5, r8
 800818e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008192:	54e6      	strb	r6, [r4, r3]
 8008194:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008198:	f43f a95e 	beq.w	8007458 <d_print_comp_inner+0x184>
 800819c:	29ff      	cmp	r1, #255	; 0xff
 800819e:	f815 6b01 	ldrb.w	r6, [r5], #1
 80081a2:	d1f1      	bne.n	8008188 <d_print_comp_inner+0xeb4>
 80081a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80081a8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80081ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80081b0:	4620      	mov	r0, r4
 80081b2:	4798      	blx	r3
 80081b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80081b8:	2101      	movs	r1, #1
 80081ba:	440b      	add	r3, r1
 80081bc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80081c0:	2300      	movs	r3, #0
 80081c2:	e7e3      	b.n	800818c <d_print_comp_inner+0xeb8>
 80081c4:	08015fd3 	.word	0x08015fd3
 80081c8:	08015fbf 	.word	0x08015fbf
 80081cc:	0801608b 	.word	0x0801608b
 80081d0:	08016073 	.word	0x08016073
 80081d4:	08016057 	.word	0x08016057
 80081d8:	0801603f 	.word	0x0801603f
 80081dc:	0801602b 	.word	0x0801602b
 80081e0:	0801601b 	.word	0x0801601b
 80081e4:	08015fff 	.word	0x08015fff
 80081e8:	6868      	ldr	r0, [r5, #4]
 80081ea:	7803      	ldrb	r3, [r0, #0]
 80081ec:	2b05      	cmp	r3, #5
 80081ee:	f000 8697 	beq.w	8008f20 <d_print_comp_inner+0x1c4c>
 80081f2:	f04f 0800 	mov.w	r8, #0
 80081f6:	2b23      	cmp	r3, #35	; 0x23
 80081f8:	f000 8596 	beq.w	8008d28 <d_print_comp_inner+0x1a54>
 80081fc:	782a      	ldrb	r2, [r5, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	f000 8592 	beq.w	8008d28 <d_print_comp_inner+0x1a54>
 8008204:	2b24      	cmp	r3, #36	; 0x24
 8008206:	f001 808b 	beq.w	8009320 <d_print_comp_inner+0x204c>
 800820a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800820e:	ab14      	add	r3, sp, #80	; 0x50
 8008210:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 8008214:	f843 0d40 	str.w	r0, [r3, #-64]!
 8008218:	2200      	movs	r2, #0
 800821a:	9505      	str	r5, [sp, #20]
 800821c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8008220:	9107      	str	r1, [sp, #28]
 8008222:	9206      	str	r2, [sp, #24]
 8008224:	686a      	ldr	r2, [r5, #4]
 8008226:	4639      	mov	r1, r7
 8008228:	4620      	mov	r0, r4
 800822a:	f001 fc6b 	bl	8009b04 <d_print_comp>
 800822e:	9b06      	ldr	r3, [sp, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 848d 	beq.w	8008b50 <d_print_comp_inner+0x187c>
 8008236:	9b04      	ldr	r3, [sp, #16]
 8008238:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800823c:	f1b8 0f00 	cmp.w	r8, #0
 8008240:	f43f a90a 	beq.w	8007458 <d_print_comp_inner+0x184>
 8008244:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8008248:	f7ff b906 	b.w	8007458 <d_print_comp_inner+0x184>
 800824c:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 8008250:	f04f 0800 	mov.w	r8, #0
 8008254:	e7db      	b.n	800820e <d_print_comp_inner+0xf3a>
 8008256:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 800825a:	f1bc 0f00 	cmp.w	ip, #0
 800825e:	f001 831f 	beq.w	80098a0 <d_print_comp_inner+0x25cc>
 8008262:	4662      	mov	r2, ip
 8008264:	6891      	ldr	r1, [r2, #8]
 8008266:	b951      	cbnz	r1, 800827e <d_print_comp_inner+0xfaa>
 8008268:	6850      	ldr	r0, [r2, #4]
 800826a:	7800      	ldrb	r0, [r0, #0]
 800826c:	f1a0 0e19 	sub.w	lr, r0, #25
 8008270:	f1be 0f02 	cmp.w	lr, #2
 8008274:	f200 8703 	bhi.w	800907e <d_print_comp_inner+0x1daa>
 8008278:	4283      	cmp	r3, r0
 800827a:	f000 8704 	beq.w	8009086 <d_print_comp_inner+0x1db2>
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	2a00      	cmp	r2, #0
 8008282:	d1ef      	bne.n	8008264 <d_print_comp_inner+0xf90>
 8008284:	4660      	mov	r0, ip
 8008286:	4690      	mov	r8, r2
 8008288:	e7c1      	b.n	800820e <d_print_comp_inner+0xf3a>
 800828a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800828e:	29ff      	cmp	r1, #255	; 0xff
 8008290:	f000 8769 	beq.w	8009166 <d_print_comp_inner+0x1e92>
 8008294:	1c4a      	adds	r2, r1, #1
 8008296:	237e      	movs	r3, #126	; 0x7e
 8008298:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800829c:	5463      	strb	r3, [r4, r1]
 800829e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80082a2:	4639      	mov	r1, r7
 80082a4:	68aa      	ldr	r2, [r5, #8]
 80082a6:	4620      	mov	r0, r4
 80082a8:	f001 fc2c 	bl	8009b04 <d_print_comp>
 80082ac:	f7ff b8d4 	b.w	8007458 <d_print_comp_inner+0x184>
 80082b0:	686a      	ldr	r2, [r5, #4]
 80082b2:	f001 fc27 	bl	8009b04 <d_print_comp>
 80082b6:	f7ff b8cf 	b.w	8007458 <d_print_comp_inner+0x184>
 80082ba:	4edd      	ldr	r6, [pc, #884]	; (8008630 <d_print_comp_inner+0x135c>)
 80082bc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80082c0:	f106 0a0d 	add.w	sl, r6, #13
 80082c4:	f04f 0900 	mov.w	r9, #0
 80082c8:	e00a      	b.n	80082e0 <d_print_comp_inner+0x100c>
 80082ca:	460b      	mov	r3, r1
 80082cc:	3101      	adds	r1, #1
 80082ce:	45b2      	cmp	sl, r6
 80082d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80082d4:	f804 8003 	strb.w	r8, [r4, r3]
 80082d8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80082dc:	f000 83e8 	beq.w	8008ab0 <d_print_comp_inner+0x17dc>
 80082e0:	29ff      	cmp	r1, #255	; 0xff
 80082e2:	f816 8b01 	ldrb.w	r8, [r6], #1
 80082e6:	d1f0      	bne.n	80082ca <d_print_comp_inner+0xff6>
 80082e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80082ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80082f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80082f4:	4620      	mov	r0, r4
 80082f6:	4798      	blx	r3
 80082f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80082fc:	2101      	movs	r1, #1
 80082fe:	440b      	add	r3, r1
 8008300:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008304:	2300      	movs	r3, #0
 8008306:	e7e2      	b.n	80082ce <d_print_comp_inner+0xffa>
 8008308:	4eca      	ldr	r6, [pc, #808]	; (8008634 <d_print_comp_inner+0x1360>)
 800830a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800830e:	f106 0a18 	add.w	sl, r6, #24
 8008312:	f04f 0900 	mov.w	r9, #0
 8008316:	e00a      	b.n	800832e <d_print_comp_inner+0x105a>
 8008318:	460b      	mov	r3, r1
 800831a:	3101      	adds	r1, #1
 800831c:	45b2      	cmp	sl, r6
 800831e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008322:	f804 8003 	strb.w	r8, [r4, r3]
 8008326:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800832a:	f000 83c8 	beq.w	8008abe <d_print_comp_inner+0x17ea>
 800832e:	29ff      	cmp	r1, #255	; 0xff
 8008330:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008334:	d1f0      	bne.n	8008318 <d_print_comp_inner+0x1044>
 8008336:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800833a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800833e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008342:	4620      	mov	r0, r4
 8008344:	4798      	blx	r3
 8008346:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800834a:	2101      	movs	r1, #1
 800834c:	440b      	add	r3, r1
 800834e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008352:	2300      	movs	r3, #0
 8008354:	e7e2      	b.n	800831c <d_print_comp_inner+0x1048>
 8008356:	4eb8      	ldr	r6, [pc, #736]	; (8008638 <d_print_comp_inner+0x1364>)
 8008358:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800835c:	f106 0a08 	add.w	sl, r6, #8
 8008360:	f04f 0900 	mov.w	r9, #0
 8008364:	e00a      	b.n	800837c <d_print_comp_inner+0x10a8>
 8008366:	460b      	mov	r3, r1
 8008368:	3101      	adds	r1, #1
 800836a:	45b2      	cmp	sl, r6
 800836c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008370:	f804 8003 	strb.w	r8, [r4, r3]
 8008374:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008378:	f000 833e 	beq.w	80089f8 <d_print_comp_inner+0x1724>
 800837c:	29ff      	cmp	r1, #255	; 0xff
 800837e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008382:	d1f0      	bne.n	8008366 <d_print_comp_inner+0x1092>
 8008384:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008388:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800838c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008390:	4620      	mov	r0, r4
 8008392:	4798      	blx	r3
 8008394:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008398:	2101      	movs	r1, #1
 800839a:	440b      	add	r3, r1
 800839c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80083a0:	2300      	movs	r3, #0
 80083a2:	e7e2      	b.n	800836a <d_print_comp_inner+0x1096>
 80083a4:	4ea5      	ldr	r6, [pc, #660]	; (800863c <d_print_comp_inner+0x1368>)
 80083a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80083aa:	f106 0a0b 	add.w	sl, r6, #11
 80083ae:	f04f 0900 	mov.w	r9, #0
 80083b2:	e00a      	b.n	80083ca <d_print_comp_inner+0x10f6>
 80083b4:	460b      	mov	r3, r1
 80083b6:	3101      	adds	r1, #1
 80083b8:	45b2      	cmp	sl, r6
 80083ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80083be:	f804 8003 	strb.w	r8, [r4, r3]
 80083c2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80083c6:	f000 819b 	beq.w	8008700 <d_print_comp_inner+0x142c>
 80083ca:	29ff      	cmp	r1, #255	; 0xff
 80083cc:	f816 8b01 	ldrb.w	r8, [r6], #1
 80083d0:	d1f0      	bne.n	80083b4 <d_print_comp_inner+0x10e0>
 80083d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80083d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80083da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80083de:	4620      	mov	r0, r4
 80083e0:	4798      	blx	r3
 80083e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80083e6:	2101      	movs	r1, #1
 80083e8:	440b      	add	r3, r1
 80083ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80083ee:	2300      	movs	r3, #0
 80083f0:	e7e2      	b.n	80083b8 <d_print_comp_inner+0x10e4>
 80083f2:	2300      	movs	r3, #0
 80083f4:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 80083f8:	f8d0 8140 	ldr.w	r8, [r0, #320]	; 0x140
 80083fc:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8008400:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
 8008404:	074a      	lsls	r2, r1, #29
 8008406:	686e      	ldr	r6, [r5, #4]
 8008408:	d505      	bpl.n	8008416 <d_print_comp_inner+0x1142>
 800840a:	7833      	ldrb	r3, [r6, #0]
 800840c:	b91b      	cbnz	r3, 8008416 <d_print_comp_inner+0x1142>
 800840e:	68b2      	ldr	r2, [r6, #8]
 8008410:	2a06      	cmp	r2, #6
 8008412:	f001 808b 	beq.w	800952c <d_print_comp_inner+0x2258>
 8008416:	4632      	mov	r2, r6
 8008418:	4639      	mov	r1, r7
 800841a:	4620      	mov	r0, r4
 800841c:	f001 fb72 	bl	8009b04 <d_print_comp>
 8008420:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8008424:	2b3c      	cmp	r3, #60	; 0x3c
 8008426:	f000 85e8 	beq.w	8008ffa <d_print_comp_inner+0x1d26>
 800842a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800842e:	2bff      	cmp	r3, #255	; 0xff
 8008430:	f000 879c 	beq.w	800936c <d_print_comp_inner+0x2098>
 8008434:	1c59      	adds	r1, r3, #1
 8008436:	223c      	movs	r2, #60	; 0x3c
 8008438:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800843c:	54e2      	strb	r2, [r4, r3]
 800843e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8008442:	4639      	mov	r1, r7
 8008444:	68aa      	ldr	r2, [r5, #8]
 8008446:	4620      	mov	r0, r4
 8008448:	f001 fb5c 	bl	8009b04 <d_print_comp>
 800844c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8008450:	2b3e      	cmp	r3, #62	; 0x3e
 8008452:	f000 85c4 	beq.w	8008fde <d_print_comp_inner+0x1d0a>
 8008456:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800845a:	2bff      	cmp	r3, #255	; 0xff
 800845c:	f000 8773 	beq.w	8009346 <d_print_comp_inner+0x2072>
 8008460:	1c59      	adds	r1, r3, #1
 8008462:	223e      	movs	r2, #62	; 0x3e
 8008464:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008468:	54e2      	strb	r2, [r4, r3]
 800846a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800846e:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8008472:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 8008476:	f7fe bfef 	b.w	8007458 <d_print_comp_inner+0x184>
 800847a:	2300      	movs	r3, #0
 800847c:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8008480:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8008484:	686e      	ldr	r6, [r5, #4]
 8008486:	9200      	str	r2, [sp, #0]
 8008488:	2e00      	cmp	r6, #0
 800848a:	f000 8134 	beq.w	80086f6 <d_print_comp_inner+0x1422>
 800848e:	f10d 0910 	add.w	r9, sp, #16
 8008492:	469e      	mov	lr, r3
 8008494:	4618      	mov	r0, r3
 8008496:	464a      	mov	r2, r9
 8008498:	f8d4 c110 	ldr.w	ip, [r4, #272]	; 0x110
 800849c:	7831      	ldrb	r1, [r6, #0]
 800849e:	f10e 0801 	add.w	r8, lr, #1
 80084a2:	f1a1 0a1c 	sub.w	sl, r1, #28
 80084a6:	f1ba 0f04 	cmp.w	sl, #4
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80084b0:	6056      	str	r6, [r2, #4]
 80084b2:	6090      	str	r0, [r2, #8]
 80084b4:	f8c2 c00c 	str.w	ip, [r2, #12]
 80084b8:	4613      	mov	r3, r2
 80084ba:	f102 0210 	add.w	r2, r2, #16
 80084be:	f240 8113 	bls.w	80086e8 <d_print_comp_inner+0x1414>
 80084c2:	2904      	cmp	r1, #4
 80084c4:	f001 8193 	beq.w	80097ee <d_print_comp_inner+0x251a>
 80084c8:	2902      	cmp	r1, #2
 80084ca:	d137      	bne.n	800853c <d_print_comp_inner+0x1268>
 80084cc:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80084d0:	f89b 3000 	ldrb.w	r3, [fp]
 80084d4:	2b45      	cmp	r3, #69	; 0x45
 80084d6:	bf08      	it	eq
 80084d8:	f8db b004 	ldreq.w	fp, [fp, #4]
 80084dc:	f89b 3000 	ldrb.w	r3, [fp]
 80084e0:	3b1c      	subs	r3, #28
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d82a      	bhi.n	800853c <d_print_comp_inner+0x1268>
 80084e6:	f1b8 0f04 	cmp.w	r8, #4
 80084ea:	f000 8104 	beq.w	80086f6 <d_print_comp_inner+0x1422>
 80084ee:	462b      	mov	r3, r5
 80084f0:	eb09 1e0e 	add.w	lr, r9, lr, lsl #4
 80084f4:	46b2      	mov	sl, r6
 80084f6:	465d      	mov	r5, fp
 80084f8:	4666      	mov	r6, ip
 80084fa:	469b      	mov	fp, r3
 80084fc:	46a4      	mov	ip, r4
 80084fe:	4674      	mov	r4, lr
 8008500:	e003      	b.n	800850a <d_print_comp_inner+0x1236>
 8008502:	f1b8 0f04 	cmp.w	r8, #4
 8008506:	f001 81b7 	beq.w	8009878 <d_print_comp_inner+0x25a4>
 800850a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800850e:	f104 0e10 	add.w	lr, r4, #16
 8008512:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8008516:	4623      	mov	r3, r4
 8008518:	2200      	movs	r2, #0
 800851a:	611c      	str	r4, [r3, #16]
 800851c:	605d      	str	r5, [r3, #4]
 800851e:	609a      	str	r2, [r3, #8]
 8008520:	60de      	str	r6, [r3, #12]
 8008522:	f8cc e114 	str.w	lr, [ip, #276]	; 0x114
 8008526:	686d      	ldr	r5, [r5, #4]
 8008528:	4674      	mov	r4, lr
 800852a:	782b      	ldrb	r3, [r5, #0]
 800852c:	f108 0801 	add.w	r8, r8, #1
 8008530:	3b1c      	subs	r3, #28
 8008532:	2b04      	cmp	r3, #4
 8008534:	d9e5      	bls.n	8008502 <d_print_comp_inner+0x122e>
 8008536:	4656      	mov	r6, sl
 8008538:	4664      	mov	r4, ip
 800853a:	465d      	mov	r5, fp
 800853c:	68aa      	ldr	r2, [r5, #8]
 800853e:	4639      	mov	r1, r7
 8008540:	4620      	mov	r0, r4
 8008542:	f001 fadf 	bl	8009b04 <d_print_comp>
 8008546:	7833      	ldrb	r3, [r6, #0]
 8008548:	2b04      	cmp	r3, #4
 800854a:	f001 8190 	beq.w	800986e <d_print_comp_inner+0x259a>
 800854e:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 8008552:	4645      	mov	r5, r8
 8008554:	46b8      	mov	r8, r7
 8008556:	2620      	movs	r6, #32
 8008558:	f859 7c08 	ldr.w	r7, [r9, #-8]
 800855c:	3d01      	subs	r5, #1
 800855e:	b987      	cbnz	r7, 8008582 <d_print_comp_inner+0x12ae>
 8008560:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008564:	29ff      	cmp	r1, #255	; 0xff
 8008566:	f001 8172 	beq.w	800984e <d_print_comp_inner+0x257a>
 800856a:	1c4b      	adds	r3, r1, #1
 800856c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008570:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8008574:	5466      	strb	r6, [r4, r1]
 8008576:	4620      	mov	r0, r4
 8008578:	4641      	mov	r1, r8
 800857a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800857e:	f001 fad1 	bl	8009b24 <d_print_mod>
 8008582:	f1a9 0910 	sub.w	r9, r9, #16
 8008586:	2d00      	cmp	r5, #0
 8008588:	d1e6      	bne.n	8008558 <d_print_comp_inner+0x1284>
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8008590:	f7fe bf62 	b.w	8007458 <d_print_comp_inner+0x184>
 8008594:	686a      	ldr	r2, [r5, #4]
 8008596:	f001 fab5 	bl	8009b04 <d_print_comp>
 800859a:	f017 0904 	ands.w	r9, r7, #4
 800859e:	f000 8475 	beq.w	8008e8c <d_print_comp_inner+0x1bb8>
 80085a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80085a6:	29ff      	cmp	r1, #255	; 0xff
 80085a8:	f000 87d3 	beq.w	8009552 <d_print_comp_inner+0x227e>
 80085ac:	1c4a      	adds	r2, r1, #1
 80085ae:	232e      	movs	r3, #46	; 0x2e
 80085b0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80085b4:	5463      	strb	r3, [r4, r1]
 80085b6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80085ba:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80085be:	f898 3000 	ldrb.w	r3, [r8]
 80085c2:	2b45      	cmp	r3, #69	; 0x45
 80085c4:	f000 862c 	beq.w	8009220 <d_print_comp_inner+0x1f4c>
 80085c8:	4642      	mov	r2, r8
 80085ca:	4639      	mov	r1, r7
 80085cc:	4620      	mov	r0, r4
 80085ce:	f001 fa99 	bl	8009b04 <d_print_comp>
 80085d2:	f7fe bf41 	b.w	8007458 <d_print_comp_inner+0x184>
 80085d6:	f011 0704 	ands.w	r7, r1, #4
 80085da:	f040 832d 	bne.w	8008c38 <d_print_comp_inner+0x1964>
 80085de:	68ab      	ldr	r3, [r5, #8]
 80085e0:	686d      	ldr	r5, [r5, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f43e af38 	beq.w	8007458 <d_print_comp_inner+0x184>
 80085e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80085ec:	eb05 0803 	add.w	r8, r5, r3
 80085f0:	e009      	b.n	8008606 <d_print_comp_inner+0x1332>
 80085f2:	460b      	mov	r3, r1
 80085f4:	3101      	adds	r1, #1
 80085f6:	45a8      	cmp	r8, r5
 80085f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80085fc:	54e6      	strb	r6, [r4, r3]
 80085fe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008602:	f43e af29 	beq.w	8007458 <d_print_comp_inner+0x184>
 8008606:	29ff      	cmp	r1, #255	; 0xff
 8008608:	f815 6b01 	ldrb.w	r6, [r5], #1
 800860c:	d1f1      	bne.n	80085f2 <d_print_comp_inner+0x131e>
 800860e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008612:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8008616:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800861a:	4620      	mov	r0, r4
 800861c:	4798      	blx	r3
 800861e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008622:	2101      	movs	r1, #1
 8008624:	440b      	add	r3, r1
 8008626:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800862a:	2300      	movs	r3, #0
 800862c:	e7e3      	b.n	80085f6 <d_print_comp_inner+0x1322>
 800862e:	bf00      	nop
 8008630:	08015fb0 	.word	0x08015fb0
 8008634:	08015f8b 	.word	0x08015f8b
 8008638:	08015f7f 	.word	0x08015f7f
 800863c:	08015f74 	.word	0x08015f74
 8008640:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008644:	f1b9 0f00 	cmp.w	r9, #0
 8008648:	f000 8373 	beq.w	8008d32 <d_print_comp_inner+0x1a5e>
 800864c:	4dda      	ldr	r5, [pc, #872]	; (80089b8 <d_print_comp_inner+0x16e4>)
 800864e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008652:	1daf      	adds	r7, r5, #6
 8008654:	f04f 0800 	mov.w	r8, #0
 8008658:	e009      	b.n	800866e <d_print_comp_inner+0x139a>
 800865a:	460b      	mov	r3, r1
 800865c:	3101      	adds	r1, #1
 800865e:	42bd      	cmp	r5, r7
 8008660:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008664:	54e6      	strb	r6, [r4, r3]
 8008666:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800866a:	f000 8280 	beq.w	8008b6e <d_print_comp_inner+0x189a>
 800866e:	29ff      	cmp	r1, #255	; 0xff
 8008670:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008674:	d1f1      	bne.n	800865a <d_print_comp_inner+0x1386>
 8008676:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800867a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800867e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008682:	4620      	mov	r0, r4
 8008684:	4798      	blx	r3
 8008686:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800868a:	2101      	movs	r1, #1
 800868c:	440b      	add	r3, r1
 800868e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008692:	2300      	movs	r3, #0
 8008694:	e7e3      	b.n	800865e <d_print_comp_inner+0x138a>
 8008696:	1d29      	adds	r1, r5, #4
 8008698:	f7fe fd76 	bl	8007188 <d_lookup_template_argument.isra.6>
 800869c:	2800      	cmp	r0, #0
 800869e:	f43e aee3 	beq.w	8007468 <d_print_comp_inner+0x194>
 80086a2:	7803      	ldrb	r3, [r0, #0]
 80086a4:	2b2f      	cmp	r3, #47	; 0x2f
 80086a6:	f000 84fa 	beq.w	800909e <d_print_comp_inner+0x1dca>
 80086aa:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 80086ae:	4602      	mov	r2, r0
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	4639      	mov	r1, r7
 80086b4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80086b8:	4620      	mov	r0, r4
 80086ba:	f001 fa23 	bl	8009b04 <d_print_comp>
 80086be:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 80086c2:	f7fe bec9 	b.w	8007458 <d_print_comp_inner+0x184>
 80086c6:	68aa      	ldr	r2, [r5, #8]
 80086c8:	f001 fa1c 	bl	8009b04 <d_print_comp>
 80086cc:	f7fe bec4 	b.w	8007458 <d_print_comp_inner+0x184>
 80086d0:	2301      	movs	r3, #1
 80086d2:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80086d6:	f7fe bebf 	b.w	8007458 <d_print_comp_inner+0x184>
 80086da:	f10b 0b01 	add.w	fp, fp, #1
 80086de:	45cb      	cmp	fp, r9
 80086e0:	f47e af39 	bne.w	8007556 <d_print_comp_inner+0x282>
 80086e4:	f7fe beb8 	b.w	8007458 <d_print_comp_inner+0x184>
 80086e8:	6876      	ldr	r6, [r6, #4]
 80086ea:	b126      	cbz	r6, 80086f6 <d_print_comp_inner+0x1422>
 80086ec:	f1b8 0f04 	cmp.w	r8, #4
 80086f0:	46c6      	mov	lr, r8
 80086f2:	f47f aed3 	bne.w	800849c <d_print_comp_inner+0x11c8>
 80086f6:	2301      	movs	r3, #1
 80086f8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80086fc:	f7fe beac 	b.w	8007458 <d_print_comp_inner+0x184>
 8008700:	686a      	ldr	r2, [r5, #4]
 8008702:	4639      	mov	r1, r7
 8008704:	4620      	mov	r0, r4
 8008706:	f001 f9fd 	bl	8009b04 <d_print_comp>
 800870a:	f7fe bea5 	b.w	8007458 <d_print_comp_inner+0x184>
 800870e:	686a      	ldr	r2, [r5, #4]
 8008710:	4639      	mov	r1, r7
 8008712:	4620      	mov	r0, r4
 8008714:	f001 f9f6 	bl	8009b04 <d_print_comp>
 8008718:	f7fe be9e 	b.w	8007458 <d_print_comp_inner+0x184>
 800871c:	686a      	ldr	r2, [r5, #4]
 800871e:	4639      	mov	r1, r7
 8008720:	4620      	mov	r0, r4
 8008722:	f001 f9ef 	bl	8009b04 <d_print_comp>
 8008726:	f7fe be97 	b.w	8007458 <d_print_comp_inner+0x184>
 800872a:	686a      	ldr	r2, [r5, #4]
 800872c:	4639      	mov	r1, r7
 800872e:	4620      	mov	r0, r4
 8008730:	f001 f9e8 	bl	8009b04 <d_print_comp>
 8008734:	f7fe be90 	b.w	8007458 <d_print_comp_inner+0x184>
 8008738:	686a      	ldr	r2, [r5, #4]
 800873a:	4639      	mov	r1, r7
 800873c:	4620      	mov	r0, r4
 800873e:	f001 f9e1 	bl	8009b04 <d_print_comp>
 8008742:	f7fe be89 	b.w	8007458 <d_print_comp_inner+0x184>
 8008746:	686a      	ldr	r2, [r5, #4]
 8008748:	4639      	mov	r1, r7
 800874a:	4620      	mov	r0, r4
 800874c:	f001 f9da 	bl	8009b04 <d_print_comp>
 8008750:	f7fe be82 	b.w	8007458 <d_print_comp_inner+0x184>
 8008754:	4639      	mov	r1, r7
 8008756:	686a      	ldr	r2, [r5, #4]
 8008758:	4620      	mov	r0, r4
 800875a:	f001 f9d3 	bl	8009b04 <d_print_comp>
 800875e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008762:	29ff      	cmp	r1, #255	; 0xff
 8008764:	f000 84cf 	beq.w	8009106 <d_print_comp_inner+0x1e32>
 8008768:	1c4a      	adds	r2, r1, #1
 800876a:	2329      	movs	r3, #41	; 0x29
 800876c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008770:	5463      	strb	r3, [r4, r1]
 8008772:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008776:	f7fe be6f 	b.w	8007458 <d_print_comp_inner+0x184>
 800877a:	686a      	ldr	r2, [r5, #4]
 800877c:	4639      	mov	r1, r7
 800877e:	4620      	mov	r0, r4
 8008780:	f001 f9c0 	bl	8009b04 <d_print_comp>
 8008784:	f7fe be68 	b.w	8007458 <d_print_comp_inner+0x184>
 8008788:	686a      	ldr	r2, [r5, #4]
 800878a:	a804      	add	r0, sp, #16
 800878c:	3201      	adds	r2, #1
 800878e:	498b      	ldr	r1, [pc, #556]	; (80089bc <d_print_comp_inner+0x16e8>)
 8008790:	f00a fffa 	bl	8013788 <siprintf>
 8008794:	a804      	add	r0, sp, #16
 8008796:	f006 fb2d 	bl	800edf4 <strlen>
 800879a:	b318      	cbz	r0, 80087e4 <d_print_comp_inner+0x1510>
 800879c:	ad04      	add	r5, sp, #16
 800879e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80087a2:	182f      	adds	r7, r5, r0
 80087a4:	f04f 0800 	mov.w	r8, #0
 80087a8:	e008      	b.n	80087bc <d_print_comp_inner+0x14e8>
 80087aa:	460b      	mov	r3, r1
 80087ac:	3101      	adds	r1, #1
 80087ae:	42af      	cmp	r7, r5
 80087b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80087b4:	54e6      	strb	r6, [r4, r3]
 80087b6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80087ba:	d015      	beq.n	80087e8 <d_print_comp_inner+0x1514>
 80087bc:	29ff      	cmp	r1, #255	; 0xff
 80087be:	f815 6b01 	ldrb.w	r6, [r5], #1
 80087c2:	d1f2      	bne.n	80087aa <d_print_comp_inner+0x14d6>
 80087c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80087c8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80087cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80087d0:	4620      	mov	r0, r4
 80087d2:	4798      	blx	r3
 80087d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80087d8:	2101      	movs	r1, #1
 80087da:	440b      	add	r3, r1
 80087dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80087e0:	2300      	movs	r3, #0
 80087e2:	e7e4      	b.n	80087ae <d_print_comp_inner+0x14da>
 80087e4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80087e8:	29ff      	cmp	r1, #255	; 0xff
 80087ea:	f000 84cd 	beq.w	8009188 <d_print_comp_inner+0x1eb4>
 80087ee:	1c4a      	adds	r2, r1, #1
 80087f0:	237d      	movs	r3, #125	; 0x7d
 80087f2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80087f6:	5463      	strb	r3, [r4, r1]
 80087f8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80087fc:	f7fe be2c 	b.w	8007458 <d_print_comp_inner+0x184>
 8008800:	4e6f      	ldr	r6, [pc, #444]	; (80089c0 <d_print_comp_inner+0x16ec>)
 8008802:	4639      	mov	r1, r7
 8008804:	686a      	ldr	r2, [r5, #4]
 8008806:	4620      	mov	r0, r4
 8008808:	f001 f97c 	bl	8009b04 <d_print_comp>
 800880c:	f106 0902 	add.w	r9, r6, #2
 8008810:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008814:	f04f 0800 	mov.w	r8, #0
 8008818:	e008      	b.n	800882c <d_print_comp_inner+0x1558>
 800881a:	460b      	mov	r3, r1
 800881c:	3101      	adds	r1, #1
 800881e:	45b1      	cmp	r9, r6
 8008820:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008824:	54e7      	strb	r7, [r4, r3]
 8008826:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800882a:	d068      	beq.n	80088fe <d_print_comp_inner+0x162a>
 800882c:	29ff      	cmp	r1, #255	; 0xff
 800882e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8008832:	d1f2      	bne.n	800881a <d_print_comp_inner+0x1546>
 8008834:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008838:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800883c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008840:	4620      	mov	r0, r4
 8008842:	4798      	blx	r3
 8008844:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008848:	2101      	movs	r1, #1
 800884a:	440b      	add	r3, r1
 800884c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008850:	2300      	movs	r3, #0
 8008852:	e7e4      	b.n	800881e <d_print_comp_inner+0x154a>
 8008854:	686a      	ldr	r2, [r5, #4]
 8008856:	4639      	mov	r1, r7
 8008858:	4620      	mov	r0, r4
 800885a:	f001 f953 	bl	8009b04 <d_print_comp>
 800885e:	f7fe bdfb 	b.w	8007458 <d_print_comp_inner+0x184>
 8008862:	f8da 5004 	ldr.w	r5, [sl, #4]
 8008866:	782b      	ldrb	r3, [r5, #0]
 8008868:	3b61      	subs	r3, #97	; 0x61
 800886a:	2b19      	cmp	r3, #25
 800886c:	d80b      	bhi.n	8008886 <d_print_comp_inner+0x15b2>
 800886e:	29ff      	cmp	r1, #255	; 0xff
 8008870:	f000 8726 	beq.w	80096c0 <d_print_comp_inner+0x23ec>
 8008874:	2320      	movs	r3, #32
 8008876:	1c4a      	adds	r2, r1, #1
 8008878:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800887c:	5463      	strb	r3, [r4, r1]
 800887e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008882:	f8da 5004 	ldr.w	r5, [sl, #4]
 8008886:	19eb      	adds	r3, r5, r7
 8008888:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800888c:	2b20      	cmp	r3, #32
 800888e:	bf08      	it	eq
 8008890:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8008894:	2f00      	cmp	r7, #0
 8008896:	f43e addf 	beq.w	8007458 <d_print_comp_inner+0x184>
 800889a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800889e:	442f      	add	r7, r5
 80088a0:	f04f 0800 	mov.w	r8, #0
 80088a4:	e009      	b.n	80088ba <d_print_comp_inner+0x15e6>
 80088a6:	460b      	mov	r3, r1
 80088a8:	3101      	adds	r1, #1
 80088aa:	42af      	cmp	r7, r5
 80088ac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80088b0:	54e6      	strb	r6, [r4, r3]
 80088b2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80088b6:	f43e adcf 	beq.w	8007458 <d_print_comp_inner+0x184>
 80088ba:	29ff      	cmp	r1, #255	; 0xff
 80088bc:	f815 6b01 	ldrb.w	r6, [r5], #1
 80088c0:	d1f1      	bne.n	80088a6 <d_print_comp_inner+0x15d2>
 80088c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80088c6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80088ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80088ce:	4620      	mov	r0, r4
 80088d0:	4798      	blx	r3
 80088d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80088d6:	2101      	movs	r1, #1
 80088d8:	440b      	add	r3, r1
 80088da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80088de:	2300      	movs	r3, #0
 80088e0:	e7e3      	b.n	80088aa <d_print_comp_inner+0x15d6>
 80088e2:	686a      	ldr	r2, [r5, #4]
 80088e4:	4639      	mov	r1, r7
 80088e6:	4620      	mov	r0, r4
 80088e8:	f001 f90c 	bl	8009b04 <d_print_comp>
 80088ec:	f7fe bdb4 	b.w	8007458 <d_print_comp_inner+0x184>
 80088f0:	686a      	ldr	r2, [r5, #4]
 80088f2:	4639      	mov	r1, r7
 80088f4:	4620      	mov	r0, r4
 80088f6:	f001 f905 	bl	8009b04 <d_print_comp>
 80088fa:	f7fe bdad 	b.w	8007458 <d_print_comp_inner+0x184>
 80088fe:	68aa      	ldr	r2, [r5, #8]
 8008900:	a804      	add	r0, sp, #16
 8008902:	3201      	adds	r2, #1
 8008904:	492d      	ldr	r1, [pc, #180]	; (80089bc <d_print_comp_inner+0x16e8>)
 8008906:	f00a ff3f 	bl	8013788 <siprintf>
 800890a:	a804      	add	r0, sp, #16
 800890c:	f006 fa72 	bl	800edf4 <strlen>
 8008910:	b318      	cbz	r0, 800895a <d_print_comp_inner+0x1686>
 8008912:	ad04      	add	r5, sp, #16
 8008914:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008918:	182f      	adds	r7, r5, r0
 800891a:	f04f 0800 	mov.w	r8, #0
 800891e:	e008      	b.n	8008932 <d_print_comp_inner+0x165e>
 8008920:	460b      	mov	r3, r1
 8008922:	3101      	adds	r1, #1
 8008924:	42af      	cmp	r7, r5
 8008926:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800892a:	54e6      	strb	r6, [r4, r3]
 800892c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008930:	d015      	beq.n	800895e <d_print_comp_inner+0x168a>
 8008932:	29ff      	cmp	r1, #255	; 0xff
 8008934:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008938:	d1f2      	bne.n	8008920 <d_print_comp_inner+0x164c>
 800893a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800893e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008942:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008946:	4620      	mov	r0, r4
 8008948:	4798      	blx	r3
 800894a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800894e:	2101      	movs	r1, #1
 8008950:	440b      	add	r3, r1
 8008952:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008956:	2300      	movs	r3, #0
 8008958:	e7e4      	b.n	8008924 <d_print_comp_inner+0x1650>
 800895a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800895e:	29ff      	cmp	r1, #255	; 0xff
 8008960:	f000 8447 	beq.w	80091f2 <d_print_comp_inner+0x1f1e>
 8008964:	1c4a      	adds	r2, r1, #1
 8008966:	237d      	movs	r3, #125	; 0x7d
 8008968:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800896c:	5463      	strb	r3, [r4, r1]
 800896e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008972:	f7fe bd71 	b.w	8007458 <d_print_comp_inner+0x184>
 8008976:	1d2a      	adds	r2, r5, #4
 8008978:	4639      	mov	r1, r7
 800897a:	4620      	mov	r0, r4
 800897c:	f001 fe62 	bl	800a644 <d_print_cast.isra.12>
 8008980:	f7fe bd6a 	b.w	8007458 <d_print_comp_inner+0x184>
 8008984:	4639      	mov	r1, r7
 8008986:	68aa      	ldr	r2, [r5, #8]
 8008988:	4620      	mov	r0, r4
 800898a:	f001 f8bb 	bl	8009b04 <d_print_comp>
 800898e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008992:	29ff      	cmp	r1, #255	; 0xff
 8008994:	f000 841b 	beq.w	80091ce <d_print_comp_inner+0x1efa>
 8008998:	1c4a      	adds	r2, r1, #1
 800899a:	235d      	movs	r3, #93	; 0x5d
 800899c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80089a0:	5463      	strb	r3, [r4, r1]
 80089a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80089a6:	f7fe bd57 	b.w	8007458 <d_print_comp_inner+0x184>
 80089aa:	686a      	ldr	r2, [r5, #4]
 80089ac:	4639      	mov	r1, r7
 80089ae:	4620      	mov	r0, r4
 80089b0:	f001 f8a8 	bl	8009b04 <d_print_comp>
 80089b4:	f7fe bd50 	b.w	8007458 <d_print_comp_inner+0x184>
 80089b8:	08016158 	.word	0x08016158
 80089bc:	08015f60 	.word	0x08015f60
 80089c0:	080161ac 	.word	0x080161ac
 80089c4:	68aa      	ldr	r2, [r5, #8]
 80089c6:	4639      	mov	r1, r7
 80089c8:	4620      	mov	r0, r4
 80089ca:	f001 f89b 	bl	8009b04 <d_print_comp>
 80089ce:	f7fe bd43 	b.w	8007458 <d_print_comp_inner+0x184>
 80089d2:	4639      	mov	r1, r7
 80089d4:	68aa      	ldr	r2, [r5, #8]
 80089d6:	4620      	mov	r0, r4
 80089d8:	f001 f894 	bl	8009b04 <d_print_comp>
 80089dc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80089e0:	29ff      	cmp	r1, #255	; 0xff
 80089e2:	f000 83e3 	beq.w	80091ac <d_print_comp_inner+0x1ed8>
 80089e6:	1c4a      	adds	r2, r1, #1
 80089e8:	235d      	movs	r3, #93	; 0x5d
 80089ea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80089ee:	5463      	strb	r3, [r4, r1]
 80089f0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80089f4:	f7fe bd30 	b.w	8007458 <d_print_comp_inner+0x184>
 80089f8:	686a      	ldr	r2, [r5, #4]
 80089fa:	4639      	mov	r1, r7
 80089fc:	4620      	mov	r0, r4
 80089fe:	f001 f881 	bl	8009b04 <d_print_comp>
 8008a02:	f7fe bd29 	b.w	8007458 <d_print_comp_inner+0x184>
 8008a06:	686a      	ldr	r2, [r5, #4]
 8008a08:	4639      	mov	r1, r7
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f001 f87a 	bl	8009b04 <d_print_comp>
 8008a10:	f7fe bd22 	b.w	8007458 <d_print_comp_inner+0x184>
 8008a14:	686a      	ldr	r2, [r5, #4]
 8008a16:	4639      	mov	r1, r7
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f001 f873 	bl	8009b04 <d_print_comp>
 8008a1e:	f7fe bd1b 	b.w	8007458 <d_print_comp_inner+0x184>
 8008a22:	4ed5      	ldr	r6, [pc, #852]	; (8008d78 <d_print_comp_inner+0x1aa4>)
 8008a24:	4639      	mov	r1, r7
 8008a26:	68aa      	ldr	r2, [r5, #8]
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f001 f86b 	bl	8009b04 <d_print_comp>
 8008a2e:	f106 0a05 	add.w	sl, r6, #5
 8008a32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008a36:	f04f 0900 	mov.w	r9, #0
 8008a3a:	e009      	b.n	8008a50 <d_print_comp_inner+0x177c>
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	3101      	adds	r1, #1
 8008a40:	45b2      	cmp	sl, r6
 8008a42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008a46:	f804 8003 	strb.w	r8, [r4, r3]
 8008a4a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008a4e:	d028      	beq.n	8008aa2 <d_print_comp_inner+0x17ce>
 8008a50:	29ff      	cmp	r1, #255	; 0xff
 8008a52:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008a56:	d1f1      	bne.n	8008a3c <d_print_comp_inner+0x1768>
 8008a58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008a5c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008a60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008a64:	4620      	mov	r0, r4
 8008a66:	4798      	blx	r3
 8008a68:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	440b      	add	r3, r1
 8008a70:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008a74:	2300      	movs	r3, #0
 8008a76:	e7e3      	b.n	8008a40 <d_print_comp_inner+0x176c>
 8008a78:	686a      	ldr	r2, [r5, #4]
 8008a7a:	4639      	mov	r1, r7
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f001 f841 	bl	8009b04 <d_print_comp>
 8008a82:	f7fe bce9 	b.w	8007458 <d_print_comp_inner+0x184>
 8008a86:	686a      	ldr	r2, [r5, #4]
 8008a88:	4639      	mov	r1, r7
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f001 f83a 	bl	8009b04 <d_print_comp>
 8008a90:	f7fe bce2 	b.w	8007458 <d_print_comp_inner+0x184>
 8008a94:	686a      	ldr	r2, [r5, #4]
 8008a96:	4639      	mov	r1, r7
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f001 f833 	bl	8009b04 <d_print_comp>
 8008a9e:	f7fe bcdb 	b.w	8007458 <d_print_comp_inner+0x184>
 8008aa2:	686a      	ldr	r2, [r5, #4]
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f001 f82c 	bl	8009b04 <d_print_comp>
 8008aac:	f7fe bcd4 	b.w	8007458 <d_print_comp_inner+0x184>
 8008ab0:	686a      	ldr	r2, [r5, #4]
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f001 f825 	bl	8009b04 <d_print_comp>
 8008aba:	f7fe bccd 	b.w	8007458 <d_print_comp_inner+0x184>
 8008abe:	4eaf      	ldr	r6, [pc, #700]	; (8008d7c <d_print_comp_inner+0x1aa8>)
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	686a      	ldr	r2, [r5, #4]
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f001 f81d 	bl	8009b04 <d_print_comp>
 8008aca:	f106 0a04 	add.w	sl, r6, #4
 8008ace:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008ad2:	f04f 0900 	mov.w	r9, #0
 8008ad6:	e009      	b.n	8008aec <d_print_comp_inner+0x1818>
 8008ad8:	460b      	mov	r3, r1
 8008ada:	3101      	adds	r1, #1
 8008adc:	4556      	cmp	r6, sl
 8008ade:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008ae2:	f804 8003 	strb.w	r8, [r4, r3]
 8008ae6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008aea:	d013      	beq.n	8008b14 <d_print_comp_inner+0x1840>
 8008aec:	29ff      	cmp	r1, #255	; 0xff
 8008aee:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008af2:	d1f1      	bne.n	8008ad8 <d_print_comp_inner+0x1804>
 8008af4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008af8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008afc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008b00:	4620      	mov	r0, r4
 8008b02:	4798      	blx	r3
 8008b04:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008b08:	2101      	movs	r1, #1
 8008b0a:	440b      	add	r3, r1
 8008b0c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008b10:	2300      	movs	r3, #0
 8008b12:	e7e3      	b.n	8008adc <d_print_comp_inner+0x1808>
 8008b14:	68aa      	ldr	r2, [r5, #8]
 8008b16:	4639      	mov	r1, r7
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fff3 	bl	8009b04 <d_print_comp>
 8008b1e:	f7fe bc9b 	b.w	8007458 <d_print_comp_inner+0x184>
 8008b22:	68aa      	ldr	r2, [r5, #8]
 8008b24:	460e      	mov	r6, r1
 8008b26:	4620      	mov	r0, r4
 8008b28:	4639      	mov	r1, r7
 8008b2a:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8008b2e:	f000 ffe9 	bl	8009b04 <d_print_comp>
 8008b32:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008b36:	429d      	cmp	r5, r3
 8008b38:	f47e ac8e 	bne.w	8007458 <d_print_comp_inner+0x184>
 8008b3c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008b40:	42b3      	cmp	r3, r6
 8008b42:	f47e ac89 	bne.w	8007458 <d_print_comp_inner+0x184>
 8008b46:	3e02      	subs	r6, #2
 8008b48:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8008b4c:	f7fe bc84 	b.w	8007458 <d_print_comp_inner+0x184>
 8008b50:	462a      	mov	r2, r5
 8008b52:	4639      	mov	r1, r7
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 ffe5 	bl	8009b24 <d_print_mod>
 8008b5a:	f7ff bb6c 	b.w	8008236 <d_print_comp_inner+0xf62>
 8008b5e:	686b      	ldr	r3, [r5, #4]
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	f47e acf0 	bne.w	800754a <d_print_comp_inner+0x276>
 8008b6a:	f7fe bc75 	b.w	8007458 <d_print_comp_inner+0x184>
 8008b6e:	464a      	mov	r2, r9
 8008b70:	a804      	add	r0, sp, #16
 8008b72:	4983      	ldr	r1, [pc, #524]	; (8008d80 <d_print_comp_inner+0x1aac>)
 8008b74:	f00a fe08 	bl	8013788 <siprintf>
 8008b78:	a804      	add	r0, sp, #16
 8008b7a:	f006 f93b 	bl	800edf4 <strlen>
 8008b7e:	b318      	cbz	r0, 8008bc8 <d_print_comp_inner+0x18f4>
 8008b80:	ad04      	add	r5, sp, #16
 8008b82:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008b86:	182f      	adds	r7, r5, r0
 8008b88:	f04f 0800 	mov.w	r8, #0
 8008b8c:	e008      	b.n	8008ba0 <d_print_comp_inner+0x18cc>
 8008b8e:	460b      	mov	r3, r1
 8008b90:	3101      	adds	r1, #1
 8008b92:	42bd      	cmp	r5, r7
 8008b94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008b98:	54e6      	strb	r6, [r4, r3]
 8008b9a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008b9e:	d015      	beq.n	8008bcc <d_print_comp_inner+0x18f8>
 8008ba0:	29ff      	cmp	r1, #255	; 0xff
 8008ba2:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008ba6:	d1f2      	bne.n	8008b8e <d_print_comp_inner+0x18ba>
 8008ba8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008bac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008bb0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	4798      	blx	r3
 8008bb8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	440b      	add	r3, r1
 8008bc0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	e7e4      	b.n	8008b92 <d_print_comp_inner+0x18be>
 8008bc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008bcc:	29ff      	cmp	r1, #255	; 0xff
 8008bce:	f000 841d 	beq.w	800940c <d_print_comp_inner+0x2138>
 8008bd2:	1c4a      	adds	r2, r1, #1
 8008bd4:	237d      	movs	r3, #125	; 0x7d
 8008bd6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008bda:	5463      	strb	r3, [r4, r1]
 8008bdc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008be0:	f7fe bc3a 	b.w	8007458 <d_print_comp_inner+0x184>
 8008be4:	686b      	ldr	r3, [r5, #4]
 8008be6:	68df      	ldr	r7, [r3, #12]
 8008be8:	689d      	ldr	r5, [r3, #8]
 8008bea:	2f00      	cmp	r7, #0
 8008bec:	f43e ac34 	beq.w	8007458 <d_print_comp_inner+0x184>
 8008bf0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008bf4:	442f      	add	r7, r5
 8008bf6:	f04f 0800 	mov.w	r8, #0
 8008bfa:	e009      	b.n	8008c10 <d_print_comp_inner+0x193c>
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	3101      	adds	r1, #1
 8008c00:	42af      	cmp	r7, r5
 8008c02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008c06:	54e6      	strb	r6, [r4, r3]
 8008c08:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008c0c:	f43e ac24 	beq.w	8007458 <d_print_comp_inner+0x184>
 8008c10:	29ff      	cmp	r1, #255	; 0xff
 8008c12:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008c16:	d1f1      	bne.n	8008bfc <d_print_comp_inner+0x1928>
 8008c18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008c1c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008c20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008c24:	4620      	mov	r0, r4
 8008c26:	4798      	blx	r3
 8008c28:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	440b      	add	r3, r1
 8008c30:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008c34:	2300      	movs	r3, #0
 8008c36:	e7e3      	b.n	8008c00 <d_print_comp_inner+0x192c>
 8008c38:	686e      	ldr	r6, [r5, #4]
 8008c3a:	68af      	ldr	r7, [r5, #8]
 8008c3c:	4437      	add	r7, r6
 8008c3e:	42be      	cmp	r6, r7
 8008c40:	f4be ac0a 	bcs.w	8007458 <d_print_comp_inner+0x184>
 8008c44:	f04f 0800 	mov.w	r8, #0
 8008c48:	e00d      	b.n	8008c66 <d_print_comp_inner+0x1992>
 8008c4a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008c4e:	29ff      	cmp	r1, #255	; 0xff
 8008c50:	d038      	beq.n	8008cc4 <d_print_comp_inner+0x19f0>
 8008c52:	1c4b      	adds	r3, r1, #1
 8008c54:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008c58:	5465      	strb	r5, [r4, r1]
 8008c5a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8008c5e:	3601      	adds	r6, #1
 8008c60:	42b7      	cmp	r7, r6
 8008c62:	f67e abf9 	bls.w	8007458 <d_print_comp_inner+0x184>
 8008c66:	1bbb      	subs	r3, r7, r6
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	7835      	ldrb	r5, [r6, #0]
 8008c6c:	dded      	ble.n	8008c4a <d_print_comp_inner+0x1976>
 8008c6e:	2d5f      	cmp	r5, #95	; 0x5f
 8008c70:	d1eb      	bne.n	8008c4a <d_print_comp_inner+0x1976>
 8008c72:	7872      	ldrb	r2, [r6, #1]
 8008c74:	2a5f      	cmp	r2, #95	; 0x5f
 8008c76:	d1e8      	bne.n	8008c4a <d_print_comp_inner+0x1976>
 8008c78:	78b3      	ldrb	r3, [r6, #2]
 8008c7a:	2b55      	cmp	r3, #85	; 0x55
 8008c7c:	d001      	beq.n	8008c82 <d_print_comp_inner+0x19ae>
 8008c7e:	4615      	mov	r5, r2
 8008c80:	e7e3      	b.n	8008c4a <d_print_comp_inner+0x1976>
 8008c82:	1cf3      	adds	r3, r6, #3
 8008c84:	429f      	cmp	r7, r3
 8008c86:	d9fa      	bls.n	8008c7e <d_print_comp_inner+0x19aa>
 8008c88:	2000      	movs	r0, #0
 8008c8a:	e006      	b.n	8008c9a <d_print_comp_inner+0x19c6>
 8008c8c:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8008c90:	42bb      	cmp	r3, r7
 8008c92:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8008c96:	f000 8558 	beq.w	800974a <d_print_comp_inner+0x2476>
 8008c9a:	4699      	mov	r9, r3
 8008c9c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008ca0:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8008ca4:	b2d1      	uxtb	r1, r2
 8008ca6:	2909      	cmp	r1, #9
 8008ca8:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8008cac:	d9f0      	bls.n	8008c90 <d_print_comp_inner+0x19bc>
 8008cae:	f1be 0f05 	cmp.w	lr, #5
 8008cb2:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8008cb6:	d9e9      	bls.n	8008c8c <d_print_comp_inner+0x19b8>
 8008cb8:	2a05      	cmp	r2, #5
 8008cba:	f200 869a 	bhi.w	80099f2 <d_print_comp_inner+0x271e>
 8008cbe:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8008cc2:	e7e5      	b.n	8008c90 <d_print_comp_inner+0x19bc>
 8008cc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008cc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008ccc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	4798      	blx	r3
 8008cd4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008cd8:	2301      	movs	r3, #1
 8008cda:	441a      	add	r2, r3
 8008cdc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	e7b7      	b.n	8008c54 <d_print_comp_inner+0x1980>
 8008ce4:	4d27      	ldr	r5, [pc, #156]	; (8008d84 <d_print_comp_inner+0x1ab0>)
 8008ce6:	4698      	mov	r8, r3
 8008ce8:	1daf      	adds	r7, r5, #6
 8008cea:	e009      	b.n	8008d00 <d_print_comp_inner+0x1a2c>
 8008cec:	460b      	mov	r3, r1
 8008cee:	3101      	adds	r1, #1
 8008cf0:	42af      	cmp	r7, r5
 8008cf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008cf6:	54e6      	strb	r6, [r4, r3]
 8008cf8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008cfc:	f43e abac 	beq.w	8007458 <d_print_comp_inner+0x184>
 8008d00:	29ff      	cmp	r1, #255	; 0xff
 8008d02:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008d06:	d1f1      	bne.n	8008cec <d_print_comp_inner+0x1a18>
 8008d08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008d0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008d14:	4620      	mov	r0, r4
 8008d16:	4798      	blx	r3
 8008d18:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	440b      	add	r3, r1
 8008d20:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008d24:	2300      	movs	r3, #0
 8008d26:	e7e3      	b.n	8008cf0 <d_print_comp_inner+0x1a1c>
 8008d28:	4605      	mov	r5, r0
 8008d2a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8008d2e:	f7ff ba6e 	b.w	800820e <d_print_comp_inner+0xf3a>
 8008d32:	4d15      	ldr	r5, [pc, #84]	; (8008d88 <d_print_comp_inner+0x1ab4>)
 8008d34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008d38:	1d2f      	adds	r7, r5, #4
 8008d3a:	e009      	b.n	8008d50 <d_print_comp_inner+0x1a7c>
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	3101      	adds	r1, #1
 8008d40:	42bd      	cmp	r5, r7
 8008d42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008d46:	54e6      	strb	r6, [r4, r3]
 8008d48:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008d4c:	f43e ab84 	beq.w	8007458 <d_print_comp_inner+0x184>
 8008d50:	29ff      	cmp	r1, #255	; 0xff
 8008d52:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008d56:	d1f1      	bne.n	8008d3c <d_print_comp_inner+0x1a68>
 8008d58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008d5c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008d60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008d64:	4620      	mov	r0, r4
 8008d66:	4798      	blx	r3
 8008d68:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	440b      	add	r3, r1
 8008d70:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008d74:	2300      	movs	r3, #0
 8008d76:	e7e3      	b.n	8008d40 <d_print_comp_inner+0x1a6c>
 8008d78:	0801606c 	.word	0x0801606c
 8008d7c:	08015fa8 	.word	0x08015fa8
 8008d80:	08015f60 	.word	0x08015f60
 8008d84:	080160cc 	.word	0x080160cc
 8008d88:	08016150 	.word	0x08016150
 8008d8c:	f021 0760 	bic.w	r7, r1, #96	; 0x60
 8008d90:	f105 0208 	add.w	r2, r5, #8
 8008d94:	4639      	mov	r1, r7
 8008d96:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8008d9a:	f001 fb5d 	bl	800a458 <d_print_function_type.isra.11>
 8008d9e:	686a      	ldr	r2, [r5, #4]
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	f43e ab59 	beq.w	8007458 <d_print_comp_inner+0x184>
 8008da6:	4639      	mov	r1, r7
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 feab 	bl	8009b04 <d_print_comp>
 8008dae:	f7fe bb53 	b.w	8007458 <d_print_comp_inner+0x184>
 8008db2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008db6:	f7fe be90 	b.w	8007ada <d_print_comp_inner+0x806>
 8008dba:	4edc      	ldr	r6, [pc, #880]	; (800912c <d_print_comp_inner+0x1e58>)
 8008dbc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008dc0:	f106 0a05 	add.w	sl, r6, #5
 8008dc4:	f04f 0900 	mov.w	r9, #0
 8008dc8:	e00a      	b.n	8008de0 <d_print_comp_inner+0x1b0c>
 8008dca:	460b      	mov	r3, r1
 8008dcc:	3101      	adds	r1, #1
 8008dce:	4556      	cmp	r6, sl
 8008dd0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008dd4:	f804 8003 	strb.w	r8, [r4, r3]
 8008dd8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008ddc:	f43e ae67 	beq.w	8007aae <d_print_comp_inner+0x7da>
 8008de0:	29ff      	cmp	r1, #255	; 0xff
 8008de2:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008de6:	d1f0      	bne.n	8008dca <d_print_comp_inner+0x1af6>
 8008de8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008dec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008df0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008df4:	4620      	mov	r0, r4
 8008df6:	4798      	blx	r3
 8008df8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	440b      	add	r3, r1
 8008e00:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008e04:	2300      	movs	r3, #0
 8008e06:	e7e2      	b.n	8008dce <d_print_comp_inner+0x1afa>
 8008e08:	6873      	ldr	r3, [r6, #4]
 8008e0a:	49c9      	ldr	r1, [pc, #804]	; (8009130 <d_print_comp_inner+0x1e5c>)
 8008e0c:	f8d3 8000 	ldr.w	r8, [r3]
 8008e10:	4640      	mov	r0, r8
 8008e12:	f005 ffe5 	bl	800ede0 <strcmp>
 8008e16:	782b      	ldrb	r3, [r5, #0]
 8008e18:	b910      	cbnz	r0, 8008e20 <d_print_comp_inner+0x1b4c>
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	f000 84db 	beq.w	80097d6 <d_print_comp_inner+0x2502>
 8008e20:	2b37      	cmp	r3, #55	; 0x37
 8008e22:	f000 8585 	beq.w	8009930 <d_print_comp_inner+0x265c>
 8008e26:	4639      	mov	r1, r7
 8008e28:	4620      	mov	r0, r4
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	f001 fcde 	bl	800a7ec <d_print_expr_op>
 8008e30:	49c0      	ldr	r1, [pc, #768]	; (8009134 <d_print_comp_inner+0x1e60>)
 8008e32:	4640      	mov	r0, r8
 8008e34:	f005 ffd4 	bl	800ede0 <strcmp>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	f000 8257 	beq.w	80092ec <d_print_comp_inner+0x2018>
 8008e3e:	4640      	mov	r0, r8
 8008e40:	49bd      	ldr	r1, [pc, #756]	; (8009138 <d_print_comp_inner+0x1e64>)
 8008e42:	f005 ffcd 	bl	800ede0 <strcmp>
 8008e46:	4606      	mov	r6, r0
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	f47e ad46 	bne.w	80078da <d_print_comp_inner+0x606>
 8008e4e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008e52:	2bff      	cmp	r3, #255	; 0xff
 8008e54:	f000 8468 	beq.w	8009728 <d_print_comp_inner+0x2454>
 8008e58:	1c58      	adds	r0, r3, #1
 8008e5a:	2628      	movs	r6, #40	; 0x28
 8008e5c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8008e60:	4639      	mov	r1, r7
 8008e62:	54e6      	strb	r6, [r4, r3]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4620      	mov	r0, r4
 8008e68:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008e6c:	f000 fe4a 	bl	8009b04 <d_print_comp>
 8008e70:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e74:	29ff      	cmp	r1, #255	; 0xff
 8008e76:	f000 83d6 	beq.w	8009626 <d_print_comp_inner+0x2352>
 8008e7a:	1c4a      	adds	r2, r1, #1
 8008e7c:	2329      	movs	r3, #41	; 0x29
 8008e7e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008e82:	5463      	strb	r3, [r4, r1]
 8008e84:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008e88:	f7fe bae6 	b.w	8007458 <d_print_comp_inner+0x184>
 8008e8c:	4eab      	ldr	r6, [pc, #684]	; (800913c <d_print_comp_inner+0x1e68>)
 8008e8e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e92:	f106 0a02 	add.w	sl, r6, #2
 8008e96:	e00a      	b.n	8008eae <d_print_comp_inner+0x1bda>
 8008e98:	460b      	mov	r3, r1
 8008e9a:	3101      	adds	r1, #1
 8008e9c:	4556      	cmp	r6, sl
 8008e9e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008ea2:	f804 8003 	strb.w	r8, [r4, r3]
 8008ea6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008eaa:	f43f ab86 	beq.w	80085ba <d_print_comp_inner+0x12e6>
 8008eae:	29ff      	cmp	r1, #255	; 0xff
 8008eb0:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008eb4:	d1f0      	bne.n	8008e98 <d_print_comp_inner+0x1bc4>
 8008eb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008eba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008ebe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	4798      	blx	r3
 8008ec6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008eca:	2101      	movs	r1, #1
 8008ecc:	440b      	add	r3, r1
 8008ece:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e7e2      	b.n	8008e9c <d_print_comp_inner+0x1bc8>
 8008ed6:	6852      	ldr	r2, [r2, #4]
 8008ed8:	7c16      	ldrb	r6, [r2, #16]
 8008eda:	2e00      	cmp	r6, #0
 8008edc:	f43e ae56 	beq.w	8007b8c <d_print_comp_inner+0x8b8>
 8008ee0:	2e06      	cmp	r6, #6
 8008ee2:	f240 8357 	bls.w	8009594 <d_print_comp_inner+0x22c0>
 8008ee6:	2e07      	cmp	r6, #7
 8008ee8:	f47e ae50 	bne.w	8007b8c <d_print_comp_inner+0x8b8>
 8008eec:	68aa      	ldr	r2, [r5, #8]
 8008eee:	7811      	ldrb	r1, [r2, #0]
 8008ef0:	2900      	cmp	r1, #0
 8008ef2:	f47e ae4b 	bne.w	8007b8c <d_print_comp_inner+0x8b8>
 8008ef6:	6891      	ldr	r1, [r2, #8]
 8008ef8:	2901      	cmp	r1, #1
 8008efa:	f47e ae47 	bne.w	8007b8c <d_print_comp_inner+0x8b8>
 8008efe:	2b3b      	cmp	r3, #59	; 0x3b
 8008f00:	f47e ae44 	bne.w	8007b8c <d_print_comp_inner+0x8b8>
 8008f04:	6853      	ldr	r3, [r2, #4]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b30      	cmp	r3, #48	; 0x30
 8008f0a:	f000 85bb 	beq.w	8009a84 <d_print_comp_inner+0x27b0>
 8008f0e:	2b31      	cmp	r3, #49	; 0x31
 8008f10:	f47e ae3c 	bne.w	8007b8c <d_print_comp_inner+0x8b8>
 8008f14:	2204      	movs	r2, #4
 8008f16:	498a      	ldr	r1, [pc, #552]	; (8009140 <d_print_comp_inner+0x1e6c>)
 8008f18:	f7fd ff1c 	bl	8006d54 <d_append_buffer>
 8008f1c:	f7fe ba9c 	b.w	8007458 <d_print_comp_inner+0x184>
 8008f20:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 8008f24:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8008f28:	f1bc 0f00 	cmp.w	ip, #0
 8008f2c:	dd14      	ble.n	8008f58 <d_print_comp_inner+0x1c84>
 8008f2e:	680b      	ldr	r3, [r1, #0]
 8008f30:	4298      	cmp	r0, r3
 8008f32:	f000 855c 	beq.w	80099ee <d_print_comp_inner+0x271a>
 8008f36:	f101 0208 	add.w	r2, r1, #8
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	46a6      	mov	lr, r4
 8008f3e:	e007      	b.n	8008f50 <d_print_comp_inner+0x1c7c>
 8008f40:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8008f44:	4690      	mov	r8, r2
 8008f46:	42a0      	cmp	r0, r4
 8008f48:	f102 0208 	add.w	r2, r2, #8
 8008f4c:	f000 8270 	beq.w	8009430 <d_print_comp_inner+0x215c>
 8008f50:	3301      	adds	r3, #1
 8008f52:	459c      	cmp	ip, r3
 8008f54:	d1f4      	bne.n	8008f40 <d_print_comp_inner+0x1c6c>
 8008f56:	4674      	mov	r4, lr
 8008f58:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8008f5c:	459c      	cmp	ip, r3
 8008f5e:	f280 84f5 	bge.w	800994c <d_print_comp_inner+0x2678>
 8008f62:	f10c 0301 	add.w	r3, ip, #1
 8008f66:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8008f6a:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8008f6e:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 8008f72:	f841 003c 	str.w	r0, [r1, ip, lsl #3]
 8008f76:	f103 0e04 	add.w	lr, r3, #4
 8008f7a:	f1b8 0f00 	cmp.w	r8, #0
 8008f7e:	d021      	beq.n	8008fc4 <d_print_comp_inner+0x1cf0>
 8008f80:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8008f84:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8008f88:	4299      	cmp	r1, r3
 8008f8a:	f340 84df 	ble.w	800994c <d_print_comp_inner+0x2678>
 8008f8e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8008f92:	4681      	mov	r9, r0
 8008f94:	e002      	b.n	8008f9c <d_print_comp_inner+0x1cc8>
 8008f96:	4299      	cmp	r1, r3
 8008f98:	f000 84d6 	beq.w	8009948 <d_print_comp_inner+0x2674>
 8008f9c:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 8008fa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008fa4:	4462      	add	r2, ip
 8008fa6:	6050      	str	r0, [r2, #4]
 8008fa8:	f8ce 2000 	str.w	r2, [lr]
 8008fac:	f8d8 8000 	ldr.w	r8, [r8]
 8008fb0:	f10c 0c08 	add.w	ip, ip, #8
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	4696      	mov	lr, r2
 8008fb8:	f1b8 0f00 	cmp.w	r8, #0
 8008fbc:	d1eb      	bne.n	8008f96 <d_print_comp_inner+0x1cc2>
 8008fbe:	4648      	mov	r0, r9
 8008fc0:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8008fc4:	f04f 0800 	mov.w	r8, #0
 8008fc8:	1d01      	adds	r1, r0, #4
 8008fca:	f8ce 8000 	str.w	r8, [lr]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f7fe f8da 	bl	8007188 <d_lookup_template_argument.isra.6>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	f040 8246 	bne.w	8009466 <d_print_comp_inner+0x2192>
 8008fda:	f7fe ba45 	b.w	8007468 <d_print_comp_inner+0x194>
 8008fde:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008fe2:	29ff      	cmp	r1, #255	; 0xff
 8008fe4:	f000 8411 	beq.w	800980a <d_print_comp_inner+0x2536>
 8008fe8:	2220      	movs	r2, #32
 8008fea:	1c4b      	adds	r3, r1, #1
 8008fec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008ff0:	5462      	strb	r2, [r4, r1]
 8008ff2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8008ff6:	f7ff ba30 	b.w	800845a <d_print_comp_inner+0x1186>
 8008ffa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008ffe:	29ff      	cmp	r1, #255	; 0xff
 8009000:	f000 843d 	beq.w	800987e <d_print_comp_inner+0x25aa>
 8009004:	2220      	movs	r2, #32
 8009006:	1c4b      	adds	r3, r1, #1
 8009008:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800900c:	5462      	strb	r2, [r4, r1]
 800900e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009012:	f7ff ba0c 	b.w	800842e <d_print_comp_inner+0x115a>
 8009016:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800901a:	29ff      	cmp	r1, #255	; 0xff
 800901c:	f000 8444 	beq.w	80098a8 <d_print_comp_inner+0x25d4>
 8009020:	1c4a      	adds	r2, r1, #1
 8009022:	235b      	movs	r3, #91	; 0x5b
 8009024:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009028:	5463      	strb	r3, [r4, r1]
 800902a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800902e:	4639      	mov	r1, r7
 8009030:	68aa      	ldr	r2, [r5, #8]
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fd66 	bl	8009b04 <d_print_comp>
 8009038:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800903c:	29ff      	cmp	r1, #255	; 0xff
 800903e:	f000 832f 	beq.w	80096a0 <d_print_comp_inner+0x23cc>
 8009042:	235d      	movs	r3, #93	; 0x5d
 8009044:	1c4a      	adds	r2, r1, #1
 8009046:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800904a:	5463      	strb	r3, [r4, r1]
 800904c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009050:	f7fe ba02 	b.w	8007458 <d_print_comp_inner+0x184>
 8009054:	f04f 0800 	mov.w	r8, #0
 8009058:	f804 8006 	strb.w	r8, [r4, r6]
 800905c:	4631      	mov	r1, r6
 800905e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009062:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009066:	4620      	mov	r0, r4
 8009068:	4798      	blx	r3
 800906a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800906e:	4646      	mov	r6, r8
 8009070:	3301      	adds	r3, #1
 8009072:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009076:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800907a:	f7fe bce0 	b.w	8007a3e <d_print_comp_inner+0x76a>
 800907e:	4660      	mov	r0, ip
 8009080:	4688      	mov	r8, r1
 8009082:	f7ff b8c4 	b.w	800820e <d_print_comp_inner+0xf3a>
 8009086:	686a      	ldr	r2, [r5, #4]
 8009088:	4639      	mov	r1, r7
 800908a:	4620      	mov	r0, r4
 800908c:	f000 fd3a 	bl	8009b04 <d_print_comp>
 8009090:	f7fe b9e2 	b.w	8007458 <d_print_comp_inner+0x184>
 8009094:	4632      	mov	r2, r6
 8009096:	f001 fba9 	bl	800a7ec <d_print_expr_op>
 800909a:	f7fe bc1e 	b.w	80078da <d_print_comp_inner+0x606>
 800909e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80090a2:	e008      	b.n	80090b6 <d_print_comp_inner+0x1de2>
 80090a4:	6880      	ldr	r0, [r0, #8]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f43e a9dd 	beq.w	8007468 <d_print_comp_inner+0x194>
 80090ae:	7802      	ldrb	r2, [r0, #0]
 80090b0:	2a2f      	cmp	r2, #47	; 0x2f
 80090b2:	f47e a9d9 	bne.w	8007468 <d_print_comp_inner+0x194>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	dcf4      	bgt.n	80090a4 <d_print_comp_inner+0x1dd0>
 80090ba:	f47e a9d5 	bne.w	8007468 <d_print_comp_inner+0x194>
 80090be:	6840      	ldr	r0, [r0, #4]
 80090c0:	2800      	cmp	r0, #0
 80090c2:	f47f aaf2 	bne.w	80086aa <d_print_comp_inner+0x13d6>
 80090c6:	f7fe b9cf 	b.w	8007468 <d_print_comp_inner+0x194>
 80090ca:	29ff      	cmp	r1, #255	; 0xff
 80090cc:	f000 83ae 	beq.w	800982c <d_print_comp_inner+0x2558>
 80090d0:	232d      	movs	r3, #45	; 0x2d
 80090d2:	1c4a      	adds	r2, r1, #1
 80090d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80090d8:	5463      	strb	r3, [r4, r1]
 80090da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80090de:	f7fe bd76 	b.w	8007bce <d_print_comp_inner+0x8fa>
 80090e2:	2500      	movs	r5, #0
 80090e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80090e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80090ec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80090f0:	4620      	mov	r0, r4
 80090f2:	4798      	blx	r3
 80090f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80090f8:	2201      	movs	r2, #1
 80090fa:	4413      	add	r3, r2
 80090fc:	4629      	mov	r1, r5
 80090fe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009102:	f7fe bc88 	b.w	8007a16 <d_print_comp_inner+0x742>
 8009106:	2500      	movs	r5, #0
 8009108:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800910c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009110:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009114:	4620      	mov	r0, r4
 8009116:	4798      	blx	r3
 8009118:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800911c:	2201      	movs	r2, #1
 800911e:	4413      	add	r3, r2
 8009120:	4629      	mov	r1, r5
 8009122:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009126:	f7ff bb20 	b.w	800876a <d_print_comp_inner+0x1496>
 800912a:	bf00      	nop
 800912c:	080160bc 	.word	0x080160bc
 8009130:	080160f0 	.word	0x080160f0
 8009134:	080160f4 	.word	0x080160f4
 8009138:	0801640c 	.word	0x0801640c
 800913c:	08015f4c 	.word	0x08015f4c
 8009140:	08016128 	.word	0x08016128
 8009144:	2600      	movs	r6, #0
 8009146:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800914a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800914e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009152:	4798      	blx	r3
 8009154:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009158:	2301      	movs	r3, #1
 800915a:	441a      	add	r2, r3
 800915c:	4631      	mov	r1, r6
 800915e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009162:	f7fe bb83 	b.w	800786c <d_print_comp_inner+0x598>
 8009166:	2600      	movs	r6, #0
 8009168:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800916c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009170:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009174:	4798      	blx	r3
 8009176:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800917a:	2201      	movs	r2, #1
 800917c:	4413      	add	r3, r2
 800917e:	4631      	mov	r1, r6
 8009180:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009184:	f7ff b887 	b.w	8008296 <d_print_comp_inner+0xfc2>
 8009188:	2500      	movs	r5, #0
 800918a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800918e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009192:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009196:	4620      	mov	r0, r4
 8009198:	4798      	blx	r3
 800919a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800919e:	2201      	movs	r2, #1
 80091a0:	4413      	add	r3, r2
 80091a2:	4629      	mov	r1, r5
 80091a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80091a8:	f7ff bb22 	b.w	80087f0 <d_print_comp_inner+0x151c>
 80091ac:	2500      	movs	r5, #0
 80091ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091b6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80091ba:	4620      	mov	r0, r4
 80091bc:	4798      	blx	r3
 80091be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80091c2:	2201      	movs	r2, #1
 80091c4:	4413      	add	r3, r2
 80091c6:	4629      	mov	r1, r5
 80091c8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80091cc:	e40c      	b.n	80089e8 <d_print_comp_inner+0x1714>
 80091ce:	2500      	movs	r5, #0
 80091d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091d8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80091dc:	4620      	mov	r0, r4
 80091de:	4798      	blx	r3
 80091e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80091e4:	2201      	movs	r2, #1
 80091e6:	4413      	add	r3, r2
 80091e8:	4629      	mov	r1, r5
 80091ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80091ee:	f7ff bbd4 	b.w	800899a <d_print_comp_inner+0x16c6>
 80091f2:	2500      	movs	r5, #0
 80091f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091f8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091fc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009200:	4620      	mov	r0, r4
 8009202:	4798      	blx	r3
 8009204:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009208:	2201      	movs	r2, #1
 800920a:	4413      	add	r3, r2
 800920c:	4629      	mov	r1, r5
 800920e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009212:	f7ff bba8 	b.w	8008966 <d_print_comp_inner+0x1692>
 8009216:	2301      	movs	r3, #1
 8009218:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800921c:	f7fe b91c 	b.w	8007458 <d_print_comp_inner+0x184>
 8009220:	220d      	movs	r2, #13
 8009222:	49d5      	ldr	r1, [pc, #852]	; (8009578 <d_print_comp_inner+0x22a4>)
 8009224:	4620      	mov	r0, r4
 8009226:	f7fd fd95 	bl	8006d54 <d_append_buffer>
 800922a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800922e:	a804      	add	r0, sp, #16
 8009230:	3201      	adds	r2, #1
 8009232:	49d2      	ldr	r1, [pc, #840]	; (800957c <d_print_comp_inner+0x22a8>)
 8009234:	f00a faa8 	bl	8013788 <siprintf>
 8009238:	a804      	add	r0, sp, #16
 800923a:	f005 fddb 	bl	800edf4 <strlen>
 800923e:	b320      	cbz	r0, 800928a <d_print_comp_inner+0x1fb6>
 8009240:	ad04      	add	r5, sp, #16
 8009242:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009246:	eb05 0a00 	add.w	sl, r5, r0
 800924a:	f04f 0900 	mov.w	r9, #0
 800924e:	e008      	b.n	8009262 <d_print_comp_inner+0x1f8e>
 8009250:	460b      	mov	r3, r1
 8009252:	3101      	adds	r1, #1
 8009254:	45aa      	cmp	sl, r5
 8009256:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800925a:	54e6      	strb	r6, [r4, r3]
 800925c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009260:	d013      	beq.n	800928a <d_print_comp_inner+0x1fb6>
 8009262:	29ff      	cmp	r1, #255	; 0xff
 8009264:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009268:	d1f2      	bne.n	8009250 <d_print_comp_inner+0x1f7c>
 800926a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800926e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8009272:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009276:	4620      	mov	r0, r4
 8009278:	4798      	blx	r3
 800927a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800927e:	2101      	movs	r1, #1
 8009280:	440b      	add	r3, r1
 8009282:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009286:	2300      	movs	r3, #0
 8009288:	e7e4      	b.n	8009254 <d_print_comp_inner+0x1f80>
 800928a:	2203      	movs	r2, #3
 800928c:	49bc      	ldr	r1, [pc, #752]	; (8009580 <d_print_comp_inner+0x22ac>)
 800928e:	4620      	mov	r0, r4
 8009290:	f7fd fd60 	bl	8006d54 <d_append_buffer>
 8009294:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8009298:	f7ff b996 	b.w	80085c8 <d_print_comp_inner+0x12f4>
 800929c:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 80092a0:	aa14      	add	r2, sp, #80	; 0x50
 80092a2:	f842 1d40 	str.w	r1, [r2, #-64]!
 80092a6:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 80092aa:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80092ae:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 80092b2:	686a      	ldr	r2, [r5, #4]
 80092b4:	4639      	mov	r1, r7
 80092b6:	4620      	mov	r0, r4
 80092b8:	9306      	str	r3, [sp, #24]
 80092ba:	9607      	str	r6, [sp, #28]
 80092bc:	9505      	str	r5, [sp, #20]
 80092be:	f000 fc21 	bl	8009b04 <d_print_comp>
 80092c2:	9b04      	ldr	r3, [sp, #16]
 80092c4:	9e06      	ldr	r6, [sp, #24]
 80092c6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80092ca:	2e00      	cmp	r6, #0
 80092cc:	f47e a8c4 	bne.w	8007458 <d_print_comp_inner+0x184>
 80092d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80092d4:	29ff      	cmp	r1, #255	; 0xff
 80092d6:	f000 8349 	beq.w	800996c <d_print_comp_inner+0x2698>
 80092da:	2320      	movs	r3, #32
 80092dc:	1c4a      	adds	r2, r1, #1
 80092de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80092e2:	5463      	strb	r3, [r4, r1]
 80092e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80092e8:	f7fe bd10 	b.w	8007d0c <d_print_comp_inner+0xa38>
 80092ec:	462a      	mov	r2, r5
 80092ee:	4639      	mov	r1, r7
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fc07 	bl	8009b04 <d_print_comp>
 80092f6:	f7fe b8af 	b.w	8007458 <d_print_comp_inner+0x184>
 80092fa:	2500      	movs	r5, #0
 80092fc:	4619      	mov	r1, r3
 80092fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009302:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009306:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800930a:	4620      	mov	r0, r4
 800930c:	4798      	blx	r3
 800930e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8009312:	2201      	movs	r2, #1
 8009314:	4411      	add	r1, r2
 8009316:	462b      	mov	r3, r5
 8009318:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 800931c:	f7fe bb6a 	b.w	80079f4 <d_print_comp_inner+0x720>
 8009320:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8009324:	6842      	ldr	r2, [r0, #4]
 8009326:	ab14      	add	r3, sp, #80	; 0x50
 8009328:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 800932c:	f843 1d40 	str.w	r1, [r3, #-64]!
 8009330:	2100      	movs	r1, #0
 8009332:	9505      	str	r5, [sp, #20]
 8009334:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8009338:	9007      	str	r0, [sp, #28]
 800933a:	9106      	str	r1, [sp, #24]
 800933c:	2a00      	cmp	r2, #0
 800933e:	f47e af72 	bne.w	8008226 <d_print_comp_inner+0xf52>
 8009342:	f7fe bf6f 	b.w	8008224 <d_print_comp_inner+0xf50>
 8009346:	2500      	movs	r5, #0
 8009348:	4619      	mov	r1, r3
 800934a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800934e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009352:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009356:	4620      	mov	r0, r4
 8009358:	4798      	blx	r3
 800935a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800935e:	2101      	movs	r1, #1
 8009360:	440a      	add	r2, r1
 8009362:	462b      	mov	r3, r5
 8009364:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009368:	f7ff b87b 	b.w	8008462 <d_print_comp_inner+0x118e>
 800936c:	2600      	movs	r6, #0
 800936e:	4619      	mov	r1, r3
 8009370:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009374:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009378:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800937c:	4620      	mov	r0, r4
 800937e:	4798      	blx	r3
 8009380:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009384:	2101      	movs	r1, #1
 8009386:	440a      	add	r2, r1
 8009388:	4633      	mov	r3, r6
 800938a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800938e:	f7ff b852 	b.w	8008436 <d_print_comp_inner+0x1162>
 8009392:	2200      	movs	r2, #0
 8009394:	4619      	mov	r1, r3
 8009396:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800939a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800939e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80093a2:	4620      	mov	r0, r4
 80093a4:	4798      	blx	r3
 80093a6:	2329      	movs	r3, #41	; 0x29
 80093a8:	7023      	strb	r3, [r4, #0]
 80093aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80093ae:	782a      	ldrb	r2, [r5, #0]
 80093b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80093b4:	2101      	movs	r1, #1
 80093b6:	3301      	adds	r3, #1
 80093b8:	2a3c      	cmp	r2, #60	; 0x3c
 80093ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80093be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80093c2:	f47e ac04 	bne.w	8007bce <d_print_comp_inner+0x8fa>
 80093c6:	e683      	b.n	80090d0 <d_print_comp_inner+0x1dfc>
 80093c8:	4648      	mov	r0, r9
 80093ca:	496e      	ldr	r1, [pc, #440]	; (8009584 <d_print_comp_inner+0x22b0>)
 80093cc:	f005 fd08 	bl	800ede0 <strcmp>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f040 8214 	bne.w	80097fe <d_print_comp_inner+0x252a>
 80093d6:	68ab      	ldr	r3, [r5, #8]
 80093d8:	4639      	mov	r1, r7
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	4620      	mov	r0, r4
 80093de:	f001 fa43 	bl	800a868 <d_print_subexpr>
 80093e2:	f7fe b821 	b.w	8007428 <d_print_comp_inner+0x154>
 80093e6:	f04f 0800 	mov.w	r8, #0
 80093ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80093ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80093f2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80093f6:	4620      	mov	r0, r4
 80093f8:	4798      	blx	r3
 80093fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80093fe:	2201      	movs	r2, #1
 8009400:	4413      	add	r3, r2
 8009402:	4641      	mov	r1, r8
 8009404:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009408:	f7fe bbc6 	b.w	8007b98 <d_print_comp_inner+0x8c4>
 800940c:	2500      	movs	r5, #0
 800940e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009412:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009416:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800941a:	4620      	mov	r0, r4
 800941c:	4798      	blx	r3
 800941e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009422:	2201      	movs	r2, #1
 8009424:	4413      	add	r3, r2
 8009426:	4629      	mov	r1, r5
 8009428:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800942c:	f7ff bbd2 	b.w	8008bd4 <d_print_comp_inner+0x1900>
 8009430:	4674      	mov	r4, lr
 8009432:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8009436:	b389      	cbz	r1, 800949c <d_print_comp_inner+0x21c8>
 8009438:	680a      	ldr	r2, [r1, #0]
 800943a:	4290      	cmp	r0, r2
 800943c:	d00a      	beq.n	8009454 <d_print_comp_inner+0x2180>
 800943e:	460b      	mov	r3, r1
 8009440:	e004      	b.n	800944c <d_print_comp_inner+0x2178>
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	b353      	cbz	r3, 800949c <d_print_comp_inner+0x21c8>
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	4290      	cmp	r0, r2
 800944a:	d003      	beq.n	8009454 <d_print_comp_inner+0x2180>
 800944c:	4295      	cmp	r5, r2
 800944e:	d1f8      	bne.n	8009442 <d_print_comp_inner+0x216e>
 8009450:	4299      	cmp	r1, r3
 8009452:	d0f6      	beq.n	8009442 <d_print_comp_inner+0x216e>
 8009454:	1d01      	adds	r1, r0, #4
 8009456:	4620      	mov	r0, r4
 8009458:	f7fd fe96 	bl	8007188 <d_lookup_template_argument.isra.6>
 800945c:	f04f 0800 	mov.w	r8, #0
 8009460:	2800      	cmp	r0, #0
 8009462:	f43e a801 	beq.w	8007468 <d_print_comp_inner+0x194>
 8009466:	7803      	ldrb	r3, [r0, #0]
 8009468:	2b2f      	cmp	r3, #47	; 0x2f
 800946a:	f47e aec4 	bne.w	80081f6 <d_print_comp_inner+0xf22>
 800946e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8009472:	e008      	b.n	8009486 <d_print_comp_inner+0x21b2>
 8009474:	6880      	ldr	r0, [r0, #8]
 8009476:	3b01      	subs	r3, #1
 8009478:	2800      	cmp	r0, #0
 800947a:	f43d aff0 	beq.w	800745e <d_print_comp_inner+0x18a>
 800947e:	7802      	ldrb	r2, [r0, #0]
 8009480:	2a2f      	cmp	r2, #47	; 0x2f
 8009482:	f47d afec 	bne.w	800745e <d_print_comp_inner+0x18a>
 8009486:	2b00      	cmp	r3, #0
 8009488:	dcf4      	bgt.n	8009474 <d_print_comp_inner+0x21a0>
 800948a:	f47d afe8 	bne.w	800745e <d_print_comp_inner+0x18a>
 800948e:	6840      	ldr	r0, [r0, #4]
 8009490:	2800      	cmp	r0, #0
 8009492:	f43d afe4 	beq.w	800745e <d_print_comp_inner+0x18a>
 8009496:	7803      	ldrb	r3, [r0, #0]
 8009498:	f7fe bead 	b.w	80081f6 <d_print_comp_inner+0xf22>
 800949c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094a0:	1d01      	adds	r1, r0, #4
 80094a2:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 80094a6:	4620      	mov	r0, r4
 80094a8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80094ac:	f7fd fe6c 	bl	8007188 <d_lookup_template_argument.isra.6>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	f43d afd7 	beq.w	8007464 <d_print_comp_inner+0x190>
 80094b6:	f04f 0801 	mov.w	r8, #1
 80094ba:	e7d4      	b.n	8009466 <d_print_comp_inner+0x2192>
 80094bc:	7809      	ldrb	r1, [r1, #0]
 80094be:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
 80094c2:	2801      	cmp	r0, #1
 80094c4:	d903      	bls.n	80094ce <d_print_comp_inner+0x21fa>
 80094c6:	3972      	subs	r1, #114	; 0x72
 80094c8:	2901      	cmp	r1, #1
 80094ca:	f63d af6e 	bhi.w	80073aa <d_print_comp_inner+0xd6>
 80094ce:	4639      	mov	r1, r7
 80094d0:	4620      	mov	r0, r4
 80094d2:	f001 f98b 	bl	800a7ec <d_print_expr_op>
 80094d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80094da:	29ff      	cmp	r1, #255	; 0xff
 80094dc:	f000 8263 	beq.w	80099a6 <d_print_comp_inner+0x26d2>
 80094e0:	1c4a      	adds	r2, r1, #1
 80094e2:	233c      	movs	r3, #60	; 0x3c
 80094e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80094e8:	5463      	strb	r3, [r4, r1]
 80094ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80094ee:	68ab      	ldr	r3, [r5, #8]
 80094f0:	4639      	mov	r1, r7
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	4620      	mov	r0, r4
 80094f6:	f000 fb05 	bl	8009b04 <d_print_comp>
 80094fa:	2202      	movs	r2, #2
 80094fc:	4922      	ldr	r1, [pc, #136]	; (8009588 <d_print_comp_inner+0x22b4>)
 80094fe:	4620      	mov	r0, r4
 8009500:	f7fd fc28 	bl	8006d54 <d_append_buffer>
 8009504:	68ab      	ldr	r3, [r5, #8]
 8009506:	4639      	mov	r1, r7
 8009508:	689a      	ldr	r2, [r3, #8]
 800950a:	4620      	mov	r0, r4
 800950c:	f000 fafa 	bl	8009b04 <d_print_comp>
 8009510:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009514:	29ff      	cmp	r1, #255	; 0xff
 8009516:	f000 81d8 	beq.w	80098ca <d_print_comp_inner+0x25f6>
 800951a:	2329      	movs	r3, #41	; 0x29
 800951c:	1c4a      	adds	r2, r1, #1
 800951e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009522:	5463      	strb	r3, [r4, r1]
 8009524:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009528:	f7fd bf96 	b.w	8007458 <d_print_comp_inner+0x184>
 800952c:	4917      	ldr	r1, [pc, #92]	; (800958c <d_print_comp_inner+0x22b8>)
 800952e:	6870      	ldr	r0, [r6, #4]
 8009530:	f00a f94e 	bl	80137d0 <strncmp>
 8009534:	2800      	cmp	r0, #0
 8009536:	f47e af6e 	bne.w	8008416 <d_print_comp_inner+0x1142>
 800953a:	68aa      	ldr	r2, [r5, #8]
 800953c:	4639      	mov	r1, r7
 800953e:	4620      	mov	r0, r4
 8009540:	f000 fae0 	bl	8009b04 <d_print_comp>
 8009544:	2202      	movs	r2, #2
 8009546:	4912      	ldr	r1, [pc, #72]	; (8009590 <d_print_comp_inner+0x22bc>)
 8009548:	4620      	mov	r0, r4
 800954a:	f7fd fc03 	bl	8006d54 <d_append_buffer>
 800954e:	f7fe bf8e 	b.w	800846e <d_print_comp_inner+0x119a>
 8009552:	2600      	movs	r6, #0
 8009554:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009558:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800955c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009560:	4620      	mov	r0, r4
 8009562:	4798      	blx	r3
 8009564:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009568:	2201      	movs	r2, #1
 800956a:	4413      	add	r3, r2
 800956c:	4631      	mov	r1, r6
 800956e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009572:	f7ff b81c 	b.w	80085ae <d_print_comp_inner+0x12da>
 8009576:	bf00      	nop
 8009578:	08015f50 	.word	0x08015f50
 800957c:	08015f60 	.word	0x08015f60
 8009580:	08015f64 	.word	0x08015f64
 8009584:	080160fc 	.word	0x080160fc
 8009588:	080160f8 	.word	0x080160f8
 800958c:	08015f68 	.word	0x08015f68
 8009590:	08015f70 	.word	0x08015f70
 8009594:	68aa      	ldr	r2, [r5, #8]
 8009596:	f892 8000 	ldrb.w	r8, [r2]
 800959a:	f1b8 0f00 	cmp.w	r8, #0
 800959e:	f47e aaf5 	bne.w	8007b8c <d_print_comp_inner+0x8b8>
 80095a2:	2b3c      	cmp	r3, #60	; 0x3c
 80095a4:	f000 81f3 	beq.w	800998e <d_print_comp_inner+0x26ba>
 80095a8:	68aa      	ldr	r2, [r5, #8]
 80095aa:	4639      	mov	r1, r7
 80095ac:	4620      	mov	r0, r4
 80095ae:	3e02      	subs	r6, #2
 80095b0:	f000 faa8 	bl	8009b04 <d_print_comp>
 80095b4:	2e04      	cmp	r6, #4
 80095b6:	f63d af4f 	bhi.w	8007458 <d_print_comp_inner+0x184>
 80095ba:	e8df f006 	tbb	[pc, r6]
 80095be:	1826      	.short	0x1826
 80095c0:	0a11      	.short	0x0a11
 80095c2:	03          	.byte	0x03
 80095c3:	00          	.byte	0x00
 80095c4:	4620      	mov	r0, r4
 80095c6:	2203      	movs	r2, #3
 80095c8:	49e3      	ldr	r1, [pc, #908]	; (8009958 <d_print_comp_inner+0x2684>)
 80095ca:	f7fd fbc3 	bl	8006d54 <d_append_buffer>
 80095ce:	f7fd bf43 	b.w	8007458 <d_print_comp_inner+0x184>
 80095d2:	4620      	mov	r0, r4
 80095d4:	2202      	movs	r2, #2
 80095d6:	49e1      	ldr	r1, [pc, #900]	; (800995c <d_print_comp_inner+0x2688>)
 80095d8:	f7fd fbbc 	bl	8006d54 <d_append_buffer>
 80095dc:	f7fd bf3c 	b.w	8007458 <d_print_comp_inner+0x184>
 80095e0:	4620      	mov	r0, r4
 80095e2:	2202      	movs	r2, #2
 80095e4:	49de      	ldr	r1, [pc, #888]	; (8009960 <d_print_comp_inner+0x268c>)
 80095e6:	f7fd fbb5 	bl	8006d54 <d_append_buffer>
 80095ea:	f7fd bf35 	b.w	8007458 <d_print_comp_inner+0x184>
 80095ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80095f2:	29ff      	cmp	r1, #255	; 0xff
 80095f4:	f000 825f 	beq.w	8009ab6 <d_print_comp_inner+0x27e2>
 80095f8:	236c      	movs	r3, #108	; 0x6c
 80095fa:	1c4a      	adds	r2, r1, #1
 80095fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009600:	5463      	strb	r3, [r4, r1]
 8009602:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009606:	f7fd bf27 	b.w	8007458 <d_print_comp_inner+0x184>
 800960a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800960e:	29ff      	cmp	r1, #255	; 0xff
 8009610:	f000 8263 	beq.w	8009ada <d_print_comp_inner+0x2806>
 8009614:	2375      	movs	r3, #117	; 0x75
 8009616:	1c4a      	adds	r2, r1, #1
 8009618:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800961c:	5463      	strb	r3, [r4, r1]
 800961e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009622:	f7fd bf19 	b.w	8007458 <d_print_comp_inner+0x184>
 8009626:	2500      	movs	r5, #0
 8009628:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800962c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009630:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009634:	4620      	mov	r0, r4
 8009636:	4798      	blx	r3
 8009638:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800963c:	2201      	movs	r2, #1
 800963e:	4413      	add	r3, r2
 8009640:	4629      	mov	r1, r5
 8009642:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009646:	e419      	b.n	8008e7c <d_print_comp_inner+0x1ba8>
 8009648:	2600      	movs	r6, #0
 800964a:	4619      	mov	r1, r3
 800964c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009650:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009654:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009658:	4620      	mov	r0, r4
 800965a:	4798      	blx	r3
 800965c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009660:	2101      	movs	r1, #1
 8009662:	440a      	add	r2, r1
 8009664:	4633      	mov	r3, r6
 8009666:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800966a:	f7fe ba30 	b.w	8007ace <d_print_comp_inner+0x7fa>
 800966e:	6899      	ldr	r1, [r3, #8]
 8009670:	2901      	cmp	r1, #1
 8009672:	f47d ae9e 	bne.w	80073b2 <d_print_comp_inner+0xde>
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b3e      	cmp	r3, #62	; 0x3e
 800967c:	f47d ae99 	bne.w	80073b2 <d_print_comp_inner+0xde>
 8009680:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009684:	29ff      	cmp	r1, #255	; 0xff
 8009686:	f000 81eb 	beq.w	8009a60 <d_print_comp_inner+0x278c>
 800968a:	1c4a      	adds	r2, r1, #1
 800968c:	2328      	movs	r3, #40	; 0x28
 800968e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009692:	5463      	strb	r3, [r4, r1]
 8009694:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009698:	686a      	ldr	r2, [r5, #4]
 800969a:	68ae      	ldr	r6, [r5, #8]
 800969c:	f7fd be89 	b.w	80073b2 <d_print_comp_inner+0xde>
 80096a0:	2500      	movs	r5, #0
 80096a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80096a6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80096aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80096ae:	4620      	mov	r0, r4
 80096b0:	4798      	blx	r3
 80096b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80096b6:	4629      	mov	r1, r5
 80096b8:	3301      	adds	r3, #1
 80096ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80096be:	e4c0      	b.n	8009042 <d_print_comp_inner+0x1d6e>
 80096c0:	2500      	movs	r5, #0
 80096c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80096c6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80096ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80096ce:	4620      	mov	r0, r4
 80096d0:	4798      	blx	r3
 80096d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80096d6:	4629      	mov	r1, r5
 80096d8:	3301      	adds	r3, #1
 80096da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80096de:	f7ff b8c9 	b.w	8008874 <d_print_comp_inner+0x15a0>
 80096e2:	2600      	movs	r6, #0
 80096e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80096e8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80096ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80096f0:	4620      	mov	r0, r4
 80096f2:	4798      	blx	r3
 80096f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80096f8:	4631      	mov	r1, r6
 80096fa:	3301      	adds	r3, #1
 80096fc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009700:	f7fe b8e4 	b.w	80078cc <d_print_comp_inner+0x5f8>
 8009704:	f04f 0800 	mov.w	r8, #0
 8009708:	4619      	mov	r1, r3
 800970a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800970e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009712:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8009716:	4798      	blx	r3
 8009718:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800971c:	4643      	mov	r3, r8
 800971e:	3201      	adds	r2, #1
 8009720:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009724:	f7fe b8bf 	b.w	80078a6 <d_print_comp_inner+0x5d2>
 8009728:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800972c:	4619      	mov	r1, r3
 800972e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009732:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009736:	4620      	mov	r0, r4
 8009738:	4798      	blx	r3
 800973a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800973e:	4633      	mov	r3, r6
 8009740:	3201      	adds	r2, #1
 8009742:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009746:	f7ff bb87 	b.w	8008e58 <d_print_comp_inner+0x1b84>
 800974a:	255f      	movs	r5, #95	; 0x5f
 800974c:	f7ff ba7d 	b.w	8008c4a <d_print_comp_inner+0x1976>
 8009750:	68aa      	ldr	r2, [r5, #8]
 8009752:	4639      	mov	r1, r7
 8009754:	4620      	mov	r0, r4
 8009756:	f000 f9d5 	bl	8009b04 <d_print_comp>
 800975a:	9a00      	ldr	r2, [sp, #0]
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8009762:	2b00      	cmp	r3, #0
 8009764:	f43e aabe 	beq.w	8007ce4 <d_print_comp_inner+0xa10>
 8009768:	f7fd be76 	b.w	8007458 <d_print_comp_inner+0x184>
 800976c:	4642      	mov	r2, r8
 800976e:	4639      	mov	r1, r7
 8009770:	4620      	mov	r0, r4
 8009772:	f001 f879 	bl	800a868 <d_print_subexpr>
 8009776:	464a      	mov	r2, r9
 8009778:	4639      	mov	r1, r7
 800977a:	4620      	mov	r0, r4
 800977c:	f001 f836 	bl	800a7ec <d_print_expr_op>
 8009780:	4632      	mov	r2, r6
 8009782:	4639      	mov	r1, r7
 8009784:	4620      	mov	r0, r4
 8009786:	f001 f86f 	bl	800a868 <d_print_subexpr>
 800978a:	4620      	mov	r0, r4
 800978c:	2203      	movs	r2, #3
 800978e:	4975      	ldr	r1, [pc, #468]	; (8009964 <d_print_comp_inner+0x2690>)
 8009790:	f7fd fae0 	bl	8006d54 <d_append_buffer>
 8009794:	462a      	mov	r2, r5
 8009796:	4639      	mov	r1, r7
 8009798:	4620      	mov	r0, r4
 800979a:	f001 f865 	bl	800a868 <d_print_subexpr>
 800979e:	f7fd be5b 	b.w	8007458 <d_print_comp_inner+0x184>
 80097a2:	6893      	ldr	r3, [r2, #8]
 80097a4:	4639      	mov	r1, r7
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	4620      	mov	r0, r4
 80097aa:	2b29      	cmp	r3, #41	; 0x29
 80097ac:	bf1c      	itt	ne
 80097ae:	2301      	movne	r3, #1
 80097b0:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 80097b4:	6852      	ldr	r2, [r2, #4]
 80097b6:	f001 f857 	bl	800a868 <d_print_subexpr>
 80097ba:	f7fd be09 	b.w	80073d0 <d_print_comp_inner+0xfc>
 80097be:	686a      	ldr	r2, [r5, #4]
 80097c0:	4639      	mov	r1, r7
 80097c2:	4620      	mov	r0, r4
 80097c4:	f001 f850 	bl	800a868 <d_print_subexpr>
 80097c8:	4620      	mov	r0, r4
 80097ca:	2203      	movs	r2, #3
 80097cc:	4966      	ldr	r1, [pc, #408]	; (8009968 <d_print_comp_inner+0x2694>)
 80097ce:	f7fd fac1 	bl	8006d54 <d_append_buffer>
 80097d2:	f7fd be41 	b.w	8007458 <d_print_comp_inner+0x184>
 80097d6:	686b      	ldr	r3, [r5, #4]
 80097d8:	781a      	ldrb	r2, [r3, #0]
 80097da:	2a01      	cmp	r2, #1
 80097dc:	f47f ab23 	bne.w	8008e26 <d_print_comp_inner+0x1b52>
 80097e0:	68aa      	ldr	r2, [r5, #8]
 80097e2:	7812      	ldrb	r2, [r2, #0]
 80097e4:	2a29      	cmp	r2, #41	; 0x29
 80097e6:	bf08      	it	eq
 80097e8:	461d      	moveq	r5, r3
 80097ea:	f7ff bb1c 	b.w	8008e26 <d_print_comp_inner+0x1b52>
 80097ee:	ab14      	add	r3, sp, #80	; 0x50
 80097f0:	f843 cd48 	str.w	ip, [r3, #-72]!
 80097f4:	9603      	str	r6, [sp, #12]
 80097f6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80097fa:	f7fe be9f 	b.w	800853c <d_print_comp_inner+0x1268>
 80097fe:	4642      	mov	r2, r8
 8009800:	4639      	mov	r1, r7
 8009802:	4620      	mov	r0, r4
 8009804:	f000 fff2 	bl	800a7ec <d_print_expr_op>
 8009808:	e5e5      	b.n	80093d6 <d_print_comp_inner+0x2102>
 800980a:	2500      	movs	r5, #0
 800980c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009810:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009814:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009818:	4620      	mov	r0, r4
 800981a:	4798      	blx	r3
 800981c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009820:	4629      	mov	r1, r5
 8009822:	3301      	adds	r3, #1
 8009824:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009828:	f7ff bbde 	b.w	8008fe8 <d_print_comp_inner+0x1d14>
 800982c:	f04f 0800 	mov.w	r8, #0
 8009830:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009834:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009838:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800983c:	4620      	mov	r0, r4
 800983e:	4798      	blx	r3
 8009840:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009844:	4641      	mov	r1, r8
 8009846:	3301      	adds	r3, #1
 8009848:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800984c:	e440      	b.n	80090d0 <d_print_comp_inner+0x1dfc>
 800984e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009852:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8009856:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800985a:	4620      	mov	r0, r4
 800985c:	4798      	blx	r3
 800985e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009862:	4639      	mov	r1, r7
 8009864:	3301      	adds	r3, #1
 8009866:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800986a:	f7fe be7e 	b.w	800856a <d_print_comp_inner+0x1296>
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8009874:	f7fe be6b 	b.w	800854e <d_print_comp_inner+0x127a>
 8009878:	4664      	mov	r4, ip
 800987a:	f7fe bf3c 	b.w	80086f6 <d_print_comp_inner+0x1422>
 800987e:	2600      	movs	r6, #0
 8009880:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009884:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009888:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800988c:	4620      	mov	r0, r4
 800988e:	4798      	blx	r3
 8009890:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009894:	4631      	mov	r1, r6
 8009896:	3301      	adds	r3, #1
 8009898:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800989c:	f7ff bbb2 	b.w	8009004 <d_print_comp_inner+0x1d30>
 80098a0:	4660      	mov	r0, ip
 80098a2:	46e0      	mov	r8, ip
 80098a4:	f7fe bcb3 	b.w	800820e <d_print_comp_inner+0xf3a>
 80098a8:	2600      	movs	r6, #0
 80098aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098ae:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80098b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098b6:	4620      	mov	r0, r4
 80098b8:	4798      	blx	r3
 80098ba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098be:	4631      	mov	r1, r6
 80098c0:	3301      	adds	r3, #1
 80098c2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098c6:	f7ff bbab 	b.w	8009020 <d_print_comp_inner+0x1d4c>
 80098ca:	2500      	movs	r5, #0
 80098cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098d0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80098d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098d8:	4620      	mov	r0, r4
 80098da:	4798      	blx	r3
 80098dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098e0:	4629      	mov	r1, r5
 80098e2:	3301      	adds	r3, #1
 80098e4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80098e8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098ec:	e615      	b.n	800951a <d_print_comp_inner+0x2246>
 80098ee:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80098f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098fa:	4620      	mov	r0, r4
 80098fc:	4798      	blx	r3
 80098fe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009902:	4631      	mov	r1, r6
 8009904:	3301      	adds	r3, #1
 8009906:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800990a:	f7fd bd74 	b.w	80073f6 <d_print_comp_inner+0x122>
 800990e:	2600      	movs	r6, #0
 8009910:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009914:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009918:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800991c:	4620      	mov	r0, r4
 800991e:	4798      	blx	r3
 8009920:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009924:	4631      	mov	r1, r6
 8009926:	3301      	adds	r3, #1
 8009928:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800992c:	f7fd bd75 	b.w	800741a <d_print_comp_inner+0x146>
 8009930:	686a      	ldr	r2, [r5, #4]
 8009932:	4639      	mov	r1, r7
 8009934:	4620      	mov	r0, r4
 8009936:	f000 ff97 	bl	800a868 <d_print_subexpr>
 800993a:	4632      	mov	r2, r6
 800993c:	4639      	mov	r1, r7
 800993e:	4620      	mov	r0, r4
 8009940:	f000 ff54 	bl	800a7ec <d_print_expr_op>
 8009944:	f7fd bd88 	b.w	8007458 <d_print_comp_inner+0x184>
 8009948:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 800994c:	2301      	movs	r3, #1
 800994e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8009952:	f7fd bd81 	b.w	8007458 <d_print_comp_inner+0x184>
 8009956:	bf00      	nop
 8009958:	0801611c 	.word	0x0801611c
 800995c:	08016118 	.word	0x08016118
 8009960:	08016114 	.word	0x08016114
 8009964:	08016108 	.word	0x08016108
 8009968:	0801614c 	.word	0x0801614c
 800996c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009970:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009974:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009978:	4620      	mov	r0, r4
 800997a:	4798      	blx	r3
 800997c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009980:	4631      	mov	r1, r6
 8009982:	3301      	adds	r3, #1
 8009984:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8009988:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800998c:	e4a5      	b.n	80092da <d_print_comp_inner+0x2006>
 800998e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009992:	29ff      	cmp	r1, #255	; 0xff
 8009994:	d054      	beq.n	8009a40 <d_print_comp_inner+0x276c>
 8009996:	232d      	movs	r3, #45	; 0x2d
 8009998:	1c4a      	adds	r2, r1, #1
 800999a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800999e:	5463      	strb	r3, [r4, r1]
 80099a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80099a4:	e600      	b.n	80095a8 <d_print_comp_inner+0x22d4>
 80099a6:	2600      	movs	r6, #0
 80099a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80099ac:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80099b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80099b4:	4620      	mov	r0, r4
 80099b6:	4798      	blx	r3
 80099b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80099bc:	4631      	mov	r1, r6
 80099be:	3301      	adds	r3, #1
 80099c0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80099c4:	e58c      	b.n	80094e0 <d_print_comp_inner+0x220c>
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80099ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80099d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80099d6:	4620      	mov	r0, r4
 80099d8:	4798      	blx	r3
 80099da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80099de:	4641      	mov	r1, r8
 80099e0:	3301      	adds	r3, #1
 80099e2:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80099e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80099ea:	f7fe b9c4 	b.w	8007d76 <d_print_comp_inner+0xaa2>
 80099ee:	4688      	mov	r8, r1
 80099f0:	e51f      	b.n	8009432 <d_print_comp_inner+0x215e>
 80099f2:	454f      	cmp	r7, r9
 80099f4:	f67f aea9 	bls.w	800974a <d_print_comp_inner+0x2476>
 80099f8:	2d5f      	cmp	r5, #95	; 0x5f
 80099fa:	f47f aea6 	bne.w	800974a <d_print_comp_inner+0x2476>
 80099fe:	28ff      	cmp	r0, #255	; 0xff
 8009a00:	f63f a923 	bhi.w	8008c4a <d_print_comp_inner+0x1976>
 8009a04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009a08:	b2c5      	uxtb	r5, r0
 8009a0a:	29ff      	cmp	r1, #255	; 0xff
 8009a0c:	d10f      	bne.n	8009a2e <d_print_comp_inner+0x275a>
 8009a0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a12:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009a16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	4798      	blx	r3
 8009a1e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a22:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009a26:	3301      	adds	r3, #1
 8009a28:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	1c4b      	adds	r3, r1, #1
 8009a30:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8009a34:	464e      	mov	r6, r9
 8009a36:	5465      	strb	r5, [r4, r1]
 8009a38:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8009a3c:	f7ff b90f 	b.w	8008c5e <d_print_comp_inner+0x198a>
 8009a40:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009a44:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8009a48:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009a4c:	4798      	blx	r3
 8009a4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a52:	4641      	mov	r1, r8
 8009a54:	3301      	adds	r3, #1
 8009a56:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009a5a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a5e:	e79a      	b.n	8009996 <d_print_comp_inner+0x26c2>
 8009a60:	2600      	movs	r6, #0
 8009a62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a66:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009a6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4798      	blx	r3
 8009a72:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a76:	4631      	mov	r1, r6
 8009a78:	3301      	adds	r3, #1
 8009a7a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8009a7e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a82:	e602      	b.n	800968a <d_print_comp_inner+0x23b6>
 8009a84:	2205      	movs	r2, #5
 8009a86:	491e      	ldr	r1, [pc, #120]	; (8009b00 <d_print_comp_inner+0x282c>)
 8009a88:	f7fd f964 	bl	8006d54 <d_append_buffer>
 8009a8c:	f7fd bce4 	b.w	8007458 <d_print_comp_inner+0x184>
 8009a90:	2500      	movs	r5, #0
 8009a92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a96:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009a9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	4798      	blx	r3
 8009aa2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009aae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009ab2:	f7fd bcca 	b.w	800744a <d_print_comp_inner+0x176>
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009abc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009ac0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	4798      	blx	r3
 8009ac8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009acc:	4629      	mov	r1, r5
 8009ace:	3301      	adds	r3, #1
 8009ad0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009ad4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009ad8:	e58e      	b.n	80095f8 <d_print_comp_inner+0x2324>
 8009ada:	2500      	movs	r5, #0
 8009adc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009ae0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009ae4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ae8:	4620      	mov	r0, r4
 8009aea:	4798      	blx	r3
 8009aec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009af0:	4629      	mov	r1, r5
 8009af2:	3301      	adds	r3, #1
 8009af4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009af8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009afc:	e58a      	b.n	8009614 <d_print_comp_inner+0x2340>
 8009afe:	bf00      	nop
 8009b00:	08016120 	.word	0x08016120

08009b04 <d_print_comp>:
 8009b04:	b510      	push	{r4, lr}
 8009b06:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8009b10:	4604      	mov	r4, r0
 8009b12:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009b16:	f7fd fbdd 	bl	80072d4 <d_print_comp_inner>
 8009b1a:	9b01      	ldr	r3, [sp, #4]
 8009b1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009b20:	b002      	add	sp, #8
 8009b22:	bd10      	pop	{r4, pc}

08009b24 <d_print_mod>:
 8009b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b28:	7813      	ldrb	r3, [r2, #0]
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	3b03      	subs	r3, #3
 8009b2e:	4615      	mov	r5, r2
 8009b30:	4604      	mov	r4, r0
 8009b32:	4688      	mov	r8, r1
 8009b34:	2b2a      	cmp	r3, #42	; 0x2a
 8009b36:	f200 81d2 	bhi.w	8009ede <d_print_mod+0x3ba>
 8009b3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b3e:	0051      	.short	0x0051
 8009b40:	01d001d0 	.word	0x01d001d0
 8009b44:	01d001d0 	.word	0x01d001d0
 8009b48:	01d001d0 	.word	0x01d001d0
 8009b4c:	01d001d0 	.word	0x01d001d0
 8009b50:	01d001d0 	.word	0x01d001d0
 8009b54:	01d001d0 	.word	0x01d001d0
 8009b58:	01d001d0 	.word	0x01d001d0
 8009b5c:	01d001d0 	.word	0x01d001d0
 8009b60:	01d001d0 	.word	0x01d001d0
 8009b64:	01d001d0 	.word	0x01d001d0
 8009b68:	006201d0 	.word	0x006201d0
 8009b6c:	00ac0087 	.word	0x00ac0087
 8009b70:	00870062 	.word	0x00870062
 8009b74:	00d000ac 	.word	0x00d000ac
 8009b78:	011800e9 	.word	0x011800e9
 8009b7c:	013b012a 	.word	0x013b012a
 8009b80:	0141013e 	.word	0x0141013e
 8009b84:	01d00167 	.word	0x01d00167
 8009b88:	01d001d0 	.word	0x01d001d0
 8009b8c:	018d01d0 	.word	0x018d01d0
 8009b90:	002b01d0 	.word	0x002b01d0
 8009b94:	4ed8      	ldr	r6, [pc, #864]	; (8009ef8 <d_print_mod+0x3d4>)
 8009b96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009b9a:	f106 0a0a 	add.w	sl, r6, #10
 8009b9e:	f04f 0900 	mov.w	r9, #0
 8009ba2:	e009      	b.n	8009bb8 <d_print_mod+0x94>
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	3101      	adds	r1, #1
 8009ba8:	45b2      	cmp	sl, r6
 8009baa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009bae:	54e7      	strb	r7, [r4, r3]
 8009bb0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8009bb4:	f000 81b0 	beq.w	8009f18 <d_print_mod+0x3f4>
 8009bb8:	29ff      	cmp	r1, #255	; 0xff
 8009bba:	f816 7b01 	ldrb.w	r7, [r6], #1
 8009bbe:	d1f1      	bne.n	8009ba4 <d_print_mod+0x80>
 8009bc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009bc4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8009bc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4798      	blx	r3
 8009bd0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	440b      	add	r3, r1
 8009bd8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e7e3      	b.n	8009ba8 <d_print_mod+0x84>
 8009be0:	686b      	ldr	r3, [r5, #4]
 8009be2:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 8009be6:	461a      	mov	r2, r3
 8009be8:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009bec:	4620      	mov	r0, r4
 8009bee:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009bf2:	f7fd fb6f 	bl	80072d4 <d_print_comp_inner>
 8009bf6:	9b01      	ldr	r3, [sp, #4]
 8009bf8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009bfc:	b002      	add	sp, #8
 8009bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c02:	4dbe      	ldr	r5, [pc, #760]	; (8009efc <d_print_mod+0x3d8>)
 8009c04:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c08:	f105 0709 	add.w	r7, r5, #9
 8009c0c:	f04f 0800 	mov.w	r8, #0
 8009c10:	e008      	b.n	8009c24 <d_print_mod+0x100>
 8009c12:	460b      	mov	r3, r1
 8009c14:	3101      	adds	r1, #1
 8009c16:	42af      	cmp	r7, r5
 8009c18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009c1c:	54e6      	strb	r6, [r4, r3]
 8009c1e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009c22:	d0eb      	beq.n	8009bfc <d_print_mod+0xd8>
 8009c24:	29ff      	cmp	r1, #255	; 0xff
 8009c26:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c2a:	d1f2      	bne.n	8009c12 <d_print_mod+0xee>
 8009c2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009c34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009c38:	4620      	mov	r0, r4
 8009c3a:	4798      	blx	r3
 8009c3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009c40:	2101      	movs	r1, #1
 8009c42:	440b      	add	r3, r1
 8009c44:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009c48:	2300      	movs	r3, #0
 8009c4a:	e7e4      	b.n	8009c16 <d_print_mod+0xf2>
 8009c4c:	4dac      	ldr	r5, [pc, #688]	; (8009f00 <d_print_mod+0x3dc>)
 8009c4e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c52:	f105 0709 	add.w	r7, r5, #9
 8009c56:	f04f 0800 	mov.w	r8, #0
 8009c5a:	e008      	b.n	8009c6e <d_print_mod+0x14a>
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	3101      	adds	r1, #1
 8009c60:	42af      	cmp	r7, r5
 8009c62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009c66:	54e6      	strb	r6, [r4, r3]
 8009c68:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009c6c:	d0c6      	beq.n	8009bfc <d_print_mod+0xd8>
 8009c6e:	29ff      	cmp	r1, #255	; 0xff
 8009c70:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c74:	d1f2      	bne.n	8009c5c <d_print_mod+0x138>
 8009c76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009c7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009c82:	4620      	mov	r0, r4
 8009c84:	4798      	blx	r3
 8009c86:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	440b      	add	r3, r1
 8009c8e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009c92:	2300      	movs	r3, #0
 8009c94:	e7e4      	b.n	8009c60 <d_print_mod+0x13c>
 8009c96:	4d9b      	ldr	r5, [pc, #620]	; (8009f04 <d_print_mod+0x3e0>)
 8009c98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c9c:	1daf      	adds	r7, r5, #6
 8009c9e:	f04f 0800 	mov.w	r8, #0
 8009ca2:	e008      	b.n	8009cb6 <d_print_mod+0x192>
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	3101      	adds	r1, #1
 8009ca8:	42af      	cmp	r7, r5
 8009caa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009cae:	54e6      	strb	r6, [r4, r3]
 8009cb0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009cb4:	d0a2      	beq.n	8009bfc <d_print_mod+0xd8>
 8009cb6:	29ff      	cmp	r1, #255	; 0xff
 8009cb8:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009cbc:	d1f2      	bne.n	8009ca4 <d_print_mod+0x180>
 8009cbe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009cc2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009cc6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009cca:	4620      	mov	r0, r4
 8009ccc:	4798      	blx	r3
 8009cce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	440b      	add	r3, r1
 8009cd6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009cda:	2300      	movs	r3, #0
 8009cdc:	e7e4      	b.n	8009ca8 <d_print_mod+0x184>
 8009cde:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009ce2:	2bff      	cmp	r3, #255	; 0xff
 8009ce4:	f000 8175 	beq.w	8009fd2 <d_print_mod+0x4ae>
 8009ce8:	1c59      	adds	r1, r3, #1
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009cf0:	54e2      	strb	r2, [r4, r3]
 8009cf2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009cf6:	29ff      	cmp	r1, #255	; 0xff
 8009cf8:	f000 8139 	beq.w	8009f6e <d_print_mod+0x44a>
 8009cfc:	1c4a      	adds	r2, r1, #1
 8009cfe:	2326      	movs	r3, #38	; 0x26
 8009d00:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009d04:	5463      	strb	r3, [r4, r1]
 8009d06:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009d0a:	b002      	add	sp, #8
 8009d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d10:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009d14:	2bff      	cmp	r3, #255	; 0xff
 8009d16:	f000 816d 	beq.w	8009ff4 <d_print_mod+0x4d0>
 8009d1a:	1c59      	adds	r1, r3, #1
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009d22:	54e2      	strb	r2, [r4, r3]
 8009d24:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009d28:	4d77      	ldr	r5, [pc, #476]	; (8009f08 <d_print_mod+0x3e4>)
 8009d2a:	f04f 0800 	mov.w	r8, #0
 8009d2e:	1caf      	adds	r7, r5, #2
 8009d30:	e009      	b.n	8009d46 <d_print_mod+0x222>
 8009d32:	460b      	mov	r3, r1
 8009d34:	3101      	adds	r1, #1
 8009d36:	42af      	cmp	r7, r5
 8009d38:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009d3c:	54e6      	strb	r6, [r4, r3]
 8009d3e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009d42:	f43f af5b 	beq.w	8009bfc <d_print_mod+0xd8>
 8009d46:	29ff      	cmp	r1, #255	; 0xff
 8009d48:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009d4c:	d1f1      	bne.n	8009d32 <d_print_mod+0x20e>
 8009d4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009d52:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009d56:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	4798      	blx	r3
 8009d5e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009d62:	2101      	movs	r1, #1
 8009d64:	440b      	add	r3, r1
 8009d66:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	e7e3      	b.n	8009d36 <d_print_mod+0x212>
 8009d6e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009d72:	29ff      	cmp	r1, #255	; 0xff
 8009d74:	f000 810c 	beq.w	8009f90 <d_print_mod+0x46c>
 8009d78:	1c4a      	adds	r2, r1, #1
 8009d7a:	2320      	movs	r3, #32
 8009d7c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009d80:	5463      	strb	r3, [r4, r1]
 8009d82:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009d86:	68ab      	ldr	r3, [r5, #8]
 8009d88:	4641      	mov	r1, r8
 8009d8a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009d8e:	461a      	mov	r2, r3
 8009d90:	e72a      	b.n	8009be8 <d_print_mod+0xc4>
 8009d92:	f011 0804 	ands.w	r8, r1, #4
 8009d96:	f47f af31 	bne.w	8009bfc <d_print_mod+0xd8>
 8009d9a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009d9e:	29ff      	cmp	r1, #255	; 0xff
 8009da0:	f000 8139 	beq.w	800a016 <d_print_mod+0x4f2>
 8009da4:	1c4a      	adds	r2, r1, #1
 8009da6:	232a      	movs	r3, #42	; 0x2a
 8009da8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009dac:	5463      	strb	r3, [r4, r1]
 8009dae:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009db2:	e723      	b.n	8009bfc <d_print_mod+0xd8>
 8009db4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009db8:	e79d      	b.n	8009cf6 <d_print_mod+0x1d2>
 8009dba:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009dbe:	e7b3      	b.n	8009d28 <d_print_mod+0x204>
 8009dc0:	4d52      	ldr	r5, [pc, #328]	; (8009f0c <d_print_mod+0x3e8>)
 8009dc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009dc6:	f105 0708 	add.w	r7, r5, #8
 8009dca:	f04f 0800 	mov.w	r8, #0
 8009dce:	e009      	b.n	8009de4 <d_print_mod+0x2c0>
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	3101      	adds	r1, #1
 8009dd4:	42af      	cmp	r7, r5
 8009dd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009dda:	54e6      	strb	r6, [r4, r3]
 8009ddc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009de0:	f43f af0c 	beq.w	8009bfc <d_print_mod+0xd8>
 8009de4:	29ff      	cmp	r1, #255	; 0xff
 8009de6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009dea:	d1f1      	bne.n	8009dd0 <d_print_mod+0x2ac>
 8009dec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009df0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009df4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4798      	blx	r3
 8009dfc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009e00:	2101      	movs	r1, #1
 8009e02:	440b      	add	r3, r1
 8009e04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e7e3      	b.n	8009dd4 <d_print_mod+0x2b0>
 8009e0c:	4d40      	ldr	r5, [pc, #256]	; (8009f10 <d_print_mod+0x3ec>)
 8009e0e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009e12:	f105 070a 	add.w	r7, r5, #10
 8009e16:	f04f 0800 	mov.w	r8, #0
 8009e1a:	e009      	b.n	8009e30 <d_print_mod+0x30c>
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	3101      	adds	r1, #1
 8009e20:	42af      	cmp	r7, r5
 8009e22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009e26:	54e6      	strb	r6, [r4, r3]
 8009e28:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009e2c:	f43f aee6 	beq.w	8009bfc <d_print_mod+0xd8>
 8009e30:	29ff      	cmp	r1, #255	; 0xff
 8009e32:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009e36:	d1f1      	bne.n	8009e1c <d_print_mod+0x2f8>
 8009e38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009e3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009e40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009e44:	4620      	mov	r0, r4
 8009e46:	4798      	blx	r3
 8009e48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	440b      	add	r3, r1
 8009e50:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009e54:	2300      	movs	r3, #0
 8009e56:	e7e3      	b.n	8009e20 <d_print_mod+0x2fc>
 8009e58:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8009e5c:	2b28      	cmp	r3, #40	; 0x28
 8009e5e:	d00a      	beq.n	8009e76 <d_print_mod+0x352>
 8009e60:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009e64:	29ff      	cmp	r1, #255	; 0xff
 8009e66:	d072      	beq.n	8009f4e <d_print_mod+0x42a>
 8009e68:	1c4a      	adds	r2, r1, #1
 8009e6a:	2320      	movs	r3, #32
 8009e6c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009e70:	5463      	strb	r3, [r4, r1]
 8009e72:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009e76:	686b      	ldr	r3, [r5, #4]
 8009e78:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009e7c:	4641      	mov	r1, r8
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009e84:	4620      	mov	r0, r4
 8009e86:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009e8a:	f7fd fa23 	bl	80072d4 <d_print_comp_inner>
 8009e8e:	4d21      	ldr	r5, [pc, #132]	; (8009f14 <d_print_mod+0x3f0>)
 8009e90:	9b01      	ldr	r3, [sp, #4]
 8009e92:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009e96:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009e9a:	1cef      	adds	r7, r5, #3
 8009e9c:	f04f 0800 	mov.w	r8, #0
 8009ea0:	e009      	b.n	8009eb6 <d_print_mod+0x392>
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	3101      	adds	r1, #1
 8009ea6:	42af      	cmp	r7, r5
 8009ea8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009eac:	54e6      	strb	r6, [r4, r3]
 8009eae:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009eb2:	f43f aea3 	beq.w	8009bfc <d_print_mod+0xd8>
 8009eb6:	29ff      	cmp	r1, #255	; 0xff
 8009eb8:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009ebc:	d1f1      	bne.n	8009ea2 <d_print_mod+0x37e>
 8009ebe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009ec2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009ec6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009eca:	4620      	mov	r0, r4
 8009ecc:	4798      	blx	r3
 8009ece:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	440b      	add	r3, r1
 8009ed6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009eda:	2300      	movs	r3, #0
 8009edc:	e7e3      	b.n	8009ea6 <d_print_mod+0x382>
 8009ede:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8009ee8:	9301      	str	r3, [sp, #4]
 8009eea:	9500      	str	r5, [sp, #0]
 8009eec:	f7fd f9f2 	bl	80072d4 <d_print_comp_inner>
 8009ef0:	9b01      	ldr	r3, [sp, #4]
 8009ef2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009ef6:	e681      	b.n	8009bfc <d_print_mod+0xd8>
 8009ef8:	0801620c 	.word	0x0801620c
 8009efc:	080161cb 	.word	0x080161cb
 8009f00:	080161d7 	.word	0x080161d7
 8009f04:	080161e4 	.word	0x080161e4
 8009f08:	080161ec 	.word	0x080161ec
 8009f0c:	080161ef 	.word	0x080161ef
 8009f10:	080161fc 	.word	0x080161fc
 8009f14:	08016208 	.word	0x08016208
 8009f18:	686b      	ldr	r3, [r5, #4]
 8009f1a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4641      	mov	r1, r8
 8009f22:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009f26:	4620      	mov	r0, r4
 8009f28:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009f2c:	f7fd f9d2 	bl	80072d4 <d_print_comp_inner>
 8009f30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009f34:	9b01      	ldr	r3, [sp, #4]
 8009f36:	29ff      	cmp	r1, #255	; 0xff
 8009f38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009f3c:	d038      	beq.n	8009fb0 <d_print_mod+0x48c>
 8009f3e:	1c4a      	adds	r2, r1, #1
 8009f40:	2329      	movs	r3, #41	; 0x29
 8009f42:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009f46:	5463      	strb	r3, [r4, r1]
 8009f48:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009f4c:	e656      	b.n	8009bfc <d_print_mod+0xd8>
 8009f4e:	2600      	movs	r6, #0
 8009f50:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009f54:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009f58:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009f5c:	4798      	blx	r3
 8009f5e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009f62:	2201      	movs	r2, #1
 8009f64:	4413      	add	r3, r2
 8009f66:	4631      	mov	r1, r6
 8009f68:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009f6c:	e77d      	b.n	8009e6a <d_print_mod+0x346>
 8009f6e:	2500      	movs	r5, #0
 8009f70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009f74:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009f78:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	4798      	blx	r3
 8009f80:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009f84:	2201      	movs	r2, #1
 8009f86:	4413      	add	r3, r2
 8009f88:	4629      	mov	r1, r5
 8009f8a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009f8e:	e6b6      	b.n	8009cfe <d_print_mod+0x1da>
 8009f90:	2600      	movs	r6, #0
 8009f92:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009f96:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009f9a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009f9e:	4798      	blx	r3
 8009fa0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	4413      	add	r3, r2
 8009fa8:	4631      	mov	r1, r6
 8009faa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009fae:	e6e4      	b.n	8009d7a <d_print_mod+0x256>
 8009fb0:	2500      	movs	r5, #0
 8009fb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009fb6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009fba:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	4798      	blx	r3
 8009fc2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	4413      	add	r3, r2
 8009fca:	4629      	mov	r1, r5
 8009fcc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009fd0:	e7b6      	b.n	8009f40 <d_print_mod+0x41c>
 8009fd2:	2500      	movs	r5, #0
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009fda:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009fde:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8009fe2:	4798      	blx	r3
 8009fe4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009fe8:	2101      	movs	r1, #1
 8009fea:	440a      	add	r2, r1
 8009fec:	462b      	mov	r3, r5
 8009fee:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009ff2:	e67a      	b.n	8009cea <d_print_mod+0x1c6>
 8009ff4:	2500      	movs	r5, #0
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009ffc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800a000:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800a004:	4798      	blx	r3
 800a006:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a00a:	2101      	movs	r1, #1
 800a00c:	440a      	add	r2, r1
 800a00e:	462b      	mov	r3, r5
 800a010:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a014:	e682      	b.n	8009d1c <d_print_mod+0x1f8>
 800a016:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800a01a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800a01e:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 800a022:	4798      	blx	r3
 800a024:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a028:	2201      	movs	r2, #1
 800a02a:	4413      	add	r3, r2
 800a02c:	4641      	mov	r1, r8
 800a02e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a032:	e6b8      	b.n	8009da6 <d_print_mod+0x282>

0800a034 <d_print_mod_list>:
 800a034:	2a00      	cmp	r2, #0
 800a036:	f000 809c 	beq.w	800a172 <d_print_mod_list+0x13e>
 800a03a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03e:	461e      	mov	r6, r3
 800a040:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800a044:	b089      	sub	sp, #36	; 0x24
 800a046:	4605      	mov	r5, r0
 800a048:	bb33      	cbnz	r3, 800a098 <d_print_mod_list+0x64>
 800a04a:	460f      	mov	r7, r1
 800a04c:	4614      	mov	r4, r2
 800a04e:	f04f 0801 	mov.w	r8, #1
 800a052:	e002      	b.n	800a05a <d_print_mod_list+0x26>
 800a054:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800a058:	b9f3      	cbnz	r3, 800a098 <d_print_mod_list+0x64>
 800a05a:	68a3      	ldr	r3, [r4, #8]
 800a05c:	b9cb      	cbnz	r3, 800a092 <d_print_mod_list+0x5e>
 800a05e:	6862      	ldr	r2, [r4, #4]
 800a060:	7813      	ldrb	r3, [r2, #0]
 800a062:	b91e      	cbnz	r6, 800a06c <d_print_mod_list+0x38>
 800a064:	f1a3 011c 	sub.w	r1, r3, #28
 800a068:	2904      	cmp	r1, #4
 800a06a:	d912      	bls.n	800a092 <d_print_mod_list+0x5e>
 800a06c:	68e1      	ldr	r1, [r4, #12]
 800a06e:	2b29      	cmp	r3, #41	; 0x29
 800a070:	f8c4 8008 	str.w	r8, [r4, #8]
 800a074:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 800a078:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 800a07c:	d00f      	beq.n	800a09e <d_print_mod_list+0x6a>
 800a07e:	2b2a      	cmp	r3, #42	; 0x2a
 800a080:	d018      	beq.n	800a0b4 <d_print_mod_list+0x80>
 800a082:	2b02      	cmp	r3, #2
 800a084:	d021      	beq.n	800a0ca <d_print_mod_list+0x96>
 800a086:	4639      	mov	r1, r7
 800a088:	4628      	mov	r0, r5
 800a08a:	f7ff fd4b 	bl	8009b24 <d_print_mod>
 800a08e:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a092:	6824      	ldr	r4, [r4, #0]
 800a094:	2c00      	cmp	r4, #0
 800a096:	d1dd      	bne.n	800a054 <d_print_mod_list+0x20>
 800a098:	b009      	add	sp, #36	; 0x24
 800a09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	3208      	adds	r2, #8
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f000 f9d7 	bl	800a458 <d_print_function_type.isra.11>
 800a0aa:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a0ae:	b009      	add	sp, #36	; 0x24
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	3204      	adds	r2, #4
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f000 f8f0 	bl	800a2a0 <d_print_array_type.isra.10>
 800a0c0:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a0c4:	b009      	add	sp, #36	; 0x24
 800a0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ca:	2600      	movs	r6, #0
 800a0cc:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 800a0d0:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 800a0d4:	6852      	ldr	r2, [r2, #4]
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f7ff fd13 	bl	8009b04 <d_print_comp>
 800a0de:	f017 0b04 	ands.w	fp, r7, #4
 800a0e2:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 800a0e6:	d020      	beq.n	800a12a <d_print_mod_list+0xf6>
 800a0e8:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a0ec:	29ff      	cmp	r1, #255	; 0xff
 800a0ee:	f000 80be 	beq.w	800a26e <d_print_mod_list+0x23a>
 800a0f2:	1c4a      	adds	r2, r1, #1
 800a0f4:	232e      	movs	r3, #46	; 0x2e
 800a0f6:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 800a0fa:	546b      	strb	r3, [r5, r1]
 800a0fc:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 800a100:	6863      	ldr	r3, [r4, #4]
 800a102:	689c      	ldr	r4, [r3, #8]
 800a104:	7823      	ldrb	r3, [r4, #0]
 800a106:	2b45      	cmp	r3, #69	; 0x45
 800a108:	d102      	bne.n	800a110 <d_print_mod_list+0xdc>
 800a10a:	e033      	b.n	800a174 <d_print_mod_list+0x140>
 800a10c:	6864      	ldr	r4, [r4, #4]
 800a10e:	7823      	ldrb	r3, [r4, #0]
 800a110:	3b1c      	subs	r3, #28
 800a112:	2b04      	cmp	r3, #4
 800a114:	d9fa      	bls.n	800a10c <d_print_mod_list+0xd8>
 800a116:	4622      	mov	r2, r4
 800a118:	4639      	mov	r1, r7
 800a11a:	4628      	mov	r0, r5
 800a11c:	f7ff fcf2 	bl	8009b04 <d_print_comp>
 800a120:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a124:	b009      	add	sp, #36	; 0x24
 800a126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12a:	4e59      	ldr	r6, [pc, #356]	; (800a290 <d_print_mod_list+0x25c>)
 800a12c:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a130:	f106 0a02 	add.w	sl, r6, #2
 800a134:	e009      	b.n	800a14a <d_print_mod_list+0x116>
 800a136:	460b      	mov	r3, r1
 800a138:	3101      	adds	r1, #1
 800a13a:	45b2      	cmp	sl, r6
 800a13c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a140:	f805 8003 	strb.w	r8, [r5, r3]
 800a144:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a148:	d0da      	beq.n	800a100 <d_print_mod_list+0xcc>
 800a14a:	29ff      	cmp	r1, #255	; 0xff
 800a14c:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a150:	d1f1      	bne.n	800a136 <d_print_mod_list+0x102>
 800a152:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a156:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a15a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a15e:	4628      	mov	r0, r5
 800a160:	4798      	blx	r3
 800a162:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a166:	2101      	movs	r1, #1
 800a168:	440b      	add	r3, r1
 800a16a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a16e:	2300      	movs	r3, #0
 800a170:	e7e3      	b.n	800a13a <d_print_mod_list+0x106>
 800a172:	4770      	bx	lr
 800a174:	4e47      	ldr	r6, [pc, #284]	; (800a294 <d_print_mod_list+0x260>)
 800a176:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a17a:	f106 0a0d 	add.w	sl, r6, #13
 800a17e:	f04f 0b00 	mov.w	fp, #0
 800a182:	e009      	b.n	800a198 <d_print_mod_list+0x164>
 800a184:	460b      	mov	r3, r1
 800a186:	3101      	adds	r1, #1
 800a188:	45b2      	cmp	sl, r6
 800a18a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a18e:	f805 8003 	strb.w	r8, [r5, r3]
 800a192:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a196:	d013      	beq.n	800a1c0 <d_print_mod_list+0x18c>
 800a198:	29ff      	cmp	r1, #255	; 0xff
 800a19a:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a19e:	d1f1      	bne.n	800a184 <d_print_mod_list+0x150>
 800a1a0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a1a4:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a1a8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	4798      	blx	r3
 800a1b0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	440b      	add	r3, r1
 800a1b8:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a1bc:	2300      	movs	r3, #0
 800a1be:	e7e3      	b.n	800a188 <d_print_mod_list+0x154>
 800a1c0:	68a2      	ldr	r2, [r4, #8]
 800a1c2:	a801      	add	r0, sp, #4
 800a1c4:	3201      	adds	r2, #1
 800a1c6:	4934      	ldr	r1, [pc, #208]	; (800a298 <d_print_mod_list+0x264>)
 800a1c8:	f009 fade 	bl	8013788 <siprintf>
 800a1cc:	a801      	add	r0, sp, #4
 800a1ce:	f004 fe11 	bl	800edf4 <strlen>
 800a1d2:	b328      	cbz	r0, 800a220 <d_print_mod_list+0x1ec>
 800a1d4:	ae01      	add	r6, sp, #4
 800a1d6:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a1da:	eb06 0a00 	add.w	sl, r6, r0
 800a1de:	f04f 0b00 	mov.w	fp, #0
 800a1e2:	e009      	b.n	800a1f8 <d_print_mod_list+0x1c4>
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	3101      	adds	r1, #1
 800a1e8:	45b2      	cmp	sl, r6
 800a1ea:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a1ee:	f805 8003 	strb.w	r8, [r5, r3]
 800a1f2:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a1f6:	d015      	beq.n	800a224 <d_print_mod_list+0x1f0>
 800a1f8:	29ff      	cmp	r1, #255	; 0xff
 800a1fa:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a1fe:	d1f1      	bne.n	800a1e4 <d_print_mod_list+0x1b0>
 800a200:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a204:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a208:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a20c:	4628      	mov	r0, r5
 800a20e:	4798      	blx	r3
 800a210:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a214:	2101      	movs	r1, #1
 800a216:	440b      	add	r3, r1
 800a218:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a21c:	2300      	movs	r3, #0
 800a21e:	e7e3      	b.n	800a1e8 <d_print_mod_list+0x1b4>
 800a220:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a224:	4e1d      	ldr	r6, [pc, #116]	; (800a29c <d_print_mod_list+0x268>)
 800a226:	f04f 0b00 	mov.w	fp, #0
 800a22a:	f106 0a03 	add.w	sl, r6, #3
 800a22e:	e00a      	b.n	800a246 <d_print_mod_list+0x212>
 800a230:	460b      	mov	r3, r1
 800a232:	3101      	adds	r1, #1
 800a234:	4556      	cmp	r6, sl
 800a236:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a23a:	f805 8003 	strb.w	r8, [r5, r3]
 800a23e:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a242:	f43f af63 	beq.w	800a10c <d_print_mod_list+0xd8>
 800a246:	29ff      	cmp	r1, #255	; 0xff
 800a248:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a24c:	d1f0      	bne.n	800a230 <d_print_mod_list+0x1fc>
 800a24e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a252:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a256:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a25a:	4628      	mov	r0, r5
 800a25c:	4798      	blx	r3
 800a25e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a262:	2101      	movs	r1, #1
 800a264:	440b      	add	r3, r1
 800a266:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a26a:	2300      	movs	r3, #0
 800a26c:	e7e2      	b.n	800a234 <d_print_mod_list+0x200>
 800a26e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a272:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a276:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 800a27a:	4628      	mov	r0, r5
 800a27c:	4798      	blx	r3
 800a27e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a282:	2201      	movs	r2, #1
 800a284:	4413      	add	r3, r2
 800a286:	4631      	mov	r1, r6
 800a288:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a28c:	e732      	b.n	800a0f4 <d_print_mod_list+0xc0>
 800a28e:	bf00      	nop
 800a290:	08015f4c 	.word	0x08015f4c
 800a294:	08015f50 	.word	0x08015f50
 800a298:	08015f60 	.word	0x08015f60
 800a29c:	08015f64 	.word	0x08015f64

0800a2a0 <d_print_array_type.isra.10>:
 800a2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	4690      	mov	r8, r2
 800a2aa:	b163      	cbz	r3, 800a2c6 <d_print_array_type.isra.10+0x26>
 800a2ac:	461e      	mov	r6, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6893      	ldr	r3, [r2, #8]
 800a2b2:	b393      	cbz	r3, 800a31a <d_print_array_type.isra.10+0x7a>
 800a2b4:	6812      	ldr	r2, [r2, #0]
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	d1fa      	bne.n	800a2b0 <d_print_array_type.isra.10+0x10>
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	4639      	mov	r1, r7
 800a2be:	4632      	mov	r2, r6
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f7ff feb7 	bl	800a034 <d_print_mod_list>
 800a2c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a2ca:	29ff      	cmp	r1, #255	; 0xff
 800a2cc:	f000 808e 	beq.w	800a3ec <d_print_array_type.isra.10+0x14c>
 800a2d0:	1c4b      	adds	r3, r1, #1
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	2bff      	cmp	r3, #255	; 0xff
 800a2d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800a2da:	5462      	strb	r2, [r4, r1]
 800a2dc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a2e0:	d069      	beq.n	800a3b6 <d_print_array_type.isra.10+0x116>
 800a2e2:	225b      	movs	r2, #91	; 0x5b
 800a2e4:	1c59      	adds	r1, r3, #1
 800a2e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a2ea:	54e2      	strb	r2, [r4, r3]
 800a2ec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a2f0:	f8d8 2000 	ldr.w	r2, [r8]
 800a2f4:	b12a      	cbz	r2, 800a302 <d_print_array_type.isra.10+0x62>
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f7ff fc03 	bl	8009b04 <d_print_comp>
 800a2fe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a302:	29ff      	cmp	r1, #255	; 0xff
 800a304:	f000 8083 	beq.w	800a40e <d_print_array_type.isra.10+0x16e>
 800a308:	1c4a      	adds	r2, r1, #1
 800a30a:	235d      	movs	r3, #93	; 0x5d
 800a30c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a310:	5463      	strb	r3, [r4, r1]
 800a312:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31a:	6852      	ldr	r2, [r2, #4]
 800a31c:	7812      	ldrb	r2, [r2, #0]
 800a31e:	2a2a      	cmp	r2, #42	; 0x2a
 800a320:	d040      	beq.n	800a3a4 <d_print_array_type.isra.10+0x104>
 800a322:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a454 <d_print_array_type.isra.10+0x1b4>
 800a326:	461d      	mov	r5, r3
 800a328:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a32c:	f109 0b02 	add.w	fp, r9, #2
 800a330:	e00a      	b.n	800a348 <d_print_array_type.isra.10+0xa8>
 800a332:	460b      	mov	r3, r1
 800a334:	45cb      	cmp	fp, r9
 800a336:	f101 0101 	add.w	r1, r1, #1
 800a33a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a33e:	f804 a003 	strb.w	sl, [r4, r3]
 800a342:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800a346:	d01b      	beq.n	800a380 <d_print_array_type.isra.10+0xe0>
 800a348:	29ff      	cmp	r1, #255	; 0xff
 800a34a:	f819 ab01 	ldrb.w	sl, [r9], #1
 800a34e:	d1f0      	bne.n	800a332 <d_print_array_type.isra.10+0x92>
 800a350:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a354:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a358:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a35c:	4620      	mov	r0, r4
 800a35e:	4798      	blx	r3
 800a360:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a364:	2101      	movs	r1, #1
 800a366:	440b      	add	r3, r1
 800a368:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a36c:	45cb      	cmp	fp, r9
 800a36e:	f04f 0300 	mov.w	r3, #0
 800a372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a376:	f804 a003 	strb.w	sl, [r4, r3]
 800a37a:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800a37e:	d1e3      	bne.n	800a348 <d_print_array_type.isra.10+0xa8>
 800a380:	2300      	movs	r3, #0
 800a382:	4632      	mov	r2, r6
 800a384:	4639      	mov	r1, r7
 800a386:	4620      	mov	r0, r4
 800a388:	f7ff fe54 	bl	800a034 <d_print_mod_list>
 800a38c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a390:	2bff      	cmp	r3, #255	; 0xff
 800a392:	d04d      	beq.n	800a430 <d_print_array_type.isra.10+0x190>
 800a394:	1c59      	adds	r1, r3, #1
 800a396:	2229      	movs	r2, #41	; 0x29
 800a398:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a39c:	54e2      	strb	r2, [r4, r3]
 800a39e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a3a2:	e792      	b.n	800a2ca <d_print_array_type.isra.10+0x2a>
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	4639      	mov	r1, r7
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f7ff fe43 	bl	800a034 <d_print_mod_list>
 800a3ae:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a3b2:	2bff      	cmp	r3, #255	; 0xff
 800a3b4:	d195      	bne.n	800a2e2 <d_print_array_type.isra.10+0x42>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800a3be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a3c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	4798      	blx	r3
 800a3ca:	235b      	movs	r3, #91	; 0x5b
 800a3cc:	7023      	strb	r3, [r4, #0]
 800a3ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a3d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a3d6:	f8d8 2000 	ldr.w	r2, [r8]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	2101      	movs	r1, #1
 800a3de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a3e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	d185      	bne.n	800a2f6 <d_print_array_type.isra.10+0x56>
 800a3ea:	e78d      	b.n	800a308 <d_print_array_type.isra.10+0x68>
 800a3ec:	2500      	movs	r5, #0
 800a3ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a3f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a3f6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4798      	blx	r3
 800a3fe:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a402:	2301      	movs	r3, #1
 800a404:	441a      	add	r2, r3
 800a406:	4629      	mov	r1, r5
 800a408:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a40c:	e761      	b.n	800a2d2 <d_print_array_type.isra.10+0x32>
 800a40e:	2500      	movs	r5, #0
 800a410:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a414:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a418:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a41c:	4620      	mov	r0, r4
 800a41e:	4798      	blx	r3
 800a420:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a424:	2201      	movs	r2, #1
 800a426:	4413      	add	r3, r2
 800a428:	4629      	mov	r1, r5
 800a42a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a42e:	e76c      	b.n	800a30a <d_print_array_type.isra.10+0x6a>
 800a430:	2500      	movs	r5, #0
 800a432:	4619      	mov	r1, r3
 800a434:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a438:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a43c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a440:	4620      	mov	r0, r4
 800a442:	4798      	blx	r3
 800a444:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a448:	2101      	movs	r1, #1
 800a44a:	440a      	add	r2, r1
 800a44c:	462b      	mov	r3, r5
 800a44e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a452:	e7a0      	b.n	800a396 <d_print_array_type.isra.10+0xf6>
 800a454:	08016148 	.word	0x08016148

0800a458 <d_print_function_type.isra.11>:
 800a458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a45c:	4604      	mov	r4, r0
 800a45e:	b083      	sub	sp, #12
 800a460:	460e      	mov	r6, r1
 800a462:	4617      	mov	r7, r2
 800a464:	461d      	mov	r5, r3
 800a466:	b353      	cbz	r3, 800a4be <d_print_function_type.isra.11+0x66>
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	bb43      	cbnz	r3, 800a4be <d_print_function_type.isra.11+0x66>
 800a46c:	462a      	mov	r2, r5
 800a46e:	f04f 0e01 	mov.w	lr, #1
 800a472:	e006      	b.n	800a482 <d_print_function_type.isra.11+0x2a>
 800a474:	f410 6f60 	tst.w	r0, #3584	; 0xe00
 800a478:	d15d      	bne.n	800a536 <d_print_function_type.isra.11+0xde>
 800a47a:	6812      	ldr	r2, [r2, #0]
 800a47c:	b1fa      	cbz	r2, 800a4be <d_print_function_type.isra.11+0x66>
 800a47e:	6893      	ldr	r3, [r2, #8]
 800a480:	b9eb      	cbnz	r3, 800a4be <d_print_function_type.isra.11+0x66>
 800a482:	6853      	ldr	r3, [r2, #4]
 800a484:	496e      	ldr	r1, [pc, #440]	; (800a640 <d_print_function_type.isra.11+0x1e8>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	3b19      	subs	r3, #25
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	fa0e f003 	lsl.w	r0, lr, r3
 800a490:	2b12      	cmp	r3, #18
 800a492:	ea01 0100 	and.w	r1, r1, r0
 800a496:	d8f0      	bhi.n	800a47a <d_print_function_type.isra.11+0x22>
 800a498:	2900      	cmp	r1, #0
 800a49a:	d0eb      	beq.n	800a474 <d_print_function_type.isra.11+0x1c>
 800a49c:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a4a0:	2b20      	cmp	r3, #32
 800a4a2:	d04e      	beq.n	800a542 <d_print_function_type.isra.11+0xea>
 800a4a4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a4a8:	2bff      	cmp	r3, #255	; 0xff
 800a4aa:	f000 80b5 	beq.w	800a618 <d_print_function_type.isra.11+0x1c0>
 800a4ae:	1c59      	adds	r1, r3, #1
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a4b6:	54e2      	strb	r2, [r4, r3]
 800a4b8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a4bc:	e043      	b.n	800a546 <d_print_function_type.isra.11+0xee>
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	462a      	mov	r2, r5
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f7ff fdb0 	bl	800a034 <d_print_mod_list>
 800a4d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a4d8:	29ff      	cmp	r1, #255	; 0xff
 800a4da:	d056      	beq.n	800a58a <d_print_function_type.isra.11+0x132>
 800a4dc:	1c4b      	adds	r3, r1, #1
 800a4de:	2228      	movs	r2, #40	; 0x28
 800a4e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800a4e4:	5462      	strb	r2, [r4, r1]
 800a4e6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a4ea:	6838      	ldr	r0, [r7, #0]
 800a4ec:	b178      	cbz	r0, 800a50e <d_print_function_type.isra.11+0xb6>
 800a4ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	9000      	str	r0, [sp, #0]
 800a4f6:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	f7fc fee8 	bl	80072d4 <d_print_comp_inner>
 800a504:	9a01      	ldr	r2, [sp, #4]
 800a506:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a50a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a50e:	2bff      	cmp	r3, #255	; 0xff
 800a510:	d04d      	beq.n	800a5ae <d_print_function_type.isra.11+0x156>
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	2029      	movs	r0, #41	; 0x29
 800a516:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a51a:	4631      	mov	r1, r6
 800a51c:	54e0      	strb	r0, [r4, r3]
 800a51e:	462a      	mov	r2, r5
 800a520:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 800a524:	2301      	movs	r3, #1
 800a526:	4620      	mov	r0, r4
 800a528:	f7ff fd84 	bl	800a034 <d_print_mod_list>
 800a52c:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 800a530:	b003      	add	sp, #12
 800a532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a536:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a53a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800a53e:	2a28      	cmp	r2, #40	; 0x28
 800a540:	d1ae      	bne.n	800a4a0 <d_print_function_type.isra.11+0x48>
 800a542:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a546:	29ff      	cmp	r1, #255	; 0xff
 800a548:	d054      	beq.n	800a5f4 <d_print_function_type.isra.11+0x19c>
 800a54a:	1c4a      	adds	r2, r1, #1
 800a54c:	2328      	movs	r3, #40	; 0x28
 800a54e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a552:	f04f 0900 	mov.w	r9, #0
 800a556:	5463      	strb	r3, [r4, r1]
 800a558:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800a55c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a560:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800a564:	464b      	mov	r3, r9
 800a566:	462a      	mov	r2, r5
 800a568:	4631      	mov	r1, r6
 800a56a:	4620      	mov	r0, r4
 800a56c:	f7ff fd62 	bl	800a034 <d_print_mod_list>
 800a570:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a574:	2bff      	cmp	r3, #255	; 0xff
 800a576:	d02c      	beq.n	800a5d2 <d_print_function_type.isra.11+0x17a>
 800a578:	1c59      	adds	r1, r3, #1
 800a57a:	2229      	movs	r2, #41	; 0x29
 800a57c:	29ff      	cmp	r1, #255	; 0xff
 800a57e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a582:	54e2      	strb	r2, [r4, r3]
 800a584:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a588:	d1a8      	bne.n	800a4dc <d_print_function_type.isra.11+0x84>
 800a58a:	f04f 0900 	mov.w	r9, #0
 800a58e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a592:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a596:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800a59a:	4620      	mov	r0, r4
 800a59c:	4798      	blx	r3
 800a59e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	441a      	add	r2, r3
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a5ac:	e797      	b.n	800a4de <d_print_function_type.isra.11+0x86>
 800a5ae:	2700      	movs	r7, #0
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a5b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a5ba:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4798      	blx	r3
 800a5c2:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	4411      	add	r1, r2
 800a5ca:	463b      	mov	r3, r7
 800a5cc:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 800a5d0:	e7a0      	b.n	800a514 <d_print_function_type.isra.11+0xbc>
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a5d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a5dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	4798      	blx	r3
 800a5e4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	440a      	add	r2, r1
 800a5ec:	464b      	mov	r3, r9
 800a5ee:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a5f2:	e7c2      	b.n	800a57a <d_print_function_type.isra.11+0x122>
 800a5f4:	f04f 0800 	mov.w	r8, #0
 800a5f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a5fc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a600:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a604:	4620      	mov	r0, r4
 800a606:	4798      	blx	r3
 800a608:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a60c:	2201      	movs	r2, #1
 800a60e:	4413      	add	r3, r2
 800a610:	4641      	mov	r1, r8
 800a612:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a616:	e799      	b.n	800a54c <d_print_function_type.isra.11+0xf4>
 800a618:	f04f 0800 	mov.w	r8, #0
 800a61c:	4619      	mov	r1, r3
 800a61e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a622:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a626:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a62a:	4620      	mov	r0, r4
 800a62c:	4798      	blx	r3
 800a62e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a632:	2101      	movs	r1, #1
 800a634:	440a      	add	r2, r1
 800a636:	4643      	mov	r3, r8
 800a638:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a63c:	e738      	b.n	800a4b0 <d_print_function_type.isra.11+0x58>
 800a63e:	bf00      	nop
 800a640:	00043107 	.word	0x00043107

0800a644 <d_print_cast.isra.12>:
 800a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a648:	4604      	mov	r4, r0
 800a64a:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800a64e:	b084      	sub	sp, #16
 800a650:	460e      	mov	r6, r1
 800a652:	4615      	mov	r5, r2
 800a654:	b138      	cbz	r0, 800a666 <d_print_cast.isra.12+0x22>
 800a656:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 800a65a:	ab04      	add	r3, sp, #16
 800a65c:	f843 2d10 	str.w	r2, [r3, #-16]!
 800a660:	9001      	str	r0, [sp, #4]
 800a662:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a666:	682b      	ldr	r3, [r5, #0]
 800a668:	781a      	ldrb	r2, [r3, #0]
 800a66a:	2a04      	cmp	r2, #4
 800a66c:	d017      	beq.n	800a69e <d_print_cast.isra.12+0x5a>
 800a66e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 800a672:	a802      	add	r0, sp, #8
 800a674:	461a      	mov	r2, r3
 800a676:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 800a67a:	4631      	mov	r1, r6
 800a67c:	4620      	mov	r0, r4
 800a67e:	9302      	str	r3, [sp, #8]
 800a680:	9503      	str	r5, [sp, #12]
 800a682:	f7fc fe27 	bl	80072d4 <d_print_comp_inner>
 800a686:	9a03      	ldr	r2, [sp, #12]
 800a688:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800a68c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a690:	b113      	cbz	r3, 800a698 <d_print_cast.isra.12+0x54>
 800a692:	9b00      	ldr	r3, [sp, #0]
 800a694:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a698:	b004      	add	sp, #16
 800a69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69e:	6858      	ldr	r0, [r3, #4]
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	9002      	str	r0, [sp, #8]
 800a6aa:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	9303      	str	r3, [sp, #12]
 800a6b4:	f7fc fe0e 	bl	80072d4 <d_print_comp_inner>
 800a6b8:	9a03      	ldr	r2, [sp, #12]
 800a6ba:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800a6be:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a6c2:	b113      	cbz	r3, 800a6ca <d_print_cast.isra.12+0x86>
 800a6c4:	9b00      	ldr	r3, [sp, #0]
 800a6c6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a6ca:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a6ce:	2b3c      	cmp	r3, #60	; 0x3c
 800a6d0:	d02c      	beq.n	800a72c <d_print_cast.isra.12+0xe8>
 800a6d2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a6d6:	29ff      	cmp	r1, #255	; 0xff
 800a6d8:	d051      	beq.n	800a77e <d_print_cast.isra.12+0x13a>
 800a6da:	1c4a      	adds	r2, r1, #1
 800a6dc:	233c      	movs	r3, #60	; 0x3c
 800a6de:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a6e2:	5463      	strb	r3, [r4, r1]
 800a6e4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	4631      	mov	r1, r6
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	9302      	str	r3, [sp, #8]
 800a6fc:	9503      	str	r5, [sp, #12]
 800a6fe:	f7fc fde9 	bl	80072d4 <d_print_comp_inner>
 800a702:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a706:	9a03      	ldr	r2, [sp, #12]
 800a708:	2b3e      	cmp	r3, #62	; 0x3e
 800a70a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a70e:	d019      	beq.n	800a744 <d_print_cast.isra.12+0x100>
 800a710:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a714:	29ff      	cmp	r1, #255	; 0xff
 800a716:	d021      	beq.n	800a75c <d_print_cast.isra.12+0x118>
 800a718:	1c4a      	adds	r2, r1, #1
 800a71a:	233e      	movs	r3, #62	; 0x3e
 800a71c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a720:	5463      	strb	r3, [r4, r1]
 800a722:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a726:	b004      	add	sp, #16
 800a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a72c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a730:	2bff      	cmp	r3, #255	; 0xff
 800a732:	d048      	beq.n	800a7c6 <d_print_cast.isra.12+0x182>
 800a734:	1c59      	adds	r1, r3, #1
 800a736:	2220      	movs	r2, #32
 800a738:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a73c:	54e2      	strb	r2, [r4, r3]
 800a73e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a742:	e7c8      	b.n	800a6d6 <d_print_cast.isra.12+0x92>
 800a744:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a748:	2bff      	cmp	r3, #255	; 0xff
 800a74a:	d02a      	beq.n	800a7a2 <d_print_cast.isra.12+0x15e>
 800a74c:	1c59      	adds	r1, r3, #1
 800a74e:	2220      	movs	r2, #32
 800a750:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a754:	54e2      	strb	r2, [r4, r3]
 800a756:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a75a:	e7db      	b.n	800a714 <d_print_cast.isra.12+0xd0>
 800a75c:	2500      	movs	r5, #0
 800a75e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a762:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a766:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a76a:	4620      	mov	r0, r4
 800a76c:	4798      	blx	r3
 800a76e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a772:	2201      	movs	r2, #1
 800a774:	4413      	add	r3, r2
 800a776:	4629      	mov	r1, r5
 800a778:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a77c:	e7cd      	b.n	800a71a <d_print_cast.isra.12+0xd6>
 800a77e:	f04f 0800 	mov.w	r8, #0
 800a782:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a786:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a78a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a78e:	4620      	mov	r0, r4
 800a790:	4798      	blx	r3
 800a792:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a796:	2201      	movs	r2, #1
 800a798:	4413      	add	r3, r2
 800a79a:	4641      	mov	r1, r8
 800a79c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a7a0:	e79c      	b.n	800a6dc <d_print_cast.isra.12+0x98>
 800a7a2:	2500      	movs	r5, #0
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a7aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a7ae:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4798      	blx	r3
 800a7b6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a7ba:	2101      	movs	r1, #1
 800a7bc:	440a      	add	r2, r1
 800a7be:	462b      	mov	r3, r5
 800a7c0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a7c4:	e7c3      	b.n	800a74e <d_print_cast.isra.12+0x10a>
 800a7c6:	f04f 0800 	mov.w	r8, #0
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a7d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a7d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4798      	blx	r3
 800a7dc:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	440a      	add	r2, r1
 800a7e4:	4643      	mov	r3, r8
 800a7e6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a7ea:	e7a4      	b.n	800a736 <d_print_cast.isra.12+0xf2>

0800a7ec <d_print_expr_op>:
 800a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f0:	7815      	ldrb	r5, [r2, #0]
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	2d31      	cmp	r5, #49	; 0x31
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	d00d      	beq.n	800a818 <d_print_expr_op+0x2c>
 800a7fc:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 800a800:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 800a804:	e88d 0028 	stmia.w	sp, {r3, r5}
 800a808:	f7fc fd64 	bl	80072d4 <d_print_comp_inner>
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a812:	b002      	add	sp, #8
 800a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a818:	6853      	ldr	r3, [r2, #4]
 800a81a:	689f      	ldr	r7, [r3, #8]
 800a81c:	685d      	ldr	r5, [r3, #4]
 800a81e:	2f00      	cmp	r7, #0
 800a820:	d0f7      	beq.n	800a812 <d_print_expr_op+0x26>
 800a822:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800a826:	442f      	add	r7, r5
 800a828:	f04f 0800 	mov.w	r8, #0
 800a82c:	e008      	b.n	800a840 <d_print_expr_op+0x54>
 800a82e:	460b      	mov	r3, r1
 800a830:	3101      	adds	r1, #1
 800a832:	42bd      	cmp	r5, r7
 800a834:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a838:	54e6      	strb	r6, [r4, r3]
 800a83a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800a83e:	d0e8      	beq.n	800a812 <d_print_expr_op+0x26>
 800a840:	29ff      	cmp	r1, #255	; 0xff
 800a842:	f815 6b01 	ldrb.w	r6, [r5], #1
 800a846:	d1f2      	bne.n	800a82e <d_print_expr_op+0x42>
 800a848:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a84c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a850:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a854:	4620      	mov	r0, r4
 800a856:	4798      	blx	r3
 800a858:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a85c:	2101      	movs	r1, #1
 800a85e:	440b      	add	r3, r1
 800a860:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a864:	2300      	movs	r3, #0
 800a866:	e7e4      	b.n	800a832 <d_print_expr_op+0x46>

0800a868 <d_print_subexpr>:
 800a868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a86a:	7813      	ldrb	r3, [r2, #0]
 800a86c:	b083      	sub	sp, #12
 800a86e:	2b01      	cmp	r3, #1
 800a870:	4615      	mov	r5, r2
 800a872:	460e      	mov	r6, r1
 800a874:	4604      	mov	r4, r0
 800a876:	d929      	bls.n	800a8cc <d_print_subexpr+0x64>
 800a878:	2b30      	cmp	r3, #48	; 0x30
 800a87a:	d027      	beq.n	800a8cc <d_print_subexpr+0x64>
 800a87c:	2b06      	cmp	r3, #6
 800a87e:	d025      	beq.n	800a8cc <d_print_subexpr+0x64>
 800a880:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800a884:	29ff      	cmp	r1, #255	; 0xff
 800a886:	d031      	beq.n	800a8ec <d_print_subexpr+0x84>
 800a888:	1c4a      	adds	r2, r1, #1
 800a88a:	2328      	movs	r3, #40	; 0x28
 800a88c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a890:	5463      	strb	r3, [r4, r1]
 800a892:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
 800a896:	4631      	mov	r1, r6
 800a898:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a89c:	462a      	mov	r2, r5
 800a89e:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800a8a8:	f7fc fd14 	bl	80072d4 <d_print_comp_inner>
 800a8ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a8b0:	9b01      	ldr	r3, [sp, #4]
 800a8b2:	29ff      	cmp	r1, #255	; 0xff
 800a8b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a8b8:	d028      	beq.n	800a90c <d_print_subexpr+0xa4>
 800a8ba:	1c4a      	adds	r2, r1, #1
 800a8bc:	2329      	movs	r3, #41	; 0x29
 800a8be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a8c2:	5463      	strb	r3, [r4, r1]
 800a8c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a8c8:	b003      	add	sp, #12
 800a8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a8d0:	4631      	mov	r1, r6
 800a8d2:	462a      	mov	r2, r5
 800a8d4:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a8d8:	4620      	mov	r0, r4
 800a8da:	9301      	str	r3, [sp, #4]
 800a8dc:	9500      	str	r5, [sp, #0]
 800a8de:	f7fc fcf9 	bl	80072d4 <d_print_comp_inner>
 800a8e2:	9b01      	ldr	r3, [sp, #4]
 800a8e4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a8e8:	b003      	add	sp, #12
 800a8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ec:	2700      	movs	r7, #0
 800a8ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a8f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a8f6:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800a8fa:	4798      	blx	r3
 800a8fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a900:	2201      	movs	r2, #1
 800a902:	4413      	add	r3, r2
 800a904:	4639      	mov	r1, r7
 800a906:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a90a:	e7be      	b.n	800a88a <d_print_subexpr+0x22>
 800a90c:	2500      	movs	r5, #0
 800a90e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a912:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a916:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a91a:	4620      	mov	r0, r4
 800a91c:	4798      	blx	r3
 800a91e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a922:	2201      	movs	r2, #1
 800a924:	4413      	add	r3, r2
 800a926:	4629      	mov	r1, r5
 800a928:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a92c:	e7c6      	b.n	800a8bc <d_print_subexpr+0x54>
 800a92e:	bf00      	nop

0800a930 <d_template_args>:
 800a930:	68c1      	ldr	r1, [r0, #12]
 800a932:	780b      	ldrb	r3, [r1, #0]
 800a934:	3b49      	subs	r3, #73	; 0x49
 800a936:	2b01      	cmp	r3, #1
 800a938:	f200 80ac 	bhi.w	800aa94 <d_template_args+0x164>
 800a93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a940:	1c4a      	adds	r2, r1, #1
 800a942:	60c2      	str	r2, [r0, #12]
 800a944:	784b      	ldrb	r3, [r1, #1]
 800a946:	b085      	sub	sp, #20
 800a948:	2b45      	cmp	r3, #69	; 0x45
 800a94a:	4604      	mov	r4, r0
 800a94c:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 800a950:	f000 8166 	beq.w	800ac20 <d_template_args+0x2f0>
 800a954:	ae04      	add	r6, sp, #16
 800a956:	2100      	movs	r1, #0
 800a958:	f846 1d04 	str.w	r1, [r6, #-4]!
 800a95c:	3b49      	subs	r3, #73	; 0x49
 800a95e:	2b0f      	cmp	r3, #15
 800a960:	d854      	bhi.n	800aa0c <d_template_args+0xdc>
 800a962:	e8df f003 	tbb	[pc, r3]
 800a966:	4e4e      	.short	0x4e4e
 800a968:	53533253 	.word	0x53533253
 800a96c:	53535353 	.word	0x53535353
 800a970:	53535353 	.word	0x53535353
 800a974:	0853      	.short	0x0853
 800a976:	1c53      	adds	r3, r2, #1
 800a978:	2501      	movs	r5, #1
 800a97a:	60e3      	str	r3, [r4, #12]
 800a97c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800a97e:	6365      	str	r5, [r4, #52]	; 0x34
 800a980:	7853      	ldrb	r3, [r2, #1]
 800a982:	2b4c      	cmp	r3, #76	; 0x4c
 800a984:	f000 8088 	beq.w	800aa98 <d_template_args+0x168>
 800a988:	2b54      	cmp	r3, #84	; 0x54
 800a98a:	f000 808b 	beq.w	800aaa4 <d_template_args+0x174>
 800a98e:	2b73      	cmp	r3, #115	; 0x73
 800a990:	d044      	beq.n	800aa1c <d_template_args+0xec>
 800a992:	2b66      	cmp	r3, #102	; 0x66
 800a994:	d060      	beq.n	800aa58 <d_template_args+0x128>
 800a996:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a99a:	2909      	cmp	r1, #9
 800a99c:	f200 81b1 	bhi.w	800ad02 <d_template_args+0x3d2>
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f003 f927 	bl	800dbf4 <d_unqualified_name>
 800a9a6:	4605      	mov	r5, r0
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	f000 821f 	beq.w	800adec <d_template_args+0x4bc>
 800a9ae:	68e3      	ldr	r3, [r4, #12]
 800a9b0:	781a      	ldrb	r2, [r3, #0]
 800a9b2:	2a49      	cmp	r2, #73	; 0x49
 800a9b4:	f000 8128 	beq.w	800ac08 <d_template_args+0x2d8>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	6367      	str	r7, [r4, #52]	; 0x34
 800a9bc:	7819      	ldrb	r1, [r3, #0]
 800a9be:	2945      	cmp	r1, #69	; 0x45
 800a9c0:	d029      	beq.n	800aa16 <d_template_args+0xe6>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	b005      	add	sp, #20
 800a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f003 ff8e 	bl	800e8ec <d_expr_primary>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d0f5      	beq.n	800a9c2 <d_template_args+0x92>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	212f      	movs	r1, #47	; 0x2f
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7fc f8a8 	bl	8006b30 <d_make_comp>
 800a9e0:	6030      	str	r0, [r6, #0]
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d0ed      	beq.n	800a9c2 <d_template_args+0x92>
 800a9e6:	68e2      	ldr	r2, [r4, #12]
 800a9e8:	f100 0608 	add.w	r6, r0, #8
 800a9ec:	7813      	ldrb	r3, [r2, #0]
 800a9ee:	2b45      	cmp	r3, #69	; 0x45
 800a9f0:	d1b4      	bne.n	800a95c <d_template_args+0x2c>
 800a9f2:	9803      	ldr	r0, [sp, #12]
 800a9f4:	3201      	adds	r2, #1
 800a9f6:	60e2      	str	r2, [r4, #12]
 800a9f8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800a9fc:	b005      	add	sp, #20
 800a9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff ff94 	bl	800a930 <d_template_args>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	e7e2      	b.n	800a9d2 <d_template_args+0xa2>
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f002 fc75 	bl	800d2fc <d_type>
 800aa12:	4602      	mov	r2, r0
 800aa14:	e7dd      	b.n	800a9d2 <d_template_args+0xa2>
 800aa16:	3301      	adds	r3, #1
 800aa18:	60e3      	str	r3, [r4, #12]
 800aa1a:	e7da      	b.n	800a9d2 <d_template_args+0xa2>
 800aa1c:	7893      	ldrb	r3, [r2, #2]
 800aa1e:	2b72      	cmp	r3, #114	; 0x72
 800aa20:	f000 8149 	beq.w	800acb6 <d_template_args+0x386>
 800aa24:	2b70      	cmp	r3, #112	; 0x70
 800aa26:	f000 81aa 	beq.w	800ad7e <d_template_args+0x44e>
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f003 f822 	bl	800da74 <d_operator_name>
 800aa30:	4605      	mov	r5, r0
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f000 81da 	beq.w	800adec <d_template_args+0x4bc>
 800aa38:	f890 9000 	ldrb.w	r9, [r0]
 800aa3c:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800aa40:	d036      	beq.n	800aab0 <d_template_args+0x180>
 800aa42:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 800aa46:	f000 80cf 	beq.w	800abe8 <d_template_args+0x2b8>
 800aa4a:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 800aa4e:	f000 8172 	beq.w	800ad36 <d_template_args+0x406>
 800aa52:	68e3      	ldr	r3, [r4, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	e7b0      	b.n	800a9ba <d_template_args+0x8a>
 800aa58:	7893      	ldrb	r3, [r2, #2]
 800aa5a:	2b70      	cmp	r3, #112	; 0x70
 800aa5c:	d1e5      	bne.n	800aa2a <d_template_args+0xfa>
 800aa5e:	1cd3      	adds	r3, r2, #3
 800aa60:	60e3      	str	r3, [r4, #12]
 800aa62:	78d3      	ldrb	r3, [r2, #3]
 800aa64:	2b54      	cmp	r3, #84	; 0x54
 800aa66:	f040 813c 	bne.w	800ace2 <d_template_args+0x3b2>
 800aa6a:	3204      	adds	r2, #4
 800aa6c:	60e2      	str	r2, [r4, #12]
 800aa6e:	2000      	movs	r0, #0
 800aa70:	6963      	ldr	r3, [r4, #20]
 800aa72:	69a1      	ldr	r1, [r4, #24]
 800aa74:	428b      	cmp	r3, r1
 800aa76:	daec      	bge.n	800aa52 <d_template_args+0x122>
 800aa78:	6921      	ldr	r1, [r4, #16]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aa80:	6162      	str	r2, [r4, #20]
 800aa82:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800aa86:	d06d      	beq.n	800ab64 <d_template_args+0x234>
 800aa88:	2506      	movs	r5, #6
 800aa8a:	f801 5023 	strb.w	r5, [r1, r3, lsl #2]
 800aa8e:	6050      	str	r0, [r2, #4]
 800aa90:	68e3      	ldr	r3, [r4, #12]
 800aa92:	e792      	b.n	800a9ba <d_template_args+0x8a>
 800aa94:	2000      	movs	r0, #0
 800aa96:	4770      	bx	lr
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f003 ff27 	bl	800e8ec <d_expr_primary>
 800aa9e:	68e3      	ldr	r3, [r4, #12]
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	e78a      	b.n	800a9ba <d_template_args+0x8a>
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f7fc f9e5 	bl	8006e74 <d_template_param>
 800aaaa:	68e3      	ldr	r3, [r4, #12]
 800aaac:	4602      	mov	r2, r0
 800aaae:	e784      	b.n	800a9ba <d_template_args+0x8a>
 800aab0:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800aab4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800aab6:	f8db 3008 	ldr.w	r3, [fp, #8]
 800aaba:	f8db a000 	ldr.w	sl, [fp]
 800aabe:	3b02      	subs	r3, #2
 800aac0:	441a      	add	r2, r3
 800aac2:	6322      	str	r2, [r4, #48]	; 0x30
 800aac4:	4650      	mov	r0, sl
 800aac6:	49cb      	ldr	r1, [pc, #812]	; (800adf4 <d_template_args+0x4c4>)
 800aac8:	f004 f98a 	bl	800ede0 <strcmp>
 800aacc:	2800      	cmp	r0, #0
 800aace:	f000 8188 	beq.w	800ade2 <d_template_args+0x4b2>
 800aad2:	f8db 300c 	ldr.w	r3, [fp, #12]
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d8bb      	bhi.n	800aa52 <d_template_args+0x122>
 800aada:	e8df f003 	tbb	[pc, r3]
 800aade:	ab7c      	.short	0xab7c
 800aae0:	0447      	.short	0x0447
 800aae2:	f04f 0a00 	mov.w	sl, #0
 800aae6:	49c4      	ldr	r1, [pc, #784]	; (800adf8 <d_template_args+0x4c8>)
 800aae8:	4650      	mov	r0, sl
 800aaea:	f004 f979 	bl	800ede0 <strcmp>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	f000 819e 	beq.w	800ae30 <d_template_args+0x500>
 800aaf4:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf8:	2b6e      	cmp	r3, #110	; 0x6e
 800aafa:	d1aa      	bne.n	800aa52 <d_template_args+0x122>
 800aafc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ab00:	2b77      	cmp	r3, #119	; 0x77
 800ab02:	d001      	beq.n	800ab08 <d_template_args+0x1d8>
 800ab04:	2b61      	cmp	r3, #97	; 0x61
 800ab06:	d1a4      	bne.n	800aa52 <d_template_args+0x122>
 800ab08:	215f      	movs	r1, #95	; 0x5f
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 fd86 	bl	800b61c <d_exprlist>
 800ab10:	4681      	mov	r9, r0
 800ab12:	4620      	mov	r0, r4
 800ab14:	f002 fbf2 	bl	800d2fc <d_type>
 800ab18:	68e3      	ldr	r3, [r4, #12]
 800ab1a:	4682      	mov	sl, r0
 800ab1c:	7819      	ldrb	r1, [r3, #0]
 800ab1e:	2945      	cmp	r1, #69	; 0x45
 800ab20:	f000 825e 	beq.w	800afe0 <d_template_args+0x6b0>
 800ab24:	2970      	cmp	r1, #112	; 0x70
 800ab26:	f000 8343 	beq.w	800b1b0 <d_template_args+0x880>
 800ab2a:	2969      	cmp	r1, #105	; 0x69
 800ab2c:	f040 824e 	bne.w	800afcc <d_template_args+0x69c>
 800ab30:	785a      	ldrb	r2, [r3, #1]
 800ab32:	2a6c      	cmp	r2, #108	; 0x6c
 800ab34:	f040 824a 	bne.w	800afcc <d_template_args+0x69c>
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f002 fa0d 	bl	800cf58 <d_expression_1>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	4652      	mov	r2, sl
 800ab42:	213a      	movs	r1, #58	; 0x3a
 800ab44:	4620      	mov	r0, r4
 800ab46:	f7fb fff3 	bl	8006b30 <d_make_comp>
 800ab4a:	464a      	mov	r2, r9
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2139      	movs	r1, #57	; 0x39
 800ab50:	4620      	mov	r0, r4
 800ab52:	f7fb ffed 	bl	8006b30 <d_make_comp>
 800ab56:	462a      	mov	r2, r5
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2138      	movs	r1, #56	; 0x38
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f7fb ffe7 	bl	8006b30 <d_make_comp>
 800ab62:	4602      	mov	r2, r0
 800ab64:	68e3      	ldr	r3, [r4, #12]
 800ab66:	e728      	b.n	800a9ba <d_template_args+0x8a>
 800ab68:	f04f 0a00 	mov.w	sl, #0
 800ab6c:	686b      	ldr	r3, [r5, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	785a      	ldrb	r2, [r3, #1]
 800ab72:	2a63      	cmp	r2, #99	; 0x63
 800ab74:	f000 814e 	beq.w	800ae14 <d_template_args+0x4e4>
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f002 f9ed 	bl	800cf58 <d_expression_1>
 800ab7e:	4681      	mov	r9, r0
 800ab80:	499e      	ldr	r1, [pc, #632]	; (800adfc <d_template_args+0x4cc>)
 800ab82:	4650      	mov	r0, sl
 800ab84:	f004 f92c 	bl	800ede0 <strcmp>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	f000 813d 	beq.w	800ae08 <d_template_args+0x4d8>
 800ab8e:	499c      	ldr	r1, [pc, #624]	; (800ae00 <d_template_args+0x4d0>)
 800ab90:	4650      	mov	r0, sl
 800ab92:	f004 f925 	bl	800ede0 <strcmp>
 800ab96:	b130      	cbz	r0, 800aba6 <d_template_args+0x276>
 800ab98:	4650      	mov	r0, sl
 800ab9a:	499a      	ldr	r1, [pc, #616]	; (800ae04 <d_template_args+0x4d4>)
 800ab9c:	f004 f920 	bl	800ede0 <strcmp>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f040 8215 	bne.w	800afd0 <d_template_args+0x6a0>
 800aba6:	4620      	mov	r0, r4
 800aba8:	f003 f824 	bl	800dbf4 <d_unqualified_name>
 800abac:	68e3      	ldr	r3, [r4, #12]
 800abae:	4682      	mov	sl, r0
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b49      	cmp	r3, #73	; 0x49
 800abb4:	f000 82d3 	beq.w	800b15e <d_template_args+0x82e>
 800abb8:	4653      	mov	r3, sl
 800abba:	464a      	mov	r2, r9
 800abbc:	2137      	movs	r1, #55	; 0x37
 800abbe:	4620      	mov	r0, r4
 800abc0:	f7fb ffb6 	bl	8006b30 <d_make_comp>
 800abc4:	462a      	mov	r2, r5
 800abc6:	4603      	mov	r3, r0
 800abc8:	2136      	movs	r1, #54	; 0x36
 800abca:	4620      	mov	r0, r4
 800abcc:	f7fb ffb0 	bl	8006b30 <d_make_comp>
 800abd0:	68e3      	ldr	r3, [r4, #12]
 800abd2:	4602      	mov	r2, r0
 800abd4:	e6f1      	b.n	800a9ba <d_template_args+0x8a>
 800abd6:	462a      	mov	r2, r5
 800abd8:	2300      	movs	r3, #0
 800abda:	2134      	movs	r1, #52	; 0x34
 800abdc:	4620      	mov	r0, r4
 800abde:	f7fb ffa7 	bl	8006b30 <d_make_comp>
 800abe2:	68e3      	ldr	r3, [r4, #12]
 800abe4:	4602      	mov	r2, r0
 800abe6:	e6e8      	b.n	800a9ba <d_template_args+0x8a>
 800abe8:	686b      	ldr	r3, [r5, #4]
 800abea:	2b03      	cmp	r3, #3
 800abec:	f63f af31 	bhi.w	800aa52 <d_template_args+0x122>
 800abf0:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <d_template_args+0x2c8>)
 800abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf6:	bf00      	nop
 800abf8:	0800abd7 	.word	0x0800abd7
 800abfc:	0800acf3 	.word	0x0800acf3
 800ac00:	0800ab69 	.word	0x0800ab69
 800ac04:	0800aae3 	.word	0x0800aae3
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f7ff fe91 	bl	800a930 <d_template_args>
 800ac0e:	462a      	mov	r2, r5
 800ac10:	4603      	mov	r3, r0
 800ac12:	2104      	movs	r1, #4
 800ac14:	4620      	mov	r0, r4
 800ac16:	f7fb ff8b 	bl	8006b30 <d_make_comp>
 800ac1a:	68e3      	ldr	r3, [r4, #12]
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	e6cc      	b.n	800a9ba <d_template_args+0x8a>
 800ac20:	2300      	movs	r3, #0
 800ac22:	461a      	mov	r2, r3
 800ac24:	3102      	adds	r1, #2
 800ac26:	60c1      	str	r1, [r0, #12]
 800ac28:	212f      	movs	r1, #47	; 0x2f
 800ac2a:	b005      	add	sp, #20
 800ac2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac30:	f7fb bf7e 	b.w	8006b30 <d_make_comp>
 800ac34:	f1ba 0f00 	cmp.w	sl, #0
 800ac38:	d05b      	beq.n	800acf2 <d_template_args+0x3c2>
 800ac3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac3e:	2b70      	cmp	r3, #112	; 0x70
 800ac40:	d001      	beq.n	800ac46 <d_template_args+0x316>
 800ac42:	2b6d      	cmp	r3, #109	; 0x6d
 800ac44:	d155      	bne.n	800acf2 <d_template_args+0x3c2>
 800ac46:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d151      	bne.n	800acf2 <d_template_args+0x3c2>
 800ac4e:	68e2      	ldr	r2, [r4, #12]
 800ac50:	7813      	ldrb	r3, [r2, #0]
 800ac52:	2b5f      	cmp	r3, #95	; 0x5f
 800ac54:	f000 8336 	beq.w	800b2c4 <d_template_args+0x994>
 800ac58:	f04f 0a01 	mov.w	sl, #1
 800ac5c:	2b4c      	cmp	r3, #76	; 0x4c
 800ac5e:	f000 82c1 	beq.w	800b1e4 <d_template_args+0x8b4>
 800ac62:	2b54      	cmp	r3, #84	; 0x54
 800ac64:	f000 82b0 	beq.w	800b1c8 <d_template_args+0x898>
 800ac68:	2b73      	cmp	r3, #115	; 0x73
 800ac6a:	f000 80ee 	beq.w	800ae4a <d_template_args+0x51a>
 800ac6e:	2b66      	cmp	r3, #102	; 0x66
 800ac70:	f000 818c 	beq.w	800af8c <d_template_args+0x65c>
 800ac74:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ac78:	2909      	cmp	r1, #9
 800ac7a:	f200 8402 	bhi.w	800b482 <d_template_args+0xb52>
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f002 ffb8 	bl	800dbf4 <d_unqualified_name>
 800ac84:	4681      	mov	r9, r0
 800ac86:	b118      	cbz	r0, 800ac90 <d_template_args+0x360>
 800ac88:	68e3      	ldr	r3, [r4, #12]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	2b49      	cmp	r3, #73	; 0x49
 800ac8e:	d064      	beq.n	800ad5a <d_template_args+0x42a>
 800ac90:	f1ba 0f00 	cmp.w	sl, #0
 800ac94:	f000 80a3 	beq.w	800adde <d_template_args+0x4ae>
 800ac98:	464b      	mov	r3, r9
 800ac9a:	464a      	mov	r2, r9
 800ac9c:	2137      	movs	r1, #55	; 0x37
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7fb ff46 	bl	8006b30 <d_make_comp>
 800aca4:	4603      	mov	r3, r0
 800aca6:	462a      	mov	r2, r5
 800aca8:	2135      	movs	r1, #53	; 0x35
 800acaa:	4620      	mov	r0, r4
 800acac:	f7fb ff40 	bl	8006b30 <d_make_comp>
 800acb0:	68e3      	ldr	r3, [r4, #12]
 800acb2:	4602      	mov	r2, r0
 800acb4:	e681      	b.n	800a9ba <d_template_args+0x8a>
 800acb6:	3203      	adds	r2, #3
 800acb8:	60e2      	str	r2, [r4, #12]
 800acba:	4620      	mov	r0, r4
 800acbc:	f002 fb1e 	bl	800d2fc <d_type>
 800acc0:	4681      	mov	r9, r0
 800acc2:	4620      	mov	r0, r4
 800acc4:	f002 ff96 	bl	800dbf4 <d_unqualified_name>
 800acc8:	68e3      	ldr	r3, [r4, #12]
 800acca:	4682      	mov	sl, r0
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b49      	cmp	r3, #73	; 0x49
 800acd0:	d038      	beq.n	800ad44 <d_template_args+0x414>
 800acd2:	4603      	mov	r3, r0
 800acd4:	464a      	mov	r2, r9
 800acd6:	4629      	mov	r1, r5
 800acd8:	4620      	mov	r0, r4
 800acda:	f7fb ff29 	bl	8006b30 <d_make_comp>
 800acde:	4602      	mov	r2, r0
 800ace0:	e740      	b.n	800ab64 <d_template_args+0x234>
 800ace2:	4620      	mov	r0, r4
 800ace4:	f7fc f8ae 	bl	8006e44 <d_compact_number>
 800ace8:	3001      	adds	r0, #1
 800acea:	f47f aec1 	bne.w	800aa70 <d_template_args+0x140>
 800acee:	4602      	mov	r2, r0
 800acf0:	e738      	b.n	800ab64 <d_template_args+0x234>
 800acf2:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 800acf6:	68e2      	ldr	r2, [r4, #12]
 800acf8:	d01e      	beq.n	800ad38 <d_template_args+0x408>
 800acfa:	7813      	ldrb	r3, [r2, #0]
 800acfc:	f04f 0a00 	mov.w	sl, #0
 800ad00:	e7ac      	b.n	800ac5c <d_template_args+0x32c>
 800ad02:	2b6f      	cmp	r3, #111	; 0x6f
 800ad04:	d034      	beq.n	800ad70 <d_template_args+0x440>
 800ad06:	2b69      	cmp	r3, #105	; 0x69
 800ad08:	f040 8423 	bne.w	800b552 <d_template_args+0xc22>
 800ad0c:	7893      	ldrb	r3, [r2, #2]
 800ad0e:	2b6c      	cmp	r3, #108	; 0x6c
 800ad10:	f47f ae8b 	bne.w	800aa2a <d_template_args+0xfa>
 800ad14:	2500      	movs	r5, #0
 800ad16:	68e3      	ldr	r3, [r4, #12]
 800ad18:	2145      	movs	r1, #69	; 0x45
 800ad1a:	3302      	adds	r3, #2
 800ad1c:	60e3      	str	r3, [r4, #12]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 fc7c 	bl	800b61c <d_exprlist>
 800ad24:	462a      	mov	r2, r5
 800ad26:	4603      	mov	r3, r0
 800ad28:	2130      	movs	r1, #48	; 0x30
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f7fb ff00 	bl	8006b30 <d_make_comp>
 800ad30:	68e3      	ldr	r3, [r4, #12]
 800ad32:	4602      	mov	r2, r0
 800ad34:	e641      	b.n	800a9ba <d_template_args+0x8a>
 800ad36:	68e2      	ldr	r2, [r4, #12]
 800ad38:	7813      	ldrb	r3, [r2, #0]
 800ad3a:	2b5f      	cmp	r3, #95	; 0x5f
 800ad3c:	d048      	beq.n	800add0 <d_template_args+0x4a0>
 800ad3e:	f04f 0a00 	mov.w	sl, #0
 800ad42:	e78b      	b.n	800ac5c <d_template_args+0x32c>
 800ad44:	4620      	mov	r0, r4
 800ad46:	f7ff fdf3 	bl	800a930 <d_template_args>
 800ad4a:	4652      	mov	r2, sl
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2104      	movs	r1, #4
 800ad50:	4620      	mov	r0, r4
 800ad52:	f7fb feed 	bl	8006b30 <d_make_comp>
 800ad56:	4603      	mov	r3, r0
 800ad58:	e7bc      	b.n	800acd4 <d_template_args+0x3a4>
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f7ff fde8 	bl	800a930 <d_template_args>
 800ad60:	464a      	mov	r2, r9
 800ad62:	4603      	mov	r3, r0
 800ad64:	2104      	movs	r1, #4
 800ad66:	4620      	mov	r0, r4
 800ad68:	f7fb fee2 	bl	8006b30 <d_make_comp>
 800ad6c:	4681      	mov	r9, r0
 800ad6e:	e78f      	b.n	800ac90 <d_template_args+0x360>
 800ad70:	7893      	ldrb	r3, [r2, #2]
 800ad72:	2b6e      	cmp	r3, #110	; 0x6e
 800ad74:	f47f ae59 	bne.w	800aa2a <d_template_args+0xfa>
 800ad78:	3203      	adds	r2, #3
 800ad7a:	60e2      	str	r2, [r4, #12]
 800ad7c:	e610      	b.n	800a9a0 <d_template_args+0x70>
 800ad7e:	1cd3      	adds	r3, r2, #3
 800ad80:	60e3      	str	r3, [r4, #12]
 800ad82:	78d3      	ldrb	r3, [r2, #3]
 800ad84:	2b4c      	cmp	r3, #76	; 0x4c
 800ad86:	f000 825b 	beq.w	800b240 <d_template_args+0x910>
 800ad8a:	2b54      	cmp	r3, #84	; 0x54
 800ad8c:	f000 8275 	beq.w	800b27a <d_template_args+0x94a>
 800ad90:	2b73      	cmp	r3, #115	; 0x73
 800ad92:	f000 8129 	beq.w	800afe8 <d_template_args+0x6b8>
 800ad96:	2b66      	cmp	r3, #102	; 0x66
 800ad98:	f000 81c2 	beq.w	800b120 <d_template_args+0x7f0>
 800ad9c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ada0:	2909      	cmp	r1, #9
 800ada2:	f200 83e3 	bhi.w	800b56c <d_template_args+0xc3c>
 800ada6:	4620      	mov	r0, r4
 800ada8:	f002 ff24 	bl	800dbf4 <d_unqualified_name>
 800adac:	4605      	mov	r5, r0
 800adae:	2800      	cmp	r0, #0
 800adb0:	f000 8244 	beq.w	800b23c <d_template_args+0x90c>
 800adb4:	68e3      	ldr	r3, [r4, #12]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b49      	cmp	r3, #73	; 0x49
 800adba:	f000 8286 	beq.w	800b2ca <d_template_args+0x99a>
 800adbe:	4602      	mov	r2, r0
 800adc0:	2300      	movs	r3, #0
 800adc2:	2149      	movs	r1, #73	; 0x49
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7fb feb3 	bl	8006b30 <d_make_comp>
 800adca:	68e3      	ldr	r3, [r4, #12]
 800adcc:	4602      	mov	r2, r0
 800adce:	e5f4      	b.n	800a9ba <d_template_args+0x8a>
 800add0:	3201      	adds	r2, #1
 800add2:	60e2      	str	r2, [r4, #12]
 800add4:	2145      	movs	r1, #69	; 0x45
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fc20 	bl	800b61c <d_exprlist>
 800addc:	4681      	mov	r9, r0
 800adde:	464b      	mov	r3, r9
 800ade0:	e761      	b.n	800aca6 <d_template_args+0x376>
 800ade2:	4620      	mov	r0, r4
 800ade4:	f002 fa8a 	bl	800d2fc <d_type>
 800ade8:	4603      	mov	r3, r0
 800adea:	e75c      	b.n	800aca6 <d_template_args+0x376>
 800adec:	462a      	mov	r2, r5
 800adee:	68e3      	ldr	r3, [r4, #12]
 800adf0:	e5e3      	b.n	800a9ba <d_template_args+0x8a>
 800adf2:	bf00      	nop
 800adf4:	0801640c 	.word	0x0801640c
 800adf8:	08016104 	.word	0x08016104
 800adfc:	080160fc 	.word	0x080160fc
 800ae00:	08016218 	.word	0x08016218
 800ae04:	0801621c 	.word	0x0801621c
 800ae08:	2145      	movs	r1, #69	; 0x45
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fc06 	bl	800b61c <d_exprlist>
 800ae10:	4682      	mov	sl, r0
 800ae12:	e6d1      	b.n	800abb8 <d_template_args+0x288>
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800ae1a:	2a01      	cmp	r2, #1
 800ae1c:	d903      	bls.n	800ae26 <d_template_args+0x4f6>
 800ae1e:	3b72      	subs	r3, #114	; 0x72
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	f63f aea9 	bhi.w	800ab78 <d_template_args+0x248>
 800ae26:	4620      	mov	r0, r4
 800ae28:	f002 fa68 	bl	800d2fc <d_type>
 800ae2c:	4681      	mov	r9, r0
 800ae2e:	e6a7      	b.n	800ab80 <d_template_args+0x250>
 800ae30:	4620      	mov	r0, r4
 800ae32:	f002 f891 	bl	800cf58 <d_expression_1>
 800ae36:	4681      	mov	r9, r0
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f002 f88d 	bl	800cf58 <d_expression_1>
 800ae3e:	4682      	mov	sl, r0
 800ae40:	4620      	mov	r0, r4
 800ae42:	f002 f889 	bl	800cf58 <d_expression_1>
 800ae46:	4603      	mov	r3, r0
 800ae48:	e67a      	b.n	800ab40 <d_template_args+0x210>
 800ae4a:	7853      	ldrb	r3, [r2, #1]
 800ae4c:	2b72      	cmp	r3, #114	; 0x72
 800ae4e:	f000 8266 	beq.w	800b31e <d_template_args+0x9ee>
 800ae52:	2b70      	cmp	r3, #112	; 0x70
 800ae54:	f000 82a3 	beq.w	800b39e <d_template_args+0xa6e>
 800ae58:	4620      	mov	r0, r4
 800ae5a:	f002 fe0b 	bl	800da74 <d_operator_name>
 800ae5e:	4681      	mov	r9, r0
 800ae60:	2800      	cmp	r0, #0
 800ae62:	f43f af15 	beq.w	800ac90 <d_template_args+0x360>
 800ae66:	7803      	ldrb	r3, [r0, #0]
 800ae68:	2b31      	cmp	r3, #49	; 0x31
 800ae6a:	f000 81c0 	beq.w	800b1ee <d_template_args+0x8be>
 800ae6e:	2b32      	cmp	r3, #50	; 0x32
 800ae70:	f040 8180 	bne.w	800b174 <d_template_args+0x844>
 800ae74:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	f200 80ae 	bhi.w	800afda <d_template_args+0x6aa>
 800ae7e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae82:	0004      	.short	0x0004
 800ae84:	004e0181 	.word	0x004e0181
 800ae88:	000c      	.short	0x000c
 800ae8a:	464a      	mov	r2, r9
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	2134      	movs	r1, #52	; 0x34
 800ae90:	4620      	mov	r0, r4
 800ae92:	f7fb fe4d 	bl	8006b30 <d_make_comp>
 800ae96:	4681      	mov	r9, r0
 800ae98:	e6fa      	b.n	800ac90 <d_template_args+0x360>
 800ae9a:	f04f 0b00 	mov.w	fp, #0
 800ae9e:	49cd      	ldr	r1, [pc, #820]	; (800b1d4 <d_template_args+0x8a4>)
 800aea0:	4658      	mov	r0, fp
 800aea2:	f003 ff9d 	bl	800ede0 <strcmp>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f000 82a3 	beq.w	800b3f2 <d_template_args+0xac2>
 800aeac:	f89b 2000 	ldrb.w	r2, [fp]
 800aeb0:	2a6e      	cmp	r2, #110	; 0x6e
 800aeb2:	f040 8092 	bne.w	800afda <d_template_args+0x6aa>
 800aeb6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800aeba:	2b77      	cmp	r3, #119	; 0x77
 800aebc:	d002      	beq.n	800aec4 <d_template_args+0x594>
 800aebe:	2b61      	cmp	r3, #97	; 0x61
 800aec0:	f040 808b 	bne.w	800afda <d_template_args+0x6aa>
 800aec4:	215f      	movs	r1, #95	; 0x5f
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fba8 	bl	800b61c <d_exprlist>
 800aecc:	9001      	str	r0, [sp, #4]
 800aece:	4620      	mov	r0, r4
 800aed0:	f002 fa14 	bl	800d2fc <d_type>
 800aed4:	68e3      	ldr	r3, [r4, #12]
 800aed6:	4683      	mov	fp, r0
 800aed8:	781a      	ldrb	r2, [r3, #0]
 800aeda:	2a45      	cmp	r2, #69	; 0x45
 800aedc:	f000 8317 	beq.w	800b50e <d_template_args+0xbde>
 800aee0:	2a70      	cmp	r2, #112	; 0x70
 800aee2:	f000 8309 	beq.w	800b4f8 <d_template_args+0xbc8>
 800aee6:	2a69      	cmp	r2, #105	; 0x69
 800aee8:	d177      	bne.n	800afda <d_template_args+0x6aa>
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	2b6c      	cmp	r3, #108	; 0x6c
 800aeee:	d174      	bne.n	800afda <d_template_args+0x6aa>
 800aef0:	4620      	mov	r0, r4
 800aef2:	f002 f831 	bl	800cf58 <d_expression_1>
 800aef6:	4603      	mov	r3, r0
 800aef8:	465a      	mov	r2, fp
 800aefa:	213a      	movs	r1, #58	; 0x3a
 800aefc:	4620      	mov	r0, r4
 800aefe:	f7fb fe17 	bl	8006b30 <d_make_comp>
 800af02:	9a01      	ldr	r2, [sp, #4]
 800af04:	4603      	mov	r3, r0
 800af06:	2139      	movs	r1, #57	; 0x39
 800af08:	4620      	mov	r0, r4
 800af0a:	f7fb fe11 	bl	8006b30 <d_make_comp>
 800af0e:	464a      	mov	r2, r9
 800af10:	4603      	mov	r3, r0
 800af12:	2138      	movs	r1, #56	; 0x38
 800af14:	4620      	mov	r0, r4
 800af16:	f7fb fe0b 	bl	8006b30 <d_make_comp>
 800af1a:	4681      	mov	r9, r0
 800af1c:	e6b8      	b.n	800ac90 <d_template_args+0x360>
 800af1e:	f04f 0b00 	mov.w	fp, #0
 800af22:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800af26:	6812      	ldr	r2, [r2, #0]
 800af28:	7851      	ldrb	r1, [r2, #1]
 800af2a:	2963      	cmp	r1, #99	; 0x63
 800af2c:	f000 8296 	beq.w	800b45c <d_template_args+0xb2c>
 800af30:	4620      	mov	r0, r4
 800af32:	f002 f811 	bl	800cf58 <d_expression_1>
 800af36:	9001      	str	r0, [sp, #4]
 800af38:	49a7      	ldr	r1, [pc, #668]	; (800b1d8 <d_template_args+0x8a8>)
 800af3a:	4658      	mov	r0, fp
 800af3c:	f003 ff50 	bl	800ede0 <strcmp>
 800af40:	2800      	cmp	r0, #0
 800af42:	f000 8244 	beq.w	800b3ce <d_template_args+0xa9e>
 800af46:	49a5      	ldr	r1, [pc, #660]	; (800b1dc <d_template_args+0x8ac>)
 800af48:	4658      	mov	r0, fp
 800af4a:	f003 ff49 	bl	800ede0 <strcmp>
 800af4e:	b130      	cbz	r0, 800af5e <d_template_args+0x62e>
 800af50:	4658      	mov	r0, fp
 800af52:	49a3      	ldr	r1, [pc, #652]	; (800b1e0 <d_template_args+0x8b0>)
 800af54:	f003 ff44 	bl	800ede0 <strcmp>
 800af58:	2800      	cmp	r0, #0
 800af5a:	f040 828d 	bne.w	800b478 <d_template_args+0xb48>
 800af5e:	4620      	mov	r0, r4
 800af60:	f002 fe48 	bl	800dbf4 <d_unqualified_name>
 800af64:	68e3      	ldr	r3, [r4, #12]
 800af66:	4683      	mov	fp, r0
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b49      	cmp	r3, #73	; 0x49
 800af6c:	f000 833e 	beq.w	800b5ec <d_template_args+0xcbc>
 800af70:	465b      	mov	r3, fp
 800af72:	9a01      	ldr	r2, [sp, #4]
 800af74:	2137      	movs	r1, #55	; 0x37
 800af76:	4620      	mov	r0, r4
 800af78:	f7fb fdda 	bl	8006b30 <d_make_comp>
 800af7c:	464a      	mov	r2, r9
 800af7e:	4603      	mov	r3, r0
 800af80:	2136      	movs	r1, #54	; 0x36
 800af82:	4620      	mov	r0, r4
 800af84:	f7fb fdd4 	bl	8006b30 <d_make_comp>
 800af88:	4681      	mov	r9, r0
 800af8a:	e681      	b.n	800ac90 <d_template_args+0x360>
 800af8c:	7853      	ldrb	r3, [r2, #1]
 800af8e:	2b70      	cmp	r3, #112	; 0x70
 800af90:	f47f af62 	bne.w	800ae58 <d_template_args+0x528>
 800af94:	1c93      	adds	r3, r2, #2
 800af96:	60e3      	str	r3, [r4, #12]
 800af98:	7893      	ldrb	r3, [r2, #2]
 800af9a:	2b54      	cmp	r3, #84	; 0x54
 800af9c:	f040 81b7 	bne.w	800b30e <d_template_args+0x9de>
 800afa0:	3203      	adds	r2, #3
 800afa2:	60e2      	str	r2, [r4, #12]
 800afa4:	2000      	movs	r0, #0
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	69a2      	ldr	r2, [r4, #24]
 800afaa:	4293      	cmp	r3, r2
 800afac:	da15      	bge.n	800afda <d_template_args+0x6aa>
 800afae:	6922      	ldr	r2, [r4, #16]
 800afb0:	1c59      	adds	r1, r3, #1
 800afb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800afb6:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 800afba:	6161      	str	r1, [r4, #20]
 800afbc:	f43f ae68 	beq.w	800ac90 <d_template_args+0x360>
 800afc0:	2106      	movs	r1, #6
 800afc2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800afc6:	f8c9 0004 	str.w	r0, [r9, #4]
 800afca:	e661      	b.n	800ac90 <d_template_args+0x360>
 800afcc:	2200      	movs	r2, #0
 800afce:	e4f4      	b.n	800a9ba <d_template_args+0x8a>
 800afd0:	4620      	mov	r0, r4
 800afd2:	f001 ffc1 	bl	800cf58 <d_expression_1>
 800afd6:	4682      	mov	sl, r0
 800afd8:	e5ee      	b.n	800abb8 <d_template_args+0x288>
 800afda:	f04f 0900 	mov.w	r9, #0
 800afde:	e657      	b.n	800ac90 <d_template_args+0x360>
 800afe0:	3301      	adds	r3, #1
 800afe2:	60e3      	str	r3, [r4, #12]
 800afe4:	2300      	movs	r3, #0
 800afe6:	e5ab      	b.n	800ab40 <d_template_args+0x210>
 800afe8:	7913      	ldrb	r3, [r2, #4]
 800afea:	2b72      	cmp	r3, #114	; 0x72
 800afec:	f000 81ad 	beq.w	800b34a <d_template_args+0xa1a>
 800aff0:	2b70      	cmp	r3, #112	; 0x70
 800aff2:	f000 8223 	beq.w	800b43c <d_template_args+0xb0c>
 800aff6:	4620      	mov	r0, r4
 800aff8:	f002 fd3c 	bl	800da74 <d_operator_name>
 800affc:	4681      	mov	r9, r0
 800affe:	2800      	cmp	r0, #0
 800b000:	f000 811c 	beq.w	800b23c <d_template_args+0x90c>
 800b004:	7803      	ldrb	r3, [r0, #0]
 800b006:	2b31      	cmp	r3, #49	; 0x31
 800b008:	f000 813b 	beq.w	800b282 <d_template_args+0x952>
 800b00c:	2b32      	cmp	r3, #50	; 0x32
 800b00e:	f040 811b 	bne.w	800b248 <d_template_args+0x918>
 800b012:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b016:	2b03      	cmp	r3, #3
 800b018:	f200 8110 	bhi.w	800b23c <d_template_args+0x90c>
 800b01c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b020:	011b0004 	.word	0x011b0004
 800b024:	000b004b 	.word	0x000b004b
 800b028:	464a      	mov	r2, r9
 800b02a:	2300      	movs	r3, #0
 800b02c:	2134      	movs	r1, #52	; 0x34
 800b02e:	4620      	mov	r0, r4
 800b030:	f7fb fd7e 	bl	8006b30 <d_make_comp>
 800b034:	e6c3      	b.n	800adbe <d_template_args+0x48e>
 800b036:	2500      	movs	r5, #0
 800b038:	4966      	ldr	r1, [pc, #408]	; (800b1d4 <d_template_args+0x8a4>)
 800b03a:	4628      	mov	r0, r5
 800b03c:	f003 fed0 	bl	800ede0 <strcmp>
 800b040:	2800      	cmp	r0, #0
 800b042:	f000 81ca 	beq.w	800b3da <d_template_args+0xaaa>
 800b046:	782b      	ldrb	r3, [r5, #0]
 800b048:	2b6e      	cmp	r3, #110	; 0x6e
 800b04a:	f040 80f7 	bne.w	800b23c <d_template_args+0x90c>
 800b04e:	786b      	ldrb	r3, [r5, #1]
 800b050:	2b77      	cmp	r3, #119	; 0x77
 800b052:	d002      	beq.n	800b05a <d_template_args+0x72a>
 800b054:	2b61      	cmp	r3, #97	; 0x61
 800b056:	f040 80f1 	bne.w	800b23c <d_template_args+0x90c>
 800b05a:	215f      	movs	r1, #95	; 0x5f
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 fadd 	bl	800b61c <d_exprlist>
 800b062:	4605      	mov	r5, r0
 800b064:	4620      	mov	r0, r4
 800b066:	f002 f949 	bl	800d2fc <d_type>
 800b06a:	68e3      	ldr	r3, [r4, #12]
 800b06c:	4682      	mov	sl, r0
 800b06e:	781a      	ldrb	r2, [r3, #0]
 800b070:	2a45      	cmp	r2, #69	; 0x45
 800b072:	f000 82b7 	beq.w	800b5e4 <d_template_args+0xcb4>
 800b076:	2a70      	cmp	r2, #112	; 0x70
 800b078:	f000 82a9 	beq.w	800b5ce <d_template_args+0xc9e>
 800b07c:	2a69      	cmp	r2, #105	; 0x69
 800b07e:	f040 80dd 	bne.w	800b23c <d_template_args+0x90c>
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	2b6c      	cmp	r3, #108	; 0x6c
 800b086:	f040 80d9 	bne.w	800b23c <d_template_args+0x90c>
 800b08a:	4620      	mov	r0, r4
 800b08c:	f001 ff64 	bl	800cf58 <d_expression_1>
 800b090:	4603      	mov	r3, r0
 800b092:	4652      	mov	r2, sl
 800b094:	213a      	movs	r1, #58	; 0x3a
 800b096:	4620      	mov	r0, r4
 800b098:	f7fb fd4a 	bl	8006b30 <d_make_comp>
 800b09c:	462a      	mov	r2, r5
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2139      	movs	r1, #57	; 0x39
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7fb fd44 	bl	8006b30 <d_make_comp>
 800b0a8:	464a      	mov	r2, r9
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2138      	movs	r1, #56	; 0x38
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f7fb fd3e 	bl	8006b30 <d_make_comp>
 800b0b4:	e683      	b.n	800adbe <d_template_args+0x48e>
 800b0b6:	2500      	movs	r5, #0
 800b0b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	785a      	ldrb	r2, [r3, #1]
 800b0c0:	2a63      	cmp	r2, #99	; 0x63
 800b0c2:	f000 81a8 	beq.w	800b416 <d_template_args+0xae6>
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f001 ff46 	bl	800cf58 <d_expression_1>
 800b0cc:	4682      	mov	sl, r0
 800b0ce:	4942      	ldr	r1, [pc, #264]	; (800b1d8 <d_template_args+0x8a8>)
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f003 fe85 	bl	800ede0 <strcmp>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f000 8197 	beq.w	800b40a <d_template_args+0xada>
 800b0dc:	493f      	ldr	r1, [pc, #252]	; (800b1dc <d_template_args+0x8ac>)
 800b0de:	4628      	mov	r0, r5
 800b0e0:	f003 fe7e 	bl	800ede0 <strcmp>
 800b0e4:	b130      	cbz	r0, 800b0f4 <d_template_args+0x7c4>
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	493d      	ldr	r1, [pc, #244]	; (800b1e0 <d_template_args+0x8b0>)
 800b0ea:	f003 fe79 	bl	800ede0 <strcmp>
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f040 822a 	bne.w	800b548 <d_template_args+0xc18>
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f002 fd7d 	bl	800dbf4 <d_unqualified_name>
 800b0fa:	68e3      	ldr	r3, [r4, #12]
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b49      	cmp	r3, #73	; 0x49
 800b102:	f000 820b 	beq.w	800b51c <d_template_args+0xbec>
 800b106:	462b      	mov	r3, r5
 800b108:	4652      	mov	r2, sl
 800b10a:	2137      	movs	r1, #55	; 0x37
 800b10c:	4620      	mov	r0, r4
 800b10e:	f7fb fd0f 	bl	8006b30 <d_make_comp>
 800b112:	464a      	mov	r2, r9
 800b114:	4603      	mov	r3, r0
 800b116:	2136      	movs	r1, #54	; 0x36
 800b118:	4620      	mov	r0, r4
 800b11a:	f7fb fd09 	bl	8006b30 <d_make_comp>
 800b11e:	e64e      	b.n	800adbe <d_template_args+0x48e>
 800b120:	7913      	ldrb	r3, [r2, #4]
 800b122:	2b70      	cmp	r3, #112	; 0x70
 800b124:	f47f af67 	bne.w	800aff6 <d_template_args+0x6c6>
 800b128:	1d53      	adds	r3, r2, #5
 800b12a:	60e3      	str	r3, [r4, #12]
 800b12c:	7953      	ldrb	r3, [r2, #5]
 800b12e:	2b54      	cmp	r3, #84	; 0x54
 800b130:	d17e      	bne.n	800b230 <d_template_args+0x900>
 800b132:	3206      	adds	r2, #6
 800b134:	60e2      	str	r2, [r4, #12]
 800b136:	2500      	movs	r5, #0
 800b138:	6963      	ldr	r3, [r4, #20]
 800b13a:	69a2      	ldr	r2, [r4, #24]
 800b13c:	4293      	cmp	r3, r2
 800b13e:	da7d      	bge.n	800b23c <d_template_args+0x90c>
 800b140:	6921      	ldr	r1, [r4, #16]
 800b142:	1c5a      	adds	r2, r3, #1
 800b144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b148:	6162      	str	r2, [r4, #20]
 800b14a:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800b14e:	f000 8238 	beq.w	800b5c2 <d_template_args+0xc92>
 800b152:	2006      	movs	r0, #6
 800b154:	f801 0023 	strb.w	r0, [r1, r3, lsl #2]
 800b158:	4610      	mov	r0, r2
 800b15a:	6055      	str	r5, [r2, #4]
 800b15c:	e62f      	b.n	800adbe <d_template_args+0x48e>
 800b15e:	4620      	mov	r0, r4
 800b160:	f7ff fbe6 	bl	800a930 <d_template_args>
 800b164:	4652      	mov	r2, sl
 800b166:	4603      	mov	r3, r0
 800b168:	2104      	movs	r1, #4
 800b16a:	4620      	mov	r0, r4
 800b16c:	f7fb fce0 	bl	8006b30 <d_make_comp>
 800b170:	4682      	mov	sl, r0
 800b172:	e521      	b.n	800abb8 <d_template_args+0x288>
 800b174:	2b33      	cmp	r3, #51	; 0x33
 800b176:	f47f af30 	bne.w	800afda <d_template_args+0x6aa>
 800b17a:	68e3      	ldr	r3, [r4, #12]
 800b17c:	781a      	ldrb	r2, [r3, #0]
 800b17e:	2a5f      	cmp	r2, #95	; 0x5f
 800b180:	f000 81a2 	beq.w	800b4c8 <d_template_args+0xb98>
 800b184:	f04f 0b00 	mov.w	fp, #0
 800b188:	4620      	mov	r0, r4
 800b18a:	f001 fee5 	bl	800cf58 <d_expression_1>
 800b18e:	4603      	mov	r3, r0
 800b190:	f1bb 0f00 	cmp.w	fp, #0
 800b194:	d005      	beq.n	800b1a2 <d_template_args+0x872>
 800b196:	4602      	mov	r2, r0
 800b198:	2137      	movs	r1, #55	; 0x37
 800b19a:	4620      	mov	r0, r4
 800b19c:	f7fb fcc8 	bl	8006b30 <d_make_comp>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	464a      	mov	r2, r9
 800b1a4:	2135      	movs	r1, #53	; 0x35
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f7fb fcc2 	bl	8006b30 <d_make_comp>
 800b1ac:	4681      	mov	r9, r0
 800b1ae:	e56f      	b.n	800ac90 <d_template_args+0x360>
 800b1b0:	785a      	ldrb	r2, [r3, #1]
 800b1b2:	2a69      	cmp	r2, #105	; 0x69
 800b1b4:	f47f af0a 	bne.w	800afcc <d_template_args+0x69c>
 800b1b8:	3302      	adds	r3, #2
 800b1ba:	60e3      	str	r3, [r4, #12]
 800b1bc:	2145      	movs	r1, #69	; 0x45
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 fa2c 	bl	800b61c <d_exprlist>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	e4bb      	b.n	800ab40 <d_template_args+0x210>
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f7fb fe53 	bl	8006e74 <d_template_param>
 800b1ce:	4681      	mov	r9, r0
 800b1d0:	e55e      	b.n	800ac90 <d_template_args+0x360>
 800b1d2:	bf00      	nop
 800b1d4:	08016104 	.word	0x08016104
 800b1d8:	080160fc 	.word	0x080160fc
 800b1dc:	08016218 	.word	0x08016218
 800b1e0:	0801621c 	.word	0x0801621c
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f003 fb81 	bl	800e8ec <d_expr_primary>
 800b1ea:	4681      	mov	r9, r0
 800b1ec:	e550      	b.n	800ac90 <d_template_args+0x360>
 800b1ee:	6843      	ldr	r3, [r0, #4]
 800b1f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	f8d3 b000 	ldr.w	fp, [r3]
 800b1f8:	3a02      	subs	r2, #2
 800b1fa:	440a      	add	r2, r1
 800b1fc:	6322      	str	r2, [r4, #48]	; 0x30
 800b1fe:	4658      	mov	r0, fp
 800b200:	49d0      	ldr	r1, [pc, #832]	; (800b544 <d_template_args+0xc14>)
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	f003 fdec 	bl	800ede0 <strcmp>
 800b208:	9b01      	ldr	r3, [sp, #4]
 800b20a:	2800      	cmp	r0, #0
 800b20c:	f000 8111 	beq.w	800b432 <d_template_args+0xb02>
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	2a03      	cmp	r2, #3
 800b214:	f63f aee1 	bhi.w	800afda <d_template_args+0x6aa>
 800b218:	a301      	add	r3, pc, #4	; (adr r3, 800b220 <d_template_args+0x8f0>)
 800b21a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800b21e:	bf00      	nop
 800b220:	0800ae8b 	.word	0x0800ae8b
 800b224:	0800b2df 	.word	0x0800b2df
 800b228:	0800af23 	.word	0x0800af23
 800b22c:	0800ae9f 	.word	0x0800ae9f
 800b230:	4620      	mov	r0, r4
 800b232:	f7fb fe07 	bl	8006e44 <d_compact_number>
 800b236:	1c45      	adds	r5, r0, #1
 800b238:	f47f af7e 	bne.w	800b138 <d_template_args+0x808>
 800b23c:	2000      	movs	r0, #0
 800b23e:	e5be      	b.n	800adbe <d_template_args+0x48e>
 800b240:	4620      	mov	r0, r4
 800b242:	f003 fb53 	bl	800e8ec <d_expr_primary>
 800b246:	e5ba      	b.n	800adbe <d_template_args+0x48e>
 800b248:	2b33      	cmp	r3, #51	; 0x33
 800b24a:	d1f7      	bne.n	800b23c <d_template_args+0x90c>
 800b24c:	68e3      	ldr	r3, [r4, #12]
 800b24e:	781a      	ldrb	r2, [r3, #0]
 800b250:	2a5f      	cmp	r2, #95	; 0x5f
 800b252:	f000 816e 	beq.w	800b532 <d_template_args+0xc02>
 800b256:	2500      	movs	r5, #0
 800b258:	4620      	mov	r0, r4
 800b25a:	f001 fe7d 	bl	800cf58 <d_expression_1>
 800b25e:	4603      	mov	r3, r0
 800b260:	b12d      	cbz	r5, 800b26e <d_template_args+0x93e>
 800b262:	4602      	mov	r2, r0
 800b264:	2137      	movs	r1, #55	; 0x37
 800b266:	4620      	mov	r0, r4
 800b268:	f7fb fc62 	bl	8006b30 <d_make_comp>
 800b26c:	4603      	mov	r3, r0
 800b26e:	464a      	mov	r2, r9
 800b270:	2135      	movs	r1, #53	; 0x35
 800b272:	4620      	mov	r0, r4
 800b274:	f7fb fc5c 	bl	8006b30 <d_make_comp>
 800b278:	e5a1      	b.n	800adbe <d_template_args+0x48e>
 800b27a:	4620      	mov	r0, r4
 800b27c:	f7fb fdfa 	bl	8006e74 <d_template_param>
 800b280:	e59d      	b.n	800adbe <d_template_args+0x48e>
 800b282:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b286:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b288:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b28c:	f8da 5000 	ldr.w	r5, [sl]
 800b290:	3b02      	subs	r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	6323      	str	r3, [r4, #48]	; 0x30
 800b296:	4628      	mov	r0, r5
 800b298:	49aa      	ldr	r1, [pc, #680]	; (800b544 <d_template_args+0xc14>)
 800b29a:	f003 fda1 	bl	800ede0 <strcmp>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f000 80d8 	beq.w	800b454 <d_template_args+0xb24>
 800b2a4:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b2a8:	2b03      	cmp	r3, #3
 800b2aa:	d8c7      	bhi.n	800b23c <d_template_args+0x90c>
 800b2ac:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <d_template_args+0x984>)
 800b2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b2:	bf00      	nop
 800b2b4:	0800b029 	.word	0x0800b029
 800b2b8:	0800b377 	.word	0x0800b377
 800b2bc:	0800b0b9 	.word	0x0800b0b9
 800b2c0:	0800b039 	.word	0x0800b039
 800b2c4:	3201      	adds	r2, #1
 800b2c6:	60e2      	str	r2, [r4, #12]
 800b2c8:	e517      	b.n	800acfa <d_template_args+0x3ca>
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f7ff fb30 	bl	800a930 <d_template_args>
 800b2d0:	462a      	mov	r2, r5
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2104      	movs	r1, #4
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f7fb fc2a 	bl	8006b30 <d_make_comp>
 800b2dc:	e56f      	b.n	800adbe <d_template_args+0x48e>
 800b2de:	f1bb 0f00 	cmp.w	fp, #0
 800b2e2:	f43f af4f 	beq.w	800b184 <d_template_args+0x854>
 800b2e6:	f89b 2000 	ldrb.w	r2, [fp]
 800b2ea:	2a70      	cmp	r2, #112	; 0x70
 800b2ec:	d002      	beq.n	800b2f4 <d_template_args+0x9c4>
 800b2ee:	2a6d      	cmp	r2, #109	; 0x6d
 800b2f0:	f47f af48 	bne.w	800b184 <d_template_args+0x854>
 800b2f4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	f47f af43 	bne.w	800b184 <d_template_args+0x854>
 800b2fe:	68e3      	ldr	r3, [r4, #12]
 800b300:	781a      	ldrb	r2, [r3, #0]
 800b302:	2a5f      	cmp	r2, #95	; 0x5f
 800b304:	f000 8107 	beq.w	800b516 <d_template_args+0xbe6>
 800b308:	f04f 0b01 	mov.w	fp, #1
 800b30c:	e73c      	b.n	800b188 <d_template_args+0x858>
 800b30e:	4620      	mov	r0, r4
 800b310:	f7fb fd98 	bl	8006e44 <d_compact_number>
 800b314:	3001      	adds	r0, #1
 800b316:	f47f ae46 	bne.w	800afa6 <d_template_args+0x676>
 800b31a:	4681      	mov	r9, r0
 800b31c:	e4b8      	b.n	800ac90 <d_template_args+0x360>
 800b31e:	3202      	adds	r2, #2
 800b320:	60e2      	str	r2, [r4, #12]
 800b322:	4620      	mov	r0, r4
 800b324:	f001 ffea 	bl	800d2fc <d_type>
 800b328:	4681      	mov	r9, r0
 800b32a:	4620      	mov	r0, r4
 800b32c:	f002 fc62 	bl	800dbf4 <d_unqualified_name>
 800b330:	68e3      	ldr	r3, [r4, #12]
 800b332:	4683      	mov	fp, r0
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b49      	cmp	r3, #73	; 0x49
 800b338:	d03e      	beq.n	800b3b8 <d_template_args+0xa88>
 800b33a:	4603      	mov	r3, r0
 800b33c:	464a      	mov	r2, r9
 800b33e:	2101      	movs	r1, #1
 800b340:	4620      	mov	r0, r4
 800b342:	f7fb fbf5 	bl	8006b30 <d_make_comp>
 800b346:	4681      	mov	r9, r0
 800b348:	e4a2      	b.n	800ac90 <d_template_args+0x360>
 800b34a:	3205      	adds	r2, #5
 800b34c:	60e2      	str	r2, [r4, #12]
 800b34e:	4620      	mov	r0, r4
 800b350:	f001 ffd4 	bl	800d2fc <d_type>
 800b354:	4605      	mov	r5, r0
 800b356:	4620      	mov	r0, r4
 800b358:	f002 fc4c 	bl	800dbf4 <d_unqualified_name>
 800b35c:	68e3      	ldr	r3, [r4, #12]
 800b35e:	4681      	mov	r9, r0
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	2b49      	cmp	r3, #73	; 0x49
 800b364:	f000 80b8 	beq.w	800b4d8 <d_template_args+0xba8>
 800b368:	4603      	mov	r3, r0
 800b36a:	462a      	mov	r2, r5
 800b36c:	2101      	movs	r1, #1
 800b36e:	4620      	mov	r0, r4
 800b370:	f7fb fbde 	bl	8006b30 <d_make_comp>
 800b374:	e523      	b.n	800adbe <d_template_args+0x48e>
 800b376:	2d00      	cmp	r5, #0
 800b378:	f43f af6d 	beq.w	800b256 <d_template_args+0x926>
 800b37c:	782b      	ldrb	r3, [r5, #0]
 800b37e:	2b70      	cmp	r3, #112	; 0x70
 800b380:	d002      	beq.n	800b388 <d_template_args+0xa58>
 800b382:	2b6d      	cmp	r3, #109	; 0x6d
 800b384:	f47f af67 	bne.w	800b256 <d_template_args+0x926>
 800b388:	786a      	ldrb	r2, [r5, #1]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	f47f af63 	bne.w	800b256 <d_template_args+0x926>
 800b390:	68e3      	ldr	r3, [r4, #12]
 800b392:	781a      	ldrb	r2, [r3, #0]
 800b394:	2a5f      	cmp	r2, #95	; 0x5f
 800b396:	f000 8117 	beq.w	800b5c8 <d_template_args+0xc98>
 800b39a:	2501      	movs	r5, #1
 800b39c:	e75c      	b.n	800b258 <d_template_args+0x928>
 800b39e:	3202      	adds	r2, #2
 800b3a0:	60e2      	str	r2, [r4, #12]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f001 fdd8 	bl	800cf58 <d_expression_1>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	2149      	movs	r1, #73	; 0x49
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7fb fbbe 	bl	8006b30 <d_make_comp>
 800b3b4:	4681      	mov	r9, r0
 800b3b6:	e46b      	b.n	800ac90 <d_template_args+0x360>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f7ff fab9 	bl	800a930 <d_template_args>
 800b3be:	465a      	mov	r2, fp
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2104      	movs	r1, #4
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f7fb fbb3 	bl	8006b30 <d_make_comp>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	e7b6      	b.n	800b33c <d_template_args+0xa0c>
 800b3ce:	2145      	movs	r1, #69	; 0x45
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 f923 	bl	800b61c <d_exprlist>
 800b3d6:	4683      	mov	fp, r0
 800b3d8:	e5ca      	b.n	800af70 <d_template_args+0x640>
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f001 fdbc 	bl	800cf58 <d_expression_1>
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	f001 fdb8 	bl	800cf58 <d_expression_1>
 800b3e8:	4682      	mov	sl, r0
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f001 fdb4 	bl	800cf58 <d_expression_1>
 800b3f0:	e64e      	b.n	800b090 <d_template_args+0x760>
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f001 fdb0 	bl	800cf58 <d_expression_1>
 800b3f8:	9001      	str	r0, [sp, #4]
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f001 fdac 	bl	800cf58 <d_expression_1>
 800b400:	4683      	mov	fp, r0
 800b402:	4620      	mov	r0, r4
 800b404:	f001 fda8 	bl	800cf58 <d_expression_1>
 800b408:	e575      	b.n	800aef6 <d_template_args+0x5c6>
 800b40a:	2145      	movs	r1, #69	; 0x45
 800b40c:	4620      	mov	r0, r4
 800b40e:	f000 f905 	bl	800b61c <d_exprlist>
 800b412:	4605      	mov	r5, r0
 800b414:	e677      	b.n	800b106 <d_template_args+0x7d6>
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800b41c:	2a01      	cmp	r2, #1
 800b41e:	d903      	bls.n	800b428 <d_template_args+0xaf8>
 800b420:	3b72      	subs	r3, #114	; 0x72
 800b422:	2b01      	cmp	r3, #1
 800b424:	f63f ae4f 	bhi.w	800b0c6 <d_template_args+0x796>
 800b428:	4620      	mov	r0, r4
 800b42a:	f001 ff67 	bl	800d2fc <d_type>
 800b42e:	4682      	mov	sl, r0
 800b430:	e64d      	b.n	800b0ce <d_template_args+0x79e>
 800b432:	4620      	mov	r0, r4
 800b434:	f001 ff62 	bl	800d2fc <d_type>
 800b438:	4603      	mov	r3, r0
 800b43a:	e6b2      	b.n	800b1a2 <d_template_args+0x872>
 800b43c:	3205      	adds	r2, #5
 800b43e:	60e2      	str	r2, [r4, #12]
 800b440:	4620      	mov	r0, r4
 800b442:	f001 fd89 	bl	800cf58 <d_expression_1>
 800b446:	2300      	movs	r3, #0
 800b448:	4602      	mov	r2, r0
 800b44a:	2149      	movs	r1, #73	; 0x49
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7fb fb6f 	bl	8006b30 <d_make_comp>
 800b452:	e4b4      	b.n	800adbe <d_template_args+0x48e>
 800b454:	4620      	mov	r0, r4
 800b456:	f001 ff51 	bl	800d2fc <d_type>
 800b45a:	e707      	b.n	800b26c <d_template_args+0x93c>
 800b45c:	7812      	ldrb	r2, [r2, #0]
 800b45e:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800b462:	2901      	cmp	r1, #1
 800b464:	d903      	bls.n	800b46e <d_template_args+0xb3e>
 800b466:	3a72      	subs	r2, #114	; 0x72
 800b468:	2a01      	cmp	r2, #1
 800b46a:	f63f ad61 	bhi.w	800af30 <d_template_args+0x600>
 800b46e:	4620      	mov	r0, r4
 800b470:	f001 ff44 	bl	800d2fc <d_type>
 800b474:	9001      	str	r0, [sp, #4]
 800b476:	e55f      	b.n	800af38 <d_template_args+0x608>
 800b478:	4620      	mov	r0, r4
 800b47a:	f001 fd6d 	bl	800cf58 <d_expression_1>
 800b47e:	4683      	mov	fp, r0
 800b480:	e576      	b.n	800af70 <d_template_args+0x640>
 800b482:	2b6f      	cmp	r3, #111	; 0x6f
 800b484:	d018      	beq.n	800b4b8 <d_template_args+0xb88>
 800b486:	2b69      	cmp	r3, #105	; 0x69
 800b488:	f040 80bb 	bne.w	800b602 <d_template_args+0xcd2>
 800b48c:	7853      	ldrb	r3, [r2, #1]
 800b48e:	2b6c      	cmp	r3, #108	; 0x6c
 800b490:	f47f ace2 	bne.w	800ae58 <d_template_args+0x528>
 800b494:	f04f 0900 	mov.w	r9, #0
 800b498:	68e3      	ldr	r3, [r4, #12]
 800b49a:	2145      	movs	r1, #69	; 0x45
 800b49c:	3302      	adds	r3, #2
 800b49e:	60e3      	str	r3, [r4, #12]
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 f8bb 	bl	800b61c <d_exprlist>
 800b4a6:	464a      	mov	r2, r9
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2130      	movs	r1, #48	; 0x30
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f7fb fb3f 	bl	8006b30 <d_make_comp>
 800b4b2:	4681      	mov	r9, r0
 800b4b4:	f7ff bbec 	b.w	800ac90 <d_template_args+0x360>
 800b4b8:	7853      	ldrb	r3, [r2, #1]
 800b4ba:	2b6e      	cmp	r3, #110	; 0x6e
 800b4bc:	f47f accc 	bne.w	800ae58 <d_template_args+0x528>
 800b4c0:	3202      	adds	r2, #2
 800b4c2:	60e2      	str	r2, [r4, #12]
 800b4c4:	f7ff bbdb 	b.w	800ac7e <d_template_args+0x34e>
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	60e3      	str	r3, [r4, #12]
 800b4cc:	2145      	movs	r1, #69	; 0x45
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f000 f8a4 	bl	800b61c <d_exprlist>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	e664      	b.n	800b1a2 <d_template_args+0x872>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f7ff fa29 	bl	800a930 <d_template_args>
 800b4de:	464a      	mov	r2, r9
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2104      	movs	r1, #4
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f7fb fb23 	bl	8006b30 <d_make_comp>
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f7fb fb1d 	bl	8006b30 <d_make_comp>
 800b4f6:	e462      	b.n	800adbe <d_template_args+0x48e>
 800b4f8:	785a      	ldrb	r2, [r3, #1]
 800b4fa:	2a69      	cmp	r2, #105	; 0x69
 800b4fc:	f47f ad6d 	bne.w	800afda <d_template_args+0x6aa>
 800b500:	3302      	adds	r3, #2
 800b502:	60e3      	str	r3, [r4, #12]
 800b504:	2145      	movs	r1, #69	; 0x45
 800b506:	4620      	mov	r0, r4
 800b508:	f000 f888 	bl	800b61c <d_exprlist>
 800b50c:	e4f3      	b.n	800aef6 <d_template_args+0x5c6>
 800b50e:	3301      	adds	r3, #1
 800b510:	60e3      	str	r3, [r4, #12]
 800b512:	2000      	movs	r0, #0
 800b514:	e4ef      	b.n	800aef6 <d_template_args+0x5c6>
 800b516:	3301      	adds	r3, #1
 800b518:	60e3      	str	r3, [r4, #12]
 800b51a:	e633      	b.n	800b184 <d_template_args+0x854>
 800b51c:	4620      	mov	r0, r4
 800b51e:	f7ff fa07 	bl	800a930 <d_template_args>
 800b522:	462a      	mov	r2, r5
 800b524:	4603      	mov	r3, r0
 800b526:	2104      	movs	r1, #4
 800b528:	4620      	mov	r0, r4
 800b52a:	f7fb fb01 	bl	8006b30 <d_make_comp>
 800b52e:	4605      	mov	r5, r0
 800b530:	e5e9      	b.n	800b106 <d_template_args+0x7d6>
 800b532:	3301      	adds	r3, #1
 800b534:	60e3      	str	r3, [r4, #12]
 800b536:	2145      	movs	r1, #69	; 0x45
 800b538:	4620      	mov	r0, r4
 800b53a:	f000 f86f 	bl	800b61c <d_exprlist>
 800b53e:	4603      	mov	r3, r0
 800b540:	e695      	b.n	800b26e <d_template_args+0x93e>
 800b542:	bf00      	nop
 800b544:	0801640c 	.word	0x0801640c
 800b548:	4620      	mov	r0, r4
 800b54a:	f001 fd05 	bl	800cf58 <d_expression_1>
 800b54e:	4605      	mov	r5, r0
 800b550:	e5d9      	b.n	800b106 <d_template_args+0x7d6>
 800b552:	2b74      	cmp	r3, #116	; 0x74
 800b554:	f47f aa69 	bne.w	800aa2a <d_template_args+0xfa>
 800b558:	7893      	ldrb	r3, [r2, #2]
 800b55a:	2b6c      	cmp	r3, #108	; 0x6c
 800b55c:	f47f aa65 	bne.w	800aa2a <d_template_args+0xfa>
 800b560:	4620      	mov	r0, r4
 800b562:	f001 fecb 	bl	800d2fc <d_type>
 800b566:	4605      	mov	r5, r0
 800b568:	f7ff bbd5 	b.w	800ad16 <d_template_args+0x3e6>
 800b56c:	2b6f      	cmp	r3, #111	; 0x6f
 800b56e:	d014      	beq.n	800b59a <d_template_args+0xc6a>
 800b570:	2b69      	cmp	r3, #105	; 0x69
 800b572:	d11a      	bne.n	800b5aa <d_template_args+0xc7a>
 800b574:	7913      	ldrb	r3, [r2, #4]
 800b576:	2b6c      	cmp	r3, #108	; 0x6c
 800b578:	f47f ad3d 	bne.w	800aff6 <d_template_args+0x6c6>
 800b57c:	2500      	movs	r5, #0
 800b57e:	68e3      	ldr	r3, [r4, #12]
 800b580:	2145      	movs	r1, #69	; 0x45
 800b582:	3302      	adds	r3, #2
 800b584:	60e3      	str	r3, [r4, #12]
 800b586:	4620      	mov	r0, r4
 800b588:	f000 f848 	bl	800b61c <d_exprlist>
 800b58c:	462a      	mov	r2, r5
 800b58e:	4603      	mov	r3, r0
 800b590:	2130      	movs	r1, #48	; 0x30
 800b592:	4620      	mov	r0, r4
 800b594:	f7fb facc 	bl	8006b30 <d_make_comp>
 800b598:	e411      	b.n	800adbe <d_template_args+0x48e>
 800b59a:	7913      	ldrb	r3, [r2, #4]
 800b59c:	2b6e      	cmp	r3, #110	; 0x6e
 800b59e:	f47f ad2a 	bne.w	800aff6 <d_template_args+0x6c6>
 800b5a2:	3205      	adds	r2, #5
 800b5a4:	60e2      	str	r2, [r4, #12]
 800b5a6:	f7ff bbfe 	b.w	800ada6 <d_template_args+0x476>
 800b5aa:	2b74      	cmp	r3, #116	; 0x74
 800b5ac:	f47f ad23 	bne.w	800aff6 <d_template_args+0x6c6>
 800b5b0:	7913      	ldrb	r3, [r2, #4]
 800b5b2:	2b6c      	cmp	r3, #108	; 0x6c
 800b5b4:	f47f ad1f 	bne.w	800aff6 <d_template_args+0x6c6>
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f001 fe9f 	bl	800d2fc <d_type>
 800b5be:	4605      	mov	r5, r0
 800b5c0:	e7dd      	b.n	800b57e <d_template_args+0xc4e>
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	f7ff bbfb 	b.w	800adbe <d_template_args+0x48e>
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	60e3      	str	r3, [r4, #12]
 800b5cc:	e643      	b.n	800b256 <d_template_args+0x926>
 800b5ce:	785a      	ldrb	r2, [r3, #1]
 800b5d0:	2a69      	cmp	r2, #105	; 0x69
 800b5d2:	f47f ae33 	bne.w	800b23c <d_template_args+0x90c>
 800b5d6:	3302      	adds	r3, #2
 800b5d8:	60e3      	str	r3, [r4, #12]
 800b5da:	2145      	movs	r1, #69	; 0x45
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f000 f81d 	bl	800b61c <d_exprlist>
 800b5e2:	e555      	b.n	800b090 <d_template_args+0x760>
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	60e3      	str	r3, [r4, #12]
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	e551      	b.n	800b090 <d_template_args+0x760>
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f7ff f99f 	bl	800a930 <d_template_args>
 800b5f2:	465a      	mov	r2, fp
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2104      	movs	r1, #4
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f7fb fa99 	bl	8006b30 <d_make_comp>
 800b5fe:	4683      	mov	fp, r0
 800b600:	e4b6      	b.n	800af70 <d_template_args+0x640>
 800b602:	2b74      	cmp	r3, #116	; 0x74
 800b604:	f47f ac28 	bne.w	800ae58 <d_template_args+0x528>
 800b608:	7853      	ldrb	r3, [r2, #1]
 800b60a:	2b6c      	cmp	r3, #108	; 0x6c
 800b60c:	f47f ac24 	bne.w	800ae58 <d_template_args+0x528>
 800b610:	4620      	mov	r0, r4
 800b612:	f001 fe73 	bl	800d2fc <d_type>
 800b616:	4681      	mov	r9, r0
 800b618:	e73e      	b.n	800b498 <d_template_args+0xb68>
 800b61a:	bf00      	nop

0800b61c <d_exprlist>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	68c2      	ldr	r2, [r0, #12]
 800b622:	b085      	sub	sp, #20
 800b624:	7815      	ldrb	r5, [r2, #0]
 800b626:	2300      	movs	r3, #0
 800b628:	428d      	cmp	r5, r1
 800b62a:	4604      	mov	r4, r0
 800b62c:	9303      	str	r3, [sp, #12]
 800b62e:	f000 8261 	beq.w	800baf4 <d_exprlist+0x4d8>
 800b632:	460f      	mov	r7, r1
 800b634:	ae03      	add	r6, sp, #12
 800b636:	e022      	b.n	800b67e <d_exprlist+0x62>
 800b638:	2b66      	cmp	r3, #102	; 0x66
 800b63a:	d04b      	beq.n	800b6d4 <d_exprlist+0xb8>
 800b63c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b640:	2909      	cmp	r1, #9
 800b642:	f201 8454 	bhi.w	800ceee <d_exprlist+0x18d2>
 800b646:	4620      	mov	r0, r4
 800b648:	f002 fad4 	bl	800dbf4 <d_unqualified_name>
 800b64c:	4680      	mov	r8, r0
 800b64e:	2800      	cmp	r0, #0
 800b650:	d064      	beq.n	800b71c <d_exprlist+0x100>
 800b652:	68e3      	ldr	r3, [r4, #12]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	2b49      	cmp	r3, #73	; 0x49
 800b658:	f000 808b 	beq.w	800b772 <d_exprlist+0x156>
 800b65c:	4602      	mov	r2, r0
 800b65e:	6365      	str	r5, [r4, #52]	; 0x34
 800b660:	2300      	movs	r3, #0
 800b662:	212e      	movs	r1, #46	; 0x2e
 800b664:	4620      	mov	r0, r4
 800b666:	f7fb fa63 	bl	8006b30 <d_make_comp>
 800b66a:	6030      	str	r0, [r6, #0]
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d056      	beq.n	800b71e <d_exprlist+0x102>
 800b670:	68e2      	ldr	r2, [r4, #12]
 800b672:	f100 0608 	add.w	r6, r0, #8
 800b676:	7813      	ldrb	r3, [r2, #0]
 800b678:	42bb      	cmp	r3, r7
 800b67a:	f000 8179 	beq.w	800b970 <d_exprlist+0x354>
 800b67e:	f04f 0801 	mov.w	r8, #1
 800b682:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b684:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800b688:	7813      	ldrb	r3, [r2, #0]
 800b68a:	2b4c      	cmp	r3, #76	; 0x4c
 800b68c:	d04b      	beq.n	800b726 <d_exprlist+0x10a>
 800b68e:	2b54      	cmp	r3, #84	; 0x54
 800b690:	d051      	beq.n	800b736 <d_exprlist+0x11a>
 800b692:	2b73      	cmp	r3, #115	; 0x73
 800b694:	d1d0      	bne.n	800b638 <d_exprlist+0x1c>
 800b696:	7853      	ldrb	r3, [r2, #1]
 800b698:	2b72      	cmp	r3, #114	; 0x72
 800b69a:	f000 8152 	beq.w	800b942 <d_exprlist+0x326>
 800b69e:	2b70      	cmp	r3, #112	; 0x70
 800b6a0:	f000 816c 	beq.w	800b97c <d_exprlist+0x360>
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f002 f9e5 	bl	800da74 <d_operator_name>
 800b6aa:	4680      	mov	r8, r0
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d035      	beq.n	800b71c <d_exprlist+0x100>
 800b6b0:	f890 a000 	ldrb.w	sl, [r0]
 800b6b4:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b6b8:	d042      	beq.n	800b740 <d_exprlist+0x124>
 800b6ba:	f1ba 0f32 	cmp.w	sl, #50	; 0x32
 800b6be:	d129      	bne.n	800b714 <d_exprlist+0xf8>
 800b6c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d829      	bhi.n	800b71c <d_exprlist+0x100>
 800b6c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b6cc:	01080062 	.word	0x01080062
 800b6d0:	006a00ac 	.word	0x006a00ac
 800b6d4:	7853      	ldrb	r3, [r2, #1]
 800b6d6:	2b70      	cmp	r3, #112	; 0x70
 800b6d8:	d1e4      	bne.n	800b6a4 <d_exprlist+0x88>
 800b6da:	1c93      	adds	r3, r2, #2
 800b6dc:	60e3      	str	r3, [r4, #12]
 800b6de:	7893      	ldrb	r3, [r2, #2]
 800b6e0:	2b54      	cmp	r3, #84	; 0x54
 800b6e2:	d051      	beq.n	800b788 <d_exprlist+0x16c>
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7fb fbad 	bl	8006e44 <d_compact_number>
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	d016      	beq.n	800b71c <d_exprlist+0x100>
 800b6ee:	6963      	ldr	r3, [r4, #20]
 800b6f0:	69a2      	ldr	r2, [r4, #24]
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	da12      	bge.n	800b71c <d_exprlist+0x100>
 800b6f6:	6922      	ldr	r2, [r4, #16]
 800b6f8:	1c59      	adds	r1, r3, #1
 800b6fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b6fe:	6161      	str	r1, [r4, #20]
 800b700:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800b704:	d00a      	beq.n	800b71c <d_exprlist+0x100>
 800b706:	f04f 0e06 	mov.w	lr, #6
 800b70a:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800b70e:	460a      	mov	r2, r1
 800b710:	6048      	str	r0, [r1, #4]
 800b712:	e7a4      	b.n	800b65e <d_exprlist+0x42>
 800b714:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 800b718:	f000 8158 	beq.w	800b9cc <d_exprlist+0x3b0>
 800b71c:	6365      	str	r5, [r4, #52]	; 0x34
 800b71e:	2000      	movs	r0, #0
 800b720:	b005      	add	sp, #20
 800b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b726:	4620      	mov	r0, r4
 800b728:	f003 f8e0 	bl	800e8ec <d_expr_primary>
 800b72c:	4602      	mov	r2, r0
 800b72e:	6365      	str	r5, [r4, #52]	; 0x34
 800b730:	2a00      	cmp	r2, #0
 800b732:	d195      	bne.n	800b660 <d_exprlist+0x44>
 800b734:	e7f3      	b.n	800b71e <d_exprlist+0x102>
 800b736:	4620      	mov	r0, r4
 800b738:	f7fb fb9c 	bl	8006e74 <d_template_param>
 800b73c:	4602      	mov	r2, r0
 800b73e:	e7f6      	b.n	800b72e <d_exprlist+0x112>
 800b740:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800b744:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b746:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b74a:	f8db 9000 	ldr.w	r9, [fp]
 800b74e:	3b02      	subs	r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	6323      	str	r3, [r4, #48]	; 0x30
 800b754:	4648      	mov	r0, r9
 800b756:	49ae      	ldr	r1, [pc, #696]	; (800ba10 <d_exprlist+0x3f4>)
 800b758:	f003 fb42 	bl	800ede0 <strcmp>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f000 8152 	beq.w	800ba06 <d_exprlist+0x3ea>
 800b762:	f8db 300c 	ldr.w	r3, [fp, #12]
 800b766:	2b03      	cmp	r3, #3
 800b768:	d8d8      	bhi.n	800b71c <d_exprlist+0x100>
 800b76a:	e8df f003 	tbb	[pc, r3]
 800b76e:	ad11      	.short	0xad11
 800b770:	1b5d      	.short	0x1b5d
 800b772:	4620      	mov	r0, r4
 800b774:	f7ff f8dc 	bl	800a930 <d_template_args>
 800b778:	4642      	mov	r2, r8
 800b77a:	4603      	mov	r3, r0
 800b77c:	2104      	movs	r1, #4
 800b77e:	4620      	mov	r0, r4
 800b780:	f7fb f9d6 	bl	8006b30 <d_make_comp>
 800b784:	4602      	mov	r2, r0
 800b786:	e7d2      	b.n	800b72e <d_exprlist+0x112>
 800b788:	3203      	adds	r2, #3
 800b78a:	60e2      	str	r2, [r4, #12]
 800b78c:	2000      	movs	r0, #0
 800b78e:	e7ae      	b.n	800b6ee <d_exprlist+0xd2>
 800b790:	4642      	mov	r2, r8
 800b792:	2300      	movs	r3, #0
 800b794:	2134      	movs	r1, #52	; 0x34
 800b796:	4620      	mov	r0, r4
 800b798:	f7fb f9ca 	bl	8006b30 <d_make_comp>
 800b79c:	4602      	mov	r2, r0
 800b79e:	e7c6      	b.n	800b72e <d_exprlist+0x112>
 800b7a0:	f04f 0900 	mov.w	r9, #0
 800b7a4:	499b      	ldr	r1, [pc, #620]	; (800ba14 <d_exprlist+0x3f8>)
 800b7a6:	4648      	mov	r0, r9
 800b7a8:	f003 fb1a 	bl	800ede0 <strcmp>
 800b7ac:	4683      	mov	fp, r0
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f000 8138 	beq.w	800ba24 <d_exprlist+0x408>
 800b7b4:	f899 3000 	ldrb.w	r3, [r9]
 800b7b8:	2b6e      	cmp	r3, #110	; 0x6e
 800b7ba:	d1af      	bne.n	800b71c <d_exprlist+0x100>
 800b7bc:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b7c0:	2b77      	cmp	r3, #119	; 0x77
 800b7c2:	d001      	beq.n	800b7c8 <d_exprlist+0x1ac>
 800b7c4:	2b61      	cmp	r3, #97	; 0x61
 800b7c6:	d1a9      	bne.n	800b71c <d_exprlist+0x100>
 800b7c8:	215f      	movs	r1, #95	; 0x5f
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7ff ff26 	bl	800b61c <d_exprlist>
 800b7d0:	4682      	mov	sl, r0
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f001 fd92 	bl	800d2fc <d_type>
 800b7d8:	68e3      	ldr	r3, [r4, #12]
 800b7da:	4681      	mov	r9, r0
 800b7dc:	781a      	ldrb	r2, [r3, #0]
 800b7de:	2a45      	cmp	r2, #69	; 0x45
 800b7e0:	f000 81cf 	beq.w	800bb82 <d_exprlist+0x566>
 800b7e4:	2a70      	cmp	r2, #112	; 0x70
 800b7e6:	f000 84c9 	beq.w	800c17c <d_exprlist+0xb60>
 800b7ea:	2a69      	cmp	r2, #105	; 0x69
 800b7ec:	d196      	bne.n	800b71c <d_exprlist+0x100>
 800b7ee:	785b      	ldrb	r3, [r3, #1]
 800b7f0:	2b6c      	cmp	r3, #108	; 0x6c
 800b7f2:	d193      	bne.n	800b71c <d_exprlist+0x100>
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f001 fbaf 	bl	800cf58 <d_expression_1>
 800b7fa:	4683      	mov	fp, r0
 800b7fc:	465b      	mov	r3, fp
 800b7fe:	464a      	mov	r2, r9
 800b800:	213a      	movs	r1, #58	; 0x3a
 800b802:	4620      	mov	r0, r4
 800b804:	f7fb f994 	bl	8006b30 <d_make_comp>
 800b808:	4652      	mov	r2, sl
 800b80a:	4603      	mov	r3, r0
 800b80c:	2139      	movs	r1, #57	; 0x39
 800b80e:	4620      	mov	r0, r4
 800b810:	f7fb f98e 	bl	8006b30 <d_make_comp>
 800b814:	4642      	mov	r2, r8
 800b816:	4603      	mov	r3, r0
 800b818:	2138      	movs	r1, #56	; 0x38
 800b81a:	4620      	mov	r0, r4
 800b81c:	f7fb f988 	bl	8006b30 <d_make_comp>
 800b820:	4602      	mov	r2, r0
 800b822:	e784      	b.n	800b72e <d_exprlist+0x112>
 800b824:	f04f 0900 	mov.w	r9, #0
 800b828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	785a      	ldrb	r2, [r3, #1]
 800b830:	2a63      	cmp	r2, #99	; 0x63
 800b832:	f000 8146 	beq.w	800bac2 <d_exprlist+0x4a6>
 800b836:	68e1      	ldr	r1, [r4, #12]
 800b838:	780b      	ldrb	r3, [r1, #0]
 800b83a:	2b4c      	cmp	r3, #76	; 0x4c
 800b83c:	f000 861e 	beq.w	800c47c <d_exprlist+0xe60>
 800b840:	2b54      	cmp	r3, #84	; 0x54
 800b842:	f000 81fd 	beq.w	800bc40 <d_exprlist+0x624>
 800b846:	2b73      	cmp	r3, #115	; 0x73
 800b848:	f000 8437 	beq.w	800c0ba <d_exprlist+0xa9e>
 800b84c:	2b66      	cmp	r3, #102	; 0x66
 800b84e:	f000 8475 	beq.w	800c13c <d_exprlist+0xb20>
 800b852:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b856:	2a09      	cmp	r2, #9
 800b858:	f200 81bf 	bhi.w	800bbda <d_exprlist+0x5be>
 800b85c:	4620      	mov	r0, r4
 800b85e:	f002 f9c9 	bl	800dbf4 <d_unqualified_name>
 800b862:	4682      	mov	sl, r0
 800b864:	2800      	cmp	r0, #0
 800b866:	f000 84a8 	beq.w	800c1ba <d_exprlist+0xb9e>
 800b86a:	68e3      	ldr	r3, [r4, #12]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2b49      	cmp	r3, #73	; 0x49
 800b870:	f000 870e 	beq.w	800c690 <d_exprlist+0x1074>
 800b874:	4968      	ldr	r1, [pc, #416]	; (800ba18 <d_exprlist+0x3fc>)
 800b876:	4648      	mov	r0, r9
 800b878:	f003 fab2 	bl	800ede0 <strcmp>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	f000 811a 	beq.w	800bab6 <d_exprlist+0x49a>
 800b882:	4966      	ldr	r1, [pc, #408]	; (800ba1c <d_exprlist+0x400>)
 800b884:	4648      	mov	r0, r9
 800b886:	f003 faab 	bl	800ede0 <strcmp>
 800b88a:	b130      	cbz	r0, 800b89a <d_exprlist+0x27e>
 800b88c:	4648      	mov	r0, r9
 800b88e:	4964      	ldr	r1, [pc, #400]	; (800ba20 <d_exprlist+0x404>)
 800b890:	f003 faa6 	bl	800ede0 <strcmp>
 800b894:	2800      	cmp	r0, #0
 800b896:	f040 816f 	bne.w	800bb78 <d_exprlist+0x55c>
 800b89a:	4620      	mov	r0, r4
 800b89c:	f002 f9aa 	bl	800dbf4 <d_unqualified_name>
 800b8a0:	68e3      	ldr	r3, [r4, #12]
 800b8a2:	4681      	mov	r9, r0
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b49      	cmp	r3, #73	; 0x49
 800b8a8:	f000 843c 	beq.w	800c124 <d_exprlist+0xb08>
 800b8ac:	464b      	mov	r3, r9
 800b8ae:	4652      	mov	r2, sl
 800b8b0:	2137      	movs	r1, #55	; 0x37
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7fb f93c 	bl	8006b30 <d_make_comp>
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2136      	movs	r1, #54	; 0x36
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f7fb f936 	bl	8006b30 <d_make_comp>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	e732      	b.n	800b72e <d_exprlist+0x112>
 800b8c8:	f1b9 0f00 	cmp.w	r9, #0
 800b8cc:	d006      	beq.n	800b8dc <d_exprlist+0x2c0>
 800b8ce:	f899 3000 	ldrb.w	r3, [r9]
 800b8d2:	2b70      	cmp	r3, #112	; 0x70
 800b8d4:	f000 8081 	beq.w	800b9da <d_exprlist+0x3be>
 800b8d8:	2b6d      	cmp	r3, #109	; 0x6d
 800b8da:	d07e      	beq.n	800b9da <d_exprlist+0x3be>
 800b8dc:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 800b8e0:	68e1      	ldr	r1, [r4, #12]
 800b8e2:	d074      	beq.n	800b9ce <d_exprlist+0x3b2>
 800b8e4:	780b      	ldrb	r3, [r1, #0]
 800b8e6:	f04f 0a00 	mov.w	sl, #0
 800b8ea:	2b4c      	cmp	r3, #76	; 0x4c
 800b8ec:	f000 8453 	beq.w	800c196 <d_exprlist+0xb7a>
 800b8f0:	2b54      	cmp	r3, #84	; 0x54
 800b8f2:	f000 8466 	beq.w	800c1c2 <d_exprlist+0xba6>
 800b8f6:	2b73      	cmp	r3, #115	; 0x73
 800b8f8:	f000 8105 	beq.w	800bb06 <d_exprlist+0x4ea>
 800b8fc:	2b66      	cmp	r3, #102	; 0x66
 800b8fe:	f000 811c 	beq.w	800bb3a <d_exprlist+0x51e>
 800b902:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b906:	2a09      	cmp	r2, #9
 800b908:	f201 82b2 	bhi.w	800ce70 <d_exprlist+0x1854>
 800b90c:	4620      	mov	r0, r4
 800b90e:	f002 f971 	bl	800dbf4 <d_unqualified_name>
 800b912:	4681      	mov	r9, r0
 800b914:	b120      	cbz	r0, 800b920 <d_exprlist+0x304>
 800b916:	68e3      	ldr	r3, [r4, #12]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b49      	cmp	r3, #73	; 0x49
 800b91c:	f000 8185 	beq.w	800bc2a <d_exprlist+0x60e>
 800b920:	f1ba 0f00 	cmp.w	sl, #0
 800b924:	d06d      	beq.n	800ba02 <d_exprlist+0x3e6>
 800b926:	464b      	mov	r3, r9
 800b928:	464a      	mov	r2, r9
 800b92a:	2137      	movs	r1, #55	; 0x37
 800b92c:	4620      	mov	r0, r4
 800b92e:	f7fb f8ff 	bl	8006b30 <d_make_comp>
 800b932:	4603      	mov	r3, r0
 800b934:	4642      	mov	r2, r8
 800b936:	2135      	movs	r1, #53	; 0x35
 800b938:	4620      	mov	r0, r4
 800b93a:	f7fb f8f9 	bl	8006b30 <d_make_comp>
 800b93e:	4602      	mov	r2, r0
 800b940:	e6f5      	b.n	800b72e <d_exprlist+0x112>
 800b942:	3202      	adds	r2, #2
 800b944:	60e2      	str	r2, [r4, #12]
 800b946:	4620      	mov	r0, r4
 800b948:	f001 fcd8 	bl	800d2fc <d_type>
 800b94c:	4681      	mov	r9, r0
 800b94e:	4620      	mov	r0, r4
 800b950:	f002 f950 	bl	800dbf4 <d_unqualified_name>
 800b954:	68e3      	ldr	r3, [r4, #12]
 800b956:	4682      	mov	sl, r0
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b49      	cmp	r3, #73	; 0x49
 800b95c:	f000 80bf 	beq.w	800bade <d_exprlist+0x4c2>
 800b960:	4603      	mov	r3, r0
 800b962:	464a      	mov	r2, r9
 800b964:	4641      	mov	r1, r8
 800b966:	4620      	mov	r0, r4
 800b968:	f7fb f8e2 	bl	8006b30 <d_make_comp>
 800b96c:	4602      	mov	r2, r0
 800b96e:	e6de      	b.n	800b72e <d_exprlist+0x112>
 800b970:	9803      	ldr	r0, [sp, #12]
 800b972:	3201      	adds	r2, #1
 800b974:	60e2      	str	r2, [r4, #12]
 800b976:	b005      	add	sp, #20
 800b978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97c:	1c91      	adds	r1, r2, #2
 800b97e:	60e1      	str	r1, [r4, #12]
 800b980:	7893      	ldrb	r3, [r2, #2]
 800b982:	2b4c      	cmp	r3, #76	; 0x4c
 800b984:	f000 814c 	beq.w	800bc20 <d_exprlist+0x604>
 800b988:	2b54      	cmp	r3, #84	; 0x54
 800b98a:	f000 857d 	beq.w	800c488 <d_exprlist+0xe6c>
 800b98e:	2b73      	cmp	r3, #115	; 0x73
 800b990:	f000 82e7 	beq.w	800bf62 <d_exprlist+0x946>
 800b994:	2b66      	cmp	r3, #102	; 0x66
 800b996:	f000 83a5 	beq.w	800c0e4 <d_exprlist+0xac8>
 800b99a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800b99e:	2809      	cmp	r0, #9
 800b9a0:	f201 820c 	bhi.w	800cdbc <d_exprlist+0x17a0>
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f002 f925 	bl	800dbf4 <d_unqualified_name>
 800b9aa:	4680      	mov	r8, r0
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	f000 83fd 	beq.w	800c1ac <d_exprlist+0xb90>
 800b9b2:	68e3      	ldr	r3, [r4, #12]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	2b49      	cmp	r3, #73	; 0x49
 800b9b8:	f000 8639 	beq.w	800c62e <d_exprlist+0x1012>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2149      	movs	r1, #73	; 0x49
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f7fb f8b4 	bl	8006b30 <d_make_comp>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	e6b0      	b.n	800b72e <d_exprlist+0x112>
 800b9cc:	68e1      	ldr	r1, [r4, #12]
 800b9ce:	780b      	ldrb	r3, [r1, #0]
 800b9d0:	2b5f      	cmp	r3, #95	; 0x5f
 800b9d2:	d00f      	beq.n	800b9f4 <d_exprlist+0x3d8>
 800b9d4:	f04f 0a00 	mov.w	sl, #0
 800b9d8:	e787      	b.n	800b8ea <d_exprlist+0x2ce>
 800b9da:	f899 2001 	ldrb.w	r2, [r9, #1]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	f47f af7c 	bne.w	800b8dc <d_exprlist+0x2c0>
 800b9e4:	68e1      	ldr	r1, [r4, #12]
 800b9e6:	780b      	ldrb	r3, [r1, #0]
 800b9e8:	2b5f      	cmp	r3, #95	; 0x5f
 800b9ea:	f000 85b8 	beq.w	800c55e <d_exprlist+0xf42>
 800b9ee:	f04f 0a01 	mov.w	sl, #1
 800b9f2:	e77a      	b.n	800b8ea <d_exprlist+0x2ce>
 800b9f4:	3101      	adds	r1, #1
 800b9f6:	60e1      	str	r1, [r4, #12]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	2145      	movs	r1, #69	; 0x45
 800b9fc:	f7ff fe0e 	bl	800b61c <d_exprlist>
 800ba00:	4681      	mov	r9, r0
 800ba02:	464b      	mov	r3, r9
 800ba04:	e796      	b.n	800b934 <d_exprlist+0x318>
 800ba06:	4620      	mov	r0, r4
 800ba08:	f001 fc78 	bl	800d2fc <d_type>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	e791      	b.n	800b934 <d_exprlist+0x318>
 800ba10:	0801640c 	.word	0x0801640c
 800ba14:	08016104 	.word	0x08016104
 800ba18:	080160fc 	.word	0x080160fc
 800ba1c:	08016218 	.word	0x08016218
 800ba20:	0801621c 	.word	0x0801621c
 800ba24:	4620      	mov	r0, r4
 800ba26:	f001 fa97 	bl	800cf58 <d_expression_1>
 800ba2a:	4682      	mov	sl, r0
 800ba2c:	68e0      	ldr	r0, [r4, #12]
 800ba2e:	7803      	ldrb	r3, [r0, #0]
 800ba30:	2b4c      	cmp	r3, #76	; 0x4c
 800ba32:	f000 861f 	beq.w	800c674 <d_exprlist+0x1058>
 800ba36:	2b54      	cmp	r3, #84	; 0x54
 800ba38:	f000 8636 	beq.w	800c6a8 <d_exprlist+0x108c>
 800ba3c:	2b73      	cmp	r3, #115	; 0x73
 800ba3e:	f000 84a6 	beq.w	800c38e <d_exprlist+0xd72>
 800ba42:	2b66      	cmp	r3, #102	; 0x66
 800ba44:	f000 80ac 	beq.w	800bba0 <d_exprlist+0x584>
 800ba48:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ba4c:	2909      	cmp	r1, #9
 800ba4e:	f201 819a 	bhi.w	800cd86 <d_exprlist+0x176a>
 800ba52:	4620      	mov	r0, r4
 800ba54:	f002 f8ce 	bl	800dbf4 <d_unqualified_name>
 800ba58:	68e2      	ldr	r2, [r4, #12]
 800ba5a:	4681      	mov	r9, r0
 800ba5c:	7813      	ldrb	r3, [r2, #0]
 800ba5e:	b110      	cbz	r0, 800ba66 <d_exprlist+0x44a>
 800ba60:	2b49      	cmp	r3, #73	; 0x49
 800ba62:	f000 86f5 	beq.w	800c850 <d_exprlist+0x1234>
 800ba66:	2b4c      	cmp	r3, #76	; 0x4c
 800ba68:	f000 85ed 	beq.w	800c646 <d_exprlist+0x102a>
 800ba6c:	2b54      	cmp	r3, #84	; 0x54
 800ba6e:	f000 8609 	beq.w	800c684 <d_exprlist+0x1068>
 800ba72:	2b73      	cmp	r3, #115	; 0x73
 800ba74:	f000 83cc 	beq.w	800c210 <d_exprlist+0xbf4>
 800ba78:	2b66      	cmp	r3, #102	; 0x66
 800ba7a:	f000 8498 	beq.w	800c3ae <d_exprlist+0xd92>
 800ba7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ba82:	2909      	cmp	r1, #9
 800ba84:	f201 812f 	bhi.w	800cce6 <d_exprlist+0x16ca>
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f002 f8b3 	bl	800dbf4 <d_unqualified_name>
 800ba8e:	4683      	mov	fp, r0
 800ba90:	2800      	cmp	r0, #0
 800ba92:	f43f aeb3 	beq.w	800b7fc <d_exprlist+0x1e0>
 800ba96:	68e3      	ldr	r3, [r4, #12]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b49      	cmp	r3, #73	; 0x49
 800ba9c:	f47f aeae 	bne.w	800b7fc <d_exprlist+0x1e0>
 800baa0:	4620      	mov	r0, r4
 800baa2:	f7fe ff45 	bl	800a930 <d_template_args>
 800baa6:	465a      	mov	r2, fp
 800baa8:	4603      	mov	r3, r0
 800baaa:	2104      	movs	r1, #4
 800baac:	4620      	mov	r0, r4
 800baae:	f7fb f83f 	bl	8006b30 <d_make_comp>
 800bab2:	4683      	mov	fp, r0
 800bab4:	e6a2      	b.n	800b7fc <d_exprlist+0x1e0>
 800bab6:	2145      	movs	r1, #69	; 0x45
 800bab8:	4620      	mov	r0, r4
 800baba:	f7ff fdaf 	bl	800b61c <d_exprlist>
 800babe:	4681      	mov	r9, r0
 800bac0:	e6f4      	b.n	800b8ac <d_exprlist+0x290>
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800bac8:	2a01      	cmp	r2, #1
 800baca:	d903      	bls.n	800bad4 <d_exprlist+0x4b8>
 800bacc:	3b72      	subs	r3, #114	; 0x72
 800bace:	2b01      	cmp	r3, #1
 800bad0:	f63f aeb1 	bhi.w	800b836 <d_exprlist+0x21a>
 800bad4:	4620      	mov	r0, r4
 800bad6:	f001 fc11 	bl	800d2fc <d_type>
 800bada:	4682      	mov	sl, r0
 800badc:	e6ca      	b.n	800b874 <d_exprlist+0x258>
 800bade:	4620      	mov	r0, r4
 800bae0:	f7fe ff26 	bl	800a930 <d_template_args>
 800bae4:	4652      	mov	r2, sl
 800bae6:	4603      	mov	r3, r0
 800bae8:	2104      	movs	r1, #4
 800baea:	4620      	mov	r0, r4
 800baec:	f7fb f820 	bl	8006b30 <d_make_comp>
 800baf0:	4603      	mov	r3, r0
 800baf2:	e736      	b.n	800b962 <d_exprlist+0x346>
 800baf4:	3201      	adds	r2, #1
 800baf6:	60c2      	str	r2, [r0, #12]
 800baf8:	461a      	mov	r2, r3
 800bafa:	212e      	movs	r1, #46	; 0x2e
 800bafc:	b005      	add	sp, #20
 800bafe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb02:	f7fb b815 	b.w	8006b30 <d_make_comp>
 800bb06:	784b      	ldrb	r3, [r1, #1]
 800bb08:	2b72      	cmp	r3, #114	; 0x72
 800bb0a:	f000 8546 	beq.w	800c59a <d_exprlist+0xf7e>
 800bb0e:	2b70      	cmp	r3, #112	; 0x70
 800bb10:	f000 8614 	beq.w	800c73c <d_exprlist+0x1120>
 800bb14:	4620      	mov	r0, r4
 800bb16:	f001 ffad 	bl	800da74 <d_operator_name>
 800bb1a:	4681      	mov	r9, r0
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	f43f aeff 	beq.w	800b920 <d_exprlist+0x304>
 800bb22:	7803      	ldrb	r3, [r0, #0]
 800bb24:	2b31      	cmp	r3, #49	; 0x31
 800bb26:	f000 8352 	beq.w	800c1ce <d_exprlist+0xbb2>
 800bb2a:	2b32      	cmp	r3, #50	; 0x32
 800bb2c:	d02e      	beq.n	800bb8c <d_exprlist+0x570>
 800bb2e:	2b33      	cmp	r3, #51	; 0x33
 800bb30:	f000 864c 	beq.w	800c7cc <d_exprlist+0x11b0>
 800bb34:	f04f 0900 	mov.w	r9, #0
 800bb38:	e6f2      	b.n	800b920 <d_exprlist+0x304>
 800bb3a:	784b      	ldrb	r3, [r1, #1]
 800bb3c:	2b70      	cmp	r3, #112	; 0x70
 800bb3e:	d1e9      	bne.n	800bb14 <d_exprlist+0x4f8>
 800bb40:	1c8b      	adds	r3, r1, #2
 800bb42:	60e3      	str	r3, [r4, #12]
 800bb44:	788b      	ldrb	r3, [r1, #2]
 800bb46:	2b54      	cmp	r3, #84	; 0x54
 800bb48:	f040 8583 	bne.w	800c652 <d_exprlist+0x1036>
 800bb4c:	3103      	adds	r1, #3
 800bb4e:	60e1      	str	r1, [r4, #12]
 800bb50:	2000      	movs	r0, #0
 800bb52:	6963      	ldr	r3, [r4, #20]
 800bb54:	69a2      	ldr	r2, [r4, #24]
 800bb56:	4293      	cmp	r3, r2
 800bb58:	daec      	bge.n	800bb34 <d_exprlist+0x518>
 800bb5a:	6922      	ldr	r2, [r4, #16]
 800bb5c:	1c59      	adds	r1, r3, #1
 800bb5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bb62:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 800bb66:	6161      	str	r1, [r4, #20]
 800bb68:	f43f aeda 	beq.w	800b920 <d_exprlist+0x304>
 800bb6c:	2106      	movs	r1, #6
 800bb6e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800bb72:	f8c9 0004 	str.w	r0, [r9, #4]
 800bb76:	e6d3      	b.n	800b920 <d_exprlist+0x304>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f001 f9ed 	bl	800cf58 <d_expression_1>
 800bb7e:	4681      	mov	r9, r0
 800bb80:	e694      	b.n	800b8ac <d_exprlist+0x290>
 800bb82:	3301      	adds	r3, #1
 800bb84:	60e3      	str	r3, [r4, #12]
 800bb86:	f04f 0b00 	mov.w	fp, #0
 800bb8a:	e637      	b.n	800b7fc <d_exprlist+0x1e0>
 800bb8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	d8cf      	bhi.n	800bb34 <d_exprlist+0x518>
 800bb94:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb98:	04cc0059 	.word	0x04cc0059
 800bb9c:	006100a5 	.word	0x006100a5
 800bba0:	7843      	ldrb	r3, [r0, #1]
 800bba2:	2b70      	cmp	r3, #112	; 0x70
 800bba4:	f000 85d8 	beq.w	800c758 <d_exprlist+0x113c>
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f001 ff63 	bl	800da74 <d_operator_name>
 800bbae:	4681      	mov	r9, r0
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	f000 8157 	beq.w	800be64 <d_exprlist+0x848>
 800bbb6:	7803      	ldrb	r3, [r0, #0]
 800bbb8:	2b31      	cmp	r3, #49	; 0x31
 800bbba:	f000 859f 	beq.w	800c6fc <d_exprlist+0x10e0>
 800bbbe:	2b32      	cmp	r3, #50	; 0x32
 800bbc0:	f040 84d1 	bne.w	800c566 <d_exprlist+0xf4a>
 800bbc4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bbc8:	2b03      	cmp	r3, #3
 800bbca:	f200 8489 	bhi.w	800c4e0 <d_exprlist+0xec4>
 800bbce:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bbd2:	0142      	.short	0x0142
 800bbd4:	018c04d1 	.word	0x018c04d1
 800bbd8:	014c      	.short	0x014c
 800bbda:	2b6f      	cmp	r3, #111	; 0x6f
 800bbdc:	f000 8446 	beq.w	800c46c <d_exprlist+0xe50>
 800bbe0:	2b69      	cmp	r3, #105	; 0x69
 800bbe2:	f041 8177 	bne.w	800ced4 <d_exprlist+0x18b8>
 800bbe6:	784b      	ldrb	r3, [r1, #1]
 800bbe8:	2b6c      	cmp	r3, #108	; 0x6c
 800bbea:	f001 80bb 	beq.w	800cd64 <d_exprlist+0x1748>
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f001 ff40 	bl	800da74 <d_operator_name>
 800bbf4:	4682      	mov	sl, r0
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	f000 82df 	beq.w	800c1ba <d_exprlist+0xb9e>
 800bbfc:	7803      	ldrb	r3, [r0, #0]
 800bbfe:	2b31      	cmp	r3, #49	; 0x31
 800bc00:	f000 8474 	beq.w	800c4ec <d_exprlist+0xed0>
 800bc04:	2b32      	cmp	r3, #50	; 0x32
 800bc06:	f040 8412 	bne.w	800c42e <d_exprlist+0xe12>
 800bc0a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	f200 82d3 	bhi.w	800c1ba <d_exprlist+0xb9e>
 800bc14:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc18:	0413009c 	.word	0x0413009c
 800bc1c:	00a400e8 	.word	0x00a400e8
 800bc20:	4620      	mov	r0, r4
 800bc22:	f002 fe63 	bl	800e8ec <d_expr_primary>
 800bc26:	4602      	mov	r2, r0
 800bc28:	e6c9      	b.n	800b9be <d_exprlist+0x3a2>
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7fe fe80 	bl	800a930 <d_template_args>
 800bc30:	464a      	mov	r2, r9
 800bc32:	4603      	mov	r3, r0
 800bc34:	2104      	movs	r1, #4
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7fa ff7a 	bl	8006b30 <d_make_comp>
 800bc3c:	4681      	mov	r9, r0
 800bc3e:	e66f      	b.n	800b920 <d_exprlist+0x304>
 800bc40:	4620      	mov	r0, r4
 800bc42:	f7fb f917 	bl	8006e74 <d_template_param>
 800bc46:	4682      	mov	sl, r0
 800bc48:	e614      	b.n	800b874 <d_exprlist+0x258>
 800bc4a:	464a      	mov	r2, r9
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	2134      	movs	r1, #52	; 0x34
 800bc50:	4620      	mov	r0, r4
 800bc52:	f7fa ff6d 	bl	8006b30 <d_make_comp>
 800bc56:	4681      	mov	r9, r0
 800bc58:	e662      	b.n	800b920 <d_exprlist+0x304>
 800bc5a:	f04f 0b00 	mov.w	fp, #0
 800bc5e:	49d1      	ldr	r1, [pc, #836]	; (800bfa4 <d_exprlist+0x988>)
 800bc60:	4658      	mov	r0, fp
 800bc62:	f003 f8bd 	bl	800ede0 <strcmp>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f000 8621 	beq.w	800c8ae <d_exprlist+0x1292>
 800bc6c:	f89b 2000 	ldrb.w	r2, [fp]
 800bc70:	2a6e      	cmp	r2, #110	; 0x6e
 800bc72:	f47f af5f 	bne.w	800bb34 <d_exprlist+0x518>
 800bc76:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bc7a:	2b77      	cmp	r3, #119	; 0x77
 800bc7c:	d002      	beq.n	800bc84 <d_exprlist+0x668>
 800bc7e:	2b61      	cmp	r3, #97	; 0x61
 800bc80:	f47f af58 	bne.w	800bb34 <d_exprlist+0x518>
 800bc84:	215f      	movs	r1, #95	; 0x5f
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff fcc8 	bl	800b61c <d_exprlist>
 800bc8c:	9000      	str	r0, [sp, #0]
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f001 fb34 	bl	800d2fc <d_type>
 800bc94:	68e3      	ldr	r3, [r4, #12]
 800bc96:	4683      	mov	fp, r0
 800bc98:	781a      	ldrb	r2, [r3, #0]
 800bc9a:	2a45      	cmp	r2, #69	; 0x45
 800bc9c:	f000 8744 	beq.w	800cb28 <d_exprlist+0x150c>
 800bca0:	2a70      	cmp	r2, #112	; 0x70
 800bca2:	f000 8798 	beq.w	800cbd6 <d_exprlist+0x15ba>
 800bca6:	2a69      	cmp	r2, #105	; 0x69
 800bca8:	f47f af44 	bne.w	800bb34 <d_exprlist+0x518>
 800bcac:	785b      	ldrb	r3, [r3, #1]
 800bcae:	2b6c      	cmp	r3, #108	; 0x6c
 800bcb0:	f47f af40 	bne.w	800bb34 <d_exprlist+0x518>
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f001 f94f 	bl	800cf58 <d_expression_1>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	465a      	mov	r2, fp
 800bcbe:	213a      	movs	r1, #58	; 0x3a
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f7fa ff35 	bl	8006b30 <d_make_comp>
 800bcc6:	9a00      	ldr	r2, [sp, #0]
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2139      	movs	r1, #57	; 0x39
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7fa ff2f 	bl	8006b30 <d_make_comp>
 800bcd2:	464a      	mov	r2, r9
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2138      	movs	r1, #56	; 0x38
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f7fa ff29 	bl	8006b30 <d_make_comp>
 800bcde:	4681      	mov	r9, r0
 800bce0:	e61e      	b.n	800b920 <d_exprlist+0x304>
 800bce2:	f04f 0b00 	mov.w	fp, #0
 800bce6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bcea:	6812      	ldr	r2, [r2, #0]
 800bcec:	7851      	ldrb	r1, [r2, #1]
 800bcee:	2963      	cmp	r1, #99	; 0x63
 800bcf0:	f000 85ce 	beq.w	800c890 <d_exprlist+0x1274>
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f001 f92f 	bl	800cf58 <d_expression_1>
 800bcfa:	9000      	str	r0, [sp, #0]
 800bcfc:	49aa      	ldr	r1, [pc, #680]	; (800bfa8 <d_exprlist+0x98c>)
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f003 f86e 	bl	800ede0 <strcmp>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	f000 8631 	beq.w	800c96c <d_exprlist+0x1350>
 800bd0a:	49a8      	ldr	r1, [pc, #672]	; (800bfac <d_exprlist+0x990>)
 800bd0c:	4658      	mov	r0, fp
 800bd0e:	f003 f867 	bl	800ede0 <strcmp>
 800bd12:	b130      	cbz	r0, 800bd22 <d_exprlist+0x706>
 800bd14:	4658      	mov	r0, fp
 800bd16:	49a6      	ldr	r1, [pc, #664]	; (800bfb0 <d_exprlist+0x994>)
 800bd18:	f003 f862 	bl	800ede0 <strcmp>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	f040 86dc 	bne.w	800cada <d_exprlist+0x14be>
 800bd22:	4620      	mov	r0, r4
 800bd24:	f001 ff66 	bl	800dbf4 <d_unqualified_name>
 800bd28:	68e3      	ldr	r3, [r4, #12]
 800bd2a:	4683      	mov	fp, r0
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	2b49      	cmp	r3, #73	; 0x49
 800bd30:	f000 86d9 	beq.w	800cae6 <d_exprlist+0x14ca>
 800bd34:	465b      	mov	r3, fp
 800bd36:	9a00      	ldr	r2, [sp, #0]
 800bd38:	2137      	movs	r1, #55	; 0x37
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f7fa fef8 	bl	8006b30 <d_make_comp>
 800bd40:	464a      	mov	r2, r9
 800bd42:	4603      	mov	r3, r0
 800bd44:	2136      	movs	r1, #54	; 0x36
 800bd46:	4620      	mov	r0, r4
 800bd48:	f7fa fef2 	bl	8006b30 <d_make_comp>
 800bd4c:	4681      	mov	r9, r0
 800bd4e:	e5e7      	b.n	800b920 <d_exprlist+0x304>
 800bd50:	4652      	mov	r2, sl
 800bd52:	2300      	movs	r3, #0
 800bd54:	2134      	movs	r1, #52	; 0x34
 800bd56:	4620      	mov	r0, r4
 800bd58:	f7fa feea 	bl	8006b30 <d_make_comp>
 800bd5c:	4682      	mov	sl, r0
 800bd5e:	e589      	b.n	800b874 <d_exprlist+0x258>
 800bd60:	f04f 0b00 	mov.w	fp, #0
 800bd64:	498f      	ldr	r1, [pc, #572]	; (800bfa4 <d_exprlist+0x988>)
 800bd66:	4658      	mov	r0, fp
 800bd68:	f003 f83a 	bl	800ede0 <strcmp>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	f000 86c6 	beq.w	800cafe <d_exprlist+0x14e2>
 800bd72:	f89b 2000 	ldrb.w	r2, [fp]
 800bd76:	2a6e      	cmp	r2, #110	; 0x6e
 800bd78:	f040 821f 	bne.w	800c1ba <d_exprlist+0xb9e>
 800bd7c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bd80:	2b77      	cmp	r3, #119	; 0x77
 800bd82:	d002      	beq.n	800bd8a <d_exprlist+0x76e>
 800bd84:	2b61      	cmp	r3, #97	; 0x61
 800bd86:	f040 8218 	bne.w	800c1ba <d_exprlist+0xb9e>
 800bd8a:	215f      	movs	r1, #95	; 0x5f
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f7ff fc45 	bl	800b61c <d_exprlist>
 800bd92:	9000      	str	r0, [sp, #0]
 800bd94:	4620      	mov	r0, r4
 800bd96:	f001 fab1 	bl	800d2fc <d_type>
 800bd9a:	68e3      	ldr	r3, [r4, #12]
 800bd9c:	4683      	mov	fp, r0
 800bd9e:	781a      	ldrb	r2, [r3, #0]
 800bda0:	2a45      	cmp	r2, #69	; 0x45
 800bda2:	f000 86d2 	beq.w	800cb4a <d_exprlist+0x152e>
 800bda6:	2a70      	cmp	r2, #112	; 0x70
 800bda8:	f000 86c3 	beq.w	800cb32 <d_exprlist+0x1516>
 800bdac:	2a69      	cmp	r2, #105	; 0x69
 800bdae:	f040 8204 	bne.w	800c1ba <d_exprlist+0xb9e>
 800bdb2:	785b      	ldrb	r3, [r3, #1]
 800bdb4:	2b6c      	cmp	r3, #108	; 0x6c
 800bdb6:	f040 8200 	bne.w	800c1ba <d_exprlist+0xb9e>
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f001 f8cc 	bl	800cf58 <d_expression_1>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	465a      	mov	r2, fp
 800bdc4:	213a      	movs	r1, #58	; 0x3a
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7fa feb2 	bl	8006b30 <d_make_comp>
 800bdcc:	9a00      	ldr	r2, [sp, #0]
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2139      	movs	r1, #57	; 0x39
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7fa feac 	bl	8006b30 <d_make_comp>
 800bdd8:	4652      	mov	r2, sl
 800bdda:	4603      	mov	r3, r0
 800bddc:	2138      	movs	r1, #56	; 0x38
 800bdde:	4620      	mov	r0, r4
 800bde0:	f7fa fea6 	bl	8006b30 <d_make_comp>
 800bde4:	4682      	mov	sl, r0
 800bde6:	e545      	b.n	800b874 <d_exprlist+0x258>
 800bde8:	f04f 0b00 	mov.w	fp, #0
 800bdec:	f8da 2004 	ldr.w	r2, [sl, #4]
 800bdf0:	6812      	ldr	r2, [r2, #0]
 800bdf2:	7851      	ldrb	r1, [r2, #1]
 800bdf4:	2963      	cmp	r1, #99	; 0x63
 800bdf6:	f000 8634 	beq.w	800ca62 <d_exprlist+0x1446>
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f001 f8ac 	bl	800cf58 <d_expression_1>
 800be00:	9000      	str	r0, [sp, #0]
 800be02:	4969      	ldr	r1, [pc, #420]	; (800bfa8 <d_exprlist+0x98c>)
 800be04:	4658      	mov	r0, fp
 800be06:	f002 ffeb 	bl	800ede0 <strcmp>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	f000 8643 	beq.w	800ca96 <d_exprlist+0x147a>
 800be10:	4966      	ldr	r1, [pc, #408]	; (800bfac <d_exprlist+0x990>)
 800be12:	4658      	mov	r0, fp
 800be14:	f002 ffe4 	bl	800ede0 <strcmp>
 800be18:	b130      	cbz	r0, 800be28 <d_exprlist+0x80c>
 800be1a:	4658      	mov	r0, fp
 800be1c:	4964      	ldr	r1, [pc, #400]	; (800bfb0 <d_exprlist+0x994>)
 800be1e:	f002 ffdf 	bl	800ede0 <strcmp>
 800be22:	2800      	cmp	r0, #0
 800be24:	f040 8696 	bne.w	800cb54 <d_exprlist+0x1538>
 800be28:	4620      	mov	r0, r4
 800be2a:	f001 fee3 	bl	800dbf4 <d_unqualified_name>
 800be2e:	68e3      	ldr	r3, [r4, #12]
 800be30:	4683      	mov	fp, r0
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b49      	cmp	r3, #73	; 0x49
 800be36:	f000 86da 	beq.w	800cbee <d_exprlist+0x15d2>
 800be3a:	465b      	mov	r3, fp
 800be3c:	9a00      	ldr	r2, [sp, #0]
 800be3e:	2137      	movs	r1, #55	; 0x37
 800be40:	4620      	mov	r0, r4
 800be42:	f7fa fe75 	bl	8006b30 <d_make_comp>
 800be46:	4652      	mov	r2, sl
 800be48:	4603      	mov	r3, r0
 800be4a:	2136      	movs	r1, #54	; 0x36
 800be4c:	4620      	mov	r0, r4
 800be4e:	f7fa fe6f 	bl	8006b30 <d_make_comp>
 800be52:	4682      	mov	sl, r0
 800be54:	e50e      	b.n	800b874 <d_exprlist+0x258>
 800be56:	464a      	mov	r2, r9
 800be58:	2300      	movs	r3, #0
 800be5a:	2134      	movs	r1, #52	; 0x34
 800be5c:	4620      	mov	r0, r4
 800be5e:	f7fa fe67 	bl	8006b30 <d_make_comp>
 800be62:	4681      	mov	r9, r0
 800be64:	68e2      	ldr	r2, [r4, #12]
 800be66:	7813      	ldrb	r3, [r2, #0]
 800be68:	e5fd      	b.n	800ba66 <d_exprlist+0x44a>
 800be6a:	f04f 0b00 	mov.w	fp, #0
 800be6e:	494d      	ldr	r1, [pc, #308]	; (800bfa4 <d_exprlist+0x988>)
 800be70:	4658      	mov	r0, fp
 800be72:	f002 ffb5 	bl	800ede0 <strcmp>
 800be76:	2800      	cmp	r0, #0
 800be78:	f000 86e7 	beq.w	800cc4a <d_exprlist+0x162e>
 800be7c:	f89b 2000 	ldrb.w	r2, [fp]
 800be80:	2a6e      	cmp	r2, #110	; 0x6e
 800be82:	f040 832d 	bne.w	800c4e0 <d_exprlist+0xec4>
 800be86:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800be8a:	2b77      	cmp	r3, #119	; 0x77
 800be8c:	d002      	beq.n	800be94 <d_exprlist+0x878>
 800be8e:	2b61      	cmp	r3, #97	; 0x61
 800be90:	f040 8326 	bne.w	800c4e0 <d_exprlist+0xec4>
 800be94:	215f      	movs	r1, #95	; 0x5f
 800be96:	4620      	mov	r0, r4
 800be98:	f7ff fbc0 	bl	800b61c <d_exprlist>
 800be9c:	9000      	str	r0, [sp, #0]
 800be9e:	4620      	mov	r0, r4
 800bea0:	f001 fa2c 	bl	800d2fc <d_type>
 800bea4:	68e2      	ldr	r2, [r4, #12]
 800bea6:	4683      	mov	fp, r0
 800bea8:	7813      	ldrb	r3, [r2, #0]
 800beaa:	2b45      	cmp	r3, #69	; 0x45
 800beac:	f000 86da 	beq.w	800cc64 <d_exprlist+0x1648>
 800beb0:	2b70      	cmp	r3, #112	; 0x70
 800beb2:	f000 87c2 	beq.w	800ce3a <d_exprlist+0x181e>
 800beb6:	2b69      	cmp	r3, #105	; 0x69
 800beb8:	f041 804a 	bne.w	800cf50 <d_exprlist+0x1934>
 800bebc:	7853      	ldrb	r3, [r2, #1]
 800bebe:	2b6c      	cmp	r3, #108	; 0x6c
 800bec0:	f041 8043 	bne.w	800cf4a <d_exprlist+0x192e>
 800bec4:	4620      	mov	r0, r4
 800bec6:	f001 f847 	bl	800cf58 <d_expression_1>
 800beca:	4603      	mov	r3, r0
 800becc:	465a      	mov	r2, fp
 800bece:	213a      	movs	r1, #58	; 0x3a
 800bed0:	4620      	mov	r0, r4
 800bed2:	f7fa fe2d 	bl	8006b30 <d_make_comp>
 800bed6:	9a00      	ldr	r2, [sp, #0]
 800bed8:	4603      	mov	r3, r0
 800beda:	2139      	movs	r1, #57	; 0x39
 800bedc:	4620      	mov	r0, r4
 800bede:	f7fa fe27 	bl	8006b30 <d_make_comp>
 800bee2:	464a      	mov	r2, r9
 800bee4:	4603      	mov	r3, r0
 800bee6:	2138      	movs	r1, #56	; 0x38
 800bee8:	e7b8      	b.n	800be5c <d_exprlist+0x840>
 800beea:	f04f 0b00 	mov.w	fp, #0
 800beee:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bef2:	6812      	ldr	r2, [r2, #0]
 800bef4:	7851      	ldrb	r1, [r2, #1]
 800bef6:	2963      	cmp	r1, #99	; 0x63
 800bef8:	f000 865e 	beq.w	800cbb8 <d_exprlist+0x159c>
 800befc:	4620      	mov	r0, r4
 800befe:	f001 f82b 	bl	800cf58 <d_expression_1>
 800bf02:	9000      	str	r0, [sp, #0]
 800bf04:	4928      	ldr	r1, [pc, #160]	; (800bfa8 <d_exprlist+0x98c>)
 800bf06:	4658      	mov	r0, fp
 800bf08:	f002 ff6a 	bl	800ede0 <strcmp>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	f000 864c 	beq.w	800cbaa <d_exprlist+0x158e>
 800bf12:	4926      	ldr	r1, [pc, #152]	; (800bfac <d_exprlist+0x990>)
 800bf14:	4658      	mov	r0, fp
 800bf16:	f002 ff63 	bl	800ede0 <strcmp>
 800bf1a:	b130      	cbz	r0, 800bf2a <d_exprlist+0x90e>
 800bf1c:	4658      	mov	r0, fp
 800bf1e:	4924      	ldr	r1, [pc, #144]	; (800bfb0 <d_exprlist+0x994>)
 800bf20:	f002 ff5e 	bl	800ede0 <strcmp>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	f040 861b 	bne.w	800cb60 <d_exprlist+0x1544>
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f001 fe62 	bl	800dbf4 <d_unqualified_name>
 800bf30:	68e3      	ldr	r3, [r4, #12]
 800bf32:	4683      	mov	fp, r0
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	2b49      	cmp	r3, #73	; 0x49
 800bf38:	d109      	bne.n	800bf4e <d_exprlist+0x932>
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7fe fcf8 	bl	800a930 <d_template_args>
 800bf40:	465a      	mov	r2, fp
 800bf42:	4603      	mov	r3, r0
 800bf44:	2104      	movs	r1, #4
 800bf46:	4620      	mov	r0, r4
 800bf48:	f7fa fdf2 	bl	8006b30 <d_make_comp>
 800bf4c:	4683      	mov	fp, r0
 800bf4e:	465b      	mov	r3, fp
 800bf50:	9a00      	ldr	r2, [sp, #0]
 800bf52:	2137      	movs	r1, #55	; 0x37
 800bf54:	4620      	mov	r0, r4
 800bf56:	f7fa fdeb 	bl	8006b30 <d_make_comp>
 800bf5a:	464a      	mov	r2, r9
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2136      	movs	r1, #54	; 0x36
 800bf60:	e77c      	b.n	800be5c <d_exprlist+0x840>
 800bf62:	78d3      	ldrb	r3, [r2, #3]
 800bf64:	2b72      	cmp	r3, #114	; 0x72
 800bf66:	f000 8456 	beq.w	800c816 <d_exprlist+0x11fa>
 800bf6a:	2b70      	cmp	r3, #112	; 0x70
 800bf6c:	f000 84ac 	beq.w	800c8c8 <d_exprlist+0x12ac>
 800bf70:	4620      	mov	r0, r4
 800bf72:	f001 fd7f 	bl	800da74 <d_operator_name>
 800bf76:	4680      	mov	r8, r0
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	f000 8117 	beq.w	800c1ac <d_exprlist+0xb90>
 800bf7e:	7803      	ldrb	r3, [r0, #0]
 800bf80:	2b31      	cmp	r3, #49	; 0x31
 800bf82:	f000 828b 	beq.w	800c49c <d_exprlist+0xe80>
 800bf86:	2b32      	cmp	r3, #50	; 0x32
 800bf88:	f040 8232 	bne.w	800c3f0 <d_exprlist+0xdd4>
 800bf8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf90:	2b03      	cmp	r3, #3
 800bf92:	f200 810b 	bhi.w	800c1ac <d_exprlist+0xb90>
 800bf96:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bf9a:	000d      	.short	0x000d
 800bf9c:	00590233 	.word	0x00590233
 800bfa0:	0015      	.short	0x0015
 800bfa2:	bf00      	nop
 800bfa4:	08016104 	.word	0x08016104
 800bfa8:	080160fc 	.word	0x080160fc
 800bfac:	08016218 	.word	0x08016218
 800bfb0:	0801621c 	.word	0x0801621c
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	2134      	movs	r1, #52	; 0x34
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f7fa fdb8 	bl	8006b30 <d_make_comp>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	e4fc      	b.n	800b9be <d_exprlist+0x3a2>
 800bfc4:	f04f 0900 	mov.w	r9, #0
 800bfc8:	49c8      	ldr	r1, [pc, #800]	; (800c2ec <d_exprlist+0xcd0>)
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f002 ff08 	bl	800ede0 <strcmp>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	f000 8575 	beq.w	800cac0 <d_exprlist+0x14a4>
 800bfd6:	f899 3000 	ldrb.w	r3, [r9]
 800bfda:	2b6e      	cmp	r3, #110	; 0x6e
 800bfdc:	f040 80e6 	bne.w	800c1ac <d_exprlist+0xb90>
 800bfe0:	f899 3001 	ldrb.w	r3, [r9, #1]
 800bfe4:	2b77      	cmp	r3, #119	; 0x77
 800bfe6:	d002      	beq.n	800bfee <d_exprlist+0x9d2>
 800bfe8:	2b61      	cmp	r3, #97	; 0x61
 800bfea:	f040 80df 	bne.w	800c1ac <d_exprlist+0xb90>
 800bfee:	215f      	movs	r1, #95	; 0x5f
 800bff0:	4620      	mov	r0, r4
 800bff2:	f7ff fb13 	bl	800b61c <d_exprlist>
 800bff6:	4681      	mov	r9, r0
 800bff8:	4620      	mov	r0, r4
 800bffa:	f001 f97f 	bl	800d2fc <d_type>
 800bffe:	68e3      	ldr	r3, [r4, #12]
 800c000:	4682      	mov	sl, r0
 800c002:	781a      	ldrb	r2, [r3, #0]
 800c004:	2a45      	cmp	r2, #69	; 0x45
 800c006:	f000 85cb 	beq.w	800cba0 <d_exprlist+0x1584>
 800c00a:	2a70      	cmp	r2, #112	; 0x70
 800c00c:	f000 85bc 	beq.w	800cb88 <d_exprlist+0x156c>
 800c010:	2a69      	cmp	r2, #105	; 0x69
 800c012:	f040 80cb 	bne.w	800c1ac <d_exprlist+0xb90>
 800c016:	785b      	ldrb	r3, [r3, #1]
 800c018:	2b6c      	cmp	r3, #108	; 0x6c
 800c01a:	f040 80c7 	bne.w	800c1ac <d_exprlist+0xb90>
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 ff9a 	bl	800cf58 <d_expression_1>
 800c024:	4603      	mov	r3, r0
 800c026:	4652      	mov	r2, sl
 800c028:	213a      	movs	r1, #58	; 0x3a
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7fa fd80 	bl	8006b30 <d_make_comp>
 800c030:	464a      	mov	r2, r9
 800c032:	4603      	mov	r3, r0
 800c034:	2139      	movs	r1, #57	; 0x39
 800c036:	4620      	mov	r0, r4
 800c038:	f7fa fd7a 	bl	8006b30 <d_make_comp>
 800c03c:	4642      	mov	r2, r8
 800c03e:	4603      	mov	r3, r0
 800c040:	2138      	movs	r1, #56	; 0x38
 800c042:	4620      	mov	r0, r4
 800c044:	f7fa fd74 	bl	8006b30 <d_make_comp>
 800c048:	4602      	mov	r2, r0
 800c04a:	e4b8      	b.n	800b9be <d_exprlist+0x3a2>
 800c04c:	f04f 0900 	mov.w	r9, #0
 800c050:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	785a      	ldrb	r2, [r3, #1]
 800c058:	2a63      	cmp	r2, #99	; 0x63
 800c05a:	f000 84dd 	beq.w	800ca18 <d_exprlist+0x13fc>
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 ff7a 	bl	800cf58 <d_expression_1>
 800c064:	4682      	mov	sl, r0
 800c066:	49a2      	ldr	r1, [pc, #648]	; (800c2f0 <d_exprlist+0xcd4>)
 800c068:	4648      	mov	r0, r9
 800c06a:	f002 feb9 	bl	800ede0 <strcmp>
 800c06e:	2800      	cmp	r0, #0
 800c070:	f000 84c9 	beq.w	800ca06 <d_exprlist+0x13ea>
 800c074:	499f      	ldr	r1, [pc, #636]	; (800c2f4 <d_exprlist+0xcd8>)
 800c076:	4648      	mov	r0, r9
 800c078:	f002 feb2 	bl	800ede0 <strcmp>
 800c07c:	b130      	cbz	r0, 800c08c <d_exprlist+0xa70>
 800c07e:	4648      	mov	r0, r9
 800c080:	499d      	ldr	r1, [pc, #628]	; (800c2f8 <d_exprlist+0xcdc>)
 800c082:	f002 fead 	bl	800ede0 <strcmp>
 800c086:	2800      	cmp	r0, #0
 800c088:	f040 8578 	bne.w	800cb7c <d_exprlist+0x1560>
 800c08c:	4620      	mov	r0, r4
 800c08e:	f001 fdb1 	bl	800dbf4 <d_unqualified_name>
 800c092:	68e3      	ldr	r3, [r4, #12]
 800c094:	4681      	mov	r9, r0
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	2b49      	cmp	r3, #73	; 0x49
 800c09a:	f000 85ca 	beq.w	800cc32 <d_exprlist+0x1616>
 800c09e:	464b      	mov	r3, r9
 800c0a0:	4652      	mov	r2, sl
 800c0a2:	2137      	movs	r1, #55	; 0x37
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f7fa fd43 	bl	8006b30 <d_make_comp>
 800c0aa:	4642      	mov	r2, r8
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2136      	movs	r1, #54	; 0x36
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f7fa fd3d 	bl	8006b30 <d_make_comp>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	e481      	b.n	800b9be <d_exprlist+0x3a2>
 800c0ba:	784b      	ldrb	r3, [r1, #1]
 800c0bc:	2b72      	cmp	r3, #114	; 0x72
 800c0be:	f000 83cf 	beq.w	800c860 <d_exprlist+0x1244>
 800c0c2:	2b70      	cmp	r3, #112	; 0x70
 800c0c4:	f47f ad93 	bne.w	800bbee <d_exprlist+0x5d2>
 800c0c8:	3102      	adds	r1, #2
 800c0ca:	60e1      	str	r1, [r4, #12]
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 ff43 	bl	800cf58 <d_expression_1>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	2149      	movs	r1, #73	; 0x49
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f7fa fd29 	bl	8006b30 <d_make_comp>
 800c0de:	4682      	mov	sl, r0
 800c0e0:	f7ff bbc8 	b.w	800b874 <d_exprlist+0x258>
 800c0e4:	78d3      	ldrb	r3, [r2, #3]
 800c0e6:	2b70      	cmp	r3, #112	; 0x70
 800c0e8:	f47f af42 	bne.w	800bf70 <d_exprlist+0x954>
 800c0ec:	1d13      	adds	r3, r2, #4
 800c0ee:	60e3      	str	r3, [r4, #12]
 800c0f0:	7913      	ldrb	r3, [r2, #4]
 800c0f2:	2b54      	cmp	r3, #84	; 0x54
 800c0f4:	d155      	bne.n	800c1a2 <d_exprlist+0xb86>
 800c0f6:	3205      	adds	r2, #5
 800c0f8:	60e2      	str	r2, [r4, #12]
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	6963      	ldr	r3, [r4, #20]
 800c0fe:	69a2      	ldr	r2, [r4, #24]
 800c100:	4293      	cmp	r3, r2
 800c102:	da53      	bge.n	800c1ac <d_exprlist+0xb90>
 800c104:	6922      	ldr	r2, [r4, #16]
 800c106:	1c59      	adds	r1, r3, #1
 800c108:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c10c:	6161      	str	r1, [r4, #20]
 800c10e:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800c112:	f000 8616 	beq.w	800cd42 <d_exprlist+0x1726>
 800c116:	f04f 0e06 	mov.w	lr, #6
 800c11a:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800c11e:	460a      	mov	r2, r1
 800c120:	6048      	str	r0, [r1, #4]
 800c122:	e44c      	b.n	800b9be <d_exprlist+0x3a2>
 800c124:	4620      	mov	r0, r4
 800c126:	f7fe fc03 	bl	800a930 <d_template_args>
 800c12a:	464a      	mov	r2, r9
 800c12c:	4603      	mov	r3, r0
 800c12e:	2104      	movs	r1, #4
 800c130:	4620      	mov	r0, r4
 800c132:	f7fa fcfd 	bl	8006b30 <d_make_comp>
 800c136:	4681      	mov	r9, r0
 800c138:	f7ff bbb8 	b.w	800b8ac <d_exprlist+0x290>
 800c13c:	784b      	ldrb	r3, [r1, #1]
 800c13e:	2b70      	cmp	r3, #112	; 0x70
 800c140:	f47f ad55 	bne.w	800bbee <d_exprlist+0x5d2>
 800c144:	1c8b      	adds	r3, r1, #2
 800c146:	60e3      	str	r3, [r4, #12]
 800c148:	788b      	ldrb	r3, [r1, #2]
 800c14a:	2b54      	cmp	r3, #84	; 0x54
 800c14c:	d130      	bne.n	800c1b0 <d_exprlist+0xb94>
 800c14e:	3103      	adds	r1, #3
 800c150:	60e1      	str	r1, [r4, #12]
 800c152:	2000      	movs	r0, #0
 800c154:	6963      	ldr	r3, [r4, #20]
 800c156:	69a2      	ldr	r2, [r4, #24]
 800c158:	4293      	cmp	r3, r2
 800c15a:	da2e      	bge.n	800c1ba <d_exprlist+0xb9e>
 800c15c:	6922      	ldr	r2, [r4, #16]
 800c15e:	1c59      	adds	r1, r3, #1
 800c160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c164:	eb12 0a83 	adds.w	sl, r2, r3, lsl #2
 800c168:	6161      	str	r1, [r4, #20]
 800c16a:	f43f ab83 	beq.w	800b874 <d_exprlist+0x258>
 800c16e:	2106      	movs	r1, #6
 800c170:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800c174:	f8ca 0004 	str.w	r0, [sl, #4]
 800c178:	f7ff bb7c 	b.w	800b874 <d_exprlist+0x258>
 800c17c:	785a      	ldrb	r2, [r3, #1]
 800c17e:	2a69      	cmp	r2, #105	; 0x69
 800c180:	f47f aacc 	bne.w	800b71c <d_exprlist+0x100>
 800c184:	3302      	adds	r3, #2
 800c186:	60e3      	str	r3, [r4, #12]
 800c188:	2145      	movs	r1, #69	; 0x45
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7ff fa46 	bl	800b61c <d_exprlist>
 800c190:	4683      	mov	fp, r0
 800c192:	f7ff bb33 	b.w	800b7fc <d_exprlist+0x1e0>
 800c196:	4620      	mov	r0, r4
 800c198:	f002 fba8 	bl	800e8ec <d_expr_primary>
 800c19c:	4681      	mov	r9, r0
 800c19e:	f7ff bbbf 	b.w	800b920 <d_exprlist+0x304>
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f7fa fe4e 	bl	8006e44 <d_compact_number>
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d1a7      	bne.n	800c0fc <d_exprlist+0xae0>
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	e406      	b.n	800b9be <d_exprlist+0x3a2>
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f7fa fe47 	bl	8006e44 <d_compact_number>
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d1cc      	bne.n	800c154 <d_exprlist+0xb38>
 800c1ba:	f04f 0a00 	mov.w	sl, #0
 800c1be:	f7ff bb59 	b.w	800b874 <d_exprlist+0x258>
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7fa fe56 	bl	8006e74 <d_template_param>
 800c1c8:	4681      	mov	r9, r0
 800c1ca:	f7ff bba9 	b.w	800b920 <d_exprlist+0x304>
 800c1ce:	6843      	ldr	r3, [r0, #4]
 800c1d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c1d2:	689a      	ldr	r2, [r3, #8]
 800c1d4:	f8d3 b000 	ldr.w	fp, [r3]
 800c1d8:	3a02      	subs	r2, #2
 800c1da:	440a      	add	r2, r1
 800c1dc:	6322      	str	r2, [r4, #48]	; 0x30
 800c1de:	4658      	mov	r0, fp
 800c1e0:	4946      	ldr	r1, [pc, #280]	; (800c2fc <d_exprlist+0xce0>)
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	f002 fdfc 	bl	800ede0 <strcmp>
 800c1e8:	9b00      	ldr	r3, [sp, #0]
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	f000 832b 	beq.w	800c846 <d_exprlist+0x122a>
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	2a03      	cmp	r2, #3
 800c1f4:	f63f ac9e 	bhi.w	800bb34 <d_exprlist+0x518>
 800c1f8:	a301      	add	r3, pc, #4	; (adr r3, 800c200 <d_exprlist+0xbe4>)
 800c1fa:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c1fe:	bf00      	nop
 800c200:	0800bc4b 	.word	0x0800bc4b
 800c204:	0800c607 	.word	0x0800c607
 800c208:	0800bce7 	.word	0x0800bce7
 800c20c:	0800bc5f 	.word	0x0800bc5f
 800c210:	7853      	ldrb	r3, [r2, #1]
 800c212:	2b72      	cmp	r3, #114	; 0x72
 800c214:	f000 838a 	beq.w	800c92c <d_exprlist+0x1310>
 800c218:	2b70      	cmp	r3, #112	; 0x70
 800c21a:	f000 8443 	beq.w	800caa4 <d_exprlist+0x1488>
 800c21e:	4620      	mov	r0, r4
 800c220:	f001 fc28 	bl	800da74 <d_operator_name>
 800c224:	4683      	mov	fp, r0
 800c226:	2800      	cmp	r0, #0
 800c228:	f43f aae8 	beq.w	800b7fc <d_exprlist+0x1e0>
 800c22c:	7803      	ldrb	r3, [r0, #0]
 800c22e:	2b31      	cmp	r3, #49	; 0x31
 800c230:	f000 8242 	beq.w	800c6b8 <d_exprlist+0x109c>
 800c234:	2b32      	cmp	r3, #50	; 0x32
 800c236:	f040 81c8 	bne.w	800c5ca <d_exprlist+0xfae>
 800c23a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c23e:	2b03      	cmp	r3, #3
 800c240:	f200 8128 	bhi.w	800c494 <d_exprlist+0xe78>
 800c244:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c248:	01c90004 	.word	0x01c90004
 800c24c:	000d005c 	.word	0x000d005c
 800c250:	465a      	mov	r2, fp
 800c252:	2300      	movs	r3, #0
 800c254:	2134      	movs	r1, #52	; 0x34
 800c256:	4620      	mov	r0, r4
 800c258:	f7fa fc6a 	bl	8006b30 <d_make_comp>
 800c25c:	4683      	mov	fp, r0
 800c25e:	f7ff bacd 	b.w	800b7fc <d_exprlist+0x1e0>
 800c262:	2300      	movs	r3, #0
 800c264:	4618      	mov	r0, r3
 800c266:	4921      	ldr	r1, [pc, #132]	; (800c2ec <d_exprlist+0xcd0>)
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	f002 fdb9 	bl	800ede0 <strcmp>
 800c26e:	9b00      	ldr	r3, [sp, #0]
 800c270:	2800      	cmp	r0, #0
 800c272:	f000 850d 	beq.w	800cc90 <d_exprlist+0x1674>
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	2a6e      	cmp	r2, #110	; 0x6e
 800c27a:	f040 810b 	bne.w	800c494 <d_exprlist+0xe78>
 800c27e:	785b      	ldrb	r3, [r3, #1]
 800c280:	2b77      	cmp	r3, #119	; 0x77
 800c282:	d002      	beq.n	800c28a <d_exprlist+0xc6e>
 800c284:	2b61      	cmp	r3, #97	; 0x61
 800c286:	f040 8105 	bne.w	800c494 <d_exprlist+0xe78>
 800c28a:	215f      	movs	r1, #95	; 0x5f
 800c28c:	4620      	mov	r0, r4
 800c28e:	f7ff f9c5 	bl	800b61c <d_exprlist>
 800c292:	9000      	str	r0, [sp, #0]
 800c294:	4620      	mov	r0, r4
 800c296:	f001 f831 	bl	800d2fc <d_type>
 800c29a:	68e3      	ldr	r3, [r4, #12]
 800c29c:	9001      	str	r0, [sp, #4]
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	2a45      	cmp	r2, #69	; 0x45
 800c2a2:	f000 84e4 	beq.w	800cc6e <d_exprlist+0x1652>
 800c2a6:	2a70      	cmp	r2, #112	; 0x70
 800c2a8:	f000 85ce 	beq.w	800ce48 <d_exprlist+0x182c>
 800c2ac:	2a69      	cmp	r2, #105	; 0x69
 800c2ae:	f040 80f1 	bne.w	800c494 <d_exprlist+0xe78>
 800c2b2:	785b      	ldrb	r3, [r3, #1]
 800c2b4:	2b6c      	cmp	r3, #108	; 0x6c
 800c2b6:	f040 80ed 	bne.w	800c494 <d_exprlist+0xe78>
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f000 fe4c 	bl	800cf58 <d_expression_1>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	9a01      	ldr	r2, [sp, #4]
 800c2c4:	213a      	movs	r1, #58	; 0x3a
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f7fa fc32 	bl	8006b30 <d_make_comp>
 800c2cc:	9a00      	ldr	r2, [sp, #0]
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2139      	movs	r1, #57	; 0x39
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f7fa fc2c 	bl	8006b30 <d_make_comp>
 800c2d8:	465a      	mov	r2, fp
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2138      	movs	r1, #56	; 0x38
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f7fa fc26 	bl	8006b30 <d_make_comp>
 800c2e4:	4683      	mov	fp, r0
 800c2e6:	f7ff ba89 	b.w	800b7fc <d_exprlist+0x1e0>
 800c2ea:	bf00      	nop
 800c2ec:	08016104 	.word	0x08016104
 800c2f0:	080160fc 	.word	0x080160fc
 800c2f4:	08016218 	.word	0x08016218
 800c2f8:	0801621c 	.word	0x0801621c
 800c2fc:	0801640c 	.word	0x0801640c
 800c300:	2300      	movs	r3, #0
 800c302:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c306:	6812      	ldr	r2, [r2, #0]
 800c308:	7851      	ldrb	r1, [r2, #1]
 800c30a:	2963      	cmp	r1, #99	; 0x63
 800c30c:	f000 84d4 	beq.w	800ccb8 <d_exprlist+0x169c>
 800c310:	4620      	mov	r0, r4
 800c312:	9301      	str	r3, [sp, #4]
 800c314:	f000 fe20 	bl	800cf58 <d_expression_1>
 800c318:	9b01      	ldr	r3, [sp, #4]
 800c31a:	9000      	str	r0, [sp, #0]
 800c31c:	4618      	mov	r0, r3
 800c31e:	49d1      	ldr	r1, [pc, #836]	; (800c664 <d_exprlist+0x1048>)
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	f002 fd5d 	bl	800ede0 <strcmp>
 800c326:	9b01      	ldr	r3, [sp, #4]
 800c328:	2800      	cmp	r0, #0
 800c32a:	f000 84be 	beq.w	800ccaa <d_exprlist+0x168e>
 800c32e:	49ce      	ldr	r1, [pc, #824]	; (800c668 <d_exprlist+0x104c>)
 800c330:	4618      	mov	r0, r3
 800c332:	9301      	str	r3, [sp, #4]
 800c334:	f002 fd54 	bl	800ede0 <strcmp>
 800c338:	b138      	cbz	r0, 800c34a <d_exprlist+0xd2e>
 800c33a:	9b01      	ldr	r3, [sp, #4]
 800c33c:	49cb      	ldr	r1, [pc, #812]	; (800c66c <d_exprlist+0x1050>)
 800c33e:	4618      	mov	r0, r3
 800c340:	f002 fd4e 	bl	800ede0 <strcmp>
 800c344:	2800      	cmp	r0, #0
 800c346:	f040 84c8 	bne.w	800ccda <d_exprlist+0x16be>
 800c34a:	4620      	mov	r0, r4
 800c34c:	f001 fc52 	bl	800dbf4 <d_unqualified_name>
 800c350:	68e3      	ldr	r3, [r4, #12]
 800c352:	4602      	mov	r2, r0
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b49      	cmp	r3, #73	; 0x49
 800c358:	d10a      	bne.n	800c370 <d_exprlist+0xd54>
 800c35a:	9001      	str	r0, [sp, #4]
 800c35c:	4620      	mov	r0, r4
 800c35e:	f7fe fae7 	bl	800a930 <d_template_args>
 800c362:	9a01      	ldr	r2, [sp, #4]
 800c364:	4603      	mov	r3, r0
 800c366:	2104      	movs	r1, #4
 800c368:	4620      	mov	r0, r4
 800c36a:	f7fa fbe1 	bl	8006b30 <d_make_comp>
 800c36e:	4602      	mov	r2, r0
 800c370:	4613      	mov	r3, r2
 800c372:	2137      	movs	r1, #55	; 0x37
 800c374:	9a00      	ldr	r2, [sp, #0]
 800c376:	4620      	mov	r0, r4
 800c378:	f7fa fbda 	bl	8006b30 <d_make_comp>
 800c37c:	465a      	mov	r2, fp
 800c37e:	4603      	mov	r3, r0
 800c380:	2136      	movs	r1, #54	; 0x36
 800c382:	4620      	mov	r0, r4
 800c384:	f7fa fbd4 	bl	8006b30 <d_make_comp>
 800c388:	4683      	mov	fp, r0
 800c38a:	f7ff ba37 	b.w	800b7fc <d_exprlist+0x1e0>
 800c38e:	7843      	ldrb	r3, [r0, #1]
 800c390:	2b72      	cmp	r3, #114	; 0x72
 800c392:	f000 82a7 	beq.w	800c8e4 <d_exprlist+0x12c8>
 800c396:	2b70      	cmp	r3, #112	; 0x70
 800c398:	f47f ac06 	bne.w	800bba8 <d_exprlist+0x58c>
 800c39c:	1c82      	adds	r2, r0, #2
 800c39e:	60e2      	str	r2, [r4, #12]
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f000 fdd9 	bl	800cf58 <d_expression_1>
 800c3a6:	465b      	mov	r3, fp
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	2149      	movs	r1, #73	; 0x49
 800c3ac:	e556      	b.n	800be5c <d_exprlist+0x840>
 800c3ae:	7853      	ldrb	r3, [r2, #1]
 800c3b0:	2b70      	cmp	r3, #112	; 0x70
 800c3b2:	f47f af34 	bne.w	800c21e <d_exprlist+0xc02>
 800c3b6:	1c93      	adds	r3, r2, #2
 800c3b8:	60e3      	str	r3, [r4, #12]
 800c3ba:	7893      	ldrb	r3, [r2, #2]
 800c3bc:	2b54      	cmp	r3, #84	; 0x54
 800c3be:	f040 82cc 	bne.w	800c95a <d_exprlist+0x133e>
 800c3c2:	3203      	adds	r2, #3
 800c3c4:	60e2      	str	r2, [r4, #12]
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	6963      	ldr	r3, [r4, #20]
 800c3ca:	69a2      	ldr	r2, [r4, #24]
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	da61      	bge.n	800c494 <d_exprlist+0xe78>
 800c3d0:	6922      	ldr	r2, [r4, #16]
 800c3d2:	1c59      	adds	r1, r3, #1
 800c3d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c3d8:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 800c3dc:	6161      	str	r1, [r4, #20]
 800c3de:	f43f aa0d 	beq.w	800b7fc <d_exprlist+0x1e0>
 800c3e2:	2106      	movs	r1, #6
 800c3e4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800c3e8:	f8cb 0004 	str.w	r0, [fp, #4]
 800c3ec:	f7ff ba06 	b.w	800b7fc <d_exprlist+0x1e0>
 800c3f0:	2b33      	cmp	r3, #51	; 0x33
 800c3f2:	f47f aedb 	bne.w	800c1ac <d_exprlist+0xb90>
 800c3f6:	68e3      	ldr	r3, [r4, #12]
 800c3f8:	781a      	ldrb	r2, [r3, #0]
 800c3fa:	2a5f      	cmp	r2, #95	; 0x5f
 800c3fc:	f000 83b6 	beq.w	800cb6c <d_exprlist+0x1550>
 800c400:	f04f 0900 	mov.w	r9, #0
 800c404:	4620      	mov	r0, r4
 800c406:	f000 fda7 	bl	800cf58 <d_expression_1>
 800c40a:	4603      	mov	r3, r0
 800c40c:	f1b9 0f00 	cmp.w	r9, #0
 800c410:	d005      	beq.n	800c41e <d_exprlist+0xe02>
 800c412:	4602      	mov	r2, r0
 800c414:	2137      	movs	r1, #55	; 0x37
 800c416:	4620      	mov	r0, r4
 800c418:	f7fa fb8a 	bl	8006b30 <d_make_comp>
 800c41c:	4603      	mov	r3, r0
 800c41e:	4642      	mov	r2, r8
 800c420:	2135      	movs	r1, #53	; 0x35
 800c422:	4620      	mov	r0, r4
 800c424:	f7fa fb84 	bl	8006b30 <d_make_comp>
 800c428:	4602      	mov	r2, r0
 800c42a:	f7ff bac8 	b.w	800b9be <d_exprlist+0x3a2>
 800c42e:	2b33      	cmp	r3, #51	; 0x33
 800c430:	f47f aec3 	bne.w	800c1ba <d_exprlist+0xb9e>
 800c434:	68e3      	ldr	r3, [r4, #12]
 800c436:	781a      	ldrb	r2, [r3, #0]
 800c438:	2a5f      	cmp	r2, #95	; 0x5f
 800c43a:	f000 83e4 	beq.w	800cc06 <d_exprlist+0x15ea>
 800c43e:	f04f 0b00 	mov.w	fp, #0
 800c442:	4620      	mov	r0, r4
 800c444:	f000 fd88 	bl	800cf58 <d_expression_1>
 800c448:	4603      	mov	r3, r0
 800c44a:	f1bb 0f00 	cmp.w	fp, #0
 800c44e:	d005      	beq.n	800c45c <d_exprlist+0xe40>
 800c450:	4602      	mov	r2, r0
 800c452:	2137      	movs	r1, #55	; 0x37
 800c454:	4620      	mov	r0, r4
 800c456:	f7fa fb6b 	bl	8006b30 <d_make_comp>
 800c45a:	4603      	mov	r3, r0
 800c45c:	4652      	mov	r2, sl
 800c45e:	2135      	movs	r1, #53	; 0x35
 800c460:	4620      	mov	r0, r4
 800c462:	f7fa fb65 	bl	8006b30 <d_make_comp>
 800c466:	4682      	mov	sl, r0
 800c468:	f7ff ba04 	b.w	800b874 <d_exprlist+0x258>
 800c46c:	784b      	ldrb	r3, [r1, #1]
 800c46e:	2b6e      	cmp	r3, #110	; 0x6e
 800c470:	f47f abbd 	bne.w	800bbee <d_exprlist+0x5d2>
 800c474:	3102      	adds	r1, #2
 800c476:	60e1      	str	r1, [r4, #12]
 800c478:	f7ff b9f0 	b.w	800b85c <d_exprlist+0x240>
 800c47c:	4620      	mov	r0, r4
 800c47e:	f002 fa35 	bl	800e8ec <d_expr_primary>
 800c482:	4682      	mov	sl, r0
 800c484:	f7ff b9f6 	b.w	800b874 <d_exprlist+0x258>
 800c488:	4620      	mov	r0, r4
 800c48a:	f7fa fcf3 	bl	8006e74 <d_template_param>
 800c48e:	4602      	mov	r2, r0
 800c490:	f7ff ba95 	b.w	800b9be <d_exprlist+0x3a2>
 800c494:	f04f 0b00 	mov.w	fp, #0
 800c498:	f7ff b9b0 	b.w	800b7fc <d_exprlist+0x1e0>
 800c49c:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800c4a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c4a2:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c4a6:	f8da 9000 	ldr.w	r9, [sl]
 800c4aa:	3b02      	subs	r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	6323      	str	r3, [r4, #48]	; 0x30
 800c4b0:	4648      	mov	r0, r9
 800c4b2:	496f      	ldr	r1, [pc, #444]	; (800c670 <d_exprlist+0x1054>)
 800c4b4:	f002 fc94 	bl	800ede0 <strcmp>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f000 8281 	beq.w	800c9c0 <d_exprlist+0x13a4>
 800c4be:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c4c2:	2b03      	cmp	r3, #3
 800c4c4:	f63f ae72 	bhi.w	800c1ac <d_exprlist+0xb90>
 800c4c8:	a201      	add	r2, pc, #4	; (adr r2, 800c4d0 <d_exprlist+0xeb4>)
 800c4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ce:	bf00      	nop
 800c4d0:	0800bfb5 	.word	0x0800bfb5
 800c4d4:	0800c79d 	.word	0x0800c79d
 800c4d8:	0800c051 	.word	0x0800c051
 800c4dc:	0800bfc9 	.word	0x0800bfc9
 800c4e0:	68e2      	ldrle	r2, [r4, #12]
 800c4e2:	f04f 0900 	movgt.w	r9, #0
 800c4e6:	7813      	ldrbgt	r3, [r2, #0]
 800c4e8:	f7ff babd 	b.w	800ba66 <d_exprlist+0x44a>
 800c4ec:	6843      	ldr	r3, [r0, #4]
 800c4ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c4f0:	689a      	ldr	r2, [r3, #8]
 800c4f2:	f8d3 b000 	ldr.w	fp, [r3]
 800c4f6:	3a02      	subs	r2, #2
 800c4f8:	440a      	add	r2, r1
 800c4fa:	6322      	str	r2, [r4, #48]	; 0x30
 800c4fc:	4658      	mov	r0, fp
 800c4fe:	495c      	ldr	r1, [pc, #368]	; (800c670 <d_exprlist+0x1054>)
 800c500:	9300      	str	r3, [sp, #0]
 800c502:	f002 fc6d 	bl	800ede0 <strcmp>
 800c506:	9b00      	ldr	r3, [sp, #0]
 800c508:	2800      	cmp	r0, #0
 800c50a:	f000 8272 	beq.w	800c9f2 <d_exprlist+0x13d6>
 800c50e:	68da      	ldr	r2, [r3, #12]
 800c510:	2a03      	cmp	r2, #3
 800c512:	f63f ae52 	bhi.w	800c1ba <d_exprlist+0xb9e>
 800c516:	a301      	add	r3, pc, #4	; (adr r3, 800c51c <d_exprlist+0xf00>)
 800c518:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c51c:	0800bd51 	.word	0x0800bd51
 800c520:	0800c7e7 	.word	0x0800c7e7
 800c524:	0800bded 	.word	0x0800bded
 800c528:	0800bd65 	.word	0x0800bd65
 800c52c:	3301      	adds	r3, #1
 800c52e:	60e3      	str	r3, [r4, #12]
 800c530:	f04f 0b00 	mov.w	fp, #0
 800c534:	4620      	mov	r0, r4
 800c536:	f000 fd0f 	bl	800cf58 <d_expression_1>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f1bb 0f00 	cmp.w	fp, #0
 800c540:	d005      	beq.n	800c54e <d_exprlist+0xf32>
 800c542:	4602      	mov	r2, r0
 800c544:	2137      	movs	r1, #55	; 0x37
 800c546:	4620      	mov	r0, r4
 800c548:	f7fa faf2 	bl	8006b30 <d_make_comp>
 800c54c:	4603      	mov	r3, r0
 800c54e:	464a      	mov	r2, r9
 800c550:	2135      	movs	r1, #53	; 0x35
 800c552:	4620      	mov	r0, r4
 800c554:	f7fa faec 	bl	8006b30 <d_make_comp>
 800c558:	4681      	mov	r9, r0
 800c55a:	f7ff b9e1 	b.w	800b920 <d_exprlist+0x304>
 800c55e:	3101      	adds	r1, #1
 800c560:	60e1      	str	r1, [r4, #12]
 800c562:	f7ff b9bf 	b.w	800b8e4 <d_exprlist+0x2c8>
 800c566:	2b33      	cmp	r3, #51	; 0x33
 800c568:	d1ba      	bne.n	800c4e0 <d_exprlist+0xec4>
 800c56a:	68e3      	ldr	r3, [r4, #12]
 800c56c:	781a      	ldrb	r2, [r3, #0]
 800c56e:	2a5f      	cmp	r2, #95	; 0x5f
 800c570:	f000 8286 	beq.w	800ca80 <d_exprlist+0x1464>
 800c574:	f04f 0b00 	mov.w	fp, #0
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 fced 	bl	800cf58 <d_expression_1>
 800c57e:	4603      	mov	r3, r0
 800c580:	f1bb 0f00 	cmp.w	fp, #0
 800c584:	f000 8283 	beq.w	800ca8e <d_exprlist+0x1472>
 800c588:	4602      	mov	r2, r0
 800c58a:	2137      	movs	r1, #55	; 0x37
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7fa facf 	bl	8006b30 <d_make_comp>
 800c592:	464a      	mov	r2, r9
 800c594:	4603      	mov	r3, r0
 800c596:	2135      	movs	r1, #53	; 0x35
 800c598:	e460      	b.n	800be5c <d_exprlist+0x840>
 800c59a:	3102      	adds	r1, #2
 800c59c:	60e1      	str	r1, [r4, #12]
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 feac 	bl	800d2fc <d_type>
 800c5a4:	4681      	mov	r9, r0
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f001 fb24 	bl	800dbf4 <d_unqualified_name>
 800c5ac:	68e3      	ldr	r3, [r4, #12]
 800c5ae:	4683      	mov	fp, r0
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b49      	cmp	r3, #73	; 0x49
 800c5b4:	f000 81e1 	beq.w	800c97a <d_exprlist+0x135e>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	464a      	mov	r2, r9
 800c5bc:	2101      	movs	r1, #1
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f7fa fab6 	bl	8006b30 <d_make_comp>
 800c5c4:	4681      	mov	r9, r0
 800c5c6:	f7ff b9ab 	b.w	800b920 <d_exprlist+0x304>
 800c5ca:	2b33      	cmp	r3, #51	; 0x33
 800c5cc:	f47f af62 	bne.w	800c494 <d_exprlist+0xe78>
 800c5d0:	68e3      	ldr	r3, [r4, #12]
 800c5d2:	781a      	ldrb	r2, [r3, #0]
 800c5d4:	2a5f      	cmp	r2, #95	; 0x5f
 800c5d6:	f000 83b7 	beq.w	800cd48 <d_exprlist+0x172c>
 800c5da:	2200      	movs	r2, #0
 800c5dc:	4620      	mov	r0, r4
 800c5de:	9200      	str	r2, [sp, #0]
 800c5e0:	f000 fcba 	bl	800cf58 <d_expression_1>
 800c5e4:	9a00      	ldr	r2, [sp, #0]
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	b12a      	cbz	r2, 800c5f6 <d_exprlist+0xfda>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	2137      	movs	r1, #55	; 0x37
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f7fa fa9e 	bl	8006b30 <d_make_comp>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	465a      	mov	r2, fp
 800c5f8:	2135      	movs	r1, #53	; 0x35
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f7fa fa98 	bl	8006b30 <d_make_comp>
 800c600:	4683      	mov	fp, r0
 800c602:	f7ff b8fb 	b.w	800b7fc <d_exprlist+0x1e0>
 800c606:	f1bb 0f00 	cmp.w	fp, #0
 800c60a:	d091      	beq.n	800c530 <d_exprlist+0xf14>
 800c60c:	f89b 2000 	ldrb.w	r2, [fp]
 800c610:	2a70      	cmp	r2, #112	; 0x70
 800c612:	d001      	beq.n	800c618 <d_exprlist+0xffc>
 800c614:	2a6d      	cmp	r2, #109	; 0x6d
 800c616:	d18b      	bne.n	800c530 <d_exprlist+0xf14>
 800c618:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d187      	bne.n	800c530 <d_exprlist+0xf14>
 800c620:	68e3      	ldr	r3, [r4, #12]
 800c622:	781a      	ldrb	r2, [r3, #0]
 800c624:	2a5f      	cmp	r2, #95	; 0x5f
 800c626:	d081      	beq.n	800c52c <d_exprlist+0xf10>
 800c628:	f04f 0b01 	mov.w	fp, #1
 800c62c:	e782      	b.n	800c534 <d_exprlist+0xf18>
 800c62e:	4620      	mov	r0, r4
 800c630:	f7fe f97e 	bl	800a930 <d_template_args>
 800c634:	4642      	mov	r2, r8
 800c636:	4603      	mov	r3, r0
 800c638:	2104      	movs	r1, #4
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7fa fa78 	bl	8006b30 <d_make_comp>
 800c640:	4602      	mov	r2, r0
 800c642:	f7ff b9bc 	b.w	800b9be <d_exprlist+0x3a2>
 800c646:	4620      	mov	r0, r4
 800c648:	f002 f950 	bl	800e8ec <d_expr_primary>
 800c64c:	4683      	mov	fp, r0
 800c64e:	f7ff b8d5 	b.w	800b7fc <d_exprlist+0x1e0>
 800c652:	4620      	mov	r0, r4
 800c654:	f7fa fbf6 	bl	8006e44 <d_compact_number>
 800c658:	3001      	adds	r0, #1
 800c65a:	f47f aa7a 	bne.w	800bb52 <d_exprlist+0x536>
 800c65e:	4681      	mov	r9, r0
 800c660:	f7ff b95e 	b.w	800b920 <d_exprlist+0x304>
 800c664:	080160fc 	.word	0x080160fc
 800c668:	08016218 	.word	0x08016218
 800c66c:	0801621c 	.word	0x0801621c
 800c670:	0801640c 	.word	0x0801640c
 800c674:	4620      	mov	r0, r4
 800c676:	f002 f939 	bl	800e8ec <d_expr_primary>
 800c67a:	68e2      	ldr	r2, [r4, #12]
 800c67c:	4681      	mov	r9, r0
 800c67e:	7813      	ldrb	r3, [r2, #0]
 800c680:	f7ff b9f1 	b.w	800ba66 <d_exprlist+0x44a>
 800c684:	4620      	mov	r0, r4
 800c686:	f7fa fbf5 	bl	8006e74 <d_template_param>
 800c68a:	4683      	mov	fp, r0
 800c68c:	f7ff b8b6 	b.w	800b7fc <d_exprlist+0x1e0>
 800c690:	4620      	mov	r0, r4
 800c692:	f7fe f94d 	bl	800a930 <d_template_args>
 800c696:	4652      	mov	r2, sl
 800c698:	4603      	mov	r3, r0
 800c69a:	2104      	movs	r1, #4
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7fa fa47 	bl	8006b30 <d_make_comp>
 800c6a2:	4682      	mov	sl, r0
 800c6a4:	f7ff b8e6 	b.w	800b874 <d_exprlist+0x258>
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f7fa fbe3 	bl	8006e74 <d_template_param>
 800c6ae:	68e2      	ldr	r2, [r4, #12]
 800c6b0:	4681      	mov	r9, r0
 800c6b2:	7813      	ldrb	r3, [r2, #0]
 800c6b4:	f7ff b9d7 	b.w	800ba66 <d_exprlist+0x44a>
 800c6b8:	6842      	ldr	r2, [r0, #4]
 800c6ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c6bc:	6891      	ldr	r1, [r2, #8]
 800c6be:	6813      	ldr	r3, [r2, #0]
 800c6c0:	3902      	subs	r1, #2
 800c6c2:	4401      	add	r1, r0
 800c6c4:	6321      	str	r1, [r4, #48]	; 0x30
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	49d2      	ldr	r1, [pc, #840]	; (800ca14 <d_exprlist+0x13f8>)
 800c6ca:	9201      	str	r2, [sp, #4]
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	f002 fb87 	bl	800ede0 <strcmp>
 800c6d2:	9b00      	ldr	r3, [sp, #0]
 800c6d4:	9a01      	ldr	r2, [sp, #4]
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	f000 8190 	beq.w	800c9fc <d_exprlist+0x13e0>
 800c6dc:	68d2      	ldr	r2, [r2, #12]
 800c6de:	2a03      	cmp	r2, #3
 800c6e0:	f63f aed8 	bhi.w	800c494 <d_exprlist+0xe78>
 800c6e4:	a101      	add	r1, pc, #4	; (adr r1, 800c6ec <d_exprlist+0x10d0>)
 800c6e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6ea:	bf00      	nop
 800c6ec:	0800c251 	.word	0x0800c251
 800c6f0:	0800c9cb 	.word	0x0800c9cb
 800c6f4:	0800c303 	.word	0x0800c303
 800c6f8:	0800c265 	.word	0x0800c265
 800c6fc:	6843      	ldr	r3, [r0, #4]
 800c6fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c700:	689a      	ldr	r2, [r3, #8]
 800c702:	f8d3 b000 	ldr.w	fp, [r3]
 800c706:	3a02      	subs	r2, #2
 800c708:	440a      	add	r2, r1
 800c70a:	6322      	str	r2, [r4, #48]	; 0x30
 800c70c:	4658      	mov	r0, fp
 800c70e:	49c1      	ldr	r1, [pc, #772]	; (800ca14 <d_exprlist+0x13f8>)
 800c710:	9300      	str	r3, [sp, #0]
 800c712:	f002 fb65 	bl	800ede0 <strcmp>
 800c716:	9b00      	ldr	r3, [sp, #0]
 800c718:	2800      	cmp	r0, #0
 800c71a:	f000 81fd 	beq.w	800cb18 <d_exprlist+0x14fc>
 800c71e:	68da      	ldr	r2, [r3, #12]
 800c720:	2a03      	cmp	r2, #3
 800c722:	f63f aedd 	bhi.w	800c4e0 <d_exprlist+0xec4>
 800c726:	a301      	add	r3, pc, #4	; (adr r3, 800c72c <d_exprlist+0x1110>)
 800c728:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c72c:	0800be57 	.word	0x0800be57
 800c730:	0800c991 	.word	0x0800c991
 800c734:	0800beef 	.word	0x0800beef
 800c738:	0800be6f 	.word	0x0800be6f
 800c73c:	3102      	adds	r1, #2
 800c73e:	60e1      	str	r1, [r4, #12]
 800c740:	4620      	mov	r0, r4
 800c742:	f000 fc09 	bl	800cf58 <d_expression_1>
 800c746:	2300      	movs	r3, #0
 800c748:	4602      	mov	r2, r0
 800c74a:	2149      	movs	r1, #73	; 0x49
 800c74c:	4620      	mov	r0, r4
 800c74e:	f7fa f9ef 	bl	8006b30 <d_make_comp>
 800c752:	4681      	mov	r9, r0
 800c754:	f7ff b8e4 	b.w	800b920 <d_exprlist+0x304>
 800c758:	1c83      	adds	r3, r0, #2
 800c75a:	60e3      	str	r3, [r4, #12]
 800c75c:	7883      	ldrb	r3, [r0, #2]
 800c75e:	2b54      	cmp	r3, #84	; 0x54
 800c760:	f040 80d9 	bne.w	800c916 <d_exprlist+0x12fa>
 800c764:	1cc2      	adds	r2, r0, #3
 800c766:	4658      	mov	r0, fp
 800c768:	60e2      	str	r2, [r4, #12]
 800c76a:	6963      	ldr	r3, [r4, #20]
 800c76c:	69a1      	ldr	r1, [r4, #24]
 800c76e:	428b      	cmp	r3, r1
 800c770:	f280 80cc 	bge.w	800c90c <d_exprlist+0x12f0>
 800c774:	6921      	ldr	r1, [r4, #16]
 800c776:	f103 0e01 	add.w	lr, r3, #1
 800c77a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c77e:	eb11 0983 	adds.w	r9, r1, r3, lsl #2
 800c782:	f8c4 e014 	str.w	lr, [r4, #20]
 800c786:	f43f ab6e 	beq.w	800be66 <d_exprlist+0x84a>
 800c78a:	f04f 0e06 	mov.w	lr, #6
 800c78e:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 800c792:	f8c9 0004 	str.w	r0, [r9, #4]
 800c796:	7813      	ldrb	r3, [r2, #0]
 800c798:	f7ff b965 	b.w	800ba66 <d_exprlist+0x44a>
 800c79c:	f1b9 0f00 	cmp.w	r9, #0
 800c7a0:	f43f ae2e 	beq.w	800c400 <d_exprlist+0xde4>
 800c7a4:	f899 3000 	ldrb.w	r3, [r9]
 800c7a8:	2b70      	cmp	r3, #112	; 0x70
 800c7aa:	d002      	beq.n	800c7b2 <d_exprlist+0x1196>
 800c7ac:	2b6d      	cmp	r3, #109	; 0x6d
 800c7ae:	f47f ae27 	bne.w	800c400 <d_exprlist+0xde4>
 800c7b2:	f899 2001 	ldrb.w	r2, [r9, #1]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	f47f ae22 	bne.w	800c400 <d_exprlist+0xde4>
 800c7bc:	68e3      	ldr	r3, [r4, #12]
 800c7be:	781a      	ldrb	r2, [r3, #0]
 800c7c0:	2a5f      	cmp	r2, #95	; 0x5f
 800c7c2:	f000 8376 	beq.w	800ceb2 <d_exprlist+0x1896>
 800c7c6:	f04f 0901 	mov.w	r9, #1
 800c7ca:	e61b      	b.n	800c404 <d_exprlist+0xde8>
 800c7cc:	68e3      	ldr	r3, [r4, #12]
 800c7ce:	781a      	ldrb	r2, [r3, #0]
 800c7d0:	2a5f      	cmp	r2, #95	; 0x5f
 800c7d2:	f47f aead 	bne.w	800c530 <d_exprlist+0xf14>
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	60e3      	str	r3, [r4, #12]
 800c7da:	2145      	movs	r1, #69	; 0x45
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f7fe ff1d 	bl	800b61c <d_exprlist>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	e6b3      	b.n	800c54e <d_exprlist+0xf32>
 800c7e6:	f1bb 0f00 	cmp.w	fp, #0
 800c7ea:	f43f ae28 	beq.w	800c43e <d_exprlist+0xe22>
 800c7ee:	f89b 2000 	ldrb.w	r2, [fp]
 800c7f2:	2a70      	cmp	r2, #112	; 0x70
 800c7f4:	d002      	beq.n	800c7fc <d_exprlist+0x11e0>
 800c7f6:	2a6d      	cmp	r2, #109	; 0x6d
 800c7f8:	f47f ae21 	bne.w	800c43e <d_exprlist+0xe22>
 800c7fc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c800:	4293      	cmp	r3, r2
 800c802:	f47f ae1c 	bne.w	800c43e <d_exprlist+0xe22>
 800c806:	68e3      	ldr	r3, [r4, #12]
 800c808:	781a      	ldrb	r2, [r3, #0]
 800c80a:	2a5f      	cmp	r2, #95	; 0x5f
 800c80c:	f000 82f7 	beq.w	800cdfe <d_exprlist+0x17e2>
 800c810:	f04f 0b01 	mov.w	fp, #1
 800c814:	e615      	b.n	800c442 <d_exprlist+0xe26>
 800c816:	3204      	adds	r2, #4
 800c818:	60e2      	str	r2, [r4, #12]
 800c81a:	4620      	mov	r0, r4
 800c81c:	f000 fd6e 	bl	800d2fc <d_type>
 800c820:	4680      	mov	r8, r0
 800c822:	4620      	mov	r0, r4
 800c824:	f001 f9e6 	bl	800dbf4 <d_unqualified_name>
 800c828:	68e3      	ldr	r3, [r4, #12]
 800c82a:	4681      	mov	r9, r0
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	2b49      	cmp	r3, #73	; 0x49
 800c830:	f000 810c 	beq.w	800ca4c <d_exprlist+0x1430>
 800c834:	4603      	mov	r3, r0
 800c836:	4642      	mov	r2, r8
 800c838:	2101      	movs	r1, #1
 800c83a:	4620      	mov	r0, r4
 800c83c:	f7fa f978 	bl	8006b30 <d_make_comp>
 800c840:	4602      	mov	r2, r0
 800c842:	f7ff b8bc 	b.w	800b9be <d_exprlist+0x3a2>
 800c846:	4620      	mov	r0, r4
 800c848:	f000 fd58 	bl	800d2fc <d_type>
 800c84c:	4603      	mov	r3, r0
 800c84e:	e67e      	b.n	800c54e <d_exprlist+0xf32>
 800c850:	4620      	mov	r0, r4
 800c852:	f7fe f86d 	bl	800a930 <d_template_args>
 800c856:	464a      	mov	r2, r9
 800c858:	4603      	mov	r3, r0
 800c85a:	2104      	movs	r1, #4
 800c85c:	f7ff bafe 	b.w	800be5c <d_exprlist+0x840>
 800c860:	3102      	adds	r1, #2
 800c862:	60e1      	str	r1, [r4, #12]
 800c864:	4620      	mov	r0, r4
 800c866:	f000 fd49 	bl	800d2fc <d_type>
 800c86a:	4682      	mov	sl, r0
 800c86c:	4620      	mov	r0, r4
 800c86e:	f001 f9c1 	bl	800dbf4 <d_unqualified_name>
 800c872:	68e3      	ldr	r3, [r4, #12]
 800c874:	4683      	mov	fp, r0
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2b49      	cmp	r3, #73	; 0x49
 800c87a:	f000 80dc 	beq.w	800ca36 <d_exprlist+0x141a>
 800c87e:	4603      	mov	r3, r0
 800c880:	4652      	mov	r2, sl
 800c882:	2101      	movs	r1, #1
 800c884:	4620      	mov	r0, r4
 800c886:	f7fa f953 	bl	8006b30 <d_make_comp>
 800c88a:	4682      	mov	sl, r0
 800c88c:	f7fe bff2 	b.w	800b874 <d_exprlist+0x258>
 800c890:	7812      	ldrb	r2, [r2, #0]
 800c892:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800c896:	2901      	cmp	r1, #1
 800c898:	d903      	bls.n	800c8a2 <d_exprlist+0x1286>
 800c89a:	3a72      	subs	r2, #114	; 0x72
 800c89c:	2a01      	cmp	r2, #1
 800c89e:	f63f aa29 	bhi.w	800bcf4 <d_exprlist+0x6d8>
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f000 fd2a 	bl	800d2fc <d_type>
 800c8a8:	9000      	str	r0, [sp, #0]
 800c8aa:	f7ff ba27 	b.w	800bcfc <d_exprlist+0x6e0>
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 fb52 	bl	800cf58 <d_expression_1>
 800c8b4:	9000      	str	r0, [sp, #0]
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 fb4e 	bl	800cf58 <d_expression_1>
 800c8bc:	4683      	mov	fp, r0
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 fb4a 	bl	800cf58 <d_expression_1>
 800c8c4:	f7ff b9f9 	b.w	800bcba <d_exprlist+0x69e>
 800c8c8:	3204      	adds	r2, #4
 800c8ca:	60e2      	str	r2, [r4, #12]
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 fb43 	bl	800cf58 <d_expression_1>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	2149      	movs	r1, #73	; 0x49
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f7fa f929 	bl	8006b30 <d_make_comp>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	f7ff b86d 	b.w	800b9be <d_exprlist+0x3a2>
 800c8e4:	1c82      	adds	r2, r0, #2
 800c8e6:	60e2      	str	r2, [r4, #12]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f000 fd07 	bl	800d2fc <d_type>
 800c8ee:	4681      	mov	r9, r0
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f001 f97f 	bl	800dbf4 <d_unqualified_name>
 800c8f6:	68e3      	ldr	r3, [r4, #12]
 800c8f8:	4683      	mov	fp, r0
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b49      	cmp	r3, #73	; 0x49
 800c8fe:	f000 818a 	beq.w	800cc16 <d_exprlist+0x15fa>
 800c902:	4603      	mov	r3, r0
 800c904:	464a      	mov	r2, r9
 800c906:	2101      	movs	r1, #1
 800c908:	f7ff baa8 	b.w	800be5c <d_exprlist+0x840>
 800c90c:	7813      	ldrb	r3, [r2, #0]
 800c90e:	f04f 0900 	mov.w	r9, #0
 800c912:	f7ff b8a8 	b.w	800ba66 <d_exprlist+0x44a>
 800c916:	4620      	mov	r0, r4
 800c918:	f7fa fa94 	bl	8006e44 <d_compact_number>
 800c91c:	3001      	adds	r0, #1
 800c91e:	68e2      	ldr	r2, [r4, #12]
 800c920:	f47f af23 	bne.w	800c76a <d_exprlist+0x114e>
 800c924:	4681      	mov	r9, r0
 800c926:	7813      	ldrb	r3, [r2, #0]
 800c928:	f7ff b89d 	b.w	800ba66 <d_exprlist+0x44a>
 800c92c:	3202      	adds	r2, #2
 800c92e:	60e2      	str	r2, [r4, #12]
 800c930:	4620      	mov	r0, r4
 800c932:	f000 fce3 	bl	800d2fc <d_type>
 800c936:	4683      	mov	fp, r0
 800c938:	4620      	mov	r0, r4
 800c93a:	f001 f95b 	bl	800dbf4 <d_unqualified_name>
 800c93e:	68e3      	ldr	r3, [r4, #12]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	2b49      	cmp	r3, #73	; 0x49
 800c944:	f000 8198 	beq.w	800cc78 <d_exprlist+0x165c>
 800c948:	4603      	mov	r3, r0
 800c94a:	465a      	mov	r2, fp
 800c94c:	2101      	movs	r1, #1
 800c94e:	4620      	mov	r0, r4
 800c950:	f7fa f8ee 	bl	8006b30 <d_make_comp>
 800c954:	4683      	mov	fp, r0
 800c956:	f7fe bf51 	b.w	800b7fc <d_exprlist+0x1e0>
 800c95a:	4620      	mov	r0, r4
 800c95c:	f7fa fa72 	bl	8006e44 <d_compact_number>
 800c960:	3001      	adds	r0, #1
 800c962:	f47f ad31 	bne.w	800c3c8 <d_exprlist+0xdac>
 800c966:	4683      	mov	fp, r0
 800c968:	f7fe bf48 	b.w	800b7fc <d_exprlist+0x1e0>
 800c96c:	2145      	movs	r1, #69	; 0x45
 800c96e:	4620      	mov	r0, r4
 800c970:	f7fe fe54 	bl	800b61c <d_exprlist>
 800c974:	4683      	mov	fp, r0
 800c976:	f7ff b9dd 	b.w	800bd34 <d_exprlist+0x718>
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7fd ffd8 	bl	800a930 <d_template_args>
 800c980:	465a      	mov	r2, fp
 800c982:	4603      	mov	r3, r0
 800c984:	2104      	movs	r1, #4
 800c986:	4620      	mov	r0, r4
 800c988:	f7fa f8d2 	bl	8006b30 <d_make_comp>
 800c98c:	4603      	mov	r3, r0
 800c98e:	e614      	b.n	800c5ba <d_exprlist+0xf9e>
 800c990:	f1bb 0f00 	cmp.w	fp, #0
 800c994:	f43f adee 	beq.w	800c574 <d_exprlist+0xf58>
 800c998:	f89b 2000 	ldrb.w	r2, [fp]
 800c99c:	2a70      	cmp	r2, #112	; 0x70
 800c99e:	d002      	beq.n	800c9a6 <d_exprlist+0x138a>
 800c9a0:	2a6d      	cmp	r2, #109	; 0x6d
 800c9a2:	f47f ade7 	bne.w	800c574 <d_exprlist+0xf58>
 800c9a6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	f47f ade2 	bne.w	800c574 <d_exprlist+0xf58>
 800c9b0:	68e3      	ldr	r3, [r4, #12]
 800c9b2:	781a      	ldrb	r2, [r3, #0]
 800c9b4:	2a5f      	cmp	r2, #95	; 0x5f
 800c9b6:	f000 81cf 	beq.w	800cd58 <d_exprlist+0x173c>
 800c9ba:	f04f 0b01 	mov.w	fp, #1
 800c9be:	e5db      	b.n	800c578 <d_exprlist+0xf5c>
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fc9b 	bl	800d2fc <d_type>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	e529      	b.n	800c41e <d_exprlist+0xe02>
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f43f ae05 	beq.w	800c5da <d_exprlist+0xfbe>
 800c9d0:	781a      	ldrb	r2, [r3, #0]
 800c9d2:	2a70      	cmp	r2, #112	; 0x70
 800c9d4:	d002      	beq.n	800c9dc <d_exprlist+0x13c0>
 800c9d6:	2a6d      	cmp	r2, #109	; 0x6d
 800c9d8:	f47f adff 	bne.w	800c5da <d_exprlist+0xfbe>
 800c9dc:	785b      	ldrb	r3, [r3, #1]
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	f47f adfb 	bne.w	800c5da <d_exprlist+0xfbe>
 800c9e4:	68e3      	ldr	r3, [r4, #12]
 800c9e6:	781a      	ldrb	r2, [r3, #0]
 800c9e8:	2a5f      	cmp	r2, #95	; 0x5f
 800c9ea:	f000 81b8 	beq.w	800cd5e <d_exprlist+0x1742>
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	e5f4      	b.n	800c5dc <d_exprlist+0xfc0>
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f000 fc82 	bl	800d2fc <d_type>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	e52f      	b.n	800c45c <d_exprlist+0xe40>
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f000 fc7d 	bl	800d2fc <d_type>
 800ca02:	4603      	mov	r3, r0
 800ca04:	e5f7      	b.n	800c5f6 <d_exprlist+0xfda>
 800ca06:	2145      	movs	r1, #69	; 0x45
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f7fe fe07 	bl	800b61c <d_exprlist>
 800ca0e:	4681      	mov	r9, r0
 800ca10:	f7ff bb45 	b.w	800c09e <d_exprlist+0xa82>
 800ca14:	0801640c 	.word	0x0801640c
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800ca1e:	2a01      	cmp	r2, #1
 800ca20:	d903      	bls.n	800ca2a <d_exprlist+0x140e>
 800ca22:	3b72      	subs	r3, #114	; 0x72
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	f63f ab1a 	bhi.w	800c05e <d_exprlist+0xa42>
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 fc66 	bl	800d2fc <d_type>
 800ca30:	4682      	mov	sl, r0
 800ca32:	f7ff bb18 	b.w	800c066 <d_exprlist+0xa4a>
 800ca36:	4620      	mov	r0, r4
 800ca38:	f7fd ff7a 	bl	800a930 <d_template_args>
 800ca3c:	465a      	mov	r2, fp
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2104      	movs	r1, #4
 800ca42:	4620      	mov	r0, r4
 800ca44:	f7fa f874 	bl	8006b30 <d_make_comp>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	e719      	b.n	800c880 <d_exprlist+0x1264>
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f7fd ff6f 	bl	800a930 <d_template_args>
 800ca52:	464a      	mov	r2, r9
 800ca54:	4603      	mov	r3, r0
 800ca56:	2104      	movs	r1, #4
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7fa f869 	bl	8006b30 <d_make_comp>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	e6e9      	b.n	800c836 <d_exprlist+0x121a>
 800ca62:	7812      	ldrb	r2, [r2, #0]
 800ca64:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800ca68:	2901      	cmp	r1, #1
 800ca6a:	d903      	bls.n	800ca74 <d_exprlist+0x1458>
 800ca6c:	3a72      	subs	r2, #114	; 0x72
 800ca6e:	2a01      	cmp	r2, #1
 800ca70:	f63f a9c3 	bhi.w	800bdfa <d_exprlist+0x7de>
 800ca74:	4620      	mov	r0, r4
 800ca76:	f000 fc41 	bl	800d2fc <d_type>
 800ca7a:	9000      	str	r0, [sp, #0]
 800ca7c:	f7ff b9c1 	b.w	800be02 <d_exprlist+0x7e6>
 800ca80:	3301      	adds	r3, #1
 800ca82:	60e3      	str	r3, [r4, #12]
 800ca84:	2145      	movs	r1, #69	; 0x45
 800ca86:	4620      	mov	r0, r4
 800ca88:	f7fe fdc8 	bl	800b61c <d_exprlist>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	464a      	mov	r2, r9
 800ca90:	2135      	movs	r1, #53	; 0x35
 800ca92:	f7ff b9e3 	b.w	800be5c <d_exprlist+0x840>
 800ca96:	2145      	movs	r1, #69	; 0x45
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f7fe fdbf 	bl	800b61c <d_exprlist>
 800ca9e:	4683      	mov	fp, r0
 800caa0:	f7ff b9cb 	b.w	800be3a <d_exprlist+0x81e>
 800caa4:	3202      	adds	r2, #2
 800caa6:	60e2      	str	r2, [r4, #12]
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 fa55 	bl	800cf58 <d_expression_1>
 800caae:	2300      	movs	r3, #0
 800cab0:	4602      	mov	r2, r0
 800cab2:	2149      	movs	r1, #73	; 0x49
 800cab4:	4620      	mov	r0, r4
 800cab6:	f7fa f83b 	bl	8006b30 <d_make_comp>
 800caba:	4683      	mov	fp, r0
 800cabc:	f7fe be9e 	b.w	800b7fc <d_exprlist+0x1e0>
 800cac0:	4620      	mov	r0, r4
 800cac2:	f000 fa49 	bl	800cf58 <d_expression_1>
 800cac6:	4681      	mov	r9, r0
 800cac8:	4620      	mov	r0, r4
 800caca:	f000 fa45 	bl	800cf58 <d_expression_1>
 800cace:	4682      	mov	sl, r0
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 fa41 	bl	800cf58 <d_expression_1>
 800cad6:	f7ff baa5 	b.w	800c024 <d_exprlist+0xa08>
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 fa3c 	bl	800cf58 <d_expression_1>
 800cae0:	4683      	mov	fp, r0
 800cae2:	f7ff b927 	b.w	800bd34 <d_exprlist+0x718>
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7fd ff22 	bl	800a930 <d_template_args>
 800caec:	465a      	mov	r2, fp
 800caee:	4603      	mov	r3, r0
 800caf0:	2104      	movs	r1, #4
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7fa f81c 	bl	8006b30 <d_make_comp>
 800caf8:	4683      	mov	fp, r0
 800cafa:	f7ff b91b 	b.w	800bd34 <d_exprlist+0x718>
 800cafe:	4620      	mov	r0, r4
 800cb00:	f000 fa2a 	bl	800cf58 <d_expression_1>
 800cb04:	9000      	str	r0, [sp, #0]
 800cb06:	4620      	mov	r0, r4
 800cb08:	f000 fa26 	bl	800cf58 <d_expression_1>
 800cb0c:	4683      	mov	fp, r0
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f000 fa22 	bl	800cf58 <d_expression_1>
 800cb14:	f7ff b954 	b.w	800bdc0 <d_exprlist+0x7a4>
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f000 fbef 	bl	800d2fc <d_type>
 800cb1e:	464a      	mov	r2, r9
 800cb20:	4603      	mov	r3, r0
 800cb22:	2135      	movs	r1, #53	; 0x35
 800cb24:	f7ff b99a 	b.w	800be5c <d_exprlist+0x840>
 800cb28:	3301      	adds	r3, #1
 800cb2a:	60e3      	str	r3, [r4, #12]
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	f7ff b8c4 	b.w	800bcba <d_exprlist+0x69e>
 800cb32:	785a      	ldrb	r2, [r3, #1]
 800cb34:	2a69      	cmp	r2, #105	; 0x69
 800cb36:	f47f ab40 	bne.w	800c1ba <d_exprlist+0xb9e>
 800cb3a:	3302      	adds	r3, #2
 800cb3c:	60e3      	str	r3, [r4, #12]
 800cb3e:	2145      	movs	r1, #69	; 0x45
 800cb40:	4620      	mov	r0, r4
 800cb42:	f7fe fd6b 	bl	800b61c <d_exprlist>
 800cb46:	f7ff b93b 	b.w	800bdc0 <d_exprlist+0x7a4>
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	60e3      	str	r3, [r4, #12]
 800cb4e:	2000      	movs	r0, #0
 800cb50:	f7ff b936 	b.w	800bdc0 <d_exprlist+0x7a4>
 800cb54:	4620      	mov	r0, r4
 800cb56:	f000 f9ff 	bl	800cf58 <d_expression_1>
 800cb5a:	4683      	mov	fp, r0
 800cb5c:	f7ff b96d 	b.w	800be3a <d_exprlist+0x81e>
 800cb60:	4620      	mov	r0, r4
 800cb62:	f000 f9f9 	bl	800cf58 <d_expression_1>
 800cb66:	4683      	mov	fp, r0
 800cb68:	f7ff b9f1 	b.w	800bf4e <d_exprlist+0x932>
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	60e3      	str	r3, [r4, #12]
 800cb70:	2145      	movs	r1, #69	; 0x45
 800cb72:	4620      	mov	r0, r4
 800cb74:	f7fe fd52 	bl	800b61c <d_exprlist>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	e450      	b.n	800c41e <d_exprlist+0xe02>
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f000 f9eb 	bl	800cf58 <d_expression_1>
 800cb82:	4681      	mov	r9, r0
 800cb84:	f7ff ba8b 	b.w	800c09e <d_exprlist+0xa82>
 800cb88:	785a      	ldrb	r2, [r3, #1]
 800cb8a:	2a69      	cmp	r2, #105	; 0x69
 800cb8c:	f47f ab0e 	bne.w	800c1ac <d_exprlist+0xb90>
 800cb90:	3302      	adds	r3, #2
 800cb92:	60e3      	str	r3, [r4, #12]
 800cb94:	2145      	movs	r1, #69	; 0x45
 800cb96:	4620      	mov	r0, r4
 800cb98:	f7fe fd40 	bl	800b61c <d_exprlist>
 800cb9c:	f7ff ba42 	b.w	800c024 <d_exprlist+0xa08>
 800cba0:	3301      	adds	r3, #1
 800cba2:	60e3      	str	r3, [r4, #12]
 800cba4:	2000      	movs	r0, #0
 800cba6:	f7ff ba3d 	b.w	800c024 <d_exprlist+0xa08>
 800cbaa:	2145      	movs	r1, #69	; 0x45
 800cbac:	4620      	mov	r0, r4
 800cbae:	f7fe fd35 	bl	800b61c <d_exprlist>
 800cbb2:	4683      	mov	fp, r0
 800cbb4:	f7ff b9cb 	b.w	800bf4e <d_exprlist+0x932>
 800cbb8:	7812      	ldrb	r2, [r2, #0]
 800cbba:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800cbbe:	2901      	cmp	r1, #1
 800cbc0:	d903      	bls.n	800cbca <d_exprlist+0x15ae>
 800cbc2:	3a72      	subs	r2, #114	; 0x72
 800cbc4:	2a01      	cmp	r2, #1
 800cbc6:	f63f a999 	bhi.w	800befc <d_exprlist+0x8e0>
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f000 fb96 	bl	800d2fc <d_type>
 800cbd0:	9000      	str	r0, [sp, #0]
 800cbd2:	f7ff b997 	b.w	800bf04 <d_exprlist+0x8e8>
 800cbd6:	785a      	ldrb	r2, [r3, #1]
 800cbd8:	2a69      	cmp	r2, #105	; 0x69
 800cbda:	f47e afab 	bne.w	800bb34 <d_exprlist+0x518>
 800cbde:	3302      	adds	r3, #2
 800cbe0:	60e3      	str	r3, [r4, #12]
 800cbe2:	2145      	movs	r1, #69	; 0x45
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f7fe fd19 	bl	800b61c <d_exprlist>
 800cbea:	f7ff b866 	b.w	800bcba <d_exprlist+0x69e>
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7fd fe9e 	bl	800a930 <d_template_args>
 800cbf4:	465a      	mov	r2, fp
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2104      	movs	r1, #4
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f7f9 ff98 	bl	8006b30 <d_make_comp>
 800cc00:	4683      	mov	fp, r0
 800cc02:	f7ff b91a 	b.w	800be3a <d_exprlist+0x81e>
 800cc06:	3301      	adds	r3, #1
 800cc08:	60e3      	str	r3, [r4, #12]
 800cc0a:	2145      	movs	r1, #69	; 0x45
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	f7fe fd05 	bl	800b61c <d_exprlist>
 800cc12:	4603      	mov	r3, r0
 800cc14:	e422      	b.n	800c45c <d_exprlist+0xe40>
 800cc16:	4620      	mov	r0, r4
 800cc18:	f7fd fe8a 	bl	800a930 <d_template_args>
 800cc1c:	465a      	mov	r2, fp
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2104      	movs	r1, #4
 800cc22:	4620      	mov	r0, r4
 800cc24:	f7f9 ff84 	bl	8006b30 <d_make_comp>
 800cc28:	464a      	mov	r2, r9
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2101      	movs	r1, #1
 800cc2e:	f7ff b915 	b.w	800be5c <d_exprlist+0x840>
 800cc32:	4620      	mov	r0, r4
 800cc34:	f7fd fe7c 	bl	800a930 <d_template_args>
 800cc38:	464a      	mov	r2, r9
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2104      	movs	r1, #4
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f7f9 ff76 	bl	8006b30 <d_make_comp>
 800cc44:	4681      	mov	r9, r0
 800cc46:	f7ff ba2a 	b.w	800c09e <d_exprlist+0xa82>
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f000 f984 	bl	800cf58 <d_expression_1>
 800cc50:	9000      	str	r0, [sp, #0]
 800cc52:	4620      	mov	r0, r4
 800cc54:	f000 f980 	bl	800cf58 <d_expression_1>
 800cc58:	4683      	mov	fp, r0
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 f97c 	bl	800cf58 <d_expression_1>
 800cc60:	f7ff b933 	b.w	800beca <d_exprlist+0x8ae>
 800cc64:	3201      	adds	r2, #1
 800cc66:	60e2      	str	r2, [r4, #12]
 800cc68:	2000      	movs	r0, #0
 800cc6a:	f7ff b92e 	b.w	800beca <d_exprlist+0x8ae>
 800cc6e:	3301      	adds	r3, #1
 800cc70:	60e3      	str	r3, [r4, #12]
 800cc72:	2000      	movs	r0, #0
 800cc74:	f7ff bb24 	b.w	800c2c0 <d_exprlist+0xca4>
 800cc78:	9000      	str	r0, [sp, #0]
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f7fd fe58 	bl	800a930 <d_template_args>
 800cc80:	9a00      	ldr	r2, [sp, #0]
 800cc82:	4603      	mov	r3, r0
 800cc84:	2104      	movs	r1, #4
 800cc86:	4620      	mov	r0, r4
 800cc88:	f7f9 ff52 	bl	8006b30 <d_make_comp>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	e65c      	b.n	800c94a <d_exprlist+0x132e>
 800cc90:	4620      	mov	r0, r4
 800cc92:	f000 f961 	bl	800cf58 <d_expression_1>
 800cc96:	9000      	str	r0, [sp, #0]
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f000 f95d 	bl	800cf58 <d_expression_1>
 800cc9e:	9001      	str	r0, [sp, #4]
 800cca0:	4620      	mov	r0, r4
 800cca2:	f000 f959 	bl	800cf58 <d_expression_1>
 800cca6:	f7ff bb0b 	b.w	800c2c0 <d_exprlist+0xca4>
 800ccaa:	2145      	movs	r1, #69	; 0x45
 800ccac:	4620      	mov	r0, r4
 800ccae:	f7fe fcb5 	bl	800b61c <d_exprlist>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	f7ff bb5c 	b.w	800c370 <d_exprlist+0xd54>
 800ccb8:	7812      	ldrb	r2, [r2, #0]
 800ccba:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800ccbe:	2901      	cmp	r1, #1
 800ccc0:	d903      	bls.n	800ccca <d_exprlist+0x16ae>
 800ccc2:	3a72      	subs	r2, #114	; 0x72
 800ccc4:	2a01      	cmp	r2, #1
 800ccc6:	f63f ab23 	bhi.w	800c310 <d_exprlist+0xcf4>
 800ccca:	4620      	mov	r0, r4
 800cccc:	9301      	str	r3, [sp, #4]
 800ccce:	f000 fb15 	bl	800d2fc <d_type>
 800ccd2:	9b01      	ldr	r3, [sp, #4]
 800ccd4:	9000      	str	r0, [sp, #0]
 800ccd6:	f7ff bb21 	b.w	800c31c <d_exprlist+0xd00>
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f000 f93c 	bl	800cf58 <d_expression_1>
 800cce0:	4602      	mov	r2, r0
 800cce2:	f7ff bb45 	b.w	800c370 <d_exprlist+0xd54>
 800cce6:	2b6f      	cmp	r3, #111	; 0x6f
 800cce8:	d017      	beq.n	800cd1a <d_exprlist+0x16fe>
 800ccea:	2b69      	cmp	r3, #105	; 0x69
 800ccec:	d11d      	bne.n	800cd2a <d_exprlist+0x170e>
 800ccee:	7853      	ldrb	r3, [r2, #1]
 800ccf0:	2b6c      	cmp	r3, #108	; 0x6c
 800ccf2:	f47f aa94 	bne.w	800c21e <d_exprlist+0xc02>
 800ccf6:	f04f 0b00 	mov.w	fp, #0
 800ccfa:	68e3      	ldr	r3, [r4, #12]
 800ccfc:	2145      	movs	r1, #69	; 0x45
 800ccfe:	3302      	adds	r3, #2
 800cd00:	60e3      	str	r3, [r4, #12]
 800cd02:	4620      	mov	r0, r4
 800cd04:	f7fe fc8a 	bl	800b61c <d_exprlist>
 800cd08:	465a      	mov	r2, fp
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2130      	movs	r1, #48	; 0x30
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f7f9 ff0e 	bl	8006b30 <d_make_comp>
 800cd14:	4683      	mov	fp, r0
 800cd16:	f7fe bd71 	b.w	800b7fc <d_exprlist+0x1e0>
 800cd1a:	7853      	ldrb	r3, [r2, #1]
 800cd1c:	2b6e      	cmp	r3, #110	; 0x6e
 800cd1e:	f47f aa7e 	bne.w	800c21e <d_exprlist+0xc02>
 800cd22:	3202      	adds	r2, #2
 800cd24:	60e2      	str	r2, [r4, #12]
 800cd26:	f7fe beaf 	b.w	800ba88 <d_exprlist+0x46c>
 800cd2a:	2b74      	cmp	r3, #116	; 0x74
 800cd2c:	f47f aa77 	bne.w	800c21e <d_exprlist+0xc02>
 800cd30:	7853      	ldrb	r3, [r2, #1]
 800cd32:	2b6c      	cmp	r3, #108	; 0x6c
 800cd34:	f47f aa73 	bne.w	800c21e <d_exprlist+0xc02>
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f000 fadf 	bl	800d2fc <d_type>
 800cd3e:	4683      	mov	fp, r0
 800cd40:	e7db      	b.n	800ccfa <d_exprlist+0x16de>
 800cd42:	460a      	mov	r2, r1
 800cd44:	f7fe be3b 	b.w	800b9be <d_exprlist+0x3a2>
 800cd48:	3301      	adds	r3, #1
 800cd4a:	60e3      	str	r3, [r4, #12]
 800cd4c:	2145      	movs	r1, #69	; 0x45
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f7fe fc64 	bl	800b61c <d_exprlist>
 800cd54:	4603      	mov	r3, r0
 800cd56:	e44e      	b.n	800c5f6 <d_exprlist+0xfda>
 800cd58:	3301      	adds	r3, #1
 800cd5a:	60e3      	str	r3, [r4, #12]
 800cd5c:	e40a      	b.n	800c574 <d_exprlist+0xf58>
 800cd5e:	3301      	adds	r3, #1
 800cd60:	60e3      	str	r3, [r4, #12]
 800cd62:	e43a      	b.n	800c5da <d_exprlist+0xfbe>
 800cd64:	f04f 0a00 	mov.w	sl, #0
 800cd68:	3102      	adds	r1, #2
 800cd6a:	60e1      	str	r1, [r4, #12]
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	2145      	movs	r1, #69	; 0x45
 800cd70:	f7fe fc54 	bl	800b61c <d_exprlist>
 800cd74:	4652      	mov	r2, sl
 800cd76:	4603      	mov	r3, r0
 800cd78:	2130      	movs	r1, #48	; 0x30
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7f9 fed8 	bl	8006b30 <d_make_comp>
 800cd80:	4682      	mov	sl, r0
 800cd82:	f7fe bd77 	b.w	800b874 <d_exprlist+0x258>
 800cd86:	2b6f      	cmp	r3, #111	; 0x6f
 800cd88:	d010      	beq.n	800cdac <d_exprlist+0x1790>
 800cd8a:	2b69      	cmp	r3, #105	; 0x69
 800cd8c:	d13b      	bne.n	800ce06 <d_exprlist+0x17ea>
 800cd8e:	7843      	ldrb	r3, [r0, #1]
 800cd90:	2b6c      	cmp	r3, #108	; 0x6c
 800cd92:	f47e af09 	bne.w	800bba8 <d_exprlist+0x58c>
 800cd96:	1c82      	adds	r2, r0, #2
 800cd98:	60e2      	str	r2, [r4, #12]
 800cd9a:	2145      	movs	r1, #69	; 0x45
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f7fe fc3d 	bl	800b61c <d_exprlist>
 800cda2:	465a      	mov	r2, fp
 800cda4:	4603      	mov	r3, r0
 800cda6:	2130      	movs	r1, #48	; 0x30
 800cda8:	f7ff b858 	b.w	800be5c <d_exprlist+0x840>
 800cdac:	7843      	ldrb	r3, [r0, #1]
 800cdae:	2b6e      	cmp	r3, #110	; 0x6e
 800cdb0:	f47e aefa 	bne.w	800bba8 <d_exprlist+0x58c>
 800cdb4:	1c82      	adds	r2, r0, #2
 800cdb6:	60e2      	str	r2, [r4, #12]
 800cdb8:	f7fe be4b 	b.w	800ba52 <d_exprlist+0x436>
 800cdbc:	2b6f      	cmp	r3, #111	; 0x6f
 800cdbe:	d016      	beq.n	800cdee <d_exprlist+0x17d2>
 800cdc0:	2b69      	cmp	r3, #105	; 0x69
 800cdc2:	d12d      	bne.n	800ce20 <d_exprlist+0x1804>
 800cdc4:	78d3      	ldrb	r3, [r2, #3]
 800cdc6:	2b6c      	cmp	r3, #108	; 0x6c
 800cdc8:	f47f a8d2 	bne.w	800bf70 <d_exprlist+0x954>
 800cdcc:	f04f 0800 	mov.w	r8, #0
 800cdd0:	3102      	adds	r1, #2
 800cdd2:	60e1      	str	r1, [r4, #12]
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	2145      	movs	r1, #69	; 0x45
 800cdd8:	f7fe fc20 	bl	800b61c <d_exprlist>
 800cddc:	4642      	mov	r2, r8
 800cdde:	4603      	mov	r3, r0
 800cde0:	2130      	movs	r1, #48	; 0x30
 800cde2:	4620      	mov	r0, r4
 800cde4:	f7f9 fea4 	bl	8006b30 <d_make_comp>
 800cde8:	4602      	mov	r2, r0
 800cdea:	f7fe bde8 	b.w	800b9be <d_exprlist+0x3a2>
 800cdee:	78d3      	ldrb	r3, [r2, #3]
 800cdf0:	2b6e      	cmp	r3, #110	; 0x6e
 800cdf2:	f47f a8bd 	bne.w	800bf70 <d_exprlist+0x954>
 800cdf6:	3204      	adds	r2, #4
 800cdf8:	60e2      	str	r2, [r4, #12]
 800cdfa:	f7fe bdd3 	b.w	800b9a4 <d_exprlist+0x388>
 800cdfe:	3301      	adds	r3, #1
 800ce00:	60e3      	str	r3, [r4, #12]
 800ce02:	f7ff bb1c 	b.w	800c43e <d_exprlist+0xe22>
 800ce06:	2b74      	cmp	r3, #116	; 0x74
 800ce08:	f47e aece 	bne.w	800bba8 <d_exprlist+0x58c>
 800ce0c:	7843      	ldrb	r3, [r0, #1]
 800ce0e:	2b6c      	cmp	r3, #108	; 0x6c
 800ce10:	f47e aeca 	bne.w	800bba8 <d_exprlist+0x58c>
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 fa71 	bl	800d2fc <d_type>
 800ce1a:	4683      	mov	fp, r0
 800ce1c:	68e0      	ldr	r0, [r4, #12]
 800ce1e:	e7ba      	b.n	800cd96 <d_exprlist+0x177a>
 800ce20:	2b74      	cmp	r3, #116	; 0x74
 800ce22:	f47f a8a5 	bne.w	800bf70 <d_exprlist+0x954>
 800ce26:	78d3      	ldrb	r3, [r2, #3]
 800ce28:	2b6c      	cmp	r3, #108	; 0x6c
 800ce2a:	f47f a8a1 	bne.w	800bf70 <d_exprlist+0x954>
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 fa64 	bl	800d2fc <d_type>
 800ce34:	68e1      	ldr	r1, [r4, #12]
 800ce36:	4680      	mov	r8, r0
 800ce38:	e7ca      	b.n	800cdd0 <d_exprlist+0x17b4>
 800ce3a:	7853      	ldrb	r3, [r2, #1]
 800ce3c:	2b69      	cmp	r3, #105	; 0x69
 800ce3e:	d00f      	beq.n	800ce60 <d_exprlist+0x1844>
 800ce40:	f04f 0900 	mov.w	r9, #0
 800ce44:	f7ff b9eb 	b.w	800c21e <d_exprlist+0xc02>
 800ce48:	785a      	ldrb	r2, [r3, #1]
 800ce4a:	2a69      	cmp	r2, #105	; 0x69
 800ce4c:	f47f ab22 	bne.w	800c494 <d_exprlist+0xe78>
 800ce50:	3302      	adds	r3, #2
 800ce52:	60e3      	str	r3, [r4, #12]
 800ce54:	2145      	movs	r1, #69	; 0x45
 800ce56:	4620      	mov	r0, r4
 800ce58:	f7fe fbe0 	bl	800b61c <d_exprlist>
 800ce5c:	f7ff ba30 	b.w	800c2c0 <d_exprlist+0xca4>
 800ce60:	3202      	adds	r2, #2
 800ce62:	60e2      	str	r2, [r4, #12]
 800ce64:	2145      	movs	r1, #69	; 0x45
 800ce66:	4620      	mov	r0, r4
 800ce68:	f7fe fbd8 	bl	800b61c <d_exprlist>
 800ce6c:	f7ff b82d 	b.w	800beca <d_exprlist+0x8ae>
 800ce70:	2b6f      	cmp	r3, #111	; 0x6f
 800ce72:	d016      	beq.n	800cea2 <d_exprlist+0x1886>
 800ce74:	2b69      	cmp	r3, #105	; 0x69
 800ce76:	d120      	bne.n	800ceba <d_exprlist+0x189e>
 800ce78:	784b      	ldrb	r3, [r1, #1]
 800ce7a:	2b6c      	cmp	r3, #108	; 0x6c
 800ce7c:	f47e ae4a 	bne.w	800bb14 <d_exprlist+0x4f8>
 800ce80:	f04f 0900 	mov.w	r9, #0
 800ce84:	3102      	adds	r1, #2
 800ce86:	60e1      	str	r1, [r4, #12]
 800ce88:	4620      	mov	r0, r4
 800ce8a:	2145      	movs	r1, #69	; 0x45
 800ce8c:	f7fe fbc6 	bl	800b61c <d_exprlist>
 800ce90:	464a      	mov	r2, r9
 800ce92:	4603      	mov	r3, r0
 800ce94:	2130      	movs	r1, #48	; 0x30
 800ce96:	4620      	mov	r0, r4
 800ce98:	f7f9 fe4a 	bl	8006b30 <d_make_comp>
 800ce9c:	4681      	mov	r9, r0
 800ce9e:	f7fe bd3f 	b.w	800b920 <d_exprlist+0x304>
 800cea2:	784b      	ldrb	r3, [r1, #1]
 800cea4:	2b6e      	cmp	r3, #110	; 0x6e
 800cea6:	f47e ae35 	bne.w	800bb14 <d_exprlist+0x4f8>
 800ceaa:	3102      	adds	r1, #2
 800ceac:	60e1      	str	r1, [r4, #12]
 800ceae:	f7fe bd2d 	b.w	800b90c <d_exprlist+0x2f0>
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	60e3      	str	r3, [r4, #12]
 800ceb6:	f7ff baa3 	b.w	800c400 <d_exprlist+0xde4>
 800ceba:	2b74      	cmp	r3, #116	; 0x74
 800cebc:	f47e ae2a 	bne.w	800bb14 <d_exprlist+0x4f8>
 800cec0:	784b      	ldrb	r3, [r1, #1]
 800cec2:	2b6c      	cmp	r3, #108	; 0x6c
 800cec4:	f47e ae26 	bne.w	800bb14 <d_exprlist+0x4f8>
 800cec8:	4620      	mov	r0, r4
 800ceca:	f000 fa17 	bl	800d2fc <d_type>
 800cece:	68e1      	ldr	r1, [r4, #12]
 800ced0:	4681      	mov	r9, r0
 800ced2:	e7d7      	b.n	800ce84 <d_exprlist+0x1868>
 800ced4:	2b74      	cmp	r3, #116	; 0x74
 800ced6:	f47e ae8a 	bne.w	800bbee <d_exprlist+0x5d2>
 800ceda:	784b      	ldrb	r3, [r1, #1]
 800cedc:	2b6c      	cmp	r3, #108	; 0x6c
 800cede:	f47e ae86 	bne.w	800bbee <d_exprlist+0x5d2>
 800cee2:	4620      	mov	r0, r4
 800cee4:	f000 fa0a 	bl	800d2fc <d_type>
 800cee8:	68e1      	ldr	r1, [r4, #12]
 800ceea:	4682      	mov	sl, r0
 800ceec:	e73c      	b.n	800cd68 <d_exprlist+0x174c>
 800ceee:	2b6f      	cmp	r3, #111	; 0x6f
 800cef0:	d016      	beq.n	800cf20 <d_exprlist+0x1904>
 800cef2:	2b69      	cmp	r3, #105	; 0x69
 800cef4:	d11c      	bne.n	800cf30 <d_exprlist+0x1914>
 800cef6:	7853      	ldrb	r3, [r2, #1]
 800cef8:	2b6c      	cmp	r3, #108	; 0x6c
 800cefa:	f47e abd3 	bne.w	800b6a4 <d_exprlist+0x88>
 800cefe:	f04f 0800 	mov.w	r8, #0
 800cf02:	3202      	adds	r2, #2
 800cf04:	60e2      	str	r2, [r4, #12]
 800cf06:	2145      	movs	r1, #69	; 0x45
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f7fe fb87 	bl	800b61c <d_exprlist>
 800cf0e:	4642      	mov	r2, r8
 800cf10:	4603      	mov	r3, r0
 800cf12:	2130      	movs	r1, #48	; 0x30
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7f9 fe0b 	bl	8006b30 <d_make_comp>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	f7fe bc07 	b.w	800b72e <d_exprlist+0x112>
 800cf20:	7853      	ldrb	r3, [r2, #1]
 800cf22:	2b6e      	cmp	r3, #110	; 0x6e
 800cf24:	f47e abbe 	bne.w	800b6a4 <d_exprlist+0x88>
 800cf28:	3202      	adds	r2, #2
 800cf2a:	60e2      	str	r2, [r4, #12]
 800cf2c:	f7fe bb8b 	b.w	800b646 <d_exprlist+0x2a>
 800cf30:	2b74      	cmp	r3, #116	; 0x74
 800cf32:	f47e abb7 	bne.w	800b6a4 <d_exprlist+0x88>
 800cf36:	7853      	ldrb	r3, [r2, #1]
 800cf38:	2b6c      	cmp	r3, #108	; 0x6c
 800cf3a:	f47e abb3 	bne.w	800b6a4 <d_exprlist+0x88>
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f000 f9dc 	bl	800d2fc <d_type>
 800cf44:	68e2      	ldr	r2, [r4, #12]
 800cf46:	4680      	mov	r8, r0
 800cf48:	e7db      	b.n	800cf02 <d_exprlist+0x18e6>
 800cf4a:	f04f 0900 	mov.w	r9, #0
 800cf4e:	e6ce      	b.n	800ccee <d_exprlist+0x16d2>
 800cf50:	f04f 0900 	mov.w	r9, #0
 800cf54:	f7fe bd87 	b.w	800ba66 <d_exprlist+0x44a>

0800cf58 <d_expression_1>:
 800cf58:	68c2      	ldr	r2, [r0, #12]
 800cf5a:	7813      	ldrb	r3, [r2, #0]
 800cf5c:	2b4c      	cmp	r3, #76	; 0x4c
 800cf5e:	d060      	beq.n	800d022 <d_expression_1+0xca>
 800cf60:	2b54      	cmp	r3, #84	; 0x54
 800cf62:	d060      	beq.n	800d026 <d_expression_1+0xce>
 800cf64:	2b73      	cmp	r3, #115	; 0x73
 800cf66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	d024      	beq.n	800cfb8 <d_expression_1+0x60>
 800cf6e:	2b66      	cmp	r3, #102	; 0x66
 800cf70:	d00f      	beq.n	800cf92 <d_expression_1+0x3a>
 800cf72:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cf76:	2909      	cmp	r1, #9
 800cf78:	f200 818b 	bhi.w	800d292 <d_expression_1+0x33a>
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f000 fe39 	bl	800dbf4 <d_unqualified_name>
 800cf82:	4605      	mov	r5, r0
 800cf84:	b1a8      	cbz	r0, 800cfb2 <d_expression_1+0x5a>
 800cf86:	68e3      	ldr	r3, [r4, #12]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	2b49      	cmp	r3, #73	; 0x49
 800cf8c:	d062      	beq.n	800d054 <d_expression_1+0xfc>
 800cf8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf92:	7853      	ldrb	r3, [r2, #1]
 800cf94:	2b70      	cmp	r3, #112	; 0x70
 800cf96:	d029      	beq.n	800cfec <d_expression_1+0x94>
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f000 fd6b 	bl	800da74 <d_operator_name>
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	b138      	cbz	r0, 800cfb2 <d_expression_1+0x5a>
 800cfa2:	7803      	ldrb	r3, [r0, #0]
 800cfa4:	2b31      	cmp	r3, #49	; 0x31
 800cfa6:	d040      	beq.n	800d02a <d_expression_1+0xd2>
 800cfa8:	2b32      	cmp	r3, #50	; 0x32
 800cfaa:	d016      	beq.n	800cfda <d_expression_1+0x82>
 800cfac:	2b33      	cmp	r3, #51	; 0x33
 800cfae:	f000 8115 	beq.w	800d1dc <d_expression_1+0x284>
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb8:	7853      	ldrb	r3, [r2, #1]
 800cfba:	2b72      	cmp	r3, #114	; 0x72
 800cfbc:	d055      	beq.n	800d06a <d_expression_1+0x112>
 800cfbe:	2b70      	cmp	r3, #112	; 0x70
 800cfc0:	d1ea      	bne.n	800cf98 <d_expression_1+0x40>
 800cfc2:	3202      	adds	r2, #2
 800cfc4:	60c2      	str	r2, [r0, #12]
 800cfc6:	f7ff ffc7 	bl	800cf58 <d_expression_1>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	4602      	mov	r2, r0
 800cfce:	2149      	movs	r1, #73	; 0x49
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd6:	f7f9 bdab 	b.w	8006b30 <d_make_comp>
 800cfda:	686b      	ldr	r3, [r5, #4]
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	d8e8      	bhi.n	800cfb2 <d_expression_1+0x5a>
 800cfe0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cfe4:	00d9005d 	.word	0x00d9005d
 800cfe8:	006500a6 	.word	0x006500a6
 800cfec:	1c93      	adds	r3, r2, #2
 800cfee:	60c3      	str	r3, [r0, #12]
 800cff0:	7893      	ldrb	r3, [r2, #2]
 800cff2:	2b54      	cmp	r3, #84	; 0x54
 800cff4:	d04f      	beq.n	800d096 <d_expression_1+0x13e>
 800cff6:	f7f9 ff25 	bl	8006e44 <d_compact_number>
 800cffa:	1c45      	adds	r5, r0, #1
 800cffc:	d0d9      	beq.n	800cfb2 <d_expression_1+0x5a>
 800cffe:	6963      	ldr	r3, [r4, #20]
 800d000:	69a2      	ldr	r2, [r4, #24]
 800d002:	4293      	cmp	r3, r2
 800d004:	dad5      	bge.n	800cfb2 <d_expression_1+0x5a>
 800d006:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d00a:	6921      	ldr	r1, [r4, #16]
 800d00c:	3301      	adds	r3, #1
 800d00e:	0092      	lsls	r2, r2, #2
 800d010:	6163      	str	r3, [r4, #20]
 800d012:	188b      	adds	r3, r1, r2
 800d014:	d0cd      	beq.n	800cfb2 <d_expression_1+0x5a>
 800d016:	2006      	movs	r0, #6
 800d018:	5488      	strb	r0, [r1, r2]
 800d01a:	605d      	str	r5, [r3, #4]
 800d01c:	4618      	mov	r0, r3
 800d01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d022:	f001 bc63 	b.w	800e8ec <d_expr_primary>
 800d026:	f7f9 bf25 	b.w	8006e74 <d_template_param>
 800d02a:	6847      	ldr	r7, [r0, #4]
 800d02c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	683e      	ldr	r6, [r7, #0]
 800d032:	3b02      	subs	r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	6323      	str	r3, [r4, #48]	; 0x30
 800d038:	4630      	mov	r0, r6
 800d03a:	49ab      	ldr	r1, [pc, #684]	; (800d2e8 <d_expression_1+0x390>)
 800d03c:	f001 fed0 	bl	800ede0 <strcmp>
 800d040:	2800      	cmp	r0, #0
 800d042:	f000 80d7 	beq.w	800d1f4 <d_expression_1+0x29c>
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b03      	cmp	r3, #3
 800d04a:	d8b2      	bhi.n	800cfb2 <d_expression_1+0x5a>
 800d04c:	e8df f003 	tbb	[pc, r3]
 800d050:	3071b627 	.word	0x3071b627
 800d054:	4620      	mov	r0, r4
 800d056:	f7fd fc6b 	bl	800a930 <d_template_args>
 800d05a:	462a      	mov	r2, r5
 800d05c:	4603      	mov	r3, r0
 800d05e:	2104      	movs	r1, #4
 800d060:	4620      	mov	r0, r4
 800d062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d066:	f7f9 bd63 	b.w	8006b30 <d_make_comp>
 800d06a:	3202      	adds	r2, #2
 800d06c:	60c2      	str	r2, [r0, #12]
 800d06e:	f000 f945 	bl	800d2fc <d_type>
 800d072:	4605      	mov	r5, r0
 800d074:	4620      	mov	r0, r4
 800d076:	f000 fdbd 	bl	800dbf4 <d_unqualified_name>
 800d07a:	68e3      	ldr	r3, [r4, #12]
 800d07c:	4606      	mov	r6, r0
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b49      	cmp	r3, #73	; 0x49
 800d082:	f000 80db 	beq.w	800d23c <d_expression_1+0x2e4>
 800d086:	4603      	mov	r3, r0
 800d088:	462a      	mov	r2, r5
 800d08a:	4620      	mov	r0, r4
 800d08c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d090:	2101      	movs	r1, #1
 800d092:	f7f9 bd4d 	b.w	8006b30 <d_make_comp>
 800d096:	3203      	adds	r2, #3
 800d098:	60c2      	str	r2, [r0, #12]
 800d09a:	2500      	movs	r5, #0
 800d09c:	e7af      	b.n	800cffe <d_expression_1+0xa6>
 800d09e:	462a      	mov	r2, r5
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	2134      	movs	r1, #52	; 0x34
 800d0aa:	f7f9 bd41 	b.w	8006b30 <d_make_comp>
 800d0ae:	2600      	movs	r6, #0
 800d0b0:	498e      	ldr	r1, [pc, #568]	; (800d2ec <d_expression_1+0x394>)
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f001 fe94 	bl	800ede0 <strcmp>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	f000 809f 	beq.w	800d1fc <d_expression_1+0x2a4>
 800d0be:	7833      	ldrb	r3, [r6, #0]
 800d0c0:	2b6e      	cmp	r3, #110	; 0x6e
 800d0c2:	f47f af76 	bne.w	800cfb2 <d_expression_1+0x5a>
 800d0c6:	7873      	ldrb	r3, [r6, #1]
 800d0c8:	2b77      	cmp	r3, #119	; 0x77
 800d0ca:	d002      	beq.n	800d0d2 <d_expression_1+0x17a>
 800d0cc:	2b61      	cmp	r3, #97	; 0x61
 800d0ce:	f47f af70 	bne.w	800cfb2 <d_expression_1+0x5a>
 800d0d2:	215f      	movs	r1, #95	; 0x5f
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f7fe faa1 	bl	800b61c <d_exprlist>
 800d0da:	4606      	mov	r6, r0
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 f90d 	bl	800d2fc <d_type>
 800d0e2:	68e3      	ldr	r3, [r4, #12]
 800d0e4:	4607      	mov	r7, r0
 800d0e6:	7819      	ldrb	r1, [r3, #0]
 800d0e8:	2945      	cmp	r1, #69	; 0x45
 800d0ea:	f000 80b7 	beq.w	800d25c <d_expression_1+0x304>
 800d0ee:	2970      	cmp	r1, #112	; 0x70
 800d0f0:	f000 80c3 	beq.w	800d27a <d_expression_1+0x322>
 800d0f4:	2969      	cmp	r1, #105	; 0x69
 800d0f6:	f47f af5c 	bne.w	800cfb2 <d_expression_1+0x5a>
 800d0fa:	785b      	ldrb	r3, [r3, #1]
 800d0fc:	2b6c      	cmp	r3, #108	; 0x6c
 800d0fe:	f47f af58 	bne.w	800cfb2 <d_expression_1+0x5a>
 800d102:	4620      	mov	r0, r4
 800d104:	f7ff ff28 	bl	800cf58 <d_expression_1>
 800d108:	4603      	mov	r3, r0
 800d10a:	463a      	mov	r2, r7
 800d10c:	213a      	movs	r1, #58	; 0x3a
 800d10e:	4620      	mov	r0, r4
 800d110:	f7f9 fd0e 	bl	8006b30 <d_make_comp>
 800d114:	4632      	mov	r2, r6
 800d116:	4603      	mov	r3, r0
 800d118:	2139      	movs	r1, #57	; 0x39
 800d11a:	4620      	mov	r0, r4
 800d11c:	f7f9 fd08 	bl	8006b30 <d_make_comp>
 800d120:	462a      	mov	r2, r5
 800d122:	4603      	mov	r3, r0
 800d124:	2138      	movs	r1, #56	; 0x38
 800d126:	4620      	mov	r0, r4
 800d128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d12c:	f7f9 bd00 	b.w	8006b30 <d_make_comp>
 800d130:	2600      	movs	r6, #0
 800d132:	686b      	ldr	r3, [r5, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	785a      	ldrb	r2, [r3, #1]
 800d138:	2a63      	cmp	r2, #99	; 0x63
 800d13a:	d072      	beq.n	800d222 <d_expression_1+0x2ca>
 800d13c:	4620      	mov	r0, r4
 800d13e:	f7ff ff0b 	bl	800cf58 <d_expression_1>
 800d142:	4607      	mov	r7, r0
 800d144:	496a      	ldr	r1, [pc, #424]	; (800d2f0 <d_expression_1+0x398>)
 800d146:	4630      	mov	r0, r6
 800d148:	f001 fe4a 	bl	800ede0 <strcmp>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d062      	beq.n	800d216 <d_expression_1+0x2be>
 800d150:	4968      	ldr	r1, [pc, #416]	; (800d2f4 <d_expression_1+0x39c>)
 800d152:	4630      	mov	r0, r6
 800d154:	f001 fe44 	bl	800ede0 <strcmp>
 800d158:	b128      	cbz	r0, 800d166 <d_expression_1+0x20e>
 800d15a:	4630      	mov	r0, r6
 800d15c:	4966      	ldr	r1, [pc, #408]	; (800d2f8 <d_expression_1+0x3a0>)
 800d15e:	f001 fe3f 	bl	800ede0 <strcmp>
 800d162:	2800      	cmp	r0, #0
 800d164:	d175      	bne.n	800d252 <d_expression_1+0x2fa>
 800d166:	4620      	mov	r0, r4
 800d168:	f000 fd44 	bl	800dbf4 <d_unqualified_name>
 800d16c:	68e3      	ldr	r3, [r4, #12]
 800d16e:	4606      	mov	r6, r0
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	2b49      	cmp	r3, #73	; 0x49
 800d174:	d076      	beq.n	800d264 <d_expression_1+0x30c>
 800d176:	4633      	mov	r3, r6
 800d178:	463a      	mov	r2, r7
 800d17a:	2137      	movs	r1, #55	; 0x37
 800d17c:	4620      	mov	r0, r4
 800d17e:	f7f9 fcd7 	bl	8006b30 <d_make_comp>
 800d182:	462a      	mov	r2, r5
 800d184:	4603      	mov	r3, r0
 800d186:	2136      	movs	r1, #54	; 0x36
 800d188:	4620      	mov	r0, r4
 800d18a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d18e:	f7f9 bccf 	b.w	8006b30 <d_make_comp>
 800d192:	3301      	adds	r3, #1
 800d194:	60e3      	str	r3, [r4, #12]
 800d196:	2600      	movs	r6, #0
 800d198:	4620      	mov	r0, r4
 800d19a:	f7ff fedd 	bl	800cf58 <d_expression_1>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	b12e      	cbz	r6, 800d1ae <d_expression_1+0x256>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	2137      	movs	r1, #55	; 0x37
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f7f9 fcc2 	bl	8006b30 <d_make_comp>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	462a      	mov	r2, r5
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b6:	2135      	movs	r1, #53	; 0x35
 800d1b8:	f7f9 bcba 	b.w	8006b30 <d_make_comp>
 800d1bc:	2e00      	cmp	r6, #0
 800d1be:	d0ea      	beq.n	800d196 <d_expression_1+0x23e>
 800d1c0:	7833      	ldrb	r3, [r6, #0]
 800d1c2:	2b70      	cmp	r3, #112	; 0x70
 800d1c4:	d001      	beq.n	800d1ca <d_expression_1+0x272>
 800d1c6:	2b6d      	cmp	r3, #109	; 0x6d
 800d1c8:	d1e5      	bne.n	800d196 <d_expression_1+0x23e>
 800d1ca:	7872      	ldrb	r2, [r6, #1]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d1e2      	bne.n	800d196 <d_expression_1+0x23e>
 800d1d0:	68e3      	ldr	r3, [r4, #12]
 800d1d2:	781a      	ldrb	r2, [r3, #0]
 800d1d4:	2a5f      	cmp	r2, #95	; 0x5f
 800d1d6:	d0dc      	beq.n	800d192 <d_expression_1+0x23a>
 800d1d8:	2601      	movs	r6, #1
 800d1da:	e7dd      	b.n	800d198 <d_expression_1+0x240>
 800d1dc:	68e3      	ldr	r3, [r4, #12]
 800d1de:	781a      	ldrb	r2, [r3, #0]
 800d1e0:	2a5f      	cmp	r2, #95	; 0x5f
 800d1e2:	d1d8      	bne.n	800d196 <d_expression_1+0x23e>
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	60e3      	str	r3, [r4, #12]
 800d1e8:	2145      	movs	r1, #69	; 0x45
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f7fe fa16 	bl	800b61c <d_exprlist>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	e7dc      	b.n	800d1ae <d_expression_1+0x256>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f000 f881 	bl	800d2fc <d_type>
 800d1fa:	e7d7      	b.n	800d1ac <d_expression_1+0x254>
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f7ff feab 	bl	800cf58 <d_expression_1>
 800d202:	4606      	mov	r6, r0
 800d204:	4620      	mov	r0, r4
 800d206:	f7ff fea7 	bl	800cf58 <d_expression_1>
 800d20a:	4607      	mov	r7, r0
 800d20c:	4620      	mov	r0, r4
 800d20e:	f7ff fea3 	bl	800cf58 <d_expression_1>
 800d212:	4603      	mov	r3, r0
 800d214:	e779      	b.n	800d10a <d_expression_1+0x1b2>
 800d216:	2145      	movs	r1, #69	; 0x45
 800d218:	4620      	mov	r0, r4
 800d21a:	f7fe f9ff 	bl	800b61c <d_exprlist>
 800d21e:	4606      	mov	r6, r0
 800d220:	e7a9      	b.n	800d176 <d_expression_1+0x21e>
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800d228:	2a01      	cmp	r2, #1
 800d22a:	d902      	bls.n	800d232 <d_expression_1+0x2da>
 800d22c:	3b72      	subs	r3, #114	; 0x72
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d884      	bhi.n	800d13c <d_expression_1+0x1e4>
 800d232:	4620      	mov	r0, r4
 800d234:	f000 f862 	bl	800d2fc <d_type>
 800d238:	4607      	mov	r7, r0
 800d23a:	e783      	b.n	800d144 <d_expression_1+0x1ec>
 800d23c:	4620      	mov	r0, r4
 800d23e:	f7fd fb77 	bl	800a930 <d_template_args>
 800d242:	4632      	mov	r2, r6
 800d244:	4603      	mov	r3, r0
 800d246:	2104      	movs	r1, #4
 800d248:	4620      	mov	r0, r4
 800d24a:	f7f9 fc71 	bl	8006b30 <d_make_comp>
 800d24e:	4603      	mov	r3, r0
 800d250:	e71a      	b.n	800d088 <d_expression_1+0x130>
 800d252:	4620      	mov	r0, r4
 800d254:	f7ff fe80 	bl	800cf58 <d_expression_1>
 800d258:	4606      	mov	r6, r0
 800d25a:	e78c      	b.n	800d176 <d_expression_1+0x21e>
 800d25c:	3301      	adds	r3, #1
 800d25e:	60e3      	str	r3, [r4, #12]
 800d260:	2300      	movs	r3, #0
 800d262:	e752      	b.n	800d10a <d_expression_1+0x1b2>
 800d264:	4620      	mov	r0, r4
 800d266:	f7fd fb63 	bl	800a930 <d_template_args>
 800d26a:	4632      	mov	r2, r6
 800d26c:	4603      	mov	r3, r0
 800d26e:	2104      	movs	r1, #4
 800d270:	4620      	mov	r0, r4
 800d272:	f7f9 fc5d 	bl	8006b30 <d_make_comp>
 800d276:	4606      	mov	r6, r0
 800d278:	e77d      	b.n	800d176 <d_expression_1+0x21e>
 800d27a:	785a      	ldrb	r2, [r3, #1]
 800d27c:	2a69      	cmp	r2, #105	; 0x69
 800d27e:	f47f ae98 	bne.w	800cfb2 <d_expression_1+0x5a>
 800d282:	3302      	adds	r3, #2
 800d284:	60e3      	str	r3, [r4, #12]
 800d286:	2145      	movs	r1, #69	; 0x45
 800d288:	4620      	mov	r0, r4
 800d28a:	f7fe f9c7 	bl	800b61c <d_exprlist>
 800d28e:	4603      	mov	r3, r0
 800d290:	e73b      	b.n	800d10a <d_expression_1+0x1b2>
 800d292:	2b6f      	cmp	r3, #111	; 0x6f
 800d294:	d014      	beq.n	800d2c0 <d_expression_1+0x368>
 800d296:	2b69      	cmp	r3, #105	; 0x69
 800d298:	d119      	bne.n	800d2ce <d_expression_1+0x376>
 800d29a:	7853      	ldrb	r3, [r2, #1]
 800d29c:	2b6c      	cmp	r3, #108	; 0x6c
 800d29e:	f47f ae7b 	bne.w	800cf98 <d_expression_1+0x40>
 800d2a2:	2500      	movs	r5, #0
 800d2a4:	3202      	adds	r2, #2
 800d2a6:	60e2      	str	r2, [r4, #12]
 800d2a8:	2145      	movs	r1, #69	; 0x45
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f7fe f9b6 	bl	800b61c <d_exprlist>
 800d2b0:	462a      	mov	r2, r5
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2130      	movs	r1, #48	; 0x30
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2bc:	f7f9 bc38 	b.w	8006b30 <d_make_comp>
 800d2c0:	7853      	ldrb	r3, [r2, #1]
 800d2c2:	2b6e      	cmp	r3, #110	; 0x6e
 800d2c4:	f47f ae68 	bne.w	800cf98 <d_expression_1+0x40>
 800d2c8:	3202      	adds	r2, #2
 800d2ca:	60c2      	str	r2, [r0, #12]
 800d2cc:	e656      	b.n	800cf7c <d_expression_1+0x24>
 800d2ce:	2b74      	cmp	r3, #116	; 0x74
 800d2d0:	f47f ae62 	bne.w	800cf98 <d_expression_1+0x40>
 800d2d4:	7853      	ldrb	r3, [r2, #1]
 800d2d6:	2b6c      	cmp	r3, #108	; 0x6c
 800d2d8:	f47f ae5e 	bne.w	800cf98 <d_expression_1+0x40>
 800d2dc:	f000 f80e 	bl	800d2fc <d_type>
 800d2e0:	68e2      	ldr	r2, [r4, #12]
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	e7de      	b.n	800d2a4 <d_expression_1+0x34c>
 800d2e6:	bf00      	nop
 800d2e8:	0801640c 	.word	0x0801640c
 800d2ec:	08016104 	.word	0x08016104
 800d2f0:	080160fc 	.word	0x080160fc
 800d2f4:	08016218 	.word	0x08016218
 800d2f8:	0801621c 	.word	0x0801621c

0800d2fc <d_type>:
 800d2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d300:	68c1      	ldr	r1, [r0, #12]
 800d302:	b083      	sub	sp, #12
 800d304:	780b      	ldrb	r3, [r1, #0]
 800d306:	4604      	mov	r4, r0
 800d308:	2b72      	cmp	r3, #114	; 0x72
 800d30a:	d055      	beq.n	800d3b8 <d_type+0xbc>
 800d30c:	2b56      	cmp	r3, #86	; 0x56
 800d30e:	d053      	beq.n	800d3b8 <d_type+0xbc>
 800d310:	2b4b      	cmp	r3, #75	; 0x4b
 800d312:	d051      	beq.n	800d3b8 <d_type+0xbc>
 800d314:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d318:	2a4a      	cmp	r2, #74	; 0x4a
 800d31a:	f200 808a 	bhi.w	800d432 <d_type+0x136>
 800d31e:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d322:	00b2      	.short	0x00b2
 800d324:	00b200b2 	.word	0x00b200b2
 800d328:	00b200b2 	.word	0x00b200b2
 800d32c:	00b200b2 	.word	0x00b200b2
 800d330:	00b200b2 	.word	0x00b200b2
 800d334:	008800b2 	.word	0x008800b2
 800d338:	00880088 	.word	0x00880088
 800d33c:	00880088 	.word	0x00880088
 800d340:	00880088 	.word	0x00880088
 800d344:	008800b8 	.word	0x008800b8
 800d348:	010300e1 	.word	0x010300e1
 800d34c:	00ef0088 	.word	0x00ef0088
 800d350:	008800f5 	.word	0x008800f5
 800d354:	00880088 	.word	0x00880088
 800d358:	00880088 	.word	0x00880088
 800d35c:	00b20175 	.word	0x00b20175
 800d360:	019b018d 	.word	0x019b018d
 800d364:	01a90088 	.word	0x01a90088
 800d368:	020f01b7 	.word	0x020f01b7
 800d36c:	008801d8 	.word	0x008801d8
 800d370:	00880088 	.word	0x00880088
 800d374:	00b20088 	.word	0x00b20088
 800d378:	00880088 	.word	0x00880088
 800d37c:	00880088 	.word	0x00880088
 800d380:	00880088 	.word	0x00880088
 800d384:	01ea01ea 	.word	0x01ea01ea
 800d388:	01ea01ea 	.word	0x01ea01ea
 800d38c:	01ea01ea 	.word	0x01ea01ea
 800d390:	01ea01ea 	.word	0x01ea01ea
 800d394:	01ea01ea 	.word	0x01ea01ea
 800d398:	01ea0088 	.word	0x01ea0088
 800d39c:	01ea01ea 	.word	0x01ea01ea
 800d3a0:	008801ea 	.word	0x008801ea
 800d3a4:	00880088 	.word	0x00880088
 800d3a8:	01ea01ea 	.word	0x01ea01ea
 800d3ac:	01ea0098 	.word	0x01ea0098
 800d3b0:	01ea01ea 	.word	0x01ea01ea
 800d3b4:	01ea01ea 	.word	0x01ea01ea
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	a901      	add	r1, sp, #4
 800d3bc:	4620      	mov	r0, r4
 800d3be:	f7f9 fc03 	bl	8006bc8 <d_cv_qualifiers>
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d034      	beq.n	800d432 <d_type+0x136>
 800d3c8:	68e3      	ldr	r3, [r4, #12]
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	2b46      	cmp	r3, #70	; 0x46
 800d3d0:	d034      	beq.n	800d43c <d_type+0x140>
 800d3d2:	f7ff ff93 	bl	800d2fc <d_type>
 800d3d6:	6028      	str	r0, [r5, #0]
 800d3d8:	b358      	cbz	r0, 800d432 <d_type+0x136>
 800d3da:	7803      	ldrb	r3, [r0, #0]
 800d3dc:	3b1f      	subs	r3, #31
 800d3de:	2b01      	cmp	r3, #1
 800d3e0:	d930      	bls.n	800d444 <d_type+0x148>
 800d3e2:	9a01      	ldr	r2, [sp, #4]
 800d3e4:	b32a      	cbz	r2, 800d432 <d_type+0x136>
 800d3e6:	6a23      	ldr	r3, [r4, #32]
 800d3e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d3ea:	428b      	cmp	r3, r1
 800d3ec:	da21      	bge.n	800d432 <d_type+0x136>
 800d3ee:	69e0      	ldr	r0, [r4, #28]
 800d3f0:	1c59      	adds	r1, r3, #1
 800d3f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d3f6:	9d01      	ldr	r5, [sp, #4]
 800d3f8:	6221      	str	r1, [r4, #32]
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	b003      	add	sp, #12
 800d3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d402:	2301      	movs	r3, #1
 800d404:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d406:	4620      	mov	r0, r4
 800d408:	6363      	str	r3, [r4, #52]	; 0x34
 800d40a:	f7ff fda5 	bl	800cf58 <d_expression_1>
 800d40e:	6365      	str	r5, [r4, #52]	; 0x34
 800d410:	4602      	mov	r2, r0
 800d412:	2300      	movs	r3, #0
 800d414:	2141      	movs	r1, #65	; 0x41
 800d416:	4620      	mov	r0, r4
 800d418:	f7f9 fb8a 	bl	8006b30 <d_make_comp>
 800d41c:	4605      	mov	r5, r0
 800d41e:	9001      	str	r0, [sp, #4]
 800d420:	b138      	cbz	r0, 800d432 <d_type+0x136>
 800d422:	68e3      	ldr	r3, [r4, #12]
 800d424:	781a      	ldrb	r2, [r3, #0]
 800d426:	b122      	cbz	r2, 800d432 <d_type+0x136>
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	60e2      	str	r2, [r4, #12]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	2b45      	cmp	r3, #69	; 0x45
 800d430:	d01e      	beq.n	800d470 <d_type+0x174>
 800d432:	2500      	movs	r5, #0
 800d434:	4628      	mov	r0, r5
 800d436:	b003      	add	sp, #12
 800d438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d43c:	f000 fd30 	bl	800dea0 <d_function_type>
 800d440:	6028      	str	r0, [r5, #0]
 800d442:	e7c9      	b.n	800d3d8 <d_type+0xdc>
 800d444:	9a01      	ldr	r2, [sp, #4]
 800d446:	6843      	ldr	r3, [r0, #4]
 800d448:	6042      	str	r2, [r0, #4]
 800d44a:	682a      	ldr	r2, [r5, #0]
 800d44c:	9201      	str	r2, [sp, #4]
 800d44e:	602b      	str	r3, [r5, #0]
 800d450:	e7c7      	b.n	800d3e2 <d_type+0xe6>
 800d452:	3101      	adds	r1, #1
 800d454:	60e1      	str	r1, [r4, #12]
 800d456:	4620      	mov	r0, r4
 800d458:	f7f9 fd2e 	bl	8006eb8 <d_source_name>
 800d45c:	2300      	movs	r3, #0
 800d45e:	4602      	mov	r2, r0
 800d460:	2128      	movs	r1, #40	; 0x28
 800d462:	4620      	mov	r0, r4
 800d464:	f7f9 fb64 	bl	8006b30 <d_make_comp>
 800d468:	4605      	mov	r5, r0
 800d46a:	9001      	str	r0, [sp, #4]
 800d46c:	2d00      	cmp	r5, #0
 800d46e:	d0e0      	beq.n	800d432 <d_type+0x136>
 800d470:	6a23      	ldr	r3, [r4, #32]
 800d472:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d474:	4293      	cmp	r3, r2
 800d476:	dadc      	bge.n	800d432 <d_type+0x136>
 800d478:	69e1      	ldr	r1, [r4, #28]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800d480:	9d01      	ldr	r5, [sp, #4]
 800d482:	6222      	str	r2, [r4, #32]
 800d484:	e7d6      	b.n	800d434 <d_type+0x138>
 800d486:	4620      	mov	r0, r4
 800d488:	f000 fd2a 	bl	800dee0 <d_name>
 800d48c:	4605      	mov	r5, r0
 800d48e:	9001      	str	r0, [sp, #4]
 800d490:	e7ec      	b.n	800d46c <d_type+0x170>
 800d492:	1c48      	adds	r0, r1, #1
 800d494:	60e0      	str	r0, [r4, #12]
 800d496:	784b      	ldrb	r3, [r1, #1]
 800d498:	2b5f      	cmp	r3, #95	; 0x5f
 800d49a:	f000 8273 	beq.w	800d984 <d_type+0x688>
 800d49e:	3b30      	subs	r3, #48	; 0x30
 800d4a0:	2b09      	cmp	r3, #9
 800d4a2:	f200 827d 	bhi.w	800d9a0 <d_type+0x6a4>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	60e3      	str	r3, [r4, #12]
 800d4ac:	781a      	ldrb	r2, [r3, #0]
 800d4ae:	3a30      	subs	r2, #48	; 0x30
 800d4b0:	2a09      	cmp	r2, #9
 800d4b2:	d9f9      	bls.n	800d4a8 <d_type+0x1ac>
 800d4b4:	6962      	ldr	r2, [r4, #20]
 800d4b6:	69a1      	ldr	r1, [r4, #24]
 800d4b8:	428a      	cmp	r2, r1
 800d4ba:	da11      	bge.n	800d4e0 <d_type+0x1e4>
 800d4bc:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d4c0:	6926      	ldr	r6, [r4, #16]
 800d4c2:	0089      	lsls	r1, r1, #2
 800d4c4:	3201      	adds	r2, #1
 800d4c6:	1875      	adds	r5, r6, r1
 800d4c8:	6162      	str	r2, [r4, #20]
 800d4ca:	d009      	beq.n	800d4e0 <d_type+0x1e4>
 800d4cc:	1a1a      	subs	r2, r3, r0
 800d4ce:	d007      	beq.n	800d4e0 <d_type+0x1e4>
 800d4d0:	2700      	movs	r7, #0
 800d4d2:	5477      	strb	r7, [r6, r1]
 800d4d4:	6068      	str	r0, [r5, #4]
 800d4d6:	60aa      	str	r2, [r5, #8]
 800d4d8:	781a      	ldrb	r2, [r3, #0]
 800d4da:	2a5f      	cmp	r2, #95	; 0x5f
 800d4dc:	f000 82c7 	beq.w	800da6e <d_type+0x772>
 800d4e0:	2500      	movs	r5, #0
 800d4e2:	e0a9      	b.n	800d638 <d_type+0x33c>
 800d4e4:	3101      	adds	r1, #1
 800d4e6:	60e1      	str	r1, [r4, #12]
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f7ff ff07 	bl	800d2fc <d_type>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	2125      	movs	r1, #37	; 0x25
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f7f9 fb1b 	bl	8006b30 <d_make_comp>
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	9001      	str	r0, [sp, #4]
 800d4fe:	e7b5      	b.n	800d46c <d_type+0x170>
 800d500:	4620      	mov	r0, r4
 800d502:	f000 fccd 	bl	800dea0 <d_function_type>
 800d506:	4605      	mov	r5, r0
 800d508:	9001      	str	r0, [sp, #4]
 800d50a:	e7af      	b.n	800d46c <d_type+0x170>
 800d50c:	3101      	adds	r1, #1
 800d50e:	60e1      	str	r1, [r4, #12]
 800d510:	4620      	mov	r0, r4
 800d512:	f7ff fef3 	bl	800d2fc <d_type>
 800d516:	2300      	movs	r3, #0
 800d518:	4602      	mov	r2, r0
 800d51a:	2126      	movs	r1, #38	; 0x26
 800d51c:	4620      	mov	r0, r4
 800d51e:	f7f9 fb07 	bl	8006b30 <d_make_comp>
 800d522:	4605      	mov	r5, r0
 800d524:	9001      	str	r0, [sp, #4]
 800d526:	e7a1      	b.n	800d46c <d_type+0x170>
 800d528:	1c4b      	adds	r3, r1, #1
 800d52a:	60e3      	str	r3, [r4, #12]
 800d52c:	784b      	ldrb	r3, [r1, #1]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f43f af7f 	beq.w	800d432 <d_type+0x136>
 800d534:	1c8b      	adds	r3, r1, #2
 800d536:	60e3      	str	r3, [r4, #12]
 800d538:	784b      	ldrb	r3, [r1, #1]
 800d53a:	3b46      	subs	r3, #70	; 0x46
 800d53c:	2b30      	cmp	r3, #48	; 0x30
 800d53e:	f63f af78 	bhi.w	800d432 <d_type+0x136>
 800d542:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <d_type+0x24c>)
 800d544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d548:	0800d915 	.word	0x0800d915
 800d54c:	0800d433 	.word	0x0800d433
 800d550:	0800d433 	.word	0x0800d433
 800d554:	0800d433 	.word	0x0800d433
 800d558:	0800d433 	.word	0x0800d433
 800d55c:	0800d433 	.word	0x0800d433
 800d560:	0800d433 	.word	0x0800d433
 800d564:	0800d433 	.word	0x0800d433
 800d568:	0800d433 	.word	0x0800d433
 800d56c:	0800d433 	.word	0x0800d433
 800d570:	0800d433 	.word	0x0800d433
 800d574:	0800d433 	.word	0x0800d433
 800d578:	0800d433 	.word	0x0800d433
 800d57c:	0800d433 	.word	0x0800d433
 800d580:	0800d403 	.word	0x0800d403
 800d584:	0800d433 	.word	0x0800d433
 800d588:	0800d433 	.word	0x0800d433
 800d58c:	0800d433 	.word	0x0800d433
 800d590:	0800d433 	.word	0x0800d433
 800d594:	0800d433 	.word	0x0800d433
 800d598:	0800d433 	.word	0x0800d433
 800d59c:	0800d433 	.word	0x0800d433
 800d5a0:	0800d433 	.word	0x0800d433
 800d5a4:	0800d433 	.word	0x0800d433
 800d5a8:	0800d433 	.word	0x0800d433
 800d5ac:	0800d433 	.word	0x0800d433
 800d5b0:	0800d433 	.word	0x0800d433
 800d5b4:	0800d8e9 	.word	0x0800d8e9
 800d5b8:	0800d433 	.word	0x0800d433
 800d5bc:	0800d433 	.word	0x0800d433
 800d5c0:	0800d8cd 	.word	0x0800d8cd
 800d5c4:	0800d809 	.word	0x0800d809
 800d5c8:	0800d7dd 	.word	0x0800d7dd
 800d5cc:	0800d433 	.word	0x0800d433
 800d5d0:	0800d7b1 	.word	0x0800d7b1
 800d5d4:	0800d785 	.word	0x0800d785
 800d5d8:	0800d433 	.word	0x0800d433
 800d5dc:	0800d433 	.word	0x0800d433
 800d5e0:	0800d433 	.word	0x0800d433
 800d5e4:	0800d433 	.word	0x0800d433
 800d5e8:	0800d8a5 	.word	0x0800d8a5
 800d5ec:	0800d433 	.word	0x0800d433
 800d5f0:	0800d88d 	.word	0x0800d88d
 800d5f4:	0800d433 	.word	0x0800d433
 800d5f8:	0800d433 	.word	0x0800d433
 800d5fc:	0800d86f 	.word	0x0800d86f
 800d600:	0800d403 	.word	0x0800d403
 800d604:	0800d433 	.word	0x0800d433
 800d608:	0800d835 	.word	0x0800d835
 800d60c:	3101      	adds	r1, #1
 800d60e:	60e1      	str	r1, [r4, #12]
 800d610:	4620      	mov	r0, r4
 800d612:	f7ff fe73 	bl	800d2fc <d_type>
 800d616:	4605      	mov	r5, r0
 800d618:	2800      	cmp	r0, #0
 800d61a:	f43f af61 	beq.w	800d4e0 <d_type+0x1e4>
 800d61e:	4620      	mov	r0, r4
 800d620:	f7ff fe6c 	bl	800d2fc <d_type>
 800d624:	2800      	cmp	r0, #0
 800d626:	f43f af5b 	beq.w	800d4e0 <d_type+0x1e4>
 800d62a:	4603      	mov	r3, r0
 800d62c:	462a      	mov	r2, r5
 800d62e:	212b      	movs	r1, #43	; 0x2b
 800d630:	4620      	mov	r0, r4
 800d632:	f7f9 fa7d 	bl	8006b30 <d_make_comp>
 800d636:	4605      	mov	r5, r0
 800d638:	9501      	str	r5, [sp, #4]
 800d63a:	e717      	b.n	800d46c <d_type+0x170>
 800d63c:	3101      	adds	r1, #1
 800d63e:	60e1      	str	r1, [r4, #12]
 800d640:	4620      	mov	r0, r4
 800d642:	f7ff fe5b 	bl	800d2fc <d_type>
 800d646:	2300      	movs	r3, #0
 800d648:	4602      	mov	r2, r0
 800d64a:	2124      	movs	r1, #36	; 0x24
 800d64c:	4620      	mov	r0, r4
 800d64e:	f7f9 fa6f 	bl	8006b30 <d_make_comp>
 800d652:	4605      	mov	r5, r0
 800d654:	9001      	str	r0, [sp, #4]
 800d656:	e709      	b.n	800d46c <d_type+0x170>
 800d658:	3101      	adds	r1, #1
 800d65a:	60e1      	str	r1, [r4, #12]
 800d65c:	4620      	mov	r0, r4
 800d65e:	f7ff fe4d 	bl	800d2fc <d_type>
 800d662:	2300      	movs	r3, #0
 800d664:	4602      	mov	r2, r0
 800d666:	2122      	movs	r1, #34	; 0x22
 800d668:	4620      	mov	r0, r4
 800d66a:	f7f9 fa61 	bl	8006b30 <d_make_comp>
 800d66e:	4605      	mov	r5, r0
 800d670:	9001      	str	r0, [sp, #4]
 800d672:	e6fb      	b.n	800d46c <d_type+0x170>
 800d674:	3101      	adds	r1, #1
 800d676:	60e1      	str	r1, [r4, #12]
 800d678:	4620      	mov	r0, r4
 800d67a:	f7ff fe3f 	bl	800d2fc <d_type>
 800d67e:	2300      	movs	r3, #0
 800d680:	4602      	mov	r2, r0
 800d682:	2123      	movs	r1, #35	; 0x23
 800d684:	4620      	mov	r0, r4
 800d686:	f7f9 fa53 	bl	8006b30 <d_make_comp>
 800d68a:	4605      	mov	r5, r0
 800d68c:	9001      	str	r0, [sp, #4]
 800d68e:	e6ed      	b.n	800d46c <d_type+0x170>
 800d690:	784b      	ldrb	r3, [r1, #1]
 800d692:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d696:	2a09      	cmp	r2, #9
 800d698:	d905      	bls.n	800d6a6 <d_type+0x3aa>
 800d69a:	2b5f      	cmp	r3, #95	; 0x5f
 800d69c:	d003      	beq.n	800d6a6 <d_type+0x3aa>
 800d69e:	3b41      	subs	r3, #65	; 0x41
 800d6a0:	2b19      	cmp	r3, #25
 800d6a2:	f200 818a 	bhi.w	800d9ba <d_type+0x6be>
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f7f9 fc7d 	bl	8006fa8 <d_substitution>
 800d6ae:	68e3      	ldr	r3, [r4, #12]
 800d6b0:	9001      	str	r0, [sp, #4]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	2b49      	cmp	r3, #73	; 0x49
 800d6b8:	f47f aebc 	bne.w	800d434 <d_type+0x138>
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f7fd f937 	bl	800a930 <d_template_args>
 800d6c2:	462a      	mov	r2, r5
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2104      	movs	r1, #4
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f7f9 fa31 	bl	8006b30 <d_make_comp>
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	e7b2      	b.n	800d638 <d_type+0x33c>
 800d6d2:	3101      	adds	r1, #1
 800d6d4:	60e1      	str	r1, [r4, #12]
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f7f9 fbee 	bl	8006eb8 <d_source_name>
 800d6dc:	9001      	str	r0, [sp, #4]
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f7ff fe0c 	bl	800d2fc <d_type>
 800d6e4:	9b01      	ldr	r3, [sp, #4]
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	2121      	movs	r1, #33	; 0x21
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f7f9 fa20 	bl	8006b30 <d_make_comp>
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	9001      	str	r0, [sp, #4]
 800d6f4:	e6ba      	b.n	800d46c <d_type+0x170>
 800d6f6:	3b61      	subs	r3, #97	; 0x61
 800d6f8:	4fb6      	ldr	r7, [pc, #728]	; (800d9d4 <d_type+0x6d8>)
 800d6fa:	6962      	ldr	r2, [r4, #20]
 800d6fc:	69a5      	ldr	r5, [r4, #24]
 800d6fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 800d708:	42aa      	cmp	r2, r5
 800d70a:	4418      	add	r0, r3
 800d70c:	f280 8136 	bge.w	800d97c <d_type+0x680>
 800d710:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800d714:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800d718:	00b6      	lsls	r6, r6, #2
 800d71a:	3201      	adds	r2, #1
 800d71c:	eb1e 0506 	adds.w	r5, lr, r6
 800d720:	6162      	str	r2, [r4, #20]
 800d722:	f000 812b 	beq.w	800d97c <d_type+0x680>
 800d726:	2227      	movs	r2, #39	; 0x27
 800d728:	f80e 2006 	strb.w	r2, [lr, r6]
 800d72c:	443b      	add	r3, r7
 800d72e:	6068      	str	r0, [r5, #4]
 800d730:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d732:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d736:	3101      	adds	r1, #1
 800d738:	4413      	add	r3, r2
 800d73a:	60e1      	str	r1, [r4, #12]
 800d73c:	6323      	str	r3, [r4, #48]	; 0x30
 800d73e:	e679      	b.n	800d434 <d_type+0x138>
 800d740:	4620      	mov	r0, r4
 800d742:	f7f9 fb97 	bl	8006e74 <d_template_param>
 800d746:	68e6      	ldr	r6, [r4, #12]
 800d748:	9001      	str	r0, [sp, #4]
 800d74a:	7833      	ldrb	r3, [r6, #0]
 800d74c:	4605      	mov	r5, r0
 800d74e:	2b49      	cmp	r3, #73	; 0x49
 800d750:	f47f ae8c 	bne.w	800d46c <d_type+0x170>
 800d754:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d756:	2b00      	cmp	r3, #0
 800d758:	f040 814e 	bne.w	800d9f8 <d_type+0x6fc>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	f43f ae68 	beq.w	800d432 <d_type+0x136>
 800d762:	6a23      	ldr	r3, [r4, #32]
 800d764:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d766:	4293      	cmp	r3, r2
 800d768:	f6bf ae63 	bge.w	800d432 <d_type+0x136>
 800d76c:	69e1      	ldr	r1, [r4, #28]
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800d774:	6222      	str	r2, [r4, #32]
 800d776:	4620      	mov	r0, r4
 800d778:	9d01      	ldr	r5, [sp, #4]
 800d77a:	f7fd f8d9 	bl	800a930 <d_template_args>
 800d77e:	462a      	mov	r2, r5
 800d780:	4603      	mov	r3, r0
 800d782:	e7a0      	b.n	800d6c6 <d_type+0x3ca>
 800d784:	6963      	ldr	r3, [r4, #20]
 800d786:	69a2      	ldr	r2, [r4, #24]
 800d788:	4293      	cmp	r3, r2
 800d78a:	f280 80f7 	bge.w	800d97c <d_type+0x680>
 800d78e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d792:	6922      	ldr	r2, [r4, #16]
 800d794:	0089      	lsls	r1, r1, #2
 800d796:	3301      	adds	r3, #1
 800d798:	1855      	adds	r5, r2, r1
 800d79a:	6163      	str	r3, [r4, #20]
 800d79c:	f000 80ee 	beq.w	800d97c <d_type+0x680>
 800d7a0:	4b8d      	ldr	r3, [pc, #564]	; (800d9d8 <d_type+0x6dc>)
 800d7a2:	2027      	movs	r0, #39	; 0x27
 800d7a4:	5450      	strb	r0, [r2, r1]
 800d7a6:	606b      	str	r3, [r5, #4]
 800d7a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	6323      	str	r3, [r4, #48]	; 0x30
 800d7ae:	e641      	b.n	800d434 <d_type+0x138>
 800d7b0:	6963      	ldr	r3, [r4, #20]
 800d7b2:	69a2      	ldr	r2, [r4, #24]
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	f280 80e1 	bge.w	800d97c <d_type+0x680>
 800d7ba:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d7be:	6922      	ldr	r2, [r4, #16]
 800d7c0:	0089      	lsls	r1, r1, #2
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	1855      	adds	r5, r2, r1
 800d7c6:	6163      	str	r3, [r4, #20]
 800d7c8:	f000 80d8 	beq.w	800d97c <d_type+0x680>
 800d7cc:	4b83      	ldr	r3, [pc, #524]	; (800d9dc <d_type+0x6e0>)
 800d7ce:	2027      	movs	r0, #39	; 0x27
 800d7d0:	5450      	strb	r0, [r2, r1]
 800d7d2:	606b      	str	r3, [r5, #4]
 800d7d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d7d6:	3304      	adds	r3, #4
 800d7d8:	6323      	str	r3, [r4, #48]	; 0x30
 800d7da:	e62b      	b.n	800d434 <d_type+0x138>
 800d7dc:	6963      	ldr	r3, [r4, #20]
 800d7de:	69a2      	ldr	r2, [r4, #24]
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	f280 80cb 	bge.w	800d97c <d_type+0x680>
 800d7e6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d7ea:	6922      	ldr	r2, [r4, #16]
 800d7ec:	0089      	lsls	r1, r1, #2
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	1855      	adds	r5, r2, r1
 800d7f2:	6163      	str	r3, [r4, #20]
 800d7f4:	f000 80c2 	beq.w	800d97c <d_type+0x680>
 800d7f8:	4b79      	ldr	r3, [pc, #484]	; (800d9e0 <d_type+0x6e4>)
 800d7fa:	2027      	movs	r0, #39	; 0x27
 800d7fc:	5450      	strb	r0, [r2, r1]
 800d7fe:	606b      	str	r3, [r5, #4]
 800d800:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d802:	3309      	adds	r3, #9
 800d804:	6323      	str	r3, [r4, #48]	; 0x30
 800d806:	e615      	b.n	800d434 <d_type+0x138>
 800d808:	6963      	ldr	r3, [r4, #20]
 800d80a:	69a2      	ldr	r2, [r4, #24]
 800d80c:	4293      	cmp	r3, r2
 800d80e:	f280 80b5 	bge.w	800d97c <d_type+0x680>
 800d812:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d816:	6922      	ldr	r2, [r4, #16]
 800d818:	0089      	lsls	r1, r1, #2
 800d81a:	3301      	adds	r3, #1
 800d81c:	1855      	adds	r5, r2, r1
 800d81e:	6163      	str	r3, [r4, #20]
 800d820:	f000 80ac 	beq.w	800d97c <d_type+0x680>
 800d824:	4b6f      	ldr	r3, [pc, #444]	; (800d9e4 <d_type+0x6e8>)
 800d826:	2027      	movs	r0, #39	; 0x27
 800d828:	5450      	strb	r0, [r2, r1]
 800d82a:	606b      	str	r3, [r5, #4]
 800d82c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d82e:	330a      	adds	r3, #10
 800d830:	6323      	str	r3, [r4, #48]	; 0x30
 800d832:	e5ff      	b.n	800d434 <d_type+0x138>
 800d834:	788b      	ldrb	r3, [r1, #2]
 800d836:	2b5f      	cmp	r3, #95	; 0x5f
 800d838:	f000 80fd 	beq.w	800da36 <d_type+0x73a>
 800d83c:	4620      	mov	r0, r4
 800d83e:	f7f9 fae5 	bl	8006e0c <d_number_component>
 800d842:	4605      	mov	r5, r0
 800d844:	2d00      	cmp	r5, #0
 800d846:	f43f aef7 	beq.w	800d638 <d_type+0x33c>
 800d84a:	68e3      	ldr	r3, [r4, #12]
 800d84c:	781a      	ldrb	r2, [r3, #0]
 800d84e:	2a5f      	cmp	r2, #95	; 0x5f
 800d850:	f47f ae46 	bne.w	800d4e0 <d_type+0x1e4>
 800d854:	3301      	adds	r3, #1
 800d856:	60e3      	str	r3, [r4, #12]
 800d858:	4620      	mov	r0, r4
 800d85a:	f7ff fd4f 	bl	800d2fc <d_type>
 800d85e:	462a      	mov	r2, r5
 800d860:	4603      	mov	r3, r0
 800d862:	212d      	movs	r1, #45	; 0x2d
 800d864:	4620      	mov	r0, r4
 800d866:	f7f9 f963 	bl	8006b30 <d_make_comp>
 800d86a:	4605      	mov	r5, r0
 800d86c:	e6e4      	b.n	800d638 <d_type+0x33c>
 800d86e:	6963      	ldr	r3, [r4, #20]
 800d870:	69a2      	ldr	r2, [r4, #24]
 800d872:	4293      	cmp	r3, r2
 800d874:	f280 8082 	bge.w	800d97c <d_type+0x680>
 800d878:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d87c:	6922      	ldr	r2, [r4, #16]
 800d87e:	0089      	lsls	r1, r1, #2
 800d880:	3301      	adds	r3, #1
 800d882:	1855      	adds	r5, r2, r1
 800d884:	6163      	str	r3, [r4, #20]
 800d886:	d079      	beq.n	800d97c <d_type+0x680>
 800d888:	4b57      	ldr	r3, [pc, #348]	; (800d9e8 <d_type+0x6ec>)
 800d88a:	e78a      	b.n	800d7a2 <d_type+0x4a6>
 800d88c:	4620      	mov	r0, r4
 800d88e:	f7ff fd35 	bl	800d2fc <d_type>
 800d892:	2300      	movs	r3, #0
 800d894:	4602      	mov	r2, r0
 800d896:	2149      	movs	r1, #73	; 0x49
 800d898:	4620      	mov	r0, r4
 800d89a:	f7f9 f949 	bl	8006b30 <d_make_comp>
 800d89e:	4605      	mov	r5, r0
 800d8a0:	9001      	str	r0, [sp, #4]
 800d8a2:	e5e3      	b.n	800d46c <d_type+0x170>
 800d8a4:	6963      	ldr	r3, [r4, #20]
 800d8a6:	69a2      	ldr	r2, [r4, #24]
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	da67      	bge.n	800d97c <d_type+0x680>
 800d8ac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d8b0:	6922      	ldr	r2, [r4, #16]
 800d8b2:	0089      	lsls	r1, r1, #2
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	1855      	adds	r5, r2, r1
 800d8b8:	6163      	str	r3, [r4, #20]
 800d8ba:	d05f      	beq.n	800d97c <d_type+0x680>
 800d8bc:	4b4b      	ldr	r3, [pc, #300]	; (800d9ec <d_type+0x6f0>)
 800d8be:	2027      	movs	r0, #39	; 0x27
 800d8c0:	5450      	strb	r0, [r2, r1]
 800d8c2:	606b      	str	r3, [r5, #4]
 800d8c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d8c6:	3311      	adds	r3, #17
 800d8c8:	6323      	str	r3, [r4, #48]	; 0x30
 800d8ca:	e5b3      	b.n	800d434 <d_type+0x138>
 800d8cc:	6963      	ldr	r3, [r4, #20]
 800d8ce:	69a2      	ldr	r2, [r4, #24]
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	da53      	bge.n	800d97c <d_type+0x680>
 800d8d4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d8d8:	6922      	ldr	r2, [r4, #16]
 800d8da:	0089      	lsls	r1, r1, #2
 800d8dc:	3301      	adds	r3, #1
 800d8de:	1855      	adds	r5, r2, r1
 800d8e0:	6163      	str	r3, [r4, #20]
 800d8e2:	d04b      	beq.n	800d97c <d_type+0x680>
 800d8e4:	4b42      	ldr	r3, [pc, #264]	; (800d9f0 <d_type+0x6f4>)
 800d8e6:	e788      	b.n	800d7fa <d_type+0x4fe>
 800d8e8:	6963      	ldr	r3, [r4, #20]
 800d8ea:	69a2      	ldr	r2, [r4, #24]
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	f6bf ada0 	bge.w	800d432 <d_type+0x136>
 800d8f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d8f6:	6921      	ldr	r1, [r4, #16]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	0092      	lsls	r2, r2, #2
 800d8fc:	6163      	str	r3, [r4, #20]
 800d8fe:	188b      	adds	r3, r1, r2
 800d900:	f43f ad97 	beq.w	800d432 <d_type+0x136>
 800d904:	4c3b      	ldr	r4, [pc, #236]	; (800d9f4 <d_type+0x6f8>)
 800d906:	2500      	movs	r5, #0
 800d908:	2004      	movs	r0, #4
 800d90a:	548d      	strb	r5, [r1, r2]
 800d90c:	461d      	mov	r5, r3
 800d90e:	605c      	str	r4, [r3, #4]
 800d910:	6098      	str	r0, [r3, #8]
 800d912:	e58f      	b.n	800d434 <d_type+0x138>
 800d914:	6963      	ldr	r3, [r4, #20]
 800d916:	69a2      	ldr	r2, [r4, #24]
 800d918:	4293      	cmp	r3, r2
 800d91a:	f280 8083 	bge.w	800da24 <d_type+0x728>
 800d91e:	6925      	ldr	r5, [r4, #16]
 800d920:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d924:	0080      	lsls	r0, r0, #2
 800d926:	3301      	adds	r3, #1
 800d928:	182a      	adds	r2, r5, r0
 800d92a:	262c      	movs	r6, #44	; 0x2c
 800d92c:	6163      	str	r3, [r4, #20]
 800d92e:	9201      	str	r2, [sp, #4]
 800d930:	542e      	strb	r6, [r5, r0]
 800d932:	788b      	ldrb	r3, [r1, #2]
 800d934:	3b30      	subs	r3, #48	; 0x30
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b09      	cmp	r3, #9
 800d93a:	bf94      	ite	ls
 800d93c:	2301      	movls	r3, #1
 800d93e:	2300      	movhi	r3, #0
 800d940:	8113      	strh	r3, [r2, #8]
 800d942:	d972      	bls.n	800da2a <d_type+0x72e>
 800d944:	4615      	mov	r5, r2
 800d946:	4620      	mov	r0, r4
 800d948:	f7ff fcd8 	bl	800d2fc <d_type>
 800d94c:	9b01      	ldr	r3, [sp, #4]
 800d94e:	6068      	str	r0, [r5, #4]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	f43f ad6d 	beq.w	800d432 <d_type+0x136>
 800d958:	f104 000c 	add.w	r0, r4, #12
 800d95c:	f7f9 fa2e 	bl	8006dbc <d_number.isra.0>
 800d960:	68e2      	ldr	r2, [r4, #12]
 800d962:	7813      	ldrb	r3, [r2, #0]
 800d964:	b13b      	cbz	r3, 800d976 <d_type+0x67a>
 800d966:	1c53      	adds	r3, r2, #1
 800d968:	60e3      	str	r3, [r4, #12]
 800d96a:	7813      	ldrb	r3, [r2, #0]
 800d96c:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 800d970:	fab3 f383 	clz	r3, r3
 800d974:	095b      	lsrs	r3, r3, #5
 800d976:	9d01      	ldr	r5, [sp, #4]
 800d978:	816b      	strh	r3, [r5, #10]
 800d97a:	e55b      	b.n	800d434 <d_type+0x138>
 800d97c:	2300      	movs	r3, #0
 800d97e:	9301      	str	r3, [sp, #4]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	deff      	udf	#255	; 0xff
 800d984:	2500      	movs	r5, #0
 800d986:	3001      	adds	r0, #1
 800d988:	60e0      	str	r0, [r4, #12]
 800d98a:	4620      	mov	r0, r4
 800d98c:	f7ff fcb6 	bl	800d2fc <d_type>
 800d990:	462a      	mov	r2, r5
 800d992:	4603      	mov	r3, r0
 800d994:	212a      	movs	r1, #42	; 0x2a
 800d996:	4620      	mov	r0, r4
 800d998:	f7f9 f8ca 	bl	8006b30 <d_make_comp>
 800d99c:	4605      	mov	r5, r0
 800d99e:	e64b      	b.n	800d638 <d_type+0x33c>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	6363      	str	r3, [r4, #52]	; 0x34
 800d9a8:	f7ff fad6 	bl	800cf58 <d_expression_1>
 800d9ac:	6365      	str	r5, [r4, #52]	; 0x34
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	f43f ad95 	beq.w	800d4e0 <d_type+0x1e4>
 800d9b6:	68e3      	ldr	r3, [r4, #12]
 800d9b8:	e58e      	b.n	800d4d8 <d_type+0x1dc>
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f000 fa90 	bl	800dee0 <d_name>
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	9001      	str	r0, [sp, #4]
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	f43f ad34 	beq.w	800d432 <d_type+0x136>
 800d9ca:	7803      	ldrb	r3, [r0, #0]
 800d9cc:	2b18      	cmp	r3, #24
 800d9ce:	f47f ad4f 	bne.w	800d470 <d_type+0x174>
 800d9d2:	e52f      	b.n	800d434 <d_type+0x138>
 800d9d4:	08014960 	.word	0x08014960
 800d9d8:	08014c90 	.word	0x08014c90
 800d9dc:	08014c68 	.word	0x08014c68
 800d9e0:	08014c2c 	.word	0x08014c2c
 800d9e4:	08014c54 	.word	0x08014c54
 800d9e8:	08014c7c 	.word	0x08014c7c
 800d9ec:	08014ca4 	.word	0x08014ca4
 800d9f0:	08014c40 	.word	0x08014c40
 800d9f4:	08016220 	.word	0x08016220
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800d9fe:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800da02:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800da04:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800da06:	f7fc ff93 	bl	800a930 <d_template_args>
 800da0a:	68e2      	ldr	r2, [r4, #12]
 800da0c:	7812      	ldrb	r2, [r2, #0]
 800da0e:	2a49      	cmp	r2, #73	; 0x49
 800da10:	d01c      	beq.n	800da4c <d_type+0x750>
 800da12:	6325      	str	r5, [r4, #48]	; 0x30
 800da14:	60e6      	str	r6, [r4, #12]
 800da16:	f8c4 9014 	str.w	r9, [r4, #20]
 800da1a:	f8c4 8020 	str.w	r8, [r4, #32]
 800da1e:	62a7      	str	r7, [r4, #40]	; 0x28
 800da20:	9d01      	ldr	r5, [sp, #4]
 800da22:	e523      	b.n	800d46c <d_type+0x170>
 800da24:	2300      	movs	r3, #0
 800da26:	701b      	strb	r3, [r3, #0]
 800da28:	deff      	udf	#255	; 0xff
 800da2a:	f104 000c 	add.w	r0, r4, #12
 800da2e:	f7f9 f9c5 	bl	8006dbc <d_number.isra.0>
 800da32:	9d01      	ldr	r5, [sp, #4]
 800da34:	e787      	b.n	800d946 <d_type+0x64a>
 800da36:	3103      	adds	r1, #3
 800da38:	2301      	movs	r3, #1
 800da3a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800da3c:	60e1      	str	r1, [r4, #12]
 800da3e:	6363      	str	r3, [r4, #52]	; 0x34
 800da40:	4620      	mov	r0, r4
 800da42:	f7ff fa89 	bl	800cf58 <d_expression_1>
 800da46:	6366      	str	r6, [r4, #52]	; 0x34
 800da48:	4605      	mov	r5, r0
 800da4a:	e6fb      	b.n	800d844 <d_type+0x548>
 800da4c:	9b01      	ldr	r3, [sp, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f43f acef 	beq.w	800d432 <d_type+0x136>
 800da54:	6a22      	ldr	r2, [r4, #32]
 800da56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800da58:	428a      	cmp	r2, r1
 800da5a:	f6bf acea 	bge.w	800d432 <d_type+0x136>
 800da5e:	69e5      	ldr	r5, [r4, #28]
 800da60:	1c51      	adds	r1, r2, #1
 800da62:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800da66:	9a01      	ldr	r2, [sp, #4]
 800da68:	4603      	mov	r3, r0
 800da6a:	6221      	str	r1, [r4, #32]
 800da6c:	e62b      	b.n	800d6c6 <d_type+0x3ca>
 800da6e:	4618      	mov	r0, r3
 800da70:	e789      	b.n	800d986 <d_type+0x68a>
 800da72:	bf00      	nop

0800da74 <d_operator_name>:
 800da74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da78:	68c3      	ldr	r3, [r0, #12]
 800da7a:	4684      	mov	ip, r0
 800da7c:	781f      	ldrb	r7, [r3, #0]
 800da7e:	b317      	cbz	r7, 800dac6 <d_operator_name+0x52>
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	60c2      	str	r2, [r0, #12]
 800da84:	785a      	ldrb	r2, [r3, #1]
 800da86:	781f      	ldrb	r7, [r3, #0]
 800da88:	2a00      	cmp	r2, #0
 800da8a:	d059      	beq.n	800db40 <d_operator_name+0xcc>
 800da8c:	1c9a      	adds	r2, r3, #2
 800da8e:	60c2      	str	r2, [r0, #12]
 800da90:	2f76      	cmp	r7, #118	; 0x76
 800da92:	4604      	mov	r4, r0
 800da94:	f893 e001 	ldrb.w	lr, [r3, #1]
 800da98:	d043      	beq.n	800db22 <d_operator_name+0xae>
 800da9a:	2f63      	cmp	r7, #99	; 0x63
 800da9c:	d114      	bne.n	800dac8 <d_operator_name+0x54>
 800da9e:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 800daa2:	d111      	bne.n	800dac8 <d_operator_name+0x54>
 800daa4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800daa6:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800daa8:	fab3 f383 	clz	r3, r3
 800daac:	095b      	lsrs	r3, r3, #5
 800daae:	6383      	str	r3, [r0, #56]	; 0x38
 800dab0:	f7ff fc24 	bl	800d2fc <d_type>
 800dab4:	63a5      	str	r5, [r4, #56]	; 0x38
 800dab6:	4602      	mov	r2, r0
 800dab8:	2300      	movs	r3, #0
 800daba:	4620      	mov	r0, r4
 800dabc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dac0:	2133      	movs	r1, #51	; 0x33
 800dac2:	f7f9 b835 	b.w	8006b30 <d_make_comp>
 800dac6:	46be      	mov	lr, r7
 800dac8:	4d28      	ldr	r5, [pc, #160]	; (800db6c <d_operator_name+0xf8>)
 800daca:	203d      	movs	r0, #61	; 0x3d
 800dacc:	2200      	movs	r2, #0
 800dace:	e004      	b.n	800dada <d_operator_name+0x66>
 800dad0:	bf8c      	ite	hi
 800dad2:	4618      	movhi	r0, r3
 800dad4:	1c5a      	addls	r2, r3, #1
 800dad6:	4282      	cmp	r2, r0
 800dad8:	d02f      	beq.n	800db3a <d_operator_name+0xc6>
 800dada:	1a83      	subs	r3, r0, r2
 800dadc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800dae0:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800dae4:	0119      	lsls	r1, r3, #4
 800dae6:	586c      	ldr	r4, [r5, r1]
 800dae8:	4429      	add	r1, r5
 800daea:	7826      	ldrb	r6, [r4, #0]
 800daec:	42be      	cmp	r6, r7
 800daee:	d1ef      	bne.n	800dad0 <d_operator_name+0x5c>
 800daf0:	7864      	ldrb	r4, [r4, #1]
 800daf2:	4574      	cmp	r4, lr
 800daf4:	d1ec      	bne.n	800dad0 <d_operator_name+0x5c>
 800daf6:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800dafa:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800dafe:	4293      	cmp	r3, r2
 800db00:	da1b      	bge.n	800db3a <d_operator_name+0xc6>
 800db02:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800db06:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800db0a:	3301      	adds	r3, #1
 800db0c:	0092      	lsls	r2, r2, #2
 800db0e:	f8cc 3014 	str.w	r3, [ip, #20]
 800db12:	1883      	adds	r3, r0, r2
 800db14:	d027      	beq.n	800db66 <d_operator_name+0xf2>
 800db16:	2431      	movs	r4, #49	; 0x31
 800db18:	5484      	strb	r4, [r0, r2]
 800db1a:	6059      	str	r1, [r3, #4]
 800db1c:	4618      	mov	r0, r3
 800db1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db22:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 800db26:	b2eb      	uxtb	r3, r5
 800db28:	2b09      	cmp	r3, #9
 800db2a:	d8cd      	bhi.n	800dac8 <d_operator_name+0x54>
 800db2c:	f7f9 f9c4 	bl	8006eb8 <d_source_name>
 800db30:	6963      	ldr	r3, [r4, #20]
 800db32:	69a2      	ldr	r2, [r4, #24]
 800db34:	4601      	mov	r1, r0
 800db36:	4293      	cmp	r3, r2
 800db38:	db04      	blt.n	800db44 <d_operator_name+0xd0>
 800db3a:	2000      	movs	r0, #0
 800db3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db40:	4696      	mov	lr, r2
 800db42:	e7c1      	b.n	800dac8 <d_operator_name+0x54>
 800db44:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800db48:	6920      	ldr	r0, [r4, #16]
 800db4a:	3301      	adds	r3, #1
 800db4c:	0092      	lsls	r2, r2, #2
 800db4e:	6163      	str	r3, [r4, #20]
 800db50:	1883      	adds	r3, r0, r2
 800db52:	d0f2      	beq.n	800db3a <d_operator_name+0xc6>
 800db54:	2900      	cmp	r1, #0
 800db56:	d0f0      	beq.n	800db3a <d_operator_name+0xc6>
 800db58:	2432      	movs	r4, #50	; 0x32
 800db5a:	5484      	strb	r4, [r0, r2]
 800db5c:	605d      	str	r5, [r3, #4]
 800db5e:	6099      	str	r1, [r3, #8]
 800db60:	4618      	mov	r0, r3
 800db62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db66:	4618      	mov	r0, r3
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db6c:	08014cb8 	.word	0x08014cb8

0800db70 <d_parmlist>:
 800db70:	b530      	push	{r4, r5, lr}
 800db72:	68c2      	ldr	r2, [r0, #12]
 800db74:	b083      	sub	sp, #12
 800db76:	7813      	ldrb	r3, [r2, #0]
 800db78:	2100      	movs	r1, #0
 800db7a:	9101      	str	r1, [sp, #4]
 800db7c:	b343      	cbz	r3, 800dbd0 <d_parmlist+0x60>
 800db7e:	2b45      	cmp	r3, #69	; 0x45
 800db80:	d026      	beq.n	800dbd0 <d_parmlist+0x60>
 800db82:	2b2e      	cmp	r3, #46	; 0x2e
 800db84:	d024      	beq.n	800dbd0 <d_parmlist+0x60>
 800db86:	4604      	mov	r4, r0
 800db88:	ad01      	add	r5, sp, #4
 800db8a:	e016      	b.n	800dbba <d_parmlist+0x4a>
 800db8c:	2b4f      	cmp	r3, #79	; 0x4f
 800db8e:	d016      	beq.n	800dbbe <d_parmlist+0x4e>
 800db90:	4620      	mov	r0, r4
 800db92:	f7ff fbb3 	bl	800d2fc <d_type>
 800db96:	2300      	movs	r3, #0
 800db98:	212e      	movs	r1, #46	; 0x2e
 800db9a:	b1c8      	cbz	r0, 800dbd0 <d_parmlist+0x60>
 800db9c:	4602      	mov	r2, r0
 800db9e:	4620      	mov	r0, r4
 800dba0:	f7f8 ffc6 	bl	8006b30 <d_make_comp>
 800dba4:	6028      	str	r0, [r5, #0]
 800dba6:	b198      	cbz	r0, 800dbd0 <d_parmlist+0x60>
 800dba8:	68e2      	ldr	r2, [r4, #12]
 800dbaa:	f100 0508 	add.w	r5, r0, #8
 800dbae:	7813      	ldrb	r3, [r2, #0]
 800dbb0:	b143      	cbz	r3, 800dbc4 <d_parmlist+0x54>
 800dbb2:	2b45      	cmp	r3, #69	; 0x45
 800dbb4:	d006      	beq.n	800dbc4 <d_parmlist+0x54>
 800dbb6:	2b2e      	cmp	r3, #46	; 0x2e
 800dbb8:	d004      	beq.n	800dbc4 <d_parmlist+0x54>
 800dbba:	2b52      	cmp	r3, #82	; 0x52
 800dbbc:	d1e6      	bne.n	800db8c <d_parmlist+0x1c>
 800dbbe:	7853      	ldrb	r3, [r2, #1]
 800dbc0:	2b45      	cmp	r3, #69	; 0x45
 800dbc2:	d1e5      	bne.n	800db90 <d_parmlist+0x20>
 800dbc4:	9801      	ldr	r0, [sp, #4]
 800dbc6:	b118      	cbz	r0, 800dbd0 <d_parmlist+0x60>
 800dbc8:	6883      	ldr	r3, [r0, #8]
 800dbca:	b123      	cbz	r3, 800dbd6 <d_parmlist+0x66>
 800dbcc:	b003      	add	sp, #12
 800dbce:	bd30      	pop	{r4, r5, pc}
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	b003      	add	sp, #12
 800dbd4:	bd30      	pop	{r4, r5, pc}
 800dbd6:	6842      	ldr	r2, [r0, #4]
 800dbd8:	7811      	ldrb	r1, [r2, #0]
 800dbda:	2927      	cmp	r1, #39	; 0x27
 800dbdc:	d1f6      	bne.n	800dbcc <d_parmlist+0x5c>
 800dbde:	6852      	ldr	r2, [r2, #4]
 800dbe0:	7c11      	ldrb	r1, [r2, #16]
 800dbe2:	2909      	cmp	r1, #9
 800dbe4:	d1f2      	bne.n	800dbcc <d_parmlist+0x5c>
 800dbe6:	6851      	ldr	r1, [r2, #4]
 800dbe8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dbea:	1a52      	subs	r2, r2, r1
 800dbec:	6322      	str	r2, [r4, #48]	; 0x30
 800dbee:	6043      	str	r3, [r0, #4]
 800dbf0:	e7ec      	b.n	800dbcc <d_parmlist+0x5c>
 800dbf2:	bf00      	nop

0800dbf4 <d_unqualified_name>:
 800dbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf6:	68c2      	ldr	r2, [r0, #12]
 800dbf8:	4604      	mov	r4, r0
 800dbfa:	7813      	ldrb	r3, [r2, #0]
 800dbfc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dc00:	2909      	cmp	r1, #9
 800dc02:	d920      	bls.n	800dc46 <d_unqualified_name+0x52>
 800dc04:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 800dc08:	2919      	cmp	r1, #25
 800dc0a:	d933      	bls.n	800dc74 <d_unqualified_name+0x80>
 800dc0c:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 800dc10:	2901      	cmp	r1, #1
 800dc12:	d921      	bls.n	800dc58 <d_unqualified_name+0x64>
 800dc14:	2b4c      	cmp	r3, #76	; 0x4c
 800dc16:	f000 8089 	beq.w	800dd2c <d_unqualified_name+0x138>
 800dc1a:	2b55      	cmp	r3, #85	; 0x55
 800dc1c:	d128      	bne.n	800dc70 <d_unqualified_name+0x7c>
 800dc1e:	7853      	ldrb	r3, [r2, #1]
 800dc20:	2b6c      	cmp	r3, #108	; 0x6c
 800dc22:	d032      	beq.n	800dc8a <d_unqualified_name+0x96>
 800dc24:	2b74      	cmp	r3, #116	; 0x74
 800dc26:	d123      	bne.n	800dc70 <d_unqualified_name+0x7c>
 800dc28:	1c53      	adds	r3, r2, #1
 800dc2a:	60c3      	str	r3, [r0, #12]
 800dc2c:	7853      	ldrb	r3, [r2, #1]
 800dc2e:	2b74      	cmp	r3, #116	; 0x74
 800dc30:	d05b      	beq.n	800dcea <d_unqualified_name+0xf6>
 800dc32:	2b42      	cmp	r3, #66	; 0x42
 800dc34:	f04f 0500 	mov.w	r5, #0
 800dc38:	d10c      	bne.n	800dc54 <d_unqualified_name+0x60>
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc42:	f7f9 b997 	b.w	8006f74 <d_abi_tags>
 800dc46:	f7f9 f937 	bl	8006eb8 <d_source_name>
 800dc4a:	4605      	mov	r5, r0
 800dc4c:	68e3      	ldr	r3, [r4, #12]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	2b42      	cmp	r3, #66	; 0x42
 800dc52:	d0f2      	beq.n	800dc3a <d_unqualified_name+0x46>
 800dc54:	4628      	mov	r0, r5
 800dc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc58:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dc5a:	b121      	cbz	r1, 800dc66 <d_unqualified_name+0x72>
 800dc5c:	7808      	ldrb	r0, [r1, #0]
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d078      	beq.n	800dd54 <d_unqualified_name+0x160>
 800dc62:	2818      	cmp	r0, #24
 800dc64:	d076      	beq.n	800dd54 <d_unqualified_name+0x160>
 800dc66:	2b43      	cmp	r3, #67	; 0x43
 800dc68:	f000 80cd 	beq.w	800de06 <d_unqualified_name+0x212>
 800dc6c:	2b44      	cmp	r3, #68	; 0x44
 800dc6e:	d07b      	beq.n	800dd68 <d_unqualified_name+0x174>
 800dc70:	2000      	movs	r0, #0
 800dc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc74:	f7ff fefe 	bl	800da74 <d_operator_name>
 800dc78:	4605      	mov	r5, r0
 800dc7a:	b118      	cbz	r0, 800dc84 <d_unqualified_name+0x90>
 800dc7c:	7803      	ldrb	r3, [r0, #0]
 800dc7e:	2b31      	cmp	r3, #49	; 0x31
 800dc80:	f000 80a4 	beq.w	800ddcc <d_unqualified_name+0x1d8>
 800dc84:	68e3      	ldr	r3, [r4, #12]
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	e7e2      	b.n	800dc50 <d_unqualified_name+0x5c>
 800dc8a:	1c53      	adds	r3, r2, #1
 800dc8c:	60c3      	str	r3, [r0, #12]
 800dc8e:	7853      	ldrb	r3, [r2, #1]
 800dc90:	2b6c      	cmp	r3, #108	; 0x6c
 800dc92:	d1ce      	bne.n	800dc32 <d_unqualified_name+0x3e>
 800dc94:	3202      	adds	r2, #2
 800dc96:	60c2      	str	r2, [r0, #12]
 800dc98:	f7ff ff6a 	bl	800db70 <d_parmlist>
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f000 80da 	beq.w	800de58 <d_unqualified_name+0x264>
 800dca4:	68e2      	ldr	r2, [r4, #12]
 800dca6:	7813      	ldrb	r3, [r2, #0]
 800dca8:	2b45      	cmp	r3, #69	; 0x45
 800dcaa:	d1c2      	bne.n	800dc32 <d_unqualified_name+0x3e>
 800dcac:	3201      	adds	r2, #1
 800dcae:	60e2      	str	r2, [r4, #12]
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	f7f9 f8c7 	bl	8006e44 <d_compact_number>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	db13      	blt.n	800dce2 <d_unqualified_name+0xee>
 800dcba:	6963      	ldr	r3, [r4, #20]
 800dcbc:	69a2      	ldr	r2, [r4, #24]
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	da0f      	bge.n	800dce2 <d_unqualified_name+0xee>
 800dcc2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dcc6:	6921      	ldr	r1, [r4, #16]
 800dcc8:	0092      	lsls	r2, r2, #2
 800dcca:	3301      	adds	r3, #1
 800dccc:	188d      	adds	r5, r1, r2
 800dcce:	6163      	str	r3, [r4, #20]
 800dcd0:	d007      	beq.n	800dce2 <d_unqualified_name+0xee>
 800dcd2:	2344      	movs	r3, #68	; 0x44
 800dcd4:	548b      	strb	r3, [r1, r2]
 800dcd6:	606e      	str	r6, [r5, #4]
 800dcd8:	60a8      	str	r0, [r5, #8]
 800dcda:	6a23      	ldr	r3, [r4, #32]
 800dcdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dcde:	4293      	cmp	r3, r2
 800dce0:	db1c      	blt.n	800dd1c <d_unqualified_name+0x128>
 800dce2:	68e3      	ldr	r3, [r4, #12]
 800dce4:	2500      	movs	r5, #0
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	e7b2      	b.n	800dc50 <d_unqualified_name+0x5c>
 800dcea:	3202      	adds	r2, #2
 800dcec:	60c2      	str	r2, [r0, #12]
 800dcee:	f7f9 f8a9 	bl	8006e44 <d_compact_number>
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	dbf5      	blt.n	800dce2 <d_unqualified_name+0xee>
 800dcf6:	6963      	ldr	r3, [r4, #20]
 800dcf8:	69a2      	ldr	r2, [r4, #24]
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	daf1      	bge.n	800dce2 <d_unqualified_name+0xee>
 800dcfe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dd02:	6921      	ldr	r1, [r4, #16]
 800dd04:	0092      	lsls	r2, r2, #2
 800dd06:	3301      	adds	r3, #1
 800dd08:	188d      	adds	r5, r1, r2
 800dd0a:	6163      	str	r3, [r4, #20]
 800dd0c:	d0e9      	beq.n	800dce2 <d_unqualified_name+0xee>
 800dd0e:	2346      	movs	r3, #70	; 0x46
 800dd10:	548b      	strb	r3, [r1, r2]
 800dd12:	6068      	str	r0, [r5, #4]
 800dd14:	6a23      	ldr	r3, [r4, #32]
 800dd16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	dae2      	bge.n	800dce2 <d_unqualified_name+0xee>
 800dd1c:	69e1      	ldr	r1, [r4, #28]
 800dd1e:	1c5a      	adds	r2, r3, #1
 800dd20:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800dd24:	68e3      	ldr	r3, [r4, #12]
 800dd26:	6222      	str	r2, [r4, #32]
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	e791      	b.n	800dc50 <d_unqualified_name+0x5c>
 800dd2c:	3201      	adds	r2, #1
 800dd2e:	60c2      	str	r2, [r0, #12]
 800dd30:	f7f9 f8c2 	bl	8006eb8 <d_source_name>
 800dd34:	4605      	mov	r5, r0
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d09a      	beq.n	800dc70 <d_unqualified_name+0x7c>
 800dd3a:	68e2      	ldr	r2, [r4, #12]
 800dd3c:	7813      	ldrb	r3, [r2, #0]
 800dd3e:	2b5f      	cmp	r3, #95	; 0x5f
 800dd40:	d186      	bne.n	800dc50 <d_unqualified_name+0x5c>
 800dd42:	4620      	mov	r0, r4
 800dd44:	3201      	adds	r2, #1
 800dd46:	f840 2f0c 	str.w	r2, [r0, #12]!
 800dd4a:	f7f9 f837 	bl	8006dbc <d_number.isra.0>
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	da98      	bge.n	800dc84 <d_unqualified_name+0x90>
 800dd52:	e78d      	b.n	800dc70 <d_unqualified_name+0x7c>
 800dd54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dd56:	688b      	ldr	r3, [r1, #8]
 800dd58:	4403      	add	r3, r0
 800dd5a:	6323      	str	r3, [r4, #48]	; 0x30
 800dd5c:	7813      	ldrb	r3, [r2, #0]
 800dd5e:	2b43      	cmp	r3, #67	; 0x43
 800dd60:	d051      	beq.n	800de06 <d_unqualified_name+0x212>
 800dd62:	2b44      	cmp	r3, #68	; 0x44
 800dd64:	f47f af65 	bne.w	800dc32 <d_unqualified_name+0x3e>
 800dd68:	7853      	ldrb	r3, [r2, #1]
 800dd6a:	3b30      	subs	r3, #48	; 0x30
 800dd6c:	2b05      	cmp	r3, #5
 800dd6e:	f63f af7f 	bhi.w	800dc70 <d_unqualified_name+0x7c>
 800dd72:	a001      	add	r0, pc, #4	; (adr r0, 800dd78 <d_unqualified_name+0x184>)
 800dd74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dd78:	0800ddc1 	.word	0x0800ddc1
 800dd7c:	0800dd91 	.word	0x0800dd91
 800dd80:	0800ddbd 	.word	0x0800ddbd
 800dd84:	0800dc71 	.word	0x0800dc71
 800dd88:	0800ddc9 	.word	0x0800ddc9
 800dd8c:	0800ddc5 	.word	0x0800ddc5
 800dd90:	2702      	movs	r7, #2
 800dd92:	6963      	ldr	r3, [r4, #20]
 800dd94:	69a0      	ldr	r0, [r4, #24]
 800dd96:	1c95      	adds	r5, r2, #2
 800dd98:	4283      	cmp	r3, r0
 800dd9a:	60e5      	str	r5, [r4, #12]
 800dd9c:	da30      	bge.n	800de00 <d_unqualified_name+0x20c>
 800dd9e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800dda2:	6926      	ldr	r6, [r4, #16]
 800dda4:	0080      	lsls	r0, r0, #2
 800dda6:	3301      	adds	r3, #1
 800dda8:	1835      	adds	r5, r6, r0
 800ddaa:	6163      	str	r3, [r4, #20]
 800ddac:	d028      	beq.n	800de00 <d_unqualified_name+0x20c>
 800ddae:	b339      	cbz	r1, 800de00 <d_unqualified_name+0x20c>
 800ddb0:	2308      	movs	r3, #8
 800ddb2:	5433      	strb	r3, [r6, r0]
 800ddb4:	712f      	strb	r7, [r5, #4]
 800ddb6:	60a9      	str	r1, [r5, #8]
 800ddb8:	7893      	ldrb	r3, [r2, #2]
 800ddba:	e749      	b.n	800dc50 <d_unqualified_name+0x5c>
 800ddbc:	2703      	movs	r7, #3
 800ddbe:	e7e8      	b.n	800dd92 <d_unqualified_name+0x19e>
 800ddc0:	2701      	movs	r7, #1
 800ddc2:	e7e6      	b.n	800dd92 <d_unqualified_name+0x19e>
 800ddc4:	2705      	movs	r7, #5
 800ddc6:	e7e4      	b.n	800dd92 <d_unqualified_name+0x19e>
 800ddc8:	2704      	movs	r7, #4
 800ddca:	e7e2      	b.n	800dd92 <d_unqualified_name+0x19e>
 800ddcc:	6842      	ldr	r2, [r0, #4]
 800ddce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ddd0:	6893      	ldr	r3, [r2, #8]
 800ddd2:	6810      	ldr	r0, [r2, #0]
 800ddd4:	440b      	add	r3, r1
 800ddd6:	3307      	adds	r3, #7
 800ddd8:	6323      	str	r3, [r4, #48]	; 0x30
 800ddda:	4921      	ldr	r1, [pc, #132]	; (800de60 <d_unqualified_name+0x26c>)
 800dddc:	f001 f800 	bl	800ede0 <strcmp>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	f47f af4f 	bne.w	800dc84 <d_unqualified_name+0x90>
 800dde6:	4620      	mov	r0, r4
 800dde8:	f7f9 f866 	bl	8006eb8 <d_source_name>
 800ddec:	462a      	mov	r2, r5
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2135      	movs	r1, #53	; 0x35
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f7f8 fe9c 	bl	8006b30 <d_make_comp>
 800ddf8:	68e3      	ldr	r3, [r4, #12]
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	e727      	b.n	800dc50 <d_unqualified_name+0x5c>
 800de00:	7893      	ldrb	r3, [r2, #2]
 800de02:	2500      	movs	r5, #0
 800de04:	e724      	b.n	800dc50 <d_unqualified_name+0x5c>
 800de06:	7853      	ldrb	r3, [r2, #1]
 800de08:	3b31      	subs	r3, #49	; 0x31
 800de0a:	2b04      	cmp	r3, #4
 800de0c:	f63f af30 	bhi.w	800dc70 <d_unqualified_name+0x7c>
 800de10:	e8df f003 	tbb	[pc, r3]
 800de14:	1e20031a 	.word	0x1e20031a
 800de18:	1c          	.byte	0x1c
 800de19:	00          	.byte	0x00
 800de1a:	2702      	movs	r7, #2
 800de1c:	6963      	ldr	r3, [r4, #20]
 800de1e:	69a0      	ldr	r0, [r4, #24]
 800de20:	1c95      	adds	r5, r2, #2
 800de22:	4283      	cmp	r3, r0
 800de24:	60e5      	str	r5, [r4, #12]
 800de26:	daeb      	bge.n	800de00 <d_unqualified_name+0x20c>
 800de28:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800de2c:	6926      	ldr	r6, [r4, #16]
 800de2e:	0080      	lsls	r0, r0, #2
 800de30:	3301      	adds	r3, #1
 800de32:	1835      	adds	r5, r6, r0
 800de34:	6163      	str	r3, [r4, #20]
 800de36:	d0e3      	beq.n	800de00 <d_unqualified_name+0x20c>
 800de38:	2900      	cmp	r1, #0
 800de3a:	d0e1      	beq.n	800de00 <d_unqualified_name+0x20c>
 800de3c:	2307      	movs	r3, #7
 800de3e:	5433      	strb	r3, [r6, r0]
 800de40:	712f      	strb	r7, [r5, #4]
 800de42:	60a9      	str	r1, [r5, #8]
 800de44:	7893      	ldrb	r3, [r2, #2]
 800de46:	e703      	b.n	800dc50 <d_unqualified_name+0x5c>
 800de48:	2701      	movs	r7, #1
 800de4a:	e7e7      	b.n	800de1c <d_unqualified_name+0x228>
 800de4c:	2705      	movs	r7, #5
 800de4e:	e7e5      	b.n	800de1c <d_unqualified_name+0x228>
 800de50:	2704      	movs	r7, #4
 800de52:	e7e3      	b.n	800de1c <d_unqualified_name+0x228>
 800de54:	2703      	movs	r7, #3
 800de56:	e7e1      	b.n	800de1c <d_unqualified_name+0x228>
 800de58:	68e3      	ldr	r3, [r4, #12]
 800de5a:	4605      	mov	r5, r0
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	e6f7      	b.n	800dc50 <d_unqualified_name+0x5c>
 800de60:	08016228 	.word	0x08016228

0800de64 <d_bare_function_type>:
 800de64:	b570      	push	{r4, r5, r6, lr}
 800de66:	68c3      	ldr	r3, [r0, #12]
 800de68:	4604      	mov	r4, r0
 800de6a:	781a      	ldrb	r2, [r3, #0]
 800de6c:	2a4a      	cmp	r2, #74	; 0x4a
 800de6e:	d00d      	beq.n	800de8c <d_bare_function_type+0x28>
 800de70:	b971      	cbnz	r1, 800de90 <d_bare_function_type+0x2c>
 800de72:	460d      	mov	r5, r1
 800de74:	4620      	mov	r0, r4
 800de76:	f7ff fe7b 	bl	800db70 <d_parmlist>
 800de7a:	b178      	cbz	r0, 800de9c <d_bare_function_type+0x38>
 800de7c:	4603      	mov	r3, r0
 800de7e:	462a      	mov	r2, r5
 800de80:	4620      	mov	r0, r4
 800de82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de86:	2129      	movs	r1, #41	; 0x29
 800de88:	f7f8 be52 	b.w	8006b30 <d_make_comp>
 800de8c:	3301      	adds	r3, #1
 800de8e:	60c3      	str	r3, [r0, #12]
 800de90:	4620      	mov	r0, r4
 800de92:	f7ff fa33 	bl	800d2fc <d_type>
 800de96:	4605      	mov	r5, r0
 800de98:	2800      	cmp	r0, #0
 800de9a:	d1eb      	bne.n	800de74 <d_bare_function_type+0x10>
 800de9c:	2000      	movs	r0, #0
 800de9e:	bd70      	pop	{r4, r5, r6, pc}

0800dea0 <d_function_type>:
 800dea0:	68c3      	ldr	r3, [r0, #12]
 800dea2:	781a      	ldrb	r2, [r3, #0]
 800dea4:	2a46      	cmp	r2, #70	; 0x46
 800dea6:	d001      	beq.n	800deac <d_function_type+0xc>
 800dea8:	2000      	movs	r0, #0
 800deaa:	4770      	bx	lr
 800deac:	b510      	push	{r4, lr}
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	60c2      	str	r2, [r0, #12]
 800deb2:	785a      	ldrb	r2, [r3, #1]
 800deb4:	2101      	movs	r1, #1
 800deb6:	2a59      	cmp	r2, #89	; 0x59
 800deb8:	bf04      	itt	eq
 800deba:	3302      	addeq	r3, #2
 800debc:	60c3      	streq	r3, [r0, #12]
 800debe:	4604      	mov	r4, r0
 800dec0:	f7ff ffd0 	bl	800de64 <d_bare_function_type>
 800dec4:	4601      	mov	r1, r0
 800dec6:	4620      	mov	r0, r4
 800dec8:	f7f8 feda 	bl	8006c80 <d_ref_qualifier>
 800decc:	68e3      	ldr	r3, [r4, #12]
 800dece:	781a      	ldrb	r2, [r3, #0]
 800ded0:	2a45      	cmp	r2, #69	; 0x45
 800ded2:	d001      	beq.n	800ded8 <d_function_type+0x38>
 800ded4:	2000      	movs	r0, #0
 800ded6:	bd10      	pop	{r4, pc}
 800ded8:	3301      	adds	r3, #1
 800deda:	60e3      	str	r3, [r4, #12]
 800dedc:	bd10      	pop	{r4, pc}
 800dede:	bf00      	nop

0800dee0 <d_name>:
 800dee0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dee4:	68c2      	ldr	r2, [r0, #12]
 800dee6:	b083      	sub	sp, #12
 800dee8:	7813      	ldrb	r3, [r2, #0]
 800deea:	4605      	mov	r5, r0
 800deec:	3b4e      	subs	r3, #78	; 0x4e
 800deee:	2b0c      	cmp	r3, #12
 800def0:	d869      	bhi.n	800dfc6 <d_name+0xe6>
 800def2:	e8df f003 	tbb	[pc, r3]
 800def6:	681b      	.short	0x681b
 800def8:	59686868 	.word	0x59686868
 800defc:	68681668 	.word	0x68681668
 800df00:	6868      	.short	0x6868
 800df02:	07          	.byte	0x07
 800df03:	00          	.byte	0x00
 800df04:	3201      	adds	r2, #1
 800df06:	2100      	movs	r1, #0
 800df08:	60c2      	str	r2, [r0, #12]
 800df0a:	f000 f9af 	bl	800e26c <d_encoding>
 800df0e:	68eb      	ldr	r3, [r5, #12]
 800df10:	4606      	mov	r6, r0
 800df12:	7819      	ldrb	r1, [r3, #0]
 800df14:	2945      	cmp	r1, #69	; 0x45
 800df16:	f000 809c 	beq.w	800e052 <d_name+0x172>
 800df1a:	2000      	movs	r0, #0
 800df1c:	b003      	add	sp, #12
 800df1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df22:	f7ff fe67 	bl	800dbf4 <d_unqualified_name>
 800df26:	b003      	add	sp, #12
 800df28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df2c:	3201      	adds	r2, #1
 800df2e:	60c2      	str	r2, [r0, #12]
 800df30:	a901      	add	r1, sp, #4
 800df32:	2201      	movs	r2, #1
 800df34:	f7f8 fe48 	bl	8006bc8 <d_cv_qualifiers>
 800df38:	4681      	mov	r9, r0
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d0ed      	beq.n	800df1a <d_name+0x3a>
 800df3e:	2100      	movs	r1, #0
 800df40:	4628      	mov	r0, r5
 800df42:	f7f8 fe9d 	bl	8006c80 <d_ref_qualifier>
 800df46:	4680      	mov	r8, r0
 800df48:	68ea      	ldr	r2, [r5, #12]
 800df4a:	4eba      	ldr	r6, [pc, #744]	; (800e234 <d_name+0x354>)
 800df4c:	7814      	ldrb	r4, [r2, #0]
 800df4e:	2700      	movs	r7, #0
 800df50:	2c00      	cmp	r4, #0
 800df52:	f000 80f1 	beq.w	800e138 <d_name+0x258>
 800df56:	2c44      	cmp	r4, #68	; 0x44
 800df58:	f000 80d8 	beq.w	800e10c <d_name+0x22c>
 800df5c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b1c      	cmp	r3, #28
 800df64:	f240 80ae 	bls.w	800e0c4 <d_name+0x1e4>
 800df68:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	2b19      	cmp	r3, #25
 800df70:	f240 80ad 	bls.w	800e0ce <d_name+0x1ee>
 800df74:	2c55      	cmp	r4, #85	; 0x55
 800df76:	f000 80e5 	beq.w	800e144 <d_name+0x264>
 800df7a:	2c53      	cmp	r4, #83	; 0x53
 800df7c:	f000 80f0 	beq.w	800e160 <d_name+0x280>
 800df80:	2c49      	cmp	r4, #73	; 0x49
 800df82:	f000 80e6 	beq.w	800e152 <d_name+0x272>
 800df86:	2c54      	cmp	r4, #84	; 0x54
 800df88:	f000 8122 	beq.w	800e1d0 <d_name+0x2f0>
 800df8c:	2c45      	cmp	r4, #69	; 0x45
 800df8e:	f000 8157 	beq.w	800e240 <d_name+0x360>
 800df92:	2c4d      	cmp	r4, #77	; 0x4d
 800df94:	f040 80d0 	bne.w	800e138 <d_name+0x258>
 800df98:	2f00      	cmp	r7, #0
 800df9a:	f000 80cd 	beq.w	800e138 <d_name+0x258>
 800df9e:	1c53      	adds	r3, r2, #1
 800dfa0:	60eb      	str	r3, [r5, #12]
 800dfa2:	7854      	ldrb	r4, [r2, #1]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	e7d3      	b.n	800df50 <d_name+0x70>
 800dfa8:	7853      	ldrb	r3, [r2, #1]
 800dfaa:	2b74      	cmp	r3, #116	; 0x74
 800dfac:	d029      	beq.n	800e002 <d_name+0x122>
 800dfae:	2100      	movs	r1, #0
 800dfb0:	f7f8 fffa 	bl	8006fa8 <d_substitution>
 800dfb4:	68eb      	ldr	r3, [r5, #12]
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	2b49      	cmp	r3, #73	; 0x49
 800dfbc:	d047      	beq.n	800e04e <d_name+0x16e>
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	b003      	add	sp, #12
 800dfc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfc6:	f7ff fe15 	bl	800dbf4 <d_unqualified_name>
 800dfca:	68eb      	ldr	r3, [r5, #12]
 800dfcc:	4604      	mov	r4, r0
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b49      	cmp	r3, #73	; 0x49
 800dfd2:	d1f4      	bne.n	800dfbe <d_name+0xde>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d0a0      	beq.n	800df1a <d_name+0x3a>
 800dfd8:	6a2b      	ldr	r3, [r5, #32]
 800dfda:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	da9c      	bge.n	800df1a <d_name+0x3a>
 800dfe0:	69e9      	ldr	r1, [r5, #28]
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800dfe8:	4628      	mov	r0, r5
 800dfea:	622a      	str	r2, [r5, #32]
 800dfec:	f7fc fca0 	bl	800a930 <d_template_args>
 800dff0:	4622      	mov	r2, r4
 800dff2:	4603      	mov	r3, r0
 800dff4:	2104      	movs	r1, #4
 800dff6:	4628      	mov	r0, r5
 800dff8:	f7f8 fd9a 	bl	8006b30 <d_make_comp>
 800dffc:	b003      	add	sp, #12
 800dffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e002:	6943      	ldr	r3, [r0, #20]
 800e004:	6981      	ldr	r1, [r0, #24]
 800e006:	3202      	adds	r2, #2
 800e008:	428b      	cmp	r3, r1
 800e00a:	60c2      	str	r2, [r0, #12]
 800e00c:	f2c0 80b2 	blt.w	800e174 <d_name+0x294>
 800e010:	2400      	movs	r4, #0
 800e012:	4628      	mov	r0, r5
 800e014:	f7ff fdee 	bl	800dbf4 <d_unqualified_name>
 800e018:	4622      	mov	r2, r4
 800e01a:	4603      	mov	r3, r0
 800e01c:	2101      	movs	r1, #1
 800e01e:	4628      	mov	r0, r5
 800e020:	f7f8 fd86 	bl	8006b30 <d_make_comp>
 800e024:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e026:	68ea      	ldr	r2, [r5, #12]
 800e028:	3303      	adds	r3, #3
 800e02a:	632b      	str	r3, [r5, #48]	; 0x30
 800e02c:	7813      	ldrb	r3, [r2, #0]
 800e02e:	4604      	mov	r4, r0
 800e030:	2b49      	cmp	r3, #73	; 0x49
 800e032:	d1c4      	bne.n	800dfbe <d_name+0xde>
 800e034:	2800      	cmp	r0, #0
 800e036:	f43f af70 	beq.w	800df1a <d_name+0x3a>
 800e03a:	6a2b      	ldr	r3, [r5, #32]
 800e03c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e03e:	4293      	cmp	r3, r2
 800e040:	f6bf af6b 	bge.w	800df1a <d_name+0x3a>
 800e044:	69e9      	ldr	r1, [r5, #28]
 800e046:	1c5a      	adds	r2, r3, #1
 800e048:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800e04c:	622a      	str	r2, [r5, #32]
 800e04e:	4628      	mov	r0, r5
 800e050:	e7cc      	b.n	800dfec <d_name+0x10c>
 800e052:	1c5a      	adds	r2, r3, #1
 800e054:	60ea      	str	r2, [r5, #12]
 800e056:	7859      	ldrb	r1, [r3, #1]
 800e058:	2973      	cmp	r1, #115	; 0x73
 800e05a:	f000 80a0 	beq.w	800e19e <d_name+0x2be>
 800e05e:	2964      	cmp	r1, #100	; 0x64
 800e060:	f000 80bd 	beq.w	800e1de <d_name+0x2fe>
 800e064:	4628      	mov	r0, r5
 800e066:	f7ff ff3b 	bl	800dee0 <d_name>
 800e06a:	4604      	mov	r4, r0
 800e06c:	2800      	cmp	r0, #0
 800e06e:	f000 8092 	beq.w	800e196 <d_name+0x2b6>
 800e072:	7803      	ldrb	r3, [r0, #0]
 800e074:	2b44      	cmp	r3, #68	; 0x44
 800e076:	f000 808e 	beq.w	800e196 <d_name+0x2b6>
 800e07a:	2b46      	cmp	r3, #70	; 0x46
 800e07c:	f000 808b 	beq.w	800e196 <d_name+0x2b6>
 800e080:	f04f 37ff 	mov.w	r7, #4294967295
 800e084:	68eb      	ldr	r3, [r5, #12]
 800e086:	781a      	ldrb	r2, [r3, #0]
 800e088:	2a5f      	cmp	r2, #95	; 0x5f
 800e08a:	f000 80bf 	beq.w	800e20c <d_name+0x32c>
 800e08e:	1c7b      	adds	r3, r7, #1
 800e090:	f000 8081 	beq.w	800e196 <d_name+0x2b6>
 800e094:	696b      	ldr	r3, [r5, #20]
 800e096:	69aa      	ldr	r2, [r5, #24]
 800e098:	4293      	cmp	r3, r2
 800e09a:	da7e      	bge.n	800e19a <d_name+0x2ba>
 800e09c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e0a0:	6929      	ldr	r1, [r5, #16]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	0092      	lsls	r2, r2, #2
 800e0a6:	616b      	str	r3, [r5, #20]
 800e0a8:	188b      	adds	r3, r1, r2
 800e0aa:	d003      	beq.n	800e0b4 <d_name+0x1d4>
 800e0ac:	2045      	movs	r0, #69	; 0x45
 800e0ae:	5488      	strb	r0, [r1, r2]
 800e0b0:	609f      	str	r7, [r3, #8]
 800e0b2:	605c      	str	r4, [r3, #4]
 800e0b4:	4632      	mov	r2, r6
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	2102      	movs	r1, #2
 800e0ba:	f7f8 fd39 	bl	8006b30 <d_make_comp>
 800e0be:	b003      	add	sp, #12
 800e0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0c4:	fa26 f303 	lsr.w	r3, r6, r3
 800e0c8:	07d9      	lsls	r1, r3, #31
 800e0ca:	f57f af4d 	bpl.w	800df68 <d_name+0x88>
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	f7ff fd90 	bl	800dbf4 <d_unqualified_name>
 800e0d4:	b377      	cbz	r7, 800e134 <d_name+0x254>
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	4603      	mov	r3, r0
 800e0da:	463a      	mov	r2, r7
 800e0dc:	4628      	mov	r0, r5
 800e0de:	f7f8 fd27 	bl	8006b30 <d_make_comp>
 800e0e2:	4607      	mov	r7, r0
 800e0e4:	2c53      	cmp	r4, #83	; 0x53
 800e0e6:	d01d      	beq.n	800e124 <d_name+0x244>
 800e0e8:	68ea      	ldr	r2, [r5, #12]
 800e0ea:	7814      	ldrb	r4, [r2, #0]
 800e0ec:	2c45      	cmp	r4, #69	; 0x45
 800e0ee:	f43f af35 	beq.w	800df5c <d_name+0x7c>
 800e0f2:	b30f      	cbz	r7, 800e138 <d_name+0x258>
 800e0f4:	6a2b      	ldr	r3, [r5, #32]
 800e0f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	da1d      	bge.n	800e138 <d_name+0x258>
 800e0fc:	69ea      	ldr	r2, [r5, #28]
 800e0fe:	1c59      	adds	r1, r3, #1
 800e100:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
 800e104:	68ea      	ldr	r2, [r5, #12]
 800e106:	6229      	str	r1, [r5, #32]
 800e108:	7814      	ldrb	r4, [r2, #0]
 800e10a:	e721      	b.n	800df50 <d_name+0x70>
 800e10c:	7853      	ldrb	r3, [r2, #1]
 800e10e:	4628      	mov	r0, r5
 800e110:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e114:	2b54      	cmp	r3, #84	; 0x54
 800e116:	d008      	beq.n	800e12a <d_name+0x24a>
 800e118:	f7ff fd6c 	bl	800dbf4 <d_unqualified_name>
 800e11c:	2f00      	cmp	r7, #0
 800e11e:	d1da      	bne.n	800e0d6 <d_name+0x1f6>
 800e120:	4607      	mov	r7, r0
 800e122:	e7e1      	b.n	800e0e8 <d_name+0x208>
 800e124:	68ea      	ldr	r2, [r5, #12]
 800e126:	7814      	ldrb	r4, [r2, #0]
 800e128:	e712      	b.n	800df50 <d_name+0x70>
 800e12a:	f7ff f8e7 	bl	800d2fc <d_type>
 800e12e:	2f00      	cmp	r7, #0
 800e130:	d1d1      	bne.n	800e0d6 <d_name+0x1f6>
 800e132:	e7f5      	b.n	800e120 <d_name+0x240>
 800e134:	4607      	mov	r7, r0
 800e136:	e7d5      	b.n	800e0e4 <d_name+0x204>
 800e138:	2000      	movs	r0, #0
 800e13a:	f8c9 0000 	str.w	r0, [r9]
 800e13e:	b003      	add	sp, #12
 800e140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e144:	4628      	mov	r0, r5
 800e146:	f7ff fd55 	bl	800dbf4 <d_unqualified_name>
 800e14a:	2f00      	cmp	r7, #0
 800e14c:	d1c3      	bne.n	800e0d6 <d_name+0x1f6>
 800e14e:	4607      	mov	r7, r0
 800e150:	e7ca      	b.n	800e0e8 <d_name+0x208>
 800e152:	2f00      	cmp	r7, #0
 800e154:	d0f0      	beq.n	800e138 <d_name+0x258>
 800e156:	4628      	mov	r0, r5
 800e158:	f7fc fbea 	bl	800a930 <d_template_args>
 800e15c:	2104      	movs	r1, #4
 800e15e:	e7bb      	b.n	800e0d8 <d_name+0x1f8>
 800e160:	2101      	movs	r1, #1
 800e162:	4628      	mov	r0, r5
 800e164:	f7f8 ff20 	bl	8006fa8 <d_substitution>
 800e168:	2f00      	cmp	r7, #0
 800e16a:	d1b4      	bne.n	800e0d6 <d_name+0x1f6>
 800e16c:	68ea      	ldr	r2, [r5, #12]
 800e16e:	4607      	mov	r7, r0
 800e170:	7814      	ldrb	r4, [r2, #0]
 800e172:	e6ed      	b.n	800df50 <d_name+0x70>
 800e174:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e178:	6902      	ldr	r2, [r0, #16]
 800e17a:	3301      	adds	r3, #1
 800e17c:	0089      	lsls	r1, r1, #2
 800e17e:	6143      	str	r3, [r0, #20]
 800e180:	1853      	adds	r3, r2, r1
 800e182:	f43f af45 	beq.w	800e010 <d_name+0x130>
 800e186:	4e2c      	ldr	r6, [pc, #176]	; (800e238 <d_name+0x358>)
 800e188:	2700      	movs	r7, #0
 800e18a:	2003      	movs	r0, #3
 800e18c:	5457      	strb	r7, [r2, r1]
 800e18e:	461c      	mov	r4, r3
 800e190:	605e      	str	r6, [r3, #4]
 800e192:	6098      	str	r0, [r3, #8]
 800e194:	e73d      	b.n	800e012 <d_name+0x132>
 800e196:	4623      	mov	r3, r4
 800e198:	e78c      	b.n	800e0b4 <d_name+0x1d4>
 800e19a:	2300      	movs	r3, #0
 800e19c:	e78a      	b.n	800e0b4 <d_name+0x1d4>
 800e19e:	1c9a      	adds	r2, r3, #2
 800e1a0:	60ea      	str	r2, [r5, #12]
 800e1a2:	789a      	ldrb	r2, [r3, #2]
 800e1a4:	2a5f      	cmp	r2, #95	; 0x5f
 800e1a6:	d03b      	beq.n	800e220 <d_name+0x340>
 800e1a8:	696b      	ldr	r3, [r5, #20]
 800e1aa:	69aa      	ldr	r2, [r5, #24]
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	daf4      	bge.n	800e19a <d_name+0x2ba>
 800e1b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e1b4:	6928      	ldr	r0, [r5, #16]
 800e1b6:	0089      	lsls	r1, r1, #2
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	1842      	adds	r2, r0, r1
 800e1bc:	616b      	str	r3, [r5, #20]
 800e1be:	d0ec      	beq.n	800e19a <d_name+0x2ba>
 800e1c0:	4c1e      	ldr	r4, [pc, #120]	; (800e23c <d_name+0x35c>)
 800e1c2:	2700      	movs	r7, #0
 800e1c4:	5447      	strb	r7, [r0, r1]
 800e1c6:	210e      	movs	r1, #14
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	6054      	str	r4, [r2, #4]
 800e1cc:	6091      	str	r1, [r2, #8]
 800e1ce:	e771      	b.n	800e0b4 <d_name+0x1d4>
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	f7f8 fe4f 	bl	8006e74 <d_template_param>
 800e1d6:	2f00      	cmp	r7, #0
 800e1d8:	f47f af7d 	bne.w	800e0d6 <d_name+0x1f6>
 800e1dc:	e7a0      	b.n	800e120 <d_name+0x240>
 800e1de:	3302      	adds	r3, #2
 800e1e0:	60eb      	str	r3, [r5, #12]
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f7f8 fe2e 	bl	8006e44 <d_compact_number>
 800e1e8:	1e07      	subs	r7, r0, #0
 800e1ea:	f6ff ae96 	blt.w	800df1a <d_name+0x3a>
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7ff fe76 	bl	800dee0 <d_name>
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	f43f af4c 	beq.w	800e094 <d_name+0x1b4>
 800e1fc:	7803      	ldrb	r3, [r0, #0]
 800e1fe:	2b44      	cmp	r3, #68	; 0x44
 800e200:	f43f af48 	beq.w	800e094 <d_name+0x1b4>
 800e204:	2b46      	cmp	r3, #70	; 0x46
 800e206:	f43f af45 	beq.w	800e094 <d_name+0x1b4>
 800e20a:	e73b      	b.n	800e084 <d_name+0x1a4>
 800e20c:	4628      	mov	r0, r5
 800e20e:	3301      	adds	r3, #1
 800e210:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e214:	f7f8 fdd2 	bl	8006dbc <d_number.isra.0>
 800e218:	2800      	cmp	r0, #0
 800e21a:	f6bf af38 	bge.w	800e08e <d_name+0x1ae>
 800e21e:	e67c      	b.n	800df1a <d_name+0x3a>
 800e220:	4628      	mov	r0, r5
 800e222:	3303      	adds	r3, #3
 800e224:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e228:	f7f8 fdc8 	bl	8006dbc <d_number.isra.0>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	dabb      	bge.n	800e1a8 <d_name+0x2c8>
 800e230:	e673      	b.n	800df1a <d_name+0x3a>
 800e232:	bf00      	nop
 800e234:	100803ff 	.word	0x100803ff
 800e238:	0801623c 	.word	0x0801623c
 800e23c:	0801622c 	.word	0x0801622c
 800e240:	f8c9 7000 	str.w	r7, [r9]
 800e244:	2f00      	cmp	r7, #0
 800e246:	f43f ae68 	beq.w	800df1a <d_name+0x3a>
 800e24a:	f1b8 0f00 	cmp.w	r8, #0
 800e24e:	d004      	beq.n	800e25a <d_name+0x37a>
 800e250:	9b01      	ldr	r3, [sp, #4]
 800e252:	f8cd 8004 	str.w	r8, [sp, #4]
 800e256:	f8c8 3004 	str.w	r3, [r8, #4]
 800e25a:	68eb      	ldr	r3, [r5, #12]
 800e25c:	781a      	ldrb	r2, [r3, #0]
 800e25e:	2a45      	cmp	r2, #69	; 0x45
 800e260:	f47f ae5b 	bne.w	800df1a <d_name+0x3a>
 800e264:	3301      	adds	r3, #1
 800e266:	60eb      	str	r3, [r5, #12]
 800e268:	9801      	ldr	r0, [sp, #4]
 800e26a:	e65c      	b.n	800df26 <d_name+0x46>

0800e26c <d_encoding>:
 800e26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e270:	68c3      	ldr	r3, [r0, #12]
 800e272:	4605      	mov	r5, r0
 800e274:	781a      	ldrb	r2, [r3, #0]
 800e276:	2a47      	cmp	r2, #71	; 0x47
 800e278:	d029      	beq.n	800e2ce <d_encoding+0x62>
 800e27a:	2a54      	cmp	r2, #84	; 0x54
 800e27c:	d027      	beq.n	800e2ce <d_encoding+0x62>
 800e27e:	460e      	mov	r6, r1
 800e280:	f7ff fe2e 	bl	800dee0 <d_name>
 800e284:	4604      	mov	r4, r0
 800e286:	b360      	cbz	r0, 800e2e2 <d_encoding+0x76>
 800e288:	b116      	cbz	r6, 800e290 <d_encoding+0x24>
 800e28a:	68ab      	ldr	r3, [r5, #8]
 800e28c:	07db      	lsls	r3, r3, #31
 800e28e:	d52c      	bpl.n	800e2ea <d_encoding+0x7e>
 800e290:	68eb      	ldr	r3, [r5, #12]
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	b38b      	cbz	r3, 800e2fa <d_encoding+0x8e>
 800e296:	2b45      	cmp	r3, #69	; 0x45
 800e298:	d02f      	beq.n	800e2fa <d_encoding+0x8e>
 800e29a:	4621      	mov	r1, r4
 800e29c:	780b      	ldrb	r3, [r1, #0]
 800e29e:	2b04      	cmp	r3, #4
 800e2a0:	f1a3 021c 	sub.w	r2, r3, #28
 800e2a4:	f000 8118 	beq.w	800e4d8 <d_encoding+0x26c>
 800e2a8:	f0c0 8114 	bcc.w	800e4d4 <d_encoding+0x268>
 800e2ac:	2a04      	cmp	r2, #4
 800e2ae:	f200 8111 	bhi.w	800e4d4 <d_encoding+0x268>
 800e2b2:	6849      	ldr	r1, [r1, #4]
 800e2b4:	2900      	cmp	r1, #0
 800e2b6:	d1f1      	bne.n	800e29c <d_encoding+0x30>
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	f7ff fdd3 	bl	800de64 <d_bare_function_type>
 800e2be:	4622      	mov	r2, r4
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2103      	movs	r1, #3
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ca:	f7f8 bc31 	b.w	8006b30 <d_make_comp>
 800e2ce:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800e2d0:	f101 0214 	add.w	r2, r1, #20
 800e2d4:	632a      	str	r2, [r5, #48]	; 0x30
 800e2d6:	781a      	ldrb	r2, [r3, #0]
 800e2d8:	2a54      	cmp	r2, #84	; 0x54
 800e2da:	d011      	beq.n	800e300 <d_encoding+0x94>
 800e2dc:	2a47      	cmp	r2, #71	; 0x47
 800e2de:	f000 8085 	beq.w	800e3ec <d_encoding+0x180>
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e8:	6864      	ldr	r4, [r4, #4]
 800e2ea:	7823      	ldrb	r3, [r4, #0]
 800e2ec:	f1a3 021c 	sub.w	r2, r3, #28
 800e2f0:	2a04      	cmp	r2, #4
 800e2f2:	d9f9      	bls.n	800e2e8 <d_encoding+0x7c>
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	f000 815f 	beq.w	800e5b8 <d_encoding+0x34c>
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	60ea      	str	r2, [r5, #12]
 800e304:	785a      	ldrb	r2, [r3, #1]
 800e306:	2a00      	cmp	r2, #0
 800e308:	d0eb      	beq.n	800e2e2 <d_encoding+0x76>
 800e30a:	1c9a      	adds	r2, r3, #2
 800e30c:	60ea      	str	r2, [r5, #12]
 800e30e:	785b      	ldrb	r3, [r3, #1]
 800e310:	3b43      	subs	r3, #67	; 0x43
 800e312:	2b33      	cmp	r3, #51	; 0x33
 800e314:	d8e5      	bhi.n	800e2e2 <d_encoding+0x76>
 800e316:	a201      	add	r2, pc, #4	; (adr r2, 800e31c <d_encoding+0xb0>)
 800e318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31c:	0800e839 	.word	0x0800e839
 800e320:	0800e2e3 	.word	0x0800e2e3
 800e324:	0800e2e3 	.word	0x0800e2e3
 800e328:	0800e823 	.word	0x0800e823
 800e32c:	0800e2e3 	.word	0x0800e2e3
 800e330:	0800e80d 	.word	0x0800e80d
 800e334:	0800e7f7 	.word	0x0800e7f7
 800e338:	0800e7e1 	.word	0x0800e7e1
 800e33c:	0800e2e3 	.word	0x0800e2e3
 800e340:	0800e2e3 	.word	0x0800e2e3
 800e344:	0800e2e3 	.word	0x0800e2e3
 800e348:	0800e2e3 	.word	0x0800e2e3
 800e34c:	0800e2e3 	.word	0x0800e2e3
 800e350:	0800e2e3 	.word	0x0800e2e3
 800e354:	0800e2e3 	.word	0x0800e2e3
 800e358:	0800e2e3 	.word	0x0800e2e3
 800e35c:	0800e7cb 	.word	0x0800e7cb
 800e360:	0800e7b1 	.word	0x0800e7b1
 800e364:	0800e2e3 	.word	0x0800e2e3
 800e368:	0800e797 	.word	0x0800e797
 800e36c:	0800e75b 	.word	0x0800e75b
 800e370:	0800e2e3 	.word	0x0800e2e3
 800e374:	0800e2e3 	.word	0x0800e2e3
 800e378:	0800e2e3 	.word	0x0800e2e3
 800e37c:	0800e2e3 	.word	0x0800e2e3
 800e380:	0800e2e3 	.word	0x0800e2e3
 800e384:	0800e2e3 	.word	0x0800e2e3
 800e388:	0800e2e3 	.word	0x0800e2e3
 800e38c:	0800e2e3 	.word	0x0800e2e3
 800e390:	0800e2e3 	.word	0x0800e2e3
 800e394:	0800e2e3 	.word	0x0800e2e3
 800e398:	0800e2e3 	.word	0x0800e2e3
 800e39c:	0800e727 	.word	0x0800e727
 800e3a0:	0800e2e3 	.word	0x0800e2e3
 800e3a4:	0800e2e3 	.word	0x0800e2e3
 800e3a8:	0800e2e3 	.word	0x0800e2e3
 800e3ac:	0800e2e3 	.word	0x0800e2e3
 800e3b0:	0800e771 	.word	0x0800e771
 800e3b4:	0800e2e3 	.word	0x0800e2e3
 800e3b8:	0800e2e3 	.word	0x0800e2e3
 800e3bc:	0800e2e3 	.word	0x0800e2e3
 800e3c0:	0800e2e3 	.word	0x0800e2e3
 800e3c4:	0800e2e3 	.word	0x0800e2e3
 800e3c8:	0800e2e3 	.word	0x0800e2e3
 800e3cc:	0800e2e3 	.word	0x0800e2e3
 800e3d0:	0800e2e3 	.word	0x0800e2e3
 800e3d4:	0800e2e3 	.word	0x0800e2e3
 800e3d8:	0800e2e3 	.word	0x0800e2e3
 800e3dc:	0800e2e3 	.word	0x0800e2e3
 800e3e0:	0800e2e3 	.word	0x0800e2e3
 800e3e4:	0800e2e3 	.word	0x0800e2e3
 800e3e8:	0800e701 	.word	0x0800e701
 800e3ec:	1c5a      	adds	r2, r3, #1
 800e3ee:	60ea      	str	r2, [r5, #12]
 800e3f0:	785a      	ldrb	r2, [r3, #1]
 800e3f2:	2a00      	cmp	r2, #0
 800e3f4:	f43f af75 	beq.w	800e2e2 <d_encoding+0x76>
 800e3f8:	1c9a      	adds	r2, r3, #2
 800e3fa:	60ea      	str	r2, [r5, #12]
 800e3fc:	785a      	ldrb	r2, [r3, #1]
 800e3fe:	3a41      	subs	r2, #65	; 0x41
 800e400:	2a31      	cmp	r2, #49	; 0x31
 800e402:	f63f af6e 	bhi.w	800e2e2 <d_encoding+0x76>
 800e406:	a101      	add	r1, pc, #4	; (adr r1, 800e40c <d_encoding+0x1a0>)
 800e408:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e40c:	0800e6bd 	.word	0x0800e6bd
 800e410:	0800e2e3 	.word	0x0800e2e3
 800e414:	0800e2e3 	.word	0x0800e2e3
 800e418:	0800e2e3 	.word	0x0800e2e3
 800e41c:	0800e2e3 	.word	0x0800e2e3
 800e420:	0800e2e3 	.word	0x0800e2e3
 800e424:	0800e2e3 	.word	0x0800e2e3
 800e428:	0800e2e3 	.word	0x0800e2e3
 800e42c:	0800e2e3 	.word	0x0800e2e3
 800e430:	0800e2e3 	.word	0x0800e2e3
 800e434:	0800e2e3 	.word	0x0800e2e3
 800e438:	0800e2e3 	.word	0x0800e2e3
 800e43c:	0800e2e3 	.word	0x0800e2e3
 800e440:	0800e2e3 	.word	0x0800e2e3
 800e444:	0800e2e3 	.word	0x0800e2e3
 800e448:	0800e2e3 	.word	0x0800e2e3
 800e44c:	0800e2e3 	.word	0x0800e2e3
 800e450:	0800e69f 	.word	0x0800e69f
 800e454:	0800e2e3 	.word	0x0800e2e3
 800e458:	0800e6d5 	.word	0x0800e6d5
 800e45c:	0800e2e3 	.word	0x0800e2e3
 800e460:	0800e689 	.word	0x0800e689
 800e464:	0800e2e3 	.word	0x0800e2e3
 800e468:	0800e2e3 	.word	0x0800e2e3
 800e46c:	0800e2e3 	.word	0x0800e2e3
 800e470:	0800e2e3 	.word	0x0800e2e3
 800e474:	0800e2e3 	.word	0x0800e2e3
 800e478:	0800e2e3 	.word	0x0800e2e3
 800e47c:	0800e2e3 	.word	0x0800e2e3
 800e480:	0800e2e3 	.word	0x0800e2e3
 800e484:	0800e2e3 	.word	0x0800e2e3
 800e488:	0800e2e3 	.word	0x0800e2e3
 800e48c:	0800e2e3 	.word	0x0800e2e3
 800e490:	0800e2e3 	.word	0x0800e2e3
 800e494:	0800e2e3 	.word	0x0800e2e3
 800e498:	0800e2e3 	.word	0x0800e2e3
 800e49c:	0800e2e3 	.word	0x0800e2e3
 800e4a0:	0800e2e3 	.word	0x0800e2e3
 800e4a4:	0800e2e3 	.word	0x0800e2e3
 800e4a8:	0800e2e3 	.word	0x0800e2e3
 800e4ac:	0800e2e3 	.word	0x0800e2e3
 800e4b0:	0800e2e3 	.word	0x0800e2e3
 800e4b4:	0800e2e3 	.word	0x0800e2e3
 800e4b8:	0800e2e3 	.word	0x0800e2e3
 800e4bc:	0800e2e3 	.word	0x0800e2e3
 800e4c0:	0800e2e3 	.word	0x0800e2e3
 800e4c4:	0800e2e3 	.word	0x0800e2e3
 800e4c8:	0800e2e3 	.word	0x0800e2e3
 800e4cc:	0800e2e3 	.word	0x0800e2e3
 800e4d0:	0800e5df 	.word	0x0800e5df
 800e4d4:	2100      	movs	r1, #0
 800e4d6:	e6ef      	b.n	800e2b8 <d_encoding+0x4c>
 800e4d8:	684a      	ldr	r2, [r1, #4]
 800e4da:	2a00      	cmp	r2, #0
 800e4dc:	d07d      	beq.n	800e5da <d_encoding+0x36e>
 800e4de:	7813      	ldrb	r3, [r2, #0]
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	2b32      	cmp	r3, #50	; 0x32
 800e4e4:	d879      	bhi.n	800e5da <d_encoding+0x36e>
 800e4e6:	a101      	add	r1, pc, #4	; (adr r1, 800e4ec <d_encoding+0x280>)
 800e4e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4ec:	0800e5d5 	.word	0x0800e5d5
 800e4f0:	0800e5d5 	.word	0x0800e5d5
 800e4f4:	0800e5db 	.word	0x0800e5db
 800e4f8:	0800e5db 	.word	0x0800e5db
 800e4fc:	0800e5db 	.word	0x0800e5db
 800e500:	0800e5db 	.word	0x0800e5db
 800e504:	0800e4d5 	.word	0x0800e4d5
 800e508:	0800e4d5 	.word	0x0800e4d5
 800e50c:	0800e5db 	.word	0x0800e5db
 800e510:	0800e5db 	.word	0x0800e5db
 800e514:	0800e5db 	.word	0x0800e5db
 800e518:	0800e5db 	.word	0x0800e5db
 800e51c:	0800e5db 	.word	0x0800e5db
 800e520:	0800e5db 	.word	0x0800e5db
 800e524:	0800e5db 	.word	0x0800e5db
 800e528:	0800e5db 	.word	0x0800e5db
 800e52c:	0800e5db 	.word	0x0800e5db
 800e530:	0800e5db 	.word	0x0800e5db
 800e534:	0800e5db 	.word	0x0800e5db
 800e538:	0800e5db 	.word	0x0800e5db
 800e53c:	0800e5db 	.word	0x0800e5db
 800e540:	0800e5db 	.word	0x0800e5db
 800e544:	0800e5db 	.word	0x0800e5db
 800e548:	0800e5db 	.word	0x0800e5db
 800e54c:	0800e5db 	.word	0x0800e5db
 800e550:	0800e5db 	.word	0x0800e5db
 800e554:	0800e5db 	.word	0x0800e5db
 800e558:	0800e5db 	.word	0x0800e5db
 800e55c:	0800e5db 	.word	0x0800e5db
 800e560:	0800e5db 	.word	0x0800e5db
 800e564:	0800e5db 	.word	0x0800e5db
 800e568:	0800e5db 	.word	0x0800e5db
 800e56c:	0800e5db 	.word	0x0800e5db
 800e570:	0800e5db 	.word	0x0800e5db
 800e574:	0800e5db 	.word	0x0800e5db
 800e578:	0800e5db 	.word	0x0800e5db
 800e57c:	0800e5db 	.word	0x0800e5db
 800e580:	0800e5db 	.word	0x0800e5db
 800e584:	0800e5db 	.word	0x0800e5db
 800e588:	0800e5db 	.word	0x0800e5db
 800e58c:	0800e5db 	.word	0x0800e5db
 800e590:	0800e5db 	.word	0x0800e5db
 800e594:	0800e5db 	.word	0x0800e5db
 800e598:	0800e5db 	.word	0x0800e5db
 800e59c:	0800e5db 	.word	0x0800e5db
 800e5a0:	0800e5db 	.word	0x0800e5db
 800e5a4:	0800e5db 	.word	0x0800e5db
 800e5a8:	0800e5db 	.word	0x0800e5db
 800e5ac:	0800e5db 	.word	0x0800e5db
 800e5b0:	0800e5db 	.word	0x0800e5db
 800e5b4:	0800e4d5 	.word	0x0800e4d5
 800e5b8:	68a2      	ldr	r2, [r4, #8]
 800e5ba:	7813      	ldrb	r3, [r2, #0]
 800e5bc:	3b1c      	subs	r3, #28
 800e5be:	2b04      	cmp	r3, #4
 800e5c0:	d804      	bhi.n	800e5cc <d_encoding+0x360>
 800e5c2:	6852      	ldr	r2, [r2, #4]
 800e5c4:	7813      	ldrb	r3, [r2, #0]
 800e5c6:	3b1c      	subs	r3, #28
 800e5c8:	2b04      	cmp	r3, #4
 800e5ca:	d9fa      	bls.n	800e5c2 <d_encoding+0x356>
 800e5cc:	60a2      	str	r2, [r4, #8]
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5d4:	6892      	ldr	r2, [r2, #8]
 800e5d6:	2a00      	cmp	r2, #0
 800e5d8:	d181      	bne.n	800e4de <d_encoding+0x272>
 800e5da:	2101      	movs	r1, #1
 800e5dc:	e66c      	b.n	800e2b8 <d_encoding+0x4c>
 800e5de:	f105 000c 	add.w	r0, r5, #12
 800e5e2:	f7f8 fbeb 	bl	8006dbc <d_number.isra.0>
 800e5e6:	2801      	cmp	r0, #1
 800e5e8:	f77f ae7b 	ble.w	800e2e2 <d_encoding+0x76>
 800e5ec:	68eb      	ldr	r3, [r5, #12]
 800e5ee:	781a      	ldrb	r2, [r3, #0]
 800e5f0:	2a00      	cmp	r2, #0
 800e5f2:	f43f ae76 	beq.w	800e2e2 <d_encoding+0x76>
 800e5f6:	1c5f      	adds	r7, r3, #1
 800e5f8:	60ef      	str	r7, [r5, #12]
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	2b5f      	cmp	r3, #95	; 0x5f
 800e5fe:	f47f ae70 	bne.w	800e2e2 <d_encoding+0x76>
 800e602:	2200      	movs	r2, #0
 800e604:	4690      	mov	r8, r2
 800e606:	1e46      	subs	r6, r0, #1
 800e608:	f04f 093f 	mov.w	r9, #63	; 0x3f
 800e60c:	783b      	ldrb	r3, [r7, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f43f ae67 	beq.w	800e2e2 <d_encoding+0x76>
 800e614:	2b24      	cmp	r3, #36	; 0x24
 800e616:	f000 8135 	beq.w	800e884 <d_encoding+0x618>
 800e61a:	463c      	mov	r4, r7
 800e61c:	2100      	movs	r1, #0
 800e61e:	e004      	b.n	800e62a <d_encoding+0x3be>
 800e620:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e624:	b123      	cbz	r3, 800e630 <d_encoding+0x3c4>
 800e626:	2b24      	cmp	r3, #36	; 0x24
 800e628:	d002      	beq.n	800e630 <d_encoding+0x3c4>
 800e62a:	3101      	adds	r1, #1
 800e62c:	42b1      	cmp	r1, r6
 800e62e:	dbf7      	blt.n	800e620 <d_encoding+0x3b4>
 800e630:	696b      	ldr	r3, [r5, #20]
 800e632:	69a8      	ldr	r0, [r5, #24]
 800e634:	4283      	cmp	r3, r0
 800e636:	f280 811f 	bge.w	800e878 <d_encoding+0x60c>
 800e63a:	6928      	ldr	r0, [r5, #16]
 800e63c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e640:	f103 0e01 	add.w	lr, r3, #1
 800e644:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 800e648:	f8c5 e014 	str.w	lr, [r5, #20]
 800e64c:	f000 8114 	beq.w	800e878 <d_encoding+0x60c>
 800e650:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 800e654:	605f      	str	r7, [r3, #4]
 800e656:	6099      	str	r1, [r3, #8]
 800e658:	68ef      	ldr	r7, [r5, #12]
 800e65a:	1a76      	subs	r6, r6, r1
 800e65c:	440f      	add	r7, r1
 800e65e:	60ef      	str	r7, [r5, #12]
 800e660:	2a00      	cmp	r2, #0
 800e662:	f000 812c 	beq.w	800e8be <d_encoding+0x652>
 800e666:	213e      	movs	r1, #62	; 0x3e
 800e668:	4628      	mov	r0, r5
 800e66a:	f7f8 fa61 	bl	8006b30 <d_make_comp>
 800e66e:	4602      	mov	r2, r0
 800e670:	2800      	cmp	r0, #0
 800e672:	f43f ae36 	beq.w	800e2e2 <d_encoding+0x76>
 800e676:	2e00      	cmp	r6, #0
 800e678:	dcc8      	bgt.n	800e60c <d_encoding+0x3a0>
 800e67a:	4628      	mov	r0, r5
 800e67c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e680:	2300      	movs	r3, #0
 800e682:	213d      	movs	r1, #61	; 0x3d
 800e684:	f7f8 ba54 	b.w	8006b30 <d_make_comp>
 800e688:	4628      	mov	r0, r5
 800e68a:	f7ff fc29 	bl	800dee0 <d_name>
 800e68e:	2300      	movs	r3, #0
 800e690:	4602      	mov	r2, r0
 800e692:	2113      	movs	r1, #19
 800e694:	4628      	mov	r0, r5
 800e696:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e69a:	f7f8 ba49 	b.w	8006b30 <d_make_comp>
 800e69e:	4628      	mov	r0, r5
 800e6a0:	f7ff fc1e 	bl	800dee0 <d_name>
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f7f8 fbb0 	bl	8006e0c <d_number_component>
 800e6ac:	4622      	mov	r2, r4
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2116      	movs	r1, #22
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6b8:	f7f8 ba3a 	b.w	8006b30 <d_make_comp>
 800e6bc:	2100      	movs	r1, #0
 800e6be:	4628      	mov	r0, r5
 800e6c0:	f7ff fdd4 	bl	800e26c <d_encoding>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	2117      	movs	r1, #23
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6d0:	f7f8 ba2e 	b.w	8006b30 <d_make_comp>
 800e6d4:	789a      	ldrb	r2, [r3, #2]
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	4628      	mov	r0, r5
 800e6da:	2a00      	cmp	r2, #0
 800e6dc:	f000 80f1 	beq.w	800e8c2 <d_encoding+0x656>
 800e6e0:	1cda      	adds	r2, r3, #3
 800e6e2:	60ea      	str	r2, [r5, #12]
 800e6e4:	789b      	ldrb	r3, [r3, #2]
 800e6e6:	2b6e      	cmp	r3, #110	; 0x6e
 800e6e8:	f040 80eb 	bne.w	800e8c2 <d_encoding+0x656>
 800e6ec:	f7ff fdbe 	bl	800e26c <d_encoding>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	2148      	movs	r1, #72	; 0x48
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6fc:	f7f8 ba18 	b.w	8006b30 <d_make_comp>
 800e700:	2176      	movs	r1, #118	; 0x76
 800e702:	4628      	mov	r0, r5
 800e704:	f7f8 fd16 	bl	8007134 <d_call_offset>
 800e708:	2800      	cmp	r0, #0
 800e70a:	f43f adea 	beq.w	800e2e2 <d_encoding+0x76>
 800e70e:	2100      	movs	r1, #0
 800e710:	4628      	mov	r0, r5
 800e712:	f7ff fdab 	bl	800e26c <d_encoding>
 800e716:	2300      	movs	r3, #0
 800e718:	4602      	mov	r2, r0
 800e71a:	2110      	movs	r1, #16
 800e71c:	4628      	mov	r0, r5
 800e71e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e722:	f7f8 ba05 	b.w	8006b30 <d_make_comp>
 800e726:	2100      	movs	r1, #0
 800e728:	4628      	mov	r0, r5
 800e72a:	f7f8 fd03 	bl	8007134 <d_call_offset>
 800e72e:	2800      	cmp	r0, #0
 800e730:	f43f add7 	beq.w	800e2e2 <d_encoding+0x76>
 800e734:	2100      	movs	r1, #0
 800e736:	4628      	mov	r0, r5
 800e738:	f7f8 fcfc 	bl	8007134 <d_call_offset>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	f43f add0 	beq.w	800e2e2 <d_encoding+0x76>
 800e742:	2100      	movs	r1, #0
 800e744:	4628      	mov	r0, r5
 800e746:	f7ff fd91 	bl	800e26c <d_encoding>
 800e74a:	2300      	movs	r3, #0
 800e74c:	4602      	mov	r2, r0
 800e74e:	2111      	movs	r1, #17
 800e750:	4628      	mov	r0, r5
 800e752:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e756:	f7f8 b9eb 	b.w	8006b30 <d_make_comp>
 800e75a:	4628      	mov	r0, r5
 800e75c:	f7ff fbc0 	bl	800dee0 <d_name>
 800e760:	2300      	movs	r3, #0
 800e762:	4602      	mov	r2, r0
 800e764:	2115      	movs	r1, #21
 800e766:	4628      	mov	r0, r5
 800e768:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e76c:	f7f8 b9e0 	b.w	8006b30 <d_make_comp>
 800e770:	2168      	movs	r1, #104	; 0x68
 800e772:	4628      	mov	r0, r5
 800e774:	f7f8 fcde 	bl	8007134 <d_call_offset>
 800e778:	2800      	cmp	r0, #0
 800e77a:	f43f adb2 	beq.w	800e2e2 <d_encoding+0x76>
 800e77e:	2100      	movs	r1, #0
 800e780:	4628      	mov	r0, r5
 800e782:	f7ff fd73 	bl	800e26c <d_encoding>
 800e786:	2300      	movs	r3, #0
 800e788:	4602      	mov	r2, r0
 800e78a:	210f      	movs	r1, #15
 800e78c:	4628      	mov	r0, r5
 800e78e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e792:	f7f8 b9cd 	b.w	8006b30 <d_make_comp>
 800e796:	310f      	adds	r1, #15
 800e798:	6329      	str	r1, [r5, #48]	; 0x30
 800e79a:	4628      	mov	r0, r5
 800e79c:	f7fe fdae 	bl	800d2fc <d_type>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	2109      	movs	r1, #9
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7ac:	f7f8 b9c0 	b.w	8006b30 <d_make_comp>
 800e7b0:	310a      	adds	r1, #10
 800e7b2:	6329      	str	r1, [r5, #48]	; 0x30
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	f7fe fda1 	bl	800d2fc <d_type>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	4602      	mov	r2, r0
 800e7be:	210a      	movs	r1, #10
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c6:	f7f8 b9b3 	b.w	8006b30 <d_make_comp>
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	f7fe fd96 	bl	800d2fc <d_type>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	210d      	movs	r1, #13
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7dc:	f7f8 b9a8 	b.w	8006b30 <d_make_comp>
 800e7e0:	4628      	mov	r0, r5
 800e7e2:	f7fe fd8b 	bl	800d2fc <d_type>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	2112      	movs	r1, #18
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f2:	f7f8 b99d 	b.w	8006b30 <d_make_comp>
 800e7f6:	4628      	mov	r0, r5
 800e7f8:	f7fe fd80 	bl	800d2fc <d_type>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	4602      	mov	r2, r0
 800e800:	210c      	movs	r1, #12
 800e802:	4628      	mov	r0, r5
 800e804:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e808:	f7f8 b992 	b.w	8006b30 <d_make_comp>
 800e80c:	4628      	mov	r0, r5
 800e80e:	f7ff fb67 	bl	800dee0 <d_name>
 800e812:	2300      	movs	r3, #0
 800e814:	4602      	mov	r2, r0
 800e816:	2114      	movs	r1, #20
 800e818:	4628      	mov	r0, r5
 800e81a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e81e:	f7f8 b987 	b.w	8006b30 <d_make_comp>
 800e822:	4628      	mov	r0, r5
 800e824:	f7fe fd6a 	bl	800d2fc <d_type>
 800e828:	2300      	movs	r3, #0
 800e82a:	4602      	mov	r2, r0
 800e82c:	210e      	movs	r1, #14
 800e82e:	4628      	mov	r0, r5
 800e830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e834:	f7f8 b97c 	b.w	8006b30 <d_make_comp>
 800e838:	4628      	mov	r0, r5
 800e83a:	f7fe fd5f 	bl	800d2fc <d_type>
 800e83e:	4604      	mov	r4, r0
 800e840:	f105 000c 	add.w	r0, r5, #12
 800e844:	f7f8 faba 	bl	8006dbc <d_number.isra.0>
 800e848:	2800      	cmp	r0, #0
 800e84a:	f6ff ad4a 	blt.w	800e2e2 <d_encoding+0x76>
 800e84e:	68eb      	ldr	r3, [r5, #12]
 800e850:	781a      	ldrb	r2, [r3, #0]
 800e852:	2a5f      	cmp	r2, #95	; 0x5f
 800e854:	f47f ad45 	bne.w	800e2e2 <d_encoding+0x76>
 800e858:	3301      	adds	r3, #1
 800e85a:	60eb      	str	r3, [r5, #12]
 800e85c:	4628      	mov	r0, r5
 800e85e:	f7fe fd4d 	bl	800d2fc <d_type>
 800e862:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e864:	4602      	mov	r2, r0
 800e866:	1d59      	adds	r1, r3, #5
 800e868:	6329      	str	r1, [r5, #48]	; 0x30
 800e86a:	4623      	mov	r3, r4
 800e86c:	4628      	mov	r0, r5
 800e86e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e872:	210b      	movs	r1, #11
 800e874:	f7f8 b95c 	b.w	8006b30 <d_make_comp>
 800e878:	68eb      	ldr	r3, [r5, #12]
 800e87a:	2000      	movs	r0, #0
 800e87c:	4419      	add	r1, r3
 800e87e:	60e9      	str	r1, [r5, #12]
 800e880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e884:	787b      	ldrb	r3, [r7, #1]
 800e886:	2b53      	cmp	r3, #83	; 0x53
 800e888:	d027      	beq.n	800e8da <d_encoding+0x66e>
 800e88a:	2b5f      	cmp	r3, #95	; 0x5f
 800e88c:	d023      	beq.n	800e8d6 <d_encoding+0x66a>
 800e88e:	2b24      	cmp	r3, #36	; 0x24
 800e890:	f47f ad27 	bne.w	800e2e2 <d_encoding+0x76>
 800e894:	4618      	mov	r0, r3
 800e896:	696b      	ldr	r3, [r5, #20]
 800e898:	69a9      	ldr	r1, [r5, #24]
 800e89a:	428b      	cmp	r3, r1
 800e89c:	da1f      	bge.n	800e8de <d_encoding+0x672>
 800e89e:	692c      	ldr	r4, [r5, #16]
 800e8a0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e8a4:	1c5f      	adds	r7, r3, #1
 800e8a6:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 800e8aa:	616f      	str	r7, [r5, #20]
 800e8ac:	d017      	beq.n	800e8de <d_encoding+0x672>
 800e8ae:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 800e8b2:	6058      	str	r0, [r3, #4]
 800e8b4:	68ef      	ldr	r7, [r5, #12]
 800e8b6:	3e02      	subs	r6, #2
 800e8b8:	3702      	adds	r7, #2
 800e8ba:	60ef      	str	r7, [r5, #12]
 800e8bc:	e6d0      	b.n	800e660 <d_encoding+0x3f4>
 800e8be:	461a      	mov	r2, r3
 800e8c0:	e6d9      	b.n	800e676 <d_encoding+0x40a>
 800e8c2:	f7ff fcd3 	bl	800e26c <d_encoding>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	2147      	movs	r1, #71	; 0x47
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d2:	f7f8 b92d 	b.w	8006b30 <d_make_comp>
 800e8d6:	202e      	movs	r0, #46	; 0x2e
 800e8d8:	e7dd      	b.n	800e896 <d_encoding+0x62a>
 800e8da:	202f      	movs	r0, #47	; 0x2f
 800e8dc:	e7db      	b.n	800e896 <d_encoding+0x62a>
 800e8de:	68eb      	ldr	r3, [r5, #12]
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	3302      	adds	r3, #2
 800e8e4:	60eb      	str	r3, [r5, #12]
 800e8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ea:	bf00      	nop

0800e8ec <d_expr_primary>:
 800e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ee:	68c2      	ldr	r2, [r0, #12]
 800e8f0:	7813      	ldrb	r3, [r2, #0]
 800e8f2:	2b4c      	cmp	r3, #76	; 0x4c
 800e8f4:	d001      	beq.n	800e8fa <d_expr_primary+0xe>
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8fa:	1c53      	adds	r3, r2, #1
 800e8fc:	60c3      	str	r3, [r0, #12]
 800e8fe:	7851      	ldrb	r1, [r2, #1]
 800e900:	4605      	mov	r5, r0
 800e902:	295f      	cmp	r1, #95	; 0x5f
 800e904:	d03e      	beq.n	800e984 <d_expr_primary+0x98>
 800e906:	295a      	cmp	r1, #90	; 0x5a
 800e908:	d043      	beq.n	800e992 <d_expr_primary+0xa6>
 800e90a:	f7fe fcf7 	bl	800d2fc <d_type>
 800e90e:	2800      	cmp	r0, #0
 800e910:	d0f1      	beq.n	800e8f6 <d_expr_primary+0xa>
 800e912:	7803      	ldrb	r3, [r0, #0]
 800e914:	2b27      	cmp	r3, #39	; 0x27
 800e916:	d04a      	beq.n	800e9ae <d_expr_primary+0xc2>
 800e918:	68ee      	ldr	r6, [r5, #12]
 800e91a:	7833      	ldrb	r3, [r6, #0]
 800e91c:	2b6e      	cmp	r3, #110	; 0x6e
 800e91e:	d04f      	beq.n	800e9c0 <d_expr_primary+0xd4>
 800e920:	213b      	movs	r1, #59	; 0x3b
 800e922:	2b45      	cmp	r3, #69	; 0x45
 800e924:	d052      	beq.n	800e9cc <d_expr_primary+0xe0>
 800e926:	2b00      	cmp	r3, #0
 800e928:	d0e5      	beq.n	800e8f6 <d_expr_primary+0xa>
 800e92a:	4633      	mov	r3, r6
 800e92c:	e001      	b.n	800e932 <d_expr_primary+0x46>
 800e92e:	2c00      	cmp	r4, #0
 800e930:	d0e1      	beq.n	800e8f6 <d_expr_primary+0xa>
 800e932:	3301      	adds	r3, #1
 800e934:	60eb      	str	r3, [r5, #12]
 800e936:	781c      	ldrb	r4, [r3, #0]
 800e938:	2c45      	cmp	r4, #69	; 0x45
 800e93a:	d1f8      	bne.n	800e92e <d_expr_primary+0x42>
 800e93c:	1b9c      	subs	r4, r3, r6
 800e93e:	696b      	ldr	r3, [r5, #20]
 800e940:	69aa      	ldr	r2, [r5, #24]
 800e942:	4293      	cmp	r3, r2
 800e944:	da31      	bge.n	800e9aa <d_expr_primary+0xbe>
 800e946:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e94a:	692f      	ldr	r7, [r5, #16]
 800e94c:	0092      	lsls	r2, r2, #2
 800e94e:	3301      	adds	r3, #1
 800e950:	eb17 0e02 	adds.w	lr, r7, r2
 800e954:	616b      	str	r3, [r5, #20]
 800e956:	d028      	beq.n	800e9aa <d_expr_primary+0xbe>
 800e958:	b33e      	cbz	r6, 800e9aa <d_expr_primary+0xbe>
 800e95a:	b334      	cbz	r4, 800e9aa <d_expr_primary+0xbe>
 800e95c:	4673      	mov	r3, lr
 800e95e:	f04f 0c00 	mov.w	ip, #0
 800e962:	f807 c002 	strb.w	ip, [r7, r2]
 800e966:	f8ce 6004 	str.w	r6, [lr, #4]
 800e96a:	f8ce 4008 	str.w	r4, [lr, #8]
 800e96e:	4602      	mov	r2, r0
 800e970:	4628      	mov	r0, r5
 800e972:	f7f8 f8dd 	bl	8006b30 <d_make_comp>
 800e976:	68eb      	ldr	r3, [r5, #12]
 800e978:	781a      	ldrb	r2, [r3, #0]
 800e97a:	2a45      	cmp	r2, #69	; 0x45
 800e97c:	d1bb      	bne.n	800e8f6 <d_expr_primary+0xa>
 800e97e:	3301      	adds	r3, #1
 800e980:	60eb      	str	r3, [r5, #12]
 800e982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e984:	1c93      	adds	r3, r2, #2
 800e986:	60c3      	str	r3, [r0, #12]
 800e988:	7892      	ldrb	r2, [r2, #2]
 800e98a:	2a5a      	cmp	r2, #90	; 0x5a
 800e98c:	bf18      	it	ne
 800e98e:	2000      	movne	r0, #0
 800e990:	d107      	bne.n	800e9a2 <d_expr_primary+0xb6>
 800e992:	3301      	adds	r3, #1
 800e994:	60eb      	str	r3, [r5, #12]
 800e996:	2100      	movs	r1, #0
 800e998:	4628      	mov	r0, r5
 800e99a:	f7ff fc67 	bl	800e26c <d_encoding>
 800e99e:	68eb      	ldr	r3, [r5, #12]
 800e9a0:	781a      	ldrb	r2, [r3, #0]
 800e9a2:	2a45      	cmp	r2, #69	; 0x45
 800e9a4:	d0eb      	beq.n	800e97e <d_expr_primary+0x92>
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	e7df      	b.n	800e96e <d_expr_primary+0x82>
 800e9ae:	6843      	ldr	r3, [r0, #4]
 800e9b0:	7c1a      	ldrb	r2, [r3, #16]
 800e9b2:	2a00      	cmp	r2, #0
 800e9b4:	d0b0      	beq.n	800e918 <d_expr_primary+0x2c>
 800e9b6:	685a      	ldr	r2, [r3, #4]
 800e9b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e9ba:	1a9b      	subs	r3, r3, r2
 800e9bc:	632b      	str	r3, [r5, #48]	; 0x30
 800e9be:	e7ab      	b.n	800e918 <d_expr_primary+0x2c>
 800e9c0:	1c72      	adds	r2, r6, #1
 800e9c2:	60ea      	str	r2, [r5, #12]
 800e9c4:	7873      	ldrb	r3, [r6, #1]
 800e9c6:	213c      	movs	r1, #60	; 0x3c
 800e9c8:	4616      	mov	r6, r2
 800e9ca:	e7aa      	b.n	800e922 <d_expr_primary+0x36>
 800e9cc:	2400      	movs	r4, #0
 800e9ce:	e7b6      	b.n	800e93e <d_expr_primary+0x52>

0800e9d0 <d_demangle_callback.constprop.15>:
 800e9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d4:	b0e5      	sub	sp, #404	; 0x194
 800e9d6:	f890 9000 	ldrb.w	r9, [r0]
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	460e      	mov	r6, r1
 800e9e4:	607a      	str	r2, [r7, #4]
 800e9e6:	f000 80ec 	beq.w	800ebc2 <d_demangle_callback.constprop.15+0x1f2>
 800e9ea:	2208      	movs	r2, #8
 800e9ec:	49c3      	ldr	r1, [pc, #780]	; (800ecfc <d_demangle_callback.constprop.15+0x32c>)
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	f004 feee 	bl	80137d0 <strncmp>
 800e9f4:	b978      	cbnz	r0, 800ea16 <d_demangle_callback.constprop.15+0x46>
 800e9f6:	7a2b      	ldrb	r3, [r5, #8]
 800e9f8:	2b2e      	cmp	r3, #46	; 0x2e
 800e9fa:	d005      	beq.n	800ea08 <d_demangle_callback.constprop.15+0x38>
 800e9fc:	2b5f      	cmp	r3, #95	; 0x5f
 800e9fe:	d003      	beq.n	800ea08 <d_demangle_callback.constprop.15+0x38>
 800ea00:	2b24      	cmp	r3, #36	; 0x24
 800ea02:	d001      	beq.n	800ea08 <d_demangle_callback.constprop.15+0x38>
 800ea04:	4680      	mov	r8, r0
 800ea06:	e008      	b.n	800ea1a <d_demangle_callback.constprop.15+0x4a>
 800ea08:	7a6b      	ldrb	r3, [r5, #9]
 800ea0a:	2b44      	cmp	r3, #68	; 0x44
 800ea0c:	f000 80e9 	beq.w	800ebe2 <d_demangle_callback.constprop.15+0x212>
 800ea10:	2b49      	cmp	r3, #73	; 0x49
 800ea12:	f000 80e6 	beq.w	800ebe2 <d_demangle_callback.constprop.15+0x212>
 800ea16:	f04f 0800 	mov.w	r8, #0
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	f000 f9ea 	bl	800edf4 <strlen>
 800ea20:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 800ea24:	0083      	lsls	r3, r0, #2
 800ea26:	eb03 020a 	add.w	r2, r3, sl
 800ea2a:	0092      	lsls	r2, r2, #2
 800ea2c:	3208      	adds	r2, #8
 800ea2e:	ebad 0d02 	sub.w	sp, sp, r2
 800ea32:	46eb      	mov	fp, sp
 800ea34:	330a      	adds	r3, #10
 800ea36:	f023 0307 	bic.w	r3, r3, #7
 800ea3a:	2400      	movs	r4, #0
 800ea3c:	ebad 0d03 	sub.w	sp, sp, r3
 800ea40:	182a      	adds	r2, r5, r0
 800ea42:	2311      	movs	r3, #17
 800ea44:	f1b8 0f01 	cmp.w	r8, #1
 800ea48:	f8c7 b020 	str.w	fp, [r7, #32]
 800ea4c:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
 800ea50:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800ea54:	613d      	str	r5, [r7, #16]
 800ea56:	61fd      	str	r5, [r7, #28]
 800ea58:	6378      	str	r0, [r7, #52]	; 0x34
 800ea5a:	617a      	str	r2, [r7, #20]
 800ea5c:	61bb      	str	r3, [r7, #24]
 800ea5e:	627c      	str	r4, [r7, #36]	; 0x24
 800ea60:	633c      	str	r4, [r7, #48]	; 0x30
 800ea62:	63bc      	str	r4, [r7, #56]	; 0x38
 800ea64:	63fc      	str	r4, [r7, #60]	; 0x3c
 800ea66:	643c      	str	r4, [r7, #64]	; 0x40
 800ea68:	647c      	str	r4, [r7, #68]	; 0x44
 800ea6a:	64bc      	str	r4, [r7, #72]	; 0x48
 800ea6c:	f000 80b0 	beq.w	800ebd0 <d_demangle_callback.constprop.15+0x200>
 800ea70:	f0c0 80cf 	bcc.w	800ec12 <d_demangle_callback.constprop.15+0x242>
 800ea74:	f1b8 0f03 	cmp.w	r8, #3
 800ea78:	f200 80cb 	bhi.w	800ec12 <d_demangle_callback.constprop.15+0x242>
 800ea7c:	7aea      	ldrb	r2, [r5, #11]
 800ea7e:	f1b8 0f02 	cmp.w	r8, #2
 800ea82:	f105 030b 	add.w	r3, r5, #11
 800ea86:	bf14      	ite	ne
 800ea88:	f04f 0943 	movne.w	r9, #67	; 0x43
 800ea8c:	f04f 0942 	moveq.w	r9, #66	; 0x42
 800ea90:	2a5f      	cmp	r2, #95	; 0x5f
 800ea92:	61fb      	str	r3, [r7, #28]
 800ea94:	f000 80b0 	beq.w	800ebf8 <d_demangle_callback.constprop.15+0x228>
 800ea98:	4618      	mov	r0, r3
 800ea9a:	603b      	str	r3, [r7, #0]
 800ea9c:	f000 f9aa 	bl	800edf4 <strlen>
 800eaa0:	f1ba 0f00 	cmp.w	sl, #0
 800eaa4:	f340 80be 	ble.w	800ec24 <d_demangle_callback.constprop.15+0x254>
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	627a      	str	r2, [r7, #36]	; 0x24
 800eaac:	f1bb 0f00 	cmp.w	fp, #0
 800eab0:	f000 80b8 	beq.w	800ec24 <d_demangle_callback.constprop.15+0x254>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	f000 80b5 	beq.w	800ec24 <d_demangle_callback.constprop.15+0x254>
 800eaba:	2200      	movs	r2, #0
 800eabc:	f88b 2000 	strb.w	r2, [fp]
 800eac0:	465a      	mov	r2, fp
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	f8cb 0008 	str.w	r0, [fp, #8]
 800eac8:	f8cb 3004 	str.w	r3, [fp, #4]
 800eacc:	4649      	mov	r1, r9
 800eace:	2300      	movs	r3, #0
 800ead0:	f107 0010 	add.w	r0, r7, #16
 800ead4:	f7f8 f82c 	bl	8006b30 <d_make_comp>
 800ead8:	69fc      	ldr	r4, [r7, #28]
 800eada:	4605      	mov	r5, r0
 800eadc:	4620      	mov	r0, r4
 800eade:	f000 f989 	bl	800edf4 <strlen>
 800eae2:	1823      	adds	r3, r4, r0
 800eae4:	61fb      	str	r3, [r7, #28]
 800eae6:	f814 9000 	ldrb.w	r9, [r4, r0]
 800eaea:	f1b9 0f00 	cmp.w	r9, #0
 800eaee:	d172      	bne.n	800ebd6 <d_demangle_callback.constprop.15+0x206>
 800eaf0:	2d00      	cmp	r5, #0
 800eaf2:	d070      	beq.n	800ebd6 <d_demangle_callback.constprop.15+0x206>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800eafa:	462a      	mov	r2, r5
 800eafc:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800eb00:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 800eb04:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 800eb08:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 800eb0c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800eb10:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800eb14:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 800eb18:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800eb1c:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 800eb20:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 800eb24:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 800eb28:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 800eb2c:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 800eb30:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 800eb34:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 800eb38:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 800eb3c:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 800eb40:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 800eb44:	f7f8 f8b6 	bl	8006cb4 <d_count_templates_scopes>
 800eb48:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 800eb4c:	466e      	mov	r6, sp
 800eb4e:	00cb      	lsls	r3, r1, #3
 800eb50:	3308      	adds	r3, #8
 800eb52:	ebad 0d03 	sub.w	sp, sp, r3
 800eb56:	4668      	mov	r0, sp
 800eb58:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800eb5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800eb60:	fb02 f101 	mul.w	r1, r2, r1
 800eb64:	00ca      	lsls	r2, r1, #3
 800eb66:	3208      	adds	r2, #8
 800eb68:	ebad 0d02 	sub.w	sp, sp, r2
 800eb6c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 800eb70:	462a      	mov	r2, r5
 800eb72:	4620      	mov	r0, r4
 800eb74:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 800eb78:	60fb      	str	r3, [r7, #12]
 800eb7a:	2111      	movs	r1, #17
 800eb7c:	f107 0308 	add.w	r3, r7, #8
 800eb80:	f8c4 d134 	str.w	sp, [r4, #308]	; 0x134
 800eb84:	60bd      	str	r5, [r7, #8]
 800eb86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800eb8a:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 800eb8e:	f7f8 fba1 	bl	80072d4 <d_print_comp_inner>
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	4620      	mov	r0, r4
 800eb96:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800eb9a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800eb9e:	46b5      	mov	sp, r6
 800eba0:	f804 9001 	strb.w	r9, [r4, r1]
 800eba4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800eba8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800ebac:	4798      	blx	r3
 800ebae:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800ebb2:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800ebb6:	fab0 f080 	clz	r0, r0
 800ebba:	0940      	lsrs	r0, r0, #5
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc2:	7843      	ldrb	r3, [r0, #1]
 800ebc4:	2b5a      	cmp	r3, #90	; 0x5a
 800ebc6:	f47f af10 	bne.w	800e9ea <d_demangle_callback.constprop.15+0x1a>
 800ebca:	f04f 0801 	mov.w	r8, #1
 800ebce:	e724      	b.n	800ea1a <d_demangle_callback.constprop.15+0x4a>
 800ebd0:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800ebd4:	d028      	beq.n	800ec28 <d_demangle_callback.constprop.15+0x258>
 800ebd6:	2000      	movs	r0, #0
 800ebd8:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebe2:	7aaa      	ldrb	r2, [r5, #10]
 800ebe4:	2a5f      	cmp	r2, #95	; 0x5f
 800ebe6:	f47f af16 	bne.w	800ea16 <d_demangle_callback.constprop.15+0x46>
 800ebea:	2b49      	cmp	r3, #73	; 0x49
 800ebec:	bf14      	ite	ne
 800ebee:	f04f 0803 	movne.w	r8, #3
 800ebf2:	f04f 0802 	moveq.w	r8, #2
 800ebf6:	e710      	b.n	800ea1a <d_demangle_callback.constprop.15+0x4a>
 800ebf8:	7b2a      	ldrb	r2, [r5, #12]
 800ebfa:	2a5a      	cmp	r2, #90	; 0x5a
 800ebfc:	f47f af4c 	bne.w	800ea98 <d_demangle_callback.constprop.15+0xc8>
 800ec00:	350d      	adds	r5, #13
 800ec02:	4621      	mov	r1, r4
 800ec04:	f107 0010 	add.w	r0, r7, #16
 800ec08:	61fd      	str	r5, [r7, #28]
 800ec0a:	f7ff fb2f 	bl	800e26c <d_encoding>
 800ec0e:	4602      	mov	r2, r0
 800ec10:	e75c      	b.n	800eacc <d_demangle_callback.constprop.15+0xfc>
 800ec12:	f107 0010 	add.w	r0, r7, #16
 800ec16:	f7fe fb71 	bl	800d2fc <d_type>
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	4605      	mov	r5, r0
 800ec1e:	f893 9000 	ldrb.w	r9, [r3]
 800ec22:	e762      	b.n	800eaea <d_demangle_callback.constprop.15+0x11a>
 800ec24:	2200      	movs	r2, #0
 800ec26:	e751      	b.n	800eacc <d_demangle_callback.constprop.15+0xfc>
 800ec28:	786b      	ldrb	r3, [r5, #1]
 800ec2a:	2b5a      	cmp	r3, #90	; 0x5a
 800ec2c:	d1d3      	bne.n	800ebd6 <d_demangle_callback.constprop.15+0x206>
 800ec2e:	3502      	adds	r5, #2
 800ec30:	4641      	mov	r1, r8
 800ec32:	f107 0010 	add.w	r0, r7, #16
 800ec36:	61fd      	str	r5, [r7, #28]
 800ec38:	f7ff fb18 	bl	800e26c <d_encoding>
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	4605      	mov	r5, r0
 800ec40:	07db      	lsls	r3, r3, #31
 800ec42:	d556      	bpl.n	800ecf2 <d_demangle_callback.constprop.15+0x322>
 800ec44:	69f8      	ldr	r0, [r7, #28]
 800ec46:	f890 9000 	ldrb.w	r9, [r0]
 800ec4a:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800ec4e:	f47f af4c 	bne.w	800eaea <d_demangle_callback.constprop.15+0x11a>
 800ec52:	7843      	ldrb	r3, [r0, #1]
 800ec54:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ec58:	2a19      	cmp	r2, #25
 800ec5a:	d93d      	bls.n	800ecd8 <d_demangle_callback.constprop.15+0x308>
 800ec5c:	2b5f      	cmp	r3, #95	; 0x5f
 800ec5e:	d03b      	beq.n	800ecd8 <d_demangle_callback.constprop.15+0x308>
 800ec60:	3b30      	subs	r3, #48	; 0x30
 800ec62:	2b09      	cmp	r3, #9
 800ec64:	d845      	bhi.n	800ecf2 <d_demangle_callback.constprop.15+0x322>
 800ec66:	4603      	mov	r3, r0
 800ec68:	7802      	ldrb	r2, [r0, #0]
 800ec6a:	2a2e      	cmp	r2, #46	; 0x2e
 800ec6c:	d111      	bne.n	800ec92 <d_demangle_callback.constprop.15+0x2c2>
 800ec6e:	785a      	ldrb	r2, [r3, #1]
 800ec70:	3a30      	subs	r2, #48	; 0x30
 800ec72:	2a09      	cmp	r2, #9
 800ec74:	d80d      	bhi.n	800ec92 <d_demangle_callback.constprop.15+0x2c2>
 800ec76:	789a      	ldrb	r2, [r3, #2]
 800ec78:	3302      	adds	r3, #2
 800ec7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ec7e:	2909      	cmp	r1, #9
 800ec80:	d8f3      	bhi.n	800ec6a <d_demangle_callback.constprop.15+0x29a>
 800ec82:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ec86:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ec8a:	2909      	cmp	r1, #9
 800ec8c:	d9f9      	bls.n	800ec82 <d_demangle_callback.constprop.15+0x2b2>
 800ec8e:	2a2e      	cmp	r2, #46	; 0x2e
 800ec90:	d0ed      	beq.n	800ec6e <d_demangle_callback.constprop.15+0x29e>
 800ec92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec96:	61fb      	str	r3, [r7, #28]
 800ec98:	428a      	cmp	r2, r1
 800ec9a:	da1b      	bge.n	800ecd4 <d_demangle_callback.constprop.15+0x304>
 800ec9c:	6a39      	ldr	r1, [r7, #32]
 800ec9e:	f102 0e01 	add.w	lr, r2, #1
 800eca2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800eca6:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 800ecaa:	eb11 0e82 	adds.w	lr, r1, r2, lsl #2
 800ecae:	d011      	beq.n	800ecd4 <d_demangle_callback.constprop.15+0x304>
 800ecb0:	ebb3 0c00 	subs.w	ip, r3, r0
 800ecb4:	d00e      	beq.n	800ecd4 <d_demangle_callback.constprop.15+0x304>
 800ecb6:	4673      	mov	r3, lr
 800ecb8:	f801 4022 	strb.w	r4, [r1, r2, lsl #2]
 800ecbc:	f8ce 0004 	str.w	r0, [lr, #4]
 800ecc0:	f8ce c008 	str.w	ip, [lr, #8]
 800ecc4:	462a      	mov	r2, r5
 800ecc6:	214b      	movs	r1, #75	; 0x4b
 800ecc8:	f107 0010 	add.w	r0, r7, #16
 800eccc:	f7f7 ff30 	bl	8006b30 <d_make_comp>
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	e7b7      	b.n	800ec44 <d_demangle_callback.constprop.15+0x274>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e7f5      	b.n	800ecc4 <d_demangle_callback.constprop.15+0x2f4>
 800ecd8:	1c81      	adds	r1, r0, #2
 800ecda:	780a      	ldrb	r2, [r1, #0]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800ece2:	f1be 0f19 	cmp.w	lr, #25
 800ece6:	f101 0101 	add.w	r1, r1, #1
 800ecea:	d9f6      	bls.n	800ecda <d_demangle_callback.constprop.15+0x30a>
 800ecec:	2a5f      	cmp	r2, #95	; 0x5f
 800ecee:	d0f4      	beq.n	800ecda <d_demangle_callback.constprop.15+0x30a>
 800ecf0:	e7bb      	b.n	800ec6a <d_demangle_callback.constprop.15+0x29a>
 800ecf2:	69fb      	ldr	r3, [r7, #28]
 800ecf4:	f893 9000 	ldrb.w	r9, [r3]
 800ecf8:	e6f7      	b.n	800eaea <d_demangle_callback.constprop.15+0x11a>
 800ecfa:	bf00      	nop
 800ecfc:	08015f20 	.word	0x08015f20

0800ed00 <__cxa_demangle>:
 800ed00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	b370      	cbz	r0, 800ed66 <__cxa_demangle+0x66>
 800ed08:	b101      	cbz	r1, 800ed0c <__cxa_demangle+0xc>
 800ed0a:	b362      	cbz	r2, 800ed66 <__cxa_demangle+0x66>
 800ed0c:	2400      	movs	r4, #0
 800ed0e:	4617      	mov	r7, r2
 800ed10:	460d      	mov	r5, r1
 800ed12:	466a      	mov	r2, sp
 800ed14:	4928      	ldr	r1, [pc, #160]	; (800edb8 <__cxa_demangle+0xb8>)
 800ed16:	461e      	mov	r6, r3
 800ed18:	9400      	str	r4, [sp, #0]
 800ed1a:	9401      	str	r4, [sp, #4]
 800ed1c:	9402      	str	r4, [sp, #8]
 800ed1e:	9403      	str	r4, [sp, #12]
 800ed20:	f7ff fe56 	bl	800e9d0 <d_demangle_callback.constprop.15>
 800ed24:	b368      	cbz	r0, 800ed82 <__cxa_demangle+0x82>
 800ed26:	9b03      	ldr	r3, [sp, #12]
 800ed28:	b1d3      	cbz	r3, 800ed60 <__cxa_demangle+0x60>
 800ed2a:	f04f 0801 	mov.w	r8, #1
 800ed2e:	9c00      	ldr	r4, [sp, #0]
 800ed30:	b3ac      	cbz	r4, 800ed9e <__cxa_demangle+0x9e>
 800ed32:	b38d      	cbz	r5, 800ed98 <__cxa_demangle+0x98>
 800ed34:	4620      	mov	r0, r4
 800ed36:	f000 f85d 	bl	800edf4 <strlen>
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	4298      	cmp	r0, r3
 800ed3e:	d21a      	bcs.n	800ed76 <__cxa_demangle+0x76>
 800ed40:	1c42      	adds	r2, r0, #1
 800ed42:	4621      	mov	r1, r4
 800ed44:	4628      	mov	r0, r5
 800ed46:	f004 fb8c 	bl	8013462 <memcpy>
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	f004 fb72 	bl	8013434 <free>
 800ed50:	462c      	mov	r4, r5
 800ed52:	b376      	cbz	r6, 800edb2 <__cxa_demangle+0xb2>
 800ed54:	4620      	mov	r0, r4
 800ed56:	2300      	movs	r3, #0
 800ed58:	6033      	str	r3, [r6, #0]
 800ed5a:	b004      	add	sp, #16
 800ed5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed60:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ed64:	e7e3      	b.n	800ed2e <__cxa_demangle+0x2e>
 800ed66:	b19b      	cbz	r3, 800ed90 <__cxa_demangle+0x90>
 800ed68:	f06f 0202 	mvn.w	r2, #2
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	601a      	str	r2, [r3, #0]
 800ed70:	b004      	add	sp, #16
 800ed72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed76:	4628      	mov	r0, r5
 800ed78:	f004 fb5c 	bl	8013434 <free>
 800ed7c:	f8c7 8000 	str.w	r8, [r7]
 800ed80:	e7e7      	b.n	800ed52 <__cxa_demangle+0x52>
 800ed82:	9800      	ldr	r0, [sp, #0]
 800ed84:	f004 fb56 	bl	8013434 <free>
 800ed88:	b116      	cbz	r6, 800ed90 <__cxa_demangle+0x90>
 800ed8a:	f06f 0301 	mvn.w	r3, #1
 800ed8e:	6033      	str	r3, [r6, #0]
 800ed90:	2000      	movs	r0, #0
 800ed92:	b004      	add	sp, #16
 800ed94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed98:	2f00      	cmp	r7, #0
 800ed9a:	d1ef      	bne.n	800ed7c <__cxa_demangle+0x7c>
 800ed9c:	e7d9      	b.n	800ed52 <__cxa_demangle+0x52>
 800ed9e:	2e00      	cmp	r6, #0
 800eda0:	d0f6      	beq.n	800ed90 <__cxa_demangle+0x90>
 800eda2:	f1b8 0f01 	cmp.w	r8, #1
 800eda6:	d1f0      	bne.n	800ed8a <__cxa_demangle+0x8a>
 800eda8:	f04f 33ff 	mov.w	r3, #4294967295
 800edac:	4620      	mov	r0, r4
 800edae:	6033      	str	r3, [r6, #0]
 800edb0:	e7d3      	b.n	800ed5a <__cxa_demangle+0x5a>
 800edb2:	4620      	mov	r0, r4
 800edb4:	e7d1      	b.n	800ed5a <__cxa_demangle+0x5a>
 800edb6:	bf00      	nop
 800edb8:	08007259 	.word	0x08007259

0800edbc <__gcclibcxx_demangle_callback>:
 800edbc:	b160      	cbz	r0, 800edd8 <__gcclibcxx_demangle_callback+0x1c>
 800edbe:	b508      	push	{r3, lr}
 800edc0:	b139      	cbz	r1, 800edd2 <__gcclibcxx_demangle_callback+0x16>
 800edc2:	f7ff fe05 	bl	800e9d0 <d_demangle_callback.constprop.15>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	bf0c      	ite	eq
 800edca:	f06f 0001 	mvneq.w	r0, #1
 800edce:	2000      	movne	r0, #0
 800edd0:	bd08      	pop	{r3, pc}
 800edd2:	f06f 0002 	mvn.w	r0, #2
 800edd6:	bd08      	pop	{r3, pc}
 800edd8:	f06f 0002 	mvn.w	r0, #2
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop

0800ede0 <strcmp>:
 800ede0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ede4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ede8:	2a01      	cmp	r2, #1
 800edea:	bf28      	it	cs
 800edec:	429a      	cmpcs	r2, r3
 800edee:	d0f7      	beq.n	800ede0 <strcmp>
 800edf0:	1ad0      	subs	r0, r2, r3
 800edf2:	4770      	bx	lr

0800edf4 <strlen>:
 800edf4:	4603      	mov	r3, r0
 800edf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edfa:	2a00      	cmp	r2, #0
 800edfc:	d1fb      	bne.n	800edf6 <strlen+0x2>
 800edfe:	1a18      	subs	r0, r3, r0
 800ee00:	3801      	subs	r0, #1
 800ee02:	4770      	bx	lr

0800ee04 <Reset_Handler>:
 800ee04:	2100      	movs	r1, #0
 800ee06:	e003      	b.n	800ee10 <LoopCopyDataInit>

0800ee08 <CopyDataInit>:
 800ee08:	4b0b      	ldr	r3, [pc, #44]	; (800ee38 <LoopFillZerobss+0x14>)
 800ee0a:	585b      	ldr	r3, [r3, r1]
 800ee0c:	5043      	str	r3, [r0, r1]
 800ee0e:	3104      	adds	r1, #4

0800ee10 <LoopCopyDataInit>:
 800ee10:	480a      	ldr	r0, [pc, #40]	; (800ee3c <LoopFillZerobss+0x18>)
 800ee12:	4b0b      	ldr	r3, [pc, #44]	; (800ee40 <LoopFillZerobss+0x1c>)
 800ee14:	1842      	adds	r2, r0, r1
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d3f6      	bcc.n	800ee08 <CopyDataInit>
 800ee1a:	4a0a      	ldr	r2, [pc, #40]	; (800ee44 <LoopFillZerobss+0x20>)
 800ee1c:	e002      	b.n	800ee24 <LoopFillZerobss>

0800ee1e <FillZerobss>:
 800ee1e:	2300      	movs	r3, #0
 800ee20:	f842 3b04 	str.w	r3, [r2], #4

0800ee24 <LoopFillZerobss>:
 800ee24:	4b08      	ldr	r3, [pc, #32]	; (800ee48 <LoopFillZerobss+0x24>)
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d3f9      	bcc.n	800ee1e <FillZerobss>
 800ee2a:	f7f1 fa07 	bl	800023c <SystemInit>
 800ee2e:	f004 fad3 	bl	80133d8 <__libc_init_array>
 800ee32:	f001 f8e5 	bl	8010000 <main>
 800ee36:	4770      	bx	lr
 800ee38:	08016bd8 	.word	0x08016bd8
 800ee3c:	20000000 	.word	0x20000000
 800ee40:	2000009c 	.word	0x2000009c
 800ee44:	200000a0 	.word	0x200000a0
 800ee48:	20000d28 	.word	0x20000d28

0800ee4c <ADC1_2_IRQHandler>:
 800ee4c:	e7fe      	b.n	800ee4c <ADC1_2_IRQHandler>

0800ee4e <std_msgs::Time::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800ee4e:	6843      	ldr	r3, [r0, #4]
 800ee50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800ee52:	6843      	ldr	r3, [r0, #4]
 800ee54:	0a1b      	lsrs	r3, r3, #8
 800ee56:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800ee58:	88c3      	ldrh	r3, [r0, #6]
 800ee5a:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800ee5c:	79c3      	ldrb	r3, [r0, #7]
 800ee5e:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800ee60:	6883      	ldr	r3, [r0, #8]
 800ee62:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800ee64:	6883      	ldr	r3, [r0, #8]
 800ee66:	0a1b      	lsrs	r3, r3, #8
 800ee68:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800ee6a:	8943      	ldrh	r3, [r0, #10]
 800ee6c:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800ee6e:	7ac3      	ldrb	r3, [r0, #11]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800ee70:	2008      	movs	r0, #8
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800ee72:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800ee74:	4770      	bx	lr

0800ee76 <std_msgs::Time::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800ee76:	780b      	ldrb	r3, [r1, #0]
 800ee78:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ee7a:	784a      	ldrb	r2, [r1, #1]
 800ee7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ee80:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ee82:	788a      	ldrb	r2, [r1, #2]
 800ee84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee88:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ee8a:	78ca      	ldrb	r2, [r1, #3]
 800ee8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ee90:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800ee92:	790b      	ldrb	r3, [r1, #4]
 800ee94:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ee96:	794a      	ldrb	r2, [r1, #5]
 800ee98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ee9c:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ee9e:	798a      	ldrb	r2, [r1, #6]
 800eea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eea4:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800eea6:	79ca      	ldrb	r2, [r1, #7]
 800eea8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eeac:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 800eeae:	2008      	movs	r0, #8
 800eeb0:	4770      	bx	lr
	...

0800eeb4 <std_msgs::Time::getType()>:

    const char * getType(){ return "std_msgs/Time"; };
 800eeb4:	4800      	ldr	r0, [pc, #0]	; (800eeb8 <std_msgs::Time::getType()+0x4>)
 800eeb6:	4770      	bx	lr
 800eeb8:	080156bc 	.word	0x080156bc

0800eebc <std_msgs::Time::getMD5()>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800eebc:	4800      	ldr	r0, [pc, #0]	; (800eec0 <std_msgs::Time::getMD5()+0x4>)
 800eebe:	4770      	bx	lr
 800eec0:	080156ca 	.word	0x080156ca

0800eec4 <rosserial_msgs::TopicInfo::getType()>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800eec4:	4800      	ldr	r0, [pc, #0]	; (800eec8 <rosserial_msgs::TopicInfo::getType()+0x4>)
 800eec6:	4770      	bx	lr
 800eec8:	080156eb 	.word	0x080156eb

0800eecc <rosserial_msgs::TopicInfo::getMD5()>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800eecc:	4800      	ldr	r0, [pc, #0]	; (800eed0 <rosserial_msgs::TopicInfo::getMD5()+0x4>)
 800eece:	4770      	bx	lr
 800eed0:	08015704 	.word	0x08015704

0800eed4 <rosserial_msgs::Log::getType()>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/Log"; };
 800eed4:	4800      	ldr	r0, [pc, #0]	; (800eed8 <rosserial_msgs::Log::getType()+0x4>)
 800eed6:	4770      	bx	lr
 800eed8:	08015725 	.word	0x08015725

0800eedc <rosserial_msgs::Log::getMD5()>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800eedc:	4800      	ldr	r0, [pc, #0]	; (800eee0 <rosserial_msgs::Log::getMD5()+0x4>)
 800eede:	4770      	bx	lr
 800eee0:	08015738 	.word	0x08015738

0800eee4 <rosserial_msgs::RequestParamRequest::getType()>:
      this->name = (char *)(inbuffer + offset-1);
      offset += length_name;
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800eee4:	4800      	ldr	r0, [pc, #0]	; (800eee8 <rosserial_msgs::RequestParamRequest::getType()+0x4>)
 800eee6:	4770      	bx	lr
 800eee8:	08014870 	.word	0x08014870

0800eeec <rosserial_msgs::RequestParamRequest::getMD5()>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 800eeec:	4800      	ldr	r0, [pc, #0]	; (800eef0 <rosserial_msgs::RequestParamRequest::getMD5()+0x4>)
 800eeee:	4770      	bx	lr
 800eef0:	08015759 	.word	0x08015759

0800eef4 <rosserial_msgs::RequestParamResponse::getType()>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800eef4:	4800      	ldr	r0, [pc, #0]	; (800eef8 <rosserial_msgs::RequestParamResponse::getType()+0x4>)
 800eef6:	4770      	bx	lr
 800eef8:	08014870 	.word	0x08014870

0800eefc <rosserial_msgs::RequestParamResponse::getMD5()>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800eefc:	4800      	ldr	r0, [pc, #0]	; (800ef00 <rosserial_msgs::RequestParamResponse::getMD5()+0x4>)
 800eefe:	4770      	bx	lr
 800ef00:	0801577a 	.word	0x0801577a

0800ef04 <std_msgs::UInt8::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800ef04:	7903      	ldrb	r3, [r0, #4]
      offset += sizeof(this->data);
      return offset;
    }
 800ef06:	2001      	movs	r0, #1
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800ef08:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 800ef0a:	4770      	bx	lr

0800ef0c <std_msgs::UInt8::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800ef0c:	780b      	ldrb	r3, [r1, #0]
 800ef0e:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 800ef10:	2001      	movs	r0, #1
 800ef12:	4770      	bx	lr

0800ef14 <std_msgs::UInt8::getType()>:

    const char * getType(){ return "std_msgs/UInt8"; };
 800ef14:	4800      	ldr	r0, [pc, #0]	; (800ef18 <std_msgs::UInt8::getType()+0x4>)
 800ef16:	4770      	bx	lr
 800ef18:	0801579b 	.word	0x0801579b

0800ef1c <std_msgs::UInt8::getMD5()>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 800ef1c:	4800      	ldr	r0, [pc, #0]	; (800ef20 <std_msgs::UInt8::getMD5()+0x4>)
 800ef1e:	4770      	bx	lr
 800ef20:	080157aa 	.word	0x080157aa

0800ef24 <std_msgs::Header::getType()>:
      this->frame_id = (char *)(inbuffer + offset-1);
      offset += length_frame_id;
     return offset;
    }

    const char * getType(){ return "std_msgs/Header"; };
 800ef24:	4800      	ldr	r0, [pc, #0]	; (800ef28 <std_msgs::Header::getType()+0x4>)
 800ef26:	4770      	bx	lr
 800ef28:	080157cb 	.word	0x080157cb

0800ef2c <std_msgs::Header::getMD5()>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800ef2c:	4800      	ldr	r0, [pc, #0]	; (800ef30 <std_msgs::Header::getMD5()+0x4>)
 800ef2e:	4770      	bx	lr
 800ef30:	080157db 	.word	0x080157db

0800ef34 <geometry_msgs::Point::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Point"; };
 800ef34:	4800      	ldr	r0, [pc, #0]	; (800ef38 <geometry_msgs::Point::getType()+0x4>)
 800ef36:	4770      	bx	lr
 800ef38:	080157fc 	.word	0x080157fc

0800ef3c <geometry_msgs::Point::getMD5()>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800ef3c:	4800      	ldr	r0, [pc, #0]	; (800ef40 <geometry_msgs::Point::getMD5()+0x4>)
 800ef3e:	4770      	bx	lr
 800ef40:	08015810 	.word	0x08015810

0800ef44 <geometry_msgs::Quaternion::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 800ef44:	4800      	ldr	r0, [pc, #0]	; (800ef48 <geometry_msgs::Quaternion::getType()+0x4>)
 800ef46:	4770      	bx	lr
 800ef48:	08015831 	.word	0x08015831

0800ef4c <geometry_msgs::Quaternion::getMD5()>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 800ef4c:	4800      	ldr	r0, [pc, #0]	; (800ef50 <geometry_msgs::Quaternion::getMD5()+0x4>)
 800ef4e:	4770      	bx	lr
 800ef50:	0801584a 	.word	0x0801584a

0800ef54 <geometry_msgs::Pose::getType()>:
      offset += this->position.deserialize(inbuffer + offset);
      offset += this->orientation.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Pose"; };
 800ef54:	4800      	ldr	r0, [pc, #0]	; (800ef58 <geometry_msgs::Pose::getType()+0x4>)
 800ef56:	4770      	bx	lr
 800ef58:	0801586b 	.word	0x0801586b

0800ef5c <geometry_msgs::Pose::getMD5()>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 800ef5c:	4800      	ldr	r0, [pc, #0]	; (800ef60 <geometry_msgs::Pose::getMD5()+0x4>)
 800ef5e:	4770      	bx	lr
 800ef60:	0801587e 	.word	0x0801587e

0800ef64 <geometry_msgs::PoseWithCovariance::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
      }
     return offset;
    }

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 800ef64:	4800      	ldr	r0, [pc, #0]	; (800ef68 <geometry_msgs::PoseWithCovariance::getType()+0x4>)
 800ef66:	4770      	bx	lr
 800ef68:	0801589f 	.word	0x0801589f

0800ef6c <geometry_msgs::PoseWithCovariance::getMD5()>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 800ef6c:	4800      	ldr	r0, [pc, #0]	; (800ef70 <geometry_msgs::PoseWithCovariance::getMD5()+0x4>)
 800ef6e:	4770      	bx	lr
 800ef70:	080158c0 	.word	0x080158c0

0800ef74 <geometry_msgs::Vector3::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800ef74:	4800      	ldr	r0, [pc, #0]	; (800ef78 <geometry_msgs::Vector3::getType()+0x4>)
 800ef76:	4770      	bx	lr
 800ef78:	080158e1 	.word	0x080158e1

0800ef7c <geometry_msgs::Vector3::getMD5()>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800ef7c:	4800      	ldr	r0, [pc, #0]	; (800ef80 <geometry_msgs::Vector3::getMD5()+0x4>)
 800ef7e:	4770      	bx	lr
 800ef80:	08015810 	.word	0x08015810

0800ef84 <geometry_msgs::Twist::getType()>:
      offset += this->linear.deserialize(inbuffer + offset);
      offset += this->angular.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Twist"; };
 800ef84:	4800      	ldr	r0, [pc, #0]	; (800ef88 <geometry_msgs::Twist::getType()+0x4>)
 800ef86:	4770      	bx	lr
 800ef88:	080158f7 	.word	0x080158f7

0800ef8c <geometry_msgs::Twist::getMD5()>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800ef8c:	4800      	ldr	r0, [pc, #0]	; (800ef90 <geometry_msgs::Twist::getMD5()+0x4>)
 800ef8e:	4770      	bx	lr
 800ef90:	0801590b 	.word	0x0801590b

0800ef94 <geometry_msgs::TwistWithCovariance::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
      }
     return offset;
    }

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 800ef94:	4800      	ldr	r0, [pc, #0]	; (800ef98 <geometry_msgs::TwistWithCovariance::getType()+0x4>)
 800ef96:	4770      	bx	lr
 800ef98:	0801592c 	.word	0x0801592c

0800ef9c <geometry_msgs::TwistWithCovariance::getMD5()>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 800ef9c:	4800      	ldr	r0, [pc, #0]	; (800efa0 <geometry_msgs::TwistWithCovariance::getMD5()+0x4>)
 800ef9e:	4770      	bx	lr
 800efa0:	0801594e 	.word	0x0801594e

0800efa4 <nav_msgs::Odometry::getType()>:
      offset += this->pose.deserialize(inbuffer + offset);
      offset += this->twist.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "nav_msgs/Odometry"; };
 800efa4:	4800      	ldr	r0, [pc, #0]	; (800efa8 <nav_msgs::Odometry::getType()+0x4>)
 800efa6:	4770      	bx	lr
 800efa8:	0801596f 	.word	0x0801596f

0800efac <nav_msgs::Odometry::getMD5()>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 800efac:	4800      	ldr	r0, [pc, #0]	; (800efb0 <nav_msgs::Odometry::getMD5()+0x4>)
 800efae:	4770      	bx	lr
 800efb0:	08015981 	.word	0x08015981

0800efb4 <roberto_msgs::MotorState::getType()>:
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->mode);
     return offset;
    }

    const char * getType(){ return "roberto_msgs/MotorState"; };
 800efb4:	4800      	ldr	r0, [pc, #0]	; (800efb8 <roberto_msgs::MotorState::getType()+0x4>)
 800efb6:	4770      	bx	lr
 800efb8:	080159a2 	.word	0x080159a2

0800efbc <roberto_msgs::MotorState::getMD5()>:
    const char * getMD5(){ return "e8b5d1162b85151c49e02b8224796c0e"; };
 800efbc:	4800      	ldr	r0, [pc, #0]	; (800efc0 <roberto_msgs::MotorState::getMD5()+0x4>)
 800efbe:	4770      	bx	lr
 800efc0:	080159ba 	.word	0x080159ba

0800efc4 <geometry_msgs::Transform::getType()>:
      offset += this->translation.deserialize(inbuffer + offset);
      offset += this->rotation.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Transform"; };
 800efc4:	4800      	ldr	r0, [pc, #0]	; (800efc8 <geometry_msgs::Transform::getType()+0x4>)
 800efc6:	4770      	bx	lr
 800efc8:	080159db 	.word	0x080159db

0800efcc <geometry_msgs::Transform::getMD5()>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 800efcc:	4800      	ldr	r0, [pc, #0]	; (800efd0 <geometry_msgs::Transform::getMD5()+0x4>)
 800efce:	4770      	bx	lr
 800efd0:	080159f3 	.word	0x080159f3

0800efd4 <geometry_msgs::TransformStamped::getType()>:
      offset += length_child_frame_id;
      offset += this->transform.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 800efd4:	4800      	ldr	r0, [pc, #0]	; (800efd8 <geometry_msgs::TransformStamped::getType()+0x4>)
 800efd6:	4770      	bx	lr
 800efd8:	08015a14 	.word	0x08015a14

0800efdc <geometry_msgs::TransformStamped::getMD5()>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 800efdc:	4800      	ldr	r0, [pc, #0]	; (800efe0 <geometry_msgs::TransformStamped::getMD5()+0x4>)
 800efde:	4770      	bx	lr
 800efe0:	08015a33 	.word	0x08015a33

0800efe4 <tf::tfMessage::serialize(unsigned char*) const>:
    tfMessage():
      transforms_length(0), transforms(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800efe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efe8:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
 800efea:	7903      	ldrb	r3, [r0, #4]
    tfMessage():
      transforms_length(0), transforms(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800efec:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
      *(outbuffer + offset++) = 0;
 800efee:	2000      	movs	r0, #0
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
 800eff0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 800eff2:	7048      	strb	r0, [r1, #1]
      *(outbuffer + offset++) = 0;
 800eff4:	7088      	strb	r0, [r1, #2]
      *(outbuffer + offset++) = 0;
 800eff6:	70c8      	strb	r0, [r1, #3]
 800eff8:	2504      	movs	r5, #4
      for( uint8_t i = 0; i < transforms_length; i++){
      offset += this->transforms[i].serialize(outbuffer + offset);
 800effa:	f04f 0844 	mov.w	r8, #68	; 0x44
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < transforms_length; i++){
 800effe:	7933      	ldrb	r3, [r6, #4]
 800f000:	1c47      	adds	r7, r0, #1
 800f002:	b2c0      	uxtb	r0, r0
 800f004:	4283      	cmp	r3, r0
 800f006:	d90a      	bls.n	800f01e <tf::tfMessage::serialize(unsigned char*) const+0x3a>
      offset += this->transforms[i].serialize(outbuffer + offset);
 800f008:	fb08 f000 	mul.w	r0, r8, r0
 800f00c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800f00e:	1961      	adds	r1, r4, r5
 800f010:	581a      	ldr	r2, [r3, r0]
 800f012:	4418      	add	r0, r3
 800f014:	6812      	ldr	r2, [r2, #0]
 800f016:	4790      	blx	r2
 800f018:	4405      	add	r5, r0
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < transforms_length; i++){
 800f01a:	4638      	mov	r0, r7
 800f01c:	e7ef      	b.n	800effe <tf::tfMessage::serialize(unsigned char*) const+0x1a>
      offset += this->transforms[i].serialize(outbuffer + offset);
      }
      return offset;
    }
 800f01e:	4628      	mov	r0, r5
 800f020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f024 <tf::tfMessage::getType()>:
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
      }
     return offset;
    }

    const char * getType(){ return "tf/tfMessage"; };
 800f024:	4800      	ldr	r0, [pc, #0]	; (800f028 <tf::tfMessage::getType()+0x4>)
 800f026:	4770      	bx	lr
 800f028:	08015a54 	.word	0x08015a54

0800f02c <tf::tfMessage::getMD5()>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 800f02c:	4800      	ldr	r0, [pc, #0]	; (800f030 <tf::tfMessage::getMD5()+0x4>)
 800f02e:	4770      	bx	lr
 800f030:	08015a61 	.word	0x08015a61

0800f034 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::connected()>:


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
      };
 800f034:	f890 04f4 	ldrb.w	r0, [r0, #1268]	; 0x4f4
 800f038:	4770      	bx	lr

0800f03a <ros::Subscriber<std_msgs::UInt8>::callback(unsigned char*)>:
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800f03a:	780b      	ldrb	r3, [r1, #0]
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 800f03c:	300c      	adds	r0, #12
 800f03e:	7103      	strb	r3, [r0, #4]
 800f040:	6883      	ldr	r3, [r0, #8]
 800f042:	4718      	bx	r3

0800f044 <ros::Subscriber<std_msgs::UInt8>::getEndpointType()>:
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 800f044:	6980      	ldr	r0, [r0, #24]
 800f046:	4770      	bx	lr

0800f048 <ros::Subscriber<std_msgs::UInt8>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 800f048:	4800      	ldr	r0, [pc, #0]	; (800f04c <ros::Subscriber<std_msgs::UInt8>::getMsgType()+0x4>)
 800f04a:	4770      	bx	lr
 800f04c:	0801579b 	.word	0x0801579b

0800f050 <ros::Subscriber<std_msgs::UInt8>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800f050:	4800      	ldr	r0, [pc, #0]	; (800f054 <ros::Subscriber<std_msgs::UInt8>::getMsgMD5()+0x4>)
 800f052:	4770      	bx	lr
 800f054:	080157aa 	.word	0x080157aa

0800f058 <ros::Subscriber<roberto_msgs::MotorState>::getEndpointType()>:
      virtual int getEndpointType(){ return endpoint_; }
 800f058:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800f05a:	4770      	bx	lr

0800f05c <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 800f05c:	4800      	ldr	r0, [pc, #0]	; (800f060 <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()+0x4>)
 800f05e:	4770      	bx	lr
 800f060:	080159a2 	.word	0x080159a2

0800f064 <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800f064:	4800      	ldr	r0, [pc, #0]	; (800f068 <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()+0x4>)
 800f066:	4770      	bx	lr
 800f068:	080159ba 	.word	0x080159ba

0800f06c <std_msgs::Header::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800f06c:	6843      	ldr	r3, [r0, #4]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800f070:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800f072:	6843      	ldr	r3, [r0, #4]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f074:	4605      	mov	r5, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800f076:	0a1b      	lsrs	r3, r3, #8
 800f078:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800f07a:	88c3      	ldrh	r3, [r0, #6]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f07c:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800f07e:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800f080:	79c3      	ldrb	r3, [r0, #7]
 800f082:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->seq);
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800f084:	6883      	ldr	r3, [r0, #8]
 800f086:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800f088:	6883      	ldr	r3, [r0, #8]
 800f08a:	0a1b      	lsrs	r3, r3, #8
 800f08c:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800f08e:	8943      	ldrh	r3, [r0, #10]
 800f090:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800f092:	7ac3      	ldrb	r3, [r0, #11]
 800f094:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800f096:	68c3      	ldr	r3, [r0, #12]
 800f098:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800f09a:	68c3      	ldr	r3, [r0, #12]
 800f09c:	0a1b      	lsrs	r3, r3, #8
 800f09e:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800f0a0:	89c3      	ldrh	r3, [r0, #14]
 800f0a2:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800f0a4:	7bc3      	ldrb	r3, [r0, #15]
 800f0a6:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id = strlen(this->frame_id);
 800f0a8:	6900      	ldr	r0, [r0, #16]
 800f0aa:	f7ff fea3 	bl	800edf4 <strlen>
 800f0ae:	4606      	mov	r6, r0
 800f0b0:	ab02      	add	r3, sp, #8
 800f0b2:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 800f0b6:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800f0b8:	4632      	mov	r2, r6
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id = strlen(this->frame_id);
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 800f0ba:	60e0      	str	r0, [r4, #12]
      offset += 4;
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800f0bc:	6929      	ldr	r1, [r5, #16]
 800f0be:	f104 0010 	add.w	r0, r4, #16
 800f0c2:	f004 f9ce 	bl	8013462 <memcpy>
      offset += length_frame_id;
      return offset;
    }
 800f0c6:	f106 0010 	add.w	r0, r6, #16
 800f0ca:	b002      	add	sp, #8
 800f0cc:	bd70      	pop	{r4, r5, r6, pc}

0800f0ce <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 800f0d2:	7903      	ldrb	r3, [r0, #4]
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0d4:	4607      	mov	r7, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 800f0d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 800f0d8:	2300      	movs	r3, #0
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
 800f0da:	461a      	mov	r2, r3
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0dc:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
 800f0de:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 800f0e0:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 800f0e2:	70cb      	strb	r3, [r1, #3]
 800f0e4:	3104      	adds	r1, #4
      for( uint8_t i = 0; i < ints_length; i++){
 800f0e6:	793d      	ldrb	r5, [r7, #4]
 800f0e8:	1c50      	adds	r0, r2, #1
 800f0ea:	b2d2      	uxtb	r2, r2
 800f0ec:	4295      	cmp	r5, r2
 800f0ee:	eba1 0304 	sub.w	r3, r1, r4
 800f0f2:	f101 0104 	add.w	r1, r1, #4
 800f0f6:	d90f      	bls.n	800f118 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x4a>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800f0fe:	0a1a      	lsrs	r2, r3, #8
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800f100:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800f104:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800f108:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800f10a:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800f10c:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800f110:	f801 3c01 	strb.w	r3, [r1, #-1]
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < ints_length; i++){
 800f114:	4602      	mov	r2, r0
 800f116:	e7e6      	b.n	800f0e6 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x18>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800f118:	7c3a      	ldrb	r2, [r7, #16]
      *(outbuffer + offset++) = 0;
 800f11a:	18e1      	adds	r1, r4, r3
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800f11c:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 800f11e:	2200      	movs	r2, #0
 800f120:	3304      	adds	r3, #4
 800f122:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 800f124:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 800f126:	70ca      	strb	r2, [r1, #3]
 800f128:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 800f12a:	7c38      	ldrb	r0, [r7, #16]
 800f12c:	1c51      	adds	r1, r2, #1
 800f12e:	b2d2      	uxtb	r2, r2
 800f130:	4290      	cmp	r0, r2
 800f132:	eba3 0604 	sub.w	r6, r3, r4
 800f136:	f103 0304 	add.w	r3, r3, #4
 800f13a:	d90f      	bls.n	800f15c <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x8e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800f13c:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800f13e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800f142:	0a10      	lsrs	r0, r2, #8
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800f144:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800f148:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800f14c:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800f14e:	0e12      	lsrs	r2, r2, #24
 800f150:	f803 2c01 	strb.w	r2, [r3, #-1]
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800f154:	f803 0c02 	strb.w	r0, [r3, #-2]
      }
      *(outbuffer + offset++) = floats_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < floats_length; i++){
 800f158:	460a      	mov	r2, r1
 800f15a:	e7e6      	b.n	800f12a <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x5c>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 800f15c:	7f3b      	ldrb	r3, [r7, #28]
      *(outbuffer + offset++) = 0;
 800f15e:	19a2      	adds	r2, r4, r6
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 800f160:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 800f166:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 800f168:	3604      	adds	r6, #4
 800f16a:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 800f16c:	7f3a      	ldrb	r2, [r7, #28]
 800f16e:	b2dd      	uxtb	r5, r3
 800f170:	42aa      	cmp	r2, r5
 800f172:	f103 0901 	add.w	r9, r3, #1
 800f176:	d915      	bls.n	800f1a4 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0xd6>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f17e:	f7ff fe39 	bl	800edf4 <strlen>
 800f182:	4680      	mov	r8, r0
 800f184:	ab02      	add	r3, sp, #8
 800f186:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 800f18a:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800f18c:	4642      	mov	r2, r8
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_stringsi = strlen(this->strings[i]);
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 800f18e:	51a0      	str	r0, [r4, r6]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	3604      	adds	r6, #4
 800f194:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800f198:	19a0      	adds	r0, r4, r6
 800f19a:	f004 f962 	bl	8013462 <memcpy>
      offset += length_stringsi;
 800f19e:	4446      	add	r6, r8
      }
      *(outbuffer + offset++) = strings_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
 800f1a0:	464b      	mov	r3, r9
 800f1a2:	e7e3      	b.n	800f16c <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x9e>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	b003      	add	sp, #12
 800f1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f1ac <rosserial_msgs::RequestParamRequest::serialize(unsigned char*) const>:
    RequestParamRequest():
      name("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f1ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1ae:	4606      	mov	r6, r0
    {
      int offset = 0;
      uint32_t length_name = strlen(this->name);
 800f1b0:	6840      	ldr	r0, [r0, #4]
    RequestParamRequest():
      name("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f1b2:	460c      	mov	r4, r1
    {
      int offset = 0;
      uint32_t length_name = strlen(this->name);
 800f1b4:	f7ff fe1e 	bl	800edf4 <strlen>
 800f1b8:	ab02      	add	r3, sp, #8
 800f1ba:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f1be:	4605      	mov	r5, r0
      memcpy(outbuffer + offset, &length_name, sizeof(uint32_t));
 800f1c0:	6818      	ldr	r0, [r3, #0]
 800f1c2:	4623      	mov	r3, r4
 800f1c4:	f843 0b04 	str.w	r0, [r3], #4
      offset += 4;
      memcpy(outbuffer + offset, this->name, length_name);
 800f1c8:	462a      	mov	r2, r5
 800f1ca:	6871      	ldr	r1, [r6, #4]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f004 f948 	bl	8013462 <memcpy>
      offset += length_name;
      return offset;
    }
 800f1d2:	1d28      	adds	r0, r5, #4
 800f1d4:	b002      	add	sp, #8
 800f1d6:	bd70      	pop	{r4, r5, r6, pc}

0800f1d8 <rosserial_msgs::Log::serialize(unsigned char*) const>:
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f1d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800f1da:	7903      	ldrb	r3, [r0, #4]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f1dc:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800f1de:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 800f1e0:	6880      	ldr	r0, [r0, #8]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f1e2:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 800f1e4:	f7ff fe06 	bl	800edf4 <strlen>
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	ab02      	add	r3, sp, #8
 800f1ec:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 800f1f0:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800f1f2:	4622      	mov	r2, r4
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 800f1f4:	f8c5 0001 	str.w	r0, [r5, #1]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800f1f8:	68b1      	ldr	r1, [r6, #8]
 800f1fa:	1d68      	adds	r0, r5, #5
 800f1fc:	f004 f931 	bl	8013462 <memcpy>
      offset += length_msg;
      return offset;
    }
 800f200:	1d60      	adds	r0, r4, #5
 800f202:	b002      	add	sp, #8
 800f204:	bd70      	pop	{r4, r5, r6, pc}

0800f206 <rosserial_msgs::TopicInfo::serialize(unsigned char*) const>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f206:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f20a:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f20c:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f20e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f210:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f212:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f214:	0a1b      	lsrs	r3, r3, #8
 800f216:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
 800f218:	6880      	ldr	r0, [r0, #8]
 800f21a:	f7ff fdeb 	bl	800edf4 <strlen>
 800f21e:	4604      	mov	r4, r0
 800f220:	ab04      	add	r3, sp, #16
 800f222:	f843 0d0c 	str.w	r0, [r3, #-12]!
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800f226:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f228:	4622      	mov	r2, r4
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800f22a:	f8c5 0002 	str.w	r0, [r5, #2]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f22e:	68b1      	ldr	r1, [r6, #8]
 800f230:	1da8      	adds	r0, r5, #6
 800f232:	f004 f916 	bl	8013462 <memcpy>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
 800f236:	68f0      	ldr	r0, [r6, #12]
 800f238:	f7ff fddc 	bl	800edf4 <strlen>
 800f23c:	4607      	mov	r7, r0
 800f23e:	ab04      	add	r3, sp, #16
 800f240:	f843 0d08 	str.w	r0, [r3, #-8]!
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800f244:	6818      	ldr	r0, [r3, #0]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
      offset += length_topic_name;
 800f246:	f104 0806 	add.w	r8, r4, #6
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800f24a:	f845 0008 	str.w	r0, [r5, r8]
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800f24e:	340a      	adds	r4, #10
 800f250:	463a      	mov	r2, r7
 800f252:	68f1      	ldr	r1, [r6, #12]
 800f254:	1928      	adds	r0, r5, r4
 800f256:	f004 f904 	bl	8013462 <memcpy>
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
 800f25a:	6930      	ldr	r0, [r6, #16]
 800f25c:	f7ff fdca 	bl	800edf4 <strlen>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
 800f260:	443c      	add	r4, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 800f262:	4607      	mov	r7, r0
 800f264:	ab04      	add	r3, sp, #16
 800f266:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800f26a:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f26c:	463a      	mov	r2, r7
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800f26e:	5128      	str	r0, [r5, r4]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f270:	3404      	adds	r4, #4
 800f272:	1928      	adds	r0, r5, r4
 800f274:	6931      	ldr	r1, [r6, #16]
 800f276:	f004 f8f4 	bl	8013462 <memcpy>
      offset += length_md5sum;
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800f27a:	6973      	ldr	r3, [r6, #20]
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
      offset += length_md5sum;
 800f27c:	1938      	adds	r0, r7, r4
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800f27e:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800f280:	0a1a      	lsrs	r2, r3, #8
 800f282:	4405      	add	r5, r0
 800f284:	706a      	strb	r2, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }
 800f286:	3004      	adds	r0, #4
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f288:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f28a:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f28c:	70aa      	strb	r2, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f28e:	70eb      	strb	r3, [r5, #3]
      offset += sizeof(this->buffer_size);
      return offset;
    }
 800f290:	b004      	add	sp, #16
 800f292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f296 <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
 800f296:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->name, length_name);
      offset += length_name;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f29a:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
 800f29c:	f853 0b04 	ldr.w	r0, [r3], #4
 800f2a0:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
 800f2a2:	9a01      	ldr	r2, [sp, #4]
 800f2a4:	1d10      	adds	r0, r2, #4
 800f2a6:	1a5d      	subs	r5, r3, r1
 800f2a8:	42a8      	cmp	r0, r5
 800f2aa:	d904      	bls.n	800f2b6 <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)+0x20>
          inbuffer[k-1]=inbuffer[k];
 800f2ac:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f2b0:	f803 5c02 	strb.w	r5, [r3, #-2]
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
 800f2b4:	e7f7      	b.n	800f2a6 <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)+0x10>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_name-1]=0;
 800f2b6:	440a      	add	r2, r1
 800f2b8:	2300      	movs	r3, #0
      this->name = (char *)(inbuffer + offset-1);
 800f2ba:	3103      	adds	r1, #3
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_name-1]=0;
 800f2bc:	70d3      	strb	r3, [r2, #3]
      this->name = (char *)(inbuffer + offset-1);
 800f2be:	6061      	str	r1, [r4, #4]
      offset += length_name;
     return offset;
    }
 800f2c0:	b003      	add	sp, #12
 800f2c2:	bd30      	pop	{r4, r5, pc}

0800f2c4 <std_msgs::Header::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800f2c8:	780a      	ldrb	r2, [r1, #0]
 800f2ca:	f101 0410 	add.w	r4, r1, #16
 800f2ce:	6042      	str	r2, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f2d0:	7848      	ldrb	r0, [r1, #1]
 800f2d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f2d6:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f2d8:	7888      	ldrb	r0, [r1, #2]
 800f2da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f2de:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f2e0:	78c8      	ldrb	r0, [r1, #3]
 800f2e2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f2e6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800f2e8:	790a      	ldrb	r2, [r1, #4]
 800f2ea:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f2ec:	7948      	ldrb	r0, [r1, #5]
 800f2ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f2f2:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f2f4:	7988      	ldrb	r0, [r1, #6]
 800f2f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f2fa:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f2fc:	79c8      	ldrb	r0, [r1, #7]
 800f2fe:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f302:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800f304:	7a0a      	ldrb	r2, [r1, #8]
 800f306:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f308:	7a48      	ldrb	r0, [r1, #9]
 800f30a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f30e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f310:	7a88      	ldrb	r0, [r1, #10]
 800f312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f316:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f318:	7ac8      	ldrb	r0, [r1, #11]
 800f31a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f31e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
 800f320:	68c8      	ldr	r0, [r1, #12]
 800f322:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800f324:	9a01      	ldr	r2, [sp, #4]
 800f326:	f102 0010 	add.w	r0, r2, #16
 800f32a:	1a65      	subs	r5, r4, r1
 800f32c:	42a8      	cmp	r0, r5
 800f32e:	d904      	bls.n	800f33a <std_msgs::Header::deserialize(unsigned char*)+0x76>
          inbuffer[k-1]=inbuffer[k];
 800f330:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f334:	f804 5c02 	strb.w	r5, [r4, #-2]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800f338:	e7f7      	b.n	800f32a <std_msgs::Header::deserialize(unsigned char*)+0x66>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 800f33a:	440a      	add	r2, r1
 800f33c:	2400      	movs	r4, #0
      this->frame_id = (char *)(inbuffer + offset-1);
 800f33e:	310f      	adds	r1, #15
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 800f340:	73d4      	strb	r4, [r2, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
 800f342:	6119      	str	r1, [r3, #16]
      offset += length_frame_id;
     return offset;
    }
 800f344:	b003      	add	sp, #12
 800f346:	bd30      	pop	{r4, r5, pc}

0800f348 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f348:	780b      	ldrb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f34a:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f34c:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f34e:	784a      	ldrb	r2, [r1, #1]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f350:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f352:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f356:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800f358:	f8d1 0002 	ldr.w	r0, [r1, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f35c:	b085      	sub	sp, #20
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800f35e:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f360:	9d01      	ldr	r5, [sp, #4]
 800f362:	1d8a      	adds	r2, r1, #6
 800f364:	1dab      	adds	r3, r5, #6
 800f366:	1a50      	subs	r0, r2, r1
 800f368:	4283      	cmp	r3, r0
 800f36a:	d904      	bls.n	800f376 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x2e>
          inbuffer[k-1]=inbuffer[k];
 800f36c:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f370:	f802 0c02 	strb.w	r0, [r2, #-2]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f374:	e7f7      	b.n	800f366 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x1e>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 800f376:	194a      	adds	r2, r1, r5
 800f378:	2000      	movs	r0, #0
 800f37a:	7150      	strb	r0, [r2, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 800f37c:	1d4a      	adds	r2, r1, #5
 800f37e:	60a2      	str	r2, [r4, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800f380:	58c8      	ldr	r0, [r1, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f382:	1d1a      	adds	r2, r3, #4
      }
      inbuffer[offset+length_topic_name-1]=0;
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800f384:	9002      	str	r0, [sp, #8]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f386:	9b02      	ldr	r3, [sp, #8]
 800f388:	f105 000a 	add.w	r0, r5, #10
 800f38c:	4413      	add	r3, r2
 800f38e:	4408      	add	r0, r1
 800f390:	1a45      	subs	r5, r0, r1
 800f392:	42ab      	cmp	r3, r5
 800f394:	d904      	bls.n	800f3a0 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x58>
          inbuffer[k-1]=inbuffer[k];
 800f396:	f810 5b01 	ldrb.w	r5, [r0], #1
 800f39a:	f800 5c02 	strb.w	r5, [r0, #-2]
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f39e:	e7f7      	b.n	800f390 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x48>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
 800f3a0:	3a01      	subs	r2, #1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800f3a2:	18c8      	adds	r0, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 800f3a4:	440a      	add	r2, r1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800f3a6:	2500      	movs	r5, #0
 800f3a8:	f800 5c01 	strb.w	r5, [r0, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 800f3ac:	60e2      	str	r2, [r4, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800f3ae:	6800      	ldr	r0, [r0, #0]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f3b0:	3304      	adds	r3, #4
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800f3b2:	9003      	str	r0, [sp, #12]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f3b4:	9803      	ldr	r0, [sp, #12]
 800f3b6:	18ca      	adds	r2, r1, r3
 800f3b8:	4418      	add	r0, r3
 800f3ba:	1a55      	subs	r5, r2, r1
 800f3bc:	42a8      	cmp	r0, r5
 800f3be:	d904      	bls.n	800f3ca <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x82>
          inbuffer[k-1]=inbuffer[k];
 800f3c0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f3c4:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f3c8:	e7f7      	b.n	800f3ba <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x72>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
      this->md5sum = (char *)(inbuffer + offset-1);
 800f3ca:	3b01      	subs	r3, #1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f3cc:	180d      	adds	r5, r1, r0
      this->md5sum = (char *)(inbuffer + offset-1);
 800f3ce:	440b      	add	r3, r1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	f805 2c01 	strb.w	r2, [r5, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 800f3d6:	6123      	str	r3, [r4, #16]
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800f3d8:	78ab      	ldrb	r3, [r5, #2]
 800f3da:	786a      	ldrb	r2, [r5, #1]
 800f3dc:	041b      	lsls	r3, r3, #16
 800f3de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f3e2:	5c0a      	ldrb	r2, [r1, r0]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800f3e4:	3004      	adds	r0, #4
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	78ea      	ldrb	r2, [r5, #3]
 800f3ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f3ee:	6163      	str	r3, [r4, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800f3f0:	b005      	add	sp, #20
 800f3f2:	bd30      	pop	{r4, r5, pc}

0800f3f4 <rosserial_msgs::Log::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f3f4:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f3f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f3f8:	f813 2b01 	ldrb.w	r2, [r3], #1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f3fc:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f3fe:	7102      	strb	r2, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 800f400:	6818      	ldr	r0, [r3, #0]
 800f402:	1d4a      	adds	r2, r1, #5
 800f404:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800f406:	9b01      	ldr	r3, [sp, #4]
 800f408:	1d58      	adds	r0, r3, #5
 800f40a:	1a55      	subs	r5, r2, r1
 800f40c:	42a8      	cmp	r0, r5
 800f40e:	d904      	bls.n	800f41a <rosserial_msgs::Log::deserialize(unsigned char*)+0x26>
          inbuffer[k-1]=inbuffer[k];
 800f410:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f414:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800f418:	e7f7      	b.n	800f40a <rosserial_msgs::Log::deserialize(unsigned char*)+0x16>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 800f41a:	440b      	add	r3, r1
 800f41c:	2200      	movs	r2, #0
      this->msg = (char *)(inbuffer + offset-1);
 800f41e:	3104      	adds	r1, #4
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 800f420:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 800f422:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 800f424:	b003      	add	sp, #12
 800f426:	bd30      	pop	{r4, r5, pc}

0800f428 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>:
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
 800f42a:	780d      	ldrb	r5, [r1, #0]
      if(ints_lengthT > ints_length)
 800f42c:	7903      	ldrb	r3, [r0, #4]
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f42e:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 800f430:	42ab      	cmp	r3, r5
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f432:	460e      	mov	r6, r1
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 800f434:	d204      	bcs.n	800f440 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800f436:	00a9      	lsls	r1, r5, #2
 800f438:	68c0      	ldr	r0, [r0, #12]
 800f43a:	f004 f8bd 	bl	80135b8 <realloc>
 800f43e:	60e0      	str	r0, [r4, #12]
      offset += 3;
      ints_length = ints_lengthT;
 800f440:	7125      	strb	r5, [r4, #4]
 800f442:	1d32      	adds	r2, r6, #4
 800f444:	2100      	movs	r1, #0
      for( uint8_t i = 0; i < ints_length; i++){
 800f446:	7923      	ldrb	r3, [r4, #4]
 800f448:	1c4f      	adds	r7, r1, #1
 800f44a:	b2c9      	uxtb	r1, r1
 800f44c:	428b      	cmp	r3, r1
 800f44e:	eba2 0506 	sub.w	r5, r2, r6
 800f452:	f102 0204 	add.w	r2, r2, #4
 800f456:	d914      	bls.n	800f482 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x5a>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
 800f458:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 800f45c:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800f460:	041b      	lsls	r3, r3, #16
 800f462:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800f466:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800f46a:	4303      	orrs	r3, r0
 800f46c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800f470:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f474:	60a3      	str	r3, [r4, #8]
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800f476:	68a0      	ldr	r0, [r4, #8]
 800f478:	68e3      	ldr	r3, [r4, #12]
 800f47a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 800f47e:	4639      	mov	r1, r7
 800f480:	e7e1      	b.n	800f446 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x1e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 800f482:	5d77      	ldrb	r7, [r6, r5]
      if(floats_lengthT > floats_length)
 800f484:	7c23      	ldrb	r3, [r4, #16]
 800f486:	42bb      	cmp	r3, r7
 800f488:	d204      	bcs.n	800f494 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x6c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800f48a:	00b9      	lsls	r1, r7, #2
 800f48c:	69a0      	ldr	r0, [r4, #24]
 800f48e:	f004 f893 	bl	80135b8 <realloc>
 800f492:	61a0      	str	r0, [r4, #24]
 800f494:	1d2b      	adds	r3, r5, #4
      offset += 3;
      floats_length = floats_lengthT;
 800f496:	7427      	strb	r7, [r4, #16]
 800f498:	4433      	add	r3, r6
 800f49a:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < floats_length; i++){
 800f49c:	7c21      	ldrb	r1, [r4, #16]
 800f49e:	1c57      	adds	r7, r2, #1
 800f4a0:	b2d2      	uxtb	r2, r2
 800f4a2:	4291      	cmp	r1, r2
 800f4a4:	eba3 0506 	sub.w	r5, r3, r6
 800f4a8:	f103 0304 	add.w	r3, r3, #4
 800f4ac:	d914      	bls.n	800f4d8 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xb0>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f4ae:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800f4b2:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800f4b6:	0409      	lsls	r1, r1, #16
 800f4b8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800f4bc:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800f4c0:	4301      	orrs	r1, r0
 800f4c2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
      this->st_floats = u_st_floats.real;
 800f4c6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800f4ca:	6161      	str	r1, [r4, #20]
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800f4cc:	6960      	ldr	r0, [r4, #20]
 800f4ce:	69a1      	ldr	r1, [r4, #24]
 800f4d0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      uint8_t floats_lengthT = *(inbuffer + offset++);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      offset += 3;
      floats_length = floats_lengthT;
      for( uint8_t i = 0; i < floats_length; i++){
 800f4d4:	463a      	mov	r2, r7
 800f4d6:	e7e1      	b.n	800f49c <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x74>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 800f4d8:	5d77      	ldrb	r7, [r6, r5]
      if(strings_lengthT > strings_length)
 800f4da:	7f23      	ldrb	r3, [r4, #28]
 800f4dc:	42bb      	cmp	r3, r7
 800f4de:	d204      	bcs.n	800f4ea <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xc2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800f4e0:	00b9      	lsls	r1, r7, #2
 800f4e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f4e4:	f004 f868 	bl	80135b8 <realloc>
 800f4e8:	6260      	str	r0, [r4, #36]	; 0x24
      offset += 3;
 800f4ea:	1d2b      	adds	r3, r5, #4
      strings_length = strings_lengthT;
 800f4ec:	2500      	movs	r5, #0
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f4ee:	46ae      	mov	lr, r5
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
 800f4f0:	7727      	strb	r7, [r4, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 800f4f2:	7f22      	ldrb	r2, [r4, #28]
 800f4f4:	b2ef      	uxtb	r7, r5
 800f4f6:	42ba      	cmp	r2, r7
 800f4f8:	d919      	bls.n	800f52e <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x106>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800f4fa:	58f0      	ldr	r0, [r6, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f4fc:	1d1a      	adds	r2, r3, #4
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800f4fe:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f500:	9b01      	ldr	r3, [sp, #4]
 800f502:	18b1      	adds	r1, r6, r2
 800f504:	4413      	add	r3, r2
 800f506:	1b88      	subs	r0, r1, r6
 800f508:	4283      	cmp	r3, r0
 800f50a:	d904      	bls.n	800f516 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xee>
          inbuffer[k-1]=inbuffer[k];
 800f50c:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f510:	f801 0c02 	strb.w	r0, [r1, #-2]
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f514:	e7f7      	b.n	800f506 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xde>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
 800f516:	3a01      	subs	r2, #1
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f518:	18f1      	adds	r1, r6, r3
      this->st_strings = (char *)(inbuffer + offset-1);
 800f51a:	4432      	add	r2, r6
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f51c:	f801 ec01 	strb.w	lr, [r1, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 800f520:	6222      	str	r2, [r4, #32]
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800f522:	6a21      	ldr	r1, [r4, #32]
 800f524:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f526:	3501      	adds	r5, #1
 800f528:	f842 1027 	str.w	r1, [r2, r7, lsl #2]
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
 800f52c:	e7e1      	b.n	800f4f2 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xca>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
 800f52e:	4618      	mov	r0, r3
 800f530:	b003      	add	sp, #12
 800f532:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f534:	b538      	push	{r3, r4, r5, lr}
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800f536:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f53a:	4605      	mov	r5, r0
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800f53c:	460a      	mov	r2, r1
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f53e:	4608      	mov	r0, r1
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
    if (exp != 0)
 800f540:	b10b      	cbz	r3, 800f546 <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x12>
    {
      exp += 1023 - 127;
 800f542:	f503 7360 	add.w	r3, r3, #896	; 0x380
    }

    int32_t sig = *val;
    *(outbuffer++) = 0;
 800f546:	2100      	movs	r1, #0
 800f548:	7029      	strb	r1, [r5, #0]
    *(outbuffer++) = 0;
 800f54a:	7069      	strb	r1, [r5, #1]
    *(outbuffer++) = 0;
 800f54c:	70a9      	strb	r1, [r5, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 800f54e:	0151      	lsls	r1, r2, #5
 800f550:	70e9      	strb	r1, [r5, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800f552:	10d1      	asrs	r1, r2, #3
 800f554:	7129      	strb	r1, [r5, #4]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800f556:	12d1      	asrs	r1, r2, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800f558:	f3c2 42c3 	ubfx	r2, r2, #19, #4
 800f55c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    *(outbuffer++) = 0;
    *(outbuffer++) = 0;
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
 800f560:	7169      	strb	r1, [r5, #5]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800f562:	71aa      	strb	r2, [r5, #6]
    *(outbuffer++) = (exp >> 4) & 0x7F;

    // Mark negative bit as necessary.
    if (f < 0)
 800f564:	2100      	movs	r1, #0
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800f566:	f3c3 1407 	ubfx	r4, r3, #4, #8

    // Mark negative bit as necessary.
    if (f < 0)
 800f56a:	f7f6 fb01 	bl	8005b70 <__aeabi_fcmplt>
 800f56e:	b908      	cbnz	r0, 800f574 <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x40>
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800f570:	71ec      	strb	r4, [r5, #7]
 800f572:	e002      	b.n	800f57a <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x46>

    // Mark negative bit as necessary.
    if (f < 0)
    {
      *(outbuffer - 1) |= 0x80;
 800f574:	f064 037f 	orn	r3, r4, #127	; 0x7f
 800f578:	71eb      	strb	r3, [r5, #7]
    }

    return 8;
  }
 800f57a:	2008      	movs	r0, #8
 800f57c:	bd38      	pop	{r3, r4, r5, pc}

0800f57e <roberto_msgs::MotorState::serialize(unsigned char*) const>:
      acceleration(0),
      mode(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f57e:	b570      	push	{r4, r5, r6, lr}
 800f580:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f582:	3004      	adds	r0, #4
      acceleration(0),
      mode(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f584:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f586:	f7ff fd71 	bl	800f06c <std_msgs::Header::serialize(unsigned char*) const>
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 800f58a:	69a9      	ldr	r1, [r5, #24]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f58c:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 800f58e:	1830      	adds	r0, r6, r0
 800f590:	f7ff ffd0 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f594:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_velocity);
 800f596:	69e9      	ldr	r1, [r5, #28]
 800f598:	1930      	adds	r0, r6, r4
 800f59a:	f7ff ffcb 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f59e:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 800f5a0:	6a29      	ldr	r1, [r5, #32]
 800f5a2:	1930      	adds	r0, r6, r4
 800f5a4:	f7ff ffc6 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f5a8:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->acceleration);
 800f5aa:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800f5ac:	1930      	adds	r0, r6, r4
 800f5ae:	f7ff ffc1 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
 800f5b2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800f5b6:	4420      	add	r0, r4
 800f5b8:	5433      	strb	r3, [r6, r0]
      offset += sizeof(this->mode);
      return offset;
    }
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	bd70      	pop	{r4, r5, r6, pc}

0800f5be <geometry_msgs::Vector3::serialize(unsigned char*) const>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f5be:	b570      	push	{r4, r5, r6, lr}
 800f5c0:	460d      	mov	r5, r1
 800f5c2:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f5c4:	6841      	ldr	r1, [r0, #4]
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f7ff ffb4 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f5cc:	68b1      	ldr	r1, [r6, #8]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f5ce:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f5d0:	1828      	adds	r0, r5, r0
 800f5d2:	f7ff ffaf 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f5d6:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800f5d8:	68f1      	ldr	r1, [r6, #12]
 800f5da:	1928      	adds	r0, r5, r4
 800f5dc:	f7ff ffaa 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      return offset;
    }
 800f5e0:	4420      	add	r0, r4
 800f5e2:	bd70      	pop	{r4, r5, r6, pc}

0800f5e4 <geometry_msgs::Twist::serialize(unsigned char*) const>:
      linear(),
      angular()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f5e4:	b570      	push	{r4, r5, r6, lr}
 800f5e6:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->linear.serialize(outbuffer + offset);
 800f5e8:	3004      	adds	r0, #4
      linear(),
      angular()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f5ea:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->linear.serialize(outbuffer + offset);
 800f5ec:	f7ff ffe7 	bl	800f5be <geometry_msgs::Vector3::serialize(unsigned char*) const>
 800f5f0:	4604      	mov	r4, r0
      offset += this->angular.serialize(outbuffer + offset);
 800f5f2:	1831      	adds	r1, r6, r0
 800f5f4:	f105 0014 	add.w	r0, r5, #20
 800f5f8:	f7ff ffe1 	bl	800f5be <geometry_msgs::Vector3::serialize(unsigned char*) const>
      return offset;
    }
 800f5fc:	4420      	add	r0, r4
 800f5fe:	bd70      	pop	{r4, r5, r6, pc}

0800f600 <geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const>:
      twist(),
      covariance()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f602:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->twist.serialize(outbuffer + offset);
 800f604:	3004      	adds	r0, #4
      twist(),
      covariance()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f606:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->twist.serialize(outbuffer + offset);
 800f608:	f7ff ffec 	bl	800f5e4 <geometry_msgs::Twist::serialize(unsigned char*) const>
 800f60c:	4605      	mov	r5, r0
 800f60e:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800f612:	34b4      	adds	r4, #180	; 0xb4
      for( uint8_t i = 0; i < 36; i++){
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800f614:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800f618:	1978      	adds	r0, r7, r5
 800f61a:	f7ff ff8b 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->twist.serialize(outbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f61e:	42a6      	cmp	r6, r4
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800f620:	4405      	add	r5, r0

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->twist.serialize(outbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f622:	d1f7      	bne.n	800f614 <geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const+0x14>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
      }
      return offset;
    }
 800f624:	4628      	mov	r0, r5
 800f626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f628 <geometry_msgs::Quaternion::serialize(unsigned char*) const>:
      z(0),
      w(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	460d      	mov	r5, r1
 800f62c:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f62e:	6841      	ldr	r1, [r0, #4]
 800f630:	4628      	mov	r0, r5
 800f632:	f7ff ff7f 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f636:	68b1      	ldr	r1, [r6, #8]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f638:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f63a:	1828      	adds	r0, r5, r0
 800f63c:	f7ff ff7a 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f640:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800f642:	68f1      	ldr	r1, [r6, #12]
 800f644:	1928      	adds	r0, r5, r4
 800f646:	f7ff ff75 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f64a:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 800f64c:	6931      	ldr	r1, [r6, #16]
 800f64e:	1928      	adds	r0, r5, r4
 800f650:	f7ff ff70 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      return offset;
    }
 800f654:	4420      	add	r0, r4
 800f656:	bd70      	pop	{r4, r5, r6, pc}

0800f658 <geometry_msgs::Transform::serialize(unsigned char*) const>:
      translation(),
      rotation()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f658:	b570      	push	{r4, r5, r6, lr}
 800f65a:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->translation.serialize(outbuffer + offset);
 800f65c:	3004      	adds	r0, #4
      translation(),
      rotation()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f65e:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->translation.serialize(outbuffer + offset);
 800f660:	f7ff ffad 	bl	800f5be <geometry_msgs::Vector3::serialize(unsigned char*) const>
 800f664:	4604      	mov	r4, r0
      offset += this->rotation.serialize(outbuffer + offset);
 800f666:	1831      	adds	r1, r6, r0
 800f668:	f105 0014 	add.w	r0, r5, #20
 800f66c:	f7ff ffdc 	bl	800f628 <geometry_msgs::Quaternion::serialize(unsigned char*) const>
      return offset;
    }
 800f670:	4420      	add	r0, r4
 800f672:	bd70      	pop	{r4, r5, r6, pc}

0800f674 <geometry_msgs::TransformStamped::serialize(unsigned char*) const>:
      child_frame_id(""),
      transform()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f674:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f678:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f67a:	3004      	adds	r0, #4
      child_frame_id(""),
      transform()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f67c:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f67e:	f7ff fcf5 	bl	800f06c <std_msgs::Header::serialize(unsigned char*) const>
 800f682:	4605      	mov	r5, r0
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800f684:	69b0      	ldr	r0, [r6, #24]
 800f686:	f7ff fbb5 	bl	800edf4 <strlen>
 800f68a:	4680      	mov	r8, r0
 800f68c:	ab02      	add	r3, sp, #8
 800f68e:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
 800f692:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f694:	1d2c      	adds	r4, r5, #4
    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
 800f696:	5178      	str	r0, [r7, r5]
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f698:	4642      	mov	r2, r8
 800f69a:	69b1      	ldr	r1, [r6, #24]
 800f69c:	1938      	adds	r0, r7, r4
      offset += length_child_frame_id;
 800f69e:	4444      	add	r4, r8
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f6a0:	f003 fedf 	bl	8013462 <memcpy>
      offset += length_child_frame_id;
      offset += this->transform.serialize(outbuffer + offset);
 800f6a4:	1939      	adds	r1, r7, r4
 800f6a6:	f106 001c 	add.w	r0, r6, #28
 800f6aa:	f7ff ffd5 	bl	800f658 <geometry_msgs::Transform::serialize(unsigned char*) const>
      return offset;
    }
 800f6ae:	4420      	add	r0, r4
 800f6b0:	b002      	add	sp, #8
 800f6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6b6 <geometry_msgs::Point::serialize(unsigned char*) const>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6b6:	b570      	push	{r4, r5, r6, lr}
 800f6b8:	460d      	mov	r5, r1
 800f6ba:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f6bc:	6841      	ldr	r1, [r0, #4]
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f7ff ff38 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f6c4:	68b1      	ldr	r1, [r6, #8]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f6c6:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f6c8:	1828      	adds	r0, r5, r0
 800f6ca:	f7ff ff33 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f6ce:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800f6d0:	68f1      	ldr	r1, [r6, #12]
 800f6d2:	1928      	adds	r0, r5, r4
 800f6d4:	f7ff ff2e 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      return offset;
    }
 800f6d8:	4420      	add	r0, r4
 800f6da:	bd70      	pop	{r4, r5, r6, pc}

0800f6dc <geometry_msgs::Pose::serialize(unsigned char*) const>:
      position(),
      orientation()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6dc:	b570      	push	{r4, r5, r6, lr}
 800f6de:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->position.serialize(outbuffer + offset);
 800f6e0:	3004      	adds	r0, #4
      position(),
      orientation()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6e2:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->position.serialize(outbuffer + offset);
 800f6e4:	f7ff ffe7 	bl	800f6b6 <geometry_msgs::Point::serialize(unsigned char*) const>
 800f6e8:	4604      	mov	r4, r0
      offset += this->orientation.serialize(outbuffer + offset);
 800f6ea:	1831      	adds	r1, r6, r0
 800f6ec:	f105 0014 	add.w	r0, r5, #20
 800f6f0:	f7ff ff9a 	bl	800f628 <geometry_msgs::Quaternion::serialize(unsigned char*) const>
      return offset;
    }
 800f6f4:	4420      	add	r0, r4
 800f6f6:	bd70      	pop	{r4, r5, r6, pc}

0800f6f8 <geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const>:
      pose(),
      covariance()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fa:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->pose.serialize(outbuffer + offset);
 800f6fc:	3004      	adds	r0, #4
      pose(),
      covariance()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6fe:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->pose.serialize(outbuffer + offset);
 800f700:	f7ff ffec 	bl	800f6dc <geometry_msgs::Pose::serialize(unsigned char*) const>
 800f704:	4605      	mov	r5, r0
 800f706:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800f70a:	34b8      	adds	r4, #184	; 0xb8
      for( uint8_t i = 0; i < 36; i++){
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800f70c:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800f710:	1978      	adds	r0, r7, r5
 800f712:	f7ff ff0f 	bl	800f534 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->pose.serialize(outbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f716:	42a6      	cmp	r6, r4
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800f718:	4405      	add	r5, r0

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->pose.serialize(outbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f71a:	d1f7      	bne.n	800f70c <geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const+0x14>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
      }
      return offset;
    }
 800f71c:	4628      	mov	r0, r5
 800f71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f720 <nav_msgs::Odometry::serialize(unsigned char*) const>:
      pose(),
      twist()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f724:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f726:	3004      	adds	r0, #4
      pose(),
      twist()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f728:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f72a:	f7ff fc9f 	bl	800f06c <std_msgs::Header::serialize(unsigned char*) const>
 800f72e:	4605      	mov	r5, r0
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800f730:	69b0      	ldr	r0, [r6, #24]
 800f732:	f7ff fb5f 	bl	800edf4 <strlen>
 800f736:	4680      	mov	r8, r0
 800f738:	ab02      	add	r3, sp, #8
 800f73a:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
 800f73e:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f740:	1d2c      	adds	r4, r5, #4
    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
 800f742:	5178      	str	r0, [r7, r5]
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f744:	4642      	mov	r2, r8
 800f746:	69b1      	ldr	r1, [r6, #24]
 800f748:	1938      	adds	r0, r7, r4
      offset += length_child_frame_id;
 800f74a:	4444      	add	r4, r8
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f74c:	f003 fe89 	bl	8013462 <memcpy>
      offset += length_child_frame_id;
      offset += this->pose.serialize(outbuffer + offset);
 800f750:	1939      	adds	r1, r7, r4
 800f752:	f106 001c 	add.w	r0, r6, #28
 800f756:	f7ff ffcf 	bl	800f6f8 <geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const>
 800f75a:	4404      	add	r4, r0
      offset += this->twist.serialize(outbuffer + offset);
 800f75c:	1939      	adds	r1, r7, r4
 800f75e:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
 800f762:	f7ff ff4d 	bl	800f600 <geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const>
      return offset;
    }
 800f766:	4420      	add	r0, r4
 800f768:	b002      	add	sp, #8
 800f76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800f76e:	b530      	push	{r4, r5, lr}
  {
    uint32_t* val = (uint32_t*)f;
    inbuffer += 3;

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 800f770:	78c3      	ldrb	r3, [r0, #3]
 800f772:	095b      	lsrs	r3, r3, #5
 800f774:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 800f776:	7902      	ldrb	r2, [r0, #4]
 800f778:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f77c:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 800f77e:	7942      	ldrb	r2, [r0, #5]
 800f780:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 800f784:	600a      	str	r2, [r1, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 800f786:	7983      	ldrb	r3, [r0, #6]
 800f788:	04db      	lsls	r3, r3, #19
 800f78a:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 800f78e:	4313      	orrs	r3, r2
 800f790:	600b      	str	r3, [r1, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800f792:	79c4      	ldrb	r4, [r0, #7]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
 800f794:	7985      	ldrb	r5, [r0, #6]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800f796:	0124      	lsls	r4, r4, #4
 800f798:	f404 62fe 	and.w	r2, r4, #2032	; 0x7f0
    if (exp != 0)
 800f79c:	ea52 1215 	orrs.w	r2, r2, r5, lsr #4
    {
      *val |= ((exp) - 1023 + 127) << 23;
 800f7a0:	bf1e      	ittt	ne
 800f7a2:	f5a2 7260 	subne.w	r2, r2, #896	; 0x380
 800f7a6:	ea43 53c2 	orrne.w	r3, r3, r2, lsl #23
 800f7aa:	600b      	strne	r3, [r1, #0]
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800f7ac:	79c3      	ldrb	r3, [r0, #7]

    return 8;
  }
 800f7ae:	2008      	movs	r0, #8
    {
      *val |= ((exp) - 1023 + 127) << 23;
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800f7b0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800f7b4:	680b      	ldr	r3, [r1, #0]
 800f7b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f7ba:	600b      	str	r3, [r1, #0]

    return 8;
  }
 800f7bc:	bd30      	pop	{r4, r5, pc}

0800f7be <roberto_msgs::MotorState::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f7be:	b570      	push	{r4, r5, r6, lr}
 800f7c0:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f7c2:	3004      	adds	r0, #4
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
      offset += sizeof(this->mode);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f7c4:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f7c6:	f7ff fd7d 	bl	800f2c4 <std_msgs::Header::deserialize(unsigned char*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800f7ca:	f105 0118 	add.w	r1, r5, #24
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f7ce:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800f7d0:	1830      	adds	r0, r6, r0
 800f7d2:	f7ff ffcc 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f7d6:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
 800f7d8:	f105 011c 	add.w	r1, r5, #28
 800f7dc:	1930      	adds	r0, r6, r4
 800f7de:	f7ff ffc6 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f7e2:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 800f7e4:	f105 0120 	add.w	r1, r5, #32
 800f7e8:	1930      	adds	r0, r6, r4
 800f7ea:	f7ff ffc0 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f7ee:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
 800f7f0:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f7f4:	1930      	adds	r0, r6, r4
 800f7f6:	f7ff ffba 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 800f7fa:	4420      	add	r0, r4
 800f7fc:	5c33      	ldrb	r3, [r6, r0]
      offset += sizeof(this->mode);
     return offset;
    }
 800f7fe:	3001      	adds	r0, #1
      offset += this->header.deserialize(inbuffer + offset);
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 800f800:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
      offset += sizeof(this->mode);
     return offset;
    }
 800f804:	bd70      	pop	{r4, r5, r6, pc}

0800f806 <ros::Subscriber<roberto_msgs::MotorState>::callback(unsigned char*)>:
        endpoint_(endpoint)
      {
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 800f806:	b570      	push	{r4, r5, r6, lr}
 800f808:	4605      	mov	r5, r0
        msg.deserialize(data);
 800f80a:	f100 040c 	add.w	r4, r0, #12
 800f80e:	4620      	mov	r0, r4
 800f810:	f7ff ffd5 	bl	800f7be <roberto_msgs::MotorState::deserialize(unsigned char*)>
        this->cb_(msg);
 800f814:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f816:	4620      	mov	r0, r4
      }
 800f818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 800f81c:	4718      	bx	r3

0800f81e <geometry_msgs::Quaternion::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f81e:	b570      	push	{r4, r5, r6, lr}
 800f820:	460d      	mov	r5, r1
 800f822:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f824:	1d01      	adds	r1, r0, #4
 800f826:	4628      	mov	r0, r5
 800f828:	f7ff ffa1 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f82c:	f106 0108 	add.w	r1, r6, #8
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f830:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f832:	1828      	adds	r0, r5, r0
 800f834:	f7ff ff9b 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f838:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800f83a:	f106 010c 	add.w	r1, r6, #12
 800f83e:	1928      	adds	r0, r5, r4
 800f840:	f7ff ff95 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f844:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 800f846:	f106 0110 	add.w	r1, r6, #16
 800f84a:	1928      	adds	r0, r5, r4
 800f84c:	f7ff ff8f 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
     return offset;
    }
 800f850:	4420      	add	r0, r4
 800f852:	bd70      	pop	{r4, r5, r6, pc}

0800f854 <geometry_msgs::Vector3::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f854:	b570      	push	{r4, r5, r6, lr}
 800f856:	460d      	mov	r5, r1
 800f858:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f85a:	1d01      	adds	r1, r0, #4
 800f85c:	4628      	mov	r0, r5
 800f85e:	f7ff ff86 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f862:	f106 0108 	add.w	r1, r6, #8
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f866:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f868:	1828      	adds	r0, r5, r0
 800f86a:	f7ff ff80 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f86e:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800f870:	f106 010c 	add.w	r1, r6, #12
 800f874:	1928      	adds	r0, r5, r4
 800f876:	f7ff ff7a 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
     return offset;
    }
 800f87a:	4420      	add	r0, r4
 800f87c:	bd70      	pop	{r4, r5, r6, pc}

0800f87e <geometry_msgs::Transform::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f87e:	b570      	push	{r4, r5, r6, lr}
 800f880:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->translation.deserialize(inbuffer + offset);
 800f882:	3004      	adds	r0, #4
      offset += this->translation.serialize(outbuffer + offset);
      offset += this->rotation.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f884:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->translation.deserialize(inbuffer + offset);
 800f886:	f7ff ffe5 	bl	800f854 <geometry_msgs::Vector3::deserialize(unsigned char*)>
 800f88a:	4604      	mov	r4, r0
      offset += this->rotation.deserialize(inbuffer + offset);
 800f88c:	1831      	adds	r1, r6, r0
 800f88e:	f105 0014 	add.w	r0, r5, #20
 800f892:	f7ff ffc4 	bl	800f81e <geometry_msgs::Quaternion::deserialize(unsigned char*)>
     return offset;
    }
 800f896:	4420      	add	r0, r4
 800f898:	bd70      	pop	{r4, r5, r6, pc}

0800f89a <geometry_msgs::TransformStamped::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f89c:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f89e:	3004      	adds	r0, #4
      offset += length_child_frame_id;
      offset += this->transform.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f8a0:	460d      	mov	r5, r1
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f8a2:	f7ff fd0f 	bl	800f2c4 <std_msgs::Header::deserialize(unsigned char*)>
 800f8a6:	4603      	mov	r3, r0
      uint32_t length_child_frame_id;
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
 800f8a8:	5828      	ldr	r0, [r5, r0]
 800f8aa:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800f8ac:	9c01      	ldr	r4, [sp, #4]
 800f8ae:	1d18      	adds	r0, r3, #4
 800f8b0:	4404      	add	r4, r0
 800f8b2:	182b      	adds	r3, r5, r0
 800f8b4:	1b5a      	subs	r2, r3, r5
 800f8b6:	4294      	cmp	r4, r2
 800f8b8:	d904      	bls.n	800f8c4 <geometry_msgs::TransformStamped::deserialize(unsigned char*)+0x2a>
          inbuffer[k-1]=inbuffer[k];
 800f8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8be:	f803 2c02 	strb.w	r2, [r3, #-2]
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
      uint32_t length_child_frame_id;
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800f8c2:	e7f7      	b.n	800f8b4 <geometry_msgs::TransformStamped::deserialize(unsigned char*)+0x1a>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800f8c4:	3801      	subs	r0, #1
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800f8c6:	1929      	adds	r1, r5, r4
 800f8c8:	2300      	movs	r3, #0
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800f8ca:	4428      	add	r0, r5
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800f8cc:	f801 3c01 	strb.w	r3, [r1, #-1]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800f8d0:	61b0      	str	r0, [r6, #24]
      offset += length_child_frame_id;
      offset += this->transform.deserialize(inbuffer + offset);
 800f8d2:	f106 001c 	add.w	r0, r6, #28
 800f8d6:	f7ff ffd2 	bl	800f87e <geometry_msgs::Transform::deserialize(unsigned char*)>
     return offset;
    }
 800f8da:	4420      	add	r0, r4
 800f8dc:	b002      	add	sp, #8
 800f8de:	bd70      	pop	{r4, r5, r6, pc}

0800f8e0 <tf::tfMessage::deserialize(unsigned char*)>:
      offset += this->transforms[i].serialize(outbuffer + offset);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    {
      int offset = 0;
      uint8_t transforms_lengthT = *(inbuffer + offset++);
 800f8e4:	780d      	ldrb	r5, [r1, #0]
      if(transforms_lengthT > transforms_length)
 800f8e6:	7903      	ldrb	r3, [r0, #4]
      offset += this->transforms[i].serialize(outbuffer + offset);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f8e8:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
 800f8ea:	42ab      	cmp	r3, r5
      offset += this->transforms[i].serialize(outbuffer + offset);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f8ec:	4688      	mov	r8, r1
    {
      int offset = 0;
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
 800f8ee:	d205      	bcs.n	800f8fc <tf::tfMessage::deserialize(unsigned char*)+0x1c>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 800f8f0:	2144      	movs	r1, #68	; 0x44
 800f8f2:	4369      	muls	r1, r5
 800f8f4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800f8f6:	f003 fe5f 	bl	80135b8 <realloc>
 800f8fa:	64e0      	str	r0, [r4, #76]	; 0x4c
      offset += 3;
      transforms_length = transforms_lengthT;
 800f8fc:	7125      	strb	r5, [r4, #4]
 800f8fe:	2000      	movs	r0, #0
    {
      int offset = 0;
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
      offset += 3;
 800f900:	2604      	movs	r6, #4
      transforms_length = transforms_lengthT;
      for( uint8_t i = 0; i < transforms_length; i++){
      offset += this->st_transforms.deserialize(inbuffer + offset);
 800f902:	f104 0708 	add.w	r7, r4, #8
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 800f906:	f04f 0a44 	mov.w	sl, #68	; 0x44
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
      offset += 3;
      transforms_length = transforms_lengthT;
      for( uint8_t i = 0; i < transforms_length; i++){
 800f90a:	7923      	ldrb	r3, [r4, #4]
 800f90c:	b2c5      	uxtb	r5, r0
 800f90e:	42ab      	cmp	r3, r5
 800f910:	f100 0901 	add.w	r9, r0, #1
 800f914:	d90e      	bls.n	800f934 <tf::tfMessage::deserialize(unsigned char*)+0x54>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 800f916:	eb08 0106 	add.w	r1, r8, r6
 800f91a:	4638      	mov	r0, r7
 800f91c:	f7ff ffbd 	bl	800f89a <geometry_msgs::TransformStamped::deserialize(unsigned char*)>
 800f920:	4406      	add	r6, r0
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 800f922:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800f924:	2244      	movs	r2, #68	; 0x44
 800f926:	4639      	mov	r1, r7
 800f928:	fb0a 0005 	mla	r0, sl, r5, r0
 800f92c:	f003 fd99 	bl	8013462 <memcpy>
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
      offset += 3;
      transforms_length = transforms_lengthT;
      for( uint8_t i = 0; i < transforms_length; i++){
 800f930:	4648      	mov	r0, r9
 800f932:	e7ea      	b.n	800f90a <tf::tfMessage::deserialize(unsigned char*)+0x2a>
      offset += this->st_transforms.deserialize(inbuffer + offset);
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
      }
     return offset;
    }
 800f934:	4630      	mov	r0, r6
 800f936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f93a <geometry_msgs::Twist::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f93a:	b570      	push	{r4, r5, r6, lr}
 800f93c:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->linear.deserialize(inbuffer + offset);
 800f93e:	3004      	adds	r0, #4
      offset += this->linear.serialize(outbuffer + offset);
      offset += this->angular.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f940:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->linear.deserialize(inbuffer + offset);
 800f942:	f7ff ff87 	bl	800f854 <geometry_msgs::Vector3::deserialize(unsigned char*)>
 800f946:	4604      	mov	r4, r0
      offset += this->angular.deserialize(inbuffer + offset);
 800f948:	1831      	adds	r1, r6, r0
 800f94a:	f105 0014 	add.w	r0, r5, #20
 800f94e:	f7ff ff81 	bl	800f854 <geometry_msgs::Vector3::deserialize(unsigned char*)>
     return offset;
    }
 800f952:	4420      	add	r0, r4
 800f954:	bd70      	pop	{r4, r5, r6, pc}

0800f956 <geometry_msgs::Point::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f956:	b570      	push	{r4, r5, r6, lr}
 800f958:	460d      	mov	r5, r1
 800f95a:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f95c:	1d01      	adds	r1, r0, #4
 800f95e:	4628      	mov	r0, r5
 800f960:	f7ff ff05 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f964:	f106 0108 	add.w	r1, r6, #8
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f968:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f96a:	1828      	adds	r0, r5, r0
 800f96c:	f7ff feff 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f970:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800f972:	f106 010c 	add.w	r1, r6, #12
 800f976:	1928      	adds	r0, r5, r4
 800f978:	f7ff fef9 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
     return offset;
    }
 800f97c:	4420      	add	r0, r4
 800f97e:	bd70      	pop	{r4, r5, r6, pc}

0800f980 <geometry_msgs::Pose::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->position.deserialize(inbuffer + offset);
 800f984:	3004      	adds	r0, #4
      offset += this->position.serialize(outbuffer + offset);
      offset += this->orientation.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f986:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->position.deserialize(inbuffer + offset);
 800f988:	f7ff ffe5 	bl	800f956 <geometry_msgs::Point::deserialize(unsigned char*)>
 800f98c:	4604      	mov	r4, r0
      offset += this->orientation.deserialize(inbuffer + offset);
 800f98e:	1831      	adds	r1, r6, r0
 800f990:	f105 0014 	add.w	r0, r5, #20
 800f994:	f7ff ff43 	bl	800f81e <geometry_msgs::Quaternion::deserialize(unsigned char*)>
     return offset;
    }
 800f998:	4420      	add	r0, r4
 800f99a:	bd70      	pop	{r4, r5, r6, pc}

0800f99c <geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99e:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->pose.deserialize(inbuffer + offset);
 800f9a0:	3004      	adds	r0, #4
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f9a2:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->pose.deserialize(inbuffer + offset);
 800f9a4:	f7ff ffec 	bl	800f980 <geometry_msgs::Pose::deserialize(unsigned char*)>
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 800f9ae:	34bc      	adds	r4, #188	; 0xbc
      for( uint8_t i = 0; i < 36; i++){
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800f9b0:	4631      	mov	r1, r6
 800f9b2:	1978      	adds	r0, r7, r5
 800f9b4:	f7ff fedb 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f9b8:	3604      	adds	r6, #4

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->pose.deserialize(inbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f9ba:	42a6      	cmp	r6, r4
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800f9bc:	4405      	add	r5, r0

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->pose.deserialize(inbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f9be:	d1f7      	bne.n	800f9b0 <geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)+0x14>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
      }
     return offset;
    }
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f9c4 <geometry_msgs::TwistWithCovariance::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c6:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->twist.deserialize(inbuffer + offset);
 800f9c8:	3004      	adds	r0, #4
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f9ca:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->twist.deserialize(inbuffer + offset);
 800f9cc:	f7ff ffb5 	bl	800f93a <geometry_msgs::Twist::deserialize(unsigned char*)>
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800f9d6:	34b8      	adds	r4, #184	; 0xb8
      for( uint8_t i = 0; i < 36; i++){
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800f9d8:	4631      	mov	r1, r6
 800f9da:	1978      	adds	r0, r7, r5
 800f9dc:	f7ff fec7 	bl	800f76e <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f9e0:	3604      	adds	r6, #4

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->twist.deserialize(inbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f9e2:	42a6      	cmp	r6, r4
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800f9e4:	4405      	add	r5, r0

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->twist.deserialize(inbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f9e6:	d1f7      	bne.n	800f9d8 <geometry_msgs::TwistWithCovariance::deserialize(unsigned char*)+0x14>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
      }
     return offset;
    }
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f9ec <nav_msgs::Odometry::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f9ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9ee:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f9f0:	3004      	adds	r0, #4
      offset += this->pose.serialize(outbuffer + offset);
      offset += this->twist.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f9f2:	460d      	mov	r5, r1
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f9f4:	f7ff fc66 	bl	800f2c4 <std_msgs::Header::deserialize(unsigned char*)>
 800f9f8:	4603      	mov	r3, r0
      uint32_t length_child_frame_id;
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
 800f9fa:	5828      	ldr	r0, [r5, r0]
 800f9fc:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800f9fe:	9c01      	ldr	r4, [sp, #4]
 800fa00:	1d18      	adds	r0, r3, #4
 800fa02:	4404      	add	r4, r0
 800fa04:	182b      	adds	r3, r5, r0
 800fa06:	1b5a      	subs	r2, r3, r5
 800fa08:	4294      	cmp	r4, r2
 800fa0a:	d904      	bls.n	800fa16 <nav_msgs::Odometry::deserialize(unsigned char*)+0x2a>
          inbuffer[k-1]=inbuffer[k];
 800fa0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa10:	f803 2c02 	strb.w	r2, [r3, #-2]
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
      uint32_t length_child_frame_id;
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800fa14:	e7f7      	b.n	800fa06 <nav_msgs::Odometry::deserialize(unsigned char*)+0x1a>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800fa16:	3801      	subs	r0, #1
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800fa18:	1929      	adds	r1, r5, r4
 800fa1a:	2300      	movs	r3, #0
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800fa1c:	4428      	add	r0, r5
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800fa1e:	f801 3c01 	strb.w	r3, [r1, #-1]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800fa22:	61b0      	str	r0, [r6, #24]
      offset += length_child_frame_id;
      offset += this->pose.deserialize(inbuffer + offset);
 800fa24:	f106 001c 	add.w	r0, r6, #28
 800fa28:	f7ff ffb8 	bl	800f99c <geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)>
 800fa2c:	4404      	add	r4, r0
      offset += this->twist.deserialize(inbuffer + offset);
 800fa2e:	1929      	adds	r1, r5, r4
 800fa30:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
 800fa34:	f7ff ffc6 	bl	800f9c4 <geometry_msgs::TwistWithCovariance::deserialize(unsigned char*)>
     return offset;
    }
 800fa38:	4420      	add	r0, r4
 800fa3a:	b002      	add	sp, #8
 800fa3c:	bd70      	pop	{r4, r5, r6, pc}

0800fa3e <ros::Publisher::publish(ros::Msg const*)>:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 800fa3e:	68c3      	ldr	r3, [r0, #12]
 800fa40:	b410      	push	{r4}
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	6814      	ldr	r4, [r2, #0]
 800fa46:	460a      	mov	r2, r1
 800fa48:	6881      	ldr	r1, [r0, #8]
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	4623      	mov	r3, r4
 800fa4e:	bc10      	pop	{r4}
 800fa50:	4718      	bx	r3
	...

0800fa54 <ArduinoHardware::init()>:
      this->baud_= baud;
    }
  
    int getBaud(){return baud_;}

    void init(){
 800fa54:	b570      	push	{r4, r5, r6, lr}
 800fa56:	4604      	mov	r4, r0
 800fa58:	b086      	sub	sp, #24
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fa5a:	4d21      	ldr	r5, [pc, #132]	; (800fae0 <ArduinoHardware::init()+0x8c>)
      /* Bit configuration structure for GPIOA PIN9 and PIN10 */
      GPIO_InitTypeDef gpioa_init_struct;

      /* Enalbe clock for USART1, AFIO and GPIOA */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | 
                           RCC_APB2Periph_GPIOA, ENABLE);
 800fa5c:	2101      	movs	r1, #1
 800fa5e:	f244 0005 	movw	r0, #16389	; 0x4005
 800fa62:	f7f3 f843 	bl	8002aec <RCC_APB2PeriphClockCmd>
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 800fa66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa6a:	f8ad 3004 	strh.w	r3, [sp, #4]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800fa6e:	2603      	movs	r6, #3
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800fa70:	2318      	movs	r3, #24
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fa72:	a901      	add	r1, sp, #4
 800fa74:	4628      	mov	r0, r5
                           RCC_APB2Periph_GPIOA, ENABLE);
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800fa76:	f88d 3007 	strb.w	r3, [sp, #7]
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | 
                           RCC_APB2Periph_GPIOA, ENABLE);
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800fa7a:	f88d 6006 	strb.w	r6, [sp, #6]
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fa7e:	f7f2 fbd6 	bl	800222e <GPIO_Init>
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 800fa82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa86:	f8ad 3004 	strh.w	r3, [sp, #4]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800fa8a:	2304      	movs	r3, #4
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fa8c:	eb0d 0103 	add.w	r1, sp, r3
 800fa90:	4628      	mov	r0, r5
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800fa92:	f88d 3007 	strb.w	r3, [sp, #7]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800fa96:	f88d 6006 	strb.w	r6, [sp, #6]
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fa9a:	f7f2 fbc8 	bl	800222e <GPIO_Init>

      /* Enable USART1 */
      USART_Cmd(iostream, ENABLE);  
 800fa9e:	6820      	ldr	r0, [r4, #0]
 800faa0:	2101      	movs	r1, #1
 800faa2:	f7f3 facc 	bl	800303e <USART_Cmd>
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
 800faa6:	6863      	ldr	r3, [r4, #4]
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800faa8:	220c      	movs	r2, #12
      /* Enable USART1 */
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
 800faaa:	9302      	str	r3, [sp, #8]
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800faac:	a902      	add	r1, sp, #8
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 800faae:	2300      	movs	r3, #0
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800fab0:	6820      	ldr	r0, [r4, #0]
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 800fab2:	f8ad 300c 	strh.w	r3, [sp, #12]
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
 800fab6:	f8ad 300e 	strh.w	r3, [sp, #14]
      usart1_init_struct.USART_Parity = USART_Parity_No ;
 800faba:	f8ad 3010 	strh.w	r3, [sp, #16]
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800fabe:	f8ad 3014 	strh.w	r3, [sp, #20]
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800fac2:	f8ad 2012 	strh.w	r2, [sp, #18]
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800fac6:	f7f3 fa45 	bl	8002f54 <USART_Init>
      /* Enable RXNE interrupt */
      USART_ITConfig(iostream, USART_IT_RXNE, ENABLE);
 800faca:	2201      	movs	r2, #1
 800facc:	f240 5125 	movw	r1, #1317	; 0x525
 800fad0:	6820      	ldr	r0, [r4, #0]
 800fad2:	f7f3 fac0 	bl	8003056 <USART_ITConfig>
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800fad6:	4b03      	ldr	r3, [pc, #12]	; (800fae4 <ArduinoHardware::init()+0x90>)
 800fad8:	2220      	movs	r2, #32
 800fada:	605a      	str	r2, [r3, #4]
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }
 800fadc:	b006      	add	sp, #24
 800fade:	bd70      	pop	{r4, r5, r6, pc}
 800fae0:	40010800 	.word	0x40010800
 800fae4:	e000e100 	.word	0xe000e100

0800fae8 <geometry_msgs::TransformStamped::TransformStamped()>:
      geometry_msgs::Transform transform;

    TransformStamped():
      header(),
      child_frame_id(""),
      transform()
 800fae8:	4a0c      	ldr	r2, [pc, #48]	; (800fb1c <geometry_msgs::TransformStamped::TransformStamped()+0x34>)

    Quaternion():
      x(0),
      y(0),
      z(0),
      w(0)
 800faea:	490d      	ldr	r1, [pc, #52]	; (800fb20 <geometry_msgs::TransformStamped::TransformStamped()+0x38>)
 800faec:	6002      	str	r2, [r0, #0]
      const char* frame_id;

    Header():
      seq(0),
      stamp(),
      frame_id("")
 800faee:	4a0d      	ldr	r2, [pc, #52]	; (800fb24 <geometry_msgs::TransformStamped::TransformStamped()+0x3c>)
 800faf0:	6301      	str	r1, [r0, #48]	; 0x30
 800faf2:	6042      	str	r2, [r0, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	6082      	str	r2, [r0, #8]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 800faf8:	60c2      	str	r2, [r0, #12]
 800fafa:	6102      	str	r2, [r0, #16]
 800fafc:	4a0a      	ldr	r2, [pc, #40]	; (800fb28 <geometry_msgs::TransformStamped::TransformStamped()+0x40>)
 800fafe:	6142      	str	r2, [r0, #20]
 800fb00:	6182      	str	r2, [r0, #24]
      geometry_msgs::Vector3 translation;
      geometry_msgs::Quaternion rotation;

    Transform():
      translation(),
      rotation()
 800fb02:	4a0a      	ldr	r2, [pc, #40]	; (800fb2c <geometry_msgs::TransformStamped::TransformStamped()+0x44>)
 800fb04:	61c2      	str	r2, [r0, #28]
      float z;

    Vector3():
      x(0),
      y(0),
      z(0)
 800fb06:	4a0a      	ldr	r2, [pc, #40]	; (800fb30 <geometry_msgs::TransformStamped::TransformStamped()+0x48>)
 800fb08:	6202      	str	r2, [r0, #32]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	6242      	str	r2, [r0, #36]	; 0x24
 800fb0e:	6282      	str	r2, [r0, #40]	; 0x28
 800fb10:	62c2      	str	r2, [r0, #44]	; 0x2c
 800fb12:	6342      	str	r2, [r0, #52]	; 0x34
 800fb14:	6382      	str	r2, [r0, #56]	; 0x38
 800fb16:	63c2      	str	r2, [r0, #60]	; 0x3c
 800fb18:	6402      	str	r2, [r0, #64]	; 0x40
    {
    }
 800fb1a:	4770      	bx	lr
 800fb1c:	08015650 	.word	0x08015650
 800fb20:	08015578 	.word	0x08015578
 800fb24:	08015548 	.word	0x08015548
 800fb28:	08015bd7 	.word	0x08015bd7
 800fb2c:	08015638 	.word	0x08015638
 800fb30:	080155c0 	.word	0x080155c0

0800fb34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>:
            return true;
          }
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
 800fb34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fb38:	4698      	mov	r8, r3
    private:
      bool param_recieved;
      rosserial_msgs::RequestParamResponse req_param_resp;

      bool requestParam(const char * name, int time_out =  1000){
        param_recieved = false;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	f880 3504 	strb.w	r3, [r0, #1284]	; 0x504
  {
    public:
      const char* name;

    RequestParamRequest():
      name("")
 800fb40:	4b17      	ldr	r3, [pc, #92]	; (800fba0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x6c>)
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
 800fb42:	9101      	str	r1, [sp, #4]
 800fb44:	9300      	str	r3, [sp, #0]
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800fb46:	6803      	ldr	r3, [r0, #0]
 800fb48:	2106      	movs	r1, #6
 800fb4a:	681b      	ldr	r3, [r3, #0]
            return true;
          }
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
 800fb4c:	4617      	mov	r7, r2

      bool requestParam(const char * name, int time_out =  1000){
        param_recieved = false;
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800fb4e:	466a      	mov	r2, sp
            return true;
          }
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
 800fb50:	4604      	mov	r4, r0

      bool requestParam(const char * name, int time_out =  1000){
        param_recieved = false;
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800fb52:	4798      	blx	r3
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 800fb54:	f7f0 fdf6 	bl	8000744 <millis>
        uint16_t end_time = hardware_.time() + time_out;
 800fb58:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800fb5c:	b286      	uxth	r6, r0
        while(!param_recieved ){
 800fb5e:	f894 5504 	ldrb.w	r5, [r4, #1284]	; 0x504
 800fb62:	b945      	cbnz	r5, 800fb76 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x42>
          spinOnce();
 800fb64:	6823      	ldr	r3, [r4, #0]
 800fb66:	4620      	mov	r0, r4
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	4798      	blx	r3
 800fb6c:	f7f0 fdea 	bl	8000744 <millis>
          if (hardware_.time() > end_time) return false;
 800fb70:	42b0      	cmp	r0, r6
 800fb72:	d9f4      	bls.n	800fb5e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x2a>
 800fb74:	e00f      	b.n	800fb96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x62>
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
        if (requestParam(name) ){
          if (length == req_param_resp.floats_length){
 800fb76:	f894 2518 	ldrb.w	r2, [r4, #1304]	; 0x518
 800fb7a:	4542      	cmp	r2, r8
 800fb7c:	d10a      	bne.n	800fb94 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x60>
 800fb7e:	2300      	movs	r3, #0
            //copy it over
            for(int i=0; i<length; i++)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	da08      	bge.n	800fb96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x62>
              param[i] = req_param_resp.floats[i];
 800fb84:	f8d4 1520 	ldr.w	r1, [r4, #1312]	; 0x520
 800fb88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fb8c:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
      }
      bool getParam(const char* name, float* param, int length=1){
        if (requestParam(name) ){
          if (length == req_param_resp.floats_length){
            //copy it over
            for(int i=0; i<length; i++)
 800fb90:	3301      	adds	r3, #1
 800fb92:	e7f5      	b.n	800fb80 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x4c>
              param[i] = req_param_resp.floats[i];
            return true;
          }
        }
        return false;
 800fb94:	2500      	movs	r5, #0
      }
 800fb96:	4628      	mov	r0, r5
 800fb98:	b002      	add	sp, #8
 800fb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb9e:	bf00      	nop
 800fba0:	08015500 	.word	0x08015500

0800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>:
        log(rosserial_msgs::Log::INFO, msg);
      }
      void logwarn(const char *msg){
        log(rosserial_msgs::Log::WARN, msg);
      }
      void logerror(const char*msg){
 800fba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
 800fba6:	4b07      	ldr	r3, [pc, #28]	; (800fbc4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)+0x20>)

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
        l.msg = (char*)msg;
 800fba8:	9103      	str	r1, [sp, #12]
 800fbaa:	9301      	str	r3, [sp, #4]
       */

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
 800fbac:	2303      	movs	r3, #3
 800fbae:	f88d 3008 	strb.w	r3, [sp, #8]
        l.msg = (char*)msg;
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800fbb2:	6803      	ldr	r3, [r0, #0]
 800fbb4:	aa01      	add	r2, sp, #4
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2107      	movs	r1, #7
 800fbba:	4798      	blx	r3
      void logwarn(const char *msg){
        log(rosserial_msgs::Log::WARN, msg);
      }
      void logerror(const char*msg){
        log(rosserial_msgs::Log::ERROR, msg);
      }
 800fbbc:	b005      	add	sp, #20
 800fbbe:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbc2:	bf00      	nop
 800fbc4:	080154e8 	.word	0x080154e8

0800fbc8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)>:
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
      {
        if(id >= 100 && !configured_)
 800fbc8:	2963      	cmp	r1, #99	; 0x63
          }
        }
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
 800fbca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbce:	4604      	mov	r4, r0
 800fbd0:	460e      	mov	r6, r1
      {
        if(id >= 100 && !configured_)
 800fbd2:	dd03      	ble.n	800fbdc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x14>
 800fbd4:	f890 54f4 	ldrb.w	r5, [r0, #1268]	; 0x4f4
 800fbd8:	2d00      	cmp	r5, #0
 800fbda:	d04f      	beq.n	800fc7c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xb4>
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 800fbdc:	6813      	ldr	r3, [r2, #0]
 800fbde:	f204 211f 	addw	r1, r4, #543	; 0x21f
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4610      	mov	r0, r2
 800fbe6:	4798      	blx	r3

        /* setup the header */
        message_out[0] = 0xff;
 800fbe8:	22ff      	movs	r2, #255	; 0xff
 800fbea:	f884 2218 	strb.w	r2, [r4, #536]	; 0x218
        message_out[1] = PROTOCOL_VER;
 800fbee:	22fe      	movs	r2, #254	; 0xfe
      {
        if(id >= 100 && !configured_)
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 800fbf0:	b283      	uxth	r3, r0

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
 800fbf2:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800fbf6:	b2c2      	uxtb	r2, r0
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
 800fbf8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800fbfc:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800fc00:	4410      	add	r0, r2
 800fc02:	43c0      	mvns	r0, r0
        message_out[5] = (uint8_t) ((int16_t)id&255);
 800fc04:	f884 621d 	strb.w	r6, [r4, #541]	; 0x21d
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 800fc08:	f346 2607 	sbfx	r6, r6, #8, #8
        uint16_t l = msg->serialize(message_out+7);

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800fc0c:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800fc10:	f884 021c 	strb.w	r0, [r4, #540]	; 0x21c
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 800fc14:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
 800fc18:	f504 7007 	add.w	r0, r4, #540	; 0x21c

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800fc1c:	2105      	movs	r1, #5
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
 800fc1e:	2200      	movs	r2, #0
        for(int i =5; i<l+7; i++)
 800fc20:	1d9e      	adds	r6, r3, #6
 800fc22:	42b1      	cmp	r1, r6
 800fc24:	dc04      	bgt.n	800fc30 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x68>
          chk += message_out[i];
 800fc26:	f810 5f01 	ldrb.w	r5, [r0, #1]!
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800fc2a:	3101      	adds	r1, #1
          chk += message_out[i];
 800fc2c:	442a      	add	r2, r5
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800fc2e:	e7f8      	b.n	800fc22 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x5a>
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 800fc30:	43d2      	mvns	r2, r2
 800fc32:	f103 0608 	add.w	r6, r3, #8
 800fc36:	3307      	adds	r3, #7
 800fc38:	b2b6      	uxth	r6, r6
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	4423      	add	r3, r4

        if( l <= OUTPUT_SIZE ){
 800fc3e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 800fc42:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

        if( l <= OUTPUT_SIZE ){
 800fc46:	d813      	bhi.n	800fc70 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xa8>
          hardware_.write(message_out, l);
 800fc48:	f504 7806 	add.w	r8, r4, #536	; 0x218
 800fc4c:	4635      	mov	r5, r6
 800fc4e:	4647      	mov	r7, r8
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
        while( !(USART1->SR & 0x00000040) );
 800fc50:	f8df 9034 	ldr.w	r9, [pc, #52]	; 800fc88 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xc0>
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
 800fc54:	ebc8 0307 	rsb	r3, r8, r7
 800fc58:	429e      	cmp	r6, r3
 800fc5a:	dd0f      	ble.n	800fc7c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xb4>
        while( !(USART1->SR & 0x00000040) );
 800fc5c:	f8b9 3000 	ldrh.w	r3, [r9]
 800fc60:	065b      	lsls	r3, r3, #25
 800fc62:	d5fb      	bpl.n	800fc5c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x94>
        USART_SendData(iostream, data[i]);
 800fc64:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fc68:	6860      	ldr	r0, [r4, #4]
 800fc6a:	f7f3 fa4e 	bl	800310a <USART_SendData>
 800fc6e:	e7f1      	b.n	800fc54 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x8c>
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
 800fc70:	4904      	ldr	r1, [pc, #16]	; (800fc84 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xbc>)
 800fc72:	4620      	mov	r0, r4
 800fc74:	f7ff ff96 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
          return -1;
 800fc78:	f04f 35ff 	mov.w	r5, #4294967295
        }
      }
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc82:	bf00      	nop
 800fc84:	08015a82 	.word	0x08015a82
 800fc88:	40013800 	.word	0x40013800

0800fc8c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>:

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 800fc8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  {
    public:
      ros::Time data;

    Time():
      data()
 800fc8e:	4b08      	ldr	r3, [pc, #32]	; (800fcb0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()+0x24>)
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 800fc90:	aa01      	add	r2, sp, #4
 800fc92:	9301      	str	r3, [sp, #4]
 800fc94:	2300      	movs	r3, #0
 800fc96:	9302      	str	r3, [sp, #8]
 800fc98:	9303      	str	r3, [sp, #12]
 800fc9a:	6803      	ldr	r3, [r0, #0]
 800fc9c:	210a      	movs	r1, #10
 800fc9e:	681b      	ldr	r3, [r3, #0]

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 800fca0:	4604      	mov	r4, r0
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 800fca2:	4798      	blx	r3
      }
    }

    uint32_t time(){
      return millis();
 800fca4:	f7f0 fd4e 	bl	8000744 <millis>
        rt_time = hardware_.time();
 800fca8:	60e0      	str	r0, [r4, #12]
      }
 800fcaa:	b004      	add	sp, #16
 800fcac:	bd10      	pop	{r4, pc}
 800fcae:	bf00      	nop
 800fcb0:	080154b8 	.word	0x080154b8

0800fcb4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()>:
          }
        }
        return false;
      }

      void negotiateTopics()
 800fcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb8:	4604      	mov	r4, r0
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800fcba:	4b2b      	ldr	r3, [pc, #172]	; (800fd68 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xb4>)
 800fcbc:	b086      	sub	sp, #24
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	4b2a      	ldr	r3, [pc, #168]	; (800fd6c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xb8>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fcc8:	9302      	str	r3, [sp, #8]
 800fcca:	9303      	str	r3, [sp, #12]
 800fccc:	9304      	str	r3, [sp, #16]
 800fcce:	9205      	str	r2, [sp, #20]
 800fcd0:	f200 4614 	addw	r6, r0, #1044	; 0x414
 800fcd4:	f500 658f 	add.w	r5, r0, #1144	; 0x478
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
 800fcd8:	f44f 7700 	mov.w	r7, #512	; 0x200
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
 800fcdc:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800fce0:	b1bb      	cbz	r3, 800fd12 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x5e>
          {
            ti.topic_id = publishers[i]->id_;
 800fce2:	689a      	ldr	r2, [r3, #8]
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fce4:	6858      	ldr	r0, [r3, #4]
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
 800fce6:	f8ad 2004 	strh.w	r2, [sp, #4]
            ti.topic_name = (char *) publishers[i]->topic_;
 800fcea:	681a      	ldr	r2, [r3, #0]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fcec:	6803      	ldr	r3, [r0, #0]
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
 800fcee:	9202      	str	r2, [sp, #8]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	4798      	blx	r3
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fcf4:	6833      	ldr	r3, [r6, #0]
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fcf6:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fcf8:	6858      	ldr	r0, [r3, #4]
 800fcfa:	6803      	ldr	r3, [r0, #0]
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	4798      	blx	r3
 800fd00:	6831      	ldr	r1, [r6, #0]
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
 800fd02:	6823      	ldr	r3, [r4, #0]
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fd04:	9004      	str	r0, [sp, #16]
            ti.buffer_size = OUTPUT_SIZE;
 800fd06:	9705      	str	r7, [sp, #20]
            publish( publishers[i]->getEndpointType(), &ti );
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	466a      	mov	r2, sp
 800fd0c:	6909      	ldr	r1, [r1, #16]
 800fd0e:	4620      	mov	r0, r4
 800fd10:	4798      	blx	r3

      void negotiateTopics()
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
 800fd12:	42ae      	cmp	r6, r5
 800fd14:	d1e2      	bne.n	800fcdc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x28>
 800fd16:	f204 46dc 	addw	r6, r4, #1244	; 0x4dc
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 800fd1a:	f44f 7700 	mov.w	r7, #512	; 0x200
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
 800fd1e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800fd22:	b1c8      	cbz	r0, 800fd58 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xa4>
          {
            ti.topic_id = subscribers[i]->id_;
 800fd24:	6843      	ldr	r3, [r0, #4]
 800fd26:	f8ad 3004 	strh.w	r3, [sp, #4]
            ti.topic_name = (char *) subscribers[i]->topic_;
 800fd2a:	6883      	ldr	r3, [r0, #8]
 800fd2c:	9302      	str	r3, [sp, #8]
            ti.message_type = (char *) subscribers[i]->getMsgType();
 800fd2e:	6803      	ldr	r3, [r0, #0]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	4798      	blx	r3
 800fd34:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800fd36:	6828      	ldr	r0, [r5, #0]
 800fd38:	6803      	ldr	r3, [r0, #0]
 800fd3a:	68db      	ldr	r3, [r3, #12]
 800fd3c:	4798      	blx	r3
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800fd3e:	6823      	ldr	r3, [r4, #0]
          if(subscribers[i] != 0) // non-empty slot
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800fd40:	9004      	str	r0, [sp, #16]
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800fd42:	6828      	ldr	r0, [r5, #0]
 800fd44:	f8d3 8000 	ldr.w	r8, [r3]
 800fd48:	6803      	ldr	r3, [r0, #0]
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 800fd4a:	9705      	str	r7, [sp, #20]
            publish( subscribers[i]->getEndpointType(), &ti );
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	4798      	blx	r3
 800fd50:	466a      	mov	r2, sp
 800fd52:	4601      	mov	r1, r0
 800fd54:	4620      	mov	r0, r4
 800fd56:	47c0      	blx	r8
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
 800fd58:	42ae      	cmp	r6, r5
 800fd5a:	d1e0      	bne.n	800fd1e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x6a>
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
          }
        }
        configured_ = true;
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
      }
 800fd62:	b006      	add	sp, #24
 800fd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd68:	080154d0 	.word	0x080154d0
 800fd6c:	08015bd7 	.word	0x08015bd7

0800fd70 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)>:
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
        rt_time = hardware_.time();
      }

      void syncTime(uint8_t * data)
 800fd70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fd72:	4b1c      	ldr	r3, [pc, #112]	; (800fde4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x74>)
 800fd74:	4604      	mov	r4, r0
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	2300      	movs	r3, #0
 800fd7a:	9302      	str	r3, [sp, #8]
 800fd7c:	9303      	str	r3, [sp, #12]
 800fd7e:	460d      	mov	r5, r1
 800fd80:	f7f0 fce0 	bl	8000744 <millis>
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 800fd84:	68e2      	ldr	r2, [r4, #12]

        t.deserialize(data);
 800fd86:	4629      	mov	r1, r5
      }

      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 800fd88:	1a86      	subs	r6, r0, r2

        t.deserialize(data);
        t.data.sec += offset/1000;
 800fd8a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
 800fd8e:	a801      	add	r0, sp, #4
 800fd90:	f7ff f871 	bl	800ee76 <std_msgs::Time::deserialize(unsigned char*)>
        t.data.sec += offset/1000;
 800fd94:	fbb6 f2f5 	udiv	r2, r6, r5
 800fd98:	9b02      	ldr	r3, [sp, #8]
 800fd9a:	4413      	add	r3, r2
        t.data.nsec += (offset%1000)*1000000UL;
 800fd9c:	fb05 6212 	mls	r2, r5, r2, r6
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
        t.data.sec += offset/1000;
 800fda0:	9302      	str	r3, [sp, #8]
        t.data.nsec += (offset%1000)*1000000UL;
 800fda2:	4e11      	ldr	r6, [pc, #68]	; (800fde8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x78>)
 800fda4:	9b03      	ldr	r3, [sp, #12]
 800fda6:	fb06 3202 	mla	r2, r6, r2, r3
 800fdaa:	9203      	str	r2, [sp, #12]
 800fdac:	f7f0 fcca 	bl	8000744 <millis>
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 800fdb0:	fbb0 f3f5 	udiv	r3, r0, r5
 800fdb4:	9a02      	ldr	r2, [sp, #8]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800fdb6:	9903      	ldr	r1, [sp, #12]
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 800fdb8:	3a01      	subs	r2, #1
 800fdba:	1ad2      	subs	r2, r2, r3
 800fdbc:	6122      	str	r2, [r4, #16]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800fdbe:	4a0b      	ldr	r2, [pc, #44]	; (800fdec <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x7c>)
 800fdc0:	fb05 0013 	mls	r0, r5, r3, r0
 800fdc4:	440a      	add	r2, r1
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	fb06 2310 	mls	r3, r6, r0, r2
        normalizeSecNSec(sec_offset, nsec_offset);
 800fdcc:	f104 0010 	add.w	r0, r4, #16

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800fdd0:	f841 3f14 	str.w	r3, [r1, #20]!
        normalizeSecNSec(sec_offset, nsec_offset);
 800fdd4:	f7f4 ff1c 	bl	8004c10 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 800fdd8:	f7f0 fcb4 	bl	8000744 <millis>
        t.deserialize(data);
        t.data.sec += offset/1000;
        t.data.nsec += (offset%1000)*1000000UL;

        this->setNow(t.data);
        last_sync_receive_time = hardware_.time();
 800fddc:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
      }
 800fde0:	b004      	add	sp, #16
 800fde2:	bd70      	pop	{r4, r5, r6, pc}
 800fde4:	080154b8 	.word	0x080154b8
 800fde8:	000f4240 	.word	0x000f4240
 800fdec:	3b9aca00 	.word	0x3b9aca00

0800fdf0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>:
      /* This function goes in your loop() function, it handles
       *  serial input and callbacks for subscribers.
       */


      virtual int spinOnce(){
 800fdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf4:	4604      	mov	r4, r0
 800fdf6:	f7f0 fca5 	bl	8000744 <millis>

        /* restart if timed out */
        uint32_t c_time = hardware_.time();
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 800fdfa:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800fdfe:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 800fe02:	4606      	mov	r6, r0
 800fe04:	1ac3      	subs	r3, r0, r3
 800fe06:	4293      	cmp	r3, r2
            configured_ = false;
 800fe08:	bf84      	itt	hi
 800fe0a:	2300      	movhi	r3, #0
 800fe0c:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
         }

        /* reset if message has timed out */
        if ( mode_ != MODE_FIRST_FF){
 800fe10:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 800fe14:	b133      	cbz	r3, 800fe24 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x34>
          if (c_time > last_msg_timeout_time){
 800fe16:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 800fe1a:	4283      	cmp	r3, r0
            mode_ = MODE_FIRST_FF;
 800fe1c:	bf3c      	itt	cc
 800fe1e:	2300      	movcc	r3, #0
 800fe20:	f8c4 34e0 	strcc.w	r3, [r4, #1248]	; 0x4e0
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }

    int read(){
      if(USART_CNTIN == USART_CNTOUT)
 800fe24:	4f74      	ldr	r7, [pc, #464]	; (800fff8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x208>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800fe26:	f04f 0800 	mov.w	r8, #0
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
              }else{
                if(subscribers[topic_-100])
                  subscribers[topic_-100]->callback( message_in );
 800fe2a:	f104 0918 	add.w	r9, r4, #24
 800fe2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe32:	429a      	cmp	r2, r3
 800fe34:	f000 80cc 	beq.w	800ffd0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1e0>
        return -1;
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fe3a:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
 800fe3e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fe42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800fe44:	6a7a      	ldr	r2, [r7, #36]	; 0x24

    int read(){
      if(USART_CNTIN == USART_CNTOUT)
        return -1;
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800fe46:	b29b      	uxth	r3, r3
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800fe48:	3201      	adds	r2, #1
 800fe4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe4e:	627a      	str	r2, [r7, #36]	; 0x24
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 800fe50:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fe54:	2d07      	cmp	r5, #7
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 800fe56:	441a      	add	r2, r3
 800fe58:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fe5c:	d10f      	bne.n	800fe7e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x8e>
            message_in[index_++] = data;
 800fe5e:	f8d4 24ec 	ldr.w	r2, [r4, #1260]	; 0x4ec
 800fe62:	1c51      	adds	r1, r2, #1
 800fe64:	4422      	add	r2, r4
 800fe66:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
 800fe6a:	7613      	strb	r3, [r2, #24]
            bytes_--;
 800fe6c:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 800fe70:	3b01      	subs	r3, #1
 800fe72:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1d9      	bne.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              mode_ = MODE_MSG_CHECKSUM;
 800fe7a:	2308      	movs	r3, #8
 800fe7c:	e01a      	b.n	800feb4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
          }else if( mode_ == MODE_FIRST_FF ){
 800fe7e:	b9a5      	cbnz	r5, 800feaa <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xba>
            if(data == 0xff){
 800fe80:	2bff      	cmp	r3, #255	; 0xff
 800fe82:	d107      	bne.n	800fe94 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xa4>
              mode_++;
 800fe84:	2301      	movs	r3, #1
 800fe86:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 800fe8a:	f106 0314 	add.w	r3, r6, #20
 800fe8e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
 800fe92:	e7cc      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 800fe94:	f7f0 fc56 	bl	8000744 <millis>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 800fe98:	1b80      	subs	r0, r0, r6
 800fe9a:	2805      	cmp	r0, #5
 800fe9c:	d9c7      	bls.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
 800fe9e:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
              return -2;
 800fea2:	f06f 0001 	mvn.w	r0, #1
 800fea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
 800feaa:	2d01      	cmp	r5, #1
 800feac:	d10f      	bne.n	800fece <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xde>
            if(data == PROTOCOL_VER){
 800feae:	2bfe      	cmp	r3, #254	; 0xfe
 800feb0:	d103      	bne.n	800feba <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xca>
              mode_++;
 800feb2:	2302      	movs	r3, #2
 800feb4:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800feb8:	e7b9      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }else{
              mode_ = MODE_FIRST_FF;
              if (configured_ == false)
 800feba:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
            if(data == PROTOCOL_VER){
              mode_++;
            }else{
              mode_ = MODE_FIRST_FF;
 800febe:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
              if (configured_ == false)
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d1b3      	bne.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7ff fee0 	bl	800fc8c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
 800fecc:	e7af      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 800fece:	2d02      	cmp	r5, #2
 800fed0:	d105      	bne.n	800fede <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xee>
            bytes_ = data;
 800fed2:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
            index_ = 0;
 800fed6:	f8c4 84ec 	str.w	r8, [r4, #1260]	; 0x4ec
            mode_++;
 800feda:	2203      	movs	r2, #3
 800fedc:	e020      	b.n	800ff20 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x130>
            checksum_ = data;               /* first byte for calculating size checksum */
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 800fede:	2d03      	cmp	r5, #3
 800fee0:	d107      	bne.n	800fef2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x102>
            bytes_ += data<<8;
 800fee2:	f8d4 24e4 	ldr.w	r2, [r4, #1252]	; 0x4e4
 800fee6:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800feea:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
	    mode_++;
 800feee:	2304      	movs	r3, #4
 800fef0:	e7e0      	b.n	800feb4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 800fef2:	2d04      	cmp	r5, #4
 800fef4:	d10f      	bne.n	800ff16 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x126>
            if( (checksum_%256) == 255)
 800fef6:	4b41      	ldr	r3, [pc, #260]	; (800fffc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x20c>)
 800fef8:	4013      	ands	r3, r2
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	bfbe      	ittt	lt
 800fefe:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ff02:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800ff06:	3301      	addlt	r3, #1
 800ff08:	2bff      	cmp	r3, #255	; 0xff
 800ff0a:	d101      	bne.n	800ff10 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x120>
	      mode_++;
 800ff0c:	2305      	movs	r3, #5
 800ff0e:	e7d1      	b.n	800feb4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
	    else
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800ff10:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
 800ff14:	e78b      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 800ff16:	2d05      	cmp	r5, #5
 800ff18:	d107      	bne.n	800ff2a <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x13a>
            topic_ = data;
 800ff1a:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            mode_++;
 800ff1e:	2206      	movs	r2, #6
 800ff20:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
            checksum_ = data;               /* first byte included in checksum */
 800ff24:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
 800ff28:	e781      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 800ff2a:	2d06      	cmp	r5, #6
 800ff2c:	d10b      	bne.n	800ff46 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x156>
            topic_ += data<<8;
 800ff2e:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
 800ff32:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800ff36:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            mode_ = MODE_MESSAGE;
 800ff3a:	2307      	movs	r3, #7
 800ff3c:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
            if(bytes_ == 0)
 800ff40:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 800ff44:	e797      	b.n	800fe76 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x86>
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 800ff46:	2d08      	cmp	r5, #8
 800ff48:	f47f af71 	bne.w	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
 800ff4c:	4b2b      	ldr	r3, [pc, #172]	; (800fffc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x20c>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800ff4e:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
            if( (checksum_%256) == 255){
 800ff52:	4013      	ands	r3, r2
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	bfbe      	ittt	lt
 800ff58:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800ff5c:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800ff60:	3301      	addlt	r3, #1
 800ff62:	2bff      	cmp	r3, #255	; 0xff
 800ff64:	f47f af63 	bne.w	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 800ff68:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 800ff6c:	b96b      	cbnz	r3, 800ff8a <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x19a>
                requestSyncTime();
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f7ff fe8c 	bl	800fc8c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
                negotiateTopics();
 800ff74:	4620      	mov	r0, r4
 800ff76:	f7ff fe9d 	bl	800fcb4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()>
                last_sync_time = c_time;
 800ff7a:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
                last_sync_receive_time = c_time;
 800ff7e:	f8c4 64fc 	str.w	r6, [r4, #1276]	; 0x4fc
                return -1;
 800ff82:	f04f 30ff 	mov.w	r0, #4294967295
 800ff86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
              }else if(topic_ == TopicInfo::ID_TIME){
 800ff8a:	2b0a      	cmp	r3, #10
 800ff8c:	d104      	bne.n	800ff98 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1a8>
                syncTime(message_in);
 800ff8e:	4649      	mov	r1, r9
 800ff90:	4620      	mov	r0, r4
 800ff92:	f7ff feed 	bl	800fd70 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)>
 800ff96:	e74a      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 800ff98:	2b06      	cmp	r3, #6
 800ff9a:	d108      	bne.n	800ffae <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1be>
                  req_param_resp.deserialize(message_in);
 800ff9c:	4649      	mov	r1, r9
 800ff9e:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
 800ffa2:	f7ff fa41 	bl	800f428 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>
                  param_recieved= true;
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 800ffac:	e73f      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 800ffae:	2b0b      	cmp	r3, #11
 800ffb0:	d102      	bne.n	800ffb8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1c8>
                  configured_ = false;
 800ffb2:	f884 84f4 	strb.w	r8, [r4, #1268]	; 0x4f4
 800ffb6:	e73a      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else{
                if(subscribers[topic_-100])
 800ffb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ffbc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ffc0:	2800      	cmp	r0, #0
 800ffc2:	f43f af34 	beq.w	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
                  subscribers[topic_-100]->callback( message_in );
 800ffc6:	6803      	ldr	r3, [r0, #0]
 800ffc8:	4649      	mov	r1, r9
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4798      	blx	r3
 800ffce:	e72e      	b.n	800fe2e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }
          }
        }

        /* occasionally sync time */
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 800ffd0:	f894 04f4 	ldrb.w	r0, [r4, #1268]	; 0x4f4
 800ffd4:	b170      	cbz	r0, 800fff4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x204>
 800ffd6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800ffda:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 800ffde:	1af3      	subs	r3, r6, r3
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d904      	bls.n	800ffee <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1fe>
          requestSyncTime();
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f7ff fe51 	bl	800fc8c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
          last_sync_time = c_time;
 800ffea:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
        }

        return 0;
 800ffee:	2000      	movs	r0, #0
 800fff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
 800fff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fff8:	200000c0 	.word	0x200000c0
 800fffc:	800000ff 	.word	0x800000ff

08010000 <main>:


nav_msgs::Odometry odom;
ros::Publisher odom_pub("odom", &odom);

int main(){
 8010000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return &hardware_;
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
 8010004:	4c3a      	ldr	r4, [pc, #232]	; (80100f0 <main+0xf0>)
 8010006:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
  /* System Clocks Configuration */
  RCC_Configuration();
 801000a:	f7f0 fbab 	bl	8000764 <RCC_Configuration>

  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 801000e:	2101      	movs	r1, #1
 8010010:	4838      	ldr	r0, [pc, #224]	; (80100f4 <main+0xf4>)
 8010012:	f7f2 f99f 	bl	8002354 <GPIO_PinRemapConfig>
  I2C1_Init();
 8010016:	f7f0 fa55 	bl	80004c4 <I2C1_Init>
  SysTick_Init();
 801001a:	f7f0 fb5f 	bl	80006dc <SysTick_Init>
  DEBUG_Init();
 801001e:	f7f0 f9fc 	bl	800041a <DEBUG_Init>
  SHUTDOWN_Init();
 8010022:	f7f0 fa21 	bl	8000468 <SHUTDOWN_Init>
  LED_Init();
 8010026:	f7f0 f9b5 	bl	8000394 <LED_Init>
 801002a:	f204 4034 	addw	r0, r4, #1076	; 0x434
 801002e:	f7ff fd11 	bl	800fa54 <ArduinoHardware::init()>
 8010032:	f604 02a8 	addw	r2, r4, #2216	; 0x8a8
        mode_ = 0;
        bytes_ = 0;
        index_ = 0;
        topic_ = 0;
 8010036:	4611      	mov	r1, r2
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
        mode_ = 0;
 8010038:	2300      	movs	r3, #0
 801003a:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
        bytes_ = 0;
 801003e:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914
        index_ = 0;
 8010042:	f8c4 391c 	str.w	r3, [r4, #2332]	; 0x91c
        topic_ = 0;
 8010046:	f8c4 3918 	str.w	r3, [r4, #2328]	; 0x918

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
 801004a:	f851 0f04 	ldr.w	r0, [r1, #4]!
 801004e:	b940      	cbnz	r0, 8010062 <main+0x62>
            subscribers[i] = (Subscriber_*) &s;
 8010050:	4829      	ldr	r0, [pc, #164]	; (80100f8 <main+0xf8>)
 8010052:	eb04 0183 	add.w	r1, r4, r3, lsl #2
            s.id_ = i+100;
 8010056:	3364      	adds	r3, #100	; 0x64
      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
            subscribers[i] = (Subscriber_*) &s;
 8010058:	f8c1 08ac 	str.w	r0, [r1, #2220]	; 0x8ac
            s.id_ = i+100;
 801005c:	f8c4 3964 	str.w	r3, [r4, #2404]	; 0x964
 8010060:	e002      	b.n	8010068 <main+0x68>
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8010062:	3301      	adds	r3, #1
 8010064:	2b19      	cmp	r3, #25
 8010066:	d1f0      	bne.n	801004a <main+0x4a>
 8010068:	2300      	movs	r3, #0
          if(subscribers[i] == 0){ // empty slot
 801006a:	f852 1f04 	ldr.w	r1, [r2, #4]!
 801006e:	b941      	cbnz	r1, 8010082 <main+0x82>
            subscribers[i] = (Subscriber_*) &s;
 8010070:	4922      	ldr	r1, [pc, #136]	; (80100fc <main+0xfc>)
 8010072:	eb04 0283 	add.w	r2, r4, r3, lsl #2
            s.id_ = i+100;
 8010076:	3364      	adds	r3, #100	; 0x64
      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
            subscribers[i] = (Subscriber_*) &s;
 8010078:	f8c2 18ac 	str.w	r1, [r2, #2220]	; 0x8ac
            s.id_ = i+100;
 801007c:	f8c4 39a4 	str.w	r3, [r4, #2468]	; 0x9a4
 8010080:	e002      	b.n	8010088 <main+0x88>
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 8010082:	3301      	adds	r3, #1
 8010084:	2b19      	cmp	r3, #25
 8010086:	d1f0      	bne.n	801006a <main+0x6a>
 8010088:	491d      	ldr	r1, [pc, #116]	; (8010100 <main+0x100>)
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 801008a:	2300      	movs	r3, #0
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 801008c:	460a      	mov	r2, r1

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
 801008e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010092:	b960      	cbnz	r0, 80100ae <main+0xae>
            publishers[i] = &p;
 8010094:	4a1b      	ldr	r2, [pc, #108]	; (8010104 <main+0x104>)
 8010096:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 801009a:	f8c0 2848 	str.w	r2, [r0, #2120]	; 0x848
            p.id_ = i+100+MAX_SUBSCRIBERS;
 801009e:	337d      	adds	r3, #125	; 0x7d
            p.nh_ = this;
 80100a0:	f2a2 528c 	subw	r2, r2, #1420	; 0x58c
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
            publishers[i] = &p;
            p.id_ = i+100+MAX_SUBSCRIBERS;
 80100a4:	f8c4 39c4 	str.w	r3, [r4, #2500]	; 0x9c4
            p.nh_ = this;
 80100a8:	f8c4 29c8 	str.w	r2, [r4, #2504]	; 0x9c8
 80100ac:	e002      	b.n	80100b4 <main+0xb4>
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 80100ae:	3301      	adds	r3, #1
 80100b0:	2b19      	cmp	r3, #25
 80100b2:	d1ec      	bne.n	801008e <main+0x8e>
 80100b4:	2300      	movs	r3, #0
          if(publishers[i] == 0){ // empty slot
 80100b6:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80100ba:	b962      	cbnz	r2, 80100d6 <main+0xd6>
            publishers[i] = &p;
 80100bc:	4a12      	ldr	r2, [pc, #72]	; (8010108 <main+0x108>)
 80100be:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80100c2:	f8c1 2848 	str.w	r2, [r1, #2120]	; 0x848
            p.id_ = i+100+MAX_SUBSCRIBERS;
 80100c6:	337d      	adds	r3, #125	; 0x7d
            p.nh_ = this;
 80100c8:	f5a2 62be 	sub.w	r2, r2, #1520	; 0x5f0
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
            publishers[i] = &p;
            p.id_ = i+100+MAX_SUBSCRIBERS;
 80100cc:	f8c4 3a28 	str.w	r3, [r4, #2600]	; 0xa28
            p.nh_ = this;
 80100d0:	f8c4 2a2c 	str.w	r2, [r4, #2604]	; 0xa2c
 80100d4:	e002      	b.n	80100dc <main+0xdc>
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 80100d6:	3301      	adds	r3, #1
 80100d8:	2b19      	cmp	r3, #25
 80100da:	d1ec      	bne.n	80100b6 <main+0xb6>
  nh.subscribe(motor_sub);
  nh.subscribe(led_sub);
  nh.advertise(odom_pub);
  odom_broadcaster.init(nh);

  while(!nh.connected()){
 80100dc:	f894 3924 	ldrb.w	r3, [r4, #2340]	; 0x924
      }


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
 80100e0:	4803      	ldr	r0, [pc, #12]	; (80100f0 <main+0xf0>)
 80100e2:	b99b      	cbnz	r3, 801010c <main+0x10c>
    nh.spinOnce();
 80100e4:	f500 6086 	add.w	r0, r0, #1072	; 0x430
 80100e8:	f7ff fe82 	bl	800fdf0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>
 80100ec:	e7f6      	b.n	80100dc <main+0xdc>
 80100ee:	bf00      	nop
 80100f0:	200000c0 	.word	0x200000c0
 80100f4:	00300200 	.word	0x00300200
 80100f8:	20000a20 	.word	0x20000a20
 80100fc:	20000a60 	.word	0x20000a60
 8010100:	20000904 	.word	0x20000904
 8010104:	20000a7c 	.word	0x20000a7c
 8010108:	20000ae0 	.word	0x20000ae0
  }

  shuttingDown = false;
 801010c:	2300      	movs	r3, #0
 801010e:	f880 342c 	strb.w	r3, [r0, #1068]	; 0x42c

  

  float KP;
  if(!nh.getParam("serial_node/KP", &KP, 1)){
 8010112:	aa21      	add	r2, sp, #132	; 0x84
 8010114:	2301      	movs	r3, #1
 8010116:	49a4      	ldr	r1, [pc, #656]	; (80103a8 <main+0x3a8>)
 8010118:	f500 6086 	add.w	r0, r0, #1072	; 0x430
 801011c:	f7ff fd0a 	bl	800fb34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 8010120:	b908      	cbnz	r0, 8010126 <main+0x126>
    KP = 5000;
 8010122:	4ba2      	ldr	r3, [pc, #648]	; (80103ac <main+0x3ac>)
 8010124:	9321      	str	r3, [sp, #132]	; 0x84
  }
  float KI;
  if(!nh.getParam("serial_node/KI", &KI, 1)){
 8010126:	2301      	movs	r3, #1
 8010128:	aa22      	add	r2, sp, #136	; 0x88
 801012a:	49a1      	ldr	r1, [pc, #644]	; (80103b0 <main+0x3b0>)
 801012c:	48a1      	ldr	r0, [pc, #644]	; (80103b4 <main+0x3b4>)
 801012e:	f7ff fd01 	bl	800fb34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 8010132:	b908      	cbnz	r0, 8010138 <main+0x138>
    KI = 5000;
 8010134:	4b9d      	ldr	r3, [pc, #628]	; (80103ac <main+0x3ac>)
 8010136:	9322      	str	r3, [sp, #136]	; 0x88
  }
  float KD;
  if(!nh.getParam("serial_node/KD", &KD, 1)){
 8010138:	2301      	movs	r3, #1
 801013a:	aa23      	add	r2, sp, #140	; 0x8c
 801013c:	499e      	ldr	r1, [pc, #632]	; (80103b8 <main+0x3b8>)
 801013e:	489d      	ldr	r0, [pc, #628]	; (80103b4 <main+0x3b4>)
 8010140:	f7ff fcf8 	bl	800fb34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 8010144:	b910      	cbnz	r0, 801014c <main+0x14c>
    KD = 4;
 8010146:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 801014a:	9323      	str	r3, [sp, #140]	; 0x8c
  }
  float integralSaturation;
  if(!nh.getParam("serial_node/integralSaturation", &integralSaturation, 1)){
 801014c:	2301      	movs	r3, #1
 801014e:	aa24      	add	r2, sp, #144	; 0x90
 8010150:	499a      	ldr	r1, [pc, #616]	; (80103bc <main+0x3bc>)
 8010152:	4898      	ldr	r0, [pc, #608]	; (80103b4 <main+0x3b4>)
 8010154:	f7ff fcee 	bl	800fb34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 8010158:	b908      	cbnz	r0, 801015e <main+0x15e>
    integralSaturation = 10000;
 801015a:	4b99      	ldr	r3, [pc, #612]	; (80103c0 <main+0x3c0>)
 801015c:	9324      	str	r3, [sp, #144]	; 0x90
  }
  float wheelRadius;
  if(!nh.getParam("serial_node/wheelRadius", &wheelRadius, 1)){
 801015e:	2301      	movs	r3, #1
 8010160:	aa25      	add	r2, sp, #148	; 0x94
 8010162:	4998      	ldr	r1, [pc, #608]	; (80103c4 <main+0x3c4>)
 8010164:	4893      	ldr	r0, [pc, #588]	; (80103b4 <main+0x3b4>)
 8010166:	f7ff fce5 	bl	800fb34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 801016a:	b908      	cbnz	r0, 8010170 <main+0x170>
    wheelRadius = 0.04;
 801016c:	4b96      	ldr	r3, [pc, #600]	; (80103c8 <main+0x3c8>)
 801016e:	9325      	str	r3, [sp, #148]	; 0x94
  }

  if(!nh.getParam("serial_node/widthBetweenMotorPivotPoints", &L, 1)){
 8010170:	4c96      	ldr	r4, [pc, #600]	; (80103cc <main+0x3cc>)
 8010172:	2301      	movs	r3, #1
 8010174:	f104 0208 	add.w	r2, r4, #8
 8010178:	4995      	ldr	r1, [pc, #596]	; (80103d0 <main+0x3d0>)
 801017a:	f504 6086 	add.w	r0, r4, #1072	; 0x430
 801017e:	f7ff fcd9 	bl	800fb34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 8010182:	b908      	cbnz	r0, 8010188 <main+0x188>
    L = 0.17;
 8010184:	4b93      	ldr	r3, [pc, #588]	; (80103d4 <main+0x3d4>)
 8010186:	60a3      	str	r3, [r4, #8]
  }

  if(!nh.getParam("serial_node/motorPivotPointToWheel", &d, 1)){
 8010188:	4c90      	ldr	r4, [pc, #576]	; (80103cc <main+0x3cc>)
 801018a:	2301      	movs	r3, #1
 801018c:	f604 2234 	addw	r2, r4, #2612	; 0xa34
 8010190:	4991      	ldr	r1, [pc, #580]	; (80103d8 <main+0x3d8>)
 8010192:	f504 6086 	add.w	r0, r4, #1072	; 0x430
 8010196:	f7ff fccd 	bl	800fb34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 801019a:	b910      	cbnz	r0, 80101a2 <main+0x1a2>
    d = 0.06;
 801019c:	4b8f      	ldr	r3, [pc, #572]	; (80103dc <main+0x3dc>)
 801019e:	f8c4 3a34 	str.w	r3, [r4, #2612]	; 0xa34
  }

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 80101a2:	2604      	movs	r6, #4

  if(!nh.getParam("serial_node/motorPivotPointToWheel", &d, 1)){
    d = 0.06;
  }

  delay(1000);
 80101a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80101a8:	f7f0 faba 	bl	8000720 <delay>

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 80101ac:	4b8c      	ldr	r3, [pc, #560]	; (80103e0 <main+0x3e0>)
 80101ae:	4a8d      	ldr	r2, [pc, #564]	; (80103e4 <main+0x3e4>)
 80101b0:	2101      	movs	r1, #1
 80101b2:	9600      	str	r6, [sp, #0]
 80101b4:	a84c      	add	r0, sp, #304	; 0x130
 80101b6:	f7f4 fcb2 	bl	8004b1e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  SL.m_ServoPin = GPIO_Pin_9;
 80101ba:	f44f 7300 	mov.w	r3, #512	; 0x200
  SL.m_ServoPort = GPIOB;
 80101be:	4c8a      	ldr	r4, [pc, #552]	; (80103e8 <main+0x3e8>)
  }

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
 80101c0:	9352      	str	r3, [sp, #328]	; 0x148
  SL.m_ServoPort = GPIOB;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 80101c2:	2303      	movs	r3, #3
  SR.m_ServoPin = GPIO_Pin_8;
  SR.m_ServoPort = GPIOB;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 80101c4:	2701      	movs	r7, #1

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 80101c6:	9300      	str	r3, [sp, #0]
 80101c8:	4a88      	ldr	r2, [pc, #544]	; (80103ec <main+0x3ec>)
 80101ca:	4b85      	ldr	r3, [pc, #532]	; (80103e0 <main+0x3e0>)
 80101cc:	2101      	movs	r1, #1
 80101ce:	a865      	add	r0, sp, #404	; 0x194
  SR.m_ServoPin = GPIO_Pin_8;
 80101d0:	f44f 7880 	mov.w	r8, #256	; 0x100

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;
 80101d4:	9453      	str	r4, [sp, #332]	; 0x14c

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 80101d6:	f7f4 fca2 	bl	8004b1e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  SR.m_ServoPin = GPIO_Pin_8;
  SR.m_ServoPort = GPIOB;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 80101da:	9700      	str	r7, [sp, #0]
 80101dc:	4b84      	ldr	r3, [pc, #528]	; (80103f0 <main+0x3f0>)
 80101de:	4a85      	ldr	r2, [pc, #532]	; (80103f4 <main+0x3f4>)
 80101e0:	2102      	movs	r1, #2
 80101e2:	a87e      	add	r0, sp, #504	; 0x1f8
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
 80101e4:	4d84      	ldr	r5, [pc, #528]	; (80103f8 <main+0x3f8>)
  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
  SR.m_ServoPin = GPIO_Pin_8;
 80101e6:	f8cd 81ac 	str.w	r8, [sp, #428]	; 0x1ac
  SR.m_ServoPort = GPIOB;
 80101ea:	946c      	str	r4, [sp, #432]	; 0x1b0

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 80101ec:	f7f4 fc97 	bl	8004b1e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
 80101f0:	4a82      	ldr	r2, [pc, #520]	; (80103fc <main+0x3fc>)
 80101f2:	9703      	str	r7, [sp, #12]
 80101f4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 80101f8:	f8cd 8014 	str.w	r8, [sp, #20]
 80101fc:	9202      	str	r2, [sp, #8]
 80101fe:	e88d 0084 	stmia.w	sp, {r2, r7}
 8010202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801020a:	a87e      	add	r0, sp, #504	; 0x1f8
 801020c:	9506      	str	r5, [sp, #24]
 801020e:	9504      	str	r5, [sp, #16]
 8010210:	f7f4 fc8b 	bl	8004b2a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FR.encoderAddr = (0x10 | 0x08);
 8010214:	2318      	movs	r3, #24
 8010216:	f8ad 3240 	strh.w	r3, [sp, #576]	; 0x240
  FR.setRegulator(KP,KI,KD,integralSaturation);
 801021a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801021c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010224:	a87e      	add	r0, sp, #504	; 0x1f8
 8010226:	f7f4 fc92 	bl	8004b4e <motorSettings::setRegulator(float, float, float, float)>
  FR.wheelRadius = wheelRadius;
 801022a:	9b25      	ldr	r3, [sp, #148]	; 0x94

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 801022c:	4a74      	ldr	r2, [pc, #464]	; (8010400 <main+0x400>)
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
  FR.encoderAddr = (0x10 | 0x08);
  FR.setRegulator(KP,KI,KD,integralSaturation);
  FR.wheelRadius = wheelRadius;
 801022e:	9396      	str	r3, [sp, #600]	; 0x258

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 8010230:	2102      	movs	r1, #2
 8010232:	4b74      	ldr	r3, [pc, #464]	; (8010404 <main+0x404>)
 8010234:	9600      	str	r6, [sp, #0]
 8010236:	a897      	add	r0, sp, #604	; 0x25c
 8010238:	f7f4 fc71 	bl	8004b1e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
 801023c:	f04f 0802 	mov.w	r8, #2
 8010240:	f04f 0910 	mov.w	r9, #16
 8010244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010248:	4622      	mov	r2, r4
 801024a:	9406      	str	r4, [sp, #24]
 801024c:	9404      	str	r4, [sp, #16]
 801024e:	9303      	str	r3, [sp, #12]
 8010250:	e88d 0220 	stmia.w	sp, {r5, r9}
 8010254:	2320      	movs	r3, #32
 8010256:	4631      	mov	r1, r6
 8010258:	a897      	add	r0, sp, #604	; 0x25c
 801025a:	f8cd 8014 	str.w	r8, [sp, #20]
 801025e:	9502      	str	r5, [sp, #8]
 8010260:	f7f4 fc63 	bl	8004b2a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FL.encoderAddr = (0x10);
  FL.setRegulator(KP,KI,KD,integralSaturation);
 8010264:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010266:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801026c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801026e:	a897      	add	r0, sp, #604	; 0x25c

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
 8010270:	f8ad 92a4 	strh.w	r9, [sp, #676]	; 0x2a4
  FL.setRegulator(KP,KI,KD,integralSaturation);
 8010274:	f7f4 fc6b 	bl	8004b4e <motorSettings::setRegulator(float, float, float, float)>
  FL.wheelRadius = wheelRadius;
 8010278:	9b25      	ldr	r3, [sp, #148]	; 0x94

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 801027a:	4a63      	ldr	r2, [pc, #396]	; (8010408 <main+0x408>)
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
  FL.setRegulator(KP,KI,KD,integralSaturation);
  FL.wheelRadius = wheelRadius;
 801027c:	93af      	str	r3, [sp, #700]	; 0x2bc

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 801027e:	4641      	mov	r1, r8
 8010280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010284:	9600      	str	r6, [sp, #0]
 8010286:	a8b0      	add	r0, sp, #704	; 0x2c0
 8010288:	f7f4 fc49 	bl	8004b1e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  RL.setDCPins(GPIO_Pin_11, GPIOB, GPIO_Pin_12, GPIOB,
    GPIO_Pin_13, GPIOB, GPIO_Pin_14, GPIOB,
    GPIO_Pin_3, GPIOA);
 801028c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010290:	f04f 0908 	mov.w	r9, #8
 8010294:	9303      	str	r3, [sp, #12]
 8010296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801029a:	4622      	mov	r2, r4
 801029c:	9404      	str	r4, [sp, #16]
 801029e:	9402      	str	r4, [sp, #8]
 80102a0:	9301      	str	r3, [sp, #4]
 80102a2:	9400      	str	r4, [sp, #0]
 80102a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80102ac:	a8b0      	add	r0, sp, #704	; 0x2c0
 80102ae:	9506      	str	r5, [sp, #24]
 80102b0:	f8cd 9014 	str.w	r9, [sp, #20]
 80102b4:	f7f4 fc39 	bl	8004b2a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RL.encoderAddr = (0x10 | 0x04);
 80102b8:	2314      	movs	r3, #20
 80102ba:	f8ad 3308 	strh.w	r3, [sp, #776]	; 0x308
  RL.setRegulator(KP,KI,KD,integralSaturation);
 80102be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80102c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	9921      	ldr	r1, [sp, #132]	; 0x84
 80102c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80102c8:	a8b0      	add	r0, sp, #704	; 0x2c0
 80102ca:	f7f4 fc40 	bl	8004b4e <motorSettings::setRegulator(float, float, float, float)>
  RL.wheelRadius = wheelRadius;
 80102ce:	9b25      	ldr	r3, [sp, #148]	; 0x94

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 80102d0:	4a4e      	ldr	r2, [pc, #312]	; (801040c <main+0x40c>)
  RL.setDCPins(GPIO_Pin_11, GPIOB, GPIO_Pin_12, GPIOB,
    GPIO_Pin_13, GPIOB, GPIO_Pin_14, GPIOB,
    GPIO_Pin_3, GPIOA);
  RL.encoderAddr = (0x10 | 0x04);
  RL.setRegulator(KP,KI,KD,integralSaturation);
  RL.wheelRadius = wheelRadius;
 80102d2:	93c8      	str	r3, [sp, #800]	; 0x320

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 80102d4:	4641      	mov	r1, r8
 80102d6:	4b46      	ldr	r3, [pc, #280]	; (80103f0 <main+0x3f0>)
 80102d8:	9600      	str	r6, [sp, #0]
 80102da:	a8c9      	add	r0, sp, #804	; 0x324
 80102dc:	f7f4 fc1f 	bl	8004b1e <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
 80102e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80102e4:	4622      	mov	r2, r4
 80102e6:	9305      	str	r3, [sp, #20]
 80102e8:	9404      	str	r4, [sp, #16]
 80102ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102ee:	4639      	mov	r1, r7
 80102f0:	a8c9      	add	r0, sp, #804	; 0x324
 80102f2:	9506      	str	r5, [sp, #24]
 80102f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80102f8:	9502      	str	r5, [sp, #8]
 80102fa:	e88d 00a0 	stmia.w	sp, {r5, r7}
 80102fe:	f7f4 fc14 	bl	8004b2a <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
 8010302:	231c      	movs	r3, #28
 8010304:	f8ad 336c 	strh.w	r3, [sp, #876]	; 0x36c
  RR.setRegulator(KP,KI,KD,integralSaturation);
 8010308:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801030a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801030c:	9300      	str	r3, [sp, #0]
 801030e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8010310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010312:	a8c9      	add	r0, sp, #804	; 0x324
 8010314:	f7f4 fc1b 	bl	8004b4e <motorSettings::setRegulator(float, float, float, float)>
  RR.wheelRadius = wheelRadius;
 8010318:	9b25      	ldr	r3, [sp, #148]	; 0x94

  char error[150];
  servo_left = motor::createMotor(&SL);
 801031a:	a84c      	add	r0, sp, #304	; 0x130
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
  RR.setRegulator(KP,KI,KD,integralSaturation);
  RR.wheelRadius = wheelRadius;
 801031c:	93e1      	str	r3, [sp, #900]	; 0x384

  char error[150];
  servo_left = motor::createMotor(&SL);
 801031e:	f7f4 f8c9 	bl	80044b4 <motor::createMotor(motorSettings*)>
 8010322:	4c2a      	ldr	r4, [pc, #168]	; (80103cc <main+0x3cc>)
  if(!servo_left->motorInit()){
 8010324:	6803      	ldr	r3, [r0, #0]
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
  RR.setRegulator(KP,KI,KD,integralSaturation);
  RR.wheelRadius = wheelRadius;

  char error[150];
  servo_left = motor::createMotor(&SL);
 8010326:	61e0      	str	r0, [r4, #28]
  if(!servo_left->motorInit()){
 8010328:	68db      	ldr	r3, [r3, #12]
 801032a:	4798      	blx	r3
 801032c:	b968      	cbnz	r0, 801034a <main+0x34a>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
 801032e:	69e0      	ldr	r0, [r4, #28]
 8010330:	6803      	ldr	r3, [r0, #0]
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	4798      	blx	r3
 8010336:	4936      	ldr	r1, [pc, #216]	; (8010410 <main+0x410>)
 8010338:	4602      	mov	r2, r0
 801033a:	a8e2      	add	r0, sp, #904	; 0x388
 801033c:	f003 fa24 	bl	8013788 <siprintf>
    nh.logerror(error);
 8010340:	a9e2      	add	r1, sp, #904	; 0x388
 8010342:	f504 6086 	add.w	r0, r4, #1072	; 0x430
 8010346:	f7ff fc2d 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  servo_right = motor::createMotor(&SR);
 801034a:	a865      	add	r0, sp, #404	; 0x194
 801034c:	f7f4 f8b2 	bl	80044b4 <motor::createMotor(motorSettings*)>
  if(!servo_right->motorInit()){
 8010350:	6803      	ldr	r3, [r0, #0]
  if(!servo_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
    nh.logerror(error);
  }

  servo_right = motor::createMotor(&SR);
 8010352:	6220      	str	r0, [r4, #32]
  if(!servo_right->motorInit()){
 8010354:	68db      	ldr	r3, [r3, #12]
  if(!servo_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
    nh.logerror(error);
  }

  servo_right = motor::createMotor(&SR);
 8010356:	4d1d      	ldr	r5, [pc, #116]	; (80103cc <main+0x3cc>)
  if(!servo_right->motorInit()){
 8010358:	4798      	blx	r3
 801035a:	b968      	cbnz	r0, 8010378 <main+0x378>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
 801035c:	6a28      	ldr	r0, [r5, #32]
 801035e:	6803      	ldr	r3, [r0, #0]
 8010360:	691b      	ldr	r3, [r3, #16]
 8010362:	4798      	blx	r3
 8010364:	492a      	ldr	r1, [pc, #168]	; (8010410 <main+0x410>)
 8010366:	4602      	mov	r2, r0
 8010368:	a8e2      	add	r0, sp, #904	; 0x388
 801036a:	f003 fa0d 	bl	8013788 <siprintf>
    nh.logerror(error);
 801036e:	a9e2      	add	r1, sp, #904	; 0x388
 8010370:	f505 6086 	add.w	r0, r5, #1072	; 0x430
 8010374:	f7ff fc16 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  front_left = motor::createMotor(&FL);
 8010378:	a897      	add	r0, sp, #604	; 0x25c
 801037a:	f7f4 f89b 	bl	80044b4 <motor::createMotor(motorSettings*)>
  if(!front_left->motorInit()){
 801037e:	6803      	ldr	r3, [r0, #0]
  if(!servo_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
    nh.logerror(error);
  }

  front_left = motor::createMotor(&FL);
 8010380:	f8c4 0a38 	str.w	r0, [r4, #2616]	; 0xa38
  if(!front_left->motorInit()){
 8010384:	68db      	ldr	r3, [r3, #12]
  if(!servo_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
    nh.logerror(error);
  }

  front_left = motor::createMotor(&FL);
 8010386:	4d11      	ldr	r5, [pc, #68]	; (80103cc <main+0x3cc>)
  if(!front_left->motorInit()){
 8010388:	4798      	blx	r3
 801038a:	2800      	cmp	r0, #0
 801038c:	d146      	bne.n	801041c <main+0x41c>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
 801038e:	f8d5 0a38 	ldr.w	r0, [r5, #2616]	; 0xa38
 8010392:	6803      	ldr	r3, [r0, #0]
 8010394:	691b      	ldr	r3, [r3, #16]
 8010396:	4798      	blx	r3
 8010398:	491d      	ldr	r1, [pc, #116]	; (8010410 <main+0x410>)
 801039a:	4602      	mov	r2, r0
 801039c:	a8e2      	add	r0, sp, #904	; 0x388
 801039e:	f003 f9f3 	bl	8013788 <siprintf>
    nh.logerror(error);
 80103a2:	a9e2      	add	r1, sp, #904	; 0x388
 80103a4:	e036      	b.n	8010414 <main+0x414>
 80103a6:	bf00      	nop
 80103a8:	08015abb 	.word	0x08015abb
 80103ac:	459c4000 	.word	0x459c4000
 80103b0:	08015aca 	.word	0x08015aca
 80103b4:	200004f0 	.word	0x200004f0
 80103b8:	08015ad9 	.word	0x08015ad9
 80103bc:	08015ae8 	.word	0x08015ae8
 80103c0:	461c4000 	.word	0x461c4000
 80103c4:	08015b07 	.word	0x08015b07
 80103c8:	3d23d70a 	.word	0x3d23d70a
 80103cc:	200000c0 	.word	0x200000c0
 80103d0:	08015b1f 	.word	0x08015b1f
 80103d4:	3e2e147b 	.word	0x3e2e147b
 80103d8:	08015b48 	.word	0x08015b48
 80103dc:	3d75c28f 	.word	0x3d75c28f
 80103e0:	40000800 	.word	0x40000800
 80103e4:	08015b6b 	.word	0x08015b6b
 80103e8:	40010c00 	.word	0x40010c00
 80103ec:	08015b76 	.word	0x08015b76
 80103f0:	40012c00 	.word	0x40012c00
 80103f4:	08015b82 	.word	0x08015b82
 80103f8:	40010800 	.word	0x40010800
 80103fc:	40011000 	.word	0x40011000
 8010400:	08015b8e 	.word	0x08015b8e
 8010404:	40000400 	.word	0x40000400
 8010408:	08015b99 	.word	0x08015b99
 801040c:	08015ba3 	.word	0x08015ba3
 8010410:	08015bae 	.word	0x08015bae
 8010414:	f505 6086 	add.w	r0, r5, #1072	; 0x430
 8010418:	f7ff fbc4 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  front_right = motor::createMotor(&FR);
 801041c:	a87e      	add	r0, sp, #504	; 0x1f8
 801041e:	f7f4 f849 	bl	80044b4 <motor::createMotor(motorSettings*)>
  if(!front_right->motorInit()){
 8010422:	6803      	ldr	r3, [r0, #0]
  if(!front_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
    nh.logerror(error);
  }

  front_right = motor::createMotor(&FR);
 8010424:	f8c4 0a3c 	str.w	r0, [r4, #2620]	; 0xa3c
  if(!front_right->motorInit()){
 8010428:	68db      	ldr	r3, [r3, #12]
  if(!front_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
    nh.logerror(error);
  }

  front_right = motor::createMotor(&FR);
 801042a:	4d7d      	ldr	r5, [pc, #500]	; (8010620 <main+0x620>)
  if(!front_right->motorInit()){
 801042c:	4798      	blx	r3
 801042e:	b970      	cbnz	r0, 801044e <main+0x44e>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
 8010430:	f8d5 0a3c 	ldr.w	r0, [r5, #2620]	; 0xa3c
 8010434:	6803      	ldr	r3, [r0, #0]
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	4798      	blx	r3
 801043a:	497a      	ldr	r1, [pc, #488]	; (8010624 <main+0x624>)
 801043c:	4602      	mov	r2, r0
 801043e:	a8e2      	add	r0, sp, #904	; 0x388
 8010440:	f003 f9a2 	bl	8013788 <siprintf>
    nh.logerror(error);
 8010444:	a9e2      	add	r1, sp, #904	; 0x388
 8010446:	f505 6086 	add.w	r0, r5, #1072	; 0x430
 801044a:	f7ff fbab 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  rear_left = motor::createMotor(&RL);
 801044e:	a8b0      	add	r0, sp, #704	; 0x2c0
 8010450:	f7f4 f830 	bl	80044b4 <motor::createMotor(motorSettings*)>
  if(!rear_left->motorInit()){
 8010454:	6803      	ldr	r3, [r0, #0]
  if(!front_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
    nh.logerror(error);
  }

  rear_left = motor::createMotor(&RL);
 8010456:	f8c4 0a40 	str.w	r0, [r4, #2624]	; 0xa40
  if(!rear_left->motorInit()){
 801045a:	68db      	ldr	r3, [r3, #12]
  if(!front_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
    nh.logerror(error);
  }

  rear_left = motor::createMotor(&RL);
 801045c:	4d70      	ldr	r5, [pc, #448]	; (8010620 <main+0x620>)
  if(!rear_left->motorInit()){
 801045e:	4798      	blx	r3
 8010460:	b970      	cbnz	r0, 8010480 <main+0x480>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
 8010462:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	; 0xa40
 8010466:	6803      	ldr	r3, [r0, #0]
 8010468:	691b      	ldr	r3, [r3, #16]
 801046a:	4798      	blx	r3
 801046c:	496d      	ldr	r1, [pc, #436]	; (8010624 <main+0x624>)
 801046e:	4602      	mov	r2, r0
 8010470:	a8e2      	add	r0, sp, #904	; 0x388
 8010472:	f003 f989 	bl	8013788 <siprintf>
    nh.logerror(error);
 8010476:	a9e2      	add	r1, sp, #904	; 0x388
 8010478:	f505 6086 	add.w	r0, r5, #1072	; 0x430
 801047c:	f7ff fb92 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  rear_right = motor::createMotor(&RR);
 8010480:	a8c9      	add	r0, sp, #804	; 0x324
 8010482:	f7f4 f817 	bl	80044b4 <motor::createMotor(motorSettings*)>
  if(!rear_right->motorInit()){
 8010486:	6803      	ldr	r3, [r0, #0]
  if(!rear_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
    nh.logerror(error);
  }

  rear_right = motor::createMotor(&RR);
 8010488:	f8c4 0a44 	str.w	r0, [r4, #2628]	; 0xa44
  if(!rear_right->motorInit()){
 801048c:	68db      	ldr	r3, [r3, #12]
  if(!rear_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
    nh.logerror(error);
  }

  rear_right = motor::createMotor(&RR);
 801048e:	4d64      	ldr	r5, [pc, #400]	; (8010620 <main+0x620>)
  if(!rear_right->motorInit()){
 8010490:	4798      	blx	r3
 8010492:	b970      	cbnz	r0, 80104b2 <main+0x4b2>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_right->motorName());
 8010494:	f8d5 0a44 	ldr.w	r0, [r5, #2628]	; 0xa44
 8010498:	6803      	ldr	r3, [r0, #0]
 801049a:	691b      	ldr	r3, [r3, #16]
 801049c:	4798      	blx	r3
 801049e:	4961      	ldr	r1, [pc, #388]	; (8010624 <main+0x624>)
 80104a0:	4602      	mov	r2, r0
 80104a2:	a8e2      	add	r0, sp, #904	; 0x388
 80104a4:	f003 f970 	bl	8013788 <siprintf>
    nh.logerror(error);
 80104a8:	a9e2      	add	r1, sp, #904	; 0x388
 80104aa:	f505 6086 	add.w	r0, r5, #1072	; 0x430
 80104ae:	f7ff fb79 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }
  
  
  led_set(0);
 80104b2:	2000      	movs	r0, #0
 80104b4:	f7ef ffa6 	bl	8000404 <led_set>

  servo_left->setReference(0);
 80104b8:	69e0      	ldr	r0, [r4, #28]
 80104ba:	2100      	movs	r1, #0
 80104bc:	6803      	ldr	r3, [r0, #0]
  rear_right->setReference(0);
  rear_left->setReference(0);

  bool connected = false;

  int cnt = 0;
 80104be:	2600      	movs	r6, #0
  }
  
  
  led_set(0);

  servo_left->setReference(0);
 80104c0:	695b      	ldr	r3, [r3, #20]
 80104c2:	4798      	blx	r3
  servo_right->setReference(0);
 80104c4:	6a20      	ldr	r0, [r4, #32]
 80104c6:	2100      	movs	r1, #0
 80104c8:	6803      	ldr	r3, [r0, #0]
 80104ca:	695b      	ldr	r3, [r3, #20]
 80104cc:	4798      	blx	r3
  front_right->setReference(0);
 80104ce:	f8d4 0a3c 	ldr.w	r0, [r4, #2620]	; 0xa3c
 80104d2:	2100      	movs	r1, #0
 80104d4:	6803      	ldr	r3, [r0, #0]
 80104d6:	695b      	ldr	r3, [r3, #20]
 80104d8:	4798      	blx	r3
  front_left->setReference(0);
 80104da:	f8d4 0a38 	ldr.w	r0, [r4, #2616]	; 0xa38
 80104de:	2100      	movs	r1, #0
 80104e0:	6803      	ldr	r3, [r0, #0]
 80104e2:	695b      	ldr	r3, [r3, #20]
 80104e4:	4798      	blx	r3
  rear_right->setReference(0);
 80104e6:	f8d4 0a44 	ldr.w	r0, [r4, #2628]	; 0xa44
 80104ea:	2100      	movs	r1, #0
 80104ec:	6803      	ldr	r3, [r0, #0]
 80104ee:	695b      	ldr	r3, [r3, #20]
 80104f0:	4798      	blx	r3
  rear_left->setReference(0);
 80104f2:	f8d4 0a40 	ldr.w	r0, [r4, #2624]	; 0xa40
 80104f6:	2100      	movs	r1, #0
 80104f8:	6803      	ldr	r3, [r0, #0]
 80104fa:	695b      	ldr	r3, [r3, #20]
 80104fc:	4798      	blx	r3
  float dt = 0.02;

  double x = 0.0;
  double y = 0.0;
  double th = 0.0;
  float l = sqrt(pow((L/2),2)*2);
 80104fe:	68a0      	ldr	r0, [r4, #8]
 8010500:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010504:	f7f5 f996 	bl	8005834 <__aeabi_fmul>
 8010508:	f7f4 fd20 	bl	8004f4c <__aeabi_f2d>
 801050c:	4602      	mov	r2, r0
 801050e:	460b      	mov	r3, r1
 8010510:	f7f4 fd70 	bl	8004ff4 <__aeabi_dmul>
 8010514:	460b      	mov	r3, r1
 8010516:	4602      	mov	r2, r0
 8010518:	f7f4 fbba 	bl	8004c90 <__adddf3>
 801051c:	f001 fca6 	bl	8011e6c <sqrt>
 8010520:	f7f5 f82a 	bl	8005578 <__aeabi_d2f>

  float alpha[4] = {0,0,0,0};
 8010524:	2210      	movs	r2, #16
  float dt = 0.02;

  double x = 0.0;
  double y = 0.0;
  double th = 0.0;
  float l = sqrt(pow((L/2),2)*2);
 8010526:	901d      	str	r0, [sp, #116]	; 0x74

  float alpha[4] = {0,0,0,0};
 8010528:	2100      	movs	r1, #0
 801052a:	a828      	add	r0, sp, #160	; 0xa0
 801052c:	f002 ffa4 	bl	8013478 <memset>
  float start_time;
  float dt = 0.02;

  double x = 0.0;
  double y = 0.0;
  double th = 0.0;
 8010530:	2400      	movs	r4, #0
 8010532:	2300      	movs	r3, #0
 8010534:	e9cd 3408 	strd	r3, r4, [sp, #32]
  int cnt = 0;
  float start_time;
  float dt = 0.02;

  double x = 0.0;
  double y = 0.0;
 8010538:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30

  int cnt = 0;
  float start_time;
  float dt = 0.02;

  double x = 0.0;
 801053c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28

  float alpha[4] = {0,0,0,0};


  while (1){
    nh.spinOnce();
 8010540:	4c37      	ldr	r4, [pc, #220]	; (8010620 <main+0x620>)
 8010542:	4839      	ldr	r0, [pc, #228]	; (8010628 <main+0x628>)
 8010544:	f7ff fc54 	bl	800fdf0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>
    start_time = ((int)millis()) / 1000.0;
 8010548:	f7f0 f8fc 	bl	8000744 <millis>
 801054c:	f7f4 fcec 	bl	8004f28 <__aeabi_i2d>
 8010550:	4b36      	ldr	r3, [pc, #216]	; (801062c <main+0x62c>)
 8010552:	2200      	movs	r2, #0
 8010554:	f7f4 fe78 	bl	8005248 <__aeabi_ddiv>
 8010558:	f7f5 f80e 	bl	8005578 <__aeabi_d2f>

    if(shuttingDown){
 801055c:	f894 342c 	ldrb.w	r3, [r4, #1068]	; 0x42c
  float alpha[4] = {0,0,0,0};


  while (1){
    nh.spinOnce();
    start_time = ((int)millis()) / 1000.0;
 8010560:	900f      	str	r0, [sp, #60]	; 0x3c
 8010562:	4f2f      	ldr	r7, [pc, #188]	; (8010620 <main+0x620>)

    if(shuttingDown){
 8010564:	b963      	cbnz	r3, 8010580 <main+0x580>
      connected = false;
      // TODO: Advertise shutdown??
    }else{
      connected = nh.connected();
      if(cnt++%10==0)
 8010566:	1c73      	adds	r3, r6, #1
 8010568:	220a      	movs	r2, #10
 801056a:	9313      	str	r3, [sp, #76]	; 0x4c
 801056c:	fb96 f3f2 	sdiv	r3, r6, r2
 8010570:	fb02 6613 	mls	r6, r2, r3, r6
 8010574:	f894 5924 	ldrb.w	r5, [r4, #2340]	; 0x924
 8010578:	b926      	cbnz	r6, 8010584 <main+0x584>
        debug_toggle();
 801057a:	f7ef ff61 	bl	8000440 <debug_toggle>
 801057e:	e001      	b.n	8010584 <main+0x584>
 8010580:	9613      	str	r6, [sp, #76]	; 0x4c
  while (1){
    nh.spinOnce();
    start_time = ((int)millis()) / 1000.0;

    if(shuttingDown){
      connected = false;
 8010582:	2500      	movs	r5, #0
      connected = nh.connected();
      if(cnt++%10==0)
        debug_toggle();
    }

    auto sl = servo_left->update(0.1, connected);
 8010584:	69f9      	ldr	r1, [r7, #28]
 8010586:	4a2a      	ldr	r2, [pc, #168]	; (8010630 <main+0x630>)
 8010588:	680b      	ldr	r3, [r1, #0]
 801058a:	a82c      	add	r0, sp, #176	; 0xb0
 801058c:	69de      	ldr	r6, [r3, #28]
 801058e:	462b      	mov	r3, r5
 8010590:	47b0      	blx	r6
    auto sr = servo_right->update(0.1, connected);
 8010592:	6a39      	ldr	r1, [r7, #32]
 8010594:	4a26      	ldr	r2, [pc, #152]	; (8010630 <main+0x630>)
 8010596:	680b      	ldr	r3, [r1, #0]
 8010598:	a830      	add	r0, sp, #192	; 0xc0
 801059a:	69de      	ldr	r6, [r3, #28]
 801059c:	462b      	mov	r3, r5
 801059e:	47b0      	blx	r6

    if(waitForServos | lastMsg + CMDMSGTIMEOUT > start_time){
 80105a0:	6838      	ldr	r0, [r7, #0]
 80105a2:	797e      	ldrb	r6, [r7, #5]
 80105a4:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 80105a8:	f7f5 f8ec 	bl	8005784 <__aeabi_ui2f>
 80105ac:	4601      	mov	r1, r0
 80105ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80105b0:	b2f6      	uxtb	r6, r6
 80105b2:	f04f 0701 	mov.w	r7, #1
 80105b6:	f7f5 fadb 	bl	8005b70 <__aeabi_fcmplt>
 80105ba:	b900      	cbnz	r0, 80105be <main+0x5be>
 80105bc:	4607      	mov	r7, r0
 80105be:	f017 0fff 	tst.w	r7, #255	; 0xff
 80105c2:	d101      	bne.n	80105c8 <main+0x5c8>
 80105c4:	2e00      	cmp	r6, #0
 80105c6:	d04d      	beq.n	8010664 <main+0x664>
      if(std::get<2>(sr) == (int)servo_right->getReference() && std::get<2>(sl) == (int)servo_left->getReference()){
 80105c8:	6a20      	ldr	r0, [r4, #32]
 80105ca:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 80105cc:	6803      	ldr	r3, [r0, #0]
 80105ce:	699b      	ldr	r3, [r3, #24]
 80105d0:	4798      	blx	r3
 80105d2:	f7f5 faf5 	bl	8005bc0 <__aeabi_f2iz>
 80105d6:	4286      	cmp	r6, r0
 80105d8:	d12c      	bne.n	8010634 <main+0x634>
 80105da:	69e0      	ldr	r0, [r4, #28]
 80105dc:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 80105de:	6803      	ldr	r3, [r0, #0]
 80105e0:	699b      	ldr	r3, [r3, #24]
 80105e2:	4798      	blx	r3
 80105e4:	f7f5 faec 	bl	8005bc0 <__aeabi_f2iz>
 80105e8:	4286      	cmp	r6, r0
 80105ea:	d123      	bne.n	8010634 <main+0x634>
        waitForServos = false;
        front_right->setReference(motorCmd[0]);
 80105ec:	f8d4 0a3c 	ldr.w	r0, [r4, #2620]	; 0xa3c
    auto sl = servo_left->update(0.1, connected);
    auto sr = servo_right->update(0.1, connected);

    if(waitForServos | lastMsg + CMDMSGTIMEOUT > start_time){
      if(std::get<2>(sr) == (int)servo_right->getReference() && std::get<2>(sl) == (int)servo_left->getReference()){
        waitForServos = false;
 80105f0:	2300      	movs	r3, #0
 80105f2:	7163      	strb	r3, [r4, #5]
        front_right->setReference(motorCmd[0]);
 80105f4:	6803      	ldr	r3, [r0, #0]
 80105f6:	68e1      	ldr	r1, [r4, #12]
 80105f8:	695b      	ldr	r3, [r3, #20]
 80105fa:	4798      	blx	r3
        front_left->setReference(motorCmd[1]);
 80105fc:	f8d4 0a38 	ldr.w	r0, [r4, #2616]	; 0xa38
 8010600:	6921      	ldr	r1, [r4, #16]
 8010602:	6803      	ldr	r3, [r0, #0]
 8010604:	695b      	ldr	r3, [r3, #20]
 8010606:	4798      	blx	r3
        rear_left->setReference(motorCmd[2]);
 8010608:	f8d4 0a40 	ldr.w	r0, [r4, #2624]	; 0xa40
 801060c:	6961      	ldr	r1, [r4, #20]
 801060e:	6803      	ldr	r3, [r0, #0]
 8010610:	695b      	ldr	r3, [r3, #20]
 8010612:	4798      	blx	r3
        rear_right->setReference(motorCmd[3]);
 8010614:	f8d4 0a44 	ldr.w	r0, [r4, #2628]	; 0xa44
 8010618:	69a1      	ldr	r1, [r4, #24]
 801061a:	6803      	ldr	r3, [r0, #0]
 801061c:	695b      	ldr	r3, [r3, #20]
 801061e:	e020      	b.n	8010662 <main+0x662>
 8010620:	200000c0 	.word	0x200000c0
 8010624:	08015bae 	.word	0x08015bae
 8010628:	200004f0 	.word	0x200004f0
 801062c:	408f4000 	.word	0x408f4000
 8010630:	3dcccccd 	.word	0x3dcccccd
      }else{
        front_right->setReference(0);
 8010634:	f8d4 0a3c 	ldr.w	r0, [r4, #2620]	; 0xa3c
 8010638:	2100      	movs	r1, #0
 801063a:	6803      	ldr	r3, [r0, #0]
 801063c:	695b      	ldr	r3, [r3, #20]
 801063e:	4798      	blx	r3
        front_left->setReference(0);
 8010640:	f8d4 0a38 	ldr.w	r0, [r4, #2616]	; 0xa38
 8010644:	2100      	movs	r1, #0
 8010646:	6803      	ldr	r3, [r0, #0]
 8010648:	695b      	ldr	r3, [r3, #20]
 801064a:	4798      	blx	r3
        rear_left->setReference(0);
 801064c:	f8d4 0a40 	ldr.w	r0, [r4, #2624]	; 0xa40
 8010650:	2100      	movs	r1, #0
 8010652:	6803      	ldr	r3, [r0, #0]
 8010654:	695b      	ldr	r3, [r3, #20]
 8010656:	4798      	blx	r3
        rear_right->setReference(0);
 8010658:	f8d4 0a44 	ldr.w	r0, [r4, #2628]	; 0xa44
 801065c:	2100      	movs	r1, #0
 801065e:	6803      	ldr	r3, [r0, #0]
 8010660:	695b      	ldr	r3, [r3, #20]
 8010662:	4798      	blx	r3
      }
    }
    
    auto fr = front_right->update(0.1, connected);
 8010664:	f8d4 1a3c 	ldr.w	r1, [r4, #2620]	; 0xa3c
 8010668:	4a44      	ldr	r2, [pc, #272]	; (801077c <main+0x77c>)
 801066a:	680b      	ldr	r3, [r1, #0]
 801066c:	a834      	add	r0, sp, #208	; 0xd0
 801066e:	69de      	ldr	r6, [r3, #28]
 8010670:	462b      	mov	r3, r5
 8010672:	47b0      	blx	r6
    auto fl = front_left->update(0.1, connected);
 8010674:	f8d4 1a38 	ldr.w	r1, [r4, #2616]	; 0xa38
 8010678:	4a40      	ldr	r2, [pc, #256]	; (801077c <main+0x77c>)
 801067a:	680b      	ldr	r3, [r1, #0]
 801067c:	a838      	add	r0, sp, #224	; 0xe0
 801067e:	69de      	ldr	r6, [r3, #28]
 8010680:	462b      	mov	r3, r5
 8010682:	47b0      	blx	r6
    auto rl = rear_left->update(0.1, connected);
 8010684:	f8d4 1a40 	ldr.w	r1, [r4, #2624]	; 0xa40
 8010688:	4a3c      	ldr	r2, [pc, #240]	; (801077c <main+0x77c>)
 801068a:	680b      	ldr	r3, [r1, #0]
 801068c:	a83c      	add	r0, sp, #240	; 0xf0
 801068e:	69de      	ldr	r6, [r3, #28]
 8010690:	462b      	mov	r3, r5
 8010692:	47b0      	blx	r6
    auto rr = rear_right->update(0.1, connected);
 8010694:	f8d4 1a44 	ldr.w	r1, [r4, #2628]	; 0xa44
 8010698:	4a38      	ldr	r2, [pc, #224]	; (801077c <main+0x77c>)
 801069a:	680b      	ldr	r3, [r1, #0]
 801069c:	a840      	add	r0, sp, #256	; 0x100
 801069e:	69de      	ldr	r6, [r3, #28]
 80106a0:	462b      	mov	r3, r5
 80106a2:	47b0      	blx	r6

    if(std::get<3>(fr) == 65535){
 80106a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106a8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80106aa:	4d35      	ldr	r5, [pc, #212]	; (8010780 <main+0x780>)
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d10e      	bne.n	80106ce <main+0x6ce>
      sprintf(error, "Encoder timeout: %s - [FAIL]", front_right->motorName());
 80106b0:	f8d4 0a3c 	ldr.w	r0, [r4, #2620]	; 0xa3c
 80106b4:	6803      	ldr	r3, [r0, #0]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	4798      	blx	r3
 80106ba:	4932      	ldr	r1, [pc, #200]	; (8010784 <main+0x784>)
 80106bc:	4602      	mov	r2, r0
 80106be:	a8e2      	add	r0, sp, #904	; 0x388
 80106c0:	f003 f862 	bl	8013788 <siprintf>
      nh.logerror(error);
 80106c4:	a9e2      	add	r1, sp, #904	; 0x388
 80106c6:	f505 6086 	add.w	r0, r5, #1072	; 0x430
 80106ca:	f7ff fa6b 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    }
    if(std::get<3>(fl) == 65535){
 80106ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106d2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d10d      	bne.n	80106f4 <main+0x6f4>
      sprintf(error, "Encoder timeout: %s - [FAIL]", front_left->motorName());
 80106d8:	f8d5 0a38 	ldr.w	r0, [r5, #2616]	; 0xa38
 80106dc:	6803      	ldr	r3, [r0, #0]
 80106de:	691b      	ldr	r3, [r3, #16]
 80106e0:	4798      	blx	r3
 80106e2:	4928      	ldr	r1, [pc, #160]	; (8010784 <main+0x784>)
 80106e4:	4602      	mov	r2, r0
 80106e6:	a8e2      	add	r0, sp, #904	; 0x388
 80106e8:	f003 f84e 	bl	8013788 <siprintf>
      nh.logerror(error);
 80106ec:	a9e2      	add	r1, sp, #904	; 0x388
 80106ee:	4826      	ldr	r0, [pc, #152]	; (8010788 <main+0x788>)
 80106f0:	f7ff fa58 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    }
    if(std::get<3>(rl) == 65535){
 80106f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106f8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d10d      	bne.n	801071a <main+0x71a>
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_left->motorName());
 80106fe:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	; 0xa40
 8010702:	6803      	ldr	r3, [r0, #0]
 8010704:	691b      	ldr	r3, [r3, #16]
 8010706:	4798      	blx	r3
 8010708:	491e      	ldr	r1, [pc, #120]	; (8010784 <main+0x784>)
 801070a:	4602      	mov	r2, r0
 801070c:	a8e2      	add	r0, sp, #904	; 0x388
 801070e:	f003 f83b 	bl	8013788 <siprintf>
      nh.logerror(error);
 8010712:	a9e2      	add	r1, sp, #904	; 0x388
 8010714:	481c      	ldr	r0, [pc, #112]	; (8010788 <main+0x788>)
 8010716:	f7ff fa45 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    }
    if(std::get<3>(rr) == 65535){
 801071a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801071e:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8010720:	429a      	cmp	r2, r3
 8010722:	d10d      	bne.n	8010740 <main+0x740>
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
 8010724:	f8d5 0a44 	ldr.w	r0, [r5, #2628]	; 0xa44
 8010728:	6803      	ldr	r3, [r0, #0]
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	4798      	blx	r3
 801072e:	4915      	ldr	r1, [pc, #84]	; (8010784 <main+0x784>)
 8010730:	4602      	mov	r2, r0
 8010732:	a8e2      	add	r0, sp, #904	; 0x388
 8010734:	f003 f828 	bl	8013788 <siprintf>
      nh.logerror(error);
 8010738:	a9e2      	add	r1, sp, #904	; 0x388
 801073a:	4813      	ldr	r0, [pc, #76]	; (8010788 <main+0x788>)
 801073c:	f7ff fa32 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 8010740:	9b37      	ldr	r3, [sp, #220]	; 0xdc

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 8010742:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 8010744:	9344      	str	r3, [sp, #272]	; 0x110
 8010746:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    for(i = 0; i < 4; i++){
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 8010748:	f8d4 0a34 	ldr.w	r0, [r4, #2612]	; 0xa34
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 801074c:	9345      	str	r3, [sp, #276]	; 0x114
 801074e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 8010750:	9248      	str	r2, [sp, #288]	; 0x120
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 8010752:	9346      	str	r3, [sp, #280]	; 0x118
 8010754:	9b43      	ldr	r3, [sp, #268]	; 0x10c

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 8010756:	924a      	str	r2, [sp, #296]	; 0x128
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 8010758:	9347      	str	r3, [sp, #284]	; 0x11c

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 801075a:	9b33      	ldr	r3, [sp, #204]	; 0xcc

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
 801075c:	2500      	movs	r5, #0
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 801075e:	9349      	str	r3, [sp, #292]	; 0x124
 8010760:	934b      	str	r3, [sp, #300]	; 0x12c
    for(i = 0; i < 4; i++){
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 8010762:	f7f4 fbf3 	bl	8004f4c <__aeabi_f2d>
    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};

    int i;
    float x_dot = 0;
    float y_dot = 0;
 8010766:	46a9      	mov	r9, r5
    for(i = 0; i < 4; i++){
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 8010768:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 801076c:	ae44      	add	r6, sp, #272	; 0x110

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 801076e:	af48      	add	r7, sp, #288	; 0x120

    int i;
    float x_dot = 0;
 8010770:	9512      	str	r5, [sp, #72]	; 0x48
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 8010772:	f04f 0800 	mov.w	r8, #0
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
 8010776:	971e      	str	r7, [sp, #120]	; 0x78
      x_dot += sin(alpha[i]+beta)*speeds[i];
 8010778:	961f      	str	r6, [sp, #124]	; 0x7c
 801077a:	e007      	b.n	801078c <main+0x78c>
 801077c:	3dcccccd 	.word	0x3dcccccd
 8010780:	200000c0 	.word	0x200000c0
 8010784:	08015bd8 	.word	0x08015bd8
 8010788:	200004f0 	.word	0x200004f0
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
 801078c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801078e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8010792:	931c      	str	r3, [sp, #112]	; 0x70
      x_dot += sin(alpha[i]+beta)*speeds[i];
 8010794:	ab28      	add	r3, sp, #160	; 0xa0
 8010796:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801079a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801079c:	4619      	mov	r1, r3
 801079e:	9314      	str	r3, [sp, #80]	; 0x50
 80107a0:	f7f4 ff40 	bl	8005624 <__addsf3>
 80107a4:	f7f4 fbd2 	bl	8004f4c <__aeabi_f2d>
 80107a8:	4682      	mov	sl, r0
 80107aa:	468b      	mov	fp, r1
 80107ac:	f001 fb16 	bl	8011ddc <sin>
 80107b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80107b2:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80107b6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80107ba:	f7f4 fbc7 	bl	8004f4c <__aeabi_f2d>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80107c6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80107ca:	f7f4 fc13 	bl	8004ff4 <__aeabi_dmul>
 80107ce:	4606      	mov	r6, r0
 80107d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80107d2:	460f      	mov	r7, r1
 80107d4:	f7f4 fbba 	bl	8004f4c <__aeabi_f2d>
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	4630      	mov	r0, r6
 80107de:	4639      	mov	r1, r7
 80107e0:	f7f4 fa56 	bl	8004c90 <__adddf3>
 80107e4:	f7f4 fec8 	bl	8005578 <__aeabi_d2f>
      y_dot += cos(alpha[i]+beta)*speeds[i];
 80107e8:	4659      	mov	r1, fp
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
 80107ea:	9012      	str	r0, [sp, #72]	; 0x48
      y_dot += cos(alpha[i]+beta)*speeds[i];
 80107ec:	4650      	mov	r0, sl
 80107ee:	f001 faa9 	bl	8011d44 <cos>
 80107f2:	4602      	mov	r2, r0
 80107f4:	460b      	mov	r3, r1
 80107f6:	4682      	mov	sl, r0
 80107f8:	468b      	mov	fp, r1
 80107fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80107fe:	f7f4 fbf9 	bl	8004ff4 <__aeabi_dmul>
 8010802:	4606      	mov	r6, r0
 8010804:	4648      	mov	r0, r9
 8010806:	460f      	mov	r7, r1
 8010808:	f7f4 fba0 	bl	8004f4c <__aeabi_f2d>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	4630      	mov	r0, r6
 8010812:	4639      	mov	r1, r7
 8010814:	f7f4 fa3c 	bl	8004c90 <__adddf3>
 8010818:	f7f4 feae 	bl	8005578 <__aeabi_d2f>
 801081c:	4681      	mov	r9, r0
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 801081e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010820:	f7f4 fb94 	bl	8004f4c <__aeabi_f2d>
 8010824:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8010828:	9814      	ldr	r0, [sp, #80]	; 0x50
 801082a:	f7f4 fb8f 	bl	8004f4c <__aeabi_f2d>
 801082e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010832:	4606      	mov	r6, r0
 8010834:	460f      	mov	r7, r1
 8010836:	4650      	mov	r0, sl
 8010838:	4659      	mov	r1, fp
 801083a:	f7f4 fbdb 	bl	8004ff4 <__aeabi_dmul>
 801083e:	4632      	mov	r2, r6
 8010840:	463b      	mov	r3, r7
 8010842:	f7f4 fa25 	bl	8004c90 <__adddf3>
 8010846:	f001 fa7d 	bl	8011d44 <cos>
 801084a:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801084e:	4682      	mov	sl, r0
 8010850:	468b      	mov	fp, r1
 8010852:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8010856:	f7f4 fbcd 	bl	8004ff4 <__aeabi_dmul>
 801085a:	4632      	mov	r2, r6
 801085c:	463b      	mov	r3, r7
 801085e:	f7f4 fa17 	bl	8004c90 <__adddf3>
 8010862:	f001 fabb 	bl	8011ddc <sin>
 8010866:	4652      	mov	r2, sl
 8010868:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 801086c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8010870:	465b      	mov	r3, fp
 8010872:	f7f4 fbbf 	bl	8004ff4 <__aeabi_dmul>
 8010876:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801087a:	4606      	mov	r6, r0
 801087c:	460f      	mov	r7, r1
 801087e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8010882:	f7f4 fbb7 	bl	8004ff4 <__aeabi_dmul>
 8010886:	4602      	mov	r2, r0
 8010888:	460b      	mov	r3, r1
 801088a:	4630      	mov	r0, r6
 801088c:	4639      	mov	r1, r7
 801088e:	f7f4 fcdb 	bl	8005248 <__aeabi_ddiv>
 8010892:	f001 f8b9 	bl	8011a08 <atan>
 8010896:	4606      	mov	r6, r0
 8010898:	460f      	mov	r7, r1
 801089a:	981c      	ldr	r0, [sp, #112]	; 0x70
 801089c:	f7f4 fb56 	bl	8004f4c <__aeabi_f2d>
 80108a0:	4632      	mov	r2, r6
 80108a2:	463b      	mov	r3, r7
 80108a4:	f7f4 f9f2 	bl	8004c8c <__aeabi_dsub>
 80108a8:	f001 fa4c 	bl	8011d44 <cos>
 80108ac:	4602      	mov	r2, r0
 80108ae:	460b      	mov	r3, r1
 80108b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80108b4:	f7f4 fb9e 	bl	8004ff4 <__aeabi_dmul>
 80108b8:	4606      	mov	r6, r0
 80108ba:	4628      	mov	r0, r5
 80108bc:	460f      	mov	r7, r1
 80108be:	f7f4 fb45 	bl	8004f4c <__aeabi_f2d>
 80108c2:	4602      	mov	r2, r0
 80108c4:	460b      	mov	r3, r1
 80108c6:	4630      	mov	r0, r6
 80108c8:	4639      	mov	r1, r7
 80108ca:	f7f4 f9e1 	bl	8004c90 <__adddf3>
 80108ce:	f7f4 fe53 	bl	8005578 <__aeabi_d2f>

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 80108d2:	f108 0801 	add.w	r8, r8, #1
 80108d6:	f1b8 0f04 	cmp.w	r8, #4
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 80108da:	4605      	mov	r5, r0

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 80108dc:	f47f af56 	bne.w	801078c <main+0x78c>
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
    }
    x_dot /= 4;
 80108e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80108e2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80108e6:	f7f4 ffa5 	bl	8005834 <__aeabi_fmul>
    y_dot /= 4;
 80108ea:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
    }
    x_dot /= 4;
 80108ee:	9012      	str	r0, [sp, #72]	; 0x48
    y_dot /= 4;
 80108f0:	4648      	mov	r0, r9
 80108f2:	f7f4 ff9f 	bl	8005834 <__aeabi_fmul>
    theta_dot /= 4;
 80108f6:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
    }
    x_dot /= 4;
    y_dot /= 4;
 80108fa:	901c      	str	r0, [sp, #112]	; 0x70
    theta_dot /= 4;
 80108fc:	4628      	mov	r0, r5
 80108fe:	f7f4 ff99 	bl	8005834 <__aeabi_fmul>
 8010902:	9014      	str	r0, [sp, #80]	; 0x50



    double delta_x = (x_dot * cos(th) - y_dot * sin(th)) * dt;
 8010904:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010906:	f7f4 fb21 	bl	8004f4c <__aeabi_f2d>
 801090a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801090e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010912:	f001 fa17 	bl	8011d44 <cos>
 8010916:	4680      	mov	r8, r0
 8010918:	981c      	ldr	r0, [sp, #112]	; 0x70
 801091a:	4689      	mov	r9, r1
 801091c:	f7f4 fb16 	bl	8004f4c <__aeabi_f2d>
 8010920:	4682      	mov	sl, r0
 8010922:	468b      	mov	fp, r1
 8010924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010928:	f001 fa58 	bl	8011ddc <sin>
    double delta_y = (x_dot * sin(th) + y_dot * cos(th)) * dt;
    double delta_th = theta_dot * dt;

    x += delta_x;
 801092c:	4642      	mov	r2, r8
    y_dot /= 4;
    theta_dot /= 4;



    double delta_x = (x_dot * cos(th) - y_dot * sin(th)) * dt;
 801092e:	4606      	mov	r6, r0
 8010930:	460f      	mov	r7, r1
    double delta_y = (x_dot * sin(th) + y_dot * cos(th)) * dt;
    double delta_th = theta_dot * dt;

    x += delta_x;
 8010932:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010936:	464b      	mov	r3, r9
 8010938:	f7f4 fb5c 	bl	8004ff4 <__aeabi_dmul>
 801093c:	4632      	mov	r2, r6
 801093e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8010942:	463b      	mov	r3, r7
 8010944:	4650      	mov	r0, sl
 8010946:	4659      	mov	r1, fp
 8010948:	f7f4 fb54 	bl	8004ff4 <__aeabi_dmul>
 801094c:	4602      	mov	r2, r0
 801094e:	460b      	mov	r3, r1
 8010950:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8010954:	f7f4 f99a 	bl	8004c8c <__aeabi_dsub>
 8010958:	a379      	add	r3, pc, #484	; (adr r3, 8010b40 <main+0xb40>)
 801095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095e:	f7f4 fb49 	bl	8004ff4 <__aeabi_dmul>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801096a:	f7f4 f991 	bl	8004c90 <__adddf3>
    y += delta_y;
 801096e:	4632      	mov	r2, r6
 8010970:	463b      	mov	r3, r7

    double delta_x = (x_dot * cos(th) - y_dot * sin(th)) * dt;
    double delta_y = (x_dot * sin(th) + y_dot * cos(th)) * dt;
    double delta_th = theta_dot * dt;

    x += delta_x;
 8010972:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    y += delta_y;
 8010976:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801097a:	f7f4 fb3b 	bl	8004ff4 <__aeabi_dmul>
 801097e:	4652      	mov	r2, sl
 8010980:	4606      	mov	r6, r0
 8010982:	460f      	mov	r7, r1
 8010984:	465b      	mov	r3, fp
 8010986:	4640      	mov	r0, r8
 8010988:	4649      	mov	r1, r9
 801098a:	f7f4 fb33 	bl	8004ff4 <__aeabi_dmul>
 801098e:	4602      	mov	r2, r0
 8010990:	460b      	mov	r3, r1
 8010992:	4630      	mov	r0, r6
 8010994:	4639      	mov	r1, r7
 8010996:	f7f4 f97b 	bl	8004c90 <__adddf3>
 801099a:	a369      	add	r3, pc, #420	; (adr r3, 8010b40 <main+0xb40>)
 801099c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a0:	f7f4 fb28 	bl	8004ff4 <__aeabi_dmul>
 80109a4:	4602      	mov	r2, r0
 80109a6:	460b      	mov	r3, r1
 80109a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80109ac:	f7f4 f970 	bl	8004c90 <__adddf3>
 80109b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    th += delta_th;
 80109b4:	4964      	ldr	r1, [pc, #400]	; (8010b48 <main+0xb48>)
 80109b6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80109b8:	f7f4 ff3c 	bl	8005834 <__aeabi_fmul>
 80109bc:	f7f4 fac6 	bl	8004f4c <__aeabi_f2d>
 80109c0:	4602      	mov	r2, r0
 80109c2:	460b      	mov	r3, r1
 80109c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80109c8:	f7f4 f962 	bl	8004c90 <__adddf3>
  static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
  {
    geometry_msgs::Quaternion q;
    q.x = 0;
    q.y = 0;
    q.z = sin(yaw * 0.5);
 80109cc:	2200      	movs	r2, #0
 80109ce:	4b5f      	ldr	r3, [pc, #380]	; (8010b4c <main+0xb4c>)
 80109d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80109d4:	f7f4 fb0e 	bl	8004ff4 <__aeabi_dmul>
 80109d8:	4606      	mov	r6, r0
 80109da:	460f      	mov	r7, r1
 80109dc:	f001 f9fe 	bl	8011ddc <sin>
 80109e0:	f7f4 fdca 	bl	8005578 <__aeabi_d2f>
    q.w = cos(yaw * 0.5);
 80109e4:	4639      	mov	r1, r7
  static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
  {
    geometry_msgs::Quaternion q;
    q.x = 0;
    q.y = 0;
    q.z = sin(yaw * 0.5);
 80109e6:	4683      	mov	fp, r0
    q.w = cos(yaw * 0.5);
 80109e8:	4630      	mov	r0, r6
 80109ea:	f001 f9ab 	bl	8011d44 <cos>
 80109ee:	f7f4 fdc3 	bl	8005578 <__aeabi_d2f>
 80109f2:	4680      	mov	r8, r0


    geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);

    //first, we'll publish the transform over tf
    odom_trans.header.stamp = ros::Time(start_time,0);
 80109f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80109f6:	f7f5 f909 	bl	8005c0c <__aeabi_f2uiz>
      Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
 80109fa:	ad26      	add	r5, sp, #152	; 0x98
 80109fc:	2300      	movs	r3, #0
 80109fe:	9026      	str	r0, [sp, #152]	; 0x98
 8010a00:	9016      	str	r0, [sp, #88]	; 0x58
      {
        normalizeSecNSec(sec, nsec);
 8010a02:	a927      	add	r1, sp, #156	; 0x9c
 8010a04:	4628      	mov	r0, r5
 8010a06:	4e52      	ldr	r6, [pc, #328]	; (8010b50 <main+0xb50>)
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
      Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
 8010a08:	9327      	str	r3, [sp, #156]	; 0x9c
 8010a0a:	9310      	str	r3, [sp, #64]	; 0x40
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";
 8010a0c:	4f51      	ldr	r7, [pc, #324]	; (8010b54 <main+0xb54>)
      {
        normalizeSecNSec(sec, nsec);
 8010a0e:	f7f4 f8ff 	bl	8004c10 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>


    geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);

    //first, we'll publish the transform over tf
    odom_trans.header.stamp = ros::Time(start_time,0);
 8010a12:	e895 0003 	ldmia.w	r5, {r0, r1}
    odom_trans.header.frame_id = "odom";
 8010a16:	4b50      	ldr	r3, [pc, #320]	; (8010b58 <main+0xb58>)


    geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);

    //first, we'll publish the transform over tf
    odom_trans.header.stamp = ros::Time(start_time,0);
 8010a18:	e886 0003 	stmia.w	r6, {r0, r1}
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";

    odom_trans.transform.translation.x = x;
 8010a1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28

    geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);

    //first, we'll publish the transform over tf
    odom_trans.header.stamp = ros::Time(start_time,0);
    odom_trans.header.frame_id = "odom";
 8010a20:	f8c4 3a5c 	str.w	r3, [r4, #2652]	; 0xa5c
    odom_trans.child_frame_id = "base_link";
 8010a24:	f8c4 7a60 	str.w	r7, [r4, #2656]	; 0xa60

    odom_trans.transform.translation.x = x;
 8010a28:	f7f4 fda6 	bl	8005578 <__aeabi_d2f>
 8010a2c:	4682      	mov	sl, r0
 8010a2e:	f8c4 0a6c 	str.w	r0, [r4, #2668]	; 0xa6c
    odom_trans.transform.translation.y = y;
 8010a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010a36:	f7f4 fd9f 	bl	8005578 <__aeabi_d2f>
 8010a3a:	4681      	mov	r9, r0
        nh.advertise(publisher_);
      }

      void sendTransform(geometry_msgs::TransformStamped &transform)
      {
        internal_msg.transforms_length = 1;
 8010a3c:	2101      	movs	r1, #1
    odom_trans.transform.translation.z = 0.0;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	f884 19d4 	strb.w	r1, [r4, #2516]	; 0x9d4
        internal_msg.transforms = &transform;
 8010a44:	f1a6 010c 	sub.w	r1, r6, #12
    odom_trans.header.stamp = ros::Time(start_time,0);
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";

    odom_trans.transform.translation.x = x;
    odom_trans.transform.translation.y = y;
 8010a48:	f8c4 0a70 	str.w	r0, [r4, #2672]	; 0xa70
#include "ros/msg.h"

namespace geometry_msgs
{

  class Quaternion : public ros::Msg
 8010a4c:	f8c4 3a7c 	str.w	r3, [r4, #2684]	; 0xa7c
 8010a50:	f8c4 3a80 	str.w	r3, [r4, #2688]	; 0xa80
 8010a54:	f8c4 8a88 	str.w	r8, [r4, #2696]	; 0xa88
 8010a58:	f8c4 1a1c 	str.w	r1, [r4, #2588]	; 0xa1c
 8010a5c:	f8c4 ba84 	str.w	fp, [r4, #2692]	; 0xa84
        publisher_.publish(&internal_msg);
 8010a60:	f1a6 0184 	sub.w	r1, r6, #132	; 0x84
 8010a64:	f1a6 0034 	sub.w	r0, r6, #52	; 0x34
    odom_trans.transform.translation.z = 0.0;
 8010a68:	f8c4 3a74 	str.w	r3, [r4, #2676]	; 0xa74
 8010a6c:	f7fe ffe7 	bl	800fa3e <ros::Publisher::publish(ros::Msg const*)>
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
      Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
 8010a70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010a72:	9b10      	ldr	r3, [sp, #64]	; 0x40
      {
        normalizeSecNSec(sec, nsec);
 8010a74:	4628      	mov	r0, r5
 8010a76:	a927      	add	r1, sp, #156	; 0x9c
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
      Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
 8010a78:	602a      	str	r2, [r5, #0]
 8010a7a:	606b      	str	r3, [r5, #4]
      {
        normalizeSecNSec(sec, nsec);
 8010a7c:	f7f4 f8c8 	bl	8004c10 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>

    //send the transform
    odom_broadcaster.sendTransform(odom_trans);

    //next, we'll publish the odometry message over ROS
    odom.header.stamp = ros::Time(start_time,0);
 8010a80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a84:	f106 0344 	add.w	r3, r6, #68	; 0x44
 8010a88:	e883 0003 	stmia.w	r3, {r0, r1}
    odom.header.frame_id = "odom";
 8010a8c:	4b32      	ldr	r3, [pc, #200]	; (8010b58 <main+0xb58>)
    odom.twist.twist.linear.x = x_dot;
    odom.twist.twist.linear.y = y_dot;
    odom.twist.twist.angular.z = theta_dot;

    //publish the message
    odom_pub.publish(&odom);
 8010a8e:	f106 0138 	add.w	r1, r6, #56	; 0x38
    //send the transform
    odom_broadcaster.sendTransform(odom_trans);

    //next, we'll publish the odometry message over ROS
    odom.header.stamp = ros::Time(start_time,0);
    odom.header.frame_id = "odom";
 8010a92:	f8c4 3aa0 	str.w	r3, [r4, #2720]	; 0xaa0

    //set the position
    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
 8010a96:	2300      	movs	r3, #0
 8010a98:	f8c4 3abc 	str.w	r3, [r4, #2748]	; 0xabc
 8010a9c:	f8c4 3ac4 	str.w	r3, [r4, #2756]	; 0xac4
 8010aa0:	f8c4 3ac8 	str.w	r3, [r4, #2760]	; 0xac8
    odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = x_dot;
 8010aa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010aa6:	f8c4 8ad0 	str.w	r8, [r4, #2768]	; 0xad0
 8010aaa:	f8c4 3b70 	str.w	r3, [r4, #2928]	; 0xb70
    odom.twist.twist.linear.y = y_dot;
 8010aae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010ab0:	f8c4 bacc 	str.w	fp, [r4, #2764]	; 0xacc
 8010ab4:	f8c4 3b74 	str.w	r3, [r4, #2932]	; 0xb74
    odom.twist.twist.angular.z = theta_dot;
 8010ab8:	9b14      	ldr	r3, [sp, #80]	; 0x50

    //publish the message
    odom_pub.publish(&odom);
 8010aba:	f1a6 0098 	sub.w	r0, r6, #152	; 0x98

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = x_dot;
    odom.twist.twist.linear.y = y_dot;
    odom.twist.twist.angular.z = theta_dot;
 8010abe:	f8c4 3b88 	str.w	r3, [r4, #2952]	; 0xb88
    odom.header.stamp = ros::Time(start_time,0);
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
 8010ac2:	f8c4 9ab8 	str.w	r9, [r4, #2744]	; 0xab8
    //next, we'll publish the odometry message over ROS
    odom.header.stamp = ros::Time(start_time,0);
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = x;
 8010ac6:	f8c4 aab4 	str.w	sl, [r4, #2740]	; 0xab4
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
    odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = "base_link";
 8010aca:	f8c4 7aa4 	str.w	r7, [r4, #2724]	; 0xaa4
    odom.twist.twist.linear.x = x_dot;
    odom.twist.twist.linear.y = y_dot;
    odom.twist.twist.angular.z = theta_dot;

    //publish the message
    odom_pub.publish(&odom);
 8010ace:	f7fe ffb6 	bl	800fa3e <ros::Publisher::publish(ros::Msg const*)>

    //delay(20);
    if((((int)millis()) / 1000.0) - start_time >= dt){
 8010ad2:	f7ef fe37 	bl	8000744 <millis>
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010ada:	f7f4 fa37 	bl	8004f4c <__aeabi_f2d>
 8010ade:	4680      	mov	r8, r0
 8010ae0:	4689      	mov	r9, r1
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	f7f4 fa20 	bl	8004f28 <__aeabi_i2d>
 8010ae8:	2200      	movs	r2, #0
 8010aea:	4b1c      	ldr	r3, [pc, #112]	; (8010b5c <main+0xb5c>)
 8010aec:	f7f4 fbac 	bl	8005248 <__aeabi_ddiv>
 8010af0:	4642      	mov	r2, r8
 8010af2:	464b      	mov	r3, r9
 8010af4:	f7f4 f8ca 	bl	8004c8c <__aeabi_dsub>
 8010af8:	a311      	add	r3, pc, #68	; (adr r3, 8010b40 <main+0xb40>)
 8010afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afe:	f7f4 fcff 	bl	8005500 <__aeabi_dcmpge>
 8010b02:	b128      	cbz	r0, 8010b10 <main+0xb10>
      nh.logerror("Main loop running slower than expected!");
 8010b04:	4916      	ldr	r1, [pc, #88]	; (8010b60 <main+0xb60>)
 8010b06:	f2a6 6024 	subw	r0, r6, #1572	; 0x624
 8010b0a:	f7ff f84b 	bl	800fba4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
 8010b0e:	e012      	b.n	8010b36 <main+0xb36>
    }else{
      while( (((int)millis()) / 1000.0) - start_time <= dt){}
 8010b10:	f7ef fe18 	bl	8000744 <millis>
 8010b14:	f7f4 fa08 	bl	8004f28 <__aeabi_i2d>
 8010b18:	2200      	movs	r2, #0
 8010b1a:	4b10      	ldr	r3, [pc, #64]	; (8010b5c <main+0xb5c>)
 8010b1c:	f7f4 fb94 	bl	8005248 <__aeabi_ddiv>
 8010b20:	4642      	mov	r2, r8
 8010b22:	464b      	mov	r3, r9
 8010b24:	f7f4 f8b2 	bl	8004c8c <__aeabi_dsub>
 8010b28:	a305      	add	r3, pc, #20	; (adr r3, 8010b40 <main+0xb40>)
 8010b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2e:	f7f4 fcdd 	bl	80054ec <__aeabi_dcmple>
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d1ec      	bne.n	8010b10 <main+0xb10>
  float l = sqrt(pow((L/2),2)*2);

  float alpha[4] = {0,0,0,0};


  while (1){
 8010b36:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010b38:	e503      	b.n	8010542 <main+0x542>
 8010b3a:	bf00      	nop
 8010b3c:	f3af 8000 	nop.w
 8010b40:	40000000 	.word	0x40000000
 8010b44:	3f947ae1 	.word	0x3f947ae1
 8010b48:	3ca3d70a 	.word	0x3ca3d70a
 8010b4c:	3fe00000 	.word	0x3fe00000
 8010b50:	20000b14 	.word	0x20000b14
 8010b54:	08015bfa 	.word	0x08015bfa
 8010b58:	08015bf5 	.word	0x08015bf5
 8010b5c:	408f4000 	.word	0x408f4000
 8010b60:	08015c04 	.word	0x08015c04

08010b64 <_GLOBAL__sub_I_USART_FIFO>:
  while (1){
    debug_toggle();
    delay(100);
    nh.spinOnce();
  }
}
 8010b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      /*
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {
 8010b68:	4a78      	ldr	r2, [pc, #480]	; (8010d4c <_GLOBAL__sub_I_USART_FIFO+0x1e8>)
 8010b6a:	4b79      	ldr	r3, [pc, #484]	; (8010d50 <_GLOBAL__sub_I_USART_FIFO+0x1ec>)
      char* * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8010b6c:	4979      	ldr	r1, [pc, #484]	; (8010d54 <_GLOBAL__sub_I_USART_FIFO+0x1f0>)
 8010b6e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
      USART_CNTOUT = 0;
    }
    ArduinoHardware()
    {
      /* Leonardo support */
      iostream = USART1;
 8010b72:	4a79      	ldr	r2, [pc, #484]	; (8010d58 <_GLOBAL__sub_I_USART_FIFO+0x1f4>)
 8010b74:	f8c3 1938 	str.w	r1, [r3, #2360]	; 0x938
 8010b78:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
      baud_ = 115200;
 8010b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010b80:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
      USART_CNTIN = 0;
 8010b84:	2200      	movs	r2, #0
 8010b86:	629a      	str	r2, [r3, #40]	; 0x28
 8010b88:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
      USART_CNTOUT = 0;
 8010b8c:	625a      	str	r2, [r3, #36]	; 0x24
 8010b8e:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 8010b92:	f8c3 2944 	str.w	r2, [r3, #2372]	; 0x944
 8010b96:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 8010b9a:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
 8010b9e:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 8010ba2:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
 8010ba6:	f603 0144 	addw	r1, r3, #2116	; 0x844
 8010baa:	f603 03a8 	addw	r3, r3, #2216	; 0x8a8

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;
 8010bae:	f841 2f04 	str.w	r2, [r1, #4]!
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8010bb2:	4299      	cmp	r1, r3
 8010bb4:	d1fb      	bne.n	8010bae <_GLOBAL__sub_I_USART_FIFO+0x4a>
 8010bb6:	4a69      	ldr	r2, [pc, #420]	; (8010d5c <_GLOBAL__sub_I_USART_FIFO+0x1f8>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;
 8010bb8:	2100      	movs	r1, #0
 8010bba:	f843 1f04 	str.w	r1, [r3, #4]!
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d1fb      	bne.n	8010bba <_GLOBAL__sub_I_USART_FIFO+0x56>
 8010bc2:	2300      	movs	r3, #0
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	4c66      	ldr	r4, [pc, #408]	; (8010d60 <_GLOBAL__sub_I_USART_FIFO+0x1fc>)
 8010bc8:	18e2      	adds	r2, r4, r3
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010bca:	3301      	adds	r3, #1
 8010bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	   message_in[i] = 0;
 8010bd0:	7611      	strb	r1, [r2, #24]
 8010bd2:	4863      	ldr	r0, [pc, #396]	; (8010d60 <_GLOBAL__sub_I_USART_FIFO+0x1fc>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010bd4:	d1f8      	bne.n	8010bc8 <_GLOBAL__sub_I_USART_FIFO+0x64>
 8010bd6:	2300      	movs	r3, #0
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
	   message_out[i] = 0;
 8010bd8:	4619      	mov	r1, r3
 8010bda:	18c2      	adds	r2, r0, r3
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8010bdc:	3301      	adds	r3, #1
 8010bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	   message_out[i] = 0;
 8010be2:	4c5b      	ldr	r4, [pc, #364]	; (8010d50 <_GLOBAL__sub_I_USART_FIFO+0x1ec>)
 8010be4:	f04f 0600 	mov.w	r6, #0
 8010be8:	f882 1218 	strb.w	r1, [r2, #536]	; 0x218
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8010bec:	d1f5      	bne.n	8010bda <_GLOBAL__sub_I_USART_FIFO+0x76>
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010bee:	4b5d      	ldr	r3, [pc, #372]	; (8010d64 <_GLOBAL__sub_I_USART_FIFO+0x200>)
      {
        topic_ = topic_name;
 8010bf0:	4a5d      	ldr	r2, [pc, #372]	; (8010d68 <_GLOBAL__sub_I_USART_FIFO+0x204>)
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010bf2:	f8c4 3960 	str.w	r3, [r4, #2400]	; 0x960
      header(),
      heading_angle(0),
      heading_velocity(0),
      speed(0),
      acceleration(0),
      mode(0)
 8010bf6:	4b5d      	ldr	r3, [pc, #372]	; (8010d6c <_GLOBAL__sub_I_USART_FIFO+0x208>)
      {
        topic_ = topic_name;
 8010bf8:	f8c4 2968 	str.w	r2, [r4, #2408]	; 0x968
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010bfc:	4a5c      	ldr	r2, [pc, #368]	; (8010d70 <_GLOBAL__sub_I_USART_FIFO+0x20c>)
 8010bfe:	f8c4 396c 	str.w	r3, [r4, #2412]	; 0x96c
 8010c02:	4b5c      	ldr	r3, [pc, #368]	; (8010d74 <_GLOBAL__sub_I_USART_FIFO+0x210>)
 8010c04:	f8c4 29a0 	str.w	r2, [r4, #2464]	; 0x9a0
  {
    public:
      uint8_t data;

    UInt8():
      data(0)
 8010c08:	4a5b      	ldr	r2, [pc, #364]	; (8010d78 <_GLOBAL__sub_I_USART_FIFO+0x214>)
 8010c0a:	4f5c      	ldr	r7, [pc, #368]	; (8010d7c <_GLOBAL__sub_I_USART_FIFO+0x218>)
 8010c0c:	f8c4 3998 	str.w	r3, [r4, #2456]	; 0x998
 8010c10:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8010db4 <_GLOBAL__sub_I_USART_FIFO+0x250>
 8010c14:	2301      	movs	r3, #1
 8010c16:	2500      	movs	r5, #0
 8010c18:	f8c4 399c 	str.w	r3, [r4, #2460]	; 0x99c
 8010c1c:	f8c4 29ac 	str.w	r2, [r4, #2476]	; 0x9ac
 8010c20:	f8c4 39b8 	str.w	r3, [r4, #2488]	; 0x9b8
 8010c24:	4a56      	ldr	r2, [pc, #344]	; (8010d80 <_GLOBAL__sub_I_USART_FIFO+0x21c>)
      {
        topic_ = topic_name;
 8010c26:	4b57      	ldr	r3, [pc, #348]	; (8010d84 <_GLOBAL__sub_I_USART_FIFO+0x220>)
 8010c28:	f8c4 8970 	str.w	r8, [r4, #2416]	; 0x970
 8010c2c:	f8c4 6974 	str.w	r6, [r4, #2420]	; 0x974
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 8010c30:	f8c4 6978 	str.w	r6, [r4, #2424]	; 0x978
 8010c34:	f8c4 697c 	str.w	r6, [r4, #2428]	; 0x97c
 8010c38:	f8c4 7980 	str.w	r7, [r4, #2432]	; 0x980
 8010c3c:	f8c4 5984 	str.w	r5, [r4, #2436]	; 0x984
 8010c40:	f8c4 5988 	str.w	r5, [r4, #2440]	; 0x988
 8010c44:	f8c4 598c 	str.w	r5, [r4, #2444]	; 0x98c
 8010c48:	f8c4 5990 	str.w	r5, [r4, #2448]	; 0x990
 8010c4c:	f884 6994 	strb.w	r6, [r4, #2452]	; 0x994
 8010c50:	f884 69b0 	strb.w	r6, [r4, #2480]	; 0x9b0

ros::Subscriber<roberto_msgs::MotorState> motor_sub("throttled_joy_vel", &motor_cb);
//ros::Subscriber<sensor_msgs::Joy> motor_sub("joy", &motor_cb);
ros::Subscriber<std_msgs::UInt8> led_sub("led", &led_cb);

geometry_msgs::TransformStamped odom_trans;
 8010c54:	f604 2048 	addw	r0, r4, #2632	; 0xa48
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010c58:	f8c4 29b4 	str.w	r2, [r4, #2484]	; 0x9b4
      {
        topic_ = topic_name;
 8010c5c:	f8c4 39a8 	str.w	r3, [r4, #2472]	; 0x9a8
 8010c60:	f7fe ff42 	bl	800fae8 <geometry_msgs::TransformStamped::TransformStamped()>
      uint8_t transforms_length;
      geometry_msgs::TransformStamped st_transforms;
      geometry_msgs::TransformStamped * transforms;

    tfMessage():
      transforms_length(0), transforms(NULL)
 8010c64:	4b48      	ldr	r3, [pc, #288]	; (8010d88 <_GLOBAL__sub_I_USART_FIFO+0x224>)
 8010c66:	f884 69d4 	strb.w	r6, [r4, #2516]	; 0x9d4
 8010c6a:	f8c4 39d0 	str.w	r3, [r4, #2512]	; 0x9d0
 8010c6e:	f604 10d8 	addw	r0, r4, #2520	; 0x9d8
 8010c72:	f7fe ff39 	bl	800fae8 <geometry_msgs::TransformStamped::TransformStamped()>
  {
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};
 8010c76:	4b45      	ldr	r3, [pc, #276]	; (8010d8c <_GLOBAL__sub_I_USART_FIFO+0x228>)
 8010c78:	f504 691d 	add.w	r9, r4, #2512	; 0x9d0
 8010c7c:	f8c4 3a20 	str.w	r3, [r4, #2592]	; 0xa20

    Odometry():
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8010c80:	4b43      	ldr	r3, [pc, #268]	; (8010d90 <_GLOBAL__sub_I_USART_FIFO+0x22c>)
 8010c82:	f8c4 6a1c 	str.w	r6, [r4, #2588]	; 0xa1c
 8010c86:	f8c4 3a8c 	str.w	r3, [r4, #2700]	; 0xa8c
      geometry_msgs::Pose pose;
      float covariance[36];

    PoseWithCovariance():
      pose(),
      covariance()
 8010c8a:	4b42      	ldr	r3, [pc, #264]	; (8010d94 <_GLOBAL__sub_I_USART_FIFO+0x230>)
 8010c8c:	f8c4 9a24 	str.w	r9, [r4, #2596]	; 0xa24
 8010c90:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
      geometry_msgs::Point position;
      geometry_msgs::Quaternion orientation;

    Pose():
      position(),
      orientation()
 8010c94:	4b40      	ldr	r3, [pc, #256]	; (8010d98 <_GLOBAL__sub_I_USART_FIFO+0x234>)
 8010c96:	f8c4 6a30 	str.w	r6, [r4, #2608]	; 0xa30
 8010c9a:	f8c4 3aac 	str.w	r3, [r4, #2732]	; 0xaac
      float z;

    Point():
      x(0),
      y(0),
      z(0)
 8010c9e:	4b3f      	ldr	r3, [pc, #252]	; (8010d9c <_GLOBAL__sub_I_USART_FIFO+0x238>)
 8010ca0:	f8c4 8a90 	str.w	r8, [r4, #2704]	; 0xa90
 8010ca4:	f8c4 3ab0 	str.w	r3, [r4, #2736]	; 0xab0

    Quaternion():
      x(0),
      y(0),
      z(0),
      w(0)
 8010ca8:	4b3d      	ldr	r3, [pc, #244]	; (8010da0 <_GLOBAL__sub_I_USART_FIFO+0x23c>)
 8010caa:	f8c4 6a94 	str.w	r6, [r4, #2708]	; 0xa94
 8010cae:	f8c4 6a98 	str.w	r6, [r4, #2712]	; 0xa98
 8010cb2:	f8c4 6a9c 	str.w	r6, [r4, #2716]	; 0xa9c
 8010cb6:	f8c4 7aa0 	str.w	r7, [r4, #2720]	; 0xaa0
 8010cba:	f8c4 7aa4 	str.w	r7, [r4, #2724]	; 0xaa4
 8010cbe:	f8c4 5ab4 	str.w	r5, [r4, #2740]	; 0xab4
 8010cc2:	f8c4 5ab8 	str.w	r5, [r4, #2744]	; 0xab8
 8010cc6:	f8c4 5abc 	str.w	r5, [r4, #2748]	; 0xabc
 8010cca:	f8c4 3ac0 	str.w	r3, [r4, #2752]	; 0xac0
 8010cce:	f8c4 5ac4 	str.w	r5, [r4, #2756]	; 0xac4
 8010cd2:	f8c4 5ac8 	str.w	r5, [r4, #2760]	; 0xac8
 8010cd6:	f8c4 5acc 	str.w	r5, [r4, #2764]	; 0xacc
 8010cda:	f8c4 5ad0 	str.w	r5, [r4, #2768]	; 0xad0
 8010cde:	f604 21d4 	addw	r1, r4, #2772	; 0xad4
 8010ce2:	f604 3464 	addw	r4, r4, #2916	; 0xb64
 8010ce6:	f841 5b04 	str.w	r5, [r1], #4
 8010cea:	42a1      	cmp	r1, r4
 8010cec:	f04f 0200 	mov.w	r2, #0
 8010cf0:	4b17      	ldr	r3, [pc, #92]	; (8010d50 <_GLOBAL__sub_I_USART_FIFO+0x1ec>)
 8010cf2:	d1f8      	bne.n	8010ce6 <_GLOBAL__sub_I_USART_FIFO+0x182>
      geometry_msgs::Twist twist;
      float covariance[36];

    TwistWithCovariance():
      twist(),
      covariance()
 8010cf4:	492b      	ldr	r1, [pc, #172]	; (8010da4 <_GLOBAL__sub_I_USART_FIFO+0x240>)
 8010cf6:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
 8010cfa:	f8c3 1b64 	str.w	r1, [r3, #2916]	; 0xb64
      geometry_msgs::Vector3 linear;
      geometry_msgs::Vector3 angular;

    Twist():
      linear(),
      angular()
 8010cfe:	492a      	ldr	r1, [pc, #168]	; (8010da8 <_GLOBAL__sub_I_USART_FIFO+0x244>)
 8010d00:	f8c3 2b74 	str.w	r2, [r3, #2932]	; 0xb74
 8010d04:	f8c3 1b68 	str.w	r1, [r3, #2920]	; 0xb68
 8010d08:	4928      	ldr	r1, [pc, #160]	; (8010dac <_GLOBAL__sub_I_USART_FIFO+0x248>)
 8010d0a:	f8c3 2b78 	str.w	r2, [r3, #2936]	; 0xb78
 8010d0e:	f8c3 1b6c 	str.w	r1, [r3, #2924]	; 0xb6c
 8010d12:	f8c3 1b7c 	str.w	r1, [r3, #2940]	; 0xb7c
 8010d16:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
 8010d1a:	f8c3 2b84 	str.w	r2, [r3, #2948]	; 0xb84
 8010d1e:	f8c3 2b88 	str.w	r2, [r3, #2952]	; 0xb88
 8010d22:	f603 318c 	addw	r1, r3, #2956	; 0xb8c
 8010d26:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8010d2a:	f841 5b04 	str.w	r5, [r1], #4
 8010d2e:	4a08      	ldr	r2, [pc, #32]	; (8010d50 <_GLOBAL__sub_I_USART_FIFO+0x1ec>)
 8010d30:	4299      	cmp	r1, r3
 8010d32:	f602 208c 	addw	r0, r2, #2700	; 0xa8c
 8010d36:	d1f8      	bne.n	8010d2a <_GLOBAL__sub_I_USART_FIFO+0x1c6>
 8010d38:	4b1d      	ldr	r3, [pc, #116]	; (8010db0 <_GLOBAL__sub_I_USART_FIFO+0x24c>)
 8010d3a:	f8c2 09c0 	str.w	r0, [r2, #2496]	; 0x9c0
 8010d3e:	f8c2 39bc 	str.w	r3, [r2, #2492]	; 0x9bc
 8010d42:	2300      	movs	r3, #0
 8010d44:	f8c2 39cc 	str.w	r3, [r2, #2508]	; 0x9cc
 8010d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d4c:	08015680 	.word	0x08015680
 8010d50:	200000c0 	.word	0x200000c0
 8010d54:	08015518 	.word	0x08015518
 8010d58:	40013800 	.word	0x40013800
 8010d5c:	200009cc 	.word	0x200009cc
 8010d60:	200004f0 	.word	0x200004f0
 8010d64:	08015694 	.word	0x08015694
 8010d68:	08015c59 	.word	0x08015c59
 8010d6c:	08015620 	.word	0x08015620
 8010d70:	080156ac 	.word	0x080156ac
 8010d74:	08004293 	.word	0x08004293
 8010d78:	08015530 	.word	0x08015530
 8010d7c:	08015bd7 	.word	0x08015bd7
 8010d80:	0800428d 	.word	0x0800428d
 8010d84:	08015c6b 	.word	0x08015c6b
 8010d88:	08015668 	.word	0x08015668
 8010d8c:	08015c6f 	.word	0x08015c6f
 8010d90:	08015608 	.word	0x08015608
 8010d94:	080155a8 	.word	0x080155a8
 8010d98:	08015590 	.word	0x08015590
 8010d9c:	08015560 	.word	0x08015560
 8010da0:	08015578 	.word	0x08015578
 8010da4:	080155f0 	.word	0x080155f0
 8010da8:	080155d8 	.word	0x080155d8
 8010dac:	080155c0 	.word	0x080155c0
 8010db0:	08015bf5 	.word	0x08015bf5
 8010db4:	08015548 	.word	0x08015548

08010db8 <servo::motorType()>:
    virtual void setReference(float setPoint);
    virtual float getReference();
    virtual const char* motorName();
    virtual std::tuple<float, float, int, int> update(float dt, bool connected);

    virtual int motorType() { return MOTOR_TYPE_SERVO; }
 8010db8:	2001      	movs	r0, #1
 8010dba:	4770      	bx	lr

08010dbc <DCMotor::motorType()>:
 8010dbc:	2002      	movs	r0, #2
 8010dbe:	4770      	bx	lr

08010dc0 <operator delete(void*)>:
 8010dc0:	f002 bb38 	b.w	8013434 <free>

08010dc4 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8010dc4:	b510      	push	{r4, lr}
 8010dc6:	4604      	mov	r4, r0
 8010dc8:	4b02      	ldr	r3, [pc, #8]	; (8010dd4 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
 8010dca:	6003      	str	r3, [r0, #0]
 8010dcc:	f000 fc62 	bl	8011694 <__cxxabiv1::__class_type_info::~__class_type_info()>
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	bd10      	pop	{r4, pc}
 8010dd4:	08015c7c 	.word	0x08015c7c

08010dd8 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	4604      	mov	r4, r0
 8010ddc:	f7ff fff2 	bl	8010dc4 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
 8010de0:	4620      	mov	r0, r4
 8010de2:	f7ff ffed 	bl	8010dc0 <operator delete(void*)>
 8010de6:	4620      	mov	r0, r4
 8010de8:	bd10      	pop	{r4, pc}

08010dea <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8010dea:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dee:	460e      	mov	r6, r1
 8010df0:	4619      	mov	r1, r3
 8010df2:	4683      	mov	fp, r0
 8010df4:	4617      	mov	r7, r2
 8010df6:	4699      	mov	r9, r3
 8010df8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010dfa:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8010dfe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010e02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e04:	f000 fb58 	bl	80114b8 <std::type_info::operator==(std::type_info const&) const>
 8010e08:	b178      	cbz	r0, 8010e2a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
 8010e0a:	2e00      	cmp	r6, #0
 8010e0c:	602c      	str	r4, [r5, #0]
 8010e0e:	712f      	strb	r7, [r5, #4]
 8010e10:	db06      	blt.n	8010e20 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x36>
 8010e12:	4434      	add	r4, r6
 8010e14:	45a0      	cmp	r8, r4
 8010e16:	bf0c      	ite	eq
 8010e18:	2406      	moveq	r4, #6
 8010e1a:	2401      	movne	r4, #1
 8010e1c:	71ac      	strb	r4, [r5, #6]
 8010e1e:	e01e      	b.n	8010e5e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8010e20:	3602      	adds	r6, #2
 8010e22:	d11c      	bne.n	8010e5e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8010e24:	2301      	movs	r3, #1
 8010e26:	71ab      	strb	r3, [r5, #6]
 8010e28:	e019      	b.n	8010e5e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8010e2a:	4544      	cmp	r4, r8
 8010e2c:	d104      	bne.n	8010e38 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x4e>
 8010e2e:	4651      	mov	r1, sl
 8010e30:	4658      	mov	r0, fp
 8010e32:	f000 fb41 	bl	80114b8 <std::type_info::operator==(std::type_info const&) const>
 8010e36:	b988      	cbnz	r0, 8010e5c <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x72>
 8010e38:	f8db 0008 	ldr.w	r0, [fp, #8]
 8010e3c:	463a      	mov	r2, r7
 8010e3e:	6803      	ldr	r3, [r0, #0]
 8010e40:	950d      	str	r5, [sp, #52]	; 0x34
 8010e42:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8010e46:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8010e4a:	940a      	str	r4, [sp, #40]	; 0x28
 8010e4c:	69dc      	ldr	r4, [r3, #28]
 8010e4e:	4631      	mov	r1, r6
 8010e50:	464b      	mov	r3, r9
 8010e52:	46a4      	mov	ip, r4
 8010e54:	b001      	add	sp, #4
 8010e56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e5a:	4760      	bx	ip
 8010e5c:	716f      	strb	r7, [r5, #5]
 8010e5e:	2000      	movs	r0, #0
 8010e60:	b001      	add	sp, #4
 8010e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e66 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8010e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6a:	9e06      	ldr	r6, [sp, #24]
 8010e6c:	4680      	mov	r8, r0
 8010e6e:	4296      	cmp	r6, r2
 8010e70:	460f      	mov	r7, r1
 8010e72:	4614      	mov	r4, r2
 8010e74:	461d      	mov	r5, r3
 8010e76:	d103      	bne.n	8010e80 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1a>
 8010e78:	4619      	mov	r1, r3
 8010e7a:	f000 fb1d 	bl	80114b8 <std::type_info::operator==(std::type_info const&) const>
 8010e7e:	b958      	cbnz	r0, 8010e98 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x32>
 8010e80:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010e84:	4622      	mov	r2, r4
 8010e86:	6803      	ldr	r3, [r0, #0]
 8010e88:	9606      	str	r6, [sp, #24]
 8010e8a:	6a1e      	ldr	r6, [r3, #32]
 8010e8c:	4639      	mov	r1, r7
 8010e8e:	462b      	mov	r3, r5
 8010e90:	46b4      	mov	ip, r6
 8010e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e96:	4760      	bx	ip
 8010e98:	2006      	movs	r0, #6
 8010e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e9e <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8010e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	460d      	mov	r5, r1
 8010ea6:	4616      	mov	r6, r2
 8010ea8:	461f      	mov	r7, r3
 8010eaa:	f000 fc06 	bl	80116ba <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
 8010eae:	b948      	cbnz	r0, 8010ec4 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
 8010eb0:	68a0      	ldr	r0, [r4, #8]
 8010eb2:	4632      	mov	r2, r6
 8010eb4:	6803      	ldr	r3, [r0, #0]
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	699c      	ldr	r4, [r3, #24]
 8010eba:	463b      	mov	r3, r7
 8010ebc:	46a4      	mov	ip, r4
 8010ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec2:	4760      	bx	ip
 8010ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ec8 <read_uleb128(unsigned char const*, unsigned long*)>:
 8010ec8:	b570      	push	{r4, r5, r6, lr}
 8010eca:	2300      	movs	r3, #0
 8010ecc:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8010ed0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8010ed4:	f810 5b01 	ldrb.w	r5, [r0], #1
 8010ed8:	1994      	adds	r4, r2, r6
 8010eda:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8010ede:	40a2      	lsls	r2, r4
 8010ee0:	4313      	orrs	r3, r2
 8010ee2:	062a      	lsls	r2, r5, #24
 8010ee4:	d4f4      	bmi.n	8010ed0 <read_uleb128(unsigned char const*, unsigned long*)+0x8>
 8010ee6:	600b      	str	r3, [r1, #0]
 8010ee8:	bd70      	pop	{r4, r5, r6, pc}

08010eea <read_sleb128(unsigned char const*, long*)>:
 8010eea:	2300      	movs	r3, #0
 8010eec:	461a      	mov	r2, r3
 8010eee:	b530      	push	{r4, r5, lr}
 8010ef0:	f810 4b01 	ldrb.w	r4, [r0], #1
 8010ef4:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8010ef8:	4095      	lsls	r5, r2
 8010efa:	432b      	orrs	r3, r5
 8010efc:	0625      	lsls	r5, r4, #24
 8010efe:	f102 0207 	add.w	r2, r2, #7
 8010f02:	d4f5      	bmi.n	8010ef0 <read_sleb128(unsigned char const*, long*)+0x6>
 8010f04:	2a1f      	cmp	r2, #31
 8010f06:	d806      	bhi.n	8010f16 <read_sleb128(unsigned char const*, long*)+0x2c>
 8010f08:	0664      	lsls	r4, r4, #25
 8010f0a:	bf42      	ittt	mi
 8010f0c:	f04f 34ff 	movmi.w	r4, #4294967295
 8010f10:	fa04 f202 	lslmi.w	r2, r4, r2
 8010f14:	4313      	orrmi	r3, r2
 8010f16:	600b      	str	r3, [r1, #0]
 8010f18:	bd30      	pop	{r4, r5, pc}

08010f1a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
 8010f1a:	2850      	cmp	r0, #80	; 0x50
 8010f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f1e:	4605      	mov	r5, r0
 8010f20:	460f      	mov	r7, r1
 8010f22:	4614      	mov	r4, r2
 8010f24:	461e      	mov	r6, r3
 8010f26:	d105      	bne.n	8010f34 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x1a>
 8010f28:	1cd0      	adds	r0, r2, #3
 8010f2a:	f020 0003 	bic.w	r0, r0, #3
 8010f2e:	f850 3b04 	ldr.w	r3, [r0], #4
 8010f32:	e033      	b.n	8010f9c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x82>
 8010f34:	f000 030f 	and.w	r3, r0, #15
 8010f38:	2b0c      	cmp	r3, #12
 8010f3a:	d823      	bhi.n	8010f84 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6a>
 8010f3c:	e8df f003 	tbb	[pc, r3]
 8010f40:	1a12071a 	.word	0x1a12071a
 8010f44:	2222221e 	.word	0x2222221e
 8010f48:	1a160c22 	.word	0x1a160c22
 8010f4c:	1e          	.byte	0x1e
 8010f4d:	00          	.byte	0x00
 8010f4e:	a901      	add	r1, sp, #4
 8010f50:	4620      	mov	r0, r4
 8010f52:	f7ff ffb9 	bl	8010ec8 <read_uleb128(unsigned char const*, unsigned long*)>
 8010f56:	e003      	b.n	8010f60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x46>
 8010f58:	a901      	add	r1, sp, #4
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f7ff ffc5 	bl	8010eea <read_sleb128(unsigned char const*, long*)>
 8010f60:	9b01      	ldr	r3, [sp, #4]
 8010f62:	e011      	b.n	8010f88 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010f64:	4620      	mov	r0, r4
 8010f66:	f830 3b02 	ldrh.w	r3, [r0], #2
 8010f6a:	e00d      	b.n	8010f88 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8010f72:	e009      	b.n	8010f88 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010f74:	4620      	mov	r0, r4
 8010f76:	f850 3b04 	ldr.w	r3, [r0], #4
 8010f7a:	e005      	b.n	8010f88 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f850 3b08 	ldr.w	r3, [r0], #8
 8010f82:	e001      	b.n	8010f88 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010f84:	f002 f9aa 	bl	80132dc <abort>
 8010f88:	b143      	cbz	r3, 8010f9c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x82>
 8010f8a:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8010f8e:	2a10      	cmp	r2, #16
 8010f90:	bf18      	it	ne
 8010f92:	463c      	movne	r4, r7
 8010f94:	062a      	lsls	r2, r5, #24
 8010f96:	4423      	add	r3, r4
 8010f98:	bf48      	it	mi
 8010f9a:	681b      	ldrmi	r3, [r3, #0]
 8010f9c:	6033      	str	r3, [r6, #0]
 8010f9e:	b003      	add	sp, #12
 8010fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fa2 <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
 8010fa2:	b508      	push	{r3, lr}
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2bff      	cmp	r3, #255	; 0xff
 8010fa8:	4608      	mov	r0, r1
 8010faa:	d01c      	beq.n	8010fe6 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010fac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010fb0:	2b20      	cmp	r3, #32
 8010fb2:	d00e      	beq.n	8010fd2 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x30>
 8010fb4:	d803      	bhi.n	8010fbe <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1c>
 8010fb6:	b1b3      	cbz	r3, 8010fe6 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010fb8:	2b10      	cmp	r3, #16
 8010fba:	d112      	bne.n	8010fe2 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 8010fbc:	e013      	b.n	8010fe6 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010fbe:	2b40      	cmp	r3, #64	; 0x40
 8010fc0:	d00b      	beq.n	8010fda <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
 8010fc2:	2b50      	cmp	r3, #80	; 0x50
 8010fc4:	d00f      	beq.n	8010fe6 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010fc6:	2b30      	cmp	r3, #48	; 0x30
 8010fc8:	d10b      	bne.n	8010fe2 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 8010fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010fce:	f7f5 bdab 	b.w	8006b28 <_Unwind_GetDataRelBase>
 8010fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010fd6:	f7f5 bda3 	b.w	8006b20 <_Unwind_GetTextRelBase>
 8010fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010fde:	f7f5 bd8f 	b.w	8006b00 <_Unwind_GetRegionStart>
 8010fe2:	f002 f97b 	bl	80132dc <abort>
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	bd08      	pop	{r3, pc}

08010fea <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>:
 8010fea:	b570      	push	{r4, r5, r6, lr}
 8010fec:	460c      	mov	r4, r1
 8010fee:	4601      	mov	r1, r0
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	4615      	mov	r5, r2
 8010ff4:	461e      	mov	r6, r3
 8010ff6:	f7ff ffd4 	bl	8010fa2 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8010ffa:	4633      	mov	r3, r6
 8010ffc:	462a      	mov	r2, r5
 8010ffe:	4601      	mov	r1, r0
 8011000:	4620      	mov	r0, r4
 8011002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011006:	f7ff bf88 	b.w	8010f1a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>

0801100a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
 801100a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801100c:	460e      	mov	r6, r1
 801100e:	4614      	mov	r4, r2
 8011010:	4605      	mov	r5, r0
 8011012:	b110      	cbz	r0, 801101a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>
 8011014:	f7f5 fd74 	bl	8006b00 <_Unwind_GetRegionStart>
 8011018:	e7ff      	b.n	801101a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>
 801101a:	6020      	str	r0, [r4, #0]
 801101c:	7831      	ldrb	r1, [r6, #0]
 801101e:	1c72      	adds	r2, r6, #1
 8011020:	29ff      	cmp	r1, #255	; 0xff
 8011022:	d005      	beq.n	8011030 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x26>
 8011024:	1d23      	adds	r3, r4, #4
 8011026:	4628      	mov	r0, r5
 8011028:	f7ff ffdf 	bl	8010fea <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 801102c:	4602      	mov	r2, r0
 801102e:	e000      	b.n	8011032 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x28>
 8011030:	6060      	str	r0, [r4, #4]
 8011032:	7813      	ldrb	r3, [r2, #0]
 8011034:	1c50      	adds	r0, r2, #1
 8011036:	2bff      	cmp	r3, #255	; 0xff
 8011038:	7523      	strb	r3, [r4, #20]
 801103a:	d007      	beq.n	801104c <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x42>
 801103c:	2310      	movs	r3, #16
 801103e:	7523      	strb	r3, [r4, #20]
 8011040:	a901      	add	r1, sp, #4
 8011042:	f7ff ff41 	bl	8010ec8 <read_uleb128(unsigned char const*, unsigned long*)>
 8011046:	9b01      	ldr	r3, [sp, #4]
 8011048:	4403      	add	r3, r0
 801104a:	e000      	b.n	801104e <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x44>
 801104c:	2300      	movs	r3, #0
 801104e:	60e3      	str	r3, [r4, #12]
 8011050:	7803      	ldrb	r3, [r0, #0]
 8011052:	a901      	add	r1, sp, #4
 8011054:	7563      	strb	r3, [r4, #21]
 8011056:	3001      	adds	r0, #1
 8011058:	f7ff ff36 	bl	8010ec8 <read_uleb128(unsigned char const*, unsigned long*)>
 801105c:	9b01      	ldr	r3, [sp, #4]
 801105e:	4403      	add	r3, r0
 8011060:	6123      	str	r3, [r4, #16]
 8011062:	b002      	add	sp, #8
 8011064:	bd70      	pop	{r4, r5, r6, pc}

08011066 <_Unwind_GetGR>:
 8011066:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011068:	ab03      	add	r3, sp, #12
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	2300      	movs	r3, #0
 801106e:	460a      	mov	r2, r1
 8011070:	4619      	mov	r1, r3
 8011072:	f7f4 ffbb 	bl	8005fec <_Unwind_VRS_Get>
 8011076:	9803      	ldr	r0, [sp, #12]
 8011078:	b005      	add	sp, #20
 801107a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011080 <__gxx_personality_v0>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	2300      	movs	r3, #0
 8011086:	b091      	sub	sp, #68	; 0x44
 8011088:	9304      	str	r3, [sp, #16]
 801108a:	f000 0303 	and.w	r3, r0, #3
 801108e:	2b01      	cmp	r3, #1
 8011090:	4607      	mov	r7, r0
 8011092:	460c      	mov	r4, r1
 8011094:	4615      	mov	r5, r2
 8011096:	d00e      	beq.n	80110b6 <__gxx_personality_v0+0x36>
 8011098:	d302      	bcc.n	80110a0 <__gxx_personality_v0+0x20>
 801109a:	2b02      	cmp	r3, #2
 801109c:	d002      	beq.n	80110a4 <__gxx_personality_v0+0x24>
 801109e:	e0ef      	b.n	8011280 <__gxx_personality_v0+0x200>
 80110a0:	0702      	lsls	r2, r0, #28
 80110a2:	d517      	bpl.n	80110d4 <__gxx_personality_v0+0x54>
 80110a4:	4629      	mov	r1, r5
 80110a6:	4620      	mov	r0, r4
 80110a8:	f7f5 fd16 	bl	8006ad8 <__gnu_unwind_frame>
 80110ac:	b108      	cbz	r0, 80110b2 <__gxx_personality_v0+0x32>
 80110ae:	2009      	movs	r0, #9
 80110b0:	e19f      	b.n	80113f2 <__gxx_personality_v0+0x372>
 80110b2:	2008      	movs	r0, #8
 80110b4:	e19d      	b.n	80113f2 <__gxx_personality_v0+0x372>
 80110b6:	f000 0208 	and.w	r2, r0, #8
 80110ba:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 80110be:	b95a      	cbnz	r2, 80110d8 <__gxx_personality_v0+0x58>
 80110c0:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80110c4:	4628      	mov	r0, r5
 80110c6:	210d      	movs	r1, #13
 80110c8:	f7ff ffcd 	bl	8011066 <_Unwind_GetGR>
 80110cc:	4580      	cmp	r8, r0
 80110ce:	d120      	bne.n	8011112 <__gxx_personality_v0+0x92>
 80110d0:	2606      	movs	r6, #6
 80110d2:	e002      	b.n	80110da <__gxx_personality_v0+0x5a>
 80110d4:	2601      	movs	r6, #1
 80110d6:	e000      	b.n	80110da <__gxx_personality_v0+0x5a>
 80110d8:	2602      	movs	r6, #2
 80110da:	ab10      	add	r3, sp, #64	; 0x40
 80110dc:	f843 4d2c 	str.w	r4, [r3, #-44]!
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	f007 0708 	and.w	r7, r7, #8
 80110e6:	2300      	movs	r3, #0
 80110e8:	433e      	orrs	r6, r7
 80110ea:	220c      	movs	r2, #12
 80110ec:	4619      	mov	r1, r3
 80110ee:	4628      	mov	r0, r5
 80110f0:	f7f4 ffa2 	bl	8006038 <_Unwind_VRS_Set>
 80110f4:	2e06      	cmp	r6, #6
 80110f6:	d117      	bne.n	8011128 <__gxx_personality_v0+0xa8>
 80110f8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 80110fc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80110fe:	f1b8 0f00 	cmp.w	r8, #0
 8011102:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 8011106:	bf0c      	ite	eq
 8011108:	f04f 0a01 	moveq.w	sl, #1
 801110c:	f04f 0a03 	movne.w	sl, #3
 8011110:	e105      	b.n	801131e <__gxx_personality_v0+0x29e>
 8011112:	aa10      	add	r2, sp, #64	; 0x40
 8011114:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8011118:	9200      	str	r2, [sp, #0]
 801111a:	4633      	mov	r3, r6
 801111c:	4631      	mov	r1, r6
 801111e:	220c      	movs	r2, #12
 8011120:	4628      	mov	r0, r5
 8011122:	f7f4 ff89 	bl	8006038 <_Unwind_VRS_Set>
 8011126:	2602      	movs	r6, #2
 8011128:	4628      	mov	r0, r5
 801112a:	f7f5 fcef 	bl	8006b0c <_Unwind_GetLanguageSpecificData>
 801112e:	4681      	mov	r9, r0
 8011130:	2800      	cmp	r0, #0
 8011132:	d0b7      	beq.n	80110a4 <__gxx_personality_v0+0x24>
 8011134:	aa0a      	add	r2, sp, #40	; 0x28
 8011136:	4601      	mov	r1, r0
 8011138:	4628      	mov	r0, r5
 801113a:	f7ff ff66 	bl	801100a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 801113e:	4629      	mov	r1, r5
 8011140:	4680      	mov	r8, r0
 8011142:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011146:	f7ff ff2c 	bl	8010fa2 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 801114a:	210f      	movs	r1, #15
 801114c:	900c      	str	r0, [sp, #48]	; 0x30
 801114e:	4628      	mov	r0, r5
 8011150:	f7ff ff89 	bl	8011066 <_Unwind_GetGR>
 8011154:	f020 0001 	bic.w	r0, r0, #1
 8011158:	1e47      	subs	r7, r0, #1
 801115a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801115c:	4598      	cmp	r8, r3
 801115e:	f080 813f 	bcs.w	80113e0 <__gxx_personality_v0+0x360>
 8011162:	4642      	mov	r2, r8
 8011164:	ab06      	add	r3, sp, #24
 8011166:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 801116a:	2000      	movs	r0, #0
 801116c:	f7ff ff3d 	bl	8010fea <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 8011170:	ab07      	add	r3, sp, #28
 8011172:	4602      	mov	r2, r0
 8011174:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8011178:	2000      	movs	r0, #0
 801117a:	f7ff ff36 	bl	8010fea <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 801117e:	ab08      	add	r3, sp, #32
 8011180:	4602      	mov	r2, r0
 8011182:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8011186:	2000      	movs	r0, #0
 8011188:	f7ff ff2f 	bl	8010fea <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 801118c:	a909      	add	r1, sp, #36	; 0x24
 801118e:	f7ff fe9b 	bl	8010ec8 <read_uleb128(unsigned char const*, unsigned long*)>
 8011192:	9b06      	ldr	r3, [sp, #24]
 8011194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011196:	4680      	mov	r8, r0
 8011198:	4413      	add	r3, r2
 801119a:	429f      	cmp	r7, r3
 801119c:	d202      	bcs.n	80111a4 <__gxx_personality_v0+0x124>
 801119e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80111a2:	e7da      	b.n	801115a <__gxx_personality_v0+0xda>
 80111a4:	9a07      	ldr	r2, [sp, #28]
 80111a6:	4413      	add	r3, r2
 80111a8:	429f      	cmp	r7, r3
 80111aa:	d2d6      	bcs.n	801115a <__gxx_personality_v0+0xda>
 80111ac:	9808      	ldr	r0, [sp, #32]
 80111ae:	b118      	cbz	r0, 80111b8 <__gxx_personality_v0+0x138>
 80111b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111b2:	eb00 0803 	add.w	r8, r0, r3
 80111b6:	e000      	b.n	80111ba <__gxx_personality_v0+0x13a>
 80111b8:	4680      	mov	r8, r0
 80111ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111bc:	b110      	cbz	r0, 80111c4 <__gxx_personality_v0+0x144>
 80111be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80111c0:	3801      	subs	r0, #1
 80111c2:	4438      	add	r0, r7
 80111c4:	f1b8 0f00 	cmp.w	r8, #0
 80111c8:	f43f af6c 	beq.w	80110a4 <__gxx_personality_v0+0x24>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	f000 810c 	beq.w	80113ea <__gxx_personality_v0+0x36a>
 80111d2:	f016 0308 	ands.w	r3, r6, #8
 80111d6:	9302      	str	r3, [sp, #8]
 80111d8:	d014      	beq.n	8011204 <__gxx_personality_v0+0x184>
 80111da:	2347      	movs	r3, #71	; 0x47
 80111dc:	7023      	strb	r3, [r4, #0]
 80111de:	234e      	movs	r3, #78	; 0x4e
 80111e0:	7063      	strb	r3, [r4, #1]
 80111e2:	2355      	movs	r3, #85	; 0x55
 80111e4:	70a3      	strb	r3, [r4, #2]
 80111e6:	2343      	movs	r3, #67	; 0x43
 80111e8:	70e3      	strb	r3, [r4, #3]
 80111ea:	2346      	movs	r3, #70	; 0x46
 80111ec:	7123      	strb	r3, [r4, #4]
 80111ee:	234f      	movs	r3, #79	; 0x4f
 80111f0:	7163      	strb	r3, [r4, #5]
 80111f2:	2352      	movs	r3, #82	; 0x52
 80111f4:	71a3      	strb	r3, [r4, #6]
 80111f6:	2300      	movs	r3, #0
 80111f8:	71e3      	strb	r3, [r4, #7]
 80111fa:	f04f 0a00 	mov.w	sl, #0
 80111fe:	f06f 0b03 	mvn.w	fp, #3
 8011202:	e01b      	b.n	801123c <__gxx_personality_v0+0x1bc>
 8011204:	79e3      	ldrb	r3, [r4, #7]
 8011206:	2b01      	cmp	r3, #1
 8011208:	bf0c      	ite	eq
 801120a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 801120e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8011212:	9304      	str	r3, [sp, #16]
 8011214:	e7f1      	b.n	80111fa <__gxx_personality_v0+0x17a>
 8011216:	2704      	movs	r7, #4
 8011218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801121a:	ab09      	add	r3, sp, #36	; 0x24
 801121c:	fb07 2211 	mls	r2, r7, r1, r2
 8011220:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011222:	f7ff fe7a 	bl	8010f1a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8011226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011228:	2900      	cmp	r1, #0
 801122a:	f000 80d5 	beq.w	80113d8 <__gxx_personality_v0+0x358>
 801122e:	bb6c      	cbnz	r4, 801128c <__gxx_personality_v0+0x20c>
 8011230:	9f08      	ldr	r7, [sp, #32]
 8011232:	2f00      	cmp	r7, #0
 8011234:	d059      	beq.n	80112ea <__gxx_personality_v0+0x26a>
 8011236:	9b03      	ldr	r3, [sp, #12]
 8011238:	443b      	add	r3, r7
 801123a:	4618      	mov	r0, r3
 801123c:	a907      	add	r1, sp, #28
 801123e:	f7ff fe54 	bl	8010eea <read_sleb128(unsigned char const*, long*)>
 8011242:	a908      	add	r1, sp, #32
 8011244:	9003      	str	r0, [sp, #12]
 8011246:	f7ff fe50 	bl	8010eea <read_sleb128(unsigned char const*, long*)>
 801124a:	9907      	ldr	r1, [sp, #28]
 801124c:	2900      	cmp	r1, #0
 801124e:	d049      	beq.n	80112e4 <__gxx_personality_v0+0x264>
 8011250:	dd25      	ble.n	801129e <__gxx_personality_v0+0x21e>
 8011252:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011256:	28ff      	cmp	r0, #255	; 0xff
 8011258:	d014      	beq.n	8011284 <__gxx_personality_v0+0x204>
 801125a:	f000 0307 	and.w	r3, r0, #7
 801125e:	2b04      	cmp	r3, #4
 8011260:	d80e      	bhi.n	8011280 <__gxx_personality_v0+0x200>
 8011262:	a201      	add	r2, pc, #4	; (adr r2, 8011268 <__gxx_personality_v0+0x1e8>)
 8011264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011268:	08011217 	.word	0x08011217
 801126c:	08011281 	.word	0x08011281
 8011270:	08011289 	.word	0x08011289
 8011274:	08011217 	.word	0x08011217
 8011278:	0801127d 	.word	0x0801127d
 801127c:	2708      	movs	r7, #8
 801127e:	e7cb      	b.n	8011218 <__gxx_personality_v0+0x198>
 8011280:	f002 f82c 	bl	80132dc <abort>
 8011284:	2700      	movs	r7, #0
 8011286:	e7c7      	b.n	8011218 <__gxx_personality_v0+0x198>
 8011288:	2702      	movs	r7, #2
 801128a:	e7c5      	b.n	8011218 <__gxx_personality_v0+0x198>
 801128c:	ab04      	add	r3, sp, #16
 801128e:	2200      	movs	r2, #0
 8011290:	4620      	mov	r0, r4
 8011292:	f000 f94d 	bl	8011530 <__cxa_type_match>
 8011296:	2800      	cmp	r0, #0
 8011298:	f040 809e 	bne.w	80113d8 <__gxx_personality_v0+0x358>
 801129c:	e7c8      	b.n	8011230 <__gxx_personality_v0+0x1b0>
 801129e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80112a0:	1c4a      	adds	r2, r1, #1
 80112a2:	b1b4      	cbz	r4, 80112d2 <__gxx_personality_v0+0x252>
 80112a4:	9b02      	ldr	r3, [sp, #8]
 80112a6:	b9a3      	cbnz	r3, 80112d2 <__gxx_personality_v0+0x252>
 80112a8:	fb0b 7202 	mla	r2, fp, r2, r7
 80112ac:	9b04      	ldr	r3, [sp, #16]
 80112ae:	1f17      	subs	r7, r2, #4
 80112b0:	9306      	str	r3, [sp, #24]
 80112b2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80112b6:	b141      	cbz	r1, 80112ca <__gxx_personality_v0+0x24a>
 80112b8:	ab06      	add	r3, sp, #24
 80112ba:	2200      	movs	r2, #0
 80112bc:	4439      	add	r1, r7
 80112be:	4620      	mov	r0, r4
 80112c0:	f000 f936 	bl	8011530 <__cxa_type_match>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d0f4      	beq.n	80112b2 <__gxx_personality_v0+0x232>
 80112c8:	2101      	movs	r1, #1
 80112ca:	f081 0101 	eor.w	r1, r1, #1
 80112ce:	b2c9      	uxtb	r1, r1
 80112d0:	e005      	b.n	80112de <__gxx_personality_v0+0x25e>
 80112d2:	fb0b f202 	mul.w	r2, fp, r2
 80112d6:	58b9      	ldr	r1, [r7, r2]
 80112d8:	fab1 f181 	clz	r1, r1
 80112dc:	0949      	lsrs	r1, r1, #5
 80112de:	2900      	cmp	r1, #0
 80112e0:	d0a6      	beq.n	8011230 <__gxx_personality_v0+0x1b0>
 80112e2:	e079      	b.n	80113d8 <__gxx_personality_v0+0x358>
 80112e4:	f04f 0a01 	mov.w	sl, #1
 80112e8:	e7a2      	b.n	8011230 <__gxx_personality_v0+0x1b0>
 80112ea:	f1ba 0f00 	cmp.w	sl, #0
 80112ee:	f43f aed9 	beq.w	80110a4 <__gxx_personality_v0+0x24>
 80112f2:	f04f 0a02 	mov.w	sl, #2
 80112f6:	07f3      	lsls	r3, r6, #31
 80112f8:	d511      	bpl.n	801131e <__gxx_personality_v0+0x29e>
 80112fa:	f1ba 0f02 	cmp.w	sl, #2
 80112fe:	f43f aed1 	beq.w	80110a4 <__gxx_personality_v0+0x24>
 8011302:	210d      	movs	r1, #13
 8011304:	4628      	mov	r0, r5
 8011306:	9e04      	ldr	r6, [sp, #16]
 8011308:	f7ff fead 	bl	8011066 <_Unwind_GetGR>
 801130c:	6266      	str	r6, [r4, #36]	; 0x24
 801130e:	6220      	str	r0, [r4, #32]
 8011310:	62a7      	str	r7, [r4, #40]	; 0x28
 8011312:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8011316:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 801131a:	2006      	movs	r0, #6
 801131c:	e069      	b.n	80113f2 <__gxx_personality_v0+0x372>
 801131e:	f016 0608 	ands.w	r6, r6, #8
 8011322:	d008      	beq.n	8011336 <__gxx_personality_v0+0x2b6>
 8011324:	f1ba 0f01 	cmp.w	sl, #1
 8011328:	d101      	bne.n	801132e <__gxx_personality_v0+0x2ae>
 801132a:	f000 f893 	bl	8011454 <std::terminate()>
 801132e:	2f00      	cmp	r7, #0
 8011330:	da24      	bge.n	801137c <__gxx_personality_v0+0x2fc>
 8011332:	f000 f8b1 	bl	8011498 <std::unexpected()>
 8011336:	f1ba 0f01 	cmp.w	sl, #1
 801133a:	d102      	bne.n	8011342 <__gxx_personality_v0+0x2c2>
 801133c:	4620      	mov	r0, r4
 801133e:	f000 fa2a 	bl	8011796 <__cxa_call_terminate>
 8011342:	2f00      	cmp	r7, #0
 8011344:	da1a      	bge.n	801137c <__gxx_personality_v0+0x2fc>
 8011346:	aa0a      	add	r2, sp, #40	; 0x28
 8011348:	4649      	mov	r1, r9
 801134a:	4628      	mov	r0, r5
 801134c:	f7ff fe5d 	bl	801100a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 8011350:	4629      	mov	r1, r5
 8011352:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011356:	f7ff fe24 	bl	8010fa2 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 801135a:	f06f 0303 	mvn.w	r3, #3
 801135e:	fb07 3303 	mla	r3, r7, r3, r3
 8011362:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011364:	900c      	str	r0, [sp, #48]	; 0x30
 8011366:	4413      	add	r3, r2
 8011368:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 801136c:	b10a      	cbz	r2, 8011372 <__gxx_personality_v0+0x2f2>
 801136e:	3601      	adds	r6, #1
 8011370:	e7fa      	b.n	8011368 <__gxx_personality_v0+0x2e8>
 8011372:	2204      	movs	r2, #4
 8011374:	62a6      	str	r6, [r4, #40]	; 0x28
 8011376:	62e0      	str	r0, [r4, #44]	; 0x2c
 8011378:	6322      	str	r2, [r4, #48]	; 0x30
 801137a:	6363      	str	r3, [r4, #52]	; 0x34
 801137c:	ab10      	add	r3, sp, #64	; 0x40
 801137e:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	2300      	movs	r3, #0
 8011386:	461a      	mov	r2, r3
 8011388:	4619      	mov	r1, r3
 801138a:	4628      	mov	r0, r5
 801138c:	f7f4 fe54 	bl	8006038 <_Unwind_VRS_Set>
 8011390:	ab10      	add	r3, sp, #64	; 0x40
 8011392:	f843 7d20 	str.w	r7, [r3, #-32]!
 8011396:	9300      	str	r3, [sp, #0]
 8011398:	2300      	movs	r3, #0
 801139a:	4619      	mov	r1, r3
 801139c:	2201      	movs	r2, #1
 801139e:	4628      	mov	r0, r5
 80113a0:	f7f4 fe4a 	bl	8006038 <_Unwind_VRS_Set>
 80113a4:	210f      	movs	r1, #15
 80113a6:	4628      	mov	r0, r5
 80113a8:	f7ff fe5d 	bl	8011066 <_Unwind_GetGR>
 80113ac:	f000 0001 	and.w	r0, r0, #1
 80113b0:	ab10      	add	r3, sp, #64	; 0x40
 80113b2:	ea40 0008 	orr.w	r0, r0, r8
 80113b6:	f843 0d24 	str.w	r0, [r3, #-36]!
 80113ba:	9300      	str	r3, [sp, #0]
 80113bc:	2300      	movs	r3, #0
 80113be:	220f      	movs	r2, #15
 80113c0:	4619      	mov	r1, r3
 80113c2:	4628      	mov	r0, r5
 80113c4:	f7f4 fe38 	bl	8006038 <_Unwind_VRS_Set>
 80113c8:	f1ba 0f02 	cmp.w	sl, #2
 80113cc:	d102      	bne.n	80113d4 <__gxx_personality_v0+0x354>
 80113ce:	4620      	mov	r0, r4
 80113d0:	f000 f90a 	bl	80115e8 <__cxa_begin_cleanup>
 80113d4:	2007      	movs	r0, #7
 80113d6:	e00c      	b.n	80113f2 <__gxx_personality_v0+0x372>
 80113d8:	9f07      	ldr	r7, [sp, #28]
 80113da:	f04f 0a03 	mov.w	sl, #3
 80113de:	e78a      	b.n	80112f6 <__gxx_personality_v0+0x276>
 80113e0:	f04f 0800 	mov.w	r8, #0
 80113e4:	f04f 0a01 	mov.w	sl, #1
 80113e8:	e001      	b.n	80113ee <__gxx_personality_v0+0x36e>
 80113ea:	f04f 0a02 	mov.w	sl, #2
 80113ee:	2700      	movs	r7, #0
 80113f0:	e781      	b.n	80112f6 <__gxx_personality_v0+0x276>
 80113f2:	b011      	add	sp, #68	; 0x44
 80113f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080113f8 <operator new(unsigned int)>:
 80113f8:	b510      	push	{r4, lr}
 80113fa:	2800      	cmp	r0, #0
 80113fc:	bf14      	ite	ne
 80113fe:	4604      	movne	r4, r0
 8011400:	2401      	moveq	r4, #1
 8011402:	4620      	mov	r0, r4
 8011404:	f002 f80e 	bl	8013424 <malloc>
 8011408:	b930      	cbnz	r0, 8011418 <operator new(unsigned int)+0x20>
 801140a:	f000 f9f7 	bl	80117fc <std::get_new_handler()>
 801140e:	b908      	cbnz	r0, 8011414 <operator new(unsigned int)+0x1c>
 8011410:	f001 ff64 	bl	80132dc <abort>
 8011414:	4780      	blx	r0
 8011416:	e7f4      	b.n	8011402 <operator new(unsigned int)+0xa>
 8011418:	bd10      	pop	{r4, pc}

0801141a <__cxxabiv1::__terminate(void (*)())>:
 801141a:	b508      	push	{r3, lr}
 801141c:	4780      	blx	r0
 801141e:	f001 ff5d 	bl	80132dc <abort>
	...

08011424 <std::set_terminate(void (*)())>:
 8011424:	4602      	mov	r2, r0
 8011426:	f3bf 8f5f 	dmb	sy
 801142a:	4b05      	ldr	r3, [pc, #20]	; (8011440 <std::set_terminate(void (*)())+0x1c>)
 801142c:	e853 0f00 	ldrex	r0, [r3]
 8011430:	e843 2100 	strex	r1, r2, [r3]
 8011434:	2900      	cmp	r1, #0
 8011436:	d1f9      	bne.n	801142c <std::set_terminate(void (*)())+0x8>
 8011438:	f3bf 8f5f 	dmb	sy
 801143c:	4770      	bx	lr
 801143e:	bf00      	nop
 8011440:	2000002c 	.word	0x2000002c

08011444 <std::get_terminate()>:
 8011444:	4b02      	ldr	r3, [pc, #8]	; (8011450 <std::get_terminate()+0xc>)
 8011446:	6818      	ldr	r0, [r3, #0]
 8011448:	f3bf 8f5f 	dmb	sy
 801144c:	4770      	bx	lr
 801144e:	bf00      	nop
 8011450:	2000002c 	.word	0x2000002c

08011454 <std::terminate()>:
 8011454:	b508      	push	{r3, lr}
 8011456:	f7ff fff5 	bl	8011444 <std::get_terminate()>
 801145a:	f7ff ffde 	bl	801141a <__cxxabiv1::__terminate(void (*)())>

0801145e <__cxxabiv1::__unexpected(void (*)())>:
 801145e:	b508      	push	{r3, lr}
 8011460:	4780      	blx	r0
 8011462:	f7ff fff7 	bl	8011454 <std::terminate()>
	...

08011468 <std::set_unexpected(void (*)())>:
 8011468:	4602      	mov	r2, r0
 801146a:	f3bf 8f5f 	dmb	sy
 801146e:	4b05      	ldr	r3, [pc, #20]	; (8011484 <std::set_unexpected(void (*)())+0x1c>)
 8011470:	e853 0f00 	ldrex	r0, [r3]
 8011474:	e843 2100 	strex	r1, r2, [r3]
 8011478:	2900      	cmp	r1, #0
 801147a:	d1f9      	bne.n	8011470 <std::set_unexpected(void (*)())+0x8>
 801147c:	f3bf 8f5f 	dmb	sy
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	20000030 	.word	0x20000030

08011488 <std::get_unexpected()>:
 8011488:	4b02      	ldr	r3, [pc, #8]	; (8011494 <std::get_unexpected()+0xc>)
 801148a:	6818      	ldr	r0, [r3, #0]
 801148c:	f3bf 8f5f 	dmb	sy
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	20000030 	.word	0x20000030

08011498 <std::unexpected()>:
 8011498:	b508      	push	{r3, lr}
 801149a:	f7ff fff5 	bl	8011488 <std::get_unexpected()>
 801149e:	f7ff ffde 	bl	801145e <__cxxabiv1::__unexpected(void (*)())>

080114a2 <std::type_info::~type_info()>:
 80114a2:	4770      	bx	lr

080114a4 <std::type_info::__is_pointer_p() const>:
 80114a4:	2000      	movs	r0, #0
 80114a6:	4770      	bx	lr

080114a8 <std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 80114a8:	2000      	movs	r0, #0
 80114aa:	4770      	bx	lr

080114ac <std::type_info::~type_info()>:
 80114ac:	b510      	push	{r4, lr}
 80114ae:	4604      	mov	r4, r0
 80114b0:	f7ff fc86 	bl	8010dc0 <operator delete(void*)>
 80114b4:	4620      	mov	r0, r4
 80114b6:	bd10      	pop	{r4, pc}

080114b8 <std::type_info::operator==(std::type_info const&) const>:
 80114b8:	4281      	cmp	r1, r0
 80114ba:	b508      	push	{r3, lr}
 80114bc:	d00e      	beq.n	80114dc <std::type_info::operator==(std::type_info const&) const+0x24>
 80114be:	6840      	ldr	r0, [r0, #4]
 80114c0:	7803      	ldrb	r3, [r0, #0]
 80114c2:	2b2a      	cmp	r3, #42	; 0x2a
 80114c4:	d00c      	beq.n	80114e0 <std::type_info::operator==(std::type_info const&) const+0x28>
 80114c6:	6849      	ldr	r1, [r1, #4]
 80114c8:	780b      	ldrb	r3, [r1, #0]
 80114ca:	2b2a      	cmp	r3, #42	; 0x2a
 80114cc:	bf08      	it	eq
 80114ce:	3101      	addeq	r1, #1
 80114d0:	f7fd fc86 	bl	800ede0 <strcmp>
 80114d4:	fab0 f080 	clz	r0, r0
 80114d8:	0940      	lsrs	r0, r0, #5
 80114da:	bd08      	pop	{r3, pc}
 80114dc:	2001      	movs	r0, #1
 80114de:	bd08      	pop	{r3, pc}
 80114e0:	2000      	movs	r0, #0
 80114e2:	bd08      	pop	{r3, pc}

080114e4 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 80114e4:	f7ff bfe8 	b.w	80114b8 <std::type_info::operator==(std::type_info const&) const>

080114e8 <__cxa_end_cleanup>:
 80114e8:	b41e      	push	{r1, r2, r3, r4}
 80114ea:	f000 f89a 	bl	8011622 <__gnu_end_cleanup>
 80114ee:	bc1e      	pop	{r1, r2, r3, r4}
 80114f0:	f7f5 f92c 	bl	800674c <_Unwind_Resume>

080114f4 <__cxxabiv1::__is_gxx_exception_class(char*)>:
 80114f4:	7803      	ldrb	r3, [r0, #0]
 80114f6:	2b47      	cmp	r3, #71	; 0x47
 80114f8:	d117      	bne.n	801152a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 80114fa:	7843      	ldrb	r3, [r0, #1]
 80114fc:	2b4e      	cmp	r3, #78	; 0x4e
 80114fe:	d114      	bne.n	801152a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011500:	7883      	ldrb	r3, [r0, #2]
 8011502:	2b55      	cmp	r3, #85	; 0x55
 8011504:	d111      	bne.n	801152a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011506:	78c3      	ldrb	r3, [r0, #3]
 8011508:	2b43      	cmp	r3, #67	; 0x43
 801150a:	d10e      	bne.n	801152a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801150c:	7903      	ldrb	r3, [r0, #4]
 801150e:	2b43      	cmp	r3, #67	; 0x43
 8011510:	d10b      	bne.n	801152a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011512:	7943      	ldrb	r3, [r0, #5]
 8011514:	2b2b      	cmp	r3, #43	; 0x2b
 8011516:	d108      	bne.n	801152a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011518:	7983      	ldrb	r3, [r0, #6]
 801151a:	2b2b      	cmp	r3, #43	; 0x2b
 801151c:	d105      	bne.n	801152a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801151e:	79c0      	ldrb	r0, [r0, #7]
 8011520:	2801      	cmp	r0, #1
 8011522:	bf8c      	ite	hi
 8011524:	2000      	movhi	r0, #0
 8011526:	2001      	movls	r0, #1
 8011528:	4770      	bx	lr
 801152a:	2000      	movs	r0, #0
 801152c:	4770      	bx	lr
	...

08011530 <__cxa_type_match>:
 8011530:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011534:	461d      	mov	r5, r3
 8011536:	7803      	ldrb	r3, [r0, #0]
 8011538:	460e      	mov	r6, r1
 801153a:	2b47      	cmp	r3, #71	; 0x47
 801153c:	4602      	mov	r2, r0
 801153e:	79c1      	ldrb	r1, [r0, #7]
 8011540:	d143      	bne.n	80115ca <__cxa_type_match+0x9a>
 8011542:	7843      	ldrb	r3, [r0, #1]
 8011544:	2b4e      	cmp	r3, #78	; 0x4e
 8011546:	d140      	bne.n	80115ca <__cxa_type_match+0x9a>
 8011548:	7883      	ldrb	r3, [r0, #2]
 801154a:	2b55      	cmp	r3, #85	; 0x55
 801154c:	d13d      	bne.n	80115ca <__cxa_type_match+0x9a>
 801154e:	78c3      	ldrb	r3, [r0, #3]
 8011550:	2b43      	cmp	r3, #67	; 0x43
 8011552:	d13a      	bne.n	80115ca <__cxa_type_match+0x9a>
 8011554:	7903      	ldrb	r3, [r0, #4]
 8011556:	2b46      	cmp	r3, #70	; 0x46
 8011558:	d137      	bne.n	80115ca <__cxa_type_match+0x9a>
 801155a:	7943      	ldrb	r3, [r0, #5]
 801155c:	2b4f      	cmp	r3, #79	; 0x4f
 801155e:	d134      	bne.n	80115ca <__cxa_type_match+0x9a>
 8011560:	7983      	ldrb	r3, [r0, #6]
 8011562:	2b52      	cmp	r3, #82	; 0x52
 8011564:	d131      	bne.n	80115ca <__cxa_type_match+0x9a>
 8011566:	2900      	cmp	r1, #0
 8011568:	d12f      	bne.n	80115ca <__cxa_type_match+0x9a>
 801156a:	4608      	mov	r0, r1
 801156c:	2301      	movs	r3, #1
 801156e:	2400      	movs	r4, #0
 8011570:	9401      	str	r4, [sp, #4]
 8011572:	b97b      	cbnz	r3, 8011594 <__cxa_type_match+0x64>
 8011574:	b980      	cbnz	r0, 8011598 <__cxa_type_match+0x68>
 8011576:	2901      	cmp	r1, #1
 8011578:	bf0a      	itet	eq
 801157a:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 801157e:	f1a2 0320 	subne.w	r3, r2, #32
 8011582:	3b78      	subeq	r3, #120	; 0x78
 8011584:	2901      	cmp	r1, #1
 8011586:	bf0c      	ite	eq
 8011588:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 801158c:	3258      	addne	r2, #88	; 0x58
 801158e:	681c      	ldr	r4, [r3, #0]
 8011590:	9201      	str	r2, [sp, #4]
 8011592:	e002      	b.n	801159a <__cxa_type_match+0x6a>
 8011594:	4c12      	ldr	r4, [pc, #72]	; (80115e0 <__cxa_type_match+0xb0>)
 8011596:	e000      	b.n	801159a <__cxa_type_match+0x6a>
 8011598:	4c12      	ldr	r4, [pc, #72]	; (80115e4 <__cxa_type_match+0xb4>)
 801159a:	6823      	ldr	r3, [r4, #0]
 801159c:	4620      	mov	r0, r4
 801159e:	689b      	ldr	r3, [r3, #8]
 80115a0:	4798      	blx	r3
 80115a2:	b120      	cbz	r0, 80115ae <__cxa_type_match+0x7e>
 80115a4:	9b01      	ldr	r3, [sp, #4]
 80115a6:	2702      	movs	r7, #2
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	9301      	str	r3, [sp, #4]
 80115ac:	e000      	b.n	80115b0 <__cxa_type_match+0x80>
 80115ae:	2701      	movs	r7, #1
 80115b0:	6833      	ldr	r3, [r6, #0]
 80115b2:	aa01      	add	r2, sp, #4
 80115b4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80115b8:	4621      	mov	r1, r4
 80115ba:	2301      	movs	r3, #1
 80115bc:	4630      	mov	r0, r6
 80115be:	47c0      	blx	r8
 80115c0:	b158      	cbz	r0, 80115da <__cxa_type_match+0xaa>
 80115c2:	9b01      	ldr	r3, [sp, #4]
 80115c4:	4638      	mov	r0, r7
 80115c6:	602b      	str	r3, [r5, #0]
 80115c8:	e007      	b.n	80115da <__cxa_type_match+0xaa>
 80115ca:	4610      	mov	r0, r2
 80115cc:	f7ff ff92 	bl	80114f4 <__cxxabiv1::__is_gxx_exception_class(char*)>
 80115d0:	f080 0001 	eor.w	r0, r0, #1
 80115d4:	b2c0      	uxtb	r0, r0
 80115d6:	2300      	movs	r3, #0
 80115d8:	e7c9      	b.n	801156e <__cxa_type_match+0x3e>
 80115da:	b002      	add	sp, #8
 80115dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e0:	08015dec 	.word	0x08015dec
 80115e4:	08015e44 	.word	0x08015e44

080115e8 <__cxa_begin_cleanup>:
 80115e8:	b510      	push	{r4, lr}
 80115ea:	4604      	mov	r4, r0
 80115ec:	f000 f988 	bl	8011900 <__cxa_get_globals>
 80115f0:	4602      	mov	r2, r0
 80115f2:	4620      	mov	r0, r4
 80115f4:	f1a4 0120 	sub.w	r1, r4, #32
 80115f8:	f7ff ff7c 	bl	80114f4 <__cxxabiv1::__is_gxx_exception_class(char*)>
 80115fc:	b150      	cbz	r0, 8011614 <__cxa_begin_cleanup+0x2c>
 80115fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011602:	3301      	adds	r3, #1
 8011604:	2b01      	cmp	r3, #1
 8011606:	f844 3c04 	str.w	r3, [r4, #-4]
 801160a:	d108      	bne.n	801161e <__cxa_begin_cleanup+0x36>
 801160c:	6893      	ldr	r3, [r2, #8]
 801160e:	f844 3c08 	str.w	r3, [r4, #-8]
 8011612:	e003      	b.n	801161c <__cxa_begin_cleanup+0x34>
 8011614:	6893      	ldr	r3, [r2, #8]
 8011616:	b10b      	cbz	r3, 801161c <__cxa_begin_cleanup+0x34>
 8011618:	f7ff ff1c 	bl	8011454 <std::terminate()>
 801161c:	6091      	str	r1, [r2, #8]
 801161e:	2001      	movs	r0, #1
 8011620:	bd10      	pop	{r4, pc}

08011622 <__gnu_end_cleanup>:
 8011622:	b510      	push	{r4, lr}
 8011624:	f000 f96c 	bl	8011900 <__cxa_get_globals>
 8011628:	6882      	ldr	r2, [r0, #8]
 801162a:	4601      	mov	r1, r0
 801162c:	b90a      	cbnz	r2, 8011632 <__gnu_end_cleanup+0x10>
 801162e:	f7ff ff11 	bl	8011454 <std::terminate()>
 8011632:	f102 0420 	add.w	r4, r2, #32
 8011636:	4620      	mov	r0, r4
 8011638:	f7ff ff5c 	bl	80114f4 <__cxxabiv1::__is_gxx_exception_class(char*)>
 801163c:	b138      	cbz	r0, 801164e <__gnu_end_cleanup+0x2c>
 801163e:	69d3      	ldr	r3, [r2, #28]
 8011640:	3b01      	subs	r3, #1
 8011642:	61d3      	str	r3, [r2, #28]
 8011644:	b923      	cbnz	r3, 8011650 <__gnu_end_cleanup+0x2e>
 8011646:	6990      	ldr	r0, [r2, #24]
 8011648:	6088      	str	r0, [r1, #8]
 801164a:	6193      	str	r3, [r2, #24]
 801164c:	e000      	b.n	8011650 <__gnu_end_cleanup+0x2e>
 801164e:	6088      	str	r0, [r1, #8]
 8011650:	4620      	mov	r0, r4
 8011652:	bd10      	pop	{r4, pc}

08011654 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8011654:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011656:	2310      	movs	r3, #16
 8011658:	9302      	str	r3, [sp, #8]
 801165a:	6803      	ldr	r3, [r0, #0]
 801165c:	2400      	movs	r4, #0
 801165e:	4615      	mov	r5, r2
 8011660:	699e      	ldr	r6, [r3, #24]
 8011662:	9400      	str	r4, [sp, #0]
 8011664:	466b      	mov	r3, sp
 8011666:	f88d 4004 	strb.w	r4, [sp, #4]
 801166a:	9403      	str	r4, [sp, #12]
 801166c:	6812      	ldr	r2, [r2, #0]
 801166e:	47b0      	blx	r6
 8011670:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011674:	f003 0306 	and.w	r3, r3, #6
 8011678:	2b06      	cmp	r3, #6
 801167a:	bf11      	iteee	ne
 801167c:	4620      	movne	r0, r4
 801167e:	9b00      	ldreq	r3, [sp, #0]
 8011680:	2001      	moveq	r0, #1
 8011682:	602b      	streq	r3, [r5, #0]
 8011684:	b004      	add	sp, #16
 8011686:	bd70      	pop	{r4, r5, r6, pc}

08011688 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8011688:	9800      	ldr	r0, [sp, #0]
 801168a:	4290      	cmp	r0, r2
 801168c:	bf0c      	ite	eq
 801168e:	2006      	moveq	r0, #6
 8011690:	2001      	movne	r0, #1
 8011692:	4770      	bx	lr

08011694 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8011694:	b510      	push	{r4, lr}
 8011696:	4604      	mov	r4, r0
 8011698:	4b02      	ldr	r3, [pc, #8]	; (80116a4 <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
 801169a:	6003      	str	r3, [r0, #0]
 801169c:	f7ff ff01 	bl	80114a2 <std::type_info::~type_info()>
 80116a0:	4620      	mov	r0, r4
 80116a2:	bd10      	pop	{r4, pc}
 80116a4:	08015d14 	.word	0x08015d14

080116a8 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 80116a8:	b510      	push	{r4, lr}
 80116aa:	4604      	mov	r4, r0
 80116ac:	f7ff fff2 	bl	8011694 <__cxxabiv1::__class_type_info::~__class_type_info()>
 80116b0:	4620      	mov	r0, r4
 80116b2:	f7ff fb85 	bl	8010dc0 <operator delete(void*)>
 80116b6:	4620      	mov	r0, r4
 80116b8:	bd10      	pop	{r4, pc}

080116ba <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 80116ba:	b538      	push	{r3, r4, r5, lr}
 80116bc:	4615      	mov	r5, r2
 80116be:	461c      	mov	r4, r3
 80116c0:	f7ff fefa 	bl	80114b8 <std::type_info::operator==(std::type_info const&) const>
 80116c4:	b120      	cbz	r0, 80116d0 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x16>
 80116c6:	2308      	movs	r3, #8
 80116c8:	60e3      	str	r3, [r4, #12]
 80116ca:	2306      	movs	r3, #6
 80116cc:	6025      	str	r5, [r4, #0]
 80116ce:	7123      	strb	r3, [r4, #4]
 80116d0:	bd38      	pop	{r3, r4, r5, pc}

080116d2 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 80116d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116d6:	9e06      	ldr	r6, [sp, #24]
 80116d8:	4698      	mov	r8, r3
 80116da:	9b08      	ldr	r3, [sp, #32]
 80116dc:	4607      	mov	r7, r0
 80116de:	429e      	cmp	r6, r3
 80116e0:	4615      	mov	r5, r2
 80116e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80116e4:	d103      	bne.n	80116ee <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x1c>
 80116e6:	9907      	ldr	r1, [sp, #28]
 80116e8:	f7ff fee6 	bl	80114b8 <std::type_info::operator==(std::type_info const&) const>
 80116ec:	b948      	cbnz	r0, 8011702 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x30>
 80116ee:	4641      	mov	r1, r8
 80116f0:	4638      	mov	r0, r7
 80116f2:	f7ff fee1 	bl	80114b8 <std::type_info::operator==(std::type_info const&) const>
 80116f6:	b128      	cbz	r0, 8011704 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 80116f8:	2301      	movs	r3, #1
 80116fa:	6026      	str	r6, [r4, #0]
 80116fc:	7125      	strb	r5, [r4, #4]
 80116fe:	71a3      	strb	r3, [r4, #6]
 8011700:	e000      	b.n	8011704 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8011702:	7165      	strb	r5, [r4, #5]
 8011704:	2000      	movs	r0, #0
 8011706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801170a <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 801170a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801170e:	4605      	mov	r5, r0
 8011710:	460c      	mov	r4, r1
 8011712:	4616      	mov	r6, r2
 8011714:	461f      	mov	r7, r3
 8011716:	f7ff fecf 	bl	80114b8 <std::type_info::operator==(std::type_info const&) const>
 801171a:	b948      	cbnz	r0, 8011730 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 801171c:	2f03      	cmp	r7, #3
 801171e:	d807      	bhi.n	8011730 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 8011720:	6823      	ldr	r3, [r4, #0]
 8011722:	4632      	mov	r2, r6
 8011724:	4629      	mov	r1, r5
 8011726:	4620      	mov	r0, r4
 8011728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801172c:	695b      	ldr	r3, [r3, #20]
 801172e:	4718      	bx	r3
 8011730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011734 <__cxa_pure_virtual>:
 8011734:	b508      	push	{r3, lr}
 8011736:	221b      	movs	r2, #27
 8011738:	4902      	ldr	r1, [pc, #8]	; (8011744 <__cxa_pure_virtual+0x10>)
 801173a:	2002      	movs	r0, #2
 801173c:	f002 f878 	bl	8013830 <write>
 8011740:	f7ff fe88 	bl	8011454 <std::terminate()>
 8011744:	08015d66 	.word	0x08015d66

08011748 <__cxa_deleted_virtual>:
 8011748:	b508      	push	{r3, lr}
 801174a:	221e      	movs	r2, #30
 801174c:	4902      	ldr	r1, [pc, #8]	; (8011758 <__cxa_deleted_virtual+0x10>)
 801174e:	2002      	movs	r0, #2
 8011750:	f002 f86e 	bl	8013830 <write>
 8011754:	f7ff fe7e 	bl	8011454 <std::terminate()>
 8011758:	08015d82 	.word	0x08015d82

0801175c <__cxxabiv1::__is_gxx_exception_class(char*)>:
 801175c:	7803      	ldrb	r3, [r0, #0]
 801175e:	2b47      	cmp	r3, #71	; 0x47
 8011760:	d117      	bne.n	8011792 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011762:	7843      	ldrb	r3, [r0, #1]
 8011764:	2b4e      	cmp	r3, #78	; 0x4e
 8011766:	d114      	bne.n	8011792 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011768:	7883      	ldrb	r3, [r0, #2]
 801176a:	2b55      	cmp	r3, #85	; 0x55
 801176c:	d111      	bne.n	8011792 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801176e:	78c3      	ldrb	r3, [r0, #3]
 8011770:	2b43      	cmp	r3, #67	; 0x43
 8011772:	d10e      	bne.n	8011792 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011774:	7903      	ldrb	r3, [r0, #4]
 8011776:	2b43      	cmp	r3, #67	; 0x43
 8011778:	d10b      	bne.n	8011792 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801177a:	7943      	ldrb	r3, [r0, #5]
 801177c:	2b2b      	cmp	r3, #43	; 0x2b
 801177e:	d108      	bne.n	8011792 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011780:	7983      	ldrb	r3, [r0, #6]
 8011782:	2b2b      	cmp	r3, #43	; 0x2b
 8011784:	d105      	bne.n	8011792 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011786:	79c0      	ldrb	r0, [r0, #7]
 8011788:	2801      	cmp	r0, #1
 801178a:	bf8c      	ite	hi
 801178c:	2000      	movhi	r0, #0
 801178e:	2001      	movls	r0, #1
 8011790:	4770      	bx	lr
 8011792:	2000      	movs	r0, #0
 8011794:	4770      	bx	lr

08011796 <__cxa_call_terminate>:
 8011796:	b510      	push	{r4, lr}
 8011798:	4604      	mov	r4, r0
 801179a:	b148      	cbz	r0, 80117b0 <__cxa_call_terminate+0x1a>
 801179c:	f000 f855 	bl	801184a <__cxa_begin_catch>
 80117a0:	4620      	mov	r0, r4
 80117a2:	f7ff ffdb 	bl	801175c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80117a6:	b118      	cbz	r0, 80117b0 <__cxa_call_terminate+0x1a>
 80117a8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80117ac:	f7ff fe35 	bl	801141a <__cxxabiv1::__terminate(void (*)())>
 80117b0:	f7ff fe50 	bl	8011454 <std::terminate()>

080117b4 <__cxa_call_unexpected>:
 80117b4:	b538      	push	{r3, r4, r5, lr}
 80117b6:	4602      	mov	r2, r0
 80117b8:	f7ff ffd0 	bl	801175c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80117bc:	b118      	cbz	r0, 80117c6 <__cxa_call_unexpected+0x12>
 80117be:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80117c2:	2500      	movs	r5, #0
 80117c4:	e001      	b.n	80117ca <__cxa_call_unexpected+0x16>
 80117c6:	4604      	mov	r4, r0
 80117c8:	2501      	movs	r5, #1
 80117ca:	4610      	mov	r0, r2
 80117cc:	f000 f83d 	bl	801184a <__cxa_begin_catch>
 80117d0:	b10d      	cbz	r5, 80117d6 <__cxa_call_unexpected+0x22>
 80117d2:	f7ff fe61 	bl	8011498 <std::unexpected()>
 80117d6:	4620      	mov	r0, r4
 80117d8:	f7ff fe41 	bl	801145e <__cxxabiv1::__unexpected(void (*)())>

080117dc <std::set_new_handler(void (*)())>:
 80117dc:	4602      	mov	r2, r0
 80117de:	f3bf 8f5f 	dmb	sy
 80117e2:	4b05      	ldr	r3, [pc, #20]	; (80117f8 <std::set_new_handler(void (*)())+0x1c>)
 80117e4:	e853 0f00 	ldrex	r0, [r3]
 80117e8:	e843 2100 	strex	r1, r2, [r3]
 80117ec:	2900      	cmp	r1, #0
 80117ee:	d1f9      	bne.n	80117e4 <std::set_new_handler(void (*)())+0x8>
 80117f0:	f3bf 8f5f 	dmb	sy
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	20000ce8 	.word	0x20000ce8

080117fc <std::get_new_handler()>:
 80117fc:	4b02      	ldr	r3, [pc, #8]	; (8011808 <std::get_new_handler()+0xc>)
 80117fe:	6818      	ldr	r0, [r3, #0]
 8011800:	f3bf 8f5f 	dmb	sy
 8011804:	4770      	bx	lr
 8011806:	bf00      	nop
 8011808:	20000ce8 	.word	0x20000ce8

0801180c <__cxxabiv1::__is_gxx_exception_class(char*)>:
 801180c:	7803      	ldrb	r3, [r0, #0]
 801180e:	2b47      	cmp	r3, #71	; 0x47
 8011810:	d117      	bne.n	8011842 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011812:	7843      	ldrb	r3, [r0, #1]
 8011814:	2b4e      	cmp	r3, #78	; 0x4e
 8011816:	d114      	bne.n	8011842 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011818:	7883      	ldrb	r3, [r0, #2]
 801181a:	2b55      	cmp	r3, #85	; 0x55
 801181c:	d111      	bne.n	8011842 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801181e:	78c3      	ldrb	r3, [r0, #3]
 8011820:	2b43      	cmp	r3, #67	; 0x43
 8011822:	d10e      	bne.n	8011842 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011824:	7903      	ldrb	r3, [r0, #4]
 8011826:	2b43      	cmp	r3, #67	; 0x43
 8011828:	d10b      	bne.n	8011842 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801182a:	7943      	ldrb	r3, [r0, #5]
 801182c:	2b2b      	cmp	r3, #43	; 0x2b
 801182e:	d108      	bne.n	8011842 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011830:	7983      	ldrb	r3, [r0, #6]
 8011832:	2b2b      	cmp	r3, #43	; 0x2b
 8011834:	d105      	bne.n	8011842 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011836:	79c0      	ldrb	r0, [r0, #7]
 8011838:	2801      	cmp	r0, #1
 801183a:	bf8c      	ite	hi
 801183c:	2000      	movhi	r0, #0
 801183e:	2001      	movls	r0, #1
 8011840:	4770      	bx	lr
 8011842:	2000      	movs	r0, #0
 8011844:	4770      	bx	lr

08011846 <__cxa_get_exception_ptr>:
 8011846:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011848:	4770      	bx	lr

0801184a <__cxa_begin_catch>:
 801184a:	b538      	push	{r3, r4, r5, lr}
 801184c:	4605      	mov	r5, r0
 801184e:	f000 f857 	bl	8011900 <__cxa_get_globals>
 8011852:	4601      	mov	r1, r0
 8011854:	6802      	ldr	r2, [r0, #0]
 8011856:	4628      	mov	r0, r5
 8011858:	f1a5 0420 	sub.w	r4, r5, #32
 801185c:	f7ff ffd6 	bl	801180c <__cxxabiv1::__is_gxx_exception_class(char*)>
 8011860:	b928      	cbnz	r0, 801186e <__cxa_begin_catch+0x24>
 8011862:	b10a      	cbz	r2, 8011868 <__cxa_begin_catch+0x1e>
 8011864:	f7ff fdf6 	bl	8011454 <std::terminate()>
 8011868:	600c      	str	r4, [r1, #0]
 801186a:	4614      	mov	r4, r2
 801186c:	e015      	b.n	801189a <__cxa_begin_catch+0x50>
 801186e:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8011872:	4628      	mov	r0, r5
 8011874:	2b00      	cmp	r3, #0
 8011876:	bfb4      	ite	lt
 8011878:	f1c3 0301 	rsblt	r3, r3, #1
 801187c:	3301      	addge	r3, #1
 801187e:	f845 3c0c 	str.w	r3, [r5, #-12]
 8011882:	684b      	ldr	r3, [r1, #4]
 8011884:	42a2      	cmp	r2, r4
 8011886:	f103 33ff 	add.w	r3, r3, #4294967295
 801188a:	604b      	str	r3, [r1, #4]
 801188c:	bf1c      	itt	ne
 801188e:	f845 2c10 	strne.w	r2, [r5, #-16]
 8011892:	600c      	strne	r4, [r1, #0]
 8011894:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8011896:	f7f4 fba1 	bl	8005fdc <_Unwind_Complete>
 801189a:	4620      	mov	r0, r4
 801189c:	bd38      	pop	{r3, r4, r5, pc}

0801189e <__cxa_end_catch>:
 801189e:	b510      	push	{r4, lr}
 80118a0:	f000 f82a 	bl	80118f8 <__cxa_get_globals_fast>
 80118a4:	6802      	ldr	r2, [r0, #0]
 80118a6:	4601      	mov	r1, r0
 80118a8:	b1ea      	cbz	r2, 80118e6 <__cxa_end_catch+0x48>
 80118aa:	f102 0420 	add.w	r4, r2, #32
 80118ae:	4620      	mov	r0, r4
 80118b0:	f7ff ffac 	bl	801180c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80118b4:	b908      	cbnz	r0, 80118ba <__cxa_end_catch+0x1c>
 80118b6:	6008      	str	r0, [r1, #0]
 80118b8:	e00b      	b.n	80118d2 <__cxa_end_catch+0x34>
 80118ba:	6953      	ldr	r3, [r2, #20]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	da04      	bge.n	80118ca <__cxa_end_catch+0x2c>
 80118c0:	3301      	adds	r3, #1
 80118c2:	d10f      	bne.n	80118e4 <__cxa_end_catch+0x46>
 80118c4:	6910      	ldr	r0, [r2, #16]
 80118c6:	6008      	str	r0, [r1, #0]
 80118c8:	e00c      	b.n	80118e4 <__cxa_end_catch+0x46>
 80118ca:	3b01      	subs	r3, #1
 80118cc:	d106      	bne.n	80118dc <__cxa_end_catch+0x3e>
 80118ce:	6913      	ldr	r3, [r2, #16]
 80118d0:	600b      	str	r3, [r1, #0]
 80118d2:	4620      	mov	r0, r4
 80118d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118d8:	f7f4 bb82 	b.w	8005fe0 <_Unwind_DeleteException>
 80118dc:	1c59      	adds	r1, r3, #1
 80118de:	d101      	bne.n	80118e4 <__cxa_end_catch+0x46>
 80118e0:	f7ff fdb8 	bl	8011454 <std::terminate()>
 80118e4:	6153      	str	r3, [r2, #20]
 80118e6:	bd10      	pop	{r4, pc}

080118e8 <std::uncaught_exception()>:
 80118e8:	b508      	push	{r3, lr}
 80118ea:	f000 f809 	bl	8011900 <__cxa_get_globals>
 80118ee:	6840      	ldr	r0, [r0, #4]
 80118f0:	3000      	adds	r0, #0
 80118f2:	bf18      	it	ne
 80118f4:	2001      	movne	r0, #1
 80118f6:	bd08      	pop	{r3, pc}

080118f8 <__cxa_get_globals_fast>:
 80118f8:	4800      	ldr	r0, [pc, #0]	; (80118fc <__cxa_get_globals_fast+0x4>)
 80118fa:	4770      	bx	lr
 80118fc:	20000cec 	.word	0x20000cec

08011900 <__cxa_get_globals>:
 8011900:	4800      	ldr	r0, [pc, #0]	; (8011904 <__cxa_get_globals+0x4>)
 8011902:	4770      	bx	lr
 8011904:	20000cec 	.word	0x20000cec

08011908 <std::exception::~exception()>:
 8011908:	4770      	bx	lr

0801190a <std::bad_exception::~bad_exception()>:
 801190a:	4770      	bx	lr

0801190c <std::exception::what() const>:
 801190c:	4800      	ldr	r0, [pc, #0]	; (8011910 <std::exception::what() const+0x4>)
 801190e:	4770      	bx	lr
 8011910:	08015e18 	.word	0x08015e18

08011914 <std::bad_exception::what() const>:
 8011914:	4800      	ldr	r0, [pc, #0]	; (8011918 <std::bad_exception::what() const+0x4>)
 8011916:	4770      	bx	lr
 8011918:	08015e27 	.word	0x08015e27

0801191c <std::exception::~exception()>:
 801191c:	b510      	push	{r4, lr}
 801191e:	4604      	mov	r4, r0
 8011920:	f7ff fa4e 	bl	8010dc0 <operator delete(void*)>
 8011924:	4620      	mov	r0, r4
 8011926:	bd10      	pop	{r4, pc}

08011928 <std::bad_exception::~bad_exception()>:
 8011928:	b510      	push	{r4, lr}
 801192a:	4604      	mov	r4, r0
 801192c:	f7ff fa48 	bl	8010dc0 <operator delete(void*)>
 8011930:	4620      	mov	r0, r4
 8011932:	bd10      	pop	{r4, pc}

08011934 <__cxxabiv1::__forced_unwind::~__forced_unwind()>:
 8011934:	4770      	bx	lr

08011936 <__cxxabiv1::__forced_unwind::~__forced_unwind()>:
 8011936:	b510      	push	{r4, lr}
 8011938:	4604      	mov	r4, r0
 801193a:	f7ff fa41 	bl	8010dc0 <operator delete(void*)>
 801193e:	4620      	mov	r0, r4
 8011940:	bd10      	pop	{r4, pc}

08011942 <__cxxabiv1::__foreign_exception::~__foreign_exception()>:
 8011942:	4770      	bx	lr

08011944 <__cxxabiv1::__foreign_exception::~__foreign_exception()>:
 8011944:	b510      	push	{r4, lr}
 8011946:	4604      	mov	r4, r0
 8011948:	f7ff fa3a 	bl	8010dc0 <operator delete(void*)>
 801194c:	4620      	mov	r0, r4
 801194e:	bd10      	pop	{r4, pc}

08011950 <__gnu_cxx::__verbose_terminate_handler()>:
 8011950:	4b20      	ldr	r3, [pc, #128]	; (80119d4 <__gnu_cxx::__verbose_terminate_handler()+0x84>)
 8011952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011954:	781a      	ldrb	r2, [r3, #0]
 8011956:	4d20      	ldr	r5, [pc, #128]	; (80119d8 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
 8011958:	b11a      	cbz	r2, 8011962 <__gnu_cxx::__verbose_terminate_handler()+0x12>
 801195a:	682b      	ldr	r3, [r5, #0]
 801195c:	481f      	ldr	r0, [pc, #124]	; (80119dc <__gnu_cxx::__verbose_terminate_handler()+0x8c>)
 801195e:	68d9      	ldr	r1, [r3, #12]
 8011960:	e033      	b.n	80119ca <__gnu_cxx::__verbose_terminate_handler()+0x7a>
 8011962:	2201      	movs	r2, #1
 8011964:	701a      	strb	r2, [r3, #0]
 8011966:	f000 f841 	bl	80119ec <__cxa_current_exception_type>
 801196a:	b358      	cbz	r0, 80119c4 <__gnu_cxx::__verbose_terminate_handler()+0x74>
 801196c:	6844      	ldr	r4, [r0, #4]
 801196e:	f04f 32ff 	mov.w	r2, #4294967295
 8011972:	7823      	ldrb	r3, [r4, #0]
 8011974:	4f18      	ldr	r7, [pc, #96]	; (80119d8 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
 8011976:	2b2a      	cmp	r3, #42	; 0x2a
 8011978:	ab02      	add	r3, sp, #8
 801197a:	bf08      	it	eq
 801197c:	3401      	addeq	r4, #1
 801197e:	f843 2d04 	str.w	r2, [r3, #-4]!
 8011982:	2200      	movs	r2, #0
 8011984:	4611      	mov	r1, r2
 8011986:	4620      	mov	r0, r4
 8011988:	f7fd f9ba 	bl	800ed00 <__cxa_demangle>
 801198c:	682b      	ldr	r3, [r5, #0]
 801198e:	4606      	mov	r6, r0
 8011990:	68d9      	ldr	r1, [r3, #12]
 8011992:	4813      	ldr	r0, [pc, #76]	; (80119e0 <__gnu_cxx::__verbose_terminate_handler()+0x90>)
 8011994:	f001 fd18 	bl	80133c8 <fputs>
 8011998:	9b01      	ldr	r3, [sp, #4]
 801199a:	b91b      	cbnz	r3, 80119a4 <__gnu_cxx::__verbose_terminate_handler()+0x54>
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	4630      	mov	r0, r6
 80119a0:	68d9      	ldr	r1, [r3, #12]
 80119a2:	e002      	b.n	80119aa <__gnu_cxx::__verbose_terminate_handler()+0x5a>
 80119a4:	4620      	mov	r0, r4
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	68d9      	ldr	r1, [r3, #12]
 80119aa:	f001 fd0d 	bl	80133c8 <fputs>
 80119ae:	682b      	ldr	r3, [r5, #0]
 80119b0:	480c      	ldr	r0, [pc, #48]	; (80119e4 <__gnu_cxx::__verbose_terminate_handler()+0x94>)
 80119b2:	68d9      	ldr	r1, [r3, #12]
 80119b4:	f001 fd08 	bl	80133c8 <fputs>
 80119b8:	9b01      	ldr	r3, [sp, #4]
 80119ba:	b943      	cbnz	r3, 80119ce <__gnu_cxx::__verbose_terminate_handler()+0x7e>
 80119bc:	4630      	mov	r0, r6
 80119be:	f001 fd39 	bl	8013434 <free>
 80119c2:	e004      	b.n	80119ce <__gnu_cxx::__verbose_terminate_handler()+0x7e>
 80119c4:	682b      	ldr	r3, [r5, #0]
 80119c6:	4808      	ldr	r0, [pc, #32]	; (80119e8 <__gnu_cxx::__verbose_terminate_handler()+0x98>)
 80119c8:	68d9      	ldr	r1, [r3, #12]
 80119ca:	f001 fcfd 	bl	80133c8 <fputs>
 80119ce:	f001 fc85 	bl	80132dc <abort>
 80119d2:	bf00      	nop
 80119d4:	20000cf8 	.word	0x20000cf8
 80119d8:	20000098 	.word	0x20000098
 80119dc:	08015ea0 	.word	0x08015ea0
 80119e0:	08015ebe 	.word	0x08015ebe
 80119e4:	08015eef 	.word	0x08015eef
 80119e8:	08015ef2 	.word	0x08015ef2

080119ec <__cxa_current_exception_type>:
 80119ec:	b508      	push	{r3, lr}
 80119ee:	f7ff ff87 	bl	8011900 <__cxa_get_globals>
 80119f2:	6800      	ldr	r0, [r0, #0]
 80119f4:	b130      	cbz	r0, 8011a04 <__cxa_current_exception_type+0x18>
 80119f6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	bf04      	itt	eq
 80119fe:	6800      	ldreq	r0, [r0, #0]
 8011a00:	3878      	subeq	r0, #120	; 0x78
 8011a02:	6800      	ldr	r0, [r0, #0]
 8011a04:	bd08      	pop	{r3, pc}
	...

08011a08 <atan>:
 8011a08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a0c:	4bc0      	ldr	r3, [pc, #768]	; (8011d10 <atan+0x308>)
 8011a0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011a12:	429e      	cmp	r6, r3
 8011a14:	460d      	mov	r5, r1
 8011a16:	468a      	mov	sl, r1
 8011a18:	4604      	mov	r4, r0
 8011a1a:	dd0f      	ble.n	8011a3c <atan+0x34>
 8011a1c:	4bbd      	ldr	r3, [pc, #756]	; (8011d14 <atan+0x30c>)
 8011a1e:	429e      	cmp	r6, r3
 8011a20:	f300 80b2 	bgt.w	8011b88 <atan+0x180>
 8011a24:	f000 80ad 	beq.w	8011b82 <atan+0x17a>
 8011a28:	4bbb      	ldr	r3, [pc, #748]	; (8011d18 <atan+0x310>)
 8011a2a:	49bc      	ldr	r1, [pc, #752]	; (8011d1c <atan+0x314>)
 8011a2c:	4cbc      	ldr	r4, [pc, #752]	; (8011d20 <atan+0x318>)
 8011a2e:	f1ba 0f00 	cmp.w	sl, #0
 8011a32:	bfc8      	it	gt
 8011a34:	4619      	movgt	r1, r3
 8011a36:	4620      	mov	r0, r4
 8011a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a3c:	4bb9      	ldr	r3, [pc, #740]	; (8011d24 <atan+0x31c>)
 8011a3e:	429e      	cmp	r6, r3
 8011a40:	f300 80bc 	bgt.w	8011bbc <atan+0x1b4>
 8011a44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011a48:	429e      	cmp	r6, r3
 8011a4a:	f340 80a7 	ble.w	8011b9c <atan+0x194>
 8011a4e:	f04f 3bff 	mov.w	fp, #4294967295
 8011a52:	4622      	mov	r2, r4
 8011a54:	462b      	mov	r3, r5
 8011a56:	4620      	mov	r0, r4
 8011a58:	4629      	mov	r1, r5
 8011a5a:	f7f3 facb 	bl	8004ff4 <__aeabi_dmul>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	460b      	mov	r3, r1
 8011a62:	4680      	mov	r8, r0
 8011a64:	4689      	mov	r9, r1
 8011a66:	f7f3 fac5 	bl	8004ff4 <__aeabi_dmul>
 8011a6a:	a391      	add	r3, pc, #580	; (adr r3, 8011cb0 <atan+0x2a8>)
 8011a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a70:	4606      	mov	r6, r0
 8011a72:	460f      	mov	r7, r1
 8011a74:	f7f3 fabe 	bl	8004ff4 <__aeabi_dmul>
 8011a78:	a38f      	add	r3, pc, #572	; (adr r3, 8011cb8 <atan+0x2b0>)
 8011a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7e:	f7f3 f907 	bl	8004c90 <__adddf3>
 8011a82:	4632      	mov	r2, r6
 8011a84:	463b      	mov	r3, r7
 8011a86:	f7f3 fab5 	bl	8004ff4 <__aeabi_dmul>
 8011a8a:	a38d      	add	r3, pc, #564	; (adr r3, 8011cc0 <atan+0x2b8>)
 8011a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a90:	f7f3 f8fe 	bl	8004c90 <__adddf3>
 8011a94:	4632      	mov	r2, r6
 8011a96:	463b      	mov	r3, r7
 8011a98:	f7f3 faac 	bl	8004ff4 <__aeabi_dmul>
 8011a9c:	a38a      	add	r3, pc, #552	; (adr r3, 8011cc8 <atan+0x2c0>)
 8011a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa2:	f7f3 f8f5 	bl	8004c90 <__adddf3>
 8011aa6:	4632      	mov	r2, r6
 8011aa8:	463b      	mov	r3, r7
 8011aaa:	f7f3 faa3 	bl	8004ff4 <__aeabi_dmul>
 8011aae:	a388      	add	r3, pc, #544	; (adr r3, 8011cd0 <atan+0x2c8>)
 8011ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab4:	f7f3 f8ec 	bl	8004c90 <__adddf3>
 8011ab8:	4632      	mov	r2, r6
 8011aba:	463b      	mov	r3, r7
 8011abc:	f7f3 fa9a 	bl	8004ff4 <__aeabi_dmul>
 8011ac0:	a385      	add	r3, pc, #532	; (adr r3, 8011cd8 <atan+0x2d0>)
 8011ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac6:	f7f3 f8e3 	bl	8004c90 <__adddf3>
 8011aca:	4642      	mov	r2, r8
 8011acc:	464b      	mov	r3, r9
 8011ace:	f7f3 fa91 	bl	8004ff4 <__aeabi_dmul>
 8011ad2:	a383      	add	r3, pc, #524	; (adr r3, 8011ce0 <atan+0x2d8>)
 8011ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad8:	4680      	mov	r8, r0
 8011ada:	4689      	mov	r9, r1
 8011adc:	4630      	mov	r0, r6
 8011ade:	4639      	mov	r1, r7
 8011ae0:	f7f3 fa88 	bl	8004ff4 <__aeabi_dmul>
 8011ae4:	a380      	add	r3, pc, #512	; (adr r3, 8011ce8 <atan+0x2e0>)
 8011ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aea:	f7f3 f8cf 	bl	8004c8c <__aeabi_dsub>
 8011aee:	4632      	mov	r2, r6
 8011af0:	463b      	mov	r3, r7
 8011af2:	f7f3 fa7f 	bl	8004ff4 <__aeabi_dmul>
 8011af6:	a37e      	add	r3, pc, #504	; (adr r3, 8011cf0 <atan+0x2e8>)
 8011af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011afc:	f7f3 f8c6 	bl	8004c8c <__aeabi_dsub>
 8011b00:	4632      	mov	r2, r6
 8011b02:	463b      	mov	r3, r7
 8011b04:	f7f3 fa76 	bl	8004ff4 <__aeabi_dmul>
 8011b08:	a37b      	add	r3, pc, #492	; (adr r3, 8011cf8 <atan+0x2f0>)
 8011b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0e:	f7f3 f8bd 	bl	8004c8c <__aeabi_dsub>
 8011b12:	4632      	mov	r2, r6
 8011b14:	463b      	mov	r3, r7
 8011b16:	f7f3 fa6d 	bl	8004ff4 <__aeabi_dmul>
 8011b1a:	a379      	add	r3, pc, #484	; (adr r3, 8011d00 <atan+0x2f8>)
 8011b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b20:	f7f3 f8b4 	bl	8004c8c <__aeabi_dsub>
 8011b24:	4632      	mov	r2, r6
 8011b26:	463b      	mov	r3, r7
 8011b28:	f7f3 fa64 	bl	8004ff4 <__aeabi_dmul>
 8011b2c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8011b30:	4602      	mov	r2, r0
 8011b32:	460b      	mov	r3, r1
 8011b34:	d069      	beq.n	8011c0a <atan+0x202>
 8011b36:	4640      	mov	r0, r8
 8011b38:	4649      	mov	r1, r9
 8011b3a:	f7f3 f8a9 	bl	8004c90 <__adddf3>
 8011b3e:	4622      	mov	r2, r4
 8011b40:	462b      	mov	r3, r5
 8011b42:	f7f3 fa57 	bl	8004ff4 <__aeabi_dmul>
 8011b46:	4e78      	ldr	r6, [pc, #480]	; (8011d28 <atan+0x320>)
 8011b48:	4b78      	ldr	r3, [pc, #480]	; (8011d2c <atan+0x324>)
 8011b4a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011b4e:	445e      	add	r6, fp
 8011b50:	449b      	add	fp, r3
 8011b52:	e9db 2300 	ldrd	r2, r3, [fp]
 8011b56:	f7f3 f899 	bl	8004c8c <__aeabi_dsub>
 8011b5a:	4622      	mov	r2, r4
 8011b5c:	462b      	mov	r3, r5
 8011b5e:	f7f3 f895 	bl	8004c8c <__aeabi_dsub>
 8011b62:	4602      	mov	r2, r0
 8011b64:	460b      	mov	r3, r1
 8011b66:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011b6a:	f7f3 f88f 	bl	8004c8c <__aeabi_dsub>
 8011b6e:	f1ba 0f00 	cmp.w	sl, #0
 8011b72:	4604      	mov	r4, r0
 8011b74:	f6bf af5f 	bge.w	8011a36 <atan+0x2e>
 8011b78:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b82:	2800      	cmp	r0, #0
 8011b84:	f43f af50 	beq.w	8011a28 <atan+0x20>
 8011b88:	4622      	mov	r2, r4
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	462b      	mov	r3, r5
 8011b8e:	4629      	mov	r1, r5
 8011b90:	f7f3 f87e 	bl	8004c90 <__adddf3>
 8011b94:	4604      	mov	r4, r0
 8011b96:	4620      	mov	r0, r4
 8011b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9c:	a35a      	add	r3, pc, #360	; (adr r3, 8011d08 <atan+0x300>)
 8011b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba2:	f7f3 f875 	bl	8004c90 <__adddf3>
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	4b61      	ldr	r3, [pc, #388]	; (8011d30 <atan+0x328>)
 8011baa:	f7f3 fcb3 	bl	8005514 <__aeabi_dcmpgt>
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	f43f af4d 	beq.w	8011a4e <atan+0x46>
 8011bb4:	4629      	mov	r1, r5
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbc:	f000 f90a 	bl	8011dd4 <fabs>
 8011bc0:	4b5c      	ldr	r3, [pc, #368]	; (8011d34 <atan+0x32c>)
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	429e      	cmp	r6, r3
 8011bc6:	460d      	mov	r5, r1
 8011bc8:	dc2f      	bgt.n	8011c2a <atan+0x222>
 8011bca:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011bce:	429e      	cmp	r6, r3
 8011bd0:	dc54      	bgt.n	8011c7c <atan+0x274>
 8011bd2:	4602      	mov	r2, r0
 8011bd4:	460b      	mov	r3, r1
 8011bd6:	f7f3 f85b 	bl	8004c90 <__adddf3>
 8011bda:	2200      	movs	r2, #0
 8011bdc:	4b54      	ldr	r3, [pc, #336]	; (8011d30 <atan+0x328>)
 8011bde:	f7f3 f855 	bl	8004c8c <__aeabi_dsub>
 8011be2:	2200      	movs	r2, #0
 8011be4:	4606      	mov	r6, r0
 8011be6:	460f      	mov	r7, r1
 8011be8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011bec:	4620      	mov	r0, r4
 8011bee:	4629      	mov	r1, r5
 8011bf0:	f7f3 f84e 	bl	8004c90 <__adddf3>
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	460b      	mov	r3, r1
 8011bf8:	4630      	mov	r0, r6
 8011bfa:	4639      	mov	r1, r7
 8011bfc:	f7f3 fb24 	bl	8005248 <__aeabi_ddiv>
 8011c00:	f04f 0b00 	mov.w	fp, #0
 8011c04:	4604      	mov	r4, r0
 8011c06:	460d      	mov	r5, r1
 8011c08:	e723      	b.n	8011a52 <atan+0x4a>
 8011c0a:	4640      	mov	r0, r8
 8011c0c:	4649      	mov	r1, r9
 8011c0e:	f7f3 f83f 	bl	8004c90 <__adddf3>
 8011c12:	4622      	mov	r2, r4
 8011c14:	462b      	mov	r3, r5
 8011c16:	f7f3 f9ed 	bl	8004ff4 <__aeabi_dmul>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	4620      	mov	r0, r4
 8011c20:	4629      	mov	r1, r5
 8011c22:	f7f3 f833 	bl	8004c8c <__aeabi_dsub>
 8011c26:	4604      	mov	r4, r0
 8011c28:	e705      	b.n	8011a36 <atan+0x2e>
 8011c2a:	4b43      	ldr	r3, [pc, #268]	; (8011d38 <atan+0x330>)
 8011c2c:	429e      	cmp	r6, r3
 8011c2e:	dc1a      	bgt.n	8011c66 <atan+0x25e>
 8011c30:	2200      	movs	r2, #0
 8011c32:	4b42      	ldr	r3, [pc, #264]	; (8011d3c <atan+0x334>)
 8011c34:	f7f3 f82a 	bl	8004c8c <__aeabi_dsub>
 8011c38:	2200      	movs	r2, #0
 8011c3a:	4606      	mov	r6, r0
 8011c3c:	460f      	mov	r7, r1
 8011c3e:	4b3f      	ldr	r3, [pc, #252]	; (8011d3c <atan+0x334>)
 8011c40:	4620      	mov	r0, r4
 8011c42:	4629      	mov	r1, r5
 8011c44:	f7f3 f9d6 	bl	8004ff4 <__aeabi_dmul>
 8011c48:	2200      	movs	r2, #0
 8011c4a:	4b39      	ldr	r3, [pc, #228]	; (8011d30 <atan+0x328>)
 8011c4c:	f7f3 f820 	bl	8004c90 <__adddf3>
 8011c50:	4602      	mov	r2, r0
 8011c52:	460b      	mov	r3, r1
 8011c54:	4630      	mov	r0, r6
 8011c56:	4639      	mov	r1, r7
 8011c58:	f7f3 faf6 	bl	8005248 <__aeabi_ddiv>
 8011c5c:	f04f 0b02 	mov.w	fp, #2
 8011c60:	4604      	mov	r4, r0
 8011c62:	460d      	mov	r5, r1
 8011c64:	e6f5      	b.n	8011a52 <atan+0x4a>
 8011c66:	4602      	mov	r2, r0
 8011c68:	460b      	mov	r3, r1
 8011c6a:	2000      	movs	r0, #0
 8011c6c:	4934      	ldr	r1, [pc, #208]	; (8011d40 <atan+0x338>)
 8011c6e:	f7f3 faeb 	bl	8005248 <__aeabi_ddiv>
 8011c72:	f04f 0b03 	mov.w	fp, #3
 8011c76:	4604      	mov	r4, r0
 8011c78:	460d      	mov	r5, r1
 8011c7a:	e6ea      	b.n	8011a52 <atan+0x4a>
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	4b2c      	ldr	r3, [pc, #176]	; (8011d30 <atan+0x328>)
 8011c80:	f7f3 f804 	bl	8004c8c <__aeabi_dsub>
 8011c84:	2200      	movs	r2, #0
 8011c86:	4606      	mov	r6, r0
 8011c88:	460f      	mov	r7, r1
 8011c8a:	4b29      	ldr	r3, [pc, #164]	; (8011d30 <atan+0x328>)
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	4629      	mov	r1, r5
 8011c90:	f7f2 fffe 	bl	8004c90 <__adddf3>
 8011c94:	4602      	mov	r2, r0
 8011c96:	460b      	mov	r3, r1
 8011c98:	4630      	mov	r0, r6
 8011c9a:	4639      	mov	r1, r7
 8011c9c:	f7f3 fad4 	bl	8005248 <__aeabi_ddiv>
 8011ca0:	f04f 0b01 	mov.w	fp, #1
 8011ca4:	4604      	mov	r4, r0
 8011ca6:	460d      	mov	r5, r1
 8011ca8:	e6d3      	b.n	8011a52 <atan+0x4a>
 8011caa:	bf00      	nop
 8011cac:	f3af 8000 	nop.w
 8011cb0:	e322da11 	.word	0xe322da11
 8011cb4:	3f90ad3a 	.word	0x3f90ad3a
 8011cb8:	24760deb 	.word	0x24760deb
 8011cbc:	3fa97b4b 	.word	0x3fa97b4b
 8011cc0:	a0d03d51 	.word	0xa0d03d51
 8011cc4:	3fb10d66 	.word	0x3fb10d66
 8011cc8:	c54c206e 	.word	0xc54c206e
 8011ccc:	3fb745cd 	.word	0x3fb745cd
 8011cd0:	920083ff 	.word	0x920083ff
 8011cd4:	3fc24924 	.word	0x3fc24924
 8011cd8:	5555550d 	.word	0x5555550d
 8011cdc:	3fd55555 	.word	0x3fd55555
 8011ce0:	2c6a6c2f 	.word	0x2c6a6c2f
 8011ce4:	bfa2b444 	.word	0xbfa2b444
 8011ce8:	52defd9a 	.word	0x52defd9a
 8011cec:	3fadde2d 	.word	0x3fadde2d
 8011cf0:	af749a6d 	.word	0xaf749a6d
 8011cf4:	3fb3b0f2 	.word	0x3fb3b0f2
 8011cf8:	fe231671 	.word	0xfe231671
 8011cfc:	3fbc71c6 	.word	0x3fbc71c6
 8011d00:	9998ebc4 	.word	0x9998ebc4
 8011d04:	3fc99999 	.word	0x3fc99999
 8011d08:	8800759c 	.word	0x8800759c
 8011d0c:	7e37e43c 	.word	0x7e37e43c
 8011d10:	440fffff 	.word	0x440fffff
 8011d14:	7ff00000 	.word	0x7ff00000
 8011d18:	3ff921fb 	.word	0x3ff921fb
 8011d1c:	bff921fb 	.word	0xbff921fb
 8011d20:	54442d18 	.word	0x54442d18
 8011d24:	3fdbffff 	.word	0x3fdbffff
 8011d28:	08016738 	.word	0x08016738
 8011d2c:	08016718 	.word	0x08016718
 8011d30:	3ff00000 	.word	0x3ff00000
 8011d34:	3ff2ffff 	.word	0x3ff2ffff
 8011d38:	40037fff 	.word	0x40037fff
 8011d3c:	3ff80000 	.word	0x3ff80000
 8011d40:	bff00000 	.word	0xbff00000

08011d44 <cos>:
 8011d44:	b530      	push	{r4, r5, lr}
 8011d46:	4a21      	ldr	r2, [pc, #132]	; (8011dcc <cos+0x88>)
 8011d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	b087      	sub	sp, #28
 8011d50:	dd1b      	ble.n	8011d8a <cos+0x46>
 8011d52:	4a1f      	ldr	r2, [pc, #124]	; (8011dd0 <cos+0x8c>)
 8011d54:	4293      	cmp	r3, r2
 8011d56:	dd05      	ble.n	8011d64 <cos+0x20>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	f7f2 ff96 	bl	8004c8c <__aeabi_dsub>
 8011d60:	b007      	add	sp, #28
 8011d62:	bd30      	pop	{r4, r5, pc}
 8011d64:	aa02      	add	r2, sp, #8
 8011d66:	f000 f8d7 	bl	8011f18 <__ieee754_rem_pio2>
 8011d6a:	f000 0003 	and.w	r0, r0, #3
 8011d6e:	2801      	cmp	r0, #1
 8011d70:	d01a      	beq.n	8011da8 <cos+0x64>
 8011d72:	2802      	cmp	r0, #2
 8011d74:	d00f      	beq.n	8011d96 <cos+0x52>
 8011d76:	b308      	cbz	r0, 8011dbc <cos+0x78>
 8011d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	9300      	str	r3, [sp, #0]
 8011d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d84:	f001 f8c4 	bl	8012f10 <__kernel_sin>
 8011d88:	e7ea      	b.n	8011d60 <cos+0x1c>
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	f000 fb9f 	bl	80124d0 <__kernel_cos>
 8011d92:	b007      	add	sp, #28
 8011d94:	bd30      	pop	{r4, r5, pc}
 8011d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d9e:	f000 fb97 	bl	80124d0 <__kernel_cos>
 8011da2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011da6:	e7db      	b.n	8011d60 <cos+0x1c>
 8011da8:	9000      	str	r0, [sp, #0]
 8011daa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011db2:	f001 f8ad 	bl	8012f10 <__kernel_sin>
 8011db6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011dba:	e7d1      	b.n	8011d60 <cos+0x1c>
 8011dbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dc4:	f000 fb84 	bl	80124d0 <__kernel_cos>
 8011dc8:	e7ca      	b.n	8011d60 <cos+0x1c>
 8011dca:	bf00      	nop
 8011dcc:	3fe921fb 	.word	0x3fe921fb
 8011dd0:	7fefffff 	.word	0x7fefffff

08011dd4 <fabs>:
 8011dd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop

08011ddc <sin>:
 8011ddc:	b530      	push	{r4, r5, lr}
 8011dde:	4a21      	ldr	r2, [pc, #132]	; (8011e64 <sin+0x88>)
 8011de0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011de4:	4293      	cmp	r3, r2
 8011de6:	b087      	sub	sp, #28
 8011de8:	dd1b      	ble.n	8011e22 <sin+0x46>
 8011dea:	4a1f      	ldr	r2, [pc, #124]	; (8011e68 <sin+0x8c>)
 8011dec:	4293      	cmp	r3, r2
 8011dee:	dd05      	ble.n	8011dfc <sin+0x20>
 8011df0:	4602      	mov	r2, r0
 8011df2:	460b      	mov	r3, r1
 8011df4:	f7f2 ff4a 	bl	8004c8c <__aeabi_dsub>
 8011df8:	b007      	add	sp, #28
 8011dfa:	bd30      	pop	{r4, r5, pc}
 8011dfc:	aa02      	add	r2, sp, #8
 8011dfe:	f000 f88b 	bl	8011f18 <__ieee754_rem_pio2>
 8011e02:	f000 0003 	and.w	r0, r0, #3
 8011e06:	2801      	cmp	r0, #1
 8011e08:	d01e      	beq.n	8011e48 <sin+0x6c>
 8011e0a:	2802      	cmp	r0, #2
 8011e0c:	d011      	beq.n	8011e32 <sin+0x56>
 8011e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e12:	b300      	cbz	r0, 8011e56 <sin+0x7a>
 8011e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e18:	f000 fb5a 	bl	80124d0 <__kernel_cos>
 8011e1c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011e20:	e7ea      	b.n	8011df8 <sin+0x1c>
 8011e22:	2300      	movs	r3, #0
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	2200      	movs	r2, #0
 8011e28:	2300      	movs	r3, #0
 8011e2a:	f001 f871 	bl	8012f10 <__kernel_sin>
 8011e2e:	b007      	add	sp, #28
 8011e30:	bd30      	pop	{r4, r5, pc}
 8011e32:	2301      	movs	r3, #1
 8011e34:	9300      	str	r3, [sp, #0]
 8011e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e3e:	f001 f867 	bl	8012f10 <__kernel_sin>
 8011e42:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011e46:	e7d7      	b.n	8011df8 <sin+0x1c>
 8011e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e50:	f000 fb3e 	bl	80124d0 <__kernel_cos>
 8011e54:	e7d0      	b.n	8011df8 <sin+0x1c>
 8011e56:	2401      	movs	r4, #1
 8011e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e5c:	9400      	str	r4, [sp, #0]
 8011e5e:	f001 f857 	bl	8012f10 <__kernel_sin>
 8011e62:	e7c9      	b.n	8011df8 <sin+0x1c>
 8011e64:	3fe921fb 	.word	0x3fe921fb
 8011e68:	7fefffff 	.word	0x7fefffff

08011e6c <sqrt>:
 8011e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e70:	b08a      	sub	sp, #40	; 0x28
 8011e72:	4606      	mov	r6, r0
 8011e74:	460f      	mov	r7, r1
 8011e76:	f000 fa65 	bl	8012344 <__ieee754_sqrt>
 8011e7a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8011f14 <sqrt+0xa8>
 8011e7e:	4604      	mov	r4, r0
 8011e80:	f99a 3000 	ldrsb.w	r3, [sl]
 8011e84:	460d      	mov	r5, r1
 8011e86:	3301      	adds	r3, #1
 8011e88:	d00f      	beq.n	8011eaa <sqrt+0x3e>
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	4639      	mov	r1, r7
 8011e8e:	f001 f97f 	bl	8013190 <__fpclassifyd>
 8011e92:	b150      	cbz	r0, 8011eaa <sqrt+0x3e>
 8011e94:	f04f 0800 	mov.w	r8, #0
 8011e98:	f04f 0900 	mov.w	r9, #0
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	4639      	mov	r1, r7
 8011ea0:	4642      	mov	r2, r8
 8011ea2:	464b      	mov	r3, r9
 8011ea4:	f7f3 fb18 	bl	80054d8 <__aeabi_dcmplt>
 8011ea8:	b920      	cbnz	r0, 8011eb4 <sqrt+0x48>
 8011eaa:	4620      	mov	r0, r4
 8011eac:	4629      	mov	r1, r5
 8011eae:	b00a      	add	sp, #40	; 0x28
 8011eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eb4:	4916      	ldr	r1, [pc, #88]	; (8011f10 <sqrt+0xa4>)
 8011eb6:	f89a 4000 	ldrb.w	r4, [sl]
 8011eba:	2201      	movs	r2, #1
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011ec2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011ec6:	9101      	str	r1, [sp, #4]
 8011ec8:	9200      	str	r2, [sp, #0]
 8011eca:	9308      	str	r3, [sp, #32]
 8011ecc:	b964      	cbnz	r4, 8011ee8 <sqrt+0x7c>
 8011ece:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8011ed2:	4668      	mov	r0, sp
 8011ed4:	f001 f986 	bl	80131e4 <matherr>
 8011ed8:	b180      	cbz	r0, 8011efc <sqrt+0x90>
 8011eda:	9b08      	ldr	r3, [sp, #32]
 8011edc:	b99b      	cbnz	r3, 8011f06 <sqrt+0x9a>
 8011ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ee2:	b00a      	add	sp, #40	; 0x28
 8011ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ee8:	4642      	mov	r2, r8
 8011eea:	464b      	mov	r3, r9
 8011eec:	4640      	mov	r0, r8
 8011eee:	4649      	mov	r1, r9
 8011ef0:	f7f3 f9aa 	bl	8005248 <__aeabi_ddiv>
 8011ef4:	2c02      	cmp	r4, #2
 8011ef6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011efa:	d1ea      	bne.n	8011ed2 <sqrt+0x66>
 8011efc:	f001 f9f6 	bl	80132ec <__errno>
 8011f00:	2321      	movs	r3, #33	; 0x21
 8011f02:	6003      	str	r3, [r0, #0]
 8011f04:	e7e9      	b.n	8011eda <sqrt+0x6e>
 8011f06:	f001 f9f1 	bl	80132ec <__errno>
 8011f0a:	9b08      	ldr	r3, [sp, #32]
 8011f0c:	6003      	str	r3, [r0, #0]
 8011f0e:	e7e6      	b.n	8011ede <sqrt+0x72>
 8011f10:	08016758 	.word	0x08016758
 8011f14:	20000034 	.word	0x20000034

08011f18 <__ieee754_rem_pio2>:
 8011f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f1c:	4c94      	ldr	r4, [pc, #592]	; (8012170 <__ieee754_rem_pio2+0x258>)
 8011f1e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8011f22:	42a7      	cmp	r7, r4
 8011f24:	b08f      	sub	sp, #60	; 0x3c
 8011f26:	f340 8081 	ble.w	801202c <__ieee754_rem_pio2+0x114>
 8011f2a:	4614      	mov	r4, r2
 8011f2c:	4a91      	ldr	r2, [pc, #580]	; (8012174 <__ieee754_rem_pio2+0x25c>)
 8011f2e:	460e      	mov	r6, r1
 8011f30:	4297      	cmp	r7, r2
 8011f32:	dc26      	bgt.n	8011f82 <__ieee754_rem_pio2+0x6a>
 8011f34:	a384      	add	r3, pc, #528	; (adr r3, 8012148 <__ieee754_rem_pio2+0x230>)
 8011f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3a:	2900      	cmp	r1, #0
 8011f3c:	f340 81a0 	ble.w	8012280 <__ieee754_rem_pio2+0x368>
 8011f40:	f7f2 fea4 	bl	8004c8c <__aeabi_dsub>
 8011f44:	4b8c      	ldr	r3, [pc, #560]	; (8012178 <__ieee754_rem_pio2+0x260>)
 8011f46:	4680      	mov	r8, r0
 8011f48:	429f      	cmp	r7, r3
 8011f4a:	4689      	mov	r9, r1
 8011f4c:	f000 8083 	beq.w	8012056 <__ieee754_rem_pio2+0x13e>
 8011f50:	a37f      	add	r3, pc, #508	; (adr r3, 8012150 <__ieee754_rem_pio2+0x238>)
 8011f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f56:	f7f2 fe99 	bl	8004c8c <__aeabi_dsub>
 8011f5a:	4602      	mov	r2, r0
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	4640      	mov	r0, r8
 8011f60:	e9c4 2300 	strd	r2, r3, [r4]
 8011f64:	4649      	mov	r1, r9
 8011f66:	f7f2 fe91 	bl	8004c8c <__aeabi_dsub>
 8011f6a:	a379      	add	r3, pc, #484	; (adr r3, 8012150 <__ieee754_rem_pio2+0x238>)
 8011f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f70:	f7f2 fe8c 	bl	8004c8c <__aeabi_dsub>
 8011f74:	2501      	movs	r5, #1
 8011f76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	b00f      	add	sp, #60	; 0x3c
 8011f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f82:	4a7e      	ldr	r2, [pc, #504]	; (801217c <__ieee754_rem_pio2+0x264>)
 8011f84:	4297      	cmp	r7, r2
 8011f86:	f340 8083 	ble.w	8012090 <__ieee754_rem_pio2+0x178>
 8011f8a:	4a7d      	ldr	r2, [pc, #500]	; (8012180 <__ieee754_rem_pio2+0x268>)
 8011f8c:	4297      	cmp	r7, r2
 8011f8e:	dc58      	bgt.n	8012042 <__ieee754_rem_pio2+0x12a>
 8011f90:	153d      	asrs	r5, r7, #20
 8011f92:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011f96:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
 8011f9a:	468b      	mov	fp, r1
 8011f9c:	4682      	mov	sl, r0
 8011f9e:	f7f3 fac3 	bl	8005528 <__aeabi_d2iz>
 8011fa2:	f7f2 ffc1 	bl	8004f28 <__aeabi_i2d>
 8011fa6:	4680      	mov	r8, r0
 8011fa8:	4689      	mov	r9, r1
 8011faa:	4642      	mov	r2, r8
 8011fac:	464b      	mov	r3, r9
 8011fae:	4650      	mov	r0, sl
 8011fb0:	4659      	mov	r1, fp
 8011fb2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8011fb6:	f7f2 fe69 	bl	8004c8c <__aeabi_dsub>
 8011fba:	2200      	movs	r2, #0
 8011fbc:	4b71      	ldr	r3, [pc, #452]	; (8012184 <__ieee754_rem_pio2+0x26c>)
 8011fbe:	f7f3 f819 	bl	8004ff4 <__aeabi_dmul>
 8011fc2:	468b      	mov	fp, r1
 8011fc4:	4682      	mov	sl, r0
 8011fc6:	f7f3 faaf 	bl	8005528 <__aeabi_d2iz>
 8011fca:	f7f2 ffad 	bl	8004f28 <__aeabi_i2d>
 8011fce:	4680      	mov	r8, r0
 8011fd0:	4689      	mov	r9, r1
 8011fd2:	4642      	mov	r2, r8
 8011fd4:	464b      	mov	r3, r9
 8011fd6:	4650      	mov	r0, sl
 8011fd8:	4659      	mov	r1, fp
 8011fda:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8011fde:	f7f2 fe55 	bl	8004c8c <__aeabi_dsub>
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	4b67      	ldr	r3, [pc, #412]	; (8012184 <__ieee754_rem_pio2+0x26c>)
 8011fe6:	f7f3 f805 	bl	8004ff4 <__aeabi_dmul>
 8011fea:	2200      	movs	r2, #0
 8011fec:	2300      	movs	r3, #0
 8011fee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011ff2:	f7f3 fa67 	bl	80054c4 <__aeabi_dcmpeq>
 8011ff6:	2800      	cmp	r0, #0
 8011ff8:	f000 816a 	beq.w	80122d0 <__ieee754_rem_pio2+0x3b8>
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	4640      	mov	r0, r8
 8012000:	4649      	mov	r1, r9
 8012002:	2200      	movs	r2, #0
 8012004:	f7f3 fa5e 	bl	80054c4 <__aeabi_dcmpeq>
 8012008:	2800      	cmp	r0, #0
 801200a:	bf14      	ite	ne
 801200c:	2301      	movne	r3, #1
 801200e:	2302      	moveq	r3, #2
 8012010:	485d      	ldr	r0, [pc, #372]	; (8012188 <__ieee754_rem_pio2+0x270>)
 8012012:	2102      	movs	r1, #2
 8012014:	9001      	str	r0, [sp, #4]
 8012016:	9100      	str	r1, [sp, #0]
 8012018:	462a      	mov	r2, r5
 801201a:	4621      	mov	r1, r4
 801201c:	a808      	add	r0, sp, #32
 801201e:	f000 fb7b 	bl	8012718 <__kernel_rem_pio2>
 8012022:	2e00      	cmp	r6, #0
 8012024:	f2c0 814a 	blt.w	80122bc <__ieee754_rem_pio2+0x3a4>
 8012028:	4605      	mov	r5, r0
 801202a:	e006      	b.n	801203a <__ieee754_rem_pio2+0x122>
 801202c:	e9c2 0100 	strd	r0, r1, [r2]
 8012030:	2500      	movs	r5, #0
 8012032:	2400      	movs	r4, #0
 8012034:	e9c2 4502 	strd	r4, r5, [r2, #8]
 8012038:	2500      	movs	r5, #0
 801203a:	4628      	mov	r0, r5
 801203c:	b00f      	add	sp, #60	; 0x3c
 801203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012042:	4602      	mov	r2, r0
 8012044:	460b      	mov	r3, r1
 8012046:	f7f2 fe21 	bl	8004c8c <__aeabi_dsub>
 801204a:	2500      	movs	r5, #0
 801204c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012050:	e9c4 0100 	strd	r0, r1, [r4]
 8012054:	e7f1      	b.n	801203a <__ieee754_rem_pio2+0x122>
 8012056:	a340      	add	r3, pc, #256	; (adr r3, 8012158 <__ieee754_rem_pio2+0x240>)
 8012058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205c:	f7f2 fe16 	bl	8004c8c <__aeabi_dsub>
 8012060:	a33f      	add	r3, pc, #252	; (adr r3, 8012160 <__ieee754_rem_pio2+0x248>)
 8012062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012066:	4606      	mov	r6, r0
 8012068:	460f      	mov	r7, r1
 801206a:	f7f2 fe0f 	bl	8004c8c <__aeabi_dsub>
 801206e:	4602      	mov	r2, r0
 8012070:	460b      	mov	r3, r1
 8012072:	4630      	mov	r0, r6
 8012074:	e9c4 2300 	strd	r2, r3, [r4]
 8012078:	4639      	mov	r1, r7
 801207a:	f7f2 fe07 	bl	8004c8c <__aeabi_dsub>
 801207e:	a338      	add	r3, pc, #224	; (adr r3, 8012160 <__ieee754_rem_pio2+0x248>)
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	f7f2 fe02 	bl	8004c8c <__aeabi_dsub>
 8012088:	2501      	movs	r5, #1
 801208a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801208e:	e7d4      	b.n	801203a <__ieee754_rem_pio2+0x122>
 8012090:	f7ff fea0 	bl	8011dd4 <fabs>
 8012094:	a334      	add	r3, pc, #208	; (adr r3, 8012168 <__ieee754_rem_pio2+0x250>)
 8012096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209a:	4680      	mov	r8, r0
 801209c:	4689      	mov	r9, r1
 801209e:	f7f2 ffa9 	bl	8004ff4 <__aeabi_dmul>
 80120a2:	2200      	movs	r2, #0
 80120a4:	4b39      	ldr	r3, [pc, #228]	; (801218c <__ieee754_rem_pio2+0x274>)
 80120a6:	f7f2 fdf3 	bl	8004c90 <__adddf3>
 80120aa:	f7f3 fa3d 	bl	8005528 <__aeabi_d2iz>
 80120ae:	4605      	mov	r5, r0
 80120b0:	f7f2 ff3a 	bl	8004f28 <__aeabi_i2d>
 80120b4:	a324      	add	r3, pc, #144	; (adr r3, 8012148 <__ieee754_rem_pio2+0x230>)
 80120b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80120be:	f7f2 ff99 	bl	8004ff4 <__aeabi_dmul>
 80120c2:	4602      	mov	r2, r0
 80120c4:	460b      	mov	r3, r1
 80120c6:	4640      	mov	r0, r8
 80120c8:	4649      	mov	r1, r9
 80120ca:	f7f2 fddf 	bl	8004c8c <__aeabi_dsub>
 80120ce:	a320      	add	r3, pc, #128	; (adr r3, 8012150 <__ieee754_rem_pio2+0x238>)
 80120d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d4:	4682      	mov	sl, r0
 80120d6:	468b      	mov	fp, r1
 80120d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120dc:	f7f2 ff8a 	bl	8004ff4 <__aeabi_dmul>
 80120e0:	2d1f      	cmp	r5, #31
 80120e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120e6:	dc55      	bgt.n	8012194 <__ieee754_rem_pio2+0x27c>
 80120e8:	4b29      	ldr	r3, [pc, #164]	; (8012190 <__ieee754_rem_pio2+0x278>)
 80120ea:	1e6a      	subs	r2, r5, #1
 80120ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120f0:	429f      	cmp	r7, r3
 80120f2:	d04f      	beq.n	8012194 <__ieee754_rem_pio2+0x27c>
 80120f4:	4602      	mov	r2, r0
 80120f6:	460b      	mov	r3, r1
 80120f8:	4650      	mov	r0, sl
 80120fa:	4659      	mov	r1, fp
 80120fc:	f7f2 fdc6 	bl	8004c8c <__aeabi_dsub>
 8012100:	4602      	mov	r2, r0
 8012102:	460b      	mov	r3, r1
 8012104:	4681      	mov	r9, r0
 8012106:	4688      	mov	r8, r1
 8012108:	e9c4 2300 	strd	r2, r3, [r4]
 801210c:	464a      	mov	r2, r9
 801210e:	4643      	mov	r3, r8
 8012110:	4650      	mov	r0, sl
 8012112:	4659      	mov	r1, fp
 8012114:	f7f2 fdba 	bl	8004c8c <__aeabi_dsub>
 8012118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801211c:	f7f2 fdb6 	bl	8004c8c <__aeabi_dsub>
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	2e00      	cmp	r6, #0
 8012126:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801212a:	da86      	bge.n	801203a <__ieee754_rem_pio2+0x122>
 801212c:	464a      	mov	r2, r9
 801212e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012132:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8012136:	e884 000c 	stmia.w	r4, {r2, r3}
 801213a:	60e1      	str	r1, [r4, #12]
 801213c:	60a0      	str	r0, [r4, #8]
 801213e:	426d      	negs	r5, r5
 8012140:	e77b      	b.n	801203a <__ieee754_rem_pio2+0x122>
 8012142:	bf00      	nop
 8012144:	f3af 8000 	nop.w
 8012148:	54400000 	.word	0x54400000
 801214c:	3ff921fb 	.word	0x3ff921fb
 8012150:	1a626331 	.word	0x1a626331
 8012154:	3dd0b461 	.word	0x3dd0b461
 8012158:	1a600000 	.word	0x1a600000
 801215c:	3dd0b461 	.word	0x3dd0b461
 8012160:	2e037073 	.word	0x2e037073
 8012164:	3ba3198a 	.word	0x3ba3198a
 8012168:	6dc9c883 	.word	0x6dc9c883
 801216c:	3fe45f30 	.word	0x3fe45f30
 8012170:	3fe921fb 	.word	0x3fe921fb
 8012174:	4002d97b 	.word	0x4002d97b
 8012178:	3ff921fb 	.word	0x3ff921fb
 801217c:	413921fb 	.word	0x413921fb
 8012180:	7fefffff 	.word	0x7fefffff
 8012184:	41700000 	.word	0x41700000
 8012188:	080167e0 	.word	0x080167e0
 801218c:	3fe00000 	.word	0x3fe00000
 8012190:	08016760 	.word	0x08016760
 8012194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012198:	4650      	mov	r0, sl
 801219a:	4659      	mov	r1, fp
 801219c:	f7f2 fd76 	bl	8004c8c <__aeabi_dsub>
 80121a0:	153f      	asrs	r7, r7, #20
 80121a2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80121a6:	1afb      	subs	r3, r7, r3
 80121a8:	2b10      	cmp	r3, #16
 80121aa:	4681      	mov	r9, r0
 80121ac:	4688      	mov	r8, r1
 80121ae:	e9c4 0100 	strd	r0, r1, [r4]
 80121b2:	ddab      	ble.n	801210c <__ieee754_rem_pio2+0x1f4>
 80121b4:	a358      	add	r3, pc, #352	; (adr r3, 8012318 <__ieee754_rem_pio2+0x400>)
 80121b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121be:	f7f2 ff19 	bl	8004ff4 <__aeabi_dmul>
 80121c2:	4680      	mov	r8, r0
 80121c4:	4689      	mov	r9, r1
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	4650      	mov	r0, sl
 80121cc:	4659      	mov	r1, fp
 80121ce:	f7f2 fd5d 	bl	8004c8c <__aeabi_dsub>
 80121d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80121d6:	4602      	mov	r2, r0
 80121d8:	460b      	mov	r3, r1
 80121da:	4650      	mov	r0, sl
 80121dc:	4659      	mov	r1, fp
 80121de:	f7f2 fd55 	bl	8004c8c <__aeabi_dsub>
 80121e2:	4642      	mov	r2, r8
 80121e4:	464b      	mov	r3, r9
 80121e6:	f7f2 fd51 	bl	8004c8c <__aeabi_dsub>
 80121ea:	a34d      	add	r3, pc, #308	; (adr r3, 8012320 <__ieee754_rem_pio2+0x408>)
 80121ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f0:	4680      	mov	r8, r0
 80121f2:	4689      	mov	r9, r1
 80121f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121f8:	f7f2 fefc 	bl	8004ff4 <__aeabi_dmul>
 80121fc:	4642      	mov	r2, r8
 80121fe:	464b      	mov	r3, r9
 8012200:	f7f2 fd44 	bl	8004c8c <__aeabi_dsub>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801220c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012210:	f7f2 fd3c 	bl	8004c8c <__aeabi_dsub>
 8012214:	460b      	mov	r3, r1
 8012216:	4602      	mov	r2, r0
 8012218:	4688      	mov	r8, r1
 801221a:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801221e:	1a7f      	subs	r7, r7, r1
 8012220:	2f31      	cmp	r7, #49	; 0x31
 8012222:	4681      	mov	r9, r0
 8012224:	e9c4 2300 	strd	r2, r3, [r4]
 8012228:	dd72      	ble.n	8012310 <__ieee754_rem_pio2+0x3f8>
 801222a:	a33f      	add	r3, pc, #252	; (adr r3, 8012328 <__ieee754_rem_pio2+0x410>)
 801222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012230:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012234:	f7f2 fede 	bl	8004ff4 <__aeabi_dmul>
 8012238:	4680      	mov	r8, r0
 801223a:	4689      	mov	r9, r1
 801223c:	4602      	mov	r2, r0
 801223e:	460b      	mov	r3, r1
 8012240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012244:	f7f2 fd22 	bl	8004c8c <__aeabi_dsub>
 8012248:	4602      	mov	r2, r0
 801224a:	460b      	mov	r3, r1
 801224c:	4682      	mov	sl, r0
 801224e:	468b      	mov	fp, r1
 8012250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012254:	f7f2 fd1a 	bl	8004c8c <__aeabi_dsub>
 8012258:	4642      	mov	r2, r8
 801225a:	464b      	mov	r3, r9
 801225c:	f7f2 fd16 	bl	8004c8c <__aeabi_dsub>
 8012260:	a333      	add	r3, pc, #204	; (adr r3, 8012330 <__ieee754_rem_pio2+0x418>)
 8012262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012266:	4680      	mov	r8, r0
 8012268:	4689      	mov	r9, r1
 801226a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801226e:	f7f2 fec1 	bl	8004ff4 <__aeabi_dmul>
 8012272:	4642      	mov	r2, r8
 8012274:	464b      	mov	r3, r9
 8012276:	f7f2 fd09 	bl	8004c8c <__aeabi_dsub>
 801227a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801227e:	e739      	b.n	80120f4 <__ieee754_rem_pio2+0x1dc>
 8012280:	f7f2 fd06 	bl	8004c90 <__adddf3>
 8012284:	4b2e      	ldr	r3, [pc, #184]	; (8012340 <__ieee754_rem_pio2+0x428>)
 8012286:	4680      	mov	r8, r0
 8012288:	429f      	cmp	r7, r3
 801228a:	4689      	mov	r9, r1
 801228c:	d022      	beq.n	80122d4 <__ieee754_rem_pio2+0x3bc>
 801228e:	a32a      	add	r3, pc, #168	; (adr r3, 8012338 <__ieee754_rem_pio2+0x420>)
 8012290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012294:	f7f2 fcfc 	bl	8004c90 <__adddf3>
 8012298:	4602      	mov	r2, r0
 801229a:	460b      	mov	r3, r1
 801229c:	4640      	mov	r0, r8
 801229e:	e9c4 2300 	strd	r2, r3, [r4]
 80122a2:	4649      	mov	r1, r9
 80122a4:	f7f2 fcf2 	bl	8004c8c <__aeabi_dsub>
 80122a8:	a323      	add	r3, pc, #140	; (adr r3, 8012338 <__ieee754_rem_pio2+0x420>)
 80122aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ae:	f7f2 fcef 	bl	8004c90 <__adddf3>
 80122b2:	f04f 35ff 	mov.w	r5, #4294967295
 80122b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122ba:	e6be      	b.n	801203a <__ieee754_rem_pio2+0x122>
 80122bc:	6862      	ldr	r2, [r4, #4]
 80122be:	68e3      	ldr	r3, [r4, #12]
 80122c0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80122c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80122c8:	4245      	negs	r5, r0
 80122ca:	6062      	str	r2, [r4, #4]
 80122cc:	60e3      	str	r3, [r4, #12]
 80122ce:	e6b4      	b.n	801203a <__ieee754_rem_pio2+0x122>
 80122d0:	2303      	movs	r3, #3
 80122d2:	e69d      	b.n	8012010 <__ieee754_rem_pio2+0xf8>
 80122d4:	a310      	add	r3, pc, #64	; (adr r3, 8012318 <__ieee754_rem_pio2+0x400>)
 80122d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122da:	f7f2 fcd9 	bl	8004c90 <__adddf3>
 80122de:	a310      	add	r3, pc, #64	; (adr r3, 8012320 <__ieee754_rem_pio2+0x408>)
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	4606      	mov	r6, r0
 80122e6:	460f      	mov	r7, r1
 80122e8:	f7f2 fcd2 	bl	8004c90 <__adddf3>
 80122ec:	4602      	mov	r2, r0
 80122ee:	460b      	mov	r3, r1
 80122f0:	4630      	mov	r0, r6
 80122f2:	e9c4 2300 	strd	r2, r3, [r4]
 80122f6:	4639      	mov	r1, r7
 80122f8:	f7f2 fcc8 	bl	8004c8c <__aeabi_dsub>
 80122fc:	a308      	add	r3, pc, #32	; (adr r3, 8012320 <__ieee754_rem_pio2+0x408>)
 80122fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012302:	f7f2 fcc5 	bl	8004c90 <__adddf3>
 8012306:	f04f 35ff 	mov.w	r5, #4294967295
 801230a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801230e:	e694      	b.n	801203a <__ieee754_rem_pio2+0x122>
 8012310:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012314:	e6fa      	b.n	801210c <__ieee754_rem_pio2+0x1f4>
 8012316:	bf00      	nop
 8012318:	1a600000 	.word	0x1a600000
 801231c:	3dd0b461 	.word	0x3dd0b461
 8012320:	2e037073 	.word	0x2e037073
 8012324:	3ba3198a 	.word	0x3ba3198a
 8012328:	2e000000 	.word	0x2e000000
 801232c:	3ba3198a 	.word	0x3ba3198a
 8012330:	252049c1 	.word	0x252049c1
 8012334:	397b839a 	.word	0x397b839a
 8012338:	1a626331 	.word	0x1a626331
 801233c:	3dd0b461 	.word	0x3dd0b461
 8012340:	3ff921fb 	.word	0x3ff921fb

08012344 <__ieee754_sqrt>:
 8012344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012348:	4e5f      	ldr	r6, [pc, #380]	; (80124c8 <__ieee754_sqrt+0x184>)
 801234a:	460c      	mov	r4, r1
 801234c:	46b6      	mov	lr, r6
 801234e:	400e      	ands	r6, r1
 8012350:	4576      	cmp	r6, lr
 8012352:	4605      	mov	r5, r0
 8012354:	f000 8098 	beq.w	8012488 <__ieee754_sqrt+0x144>
 8012358:	2900      	cmp	r1, #0
 801235a:	460b      	mov	r3, r1
 801235c:	4602      	mov	r2, r0
 801235e:	dd74      	ble.n	801244a <__ieee754_sqrt+0x106>
 8012360:	ea5f 5e21 	movs.w	lr, r1, asr #20
 8012364:	d07f      	beq.n	8012466 <__ieee754_sqrt+0x122>
 8012366:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 801236a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801236e:	f01e 0f01 	tst.w	lr, #1
 8012372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012376:	d163      	bne.n	8012440 <__ieee754_sqrt+0xfc>
 8012378:	2700      	movs	r7, #0
 801237a:	463e      	mov	r6, r7
 801237c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8012380:	440b      	add	r3, r1
 8012382:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8012386:	0052      	lsls	r2, r2, #1
 8012388:	2016      	movs	r0, #22
 801238a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801238e:	1874      	adds	r4, r6, r1
 8012390:	429c      	cmp	r4, r3
 8012392:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8012396:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801239a:	dc02      	bgt.n	80123a2 <__ieee754_sqrt+0x5e>
 801239c:	1b1b      	subs	r3, r3, r4
 801239e:	1866      	adds	r6, r4, r1
 80123a0:	440f      	add	r7, r1
 80123a2:	3801      	subs	r0, #1
 80123a4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80123a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80123ac:	d1ef      	bne.n	801238e <__ieee754_sqrt+0x4a>
 80123ae:	4684      	mov	ip, r0
 80123b0:	2420      	movs	r4, #32
 80123b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80123b6:	e009      	b.n	80123cc <__ieee754_sqrt+0x88>
 80123b8:	d020      	beq.n	80123fc <__ieee754_sqrt+0xb8>
 80123ba:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80123be:	3c01      	subs	r4, #1
 80123c0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80123c4:	442b      	add	r3, r5
 80123c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80123ca:	d020      	beq.n	801240e <__ieee754_sqrt+0xca>
 80123cc:	429e      	cmp	r6, r3
 80123ce:	eb01 050c 	add.w	r5, r1, ip
 80123d2:	daf1      	bge.n	80123b8 <__ieee754_sqrt+0x74>
 80123d4:	2d00      	cmp	r5, #0
 80123d6:	eb05 0c01 	add.w	ip, r5, r1
 80123da:	db09      	blt.n	80123f0 <__ieee754_sqrt+0xac>
 80123dc:	46b0      	mov	r8, r6
 80123de:	4295      	cmp	r5, r2
 80123e0:	eba3 0306 	sub.w	r3, r3, r6
 80123e4:	d900      	bls.n	80123e8 <__ieee754_sqrt+0xa4>
 80123e6:	3b01      	subs	r3, #1
 80123e8:	4646      	mov	r6, r8
 80123ea:	1b52      	subs	r2, r2, r5
 80123ec:	4408      	add	r0, r1
 80123ee:	e7e4      	b.n	80123ba <__ieee754_sqrt+0x76>
 80123f0:	f1bc 0f00 	cmp.w	ip, #0
 80123f4:	dbf2      	blt.n	80123dc <__ieee754_sqrt+0x98>
 80123f6:	f106 0801 	add.w	r8, r6, #1
 80123fa:	e7f0      	b.n	80123de <__ieee754_sqrt+0x9a>
 80123fc:	4295      	cmp	r5, r2
 80123fe:	d817      	bhi.n	8012430 <__ieee754_sqrt+0xec>
 8012400:	2d00      	cmp	r5, #0
 8012402:	eb05 0c01 	add.w	ip, r5, r1
 8012406:	db49      	blt.n	801249c <__ieee754_sqrt+0x158>
 8012408:	4698      	mov	r8, r3
 801240a:	2300      	movs	r3, #0
 801240c:	e7ec      	b.n	80123e8 <__ieee754_sqrt+0xa4>
 801240e:	4313      	orrs	r3, r2
 8012410:	d110      	bne.n	8012434 <__ieee754_sqrt+0xf0>
 8012412:	0840      	lsrs	r0, r0, #1
 8012414:	107b      	asrs	r3, r7, #1
 8012416:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801241a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801241e:	07fa      	lsls	r2, r7, #31
 8012420:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 8012424:	4639      	mov	r1, r7
 8012426:	bf48      	it	mi
 8012428:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 801242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012430:	4633      	mov	r3, r6
 8012432:	e7c2      	b.n	80123ba <__ieee754_sqrt+0x76>
 8012434:	1c41      	adds	r1, r0, #1
 8012436:	d035      	beq.n	80124a4 <__ieee754_sqrt+0x160>
 8012438:	f000 0301 	and.w	r3, r0, #1
 801243c:	4418      	add	r0, r3
 801243e:	e7e8      	b.n	8012412 <__ieee754_sqrt+0xce>
 8012440:	005b      	lsls	r3, r3, #1
 8012442:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012446:	0052      	lsls	r2, r2, #1
 8012448:	e796      	b.n	8012378 <__ieee754_sqrt+0x34>
 801244a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801244e:	4306      	orrs	r6, r0
 8012450:	d0ec      	beq.n	801242c <__ieee754_sqrt+0xe8>
 8012452:	bb79      	cbnz	r1, 80124b4 <__ieee754_sqrt+0x170>
 8012454:	468e      	mov	lr, r1
 8012456:	0ad3      	lsrs	r3, r2, #11
 8012458:	f1ae 0e15 	sub.w	lr, lr, #21
 801245c:	0552      	lsls	r2, r2, #21
 801245e:	2b00      	cmp	r3, #0
 8012460:	d0f9      	beq.n	8012456 <__ieee754_sqrt+0x112>
 8012462:	02dd      	lsls	r5, r3, #11
 8012464:	d421      	bmi.n	80124aa <__ieee754_sqrt+0x166>
 8012466:	2100      	movs	r1, #0
 8012468:	e000      	b.n	801246c <__ieee754_sqrt+0x128>
 801246a:	4601      	mov	r1, r0
 801246c:	005b      	lsls	r3, r3, #1
 801246e:	02dc      	lsls	r4, r3, #11
 8012470:	f101 0001 	add.w	r0, r1, #1
 8012474:	d5f9      	bpl.n	801246a <__ieee754_sqrt+0x126>
 8012476:	f1c0 0420 	rsb	r4, r0, #32
 801247a:	fa22 f404 	lsr.w	r4, r2, r4
 801247e:	4323      	orrs	r3, r4
 8012480:	ebc1 0e0e 	rsb	lr, r1, lr
 8012484:	4082      	lsls	r2, r0
 8012486:	e76e      	b.n	8012366 <__ieee754_sqrt+0x22>
 8012488:	4602      	mov	r2, r0
 801248a:	460b      	mov	r3, r1
 801248c:	f7f2 fdb2 	bl	8004ff4 <__aeabi_dmul>
 8012490:	462a      	mov	r2, r5
 8012492:	4623      	mov	r3, r4
 8012494:	f7f2 fbfc 	bl	8004c90 <__adddf3>
 8012498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801249c:	f1bc 0f00 	cmp.w	ip, #0
 80124a0:	dbb2      	blt.n	8012408 <__ieee754_sqrt+0xc4>
 80124a2:	e7a8      	b.n	80123f6 <__ieee754_sqrt+0xb2>
 80124a4:	3701      	adds	r7, #1
 80124a6:	4620      	mov	r0, r4
 80124a8:	e7b4      	b.n	8012414 <__ieee754_sqrt+0xd0>
 80124aa:	2420      	movs	r4, #32
 80124ac:	f04f 31ff 	mov.w	r1, #4294967295
 80124b0:	2000      	movs	r0, #0
 80124b2:	e7e2      	b.n	801247a <__ieee754_sqrt+0x136>
 80124b4:	4602      	mov	r2, r0
 80124b6:	460b      	mov	r3, r1
 80124b8:	f7f2 fbe8 	bl	8004c8c <__aeabi_dsub>
 80124bc:	4602      	mov	r2, r0
 80124be:	460b      	mov	r3, r1
 80124c0:	f7f2 fec2 	bl	8005248 <__aeabi_ddiv>
 80124c4:	e7b2      	b.n	801242c <__ieee754_sqrt+0xe8>
 80124c6:	bf00      	nop
 80124c8:	7ff00000 	.word	0x7ff00000
 80124cc:	00000000 	.word	0x00000000

080124d0 <__kernel_cos>:
 80124d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80124d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80124dc:	b085      	sub	sp, #20
 80124de:	460c      	mov	r4, r1
 80124e0:	4692      	mov	sl, r2
 80124e2:	469b      	mov	fp, r3
 80124e4:	4605      	mov	r5, r0
 80124e6:	da6b      	bge.n	80125c0 <__kernel_cos+0xf0>
 80124e8:	f7f3 f81e 	bl	8005528 <__aeabi_d2iz>
 80124ec:	2800      	cmp	r0, #0
 80124ee:	f000 80e7 	beq.w	80126c0 <__kernel_cos+0x1f0>
 80124f2:	462a      	mov	r2, r5
 80124f4:	4623      	mov	r3, r4
 80124f6:	4628      	mov	r0, r5
 80124f8:	4621      	mov	r1, r4
 80124fa:	f7f2 fd7b 	bl	8004ff4 <__aeabi_dmul>
 80124fe:	a374      	add	r3, pc, #464	; (adr r3, 80126d0 <__kernel_cos+0x200>)
 8012500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012504:	4680      	mov	r8, r0
 8012506:	4689      	mov	r9, r1
 8012508:	f7f2 fd74 	bl	8004ff4 <__aeabi_dmul>
 801250c:	a372      	add	r3, pc, #456	; (adr r3, 80126d8 <__kernel_cos+0x208>)
 801250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012512:	f7f2 fbbd 	bl	8004c90 <__adddf3>
 8012516:	4642      	mov	r2, r8
 8012518:	464b      	mov	r3, r9
 801251a:	f7f2 fd6b 	bl	8004ff4 <__aeabi_dmul>
 801251e:	a370      	add	r3, pc, #448	; (adr r3, 80126e0 <__kernel_cos+0x210>)
 8012520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012524:	f7f2 fbb2 	bl	8004c8c <__aeabi_dsub>
 8012528:	4642      	mov	r2, r8
 801252a:	464b      	mov	r3, r9
 801252c:	f7f2 fd62 	bl	8004ff4 <__aeabi_dmul>
 8012530:	a36d      	add	r3, pc, #436	; (adr r3, 80126e8 <__kernel_cos+0x218>)
 8012532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012536:	f7f2 fbab 	bl	8004c90 <__adddf3>
 801253a:	4642      	mov	r2, r8
 801253c:	464b      	mov	r3, r9
 801253e:	f7f2 fd59 	bl	8004ff4 <__aeabi_dmul>
 8012542:	a36b      	add	r3, pc, #428	; (adr r3, 80126f0 <__kernel_cos+0x220>)
 8012544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012548:	f7f2 fba0 	bl	8004c8c <__aeabi_dsub>
 801254c:	4642      	mov	r2, r8
 801254e:	464b      	mov	r3, r9
 8012550:	f7f2 fd50 	bl	8004ff4 <__aeabi_dmul>
 8012554:	a368      	add	r3, pc, #416	; (adr r3, 80126f8 <__kernel_cos+0x228>)
 8012556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255a:	f7f2 fb99 	bl	8004c90 <__adddf3>
 801255e:	4642      	mov	r2, r8
 8012560:	464b      	mov	r3, r9
 8012562:	f7f2 fd47 	bl	8004ff4 <__aeabi_dmul>
 8012566:	e9cd 0100 	strd	r0, r1, [sp]
 801256a:	2200      	movs	r2, #0
 801256c:	4b64      	ldr	r3, [pc, #400]	; (8012700 <__kernel_cos+0x230>)
 801256e:	4640      	mov	r0, r8
 8012570:	4649      	mov	r1, r9
 8012572:	f7f2 fd3f 	bl	8004ff4 <__aeabi_dmul>
 8012576:	e9dd 2300 	ldrd	r2, r3, [sp]
 801257a:	4606      	mov	r6, r0
 801257c:	460f      	mov	r7, r1
 801257e:	4640      	mov	r0, r8
 8012580:	4649      	mov	r1, r9
 8012582:	f7f2 fd37 	bl	8004ff4 <__aeabi_dmul>
 8012586:	4652      	mov	r2, sl
 8012588:	4680      	mov	r8, r0
 801258a:	4689      	mov	r9, r1
 801258c:	465b      	mov	r3, fp
 801258e:	4628      	mov	r0, r5
 8012590:	4621      	mov	r1, r4
 8012592:	f7f2 fd2f 	bl	8004ff4 <__aeabi_dmul>
 8012596:	4602      	mov	r2, r0
 8012598:	460b      	mov	r3, r1
 801259a:	4640      	mov	r0, r8
 801259c:	4649      	mov	r1, r9
 801259e:	f7f2 fb75 	bl	8004c8c <__aeabi_dsub>
 80125a2:	4602      	mov	r2, r0
 80125a4:	460b      	mov	r3, r1
 80125a6:	4630      	mov	r0, r6
 80125a8:	4639      	mov	r1, r7
 80125aa:	f7f2 fb6f 	bl	8004c8c <__aeabi_dsub>
 80125ae:	4602      	mov	r2, r0
 80125b0:	460b      	mov	r3, r1
 80125b2:	2000      	movs	r0, #0
 80125b4:	4953      	ldr	r1, [pc, #332]	; (8012704 <__kernel_cos+0x234>)
 80125b6:	f7f2 fb69 	bl	8004c8c <__aeabi_dsub>
 80125ba:	b005      	add	sp, #20
 80125bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	f7f2 fd16 	bl	8004ff4 <__aeabi_dmul>
 80125c8:	a341      	add	r3, pc, #260	; (adr r3, 80126d0 <__kernel_cos+0x200>)
 80125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ce:	4680      	mov	r8, r0
 80125d0:	4689      	mov	r9, r1
 80125d2:	f7f2 fd0f 	bl	8004ff4 <__aeabi_dmul>
 80125d6:	a340      	add	r3, pc, #256	; (adr r3, 80126d8 <__kernel_cos+0x208>)
 80125d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125dc:	f7f2 fb58 	bl	8004c90 <__adddf3>
 80125e0:	4642      	mov	r2, r8
 80125e2:	464b      	mov	r3, r9
 80125e4:	f7f2 fd06 	bl	8004ff4 <__aeabi_dmul>
 80125e8:	a33d      	add	r3, pc, #244	; (adr r3, 80126e0 <__kernel_cos+0x210>)
 80125ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ee:	f7f2 fb4d 	bl	8004c8c <__aeabi_dsub>
 80125f2:	4642      	mov	r2, r8
 80125f4:	464b      	mov	r3, r9
 80125f6:	f7f2 fcfd 	bl	8004ff4 <__aeabi_dmul>
 80125fa:	a33b      	add	r3, pc, #236	; (adr r3, 80126e8 <__kernel_cos+0x218>)
 80125fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012600:	f7f2 fb46 	bl	8004c90 <__adddf3>
 8012604:	4642      	mov	r2, r8
 8012606:	464b      	mov	r3, r9
 8012608:	f7f2 fcf4 	bl	8004ff4 <__aeabi_dmul>
 801260c:	a338      	add	r3, pc, #224	; (adr r3, 80126f0 <__kernel_cos+0x220>)
 801260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012612:	f7f2 fb3b 	bl	8004c8c <__aeabi_dsub>
 8012616:	4642      	mov	r2, r8
 8012618:	464b      	mov	r3, r9
 801261a:	f7f2 fceb 	bl	8004ff4 <__aeabi_dmul>
 801261e:	a336      	add	r3, pc, #216	; (adr r3, 80126f8 <__kernel_cos+0x228>)
 8012620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012624:	f7f2 fb34 	bl	8004c90 <__adddf3>
 8012628:	464b      	mov	r3, r9
 801262a:	4642      	mov	r2, r8
 801262c:	f7f2 fce2 	bl	8004ff4 <__aeabi_dmul>
 8012630:	4b35      	ldr	r3, [pc, #212]	; (8012708 <__kernel_cos+0x238>)
 8012632:	e9cd 0100 	strd	r0, r1, [sp]
 8012636:	429e      	cmp	r6, r3
 8012638:	dd97      	ble.n	801256a <__kernel_cos+0x9a>
 801263a:	4b34      	ldr	r3, [pc, #208]	; (801270c <__kernel_cos+0x23c>)
 801263c:	2200      	movs	r2, #0
 801263e:	429e      	cmp	r6, r3
 8012640:	dc38      	bgt.n	80126b4 <__kernel_cos+0x1e4>
 8012642:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 8012646:	2000      	movs	r0, #0
 8012648:	492e      	ldr	r1, [pc, #184]	; (8012704 <__kernel_cos+0x234>)
 801264a:	4616      	mov	r6, r2
 801264c:	461f      	mov	r7, r3
 801264e:	f7f2 fb1d 	bl	8004c8c <__aeabi_dsub>
 8012652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012656:	2200      	movs	r2, #0
 8012658:	4b29      	ldr	r3, [pc, #164]	; (8012700 <__kernel_cos+0x230>)
 801265a:	4640      	mov	r0, r8
 801265c:	4649      	mov	r1, r9
 801265e:	f7f2 fcc9 	bl	8004ff4 <__aeabi_dmul>
 8012662:	4632      	mov	r2, r6
 8012664:	463b      	mov	r3, r7
 8012666:	f7f2 fb11 	bl	8004c8c <__aeabi_dsub>
 801266a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801266e:	4606      	mov	r6, r0
 8012670:	460f      	mov	r7, r1
 8012672:	4640      	mov	r0, r8
 8012674:	4649      	mov	r1, r9
 8012676:	f7f2 fcbd 	bl	8004ff4 <__aeabi_dmul>
 801267a:	4652      	mov	r2, sl
 801267c:	4680      	mov	r8, r0
 801267e:	4689      	mov	r9, r1
 8012680:	465b      	mov	r3, fp
 8012682:	4628      	mov	r0, r5
 8012684:	4621      	mov	r1, r4
 8012686:	f7f2 fcb5 	bl	8004ff4 <__aeabi_dmul>
 801268a:	4602      	mov	r2, r0
 801268c:	460b      	mov	r3, r1
 801268e:	4640      	mov	r0, r8
 8012690:	4649      	mov	r1, r9
 8012692:	f7f2 fafb 	bl	8004c8c <__aeabi_dsub>
 8012696:	4602      	mov	r2, r0
 8012698:	460b      	mov	r3, r1
 801269a:	4630      	mov	r0, r6
 801269c:	4639      	mov	r1, r7
 801269e:	f7f2 faf5 	bl	8004c8c <__aeabi_dsub>
 80126a2:	4602      	mov	r2, r0
 80126a4:	460b      	mov	r3, r1
 80126a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126aa:	f7f2 faef 	bl	8004c8c <__aeabi_dsub>
 80126ae:	b005      	add	sp, #20
 80126b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b4:	4b16      	ldr	r3, [pc, #88]	; (8012710 <__kernel_cos+0x240>)
 80126b6:	2600      	movs	r6, #0
 80126b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126bc:	4f15      	ldr	r7, [pc, #84]	; (8012714 <__kernel_cos+0x244>)
 80126be:	e7ca      	b.n	8012656 <__kernel_cos+0x186>
 80126c0:	4910      	ldr	r1, [pc, #64]	; (8012704 <__kernel_cos+0x234>)
 80126c2:	2000      	movs	r0, #0
 80126c4:	b005      	add	sp, #20
 80126c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ca:	bf00      	nop
 80126cc:	f3af 8000 	nop.w
 80126d0:	be8838d4 	.word	0xbe8838d4
 80126d4:	bda8fae9 	.word	0xbda8fae9
 80126d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80126dc:	3e21ee9e 	.word	0x3e21ee9e
 80126e0:	809c52ad 	.word	0x809c52ad
 80126e4:	3e927e4f 	.word	0x3e927e4f
 80126e8:	19cb1590 	.word	0x19cb1590
 80126ec:	3efa01a0 	.word	0x3efa01a0
 80126f0:	16c15177 	.word	0x16c15177
 80126f4:	3f56c16c 	.word	0x3f56c16c
 80126f8:	5555554c 	.word	0x5555554c
 80126fc:	3fa55555 	.word	0x3fa55555
 8012700:	3fe00000 	.word	0x3fe00000
 8012704:	3ff00000 	.word	0x3ff00000
 8012708:	3fd33332 	.word	0x3fd33332
 801270c:	3fe90000 	.word	0x3fe90000
 8012710:	3fe70000 	.word	0x3fe70000
 8012714:	3fd20000 	.word	0x3fd20000

08012718 <__kernel_rem_pio2>:
 8012718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801271c:	4c7a      	ldr	r4, [pc, #488]	; (8012908 <__kernel_rem_pio2+0x1f0>)
 801271e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8012722:	461f      	mov	r7, r3
 8012724:	930c      	str	r3, [sp, #48]	; 0x30
 8012726:	1ed3      	subs	r3, r2, #3
 8012728:	fb84 5403 	smull	r5, r4, r4, r3
 801272c:	17db      	asrs	r3, r3, #31
 801272e:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 8012732:	9ea6      	ldr	r6, [sp, #664]	; 0x298
 8012734:	4c75      	ldr	r4, [pc, #468]	; (801290c <__kernel_rem_pio2+0x1f4>)
 8012736:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801273a:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 801273e:	1c6b      	adds	r3, r5, #1
 8012740:	4626      	mov	r6, r4
 8012742:	9409      	str	r4, [sp, #36]	; 0x24
 8012744:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8012748:	1e7c      	subs	r4, r7, #1
 801274a:	950d      	str	r5, [sp, #52]	; 0x34
 801274c:	9402      	str	r4, [sp, #8]
 801274e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012752:	1b2d      	subs	r5, r5, r4
 8012754:	1934      	adds	r4, r6, r4
 8012756:	9004      	str	r0, [sp, #16]
 8012758:	910a      	str	r1, [sp, #40]	; 0x28
 801275a:	9308      	str	r3, [sp, #32]
 801275c:	d416      	bmi.n	801278c <__kernel_rem_pio2+0x74>
 801275e:	442c      	add	r4, r5
 8012760:	3401      	adds	r4, #1
 8012762:	ae22      	add	r6, sp, #136	; 0x88
 8012764:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
 8012766:	e008      	b.n	801277a <__kernel_rem_pio2+0x62>
 8012768:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 801276c:	f7f2 fbdc 	bl	8004f28 <__aeabi_i2d>
 8012770:	3501      	adds	r5, #1
 8012772:	42a5      	cmp	r5, r4
 8012774:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8012778:	d008      	beq.n	801278c <__kernel_rem_pio2+0x74>
 801277a:	2d00      	cmp	r5, #0
 801277c:	daf4      	bge.n	8012768 <__kernel_rem_pio2+0x50>
 801277e:	3501      	adds	r5, #1
 8012780:	2000      	movs	r0, #0
 8012782:	2100      	movs	r1, #0
 8012784:	42a5      	cmp	r5, r4
 8012786:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 801278a:	d1f6      	bne.n	801277a <__kernel_rem_pio2+0x62>
 801278c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801278e:	2b00      	cmp	r3, #0
 8012790:	db31      	blt.n	80127f6 <__kernel_rem_pio2+0xde>
 8012792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012796:	a974      	add	r1, sp, #464	; 0x1d0
 8012798:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
 801279c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 80127a0:	9a02      	ldr	r2, [sp, #8]
 80127a2:	a924      	add	r1, sp, #144	; 0x90
 80127a4:	00db      	lsls	r3, r3, #3
 80127a6:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 80127aa:	9301      	str	r3, [sp, #4]
 80127ac:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 80127b0:	9b02      	ldr	r3, [sp, #8]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f2c0 8190 	blt.w	8012ad8 <__kernel_rem_pio2+0x3c0>
 80127b8:	464c      	mov	r4, r9
 80127ba:	9b04      	ldr	r3, [sp, #16]
 80127bc:	2600      	movs	r6, #0
 80127be:	f1a3 0508 	sub.w	r5, r3, #8
 80127c2:	9b01      	ldr	r3, [sp, #4]
 80127c4:	2700      	movs	r7, #0
 80127c6:	eb09 0803 	add.w	r8, r9, r3
 80127ca:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80127ce:	e874 0102 	ldrd	r0, r1, [r4], #-8
 80127d2:	f7f2 fc0f 	bl	8004ff4 <__aeabi_dmul>
 80127d6:	4602      	mov	r2, r0
 80127d8:	460b      	mov	r3, r1
 80127da:	4630      	mov	r0, r6
 80127dc:	4639      	mov	r1, r7
 80127de:	f7f2 fa57 	bl	8004c90 <__adddf3>
 80127e2:	4544      	cmp	r4, r8
 80127e4:	4606      	mov	r6, r0
 80127e6:	460f      	mov	r7, r1
 80127e8:	d1ef      	bne.n	80127ca <__kernel_rem_pio2+0xb2>
 80127ea:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80127ee:	45da      	cmp	sl, fp
 80127f0:	f109 0908 	add.w	r9, r9, #8
 80127f4:	d1dc      	bne.n	80127b0 <__kernel_rem_pio2+0x98>
 80127f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127f8:	a910      	add	r1, sp, #64	; 0x40
 80127fa:	461d      	mov	r5, r3
 80127fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012800:	3b02      	subs	r3, #2
 8012802:	009b      	lsls	r3, r3, #2
 8012804:	1d1a      	adds	r2, r3, #4
 8012806:	440a      	add	r2, r1
 8012808:	440b      	add	r3, r1
 801280a:	920f      	str	r2, [sp, #60]	; 0x3c
 801280c:	930e      	str	r3, [sp, #56]	; 0x38
 801280e:	ab9c      	add	r3, sp, #624	; 0x270
 8012810:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012814:	2d00      	cmp	r5, #0
 8012816:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801281a:	dd2b      	ble.n	8012874 <__kernel_rem_pio2+0x15c>
 801281c:	ab9c      	add	r3, sp, #624	; 0x270
 801281e:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
 8012822:	3ca8      	subs	r4, #168	; 0xa8
 8012824:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8012828:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801282c:	2200      	movs	r2, #0
 801282e:	4b38      	ldr	r3, [pc, #224]	; (8012910 <__kernel_rem_pio2+0x1f8>)
 8012830:	4630      	mov	r0, r6
 8012832:	4639      	mov	r1, r7
 8012834:	f7f2 fbde 	bl	8004ff4 <__aeabi_dmul>
 8012838:	f7f2 fe76 	bl	8005528 <__aeabi_d2iz>
 801283c:	f7f2 fb74 	bl	8004f28 <__aeabi_i2d>
 8012840:	2200      	movs	r2, #0
 8012842:	4b34      	ldr	r3, [pc, #208]	; (8012914 <__kernel_rem_pio2+0x1fc>)
 8012844:	4680      	mov	r8, r0
 8012846:	4689      	mov	r9, r1
 8012848:	f7f2 fbd4 	bl	8004ff4 <__aeabi_dmul>
 801284c:	4602      	mov	r2, r0
 801284e:	460b      	mov	r3, r1
 8012850:	4630      	mov	r0, r6
 8012852:	4639      	mov	r1, r7
 8012854:	f7f2 fa1a 	bl	8004c8c <__aeabi_dsub>
 8012858:	f7f2 fe66 	bl	8005528 <__aeabi_d2iz>
 801285c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8012860:	f84a 0f04 	str.w	r0, [sl, #4]!
 8012864:	4649      	mov	r1, r9
 8012866:	4640      	mov	r0, r8
 8012868:	f7f2 fa12 	bl	8004c90 <__adddf3>
 801286c:	455c      	cmp	r4, fp
 801286e:	4606      	mov	r6, r0
 8012870:	460f      	mov	r7, r1
 8012872:	d1db      	bne.n	801282c <__kernel_rem_pio2+0x114>
 8012874:	9c08      	ldr	r4, [sp, #32]
 8012876:	4630      	mov	r0, r6
 8012878:	4639      	mov	r1, r7
 801287a:	4622      	mov	r2, r4
 801287c:	f000 fcb4 	bl	80131e8 <scalbn>
 8012880:	2200      	movs	r2, #0
 8012882:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012886:	4606      	mov	r6, r0
 8012888:	460f      	mov	r7, r1
 801288a:	f7f2 fbb3 	bl	8004ff4 <__aeabi_dmul>
 801288e:	f000 fbf7 	bl	8013080 <floor>
 8012892:	2200      	movs	r2, #0
 8012894:	4b20      	ldr	r3, [pc, #128]	; (8012918 <__kernel_rem_pio2+0x200>)
 8012896:	f7f2 fbad 	bl	8004ff4 <__aeabi_dmul>
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	4630      	mov	r0, r6
 80128a0:	4639      	mov	r1, r7
 80128a2:	f7f2 f9f3 	bl	8004c8c <__aeabi_dsub>
 80128a6:	460f      	mov	r7, r1
 80128a8:	4606      	mov	r6, r0
 80128aa:	f7f2 fe3d 	bl	8005528 <__aeabi_d2iz>
 80128ae:	4681      	mov	r9, r0
 80128b0:	f7f2 fb3a 	bl	8004f28 <__aeabi_i2d>
 80128b4:	4602      	mov	r2, r0
 80128b6:	460b      	mov	r3, r1
 80128b8:	4630      	mov	r0, r6
 80128ba:	4639      	mov	r1, r7
 80128bc:	f7f2 f9e6 	bl	8004c8c <__aeabi_dsub>
 80128c0:	2c00      	cmp	r4, #0
 80128c2:	4606      	mov	r6, r0
 80128c4:	460f      	mov	r7, r1
 80128c6:	f340 80ee 	ble.w	8012aa6 <__kernel_rem_pio2+0x38e>
 80128ca:	1e68      	subs	r0, r5, #1
 80128cc:	ab10      	add	r3, sp, #64	; 0x40
 80128ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80128d2:	f1c4 0218 	rsb	r2, r4, #24
 80128d6:	fa43 f102 	asr.w	r1, r3, r2
 80128da:	fa01 f202 	lsl.w	r2, r1, r2
 80128de:	1a9b      	subs	r3, r3, r2
 80128e0:	f1c4 0817 	rsb	r8, r4, #23
 80128e4:	aa10      	add	r2, sp, #64	; 0x40
 80128e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80128ea:	4489      	add	r9, r1
 80128ec:	fa43 f808 	asr.w	r8, r3, r8
 80128f0:	f1b8 0f00 	cmp.w	r8, #0
 80128f4:	dd3d      	ble.n	8012972 <__kernel_rem_pio2+0x25a>
 80128f6:	2d00      	cmp	r5, #0
 80128f8:	f109 0901 	add.w	r9, r9, #1
 80128fc:	f340 82d5 	ble.w	8012eaa <__kernel_rem_pio2+0x792>
 8012900:	2200      	movs	r2, #0
 8012902:	4614      	mov	r4, r2
 8012904:	a90f      	add	r1, sp, #60	; 0x3c
 8012906:	e011      	b.n	801292c <__kernel_rem_pio2+0x214>
 8012908:	2aaaaaab 	.word	0x2aaaaaab
 801290c:	080168e8 	.word	0x080168e8
 8012910:	3e700000 	.word	0x3e700000
 8012914:	41700000 	.word	0x41700000
 8012918:	40200000 	.word	0x40200000
 801291c:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 8012920:	b10b      	cbz	r3, 8012926 <__kernel_rem_pio2+0x20e>
 8012922:	6008      	str	r0, [r1, #0]
 8012924:	2401      	movs	r4, #1
 8012926:	3201      	adds	r2, #1
 8012928:	4295      	cmp	r5, r2
 801292a:	dd0d      	ble.n	8012948 <__kernel_rem_pio2+0x230>
 801292c:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8012930:	2c00      	cmp	r4, #0
 8012932:	d0f3      	beq.n	801291c <__kernel_rem_pio2+0x204>
 8012934:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8012938:	3201      	adds	r2, #1
 801293a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 801293e:	4295      	cmp	r5, r2
 8012940:	600b      	str	r3, [r1, #0]
 8012942:	f04f 0401 	mov.w	r4, #1
 8012946:	dcf1      	bgt.n	801292c <__kernel_rem_pio2+0x214>
 8012948:	9b08      	ldr	r3, [sp, #32]
 801294a:	2b00      	cmp	r3, #0
 801294c:	dd0d      	ble.n	801296a <__kernel_rem_pio2+0x252>
 801294e:	2b01      	cmp	r3, #1
 8012950:	f000 80b1 	beq.w	8012ab6 <__kernel_rem_pio2+0x39e>
 8012954:	2b02      	cmp	r3, #2
 8012956:	d108      	bne.n	801296a <__kernel_rem_pio2+0x252>
 8012958:	1e6a      	subs	r2, r5, #1
 801295a:	ab10      	add	r3, sp, #64	; 0x40
 801295c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012960:	a910      	add	r1, sp, #64	; 0x40
 8012962:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012966:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801296a:	f1b8 0f02 	cmp.w	r8, #2
 801296e:	f000 8081 	beq.w	8012a74 <__kernel_rem_pio2+0x35c>
 8012972:	2200      	movs	r2, #0
 8012974:	2300      	movs	r3, #0
 8012976:	4630      	mov	r0, r6
 8012978:	4639      	mov	r1, r7
 801297a:	f7f2 fda3 	bl	80054c4 <__aeabi_dcmpeq>
 801297e:	2800      	cmp	r0, #0
 8012980:	f000 825d 	beq.w	8012e3e <__kernel_rem_pio2+0x726>
 8012984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012986:	f105 3bff 	add.w	fp, r5, #4294967295
 801298a:	455b      	cmp	r3, fp
 801298c:	dc10      	bgt.n	80129b0 <__kernel_rem_pio2+0x298>
 801298e:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8012992:	aa10      	add	r2, sp, #64	; 0x40
 8012994:	3b01      	subs	r3, #1
 8012996:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801299c:	2200      	movs	r2, #0
 801299e:	f853 1904 	ldr.w	r1, [r3], #-4
 80129a2:	4283      	cmp	r3, r0
 80129a4:	ea42 0201 	orr.w	r2, r2, r1
 80129a8:	d1f9      	bne.n	801299e <__kernel_rem_pio2+0x286>
 80129aa:	2a00      	cmp	r2, #0
 80129ac:	f040 80b1 	bne.w	8012b12 <__kernel_rem_pio2+0x3fa>
 80129b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b2:	aa10      	add	r2, sp, #64	; 0x40
 80129b4:	3b01      	subs	r3, #1
 80129b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f040 8273 	bne.w	8012ea6 <__kernel_rem_pio2+0x78e>
 80129c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80129c2:	2301      	movs	r3, #1
 80129c4:	f852 1904 	ldr.w	r1, [r2], #-4
 80129c8:	3301      	adds	r3, #1
 80129ca:	2900      	cmp	r1, #0
 80129cc:	d0fa      	beq.n	80129c4 <__kernel_rem_pio2+0x2ac>
 80129ce:	18e9      	adds	r1, r5, r3
 80129d0:	1c6a      	adds	r2, r5, #1
 80129d2:	428a      	cmp	r2, r1
 80129d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80129d6:	dc4b      	bgt.n	8012a70 <__kernel_rem_pio2+0x358>
 80129d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80129da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80129dc:	1851      	adds	r1, r2, r1
 80129de:	00db      	lsls	r3, r3, #3
 80129e0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80129e4:	9305      	str	r3, [sp, #20]
 80129e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80129e8:	4405      	add	r5, r0
 80129ea:	3901      	subs	r1, #1
 80129ec:	00e8      	lsls	r0, r5, #3
 80129ee:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 80129f2:	ab24      	add	r3, sp, #144	; 0x90
 80129f4:	00d2      	lsls	r2, r2, #3
 80129f6:	eb03 0b00 	add.w	fp, r3, r0
 80129fa:	ab74      	add	r3, sp, #464	; 0x1d0
 80129fc:	4413      	add	r3, r2
 80129fe:	9301      	str	r3, [sp, #4]
 8012a00:	f1a2 0308 	sub.w	r3, r2, #8
 8012a04:	9006      	str	r0, [sp, #24]
 8012a06:	9307      	str	r3, [sp, #28]
 8012a08:	f04f 0900 	mov.w	r9, #0
 8012a0c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8012a10:	f7f2 fa8a 	bl	8004f28 <__aeabi_i2d>
 8012a14:	9b02      	ldr	r3, [sp, #8]
 8012a16:	e8eb 0102 	strd	r0, r1, [fp], #8
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	f04f 0600 	mov.w	r6, #0
 8012a20:	f04f 0700 	mov.w	r7, #0
 8012a24:	db1b      	blt.n	8012a5e <__kernel_rem_pio2+0x346>
 8012a26:	9b06      	ldr	r3, [sp, #24]
 8012a28:	eb03 0409 	add.w	r4, r3, r9
 8012a2c:	9b07      	ldr	r3, [sp, #28]
 8012a2e:	eb09 0803 	add.w	r8, r9, r3
 8012a32:	ab24      	add	r3, sp, #144	; 0x90
 8012a34:	441c      	add	r4, r3
 8012a36:	4498      	add	r8, r3
 8012a38:	9b04      	ldr	r3, [sp, #16]
 8012a3a:	f1a3 0508 	sub.w	r5, r3, #8
 8012a3e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8012a42:	e874 0102 	ldrd	r0, r1, [r4], #-8
 8012a46:	f7f2 fad5 	bl	8004ff4 <__aeabi_dmul>
 8012a4a:	4602      	mov	r2, r0
 8012a4c:	460b      	mov	r3, r1
 8012a4e:	4630      	mov	r0, r6
 8012a50:	4639      	mov	r1, r7
 8012a52:	f7f2 f91d 	bl	8004c90 <__adddf3>
 8012a56:	4544      	cmp	r4, r8
 8012a58:	4606      	mov	r6, r0
 8012a5a:	460f      	mov	r7, r1
 8012a5c:	d1ef      	bne.n	8012a3e <__kernel_rem_pio2+0x326>
 8012a5e:	9b01      	ldr	r3, [sp, #4]
 8012a60:	f109 0908 	add.w	r9, r9, #8
 8012a64:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012a68:	9301      	str	r3, [sp, #4]
 8012a6a:	9b05      	ldr	r3, [sp, #20]
 8012a6c:	4599      	cmp	r9, r3
 8012a6e:	d1cd      	bne.n	8012a0c <__kernel_rem_pio2+0x2f4>
 8012a70:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012a72:	e6cc      	b.n	801280e <__kernel_rem_pio2+0xf6>
 8012a74:	4632      	mov	r2, r6
 8012a76:	463b      	mov	r3, r7
 8012a78:	2000      	movs	r0, #0
 8012a7a:	49b1      	ldr	r1, [pc, #708]	; (8012d40 <__kernel_rem_pio2+0x628>)
 8012a7c:	f7f2 f906 	bl	8004c8c <__aeabi_dsub>
 8012a80:	4606      	mov	r6, r0
 8012a82:	460f      	mov	r7, r1
 8012a84:	2c00      	cmp	r4, #0
 8012a86:	f43f af74 	beq.w	8012972 <__kernel_rem_pio2+0x25a>
 8012a8a:	9a08      	ldr	r2, [sp, #32]
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	49ac      	ldr	r1, [pc, #688]	; (8012d40 <__kernel_rem_pio2+0x628>)
 8012a90:	f000 fbaa 	bl	80131e8 <scalbn>
 8012a94:	4602      	mov	r2, r0
 8012a96:	460b      	mov	r3, r1
 8012a98:	4630      	mov	r0, r6
 8012a9a:	4639      	mov	r1, r7
 8012a9c:	f7f2 f8f6 	bl	8004c8c <__aeabi_dsub>
 8012aa0:	4606      	mov	r6, r0
 8012aa2:	460f      	mov	r7, r1
 8012aa4:	e765      	b.n	8012972 <__kernel_rem_pio2+0x25a>
 8012aa6:	d110      	bne.n	8012aca <__kernel_rem_pio2+0x3b2>
 8012aa8:	1e6b      	subs	r3, r5, #1
 8012aaa:	aa10      	add	r2, sp, #64	; 0x40
 8012aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ab0:	ea4f 58e3 	mov.w	r8, r3, asr #23
 8012ab4:	e71c      	b.n	80128f0 <__kernel_rem_pio2+0x1d8>
 8012ab6:	1e6a      	subs	r2, r5, #1
 8012ab8:	ab10      	add	r3, sp, #64	; 0x40
 8012aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012abe:	a910      	add	r1, sp, #64	; 0x40
 8012ac0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012ac4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012ac8:	e74f      	b.n	801296a <__kernel_rem_pio2+0x252>
 8012aca:	2200      	movs	r2, #0
 8012acc:	4b9d      	ldr	r3, [pc, #628]	; (8012d44 <__kernel_rem_pio2+0x62c>)
 8012ace:	f7f2 fd17 	bl	8005500 <__aeabi_dcmpge>
 8012ad2:	b958      	cbnz	r0, 8012aec <__kernel_rem_pio2+0x3d4>
 8012ad4:	4680      	mov	r8, r0
 8012ad6:	e74c      	b.n	8012972 <__kernel_rem_pio2+0x25a>
 8012ad8:	2600      	movs	r6, #0
 8012ada:	2700      	movs	r7, #0
 8012adc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8012ae0:	45da      	cmp	sl, fp
 8012ae2:	f109 0908 	add.w	r9, r9, #8
 8012ae6:	f47f ae63 	bne.w	80127b0 <__kernel_rem_pio2+0x98>
 8012aea:	e684      	b.n	80127f6 <__kernel_rem_pio2+0xde>
 8012aec:	2d00      	cmp	r5, #0
 8012aee:	f109 0901 	add.w	r9, r9, #1
 8012af2:	bfc8      	it	gt
 8012af4:	f04f 0802 	movgt.w	r8, #2
 8012af8:	f73f af02 	bgt.w	8012900 <__kernel_rem_pio2+0x1e8>
 8012afc:	4632      	mov	r2, r6
 8012afe:	463b      	mov	r3, r7
 8012b00:	2000      	movs	r0, #0
 8012b02:	498f      	ldr	r1, [pc, #572]	; (8012d40 <__kernel_rem_pio2+0x628>)
 8012b04:	f7f2 f8c2 	bl	8004c8c <__aeabi_dsub>
 8012b08:	f04f 0802 	mov.w	r8, #2
 8012b0c:	4606      	mov	r6, r0
 8012b0e:	460f      	mov	r7, r1
 8012b10:	e72f      	b.n	8012972 <__kernel_rem_pio2+0x25a>
 8012b12:	9a08      	ldr	r2, [sp, #32]
 8012b14:	ab10      	add	r3, sp, #64	; 0x40
 8012b16:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012b1a:	3a18      	subs	r2, #24
 8012b1c:	f8cd 9014 	str.w	r9, [sp, #20]
 8012b20:	f8cd 8004 	str.w	r8, [sp, #4]
 8012b24:	9208      	str	r2, [sp, #32]
 8012b26:	b96b      	cbnz	r3, 8012b44 <__kernel_rem_pio2+0x42c>
 8012b28:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	a910      	add	r1, sp, #64	; 0x40
 8012b30:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012b34:	f853 1904 	ldr.w	r1, [r3], #-4
 8012b38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b3c:	3a18      	subs	r2, #24
 8012b3e:	2900      	cmp	r1, #0
 8012b40:	d0f8      	beq.n	8012b34 <__kernel_rem_pio2+0x41c>
 8012b42:	9208      	str	r2, [sp, #32]
 8012b44:	9a08      	ldr	r2, [sp, #32]
 8012b46:	2000      	movs	r0, #0
 8012b48:	497d      	ldr	r1, [pc, #500]	; (8012d40 <__kernel_rem_pio2+0x628>)
 8012b4a:	f000 fb4d 	bl	80131e8 <scalbn>
 8012b4e:	f1bb 0f00 	cmp.w	fp, #0
 8012b52:	4604      	mov	r4, r0
 8012b54:	460d      	mov	r5, r1
 8012b56:	f2c0 81b8 	blt.w	8012eca <__kernel_rem_pio2+0x7b2>
 8012b5a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012b5e:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
 8012b62:	aa10      	add	r2, sp, #64	; 0x40
 8012b64:	eb02 068b 	add.w	r6, r2, fp, lsl #2
 8012b68:	eb08 0903 	add.w	r9, r8, r3
 8012b6c:	9304      	str	r3, [sp, #16]
 8012b6e:	3604      	adds	r6, #4
 8012b70:	f109 0708 	add.w	r7, r9, #8
 8012b74:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8012b78:	f7f2 f9d6 	bl	8004f28 <__aeabi_i2d>
 8012b7c:	4622      	mov	r2, r4
 8012b7e:	462b      	mov	r3, r5
 8012b80:	f7f2 fa38 	bl	8004ff4 <__aeabi_dmul>
 8012b84:	2200      	movs	r2, #0
 8012b86:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012b8a:	4b6f      	ldr	r3, [pc, #444]	; (8012d48 <__kernel_rem_pio2+0x630>)
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	4629      	mov	r1, r5
 8012b90:	f7f2 fa30 	bl	8004ff4 <__aeabi_dmul>
 8012b94:	45b8      	cmp	r8, r7
 8012b96:	4604      	mov	r4, r0
 8012b98:	460d      	mov	r5, r1
 8012b9a:	d1eb      	bne.n	8012b74 <__kernel_rem_pio2+0x45c>
 8012b9c:	464b      	mov	r3, r9
 8012b9e:	f8cd b018 	str.w	fp, [sp, #24]
 8012ba2:	469b      	mov	fp, r3
 8012ba4:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8012ba8:	f8cd a008 	str.w	sl, [sp, #8]
 8012bac:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012bb0:	f04f 0900 	mov.w	r9, #0
 8012bb4:	f1ba 0f00 	cmp.w	sl, #0
 8012bb8:	f2c0 8128 	blt.w	8012e0c <__kernel_rem_pio2+0x6f4>
 8012bbc:	a35e      	add	r3, pc, #376	; (adr r3, 8012d38 <__kernel_rem_pio2+0x620>)
 8012bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc2:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8012d4c <__kernel_rem_pio2+0x634>
 8012bc6:	465d      	mov	r5, fp
 8012bc8:	2600      	movs	r6, #0
 8012bca:	2700      	movs	r7, #0
 8012bcc:	2400      	movs	r4, #0
 8012bce:	e003      	b.n	8012bd8 <__kernel_rem_pio2+0x4c0>
 8012bd0:	45a1      	cmp	r9, r4
 8012bd2:	db10      	blt.n	8012bf6 <__kernel_rem_pio2+0x4de>
 8012bd4:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8012bd8:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012bdc:	f7f2 fa0a 	bl	8004ff4 <__aeabi_dmul>
 8012be0:	4602      	mov	r2, r0
 8012be2:	460b      	mov	r3, r1
 8012be4:	4630      	mov	r0, r6
 8012be6:	4639      	mov	r1, r7
 8012be8:	f7f2 f852 	bl	8004c90 <__adddf3>
 8012bec:	3401      	adds	r4, #1
 8012bee:	45a2      	cmp	sl, r4
 8012bf0:	4606      	mov	r6, r0
 8012bf2:	460f      	mov	r7, r1
 8012bf4:	daec      	bge.n	8012bd0 <__kernel_rem_pio2+0x4b8>
 8012bf6:	9b02      	ldr	r3, [sp, #8]
 8012bf8:	f1ab 0b08 	sub.w	fp, fp, #8
 8012bfc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012c00:	e9c3 6700 	strd	r6, r7, [r3]
 8012c04:	ab72      	add	r3, sp, #456	; 0x1c8
 8012c06:	455b      	cmp	r3, fp
 8012c08:	f109 0901 	add.w	r9, r9, #1
 8012c0c:	d1d2      	bne.n	8012bb4 <__kernel_rem_pio2+0x49c>
 8012c0e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012c10:	f8dd b018 	ldr.w	fp, [sp, #24]
 8012c14:	f8dd a008 	ldr.w	sl, [sp, #8]
 8012c18:	2b03      	cmp	r3, #3
 8012c1a:	f200 8083 	bhi.w	8012d24 <__kernel_rem_pio2+0x60c>
 8012c1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012c22:	00d3      	.short	0x00d3
 8012c24:	00970097 	.word	0x00970097
 8012c28:	0004      	.short	0x0004
 8012c2a:	f1bb 0f00 	cmp.w	fp, #0
 8012c2e:	f340 8156 	ble.w	8012ede <__kernel_rem_pio2+0x7c6>
 8012c32:	9b04      	ldr	r3, [sp, #16]
 8012c34:	f8cd b008 	str.w	fp, [sp, #8]
 8012c38:	4453      	add	r3, sl
 8012c3a:	4698      	mov	r8, r3
 8012c3c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012c40:	46d3      	mov	fp, sl
 8012c42:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
 8012c46:	4632      	mov	r2, r6
 8012c48:	463b      	mov	r3, r7
 8012c4a:	4648      	mov	r0, r9
 8012c4c:	4651      	mov	r1, sl
 8012c4e:	f7f2 f81f 	bl	8004c90 <__adddf3>
 8012c52:	4604      	mov	r4, r0
 8012c54:	460d      	mov	r5, r1
 8012c56:	4602      	mov	r2, r0
 8012c58:	460b      	mov	r3, r1
 8012c5a:	4648      	mov	r0, r9
 8012c5c:	4651      	mov	r1, sl
 8012c5e:	f7f2 f815 	bl	8004c8c <__aeabi_dsub>
 8012c62:	4632      	mov	r2, r6
 8012c64:	463b      	mov	r3, r7
 8012c66:	f7f2 f813 	bl	8004c90 <__adddf3>
 8012c6a:	e9c8 0100 	strd	r0, r1, [r8]
 8012c6e:	e968 4502 	strd	r4, r5, [r8, #-8]!
 8012c72:	45c3      	cmp	fp, r8
 8012c74:	4626      	mov	r6, r4
 8012c76:	462f      	mov	r7, r5
 8012c78:	d1e3      	bne.n	8012c42 <__kernel_rem_pio2+0x52a>
 8012c7a:	46da      	mov	sl, fp
 8012c7c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012c80:	f1bb 0f01 	cmp.w	fp, #1
 8012c84:	f340 812b 	ble.w	8012ede <__kernel_rem_pio2+0x7c6>
 8012c88:	9b04      	ldr	r3, [sp, #16]
 8012c8a:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8012c8e:	4453      	add	r3, sl
 8012c90:	4698      	mov	r8, r3
 8012c92:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012c96:	4699      	mov	r9, r3
 8012c98:	e959 3402 	ldrd	r3, r4, [r9, #-8]
 8012c9c:	4630      	mov	r0, r6
 8012c9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	4639      	mov	r1, r7
 8012ca6:	4623      	mov	r3, r4
 8012ca8:	f7f1 fff2 	bl	8004c90 <__adddf3>
 8012cac:	4604      	mov	r4, r0
 8012cae:	460d      	mov	r5, r1
 8012cb0:	4602      	mov	r2, r0
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cb8:	f7f1 ffe8 	bl	8004c8c <__aeabi_dsub>
 8012cbc:	4632      	mov	r2, r6
 8012cbe:	463b      	mov	r3, r7
 8012cc0:	f7f1 ffe6 	bl	8004c90 <__adddf3>
 8012cc4:	e9c9 0100 	strd	r0, r1, [r9]
 8012cc8:	e969 4502 	strd	r4, r5, [r9, #-8]!
 8012ccc:	45cb      	cmp	fp, r9
 8012cce:	4626      	mov	r6, r4
 8012cd0:	462f      	mov	r7, r5
 8012cd2:	d1e1      	bne.n	8012c98 <__kernel_rem_pio2+0x580>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	461d      	mov	r5, r3
 8012cd8:	f108 0808 	add.w	r8, r8, #8
 8012cdc:	ac50      	add	r4, sp, #320	; 0x140
 8012cde:	4618      	mov	r0, r3
 8012ce0:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8012ce4:	4629      	mov	r1, r5
 8012ce6:	f7f1 ffd3 	bl	8004c90 <__adddf3>
 8012cea:	4544      	cmp	r4, r8
 8012cec:	4603      	mov	r3, r0
 8012cee:	460d      	mov	r5, r1
 8012cf0:	d1f5      	bne.n	8012cde <__kernel_rem_pio2+0x5c6>
 8012cf2:	9a01      	ldr	r2, [sp, #4]
 8012cf4:	2a00      	cmp	r2, #0
 8012cf6:	f000 80da 	beq.w	8012eae <__kernel_rem_pio2+0x796>
 8012cfa:	f8da 4004 	ldr.w	r4, [sl, #4]
 8012cfe:	f8da 200c 	ldr.w	r2, [sl, #12]
 8012d02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012d04:	f8da 1000 	ldr.w	r1, [sl]
 8012d08:	f8da 0008 	ldr.w	r0, [sl, #8]
 8012d0c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8012d10:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8012d14:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8012d18:	617d      	str	r5, [r7, #20]
 8012d1a:	613b      	str	r3, [r7, #16]
 8012d1c:	607c      	str	r4, [r7, #4]
 8012d1e:	60fa      	str	r2, [r7, #12]
 8012d20:	6039      	str	r1, [r7, #0]
 8012d22:	60b8      	str	r0, [r7, #8]
 8012d24:	9b05      	ldr	r3, [sp, #20]
 8012d26:	f003 0007 	and.w	r0, r3, #7
 8012d2a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8012d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d32:	bf00      	nop
 8012d34:	f3af 8000 	nop.w
 8012d38:	40000000 	.word	0x40000000
 8012d3c:	3ff921fb 	.word	0x3ff921fb
 8012d40:	3ff00000 	.word	0x3ff00000
 8012d44:	3fe00000 	.word	0x3fe00000
 8012d48:	3e700000 	.word	0x3e700000
 8012d4c:	080168f8 	.word	0x080168f8
 8012d50:	2400      	movs	r4, #0
 8012d52:	4621      	mov	r1, r4
 8012d54:	9d04      	ldr	r5, [sp, #16]
 8012d56:	3508      	adds	r5, #8
 8012d58:	4455      	add	r5, sl
 8012d5a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012d5e:	4620      	mov	r0, r4
 8012d60:	f7f1 ff96 	bl	8004c90 <__adddf3>
 8012d64:	4555      	cmp	r5, sl
 8012d66:	4604      	mov	r4, r0
 8012d68:	d1f7      	bne.n	8012d5a <__kernel_rem_pio2+0x642>
 8012d6a:	9b01      	ldr	r3, [sp, #4]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d050      	beq.n	8012e12 <__kernel_rem_pio2+0x6fa>
 8012d70:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012d72:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8012d76:	460b      	mov	r3, r1
 8012d78:	e9da 0100 	ldrd	r0, r1, [sl]
 8012d7c:	e887 0030 	stmia.w	r7, {r4, r5}
 8012d80:	4622      	mov	r2, r4
 8012d82:	f7f1 ff83 	bl	8004c8c <__aeabi_dsub>
 8012d86:	f1bb 0f00 	cmp.w	fp, #0
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	460d      	mov	r5, r1
 8012d8e:	dd0d      	ble.n	8012dac <__kernel_rem_pio2+0x694>
 8012d90:	2401      	movs	r4, #1
 8012d92:	4618      	mov	r0, r3
 8012d94:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 8012d98:	4629      	mov	r1, r5
 8012d9a:	f7f1 ff79 	bl	8004c90 <__adddf3>
 8012d9e:	3401      	adds	r4, #1
 8012da0:	45a3      	cmp	fp, r4
 8012da2:	4603      	mov	r3, r0
 8012da4:	460d      	mov	r5, r1
 8012da6:	daf4      	bge.n	8012d92 <__kernel_rem_pio2+0x67a>
 8012da8:	9a01      	ldr	r2, [sp, #4]
 8012daa:	b10a      	cbz	r2, 8012db0 <__kernel_rem_pio2+0x698>
 8012dac:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8012db0:	4618      	mov	r0, r3
 8012db2:	4629      	mov	r1, r5
 8012db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012db6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012dba:	9b05      	ldr	r3, [sp, #20]
 8012dbc:	f003 0007 	and.w	r0, r3, #7
 8012dc0:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8012dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc8:	2300      	movs	r3, #0
 8012dca:	461c      	mov	r4, r3
 8012dcc:	9a04      	ldr	r2, [sp, #16]
 8012dce:	3208      	adds	r2, #8
 8012dd0:	4492      	add	sl, r2
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012dd8:	4621      	mov	r1, r4
 8012dda:	f7f1 ff59 	bl	8004c90 <__adddf3>
 8012dde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012de2:	f1bb 3fff 	cmp.w	fp, #4294967295
 8012de6:	4603      	mov	r3, r0
 8012de8:	460c      	mov	r4, r1
 8012dea:	d1f2      	bne.n	8012dd2 <__kernel_rem_pio2+0x6ba>
 8012dec:	9a01      	ldr	r2, [sp, #4]
 8012dee:	b10a      	cbz	r2, 8012df4 <__kernel_rem_pio2+0x6dc>
 8012df0:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8012df4:	4618      	mov	r0, r3
 8012df6:	4621      	mov	r1, r4
 8012df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dfa:	e9c3 0100 	strd	r0, r1, [r3]
 8012dfe:	9b05      	ldr	r3, [sp, #20]
 8012e00:	f003 0007 	and.w	r0, r3, #7
 8012e04:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8012e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0c:	2600      	movs	r6, #0
 8012e0e:	2700      	movs	r7, #0
 8012e10:	e6f1      	b.n	8012bf6 <__kernel_rem_pio2+0x4de>
 8012e12:	4626      	mov	r6, r4
 8012e14:	460f      	mov	r7, r1
 8012e16:	4622      	mov	r2, r4
 8012e18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012e20:	e9c4 6700 	strd	r6, r7, [r4]
 8012e24:	f7f1 ff32 	bl	8004c8c <__aeabi_dsub>
 8012e28:	f1bb 0f00 	cmp.w	fp, #0
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	460d      	mov	r5, r1
 8012e30:	dcae      	bgt.n	8012d90 <__kernel_rem_pio2+0x678>
 8012e32:	4618      	mov	r0, r3
 8012e34:	4629      	mov	r1, r5
 8012e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012e3c:	e7bd      	b.n	8012dba <__kernel_rem_pio2+0x6a2>
 8012e3e:	9b08      	ldr	r3, [sp, #32]
 8012e40:	4630      	mov	r0, r6
 8012e42:	425a      	negs	r2, r3
 8012e44:	4639      	mov	r1, r7
 8012e46:	f8cd 9014 	str.w	r9, [sp, #20]
 8012e4a:	f8cd 8004 	str.w	r8, [sp, #4]
 8012e4e:	f000 f9cb 	bl	80131e8 <scalbn>
 8012e52:	2200      	movs	r2, #0
 8012e54:	4b2c      	ldr	r3, [pc, #176]	; (8012f08 <__kernel_rem_pio2+0x7f0>)
 8012e56:	4606      	mov	r6, r0
 8012e58:	460f      	mov	r7, r1
 8012e5a:	f7f2 fb51 	bl	8005500 <__aeabi_dcmpge>
 8012e5e:	2800      	cmp	r0, #0
 8012e60:	d040      	beq.n	8012ee4 <__kernel_rem_pio2+0x7cc>
 8012e62:	2200      	movs	r2, #0
 8012e64:	4b29      	ldr	r3, [pc, #164]	; (8012f0c <__kernel_rem_pio2+0x7f4>)
 8012e66:	4630      	mov	r0, r6
 8012e68:	4639      	mov	r1, r7
 8012e6a:	f7f2 f8c3 	bl	8004ff4 <__aeabi_dmul>
 8012e6e:	f7f2 fb5b 	bl	8005528 <__aeabi_d2iz>
 8012e72:	4604      	mov	r4, r0
 8012e74:	f7f2 f858 	bl	8004f28 <__aeabi_i2d>
 8012e78:	2200      	movs	r2, #0
 8012e7a:	4b23      	ldr	r3, [pc, #140]	; (8012f08 <__kernel_rem_pio2+0x7f0>)
 8012e7c:	f7f2 f8ba 	bl	8004ff4 <__aeabi_dmul>
 8012e80:	460b      	mov	r3, r1
 8012e82:	4602      	mov	r2, r0
 8012e84:	4639      	mov	r1, r7
 8012e86:	4630      	mov	r0, r6
 8012e88:	f7f1 ff00 	bl	8004c8c <__aeabi_dsub>
 8012e8c:	f7f2 fb4c 	bl	8005528 <__aeabi_d2iz>
 8012e90:	9b08      	ldr	r3, [sp, #32]
 8012e92:	f105 0b01 	add.w	fp, r5, #1
 8012e96:	3318      	adds	r3, #24
 8012e98:	9308      	str	r3, [sp, #32]
 8012e9a:	ab10      	add	r3, sp, #64	; 0x40
 8012e9c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012ea0:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
 8012ea4:	e64e      	b.n	8012b44 <__kernel_rem_pio2+0x42c>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e591      	b.n	80129ce <__kernel_rem_pio2+0x2b6>
 8012eaa:	2400      	movs	r4, #0
 8012eac:	e54c      	b.n	8012948 <__kernel_rem_pio2+0x230>
 8012eae:	4618      	mov	r0, r3
 8012eb0:	e9da 6700 	ldrd	r6, r7, [sl]
 8012eb4:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8012eb8:	4629      	mov	r1, r5
 8012eba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012ebc:	e9c5 6700 	strd	r6, r7, [r5]
 8012ec0:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8012ec4:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8012ec8:	e72c      	b.n	8012d24 <__kernel_rem_pio2+0x60c>
 8012eca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012ecc:	2b03      	cmp	r3, #3
 8012ece:	f63f af29 	bhi.w	8012d24 <__kernel_rem_pio2+0x60c>
 8012ed2:	e8df f003 	tbb	[pc, r3]
 8012ed6:	1015      	.short	0x1015
 8012ed8:	0210      	.short	0x0210
 8012eda:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8012ede:	2300      	movs	r3, #0
 8012ee0:	461d      	mov	r5, r3
 8012ee2:	e706      	b.n	8012cf2 <__kernel_rem_pio2+0x5da>
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	4639      	mov	r1, r7
 8012ee8:	f7f2 fb1e 	bl	8005528 <__aeabi_d2iz>
 8012eec:	ab10      	add	r3, sp, #64	; 0x40
 8012eee:	46ab      	mov	fp, r5
 8012ef0:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012ef4:	e626      	b.n	8012b44 <__kernel_rem_pio2+0x42c>
 8012ef6:	2400      	movs	r4, #0
 8012ef8:	4621      	mov	r1, r4
 8012efa:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8012efe:	e734      	b.n	8012d6a <__kernel_rem_pio2+0x652>
 8012f00:	2300      	movs	r3, #0
 8012f02:	461c      	mov	r4, r3
 8012f04:	e772      	b.n	8012dec <__kernel_rem_pio2+0x6d4>
 8012f06:	bf00      	nop
 8012f08:	41700000 	.word	0x41700000
 8012f0c:	3e700000 	.word	0x3e700000

08012f10 <__kernel_sin>:
 8012f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f14:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012f18:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012f1c:	b085      	sub	sp, #20
 8012f1e:	460c      	mov	r4, r1
 8012f20:	4690      	mov	r8, r2
 8012f22:	4699      	mov	r9, r3
 8012f24:	4605      	mov	r5, r0
 8012f26:	da04      	bge.n	8012f32 <__kernel_sin+0x22>
 8012f28:	f7f2 fafe 	bl	8005528 <__aeabi_d2iz>
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	f000 8085 	beq.w	801303c <__kernel_sin+0x12c>
 8012f32:	462a      	mov	r2, r5
 8012f34:	4623      	mov	r3, r4
 8012f36:	4628      	mov	r0, r5
 8012f38:	4621      	mov	r1, r4
 8012f3a:	f7f2 f85b 	bl	8004ff4 <__aeabi_dmul>
 8012f3e:	4606      	mov	r6, r0
 8012f40:	460f      	mov	r7, r1
 8012f42:	4602      	mov	r2, r0
 8012f44:	460b      	mov	r3, r1
 8012f46:	4628      	mov	r0, r5
 8012f48:	4621      	mov	r1, r4
 8012f4a:	f7f2 f853 	bl	8004ff4 <__aeabi_dmul>
 8012f4e:	a33e      	add	r3, pc, #248	; (adr r3, 8013048 <__kernel_sin+0x138>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	4682      	mov	sl, r0
 8012f56:	468b      	mov	fp, r1
 8012f58:	4630      	mov	r0, r6
 8012f5a:	4639      	mov	r1, r7
 8012f5c:	f7f2 f84a 	bl	8004ff4 <__aeabi_dmul>
 8012f60:	a33b      	add	r3, pc, #236	; (adr r3, 8013050 <__kernel_sin+0x140>)
 8012f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f66:	f7f1 fe91 	bl	8004c8c <__aeabi_dsub>
 8012f6a:	4632      	mov	r2, r6
 8012f6c:	463b      	mov	r3, r7
 8012f6e:	f7f2 f841 	bl	8004ff4 <__aeabi_dmul>
 8012f72:	a339      	add	r3, pc, #228	; (adr r3, 8013058 <__kernel_sin+0x148>)
 8012f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f78:	f7f1 fe8a 	bl	8004c90 <__adddf3>
 8012f7c:	4632      	mov	r2, r6
 8012f7e:	463b      	mov	r3, r7
 8012f80:	f7f2 f838 	bl	8004ff4 <__aeabi_dmul>
 8012f84:	a336      	add	r3, pc, #216	; (adr r3, 8013060 <__kernel_sin+0x150>)
 8012f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8a:	f7f1 fe7f 	bl	8004c8c <__aeabi_dsub>
 8012f8e:	4632      	mov	r2, r6
 8012f90:	463b      	mov	r3, r7
 8012f92:	f7f2 f82f 	bl	8004ff4 <__aeabi_dmul>
 8012f96:	a334      	add	r3, pc, #208	; (adr r3, 8013068 <__kernel_sin+0x158>)
 8012f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9c:	f7f1 fe78 	bl	8004c90 <__adddf3>
 8012fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8012fa6:	b39b      	cbz	r3, 8013010 <__kernel_sin+0x100>
 8012fa8:	2200      	movs	r2, #0
 8012faa:	4b33      	ldr	r3, [pc, #204]	; (8013078 <__kernel_sin+0x168>)
 8012fac:	4640      	mov	r0, r8
 8012fae:	4649      	mov	r1, r9
 8012fb0:	f7f2 f820 	bl	8004ff4 <__aeabi_dmul>
 8012fb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fbc:	4650      	mov	r0, sl
 8012fbe:	4659      	mov	r1, fp
 8012fc0:	f7f2 f818 	bl	8004ff4 <__aeabi_dmul>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fcc:	f7f1 fe5e 	bl	8004c8c <__aeabi_dsub>
 8012fd0:	4632      	mov	r2, r6
 8012fd2:	463b      	mov	r3, r7
 8012fd4:	f7f2 f80e 	bl	8004ff4 <__aeabi_dmul>
 8012fd8:	4642      	mov	r2, r8
 8012fda:	464b      	mov	r3, r9
 8012fdc:	f7f1 fe56 	bl	8004c8c <__aeabi_dsub>
 8012fe0:	a323      	add	r3, pc, #140	; (adr r3, 8013070 <__kernel_sin+0x160>)
 8012fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	460f      	mov	r7, r1
 8012fea:	4650      	mov	r0, sl
 8012fec:	4659      	mov	r1, fp
 8012fee:	f7f2 f801 	bl	8004ff4 <__aeabi_dmul>
 8012ff2:	4602      	mov	r2, r0
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	4639      	mov	r1, r7
 8012ffa:	f7f1 fe49 	bl	8004c90 <__adddf3>
 8012ffe:	4602      	mov	r2, r0
 8013000:	460b      	mov	r3, r1
 8013002:	4628      	mov	r0, r5
 8013004:	4621      	mov	r1, r4
 8013006:	f7f1 fe41 	bl	8004c8c <__aeabi_dsub>
 801300a:	b005      	add	sp, #20
 801300c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013010:	4602      	mov	r2, r0
 8013012:	460b      	mov	r3, r1
 8013014:	4630      	mov	r0, r6
 8013016:	4639      	mov	r1, r7
 8013018:	f7f1 ffec 	bl	8004ff4 <__aeabi_dmul>
 801301c:	a314      	add	r3, pc, #80	; (adr r3, 8013070 <__kernel_sin+0x160>)
 801301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013022:	f7f1 fe33 	bl	8004c8c <__aeabi_dsub>
 8013026:	4652      	mov	r2, sl
 8013028:	465b      	mov	r3, fp
 801302a:	f7f1 ffe3 	bl	8004ff4 <__aeabi_dmul>
 801302e:	462a      	mov	r2, r5
 8013030:	4623      	mov	r3, r4
 8013032:	f7f1 fe2d 	bl	8004c90 <__adddf3>
 8013036:	b005      	add	sp, #20
 8013038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801303c:	4628      	mov	r0, r5
 801303e:	4621      	mov	r1, r4
 8013040:	b005      	add	sp, #20
 8013042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013046:	bf00      	nop
 8013048:	5acfd57c 	.word	0x5acfd57c
 801304c:	3de5d93a 	.word	0x3de5d93a
 8013050:	8a2b9ceb 	.word	0x8a2b9ceb
 8013054:	3e5ae5e6 	.word	0x3e5ae5e6
 8013058:	57b1fe7d 	.word	0x57b1fe7d
 801305c:	3ec71de3 	.word	0x3ec71de3
 8013060:	19c161d5 	.word	0x19c161d5
 8013064:	3f2a01a0 	.word	0x3f2a01a0
 8013068:	1110f8a6 	.word	0x1110f8a6
 801306c:	3f811111 	.word	0x3f811111
 8013070:	55555549 	.word	0x55555549
 8013074:	3fc55555 	.word	0x3fc55555
 8013078:	3fe00000 	.word	0x3fe00000
 801307c:	00000000 	.word	0x00000000

08013080 <floor>:
 8013080:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013088:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801308c:	2e13      	cmp	r6, #19
 801308e:	460b      	mov	r3, r1
 8013090:	4604      	mov	r4, r0
 8013092:	460d      	mov	r5, r1
 8013094:	4688      	mov	r8, r1
 8013096:	4607      	mov	r7, r0
 8013098:	dc1c      	bgt.n	80130d4 <floor+0x54>
 801309a:	2e00      	cmp	r6, #0
 801309c:	db3f      	blt.n	801311e <floor+0x9e>
 801309e:	4a3a      	ldr	r2, [pc, #232]	; (8013188 <floor+0x108>)
 80130a0:	4686      	mov	lr, r0
 80130a2:	fa42 f906 	asr.w	r9, r2, r6
 80130a6:	ea01 0209 	and.w	r2, r1, r9
 80130aa:	4302      	orrs	r2, r0
 80130ac:	d017      	beq.n	80130de <floor+0x5e>
 80130ae:	a334      	add	r3, pc, #208	; (adr r3, 8013180 <floor+0x100>)
 80130b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b4:	f7f1 fdec 	bl	8004c90 <__adddf3>
 80130b8:	2200      	movs	r2, #0
 80130ba:	2300      	movs	r3, #0
 80130bc:	f7f2 fa2a 	bl	8005514 <__aeabi_dcmpgt>
 80130c0:	b120      	cbz	r0, 80130cc <floor+0x4c>
 80130c2:	2d00      	cmp	r5, #0
 80130c4:	db40      	blt.n	8013148 <floor+0xc8>
 80130c6:	ea28 0509 	bic.w	r5, r8, r9
 80130ca:	2700      	movs	r7, #0
 80130cc:	4638      	mov	r0, r7
 80130ce:	4629      	mov	r1, r5
 80130d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130d4:	2e33      	cmp	r6, #51	; 0x33
 80130d6:	dd06      	ble.n	80130e6 <floor+0x66>
 80130d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80130dc:	d02f      	beq.n	801313e <floor+0xbe>
 80130de:	4620      	mov	r0, r4
 80130e0:	4619      	mov	r1, r3
 80130e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130e6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80130ea:	f04f 39ff 	mov.w	r9, #4294967295
 80130ee:	fa29 f902 	lsr.w	r9, r9, r2
 80130f2:	ea10 0f09 	tst.w	r0, r9
 80130f6:	d0f2      	beq.n	80130de <floor+0x5e>
 80130f8:	a321      	add	r3, pc, #132	; (adr r3, 8013180 <floor+0x100>)
 80130fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fe:	f7f1 fdc7 	bl	8004c90 <__adddf3>
 8013102:	2200      	movs	r2, #0
 8013104:	2300      	movs	r3, #0
 8013106:	f7f2 fa05 	bl	8005514 <__aeabi_dcmpgt>
 801310a:	2800      	cmp	r0, #0
 801310c:	d0de      	beq.n	80130cc <floor+0x4c>
 801310e:	2d00      	cmp	r5, #0
 8013110:	db20      	blt.n	8013154 <floor+0xd4>
 8013112:	4645      	mov	r5, r8
 8013114:	ea27 0709 	bic.w	r7, r7, r9
 8013118:	4638      	mov	r0, r7
 801311a:	4629      	mov	r1, r5
 801311c:	e7d8      	b.n	80130d0 <floor+0x50>
 801311e:	a318      	add	r3, pc, #96	; (adr r3, 8013180 <floor+0x100>)
 8013120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013124:	f7f1 fdb4 	bl	8004c90 <__adddf3>
 8013128:	2200      	movs	r2, #0
 801312a:	2300      	movs	r3, #0
 801312c:	f7f2 f9f2 	bl	8005514 <__aeabi_dcmpgt>
 8013130:	2800      	cmp	r0, #0
 8013132:	d0cb      	beq.n	80130cc <floor+0x4c>
 8013134:	2d00      	cmp	r5, #0
 8013136:	db18      	blt.n	801316a <floor+0xea>
 8013138:	2700      	movs	r7, #0
 801313a:	463d      	mov	r5, r7
 801313c:	e7c6      	b.n	80130cc <floor+0x4c>
 801313e:	4602      	mov	r2, r0
 8013140:	460b      	mov	r3, r1
 8013142:	f7f1 fda5 	bl	8004c90 <__adddf3>
 8013146:	e7cc      	b.n	80130e2 <floor+0x62>
 8013148:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801314c:	fa43 f606 	asr.w	r6, r3, r6
 8013150:	44b0      	add	r8, r6
 8013152:	e7b8      	b.n	80130c6 <floor+0x46>
 8013154:	2e14      	cmp	r6, #20
 8013156:	d010      	beq.n	801317a <floor+0xfa>
 8013158:	2301      	movs	r3, #1
 801315a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801315e:	fa03 f606 	lsl.w	r6, r3, r6
 8013162:	1937      	adds	r7, r6, r4
 8013164:	bf28      	it	cs
 8013166:	4498      	addcs	r8, r3
 8013168:	e7d3      	b.n	8013112 <floor+0x92>
 801316a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801316e:	4b07      	ldr	r3, [pc, #28]	; (801318c <floor+0x10c>)
 8013170:	4322      	orrs	r2, r4
 8013172:	bf18      	it	ne
 8013174:	461d      	movne	r5, r3
 8013176:	2700      	movs	r7, #0
 8013178:	e7a8      	b.n	80130cc <floor+0x4c>
 801317a:	f105 0801 	add.w	r8, r5, #1
 801317e:	e7c8      	b.n	8013112 <floor+0x92>
 8013180:	8800759c 	.word	0x8800759c
 8013184:	7e37e43c 	.word	0x7e37e43c
 8013188:	000fffff 	.word	0x000fffff
 801318c:	bff00000 	.word	0xbff00000

08013190 <__fpclassifyd>:
 8013190:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8013194:	b410      	push	{r4}
 8013196:	d007      	beq.n	80131a8 <__fpclassifyd+0x18>
 8013198:	4a10      	ldr	r2, [pc, #64]	; (80131dc <__fpclassifyd+0x4c>)
 801319a:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 801319e:	4294      	cmp	r4, r2
 80131a0:	d806      	bhi.n	80131b0 <__fpclassifyd+0x20>
 80131a2:	2004      	movs	r0, #4
 80131a4:	bc10      	pop	{r4}
 80131a6:	4770      	bx	lr
 80131a8:	b910      	cbnz	r0, 80131b0 <__fpclassifyd+0x20>
 80131aa:	2002      	movs	r0, #2
 80131ac:	bc10      	pop	{r4}
 80131ae:	4770      	bx	lr
 80131b0:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 80131b4:	4a09      	ldr	r2, [pc, #36]	; (80131dc <__fpclassifyd+0x4c>)
 80131b6:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 80131ba:	4291      	cmp	r1, r2
 80131bc:	d9f1      	bls.n	80131a2 <__fpclassifyd+0x12>
 80131be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131c2:	d201      	bcs.n	80131c8 <__fpclassifyd+0x38>
 80131c4:	2003      	movs	r0, #3
 80131c6:	e7ed      	b.n	80131a4 <__fpclassifyd+0x14>
 80131c8:	4a05      	ldr	r2, [pc, #20]	; (80131e0 <__fpclassifyd+0x50>)
 80131ca:	4293      	cmp	r3, r2
 80131cc:	d001      	beq.n	80131d2 <__fpclassifyd+0x42>
 80131ce:	2000      	movs	r0, #0
 80131d0:	e7e8      	b.n	80131a4 <__fpclassifyd+0x14>
 80131d2:	fab0 f080 	clz	r0, r0
 80131d6:	0940      	lsrs	r0, r0, #5
 80131d8:	e7e4      	b.n	80131a4 <__fpclassifyd+0x14>
 80131da:	bf00      	nop
 80131dc:	7fdfffff 	.word	0x7fdfffff
 80131e0:	7ff00000 	.word	0x7ff00000

080131e4 <matherr>:
 80131e4:	2000      	movs	r0, #0
 80131e6:	4770      	bx	lr

080131e8 <scalbn>:
 80131e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ea:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80131ee:	4604      	mov	r4, r0
 80131f0:	460d      	mov	r5, r1
 80131f2:	460b      	mov	r3, r1
 80131f4:	4617      	mov	r7, r2
 80131f6:	bb06      	cbnz	r6, 801323a <scalbn+0x52>
 80131f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80131fc:	4303      	orrs	r3, r0
 80131fe:	d025      	beq.n	801324c <scalbn+0x64>
 8013200:	2200      	movs	r2, #0
 8013202:	4b2f      	ldr	r3, [pc, #188]	; (80132c0 <scalbn+0xd8>)
 8013204:	f7f1 fef6 	bl	8004ff4 <__aeabi_dmul>
 8013208:	4a2e      	ldr	r2, [pc, #184]	; (80132c4 <scalbn+0xdc>)
 801320a:	4604      	mov	r4, r0
 801320c:	4297      	cmp	r7, r2
 801320e:	460d      	mov	r5, r1
 8013210:	460b      	mov	r3, r1
 8013212:	db2a      	blt.n	801326a <scalbn+0x82>
 8013214:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8013218:	3e36      	subs	r6, #54	; 0x36
 801321a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 801321e:	443e      	add	r6, r7
 8013220:	4296      	cmp	r6, r2
 8013222:	dc28      	bgt.n	8013276 <scalbn+0x8e>
 8013224:	2e00      	cmp	r6, #0
 8013226:	dd12      	ble.n	801324e <scalbn+0x66>
 8013228:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801322c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013230:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8013234:	4620      	mov	r0, r4
 8013236:	4629      	mov	r1, r5
 8013238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801323a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801323e:	4296      	cmp	r6, r2
 8013240:	d1eb      	bne.n	801321a <scalbn+0x32>
 8013242:	4602      	mov	r2, r0
 8013244:	460b      	mov	r3, r1
 8013246:	f7f1 fd23 	bl	8004c90 <__adddf3>
 801324a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801324c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801324e:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8013252:	da1d      	bge.n	8013290 <scalbn+0xa8>
 8013254:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013258:	429f      	cmp	r7, r3
 801325a:	dc0c      	bgt.n	8013276 <scalbn+0x8e>
 801325c:	a114      	add	r1, pc, #80	; (adr r1, 80132b0 <scalbn+0xc8>)
 801325e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013262:	4622      	mov	r2, r4
 8013264:	462b      	mov	r3, r5
 8013266:	f000 f831 	bl	80132cc <copysign>
 801326a:	a311      	add	r3, pc, #68	; (adr r3, 80132b0 <scalbn+0xc8>)
 801326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013270:	f7f1 fec0 	bl	8004ff4 <__aeabi_dmul>
 8013274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013276:	4622      	mov	r2, r4
 8013278:	a10f      	add	r1, pc, #60	; (adr r1, 80132b8 <scalbn+0xd0>)
 801327a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801327e:	462b      	mov	r3, r5
 8013280:	f000 f824 	bl	80132cc <copysign>
 8013284:	a30c      	add	r3, pc, #48	; (adr r3, 80132b8 <scalbn+0xd0>)
 8013286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328a:	f7f1 feb3 	bl	8004ff4 <__aeabi_dmul>
 801328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013290:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013298:	3636      	adds	r6, #54	; 0x36
 801329a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 801329e:	4620      	mov	r0, r4
 80132a0:	4629      	mov	r1, r5
 80132a2:	2200      	movs	r2, #0
 80132a4:	4b08      	ldr	r3, [pc, #32]	; (80132c8 <scalbn+0xe0>)
 80132a6:	f7f1 fea5 	bl	8004ff4 <__aeabi_dmul>
 80132aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132ac:	f3af 8000 	nop.w
 80132b0:	c2f8f359 	.word	0xc2f8f359
 80132b4:	01a56e1f 	.word	0x01a56e1f
 80132b8:	8800759c 	.word	0x8800759c
 80132bc:	7e37e43c 	.word	0x7e37e43c
 80132c0:	43500000 	.word	0x43500000
 80132c4:	ffff3cb0 	.word	0xffff3cb0
 80132c8:	3c900000 	.word	0x3c900000

080132cc <copysign>:
 80132cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132d0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80132d4:	ea42 0103 	orr.w	r1, r2, r3
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop

080132dc <abort>:
 80132dc:	b508      	push	{r3, lr}
 80132de:	2006      	movs	r0, #6
 80132e0:	f000 fa00 	bl	80136e4 <raise>
 80132e4:	2001      	movs	r0, #1
 80132e6:	f001 fab1 	bl	801484c <_exit>
	...

080132ec <__errno>:
 80132ec:	4b01      	ldr	r3, [pc, #4]	; (80132f4 <__errno+0x8>)
 80132ee:	6818      	ldr	r0, [r3, #0]
 80132f0:	4770      	bx	lr
 80132f2:	bf00      	nop
 80132f4:	20000098 	.word	0x20000098

080132f8 <exit>:
 80132f8:	b508      	push	{r3, lr}
 80132fa:	4b07      	ldr	r3, [pc, #28]	; (8013318 <exit+0x20>)
 80132fc:	4604      	mov	r4, r0
 80132fe:	b113      	cbz	r3, 8013306 <exit+0xe>
 8013300:	2100      	movs	r1, #0
 8013302:	f3af 8000 	nop.w
 8013306:	4b05      	ldr	r3, [pc, #20]	; (801331c <exit+0x24>)
 8013308:	6818      	ldr	r0, [r3, #0]
 801330a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801330c:	b103      	cbz	r3, 8013310 <exit+0x18>
 801330e:	4798      	blx	r3
 8013310:	4620      	mov	r0, r4
 8013312:	f001 fa9b 	bl	801484c <_exit>
 8013316:	bf00      	nop
 8013318:	00000000 	.word	0x00000000
 801331c:	0801693c 	.word	0x0801693c

08013320 <_fputs_r>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	460d      	mov	r5, r1
 8013324:	4614      	mov	r4, r2
 8013326:	4606      	mov	r6, r0
 8013328:	b118      	cbz	r0, 8013332 <_fputs_r+0x12>
 801332a:	6983      	ldr	r3, [r0, #24]
 801332c:	b90b      	cbnz	r3, 8013332 <_fputs_r+0x12>
 801332e:	f000 fc6f 	bl	8013c10 <__sinit>
 8013332:	4b22      	ldr	r3, [pc, #136]	; (80133bc <_fputs_r+0x9c>)
 8013334:	429c      	cmp	r4, r3
 8013336:	d101      	bne.n	801333c <_fputs_r+0x1c>
 8013338:	6874      	ldr	r4, [r6, #4]
 801333a:	e008      	b.n	801334e <_fputs_r+0x2e>
 801333c:	4b20      	ldr	r3, [pc, #128]	; (80133c0 <_fputs_r+0xa0>)
 801333e:	429c      	cmp	r4, r3
 8013340:	d101      	bne.n	8013346 <_fputs_r+0x26>
 8013342:	68b4      	ldr	r4, [r6, #8]
 8013344:	e003      	b.n	801334e <_fputs_r+0x2e>
 8013346:	4b1f      	ldr	r3, [pc, #124]	; (80133c4 <_fputs_r+0xa4>)
 8013348:	429c      	cmp	r4, r3
 801334a:	bf08      	it	eq
 801334c:	68f4      	ldreq	r4, [r6, #12]
 801334e:	89a3      	ldrh	r3, [r4, #12]
 8013350:	071a      	lsls	r2, r3, #28
 8013352:	d501      	bpl.n	8013358 <_fputs_r+0x38>
 8013354:	6923      	ldr	r3, [r4, #16]
 8013356:	b99b      	cbnz	r3, 8013380 <_fputs_r+0x60>
 8013358:	4621      	mov	r1, r4
 801335a:	4630      	mov	r0, r6
 801335c:	f000 fae0 	bl	8013920 <__swsetup_r>
 8013360:	b170      	cbz	r0, 8013380 <_fputs_r+0x60>
 8013362:	f04f 30ff 	mov.w	r0, #4294967295
 8013366:	bd70      	pop	{r4, r5, r6, pc}
 8013368:	68a3      	ldr	r3, [r4, #8]
 801336a:	3b01      	subs	r3, #1
 801336c:	2b00      	cmp	r3, #0
 801336e:	60a3      	str	r3, [r4, #8]
 8013370:	db0b      	blt.n	801338a <_fputs_r+0x6a>
 8013372:	6823      	ldr	r3, [r4, #0]
 8013374:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013378:	701a      	strb	r2, [r3, #0]
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	3301      	adds	r3, #1
 801337e:	6023      	str	r3, [r4, #0]
 8013380:	f815 0b01 	ldrb.w	r0, [r5], #1
 8013384:	2800      	cmp	r0, #0
 8013386:	d1ef      	bne.n	8013368 <_fputs_r+0x48>
 8013388:	e016      	b.n	80133b8 <_fputs_r+0x98>
 801338a:	69a2      	ldr	r2, [r4, #24]
 801338c:	4293      	cmp	r3, r2
 801338e:	db09      	blt.n	80133a4 <_fputs_r+0x84>
 8013390:	6823      	ldr	r3, [r4, #0]
 8013392:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013396:	701a      	strb	r2, [r3, #0]
 8013398:	6823      	ldr	r3, [r4, #0]
 801339a:	7819      	ldrb	r1, [r3, #0]
 801339c:	290a      	cmp	r1, #10
 801339e:	d1ed      	bne.n	801337c <_fputs_r+0x5c>
 80133a0:	4622      	mov	r2, r4
 80133a2:	e002      	b.n	80133aa <_fputs_r+0x8a>
 80133a4:	4622      	mov	r2, r4
 80133a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80133aa:	4630      	mov	r0, r6
 80133ac:	f000 fa4a 	bl	8013844 <__swbuf_r>
 80133b0:	1c43      	adds	r3, r0, #1
 80133b2:	4258      	negs	r0, r3
 80133b4:	4158      	adcs	r0, r3
 80133b6:	e7d3      	b.n	8013360 <_fputs_r+0x40>
 80133b8:	bd70      	pop	{r4, r5, r6, pc}
 80133ba:	bf00      	nop
 80133bc:	08016940 	.word	0x08016940
 80133c0:	08016960 	.word	0x08016960
 80133c4:	08016980 	.word	0x08016980

080133c8 <fputs>:
 80133c8:	4b02      	ldr	r3, [pc, #8]	; (80133d4 <fputs+0xc>)
 80133ca:	460a      	mov	r2, r1
 80133cc:	4601      	mov	r1, r0
 80133ce:	6818      	ldr	r0, [r3, #0]
 80133d0:	f7ff bfa6 	b.w	8013320 <_fputs_r>
 80133d4:	20000098 	.word	0x20000098

080133d8 <__libc_init_array>:
 80133d8:	4b0e      	ldr	r3, [pc, #56]	; (8013414 <__libc_init_array+0x3c>)
 80133da:	b570      	push	{r4, r5, r6, lr}
 80133dc:	461e      	mov	r6, r3
 80133de:	4c0e      	ldr	r4, [pc, #56]	; (8013418 <__libc_init_array+0x40>)
 80133e0:	2500      	movs	r5, #0
 80133e2:	1ae4      	subs	r4, r4, r3
 80133e4:	10a4      	asrs	r4, r4, #2
 80133e6:	42a5      	cmp	r5, r4
 80133e8:	d004      	beq.n	80133f4 <__libc_init_array+0x1c>
 80133ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80133ee:	4798      	blx	r3
 80133f0:	3501      	adds	r5, #1
 80133f2:	e7f8      	b.n	80133e6 <__libc_init_array+0xe>
 80133f4:	f001 fa2e 	bl	8014854 <_init>
 80133f8:	4b08      	ldr	r3, [pc, #32]	; (801341c <__libc_init_array+0x44>)
 80133fa:	4c09      	ldr	r4, [pc, #36]	; (8013420 <__libc_init_array+0x48>)
 80133fc:	461e      	mov	r6, r3
 80133fe:	1ae4      	subs	r4, r4, r3
 8013400:	10a4      	asrs	r4, r4, #2
 8013402:	2500      	movs	r5, #0
 8013404:	42a5      	cmp	r5, r4
 8013406:	d004      	beq.n	8013412 <__libc_init_array+0x3a>
 8013408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801340c:	4798      	blx	r3
 801340e:	3501      	adds	r5, #1
 8013410:	e7f8      	b.n	8013404 <__libc_init_array+0x2c>
 8013412:	bd70      	pop	{r4, r5, r6, pc}
 8013414:	08016bcc 	.word	0x08016bcc
 8013418:	08016bcc 	.word	0x08016bcc
 801341c:	08016bcc 	.word	0x08016bcc
 8013420:	08016bd4 	.word	0x08016bd4

08013424 <malloc>:
 8013424:	4b02      	ldr	r3, [pc, #8]	; (8013430 <malloc+0xc>)
 8013426:	4601      	mov	r1, r0
 8013428:	6818      	ldr	r0, [r3, #0]
 801342a:	f000 b871 	b.w	8013510 <_malloc_r>
 801342e:	bf00      	nop
 8013430:	20000098 	.word	0x20000098

08013434 <free>:
 8013434:	4b02      	ldr	r3, [pc, #8]	; (8013440 <free+0xc>)
 8013436:	4601      	mov	r1, r0
 8013438:	6818      	ldr	r0, [r3, #0]
 801343a:	f000 b825 	b.w	8013488 <_free_r>
 801343e:	bf00      	nop
 8013440:	20000098 	.word	0x20000098

08013444 <memcmp>:
 8013444:	b510      	push	{r4, lr}
 8013446:	3901      	subs	r1, #1
 8013448:	4402      	add	r2, r0
 801344a:	4290      	cmp	r0, r2
 801344c:	d007      	beq.n	801345e <memcmp+0x1a>
 801344e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013452:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013456:	42a3      	cmp	r3, r4
 8013458:	d0f7      	beq.n	801344a <memcmp+0x6>
 801345a:	1b18      	subs	r0, r3, r4
 801345c:	bd10      	pop	{r4, pc}
 801345e:	2000      	movs	r0, #0
 8013460:	bd10      	pop	{r4, pc}

08013462 <memcpy>:
 8013462:	b510      	push	{r4, lr}
 8013464:	1e43      	subs	r3, r0, #1
 8013466:	440a      	add	r2, r1
 8013468:	4291      	cmp	r1, r2
 801346a:	d004      	beq.n	8013476 <memcpy+0x14>
 801346c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013474:	e7f8      	b.n	8013468 <memcpy+0x6>
 8013476:	bd10      	pop	{r4, pc}

08013478 <memset>:
 8013478:	4603      	mov	r3, r0
 801347a:	4402      	add	r2, r0
 801347c:	4293      	cmp	r3, r2
 801347e:	d002      	beq.n	8013486 <memset+0xe>
 8013480:	f803 1b01 	strb.w	r1, [r3], #1
 8013484:	e7fa      	b.n	801347c <memset+0x4>
 8013486:	4770      	bx	lr

08013488 <_free_r>:
 8013488:	b530      	push	{r4, r5, lr}
 801348a:	2900      	cmp	r1, #0
 801348c:	d03c      	beq.n	8013508 <_free_r+0x80>
 801348e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8013492:	1f0b      	subs	r3, r1, #4
 8013494:	491d      	ldr	r1, [pc, #116]	; (801350c <_free_r+0x84>)
 8013496:	2a00      	cmp	r2, #0
 8013498:	bfb8      	it	lt
 801349a:	189b      	addlt	r3, r3, r2
 801349c:	680a      	ldr	r2, [r1, #0]
 801349e:	460c      	mov	r4, r1
 80134a0:	b912      	cbnz	r2, 80134a8 <_free_r+0x20>
 80134a2:	605a      	str	r2, [r3, #4]
 80134a4:	600b      	str	r3, [r1, #0]
 80134a6:	bd30      	pop	{r4, r5, pc}
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d90d      	bls.n	80134c8 <_free_r+0x40>
 80134ac:	6819      	ldr	r1, [r3, #0]
 80134ae:	1858      	adds	r0, r3, r1
 80134b0:	4282      	cmp	r2, r0
 80134b2:	bf01      	itttt	eq
 80134b4:	6810      	ldreq	r0, [r2, #0]
 80134b6:	6852      	ldreq	r2, [r2, #4]
 80134b8:	1809      	addeq	r1, r1, r0
 80134ba:	6019      	streq	r1, [r3, #0]
 80134bc:	605a      	str	r2, [r3, #4]
 80134be:	6023      	str	r3, [r4, #0]
 80134c0:	bd30      	pop	{r4, r5, pc}
 80134c2:	4299      	cmp	r1, r3
 80134c4:	d803      	bhi.n	80134ce <_free_r+0x46>
 80134c6:	460a      	mov	r2, r1
 80134c8:	6851      	ldr	r1, [r2, #4]
 80134ca:	2900      	cmp	r1, #0
 80134cc:	d1f9      	bne.n	80134c2 <_free_r+0x3a>
 80134ce:	6814      	ldr	r4, [r2, #0]
 80134d0:	1915      	adds	r5, r2, r4
 80134d2:	429d      	cmp	r5, r3
 80134d4:	d10a      	bne.n	80134ec <_free_r+0x64>
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	4423      	add	r3, r4
 80134da:	18d0      	adds	r0, r2, r3
 80134dc:	4281      	cmp	r1, r0
 80134de:	6013      	str	r3, [r2, #0]
 80134e0:	d112      	bne.n	8013508 <_free_r+0x80>
 80134e2:	6808      	ldr	r0, [r1, #0]
 80134e4:	4403      	add	r3, r0
 80134e6:	6013      	str	r3, [r2, #0]
 80134e8:	684b      	ldr	r3, [r1, #4]
 80134ea:	e00c      	b.n	8013506 <_free_r+0x7e>
 80134ec:	d902      	bls.n	80134f4 <_free_r+0x6c>
 80134ee:	230c      	movs	r3, #12
 80134f0:	6003      	str	r3, [r0, #0]
 80134f2:	bd30      	pop	{r4, r5, pc}
 80134f4:	6818      	ldr	r0, [r3, #0]
 80134f6:	181c      	adds	r4, r3, r0
 80134f8:	42a1      	cmp	r1, r4
 80134fa:	bf01      	itttt	eq
 80134fc:	680c      	ldreq	r4, [r1, #0]
 80134fe:	6849      	ldreq	r1, [r1, #4]
 8013500:	1900      	addeq	r0, r0, r4
 8013502:	6018      	streq	r0, [r3, #0]
 8013504:	6059      	str	r1, [r3, #4]
 8013506:	6053      	str	r3, [r2, #4]
 8013508:	bd30      	pop	{r4, r5, pc}
 801350a:	bf00      	nop
 801350c:	20000d00 	.word	0x20000d00

08013510 <_malloc_r>:
 8013510:	b570      	push	{r4, r5, r6, lr}
 8013512:	1ccd      	adds	r5, r1, #3
 8013514:	f025 0503 	bic.w	r5, r5, #3
 8013518:	3508      	adds	r5, #8
 801351a:	2d0c      	cmp	r5, #12
 801351c:	bf38      	it	cc
 801351e:	250c      	movcc	r5, #12
 8013520:	2d00      	cmp	r5, #0
 8013522:	4606      	mov	r6, r0
 8013524:	da03      	bge.n	801352e <_malloc_r+0x1e>
 8013526:	230c      	movs	r3, #12
 8013528:	6033      	str	r3, [r6, #0]
 801352a:	2000      	movs	r0, #0
 801352c:	bd70      	pop	{r4, r5, r6, pc}
 801352e:	42a9      	cmp	r1, r5
 8013530:	d8f9      	bhi.n	8013526 <_malloc_r+0x16>
 8013532:	4b1f      	ldr	r3, [pc, #124]	; (80135b0 <_malloc_r+0xa0>)
 8013534:	681c      	ldr	r4, [r3, #0]
 8013536:	461a      	mov	r2, r3
 8013538:	4621      	mov	r1, r4
 801353a:	b1a1      	cbz	r1, 8013566 <_malloc_r+0x56>
 801353c:	680b      	ldr	r3, [r1, #0]
 801353e:	1b5b      	subs	r3, r3, r5
 8013540:	d40e      	bmi.n	8013560 <_malloc_r+0x50>
 8013542:	2b0b      	cmp	r3, #11
 8013544:	d903      	bls.n	801354e <_malloc_r+0x3e>
 8013546:	600b      	str	r3, [r1, #0]
 8013548:	18cc      	adds	r4, r1, r3
 801354a:	50cd      	str	r5, [r1, r3]
 801354c:	e01e      	b.n	801358c <_malloc_r+0x7c>
 801354e:	428c      	cmp	r4, r1
 8013550:	bf0b      	itete	eq
 8013552:	6863      	ldreq	r3, [r4, #4]
 8013554:	684b      	ldrne	r3, [r1, #4]
 8013556:	6013      	streq	r3, [r2, #0]
 8013558:	6063      	strne	r3, [r4, #4]
 801355a:	bf18      	it	ne
 801355c:	460c      	movne	r4, r1
 801355e:	e015      	b.n	801358c <_malloc_r+0x7c>
 8013560:	460c      	mov	r4, r1
 8013562:	6849      	ldr	r1, [r1, #4]
 8013564:	e7e9      	b.n	801353a <_malloc_r+0x2a>
 8013566:	4c13      	ldr	r4, [pc, #76]	; (80135b4 <_malloc_r+0xa4>)
 8013568:	6823      	ldr	r3, [r4, #0]
 801356a:	b91b      	cbnz	r3, 8013574 <_malloc_r+0x64>
 801356c:	4630      	mov	r0, r6
 801356e:	f000 f82b 	bl	80135c8 <_sbrk_r>
 8013572:	6020      	str	r0, [r4, #0]
 8013574:	4629      	mov	r1, r5
 8013576:	4630      	mov	r0, r6
 8013578:	f000 f826 	bl	80135c8 <_sbrk_r>
 801357c:	1c43      	adds	r3, r0, #1
 801357e:	d0d2      	beq.n	8013526 <_malloc_r+0x16>
 8013580:	1cc4      	adds	r4, r0, #3
 8013582:	f024 0403 	bic.w	r4, r4, #3
 8013586:	42a0      	cmp	r0, r4
 8013588:	d10a      	bne.n	80135a0 <_malloc_r+0x90>
 801358a:	6025      	str	r5, [r4, #0]
 801358c:	f104 000b 	add.w	r0, r4, #11
 8013590:	1d23      	adds	r3, r4, #4
 8013592:	f020 0007 	bic.w	r0, r0, #7
 8013596:	1ac3      	subs	r3, r0, r3
 8013598:	d009      	beq.n	80135ae <_malloc_r+0x9e>
 801359a:	425a      	negs	r2, r3
 801359c:	50e2      	str	r2, [r4, r3]
 801359e:	bd70      	pop	{r4, r5, r6, pc}
 80135a0:	1a21      	subs	r1, r4, r0
 80135a2:	4630      	mov	r0, r6
 80135a4:	f000 f810 	bl	80135c8 <_sbrk_r>
 80135a8:	3001      	adds	r0, #1
 80135aa:	d1ee      	bne.n	801358a <_malloc_r+0x7a>
 80135ac:	e7bb      	b.n	8013526 <_malloc_r+0x16>
 80135ae:	bd70      	pop	{r4, r5, r6, pc}
 80135b0:	20000d00 	.word	0x20000d00
 80135b4:	20000cfc 	.word	0x20000cfc

080135b8 <realloc>:
 80135b8:	4b02      	ldr	r3, [pc, #8]	; (80135c4 <realloc+0xc>)
 80135ba:	460a      	mov	r2, r1
 80135bc:	4601      	mov	r1, r0
 80135be:	6818      	ldr	r0, [r3, #0]
 80135c0:	f000 bc30 	b.w	8013e24 <_realloc_r>
 80135c4:	20000098 	.word	0x20000098

080135c8 <_sbrk_r>:
 80135c8:	b538      	push	{r3, r4, r5, lr}
 80135ca:	4c06      	ldr	r4, [pc, #24]	; (80135e4 <_sbrk_r+0x1c>)
 80135cc:	2300      	movs	r3, #0
 80135ce:	4605      	mov	r5, r0
 80135d0:	4608      	mov	r0, r1
 80135d2:	6023      	str	r3, [r4, #0]
 80135d4:	f001 f924 	bl	8014820 <_sbrk>
 80135d8:	1c43      	adds	r3, r0, #1
 80135da:	d102      	bne.n	80135e2 <_sbrk_r+0x1a>
 80135dc:	6823      	ldr	r3, [r4, #0]
 80135de:	b103      	cbz	r3, 80135e2 <_sbrk_r+0x1a>
 80135e0:	602b      	str	r3, [r5, #0]
 80135e2:	bd38      	pop	{r3, r4, r5, pc}
 80135e4:	20000d24 	.word	0x20000d24

080135e8 <_init_signal_r>:
 80135e8:	b538      	push	{r3, r4, r5, lr}
 80135ea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80135ec:	4605      	mov	r5, r0
 80135ee:	b10c      	cbz	r4, 80135f4 <_init_signal_r+0xc>
 80135f0:	2000      	movs	r0, #0
 80135f2:	bd38      	pop	{r3, r4, r5, pc}
 80135f4:	2180      	movs	r1, #128	; 0x80
 80135f6:	f7ff ff8b 	bl	8013510 <_malloc_r>
 80135fa:	6468      	str	r0, [r5, #68]	; 0x44
 80135fc:	b138      	cbz	r0, 801360e <_init_signal_r+0x26>
 80135fe:	4623      	mov	r3, r4
 8013600:	4621      	mov	r1, r4
 8013602:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8013604:	50d1      	str	r1, [r2, r3]
 8013606:	3304      	adds	r3, #4
 8013608:	2b80      	cmp	r3, #128	; 0x80
 801360a:	d1fa      	bne.n	8013602 <_init_signal_r+0x1a>
 801360c:	e7f0      	b.n	80135f0 <_init_signal_r+0x8>
 801360e:	f04f 30ff 	mov.w	r0, #4294967295
 8013612:	bd38      	pop	{r3, r4, r5, pc}

08013614 <_signal_r>:
 8013614:	291f      	cmp	r1, #31
 8013616:	b570      	push	{r4, r5, r6, lr}
 8013618:	4604      	mov	r4, r0
 801361a:	460d      	mov	r5, r1
 801361c:	4616      	mov	r6, r2
 801361e:	d902      	bls.n	8013626 <_signal_r+0x12>
 8013620:	2316      	movs	r3, #22
 8013622:	6003      	str	r3, [r0, #0]
 8013624:	e00b      	b.n	801363e <_signal_r+0x2a>
 8013626:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8013628:	b12b      	cbz	r3, 8013636 <_signal_r+0x22>
 801362a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801362c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013630:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8013634:	bd70      	pop	{r4, r5, r6, pc}
 8013636:	f7ff ffd7 	bl	80135e8 <_init_signal_r>
 801363a:	2800      	cmp	r0, #0
 801363c:	d0f5      	beq.n	801362a <_signal_r+0x16>
 801363e:	f04f 30ff 	mov.w	r0, #4294967295
 8013642:	bd70      	pop	{r4, r5, r6, pc}

08013644 <_raise_r>:
 8013644:	291f      	cmp	r1, #31
 8013646:	b538      	push	{r3, r4, r5, lr}
 8013648:	4604      	mov	r4, r0
 801364a:	460d      	mov	r5, r1
 801364c:	d904      	bls.n	8013658 <_raise_r+0x14>
 801364e:	2316      	movs	r3, #22
 8013650:	6003      	str	r3, [r0, #0]
 8013652:	f04f 30ff 	mov.w	r0, #4294967295
 8013656:	bd38      	pop	{r3, r4, r5, pc}
 8013658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801365a:	b112      	cbz	r2, 8013662 <_raise_r+0x1e>
 801365c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013660:	b94b      	cbnz	r3, 8013676 <_raise_r+0x32>
 8013662:	4620      	mov	r0, r4
 8013664:	f000 f86e 	bl	8013744 <_getpid_r>
 8013668:	462a      	mov	r2, r5
 801366a:	4601      	mov	r1, r0
 801366c:	4620      	mov	r0, r4
 801366e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013672:	f000 b855 	b.w	8013720 <_kill_r>
 8013676:	2b01      	cmp	r3, #1
 8013678:	d00c      	beq.n	8013694 <_raise_r+0x50>
 801367a:	1c59      	adds	r1, r3, #1
 801367c:	d103      	bne.n	8013686 <_raise_r+0x42>
 801367e:	2316      	movs	r3, #22
 8013680:	6003      	str	r3, [r0, #0]
 8013682:	2001      	movs	r0, #1
 8013684:	bd38      	pop	{r3, r4, r5, pc}
 8013686:	2400      	movs	r4, #0
 8013688:	4628      	mov	r0, r5
 801368a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801368e:	4798      	blx	r3
 8013690:	4620      	mov	r0, r4
 8013692:	bd38      	pop	{r3, r4, r5, pc}
 8013694:	2000      	movs	r0, #0
 8013696:	bd38      	pop	{r3, r4, r5, pc}

08013698 <__sigtramp_r>:
 8013698:	291f      	cmp	r1, #31
 801369a:	b538      	push	{r3, r4, r5, lr}
 801369c:	4604      	mov	r4, r0
 801369e:	460d      	mov	r5, r1
 80136a0:	d902      	bls.n	80136a8 <__sigtramp_r+0x10>
 80136a2:	f04f 30ff 	mov.w	r0, #4294967295
 80136a6:	bd38      	pop	{r3, r4, r5, pc}
 80136a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80136aa:	b123      	cbz	r3, 80136b6 <__sigtramp_r+0x1e>
 80136ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80136ae:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 80136b2:	b92b      	cbnz	r3, 80136c0 <__sigtramp_r+0x28>
 80136b4:	e00f      	b.n	80136d6 <__sigtramp_r+0x3e>
 80136b6:	f7ff ff97 	bl	80135e8 <_init_signal_r>
 80136ba:	2800      	cmp	r0, #0
 80136bc:	d0f6      	beq.n	80136ac <__sigtramp_r+0x14>
 80136be:	e7f0      	b.n	80136a2 <__sigtramp_r+0xa>
 80136c0:	1c59      	adds	r1, r3, #1
 80136c2:	d00a      	beq.n	80136da <__sigtramp_r+0x42>
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	d00a      	beq.n	80136de <__sigtramp_r+0x46>
 80136c8:	2400      	movs	r4, #0
 80136ca:	4628      	mov	r0, r5
 80136cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80136d0:	4798      	blx	r3
 80136d2:	4620      	mov	r0, r4
 80136d4:	bd38      	pop	{r3, r4, r5, pc}
 80136d6:	2001      	movs	r0, #1
 80136d8:	bd38      	pop	{r3, r4, r5, pc}
 80136da:	2002      	movs	r0, #2
 80136dc:	bd38      	pop	{r3, r4, r5, pc}
 80136de:	2003      	movs	r0, #3
 80136e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080136e4 <raise>:
 80136e4:	4b02      	ldr	r3, [pc, #8]	; (80136f0 <raise+0xc>)
 80136e6:	4601      	mov	r1, r0
 80136e8:	6818      	ldr	r0, [r3, #0]
 80136ea:	f7ff bfab 	b.w	8013644 <_raise_r>
 80136ee:	bf00      	nop
 80136f0:	20000098 	.word	0x20000098

080136f4 <signal>:
 80136f4:	4b02      	ldr	r3, [pc, #8]	; (8013700 <signal+0xc>)
 80136f6:	460a      	mov	r2, r1
 80136f8:	4601      	mov	r1, r0
 80136fa:	6818      	ldr	r0, [r3, #0]
 80136fc:	f7ff bf8a 	b.w	8013614 <_signal_r>
 8013700:	20000098 	.word	0x20000098

08013704 <_init_signal>:
 8013704:	4b01      	ldr	r3, [pc, #4]	; (801370c <_init_signal+0x8>)
 8013706:	6818      	ldr	r0, [r3, #0]
 8013708:	f7ff bf6e 	b.w	80135e8 <_init_signal_r>
 801370c:	20000098 	.word	0x20000098

08013710 <__sigtramp>:
 8013710:	4b02      	ldr	r3, [pc, #8]	; (801371c <__sigtramp+0xc>)
 8013712:	4601      	mov	r1, r0
 8013714:	6818      	ldr	r0, [r3, #0]
 8013716:	f7ff bfbf 	b.w	8013698 <__sigtramp_r>
 801371a:	bf00      	nop
 801371c:	20000098 	.word	0x20000098

08013720 <_kill_r>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	4c07      	ldr	r4, [pc, #28]	; (8013740 <_kill_r+0x20>)
 8013724:	2300      	movs	r3, #0
 8013726:	4605      	mov	r5, r0
 8013728:	4608      	mov	r0, r1
 801372a:	4611      	mov	r1, r2
 801372c:	6023      	str	r3, [r4, #0]
 801372e:	f001 f85f 	bl	80147f0 <_kill>
 8013732:	1c43      	adds	r3, r0, #1
 8013734:	d102      	bne.n	801373c <_kill_r+0x1c>
 8013736:	6823      	ldr	r3, [r4, #0]
 8013738:	b103      	cbz	r3, 801373c <_kill_r+0x1c>
 801373a:	602b      	str	r3, [r5, #0]
 801373c:	bd38      	pop	{r3, r4, r5, pc}
 801373e:	bf00      	nop
 8013740:	20000d24 	.word	0x20000d24

08013744 <_getpid_r>:
 8013744:	f001 b844 	b.w	80147d0 <_getpid>

08013748 <_siprintf_r>:
 8013748:	b40c      	push	{r2, r3}
 801374a:	b510      	push	{r4, lr}
 801374c:	b09c      	sub	sp, #112	; 0x70
 801374e:	9102      	str	r1, [sp, #8]
 8013750:	9106      	str	r1, [sp, #24]
 8013752:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013756:	9104      	str	r1, [sp, #16]
 8013758:	9107      	str	r1, [sp, #28]
 801375a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801375e:	ab1e      	add	r3, sp, #120	; 0x78
 8013760:	f853 2b04 	ldr.w	r2, [r3], #4
 8013764:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013768:	f44f 7402 	mov.w	r4, #520	; 0x208
 801376c:	a902      	add	r1, sp, #8
 801376e:	9301      	str	r3, [sp, #4]
 8013770:	f8ad 4014 	strh.w	r4, [sp, #20]
 8013774:	f000 fc54 	bl	8014020 <_svfiprintf_r>
 8013778:	9b02      	ldr	r3, [sp, #8]
 801377a:	2200      	movs	r2, #0
 801377c:	701a      	strb	r2, [r3, #0]
 801377e:	b01c      	add	sp, #112	; 0x70
 8013780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013784:	b002      	add	sp, #8
 8013786:	4770      	bx	lr

08013788 <siprintf>:
 8013788:	b40e      	push	{r1, r2, r3}
 801378a:	b500      	push	{lr}
 801378c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8013790:	b09c      	sub	sp, #112	; 0x70
 8013792:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013796:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801379a:	9104      	str	r1, [sp, #16]
 801379c:	9107      	str	r1, [sp, #28]
 801379e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80137a2:	ab1d      	add	r3, sp, #116	; 0x74
 80137a4:	9002      	str	r0, [sp, #8]
 80137a6:	9006      	str	r0, [sp, #24]
 80137a8:	4808      	ldr	r0, [pc, #32]	; (80137cc <siprintf+0x44>)
 80137aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ae:	f8ad 1016 	strh.w	r1, [sp, #22]
 80137b2:	6800      	ldr	r0, [r0, #0]
 80137b4:	a902      	add	r1, sp, #8
 80137b6:	9301      	str	r3, [sp, #4]
 80137b8:	f000 fc32 	bl	8014020 <_svfiprintf_r>
 80137bc:	9b02      	ldr	r3, [sp, #8]
 80137be:	2200      	movs	r2, #0
 80137c0:	701a      	strb	r2, [r3, #0]
 80137c2:	b01c      	add	sp, #112	; 0x70
 80137c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80137c8:	b003      	add	sp, #12
 80137ca:	4770      	bx	lr
 80137cc:	20000098 	.word	0x20000098

080137d0 <strncmp>:
 80137d0:	b530      	push	{r4, r5, lr}
 80137d2:	b182      	cbz	r2, 80137f6 <strncmp+0x26>
 80137d4:	1e45      	subs	r5, r0, #1
 80137d6:	3901      	subs	r1, #1
 80137d8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80137dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80137e0:	42a3      	cmp	r3, r4
 80137e2:	d106      	bne.n	80137f2 <strncmp+0x22>
 80137e4:	43ec      	mvns	r4, r5
 80137e6:	4414      	add	r4, r2
 80137e8:	42e0      	cmn	r0, r4
 80137ea:	d001      	beq.n	80137f0 <strncmp+0x20>
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d1f3      	bne.n	80137d8 <strncmp+0x8>
 80137f0:	461c      	mov	r4, r3
 80137f2:	1b18      	subs	r0, r3, r4
 80137f4:	bd30      	pop	{r4, r5, pc}
 80137f6:	4610      	mov	r0, r2
 80137f8:	bd30      	pop	{r4, r5, pc}

080137fa <strstr>:
 80137fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137fc:	7803      	ldrb	r3, [r0, #0]
 80137fe:	b963      	cbnz	r3, 801381a <strstr+0x20>
 8013800:	780b      	ldrb	r3, [r1, #0]
 8013802:	2b00      	cmp	r3, #0
 8013804:	bf18      	it	ne
 8013806:	2000      	movne	r0, #0
 8013808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801380a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801380e:	b162      	cbz	r2, 801382a <strstr+0x30>
 8013810:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8013814:	4630      	mov	r0, r6
 8013816:	4297      	cmp	r7, r2
 8013818:	d0f7      	beq.n	801380a <strstr+0x10>
 801381a:	4603      	mov	r3, r0
 801381c:	1c46      	adds	r6, r0, #1
 801381e:	7800      	ldrb	r0, [r0, #0]
 8013820:	b110      	cbz	r0, 8013828 <strstr+0x2e>
 8013822:	1e4d      	subs	r5, r1, #1
 8013824:	1e5c      	subs	r4, r3, #1
 8013826:	e7f0      	b.n	801380a <strstr+0x10>
 8013828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801382a:	4618      	mov	r0, r3
 801382c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013830 <write>:
 8013830:	4613      	mov	r3, r2
 8013832:	460a      	mov	r2, r1
 8013834:	4601      	mov	r1, r0
 8013836:	4802      	ldr	r0, [pc, #8]	; (8013840 <write+0x10>)
 8013838:	6800      	ldr	r0, [r0, #0]
 801383a:	f000 b85f 	b.w	80138fc <_write_r>
 801383e:	bf00      	nop
 8013840:	20000098 	.word	0x20000098

08013844 <__swbuf_r>:
 8013844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013846:	460f      	mov	r7, r1
 8013848:	4614      	mov	r4, r2
 801384a:	4606      	mov	r6, r0
 801384c:	b118      	cbz	r0, 8013856 <__swbuf_r+0x12>
 801384e:	6983      	ldr	r3, [r0, #24]
 8013850:	b90b      	cbnz	r3, 8013856 <__swbuf_r+0x12>
 8013852:	f000 f9dd 	bl	8013c10 <__sinit>
 8013856:	4b22      	ldr	r3, [pc, #136]	; (80138e0 <__swbuf_r+0x9c>)
 8013858:	429c      	cmp	r4, r3
 801385a:	d101      	bne.n	8013860 <__swbuf_r+0x1c>
 801385c:	6874      	ldr	r4, [r6, #4]
 801385e:	e008      	b.n	8013872 <__swbuf_r+0x2e>
 8013860:	4b20      	ldr	r3, [pc, #128]	; (80138e4 <__swbuf_r+0xa0>)
 8013862:	429c      	cmp	r4, r3
 8013864:	d101      	bne.n	801386a <__swbuf_r+0x26>
 8013866:	68b4      	ldr	r4, [r6, #8]
 8013868:	e003      	b.n	8013872 <__swbuf_r+0x2e>
 801386a:	4b1f      	ldr	r3, [pc, #124]	; (80138e8 <__swbuf_r+0xa4>)
 801386c:	429c      	cmp	r4, r3
 801386e:	bf08      	it	eq
 8013870:	68f4      	ldreq	r4, [r6, #12]
 8013872:	69a3      	ldr	r3, [r4, #24]
 8013874:	60a3      	str	r3, [r4, #8]
 8013876:	89a3      	ldrh	r3, [r4, #12]
 8013878:	071a      	lsls	r2, r3, #28
 801387a:	d509      	bpl.n	8013890 <__swbuf_r+0x4c>
 801387c:	6923      	ldr	r3, [r4, #16]
 801387e:	b13b      	cbz	r3, 8013890 <__swbuf_r+0x4c>
 8013880:	6823      	ldr	r3, [r4, #0]
 8013882:	6920      	ldr	r0, [r4, #16]
 8013884:	b2fd      	uxtb	r5, r7
 8013886:	1a18      	subs	r0, r3, r0
 8013888:	6963      	ldr	r3, [r4, #20]
 801388a:	4298      	cmp	r0, r3
 801388c:	db0f      	blt.n	80138ae <__swbuf_r+0x6a>
 801388e:	e008      	b.n	80138a2 <__swbuf_r+0x5e>
 8013890:	4621      	mov	r1, r4
 8013892:	4630      	mov	r0, r6
 8013894:	f000 f844 	bl	8013920 <__swsetup_r>
 8013898:	2800      	cmp	r0, #0
 801389a:	d0f1      	beq.n	8013880 <__swbuf_r+0x3c>
 801389c:	f04f 30ff 	mov.w	r0, #4294967295
 80138a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138a2:	4621      	mov	r1, r4
 80138a4:	4630      	mov	r0, r6
 80138a6:	f000 f92d 	bl	8013b04 <_fflush_r>
 80138aa:	2800      	cmp	r0, #0
 80138ac:	d1f6      	bne.n	801389c <__swbuf_r+0x58>
 80138ae:	68a3      	ldr	r3, [r4, #8]
 80138b0:	3b01      	subs	r3, #1
 80138b2:	60a3      	str	r3, [r4, #8]
 80138b4:	6823      	ldr	r3, [r4, #0]
 80138b6:	1c5a      	adds	r2, r3, #1
 80138b8:	6022      	str	r2, [r4, #0]
 80138ba:	701f      	strb	r7, [r3, #0]
 80138bc:	6962      	ldr	r2, [r4, #20]
 80138be:	1c43      	adds	r3, r0, #1
 80138c0:	4293      	cmp	r3, r2
 80138c2:	d004      	beq.n	80138ce <__swbuf_r+0x8a>
 80138c4:	89a3      	ldrh	r3, [r4, #12]
 80138c6:	07db      	lsls	r3, r3, #31
 80138c8:	d507      	bpl.n	80138da <__swbuf_r+0x96>
 80138ca:	2d0a      	cmp	r5, #10
 80138cc:	d105      	bne.n	80138da <__swbuf_r+0x96>
 80138ce:	4621      	mov	r1, r4
 80138d0:	4630      	mov	r0, r6
 80138d2:	f000 f917 	bl	8013b04 <_fflush_r>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	d1e0      	bne.n	801389c <__swbuf_r+0x58>
 80138da:	4628      	mov	r0, r5
 80138dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138de:	bf00      	nop
 80138e0:	08016940 	.word	0x08016940
 80138e4:	08016960 	.word	0x08016960
 80138e8:	08016980 	.word	0x08016980

080138ec <__swbuf>:
 80138ec:	4b02      	ldr	r3, [pc, #8]	; (80138f8 <__swbuf+0xc>)
 80138ee:	460a      	mov	r2, r1
 80138f0:	4601      	mov	r1, r0
 80138f2:	6818      	ldr	r0, [r3, #0]
 80138f4:	f7ff bfa6 	b.w	8013844 <__swbuf_r>
 80138f8:	20000098 	.word	0x20000098

080138fc <_write_r>:
 80138fc:	b538      	push	{r3, r4, r5, lr}
 80138fe:	4c07      	ldr	r4, [pc, #28]	; (801391c <_write_r+0x20>)
 8013900:	4605      	mov	r5, r0
 8013902:	4608      	mov	r0, r1
 8013904:	4611      	mov	r1, r2
 8013906:	2200      	movs	r2, #0
 8013908:	6022      	str	r2, [r4, #0]
 801390a:	461a      	mov	r2, r3
 801390c:	f000 ff96 	bl	801483c <_write>
 8013910:	1c43      	adds	r3, r0, #1
 8013912:	d102      	bne.n	801391a <_write_r+0x1e>
 8013914:	6823      	ldr	r3, [r4, #0]
 8013916:	b103      	cbz	r3, 801391a <_write_r+0x1e>
 8013918:	602b      	str	r3, [r5, #0]
 801391a:	bd38      	pop	{r3, r4, r5, pc}
 801391c:	20000d24 	.word	0x20000d24

08013920 <__swsetup_r>:
 8013920:	4b31      	ldr	r3, [pc, #196]	; (80139e8 <__swsetup_r+0xc8>)
 8013922:	b570      	push	{r4, r5, r6, lr}
 8013924:	681d      	ldr	r5, [r3, #0]
 8013926:	4606      	mov	r6, r0
 8013928:	460c      	mov	r4, r1
 801392a:	b125      	cbz	r5, 8013936 <__swsetup_r+0x16>
 801392c:	69ab      	ldr	r3, [r5, #24]
 801392e:	b913      	cbnz	r3, 8013936 <__swsetup_r+0x16>
 8013930:	4628      	mov	r0, r5
 8013932:	f000 f96d 	bl	8013c10 <__sinit>
 8013936:	4b2d      	ldr	r3, [pc, #180]	; (80139ec <__swsetup_r+0xcc>)
 8013938:	429c      	cmp	r4, r3
 801393a:	d101      	bne.n	8013940 <__swsetup_r+0x20>
 801393c:	686c      	ldr	r4, [r5, #4]
 801393e:	e008      	b.n	8013952 <__swsetup_r+0x32>
 8013940:	4b2b      	ldr	r3, [pc, #172]	; (80139f0 <__swsetup_r+0xd0>)
 8013942:	429c      	cmp	r4, r3
 8013944:	d101      	bne.n	801394a <__swsetup_r+0x2a>
 8013946:	68ac      	ldr	r4, [r5, #8]
 8013948:	e003      	b.n	8013952 <__swsetup_r+0x32>
 801394a:	4b2a      	ldr	r3, [pc, #168]	; (80139f4 <__swsetup_r+0xd4>)
 801394c:	429c      	cmp	r4, r3
 801394e:	bf08      	it	eq
 8013950:	68ec      	ldreq	r4, [r5, #12]
 8013952:	89a3      	ldrh	r3, [r4, #12]
 8013954:	b29a      	uxth	r2, r3
 8013956:	0711      	lsls	r1, r2, #28
 8013958:	d41d      	bmi.n	8013996 <__swsetup_r+0x76>
 801395a:	06d5      	lsls	r5, r2, #27
 801395c:	d402      	bmi.n	8013964 <__swsetup_r+0x44>
 801395e:	2209      	movs	r2, #9
 8013960:	6032      	str	r2, [r6, #0]
 8013962:	e038      	b.n	80139d6 <__swsetup_r+0xb6>
 8013964:	0750      	lsls	r0, r2, #29
 8013966:	d512      	bpl.n	801398e <__swsetup_r+0x6e>
 8013968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801396a:	b141      	cbz	r1, 801397e <__swsetup_r+0x5e>
 801396c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013970:	4299      	cmp	r1, r3
 8013972:	d002      	beq.n	801397a <__swsetup_r+0x5a>
 8013974:	4630      	mov	r0, r6
 8013976:	f7ff fd87 	bl	8013488 <_free_r>
 801397a:	2300      	movs	r3, #0
 801397c:	6363      	str	r3, [r4, #52]	; 0x34
 801397e:	89a3      	ldrh	r3, [r4, #12]
 8013980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013984:	81a3      	strh	r3, [r4, #12]
 8013986:	2300      	movs	r3, #0
 8013988:	6063      	str	r3, [r4, #4]
 801398a:	6923      	ldr	r3, [r4, #16]
 801398c:	6023      	str	r3, [r4, #0]
 801398e:	89a3      	ldrh	r3, [r4, #12]
 8013990:	f043 0308 	orr.w	r3, r3, #8
 8013994:	81a3      	strh	r3, [r4, #12]
 8013996:	6923      	ldr	r3, [r4, #16]
 8013998:	b94b      	cbnz	r3, 80139ae <__swsetup_r+0x8e>
 801399a:	89a3      	ldrh	r3, [r4, #12]
 801399c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80139a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139a4:	d003      	beq.n	80139ae <__swsetup_r+0x8e>
 80139a6:	4621      	mov	r1, r4
 80139a8:	4630      	mov	r0, r6
 80139aa:	f000 f9ef 	bl	8013d8c <__smakebuf_r>
 80139ae:	89a3      	ldrh	r3, [r4, #12]
 80139b0:	f013 0201 	ands.w	r2, r3, #1
 80139b4:	d005      	beq.n	80139c2 <__swsetup_r+0xa2>
 80139b6:	2200      	movs	r2, #0
 80139b8:	60a2      	str	r2, [r4, #8]
 80139ba:	6962      	ldr	r2, [r4, #20]
 80139bc:	4252      	negs	r2, r2
 80139be:	61a2      	str	r2, [r4, #24]
 80139c0:	e003      	b.n	80139ca <__swsetup_r+0xaa>
 80139c2:	0799      	lsls	r1, r3, #30
 80139c4:	bf58      	it	pl
 80139c6:	6962      	ldrpl	r2, [r4, #20]
 80139c8:	60a2      	str	r2, [r4, #8]
 80139ca:	6922      	ldr	r2, [r4, #16]
 80139cc:	b94a      	cbnz	r2, 80139e2 <__swsetup_r+0xc2>
 80139ce:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80139d2:	b280      	uxth	r0, r0
 80139d4:	b130      	cbz	r0, 80139e4 <__swsetup_r+0xc4>
 80139d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139da:	81a3      	strh	r3, [r4, #12]
 80139dc:	f04f 30ff 	mov.w	r0, #4294967295
 80139e0:	bd70      	pop	{r4, r5, r6, pc}
 80139e2:	2000      	movs	r0, #0
 80139e4:	bd70      	pop	{r4, r5, r6, pc}
 80139e6:	bf00      	nop
 80139e8:	20000098 	.word	0x20000098
 80139ec:	08016940 	.word	0x08016940
 80139f0:	08016960 	.word	0x08016960
 80139f4:	08016980 	.word	0x08016980

080139f8 <__sflush_r>:
 80139f8:	898a      	ldrh	r2, [r1, #12]
 80139fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139fe:	4605      	mov	r5, r0
 8013a00:	0710      	lsls	r0, r2, #28
 8013a02:	460c      	mov	r4, r1
 8013a04:	d459      	bmi.n	8013aba <__sflush_r+0xc2>
 8013a06:	684b      	ldr	r3, [r1, #4]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	dc02      	bgt.n	8013a12 <__sflush_r+0x1a>
 8013a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	dd17      	ble.n	8013a42 <__sflush_r+0x4a>
 8013a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a14:	b1ae      	cbz	r6, 8013a42 <__sflush_r+0x4a>
 8013a16:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	b292      	uxth	r2, r2
 8013a1e:	682f      	ldr	r7, [r5, #0]
 8013a20:	602b      	str	r3, [r5, #0]
 8013a22:	b10a      	cbz	r2, 8013a28 <__sflush_r+0x30>
 8013a24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a26:	e015      	b.n	8013a54 <__sflush_r+0x5c>
 8013a28:	6a21      	ldr	r1, [r4, #32]
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	4628      	mov	r0, r5
 8013a2e:	47b0      	blx	r6
 8013a30:	1c41      	adds	r1, r0, #1
 8013a32:	d10f      	bne.n	8013a54 <__sflush_r+0x5c>
 8013a34:	682b      	ldr	r3, [r5, #0]
 8013a36:	b16b      	cbz	r3, 8013a54 <__sflush_r+0x5c>
 8013a38:	2b1d      	cmp	r3, #29
 8013a3a:	d001      	beq.n	8013a40 <__sflush_r+0x48>
 8013a3c:	2b16      	cmp	r3, #22
 8013a3e:	d103      	bne.n	8013a48 <__sflush_r+0x50>
 8013a40:	602f      	str	r7, [r5, #0]
 8013a42:	2000      	movs	r0, #0
 8013a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a48:	89a3      	ldrh	r3, [r4, #12]
 8013a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a4e:	81a3      	strh	r3, [r4, #12]
 8013a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a54:	89a3      	ldrh	r3, [r4, #12]
 8013a56:	075a      	lsls	r2, r3, #29
 8013a58:	d505      	bpl.n	8013a66 <__sflush_r+0x6e>
 8013a5a:	6863      	ldr	r3, [r4, #4]
 8013a5c:	1ac0      	subs	r0, r0, r3
 8013a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a60:	b10b      	cbz	r3, 8013a66 <__sflush_r+0x6e>
 8013a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a64:	1ac0      	subs	r0, r0, r3
 8013a66:	2300      	movs	r3, #0
 8013a68:	4602      	mov	r2, r0
 8013a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a6c:	6a21      	ldr	r1, [r4, #32]
 8013a6e:	4628      	mov	r0, r5
 8013a70:	47b0      	blx	r6
 8013a72:	1c43      	adds	r3, r0, #1
 8013a74:	89a3      	ldrh	r3, [r4, #12]
 8013a76:	d106      	bne.n	8013a86 <__sflush_r+0x8e>
 8013a78:	6829      	ldr	r1, [r5, #0]
 8013a7a:	291d      	cmp	r1, #29
 8013a7c:	d839      	bhi.n	8013af2 <__sflush_r+0xfa>
 8013a7e:	4a20      	ldr	r2, [pc, #128]	; (8013b00 <__sflush_r+0x108>)
 8013a80:	40ca      	lsrs	r2, r1
 8013a82:	07d6      	lsls	r6, r2, #31
 8013a84:	d535      	bpl.n	8013af2 <__sflush_r+0xfa>
 8013a86:	2200      	movs	r2, #0
 8013a88:	6062      	str	r2, [r4, #4]
 8013a8a:	6922      	ldr	r2, [r4, #16]
 8013a8c:	04d9      	lsls	r1, r3, #19
 8013a8e:	6022      	str	r2, [r4, #0]
 8013a90:	d504      	bpl.n	8013a9c <__sflush_r+0xa4>
 8013a92:	1c42      	adds	r2, r0, #1
 8013a94:	d101      	bne.n	8013a9a <__sflush_r+0xa2>
 8013a96:	682b      	ldr	r3, [r5, #0]
 8013a98:	b903      	cbnz	r3, 8013a9c <__sflush_r+0xa4>
 8013a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8013a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a9e:	602f      	str	r7, [r5, #0]
 8013aa0:	2900      	cmp	r1, #0
 8013aa2:	d0ce      	beq.n	8013a42 <__sflush_r+0x4a>
 8013aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013aa8:	4299      	cmp	r1, r3
 8013aaa:	d002      	beq.n	8013ab2 <__sflush_r+0xba>
 8013aac:	4628      	mov	r0, r5
 8013aae:	f7ff fceb 	bl	8013488 <_free_r>
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8013ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aba:	690f      	ldr	r7, [r1, #16]
 8013abc:	2f00      	cmp	r7, #0
 8013abe:	d0c0      	beq.n	8013a42 <__sflush_r+0x4a>
 8013ac0:	0793      	lsls	r3, r2, #30
 8013ac2:	680e      	ldr	r6, [r1, #0]
 8013ac4:	bf0c      	ite	eq
 8013ac6:	694b      	ldreq	r3, [r1, #20]
 8013ac8:	2300      	movne	r3, #0
 8013aca:	ebc7 0806 	rsb	r8, r7, r6
 8013ace:	600f      	str	r7, [r1, #0]
 8013ad0:	608b      	str	r3, [r1, #8]
 8013ad2:	e002      	b.n	8013ada <__sflush_r+0xe2>
 8013ad4:	4407      	add	r7, r0
 8013ad6:	ebc0 0808 	rsb	r8, r0, r8
 8013ada:	f1b8 0f00 	cmp.w	r8, #0
 8013ade:	ddb0      	ble.n	8013a42 <__sflush_r+0x4a>
 8013ae0:	4643      	mov	r3, r8
 8013ae2:	463a      	mov	r2, r7
 8013ae4:	6a21      	ldr	r1, [r4, #32]
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013aea:	47b0      	blx	r6
 8013aec:	2800      	cmp	r0, #0
 8013aee:	dcf1      	bgt.n	8013ad4 <__sflush_r+0xdc>
 8013af0:	89a3      	ldrh	r3, [r4, #12]
 8013af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013af6:	81a3      	strh	r3, [r4, #12]
 8013af8:	f04f 30ff 	mov.w	r0, #4294967295
 8013afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b00:	20400001 	.word	0x20400001

08013b04 <_fflush_r>:
 8013b04:	b538      	push	{r3, r4, r5, lr}
 8013b06:	690b      	ldr	r3, [r1, #16]
 8013b08:	4605      	mov	r5, r0
 8013b0a:	460c      	mov	r4, r1
 8013b0c:	b1db      	cbz	r3, 8013b46 <_fflush_r+0x42>
 8013b0e:	b118      	cbz	r0, 8013b18 <_fflush_r+0x14>
 8013b10:	6983      	ldr	r3, [r0, #24]
 8013b12:	b90b      	cbnz	r3, 8013b18 <_fflush_r+0x14>
 8013b14:	f000 f87c 	bl	8013c10 <__sinit>
 8013b18:	4b0c      	ldr	r3, [pc, #48]	; (8013b4c <_fflush_r+0x48>)
 8013b1a:	429c      	cmp	r4, r3
 8013b1c:	d101      	bne.n	8013b22 <_fflush_r+0x1e>
 8013b1e:	686c      	ldr	r4, [r5, #4]
 8013b20:	e008      	b.n	8013b34 <_fflush_r+0x30>
 8013b22:	4b0b      	ldr	r3, [pc, #44]	; (8013b50 <_fflush_r+0x4c>)
 8013b24:	429c      	cmp	r4, r3
 8013b26:	d101      	bne.n	8013b2c <_fflush_r+0x28>
 8013b28:	68ac      	ldr	r4, [r5, #8]
 8013b2a:	e003      	b.n	8013b34 <_fflush_r+0x30>
 8013b2c:	4b09      	ldr	r3, [pc, #36]	; (8013b54 <_fflush_r+0x50>)
 8013b2e:	429c      	cmp	r4, r3
 8013b30:	bf08      	it	eq
 8013b32:	68ec      	ldreq	r4, [r5, #12]
 8013b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b38:	b12b      	cbz	r3, 8013b46 <_fflush_r+0x42>
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b42:	f7ff bf59 	b.w	80139f8 <__sflush_r>
 8013b46:	2000      	movs	r0, #0
 8013b48:	bd38      	pop	{r3, r4, r5, pc}
 8013b4a:	bf00      	nop
 8013b4c:	08016940 	.word	0x08016940
 8013b50:	08016960 	.word	0x08016960
 8013b54:	08016980 	.word	0x08016980

08013b58 <fflush>:
 8013b58:	4601      	mov	r1, r0
 8013b5a:	b920      	cbnz	r0, 8013b66 <fflush+0xe>
 8013b5c:	4b04      	ldr	r3, [pc, #16]	; (8013b70 <fflush+0x18>)
 8013b5e:	4905      	ldr	r1, [pc, #20]	; (8013b74 <fflush+0x1c>)
 8013b60:	6818      	ldr	r0, [r3, #0]
 8013b62:	f000 b8f5 	b.w	8013d50 <_fwalk_reent>
 8013b66:	4b04      	ldr	r3, [pc, #16]	; (8013b78 <fflush+0x20>)
 8013b68:	6818      	ldr	r0, [r3, #0]
 8013b6a:	f7ff bfcb 	b.w	8013b04 <_fflush_r>
 8013b6e:	bf00      	nop
 8013b70:	0801693c 	.word	0x0801693c
 8013b74:	08013b05 	.word	0x08013b05
 8013b78:	20000098 	.word	0x20000098

08013b7c <__fp_unlock>:
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	4770      	bx	lr

08013b80 <_cleanup_r>:
 8013b80:	4901      	ldr	r1, [pc, #4]	; (8013b88 <_cleanup_r+0x8>)
 8013b82:	f000 b8e5 	b.w	8013d50 <_fwalk_reent>
 8013b86:	bf00      	nop
 8013b88:	08013b05 	.word	0x08013b05

08013b8c <std.isra.0>:
 8013b8c:	b510      	push	{r4, lr}
 8013b8e:	4604      	mov	r4, r0
 8013b90:	2300      	movs	r3, #0
 8013b92:	6003      	str	r3, [r0, #0]
 8013b94:	6043      	str	r3, [r0, #4]
 8013b96:	6083      	str	r3, [r0, #8]
 8013b98:	8181      	strh	r1, [r0, #12]
 8013b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8013b9c:	81c2      	strh	r2, [r0, #14]
 8013b9e:	6103      	str	r3, [r0, #16]
 8013ba0:	6143      	str	r3, [r0, #20]
 8013ba2:	6183      	str	r3, [r0, #24]
 8013ba4:	4619      	mov	r1, r3
 8013ba6:	2208      	movs	r2, #8
 8013ba8:	305c      	adds	r0, #92	; 0x5c
 8013baa:	f7ff fc65 	bl	8013478 <memset>
 8013bae:	4b05      	ldr	r3, [pc, #20]	; (8013bc4 <std.isra.0+0x38>)
 8013bb0:	6224      	str	r4, [r4, #32]
 8013bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8013bb4:	4b04      	ldr	r3, [pc, #16]	; (8013bc8 <std.isra.0+0x3c>)
 8013bb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8013bb8:	4b04      	ldr	r3, [pc, #16]	; (8013bcc <std.isra.0+0x40>)
 8013bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013bbc:	4b04      	ldr	r3, [pc, #16]	; (8013bd0 <std.isra.0+0x44>)
 8013bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8013bc0:	bd10      	pop	{r4, pc}
 8013bc2:	bf00      	nop
 8013bc4:	08014611 	.word	0x08014611
 8013bc8:	08014637 	.word	0x08014637
 8013bcc:	0801466f 	.word	0x0801466f
 8013bd0:	08014693 	.word	0x08014693

08013bd4 <__fp_lock>:
 8013bd4:	2000      	movs	r0, #0
 8013bd6:	4770      	bx	lr

08013bd8 <__sfmoreglue>:
 8013bd8:	b570      	push	{r4, r5, r6, lr}
 8013bda:	2368      	movs	r3, #104	; 0x68
 8013bdc:	1e4d      	subs	r5, r1, #1
 8013bde:	435d      	muls	r5, r3
 8013be0:	460e      	mov	r6, r1
 8013be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013be6:	f7ff fc93 	bl	8013510 <_malloc_r>
 8013bea:	4604      	mov	r4, r0
 8013bec:	b140      	cbz	r0, 8013c00 <__sfmoreglue+0x28>
 8013bee:	2100      	movs	r1, #0
 8013bf0:	e880 0042 	stmia.w	r0, {r1, r6}
 8013bf4:	300c      	adds	r0, #12
 8013bf6:	60a0      	str	r0, [r4, #8]
 8013bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013bfc:	f7ff fc3c 	bl	8013478 <memset>
 8013c00:	4620      	mov	r0, r4
 8013c02:	bd70      	pop	{r4, r5, r6, pc}

08013c04 <_cleanup>:
 8013c04:	4b01      	ldr	r3, [pc, #4]	; (8013c0c <_cleanup+0x8>)
 8013c06:	6818      	ldr	r0, [r3, #0]
 8013c08:	f7ff bfba 	b.w	8013b80 <_cleanup_r>
 8013c0c:	0801693c 	.word	0x0801693c

08013c10 <__sinit>:
 8013c10:	6983      	ldr	r3, [r0, #24]
 8013c12:	b510      	push	{r4, lr}
 8013c14:	4604      	mov	r4, r0
 8013c16:	bb33      	cbnz	r3, 8013c66 <__sinit+0x56>
 8013c18:	6483      	str	r3, [r0, #72]	; 0x48
 8013c1a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013c1c:	6503      	str	r3, [r0, #80]	; 0x50
 8013c1e:	4b12      	ldr	r3, [pc, #72]	; (8013c68 <__sinit+0x58>)
 8013c20:	4a12      	ldr	r2, [pc, #72]	; (8013c6c <__sinit+0x5c>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	6282      	str	r2, [r0, #40]	; 0x28
 8013c26:	4298      	cmp	r0, r3
 8013c28:	bf04      	itt	eq
 8013c2a:	2301      	moveq	r3, #1
 8013c2c:	6183      	streq	r3, [r0, #24]
 8013c2e:	f000 f81f 	bl	8013c70 <__sfp>
 8013c32:	6060      	str	r0, [r4, #4]
 8013c34:	4620      	mov	r0, r4
 8013c36:	f000 f81b 	bl	8013c70 <__sfp>
 8013c3a:	60a0      	str	r0, [r4, #8]
 8013c3c:	4620      	mov	r0, r4
 8013c3e:	f000 f817 	bl	8013c70 <__sfp>
 8013c42:	2200      	movs	r2, #0
 8013c44:	60e0      	str	r0, [r4, #12]
 8013c46:	2104      	movs	r1, #4
 8013c48:	6860      	ldr	r0, [r4, #4]
 8013c4a:	f7ff ff9f 	bl	8013b8c <std.isra.0>
 8013c4e:	2201      	movs	r2, #1
 8013c50:	2109      	movs	r1, #9
 8013c52:	68a0      	ldr	r0, [r4, #8]
 8013c54:	f7ff ff9a 	bl	8013b8c <std.isra.0>
 8013c58:	2202      	movs	r2, #2
 8013c5a:	2112      	movs	r1, #18
 8013c5c:	68e0      	ldr	r0, [r4, #12]
 8013c5e:	f7ff ff95 	bl	8013b8c <std.isra.0>
 8013c62:	2301      	movs	r3, #1
 8013c64:	61a3      	str	r3, [r4, #24]
 8013c66:	bd10      	pop	{r4, pc}
 8013c68:	0801693c 	.word	0x0801693c
 8013c6c:	08013b81 	.word	0x08013b81

08013c70 <__sfp>:
 8013c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c72:	4b1c      	ldr	r3, [pc, #112]	; (8013ce4 <__sfp+0x74>)
 8013c74:	4607      	mov	r7, r0
 8013c76:	681e      	ldr	r6, [r3, #0]
 8013c78:	69b3      	ldr	r3, [r6, #24]
 8013c7a:	b913      	cbnz	r3, 8013c82 <__sfp+0x12>
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f7ff ffc7 	bl	8013c10 <__sinit>
 8013c82:	3648      	adds	r6, #72	; 0x48
 8013c84:	68b4      	ldr	r4, [r6, #8]
 8013c86:	6873      	ldr	r3, [r6, #4]
 8013c88:	3b01      	subs	r3, #1
 8013c8a:	d404      	bmi.n	8013c96 <__sfp+0x26>
 8013c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c90:	b17d      	cbz	r5, 8013cb2 <__sfp+0x42>
 8013c92:	3468      	adds	r4, #104	; 0x68
 8013c94:	e7f8      	b.n	8013c88 <__sfp+0x18>
 8013c96:	6833      	ldr	r3, [r6, #0]
 8013c98:	b10b      	cbz	r3, 8013c9e <__sfp+0x2e>
 8013c9a:	6836      	ldr	r6, [r6, #0]
 8013c9c:	e7f2      	b.n	8013c84 <__sfp+0x14>
 8013c9e:	2104      	movs	r1, #4
 8013ca0:	4638      	mov	r0, r7
 8013ca2:	f7ff ff99 	bl	8013bd8 <__sfmoreglue>
 8013ca6:	6030      	str	r0, [r6, #0]
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	d1f6      	bne.n	8013c9a <__sfp+0x2a>
 8013cac:	230c      	movs	r3, #12
 8013cae:	603b      	str	r3, [r7, #0]
 8013cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cb6:	81e3      	strh	r3, [r4, #14]
 8013cb8:	2301      	movs	r3, #1
 8013cba:	81a3      	strh	r3, [r4, #12]
 8013cbc:	6665      	str	r5, [r4, #100]	; 0x64
 8013cbe:	6025      	str	r5, [r4, #0]
 8013cc0:	60a5      	str	r5, [r4, #8]
 8013cc2:	6065      	str	r5, [r4, #4]
 8013cc4:	6125      	str	r5, [r4, #16]
 8013cc6:	6165      	str	r5, [r4, #20]
 8013cc8:	61a5      	str	r5, [r4, #24]
 8013cca:	2208      	movs	r2, #8
 8013ccc:	4629      	mov	r1, r5
 8013cce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013cd2:	f7ff fbd1 	bl	8013478 <memset>
 8013cd6:	6365      	str	r5, [r4, #52]	; 0x34
 8013cd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8013cda:	64a5      	str	r5, [r4, #72]	; 0x48
 8013cdc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013cde:	4620      	mov	r0, r4
 8013ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	0801693c 	.word	0x0801693c

08013ce8 <__sfp_lock_acquire>:
 8013ce8:	4770      	bx	lr

08013cea <__sfp_lock_release>:
 8013cea:	4770      	bx	lr

08013cec <__sinit_lock_acquire>:
 8013cec:	4770      	bx	lr

08013cee <__sinit_lock_release>:
 8013cee:	4770      	bx	lr

08013cf0 <__fp_lock_all>:
 8013cf0:	4b02      	ldr	r3, [pc, #8]	; (8013cfc <__fp_lock_all+0xc>)
 8013cf2:	4903      	ldr	r1, [pc, #12]	; (8013d00 <__fp_lock_all+0x10>)
 8013cf4:	6818      	ldr	r0, [r3, #0]
 8013cf6:	f000 b80f 	b.w	8013d18 <_fwalk>
 8013cfa:	bf00      	nop
 8013cfc:	20000098 	.word	0x20000098
 8013d00:	08013bd5 	.word	0x08013bd5

08013d04 <__fp_unlock_all>:
 8013d04:	4b02      	ldr	r3, [pc, #8]	; (8013d10 <__fp_unlock_all+0xc>)
 8013d06:	4903      	ldr	r1, [pc, #12]	; (8013d14 <__fp_unlock_all+0x10>)
 8013d08:	6818      	ldr	r0, [r3, #0]
 8013d0a:	f000 b805 	b.w	8013d18 <_fwalk>
 8013d0e:	bf00      	nop
 8013d10:	20000098 	.word	0x20000098
 8013d14:	08013b7d 	.word	0x08013b7d

08013d18 <_fwalk>:
 8013d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d1c:	4688      	mov	r8, r1
 8013d1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d22:	2600      	movs	r6, #0
 8013d24:	b18c      	cbz	r4, 8013d4a <_fwalk+0x32>
 8013d26:	68a5      	ldr	r5, [r4, #8]
 8013d28:	6867      	ldr	r7, [r4, #4]
 8013d2a:	3f01      	subs	r7, #1
 8013d2c:	d40b      	bmi.n	8013d46 <_fwalk+0x2e>
 8013d2e:	89ab      	ldrh	r3, [r5, #12]
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d906      	bls.n	8013d42 <_fwalk+0x2a>
 8013d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d38:	3301      	adds	r3, #1
 8013d3a:	d002      	beq.n	8013d42 <_fwalk+0x2a>
 8013d3c:	4628      	mov	r0, r5
 8013d3e:	47c0      	blx	r8
 8013d40:	4306      	orrs	r6, r0
 8013d42:	3568      	adds	r5, #104	; 0x68
 8013d44:	e7f1      	b.n	8013d2a <_fwalk+0x12>
 8013d46:	6824      	ldr	r4, [r4, #0]
 8013d48:	e7ec      	b.n	8013d24 <_fwalk+0xc>
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d50 <_fwalk_reent>:
 8013d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d54:	4680      	mov	r8, r0
 8013d56:	4689      	mov	r9, r1
 8013d58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d5c:	2600      	movs	r6, #0
 8013d5e:	b194      	cbz	r4, 8013d86 <_fwalk_reent+0x36>
 8013d60:	68a5      	ldr	r5, [r4, #8]
 8013d62:	6867      	ldr	r7, [r4, #4]
 8013d64:	3f01      	subs	r7, #1
 8013d66:	d40c      	bmi.n	8013d82 <_fwalk_reent+0x32>
 8013d68:	89ab      	ldrh	r3, [r5, #12]
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d907      	bls.n	8013d7e <_fwalk_reent+0x2e>
 8013d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d72:	3301      	adds	r3, #1
 8013d74:	d003      	beq.n	8013d7e <_fwalk_reent+0x2e>
 8013d76:	4629      	mov	r1, r5
 8013d78:	4640      	mov	r0, r8
 8013d7a:	47c8      	blx	r9
 8013d7c:	4306      	orrs	r6, r0
 8013d7e:	3568      	adds	r5, #104	; 0x68
 8013d80:	e7f0      	b.n	8013d64 <_fwalk_reent+0x14>
 8013d82:	6824      	ldr	r4, [r4, #0]
 8013d84:	e7eb      	b.n	8013d5e <_fwalk_reent+0xe>
 8013d86:	4630      	mov	r0, r6
 8013d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013d8c <__smakebuf_r>:
 8013d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d8e:	898b      	ldrh	r3, [r1, #12]
 8013d90:	b091      	sub	sp, #68	; 0x44
 8013d92:	079d      	lsls	r5, r3, #30
 8013d94:	4606      	mov	r6, r0
 8013d96:	460c      	mov	r4, r1
 8013d98:	d425      	bmi.n	8013de6 <__smakebuf_r+0x5a>
 8013d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d9e:	2900      	cmp	r1, #0
 8013da0:	da08      	bge.n	8013db4 <__smakebuf_r+0x28>
 8013da2:	89a3      	ldrh	r3, [r4, #12]
 8013da4:	2500      	movs	r5, #0
 8013da6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013daa:	bf14      	ite	ne
 8013dac:	2740      	movne	r7, #64	; 0x40
 8013dae:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8013db2:	e00d      	b.n	8013dd0 <__smakebuf_r+0x44>
 8013db4:	aa01      	add	r2, sp, #4
 8013db6:	f000 fc81 	bl	80146bc <_fstat_r>
 8013dba:	2800      	cmp	r0, #0
 8013dbc:	dbf1      	blt.n	8013da2 <__smakebuf_r+0x16>
 8013dbe:	9d02      	ldr	r5, [sp, #8]
 8013dc0:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8013dc4:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8013dc8:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8013dcc:	424d      	negs	r5, r1
 8013dce:	414d      	adcs	r5, r1
 8013dd0:	4639      	mov	r1, r7
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	f7ff fb9c 	bl	8013510 <_malloc_r>
 8013dd8:	b960      	cbnz	r0, 8013df4 <__smakebuf_r+0x68>
 8013dda:	89a3      	ldrh	r3, [r4, #12]
 8013ddc:	059a      	lsls	r2, r3, #22
 8013dde:	d41d      	bmi.n	8013e1c <__smakebuf_r+0x90>
 8013de0:	f043 0302 	orr.w	r3, r3, #2
 8013de4:	81a3      	strh	r3, [r4, #12]
 8013de6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013dea:	6023      	str	r3, [r4, #0]
 8013dec:	6123      	str	r3, [r4, #16]
 8013dee:	2301      	movs	r3, #1
 8013df0:	6163      	str	r3, [r4, #20]
 8013df2:	e013      	b.n	8013e1c <__smakebuf_r+0x90>
 8013df4:	4b0a      	ldr	r3, [pc, #40]	; (8013e20 <__smakebuf_r+0x94>)
 8013df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8013df8:	89a3      	ldrh	r3, [r4, #12]
 8013dfa:	6020      	str	r0, [r4, #0]
 8013dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e00:	81a3      	strh	r3, [r4, #12]
 8013e02:	6120      	str	r0, [r4, #16]
 8013e04:	6167      	str	r7, [r4, #20]
 8013e06:	b14d      	cbz	r5, 8013e1c <__smakebuf_r+0x90>
 8013e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e0c:	4630      	mov	r0, r6
 8013e0e:	f000 fc67 	bl	80146e0 <_isatty_r>
 8013e12:	b118      	cbz	r0, 8013e1c <__smakebuf_r+0x90>
 8013e14:	89a3      	ldrh	r3, [r4, #12]
 8013e16:	f043 0301 	orr.w	r3, r3, #1
 8013e1a:	81a3      	strh	r3, [r4, #12]
 8013e1c:	b011      	add	sp, #68	; 0x44
 8013e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e20:	08013b81 	.word	0x08013b81

08013e24 <_realloc_r>:
 8013e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e26:	4607      	mov	r7, r0
 8013e28:	4615      	mov	r5, r2
 8013e2a:	460e      	mov	r6, r1
 8013e2c:	b921      	cbnz	r1, 8013e38 <_realloc_r+0x14>
 8013e2e:	4611      	mov	r1, r2
 8013e30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013e34:	f7ff bb6c 	b.w	8013510 <_malloc_r>
 8013e38:	b91a      	cbnz	r2, 8013e42 <_realloc_r+0x1e>
 8013e3a:	f7ff fb25 	bl	8013488 <_free_r>
 8013e3e:	4628      	mov	r0, r5
 8013e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e42:	f000 fc98 	bl	8014776 <_malloc_usable_size_r>
 8013e46:	4285      	cmp	r5, r0
 8013e48:	d90e      	bls.n	8013e68 <_realloc_r+0x44>
 8013e4a:	4629      	mov	r1, r5
 8013e4c:	4638      	mov	r0, r7
 8013e4e:	f7ff fb5f 	bl	8013510 <_malloc_r>
 8013e52:	4604      	mov	r4, r0
 8013e54:	b150      	cbz	r0, 8013e6c <_realloc_r+0x48>
 8013e56:	4631      	mov	r1, r6
 8013e58:	462a      	mov	r2, r5
 8013e5a:	f7ff fb02 	bl	8013462 <memcpy>
 8013e5e:	4631      	mov	r1, r6
 8013e60:	4638      	mov	r0, r7
 8013e62:	f7ff fb11 	bl	8013488 <_free_r>
 8013e66:	e001      	b.n	8013e6c <_realloc_r+0x48>
 8013e68:	4630      	mov	r0, r6
 8013e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e70 <__ssputs_r>:
 8013e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e74:	688e      	ldr	r6, [r1, #8]
 8013e76:	4682      	mov	sl, r0
 8013e78:	429e      	cmp	r6, r3
 8013e7a:	460c      	mov	r4, r1
 8013e7c:	4691      	mov	r9, r2
 8013e7e:	4698      	mov	r8, r3
 8013e80:	d83e      	bhi.n	8013f00 <__ssputs_r+0x90>
 8013e82:	898a      	ldrh	r2, [r1, #12]
 8013e84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013e88:	d03a      	beq.n	8013f00 <__ssputs_r+0x90>
 8013e8a:	6825      	ldr	r5, [r4, #0]
 8013e8c:	6909      	ldr	r1, [r1, #16]
 8013e8e:	2302      	movs	r3, #2
 8013e90:	1a6f      	subs	r7, r5, r1
 8013e92:	6965      	ldr	r5, [r4, #20]
 8013e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e98:	fb95 f5f3 	sdiv	r5, r5, r3
 8013e9c:	1c7b      	adds	r3, r7, #1
 8013e9e:	4443      	add	r3, r8
 8013ea0:	429d      	cmp	r5, r3
 8013ea2:	bf38      	it	cc
 8013ea4:	461d      	movcc	r5, r3
 8013ea6:	0553      	lsls	r3, r2, #21
 8013ea8:	d50f      	bpl.n	8013eca <__ssputs_r+0x5a>
 8013eaa:	4629      	mov	r1, r5
 8013eac:	f7ff fb30 	bl	8013510 <_malloc_r>
 8013eb0:	4606      	mov	r6, r0
 8013eb2:	b198      	cbz	r0, 8013edc <__ssputs_r+0x6c>
 8013eb4:	463a      	mov	r2, r7
 8013eb6:	6921      	ldr	r1, [r4, #16]
 8013eb8:	f7ff fad3 	bl	8013462 <memcpy>
 8013ebc:	89a3      	ldrh	r3, [r4, #12]
 8013ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ec6:	81a3      	strh	r3, [r4, #12]
 8013ec8:	e013      	b.n	8013ef2 <__ssputs_r+0x82>
 8013eca:	462a      	mov	r2, r5
 8013ecc:	f7ff ffaa 	bl	8013e24 <_realloc_r>
 8013ed0:	4606      	mov	r6, r0
 8013ed2:	b970      	cbnz	r0, 8013ef2 <__ssputs_r+0x82>
 8013ed4:	6921      	ldr	r1, [r4, #16]
 8013ed6:	4650      	mov	r0, sl
 8013ed8:	f7ff fad6 	bl	8013488 <_free_r>
 8013edc:	230c      	movs	r3, #12
 8013ede:	f8ca 3000 	str.w	r3, [sl]
 8013ee2:	89a3      	ldrh	r3, [r4, #12]
 8013ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eec:	81a3      	strh	r3, [r4, #12]
 8013eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ef2:	6126      	str	r6, [r4, #16]
 8013ef4:	443e      	add	r6, r7
 8013ef6:	6026      	str	r6, [r4, #0]
 8013ef8:	4646      	mov	r6, r8
 8013efa:	6165      	str	r5, [r4, #20]
 8013efc:	1bed      	subs	r5, r5, r7
 8013efe:	60a5      	str	r5, [r4, #8]
 8013f00:	4546      	cmp	r6, r8
 8013f02:	bf28      	it	cs
 8013f04:	4646      	movcs	r6, r8
 8013f06:	4649      	mov	r1, r9
 8013f08:	4632      	mov	r2, r6
 8013f0a:	6820      	ldr	r0, [r4, #0]
 8013f0c:	f000 fc18 	bl	8014740 <memmove>
 8013f10:	68a3      	ldr	r3, [r4, #8]
 8013f12:	2000      	movs	r0, #0
 8013f14:	1b9b      	subs	r3, r3, r6
 8013f16:	60a3      	str	r3, [r4, #8]
 8013f18:	6823      	ldr	r3, [r4, #0]
 8013f1a:	441e      	add	r6, r3
 8013f1c:	6026      	str	r6, [r4, #0]
 8013f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013f22 <__ssprint_r>:
 8013f22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f26:	4693      	mov	fp, r2
 8013f28:	6892      	ldr	r2, [r2, #8]
 8013f2a:	4681      	mov	r9, r0
 8013f2c:	460c      	mov	r4, r1
 8013f2e:	b34a      	cbz	r2, 8013f84 <__ssprint_r+0x62>
 8013f30:	2300      	movs	r3, #0
 8013f32:	f8db a000 	ldr.w	sl, [fp]
 8013f36:	9301      	str	r3, [sp, #4]
 8013f38:	461f      	mov	r7, r3
 8013f3a:	e006      	b.n	8013f4a <__ssprint_r+0x28>
 8013f3c:	f8da 3000 	ldr.w	r3, [sl]
 8013f40:	f8da 7004 	ldr.w	r7, [sl, #4]
 8013f44:	9301      	str	r3, [sp, #4]
 8013f46:	f10a 0a08 	add.w	sl, sl, #8
 8013f4a:	2f00      	cmp	r7, #0
 8013f4c:	d0f6      	beq.n	8013f3c <__ssprint_r+0x1a>
 8013f4e:	68a6      	ldr	r6, [r4, #8]
 8013f50:	42b7      	cmp	r7, r6
 8013f52:	d360      	bcc.n	8014016 <__ssprint_r+0xf4>
 8013f54:	89a0      	ldrh	r0, [r4, #12]
 8013f56:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8013f5a:	d117      	bne.n	8013f8c <__ssprint_r+0x6a>
 8013f5c:	42b7      	cmp	r7, r6
 8013f5e:	d35a      	bcc.n	8014016 <__ssprint_r+0xf4>
 8013f60:	4632      	mov	r2, r6
 8013f62:	9901      	ldr	r1, [sp, #4]
 8013f64:	6820      	ldr	r0, [r4, #0]
 8013f66:	f000 fbeb 	bl	8014740 <memmove>
 8013f6a:	68a2      	ldr	r2, [r4, #8]
 8013f6c:	1b92      	subs	r2, r2, r6
 8013f6e:	60a2      	str	r2, [r4, #8]
 8013f70:	6822      	ldr	r2, [r4, #0]
 8013f72:	4416      	add	r6, r2
 8013f74:	f8db 2008 	ldr.w	r2, [fp, #8]
 8013f78:	6026      	str	r6, [r4, #0]
 8013f7a:	1bd7      	subs	r7, r2, r7
 8013f7c:	f8cb 7008 	str.w	r7, [fp, #8]
 8013f80:	2f00      	cmp	r7, #0
 8013f82:	d1db      	bne.n	8013f3c <__ssprint_r+0x1a>
 8013f84:	2000      	movs	r0, #0
 8013f86:	f8cb 0004 	str.w	r0, [fp, #4]
 8013f8a:	e046      	b.n	801401a <__ssprint_r+0xf8>
 8013f8c:	6825      	ldr	r5, [r4, #0]
 8013f8e:	6921      	ldr	r1, [r4, #16]
 8013f90:	2302      	movs	r3, #2
 8013f92:	ebc1 0805 	rsb	r8, r1, r5
 8013f96:	6965      	ldr	r5, [r4, #20]
 8013f98:	f108 0201 	add.w	r2, r8, #1
 8013f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fa0:	fb95 f5f3 	sdiv	r5, r5, r3
 8013fa4:	443a      	add	r2, r7
 8013fa6:	4295      	cmp	r5, r2
 8013fa8:	bf38      	it	cc
 8013faa:	4615      	movcc	r5, r2
 8013fac:	0543      	lsls	r3, r0, #21
 8013fae:	d510      	bpl.n	8013fd2 <__ssprint_r+0xb0>
 8013fb0:	4629      	mov	r1, r5
 8013fb2:	4648      	mov	r0, r9
 8013fb4:	f7ff faac 	bl	8013510 <_malloc_r>
 8013fb8:	4606      	mov	r6, r0
 8013fba:	b1a0      	cbz	r0, 8013fe6 <__ssprint_r+0xc4>
 8013fbc:	4642      	mov	r2, r8
 8013fbe:	6921      	ldr	r1, [r4, #16]
 8013fc0:	f7ff fa4f 	bl	8013462 <memcpy>
 8013fc4:	89a2      	ldrh	r2, [r4, #12]
 8013fc6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8013fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013fce:	81a2      	strh	r2, [r4, #12]
 8013fd0:	e018      	b.n	8014004 <__ssprint_r+0xe2>
 8013fd2:	462a      	mov	r2, r5
 8013fd4:	4648      	mov	r0, r9
 8013fd6:	f7ff ff25 	bl	8013e24 <_realloc_r>
 8013fda:	4606      	mov	r6, r0
 8013fdc:	b990      	cbnz	r0, 8014004 <__ssprint_r+0xe2>
 8013fde:	6921      	ldr	r1, [r4, #16]
 8013fe0:	4648      	mov	r0, r9
 8013fe2:	f7ff fa51 	bl	8013488 <_free_r>
 8013fe6:	220c      	movs	r2, #12
 8013fe8:	f8c9 2000 	str.w	r2, [r9]
 8013fec:	89a2      	ldrh	r2, [r4, #12]
 8013fee:	f04f 30ff 	mov.w	r0, #4294967295
 8013ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013ff6:	81a2      	strh	r2, [r4, #12]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	f8cb 2008 	str.w	r2, [fp, #8]
 8013ffe:	f8cb 2004 	str.w	r2, [fp, #4]
 8014002:	e00a      	b.n	801401a <__ssprint_r+0xf8>
 8014004:	6126      	str	r6, [r4, #16]
 8014006:	6165      	str	r5, [r4, #20]
 8014008:	4446      	add	r6, r8
 801400a:	ebc8 0505 	rsb	r5, r8, r5
 801400e:	6026      	str	r6, [r4, #0]
 8014010:	60a5      	str	r5, [r4, #8]
 8014012:	463e      	mov	r6, r7
 8014014:	e7a2      	b.n	8013f5c <__ssprint_r+0x3a>
 8014016:	463e      	mov	r6, r7
 8014018:	e7a2      	b.n	8013f60 <__ssprint_r+0x3e>
 801401a:	b003      	add	sp, #12
 801401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014020 <_svfiprintf_r>:
 8014020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014024:	b09d      	sub	sp, #116	; 0x74
 8014026:	9303      	str	r3, [sp, #12]
 8014028:	898b      	ldrh	r3, [r1, #12]
 801402a:	4680      	mov	r8, r0
 801402c:	061c      	lsls	r4, r3, #24
 801402e:	460d      	mov	r5, r1
 8014030:	4616      	mov	r6, r2
 8014032:	d50d      	bpl.n	8014050 <_svfiprintf_r+0x30>
 8014034:	690b      	ldr	r3, [r1, #16]
 8014036:	b95b      	cbnz	r3, 8014050 <_svfiprintf_r+0x30>
 8014038:	2140      	movs	r1, #64	; 0x40
 801403a:	f7ff fa69 	bl	8013510 <_malloc_r>
 801403e:	6028      	str	r0, [r5, #0]
 8014040:	6128      	str	r0, [r5, #16]
 8014042:	b918      	cbnz	r0, 801404c <_svfiprintf_r+0x2c>
 8014044:	230c      	movs	r3, #12
 8014046:	f8c8 3000 	str.w	r3, [r8]
 801404a:	e0cd      	b.n	80141e8 <_svfiprintf_r+0x1c8>
 801404c:	2340      	movs	r3, #64	; 0x40
 801404e:	616b      	str	r3, [r5, #20]
 8014050:	2300      	movs	r3, #0
 8014052:	9309      	str	r3, [sp, #36]	; 0x24
 8014054:	2320      	movs	r3, #32
 8014056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801405a:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80141f8 <_svfiprintf_r+0x1d8>
 801405e:	2330      	movs	r3, #48	; 0x30
 8014060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014064:	4637      	mov	r7, r6
 8014066:	463c      	mov	r4, r7
 8014068:	f814 3b01 	ldrb.w	r3, [r4], #1
 801406c:	b91b      	cbnz	r3, 8014076 <_svfiprintf_r+0x56>
 801406e:	ebb7 0906 	subs.w	r9, r7, r6
 8014072:	d010      	beq.n	8014096 <_svfiprintf_r+0x76>
 8014074:	e003      	b.n	801407e <_svfiprintf_r+0x5e>
 8014076:	2b25      	cmp	r3, #37	; 0x25
 8014078:	d0f9      	beq.n	801406e <_svfiprintf_r+0x4e>
 801407a:	4627      	mov	r7, r4
 801407c:	e7f3      	b.n	8014066 <_svfiprintf_r+0x46>
 801407e:	464b      	mov	r3, r9
 8014080:	4632      	mov	r2, r6
 8014082:	4629      	mov	r1, r5
 8014084:	4640      	mov	r0, r8
 8014086:	f7ff fef3 	bl	8013e70 <__ssputs_r>
 801408a:	3001      	adds	r0, #1
 801408c:	f000 80a7 	beq.w	80141de <_svfiprintf_r+0x1be>
 8014090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014092:	444b      	add	r3, r9
 8014094:	9309      	str	r3, [sp, #36]	; 0x24
 8014096:	783b      	ldrb	r3, [r7, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	f000 80a0 	beq.w	80141de <_svfiprintf_r+0x1be>
 801409e:	2300      	movs	r3, #0
 80140a0:	f04f 32ff 	mov.w	r2, #4294967295
 80140a4:	9304      	str	r3, [sp, #16]
 80140a6:	9307      	str	r3, [sp, #28]
 80140a8:	9205      	str	r2, [sp, #20]
 80140aa:	9306      	str	r3, [sp, #24]
 80140ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140b0:	931a      	str	r3, [sp, #104]	; 0x68
 80140b2:	2601      	movs	r6, #1
 80140b4:	2205      	movs	r2, #5
 80140b6:	7821      	ldrb	r1, [r4, #0]
 80140b8:	484e      	ldr	r0, [pc, #312]	; (80141f4 <_svfiprintf_r+0x1d4>)
 80140ba:	f000 fb33 	bl	8014724 <memchr>
 80140be:	1c67      	adds	r7, r4, #1
 80140c0:	9b04      	ldr	r3, [sp, #16]
 80140c2:	b138      	cbz	r0, 80140d4 <_svfiprintf_r+0xb4>
 80140c4:	4a4b      	ldr	r2, [pc, #300]	; (80141f4 <_svfiprintf_r+0x1d4>)
 80140c6:	463c      	mov	r4, r7
 80140c8:	1a80      	subs	r0, r0, r2
 80140ca:	fa06 f000 	lsl.w	r0, r6, r0
 80140ce:	4318      	orrs	r0, r3
 80140d0:	9004      	str	r0, [sp, #16]
 80140d2:	e7ef      	b.n	80140b4 <_svfiprintf_r+0x94>
 80140d4:	06d9      	lsls	r1, r3, #27
 80140d6:	bf44      	itt	mi
 80140d8:	2220      	movmi	r2, #32
 80140da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140de:	071a      	lsls	r2, r3, #28
 80140e0:	bf44      	itt	mi
 80140e2:	222b      	movmi	r2, #43	; 0x2b
 80140e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140e8:	7822      	ldrb	r2, [r4, #0]
 80140ea:	2a2a      	cmp	r2, #42	; 0x2a
 80140ec:	d003      	beq.n	80140f6 <_svfiprintf_r+0xd6>
 80140ee:	9a07      	ldr	r2, [sp, #28]
 80140f0:	2100      	movs	r1, #0
 80140f2:	200a      	movs	r0, #10
 80140f4:	e00b      	b.n	801410e <_svfiprintf_r+0xee>
 80140f6:	9a03      	ldr	r2, [sp, #12]
 80140f8:	1d11      	adds	r1, r2, #4
 80140fa:	6812      	ldr	r2, [r2, #0]
 80140fc:	9103      	str	r1, [sp, #12]
 80140fe:	2a00      	cmp	r2, #0
 8014100:	da10      	bge.n	8014124 <_svfiprintf_r+0x104>
 8014102:	4252      	negs	r2, r2
 8014104:	f043 0002 	orr.w	r0, r3, #2
 8014108:	9207      	str	r2, [sp, #28]
 801410a:	9004      	str	r0, [sp, #16]
 801410c:	e00b      	b.n	8014126 <_svfiprintf_r+0x106>
 801410e:	4627      	mov	r7, r4
 8014110:	783b      	ldrb	r3, [r7, #0]
 8014112:	3401      	adds	r4, #1
 8014114:	3b30      	subs	r3, #48	; 0x30
 8014116:	2b09      	cmp	r3, #9
 8014118:	d803      	bhi.n	8014122 <_svfiprintf_r+0x102>
 801411a:	fb00 3202 	mla	r2, r0, r2, r3
 801411e:	2101      	movs	r1, #1
 8014120:	e7f5      	b.n	801410e <_svfiprintf_r+0xee>
 8014122:	b101      	cbz	r1, 8014126 <_svfiprintf_r+0x106>
 8014124:	9207      	str	r2, [sp, #28]
 8014126:	783b      	ldrb	r3, [r7, #0]
 8014128:	2b2e      	cmp	r3, #46	; 0x2e
 801412a:	d11e      	bne.n	801416a <_svfiprintf_r+0x14a>
 801412c:	787b      	ldrb	r3, [r7, #1]
 801412e:	2b2a      	cmp	r3, #42	; 0x2a
 8014130:	d10a      	bne.n	8014148 <_svfiprintf_r+0x128>
 8014132:	9b03      	ldr	r3, [sp, #12]
 8014134:	3702      	adds	r7, #2
 8014136:	1d1a      	adds	r2, r3, #4
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	9203      	str	r2, [sp, #12]
 801413c:	2b00      	cmp	r3, #0
 801413e:	bfb8      	it	lt
 8014140:	f04f 33ff 	movlt.w	r3, #4294967295
 8014144:	9305      	str	r3, [sp, #20]
 8014146:	e010      	b.n	801416a <_svfiprintf_r+0x14a>
 8014148:	2300      	movs	r3, #0
 801414a:	4619      	mov	r1, r3
 801414c:	9305      	str	r3, [sp, #20]
 801414e:	1c78      	adds	r0, r7, #1
 8014150:	240a      	movs	r4, #10
 8014152:	4607      	mov	r7, r0
 8014154:	783a      	ldrb	r2, [r7, #0]
 8014156:	3001      	adds	r0, #1
 8014158:	3a30      	subs	r2, #48	; 0x30
 801415a:	2a09      	cmp	r2, #9
 801415c:	d803      	bhi.n	8014166 <_svfiprintf_r+0x146>
 801415e:	fb04 2101 	mla	r1, r4, r1, r2
 8014162:	2301      	movs	r3, #1
 8014164:	e7f5      	b.n	8014152 <_svfiprintf_r+0x132>
 8014166:	b103      	cbz	r3, 801416a <_svfiprintf_r+0x14a>
 8014168:	9105      	str	r1, [sp, #20]
 801416a:	2203      	movs	r2, #3
 801416c:	7839      	ldrb	r1, [r7, #0]
 801416e:	4822      	ldr	r0, [pc, #136]	; (80141f8 <_svfiprintf_r+0x1d8>)
 8014170:	f000 fad8 	bl	8014724 <memchr>
 8014174:	b140      	cbz	r0, 8014188 <_svfiprintf_r+0x168>
 8014176:	2340      	movs	r3, #64	; 0x40
 8014178:	ebcb 0000 	rsb	r0, fp, r0
 801417c:	fa03 f000 	lsl.w	r0, r3, r0
 8014180:	9b04      	ldr	r3, [sp, #16]
 8014182:	3701      	adds	r7, #1
 8014184:	4318      	orrs	r0, r3
 8014186:	9004      	str	r0, [sp, #16]
 8014188:	7839      	ldrb	r1, [r7, #0]
 801418a:	2206      	movs	r2, #6
 801418c:	481b      	ldr	r0, [pc, #108]	; (80141fc <_svfiprintf_r+0x1dc>)
 801418e:	1c7e      	adds	r6, r7, #1
 8014190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014194:	f000 fac6 	bl	8014724 <memchr>
 8014198:	b188      	cbz	r0, 80141be <_svfiprintf_r+0x19e>
 801419a:	4b19      	ldr	r3, [pc, #100]	; (8014200 <_svfiprintf_r+0x1e0>)
 801419c:	b933      	cbnz	r3, 80141ac <_svfiprintf_r+0x18c>
 801419e:	9b03      	ldr	r3, [sp, #12]
 80141a0:	3307      	adds	r3, #7
 80141a2:	f023 0307 	bic.w	r3, r3, #7
 80141a6:	3308      	adds	r3, #8
 80141a8:	9303      	str	r3, [sp, #12]
 80141aa:	e014      	b.n	80141d6 <_svfiprintf_r+0x1b6>
 80141ac:	ab03      	add	r3, sp, #12
 80141ae:	9300      	str	r3, [sp, #0]
 80141b0:	462a      	mov	r2, r5
 80141b2:	4b14      	ldr	r3, [pc, #80]	; (8014204 <_svfiprintf_r+0x1e4>)
 80141b4:	a904      	add	r1, sp, #16
 80141b6:	4640      	mov	r0, r8
 80141b8:	f3af 8000 	nop.w
 80141bc:	e007      	b.n	80141ce <_svfiprintf_r+0x1ae>
 80141be:	ab03      	add	r3, sp, #12
 80141c0:	9300      	str	r3, [sp, #0]
 80141c2:	462a      	mov	r2, r5
 80141c4:	4b0f      	ldr	r3, [pc, #60]	; (8014204 <_svfiprintf_r+0x1e4>)
 80141c6:	a904      	add	r1, sp, #16
 80141c8:	4640      	mov	r0, r8
 80141ca:	f000 f893 	bl	80142f4 <_printf_i>
 80141ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80141d2:	4682      	mov	sl, r0
 80141d4:	d003      	beq.n	80141de <_svfiprintf_r+0x1be>
 80141d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141d8:	4453      	add	r3, sl
 80141da:	9309      	str	r3, [sp, #36]	; 0x24
 80141dc:	e742      	b.n	8014064 <_svfiprintf_r+0x44>
 80141de:	89ab      	ldrh	r3, [r5, #12]
 80141e0:	065b      	lsls	r3, r3, #25
 80141e2:	d401      	bmi.n	80141e8 <_svfiprintf_r+0x1c8>
 80141e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141e6:	e001      	b.n	80141ec <_svfiprintf_r+0x1cc>
 80141e8:	f04f 30ff 	mov.w	r0, #4294967295
 80141ec:	b01d      	add	sp, #116	; 0x74
 80141ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141f2:	bf00      	nop
 80141f4:	080169a0 	.word	0x080169a0
 80141f8:	080169a6 	.word	0x080169a6
 80141fc:	080169aa 	.word	0x080169aa
 8014200:	00000000 	.word	0x00000000
 8014204:	08013e71 	.word	0x08013e71

08014208 <_printf_common>:
 8014208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801420c:	4691      	mov	r9, r2
 801420e:	461f      	mov	r7, r3
 8014210:	690a      	ldr	r2, [r1, #16]
 8014212:	688b      	ldr	r3, [r1, #8]
 8014214:	4606      	mov	r6, r0
 8014216:	4293      	cmp	r3, r2
 8014218:	bfb8      	it	lt
 801421a:	4613      	movlt	r3, r2
 801421c:	f8c9 3000 	str.w	r3, [r9]
 8014220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014224:	460c      	mov	r4, r1
 8014226:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801422a:	b112      	cbz	r2, 8014232 <_printf_common+0x2a>
 801422c:	3301      	adds	r3, #1
 801422e:	f8c9 3000 	str.w	r3, [r9]
 8014232:	6823      	ldr	r3, [r4, #0]
 8014234:	0699      	lsls	r1, r3, #26
 8014236:	bf42      	ittt	mi
 8014238:	f8d9 3000 	ldrmi.w	r3, [r9]
 801423c:	3302      	addmi	r3, #2
 801423e:	f8c9 3000 	strmi.w	r3, [r9]
 8014242:	6825      	ldr	r5, [r4, #0]
 8014244:	f015 0506 	ands.w	r5, r5, #6
 8014248:	d110      	bne.n	801426c <_printf_common+0x64>
 801424a:	f104 0a19 	add.w	sl, r4, #25
 801424e:	e007      	b.n	8014260 <_printf_common+0x58>
 8014250:	2301      	movs	r3, #1
 8014252:	4652      	mov	r2, sl
 8014254:	4639      	mov	r1, r7
 8014256:	4630      	mov	r0, r6
 8014258:	47c0      	blx	r8
 801425a:	3001      	adds	r0, #1
 801425c:	d01a      	beq.n	8014294 <_printf_common+0x8c>
 801425e:	3501      	adds	r5, #1
 8014260:	68e3      	ldr	r3, [r4, #12]
 8014262:	f8d9 2000 	ldr.w	r2, [r9]
 8014266:	1a9b      	subs	r3, r3, r2
 8014268:	429d      	cmp	r5, r3
 801426a:	dbf1      	blt.n	8014250 <_printf_common+0x48>
 801426c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014270:	6822      	ldr	r2, [r4, #0]
 8014272:	3300      	adds	r3, #0
 8014274:	bf18      	it	ne
 8014276:	2301      	movne	r3, #1
 8014278:	0692      	lsls	r2, r2, #26
 801427a:	d50f      	bpl.n	801429c <_printf_common+0x94>
 801427c:	18e1      	adds	r1, r4, r3
 801427e:	2030      	movs	r0, #48	; 0x30
 8014280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014284:	1c5a      	adds	r2, r3, #1
 8014286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801428a:	4422      	add	r2, r4
 801428c:	3302      	adds	r3, #2
 801428e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014292:	e003      	b.n	801429c <_printf_common+0x94>
 8014294:	f04f 30ff 	mov.w	r0, #4294967295
 8014298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801429c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80142a0:	4639      	mov	r1, r7
 80142a2:	4630      	mov	r0, r6
 80142a4:	47c0      	blx	r8
 80142a6:	3001      	adds	r0, #1
 80142a8:	d0f4      	beq.n	8014294 <_printf_common+0x8c>
 80142aa:	6822      	ldr	r2, [r4, #0]
 80142ac:	f8d9 5000 	ldr.w	r5, [r9]
 80142b0:	68e3      	ldr	r3, [r4, #12]
 80142b2:	f002 0206 	and.w	r2, r2, #6
 80142b6:	2a04      	cmp	r2, #4
 80142b8:	bf08      	it	eq
 80142ba:	1b5d      	subeq	r5, r3, r5
 80142bc:	6922      	ldr	r2, [r4, #16]
 80142be:	68a3      	ldr	r3, [r4, #8]
 80142c0:	bf0c      	ite	eq
 80142c2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80142c6:	2500      	movne	r5, #0
 80142c8:	4293      	cmp	r3, r2
 80142ca:	bfc4      	itt	gt
 80142cc:	1a9b      	subgt	r3, r3, r2
 80142ce:	18ed      	addgt	r5, r5, r3
 80142d0:	f04f 0900 	mov.w	r9, #0
 80142d4:	341a      	adds	r4, #26
 80142d6:	454d      	cmp	r5, r9
 80142d8:	d009      	beq.n	80142ee <_printf_common+0xe6>
 80142da:	2301      	movs	r3, #1
 80142dc:	4622      	mov	r2, r4
 80142de:	4639      	mov	r1, r7
 80142e0:	4630      	mov	r0, r6
 80142e2:	47c0      	blx	r8
 80142e4:	3001      	adds	r0, #1
 80142e6:	d0d5      	beq.n	8014294 <_printf_common+0x8c>
 80142e8:	f109 0901 	add.w	r9, r9, #1
 80142ec:	e7f3      	b.n	80142d6 <_printf_common+0xce>
 80142ee:	2000      	movs	r0, #0
 80142f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080142f4 <_printf_i>:
 80142f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142f8:	4617      	mov	r7, r2
 80142fa:	7e0a      	ldrb	r2, [r1, #24]
 80142fc:	b085      	sub	sp, #20
 80142fe:	2a6e      	cmp	r2, #110	; 0x6e
 8014300:	4698      	mov	r8, r3
 8014302:	4606      	mov	r6, r0
 8014304:	460c      	mov	r4, r1
 8014306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014308:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 801430c:	f000 80ae 	beq.w	801446c <_printf_i+0x178>
 8014310:	d811      	bhi.n	8014336 <_printf_i+0x42>
 8014312:	2a63      	cmp	r2, #99	; 0x63
 8014314:	d022      	beq.n	801435c <_printf_i+0x68>
 8014316:	d809      	bhi.n	801432c <_printf_i+0x38>
 8014318:	2a00      	cmp	r2, #0
 801431a:	f000 80bb 	beq.w	8014494 <_printf_i+0x1a0>
 801431e:	2a58      	cmp	r2, #88	; 0x58
 8014320:	f040 80ca 	bne.w	80144b8 <_printf_i+0x1c4>
 8014324:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014328:	4983      	ldr	r1, [pc, #524]	; (8014538 <_printf_i+0x244>)
 801432a:	e055      	b.n	80143d8 <_printf_i+0xe4>
 801432c:	2a64      	cmp	r2, #100	; 0x64
 801432e:	d01e      	beq.n	801436e <_printf_i+0x7a>
 8014330:	2a69      	cmp	r2, #105	; 0x69
 8014332:	d01c      	beq.n	801436e <_printf_i+0x7a>
 8014334:	e0c0      	b.n	80144b8 <_printf_i+0x1c4>
 8014336:	2a73      	cmp	r2, #115	; 0x73
 8014338:	f000 80b0 	beq.w	801449c <_printf_i+0x1a8>
 801433c:	d809      	bhi.n	8014352 <_printf_i+0x5e>
 801433e:	2a6f      	cmp	r2, #111	; 0x6f
 8014340:	d02e      	beq.n	80143a0 <_printf_i+0xac>
 8014342:	2a70      	cmp	r2, #112	; 0x70
 8014344:	f040 80b8 	bne.w	80144b8 <_printf_i+0x1c4>
 8014348:	680a      	ldr	r2, [r1, #0]
 801434a:	f042 0220 	orr.w	r2, r2, #32
 801434e:	600a      	str	r2, [r1, #0]
 8014350:	e03e      	b.n	80143d0 <_printf_i+0xdc>
 8014352:	2a75      	cmp	r2, #117	; 0x75
 8014354:	d024      	beq.n	80143a0 <_printf_i+0xac>
 8014356:	2a78      	cmp	r2, #120	; 0x78
 8014358:	d03a      	beq.n	80143d0 <_printf_i+0xdc>
 801435a:	e0ad      	b.n	80144b8 <_printf_i+0x1c4>
 801435c:	681a      	ldr	r2, [r3, #0]
 801435e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8014362:	1d11      	adds	r1, r2, #4
 8014364:	6019      	str	r1, [r3, #0]
 8014366:	6813      	ldr	r3, [r2, #0]
 8014368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801436c:	e0a8      	b.n	80144c0 <_printf_i+0x1cc>
 801436e:	6821      	ldr	r1, [r4, #0]
 8014370:	681a      	ldr	r2, [r3, #0]
 8014372:	f011 0f80 	tst.w	r1, #128	; 0x80
 8014376:	d002      	beq.n	801437e <_printf_i+0x8a>
 8014378:	1d11      	adds	r1, r2, #4
 801437a:	6019      	str	r1, [r3, #0]
 801437c:	e008      	b.n	8014390 <_printf_i+0x9c>
 801437e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014382:	f102 0104 	add.w	r1, r2, #4
 8014386:	6019      	str	r1, [r3, #0]
 8014388:	d002      	beq.n	8014390 <_printf_i+0x9c>
 801438a:	f9b2 3000 	ldrsh.w	r3, [r2]
 801438e:	e000      	b.n	8014392 <_printf_i+0x9e>
 8014390:	6813      	ldr	r3, [r2, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	da3c      	bge.n	8014410 <_printf_i+0x11c>
 8014396:	222d      	movs	r2, #45	; 0x2d
 8014398:	425b      	negs	r3, r3
 801439a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801439e:	e037      	b.n	8014410 <_printf_i+0x11c>
 80143a0:	6821      	ldr	r1, [r4, #0]
 80143a2:	681a      	ldr	r2, [r3, #0]
 80143a4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80143a8:	d002      	beq.n	80143b0 <_printf_i+0xbc>
 80143aa:	1d11      	adds	r1, r2, #4
 80143ac:	6019      	str	r1, [r3, #0]
 80143ae:	e007      	b.n	80143c0 <_printf_i+0xcc>
 80143b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80143b4:	f102 0104 	add.w	r1, r2, #4
 80143b8:	6019      	str	r1, [r3, #0]
 80143ba:	d001      	beq.n	80143c0 <_printf_i+0xcc>
 80143bc:	8813      	ldrh	r3, [r2, #0]
 80143be:	e000      	b.n	80143c2 <_printf_i+0xce>
 80143c0:	6813      	ldr	r3, [r2, #0]
 80143c2:	7e22      	ldrb	r2, [r4, #24]
 80143c4:	495c      	ldr	r1, [pc, #368]	; (8014538 <_printf_i+0x244>)
 80143c6:	2a6f      	cmp	r2, #111	; 0x6f
 80143c8:	bf14      	ite	ne
 80143ca:	220a      	movne	r2, #10
 80143cc:	2208      	moveq	r2, #8
 80143ce:	e01b      	b.n	8014408 <_printf_i+0x114>
 80143d0:	2278      	movs	r2, #120	; 0x78
 80143d2:	495a      	ldr	r1, [pc, #360]	; (801453c <_printf_i+0x248>)
 80143d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80143d8:	6822      	ldr	r2, [r4, #0]
 80143da:	6818      	ldr	r0, [r3, #0]
 80143dc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80143e0:	f100 0504 	add.w	r5, r0, #4
 80143e4:	601d      	str	r5, [r3, #0]
 80143e6:	d103      	bne.n	80143f0 <_printf_i+0xfc>
 80143e8:	0655      	lsls	r5, r2, #25
 80143ea:	d501      	bpl.n	80143f0 <_printf_i+0xfc>
 80143ec:	8803      	ldrh	r3, [r0, #0]
 80143ee:	e000      	b.n	80143f2 <_printf_i+0xfe>
 80143f0:	6803      	ldr	r3, [r0, #0]
 80143f2:	07d0      	lsls	r0, r2, #31
 80143f4:	bf44      	itt	mi
 80143f6:	f042 0220 	orrmi.w	r2, r2, #32
 80143fa:	6022      	strmi	r2, [r4, #0]
 80143fc:	b91b      	cbnz	r3, 8014406 <_printf_i+0x112>
 80143fe:	6822      	ldr	r2, [r4, #0]
 8014400:	f022 0220 	bic.w	r2, r2, #32
 8014404:	6022      	str	r2, [r4, #0]
 8014406:	2210      	movs	r2, #16
 8014408:	2000      	movs	r0, #0
 801440a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801440e:	e001      	b.n	8014414 <_printf_i+0x120>
 8014410:	4949      	ldr	r1, [pc, #292]	; (8014538 <_printf_i+0x244>)
 8014412:	220a      	movs	r2, #10
 8014414:	6865      	ldr	r5, [r4, #4]
 8014416:	2d00      	cmp	r5, #0
 8014418:	60a5      	str	r5, [r4, #8]
 801441a:	db08      	blt.n	801442e <_printf_i+0x13a>
 801441c:	6820      	ldr	r0, [r4, #0]
 801441e:	f020 0004 	bic.w	r0, r0, #4
 8014422:	6020      	str	r0, [r4, #0]
 8014424:	b92b      	cbnz	r3, 8014432 <_printf_i+0x13e>
 8014426:	2d00      	cmp	r5, #0
 8014428:	d17d      	bne.n	8014526 <_printf_i+0x232>
 801442a:	4675      	mov	r5, lr
 801442c:	e00c      	b.n	8014448 <_printf_i+0x154>
 801442e:	2b00      	cmp	r3, #0
 8014430:	d079      	beq.n	8014526 <_printf_i+0x232>
 8014432:	4675      	mov	r5, lr
 8014434:	fbb3 f0f2 	udiv	r0, r3, r2
 8014438:	fb02 3310 	mls	r3, r2, r0, r3
 801443c:	5ccb      	ldrb	r3, [r1, r3]
 801443e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014442:	4603      	mov	r3, r0
 8014444:	2800      	cmp	r0, #0
 8014446:	d1f5      	bne.n	8014434 <_printf_i+0x140>
 8014448:	2a08      	cmp	r2, #8
 801444a:	d10b      	bne.n	8014464 <_printf_i+0x170>
 801444c:	6823      	ldr	r3, [r4, #0]
 801444e:	07da      	lsls	r2, r3, #31
 8014450:	d508      	bpl.n	8014464 <_printf_i+0x170>
 8014452:	6923      	ldr	r3, [r4, #16]
 8014454:	6862      	ldr	r2, [r4, #4]
 8014456:	429a      	cmp	r2, r3
 8014458:	bfde      	ittt	le
 801445a:	2330      	movle	r3, #48	; 0x30
 801445c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014460:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014464:	ebc5 030e 	rsb	r3, r5, lr
 8014468:	6123      	str	r3, [r4, #16]
 801446a:	e02e      	b.n	80144ca <_printf_i+0x1d6>
 801446c:	6808      	ldr	r0, [r1, #0]
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014474:	6949      	ldr	r1, [r1, #20]
 8014476:	d003      	beq.n	8014480 <_printf_i+0x18c>
 8014478:	1d10      	adds	r0, r2, #4
 801447a:	6018      	str	r0, [r3, #0]
 801447c:	6813      	ldr	r3, [r2, #0]
 801447e:	e008      	b.n	8014492 <_printf_i+0x19e>
 8014480:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014484:	f102 0004 	add.w	r0, r2, #4
 8014488:	6018      	str	r0, [r3, #0]
 801448a:	6813      	ldr	r3, [r2, #0]
 801448c:	d001      	beq.n	8014492 <_printf_i+0x19e>
 801448e:	8019      	strh	r1, [r3, #0]
 8014490:	e000      	b.n	8014494 <_printf_i+0x1a0>
 8014492:	6019      	str	r1, [r3, #0]
 8014494:	2300      	movs	r3, #0
 8014496:	6123      	str	r3, [r4, #16]
 8014498:	4675      	mov	r5, lr
 801449a:	e016      	b.n	80144ca <_printf_i+0x1d6>
 801449c:	681a      	ldr	r2, [r3, #0]
 801449e:	1d11      	adds	r1, r2, #4
 80144a0:	6019      	str	r1, [r3, #0]
 80144a2:	6815      	ldr	r5, [r2, #0]
 80144a4:	2100      	movs	r1, #0
 80144a6:	6862      	ldr	r2, [r4, #4]
 80144a8:	4628      	mov	r0, r5
 80144aa:	f000 f93b 	bl	8014724 <memchr>
 80144ae:	b108      	cbz	r0, 80144b4 <_printf_i+0x1c0>
 80144b0:	1b40      	subs	r0, r0, r5
 80144b2:	6060      	str	r0, [r4, #4]
 80144b4:	6863      	ldr	r3, [r4, #4]
 80144b6:	e004      	b.n	80144c2 <_printf_i+0x1ce>
 80144b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80144c0:	2301      	movs	r3, #1
 80144c2:	6123      	str	r3, [r4, #16]
 80144c4:	2300      	movs	r3, #0
 80144c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144ca:	f8cd 8000 	str.w	r8, [sp]
 80144ce:	463b      	mov	r3, r7
 80144d0:	aa03      	add	r2, sp, #12
 80144d2:	4621      	mov	r1, r4
 80144d4:	4630      	mov	r0, r6
 80144d6:	f7ff fe97 	bl	8014208 <_printf_common>
 80144da:	3001      	adds	r0, #1
 80144dc:	d102      	bne.n	80144e4 <_printf_i+0x1f0>
 80144de:	f04f 30ff 	mov.w	r0, #4294967295
 80144e2:	e026      	b.n	8014532 <_printf_i+0x23e>
 80144e4:	6923      	ldr	r3, [r4, #16]
 80144e6:	462a      	mov	r2, r5
 80144e8:	4639      	mov	r1, r7
 80144ea:	4630      	mov	r0, r6
 80144ec:	47c0      	blx	r8
 80144ee:	3001      	adds	r0, #1
 80144f0:	d0f5      	beq.n	80144de <_printf_i+0x1ea>
 80144f2:	6823      	ldr	r3, [r4, #0]
 80144f4:	079b      	lsls	r3, r3, #30
 80144f6:	d510      	bpl.n	801451a <_printf_i+0x226>
 80144f8:	2500      	movs	r5, #0
 80144fa:	f104 0919 	add.w	r9, r4, #25
 80144fe:	e007      	b.n	8014510 <_printf_i+0x21c>
 8014500:	2301      	movs	r3, #1
 8014502:	464a      	mov	r2, r9
 8014504:	4639      	mov	r1, r7
 8014506:	4630      	mov	r0, r6
 8014508:	47c0      	blx	r8
 801450a:	3001      	adds	r0, #1
 801450c:	d0e7      	beq.n	80144de <_printf_i+0x1ea>
 801450e:	3501      	adds	r5, #1
 8014510:	68e3      	ldr	r3, [r4, #12]
 8014512:	9a03      	ldr	r2, [sp, #12]
 8014514:	1a9b      	subs	r3, r3, r2
 8014516:	429d      	cmp	r5, r3
 8014518:	dbf2      	blt.n	8014500 <_printf_i+0x20c>
 801451a:	68e0      	ldr	r0, [r4, #12]
 801451c:	9b03      	ldr	r3, [sp, #12]
 801451e:	4298      	cmp	r0, r3
 8014520:	bfb8      	it	lt
 8014522:	4618      	movlt	r0, r3
 8014524:	e005      	b.n	8014532 <_printf_i+0x23e>
 8014526:	780b      	ldrb	r3, [r1, #0]
 8014528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801452c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014530:	e78a      	b.n	8014448 <_printf_i+0x154>
 8014532:	b005      	add	sp, #20
 8014534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014538:	080169b1 	.word	0x080169b1
 801453c:	080169c2 	.word	0x080169c2

08014540 <cleanup_glue>:
 8014540:	b538      	push	{r3, r4, r5, lr}
 8014542:	460c      	mov	r4, r1
 8014544:	6809      	ldr	r1, [r1, #0]
 8014546:	4605      	mov	r5, r0
 8014548:	b109      	cbz	r1, 801454e <cleanup_glue+0xe>
 801454a:	f7ff fff9 	bl	8014540 <cleanup_glue>
 801454e:	4621      	mov	r1, r4
 8014550:	4628      	mov	r0, r5
 8014552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014556:	f7fe bf97 	b.w	8013488 <_free_r>
	...

0801455c <_reclaim_reent>:
 801455c:	4b2b      	ldr	r3, [pc, #172]	; (801460c <_reclaim_reent+0xb0>)
 801455e:	b570      	push	{r4, r5, r6, lr}
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	4604      	mov	r4, r0
 8014564:	4283      	cmp	r3, r0
 8014566:	d050      	beq.n	801460a <_reclaim_reent+0xae>
 8014568:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801456a:	b1d3      	cbz	r3, 80145a2 <_reclaim_reent+0x46>
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	b193      	cbz	r3, 8014596 <_reclaim_reent+0x3a>
 8014570:	2500      	movs	r5, #0
 8014572:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014574:	68db      	ldr	r3, [r3, #12]
 8014576:	5959      	ldr	r1, [r3, r5]
 8014578:	b129      	cbz	r1, 8014586 <_reclaim_reent+0x2a>
 801457a:	680e      	ldr	r6, [r1, #0]
 801457c:	4620      	mov	r0, r4
 801457e:	f7fe ff83 	bl	8013488 <_free_r>
 8014582:	4631      	mov	r1, r6
 8014584:	e7f8      	b.n	8014578 <_reclaim_reent+0x1c>
 8014586:	3504      	adds	r5, #4
 8014588:	2d80      	cmp	r5, #128	; 0x80
 801458a:	d1f2      	bne.n	8014572 <_reclaim_reent+0x16>
 801458c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801458e:	4620      	mov	r0, r4
 8014590:	68d9      	ldr	r1, [r3, #12]
 8014592:	f7fe ff79 	bl	8013488 <_free_r>
 8014596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014598:	6819      	ldr	r1, [r3, #0]
 801459a:	b111      	cbz	r1, 80145a2 <_reclaim_reent+0x46>
 801459c:	4620      	mov	r0, r4
 801459e:	f7fe ff73 	bl	8013488 <_free_r>
 80145a2:	6961      	ldr	r1, [r4, #20]
 80145a4:	b111      	cbz	r1, 80145ac <_reclaim_reent+0x50>
 80145a6:	4620      	mov	r0, r4
 80145a8:	f7fe ff6e 	bl	8013488 <_free_r>
 80145ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80145ae:	b111      	cbz	r1, 80145b6 <_reclaim_reent+0x5a>
 80145b0:	4620      	mov	r0, r4
 80145b2:	f7fe ff69 	bl	8013488 <_free_r>
 80145b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80145b8:	b111      	cbz	r1, 80145c0 <_reclaim_reent+0x64>
 80145ba:	4620      	mov	r0, r4
 80145bc:	f7fe ff64 	bl	8013488 <_free_r>
 80145c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80145c2:	b111      	cbz	r1, 80145ca <_reclaim_reent+0x6e>
 80145c4:	4620      	mov	r0, r4
 80145c6:	f7fe ff5f 	bl	8013488 <_free_r>
 80145ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80145cc:	b111      	cbz	r1, 80145d4 <_reclaim_reent+0x78>
 80145ce:	4620      	mov	r0, r4
 80145d0:	f7fe ff5a 	bl	8013488 <_free_r>
 80145d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80145d6:	b111      	cbz	r1, 80145de <_reclaim_reent+0x82>
 80145d8:	4620      	mov	r0, r4
 80145da:	f7fe ff55 	bl	8013488 <_free_r>
 80145de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80145e0:	b111      	cbz	r1, 80145e8 <_reclaim_reent+0x8c>
 80145e2:	4620      	mov	r0, r4
 80145e4:	f7fe ff50 	bl	8013488 <_free_r>
 80145e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80145ea:	b111      	cbz	r1, 80145f2 <_reclaim_reent+0x96>
 80145ec:	4620      	mov	r0, r4
 80145ee:	f7fe ff4b 	bl	8013488 <_free_r>
 80145f2:	69a3      	ldr	r3, [r4, #24]
 80145f4:	b14b      	cbz	r3, 801460a <_reclaim_reent+0xae>
 80145f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80145f8:	4620      	mov	r0, r4
 80145fa:	4798      	blx	r3
 80145fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80145fe:	b121      	cbz	r1, 801460a <_reclaim_reent+0xae>
 8014600:	4620      	mov	r0, r4
 8014602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014606:	f7ff bf9b 	b.w	8014540 <cleanup_glue>
 801460a:	bd70      	pop	{r4, r5, r6, pc}
 801460c:	20000098 	.word	0x20000098

08014610 <__sread>:
 8014610:	b510      	push	{r4, lr}
 8014612:	460c      	mov	r4, r1
 8014614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014618:	f000 f8b8 	bl	801478c <_read_r>
 801461c:	2800      	cmp	r0, #0
 801461e:	bfab      	itete	ge
 8014620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014622:	89a3      	ldrhlt	r3, [r4, #12]
 8014624:	181b      	addge	r3, r3, r0
 8014626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801462a:	bfac      	ite	ge
 801462c:	6563      	strge	r3, [r4, #84]	; 0x54
 801462e:	81a3      	strhlt	r3, [r4, #12]
 8014630:	bd10      	pop	{r4, pc}

08014632 <__seofread>:
 8014632:	2000      	movs	r0, #0
 8014634:	4770      	bx	lr

08014636 <__swrite>:
 8014636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801463a:	461f      	mov	r7, r3
 801463c:	898b      	ldrh	r3, [r1, #12]
 801463e:	4605      	mov	r5, r0
 8014640:	05db      	lsls	r3, r3, #23
 8014642:	460c      	mov	r4, r1
 8014644:	4616      	mov	r6, r2
 8014646:	d505      	bpl.n	8014654 <__swrite+0x1e>
 8014648:	2302      	movs	r3, #2
 801464a:	2200      	movs	r2, #0
 801464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014650:	f000 f856 	bl	8014700 <_lseek_r>
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	4632      	mov	r2, r6
 8014658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801465c:	81a3      	strh	r3, [r4, #12]
 801465e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014662:	463b      	mov	r3, r7
 8014664:	4628      	mov	r0, r5
 8014666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801466a:	f7ff b947 	b.w	80138fc <_write_r>

0801466e <__sseek>:
 801466e:	b510      	push	{r4, lr}
 8014670:	460c      	mov	r4, r1
 8014672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014676:	f000 f843 	bl	8014700 <_lseek_r>
 801467a:	1c43      	adds	r3, r0, #1
 801467c:	89a3      	ldrh	r3, [r4, #12]
 801467e:	bf15      	itete	ne
 8014680:	6560      	strne	r0, [r4, #84]	; 0x54
 8014682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801468a:	81a3      	strheq	r3, [r4, #12]
 801468c:	bf18      	it	ne
 801468e:	81a3      	strhne	r3, [r4, #12]
 8014690:	bd10      	pop	{r4, pc}

08014692 <__sclose>:
 8014692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014696:	f000 b801 	b.w	801469c <_close_r>
	...

0801469c <_close_r>:
 801469c:	b538      	push	{r3, r4, r5, lr}
 801469e:	4c06      	ldr	r4, [pc, #24]	; (80146b8 <_close_r+0x1c>)
 80146a0:	2300      	movs	r3, #0
 80146a2:	4605      	mov	r5, r0
 80146a4:	4608      	mov	r0, r1
 80146a6:	6023      	str	r3, [r4, #0]
 80146a8:	f000 f882 	bl	80147b0 <_close>
 80146ac:	1c43      	adds	r3, r0, #1
 80146ae:	d102      	bne.n	80146b6 <_close_r+0x1a>
 80146b0:	6823      	ldr	r3, [r4, #0]
 80146b2:	b103      	cbz	r3, 80146b6 <_close_r+0x1a>
 80146b4:	602b      	str	r3, [r5, #0]
 80146b6:	bd38      	pop	{r3, r4, r5, pc}
 80146b8:	20000d24 	.word	0x20000d24

080146bc <_fstat_r>:
 80146bc:	b538      	push	{r3, r4, r5, lr}
 80146be:	4c07      	ldr	r4, [pc, #28]	; (80146dc <_fstat_r+0x20>)
 80146c0:	2300      	movs	r3, #0
 80146c2:	4605      	mov	r5, r0
 80146c4:	4608      	mov	r0, r1
 80146c6:	4611      	mov	r1, r2
 80146c8:	6023      	str	r3, [r4, #0]
 80146ca:	f000 f879 	bl	80147c0 <_fstat>
 80146ce:	1c43      	adds	r3, r0, #1
 80146d0:	d102      	bne.n	80146d8 <_fstat_r+0x1c>
 80146d2:	6823      	ldr	r3, [r4, #0]
 80146d4:	b103      	cbz	r3, 80146d8 <_fstat_r+0x1c>
 80146d6:	602b      	str	r3, [r5, #0]
 80146d8:	bd38      	pop	{r3, r4, r5, pc}
 80146da:	bf00      	nop
 80146dc:	20000d24 	.word	0x20000d24

080146e0 <_isatty_r>:
 80146e0:	b538      	push	{r3, r4, r5, lr}
 80146e2:	4c06      	ldr	r4, [pc, #24]	; (80146fc <_isatty_r+0x1c>)
 80146e4:	2300      	movs	r3, #0
 80146e6:	4605      	mov	r5, r0
 80146e8:	4608      	mov	r0, r1
 80146ea:	6023      	str	r3, [r4, #0]
 80146ec:	f000 f878 	bl	80147e0 <_isatty>
 80146f0:	1c43      	adds	r3, r0, #1
 80146f2:	d102      	bne.n	80146fa <_isatty_r+0x1a>
 80146f4:	6823      	ldr	r3, [r4, #0]
 80146f6:	b103      	cbz	r3, 80146fa <_isatty_r+0x1a>
 80146f8:	602b      	str	r3, [r5, #0]
 80146fa:	bd38      	pop	{r3, r4, r5, pc}
 80146fc:	20000d24 	.word	0x20000d24

08014700 <_lseek_r>:
 8014700:	b538      	push	{r3, r4, r5, lr}
 8014702:	4c07      	ldr	r4, [pc, #28]	; (8014720 <_lseek_r+0x20>)
 8014704:	4605      	mov	r5, r0
 8014706:	4608      	mov	r0, r1
 8014708:	4611      	mov	r1, r2
 801470a:	2200      	movs	r2, #0
 801470c:	6022      	str	r2, [r4, #0]
 801470e:	461a      	mov	r2, r3
 8014710:	f000 f876 	bl	8014800 <_lseek>
 8014714:	1c43      	adds	r3, r0, #1
 8014716:	d102      	bne.n	801471e <_lseek_r+0x1e>
 8014718:	6823      	ldr	r3, [r4, #0]
 801471a:	b103      	cbz	r3, 801471e <_lseek_r+0x1e>
 801471c:	602b      	str	r3, [r5, #0]
 801471e:	bd38      	pop	{r3, r4, r5, pc}
 8014720:	20000d24 	.word	0x20000d24

08014724 <memchr>:
 8014724:	b510      	push	{r4, lr}
 8014726:	b2c9      	uxtb	r1, r1
 8014728:	4402      	add	r2, r0
 801472a:	4290      	cmp	r0, r2
 801472c:	4603      	mov	r3, r0
 801472e:	d005      	beq.n	801473c <memchr+0x18>
 8014730:	781c      	ldrb	r4, [r3, #0]
 8014732:	3001      	adds	r0, #1
 8014734:	428c      	cmp	r4, r1
 8014736:	d1f8      	bne.n	801472a <memchr+0x6>
 8014738:	4618      	mov	r0, r3
 801473a:	bd10      	pop	{r4, pc}
 801473c:	2000      	movs	r0, #0
 801473e:	bd10      	pop	{r4, pc}

08014740 <memmove>:
 8014740:	4288      	cmp	r0, r1
 8014742:	b510      	push	{r4, lr}
 8014744:	eb01 0302 	add.w	r3, r1, r2
 8014748:	d801      	bhi.n	801474e <memmove+0xe>
 801474a:	1e42      	subs	r2, r0, #1
 801474c:	e00b      	b.n	8014766 <memmove+0x26>
 801474e:	4298      	cmp	r0, r3
 8014750:	d2fb      	bcs.n	801474a <memmove+0xa>
 8014752:	1881      	adds	r1, r0, r2
 8014754:	1ad2      	subs	r2, r2, r3
 8014756:	42d3      	cmn	r3, r2
 8014758:	d004      	beq.n	8014764 <memmove+0x24>
 801475a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801475e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014762:	e7f8      	b.n	8014756 <memmove+0x16>
 8014764:	bd10      	pop	{r4, pc}
 8014766:	4299      	cmp	r1, r3
 8014768:	d004      	beq.n	8014774 <memmove+0x34>
 801476a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801476e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014772:	e7f8      	b.n	8014766 <memmove+0x26>
 8014774:	bd10      	pop	{r4, pc}

08014776 <_malloc_usable_size_r>:
 8014776:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801477a:	2800      	cmp	r0, #0
 801477c:	bfbe      	ittt	lt
 801477e:	1809      	addlt	r1, r1, r0
 8014780:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8014784:	18c0      	addlt	r0, r0, r3
 8014786:	3804      	subs	r0, #4
 8014788:	4770      	bx	lr
	...

0801478c <_read_r>:
 801478c:	b538      	push	{r3, r4, r5, lr}
 801478e:	4c07      	ldr	r4, [pc, #28]	; (80147ac <_read_r+0x20>)
 8014790:	4605      	mov	r5, r0
 8014792:	4608      	mov	r0, r1
 8014794:	4611      	mov	r1, r2
 8014796:	2200      	movs	r2, #0
 8014798:	6022      	str	r2, [r4, #0]
 801479a:	461a      	mov	r2, r3
 801479c:	f000 f838 	bl	8014810 <_read>
 80147a0:	1c43      	adds	r3, r0, #1
 80147a2:	d102      	bne.n	80147aa <_read_r+0x1e>
 80147a4:	6823      	ldr	r3, [r4, #0]
 80147a6:	b103      	cbz	r3, 80147aa <_read_r+0x1e>
 80147a8:	602b      	str	r3, [r5, #0]
 80147aa:	bd38      	pop	{r3, r4, r5, pc}
 80147ac:	20000d24 	.word	0x20000d24

080147b0 <_close>:
 80147b0:	4b02      	ldr	r3, [pc, #8]	; (80147bc <_close+0xc>)
 80147b2:	2258      	movs	r2, #88	; 0x58
 80147b4:	601a      	str	r2, [r3, #0]
 80147b6:	f04f 30ff 	mov.w	r0, #4294967295
 80147ba:	4770      	bx	lr
 80147bc:	20000d24 	.word	0x20000d24

080147c0 <_fstat>:
 80147c0:	4b02      	ldr	r3, [pc, #8]	; (80147cc <_fstat+0xc>)
 80147c2:	2258      	movs	r2, #88	; 0x58
 80147c4:	601a      	str	r2, [r3, #0]
 80147c6:	f04f 30ff 	mov.w	r0, #4294967295
 80147ca:	4770      	bx	lr
 80147cc:	20000d24 	.word	0x20000d24

080147d0 <_getpid>:
 80147d0:	4b02      	ldr	r3, [pc, #8]	; (80147dc <_getpid+0xc>)
 80147d2:	2258      	movs	r2, #88	; 0x58
 80147d4:	601a      	str	r2, [r3, #0]
 80147d6:	f04f 30ff 	mov.w	r0, #4294967295
 80147da:	4770      	bx	lr
 80147dc:	20000d24 	.word	0x20000d24

080147e0 <_isatty>:
 80147e0:	4b02      	ldr	r3, [pc, #8]	; (80147ec <_isatty+0xc>)
 80147e2:	2258      	movs	r2, #88	; 0x58
 80147e4:	601a      	str	r2, [r3, #0]
 80147e6:	2000      	movs	r0, #0
 80147e8:	4770      	bx	lr
 80147ea:	bf00      	nop
 80147ec:	20000d24 	.word	0x20000d24

080147f0 <_kill>:
 80147f0:	4b02      	ldr	r3, [pc, #8]	; (80147fc <_kill+0xc>)
 80147f2:	2258      	movs	r2, #88	; 0x58
 80147f4:	601a      	str	r2, [r3, #0]
 80147f6:	f04f 30ff 	mov.w	r0, #4294967295
 80147fa:	4770      	bx	lr
 80147fc:	20000d24 	.word	0x20000d24

08014800 <_lseek>:
 8014800:	4b02      	ldr	r3, [pc, #8]	; (801480c <_lseek+0xc>)
 8014802:	2258      	movs	r2, #88	; 0x58
 8014804:	601a      	str	r2, [r3, #0]
 8014806:	f04f 30ff 	mov.w	r0, #4294967295
 801480a:	4770      	bx	lr
 801480c:	20000d24 	.word	0x20000d24

08014810 <_read>:
 8014810:	4b02      	ldr	r3, [pc, #8]	; (801481c <_read+0xc>)
 8014812:	2258      	movs	r2, #88	; 0x58
 8014814:	601a      	str	r2, [r3, #0]
 8014816:	f04f 30ff 	mov.w	r0, #4294967295
 801481a:	4770      	bx	lr
 801481c:	20000d24 	.word	0x20000d24

08014820 <_sbrk>:
 8014820:	4a04      	ldr	r2, [pc, #16]	; (8014834 <_sbrk+0x14>)
 8014822:	4905      	ldr	r1, [pc, #20]	; (8014838 <_sbrk+0x18>)
 8014824:	6813      	ldr	r3, [r2, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	bf08      	it	eq
 801482a:	460b      	moveq	r3, r1
 801482c:	4418      	add	r0, r3
 801482e:	6010      	str	r0, [r2, #0]
 8014830:	4618      	mov	r0, r3
 8014832:	4770      	bx	lr
 8014834:	20000d04 	.word	0x20000d04
 8014838:	20000d28 	.word	0x20000d28

0801483c <_write>:
 801483c:	4b02      	ldr	r3, [pc, #8]	; (8014848 <_write+0xc>)
 801483e:	2258      	movs	r2, #88	; 0x58
 8014840:	601a      	str	r2, [r3, #0]
 8014842:	f04f 30ff 	mov.w	r0, #4294967295
 8014846:	4770      	bx	lr
 8014848:	20000d24 	.word	0x20000d24

0801484c <_exit>:
 801484c:	e7fe      	b.n	801484c <_exit>
 801484e:	bf00      	nop

08014850 <__EH_FRAME_BEGIN__>:
 8014850:	0000 0000                                   ....

08014854 <_init>:
 8014854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014856:	bf00      	nop
 8014858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801485a:	bc08      	pop	{r3}
 801485c:	469e      	mov	lr, r3
 801485e:	4770      	bx	lr

08014860 <_fini>:
 8014860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014862:	bf00      	nop
 8014864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014866:	bc08      	pop	{r3}
 8014868:	469e      	mov	lr, r3
 801486a:	4770      	bx	lr
