
motors.none-eabi:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001479c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002144  080148b0  080148b0  000248b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000050  080169f4  080169f4  000269f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001a8  08016a44  08016a44  00026a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08016bec  08016bec  00026bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08016bf4  08016bf4  00026bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000009c  20000000  08016bf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .jcr          00000004  2000009c  08016c94  0003009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c84  200000a0  08016c98  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d24  08016c98  00030d24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba44  00000000  00000000  000300c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a7d  00000000  00000000  0005bb0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c346  00000000  00000000  0006158a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000748  00000000  00000000  0006d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000998  00000000  00000000  0006e018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006de6  00000000  00000000  0006e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000e7c6  00000000  00000000  00075796  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000006e  00000000  00000000  00083f5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  00083fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000cc  00000000  00000000  000895e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000896b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <deregister_tm_clones>:
 8000110:	4b04      	ldr	r3, [pc, #16]	; (8000124 <deregister_tm_clones+0x14>)
 8000112:	4805      	ldr	r0, [pc, #20]	; (8000128 <deregister_tm_clones+0x18>)
 8000114:	1a1b      	subs	r3, r3, r0
 8000116:	2b06      	cmp	r3, #6
 8000118:	d902      	bls.n	8000120 <deregister_tm_clones+0x10>
 800011a:	4b04      	ldr	r3, [pc, #16]	; (800012c <deregister_tm_clones+0x1c>)
 800011c:	b103      	cbz	r3, 8000120 <deregister_tm_clones+0x10>
 800011e:	4718      	bx	r3
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop
 8000124:	200000a3 	.word	0x200000a3
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000

08000130 <register_tm_clones>:
 8000130:	4905      	ldr	r1, [pc, #20]	; (8000148 <register_tm_clones+0x18>)
 8000132:	4806      	ldr	r0, [pc, #24]	; (800014c <register_tm_clones+0x1c>)
 8000134:	1a09      	subs	r1, r1, r0
 8000136:	1089      	asrs	r1, r1, #2
 8000138:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800013c:	1049      	asrs	r1, r1, #1
 800013e:	d002      	beq.n	8000146 <register_tm_clones+0x16>
 8000140:	4b03      	ldr	r3, [pc, #12]	; (8000150 <register_tm_clones+0x20>)
 8000142:	b103      	cbz	r3, 8000146 <register_tm_clones+0x16>
 8000144:	4718      	bx	r3
 8000146:	4770      	bx	lr
 8000148:	200000a0 	.word	0x200000a0
 800014c:	200000a0 	.word	0x200000a0
 8000150:	00000000 	.word	0x00000000

08000154 <__do_global_dtors_aux>:
 8000154:	b510      	push	{r4, lr}
 8000156:	4c06      	ldr	r4, [pc, #24]	; (8000170 <__do_global_dtors_aux+0x1c>)
 8000158:	7823      	ldrb	r3, [r4, #0]
 800015a:	b943      	cbnz	r3, 800016e <__do_global_dtors_aux+0x1a>
 800015c:	f7ff ffd8 	bl	8000110 <deregister_tm_clones>
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__do_global_dtors_aux+0x20>)
 8000162:	b113      	cbz	r3, 800016a <__do_global_dtors_aux+0x16>
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <__do_global_dtors_aux+0x24>)
 8000166:	f3af 8000 	nop.w
 800016a:	2301      	movs	r3, #1
 800016c:	7023      	strb	r3, [r4, #0]
 800016e:	bd10      	pop	{r4, pc}
 8000170:	200000a0 	.word	0x200000a0
 8000174:	00000000 	.word	0x00000000
 8000178:	08014890 	.word	0x08014890

0800017c <frame_dummy>:
 800017c:	b508      	push	{r3, lr}
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <frame_dummy+0x24>)
 8000180:	b11b      	cbz	r3, 800018a <frame_dummy+0xe>
 8000182:	4908      	ldr	r1, [pc, #32]	; (80001a4 <frame_dummy+0x28>)
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <frame_dummy+0x2c>)
 8000186:	f3af 8000 	nop.w
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <frame_dummy+0x30>)
 800018c:	6803      	ldr	r3, [r0, #0]
 800018e:	b913      	cbnz	r3, 8000196 <frame_dummy+0x1a>
 8000190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000194:	e7cc      	b.n	8000130 <register_tm_clones>
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <frame_dummy+0x34>)
 8000198:	2b00      	cmp	r3, #0
 800019a:	d0f9      	beq.n	8000190 <frame_dummy+0x14>
 800019c:	4798      	blx	r3
 800019e:	e7f7      	b.n	8000190 <frame_dummy+0x14>
 80001a0:	00000000 	.word	0x00000000
 80001a4:	200000a4 	.word	0x200000a4
 80001a8:	08014890 	.word	0x08014890
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	00000000 	.word	0x00000000

080001b4 <_mainCRTStartup>:
 80001b4:	4b15      	ldr	r3, [pc, #84]	; (800020c <_mainCRTStartup+0x58>)
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	bf08      	it	eq
 80001ba:	4b13      	ldreq	r3, [pc, #76]	; (8000208 <_mainCRTStartup+0x54>)
 80001bc:	469d      	mov	sp, r3
 80001be:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001c2:	2100      	movs	r1, #0
 80001c4:	468b      	mov	fp, r1
 80001c6:	460f      	mov	r7, r1
 80001c8:	4813      	ldr	r0, [pc, #76]	; (8000218 <_mainCRTStartup+0x64>)
 80001ca:	4a14      	ldr	r2, [pc, #80]	; (800021c <_mainCRTStartup+0x68>)
 80001cc:	1a12      	subs	r2, r2, r0
 80001ce:	f013 f973 	bl	80134b8 <memset>
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <_mainCRTStartup+0x5c>)
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d000      	beq.n	80001da <_mainCRTStartup+0x26>
 80001d8:	4798      	blx	r3
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <_mainCRTStartup+0x60>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d000      	beq.n	80001e2 <_mainCRTStartup+0x2e>
 80001e0:	4798      	blx	r3
 80001e2:	2000      	movs	r0, #0
 80001e4:	2100      	movs	r1, #0
 80001e6:	0004      	movs	r4, r0
 80001e8:	000d      	movs	r5, r1
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <_mainCRTStartup+0x6c>)
 80001ec:	2800      	cmp	r0, #0
 80001ee:	d002      	beq.n	80001f6 <_mainCRTStartup+0x42>
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <_mainCRTStartup+0x70>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	f013 f90f 	bl	8013418 <__libc_init_array>
 80001fa:	0020      	movs	r0, r4
 80001fc:	0029      	movs	r1, r5
 80001fe:	f00f ff33 	bl	8010068 <main>
 8000202:	f013 f899 	bl	8013338 <exit>
 8000206:	bf00      	nop
 8000208:	00080000 	.word	0x00080000
	...
 8000218:	200000a0 	.word	0x200000a0
 800021c:	20000d24 	.word	0x20000d24
	...
 8000228:	08016bf8 	.word	0x08016bf8
 800022c:	20000000 	.word	0x20000000
 8000230:	2000009c 	.word	0x2000009c
 8000234:	200000a0 	.word	0x200000a0
 8000238:	20000d24 	.word	0x20000d24

0800023c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800023c:	4b38      	ldr	r3, [pc, #224]	; (8000320 <SystemInit+0xe4>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800023e:	b082      	sub	sp, #8
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	f042 0201 	orr.w	r2, r2, #1
 8000246:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000248:	6859      	ldr	r1, [r3, #4]
 800024a:	4a36      	ldr	r2, [pc, #216]	; (8000324 <SystemInit+0xe8>)
 800024c:	400a      	ands	r2, r1
 800024e:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000256:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800025a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000262:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800026a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800026c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000270:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000272:	2200      	movs	r2, #0
 8000274:	9200      	str	r2, [sp, #0]
 8000276:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800027e:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000286:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8000288:	9a00      	ldr	r2, [sp, #0]
 800028a:	3201      	adds	r2, #1
 800028c:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800028e:	9a01      	ldr	r2, [sp, #4]
 8000290:	b91a      	cbnz	r2, 800029a <SystemInit+0x5e>
 8000292:	9a00      	ldr	r2, [sp, #0]
 8000294:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000298:	d1f2      	bne.n	8000280 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80002a0:	bf18      	it	ne
 80002a2:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002a4:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002a6:	9a01      	ldr	r2, [sp, #4]
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	d005      	beq.n	80002b8 <SystemInit+0x7c>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <SystemInit+0xec>)
 80002ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80002b4:	b002      	add	sp, #8
 80002b6:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80002b8:	4a1c      	ldr	r2, [pc, #112]	; (800032c <SystemInit+0xf0>)
 80002ba:	6811      	ldr	r1, [r2, #0]
 80002bc:	f041 0110 	orr.w	r1, r1, #16
 80002c0:	6011      	str	r1, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80002c2:	6811      	ldr	r1, [r2, #0]
 80002c4:	f021 0103 	bic.w	r1, r1, #3
 80002c8:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80002ca:	6811      	ldr	r1, [r2, #0]
 80002cc:	f041 0102 	orr.w	r1, r1, #2
 80002d0:	6011      	str	r1, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002e0:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80002e8:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80002f0:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002f8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002fa:	6819      	ldr	r1, [r3, #0]
 80002fc:	4a08      	ldr	r2, [pc, #32]	; (8000320 <SystemInit+0xe4>)
 80002fe:	0189      	lsls	r1, r1, #6
 8000300:	d5fb      	bpl.n	80002fa <SystemInit+0xbe>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000302:	6851      	ldr	r1, [r2, #4]
 8000304:	f021 0103 	bic.w	r1, r1, #3
 8000308:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800030a:	6851      	ldr	r1, [r2, #4]
 800030c:	f041 0102 	orr.w	r1, r1, #2
 8000310:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000312:	685a      	ldr	r2, [r3, #4]
 8000314:	f002 020c 	and.w	r2, r2, #12
 8000318:	2a08      	cmp	r2, #8
 800031a:	d1fa      	bne.n	8000312 <SystemInit+0xd6>
 800031c:	e7c6      	b.n	80002ac <SystemInit+0x70>
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	f8ff0000 	.word	0xf8ff0000
 8000328:	e000ed00 	.word	0xe000ed00
 800032c:	40022000 	.word	0x40022000

08000330 <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000330:	4a13      	ldr	r2, [pc, #76]	; (8000380 <SystemCoreClockUpdate+0x50>)
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <SystemCoreClockUpdate+0x54>)
 8000334:	6851      	ldr	r1, [r2, #4]
  
  switch (tmp)
 8000336:	f001 010c 	and.w	r1, r1, #12
 800033a:	2904      	cmp	r1, #4
 800033c:	d003      	beq.n	8000346 <SystemCoreClockUpdate+0x16>
 800033e:	2908      	cmp	r1, #8
 8000340:	d003      	beq.n	800034a <SystemCoreClockUpdate+0x1a>
 8000342:	4911      	ldr	r1, [pc, #68]	; (8000388 <SystemCoreClockUpdate+0x58>)
 8000344:	e011      	b.n	800036a <SystemCoreClockUpdate+0x3a>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000346:	4911      	ldr	r1, [pc, #68]	; (800038c <SystemCoreClockUpdate+0x5c>)
 8000348:	e00f      	b.n	800036a <SystemCoreClockUpdate+0x3a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800034a:	6851      	ldr	r1, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800034c:	6850      	ldr	r0, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800034e:	f3c1 4183 	ubfx	r1, r1, #18, #4
      
      if (pllsource == 0x00)
 8000352:	03c0      	lsls	r0, r0, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000354:	f101 0102 	add.w	r1, r1, #2
      
      if (pllsource == 0x00)
 8000358:	d401      	bmi.n	800035e <SystemCoreClockUpdate+0x2e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <SystemCoreClockUpdate+0x60>)
 800035c:	e004      	b.n	8000368 <SystemCoreClockUpdate+0x38>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800035e:	6850      	ldr	r0, [r2, #4]
 8000360:	0380      	lsls	r0, r0, #14
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000362:	bf4c      	ite	mi
 8000364:	4808      	ldrmi	r0, [pc, #32]	; (8000388 <SystemCoreClockUpdate+0x58>)
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 8000366:	4809      	ldrpl	r0, [pc, #36]	; (800038c <SystemCoreClockUpdate+0x5c>)
 8000368:	4341      	muls	r1, r0
 800036a:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800036c:	6852      	ldr	r2, [r2, #4]
 800036e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000372:	441a      	add	r2, r3
 8000374:	7911      	ldrb	r1, [r2, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	40ca      	lsrs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	20000004 	.word	0x20000004
 8000388:	007a1200 	.word	0x007a1200
 800038c:	00f42400 	.word	0x00f42400
 8000390:	003d0900 	.word	0x003d0900

08000394 <LED_Init>:
TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
TIM_OCInitTypeDef  TIM_OCInitStructure;



void LED_Init(){
 8000394:	b537      	push	{r0, r1, r2, r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8000396:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 8000398:	4c18      	ldr	r4, [pc, #96]	; (80003fc <LED_Init+0x68>)
void LED_Init(){

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800039a:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800039e:	2318      	movs	r3, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003a0:	a901      	add	r1, sp, #4

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80003a2:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003a6:	4816      	ldr	r0, [pc, #88]	; (8000400 <LED_Init+0x6c>)
	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003a8:	2303      	movs	r3, #3
 80003aa:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003ae:	f001 ff3e 	bl	800222e <GPIO_Init>


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80003b2:	4620      	mov	r0, r4
 80003b4:	f003 fa04 	bl	80037c0 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80003b8:	2360      	movs	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80003ba:	2501      	movs	r5, #1


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80003bc:	8023      	strh	r3, [r4, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80003be:	4621      	mov	r1, r4
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80003c0:	2300      	movs	r3, #0
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80003c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80003c6:	80e3      	strh	r3, [r4, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80003c8:	8123      	strh	r3, [r4, #8]

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80003ca:	8065      	strh	r5, [r4, #2]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80003cc:	f003 f924 	bl	8003618 <TIM_OC2Init>
	
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80003d0:	2108      	movs	r1, #8
 80003d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003d6:	f003 fb13 	bl	8003a00 <TIM_OC2PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 80003da:	4629      	mov	r1, r5
 80003dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003e0:	f003 fad6 	bl	8003990 <TIM_ARRPreloadConfig>


	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 80003e4:	4629      	mov	r1, r5
 80003e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003ea:	f003 fa10 	bl	800380e <TIM_CtrlPWMOutputs>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80003ee:	4629      	mov	r1, r5
 80003f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003f4:	f003 f9ff 	bl	80037f6 <TIM_Cmd>
}
 80003f8:	b003      	add	sp, #12
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	20000d0e 	.word	0x20000d0e
 8000400:	40010800 	.word	0x40010800

08000404 <led_set>:


void led_set(uint8_t val){
	TIM2->CCR2 = val*TIM2->ARR/255;
 8000404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000408:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800040a:	b29b      	uxth	r3, r3
 800040c:	4358      	muls	r0, r3
 800040e:	23ff      	movs	r3, #255	; 0xff
 8000410:	fb90 f0f3 	sdiv	r0, r0, r3
 8000414:	b280      	uxth	r0, r0
 8000416:	8710      	strh	r0, [r2, #56]	; 0x38
 8000418:	4770      	bx	lr

0800041a <DEBUG_Init>:
}

void DEBUG_Init(){
 800041a:	b507      	push	{r0, r1, r2, lr}
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 800041c:	2330      	movs	r3, #48	; 0x30
 800041e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000422:	2303      	movs	r3, #3
 8000424:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000428:	a901      	add	r1, sp, #4
void DEBUG_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800042a:	2310      	movs	r3, #16
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <DEBUG_Init+0x22>)
void DEBUG_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800042e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000432:	f001 fefc 	bl	800222e <GPIO_Init>
}
 8000436:	b003      	add	sp, #12
 8000438:	f85d fb04 	ldr.w	pc, [sp], #4
 800043c:	40010c00 	.word	0x40010c00

08000440 <debug_toggle>:

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 8000440:	2120      	movs	r1, #32
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
}

void debug_toggle(void){
 8000442:	b508      	push	{r3, lr}
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 8000444:	4807      	ldr	r0, [pc, #28]	; (8000464 <debug_toggle+0x24>)
 8000446:	f001 ff55 	bl	80022f4 <GPIO_ReadOutputDataBit>
    if(led_bit == (uint8_t)Bit_SET)
 800044a:	2801      	cmp	r0, #1
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 800044c:	f04f 0120 	mov.w	r1, #32
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <debug_toggle+0x24>)
	GPIO_Init(GPIOB, &GPIO_InitStructure);
}

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
 8000452:	d103      	bne.n	800045c <debug_toggle+0x1c>
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
}
 8000454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8000458:	f001 bf57 	b.w	800230a <GPIO_ResetBits>
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
}
 800045c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
 8000460:	f001 bf51 	b.w	8002306 <GPIO_SetBits>
 8000464:	40010c00 	.word	0x40010c00

08000468 <SHUTDOWN_Init>:
}

void SHUTDOWN_Init(){
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	b085      	sub	sp, #20

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800046c:	4669      	mov	r1, sp
}

void SHUTDOWN_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800046e:	2404      	movs	r4, #4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000470:	2303      	movs	r3, #3
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000472:	4813      	ldr	r0, [pc, #76]	; (80004c0 <SHUTDOWN_Init+0x58>)
void SHUTDOWN_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000474:	f88d 3002 	strb.w	r3, [sp, #2]

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000478:	2508      	movs	r5, #8
}

void SHUTDOWN_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 800047a:	f8ad 4000 	strh.w	r4, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800047e:	f88d 4003 	strb.w	r4, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000482:	f001 fed4 	bl	800222e <GPIO_Init>

	//SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
 8000486:	a802      	add	r0, sp, #8
 8000488:	f001 f9ae 	bl	80017e8 <EXTI_StructInit>
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800048c:	2300      	movs	r3, #0

	//SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
 800048e:	9402      	str	r4, [sp, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
 8000490:	eb0d 0005 	add.w	r0, sp, r5
	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000494:	2401      	movs	r4, #1
	//SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000496:	f88d 300c 	strb.w	r3, [sp, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 800049a:	f88d 500d 	strb.w	r5, [sp, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800049e:	f88d 400e 	strb.w	r4, [sp, #14]
	EXTI_Init(&EXTI_InitStructure);
 80004a2:	f001 f967 	bl	8001774 <EXTI_Init>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80004a6:	a801      	add	r0, sp, #4
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
 80004a8:	f88d 5004 	strb.w	r5, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 80004ac:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 80004b0:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80004b4:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80004b8:	f003 fe90 	bl	80041dc <NVIC_Init>
}
 80004bc:	b005      	add	sp, #20
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	40010800 	.word	0x40010800

080004c4 <I2C1_Init>:

#include <stm32f10x.h>
#include "encoder.h"


void I2C1_Init(void){
 80004c4:	b510      	push	{r4, lr}
    GPIO_InitTypeDef  GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

    /* I2C1 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80004c6:	2101      	movs	r1, #1

#include <stm32f10x.h>
#include "encoder.h"


void I2C1_Init(void){
 80004c8:	b086      	sub	sp, #24
    GPIO_InitTypeDef  GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

    /* I2C1 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80004ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80004ce:	f002 fb19 	bl	8002b04 <RCC_APB1PeriphClockCmd>

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80004d2:	23c0      	movs	r3, #192	; 0xc0
 80004d4:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004d8:	2303      	movs	r3, #3
 80004da:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004de:	a901      	add	r1, sp, #4
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 80004e0:	231c      	movs	r3, #28
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004e2:	4814      	ldr	r0, [pc, #80]	; (8000534 <I2C1_Init+0x70>)
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 80004e4:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004e8:	f001 fea1 	bl	800222e <GPIO_Init>
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80004ec:	f64b 72ff 	movw	r2, #49151	; 0xbfff
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 80004f6:	f8ad 3010 	strh.w	r3, [sp, #16]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80004fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fe:	f8ad 3012 	strh.w	r3, [sp, #18]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000506:	f8ad 3014 	strh.w	r3, [sp, #20]
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
    I2C_Init(I2C1, &I2C_InitStructure);
 800050a:	4c0b      	ldr	r4, [pc, #44]	; (8000538 <I2C1_Init+0x74>)
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <I2C1_Init+0x78>)
 800050e:	a906      	add	r1, sp, #24
 8000510:	f841 3d10 	str.w	r3, [r1, #-16]!
    I2C_Init(I2C1, &I2C_InitStructure);
 8000514:	4620      	mov	r0, r4
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8000516:	f8ad 200e 	strh.w	r2, [sp, #14]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
    I2C_Init(I2C1, &I2C_InitStructure);
 800051a:	f001 ff7f 	bl	800241c <I2C_Init>

     /*enable I2C*/
    I2C_Cmd(I2C1,ENABLE);
 800051e:	2101      	movs	r1, #1
 8000520:	4620      	mov	r0, r4
 8000522:	f001 fff3 	bl	800250c <I2C_Cmd>
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <I2C1_Init+0x7c>)
 8000528:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800052c:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(I2C1_EV_IRQn);
}
 800052e:	b006      	add	sp, #24
 8000530:	bd10      	pop	{r4, pc}
 8000532:	bf00      	nop
 8000534:	40010c00 	.word	0x40010c00
 8000538:	40005400 	.word	0x40005400
 800053c:	000186a0 	.word	0x000186a0
 8000540:	e000e100 	.word	0xe000e100

08000544 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check on EV5 */
  if(I2C_GetITStatus(I2C1, I2C_IT_SB)== SET){
 8000546:	495b      	ldr	r1, [pc, #364]	; (80006b4 <I2C1_EV_IRQHandler+0x170>)
 8000548:	485b      	ldr	r0, [pc, #364]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800054a:	f002 f90a 	bl	8002762 <I2C_GetITStatus>
 800054e:	2801      	cmp	r0, #1
 8000550:	4604      	mov	r4, r0
 8000552:	d110      	bne.n	8000576 <I2C1_EV_IRQHandler+0x32>
    /* Send slave Address for read */
    I2C_Send7bitAddress(I2C1, slaveAddress<<1, I2C_Direction_Receiver);
 8000554:	4b59      	ldr	r3, [pc, #356]	; (80006bc <I2C1_EV_IRQHandler+0x178>)
 8000556:	4602      	mov	r2, r0
 8000558:	7819      	ldrb	r1, [r3, #0]
 800055a:	4857      	ldr	r0, [pc, #348]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800055c:	0049      	lsls	r1, r1, #1
 800055e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000562:	f002 f84a 	bl	80025fa <I2C_Send7bitAddress>
    if (NumberOfByteToReceive == 0x03){
 8000566:	4b56      	ldr	r3, [pc, #344]	; (80006c0 <I2C1_EV_IRQHandler+0x17c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d02b      	beq.n	80005c6 <I2C1_EV_IRQHandler+0x82>
      /* Disable buffer Interrupts */
      I2C_ITConfig(I2C1, I2C_IT_BUF , DISABLE);
    }else{    	
      /* Enable buffer Interrupts */
      I2C_ITConfig(I2C1, I2C_IT_BUF , ENABLE);
 800056e:	4622      	mov	r2, r4
 8000570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000574:	e08a      	b.n	800068c <I2C1_EV_IRQHandler+0x148>
    }
  }else if(I2C_GetITStatus(I2C1, I2C_IT_ADDR)== SET){
 8000576:	4953      	ldr	r1, [pc, #332]	; (80006c4 <I2C1_EV_IRQHandler+0x180>)
 8000578:	484f      	ldr	r0, [pc, #316]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800057a:	f002 f8f2 	bl	8002762 <I2C_GetITStatus>
 800057e:	2801      	cmp	r0, #1
 8000580:	d123      	bne.n	80005ca <I2C1_EV_IRQHandler+0x86>
    if (NumberOfByteToReceive == 1){
 8000582:	4c4f      	ldr	r4, [pc, #316]	; (80006c0 <I2C1_EV_IRQHandler+0x17c>)
 8000584:	7823      	ldrb	r3, [r4, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d103      	bne.n	8000592 <I2C1_EV_IRQHandler+0x4e>
      I2C_AcknowledgeConfig(I2C1, DISABLE);
 800058a:	2100      	movs	r1, #0
 800058c:	484a      	ldr	r0, [pc, #296]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800058e:	f001 fff9 	bl	8002584 <I2C_AcknowledgeConfig>
    }
    
    /* Clear ADDR Register */
    (void)(I2C1->SR1);
 8000592:	4849      	ldr	r0, [pc, #292]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000594:	8a83      	ldrh	r3, [r0, #20]
    (void)(I2C1->SR2);  
 8000596:	8b03      	ldrh	r3, [r0, #24]
    if (GenerateStartStatus == 0x00){ 
 8000598:	4b4b      	ldr	r3, [pc, #300]	; (80006c8 <I2C1_EV_IRQHandler+0x184>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	f040 8087 	bne.w	80006b0 <I2C1_EV_IRQHandler+0x16c>
      if (NumberOfByteToReceive == 1){
 80005a2:	7821      	ldrb	r1, [r4, #0]
 80005a4:	b2c9      	uxtb	r1, r1
 80005a6:	2901      	cmp	r1, #1
 80005a8:	d101      	bne.n	80005ae <I2C1_EV_IRQHandler+0x6a>
         I2C_GenerateSTOP(I2C1, ENABLE);  
 80005aa:	f001 ffdf 	bl	800256c <I2C_GenerateSTOP>
      }  
      if (NumberOfByteToReceive == 2){
 80005ae:	7823      	ldrb	r3, [r4, #0]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d17d      	bne.n	80006b0 <I2C1_EV_IRQHandler+0x16c>
        I2C_AcknowledgeConfig(I2C1, DISABLE);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4840      	ldr	r0, [pc, #256]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005b8:	f001 ffe4 	bl	8002584 <I2C_AcknowledgeConfig>
        I2C_NACKPositionConfig(I2C1, I2C_NACKPosition_Next);
 80005bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005c0:	483d      	ldr	r0, [pc, #244]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005c2:	f002 f863 	bl	800268c <I2C_NACKPositionConfig>
        /* Disable buffer Interrupts */
        I2C_ITConfig(I2C1, I2C_IT_BUF , DISABLE);
 80005c6:	2200      	movs	r2, #0
 80005c8:	e7d2      	b.n	8000570 <I2C1_EV_IRQHandler+0x2c>
      }
    }
  }else if((I2C_GetITStatus(I2C1, I2C_IT_RXNE)== SET)
 80005ca:	4940      	ldr	r1, [pc, #256]	; (80006cc <I2C1_EV_IRQHandler+0x188>)
 80005cc:	483a      	ldr	r0, [pc, #232]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005ce:	f002 f8c8 	bl	8002762 <I2C_GetITStatus>
 80005d2:	2801      	cmp	r0, #1
 80005d4:	d125      	bne.n	8000622 <I2C1_EV_IRQHandler+0xde>
  				&&(I2C_GetITStatus(I2C1, I2C_IT_BTF)== RESET)){  	
 80005d6:	493e      	ldr	r1, [pc, #248]	; (80006d0 <I2C1_EV_IRQHandler+0x18c>)
 80005d8:	4837      	ldr	r0, [pc, #220]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005da:	f002 f8c2 	bl	8002762 <I2C_GetITStatus>
 80005de:	4605      	mov	r5, r0
 80005e0:	b9f8      	cbnz	r0, 8000622 <I2C1_EV_IRQHandler+0xde>

    /* Store I2C received data */
    RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 80005e2:	4a3c      	ldr	r2, [pc, #240]	; (80006d4 <I2C1_EV_IRQHandler+0x190>)
 80005e4:	4834      	ldr	r0, [pc, #208]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 80005e6:	7814      	ldrb	r4, [r2, #0]
 80005e8:	b2e4      	uxtb	r4, r4
 80005ea:	1c63      	adds	r3, r4, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	7013      	strb	r3, [r2, #0]
 80005f0:	f002 f800 	bl	80025f4 <I2C_ReceiveData>
 80005f4:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <I2C1_EV_IRQHandler+0x194>)
 80005f6:	5518      	strb	r0, [r3, r4]
    NumberOfByteToReceive--;
 80005f8:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <I2C1_EV_IRQHandler+0x17c>)
 80005fa:	7819      	ldrb	r1, [r3, #0]
 80005fc:	461c      	mov	r4, r3
 80005fe:	3901      	subs	r1, #1
 8000600:	b2c9      	uxtb	r1, r1
 8000602:	7019      	strb	r1, [r3, #0]
    
    if (NumberOfByteToReceive == 0x03){
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	2a03      	cmp	r2, #3
 8000608:	d105      	bne.n	8000616 <I2C1_EV_IRQHandler+0xd2>
      /* Disable buffer Interrupts */
      I2C_ITConfig(I2C1, I2C_IT_BUF , DISABLE);
 800060a:	462a      	mov	r2, r5
 800060c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000610:	4829      	ldr	r0, [pc, #164]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000612:	f001 ffe4 	bl	80025de <I2C_ITConfig>
    }
    if (NumberOfByteToReceive == 0x00){    	
 8000616:	7823      	ldrb	r3, [r4, #0]
 8000618:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800061c:	2b00      	cmp	r3, #0
 800061e:	d147      	bne.n	80006b0 <I2C1_EV_IRQHandler+0x16c>
 8000620:	e032      	b.n	8000688 <I2C1_EV_IRQHandler+0x144>
      /* Disable Error and Buffer Interrupts */
      I2C_ITConfig(I2C1, (I2C_IT_EVT | I2C_IT_BUF), DISABLE);            
    }
  }else if(I2C_GetITStatus(I2C1, I2C_IT_BTF)== SET){ /* BUSY, MSL and RXNE flags */
 8000622:	492b      	ldr	r1, [pc, #172]	; (80006d0 <I2C1_EV_IRQHandler+0x18c>)
 8000624:	4824      	ldr	r0, [pc, #144]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000626:	f002 f89c 	bl	8002762 <I2C_GetITStatus>
 800062a:	2801      	cmp	r0, #1
 800062c:	4601      	mov	r1, r0
 800062e:	d13f      	bne.n	80006b0 <I2C1_EV_IRQHandler+0x16c>
    /* if Three bytes remaining for reception */
    if (NumberOfByteToReceive == 3){
 8000630:	4c23      	ldr	r4, [pc, #140]	; (80006c0 <I2C1_EV_IRQHandler+0x17c>)
 8000632:	4d28      	ldr	r5, [pc, #160]	; (80006d4 <I2C1_EV_IRQHandler+0x190>)
 8000634:	7823      	ldrb	r3, [r4, #0]
 8000636:	4f28      	ldr	r7, [pc, #160]	; (80006d8 <I2C1_EV_IRQHandler+0x194>)
 8000638:	2b03      	cmp	r3, #3
 800063a:	d104      	bne.n	8000646 <I2C1_EV_IRQHandler+0x102>
      I2C_AcknowledgeConfig(I2C1, DISABLE);
 800063c:	2100      	movs	r1, #0
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000640:	f001 ffa0 	bl	8002584 <I2C_AcknowledgeConfig>
 8000644:	e027      	b.n	8000696 <I2C1_EV_IRQHandler+0x152>
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
      NumberOfByteToReceive--;        
    }else if (NumberOfByteToReceive == 2){           
 8000646:	7823      	ldrb	r3, [r4, #0]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d124      	bne.n	8000696 <I2C1_EV_IRQHandler+0x152>
      I2C_GenerateSTOP(I2C1, ENABLE);    
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800064e:	f001 ff8d 	bl	800256c <I2C_GenerateSTOP>
      
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 8000652:	782e      	ldrb	r6, [r5, #0]
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000656:	b2f6      	uxtb	r6, r6
 8000658:	1c73      	adds	r3, r6, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	702b      	strb	r3, [r5, #0]
 800065e:	f001 ffc9 	bl	80025f4 <I2C_ReceiveData>
      NumberOfByteToReceive--;
 8000662:	7823      	ldrb	r3, [r4, #0]
      NumberOfByteToReceive--;        
    }else if (NumberOfByteToReceive == 2){           
      I2C_GenerateSTOP(I2C1, ENABLE);    
      
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 8000664:	55b8      	strb	r0, [r7, r6]
      NumberOfByteToReceive--;
 8000666:	3b01      	subs	r3, #1
 8000668:	b2db      	uxtb	r3, r3
 800066a:	7023      	strb	r3, [r4, #0]
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 800066c:	782e      	ldrb	r6, [r5, #0]
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 8000670:	b2f6      	uxtb	r6, r6
 8000672:	1c73      	adds	r3, r6, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	702b      	strb	r3, [r5, #0]
 8000678:	f001 ffbc 	bl	80025f4 <I2C_ReceiveData>
      NumberOfByteToReceive--;        
 800067c:	7823      	ldrb	r3, [r4, #0]
      
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
      NumberOfByteToReceive--;
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 800067e:	55b8      	strb	r0, [r7, r6]
      NumberOfByteToReceive--;        
 8000680:	3b01      	subs	r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	7023      	strb	r3, [r4, #0]
      /* Disable Error and Buffer Interrupts */
      I2C_ITConfig(I2C1, (I2C_IT_EVT | I2C_IT_BUF), DISABLE);            
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800068c:	480a      	ldr	r0, [pc, #40]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
      NumberOfByteToReceive--;
    }
  } 
 800068e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      NumberOfByteToReceive--;
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
      NumberOfByteToReceive--;        
      /* Disable Error and Buffer Interrupts */
      I2C_ITConfig(I2C1, (I2C_IT_EVT | I2C_IT_BUF), DISABLE);            
 8000692:	f001 bfa4 	b.w	80025de <I2C_ITConfig>
    }else{
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 8000696:	782e      	ldrb	r6, [r5, #0]
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <I2C1_EV_IRQHandler+0x174>)
 800069a:	b2f6      	uxtb	r6, r6
 800069c:	1c73      	adds	r3, r6, #1
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	702b      	strb	r3, [r5, #0]
 80006a2:	f001 ffa7 	bl	80025f4 <I2C_ReceiveData>
      NumberOfByteToReceive--;
 80006a6:	7823      	ldrb	r3, [r4, #0]
      NumberOfByteToReceive--;        
      /* Disable Error and Buffer Interrupts */
      I2C_ITConfig(I2C1, (I2C_IT_EVT | I2C_IT_BUF), DISABLE);            
    }else{
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 80006a8:	55b8      	strb	r0, [r7, r6]
      NumberOfByteToReceive--;
 80006aa:	3b01      	subs	r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	7023      	strb	r3, [r4, #0]
 80006b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	02000001 	.word	0x02000001
 80006b8:	40005400 	.word	0x40005400
 80006bc:	20000ce1 	.word	0x20000ce1
 80006c0:	20000cd9 	.word	0x20000cd9
 80006c4:	02000002 	.word	0x02000002
 80006c8:	20000cd8 	.word	0x20000cd8
 80006cc:	06000040 	.word	0x06000040
 80006d0:	02000004 	.word	0x02000004
 80006d4:	20000ce2 	.word	0x20000ce2
 80006d8:	20000cda 	.word	0x20000cda

080006dc <SysTick_Init>:
	/****************************************
	 *SystemFrequency/1000      1ms         *
	 *SystemFrequency/100000    10us        *
	 *SystemFrequency/1000000   1us         *
	 *****************************************/
	while (SysTick_Config(SystemCoreClock / 1000000) != 0); // One SysTick interrupt now equals 1us
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <SysTick_Init+0x24>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80006de:	4a09      	ldr	r2, [pc, #36]	; (8000704 <SysTick_Init+0x28>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80006e2:	21f0      	movs	r1, #240	; 0xf0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80006e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <SysTick_Init+0x2c>)
 80006ea:	3b01      	subs	r3, #1
 80006ec:	6053      	str	r3, [r2, #4]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <SysTick_Init+0x30>)
 80006f0:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80006f4:	2300      	movs	r3, #0
 80006f6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 80006f8:	2307      	movs	r3, #7
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000004 	.word	0x20000004
 8000704:	000f4240 	.word	0x000f4240
 8000708:	e000e010 	.word	0xe000e010
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <SysTick_Handler>:
/**
 * This method needs to be called in the SysTick_Handler
 */

void SysTick_Handler(void) {
	sysTickCounter++;
 8000710:	4a02      	ldr	r2, [pc, #8]	; (800071c <SysTick_Handler+0xc>)
 8000712:	6813      	ldr	r3, [r2, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	200000bc 	.word	0x200000bc

08000720 <delay>:
	uint32_t i = millis();
	while ((millis() - i) < (n));
}

uint32_t millis(void){
	return sysTickCounter/1000;
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <delay+0x20>)
/*void delay_nus(uint32_t n) {
	uint32_t i = sysTickCounter;
	while (sysTickCounter - i < n);
}*/
 
void delay(uint32_t n) {
 8000722:	b510      	push	{r4, lr}
	uint32_t i = millis();
	while ((millis() - i) < (n));
}

uint32_t millis(void){
	return sysTickCounter/1000;
 8000724:	6814      	ldr	r4, [r2, #0]
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	4611      	mov	r1, r2
 800072c:	fbb4 f4f3 	udiv	r4, r4, r3
	while (sysTickCounter - i < n);
}*/
 
void delay(uint32_t n) {
	uint32_t i = millis();
	while ((millis() - i) < (n));
 8000730:	461a      	mov	r2, r3
}

uint32_t millis(void){
	return sysTickCounter/1000;
 8000732:	680b      	ldr	r3, [r1, #0]
	while (sysTickCounter - i < n);
}*/
 
void delay(uint32_t n) {
	uint32_t i = millis();
	while ((millis() - i) < (n));
 8000734:	fbb3 f3f2 	udiv	r3, r3, r2
 8000738:	1b1b      	subs	r3, r3, r4
 800073a:	4283      	cmp	r3, r0
 800073c:	d3f9      	bcc.n	8000732 <delay+0x12>
}
 800073e:	bd10      	pop	{r4, pc}
 8000740:	200000bc 	.word	0x200000bc

08000744 <millis>:

uint32_t millis(void){
	return sysTickCounter/1000;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <millis+0x10>)
 8000746:	6818      	ldr	r0, [r3, #0]
}
 8000748:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200000bc 	.word	0x200000bc

08000758 <micros>:

uint32_t micros(void){
	return sysTickCounter;
 8000758:	4b01      	ldr	r3, [pc, #4]	; (8000760 <micros+0x8>)
 800075a:	6818      	ldr	r0, [r3, #0]
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	200000bc 	.word	0x200000bc

08000764 <RCC_Configuration>:

void RCC_Configuration(void){
 8000764:	b508      	push	{r3, lr}
  /* PCLK1 = HCLK/4 */
  RCC_PCLK1Config(RCC_HCLK_Div4);
 8000766:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800076a:	f002 f919 	bl	80029a0 <RCC_PCLK1Config>

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, ENABLE);
 800076e:	2101      	movs	r1, #1
 8000770:	2007      	movs	r0, #7
 8000772:	f002 f9c7 	bl	8002b04 <RCC_APB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000776:	2101      	movs	r1, #1
 8000778:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800077c:	f002 f9b6 	bl	8002aec <RCC_APB2PeriphClockCmd>
 
 
  /* GPIOA, GPIOB and GPIOC clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 8000780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 
 
  /* GPIOA, GPIOB and GPIOC clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 8000784:	2101      	movs	r1, #1
 8000786:	201d      	movs	r0, #29
 8000788:	f002 b9b0 	b.w	8002aec <RCC_APB2PeriphClockCmd>

0800078c <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 800078c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <ADC_DeInit+0x54>)
 8000790:	4298      	cmp	r0, r3
 8000792:	d108      	bne.n	80007a6 <ADC_DeInit+0x1a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000794:	2101      	movs	r1, #1
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f002 f9bf 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 800079e:	2100      	movs	r1, #0
 80007a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a4:	e016      	b.n	80007d4 <ADC_DeInit+0x48>
  }
  else if (ADCx == ADC2)
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <ADC_DeInit+0x58>)
 80007a8:	4298      	cmp	r0, r3
 80007aa:	d108      	bne.n	80007be <ADC_DeInit+0x32>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 80007ac:	2101      	movs	r1, #1
 80007ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007b2:	f002 f9b3 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 80007b6:	2100      	movs	r1, #0
 80007b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007bc:	e00a      	b.n	80007d4 <ADC_DeInit+0x48>
  }
  else
  {
    if (ADCx == ADC3)
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <ADC_DeInit+0x5c>)
 80007c0:	4298      	cmp	r0, r3
 80007c2:	d10b      	bne.n	80007dc <ADC_DeInit+0x50>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 80007c4:	2101      	movs	r1, #1
 80007c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80007ca:	f002 f9a7 	bl	8002b1c <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 80007ce:	2100      	movs	r1, #0
 80007d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }
  }
}
 80007d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (ADCx == ADC3)
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 80007d8:	f002 b9a0 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
 80007dc:	bd08      	pop	{r3, pc}
 80007de:	bf00      	nop
 80007e0:	40012400 	.word	0x40012400
 80007e4:	40012800 	.word	0x40012800
 80007e8:	40013c00 	.word	0x40013c00

080007ec <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80007ec:	6843      	ldr	r3, [r0, #4]
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80007ee:	b510      	push	{r4, lr}
 80007f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80007f4:	680b      	ldr	r3, [r1, #0]
 80007f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007fa:	4313      	orrs	r3, r2
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 80007fc:	790a      	ldrb	r2, [r1, #4]
 80007fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000802:	6043      	str	r3, [r0, #4]
 8000804:	68ca      	ldr	r2, [r1, #12]
 8000806:	688b      	ldr	r3, [r1, #8]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000808:	6884      	ldr	r4, [r0, #8]
 800080a:	431a      	orrs	r2, r3
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <ADC_Init+0x44>)
 800080e:	4023      	ands	r3, r4
 8000810:	4313      	orrs	r3, r2
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000812:	794a      	ldrb	r2, [r1, #5]
 8000814:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000818:	6083      	str	r3, [r0, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800081a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800081c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000820:	7c0b      	ldrb	r3, [r1, #16]
 8000822:	3b01      	subs	r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800082a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800082c:	bd10      	pop	{r4, pc}
 800082e:	bf00      	nop
 8000830:	fff1f7fd 	.word	0xfff1f7fd

08000834 <ADC_StructInit>:
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8000834:	2300      	movs	r3, #0
 8000836:	6003      	str	r3, [r0, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000838:	7103      	strb	r3, [r0, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800083a:	7143      	strb	r3, [r0, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800083c:	6083      	str	r3, [r0, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800083e:	60c3      	str	r3, [r0, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	7403      	strb	r3, [r0, #16]
 8000844:	4770      	bx	lr

08000846 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000846:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000848:	b111      	cbz	r1, 8000850 <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	e001      	b.n	8000854 <ADC_Cmd+0xe>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 8000850:	f023 0301 	bic.w	r3, r3, #1
 8000854:	6083      	str	r3, [r0, #8]
 8000856:	4770      	bx	lr

08000858 <ADC_DMACmd>:
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 8000858:	6883      	ldr	r3, [r0, #8]
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800085a:	b111      	cbz	r1, 8000862 <ADC_DMACmd+0xa>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 800085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000860:	e001      	b.n	8000866 <ADC_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 8000862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000866:	6083      	str	r3, [r0, #8]
 8000868:	4770      	bx	lr

0800086a <ADC_ITConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 800086a:	b2c9      	uxtb	r1, r1
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800086c:	6843      	ldr	r3, [r0, #4]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  if (NewState != DISABLE)
 800086e:	b10a      	cbz	r2, 8000874 <ADC_ITConfig+0xa>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000870:	4319      	orrs	r1, r3
 8000872:	e001      	b.n	8000878 <ADC_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000874:	ea23 0101 	bic.w	r1, r3, r1
 8000878:	6041      	str	r1, [r0, #4]
 800087a:	4770      	bx	lr

0800087c <ADC_ResetCalibration>:
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 800087c:	6883      	ldr	r3, [r0, #8]
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6083      	str	r3, [r0, #8]
 8000884:	4770      	bx	lr

08000886 <ADC_GetResetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000886:	6880      	ldr	r0, [r0, #8]
    /* RSTCAL bit is reset */
    bitstatus = RESET;
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
}
 8000888:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800088c:	4770      	bx	lr

0800088e <ADC_StartCalibration>:
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800088e:	6883      	ldr	r3, [r0, #8]
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6083      	str	r3, [r0, #8]
 8000896:	4770      	bx	lr

08000898 <ADC_GetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8000898:	6880      	ldr	r0, [r0, #8]
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
  }
  /* Return the CAL bit status */
  return  bitstatus;
}
 800089a:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800089e:	4770      	bx	lr

080008a0 <ADC_SoftwareStartConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80008a0:	6883      	ldr	r3, [r0, #8]
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008a2:	b111      	cbz	r1, 80008aa <ADC_SoftwareStartConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80008a4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80008a8:	e001      	b.n	80008ae <ADC_SoftwareStartConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80008aa:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 80008ae:	6083      	str	r3, [r0, #8]
 80008b0:	4770      	bx	lr

080008b2 <ADC_GetSoftwareStartConvStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 80008b2:	6880      	ldr	r0, [r0, #8]
    /* SWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 80008b4:	f3c0 5080 	ubfx	r0, r0, #22, #1
 80008b8:	4770      	bx	lr

080008ba <ADC_DiscModeChannelCountConfig>:
  uint32_t tmpreg2 = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 80008ba:	6843      	ldr	r3, [r0, #4]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 80008bc:	3901      	subs	r1, #1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
 80008be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 80008c2:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 80008c6:	6043      	str	r3, [r0, #4]
 80008c8:	4770      	bx	lr

080008ca <ADC_DiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 80008ca:	6843      	ldr	r3, [r0, #4]
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008cc:	b111      	cbz	r1, 80008d4 <ADC_DiscModeCmd+0xa>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 80008ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d2:	e001      	b.n	80008d8 <ADC_DiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
 80008d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80008d8:	6043      	str	r3, [r0, #4]
 80008da:	4770      	bx	lr

080008dc <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80008dc:	2909      	cmp	r1, #9
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80008de:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80008e0:	d90d      	bls.n	80008fe <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80008e2:	f1a1 040a 	sub.w	r4, r1, #10
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80008e6:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80008e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80008ec:	2507      	movs	r5, #7
 80008ee:	40a5      	lsls	r5, r4
 80008f0:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80008f4:	fa03 f404 	lsl.w	r4, r3, r4
 80008f8:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80008fa:	60c4      	str	r4, [r0, #12]
 80008fc:	e00a      	b.n	8000914 <ADC_RegularChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80008fe:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000900:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000904:	2507      	movs	r5, #7
 8000906:	40a5      	lsls	r5, r4
 8000908:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 800090c:	fa03 f404 	lsl.w	r4, r3, r4
 8000910:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000912:	6104      	str	r4, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000914:	2a06      	cmp	r2, #6
 8000916:	d80c      	bhi.n	8000932 <ADC_RegularChannelConfig+0x56>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000918:	3a01      	subs	r2, #1
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800091a:	6b44      	ldr	r4, [r0, #52]	; 0x34
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800091c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000920:	231f      	movs	r3, #31
 8000922:	4093      	lsls	r3, r2
 8000924:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000928:	fa01 f202 	lsl.w	r2, r1, r2
 800092c:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800092e:	6342      	str	r2, [r0, #52]	; 0x34
 8000930:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000932:	2a0c      	cmp	r2, #12
 8000934:	d80c      	bhi.n	8000950 <ADC_RegularChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8000936:	3a07      	subs	r2, #7
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000938:	6b04      	ldr	r4, [r0, #48]	; 0x30
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800093a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800093e:	231f      	movs	r3, #31
 8000940:	4093      	lsls	r3, r2
 8000942:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000946:	fa01 f202 	lsl.w	r2, r1, r2
 800094a:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800094c:	6302      	str	r2, [r0, #48]	; 0x30
 800094e:	bd70      	pop	{r4, r5, r6, pc}
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000950:	3a0d      	subs	r2, #13
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000952:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000954:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000958:	231f      	movs	r3, #31
 800095a:	4093      	lsls	r3, r2
 800095c:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000960:	fa01 f202 	lsl.w	r2, r1, r2
 8000964:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000966:	62c2      	str	r2, [r0, #44]	; 0x2c
 8000968:	bd70      	pop	{r4, r5, r6, pc}

0800096a <ADC_ExternalTrigConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 800096a:	6883      	ldr	r3, [r0, #8]
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800096c:	b111      	cbz	r1, 8000974 <ADC_ExternalTrigConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 800096e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000972:	e001      	b.n	8000978 <ADC_ExternalTrigConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 8000974:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000978:	6083      	str	r3, [r0, #8]
 800097a:	4770      	bx	lr

0800097c <ADC_GetConversionValue>:
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800097c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 800097e:	b280      	uxth	r0, r0
 8000980:	4770      	bx	lr

08000982 <ADC_GetDualModeConversionValue>:
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
 8000982:	4b01      	ldr	r3, [pc, #4]	; (8000988 <ADC_GetDualModeConversionValue+0x6>)
 8000984:	6818      	ldr	r0, [r3, #0]
}
 8000986:	4770      	bx	lr
 8000988:	4001244c 	.word	0x4001244c

0800098c <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 800098c:	6843      	ldr	r3, [r0, #4]
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800098e:	b111      	cbz	r1, 8000996 <ADC_AutoInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 8000990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000994:	e001      	b.n	800099a <ADC_AutoInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
 8000996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800099a:	6043      	str	r3, [r0, #4]
 800099c:	4770      	bx	lr

0800099e <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 800099e:	6843      	ldr	r3, [r0, #4]
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009a0:	b111      	cbz	r1, 80009a8 <ADC_InjectedDiscModeCmd+0xa>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 80009a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a6:	e001      	b.n	80009ac <ADC_InjectedDiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 80009a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009ac:	6043      	str	r3, [r0, #4]
 80009ae:	4770      	bx	lr

080009b0 <ADC_ExternalTrigInjectedConvConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80009b0:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
 80009b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80009b6:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80009b8:	6081      	str	r1, [r0, #8]
 80009ba:	4770      	bx	lr

080009bc <ADC_ExternalTrigInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80009bc:	6883      	ldr	r3, [r0, #8]
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009be:	b111      	cbz	r1, 80009c6 <ADC_ExternalTrigInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 80009c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c4:	e001      	b.n	80009ca <ADC_ExternalTrigInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 80009c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009ca:	6083      	str	r3, [r0, #8]
 80009cc:	4770      	bx	lr

080009ce <ADC_SoftwareStartInjectedConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80009ce:	6883      	ldr	r3, [r0, #8]
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009d0:	b111      	cbz	r1, 80009d8 <ADC_SoftwareStartInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 80009d2:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 80009d6:	e001      	b.n	80009dc <ADC_SoftwareStartInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 80009d8:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 80009dc:	6083      	str	r3, [r0, #8]
 80009de:	4770      	bx	lr

080009e0 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 80009e0:	6880      	ldr	r0, [r0, #8]
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 80009e2:	f3c0 5040 	ubfx	r0, r0, #21, #1
 80009e6:	4770      	bx	lr

080009e8 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80009e8:	2909      	cmp	r1, #9
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80009ea:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80009ec:	d90d      	bls.n	8000a0a <ADC_InjectedChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 80009ee:	f1a1 040a 	sub.w	r4, r1, #10
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80009f2:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 80009f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80009f8:	2507      	movs	r5, #7
 80009fa:	40a5      	lsls	r5, r4
 80009fc:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000a00:	fa03 f404 	lsl.w	r4, r3, r4
 8000a04:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000a06:	60c4      	str	r4, [r0, #12]
 8000a08:	e00a      	b.n	8000a20 <ADC_InjectedChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000a0a:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000a0c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000a10:	2507      	movs	r5, #7
 8000a12:	40a5      	lsls	r5, r4
 8000a14:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000a18:	fa03 f404 	lsl.w	r4, r3, r4
 8000a1c:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000a1e:	6104      	str	r4, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000a20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000a22:	3202      	adds	r2, #2
 8000a24:	f3c3 5401 	ubfx	r4, r3, #20, #2
 8000a28:	1b12      	subs	r2, r2, r4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000a30:	241f      	movs	r4, #31
 8000a32:	4094      	lsls	r4, r2
 8000a34:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000a3c:	6381      	str	r1, [r0, #56]	; 0x38
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}

08000a40 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000a40:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8000a42:	3901      	subs	r1, #1
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
 8000a44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8000a48:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000a4c:	6383      	str	r3, [r0, #56]	; 0x38
 8000a4e:	4770      	bx	lr

08000a50 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8000a50:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
 8000a56:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 8000a58:	9b01      	ldr	r3, [sp, #4]
 8000a5a:	4419      	add	r1, r3
 8000a5c:	9101      	str	r1, [sp, #4]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8000a5e:	9b01      	ldr	r3, [sp, #4]
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	b002      	add	sp, #8
 8000a64:	4770      	bx	lr

08000a66 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8000a66:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8000a6c:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_Offset;
 8000a6e:	9b01      	ldr	r3, [sp, #4]
 8000a70:	3328      	adds	r3, #40	; 0x28
 8000a72:	4419      	add	r1, r3
 8000a74:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 8000a76:	9b01      	ldr	r3, [sp, #4]
 8000a78:	6818      	ldr	r0, [r3, #0]
}
 8000a7a:	b280      	uxth	r0, r0
 8000a7c:	b002      	add	sp, #8
 8000a7e:	4770      	bx	lr

08000a80 <ADC_AnalogWatchdogCmd>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000a80:	6843      	ldr	r3, [r0, #4]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
 8000a82:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000a8a:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000a8c:	6041      	str	r1, [r0, #4]
 8000a8e:	4770      	bx	lr

08000a90 <ADC_AnalogWatchdogThresholdsConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000a90:	6241      	str	r1, [r0, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8000a92:	6282      	str	r2, [r0, #40]	; 0x28
 8000a94:	4770      	bx	lr

08000a96 <ADC_AnalogWatchdogSingleChannelConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000a96:	6843      	ldr	r3, [r0, #4]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
 8000a98:	f023 031f 	bic.w	r3, r3, #31
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000a9c:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000a9e:	6041      	str	r1, [r0, #4]
 8000aa0:	4770      	bx	lr

08000aa2 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <ADC_TempSensorVrefintCmd+0x16>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8000aa4:	689a      	ldr	r2, [r3, #8]
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000aa6:	b110      	cbz	r0, 8000aae <ADC_TempSensorVrefintCmd+0xc>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8000aa8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000aac:	e001      	b.n	8000ab2 <ADC_TempSensorVrefintCmd+0x10>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8000aae:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40012400 	.word	0x40012400

08000abc <ADC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000abc:	6803      	ldr	r3, [r0, #0]
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000abe:	4219      	tst	r1, r3
}
 8000ac0:	bf14      	ite	ne
 8000ac2:	2001      	movne	r0, #1
 8000ac4:	2000      	moveq	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <ADC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000ac8:	43c9      	mvns	r1, r1
 8000aca:	6001      	str	r1, [r0, #0]
 8000acc:	4770      	bx	lr

08000ace <ADC_GetITStatus>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 8000ace:	6843      	ldr	r3, [r0, #4]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000ad0:	6800      	ldr	r0, [r0, #0]
 8000ad2:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 8000ad6:	d004      	beq.n	8000ae2 <ADC_GetITStatus+0x14>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000ad8:	b2c9      	uxtb	r1, r1
 8000ada:	4219      	tst	r1, r3
 8000adc:	bf14      	ite	ne
 8000ade:	2001      	movne	r0, #1
 8000ae0:	2000      	moveq	r0, #0
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 8000ae2:	4770      	bx	lr

08000ae4 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000ae4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8000ae8:	6001      	str	r1, [r0, #0]
 8000aea:	4770      	bx	lr

08000aec <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
 8000aec:	b508      	push	{r3, lr}
  RCC_BackupResetCmd(ENABLE);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f002 f82c 	bl	8002b4c <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
}
 8000af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void BKP_DeInit(void)
{
  RCC_BackupResetCmd(ENABLE);
  RCC_BackupResetCmd(DISABLE);
 8000af8:	2000      	movs	r0, #0
 8000afa:	f002 b827 	b.w	8002b4c <RCC_BackupResetCmd>

08000afe <BKP_TamperPinLevelConfig>:
  */
void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
{
  /* Check the parameters */
  assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
  *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
 8000afe:	4b01      	ldr	r3, [pc, #4]	; (8000b04 <BKP_TamperPinLevelConfig+0x6>)
 8000b00:	6018      	str	r0, [r3, #0]
 8000b02:	4770      	bx	lr
 8000b04:	420d8604 	.word	0x420d8604

08000b08 <BKP_TamperPinCmd>:
  */
void BKP_TamperPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
 8000b08:	4b01      	ldr	r3, [pc, #4]	; (8000b10 <BKP_TamperPinCmd+0x8>)
 8000b0a:	6018      	str	r0, [r3, #0]
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	420d8600 	.word	0x420d8600

08000b14 <BKP_ITConfig>:
  */
void BKP_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
 8000b14:	4b01      	ldr	r3, [pc, #4]	; (8000b1c <BKP_ITConfig+0x8>)
 8000b16:	6018      	str	r0, [r3, #0]
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	420d8688 	.word	0x420d8688

08000b20 <BKP_RTCOutputConfig>:
void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
{
  uint16_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
  tmpreg = BKP->RTCCR;
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <BKP_RTCOutputConfig+0x14>)
 8000b22:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
  /* Clear CCO, ASOE and ASOS bits */
  tmpreg &= RTCCR_MASK;
 8000b24:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8000b28:	041b      	lsls	r3, r3, #16
 8000b2a:	0c1b      	lsrs	r3, r3, #16
  
  /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
  tmpreg |= BKP_RTCOutputSource;
 8000b2c:	4318      	orrs	r0, r3
  /* Store the new value */
  BKP->RTCCR = tmpreg;
 8000b2e:	8590      	strh	r0, [r2, #44]	; 0x2c
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40006c00 	.word	0x40006c00

08000b38 <BKP_SetRTCCalibrationValue>:
void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
{
  uint16_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
  tmpreg = BKP->RTCCR;
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <BKP_SetRTCCalibrationValue+0x14>)
 8000b3a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
  /* Clear CAL[6:0] bits */
  tmpreg &= RTCCR_CAL_MASK;
 8000b3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000b40:	041b      	lsls	r3, r3, #16
 8000b42:	0c1b      	lsrs	r3, r3, #16
  /* Set CAL[6:0] bits according to CalibrationValue value */
  tmpreg |= CalibrationValue;
 8000b44:	4318      	orrs	r0, r3
  /* Store the new value */
  BKP->RTCCR = tmpreg;
 8000b46:	8590      	strh	r0, [r2, #44]	; 0x2c
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40006c00 	.word	0x40006c00

08000b50 <BKP_WriteBackupRegister>:
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
 8000b50:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <BKP_WriteBackupRegister+0x18>)
 8000b58:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 8000b5a:	9b01      	ldr	r3, [sp, #4]
 8000b5c:	4418      	add	r0, r3
 8000b5e:	9001      	str	r0, [sp, #4]

  *(__IO uint32_t *) tmp = Data;
 8000b60:	9b01      	ldr	r3, [sp, #4]
 8000b62:	6019      	str	r1, [r3, #0]
}
 8000b64:	b002      	add	sp, #8
 8000b66:	4770      	bx	lr
 8000b68:	40006c00 	.word	0x40006c00

08000b6c <BKP_ReadBackupRegister>:
  * @param  BKP_DR: specifies the Data Backup Register.
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @retval The content of the specified Data Backup Register
  */
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
{
 8000b6c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8000b72:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <BKP_ReadBackupRegister+0x1c>)
 8000b74:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 8000b76:	9b01      	ldr	r3, [sp, #4]
 8000b78:	4418      	add	r0, r3
 8000b7a:	9001      	str	r0, [sp, #4]

  return (*(__IO uint16_t *) tmp);
 8000b7c:	9b01      	ldr	r3, [sp, #4]
 8000b7e:	8818      	ldrh	r0, [r3, #0]
}
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b002      	add	sp, #8
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40006c00 	.word	0x40006c00

08000b8c <BKP_GetFlagStatus>:
  * @param  None
  * @retval The new state of the Tamper Pin Event flag (SET or RESET).
  */
FlagStatus BKP_GetFlagStatus(void)
{
  return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
 8000b8c:	4b01      	ldr	r3, [pc, #4]	; (8000b94 <BKP_GetFlagStatus+0x8>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
}
 8000b90:	b2c0      	uxtb	r0, r0
 8000b92:	4770      	bx	lr
 8000b94:	420d86a0 	.word	0x420d86a0

08000b98 <BKP_ClearFlag>:
  * @retval None
  */
void BKP_ClearFlag(void)
{
  /* Set CTE bit to clear Tamper Pin Event flag */
  BKP->CSR |= BKP_CSR_CTE;
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <BKP_ClearFlag+0x10>)
 8000b9a:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	8693      	strh	r3, [r2, #52]	; 0x34
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40006c00 	.word	0x40006c00

08000bac <BKP_GetITStatus>:
  * @param  None
  * @retval The new state of the Tamper Pin Interrupt (SET or RESET).
  */
ITStatus BKP_GetITStatus(void)
{
  return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
 8000bac:	4b01      	ldr	r3, [pc, #4]	; (8000bb4 <BKP_GetITStatus+0x8>)
 8000bae:	6818      	ldr	r0, [r3, #0]
}
 8000bb0:	b2c0      	uxtb	r0, r0
 8000bb2:	4770      	bx	lr
 8000bb4:	420d86a4 	.word	0x420d86a4

08000bb8 <BKP_ClearITPendingBit>:
  * @retval None
  */
void BKP_ClearITPendingBit(void)
{
  /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
  BKP->CSR |= BKP_CSR_CTI;
 8000bb8:	4a03      	ldr	r2, [pc, #12]	; (8000bc8 <BKP_ClearITPendingBit+0x10>)
 8000bba:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	8693      	strh	r3, [r2, #52]	; 0x34
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40006c00 	.word	0x40006c00

08000bcc <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000bcc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <CAN_DeInit+0x30>)
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000bd0:	2101      	movs	r1, #1
void CAN_DeInit(CAN_TypeDef* CANx)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d107      	bne.n	8000be6 <CAN_DeInit+0x1a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000bd6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000bda:	f001 ffab 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000bde:	2100      	movs	r1, #0
 8000be0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000be4:	e006      	b.n	8000bf4 <CAN_DeInit+0x28>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8000be6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bea:	f001 ffa3 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  }
}
 8000bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000bf8:	f001 bf9c 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 8000bfc:	40006400 	.word	0x40006400

08000c00 <CAN_Init>:
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000c00:	6803      	ldr	r3, [r0, #0]
 8000c02:	f023 0302 	bic.w	r3, r3, #2
 8000c06:	6003      	str	r3, [r0, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000c08:	6803      	ldr	r3, [r0, #0]
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6003      	str	r3, [r0, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c14:	6842      	ldr	r2, [r0, #4]
 8000c16:	07d2      	lsls	r2, r2, #31
 8000c18:	d401      	bmi.n	8000c1e <CAN_Init+0x1e>
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	d1fa      	bne.n	8000c14 <CAN_Init+0x14>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000c1e:	6843      	ldr	r3, [r0, #4]
 8000c20:	f013 0301 	ands.w	r3, r3, #1
 8000c24:	d055      	beq.n	8000cd2 <CAN_Init+0xd2>
    InitStatus = CAN_InitStatus_Failed;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000c26:	798b      	ldrb	r3, [r1, #6]
 8000c28:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	bf0c      	ite	eq
 8000c2e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000c32:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8000c36:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000c38:	79cb      	ldrb	r3, [r1, #7]
 8000c3a:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000c3c:	6803      	ldr	r3, [r0, #0]
 8000c3e:	bf0c      	ite	eq
 8000c40:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000c44:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000c48:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000c4a:	7a0b      	ldrb	r3, [r1, #8]
 8000c4c:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000c4e:	6803      	ldr	r3, [r0, #0]
 8000c50:	bf0c      	ite	eq
 8000c52:	f043 0320 	orreq.w	r3, r3, #32
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000c56:	f023 0320 	bicne.w	r3, r3, #32
 8000c5a:	6003      	str	r3, [r0, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000c5c:	7a4b      	ldrb	r3, [r1, #9]
 8000c5e:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_NART;
 8000c60:	6803      	ldr	r3, [r0, #0]
 8000c62:	bf0c      	ite	eq
 8000c64:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000c68:	f023 0310 	bicne.w	r3, r3, #16
 8000c6c:	6003      	str	r3, [r0, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000c6e:	7a8b      	ldrb	r3, [r1, #10]
 8000c70:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000c72:	6803      	ldr	r3, [r0, #0]
 8000c74:	bf0c      	ite	eq
 8000c76:	f043 0308 	orreq.w	r3, r3, #8
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000c7a:	f023 0308 	bicne.w	r3, r3, #8
 8000c7e:	6003      	str	r3, [r0, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000c80:	7acb      	ldrb	r3, [r1, #11]
 8000c82:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000c84:	6803      	ldr	r3, [r0, #0]
 8000c86:	bf0c      	ite	eq
 8000c88:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000c8c:	f023 0304 	bicne.w	r3, r3, #4
 8000c90:	6003      	str	r3, [r0, #0]

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000c92:	78cb      	ldrb	r3, [r1, #3]
 8000c94:	788a      	ldrb	r2, [r1, #2]
 8000c96:	061b      	lsls	r3, r3, #24
 8000c98:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000c9c:	790a      	ldrb	r2, [r1, #4]
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	794a      	ldrb	r2, [r1, #5]
 8000ca4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000ca8:	880a      	ldrh	r2, [r1, #0]
 8000caa:	3a01      	subs	r2, #1
 8000cac:	4313      	orrs	r3, r2
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000cae:	61c3      	str	r3, [r0, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000cb0:	6803      	ldr	r3, [r0, #0]
 8000cb2:	f023 0301 	bic.w	r3, r3, #1
 8000cb6:	6003      	str	r3, [r0, #0]

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cbc:	6842      	ldr	r2, [r0, #4]
 8000cbe:	07d2      	lsls	r2, r2, #31
 8000cc0:	d501      	bpl.n	8000cc6 <CAN_Init+0xc6>
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	d1fa      	bne.n	8000cbc <CAN_Init+0xbc>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000cc6:	6840      	ldr	r0, [r0, #4]
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  {
    InitStatus = CAN_InitStatus_Failed;
 8000cc8:	f000 0001 	and.w	r0, r0, #1
 8000ccc:	f080 0001 	eor.w	r0, r0, #1
 8000cd0:	4770      	bx	lr
 8000cd2:	4618      	mov	r0, r3
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
}
 8000cd4:	4770      	bx	lr

08000cd6 <CAN_FilterInit>:
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000cd6:	7a83      	ldrb	r3, [r0, #10]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
  *                               structure that contains the configuration 
  *                               information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000cde:	b570      	push	{r4, r5, r6, lr}

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000ce0:	43dc      	mvns	r4, r3
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000ce2:	4a33      	ldr	r2, [pc, #204]	; (8000db0 <CAN_FilterInit+0xda>)
 8000ce4:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8000ce8:	f041 0101 	orr.w	r1, r1, #1
 8000cec:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000cf0:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000cf4:	4021      	ands	r1, r4
 8000cf6:	f8c2 121c 	str.w	r1, [r2, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8000cfa:	7b01      	ldrb	r1, [r0, #12]
 8000cfc:	b9a1      	cbnz	r1, 8000d28 <CAN_FilterInit+0x52>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000cfe:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000d02:	88c6      	ldrh	r6, [r0, #6]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000d04:	4021      	ands	r1, r4
 8000d06:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000d0a:	7a81      	ldrb	r1, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000d0c:	8845      	ldrh	r5, [r0, #2]
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000d0e:	3148      	adds	r1, #72	; 0x48
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000d10:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000d14:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000d18:	8802      	ldrh	r2, [r0, #0]
 8000d1a:	8881      	ldrh	r1, [r0, #4]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000d1c:	7a85      	ldrb	r5, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000d1e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000d22:	4a24      	ldr	r2, [pc, #144]	; (8000db4 <CAN_FilterInit+0xde>)
 8000d24:	00ed      	lsls	r5, r5, #3
 8000d26:	5151      	str	r1, [r2, r5]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000d28:	7b02      	ldrb	r2, [r0, #12]
 8000d2a:	2a01      	cmp	r2, #1
 8000d2c:	d115      	bne.n	8000d5a <CAN_FilterInit+0x84>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <CAN_FilterInit+0xda>)
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000d30:	8806      	ldrh	r6, [r0, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000d32:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000d36:	8845      	ldrh	r5, [r0, #2]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000d38:	4319      	orrs	r1, r3
 8000d3a:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000d3e:	7a81      	ldrb	r1, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000d40:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000d44:	3148      	adds	r1, #72	; 0x48
 8000d46:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000d4a:	88c2      	ldrh	r2, [r0, #6]
 8000d4c:	8881      	ldrh	r1, [r0, #4]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000d4e:	7a85      	ldrb	r5, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000d50:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <CAN_FilterInit+0xde>)
 8000d56:	00ed      	lsls	r5, r5, #3
 8000d58:	5151      	str	r1, [r2, r5]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000d5a:	7ac2      	ldrb	r2, [r0, #11]
 8000d5c:	4914      	ldr	r1, [pc, #80]	; (8000db0 <CAN_FilterInit+0xda>)
 8000d5e:	b91a      	cbnz	r2, 8000d68 <CAN_FilterInit+0x92>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000d60:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 8000d64:	4022      	ands	r2, r4
 8000d66:	e002      	b.n	8000d6e <CAN_FilterInit+0x98>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000d68:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 8000d6c:	431a      	orrs	r2, r3
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000d6e:	8905      	ldrh	r5, [r0, #8]
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000d70:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <CAN_FilterInit+0xda>)
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000d76:	b92d      	cbnz	r5, 8000d84 <CAN_FilterInit+0xae>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000d78:	f8d1 5214 	ldr.w	r5, [r1, #532]	; 0x214
 8000d7c:	402c      	ands	r4, r5
 8000d7e:	f8c1 4214 	str.w	r4, [r1, #532]	; 0x214
 8000d82:	e006      	b.n	8000d92 <CAN_FilterInit+0xbc>
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000d84:	2d01      	cmp	r5, #1
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000d86:	bf02      	ittt	eq
 8000d88:	f8d2 1214 	ldreq.w	r1, [r2, #532]	; 0x214
 8000d8c:	4319      	orreq	r1, r3
 8000d8e:	f8c2 1214 	streq.w	r1, [r2, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8000d92:	7b41      	ldrb	r1, [r0, #13]
 8000d94:	2901      	cmp	r1, #1
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000d96:	bf02      	ittt	eq
 8000d98:	f8d2 121c 	ldreq.w	r1, [r2, #540]	; 0x21c
 8000d9c:	430b      	orreq	r3, r1
 8000d9e:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000da2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	40006400 	.word	0x40006400
 8000db4:	40006644 	.word	0x40006644

08000db8 <CAN_StructInit>:
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	7183      	strb	r3, [r0, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8000dbc:	71c3      	strb	r3, [r0, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8000dbe:	7203      	strb	r3, [r0, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8000dc0:	7243      	strb	r3, [r0, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8000dc2:	7283      	strb	r3, [r0, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8000dc4:	72c3      	strb	r3, [r0, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8000dc6:	7083      	strb	r3, [r0, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8000dc8:	70c3      	strb	r3, [r0, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	7103      	strb	r3, [r0, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	7143      	strb	r3, [r0, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	8003      	strh	r3, [r0, #0]
 8000dd6:	4770      	bx	lr

08000dd8 <CAN_SlaveStartBank>:
{
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <CAN_SlaveStartBank+0x38>)
 8000dda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000dde:	f042 0201 	orr.w	r2, r2, #1
 8000de2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8000de6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000dea:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000dee:	f022 020e 	bic.w	r2, r2, #14
 8000df2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8000df6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000dfa:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000dfe:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000e02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000e0e:	4770      	bx	lr
 8000e10:	40006400 	.word	0x40006400

08000e14 <CAN_DBGFreeze>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000e14:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e16:	b111      	cbz	r1, 8000e1e <CAN_DBGFreeze+0xa>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1c:	e001      	b.n	8000e22 <CAN_DBGFreeze+0xe>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8000e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e22:	6003      	str	r3, [r0, #0]
 8000e24:	4770      	bx	lr

08000e26 <CAN_TTComModeCmd>:
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000e26:	6803      	ldr	r3, [r0, #0]
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000e28:	b199      	cbz	r1, 8000e52 <CAN_TTComModeCmd+0x2c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2e:	6003      	str	r3, [r0, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8000e30:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8000e3c:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8000e48:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	e012      	b.n	8000e78 <CAN_TTComModeCmd+0x52>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8000e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e56:	6003      	str	r3, [r0, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8000e58:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e60:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8000e64:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e6c:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8000e70:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e78:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 8000e7c:	4770      	bx	lr

08000e7e <CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000e7e:	6883      	ldr	r3, [r0, #8]
  *                    DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission
  *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000e80:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000e82:	015c      	lsls	r4, r3, #5
 8000e84:	d407      	bmi.n	8000e96 <CAN_Transmit+0x18>
  {
    transmit_mailbox = 0;
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000e86:	6883      	ldr	r3, [r0, #8]
 8000e88:	011a      	lsls	r2, r3, #4
 8000e8a:	d406      	bmi.n	8000e9a <CAN_Transmit+0x1c>
  {
    transmit_mailbox = 1;
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000e8c:	6883      	ldr	r3, [r0, #8]
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	d405      	bmi.n	8000e9e <CAN_Transmit+0x20>
  {
    transmit_mailbox = 2;
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000e92:	2404      	movs	r4, #4
 8000e94:	e03e      	b.n	8000f14 <CAN_Transmit+0x96>
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
  {
    transmit_mailbox = 0;
 8000e96:	2400      	movs	r4, #0
 8000e98:	e002      	b.n	8000ea0 <CAN_Transmit+0x22>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
  {
    transmit_mailbox = 1;
 8000e9a:	2401      	movs	r4, #1
 8000e9c:	e000      	b.n	8000ea0 <CAN_Transmit+0x22>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
  {
    transmit_mailbox = 2;
 8000e9e:	2402      	movs	r4, #2
 8000ea0:	0125      	lsls	r5, r4, #4
 8000ea2:	1943      	adds	r3, r0, r5
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8000ea4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000ea8:	f002 0201 	and.w	r2, r2, #1
 8000eac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    if (TxMessage->IDE == CAN_Id_Standard)
 8000eb0:	7a0e      	ldrb	r6, [r1, #8]
 8000eb2:	7a4a      	ldrb	r2, [r1, #9]
 8000eb4:	b92e      	cbnz	r6, 8000ec2 <CAN_Transmit+0x44>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000eb6:	680f      	ldr	r7, [r1, #0]
 8000eb8:	f8d3 6180 	ldr.w	r6, [r3, #384]	; 0x180
 8000ebc:	ea42 5247 	orr.w	r2, r2, r7, lsl #21
 8000ec0:	e006      	b.n	8000ed0 <CAN_Transmit+0x52>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000ec2:	684f      	ldr	r7, [r1, #4]
 8000ec4:	f8d3 e180 	ldr.w	lr, [r3, #384]	; 0x180
 8000ec8:	ea46 06c7 	orr.w	r6, r6, r7, lsl #3
 8000ecc:	ea46 060e 	orr.w	r6, r6, lr
 8000ed0:	4332      	orrs	r2, r6
 8000ed2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000ed6:	7a8a      	ldrb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000ed8:	4428      	add	r0, r5
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000eda:	f002 020f 	and.w	r2, r2, #15
 8000ede:	728a      	strb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000ee0:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000ee4:	f022 020f 	bic.w	r2, r2, #15
 8000ee8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8000eec:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000ef0:	7a8e      	ldrb	r6, [r1, #10]
 8000ef2:	4332      	orrs	r2, r6
 8000ef4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8000ef8:	f8d1 200b 	ldr.w	r2, [r1, #11]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000efc:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000f00:	f8d1 200f 	ldr.w	r2, [r1, #15]
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000f04:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8000f08:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000f0c:	f042 0201 	orr.w	r2, r2, #1
 8000f10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
  return transmit_mailbox;
}
 8000f14:	4620      	mov	r0, r4
 8000f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f18 <CAN_TransmitStatus>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8000f18:	2901      	cmp	r1, #1
 8000f1a:	d008      	beq.n	8000f2e <CAN_TransmitStatus+0x16>
 8000f1c:	d304      	bcc.n	8000f28 <CAN_TransmitStatus+0x10>
 8000f1e:	2902      	cmp	r1, #2
 8000f20:	d118      	bne.n	8000f54 <CAN_TransmitStatus+0x3c>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000f22:	6882      	ldr	r2, [r0, #8]
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <CAN_TransmitStatus+0x40>)
 8000f26:	e004      	b.n	8000f32 <CAN_TransmitStatus+0x1a>
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8000f28:	6882      	ldr	r2, [r0, #8]
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <CAN_TransmitStatus+0x44>)
 8000f2c:	e001      	b.n	8000f32 <CAN_TransmitStatus+0x1a>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8000f2e:	6882      	ldr	r2, [r0, #8]
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <CAN_TransmitStatus+0x48>)
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000f32:	4013      	ands	r3, r2
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <CAN_TransmitStatus+0x44>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00a      	beq.n	8000f50 <CAN_TransmitStatus+0x38>
 8000f3a:	d801      	bhi.n	8000f40 <CAN_TransmitStatus+0x28>
 8000f3c:	b933      	cbnz	r3, 8000f4c <CAN_TransmitStatus+0x34>
 8000f3e:	e009      	b.n	8000f54 <CAN_TransmitStatus+0x3c>
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <CAN_TransmitStatus+0x48>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d004      	beq.n	8000f50 <CAN_TransmitStatus+0x38>
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <CAN_TransmitStatus+0x40>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d001      	beq.n	8000f50 <CAN_TransmitStatus+0x38>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
      break;
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	4770      	bx	lr
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8000f50:	2001      	movs	r0, #1
      break;
 8000f52:	4770      	bx	lr
      break;
  }
  switch (state)
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8000f54:	2002      	movs	r0, #2
      break;
    default: state = CAN_TxStatus_Failed;
      break;
  }
  return (uint8_t) state;
}
 8000f56:	4770      	bx	lr
 8000f58:	10030000 	.word	0x10030000
 8000f5c:	04000003 	.word	0x04000003
 8000f60:	08000300 	.word	0x08000300

08000f64 <CAN_CancelTransmit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8000f64:	2901      	cmp	r1, #1
 8000f66:	d007      	beq.n	8000f78 <CAN_CancelTransmit+0x14>
 8000f68:	d302      	bcc.n	8000f70 <CAN_CancelTransmit+0xc>
 8000f6a:	2902      	cmp	r1, #2
 8000f6c:	d008      	beq.n	8000f80 <CAN_CancelTransmit+0x1c>
 8000f6e:	4770      	bx	lr
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8000f70:	6883      	ldr	r3, [r0, #8]
 8000f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f76:	e006      	b.n	8000f86 <CAN_CancelTransmit+0x22>
      break;
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8000f78:	6883      	ldr	r3, [r0, #8]
 8000f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7e:	e002      	b.n	8000f86 <CAN_CancelTransmit+0x22>
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8000f80:	6883      	ldr	r3, [r0, #8]
 8000f82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f86:	6083      	str	r3, [r0, #8]
 8000f88:	4770      	bx	lr

08000f8a <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000f8a:	010b      	lsls	r3, r1, #4
 8000f8c:	b530      	push	{r4, r5, lr}
 8000f8e:	18c4      	adds	r4, r0, r3
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000f90:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000f94:	f005 0504 	and.w	r5, r5, #4
 8000f98:	b2ed      	uxtb	r5, r5
 8000f9a:	7215      	strb	r5, [r2, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000f9c:	b925      	cbnz	r5, 8000fa8 <CAN_Receive+0x1e>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000f9e:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000fa2:	0d6d      	lsrs	r5, r5, #21
 8000fa4:	6015      	str	r5, [r2, #0]
 8000fa6:	e003      	b.n	8000fb0 <CAN_Receive+0x26>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000fa8:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000fac:	08ed      	lsrs	r5, r5, #3
 8000fae:	6055      	str	r5, [r2, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000fb0:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000fb4:	4403      	add	r3, r0
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000fb6:	f005 0502 	and.w	r5, r5, #2
 8000fba:	7255      	strb	r5, [r2, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000fbc:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
 8000fc0:	f005 050f 	and.w	r5, r5, #15
 8000fc4:	7295      	strb	r5, [r2, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000fc6:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
 8000fca:	0a24      	lsrs	r4, r4, #8
 8000fcc:	74d4      	strb	r4, [r2, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000fce:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000fd2:	72d4      	strb	r4, [r2, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000fd4:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000fd8:	0a24      	lsrs	r4, r4, #8
 8000fda:	7314      	strb	r4, [r2, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000fdc:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000fe0:	0c24      	lsrs	r4, r4, #16
 8000fe2:	7354      	strb	r4, [r2, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000fe4:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000fe8:	0e24      	lsrs	r4, r4, #24
 8000fea:	7394      	strb	r4, [r2, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000fec:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000ff0:	73d4      	strb	r4, [r2, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000ff2:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000ff6:	0a24      	lsrs	r4, r4, #8
 8000ff8:	7414      	strb	r4, [r2, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000ffa:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000ffe:	0c24      	lsrs	r4, r4, #16
 8001000:	7454      	strb	r4, [r2, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8001002:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001006:	0e1b      	lsrs	r3, r3, #24
 8001008:	7493      	strb	r3, [r2, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 800100a:	b921      	cbnz	r1, 8001016 <CAN_Receive+0x8c>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800100c:	68c3      	ldr	r3, [r0, #12]
 800100e:	f043 0320 	orr.w	r3, r3, #32
 8001012:	60c3      	str	r3, [r0, #12]
 8001014:	bd30      	pop	{r4, r5, pc}
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8001016:	6903      	ldr	r3, [r0, #16]
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6103      	str	r3, [r0, #16]
 800101e:	bd30      	pop	{r4, r5, pc}

08001020 <CAN_FIFORelease>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001020:	b921      	cbnz	r1, 800102c <CAN_FIFORelease+0xc>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8001022:	68c3      	ldr	r3, [r0, #12]
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	60c3      	str	r3, [r0, #12]
 800102a:	4770      	bx	lr
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800102c:	6903      	ldr	r3, [r0, #16]
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	6103      	str	r3, [r0, #16]
 8001034:	4770      	bx	lr

08001036 <CAN_MessagePending>:
{
  uint8_t message_pending=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8001036:	b909      	cbnz	r1, 800103c <CAN_MessagePending+0x6>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8001038:	68c0      	ldr	r0, [r0, #12]
 800103a:	e002      	b.n	8001042 <CAN_MessagePending+0xc>
  }
  else if (FIFONumber == CAN_FIFO1)
 800103c:	2901      	cmp	r1, #1
 800103e:	d103      	bne.n	8001048 <CAN_MessagePending+0x12>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8001040:	6900      	ldr	r0, [r0, #16]
 8001042:	f000 0003 	and.w	r0, r0, #3
 8001046:	4770      	bx	lr
  }
  else
  {
    message_pending = 0;
 8001048:	2000      	movs	r0, #0
  }
  return message_pending;
}
 800104a:	4770      	bx	lr

0800104c <CAN_OperatingModeRequest>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 800104c:	b999      	cbnz	r1, 8001076 <CAN_OperatingModeRequest+0x2a>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 800104e:	6803      	ldr	r3, [r0, #0]
 8001050:	f023 0303 	bic.w	r3, r3, #3
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 800105a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105e:	6842      	ldr	r2, [r0, #4]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	2a01      	cmp	r2, #1
 8001066:	d001      	beq.n	800106c <CAN_OperatingModeRequest+0x20>
 8001068:	3b01      	subs	r3, #1
 800106a:	d1f8      	bne.n	800105e <CAN_OperatingModeRequest+0x12>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 800106c:	6840      	ldr	r0, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800106e:	f000 0003 	and.w	r0, r0, #3
 8001072:	2801      	cmp	r0, #1
 8001074:	e028      	b.n	80010c8 <CAN_OperatingModeRequest+0x7c>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8001076:	2901      	cmp	r1, #1
 8001078:	d111      	bne.n	800109e <CAN_OperatingModeRequest+0x52>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 800107a:	6803      	ldr	r3, [r0, #0]
 800107c:	f023 0303 	bic.w	r3, r3, #3
 8001080:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8001082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001086:	6842      	ldr	r2, [r0, #4]
 8001088:	0792      	lsls	r2, r2, #30
 800108a:	d001      	beq.n	8001090 <CAN_OperatingModeRequest+0x44>
 800108c:	3b01      	subs	r3, #1
 800108e:	d1fa      	bne.n	8001086 <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8001090:	6843      	ldr	r3, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001092:	f013 0f03 	tst.w	r3, #3
 8001096:	bf0c      	ite	eq
 8001098:	2001      	moveq	r0, #1
 800109a:	2000      	movne	r0, #0
 800109c:	4770      	bx	lr
    else
    {
      status = CAN_ModeStatus_Success;
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 800109e:	2902      	cmp	r1, #2
 80010a0:	d116      	bne.n	80010d0 <CAN_OperatingModeRequest+0x84>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80010a2:	6803      	ldr	r3, [r0, #0]
 80010a4:	f023 0303 	bic.w	r3, r3, #3
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 80010ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b2:	6842      	ldr	r2, [r0, #4]
 80010b4:	f002 0203 	and.w	r2, r2, #3
 80010b8:	2a02      	cmp	r2, #2
 80010ba:	d001      	beq.n	80010c0 <CAN_OperatingModeRequest+0x74>
 80010bc:	3b01      	subs	r3, #1
 80010be:	d1f8      	bne.n	80010b2 <CAN_OperatingModeRequest+0x66>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 80010c0:	6840      	ldr	r0, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80010c2:	f000 0003 	and.w	r0, r0, #3
 80010c6:	2802      	cmp	r0, #2
 80010c8:	bf14      	ite	ne
 80010ca:	2000      	movne	r0, #0
 80010cc:	2001      	moveq	r0, #1
 80010ce:	4770      	bx	lr
      status = CAN_ModeStatus_Success;
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 80010d0:	2000      	movs	r0, #0
  }

  return  (uint8_t) status;
}
 80010d2:	4770      	bx	lr

080010d4 <CAN_Sleep>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80010d4:	6803      	ldr	r3, [r0, #0]
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	6003      	str	r3, [r0, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80010e0:	6840      	ldr	r0, [r0, #4]
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80010e2:	f000 0003 	and.w	r0, r0, #3
}
 80010e6:	1e83      	subs	r3, r0, #2
 80010e8:	4258      	negs	r0, r3
 80010ea:	4158      	adcs	r0, r3
 80010ec:	4770      	bx	lr

080010ee <CAN_WakeUp>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 80010ee:	6803      	ldr	r3, [r0, #0]
 80010f0:	f023 0302 	bic.w	r3, r3, #2
 80010f4:	6003      	str	r3, [r0, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 80010f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010fa:	6842      	ldr	r2, [r0, #4]
 80010fc:	0792      	lsls	r2, r2, #30
 80010fe:	d501      	bpl.n	8001104 <CAN_WakeUp+0x16>
 8001100:	3b01      	subs	r3, #1
 8001102:	d1fa      	bne.n	80010fa <CAN_WakeUp+0xc>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8001104:	6840      	ldr	r0, [r0, #4]
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8001106:	f080 0002 	eor.w	r0, r0, #2
}
 800110a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800110e:	4770      	bx	lr

08001110 <CAN_GetLastErrorCode>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8001110:	6980      	ldr	r0, [r0, #24]
  
  /* Return the error code*/
  return errorcode;
}
 8001112:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001116:	4770      	bx	lr

08001118 <CAN_GetReceiveErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8001118:	6980      	ldr	r0, [r0, #24]
  
  /* Return the Receive Error Counter*/
  return counter;
}
 800111a:	0e00      	lsrs	r0, r0, #24
 800111c:	4770      	bx	lr

0800111e <CAN_GetLSBTransmitErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 800111e:	6980      	ldr	r0, [r0, #24]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
}
 8001120:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001124:	4770      	bx	lr

08001126 <CAN_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8001126:	6943      	ldr	r3, [r0, #20]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001128:	b10a      	cbz	r2, 800112e <CAN_ITConfig+0x8>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 800112a:	4319      	orrs	r1, r3
 800112c:	e001      	b.n	8001132 <CAN_ITConfig+0xc>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 800112e:	ea23 0101 	bic.w	r1, r3, r1
 8001132:	6141      	str	r1, [r0, #20]
 8001134:	4770      	bx	lr

08001136 <CAN_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8001136:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800113a:	d001      	beq.n	8001140 <CAN_GetFlagStatus+0xa>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800113c:	6983      	ldr	r3, [r0, #24]
 800113e:	e00b      	b.n	8001158 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8001140:	01cb      	lsls	r3, r1, #7
 8001142:	d501      	bpl.n	8001148 <CAN_GetFlagStatus+0x12>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001144:	6843      	ldr	r3, [r0, #4]
 8001146:	e007      	b.n	8001158 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8001148:	010a      	lsls	r2, r1, #4
 800114a:	d501      	bpl.n	8001150 <CAN_GetFlagStatus+0x1a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800114c:	6883      	ldr	r3, [r0, #8]
 800114e:	e003      	b.n	8001158 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8001150:	018b      	lsls	r3, r1, #6
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001152:	bf4c      	ite	mi
 8001154:	68c3      	ldrmi	r3, [r0, #12]
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001156:	6903      	ldrpl	r3, [r0, #16]
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8001158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800115c:	420b      	tst	r3, r1
 800115e:	bf14      	ite	ne
 8001160:	2001      	movne	r0, #1
 8001162:	2000      	moveq	r0, #0
      bitstatus = RESET;
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
}
 8001164:	4770      	bx	lr

08001166 <CAN_ClearFlag>:
  uint32_t flagtmp=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <CAN_ClearFlag+0x2a>)
 8001168:	4299      	cmp	r1, r3
 800116a:	d102      	bne.n	8001172 <CAN_ClearFlag+0xc>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	6183      	str	r3, [r0, #24]
 8001170:	4770      	bx	lr
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8001172:	018a      	lsls	r2, r1, #6
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8001174:	f3c1 0313 	ubfx	r3, r1, #0, #20

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8001178:	d501      	bpl.n	800117e <CAN_ClearFlag+0x18>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 800117a:	60c3      	str	r3, [r0, #12]
 800117c:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 800117e:	014a      	lsls	r2, r1, #5
 8001180:	d501      	bpl.n	8001186 <CAN_ClearFlag+0x20>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8001182:	6103      	str	r3, [r0, #16]
 8001184:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8001186:	010a      	lsls	r2, r1, #4
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8001188:	bf4c      	ite	mi
 800118a:	6083      	strmi	r3, [r0, #8]
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 800118c:	6043      	strpl	r3, [r0, #4]
 800118e:	4770      	bx	lr
 8001190:	30f00070 	.word	0x30f00070

08001194 <CAN_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 8001194:	6943      	ldr	r3, [r0, #20]
 8001196:	400b      	ands	r3, r1
 8001198:	d05c      	beq.n	8001254 <CAN_GetITStatus+0xc0>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 800119a:	2940      	cmp	r1, #64	; 0x40
 800119c:	d042      	beq.n	8001224 <CAN_GetITStatus+0x90>
 800119e:	d810      	bhi.n	80011c2 <CAN_GetITStatus+0x2e>
 80011a0:	2904      	cmp	r1, #4
 80011a2:	d033      	beq.n	800120c <CAN_GetITStatus+0x78>
 80011a4:	d805      	bhi.n	80011b2 <CAN_GetITStatus+0x1e>
 80011a6:	2901      	cmp	r1, #1
 80011a8:	d027      	beq.n	80011fa <CAN_GetITStatus+0x66>
 80011aa:	2902      	cmp	r1, #2
 80011ac:	d154      	bne.n	8001258 <CAN_GetITStatus+0xc4>
               /* Check CAN_TSR_RQCPx bits */
	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
	      break;
      case CAN_IT_FMP0:
               /* Check CAN_RF0R_FMP0 bit */
	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80011ae:	68c0      	ldr	r0, [r0, #12]
 80011b0:	e02f      	b.n	8001212 <CAN_GetITStatus+0x7e>
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 80011b2:	2910      	cmp	r1, #16
 80011b4:	d02c      	beq.n	8001210 <CAN_GetITStatus+0x7c>
 80011b6:	2920      	cmp	r1, #32
 80011b8:	d030      	beq.n	800121c <CAN_GetITStatus+0x88>
 80011ba:	2908      	cmp	r1, #8
 80011bc:	d14c      	bne.n	8001258 <CAN_GetITStatus+0xc4>
               /* Check CAN_RF0R_FULL0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
	      break;
      case CAN_IT_FOV0:
               /* Check CAN_RF0R_FOVR0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 80011be:	68c0      	ldr	r0, [r0, #12]
 80011c0:	e035      	b.n	800122e <CAN_GetITStatus+0x9a>
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 80011c2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80011c6:	d03b      	beq.n	8001240 <CAN_GetITStatus+0xac>
 80011c8:	d80c      	bhi.n	80011e4 <CAN_GetITStatus+0x50>
 80011ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80011ce:	d031      	beq.n	8001234 <CAN_GetITStatus+0xa0>
 80011d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80011d4:	d032      	beq.n	800123c <CAN_GetITStatus+0xa8>
 80011d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80011da:	d13d      	bne.n	8001258 <CAN_GetITStatus+0xc4>
               /* Check CAN_MSR_SLAKI bit */
	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
	      break;
      case CAN_IT_EWG:
               /* Check CAN_ESR_EWGF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 80011dc:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 80011de:	f000 0001 	and.w	r0, r0, #1
 80011e2:	4770      	bx	lr
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 80011e4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80011e8:	d01e      	beq.n	8001228 <CAN_GetITStatus+0x94>
 80011ea:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80011ee:	d01d      	beq.n	800122c <CAN_GetITStatus+0x98>
 80011f0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80011f4:	d130      	bne.n	8001258 <CAN_GetITStatus+0xc4>
               /* Check CAN_ESR_LEC bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
	      break;
      case CAN_IT_ERR:
               /* Check CAN_MSR_ERRI bit */ 
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80011f6:	6840      	ldr	r0, [r0, #4]
 80011f8:	e029      	b.n	800124e <CAN_GetITStatus+0xba>
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
    {
      case CAN_IT_TME:
               /* Check CAN_TSR_RQCPx bits */
	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80011fa:	6880      	ldr	r0, [r0, #8]
  ITStatus pendingbitstatus = RESET;
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 80011fc:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8001200:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8001204:	3000      	adds	r0, #0
 8001206:	bf18      	it	ne
 8001208:	2001      	movne	r0, #1
 800120a:	4770      	bx	lr
               /* Check CAN_RF0R_FMP0 bit */
	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
	      break;
      case CAN_IT_FF0:
               /* Check CAN_RF0R_FULL0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800120c:	68c0      	ldr	r0, [r0, #12]
 800120e:	e006      	b.n	800121e <CAN_GetITStatus+0x8a>
               /* Check CAN_RF0R_FOVR0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
	      break;
      case CAN_IT_FMP1:
               /* Check CAN_RF1R_FMP1 bit */
               itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8001210:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001212:	f010 0003 	ands.w	r0, r0, #3
 8001216:	bf18      	it	ne
 8001218:	2001      	movne	r0, #1
 800121a:	4770      	bx	lr
               /* Check CAN_RF1R_FMP1 bit */
               itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
	      break;
      case CAN_IT_FF1:
               /* Check CAN_RF1R_FULL1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 800121c:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800121e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001222:	4770      	bx	lr
               /* Check CAN_RF1R_FULL1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
	      break;
      case CAN_IT_FOV1:
               /* Check CAN_RF1R_FOVR1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8001224:	6900      	ldr	r0, [r0, #16]
 8001226:	e002      	b.n	800122e <CAN_GetITStatus+0x9a>
	      break;
      case CAN_IT_WKU:
               /* Check CAN_MSR_WKUI bit */
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8001228:	6840      	ldr	r0, [r0, #4]
 800122a:	e7f8      	b.n	800121e <CAN_GetITStatus+0x8a>
	      break;
      case CAN_IT_SLK:
               /* Check CAN_MSR_SLAKI bit */
	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 800122c:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800122e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001232:	4770      	bx	lr
               /* Check CAN_ESR_EWGF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
	      break;
      case CAN_IT_EPV:
               /* Check CAN_ESR_EPVF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8001234:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001236:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800123a:	4770      	bx	lr
               /* Check CAN_ESR_EPVF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
	      break;
      case CAN_IT_BOF:
               /* Check CAN_ESR_BOFF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 800123c:	6980      	ldr	r0, [r0, #24]
 800123e:	e006      	b.n	800124e <CAN_GetITStatus+0xba>
	      break;
      case CAN_IT_LEC:
               /* Check CAN_ESR_LEC bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8001240:	6983      	ldr	r3, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001242:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001246:	bf14      	ite	ne
 8001248:	2001      	movne	r0, #1
 800124a:	2000      	moveq	r0, #0
 800124c:	4770      	bx	lr
 800124e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001252:	4770      	bx	lr
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8001254:	4618      	mov	r0, r3
 8001256:	4770      	bx	lr
               /* Check CAN_MSR_ERRI bit */ 
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
	      break;
      default :
               /* in case of error, return RESET */
              itstatus = RESET;
 8001258:	2000      	movs	r0, #0
    itstatus  = RESET;
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
}
 800125a:	4770      	bx	lr

0800125c <CAN_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800125c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001260:	d035      	beq.n	80012ce <CAN_ClearITPendingBit+0x72>
 8001262:	d80c      	bhi.n	800127e <CAN_ClearITPendingBit+0x22>
 8001264:	2908      	cmp	r1, #8
 8001266:	d024      	beq.n	80012b2 <CAN_ClearITPendingBit+0x56>
 8001268:	d804      	bhi.n	8001274 <CAN_ClearITPendingBit+0x18>
 800126a:	2901      	cmp	r1, #1
 800126c:	d01c      	beq.n	80012a8 <CAN_ClearITPendingBit+0x4c>
 800126e:	2904      	cmp	r1, #4
 8001270:	d01d      	beq.n	80012ae <CAN_ClearITPendingBit+0x52>
 8001272:	4770      	bx	lr
 8001274:	2920      	cmp	r1, #32
 8001276:	d01f      	beq.n	80012b8 <CAN_ClearITPendingBit+0x5c>
 8001278:	2940      	cmp	r1, #64	; 0x40
 800127a:	d01f      	beq.n	80012bc <CAN_ClearITPendingBit+0x60>
 800127c:	4770      	bx	lr
 800127e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001282:	d022      	beq.n	80012ca <CAN_ClearITPendingBit+0x6e>
 8001284:	d806      	bhi.n	8001294 <CAN_ClearITPendingBit+0x38>
 8001286:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800128a:	d020      	beq.n	80012ce <CAN_ClearITPendingBit+0x72>
 800128c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001290:	d01d      	beq.n	80012ce <CAN_ClearITPendingBit+0x72>
 8001292:	4770      	bx	lr
 8001294:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001298:	d013      	beq.n	80012c2 <CAN_ClearITPendingBit+0x66>
 800129a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800129e:	d012      	beq.n	80012c6 <CAN_ClearITPendingBit+0x6a>
 80012a0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80012a4:	d115      	bne.n	80012d2 <CAN_ClearITPendingBit+0x76>
 80012a6:	e010      	b.n	80012ca <CAN_ClearITPendingBit+0x6e>
  {
      case CAN_IT_TME:
              /* Clear CAN_TSR_RQCPx (rc_w1)*/
	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <CAN_ClearITPendingBit+0x78>)
 80012aa:	6083      	str	r3, [r0, #8]
	      break;
 80012ac:	4770      	bx	lr
      case CAN_IT_FF0:
              /* Clear CAN_RF0R_FULL0 (rc_w1)*/
	      CANx->RF0R = CAN_RF0R_FULL0; 
 80012ae:	2308      	movs	r3, #8
 80012b0:	e000      	b.n	80012b4 <CAN_ClearITPendingBit+0x58>
	      break;
      case CAN_IT_FOV0:
              /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
	      CANx->RF0R = CAN_RF0R_FOVR0; 
 80012b2:	2310      	movs	r3, #16
 80012b4:	60c3      	str	r3, [r0, #12]
	      break;
 80012b6:	4770      	bx	lr
      case CAN_IT_FF1:
              /* Clear CAN_RF1R_FULL1 (rc_w1)*/
	      CANx->RF1R = CAN_RF1R_FULL1;  
 80012b8:	2308      	movs	r3, #8
 80012ba:	e000      	b.n	80012be <CAN_ClearITPendingBit+0x62>
	      break;
      case CAN_IT_FOV1:
              /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
	      CANx->RF1R = CAN_RF1R_FOVR1; 
 80012bc:	2310      	movs	r3, #16
 80012be:	6103      	str	r3, [r0, #16]
	      break;
 80012c0:	4770      	bx	lr
      case CAN_IT_WKU:
              /* Clear CAN_MSR_WKUI (rc_w1)*/
	      CANx->MSR = CAN_MSR_WKUI;  
 80012c2:	2308      	movs	r3, #8
 80012c4:	e004      	b.n	80012d0 <CAN_ClearITPendingBit+0x74>
	      break;
      case CAN_IT_SLK:
              /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
	      CANx->MSR = CAN_MSR_SLAKI;   
 80012c6:	2310      	movs	r3, #16
 80012c8:	e002      	b.n	80012d0 <CAN_ClearITPendingBit+0x74>
              /* Clear CAN_MSR_ERRI (rc_w1) */
	      CANx->MSR = CAN_MSR_ERRI; 
	      break;
      case CAN_IT_ERR:
              /*Clear LEC bits */
	      CANx->ESR = RESET; 
 80012ca:	2300      	movs	r3, #0
 80012cc:	6183      	str	r3, [r0, #24]
              /* Clear CAN_MSR_ERRI (rc_w1) */
	      CANx->MSR = CAN_MSR_ERRI; 
 80012ce:	2304      	movs	r3, #4
 80012d0:	6043      	str	r3, [r0, #4]
 80012d2:	4770      	bx	lr
 80012d4:	00010101 	.word	0x00010101

080012d8 <CEC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void CEC_DeInit(void)
{
 80012d8:	b508      	push	{r3, lr}
  /* Enable CEC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
 80012da:	2101      	movs	r1, #1
 80012dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012e0:	f001 fc28 	bl	8002b34 <RCC_APB1PeriphResetCmd>
  /* Release CEC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
}
 80012e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CEC_DeInit(void)
{
  /* Enable CEC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
  /* Release CEC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
 80012e8:	2100      	movs	r1, #0
 80012ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012ee:	f001 bc21 	b.w	8002b34 <RCC_APB1PeriphResetCmd>

080012f2 <CEC_Init>:
  *         contains the configuration information for the specified
  *         CEC peripheral.
  * @retval None
  */
void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
{
 80012f2:	b510      	push	{r4, lr}
  assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
  assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
     
  /*---------------------------- CEC CFGR Configuration -----------------*/
  /* Get the CEC CFGR value */
  tmpreg = CEC->CFGR;
 80012f4:	4c05      	ldr	r4, [pc, #20]	; (800130c <CEC_Init+0x1a>)
  
  /* Configure CEC: Bit Timing Error and Bit Period Error */
  tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);

  /* Write to CEC CFGR  register*/
  CEC->CFGR = tmpreg;
 80012f6:	8842      	ldrh	r2, [r0, #2]
  assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
  assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
     
  /*---------------------------- CEC CFGR Configuration -----------------*/
  /* Get the CEC CFGR value */
  tmpreg = CEC->CFGR;
 80012f8:	6823      	ldr	r3, [r4, #0]
  
  /* Clear BTEM and BPEM bits */
  tmpreg &= CFGR_CLEAR_Mask;
 80012fa:	f003 01f3 	and.w	r1, r3, #243	; 0xf3
  
  /* Configure CEC: Bit Timing Error and Bit Period Error */
  tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);

  /* Write to CEC CFGR  register*/
  CEC->CFGR = tmpreg;
 80012fe:	8803      	ldrh	r3, [r0, #0]
 8001300:	4313      	orrs	r3, r2
 8001302:	430b      	orrs	r3, r1
 8001304:	b29b      	uxth	r3, r3
 8001306:	6023      	str	r3, [r4, #0]
 8001308:	bd10      	pop	{r4, pc}
 800130a:	bf00      	nop
 800130c:	40007800 	.word	0x40007800

08001310 <CEC_Cmd>:
void CEC_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CFGR_PE_BB = (uint32_t)NewState;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <CEC_Cmd+0x10>)
 8001312:	6018      	str	r0, [r3, #0]

  if(NewState == DISABLE)
 8001314:	b918      	cbnz	r0, 800131e <CEC_Cmd+0xe>
  {
    /* Wait until the PE bit is cleared by hardware (Idle Line detected) */
    while((CEC->CFGR & CEC_CFGR_PE) != (uint32_t)RESET)
 8001316:	4a03      	ldr	r2, [pc, #12]	; (8001324 <CEC_Cmd+0x14>)
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	07db      	lsls	r3, r3, #31
 800131c:	d4fc      	bmi.n	8001318 <CEC_Cmd+0x8>
 800131e:	4770      	bx	lr
 8001320:	420f0000 	.word	0x420f0000
 8001324:	40007800 	.word	0x40007800

08001328 <CEC_ITConfig>:
void CEC_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CFGR_IE_BB = (uint32_t)NewState;
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <CEC_ITConfig+0x8>)
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	420f0004 	.word	0x420f0004

08001334 <CEC_OwnAddressConfig>:
{
  /* Check the parameters */
  assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));

  /* Set the CEC own address */
  CEC->OAR = CEC_OwnAddress;
 8001334:	4b01      	ldr	r3, [pc, #4]	; (800133c <CEC_OwnAddressConfig+0x8>)
 8001336:	6058      	str	r0, [r3, #4]
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007800 	.word	0x40007800

08001340 <CEC_SetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_CEC_PRESCALER(CEC_Prescaler));

  /* Set the  Prescaler value*/
  CEC->PRES = CEC_Prescaler;
 8001340:	4b01      	ldr	r3, [pc, #4]	; (8001348 <CEC_SetPrescaler+0x8>)
 8001342:	6098      	str	r0, [r3, #8]
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40007800 	.word	0x40007800

0800134c <CEC_SendDataByte>:
  * @retval None
  */
void CEC_SendDataByte(uint8_t Data)
{  
  /* Transmit Data */
  CEC->TXD = Data ;
 800134c:	4b01      	ldr	r3, [pc, #4]	; (8001354 <CEC_SendDataByte+0x8>)
 800134e:	6158      	str	r0, [r3, #20]
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40007800 	.word	0x40007800

08001358 <CEC_ReceiveDataByte>:
  * @retval The received data.
  */
uint8_t CEC_ReceiveDataByte(void)
{
  /* Receive Data */
  return (uint8_t)(CEC->RXD);
 8001358:	4b01      	ldr	r3, [pc, #4]	; (8001360 <CEC_ReceiveDataByte+0x8>)
 800135a:	6998      	ldr	r0, [r3, #24]
}
 800135c:	b2c0      	uxtb	r0, r0
 800135e:	4770      	bx	lr
 8001360:	40007800 	.word	0x40007800

08001364 <CEC_StartOfMessage>:
  * @retval None
  */
void CEC_StartOfMessage(void)
{  
  /* Starts of new message */
  *(__IO uint32_t *) CSR_TSOM_BB = (uint32_t)0x1;
 8001364:	4b01      	ldr	r3, [pc, #4]	; (800136c <CEC_StartOfMessage+0x8>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4770      	bx	lr
 800136c:	420f0200 	.word	0x420f0200

08001370 <CEC_EndOfMessageCmd>:
{   
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* The data byte will be transmitted with or without an EOM bit*/
  *(__IO uint32_t *) CSR_TEOM_BB = (uint32_t)NewState;
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <CEC_EndOfMessageCmd+0x8>)
 8001372:	6018      	str	r0, [r3, #0]
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	420f0204 	.word	0x420f0204

0800137c <CEC_GetFlagStatus>:
  cecreg = CEC_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  CEC_FLAG &= FLAG_Mask;
  
  if(cecreg != 0)
 800137c:	0f02      	lsrs	r2, r0, #28
  {
    /* Flag in CEC ESR Register */
    CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
    
    /* Get the CEC ESR register address */
    cecbase += 0xC;
 800137e:	bf14      	ite	ne
 8001380:	4a05      	ldrne	r2, [pc, #20]	; (8001398 <CEC_GetFlagStatus+0x1c>)
  }
  else
  {
    /* Get the CEC CSR register address */
    cecbase += 0x10;
 8001382:	4a06      	ldreq	r2, [pc, #24]	; (800139c <CEC_GetFlagStatus+0x20>)
  
  /* Read flag register index */
  cecreg = CEC_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  CEC_FLAG &= FLAG_Mask;
 8001384:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
  {
    /* Get the CEC CSR register address */
    cecbase += 0x10;
  }
  
  if(((*(__IO uint32_t *)cecbase) & CEC_FLAG) != (uint32_t)RESET)
 8001388:	6812      	ldr	r2, [r2, #0]
  CEC_FLAG &= FLAG_Mask;
  
  if(cecreg != 0)
  {
    /* Flag in CEC ESR Register */
    CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
 800138a:	bf18      	it	ne
 800138c:	0c1b      	lsrne	r3, r3, #16
    /* CEC_FLAG is reset */
    bitstatus = RESET;
  }
  
  /* Return the CEC_FLAG status */
  return  bitstatus;
 800138e:	4213      	tst	r3, r2
}
 8001390:	bf14      	ite	ne
 8001392:	2001      	movne	r0, #1
 8001394:	2000      	moveq	r0, #0
 8001396:	4770      	bx	lr
 8001398:	4000780c 	.word	0x4000780c
 800139c:	40007810 	.word	0x40007810

080013a0 <CEC_ClearFlag>:
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 80013a0:	43c0      	mvns	r0, r0
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <CEC_ClearFlag+0x18>)
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 80013a4:	f020 0003 	bic.w	r0, r0, #3
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
 80013a8:	6913      	ldr	r3, [r2, #16]
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 80013aa:	6911      	ldr	r1, [r2, #16]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	4303      	orrs	r3, r0
 80013b2:	400b      	ands	r3, r1
 80013b4:	6113      	str	r3, [r2, #16]
 80013b6:	4770      	bx	lr
 80013b8:	40007800 	.word	0x40007800

080013bc <CEC_GetITStatus>:
  
  /* Check the parameters */
   assert_param(IS_CEC_GET_IT(CEC_IT));
   
  /* Get the CEC IT enable bit status */
  enablestatus = (CEC->CFGR & (uint8_t)CEC_CFGR_IE) ;
 80013bc:	4a03      	ldr	r2, [pc, #12]	; (80013cc <CEC_GetITStatus+0x10>)
 80013be:	6811      	ldr	r1, [r2, #0]
  
  /* Check the status of the specified CEC interrupt */
  if (((CEC->CSR & CEC_IT) != (uint32_t)RESET) && enablestatus)
 80013c0:	6913      	ldr	r3, [r2, #16]
 80013c2:	4018      	ands	r0, r3
  {
    /* CEC_IT is set */
    bitstatus = SET;
 80013c4:	bf18      	it	ne
 80013c6:	f3c1 0040 	ubfxne	r0, r1, #1, #1
    /* CEC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the CEC_IT status */
  return  bitstatus;
}
 80013ca:	4770      	bx	lr
 80013cc:	40007800 	.word	0x40007800

080013d0 <CEC_ClearITPendingBit>:
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 80013d0:	43c0      	mvns	r0, r0
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <CEC_ClearITPendingBit+0x18>)
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 80013d4:	f020 0003 	bic.w	r0, r0, #3
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
 80013d8:	6913      	ldr	r3, [r2, #16]
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 80013da:	6911      	ldr	r1, [r2, #16]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	4303      	orrs	r3, r0
 80013e2:	400b      	ands	r3, r1
 80013e4:	6113      	str	r3, [r2, #16]
 80013e6:	4770      	bx	lr
 80013e8:	40007800 	.word	0x40007800

080013ec <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 80013ec:	4b01      	ldr	r3, [pc, #4]	; (80013f4 <CRC_ResetDR+0x8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	4770      	bx	lr
 80013f4:	40023000 	.word	0x40023000

080013f8 <CRC_CalcCRC>:
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
  CRC->DR = Data;
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <CRC_CalcCRC+0x8>)
 80013fa:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 80013fc:	6818      	ldr	r0, [r3, #0]
}
 80013fe:	4770      	bx	lr
 8001400:	40023000 	.word	0x40023000

08001404 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <CRC_CalcBlockCRC+0x18>)
 8001406:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 800140a:	4288      	cmp	r0, r1
 800140c:	d003      	beq.n	8001416 <CRC_CalcBlockCRC+0x12>
  {
    CRC->DR = pBuffer[index];
 800140e:	f850 2b04 	ldr.w	r2, [r0], #4
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e7f9      	b.n	800140a <CRC_CalcBlockCRC+0x6>
  }
  return (CRC->DR);
 8001416:	4b01      	ldr	r3, [pc, #4]	; (800141c <CRC_CalcBlockCRC+0x18>)
 8001418:	6818      	ldr	r0, [r3, #0]
}
 800141a:	4770      	bx	lr
 800141c:	40023000 	.word	0x40023000

08001420 <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 8001420:	4b01      	ldr	r3, [pc, #4]	; (8001428 <CRC_GetCRC+0x8>)
 8001422:	6818      	ldr	r0, [r3, #0]
}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023000 	.word	0x40023000

0800142c <CRC_SetIDRegister>:
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
  CRC->IDR = IDValue;
 800142c:	4b01      	ldr	r3, [pc, #4]	; (8001434 <CRC_SetIDRegister+0x8>)
 800142e:	7118      	strb	r0, [r3, #4]
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023000 	.word	0x40023000

08001438 <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 8001438:	4b01      	ldr	r3, [pc, #4]	; (8001440 <CRC_GetIDRegister+0x8>)
 800143a:	7918      	ldrb	r0, [r3, #4]
}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023000 	.word	0x40023000

08001444 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8001444:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8001446:	2101      	movs	r1, #1
 8001448:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800144c:	f001 fb72 	bl	8002b34 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
}
 8001450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DAC_DeInit(void)
{
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8001454:	2100      	movs	r1, #0
 8001456:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800145a:	f001 bb6b 	b.w	8002b34 <RCC_APB1PeriphResetCmd>

0800145e <DAC_Init>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800145e:	f640 73fe 	movw	r3, #4094	; 0xffe
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8001462:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8001464:	4d08      	ldr	r5, [pc, #32]	; (8001488 <DAC_Init+0x2a>)
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001466:	4083      	lsls	r3, r0
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8001468:	682a      	ldr	r2, [r5, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800146a:	ea22 0303 	bic.w	r3, r2, r3
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800146e:	e891 0014 	ldmia.w	r1, {r2, r4}
 8001472:	4314      	orrs	r4, r2
 8001474:	688a      	ldr	r2, [r1, #8]
 8001476:	4314      	orrs	r4, r2
 8001478:	68ca      	ldr	r2, [r1, #12]
 800147a:	4322      	orrs	r2, r4
 800147c:	fa02 f000 	lsl.w	r0, r2, r0
 8001480:	4318      	orrs	r0, r3
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8001482:	6028      	str	r0, [r5, #0]
 8001484:	bd30      	pop	{r4, r5, pc}
 8001486:	bf00      	nop
 8001488:	40007400 	.word	0x40007400

0800148c <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 800148c:	2300      	movs	r3, #0
 800148e:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001490:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8001492:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001494:	60c3      	str	r3, [r0, #12]
 8001496:	4770      	bx	lr

08001498 <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <DAC_Cmd+0x1c>)
 800149a:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800149c:	b119      	cbz	r1, 80014a6 <DAC_Cmd+0xe>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800149e:	6811      	ldr	r1, [r2, #0]
 80014a0:	4083      	lsls	r3, r0
 80014a2:	430b      	orrs	r3, r1
 80014a4:	e003      	b.n	80014ae <DAC_Cmd+0x16>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
 80014a6:	6811      	ldr	r1, [r2, #0]
 80014a8:	4083      	lsls	r3, r0
 80014aa:	ea21 0303 	bic.w	r3, r1, r3
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40007400 	.word	0x40007400

080014b8 <DAC_DMACmd>:
  * @param  NewState: new state of the selected DAC channel DMA request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <DAC_DMACmd+0x1c>)
 80014ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014be:	b119      	cbz	r1, 80014c8 <DAC_DMACmd+0x10>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80014c0:	6811      	ldr	r1, [r2, #0]
 80014c2:	4083      	lsls	r3, r0
 80014c4:	430b      	orrs	r3, r1
 80014c6:	e003      	b.n	80014d0 <DAC_DMACmd+0x18>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
 80014c8:	6811      	ldr	r1, [r2, #0]
 80014ca:	4083      	lsls	r3, r0
 80014cc:	ea21 0303 	bic.w	r3, r1, r3
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4770      	bx	lr
 80014d4:	40007400 	.word	0x40007400

080014d8 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <DAC_SoftwareTriggerCmd+0x1c>)
 80014da:	0900      	lsrs	r0, r0, #4
 80014dc:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014de:	b119      	cbz	r1, 80014e8 <DAC_SoftwareTriggerCmd+0x10>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 80014e0:	6851      	ldr	r1, [r2, #4]
 80014e2:	4083      	lsls	r3, r0
 80014e4:	430b      	orrs	r3, r1
 80014e6:	e003      	b.n	80014f0 <DAC_SoftwareTriggerCmd+0x18>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 80014e8:	6851      	ldr	r1, [r2, #4]
 80014ea:	4083      	lsls	r3, r0
 80014ec:	ea21 0303 	bic.w	r3, r1, r3
 80014f0:	6053      	str	r3, [r2, #4]
 80014f2:	4770      	bx	lr
 80014f4:	40007400 	.word	0x40007400

080014f8 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <DAC_DualSoftwareTriggerCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
 80014fa:	685a      	ldr	r2, [r3, #4]
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014fc:	b110      	cbz	r0, 8001504 <DAC_DualSoftwareTriggerCmd+0xc>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
 80014fe:	f042 0203 	orr.w	r2, r2, #3
 8001502:	e001      	b.n	8001508 <DAC_DualSoftwareTriggerCmd+0x10>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8001504:	f022 0203 	bic.w	r2, r2, #3
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	4770      	bx	lr
 800150c:	40007400 	.word	0x40007400

08001510 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <DAC_WaveGenerationCmd+0x18>)
 8001512:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001514:	b112      	cbz	r2, 800151c <DAC_WaveGenerationCmd+0xc>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4311      	orrs	r1, r2
 800151a:	e002      	b.n	8001522 <DAC_WaveGenerationCmd+0x12>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	ea22 0101 	bic.w	r1, r2, r1
 8001522:	6019      	str	r1, [r3, #0]
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007400 	.word	0x40007400

0800152c <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800152c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <DAC_SetChannel1Data+0x1c>)
 8001534:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001536:	9b01      	ldr	r3, [sp, #4]
 8001538:	3308      	adds	r3, #8
 800153a:	4418      	add	r0, r3
 800153c:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800153e:	9b01      	ldr	r3, [sp, #4]
 8001540:	6019      	str	r1, [r3, #0]
}
 8001542:	b002      	add	sp, #8
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40007400 	.word	0x40007400

0800154c <DAC_SetChannel2Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 800154c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <DAC_SetChannel2Data+0x1c>)
 8001554:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	3314      	adds	r3, #20
 800155a:	4418      	add	r0, r3
 800155c:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 800155e:	9b01      	ldr	r3, [sp, #4]
 8001560:	6019      	str	r1, [r3, #0]
}
 8001562:	b002      	add	sp, #8
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007400 	.word	0x40007400

0800156c <DAC_SetDualChannelData>:
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 800156c:	2808      	cmp	r0, #8
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <DAC_SetDualChannelData+0x14>)
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8001570:	bf0c      	ite	eq
 8001572:	ea42 2201 	orreq.w	r2, r2, r1, lsl #8
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8001576:	ea42 4201 	orrne.w	r2, r2, r1, lsl #16
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800157a:	50c2      	str	r2, [r0, r3]
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40007420 	.word	0x40007420

08001584 <DAC_GetDataOutputValue>:
  *     @arg DAC_Channel_1: DAC Channel1 selected
  *     @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8001584:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <DAC_GetDataOutputValue+0x20>)
 800158c:	9301      	str	r3, [sp, #4]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 800158e:	9b01      	ldr	r3, [sp, #4]
 8001590:	332c      	adds	r3, #44	; 0x2c
 8001592:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8001596:	9001      	str	r0, [sp, #4]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8001598:	9b01      	ldr	r3, [sp, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
}
 800159c:	b280      	uxth	r0, r0
 800159e:	b002      	add	sp, #8
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007400 	.word	0x40007400

080015a8 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80015a8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80015ac:	6802      	ldr	r2, [r0, #0]
 80015ae:	4013      	ands	r3, r2
 80015b0:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80015b6:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 80015b8:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80015ba:	60c3      	str	r3, [r0, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <DMA_DeInit+0xb8>)
 80015be:	4298      	cmp	r0, r3
 80015c0:	d101      	bne.n	80015c6 <DMA_DeInit+0x1e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 80015c2:	4a28      	ldr	r2, [pc, #160]	; (8001664 <DMA_DeInit+0xbc>)
 80015c4:	e027      	b.n	8001616 <DMA_DeInit+0x6e>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <DMA_DeInit+0xc0>)
 80015c8:	4298      	cmp	r0, r3
 80015ca:	d101      	bne.n	80015d0 <DMA_DeInit+0x28>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 80015cc:	4a25      	ldr	r2, [pc, #148]	; (8001664 <DMA_DeInit+0xbc>)
 80015ce:	e02a      	b.n	8001626 <DMA_DeInit+0x7e>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <DMA_DeInit+0xc4>)
 80015d2:	4298      	cmp	r0, r3
 80015d4:	d101      	bne.n	80015da <DMA_DeInit+0x32>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <DMA_DeInit+0xbc>)
 80015d8:	e02d      	b.n	8001636 <DMA_DeInit+0x8e>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <DMA_DeInit+0xc8>)
 80015dc:	4298      	cmp	r0, r3
 80015de:	d101      	bne.n	80015e4 <DMA_DeInit+0x3c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <DMA_DeInit+0xbc>)
 80015e2:	e030      	b.n	8001646 <DMA_DeInit+0x9e>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <DMA_DeInit+0xcc>)
 80015e6:	4298      	cmp	r0, r3
 80015e8:	d101      	bne.n	80015ee <DMA_DeInit+0x46>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <DMA_DeInit+0xbc>)
 80015ec:	e033      	b.n	8001656 <DMA_DeInit+0xae>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <DMA_DeInit+0xd0>)
 80015f0:	4298      	cmp	r0, r3
 80015f2:	d104      	bne.n	80015fe <DMA_DeInit+0x56>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 80015f4:	4a1b      	ldr	r2, [pc, #108]	; (8001664 <DMA_DeInit+0xbc>)
 80015f6:	6853      	ldr	r3, [r2, #4]
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	e02e      	b.n	800165c <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <DMA_DeInit+0xd4>)
 8001600:	4298      	cmp	r0, r3
 8001602:	d104      	bne.n	800160e <DMA_DeInit+0x66>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8001604:	4a17      	ldr	r2, [pc, #92]	; (8001664 <DMA_DeInit+0xbc>)
 8001606:	6853      	ldr	r3, [r2, #4]
 8001608:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800160c:	e026      	b.n	800165c <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <DMA_DeInit+0xd8>)
 8001610:	4298      	cmp	r0, r3
 8001612:	d104      	bne.n	800161e <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <DMA_DeInit+0xdc>)
 8001616:	6853      	ldr	r3, [r2, #4]
 8001618:	f043 030f 	orr.w	r3, r3, #15
 800161c:	e01e      	b.n	800165c <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <DMA_DeInit+0xe0>)
 8001620:	4298      	cmp	r0, r3
 8001622:	d104      	bne.n	800162e <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <DMA_DeInit+0xdc>)
 8001626:	6853      	ldr	r3, [r2, #4]
 8001628:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800162c:	e016      	b.n	800165c <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <DMA_DeInit+0xe4>)
 8001630:	4298      	cmp	r0, r3
 8001632:	d104      	bne.n	800163e <DMA_DeInit+0x96>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8001634:	4a13      	ldr	r2, [pc, #76]	; (8001684 <DMA_DeInit+0xdc>)
 8001636:	6853      	ldr	r3, [r2, #4]
 8001638:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800163c:	e00e      	b.n	800165c <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <DMA_DeInit+0xe8>)
 8001640:	4298      	cmp	r0, r3
 8001642:	d104      	bne.n	800164e <DMA_DeInit+0xa6>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <DMA_DeInit+0xdc>)
 8001646:	6853      	ldr	r3, [r2, #4]
 8001648:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800164c:	e006      	b.n	800165c <DMA_DeInit+0xb4>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <DMA_DeInit+0xec>)
 8001650:	4298      	cmp	r0, r3
 8001652:	d104      	bne.n	800165e <DMA_DeInit+0xb6>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <DMA_DeInit+0xdc>)
 8001656:	6853      	ldr	r3, [r2, #4]
 8001658:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 800165c:	6053      	str	r3, [r2, #4]
 800165e:	4770      	bx	lr
 8001660:	40020008 	.word	0x40020008
 8001664:	40020000 	.word	0x40020000
 8001668:	4002001c 	.word	0x4002001c
 800166c:	40020030 	.word	0x40020030
 8001670:	40020044 	.word	0x40020044
 8001674:	40020058 	.word	0x40020058
 8001678:	4002006c 	.word	0x4002006c
 800167c:	40020080 	.word	0x40020080
 8001680:	40020408 	.word	0x40020408
 8001684:	40020400 	.word	0x40020400
 8001688:	4002041c 	.word	0x4002041c
 800168c:	40020430 	.word	0x40020430
 8001690:	40020444 	.word	0x40020444
 8001694:	40020458 	.word	0x40020458

08001698 <DMA_Init>:
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001698:	6a0a      	ldr	r2, [r1, #32]
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 800169a:	b510      	push	{r4, lr}
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800169c:	688c      	ldr	r4, [r1, #8]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800169e:	6803      	ldr	r3, [r0, #0]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016a0:	4314      	orrs	r4, r2
 80016a2:	690a      	ldr	r2, [r1, #16]

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80016a4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016a8:	4314      	orrs	r4, r2
 80016aa:	694a      	ldr	r2, [r1, #20]

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80016ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016b0:	4314      	orrs	r4, r2
 80016b2:	698a      	ldr	r2, [r1, #24]
 80016b4:	4314      	orrs	r4, r2
 80016b6:	69ca      	ldr	r2, [r1, #28]
 80016b8:	4314      	orrs	r4, r2
 80016ba:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80016bc:	4314      	orrs	r4, r2
 80016be:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80016c0:	4322      	orrs	r2, r4
 80016c2:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80016c4:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80016c6:	68cb      	ldr	r3, [r1, #12]
 80016c8:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80016ca:	680b      	ldr	r3, [r1, #0]
 80016cc:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80016ce:	684b      	ldr	r3, [r1, #4]
 80016d0:	60c3      	str	r3, [r0, #12]
 80016d2:	bd10      	pop	{r4, pc}

080016d4 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	6003      	str	r3, [r0, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80016d8:	6043      	str	r3, [r0, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 80016da:	6083      	str	r3, [r0, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80016dc:	60c3      	str	r3, [r0, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80016de:	6103      	str	r3, [r0, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80016e0:	6143      	str	r3, [r0, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80016e2:	6183      	str	r3, [r0, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80016e4:	61c3      	str	r3, [r0, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80016e6:	6203      	str	r3, [r0, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80016e8:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 80016ea:	6283      	str	r3, [r0, #40]	; 0x28
 80016ec:	4770      	bx	lr

080016ee <DMA_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016ee:	b119      	cbz	r1, 80016f8 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80016f0:	6803      	ldr	r3, [r0, #0]
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	e003      	b.n	8001700 <DMA_Cmd+0x12>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80016f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80016fc:	6802      	ldr	r2, [r0, #0]
 80016fe:	4013      	ands	r3, r2
 8001700:	6003      	str	r3, [r0, #0]
 8001702:	4770      	bx	lr

08001704 <DMA_ITConfig>:
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001704:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001706:	b10a      	cbz	r2, 800170c <DMA_ITConfig+0x8>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001708:	4319      	orrs	r1, r3
 800170a:	e001      	b.n	8001710 <DMA_ITConfig+0xc>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 800170c:	ea23 0101 	bic.w	r1, r3, r1
 8001710:	6001      	str	r1, [r0, #0]
 8001712:	4770      	bx	lr

08001714 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8001714:	6041      	str	r1, [r0, #4]
 8001716:	4770      	bx	lr

08001718 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8001718:	6840      	ldr	r0, [r0, #4]
}
 800171a:	b280      	uxth	r0, r0
 800171c:	4770      	bx	lr

0800171e <DMA_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 800171e:	00c3      	lsls	r3, r0, #3
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8001720:	bf4c      	ite	mi
 8001722:	4b04      	ldrmi	r3, [pc, #16]	; (8001734 <DMA_GetITStatus+0x16>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8001724:	4b04      	ldrpl	r3, [pc, #16]	; (8001738 <DMA_GetITStatus+0x1a>)
 8001726:	681b      	ldr	r3, [r3, #0]
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8001728:	4203      	tst	r3, r0
}
 800172a:	bf14      	ite	ne
 800172c:	2001      	movne	r0, #1
 800172e:	2000      	moveq	r0, #0
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40020400 	.word	0x40020400
 8001738:	40020000 	.word	0x40020000

0800173c <DMA_GetFlagStatus>:
 800173c:	f7ff bfef 	b.w	800171e <DMA_GetITStatus>

08001740 <DMA_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001740:	00c3      	lsls	r3, r0, #3
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 8001742:	bf4c      	ite	mi
 8001744:	4b01      	ldrmi	r3, [pc, #4]	; (800174c <DMA_ClearITPendingBit+0xc>)
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 8001746:	4b02      	ldrpl	r3, [pc, #8]	; (8001750 <DMA_ClearITPendingBit+0x10>)
 8001748:	6058      	str	r0, [r3, #4]
 800174a:	4770      	bx	lr
 800174c:	40020400 	.word	0x40020400
 8001750:	40020000 	.word	0x40020000

08001754 <DMA_ClearFlag>:
 8001754:	f7ff bff4 	b.w	8001740 <DMA_ClearITPendingBit>

08001758 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <EXTI_DeInit+0x14>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800175e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
 8001760:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
 8001762:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
 8001764:	4a02      	ldr	r2, [pc, #8]	; (8001770 <EXTI_DeInit+0x18>)
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40010400 	.word	0x40010400
 8001770:	000fffff 	.word	0x000fffff

08001774 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8001774:	7982      	ldrb	r2, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8001776:	b570      	push	{r4, r5, r6, lr}
 8001778:	6801      	ldr	r1, [r0, #0]
 800177a:	7903      	ldrb	r3, [r0, #4]
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800177c:	b342      	cbz	r2, 80017d0 <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800177e:	43ce      	mvns	r6, r1
 8001780:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <EXTI_Init+0x70>)
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001782:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001786:	6815      	ldr	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001788:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800178c:	4035      	ands	r5, r6
 800178e:	6015      	str	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001790:	6854      	ldr	r4, [r2, #4]
 8001792:	4034      	ands	r4, r6
 8001794:	6054      	str	r4, [r2, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001796:	681c      	ldr	r4, [r3, #0]
 8001798:	4321      	orrs	r1, r4
 800179a:	6019      	str	r1, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800179c:	6801      	ldr	r1, [r0, #0]
 800179e:	6894      	ldr	r4, [r2, #8]
 80017a0:	43cd      	mvns	r5, r1
 80017a2:	402c      	ands	r4, r5
 80017a4:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80017a6:	68d3      	ldr	r3, [r2, #12]
 80017a8:	402b      	ands	r3, r5
 80017aa:	60d3      	str	r3, [r2, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80017ac:	7943      	ldrb	r3, [r0, #5]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d106      	bne.n	80017c0 <EXTI_Init+0x4c>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80017b2:	6893      	ldr	r3, [r2, #8]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80017b8:	68d3      	ldr	r3, [r2, #12]
 80017ba:	4319      	orrs	r1, r3
 80017bc:	60d1      	str	r1, [r2, #12]
 80017be:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80017c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017c4:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4311      	orrs	r1, r2
 80017cc:	6019      	str	r1, [r3, #0]
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80017d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017d4:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	ea22 0201 	bic.w	r2, r2, r1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
 80017e2:	bf00      	nop
 80017e4:	40010400 	.word	0x40010400

080017e8 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80017e8:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80017ea:	220c      	movs	r2, #12
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80017ec:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80017ee:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80017f0:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80017f2:	7183      	strb	r3, [r0, #6]
 80017f4:	4770      	bx	lr

080017f6 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 80017f6:	4a02      	ldr	r2, [pc, #8]	; (8001800 <EXTI_GenerateSWInterrupt+0xa>)
 80017f8:	6913      	ldr	r3, [r2, #16]
 80017fa:	4318      	orrs	r0, r3
 80017fc:	6110      	str	r0, [r2, #16]
 80017fe:	4770      	bx	lr
 8001800:	40010400 	.word	0x40010400

08001804 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <EXTI_GetFlagStatus+0x10>)
 8001806:	695b      	ldr	r3, [r3, #20]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001808:	4203      	tst	r3, r0
}
 800180a:	bf14      	ite	ne
 800180c:	2001      	movne	r0, #1
 800180e:	2000      	moveq	r0, #0
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40010400 	.word	0x40010400

08001818 <EXTI_ClearFlag>:
 8001818:	4b01      	ldr	r3, [pc, #4]	; (8001820 <EXTI_ClearFlag+0x8>)
 800181a:	6158      	str	r0, [r3, #20]
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40010400 	.word	0x40010400

08001824 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <EXTI_GetITStatus+0x18>)
 8001826:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	4003      	ands	r3, r0
 800182c:	d004      	beq.n	8001838 <EXTI_GetITStatus+0x14>
  {
    bitstatus = SET;
 800182e:	4202      	tst	r2, r0
 8001830:	bf14      	ite	ne
 8001832:	2001      	movne	r0, #1
 8001834:	2000      	moveq	r0, #0
 8001836:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8001838:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 800183a:	4770      	bx	lr
 800183c:	40010400 	.word	0x40010400

08001840 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001840:	4b01      	ldr	r3, [pc, #4]	; (8001848 <EXTI_ClearITPendingBit+0x8>)
 8001842:	6158      	str	r0, [r3, #20]
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40010400 	.word	0x40010400

0800184c <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 800184c:	4a03      	ldr	r2, [pc, #12]	; (800185c <FLASH_SetLatency+0x10>)
 800184e:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 8001850:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 8001854:	4318      	orrs	r0, r3
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 8001856:	6010      	str	r0, [r2, #0]
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <FLASH_HalfCycleAccessCmd+0x14>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	f022 0208 	bic.w	r2, r2, #8
 8001868:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4310      	orrs	r0, r2
 800186e:	6018      	str	r0, [r3, #0]
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000

08001878 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <FLASH_PrefetchBufferCmd+0x14>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f022 0210 	bic.w	r2, r2, #16
 8001880:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4310      	orrs	r0, r2
 8001886:	6018      	str	r0, [r3, #0]
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40022000 	.word	0x40022000

08001890 <FLASH_UnlockBank1>:
  * @retval None
  */
void FLASH_UnlockBank1(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <FLASH_UnlockBank1+0x10>)
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <FLASH_UnlockBank1+0x14>)
 8001894:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8001896:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000
 80018a4:	45670123 	.word	0x45670123

080018a8 <FLASH_Unlock>:
 80018a8:	f7ff bff2 	b.w	8001890 <FLASH_UnlockBank1>

080018ac <FLASH_LockBank1>:
  * @retval None
  */
void FLASH_LockBank1(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 80018ac:	4a02      	ldr	r2, [pc, #8]	; (80018b8 <FLASH_LockBank1+0xc>)
 80018ae:	6913      	ldr	r3, [r2, #16]
 80018b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b4:	6113      	str	r3, [r2, #16]
 80018b6:	4770      	bx	lr
 80018b8:	40022000 	.word	0x40022000

080018bc <FLASH_Lock>:
 80018bc:	f7ff bff6 	b.w	80018ac <FLASH_LockBank1>

080018c0 <FLASH_GetUserOptionByte>:
  *         and RST_STDBY(Bit2).
  */
uint32_t FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (uint32_t)(FLASH->OBR >> 2);
 80018c0:	4b01      	ldr	r3, [pc, #4]	; (80018c8 <FLASH_GetUserOptionByte+0x8>)
 80018c2:	69d8      	ldr	r0, [r3, #28]
}
 80018c4:	0880      	lsrs	r0, r0, #2
 80018c6:	4770      	bx	lr
 80018c8:	40022000 	.word	0x40022000

080018cc <FLASH_GetWriteProtectionOptionByte>:
  * @retval The FLASH Write Protection  Option Bytes Register value
  */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Flash write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 80018cc:	4b01      	ldr	r3, [pc, #4]	; (80018d4 <FLASH_GetWriteProtectionOptionByte+0x8>)
 80018ce:	6a18      	ldr	r0, [r3, #32]
}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000

080018d8 <FLASH_GetReadOutProtectionStatus>:
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;
  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 80018d8:	4b02      	ldr	r3, [pc, #8]	; (80018e4 <FLASH_GetReadOutProtectionStatus+0xc>)
 80018da:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 80018dc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40022000 	.word	0x40022000

080018e8 <FLASH_GetPrefetchBufferStatus>:
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <FLASH_GetPrefetchBufferStatus+0xc>)
 80018ea:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 80018ec:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000

080018f8 <FLASH_ITConfig>:
  * @param  NewState: new state of the specified Flash interrupts.
  *   This parameter can be: ENABLE or DISABLE.      
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 80018f8:	4b04      	ldr	r3, [pc, #16]	; (800190c <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80018fa:	691a      	ldr	r2, [r3, #16]
#else
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 80018fc:	b109      	cbz	r1, 8001902 <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80018fe:	4310      	orrs	r0, r2
 8001900:	e001      	b.n	8001906 <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8001902:	ea22 0000 	bic.w	r0, r2, r0
 8001906:	6118      	str	r0, [r3, #16]
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000

08001910 <FLASH_GetFlagStatus>:
    }
  }
#else
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8001910:	2801      	cmp	r0, #1
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <FLASH_GetFlagStatus+0x1c>)
 8001914:	d103      	bne.n	800191e <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 8001916:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8001918:	f000 0001 	and.w	r0, r0, #1
 800191c:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800191e:	68db      	ldr	r3, [r3, #12]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8001920:	4218      	tst	r0, r3
 8001922:	bf14      	ite	ne
 8001924:	2001      	movne	r0, #1
 8001926:	2000      	moveq	r0, #0
  }
#endif /* STM32F10X_XL */

  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000

08001930 <FLASH_ClearFlag>:
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8001930:	4b01      	ldr	r3, [pc, #4]	; (8001938 <FLASH_ClearFlag+0x8>)
 8001932:	60d8      	str	r0, [r3, #12]
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000

0800193c <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <FLASH_GetStatus+0x24>)
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	07d1      	lsls	r1, r2, #31
 8001942:	d409      	bmi.n	8001958 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	0752      	lsls	r2, r2, #29
 8001948:	d408      	bmi.n	800195c <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8001950:	bf14      	ite	ne
 8001952:	2003      	movne	r0, #3
 8001954:	2004      	moveq	r0, #4
 8001956:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8001958:	2001      	movs	r0, #1
 800195a:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 800195c:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 800195e:	4770      	bx	lr
 8001960:	40022000 	.word	0x40022000

08001964 <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <FLASH_GetBank1Status+0x24>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	07d1      	lsls	r1, r2, #31
 800196a:	d409      	bmi.n	8001980 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	0752      	lsls	r2, r2, #29
 8001970:	d408      	bmi.n	8001984 <FLASH_GetBank1Status+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 8001978:	bf14      	ite	ne
 800197a:	2003      	movne	r0, #3
 800197c:	2004      	moveq	r0, #4
 800197e:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8001980:	2001      	movs	r0, #1
 8001982:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 8001984:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8001986:	4770      	bx	lr
 8001988:	40022000 	.word	0x40022000

0800198c <FLASH_WaitForLastBank1Operation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
{ 
 800198c:	b510      	push	{r4, lr}
 800198e:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8001990:	f7ff ffe8 	bl	8001964 <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 8001994:	2801      	cmp	r0, #1
 8001996:	d106      	bne.n	80019a6 <FLASH_WaitForLastBank1Operation+0x1a>
 8001998:	b11c      	cbz	r4, 80019a2 <FLASH_WaitForLastBank1Operation+0x16>
  {
    status = FLASH_GetBank1Status();
 800199a:	f7ff ffe3 	bl	8001964 <FLASH_GetBank1Status>
    Timeout--;
 800199e:	3c01      	subs	r4, #1
 80019a0:	e7f8      	b.n	8001994 <FLASH_WaitForLastBank1Operation+0x8>
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 80019a2:	2005      	movs	r0, #5
 80019a4:	bd10      	pop	{r4, pc}
 80019a6:	2c00      	cmp	r4, #0
 80019a8:	bf08      	it	eq
 80019aa:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 80019ac:	bd10      	pop	{r4, pc}

080019ae <FLASH_EraseAllBank1Pages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllBank1Pages(void)
{
 80019ae:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80019b0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80019b4:	f7ff ffea 	bl	800198c <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 80019b8:	2804      	cmp	r0, #4
 80019ba:	d111      	bne.n	80019e0 <FLASH_EraseAllBank1Pages+0x32>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 80019bc:	4c09      	ldr	r4, [pc, #36]	; (80019e4 <FLASH_EraseAllBank1Pages+0x36>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80019be:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 80019c2:	6923      	ldr	r3, [r4, #16]
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 80019ca:	6923      	ldr	r3, [r4, #16]
 80019cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019d0:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80019d2:	f7ff ffdb 	bl	800198c <FLASH_WaitForLastBank1Operation>
    
    /* Disable the MER Bit */
    FLASH->CR &= CR_MER_Reset;
 80019d6:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 80019da:	6922      	ldr	r2, [r4, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	6123      	str	r3, [r4, #16]
  }    
  /* Return the Erase Status */
  return status;
}
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	bf00      	nop
 80019e4:	40022000 	.word	0x40022000

080019e8 <FLASH_EraseAllPages>:
 80019e8:	f7ff bfe1 	b.w	80019ae <FLASH_EraseAllBank1Pages>

080019ec <FLASH_UserOptionByteConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80019ee:	4d13      	ldr	r5, [pc, #76]	; (8001a3c <FLASH_UserOptionByteConfig+0x50>)
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <FLASH_UserOptionByteConfig+0x54>)
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 80019f2:	4604      	mov	r4, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 80019f4:	60ab      	str	r3, [r5, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 80019f6:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80019fa:	60ab      	str	r3, [r5, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80019fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 8001a00:	460f      	mov	r7, r1
 8001a02:	4616      	mov	r6, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a04:	f7ff ffc2 	bl	800198c <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001a08:	2804      	cmp	r0, #4
 8001a0a:	d116      	bne.n	8001a3a <FLASH_UserOptionByteConfig+0x4e>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001a0c:	692b      	ldr	r3, [r5, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8001a0e:	f044 04f8 	orr.w	r4, r4, #248	; 0xf8
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001a12:	f043 0310 	orr.w	r3, r3, #16
 8001a16:	612b      	str	r3, [r5, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8001a18:	ea47 0104 	orr.w	r1, r7, r4
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <FLASH_UserOptionByteConfig+0x58>)
 8001a1e:	ea46 0201 	orr.w	r2, r6, r1
 8001a22:	805a      	strh	r2, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a28:	f7ff ffb0 	bl	800198c <FLASH_WaitForLastBank1Operation>
    if(status != FLASH_TIMEOUT)
 8001a2c:	2805      	cmp	r0, #5
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8001a2e:	bf1f      	itttt	ne
 8001a30:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001a34:	692a      	ldrne	r2, [r5, #16]
 8001a36:	4013      	andne	r3, r2
 8001a38:	612b      	strne	r3, [r5, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8001a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	45670123 	.word	0x45670123
 8001a44:	1ffff800 	.word	0x1ffff800

08001a48 <FLASH_ReadOutProtection>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8001a48:	b538      	push	{r3, r4, r5, lr}
 8001a4a:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001a4c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001a50:	f7ff ff9c 	bl	800198c <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8001a54:	2804      	cmp	r0, #4
 8001a56:	d136      	bne.n	8001ac6 <FLASH_ReadOutProtection+0x7e>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001a58:	4c1b      	ldr	r4, [pc, #108]	; (8001ac8 <FLASH_ReadOutProtection+0x80>)
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <FLASH_ReadOutProtection+0x84>)
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001a5c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001a60:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001a62:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001a66:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 8001a68:	6923      	ldr	r3, [r4, #16]
 8001a6a:	f043 0320 	orr.w	r3, r3, #32
 8001a6e:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8001a70:	6923      	ldr	r3, [r4, #16]
 8001a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a76:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001a78:	f7ff ff88 	bl	800198c <FLASH_WaitForLastBank1Operation>
    if(status == FLASH_COMPLETE)
 8001a7c:	2804      	cmp	r0, #4
 8001a7e:	d11b      	bne.n	8001ab8 <FLASH_ReadOutProtection+0x70>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8001a80:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8001a84:	6922      	ldr	r2, [r4, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	6123      	str	r3, [r4, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 8001a8a:	6923      	ldr	r3, [r4, #16]
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	6123      	str	r3, [r4, #16]
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <FLASH_ReadOutProtection+0x88>)
      if(NewState != DISABLE)
 8001a94:	b10d      	cbz	r5, 8001a9a <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 8001a96:	2200      	movs	r2, #0
 8001a98:	e000      	b.n	8001a9c <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 8001a9a:	22a5      	movs	r2, #165	; 0xa5
 8001a9c:	801a      	strh	r2, [r3, #0]
      }
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 8001a9e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001aa2:	f7ff ff73 	bl	800198c <FLASH_WaitForLastBank1Operation>
    
      if(status != FLASH_TIMEOUT)
 8001aa6:	2805      	cmp	r0, #5
 8001aa8:	d00d      	beq.n	8001ac6 <FLASH_ReadOutProtection+0x7e>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8001aaa:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8001aae:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <FLASH_ReadOutProtection+0x80>)
 8001ab0:	6911      	ldr	r1, [r2, #16]
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	6113      	str	r3, [r2, #16]
 8001ab6:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 8001ab8:	2805      	cmp	r0, #5
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8001aba:	bf1f      	itttt	ne
 8001abc:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8001ac0:	6922      	ldrne	r2, [r4, #16]
 8001ac2:	4013      	andne	r3, r2
 8001ac4:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;       
}
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	45670123 	.word	0x45670123
 8001ad0:	1ffff800 	.word	0x1ffff800

08001ad4 <FLASH_EnableWriteProtection>:
  *     @arg FLASH_WRProt_AllPages
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
{
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	4604      	mov	r4, r0
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001ad8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001adc:	f7ff ff56 	bl	800198c <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001ae0:	2804      	cmp	r0, #4
 8001ae2:	d143      	bne.n	8001b6c <FLASH_EnableWriteProtection+0x98>
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
 8001ae4:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <FLASH_EnableWriteProtection+0x9c>)
 8001ae8:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <FLASH_EnableWriteProtection+0xa0>)
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 8001aea:	b2e1      	uxtb	r1, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001aec:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001aee:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001af2:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8001af4:	691a      	ldr	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 8001af6:	29ff      	cmp	r1, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8001af8:	f042 0210 	orr.w	r2, r2, #16
 8001afc:	611a      	str	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 8001afe:	d104      	bne.n	8001b0a <FLASH_EnableWriteProtection+0x36>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 8001b00:	f3c4 2307 	ubfx	r3, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001b04:	2bff      	cmp	r3, #255	; 0xff
 8001b06:	d109      	bne.n	8001b1c <FLASH_EnableWriteProtection+0x48>
 8001b08:	e010      	b.n	8001b2c <FLASH_EnableWriteProtection+0x58>
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8001b10:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b12:	f7ff ff3b 	bl	800198c <FLASH_WaitForLastBank1Operation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001b16:	2804      	cmp	r0, #4
 8001b18:	d120      	bne.n	8001b5c <FLASH_EnableWriteProtection+0x88>
 8001b1a:	e7f1      	b.n	8001b00 <FLASH_EnableWriteProtection+0x2c>
    {
      OB->WRP1 = WRP1_Data;
 8001b1c:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8001b22:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b24:	f7ff ff32 	bl	800198c <FLASH_WaitForLastBank1Operation>
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8001b28:	2804      	cmp	r0, #4
 8001b2a:	d117      	bne.n	8001b5c <FLASH_EnableWriteProtection+0x88>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 8001b2c:	f3c4 4307 	ubfx	r3, r4, #16, #8
      OB->WRP1 = WRP1_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8001b30:	2bff      	cmp	r3, #255	; 0xff
 8001b32:	d007      	beq.n	8001b44 <FLASH_EnableWriteProtection+0x70>
    {
      OB->WRP2 = WRP2_Data;
 8001b34:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b36:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8001b3a:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b3c:	f7ff ff26 	bl	800198c <FLASH_WaitForLastBank1Operation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8001b40:	2804      	cmp	r0, #4
 8001b42:	d10b      	bne.n	8001b5c <FLASH_EnableWriteProtection+0x88>
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8001b44:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8001b46:	2cff      	cmp	r4, #255	; 0xff
 8001b48:	d101      	bne.n	8001b4e <FLASH_EnableWriteProtection+0x7a>
 8001b4a:	2004      	movs	r0, #4
 8001b4c:	e008      	b.n	8001b60 <FLASH_EnableWriteProtection+0x8c>
    {
      OB->WRP3 = WRP3_Data;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <FLASH_EnableWriteProtection+0xa4>)
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8001b50:	b2a4      	uxth	r4, r4
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 8001b52:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b58:	f7ff ff18 	bl	800198c <FLASH_WaitForLastBank1Operation>
    }
          
    if(status != FLASH_TIMEOUT)
 8001b5c:	2805      	cmp	r0, #5
 8001b5e:	d005      	beq.n	8001b6c <FLASH_EnableWriteProtection+0x98>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8001b60:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8001b64:	4a02      	ldr	r2, [pc, #8]	; (8001b70 <FLASH_EnableWriteProtection+0x9c>)
 8001b66:	6911      	ldr	r1, [r2, #16]
 8001b68:	400b      	ands	r3, r1
 8001b6a:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	45670123 	.word	0x45670123
 8001b78:	1ffff800 	.word	0x1ffff800

08001b7c <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8001b84:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b86:	f7ff ff01 	bl	800198c <FLASH_WaitForLastBank1Operation>

  if(status == FLASH_COMPLETE)
 8001b8a:	2804      	cmp	r0, #4
 8001b8c:	d116      	bne.n	8001bbc <FLASH_ProgramOptionByteData+0x40>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001b8e:	4c0c      	ldr	r4, [pc, #48]	; (8001bc0 <FLASH_ProgramOptionByteData+0x44>)
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <FLASH_ProgramOptionByteData+0x48>)
    FLASH->OPTKEYR = FLASH_KEY2;
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(__IO uint16_t*)Address = Data;
 8001b92:	b2ad      	uxth	r5, r5
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001b94:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001b96:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001b9a:	60a3      	str	r3, [r4, #8]
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001b9c:	6923      	ldr	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8001ba8:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001baa:	f7ff feef 	bl	800198c <FLASH_WaitForLastBank1Operation>
    if(status != FLASH_TIMEOUT)
 8001bae:	2805      	cmp	r0, #5
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8001bb0:	bf1f      	itttt	ne
 8001bb2:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001bb6:	6922      	ldrne	r2, [r4, #16]
 8001bb8:	4013      	andne	r3, r2
 8001bba:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
}
 8001bbc:	bd70      	pop	{r4, r5, r6, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	45670123 	.word	0x45670123

08001bc8 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001bcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001bd0:	460e      	mov	r6, r1
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001bd2:	f7ff fedb 	bl	800198c <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001bd6:	2804      	cmp	r0, #4
 8001bd8:	d10e      	bne.n	8001bf8 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8001bda:	4c08      	ldr	r4, [pc, #32]	; (8001bfc <FLASH_ProgramHalfWord+0x34>)
  
    *(__IO uint16_t*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001bdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8001be0:	6923      	ldr	r3, [r4, #16]
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = Data;
 8001be8:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001bea:	f7ff fecf 	bl	800198c <FLASH_WaitForLastBank1Operation>
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8001bee:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001bf2:	6922      	ldr	r2, [r4, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	6123      	str	r3, [r4, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
}
 8001bf8:	bd70      	pop	{r4, r5, r6, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000

08001c00 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 8001c02:	2300      	movs	r3, #0
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001c04:	4606      	mov	r6, r0
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001c0a:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 8001c0c:	9301      	str	r3, [sp, #4]
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c0e:	f7ff febd 	bl	800198c <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001c12:	2804      	cmp	r0, #4
 8001c14:	d11a      	bne.n	8001c4c <FLASH_ProgramWord+0x4c>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8001c16:	4c0e      	ldr	r4, [pc, #56]	; (8001c50 <FLASH_ProgramWord+0x50>)
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8001c1c:	6923      	ldr	r3, [r4, #16]
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8001c24:	b2ab      	uxth	r3, r5
 8001c26:	8033      	strh	r3, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c28:	f7ff feb0 	bl	800198c <FLASH_WaitForLastBank1Operation>
 
    if(status == FLASH_COMPLETE)
 8001c2c:	2804      	cmp	r0, #4
 8001c2e:	d108      	bne.n	8001c42 <FLASH_ProgramWord+0x42>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 8001c30:	3602      	adds	r6, #2
 8001c32:	9601      	str	r6, [sp, #4]

      *(__IO uint16_t*) tmp = Data >> 16;
 8001c34:	9b01      	ldr	r3, [sp, #4]
 8001c36:	0c2d      	lsrs	r5, r5, #16
 8001c38:	801d      	strh	r5, [r3, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c3a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c3e:	f7ff fea5 	bl	800198c <FLASH_WaitForLastBank1Operation>
      FLASH->CR &= CR_PG_Reset;
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8001c42:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001c46:	6922      	ldr	r2, [r4, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	6123      	str	r3, [r4, #16]
  }         
#endif /* STM32F10X_XL */
   
  /* Return the Program Status */
  return status;
}
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	40022000 	.word	0x40022000

08001c54 <FLASH_EraseOptionBytes>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8001c54:	b538      	push	{r3, r4, r5, lr}
  uint16_t rdptmp = RDP_Key;

  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
 8001c56:	f7ff fe3f 	bl	80018d8 <FLASH_GetReadOutProtectionStatus>
  {
    rdptmp = 0x00;  
 8001c5a:	2800      	cmp	r0, #0
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c5c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
  {
    rdptmp = 0x00;  
 8001c60:	bf0c      	ite	eq
 8001c62:	25a5      	moveq	r5, #165	; 0xa5
 8001c64:	2500      	movne	r5, #0
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c66:	f7ff fe91 	bl	800198c <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8001c6a:	2804      	cmp	r0, #4
 8001c6c:	d129      	bne.n	8001cc2 <FLASH_EraseOptionBytes+0x6e>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001c6e:	4c15      	ldr	r4, [pc, #84]	; (8001cc4 <FLASH_EraseOptionBytes+0x70>)
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <FLASH_EraseOptionBytes+0x74>)
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c72:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001c76:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001c78:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001c7c:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8001c7e:	6923      	ldr	r3, [r4, #16]
 8001c80:	f043 0320 	orr.w	r3, r3, #32
 8001c84:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8001c86:	6923      	ldr	r3, [r4, #16]
 8001c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c8c:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c8e:	f7ff fe7d 	bl	800198c <FLASH_WaitForLastBank1Operation>
    
    if(status == FLASH_COMPLETE)
 8001c92:	2804      	cmp	r0, #4
 8001c94:	d10e      	bne.n	8001cb4 <FLASH_EraseOptionBytes+0x60>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8001c96:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8001c9a:	6922      	ldr	r2, [r4, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    status = FLASH_WaitForLastOperation(EraseTimeout);
    
    if(status == FLASH_COMPLETE)
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8001ca4:	6923      	ldr	r3, [r4, #16]
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6123      	str	r3, [r4, #16]
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 8001cac:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <FLASH_EraseOptionBytes+0x78>)
 8001cae:	801d      	strh	r5, [r3, #0]
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001cb0:	f7ff fe6c 	bl	800198c <FLASH_WaitForLastBank1Operation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
 8001cb4:	2805      	cmp	r0, #5
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8001cb6:	bf1f      	itttt	ne
 8001cb8:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001cbc:	6922      	ldrne	r2, [r4, #16]
 8001cbe:	4013      	andne	r3, r2
 8001cc0:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	45670123 	.word	0x45670123
 8001ccc:	1ffff800 	.word	0x1ffff800

08001cd0 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001cd4:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001cd8:	f7ff fe58 	bl	800198c <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001cdc:	2804      	cmp	r0, #4
 8001cde:	d112      	bne.n	8001d06 <FLASH_ErasePage+0x36>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001ce0:	4c09      	ldr	r4, [pc, #36]	; (8001d08 <FLASH_ErasePage+0x38>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001ce2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001ce6:	6923      	ldr	r3, [r4, #16]
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8001cee:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8001cf0:	6923      	ldr	r3, [r4, #16]
 8001cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf6:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001cf8:	f7ff fe48 	bl	800198c <FLASH_WaitForLastBank1Operation>
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8001cfc:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8001d00:	6922      	ldr	r2, [r4, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	6123      	str	r3, [r4, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
}
 8001d06:	bd38      	pop	{r3, r4, r5, pc}
 8001d08:	40022000 	.word	0x40022000

08001d0c <FLASH_WaitForLastOperation>:
 8001d0c:	f7ff be3e 	b.w	800198c <FLASH_WaitForLastBank1Operation>

08001d10 <FSMC_NORSRAMDeInit>:
  *     @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *     @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8001d10:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8001d14:	b918      	cbnz	r0, 8001d1e <FSMC_NORSRAMDeInit+0xe>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8001d16:	f243 02db 	movw	r2, #12507	; 0x30db
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e003      	b.n	8001d26 <FSMC_NORSRAMDeInit+0x16>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8001d1e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d22:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8001d26:	0080      	lsls	r0, r0, #2
 8001d28:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8001d2c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001d30:	6043      	str	r3, [r0, #4]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8001d32:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8001d36:	4770      	bx	lr

08001d38 <FSMC_NANDDeInit>:
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8001d38:	2810      	cmp	r0, #16
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8001d3a:	bf0c      	ite	eq
 8001d3c:	4b05      	ldreq	r3, [pc, #20]	; (8001d54 <FSMC_NANDDeInit+0x1c>)
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8001d3e:	4b06      	ldrne	r3, [pc, #24]	; (8001d58 <FSMC_NANDDeInit+0x20>)
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	2118      	movs	r1, #24
 8001d44:	6019      	str	r1, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8001d46:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8001d48:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001d4c:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	a0000060 	.word	0xa0000060
 8001d58:	a0000080 	.word	0xa0000080

08001d5c <FSMC_PCCARDDeInit>:
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <FSMC_PCCARDDeInit+0x18>)
 8001d5e:	2218      	movs	r2, #24
 8001d60:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8001d66:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001d6a:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8001d6c:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8001d6e:	611a      	str	r2, [r3, #16]
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	a00000a0 	.word	0xa00000a0

08001d78 <FSMC_NORSRAMInit>:
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8001d78:	6881      	ldr	r1, [r0, #8]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001d7a:	6843      	ldr	r3, [r0, #4]
  *         structure that contains the configuration information for 
  *        the FSMC NOR/SRAM specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8001d7c:	b530      	push	{r4, r5, lr}
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001d7e:	ea41 0203 	orr.w	r2, r1, r3
 8001d82:	68c3      	ldr	r3, [r0, #12]
 8001d84:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d86:	431a      	orrs	r2, r3
 8001d88:	6903      	ldr	r3, [r0, #16]
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;

  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8001d8a:	2908      	cmp	r1, #8
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001d8c:	ea42 0203 	orr.w	r2, r2, r3
 8001d90:	6943      	ldr	r3, [r0, #20]
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
  }
  
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8001d92:	6b41      	ldr	r1, [r0, #52]	; 0x34
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001d94:	ea42 0203 	orr.w	r2, r2, r3
 8001d98:	6983      	ldr	r3, [r0, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001d9a:	680d      	ldr	r5, [r1, #0]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001d9c:	ea42 0203 	orr.w	r2, r2, r3
 8001da0:	69c3      	ldr	r3, [r0, #28]
 8001da2:	ea42 0203 	orr.w	r2, r2, r3
 8001da6:	6a03      	ldr	r3, [r0, #32]
 8001da8:	ea42 0203 	orr.w	r2, r2, r3
 8001dac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dae:	ea42 0203 	orr.w	r2, r2, r3
 8001db2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001db4:	ea43 0302 	orr.w	r3, r3, r2
 8001db8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001dba:	ea43 0304 	orr.w	r3, r3, r4
 8001dbe:	ea43 0302 	orr.w	r3, r3, r2
 8001dc2:	6802      	ldr	r2, [r0, #0]
 8001dc4:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8001dc8:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8001dcc:	6013      	str	r3, [r2, #0]
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;

  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
 8001dce:	bf02      	ittt	eq
 8001dd0:	6813      	ldreq	r3, [r2, #0]
 8001dd2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8001dd6:	6013      	streq	r3, [r2, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001dd8:	698b      	ldr	r3, [r1, #24]
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8001dda:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001dde:	ea43 0305 	orr.w	r3, r3, r5
 8001de2:	684d      	ldr	r5, [r1, #4]
 8001de4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001de8:	688d      	ldr	r5, [r1, #8]
 8001dea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001dee:	68cd      	ldr	r5, [r1, #12]
 8001df0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001df4:	690d      	ldr	r5, [r1, #16]
 8001df6:	6949      	ldr	r1, [r1, #20]
 8001df8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8001dfc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
  }
  
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8001e00:	6053      	str	r3, [r2, #4]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8001e02:	d110      	bne.n	8001e26 <FSMC_NORSRAMInit+0xae>
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8001e04:	6b81      	ldr	r1, [r0, #56]	; 0x38
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8001e06:	6808      	ldr	r0, [r1, #0]
 8001e08:	698b      	ldr	r3, [r1, #24]
 8001e0a:	4303      	orrs	r3, r0
 8001e0c:	6848      	ldr	r0, [r1, #4]
 8001e0e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001e12:	6888      	ldr	r0, [r1, #8]
 8001e14:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001e18:	6908      	ldr	r0, [r1, #16]
 8001e1a:	6949      	ldr	r1, [r1, #20]
 8001e1c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8001e20:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001e24:	e001      	b.n	8001e2a <FSMC_NORSRAMInit+0xb2>
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8001e26:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001e2a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8001e2e:	bd30      	pop	{r4, r5, pc}

08001e30 <FSMC_NANDInit>:
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001e30:	6842      	ldr	r2, [r0, #4]
 8001e32:	6883      	ldr	r3, [r0, #8]
  *         structure that contains the configuration information for the FSMC 
  *         NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8001e34:	b530      	push	{r4, r5, lr}
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	68c2      	ldr	r2, [r0, #12]
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	6903      	ldr	r3, [r0, #16]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e42:	69c4      	ldr	r4, [r0, #28]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001e44:	4313      	orrs	r3, r2
 8001e46:	6942      	ldr	r2, [r0, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e48:	6861      	ldr	r1, [r4, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001e4a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001e4e:	6982      	ldr	r2, [r0, #24]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e50:	6a05      	ldr	r5, [r0, #32]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001e52:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e56:	68a2      	ldr	r2, [r4, #8]
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8001e58:	6800      	ldr	r0, [r0, #0]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e5a:	0412      	lsls	r2, r2, #16
 8001e5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e60:	6821      	ldr	r1, [r4, #0]
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8001e62:	2810      	cmp	r0, #16
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e64:	ea42 0201 	orr.w	r2, r2, r1
 8001e68:	68e1      	ldr	r1, [r4, #12]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e6a:	68ac      	ldr	r4, [r5, #8]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e6c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e70:	686a      	ldr	r2, [r5, #4]
 8001e72:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8001e76:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001e7a:	682a      	ldr	r2, [r5, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8001e7c:	bf08      	it	eq
 8001e7e:	4806      	ldreq	r0, [pc, #24]	; (8001e98 <FSMC_NANDInit+0x68>)
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e80:	ea42 0204 	orr.w	r2, r2, r4
 8001e84:	68ec      	ldr	r4, [r5, #12]
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8001e86:	bf18      	it	ne
 8001e88:	4804      	ldrne	r0, [pc, #16]	; (8001e9c <FSMC_NANDInit+0x6c>)
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e8a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8001e8e:	6003      	str	r3, [r0, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8001e90:	6081      	str	r1, [r0, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8001e92:	60c2      	str	r2, [r0, #12]
 8001e94:	bd30      	pop	{r4, r5, pc}
 8001e96:	bf00      	nop
 8001e98:	a0000060 	.word	0xa0000060
 8001e9c:	a0000080 	.word	0xa0000080

08001ea0 <FSMC_PCCARDInit>:
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8001ea0:	6803      	ldr	r3, [r0, #0]
 8001ea2:	6842      	ldr	r2, [r0, #4]
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001eac:	6882      	ldr	r2, [r0, #8]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8001eae:	4915      	ldr	r1, [pc, #84]	; (8001f04 <FSMC_PCCARDInit+0x64>)
  *         structure that contains the configuration information for the FSMC 
  *         PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8001eb0:	b510      	push	{r4, lr}
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8001eb2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001eb6:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8001eb8:	600b      	str	r3, [r1, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001eba:	68a2      	ldr	r2, [r4, #8]
 8001ebc:	6863      	ldr	r3, [r4, #4]
 8001ebe:	0412      	lsls	r2, r2, #16
 8001ec0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	68e2      	ldr	r2, [r4, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001eca:	6904      	ldr	r4, [r0, #16]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001ecc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001ed0:	608b      	str	r3, [r1, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001ed2:	68a2      	ldr	r2, [r4, #8]
 8001ed4:	6863      	ldr	r3, [r4, #4]
 8001ed6:	0412      	lsls	r2, r2, #16
 8001ed8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001edc:	6823      	ldr	r3, [r4, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8001ede:	6940      	ldr	r0, [r0, #20]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	68e2      	ldr	r2, [r4, #12]
 8001ee4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001ee8:	60cb      	str	r3, [r1, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001eea:	6882      	ldr	r2, [r0, #8]
 8001eec:	6843      	ldr	r3, [r0, #4]
 8001eee:	0412      	lsls	r2, r2, #16
 8001ef0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001ef4:	6803      	ldr	r3, [r0, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	68c2      	ldr	r2, [r0, #12]
 8001efa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8001efe:	610b      	str	r3, [r1, #16]
 8001f00:	bd10      	pop	{r4, pc}
 8001f02:	bf00      	nop
 8001f04:	a00000a0 	.word	0xa00000a0

08001f08 <FSMC_NORSRAMStructInit>:
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8001f08:	2202      	movs	r2, #2
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8001f0a:	b510      	push	{r4, lr}
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8001f0c:	6042      	str	r2, [r0, #4]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8001f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f12:	6242      	str	r2, [r0, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001f14:	6b41      	ldr	r1, [r0, #52]	; 0x34
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8001f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1a:	6282      	str	r2, [r0, #40]	; 0x28
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8001f1c:	2300      	movs	r3, #0
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001f1e:	220f      	movs	r2, #15
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001f20:	24ff      	movs	r4, #255	; 0xff
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8001f22:	6003      	str	r3, [r0, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8001f24:	6083      	str	r3, [r0, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8001f26:	60c3      	str	r3, [r0, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8001f28:	6103      	str	r3, [r0, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8001f2a:	6143      	str	r3, [r0, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8001f2c:	6183      	str	r3, [r0, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8001f2e:	61c3      	str	r3, [r0, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8001f30:	6203      	str	r3, [r0, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8001f32:	62c3      	str	r3, [r0, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8001f34:	6303      	str	r3, [r0, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001f36:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8001f38:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001f3a:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8001f3c:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8001f3e:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8001f40:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8001f42:	618b      	str	r3, [r1, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001f44:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001f46:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8001f48:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001f4a:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8001f4c:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8001f4e:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8001f50:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8001f52:	618b      	str	r3, [r1, #24]
 8001f54:	bd10      	pop	{r4, pc}

08001f56 <FSMC_NANDStructInit>:
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8001f56:	2310      	movs	r3, #16
 8001f58:	6003      	str	r3, [r0, #0]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f5a:	69c2      	ldr	r2, [r0, #28]
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6043      	str	r3, [r0, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8001f60:	6083      	str	r3, [r0, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8001f62:	60c3      	str	r3, [r0, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8001f64:	6103      	str	r3, [r0, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8001f66:	6143      	str	r3, [r0, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8001f68:	6183      	str	r3, [r0, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f6a:	23fc      	movs	r3, #252	; 0xfc
 8001f6c:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001f6e:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001f70:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001f72:	60d3      	str	r3, [r2, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f74:	6a02      	ldr	r2, [r0, #32]
 8001f76:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001f78:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001f7a:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8001f7c:	60d3      	str	r3, [r2, #12]
 8001f7e:	4770      	bx	lr

08001f80 <FSMC_PCCARDStructInit>:
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f80:	68c2      	ldr	r2, [r0, #12]
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8001f82:	2300      	movs	r3, #0
 8001f84:	6003      	str	r3, [r0, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8001f86:	6043      	str	r3, [r0, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8001f88:	6083      	str	r3, [r0, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f8a:	23fc      	movs	r3, #252	; 0xfc
 8001f8c:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001f8e:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001f90:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001f92:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f94:	6902      	ldr	r2, [r0, #16]
 8001f96:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001f98:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001f9a:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8001f9c:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f9e:	6942      	ldr	r2, [r0, #20]
 8001fa0:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001fa2:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001fa4:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001fa6:	60d3      	str	r3, [r2, #12]
 8001fa8:	4770      	bx	lr

08001faa <FSMC_NORSRAMCmd>:
  *     @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8001faa:	0080      	lsls	r0, r0, #2
 8001fac:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fb0:	b119      	cbz	r1, 8001fba <FSMC_NORSRAMCmd+0x10>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
 8001fb2:	6803      	ldr	r3, [r0, #0]
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	e002      	b.n	8001fc0 <FSMC_NORSRAMCmd+0x16>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
 8001fba:	6802      	ldr	r2, [r0, #0]
 8001fbc:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <FSMC_NORSRAMCmd+0x1a>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	6003      	str	r3, [r0, #0]
 8001fc2:	4770      	bx	lr
 8001fc4:	000ffffe 	.word	0x000ffffe

08001fc8 <FSMC_NANDCmd>:
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fc8:	b139      	cbz	r1, 8001fda <FSMC_NANDCmd+0x12>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001fca:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
 8001fcc:	bf0c      	ite	eq
 8001fce:	4a07      	ldreq	r2, [pc, #28]	; (8001fec <FSMC_NANDCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
 8001fd0:	4a07      	ldrne	r2, [pc, #28]	; (8001ff0 <FSMC_NANDCmd+0x28>)
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	e006      	b.n	8001fe8 <FSMC_NANDCmd+0x20>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001fda:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
 8001fdc:	bf0c      	ite	eq
 8001fde:	4a03      	ldreq	r2, [pc, #12]	; (8001fec <FSMC_NANDCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
 8001fe0:	4a03      	ldrne	r2, [pc, #12]	; (8001ff0 <FSMC_NANDCmd+0x28>)
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <FSMC_NANDCmd+0x2c>)
 8001fe4:	6811      	ldr	r1, [r2, #0]
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4770      	bx	lr
 8001fec:	a0000060 	.word	0xa0000060
 8001ff0:	a0000080 	.word	0xa0000080
 8001ff4:	000ffffb 	.word	0x000ffffb

08001ff8 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <FSMC_PCCARDCmd+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ffa:	b118      	cbz	r0, 8002004 <FSMC_PCCARDCmd+0xc>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f042 0204 	orr.w	r2, r2, #4
 8002002:	e002      	b.n	800200a <FSMC_PCCARDCmd+0x12>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <FSMC_PCCARDCmd+0x1c>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	a00000a0 	.word	0xa00000a0
 8002014:	000ffffb 	.word	0x000ffffb

08002018 <FSMC_NANDECCCmd>:
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002018:	b139      	cbz	r1, 800202a <FSMC_NANDECCCmd+0x12>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800201a:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
 800201c:	bf0c      	ite	eq
 800201e:	4a07      	ldreq	r2, [pc, #28]	; (800203c <FSMC_NANDECCCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
 8002020:	4a07      	ldrne	r2, [pc, #28]	; (8002040 <FSMC_NANDECCCmd+0x28>)
 8002022:	6813      	ldr	r3, [r2, #0]
 8002024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002028:	e006      	b.n	8002038 <FSMC_NANDECCCmd+0x20>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800202a:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
 800202c:	bf0c      	ite	eq
 800202e:	4a03      	ldreq	r2, [pc, #12]	; (800203c <FSMC_NANDECCCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
 8002030:	4a03      	ldrne	r2, [pc, #12]	; (8002040 <FSMC_NANDECCCmd+0x28>)
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <FSMC_NANDECCCmd+0x2c>)
 8002034:	6811      	ldr	r1, [r2, #0]
 8002036:	400b      	ands	r3, r1
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4770      	bx	lr
 800203c:	a0000060 	.word	0xa0000060
 8002040:	a0000080 	.word	0xa0000080
 8002044:	000fffbf 	.word	0x000fffbf

08002048 <FSMC_GetECC>:
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002048:	2810      	cmp	r0, #16
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 800204a:	bf0c      	ite	eq
 800204c:	4b01      	ldreq	r3, [pc, #4]	; (8002054 <FSMC_GetECC+0xc>)
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 800204e:	4b02      	ldrne	r3, [pc, #8]	; (8002058 <FSMC_GetECC+0x10>)
 8002050:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 8002052:	4770      	bx	lr
 8002054:	a0000060 	.word	0xa0000060
 8002058:	a0000080 	.word	0xa0000080

0800205c <FSMC_ITConfig>:
{
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800205c:	b17a      	cbz	r2, 800207e <FSMC_ITConfig+0x22>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800205e:	2810      	cmp	r0, #16
 8002060:	d101      	bne.n	8002066 <FSMC_ITConfig+0xa>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <FSMC_ITConfig+0x40>)
 8002064:	e008      	b.n	8002078 <FSMC_ITConfig+0x1c>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8002066:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800206a:	d104      	bne.n	8002076 <FSMC_ITConfig+0x1a>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <FSMC_ITConfig+0x44>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4311      	orrs	r1, r2
 8002072:	6059      	str	r1, [r3, #4]
 8002074:	4770      	bx	lr
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <FSMC_ITConfig+0x48>)
 8002078:	6853      	ldr	r3, [r2, #4]
 800207a:	4319      	orrs	r1, r3
 800207c:	e00c      	b.n	8002098 <FSMC_ITConfig+0x3c>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800207e:	2810      	cmp	r0, #16
 8002080:	ea6f 0101 	mvn.w	r1, r1
 8002084:	d101      	bne.n	800208a <FSMC_ITConfig+0x2e>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <FSMC_ITConfig+0x40>)
 8002088:	e004      	b.n	8002094 <FSMC_ITConfig+0x38>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 800208a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 800208e:	bf0c      	ite	eq
 8002090:	4a03      	ldreq	r2, [pc, #12]	; (80020a0 <FSMC_ITConfig+0x44>)
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8002092:	4a04      	ldrne	r2, [pc, #16]	; (80020a4 <FSMC_ITConfig+0x48>)
 8002094:	6853      	ldr	r3, [r2, #4]
 8002096:	4019      	ands	r1, r3
 8002098:	6051      	str	r1, [r2, #4]
 800209a:	4770      	bx	lr
 800209c:	a0000060 	.word	0xa0000060
 80020a0:	a0000080 	.word	0xa0000080
 80020a4:	a00000a0 	.word	0xa00000a0

080020a8 <FSMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80020a8:	2810      	cmp	r0, #16
 80020aa:	d101      	bne.n	80020b0 <FSMC_GetFlagStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <FSMC_GetFlagStatus+0x20>)
 80020ae:	e004      	b.n	80020ba <FSMC_GetFlagStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80020b0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 80020b4:	bf0c      	ite	eq
 80020b6:	4b05      	ldreq	r3, [pc, #20]	; (80020cc <FSMC_GetFlagStatus+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80020b8:	4b05      	ldrne	r3, [pc, #20]	; (80020d0 <FSMC_GetFlagStatus+0x28>)
 80020ba:	685b      	ldr	r3, [r3, #4]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 80020bc:	420b      	tst	r3, r1
}
 80020be:	bf14      	ite	ne
 80020c0:	2001      	movne	r0, #1
 80020c2:	2000      	moveq	r0, #0
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	a0000060 	.word	0xa0000060
 80020cc:	a0000080 	.word	0xa0000080
 80020d0:	a00000a0 	.word	0xa00000a0

080020d4 <FSMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80020d4:	2810      	cmp	r0, #16
 80020d6:	ea6f 0101 	mvn.w	r1, r1
 80020da:	d101      	bne.n	80020e0 <FSMC_ClearFlag+0xc>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 80020dc:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <FSMC_ClearFlag+0x20>)
 80020de:	e004      	b.n	80020ea <FSMC_ClearFlag+0x16>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80020e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 80020e4:	bf0c      	ite	eq
 80020e6:	4a04      	ldreq	r2, [pc, #16]	; (80020f8 <FSMC_ClearFlag+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 80020e8:	4a04      	ldrne	r2, [pc, #16]	; (80020fc <FSMC_ClearFlag+0x28>)
 80020ea:	6853      	ldr	r3, [r2, #4]
 80020ec:	4019      	ands	r1, r3
 80020ee:	6051      	str	r1, [r2, #4]
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	a0000060 	.word	0xa0000060
 80020f8:	a0000080 	.word	0xa0000080
 80020fc:	a00000a0 	.word	0xa00000a0

08002100 <FSMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002100:	2810      	cmp	r0, #16
 8002102:	d101      	bne.n	8002108 <FSMC_GetITStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <FSMC_GetITStatus+0x28>)
 8002106:	e004      	b.n	8002112 <FSMC_GetITStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002108:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 800210c:	bf0c      	ite	eq
 800210e:	4b07      	ldreq	r3, [pc, #28]	; (800212c <FSMC_GetITStatus+0x2c>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002110:	4b07      	ldrne	r3, [pc, #28]	; (8002130 <FSMC_GetITStatus+0x30>)
 8002112:	685b      	ldr	r3, [r3, #4]
  } 
  
  itstatus = tmpsr & FSMC_IT;
  
  itenable = tmpsr & (FSMC_IT >> 3);
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8002114:	ea13 0001 	ands.w	r0, r3, r1
 8002118:	d004      	beq.n	8002124 <FSMC_GetITStatus+0x24>
  {
    bitstatus = SET;
 800211a:	ea13 03d1 	ands.w	r3, r3, r1, lsr #3
 800211e:	bf14      	ite	ne
 8002120:	2001      	movne	r0, #1
 8002122:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	a0000060 	.word	0xa0000060
 800212c:	a0000080 	.word	0xa0000080
 8002130:	a00000a0 	.word	0xa00000a0

08002134 <FSMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002134:	2810      	cmp	r0, #16
 8002136:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 800213a:	d101      	bne.n	8002140 <FSMC_ClearITPendingBit+0xc>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800213c:	4a05      	ldr	r2, [pc, #20]	; (8002154 <FSMC_ClearITPendingBit+0x20>)
 800213e:	e004      	b.n	800214a <FSMC_ClearITPendingBit+0x16>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002140:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8002144:	bf0c      	ite	eq
 8002146:	4a04      	ldreq	r2, [pc, #16]	; (8002158 <FSMC_ClearITPendingBit+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8002148:	4a04      	ldrne	r2, [pc, #16]	; (800215c <FSMC_ClearITPendingBit+0x28>)
 800214a:	6853      	ldr	r3, [r2, #4]
 800214c:	ea23 0101 	bic.w	r1, r3, r1
 8002150:	6051      	str	r1, [r2, #4]
 8002152:	4770      	bx	lr
 8002154:	a0000060 	.word	0xa0000060
 8002158:	a0000080 	.word	0xa0000080
 800215c:	a00000a0 	.word	0xa00000a0

08002160 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8002160:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <GPIO_DeInit+0x9c>)
 8002164:	4298      	cmp	r0, r3
 8002166:	d106      	bne.n	8002176 <GPIO_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002168:	2101      	movs	r1, #1
 800216a:	2004      	movs	r0, #4
 800216c:	f000 fcd6 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8002170:	2100      	movs	r1, #0
 8002172:	2004      	movs	r0, #4
 8002174:	e03c      	b.n	80021f0 <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOB)
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <GPIO_DeInit+0xa0>)
 8002178:	4298      	cmp	r0, r3
 800217a:	d106      	bne.n	800218a <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800217c:	2101      	movs	r1, #1
 800217e:	2008      	movs	r0, #8
 8002180:	f000 fccc 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8002184:	2100      	movs	r1, #0
 8002186:	2008      	movs	r0, #8
 8002188:	e032      	b.n	80021f0 <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOC)
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <GPIO_DeInit+0xa4>)
 800218c:	4298      	cmp	r0, r3
 800218e:	d106      	bne.n	800219e <GPIO_DeInit+0x3e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8002190:	2101      	movs	r1, #1
 8002192:	2010      	movs	r0, #16
 8002194:	f000 fcc2 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8002198:	2100      	movs	r1, #0
 800219a:	2010      	movs	r0, #16
 800219c:	e028      	b.n	80021f0 <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOD)
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <GPIO_DeInit+0xa8>)
 80021a0:	4298      	cmp	r0, r3
 80021a2:	d106      	bne.n	80021b2 <GPIO_DeInit+0x52>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80021a4:	2101      	movs	r1, #1
 80021a6:	2020      	movs	r0, #32
 80021a8:	f000 fcb8 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80021ac:	2100      	movs	r1, #0
 80021ae:	2020      	movs	r0, #32
 80021b0:	e01e      	b.n	80021f0 <GPIO_DeInit+0x90>
  }    
  else if (GPIOx == GPIOE)
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <GPIO_DeInit+0xac>)
 80021b4:	4298      	cmp	r0, r3
 80021b6:	d106      	bne.n	80021c6 <GPIO_DeInit+0x66>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80021b8:	2101      	movs	r1, #1
 80021ba:	2040      	movs	r0, #64	; 0x40
 80021bc:	f000 fcae 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 80021c0:	2100      	movs	r1, #0
 80021c2:	2040      	movs	r0, #64	; 0x40
 80021c4:	e014      	b.n	80021f0 <GPIO_DeInit+0x90>
  } 
  else if (GPIOx == GPIOF)
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <GPIO_DeInit+0xb0>)
 80021c8:	4298      	cmp	r0, r3
 80021ca:	d106      	bne.n	80021da <GPIO_DeInit+0x7a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80021cc:	2101      	movs	r1, #1
 80021ce:	2080      	movs	r0, #128	; 0x80
 80021d0:	f000 fca4 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 80021d4:	2100      	movs	r1, #0
 80021d6:	2080      	movs	r0, #128	; 0x80
 80021d8:	e00a      	b.n	80021f0 <GPIO_DeInit+0x90>
  }
  else
  {
    if (GPIOx == GPIOG)
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <GPIO_DeInit+0xb4>)
 80021dc:	4298      	cmp	r0, r3
 80021de:	d10b      	bne.n	80021f8 <GPIO_DeInit+0x98>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 80021e0:	2101      	movs	r1, #1
 80021e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021e6:	f000 fc99 	bl	8002b1c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80021ea:	2100      	movs	r1, #0
 80021ec:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 80021f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOG)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 80021f4:	f000 bc92 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
 80021f8:	bd08      	pop	{r3, pc}
 80021fa:	bf00      	nop
 80021fc:	40010800 	.word	0x40010800
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40011000 	.word	0x40011000
 8002208:	40011400 	.word	0x40011400
 800220c:	40011800 	.word	0x40011800
 8002210:	40011c00 	.word	0x40011c00
 8002214:	40012000 	.word	0x40012000

08002218 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8002218:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 800221a:	2101      	movs	r1, #1
 800221c:	4608      	mov	r0, r1
 800221e:	f000 fc7d 	bl	8002b1c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 8002222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8002226:	2100      	movs	r1, #0
 8002228:	2001      	movs	r0, #1
 800222a:	f000 bc77 	b.w	8002b1c <RCC_APB2PeriphResetCmd>

0800222e <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800222e:	78ca      	ldrb	r2, [r1, #3]
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8002234:	06d4      	lsls	r4, r2, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002236:	bf48      	it	mi
 8002238:	788c      	ldrbmi	r4, [r1, #2]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800223a:	880e      	ldrh	r6, [r1, #0]
 800223c:	f002 030f 	and.w	r3, r2, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002240:	bf48      	it	mi
 8002242:	4323      	orrmi	r3, r4
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002244:	f016 0fff 	tst.w	r6, #255	; 0xff
 8002248:	d01e      	beq.n	8002288 <GPIO_Init+0x5a>
  {
    tmpreg = GPIOx->CRL;
 800224a:	6801      	ldr	r1, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800224c:	2400      	movs	r4, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 800224e:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8002252:	f04f 0c0f 	mov.w	ip, #15
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
 8002256:	fa0e f704 	lsl.w	r7, lr, r4
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 800225a:	ea37 0506 	bics.w	r5, r7, r6
 800225e:	d10f      	bne.n	8002280 <GPIO_Init+0x52>
      {
        pos = pinpos << 2;
 8002260:	00a5      	lsls	r5, r4, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8002262:	fa0c f805 	lsl.w	r8, ip, r5
 8002266:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800226a:	fa03 f505 	lsl.w	r5, r3, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800226e:	2a28      	cmp	r2, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002270:	ea41 0105 	orr.w	r1, r1, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002274:	d101      	bne.n	800227a <GPIO_Init+0x4c>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8002276:	6147      	str	r7, [r0, #20]
 8002278:	e002      	b.n	8002280 <GPIO_Init+0x52>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800227a:	2a48      	cmp	r2, #72	; 0x48
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800227c:	bf08      	it	eq
 800227e:	6107      	streq	r7, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002280:	3401      	adds	r4, #1
 8002282:	2c08      	cmp	r4, #8
 8002284:	d1e7      	bne.n	8002256 <GPIO_Init+0x28>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8002286:	6001      	str	r1, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002288:	2eff      	cmp	r6, #255	; 0xff
 800228a:	d920      	bls.n	80022ce <GPIO_Init+0xa0>
  {
    tmpreg = GPIOx->CRH;
 800228c:	6841      	ldr	r1, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800228e:	2400      	movs	r4, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8002290:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8002294:	f04f 0c0f 	mov.w	ip, #15
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8002298:	f104 0508 	add.w	r5, r4, #8
 800229c:	fa0e f505 	lsl.w	r5, lr, r5
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80022a0:	ea35 0706 	bics.w	r7, r5, r6
 80022a4:	d10f      	bne.n	80022c6 <GPIO_Init+0x98>
      {
        pos = pinpos << 2;
 80022a6:	00a7      	lsls	r7, r4, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80022a8:	fa0c f807 	lsl.w	r8, ip, r7
 80022ac:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80022b0:	fa03 f707 	lsl.w	r7, r3, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80022b4:	2a28      	cmp	r2, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80022b6:	ea41 0107 	orr.w	r1, r1, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80022ba:	d101      	bne.n	80022c0 <GPIO_Init+0x92>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80022bc:	6145      	str	r5, [r0, #20]
 80022be:	e002      	b.n	80022c6 <GPIO_Init+0x98>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80022c0:	2a48      	cmp	r2, #72	; 0x48
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80022c2:	bf08      	it	eq
 80022c4:	6105      	streq	r5, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80022c6:	3401      	adds	r4, #1
 80022c8:	2c08      	cmp	r4, #8
 80022ca:	d1e5      	bne.n	8002298 <GPIO_Init+0x6a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80022cc:	6041      	str	r1, [r0, #4]
 80022ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080022d2 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80022d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d6:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80022d8:	2302      	movs	r3, #2
 80022da:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80022dc:	2304      	movs	r3, #4
 80022de:	70c3      	strb	r3, [r0, #3]
 80022e0:	4770      	bx	lr

080022e2 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80022e2:	6883      	ldr	r3, [r0, #8]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 80022e4:	4219      	tst	r1, r3
}
 80022e6:	bf14      	ite	ne
 80022e8:	2001      	movne	r0, #1
 80022ea:	2000      	moveq	r0, #0
 80022ec:	4770      	bx	lr

080022ee <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 80022ee:	6880      	ldr	r0, [r0, #8]
}
 80022f0:	b280      	uxth	r0, r0
 80022f2:	4770      	bx	lr

080022f4 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80022f4:	68c3      	ldr	r3, [r0, #12]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 80022f6:	4219      	tst	r1, r3
}
 80022f8:	bf14      	ite	ne
 80022fa:	2001      	movne	r0, #1
 80022fc:	2000      	moveq	r0, #0
 80022fe:	4770      	bx	lr

08002300 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8002300:	68c0      	ldr	r0, [r0, #12]
}
 8002302:	b280      	uxth	r0, r0
 8002304:	4770      	bx	lr

08002306 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8002306:	6101      	str	r1, [r0, #16]
 8002308:	4770      	bx	lr

0800230a <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800230a:	6141      	str	r1, [r0, #20]
 800230c:	4770      	bx	lr

0800230e <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800230e:	b10a      	cbz	r2, 8002314 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002310:	6101      	str	r1, [r0, #16]
 8002312:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8002314:	6141      	str	r1, [r0, #20]
 8002316:	4770      	bx	lr

08002318 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8002318:	60c1      	str	r1, [r0, #12]
 800231a:	4770      	bx	lr

0800231c <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800231c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002320:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8002322:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002324:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002326:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002328:	6983      	ldr	r3, [r0, #24]
 800232a:	4770      	bx	lr

0800232c <GPIO_EventOutputConfig>:
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 800232c:	4a05      	ldr	r2, [pc, #20]	; (8002344 <GPIO_EventOutputConfig+0x18>)
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	0c1b      	lsrs	r3, r3, #16
 8002338:	4319      	orrs	r1, r3
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 800233a:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 800233e:	6010      	str	r0, [r2, #0]
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000

08002348 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <GPIO_EventOutputCmd+0x8>)
 800234a:	6018      	str	r0, [r3, #0]
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	4220001c 	.word	0x4220001c

08002354 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8002354:	2800      	cmp	r0, #0
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <GPIO_PinRemapConfig+0x5c>)
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8002358:	b530      	push	{r4, r5, lr}
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800235a:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    tmpreg = AFIO->MAPR2;
 800235e:	bfb4      	ite	lt
 8002360:	69d3      	ldrlt	r3, [r2, #28]
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8002362:	6853      	ldrge	r3, [r2, #4]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8002364:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8002368:	b284      	uxth	r4, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800236a:	d106      	bne.n	800237a <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800236c:	6855      	ldr	r5, [r2, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 800236e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8002372:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8002376:	6055      	str	r5, [r2, #4]
 8002378:	e00e      	b.n	8002398 <GPIO_PinRemapConfig+0x44>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800237a:	02c2      	lsls	r2, r0, #11
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800237c:	bf55      	itete	pl
 800237e:	0d42      	lsrpl	r2, r0, #21
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8002380:	2203      	movmi	r2, #3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8002382:	0112      	lslpl	r2, r2, #4
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8002384:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8002388:	bf4c      	ite	mi
 800238a:	40aa      	lslmi	r2, r5
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800238c:	fa04 f202 	lslpl.w	r2, r4, r2
 8002390:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8002394:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8002398:	b119      	cbz	r1, 80023a2 <GPIO_PinRemapConfig+0x4e>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 800239a:	0d42      	lsrs	r2, r0, #21
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	4094      	lsls	r4, r2
 80023a0:	4323      	orrs	r3, r4
 80023a2:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <GPIO_PinRemapConfig+0x5c>)
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80023a4:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 80023a6:	bfb4      	ite	lt
 80023a8:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80023aa:	6053      	strge	r3, [r2, #4]
 80023ac:	bd30      	pop	{r4, r5, pc}
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000

080023b4 <GPIO_EXTILineConfig>:
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80023b4:	f001 0303 	and.w	r3, r1, #3
 80023b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80023bc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80023c0:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80023c4:	b510      	push	{r4, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80023c6:	009b      	lsls	r3, r3, #2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80023c8:	688c      	ldr	r4, [r1, #8]
 80023ca:	220f      	movs	r2, #15
 80023cc:	409a      	lsls	r2, r3
 80023ce:	ea24 0202 	bic.w	r2, r4, r2
 80023d2:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80023d4:	688a      	ldr	r2, [r1, #8]
 80023d6:	4098      	lsls	r0, r3
 80023d8:	4310      	orrs	r0, r2
 80023da:	6088      	str	r0, [r1, #8]
 80023dc:	bd10      	pop	{r4, pc}

080023de <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 80023de:	4b01      	ldr	r3, [pc, #4]	; (80023e4 <GPIO_ETH_MediaInterfaceConfig+0x6>)
 80023e0:	6018      	str	r0, [r3, #0]
 80023e2:	4770      	bx	lr
 80023e4:	422000dc 	.word	0x422000dc

080023e8 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 80023e8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <I2C_DeInit+0x30>)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80023ec:	2101      	movs	r1, #1
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 80023ee:	4298      	cmp	r0, r3
 80023f0:	d107      	bne.n	8002402 <I2C_DeInit+0x1a>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80023f2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80023f6:	f000 fb9d 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 80023fa:	2100      	movs	r1, #0
 80023fc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002400:	e006      	b.n	8002410 <I2C_DeInit+0x28>
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8002402:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002406:	f000 fb95 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 800240a:	2100      	movs	r1, #0
 800240c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8002410:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8002414:	f000 bb8e 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 8002418:	40005400 	.word	0x40005400

0800241c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8002422:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8002424:	a801      	add	r0, sp, #4
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8002426:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8002428:	f000 fb0e 	bl	8002a48 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800242c:	9a03      	ldr	r2, [sp, #12]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800242e:	482e      	ldr	r0, [pc, #184]	; (80024e8 <I2C_Init+0xcc>)

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8002430:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8002434:	fbb2 f0f0 	udiv	r0, r2, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8002438:	0436      	lsls	r6, r6, #16
 800243a:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800243c:	b281      	uxth	r1, r0
  tmpreg |= freqrange;
 800243e:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8002440:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8002442:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8002444:	4e29      	ldr	r6, [pc, #164]	; (80024ec <I2C_Init+0xd0>)
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8002450:	682b      	ldr	r3, [r5, #0]
 8002452:	42b3      	cmp	r3, r6
 8002454:	d80a      	bhi.n	800246c <I2C_Init+0x50>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800245c:	3101      	adds	r1, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800245e:	b29b      	uxth	r3, r3
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8002460:	2b03      	cmp	r3, #3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8002462:	b289      	uxth	r1, r1
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8002464:	bf98      	it	ls
 8002466:	2304      	movls	r3, #4
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8002468:	8421      	strh	r1, [r4, #32]
 800246a:	e023      	b.n	80024b4 <I2C_Init+0x98>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800246c:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 8002470:	88ee      	ldrh	r6, [r5, #6]
 8002472:	428e      	cmp	r6, r1
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8002474:	bf1b      	ittet	ne
 8002476:	2119      	movne	r1, #25
 8002478:	434b      	mulne	r3, r1
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800247a:	eb03 0343 	addeq.w	r3, r3, r3, lsl #1
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800247e:	fbb2 f3f3 	udivne	r3, r2, r3
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8002482:	bf0b      	itete	eq
 8002484:	fbb2 f3f3 	udiveq	r3, r2, r3
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8002488:	b29b      	uxthne	r3, r3
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800248a:	b29b      	uxtheq	r3, r3
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800248c:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8002490:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002494:	b90a      	cbnz	r2, 800249a <I2C_Init+0x7e>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8002496:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800249a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800249e:	fb01 f200 	mul.w	r2, r1, r0
 80024a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024a6:	fb92 f2f1 	sdiv	r2, r2, r1
 80024aa:	3201      	adds	r2, #1
 80024ac:	b292      	uxth	r2, r2
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80024ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80024b2:	8422      	strh	r2, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80024b4:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 80024b6:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80024b8:	88a9      	ldrh	r1, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80024c2:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80024c4:	896a      	ldrh	r2, [r5, #10]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80024c6:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80024ca:	f023 0302 	bic.w	r3, r3, #2
 80024ce:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80024d0:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80024d2:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80024d8:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80024da:	89aa      	ldrh	r2, [r5, #12]
 80024dc:	892b      	ldrh	r3, [r5, #8]
 80024de:	4313      	orrs	r3, r2
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	8123      	strh	r3, [r4, #8]
}
 80024e4:	b006      	add	sp, #24
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
 80024e8:	000f4240 	.word	0x000f4240
 80024ec:	000186a0 	.word	0x000186a0

080024f0 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80024f0:	f241 3388 	movw	r3, #5000	; 0x1388
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80024f4:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80024f8:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80024fa:	2300      	movs	r3, #0
 80024fc:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80024fe:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8002500:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8002506:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002508:	8183      	strh	r3, [r0, #12]
 800250a:	4770      	bx	lr

0800250c <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800250c:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800250e:	b119      	cbz	r1, 8002518 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8002510:	b29b      	uxth	r3, r3
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	e003      	b.n	8002520 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	8003      	strh	r3, [r0, #0]
 8002522:	4770      	bx	lr

08002524 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8002524:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002526:	b119      	cbz	r1, 8002530 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8002528:	b29b      	uxth	r3, r3
 800252a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800252e:	e003      	b.n	8002538 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 8002530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	8083      	strh	r3, [r0, #4]
 800253a:	4770      	bx	lr

0800253c <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 800253c:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800253e:	b119      	cbz	r1, 8002548 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 8002540:	b29b      	uxth	r3, r3
 8002542:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002546:	e003      	b.n	8002550 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= CR2_LAST_Reset;
 8002548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	8083      	strh	r3, [r0, #4]
 8002552:	4770      	bx	lr

08002554 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8002554:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002556:	b119      	cbz	r1, 8002560 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8002558:	b29b      	uxth	r3, r3
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	e003      	b.n	8002568 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 8002560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	0c1b      	lsrs	r3, r3, #16
 8002568:	8003      	strh	r3, [r0, #0]
 800256a:	4770      	bx	lr

0800256c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800256c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800256e:	b119      	cbz	r1, 8002578 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8002570:	b29b      	uxth	r3, r3
 8002572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002576:	e003      	b.n	8002580 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8002578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	8003      	strh	r3, [r0, #0]
 8002582:	4770      	bx	lr

08002584 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8002584:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002586:	b119      	cbz	r1, 8002590 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8002588:	b29b      	uxth	r3, r3
 800258a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258e:	e003      	b.n	8002598 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 8002590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	8003      	strh	r3, [r0, #0]
 800259a:	4770      	bx	lr

0800259c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800259c:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800259e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80025a2:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80025a4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80025a8:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80025aa:	8183      	strh	r3, [r0, #12]
 80025ac:	4770      	bx	lr

080025ae <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 80025ae:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025b0:	b119      	cbz	r1, 80025ba <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	e003      	b.n	80025c2 <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	041b      	lsls	r3, r3, #16
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	8183      	strh	r3, [r0, #12]
 80025c4:	4770      	bx	lr

080025c6 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= CR1_ENGC_Set;
 80025c6:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025c8:	b119      	cbz	r1, 80025d2 <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= CR1_ENGC_Set;
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d0:	e003      	b.n	80025da <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= CR1_ENGC_Reset;
 80025d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	8003      	strh	r3, [r0, #0]
 80025dc:	4770      	bx	lr

080025de <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80025de:	8883      	ldrh	r3, [r0, #4]
 80025e0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80025e2:	b10a      	cbz	r2, 80025e8 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80025e4:	4319      	orrs	r1, r3
 80025e6:	e001      	b.n	80025ec <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80025e8:	ea23 0101 	bic.w	r1, r3, r1
 80025ec:	8081      	strh	r1, [r0, #4]
 80025ee:	4770      	bx	lr

080025f0 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 80025f0:	8201      	strh	r1, [r0, #16]
 80025f2:	4770      	bx	lr

080025f4 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 80025f4:	8a00      	ldrh	r0, [r0, #16]
}
 80025f6:	b2c0      	uxtb	r0, r0
 80025f8:	4770      	bx	lr

080025fa <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80025fa:	b112      	cbz	r2, 8002602 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80025fc:	f041 0101 	orr.w	r1, r1, #1
 8002600:	e001      	b.n	8002606 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8002602:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8002606:	b289      	uxth	r1, r1
 8002608:	8201      	strh	r1, [r0, #16]
 800260a:	4770      	bx	lr

0800260c <I2C_ReadRegister>:
  *     @arg I2C_Register_CCR:   CCR register.
  *     @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800260c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800260e:	2300      	movs	r3, #0
 8002610:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8002612:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8002614:	9b01      	ldr	r3, [sp, #4]
 8002616:	4419      	add	r1, r3
 8002618:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	8818      	ldrh	r0, [r3, #0]
}
 800261e:	b280      	uxth	r0, r0
 8002620:	b002      	add	sp, #8
 8002622:	4770      	bx	lr

08002624 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= CR1_SWRST_Set;
 8002624:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002626:	b129      	cbz	r1, 8002634 <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= CR1_SWRST_Set;
 8002628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002630:	b29b      	uxth	r3, r3
 8002632:	e001      	b.n	8002638 <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= CR1_SWRST_Reset;
 8002634:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002638:	8003      	strh	r3, [r0, #0]
 800263a:	4770      	bx	lr

0800263c <I2C_SMBusAlertConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800263c:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800263e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8002642:	bf15      	itete	ne
 8002644:	f423 5300 	bicne.w	r3, r3, #8192	; 0x2000
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8002648:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800264a:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800264c:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8002650:	bf18      	it	ne
 8002652:	0c1b      	lsrne	r3, r3, #16
 8002654:	8003      	strh	r3, [r0, #0]
 8002656:	4770      	bx	lr

08002658 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= CR1_PEC_Set;
 8002658:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800265a:	b119      	cbz	r1, 8002664 <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= CR1_PEC_Set;
 800265c:	b29b      	uxth	r3, r3
 800265e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002662:	e003      	b.n	800266c <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= CR1_PEC_Reset;
 8002664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	8003      	strh	r3, [r0, #0]
 800266e:	4770      	bx	lr

08002670 <I2C_PECPositionConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8002670:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8002672:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8002676:	bf15      	itete	ne
 8002678:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800267c:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800267e:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8002680:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8002684:	bf18      	it	ne
 8002686:	0c1b      	lsrne	r3, r3, #16
 8002688:	8003      	strh	r3, [r0, #0]
 800268a:	4770      	bx	lr

0800268c <I2C_NACKPositionConfig>:
 800268c:	f7ff bff0 	b.w	8002670 <I2C_PECPositionConfig>

08002690 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= CR1_ENPEC_Set;
 8002690:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002692:	b119      	cbz	r1, 800269c <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= CR1_ENPEC_Set;
 8002694:	b29b      	uxth	r3, r3
 8002696:	f043 0320 	orr.w	r3, r3, #32
 800269a:	e003      	b.n	80026a4 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= CR1_ENPEC_Reset;
 800269c:	f023 0320 	bic.w	r3, r3, #32
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	0c1b      	lsrs	r3, r3, #16
 80026a4:	8003      	strh	r3, [r0, #0]
 80026a6:	4770      	bx	lr

080026a8 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80026a8:	8b00      	ldrh	r0, [r0, #24]
}
 80026aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80026ae:	4770      	bx	lr

080026b0 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= CR1_ENARP_Set;
 80026b0:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80026b2:	b119      	cbz	r1, 80026bc <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= CR1_ENARP_Set;
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f043 0310 	orr.w	r3, r3, #16
 80026ba:	e003      	b.n	80026c4 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= CR1_ENARP_Reset;
 80026bc:	f023 0310 	bic.w	r3, r3, #16
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	0c1b      	lsrs	r3, r3, #16
 80026c4:	8003      	strh	r3, [r0, #0]
 80026c6:	4770      	bx	lr

080026c8 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 80026c8:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80026ca:	b919      	cbnz	r1, 80026d4 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d2:	e003      	b.n	80026dc <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 80026d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	8003      	strh	r3, [r0, #0]
 80026de:	4770      	bx	lr

080026e0 <I2C_FastModeDutyCycleConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80026e0:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80026e2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80026e6:	bf1b      	ittet	ne
 80026e8:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 80026ec:	041b      	lslne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80026ee:	b29b      	uxtheq	r3, r3
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80026f0:	0c1b      	lsrne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80026f2:	bf08      	it	eq
 80026f4:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80026f8:	8383      	strh	r3, [r0, #28]
 80026fa:	4770      	bx	lr

080026fc <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80026fc:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80026fe:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002700:	b29b      	uxth	r3, r3
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
 8002702:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002706:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800270a:	ea03 0002 	and.w	r0, r3, r2
}
 800270e:	1a43      	subs	r3, r0, r1
 8002710:	4258      	negs	r0, r3
 8002712:	4158      	adcs	r0, r3
 8002714:	4770      	bx	lr

08002716 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002716:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8002718:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800271a:	b29b      	uxth	r3, r3

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;

  /* Return status */
  return lastevent;
 800271c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
}
 8002720:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002724:	4770      	bx	lr

08002726 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8002726:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800272e:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8002730:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8002732:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
  
  if(i2creg != 0)
 8002734:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8002736:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 800273a:	b113      	cbz	r3, 8002742 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	3314      	adds	r3, #20
 8002740:	e002      	b.n	8002748 <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8002742:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8002744:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8002746:	3318      	adds	r3, #24
 8002748:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800274a:	9b01      	ldr	r3, [sp, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800274e:	4219      	tst	r1, r3
}
 8002750:	bf14      	ite	ne
 8002752:	2001      	movne	r0, #1
 8002754:	2000      	moveq	r0, #0
 8002756:	b002      	add	sp, #8
 8002758:	4770      	bx	lr

0800275a <I2C_ClearFlag>:
 800275a:	43c9      	mvns	r1, r1
 800275c:	b289      	uxth	r1, r1
 800275e:	8281      	strh	r1, [r0, #20]
 8002760:	4770      	bx	lr

08002762 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8002762:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8002764:	8a80      	ldrh	r0, [r0, #20]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8002766:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8002768:	b280      	uxth	r0, r0
 800276a:	4008      	ands	r0, r1
 800276c:	d006      	beq.n	800277c <I2C_GetITStatus+0x1a>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800276e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002772:	ea13 4311 	ands.w	r3, r3, r1, lsr #16
 8002776:	bf14      	ite	ne
 8002778:	2001      	movne	r0, #1
 800277a:	2000      	moveq	r0, #0
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 800277c:	4770      	bx	lr

0800277e <I2C_ClearITPendingBit>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_Mask;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800277e:	43c9      	mvns	r1, r1
 8002780:	b289      	uxth	r1, r1
 8002782:	8281      	strh	r1, [r0, #20]
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8002788:	4b01      	ldr	r3, [pc, #4]	; (8002790 <IWDG_WriteAccessCmd+0x8>)
 800278a:	6018      	str	r0, [r3, #0]
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40003000 	.word	0x40003000

08002794 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8002794:	4b01      	ldr	r3, [pc, #4]	; (800279c <IWDG_SetPrescaler+0x8>)
 8002796:	6058      	str	r0, [r3, #4]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40003000 	.word	0x40003000

080027a0 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 80027a0:	4b01      	ldr	r3, [pc, #4]	; (80027a8 <IWDG_SetReload+0x8>)
 80027a2:	6098      	str	r0, [r3, #8]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40003000 	.word	0x40003000

080027ac <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_Reload;
 80027ac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80027b0:	4b01      	ldr	r3, [pc, #4]	; (80027b8 <IWDG_ReloadCounter+0xc>)
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40003000 	.word	0x40003000

080027bc <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_Enable;
 80027bc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80027c0:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <IWDG_Enable+0xc>)
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40003000 	.word	0x40003000

080027cc <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <IWDG_GetFlagStatus+0x10>)
 80027ce:	68db      	ldr	r3, [r3, #12]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 80027d0:	4218      	tst	r0, r3
}
 80027d2:	bf14      	ite	ne
 80027d4:	2001      	movne	r0, #1
 80027d6:	2000      	moveq	r0, #0
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40003000 	.word	0x40003000

080027e0 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 80027e0:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 80027e2:	2101      	movs	r1, #1
 80027e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80027e8:	f000 f9a4 	bl	8002b34 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
}
 80027ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 80027f0:	2100      	movs	r1, #0
 80027f2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80027f6:	f000 b99d 	b.w	8002b34 <RCC_APB1PeriphResetCmd>

080027fa <PWR_BackupAccessCmd>:
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 80027fa:	4b01      	ldr	r3, [pc, #4]	; (8002800 <PWR_BackupAccessCmd+0x6>)
 80027fc:	6018      	str	r0, [r3, #0]
 80027fe:	4770      	bx	lr
 8002800:	420e0020 	.word	0x420e0020

08002804 <PWR_PVDCmd>:
  */
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8002804:	4b01      	ldr	r3, [pc, #4]	; (800280c <PWR_PVDCmd+0x8>)
 8002806:	6018      	str	r0, [r3, #0]
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	420e0010 	.word	0x420e0010

08002810 <PWR_PVDLevelConfig>:
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  tmpreg = PWR->CR;
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <PWR_PVDLevelConfig+0x10>)
 8002812:	6813      	ldr	r3, [r2, #0]
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8002814:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8002818:	4318      	orrs	r0, r3
  /* Store the new value */
  PWR->CR = tmpreg;
 800281a:	6010      	str	r0, [r2, #0]
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40007000 	.word	0x40007000

08002824 <PWR_WakeUpPinCmd>:
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8002824:	4b01      	ldr	r3, [pc, #4]	; (800282c <PWR_WakeUpPinCmd+0x8>)
 8002826:	6018      	str	r0, [r3, #0]
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	420e00a0 	.word	0x420e00a0

08002830 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <PWR_EnterSTOPMode+0x2c>)
  PWR->CR = tmpreg;
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8002832:	2901      	cmp	r1, #1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002834:	6813      	ldr	r3, [r2, #0]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 8002836:	f023 0303 	bic.w	r3, r3, #3
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800283a:	ea40 0003 	orr.w	r0, r0, r3
  /* Store the new value */
  PWR->CR = tmpreg;
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <PWR_EnterSTOPMode+0x30>)
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
  /* Store the new value */
  PWR->CR = tmpreg;
 8002840:	6010      	str	r0, [r2, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	f042 0204 	orr.w	r2, r2, #4
 8002848:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800284a:	d101      	bne.n	8002850 <PWR_EnterSTOPMode+0x20>

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 800284c:	bf30      	wfi
 800284e:	e000      	b.n	8002852 <PWR_EnterSTOPMode+0x22>
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 8002850:	bf20      	wfe
    /* Request Wait For Event */
    __WFE();
  }
  
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	f022 0204 	bic.w	r2, r2, #4
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	4770      	bx	lr
 800285c:	40007000 	.word	0x40007000
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <PWR_EnterSTANDBYMode>:
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= PWR_CR_CWUF;
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <PWR_EnterSTANDBYMode+0x20>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	f042 0204 	orr.w	r2, r2, #4
 800286c:	601a      	str	r2, [r3, #0]
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	f042 0202 	orr.w	r2, r2, #2
 8002874:	601a      	str	r2, [r3, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <PWR_EnterSTANDBYMode+0x24>)
 8002878:	6913      	ldr	r3, [r2, #16]
 800287a:	f043 0304 	orr.w	r3, r3, #4
 800287e:	6113      	str	r3, [r2, #16]

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 8002880:	bf30      	wfi
 8002882:	4770      	bx	lr
 8002884:	40007000 	.word	0x40007000
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <PWR_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <PWR_GetFlagStatus+0x10>)
 800288e:	685b      	ldr	r3, [r3, #4]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8002890:	4203      	tst	r3, r0
}
 8002892:	bf14      	ite	ne
 8002894:	2001      	movne	r0, #1
 8002896:	2000      	moveq	r0, #0
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40007000 	.word	0x40007000

080028a0 <PWR_ClearFlag>:
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 80028a0:	4a02      	ldr	r2, [pc, #8]	; (80028ac <PWR_ClearFlag+0xc>)
 80028a2:	6813      	ldr	r3, [r2, #0]
 80028a4:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 80028a8:	6010      	str	r0, [r2, #0]
 80028aa:	4770      	bx	lr
 80028ac:	40007000 	.word	0x40007000

080028b0 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <RCC_DeInit+0x38>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <RCC_DeInit+0x3c>)
 80028be:	400a      	ands	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028cc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028d4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80028dc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80028de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	f8ff0000 	.word	0xf8ff0000

080028f0 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80028f0:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 80028f2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028fc:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002904:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8002906:	d003      	beq.n	8002910 <RCC_HSEConfig+0x20>
 8002908:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800290c:	d004      	beq.n	8002918 <RCC_HSEConfig+0x28>
 800290e:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002916:	e002      	b.n	800291e <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40021000 	.word	0x40021000

08002928 <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8002928:	4a03      	ldr	r2, [pc, #12]	; (8002938 <RCC_AdjustHSICalibrationValue+0x10>)
 800292a:	6813      	ldr	r3, [r2, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 800292c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8002930:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 8002934:	6010      	str	r0, [r2, #0]
 8002936:	4770      	bx	lr
 8002938:	40021000 	.word	0x40021000

0800293c <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800293c:	4b01      	ldr	r3, [pc, #4]	; (8002944 <RCC_HSICmd+0x8>)
 800293e:	6018      	str	r0, [r3, #0]
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	42420000 	.word	0x42420000

08002948 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8002948:	4a03      	ldr	r2, [pc, #12]	; (8002958 <RCC_PLLConfig+0x10>)
 800294a:	6853      	ldr	r3, [r2, #4]
 800294c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002950:	4319      	orrs	r1, r3
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8002952:	4308      	orrs	r0, r1
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002954:	6050      	str	r0, [r2, #4]
 8002956:	4770      	bx	lr
 8002958:	40021000 	.word	0x40021000

0800295c <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <RCC_PLLCmd+0x8>)
 800295e:	6018      	str	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	42420060 	.word	0x42420060

08002968 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <RCC_SYSCLKConfig+0x10>)
 800296a:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 800296c:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002970:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002972:	6050      	str	r0, [r2, #4]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <RCC_GetSYSCLKSource+0xc>)
 800297e:	6858      	ldr	r0, [r3, #4]
}
 8002980:	f000 000c 	and.w	r0, r0, #12
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000

0800298c <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 800298c:	4a03      	ldr	r2, [pc, #12]	; (800299c <RCC_HCLKConfig+0x10>)
 800298e:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8002990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8002994:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002996:	6050      	str	r0, [r2, #4]
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80029a0:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <RCC_PCLK1Config+0x10>)
 80029a2:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80029a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80029a8:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80029aa:	6050      	str	r0, [r2, #4]
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000

080029b4 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80029b4:	4a03      	ldr	r2, [pc, #12]	; (80029c4 <RCC_PCLK2Config+0x10>)
 80029b6:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 80029b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80029bc:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80029c0:	6050      	str	r0, [r2, #4]
 80029c2:	4770      	bx	lr
 80029c4:	40021000 	.word	0x40021000

080029c8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80029ca:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80029cc:	b109      	cbz	r1, 80029d2 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80029ce:	4310      	orrs	r0, r2
 80029d0:	e001      	b.n	80029d6 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80029d2:	ea22 0000 	bic.w	r0, r2, r0
 80029d6:	7018      	strb	r0, [r3, #0]
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40021009 	.word	0x40021009

080029e0 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80029e0:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <RCC_USBCLKConfig+0x8>)
 80029e2:	6018      	str	r0, [r3, #0]
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	424200d8 	.word	0x424200d8

080029ec <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <RCC_ADCCLKConfig+0x10>)
 80029ee:	6853      	ldr	r3, [r2, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80029f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80029f4:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80029f6:	6050      	str	r0, [r2, #4]
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000

08002a00 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <RCC_LSEConfig+0x1c>)
 8002a02:	2200      	movs	r2, #0
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8002a04:	2801      	cmp	r0, #1
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002a06:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002a08:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8002a0a:	d002      	beq.n	8002a12 <RCC_LSEConfig+0x12>
 8002a0c:	2804      	cmp	r0, #4
 8002a0e:	d002      	beq.n	8002a16 <RCC_LSEConfig+0x16>
 8002a10:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8002a12:	7018      	strb	r0, [r3, #0]
      break;
 8002a14:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8002a16:	2205      	movs	r2, #5
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	4770      	bx	lr
 8002a1c:	40021020 	.word	0x40021020

08002a20 <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8002a20:	4b01      	ldr	r3, [pc, #4]	; (8002a28 <RCC_LSICmd+0x8>)
 8002a22:	6018      	str	r0, [r3, #0]
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	42420480 	.word	0x42420480

08002a2c <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8002a2c:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <RCC_RTCCLKConfig+0xc>)
 8002a2e:	6a13      	ldr	r3, [r2, #32]
 8002a30:	4318      	orrs	r0, r3
 8002a32:	6210      	str	r0, [r2, #32]
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8002a3c:	4b01      	ldr	r3, [pc, #4]	; (8002a44 <RCC_RTCCLKCmd+0x8>)
 8002a3e:	6018      	str	r0, [r3, #0]
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	4242043c 	.word	0x4242043c

08002a48 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <RCC_GetClocksFreq+0x78>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002a4a:	b510      	push	{r4, lr}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8002a4c:	6853      	ldr	r3, [r2, #4]
  
  switch (tmp)
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d003      	beq.n	8002a5e <RCC_GetClocksFreq+0x16>
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d003      	beq.n	8002a62 <RCC_GetClocksFreq+0x1a>
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <RCC_GetClocksFreq+0x7c>)
 8002a5c:	e011      	b.n	8002a82 <RCC_GetClocksFreq+0x3a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <RCC_GetClocksFreq+0x80>)
 8002a60:	e00f      	b.n	8002a82 <RCC_GetClocksFreq+0x3a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8002a62:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8002a64:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8002a66:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 8002a6a:	03cc      	lsls	r4, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8002a6c:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 8002a70:	d401      	bmi.n	8002a76 <RCC_GetClocksFreq+0x2e>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8002a72:	4916      	ldr	r1, [pc, #88]	; (8002acc <RCC_GetClocksFreq+0x84>)
 8002a74:	e004      	b.n	8002a80 <RCC_GetClocksFreq+0x38>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8002a76:	6851      	ldr	r1, [r2, #4]
 8002a78:	0389      	lsls	r1, r1, #14
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8002a7a:	bf4c      	ite	mi
 8002a7c:	4911      	ldrmi	r1, [pc, #68]	; (8002ac4 <RCC_GetClocksFreq+0x7c>)
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8002a7e:	4912      	ldrpl	r1, [pc, #72]	; (8002ac8 <RCC_GetClocksFreq+0x80>)
 8002a80:	434b      	muls	r3, r1
 8002a82:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8002a84:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8002a86:	4912      	ldr	r1, [pc, #72]	; (8002ad0 <RCC_GetClocksFreq+0x88>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8002a88:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8002a8c:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002a8e:	6803      	ldr	r3, [r0, #0]
 8002a90:	40e3      	lsrs	r3, r4
 8002a92:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002a94:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8002a96:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8002a9a:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002a9c:	fa23 f404 	lsr.w	r4, r3, r4
 8002aa0:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002aa2:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8002aa4:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8002aa8:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002aaa:	40e3      	lsrs	r3, r4
 8002aac:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8002aae:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8002ab0:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8002ab4:	440a      	add	r2, r1
 8002ab6:	7c12      	ldrb	r2, [r2, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8002ab8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002abc:	6103      	str	r3, [r0, #16]
 8002abe:	bd10      	pop	{r4, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	007a1200 	.word	0x007a1200
 8002ac8:	00f42400 	.word	0x00f42400
 8002acc:	003d0900 	.word	0x003d0900
 8002ad0:	20000018 	.word	0x20000018

08002ad4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002ad6:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ad8:	b109      	cbz	r1, 8002ade <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002ada:	4310      	orrs	r0, r2
 8002adc:	e001      	b.n	8002ae2 <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002ade:	ea22 0000 	bic.w	r0, r2, r0
 8002ae2:	6158      	str	r0, [r3, #20]
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002aee:	699a      	ldr	r2, [r3, #24]
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002af0:	b109      	cbz	r1, 8002af6 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002af2:	4310      	orrs	r0, r2
 8002af4:	e001      	b.n	8002afa <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002af6:	ea22 0000 	bic.w	r0, r2, r0
 8002afa:	6198      	str	r0, [r3, #24]
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002b06:	69da      	ldr	r2, [r3, #28]
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002b08:	b109      	cbz	r1, 8002b0e <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002b0a:	4310      	orrs	r0, r2
 8002b0c:	e001      	b.n	8002b12 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002b0e:	ea22 0000 	bic.w	r0, r2, r0
 8002b12:	61d8      	str	r0, [r3, #28]
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002b1e:	68da      	ldr	r2, [r3, #12]
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002b20:	b109      	cbz	r1, 8002b26 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002b22:	4310      	orrs	r0, r2
 8002b24:	e001      	b.n	8002b2a <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002b26:	ea22 0000 	bic.w	r0, r2, r0
 8002b2a:	60d8      	str	r0, [r3, #12]
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002b36:	691a      	ldr	r2, [r3, #16]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002b38:	b109      	cbz	r1, 8002b3e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002b3a:	4310      	orrs	r0, r2
 8002b3c:	e001      	b.n	8002b42 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002b3e:	ea22 0000 	bic.w	r0, r2, r0
 8002b42:	6118      	str	r0, [r3, #16]
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000

08002b4c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8002b4c:	4b01      	ldr	r3, [pc, #4]	; (8002b54 <RCC_BackupResetCmd+0x8>)
 8002b4e:	6018      	str	r0, [r3, #0]
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	42420440 	.word	0x42420440

08002b58 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8002b58:	4b01      	ldr	r3, [pc, #4]	; (8002b60 <RCC_ClockSecuritySystemCmd+0x8>)
 8002b5a:	6018      	str	r0, [r3, #0]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	4242004c 	.word	0x4242004c

08002b64 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8002b64:	4b01      	ldr	r3, [pc, #4]	; (8002b6c <RCC_MCOConfig+0x8>)
 8002b66:	7018      	strb	r0, [r3, #0]
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40021007 	.word	0x40021007

08002b70 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002b70:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8002b72:	2a01      	cmp	r2, #1
 8002b74:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <RCC_GetFlagStatus+0x24>)
 8002b76:	d101      	bne.n	8002b7c <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e003      	b.n	8002b84 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002b7c:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8002b7e:	bf0c      	ite	eq
 8002b80:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002b82:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
 8002b84:	f000 001f 	and.w	r0, r0, #31
 8002b88:	fa23 f000 	lsr.w	r0, r3, r0
}
 8002b8c:	f000 0001 	and.w	r0, r0, #1
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000

08002b98 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8002b98:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8002b9e:	2031      	movs	r0, #49	; 0x31
 8002ba0:	f7ff ffe6 	bl	8002b70 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8002ba4:	9b01      	ldr	r3, [sp, #4]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8002baa:	9b01      	ldr	r3, [sp, #4]
 8002bac:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002bb0:	d001      	beq.n	8002bb6 <RCC_WaitForHSEStartUp+0x1e>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d0f3      	beq.n	8002b9e <RCC_WaitForHSEStartUp+0x6>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	2031      	movs	r0, #49	; 0x31
 8002bb8:	f7ff ffda 	bl	8002b70 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 8002bbc:	3000      	adds	r0, #0
 8002bbe:	bf18      	it	ne
 8002bc0:	2001      	movne	r0, #1
 8002bc2:	b003      	add	sp, #12
 8002bc4:	f85d fb04 	ldr.w	pc, [sp], #4

08002bc8 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8002bc8:	4a02      	ldr	r2, [pc, #8]	; (8002bd4 <RCC_ClearFlag+0xc>)
 8002bca:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd0:	6253      	str	r3, [r2, #36]	; 0x24
 8002bd2:	4770      	bx	lr
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <RCC_GetITStatus+0x10>)
 8002bda:	689b      	ldr	r3, [r3, #8]
  {
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8002bdc:	4218      	tst	r0, r3
}
 8002bde:	bf14      	ite	ne
 8002be0:	2001      	movne	r0, #1
 8002be2:	2000      	moveq	r0, #0
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000

08002bec <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <RCC_ClearITPendingBit+0x8>)
 8002bee:	7018      	strb	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	4002100a 	.word	0x4002100a

08002bf8 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002bf8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <SPI_I2S_DeInit+0x58>)
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	d10b      	bne.n	8002c18 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002c00:	2101      	movs	r1, #1
 8002c02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c06:	f7ff ff89 	bl	8002b1c <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8002c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c14:	f7ff bf82 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <SPI_I2S_DeInit+0x5c>)
 8002c1a:	4298      	cmp	r0, r3
 8002c1c:	d108      	bne.n	8002c30 <SPI_I2S_DeInit+0x38>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002c1e:	2101      	movs	r1, #1
 8002c20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c24:	f7ff ff86 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c2e:	e00a      	b.n	8002c46 <SPI_I2S_DeInit+0x4e>
  }
  else
  {
    if (SPIx == SPI3)
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <SPI_I2S_DeInit+0x60>)
 8002c32:	4298      	cmp	r0, r3
 8002c34:	d10b      	bne.n	8002c4e <SPI_I2S_DeInit+0x56>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002c36:	2101      	movs	r1, #1
 8002c38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c3c:	f7ff ff7a 	bl	8002b34 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002c40:	2100      	movs	r1, #0
 8002c42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }
  }
}
 8002c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002c4a:	f7ff bf73 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 8002c4e:	bd08      	pop	{r3, pc}
 8002c50:	40013000 	.word	0x40013000
 8002c54:	40003800 	.word	0x40003800
 8002c58:	40003c00 	.word	0x40003c00

08002c5c <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002c5c:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002c5e:	880a      	ldrh	r2, [r1, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002c60:	b510      	push	{r4, lr}

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002c62:	f403 5441 	and.w	r4, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002c66:	884b      	ldrh	r3, [r1, #2]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	888a      	ldrh	r2, [r1, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	88ca      	ldrh	r2, [r1, #6]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	890a      	ldrh	r2, [r1, #8]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	894a      	ldrh	r2, [r1, #10]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	898a      	ldrh	r2, [r1, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	89ca      	ldrh	r2, [r1, #14]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	4323      	orrs	r3, r4
 8002c84:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002c86:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8002c88:	8b83      	ldrh	r3, [r0, #28]
 8002c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002c94:	8a0b      	ldrh	r3, [r1, #16]
 8002c96:	8203      	strh	r3, [r0, #16]
 8002c98:	bd10      	pop	{r4, pc}

08002c9a <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8002c9a:	8b83      	ldrh	r3, [r0, #28]
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8002c9e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ca2:	f023 030f 	bic.w	r3, r3, #15
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8002cac:	2302      	movs	r3, #2
 8002cae:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002cb0:	688b      	ldr	r3, [r1, #8]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002cb2:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002cb4:	2b02      	cmp	r3, #2
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	4605      	mov	r5, r0
 8002cba:	460c      	mov	r4, r1
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002cbc:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002cbe:	d023      	beq.n	8002d08 <I2S_Init+0x6e>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002cc0:	888b      	ldrh	r3, [r1, #4]
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8002cc2:	a801      	add	r0, sp, #4
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002cc4:	2b00      	cmp	r3, #0
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8002cc6:	bf14      	ite	ne
 8002cc8:	2702      	movne	r7, #2
 8002cca:	2701      	moveq	r7, #1
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8002ccc:	f7ff febc 	bl	8002a48 <RCC_GetClocksFreq>
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002cd0:	88e3      	ldrh	r3, [r4, #6]
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
      
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8002cd2:	9901      	ldr	r1, [sp, #4]
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002cd8:	bf1c      	itt	ne
 8002cda:	017f      	lslne	r7, r7, #5
 8002cdc:	fbb1 f1f7 	udivne	r1, r1, r7
 8002ce0:	f04f 020a 	mov.w	r2, #10

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002ce4:	bf08      	it	eq
 8002ce6:	0a09      	lsreq	r1, r1, #8
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002ce8:	434a      	muls	r2, r1
 8002cea:	68a3      	ldr	r3, [r4, #8]
 8002cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf0:	3305      	adds	r3, #5
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;  
 8002cf2:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002cf4:	b29b      	uxth	r3, r3
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;  
 8002cf6:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002cfa:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002cfe:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002d00:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002d04:	b292      	uxth	r2, r2
 8002d06:	e000      	b.n	8002d0a <I2S_Init+0x70>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8002d08:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002d0a:	1e99      	subs	r1, r3, #2
 8002d0c:	b289      	uxth	r1, r1
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8002d0e:	29fe      	cmp	r1, #254	; 0xfe
 8002d10:	bf24      	itt	cs
 8002d12:	2200      	movcs	r2, #0
 8002d14:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 8002d16:	4313      	orrs	r3, r2
 8002d18:	88e2      	ldrh	r2, [r4, #6]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	842b      	strh	r3, [r5, #32]
 8002d20:	8823      	ldrh	r3, [r4, #0]
 8002d22:	88a2      	ldrh	r2, [r4, #4]
 8002d24:	431e      	orrs	r6, r3
 8002d26:	8863      	ldrh	r3, [r4, #2]
 8002d28:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 8002d2c:	4333      	orrs	r3, r6
 8002d2e:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8002d30:	89a2      	ldrh	r2, [r4, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
 8002d36:	83ab      	strh	r3, [r5, #28]
}
 8002d38:	b007      	add	sp, #28
 8002d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d3c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8002d40:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002d42:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8002d44:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8002d46:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8002d48:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8002d4a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8002d4c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002d4e:	2307      	movs	r3, #7
 8002d50:	8203      	strh	r3, [r0, #16]
 8002d52:	4770      	bx	lr

08002d54 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8002d54:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8002d56:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8002d58:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8002d5a:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8002d5c:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8002d5e:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8002d60:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8002d62:	8183      	strh	r3, [r0, #12]
 8002d64:	4770      	bx	lr

08002d66 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8002d66:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d68:	b119      	cbz	r1, 8002d72 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d70:	e003      	b.n	8002d7a <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8002d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	8003      	strh	r3, [r0, #0]
 8002d7c:	4770      	bx	lr

08002d7e <I2S_Cmd>:
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 8002d7e:	8b83      	ldrh	r3, [r0, #28]
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d80:	b119      	cbz	r1, 8002d8a <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d88:	e003      	b.n	8002d92 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
 8002d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	8383      	strh	r3, [r0, #28]
 8002d94:	4770      	bx	lr

08002d96 <SPI_I2S_ITConfig>:

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002d96:	2301      	movs	r3, #1
 8002d98:	0909      	lsrs	r1, r1, #4
 8002d9a:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002d9e:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002da0:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002da2:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8002da4:	b10a      	cbz	r2, 8002daa <SPI_I2S_ITConfig+0x14>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002da6:	4319      	orrs	r1, r3
 8002da8:	e001      	b.n	8002dae <SPI_I2S_ITConfig+0x18>
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8002daa:	ea23 0101 	bic.w	r1, r3, r1
 8002dae:	8081      	strh	r1, [r0, #4]
 8002db0:	4770      	bx	lr

08002db2 <SPI_I2S_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002db2:	8883      	ldrh	r3, [r0, #4]
 8002db4:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8002db6:	b10a      	cbz	r2, 8002dbc <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002db8:	4319      	orrs	r1, r3
 8002dba:	e001      	b.n	8002dc0 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002dbc:	ea23 0101 	bic.w	r1, r3, r1
 8002dc0:	8081      	strh	r1, [r0, #4]
 8002dc2:	4770      	bx	lr

08002dc4 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002dc4:	8181      	strh	r1, [r0, #12]
 8002dc6:	4770      	bx	lr

08002dc8 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002dc8:	8980      	ldrh	r0, [r0, #12]
}
 8002dca:	b280      	uxth	r0, r0
 8002dcc:	4770      	bx	lr

08002dce <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002dce:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8002dd2:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002dd4:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002dd6:	bf0b      	itete	eq
 8002dd8:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002ddc:	b29b      	uxthne	r3, r3
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002dde:	041b      	lsleq	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002de0:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002de4:	bf08      	it	eq
 8002de6:	0c1b      	lsreq	r3, r3, #16
 8002de8:	8003      	strh	r3, [r0, #0]
 8002dea:	4770      	bx	lr

08002dec <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8002dec:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002dee:	b119      	cbz	r1, 8002df8 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	e003      	b.n	8002e00 <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	041b      	lsls	r3, r3, #16
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	8083      	strh	r3, [r0, #4]
 8002e02:	4770      	bx	lr

08002e04 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8002e04:	8803      	ldrh	r3, [r0, #0]
 8002e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8002e10:	8803      	ldrh	r3, [r0, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4319      	orrs	r1, r3
 8002e16:	8001      	strh	r1, [r0, #0]
 8002e18:	4770      	bx	lr

08002e1a <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= CR1_CRCNext_Set;
 8002e1a:	8803      	ldrh	r3, [r0, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e22:	8003      	strh	r3, [r0, #0]
 8002e24:	4770      	bx	lr

08002e26 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8002e26:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002e28:	b119      	cbz	r1, 8002e32 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e30:	e003      	b.n	8002e3a <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
 8002e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	8003      	strh	r3, [r0, #0]
 8002e3c:	4770      	bx	lr

08002e3e <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8002e3e:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8002e40:	bf14      	ite	ne
 8002e42:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8002e44:	8a80      	ldrheq	r0, [r0, #20]
 8002e46:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8002e48:	4770      	bx	lr

08002e4a <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8002e4a:	8a00      	ldrh	r0, [r0, #16]
}
 8002e4c:	b280      	uxth	r0, r0
 8002e4e:	4770      	bx	lr

08002e50 <SPI_BiDirectionalLineConfig>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002e50:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002e52:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002e56:	bf15      	itete	ne
 8002e58:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002e5c:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002e5e:	041b      	lslne	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002e60:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002e64:	bf18      	it	ne
 8002e66:	0c1b      	lsrne	r3, r3, #16
 8002e68:	8003      	strh	r3, [r0, #0]
 8002e6a:	4770      	bx	lr

08002e6c <SPI_I2S_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002e6c:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002e6e:	4219      	tst	r1, r3
}
 8002e70:	bf14      	ite	ne
 8002e72:	2001      	movne	r0, #1
 8002e74:	2000      	moveq	r0, #0
 8002e76:	4770      	bx	lr

08002e78 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8002e78:	43c9      	mvns	r1, r1
 8002e7a:	b289      	uxth	r1, r1
 8002e7c:	8101      	strh	r1, [r0, #8]
 8002e7e:	4770      	bx	lr

08002e80 <SPI_I2S_GetITStatus>:
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8002e80:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002e82:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002e84:	8903      	ldrh	r3, [r0, #8]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f001 000f 	and.w	r0, r1, #15
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	fa02 f000 	lsl.w	r0, r2, r0
 8002e92:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002e94:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002e96:	d005      	beq.n	8002ea4 <SPI_I2S_GetITStatus+0x24>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8002e98:	0909      	lsrs	r1, r1, #4
 8002e9a:	408a      	lsls	r2, r1
 8002e9c:	4214      	tst	r4, r2
 8002e9e:	bf14      	ite	ne
 8002ea0:	2001      	movne	r0, #1
 8002ea2:	2000      	moveq	r0, #0
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002ea4:	bd10      	pop	{r4, pc}

08002ea6 <SPI_I2S_ClearITPendingBit>:

  /* Get the SPI IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8002ea6:	f001 010f 	and.w	r1, r1, #15
 8002eaa:	2301      	movs	r3, #1
 8002eac:	fa03 f101 	lsl.w	r1, r3, r1
 8002eb0:	43c9      	mvns	r1, r1
 8002eb2:	b289      	uxth	r1, r1
 8002eb4:	8101      	strh	r1, [r0, #8]
 8002eb6:	4770      	bx	lr

08002eb8 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002eb8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <USART_DeInit+0x88>)
 8002ebc:	4298      	cmp	r0, r3
 8002ebe:	d10b      	bne.n	8002ed8 <USART_DeInit+0x20>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ec6:	f7ff fe29 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8002eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ed4:	f7ff be22 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <USART_DeInit+0x8c>)
 8002eda:	4298      	cmp	r0, r3
 8002edc:	d108      	bne.n	8002ef0 <USART_DeInit+0x38>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002ede:	2101      	movs	r1, #1
 8002ee0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ee4:	f7ff fe26 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002eee:	e022      	b.n	8002f36 <USART_DeInit+0x7e>
  }
  else if (USARTx == USART3)
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <USART_DeInit+0x90>)
 8002ef2:	4298      	cmp	r0, r3
 8002ef4:	d108      	bne.n	8002f08 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002efc:	f7ff fe1a 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002f00:	2100      	movs	r1, #0
 8002f02:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002f06:	e016      	b.n	8002f36 <USART_DeInit+0x7e>
  }    
  else if (USARTx == UART4)
 8002f08:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <USART_DeInit+0x94>)
 8002f0a:	4298      	cmp	r0, r3
 8002f0c:	d108      	bne.n	8002f20 <USART_DeInit+0x68>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002f0e:	2101      	movs	r1, #1
 8002f10:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f14:	f7ff fe0e 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f1e:	e00a      	b.n	8002f36 <USART_DeInit+0x7e>
  }    
  else
  {
    if (USARTx == UART5)
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <USART_DeInit+0x98>)
 8002f22:	4298      	cmp	r0, r3
 8002f24:	d10b      	bne.n	8002f3e <USART_DeInit+0x86>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002f26:	2101      	movs	r1, #1
 8002f28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f2c:	f7ff fe02 	bl	8002b34 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002f30:	2100      	movs	r1, #0
 8002f32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    }
  }
}
 8002f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART5)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002f3a:	f7ff bdfb 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
 8002f3e:	bd08      	pop	{r3, pc}
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40004400 	.word	0x40004400
 8002f48:	40004800 	.word	0x40004800
 8002f4c:	40004c00 	.word	0x40004c00
 8002f50:	40005000 	.word	0x40005000

08002f54 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	460e      	mov	r6, r1
 8002f58:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002f5a:	8a03      	ldrh	r3, [r0, #16]
 8002f5c:	88ca      	ldrh	r2, [r1, #6]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f64:	4313      	orrs	r3, r2
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002f66:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002f68:	8982      	ldrh	r2, [r0, #12]
 8002f6a:	8889      	ldrh	r1, [r1, #4]
 8002f6c:	8933      	ldrh	r3, [r6, #8]
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	430b      	orrs	r3, r1
 8002f72:	8971      	ldrh	r1, [r6, #10]
 8002f74:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	f022 020c 	bic.w	r2, r2, #12
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	b29b      	uxth	r3, r3
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002f82:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002f84:	8a83      	ldrh	r3, [r0, #20]
 8002f86:	89b2      	ldrh	r2, [r6, #12]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002f8e:	b086      	sub	sp, #24
 8002f90:	4313      	orrs	r3, r2
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002f92:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002f94:	a801      	add	r0, sp, #4
 8002f96:	f7ff fd57 	bl	8002a48 <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002f9a:	4a17      	ldr	r2, [pc, #92]	; (8002ff8 <USART_Init+0xa4>)
 8002f9c:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002f9e:	9d04      	ldr	r5, [sp, #16]
 8002fa0:	6831      	ldr	r1, [r6, #0]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002fa2:	4294      	cmp	r4, r2
 8002fa4:	bf18      	it	ne
 8002fa6:	461d      	movne	r5, r3
 8002fa8:	2219      	movs	r2, #25
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002faa:	436a      	muls	r2, r5
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002fac:	89a3      	ldrh	r3, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002fae:	2664      	movs	r6, #100	; 0x64
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002fb0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002fb4:	bf14      	ite	ne
 8002fb6:	004d      	lslne	r5, r1, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002fb8:	008d      	lsleq	r5, r1, #2
 8002fba:	fbb2 f5f5 	udiv	r5, r2, r5
  }
  tmpreg = (integerdivider / 100) << 4;
 8002fbe:	fbb5 f0f6 	udiv	r0, r5, r6

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002fc2:	89a2      	ldrh	r2, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002fc4:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002fc6:	0901      	lsrs	r1, r0, #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002fc8:	0412      	lsls	r2, r2, #16
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002fca:	fb06 5311 	mls	r3, r6, r1, r5

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002fce:	d507      	bpl.n	8002fe0 <USART_Init+0x8c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002fd0:	00d9      	lsls	r1, r3, #3
 8002fd2:	3132      	adds	r1, #50	; 0x32
 8002fd4:	fbb1 f2f6 	udiv	r2, r1, r6
 8002fd8:	f002 0207 	and.w	r2, r2, #7
 8002fdc:	4310      	orrs	r0, r2
 8002fde:	e006      	b.n	8002fee <USART_Init+0x9a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002fe0:	011a      	lsls	r2, r3, #4
 8002fe2:	3232      	adds	r2, #50	; 0x32
 8002fe4:	fbb2 f3f6 	udiv	r3, r2, r6
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	4318      	orrs	r0, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8002fee:	b280      	uxth	r0, r0
 8002ff0:	8120      	strh	r0, [r4, #8]
}
 8002ff2:	b006      	add	sp, #24
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40013800 	.word	0x40013800

08002ffc <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002ffc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003000:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003002:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8003004:	2300      	movs	r3, #0
 8003006:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8003008:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800300a:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800300c:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800300e:	8183      	strh	r3, [r0, #12]
 8003010:	4770      	bx	lr

08003012 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8003012:	884b      	ldrh	r3, [r1, #2]
 8003014:	b510      	push	{r4, lr}
 8003016:	880c      	ldrh	r4, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8003018:	8a02      	ldrh	r2, [r0, #16]
 800301a:	4323      	orrs	r3, r4
 800301c:	888c      	ldrh	r4, [r1, #4]
 800301e:	88c9      	ldrh	r1, [r1, #6]
 8003020:	b292      	uxth	r2, r2
 8003022:	4323      	orrs	r3, r4
 8003024:	430b      	orrs	r3, r1
 8003026:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800302a:	4313      	orrs	r3, r2
 800302c:	b29b      	uxth	r3, r3
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800302e:	8203      	strh	r3, [r0, #16]
 8003030:	bd10      	pop	{r4, pc}

08003032 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8003032:	2300      	movs	r3, #0
 8003034:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8003036:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8003038:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800303a:	80c3      	strh	r3, [r0, #6]
 800303c:	4770      	bx	lr

0800303e <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 800303e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003040:	b119      	cbz	r1, 800304a <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8003042:	b29b      	uxth	r3, r3
 8003044:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003048:	e003      	b.n	8003052 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 800304a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	8183      	strh	r3, [r0, #12]
 8003054:	4770      	bx	lr

08003056 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8003056:	2301      	movs	r3, #1
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8003058:	b510      	push	{r4, lr}
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800305a:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800305e:	429c      	cmp	r4, r3
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8003060:	f001 011f 	and.w	r1, r1, #31
 8003064:	fa03 f101 	lsl.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8003068:	d101      	bne.n	800306e <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 800306a:	300c      	adds	r0, #12
 800306c:	e003      	b.n	8003076 <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800306e:	2c02      	cmp	r4, #2
  {
    usartxbase += 0x10;
 8003070:	bf0c      	ite	eq
 8003072:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003074:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8003076:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8003078:	b10a      	cbz	r2, 800307e <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800307a:	4319      	orrs	r1, r3
 800307c:	e001      	b.n	8003082 <USART_ITConfig+0x2c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800307e:	ea23 0101 	bic.w	r1, r3, r1
 8003082:	6001      	str	r1, [r0, #0]
 8003084:	bd10      	pop	{r4, pc}

08003086 <USART_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8003086:	8a83      	ldrh	r3, [r0, #20]
 8003088:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 800308a:	b10a      	cbz	r2, 8003090 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800308c:	4319      	orrs	r1, r3
 800308e:	e001      	b.n	8003094 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8003090:	ea23 0101 	bic.w	r1, r3, r1
 8003094:	8281      	strh	r1, [r0, #20]
 8003096:	4770      	bx	lr

08003098 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8003098:	8a03      	ldrh	r3, [r0, #16]
 800309a:	f023 030f 	bic.w	r3, r3, #15
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	0c1b      	lsrs	r3, r3, #16
 80030a2:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80030a4:	8a03      	ldrh	r3, [r0, #16]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4319      	orrs	r1, r3
 80030aa:	8201      	strh	r1, [r0, #16]
 80030ac:	4770      	bx	lr

080030ae <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 80030ae:	8983      	ldrh	r3, [r0, #12]
 80030b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80030ba:	8983      	ldrh	r3, [r0, #12]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4319      	orrs	r1, r3
 80030c0:	8181      	strh	r1, [r0, #12]
 80030c2:	4770      	bx	lr

080030c4 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 80030c4:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80030c6:	b119      	cbz	r1, 80030d0 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	e003      	b.n	80030d8 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 80030d0:	f023 0302 	bic.w	r3, r3, #2
 80030d4:	041b      	lsls	r3, r3, #16
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	8183      	strh	r3, [r0, #12]
 80030da:	4770      	bx	lr

080030dc <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 80030dc:	8a03      	ldrh	r3, [r0, #16]
 80030de:	f023 0320 	bic.w	r3, r3, #32
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80030e8:	8a03      	ldrh	r3, [r0, #16]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	4319      	orrs	r1, r3
 80030ee:	8201      	strh	r1, [r0, #16]
 80030f0:	4770      	bx	lr

080030f2 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 80030f2:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80030f4:	b119      	cbz	r1, 80030fe <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	e003      	b.n	8003106 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 80030fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	8203      	strh	r3, [r0, #16]
 8003108:	4770      	bx	lr

0800310a <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800310a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800310e:	8081      	strh	r1, [r0, #4]
 8003110:	4770      	bx	lr

08003112 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8003112:	8880      	ldrh	r0, [r0, #4]
}
 8003114:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003118:	4770      	bx	lr

0800311a <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 800311a:	8983      	ldrh	r3, [r0, #12]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f043 0301 	orr.w	r3, r3, #1
 8003122:	8183      	strh	r3, [r0, #12]
 8003124:	4770      	bx	lr

08003126 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8003126:	8b03      	ldrh	r3, [r0, #24]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800312c:	8b03      	ldrh	r3, [r0, #24]
 800312e:	b29b      	uxth	r3, r3
 8003130:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003134:	8301      	strh	r1, [r0, #24]
 8003136:	4770      	bx	lr

08003138 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8003138:	8b03      	ldrh	r3, [r0, #24]
 800313a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800313e:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8003140:	8b03      	ldrh	r3, [r0, #24]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4319      	orrs	r1, r3
 8003146:	8301      	strh	r1, [r0, #24]
 8003148:	4770      	bx	lr

0800314a <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800314a:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800314c:	b119      	cbz	r1, 8003156 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800314e:	b29b      	uxth	r3, r3
 8003150:	f043 0320 	orr.w	r3, r3, #32
 8003154:	e003      	b.n	800315e <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 8003156:	f023 0320 	bic.w	r3, r3, #32
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	8283      	strh	r3, [r0, #20]
 8003160:	4770      	bx	lr

08003162 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8003162:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003164:	b119      	cbz	r1, 800316e <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 8003166:	b29b      	uxth	r3, r3
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	e003      	b.n	8003176 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 800316e:	f023 0310 	bic.w	r3, r3, #16
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	8283      	strh	r3, [r0, #20]
 8003178:	4770      	bx	lr

0800317a <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 800317a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800317c:	b119      	cbz	r1, 8003186 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 800317e:	b29b      	uxth	r3, r3
 8003180:	f043 0308 	orr.w	r3, r3, #8
 8003184:	e003      	b.n	800318e <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8003186:	f023 0308 	bic.w	r3, r3, #8
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	8283      	strh	r3, [r0, #20]
 8003190:	4770      	bx	lr

08003192 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 8003192:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003194:	b129      	cbz	r1, 80031a2 <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 8003196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800319e:	b29b      	uxth	r3, r3
 80031a0:	e001      	b.n	80031a6 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 80031a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80031a6:	8183      	strh	r3, [r0, #12]
 80031a8:	4770      	bx	lr

080031aa <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80031aa:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80031ac:	b119      	cbz	r1, 80031b6 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031b4:	e003      	b.n	80031be <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 80031b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ba:	041b      	lsls	r3, r3, #16
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	8283      	strh	r3, [r0, #20]
 80031c0:	4770      	bx	lr

080031c2 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 80031c2:	8a83      	ldrh	r3, [r0, #20]
 80031c4:	f023 0304 	bic.w	r3, r3, #4
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	0c1b      	lsrs	r3, r3, #16
 80031cc:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80031ce:	8a83      	ldrh	r3, [r0, #20]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	4319      	orrs	r1, r3
 80031d4:	8281      	strh	r1, [r0, #20]
 80031d6:	4770      	bx	lr

080031d8 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 80031d8:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80031da:	b119      	cbz	r1, 80031e4 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	e003      	b.n	80031ec <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 80031e4:	f023 0302 	bic.w	r3, r3, #2
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	8283      	strh	r3, [r0, #20]
 80031ee:	4770      	bx	lr

080031f0 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80031f0:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 80031f2:	4219      	tst	r1, r3
}
 80031f4:	bf14      	ite	ne
 80031f6:	2001      	movne	r0, #1
 80031f8:	2000      	moveq	r0, #0
 80031fa:	4770      	bx	lr

080031fc <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 80031fc:	43c9      	mvns	r1, r1
 80031fe:	b289      	uxth	r1, r1
 8003200:	8001      	strh	r1, [r0, #0]
 8003202:	4770      	bx	lr

08003204 <USART_GetITStatus>:
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8003204:	2301      	movs	r3, #1
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003206:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003208:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800320c:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003210:	429c      	cmp	r4, r3
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8003212:	fa03 f202 	lsl.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003216:	d101      	bne.n	800321c <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8003218:	8983      	ldrh	r3, [r0, #12]
 800321a:	e003      	b.n	8003224 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800321c:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 800321e:	bf0c      	ite	eq
 8003220:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003222:	8a83      	ldrhne	r3, [r0, #20]
 8003224:	b29b      	uxth	r3, r3
 8003226:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8003228:	8802      	ldrh	r2, [r0, #0]
 800322a:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800322c:	b143      	cbz	r3, 8003240 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 800322e:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8003230:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8003232:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8003236:	420a      	tst	r2, r1
 8003238:	bf14      	ite	ne
 800323a:	4618      	movne	r0, r3
 800323c:	2000      	moveq	r0, #0
 800323e:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8003240:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8003242:	bd10      	pop	{r4, pc}

08003244 <USART_ClearITPendingBit>:
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
  USARTx->SR = (uint16_t)~itmask;
 8003244:	0a09      	lsrs	r1, r1, #8
 8003246:	2301      	movs	r3, #1
 8003248:	fa03 f101 	lsl.w	r1, r3, r1
 800324c:	43c9      	mvns	r1, r1
 800324e:	b289      	uxth	r1, r1
 8003250:	8001      	strh	r1, [r0, #0]
 8003252:	4770      	bx	lr

08003254 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003254:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8003256:	8c05      	ldrh	r5, [r0, #32]
 8003258:	f025 0501 	bic.w	r5, r5, #1
 800325c:	042d      	lsls	r5, r5, #16
 800325e:	0c2d      	lsrs	r5, r5, #16
 8003260:	8405      	strh	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003262:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8003264:	8c04      	ldrh	r4, [r0, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
 8003266:	b2ad      	uxth	r5, r5
 8003268:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 800326c:	432a      	orrs	r2, r5
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800326e:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8003272:	b29a      	uxth	r2, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <TI1_Config+0x64>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8003276:	b2a4      	uxth	r4, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003278:	4298      	cmp	r0, r3
 800327a:	d012      	beq.n	80032a2 <TI1_Config+0x4e>
 800327c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003280:	4298      	cmp	r0, r3
 8003282:	d00e      	beq.n	80032a2 <TI1_Config+0x4e>
 8003284:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003288:	d00b      	beq.n	80032a2 <TI1_Config+0x4e>
 800328a:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800328e:	4298      	cmp	r0, r3
 8003290:	d007      	beq.n	80032a2 <TI1_Config+0x4e>
 8003292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003296:	4298      	cmp	r0, r3
 8003298:	d003      	beq.n	80032a2 <TI1_Config+0x4e>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800329a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800329e:	4298      	cmp	r0, r3
 80032a0:	d102      	bne.n	80032a8 <TI1_Config+0x54>
 80032a2:	f024 0402 	bic.w	r4, r4, #2
 80032a6:	e001      	b.n	80032ac <TI1_Config+0x58>
 80032a8:	f024 040a 	bic.w	r4, r4, #10
 80032ac:	f044 0401 	orr.w	r4, r4, #1
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80032b0:	4321      	orrs	r1, r4
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032b2:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80032b4:	8401      	strh	r1, [r0, #32]
 80032b6:	bd30      	pop	{r4, r5, pc}
 80032b8:	40012c00 	.word	0x40012c00

080032bc <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80032bc:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80032be:	8c04      	ldrh	r4, [r0, #32]
 80032c0:	f024 0410 	bic.w	r4, r4, #16
 80032c4:	0424      	lsls	r4, r4, #16
 80032c6:	0c24      	lsrs	r4, r4, #16
 80032c8:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ca:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80032cc:	8c04      	ldrh	r4, [r0, #32]
 80032ce:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 80032d2:	052d      	lsls	r5, r5, #20
 80032d4:	0d2d      	lsrs	r5, r5, #20
 80032d6:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80032da:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80032de:	4a14      	ldr	r2, [pc, #80]	; (8003330 <TI2_Config+0x74>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80032e0:	b2a4      	uxth	r4, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80032e2:	4290      	cmp	r0, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80032e4:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80032e6:	d012      	beq.n	800330e <TI2_Config+0x52>
 80032e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ec:	4290      	cmp	r0, r2
 80032ee:	d00e      	beq.n	800330e <TI2_Config+0x52>
 80032f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032f4:	d00b      	beq.n	800330e <TI2_Config+0x52>
 80032f6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80032fa:	4290      	cmp	r0, r2
 80032fc:	d007      	beq.n	800330e <TI2_Config+0x52>
 80032fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003302:	4290      	cmp	r0, r2
 8003304:	d003      	beq.n	800330e <TI2_Config+0x52>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800330a:	4290      	cmp	r0, r2
 800330c:	d107      	bne.n	800331e <TI2_Config+0x62>
 800330e:	f024 0420 	bic.w	r4, r4, #32
 8003312:	f044 0410 	orr.w	r4, r4, #16
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003316:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
 800331a:	b289      	uxth	r1, r1
 800331c:	e004      	b.n	8003328 <TI2_Config+0x6c>
 800331e:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
 8003322:	f044 0410 	orr.w	r4, r4, #16
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8003326:	4321      	orrs	r1, r4
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003328:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800332a:	8401      	strh	r1, [r0, #32]
 800332c:	bd30      	pop	{r4, r5, pc}
 800332e:	bf00      	nop
 8003330:	40012c00 	.word	0x40012c00

08003334 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8003334:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8003336:	4b61      	ldr	r3, [pc, #388]	; (80034bc <TIM_DeInit+0x188>)
 8003338:	4298      	cmp	r0, r3
 800333a:	d108      	bne.n	800334e <TIM_DeInit+0x1a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800333c:	2101      	movs	r1, #1
 800333e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003342:	f7ff fbeb 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8003346:	2100      	movs	r1, #0
 8003348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800334c:	e0b1      	b.n	80034b2 <TIM_DeInit+0x17e>
  }     
  else if (TIMx == TIM2)
 800334e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003352:	d106      	bne.n	8003362 <TIM_DeInit+0x2e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003354:	2101      	movs	r1, #1
 8003356:	4608      	mov	r0, r1
 8003358:	f7ff fbec 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800335c:	2100      	movs	r1, #0
 800335e:	2001      	movs	r0, #1
 8003360:	e008      	b.n	8003374 <TIM_DeInit+0x40>
  }
  else if (TIMx == TIM3)
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <TIM_DeInit+0x18c>)
 8003364:	4298      	cmp	r0, r3
 8003366:	d109      	bne.n	800337c <TIM_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8003368:	2101      	movs	r1, #1
 800336a:	2002      	movs	r0, #2
 800336c:	f7ff fbe2 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8003370:	2100      	movs	r1, #0
 8003372:	2002      	movs	r0, #2
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
 8003374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8003378:	f7ff bbdc 	b.w	8002b34 <RCC_APB1PeriphResetCmd>
  }
  else if (TIMx == TIM4)
 800337c:	4b51      	ldr	r3, [pc, #324]	; (80034c4 <TIM_DeInit+0x190>)
 800337e:	4298      	cmp	r0, r3
 8003380:	d106      	bne.n	8003390 <TIM_DeInit+0x5c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8003382:	2101      	movs	r1, #1
 8003384:	2004      	movs	r0, #4
 8003386:	f7ff fbd5 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800338a:	2100      	movs	r1, #0
 800338c:	2004      	movs	r0, #4
 800338e:	e7f1      	b.n	8003374 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM5)
 8003390:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <TIM_DeInit+0x194>)
 8003392:	4298      	cmp	r0, r3
 8003394:	d106      	bne.n	80033a4 <TIM_DeInit+0x70>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8003396:	2101      	movs	r1, #1
 8003398:	2008      	movs	r0, #8
 800339a:	f7ff fbcb 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800339e:	2100      	movs	r1, #0
 80033a0:	2008      	movs	r0, #8
 80033a2:	e7e7      	b.n	8003374 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM6)
 80033a4:	4b49      	ldr	r3, [pc, #292]	; (80034cc <TIM_DeInit+0x198>)
 80033a6:	4298      	cmp	r0, r3
 80033a8:	d106      	bne.n	80033b8 <TIM_DeInit+0x84>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80033aa:	2101      	movs	r1, #1
 80033ac:	2010      	movs	r0, #16
 80033ae:	f7ff fbc1 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80033b2:	2100      	movs	r1, #0
 80033b4:	2010      	movs	r0, #16
 80033b6:	e7dd      	b.n	8003374 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM7)
 80033b8:	4b45      	ldr	r3, [pc, #276]	; (80034d0 <TIM_DeInit+0x19c>)
 80033ba:	4298      	cmp	r0, r3
 80033bc:	d106      	bne.n	80033cc <TIM_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80033be:	2101      	movs	r1, #1
 80033c0:	2020      	movs	r0, #32
 80033c2:	f7ff fbb7 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80033c6:	2100      	movs	r1, #0
 80033c8:	2020      	movs	r0, #32
 80033ca:	e7d3      	b.n	8003374 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM8)
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <TIM_DeInit+0x1a0>)
 80033ce:	4298      	cmp	r0, r3
 80033d0:	d108      	bne.n	80033e4 <TIM_DeInit+0xb0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80033d2:	2101      	movs	r1, #1
 80033d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033d8:	f7ff fba0 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 80033dc:	2100      	movs	r1, #0
 80033de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033e2:	e066      	b.n	80034b2 <TIM_DeInit+0x17e>
  }
  else if (TIMx == TIM9)
 80033e4:	4b3c      	ldr	r3, [pc, #240]	; (80034d8 <TIM_DeInit+0x1a4>)
 80033e6:	4298      	cmp	r0, r3
 80033e8:	d108      	bne.n	80033fc <TIM_DeInit+0xc8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80033ea:	2101      	movs	r1, #1
 80033ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033f0:	f7ff fb94 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80033f4:	2100      	movs	r1, #0
 80033f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033fa:	e05a      	b.n	80034b2 <TIM_DeInit+0x17e>
   }  
  else if (TIMx == TIM10)
 80033fc:	4b37      	ldr	r3, [pc, #220]	; (80034dc <TIM_DeInit+0x1a8>)
 80033fe:	4298      	cmp	r0, r3
 8003400:	d108      	bne.n	8003414 <TIM_DeInit+0xe0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8003402:	2101      	movs	r1, #1
 8003404:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003408:	f7ff fb88 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800340c:	2100      	movs	r1, #0
 800340e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003412:	e04e      	b.n	80034b2 <TIM_DeInit+0x17e>
  }  
  else if (TIMx == TIM11) 
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <TIM_DeInit+0x1ac>)
 8003416:	4298      	cmp	r0, r3
 8003418:	d108      	bne.n	800342c <TIM_DeInit+0xf8>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800341a:	2101      	movs	r1, #1
 800341c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003420:	f7ff fb7c 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8003424:	2100      	movs	r1, #0
 8003426:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800342a:	e042      	b.n	80034b2 <TIM_DeInit+0x17e>
  }  
  else if (TIMx == TIM12)
 800342c:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <TIM_DeInit+0x1b0>)
 800342e:	4298      	cmp	r0, r3
 8003430:	d106      	bne.n	8003440 <TIM_DeInit+0x10c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8003432:	2101      	movs	r1, #1
 8003434:	2040      	movs	r0, #64	; 0x40
 8003436:	f7ff fb7d 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800343a:	2100      	movs	r1, #0
 800343c:	2040      	movs	r0, #64	; 0x40
 800343e:	e799      	b.n	8003374 <TIM_DeInit+0x40>
  }  
  else if (TIMx == TIM13) 
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <TIM_DeInit+0x1b4>)
 8003442:	4298      	cmp	r0, r3
 8003444:	d106      	bne.n	8003454 <TIM_DeInit+0x120>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8003446:	2101      	movs	r1, #1
 8003448:	2080      	movs	r0, #128	; 0x80
 800344a:	f7ff fb73 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800344e:	2100      	movs	r1, #0
 8003450:	2080      	movs	r0, #128	; 0x80
 8003452:	e78f      	b.n	8003374 <TIM_DeInit+0x40>
  }
  else if (TIMx == TIM14) 
 8003454:	4b25      	ldr	r3, [pc, #148]	; (80034ec <TIM_DeInit+0x1b8>)
 8003456:	4298      	cmp	r0, r3
 8003458:	d108      	bne.n	800346c <TIM_DeInit+0x138>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800345a:	2101      	movs	r1, #1
 800345c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003460:	f7ff fb68 	bl	8002b34 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8003464:	2100      	movs	r1, #0
 8003466:	f44f 7080 	mov.w	r0, #256	; 0x100
 800346a:	e783      	b.n	8003374 <TIM_DeInit+0x40>
  }        
  else if (TIMx == TIM15)
 800346c:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <TIM_DeInit+0x1bc>)
 800346e:	4298      	cmp	r0, r3
 8003470:	d108      	bne.n	8003484 <TIM_DeInit+0x150>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 8003472:	2101      	movs	r1, #1
 8003474:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003478:	f7ff fb50 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 800347c:	2100      	movs	r1, #0
 800347e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003482:	e016      	b.n	80034b2 <TIM_DeInit+0x17e>
  } 
  else if (TIMx == TIM16)
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <TIM_DeInit+0x1c0>)
 8003486:	4298      	cmp	r0, r3
 8003488:	d108      	bne.n	800349c <TIM_DeInit+0x168>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 800348a:	2101      	movs	r1, #1
 800348c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003490:	f7ff fb44 	bl	8002b1c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8003494:	2100      	movs	r1, #0
 8003496:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800349a:	e00a      	b.n	80034b2 <TIM_DeInit+0x17e>
  } 
  else
  {
    if (TIMx == TIM17)
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <TIM_DeInit+0x1c4>)
 800349e:	4298      	cmp	r0, r3
 80034a0:	d10b      	bne.n	80034ba <TIM_DeInit+0x186>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 80034a2:	2101      	movs	r1, #1
 80034a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80034a8:	f7ff fb38 	bl	8002b1c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 80034ac:	2100      	movs	r1, #0
 80034ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    }  
  }
}
 80034b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM17)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 80034b6:	f7ff bb31 	b.w	8002b1c <RCC_APB2PeriphResetCmd>
 80034ba:	bd08      	pop	{r3, pc}
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40001000 	.word	0x40001000
 80034d0:	40001400 	.word	0x40001400
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40014c00 	.word	0x40014c00
 80034dc:	40015000 	.word	0x40015000
 80034e0:	40015400 	.word	0x40015400
 80034e4:	40001800 	.word	0x40001800
 80034e8:	40001c00 	.word	0x40001c00
 80034ec:	40002000 	.word	0x40002000
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40014400 	.word	0x40014400
 80034f8:	40014800 	.word	0x40014800

080034fc <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80034fe:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8003500:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003502:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8003504:	d012      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 8003506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800350a:	4290      	cmp	r0, r2
 800350c:	d00e      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 800350e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003512:	d00b      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 8003514:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003518:	4290      	cmp	r0, r2
 800351a:	d007      	beq.n	800352c <TIM_TimeBaseInit+0x30>
 800351c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003520:	4290      	cmp	r0, r2
 8003522:	d003      	beq.n	800352c <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8003524:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003528:	4290      	cmp	r0, r2
 800352a:	d103      	bne.n	8003534 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800352c:	884a      	ldrh	r2, [r1, #2]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003532:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8003534:	4a15      	ldr	r2, [pc, #84]	; (800358c <TIM_TimeBaseInit+0x90>)
 8003536:	4290      	cmp	r0, r2
 8003538:	d008      	beq.n	800354c <TIM_TimeBaseInit+0x50>
 800353a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800353e:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8003540:	bf1f      	itttt	ne
 8003542:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003546:	88ca      	ldrhne	r2, [r1, #6]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8003548:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800354a:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800354c:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800354e:	888b      	ldrh	r3, [r1, #4]
 8003550:	8583      	strh	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8003552:	880b      	ldrh	r3, [r1, #0]
 8003554:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <TIM_TimeBaseInit+0x8c>)
 8003558:	4298      	cmp	r0, r3
 800355a:	d00f      	beq.n	800357c <TIM_TimeBaseInit+0x80>
 800355c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003560:	4298      	cmp	r0, r3
 8003562:	d00b      	beq.n	800357c <TIM_TimeBaseInit+0x80>
 8003564:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003568:	4298      	cmp	r0, r3
 800356a:	d007      	beq.n	800357c <TIM_TimeBaseInit+0x80>
 800356c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003570:	4298      	cmp	r0, r3
 8003572:	d003      	beq.n	800357c <TIM_TimeBaseInit+0x80>
 8003574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003578:	4298      	cmp	r0, r3
 800357a:	d101      	bne.n	8003580 <TIM_TimeBaseInit+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800357c:	7a0b      	ldrb	r3, [r1, #8]
 800357e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8003580:	2301      	movs	r3, #1
 8003582:	8283      	strh	r3, [r0, #20]
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40001000 	.word	0x40001000

08003590 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8003590:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003592:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8003594:	f023 0301 	bic.w	r3, r3, #1
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	0c1b      	lsrs	r3, r3, #16
 800359c:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	8886      	ldrh	r6, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a2:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80035a4:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80035a6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80035aa:	041b      	lsls	r3, r3, #16
 80035ac:	0c1b      	lsrs	r3, r3, #16

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80035ae:	431d      	orrs	r5, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80035b0:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80035b4:	890c      	ldrh	r4, [r1, #8]
 80035b6:	884b      	ldrh	r3, [r1, #2]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 80035b8:	0412      	lsls	r2, r2, #16
 80035ba:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80035bc:	4323      	orrs	r3, r4
 80035be:	4313      	orrs	r3, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <TIM_OC1Init+0x84>)
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c2:	b2b6      	uxth	r6, r6
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80035c4:	4290      	cmp	r0, r2
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80035c6:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 80035c8:	d00f      	beq.n	80035ea <TIM_OC1Init+0x5a>
 80035ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ce:	4290      	cmp	r0, r2
 80035d0:	d00b      	beq.n	80035ea <TIM_OC1Init+0x5a>
 80035d2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80035d6:	4290      	cmp	r0, r2
 80035d8:	d007      	beq.n	80035ea <TIM_OC1Init+0x5a>
 80035da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035de:	4290      	cmp	r0, r2
 80035e0:	d003      	beq.n	80035ea <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 80035e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035e6:	4290      	cmp	r0, r2
 80035e8:	d10e      	bne.n	8003608 <TIM_OC1Init+0x78>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80035ea:	894c      	ldrh	r4, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 80035ec:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80035f0:	431c      	orrs	r4, r3
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80035f2:	888b      	ldrh	r3, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 80035f4:	f024 0404 	bic.w	r4, r4, #4
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 80035f8:	f426 7240 	bic.w	r2, r6, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80035fc:	4323      	orrs	r3, r4
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80035fe:	898e      	ldrh	r6, [r1, #12]
 8003600:	89cc      	ldrh	r4, [r1, #14]
 8003602:	4334      	orrs	r4, r6
 8003604:	4322      	orrs	r2, r4
 8003606:	b296      	uxth	r6, r2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8003608:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360a:	8086      	strh	r6, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800360c:	8305      	strh	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800360e:	8682      	strh	r2, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003610:	8403      	strh	r3, [r0, #32]
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	40012c00 	.word	0x40012c00

08003618 <TIM_OC2Init>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8003618:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800361a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800361c:	f023 0310 	bic.w	r3, r3, #16
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003626:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362a:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800362c:	880c      	ldrh	r4, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 800362e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8003632:	0412      	lsls	r2, r2, #16
 8003634:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003636:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800363a:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800363e:	b294      	uxth	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8003640:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8003642:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8003644:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8003646:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800364a:	884a      	ldrh	r2, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	b2ad      	uxth	r5, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800364e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <TIM_OC2Init+0x84>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8003654:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003656:	4290      	cmp	r0, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC2Init+0x4a>
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	4290      	cmp	r0, r2
 8003660:	d115      	bne.n	800368e <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8003662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8003666:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8003668:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800366a:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 800366e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003672:	4013      	ands	r3, r2
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8003674:	888a      	ldrh	r2, [r1, #4]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8003676:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800367a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800367e:	898a      	ldrh	r2, [r1, #12]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8003680:	b29b      	uxth	r3, r3
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8003682:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8003686:	89ca      	ldrh	r2, [r1, #14]
 8003688:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 800368c:	b2ad      	uxth	r5, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800368e:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003690:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003692:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8003694:	8702      	strh	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003696:	8403      	strh	r3, [r0, #32]
 8003698:	bd30      	pop	{r4, r5, pc}
 800369a:	bf00      	nop
 800369c:	40012c00 	.word	0x40012c00

080036a0 <TIM_OC3Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80036a0:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80036a2:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80036a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	0c1b      	lsrs	r3, r3, #16
 80036ac:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036b2:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80036b4:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80036b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80036ba:	0412      	lsls	r2, r2, #16
 80036bc:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80036be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80036c2:	4315      	orrs	r5, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80036c4:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80036c6:	890a      	ldrh	r2, [r1, #8]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80036c8:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80036ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80036ce:	884a      	ldrh	r2, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80036d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <TIM_OC3Init+0x80>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80036d8:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036da:	4290      	cmp	r0, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_OC3Init+0x46>
 80036de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e2:	4290      	cmp	r0, r2
 80036e4:	d115      	bne.n	8003712 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 80036e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80036ea:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 80036ec:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80036ee:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 80036f2:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80036f6:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80036f8:	888a      	ldrh	r2, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 80036fa:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80036fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003702:	898a      	ldrh	r2, [r1, #12]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003704:	b29b      	uxth	r3, r3
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003706:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800370a:	89ca      	ldrh	r2, [r1, #14]
 800370c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003710:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8003712:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003714:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003716:	8385      	strh	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8003718:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371a:	8403      	strh	r3, [r0, #32]
 800371c:	bd30      	pop	{r4, r5, pc}
 800371e:	bf00      	nop
 8003720:	40012c00 	.word	0x40012c00

08003724 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8003724:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003726:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8003728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	0c1b      	lsrs	r3, r3, #16
 8003730:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003736:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003738:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 800373a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800373e:	0412      	lsls	r2, r2, #16
 8003740:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8003742:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003746:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800374a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800374c:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800374e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8003750:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8003754:	884d      	ldrh	r5, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003756:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8003758:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800375c:	4d0a      	ldr	r5, [pc, #40]	; (8003788 <TIM_OC4Init+0x64>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800375e:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003760:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8003762:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003764:	d003      	beq.n	800376e <TIM_OC4Init+0x4a>
 8003766:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800376a:	42a8      	cmp	r0, r5
 800376c:	d105      	bne.n	800377a <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800376e:	898d      	ldrh	r5, [r1, #12]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8003770:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8003774:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003778:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800377c:	8382      	strh	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800377e:	88ca      	ldrh	r2, [r1, #6]
 8003780:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003784:	8403      	strh	r3, [r0, #32]
 8003786:	bd30      	pop	{r4, r5, pc}
 8003788:	40012c00 	.word	0x40012c00

0800378c <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800378c:	880a      	ldrh	r2, [r1, #0]
 800378e:	884b      	ldrh	r3, [r1, #2]
 8003790:	4313      	orrs	r3, r2
 8003792:	888a      	ldrh	r2, [r1, #4]
 8003794:	4313      	orrs	r3, r2
 8003796:	88ca      	ldrh	r2, [r1, #6]
 8003798:	4313      	orrs	r3, r2
 800379a:	890a      	ldrh	r2, [r1, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	894a      	ldrh	r2, [r1, #10]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	898a      	ldrh	r2, [r1, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80037ac:	4770      	bx	lr

080037ae <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80037ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037b2:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80037b4:	2300      	movs	r3, #0
 80037b6:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80037b8:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80037ba:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80037bc:	7203      	strb	r3, [r0, #8]
 80037be:	4770      	bx	lr

080037c0 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80037c0:	2300      	movs	r3, #0
 80037c2:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80037c4:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80037c6:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 80037c8:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 80037ca:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 80037cc:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 80037ce:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 80037d0:	81c3      	strh	r3, [r0, #14]
 80037d2:	4770      	bx	lr

080037d4 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80037d4:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80037d6:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80037d8:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80037da:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80037dc:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80037de:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80037e0:	8103      	strh	r3, [r0, #8]
 80037e2:	4770      	bx	lr

080037e4 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80037e4:	2300      	movs	r3, #0
 80037e6:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80037e8:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80037ea:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80037ec:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80037ee:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80037f0:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80037f2:	8183      	strh	r3, [r0, #12]
 80037f4:	4770      	bx	lr

080037f6 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80037f6:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80037f8:	b119      	cbz	r1, 8003802 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	e003      	b.n	800380a <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	041b      	lsls	r3, r3, #16
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	8003      	strh	r3, [r0, #0]
 800380c:	4770      	bx	lr

0800380e <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800380e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003812:	b129      	cbz	r1, 8003820 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003814:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003818:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381c:	b29b      	uxth	r3, r3
 800381e:	e001      	b.n	8003824 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8003820:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003824:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8003828:	4770      	bx	lr

0800382a <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800382a:	8281      	strh	r1, [r0, #20]
 800382c:	4770      	bx	lr

0800382e <TIM_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800382e:	430a      	orrs	r2, r1
 8003830:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8003834:	4770      	bx	lr

08003836 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003836:	8983      	ldrh	r3, [r0, #12]
 8003838:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800383a:	b10a      	cbz	r2, 8003840 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800383c:	4319      	orrs	r1, r3
 800383e:	e001      	b.n	8003844 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003840:	ea23 0101 	bic.w	r1, r3, r1
 8003844:	8181      	strh	r1, [r0, #12]
 8003846:	4770      	bx	lr

08003848 <TIM_ITConfig>:
 8003848:	f7ff bff5 	b.w	8003836 <TIM_DMACmd>

0800384c <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800384c:	8903      	ldrh	r3, [r0, #8]
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	8103      	strh	r3, [r0, #8]
 8003858:	4770      	bx	lr

0800385a <TIM_ITRxExternalClockConfig>:
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385a:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800385c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003864:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003866:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003868:	8903      	ldrh	r3, [r0, #8]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f043 0307 	orr.w	r3, r3, #7
 8003870:	8103      	strh	r3, [r0, #8]
 8003872:	4770      	bx	lr

08003874 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	460d      	mov	r5, r1
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003878:	2d60      	cmp	r5, #96	; 0x60
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800387a:	4611      	mov	r1, r2
 800387c:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800387e:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8003882:	d102      	bne.n	800388a <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003884:	f7ff fd1a 	bl	80032bc <TI2_Config>
 8003888:	e001      	b.n	800388e <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800388a:	f7ff fce3 	bl	8003254 <TI1_Config>
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800388e:	8921      	ldrh	r1, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8003890:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003894:	0409      	lsls	r1, r1, #16
 8003896:	0c09      	lsrs	r1, r1, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003898:	4329      	orrs	r1, r5
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389a:	8121      	strh	r1, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800389c:	8923      	ldrh	r3, [r4, #8]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f043 0307 	orr.w	r3, r3, #7
 80038a4:	8123      	strh	r3, [r4, #8]
 80038a6:	bd38      	pop	{r3, r4, r5, pc}

080038a8 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 80038a8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 80038aa:	8904      	ldrh	r4, [r0, #8]
 80038ac:	b2e4      	uxtb	r4, r4
 80038ae:	4321      	orrs	r1, r4
 80038b0:	430a      	orrs	r2, r1
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80038b2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80038b6:	b299      	uxth	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b8:	8101      	strh	r1, [r0, #8]
 80038ba:	bd10      	pop	{r4, pc}

080038bc <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 80038bc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80038be:	f7ff fff3 	bl	80038a8 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038c2:	8903      	ldrh	r3, [r0, #8]
 80038c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  tmpsmcr |= TIM_TS_ETRF;
 80038cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d0:	8103      	strh	r3, [r0, #8]
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80038d4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80038d6:	f7ff ffe7 	bl	80038a8 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80038da:	8903      	ldrh	r3, [r0, #8]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e2:	8103      	strh	r3, [r0, #8]
 80038e4:	bd10      	pop	{r4, pc}

080038e6 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80038e6:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80038e8:	8282      	strh	r2, [r0, #20]
 80038ea:	4770      	bx	lr

080038ec <TIM_CounterModeConfig>:
{
  uint16_t tmpcr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 80038ec:	8803      	ldrh	r3, [r0, #0]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	0c1b      	lsrs	r3, r3, #16
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80038f6:	4319      	orrs	r1, r3
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80038f8:	8001      	strh	r1, [r0, #0]
 80038fa:	4770      	bx	lr

080038fc <TIM_SelectInputTrigger>:
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038fc:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003906:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003908:	8101      	strh	r1, [r0, #8]
 800390a:	4770      	bx	lr

0800390c <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800390c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800390e:	8906      	ldrh	r6, [r0, #8]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003910:	8b04      	ldrh	r4, [r0, #24]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003912:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8003914:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003918:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800391a:	f024 0403 	bic.w	r4, r4, #3
 800391e:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8003922:	f026 0607 	bic.w	r6, r6, #7
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8003926:	0424      	lsls	r4, r4, #16
 8003928:	432a      	orrs	r2, r5
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800392a:	0436      	lsls	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800392c:	0c24      	lsrs	r4, r4, #16
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800392e:	0c36      	lsrs	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8003930:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003934:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
 8003938:	4331      	orrs	r1, r6
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800393a:	f044 0401 	orr.w	r4, r4, #1
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800393e:	b29d      	uxth	r5, r3
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003940:	8101      	strh	r1, [r0, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003942:	8304      	strh	r4, [r0, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003944:	8405      	strh	r5, [r0, #32]
 8003946:	bd70      	pop	{r4, r5, r6, pc}

08003948 <TIM_ForcedOC1Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003948:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8003952:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003954:	8301      	strh	r1, [r0, #24]
 8003956:	4770      	bx	lr

08003958 <TIM_ForcedOC2Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003958:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8003962:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003966:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003968:	8301      	strh	r1, [r0, #24]
 800396a:	4770      	bx	lr

0800396c <TIM_ForcedOC3Config>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800396c:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 800396e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8003976:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003978:	8381      	strh	r1, [r0, #28]
 800397a:	4770      	bx	lr

0800397c <TIM_ForcedOC4Config>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800397c:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8003986:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800398a:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800398c:	8381      	strh	r1, [r0, #28]
 800398e:	4770      	bx	lr

08003990 <TIM_ARRPreloadConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003990:	8803      	ldrh	r3, [r0, #0]
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003992:	b119      	cbz	r1, 800399c <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003994:	b29b      	uxth	r3, r3
 8003996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399a:	e003      	b.n	80039a4 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 800399c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a0:	041b      	lsls	r3, r3, #16
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	8003      	strh	r3, [r0, #0]
 80039a6:	4770      	bx	lr

080039a8 <TIM_SelectCOM>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80039a8:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039aa:	b119      	cbz	r1, 80039b4 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f043 0304 	orr.w	r3, r3, #4
 80039b2:	e003      	b.n	80039bc <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 80039b4:	f023 0304 	bic.w	r3, r3, #4
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	0c1b      	lsrs	r3, r3, #16
 80039bc:	8083      	strh	r3, [r0, #4]
 80039be:	4770      	bx	lr

080039c0 <TIM_SelectCCDMA>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80039c0:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039c2:	b119      	cbz	r1, 80039cc <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f043 0308 	orr.w	r3, r3, #8
 80039ca:	e003      	b.n	80039d4 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 80039cc:	f023 0308 	bic.w	r3, r3, #8
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	8083      	strh	r3, [r0, #4]
 80039d6:	4770      	bx	lr

080039d8 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80039d8:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039da:	b119      	cbz	r1, 80039e4 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	e003      	b.n	80039ec <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 80039e4:	f023 0301 	bic.w	r3, r3, #1
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	0c1b      	lsrs	r3, r3, #16
 80039ec:	8083      	strh	r3, [r0, #4]
 80039ee:	4770      	bx	lr

080039f0 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 80039f0:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 80039f2:	f023 0308 	bic.w	r3, r3, #8
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80039fa:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80039fc:	8301      	strh	r1, [r0, #24]
 80039fe:	4770      	bx	lr

08003a00 <TIM_OC2PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8003a00:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8003a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8003a0a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a0e:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003a10:	8301      	strh	r1, [r0, #24]
 8003a12:	4770      	bx	lr

08003a14 <TIM_OC3PreloadConfig>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8003a14:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8003a16:	f023 0308 	bic.w	r3, r3, #8
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8003a1e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003a20:	8381      	strh	r1, [r0, #28]
 8003a22:	4770      	bx	lr

08003a24 <TIM_OC4PreloadConfig>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8003a24:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8003a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8003a2e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a32:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003a34:	8381      	strh	r1, [r0, #28]
 8003a36:	4770      	bx	lr

08003a38 <TIM_OC1FastConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003a38:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8003a3a:	f023 0304 	bic.w	r3, r3, #4
 8003a3e:	041b      	lsls	r3, r3, #16
 8003a40:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8003a42:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003a44:	8301      	strh	r1, [r0, #24]
 8003a46:	4770      	bx	lr

08003a48 <TIM_OC2FastConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003a48:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8003a4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8003a52:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a56:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003a58:	8301      	strh	r1, [r0, #24]
 8003a5a:	4770      	bx	lr

08003a5c <TIM_OC3FastConfig>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003a5c:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8003a66:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8003a68:	8381      	strh	r1, [r0, #28]
 8003a6a:	4770      	bx	lr

08003a6c <TIM_OC4FastConfig>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8003a6c:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8003a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8003a76:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a7a:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8003a7c:	8381      	strh	r1, [r0, #28]
 8003a7e:	4770      	bx	lr

08003a80 <TIM_ClearOC1Ref>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8003a80:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8003a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8003a8a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003a8c:	8301      	strh	r1, [r0, #24]
 8003a8e:	4770      	bx	lr

08003a90 <TIM_ClearOC2Ref>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 8003a90:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8003a92:	f3c3 030e 	ubfx	r3, r3, #0, #15
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8003a96:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a9a:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003a9c:	8301      	strh	r1, [r0, #24]
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_ClearOC3Ref>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003aa0:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8003aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8003aaa:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003aac:	8381      	strh	r1, [r0, #28]
 8003aae:	4770      	bx	lr

08003ab0 <TIM_ClearOC4Ref>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003ab0:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8003ab2:	f3c3 030e 	ubfx	r3, r3, #0, #15
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8003ab6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003aba:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003abc:	8381      	strh	r1, [r0, #28]
 8003abe:	4770      	bx	lr

08003ac0 <TIM_OC1PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003ac0:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8003ac2:	f023 0302 	bic.w	r3, r3, #2
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8003aca:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003acc:	8401      	strh	r1, [r0, #32]
 8003ace:	4770      	bx	lr

08003ad0 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003ad0:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8003ad2:	f023 0308 	bic.w	r3, r3, #8
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8003ada:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003adc:	8401      	strh	r1, [r0, #32]
 8003ade:	4770      	bx	lr

08003ae0 <TIM_OC2PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003ae0:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8003ae2:	f023 0320 	bic.w	r3, r3, #32
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8003aea:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003aee:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003af0:	8401      	strh	r1, [r0, #32]
 8003af2:	4770      	bx	lr

08003af4 <TIM_OC2NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003af4:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8003af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afa:	041b      	lsls	r3, r3, #16
 8003afc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8003afe:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003b02:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003b04:	8401      	strh	r1, [r0, #32]
 8003b06:	4770      	bx	lr

08003b08 <TIM_OC3PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003b08:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8003b0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8003b12:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003b16:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003b18:	8401      	strh	r1, [r0, #32]
 8003b1a:	4770      	bx	lr

08003b1c <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8003b1c:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8003b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8003b26:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003b2a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003b2c:	8401      	strh	r1, [r0, #32]
 8003b2e:	4770      	bx	lr

08003b30 <TIM_OC4PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003b30:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8003b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8003b3a:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8003b3e:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003b40:	8401      	strh	r1, [r0, #32]
 8003b42:	4770      	bx	lr

08003b44 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003b44:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8003b46:	8c04      	ldrh	r4, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003b48:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8003b4a:	b2a5      	uxth	r5, r4
 8003b4c:	2401      	movs	r4, #1
 8003b4e:	408c      	lsls	r4, r1
 8003b50:	ea25 0404 	bic.w	r4, r5, r4
 8003b54:	8404      	strh	r4, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003b56:	8c03      	ldrh	r3, [r0, #32]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	8403      	strh	r3, [r0, #32]
 8003b5e:	bd30      	pop	{r4, r5, pc}

08003b60 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003b60:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003b62:	8c04      	ldrh	r4, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003b64:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003b66:	b2a5      	uxth	r5, r4
 8003b68:	2404      	movs	r4, #4
 8003b6a:	408c      	lsls	r4, r1
 8003b6c:	ea25 0404 	bic.w	r4, r5, r4
 8003b70:	8404      	strh	r4, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003b72:	8c03      	ldrh	r3, [r0, #32]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	8403      	strh	r3, [r0, #32]
 8003b7a:	bd30      	pop	{r4, r5, pc}

08003b7c <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8003b7c:	b530      	push	{r4, r5, lr}
  tmp += CCMR_Offset;

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003b7e:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;
 8003b80:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003b84:	b2a5      	uxth	r5, r4
 8003b86:	2401      	movs	r4, #1
 8003b88:	408c      	lsls	r4, r1
 8003b8a:	ea25 0404 	bic.w	r4, r5, r4
 8003b8e:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8003b90:	f021 0008 	bic.w	r0, r1, #8
 8003b94:	b930      	cbnz	r0, 8003ba4 <TIM_SelectOCxM+0x28>
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8003b96:	0849      	lsrs	r1, r1, #1
 8003b98:	58c8      	ldr	r0, [r1, r3]
 8003b9a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8003b9e:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8003ba0:	58c8      	ldr	r0, [r1, r3]
 8003ba2:	e009      	b.n	8003bb8 <TIM_SelectOCxM+0x3c>
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8003ba4:	3904      	subs	r1, #4
 8003ba6:	f3c1 014e 	ubfx	r1, r1, #1, #15
 8003baa:	58c8      	ldr	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8003bac:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8003bae:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8003bb2:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8003bb4:	58c8      	ldr	r0, [r1, r3]
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	4302      	orrs	r2, r0
 8003bba:	50ca      	str	r2, [r1, r3]
 8003bbc:	bd30      	pop	{r4, r5, pc}

08003bbe <TIM_UpdateDisableConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8003bbe:	8803      	ldrh	r3, [r0, #0]
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bc0:	b119      	cbz	r1, 8003bca <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	e003      	b.n	8003bd2 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8003bca:	f023 0302 	bic.w	r3, r3, #2
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	8003      	strh	r3, [r0, #0]
 8003bd4:	4770      	bx	lr

08003bd6 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003bd6:	8803      	ldrh	r3, [r0, #0]
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8003bd8:	b119      	cbz	r1, 8003be2 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	e003      	b.n	8003bea <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8003be2:	f023 0304 	bic.w	r3, r3, #4
 8003be6:	041b      	lsls	r3, r3, #16
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	8003      	strh	r3, [r0, #0]
 8003bec:	4770      	bx	lr

08003bee <TIM_SelectHallSensor>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003bee:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bf0:	b119      	cbz	r1, 8003bfa <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf8:	e003      	b.n	8003c02 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	8083      	strh	r3, [r0, #4]
 8003c04:	4770      	bx	lr

08003c06 <TIM_SelectOnePulseMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8003c06:	8803      	ldrh	r3, [r0, #0]
 8003c08:	f023 0308 	bic.w	r3, r3, #8
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	0c1b      	lsrs	r3, r3, #16
 8003c10:	8003      	strh	r3, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8003c12:	8803      	ldrh	r3, [r0, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4319      	orrs	r1, r3
 8003c18:	8001      	strh	r1, [r0, #0]
 8003c1a:	4770      	bx	lr

08003c1c <TIM_SelectOutputTrigger>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8003c1c:	8883      	ldrh	r3, [r0, #4]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003c28:	8883      	ldrh	r3, [r0, #4]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4319      	orrs	r1, r3
 8003c2e:	8081      	strh	r1, [r0, #4]
 8003c30:	4770      	bx	lr

08003c32 <TIM_SelectSlaveMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8003c32:	8903      	ldrh	r3, [r0, #8]
 8003c34:	f023 0307 	bic.w	r3, r3, #7
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	8103      	strh	r3, [r0, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8003c3e:	8903      	ldrh	r3, [r0, #8]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4319      	orrs	r1, r3
 8003c44:	8101      	strh	r1, [r0, #8]
 8003c46:	4770      	bx	lr

08003c48 <TIM_SelectMasterSlaveMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8003c48:	8903      	ldrh	r3, [r0, #8]
 8003c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8003c54:	8903      	ldrh	r3, [r0, #8]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	4319      	orrs	r1, r3
 8003c5a:	8101      	strh	r1, [r0, #8]
 8003c5c:	4770      	bx	lr

08003c5e <TIM_SetCounter>:
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003c5e:	8481      	strh	r1, [r0, #36]	; 0x24
 8003c60:	4770      	bx	lr

08003c62 <TIM_SetAutoreload>:
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8003c62:	8581      	strh	r1, [r0, #44]	; 0x2c
 8003c64:	4770      	bx	lr

08003c66 <TIM_SetCompare1>:
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8003c66:	8681      	strh	r1, [r0, #52]	; 0x34
 8003c68:	4770      	bx	lr

08003c6a <TIM_SetCompare2>:
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8003c6a:	8701      	strh	r1, [r0, #56]	; 0x38
 8003c6c:	4770      	bx	lr

08003c6e <TIM_SetCompare3>:
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8003c6e:	8781      	strh	r1, [r0, #60]	; 0x3c
 8003c70:	4770      	bx	lr

08003c72 <TIM_SetCompare4>:
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8003c72:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8003c76:	4770      	bx	lr

08003c78 <TIM_SetIC1Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8003c78:	8b03      	ldrh	r3, [r0, #24]
 8003c7a:	f023 030c 	bic.w	r3, r3, #12
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003c84:	8b03      	ldrh	r3, [r0, #24]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4319      	orrs	r1, r3
 8003c8a:	8301      	strh	r1, [r0, #24]
 8003c8c:	4770      	bx	lr

08003c8e <TIM_SetIC2Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8003c8e:	8b03      	ldrh	r3, [r0, #24]
 8003c90:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c94:	041b      	lsls	r3, r3, #16
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8003c9a:	8b03      	ldrh	r3, [r0, #24]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003ca2:	b289      	uxth	r1, r1
 8003ca4:	8301      	strh	r1, [r0, #24]
 8003ca6:	4770      	bx	lr

08003ca8 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	460c      	mov	r4, r1
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003cac:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003cae:	88a2      	ldrh	r2, [r4, #4]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003cb0:	2900      	cmp	r1, #0
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003cb2:	f8b4 e000 	ldrh.w	lr, [r4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2602      	moveq	r6, #2
 8003cba:	2600      	movne	r6, #0
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003cbc:	2a01      	cmp	r2, #1
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2702      	moveq	r7, #2
 8003cc2:	2701      	movne	r7, #1
 8003cc4:	8923      	ldrh	r3, [r4, #8]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003cc6:	f1be 0f00 	cmp.w	lr, #0
 8003cca:	d10e      	bne.n	8003cea <TIM_PWMIConfig+0x42>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003ccc:	f7ff fac2 	bl	8003254 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cd0:	88e1      	ldrh	r1, [r4, #6]
 8003cd2:	f7ff ffd1 	bl	8003c78 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	8923      	ldrh	r3, [r4, #8]
 8003cda:	463a      	mov	r2, r7
 8003cdc:	f7ff faee 	bl	80032bc <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003ce0:	88e1      	ldrh	r1, [r4, #6]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003ce6:	f7ff bfd2 	b.w	8003c8e <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003cea:	f7ff fae7 	bl	80032bc <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cee:	88e1      	ldrh	r1, [r4, #6]
 8003cf0:	f7ff ffcd 	bl	8003c8e <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	8923      	ldrh	r3, [r4, #8]
 8003cf8:	463a      	mov	r2, r7
 8003cfa:	f7ff faab 	bl	8003254 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cfe:	88e1      	ldrh	r1, [r4, #6]
  }
}
 8003d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d04:	f7ff bfb8 	b.w	8003c78 <TIM_SetIC1Prescaler>

08003d08 <TIM_SetIC3Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8003d08:	8b83      	ldrh	r3, [r0, #28]
 8003d0a:	f023 030c 	bic.w	r3, r3, #12
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003d14:	8b83      	ldrh	r3, [r0, #28]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4319      	orrs	r1, r3
 8003d1a:	8381      	strh	r1, [r0, #28]
 8003d1c:	4770      	bx	lr

08003d1e <TIM_SetIC4Prescaler>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8003d1e:	8b83      	ldrh	r3, [r0, #28]
 8003d20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003d2a:	8b83      	ldrh	r3, [r0, #28]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003d32:	b289      	uxth	r1, r1
 8003d34:	8381      	strh	r1, [r0, #28]
 8003d36:	4770      	bx	lr

08003d38 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003d3a:	880e      	ldrh	r6, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003d3c:	460d      	mov	r5, r1
 8003d3e:	890b      	ldrh	r3, [r1, #8]
 8003d40:	888a      	ldrh	r2, [r1, #4]
 8003d42:	4604      	mov	r4, r0
 8003d44:	8849      	ldrh	r1, [r1, #2]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003d46:	b936      	cbnz	r6, 8003d56 <TIM_ICInit+0x1e>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003d48:	f7ff fa84 	bl	8003254 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d4c:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003d4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d52:	f7ff bf91 	b.w	8003c78 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8003d56:	2e04      	cmp	r6, #4
 8003d58:	d106      	bne.n	8003d68 <TIM_ICInit+0x30>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003d5a:	f7ff faaf 	bl	80032bc <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d5e:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003d60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d64:	f7ff bf93 	b.w	8003c8e <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003d68:	2e08      	cmp	r6, #8
 8003d6a:	88ef      	ldrh	r7, [r5, #6]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8003d6c:	8c00      	ldrh	r0, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003d6e:	d139      	bne.n	8003de4 <TIM_ICInit+0xac>
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8003d70:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003d74:	0400      	lsls	r0, r0, #16
 8003d76:	0c00      	lsrs	r0, r0, #16
 8003d78:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d7a:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8003d7c:	8c20      	ldrh	r0, [r4, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
 8003d7e:	b2b6      	uxth	r6, r6
 8003d80:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 8003d84:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 8003d88:	b29b      	uxth	r3, r3
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003d8a:	431a      	orrs	r2, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d8c:	4b35      	ldr	r3, [pc, #212]	; (8003e64 <TIM_ICInit+0x12c>)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8003d8e:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d90:	429c      	cmp	r4, r3
 8003d92:	d012      	beq.n	8003dba <TIM_ICInit+0x82>
 8003d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d98:	429c      	cmp	r4, r3
 8003d9a:	d00e      	beq.n	8003dba <TIM_ICInit+0x82>
 8003d9c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003da0:	d00b      	beq.n	8003dba <TIM_ICInit+0x82>
 8003da2:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8003da6:	429c      	cmp	r4, r3
 8003da8:	d007      	beq.n	8003dba <TIM_ICInit+0x82>
 8003daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dae:	429c      	cmp	r4, r3
 8003db0:	d003      	beq.n	8003dba <TIM_ICInit+0x82>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003db6:	429c      	cmp	r4, r3
 8003db8:	d107      	bne.n	8003dca <TIM_ICInit+0x92>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003dba:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8003dbe:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8003dc2:	b280      	uxth	r0, r0
 8003dc4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003dc8:	e004      	b.n	8003dd4 <TIM_ICInit+0x9c>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003dca:	f420 6320 	bic.w	r3, r0, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8003dce:	f441 7080 	orr.w	r0, r1, #256	; 0x100
 8003dd2:	4318      	orrs	r0, r3
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dd4:	83a2      	strh	r2, [r4, #28]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003dd6:	4639      	mov	r1, r7
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 8003dd8:	8420      	strh	r0, [r4, #32]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003dda:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003ddc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003de0:	f7ff bf92 	b.w	8003d08 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8003de4:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003de8:	0400      	lsls	r0, r0, #16
 8003dea:	0c00      	lsrs	r0, r0, #16
 8003dec:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dee:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8003df0:	f8b4 e020 	ldrh.w	lr, [r4, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8003df4:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8003df8:	052d      	lsls	r5, r5, #20
 8003dfa:	0d2d      	lsrs	r5, r5, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003dfc:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <TIM_ICInit+0x12c>)
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003e02:	ea45 3303 	orr.w	r3, r5, r3, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003e06:	4294      	cmp	r4, r2
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8003e08:	fa1f fe8e 	uxth.w	lr, lr
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003e0c:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003e0e:	d012      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e14:	4294      	cmp	r4, r2
 8003e16:	d00e      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e18:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003e1c:	d00b      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e1e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003e22:	4294      	cmp	r4, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_ICInit+0xfe>
 8003e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e2a:	4294      	cmp	r4, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_ICInit+0xfe>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e32:	4294      	cmp	r4, r2
 8003e34:	d107      	bne.n	8003e46 <TIM_ICInit+0x10e>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003e36:	f42e 5000 	bic.w	r0, lr, #8192	; 0x2000
 8003e3a:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 8003e3e:	b280      	uxth	r0, r0
 8003e40:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8003e44:	e006      	b.n	8003e54 <TIM_ICInit+0x11c>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8003e46:	f647 52ff 	movw	r2, #32255	; 0x7dff
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8003e4a:	f441 5080 	orr.w	r0, r1, #4096	; 0x1000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8003e4e:	ea0e 0202 	and.w	r2, lr, r2
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8003e52:	4310      	orrs	r0, r2
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e54:	83a3      	strh	r3, [r4, #28]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003e56:	4639      	mov	r1, r7
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 8003e58:	8420      	strh	r0, [r4, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003e5a:	4620      	mov	r0, r4
  }
}
 8003e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003e60:	f7ff bf5d 	b.w	8003d1e <TIM_SetIC4Prescaler>
 8003e64:	40012c00 	.word	0x40012c00

08003e68 <TIM_SetClockDivision>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8003e68:	8803      	ldrh	r3, [r0, #0]
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6e:	041b      	lsls	r3, r3, #16
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	8003      	strh	r3, [r0, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8003e74:	8803      	ldrh	r3, [r0, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	4319      	orrs	r1, r3
 8003e7a:	8001      	strh	r1, [r0, #0]
 8003e7c:	4770      	bx	lr

08003e7e <TIM_GetCapture1>:
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003e7e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 8003e80:	b280      	uxth	r0, r0
 8003e82:	4770      	bx	lr

08003e84 <TIM_GetCapture2>:
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003e84:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 8003e86:	b280      	uxth	r0, r0
 8003e88:	4770      	bx	lr

08003e8a <TIM_GetCapture3>:
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003e8a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 8003e8c:	b280      	uxth	r0, r0
 8003e8e:	4770      	bx	lr

08003e90 <TIM_GetCapture4>:
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003e90:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8003e94:	b280      	uxth	r0, r0
 8003e96:	4770      	bx	lr

08003e98 <TIM_GetCounter>:
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 8003e98:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8003e9a:	b280      	uxth	r0, r0
 8003e9c:	4770      	bx	lr

08003e9e <TIM_GetPrescaler>:
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8003e9e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8003ea0:	b280      	uxth	r0, r0
 8003ea2:	4770      	bx	lr

08003ea4 <TIM_GetFlagStatus>:
  ITStatus bitstatus = RESET;  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003ea4:	8a03      	ldrh	r3, [r0, #16]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8003ea6:	4219      	tst	r1, r3
}
 8003ea8:	bf14      	ite	ne
 8003eaa:	2001      	movne	r0, #1
 8003eac:	2000      	moveq	r0, #0
 8003eae:	4770      	bx	lr

08003eb0 <TIM_ClearFlag>:
 8003eb0:	43c9      	mvns	r1, r1
 8003eb2:	b289      	uxth	r1, r1
 8003eb4:	8201      	strh	r1, [r0, #16]
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003eb8:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8003eba:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003ebc:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8003ec0:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003ec2:	d003      	beq.n	8003ecc <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8003ec4:	4211      	tst	r1, r2
 8003ec6:	bf14      	ite	ne
 8003ec8:	2001      	movne	r0, #1
 8003eca:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8003ecc:	4770      	bx	lr

08003ece <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003ece:	43c9      	mvns	r1, r1
 8003ed0:	b289      	uxth	r1, r1
 8003ed2:	8201      	strh	r1, [r0, #16]
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop

08003ed8 <SDIO_DeInit>:
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
  SDIO->POWER = 0x00000000;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <SDIO_DeInit+0x1c>)
  SDIO->ARG = 0x00000000;
  SDIO->CMD = 0x00000000;
  SDIO->DTIMER = 0x00000000;
  SDIO->DLEN = 0x00000000;
  SDIO->DCTRL = 0x00000000;
  SDIO->ICR = 0x00C007FF;
 8003eda:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <SDIO_DeInit+0x20>)
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
  SDIO->POWER = 0x00000000;
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
  SDIO->CLKCR = 0x00000000;
 8003ee0:	605a      	str	r2, [r3, #4]
  SDIO->ARG = 0x00000000;
 8003ee2:	609a      	str	r2, [r3, #8]
  SDIO->CMD = 0x00000000;
 8003ee4:	60da      	str	r2, [r3, #12]
  SDIO->DTIMER = 0x00000000;
 8003ee6:	625a      	str	r2, [r3, #36]	; 0x24
  SDIO->DLEN = 0x00000000;
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
  SDIO->DCTRL = 0x00000000;
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c
  SDIO->ICR = 0x00C007FF;
 8003eec:	6399      	str	r1, [r3, #56]	; 0x38
  SDIO->MASK = 0x00000000;
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40018000 	.word	0x40018000
 8003ef8:	00c007ff 	.word	0x00c007ff

08003efc <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8003efc:	6843      	ldr	r3, [r0, #4]
 8003efe:	6881      	ldr	r1, [r0, #8]
 8003f00:	b510      	push	{r4, lr}
 8003f02:	4319      	orrs	r1, r3
 8003f04:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8003f06:	4c08      	ldr	r4, [pc, #32]	; (8003f28 <SDIO_Init+0x2c>)
 8003f08:	4319      	orrs	r1, r3
 8003f0a:	6803      	ldr	r3, [r0, #0]
 8003f0c:	6862      	ldr	r2, [r4, #4]
 8003f0e:	4319      	orrs	r1, r3
 8003f10:	6903      	ldr	r3, [r0, #16]
 8003f12:	4319      	orrs	r1, r3
 8003f14:	f422 43fd 	bic.w	r3, r2, #32384	; 0x7e80
 8003f18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8003f1c:	7d02      	ldrb	r2, [r0, #20]
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	4313      	orrs	r3, r2
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8003f22:	6063      	str	r3, [r4, #4]
 8003f24:	bd10      	pop	{r4, pc}
 8003f26:	bf00      	nop
 8003f28:	40018000 	.word	0x40018000

08003f2c <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8003f30:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8003f32:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8003f34:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8003f36:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8003f38:	6103      	str	r3, [r0, #16]
 8003f3a:	4770      	bx	lr

08003f3c <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8003f3c:	4b01      	ldr	r3, [pc, #4]	; (8003f44 <SDIO_ClockCmd+0x8>)
 8003f3e:	6018      	str	r0, [r3, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	423000a0 	.word	0x423000a0

08003f48 <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER &= PWR_PWRCTRL_MASK;
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <SDIO_SetPowerState+0x14>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f022 0203 	bic.w	r2, r2, #3
 8003f50:	601a      	str	r2, [r3, #0]
  SDIO->POWER |= SDIO_PowerState;
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4310      	orrs	r0, r2
 8003f56:	6018      	str	r0, [r3, #0]
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40018000 	.word	0x40018000

08003f60 <SDIO_GetPowerState>:
  * - 0x02: Power UP
  * - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <SDIO_GetPowerState+0xc>)
 8003f62:	6818      	ldr	r0, [r3, #0]
}
 8003f64:	f000 0003 	and.w	r0, r0, #3
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40018000 	.word	0x40018000

08003f70 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <SDIO_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8003f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003f74:	b109      	cbz	r1, 8003f7a <SDIO_ITConfig+0xa>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8003f76:	4310      	orrs	r0, r2
 8003f78:	e001      	b.n	8003f7e <SDIO_ITConfig+0xe>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8003f7a:	ea22 0000 	bic.w	r0, r2, r0
 8003f7e:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40018000 	.word	0x40018000

08003f88 <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8003f88:	4b01      	ldr	r3, [pc, #4]	; (8003f90 <SDIO_DMACmd+0x8>)
 8003f8a:	6018      	str	r0, [r3, #0]
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	4230058c 	.word	0x4230058c

08003f94 <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8003f94:	6803      	ldr	r3, [r0, #0]
 8003f96:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <SDIO_SendCommand+0x28>)
  * @param  SDIO_CmdInitStruct : pointer to a SDIO_CmdInitTypeDef 
  *         structure that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8003f98:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8003f9a:	6093      	str	r3, [r2, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003f9c:	6881      	ldr	r1, [r0, #8]
 8003f9e:	6844      	ldr	r4, [r0, #4]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8003fa0:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003fa2:	430c      	orrs	r4, r1
 8003fa4:	68c1      	ldr	r1, [r0, #12]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8003fa6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003faa:	430c      	orrs	r4, r1
 8003fac:	6901      	ldr	r1, [r0, #16]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8003fae:	f023 0307 	bic.w	r3, r3, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003fb2:	4321      	orrs	r1, r4
 8003fb4:	430b      	orrs	r3, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8003fb6:	60d3      	str	r3, [r2, #12]
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	bf00      	nop
 8003fbc:	40018000 	.word	0x40018000

08003fc0 <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8003fc4:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8003fc6:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8003fc8:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8003fca:	6103      	str	r3, [r0, #16]
 8003fcc:	4770      	bx	lr

08003fce <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 8003fce:	4b02      	ldr	r3, [pc, #8]	; (8003fd8 <SDIO_GetCommandResponse+0xa>)
 8003fd0:	6918      	ldr	r0, [r3, #16]
}
 8003fd2:	b2c0      	uxtb	r0, r0
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40018000 	.word	0x40018000

08003fdc <SDIO_GetResponse>:
  *     @arg SDIO_RESP3: Response Register 3
  *     @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8003fdc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8003fe2:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <SDIO_GetResponse+0x14>)
 8003fe4:	4403      	add	r3, r0
 8003fe6:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
}
 8003fec:	b002      	add	sp, #8
 8003fee:	4770      	bx	lr
 8003ff0:	40018014 	.word	0x40018014

08003ff4 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8003ff4:	6803      	ldr	r3, [r0, #0]
 8003ff6:	4909      	ldr	r1, [pc, #36]	; (800401c <SDIO_DataConfig+0x28>)
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure that
  *   contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8003ff8:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8003ffa:	624b      	str	r3, [r1, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8003ffc:	6843      	ldr	r3, [r0, #4]
 8003ffe:	628b      	str	r3, [r1, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8004000:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004002:	6884      	ldr	r4, [r0, #8]

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8004004:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004008:	68c3      	ldr	r3, [r0, #12]
 800400a:	431c      	orrs	r4, r3
 800400c:	6903      	ldr	r3, [r0, #16]
 800400e:	6940      	ldr	r0, [r0, #20]
 8004010:	4323      	orrs	r3, r4
 8004012:	4303      	orrs	r3, r0
 8004014:	4313      	orrs	r3, r2
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8004016:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004018:	bd10      	pop	{r4, pc}
 800401a:	bf00      	nop
 800401c:	40018000 	.word	0x40018000

08004020 <SDIO_DataStructInit>:
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004024:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8004026:	2300      	movs	r3, #0
 8004028:	6043      	str	r3, [r0, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800402a:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800402c:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800402e:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8004030:	6143      	str	r3, [r0, #20]
 8004032:	4770      	bx	lr

08004034 <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 8004034:	4b01      	ldr	r3, [pc, #4]	; (800403c <SDIO_GetDataCounter+0x8>)
 8004036:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40018000 	.word	0x40018000

08004040 <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 8004040:	4b01      	ldr	r3, [pc, #4]	; (8004048 <SDIO_ReadData+0x8>)
 8004042:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8004046:	4770      	bx	lr
 8004048:	40018000 	.word	0x40018000

0800404c <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 800404c:	4b01      	ldr	r3, [pc, #4]	; (8004054 <SDIO_WriteData+0x8>)
 800404e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8004052:	4770      	bx	lr
 8004054:	40018000 	.word	0x40018000

08004058 <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 8004058:	4b01      	ldr	r3, [pc, #4]	; (8004060 <SDIO_GetFIFOCount+0x8>)
 800405a:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40018000 	.word	0x40018000

08004064 <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8004064:	4b01      	ldr	r3, [pc, #4]	; (800406c <SDIO_StartSDIOReadWait+0x8>)
 8004066:	6018      	str	r0, [r3, #0]
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	423005a0 	.word	0x423005a0

08004070 <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8004070:	4b01      	ldr	r3, [pc, #4]	; (8004078 <SDIO_StopSDIOReadWait+0x8>)
 8004072:	6018      	str	r0, [r3, #0]
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	423005a4 	.word	0x423005a4

0800407c <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800407c:	4b01      	ldr	r3, [pc, #4]	; (8004084 <SDIO_SetSDIOReadWaitMode+0x8>)
 800407e:	6018      	str	r0, [r3, #0]
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	423005a8 	.word	0x423005a8

08004088 <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8004088:	4b01      	ldr	r3, [pc, #4]	; (8004090 <SDIO_SetSDIOOperation+0x8>)
 800408a:	6018      	str	r0, [r3, #0]
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	423005ac 	.word	0x423005ac

08004094 <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <SDIO_SendSDIOSuspendCmd+0x8>)
 8004096:	6018      	str	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	423001ac 	.word	0x423001ac

080040a0 <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 80040a0:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <SDIO_CommandCompletionCmd+0x8>)
 80040a2:	6018      	str	r0, [r3, #0]
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	423001b0 	.word	0x423001b0

080040ac <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 80040ac:	f000 0001 	and.w	r0, r0, #1
 80040b0:	4b02      	ldr	r3, [pc, #8]	; (80040bc <SDIO_CEATAITCmd+0x10>)
 80040b2:	f080 0001 	eor.w	r0, r0, #1
 80040b6:	6018      	str	r0, [r3, #0]
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	423001b4 	.word	0x423001b4

080040c0 <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 80040c0:	4b01      	ldr	r3, [pc, #4]	; (80040c8 <SDIO_SendCEATACmd+0x8>)
 80040c2:	6018      	str	r0, [r3, #0]
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	423001b8 	.word	0x423001b8

080040cc <SDIO_ClearFlag>:
 80040cc:	4b01      	ldr	r3, [pc, #4]	; (80040d4 <SDIO_ClearFlag+0x8>)
 80040ce:	6398      	str	r0, [r3, #56]	; 0x38
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40018000 	.word	0x40018000

080040d8 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <SDIO_GetITStatus+0x10>)
 80040da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 80040dc:	4203      	tst	r3, r0
}
 80040de:	bf14      	ite	ne
 80040e0:	2001      	movne	r0, #1
 80040e2:	2000      	moveq	r0, #0
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	40018000 	.word	0x40018000

080040ec <SDIO_GetFlagStatus>:
 80040ec:	f7ff bff4 	b.w	80040d8 <SDIO_GetITStatus>

080040f0 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 80040f0:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <SDIO_ClearITPendingBit+0x8>)
 80040f2:	6398      	str	r0, [r3, #56]	; 0x38
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40018000 	.word	0x40018000

080040fc <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 80040fc:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 80040fe:	2101      	movs	r1, #1
 8004100:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004104:	f7fe fd16 	bl	8002b34 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
}
 8004108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800410c:	2100      	movs	r1, #0
 800410e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004112:	f7fe bd0f 	b.w	8002b34 <RCC_APB1PeriphResetCmd>

08004116 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
 8004116:	4a03      	ldr	r2, [pc, #12]	; (8004124 <WWDG_SetPrescaler+0xe>)
 8004118:	6853      	ldr	r3, [r2, #4]
 800411a:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800411e:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8004120:	6050      	str	r0, [r2, #4]
 8004122:	4770      	bx	lr
 8004124:	40002c00 	.word	0x40002c00

08004128 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8004128:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <WWDG_SetWindowValue+0x24>)
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 8004130:	6853      	ldr	r3, [r2, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
 8004132:	f000 007f 	and.w	r0, r0, #127	; 0x7f

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 8004136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800413a:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
 800413c:	9b01      	ldr	r3, [sp, #4]
 800413e:	4303      	orrs	r3, r0
 8004140:	9301      	str	r3, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8004142:	9b01      	ldr	r3, [sp, #4]
 8004144:	6053      	str	r3, [r2, #4]
}
 8004146:	b002      	add	sp, #8
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40002c00 	.word	0x40002c00

08004150 <WWDG_EnableIT>:
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <WWDG_EnableIT+0x8>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	4770      	bx	lr
 8004158:	420580a4 	.word	0x420580a4

0800415c <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_Mask;
 800415c:	4b02      	ldr	r3, [pc, #8]	; (8004168 <WWDG_SetCounter+0xc>)
 800415e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004162:	6018      	str	r0, [r3, #0]
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40002c00 	.word	0x40002c00

0800416c <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = CR_WDGA_Set | Counter;
 800416c:	4b02      	ldr	r3, [pc, #8]	; (8004178 <WWDG_Enable+0xc>)
 800416e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004172:	6018      	str	r0, [r3, #0]
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40002c00 	.word	0x40002c00

0800417c <WWDG_GetFlagStatus>:
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  return (FlagStatus)(WWDG->SR);
 800417c:	4b01      	ldr	r3, [pc, #4]	; (8004184 <WWDG_GetFlagStatus+0x8>)
 800417e:	6898      	ldr	r0, [r3, #8]
}
 8004180:	b2c0      	uxtb	r0, r0
 8004182:	4770      	bx	lr
 8004184:	40002c00 	.word	0x40002c00

08004188 <WWDG_ClearFlag>:
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
 8004188:	4b01      	ldr	r3, [pc, #4]	; (8004190 <WWDG_ClearFlag+0x8>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	4770      	bx	lr
 8004190:	40002c00 	.word	0x40002c00

08004194 <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 8004194:	4b01      	ldr	r3, [pc, #4]	; (800419c <DBGMCU_GetREVID+0x8>)
 8004196:	6818      	ldr	r0, [r3, #0]
}
 8004198:	0c00      	lsrs	r0, r0, #16
 800419a:	4770      	bx	lr
 800419c:	e0042000 	.word	0xe0042000

080041a0 <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <DBGMCU_GetDEVID+0xc>)
 80041a2:	6818      	ldr	r0, [r3, #0]
}
 80041a4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e0042000 	.word	0xe0042000

080041b0 <DBGMCU_Config>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <DBGMCU_Config+0x14>)
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 80041b2:	685a      	ldr	r2, [r3, #4]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80041b4:	b109      	cbz	r1, 80041ba <DBGMCU_Config+0xa>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 80041b6:	4310      	orrs	r0, r2
 80041b8:	e001      	b.n	80041be <DBGMCU_Config+0xe>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 80041ba:	ea22 0000 	bic.w	r0, r2, r0
 80041be:	6058      	str	r0, [r3, #4]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e0042000 	.word	0xe0042000

080041c8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80041c8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80041cc:	4b02      	ldr	r3, [pc, #8]	; (80041d8 <NVIC_PriorityGroupConfig+0x10>)
 80041ce:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80041d2:	60d8      	str	r0, [r3, #12]
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80041dc:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80041de:	b510      	push	{r4, lr}
 80041e0:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80041e2:	b30a      	cbz	r2, 8004228 <NVIC_Init+0x4c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80041e4:	4a16      	ldr	r2, [pc, #88]	; (8004240 <NVIC_Init+0x64>)

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80041e6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80041ea:	68d1      	ldr	r1, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80041ec:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80041ee:	43c9      	mvns	r1, r1
 80041f0:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 80041f4:	f1c1 0404 	rsb	r4, r1, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80041f8:	fa02 f404 	lsl.w	r4, r2, r4
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80041fc:	220f      	movs	r2, #15
 80041fe:	40ca      	lsrs	r2, r1
 8004200:	7881      	ldrb	r1, [r0, #2]
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004202:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004206:	400a      	ands	r2, r1
 8004208:	4322      	orrs	r2, r4
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004212:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004214:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004216:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004220:	4a08      	ldr	r2, [pc, #32]	; (8004244 <NVIC_Init+0x68>)
 8004222:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004226:	bd10      	pop	{r4, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004228:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800422a:	2101      	movs	r1, #1
 800422c:	f003 031f 	and.w	r3, r3, #31
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004234:	4903      	ldr	r1, [pc, #12]	; (8004244 <NVIC_Init+0x68>)
 8004236:	3220      	adds	r2, #32
 8004238:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800423c:	bd10      	pop	{r4, pc}
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00
 8004244:	e000e100 	.word	0xe000e100

08004248 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8004248:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800424c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004250:	4b01      	ldr	r3, [pc, #4]	; (8004258 <NVIC_SetVectorTable+0x10>)
 8004252:	4308      	orrs	r0, r1
 8004254:	6098      	str	r0, [r3, #8]
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 800425e:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8004260:	b109      	cbz	r1, 8004266 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8004262:	4310      	orrs	r0, r2
 8004264:	e001      	b.n	800426a <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8004266:	ea22 0000 	bic.w	r0, r2, r0
 800426a:	6118      	str	r0, [r3, #16]
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8004276:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	bf0c      	ite	eq
 800427c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8004280:	f022 0204 	bicne.w	r2, r2, #4
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	4770      	bx	lr
 8004288:	e000e010 	.word	0xe000e010

0800428c <led_cb(std_msgs::UInt8 const&)>:

__IO bool shuttingDown = false;
__IO bool waitForServos = false;

void led_cb( const std_msgs::UInt8& cmd_msg){
  led_set(cmd_msg.data);
 800428c:	7900      	ldrb	r0, [r0, #4]
 800428e:	f7fc b8b9 	b.w	8000404 <led_set>

08004292 <motor_cb(roberto_msgs::MotorState const&)>:
}



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 8004292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t intMode = cmd_msg.mode;
  if(intMode == cmd_msg.DRIVE_MODE_AUTO){

  }

  if(currentMode != intMode){
 8004296:	4c57      	ldr	r4, [pc, #348]	; (80043f4 <motor_cb(roberto_msgs::MotorState const&)+0x162>)
}



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
  uint8_t intMode = cmd_msg.mode;
 8004298:	f890 8028 	ldrb.w	r8, [r0, #40]	; 0x28
  if(intMode == cmd_msg.DRIVE_MODE_AUTO){

  }

  if(currentMode != intMode){
 800429c:	7823      	ldrb	r3, [r4, #0]
  led_set(cmd_msg.data);
}



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 800429e:	4681      	mov	r9, r0
  uint8_t intMode = cmd_msg.mode;
  if(intMode == cmd_msg.DRIVE_MODE_AUTO){

  }

  if(currentMode != intMode){
 80042a0:	4543      	cmp	r3, r8
    waitForServos = true;
 80042a2:	bf1c      	itt	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	7063      	strbne	r3, [r4, #1]
  }

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
 80042a8:	f1b8 0f01 	cmp.w	r8, #1
 80042ac:	d173      	bne.n	8004396 <motor_cb(roberto_msgs::MotorState const&)+0x104>
    float angle[2] = {0, 0};
    float speedMult = 1;
    if (cmd_msg.heading_angle != 0){
 80042ae:	6987      	ldr	r7, [r0, #24]
 80042b0:	2100      	movs	r1, #0
 80042b2:	4638      	mov	r0, r7
 80042b4:	f001 fc86 	bl	8005bc4 <__aeabi_fcmpeq>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d130      	bne.n	800431e <motor_cb(roberto_msgs::MotorState const&)+0x8c>
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
 80042bc:	4639      	mov	r1, r7
 80042be:	4638      	mov	r0, r7
 80042c0:	f001 faec 	bl	800589c <__aeabi_fmul>
 80042c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80042c8:	f001 f9e0 	bl	800568c <__addsf3>
 80042cc:	4639      	mov	r1, r7
 80042ce:	4605      	mov	r5, r0
 80042d0:	4638      	mov	r0, r7
 80042d2:	f001 f9db 	bl	800568c <__addsf3>
 80042d6:	4601      	mov	r1, r0
 80042d8:	4628      	mov	r0, r5
 80042da:	f001 fb93 	bl	8005a04 <__aeabi_fdiv>
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
 80042de:	6865      	ldr	r5, [r4, #4]

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
    float angle[2] = {0, 0};
    float speedMult = 1;
    if (cmd_msg.heading_angle != 0){
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
 80042e0:	4682      	mov	sl, r0
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
 80042e2:	4629      	mov	r1, r5
 80042e4:	f001 f9d2 	bl	800568c <__addsf3>
 80042e8:	4601      	mov	r1, r0
 80042ea:	4628      	mov	r0, r5
 80042ec:	f001 fb8a 	bl	8005a04 <__aeabi_fdiv>
 80042f0:	f000 fe60 	bl	8004fb4 <__aeabi_f2d>
 80042f4:	f00d fba8 	bl	8011a48 <atan>
 80042f8:	f001 f972 	bl	80055e0 <__aeabi_d2f>
      angle[1] = atan(L/(L-R));
 80042fc:	4651      	mov	r1, sl
    float angle[2] = {0, 0};
    float speedMult = 1;
    if (cmd_msg.heading_angle != 0){
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
 80042fe:	4606      	mov	r6, r0
      angle[1] = atan(L/(L-R));
 8004300:	4628      	mov	r0, r5
 8004302:	f001 f9c1 	bl	8005688 <__aeabi_fsub>
 8004306:	4601      	mov	r1, r0
 8004308:	4628      	mov	r0, r5
 800430a:	f001 fb7b 	bl	8005a04 <__aeabi_fdiv>
 800430e:	f000 fe51 	bl	8004fb4 <__aeabi_f2d>
 8004312:	f00d fb99 	bl	8011a48 <atan>
 8004316:	f001 f963 	bl	80055e0 <__aeabi_d2f>
 800431a:	4605      	mov	r5, r0
 800431c:	e001      	b.n	8004322 <motor_cb(roberto_msgs::MotorState const&)+0x90>
  if(currentMode != intMode){
    waitForServos = true;
  }

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
    float angle[2] = {0, 0};
 800431e:	2500      	movs	r5, #0
 8004320:	462e      	mov	r6, r5
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
      angle[1] = atan(L/(L-R));
    }
    motorCmd[0] = cmd_msg.speed*speedMult;
 8004322:	f8d9 3020 	ldr.w	r3, [r9, #32]
    motorCmd[1] = cmd_msg.speed*speedMult;
    motorCmd[2] = cmd_msg.speed*speedMult;
    motorCmd[3] = cmd_msg.speed*speedMult;

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 8004326:	4934      	ldr	r1, [pc, #208]	; (80043f8 <motor_cb(roberto_msgs::MotorState const&)+0x166>)
      float R = (1+cmd_msg.heading_angle*cmd_msg.heading_angle)/(2*cmd_msg.heading_angle);
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = atan(L/(L+R));
      angle[1] = atan(L/(L-R));
    }
    motorCmd[0] = cmd_msg.speed*speedMult;
 8004328:	60a3      	str	r3, [r4, #8]
    motorCmd[1] = cmd_msg.speed*speedMult;
 800432a:	60e3      	str	r3, [r4, #12]
    motorCmd[2] = cmd_msg.speed*speedMult;
 800432c:	6123      	str	r3, [r4, #16]
    motorCmd[3] = cmd_msg.speed*speedMult;
 800432e:	6163      	str	r3, [r4, #20]

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 8004330:	4630      	mov	r0, r6
 8004332:	f001 fc6f 	bl	8005c14 <__aeabi_fcmpgt>
 8004336:	b930      	cbnz	r0, 8004346 <motor_cb(roberto_msgs::MotorState const&)+0xb4>
 8004338:	4930      	ldr	r1, [pc, #192]	; (80043fc <motor_cb(roberto_msgs::MotorState const&)+0x16a>)
 800433a:	4630      	mov	r0, r6
 800433c:	f001 fc4c 	bl	8005bd8 <__aeabi_fcmplt>
 8004340:	b110      	cbz	r0, 8004348 <motor_cb(roberto_msgs::MotorState const&)+0xb6>
 8004342:	4e2e      	ldr	r6, [pc, #184]	; (80043fc <motor_cb(roberto_msgs::MotorState const&)+0x16a>)
 8004344:	e000      	b.n	8004348 <motor_cb(roberto_msgs::MotorState const&)+0xb6>
 8004346:	4e2c      	ldr	r6, [pc, #176]	; (80043f8 <motor_cb(roberto_msgs::MotorState const&)+0x166>)
    angle[1] = angle[1] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[1] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[1]);
 8004348:	492b      	ldr	r1, [pc, #172]	; (80043f8 <motor_cb(roberto_msgs::MotorState const&)+0x166>)
 800434a:	4628      	mov	r0, r5
 800434c:	f001 fc62 	bl	8005c14 <__aeabi_fcmpgt>
 8004350:	b930      	cbnz	r0, 8004360 <motor_cb(roberto_msgs::MotorState const&)+0xce>
 8004352:	492a      	ldr	r1, [pc, #168]	; (80043fc <motor_cb(roberto_msgs::MotorState const&)+0x16a>)
 8004354:	4628      	mov	r0, r5
 8004356:	f001 fc3f 	bl	8005bd8 <__aeabi_fcmplt>
 800435a:	b110      	cbz	r0, 8004362 <motor_cb(roberto_msgs::MotorState const&)+0xd0>
 800435c:	4d27      	ldr	r5, [pc, #156]	; (80043fc <motor_cb(roberto_msgs::MotorState const&)+0x16a>)
 800435e:	e000      	b.n	8004362 <motor_cb(roberto_msgs::MotorState const&)+0xd0>
 8004360:	4d25      	ldr	r5, [pc, #148]	; (80043f8 <motor_cb(roberto_msgs::MotorState const&)+0x166>)

    if(cmd_msg.heading_angle > 0){
 8004362:	2100      	movs	r1, #0
 8004364:	4638      	mov	r0, r7
 8004366:	f001 fc55 	bl	8005c14 <__aeabi_fcmpgt>
 800436a:	b148      	cbz	r0, 8004380 <motor_cb(roberto_msgs::MotorState const&)+0xee>
      servo_left->setReference(angle[0]);
 800436c:	69a0      	ldr	r0, [r4, #24]
 800436e:	4631      	mov	r1, r6
 8004370:	6803      	ldr	r3, [r0, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	4798      	blx	r3
      servo_right->setReference(angle[1]);
 8004376:	69e0      	ldr	r0, [r4, #28]
 8004378:	4629      	mov	r1, r5
 800437a:	6803      	ldr	r3, [r0, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	e008      	b.n	8004392 <motor_cb(roberto_msgs::MotorState const&)+0x100>

    }else{
      servo_left->setReference(angle[1]);
 8004380:	69a0      	ldr	r0, [r4, #24]
 8004382:	4629      	mov	r1, r5
 8004384:	6803      	ldr	r3, [r0, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	4798      	blx	r3
      servo_right->setReference(angle[0]);
 800438a:	4631      	mov	r1, r6
 800438c:	69e0      	ldr	r0, [r4, #28]
 800438e:	6803      	ldr	r3, [r0, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	4798      	blx	r3
 8004394:	e02a      	b.n	80043ec <motor_cb(roberto_msgs::MotorState const&)+0x15a>
    }

  }else if(intMode == cmd_msg.DRIVE_MODE_SPIN){
 8004396:	f1b8 0f02 	cmp.w	r8, #2
 800439a:	d112      	bne.n	80043c2 <motor_cb(roberto_msgs::MotorState const&)+0x130>
    float h = 45;
    servo_left->setReference(h);
 800439c:	69a0      	ldr	r0, [r4, #24]
 800439e:	4918      	ldr	r1, [pc, #96]	; (8004400 <motor_cb(roberto_msgs::MotorState const&)+0x16e>)
 80043a0:	6803      	ldr	r3, [r0, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	4798      	blx	r3
    servo_right->setReference(h);
 80043a6:	69e0      	ldr	r0, [r4, #28]
 80043a8:	4915      	ldr	r1, [pc, #84]	; (8004400 <motor_cb(roberto_msgs::MotorState const&)+0x16e>)
 80043aa:	6803      	ldr	r3, [r0, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	4798      	blx	r3

    motorCmd[0] = cmd_msg.speed;
 80043b0:	f8d9 3020 	ldr.w	r3, [r9, #32]
    motorCmd[1] = -cmd_msg.speed;
 80043b4:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
  }else if(intMode == cmd_msg.DRIVE_MODE_SPIN){
    float h = 45;
    servo_left->setReference(h);
    servo_right->setReference(h);

    motorCmd[0] = cmd_msg.speed;
 80043b8:	60a3      	str	r3, [r4, #8]
    motorCmd[1] = -cmd_msg.speed;
 80043ba:	60e2      	str	r2, [r4, #12]
    motorCmd[2] = -cmd_msg.speed;
 80043bc:	6122      	str	r2, [r4, #16]
    motorCmd[3] = cmd_msg.speed;
 80043be:	6163      	str	r3, [r4, #20]
 80043c0:	e014      	b.n	80043ec <motor_cb(roberto_msgs::MotorState const&)+0x15a>

  }else if(intMode == cmd_msg.DRIVE_MODE_SIDEWAYS){
 80043c2:	f1b8 0f03 	cmp.w	r8, #3
 80043c6:	d111      	bne.n	80043ec <motor_cb(roberto_msgs::MotorState const&)+0x15a>
    float h = 90;
    servo_left->setReference(h);
 80043c8:	69a0      	ldr	r0, [r4, #24]
 80043ca:	490e      	ldr	r1, [pc, #56]	; (8004404 <motor_cb(roberto_msgs::MotorState const&)+0x172>)
 80043cc:	6803      	ldr	r3, [r0, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	4798      	blx	r3
    servo_right->setReference(h);
 80043d2:	69e0      	ldr	r0, [r4, #28]
 80043d4:	490b      	ldr	r1, [pc, #44]	; (8004404 <motor_cb(roberto_msgs::MotorState const&)+0x172>)
 80043d6:	6803      	ldr	r3, [r0, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4798      	blx	r3

    motorCmd[0] = cmd_msg.speed;
 80043dc:	f8d9 3020 	ldr.w	r3, [r9, #32]
    motorCmd[1] = -cmd_msg.speed;
 80043e0:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
  }else if(intMode == cmd_msg.DRIVE_MODE_SIDEWAYS){
    float h = 90;
    servo_left->setReference(h);
    servo_right->setReference(h);

    motorCmd[0] = cmd_msg.speed;
 80043e4:	60a3      	str	r3, [r4, #8]
    motorCmd[1] = -cmd_msg.speed;
 80043e6:	60e2      	str	r2, [r4, #12]
    motorCmd[2] = cmd_msg.speed;
 80043e8:	6123      	str	r3, [r4, #16]
    motorCmd[3] = -cmd_msg.speed;
 80043ea:	6162      	str	r2, [r4, #20]
  }
  currentMode = intMode;
 80043ec:	f884 8000 	strb.w	r8, [r4]
 80043f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f4:	200000c0 	.word	0x200000c0
 80043f8:	41700000 	.word	0x41700000
 80043fc:	c1700000 	.word	0xc1700000
 8004400:	42340000 	.word	0x42340000
 8004404:	42b40000 	.word	0x42b40000

08004408 <USART1_IRQHandler>:
};



extern "C"{
  void USART1_IRQHandler(void){
 8004408:	b538      	push	{r3, r4, r5, lr}

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET 
 800440a:	f240 5125 	movw	r1, #1317	; 0x525
 800440e:	480f      	ldr	r0, [pc, #60]	; (800444c <USART1_IRQHandler+0x44>)
 8004410:	f7fe fef8 	bl	8003204 <USART_GetITStatus>
      && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){
 8004414:	b140      	cbz	r0, 8004428 <USART1_IRQHandler+0x20>
 8004416:	4c0e      	ldr	r4, [pc, #56]	; (8004450 <USART1_IRQHandler+0x48>)
 8004418:	6a23      	ldr	r3, [r4, #32]
 800441a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800441c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004424:	4293      	cmp	r3, r2
 8004426:	d104      	bne.n	8004432 <USART1_IRQHandler+0x2a>
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear inerrupt flag by reading byte
    }
  }   
 8004428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

      USART_FIFO[USART_CNTIN] = USART_ReceiveData(USART1);
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear inerrupt flag by reading byte
 800442c:	4807      	ldr	r0, [pc, #28]	; (800444c <USART1_IRQHandler+0x44>)
 800442e:	f7fe be70 	b.w	8003112 <USART_ReceiveData>
  void USART1_IRQHandler(void){

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET 
      && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){

      USART_FIFO[USART_CNTIN] = USART_ReceiveData(USART1);
 8004432:	4806      	ldr	r0, [pc, #24]	; (800444c <USART1_IRQHandler+0x44>)
 8004434:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004436:	f7fe fe6c 	bl	8003112 <USART_ReceiveData>
 800443a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800443e:	8528      	strh	r0, [r5, #40]	; 0x28
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
 8004440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004448:	6263      	str	r3, [r4, #36]	; 0x24
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	40013800 	.word	0x40013800
 8004450:	200000c0 	.word	0x200000c0

08004454 <EXTI2_IRQHandler>:
  return 0;
}



extern "C" void EXTI2_IRQHandler(void){
 8004454:	b508      	push	{r3, lr}
  if(EXTI_GetITStatus(EXTI_Line2) != RESET){
 8004456:	2004      	movs	r0, #4
 8004458:	f7fd f9e4 	bl	8001824 <EXTI_GetITStatus>
 800445c:	b140      	cbz	r0, 8004470 <EXTI2_IRQHandler+0x1c>
    shuttingDown = true;
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <EXTI2_IRQHandler+0x20>)
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    EXTI_ClearITPendingBit(EXTI_Line2);
 8004466:	2004      	movs	r0, #4
  }
}
 8004468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


extern "C" void EXTI2_IRQHandler(void){
  if(EXTI_GetITStatus(EXTI_Line2) != RESET){
    shuttingDown = true;
    EXTI_ClearITPendingBit(EXTI_Line2);
 800446c:	f7fd b9e8 	b.w	8001840 <EXTI_ClearITPendingBit>
 8004470:	bd08      	pop	{r3, pc}
 8004472:	bf00      	nop
 8004474:	200000c0 	.word	0x200000c0

08004478 <assert_failed(unsigned char*, unsigned long)>:
  }
}



void assert_failed(uint8_t* file, uint32_t line){
 8004478:	b500      	push	{lr}
 800447a:	b0a7      	sub	sp, #156	; 0x9c
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  char str[150];

  sprintf(str, "Wrong parameters value: file %s on line %u\r\n", file, (unsigned int)line);
 800447c:	460b      	mov	r3, r1
 800447e:	4602      	mov	r2, r0
 8004480:	4908      	ldr	r1, [pc, #32]	; (80044a4 <assert_failed(unsigned char*, unsigned long)+0x2c>)
 8004482:	4668      	mov	r0, sp
 8004484:	f00f f9a0 	bl	80137c8 <siprintf>
  nh.logerror(str);
 8004488:	4669      	mov	r1, sp
 800448a:	4807      	ldr	r0, [pc, #28]	; (80044a8 <assert_failed(unsigned char*, unsigned long)+0x30>)
 800448c:	f00b fbbe 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  while (1){
    debug_toggle();
 8004490:	f7fb ffd6 	bl	8000440 <debug_toggle>
    delay(100);
 8004494:	2064      	movs	r0, #100	; 0x64
 8004496:	f7fc f943 	bl	8000720 <delay>
    nh.spinOnce();
 800449a:	4803      	ldr	r0, [pc, #12]	; (80044a8 <assert_failed(unsigned char*, unsigned long)+0x30>)
 800449c:	f00b fcdc 	bl	800fe58 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>
 80044a0:	e7f6      	b.n	8004490 <assert_failed(unsigned char*, unsigned long)+0x18>
 80044a2:	bf00      	nop
 80044a4:	08015c4c 	.word	0x08015c4c
 80044a8:	200004ec 	.word	0x200004ec

080044ac <motor::createMotor(motorSettings*)>:
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 80044ac:	b538      	push	{r3, r4, r5, lr}
    switch (settings->m_motorType) {
 80044ae:	6803      	ldr	r3, [r0, #0]
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 80044b0:	4605      	mov	r5, r0
    switch (settings->m_motorType) {
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d002      	beq.n	80044bc <motor::createMotor(motorSettings*)+0x10>
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d00e      	beq.n	80044d8 <motor::createMotor(motorSettings*)+0x2c>
 80044ba:	e015      	b.n	80044e8 <motor::createMotor(motorSettings*)+0x3c>
	    case MOTOR_TYPE_SERVO:
	    	settings->m_ServoLimitMax = 6800;
 80044bc:	f641 2390 	movw	r3, #6800	; 0x1a90
 80044c0:	6103      	str	r3, [r0, #16]
  			settings->m_ServoLimitMin = 2000;
 80044c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80044c6:	6143      	str	r3, [r0, #20]
	        return new servo(settings);
 80044c8:	200c      	movs	r0, #12
 80044ca:	f00c ffb5 	bl	8011438 <operator new(unsigned int)>
 80044ce:	4629      	mov	r1, r5
 80044d0:	4604      	mov	r4, r0
 80044d2:	f000 f92f 	bl	8004734 <servo::servo(motorSettings*)>
 80044d6:	e009      	b.n	80044ec <motor::createMotor(motorSettings*)+0x40>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);
 80044d8:	202c      	movs	r0, #44	; 0x2c
 80044da:	f00c ffad 	bl	8011438 <operator new(unsigned int)>
 80044de:	4629      	mov	r1, r5
 80044e0:	4604      	mov	r4, r0
 80044e2:	f000 fa01 	bl	80048e8 <DCMotor::DCMotor(motorSettings*)>
 80044e6:	e001      	b.n	80044ec <motor::createMotor(motorSettings*)+0x40>

	    default:
	        return 0;
 80044e8:	2000      	movs	r0, #0
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
motor *motor::createMotor(motorSettings *settings){
    switch (settings->m_motorType) {
	    case MOTOR_TYPE_SERVO:
	    	settings->m_ServoLimitMax = 6800;
  			settings->m_ServoLimitMin = 2000;
	        return new servo(settings);
 80044ec:	4620      	mov	r0, r4
 80044ee:	bd38      	pop	{r3, r4, r5, pc}
 80044f0:	e7ff      	b.n	80044f2 <motor::createMotor(motorSettings*)+0x46>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);
 80044f2:	4620      	mov	r0, r4
 80044f4:	f00c fc84 	bl	8010e00 <operator delete(void*)>
 80044f8:	f00d f816 	bl	8011528 <__cxa_end_cleanup>

080044fc <motor::motor(motorSettings*)>:
	        return 0;
    }
}


motor::motor(motorSettings *settings){
 80044fc:	4a01      	ldr	r2, [pc, #4]	; (8004504 <motor::motor(motorSettings*)+0x8>)
    m_settings = settings;
 80044fe:	6041      	str	r1, [r0, #4]
	        return 0;
    }
}


motor::motor(motorSettings *settings){
 8004500:	6002      	str	r2, [r0, #0]
    m_settings = settings;
}
 8004502:	4770      	bx	lr
 8004504:	080148d4 	.word	0x080148d4

08004508 <motor::~motor()>:

motor::~motor()
{
 8004508:	4770      	bx	lr

0800450a <motor::~motor()>:

motor::motor(motorSettings *settings){
    m_settings = settings;
}

motor::~motor()
 800450a:	b510      	push	{r4, lr}
 800450c:	4604      	mov	r4, r0
{
 800450e:	f00c fc77 	bl	8010e00 <operator delete(void*)>
 8004512:	4620      	mov	r0, r4
 8004514:	bd10      	pop	{r4, pc}
 8004516:	bf00      	nop

08004518 <servo::setReference(float)>:
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	return true;
}

void servo::setReference(float setPoint){
 8004518:	4770      	bx	lr

0800451a <servo::getReference()>:
	//pos = (int)setPoint > 90? 90 : ( (int)setPoint < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : (int)setPoint);
}

float servo::getReference(){
 800451a:	b508      	push	{r3, lr}
	return (float)pos;
 800451c:	6880      	ldr	r0, [r0, #8]
 800451e:	f001 f969 	bl	80057f4 <__aeabi_i2f>
}
 8004522:	bd08      	pop	{r3, pc}

08004524 <servo::motorName()>:
const char* servo::motorName(){
	return m_settings->m_motorName;
 8004524:	6843      	ldr	r3, [r0, #4]
}
 8004526:	6858      	ldr	r0, [r3, #4]
 8004528:	4770      	bx	lr

0800452a <servo::update(float, bool)>:

std::tuple<float, float, int, int> servo::update(float dt, bool connected){
	float LPF_Beta = 0.06;
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;
 800452a:	684a      	ldr	r2, [r1, #4]
}
const char* servo::motorName(){
	return m_settings->m_motorName;
}

std::tuple<float, float, int, int> servo::update(float dt, bool connected){
 800452c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	float LPF_Beta = 0.06;
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;
 8004530:	6957      	ldr	r7, [r2, #20]
}
const char* servo::motorName(){
	return m_settings->m_motorName;
}

std::tuple<float, float, int, int> servo::update(float dt, bool connected){
 8004532:	4605      	mov	r5, r0
	float LPF_Beta = 0.06;
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;
 8004534:	6910      	ldr	r0, [r2, #16]
 8004536:	24b4      	movs	r4, #180	; 0xb4
 8004538:	1bc6      	subs	r6, r0, r7
 800453a:	6888      	ldr	r0, [r1, #8]
 800453c:	fb00 f106 	mul.w	r1, r0, r6
 8004540:	fb91 f1f4 	sdiv	r1, r1, r4
 8004544:	19cc      	adds	r4, r1, r7
	int curr, newVal;
	switch(m_settings->m_TimerChannel){
 8004546:	68d1      	ldr	r1, [r2, #12]
 8004548:	3901      	subs	r1, #1
 800454a:	2903      	cmp	r1, #3
 800454c:	d860      	bhi.n	8004610 <servo::update(float, bool)+0xe6>
 800454e:	e8df f001 	tbb	[pc, r1]
 8004552:	1902      	.short	0x1902
 8004554:	4730      	.short	0x4730
		case 1:
			curr = (m_settings->m_Timer)->CCR1;
 8004556:	6897      	ldr	r7, [r2, #8]
 8004558:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
 800455a:	b2b6      	uxth	r6, r6
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 800455c:	4630      	mov	r0, r6
 800455e:	f001 f949 	bl	80057f4 <__aeabi_i2f>
 8004562:	4680      	mov	r8, r0
 8004564:	1b30      	subs	r0, r6, r4
 8004566:	f001 f945 	bl	80057f4 <__aeabi_i2f>
 800456a:	492e      	ldr	r1, [pc, #184]	; (8004624 <servo::update(float, bool)+0xfa>)
 800456c:	f001 f996 	bl	800589c <__aeabi_fmul>
 8004570:	4601      	mov	r1, r0
 8004572:	4640      	mov	r0, r8
 8004574:	f001 f888 	bl	8005688 <__aeabi_fsub>
 8004578:	f001 fb56 	bl	8005c28 <__aeabi_f2iz>
			(m_settings->m_Timer)->CCR1 = newVal;
 800457c:	b282      	uxth	r2, r0
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;
	int curr, newVal;
	switch(m_settings->m_TimerChannel){
		case 1:
			curr = (m_settings->m_Timer)->CCR1;
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 800457e:	4603      	mov	r3, r0
			(m_settings->m_Timer)->CCR1 = newVal;
 8004580:	86ba      	strh	r2, [r7, #52]	; 0x34
			break;
 8004582:	e045      	b.n	8004610 <servo::update(float, bool)+0xe6>
		case 2:
			curr = (m_settings->m_Timer)->CCR2;
 8004584:	6897      	ldr	r7, [r2, #8]
 8004586:	8f3e      	ldrh	r6, [r7, #56]	; 0x38
 8004588:	b2b6      	uxth	r6, r6
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 800458a:	4630      	mov	r0, r6
 800458c:	f001 f932 	bl	80057f4 <__aeabi_i2f>
 8004590:	4680      	mov	r8, r0
 8004592:	1b30      	subs	r0, r6, r4
 8004594:	f001 f92e 	bl	80057f4 <__aeabi_i2f>
 8004598:	4922      	ldr	r1, [pc, #136]	; (8004624 <servo::update(float, bool)+0xfa>)
 800459a:	f001 f97f 	bl	800589c <__aeabi_fmul>
 800459e:	4601      	mov	r1, r0
 80045a0:	4640      	mov	r0, r8
 80045a2:	f001 f871 	bl	8005688 <__aeabi_fsub>
 80045a6:	f001 fb3f 	bl	8005c28 <__aeabi_f2iz>
			(m_settings->m_Timer)->CCR2 = newVal;
 80045aa:	b282      	uxth	r2, r0
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
			(m_settings->m_Timer)->CCR1 = newVal;
			break;
		case 2:
			curr = (m_settings->m_Timer)->CCR2;
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 80045ac:	4603      	mov	r3, r0
			(m_settings->m_Timer)->CCR2 = newVal;
 80045ae:	873a      	strh	r2, [r7, #56]	; 0x38
			break;
 80045b0:	e02e      	b.n	8004610 <servo::update(float, bool)+0xe6>
		case 3:
			curr = (m_settings->m_Timer)->CCR3;
 80045b2:	6897      	ldr	r7, [r2, #8]
 80045b4:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 80045b6:	b2b6      	uxth	r6, r6
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 80045b8:	4630      	mov	r0, r6
 80045ba:	f001 f91b 	bl	80057f4 <__aeabi_i2f>
 80045be:	4680      	mov	r8, r0
 80045c0:	1b30      	subs	r0, r6, r4
 80045c2:	f001 f917 	bl	80057f4 <__aeabi_i2f>
 80045c6:	4917      	ldr	r1, [pc, #92]	; (8004624 <servo::update(float, bool)+0xfa>)
 80045c8:	f001 f968 	bl	800589c <__aeabi_fmul>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4640      	mov	r0, r8
 80045d0:	f001 f85a 	bl	8005688 <__aeabi_fsub>
 80045d4:	f001 fb28 	bl	8005c28 <__aeabi_f2iz>
			(m_settings->m_Timer)->CCR3 = newVal;
 80045d8:	b282      	uxth	r2, r0
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
			(m_settings->m_Timer)->CCR2 = newVal;
			break;
		case 3:
			curr = (m_settings->m_Timer)->CCR3;
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 80045da:	4603      	mov	r3, r0
			(m_settings->m_Timer)->CCR3 = newVal;
 80045dc:	87ba      	strh	r2, [r7, #60]	; 0x3c
			break;
 80045de:	e017      	b.n	8004610 <servo::update(float, bool)+0xe6>
		case 4:
			curr = (m_settings->m_Timer)->CCR4;
 80045e0:	6897      	ldr	r7, [r2, #8]
 80045e2:	f8b7 6040 	ldrh.w	r6, [r7, #64]	; 0x40
 80045e6:	b2b6      	uxth	r6, r6
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 80045e8:	4630      	mov	r0, r6
 80045ea:	f001 f903 	bl	80057f4 <__aeabi_i2f>
 80045ee:	4680      	mov	r8, r0
 80045f0:	1b30      	subs	r0, r6, r4
 80045f2:	f001 f8ff 	bl	80057f4 <__aeabi_i2f>
 80045f6:	490b      	ldr	r1, [pc, #44]	; (8004624 <servo::update(float, bool)+0xfa>)
 80045f8:	f001 f950 	bl	800589c <__aeabi_fmul>
 80045fc:	4601      	mov	r1, r0
 80045fe:	4640      	mov	r0, r8
 8004600:	f001 f842 	bl	8005688 <__aeabi_fsub>
 8004604:	f001 fb10 	bl	8005c28 <__aeabi_f2iz>
 8004608:	4603      	mov	r3, r0
			(m_settings->m_Timer)->CCR4 = newVal;
 800460a:	b282      	uxth	r2, r0
 800460c:	f8a7 2040 	strh.w	r2, [r7, #64]	; 0x40
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004610:	2200      	movs	r2, #0
 8004612:	e885 000c 	stmia.w	r5, {r2, r3}
 8004616:	2300      	movs	r3, #0
 8004618:	60ab      	str	r3, [r5, #8]
 800461a:	60eb      	str	r3, [r5, #12]
			break;
	}
	return std::make_tuple(0, 0.0, newVal, 0);
 800461c:	4628      	mov	r0, r5
 800461e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004622:	bf00      	nop
 8004624:	3d75c28f 	.word	0x3d75c28f

08004628 <servo::~servo()>:
servo::servo(motorSettings *settings) : motor(settings)
{

}

servo::~servo()
 8004628:	b510      	push	{r4, lr}
 800462a:	4604      	mov	r4, r0
 800462c:	4b02      	ldr	r3, [pc, #8]	; (8004638 <servo::~servo()+0x10>)
 800462e:	6003      	str	r3, [r0, #0]
 8004630:	f7ff ff6a 	bl	8004508 <motor::~motor()>
{
}
 8004634:	4620      	mov	r0, r4
 8004636:	bd10      	pop	{r4, pc}
 8004638:	0801490c 	.word	0x0801490c

0800463c <servo::~servo()>:
servo::servo(motorSettings *settings) : motor(settings)
{

}

servo::~servo()
 800463c:	b510      	push	{r4, lr}
 800463e:	4604      	mov	r4, r0
{
}
 8004640:	f7ff fff2 	bl	8004628 <servo::~servo()>
 8004644:	4620      	mov	r0, r4
 8004646:	f00c fbdb 	bl	8010e00 <operator delete(void*)>
 800464a:	4620      	mov	r0, r4
 800464c:	bd10      	pop	{r4, pc}

0800464e <servo::motorInit()>:

bool servo::motorInit()
{
 800464e:	b530      	push	{r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 8004650:	6843      	ldr	r3, [r0, #4]
servo::~servo()
{
}

bool servo::motorInit()
{
 8004652:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 8004654:	699a      	ldr	r2, [r3, #24]
servo::~servo()
{
}

bool servo::motorInit()
{
 8004656:	4604      	mov	r4, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 8004658:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800465c:	2218      	movs	r2, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 800465e:	69d8      	ldr	r0, [r3, #28]
{

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004660:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 8004664:	4669      	mov	r1, sp

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004666:	2203      	movs	r2, #3
 8004668:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 800466c:	f7fd fddf 	bl	800222e <GPIO_Init>




	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
 8004670:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8004674:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
 8004678:	2317      	movs	r3, #23
 800467a:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 800467e:	6863      	ldr	r3, [r4, #4]


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8004680:	2500      	movs	r5, #0
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 8004682:	6898      	ldr	r0, [r3, #8]
 8004684:	a901      	add	r1, sp, #4


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8004686:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800468a:	f8ad 5006 	strh.w	r5, [sp, #6]

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 800468e:	f7fe ff35 	bl	80034fc <TIM_TimeBaseInit>


	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 8004692:	a804      	add	r0, sp, #16
 8004694:	f7ff f894 	bl	80037c0 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8004698:	2360      	movs	r3, #96	; 0x60
 800469a:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800469e:	2301      	movs	r3, #1
 80046a0:	f8ad 3012 	strh.w	r3, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 80046a4:	6863      	ldr	r3, [r4, #4]
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80046a6:	f8ad 5016 	strh.w	r5, [sp, #22]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 80046aa:	68da      	ldr	r2, [r3, #12]

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80046ac:	f8ad 5018 	strh.w	r5, [sp, #24]

	switch(m_settings->m_TimerChannel){
 80046b0:	3a01      	subs	r2, #1
 80046b2:	2a03      	cmp	r2, #3
 80046b4:	d83b      	bhi.n	800472e <servo::motorInit()+0xe0>
 80046b6:	e8df f002 	tbb	[pc, r2]
 80046ba:	0c02      	.short	0x0c02
 80046bc:	2016      	.short	0x2016
		case 1:
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80046be:	a904      	add	r1, sp, #16
 80046c0:	6898      	ldr	r0, [r3, #8]
 80046c2:	f7fe ff65 	bl	8003590 <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	2108      	movs	r1, #8
 80046ca:	6898      	ldr	r0, [r3, #8]
 80046cc:	f7ff f990 	bl	80039f0 <TIM_OC1PreloadConfig>
 80046d0:	e01c      	b.n	800470c <servo::motorInit()+0xbe>
			break;
		case 2:
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80046d2:	a904      	add	r1, sp, #16
 80046d4:	6898      	ldr	r0, [r3, #8]
 80046d6:	f7fe ff9f 	bl	8003618 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80046da:	6863      	ldr	r3, [r4, #4]
 80046dc:	2108      	movs	r1, #8
 80046de:	6898      	ldr	r0, [r3, #8]
 80046e0:	f7ff f98e 	bl	8003a00 <TIM_OC2PreloadConfig>
 80046e4:	e012      	b.n	800470c <servo::motorInit()+0xbe>
			break;
		case 3:
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80046e6:	a904      	add	r1, sp, #16
 80046e8:	6898      	ldr	r0, [r3, #8]
 80046ea:	f7fe ffd9 	bl	80036a0 <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80046ee:	6863      	ldr	r3, [r4, #4]
 80046f0:	2108      	movs	r1, #8
 80046f2:	6898      	ldr	r0, [r3, #8]
 80046f4:	f7ff f98e 	bl	8003a14 <TIM_OC3PreloadConfig>
 80046f8:	e008      	b.n	800470c <servo::motorInit()+0xbe>
			break;
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80046fa:	6898      	ldr	r0, [r3, #8]
 80046fc:	a904      	add	r1, sp, #16
 80046fe:	f7ff f811 	bl	8003724 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004702:	6863      	ldr	r3, [r4, #4]
 8004704:	2108      	movs	r1, #8
 8004706:	6898      	ldr	r0, [r3, #8]
 8004708:	f7ff f98c 	bl	8003a24 <TIM_OC4PreloadConfig>
		default:
			return false;
	}


	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	2101      	movs	r1, #1
 8004710:	6898      	ldr	r0, [r3, #8]
 8004712:	f7ff f93d 	bl	8003990 <TIM_ARRPreloadConfig>

	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	2101      	movs	r1, #1
 800471a:	6898      	ldr	r0, [r3, #8]
 800471c:	f7ff f877 	bl	800380e <TIM_CtrlPWMOutputs>

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 8004720:	6863      	ldr	r3, [r4, #4]
 8004722:	2101      	movs	r1, #1
 8004724:	6898      	ldr	r0, [r3, #8]
 8004726:	f7ff f866 	bl	80037f6 <TIM_Cmd>

	return true;
 800472a:	2001      	movs	r0, #1
 800472c:	e000      	b.n	8004730 <servo::motorInit()+0xe2>
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
			break;
		default:
			return false;
 800472e:	2000      	movs	r0, #0

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	return true;
}
 8004730:	b009      	add	sp, #36	; 0x24
 8004732:	bd30      	pop	{r4, r5, pc}

08004734 <servo::servo(motorSettings*)>:

#include "servo.h"
#include "motorSettings.h"


servo::servo(motorSettings *settings) : motor(settings)
 8004734:	b510      	push	{r4, lr}
 8004736:	4604      	mov	r4, r0
 8004738:	f7ff fee0 	bl	80044fc <motor::motor(motorSettings*)>
 800473c:	4b01      	ldr	r3, [pc, #4]	; (8004744 <servo::servo(motorSettings*)+0x10>)
{

}
 800473e:	4620      	mov	r0, r4

#include "servo.h"
#include "motorSettings.h"


servo::servo(motorSettings *settings) : motor(settings)
 8004740:	6023      	str	r3, [r4, #0]
{

}
 8004742:	bd10      	pop	{r4, pc}
 8004744:	0801490c 	.word	0x0801490c

08004748 <DCMotor::setReference(float)>:

	return true;
}

void DCMotor::setReference(float setPoint){
	speed = setPoint;
 8004748:	6081      	str	r1, [r0, #8]
 800474a:	4770      	bx	lr

0800474c <DCMotor::getReference()>:
	return true;
}

float DCMotor::getReference(){
	return speed;
}
 800474c:	6880      	ldr	r0, [r0, #8]
 800474e:	4770      	bx	lr

08004750 <DCMotor::motorName()>:

const char* DCMotor::motorName(){
	return m_settings->m_motorName;
 8004750:	6843      	ldr	r3, [r0, #4]
}
 8004752:	6858      	ldr	r0, [r3, #4]
 8004754:	4770      	bx	lr

08004756 <DCMotor::~DCMotor()>:
DCMotor::DCMotor(motorSettings *settings) : motor(settings)
{

}

DCMotor::~DCMotor()
 8004756:	b510      	push	{r4, lr}
 8004758:	4604      	mov	r4, r0
 800475a:	4b03      	ldr	r3, [pc, #12]	; (8004768 <DCMotor::~DCMotor()+0x12>)
 800475c:	6003      	str	r3, [r0, #0]
 800475e:	f7ff fed3 	bl	8004508 <motor::~motor()>
{
}
 8004762:	4620      	mov	r0, r4
 8004764:	bd10      	pop	{r4, pc}
 8004766:	bf00      	nop
 8004768:	08014948 	.word	0x08014948

0800476c <DCMotor::~DCMotor()>:
DCMotor::DCMotor(motorSettings *settings) : motor(settings)
{

}

DCMotor::~DCMotor()
 800476c:	b510      	push	{r4, lr}
 800476e:	4604      	mov	r4, r0
{
}
 8004770:	f7ff fff1 	bl	8004756 <DCMotor::~DCMotor()>
 8004774:	4620      	mov	r0, r4
 8004776:	f00c fb43 	bl	8010e00 <operator delete(void*)>
 800477a:	4620      	mov	r0, r4
 800477c:	bd10      	pop	{r4, pc}

0800477e <DCMotor::motorInit()>:

bool DCMotor::motorInit()
{
 800477e:	b570      	push	{r4, r5, r6, lr}
 8004780:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 8004782:	6843      	ldr	r3, [r0, #4]
DCMotor::~DCMotor()
{
}

bool DCMotor::motorInit()
{
 8004784:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 8004786:	6a1a      	ldr	r2, [r3, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004788:	2503      	movs	r5, #3
bool DCMotor::motorInit()
{
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800478a:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 800478c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800478e:	4669      	mov	r1, sp

bool DCMotor::motorInit()
{
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 8004790:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004794:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004798:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 800479c:	f7fd fd47 	bl	800222e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 80047a0:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 80047a2:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 80047a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 80047a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 80047a8:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80047ac:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80047b0:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 80047b4:	f7fd fd3b 	bl	800222e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 80047b8:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80047ba:	2614      	movs	r6, #20
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 80047bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 80047be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80047c0:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 80047c2:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80047c6:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80047ca:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 80047ce:	f7fd fd2e 	bl	800222e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 80047d2:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 80047d4:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 80047d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 80047d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 80047da:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80047de:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80047e2:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 80047e6:	f7fd fd22 	bl	800222e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 80047ea:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 80047ec:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 80047ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 80047f0:	6c58      	ldr	r0, [r3, #68]	; 0x44
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 80047f2:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80047f6:	2218      	movs	r2, #24
 80047f8:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80047fc:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 8004800:	f7fd fd15 	bl	800222e <GPIO_Init>

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 8004804:	6863      	ldr	r3, [r4, #4]
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 8004806:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 8004808:	6898      	ldr	r0, [r3, #8]
 800480a:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <DCMotor::motorInit()+0x166>)
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 800480c:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 800480e:	4298      	cmp	r0, r3
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 8004810:	bf0c      	ite	eq
 8004812:	f247 037e 	movweq	r3, #28798	; 0x707e
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
 8004816:	f643 033f 	movwne	r3, #14399	; 0x383f
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 800481a:	f8ad 5004 	strh.w	r5, [sp, #4]

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
 800481e:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 8004822:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8004826:	f8ad 5006 	strh.w	r5, [sp, #6]

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 800482a:	f7fe fe67 	bl	80034fc <TIM_TimeBaseInit>

	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure);
 800482e:	a804      	add	r0, sp, #16
 8004830:	f7fe ffc6 	bl	80037c0 <TIM_OCStructInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8004834:	2360      	movs	r3, #96	; 0x60
 8004836:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800483a:	2301      	movs	r3, #1
 800483c:	f8ad 3012 	strh.w	r3, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = 0x00;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 8004840:	6863      	ldr	r3, [r4, #4]
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x00;
 8004842:	f8ad 5016 	strh.w	r5, [sp, #22]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 8004846:	68da      	ldr	r2, [r3, #12]
	TIM_OCStructInit(&TIM_OCInitStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x00;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8004848:	f8ad 5018 	strh.w	r5, [sp, #24]

	switch(m_settings->m_TimerChannel){
 800484c:	3a01      	subs	r2, #1
 800484e:	2a03      	cmp	r2, #3
 8004850:	d844      	bhi.n	80048dc <DCMotor::motorInit()+0x15e>
 8004852:	e8df f002 	tbb	[pc, r2]
 8004856:	0c02      	.short	0x0c02
 8004858:	2016      	.short	0x2016
		case 1:
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 800485a:	a904      	add	r1, sp, #16
 800485c:	6898      	ldr	r0, [r3, #8]
 800485e:	f7fe fe97 	bl	8003590 <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004862:	6863      	ldr	r3, [r4, #4]
 8004864:	2108      	movs	r1, #8
 8004866:	6898      	ldr	r0, [r3, #8]
 8004868:	f7ff f8c2 	bl	80039f0 <TIM_OC1PreloadConfig>
 800486c:	e01c      	b.n	80048a8 <DCMotor::motorInit()+0x12a>
			break;
		case 2:
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 800486e:	a904      	add	r1, sp, #16
 8004870:	6898      	ldr	r0, [r3, #8]
 8004872:	f7fe fed1 	bl	8003618 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004876:	6863      	ldr	r3, [r4, #4]
 8004878:	2108      	movs	r1, #8
 800487a:	6898      	ldr	r0, [r3, #8]
 800487c:	f7ff f8c0 	bl	8003a00 <TIM_OC2PreloadConfig>
 8004880:	e012      	b.n	80048a8 <DCMotor::motorInit()+0x12a>
			break;
		case 3:
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004882:	a904      	add	r1, sp, #16
 8004884:	6898      	ldr	r0, [r3, #8]
 8004886:	f7fe ff0b 	bl	80036a0 <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	2108      	movs	r1, #8
 800488e:	6898      	ldr	r0, [r3, #8]
 8004890:	f7ff f8c0 	bl	8003a14 <TIM_OC3PreloadConfig>
 8004894:	e008      	b.n	80048a8 <DCMotor::motorInit()+0x12a>
			break;
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004896:	6898      	ldr	r0, [r3, #8]
 8004898:	a904      	add	r1, sp, #16
 800489a:	f7fe ff43 	bl	8003724 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800489e:	6863      	ldr	r3, [r4, #4]
 80048a0:	2108      	movs	r1, #8
 80048a2:	6898      	ldr	r0, [r3, #8]
 80048a4:	f7ff f8be 	bl	8003a24 <TIM_OC4PreloadConfig>
			break;
		default:
			return false;
	}

	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 80048a8:	6863      	ldr	r3, [r4, #4]
 80048aa:	2101      	movs	r1, #1
 80048ac:	6898      	ldr	r0, [r3, #8]
 80048ae:	f7ff f86f 	bl	8003990 <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 80048b2:	6863      	ldr	r3, [r4, #4]
 80048b4:	2101      	movs	r1, #1
 80048b6:	6898      	ldr	r0, [r3, #8]
 80048b8:	f7fe ffa9 	bl	800380e <TIM_CtrlPWMOutputs>

	TIM_Cmd(m_settings->m_Timer, ENABLE);
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	2101      	movs	r1, #1
 80048c0:	6898      	ldr	r0, [r3, #8]
 80048c2:	f7fe ff98 	bl	80037f6 <TIM_Cmd>

	// Initialize encoder
	initEncoder(m_settings->encoderAddr);
 80048c6:	6863      	ldr	r3, [r4, #4]
	integral = 0;
	error = 0;

	wheelRadius = m_settings->wheelRadius;

	return true;
 80048c8:	2001      	movs	r0, #1
const char* DCMotor::motorName(){
	return m_settings->m_motorName;
}

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
 80048ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80048ce:	7322      	strb	r2, [r4, #12]
	initEncoder(m_settings->encoderAddr);

	integral = 0;
	error = 0;

	wheelRadius = m_settings->wheelRadius;
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	// Initialize encoder
	initEncoder(m_settings->encoderAddr);

	integral = 0;
 80048d2:	2200      	movs	r2, #0
 80048d4:	62a2      	str	r2, [r4, #40]	; 0x28
	error = 0;
 80048d6:	6262      	str	r2, [r4, #36]	; 0x24

	wheelRadius = m_settings->wheelRadius;
 80048d8:	6123      	str	r3, [r4, #16]

	return true;
 80048da:	e000      	b.n	80048de <DCMotor::motorInit()+0x160>
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
			break;
		default:
			return false;
 80048dc:	2000      	movs	r0, #0
	error = 0;

	wheelRadius = m_settings->wheelRadius;

	return true;
}
 80048de:	b008      	add	sp, #32
 80048e0:	bd70      	pop	{r4, r5, r6, pc}
 80048e2:	bf00      	nop
 80048e4:	40012c00 	.word	0x40012c00

080048e8 <DCMotor::DCMotor(motorSettings*)>:
#define PERIOD 14399
#define PRESCALER 0
#define CLOCKDIV 0


DCMotor::DCMotor(motorSettings *settings) : motor(settings)
 80048e8:	b510      	push	{r4, lr}
 80048ea:	4604      	mov	r4, r0
 80048ec:	f7ff fe06 	bl	80044fc <motor::motor(motorSettings*)>
 80048f0:	4b01      	ldr	r3, [pc, #4]	; (80048f8 <DCMotor::DCMotor(motorSettings*)+0x10>)
{

}
 80048f2:	4620      	mov	r0, r4
#define PERIOD 14399
#define PRESCALER 0
#define CLOCKDIV 0


DCMotor::DCMotor(motorSettings *settings) : motor(settings)
 80048f4:	6023      	str	r3, [r4, #0]
{

}
 80048f6:	bd10      	pop	{r4, pc}
 80048f8:	08014948 	.word	0x08014948

080048fc <DCMotor::setSpeed(int)>:
	speed = setPoint;

}

bool DCMotor::setSpeed(int s){
	if(s < -PERIOD)
 80048fc:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <DCMotor::setSpeed(int)+0xd8>)
void DCMotor::setReference(float setPoint){
	speed = setPoint;

}

bool DCMotor::setSpeed(int s){
 80048fe:	b538      	push	{r3, r4, r5, lr}
	if(s < -PERIOD)
 8004900:	4291      	cmp	r1, r2
void DCMotor::setReference(float setPoint){
	speed = setPoint;

}

bool DCMotor::setSpeed(int s){
 8004902:	4605      	mov	r5, r0
 8004904:	6843      	ldr	r3, [r0, #4]
	if(s < -PERIOD)
 8004906:	db06      	blt.n	8004916 <DCMotor::setSpeed(int)+0x1a>
 8004908:	f643 043f 	movw	r4, #14399	; 0x383f
 800490c:	428c      	cmp	r4, r1
 800490e:	bfa8      	it	ge
 8004910:	460c      	movge	r4, r1
		s = -PERIOD;

	if(s > PERIOD)
		s = PERIOD;

	if(abs(s) > 0){
 8004912:	b1f4      	cbz	r4, 8004952 <DCMotor::setSpeed(int)+0x56>
 8004914:	e000      	b.n	8004918 <DCMotor::setSpeed(int)+0x1c>

}

bool DCMotor::setSpeed(int s){
	if(s < -PERIOD)
		s = -PERIOD;
 8004916:	4614      	mov	r4, r2

	if(s > PERIOD)
		s = PERIOD;

	if(abs(s) > 0){
		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 8004918:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 800491a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800491c:	f7fd fcf3 	bl	8002306 <GPIO_SetBits>
		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 8004920:	686b      	ldr	r3, [r5, #4]
 8004922:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8004924:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004926:	f7fd fcee 	bl	8002306 <GPIO_SetBits>

		if(s > 0){
 800492a:	2c00      	cmp	r4, #0
 800492c:	dd05      	ble.n	800493a <DCMotor::setSpeed(int)+0x3e>
			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 800492e:	686b      	ldr	r3, [r5, #4]
 8004930:	8c19      	ldrh	r1, [r3, #32]
 8004932:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004934:	f7fd fce7 	bl	8002306 <GPIO_SetBits>
 8004938:	e019      	b.n	800496e <DCMotor::setSpeed(int)+0x72>
			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
		}else if(s < 0){
 800493a:	d046      	beq.n	80049ca <DCMotor::setSpeed(int)+0xce>
			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 800493c:	686b      	ldr	r3, [r5, #4]
 800493e:	8c19      	ldrh	r1, [r3, #32]
 8004940:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004942:	f7fd fce2 	bl	800230a <GPIO_ResetBits>
			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 8004946:	686b      	ldr	r3, [r5, #4]
 8004948:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800494a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800494c:	f7fd fcdb 	bl	8002306 <GPIO_SetBits>
 8004950:	e012      	b.n	8004978 <DCMotor::setSpeed(int)+0x7c>
			return false;
		}
	}else{
		s = 0;

		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 8004952:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8004954:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004956:	f7fd fcd6 	bl	8002306 <GPIO_SetBits>
		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 800495a:	686b      	ldr	r3, [r5, #4]
 800495c:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800495e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004960:	f7fd fcd1 	bl	8002306 <GPIO_SetBits>

		// Break to GND
		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 8004964:	686b      	ldr	r3, [r5, #4]
 8004966:	8c19      	ldrh	r1, [r3, #32]
 8004968:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800496a:	f7fd fcce 	bl	800230a <GPIO_ResetBits>
		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 800496e:	686b      	ldr	r3, [r5, #4]
 8004970:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8004972:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004974:	f7fd fcc9 	bl	800230a <GPIO_ResetBits>
	}
	

	if(m_settings->m_Timer == TIM1)
 8004978:	686a      	ldr	r2, [r5, #4]
 800497a:	4917      	ldr	r1, [pc, #92]	; (80049d8 <DCMotor::setSpeed(int)+0xdc>)
 800497c:	6893      	ldr	r3, [r2, #8]
		s = s * 2;

	switch(m_settings->m_TimerChannel){
 800497e:	68d2      	ldr	r2, [r2, #12]
		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
	}
	

	if(m_settings->m_Timer == TIM1)
 8004980:	428b      	cmp	r3, r1
		s = s * 2;

	switch(m_settings->m_TimerChannel){
 8004982:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
	}
	

	if(m_settings->m_Timer == TIM1)
		s = s * 2;
 8004986:	bf08      	it	eq
 8004988:	0064      	lsleq	r4, r4, #1

	switch(m_settings->m_TimerChannel){
 800498a:	2a03      	cmp	r2, #3
 800498c:	d81f      	bhi.n	80049ce <DCMotor::setSpeed(int)+0xd2>
 800498e:	e8df f002 	tbb	[pc, r2]
 8004992:	0802      	.short	0x0802
 8004994:	140e      	.short	0x140e
		case 1:
			(m_settings->m_Timer)->CCR1 = (uint32_t)abs(s);
 8004996:	2c00      	cmp	r4, #0
 8004998:	bfb8      	it	lt
 800499a:	4264      	neglt	r4, r4
 800499c:	b2a4      	uxth	r4, r4
 800499e:	869c      	strh	r4, [r3, #52]	; 0x34
 80049a0:	e011      	b.n	80049c6 <DCMotor::setSpeed(int)+0xca>
			break;
		case 2:
			(m_settings->m_Timer)->CCR2 = (uint32_t)abs(s);
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	bfb8      	it	lt
 80049a6:	4264      	neglt	r4, r4
 80049a8:	b2a4      	uxth	r4, r4
 80049aa:	871c      	strh	r4, [r3, #56]	; 0x38
 80049ac:	e00b      	b.n	80049c6 <DCMotor::setSpeed(int)+0xca>
			break;
		case 3:
			(m_settings->m_Timer)->CCR3 = (uint32_t)abs(s);
 80049ae:	2c00      	cmp	r4, #0
 80049b0:	bfb8      	it	lt
 80049b2:	4264      	neglt	r4, r4
 80049b4:	b2a4      	uxth	r4, r4
 80049b6:	879c      	strh	r4, [r3, #60]	; 0x3c
 80049b8:	e005      	b.n	80049c6 <DCMotor::setSpeed(int)+0xca>
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
 80049ba:	2c00      	cmp	r4, #0
 80049bc:	bfb8      	it	lt
 80049be:	4264      	neglt	r4, r4
 80049c0:	b2a4      	uxth	r4, r4
 80049c2:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
			break;
		default:
			return false;
	}

	return true;
 80049c6:	2001      	movs	r0, #1
		case 3:
			(m_settings->m_Timer)->CCR3 = (uint32_t)abs(s);
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
			break;
 80049c8:	bd38      	pop	{r3, r4, r5, pc}
			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
		}else if(s < 0){
			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
		}else{
			return false;
 80049ca:	4620      	mov	r0, r4
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
			break;
		default:
			return false;
 80049ce:	2000      	movs	r0, #0
	}

	return true;
}
 80049d0:	bd38      	pop	{r3, r4, r5, pc}
 80049d2:	bf00      	nop
 80049d4:	ffffc7c1 	.word	0xffffc7c1
 80049d8:	40012c00 	.word	0x40012c00

080049dc <DCMotor::initEncoder(unsigned short)>:
const char* DCMotor::motorName(){
	return m_settings->m_motorName;
}

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
 80049dc:	7301      	strb	r1, [r0, #12]
 80049de:	4770      	bx	lr

080049e0 <DCMotor::readEncoder()>:
}

std::tuple<int32_t, uint8_t, uint16_t> DCMotor::readEncoder(){
 80049e0:	b570      	push	{r4, r5, r6, lr}
	NumberOfByteToReceive = RXBUFFERSIZE;
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <DCMotor::readEncoder()+0x78>)
 80049e4:	2207      	movs	r2, #7
    Rx_Idx = 0x00;
 80049e6:	4d1d      	ldr	r5, [pc, #116]	; (8004a5c <DCMotor::readEncoder()+0x7c>)
void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
}

std::tuple<int32_t, uint8_t, uint16_t> DCMotor::readEncoder(){
	NumberOfByteToReceive = RXBUFFERSIZE;
 80049e8:	701a      	strb	r2, [r3, #0]
    Rx_Idx = 0x00;
 80049ea:	2300      	movs	r3, #0
    int32_t ret = -1;
    uint16_t busyCount = 0;

    slaveAddress = encAddr;
 80049ec:	7b0a      	ldrb	r2, [r1, #12]
	encAddr = addr;
}

std::tuple<int32_t, uint8_t, uint16_t> DCMotor::readEncoder(){
	NumberOfByteToReceive = RXBUFFERSIZE;
    Rx_Idx = 0x00;
 80049ee:	702b      	strb	r3, [r5, #0]
    int32_t ret = -1;
    uint16_t busyCount = 0;

    slaveAddress = encAddr;
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <DCMotor::readEncoder()+0x80>)
    
    I2C_ITConfig(I2C1, I2C_IT_EVT , ENABLE);
 80049f2:	f44f 7100 	mov.w	r1, #512	; 0x200
	NumberOfByteToReceive = RXBUFFERSIZE;
    Rx_Idx = 0x00;
    int32_t ret = -1;
    uint16_t busyCount = 0;

    slaveAddress = encAddr;
 80049f6:	701a      	strb	r2, [r3, #0]

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
}

std::tuple<int32_t, uint8_t, uint16_t> DCMotor::readEncoder(){
 80049f8:	4604      	mov	r4, r0
    int32_t ret = -1;
    uint16_t busyCount = 0;

    slaveAddress = encAddr;
    
    I2C_ITConfig(I2C1, I2C_IT_EVT , ENABLE);
 80049fa:	2201      	movs	r2, #1
 80049fc:	4819      	ldr	r0, [pc, #100]	; (8004a64 <DCMotor::readEncoder()+0x84>)
 80049fe:	f7fd fdee 	bl	80025de <I2C_ITConfig>
    I2C_AcknowledgeConfig(I2C1, ENABLE);
 8004a02:	2101      	movs	r1, #1
 8004a04:	4817      	ldr	r0, [pc, #92]	; (8004a64 <DCMotor::readEncoder()+0x84>)
 8004a06:	f7fd fdbd 	bl	8002584 <I2C_AcknowledgeConfig>
    I2C_GenerateSTART(I2C1, ENABLE);
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	4815      	ldr	r0, [pc, #84]	; (8004a64 <DCMotor::readEncoder()+0x84>)
 8004a0e:	f7fd fda1 	bl	8002554 <I2C_GenerateSTART>

    // TODO: Implement actual error handling on timeout and retry count.. At the very least throw an error message!
    uint32_t start = micros();
 8004a12:	f7fb fea1 	bl	8000758 <micros>
 8004a16:	4606      	mov	r6, r0
    while ((Rx_Idx < RXBUFFERSIZE)){
 8004a18:	782b      	ldrb	r3, [r5, #0]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d809      	bhi.n	8004a32 <DCMotor::readEncoder()+0x52>
    	if((micros() - start) >= (int32_t)2000){
 8004a1e:	f7fb fe9b 	bl	8000758 <micros>
 8004a22:	1b80      	subs	r0, r0, r6
 8004a24:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004a28:	d3f6      	bcc.n	8004a18 <DCMotor::readEncoder()+0x38>
    		ret = 0;
    		busyCount = 65535;
 8004a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e00b      	b.n	8004a4a <DCMotor::readEncoder()+0x6a>
    		break;
    	}
    }
    if(ret == -1){
    	ret = ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
 8004a32:	480d      	ldr	r0, [pc, #52]	; (8004a68 <DCMotor::readEncoder()+0x88>)
 8004a34:	7882      	ldrb	r2, [r0, #2]
 8004a36:	7843      	ldrb	r3, [r0, #1]
 8004a38:	7805      	ldrb	r5, [r0, #0]
 8004a3a:	0211      	lsls	r1, r2, #8
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	78c2      	ldrb	r2, [r0, #3]
 8004a40:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004a44:	4313      	orrs	r3, r2
 8004a46:	430b      	orrs	r3, r1
    	busyCount = (uint16_t)((RxBuffer[2] << 8) | RxBuffer[3]);
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	8022      	strh	r2, [r4, #0]
 8004a4c:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <DCMotor::readEncoder()+0x88>)
    }



    return std::make_tuple(ret, RxBuffer[4], busyCount);
}
 8004a4e:	4620      	mov	r0, r4
 8004a50:	7912      	ldrb	r2, [r2, #4]
 8004a52:	6063      	str	r3, [r4, #4]
 8004a54:	70a2      	strb	r2, [r4, #2]
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	20000cd9 	.word	0x20000cd9
 8004a5c:	20000ce2 	.word	0x20000ce2
 8004a60:	20000ce1 	.word	0x20000ce1
 8004a64:	40005400 	.word	0x40005400
 8004a68:	20000cda 	.word	0x20000cda

08004a6c <DCMotor::updateRegulator(float, float)>:

float DCMotor::updateRegulator(float enc, float dt){
 8004a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	4604      	mov	r4, r0
 8004a72:	4690      	mov	r8, r2
	float error_new = speed-enc;
 8004a74:	6880      	ldr	r0, [r0, #8]
 8004a76:	f000 fe07 	bl	8005688 <__aeabi_fsub>
	
	integral += error_new*dt;
 8004a7a:	4641      	mov	r1, r8

    return std::make_tuple(ret, RxBuffer[4], busyCount);
}

float DCMotor::updateRegulator(float enc, float dt){
	float error_new = speed-enc;
 8004a7c:	4607      	mov	r7, r0
	
	integral += error_new*dt;
 8004a7e:	f000 ff0d 	bl	800589c <__aeabi_fmul>
 8004a82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004a84:	f000 fe02 	bl	800568c <__addsf3>
	
	if (integral > m_settings->integralSaturation){
 8004a88:	6866      	ldr	r6, [r4, #4]
}

float DCMotor::updateRegulator(float enc, float dt){
	float error_new = speed-enc;
	
	integral += error_new*dt;
 8004a8a:	62a0      	str	r0, [r4, #40]	; 0x28
	
	if (integral > m_settings->integralSaturation){
 8004a8c:	6df5      	ldr	r5, [r6, #92]	; 0x5c
}

float DCMotor::updateRegulator(float enc, float dt){
	float error_new = speed-enc;
	
	integral += error_new*dt;
 8004a8e:	4681      	mov	r9, r0
	
	if (integral > m_settings->integralSaturation){
 8004a90:	4629      	mov	r1, r5
 8004a92:	f001 f8bf 	bl	8005c14 <__aeabi_fcmpgt>
 8004a96:	b930      	cbnz	r0, 8004aa6 <DCMotor::updateRegulator(float, float)+0x3a>
		integral = m_settings->integralSaturation;
	}else if (integral < -(m_settings->integralSaturation)){
 8004a98:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4648      	mov	r0, r9
 8004aa0:	f001 f89a 	bl	8005bd8 <__aeabi_fcmplt>
 8004aa4:	b100      	cbz	r0, 8004aa8 <DCMotor::updateRegulator(float, float)+0x3c>
		integral = -(m_settings->integralSaturation);
 8004aa6:	62a5      	str	r5, [r4, #40]	; 0x28
	}
	
	float derivative = (error_new-error)/dt;
	float output = (m_settings->KP*error + m_settings->KI*integral + m_settings->KD*derivative);
 8004aa8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004aaa:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8004aac:	f000 fef6 	bl	800589c <__aeabi_fmul>
		integral = m_settings->integralSaturation;
	}else if (integral < -(m_settings->integralSaturation)){
		integral = -(m_settings->integralSaturation);
	}
	
	float derivative = (error_new-error)/dt;
 8004ab0:	6a65      	ldr	r5, [r4, #36]	; 0x24
	float output = (m_settings->KP*error + m_settings->KI*integral + m_settings->KD*derivative);
 8004ab2:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8004ab4:	4681      	mov	r9, r0
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 fef0 	bl	800589c <__aeabi_fmul>
 8004abc:	4601      	mov	r1, r0
 8004abe:	4648      	mov	r0, r9
 8004ac0:	f000 fde4 	bl	800568c <__addsf3>
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	4681      	mov	r9, r0
 8004ac8:	4638      	mov	r0, r7
 8004aca:	f000 fddd 	bl	8005688 <__aeabi_fsub>
 8004ace:	4641      	mov	r1, r8
 8004ad0:	f000 ff98 	bl	8005a04 <__aeabi_fdiv>
 8004ad4:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8004ad6:	f000 fee1 	bl	800589c <__aeabi_fmul>
 8004ada:	4601      	mov	r1, r0
 8004adc:	4648      	mov	r0, r9
 8004ade:	f000 fdd5 	bl	800568c <__addsf3>
	error = error_new;
 8004ae2:	6267      	str	r7, [r4, #36]	; 0x24
	return output;
}
 8004ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004ae8 <DCMotor::update(float, bool)>:

std::tuple<float, float, int, int> DCMotor::update(float dt, bool connected){
 8004ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	4607      	mov	r7, r0
 8004aee:	4688      	mov	r8, r1
 8004af0:	4616      	mov	r6, r2
	int s = 0;
	float speed_si = -1;
	int32_t encoder_speed = 0;
	uint16_t busyCount = 0;
	uint8_t retryCount = 0;
	if(connected){
 8004af2:	b33b      	cbz	r3, 8004b44 <DCMotor::update(float, bool)+0x5c>
		std::tie(encoder_speed, retryCount, busyCount) = readEncoder();
 8004af4:	4668      	mov	r0, sp
 8004af6:	f7ff ff73 	bl	80049e0 <DCMotor::readEncoder()>
		float encSpeed = encoder_speed*0.04793689962;		// rad/s
		speed_si = encSpeed * wheelRadius;	// m/s
 8004afa:	9801      	ldr	r0, [sp, #4]
 8004afc:	f000 fa48 	bl	8004f90 <__aeabi_i2d>
 8004b00:	a31b      	add	r3, pc, #108	; (adr r3, 8004b70 <DCMotor::update(float, bool)+0x88>)
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f000 faa9 	bl	800505c <__aeabi_dmul>
 8004b0a:	f000 fd69 	bl	80055e0 <__aeabi_d2f>
 8004b0e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004b12:	f000 fec3 	bl	800589c <__aeabi_fmul>
		if(strstr(m_settings->m_motorName, "left") > 0)
 8004b16:	f8d8 3004 	ldr.w	r3, [r8, #4]
	uint16_t busyCount = 0;
	uint8_t retryCount = 0;
	if(connected){
		std::tie(encoder_speed, retryCount, busyCount) = readEncoder();
		float encSpeed = encoder_speed*0.04793689962;		// rad/s
		speed_si = encSpeed * wheelRadius;	// m/s
 8004b1a:	4604      	mov	r4, r0
		if(strstr(m_settings->m_motorName, "left") > 0)
 8004b1c:	4916      	ldr	r1, [pc, #88]	; (8004b78 <DCMotor::update(float, bool)+0x90>)
 8004b1e:	6858      	ldr	r0, [r3, #4]

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
	  _M_head(*this) = std::forward<_UHead>
 8004b20:	f89d 5002 	ldrb.w	r5, [sp, #2]

      template<typename _UHead>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead>&& __in)
        {
	  _M_head(*this)
 8004b24:	f8bd 9000 	ldrh.w	r9, [sp]
 8004b28:	f00e fe87 	bl	801383a <strstr>
 8004b2c:	b108      	cbz	r0, 8004b32 <DCMotor::update(float, bool)+0x4a>
			speed_si = speed_si * -1;
 8004b2e:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000

		// Update PID regulator
		s = (int) updateRegulator(speed_si, dt);		// m/s*/
 8004b32:	4632      	mov	r2, r6
 8004b34:	4621      	mov	r1, r4
 8004b36:	4640      	mov	r0, r8
 8004b38:	f7ff ff98 	bl	8004a6c <DCMotor::updateRegulator(float, float)>
 8004b3c:	f001 f874 	bl	8005c28 <__aeabi_f2iz>
 8004b40:	4606      	mov	r6, r0
 8004b42:	e003      	b.n	8004b4c <DCMotor::update(float, bool)+0x64>
	// Read encoder
	int s = 0;
	float speed_si = -1;
	int32_t encoder_speed = 0;
	uint16_t busyCount = 0;
	uint8_t retryCount = 0;
 8004b44:	461d      	mov	r5, r3
std::tuple<float, float, int, int> DCMotor::update(float dt, bool connected){
	// Read encoder
	int s = 0;
	float speed_si = -1;
	int32_t encoder_speed = 0;
	uint16_t busyCount = 0;
 8004b46:	4699      	mov	r9, r3
	return output;
}

std::tuple<float, float, int, int> DCMotor::update(float dt, bool connected){
	// Read encoder
	int s = 0;
 8004b48:	461e      	mov	r6, r3
	float speed_si = -1;
 8004b4a:	4c0c      	ldr	r4, [pc, #48]	; (8004b7c <DCMotor::update(float, bool)+0x94>)

		// Update PID regulator
		s = (int) updateRegulator(speed_si, dt);		// m/s*/
		// Set motor speed to process value
	}
	setSpeed(s);		// m/s
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4640      	mov	r0, r8
 8004b50:	f7ff fed4 	bl	80048fc <DCMotor::setSpeed(int)>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004b54:	f8c7 9000 	str.w	r9, [r7]
 8004b58:	607d      	str	r5, [r7, #4]
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f000 fe4a 	bl	80057f4 <__aeabi_i2f>
 8004b60:	60b8      	str	r0, [r7, #8]
	// Return encoder values for publishing to localization
	return std::make_tuple(speed_si, s, (int)retryCount, (int)busyCount);
 8004b62:	4638      	mov	r0, r7
 8004b64:	60fc      	str	r4, [r7, #12]
 8004b66:	b003      	add	sp, #12
 8004b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b6c:	f3af 8000 	nop.w
 8004b70:	7047711c 	.word	0x7047711c
 8004b74:	3fa88b2f 	.word	0x3fa88b2f
 8004b78:	08015b91 	.word	0x08015b91
 8004b7c:	bf800000 	.word	0xbf800000

08004b80 <motorSettings::motorSettings()>:

motorSettings::motorSettings()
{
    //  preset general defaults

    m_motorType = 0;
 8004b80:	2200      	movs	r2, #0
 8004b82:	6002      	str	r2, [r0, #0]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 8004b84:	4770      	bx	lr

08004b86 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>:

motorSettings::motorSettings(int type, const char* name, TIM_TypeDef* timer, int timerChannel)
 8004b86:	b510      	push	{r4, lr}
{
    //  preset general defaults

    m_motorType = type;
    m_motorName = name;
    m_Timer = timer;
 8004b88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    m_TimerChannel = timerChannel;
 8004b8c:	9b02      	ldr	r3, [sp, #8]
 8004b8e:	60c3      	str	r3, [r0, #12]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 8004b90:	bd10      	pop	{r4, pc}

08004b92 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>:
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
 8004b92:	6283      	str	r3, [r0, #40]	; 0x28
    m_DCEnAPort = m_DCEnAPort_;
 8004b94:	9b00      	ldr	r3, [sp, #0]

void motorSettings::setDCPins(int m_DCInAPin_, GPIO_TypeDef* m_DCInAPort_, int m_DCEnAPin_, GPIO_TypeDef* m_DCEnAPort_,
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
 8004b96:	6201      	str	r1, [r0, #32]
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
    m_DCEnAPort = m_DCEnAPort_;
 8004b98:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_DCInBPin = m_DCInBPin_;
 8004b9a:	9b01      	ldr	r3, [sp, #4]
void motorSettings::setDCPins(int m_DCInAPin_, GPIO_TypeDef* m_DCInAPort_, int m_DCEnAPin_, GPIO_TypeDef* m_DCEnAPort_,
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
 8004b9c:	6242      	str	r2, [r0, #36]	; 0x24
    m_DCEnAPin = m_DCEnAPin_;
    m_DCEnAPort = m_DCEnAPort_;
    m_DCInBPin = m_DCInBPin_;
 8004b9e:	6303      	str	r3, [r0, #48]	; 0x30
    m_DCInBPort = m_DCInBPort_;
 8004ba0:	9b02      	ldr	r3, [sp, #8]
 8004ba2:	6343      	str	r3, [r0, #52]	; 0x34
    m_DCEnBPin = m_DCEnBPin_;
 8004ba4:	9b03      	ldr	r3, [sp, #12]
 8004ba6:	6383      	str	r3, [r0, #56]	; 0x38
    m_DCEnBPort = m_DCEnBPort_;
 8004ba8:	9b04      	ldr	r3, [sp, #16]
 8004baa:	63c3      	str	r3, [r0, #60]	; 0x3c
    m_DCPWMPin = m_DCPWMPin_;
 8004bac:	9b05      	ldr	r3, [sp, #20]
 8004bae:	6403      	str	r3, [r0, #64]	; 0x40
    m_DCPWMPort = m_DCPWMPort_;
 8004bb0:	9b06      	ldr	r3, [sp, #24]
 8004bb2:	6443      	str	r3, [r0, #68]	; 0x44
 8004bb4:	4770      	bx	lr

08004bb6 <motorSettings::setRegulator(float, float, float, float)>:
}

void motorSettings::setRegulator(float KP_, float KI_, float KD_, float integralSaturation_){
    KP = KP_;
    KI = KI_;
    KD = KD_;
 8004bb6:	6583      	str	r3, [r0, #88]	; 0x58
    integralSaturation = integralSaturation_;
 8004bb8:	9b00      	ldr	r3, [sp, #0]
    m_DCPWMPin = m_DCPWMPin_;
    m_DCPWMPort = m_DCPWMPort_;
}

void motorSettings::setRegulator(float KP_, float KI_, float KD_, float integralSaturation_){
    KP = KP_;
 8004bba:	6501      	str	r1, [r0, #80]	; 0x50
    KI = KI_;
 8004bbc:	6542      	str	r2, [r0, #84]	; 0x54
    KD = KD_;
    integralSaturation = integralSaturation_;
 8004bbe:	65c3      	str	r3, [r0, #92]	; 0x5c
 8004bc0:	4770      	bx	lr
	...

08004bc4 <ros::normalizeSecNSecSigned(long&, long&)>:
#include "ros/duration.h"

namespace ros
{
  void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
  {
 8004bc4:	b510      	push	{r4, lr}
    int32_t nsec_part = nsec;
 8004bc6:	680b      	ldr	r3, [r1, #0]
    int32_t sec_part = sec;
 8004bc8:	6802      	ldr	r2, [r0, #0]

    while (nsec_part > 1000000000L)
 8004bca:	4c0c      	ldr	r4, [pc, #48]	; (8004bfc <ros::normalizeSecNSecSigned(long&, long&)+0x38>)
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	dd07      	ble.n	8004be0 <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
    {
      nsec_part -= 1000000000L;
 8004bd0:	f103 4344 	add.w	r3, r3, #3288334336	; 0xc4000000
 8004bd4:	f503 03ca 	add.w	r3, r3, #6619136	; 0x650000
 8004bd8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
      ++sec_part;
 8004bdc:	3201      	adds	r2, #1
  void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
  {
    int32_t nsec_part = nsec;
    int32_t sec_part = sec;

    while (nsec_part > 1000000000L)
 8004bde:	e7f5      	b.n	8004bcc <ros::normalizeSecNSecSigned(long&, long&)+0x8>
    {
      nsec_part -= 1000000000L;
      ++sec_part;
    }
    while (nsec_part < 0)
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da07      	bge.n	8004bf4 <ros::normalizeSecNSecSigned(long&, long&)+0x30>
    {
      nsec_part += 1000000000L;
 8004be4:	f103 536e 	add.w	r3, r3, #998244352	; 0x3b800000
 8004be8:	f503 13d6 	add.w	r3, r3, #1753088	; 0x1ac000
 8004bec:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
      --sec_part;
 8004bf0:	3a01      	subs	r2, #1
    while (nsec_part > 1000000000L)
    {
      nsec_part -= 1000000000L;
      ++sec_part;
    }
    while (nsec_part < 0)
 8004bf2:	e7f5      	b.n	8004be0 <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
    {
      nsec_part += 1000000000L;
      --sec_part;
    }
    sec = sec_part;
 8004bf4:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004bf6:	600b      	str	r3, [r1, #0]
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	bf00      	nop
 8004bfc:	3b9aca00 	.word	0x3b9aca00

08004c00 <ros::Duration::operator+=(ros::Duration const&)>:
  }

  Duration& Duration::operator+=(const Duration &rhs)
  {
    sec += rhs.sec;
 8004c00:	6802      	ldr	r2, [r0, #0]
 8004c02:	680b      	ldr	r3, [r1, #0]
    sec = sec_part;
    nsec = nsec_part;
  }

  Duration& Duration::operator+=(const Duration &rhs)
  {
 8004c04:	b510      	push	{r4, lr}
    sec += rhs.sec;
 8004c06:	4413      	add	r3, r2
 8004c08:	6003      	str	r3, [r0, #0]
    nsec += rhs.nsec;
 8004c0a:	684b      	ldr	r3, [r1, #4]
 8004c0c:	4601      	mov	r1, r0
 8004c0e:	6842      	ldr	r2, [r0, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004c16:	f7ff ffd5 	bl	8004bc4 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004c1a:	bd10      	pop	{r4, pc}

08004c1c <ros::Duration::operator-=(ros::Duration const&)>:

  Duration& Duration::operator-=(const Duration &rhs){
    sec += -rhs.sec;
 8004c1c:	6803      	ldr	r3, [r0, #0]
 8004c1e:	680a      	ldr	r2, [r1, #0]
    nsec += rhs.nsec;
    normalizeSecNSecSigned(sec, nsec);
    return *this;
  }

  Duration& Duration::operator-=(const Duration &rhs){
 8004c20:	b510      	push	{r4, lr}
    sec += -rhs.sec;
 8004c22:	1a9b      	subs	r3, r3, r2
    nsec += -rhs.nsec;
 8004c24:	684a      	ldr	r2, [r1, #4]
 8004c26:	4601      	mov	r1, r0
    normalizeSecNSecSigned(sec, nsec);
    return *this;
  }

  Duration& Duration::operator-=(const Duration &rhs){
    sec += -rhs.sec;
 8004c28:	6003      	str	r3, [r0, #0]
    nsec += -rhs.nsec;
 8004c2a:	6843      	ldr	r3, [r0, #4]
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004c32:	f7ff ffc7 	bl	8004bc4 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004c36:	bd10      	pop	{r4, pc}

08004c38 <ros::Duration::operator*=(double)>:

  Duration& Duration::operator*=(double scale){
 8004c38:	b5d0      	push	{r4, r6, r7, lr}
 8004c3a:	4616      	mov	r6, r2
 8004c3c:	461f      	mov	r7, r3
 8004c3e:	4604      	mov	r4, r0
    sec *= scale;
 8004c40:	6800      	ldr	r0, [r0, #0]
 8004c42:	f000 f9a5 	bl	8004f90 <__aeabi_i2d>
 8004c46:	4632      	mov	r2, r6
 8004c48:	463b      	mov	r3, r7
 8004c4a:	f000 fa07 	bl	800505c <__aeabi_dmul>
 8004c4e:	f000 fc9f 	bl	8005590 <__aeabi_d2iz>
 8004c52:	6020      	str	r0, [r4, #0]
    nsec *= scale;
 8004c54:	6860      	ldr	r0, [r4, #4]
 8004c56:	f000 f99b 	bl	8004f90 <__aeabi_i2d>
 8004c5a:	4632      	mov	r2, r6
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	f000 f9fd 	bl	800505c <__aeabi_dmul>
 8004c62:	f000 fc95 	bl	8005590 <__aeabi_d2iz>
 8004c66:	4621      	mov	r1, r4
 8004c68:	f841 0f04 	str.w	r0, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7ff ffa9 	bl	8004bc4 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004c72:	4620      	mov	r0, r4
 8004c74:	bdd0      	pop	{r4, r6, r7, pc}
 8004c76:	bf00      	nop

08004c78 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 8004c78:	b530      	push	{r4, r5, lr}
    uint32_t nsec_part= nsec % 1000000000UL;
 8004c7a:	680d      	ldr	r5, [r1, #0]
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 8004c7c:	4c04      	ldr	r4, [pc, #16]	; (8004c90 <ros::normalizeSecNSec(unsigned long&, unsigned long&)+0x18>)
 8004c7e:	6802      	ldr	r2, [r0, #0]
 8004c80:	fbb5 f3f4 	udiv	r3, r5, r4
 8004c84:	441a      	add	r2, r3
    nsec = nsec_part;
 8004c86:	fb04 5313 	mls	r3, r4, r3, r5
namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
    uint32_t nsec_part= nsec % 1000000000UL;
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 8004c8a:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004c8c:	600b      	str	r3, [r1, #0]
 8004c8e:	bd30      	pop	{r4, r5, pc}
 8004c90:	3b9aca00 	.word	0x3b9aca00

08004c94 <ros::Time::fromNSec(long)>:
  }

  Time& Time::fromNSec(int32_t t)
  {
    sec = t / 1000000000;
 8004c94:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <ros::Time::fromNSec(long)+0x1c>)
    sec += sec_part;
    nsec = nsec_part;
  }

  Time& Time::fromNSec(int32_t t)
  {
 8004c96:	b510      	push	{r4, lr}
    sec = t / 1000000000;
 8004c98:	fb91 f3f2 	sdiv	r3, r1, r2
 8004c9c:	6003      	str	r3, [r0, #0]
    nsec = t % 1000000000;
 8004c9e:	fb02 1313 	mls	r3, r2, r3, r1
 8004ca2:	4601      	mov	r1, r0
 8004ca4:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004ca8:	f7ff ffe6 	bl	8004c78 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	bf00      	nop
 8004cb0:	3b9aca00 	.word	0x3b9aca00

08004cb4 <ros::Time::operator+=(ros::Duration const&)>:

  Time& Time::operator +=(const Duration &rhs)
  {
    sec += rhs.sec;
 8004cb4:	6802      	ldr	r2, [r0, #0]
 8004cb6:	680b      	ldr	r3, [r1, #0]
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator +=(const Duration &rhs)
  {
 8004cb8:	b510      	push	{r4, lr}
    sec += rhs.sec;
 8004cba:	4413      	add	r3, r2
 8004cbc:	6003      	str	r3, [r0, #0]
    nsec += rhs.nsec;
 8004cbe:	684b      	ldr	r3, [r1, #4]
 8004cc0:	4601      	mov	r1, r0
 8004cc2:	6842      	ldr	r2, [r0, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004cca:	f7ff ffd5 	bl	8004c78 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004cce:	bd10      	pop	{r4, pc}

08004cd0 <ros::Time::operator-=(ros::Duration const&)>:

  Time& Time::operator -=(const Duration &rhs){
    sec += -rhs.sec;
 8004cd0:	6803      	ldr	r3, [r0, #0]
 8004cd2:	680a      	ldr	r2, [r1, #0]
    nsec += rhs.nsec;
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator -=(const Duration &rhs){
 8004cd4:	b510      	push	{r4, lr}
    sec += -rhs.sec;
 8004cd6:	1a9b      	subs	r3, r3, r2
    nsec += -rhs.nsec;
 8004cd8:	684a      	ldr	r2, [r1, #4]
 8004cda:	4601      	mov	r1, r0
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator -=(const Duration &rhs){
    sec += -rhs.sec;
 8004cdc:	6003      	str	r3, [r0, #0]
    nsec += -rhs.nsec;
 8004cde:	6843      	ldr	r3, [r0, #4]
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004ce6:	f7ff ffc7 	bl	8004c78 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004cea:	bd10      	pop	{r4, pc}

08004cec <__aeabi_drsub>:
 8004cec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004cf0:	e002      	b.n	8004cf8 <__adddf3>
 8004cf2:	bf00      	nop

08004cf4 <__aeabi_dsub>:
 8004cf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004cf8 <__adddf3>:
 8004cf8:	b530      	push	{r4, r5, lr}
 8004cfa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004cfe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004d02:	ea94 0f05 	teq	r4, r5
 8004d06:	bf08      	it	eq
 8004d08:	ea90 0f02 	teqeq	r0, r2
 8004d0c:	bf1f      	itttt	ne
 8004d0e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004d12:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004d16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004d1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004d1e:	f000 80e2 	beq.w	8004ee6 <__adddf3+0x1ee>
 8004d22:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004d26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004d2a:	bfb8      	it	lt
 8004d2c:	426d      	neglt	r5, r5
 8004d2e:	dd0c      	ble.n	8004d4a <__adddf3+0x52>
 8004d30:	442c      	add	r4, r5
 8004d32:	ea80 0202 	eor.w	r2, r0, r2
 8004d36:	ea81 0303 	eor.w	r3, r1, r3
 8004d3a:	ea82 0000 	eor.w	r0, r2, r0
 8004d3e:	ea83 0101 	eor.w	r1, r3, r1
 8004d42:	ea80 0202 	eor.w	r2, r0, r2
 8004d46:	ea81 0303 	eor.w	r3, r1, r3
 8004d4a:	2d36      	cmp	r5, #54	; 0x36
 8004d4c:	bf88      	it	hi
 8004d4e:	bd30      	pophi	{r4, r5, pc}
 8004d50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004d54:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004d58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004d5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004d60:	d002      	beq.n	8004d68 <__adddf3+0x70>
 8004d62:	4240      	negs	r0, r0
 8004d64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004d68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004d6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004d70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004d74:	d002      	beq.n	8004d7c <__adddf3+0x84>
 8004d76:	4252      	negs	r2, r2
 8004d78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004d7c:	ea94 0f05 	teq	r4, r5
 8004d80:	f000 80a7 	beq.w	8004ed2 <__adddf3+0x1da>
 8004d84:	f1a4 0401 	sub.w	r4, r4, #1
 8004d88:	f1d5 0e20 	rsbs	lr, r5, #32
 8004d8c:	db0d      	blt.n	8004daa <__adddf3+0xb2>
 8004d8e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004d92:	fa22 f205 	lsr.w	r2, r2, r5
 8004d96:	1880      	adds	r0, r0, r2
 8004d98:	f141 0100 	adc.w	r1, r1, #0
 8004d9c:	fa03 f20e 	lsl.w	r2, r3, lr
 8004da0:	1880      	adds	r0, r0, r2
 8004da2:	fa43 f305 	asr.w	r3, r3, r5
 8004da6:	4159      	adcs	r1, r3
 8004da8:	e00e      	b.n	8004dc8 <__adddf3+0xd0>
 8004daa:	f1a5 0520 	sub.w	r5, r5, #32
 8004dae:	f10e 0e20 	add.w	lr, lr, #32
 8004db2:	2a01      	cmp	r2, #1
 8004db4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004db8:	bf28      	it	cs
 8004dba:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004dbe:	fa43 f305 	asr.w	r3, r3, r5
 8004dc2:	18c0      	adds	r0, r0, r3
 8004dc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004dc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004dcc:	d507      	bpl.n	8004dde <__adddf3+0xe6>
 8004dce:	f04f 0e00 	mov.w	lr, #0
 8004dd2:	f1dc 0c00 	rsbs	ip, ip, #0
 8004dd6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004dda:	eb6e 0101 	sbc.w	r1, lr, r1
 8004dde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004de2:	d31b      	bcc.n	8004e1c <__adddf3+0x124>
 8004de4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004de8:	d30c      	bcc.n	8004e04 <__adddf3+0x10c>
 8004dea:	0849      	lsrs	r1, r1, #1
 8004dec:	ea5f 0030 	movs.w	r0, r0, rrx
 8004df0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004df4:	f104 0401 	add.w	r4, r4, #1
 8004df8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004dfc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004e00:	f080 809a 	bcs.w	8004f38 <__adddf3+0x240>
 8004e04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004e08:	bf08      	it	eq
 8004e0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004e0e:	f150 0000 	adcs.w	r0, r0, #0
 8004e12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004e16:	ea41 0105 	orr.w	r1, r1, r5
 8004e1a:	bd30      	pop	{r4, r5, pc}
 8004e1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004e20:	4140      	adcs	r0, r0
 8004e22:	eb41 0101 	adc.w	r1, r1, r1
 8004e26:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004e2a:	f1a4 0401 	sub.w	r4, r4, #1
 8004e2e:	d1e9      	bne.n	8004e04 <__adddf3+0x10c>
 8004e30:	f091 0f00 	teq	r1, #0
 8004e34:	bf04      	itt	eq
 8004e36:	4601      	moveq	r1, r0
 8004e38:	2000      	moveq	r0, #0
 8004e3a:	fab1 f381 	clz	r3, r1
 8004e3e:	bf08      	it	eq
 8004e40:	3320      	addeq	r3, #32
 8004e42:	f1a3 030b 	sub.w	r3, r3, #11
 8004e46:	f1b3 0220 	subs.w	r2, r3, #32
 8004e4a:	da0c      	bge.n	8004e66 <__adddf3+0x16e>
 8004e4c:	320c      	adds	r2, #12
 8004e4e:	dd08      	ble.n	8004e62 <__adddf3+0x16a>
 8004e50:	f102 0c14 	add.w	ip, r2, #20
 8004e54:	f1c2 020c 	rsb	r2, r2, #12
 8004e58:	fa01 f00c 	lsl.w	r0, r1, ip
 8004e5c:	fa21 f102 	lsr.w	r1, r1, r2
 8004e60:	e00c      	b.n	8004e7c <__adddf3+0x184>
 8004e62:	f102 0214 	add.w	r2, r2, #20
 8004e66:	bfd8      	it	le
 8004e68:	f1c2 0c20 	rsble	ip, r2, #32
 8004e6c:	fa01 f102 	lsl.w	r1, r1, r2
 8004e70:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004e74:	bfdc      	itt	le
 8004e76:	ea41 010c 	orrle.w	r1, r1, ip
 8004e7a:	4090      	lslle	r0, r2
 8004e7c:	1ae4      	subs	r4, r4, r3
 8004e7e:	bfa2      	ittt	ge
 8004e80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004e84:	4329      	orrge	r1, r5
 8004e86:	bd30      	popge	{r4, r5, pc}
 8004e88:	ea6f 0404 	mvn.w	r4, r4
 8004e8c:	3c1f      	subs	r4, #31
 8004e8e:	da1c      	bge.n	8004eca <__adddf3+0x1d2>
 8004e90:	340c      	adds	r4, #12
 8004e92:	dc0e      	bgt.n	8004eb2 <__adddf3+0x1ba>
 8004e94:	f104 0414 	add.w	r4, r4, #20
 8004e98:	f1c4 0220 	rsb	r2, r4, #32
 8004e9c:	fa20 f004 	lsr.w	r0, r0, r4
 8004ea0:	fa01 f302 	lsl.w	r3, r1, r2
 8004ea4:	ea40 0003 	orr.w	r0, r0, r3
 8004ea8:	fa21 f304 	lsr.w	r3, r1, r4
 8004eac:	ea45 0103 	orr.w	r1, r5, r3
 8004eb0:	bd30      	pop	{r4, r5, pc}
 8004eb2:	f1c4 040c 	rsb	r4, r4, #12
 8004eb6:	f1c4 0220 	rsb	r2, r4, #32
 8004eba:	fa20 f002 	lsr.w	r0, r0, r2
 8004ebe:	fa01 f304 	lsl.w	r3, r1, r4
 8004ec2:	ea40 0003 	orr.w	r0, r0, r3
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	bd30      	pop	{r4, r5, pc}
 8004eca:	fa21 f004 	lsr.w	r0, r1, r4
 8004ece:	4629      	mov	r1, r5
 8004ed0:	bd30      	pop	{r4, r5, pc}
 8004ed2:	f094 0f00 	teq	r4, #0
 8004ed6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004eda:	bf06      	itte	eq
 8004edc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004ee0:	3401      	addeq	r4, #1
 8004ee2:	3d01      	subne	r5, #1
 8004ee4:	e74e      	b.n	8004d84 <__adddf3+0x8c>
 8004ee6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004eea:	bf18      	it	ne
 8004eec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004ef0:	d029      	beq.n	8004f46 <__adddf3+0x24e>
 8004ef2:	ea94 0f05 	teq	r4, r5
 8004ef6:	bf08      	it	eq
 8004ef8:	ea90 0f02 	teqeq	r0, r2
 8004efc:	d005      	beq.n	8004f0a <__adddf3+0x212>
 8004efe:	ea54 0c00 	orrs.w	ip, r4, r0
 8004f02:	bf04      	itt	eq
 8004f04:	4619      	moveq	r1, r3
 8004f06:	4610      	moveq	r0, r2
 8004f08:	bd30      	pop	{r4, r5, pc}
 8004f0a:	ea91 0f03 	teq	r1, r3
 8004f0e:	bf1e      	ittt	ne
 8004f10:	2100      	movne	r1, #0
 8004f12:	2000      	movne	r0, #0
 8004f14:	bd30      	popne	{r4, r5, pc}
 8004f16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004f1a:	d105      	bne.n	8004f28 <__adddf3+0x230>
 8004f1c:	0040      	lsls	r0, r0, #1
 8004f1e:	4149      	adcs	r1, r1
 8004f20:	bf28      	it	cs
 8004f22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004f26:	bd30      	pop	{r4, r5, pc}
 8004f28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004f2c:	bf3c      	itt	cc
 8004f2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004f32:	bd30      	popcc	{r4, r5, pc}
 8004f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004f38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004f3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f40:	f04f 0000 	mov.w	r0, #0
 8004f44:	bd30      	pop	{r4, r5, pc}
 8004f46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004f4a:	bf1a      	itte	ne
 8004f4c:	4619      	movne	r1, r3
 8004f4e:	4610      	movne	r0, r2
 8004f50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004f54:	bf1c      	itt	ne
 8004f56:	460b      	movne	r3, r1
 8004f58:	4602      	movne	r2, r0
 8004f5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004f5e:	bf06      	itte	eq
 8004f60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004f64:	ea91 0f03 	teqeq	r1, r3
 8004f68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004f6c:	bd30      	pop	{r4, r5, pc}
 8004f6e:	bf00      	nop

08004f70 <__aeabi_ui2d>:
 8004f70:	f090 0f00 	teq	r0, #0
 8004f74:	bf04      	itt	eq
 8004f76:	2100      	moveq	r1, #0
 8004f78:	4770      	bxeq	lr
 8004f7a:	b530      	push	{r4, r5, lr}
 8004f7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004f80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004f84:	f04f 0500 	mov.w	r5, #0
 8004f88:	f04f 0100 	mov.w	r1, #0
 8004f8c:	e750      	b.n	8004e30 <__adddf3+0x138>
 8004f8e:	bf00      	nop

08004f90 <__aeabi_i2d>:
 8004f90:	f090 0f00 	teq	r0, #0
 8004f94:	bf04      	itt	eq
 8004f96:	2100      	moveq	r1, #0
 8004f98:	4770      	bxeq	lr
 8004f9a:	b530      	push	{r4, r5, lr}
 8004f9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004fa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004fa4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004fa8:	bf48      	it	mi
 8004faa:	4240      	negmi	r0, r0
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	e73e      	b.n	8004e30 <__adddf3+0x138>
 8004fb2:	bf00      	nop

08004fb4 <__aeabi_f2d>:
 8004fb4:	0042      	lsls	r2, r0, #1
 8004fb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004fba:	ea4f 0131 	mov.w	r1, r1, rrx
 8004fbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004fc2:	bf1f      	itttt	ne
 8004fc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004fc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004fcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004fd0:	4770      	bxne	lr
 8004fd2:	f092 0f00 	teq	r2, #0
 8004fd6:	bf14      	ite	ne
 8004fd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004fdc:	4770      	bxeq	lr
 8004fde:	b530      	push	{r4, r5, lr}
 8004fe0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004fe4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004fec:	e720      	b.n	8004e30 <__adddf3+0x138>
 8004fee:	bf00      	nop

08004ff0 <__aeabi_ul2d>:
 8004ff0:	ea50 0201 	orrs.w	r2, r0, r1
 8004ff4:	bf08      	it	eq
 8004ff6:	4770      	bxeq	lr
 8004ff8:	b530      	push	{r4, r5, lr}
 8004ffa:	f04f 0500 	mov.w	r5, #0
 8004ffe:	e00a      	b.n	8005016 <__aeabi_l2d+0x16>

08005000 <__aeabi_l2d>:
 8005000:	ea50 0201 	orrs.w	r2, r0, r1
 8005004:	bf08      	it	eq
 8005006:	4770      	bxeq	lr
 8005008:	b530      	push	{r4, r5, lr}
 800500a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800500e:	d502      	bpl.n	8005016 <__aeabi_l2d+0x16>
 8005010:	4240      	negs	r0, r0
 8005012:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005016:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800501a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800501e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005022:	f43f aedc 	beq.w	8004dde <__adddf3+0xe6>
 8005026:	f04f 0203 	mov.w	r2, #3
 800502a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800502e:	bf18      	it	ne
 8005030:	3203      	addne	r2, #3
 8005032:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005036:	bf18      	it	ne
 8005038:	3203      	addne	r2, #3
 800503a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800503e:	f1c2 0320 	rsb	r3, r2, #32
 8005042:	fa00 fc03 	lsl.w	ip, r0, r3
 8005046:	fa20 f002 	lsr.w	r0, r0, r2
 800504a:	fa01 fe03 	lsl.w	lr, r1, r3
 800504e:	ea40 000e 	orr.w	r0, r0, lr
 8005052:	fa21 f102 	lsr.w	r1, r1, r2
 8005056:	4414      	add	r4, r2
 8005058:	e6c1      	b.n	8004dde <__adddf3+0xe6>
 800505a:	bf00      	nop

0800505c <__aeabi_dmul>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005062:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005066:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800506a:	bf1d      	ittte	ne
 800506c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005070:	ea94 0f0c 	teqne	r4, ip
 8005074:	ea95 0f0c 	teqne	r5, ip
 8005078:	f000 f8de 	bleq	8005238 <__aeabi_dmul+0x1dc>
 800507c:	442c      	add	r4, r5
 800507e:	ea81 0603 	eor.w	r6, r1, r3
 8005082:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8005086:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800508a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800508e:	bf18      	it	ne
 8005090:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005094:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800509c:	d038      	beq.n	8005110 <__aeabi_dmul+0xb4>
 800509e:	fba0 ce02 	umull	ip, lr, r0, r2
 80050a2:	f04f 0500 	mov.w	r5, #0
 80050a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80050aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80050ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80050b2:	f04f 0600 	mov.w	r6, #0
 80050b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80050ba:	f09c 0f00 	teq	ip, #0
 80050be:	bf18      	it	ne
 80050c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80050c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80050c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80050cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80050d0:	d204      	bcs.n	80050dc <__aeabi_dmul+0x80>
 80050d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80050d6:	416d      	adcs	r5, r5
 80050d8:	eb46 0606 	adc.w	r6, r6, r6
 80050dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80050e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80050e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80050e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80050ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80050f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80050f4:	bf88      	it	hi
 80050f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80050fa:	d81e      	bhi.n	800513a <__aeabi_dmul+0xde>
 80050fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8005100:	bf08      	it	eq
 8005102:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8005106:	f150 0000 	adcs.w	r0, r0, #0
 800510a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800510e:	bd70      	pop	{r4, r5, r6, pc}
 8005110:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8005114:	ea46 0101 	orr.w	r1, r6, r1
 8005118:	ea40 0002 	orr.w	r0, r0, r2
 800511c:	ea81 0103 	eor.w	r1, r1, r3
 8005120:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8005124:	bfc2      	ittt	gt
 8005126:	ebd4 050c 	rsbsgt	r5, r4, ip
 800512a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800512e:	bd70      	popgt	{r4, r5, r6, pc}
 8005130:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005134:	f04f 0e00 	mov.w	lr, #0
 8005138:	3c01      	subs	r4, #1
 800513a:	f300 80ab 	bgt.w	8005294 <__aeabi_dmul+0x238>
 800513e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8005142:	bfde      	ittt	le
 8005144:	2000      	movle	r0, #0
 8005146:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800514a:	bd70      	pople	{r4, r5, r6, pc}
 800514c:	f1c4 0400 	rsb	r4, r4, #0
 8005150:	3c20      	subs	r4, #32
 8005152:	da35      	bge.n	80051c0 <__aeabi_dmul+0x164>
 8005154:	340c      	adds	r4, #12
 8005156:	dc1b      	bgt.n	8005190 <__aeabi_dmul+0x134>
 8005158:	f104 0414 	add.w	r4, r4, #20
 800515c:	f1c4 0520 	rsb	r5, r4, #32
 8005160:	fa00 f305 	lsl.w	r3, r0, r5
 8005164:	fa20 f004 	lsr.w	r0, r0, r4
 8005168:	fa01 f205 	lsl.w	r2, r1, r5
 800516c:	ea40 0002 	orr.w	r0, r0, r2
 8005170:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005174:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005178:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800517c:	fa21 f604 	lsr.w	r6, r1, r4
 8005180:	eb42 0106 	adc.w	r1, r2, r6
 8005184:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005188:	bf08      	it	eq
 800518a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	f1c4 040c 	rsb	r4, r4, #12
 8005194:	f1c4 0520 	rsb	r5, r4, #32
 8005198:	fa00 f304 	lsl.w	r3, r0, r4
 800519c:	fa20 f005 	lsr.w	r0, r0, r5
 80051a0:	fa01 f204 	lsl.w	r2, r1, r4
 80051a4:	ea40 0002 	orr.w	r0, r0, r2
 80051a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80051ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80051b0:	f141 0100 	adc.w	r1, r1, #0
 80051b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80051b8:	bf08      	it	eq
 80051ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	f1c4 0520 	rsb	r5, r4, #32
 80051c4:	fa00 f205 	lsl.w	r2, r0, r5
 80051c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80051cc:	fa20 f304 	lsr.w	r3, r0, r4
 80051d0:	fa01 f205 	lsl.w	r2, r1, r5
 80051d4:	ea43 0302 	orr.w	r3, r3, r2
 80051d8:	fa21 f004 	lsr.w	r0, r1, r4
 80051dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80051e0:	fa21 f204 	lsr.w	r2, r1, r4
 80051e4:	ea20 0002 	bic.w	r0, r0, r2
 80051e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80051ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80051f0:	bf08      	it	eq
 80051f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f094 0f00 	teq	r4, #0
 80051fc:	d10f      	bne.n	800521e <__aeabi_dmul+0x1c2>
 80051fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005202:	0040      	lsls	r0, r0, #1
 8005204:	eb41 0101 	adc.w	r1, r1, r1
 8005208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800520c:	bf08      	it	eq
 800520e:	3c01      	subeq	r4, #1
 8005210:	d0f7      	beq.n	8005202 <__aeabi_dmul+0x1a6>
 8005212:	ea41 0106 	orr.w	r1, r1, r6
 8005216:	f095 0f00 	teq	r5, #0
 800521a:	bf18      	it	ne
 800521c:	4770      	bxne	lr
 800521e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005222:	0052      	lsls	r2, r2, #1
 8005224:	eb43 0303 	adc.w	r3, r3, r3
 8005228:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800522c:	bf08      	it	eq
 800522e:	3d01      	subeq	r5, #1
 8005230:	d0f7      	beq.n	8005222 <__aeabi_dmul+0x1c6>
 8005232:	ea43 0306 	orr.w	r3, r3, r6
 8005236:	4770      	bx	lr
 8005238:	ea94 0f0c 	teq	r4, ip
 800523c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005240:	bf18      	it	ne
 8005242:	ea95 0f0c 	teqne	r5, ip
 8005246:	d00c      	beq.n	8005262 <__aeabi_dmul+0x206>
 8005248:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800524c:	bf18      	it	ne
 800524e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005252:	d1d1      	bne.n	80051f8 <__aeabi_dmul+0x19c>
 8005254:	ea81 0103 	eor.w	r1, r1, r3
 8005258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800525c:	f04f 0000 	mov.w	r0, #0
 8005260:	bd70      	pop	{r4, r5, r6, pc}
 8005262:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005266:	bf06      	itte	eq
 8005268:	4610      	moveq	r0, r2
 800526a:	4619      	moveq	r1, r3
 800526c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005270:	d019      	beq.n	80052a6 <__aeabi_dmul+0x24a>
 8005272:	ea94 0f0c 	teq	r4, ip
 8005276:	d102      	bne.n	800527e <__aeabi_dmul+0x222>
 8005278:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800527c:	d113      	bne.n	80052a6 <__aeabi_dmul+0x24a>
 800527e:	ea95 0f0c 	teq	r5, ip
 8005282:	d105      	bne.n	8005290 <__aeabi_dmul+0x234>
 8005284:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005288:	bf1c      	itt	ne
 800528a:	4610      	movne	r0, r2
 800528c:	4619      	movne	r1, r3
 800528e:	d10a      	bne.n	80052a6 <__aeabi_dmul+0x24a>
 8005290:	ea81 0103 	eor.w	r1, r1, r3
 8005294:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005298:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800529c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052a0:	f04f 0000 	mov.w	r0, #0
 80052a4:	bd70      	pop	{r4, r5, r6, pc}
 80052a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80052aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80052ae:	bd70      	pop	{r4, r5, r6, pc}

080052b0 <__aeabi_ddiv>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80052b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80052ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80052be:	bf1d      	ittte	ne
 80052c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80052c4:	ea94 0f0c 	teqne	r4, ip
 80052c8:	ea95 0f0c 	teqne	r5, ip
 80052cc:	f000 f8a7 	bleq	800541e <__aeabi_ddiv+0x16e>
 80052d0:	eba4 0405 	sub.w	r4, r4, r5
 80052d4:	ea81 0e03 	eor.w	lr, r1, r3
 80052d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80052dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80052e0:	f000 8088 	beq.w	80053f4 <__aeabi_ddiv+0x144>
 80052e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80052e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80052ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80052f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80052f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80052f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80052fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005300:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005304:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005308:	429d      	cmp	r5, r3
 800530a:	bf08      	it	eq
 800530c:	4296      	cmpeq	r6, r2
 800530e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005312:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005316:	d202      	bcs.n	800531e <__aeabi_ddiv+0x6e>
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	ea4f 0232 	mov.w	r2, r2, rrx
 800531e:	1ab6      	subs	r6, r6, r2
 8005320:	eb65 0503 	sbc.w	r5, r5, r3
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	ea4f 0232 	mov.w	r2, r2, rrx
 800532a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800532e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005332:	ebb6 0e02 	subs.w	lr, r6, r2
 8005336:	eb75 0e03 	sbcs.w	lr, r5, r3
 800533a:	bf22      	ittt	cs
 800533c:	1ab6      	subcs	r6, r6, r2
 800533e:	4675      	movcs	r5, lr
 8005340:	ea40 000c 	orrcs.w	r0, r0, ip
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	ea4f 0232 	mov.w	r2, r2, rrx
 800534a:	ebb6 0e02 	subs.w	lr, r6, r2
 800534e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005352:	bf22      	ittt	cs
 8005354:	1ab6      	subcs	r6, r6, r2
 8005356:	4675      	movcs	r5, lr
 8005358:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005362:	ebb6 0e02 	subs.w	lr, r6, r2
 8005366:	eb75 0e03 	sbcs.w	lr, r5, r3
 800536a:	bf22      	ittt	cs
 800536c:	1ab6      	subcs	r6, r6, r2
 800536e:	4675      	movcs	r5, lr
 8005370:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	ea4f 0232 	mov.w	r2, r2, rrx
 800537a:	ebb6 0e02 	subs.w	lr, r6, r2
 800537e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005382:	bf22      	ittt	cs
 8005384:	1ab6      	subcs	r6, r6, r2
 8005386:	4675      	movcs	r5, lr
 8005388:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800538c:	ea55 0e06 	orrs.w	lr, r5, r6
 8005390:	d018      	beq.n	80053c4 <__aeabi_ddiv+0x114>
 8005392:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005396:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800539a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800539e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80053a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80053a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80053aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80053ae:	d1c0      	bne.n	8005332 <__aeabi_ddiv+0x82>
 80053b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80053b4:	d10b      	bne.n	80053ce <__aeabi_ddiv+0x11e>
 80053b6:	ea41 0100 	orr.w	r1, r1, r0
 80053ba:	f04f 0000 	mov.w	r0, #0
 80053be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80053c2:	e7b6      	b.n	8005332 <__aeabi_ddiv+0x82>
 80053c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80053c8:	bf04      	itt	eq
 80053ca:	4301      	orreq	r1, r0
 80053cc:	2000      	moveq	r0, #0
 80053ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80053d2:	bf88      	it	hi
 80053d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80053d8:	f63f aeaf 	bhi.w	800513a <__aeabi_dmul+0xde>
 80053dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80053e0:	bf04      	itt	eq
 80053e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80053e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80053ea:	f150 0000 	adcs.w	r0, r0, #0
 80053ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80053f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80053fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005400:	bfc2      	ittt	gt
 8005402:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005406:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800540a:	bd70      	popgt	{r4, r5, r6, pc}
 800540c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005410:	f04f 0e00 	mov.w	lr, #0
 8005414:	3c01      	subs	r4, #1
 8005416:	e690      	b.n	800513a <__aeabi_dmul+0xde>
 8005418:	ea45 0e06 	orr.w	lr, r5, r6
 800541c:	e68d      	b.n	800513a <__aeabi_dmul+0xde>
 800541e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005422:	ea94 0f0c 	teq	r4, ip
 8005426:	bf08      	it	eq
 8005428:	ea95 0f0c 	teqeq	r5, ip
 800542c:	f43f af3b 	beq.w	80052a6 <__aeabi_dmul+0x24a>
 8005430:	ea94 0f0c 	teq	r4, ip
 8005434:	d10a      	bne.n	800544c <__aeabi_ddiv+0x19c>
 8005436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800543a:	f47f af34 	bne.w	80052a6 <__aeabi_dmul+0x24a>
 800543e:	ea95 0f0c 	teq	r5, ip
 8005442:	f47f af25 	bne.w	8005290 <__aeabi_dmul+0x234>
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	e72c      	b.n	80052a6 <__aeabi_dmul+0x24a>
 800544c:	ea95 0f0c 	teq	r5, ip
 8005450:	d106      	bne.n	8005460 <__aeabi_ddiv+0x1b0>
 8005452:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005456:	f43f aefd 	beq.w	8005254 <__aeabi_dmul+0x1f8>
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	e722      	b.n	80052a6 <__aeabi_dmul+0x24a>
 8005460:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005464:	bf18      	it	ne
 8005466:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800546a:	f47f aec5 	bne.w	80051f8 <__aeabi_dmul+0x19c>
 800546e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005472:	f47f af0d 	bne.w	8005290 <__aeabi_dmul+0x234>
 8005476:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800547a:	f47f aeeb 	bne.w	8005254 <__aeabi_dmul+0x1f8>
 800547e:	e712      	b.n	80052a6 <__aeabi_dmul+0x24a>

08005480 <__gedf2>:
 8005480:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005484:	e006      	b.n	8005494 <__cmpdf2+0x4>
 8005486:	bf00      	nop

08005488 <__ledf2>:
 8005488:	f04f 0c01 	mov.w	ip, #1
 800548c:	e002      	b.n	8005494 <__cmpdf2+0x4>
 800548e:	bf00      	nop

08005490 <__cmpdf2>:
 8005490:	f04f 0c01 	mov.w	ip, #1
 8005494:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005498:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800549c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80054a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80054a4:	bf18      	it	ne
 80054a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80054aa:	d01b      	beq.n	80054e4 <__cmpdf2+0x54>
 80054ac:	b001      	add	sp, #4
 80054ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80054b2:	bf0c      	ite	eq
 80054b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80054b8:	ea91 0f03 	teqne	r1, r3
 80054bc:	bf02      	ittt	eq
 80054be:	ea90 0f02 	teqeq	r0, r2
 80054c2:	2000      	moveq	r0, #0
 80054c4:	4770      	bxeq	lr
 80054c6:	f110 0f00 	cmn.w	r0, #0
 80054ca:	ea91 0f03 	teq	r1, r3
 80054ce:	bf58      	it	pl
 80054d0:	4299      	cmppl	r1, r3
 80054d2:	bf08      	it	eq
 80054d4:	4290      	cmpeq	r0, r2
 80054d6:	bf2c      	ite	cs
 80054d8:	17d8      	asrcs	r0, r3, #31
 80054da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80054de:	f040 0001 	orr.w	r0, r0, #1
 80054e2:	4770      	bx	lr
 80054e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80054e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80054ec:	d102      	bne.n	80054f4 <__cmpdf2+0x64>
 80054ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80054f2:	d107      	bne.n	8005504 <__cmpdf2+0x74>
 80054f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80054f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80054fc:	d1d6      	bne.n	80054ac <__cmpdf2+0x1c>
 80054fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005502:	d0d3      	beq.n	80054ac <__cmpdf2+0x1c>
 8005504:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop

0800550c <__aeabi_cdrcmple>:
 800550c:	4684      	mov	ip, r0
 800550e:	4610      	mov	r0, r2
 8005510:	4662      	mov	r2, ip
 8005512:	468c      	mov	ip, r1
 8005514:	4619      	mov	r1, r3
 8005516:	4663      	mov	r3, ip
 8005518:	e000      	b.n	800551c <__aeabi_cdcmpeq>
 800551a:	bf00      	nop

0800551c <__aeabi_cdcmpeq>:
 800551c:	b501      	push	{r0, lr}
 800551e:	f7ff ffb7 	bl	8005490 <__cmpdf2>
 8005522:	2800      	cmp	r0, #0
 8005524:	bf48      	it	mi
 8005526:	f110 0f00 	cmnmi.w	r0, #0
 800552a:	bd01      	pop	{r0, pc}

0800552c <__aeabi_dcmpeq>:
 800552c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005530:	f7ff fff4 	bl	800551c <__aeabi_cdcmpeq>
 8005534:	bf0c      	ite	eq
 8005536:	2001      	moveq	r0, #1
 8005538:	2000      	movne	r0, #0
 800553a:	f85d fb08 	ldr.w	pc, [sp], #8
 800553e:	bf00      	nop

08005540 <__aeabi_dcmplt>:
 8005540:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005544:	f7ff ffea 	bl	800551c <__aeabi_cdcmpeq>
 8005548:	bf34      	ite	cc
 800554a:	2001      	movcc	r0, #1
 800554c:	2000      	movcs	r0, #0
 800554e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005552:	bf00      	nop

08005554 <__aeabi_dcmple>:
 8005554:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005558:	f7ff ffe0 	bl	800551c <__aeabi_cdcmpeq>
 800555c:	bf94      	ite	ls
 800555e:	2001      	movls	r0, #1
 8005560:	2000      	movhi	r0, #0
 8005562:	f85d fb08 	ldr.w	pc, [sp], #8
 8005566:	bf00      	nop

08005568 <__aeabi_dcmpge>:
 8005568:	f84d ed08 	str.w	lr, [sp, #-8]!
 800556c:	f7ff ffce 	bl	800550c <__aeabi_cdrcmple>
 8005570:	bf94      	ite	ls
 8005572:	2001      	movls	r0, #1
 8005574:	2000      	movhi	r0, #0
 8005576:	f85d fb08 	ldr.w	pc, [sp], #8
 800557a:	bf00      	nop

0800557c <__aeabi_dcmpgt>:
 800557c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005580:	f7ff ffc4 	bl	800550c <__aeabi_cdrcmple>
 8005584:	bf34      	ite	cc
 8005586:	2001      	movcc	r0, #1
 8005588:	2000      	movcs	r0, #0
 800558a:	f85d fb08 	ldr.w	pc, [sp], #8
 800558e:	bf00      	nop

08005590 <__aeabi_d2iz>:
 8005590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005594:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8005598:	d215      	bcs.n	80055c6 <__aeabi_d2iz+0x36>
 800559a:	d511      	bpl.n	80055c0 <__aeabi_d2iz+0x30>
 800559c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80055a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80055a4:	d912      	bls.n	80055cc <__aeabi_d2iz+0x3c>
 80055a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80055aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80055b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80055b6:	fa23 f002 	lsr.w	r0, r3, r2
 80055ba:	bf18      	it	ne
 80055bc:	4240      	negne	r0, r0
 80055be:	4770      	bx	lr
 80055c0:	f04f 0000 	mov.w	r0, #0
 80055c4:	4770      	bx	lr
 80055c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80055ca:	d105      	bne.n	80055d8 <__aeabi_d2iz+0x48>
 80055cc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80055d0:	bf08      	it	eq
 80055d2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80055d6:	4770      	bx	lr
 80055d8:	f04f 0000 	mov.w	r0, #0
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop

080055e0 <__aeabi_d2f>:
 80055e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80055e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80055e8:	bf24      	itt	cs
 80055ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80055ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80055f2:	d90d      	bls.n	8005610 <__aeabi_d2f+0x30>
 80055f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80055f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80055fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005600:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005604:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005608:	bf08      	it	eq
 800560a:	f020 0001 	biceq.w	r0, r0, #1
 800560e:	4770      	bx	lr
 8005610:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005614:	d121      	bne.n	800565a <__aeabi_d2f+0x7a>
 8005616:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800561a:	bfbc      	itt	lt
 800561c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005620:	4770      	bxlt	lr
 8005622:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005626:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800562a:	f1c2 0218 	rsb	r2, r2, #24
 800562e:	f1c2 0c20 	rsb	ip, r2, #32
 8005632:	fa10 f30c 	lsls.w	r3, r0, ip
 8005636:	fa20 f002 	lsr.w	r0, r0, r2
 800563a:	bf18      	it	ne
 800563c:	f040 0001 	orrne.w	r0, r0, #1
 8005640:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005644:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005648:	fa03 fc0c 	lsl.w	ip, r3, ip
 800564c:	ea40 000c 	orr.w	r0, r0, ip
 8005650:	fa23 f302 	lsr.w	r3, r3, r2
 8005654:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005658:	e7cc      	b.n	80055f4 <__aeabi_d2f+0x14>
 800565a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800565e:	d107      	bne.n	8005670 <__aeabi_d2f+0x90>
 8005660:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005664:	bf1e      	ittt	ne
 8005666:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800566a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800566e:	4770      	bxne	lr
 8005670:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005674:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005678:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop

08005680 <__aeabi_frsub>:
 8005680:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005684:	e002      	b.n	800568c <__addsf3>
 8005686:	bf00      	nop

08005688 <__aeabi_fsub>:
 8005688:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800568c <__addsf3>:
 800568c:	0042      	lsls	r2, r0, #1
 800568e:	bf1f      	itttt	ne
 8005690:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8005694:	ea92 0f03 	teqne	r2, r3
 8005698:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800569c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80056a0:	d06a      	beq.n	8005778 <__addsf3+0xec>
 80056a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80056a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80056aa:	bfc1      	itttt	gt
 80056ac:	18d2      	addgt	r2, r2, r3
 80056ae:	4041      	eorgt	r1, r0
 80056b0:	4048      	eorgt	r0, r1
 80056b2:	4041      	eorgt	r1, r0
 80056b4:	bfb8      	it	lt
 80056b6:	425b      	neglt	r3, r3
 80056b8:	2b19      	cmp	r3, #25
 80056ba:	bf88      	it	hi
 80056bc:	4770      	bxhi	lr
 80056be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80056c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80056c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80056ca:	bf18      	it	ne
 80056cc:	4240      	negne	r0, r0
 80056ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80056d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80056d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80056da:	bf18      	it	ne
 80056dc:	4249      	negne	r1, r1
 80056de:	ea92 0f03 	teq	r2, r3
 80056e2:	d03f      	beq.n	8005764 <__addsf3+0xd8>
 80056e4:	f1a2 0201 	sub.w	r2, r2, #1
 80056e8:	fa41 fc03 	asr.w	ip, r1, r3
 80056ec:	eb10 000c 	adds.w	r0, r0, ip
 80056f0:	f1c3 0320 	rsb	r3, r3, #32
 80056f4:	fa01 f103 	lsl.w	r1, r1, r3
 80056f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80056fc:	d502      	bpl.n	8005704 <__addsf3+0x78>
 80056fe:	4249      	negs	r1, r1
 8005700:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8005704:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005708:	d313      	bcc.n	8005732 <__addsf3+0xa6>
 800570a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800570e:	d306      	bcc.n	800571e <__addsf3+0x92>
 8005710:	0840      	lsrs	r0, r0, #1
 8005712:	ea4f 0131 	mov.w	r1, r1, rrx
 8005716:	f102 0201 	add.w	r2, r2, #1
 800571a:	2afe      	cmp	r2, #254	; 0xfe
 800571c:	d251      	bcs.n	80057c2 <__addsf3+0x136>
 800571e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8005722:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005726:	bf08      	it	eq
 8005728:	f020 0001 	biceq.w	r0, r0, #1
 800572c:	ea40 0003 	orr.w	r0, r0, r3
 8005730:	4770      	bx	lr
 8005732:	0049      	lsls	r1, r1, #1
 8005734:	eb40 0000 	adc.w	r0, r0, r0
 8005738:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800573c:	f1a2 0201 	sub.w	r2, r2, #1
 8005740:	d1ed      	bne.n	800571e <__addsf3+0x92>
 8005742:	fab0 fc80 	clz	ip, r0
 8005746:	f1ac 0c08 	sub.w	ip, ip, #8
 800574a:	ebb2 020c 	subs.w	r2, r2, ip
 800574e:	fa00 f00c 	lsl.w	r0, r0, ip
 8005752:	bfaa      	itet	ge
 8005754:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8005758:	4252      	neglt	r2, r2
 800575a:	4318      	orrge	r0, r3
 800575c:	bfbc      	itt	lt
 800575e:	40d0      	lsrlt	r0, r2
 8005760:	4318      	orrlt	r0, r3
 8005762:	4770      	bx	lr
 8005764:	f092 0f00 	teq	r2, #0
 8005768:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800576c:	bf06      	itte	eq
 800576e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8005772:	3201      	addeq	r2, #1
 8005774:	3b01      	subne	r3, #1
 8005776:	e7b5      	b.n	80056e4 <__addsf3+0x58>
 8005778:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800577c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005780:	bf18      	it	ne
 8005782:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005786:	d021      	beq.n	80057cc <__addsf3+0x140>
 8005788:	ea92 0f03 	teq	r2, r3
 800578c:	d004      	beq.n	8005798 <__addsf3+0x10c>
 800578e:	f092 0f00 	teq	r2, #0
 8005792:	bf08      	it	eq
 8005794:	4608      	moveq	r0, r1
 8005796:	4770      	bx	lr
 8005798:	ea90 0f01 	teq	r0, r1
 800579c:	bf1c      	itt	ne
 800579e:	2000      	movne	r0, #0
 80057a0:	4770      	bxne	lr
 80057a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80057a6:	d104      	bne.n	80057b2 <__addsf3+0x126>
 80057a8:	0040      	lsls	r0, r0, #1
 80057aa:	bf28      	it	cs
 80057ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80057b0:	4770      	bx	lr
 80057b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80057b6:	bf3c      	itt	cc
 80057b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80057bc:	4770      	bxcc	lr
 80057be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80057c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80057c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80057ca:	4770      	bx	lr
 80057cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80057d0:	bf16      	itet	ne
 80057d2:	4608      	movne	r0, r1
 80057d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80057d8:	4601      	movne	r1, r0
 80057da:	0242      	lsls	r2, r0, #9
 80057dc:	bf06      	itte	eq
 80057de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80057e2:	ea90 0f01 	teqeq	r0, r1
 80057e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80057ea:	4770      	bx	lr

080057ec <__aeabi_ui2f>:
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	e004      	b.n	80057fc <__aeabi_i2f+0x8>
 80057f2:	bf00      	nop

080057f4 <__aeabi_i2f>:
 80057f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80057f8:	bf48      	it	mi
 80057fa:	4240      	negmi	r0, r0
 80057fc:	ea5f 0c00 	movs.w	ip, r0
 8005800:	bf08      	it	eq
 8005802:	4770      	bxeq	lr
 8005804:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8005808:	4601      	mov	r1, r0
 800580a:	f04f 0000 	mov.w	r0, #0
 800580e:	e01c      	b.n	800584a <__aeabi_l2f+0x2a>

08005810 <__aeabi_ul2f>:
 8005810:	ea50 0201 	orrs.w	r2, r0, r1
 8005814:	bf08      	it	eq
 8005816:	4770      	bxeq	lr
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e00a      	b.n	8005834 <__aeabi_l2f+0x14>
 800581e:	bf00      	nop

08005820 <__aeabi_l2f>:
 8005820:	ea50 0201 	orrs.w	r2, r0, r1
 8005824:	bf08      	it	eq
 8005826:	4770      	bxeq	lr
 8005828:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800582c:	d502      	bpl.n	8005834 <__aeabi_l2f+0x14>
 800582e:	4240      	negs	r0, r0
 8005830:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005834:	ea5f 0c01 	movs.w	ip, r1
 8005838:	bf02      	ittt	eq
 800583a:	4684      	moveq	ip, r0
 800583c:	4601      	moveq	r1, r0
 800583e:	2000      	moveq	r0, #0
 8005840:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8005844:	bf08      	it	eq
 8005846:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800584a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800584e:	fabc f28c 	clz	r2, ip
 8005852:	3a08      	subs	r2, #8
 8005854:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8005858:	db10      	blt.n	800587c <__aeabi_l2f+0x5c>
 800585a:	fa01 fc02 	lsl.w	ip, r1, r2
 800585e:	4463      	add	r3, ip
 8005860:	fa00 fc02 	lsl.w	ip, r0, r2
 8005864:	f1c2 0220 	rsb	r2, r2, #32
 8005868:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800586c:	fa20 f202 	lsr.w	r2, r0, r2
 8005870:	eb43 0002 	adc.w	r0, r3, r2
 8005874:	bf08      	it	eq
 8005876:	f020 0001 	biceq.w	r0, r0, #1
 800587a:	4770      	bx	lr
 800587c:	f102 0220 	add.w	r2, r2, #32
 8005880:	fa01 fc02 	lsl.w	ip, r1, r2
 8005884:	f1c2 0220 	rsb	r2, r2, #32
 8005888:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800588c:	fa21 f202 	lsr.w	r2, r1, r2
 8005890:	eb43 0002 	adc.w	r0, r3, r2
 8005894:	bf08      	it	eq
 8005896:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800589a:	4770      	bx	lr

0800589c <__aeabi_fmul>:
 800589c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80058a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80058a4:	bf1e      	ittt	ne
 80058a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80058aa:	ea92 0f0c 	teqne	r2, ip
 80058ae:	ea93 0f0c 	teqne	r3, ip
 80058b2:	d06f      	beq.n	8005994 <__aeabi_fmul+0xf8>
 80058b4:	441a      	add	r2, r3
 80058b6:	ea80 0c01 	eor.w	ip, r0, r1
 80058ba:	0240      	lsls	r0, r0, #9
 80058bc:	bf18      	it	ne
 80058be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80058c2:	d01e      	beq.n	8005902 <__aeabi_fmul+0x66>
 80058c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80058cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80058d0:	fba0 3101 	umull	r3, r1, r0, r1
 80058d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80058d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80058dc:	bf3e      	ittt	cc
 80058de:	0049      	lslcc	r1, r1, #1
 80058e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80058e4:	005b      	lslcc	r3, r3, #1
 80058e6:	ea40 0001 	orr.w	r0, r0, r1
 80058ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80058ee:	2afd      	cmp	r2, #253	; 0xfd
 80058f0:	d81d      	bhi.n	800592e <__aeabi_fmul+0x92>
 80058f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80058fa:	bf08      	it	eq
 80058fc:	f020 0001 	biceq.w	r0, r0, #1
 8005900:	4770      	bx	lr
 8005902:	f090 0f00 	teq	r0, #0
 8005906:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800590a:	bf08      	it	eq
 800590c:	0249      	lsleq	r1, r1, #9
 800590e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005912:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8005916:	3a7f      	subs	r2, #127	; 0x7f
 8005918:	bfc2      	ittt	gt
 800591a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800591e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005922:	4770      	bxgt	lr
 8005924:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	3a01      	subs	r2, #1
 800592e:	dc5d      	bgt.n	80059ec <__aeabi_fmul+0x150>
 8005930:	f112 0f19 	cmn.w	r2, #25
 8005934:	bfdc      	itt	le
 8005936:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800593a:	4770      	bxle	lr
 800593c:	f1c2 0200 	rsb	r2, r2, #0
 8005940:	0041      	lsls	r1, r0, #1
 8005942:	fa21 f102 	lsr.w	r1, r1, r2
 8005946:	f1c2 0220 	rsb	r2, r2, #32
 800594a:	fa00 fc02 	lsl.w	ip, r0, r2
 800594e:	ea5f 0031 	movs.w	r0, r1, rrx
 8005952:	f140 0000 	adc.w	r0, r0, #0
 8005956:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800595a:	bf08      	it	eq
 800595c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005960:	4770      	bx	lr
 8005962:	f092 0f00 	teq	r2, #0
 8005966:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800596a:	bf02      	ittt	eq
 800596c:	0040      	lsleq	r0, r0, #1
 800596e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005972:	3a01      	subeq	r2, #1
 8005974:	d0f9      	beq.n	800596a <__aeabi_fmul+0xce>
 8005976:	ea40 000c 	orr.w	r0, r0, ip
 800597a:	f093 0f00 	teq	r3, #0
 800597e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005982:	bf02      	ittt	eq
 8005984:	0049      	lsleq	r1, r1, #1
 8005986:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800598a:	3b01      	subeq	r3, #1
 800598c:	d0f9      	beq.n	8005982 <__aeabi_fmul+0xe6>
 800598e:	ea41 010c 	orr.w	r1, r1, ip
 8005992:	e78f      	b.n	80058b4 <__aeabi_fmul+0x18>
 8005994:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005998:	ea92 0f0c 	teq	r2, ip
 800599c:	bf18      	it	ne
 800599e:	ea93 0f0c 	teqne	r3, ip
 80059a2:	d00a      	beq.n	80059ba <__aeabi_fmul+0x11e>
 80059a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80059a8:	bf18      	it	ne
 80059aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80059ae:	d1d8      	bne.n	8005962 <__aeabi_fmul+0xc6>
 80059b0:	ea80 0001 	eor.w	r0, r0, r1
 80059b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80059b8:	4770      	bx	lr
 80059ba:	f090 0f00 	teq	r0, #0
 80059be:	bf17      	itett	ne
 80059c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80059c4:	4608      	moveq	r0, r1
 80059c6:	f091 0f00 	teqne	r1, #0
 80059ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80059ce:	d014      	beq.n	80059fa <__aeabi_fmul+0x15e>
 80059d0:	ea92 0f0c 	teq	r2, ip
 80059d4:	d101      	bne.n	80059da <__aeabi_fmul+0x13e>
 80059d6:	0242      	lsls	r2, r0, #9
 80059d8:	d10f      	bne.n	80059fa <__aeabi_fmul+0x15e>
 80059da:	ea93 0f0c 	teq	r3, ip
 80059de:	d103      	bne.n	80059e8 <__aeabi_fmul+0x14c>
 80059e0:	024b      	lsls	r3, r1, #9
 80059e2:	bf18      	it	ne
 80059e4:	4608      	movne	r0, r1
 80059e6:	d108      	bne.n	80059fa <__aeabi_fmul+0x15e>
 80059e8:	ea80 0001 	eor.w	r0, r0, r1
 80059ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80059f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80059f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80059f8:	4770      	bx	lr
 80059fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80059fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8005a02:	4770      	bx	lr

08005a04 <__aeabi_fdiv>:
 8005a04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005a08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005a0c:	bf1e      	ittt	ne
 8005a0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005a12:	ea92 0f0c 	teqne	r2, ip
 8005a16:	ea93 0f0c 	teqne	r3, ip
 8005a1a:	d069      	beq.n	8005af0 <__aeabi_fdiv+0xec>
 8005a1c:	eba2 0203 	sub.w	r2, r2, r3
 8005a20:	ea80 0c01 	eor.w	ip, r0, r1
 8005a24:	0249      	lsls	r1, r1, #9
 8005a26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8005a2a:	d037      	beq.n	8005a9c <__aeabi_fdiv+0x98>
 8005a2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8005a34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8005a38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005a3c:	428b      	cmp	r3, r1
 8005a3e:	bf38      	it	cc
 8005a40:	005b      	lslcc	r3, r3, #1
 8005a42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8005a46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8005a4a:	428b      	cmp	r3, r1
 8005a4c:	bf24      	itt	cs
 8005a4e:	1a5b      	subcs	r3, r3, r1
 8005a50:	ea40 000c 	orrcs.w	r0, r0, ip
 8005a54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8005a58:	bf24      	itt	cs
 8005a5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8005a5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005a62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8005a66:	bf24      	itt	cs
 8005a68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8005a6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005a70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8005a74:	bf24      	itt	cs
 8005a76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8005a7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	bf18      	it	ne
 8005a82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8005a86:	d1e0      	bne.n	8005a4a <__aeabi_fdiv+0x46>
 8005a88:	2afd      	cmp	r2, #253	; 0xfd
 8005a8a:	f63f af50 	bhi.w	800592e <__aeabi_fmul+0x92>
 8005a8e:	428b      	cmp	r3, r1
 8005a90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005a94:	bf08      	it	eq
 8005a96:	f020 0001 	biceq.w	r0, r0, #1
 8005a9a:	4770      	bx	lr
 8005a9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005aa0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005aa4:	327f      	adds	r2, #127	; 0x7f
 8005aa6:	bfc2      	ittt	gt
 8005aa8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8005aac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005ab0:	4770      	bxgt	lr
 8005ab2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	3a01      	subs	r2, #1
 8005abc:	e737      	b.n	800592e <__aeabi_fmul+0x92>
 8005abe:	f092 0f00 	teq	r2, #0
 8005ac2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005ac6:	bf02      	ittt	eq
 8005ac8:	0040      	lsleq	r0, r0, #1
 8005aca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005ace:	3a01      	subeq	r2, #1
 8005ad0:	d0f9      	beq.n	8005ac6 <__aeabi_fdiv+0xc2>
 8005ad2:	ea40 000c 	orr.w	r0, r0, ip
 8005ad6:	f093 0f00 	teq	r3, #0
 8005ada:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005ade:	bf02      	ittt	eq
 8005ae0:	0049      	lsleq	r1, r1, #1
 8005ae2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005ae6:	3b01      	subeq	r3, #1
 8005ae8:	d0f9      	beq.n	8005ade <__aeabi_fdiv+0xda>
 8005aea:	ea41 010c 	orr.w	r1, r1, ip
 8005aee:	e795      	b.n	8005a1c <__aeabi_fdiv+0x18>
 8005af0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005af4:	ea92 0f0c 	teq	r2, ip
 8005af8:	d108      	bne.n	8005b0c <__aeabi_fdiv+0x108>
 8005afa:	0242      	lsls	r2, r0, #9
 8005afc:	f47f af7d 	bne.w	80059fa <__aeabi_fmul+0x15e>
 8005b00:	ea93 0f0c 	teq	r3, ip
 8005b04:	f47f af70 	bne.w	80059e8 <__aeabi_fmul+0x14c>
 8005b08:	4608      	mov	r0, r1
 8005b0a:	e776      	b.n	80059fa <__aeabi_fmul+0x15e>
 8005b0c:	ea93 0f0c 	teq	r3, ip
 8005b10:	d104      	bne.n	8005b1c <__aeabi_fdiv+0x118>
 8005b12:	024b      	lsls	r3, r1, #9
 8005b14:	f43f af4c 	beq.w	80059b0 <__aeabi_fmul+0x114>
 8005b18:	4608      	mov	r0, r1
 8005b1a:	e76e      	b.n	80059fa <__aeabi_fmul+0x15e>
 8005b1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005b20:	bf18      	it	ne
 8005b22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005b26:	d1ca      	bne.n	8005abe <__aeabi_fdiv+0xba>
 8005b28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8005b2c:	f47f af5c 	bne.w	80059e8 <__aeabi_fmul+0x14c>
 8005b30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005b34:	f47f af3c 	bne.w	80059b0 <__aeabi_fmul+0x114>
 8005b38:	e75f      	b.n	80059fa <__aeabi_fmul+0x15e>
 8005b3a:	bf00      	nop

08005b3c <__gesf2>:
 8005b3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005b40:	e006      	b.n	8005b50 <__cmpsf2+0x4>
 8005b42:	bf00      	nop

08005b44 <__lesf2>:
 8005b44:	f04f 0c01 	mov.w	ip, #1
 8005b48:	e002      	b.n	8005b50 <__cmpsf2+0x4>
 8005b4a:	bf00      	nop

08005b4c <__cmpsf2>:
 8005b4c:	f04f 0c01 	mov.w	ip, #1
 8005b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005b54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005b58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005b5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b60:	bf18      	it	ne
 8005b62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b66:	d011      	beq.n	8005b8c <__cmpsf2+0x40>
 8005b68:	b001      	add	sp, #4
 8005b6a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005b6e:	bf18      	it	ne
 8005b70:	ea90 0f01 	teqne	r0, r1
 8005b74:	bf58      	it	pl
 8005b76:	ebb2 0003 	subspl.w	r0, r2, r3
 8005b7a:	bf88      	it	hi
 8005b7c:	17c8      	asrhi	r0, r1, #31
 8005b7e:	bf38      	it	cc
 8005b80:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005b84:	bf18      	it	ne
 8005b86:	f040 0001 	orrne.w	r0, r0, #1
 8005b8a:	4770      	bx	lr
 8005b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b90:	d102      	bne.n	8005b98 <__cmpsf2+0x4c>
 8005b92:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005b96:	d105      	bne.n	8005ba4 <__cmpsf2+0x58>
 8005b98:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005b9c:	d1e4      	bne.n	8005b68 <__cmpsf2+0x1c>
 8005b9e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005ba2:	d0e1      	beq.n	8005b68 <__cmpsf2+0x1c>
 8005ba4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop

08005bac <__aeabi_cfrcmple>:
 8005bac:	4684      	mov	ip, r0
 8005bae:	4608      	mov	r0, r1
 8005bb0:	4661      	mov	r1, ip
 8005bb2:	e7ff      	b.n	8005bb4 <__aeabi_cfcmpeq>

08005bb4 <__aeabi_cfcmpeq>:
 8005bb4:	b50f      	push	{r0, r1, r2, r3, lr}
 8005bb6:	f7ff ffc9 	bl	8005b4c <__cmpsf2>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	bf48      	it	mi
 8005bbe:	f110 0f00 	cmnmi.w	r0, #0
 8005bc2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005bc4 <__aeabi_fcmpeq>:
 8005bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bc8:	f7ff fff4 	bl	8005bb4 <__aeabi_cfcmpeq>
 8005bcc:	bf0c      	ite	eq
 8005bce:	2001      	moveq	r0, #1
 8005bd0:	2000      	movne	r0, #0
 8005bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bd6:	bf00      	nop

08005bd8 <__aeabi_fcmplt>:
 8005bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bdc:	f7ff ffea 	bl	8005bb4 <__aeabi_cfcmpeq>
 8005be0:	bf34      	ite	cc
 8005be2:	2001      	movcc	r0, #1
 8005be4:	2000      	movcs	r0, #0
 8005be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bea:	bf00      	nop

08005bec <__aeabi_fcmple>:
 8005bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bf0:	f7ff ffe0 	bl	8005bb4 <__aeabi_cfcmpeq>
 8005bf4:	bf94      	ite	ls
 8005bf6:	2001      	movls	r0, #1
 8005bf8:	2000      	movhi	r0, #0
 8005bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bfe:	bf00      	nop

08005c00 <__aeabi_fcmpge>:
 8005c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c04:	f7ff ffd2 	bl	8005bac <__aeabi_cfrcmple>
 8005c08:	bf94      	ite	ls
 8005c0a:	2001      	movls	r0, #1
 8005c0c:	2000      	movhi	r0, #0
 8005c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c12:	bf00      	nop

08005c14 <__aeabi_fcmpgt>:
 8005c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005c18:	f7ff ffc8 	bl	8005bac <__aeabi_cfrcmple>
 8005c1c:	bf34      	ite	cc
 8005c1e:	2001      	movcc	r0, #1
 8005c20:	2000      	movcs	r0, #0
 8005c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8005c26:	bf00      	nop

08005c28 <__aeabi_f2iz>:
 8005c28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005c2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005c30:	d30f      	bcc.n	8005c52 <__aeabi_f2iz+0x2a>
 8005c32:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005c36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005c3a:	d90d      	bls.n	8005c58 <__aeabi_f2iz+0x30>
 8005c3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005c40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c44:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005c48:	fa23 f002 	lsr.w	r0, r3, r2
 8005c4c:	bf18      	it	ne
 8005c4e:	4240      	negne	r0, r0
 8005c50:	4770      	bx	lr
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	4770      	bx	lr
 8005c58:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005c5c:	d101      	bne.n	8005c62 <__aeabi_f2iz+0x3a>
 8005c5e:	0242      	lsls	r2, r0, #9
 8005c60:	d105      	bne.n	8005c6e <__aeabi_f2iz+0x46>
 8005c62:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8005c66:	bf08      	it	eq
 8005c68:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005c6c:	4770      	bx	lr
 8005c6e:	f04f 0000 	mov.w	r0, #0
 8005c72:	4770      	bx	lr

08005c74 <__aeabi_f2uiz>:
 8005c74:	0042      	lsls	r2, r0, #1
 8005c76:	d20e      	bcs.n	8005c96 <__aeabi_f2uiz+0x22>
 8005c78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005c7c:	d30b      	bcc.n	8005c96 <__aeabi_f2uiz+0x22>
 8005c7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005c82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005c86:	d409      	bmi.n	8005c9c <__aeabi_f2uiz+0x28>
 8005c88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005c8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c90:	fa23 f002 	lsr.w	r0, r3, r2
 8005c94:	4770      	bx	lr
 8005c96:	f04f 0000 	mov.w	r0, #0
 8005c9a:	4770      	bx	lr
 8005c9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005ca0:	d101      	bne.n	8005ca6 <__aeabi_f2uiz+0x32>
 8005ca2:	0242      	lsls	r2, r0, #9
 8005ca4:	d102      	bne.n	8005cac <__aeabi_f2uiz+0x38>
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005caa:	4770      	bx	lr
 8005cac:	f04f 0000 	mov.w	r0, #0
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <selfrel_offset31>:
 8005cb4:	6803      	ldr	r3, [r0, #0]
 8005cb6:	005a      	lsls	r2, r3, #1
 8005cb8:	bf4c      	ite	mi
 8005cba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005cbe:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8005cc2:	4418      	add	r0, r3
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop

08005cc8 <search_EIT_table>:
 8005cc8:	b361      	cbz	r1, 8005d24 <search_EIT_table+0x5c>
 8005cca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cce:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8005cd2:	4690      	mov	r8, r2
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	46d1      	mov	r9, sl
 8005cd8:	2700      	movs	r7, #0
 8005cda:	eb07 0409 	add.w	r4, r7, r9
 8005cde:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8005ce2:	1064      	asrs	r4, r4, #1
 8005ce4:	00e5      	lsls	r5, r4, #3
 8005ce6:	1971      	adds	r1, r6, r5
 8005ce8:	4608      	mov	r0, r1
 8005cea:	f7ff ffe3 	bl	8005cb4 <selfrel_offset31>
 8005cee:	45a2      	cmp	sl, r4
 8005cf0:	4683      	mov	fp, r0
 8005cf2:	f105 0008 	add.w	r0, r5, #8
 8005cf6:	4430      	add	r0, r6
 8005cf8:	d009      	beq.n	8005d0e <search_EIT_table+0x46>
 8005cfa:	f7ff ffdb 	bl	8005cb4 <selfrel_offset31>
 8005cfe:	45c3      	cmp	fp, r8
 8005d00:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8005d04:	d805      	bhi.n	8005d12 <search_EIT_table+0x4a>
 8005d06:	4540      	cmp	r0, r8
 8005d08:	d209      	bcs.n	8005d1e <search_EIT_table+0x56>
 8005d0a:	1c67      	adds	r7, r4, #1
 8005d0c:	e7e5      	b.n	8005cda <search_EIT_table+0x12>
 8005d0e:	45c3      	cmp	fp, r8
 8005d10:	d905      	bls.n	8005d1e <search_EIT_table+0x56>
 8005d12:	42a7      	cmp	r7, r4
 8005d14:	d002      	beq.n	8005d1c <search_EIT_table+0x54>
 8005d16:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8005d1a:	e7de      	b.n	8005cda <search_EIT_table+0x12>
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4608      	mov	r0, r1
 8005d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	4608      	mov	r0, r1
 8005d26:	4770      	bx	lr

08005d28 <__gnu_unwind_get_pr_addr>:
 8005d28:	2801      	cmp	r0, #1
 8005d2a:	d007      	beq.n	8005d3c <__gnu_unwind_get_pr_addr+0x14>
 8005d2c:	2802      	cmp	r0, #2
 8005d2e:	d007      	beq.n	8005d40 <__gnu_unwind_get_pr_addr+0x18>
 8005d30:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <__gnu_unwind_get_pr_addr+0x1c>)
 8005d32:	2800      	cmp	r0, #0
 8005d34:	bf0c      	ite	eq
 8005d36:	4618      	moveq	r0, r3
 8005d38:	2000      	movne	r0, #0
 8005d3a:	4770      	bx	lr
 8005d3c:	4802      	ldr	r0, [pc, #8]	; (8005d48 <__gnu_unwind_get_pr_addr+0x20>)
 8005d3e:	4770      	bx	lr
 8005d40:	4802      	ldr	r0, [pc, #8]	; (8005d4c <__gnu_unwind_get_pr_addr+0x24>)
 8005d42:	4770      	bx	lr
 8005d44:	0800643d 	.word	0x0800643d
 8005d48:	08006441 	.word	0x08006441
 8005d4c:	08006445 	.word	0x08006445

08005d50 <get_eit_entry>:
 8005d50:	b530      	push	{r4, r5, lr}
 8005d52:	4b25      	ldr	r3, [pc, #148]	; (8005de8 <get_eit_entry+0x98>)
 8005d54:	b083      	sub	sp, #12
 8005d56:	4604      	mov	r4, r0
 8005d58:	1e8d      	subs	r5, r1, #2
 8005d5a:	b37b      	cbz	r3, 8005dbc <get_eit_entry+0x6c>
 8005d5c:	a901      	add	r1, sp, #4
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f3af 8000 	nop.w
 8005d64:	b320      	cbz	r0, 8005db0 <get_eit_entry+0x60>
 8005d66:	9901      	ldr	r1, [sp, #4]
 8005d68:	462a      	mov	r2, r5
 8005d6a:	f7ff ffad 	bl	8005cc8 <search_EIT_table>
 8005d6e:	4601      	mov	r1, r0
 8005d70:	b1f0      	cbz	r0, 8005db0 <get_eit_entry+0x60>
 8005d72:	f7ff ff9f 	bl	8005cb4 <selfrel_offset31>
 8005d76:	684b      	ldr	r3, [r1, #4]
 8005d78:	64a0      	str	r0, [r4, #72]	; 0x48
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d012      	beq.n	8005da4 <get_eit_entry+0x54>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f101 0004 	add.w	r0, r1, #4
 8005d84:	db21      	blt.n	8005dca <get_eit_entry+0x7a>
 8005d86:	f7ff ff95 	bl	8005cb4 <selfrel_offset31>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005d8e:	6523      	str	r3, [r4, #80]	; 0x50
 8005d90:	6803      	ldr	r3, [r0, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	db1d      	blt.n	8005dd2 <get_eit_entry+0x82>
 8005d96:	f7ff ff8d 	bl	8005cb4 <selfrel_offset31>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6120      	str	r0, [r4, #16]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	b003      	add	sp, #12
 8005da2:	bd30      	pop	{r4, r5, pc}
 8005da4:	2300      	movs	r3, #0
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	2305      	movs	r3, #5
 8005daa:	4618      	mov	r0, r3
 8005dac:	b003      	add	sp, #12
 8005dae:	bd30      	pop	{r4, r5, pc}
 8005db0:	2300      	movs	r3, #0
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	2309      	movs	r3, #9
 8005db6:	4618      	mov	r0, r3
 8005db8:	b003      	add	sp, #12
 8005dba:	bd30      	pop	{r4, r5, pc}
 8005dbc:	490b      	ldr	r1, [pc, #44]	; (8005dec <get_eit_entry+0x9c>)
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <get_eit_entry+0xa0>)
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	1a59      	subs	r1, r3, r1
 8005dc4:	10c9      	asrs	r1, r1, #3
 8005dc6:	9101      	str	r1, [sp, #4]
 8005dc8:	e7ce      	b.n	8005d68 <get_eit_entry+0x18>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005dce:	6523      	str	r3, [r4, #80]	; 0x50
 8005dd0:	e7de      	b.n	8005d90 <get_eit_entry+0x40>
 8005dd2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005dd6:	f7ff ffa7 	bl	8005d28 <__gnu_unwind_get_pr_addr>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	6120      	str	r0, [r4, #16]
 8005dde:	bf14      	ite	ne
 8005de0:	2300      	movne	r3, #0
 8005de2:	2309      	moveq	r3, #9
 8005de4:	e7db      	b.n	8005d9e <get_eit_entry+0x4e>
 8005de6:	bf00      	nop
 8005de8:	00000000 	.word	0x00000000
 8005dec:	08016a44 	.word	0x08016a44
 8005df0:	08016bec 	.word	0x08016bec

08005df4 <restore_non_core_regs>:
 8005df4:	6803      	ldr	r3, [r0, #0]
 8005df6:	b510      	push	{r4, lr}
 8005df8:	07da      	lsls	r2, r3, #31
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	d406      	bmi.n	8005e0c <restore_non_core_regs+0x18>
 8005dfe:	079b      	lsls	r3, r3, #30
 8005e00:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005e04:	d509      	bpl.n	8005e1a <restore_non_core_regs+0x26>
 8005e06:	f000 fc5b 	bl	80066c0 <__gnu_Unwind_Restore_VFP_D>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	0759      	lsls	r1, r3, #29
 8005e0e:	d509      	bpl.n	8005e24 <restore_non_core_regs+0x30>
 8005e10:	071a      	lsls	r2, r3, #28
 8005e12:	d50e      	bpl.n	8005e32 <restore_non_core_regs+0x3e>
 8005e14:	06db      	lsls	r3, r3, #27
 8005e16:	d513      	bpl.n	8005e40 <restore_non_core_regs+0x4c>
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	f000 fc49 	bl	80066b0 <__gnu_Unwind_Restore_VFP>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	0759      	lsls	r1, r3, #29
 8005e22:	d4f5      	bmi.n	8005e10 <restore_non_core_regs+0x1c>
 8005e24:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005e28:	f000 fc52 	bl	80066d0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	071a      	lsls	r2, r3, #28
 8005e30:	d4f0      	bmi.n	8005e14 <restore_non_core_regs+0x20>
 8005e32:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8005e36:	f000 fc53 	bl	80066e0 <__gnu_Unwind_Restore_WMMXD>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	06db      	lsls	r3, r3, #27
 8005e3e:	d4eb      	bmi.n	8005e18 <restore_non_core_regs+0x24>
 8005e40:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8005e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e48:	f000 bc8e 	b.w	8006768 <__gnu_Unwind_Restore_WMMXC>

08005e4c <_Unwind_decode_typeinfo_ptr.isra.0>:
 8005e4c:	6803      	ldr	r3, [r0, #0]
 8005e4e:	b10b      	cbz	r3, 8005e54 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8005e50:	4418      	add	r0, r3
 8005e52:	4770      	bx	lr
 8005e54:	4618      	mov	r0, r3
 8005e56:	4770      	bx	lr

08005e58 <__gnu_unwind_24bit.isra.1>:
 8005e58:	2009      	movs	r0, #9
 8005e5a:	4770      	bx	lr

08005e5c <_Unwind_DebugHook>:
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop

08005e60 <unwind_phase2>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	4604      	mov	r4, r0
 8005e64:	460d      	mov	r5, r1
 8005e66:	e008      	b.n	8005e7a <unwind_phase2+0x1a>
 8005e68:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005e6a:	6923      	ldr	r3, [r4, #16]
 8005e6c:	6162      	str	r2, [r4, #20]
 8005e6e:	4621      	mov	r1, r4
 8005e70:	462a      	mov	r2, r5
 8005e72:	2001      	movs	r0, #1
 8005e74:	4798      	blx	r3
 8005e76:	2808      	cmp	r0, #8
 8005e78:	d108      	bne.n	8005e8c <unwind_phase2+0x2c>
 8005e7a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7ff ff67 	bl	8005d50 <get_eit_entry>
 8005e82:	4606      	mov	r6, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d0ef      	beq.n	8005e68 <unwind_phase2+0x8>
 8005e88:	f00d fa48 	bl	801331c <abort>
 8005e8c:	2807      	cmp	r0, #7
 8005e8e:	d1fb      	bne.n	8005e88 <unwind_phase2+0x28>
 8005e90:	4630      	mov	r0, r6
 8005e92:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005e94:	f7ff ffe2 	bl	8005e5c <_Unwind_DebugHook>
 8005e98:	1d28      	adds	r0, r5, #4
 8005e9a:	f000 fbfd 	bl	8006698 <__restore_core_regs>
 8005e9e:	bf00      	nop

08005ea0 <unwind_phase2_forced>:
 8005ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8005eaa:	ad03      	add	r5, sp, #12
 8005eac:	1d0c      	adds	r4, r1, #4
 8005eae:	4617      	mov	r7, r2
 8005eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ebc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005ec0:	ac02      	add	r4, sp, #8
 8005ec2:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005ec6:	f8d6 9018 	ldr.w	r9, [r6, #24]
 8005eca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005ece:	2300      	movs	r3, #0
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	f7ff ff3b 	bl	8005d50 <get_eit_entry>
 8005eda:	4605      	mov	r5, r0
 8005edc:	2f00      	cmp	r7, #0
 8005ede:	bf14      	ite	ne
 8005ee0:	270a      	movne	r7, #10
 8005ee2:	2709      	moveq	r7, #9
 8005ee4:	b17d      	cbz	r5, 8005f06 <unwind_phase2_forced+0x66>
 8005ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ee8:	f047 0110 	orr.w	r1, r7, #16
 8005eec:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	6463      	str	r3, [r4, #68]	; 0x44
 8005ef4:	2001      	movs	r0, #1
 8005ef6:	4633      	mov	r3, r6
 8005ef8:	47c0      	blx	r8
 8005efa:	bb78      	cbnz	r0, 8005f5c <unwind_phase2_forced+0xbc>
 8005efc:	4628      	mov	r0, r5
 8005efe:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005f0c:	6173      	str	r3, [r6, #20]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	a87a      	add	r0, sp, #488	; 0x1e8
 8005f12:	f00d fac6 	bl	80134a2 <memcpy>
 8005f16:	6933      	ldr	r3, [r6, #16]
 8005f18:	aa7a      	add	r2, sp, #488	; 0x1e8
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	4798      	blx	r3
 8005f20:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8005f22:	4682      	mov	sl, r0
 8005f24:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005f28:	4639      	mov	r1, r7
 8005f2a:	6463      	str	r3, [r4, #68]	; 0x44
 8005f2c:	4632      	mov	r2, r6
 8005f2e:	4633      	mov	r3, r6
 8005f30:	2001      	movs	r0, #1
 8005f32:	47c0      	blx	r8
 8005f34:	b990      	cbnz	r0, 8005f5c <unwind_phase2_forced+0xbc>
 8005f36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005f3a:	a97a      	add	r1, sp, #488	; 0x1e8
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f00d fab0 	bl	80134a2 <memcpy>
 8005f42:	f1ba 0f08 	cmp.w	sl, #8
 8005f46:	d106      	bne.n	8005f56 <unwind_phase2_forced+0xb6>
 8005f48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f7ff ff00 	bl	8005d50 <get_eit_entry>
 8005f50:	2709      	movs	r7, #9
 8005f52:	4605      	mov	r5, r0
 8005f54:	e7c6      	b.n	8005ee4 <unwind_phase2_forced+0x44>
 8005f56:	f1ba 0f07 	cmp.w	sl, #7
 8005f5a:	d004      	beq.n	8005f66 <unwind_phase2_forced+0xc6>
 8005f5c:	2009      	movs	r0, #9
 8005f5e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f66:	4628      	mov	r0, r5
 8005f68:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f6a:	f7ff ff77 	bl	8005e5c <_Unwind_DebugHook>
 8005f6e:	a803      	add	r0, sp, #12
 8005f70:	f000 fb92 	bl	8006698 <__restore_core_regs>

08005f74 <_Unwind_GetCFA>:
 8005f74:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005f76:	4770      	bx	lr

08005f78 <__gnu_Unwind_RaiseException>:
 8005f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005f7c:	b0f9      	sub	sp, #484	; 0x1e4
 8005f7e:	640b      	str	r3, [r1, #64]	; 0x40
 8005f80:	1d0e      	adds	r6, r1, #4
 8005f82:	ad01      	add	r5, sp, #4
 8005f84:	460f      	mov	r7, r1
 8005f86:	4604      	mov	r4, r0
 8005f88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f8c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f94:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005f98:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005f9c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005fa0:	9600      	str	r6, [sp, #0]
 8005fa2:	e006      	b.n	8005fb2 <__gnu_Unwind_RaiseException+0x3a>
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	466a      	mov	r2, sp
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4798      	blx	r3
 8005fac:	2808      	cmp	r0, #8
 8005fae:	4605      	mov	r5, r0
 8005fb0:	d108      	bne.n	8005fc4 <__gnu_Unwind_RaiseException+0x4c>
 8005fb2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7ff fecb 	bl	8005d50 <get_eit_entry>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d0f2      	beq.n	8005fa4 <__gnu_Unwind_RaiseException+0x2c>
 8005fbe:	2009      	movs	r0, #9
 8005fc0:	b079      	add	sp, #484	; 0x1e4
 8005fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc4:	4668      	mov	r0, sp
 8005fc6:	f7ff ff15 	bl	8005df4 <restore_non_core_regs>
 8005fca:	2d06      	cmp	r5, #6
 8005fcc:	d1f7      	bne.n	8005fbe <__gnu_Unwind_RaiseException+0x46>
 8005fce:	4639      	mov	r1, r7
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff ff45 	bl	8005e60 <unwind_phase2>
 8005fd6:	bf00      	nop

08005fd8 <__gnu_Unwind_ForcedUnwind>:
 8005fd8:	b430      	push	{r4, r5}
 8005fda:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8005fdc:	60c1      	str	r1, [r0, #12]
 8005fde:	6182      	str	r2, [r0, #24]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	641d      	str	r5, [r3, #64]	; 0x40
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	bc30      	pop	{r4, r5}
 8005fe8:	e75a      	b.n	8005ea0 <unwind_phase2_forced>
 8005fea:	bf00      	nop

08005fec <__gnu_Unwind_Resume>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	6943      	ldr	r3, [r0, #20]
 8005ff0:	68c6      	ldr	r6, [r0, #12]
 8005ff2:	640b      	str	r3, [r1, #64]	; 0x40
 8005ff4:	b126      	cbz	r6, 8006000 <__gnu_Unwind_Resume+0x14>
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f7ff ff52 	bl	8005ea0 <unwind_phase2_forced>
 8005ffc:	f00d f98e 	bl	801331c <abort>
 8006000:	6903      	ldr	r3, [r0, #16]
 8006002:	460a      	mov	r2, r1
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	4601      	mov	r1, r0
 800600a:	2002      	movs	r0, #2
 800600c:	4798      	blx	r3
 800600e:	2807      	cmp	r0, #7
 8006010:	d007      	beq.n	8006022 <__gnu_Unwind_Resume+0x36>
 8006012:	2808      	cmp	r0, #8
 8006014:	d103      	bne.n	800601e <__gnu_Unwind_Resume+0x32>
 8006016:	4629      	mov	r1, r5
 8006018:	4620      	mov	r0, r4
 800601a:	f7ff ff21 	bl	8005e60 <unwind_phase2>
 800601e:	f00d f97d 	bl	801331c <abort>
 8006022:	4630      	mov	r0, r6
 8006024:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006026:	f7ff ff19 	bl	8005e5c <_Unwind_DebugHook>
 800602a:	1d28      	adds	r0, r5, #4
 800602c:	f000 fb34 	bl	8006698 <__restore_core_regs>

08006030 <__gnu_Unwind_Resume_or_Rethrow>:
 8006030:	68c2      	ldr	r2, [r0, #12]
 8006032:	b12a      	cbz	r2, 8006040 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8006034:	b410      	push	{r4}
 8006036:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8006038:	2200      	movs	r2, #0
 800603a:	640c      	str	r4, [r1, #64]	; 0x40
 800603c:	bc10      	pop	{r4}
 800603e:	e72f      	b.n	8005ea0 <unwind_phase2_forced>
 8006040:	e79a      	b.n	8005f78 <__gnu_Unwind_RaiseException>
 8006042:	bf00      	nop

08006044 <_Unwind_Complete>:
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop

08006048 <_Unwind_DeleteException>:
 8006048:	6883      	ldr	r3, [r0, #8]
 800604a:	b113      	cbz	r3, 8006052 <_Unwind_DeleteException+0xa>
 800604c:	4601      	mov	r1, r0
 800604e:	2001      	movs	r0, #1
 8006050:	4718      	bx	r3
 8006052:	4770      	bx	lr

08006054 <_Unwind_VRS_Get>:
 8006054:	b500      	push	{lr}
 8006056:	2904      	cmp	r1, #4
 8006058:	d807      	bhi.n	800606a <_Unwind_VRS_Get+0x16>
 800605a:	e8df f001 	tbb	[pc, r1]
 800605e:	0903      	.short	0x0903
 8006060:	0906      	.short	0x0906
 8006062:	09          	.byte	0x09
 8006063:	00          	.byte	0x00
 8006064:	b90b      	cbnz	r3, 800606a <_Unwind_VRS_Get+0x16>
 8006066:	2a0f      	cmp	r2, #15
 8006068:	d905      	bls.n	8006076 <_Unwind_VRS_Get+0x22>
 800606a:	2002      	movs	r0, #2
 800606c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006070:	2001      	movs	r0, #1
 8006072:	f85d fb04 	ldr.w	pc, [sp], #4
 8006076:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800607a:	6852      	ldr	r2, [r2, #4]
 800607c:	4618      	mov	r0, r3
 800607e:	9b01      	ldr	r3, [sp, #4]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	f85d fb04 	ldr.w	pc, [sp], #4
 8006086:	bf00      	nop

08006088 <_Unwind_GetGR>:
 8006088:	b510      	push	{r4, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	2300      	movs	r3, #0
 800608e:	ac03      	add	r4, sp, #12
 8006090:	460a      	mov	r2, r1
 8006092:	9400      	str	r4, [sp, #0]
 8006094:	4619      	mov	r1, r3
 8006096:	f7ff ffdd 	bl	8006054 <_Unwind_VRS_Get>
 800609a:	9803      	ldr	r0, [sp, #12]
 800609c:	b004      	add	sp, #16
 800609e:	bd10      	pop	{r4, pc}

080060a0 <_Unwind_VRS_Set>:
 80060a0:	b500      	push	{lr}
 80060a2:	2904      	cmp	r1, #4
 80060a4:	d807      	bhi.n	80060b6 <_Unwind_VRS_Set+0x16>
 80060a6:	e8df f001 	tbb	[pc, r1]
 80060aa:	0903      	.short	0x0903
 80060ac:	0906      	.short	0x0906
 80060ae:	09          	.byte	0x09
 80060af:	00          	.byte	0x00
 80060b0:	b90b      	cbnz	r3, 80060b6 <_Unwind_VRS_Set+0x16>
 80060b2:	2a0f      	cmp	r2, #15
 80060b4:	d905      	bls.n	80060c2 <_Unwind_VRS_Set+0x22>
 80060b6:	2002      	movs	r0, #2
 80060b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80060bc:	2001      	movs	r0, #1
 80060be:	f85d fb04 	ldr.w	pc, [sp], #4
 80060c2:	9901      	ldr	r1, [sp, #4]
 80060c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80060c8:	6809      	ldr	r1, [r1, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	6051      	str	r1, [r2, #4]
 80060ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80060d2:	bf00      	nop

080060d4 <_Unwind_SetGR>:
 80060d4:	b510      	push	{r4, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	ac04      	add	r4, sp, #16
 80060da:	f844 2d04 	str.w	r2, [r4, #-4]!
 80060de:	2300      	movs	r3, #0
 80060e0:	460a      	mov	r2, r1
 80060e2:	9400      	str	r4, [sp, #0]
 80060e4:	4619      	mov	r1, r3
 80060e6:	f7ff ffdb 	bl	80060a0 <_Unwind_VRS_Set>
 80060ea:	b004      	add	sp, #16
 80060ec:	bd10      	pop	{r4, pc}
 80060ee:	bf00      	nop

080060f0 <__gnu_Unwind_Backtrace>:
 80060f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060f2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80060f4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80060f8:	6413      	str	r3, [r2, #64]	; 0x40
 80060fa:	1d15      	adds	r5, r2, #4
 80060fc:	ac17      	add	r4, sp, #92	; 0x5c
 80060fe:	4607      	mov	r7, r0
 8006100:	460e      	mov	r6, r1
 8006102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800610a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800610c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800610e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006112:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006116:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800611a:	9516      	str	r5, [sp, #88]	; 0x58
 800611c:	e011      	b.n	8006142 <__gnu_Unwind_Backtrace+0x52>
 800611e:	a816      	add	r0, sp, #88	; 0x58
 8006120:	466a      	mov	r2, sp
 8006122:	f7ff ffd7 	bl	80060d4 <_Unwind_SetGR>
 8006126:	4631      	mov	r1, r6
 8006128:	a816      	add	r0, sp, #88	; 0x58
 800612a:	47b8      	blx	r7
 800612c:	b980      	cbnz	r0, 8006150 <__gnu_Unwind_Backtrace+0x60>
 800612e:	9b04      	ldr	r3, [sp, #16]
 8006130:	aa16      	add	r2, sp, #88	; 0x58
 8006132:	4669      	mov	r1, sp
 8006134:	2008      	movs	r0, #8
 8006136:	4798      	blx	r3
 8006138:	2805      	cmp	r0, #5
 800613a:	4604      	mov	r4, r0
 800613c:	d009      	beq.n	8006152 <__gnu_Unwind_Backtrace+0x62>
 800613e:	2809      	cmp	r0, #9
 8006140:	d006      	beq.n	8006150 <__gnu_Unwind_Backtrace+0x60>
 8006142:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006144:	4668      	mov	r0, sp
 8006146:	f7ff fe03 	bl	8005d50 <get_eit_entry>
 800614a:	210c      	movs	r1, #12
 800614c:	2800      	cmp	r0, #0
 800614e:	d0e6      	beq.n	800611e <__gnu_Unwind_Backtrace+0x2e>
 8006150:	2409      	movs	r4, #9
 8006152:	a816      	add	r0, sp, #88	; 0x58
 8006154:	f7ff fe4e 	bl	8005df4 <restore_non_core_regs>
 8006158:	4620      	mov	r0, r4
 800615a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800615e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006160 <__gnu_unwind_pr_common>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8006166:	4691      	mov	r9, r2
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	b08b      	sub	sp, #44	; 0x2c
 800616c:	3404      	adds	r4, #4
 800616e:	460d      	mov	r5, r1
 8006170:	9207      	str	r2, [sp, #28]
 8006172:	9408      	str	r4, [sp, #32]
 8006174:	f000 0b03 	and.w	fp, r0, #3
 8006178:	461e      	mov	r6, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d164      	bne.n	8006248 <__gnu_unwind_pr_common+0xe8>
 800617e:	0212      	lsls	r2, r2, #8
 8006180:	2303      	movs	r3, #3
 8006182:	9207      	str	r2, [sp, #28]
 8006184:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8006188:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800618c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800618e:	f1bb 0f02 	cmp.w	fp, #2
 8006192:	bf08      	it	eq
 8006194:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8006196:	f013 0301 	ands.w	r3, r3, #1
 800619a:	d143      	bne.n	8006224 <__gnu_unwind_pr_common+0xc4>
 800619c:	f000 0008 	and.w	r0, r0, #8
 80061a0:	b2c2      	uxtb	r2, r0
 80061a2:	9203      	str	r2, [sp, #12]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	6827      	ldr	r7, [r4, #0]
 80061a8:	2f00      	cmp	r7, #0
 80061aa:	d03d      	beq.n	8006228 <__gnu_unwind_pr_common+0xc8>
 80061ac:	2e02      	cmp	r6, #2
 80061ae:	d047      	beq.n	8006240 <__gnu_unwind_pr_common+0xe0>
 80061b0:	8827      	ldrh	r7, [r4, #0]
 80061b2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 80061b6:	3404      	adds	r4, #4
 80061b8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80061ba:	f028 0a01 	bic.w	sl, r8, #1
 80061be:	210f      	movs	r1, #15
 80061c0:	4648      	mov	r0, r9
 80061c2:	449a      	add	sl, r3
 80061c4:	f7ff ff60 	bl	8006088 <_Unwind_GetGR>
 80061c8:	4582      	cmp	sl, r0
 80061ca:	d837      	bhi.n	800623c <__gnu_unwind_pr_common+0xdc>
 80061cc:	f027 0301 	bic.w	r3, r7, #1
 80061d0:	449a      	add	sl, r3
 80061d2:	4550      	cmp	r0, sl
 80061d4:	bf2c      	ite	cs
 80061d6:	2000      	movcs	r0, #0
 80061d8:	2001      	movcc	r0, #1
 80061da:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80061de:	f008 0802 	and.w	r8, r8, #2
 80061e2:	f007 0701 	and.w	r7, r7, #1
 80061e6:	ea48 0807 	orr.w	r8, r8, r7
 80061ea:	f1b8 0f01 	cmp.w	r8, #1
 80061ee:	d041      	beq.n	8006274 <__gnu_unwind_pr_common+0x114>
 80061f0:	d338      	bcc.n	8006264 <__gnu_unwind_pr_common+0x104>
 80061f2:	f1b8 0f02 	cmp.w	r8, #2
 80061f6:	d11d      	bne.n	8006234 <__gnu_unwind_pr_common+0xd4>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061fe:	9202      	str	r2, [sp, #8]
 8006200:	f1bb 0f00 	cmp.w	fp, #0
 8006204:	d179      	bne.n	80062fa <__gnu_unwind_pr_common+0x19a>
 8006206:	b130      	cbz	r0, 8006216 <__gnu_unwind_pr_common+0xb6>
 8006208:	9903      	ldr	r1, [sp, #12]
 800620a:	2900      	cmp	r1, #0
 800620c:	f000 8081 	beq.w	8006312 <__gnu_unwind_pr_common+0x1b2>
 8006210:	2a00      	cmp	r2, #0
 8006212:	f000 80a8 	beq.w	8006366 <__gnu_unwind_pr_common+0x206>
 8006216:	2b00      	cmp	r3, #0
 8006218:	db79      	blt.n	800630e <__gnu_unwind_pr_common+0x1ae>
 800621a:	9b02      	ldr	r3, [sp, #8]
 800621c:	3301      	adds	r3, #1
 800621e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006222:	e7c0      	b.n	80061a6 <__gnu_unwind_pr_common+0x46>
 8006224:	2300      	movs	r3, #0
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	2e02      	cmp	r6, #2
 800622a:	dd40      	ble.n	80062ae <__gnu_unwind_pr_common+0x14e>
 800622c:	f7ff fe14 	bl	8005e58 <__gnu_unwind_24bit.isra.1>
 8006230:	2800      	cmp	r0, #0
 8006232:	d042      	beq.n	80062ba <__gnu_unwind_pr_common+0x15a>
 8006234:	2009      	movs	r0, #9
 8006236:	b00b      	add	sp, #44	; 0x2c
 8006238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623c:	2000      	movs	r0, #0
 800623e:	e7cc      	b.n	80061da <__gnu_unwind_pr_common+0x7a>
 8006240:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8006244:	3408      	adds	r4, #8
 8006246:	e7b7      	b.n	80061b8 <__gnu_unwind_pr_common+0x58>
 8006248:	2b02      	cmp	r3, #2
 800624a:	dc9f      	bgt.n	800618c <__gnu_unwind_pr_common+0x2c>
 800624c:	0c13      	lsrs	r3, r2, #16
 800624e:	b2d9      	uxtb	r1, r3
 8006250:	0412      	lsls	r2, r2, #16
 8006252:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8006256:	2302      	movs	r3, #2
 8006258:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800625c:	9207      	str	r2, [sp, #28]
 800625e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006262:	e793      	b.n	800618c <__gnu_unwind_pr_common+0x2c>
 8006264:	f1bb 0f00 	cmp.w	fp, #0
 8006268:	d002      	beq.n	8006270 <__gnu_unwind_pr_common+0x110>
 800626a:	2800      	cmp	r0, #0
 800626c:	f040 80b0 	bne.w	80063d0 <__gnu_unwind_pr_common+0x270>
 8006270:	3404      	adds	r4, #4
 8006272:	e798      	b.n	80061a6 <__gnu_unwind_pr_common+0x46>
 8006274:	f1bb 0f00 	cmp.w	fp, #0
 8006278:	d126      	bne.n	80062c8 <__gnu_unwind_pr_common+0x168>
 800627a:	b1b0      	cbz	r0, 80062aa <__gnu_unwind_pr_common+0x14a>
 800627c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006280:	1c99      	adds	r1, r3, #2
 8006282:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8006286:	d0d5      	beq.n	8006234 <__gnu_unwind_pr_common+0xd4>
 8006288:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800628c:	3301      	adds	r3, #1
 800628e:	9106      	str	r1, [sp, #24]
 8006290:	f000 8094 	beq.w	80063bc <__gnu_unwind_pr_common+0x25c>
 8006294:	1d20      	adds	r0, r4, #4
 8006296:	f7ff fdd9 	bl	8005e4c <_Unwind_decode_typeinfo_ptr.isra.0>
 800629a:	ab06      	add	r3, sp, #24
 800629c:	4601      	mov	r1, r0
 800629e:	4628      	mov	r0, r5
 80062a0:	f00b f966 	bl	8011570 <__cxa_type_match>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f040 80b8 	bne.w	800641a <__gnu_unwind_pr_common+0x2ba>
 80062aa:	3408      	adds	r4, #8
 80062ac:	e77b      	b.n	80061a6 <__gnu_unwind_pr_common+0x46>
 80062ae:	a907      	add	r1, sp, #28
 80062b0:	4648      	mov	r0, r9
 80062b2:	f000 faf3 	bl	800689c <__gnu_unwind_execute>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d1bc      	bne.n	8006234 <__gnu_unwind_pr_common+0xd4>
 80062ba:	9b01      	ldr	r3, [sp, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d15c      	bne.n	800637a <__gnu_unwind_pr_common+0x21a>
 80062c0:	2008      	movs	r0, #8
 80062c2:	b00b      	add	sp, #44	; 0x2c
 80062c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c8:	210d      	movs	r1, #13
 80062ca:	4648      	mov	r0, r9
 80062cc:	6a2f      	ldr	r7, [r5, #32]
 80062ce:	f7ff fedb 	bl	8006088 <_Unwind_GetGR>
 80062d2:	4287      	cmp	r7, r0
 80062d4:	d1e9      	bne.n	80062aa <__gnu_unwind_pr_common+0x14a>
 80062d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80062d8:	429c      	cmp	r4, r3
 80062da:	d1e6      	bne.n	80062aa <__gnu_unwind_pr_common+0x14a>
 80062dc:	4620      	mov	r0, r4
 80062de:	f7ff fce9 	bl	8005cb4 <selfrel_offset31>
 80062e2:	210f      	movs	r1, #15
 80062e4:	4602      	mov	r2, r0
 80062e6:	4648      	mov	r0, r9
 80062e8:	f7ff fef4 	bl	80060d4 <_Unwind_SetGR>
 80062ec:	4648      	mov	r0, r9
 80062ee:	462a      	mov	r2, r5
 80062f0:	2100      	movs	r1, #0
 80062f2:	f7ff feef 	bl	80060d4 <_Unwind_SetGR>
 80062f6:	2007      	movs	r0, #7
 80062f8:	e79d      	b.n	8006236 <__gnu_unwind_pr_common+0xd6>
 80062fa:	210d      	movs	r1, #13
 80062fc:	4648      	mov	r0, r9
 80062fe:	6a2f      	ldr	r7, [r5, #32]
 8006300:	f7ff fec2 	bl	8006088 <_Unwind_GetGR>
 8006304:	4287      	cmp	r7, r0
 8006306:	d048      	beq.n	800639a <__gnu_unwind_pr_common+0x23a>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	da85      	bge.n	800621a <__gnu_unwind_pr_common+0xba>
 800630e:	3404      	adds	r4, #4
 8006310:	e783      	b.n	800621a <__gnu_unwind_pr_common+0xba>
 8006312:	9b02      	ldr	r3, [sp, #8]
 8006314:	b33b      	cbz	r3, 8006366 <__gnu_unwind_pr_common+0x206>
 8006316:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800631a:	1d27      	adds	r7, r4, #4
 800631c:	f8cd b010 	str.w	fp, [sp, #16]
 8006320:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006324:	46a3      	mov	fp, r4
 8006326:	f8dd a008 	ldr.w	sl, [sp, #8]
 800632a:	461c      	mov	r4, r3
 800632c:	9605      	str	r6, [sp, #20]
 800632e:	e002      	b.n	8006336 <__gnu_unwind_pr_common+0x1d6>
 8006330:	45b2      	cmp	sl, r6
 8006332:	46b0      	mov	r8, r6
 8006334:	d016      	beq.n	8006364 <__gnu_unwind_pr_common+0x204>
 8006336:	4638      	mov	r0, r7
 8006338:	9406      	str	r4, [sp, #24]
 800633a:	f7ff fd87 	bl	8005e4c <_Unwind_decode_typeinfo_ptr.isra.0>
 800633e:	ab06      	add	r3, sp, #24
 8006340:	4601      	mov	r1, r0
 8006342:	2200      	movs	r2, #0
 8006344:	4628      	mov	r0, r5
 8006346:	f00b f913 	bl	8011570 <__cxa_type_match>
 800634a:	f108 0601 	add.w	r6, r8, #1
 800634e:	3704      	adds	r7, #4
 8006350:	2800      	cmp	r0, #0
 8006352:	d0ed      	beq.n	8006330 <__gnu_unwind_pr_common+0x1d0>
 8006354:	9b02      	ldr	r3, [sp, #8]
 8006356:	465c      	mov	r4, fp
 8006358:	4543      	cmp	r3, r8
 800635a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800635e:	9e05      	ldr	r6, [sp, #20]
 8006360:	d1d2      	bne.n	8006308 <__gnu_unwind_pr_common+0x1a8>
 8006362:	e000      	b.n	8006366 <__gnu_unwind_pr_common+0x206>
 8006364:	465c      	mov	r4, fp
 8006366:	4648      	mov	r0, r9
 8006368:	210d      	movs	r1, #13
 800636a:	f7ff fe8d 	bl	8006088 <_Unwind_GetGR>
 800636e:	9b06      	ldr	r3, [sp, #24]
 8006370:	6228      	str	r0, [r5, #32]
 8006372:	62ac      	str	r4, [r5, #40]	; 0x28
 8006374:	626b      	str	r3, [r5, #36]	; 0x24
 8006376:	2006      	movs	r0, #6
 8006378:	e75d      	b.n	8006236 <__gnu_unwind_pr_common+0xd6>
 800637a:	210f      	movs	r1, #15
 800637c:	4648      	mov	r0, r9
 800637e:	f7ff fe83 	bl	8006088 <_Unwind_GetGR>
 8006382:	210e      	movs	r1, #14
 8006384:	4602      	mov	r2, r0
 8006386:	4648      	mov	r0, r9
 8006388:	f7ff fea4 	bl	80060d4 <_Unwind_SetGR>
 800638c:	4648      	mov	r0, r9
 800638e:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <__gnu_unwind_pr_common+0x2d8>)
 8006390:	210f      	movs	r1, #15
 8006392:	f7ff fe9f 	bl	80060d4 <_Unwind_SetGR>
 8006396:	2007      	movs	r0, #7
 8006398:	e74d      	b.n	8006236 <__gnu_unwind_pr_common+0xd6>
 800639a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800639c:	429c      	cmp	r4, r3
 800639e:	d1b3      	bne.n	8006308 <__gnu_unwind_pr_common+0x1a8>
 80063a0:	2204      	movs	r2, #4
 80063a2:	9902      	ldr	r1, [sp, #8]
 80063a4:	2700      	movs	r7, #0
 80063a6:	18a3      	adds	r3, r4, r2
 80063a8:	62a9      	str	r1, [r5, #40]	; 0x28
 80063aa:	62ef      	str	r7, [r5, #44]	; 0x2c
 80063ac:	632a      	str	r2, [r5, #48]	; 0x30
 80063ae:	636b      	str	r3, [r5, #52]	; 0x34
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	42bb      	cmp	r3, r7
 80063b4:	db1f      	blt.n	80063f6 <__gnu_unwind_pr_common+0x296>
 80063b6:	2301      	movs	r3, #1
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	e72e      	b.n	800621a <__gnu_unwind_pr_common+0xba>
 80063bc:	4648      	mov	r0, r9
 80063be:	210d      	movs	r1, #13
 80063c0:	f7ff fe62 	bl	8006088 <_Unwind_GetGR>
 80063c4:	6228      	str	r0, [r5, #32]
 80063c6:	9b06      	ldr	r3, [sp, #24]
 80063c8:	626b      	str	r3, [r5, #36]	; 0x24
 80063ca:	62ac      	str	r4, [r5, #40]	; 0x28
 80063cc:	2006      	movs	r0, #6
 80063ce:	e732      	b.n	8006236 <__gnu_unwind_pr_common+0xd6>
 80063d0:	4620      	mov	r0, r4
 80063d2:	f7ff fc6f 	bl	8005cb4 <selfrel_offset31>
 80063d6:	3404      	adds	r4, #4
 80063d8:	4606      	mov	r6, r0
 80063da:	63ac      	str	r4, [r5, #56]	; 0x38
 80063dc:	4628      	mov	r0, r5
 80063de:	f00b f923 	bl	8011628 <__cxa_begin_cleanup>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	f43f af26 	beq.w	8006234 <__gnu_unwind_pr_common+0xd4>
 80063e8:	4648      	mov	r0, r9
 80063ea:	4632      	mov	r2, r6
 80063ec:	210f      	movs	r1, #15
 80063ee:	f7ff fe71 	bl	80060d4 <_Unwind_SetGR>
 80063f2:	2007      	movs	r0, #7
 80063f4:	e71f      	b.n	8006236 <__gnu_unwind_pr_common+0xd6>
 80063f6:	4608      	mov	r0, r1
 80063f8:	3001      	adds	r0, #1
 80063fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80063fe:	f7ff fc59 	bl	8005cb4 <selfrel_offset31>
 8006402:	210f      	movs	r1, #15
 8006404:	4602      	mov	r2, r0
 8006406:	4648      	mov	r0, r9
 8006408:	f7ff fe64 	bl	80060d4 <_Unwind_SetGR>
 800640c:	4648      	mov	r0, r9
 800640e:	462a      	mov	r2, r5
 8006410:	4639      	mov	r1, r7
 8006412:	f7ff fe5f 	bl	80060d4 <_Unwind_SetGR>
 8006416:	2007      	movs	r0, #7
 8006418:	e70d      	b.n	8006236 <__gnu_unwind_pr_common+0xd6>
 800641a:	4607      	mov	r7, r0
 800641c:	210d      	movs	r1, #13
 800641e:	4648      	mov	r0, r9
 8006420:	f7ff fe32 	bl	8006088 <_Unwind_GetGR>
 8006424:	2f02      	cmp	r7, #2
 8006426:	6228      	str	r0, [r5, #32]
 8006428:	d1cd      	bne.n	80063c6 <__gnu_unwind_pr_common+0x266>
 800642a:	462b      	mov	r3, r5
 800642c:	9a06      	ldr	r2, [sp, #24]
 800642e:	f843 2f2c 	str.w	r2, [r3, #44]!
 8006432:	626b      	str	r3, [r5, #36]	; 0x24
 8006434:	e7c9      	b.n	80063ca <__gnu_unwind_pr_common+0x26a>
 8006436:	bf00      	nop
 8006438:	080117f5 	.word	0x080117f5

0800643c <__aeabi_unwind_cpp_pr0>:
 800643c:	2300      	movs	r3, #0
 800643e:	e68f      	b.n	8006160 <__gnu_unwind_pr_common>

08006440 <__aeabi_unwind_cpp_pr1>:
 8006440:	2301      	movs	r3, #1
 8006442:	e68d      	b.n	8006160 <__gnu_unwind_pr_common>

08006444 <__aeabi_unwind_cpp_pr2>:
 8006444:	2302      	movs	r3, #2
 8006446:	e68b      	b.n	8006160 <__gnu_unwind_pr_common>

08006448 <_Unwind_VRS_Pop>:
 8006448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644a:	4604      	mov	r4, r0
 800644c:	b0c5      	sub	sp, #276	; 0x114
 800644e:	2904      	cmp	r1, #4
 8006450:	d80d      	bhi.n	800646e <_Unwind_VRS_Pop+0x26>
 8006452:	e8df f001 	tbb	[pc, r1]
 8006456:	0357      	.short	0x0357
 8006458:	310c      	.short	0x310c
 800645a:	0f          	.byte	0x0f
 800645b:	00          	.byte	0x00
 800645c:	2b01      	cmp	r3, #1
 800645e:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8006462:	b295      	uxth	r5, r2
 8006464:	d166      	bne.n	8006534 <_Unwind_VRS_Pop+0xec>
 8006466:	1972      	adds	r2, r6, r5
 8006468:	2a10      	cmp	r2, #16
 800646a:	f240 809f 	bls.w	80065ac <_Unwind_VRS_Pop+0x164>
 800646e:	2002      	movs	r0, #2
 8006470:	b045      	add	sp, #276	; 0x114
 8006472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1fa      	bne.n	800646e <_Unwind_VRS_Pop+0x26>
 8006478:	2a10      	cmp	r2, #16
 800647a:	d8f8      	bhi.n	800646e <_Unwind_VRS_Pop+0x26>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	06d8      	lsls	r0, r3, #27
 8006480:	f100 80c9 	bmi.w	8006616 <_Unwind_VRS_Pop+0x1ce>
 8006484:	ae22      	add	r6, sp, #136	; 0x88
 8006486:	4630      	mov	r0, r6
 8006488:	9201      	str	r2, [sp, #4]
 800648a:	f000 f977 	bl	800677c <__gnu_Unwind_Save_WMMXC>
 800648e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006490:	9a01      	ldr	r2, [sp, #4]
 8006492:	2300      	movs	r3, #0
 8006494:	2501      	movs	r5, #1
 8006496:	fa05 f103 	lsl.w	r1, r5, r3
 800649a:	4211      	tst	r1, r2
 800649c:	d003      	beq.n	80064a6 <_Unwind_VRS_Pop+0x5e>
 800649e:	6801      	ldr	r1, [r0, #0]
 80064a0:	3004      	adds	r0, #4
 80064a2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80064a6:	3301      	adds	r3, #1
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d1f4      	bne.n	8006496 <_Unwind_VRS_Pop+0x4e>
 80064ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80064ae:	4630      	mov	r0, r6
 80064b0:	f000 f95a 	bl	8006768 <__gnu_Unwind_Restore_WMMXC>
 80064b4:	2000      	movs	r0, #0
 80064b6:	e7db      	b.n	8006470 <_Unwind_VRS_Pop+0x28>
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d1d8      	bne.n	800646e <_Unwind_VRS_Pop+0x26>
 80064bc:	0c15      	lsrs	r5, r2, #16
 80064be:	b297      	uxth	r7, r2
 80064c0:	19eb      	adds	r3, r5, r7
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d8d3      	bhi.n	800646e <_Unwind_VRS_Pop+0x26>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	071e      	lsls	r6, r3, #28
 80064ca:	f100 80b8 	bmi.w	800663e <_Unwind_VRS_Pop+0x1f6>
 80064ce:	ae22      	add	r6, sp, #136	; 0x88
 80064d0:	4630      	mov	r0, r6
 80064d2:	007f      	lsls	r7, r7, #1
 80064d4:	f000 f926 	bl	8006724 <__gnu_Unwind_Save_WMMXD>
 80064d8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80064dc:	1e7b      	subs	r3, r7, #1
 80064de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80064e0:	b157      	cbz	r7, 80064f8 <_Unwind_VRS_Pop+0xb0>
 80064e2:	4629      	mov	r1, r5
 80064e4:	3a04      	subs	r2, #4
 80064e6:	f851 0b04 	ldr.w	r0, [r1], #4
 80064ea:	3b01      	subs	r3, #1
 80064ec:	f842 0f04 	str.w	r0, [r2, #4]!
 80064f0:	1c58      	adds	r0, r3, #1
 80064f2:	d1f8      	bne.n	80064e6 <_Unwind_VRS_Pop+0x9e>
 80064f4:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80064f8:	4630      	mov	r0, r6
 80064fa:	63a5      	str	r5, [r4, #56]	; 0x38
 80064fc:	f000 f8f0 	bl	80066e0 <__gnu_Unwind_Restore_WMMXD>
 8006500:	2000      	movs	r0, #0
 8006502:	e7b5      	b.n	8006470 <_Unwind_VRS_Pop+0x28>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1b2      	bne.n	800646e <_Unwind_VRS_Pop+0x26>
 8006508:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800650a:	b297      	uxth	r7, r2
 800650c:	1d20      	adds	r0, r4, #4
 800650e:	2601      	movs	r6, #1
 8006510:	fa06 f103 	lsl.w	r1, r6, r3
 8006514:	4239      	tst	r1, r7
 8006516:	f103 0301 	add.w	r3, r3, #1
 800651a:	d002      	beq.n	8006522 <_Unwind_VRS_Pop+0xda>
 800651c:	6829      	ldr	r1, [r5, #0]
 800651e:	3504      	adds	r5, #4
 8006520:	6001      	str	r1, [r0, #0]
 8006522:	2b10      	cmp	r3, #16
 8006524:	f100 0004 	add.w	r0, r0, #4
 8006528:	d1f2      	bne.n	8006510 <_Unwind_VRS_Pop+0xc8>
 800652a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800652e:	d13b      	bne.n	80065a8 <_Unwind_VRS_Pop+0x160>
 8006530:	63a5      	str	r5, [r4, #56]	; 0x38
 8006532:	e79d      	b.n	8006470 <_Unwind_VRS_Pop+0x28>
 8006534:	2b05      	cmp	r3, #5
 8006536:	d19a      	bne.n	800646e <_Unwind_VRS_Pop+0x26>
 8006538:	1977      	adds	r7, r6, r5
 800653a:	2f20      	cmp	r7, #32
 800653c:	d897      	bhi.n	800646e <_Unwind_VRS_Pop+0x26>
 800653e:	2e0f      	cmp	r6, #15
 8006540:	d965      	bls.n	800660e <_Unwind_VRS_Pop+0x1c6>
 8006542:	462f      	mov	r7, r5
 8006544:	2d00      	cmp	r5, #0
 8006546:	d148      	bne.n	80065da <_Unwind_VRS_Pop+0x192>
 8006548:	462a      	mov	r2, r5
 800654a:	2700      	movs	r7, #0
 800654c:	2a00      	cmp	r2, #0
 800654e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006550:	dd71      	ble.n	8006636 <_Unwind_VRS_Pop+0x1ee>
 8006552:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8006556:	4601      	mov	r1, r0
 8006558:	a844      	add	r0, sp, #272	; 0x110
 800655a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800655e:	388c      	subs	r0, #140	; 0x8c
 8006560:	f851 5b04 	ldr.w	r5, [r1], #4
 8006564:	4291      	cmp	r1, r2
 8006566:	f840 5f04 	str.w	r5, [r0, #4]!
 800656a:	d1f9      	bne.n	8006560 <_Unwind_VRS_Pop+0x118>
 800656c:	4608      	mov	r0, r1
 800656e:	b197      	cbz	r7, 8006596 <_Unwind_VRS_Pop+0x14e>
 8006570:	4632      	mov	r2, r6
 8006572:	2e10      	cmp	r6, #16
 8006574:	a944      	add	r1, sp, #272	; 0x110
 8006576:	bf38      	it	cc
 8006578:	2210      	movcc	r2, #16
 800657a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800657e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8006582:	0079      	lsls	r1, r7, #1
 8006584:	3a04      	subs	r2, #4
 8006586:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800658a:	f850 5b04 	ldr.w	r5, [r0], #4
 800658e:	4281      	cmp	r1, r0
 8006590:	f842 5f04 	str.w	r5, [r2, #4]!
 8006594:	d1f9      	bne.n	800658a <_Unwind_VRS_Pop+0x142>
 8006596:	2b01      	cmp	r3, #1
 8006598:	d047      	beq.n	800662a <_Unwind_VRS_Pop+0x1e2>
 800659a:	2e0f      	cmp	r6, #15
 800659c:	63a1      	str	r1, [r4, #56]	; 0x38
 800659e:	d932      	bls.n	8006606 <_Unwind_VRS_Pop+0x1be>
 80065a0:	b117      	cbz	r7, 80065a8 <_Unwind_VRS_Pop+0x160>
 80065a2:	a802      	add	r0, sp, #8
 80065a4:	f000 f894 	bl	80066d0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80065a8:	2000      	movs	r0, #0
 80065aa:	e761      	b.n	8006470 <_Unwind_VRS_Pop+0x28>
 80065ac:	2e0f      	cmp	r6, #15
 80065ae:	f63f af5e 	bhi.w	800646e <_Unwind_VRS_Pop+0x26>
 80065b2:	2700      	movs	r7, #0
 80065b4:	6822      	ldr	r2, [r4, #0]
 80065b6:	07d1      	lsls	r1, r2, #31
 80065b8:	d50d      	bpl.n	80065d6 <_Unwind_VRS_Pop+0x18e>
 80065ba:	f022 0101 	bic.w	r1, r2, #1
 80065be:	2b05      	cmp	r3, #5
 80065c0:	6021      	str	r1, [r4, #0]
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	4620      	mov	r0, r4
 80065c6:	d052      	beq.n	800666e <_Unwind_VRS_Pop+0x226>
 80065c8:	f022 0203 	bic.w	r2, r2, #3
 80065cc:	f840 2b48 	str.w	r2, [r0], #72
 80065d0:	f000 f872 	bl	80066b8 <__gnu_Unwind_Save_VFP>
 80065d4:	9b01      	ldr	r3, [sp, #4]
 80065d6:	2f00      	cmp	r7, #0
 80065d8:	d051      	beq.n	800667e <_Unwind_VRS_Pop+0x236>
 80065da:	6822      	ldr	r2, [r4, #0]
 80065dc:	0751      	lsls	r1, r2, #29
 80065de:	d436      	bmi.n	800664e <_Unwind_VRS_Pop+0x206>
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d03e      	beq.n	8006662 <_Unwind_VRS_Pop+0x21a>
 80065e4:	2e0f      	cmp	r6, #15
 80065e6:	d806      	bhi.n	80065f6 <_Unwind_VRS_Pop+0x1ae>
 80065e8:	a822      	add	r0, sp, #136	; 0x88
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	f000 f86c 	bl	80066c8 <__gnu_Unwind_Save_VFP_D>
 80065f0:	9b01      	ldr	r3, [sp, #4]
 80065f2:	2f00      	cmp	r7, #0
 80065f4:	d0a8      	beq.n	8006548 <_Unwind_VRS_Pop+0x100>
 80065f6:	a802      	add	r0, sp, #8
 80065f8:	9301      	str	r3, [sp, #4]
 80065fa:	f000 f86d 	bl	80066d8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80065fe:	9b01      	ldr	r3, [sp, #4]
 8006600:	f1c6 0210 	rsb	r2, r6, #16
 8006604:	e7a2      	b.n	800654c <_Unwind_VRS_Pop+0x104>
 8006606:	a822      	add	r0, sp, #136	; 0x88
 8006608:	f000 f85a 	bl	80066c0 <__gnu_Unwind_Restore_VFP_D>
 800660c:	e7c8      	b.n	80065a0 <_Unwind_VRS_Pop+0x158>
 800660e:	2f10      	cmp	r7, #16
 8006610:	d9cf      	bls.n	80065b2 <_Unwind_VRS_Pop+0x16a>
 8006612:	3f10      	subs	r7, #16
 8006614:	e7ce      	b.n	80065b4 <_Unwind_VRS_Pop+0x16c>
 8006616:	f023 0310 	bic.w	r3, r3, #16
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8006620:	9201      	str	r2, [sp, #4]
 8006622:	f000 f8ab 	bl	800677c <__gnu_Unwind_Save_WMMXC>
 8006626:	9a01      	ldr	r2, [sp, #4]
 8006628:	e72c      	b.n	8006484 <_Unwind_VRS_Pop+0x3c>
 800662a:	3104      	adds	r1, #4
 800662c:	63a1      	str	r1, [r4, #56]	; 0x38
 800662e:	a822      	add	r0, sp, #136	; 0x88
 8006630:	f000 f83e 	bl	80066b0 <__gnu_Unwind_Restore_VFP>
 8006634:	e7b8      	b.n	80065a8 <_Unwind_VRS_Pop+0x160>
 8006636:	2f00      	cmp	r7, #0
 8006638:	d19a      	bne.n	8006570 <_Unwind_VRS_Pop+0x128>
 800663a:	4601      	mov	r1, r0
 800663c:	e7ab      	b.n	8006596 <_Unwind_VRS_Pop+0x14e>
 800663e:	f023 0308 	bic.w	r3, r3, #8
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8006648:	f000 f86c 	bl	8006724 <__gnu_Unwind_Save_WMMXD>
 800664c:	e73f      	b.n	80064ce <_Unwind_VRS_Pop+0x86>
 800664e:	4620      	mov	r0, r4
 8006650:	f022 0204 	bic.w	r2, r2, #4
 8006654:	f840 2bd0 	str.w	r2, [r0], #208
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	f000 f83d 	bl	80066d8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	e7be      	b.n	80065e0 <_Unwind_VRS_Pop+0x198>
 8006662:	a822      	add	r0, sp, #136	; 0x88
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	f000 f827 	bl	80066b8 <__gnu_Unwind_Save_VFP>
 800666a:	9b01      	ldr	r3, [sp, #4]
 800666c:	e7c8      	b.n	8006600 <_Unwind_VRS_Pop+0x1b8>
 800666e:	f041 0102 	orr.w	r1, r1, #2
 8006672:	f840 1b48 	str.w	r1, [r0], #72
 8006676:	f000 f827 	bl	80066c8 <__gnu_Unwind_Save_VFP_D>
 800667a:	9b01      	ldr	r3, [sp, #4]
 800667c:	e7ab      	b.n	80065d6 <_Unwind_VRS_Pop+0x18e>
 800667e:	2b01      	cmp	r3, #1
 8006680:	d003      	beq.n	800668a <_Unwind_VRS_Pop+0x242>
 8006682:	2e0f      	cmp	r6, #15
 8006684:	f63f af60 	bhi.w	8006548 <_Unwind_VRS_Pop+0x100>
 8006688:	e7ae      	b.n	80065e8 <_Unwind_VRS_Pop+0x1a0>
 800668a:	a822      	add	r0, sp, #136	; 0x88
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	f000 f813 	bl	80066b8 <__gnu_Unwind_Save_VFP>
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	e758      	b.n	8006548 <_Unwind_VRS_Pop+0x100>
 8006696:	bf00      	nop

08006698 <__restore_core_regs>:
 8006698:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800669c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80066a0:	469c      	mov	ip, r3
 80066a2:	46a6      	mov	lr, r4
 80066a4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80066a8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80066ac:	46e5      	mov	sp, ip
 80066ae:	bd00      	pop	{pc}

080066b0 <__gnu_Unwind_Restore_VFP>:
 80066b0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop

080066b8 <__gnu_Unwind_Save_VFP>:
 80066b8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <__gnu_Unwind_Restore_VFP_D>:
 80066c0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop

080066c8 <__gnu_Unwind_Save_VFP_D>:
 80066c8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop

080066d0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80066d0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop

080066d8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80066d8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop

080066e0 <__gnu_Unwind_Restore_WMMXD>:
 80066e0:	ecf0 0102 	ldfe	f0, [r0], #8
 80066e4:	ecf0 1102 	ldfe	f1, [r0], #8
 80066e8:	ecf0 2102 	ldfe	f2, [r0], #8
 80066ec:	ecf0 3102 	ldfe	f3, [r0], #8
 80066f0:	ecf0 4102 	ldfe	f4, [r0], #8
 80066f4:	ecf0 5102 	ldfe	f5, [r0], #8
 80066f8:	ecf0 6102 	ldfe	f6, [r0], #8
 80066fc:	ecf0 7102 	ldfe	f7, [r0], #8
 8006700:	ecf0 8102 	ldfp	f0, [r0], #8
 8006704:	ecf0 9102 	ldfp	f1, [r0], #8
 8006708:	ecf0 a102 	ldfp	f2, [r0], #8
 800670c:	ecf0 b102 	ldfp	f3, [r0], #8
 8006710:	ecf0 c102 	ldfp	f4, [r0], #8
 8006714:	ecf0 d102 	ldfp	f5, [r0], #8
 8006718:	ecf0 e102 	ldfp	f6, [r0], #8
 800671c:	ecf0 f102 	ldfp	f7, [r0], #8
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop

08006724 <__gnu_Unwind_Save_WMMXD>:
 8006724:	ece0 0102 	stfe	f0, [r0], #8
 8006728:	ece0 1102 	stfe	f1, [r0], #8
 800672c:	ece0 2102 	stfe	f2, [r0], #8
 8006730:	ece0 3102 	stfe	f3, [r0], #8
 8006734:	ece0 4102 	stfe	f4, [r0], #8
 8006738:	ece0 5102 	stfe	f5, [r0], #8
 800673c:	ece0 6102 	stfe	f6, [r0], #8
 8006740:	ece0 7102 	stfe	f7, [r0], #8
 8006744:	ece0 8102 	stfp	f0, [r0], #8
 8006748:	ece0 9102 	stfp	f1, [r0], #8
 800674c:	ece0 a102 	stfp	f2, [r0], #8
 8006750:	ece0 b102 	stfp	f3, [r0], #8
 8006754:	ece0 c102 	stfp	f4, [r0], #8
 8006758:	ece0 d102 	stfp	f5, [r0], #8
 800675c:	ece0 e102 	stfp	f6, [r0], #8
 8006760:	ece0 f102 	stfp	f7, [r0], #8
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop

08006768 <__gnu_Unwind_Restore_WMMXC>:
 8006768:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800676c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8006770:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8006774:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop

0800677c <__gnu_Unwind_Save_WMMXC>:
 800677c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8006780:	fca0 9101 	stc2	1, cr9, [r0], #4
 8006784:	fca0 a101 	stc2	1, cr10, [r0], #4
 8006788:	fca0 b101 	stc2	1, cr11, [r0], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop

08006790 <_Unwind_RaiseException>:
 8006790:	46ec      	mov	ip, sp
 8006792:	b500      	push	{lr}
 8006794:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006798:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80067a4:	a901      	add	r1, sp, #4
 80067a6:	f7ff fbe7 	bl	8005f78 <__gnu_Unwind_RaiseException>
 80067aa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80067ae:	b012      	add	sp, #72	; 0x48
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <_Unwind_Resume>:
 80067b4:	46ec      	mov	ip, sp
 80067b6:	b500      	push	{lr}
 80067b8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80067bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80067c8:	a901      	add	r1, sp, #4
 80067ca:	f7ff fc0f 	bl	8005fec <__gnu_Unwind_Resume>
 80067ce:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80067d2:	b012      	add	sp, #72	; 0x48
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop

080067d8 <_Unwind_Resume_or_Rethrow>:
 80067d8:	46ec      	mov	ip, sp
 80067da:	b500      	push	{lr}
 80067dc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80067e0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80067ec:	a901      	add	r1, sp, #4
 80067ee:	f7ff fc1f 	bl	8006030 <__gnu_Unwind_Resume_or_Rethrow>
 80067f2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80067f6:	b012      	add	sp, #72	; 0x48
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <_Unwind_ForcedUnwind>:
 80067fc:	46ec      	mov	ip, sp
 80067fe:	b500      	push	{lr}
 8006800:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006804:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006810:	ab01      	add	r3, sp, #4
 8006812:	f7ff fbe1 	bl	8005fd8 <__gnu_Unwind_ForcedUnwind>
 8006816:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800681a:	b012      	add	sp, #72	; 0x48
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop

08006820 <_Unwind_Backtrace>:
 8006820:	46ec      	mov	ip, sp
 8006822:	b500      	push	{lr}
 8006824:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006828:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006834:	aa01      	add	r2, sp, #4
 8006836:	f7ff fc5b 	bl	80060f0 <__gnu_Unwind_Backtrace>
 800683a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800683e:	b012      	add	sp, #72	; 0x48
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop

08006844 <next_unwind_byte>:
 8006844:	7a03      	ldrb	r3, [r0, #8]
 8006846:	b91b      	cbnz	r3, 8006850 <next_unwind_byte+0xc>
 8006848:	7a43      	ldrb	r3, [r0, #9]
 800684a:	b943      	cbnz	r3, 800685e <next_unwind_byte+0x1a>
 800684c:	20b0      	movs	r0, #176	; 0xb0
 800684e:	4770      	bx	lr
 8006850:	1e5a      	subs	r2, r3, #1
 8006852:	6803      	ldr	r3, [r0, #0]
 8006854:	7202      	strb	r2, [r0, #8]
 8006856:	021a      	lsls	r2, r3, #8
 8006858:	6002      	str	r2, [r0, #0]
 800685a:	0e18      	lsrs	r0, r3, #24
 800685c:	4770      	bx	lr
 800685e:	6842      	ldr	r2, [r0, #4]
 8006860:	3b01      	subs	r3, #1
 8006862:	b410      	push	{r4}
 8006864:	7243      	strb	r3, [r0, #9]
 8006866:	6813      	ldr	r3, [r2, #0]
 8006868:	2103      	movs	r1, #3
 800686a:	1d14      	adds	r4, r2, #4
 800686c:	7201      	strb	r1, [r0, #8]
 800686e:	021a      	lsls	r2, r3, #8
 8006870:	6044      	str	r4, [r0, #4]
 8006872:	6002      	str	r2, [r0, #0]
 8006874:	bc10      	pop	{r4}
 8006876:	0e18      	lsrs	r0, r3, #24
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop

0800687c <_Unwind_GetGR.constprop.0>:
 800687c:	b500      	push	{lr}
 800687e:	b085      	sub	sp, #20
 8006880:	aa03      	add	r2, sp, #12
 8006882:	2300      	movs	r3, #0
 8006884:	9200      	str	r2, [sp, #0]
 8006886:	4619      	mov	r1, r3
 8006888:	220c      	movs	r2, #12
 800688a:	f7ff fbe3 	bl	8006054 <_Unwind_VRS_Get>
 800688e:	9803      	ldr	r0, [sp, #12]
 8006890:	b005      	add	sp, #20
 8006892:	f85d fb04 	ldr.w	pc, [sp], #4
 8006896:	bf00      	nop

08006898 <unwind_UCB_from_context>:
 8006898:	e7f0      	b.n	800687c <_Unwind_GetGR.constprop.0>
 800689a:	bf00      	nop

0800689c <__gnu_unwind_execute>:
 800689c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068a0:	4606      	mov	r6, r0
 80068a2:	460d      	mov	r5, r1
 80068a4:	b085      	sub	sp, #20
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	4628      	mov	r0, r5
 80068ac:	f7ff ffca 	bl	8006844 <next_unwind_byte>
 80068b0:	28b0      	cmp	r0, #176	; 0xb0
 80068b2:	4604      	mov	r4, r0
 80068b4:	f000 80b4 	beq.w	8006a20 <__gnu_unwind_execute+0x184>
 80068b8:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 80068bc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80068c0:	d020      	beq.n	8006904 <__gnu_unwind_execute+0x68>
 80068c2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80068c6:	2b80      	cmp	r3, #128	; 0x80
 80068c8:	d07a      	beq.n	80069c0 <__gnu_unwind_execute+0x124>
 80068ca:	2b90      	cmp	r3, #144	; 0x90
 80068cc:	d035      	beq.n	800693a <__gnu_unwind_execute+0x9e>
 80068ce:	2ba0      	cmp	r3, #160	; 0xa0
 80068d0:	d048      	beq.n	8006964 <__gnu_unwind_execute+0xc8>
 80068d2:	2bb0      	cmp	r3, #176	; 0xb0
 80068d4:	d05c      	beq.n	8006990 <__gnu_unwind_execute+0xf4>
 80068d6:	2bc0      	cmp	r3, #192	; 0xc0
 80068d8:	f000 8089 	beq.w	80069ee <__gnu_unwind_execute+0x152>
 80068dc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80068e0:	2bd0      	cmp	r3, #208	; 0xd0
 80068e2:	d10b      	bne.n	80068fc <__gnu_unwind_execute+0x60>
 80068e4:	f000 0207 	and.w	r2, r0, #7
 80068e8:	3201      	adds	r2, #1
 80068ea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80068ee:	2305      	movs	r3, #5
 80068f0:	2101      	movs	r1, #1
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff fda8 	bl	8006448 <_Unwind_VRS_Pop>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d0d6      	beq.n	80068aa <__gnu_unwind_execute+0xe>
 80068fc:	2009      	movs	r0, #9
 80068fe:	b005      	add	sp, #20
 8006900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006904:	f10d 090c 	add.w	r9, sp, #12
 8006908:	4619      	mov	r1, r3
 800690a:	0087      	lsls	r7, r0, #2
 800690c:	f8cd 9000 	str.w	r9, [sp]
 8006910:	220d      	movs	r2, #13
 8006912:	4630      	mov	r0, r6
 8006914:	f7ff fb9e 	bl	8006054 <_Unwind_VRS_Get>
 8006918:	b2ff      	uxtb	r7, r7
 800691a:	9b03      	ldr	r3, [sp, #12]
 800691c:	3704      	adds	r7, #4
 800691e:	0660      	lsls	r0, r4, #25
 8006920:	bf4c      	ite	mi
 8006922:	1bdf      	submi	r7, r3, r7
 8006924:	18ff      	addpl	r7, r7, r3
 8006926:	2300      	movs	r3, #0
 8006928:	f8cd 9000 	str.w	r9, [sp]
 800692c:	4619      	mov	r1, r3
 800692e:	220d      	movs	r2, #13
 8006930:	4630      	mov	r0, r6
 8006932:	9703      	str	r7, [sp, #12]
 8006934:	f7ff fbb4 	bl	80060a0 <_Unwind_VRS_Set>
 8006938:	e7b7      	b.n	80068aa <__gnu_unwind_execute+0xe>
 800693a:	f000 030d 	and.w	r3, r0, #13
 800693e:	2b0d      	cmp	r3, #13
 8006940:	d0dc      	beq.n	80068fc <__gnu_unwind_execute+0x60>
 8006942:	af03      	add	r7, sp, #12
 8006944:	2300      	movs	r3, #0
 8006946:	f000 020f 	and.w	r2, r0, #15
 800694a:	4619      	mov	r1, r3
 800694c:	9700      	str	r7, [sp, #0]
 800694e:	4630      	mov	r0, r6
 8006950:	f7ff fb80 	bl	8006054 <_Unwind_VRS_Get>
 8006954:	2300      	movs	r3, #0
 8006956:	9700      	str	r7, [sp, #0]
 8006958:	4619      	mov	r1, r3
 800695a:	220d      	movs	r2, #13
 800695c:	4630      	mov	r0, r6
 800695e:	f7ff fb9f 	bl	80060a0 <_Unwind_VRS_Set>
 8006962:	e7a2      	b.n	80068aa <__gnu_unwind_execute+0xe>
 8006964:	43c2      	mvns	r2, r0
 8006966:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 800696a:	f002 0207 	and.w	r2, r2, #7
 800696e:	fa43 f202 	asr.w	r2, r3, r2
 8006972:	0701      	lsls	r1, r0, #28
 8006974:	ea02 0203 	and.w	r2, r2, r3
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	bf48      	it	mi
 800697e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8006982:	4619      	mov	r1, r3
 8006984:	4630      	mov	r0, r6
 8006986:	f7ff fd5f 	bl	8006448 <_Unwind_VRS_Pop>
 800698a:	2800      	cmp	r0, #0
 800698c:	d1b6      	bne.n	80068fc <__gnu_unwind_execute+0x60>
 800698e:	e78c      	b.n	80068aa <__gnu_unwind_execute+0xe>
 8006990:	28b1      	cmp	r0, #177	; 0xb1
 8006992:	d04a      	beq.n	8006a2a <__gnu_unwind_execute+0x18e>
 8006994:	28b2      	cmp	r0, #178	; 0xb2
 8006996:	d053      	beq.n	8006a40 <__gnu_unwind_execute+0x1a4>
 8006998:	28b3      	cmp	r0, #179	; 0xb3
 800699a:	f000 8081 	beq.w	8006aa0 <__gnu_unwind_execute+0x204>
 800699e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80069a2:	2bb4      	cmp	r3, #180	; 0xb4
 80069a4:	d0aa      	beq.n	80068fc <__gnu_unwind_execute+0x60>
 80069a6:	f000 0207 	and.w	r2, r0, #7
 80069aa:	3201      	adds	r2, #1
 80069ac:	2301      	movs	r3, #1
 80069ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80069b2:	4619      	mov	r1, r3
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7ff fd47 	bl	8006448 <_Unwind_VRS_Pop>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d19e      	bne.n	80068fc <__gnu_unwind_execute+0x60>
 80069be:	e774      	b.n	80068aa <__gnu_unwind_execute+0xe>
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7ff ff3f 	bl	8006844 <next_unwind_byte>
 80069c6:	0224      	lsls	r4, r4, #8
 80069c8:	4320      	orrs	r0, r4
 80069ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80069ce:	d095      	beq.n	80068fc <__gnu_unwind_execute+0x60>
 80069d0:	0104      	lsls	r4, r0, #4
 80069d2:	2300      	movs	r3, #0
 80069d4:	b2a2      	uxth	r2, r4
 80069d6:	4619      	mov	r1, r3
 80069d8:	4630      	mov	r0, r6
 80069da:	f7ff fd35 	bl	8006448 <_Unwind_VRS_Pop>
 80069de:	2800      	cmp	r0, #0
 80069e0:	d18c      	bne.n	80068fc <__gnu_unwind_execute+0x60>
 80069e2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80069e6:	bf18      	it	ne
 80069e8:	f04f 0801 	movne.w	r8, #1
 80069ec:	e75d      	b.n	80068aa <__gnu_unwind_execute+0xe>
 80069ee:	28c6      	cmp	r0, #198	; 0xc6
 80069f0:	d062      	beq.n	8006ab8 <__gnu_unwind_execute+0x21c>
 80069f2:	28c7      	cmp	r0, #199	; 0xc7
 80069f4:	d06c      	beq.n	8006ad0 <__gnu_unwind_execute+0x234>
 80069f6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80069fa:	2bc0      	cmp	r3, #192	; 0xc0
 80069fc:	d07b      	beq.n	8006af6 <__gnu_unwind_execute+0x25a>
 80069fe:	28c8      	cmp	r0, #200	; 0xc8
 8006a00:	f000 8091 	beq.w	8006b26 <__gnu_unwind_execute+0x28a>
 8006a04:	28c9      	cmp	r0, #201	; 0xc9
 8006a06:	f47f af79 	bne.w	80068fc <__gnu_unwind_execute+0x60>
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f7ff ff1a 	bl	8006844 <next_unwind_byte>
 8006a10:	0302      	lsls	r2, r0, #12
 8006a12:	f000 000f 	and.w	r0, r0, #15
 8006a16:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	4302      	orrs	r2, r0
 8006a1e:	e766      	b.n	80068ee <__gnu_unwind_execute+0x52>
 8006a20:	f1b8 0f00 	cmp.w	r8, #0
 8006a24:	d06e      	beq.n	8006b04 <__gnu_unwind_execute+0x268>
 8006a26:	2000      	movs	r0, #0
 8006a28:	e769      	b.n	80068fe <__gnu_unwind_execute+0x62>
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7ff ff0a 	bl	8006844 <next_unwind_byte>
 8006a30:	4602      	mov	r2, r0
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f43f af62 	beq.w	80068fc <__gnu_unwind_execute+0x60>
 8006a38:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8006a3c:	d0b9      	beq.n	80069b2 <__gnu_unwind_execute+0x116>
 8006a3e:	e75d      	b.n	80068fc <__gnu_unwind_execute+0x60>
 8006a40:	2300      	movs	r3, #0
 8006a42:	f10d 090c 	add.w	r9, sp, #12
 8006a46:	220d      	movs	r2, #13
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f8cd 9000 	str.w	r9, [sp]
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff fb00 	bl	8006054 <_Unwind_VRS_Get>
 8006a54:	4628      	mov	r0, r5
 8006a56:	f7ff fef5 	bl	8006844 <next_unwind_byte>
 8006a5a:	0602      	lsls	r2, r0, #24
 8006a5c:	f04f 0402 	mov.w	r4, #2
 8006a60:	d50c      	bpl.n	8006a7c <__gnu_unwind_execute+0x1e0>
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006a68:	40a0      	lsls	r0, r4
 8006a6a:	4403      	add	r3, r0
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	9303      	str	r3, [sp, #12]
 8006a70:	f7ff fee8 	bl	8006844 <next_unwind_byte>
 8006a74:	0603      	lsls	r3, r0, #24
 8006a76:	f104 0407 	add.w	r4, r4, #7
 8006a7a:	d4f2      	bmi.n	8006a62 <__gnu_unwind_execute+0x1c6>
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006a82:	fa00 f204 	lsl.w	r2, r0, r4
 8006a86:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	4414      	add	r4, r2
 8006a8e:	f8cd 9000 	str.w	r9, [sp]
 8006a92:	4619      	mov	r1, r3
 8006a94:	220d      	movs	r2, #13
 8006a96:	4630      	mov	r0, r6
 8006a98:	9403      	str	r4, [sp, #12]
 8006a9a:	f7ff fb01 	bl	80060a0 <_Unwind_VRS_Set>
 8006a9e:	e704      	b.n	80068aa <__gnu_unwind_execute+0xe>
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7ff fecf 	bl	8006844 <next_unwind_byte>
 8006aa6:	0301      	lsls	r1, r0, #12
 8006aa8:	f000 000f 	and.w	r0, r0, #15
 8006aac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8006ab0:	1c42      	adds	r2, r0, #1
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	e77c      	b.n	80069b2 <__gnu_unwind_execute+0x116>
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f7ff fec3 	bl	8006844 <next_unwind_byte>
 8006abe:	0301      	lsls	r1, r0, #12
 8006ac0:	f000 000f 	and.w	r0, r0, #15
 8006ac4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8006ac8:	1c42      	adds	r2, r0, #1
 8006aca:	2303      	movs	r3, #3
 8006acc:	430a      	orrs	r2, r1
 8006ace:	e770      	b.n	80069b2 <__gnu_unwind_execute+0x116>
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f7ff feb7 	bl	8006844 <next_unwind_byte>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	f43f af0f 	beq.w	80068fc <__gnu_unwind_execute+0x60>
 8006ade:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8006ae2:	f47f af0b 	bne.w	80068fc <__gnu_unwind_execute+0x60>
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f7ff fcad 	bl	8006448 <_Unwind_VRS_Pop>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f47f af04 	bne.w	80068fc <__gnu_unwind_execute+0x60>
 8006af4:	e6d9      	b.n	80068aa <__gnu_unwind_execute+0xe>
 8006af6:	f000 020f 	and.w	r2, r0, #15
 8006afa:	3201      	adds	r2, #1
 8006afc:	2303      	movs	r3, #3
 8006afe:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8006b02:	e756      	b.n	80069b2 <__gnu_unwind_execute+0x116>
 8006b04:	ac03      	add	r4, sp, #12
 8006b06:	4643      	mov	r3, r8
 8006b08:	220e      	movs	r2, #14
 8006b0a:	4641      	mov	r1, r8
 8006b0c:	9400      	str	r4, [sp, #0]
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f7ff faa0 	bl	8006054 <_Unwind_VRS_Get>
 8006b14:	9400      	str	r4, [sp, #0]
 8006b16:	4630      	mov	r0, r6
 8006b18:	4643      	mov	r3, r8
 8006b1a:	220f      	movs	r2, #15
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	f7ff fabf 	bl	80060a0 <_Unwind_VRS_Set>
 8006b22:	4640      	mov	r0, r8
 8006b24:	e6eb      	b.n	80068fe <__gnu_unwind_execute+0x62>
 8006b26:	4628      	mov	r0, r5
 8006b28:	f7ff fe8c 	bl	8006844 <next_unwind_byte>
 8006b2c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006b30:	f000 030f 	and.w	r3, r0, #15
 8006b34:	3210      	adds	r2, #16
 8006b36:	3301      	adds	r3, #1
 8006b38:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006b3c:	e6d7      	b.n	80068ee <__gnu_unwind_execute+0x52>
 8006b3e:	bf00      	nop

08006b40 <__gnu_unwind_frame>:
 8006b40:	b510      	push	{r4, lr}
 8006b42:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006b44:	b084      	sub	sp, #16
 8006b46:	2003      	movs	r0, #3
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	f88d 000c 	strb.w	r0, [sp, #12]
 8006b4e:	79dc      	ldrb	r4, [r3, #7]
 8006b50:	0212      	lsls	r2, r2, #8
 8006b52:	3308      	adds	r3, #8
 8006b54:	4608      	mov	r0, r1
 8006b56:	a901      	add	r1, sp, #4
 8006b58:	9201      	str	r2, [sp, #4]
 8006b5a:	f88d 400d 	strb.w	r4, [sp, #13]
 8006b5e:	9302      	str	r3, [sp, #8]
 8006b60:	f7ff fe9c 	bl	800689c <__gnu_unwind_execute>
 8006b64:	b004      	add	sp, #16
 8006b66:	bd10      	pop	{r4, pc}

08006b68 <_Unwind_GetRegionStart>:
 8006b68:	b508      	push	{r3, lr}
 8006b6a:	f7ff fe95 	bl	8006898 <unwind_UCB_from_context>
 8006b6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006b70:	bd08      	pop	{r3, pc}
 8006b72:	bf00      	nop

08006b74 <_Unwind_GetLanguageSpecificData>:
 8006b74:	b508      	push	{r3, lr}
 8006b76:	f7ff fe8f 	bl	8006898 <unwind_UCB_from_context>
 8006b7a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006b7c:	79d8      	ldrb	r0, [r3, #7]
 8006b7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b82:	3008      	adds	r0, #8
 8006b84:	bd08      	pop	{r3, pc}
 8006b86:	bf00      	nop

08006b88 <_Unwind_GetTextRelBase>:
 8006b88:	b508      	push	{r3, lr}
 8006b8a:	f00c fbc7 	bl	801331c <abort>
 8006b8e:	bf00      	nop

08006b90 <_Unwind_GetDataRelBase>:
 8006b90:	b508      	push	{r3, lr}
 8006b92:	f7ff fff9 	bl	8006b88 <_Unwind_GetTextRelBase>
 8006b96:	bf00      	nop

08006b98 <d_make_comp>:
 8006b98:	b470      	push	{r4, r5, r6}
 8006b9a:	1e4c      	subs	r4, r1, #1
 8006b9c:	2c4a      	cmp	r4, #74	; 0x4a
 8006b9e:	d82c      	bhi.n	8006bfa <d_make_comp+0x62>
 8006ba0:	e8df f004 	tbb	[pc, r4]
 8006ba4:	3c3c3c3c 	.word	0x3c3c3c3c
 8006ba8:	2b2b2b2b 	.word	0x2b2b2b2b
 8006bac:	263c2626 	.word	0x263c2626
 8006bb0:	26262626 	.word	0x26262626
 8006bb4:	26262626 	.word	0x26262626
 8006bb8:	2b262626 	.word	0x2b262626
 8006bbc:	27272727 	.word	0x27272727
 8006bc0:	27272727 	.word	0x27272727
 8006bc4:	2626263c 	.word	0x2626263c
 8006bc8:	262b2626 	.word	0x262b2626
 8006bcc:	2b3c3d27 	.word	0x2b3c3d27
 8006bd0:	3d27273c 	.word	0x3d27273c
 8006bd4:	26262b2b 	.word	0x26262b2b
 8006bd8:	3c3c3c3c 	.word	0x3c3c3c3c
 8006bdc:	3c3c263c 	.word	0x3c3c263c
 8006be0:	2b2b3c26 	.word	0x2b2b3c26
 8006be4:	2b262626 	.word	0x2b262626
 8006be8:	26262b2b 	.word	0x26262b2b
 8006bec:	3c26      	.short	0x3c26
 8006bee:	3c          	.byte	0x3c
 8006bef:	00          	.byte	0x00
 8006bf0:	b1ca      	cbz	r2, 8006c26 <d_make_comp+0x8e>
 8006bf2:	6944      	ldr	r4, [r0, #20]
 8006bf4:	6985      	ldr	r5, [r0, #24]
 8006bf6:	42ac      	cmp	r4, r5
 8006bf8:	db02      	blt.n	8006c00 <d_make_comp+0x68>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	bc70      	pop	{r4, r5, r6}
 8006bfe:	4770      	bx	lr
 8006c00:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8006c04:	6906      	ldr	r6, [r0, #16]
 8006c06:	3401      	adds	r4, #1
 8006c08:	00ad      	lsls	r5, r5, #2
 8006c0a:	6144      	str	r4, [r0, #20]
 8006c0c:	1974      	adds	r4, r6, r5
 8006c0e:	d00c      	beq.n	8006c2a <d_make_comp+0x92>
 8006c10:	5571      	strb	r1, [r6, r5]
 8006c12:	6062      	str	r2, [r4, #4]
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	4620      	mov	r0, r4
 8006c18:	bc70      	pop	{r4, r5, r6}
 8006c1a:	4770      	bx	lr
 8006c1c:	b11a      	cbz	r2, 8006c26 <d_make_comp+0x8e>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e7      	bne.n	8006bf2 <d_make_comp+0x5a>
 8006c22:	4618      	mov	r0, r3
 8006c24:	e7ea      	b.n	8006bfc <d_make_comp+0x64>
 8006c26:	4610      	mov	r0, r2
 8006c28:	e7e8      	b.n	8006bfc <d_make_comp+0x64>
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	e7e6      	b.n	8006bfc <d_make_comp+0x64>
 8006c2e:	bf00      	nop

08006c30 <d_cv_qualifiers>:
 8006c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c34:	68c3      	ldr	r3, [r0, #12]
 8006c36:	f1b2 0a00 	subs.w	sl, r2, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	460f      	mov	r7, r1
 8006c3e:	781a      	ldrb	r2, [r3, #0]
 8006c40:	bf15      	itete	ne
 8006c42:	f04f 081c 	movne.w	r8, #28
 8006c46:	f04f 0819 	moveq.w	r8, #25
 8006c4a:	f04f 091d 	movne.w	r9, #29
 8006c4e:	f04f 091a 	moveq.w	r9, #26
 8006c52:	bf14      	ite	ne
 8006c54:	261e      	movne	r6, #30
 8006c56:	261b      	moveq	r6, #27
 8006c58:	460d      	mov	r5, r1
 8006c5a:	e012      	b.n	8006c82 <d_cv_qualifiers+0x52>
 8006c5c:	2a56      	cmp	r2, #86	; 0x56
 8006c5e:	d01b      	beq.n	8006c98 <d_cv_qualifiers+0x68>
 8006c60:	2a4b      	cmp	r2, #75	; 0x4b
 8006c62:	d122      	bne.n	8006caa <d_cv_qualifiers+0x7a>
 8006c64:	60e1      	str	r1, [r4, #12]
 8006c66:	4631      	mov	r1, r6
 8006c68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c6a:	3306      	adds	r3, #6
 8006c6c:	6323      	str	r3, [r4, #48]	; 0x30
 8006c6e:	2300      	movs	r3, #0
 8006c70:	461a      	mov	r2, r3
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff ff90 	bl	8006b98 <d_make_comp>
 8006c78:	6028      	str	r0, [r5, #0]
 8006c7a:	b1a0      	cbz	r0, 8006ca6 <d_cv_qualifiers+0x76>
 8006c7c:	68e3      	ldr	r3, [r4, #12]
 8006c7e:	1d05      	adds	r5, r0, #4
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	2a72      	cmp	r2, #114	; 0x72
 8006c84:	f103 0101 	add.w	r1, r3, #1
 8006c88:	d1e8      	bne.n	8006c5c <d_cv_qualifiers+0x2c>
 8006c8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	3209      	adds	r2, #9
 8006c90:	60e3      	str	r3, [r4, #12]
 8006c92:	6322      	str	r2, [r4, #48]	; 0x30
 8006c94:	4641      	mov	r1, r8
 8006c96:	e7ea      	b.n	8006c6e <d_cv_qualifiers+0x3e>
 8006c98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	3209      	adds	r2, #9
 8006c9e:	60e3      	str	r3, [r4, #12]
 8006ca0:	6322      	str	r2, [r4, #48]	; 0x30
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	e7e3      	b.n	8006c6e <d_cv_qualifiers+0x3e>
 8006ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006caa:	f1ba 0f00 	cmp.w	sl, #0
 8006cae:	d101      	bne.n	8006cb4 <d_cv_qualifiers+0x84>
 8006cb0:	2a46      	cmp	r2, #70	; 0x46
 8006cb2:	d002      	beq.n	8006cba <d_cv_qualifiers+0x8a>
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cba:	42bd      	cmp	r5, r7
 8006cbc:	d0fa      	beq.n	8006cb4 <d_cv_qualifiers+0x84>
 8006cbe:	201d      	movs	r0, #29
 8006cc0:	211e      	movs	r1, #30
 8006cc2:	221c      	movs	r2, #28
 8006cc4:	e007      	b.n	8006cd6 <d_cv_qualifiers+0xa6>
 8006cc6:	2b1b      	cmp	r3, #27
 8006cc8:	d00b      	beq.n	8006ce2 <d_cv_qualifiers+0xb2>
 8006cca:	2b19      	cmp	r3, #25
 8006ccc:	d100      	bne.n	8006cd0 <d_cv_qualifiers+0xa0>
 8006cce:	703a      	strb	r2, [r7, #0]
 8006cd0:	3704      	adds	r7, #4
 8006cd2:	42bd      	cmp	r5, r7
 8006cd4:	d0ee      	beq.n	8006cb4 <d_cv_qualifiers+0x84>
 8006cd6:	683f      	ldr	r7, [r7, #0]
 8006cd8:	783b      	ldrb	r3, [r7, #0]
 8006cda:	2b1a      	cmp	r3, #26
 8006cdc:	d1f3      	bne.n	8006cc6 <d_cv_qualifiers+0x96>
 8006cde:	7038      	strb	r0, [r7, #0]
 8006ce0:	e7f6      	b.n	8006cd0 <d_cv_qualifiers+0xa0>
 8006ce2:	7039      	strb	r1, [r7, #0]
 8006ce4:	e7f4      	b.n	8006cd0 <d_cv_qualifiers+0xa0>
 8006ce6:	bf00      	nop

08006ce8 <d_ref_qualifier>:
 8006ce8:	b410      	push	{r4}
 8006cea:	68c3      	ldr	r3, [r0, #12]
 8006cec:	460a      	mov	r2, r1
 8006cee:	781c      	ldrb	r4, [r3, #0]
 8006cf0:	2c52      	cmp	r4, #82	; 0x52
 8006cf2:	d00d      	beq.n	8006d10 <d_ref_qualifier+0x28>
 8006cf4:	2c4f      	cmp	r4, #79	; 0x4f
 8006cf6:	d002      	beq.n	8006cfe <d_ref_qualifier+0x16>
 8006cf8:	4608      	mov	r0, r1
 8006cfa:	bc10      	pop	{r4}
 8006cfc:	4770      	bx	lr
 8006cfe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006d00:	2120      	movs	r1, #32
 8006d02:	3403      	adds	r4, #3
 8006d04:	6304      	str	r4, [r0, #48]	; 0x30
 8006d06:	3301      	adds	r3, #1
 8006d08:	60c3      	str	r3, [r0, #12]
 8006d0a:	bc10      	pop	{r4}
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e743      	b.n	8006b98 <d_make_comp>
 8006d10:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006d12:	211f      	movs	r1, #31
 8006d14:	3402      	adds	r4, #2
 8006d16:	6304      	str	r4, [r0, #48]	; 0x30
 8006d18:	e7f5      	b.n	8006d06 <d_ref_qualifier+0x1e>
 8006d1a:	bf00      	nop

08006d1c <d_count_templates_scopes>:
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	d04c      	beq.n	8006dba <d_count_templates_scopes+0x9e>
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4605      	mov	r5, r0
 8006d24:	460e      	mov	r6, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	7823      	ldrb	r3, [r4, #0]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	2b4a      	cmp	r3, #74	; 0x4a
 8006d2e:	d82a      	bhi.n	8006d86 <d_count_templates_scopes+0x6a>
 8006d30:	e8df f003 	tbb	[pc, r3]
 8006d34:	3e353535 	.word	0x3e353535
 8006d38:	26262929 	.word	0x26262929
 8006d3c:	35353535 	.word	0x35353535
 8006d40:	35353535 	.word	0x35353535
 8006d44:	35353535 	.word	0x35353535
 8006d48:	29353535 	.word	0x29353535
 8006d4c:	35353535 	.word	0x35353535
 8006d50:	35353535 	.word	0x35353535
 8006d54:	2e2e3535 	.word	0x2e2e3535
 8006d58:	35293535 	.word	0x35293535
 8006d5c:	2a353535 	.word	0x2a353535
 8006d60:	35353535 	.word	0x35353535
 8006d64:	35352629 	.word	0x35352629
 8006d68:	35353535 	.word	0x35353535
 8006d6c:	35353535 	.word	0x35353535
 8006d70:	29293535 	.word	0x29293535
 8006d74:	2a2a2a35 	.word	0x2a2a2a35
 8006d78:	3535292a 	.word	0x3535292a
 8006d7c:	3535      	.short	0x3535
 8006d7e:	35          	.byte	0x35
 8006d7f:	00          	.byte	0x00
 8006d80:	68a4      	ldr	r4, [r4, #8]
 8006d82:	2c00      	cmp	r4, #0
 8006d84:	d1d0      	bne.n	8006d28 <d_count_templates_scopes+0xc>
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	6864      	ldr	r4, [r4, #4]
 8006d8a:	2c00      	cmp	r4, #0
 8006d8c:	d1cc      	bne.n	8006d28 <d_count_templates_scopes+0xc>
 8006d8e:	e7fa      	b.n	8006d86 <d_count_templates_scopes+0x6a>
 8006d90:	6862      	ldr	r2, [r4, #4]
 8006d92:	7813      	ldrb	r3, [r2, #0]
 8006d94:	2b05      	cmp	r3, #5
 8006d96:	d103      	bne.n	8006da0 <d_count_templates_scopes+0x84>
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	6033      	str	r3, [r6, #0]
 8006d9e:	6862      	ldr	r2, [r4, #4]
 8006da0:	4631      	mov	r1, r6
 8006da2:	4628      	mov	r0, r5
 8006da4:	f7ff ffba 	bl	8006d1c <d_count_templates_scopes>
 8006da8:	68a4      	ldr	r4, [r4, #8]
 8006daa:	2c00      	cmp	r4, #0
 8006dac:	d1bc      	bne.n	8006d28 <d_count_templates_scopes+0xc>
 8006dae:	e7ea      	b.n	8006d86 <d_count_templates_scopes+0x6a>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	602b      	str	r3, [r5, #0]
 8006db6:	6862      	ldr	r2, [r4, #4]
 8006db8:	e7f2      	b.n	8006da0 <d_count_templates_scopes+0x84>
 8006dba:	4770      	bx	lr

08006dbc <d_append_buffer>:
 8006dbc:	b382      	cbz	r2, 8006e20 <d_append_buffer+0x64>
 8006dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006dca:	18af      	adds	r7, r5, r2
 8006dcc:	f04f 0800 	mov.w	r8, #0
 8006dd0:	e009      	b.n	8006de6 <d_append_buffer+0x2a>
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	42bd      	cmp	r5, r7
 8006dd6:	f101 0101 	add.w	r1, r1, #1
 8006dda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006dde:	54e6      	strb	r6, [r4, r3]
 8006de0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006de4:	d01a      	beq.n	8006e1c <d_append_buffer+0x60>
 8006de6:	29ff      	cmp	r1, #255	; 0xff
 8006de8:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006dec:	d1f1      	bne.n	8006dd2 <d_append_buffer+0x16>
 8006dee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006df2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006df6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4798      	blx	r3
 8006dfe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006e02:	2101      	movs	r1, #1
 8006e04:	440b      	add	r3, r1
 8006e06:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006e0a:	42bd      	cmp	r5, r7
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006e14:	54e6      	strb	r6, [r4, r3]
 8006e16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006e1a:	d1e4      	bne.n	8006de6 <d_append_buffer+0x2a>
 8006e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop

08006e24 <d_number.isra.0>:
 8006e24:	b430      	push	{r4, r5}
 8006e26:	6803      	ldr	r3, [r0, #0]
 8006e28:	4604      	mov	r4, r0
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	2a6e      	cmp	r2, #110	; 0x6e
 8006e2e:	d015      	beq.n	8006e5c <d_number.isra.0+0x38>
 8006e30:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e34:	2909      	cmp	r1, #9
 8006e36:	d81b      	bhi.n	8006e70 <d_number.isra.0+0x4c>
 8006e38:	2500      	movs	r5, #0
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e44:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	3830      	subs	r0, #48	; 0x30
 8006e4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e50:	2909      	cmp	r1, #9
 8006e52:	d9f3      	bls.n	8006e3c <d_number.isra.0+0x18>
 8006e54:	b105      	cbz	r5, 8006e58 <d_number.isra.0+0x34>
 8006e56:	4240      	negs	r0, r0
 8006e58:	bc30      	pop	{r4, r5}
 8006e5a:	4770      	bx	lr
 8006e5c:	1c59      	adds	r1, r3, #1
 8006e5e:	6001      	str	r1, [r0, #0]
 8006e60:	785a      	ldrb	r2, [r3, #1]
 8006e62:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006e66:	2b09      	cmp	r3, #9
 8006e68:	d802      	bhi.n	8006e70 <d_number.isra.0+0x4c>
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	2501      	movs	r5, #1
 8006e6e:	e7e4      	b.n	8006e3a <d_number.isra.0+0x16>
 8006e70:	2000      	movs	r0, #0
 8006e72:	e7f1      	b.n	8006e58 <d_number.isra.0+0x34>

08006e74 <d_number_component>:
 8006e74:	6943      	ldr	r3, [r0, #20]
 8006e76:	6982      	ldr	r2, [r0, #24]
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	da14      	bge.n	8006ea6 <d_number_component+0x32>
 8006e7c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006e80:	6901      	ldr	r1, [r0, #16]
 8006e82:	0092      	lsls	r2, r2, #2
 8006e84:	b510      	push	{r4, lr}
 8006e86:	3301      	adds	r3, #1
 8006e88:	188c      	adds	r4, r1, r2
 8006e8a:	6143      	str	r3, [r0, #20]
 8006e8c:	d008      	beq.n	8006ea0 <d_number_component+0x2c>
 8006e8e:	2340      	movs	r3, #64	; 0x40
 8006e90:	548b      	strb	r3, [r1, r2]
 8006e92:	300c      	adds	r0, #12
 8006e94:	f7ff ffc6 	bl	8006e24 <d_number.isra.0>
 8006e98:	4623      	mov	r3, r4
 8006e9a:	6060      	str	r0, [r4, #4]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	4623      	mov	r3, r4
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	4770      	bx	lr

08006eac <d_compact_number>:
 8006eac:	b510      	push	{r4, lr}
 8006eae:	68c3      	ldr	r3, [r0, #12]
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	2a5f      	cmp	r2, #95	; 0x5f
 8006eb6:	d00b      	beq.n	8006ed0 <d_compact_number+0x24>
 8006eb8:	2a6e      	cmp	r2, #110	; 0x6e
 8006eba:	d006      	beq.n	8006eca <d_compact_number+0x1e>
 8006ebc:	300c      	adds	r0, #12
 8006ebe:	f7ff ffb1 	bl	8006e24 <d_number.isra.0>
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	781a      	ldrb	r2, [r3, #0]
 8006ec6:	2a5f      	cmp	r2, #95	; 0x5f
 8006ec8:	d006      	beq.n	8006ed8 <d_compact_number+0x2c>
 8006eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ece:	bd10      	pop	{r4, pc}
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60e3      	str	r3, [r4, #12]
 8006ed6:	bd10      	pop	{r4, pc}
 8006ed8:	3001      	adds	r0, #1
 8006eda:	e7fa      	b.n	8006ed2 <d_compact_number+0x26>

08006edc <d_template_param>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	68c3      	ldr	r3, [r0, #12]
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	2a54      	cmp	r2, #84	; 0x54
 8006ee4:	d001      	beq.n	8006eea <d_template_param+0xe>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	bd38      	pop	{r3, r4, r5, pc}
 8006eea:	3301      	adds	r3, #1
 8006eec:	60c3      	str	r3, [r0, #12]
 8006eee:	4604      	mov	r4, r0
 8006ef0:	f7ff ffdc 	bl	8006eac <d_compact_number>
 8006ef4:	1e05      	subs	r5, r0, #0
 8006ef6:	dbf6      	blt.n	8006ee6 <d_template_param+0xa>
 8006ef8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006efa:	6963      	ldr	r3, [r4, #20]
 8006efc:	69a1      	ldr	r1, [r4, #24]
 8006efe:	3201      	adds	r2, #1
 8006f00:	428b      	cmp	r3, r1
 8006f02:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f04:	daef      	bge.n	8006ee6 <d_template_param+0xa>
 8006f06:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006f0a:	6921      	ldr	r1, [r4, #16]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	0092      	lsls	r2, r2, #2
 8006f10:	6163      	str	r3, [r4, #20]
 8006f12:	188b      	adds	r3, r1, r2
 8006f14:	d0e7      	beq.n	8006ee6 <d_template_param+0xa>
 8006f16:	2005      	movs	r0, #5
 8006f18:	5488      	strb	r0, [r1, r2]
 8006f1a:	605d      	str	r5, [r3, #4]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}

08006f20 <d_source_name>:
 8006f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f22:	4604      	mov	r4, r0
 8006f24:	300c      	adds	r0, #12
 8006f26:	f7ff ff7d 	bl	8006e24 <d_number.isra.0>
 8006f2a:	1e06      	subs	r6, r0, #0
 8006f2c:	dd4f      	ble.n	8006fce <d_source_name+0xae>
 8006f2e:	68e5      	ldr	r5, [r4, #12]
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	1b5b      	subs	r3, r3, r5
 8006f34:	429e      	cmp	r6, r3
 8006f36:	dc2c      	bgt.n	8006f92 <d_source_name+0x72>
 8006f38:	68a2      	ldr	r2, [r4, #8]
 8006f3a:	19ab      	adds	r3, r5, r6
 8006f3c:	0752      	lsls	r2, r2, #29
 8006f3e:	60e3      	str	r3, [r4, #12]
 8006f40:	d504      	bpl.n	8006f4c <d_source_name+0x2c>
 8006f42:	5daa      	ldrb	r2, [r5, r6]
 8006f44:	2a24      	cmp	r2, #36	; 0x24
 8006f46:	bf04      	itt	eq
 8006f48:	3301      	addeq	r3, #1
 8006f4a:	60e3      	streq	r3, [r4, #12]
 8006f4c:	2e09      	cmp	r6, #9
 8006f4e:	dd0c      	ble.n	8006f6a <d_source_name+0x4a>
 8006f50:	2208      	movs	r2, #8
 8006f52:	4920      	ldr	r1, [pc, #128]	; (8006fd4 <d_source_name+0xb4>)
 8006f54:	4628      	mov	r0, r5
 8006f56:	f00c fa95 	bl	8013484 <memcmp>
 8006f5a:	b930      	cbnz	r0, 8006f6a <d_source_name+0x4a>
 8006f5c:	7a2b      	ldrb	r3, [r5, #8]
 8006f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f60:	d01a      	beq.n	8006f98 <d_source_name+0x78>
 8006f62:	2b5f      	cmp	r3, #95	; 0x5f
 8006f64:	d018      	beq.n	8006f98 <d_source_name+0x78>
 8006f66:	2b24      	cmp	r3, #36	; 0x24
 8006f68:	d016      	beq.n	8006f98 <d_source_name+0x78>
 8006f6a:	6963      	ldr	r3, [r4, #20]
 8006f6c:	69a2      	ldr	r2, [r4, #24]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	da0f      	bge.n	8006f92 <d_source_name+0x72>
 8006f72:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006f76:	6921      	ldr	r1, [r4, #16]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	0092      	lsls	r2, r2, #2
 8006f7c:	6163      	str	r3, [r4, #20]
 8006f7e:	188b      	adds	r3, r1, r2
 8006f80:	d007      	beq.n	8006f92 <d_source_name+0x72>
 8006f82:	b135      	cbz	r5, 8006f92 <d_source_name+0x72>
 8006f84:	4618      	mov	r0, r3
 8006f86:	2700      	movs	r7, #0
 8006f88:	548f      	strb	r7, [r1, r2]
 8006f8a:	605d      	str	r5, [r3, #4]
 8006f8c:	609e      	str	r6, [r3, #8]
 8006f8e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f92:	2000      	movs	r0, #0
 8006f94:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f98:	7a6b      	ldrb	r3, [r5, #9]
 8006f9a:	2b4e      	cmp	r3, #78	; 0x4e
 8006f9c:	d1e5      	bne.n	8006f6a <d_source_name+0x4a>
 8006f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006fa0:	6962      	ldr	r2, [r4, #20]
 8006fa2:	69a1      	ldr	r1, [r4, #24]
 8006fa4:	3316      	adds	r3, #22
 8006fa6:	1b9e      	subs	r6, r3, r6
 8006fa8:	428a      	cmp	r2, r1
 8006faa:	6326      	str	r6, [r4, #48]	; 0x30
 8006fac:	daf1      	bge.n	8006f92 <d_source_name+0x72>
 8006fae:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006fb2:	6921      	ldr	r1, [r4, #16]
 8006fb4:	3201      	adds	r2, #1
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	6162      	str	r2, [r4, #20]
 8006fba:	18ca      	adds	r2, r1, r3
 8006fbc:	d0e9      	beq.n	8006f92 <d_source_name+0x72>
 8006fbe:	4e06      	ldr	r6, [pc, #24]	; (8006fd8 <d_source_name+0xb8>)
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	2515      	movs	r5, #21
 8006fc4:	54c8      	strb	r0, [r1, r3]
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	6056      	str	r6, [r2, #4]
 8006fca:	6095      	str	r5, [r2, #8]
 8006fcc:	e7e2      	b.n	8006f94 <d_source_name+0x74>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	08015f40 	.word	0x08015f40
 8006fd8:	08015f4c 	.word	0x08015f4c

08006fdc <d_abi_tags>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	68c3      	ldr	r3, [r0, #12]
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	781a      	ldrb	r2, [r3, #0]
 8006fe4:	2a42      	cmp	r2, #66	; 0x42
 8006fe6:	d110      	bne.n	800700a <d_abi_tags+0x2e>
 8006fe8:	4604      	mov	r4, r0
 8006fea:	3301      	adds	r3, #1
 8006fec:	60e3      	str	r3, [r4, #12]
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f7ff ff96 	bl	8006f20 <d_source_name>
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	214a      	movs	r1, #74	; 0x4a
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff fdcc 	bl	8006b98 <d_make_comp>
 8007000:	68e3      	ldr	r3, [r4, #12]
 8007002:	4605      	mov	r5, r0
 8007004:	781a      	ldrb	r2, [r3, #0]
 8007006:	2a42      	cmp	r2, #66	; 0x42
 8007008:	d0ef      	beq.n	8006fea <d_abi_tags+0xe>
 800700a:	4628      	mov	r0, r5
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop

08007010 <d_substitution>:
 8007010:	68c2      	ldr	r2, [r0, #12]
 8007012:	7813      	ldrb	r3, [r2, #0]
 8007014:	2b53      	cmp	r3, #83	; 0x53
 8007016:	d002      	beq.n	800701e <d_substitution+0xe>
 8007018:	2100      	movs	r1, #0
 800701a:	4608      	mov	r0, r1
 800701c:	4770      	bx	lr
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	1c53      	adds	r3, r2, #1
 8007024:	60c3      	str	r3, [r0, #12]
 8007026:	7853      	ldrb	r3, [r2, #1]
 8007028:	b18b      	cbz	r3, 800704e <d_substitution+0x3e>
 800702a:	1c93      	adds	r3, r2, #2
 800702c:	60c3      	str	r3, [r0, #12]
 800702e:	7854      	ldrb	r4, [r2, #1]
 8007030:	2c5f      	cmp	r4, #95	; 0x5f
 8007032:	d12d      	bne.n	8007090 <d_substitution+0x80>
 8007034:	2300      	movs	r3, #0
 8007036:	6a02      	ldr	r2, [r0, #32]
 8007038:	4293      	cmp	r3, r2
 800703a:	d21c      	bcs.n	8007076 <d_substitution+0x66>
 800703c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800703e:	69c1      	ldr	r1, [r0, #28]
 8007040:	3201      	adds	r2, #1
 8007042:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007046:	6282      	str	r2, [r0, #40]	; 0x28
 8007048:	4608      	mov	r0, r1
 800704a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800704e:	461c      	mov	r4, r3
 8007050:	6883      	ldr	r3, [r0, #8]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	bf14      	ite	ne
 800705a:	2501      	movne	r5, #1
 800705c:	2500      	moveq	r5, #0
 800705e:	d00e      	beq.n	800707e <d_substitution+0x6e>
 8007060:	4b4d      	ldr	r3, [pc, #308]	; (8007198 <d_substitution+0x188>)
 8007062:	2274      	movs	r2, #116	; 0x74
 8007064:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
 8007068:	e000      	b.n	800706c <d_substitution+0x5c>
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	4294      	cmp	r4, r2
 800706e:	d038      	beq.n	80070e2 <d_substitution+0xd2>
 8007070:	331c      	adds	r3, #28
 8007072:	428b      	cmp	r3, r1
 8007074:	d3f9      	bcc.n	800706a <d_substitution+0x5a>
 8007076:	2100      	movs	r1, #0
 8007078:	4608      	mov	r0, r1
 800707a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800707e:	2900      	cmp	r1, #0
 8007080:	d0ee      	beq.n	8007060 <d_substitution+0x50>
 8007082:	68c3      	ldr	r3, [r0, #12]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	3b43      	subs	r3, #67	; 0x43
 8007088:	2b01      	cmp	r3, #1
 800708a:	bf98      	it	ls
 800708c:	2501      	movls	r5, #1
 800708e:	e7e7      	b.n	8007060 <d_substitution+0x50>
 8007090:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8007094:	b2eb      	uxtb	r3, r5
 8007096:	2b09      	cmp	r3, #9
 8007098:	d879      	bhi.n	800718e <d_substitution+0x17e>
 800709a:	2100      	movs	r1, #0
 800709c:	e00d      	b.n	80070ba <d_substitution+0xaa>
 800709e:	3b30      	subs	r3, #48	; 0x30
 80070a0:	4299      	cmp	r1, r3
 80070a2:	d8e8      	bhi.n	8007076 <d_substitution+0x66>
 80070a4:	68c2      	ldr	r2, [r0, #12]
 80070a6:	7814      	ldrb	r4, [r2, #0]
 80070a8:	1c51      	adds	r1, r2, #1
 80070aa:	b11c      	cbz	r4, 80070b4 <d_substitution+0xa4>
 80070ac:	60c1      	str	r1, [r0, #12]
 80070ae:	7814      	ldrb	r4, [r2, #0]
 80070b0:	2c5f      	cmp	r4, #95	; 0x5f
 80070b2:	d014      	beq.n	80070de <d_substitution+0xce>
 80070b4:	4619      	mov	r1, r3
 80070b6:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80070ba:	b2ed      	uxtb	r5, r5
 80070bc:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80070c0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 80070c4:	2d09      	cmp	r5, #9
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070cc:	d9e7      	bls.n	800709e <d_substitution+0x8e>
 80070ce:	2a19      	cmp	r2, #25
 80070d0:	d8d1      	bhi.n	8007076 <d_substitution+0x66>
 80070d2:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 80070d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070da:	3b37      	subs	r3, #55	; 0x37
 80070dc:	e7e0      	b.n	80070a0 <d_substitution+0x90>
 80070de:	3301      	adds	r3, #1
 80070e0:	e7a9      	b.n	8007036 <d_substitution+0x26>
 80070e2:	695c      	ldr	r4, [r3, #20]
 80070e4:	2c00      	cmp	r4, #0
 80070e6:	d049      	beq.n	800717c <d_substitution+0x16c>
 80070e8:	6942      	ldr	r2, [r0, #20]
 80070ea:	6981      	ldr	r1, [r0, #24]
 80070ec:	428a      	cmp	r2, r1
 80070ee:	da43      	bge.n	8007178 <d_substitution+0x168>
 80070f0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 80070f4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80070f8:	00b6      	lsls	r6, r6, #2
 80070fa:	3201      	adds	r2, #1
 80070fc:	eb1e 0706 	adds.w	r7, lr, r6
 8007100:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8007104:	6142      	str	r2, [r0, #20]
 8007106:	d040      	beq.n	800718a <d_substitution+0x17a>
 8007108:	f04f 0c18 	mov.w	ip, #24
 800710c:	f80e c006 	strb.w	ip, [lr, r6]
 8007110:	463e      	mov	r6, r7
 8007112:	607c      	str	r4, [r7, #4]
 8007114:	f8c7 8008 	str.w	r8, [r7, #8]
 8007118:	62c6      	str	r6, [r0, #44]	; 0x2c
 800711a:	b345      	cbz	r5, 800716e <d_substitution+0x15e>
 800711c:	68de      	ldr	r6, [r3, #12]
 800711e:	691c      	ldr	r4, [r3, #16]
 8007120:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007122:	4291      	cmp	r1, r2
 8007124:	4423      	add	r3, r4
 8007126:	6303      	str	r3, [r0, #48]	; 0x30
 8007128:	dd24      	ble.n	8007174 <d_substitution+0x164>
 800712a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800712e:	6905      	ldr	r5, [r0, #16]
 8007130:	0089      	lsls	r1, r1, #2
 8007132:	3201      	adds	r2, #1
 8007134:	186b      	adds	r3, r5, r1
 8007136:	6142      	str	r2, [r0, #20]
 8007138:	d025      	beq.n	8007186 <d_substitution+0x176>
 800713a:	2218      	movs	r2, #24
 800713c:	546a      	strb	r2, [r5, r1]
 800713e:	4619      	mov	r1, r3
 8007140:	605e      	str	r6, [r3, #4]
 8007142:	609c      	str	r4, [r3, #8]
 8007144:	68c3      	ldr	r3, [r0, #12]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	2b42      	cmp	r3, #66	; 0x42
 800714a:	f47f af7d 	bne.w	8007048 <d_substitution+0x38>
 800714e:	4604      	mov	r4, r0
 8007150:	f7ff ff44 	bl	8006fdc <d_abi_tags>
 8007154:	2800      	cmp	r0, #0
 8007156:	d08e      	beq.n	8007076 <d_substitution+0x66>
 8007158:	6a23      	ldr	r3, [r4, #32]
 800715a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800715c:	4293      	cmp	r3, r2
 800715e:	da10      	bge.n	8007182 <d_substitution+0x172>
 8007160:	69e1      	ldr	r1, [r4, #28]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8007168:	4601      	mov	r1, r0
 800716a:	6222      	str	r2, [r4, #32]
 800716c:	e76c      	b.n	8007048 <d_substitution+0x38>
 800716e:	685e      	ldr	r6, [r3, #4]
 8007170:	689c      	ldr	r4, [r3, #8]
 8007172:	e7d5      	b.n	8007120 <d_substitution+0x110>
 8007174:	2100      	movs	r1, #0
 8007176:	e7e5      	b.n	8007144 <d_substitution+0x134>
 8007178:	2600      	movs	r6, #0
 800717a:	e7cd      	b.n	8007118 <d_substitution+0x108>
 800717c:	6981      	ldr	r1, [r0, #24]
 800717e:	6942      	ldr	r2, [r0, #20]
 8007180:	e7cb      	b.n	800711a <d_substitution+0x10a>
 8007182:	4601      	mov	r1, r0
 8007184:	e760      	b.n	8007048 <d_substitution+0x38>
 8007186:	4619      	mov	r1, r3
 8007188:	e7dc      	b.n	8007144 <d_substitution+0x134>
 800718a:	463e      	mov	r6, r7
 800718c:	e7c4      	b.n	8007118 <d_substitution+0x108>
 800718e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007192:	2b19      	cmp	r3, #25
 8007194:	d981      	bls.n	800709a <d_substitution+0x8a>
 8007196:	e75b      	b.n	8007050 <d_substitution+0x40>
 8007198:	08014980 	.word	0x08014980

0800719c <d_call_offset>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4604      	mov	r4, r0
 80071a0:	b929      	cbnz	r1, 80071ae <d_call_offset+0x12>
 80071a2:	68c3      	ldr	r3, [r0, #12]
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	b132      	cbz	r2, 80071b6 <d_call_offset+0x1a>
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	60c2      	str	r2, [r0, #12]
 80071ac:	7819      	ldrb	r1, [r3, #0]
 80071ae:	2968      	cmp	r1, #104	; 0x68
 80071b0:	d019      	beq.n	80071e6 <d_call_offset+0x4a>
 80071b2:	2976      	cmp	r1, #118	; 0x76
 80071b4:	d001      	beq.n	80071ba <d_call_offset+0x1e>
 80071b6:	2000      	movs	r0, #0
 80071b8:	bd38      	pop	{r3, r4, r5, pc}
 80071ba:	f104 050c 	add.w	r5, r4, #12
 80071be:	4628      	mov	r0, r5
 80071c0:	f7ff fe30 	bl	8006e24 <d_number.isra.0>
 80071c4:	68e3      	ldr	r3, [r4, #12]
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	2a5f      	cmp	r2, #95	; 0x5f
 80071ca:	d1f4      	bne.n	80071b6 <d_call_offset+0x1a>
 80071cc:	3301      	adds	r3, #1
 80071ce:	60e3      	str	r3, [r4, #12]
 80071d0:	4628      	mov	r0, r5
 80071d2:	f7ff fe27 	bl	8006e24 <d_number.isra.0>
 80071d6:	68e3      	ldr	r3, [r4, #12]
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	2a5f      	cmp	r2, #95	; 0x5f
 80071dc:	d1eb      	bne.n	80071b6 <d_call_offset+0x1a>
 80071de:	3301      	adds	r3, #1
 80071e0:	60e3      	str	r3, [r4, #12]
 80071e2:	2001      	movs	r0, #1
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	f104 000c 	add.w	r0, r4, #12
 80071ea:	f7ff fe1b 	bl	8006e24 <d_number.isra.0>
 80071ee:	e7f2      	b.n	80071d6 <d_call_offset+0x3a>

080071f0 <d_lookup_template_argument.isra.6>:
 80071f0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80071f4:	4602      	mov	r2, r0
 80071f6:	b1c3      	cbz	r3, 800722a <d_lookup_template_argument.isra.6+0x3a>
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	680b      	ldr	r3, [r1, #0]
 80071fc:	6890      	ldr	r0, [r2, #8]
 80071fe:	b170      	cbz	r0, 800721e <d_lookup_template_argument.isra.6+0x2e>
 8007200:	7802      	ldrb	r2, [r0, #0]
 8007202:	2a2f      	cmp	r2, #47	; 0x2f
 8007204:	d10d      	bne.n	8007222 <d_lookup_template_argument.isra.6+0x32>
 8007206:	2b00      	cmp	r3, #0
 8007208:	dc04      	bgt.n	8007214 <d_lookup_template_argument.isra.6+0x24>
 800720a:	e009      	b.n	8007220 <d_lookup_template_argument.isra.6+0x30>
 800720c:	7802      	ldrb	r2, [r0, #0]
 800720e:	2a2f      	cmp	r2, #47	; 0x2f
 8007210:	d107      	bne.n	8007222 <d_lookup_template_argument.isra.6+0x32>
 8007212:	b143      	cbz	r3, 8007226 <d_lookup_template_argument.isra.6+0x36>
 8007214:	6880      	ldr	r0, [r0, #8]
 8007216:	3b01      	subs	r3, #1
 8007218:	2800      	cmp	r0, #0
 800721a:	d1f7      	bne.n	800720c <d_lookup_template_argument.isra.6+0x1c>
 800721c:	4770      	bx	lr
 800721e:	4770      	bx	lr
 8007220:	d001      	beq.n	8007226 <d_lookup_template_argument.isra.6+0x36>
 8007222:	2000      	movs	r0, #0
 8007224:	4770      	bx	lr
 8007226:	6840      	ldr	r0, [r0, #4]
 8007228:	4770      	bx	lr
 800722a:	2101      	movs	r1, #1
 800722c:	4618      	mov	r0, r3
 800722e:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 8007232:	4770      	bx	lr

08007234 <d_find_pack>:
 8007234:	2900      	cmp	r1, #0
 8007236:	d041      	beq.n	80072bc <d_find_pack+0x88>
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4605      	mov	r5, r0
 800723c:	460c      	mov	r4, r1
 800723e:	7823      	ldrb	r3, [r4, #0]
 8007240:	2b4a      	cmp	r3, #74	; 0x4a
 8007242:	d827      	bhi.n	8007294 <d_find_pack+0x60>
 8007244:	e8df f003 	tbb	[pc, r3]
 8007248:	2626262e 	.word	0x2626262e
 800724c:	2b2e3026 	.word	0x2b2e3026
 8007250:	2626262b 	.word	0x2626262b
 8007254:	26262626 	.word	0x26262626
 8007258:	26262626 	.word	0x26262626
 800725c:	26262626 	.word	0x26262626
 8007260:	2626262e 	.word	0x2626262e
 8007264:	26262626 	.word	0x26262626
 8007268:	26262626 	.word	0x26262626
 800726c:	2e262626 	.word	0x2e262626
 8007270:	26262626 	.word	0x26262626
 8007274:	26262626 	.word	0x26262626
 8007278:	262b2e26 	.word	0x262b2e26
 800727c:	26262626 	.word	0x26262626
 8007280:	26262626 	.word	0x26262626
 8007284:	2e262626 	.word	0x2e262626
 8007288:	26262626 	.word	0x26262626
 800728c:	262e262e 	.word	0x262e262e
 8007290:	2e26      	.short	0x2e26
 8007292:	2e          	.byte	0x2e
 8007293:	00          	.byte	0x00
 8007294:	6861      	ldr	r1, [r4, #4]
 8007296:	4628      	mov	r0, r5
 8007298:	f7ff ffcc 	bl	8007234 <d_find_pack>
 800729c:	b918      	cbnz	r0, 80072a6 <d_find_pack+0x72>
 800729e:	68a4      	ldr	r4, [r4, #8]
 80072a0:	2c00      	cmp	r4, #0
 80072a2:	d1cc      	bne.n	800723e <d_find_pack+0xa>
 80072a4:	2000      	movs	r0, #0
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	1d21      	adds	r1, r4, #4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f7ff ffa0 	bl	80071f0 <d_lookup_template_argument.isra.6>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d0f7      	beq.n	80072a4 <d_find_pack+0x70>
 80072b4:	7803      	ldrb	r3, [r0, #0]
 80072b6:	2b2f      	cmp	r3, #47	; 0x2f
 80072b8:	d1f4      	bne.n	80072a4 <d_find_pack+0x70>
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	2000      	movs	r0, #0
 80072be:	4770      	bx	lr

080072c0 <d_growable_string_callback_adapter>:
 80072c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c2:	6853      	ldr	r3, [r2, #4]
 80072c4:	6894      	ldr	r4, [r2, #8]
 80072c6:	3301      	adds	r3, #1
 80072c8:	440b      	add	r3, r1
 80072ca:	42a3      	cmp	r3, r4
 80072cc:	b083      	sub	sp, #12
 80072ce:	4615      	mov	r5, r2
 80072d0:	460e      	mov	r6, r1
 80072d2:	4607      	mov	r7, r0
 80072d4:	d813      	bhi.n	80072fe <d_growable_string_callback_adapter+0x3e>
 80072d6:	68ec      	ldr	r4, [r5, #12]
 80072d8:	b10c      	cbz	r4, 80072de <d_growable_string_callback_adapter+0x1e>
 80072da:	b003      	add	sp, #12
 80072dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072de:	e895 0009 	ldmia.w	r5, {r0, r3}
 80072e2:	4632      	mov	r2, r6
 80072e4:	4639      	mov	r1, r7
 80072e6:	4418      	add	r0, r3
 80072e8:	f00c f8db 	bl	80134a2 <memcpy>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	686a      	ldr	r2, [r5, #4]
 80072f0:	4433      	add	r3, r6
 80072f2:	549c      	strb	r4, [r3, r2]
 80072f4:	686b      	ldr	r3, [r5, #4]
 80072f6:	441e      	add	r6, r3
 80072f8:	606e      	str	r6, [r5, #4]
 80072fa:	b003      	add	sp, #12
 80072fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fe:	68d2      	ldr	r2, [r2, #12]
 8007300:	2a00      	cmp	r2, #0
 8007302:	d1ea      	bne.n	80072da <d_growable_string_callback_adapter+0x1a>
 8007304:	b91c      	cbnz	r4, 800730e <d_growable_string_callback_adapter+0x4e>
 8007306:	2b02      	cmp	r3, #2
 8007308:	f04f 0402 	mov.w	r4, #2
 800730c:	d902      	bls.n	8007314 <d_growable_string_callback_adapter+0x54>
 800730e:	0064      	lsls	r4, r4, #1
 8007310:	42a3      	cmp	r3, r4
 8007312:	d8fc      	bhi.n	800730e <d_growable_string_callback_adapter+0x4e>
 8007314:	4621      	mov	r1, r4
 8007316:	6828      	ldr	r0, [r5, #0]
 8007318:	f00c f96e 	bl	80135f8 <realloc>
 800731c:	b110      	cbz	r0, 8007324 <d_growable_string_callback_adapter+0x64>
 800731e:	6028      	str	r0, [r5, #0]
 8007320:	60ac      	str	r4, [r5, #8]
 8007322:	e7d8      	b.n	80072d6 <d_growable_string_callback_adapter+0x16>
 8007324:	9001      	str	r0, [sp, #4]
 8007326:	6828      	ldr	r0, [r5, #0]
 8007328:	f00c f8a4 	bl	8013474 <free>
 800732c:	9b01      	ldr	r3, [sp, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	602b      	str	r3, [r5, #0]
 8007332:	606b      	str	r3, [r5, #4]
 8007334:	60ab      	str	r3, [r5, #8]
 8007336:	60ea      	str	r2, [r5, #12]
 8007338:	e7cf      	b.n	80072da <d_growable_string_callback_adapter+0x1a>
 800733a:	bf00      	nop

0800733c <d_print_comp_inner>:
 800733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007340:	4604      	mov	r4, r0
 8007342:	b095      	sub	sp, #84	; 0x54
 8007344:	2a00      	cmp	r2, #0
 8007346:	f000 80c3 	beq.w	80074d0 <d_print_comp_inner+0x194>
 800734a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 80b6 	bne.w	80074c0 <d_print_comp_inner+0x184>
 8007354:	7813      	ldrb	r3, [r2, #0]
 8007356:	460f      	mov	r7, r1
 8007358:	4615      	mov	r5, r2
 800735a:	2b4b      	cmp	r3, #75	; 0x4b
 800735c:	f201 81ec 	bhi.w	8008738 <d_print_comp_inner+0x13fc>
 8007360:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007364:	094c096d 	.word	0x094c096d
 8007368:	08bf094c 	.word	0x08bf094c
 800736c:	09cd087b 	.word	0x09cd087b
 8007370:	09e509a2 	.word	0x09e509a2
 8007374:	085407c7 	.word	0x085407c7
 8007378:	0806082d 	.word	0x0806082d
 800737c:	05d607df 	.word	0x05d607df
 8007380:	057a05af 	.word	0x057a05af
 8007384:	07100553 	.word	0x07100553
 8007388:	06c206e9 	.word	0x06c206e9
 800738c:	0674069b 	.word	0x0674069b
 8007390:	0626064d 	.word	0x0626064d
 8007394:	07ad05fd 	.word	0x07ad05fd
 8007398:	07ad07ad 	.word	0x07ad07ad
 800739c:	07a807a8 	.word	0x07a807a8
 80073a0:	07a807a8 	.word	0x07a807a8
 80073a4:	07a807a8 	.word	0x07a807a8
 80073a8:	077607a8 	.word	0x077607a8
 80073ac:	07a80776 	.word	0x07a80776
 80073b0:	073707a8 	.word	0x073707a8
 80073b4:	04fd07da 	.word	0x04fd07da
 80073b8:	04760491 	.word	0x04760491
 80073bc:	047603d4 	.word	0x047603d4
 80073c0:	03940394 	.word	0x03940394
 80073c4:	03470371 	.word	0x03470371
 80073c8:	02f90320 	.word	0x02f90320
 80073cc:	02c702f5 	.word	0x02c702f5
 80073d0:	0472004c 	.word	0x0472004c
 80073d4:	04170512 	.word	0x04170512
 80073d8:	04420417 	.word	0x04420417
 80073dc:	041b0442 	.word	0x041b0442
 80073e0:	02b102be 	.word	0x02b102be
 80073e4:	0233025a 	.word	0x0233025a
 80073e8:	01d001f7 	.word	0x01d001f7
 80073ec:	09ea01a9 	.word	0x09ea01a9
 80073f0:	028a0183 	.word	0x028a0183
 80073f4:	0110015c 	.word	0x0110015c
 80073f8:	00bc00e6 	.word	0x00bc00e6
 80073fc:	68ae      	ldr	r6, [r5, #8]
 80073fe:	7833      	ldrb	r3, [r6, #0]
 8007400:	2b37      	cmp	r3, #55	; 0x37
 8007402:	d165      	bne.n	80074d0 <d_print_comp_inner+0x194>
 8007404:	686a      	ldr	r2, [r5, #4]
 8007406:	6853      	ldr	r3, [r2, #4]
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	7848      	ldrb	r0, [r1, #1]
 800740c:	2863      	cmp	r0, #99	; 0x63
 800740e:	f002 8089 	beq.w	8009524 <d_print_comp_inner+0x21e8>
 8007412:	7811      	ldrb	r1, [r2, #0]
 8007414:	2931      	cmp	r1, #49	; 0x31
 8007416:	f002 815e 	beq.w	80096d6 <d_print_comp_inner+0x239a>
 800741a:	6853      	ldr	r3, [r2, #4]
 800741c:	49d1      	ldr	r1, [pc, #836]	; (8007764 <d_print_comp_inner+0x428>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	f007 fd12 	bl	800ee48 <strcmp>
 8007424:	6872      	ldr	r2, [r6, #4]
 8007426:	b918      	cbnz	r0, 8007430 <d_print_comp_inner+0xf4>
 8007428:	7813      	ldrb	r3, [r2, #0]
 800742a:	2b03      	cmp	r3, #3
 800742c:	f002 81ed 	beq.w	800980a <d_print_comp_inner+0x24ce>
 8007430:	4639      	mov	r1, r7
 8007432:	4620      	mov	r0, r4
 8007434:	f003 fa4c 	bl	800a8d0 <d_print_subexpr>
 8007438:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800743c:	49ca      	ldr	r1, [pc, #808]	; (8007768 <d_print_comp_inner+0x42c>)
 800743e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007442:	f8d3 9000 	ldr.w	r9, [r3]
 8007446:	4648      	mov	r0, r9
 8007448:	f007 fcfe 	bl	800ee48 <strcmp>
 800744c:	4606      	mov	r6, r0
 800744e:	2800      	cmp	r0, #0
 8007450:	f041 87ee 	bne.w	8009430 <d_print_comp_inner+0x20f4>
 8007454:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007458:	29ff      	cmp	r1, #255	; 0xff
 800745a:	f002 827c 	beq.w	8009956 <d_print_comp_inner+0x261a>
 800745e:	1c4a      	adds	r2, r1, #1
 8007460:	235b      	movs	r3, #91	; 0x5b
 8007462:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007466:	5463      	strb	r3, [r4, r1]
 8007468:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800746c:	68ab      	ldr	r3, [r5, #8]
 800746e:	4639      	mov	r1, r7
 8007470:	689a      	ldr	r2, [r3, #8]
 8007472:	4620      	mov	r0, r4
 8007474:	f002 fb7a 	bl	8009b6c <d_print_comp>
 8007478:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800747c:	29ff      	cmp	r1, #255	; 0xff
 800747e:	f002 827a 	beq.w	8009976 <d_print_comp_inner+0x263a>
 8007482:	235d      	movs	r3, #93	; 0x5d
 8007484:	1c4a      	adds	r2, r1, #1
 8007486:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800748a:	5463      	strb	r3, [r4, r1]
 800748c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007490:	686b      	ldr	r3, [r5, #4]
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	2a31      	cmp	r2, #49	; 0x31
 8007496:	d113      	bne.n	80074c0 <d_print_comp_inner+0x184>
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	2a01      	cmp	r2, #1
 800749e:	d10f      	bne.n	80074c0 <d_print_comp_inner+0x184>
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b3e      	cmp	r3, #62	; 0x3e
 80074a6:	d10b      	bne.n	80074c0 <d_print_comp_inner+0x184>
 80074a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80074ac:	29ff      	cmp	r1, #255	; 0xff
 80074ae:	f002 8323 	beq.w	8009af8 <d_print_comp_inner+0x27bc>
 80074b2:	2329      	movs	r3, #41	; 0x29
 80074b4:	1c4a      	adds	r2, r1, #1
 80074b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80074ba:	5463      	strb	r3, [r4, r1]
 80074bc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80074c0:	b015      	add	sp, #84	; 0x54
 80074c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c6:	f1b8 0f00 	cmp.w	r8, #0
 80074ca:	d001      	beq.n	80074d0 <d_print_comp_inner+0x194>
 80074cc:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 80074d0:	2301      	movs	r3, #1
 80074d2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80074d6:	b015      	add	sp, #84	; 0x54
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	4ea3      	ldr	r6, [pc, #652]	; (800776c <d_print_comp_inner+0x430>)
 80074de:	686a      	ldr	r2, [r5, #4]
 80074e0:	f002 fb44 	bl	8009b6c <d_print_comp>
 80074e4:	f106 0a08 	add.w	sl, r6, #8
 80074e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80074ec:	f04f 0900 	mov.w	r9, #0
 80074f0:	e00a      	b.n	8007508 <d_print_comp_inner+0x1cc>
 80074f2:	460b      	mov	r3, r1
 80074f4:	3101      	adds	r1, #1
 80074f6:	45b2      	cmp	sl, r6
 80074f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80074fc:	f804 8003 	strb.w	r8, [r4, r3]
 8007500:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007504:	f001 8299 	beq.w	8008a3a <d_print_comp_inner+0x16fe>
 8007508:	29ff      	cmp	r1, #255	; 0xff
 800750a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800750e:	d1f0      	bne.n	80074f2 <d_print_comp_inner+0x1b6>
 8007510:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007514:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007518:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800751c:	4620      	mov	r0, r4
 800751e:	4798      	blx	r3
 8007520:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007524:	2101      	movs	r1, #1
 8007526:	440b      	add	r3, r1
 8007528:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800752c:	2300      	movs	r3, #0
 800752e:	e7e2      	b.n	80074f6 <d_print_comp_inner+0x1ba>
 8007530:	4e8f      	ldr	r6, [pc, #572]	; (8007770 <d_print_comp_inner+0x434>)
 8007532:	686a      	ldr	r2, [r5, #4]
 8007534:	f002 fb1a 	bl	8009b6c <d_print_comp>
 8007538:	f106 0a05 	add.w	sl, r6, #5
 800753c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007540:	f04f 0900 	mov.w	r9, #0
 8007544:	e00a      	b.n	800755c <d_print_comp_inner+0x220>
 8007546:	460b      	mov	r3, r1
 8007548:	3101      	adds	r1, #1
 800754a:	45b2      	cmp	sl, r6
 800754c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007550:	f804 8003 	strb.w	r8, [r4, r3]
 8007554:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007558:	f001 8248 	beq.w	80089ec <d_print_comp_inner+0x16b0>
 800755c:	29ff      	cmp	r1, #255	; 0xff
 800755e:	f816 8b01 	ldrb.w	r8, [r6], #1
 8007562:	d1f0      	bne.n	8007546 <d_print_comp_inner+0x20a>
 8007564:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007568:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800756c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007570:	4620      	mov	r0, r4
 8007572:	4798      	blx	r3
 8007574:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007578:	2101      	movs	r1, #1
 800757a:	440b      	add	r3, r1
 800757c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007580:	2300      	movs	r3, #0
 8007582:	e7e2      	b.n	800754a <d_print_comp_inner+0x20e>
 8007584:	6869      	ldr	r1, [r5, #4]
 8007586:	f7ff fe55 	bl	8007234 <d_find_pack>
 800758a:	f04f 0900 	mov.w	r9, #0
 800758e:	2800      	cmp	r0, #0
 8007590:	f002 8149 	beq.w	8009826 <d_print_comp_inner+0x24ea>
 8007594:	7803      	ldrb	r3, [r0, #0]
 8007596:	2b2f      	cmp	r3, #47	; 0x2f
 8007598:	f041 8315 	bne.w	8008bc6 <d_print_comp_inner+0x188a>
 800759c:	6843      	ldr	r3, [r0, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f001 8311 	beq.w	8008bc6 <d_print_comp_inner+0x188a>
 80075a4:	6880      	ldr	r0, [r0, #8]
 80075a6:	f109 0901 	add.w	r9, r9, #1
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d1f2      	bne.n	8007594 <d_print_comp_inner+0x258>
 80075ae:	686b      	ldr	r3, [r5, #4]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	f04f 0b00 	mov.w	fp, #0
 80075b6:	46da      	mov	sl, fp
 80075b8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	f8c4 b11c 	str.w	fp, [r4, #284]	; 0x11c
 80075c2:	9a00      	ldr	r2, [sp, #0]
 80075c4:	4639      	mov	r1, r7
 80075c6:	4620      	mov	r0, r4
 80075c8:	f002 fad0 	bl	8009b6c <d_print_comp>
 80075cc:	9b01      	ldr	r3, [sp, #4]
 80075ce:	455b      	cmp	r3, fp
 80075d0:	f341 80b7 	ble.w	8008742 <d_print_comp_inner+0x1406>
 80075d4:	4d67      	ldr	r5, [pc, #412]	; (8007774 <d_print_comp_inner+0x438>)
 80075d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80075da:	f105 0802 	add.w	r8, r5, #2
 80075de:	e009      	b.n	80075f4 <d_print_comp_inner+0x2b8>
 80075e0:	460b      	mov	r3, r1
 80075e2:	3101      	adds	r1, #1
 80075e4:	45a8      	cmp	r8, r5
 80075e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80075ea:	54e6      	strb	r6, [r4, r3]
 80075ec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80075f0:	f001 80a7 	beq.w	8008742 <d_print_comp_inner+0x1406>
 80075f4:	29ff      	cmp	r1, #255	; 0xff
 80075f6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80075fa:	d1f1      	bne.n	80075e0 <d_print_comp_inner+0x2a4>
 80075fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007600:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8007604:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007608:	4620      	mov	r0, r4
 800760a:	4798      	blx	r3
 800760c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007610:	2101      	movs	r1, #1
 8007612:	440b      	add	r3, r1
 8007614:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007618:	2300      	movs	r3, #0
 800761a:	e7e3      	b.n	80075e4 <d_print_comp_inner+0x2a8>
 800761c:	4e56      	ldr	r6, [pc, #344]	; (8007778 <d_print_comp_inner+0x43c>)
 800761e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007622:	f106 0a1a 	add.w	sl, r6, #26
 8007626:	f04f 0900 	mov.w	r9, #0
 800762a:	e00a      	b.n	8007642 <d_print_comp_inner+0x306>
 800762c:	460b      	mov	r3, r1
 800762e:	3101      	adds	r1, #1
 8007630:	45b2      	cmp	sl, r6
 8007632:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007636:	f804 8003 	strb.w	r8, [r4, r3]
 800763a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800763e:	f001 81e8 	beq.w	8008a12 <d_print_comp_inner+0x16d6>
 8007642:	29ff      	cmp	r1, #255	; 0xff
 8007644:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007648:	d1f0      	bne.n	800762c <d_print_comp_inner+0x2f0>
 800764a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800764e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007652:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007656:	4620      	mov	r0, r4
 8007658:	4798      	blx	r3
 800765a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800765e:	2101      	movs	r1, #1
 8007660:	440b      	add	r3, r1
 8007662:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007666:	2300      	movs	r3, #0
 8007668:	e7e2      	b.n	8007630 <d_print_comp_inner+0x2f4>
 800766a:	4e44      	ldr	r6, [pc, #272]	; (800777c <d_print_comp_inner+0x440>)
 800766c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007670:	f106 090e 	add.w	r9, r6, #14
 8007674:	f04f 0800 	mov.w	r8, #0
 8007678:	e009      	b.n	800768e <d_print_comp_inner+0x352>
 800767a:	460b      	mov	r3, r1
 800767c:	3101      	adds	r1, #1
 800767e:	45b1      	cmp	r9, r6
 8007680:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007684:	54e7      	strb	r7, [r4, r3]
 8007686:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800768a:	f001 80b1 	beq.w	80087f0 <d_print_comp_inner+0x14b4>
 800768e:	29ff      	cmp	r1, #255	; 0xff
 8007690:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8007694:	d1f1      	bne.n	800767a <d_print_comp_inner+0x33e>
 8007696:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800769a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800769e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80076a2:	4620      	mov	r0, r4
 80076a4:	4798      	blx	r3
 80076a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80076aa:	2101      	movs	r1, #1
 80076ac:	440b      	add	r3, r1
 80076ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80076b2:	2300      	movs	r3, #0
 80076b4:	e7e3      	b.n	800767e <d_print_comp_inner+0x342>
 80076b6:	4e32      	ldr	r6, [pc, #200]	; (8007780 <d_print_comp_inner+0x444>)
 80076b8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80076bc:	f106 0a08 	add.w	sl, r6, #8
 80076c0:	f04f 0900 	mov.w	r9, #0
 80076c4:	e00a      	b.n	80076dc <d_print_comp_inner+0x3a0>
 80076c6:	460b      	mov	r3, r1
 80076c8:	3101      	adds	r1, #1
 80076ca:	45b2      	cmp	sl, r6
 80076cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80076d0:	f804 8003 	strb.w	r8, [r4, r3]
 80076d4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80076d8:	f001 80c6 	beq.w	8008868 <d_print_comp_inner+0x152c>
 80076dc:	29ff      	cmp	r1, #255	; 0xff
 80076de:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80076e2:	d1f0      	bne.n	80076c6 <d_print_comp_inner+0x38a>
 80076e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80076e8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80076ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80076f0:	4620      	mov	r0, r4
 80076f2:	4798      	blx	r3
 80076f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80076f8:	2101      	movs	r1, #1
 80076fa:	440b      	add	r3, r1
 80076fc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007700:	2300      	movs	r3, #0
 8007702:	e7e2      	b.n	80076ca <d_print_comp_inner+0x38e>
 8007704:	4e1f      	ldr	r6, [pc, #124]	; (8007784 <d_print_comp_inner+0x448>)
 8007706:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800770a:	f106 0a1c 	add.w	sl, r6, #28
 800770e:	f04f 0900 	mov.w	r9, #0
 8007712:	e00a      	b.n	800772a <d_print_comp_inner+0x3ee>
 8007714:	460b      	mov	r3, r1
 8007716:	3101      	adds	r1, #1
 8007718:	45b2      	cmp	sl, r6
 800771a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800771e:	f804 8003 	strb.w	r8, [r4, r3]
 8007722:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007726:	f001 805c 	beq.w	80087e2 <d_print_comp_inner+0x14a6>
 800772a:	29ff      	cmp	r1, #255	; 0xff
 800772c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007730:	d1f0      	bne.n	8007714 <d_print_comp_inner+0x3d8>
 8007732:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007736:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800773a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800773e:	4620      	mov	r0, r4
 8007740:	4798      	blx	r3
 8007742:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007746:	2101      	movs	r1, #1
 8007748:	440b      	add	r3, r1
 800774a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800774e:	2300      	movs	r3, #0
 8007750:	e7e2      	b.n	8007718 <d_print_comp_inner+0x3dc>
 8007752:	4e0d      	ldr	r6, [pc, #52]	; (8007788 <d_print_comp_inner+0x44c>)
 8007754:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007758:	f106 0a1d 	add.w	sl, r6, #29
 800775c:	f04f 0900 	mov.w	r9, #0
 8007760:	e01f      	b.n	80077a2 <d_print_comp_inner+0x466>
 8007762:	bf00      	nop
 8007764:	0801611c 	.word	0x0801611c
 8007768:	08016120 	.word	0x08016120
 800776c:	080161df 	.word	0x080161df
 8007770:	08015f64 	.word	0x08015f64
 8007774:	080160f4 	.word	0x080160f4
 8007778:	080160bf 	.word	0x080160bf
 800777c:	080161cf 	.word	0x080161cf
 8007780:	080161bf 	.word	0x080161bf
 8007784:	0801619f 	.word	0x0801619f
 8007788:	0801617f 	.word	0x0801617f
 800778c:	460b      	mov	r3, r1
 800778e:	3101      	adds	r1, #1
 8007790:	45b2      	cmp	sl, r6
 8007792:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007796:	f804 8003 	strb.w	r8, [r4, r3]
 800779a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800779e:	f001 80db 	beq.w	8008958 <d_print_comp_inner+0x161c>
 80077a2:	29ff      	cmp	r1, #255	; 0xff
 80077a4:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80077a8:	d1f0      	bne.n	800778c <d_print_comp_inner+0x450>
 80077aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80077ae:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80077b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80077b6:	4620      	mov	r0, r4
 80077b8:	4798      	blx	r3
 80077ba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80077be:	2101      	movs	r1, #1
 80077c0:	440b      	add	r3, r1
 80077c2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80077c6:	2300      	movs	r3, #0
 80077c8:	e7e2      	b.n	8007790 <d_print_comp_inner+0x454>
 80077ca:	4eca      	ldr	r6, [pc, #808]	; (8007af4 <d_print_comp_inner+0x7b8>)
 80077cc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80077d0:	f106 0a0a 	add.w	sl, r6, #10
 80077d4:	f04f 0900 	mov.w	r9, #0
 80077d8:	e00a      	b.n	80077f0 <d_print_comp_inner+0x4b4>
 80077da:	460b      	mov	r3, r1
 80077dc:	3101      	adds	r1, #1
 80077de:	45b2      	cmp	sl, r6
 80077e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80077e4:	f804 8003 	strb.w	r8, [r4, r3]
 80077e8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80077ec:	f000 87e6 	beq.w	80087bc <d_print_comp_inner+0x1480>
 80077f0:	29ff      	cmp	r1, #255	; 0xff
 80077f2:	f816 8b01 	ldrb.w	r8, [r6], #1
 80077f6:	d1f0      	bne.n	80077da <d_print_comp_inner+0x49e>
 80077f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80077fc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007800:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007804:	4620      	mov	r0, r4
 8007806:	4798      	blx	r3
 8007808:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800780c:	2101      	movs	r1, #1
 800780e:	440b      	add	r3, r1
 8007810:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007814:	2300      	movs	r3, #0
 8007816:	e7e2      	b.n	80077de <d_print_comp_inner+0x4a2>
 8007818:	686a      	ldr	r2, [r5, #4]
 800781a:	a804      	add	r0, sp, #16
 800781c:	49b6      	ldr	r1, [pc, #728]	; (8007af8 <d_print_comp_inner+0x7bc>)
 800781e:	f00b ffd3 	bl	80137c8 <siprintf>
 8007822:	a804      	add	r0, sp, #16
 8007824:	f007 fb1a 	bl	800ee5c <strlen>
 8007828:	2800      	cmp	r0, #0
 800782a:	f43f ae49 	beq.w	80074c0 <d_print_comp_inner+0x184>
 800782e:	ad04      	add	r5, sp, #16
 8007830:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007834:	182f      	adds	r7, r5, r0
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	e009      	b.n	8007850 <d_print_comp_inner+0x514>
 800783c:	460b      	mov	r3, r1
 800783e:	3101      	adds	r1, #1
 8007840:	42af      	cmp	r7, r5
 8007842:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007846:	54e6      	strb	r6, [r4, r3]
 8007848:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800784c:	f43f ae38 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8007850:	29ff      	cmp	r1, #255	; 0xff
 8007852:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007856:	d1f1      	bne.n	800783c <d_print_comp_inner+0x500>
 8007858:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800785c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007860:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007864:	4620      	mov	r0, r4
 8007866:	4798      	blx	r3
 8007868:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800786c:	2101      	movs	r1, #1
 800786e:	440b      	add	r3, r1
 8007870:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007874:	2300      	movs	r3, #0
 8007876:	e7e3      	b.n	8007840 <d_print_comp_inner+0x504>
 8007878:	4ea0      	ldr	r6, [pc, #640]	; (8007afc <d_print_comp_inner+0x7c0>)
 800787a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800787e:	f106 0a16 	add.w	sl, r6, #22
 8007882:	f04f 0900 	mov.w	r9, #0
 8007886:	e00a      	b.n	800789e <d_print_comp_inner+0x562>
 8007888:	460b      	mov	r3, r1
 800788a:	3101      	adds	r1, #1
 800788c:	45b2      	cmp	sl, r6
 800788e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007892:	f804 8003 	strb.w	r8, [r4, r3]
 8007896:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800789a:	f001 8056 	beq.w	800894a <d_print_comp_inner+0x160e>
 800789e:	29ff      	cmp	r1, #255	; 0xff
 80078a0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80078a4:	d1f0      	bne.n	8007888 <d_print_comp_inner+0x54c>
 80078a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80078aa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80078ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80078b2:	4620      	mov	r0, r4
 80078b4:	4798      	blx	r3
 80078b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80078ba:	2101      	movs	r1, #1
 80078bc:	440b      	add	r3, r1
 80078be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80078c2:	2300      	movs	r3, #0
 80078c4:	e7e2      	b.n	800788c <d_print_comp_inner+0x550>
 80078c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80078ca:	792d      	ldrb	r5, [r5, #4]
 80078cc:	29ff      	cmp	r1, #255	; 0xff
 80078ce:	f001 846d 	beq.w	80091ac <d_print_comp_inner+0x1e70>
 80078d2:	1c4b      	adds	r3, r1, #1
 80078d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80078d8:	5465      	strb	r5, [r4, r1]
 80078da:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80078de:	e5ef      	b.n	80074c0 <d_print_comp_inner+0x184>
 80078e0:	686a      	ldr	r2, [r5, #4]
 80078e2:	f002 f943 	bl	8009b6c <d_print_comp>
 80078e6:	68aa      	ldr	r2, [r5, #8]
 80078e8:	4639      	mov	r1, r7
 80078ea:	4620      	mov	r0, r4
 80078ec:	f002 f93e 	bl	8009b6c <d_print_comp>
 80078f0:	e5e6      	b.n	80074c0 <d_print_comp_inner+0x184>
 80078f2:	686e      	ldr	r6, [r5, #4]
 80078f4:	68ad      	ldr	r5, [r5, #8]
 80078f6:	7833      	ldrb	r3, [r6, #0]
 80078f8:	2b31      	cmp	r3, #49	; 0x31
 80078fa:	f001 82b9 	beq.w	8008e70 <d_print_comp_inner+0x1b34>
 80078fe:	2b33      	cmp	r3, #51	; 0x33
 8007900:	f041 83fc 	bne.w	80090fc <d_print_comp_inner+0x1dc0>
 8007904:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8007908:	2bff      	cmp	r3, #255	; 0xff
 800790a:	f001 872f 	beq.w	800976c <d_print_comp_inner+0x2430>
 800790e:	1c59      	adds	r1, r3, #1
 8007910:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8007914:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007918:	1d32      	adds	r2, r6, #4
 800791a:	4639      	mov	r1, r7
 800791c:	f804 e003 	strb.w	lr, [r4, r3]
 8007920:	4620      	mov	r0, r4
 8007922:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 8007926:	f002 fec1 	bl	800a6ac <d_print_cast.isra.12>
 800792a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800792e:	29ff      	cmp	r1, #255	; 0xff
 8007930:	f001 870b 	beq.w	800974a <d_print_comp_inner+0x240e>
 8007934:	2329      	movs	r3, #41	; 0x29
 8007936:	1c4a      	adds	r2, r1, #1
 8007938:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800793c:	5463      	strb	r3, [r4, r1]
 800793e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007942:	462a      	mov	r2, r5
 8007944:	4639      	mov	r1, r7
 8007946:	4620      	mov	r0, r4
 8007948:	f002 ffc2 	bl	800a8d0 <d_print_subexpr>
 800794c:	e5b8      	b.n	80074c0 <d_print_comp_inner+0x184>
 800794e:	686a      	ldr	r2, [r5, #4]
 8007950:	f002 ff80 	bl	800a854 <d_print_expr_op>
 8007954:	e5b4      	b.n	80074c0 <d_print_comp_inner+0x184>
 8007956:	4e6a      	ldr	r6, [pc, #424]	; (8007b00 <d_print_comp_inner+0x7c4>)
 8007958:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800795c:	f106 0a09 	add.w	sl, r6, #9
 8007960:	f04f 0900 	mov.w	r9, #0
 8007964:	e00a      	b.n	800797c <d_print_comp_inner+0x640>
 8007966:	460b      	mov	r3, r1
 8007968:	3101      	adds	r1, #1
 800796a:	45b2      	cmp	sl, r6
 800796c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007970:	f804 8003 	strb.w	r8, [r4, r3]
 8007974:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007978:	f001 8031 	beq.w	80089de <d_print_comp_inner+0x16a2>
 800797c:	29ff      	cmp	r1, #255	; 0xff
 800797e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007982:	d1f0      	bne.n	8007966 <d_print_comp_inner+0x62a>
 8007984:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007988:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800798c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007990:	4620      	mov	r0, r4
 8007992:	4798      	blx	r3
 8007994:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007998:	2101      	movs	r1, #1
 800799a:	440b      	add	r3, r1
 800799c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80079a0:	2300      	movs	r3, #0
 80079a2:	e7e2      	b.n	800796a <d_print_comp_inner+0x62e>
 80079a4:	4e56      	ldr	r6, [pc, #344]	; (8007b00 <d_print_comp_inner+0x7c4>)
 80079a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80079aa:	f106 0a09 	add.w	sl, r6, #9
 80079ae:	f04f 0900 	mov.w	r9, #0
 80079b2:	e00a      	b.n	80079ca <d_print_comp_inner+0x68e>
 80079b4:	460b      	mov	r3, r1
 80079b6:	3101      	adds	r1, #1
 80079b8:	45b2      	cmp	sl, r6
 80079ba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80079be:	f804 8003 	strb.w	r8, [r4, r3]
 80079c2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80079c6:	f001 8031 	beq.w	8008a2c <d_print_comp_inner+0x16f0>
 80079ca:	29ff      	cmp	r1, #255	; 0xff
 80079cc:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80079d0:	d1f0      	bne.n	80079b4 <d_print_comp_inner+0x678>
 80079d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80079d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80079da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80079de:	4620      	mov	r0, r4
 80079e0:	4798      	blx	r3
 80079e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80079e6:	2101      	movs	r1, #1
 80079e8:	440b      	add	r3, r1
 80079ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80079ee:	2300      	movs	r3, #0
 80079f0:	e7e2      	b.n	80079b8 <d_print_comp_inner+0x67c>
 80079f2:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80079f6:	4d43      	ldr	r5, [pc, #268]	; (8007b04 <d_print_comp_inner+0x7c8>)
 80079f8:	f8da 7008 	ldr.w	r7, [sl, #8]
 80079fc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007a00:	f105 0808 	add.w	r8, r5, #8
 8007a04:	f04f 0900 	mov.w	r9, #0
 8007a08:	e009      	b.n	8007a1e <d_print_comp_inner+0x6e2>
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	45a8      	cmp	r8, r5
 8007a10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007a14:	54e6      	strb	r6, [r4, r3]
 8007a16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007a1a:	f000 8756 	beq.w	80088ca <d_print_comp_inner+0x158e>
 8007a1e:	29ff      	cmp	r1, #255	; 0xff
 8007a20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a24:	d1f1      	bne.n	8007a0a <d_print_comp_inner+0x6ce>
 8007a26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007a2a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007a2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007a32:	4620      	mov	r0, r4
 8007a34:	4798      	blx	r3
 8007a36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	440b      	add	r3, r1
 8007a3e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007a42:	2300      	movs	r3, #0
 8007a44:	e7e3      	b.n	8007a0e <d_print_comp_inner+0x6d2>
 8007a46:	686a      	ldr	r2, [r5, #4]
 8007a48:	68ae      	ldr	r6, [r5, #8]
 8007a4a:	b10a      	cbz	r2, 8007a50 <d_print_comp_inner+0x714>
 8007a4c:	f002 f88e 	bl	8009b6c <d_print_comp>
 8007a50:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007a54:	2bff      	cmp	r3, #255	; 0xff
 8007a56:	f001 8484 	beq.w	8009362 <d_print_comp_inner+0x2026>
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	257b      	movs	r5, #123	; 0x7b
 8007a5e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007a62:	4639      	mov	r1, r7
 8007a64:	54e5      	strb	r5, [r4, r3]
 8007a66:	4632      	mov	r2, r6
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8007a6e:	f002 f87d 	bl	8009b6c <d_print_comp>
 8007a72:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007a76:	29ff      	cmp	r1, #255	; 0xff
 8007a78:	f001 8367 	beq.w	800914a <d_print_comp_inner+0x1e0e>
 8007a7c:	1c4a      	adds	r2, r1, #1
 8007a7e:	237d      	movs	r3, #125	; 0x7d
 8007a80:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007a84:	5463      	strb	r3, [r4, r1]
 8007a86:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007a8a:	e519      	b.n	80074c0 <d_print_comp_inner+0x184>
 8007a8c:	686a      	ldr	r2, [r5, #4]
 8007a8e:	b10a      	cbz	r2, 8007a94 <d_print_comp_inner+0x758>
 8007a90:	f002 f86c 	bl	8009b6c <d_print_comp>
 8007a94:	68ab      	ldr	r3, [r5, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f43f ad12 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8007a9c:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8007aa0:	2efd      	cmp	r6, #253	; 0xfd
 8007aa2:	f201 830b 	bhi.w	80090bc <d_print_comp_inner+0x1d80>
 8007aa6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007b08 <d_print_comp_inner+0x7cc>
 8007aaa:	f04f 0a00 	mov.w	sl, #0
 8007aae:	f108 0b02 	add.w	fp, r8, #2
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	e009      	b.n	8007aca <d_print_comp_inner+0x78e>
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	3101      	adds	r1, #1
 8007aba:	45c3      	cmp	fp, r8
 8007abc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ac0:	54e6      	strb	r6, [r4, r3]
 8007ac2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007ac6:	f001 8060 	beq.w	8008b8a <d_print_comp_inner+0x184e>
 8007aca:	29ff      	cmp	r1, #255	; 0xff
 8007acc:	f818 6b01 	ldrb.w	r6, [r8], #1
 8007ad0:	d1f1      	bne.n	8007ab6 <d_print_comp_inner+0x77a>
 8007ad2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007ad6:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8007ada:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4798      	blx	r3
 8007ae2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	440b      	add	r3, r1
 8007aea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007aee:	2300      	movs	r3, #0
 8007af0:	e7e3      	b.n	8007aba <d_print_comp_inner+0x77e>
 8007af2:	bf00      	nop
 8007af4:	08016160 	.word	0x08016160
 8007af8:	08015f80 	.word	0x08015f80
 8007afc:	080160c3 	.word	0x080160c3
 8007b00:	08016103 	.word	0x08016103
 8007b04:	080160f7 	.word	0x080160f7
 8007b08:	080160f4 	.word	0x080160f4
 8007b0c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f041 8186 	bne.w	8008e22 <d_print_comp_inner+0x1ae6>
 8007b16:	686a      	ldr	r2, [r5, #4]
 8007b18:	4bd3      	ldr	r3, [pc, #844]	; (8007e68 <d_print_comp_inner+0xb2c>)
 8007b1a:	6851      	ldr	r1, [r2, #4]
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	f001 817c 	beq.w	8008e1a <d_print_comp_inner+0x1ade>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4620      	mov	r0, r4
 8007b26:	f002 f821 	bl	8009b6c <d_print_comp>
 8007b2a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007b2e:	2bff      	cmp	r3, #255	; 0xff
 8007b30:	f001 85be 	beq.w	80096b0 <d_print_comp_inner+0x2374>
 8007b34:	1c59      	adds	r1, r3, #1
 8007b36:	2220      	movs	r2, #32
 8007b38:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007b3c:	54e2      	strb	r2, [r4, r3]
 8007b3e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007b42:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f001 8100 	beq.w	8008d4c <d_print_comp_inner+0x1a10>
 8007b4c:	4dc7      	ldr	r5, [pc, #796]	; (8007e6c <d_print_comp_inner+0xb30>)
 8007b4e:	f04f 0800 	mov.w	r8, #0
 8007b52:	1daf      	adds	r7, r5, #6
 8007b54:	e009      	b.n	8007b6a <d_print_comp_inner+0x82e>
 8007b56:	460b      	mov	r3, r1
 8007b58:	3101      	adds	r1, #1
 8007b5a:	42bd      	cmp	r5, r7
 8007b5c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007b60:	54e6      	strb	r6, [r4, r3]
 8007b62:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007b66:	f43f acab 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8007b6a:	29ff      	cmp	r1, #255	; 0xff
 8007b6c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007b70:	d1f1      	bne.n	8007b56 <d_print_comp_inner+0x81a>
 8007b72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007b76:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007b7a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4798      	blx	r3
 8007b82:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007b86:	2101      	movs	r1, #1
 8007b88:	440b      	add	r3, r1
 8007b8a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e7e3      	b.n	8007b5a <d_print_comp_inner+0x81e>
 8007b92:	2301      	movs	r3, #1
 8007b94:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007b98:	e492      	b.n	80074c0 <d_print_comp_inner+0x184>
 8007b9a:	4eb5      	ldr	r6, [pc, #724]	; (8007e70 <d_print_comp_inner+0xb34>)
 8007b9c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007ba0:	f106 0a0e 	add.w	sl, r6, #14
 8007ba4:	f04f 0900 	mov.w	r9, #0
 8007ba8:	e00a      	b.n	8007bc0 <d_print_comp_inner+0x884>
 8007baa:	460b      	mov	r3, r1
 8007bac:	3101      	adds	r1, #1
 8007bae:	45b2      	cmp	sl, r6
 8007bb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007bb4:	f804 8003 	strb.w	r8, [r4, r3]
 8007bb8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007bbc:	f000 867e 	beq.w	80088bc <d_print_comp_inner+0x1580>
 8007bc0:	29ff      	cmp	r1, #255	; 0xff
 8007bc2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007bc6:	d1f0      	bne.n	8007baa <d_print_comp_inner+0x86e>
 8007bc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007bcc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007bd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	4798      	blx	r3
 8007bd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007bdc:	2101      	movs	r1, #1
 8007bde:	440b      	add	r3, r1
 8007be0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007be4:	2300      	movs	r3, #0
 8007be6:	e7e2      	b.n	8007bae <d_print_comp_inner+0x872>
 8007be8:	686a      	ldr	r2, [r5, #4]
 8007bea:	7811      	ldrb	r1, [r2, #0]
 8007bec:	2927      	cmp	r1, #39	; 0x27
 8007bee:	f001 81a6 	beq.w	8008f3e <d_print_comp_inner+0x1c02>
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007bf8:	29ff      	cmp	r1, #255	; 0xff
 8007bfa:	f001 8428 	beq.w	800944e <d_print_comp_inner+0x2112>
 8007bfe:	1c4a      	adds	r2, r1, #1
 8007c00:	2328      	movs	r3, #40	; 0x28
 8007c02:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007c06:	5463      	strb	r3, [r4, r1]
 8007c08:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007c0c:	686a      	ldr	r2, [r5, #4]
 8007c0e:	4639      	mov	r1, r7
 8007c10:	4620      	mov	r0, r4
 8007c12:	f001 ffab 	bl	8009b6c <d_print_comp>
 8007c16:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007c1a:	2bff      	cmp	r3, #255	; 0xff
 8007c1c:	f001 83ed 	beq.w	80093fa <d_print_comp_inner+0x20be>
 8007c20:	1c59      	adds	r1, r3, #1
 8007c22:	2229      	movs	r2, #41	; 0x29
 8007c24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007c28:	54e2      	strb	r2, [r4, r3]
 8007c2a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007c2e:	782b      	ldrb	r3, [r5, #0]
 8007c30:	2b3c      	cmp	r3, #60	; 0x3c
 8007c32:	f001 827e 	beq.w	8009132 <d_print_comp_inner+0x1df6>
 8007c36:	2e08      	cmp	r6, #8
 8007c38:	f001 8221 	beq.w	800907e <d_print_comp_inner+0x1d42>
 8007c3c:	68aa      	ldr	r2, [r5, #8]
 8007c3e:	4639      	mov	r1, r7
 8007c40:	4620      	mov	r0, r4
 8007c42:	f001 ff93 	bl	8009b6c <d_print_comp>
 8007c46:	e43b      	b.n	80074c0 <d_print_comp_inner+0x184>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007c4e:	e437      	b.n	80074c0 <d_print_comp_inner+0x184>
 8007c50:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8007c54:	ab14      	add	r3, sp, #80	; 0x50
 8007c56:	f843 2d40 	str.w	r2, [r3, #-64]!
 8007c5a:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8007c5e:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8007c62:	2300      	movs	r3, #0
 8007c64:	68aa      	ldr	r2, [r5, #8]
 8007c66:	9306      	str	r3, [sp, #24]
 8007c68:	9505      	str	r5, [sp, #20]
 8007c6a:	9607      	str	r6, [sp, #28]
 8007c6c:	f001 ff7e 	bl	8009b6c <d_print_comp>
 8007c70:	9b06      	ldr	r3, [sp, #24]
 8007c72:	b923      	cbnz	r3, 8007c7e <d_print_comp_inner+0x942>
 8007c74:	462a      	mov	r2, r5
 8007c76:	4639      	mov	r1, r7
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f001 ff87 	bl	8009b8c <d_print_mod>
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8007c84:	e41c      	b.n	80074c0 <d_print_comp_inner+0x184>
 8007c86:	f8d0 a114 	ldr.w	sl, [r0, #276]	; 0x114
 8007c8a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8007c8e:	4656      	mov	r6, sl
 8007c90:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8007c94:	f849 ad40 	str.w	sl, [r9, #-64]!
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f8cd a000 	str.w	sl, [sp]
 8007c9e:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8007ca2:	9505      	str	r5, [sp, #20]
 8007ca4:	9207      	str	r2, [sp, #28]
 8007ca6:	9306      	str	r3, [sp, #24]
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	f001 8585 	beq.w	80097b8 <d_print_comp_inner+0x247c>
 8007cae:	6873      	ldr	r3, [r6, #4]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	3b19      	subs	r3, #25
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	f201 857f 	bhi.w	80097b8 <d_print_comp_inner+0x247c>
 8007cba:	46ac      	mov	ip, r5
 8007cbc:	f04f 0801 	mov.w	r8, #1
 8007cc0:	464d      	mov	r5, r9
 8007cc2:	e004      	b.n	8007cce <d_print_comp_inner+0x992>
 8007cc4:	6873      	ldr	r3, [r6, #4]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	3b19      	subs	r3, #25
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d81e      	bhi.n	8007d0c <d_print_comp_inner+0x9d0>
 8007cce:	68b3      	ldr	r3, [r6, #8]
 8007cd0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007cd4:	b9bb      	cbnz	r3, 8007d06 <d_print_comp_inner+0x9ca>
 8007cd6:	f1b8 0f03 	cmp.w	r8, #3
 8007cda:	f201 82d0 	bhi.w	800927e <d_print_comp_inner+0x1f42>
 8007cde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007ce2:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 8007ce6:	eb0e 0b0a 	add.w	fp, lr, sl
 8007cea:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
 8007cee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8007cf2:	f84b 5c40 	str.w	r5, [fp, #-64]
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	eb09 050a 	add.w	r5, r9, sl
 8007cfc:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8007d00:	f108 0801 	add.w	r8, r8, #1
 8007d04:	60b3      	str	r3, [r6, #8]
 8007d06:	6836      	ldr	r6, [r6, #0]
 8007d08:	2e00      	cmp	r6, #0
 8007d0a:	d1db      	bne.n	8007cc4 <d_print_comp_inner+0x988>
 8007d0c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007d10:	4639      	mov	r1, r7
 8007d12:	4620      	mov	r0, r4
 8007d14:	4665      	mov	r5, ip
 8007d16:	f001 ff29 	bl	8009b6c <d_print_comp>
 8007d1a:	9a00      	ldr	r2, [sp, #0]
 8007d1c:	9b06      	ldr	r3, [sp, #24]
 8007d1e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f47f abcc 	bne.w	80074c0 <d_print_comp_inner+0x184>
 8007d28:	f1b8 0f01 	cmp.w	r8, #1
 8007d2c:	d00e      	beq.n	8007d4c <d_print_comp_inner+0xa10>
 8007d2e:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 8007d32:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8007d36:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f001 ff25 	bl	8009b8c <d_print_mod>
 8007d42:	f1b8 0f01 	cmp.w	r8, #1
 8007d46:	f1a9 0910 	sub.w	r9, r9, #16
 8007d4a:	d1f2      	bne.n	8007d32 <d_print_comp_inner+0x9f6>
 8007d4c:	1d2a      	adds	r2, r5, #4
 8007d4e:	4639      	mov	r1, r7
 8007d50:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007d54:	4620      	mov	r0, r4
 8007d56:	f002 fad7 	bl	800a308 <d_print_array_type.isra.10>
 8007d5a:	f7ff bbb1 	b.w	80074c0 <d_print_comp_inner+0x184>
 8007d5e:	068b      	lsls	r3, r1, #26
 8007d60:	f101 8048 	bmi.w	8008df4 <d_print_comp_inner+0x1ab8>
 8007d64:	686b      	ldr	r3, [r5, #4]
 8007d66:	b11b      	cbz	r3, 8007d70 <d_print_comp_inner+0xa34>
 8007d68:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8007d6c:	f001 82ca 	beq.w	8009304 <d_print_comp_inner+0x1fc8>
 8007d70:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 8007d74:	f105 0208 	add.w	r2, r5, #8
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007d7e:	4620      	mov	r0, r4
 8007d80:	f002 fb9e 	bl	800a4c0 <d_print_function_type.isra.11>
 8007d84:	f7ff bb9c 	b.w	80074c0 <d_print_comp_inner+0x184>
 8007d88:	68ab      	ldr	r3, [r5, #8]
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	2a39      	cmp	r2, #57	; 0x39
 8007d8e:	f47f ab9f 	bne.w	80074d0 <d_print_comp_inner+0x194>
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	7811      	ldrb	r1, [r2, #0]
 8007d96:	293a      	cmp	r1, #58	; 0x3a
 8007d98:	f47f ab9a 	bne.w	80074d0 <d_print_comp_inner+0x194>
 8007d9c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8007da0:	4934      	ldr	r1, [pc, #208]	; (8007e74 <d_print_comp_inner+0xb38>)
 8007da2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8007da6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	6856      	ldr	r6, [r2, #4]
 8007dae:	6895      	ldr	r5, [r2, #8]
 8007db0:	f007 f84a 	bl	800ee48 <strcmp>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f001 850d 	beq.w	80097d4 <d_print_comp_inner+0x2498>
 8007dba:	2204      	movs	r2, #4
 8007dbc:	492e      	ldr	r1, [pc, #184]	; (8007e78 <d_print_comp_inner+0xb3c>)
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f7fe fffc 	bl	8006dbc <d_append_buffer>
 8007dc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007dc8:	b183      	cbz	r3, 8007dec <d_print_comp_inner+0xab0>
 8007dca:	4639      	mov	r1, r7
 8007dcc:	4642      	mov	r2, r8
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f002 fd7e 	bl	800a8d0 <d_print_subexpr>
 8007dd4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007dd8:	29ff      	cmp	r1, #255	; 0xff
 8007dda:	f001 8628 	beq.w	8009a2e <d_print_comp_inner+0x26f2>
 8007dde:	2320      	movs	r3, #32
 8007de0:	1c4a      	adds	r2, r1, #1
 8007de2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007de6:	5463      	strb	r3, [r4, r1]
 8007de8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007dec:	4632      	mov	r2, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	4620      	mov	r0, r4
 8007df2:	f001 febb 	bl	8009b6c <d_print_comp>
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	f43f ab62 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	4639      	mov	r1, r7
 8007e00:	4620      	mov	r0, r4
 8007e02:	f002 fd65 	bl	800a8d0 <d_print_subexpr>
 8007e06:	f7ff bb5b 	b.w	80074c0 <d_print_comp_inner+0x184>
 8007e0a:	4e1c      	ldr	r6, [pc, #112]	; (8007e7c <d_print_comp_inner+0xb40>)
 8007e0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007e10:	f106 0a11 	add.w	sl, r6, #17
 8007e14:	f04f 0900 	mov.w	r9, #0
 8007e18:	e00a      	b.n	8007e30 <d_print_comp_inner+0xaf4>
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	3101      	adds	r1, #1
 8007e1e:	4556      	cmp	r6, sl
 8007e20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e24:	f804 8003 	strb.w	r8, [r4, r3]
 8007e28:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007e2c:	f000 84bf 	beq.w	80087ae <d_print_comp_inner+0x1472>
 8007e30:	29ff      	cmp	r1, #255	; 0xff
 8007e32:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007e36:	d1f0      	bne.n	8007e1a <d_print_comp_inner+0xade>
 8007e38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e3c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007e40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007e44:	4620      	mov	r0, r4
 8007e46:	4798      	blx	r3
 8007e48:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	440b      	add	r3, r1
 8007e50:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007e54:	2300      	movs	r3, #0
 8007e56:	e7e2      	b.n	8007e1e <d_print_comp_inner+0xae2>
 8007e58:	4e09      	ldr	r6, [pc, #36]	; (8007e80 <d_print_comp_inner+0xb44>)
 8007e5a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007e5e:	f106 0a15 	add.w	sl, r6, #21
 8007e62:	f04f 0900 	mov.w	r9, #0
 8007e66:	e018      	b.n	8007e9a <d_print_comp_inner+0xb5e>
 8007e68:	08014ae4 	.word	0x08014ae4
 8007e6c:	080160e4 	.word	0x080160e4
 8007e70:	0801614f 	.word	0x0801614f
 8007e74:	08016124 	.word	0x08016124
 8007e78:	0801612c 	.word	0x0801612c
 8007e7c:	0801600b 	.word	0x0801600b
 8007e80:	08016007 	.word	0x08016007
 8007e84:	460b      	mov	r3, r1
 8007e86:	3101      	adds	r1, #1
 8007e88:	45b2      	cmp	sl, r6
 8007e8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e8e:	f804 8003 	strb.w	r8, [r4, r3]
 8007e92:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007e96:	f000 8483 	beq.w	80087a0 <d_print_comp_inner+0x1464>
 8007e9a:	29ff      	cmp	r1, #255	; 0xff
 8007e9c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007ea0:	d1f0      	bne.n	8007e84 <d_print_comp_inner+0xb48>
 8007ea2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007ea6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007eaa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4798      	blx	r3
 8007eb2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	440b      	add	r3, r1
 8007eba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	e7e2      	b.n	8007e88 <d_print_comp_inner+0xb4c>
 8007ec2:	4eda      	ldr	r6, [pc, #872]	; (800822c <d_print_comp_inner+0xef0>)
 8007ec4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007ec8:	f106 0a10 	add.w	sl, r6, #16
 8007ecc:	f04f 0900 	mov.w	r9, #0
 8007ed0:	e00a      	b.n	8007ee8 <d_print_comp_inner+0xbac>
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	3101      	adds	r1, #1
 8007ed6:	45b2      	cmp	sl, r6
 8007ed8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007edc:	f804 8003 	strb.w	r8, [r4, r3]
 8007ee0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007ee4:	f000 8455 	beq.w	8008792 <d_print_comp_inner+0x1456>
 8007ee8:	29ff      	cmp	r1, #255	; 0xff
 8007eea:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007eee:	d1f0      	bne.n	8007ed2 <d_print_comp_inner+0xb96>
 8007ef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007ef4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007ef8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007efc:	4620      	mov	r0, r4
 8007efe:	4798      	blx	r3
 8007f00:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f04:	2101      	movs	r1, #1
 8007f06:	440b      	add	r3, r1
 8007f08:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e7e2      	b.n	8007ed6 <d_print_comp_inner+0xb9a>
 8007f10:	4ec7      	ldr	r6, [pc, #796]	; (8008230 <d_print_comp_inner+0xef4>)
 8007f12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f16:	f106 0a12 	add.w	sl, r6, #18
 8007f1a:	f04f 0900 	mov.w	r9, #0
 8007f1e:	e00a      	b.n	8007f36 <d_print_comp_inner+0xbfa>
 8007f20:	460b      	mov	r3, r1
 8007f22:	3101      	adds	r1, #1
 8007f24:	45b2      	cmp	sl, r6
 8007f26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f2a:	f804 8003 	strb.w	r8, [r4, r3]
 8007f2e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007f32:	f000 85d5 	beq.w	8008ae0 <d_print_comp_inner+0x17a4>
 8007f36:	29ff      	cmp	r1, #255	; 0xff
 8007f38:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007f3c:	d1f0      	bne.n	8007f20 <d_print_comp_inner+0xbe4>
 8007f3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f42:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007f46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	4798      	blx	r3
 8007f4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f52:	2101      	movs	r1, #1
 8007f54:	440b      	add	r3, r1
 8007f56:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e7e2      	b.n	8007f24 <d_print_comp_inner+0xbe8>
 8007f5e:	68af      	ldr	r7, [r5, #8]
 8007f60:	686d      	ldr	r5, [r5, #4]
 8007f62:	2f00      	cmp	r7, #0
 8007f64:	f43f aaac 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8007f68:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f6c:	442f      	add	r7, r5
 8007f6e:	f04f 0800 	mov.w	r8, #0
 8007f72:	e009      	b.n	8007f88 <d_print_comp_inner+0xc4c>
 8007f74:	460b      	mov	r3, r1
 8007f76:	3101      	adds	r1, #1
 8007f78:	42af      	cmp	r7, r5
 8007f7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f7e:	54e6      	strb	r6, [r4, r3]
 8007f80:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007f84:	f43f aa9c 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8007f88:	29ff      	cmp	r1, #255	; 0xff
 8007f8a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007f8e:	d1f1      	bne.n	8007f74 <d_print_comp_inner+0xc38>
 8007f90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f94:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007f98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4798      	blx	r3
 8007fa0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	440b      	add	r3, r1
 8007fa8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007fac:	2300      	movs	r3, #0
 8007fae:	e7e3      	b.n	8007f78 <d_print_comp_inner+0xc3c>
 8007fb0:	4ea0      	ldr	r6, [pc, #640]	; (8008234 <d_print_comp_inner+0xef8>)
 8007fb2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007fb6:	f106 0a11 	add.w	sl, r6, #17
 8007fba:	f04f 0900 	mov.w	r9, #0
 8007fbe:	e00a      	b.n	8007fd6 <d_print_comp_inner+0xc9a>
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	3101      	adds	r1, #1
 8007fc4:	45b2      	cmp	sl, r6
 8007fc6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007fca:	f804 8003 	strb.w	r8, [r4, r3]
 8007fce:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007fd2:	f000 858c 	beq.w	8008aee <d_print_comp_inner+0x17b2>
 8007fd6:	29ff      	cmp	r1, #255	; 0xff
 8007fd8:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007fdc:	d1f0      	bne.n	8007fc0 <d_print_comp_inner+0xc84>
 8007fde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007fe2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007fe6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007fea:	4620      	mov	r0, r4
 8007fec:	4798      	blx	r3
 8007fee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	440b      	add	r3, r1
 8007ff6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e7e2      	b.n	8007fc4 <d_print_comp_inner+0xc88>
 8007ffe:	4e8e      	ldr	r6, [pc, #568]	; (8008238 <d_print_comp_inner+0xefc>)
 8008000:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008004:	f106 0a15 	add.w	sl, r6, #21
 8008008:	f04f 0900 	mov.w	r9, #0
 800800c:	e00a      	b.n	8008024 <d_print_comp_inner+0xce8>
 800800e:	460b      	mov	r3, r1
 8008010:	3101      	adds	r1, #1
 8008012:	45b2      	cmp	sl, r6
 8008014:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008018:	f804 8003 	strb.w	r8, [r4, r3]
 800801c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008020:	f000 8533 	beq.w	8008a8a <d_print_comp_inner+0x174e>
 8008024:	29ff      	cmp	r1, #255	; 0xff
 8008026:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800802a:	d1f0      	bne.n	800800e <d_print_comp_inner+0xcd2>
 800802c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008030:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008034:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008038:	4620      	mov	r0, r4
 800803a:	4798      	blx	r3
 800803c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008040:	2101      	movs	r1, #1
 8008042:	440b      	add	r3, r1
 8008044:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008048:	2300      	movs	r3, #0
 800804a:	e7e2      	b.n	8008012 <d_print_comp_inner+0xcd6>
 800804c:	4e7b      	ldr	r6, [pc, #492]	; (800823c <d_print_comp_inner+0xf00>)
 800804e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008052:	f106 0a19 	add.w	sl, r6, #25
 8008056:	f04f 0900 	mov.w	r9, #0
 800805a:	e00a      	b.n	8008072 <d_print_comp_inner+0xd36>
 800805c:	460b      	mov	r3, r1
 800805e:	3101      	adds	r1, #1
 8008060:	45b2      	cmp	sl, r6
 8008062:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008066:	f804 8003 	strb.w	r8, [r4, r3]
 800806a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800806e:	f000 8545 	beq.w	8008afc <d_print_comp_inner+0x17c0>
 8008072:	29ff      	cmp	r1, #255	; 0xff
 8008074:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008078:	d1f0      	bne.n	800805c <d_print_comp_inner+0xd20>
 800807a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800807e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008082:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008086:	4620      	mov	r0, r4
 8008088:	4798      	blx	r3
 800808a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800808e:	2101      	movs	r1, #1
 8008090:	440b      	add	r3, r1
 8008092:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008096:	2300      	movs	r3, #0
 8008098:	e7e2      	b.n	8008060 <d_print_comp_inner+0xd24>
 800809a:	4e69      	ldr	r6, [pc, #420]	; (8008240 <d_print_comp_inner+0xf04>)
 800809c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80080a0:	f106 0a16 	add.w	sl, r6, #22
 80080a4:	f04f 0900 	mov.w	r9, #0
 80080a8:	e00a      	b.n	80080c0 <d_print_comp_inner+0xd84>
 80080aa:	460b      	mov	r3, r1
 80080ac:	3101      	adds	r1, #1
 80080ae:	45b2      	cmp	sl, r6
 80080b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80080b4:	f804 8003 	strb.w	r8, [r4, r3]
 80080b8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80080bc:	f000 84d7 	beq.w	8008a6e <d_print_comp_inner+0x1732>
 80080c0:	29ff      	cmp	r1, #255	; 0xff
 80080c2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80080c6:	d1f0      	bne.n	80080aa <d_print_comp_inner+0xd6e>
 80080c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80080cc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80080d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80080d4:	4620      	mov	r0, r4
 80080d6:	4798      	blx	r3
 80080d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80080dc:	2101      	movs	r1, #1
 80080de:	440b      	add	r3, r1
 80080e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80080e4:	2300      	movs	r3, #0
 80080e6:	e7e2      	b.n	80080ae <d_print_comp_inner+0xd72>
 80080e8:	4e56      	ldr	r6, [pc, #344]	; (8008244 <d_print_comp_inner+0xf08>)
 80080ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80080ee:	f106 0a13 	add.w	sl, r6, #19
 80080f2:	f04f 0900 	mov.w	r9, #0
 80080f6:	e00a      	b.n	800810e <d_print_comp_inner+0xdd2>
 80080f8:	460b      	mov	r3, r1
 80080fa:	3101      	adds	r1, #1
 80080fc:	4556      	cmp	r6, sl
 80080fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008102:	f804 8003 	strb.w	r8, [r4, r3]
 8008106:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800810a:	f000 84b7 	beq.w	8008a7c <d_print_comp_inner+0x1740>
 800810e:	29ff      	cmp	r1, #255	; 0xff
 8008110:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008114:	d1f0      	bne.n	80080f8 <d_print_comp_inner+0xdbc>
 8008116:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800811a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800811e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008122:	4620      	mov	r0, r4
 8008124:	4798      	blx	r3
 8008126:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800812a:	2101      	movs	r1, #1
 800812c:	440b      	add	r3, r1
 800812e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008132:	2300      	movs	r3, #0
 8008134:	e7e2      	b.n	80080fc <d_print_comp_inner+0xdc0>
 8008136:	4e44      	ldr	r6, [pc, #272]	; (8008248 <d_print_comp_inner+0xf0c>)
 8008138:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800813c:	f106 0a0f 	add.w	sl, r6, #15
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	e00a      	b.n	800815c <d_print_comp_inner+0xe20>
 8008146:	460b      	mov	r3, r1
 8008148:	3101      	adds	r1, #1
 800814a:	4556      	cmp	r6, sl
 800814c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008150:	f804 8003 	strb.w	r8, [r4, r3]
 8008154:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008158:	f000 830d 	beq.w	8008776 <d_print_comp_inner+0x143a>
 800815c:	29ff      	cmp	r1, #255	; 0xff
 800815e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008162:	d1f0      	bne.n	8008146 <d_print_comp_inner+0xe0a>
 8008164:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008168:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800816c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008170:	4620      	mov	r0, r4
 8008172:	4798      	blx	r3
 8008174:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008178:	2101      	movs	r1, #1
 800817a:	440b      	add	r3, r1
 800817c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008180:	2300      	movs	r3, #0
 8008182:	e7e2      	b.n	800814a <d_print_comp_inner+0xe0e>
 8008184:	4e31      	ldr	r6, [pc, #196]	; (800824c <d_print_comp_inner+0xf10>)
 8008186:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800818a:	f106 0a1a 	add.w	sl, r6, #26
 800818e:	f04f 0900 	mov.w	r9, #0
 8008192:	e00a      	b.n	80081aa <d_print_comp_inner+0xe6e>
 8008194:	460b      	mov	r3, r1
 8008196:	3101      	adds	r1, #1
 8008198:	4556      	cmp	r6, sl
 800819a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800819e:	f804 8003 	strb.w	r8, [r4, r3]
 80081a2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80081a6:	f000 82ed 	beq.w	8008784 <d_print_comp_inner+0x1448>
 80081aa:	29ff      	cmp	r1, #255	; 0xff
 80081ac:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80081b0:	d1f0      	bne.n	8008194 <d_print_comp_inner+0xe58>
 80081b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80081b6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80081ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80081be:	4620      	mov	r0, r4
 80081c0:	4798      	blx	r3
 80081c2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80081c6:	2101      	movs	r1, #1
 80081c8:	440b      	add	r3, r1
 80081ca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80081ce:	2300      	movs	r3, #0
 80081d0:	e7e2      	b.n	8008198 <d_print_comp_inner+0xe5c>
 80081d2:	f011 0704 	ands.w	r7, r1, #4
 80081d6:	f040 8539 	bne.w	8008c4c <d_print_comp_inner+0x1910>
 80081da:	686a      	ldr	r2, [r5, #4]
 80081dc:	6853      	ldr	r3, [r2, #4]
 80081de:	6815      	ldr	r5, [r2, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f43f a96d 	beq.w	80074c0 <d_print_comp_inner+0x184>
 80081e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80081ea:	eb05 0803 	add.w	r8, r5, r3
 80081ee:	e009      	b.n	8008204 <d_print_comp_inner+0xec8>
 80081f0:	460b      	mov	r3, r1
 80081f2:	3101      	adds	r1, #1
 80081f4:	4545      	cmp	r5, r8
 80081f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80081fa:	54e6      	strb	r6, [r4, r3]
 80081fc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008200:	f43f a95e 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008204:	29ff      	cmp	r1, #255	; 0xff
 8008206:	f815 6b01 	ldrb.w	r6, [r5], #1
 800820a:	d1f1      	bne.n	80081f0 <d_print_comp_inner+0xeb4>
 800820c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008210:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8008214:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008218:	4620      	mov	r0, r4
 800821a:	4798      	blx	r3
 800821c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008220:	2101      	movs	r1, #1
 8008222:	440b      	add	r3, r1
 8008224:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008228:	2300      	movs	r3, #0
 800822a:	e7e3      	b.n	80081f4 <d_print_comp_inner+0xeb8>
 800822c:	08015ff3 	.word	0x08015ff3
 8008230:	08015fdf 	.word	0x08015fdf
 8008234:	080160ab 	.word	0x080160ab
 8008238:	08016093 	.word	0x08016093
 800823c:	08016077 	.word	0x08016077
 8008240:	0801605f 	.word	0x0801605f
 8008244:	0801604b 	.word	0x0801604b
 8008248:	0801603b 	.word	0x0801603b
 800824c:	0801601f 	.word	0x0801601f
 8008250:	6868      	ldr	r0, [r5, #4]
 8008252:	7803      	ldrb	r3, [r0, #0]
 8008254:	2b05      	cmp	r3, #5
 8008256:	f000 8697 	beq.w	8008f88 <d_print_comp_inner+0x1c4c>
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	2b23      	cmp	r3, #35	; 0x23
 8008260:	f000 8596 	beq.w	8008d90 <d_print_comp_inner+0x1a54>
 8008264:	782a      	ldrb	r2, [r5, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	f000 8592 	beq.w	8008d90 <d_print_comp_inner+0x1a54>
 800826c:	2b24      	cmp	r3, #36	; 0x24
 800826e:	f001 808b 	beq.w	8009388 <d_print_comp_inner+0x204c>
 8008272:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8008276:	ab14      	add	r3, sp, #80	; 0x50
 8008278:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 800827c:	f843 0d40 	str.w	r0, [r3, #-64]!
 8008280:	2200      	movs	r2, #0
 8008282:	9505      	str	r5, [sp, #20]
 8008284:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8008288:	9107      	str	r1, [sp, #28]
 800828a:	9206      	str	r2, [sp, #24]
 800828c:	686a      	ldr	r2, [r5, #4]
 800828e:	4639      	mov	r1, r7
 8008290:	4620      	mov	r0, r4
 8008292:	f001 fc6b 	bl	8009b6c <d_print_comp>
 8008296:	9b06      	ldr	r3, [sp, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 848d 	beq.w	8008bb8 <d_print_comp_inner+0x187c>
 800829e:	9b04      	ldr	r3, [sp, #16]
 80082a0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80082a4:	f1b8 0f00 	cmp.w	r8, #0
 80082a8:	f43f a90a 	beq.w	80074c0 <d_print_comp_inner+0x184>
 80082ac:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 80082b0:	f7ff b906 	b.w	80074c0 <d_print_comp_inner+0x184>
 80082b4:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 80082b8:	f04f 0800 	mov.w	r8, #0
 80082bc:	e7db      	b.n	8008276 <d_print_comp_inner+0xf3a>
 80082be:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 80082c2:	f1bc 0f00 	cmp.w	ip, #0
 80082c6:	f001 831f 	beq.w	8009908 <d_print_comp_inner+0x25cc>
 80082ca:	4662      	mov	r2, ip
 80082cc:	6891      	ldr	r1, [r2, #8]
 80082ce:	b951      	cbnz	r1, 80082e6 <d_print_comp_inner+0xfaa>
 80082d0:	6850      	ldr	r0, [r2, #4]
 80082d2:	7800      	ldrb	r0, [r0, #0]
 80082d4:	f1a0 0e19 	sub.w	lr, r0, #25
 80082d8:	f1be 0f02 	cmp.w	lr, #2
 80082dc:	f200 8703 	bhi.w	80090e6 <d_print_comp_inner+0x1daa>
 80082e0:	4283      	cmp	r3, r0
 80082e2:	f000 8704 	beq.w	80090ee <d_print_comp_inner+0x1db2>
 80082e6:	6812      	ldr	r2, [r2, #0]
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d1ef      	bne.n	80082cc <d_print_comp_inner+0xf90>
 80082ec:	4660      	mov	r0, ip
 80082ee:	4690      	mov	r8, r2
 80082f0:	e7c1      	b.n	8008276 <d_print_comp_inner+0xf3a>
 80082f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80082f6:	29ff      	cmp	r1, #255	; 0xff
 80082f8:	f000 8769 	beq.w	80091ce <d_print_comp_inner+0x1e92>
 80082fc:	1c4a      	adds	r2, r1, #1
 80082fe:	237e      	movs	r3, #126	; 0x7e
 8008300:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008304:	5463      	strb	r3, [r4, r1]
 8008306:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800830a:	4639      	mov	r1, r7
 800830c:	68aa      	ldr	r2, [r5, #8]
 800830e:	4620      	mov	r0, r4
 8008310:	f001 fc2c 	bl	8009b6c <d_print_comp>
 8008314:	f7ff b8d4 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008318:	686a      	ldr	r2, [r5, #4]
 800831a:	f001 fc27 	bl	8009b6c <d_print_comp>
 800831e:	f7ff b8cf 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008322:	4edd      	ldr	r6, [pc, #884]	; (8008698 <d_print_comp_inner+0x135c>)
 8008324:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008328:	f106 0a0d 	add.w	sl, r6, #13
 800832c:	f04f 0900 	mov.w	r9, #0
 8008330:	e00a      	b.n	8008348 <d_print_comp_inner+0x100c>
 8008332:	460b      	mov	r3, r1
 8008334:	3101      	adds	r1, #1
 8008336:	45b2      	cmp	sl, r6
 8008338:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800833c:	f804 8003 	strb.w	r8, [r4, r3]
 8008340:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008344:	f000 83e8 	beq.w	8008b18 <d_print_comp_inner+0x17dc>
 8008348:	29ff      	cmp	r1, #255	; 0xff
 800834a:	f816 8b01 	ldrb.w	r8, [r6], #1
 800834e:	d1f0      	bne.n	8008332 <d_print_comp_inner+0xff6>
 8008350:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008354:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008358:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800835c:	4620      	mov	r0, r4
 800835e:	4798      	blx	r3
 8008360:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008364:	2101      	movs	r1, #1
 8008366:	440b      	add	r3, r1
 8008368:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800836c:	2300      	movs	r3, #0
 800836e:	e7e2      	b.n	8008336 <d_print_comp_inner+0xffa>
 8008370:	4eca      	ldr	r6, [pc, #808]	; (800869c <d_print_comp_inner+0x1360>)
 8008372:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008376:	f106 0a18 	add.w	sl, r6, #24
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	e00a      	b.n	8008396 <d_print_comp_inner+0x105a>
 8008380:	460b      	mov	r3, r1
 8008382:	3101      	adds	r1, #1
 8008384:	45b2      	cmp	sl, r6
 8008386:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800838a:	f804 8003 	strb.w	r8, [r4, r3]
 800838e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008392:	f000 83c8 	beq.w	8008b26 <d_print_comp_inner+0x17ea>
 8008396:	29ff      	cmp	r1, #255	; 0xff
 8008398:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800839c:	d1f0      	bne.n	8008380 <d_print_comp_inner+0x1044>
 800839e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80083a2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80083a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80083aa:	4620      	mov	r0, r4
 80083ac:	4798      	blx	r3
 80083ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80083b2:	2101      	movs	r1, #1
 80083b4:	440b      	add	r3, r1
 80083b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80083ba:	2300      	movs	r3, #0
 80083bc:	e7e2      	b.n	8008384 <d_print_comp_inner+0x1048>
 80083be:	4eb8      	ldr	r6, [pc, #736]	; (80086a0 <d_print_comp_inner+0x1364>)
 80083c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80083c4:	f106 0a08 	add.w	sl, r6, #8
 80083c8:	f04f 0900 	mov.w	r9, #0
 80083cc:	e00a      	b.n	80083e4 <d_print_comp_inner+0x10a8>
 80083ce:	460b      	mov	r3, r1
 80083d0:	3101      	adds	r1, #1
 80083d2:	45b2      	cmp	sl, r6
 80083d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80083d8:	f804 8003 	strb.w	r8, [r4, r3]
 80083dc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80083e0:	f000 833e 	beq.w	8008a60 <d_print_comp_inner+0x1724>
 80083e4:	29ff      	cmp	r1, #255	; 0xff
 80083e6:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80083ea:	d1f0      	bne.n	80083ce <d_print_comp_inner+0x1092>
 80083ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80083f0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80083f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80083f8:	4620      	mov	r0, r4
 80083fa:	4798      	blx	r3
 80083fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008400:	2101      	movs	r1, #1
 8008402:	440b      	add	r3, r1
 8008404:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008408:	2300      	movs	r3, #0
 800840a:	e7e2      	b.n	80083d2 <d_print_comp_inner+0x1096>
 800840c:	4ea5      	ldr	r6, [pc, #660]	; (80086a4 <d_print_comp_inner+0x1368>)
 800840e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008412:	f106 0a0b 	add.w	sl, r6, #11
 8008416:	f04f 0900 	mov.w	r9, #0
 800841a:	e00a      	b.n	8008432 <d_print_comp_inner+0x10f6>
 800841c:	460b      	mov	r3, r1
 800841e:	3101      	adds	r1, #1
 8008420:	45b2      	cmp	sl, r6
 8008422:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008426:	f804 8003 	strb.w	r8, [r4, r3]
 800842a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800842e:	f000 819b 	beq.w	8008768 <d_print_comp_inner+0x142c>
 8008432:	29ff      	cmp	r1, #255	; 0xff
 8008434:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008438:	d1f0      	bne.n	800841c <d_print_comp_inner+0x10e0>
 800843a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800843e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008446:	4620      	mov	r0, r4
 8008448:	4798      	blx	r3
 800844a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800844e:	2101      	movs	r1, #1
 8008450:	440b      	add	r3, r1
 8008452:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008456:	2300      	movs	r3, #0
 8008458:	e7e2      	b.n	8008420 <d_print_comp_inner+0x10e4>
 800845a:	2300      	movs	r3, #0
 800845c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8008460:	f8d0 8140 	ldr.w	r8, [r0, #320]	; 0x140
 8008464:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8008468:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
 800846c:	074a      	lsls	r2, r1, #29
 800846e:	686e      	ldr	r6, [r5, #4]
 8008470:	d505      	bpl.n	800847e <d_print_comp_inner+0x1142>
 8008472:	7833      	ldrb	r3, [r6, #0]
 8008474:	b91b      	cbnz	r3, 800847e <d_print_comp_inner+0x1142>
 8008476:	68b2      	ldr	r2, [r6, #8]
 8008478:	2a06      	cmp	r2, #6
 800847a:	f001 808b 	beq.w	8009594 <d_print_comp_inner+0x2258>
 800847e:	4632      	mov	r2, r6
 8008480:	4639      	mov	r1, r7
 8008482:	4620      	mov	r0, r4
 8008484:	f001 fb72 	bl	8009b6c <d_print_comp>
 8008488:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800848c:	2b3c      	cmp	r3, #60	; 0x3c
 800848e:	f000 85e8 	beq.w	8009062 <d_print_comp_inner+0x1d26>
 8008492:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008496:	2bff      	cmp	r3, #255	; 0xff
 8008498:	f000 879c 	beq.w	80093d4 <d_print_comp_inner+0x2098>
 800849c:	1c59      	adds	r1, r3, #1
 800849e:	223c      	movs	r2, #60	; 0x3c
 80084a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80084a4:	54e2      	strb	r2, [r4, r3]
 80084a6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80084aa:	4639      	mov	r1, r7
 80084ac:	68aa      	ldr	r2, [r5, #8]
 80084ae:	4620      	mov	r0, r4
 80084b0:	f001 fb5c 	bl	8009b6c <d_print_comp>
 80084b4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80084b8:	2b3e      	cmp	r3, #62	; 0x3e
 80084ba:	f000 85c4 	beq.w	8009046 <d_print_comp_inner+0x1d0a>
 80084be:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80084c2:	2bff      	cmp	r3, #255	; 0xff
 80084c4:	f000 8773 	beq.w	80093ae <d_print_comp_inner+0x2072>
 80084c8:	1c59      	adds	r1, r3, #1
 80084ca:	223e      	movs	r2, #62	; 0x3e
 80084cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80084d0:	54e2      	strb	r2, [r4, r3]
 80084d2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80084d6:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80084da:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 80084de:	f7fe bfef 	b.w	80074c0 <d_print_comp_inner+0x184>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80084e8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80084ec:	686e      	ldr	r6, [r5, #4]
 80084ee:	9200      	str	r2, [sp, #0]
 80084f0:	2e00      	cmp	r6, #0
 80084f2:	f000 8134 	beq.w	800875e <d_print_comp_inner+0x1422>
 80084f6:	f10d 0910 	add.w	r9, sp, #16
 80084fa:	469e      	mov	lr, r3
 80084fc:	4618      	mov	r0, r3
 80084fe:	464a      	mov	r2, r9
 8008500:	f8d4 c110 	ldr.w	ip, [r4, #272]	; 0x110
 8008504:	7831      	ldrb	r1, [r6, #0]
 8008506:	f10e 0801 	add.w	r8, lr, #1
 800850a:	f1a1 0a1c 	sub.w	sl, r1, #28
 800850e:	f1ba 0f04 	cmp.w	sl, #4
 8008512:	6013      	str	r3, [r2, #0]
 8008514:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8008518:	6056      	str	r6, [r2, #4]
 800851a:	6090      	str	r0, [r2, #8]
 800851c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008520:	4613      	mov	r3, r2
 8008522:	f102 0210 	add.w	r2, r2, #16
 8008526:	f240 8113 	bls.w	8008750 <d_print_comp_inner+0x1414>
 800852a:	2904      	cmp	r1, #4
 800852c:	f001 8193 	beq.w	8009856 <d_print_comp_inner+0x251a>
 8008530:	2902      	cmp	r1, #2
 8008532:	d137      	bne.n	80085a4 <d_print_comp_inner+0x1268>
 8008534:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008538:	f89b 3000 	ldrb.w	r3, [fp]
 800853c:	2b45      	cmp	r3, #69	; 0x45
 800853e:	bf08      	it	eq
 8008540:	f8db b004 	ldreq.w	fp, [fp, #4]
 8008544:	f89b 3000 	ldrb.w	r3, [fp]
 8008548:	3b1c      	subs	r3, #28
 800854a:	2b04      	cmp	r3, #4
 800854c:	d82a      	bhi.n	80085a4 <d_print_comp_inner+0x1268>
 800854e:	f1b8 0f04 	cmp.w	r8, #4
 8008552:	f000 8104 	beq.w	800875e <d_print_comp_inner+0x1422>
 8008556:	462b      	mov	r3, r5
 8008558:	eb09 1e0e 	add.w	lr, r9, lr, lsl #4
 800855c:	46b2      	mov	sl, r6
 800855e:	465d      	mov	r5, fp
 8008560:	4666      	mov	r6, ip
 8008562:	469b      	mov	fp, r3
 8008564:	46a4      	mov	ip, r4
 8008566:	4674      	mov	r4, lr
 8008568:	e003      	b.n	8008572 <d_print_comp_inner+0x1236>
 800856a:	f1b8 0f04 	cmp.w	r8, #4
 800856e:	f001 81b7 	beq.w	80098e0 <d_print_comp_inner+0x25a4>
 8008572:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008576:	f104 0e10 	add.w	lr, r4, #16
 800857a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800857e:	4623      	mov	r3, r4
 8008580:	2200      	movs	r2, #0
 8008582:	611c      	str	r4, [r3, #16]
 8008584:	605d      	str	r5, [r3, #4]
 8008586:	609a      	str	r2, [r3, #8]
 8008588:	60de      	str	r6, [r3, #12]
 800858a:	f8cc e114 	str.w	lr, [ip, #276]	; 0x114
 800858e:	686d      	ldr	r5, [r5, #4]
 8008590:	4674      	mov	r4, lr
 8008592:	782b      	ldrb	r3, [r5, #0]
 8008594:	f108 0801 	add.w	r8, r8, #1
 8008598:	3b1c      	subs	r3, #28
 800859a:	2b04      	cmp	r3, #4
 800859c:	d9e5      	bls.n	800856a <d_print_comp_inner+0x122e>
 800859e:	4656      	mov	r6, sl
 80085a0:	4664      	mov	r4, ip
 80085a2:	465d      	mov	r5, fp
 80085a4:	68aa      	ldr	r2, [r5, #8]
 80085a6:	4639      	mov	r1, r7
 80085a8:	4620      	mov	r0, r4
 80085aa:	f001 fadf 	bl	8009b6c <d_print_comp>
 80085ae:	7833      	ldrb	r3, [r6, #0]
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	f001 8190 	beq.w	80098d6 <d_print_comp_inner+0x259a>
 80085b6:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 80085ba:	4645      	mov	r5, r8
 80085bc:	46b8      	mov	r8, r7
 80085be:	2620      	movs	r6, #32
 80085c0:	f859 7c08 	ldr.w	r7, [r9, #-8]
 80085c4:	3d01      	subs	r5, #1
 80085c6:	b987      	cbnz	r7, 80085ea <d_print_comp_inner+0x12ae>
 80085c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80085cc:	29ff      	cmp	r1, #255	; 0xff
 80085ce:	f001 8172 	beq.w	80098b6 <d_print_comp_inner+0x257a>
 80085d2:	1c4b      	adds	r3, r1, #1
 80085d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80085d8:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80085dc:	5466      	strb	r6, [r4, r1]
 80085de:	4620      	mov	r0, r4
 80085e0:	4641      	mov	r1, r8
 80085e2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80085e6:	f001 fad1 	bl	8009b8c <d_print_mod>
 80085ea:	f1a9 0910 	sub.w	r9, r9, #16
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	d1e6      	bne.n	80085c0 <d_print_comp_inner+0x1284>
 80085f2:	9b00      	ldr	r3, [sp, #0]
 80085f4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80085f8:	f7fe bf62 	b.w	80074c0 <d_print_comp_inner+0x184>
 80085fc:	686a      	ldr	r2, [r5, #4]
 80085fe:	f001 fab5 	bl	8009b6c <d_print_comp>
 8008602:	f017 0904 	ands.w	r9, r7, #4
 8008606:	f000 8475 	beq.w	8008ef4 <d_print_comp_inner+0x1bb8>
 800860a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800860e:	29ff      	cmp	r1, #255	; 0xff
 8008610:	f000 87d3 	beq.w	80095ba <d_print_comp_inner+0x227e>
 8008614:	1c4a      	adds	r2, r1, #1
 8008616:	232e      	movs	r3, #46	; 0x2e
 8008618:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800861c:	5463      	strb	r3, [r4, r1]
 800861e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008622:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8008626:	f898 3000 	ldrb.w	r3, [r8]
 800862a:	2b45      	cmp	r3, #69	; 0x45
 800862c:	f000 862c 	beq.w	8009288 <d_print_comp_inner+0x1f4c>
 8008630:	4642      	mov	r2, r8
 8008632:	4639      	mov	r1, r7
 8008634:	4620      	mov	r0, r4
 8008636:	f001 fa99 	bl	8009b6c <d_print_comp>
 800863a:	f7fe bf41 	b.w	80074c0 <d_print_comp_inner+0x184>
 800863e:	f011 0704 	ands.w	r7, r1, #4
 8008642:	f040 832d 	bne.w	8008ca0 <d_print_comp_inner+0x1964>
 8008646:	68ab      	ldr	r3, [r5, #8]
 8008648:	686d      	ldr	r5, [r5, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f43e af38 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008650:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008654:	eb05 0803 	add.w	r8, r5, r3
 8008658:	e009      	b.n	800866e <d_print_comp_inner+0x1332>
 800865a:	460b      	mov	r3, r1
 800865c:	3101      	adds	r1, #1
 800865e:	45a8      	cmp	r8, r5
 8008660:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008664:	54e6      	strb	r6, [r4, r3]
 8008666:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800866a:	f43e af29 	beq.w	80074c0 <d_print_comp_inner+0x184>
 800866e:	29ff      	cmp	r1, #255	; 0xff
 8008670:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008674:	d1f1      	bne.n	800865a <d_print_comp_inner+0x131e>
 8008676:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800867a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800867e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008682:	4620      	mov	r0, r4
 8008684:	4798      	blx	r3
 8008686:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800868a:	2101      	movs	r1, #1
 800868c:	440b      	add	r3, r1
 800868e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008692:	2300      	movs	r3, #0
 8008694:	e7e3      	b.n	800865e <d_print_comp_inner+0x1322>
 8008696:	bf00      	nop
 8008698:	08015fd0 	.word	0x08015fd0
 800869c:	08015fab 	.word	0x08015fab
 80086a0:	08015f9f 	.word	0x08015f9f
 80086a4:	08015f94 	.word	0x08015f94
 80086a8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80086ac:	f1b9 0f00 	cmp.w	r9, #0
 80086b0:	f000 8373 	beq.w	8008d9a <d_print_comp_inner+0x1a5e>
 80086b4:	4dda      	ldr	r5, [pc, #872]	; (8008a20 <d_print_comp_inner+0x16e4>)
 80086b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80086ba:	1daf      	adds	r7, r5, #6
 80086bc:	f04f 0800 	mov.w	r8, #0
 80086c0:	e009      	b.n	80086d6 <d_print_comp_inner+0x139a>
 80086c2:	460b      	mov	r3, r1
 80086c4:	3101      	adds	r1, #1
 80086c6:	42bd      	cmp	r5, r7
 80086c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80086cc:	54e6      	strb	r6, [r4, r3]
 80086ce:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80086d2:	f000 8280 	beq.w	8008bd6 <d_print_comp_inner+0x189a>
 80086d6:	29ff      	cmp	r1, #255	; 0xff
 80086d8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80086dc:	d1f1      	bne.n	80086c2 <d_print_comp_inner+0x1386>
 80086de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80086e2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80086e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80086ea:	4620      	mov	r0, r4
 80086ec:	4798      	blx	r3
 80086ee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80086f2:	2101      	movs	r1, #1
 80086f4:	440b      	add	r3, r1
 80086f6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80086fa:	2300      	movs	r3, #0
 80086fc:	e7e3      	b.n	80086c6 <d_print_comp_inner+0x138a>
 80086fe:	1d29      	adds	r1, r5, #4
 8008700:	f7fe fd76 	bl	80071f0 <d_lookup_template_argument.isra.6>
 8008704:	2800      	cmp	r0, #0
 8008706:	f43e aee3 	beq.w	80074d0 <d_print_comp_inner+0x194>
 800870a:	7803      	ldrb	r3, [r0, #0]
 800870c:	2b2f      	cmp	r3, #47	; 0x2f
 800870e:	f000 84fa 	beq.w	8009106 <d_print_comp_inner+0x1dca>
 8008712:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8008716:	4602      	mov	r2, r0
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	4639      	mov	r1, r7
 800871c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8008720:	4620      	mov	r0, r4
 8008722:	f001 fa23 	bl	8009b6c <d_print_comp>
 8008726:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800872a:	f7fe bec9 	b.w	80074c0 <d_print_comp_inner+0x184>
 800872e:	68aa      	ldr	r2, [r5, #8]
 8008730:	f001 fa1c 	bl	8009b6c <d_print_comp>
 8008734:	f7fe bec4 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008738:	2301      	movs	r3, #1
 800873a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800873e:	f7fe bebf 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008742:	f10b 0b01 	add.w	fp, fp, #1
 8008746:	45cb      	cmp	fp, r9
 8008748:	f47e af39 	bne.w	80075be <d_print_comp_inner+0x282>
 800874c:	f7fe beb8 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008750:	6876      	ldr	r6, [r6, #4]
 8008752:	b126      	cbz	r6, 800875e <d_print_comp_inner+0x1422>
 8008754:	f1b8 0f04 	cmp.w	r8, #4
 8008758:	46c6      	mov	lr, r8
 800875a:	f47f aed3 	bne.w	8008504 <d_print_comp_inner+0x11c8>
 800875e:	2301      	movs	r3, #1
 8008760:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8008764:	f7fe beac 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008768:	686a      	ldr	r2, [r5, #4]
 800876a:	4639      	mov	r1, r7
 800876c:	4620      	mov	r0, r4
 800876e:	f001 f9fd 	bl	8009b6c <d_print_comp>
 8008772:	f7fe bea5 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008776:	686a      	ldr	r2, [r5, #4]
 8008778:	4639      	mov	r1, r7
 800877a:	4620      	mov	r0, r4
 800877c:	f001 f9f6 	bl	8009b6c <d_print_comp>
 8008780:	f7fe be9e 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008784:	686a      	ldr	r2, [r5, #4]
 8008786:	4639      	mov	r1, r7
 8008788:	4620      	mov	r0, r4
 800878a:	f001 f9ef 	bl	8009b6c <d_print_comp>
 800878e:	f7fe be97 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008792:	686a      	ldr	r2, [r5, #4]
 8008794:	4639      	mov	r1, r7
 8008796:	4620      	mov	r0, r4
 8008798:	f001 f9e8 	bl	8009b6c <d_print_comp>
 800879c:	f7fe be90 	b.w	80074c0 <d_print_comp_inner+0x184>
 80087a0:	686a      	ldr	r2, [r5, #4]
 80087a2:	4639      	mov	r1, r7
 80087a4:	4620      	mov	r0, r4
 80087a6:	f001 f9e1 	bl	8009b6c <d_print_comp>
 80087aa:	f7fe be89 	b.w	80074c0 <d_print_comp_inner+0x184>
 80087ae:	686a      	ldr	r2, [r5, #4]
 80087b0:	4639      	mov	r1, r7
 80087b2:	4620      	mov	r0, r4
 80087b4:	f001 f9da 	bl	8009b6c <d_print_comp>
 80087b8:	f7fe be82 	b.w	80074c0 <d_print_comp_inner+0x184>
 80087bc:	4639      	mov	r1, r7
 80087be:	686a      	ldr	r2, [r5, #4]
 80087c0:	4620      	mov	r0, r4
 80087c2:	f001 f9d3 	bl	8009b6c <d_print_comp>
 80087c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80087ca:	29ff      	cmp	r1, #255	; 0xff
 80087cc:	f000 84cf 	beq.w	800916e <d_print_comp_inner+0x1e32>
 80087d0:	1c4a      	adds	r2, r1, #1
 80087d2:	2329      	movs	r3, #41	; 0x29
 80087d4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80087d8:	5463      	strb	r3, [r4, r1]
 80087da:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80087de:	f7fe be6f 	b.w	80074c0 <d_print_comp_inner+0x184>
 80087e2:	686a      	ldr	r2, [r5, #4]
 80087e4:	4639      	mov	r1, r7
 80087e6:	4620      	mov	r0, r4
 80087e8:	f001 f9c0 	bl	8009b6c <d_print_comp>
 80087ec:	f7fe be68 	b.w	80074c0 <d_print_comp_inner+0x184>
 80087f0:	686a      	ldr	r2, [r5, #4]
 80087f2:	a804      	add	r0, sp, #16
 80087f4:	3201      	adds	r2, #1
 80087f6:	498b      	ldr	r1, [pc, #556]	; (8008a24 <d_print_comp_inner+0x16e8>)
 80087f8:	f00a ffe6 	bl	80137c8 <siprintf>
 80087fc:	a804      	add	r0, sp, #16
 80087fe:	f006 fb2d 	bl	800ee5c <strlen>
 8008802:	b318      	cbz	r0, 800884c <d_print_comp_inner+0x1510>
 8008804:	ad04      	add	r5, sp, #16
 8008806:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800880a:	182f      	adds	r7, r5, r0
 800880c:	f04f 0800 	mov.w	r8, #0
 8008810:	e008      	b.n	8008824 <d_print_comp_inner+0x14e8>
 8008812:	460b      	mov	r3, r1
 8008814:	3101      	adds	r1, #1
 8008816:	42af      	cmp	r7, r5
 8008818:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800881c:	54e6      	strb	r6, [r4, r3]
 800881e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008822:	d015      	beq.n	8008850 <d_print_comp_inner+0x1514>
 8008824:	29ff      	cmp	r1, #255	; 0xff
 8008826:	f815 6b01 	ldrb.w	r6, [r5], #1
 800882a:	d1f2      	bne.n	8008812 <d_print_comp_inner+0x14d6>
 800882c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008830:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008834:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008838:	4620      	mov	r0, r4
 800883a:	4798      	blx	r3
 800883c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008840:	2101      	movs	r1, #1
 8008842:	440b      	add	r3, r1
 8008844:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008848:	2300      	movs	r3, #0
 800884a:	e7e4      	b.n	8008816 <d_print_comp_inner+0x14da>
 800884c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008850:	29ff      	cmp	r1, #255	; 0xff
 8008852:	f000 84cd 	beq.w	80091f0 <d_print_comp_inner+0x1eb4>
 8008856:	1c4a      	adds	r2, r1, #1
 8008858:	237d      	movs	r3, #125	; 0x7d
 800885a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800885e:	5463      	strb	r3, [r4, r1]
 8008860:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008864:	f7fe be2c 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008868:	4e6f      	ldr	r6, [pc, #444]	; (8008a28 <d_print_comp_inner+0x16ec>)
 800886a:	4639      	mov	r1, r7
 800886c:	686a      	ldr	r2, [r5, #4]
 800886e:	4620      	mov	r0, r4
 8008870:	f001 f97c 	bl	8009b6c <d_print_comp>
 8008874:	f106 0902 	add.w	r9, r6, #2
 8008878:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800887c:	f04f 0800 	mov.w	r8, #0
 8008880:	e008      	b.n	8008894 <d_print_comp_inner+0x1558>
 8008882:	460b      	mov	r3, r1
 8008884:	3101      	adds	r1, #1
 8008886:	45b1      	cmp	r9, r6
 8008888:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800888c:	54e7      	strb	r7, [r4, r3]
 800888e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8008892:	d068      	beq.n	8008966 <d_print_comp_inner+0x162a>
 8008894:	29ff      	cmp	r1, #255	; 0xff
 8008896:	f816 7b01 	ldrb.w	r7, [r6], #1
 800889a:	d1f2      	bne.n	8008882 <d_print_comp_inner+0x1546>
 800889c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80088a0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80088a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80088a8:	4620      	mov	r0, r4
 80088aa:	4798      	blx	r3
 80088ac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80088b0:	2101      	movs	r1, #1
 80088b2:	440b      	add	r3, r1
 80088b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80088b8:	2300      	movs	r3, #0
 80088ba:	e7e4      	b.n	8008886 <d_print_comp_inner+0x154a>
 80088bc:	686a      	ldr	r2, [r5, #4]
 80088be:	4639      	mov	r1, r7
 80088c0:	4620      	mov	r0, r4
 80088c2:	f001 f953 	bl	8009b6c <d_print_comp>
 80088c6:	f7fe bdfb 	b.w	80074c0 <d_print_comp_inner+0x184>
 80088ca:	f8da 5004 	ldr.w	r5, [sl, #4]
 80088ce:	782b      	ldrb	r3, [r5, #0]
 80088d0:	3b61      	subs	r3, #97	; 0x61
 80088d2:	2b19      	cmp	r3, #25
 80088d4:	d80b      	bhi.n	80088ee <d_print_comp_inner+0x15b2>
 80088d6:	29ff      	cmp	r1, #255	; 0xff
 80088d8:	f000 8726 	beq.w	8009728 <d_print_comp_inner+0x23ec>
 80088dc:	2320      	movs	r3, #32
 80088de:	1c4a      	adds	r2, r1, #1
 80088e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80088e4:	5463      	strb	r3, [r4, r1]
 80088e6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80088ea:	f8da 5004 	ldr.w	r5, [sl, #4]
 80088ee:	19eb      	adds	r3, r5, r7
 80088f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	bf08      	it	eq
 80088f8:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80088fc:	2f00      	cmp	r7, #0
 80088fe:	f43e addf 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008902:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008906:	442f      	add	r7, r5
 8008908:	f04f 0800 	mov.w	r8, #0
 800890c:	e009      	b.n	8008922 <d_print_comp_inner+0x15e6>
 800890e:	460b      	mov	r3, r1
 8008910:	3101      	adds	r1, #1
 8008912:	42af      	cmp	r7, r5
 8008914:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008918:	54e6      	strb	r6, [r4, r3]
 800891a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800891e:	f43e adcf 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008922:	29ff      	cmp	r1, #255	; 0xff
 8008924:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008928:	d1f1      	bne.n	800890e <d_print_comp_inner+0x15d2>
 800892a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800892e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008932:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008936:	4620      	mov	r0, r4
 8008938:	4798      	blx	r3
 800893a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800893e:	2101      	movs	r1, #1
 8008940:	440b      	add	r3, r1
 8008942:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008946:	2300      	movs	r3, #0
 8008948:	e7e3      	b.n	8008912 <d_print_comp_inner+0x15d6>
 800894a:	686a      	ldr	r2, [r5, #4]
 800894c:	4639      	mov	r1, r7
 800894e:	4620      	mov	r0, r4
 8008950:	f001 f90c 	bl	8009b6c <d_print_comp>
 8008954:	f7fe bdb4 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008958:	686a      	ldr	r2, [r5, #4]
 800895a:	4639      	mov	r1, r7
 800895c:	4620      	mov	r0, r4
 800895e:	f001 f905 	bl	8009b6c <d_print_comp>
 8008962:	f7fe bdad 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008966:	68aa      	ldr	r2, [r5, #8]
 8008968:	a804      	add	r0, sp, #16
 800896a:	3201      	adds	r2, #1
 800896c:	492d      	ldr	r1, [pc, #180]	; (8008a24 <d_print_comp_inner+0x16e8>)
 800896e:	f00a ff2b 	bl	80137c8 <siprintf>
 8008972:	a804      	add	r0, sp, #16
 8008974:	f006 fa72 	bl	800ee5c <strlen>
 8008978:	b318      	cbz	r0, 80089c2 <d_print_comp_inner+0x1686>
 800897a:	ad04      	add	r5, sp, #16
 800897c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008980:	182f      	adds	r7, r5, r0
 8008982:	f04f 0800 	mov.w	r8, #0
 8008986:	e008      	b.n	800899a <d_print_comp_inner+0x165e>
 8008988:	460b      	mov	r3, r1
 800898a:	3101      	adds	r1, #1
 800898c:	42af      	cmp	r7, r5
 800898e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008992:	54e6      	strb	r6, [r4, r3]
 8008994:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008998:	d015      	beq.n	80089c6 <d_print_comp_inner+0x168a>
 800899a:	29ff      	cmp	r1, #255	; 0xff
 800899c:	f815 6b01 	ldrb.w	r6, [r5], #1
 80089a0:	d1f2      	bne.n	8008988 <d_print_comp_inner+0x164c>
 80089a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80089a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80089aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80089ae:	4620      	mov	r0, r4
 80089b0:	4798      	blx	r3
 80089b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80089b6:	2101      	movs	r1, #1
 80089b8:	440b      	add	r3, r1
 80089ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80089be:	2300      	movs	r3, #0
 80089c0:	e7e4      	b.n	800898c <d_print_comp_inner+0x1650>
 80089c2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80089c6:	29ff      	cmp	r1, #255	; 0xff
 80089c8:	f000 8447 	beq.w	800925a <d_print_comp_inner+0x1f1e>
 80089cc:	1c4a      	adds	r2, r1, #1
 80089ce:	237d      	movs	r3, #125	; 0x7d
 80089d0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80089d4:	5463      	strb	r3, [r4, r1]
 80089d6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80089da:	f7fe bd71 	b.w	80074c0 <d_print_comp_inner+0x184>
 80089de:	1d2a      	adds	r2, r5, #4
 80089e0:	4639      	mov	r1, r7
 80089e2:	4620      	mov	r0, r4
 80089e4:	f001 fe62 	bl	800a6ac <d_print_cast.isra.12>
 80089e8:	f7fe bd6a 	b.w	80074c0 <d_print_comp_inner+0x184>
 80089ec:	4639      	mov	r1, r7
 80089ee:	68aa      	ldr	r2, [r5, #8]
 80089f0:	4620      	mov	r0, r4
 80089f2:	f001 f8bb 	bl	8009b6c <d_print_comp>
 80089f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80089fa:	29ff      	cmp	r1, #255	; 0xff
 80089fc:	f000 841b 	beq.w	8009236 <d_print_comp_inner+0x1efa>
 8008a00:	1c4a      	adds	r2, r1, #1
 8008a02:	235d      	movs	r3, #93	; 0x5d
 8008a04:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008a08:	5463      	strb	r3, [r4, r1]
 8008a0a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008a0e:	f7fe bd57 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008a12:	686a      	ldr	r2, [r5, #4]
 8008a14:	4639      	mov	r1, r7
 8008a16:	4620      	mov	r0, r4
 8008a18:	f001 f8a8 	bl	8009b6c <d_print_comp>
 8008a1c:	f7fe bd50 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008a20:	08016178 	.word	0x08016178
 8008a24:	08015f80 	.word	0x08015f80
 8008a28:	080161cc 	.word	0x080161cc
 8008a2c:	68aa      	ldr	r2, [r5, #8]
 8008a2e:	4639      	mov	r1, r7
 8008a30:	4620      	mov	r0, r4
 8008a32:	f001 f89b 	bl	8009b6c <d_print_comp>
 8008a36:	f7fe bd43 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	68aa      	ldr	r2, [r5, #8]
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f001 f894 	bl	8009b6c <d_print_comp>
 8008a44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008a48:	29ff      	cmp	r1, #255	; 0xff
 8008a4a:	f000 83e3 	beq.w	8009214 <d_print_comp_inner+0x1ed8>
 8008a4e:	1c4a      	adds	r2, r1, #1
 8008a50:	235d      	movs	r3, #93	; 0x5d
 8008a52:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008a56:	5463      	strb	r3, [r4, r1]
 8008a58:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008a5c:	f7fe bd30 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008a60:	686a      	ldr	r2, [r5, #4]
 8008a62:	4639      	mov	r1, r7
 8008a64:	4620      	mov	r0, r4
 8008a66:	f001 f881 	bl	8009b6c <d_print_comp>
 8008a6a:	f7fe bd29 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008a6e:	686a      	ldr	r2, [r5, #4]
 8008a70:	4639      	mov	r1, r7
 8008a72:	4620      	mov	r0, r4
 8008a74:	f001 f87a 	bl	8009b6c <d_print_comp>
 8008a78:	f7fe bd22 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008a7c:	686a      	ldr	r2, [r5, #4]
 8008a7e:	4639      	mov	r1, r7
 8008a80:	4620      	mov	r0, r4
 8008a82:	f001 f873 	bl	8009b6c <d_print_comp>
 8008a86:	f7fe bd1b 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008a8a:	4ed5      	ldr	r6, [pc, #852]	; (8008de0 <d_print_comp_inner+0x1aa4>)
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	68aa      	ldr	r2, [r5, #8]
 8008a90:	4620      	mov	r0, r4
 8008a92:	f001 f86b 	bl	8009b6c <d_print_comp>
 8008a96:	f106 0a05 	add.w	sl, r6, #5
 8008a9a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008a9e:	f04f 0900 	mov.w	r9, #0
 8008aa2:	e009      	b.n	8008ab8 <d_print_comp_inner+0x177c>
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	3101      	adds	r1, #1
 8008aa8:	45b2      	cmp	sl, r6
 8008aaa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008aae:	f804 8003 	strb.w	r8, [r4, r3]
 8008ab2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008ab6:	d028      	beq.n	8008b0a <d_print_comp_inner+0x17ce>
 8008ab8:	29ff      	cmp	r1, #255	; 0xff
 8008aba:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008abe:	d1f1      	bne.n	8008aa4 <d_print_comp_inner+0x1768>
 8008ac0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008ac4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008ac8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008acc:	4620      	mov	r0, r4
 8008ace:	4798      	blx	r3
 8008ad0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	440b      	add	r3, r1
 8008ad8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008adc:	2300      	movs	r3, #0
 8008ade:	e7e3      	b.n	8008aa8 <d_print_comp_inner+0x176c>
 8008ae0:	686a      	ldr	r2, [r5, #4]
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f001 f841 	bl	8009b6c <d_print_comp>
 8008aea:	f7fe bce9 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008aee:	686a      	ldr	r2, [r5, #4]
 8008af0:	4639      	mov	r1, r7
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 f83a 	bl	8009b6c <d_print_comp>
 8008af8:	f7fe bce2 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008afc:	686a      	ldr	r2, [r5, #4]
 8008afe:	4639      	mov	r1, r7
 8008b00:	4620      	mov	r0, r4
 8008b02:	f001 f833 	bl	8009b6c <d_print_comp>
 8008b06:	f7fe bcdb 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008b0a:	686a      	ldr	r2, [r5, #4]
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f001 f82c 	bl	8009b6c <d_print_comp>
 8008b14:	f7fe bcd4 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008b18:	686a      	ldr	r2, [r5, #4]
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f001 f825 	bl	8009b6c <d_print_comp>
 8008b22:	f7fe bccd 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008b26:	4eaf      	ldr	r6, [pc, #700]	; (8008de4 <d_print_comp_inner+0x1aa8>)
 8008b28:	4639      	mov	r1, r7
 8008b2a:	686a      	ldr	r2, [r5, #4]
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f001 f81d 	bl	8009b6c <d_print_comp>
 8008b32:	f106 0a04 	add.w	sl, r6, #4
 8008b36:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008b3a:	f04f 0900 	mov.w	r9, #0
 8008b3e:	e009      	b.n	8008b54 <d_print_comp_inner+0x1818>
 8008b40:	460b      	mov	r3, r1
 8008b42:	3101      	adds	r1, #1
 8008b44:	4556      	cmp	r6, sl
 8008b46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008b4a:	f804 8003 	strb.w	r8, [r4, r3]
 8008b4e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008b52:	d013      	beq.n	8008b7c <d_print_comp_inner+0x1840>
 8008b54:	29ff      	cmp	r1, #255	; 0xff
 8008b56:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008b5a:	d1f1      	bne.n	8008b40 <d_print_comp_inner+0x1804>
 8008b5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008b60:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008b64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008b68:	4620      	mov	r0, r4
 8008b6a:	4798      	blx	r3
 8008b6c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008b70:	2101      	movs	r1, #1
 8008b72:	440b      	add	r3, r1
 8008b74:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e7e3      	b.n	8008b44 <d_print_comp_inner+0x1808>
 8008b7c:	68aa      	ldr	r2, [r5, #8]
 8008b7e:	4639      	mov	r1, r7
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fff3 	bl	8009b6c <d_print_comp>
 8008b86:	f7fe bc9b 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008b8a:	68aa      	ldr	r2, [r5, #8]
 8008b8c:	460e      	mov	r6, r1
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4639      	mov	r1, r7
 8008b92:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8008b96:	f000 ffe9 	bl	8009b6c <d_print_comp>
 8008b9a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008b9e:	429d      	cmp	r5, r3
 8008ba0:	f47e ac8e 	bne.w	80074c0 <d_print_comp_inner+0x184>
 8008ba4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008ba8:	42b3      	cmp	r3, r6
 8008baa:	f47e ac89 	bne.w	80074c0 <d_print_comp_inner+0x184>
 8008bae:	3e02      	subs	r6, #2
 8008bb0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8008bb4:	f7fe bc84 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008bb8:	462a      	mov	r2, r5
 8008bba:	4639      	mov	r1, r7
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 ffe5 	bl	8009b8c <d_print_mod>
 8008bc2:	f7ff bb6c 	b.w	800829e <d_print_comp_inner+0xf62>
 8008bc6:	686b      	ldr	r3, [r5, #4]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	f1b9 0f00 	cmp.w	r9, #0
 8008bce:	f47e acf0 	bne.w	80075b2 <d_print_comp_inner+0x276>
 8008bd2:	f7fe bc75 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008bd6:	464a      	mov	r2, r9
 8008bd8:	a804      	add	r0, sp, #16
 8008bda:	4983      	ldr	r1, [pc, #524]	; (8008de8 <d_print_comp_inner+0x1aac>)
 8008bdc:	f00a fdf4 	bl	80137c8 <siprintf>
 8008be0:	a804      	add	r0, sp, #16
 8008be2:	f006 f93b 	bl	800ee5c <strlen>
 8008be6:	b318      	cbz	r0, 8008c30 <d_print_comp_inner+0x18f4>
 8008be8:	ad04      	add	r5, sp, #16
 8008bea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008bee:	182f      	adds	r7, r5, r0
 8008bf0:	f04f 0800 	mov.w	r8, #0
 8008bf4:	e008      	b.n	8008c08 <d_print_comp_inner+0x18cc>
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	3101      	adds	r1, #1
 8008bfa:	42bd      	cmp	r5, r7
 8008bfc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008c00:	54e6      	strb	r6, [r4, r3]
 8008c02:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008c06:	d015      	beq.n	8008c34 <d_print_comp_inner+0x18f8>
 8008c08:	29ff      	cmp	r1, #255	; 0xff
 8008c0a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008c0e:	d1f2      	bne.n	8008bf6 <d_print_comp_inner+0x18ba>
 8008c10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008c14:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008c18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4798      	blx	r3
 8008c20:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008c24:	2101      	movs	r1, #1
 8008c26:	440b      	add	r3, r1
 8008c28:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e7e4      	b.n	8008bfa <d_print_comp_inner+0x18be>
 8008c30:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008c34:	29ff      	cmp	r1, #255	; 0xff
 8008c36:	f000 841d 	beq.w	8009474 <d_print_comp_inner+0x2138>
 8008c3a:	1c4a      	adds	r2, r1, #1
 8008c3c:	237d      	movs	r3, #125	; 0x7d
 8008c3e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008c42:	5463      	strb	r3, [r4, r1]
 8008c44:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008c48:	f7fe bc3a 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008c4c:	686b      	ldr	r3, [r5, #4]
 8008c4e:	68df      	ldr	r7, [r3, #12]
 8008c50:	689d      	ldr	r5, [r3, #8]
 8008c52:	2f00      	cmp	r7, #0
 8008c54:	f43e ac34 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008c58:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008c5c:	442f      	add	r7, r5
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	e009      	b.n	8008c78 <d_print_comp_inner+0x193c>
 8008c64:	460b      	mov	r3, r1
 8008c66:	3101      	adds	r1, #1
 8008c68:	42af      	cmp	r7, r5
 8008c6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008c6e:	54e6      	strb	r6, [r4, r3]
 8008c70:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008c74:	f43e ac24 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008c78:	29ff      	cmp	r1, #255	; 0xff
 8008c7a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008c7e:	d1f1      	bne.n	8008c64 <d_print_comp_inner+0x1928>
 8008c80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008c84:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008c88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	4798      	blx	r3
 8008c90:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008c94:	2101      	movs	r1, #1
 8008c96:	440b      	add	r3, r1
 8008c98:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e7e3      	b.n	8008c68 <d_print_comp_inner+0x192c>
 8008ca0:	686e      	ldr	r6, [r5, #4]
 8008ca2:	68af      	ldr	r7, [r5, #8]
 8008ca4:	4437      	add	r7, r6
 8008ca6:	42be      	cmp	r6, r7
 8008ca8:	f4be ac0a 	bcs.w	80074c0 <d_print_comp_inner+0x184>
 8008cac:	f04f 0800 	mov.w	r8, #0
 8008cb0:	e00d      	b.n	8008cce <d_print_comp_inner+0x1992>
 8008cb2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008cb6:	29ff      	cmp	r1, #255	; 0xff
 8008cb8:	d038      	beq.n	8008d2c <d_print_comp_inner+0x19f0>
 8008cba:	1c4b      	adds	r3, r1, #1
 8008cbc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008cc0:	5465      	strb	r5, [r4, r1]
 8008cc2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	42b7      	cmp	r7, r6
 8008cca:	f67e abf9 	bls.w	80074c0 <d_print_comp_inner+0x184>
 8008cce:	1bbb      	subs	r3, r7, r6
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	7835      	ldrb	r5, [r6, #0]
 8008cd4:	dded      	ble.n	8008cb2 <d_print_comp_inner+0x1976>
 8008cd6:	2d5f      	cmp	r5, #95	; 0x5f
 8008cd8:	d1eb      	bne.n	8008cb2 <d_print_comp_inner+0x1976>
 8008cda:	7872      	ldrb	r2, [r6, #1]
 8008cdc:	2a5f      	cmp	r2, #95	; 0x5f
 8008cde:	d1e8      	bne.n	8008cb2 <d_print_comp_inner+0x1976>
 8008ce0:	78b3      	ldrb	r3, [r6, #2]
 8008ce2:	2b55      	cmp	r3, #85	; 0x55
 8008ce4:	d001      	beq.n	8008cea <d_print_comp_inner+0x19ae>
 8008ce6:	4615      	mov	r5, r2
 8008ce8:	e7e3      	b.n	8008cb2 <d_print_comp_inner+0x1976>
 8008cea:	1cf3      	adds	r3, r6, #3
 8008cec:	429f      	cmp	r7, r3
 8008cee:	d9fa      	bls.n	8008ce6 <d_print_comp_inner+0x19aa>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	e006      	b.n	8008d02 <d_print_comp_inner+0x19c6>
 8008cf4:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8008cf8:	42bb      	cmp	r3, r7
 8008cfa:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8008cfe:	f000 8558 	beq.w	80097b2 <d_print_comp_inner+0x2476>
 8008d02:	4699      	mov	r9, r3
 8008d04:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008d08:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8008d0c:	b2d1      	uxtb	r1, r2
 8008d0e:	2909      	cmp	r1, #9
 8008d10:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8008d14:	d9f0      	bls.n	8008cf8 <d_print_comp_inner+0x19bc>
 8008d16:	f1be 0f05 	cmp.w	lr, #5
 8008d1a:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8008d1e:	d9e9      	bls.n	8008cf4 <d_print_comp_inner+0x19b8>
 8008d20:	2a05      	cmp	r2, #5
 8008d22:	f200 869a 	bhi.w	8009a5a <d_print_comp_inner+0x271e>
 8008d26:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8008d2a:	e7e5      	b.n	8008cf8 <d_print_comp_inner+0x19bc>
 8008d2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008d30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008d34:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008d38:	4620      	mov	r0, r4
 8008d3a:	4798      	blx	r3
 8008d3c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008d40:	2301      	movs	r3, #1
 8008d42:	441a      	add	r2, r3
 8008d44:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8008d48:	2100      	movs	r1, #0
 8008d4a:	e7b7      	b.n	8008cbc <d_print_comp_inner+0x1980>
 8008d4c:	4d27      	ldr	r5, [pc, #156]	; (8008dec <d_print_comp_inner+0x1ab0>)
 8008d4e:	4698      	mov	r8, r3
 8008d50:	1daf      	adds	r7, r5, #6
 8008d52:	e009      	b.n	8008d68 <d_print_comp_inner+0x1a2c>
 8008d54:	460b      	mov	r3, r1
 8008d56:	3101      	adds	r1, #1
 8008d58:	42af      	cmp	r7, r5
 8008d5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008d5e:	54e6      	strb	r6, [r4, r3]
 8008d60:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008d64:	f43e abac 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008d68:	29ff      	cmp	r1, #255	; 0xff
 8008d6a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008d6e:	d1f1      	bne.n	8008d54 <d_print_comp_inner+0x1a18>
 8008d70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008d74:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008d78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	4798      	blx	r3
 8008d80:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008d84:	2101      	movs	r1, #1
 8008d86:	440b      	add	r3, r1
 8008d88:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e7e3      	b.n	8008d58 <d_print_comp_inner+0x1a1c>
 8008d90:	4605      	mov	r5, r0
 8008d92:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8008d96:	f7ff ba6e 	b.w	8008276 <d_print_comp_inner+0xf3a>
 8008d9a:	4d15      	ldr	r5, [pc, #84]	; (8008df0 <d_print_comp_inner+0x1ab4>)
 8008d9c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008da0:	1d2f      	adds	r7, r5, #4
 8008da2:	e009      	b.n	8008db8 <d_print_comp_inner+0x1a7c>
 8008da4:	460b      	mov	r3, r1
 8008da6:	3101      	adds	r1, #1
 8008da8:	42bd      	cmp	r5, r7
 8008daa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008dae:	54e6      	strb	r6, [r4, r3]
 8008db0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008db4:	f43e ab84 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008db8:	29ff      	cmp	r1, #255	; 0xff
 8008dba:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008dbe:	d1f1      	bne.n	8008da4 <d_print_comp_inner+0x1a68>
 8008dc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008dc4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008dc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4798      	blx	r3
 8008dd0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	440b      	add	r3, r1
 8008dd8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008ddc:	2300      	movs	r3, #0
 8008dde:	e7e3      	b.n	8008da8 <d_print_comp_inner+0x1a6c>
 8008de0:	0801608c 	.word	0x0801608c
 8008de4:	08015fc8 	.word	0x08015fc8
 8008de8:	08015f80 	.word	0x08015f80
 8008dec:	080160ec 	.word	0x080160ec
 8008df0:	08016170 	.word	0x08016170
 8008df4:	f021 0760 	bic.w	r7, r1, #96	; 0x60
 8008df8:	f105 0208 	add.w	r2, r5, #8
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8008e02:	f001 fb5d 	bl	800a4c0 <d_print_function_type.isra.11>
 8008e06:	686a      	ldr	r2, [r5, #4]
 8008e08:	2a00      	cmp	r2, #0
 8008e0a:	f43e ab59 	beq.w	80074c0 <d_print_comp_inner+0x184>
 8008e0e:	4639      	mov	r1, r7
 8008e10:	4620      	mov	r0, r4
 8008e12:	f000 feab 	bl	8009b6c <d_print_comp>
 8008e16:	f7fe bb53 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008e1a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e1e:	f7fe be90 	b.w	8007b42 <d_print_comp_inner+0x806>
 8008e22:	4edc      	ldr	r6, [pc, #880]	; (8009194 <d_print_comp_inner+0x1e58>)
 8008e24:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008e28:	f106 0a05 	add.w	sl, r6, #5
 8008e2c:	f04f 0900 	mov.w	r9, #0
 8008e30:	e00a      	b.n	8008e48 <d_print_comp_inner+0x1b0c>
 8008e32:	460b      	mov	r3, r1
 8008e34:	3101      	adds	r1, #1
 8008e36:	4556      	cmp	r6, sl
 8008e38:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008e3c:	f804 8003 	strb.w	r8, [r4, r3]
 8008e40:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008e44:	f43e ae67 	beq.w	8007b16 <d_print_comp_inner+0x7da>
 8008e48:	29ff      	cmp	r1, #255	; 0xff
 8008e4a:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008e4e:	d1f0      	bne.n	8008e32 <d_print_comp_inner+0x1af6>
 8008e50:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008e54:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008e58:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	4798      	blx	r3
 8008e60:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008e64:	2101      	movs	r1, #1
 8008e66:	440b      	add	r3, r1
 8008e68:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e7e2      	b.n	8008e36 <d_print_comp_inner+0x1afa>
 8008e70:	6873      	ldr	r3, [r6, #4]
 8008e72:	49c9      	ldr	r1, [pc, #804]	; (8009198 <d_print_comp_inner+0x1e5c>)
 8008e74:	f8d3 8000 	ldr.w	r8, [r3]
 8008e78:	4640      	mov	r0, r8
 8008e7a:	f005 ffe5 	bl	800ee48 <strcmp>
 8008e7e:	782b      	ldrb	r3, [r5, #0]
 8008e80:	b910      	cbnz	r0, 8008e88 <d_print_comp_inner+0x1b4c>
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	f000 84db 	beq.w	800983e <d_print_comp_inner+0x2502>
 8008e88:	2b37      	cmp	r3, #55	; 0x37
 8008e8a:	f000 8585 	beq.w	8009998 <d_print_comp_inner+0x265c>
 8008e8e:	4639      	mov	r1, r7
 8008e90:	4620      	mov	r0, r4
 8008e92:	4632      	mov	r2, r6
 8008e94:	f001 fcde 	bl	800a854 <d_print_expr_op>
 8008e98:	49c0      	ldr	r1, [pc, #768]	; (800919c <d_print_comp_inner+0x1e60>)
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	f005 ffd4 	bl	800ee48 <strcmp>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f000 8257 	beq.w	8009354 <d_print_comp_inner+0x2018>
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	49bd      	ldr	r1, [pc, #756]	; (80091a0 <d_print_comp_inner+0x1e64>)
 8008eaa:	f005 ffcd 	bl	800ee48 <strcmp>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f47e ad46 	bne.w	8007942 <d_print_comp_inner+0x606>
 8008eb6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008eba:	2bff      	cmp	r3, #255	; 0xff
 8008ebc:	f000 8468 	beq.w	8009790 <d_print_comp_inner+0x2454>
 8008ec0:	1c58      	adds	r0, r3, #1
 8008ec2:	2628      	movs	r6, #40	; 0x28
 8008ec4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8008ec8:	4639      	mov	r1, r7
 8008eca:	54e6      	strb	r6, [r4, r3]
 8008ecc:	462a      	mov	r2, r5
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008ed4:	f000 fe4a 	bl	8009b6c <d_print_comp>
 8008ed8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008edc:	29ff      	cmp	r1, #255	; 0xff
 8008ede:	f000 83d6 	beq.w	800968e <d_print_comp_inner+0x2352>
 8008ee2:	1c4a      	adds	r2, r1, #1
 8008ee4:	2329      	movs	r3, #41	; 0x29
 8008ee6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008eea:	5463      	strb	r3, [r4, r1]
 8008eec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008ef0:	f7fe bae6 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008ef4:	4eab      	ldr	r6, [pc, #684]	; (80091a4 <d_print_comp_inner+0x1e68>)
 8008ef6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008efa:	f106 0a02 	add.w	sl, r6, #2
 8008efe:	e00a      	b.n	8008f16 <d_print_comp_inner+0x1bda>
 8008f00:	460b      	mov	r3, r1
 8008f02:	3101      	adds	r1, #1
 8008f04:	4556      	cmp	r6, sl
 8008f06:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008f0a:	f804 8003 	strb.w	r8, [r4, r3]
 8008f0e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008f12:	f43f ab86 	beq.w	8008622 <d_print_comp_inner+0x12e6>
 8008f16:	29ff      	cmp	r1, #255	; 0xff
 8008f18:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008f1c:	d1f0      	bne.n	8008f00 <d_print_comp_inner+0x1bc4>
 8008f1e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008f22:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008f26:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4798      	blx	r3
 8008f2e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008f32:	2101      	movs	r1, #1
 8008f34:	440b      	add	r3, r1
 8008f36:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e7e2      	b.n	8008f04 <d_print_comp_inner+0x1bc8>
 8008f3e:	6852      	ldr	r2, [r2, #4]
 8008f40:	7c16      	ldrb	r6, [r2, #16]
 8008f42:	2e00      	cmp	r6, #0
 8008f44:	f43e ae56 	beq.w	8007bf4 <d_print_comp_inner+0x8b8>
 8008f48:	2e06      	cmp	r6, #6
 8008f4a:	f240 8357 	bls.w	80095fc <d_print_comp_inner+0x22c0>
 8008f4e:	2e07      	cmp	r6, #7
 8008f50:	f47e ae50 	bne.w	8007bf4 <d_print_comp_inner+0x8b8>
 8008f54:	68aa      	ldr	r2, [r5, #8]
 8008f56:	7811      	ldrb	r1, [r2, #0]
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	f47e ae4b 	bne.w	8007bf4 <d_print_comp_inner+0x8b8>
 8008f5e:	6891      	ldr	r1, [r2, #8]
 8008f60:	2901      	cmp	r1, #1
 8008f62:	f47e ae47 	bne.w	8007bf4 <d_print_comp_inner+0x8b8>
 8008f66:	2b3b      	cmp	r3, #59	; 0x3b
 8008f68:	f47e ae44 	bne.w	8007bf4 <d_print_comp_inner+0x8b8>
 8008f6c:	6853      	ldr	r3, [r2, #4]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b30      	cmp	r3, #48	; 0x30
 8008f72:	f000 85bb 	beq.w	8009aec <d_print_comp_inner+0x27b0>
 8008f76:	2b31      	cmp	r3, #49	; 0x31
 8008f78:	f47e ae3c 	bne.w	8007bf4 <d_print_comp_inner+0x8b8>
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	498a      	ldr	r1, [pc, #552]	; (80091a8 <d_print_comp_inner+0x1e6c>)
 8008f80:	f7fd ff1c 	bl	8006dbc <d_append_buffer>
 8008f84:	f7fe ba9c 	b.w	80074c0 <d_print_comp_inner+0x184>
 8008f88:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 8008f8c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8008f90:	f1bc 0f00 	cmp.w	ip, #0
 8008f94:	dd14      	ble.n	8008fc0 <d_print_comp_inner+0x1c84>
 8008f96:	680b      	ldr	r3, [r1, #0]
 8008f98:	4298      	cmp	r0, r3
 8008f9a:	f000 855c 	beq.w	8009a56 <d_print_comp_inner+0x271a>
 8008f9e:	f101 0208 	add.w	r2, r1, #8
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	46a6      	mov	lr, r4
 8008fa6:	e007      	b.n	8008fb8 <d_print_comp_inner+0x1c7c>
 8008fa8:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8008fac:	4690      	mov	r8, r2
 8008fae:	42a0      	cmp	r0, r4
 8008fb0:	f102 0208 	add.w	r2, r2, #8
 8008fb4:	f000 8270 	beq.w	8009498 <d_print_comp_inner+0x215c>
 8008fb8:	3301      	adds	r3, #1
 8008fba:	459c      	cmp	ip, r3
 8008fbc:	d1f4      	bne.n	8008fa8 <d_print_comp_inner+0x1c6c>
 8008fbe:	4674      	mov	r4, lr
 8008fc0:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8008fc4:	459c      	cmp	ip, r3
 8008fc6:	f280 84f5 	bge.w	80099b4 <d_print_comp_inner+0x2678>
 8008fca:	f10c 0301 	add.w	r3, ip, #1
 8008fce:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8008fd2:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8008fd6:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 8008fda:	f841 003c 	str.w	r0, [r1, ip, lsl #3]
 8008fde:	f103 0e04 	add.w	lr, r3, #4
 8008fe2:	f1b8 0f00 	cmp.w	r8, #0
 8008fe6:	d021      	beq.n	800902c <d_print_comp_inner+0x1cf0>
 8008fe8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8008fec:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8008ff0:	4299      	cmp	r1, r3
 8008ff2:	f340 84df 	ble.w	80099b4 <d_print_comp_inner+0x2678>
 8008ff6:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8008ffa:	4681      	mov	r9, r0
 8008ffc:	e002      	b.n	8009004 <d_print_comp_inner+0x1cc8>
 8008ffe:	4299      	cmp	r1, r3
 8009000:	f000 84d6 	beq.w	80099b0 <d_print_comp_inner+0x2674>
 8009004:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 8009008:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800900c:	4462      	add	r2, ip
 800900e:	6050      	str	r0, [r2, #4]
 8009010:	f8ce 2000 	str.w	r2, [lr]
 8009014:	f8d8 8000 	ldr.w	r8, [r8]
 8009018:	f10c 0c08 	add.w	ip, ip, #8
 800901c:	3301      	adds	r3, #1
 800901e:	4696      	mov	lr, r2
 8009020:	f1b8 0f00 	cmp.w	r8, #0
 8009024:	d1eb      	bne.n	8008ffe <d_print_comp_inner+0x1cc2>
 8009026:	4648      	mov	r0, r9
 8009028:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 800902c:	f04f 0800 	mov.w	r8, #0
 8009030:	1d01      	adds	r1, r0, #4
 8009032:	f8ce 8000 	str.w	r8, [lr]
 8009036:	4620      	mov	r0, r4
 8009038:	f7fe f8da 	bl	80071f0 <d_lookup_template_argument.isra.6>
 800903c:	2800      	cmp	r0, #0
 800903e:	f040 8246 	bne.w	80094ce <d_print_comp_inner+0x2192>
 8009042:	f7fe ba45 	b.w	80074d0 <d_print_comp_inner+0x194>
 8009046:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800904a:	29ff      	cmp	r1, #255	; 0xff
 800904c:	f000 8411 	beq.w	8009872 <d_print_comp_inner+0x2536>
 8009050:	2220      	movs	r2, #32
 8009052:	1c4b      	adds	r3, r1, #1
 8009054:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8009058:	5462      	strb	r2, [r4, r1]
 800905a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800905e:	f7ff ba30 	b.w	80084c2 <d_print_comp_inner+0x1186>
 8009062:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009066:	29ff      	cmp	r1, #255	; 0xff
 8009068:	f000 843d 	beq.w	80098e6 <d_print_comp_inner+0x25aa>
 800906c:	2220      	movs	r2, #32
 800906e:	1c4b      	adds	r3, r1, #1
 8009070:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8009074:	5462      	strb	r2, [r4, r1]
 8009076:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800907a:	f7ff ba0c 	b.w	8008496 <d_print_comp_inner+0x115a>
 800907e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009082:	29ff      	cmp	r1, #255	; 0xff
 8009084:	f000 8444 	beq.w	8009910 <d_print_comp_inner+0x25d4>
 8009088:	1c4a      	adds	r2, r1, #1
 800908a:	235b      	movs	r3, #91	; 0x5b
 800908c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009090:	5463      	strb	r3, [r4, r1]
 8009092:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009096:	4639      	mov	r1, r7
 8009098:	68aa      	ldr	r2, [r5, #8]
 800909a:	4620      	mov	r0, r4
 800909c:	f000 fd66 	bl	8009b6c <d_print_comp>
 80090a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80090a4:	29ff      	cmp	r1, #255	; 0xff
 80090a6:	f000 832f 	beq.w	8009708 <d_print_comp_inner+0x23cc>
 80090aa:	235d      	movs	r3, #93	; 0x5d
 80090ac:	1c4a      	adds	r2, r1, #1
 80090ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80090b2:	5463      	strb	r3, [r4, r1]
 80090b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80090b8:	f7fe ba02 	b.w	80074c0 <d_print_comp_inner+0x184>
 80090bc:	f04f 0800 	mov.w	r8, #0
 80090c0:	f804 8006 	strb.w	r8, [r4, r6]
 80090c4:	4631      	mov	r1, r6
 80090c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80090ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80090ce:	4620      	mov	r0, r4
 80090d0:	4798      	blx	r3
 80090d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80090d6:	4646      	mov	r6, r8
 80090d8:	3301      	adds	r3, #1
 80090da:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80090de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80090e2:	f7fe bce0 	b.w	8007aa6 <d_print_comp_inner+0x76a>
 80090e6:	4660      	mov	r0, ip
 80090e8:	4688      	mov	r8, r1
 80090ea:	f7ff b8c4 	b.w	8008276 <d_print_comp_inner+0xf3a>
 80090ee:	686a      	ldr	r2, [r5, #4]
 80090f0:	4639      	mov	r1, r7
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fd3a 	bl	8009b6c <d_print_comp>
 80090f8:	f7fe b9e2 	b.w	80074c0 <d_print_comp_inner+0x184>
 80090fc:	4632      	mov	r2, r6
 80090fe:	f001 fba9 	bl	800a854 <d_print_expr_op>
 8009102:	f7fe bc1e 	b.w	8007942 <d_print_comp_inner+0x606>
 8009106:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800910a:	e008      	b.n	800911e <d_print_comp_inner+0x1de2>
 800910c:	6880      	ldr	r0, [r0, #8]
 800910e:	3b01      	subs	r3, #1
 8009110:	2800      	cmp	r0, #0
 8009112:	f43e a9dd 	beq.w	80074d0 <d_print_comp_inner+0x194>
 8009116:	7802      	ldrb	r2, [r0, #0]
 8009118:	2a2f      	cmp	r2, #47	; 0x2f
 800911a:	f47e a9d9 	bne.w	80074d0 <d_print_comp_inner+0x194>
 800911e:	2b00      	cmp	r3, #0
 8009120:	dcf4      	bgt.n	800910c <d_print_comp_inner+0x1dd0>
 8009122:	f47e a9d5 	bne.w	80074d0 <d_print_comp_inner+0x194>
 8009126:	6840      	ldr	r0, [r0, #4]
 8009128:	2800      	cmp	r0, #0
 800912a:	f47f aaf2 	bne.w	8008712 <d_print_comp_inner+0x13d6>
 800912e:	f7fe b9cf 	b.w	80074d0 <d_print_comp_inner+0x194>
 8009132:	29ff      	cmp	r1, #255	; 0xff
 8009134:	f000 83ae 	beq.w	8009894 <d_print_comp_inner+0x2558>
 8009138:	232d      	movs	r3, #45	; 0x2d
 800913a:	1c4a      	adds	r2, r1, #1
 800913c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009140:	5463      	strb	r3, [r4, r1]
 8009142:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009146:	f7fe bd76 	b.w	8007c36 <d_print_comp_inner+0x8fa>
 800914a:	2500      	movs	r5, #0
 800914c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009150:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009154:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009158:	4620      	mov	r0, r4
 800915a:	4798      	blx	r3
 800915c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009160:	2201      	movs	r2, #1
 8009162:	4413      	add	r3, r2
 8009164:	4629      	mov	r1, r5
 8009166:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800916a:	f7fe bc88 	b.w	8007a7e <d_print_comp_inner+0x742>
 800916e:	2500      	movs	r5, #0
 8009170:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009174:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009178:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800917c:	4620      	mov	r0, r4
 800917e:	4798      	blx	r3
 8009180:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009184:	2201      	movs	r2, #1
 8009186:	4413      	add	r3, r2
 8009188:	4629      	mov	r1, r5
 800918a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800918e:	f7ff bb20 	b.w	80087d2 <d_print_comp_inner+0x1496>
 8009192:	bf00      	nop
 8009194:	080160dc 	.word	0x080160dc
 8009198:	08016110 	.word	0x08016110
 800919c:	08016114 	.word	0x08016114
 80091a0:	0801642c 	.word	0x0801642c
 80091a4:	08015f6c 	.word	0x08015f6c
 80091a8:	08016148 	.word	0x08016148
 80091ac:	2600      	movs	r6, #0
 80091ae:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80091b2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80091b6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80091ba:	4798      	blx	r3
 80091bc:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80091c0:	2301      	movs	r3, #1
 80091c2:	441a      	add	r2, r3
 80091c4:	4631      	mov	r1, r6
 80091c6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80091ca:	f7fe bb83 	b.w	80078d4 <d_print_comp_inner+0x598>
 80091ce:	2600      	movs	r6, #0
 80091d0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80091d4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80091d8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80091dc:	4798      	blx	r3
 80091de:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80091e2:	2201      	movs	r2, #1
 80091e4:	4413      	add	r3, r2
 80091e6:	4631      	mov	r1, r6
 80091e8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80091ec:	f7ff b887 	b.w	80082fe <d_print_comp_inner+0xfc2>
 80091f0:	2500      	movs	r5, #0
 80091f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091fa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80091fe:	4620      	mov	r0, r4
 8009200:	4798      	blx	r3
 8009202:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009206:	2201      	movs	r2, #1
 8009208:	4413      	add	r3, r2
 800920a:	4629      	mov	r1, r5
 800920c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009210:	f7ff bb22 	b.w	8008858 <d_print_comp_inner+0x151c>
 8009214:	2500      	movs	r5, #0
 8009216:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800921a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800921e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009222:	4620      	mov	r0, r4
 8009224:	4798      	blx	r3
 8009226:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800922a:	2201      	movs	r2, #1
 800922c:	4413      	add	r3, r2
 800922e:	4629      	mov	r1, r5
 8009230:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009234:	e40c      	b.n	8008a50 <d_print_comp_inner+0x1714>
 8009236:	2500      	movs	r5, #0
 8009238:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800923c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009240:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009244:	4620      	mov	r0, r4
 8009246:	4798      	blx	r3
 8009248:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800924c:	2201      	movs	r2, #1
 800924e:	4413      	add	r3, r2
 8009250:	4629      	mov	r1, r5
 8009252:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009256:	f7ff bbd4 	b.w	8008a02 <d_print_comp_inner+0x16c6>
 800925a:	2500      	movs	r5, #0
 800925c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009260:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009264:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009268:	4620      	mov	r0, r4
 800926a:	4798      	blx	r3
 800926c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009270:	2201      	movs	r2, #1
 8009272:	4413      	add	r3, r2
 8009274:	4629      	mov	r1, r5
 8009276:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800927a:	f7ff bba8 	b.w	80089ce <d_print_comp_inner+0x1692>
 800927e:	2301      	movs	r3, #1
 8009280:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8009284:	f7fe b91c 	b.w	80074c0 <d_print_comp_inner+0x184>
 8009288:	220d      	movs	r2, #13
 800928a:	49d5      	ldr	r1, [pc, #852]	; (80095e0 <d_print_comp_inner+0x22a4>)
 800928c:	4620      	mov	r0, r4
 800928e:	f7fd fd95 	bl	8006dbc <d_append_buffer>
 8009292:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009296:	a804      	add	r0, sp, #16
 8009298:	3201      	adds	r2, #1
 800929a:	49d2      	ldr	r1, [pc, #840]	; (80095e4 <d_print_comp_inner+0x22a8>)
 800929c:	f00a fa94 	bl	80137c8 <siprintf>
 80092a0:	a804      	add	r0, sp, #16
 80092a2:	f005 fddb 	bl	800ee5c <strlen>
 80092a6:	b320      	cbz	r0, 80092f2 <d_print_comp_inner+0x1fb6>
 80092a8:	ad04      	add	r5, sp, #16
 80092aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80092ae:	eb05 0a00 	add.w	sl, r5, r0
 80092b2:	f04f 0900 	mov.w	r9, #0
 80092b6:	e008      	b.n	80092ca <d_print_comp_inner+0x1f8e>
 80092b8:	460b      	mov	r3, r1
 80092ba:	3101      	adds	r1, #1
 80092bc:	45aa      	cmp	sl, r5
 80092be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80092c2:	54e6      	strb	r6, [r4, r3]
 80092c4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80092c8:	d013      	beq.n	80092f2 <d_print_comp_inner+0x1fb6>
 80092ca:	29ff      	cmp	r1, #255	; 0xff
 80092cc:	f815 6b01 	ldrb.w	r6, [r5], #1
 80092d0:	d1f2      	bne.n	80092b8 <d_print_comp_inner+0x1f7c>
 80092d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80092d6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80092da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80092de:	4620      	mov	r0, r4
 80092e0:	4798      	blx	r3
 80092e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80092e6:	2101      	movs	r1, #1
 80092e8:	440b      	add	r3, r1
 80092ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80092ee:	2300      	movs	r3, #0
 80092f0:	e7e4      	b.n	80092bc <d_print_comp_inner+0x1f80>
 80092f2:	2203      	movs	r2, #3
 80092f4:	49bc      	ldr	r1, [pc, #752]	; (80095e8 <d_print_comp_inner+0x22ac>)
 80092f6:	4620      	mov	r0, r4
 80092f8:	f7fd fd60 	bl	8006dbc <d_append_buffer>
 80092fc:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8009300:	f7ff b996 	b.w	8008630 <d_print_comp_inner+0x12f4>
 8009304:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8009308:	aa14      	add	r2, sp, #80	; 0x50
 800930a:	f842 1d40 	str.w	r1, [r2, #-64]!
 800930e:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8009312:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8009316:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 800931a:	686a      	ldr	r2, [r5, #4]
 800931c:	4639      	mov	r1, r7
 800931e:	4620      	mov	r0, r4
 8009320:	9306      	str	r3, [sp, #24]
 8009322:	9607      	str	r6, [sp, #28]
 8009324:	9505      	str	r5, [sp, #20]
 8009326:	f000 fc21 	bl	8009b6c <d_print_comp>
 800932a:	9b04      	ldr	r3, [sp, #16]
 800932c:	9e06      	ldr	r6, [sp, #24]
 800932e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8009332:	2e00      	cmp	r6, #0
 8009334:	f47e a8c4 	bne.w	80074c0 <d_print_comp_inner+0x184>
 8009338:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800933c:	29ff      	cmp	r1, #255	; 0xff
 800933e:	f000 8349 	beq.w	80099d4 <d_print_comp_inner+0x2698>
 8009342:	2320      	movs	r3, #32
 8009344:	1c4a      	adds	r2, r1, #1
 8009346:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800934a:	5463      	strb	r3, [r4, r1]
 800934c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009350:	f7fe bd10 	b.w	8007d74 <d_print_comp_inner+0xa38>
 8009354:	462a      	mov	r2, r5
 8009356:	4639      	mov	r1, r7
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fc07 	bl	8009b6c <d_print_comp>
 800935e:	f7fe b8af 	b.w	80074c0 <d_print_comp_inner+0x184>
 8009362:	2500      	movs	r5, #0
 8009364:	4619      	mov	r1, r3
 8009366:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800936a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800936e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009372:	4620      	mov	r0, r4
 8009374:	4798      	blx	r3
 8009376:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800937a:	2201      	movs	r2, #1
 800937c:	4411      	add	r1, r2
 800937e:	462b      	mov	r3, r5
 8009380:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 8009384:	f7fe bb6a 	b.w	8007a5c <d_print_comp_inner+0x720>
 8009388:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 800938c:	6842      	ldr	r2, [r0, #4]
 800938e:	ab14      	add	r3, sp, #80	; 0x50
 8009390:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8009394:	f843 1d40 	str.w	r1, [r3, #-64]!
 8009398:	2100      	movs	r1, #0
 800939a:	9505      	str	r5, [sp, #20]
 800939c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80093a0:	9007      	str	r0, [sp, #28]
 80093a2:	9106      	str	r1, [sp, #24]
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	f47e af72 	bne.w	800828e <d_print_comp_inner+0xf52>
 80093aa:	f7fe bf6f 	b.w	800828c <d_print_comp_inner+0xf50>
 80093ae:	2500      	movs	r5, #0
 80093b0:	4619      	mov	r1, r3
 80093b2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80093b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80093ba:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80093be:	4620      	mov	r0, r4
 80093c0:	4798      	blx	r3
 80093c2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80093c6:	2101      	movs	r1, #1
 80093c8:	440a      	add	r2, r1
 80093ca:	462b      	mov	r3, r5
 80093cc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80093d0:	f7ff b87b 	b.w	80084ca <d_print_comp_inner+0x118e>
 80093d4:	2600      	movs	r6, #0
 80093d6:	4619      	mov	r1, r3
 80093d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80093dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80093e0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80093e4:	4620      	mov	r0, r4
 80093e6:	4798      	blx	r3
 80093e8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80093ec:	2101      	movs	r1, #1
 80093ee:	440a      	add	r2, r1
 80093f0:	4633      	mov	r3, r6
 80093f2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80093f6:	f7ff b852 	b.w	800849e <d_print_comp_inner+0x1162>
 80093fa:	2200      	movs	r2, #0
 80093fc:	4619      	mov	r1, r3
 80093fe:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8009402:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009406:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800940a:	4620      	mov	r0, r4
 800940c:	4798      	blx	r3
 800940e:	2329      	movs	r3, #41	; 0x29
 8009410:	7023      	strb	r3, [r4, #0]
 8009412:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009416:	782a      	ldrb	r2, [r5, #0]
 8009418:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800941c:	2101      	movs	r1, #1
 800941e:	3301      	adds	r3, #1
 8009420:	2a3c      	cmp	r2, #60	; 0x3c
 8009422:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009426:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800942a:	f47e ac04 	bne.w	8007c36 <d_print_comp_inner+0x8fa>
 800942e:	e683      	b.n	8009138 <d_print_comp_inner+0x1dfc>
 8009430:	4648      	mov	r0, r9
 8009432:	496e      	ldr	r1, [pc, #440]	; (80095ec <d_print_comp_inner+0x22b0>)
 8009434:	f005 fd08 	bl	800ee48 <strcmp>
 8009438:	2800      	cmp	r0, #0
 800943a:	f040 8214 	bne.w	8009866 <d_print_comp_inner+0x252a>
 800943e:	68ab      	ldr	r3, [r5, #8]
 8009440:	4639      	mov	r1, r7
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	4620      	mov	r0, r4
 8009446:	f001 fa43 	bl	800a8d0 <d_print_subexpr>
 800944a:	f7fe b821 	b.w	8007490 <d_print_comp_inner+0x154>
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009456:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800945a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800945e:	4620      	mov	r0, r4
 8009460:	4798      	blx	r3
 8009462:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009466:	2201      	movs	r2, #1
 8009468:	4413      	add	r3, r2
 800946a:	4641      	mov	r1, r8
 800946c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009470:	f7fe bbc6 	b.w	8007c00 <d_print_comp_inner+0x8c4>
 8009474:	2500      	movs	r5, #0
 8009476:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800947a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800947e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009482:	4620      	mov	r0, r4
 8009484:	4798      	blx	r3
 8009486:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800948a:	2201      	movs	r2, #1
 800948c:	4413      	add	r3, r2
 800948e:	4629      	mov	r1, r5
 8009490:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009494:	f7ff bbd2 	b.w	8008c3c <d_print_comp_inner+0x1900>
 8009498:	4674      	mov	r4, lr
 800949a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 800949e:	b389      	cbz	r1, 8009504 <d_print_comp_inner+0x21c8>
 80094a0:	680a      	ldr	r2, [r1, #0]
 80094a2:	4290      	cmp	r0, r2
 80094a4:	d00a      	beq.n	80094bc <d_print_comp_inner+0x2180>
 80094a6:	460b      	mov	r3, r1
 80094a8:	e004      	b.n	80094b4 <d_print_comp_inner+0x2178>
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	b353      	cbz	r3, 8009504 <d_print_comp_inner+0x21c8>
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	4290      	cmp	r0, r2
 80094b2:	d003      	beq.n	80094bc <d_print_comp_inner+0x2180>
 80094b4:	4295      	cmp	r5, r2
 80094b6:	d1f8      	bne.n	80094aa <d_print_comp_inner+0x216e>
 80094b8:	4299      	cmp	r1, r3
 80094ba:	d0f6      	beq.n	80094aa <d_print_comp_inner+0x216e>
 80094bc:	1d01      	adds	r1, r0, #4
 80094be:	4620      	mov	r0, r4
 80094c0:	f7fd fe96 	bl	80071f0 <d_lookup_template_argument.isra.6>
 80094c4:	f04f 0800 	mov.w	r8, #0
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f43e a801 	beq.w	80074d0 <d_print_comp_inner+0x194>
 80094ce:	7803      	ldrb	r3, [r0, #0]
 80094d0:	2b2f      	cmp	r3, #47	; 0x2f
 80094d2:	f47e aec4 	bne.w	800825e <d_print_comp_inner+0xf22>
 80094d6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80094da:	e008      	b.n	80094ee <d_print_comp_inner+0x21b2>
 80094dc:	6880      	ldr	r0, [r0, #8]
 80094de:	3b01      	subs	r3, #1
 80094e0:	2800      	cmp	r0, #0
 80094e2:	f43d aff0 	beq.w	80074c6 <d_print_comp_inner+0x18a>
 80094e6:	7802      	ldrb	r2, [r0, #0]
 80094e8:	2a2f      	cmp	r2, #47	; 0x2f
 80094ea:	f47d afec 	bne.w	80074c6 <d_print_comp_inner+0x18a>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dcf4      	bgt.n	80094dc <d_print_comp_inner+0x21a0>
 80094f2:	f47d afe8 	bne.w	80074c6 <d_print_comp_inner+0x18a>
 80094f6:	6840      	ldr	r0, [r0, #4]
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f43d afe4 	beq.w	80074c6 <d_print_comp_inner+0x18a>
 80094fe:	7803      	ldrb	r3, [r0, #0]
 8009500:	f7fe bead 	b.w	800825e <d_print_comp_inner+0xf22>
 8009504:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009508:	1d01      	adds	r1, r0, #4
 800950a:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 800950e:	4620      	mov	r0, r4
 8009510:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8009514:	f7fd fe6c 	bl	80071f0 <d_lookup_template_argument.isra.6>
 8009518:	2800      	cmp	r0, #0
 800951a:	f43d afd7 	beq.w	80074cc <d_print_comp_inner+0x190>
 800951e:	f04f 0801 	mov.w	r8, #1
 8009522:	e7d4      	b.n	80094ce <d_print_comp_inner+0x2192>
 8009524:	7809      	ldrb	r1, [r1, #0]
 8009526:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
 800952a:	2801      	cmp	r0, #1
 800952c:	d903      	bls.n	8009536 <d_print_comp_inner+0x21fa>
 800952e:	3972      	subs	r1, #114	; 0x72
 8009530:	2901      	cmp	r1, #1
 8009532:	f63d af6e 	bhi.w	8007412 <d_print_comp_inner+0xd6>
 8009536:	4639      	mov	r1, r7
 8009538:	4620      	mov	r0, r4
 800953a:	f001 f98b 	bl	800a854 <d_print_expr_op>
 800953e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009542:	29ff      	cmp	r1, #255	; 0xff
 8009544:	f000 8263 	beq.w	8009a0e <d_print_comp_inner+0x26d2>
 8009548:	1c4a      	adds	r2, r1, #1
 800954a:	233c      	movs	r3, #60	; 0x3c
 800954c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009550:	5463      	strb	r3, [r4, r1]
 8009552:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009556:	68ab      	ldr	r3, [r5, #8]
 8009558:	4639      	mov	r1, r7
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	4620      	mov	r0, r4
 800955e:	f000 fb05 	bl	8009b6c <d_print_comp>
 8009562:	2202      	movs	r2, #2
 8009564:	4922      	ldr	r1, [pc, #136]	; (80095f0 <d_print_comp_inner+0x22b4>)
 8009566:	4620      	mov	r0, r4
 8009568:	f7fd fc28 	bl	8006dbc <d_append_buffer>
 800956c:	68ab      	ldr	r3, [r5, #8]
 800956e:	4639      	mov	r1, r7
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	4620      	mov	r0, r4
 8009574:	f000 fafa 	bl	8009b6c <d_print_comp>
 8009578:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800957c:	29ff      	cmp	r1, #255	; 0xff
 800957e:	f000 81d8 	beq.w	8009932 <d_print_comp_inner+0x25f6>
 8009582:	2329      	movs	r3, #41	; 0x29
 8009584:	1c4a      	adds	r2, r1, #1
 8009586:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800958a:	5463      	strb	r3, [r4, r1]
 800958c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009590:	f7fd bf96 	b.w	80074c0 <d_print_comp_inner+0x184>
 8009594:	4917      	ldr	r1, [pc, #92]	; (80095f4 <d_print_comp_inner+0x22b8>)
 8009596:	6870      	ldr	r0, [r6, #4]
 8009598:	f00a f93a 	bl	8013810 <strncmp>
 800959c:	2800      	cmp	r0, #0
 800959e:	f47e af6e 	bne.w	800847e <d_print_comp_inner+0x1142>
 80095a2:	68aa      	ldr	r2, [r5, #8]
 80095a4:	4639      	mov	r1, r7
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 fae0 	bl	8009b6c <d_print_comp>
 80095ac:	2202      	movs	r2, #2
 80095ae:	4912      	ldr	r1, [pc, #72]	; (80095f8 <d_print_comp_inner+0x22bc>)
 80095b0:	4620      	mov	r0, r4
 80095b2:	f7fd fc03 	bl	8006dbc <d_append_buffer>
 80095b6:	f7fe bf8e 	b.w	80084d6 <d_print_comp_inner+0x119a>
 80095ba:	2600      	movs	r6, #0
 80095bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80095c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80095c4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80095c8:	4620      	mov	r0, r4
 80095ca:	4798      	blx	r3
 80095cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80095d0:	2201      	movs	r2, #1
 80095d2:	4413      	add	r3, r2
 80095d4:	4631      	mov	r1, r6
 80095d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80095da:	f7ff b81c 	b.w	8008616 <d_print_comp_inner+0x12da>
 80095de:	bf00      	nop
 80095e0:	08015f70 	.word	0x08015f70
 80095e4:	08015f80 	.word	0x08015f80
 80095e8:	08015f84 	.word	0x08015f84
 80095ec:	0801611c 	.word	0x0801611c
 80095f0:	08016118 	.word	0x08016118
 80095f4:	08015f88 	.word	0x08015f88
 80095f8:	08015f90 	.word	0x08015f90
 80095fc:	68aa      	ldr	r2, [r5, #8]
 80095fe:	f892 8000 	ldrb.w	r8, [r2]
 8009602:	f1b8 0f00 	cmp.w	r8, #0
 8009606:	f47e aaf5 	bne.w	8007bf4 <d_print_comp_inner+0x8b8>
 800960a:	2b3c      	cmp	r3, #60	; 0x3c
 800960c:	f000 81f3 	beq.w	80099f6 <d_print_comp_inner+0x26ba>
 8009610:	68aa      	ldr	r2, [r5, #8]
 8009612:	4639      	mov	r1, r7
 8009614:	4620      	mov	r0, r4
 8009616:	3e02      	subs	r6, #2
 8009618:	f000 faa8 	bl	8009b6c <d_print_comp>
 800961c:	2e04      	cmp	r6, #4
 800961e:	f63d af4f 	bhi.w	80074c0 <d_print_comp_inner+0x184>
 8009622:	e8df f006 	tbb	[pc, r6]
 8009626:	1826      	.short	0x1826
 8009628:	0a11      	.short	0x0a11
 800962a:	03          	.byte	0x03
 800962b:	00          	.byte	0x00
 800962c:	4620      	mov	r0, r4
 800962e:	2203      	movs	r2, #3
 8009630:	49e3      	ldr	r1, [pc, #908]	; (80099c0 <d_print_comp_inner+0x2684>)
 8009632:	f7fd fbc3 	bl	8006dbc <d_append_buffer>
 8009636:	f7fd bf43 	b.w	80074c0 <d_print_comp_inner+0x184>
 800963a:	4620      	mov	r0, r4
 800963c:	2202      	movs	r2, #2
 800963e:	49e1      	ldr	r1, [pc, #900]	; (80099c4 <d_print_comp_inner+0x2688>)
 8009640:	f7fd fbbc 	bl	8006dbc <d_append_buffer>
 8009644:	f7fd bf3c 	b.w	80074c0 <d_print_comp_inner+0x184>
 8009648:	4620      	mov	r0, r4
 800964a:	2202      	movs	r2, #2
 800964c:	49de      	ldr	r1, [pc, #888]	; (80099c8 <d_print_comp_inner+0x268c>)
 800964e:	f7fd fbb5 	bl	8006dbc <d_append_buffer>
 8009652:	f7fd bf35 	b.w	80074c0 <d_print_comp_inner+0x184>
 8009656:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800965a:	29ff      	cmp	r1, #255	; 0xff
 800965c:	f000 825f 	beq.w	8009b1e <d_print_comp_inner+0x27e2>
 8009660:	236c      	movs	r3, #108	; 0x6c
 8009662:	1c4a      	adds	r2, r1, #1
 8009664:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009668:	5463      	strb	r3, [r4, r1]
 800966a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800966e:	f7fd bf27 	b.w	80074c0 <d_print_comp_inner+0x184>
 8009672:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009676:	29ff      	cmp	r1, #255	; 0xff
 8009678:	f000 8263 	beq.w	8009b42 <d_print_comp_inner+0x2806>
 800967c:	2375      	movs	r3, #117	; 0x75
 800967e:	1c4a      	adds	r2, r1, #1
 8009680:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009684:	5463      	strb	r3, [r4, r1]
 8009686:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800968a:	f7fd bf19 	b.w	80074c0 <d_print_comp_inner+0x184>
 800968e:	2500      	movs	r5, #0
 8009690:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009694:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009698:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800969c:	4620      	mov	r0, r4
 800969e:	4798      	blx	r3
 80096a0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80096a4:	2201      	movs	r2, #1
 80096a6:	4413      	add	r3, r2
 80096a8:	4629      	mov	r1, r5
 80096aa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80096ae:	e419      	b.n	8008ee4 <d_print_comp_inner+0x1ba8>
 80096b0:	2600      	movs	r6, #0
 80096b2:	4619      	mov	r1, r3
 80096b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80096b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80096bc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80096c0:	4620      	mov	r0, r4
 80096c2:	4798      	blx	r3
 80096c4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80096c8:	2101      	movs	r1, #1
 80096ca:	440a      	add	r2, r1
 80096cc:	4633      	mov	r3, r6
 80096ce:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80096d2:	f7fe ba30 	b.w	8007b36 <d_print_comp_inner+0x7fa>
 80096d6:	6899      	ldr	r1, [r3, #8]
 80096d8:	2901      	cmp	r1, #1
 80096da:	f47d ae9e 	bne.w	800741a <d_print_comp_inner+0xde>
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	2b3e      	cmp	r3, #62	; 0x3e
 80096e4:	f47d ae99 	bne.w	800741a <d_print_comp_inner+0xde>
 80096e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80096ec:	29ff      	cmp	r1, #255	; 0xff
 80096ee:	f000 81eb 	beq.w	8009ac8 <d_print_comp_inner+0x278c>
 80096f2:	1c4a      	adds	r2, r1, #1
 80096f4:	2328      	movs	r3, #40	; 0x28
 80096f6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80096fa:	5463      	strb	r3, [r4, r1]
 80096fc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009700:	686a      	ldr	r2, [r5, #4]
 8009702:	68ae      	ldr	r6, [r5, #8]
 8009704:	f7fd be89 	b.w	800741a <d_print_comp_inner+0xde>
 8009708:	2500      	movs	r5, #0
 800970a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800970e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009712:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009716:	4620      	mov	r0, r4
 8009718:	4798      	blx	r3
 800971a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800971e:	4629      	mov	r1, r5
 8009720:	3301      	adds	r3, #1
 8009722:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009726:	e4c0      	b.n	80090aa <d_print_comp_inner+0x1d6e>
 8009728:	2500      	movs	r5, #0
 800972a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800972e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009732:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009736:	4620      	mov	r0, r4
 8009738:	4798      	blx	r3
 800973a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800973e:	4629      	mov	r1, r5
 8009740:	3301      	adds	r3, #1
 8009742:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009746:	f7ff b8c9 	b.w	80088dc <d_print_comp_inner+0x15a0>
 800974a:	2600      	movs	r6, #0
 800974c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009750:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009754:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009758:	4620      	mov	r0, r4
 800975a:	4798      	blx	r3
 800975c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009760:	4631      	mov	r1, r6
 8009762:	3301      	adds	r3, #1
 8009764:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009768:	f7fe b8e4 	b.w	8007934 <d_print_comp_inner+0x5f8>
 800976c:	f04f 0800 	mov.w	r8, #0
 8009770:	4619      	mov	r1, r3
 8009772:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009776:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800977a:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 800977e:	4798      	blx	r3
 8009780:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009784:	4643      	mov	r3, r8
 8009786:	3201      	adds	r2, #1
 8009788:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800978c:	f7fe b8bf 	b.w	800790e <d_print_comp_inner+0x5d2>
 8009790:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8009794:	4619      	mov	r1, r3
 8009796:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800979a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800979e:	4620      	mov	r0, r4
 80097a0:	4798      	blx	r3
 80097a2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80097a6:	4633      	mov	r3, r6
 80097a8:	3201      	adds	r2, #1
 80097aa:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80097ae:	f7ff bb87 	b.w	8008ec0 <d_print_comp_inner+0x1b84>
 80097b2:	255f      	movs	r5, #95	; 0x5f
 80097b4:	f7ff ba7d 	b.w	8008cb2 <d_print_comp_inner+0x1976>
 80097b8:	68aa      	ldr	r2, [r5, #8]
 80097ba:	4639      	mov	r1, r7
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 f9d5 	bl	8009b6c <d_print_comp>
 80097c2:	9a00      	ldr	r2, [sp, #0]
 80097c4:	9b06      	ldr	r3, [sp, #24]
 80097c6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f43e aabe 	beq.w	8007d4c <d_print_comp_inner+0xa10>
 80097d0:	f7fd be76 	b.w	80074c0 <d_print_comp_inner+0x184>
 80097d4:	4642      	mov	r2, r8
 80097d6:	4639      	mov	r1, r7
 80097d8:	4620      	mov	r0, r4
 80097da:	f001 f879 	bl	800a8d0 <d_print_subexpr>
 80097de:	464a      	mov	r2, r9
 80097e0:	4639      	mov	r1, r7
 80097e2:	4620      	mov	r0, r4
 80097e4:	f001 f836 	bl	800a854 <d_print_expr_op>
 80097e8:	4632      	mov	r2, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	4620      	mov	r0, r4
 80097ee:	f001 f86f 	bl	800a8d0 <d_print_subexpr>
 80097f2:	4620      	mov	r0, r4
 80097f4:	2203      	movs	r2, #3
 80097f6:	4975      	ldr	r1, [pc, #468]	; (80099cc <d_print_comp_inner+0x2690>)
 80097f8:	f7fd fae0 	bl	8006dbc <d_append_buffer>
 80097fc:	462a      	mov	r2, r5
 80097fe:	4639      	mov	r1, r7
 8009800:	4620      	mov	r0, r4
 8009802:	f001 f865 	bl	800a8d0 <d_print_subexpr>
 8009806:	f7fd be5b 	b.w	80074c0 <d_print_comp_inner+0x184>
 800980a:	6893      	ldr	r3, [r2, #8]
 800980c:	4639      	mov	r1, r7
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	4620      	mov	r0, r4
 8009812:	2b29      	cmp	r3, #41	; 0x29
 8009814:	bf1c      	itt	ne
 8009816:	2301      	movne	r3, #1
 8009818:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 800981c:	6852      	ldr	r2, [r2, #4]
 800981e:	f001 f857 	bl	800a8d0 <d_print_subexpr>
 8009822:	f7fd be09 	b.w	8007438 <d_print_comp_inner+0xfc>
 8009826:	686a      	ldr	r2, [r5, #4]
 8009828:	4639      	mov	r1, r7
 800982a:	4620      	mov	r0, r4
 800982c:	f001 f850 	bl	800a8d0 <d_print_subexpr>
 8009830:	4620      	mov	r0, r4
 8009832:	2203      	movs	r2, #3
 8009834:	4966      	ldr	r1, [pc, #408]	; (80099d0 <d_print_comp_inner+0x2694>)
 8009836:	f7fd fac1 	bl	8006dbc <d_append_buffer>
 800983a:	f7fd be41 	b.w	80074c0 <d_print_comp_inner+0x184>
 800983e:	686b      	ldr	r3, [r5, #4]
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	2a01      	cmp	r2, #1
 8009844:	f47f ab23 	bne.w	8008e8e <d_print_comp_inner+0x1b52>
 8009848:	68aa      	ldr	r2, [r5, #8]
 800984a:	7812      	ldrb	r2, [r2, #0]
 800984c:	2a29      	cmp	r2, #41	; 0x29
 800984e:	bf08      	it	eq
 8009850:	461d      	moveq	r5, r3
 8009852:	f7ff bb1c 	b.w	8008e8e <d_print_comp_inner+0x1b52>
 8009856:	ab14      	add	r3, sp, #80	; 0x50
 8009858:	f843 cd48 	str.w	ip, [r3, #-72]!
 800985c:	9603      	str	r6, [sp, #12]
 800985e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8009862:	f7fe be9f 	b.w	80085a4 <d_print_comp_inner+0x1268>
 8009866:	4642      	mov	r2, r8
 8009868:	4639      	mov	r1, r7
 800986a:	4620      	mov	r0, r4
 800986c:	f000 fff2 	bl	800a854 <d_print_expr_op>
 8009870:	e5e5      	b.n	800943e <d_print_comp_inner+0x2102>
 8009872:	2500      	movs	r5, #0
 8009874:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009878:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800987c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009880:	4620      	mov	r0, r4
 8009882:	4798      	blx	r3
 8009884:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009888:	4629      	mov	r1, r5
 800988a:	3301      	adds	r3, #1
 800988c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009890:	f7ff bbde 	b.w	8009050 <d_print_comp_inner+0x1d14>
 8009894:	f04f 0800 	mov.w	r8, #0
 8009898:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800989c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80098a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098a4:	4620      	mov	r0, r4
 80098a6:	4798      	blx	r3
 80098a8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098ac:	4641      	mov	r1, r8
 80098ae:	3301      	adds	r3, #1
 80098b0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098b4:	e440      	b.n	8009138 <d_print_comp_inner+0x1dfc>
 80098b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098ba:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80098be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098c2:	4620      	mov	r0, r4
 80098c4:	4798      	blx	r3
 80098c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098ca:	4639      	mov	r1, r7
 80098cc:	3301      	adds	r3, #1
 80098ce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098d2:	f7fe be7e 	b.w	80085d2 <d_print_comp_inner+0x1296>
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80098dc:	f7fe be6b 	b.w	80085b6 <d_print_comp_inner+0x127a>
 80098e0:	4664      	mov	r4, ip
 80098e2:	f7fe bf3c 	b.w	800875e <d_print_comp_inner+0x1422>
 80098e6:	2600      	movs	r6, #0
 80098e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098ec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80098f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098f4:	4620      	mov	r0, r4
 80098f6:	4798      	blx	r3
 80098f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098fc:	4631      	mov	r1, r6
 80098fe:	3301      	adds	r3, #1
 8009900:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009904:	f7ff bbb2 	b.w	800906c <d_print_comp_inner+0x1d30>
 8009908:	4660      	mov	r0, ip
 800990a:	46e0      	mov	r8, ip
 800990c:	f7fe bcb3 	b.w	8008276 <d_print_comp_inner+0xf3a>
 8009910:	2600      	movs	r6, #0
 8009912:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009916:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800991a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800991e:	4620      	mov	r0, r4
 8009920:	4798      	blx	r3
 8009922:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009926:	4631      	mov	r1, r6
 8009928:	3301      	adds	r3, #1
 800992a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800992e:	f7ff bbab 	b.w	8009088 <d_print_comp_inner+0x1d4c>
 8009932:	2500      	movs	r5, #0
 8009934:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009938:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800993c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009940:	4620      	mov	r0, r4
 8009942:	4798      	blx	r3
 8009944:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009948:	4629      	mov	r1, r5
 800994a:	3301      	adds	r3, #1
 800994c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009950:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009954:	e615      	b.n	8009582 <d_print_comp_inner+0x2246>
 8009956:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800995a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800995e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009962:	4620      	mov	r0, r4
 8009964:	4798      	blx	r3
 8009966:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800996a:	4631      	mov	r1, r6
 800996c:	3301      	adds	r3, #1
 800996e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009972:	f7fd bd74 	b.w	800745e <d_print_comp_inner+0x122>
 8009976:	2600      	movs	r6, #0
 8009978:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800997c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009980:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009984:	4620      	mov	r0, r4
 8009986:	4798      	blx	r3
 8009988:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800998c:	4631      	mov	r1, r6
 800998e:	3301      	adds	r3, #1
 8009990:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009994:	f7fd bd75 	b.w	8007482 <d_print_comp_inner+0x146>
 8009998:	686a      	ldr	r2, [r5, #4]
 800999a:	4639      	mov	r1, r7
 800999c:	4620      	mov	r0, r4
 800999e:	f000 ff97 	bl	800a8d0 <d_print_subexpr>
 80099a2:	4632      	mov	r2, r6
 80099a4:	4639      	mov	r1, r7
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 ff54 	bl	800a854 <d_print_expr_op>
 80099ac:	f7fd bd88 	b.w	80074c0 <d_print_comp_inner+0x184>
 80099b0:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 80099b4:	2301      	movs	r3, #1
 80099b6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80099ba:	f7fd bd81 	b.w	80074c0 <d_print_comp_inner+0x184>
 80099be:	bf00      	nop
 80099c0:	0801613c 	.word	0x0801613c
 80099c4:	08016138 	.word	0x08016138
 80099c8:	08016134 	.word	0x08016134
 80099cc:	08016128 	.word	0x08016128
 80099d0:	0801616c 	.word	0x0801616c
 80099d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80099d8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80099dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80099e0:	4620      	mov	r0, r4
 80099e2:	4798      	blx	r3
 80099e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80099e8:	4631      	mov	r1, r6
 80099ea:	3301      	adds	r3, #1
 80099ec:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80099f0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80099f4:	e4a5      	b.n	8009342 <d_print_comp_inner+0x2006>
 80099f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80099fa:	29ff      	cmp	r1, #255	; 0xff
 80099fc:	d054      	beq.n	8009aa8 <d_print_comp_inner+0x276c>
 80099fe:	232d      	movs	r3, #45	; 0x2d
 8009a00:	1c4a      	adds	r2, r1, #1
 8009a02:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009a06:	5463      	strb	r3, [r4, r1]
 8009a08:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009a0c:	e600      	b.n	8009610 <d_print_comp_inner+0x22d4>
 8009a0e:	2600      	movs	r6, #0
 8009a10:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a14:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009a18:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	4798      	blx	r3
 8009a20:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a24:	4631      	mov	r1, r6
 8009a26:	3301      	adds	r3, #1
 8009a28:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a2c:	e58c      	b.n	8009548 <d_print_comp_inner+0x220c>
 8009a2e:	f04f 0800 	mov.w	r8, #0
 8009a32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a36:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009a3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4798      	blx	r3
 8009a42:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a46:	4641      	mov	r1, r8
 8009a48:	3301      	adds	r3, #1
 8009a4a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009a4e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a52:	f7fe b9c4 	b.w	8007dde <d_print_comp_inner+0xaa2>
 8009a56:	4688      	mov	r8, r1
 8009a58:	e51f      	b.n	800949a <d_print_comp_inner+0x215e>
 8009a5a:	454f      	cmp	r7, r9
 8009a5c:	f67f aea9 	bls.w	80097b2 <d_print_comp_inner+0x2476>
 8009a60:	2d5f      	cmp	r5, #95	; 0x5f
 8009a62:	f47f aea6 	bne.w	80097b2 <d_print_comp_inner+0x2476>
 8009a66:	28ff      	cmp	r0, #255	; 0xff
 8009a68:	f63f a923 	bhi.w	8008cb2 <d_print_comp_inner+0x1976>
 8009a6c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009a70:	b2c5      	uxtb	r5, r0
 8009a72:	29ff      	cmp	r1, #255	; 0xff
 8009a74:	d10f      	bne.n	8009a96 <d_print_comp_inner+0x275a>
 8009a76:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009a7e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a82:	4620      	mov	r0, r4
 8009a84:	4798      	blx	r3
 8009a86:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a8a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009a8e:	3301      	adds	r3, #1
 8009a90:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a94:	2100      	movs	r1, #0
 8009a96:	1c4b      	adds	r3, r1, #1
 8009a98:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8009a9c:	464e      	mov	r6, r9
 8009a9e:	5465      	strb	r5, [r4, r1]
 8009aa0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8009aa4:	f7ff b90f 	b.w	8008cc6 <d_print_comp_inner+0x198a>
 8009aa8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009aac:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8009ab0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009ab4:	4798      	blx	r3
 8009ab6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009aba:	4641      	mov	r1, r8
 8009abc:	3301      	adds	r3, #1
 8009abe:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009ac2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009ac6:	e79a      	b.n	80099fe <d_print_comp_inner+0x26c2>
 8009ac8:	2600      	movs	r6, #0
 8009aca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009ace:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009ad2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	4798      	blx	r3
 8009ada:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009ade:	4631      	mov	r1, r6
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8009ae6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009aea:	e602      	b.n	80096f2 <d_print_comp_inner+0x23b6>
 8009aec:	2205      	movs	r2, #5
 8009aee:	491e      	ldr	r1, [pc, #120]	; (8009b68 <d_print_comp_inner+0x282c>)
 8009af0:	f7fd f964 	bl	8006dbc <d_append_buffer>
 8009af4:	f7fd bce4 	b.w	80074c0 <d_print_comp_inner+0x184>
 8009af8:	2500      	movs	r5, #0
 8009afa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009afe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009b02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009b06:	4620      	mov	r0, r4
 8009b08:	4798      	blx	r3
 8009b0a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009b0e:	4629      	mov	r1, r5
 8009b10:	3301      	adds	r3, #1
 8009b12:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009b16:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009b1a:	f7fd bcca 	b.w	80074b2 <d_print_comp_inner+0x176>
 8009b1e:	2500      	movs	r5, #0
 8009b20:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009b24:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009b28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4798      	blx	r3
 8009b30:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009b34:	4629      	mov	r1, r5
 8009b36:	3301      	adds	r3, #1
 8009b38:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009b3c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009b40:	e58e      	b.n	8009660 <d_print_comp_inner+0x2324>
 8009b42:	2500      	movs	r5, #0
 8009b44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009b48:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009b4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009b50:	4620      	mov	r0, r4
 8009b52:	4798      	blx	r3
 8009b54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009b58:	4629      	mov	r1, r5
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009b60:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009b64:	e58a      	b.n	800967c <d_print_comp_inner+0x2340>
 8009b66:	bf00      	nop
 8009b68:	08016140 	.word	0x08016140

08009b6c <d_print_comp>:
 8009b6c:	b510      	push	{r4, lr}
 8009b6e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8009b72:	b082      	sub	sp, #8
 8009b74:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8009b78:	4604      	mov	r4, r0
 8009b7a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009b7e:	f7fd fbdd 	bl	800733c <d_print_comp_inner>
 8009b82:	9b01      	ldr	r3, [sp, #4]
 8009b84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009b88:	b002      	add	sp, #8
 8009b8a:	bd10      	pop	{r4, pc}

08009b8c <d_print_mod>:
 8009b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b90:	7813      	ldrb	r3, [r2, #0]
 8009b92:	b082      	sub	sp, #8
 8009b94:	3b03      	subs	r3, #3
 8009b96:	4615      	mov	r5, r2
 8009b98:	4604      	mov	r4, r0
 8009b9a:	4688      	mov	r8, r1
 8009b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b9e:	f200 81d2 	bhi.w	8009f46 <d_print_mod+0x3ba>
 8009ba2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009ba6:	0051      	.short	0x0051
 8009ba8:	01d001d0 	.word	0x01d001d0
 8009bac:	01d001d0 	.word	0x01d001d0
 8009bb0:	01d001d0 	.word	0x01d001d0
 8009bb4:	01d001d0 	.word	0x01d001d0
 8009bb8:	01d001d0 	.word	0x01d001d0
 8009bbc:	01d001d0 	.word	0x01d001d0
 8009bc0:	01d001d0 	.word	0x01d001d0
 8009bc4:	01d001d0 	.word	0x01d001d0
 8009bc8:	01d001d0 	.word	0x01d001d0
 8009bcc:	01d001d0 	.word	0x01d001d0
 8009bd0:	006201d0 	.word	0x006201d0
 8009bd4:	00ac0087 	.word	0x00ac0087
 8009bd8:	00870062 	.word	0x00870062
 8009bdc:	00d000ac 	.word	0x00d000ac
 8009be0:	011800e9 	.word	0x011800e9
 8009be4:	013b012a 	.word	0x013b012a
 8009be8:	0141013e 	.word	0x0141013e
 8009bec:	01d00167 	.word	0x01d00167
 8009bf0:	01d001d0 	.word	0x01d001d0
 8009bf4:	018d01d0 	.word	0x018d01d0
 8009bf8:	002b01d0 	.word	0x002b01d0
 8009bfc:	4ed8      	ldr	r6, [pc, #864]	; (8009f60 <d_print_mod+0x3d4>)
 8009bfe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c02:	f106 0a0a 	add.w	sl, r6, #10
 8009c06:	f04f 0900 	mov.w	r9, #0
 8009c0a:	e009      	b.n	8009c20 <d_print_mod+0x94>
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	3101      	adds	r1, #1
 8009c10:	45b2      	cmp	sl, r6
 8009c12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009c16:	54e7      	strb	r7, [r4, r3]
 8009c18:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8009c1c:	f000 81b0 	beq.w	8009f80 <d_print_mod+0x3f4>
 8009c20:	29ff      	cmp	r1, #255	; 0xff
 8009c22:	f816 7b01 	ldrb.w	r7, [r6], #1
 8009c26:	d1f1      	bne.n	8009c0c <d_print_mod+0x80>
 8009c28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c2c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8009c30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009c34:	4620      	mov	r0, r4
 8009c36:	4798      	blx	r3
 8009c38:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	440b      	add	r3, r1
 8009c40:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009c44:	2300      	movs	r3, #0
 8009c46:	e7e3      	b.n	8009c10 <d_print_mod+0x84>
 8009c48:	686b      	ldr	r3, [r5, #4]
 8009c4a:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009c54:	4620      	mov	r0, r4
 8009c56:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009c5a:	f7fd fb6f 	bl	800733c <d_print_comp_inner>
 8009c5e:	9b01      	ldr	r3, [sp, #4]
 8009c60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009c64:	b002      	add	sp, #8
 8009c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6a:	4dbe      	ldr	r5, [pc, #760]	; (8009f64 <d_print_mod+0x3d8>)
 8009c6c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c70:	f105 0709 	add.w	r7, r5, #9
 8009c74:	f04f 0800 	mov.w	r8, #0
 8009c78:	e008      	b.n	8009c8c <d_print_mod+0x100>
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	3101      	adds	r1, #1
 8009c7e:	42af      	cmp	r7, r5
 8009c80:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009c84:	54e6      	strb	r6, [r4, r3]
 8009c86:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009c8a:	d0eb      	beq.n	8009c64 <d_print_mod+0xd8>
 8009c8c:	29ff      	cmp	r1, #255	; 0xff
 8009c8e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c92:	d1f2      	bne.n	8009c7a <d_print_mod+0xee>
 8009c94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c98:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009c9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	4798      	blx	r3
 8009ca4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009ca8:	2101      	movs	r1, #1
 8009caa:	440b      	add	r3, r1
 8009cac:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	e7e4      	b.n	8009c7e <d_print_mod+0xf2>
 8009cb4:	4dac      	ldr	r5, [pc, #688]	; (8009f68 <d_print_mod+0x3dc>)
 8009cb6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009cba:	f105 0709 	add.w	r7, r5, #9
 8009cbe:	f04f 0800 	mov.w	r8, #0
 8009cc2:	e008      	b.n	8009cd6 <d_print_mod+0x14a>
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	3101      	adds	r1, #1
 8009cc8:	42af      	cmp	r7, r5
 8009cca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009cce:	54e6      	strb	r6, [r4, r3]
 8009cd0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009cd4:	d0c6      	beq.n	8009c64 <d_print_mod+0xd8>
 8009cd6:	29ff      	cmp	r1, #255	; 0xff
 8009cd8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009cdc:	d1f2      	bne.n	8009cc4 <d_print_mod+0x138>
 8009cde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009ce2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009ce6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009cea:	4620      	mov	r0, r4
 8009cec:	4798      	blx	r3
 8009cee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	440b      	add	r3, r1
 8009cf6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e7e4      	b.n	8009cc8 <d_print_mod+0x13c>
 8009cfe:	4d9b      	ldr	r5, [pc, #620]	; (8009f6c <d_print_mod+0x3e0>)
 8009d00:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009d04:	1daf      	adds	r7, r5, #6
 8009d06:	f04f 0800 	mov.w	r8, #0
 8009d0a:	e008      	b.n	8009d1e <d_print_mod+0x192>
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	3101      	adds	r1, #1
 8009d10:	42af      	cmp	r7, r5
 8009d12:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009d16:	54e6      	strb	r6, [r4, r3]
 8009d18:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009d1c:	d0a2      	beq.n	8009c64 <d_print_mod+0xd8>
 8009d1e:	29ff      	cmp	r1, #255	; 0xff
 8009d20:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009d24:	d1f2      	bne.n	8009d0c <d_print_mod+0x180>
 8009d26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009d2a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009d2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009d32:	4620      	mov	r0, r4
 8009d34:	4798      	blx	r3
 8009d36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	440b      	add	r3, r1
 8009d3e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009d42:	2300      	movs	r3, #0
 8009d44:	e7e4      	b.n	8009d10 <d_print_mod+0x184>
 8009d46:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009d4a:	2bff      	cmp	r3, #255	; 0xff
 8009d4c:	f000 8175 	beq.w	800a03a <d_print_mod+0x4ae>
 8009d50:	1c59      	adds	r1, r3, #1
 8009d52:	2220      	movs	r2, #32
 8009d54:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009d58:	54e2      	strb	r2, [r4, r3]
 8009d5a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009d5e:	29ff      	cmp	r1, #255	; 0xff
 8009d60:	f000 8139 	beq.w	8009fd6 <d_print_mod+0x44a>
 8009d64:	1c4a      	adds	r2, r1, #1
 8009d66:	2326      	movs	r3, #38	; 0x26
 8009d68:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009d6c:	5463      	strb	r3, [r4, r1]
 8009d6e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009d72:	b002      	add	sp, #8
 8009d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009d7c:	2bff      	cmp	r3, #255	; 0xff
 8009d7e:	f000 816d 	beq.w	800a05c <d_print_mod+0x4d0>
 8009d82:	1c59      	adds	r1, r3, #1
 8009d84:	2220      	movs	r2, #32
 8009d86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009d8a:	54e2      	strb	r2, [r4, r3]
 8009d8c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009d90:	4d77      	ldr	r5, [pc, #476]	; (8009f70 <d_print_mod+0x3e4>)
 8009d92:	f04f 0800 	mov.w	r8, #0
 8009d96:	1caf      	adds	r7, r5, #2
 8009d98:	e009      	b.n	8009dae <d_print_mod+0x222>
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	3101      	adds	r1, #1
 8009d9e:	42af      	cmp	r7, r5
 8009da0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009da4:	54e6      	strb	r6, [r4, r3]
 8009da6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009daa:	f43f af5b 	beq.w	8009c64 <d_print_mod+0xd8>
 8009dae:	29ff      	cmp	r1, #255	; 0xff
 8009db0:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009db4:	d1f1      	bne.n	8009d9a <d_print_mod+0x20e>
 8009db6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009dba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009dbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4798      	blx	r3
 8009dc6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009dca:	2101      	movs	r1, #1
 8009dcc:	440b      	add	r3, r1
 8009dce:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e7e3      	b.n	8009d9e <d_print_mod+0x212>
 8009dd6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009dda:	29ff      	cmp	r1, #255	; 0xff
 8009ddc:	f000 810c 	beq.w	8009ff8 <d_print_mod+0x46c>
 8009de0:	1c4a      	adds	r2, r1, #1
 8009de2:	2320      	movs	r3, #32
 8009de4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009de8:	5463      	strb	r3, [r4, r1]
 8009dea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009dee:	68ab      	ldr	r3, [r5, #8]
 8009df0:	4641      	mov	r1, r8
 8009df2:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009df6:	461a      	mov	r2, r3
 8009df8:	e72a      	b.n	8009c50 <d_print_mod+0xc4>
 8009dfa:	f011 0804 	ands.w	r8, r1, #4
 8009dfe:	f47f af31 	bne.w	8009c64 <d_print_mod+0xd8>
 8009e02:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009e06:	29ff      	cmp	r1, #255	; 0xff
 8009e08:	f000 8139 	beq.w	800a07e <d_print_mod+0x4f2>
 8009e0c:	1c4a      	adds	r2, r1, #1
 8009e0e:	232a      	movs	r3, #42	; 0x2a
 8009e10:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009e14:	5463      	strb	r3, [r4, r1]
 8009e16:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009e1a:	e723      	b.n	8009c64 <d_print_mod+0xd8>
 8009e1c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009e20:	e79d      	b.n	8009d5e <d_print_mod+0x1d2>
 8009e22:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009e26:	e7b3      	b.n	8009d90 <d_print_mod+0x204>
 8009e28:	4d52      	ldr	r5, [pc, #328]	; (8009f74 <d_print_mod+0x3e8>)
 8009e2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009e2e:	f105 0708 	add.w	r7, r5, #8
 8009e32:	f04f 0800 	mov.w	r8, #0
 8009e36:	e009      	b.n	8009e4c <d_print_mod+0x2c0>
 8009e38:	460b      	mov	r3, r1
 8009e3a:	3101      	adds	r1, #1
 8009e3c:	42af      	cmp	r7, r5
 8009e3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009e42:	54e6      	strb	r6, [r4, r3]
 8009e44:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009e48:	f43f af0c 	beq.w	8009c64 <d_print_mod+0xd8>
 8009e4c:	29ff      	cmp	r1, #255	; 0xff
 8009e4e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009e52:	d1f1      	bne.n	8009e38 <d_print_mod+0x2ac>
 8009e54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009e58:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009e5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009e60:	4620      	mov	r0, r4
 8009e62:	4798      	blx	r3
 8009e64:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009e68:	2101      	movs	r1, #1
 8009e6a:	440b      	add	r3, r1
 8009e6c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009e70:	2300      	movs	r3, #0
 8009e72:	e7e3      	b.n	8009e3c <d_print_mod+0x2b0>
 8009e74:	4d40      	ldr	r5, [pc, #256]	; (8009f78 <d_print_mod+0x3ec>)
 8009e76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009e7a:	f105 070a 	add.w	r7, r5, #10
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	e009      	b.n	8009e98 <d_print_mod+0x30c>
 8009e84:	460b      	mov	r3, r1
 8009e86:	3101      	adds	r1, #1
 8009e88:	42af      	cmp	r7, r5
 8009e8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009e8e:	54e6      	strb	r6, [r4, r3]
 8009e90:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009e94:	f43f aee6 	beq.w	8009c64 <d_print_mod+0xd8>
 8009e98:	29ff      	cmp	r1, #255	; 0xff
 8009e9a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009e9e:	d1f1      	bne.n	8009e84 <d_print_mod+0x2f8>
 8009ea0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009ea4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009ea8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009eac:	4620      	mov	r0, r4
 8009eae:	4798      	blx	r3
 8009eb0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	440b      	add	r3, r1
 8009eb8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e7e3      	b.n	8009e88 <d_print_mod+0x2fc>
 8009ec0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8009ec4:	2b28      	cmp	r3, #40	; 0x28
 8009ec6:	d00a      	beq.n	8009ede <d_print_mod+0x352>
 8009ec8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009ecc:	29ff      	cmp	r1, #255	; 0xff
 8009ece:	d072      	beq.n	8009fb6 <d_print_mod+0x42a>
 8009ed0:	1c4a      	adds	r2, r1, #1
 8009ed2:	2320      	movs	r3, #32
 8009ed4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009ed8:	5463      	strb	r3, [r4, r1]
 8009eda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009ede:	686b      	ldr	r3, [r5, #4]
 8009ee0:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009ee4:	4641      	mov	r1, r8
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009eec:	4620      	mov	r0, r4
 8009eee:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009ef2:	f7fd fa23 	bl	800733c <d_print_comp_inner>
 8009ef6:	4d21      	ldr	r5, [pc, #132]	; (8009f7c <d_print_mod+0x3f0>)
 8009ef8:	9b01      	ldr	r3, [sp, #4]
 8009efa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009efe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009f02:	1cef      	adds	r7, r5, #3
 8009f04:	f04f 0800 	mov.w	r8, #0
 8009f08:	e009      	b.n	8009f1e <d_print_mod+0x392>
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	3101      	adds	r1, #1
 8009f0e:	42af      	cmp	r7, r5
 8009f10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009f14:	54e6      	strb	r6, [r4, r3]
 8009f16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009f1a:	f43f aea3 	beq.w	8009c64 <d_print_mod+0xd8>
 8009f1e:	29ff      	cmp	r1, #255	; 0xff
 8009f20:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009f24:	d1f1      	bne.n	8009f0a <d_print_mod+0x37e>
 8009f26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009f2a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009f2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009f32:	4620      	mov	r0, r4
 8009f34:	4798      	blx	r3
 8009f36:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	440b      	add	r3, r1
 8009f3e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009f42:	2300      	movs	r3, #0
 8009f44:	e7e3      	b.n	8009f0e <d_print_mod+0x382>
 8009f46:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	9500      	str	r5, [sp, #0]
 8009f54:	f7fd f9f2 	bl	800733c <d_print_comp_inner>
 8009f58:	9b01      	ldr	r3, [sp, #4]
 8009f5a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009f5e:	e681      	b.n	8009c64 <d_print_mod+0xd8>
 8009f60:	0801622c 	.word	0x0801622c
 8009f64:	080161eb 	.word	0x080161eb
 8009f68:	080161f7 	.word	0x080161f7
 8009f6c:	08016204 	.word	0x08016204
 8009f70:	0801620c 	.word	0x0801620c
 8009f74:	0801620f 	.word	0x0801620f
 8009f78:	0801621c 	.word	0x0801621c
 8009f7c:	08016228 	.word	0x08016228
 8009f80:	686b      	ldr	r3, [r5, #4]
 8009f82:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009f86:	461a      	mov	r2, r3
 8009f88:	4641      	mov	r1, r8
 8009f8a:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009f8e:	4620      	mov	r0, r4
 8009f90:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009f94:	f7fd f9d2 	bl	800733c <d_print_comp_inner>
 8009f98:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	29ff      	cmp	r1, #255	; 0xff
 8009fa0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009fa4:	d038      	beq.n	800a018 <d_print_mod+0x48c>
 8009fa6:	1c4a      	adds	r2, r1, #1
 8009fa8:	2329      	movs	r3, #41	; 0x29
 8009faa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009fae:	5463      	strb	r3, [r4, r1]
 8009fb0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009fb4:	e656      	b.n	8009c64 <d_print_mod+0xd8>
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009fbc:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009fc0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009fc4:	4798      	blx	r3
 8009fc6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009fca:	2201      	movs	r2, #1
 8009fcc:	4413      	add	r3, r2
 8009fce:	4631      	mov	r1, r6
 8009fd0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009fd4:	e77d      	b.n	8009ed2 <d_print_mod+0x346>
 8009fd6:	2500      	movs	r5, #0
 8009fd8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009fe0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	4798      	blx	r3
 8009fe8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009fec:	2201      	movs	r2, #1
 8009fee:	4413      	add	r3, r2
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009ff6:	e6b6      	b.n	8009d66 <d_print_mod+0x1da>
 8009ff8:	2600      	movs	r6, #0
 8009ffa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009ffe:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800a002:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 800a006:	4798      	blx	r3
 800a008:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a00c:	2201      	movs	r2, #1
 800a00e:	4413      	add	r3, r2
 800a010:	4631      	mov	r1, r6
 800a012:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a016:	e6e4      	b.n	8009de2 <d_print_mod+0x256>
 800a018:	2500      	movs	r5, #0
 800a01a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a01e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a022:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a026:	4620      	mov	r0, r4
 800a028:	4798      	blx	r3
 800a02a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a02e:	2201      	movs	r2, #1
 800a030:	4413      	add	r3, r2
 800a032:	4629      	mov	r1, r5
 800a034:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a038:	e7b6      	b.n	8009fa8 <d_print_mod+0x41c>
 800a03a:	2500      	movs	r5, #0
 800a03c:	4619      	mov	r1, r3
 800a03e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800a042:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800a046:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800a04a:	4798      	blx	r3
 800a04c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a050:	2101      	movs	r1, #1
 800a052:	440a      	add	r2, r1
 800a054:	462b      	mov	r3, r5
 800a056:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a05a:	e67a      	b.n	8009d52 <d_print_mod+0x1c6>
 800a05c:	2500      	movs	r5, #0
 800a05e:	4619      	mov	r1, r3
 800a060:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800a064:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800a068:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 800a06c:	4798      	blx	r3
 800a06e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a072:	2101      	movs	r1, #1
 800a074:	440a      	add	r2, r1
 800a076:	462b      	mov	r3, r5
 800a078:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a07c:	e682      	b.n	8009d84 <d_print_mod+0x1f8>
 800a07e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800a082:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800a086:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 800a08a:	4798      	blx	r3
 800a08c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a090:	2201      	movs	r2, #1
 800a092:	4413      	add	r3, r2
 800a094:	4641      	mov	r1, r8
 800a096:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a09a:	e6b8      	b.n	8009e0e <d_print_mod+0x282>

0800a09c <d_print_mod_list>:
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	f000 809c 	beq.w	800a1da <d_print_mod_list+0x13e>
 800a0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a6:	461e      	mov	r6, r3
 800a0a8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800a0ac:	b089      	sub	sp, #36	; 0x24
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	bb33      	cbnz	r3, 800a100 <d_print_mod_list+0x64>
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	f04f 0801 	mov.w	r8, #1
 800a0ba:	e002      	b.n	800a0c2 <d_print_mod_list+0x26>
 800a0bc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800a0c0:	b9f3      	cbnz	r3, 800a100 <d_print_mod_list+0x64>
 800a0c2:	68a3      	ldr	r3, [r4, #8]
 800a0c4:	b9cb      	cbnz	r3, 800a0fa <d_print_mod_list+0x5e>
 800a0c6:	6862      	ldr	r2, [r4, #4]
 800a0c8:	7813      	ldrb	r3, [r2, #0]
 800a0ca:	b91e      	cbnz	r6, 800a0d4 <d_print_mod_list+0x38>
 800a0cc:	f1a3 011c 	sub.w	r1, r3, #28
 800a0d0:	2904      	cmp	r1, #4
 800a0d2:	d912      	bls.n	800a0fa <d_print_mod_list+0x5e>
 800a0d4:	68e1      	ldr	r1, [r4, #12]
 800a0d6:	2b29      	cmp	r3, #41	; 0x29
 800a0d8:	f8c4 8008 	str.w	r8, [r4, #8]
 800a0dc:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 800a0e0:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 800a0e4:	d00f      	beq.n	800a106 <d_print_mod_list+0x6a>
 800a0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e8:	d018      	beq.n	800a11c <d_print_mod_list+0x80>
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d021      	beq.n	800a132 <d_print_mod_list+0x96>
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f7ff fd4b 	bl	8009b8c <d_print_mod>
 800a0f6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a0fa:	6824      	ldr	r4, [r4, #0]
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d1dd      	bne.n	800a0bc <d_print_mod_list+0x20>
 800a100:	b009      	add	sp, #36	; 0x24
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	3208      	adds	r2, #8
 800a10a:	4639      	mov	r1, r7
 800a10c:	4628      	mov	r0, r5
 800a10e:	f000 f9d7 	bl	800a4c0 <d_print_function_type.isra.11>
 800a112:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a116:	b009      	add	sp, #36	; 0x24
 800a118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	3204      	adds	r2, #4
 800a120:	4639      	mov	r1, r7
 800a122:	4628      	mov	r0, r5
 800a124:	f000 f8f0 	bl	800a308 <d_print_array_type.isra.10>
 800a128:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a12c:	b009      	add	sp, #36	; 0x24
 800a12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a132:	2600      	movs	r6, #0
 800a134:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 800a138:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 800a13c:	6852      	ldr	r2, [r2, #4]
 800a13e:	4639      	mov	r1, r7
 800a140:	4628      	mov	r0, r5
 800a142:	f7ff fd13 	bl	8009b6c <d_print_comp>
 800a146:	f017 0b04 	ands.w	fp, r7, #4
 800a14a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 800a14e:	d020      	beq.n	800a192 <d_print_mod_list+0xf6>
 800a150:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a154:	29ff      	cmp	r1, #255	; 0xff
 800a156:	f000 80be 	beq.w	800a2d6 <d_print_mod_list+0x23a>
 800a15a:	1c4a      	adds	r2, r1, #1
 800a15c:	232e      	movs	r3, #46	; 0x2e
 800a15e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 800a162:	546b      	strb	r3, [r5, r1]
 800a164:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 800a168:	6863      	ldr	r3, [r4, #4]
 800a16a:	689c      	ldr	r4, [r3, #8]
 800a16c:	7823      	ldrb	r3, [r4, #0]
 800a16e:	2b45      	cmp	r3, #69	; 0x45
 800a170:	d102      	bne.n	800a178 <d_print_mod_list+0xdc>
 800a172:	e033      	b.n	800a1dc <d_print_mod_list+0x140>
 800a174:	6864      	ldr	r4, [r4, #4]
 800a176:	7823      	ldrb	r3, [r4, #0]
 800a178:	3b1c      	subs	r3, #28
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	d9fa      	bls.n	800a174 <d_print_mod_list+0xd8>
 800a17e:	4622      	mov	r2, r4
 800a180:	4639      	mov	r1, r7
 800a182:	4628      	mov	r0, r5
 800a184:	f7ff fcf2 	bl	8009b6c <d_print_comp>
 800a188:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a18c:	b009      	add	sp, #36	; 0x24
 800a18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a192:	4e59      	ldr	r6, [pc, #356]	; (800a2f8 <d_print_mod_list+0x25c>)
 800a194:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a198:	f106 0a02 	add.w	sl, r6, #2
 800a19c:	e009      	b.n	800a1b2 <d_print_mod_list+0x116>
 800a19e:	460b      	mov	r3, r1
 800a1a0:	3101      	adds	r1, #1
 800a1a2:	45b2      	cmp	sl, r6
 800a1a4:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a1a8:	f805 8003 	strb.w	r8, [r5, r3]
 800a1ac:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a1b0:	d0da      	beq.n	800a168 <d_print_mod_list+0xcc>
 800a1b2:	29ff      	cmp	r1, #255	; 0xff
 800a1b4:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a1b8:	d1f1      	bne.n	800a19e <d_print_mod_list+0x102>
 800a1ba:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a1be:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a1c2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	4798      	blx	r3
 800a1ca:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	440b      	add	r3, r1
 800a1d2:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e7e3      	b.n	800a1a2 <d_print_mod_list+0x106>
 800a1da:	4770      	bx	lr
 800a1dc:	4e47      	ldr	r6, [pc, #284]	; (800a2fc <d_print_mod_list+0x260>)
 800a1de:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a1e2:	f106 0a0d 	add.w	sl, r6, #13
 800a1e6:	f04f 0b00 	mov.w	fp, #0
 800a1ea:	e009      	b.n	800a200 <d_print_mod_list+0x164>
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	3101      	adds	r1, #1
 800a1f0:	45b2      	cmp	sl, r6
 800a1f2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a1f6:	f805 8003 	strb.w	r8, [r5, r3]
 800a1fa:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a1fe:	d013      	beq.n	800a228 <d_print_mod_list+0x18c>
 800a200:	29ff      	cmp	r1, #255	; 0xff
 800a202:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a206:	d1f1      	bne.n	800a1ec <d_print_mod_list+0x150>
 800a208:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a20c:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a210:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a214:	4628      	mov	r0, r5
 800a216:	4798      	blx	r3
 800a218:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a21c:	2101      	movs	r1, #1
 800a21e:	440b      	add	r3, r1
 800a220:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a224:	2300      	movs	r3, #0
 800a226:	e7e3      	b.n	800a1f0 <d_print_mod_list+0x154>
 800a228:	68a2      	ldr	r2, [r4, #8]
 800a22a:	a801      	add	r0, sp, #4
 800a22c:	3201      	adds	r2, #1
 800a22e:	4934      	ldr	r1, [pc, #208]	; (800a300 <d_print_mod_list+0x264>)
 800a230:	f009 faca 	bl	80137c8 <siprintf>
 800a234:	a801      	add	r0, sp, #4
 800a236:	f004 fe11 	bl	800ee5c <strlen>
 800a23a:	b328      	cbz	r0, 800a288 <d_print_mod_list+0x1ec>
 800a23c:	ae01      	add	r6, sp, #4
 800a23e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a242:	eb06 0a00 	add.w	sl, r6, r0
 800a246:	f04f 0b00 	mov.w	fp, #0
 800a24a:	e009      	b.n	800a260 <d_print_mod_list+0x1c4>
 800a24c:	460b      	mov	r3, r1
 800a24e:	3101      	adds	r1, #1
 800a250:	45b2      	cmp	sl, r6
 800a252:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a256:	f805 8003 	strb.w	r8, [r5, r3]
 800a25a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a25e:	d015      	beq.n	800a28c <d_print_mod_list+0x1f0>
 800a260:	29ff      	cmp	r1, #255	; 0xff
 800a262:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a266:	d1f1      	bne.n	800a24c <d_print_mod_list+0x1b0>
 800a268:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a26c:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a270:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a274:	4628      	mov	r0, r5
 800a276:	4798      	blx	r3
 800a278:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a27c:	2101      	movs	r1, #1
 800a27e:	440b      	add	r3, r1
 800a280:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a284:	2300      	movs	r3, #0
 800a286:	e7e3      	b.n	800a250 <d_print_mod_list+0x1b4>
 800a288:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a28c:	4e1d      	ldr	r6, [pc, #116]	; (800a304 <d_print_mod_list+0x268>)
 800a28e:	f04f 0b00 	mov.w	fp, #0
 800a292:	f106 0a03 	add.w	sl, r6, #3
 800a296:	e00a      	b.n	800a2ae <d_print_mod_list+0x212>
 800a298:	460b      	mov	r3, r1
 800a29a:	3101      	adds	r1, #1
 800a29c:	4556      	cmp	r6, sl
 800a29e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a2a2:	f805 8003 	strb.w	r8, [r5, r3]
 800a2a6:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a2aa:	f43f af63 	beq.w	800a174 <d_print_mod_list+0xd8>
 800a2ae:	29ff      	cmp	r1, #255	; 0xff
 800a2b0:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a2b4:	d1f0      	bne.n	800a298 <d_print_mod_list+0x1fc>
 800a2b6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a2ba:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a2be:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	4798      	blx	r3
 800a2c6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	440b      	add	r3, r1
 800a2ce:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e7e2      	b.n	800a29c <d_print_mod_list+0x200>
 800a2d6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a2da:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a2de:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	4798      	blx	r3
 800a2e6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	4413      	add	r3, r2
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a2f4:	e732      	b.n	800a15c <d_print_mod_list+0xc0>
 800a2f6:	bf00      	nop
 800a2f8:	08015f6c 	.word	0x08015f6c
 800a2fc:	08015f70 	.word	0x08015f70
 800a300:	08015f80 	.word	0x08015f80
 800a304:	08015f84 	.word	0x08015f84

0800a308 <d_print_array_type.isra.10>:
 800a308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	4604      	mov	r4, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	4690      	mov	r8, r2
 800a312:	b163      	cbz	r3, 800a32e <d_print_array_type.isra.10+0x26>
 800a314:	461e      	mov	r6, r3
 800a316:	461a      	mov	r2, r3
 800a318:	6893      	ldr	r3, [r2, #8]
 800a31a:	b393      	cbz	r3, 800a382 <d_print_array_type.isra.10+0x7a>
 800a31c:	6812      	ldr	r2, [r2, #0]
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d1fa      	bne.n	800a318 <d_print_array_type.isra.10+0x10>
 800a322:	4613      	mov	r3, r2
 800a324:	4639      	mov	r1, r7
 800a326:	4632      	mov	r2, r6
 800a328:	4620      	mov	r0, r4
 800a32a:	f7ff feb7 	bl	800a09c <d_print_mod_list>
 800a32e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a332:	29ff      	cmp	r1, #255	; 0xff
 800a334:	f000 808e 	beq.w	800a454 <d_print_array_type.isra.10+0x14c>
 800a338:	1c4b      	adds	r3, r1, #1
 800a33a:	2220      	movs	r2, #32
 800a33c:	2bff      	cmp	r3, #255	; 0xff
 800a33e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800a342:	5462      	strb	r2, [r4, r1]
 800a344:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a348:	d069      	beq.n	800a41e <d_print_array_type.isra.10+0x116>
 800a34a:	225b      	movs	r2, #91	; 0x5b
 800a34c:	1c59      	adds	r1, r3, #1
 800a34e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a352:	54e2      	strb	r2, [r4, r3]
 800a354:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a358:	f8d8 2000 	ldr.w	r2, [r8]
 800a35c:	b12a      	cbz	r2, 800a36a <d_print_array_type.isra.10+0x62>
 800a35e:	4639      	mov	r1, r7
 800a360:	4620      	mov	r0, r4
 800a362:	f7ff fc03 	bl	8009b6c <d_print_comp>
 800a366:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a36a:	29ff      	cmp	r1, #255	; 0xff
 800a36c:	f000 8083 	beq.w	800a476 <d_print_array_type.isra.10+0x16e>
 800a370:	1c4a      	adds	r2, r1, #1
 800a372:	235d      	movs	r3, #93	; 0x5d
 800a374:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a378:	5463      	strb	r3, [r4, r1]
 800a37a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a37e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a382:	6852      	ldr	r2, [r2, #4]
 800a384:	7812      	ldrb	r2, [r2, #0]
 800a386:	2a2a      	cmp	r2, #42	; 0x2a
 800a388:	d040      	beq.n	800a40c <d_print_array_type.isra.10+0x104>
 800a38a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a4bc <d_print_array_type.isra.10+0x1b4>
 800a38e:	461d      	mov	r5, r3
 800a390:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a394:	f109 0b02 	add.w	fp, r9, #2
 800a398:	e00a      	b.n	800a3b0 <d_print_array_type.isra.10+0xa8>
 800a39a:	460b      	mov	r3, r1
 800a39c:	45cb      	cmp	fp, r9
 800a39e:	f101 0101 	add.w	r1, r1, #1
 800a3a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a3a6:	f804 a003 	strb.w	sl, [r4, r3]
 800a3aa:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800a3ae:	d01b      	beq.n	800a3e8 <d_print_array_type.isra.10+0xe0>
 800a3b0:	29ff      	cmp	r1, #255	; 0xff
 800a3b2:	f819 ab01 	ldrb.w	sl, [r9], #1
 800a3b6:	d1f0      	bne.n	800a39a <d_print_array_type.isra.10+0x92>
 800a3b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a3bc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a3c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4798      	blx	r3
 800a3c8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	440b      	add	r3, r1
 800a3d0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a3d4:	45cb      	cmp	fp, r9
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a3de:	f804 a003 	strb.w	sl, [r4, r3]
 800a3e2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800a3e6:	d1e3      	bne.n	800a3b0 <d_print_array_type.isra.10+0xa8>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4632      	mov	r2, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f7ff fe54 	bl	800a09c <d_print_mod_list>
 800a3f4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a3f8:	2bff      	cmp	r3, #255	; 0xff
 800a3fa:	d04d      	beq.n	800a498 <d_print_array_type.isra.10+0x190>
 800a3fc:	1c59      	adds	r1, r3, #1
 800a3fe:	2229      	movs	r2, #41	; 0x29
 800a400:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a404:	54e2      	strb	r2, [r4, r3]
 800a406:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a40a:	e792      	b.n	800a332 <d_print_array_type.isra.10+0x2a>
 800a40c:	4632      	mov	r2, r6
 800a40e:	4639      	mov	r1, r7
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff fe43 	bl	800a09c <d_print_mod_list>
 800a416:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a41a:	2bff      	cmp	r3, #255	; 0xff
 800a41c:	d195      	bne.n	800a34a <d_print_array_type.isra.10+0x42>
 800a41e:	2200      	movs	r2, #0
 800a420:	4619      	mov	r1, r3
 800a422:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800a426:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a42a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a42e:	4620      	mov	r0, r4
 800a430:	4798      	blx	r3
 800a432:	235b      	movs	r3, #91	; 0x5b
 800a434:	7023      	strb	r3, [r4, #0]
 800a436:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a43a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a43e:	f8d8 2000 	ldr.w	r2, [r8]
 800a442:	3301      	adds	r3, #1
 800a444:	2101      	movs	r1, #1
 800a446:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a44a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a44e:	2a00      	cmp	r2, #0
 800a450:	d185      	bne.n	800a35e <d_print_array_type.isra.10+0x56>
 800a452:	e78d      	b.n	800a370 <d_print_array_type.isra.10+0x68>
 800a454:	2500      	movs	r5, #0
 800a456:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a45a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a45e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a462:	4620      	mov	r0, r4
 800a464:	4798      	blx	r3
 800a466:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a46a:	2301      	movs	r3, #1
 800a46c:	441a      	add	r2, r3
 800a46e:	4629      	mov	r1, r5
 800a470:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a474:	e761      	b.n	800a33a <d_print_array_type.isra.10+0x32>
 800a476:	2500      	movs	r5, #0
 800a478:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a47c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a480:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a484:	4620      	mov	r0, r4
 800a486:	4798      	blx	r3
 800a488:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a48c:	2201      	movs	r2, #1
 800a48e:	4413      	add	r3, r2
 800a490:	4629      	mov	r1, r5
 800a492:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a496:	e76c      	b.n	800a372 <d_print_array_type.isra.10+0x6a>
 800a498:	2500      	movs	r5, #0
 800a49a:	4619      	mov	r1, r3
 800a49c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a4a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a4a4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4798      	blx	r3
 800a4ac:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	440a      	add	r2, r1
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a4ba:	e7a0      	b.n	800a3fe <d_print_array_type.isra.10+0xf6>
 800a4bc:	08016168 	.word	0x08016168

0800a4c0 <d_print_function_type.isra.11>:
 800a4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	460e      	mov	r6, r1
 800a4ca:	4617      	mov	r7, r2
 800a4cc:	461d      	mov	r5, r3
 800a4ce:	b353      	cbz	r3, 800a526 <d_print_function_type.isra.11+0x66>
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	bb43      	cbnz	r3, 800a526 <d_print_function_type.isra.11+0x66>
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	f04f 0e01 	mov.w	lr, #1
 800a4da:	e006      	b.n	800a4ea <d_print_function_type.isra.11+0x2a>
 800a4dc:	f410 6f60 	tst.w	r0, #3584	; 0xe00
 800a4e0:	d15d      	bne.n	800a59e <d_print_function_type.isra.11+0xde>
 800a4e2:	6812      	ldr	r2, [r2, #0]
 800a4e4:	b1fa      	cbz	r2, 800a526 <d_print_function_type.isra.11+0x66>
 800a4e6:	6893      	ldr	r3, [r2, #8]
 800a4e8:	b9eb      	cbnz	r3, 800a526 <d_print_function_type.isra.11+0x66>
 800a4ea:	6853      	ldr	r3, [r2, #4]
 800a4ec:	496e      	ldr	r1, [pc, #440]	; (800a6a8 <d_print_function_type.isra.11+0x1e8>)
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	3b19      	subs	r3, #25
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	fa0e f003 	lsl.w	r0, lr, r3
 800a4f8:	2b12      	cmp	r3, #18
 800a4fa:	ea01 0100 	and.w	r1, r1, r0
 800a4fe:	d8f0      	bhi.n	800a4e2 <d_print_function_type.isra.11+0x22>
 800a500:	2900      	cmp	r1, #0
 800a502:	d0eb      	beq.n	800a4dc <d_print_function_type.isra.11+0x1c>
 800a504:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a508:	2b20      	cmp	r3, #32
 800a50a:	d04e      	beq.n	800a5aa <d_print_function_type.isra.11+0xea>
 800a50c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a510:	2bff      	cmp	r3, #255	; 0xff
 800a512:	f000 80b5 	beq.w	800a680 <d_print_function_type.isra.11+0x1c0>
 800a516:	1c59      	adds	r1, r3, #1
 800a518:	2220      	movs	r2, #32
 800a51a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a51e:	54e2      	strb	r2, [r4, r3]
 800a520:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a524:	e043      	b.n	800a5ae <d_print_function_type.isra.11+0xee>
 800a526:	2200      	movs	r2, #0
 800a528:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800a52c:	4613      	mov	r3, r2
 800a52e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800a532:	4631      	mov	r1, r6
 800a534:	462a      	mov	r2, r5
 800a536:	4620      	mov	r0, r4
 800a538:	f7ff fdb0 	bl	800a09c <d_print_mod_list>
 800a53c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a540:	29ff      	cmp	r1, #255	; 0xff
 800a542:	d056      	beq.n	800a5f2 <d_print_function_type.isra.11+0x132>
 800a544:	1c4b      	adds	r3, r1, #1
 800a546:	2228      	movs	r2, #40	; 0x28
 800a548:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800a54c:	5462      	strb	r2, [r4, r1]
 800a54e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a552:	6838      	ldr	r0, [r7, #0]
 800a554:	b178      	cbz	r0, 800a576 <d_print_function_type.isra.11+0xb6>
 800a556:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a55a:	4602      	mov	r2, r0
 800a55c:	9000      	str	r0, [sp, #0]
 800a55e:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a562:	4631      	mov	r1, r6
 800a564:	4620      	mov	r0, r4
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	f7fc fee8 	bl	800733c <d_print_comp_inner>
 800a56c:	9a01      	ldr	r2, [sp, #4]
 800a56e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a572:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a576:	2bff      	cmp	r3, #255	; 0xff
 800a578:	d04d      	beq.n	800a616 <d_print_function_type.isra.11+0x156>
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	2029      	movs	r0, #41	; 0x29
 800a57e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a582:	4631      	mov	r1, r6
 800a584:	54e0      	strb	r0, [r4, r3]
 800a586:	462a      	mov	r2, r5
 800a588:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 800a58c:	2301      	movs	r3, #1
 800a58e:	4620      	mov	r0, r4
 800a590:	f7ff fd84 	bl	800a09c <d_print_mod_list>
 800a594:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 800a598:	b003      	add	sp, #12
 800a59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a59e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a5a2:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800a5a6:	2a28      	cmp	r2, #40	; 0x28
 800a5a8:	d1ae      	bne.n	800a508 <d_print_function_type.isra.11+0x48>
 800a5aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a5ae:	29ff      	cmp	r1, #255	; 0xff
 800a5b0:	d054      	beq.n	800a65c <d_print_function_type.isra.11+0x19c>
 800a5b2:	1c4a      	adds	r2, r1, #1
 800a5b4:	2328      	movs	r3, #40	; 0x28
 800a5b6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a5ba:	f04f 0900 	mov.w	r9, #0
 800a5be:	5463      	strb	r3, [r4, r1]
 800a5c0:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800a5c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a5c8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800a5cc:	464b      	mov	r3, r9
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f7ff fd62 	bl	800a09c <d_print_mod_list>
 800a5d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a5dc:	2bff      	cmp	r3, #255	; 0xff
 800a5de:	d02c      	beq.n	800a63a <d_print_function_type.isra.11+0x17a>
 800a5e0:	1c59      	adds	r1, r3, #1
 800a5e2:	2229      	movs	r2, #41	; 0x29
 800a5e4:	29ff      	cmp	r1, #255	; 0xff
 800a5e6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a5ea:	54e2      	strb	r2, [r4, r3]
 800a5ec:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a5f0:	d1a8      	bne.n	800a544 <d_print_function_type.isra.11+0x84>
 800a5f2:	f04f 0900 	mov.w	r9, #0
 800a5f6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a5fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a5fe:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800a602:	4620      	mov	r0, r4
 800a604:	4798      	blx	r3
 800a606:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a60a:	2301      	movs	r3, #1
 800a60c:	441a      	add	r2, r3
 800a60e:	4649      	mov	r1, r9
 800a610:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a614:	e797      	b.n	800a546 <d_print_function_type.isra.11+0x86>
 800a616:	2700      	movs	r7, #0
 800a618:	4619      	mov	r1, r3
 800a61a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a61e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a622:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800a626:	4620      	mov	r0, r4
 800a628:	4798      	blx	r3
 800a62a:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800a62e:	2201      	movs	r2, #1
 800a630:	4411      	add	r1, r2
 800a632:	463b      	mov	r3, r7
 800a634:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 800a638:	e7a0      	b.n	800a57c <d_print_function_type.isra.11+0xbc>
 800a63a:	4619      	mov	r1, r3
 800a63c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a640:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a644:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800a648:	4620      	mov	r0, r4
 800a64a:	4798      	blx	r3
 800a64c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a650:	2101      	movs	r1, #1
 800a652:	440a      	add	r2, r1
 800a654:	464b      	mov	r3, r9
 800a656:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a65a:	e7c2      	b.n	800a5e2 <d_print_function_type.isra.11+0x122>
 800a65c:	f04f 0800 	mov.w	r8, #0
 800a660:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a664:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a668:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a66c:	4620      	mov	r0, r4
 800a66e:	4798      	blx	r3
 800a670:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a674:	2201      	movs	r2, #1
 800a676:	4413      	add	r3, r2
 800a678:	4641      	mov	r1, r8
 800a67a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a67e:	e799      	b.n	800a5b4 <d_print_function_type.isra.11+0xf4>
 800a680:	f04f 0800 	mov.w	r8, #0
 800a684:	4619      	mov	r1, r3
 800a686:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a68a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a68e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a692:	4620      	mov	r0, r4
 800a694:	4798      	blx	r3
 800a696:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a69a:	2101      	movs	r1, #1
 800a69c:	440a      	add	r2, r1
 800a69e:	4643      	mov	r3, r8
 800a6a0:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a6a4:	e738      	b.n	800a518 <d_print_function_type.isra.11+0x58>
 800a6a6:	bf00      	nop
 800a6a8:	00043107 	.word	0x00043107

0800a6ac <d_print_cast.isra.12>:
 800a6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	460e      	mov	r6, r1
 800a6ba:	4615      	mov	r5, r2
 800a6bc:	b138      	cbz	r0, 800a6ce <d_print_cast.isra.12+0x22>
 800a6be:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 800a6c2:	ab04      	add	r3, sp, #16
 800a6c4:	f843 2d10 	str.w	r2, [r3, #-16]!
 800a6c8:	9001      	str	r0, [sp, #4]
 800a6ca:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a6ce:	682b      	ldr	r3, [r5, #0]
 800a6d0:	781a      	ldrb	r2, [r3, #0]
 800a6d2:	2a04      	cmp	r2, #4
 800a6d4:	d017      	beq.n	800a706 <d_print_cast.isra.12+0x5a>
 800a6d6:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 800a6da:	a802      	add	r0, sp, #8
 800a6dc:	461a      	mov	r2, r3
 800a6de:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	9302      	str	r3, [sp, #8]
 800a6e8:	9503      	str	r5, [sp, #12]
 800a6ea:	f7fc fe27 	bl	800733c <d_print_comp_inner>
 800a6ee:	9a03      	ldr	r2, [sp, #12]
 800a6f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800a6f4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a6f8:	b113      	cbz	r3, 800a700 <d_print_cast.isra.12+0x54>
 800a6fa:	9b00      	ldr	r3, [sp, #0]
 800a6fc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a700:	b004      	add	sp, #16
 800a702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a706:	6858      	ldr	r0, [r3, #4]
 800a708:	af02      	add	r7, sp, #8
 800a70a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a70e:	4602      	mov	r2, r0
 800a710:	9002      	str	r0, [sp, #8]
 800a712:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 800a716:	4631      	mov	r1, r6
 800a718:	4620      	mov	r0, r4
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	f7fc fe0e 	bl	800733c <d_print_comp_inner>
 800a720:	9a03      	ldr	r2, [sp, #12]
 800a722:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800a726:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a72a:	b113      	cbz	r3, 800a732 <d_print_cast.isra.12+0x86>
 800a72c:	9b00      	ldr	r3, [sp, #0]
 800a72e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a732:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a736:	2b3c      	cmp	r3, #60	; 0x3c
 800a738:	d02c      	beq.n	800a794 <d_print_cast.isra.12+0xe8>
 800a73a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a73e:	29ff      	cmp	r1, #255	; 0xff
 800a740:	d051      	beq.n	800a7e6 <d_print_cast.isra.12+0x13a>
 800a742:	1c4a      	adds	r2, r1, #1
 800a744:	233c      	movs	r3, #60	; 0x3c
 800a746:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a74a:	5463      	strb	r3, [r4, r1]
 800a74c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	4631      	mov	r1, r6
 800a75a:	461a      	mov	r2, r3
 800a75c:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 800a760:	4620      	mov	r0, r4
 800a762:	9302      	str	r3, [sp, #8]
 800a764:	9503      	str	r5, [sp, #12]
 800a766:	f7fc fde9 	bl	800733c <d_print_comp_inner>
 800a76a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a76e:	9a03      	ldr	r2, [sp, #12]
 800a770:	2b3e      	cmp	r3, #62	; 0x3e
 800a772:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a776:	d019      	beq.n	800a7ac <d_print_cast.isra.12+0x100>
 800a778:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a77c:	29ff      	cmp	r1, #255	; 0xff
 800a77e:	d021      	beq.n	800a7c4 <d_print_cast.isra.12+0x118>
 800a780:	1c4a      	adds	r2, r1, #1
 800a782:	233e      	movs	r3, #62	; 0x3e
 800a784:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a788:	5463      	strb	r3, [r4, r1]
 800a78a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a78e:	b004      	add	sp, #16
 800a790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a794:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a798:	2bff      	cmp	r3, #255	; 0xff
 800a79a:	d048      	beq.n	800a82e <d_print_cast.isra.12+0x182>
 800a79c:	1c59      	adds	r1, r3, #1
 800a79e:	2220      	movs	r2, #32
 800a7a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a7a4:	54e2      	strb	r2, [r4, r3]
 800a7a6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a7aa:	e7c8      	b.n	800a73e <d_print_cast.isra.12+0x92>
 800a7ac:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a7b0:	2bff      	cmp	r3, #255	; 0xff
 800a7b2:	d02a      	beq.n	800a80a <d_print_cast.isra.12+0x15e>
 800a7b4:	1c59      	adds	r1, r3, #1
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a7bc:	54e2      	strb	r2, [r4, r3]
 800a7be:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a7c2:	e7db      	b.n	800a77c <d_print_cast.isra.12+0xd0>
 800a7c4:	2500      	movs	r5, #0
 800a7c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a7ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a7ce:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	4798      	blx	r3
 800a7d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a7da:	2201      	movs	r2, #1
 800a7dc:	4413      	add	r3, r2
 800a7de:	4629      	mov	r1, r5
 800a7e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a7e4:	e7cd      	b.n	800a782 <d_print_cast.isra.12+0xd6>
 800a7e6:	f04f 0800 	mov.w	r8, #0
 800a7ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a7ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a7f2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	4798      	blx	r3
 800a7fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a7fe:	2201      	movs	r2, #1
 800a800:	4413      	add	r3, r2
 800a802:	4641      	mov	r1, r8
 800a804:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a808:	e79c      	b.n	800a744 <d_print_cast.isra.12+0x98>
 800a80a:	2500      	movs	r5, #0
 800a80c:	4619      	mov	r1, r3
 800a80e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a812:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a816:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a81a:	4620      	mov	r0, r4
 800a81c:	4798      	blx	r3
 800a81e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a822:	2101      	movs	r1, #1
 800a824:	440a      	add	r2, r1
 800a826:	462b      	mov	r3, r5
 800a828:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a82c:	e7c3      	b.n	800a7b6 <d_print_cast.isra.12+0x10a>
 800a82e:	f04f 0800 	mov.w	r8, #0
 800a832:	4619      	mov	r1, r3
 800a834:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a838:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a83c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a840:	4620      	mov	r0, r4
 800a842:	4798      	blx	r3
 800a844:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a848:	2101      	movs	r1, #1
 800a84a:	440a      	add	r2, r1
 800a84c:	4643      	mov	r3, r8
 800a84e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a852:	e7a4      	b.n	800a79e <d_print_cast.isra.12+0xf2>

0800a854 <d_print_expr_op>:
 800a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a858:	7815      	ldrb	r5, [r2, #0]
 800a85a:	b082      	sub	sp, #8
 800a85c:	2d31      	cmp	r5, #49	; 0x31
 800a85e:	4613      	mov	r3, r2
 800a860:	4604      	mov	r4, r0
 800a862:	d00d      	beq.n	800a880 <d_print_expr_op+0x2c>
 800a864:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 800a868:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 800a86c:	e88d 0028 	stmia.w	sp, {r3, r5}
 800a870:	f7fc fd64 	bl	800733c <d_print_comp_inner>
 800a874:	9b01      	ldr	r3, [sp, #4]
 800a876:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a87a:	b002      	add	sp, #8
 800a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a880:	6853      	ldr	r3, [r2, #4]
 800a882:	689f      	ldr	r7, [r3, #8]
 800a884:	685d      	ldr	r5, [r3, #4]
 800a886:	2f00      	cmp	r7, #0
 800a888:	d0f7      	beq.n	800a87a <d_print_expr_op+0x26>
 800a88a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800a88e:	442f      	add	r7, r5
 800a890:	f04f 0800 	mov.w	r8, #0
 800a894:	e008      	b.n	800a8a8 <d_print_expr_op+0x54>
 800a896:	460b      	mov	r3, r1
 800a898:	3101      	adds	r1, #1
 800a89a:	42bd      	cmp	r5, r7
 800a89c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a8a0:	54e6      	strb	r6, [r4, r3]
 800a8a2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800a8a6:	d0e8      	beq.n	800a87a <d_print_expr_op+0x26>
 800a8a8:	29ff      	cmp	r1, #255	; 0xff
 800a8aa:	f815 6b01 	ldrb.w	r6, [r5], #1
 800a8ae:	d1f2      	bne.n	800a896 <d_print_expr_op+0x42>
 800a8b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a8b4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a8b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4798      	blx	r3
 800a8c0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a8c4:	2101      	movs	r1, #1
 800a8c6:	440b      	add	r3, r1
 800a8c8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e7e4      	b.n	800a89a <d_print_expr_op+0x46>

0800a8d0 <d_print_subexpr>:
 800a8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8d2:	7813      	ldrb	r3, [r2, #0]
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	4615      	mov	r5, r2
 800a8da:	460e      	mov	r6, r1
 800a8dc:	4604      	mov	r4, r0
 800a8de:	d929      	bls.n	800a934 <d_print_subexpr+0x64>
 800a8e0:	2b30      	cmp	r3, #48	; 0x30
 800a8e2:	d027      	beq.n	800a934 <d_print_subexpr+0x64>
 800a8e4:	2b06      	cmp	r3, #6
 800a8e6:	d025      	beq.n	800a934 <d_print_subexpr+0x64>
 800a8e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800a8ec:	29ff      	cmp	r1, #255	; 0xff
 800a8ee:	d031      	beq.n	800a954 <d_print_subexpr+0x84>
 800a8f0:	1c4a      	adds	r2, r1, #1
 800a8f2:	2328      	movs	r3, #40	; 0x28
 800a8f4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a8f8:	5463      	strb	r3, [r4, r1]
 800a8fa:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
 800a8fe:	4631      	mov	r1, r6
 800a900:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a904:	462a      	mov	r2, r5
 800a906:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a90a:	4620      	mov	r0, r4
 800a90c:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800a910:	f7fc fd14 	bl	800733c <d_print_comp_inner>
 800a914:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a918:	9b01      	ldr	r3, [sp, #4]
 800a91a:	29ff      	cmp	r1, #255	; 0xff
 800a91c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a920:	d028      	beq.n	800a974 <d_print_subexpr+0xa4>
 800a922:	1c4a      	adds	r2, r1, #1
 800a924:	2329      	movs	r3, #41	; 0x29
 800a926:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a92a:	5463      	strb	r3, [r4, r1]
 800a92c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a930:	b003      	add	sp, #12
 800a932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a934:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a938:	4631      	mov	r1, r6
 800a93a:	462a      	mov	r2, r5
 800a93c:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a940:	4620      	mov	r0, r4
 800a942:	9301      	str	r3, [sp, #4]
 800a944:	9500      	str	r5, [sp, #0]
 800a946:	f7fc fcf9 	bl	800733c <d_print_comp_inner>
 800a94a:	9b01      	ldr	r3, [sp, #4]
 800a94c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a950:	b003      	add	sp, #12
 800a952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a954:	2700      	movs	r7, #0
 800a956:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a95a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a95e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800a962:	4798      	blx	r3
 800a964:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a968:	2201      	movs	r2, #1
 800a96a:	4413      	add	r3, r2
 800a96c:	4639      	mov	r1, r7
 800a96e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a972:	e7be      	b.n	800a8f2 <d_print_subexpr+0x22>
 800a974:	2500      	movs	r5, #0
 800a976:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a97a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a97e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a982:	4620      	mov	r0, r4
 800a984:	4798      	blx	r3
 800a986:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a98a:	2201      	movs	r2, #1
 800a98c:	4413      	add	r3, r2
 800a98e:	4629      	mov	r1, r5
 800a990:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a994:	e7c6      	b.n	800a924 <d_print_subexpr+0x54>
 800a996:	bf00      	nop

0800a998 <d_template_args>:
 800a998:	68c1      	ldr	r1, [r0, #12]
 800a99a:	780b      	ldrb	r3, [r1, #0]
 800a99c:	3b49      	subs	r3, #73	; 0x49
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	f200 80ac 	bhi.w	800aafc <d_template_args+0x164>
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	1c4a      	adds	r2, r1, #1
 800a9aa:	60c2      	str	r2, [r0, #12]
 800a9ac:	784b      	ldrb	r3, [r1, #1]
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	2b45      	cmp	r3, #69	; 0x45
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 800a9b8:	f000 8166 	beq.w	800ac88 <d_template_args+0x2f0>
 800a9bc:	ae04      	add	r6, sp, #16
 800a9be:	2100      	movs	r1, #0
 800a9c0:	f846 1d04 	str.w	r1, [r6, #-4]!
 800a9c4:	3b49      	subs	r3, #73	; 0x49
 800a9c6:	2b0f      	cmp	r3, #15
 800a9c8:	d854      	bhi.n	800aa74 <d_template_args+0xdc>
 800a9ca:	e8df f003 	tbb	[pc, r3]
 800a9ce:	4e4e      	.short	0x4e4e
 800a9d0:	53533253 	.word	0x53533253
 800a9d4:	53535353 	.word	0x53535353
 800a9d8:	53535353 	.word	0x53535353
 800a9dc:	0853      	.short	0x0853
 800a9de:	1c53      	adds	r3, r2, #1
 800a9e0:	2501      	movs	r5, #1
 800a9e2:	60e3      	str	r3, [r4, #12]
 800a9e4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800a9e6:	6365      	str	r5, [r4, #52]	; 0x34
 800a9e8:	7853      	ldrb	r3, [r2, #1]
 800a9ea:	2b4c      	cmp	r3, #76	; 0x4c
 800a9ec:	f000 8088 	beq.w	800ab00 <d_template_args+0x168>
 800a9f0:	2b54      	cmp	r3, #84	; 0x54
 800a9f2:	f000 808b 	beq.w	800ab0c <d_template_args+0x174>
 800a9f6:	2b73      	cmp	r3, #115	; 0x73
 800a9f8:	d044      	beq.n	800aa84 <d_template_args+0xec>
 800a9fa:	2b66      	cmp	r3, #102	; 0x66
 800a9fc:	d060      	beq.n	800aac0 <d_template_args+0x128>
 800a9fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aa02:	2909      	cmp	r1, #9
 800aa04:	f200 81b1 	bhi.w	800ad6a <d_template_args+0x3d2>
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f003 f927 	bl	800dc5c <d_unqualified_name>
 800aa0e:	4605      	mov	r5, r0
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f000 821f 	beq.w	800ae54 <d_template_args+0x4bc>
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	781a      	ldrb	r2, [r3, #0]
 800aa1a:	2a49      	cmp	r2, #73	; 0x49
 800aa1c:	f000 8128 	beq.w	800ac70 <d_template_args+0x2d8>
 800aa20:	4602      	mov	r2, r0
 800aa22:	6367      	str	r7, [r4, #52]	; 0x34
 800aa24:	7819      	ldrb	r1, [r3, #0]
 800aa26:	2945      	cmp	r1, #69	; 0x45
 800aa28:	d029      	beq.n	800aa7e <d_template_args+0xe6>
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	b005      	add	sp, #20
 800aa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa32:	4620      	mov	r0, r4
 800aa34:	f003 ff8e 	bl	800e954 <d_expr_primary>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	d0f5      	beq.n	800aa2a <d_template_args+0x92>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	212f      	movs	r1, #47	; 0x2f
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7fc f8a8 	bl	8006b98 <d_make_comp>
 800aa48:	6030      	str	r0, [r6, #0]
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d0ed      	beq.n	800aa2a <d_template_args+0x92>
 800aa4e:	68e2      	ldr	r2, [r4, #12]
 800aa50:	f100 0608 	add.w	r6, r0, #8
 800aa54:	7813      	ldrb	r3, [r2, #0]
 800aa56:	2b45      	cmp	r3, #69	; 0x45
 800aa58:	d1b4      	bne.n	800a9c4 <d_template_args+0x2c>
 800aa5a:	9803      	ldr	r0, [sp, #12]
 800aa5c:	3201      	adds	r2, #1
 800aa5e:	60e2      	str	r2, [r4, #12]
 800aa60:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800aa64:	b005      	add	sp, #20
 800aa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f7ff ff94 	bl	800a998 <d_template_args>
 800aa70:	4602      	mov	r2, r0
 800aa72:	e7e2      	b.n	800aa3a <d_template_args+0xa2>
 800aa74:	4620      	mov	r0, r4
 800aa76:	f002 fc75 	bl	800d364 <d_type>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	e7dd      	b.n	800aa3a <d_template_args+0xa2>
 800aa7e:	3301      	adds	r3, #1
 800aa80:	60e3      	str	r3, [r4, #12]
 800aa82:	e7da      	b.n	800aa3a <d_template_args+0xa2>
 800aa84:	7893      	ldrb	r3, [r2, #2]
 800aa86:	2b72      	cmp	r3, #114	; 0x72
 800aa88:	f000 8149 	beq.w	800ad1e <d_template_args+0x386>
 800aa8c:	2b70      	cmp	r3, #112	; 0x70
 800aa8e:	f000 81aa 	beq.w	800ade6 <d_template_args+0x44e>
 800aa92:	4620      	mov	r0, r4
 800aa94:	f003 f822 	bl	800dadc <d_operator_name>
 800aa98:	4605      	mov	r5, r0
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	f000 81da 	beq.w	800ae54 <d_template_args+0x4bc>
 800aaa0:	f890 9000 	ldrb.w	r9, [r0]
 800aaa4:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800aaa8:	d036      	beq.n	800ab18 <d_template_args+0x180>
 800aaaa:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 800aaae:	f000 80cf 	beq.w	800ac50 <d_template_args+0x2b8>
 800aab2:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 800aab6:	f000 8172 	beq.w	800ad9e <d_template_args+0x406>
 800aaba:	68e3      	ldr	r3, [r4, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	e7b0      	b.n	800aa22 <d_template_args+0x8a>
 800aac0:	7893      	ldrb	r3, [r2, #2]
 800aac2:	2b70      	cmp	r3, #112	; 0x70
 800aac4:	d1e5      	bne.n	800aa92 <d_template_args+0xfa>
 800aac6:	1cd3      	adds	r3, r2, #3
 800aac8:	60e3      	str	r3, [r4, #12]
 800aaca:	78d3      	ldrb	r3, [r2, #3]
 800aacc:	2b54      	cmp	r3, #84	; 0x54
 800aace:	f040 813c 	bne.w	800ad4a <d_template_args+0x3b2>
 800aad2:	3204      	adds	r2, #4
 800aad4:	60e2      	str	r2, [r4, #12]
 800aad6:	2000      	movs	r0, #0
 800aad8:	6963      	ldr	r3, [r4, #20]
 800aada:	69a1      	ldr	r1, [r4, #24]
 800aadc:	428b      	cmp	r3, r1
 800aade:	daec      	bge.n	800aaba <d_template_args+0x122>
 800aae0:	6921      	ldr	r1, [r4, #16]
 800aae2:	1c5a      	adds	r2, r3, #1
 800aae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aae8:	6162      	str	r2, [r4, #20]
 800aaea:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800aaee:	d06d      	beq.n	800abcc <d_template_args+0x234>
 800aaf0:	2506      	movs	r5, #6
 800aaf2:	f801 5023 	strb.w	r5, [r1, r3, lsl #2]
 800aaf6:	6050      	str	r0, [r2, #4]
 800aaf8:	68e3      	ldr	r3, [r4, #12]
 800aafa:	e792      	b.n	800aa22 <d_template_args+0x8a>
 800aafc:	2000      	movs	r0, #0
 800aafe:	4770      	bx	lr
 800ab00:	4620      	mov	r0, r4
 800ab02:	f003 ff27 	bl	800e954 <d_expr_primary>
 800ab06:	68e3      	ldr	r3, [r4, #12]
 800ab08:	4602      	mov	r2, r0
 800ab0a:	e78a      	b.n	800aa22 <d_template_args+0x8a>
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f7fc f9e5 	bl	8006edc <d_template_param>
 800ab12:	68e3      	ldr	r3, [r4, #12]
 800ab14:	4602      	mov	r2, r0
 800ab16:	e784      	b.n	800aa22 <d_template_args+0x8a>
 800ab18:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800ab1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ab1e:	f8db 3008 	ldr.w	r3, [fp, #8]
 800ab22:	f8db a000 	ldr.w	sl, [fp]
 800ab26:	3b02      	subs	r3, #2
 800ab28:	441a      	add	r2, r3
 800ab2a:	6322      	str	r2, [r4, #48]	; 0x30
 800ab2c:	4650      	mov	r0, sl
 800ab2e:	49cb      	ldr	r1, [pc, #812]	; (800ae5c <d_template_args+0x4c4>)
 800ab30:	f004 f98a 	bl	800ee48 <strcmp>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	f000 8188 	beq.w	800ae4a <d_template_args+0x4b2>
 800ab3a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800ab3e:	2b03      	cmp	r3, #3
 800ab40:	d8bb      	bhi.n	800aaba <d_template_args+0x122>
 800ab42:	e8df f003 	tbb	[pc, r3]
 800ab46:	ab7c      	.short	0xab7c
 800ab48:	0447      	.short	0x0447
 800ab4a:	f04f 0a00 	mov.w	sl, #0
 800ab4e:	49c4      	ldr	r1, [pc, #784]	; (800ae60 <d_template_args+0x4c8>)
 800ab50:	4650      	mov	r0, sl
 800ab52:	f004 f979 	bl	800ee48 <strcmp>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	f000 819e 	beq.w	800ae98 <d_template_args+0x500>
 800ab5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab60:	2b6e      	cmp	r3, #110	; 0x6e
 800ab62:	d1aa      	bne.n	800aaba <d_template_args+0x122>
 800ab64:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ab68:	2b77      	cmp	r3, #119	; 0x77
 800ab6a:	d001      	beq.n	800ab70 <d_template_args+0x1d8>
 800ab6c:	2b61      	cmp	r3, #97	; 0x61
 800ab6e:	d1a4      	bne.n	800aaba <d_template_args+0x122>
 800ab70:	215f      	movs	r1, #95	; 0x5f
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 fd86 	bl	800b684 <d_exprlist>
 800ab78:	4681      	mov	r9, r0
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f002 fbf2 	bl	800d364 <d_type>
 800ab80:	68e3      	ldr	r3, [r4, #12]
 800ab82:	4682      	mov	sl, r0
 800ab84:	7819      	ldrb	r1, [r3, #0]
 800ab86:	2945      	cmp	r1, #69	; 0x45
 800ab88:	f000 825e 	beq.w	800b048 <d_template_args+0x6b0>
 800ab8c:	2970      	cmp	r1, #112	; 0x70
 800ab8e:	f000 8343 	beq.w	800b218 <d_template_args+0x880>
 800ab92:	2969      	cmp	r1, #105	; 0x69
 800ab94:	f040 824e 	bne.w	800b034 <d_template_args+0x69c>
 800ab98:	785a      	ldrb	r2, [r3, #1]
 800ab9a:	2a6c      	cmp	r2, #108	; 0x6c
 800ab9c:	f040 824a 	bne.w	800b034 <d_template_args+0x69c>
 800aba0:	4620      	mov	r0, r4
 800aba2:	f002 fa0d 	bl	800cfc0 <d_expression_1>
 800aba6:	4603      	mov	r3, r0
 800aba8:	4652      	mov	r2, sl
 800abaa:	213a      	movs	r1, #58	; 0x3a
 800abac:	4620      	mov	r0, r4
 800abae:	f7fb fff3 	bl	8006b98 <d_make_comp>
 800abb2:	464a      	mov	r2, r9
 800abb4:	4603      	mov	r3, r0
 800abb6:	2139      	movs	r1, #57	; 0x39
 800abb8:	4620      	mov	r0, r4
 800abba:	f7fb ffed 	bl	8006b98 <d_make_comp>
 800abbe:	462a      	mov	r2, r5
 800abc0:	4603      	mov	r3, r0
 800abc2:	2138      	movs	r1, #56	; 0x38
 800abc4:	4620      	mov	r0, r4
 800abc6:	f7fb ffe7 	bl	8006b98 <d_make_comp>
 800abca:	4602      	mov	r2, r0
 800abcc:	68e3      	ldr	r3, [r4, #12]
 800abce:	e728      	b.n	800aa22 <d_template_args+0x8a>
 800abd0:	f04f 0a00 	mov.w	sl, #0
 800abd4:	686b      	ldr	r3, [r5, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	785a      	ldrb	r2, [r3, #1]
 800abda:	2a63      	cmp	r2, #99	; 0x63
 800abdc:	f000 814e 	beq.w	800ae7c <d_template_args+0x4e4>
 800abe0:	4620      	mov	r0, r4
 800abe2:	f002 f9ed 	bl	800cfc0 <d_expression_1>
 800abe6:	4681      	mov	r9, r0
 800abe8:	499e      	ldr	r1, [pc, #632]	; (800ae64 <d_template_args+0x4cc>)
 800abea:	4650      	mov	r0, sl
 800abec:	f004 f92c 	bl	800ee48 <strcmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f000 813d 	beq.w	800ae70 <d_template_args+0x4d8>
 800abf6:	499c      	ldr	r1, [pc, #624]	; (800ae68 <d_template_args+0x4d0>)
 800abf8:	4650      	mov	r0, sl
 800abfa:	f004 f925 	bl	800ee48 <strcmp>
 800abfe:	b130      	cbz	r0, 800ac0e <d_template_args+0x276>
 800ac00:	4650      	mov	r0, sl
 800ac02:	499a      	ldr	r1, [pc, #616]	; (800ae6c <d_template_args+0x4d4>)
 800ac04:	f004 f920 	bl	800ee48 <strcmp>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	f040 8215 	bne.w	800b038 <d_template_args+0x6a0>
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f003 f824 	bl	800dc5c <d_unqualified_name>
 800ac14:	68e3      	ldr	r3, [r4, #12]
 800ac16:	4682      	mov	sl, r0
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b49      	cmp	r3, #73	; 0x49
 800ac1c:	f000 82d3 	beq.w	800b1c6 <d_template_args+0x82e>
 800ac20:	4653      	mov	r3, sl
 800ac22:	464a      	mov	r2, r9
 800ac24:	2137      	movs	r1, #55	; 0x37
 800ac26:	4620      	mov	r0, r4
 800ac28:	f7fb ffb6 	bl	8006b98 <d_make_comp>
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2136      	movs	r1, #54	; 0x36
 800ac32:	4620      	mov	r0, r4
 800ac34:	f7fb ffb0 	bl	8006b98 <d_make_comp>
 800ac38:	68e3      	ldr	r3, [r4, #12]
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	e6f1      	b.n	800aa22 <d_template_args+0x8a>
 800ac3e:	462a      	mov	r2, r5
 800ac40:	2300      	movs	r3, #0
 800ac42:	2134      	movs	r1, #52	; 0x34
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7fb ffa7 	bl	8006b98 <d_make_comp>
 800ac4a:	68e3      	ldr	r3, [r4, #12]
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	e6e8      	b.n	800aa22 <d_template_args+0x8a>
 800ac50:	686b      	ldr	r3, [r5, #4]
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	f63f af31 	bhi.w	800aaba <d_template_args+0x122>
 800ac58:	a201      	add	r2, pc, #4	; (adr r2, 800ac60 <d_template_args+0x2c8>)
 800ac5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5e:	bf00      	nop
 800ac60:	0800ac3f 	.word	0x0800ac3f
 800ac64:	0800ad5b 	.word	0x0800ad5b
 800ac68:	0800abd1 	.word	0x0800abd1
 800ac6c:	0800ab4b 	.word	0x0800ab4b
 800ac70:	4620      	mov	r0, r4
 800ac72:	f7ff fe91 	bl	800a998 <d_template_args>
 800ac76:	462a      	mov	r2, r5
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2104      	movs	r1, #4
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f7fb ff8b 	bl	8006b98 <d_make_comp>
 800ac82:	68e3      	ldr	r3, [r4, #12]
 800ac84:	4602      	mov	r2, r0
 800ac86:	e6cc      	b.n	800aa22 <d_template_args+0x8a>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	3102      	adds	r1, #2
 800ac8e:	60c1      	str	r1, [r0, #12]
 800ac90:	212f      	movs	r1, #47	; 0x2f
 800ac92:	b005      	add	sp, #20
 800ac94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	f7fb bf7e 	b.w	8006b98 <d_make_comp>
 800ac9c:	f1ba 0f00 	cmp.w	sl, #0
 800aca0:	d05b      	beq.n	800ad5a <d_template_args+0x3c2>
 800aca2:	f89a 3000 	ldrb.w	r3, [sl]
 800aca6:	2b70      	cmp	r3, #112	; 0x70
 800aca8:	d001      	beq.n	800acae <d_template_args+0x316>
 800acaa:	2b6d      	cmp	r3, #109	; 0x6d
 800acac:	d155      	bne.n	800ad5a <d_template_args+0x3c2>
 800acae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d151      	bne.n	800ad5a <d_template_args+0x3c2>
 800acb6:	68e2      	ldr	r2, [r4, #12]
 800acb8:	7813      	ldrb	r3, [r2, #0]
 800acba:	2b5f      	cmp	r3, #95	; 0x5f
 800acbc:	f000 8336 	beq.w	800b32c <d_template_args+0x994>
 800acc0:	f04f 0a01 	mov.w	sl, #1
 800acc4:	2b4c      	cmp	r3, #76	; 0x4c
 800acc6:	f000 82c1 	beq.w	800b24c <d_template_args+0x8b4>
 800acca:	2b54      	cmp	r3, #84	; 0x54
 800accc:	f000 82b0 	beq.w	800b230 <d_template_args+0x898>
 800acd0:	2b73      	cmp	r3, #115	; 0x73
 800acd2:	f000 80ee 	beq.w	800aeb2 <d_template_args+0x51a>
 800acd6:	2b66      	cmp	r3, #102	; 0x66
 800acd8:	f000 818c 	beq.w	800aff4 <d_template_args+0x65c>
 800acdc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ace0:	2909      	cmp	r1, #9
 800ace2:	f200 8402 	bhi.w	800b4ea <d_template_args+0xb52>
 800ace6:	4620      	mov	r0, r4
 800ace8:	f002 ffb8 	bl	800dc5c <d_unqualified_name>
 800acec:	4681      	mov	r9, r0
 800acee:	b118      	cbz	r0, 800acf8 <d_template_args+0x360>
 800acf0:	68e3      	ldr	r3, [r4, #12]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	2b49      	cmp	r3, #73	; 0x49
 800acf6:	d064      	beq.n	800adc2 <d_template_args+0x42a>
 800acf8:	f1ba 0f00 	cmp.w	sl, #0
 800acfc:	f000 80a3 	beq.w	800ae46 <d_template_args+0x4ae>
 800ad00:	464b      	mov	r3, r9
 800ad02:	464a      	mov	r2, r9
 800ad04:	2137      	movs	r1, #55	; 0x37
 800ad06:	4620      	mov	r0, r4
 800ad08:	f7fb ff46 	bl	8006b98 <d_make_comp>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	462a      	mov	r2, r5
 800ad10:	2135      	movs	r1, #53	; 0x35
 800ad12:	4620      	mov	r0, r4
 800ad14:	f7fb ff40 	bl	8006b98 <d_make_comp>
 800ad18:	68e3      	ldr	r3, [r4, #12]
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	e681      	b.n	800aa22 <d_template_args+0x8a>
 800ad1e:	3203      	adds	r2, #3
 800ad20:	60e2      	str	r2, [r4, #12]
 800ad22:	4620      	mov	r0, r4
 800ad24:	f002 fb1e 	bl	800d364 <d_type>
 800ad28:	4681      	mov	r9, r0
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f002 ff96 	bl	800dc5c <d_unqualified_name>
 800ad30:	68e3      	ldr	r3, [r4, #12]
 800ad32:	4682      	mov	sl, r0
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	2b49      	cmp	r3, #73	; 0x49
 800ad38:	d038      	beq.n	800adac <d_template_args+0x414>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	464a      	mov	r2, r9
 800ad3e:	4629      	mov	r1, r5
 800ad40:	4620      	mov	r0, r4
 800ad42:	f7fb ff29 	bl	8006b98 <d_make_comp>
 800ad46:	4602      	mov	r2, r0
 800ad48:	e740      	b.n	800abcc <d_template_args+0x234>
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f7fc f8ae 	bl	8006eac <d_compact_number>
 800ad50:	3001      	adds	r0, #1
 800ad52:	f47f aec1 	bne.w	800aad8 <d_template_args+0x140>
 800ad56:	4602      	mov	r2, r0
 800ad58:	e738      	b.n	800abcc <d_template_args+0x234>
 800ad5a:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 800ad5e:	68e2      	ldr	r2, [r4, #12]
 800ad60:	d01e      	beq.n	800ada0 <d_template_args+0x408>
 800ad62:	7813      	ldrb	r3, [r2, #0]
 800ad64:	f04f 0a00 	mov.w	sl, #0
 800ad68:	e7ac      	b.n	800acc4 <d_template_args+0x32c>
 800ad6a:	2b6f      	cmp	r3, #111	; 0x6f
 800ad6c:	d034      	beq.n	800add8 <d_template_args+0x440>
 800ad6e:	2b69      	cmp	r3, #105	; 0x69
 800ad70:	f040 8423 	bne.w	800b5ba <d_template_args+0xc22>
 800ad74:	7893      	ldrb	r3, [r2, #2]
 800ad76:	2b6c      	cmp	r3, #108	; 0x6c
 800ad78:	f47f ae8b 	bne.w	800aa92 <d_template_args+0xfa>
 800ad7c:	2500      	movs	r5, #0
 800ad7e:	68e3      	ldr	r3, [r4, #12]
 800ad80:	2145      	movs	r1, #69	; 0x45
 800ad82:	3302      	adds	r3, #2
 800ad84:	60e3      	str	r3, [r4, #12]
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 fc7c 	bl	800b684 <d_exprlist>
 800ad8c:	462a      	mov	r2, r5
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2130      	movs	r1, #48	; 0x30
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7fb ff00 	bl	8006b98 <d_make_comp>
 800ad98:	68e3      	ldr	r3, [r4, #12]
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	e641      	b.n	800aa22 <d_template_args+0x8a>
 800ad9e:	68e2      	ldr	r2, [r4, #12]
 800ada0:	7813      	ldrb	r3, [r2, #0]
 800ada2:	2b5f      	cmp	r3, #95	; 0x5f
 800ada4:	d048      	beq.n	800ae38 <d_template_args+0x4a0>
 800ada6:	f04f 0a00 	mov.w	sl, #0
 800adaa:	e78b      	b.n	800acc4 <d_template_args+0x32c>
 800adac:	4620      	mov	r0, r4
 800adae:	f7ff fdf3 	bl	800a998 <d_template_args>
 800adb2:	4652      	mov	r2, sl
 800adb4:	4603      	mov	r3, r0
 800adb6:	2104      	movs	r1, #4
 800adb8:	4620      	mov	r0, r4
 800adba:	f7fb feed 	bl	8006b98 <d_make_comp>
 800adbe:	4603      	mov	r3, r0
 800adc0:	e7bc      	b.n	800ad3c <d_template_args+0x3a4>
 800adc2:	4620      	mov	r0, r4
 800adc4:	f7ff fde8 	bl	800a998 <d_template_args>
 800adc8:	464a      	mov	r2, r9
 800adca:	4603      	mov	r3, r0
 800adcc:	2104      	movs	r1, #4
 800adce:	4620      	mov	r0, r4
 800add0:	f7fb fee2 	bl	8006b98 <d_make_comp>
 800add4:	4681      	mov	r9, r0
 800add6:	e78f      	b.n	800acf8 <d_template_args+0x360>
 800add8:	7893      	ldrb	r3, [r2, #2]
 800adda:	2b6e      	cmp	r3, #110	; 0x6e
 800addc:	f47f ae59 	bne.w	800aa92 <d_template_args+0xfa>
 800ade0:	3203      	adds	r2, #3
 800ade2:	60e2      	str	r2, [r4, #12]
 800ade4:	e610      	b.n	800aa08 <d_template_args+0x70>
 800ade6:	1cd3      	adds	r3, r2, #3
 800ade8:	60e3      	str	r3, [r4, #12]
 800adea:	78d3      	ldrb	r3, [r2, #3]
 800adec:	2b4c      	cmp	r3, #76	; 0x4c
 800adee:	f000 825b 	beq.w	800b2a8 <d_template_args+0x910>
 800adf2:	2b54      	cmp	r3, #84	; 0x54
 800adf4:	f000 8275 	beq.w	800b2e2 <d_template_args+0x94a>
 800adf8:	2b73      	cmp	r3, #115	; 0x73
 800adfa:	f000 8129 	beq.w	800b050 <d_template_args+0x6b8>
 800adfe:	2b66      	cmp	r3, #102	; 0x66
 800ae00:	f000 81c2 	beq.w	800b188 <d_template_args+0x7f0>
 800ae04:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ae08:	2909      	cmp	r1, #9
 800ae0a:	f200 83e3 	bhi.w	800b5d4 <d_template_args+0xc3c>
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f002 ff24 	bl	800dc5c <d_unqualified_name>
 800ae14:	4605      	mov	r5, r0
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f000 8244 	beq.w	800b2a4 <d_template_args+0x90c>
 800ae1c:	68e3      	ldr	r3, [r4, #12]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b49      	cmp	r3, #73	; 0x49
 800ae22:	f000 8286 	beq.w	800b332 <d_template_args+0x99a>
 800ae26:	4602      	mov	r2, r0
 800ae28:	2300      	movs	r3, #0
 800ae2a:	2149      	movs	r1, #73	; 0x49
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f7fb feb3 	bl	8006b98 <d_make_comp>
 800ae32:	68e3      	ldr	r3, [r4, #12]
 800ae34:	4602      	mov	r2, r0
 800ae36:	e5f4      	b.n	800aa22 <d_template_args+0x8a>
 800ae38:	3201      	adds	r2, #1
 800ae3a:	60e2      	str	r2, [r4, #12]
 800ae3c:	2145      	movs	r1, #69	; 0x45
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 fc20 	bl	800b684 <d_exprlist>
 800ae44:	4681      	mov	r9, r0
 800ae46:	464b      	mov	r3, r9
 800ae48:	e761      	b.n	800ad0e <d_template_args+0x376>
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f002 fa8a 	bl	800d364 <d_type>
 800ae50:	4603      	mov	r3, r0
 800ae52:	e75c      	b.n	800ad0e <d_template_args+0x376>
 800ae54:	462a      	mov	r2, r5
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	e5e3      	b.n	800aa22 <d_template_args+0x8a>
 800ae5a:	bf00      	nop
 800ae5c:	0801642c 	.word	0x0801642c
 800ae60:	08016124 	.word	0x08016124
 800ae64:	0801611c 	.word	0x0801611c
 800ae68:	08016238 	.word	0x08016238
 800ae6c:	0801623c 	.word	0x0801623c
 800ae70:	2145      	movs	r1, #69	; 0x45
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 fc06 	bl	800b684 <d_exprlist>
 800ae78:	4682      	mov	sl, r0
 800ae7a:	e6d1      	b.n	800ac20 <d_template_args+0x288>
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800ae82:	2a01      	cmp	r2, #1
 800ae84:	d903      	bls.n	800ae8e <d_template_args+0x4f6>
 800ae86:	3b72      	subs	r3, #114	; 0x72
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	f63f aea9 	bhi.w	800abe0 <d_template_args+0x248>
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f002 fa68 	bl	800d364 <d_type>
 800ae94:	4681      	mov	r9, r0
 800ae96:	e6a7      	b.n	800abe8 <d_template_args+0x250>
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f002 f891 	bl	800cfc0 <d_expression_1>
 800ae9e:	4681      	mov	r9, r0
 800aea0:	4620      	mov	r0, r4
 800aea2:	f002 f88d 	bl	800cfc0 <d_expression_1>
 800aea6:	4682      	mov	sl, r0
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f002 f889 	bl	800cfc0 <d_expression_1>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	e67a      	b.n	800aba8 <d_template_args+0x210>
 800aeb2:	7853      	ldrb	r3, [r2, #1]
 800aeb4:	2b72      	cmp	r3, #114	; 0x72
 800aeb6:	f000 8266 	beq.w	800b386 <d_template_args+0x9ee>
 800aeba:	2b70      	cmp	r3, #112	; 0x70
 800aebc:	f000 82a3 	beq.w	800b406 <d_template_args+0xa6e>
 800aec0:	4620      	mov	r0, r4
 800aec2:	f002 fe0b 	bl	800dadc <d_operator_name>
 800aec6:	4681      	mov	r9, r0
 800aec8:	2800      	cmp	r0, #0
 800aeca:	f43f af15 	beq.w	800acf8 <d_template_args+0x360>
 800aece:	7803      	ldrb	r3, [r0, #0]
 800aed0:	2b31      	cmp	r3, #49	; 0x31
 800aed2:	f000 81c0 	beq.w	800b256 <d_template_args+0x8be>
 800aed6:	2b32      	cmp	r3, #50	; 0x32
 800aed8:	f040 8180 	bne.w	800b1dc <d_template_args+0x844>
 800aedc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	f200 80ae 	bhi.w	800b042 <d_template_args+0x6aa>
 800aee6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aeea:	0004      	.short	0x0004
 800aeec:	004e0181 	.word	0x004e0181
 800aef0:	000c      	.short	0x000c
 800aef2:	464a      	mov	r2, r9
 800aef4:	2300      	movs	r3, #0
 800aef6:	2134      	movs	r1, #52	; 0x34
 800aef8:	4620      	mov	r0, r4
 800aefa:	f7fb fe4d 	bl	8006b98 <d_make_comp>
 800aefe:	4681      	mov	r9, r0
 800af00:	e6fa      	b.n	800acf8 <d_template_args+0x360>
 800af02:	f04f 0b00 	mov.w	fp, #0
 800af06:	49cd      	ldr	r1, [pc, #820]	; (800b23c <d_template_args+0x8a4>)
 800af08:	4658      	mov	r0, fp
 800af0a:	f003 ff9d 	bl	800ee48 <strcmp>
 800af0e:	2800      	cmp	r0, #0
 800af10:	f000 82a3 	beq.w	800b45a <d_template_args+0xac2>
 800af14:	f89b 2000 	ldrb.w	r2, [fp]
 800af18:	2a6e      	cmp	r2, #110	; 0x6e
 800af1a:	f040 8092 	bne.w	800b042 <d_template_args+0x6aa>
 800af1e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800af22:	2b77      	cmp	r3, #119	; 0x77
 800af24:	d002      	beq.n	800af2c <d_template_args+0x594>
 800af26:	2b61      	cmp	r3, #97	; 0x61
 800af28:	f040 808b 	bne.w	800b042 <d_template_args+0x6aa>
 800af2c:	215f      	movs	r1, #95	; 0x5f
 800af2e:	4620      	mov	r0, r4
 800af30:	f000 fba8 	bl	800b684 <d_exprlist>
 800af34:	9001      	str	r0, [sp, #4]
 800af36:	4620      	mov	r0, r4
 800af38:	f002 fa14 	bl	800d364 <d_type>
 800af3c:	68e3      	ldr	r3, [r4, #12]
 800af3e:	4683      	mov	fp, r0
 800af40:	781a      	ldrb	r2, [r3, #0]
 800af42:	2a45      	cmp	r2, #69	; 0x45
 800af44:	f000 8317 	beq.w	800b576 <d_template_args+0xbde>
 800af48:	2a70      	cmp	r2, #112	; 0x70
 800af4a:	f000 8309 	beq.w	800b560 <d_template_args+0xbc8>
 800af4e:	2a69      	cmp	r2, #105	; 0x69
 800af50:	d177      	bne.n	800b042 <d_template_args+0x6aa>
 800af52:	785b      	ldrb	r3, [r3, #1]
 800af54:	2b6c      	cmp	r3, #108	; 0x6c
 800af56:	d174      	bne.n	800b042 <d_template_args+0x6aa>
 800af58:	4620      	mov	r0, r4
 800af5a:	f002 f831 	bl	800cfc0 <d_expression_1>
 800af5e:	4603      	mov	r3, r0
 800af60:	465a      	mov	r2, fp
 800af62:	213a      	movs	r1, #58	; 0x3a
 800af64:	4620      	mov	r0, r4
 800af66:	f7fb fe17 	bl	8006b98 <d_make_comp>
 800af6a:	9a01      	ldr	r2, [sp, #4]
 800af6c:	4603      	mov	r3, r0
 800af6e:	2139      	movs	r1, #57	; 0x39
 800af70:	4620      	mov	r0, r4
 800af72:	f7fb fe11 	bl	8006b98 <d_make_comp>
 800af76:	464a      	mov	r2, r9
 800af78:	4603      	mov	r3, r0
 800af7a:	2138      	movs	r1, #56	; 0x38
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7fb fe0b 	bl	8006b98 <d_make_comp>
 800af82:	4681      	mov	r9, r0
 800af84:	e6b8      	b.n	800acf8 <d_template_args+0x360>
 800af86:	f04f 0b00 	mov.w	fp, #0
 800af8a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800af8e:	6812      	ldr	r2, [r2, #0]
 800af90:	7851      	ldrb	r1, [r2, #1]
 800af92:	2963      	cmp	r1, #99	; 0x63
 800af94:	f000 8296 	beq.w	800b4c4 <d_template_args+0xb2c>
 800af98:	4620      	mov	r0, r4
 800af9a:	f002 f811 	bl	800cfc0 <d_expression_1>
 800af9e:	9001      	str	r0, [sp, #4]
 800afa0:	49a7      	ldr	r1, [pc, #668]	; (800b240 <d_template_args+0x8a8>)
 800afa2:	4658      	mov	r0, fp
 800afa4:	f003 ff50 	bl	800ee48 <strcmp>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	f000 8244 	beq.w	800b436 <d_template_args+0xa9e>
 800afae:	49a5      	ldr	r1, [pc, #660]	; (800b244 <d_template_args+0x8ac>)
 800afb0:	4658      	mov	r0, fp
 800afb2:	f003 ff49 	bl	800ee48 <strcmp>
 800afb6:	b130      	cbz	r0, 800afc6 <d_template_args+0x62e>
 800afb8:	4658      	mov	r0, fp
 800afba:	49a3      	ldr	r1, [pc, #652]	; (800b248 <d_template_args+0x8b0>)
 800afbc:	f003 ff44 	bl	800ee48 <strcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	f040 828d 	bne.w	800b4e0 <d_template_args+0xb48>
 800afc6:	4620      	mov	r0, r4
 800afc8:	f002 fe48 	bl	800dc5c <d_unqualified_name>
 800afcc:	68e3      	ldr	r3, [r4, #12]
 800afce:	4683      	mov	fp, r0
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2b49      	cmp	r3, #73	; 0x49
 800afd4:	f000 833e 	beq.w	800b654 <d_template_args+0xcbc>
 800afd8:	465b      	mov	r3, fp
 800afda:	9a01      	ldr	r2, [sp, #4]
 800afdc:	2137      	movs	r1, #55	; 0x37
 800afde:	4620      	mov	r0, r4
 800afe0:	f7fb fdda 	bl	8006b98 <d_make_comp>
 800afe4:	464a      	mov	r2, r9
 800afe6:	4603      	mov	r3, r0
 800afe8:	2136      	movs	r1, #54	; 0x36
 800afea:	4620      	mov	r0, r4
 800afec:	f7fb fdd4 	bl	8006b98 <d_make_comp>
 800aff0:	4681      	mov	r9, r0
 800aff2:	e681      	b.n	800acf8 <d_template_args+0x360>
 800aff4:	7853      	ldrb	r3, [r2, #1]
 800aff6:	2b70      	cmp	r3, #112	; 0x70
 800aff8:	f47f af62 	bne.w	800aec0 <d_template_args+0x528>
 800affc:	1c93      	adds	r3, r2, #2
 800affe:	60e3      	str	r3, [r4, #12]
 800b000:	7893      	ldrb	r3, [r2, #2]
 800b002:	2b54      	cmp	r3, #84	; 0x54
 800b004:	f040 81b7 	bne.w	800b376 <d_template_args+0x9de>
 800b008:	3203      	adds	r2, #3
 800b00a:	60e2      	str	r2, [r4, #12]
 800b00c:	2000      	movs	r0, #0
 800b00e:	6963      	ldr	r3, [r4, #20]
 800b010:	69a2      	ldr	r2, [r4, #24]
 800b012:	4293      	cmp	r3, r2
 800b014:	da15      	bge.n	800b042 <d_template_args+0x6aa>
 800b016:	6922      	ldr	r2, [r4, #16]
 800b018:	1c59      	adds	r1, r3, #1
 800b01a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b01e:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 800b022:	6161      	str	r1, [r4, #20]
 800b024:	f43f ae68 	beq.w	800acf8 <d_template_args+0x360>
 800b028:	2106      	movs	r1, #6
 800b02a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800b02e:	f8c9 0004 	str.w	r0, [r9, #4]
 800b032:	e661      	b.n	800acf8 <d_template_args+0x360>
 800b034:	2200      	movs	r2, #0
 800b036:	e4f4      	b.n	800aa22 <d_template_args+0x8a>
 800b038:	4620      	mov	r0, r4
 800b03a:	f001 ffc1 	bl	800cfc0 <d_expression_1>
 800b03e:	4682      	mov	sl, r0
 800b040:	e5ee      	b.n	800ac20 <d_template_args+0x288>
 800b042:	f04f 0900 	mov.w	r9, #0
 800b046:	e657      	b.n	800acf8 <d_template_args+0x360>
 800b048:	3301      	adds	r3, #1
 800b04a:	60e3      	str	r3, [r4, #12]
 800b04c:	2300      	movs	r3, #0
 800b04e:	e5ab      	b.n	800aba8 <d_template_args+0x210>
 800b050:	7913      	ldrb	r3, [r2, #4]
 800b052:	2b72      	cmp	r3, #114	; 0x72
 800b054:	f000 81ad 	beq.w	800b3b2 <d_template_args+0xa1a>
 800b058:	2b70      	cmp	r3, #112	; 0x70
 800b05a:	f000 8223 	beq.w	800b4a4 <d_template_args+0xb0c>
 800b05e:	4620      	mov	r0, r4
 800b060:	f002 fd3c 	bl	800dadc <d_operator_name>
 800b064:	4681      	mov	r9, r0
 800b066:	2800      	cmp	r0, #0
 800b068:	f000 811c 	beq.w	800b2a4 <d_template_args+0x90c>
 800b06c:	7803      	ldrb	r3, [r0, #0]
 800b06e:	2b31      	cmp	r3, #49	; 0x31
 800b070:	f000 813b 	beq.w	800b2ea <d_template_args+0x952>
 800b074:	2b32      	cmp	r3, #50	; 0x32
 800b076:	f040 811b 	bne.w	800b2b0 <d_template_args+0x918>
 800b07a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b07e:	2b03      	cmp	r3, #3
 800b080:	f200 8110 	bhi.w	800b2a4 <d_template_args+0x90c>
 800b084:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b088:	011b0004 	.word	0x011b0004
 800b08c:	000b004b 	.word	0x000b004b
 800b090:	464a      	mov	r2, r9
 800b092:	2300      	movs	r3, #0
 800b094:	2134      	movs	r1, #52	; 0x34
 800b096:	4620      	mov	r0, r4
 800b098:	f7fb fd7e 	bl	8006b98 <d_make_comp>
 800b09c:	e6c3      	b.n	800ae26 <d_template_args+0x48e>
 800b09e:	2500      	movs	r5, #0
 800b0a0:	4966      	ldr	r1, [pc, #408]	; (800b23c <d_template_args+0x8a4>)
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f003 fed0 	bl	800ee48 <strcmp>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	f000 81ca 	beq.w	800b442 <d_template_args+0xaaa>
 800b0ae:	782b      	ldrb	r3, [r5, #0]
 800b0b0:	2b6e      	cmp	r3, #110	; 0x6e
 800b0b2:	f040 80f7 	bne.w	800b2a4 <d_template_args+0x90c>
 800b0b6:	786b      	ldrb	r3, [r5, #1]
 800b0b8:	2b77      	cmp	r3, #119	; 0x77
 800b0ba:	d002      	beq.n	800b0c2 <d_template_args+0x72a>
 800b0bc:	2b61      	cmp	r3, #97	; 0x61
 800b0be:	f040 80f1 	bne.w	800b2a4 <d_template_args+0x90c>
 800b0c2:	215f      	movs	r1, #95	; 0x5f
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fadd 	bl	800b684 <d_exprlist>
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f002 f949 	bl	800d364 <d_type>
 800b0d2:	68e3      	ldr	r3, [r4, #12]
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	781a      	ldrb	r2, [r3, #0]
 800b0d8:	2a45      	cmp	r2, #69	; 0x45
 800b0da:	f000 82b7 	beq.w	800b64c <d_template_args+0xcb4>
 800b0de:	2a70      	cmp	r2, #112	; 0x70
 800b0e0:	f000 82a9 	beq.w	800b636 <d_template_args+0xc9e>
 800b0e4:	2a69      	cmp	r2, #105	; 0x69
 800b0e6:	f040 80dd 	bne.w	800b2a4 <d_template_args+0x90c>
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b6c      	cmp	r3, #108	; 0x6c
 800b0ee:	f040 80d9 	bne.w	800b2a4 <d_template_args+0x90c>
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f001 ff64 	bl	800cfc0 <d_expression_1>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	4652      	mov	r2, sl
 800b0fc:	213a      	movs	r1, #58	; 0x3a
 800b0fe:	4620      	mov	r0, r4
 800b100:	f7fb fd4a 	bl	8006b98 <d_make_comp>
 800b104:	462a      	mov	r2, r5
 800b106:	4603      	mov	r3, r0
 800b108:	2139      	movs	r1, #57	; 0x39
 800b10a:	4620      	mov	r0, r4
 800b10c:	f7fb fd44 	bl	8006b98 <d_make_comp>
 800b110:	464a      	mov	r2, r9
 800b112:	4603      	mov	r3, r0
 800b114:	2138      	movs	r1, #56	; 0x38
 800b116:	4620      	mov	r0, r4
 800b118:	f7fb fd3e 	bl	8006b98 <d_make_comp>
 800b11c:	e683      	b.n	800ae26 <d_template_args+0x48e>
 800b11e:	2500      	movs	r5, #0
 800b120:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	785a      	ldrb	r2, [r3, #1]
 800b128:	2a63      	cmp	r2, #99	; 0x63
 800b12a:	f000 81a8 	beq.w	800b47e <d_template_args+0xae6>
 800b12e:	4620      	mov	r0, r4
 800b130:	f001 ff46 	bl	800cfc0 <d_expression_1>
 800b134:	4682      	mov	sl, r0
 800b136:	4942      	ldr	r1, [pc, #264]	; (800b240 <d_template_args+0x8a8>)
 800b138:	4628      	mov	r0, r5
 800b13a:	f003 fe85 	bl	800ee48 <strcmp>
 800b13e:	2800      	cmp	r0, #0
 800b140:	f000 8197 	beq.w	800b472 <d_template_args+0xada>
 800b144:	493f      	ldr	r1, [pc, #252]	; (800b244 <d_template_args+0x8ac>)
 800b146:	4628      	mov	r0, r5
 800b148:	f003 fe7e 	bl	800ee48 <strcmp>
 800b14c:	b130      	cbz	r0, 800b15c <d_template_args+0x7c4>
 800b14e:	4628      	mov	r0, r5
 800b150:	493d      	ldr	r1, [pc, #244]	; (800b248 <d_template_args+0x8b0>)
 800b152:	f003 fe79 	bl	800ee48 <strcmp>
 800b156:	2800      	cmp	r0, #0
 800b158:	f040 822a 	bne.w	800b5b0 <d_template_args+0xc18>
 800b15c:	4620      	mov	r0, r4
 800b15e:	f002 fd7d 	bl	800dc5c <d_unqualified_name>
 800b162:	68e3      	ldr	r3, [r4, #12]
 800b164:	4605      	mov	r5, r0
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	2b49      	cmp	r3, #73	; 0x49
 800b16a:	f000 820b 	beq.w	800b584 <d_template_args+0xbec>
 800b16e:	462b      	mov	r3, r5
 800b170:	4652      	mov	r2, sl
 800b172:	2137      	movs	r1, #55	; 0x37
 800b174:	4620      	mov	r0, r4
 800b176:	f7fb fd0f 	bl	8006b98 <d_make_comp>
 800b17a:	464a      	mov	r2, r9
 800b17c:	4603      	mov	r3, r0
 800b17e:	2136      	movs	r1, #54	; 0x36
 800b180:	4620      	mov	r0, r4
 800b182:	f7fb fd09 	bl	8006b98 <d_make_comp>
 800b186:	e64e      	b.n	800ae26 <d_template_args+0x48e>
 800b188:	7913      	ldrb	r3, [r2, #4]
 800b18a:	2b70      	cmp	r3, #112	; 0x70
 800b18c:	f47f af67 	bne.w	800b05e <d_template_args+0x6c6>
 800b190:	1d53      	adds	r3, r2, #5
 800b192:	60e3      	str	r3, [r4, #12]
 800b194:	7953      	ldrb	r3, [r2, #5]
 800b196:	2b54      	cmp	r3, #84	; 0x54
 800b198:	d17e      	bne.n	800b298 <d_template_args+0x900>
 800b19a:	3206      	adds	r2, #6
 800b19c:	60e2      	str	r2, [r4, #12]
 800b19e:	2500      	movs	r5, #0
 800b1a0:	6963      	ldr	r3, [r4, #20]
 800b1a2:	69a2      	ldr	r2, [r4, #24]
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	da7d      	bge.n	800b2a4 <d_template_args+0x90c>
 800b1a8:	6921      	ldr	r1, [r4, #16]
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b1b0:	6162      	str	r2, [r4, #20]
 800b1b2:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800b1b6:	f000 8238 	beq.w	800b62a <d_template_args+0xc92>
 800b1ba:	2006      	movs	r0, #6
 800b1bc:	f801 0023 	strb.w	r0, [r1, r3, lsl #2]
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	6055      	str	r5, [r2, #4]
 800b1c4:	e62f      	b.n	800ae26 <d_template_args+0x48e>
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f7ff fbe6 	bl	800a998 <d_template_args>
 800b1cc:	4652      	mov	r2, sl
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2104      	movs	r1, #4
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f7fb fce0 	bl	8006b98 <d_make_comp>
 800b1d8:	4682      	mov	sl, r0
 800b1da:	e521      	b.n	800ac20 <d_template_args+0x288>
 800b1dc:	2b33      	cmp	r3, #51	; 0x33
 800b1de:	f47f af30 	bne.w	800b042 <d_template_args+0x6aa>
 800b1e2:	68e3      	ldr	r3, [r4, #12]
 800b1e4:	781a      	ldrb	r2, [r3, #0]
 800b1e6:	2a5f      	cmp	r2, #95	; 0x5f
 800b1e8:	f000 81a2 	beq.w	800b530 <d_template_args+0xb98>
 800b1ec:	f04f 0b00 	mov.w	fp, #0
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f001 fee5 	bl	800cfc0 <d_expression_1>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f1bb 0f00 	cmp.w	fp, #0
 800b1fc:	d005      	beq.n	800b20a <d_template_args+0x872>
 800b1fe:	4602      	mov	r2, r0
 800b200:	2137      	movs	r1, #55	; 0x37
 800b202:	4620      	mov	r0, r4
 800b204:	f7fb fcc8 	bl	8006b98 <d_make_comp>
 800b208:	4603      	mov	r3, r0
 800b20a:	464a      	mov	r2, r9
 800b20c:	2135      	movs	r1, #53	; 0x35
 800b20e:	4620      	mov	r0, r4
 800b210:	f7fb fcc2 	bl	8006b98 <d_make_comp>
 800b214:	4681      	mov	r9, r0
 800b216:	e56f      	b.n	800acf8 <d_template_args+0x360>
 800b218:	785a      	ldrb	r2, [r3, #1]
 800b21a:	2a69      	cmp	r2, #105	; 0x69
 800b21c:	f47f af0a 	bne.w	800b034 <d_template_args+0x69c>
 800b220:	3302      	adds	r3, #2
 800b222:	60e3      	str	r3, [r4, #12]
 800b224:	2145      	movs	r1, #69	; 0x45
 800b226:	4620      	mov	r0, r4
 800b228:	f000 fa2c 	bl	800b684 <d_exprlist>
 800b22c:	4603      	mov	r3, r0
 800b22e:	e4bb      	b.n	800aba8 <d_template_args+0x210>
 800b230:	4620      	mov	r0, r4
 800b232:	f7fb fe53 	bl	8006edc <d_template_param>
 800b236:	4681      	mov	r9, r0
 800b238:	e55e      	b.n	800acf8 <d_template_args+0x360>
 800b23a:	bf00      	nop
 800b23c:	08016124 	.word	0x08016124
 800b240:	0801611c 	.word	0x0801611c
 800b244:	08016238 	.word	0x08016238
 800b248:	0801623c 	.word	0x0801623c
 800b24c:	4620      	mov	r0, r4
 800b24e:	f003 fb81 	bl	800e954 <d_expr_primary>
 800b252:	4681      	mov	r9, r0
 800b254:	e550      	b.n	800acf8 <d_template_args+0x360>
 800b256:	6843      	ldr	r3, [r0, #4]
 800b258:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	f8d3 b000 	ldr.w	fp, [r3]
 800b260:	3a02      	subs	r2, #2
 800b262:	440a      	add	r2, r1
 800b264:	6322      	str	r2, [r4, #48]	; 0x30
 800b266:	4658      	mov	r0, fp
 800b268:	49d0      	ldr	r1, [pc, #832]	; (800b5ac <d_template_args+0xc14>)
 800b26a:	9301      	str	r3, [sp, #4]
 800b26c:	f003 fdec 	bl	800ee48 <strcmp>
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	2800      	cmp	r0, #0
 800b274:	f000 8111 	beq.w	800b49a <d_template_args+0xb02>
 800b278:	68da      	ldr	r2, [r3, #12]
 800b27a:	2a03      	cmp	r2, #3
 800b27c:	f63f aee1 	bhi.w	800b042 <d_template_args+0x6aa>
 800b280:	a301      	add	r3, pc, #4	; (adr r3, 800b288 <d_template_args+0x8f0>)
 800b282:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800aef3 	.word	0x0800aef3
 800b28c:	0800b347 	.word	0x0800b347
 800b290:	0800af8b 	.word	0x0800af8b
 800b294:	0800af07 	.word	0x0800af07
 800b298:	4620      	mov	r0, r4
 800b29a:	f7fb fe07 	bl	8006eac <d_compact_number>
 800b29e:	1c45      	adds	r5, r0, #1
 800b2a0:	f47f af7e 	bne.w	800b1a0 <d_template_args+0x808>
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	e5be      	b.n	800ae26 <d_template_args+0x48e>
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f003 fb53 	bl	800e954 <d_expr_primary>
 800b2ae:	e5ba      	b.n	800ae26 <d_template_args+0x48e>
 800b2b0:	2b33      	cmp	r3, #51	; 0x33
 800b2b2:	d1f7      	bne.n	800b2a4 <d_template_args+0x90c>
 800b2b4:	68e3      	ldr	r3, [r4, #12]
 800b2b6:	781a      	ldrb	r2, [r3, #0]
 800b2b8:	2a5f      	cmp	r2, #95	; 0x5f
 800b2ba:	f000 816e 	beq.w	800b59a <d_template_args+0xc02>
 800b2be:	2500      	movs	r5, #0
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f001 fe7d 	bl	800cfc0 <d_expression_1>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	b12d      	cbz	r5, 800b2d6 <d_template_args+0x93e>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	2137      	movs	r1, #55	; 0x37
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f7fb fc62 	bl	8006b98 <d_make_comp>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	464a      	mov	r2, r9
 800b2d8:	2135      	movs	r1, #53	; 0x35
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f7fb fc5c 	bl	8006b98 <d_make_comp>
 800b2e0:	e5a1      	b.n	800ae26 <d_template_args+0x48e>
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f7fb fdfa 	bl	8006edc <d_template_param>
 800b2e8:	e59d      	b.n	800ae26 <d_template_args+0x48e>
 800b2ea:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b2ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b2f0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b2f4:	f8da 5000 	ldr.w	r5, [sl]
 800b2f8:	3b02      	subs	r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	6323      	str	r3, [r4, #48]	; 0x30
 800b2fe:	4628      	mov	r0, r5
 800b300:	49aa      	ldr	r1, [pc, #680]	; (800b5ac <d_template_args+0xc14>)
 800b302:	f003 fda1 	bl	800ee48 <strcmp>
 800b306:	2800      	cmp	r0, #0
 800b308:	f000 80d8 	beq.w	800b4bc <d_template_args+0xb24>
 800b30c:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b310:	2b03      	cmp	r3, #3
 800b312:	d8c7      	bhi.n	800b2a4 <d_template_args+0x90c>
 800b314:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <d_template_args+0x984>)
 800b316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31a:	bf00      	nop
 800b31c:	0800b091 	.word	0x0800b091
 800b320:	0800b3df 	.word	0x0800b3df
 800b324:	0800b121 	.word	0x0800b121
 800b328:	0800b0a1 	.word	0x0800b0a1
 800b32c:	3201      	adds	r2, #1
 800b32e:	60e2      	str	r2, [r4, #12]
 800b330:	e517      	b.n	800ad62 <d_template_args+0x3ca>
 800b332:	4620      	mov	r0, r4
 800b334:	f7ff fb30 	bl	800a998 <d_template_args>
 800b338:	462a      	mov	r2, r5
 800b33a:	4603      	mov	r3, r0
 800b33c:	2104      	movs	r1, #4
 800b33e:	4620      	mov	r0, r4
 800b340:	f7fb fc2a 	bl	8006b98 <d_make_comp>
 800b344:	e56f      	b.n	800ae26 <d_template_args+0x48e>
 800b346:	f1bb 0f00 	cmp.w	fp, #0
 800b34a:	f43f af4f 	beq.w	800b1ec <d_template_args+0x854>
 800b34e:	f89b 2000 	ldrb.w	r2, [fp]
 800b352:	2a70      	cmp	r2, #112	; 0x70
 800b354:	d002      	beq.n	800b35c <d_template_args+0x9c4>
 800b356:	2a6d      	cmp	r2, #109	; 0x6d
 800b358:	f47f af48 	bne.w	800b1ec <d_template_args+0x854>
 800b35c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800b360:	4293      	cmp	r3, r2
 800b362:	f47f af43 	bne.w	800b1ec <d_template_args+0x854>
 800b366:	68e3      	ldr	r3, [r4, #12]
 800b368:	781a      	ldrb	r2, [r3, #0]
 800b36a:	2a5f      	cmp	r2, #95	; 0x5f
 800b36c:	f000 8107 	beq.w	800b57e <d_template_args+0xbe6>
 800b370:	f04f 0b01 	mov.w	fp, #1
 800b374:	e73c      	b.n	800b1f0 <d_template_args+0x858>
 800b376:	4620      	mov	r0, r4
 800b378:	f7fb fd98 	bl	8006eac <d_compact_number>
 800b37c:	3001      	adds	r0, #1
 800b37e:	f47f ae46 	bne.w	800b00e <d_template_args+0x676>
 800b382:	4681      	mov	r9, r0
 800b384:	e4b8      	b.n	800acf8 <d_template_args+0x360>
 800b386:	3202      	adds	r2, #2
 800b388:	60e2      	str	r2, [r4, #12]
 800b38a:	4620      	mov	r0, r4
 800b38c:	f001 ffea 	bl	800d364 <d_type>
 800b390:	4681      	mov	r9, r0
 800b392:	4620      	mov	r0, r4
 800b394:	f002 fc62 	bl	800dc5c <d_unqualified_name>
 800b398:	68e3      	ldr	r3, [r4, #12]
 800b39a:	4683      	mov	fp, r0
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	2b49      	cmp	r3, #73	; 0x49
 800b3a0:	d03e      	beq.n	800b420 <d_template_args+0xa88>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	464a      	mov	r2, r9
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f7fb fbf5 	bl	8006b98 <d_make_comp>
 800b3ae:	4681      	mov	r9, r0
 800b3b0:	e4a2      	b.n	800acf8 <d_template_args+0x360>
 800b3b2:	3205      	adds	r2, #5
 800b3b4:	60e2      	str	r2, [r4, #12]
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 ffd4 	bl	800d364 <d_type>
 800b3bc:	4605      	mov	r5, r0
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f002 fc4c 	bl	800dc5c <d_unqualified_name>
 800b3c4:	68e3      	ldr	r3, [r4, #12]
 800b3c6:	4681      	mov	r9, r0
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b49      	cmp	r3, #73	; 0x49
 800b3cc:	f000 80b8 	beq.w	800b540 <d_template_args+0xba8>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7fb fbde 	bl	8006b98 <d_make_comp>
 800b3dc:	e523      	b.n	800ae26 <d_template_args+0x48e>
 800b3de:	2d00      	cmp	r5, #0
 800b3e0:	f43f af6d 	beq.w	800b2be <d_template_args+0x926>
 800b3e4:	782b      	ldrb	r3, [r5, #0]
 800b3e6:	2b70      	cmp	r3, #112	; 0x70
 800b3e8:	d002      	beq.n	800b3f0 <d_template_args+0xa58>
 800b3ea:	2b6d      	cmp	r3, #109	; 0x6d
 800b3ec:	f47f af67 	bne.w	800b2be <d_template_args+0x926>
 800b3f0:	786a      	ldrb	r2, [r5, #1]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	f47f af63 	bne.w	800b2be <d_template_args+0x926>
 800b3f8:	68e3      	ldr	r3, [r4, #12]
 800b3fa:	781a      	ldrb	r2, [r3, #0]
 800b3fc:	2a5f      	cmp	r2, #95	; 0x5f
 800b3fe:	f000 8117 	beq.w	800b630 <d_template_args+0xc98>
 800b402:	2501      	movs	r5, #1
 800b404:	e75c      	b.n	800b2c0 <d_template_args+0x928>
 800b406:	3202      	adds	r2, #2
 800b408:	60e2      	str	r2, [r4, #12]
 800b40a:	4620      	mov	r0, r4
 800b40c:	f001 fdd8 	bl	800cfc0 <d_expression_1>
 800b410:	2300      	movs	r3, #0
 800b412:	4602      	mov	r2, r0
 800b414:	2149      	movs	r1, #73	; 0x49
 800b416:	4620      	mov	r0, r4
 800b418:	f7fb fbbe 	bl	8006b98 <d_make_comp>
 800b41c:	4681      	mov	r9, r0
 800b41e:	e46b      	b.n	800acf8 <d_template_args+0x360>
 800b420:	4620      	mov	r0, r4
 800b422:	f7ff fab9 	bl	800a998 <d_template_args>
 800b426:	465a      	mov	r2, fp
 800b428:	4603      	mov	r3, r0
 800b42a:	2104      	movs	r1, #4
 800b42c:	4620      	mov	r0, r4
 800b42e:	f7fb fbb3 	bl	8006b98 <d_make_comp>
 800b432:	4603      	mov	r3, r0
 800b434:	e7b6      	b.n	800b3a4 <d_template_args+0xa0c>
 800b436:	2145      	movs	r1, #69	; 0x45
 800b438:	4620      	mov	r0, r4
 800b43a:	f000 f923 	bl	800b684 <d_exprlist>
 800b43e:	4683      	mov	fp, r0
 800b440:	e5ca      	b.n	800afd8 <d_template_args+0x640>
 800b442:	4620      	mov	r0, r4
 800b444:	f001 fdbc 	bl	800cfc0 <d_expression_1>
 800b448:	4605      	mov	r5, r0
 800b44a:	4620      	mov	r0, r4
 800b44c:	f001 fdb8 	bl	800cfc0 <d_expression_1>
 800b450:	4682      	mov	sl, r0
 800b452:	4620      	mov	r0, r4
 800b454:	f001 fdb4 	bl	800cfc0 <d_expression_1>
 800b458:	e64e      	b.n	800b0f8 <d_template_args+0x760>
 800b45a:	4620      	mov	r0, r4
 800b45c:	f001 fdb0 	bl	800cfc0 <d_expression_1>
 800b460:	9001      	str	r0, [sp, #4]
 800b462:	4620      	mov	r0, r4
 800b464:	f001 fdac 	bl	800cfc0 <d_expression_1>
 800b468:	4683      	mov	fp, r0
 800b46a:	4620      	mov	r0, r4
 800b46c:	f001 fda8 	bl	800cfc0 <d_expression_1>
 800b470:	e575      	b.n	800af5e <d_template_args+0x5c6>
 800b472:	2145      	movs	r1, #69	; 0x45
 800b474:	4620      	mov	r0, r4
 800b476:	f000 f905 	bl	800b684 <d_exprlist>
 800b47a:	4605      	mov	r5, r0
 800b47c:	e677      	b.n	800b16e <d_template_args+0x7d6>
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800b484:	2a01      	cmp	r2, #1
 800b486:	d903      	bls.n	800b490 <d_template_args+0xaf8>
 800b488:	3b72      	subs	r3, #114	; 0x72
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	f63f ae4f 	bhi.w	800b12e <d_template_args+0x796>
 800b490:	4620      	mov	r0, r4
 800b492:	f001 ff67 	bl	800d364 <d_type>
 800b496:	4682      	mov	sl, r0
 800b498:	e64d      	b.n	800b136 <d_template_args+0x79e>
 800b49a:	4620      	mov	r0, r4
 800b49c:	f001 ff62 	bl	800d364 <d_type>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	e6b2      	b.n	800b20a <d_template_args+0x872>
 800b4a4:	3205      	adds	r2, #5
 800b4a6:	60e2      	str	r2, [r4, #12]
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f001 fd89 	bl	800cfc0 <d_expression_1>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	2149      	movs	r1, #73	; 0x49
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f7fb fb6f 	bl	8006b98 <d_make_comp>
 800b4ba:	e4b4      	b.n	800ae26 <d_template_args+0x48e>
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f001 ff51 	bl	800d364 <d_type>
 800b4c2:	e707      	b.n	800b2d4 <d_template_args+0x93c>
 800b4c4:	7812      	ldrb	r2, [r2, #0]
 800b4c6:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800b4ca:	2901      	cmp	r1, #1
 800b4cc:	d903      	bls.n	800b4d6 <d_template_args+0xb3e>
 800b4ce:	3a72      	subs	r2, #114	; 0x72
 800b4d0:	2a01      	cmp	r2, #1
 800b4d2:	f63f ad61 	bhi.w	800af98 <d_template_args+0x600>
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f001 ff44 	bl	800d364 <d_type>
 800b4dc:	9001      	str	r0, [sp, #4]
 800b4de:	e55f      	b.n	800afa0 <d_template_args+0x608>
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f001 fd6d 	bl	800cfc0 <d_expression_1>
 800b4e6:	4683      	mov	fp, r0
 800b4e8:	e576      	b.n	800afd8 <d_template_args+0x640>
 800b4ea:	2b6f      	cmp	r3, #111	; 0x6f
 800b4ec:	d018      	beq.n	800b520 <d_template_args+0xb88>
 800b4ee:	2b69      	cmp	r3, #105	; 0x69
 800b4f0:	f040 80bb 	bne.w	800b66a <d_template_args+0xcd2>
 800b4f4:	7853      	ldrb	r3, [r2, #1]
 800b4f6:	2b6c      	cmp	r3, #108	; 0x6c
 800b4f8:	f47f ace2 	bne.w	800aec0 <d_template_args+0x528>
 800b4fc:	f04f 0900 	mov.w	r9, #0
 800b500:	68e3      	ldr	r3, [r4, #12]
 800b502:	2145      	movs	r1, #69	; 0x45
 800b504:	3302      	adds	r3, #2
 800b506:	60e3      	str	r3, [r4, #12]
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 f8bb 	bl	800b684 <d_exprlist>
 800b50e:	464a      	mov	r2, r9
 800b510:	4603      	mov	r3, r0
 800b512:	2130      	movs	r1, #48	; 0x30
 800b514:	4620      	mov	r0, r4
 800b516:	f7fb fb3f 	bl	8006b98 <d_make_comp>
 800b51a:	4681      	mov	r9, r0
 800b51c:	f7ff bbec 	b.w	800acf8 <d_template_args+0x360>
 800b520:	7853      	ldrb	r3, [r2, #1]
 800b522:	2b6e      	cmp	r3, #110	; 0x6e
 800b524:	f47f accc 	bne.w	800aec0 <d_template_args+0x528>
 800b528:	3202      	adds	r2, #2
 800b52a:	60e2      	str	r2, [r4, #12]
 800b52c:	f7ff bbdb 	b.w	800ace6 <d_template_args+0x34e>
 800b530:	3301      	adds	r3, #1
 800b532:	60e3      	str	r3, [r4, #12]
 800b534:	2145      	movs	r1, #69	; 0x45
 800b536:	4620      	mov	r0, r4
 800b538:	f000 f8a4 	bl	800b684 <d_exprlist>
 800b53c:	4603      	mov	r3, r0
 800b53e:	e664      	b.n	800b20a <d_template_args+0x872>
 800b540:	4620      	mov	r0, r4
 800b542:	f7ff fa29 	bl	800a998 <d_template_args>
 800b546:	464a      	mov	r2, r9
 800b548:	4603      	mov	r3, r0
 800b54a:	2104      	movs	r1, #4
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7fb fb23 	bl	8006b98 <d_make_comp>
 800b552:	462a      	mov	r2, r5
 800b554:	4603      	mov	r3, r0
 800b556:	2101      	movs	r1, #1
 800b558:	4620      	mov	r0, r4
 800b55a:	f7fb fb1d 	bl	8006b98 <d_make_comp>
 800b55e:	e462      	b.n	800ae26 <d_template_args+0x48e>
 800b560:	785a      	ldrb	r2, [r3, #1]
 800b562:	2a69      	cmp	r2, #105	; 0x69
 800b564:	f47f ad6d 	bne.w	800b042 <d_template_args+0x6aa>
 800b568:	3302      	adds	r3, #2
 800b56a:	60e3      	str	r3, [r4, #12]
 800b56c:	2145      	movs	r1, #69	; 0x45
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 f888 	bl	800b684 <d_exprlist>
 800b574:	e4f3      	b.n	800af5e <d_template_args+0x5c6>
 800b576:	3301      	adds	r3, #1
 800b578:	60e3      	str	r3, [r4, #12]
 800b57a:	2000      	movs	r0, #0
 800b57c:	e4ef      	b.n	800af5e <d_template_args+0x5c6>
 800b57e:	3301      	adds	r3, #1
 800b580:	60e3      	str	r3, [r4, #12]
 800b582:	e633      	b.n	800b1ec <d_template_args+0x854>
 800b584:	4620      	mov	r0, r4
 800b586:	f7ff fa07 	bl	800a998 <d_template_args>
 800b58a:	462a      	mov	r2, r5
 800b58c:	4603      	mov	r3, r0
 800b58e:	2104      	movs	r1, #4
 800b590:	4620      	mov	r0, r4
 800b592:	f7fb fb01 	bl	8006b98 <d_make_comp>
 800b596:	4605      	mov	r5, r0
 800b598:	e5e9      	b.n	800b16e <d_template_args+0x7d6>
 800b59a:	3301      	adds	r3, #1
 800b59c:	60e3      	str	r3, [r4, #12]
 800b59e:	2145      	movs	r1, #69	; 0x45
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 f86f 	bl	800b684 <d_exprlist>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	e695      	b.n	800b2d6 <d_template_args+0x93e>
 800b5aa:	bf00      	nop
 800b5ac:	0801642c 	.word	0x0801642c
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f001 fd05 	bl	800cfc0 <d_expression_1>
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	e5d9      	b.n	800b16e <d_template_args+0x7d6>
 800b5ba:	2b74      	cmp	r3, #116	; 0x74
 800b5bc:	f47f aa69 	bne.w	800aa92 <d_template_args+0xfa>
 800b5c0:	7893      	ldrb	r3, [r2, #2]
 800b5c2:	2b6c      	cmp	r3, #108	; 0x6c
 800b5c4:	f47f aa65 	bne.w	800aa92 <d_template_args+0xfa>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f001 fecb 	bl	800d364 <d_type>
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	f7ff bbd5 	b.w	800ad7e <d_template_args+0x3e6>
 800b5d4:	2b6f      	cmp	r3, #111	; 0x6f
 800b5d6:	d014      	beq.n	800b602 <d_template_args+0xc6a>
 800b5d8:	2b69      	cmp	r3, #105	; 0x69
 800b5da:	d11a      	bne.n	800b612 <d_template_args+0xc7a>
 800b5dc:	7913      	ldrb	r3, [r2, #4]
 800b5de:	2b6c      	cmp	r3, #108	; 0x6c
 800b5e0:	f47f ad3d 	bne.w	800b05e <d_template_args+0x6c6>
 800b5e4:	2500      	movs	r5, #0
 800b5e6:	68e3      	ldr	r3, [r4, #12]
 800b5e8:	2145      	movs	r1, #69	; 0x45
 800b5ea:	3302      	adds	r3, #2
 800b5ec:	60e3      	str	r3, [r4, #12]
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f000 f848 	bl	800b684 <d_exprlist>
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2130      	movs	r1, #48	; 0x30
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f7fb facc 	bl	8006b98 <d_make_comp>
 800b600:	e411      	b.n	800ae26 <d_template_args+0x48e>
 800b602:	7913      	ldrb	r3, [r2, #4]
 800b604:	2b6e      	cmp	r3, #110	; 0x6e
 800b606:	f47f ad2a 	bne.w	800b05e <d_template_args+0x6c6>
 800b60a:	3205      	adds	r2, #5
 800b60c:	60e2      	str	r2, [r4, #12]
 800b60e:	f7ff bbfe 	b.w	800ae0e <d_template_args+0x476>
 800b612:	2b74      	cmp	r3, #116	; 0x74
 800b614:	f47f ad23 	bne.w	800b05e <d_template_args+0x6c6>
 800b618:	7913      	ldrb	r3, [r2, #4]
 800b61a:	2b6c      	cmp	r3, #108	; 0x6c
 800b61c:	f47f ad1f 	bne.w	800b05e <d_template_args+0x6c6>
 800b620:	4620      	mov	r0, r4
 800b622:	f001 fe9f 	bl	800d364 <d_type>
 800b626:	4605      	mov	r5, r0
 800b628:	e7dd      	b.n	800b5e6 <d_template_args+0xc4e>
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7ff bbfb 	b.w	800ae26 <d_template_args+0x48e>
 800b630:	3301      	adds	r3, #1
 800b632:	60e3      	str	r3, [r4, #12]
 800b634:	e643      	b.n	800b2be <d_template_args+0x926>
 800b636:	785a      	ldrb	r2, [r3, #1]
 800b638:	2a69      	cmp	r2, #105	; 0x69
 800b63a:	f47f ae33 	bne.w	800b2a4 <d_template_args+0x90c>
 800b63e:	3302      	adds	r3, #2
 800b640:	60e3      	str	r3, [r4, #12]
 800b642:	2145      	movs	r1, #69	; 0x45
 800b644:	4620      	mov	r0, r4
 800b646:	f000 f81d 	bl	800b684 <d_exprlist>
 800b64a:	e555      	b.n	800b0f8 <d_template_args+0x760>
 800b64c:	3301      	adds	r3, #1
 800b64e:	60e3      	str	r3, [r4, #12]
 800b650:	2000      	movs	r0, #0
 800b652:	e551      	b.n	800b0f8 <d_template_args+0x760>
 800b654:	4620      	mov	r0, r4
 800b656:	f7ff f99f 	bl	800a998 <d_template_args>
 800b65a:	465a      	mov	r2, fp
 800b65c:	4603      	mov	r3, r0
 800b65e:	2104      	movs	r1, #4
 800b660:	4620      	mov	r0, r4
 800b662:	f7fb fa99 	bl	8006b98 <d_make_comp>
 800b666:	4683      	mov	fp, r0
 800b668:	e4b6      	b.n	800afd8 <d_template_args+0x640>
 800b66a:	2b74      	cmp	r3, #116	; 0x74
 800b66c:	f47f ac28 	bne.w	800aec0 <d_template_args+0x528>
 800b670:	7853      	ldrb	r3, [r2, #1]
 800b672:	2b6c      	cmp	r3, #108	; 0x6c
 800b674:	f47f ac24 	bne.w	800aec0 <d_template_args+0x528>
 800b678:	4620      	mov	r0, r4
 800b67a:	f001 fe73 	bl	800d364 <d_type>
 800b67e:	4681      	mov	r9, r0
 800b680:	e73e      	b.n	800b500 <d_template_args+0xb68>
 800b682:	bf00      	nop

0800b684 <d_exprlist>:
 800b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b688:	68c2      	ldr	r2, [r0, #12]
 800b68a:	b085      	sub	sp, #20
 800b68c:	7815      	ldrb	r5, [r2, #0]
 800b68e:	2300      	movs	r3, #0
 800b690:	428d      	cmp	r5, r1
 800b692:	4604      	mov	r4, r0
 800b694:	9303      	str	r3, [sp, #12]
 800b696:	f000 8261 	beq.w	800bb5c <d_exprlist+0x4d8>
 800b69a:	460f      	mov	r7, r1
 800b69c:	ae03      	add	r6, sp, #12
 800b69e:	e022      	b.n	800b6e6 <d_exprlist+0x62>
 800b6a0:	2b66      	cmp	r3, #102	; 0x66
 800b6a2:	d04b      	beq.n	800b73c <d_exprlist+0xb8>
 800b6a4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b6a8:	2909      	cmp	r1, #9
 800b6aa:	f201 8454 	bhi.w	800cf56 <d_exprlist+0x18d2>
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f002 fad4 	bl	800dc5c <d_unqualified_name>
 800b6b4:	4680      	mov	r8, r0
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d064      	beq.n	800b784 <d_exprlist+0x100>
 800b6ba:	68e3      	ldr	r3, [r4, #12]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2b49      	cmp	r3, #73	; 0x49
 800b6c0:	f000 808b 	beq.w	800b7da <d_exprlist+0x156>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	6365      	str	r5, [r4, #52]	; 0x34
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	212e      	movs	r1, #46	; 0x2e
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7fb fa63 	bl	8006b98 <d_make_comp>
 800b6d2:	6030      	str	r0, [r6, #0]
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d056      	beq.n	800b786 <d_exprlist+0x102>
 800b6d8:	68e2      	ldr	r2, [r4, #12]
 800b6da:	f100 0608 	add.w	r6, r0, #8
 800b6de:	7813      	ldrb	r3, [r2, #0]
 800b6e0:	42bb      	cmp	r3, r7
 800b6e2:	f000 8179 	beq.w	800b9d8 <d_exprlist+0x354>
 800b6e6:	f04f 0801 	mov.w	r8, #1
 800b6ea:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b6ec:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800b6f0:	7813      	ldrb	r3, [r2, #0]
 800b6f2:	2b4c      	cmp	r3, #76	; 0x4c
 800b6f4:	d04b      	beq.n	800b78e <d_exprlist+0x10a>
 800b6f6:	2b54      	cmp	r3, #84	; 0x54
 800b6f8:	d051      	beq.n	800b79e <d_exprlist+0x11a>
 800b6fa:	2b73      	cmp	r3, #115	; 0x73
 800b6fc:	d1d0      	bne.n	800b6a0 <d_exprlist+0x1c>
 800b6fe:	7853      	ldrb	r3, [r2, #1]
 800b700:	2b72      	cmp	r3, #114	; 0x72
 800b702:	f000 8152 	beq.w	800b9aa <d_exprlist+0x326>
 800b706:	2b70      	cmp	r3, #112	; 0x70
 800b708:	f000 816c 	beq.w	800b9e4 <d_exprlist+0x360>
 800b70c:	4620      	mov	r0, r4
 800b70e:	f002 f9e5 	bl	800dadc <d_operator_name>
 800b712:	4680      	mov	r8, r0
 800b714:	2800      	cmp	r0, #0
 800b716:	d035      	beq.n	800b784 <d_exprlist+0x100>
 800b718:	f890 a000 	ldrb.w	sl, [r0]
 800b71c:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b720:	d042      	beq.n	800b7a8 <d_exprlist+0x124>
 800b722:	f1ba 0f32 	cmp.w	sl, #50	; 0x32
 800b726:	d129      	bne.n	800b77c <d_exprlist+0xf8>
 800b728:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b72c:	2b03      	cmp	r3, #3
 800b72e:	d829      	bhi.n	800b784 <d_exprlist+0x100>
 800b730:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b734:	01080062 	.word	0x01080062
 800b738:	006a00ac 	.word	0x006a00ac
 800b73c:	7853      	ldrb	r3, [r2, #1]
 800b73e:	2b70      	cmp	r3, #112	; 0x70
 800b740:	d1e4      	bne.n	800b70c <d_exprlist+0x88>
 800b742:	1c93      	adds	r3, r2, #2
 800b744:	60e3      	str	r3, [r4, #12]
 800b746:	7893      	ldrb	r3, [r2, #2]
 800b748:	2b54      	cmp	r3, #84	; 0x54
 800b74a:	d051      	beq.n	800b7f0 <d_exprlist+0x16c>
 800b74c:	4620      	mov	r0, r4
 800b74e:	f7fb fbad 	bl	8006eac <d_compact_number>
 800b752:	3001      	adds	r0, #1
 800b754:	d016      	beq.n	800b784 <d_exprlist+0x100>
 800b756:	6963      	ldr	r3, [r4, #20]
 800b758:	69a2      	ldr	r2, [r4, #24]
 800b75a:	4293      	cmp	r3, r2
 800b75c:	da12      	bge.n	800b784 <d_exprlist+0x100>
 800b75e:	6922      	ldr	r2, [r4, #16]
 800b760:	1c59      	adds	r1, r3, #1
 800b762:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b766:	6161      	str	r1, [r4, #20]
 800b768:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800b76c:	d00a      	beq.n	800b784 <d_exprlist+0x100>
 800b76e:	f04f 0e06 	mov.w	lr, #6
 800b772:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800b776:	460a      	mov	r2, r1
 800b778:	6048      	str	r0, [r1, #4]
 800b77a:	e7a4      	b.n	800b6c6 <d_exprlist+0x42>
 800b77c:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 800b780:	f000 8158 	beq.w	800ba34 <d_exprlist+0x3b0>
 800b784:	6365      	str	r5, [r4, #52]	; 0x34
 800b786:	2000      	movs	r0, #0
 800b788:	b005      	add	sp, #20
 800b78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78e:	4620      	mov	r0, r4
 800b790:	f003 f8e0 	bl	800e954 <d_expr_primary>
 800b794:	4602      	mov	r2, r0
 800b796:	6365      	str	r5, [r4, #52]	; 0x34
 800b798:	2a00      	cmp	r2, #0
 800b79a:	d195      	bne.n	800b6c8 <d_exprlist+0x44>
 800b79c:	e7f3      	b.n	800b786 <d_exprlist+0x102>
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f7fb fb9c 	bl	8006edc <d_template_param>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	e7f6      	b.n	800b796 <d_exprlist+0x112>
 800b7a8:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800b7ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b7ae:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b7b2:	f8db 9000 	ldr.w	r9, [fp]
 800b7b6:	3b02      	subs	r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b7bc:	4648      	mov	r0, r9
 800b7be:	49ae      	ldr	r1, [pc, #696]	; (800ba78 <d_exprlist+0x3f4>)
 800b7c0:	f003 fb42 	bl	800ee48 <strcmp>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	f000 8152 	beq.w	800ba6e <d_exprlist+0x3ea>
 800b7ca:	f8db 300c 	ldr.w	r3, [fp, #12]
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	d8d8      	bhi.n	800b784 <d_exprlist+0x100>
 800b7d2:	e8df f003 	tbb	[pc, r3]
 800b7d6:	ad11      	.short	0xad11
 800b7d8:	1b5d      	.short	0x1b5d
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f7ff f8dc 	bl	800a998 <d_template_args>
 800b7e0:	4642      	mov	r2, r8
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2104      	movs	r1, #4
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7fb f9d6 	bl	8006b98 <d_make_comp>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	e7d2      	b.n	800b796 <d_exprlist+0x112>
 800b7f0:	3203      	adds	r2, #3
 800b7f2:	60e2      	str	r2, [r4, #12]
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e7ae      	b.n	800b756 <d_exprlist+0xd2>
 800b7f8:	4642      	mov	r2, r8
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	2134      	movs	r1, #52	; 0x34
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7fb f9ca 	bl	8006b98 <d_make_comp>
 800b804:	4602      	mov	r2, r0
 800b806:	e7c6      	b.n	800b796 <d_exprlist+0x112>
 800b808:	f04f 0900 	mov.w	r9, #0
 800b80c:	499b      	ldr	r1, [pc, #620]	; (800ba7c <d_exprlist+0x3f8>)
 800b80e:	4648      	mov	r0, r9
 800b810:	f003 fb1a 	bl	800ee48 <strcmp>
 800b814:	4683      	mov	fp, r0
 800b816:	2800      	cmp	r0, #0
 800b818:	f000 8138 	beq.w	800ba8c <d_exprlist+0x408>
 800b81c:	f899 3000 	ldrb.w	r3, [r9]
 800b820:	2b6e      	cmp	r3, #110	; 0x6e
 800b822:	d1af      	bne.n	800b784 <d_exprlist+0x100>
 800b824:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b828:	2b77      	cmp	r3, #119	; 0x77
 800b82a:	d001      	beq.n	800b830 <d_exprlist+0x1ac>
 800b82c:	2b61      	cmp	r3, #97	; 0x61
 800b82e:	d1a9      	bne.n	800b784 <d_exprlist+0x100>
 800b830:	215f      	movs	r1, #95	; 0x5f
 800b832:	4620      	mov	r0, r4
 800b834:	f7ff ff26 	bl	800b684 <d_exprlist>
 800b838:	4682      	mov	sl, r0
 800b83a:	4620      	mov	r0, r4
 800b83c:	f001 fd92 	bl	800d364 <d_type>
 800b840:	68e3      	ldr	r3, [r4, #12]
 800b842:	4681      	mov	r9, r0
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	2a45      	cmp	r2, #69	; 0x45
 800b848:	f000 81cf 	beq.w	800bbea <d_exprlist+0x566>
 800b84c:	2a70      	cmp	r2, #112	; 0x70
 800b84e:	f000 84c9 	beq.w	800c1e4 <d_exprlist+0xb60>
 800b852:	2a69      	cmp	r2, #105	; 0x69
 800b854:	d196      	bne.n	800b784 <d_exprlist+0x100>
 800b856:	785b      	ldrb	r3, [r3, #1]
 800b858:	2b6c      	cmp	r3, #108	; 0x6c
 800b85a:	d193      	bne.n	800b784 <d_exprlist+0x100>
 800b85c:	4620      	mov	r0, r4
 800b85e:	f001 fbaf 	bl	800cfc0 <d_expression_1>
 800b862:	4683      	mov	fp, r0
 800b864:	465b      	mov	r3, fp
 800b866:	464a      	mov	r2, r9
 800b868:	213a      	movs	r1, #58	; 0x3a
 800b86a:	4620      	mov	r0, r4
 800b86c:	f7fb f994 	bl	8006b98 <d_make_comp>
 800b870:	4652      	mov	r2, sl
 800b872:	4603      	mov	r3, r0
 800b874:	2139      	movs	r1, #57	; 0x39
 800b876:	4620      	mov	r0, r4
 800b878:	f7fb f98e 	bl	8006b98 <d_make_comp>
 800b87c:	4642      	mov	r2, r8
 800b87e:	4603      	mov	r3, r0
 800b880:	2138      	movs	r1, #56	; 0x38
 800b882:	4620      	mov	r0, r4
 800b884:	f7fb f988 	bl	8006b98 <d_make_comp>
 800b888:	4602      	mov	r2, r0
 800b88a:	e784      	b.n	800b796 <d_exprlist+0x112>
 800b88c:	f04f 0900 	mov.w	r9, #0
 800b890:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	785a      	ldrb	r2, [r3, #1]
 800b898:	2a63      	cmp	r2, #99	; 0x63
 800b89a:	f000 8146 	beq.w	800bb2a <d_exprlist+0x4a6>
 800b89e:	68e1      	ldr	r1, [r4, #12]
 800b8a0:	780b      	ldrb	r3, [r1, #0]
 800b8a2:	2b4c      	cmp	r3, #76	; 0x4c
 800b8a4:	f000 861e 	beq.w	800c4e4 <d_exprlist+0xe60>
 800b8a8:	2b54      	cmp	r3, #84	; 0x54
 800b8aa:	f000 81fd 	beq.w	800bca8 <d_exprlist+0x624>
 800b8ae:	2b73      	cmp	r3, #115	; 0x73
 800b8b0:	f000 8437 	beq.w	800c122 <d_exprlist+0xa9e>
 800b8b4:	2b66      	cmp	r3, #102	; 0x66
 800b8b6:	f000 8475 	beq.w	800c1a4 <d_exprlist+0xb20>
 800b8ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b8be:	2a09      	cmp	r2, #9
 800b8c0:	f200 81bf 	bhi.w	800bc42 <d_exprlist+0x5be>
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f002 f9c9 	bl	800dc5c <d_unqualified_name>
 800b8ca:	4682      	mov	sl, r0
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	f000 84a8 	beq.w	800c222 <d_exprlist+0xb9e>
 800b8d2:	68e3      	ldr	r3, [r4, #12]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b49      	cmp	r3, #73	; 0x49
 800b8d8:	f000 870e 	beq.w	800c6f8 <d_exprlist+0x1074>
 800b8dc:	4968      	ldr	r1, [pc, #416]	; (800ba80 <d_exprlist+0x3fc>)
 800b8de:	4648      	mov	r0, r9
 800b8e0:	f003 fab2 	bl	800ee48 <strcmp>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	f000 811a 	beq.w	800bb1e <d_exprlist+0x49a>
 800b8ea:	4966      	ldr	r1, [pc, #408]	; (800ba84 <d_exprlist+0x400>)
 800b8ec:	4648      	mov	r0, r9
 800b8ee:	f003 faab 	bl	800ee48 <strcmp>
 800b8f2:	b130      	cbz	r0, 800b902 <d_exprlist+0x27e>
 800b8f4:	4648      	mov	r0, r9
 800b8f6:	4964      	ldr	r1, [pc, #400]	; (800ba88 <d_exprlist+0x404>)
 800b8f8:	f003 faa6 	bl	800ee48 <strcmp>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	f040 816f 	bne.w	800bbe0 <d_exprlist+0x55c>
 800b902:	4620      	mov	r0, r4
 800b904:	f002 f9aa 	bl	800dc5c <d_unqualified_name>
 800b908:	68e3      	ldr	r3, [r4, #12]
 800b90a:	4681      	mov	r9, r0
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2b49      	cmp	r3, #73	; 0x49
 800b910:	f000 843c 	beq.w	800c18c <d_exprlist+0xb08>
 800b914:	464b      	mov	r3, r9
 800b916:	4652      	mov	r2, sl
 800b918:	2137      	movs	r1, #55	; 0x37
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7fb f93c 	bl	8006b98 <d_make_comp>
 800b920:	4642      	mov	r2, r8
 800b922:	4603      	mov	r3, r0
 800b924:	2136      	movs	r1, #54	; 0x36
 800b926:	4620      	mov	r0, r4
 800b928:	f7fb f936 	bl	8006b98 <d_make_comp>
 800b92c:	4602      	mov	r2, r0
 800b92e:	e732      	b.n	800b796 <d_exprlist+0x112>
 800b930:	f1b9 0f00 	cmp.w	r9, #0
 800b934:	d006      	beq.n	800b944 <d_exprlist+0x2c0>
 800b936:	f899 3000 	ldrb.w	r3, [r9]
 800b93a:	2b70      	cmp	r3, #112	; 0x70
 800b93c:	f000 8081 	beq.w	800ba42 <d_exprlist+0x3be>
 800b940:	2b6d      	cmp	r3, #109	; 0x6d
 800b942:	d07e      	beq.n	800ba42 <d_exprlist+0x3be>
 800b944:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 800b948:	68e1      	ldr	r1, [r4, #12]
 800b94a:	d074      	beq.n	800ba36 <d_exprlist+0x3b2>
 800b94c:	780b      	ldrb	r3, [r1, #0]
 800b94e:	f04f 0a00 	mov.w	sl, #0
 800b952:	2b4c      	cmp	r3, #76	; 0x4c
 800b954:	f000 8453 	beq.w	800c1fe <d_exprlist+0xb7a>
 800b958:	2b54      	cmp	r3, #84	; 0x54
 800b95a:	f000 8466 	beq.w	800c22a <d_exprlist+0xba6>
 800b95e:	2b73      	cmp	r3, #115	; 0x73
 800b960:	f000 8105 	beq.w	800bb6e <d_exprlist+0x4ea>
 800b964:	2b66      	cmp	r3, #102	; 0x66
 800b966:	f000 811c 	beq.w	800bba2 <d_exprlist+0x51e>
 800b96a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b96e:	2a09      	cmp	r2, #9
 800b970:	f201 82b2 	bhi.w	800ced8 <d_exprlist+0x1854>
 800b974:	4620      	mov	r0, r4
 800b976:	f002 f971 	bl	800dc5c <d_unqualified_name>
 800b97a:	4681      	mov	r9, r0
 800b97c:	b120      	cbz	r0, 800b988 <d_exprlist+0x304>
 800b97e:	68e3      	ldr	r3, [r4, #12]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	2b49      	cmp	r3, #73	; 0x49
 800b984:	f000 8185 	beq.w	800bc92 <d_exprlist+0x60e>
 800b988:	f1ba 0f00 	cmp.w	sl, #0
 800b98c:	d06d      	beq.n	800ba6a <d_exprlist+0x3e6>
 800b98e:	464b      	mov	r3, r9
 800b990:	464a      	mov	r2, r9
 800b992:	2137      	movs	r1, #55	; 0x37
 800b994:	4620      	mov	r0, r4
 800b996:	f7fb f8ff 	bl	8006b98 <d_make_comp>
 800b99a:	4603      	mov	r3, r0
 800b99c:	4642      	mov	r2, r8
 800b99e:	2135      	movs	r1, #53	; 0x35
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f7fb f8f9 	bl	8006b98 <d_make_comp>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	e6f5      	b.n	800b796 <d_exprlist+0x112>
 800b9aa:	3202      	adds	r2, #2
 800b9ac:	60e2      	str	r2, [r4, #12]
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f001 fcd8 	bl	800d364 <d_type>
 800b9b4:	4681      	mov	r9, r0
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f002 f950 	bl	800dc5c <d_unqualified_name>
 800b9bc:	68e3      	ldr	r3, [r4, #12]
 800b9be:	4682      	mov	sl, r0
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	2b49      	cmp	r3, #73	; 0x49
 800b9c4:	f000 80bf 	beq.w	800bb46 <d_exprlist+0x4c2>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	464a      	mov	r2, r9
 800b9cc:	4641      	mov	r1, r8
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f7fb f8e2 	bl	8006b98 <d_make_comp>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	e6de      	b.n	800b796 <d_exprlist+0x112>
 800b9d8:	9803      	ldr	r0, [sp, #12]
 800b9da:	3201      	adds	r2, #1
 800b9dc:	60e2      	str	r2, [r4, #12]
 800b9de:	b005      	add	sp, #20
 800b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e4:	1c91      	adds	r1, r2, #2
 800b9e6:	60e1      	str	r1, [r4, #12]
 800b9e8:	7893      	ldrb	r3, [r2, #2]
 800b9ea:	2b4c      	cmp	r3, #76	; 0x4c
 800b9ec:	f000 814c 	beq.w	800bc88 <d_exprlist+0x604>
 800b9f0:	2b54      	cmp	r3, #84	; 0x54
 800b9f2:	f000 857d 	beq.w	800c4f0 <d_exprlist+0xe6c>
 800b9f6:	2b73      	cmp	r3, #115	; 0x73
 800b9f8:	f000 82e7 	beq.w	800bfca <d_exprlist+0x946>
 800b9fc:	2b66      	cmp	r3, #102	; 0x66
 800b9fe:	f000 83a5 	beq.w	800c14c <d_exprlist+0xac8>
 800ba02:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800ba06:	2809      	cmp	r0, #9
 800ba08:	f201 820c 	bhi.w	800ce24 <d_exprlist+0x17a0>
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f002 f925 	bl	800dc5c <d_unqualified_name>
 800ba12:	4680      	mov	r8, r0
 800ba14:	2800      	cmp	r0, #0
 800ba16:	f000 83fd 	beq.w	800c214 <d_exprlist+0xb90>
 800ba1a:	68e3      	ldr	r3, [r4, #12]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b49      	cmp	r3, #73	; 0x49
 800ba20:	f000 8639 	beq.w	800c696 <d_exprlist+0x1012>
 800ba24:	4602      	mov	r2, r0
 800ba26:	2300      	movs	r3, #0
 800ba28:	2149      	movs	r1, #73	; 0x49
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f7fb f8b4 	bl	8006b98 <d_make_comp>
 800ba30:	4602      	mov	r2, r0
 800ba32:	e6b0      	b.n	800b796 <d_exprlist+0x112>
 800ba34:	68e1      	ldr	r1, [r4, #12]
 800ba36:	780b      	ldrb	r3, [r1, #0]
 800ba38:	2b5f      	cmp	r3, #95	; 0x5f
 800ba3a:	d00f      	beq.n	800ba5c <d_exprlist+0x3d8>
 800ba3c:	f04f 0a00 	mov.w	sl, #0
 800ba40:	e787      	b.n	800b952 <d_exprlist+0x2ce>
 800ba42:	f899 2001 	ldrb.w	r2, [r9, #1]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	f47f af7c 	bne.w	800b944 <d_exprlist+0x2c0>
 800ba4c:	68e1      	ldr	r1, [r4, #12]
 800ba4e:	780b      	ldrb	r3, [r1, #0]
 800ba50:	2b5f      	cmp	r3, #95	; 0x5f
 800ba52:	f000 85b8 	beq.w	800c5c6 <d_exprlist+0xf42>
 800ba56:	f04f 0a01 	mov.w	sl, #1
 800ba5a:	e77a      	b.n	800b952 <d_exprlist+0x2ce>
 800ba5c:	3101      	adds	r1, #1
 800ba5e:	60e1      	str	r1, [r4, #12]
 800ba60:	4620      	mov	r0, r4
 800ba62:	2145      	movs	r1, #69	; 0x45
 800ba64:	f7ff fe0e 	bl	800b684 <d_exprlist>
 800ba68:	4681      	mov	r9, r0
 800ba6a:	464b      	mov	r3, r9
 800ba6c:	e796      	b.n	800b99c <d_exprlist+0x318>
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f001 fc78 	bl	800d364 <d_type>
 800ba74:	4603      	mov	r3, r0
 800ba76:	e791      	b.n	800b99c <d_exprlist+0x318>
 800ba78:	0801642c 	.word	0x0801642c
 800ba7c:	08016124 	.word	0x08016124
 800ba80:	0801611c 	.word	0x0801611c
 800ba84:	08016238 	.word	0x08016238
 800ba88:	0801623c 	.word	0x0801623c
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f001 fa97 	bl	800cfc0 <d_expression_1>
 800ba92:	4682      	mov	sl, r0
 800ba94:	68e0      	ldr	r0, [r4, #12]
 800ba96:	7803      	ldrb	r3, [r0, #0]
 800ba98:	2b4c      	cmp	r3, #76	; 0x4c
 800ba9a:	f000 861f 	beq.w	800c6dc <d_exprlist+0x1058>
 800ba9e:	2b54      	cmp	r3, #84	; 0x54
 800baa0:	f000 8636 	beq.w	800c710 <d_exprlist+0x108c>
 800baa4:	2b73      	cmp	r3, #115	; 0x73
 800baa6:	f000 84a6 	beq.w	800c3f6 <d_exprlist+0xd72>
 800baaa:	2b66      	cmp	r3, #102	; 0x66
 800baac:	f000 80ac 	beq.w	800bc08 <d_exprlist+0x584>
 800bab0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bab4:	2909      	cmp	r1, #9
 800bab6:	f201 819a 	bhi.w	800cdee <d_exprlist+0x176a>
 800baba:	4620      	mov	r0, r4
 800babc:	f002 f8ce 	bl	800dc5c <d_unqualified_name>
 800bac0:	68e2      	ldr	r2, [r4, #12]
 800bac2:	4681      	mov	r9, r0
 800bac4:	7813      	ldrb	r3, [r2, #0]
 800bac6:	b110      	cbz	r0, 800bace <d_exprlist+0x44a>
 800bac8:	2b49      	cmp	r3, #73	; 0x49
 800baca:	f000 86f5 	beq.w	800c8b8 <d_exprlist+0x1234>
 800bace:	2b4c      	cmp	r3, #76	; 0x4c
 800bad0:	f000 85ed 	beq.w	800c6ae <d_exprlist+0x102a>
 800bad4:	2b54      	cmp	r3, #84	; 0x54
 800bad6:	f000 8609 	beq.w	800c6ec <d_exprlist+0x1068>
 800bada:	2b73      	cmp	r3, #115	; 0x73
 800badc:	f000 83cc 	beq.w	800c278 <d_exprlist+0xbf4>
 800bae0:	2b66      	cmp	r3, #102	; 0x66
 800bae2:	f000 8498 	beq.w	800c416 <d_exprlist+0xd92>
 800bae6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800baea:	2909      	cmp	r1, #9
 800baec:	f201 812f 	bhi.w	800cd4e <d_exprlist+0x16ca>
 800baf0:	4620      	mov	r0, r4
 800baf2:	f002 f8b3 	bl	800dc5c <d_unqualified_name>
 800baf6:	4683      	mov	fp, r0
 800baf8:	2800      	cmp	r0, #0
 800bafa:	f43f aeb3 	beq.w	800b864 <d_exprlist+0x1e0>
 800bafe:	68e3      	ldr	r3, [r4, #12]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b49      	cmp	r3, #73	; 0x49
 800bb04:	f47f aeae 	bne.w	800b864 <d_exprlist+0x1e0>
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f7fe ff45 	bl	800a998 <d_template_args>
 800bb0e:	465a      	mov	r2, fp
 800bb10:	4603      	mov	r3, r0
 800bb12:	2104      	movs	r1, #4
 800bb14:	4620      	mov	r0, r4
 800bb16:	f7fb f83f 	bl	8006b98 <d_make_comp>
 800bb1a:	4683      	mov	fp, r0
 800bb1c:	e6a2      	b.n	800b864 <d_exprlist+0x1e0>
 800bb1e:	2145      	movs	r1, #69	; 0x45
 800bb20:	4620      	mov	r0, r4
 800bb22:	f7ff fdaf 	bl	800b684 <d_exprlist>
 800bb26:	4681      	mov	r9, r0
 800bb28:	e6f4      	b.n	800b914 <d_exprlist+0x290>
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800bb30:	2a01      	cmp	r2, #1
 800bb32:	d903      	bls.n	800bb3c <d_exprlist+0x4b8>
 800bb34:	3b72      	subs	r3, #114	; 0x72
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	f63f aeb1 	bhi.w	800b89e <d_exprlist+0x21a>
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f001 fc11 	bl	800d364 <d_type>
 800bb42:	4682      	mov	sl, r0
 800bb44:	e6ca      	b.n	800b8dc <d_exprlist+0x258>
 800bb46:	4620      	mov	r0, r4
 800bb48:	f7fe ff26 	bl	800a998 <d_template_args>
 800bb4c:	4652      	mov	r2, sl
 800bb4e:	4603      	mov	r3, r0
 800bb50:	2104      	movs	r1, #4
 800bb52:	4620      	mov	r0, r4
 800bb54:	f7fb f820 	bl	8006b98 <d_make_comp>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	e736      	b.n	800b9ca <d_exprlist+0x346>
 800bb5c:	3201      	adds	r2, #1
 800bb5e:	60c2      	str	r2, [r0, #12]
 800bb60:	461a      	mov	r2, r3
 800bb62:	212e      	movs	r1, #46	; 0x2e
 800bb64:	b005      	add	sp, #20
 800bb66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	f7fb b815 	b.w	8006b98 <d_make_comp>
 800bb6e:	784b      	ldrb	r3, [r1, #1]
 800bb70:	2b72      	cmp	r3, #114	; 0x72
 800bb72:	f000 8546 	beq.w	800c602 <d_exprlist+0xf7e>
 800bb76:	2b70      	cmp	r3, #112	; 0x70
 800bb78:	f000 8614 	beq.w	800c7a4 <d_exprlist+0x1120>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f001 ffad 	bl	800dadc <d_operator_name>
 800bb82:	4681      	mov	r9, r0
 800bb84:	2800      	cmp	r0, #0
 800bb86:	f43f aeff 	beq.w	800b988 <d_exprlist+0x304>
 800bb8a:	7803      	ldrb	r3, [r0, #0]
 800bb8c:	2b31      	cmp	r3, #49	; 0x31
 800bb8e:	f000 8352 	beq.w	800c236 <d_exprlist+0xbb2>
 800bb92:	2b32      	cmp	r3, #50	; 0x32
 800bb94:	d02e      	beq.n	800bbf4 <d_exprlist+0x570>
 800bb96:	2b33      	cmp	r3, #51	; 0x33
 800bb98:	f000 864c 	beq.w	800c834 <d_exprlist+0x11b0>
 800bb9c:	f04f 0900 	mov.w	r9, #0
 800bba0:	e6f2      	b.n	800b988 <d_exprlist+0x304>
 800bba2:	784b      	ldrb	r3, [r1, #1]
 800bba4:	2b70      	cmp	r3, #112	; 0x70
 800bba6:	d1e9      	bne.n	800bb7c <d_exprlist+0x4f8>
 800bba8:	1c8b      	adds	r3, r1, #2
 800bbaa:	60e3      	str	r3, [r4, #12]
 800bbac:	788b      	ldrb	r3, [r1, #2]
 800bbae:	2b54      	cmp	r3, #84	; 0x54
 800bbb0:	f040 8583 	bne.w	800c6ba <d_exprlist+0x1036>
 800bbb4:	3103      	adds	r1, #3
 800bbb6:	60e1      	str	r1, [r4, #12]
 800bbb8:	2000      	movs	r0, #0
 800bbba:	6963      	ldr	r3, [r4, #20]
 800bbbc:	69a2      	ldr	r2, [r4, #24]
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	daec      	bge.n	800bb9c <d_exprlist+0x518>
 800bbc2:	6922      	ldr	r2, [r4, #16]
 800bbc4:	1c59      	adds	r1, r3, #1
 800bbc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bbca:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 800bbce:	6161      	str	r1, [r4, #20]
 800bbd0:	f43f aeda 	beq.w	800b988 <d_exprlist+0x304>
 800bbd4:	2106      	movs	r1, #6
 800bbd6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800bbda:	f8c9 0004 	str.w	r0, [r9, #4]
 800bbde:	e6d3      	b.n	800b988 <d_exprlist+0x304>
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f001 f9ed 	bl	800cfc0 <d_expression_1>
 800bbe6:	4681      	mov	r9, r0
 800bbe8:	e694      	b.n	800b914 <d_exprlist+0x290>
 800bbea:	3301      	adds	r3, #1
 800bbec:	60e3      	str	r3, [r4, #12]
 800bbee:	f04f 0b00 	mov.w	fp, #0
 800bbf2:	e637      	b.n	800b864 <d_exprlist+0x1e0>
 800bbf4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d8cf      	bhi.n	800bb9c <d_exprlist+0x518>
 800bbfc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc00:	04cc0059 	.word	0x04cc0059
 800bc04:	006100a5 	.word	0x006100a5
 800bc08:	7843      	ldrb	r3, [r0, #1]
 800bc0a:	2b70      	cmp	r3, #112	; 0x70
 800bc0c:	f000 85d8 	beq.w	800c7c0 <d_exprlist+0x113c>
 800bc10:	4620      	mov	r0, r4
 800bc12:	f001 ff63 	bl	800dadc <d_operator_name>
 800bc16:	4681      	mov	r9, r0
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	f000 8157 	beq.w	800becc <d_exprlist+0x848>
 800bc1e:	7803      	ldrb	r3, [r0, #0]
 800bc20:	2b31      	cmp	r3, #49	; 0x31
 800bc22:	f000 859f 	beq.w	800c764 <d_exprlist+0x10e0>
 800bc26:	2b32      	cmp	r3, #50	; 0x32
 800bc28:	f040 84d1 	bne.w	800c5ce <d_exprlist+0xf4a>
 800bc2c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	f200 8489 	bhi.w	800c548 <d_exprlist+0xec4>
 800bc36:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc3a:	0142      	.short	0x0142
 800bc3c:	018c04d1 	.word	0x018c04d1
 800bc40:	014c      	.short	0x014c
 800bc42:	2b6f      	cmp	r3, #111	; 0x6f
 800bc44:	f000 8446 	beq.w	800c4d4 <d_exprlist+0xe50>
 800bc48:	2b69      	cmp	r3, #105	; 0x69
 800bc4a:	f041 8177 	bne.w	800cf3c <d_exprlist+0x18b8>
 800bc4e:	784b      	ldrb	r3, [r1, #1]
 800bc50:	2b6c      	cmp	r3, #108	; 0x6c
 800bc52:	f001 80bb 	beq.w	800cdcc <d_exprlist+0x1748>
 800bc56:	4620      	mov	r0, r4
 800bc58:	f001 ff40 	bl	800dadc <d_operator_name>
 800bc5c:	4682      	mov	sl, r0
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f000 82df 	beq.w	800c222 <d_exprlist+0xb9e>
 800bc64:	7803      	ldrb	r3, [r0, #0]
 800bc66:	2b31      	cmp	r3, #49	; 0x31
 800bc68:	f000 8474 	beq.w	800c554 <d_exprlist+0xed0>
 800bc6c:	2b32      	cmp	r3, #50	; 0x32
 800bc6e:	f040 8412 	bne.w	800c496 <d_exprlist+0xe12>
 800bc72:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	f200 82d3 	bhi.w	800c222 <d_exprlist+0xb9e>
 800bc7c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bc80:	0413009c 	.word	0x0413009c
 800bc84:	00a400e8 	.word	0x00a400e8
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f002 fe63 	bl	800e954 <d_expr_primary>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	e6c9      	b.n	800ba26 <d_exprlist+0x3a2>
 800bc92:	4620      	mov	r0, r4
 800bc94:	f7fe fe80 	bl	800a998 <d_template_args>
 800bc98:	464a      	mov	r2, r9
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2104      	movs	r1, #4
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f7fa ff7a 	bl	8006b98 <d_make_comp>
 800bca4:	4681      	mov	r9, r0
 800bca6:	e66f      	b.n	800b988 <d_exprlist+0x304>
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f7fb f917 	bl	8006edc <d_template_param>
 800bcae:	4682      	mov	sl, r0
 800bcb0:	e614      	b.n	800b8dc <d_exprlist+0x258>
 800bcb2:	464a      	mov	r2, r9
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	2134      	movs	r1, #52	; 0x34
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f7fa ff6d 	bl	8006b98 <d_make_comp>
 800bcbe:	4681      	mov	r9, r0
 800bcc0:	e662      	b.n	800b988 <d_exprlist+0x304>
 800bcc2:	f04f 0b00 	mov.w	fp, #0
 800bcc6:	49d1      	ldr	r1, [pc, #836]	; (800c00c <d_exprlist+0x988>)
 800bcc8:	4658      	mov	r0, fp
 800bcca:	f003 f8bd 	bl	800ee48 <strcmp>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f000 8621 	beq.w	800c916 <d_exprlist+0x1292>
 800bcd4:	f89b 2000 	ldrb.w	r2, [fp]
 800bcd8:	2a6e      	cmp	r2, #110	; 0x6e
 800bcda:	f47f af5f 	bne.w	800bb9c <d_exprlist+0x518>
 800bcde:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bce2:	2b77      	cmp	r3, #119	; 0x77
 800bce4:	d002      	beq.n	800bcec <d_exprlist+0x668>
 800bce6:	2b61      	cmp	r3, #97	; 0x61
 800bce8:	f47f af58 	bne.w	800bb9c <d_exprlist+0x518>
 800bcec:	215f      	movs	r1, #95	; 0x5f
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f7ff fcc8 	bl	800b684 <d_exprlist>
 800bcf4:	9000      	str	r0, [sp, #0]
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f001 fb34 	bl	800d364 <d_type>
 800bcfc:	68e3      	ldr	r3, [r4, #12]
 800bcfe:	4683      	mov	fp, r0
 800bd00:	781a      	ldrb	r2, [r3, #0]
 800bd02:	2a45      	cmp	r2, #69	; 0x45
 800bd04:	f000 8744 	beq.w	800cb90 <d_exprlist+0x150c>
 800bd08:	2a70      	cmp	r2, #112	; 0x70
 800bd0a:	f000 8798 	beq.w	800cc3e <d_exprlist+0x15ba>
 800bd0e:	2a69      	cmp	r2, #105	; 0x69
 800bd10:	f47f af44 	bne.w	800bb9c <d_exprlist+0x518>
 800bd14:	785b      	ldrb	r3, [r3, #1]
 800bd16:	2b6c      	cmp	r3, #108	; 0x6c
 800bd18:	f47f af40 	bne.w	800bb9c <d_exprlist+0x518>
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f001 f94f 	bl	800cfc0 <d_expression_1>
 800bd22:	4603      	mov	r3, r0
 800bd24:	465a      	mov	r2, fp
 800bd26:	213a      	movs	r1, #58	; 0x3a
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f7fa ff35 	bl	8006b98 <d_make_comp>
 800bd2e:	9a00      	ldr	r2, [sp, #0]
 800bd30:	4603      	mov	r3, r0
 800bd32:	2139      	movs	r1, #57	; 0x39
 800bd34:	4620      	mov	r0, r4
 800bd36:	f7fa ff2f 	bl	8006b98 <d_make_comp>
 800bd3a:	464a      	mov	r2, r9
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2138      	movs	r1, #56	; 0x38
 800bd40:	4620      	mov	r0, r4
 800bd42:	f7fa ff29 	bl	8006b98 <d_make_comp>
 800bd46:	4681      	mov	r9, r0
 800bd48:	e61e      	b.n	800b988 <d_exprlist+0x304>
 800bd4a:	f04f 0b00 	mov.w	fp, #0
 800bd4e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bd52:	6812      	ldr	r2, [r2, #0]
 800bd54:	7851      	ldrb	r1, [r2, #1]
 800bd56:	2963      	cmp	r1, #99	; 0x63
 800bd58:	f000 85ce 	beq.w	800c8f8 <d_exprlist+0x1274>
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f001 f92f 	bl	800cfc0 <d_expression_1>
 800bd62:	9000      	str	r0, [sp, #0]
 800bd64:	49aa      	ldr	r1, [pc, #680]	; (800c010 <d_exprlist+0x98c>)
 800bd66:	4658      	mov	r0, fp
 800bd68:	f003 f86e 	bl	800ee48 <strcmp>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	f000 8631 	beq.w	800c9d4 <d_exprlist+0x1350>
 800bd72:	49a8      	ldr	r1, [pc, #672]	; (800c014 <d_exprlist+0x990>)
 800bd74:	4658      	mov	r0, fp
 800bd76:	f003 f867 	bl	800ee48 <strcmp>
 800bd7a:	b130      	cbz	r0, 800bd8a <d_exprlist+0x706>
 800bd7c:	4658      	mov	r0, fp
 800bd7e:	49a6      	ldr	r1, [pc, #664]	; (800c018 <d_exprlist+0x994>)
 800bd80:	f003 f862 	bl	800ee48 <strcmp>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	f040 86dc 	bne.w	800cb42 <d_exprlist+0x14be>
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f001 ff66 	bl	800dc5c <d_unqualified_name>
 800bd90:	68e3      	ldr	r3, [r4, #12]
 800bd92:	4683      	mov	fp, r0
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b49      	cmp	r3, #73	; 0x49
 800bd98:	f000 86d9 	beq.w	800cb4e <d_exprlist+0x14ca>
 800bd9c:	465b      	mov	r3, fp
 800bd9e:	9a00      	ldr	r2, [sp, #0]
 800bda0:	2137      	movs	r1, #55	; 0x37
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7fa fef8 	bl	8006b98 <d_make_comp>
 800bda8:	464a      	mov	r2, r9
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2136      	movs	r1, #54	; 0x36
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f7fa fef2 	bl	8006b98 <d_make_comp>
 800bdb4:	4681      	mov	r9, r0
 800bdb6:	e5e7      	b.n	800b988 <d_exprlist+0x304>
 800bdb8:	4652      	mov	r2, sl
 800bdba:	2300      	movs	r3, #0
 800bdbc:	2134      	movs	r1, #52	; 0x34
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f7fa feea 	bl	8006b98 <d_make_comp>
 800bdc4:	4682      	mov	sl, r0
 800bdc6:	e589      	b.n	800b8dc <d_exprlist+0x258>
 800bdc8:	f04f 0b00 	mov.w	fp, #0
 800bdcc:	498f      	ldr	r1, [pc, #572]	; (800c00c <d_exprlist+0x988>)
 800bdce:	4658      	mov	r0, fp
 800bdd0:	f003 f83a 	bl	800ee48 <strcmp>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	f000 86c6 	beq.w	800cb66 <d_exprlist+0x14e2>
 800bdda:	f89b 2000 	ldrb.w	r2, [fp]
 800bdde:	2a6e      	cmp	r2, #110	; 0x6e
 800bde0:	f040 821f 	bne.w	800c222 <d_exprlist+0xb9e>
 800bde4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bde8:	2b77      	cmp	r3, #119	; 0x77
 800bdea:	d002      	beq.n	800bdf2 <d_exprlist+0x76e>
 800bdec:	2b61      	cmp	r3, #97	; 0x61
 800bdee:	f040 8218 	bne.w	800c222 <d_exprlist+0xb9e>
 800bdf2:	215f      	movs	r1, #95	; 0x5f
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7ff fc45 	bl	800b684 <d_exprlist>
 800bdfa:	9000      	str	r0, [sp, #0]
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f001 fab1 	bl	800d364 <d_type>
 800be02:	68e3      	ldr	r3, [r4, #12]
 800be04:	4683      	mov	fp, r0
 800be06:	781a      	ldrb	r2, [r3, #0]
 800be08:	2a45      	cmp	r2, #69	; 0x45
 800be0a:	f000 86d2 	beq.w	800cbb2 <d_exprlist+0x152e>
 800be0e:	2a70      	cmp	r2, #112	; 0x70
 800be10:	f000 86c3 	beq.w	800cb9a <d_exprlist+0x1516>
 800be14:	2a69      	cmp	r2, #105	; 0x69
 800be16:	f040 8204 	bne.w	800c222 <d_exprlist+0xb9e>
 800be1a:	785b      	ldrb	r3, [r3, #1]
 800be1c:	2b6c      	cmp	r3, #108	; 0x6c
 800be1e:	f040 8200 	bne.w	800c222 <d_exprlist+0xb9e>
 800be22:	4620      	mov	r0, r4
 800be24:	f001 f8cc 	bl	800cfc0 <d_expression_1>
 800be28:	4603      	mov	r3, r0
 800be2a:	465a      	mov	r2, fp
 800be2c:	213a      	movs	r1, #58	; 0x3a
 800be2e:	4620      	mov	r0, r4
 800be30:	f7fa feb2 	bl	8006b98 <d_make_comp>
 800be34:	9a00      	ldr	r2, [sp, #0]
 800be36:	4603      	mov	r3, r0
 800be38:	2139      	movs	r1, #57	; 0x39
 800be3a:	4620      	mov	r0, r4
 800be3c:	f7fa feac 	bl	8006b98 <d_make_comp>
 800be40:	4652      	mov	r2, sl
 800be42:	4603      	mov	r3, r0
 800be44:	2138      	movs	r1, #56	; 0x38
 800be46:	4620      	mov	r0, r4
 800be48:	f7fa fea6 	bl	8006b98 <d_make_comp>
 800be4c:	4682      	mov	sl, r0
 800be4e:	e545      	b.n	800b8dc <d_exprlist+0x258>
 800be50:	f04f 0b00 	mov.w	fp, #0
 800be54:	f8da 2004 	ldr.w	r2, [sl, #4]
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	7851      	ldrb	r1, [r2, #1]
 800be5c:	2963      	cmp	r1, #99	; 0x63
 800be5e:	f000 8634 	beq.w	800caca <d_exprlist+0x1446>
 800be62:	4620      	mov	r0, r4
 800be64:	f001 f8ac 	bl	800cfc0 <d_expression_1>
 800be68:	9000      	str	r0, [sp, #0]
 800be6a:	4969      	ldr	r1, [pc, #420]	; (800c010 <d_exprlist+0x98c>)
 800be6c:	4658      	mov	r0, fp
 800be6e:	f002 ffeb 	bl	800ee48 <strcmp>
 800be72:	2800      	cmp	r0, #0
 800be74:	f000 8643 	beq.w	800cafe <d_exprlist+0x147a>
 800be78:	4966      	ldr	r1, [pc, #408]	; (800c014 <d_exprlist+0x990>)
 800be7a:	4658      	mov	r0, fp
 800be7c:	f002 ffe4 	bl	800ee48 <strcmp>
 800be80:	b130      	cbz	r0, 800be90 <d_exprlist+0x80c>
 800be82:	4658      	mov	r0, fp
 800be84:	4964      	ldr	r1, [pc, #400]	; (800c018 <d_exprlist+0x994>)
 800be86:	f002 ffdf 	bl	800ee48 <strcmp>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	f040 8696 	bne.w	800cbbc <d_exprlist+0x1538>
 800be90:	4620      	mov	r0, r4
 800be92:	f001 fee3 	bl	800dc5c <d_unqualified_name>
 800be96:	68e3      	ldr	r3, [r4, #12]
 800be98:	4683      	mov	fp, r0
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b49      	cmp	r3, #73	; 0x49
 800be9e:	f000 86da 	beq.w	800cc56 <d_exprlist+0x15d2>
 800bea2:	465b      	mov	r3, fp
 800bea4:	9a00      	ldr	r2, [sp, #0]
 800bea6:	2137      	movs	r1, #55	; 0x37
 800bea8:	4620      	mov	r0, r4
 800beaa:	f7fa fe75 	bl	8006b98 <d_make_comp>
 800beae:	4652      	mov	r2, sl
 800beb0:	4603      	mov	r3, r0
 800beb2:	2136      	movs	r1, #54	; 0x36
 800beb4:	4620      	mov	r0, r4
 800beb6:	f7fa fe6f 	bl	8006b98 <d_make_comp>
 800beba:	4682      	mov	sl, r0
 800bebc:	e50e      	b.n	800b8dc <d_exprlist+0x258>
 800bebe:	464a      	mov	r2, r9
 800bec0:	2300      	movs	r3, #0
 800bec2:	2134      	movs	r1, #52	; 0x34
 800bec4:	4620      	mov	r0, r4
 800bec6:	f7fa fe67 	bl	8006b98 <d_make_comp>
 800beca:	4681      	mov	r9, r0
 800becc:	68e2      	ldr	r2, [r4, #12]
 800bece:	7813      	ldrb	r3, [r2, #0]
 800bed0:	e5fd      	b.n	800bace <d_exprlist+0x44a>
 800bed2:	f04f 0b00 	mov.w	fp, #0
 800bed6:	494d      	ldr	r1, [pc, #308]	; (800c00c <d_exprlist+0x988>)
 800bed8:	4658      	mov	r0, fp
 800beda:	f002 ffb5 	bl	800ee48 <strcmp>
 800bede:	2800      	cmp	r0, #0
 800bee0:	f000 86e7 	beq.w	800ccb2 <d_exprlist+0x162e>
 800bee4:	f89b 2000 	ldrb.w	r2, [fp]
 800bee8:	2a6e      	cmp	r2, #110	; 0x6e
 800beea:	f040 832d 	bne.w	800c548 <d_exprlist+0xec4>
 800beee:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bef2:	2b77      	cmp	r3, #119	; 0x77
 800bef4:	d002      	beq.n	800befc <d_exprlist+0x878>
 800bef6:	2b61      	cmp	r3, #97	; 0x61
 800bef8:	f040 8326 	bne.w	800c548 <d_exprlist+0xec4>
 800befc:	215f      	movs	r1, #95	; 0x5f
 800befe:	4620      	mov	r0, r4
 800bf00:	f7ff fbc0 	bl	800b684 <d_exprlist>
 800bf04:	9000      	str	r0, [sp, #0]
 800bf06:	4620      	mov	r0, r4
 800bf08:	f001 fa2c 	bl	800d364 <d_type>
 800bf0c:	68e2      	ldr	r2, [r4, #12]
 800bf0e:	4683      	mov	fp, r0
 800bf10:	7813      	ldrb	r3, [r2, #0]
 800bf12:	2b45      	cmp	r3, #69	; 0x45
 800bf14:	f000 86da 	beq.w	800cccc <d_exprlist+0x1648>
 800bf18:	2b70      	cmp	r3, #112	; 0x70
 800bf1a:	f000 87c2 	beq.w	800cea2 <d_exprlist+0x181e>
 800bf1e:	2b69      	cmp	r3, #105	; 0x69
 800bf20:	f041 804a 	bne.w	800cfb8 <d_exprlist+0x1934>
 800bf24:	7853      	ldrb	r3, [r2, #1]
 800bf26:	2b6c      	cmp	r3, #108	; 0x6c
 800bf28:	f041 8043 	bne.w	800cfb2 <d_exprlist+0x192e>
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f001 f847 	bl	800cfc0 <d_expression_1>
 800bf32:	4603      	mov	r3, r0
 800bf34:	465a      	mov	r2, fp
 800bf36:	213a      	movs	r1, #58	; 0x3a
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f7fa fe2d 	bl	8006b98 <d_make_comp>
 800bf3e:	9a00      	ldr	r2, [sp, #0]
 800bf40:	4603      	mov	r3, r0
 800bf42:	2139      	movs	r1, #57	; 0x39
 800bf44:	4620      	mov	r0, r4
 800bf46:	f7fa fe27 	bl	8006b98 <d_make_comp>
 800bf4a:	464a      	mov	r2, r9
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2138      	movs	r1, #56	; 0x38
 800bf50:	e7b8      	b.n	800bec4 <d_exprlist+0x840>
 800bf52:	f04f 0b00 	mov.w	fp, #0
 800bf56:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bf5a:	6812      	ldr	r2, [r2, #0]
 800bf5c:	7851      	ldrb	r1, [r2, #1]
 800bf5e:	2963      	cmp	r1, #99	; 0x63
 800bf60:	f000 865e 	beq.w	800cc20 <d_exprlist+0x159c>
 800bf64:	4620      	mov	r0, r4
 800bf66:	f001 f82b 	bl	800cfc0 <d_expression_1>
 800bf6a:	9000      	str	r0, [sp, #0]
 800bf6c:	4928      	ldr	r1, [pc, #160]	; (800c010 <d_exprlist+0x98c>)
 800bf6e:	4658      	mov	r0, fp
 800bf70:	f002 ff6a 	bl	800ee48 <strcmp>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	f000 864c 	beq.w	800cc12 <d_exprlist+0x158e>
 800bf7a:	4926      	ldr	r1, [pc, #152]	; (800c014 <d_exprlist+0x990>)
 800bf7c:	4658      	mov	r0, fp
 800bf7e:	f002 ff63 	bl	800ee48 <strcmp>
 800bf82:	b130      	cbz	r0, 800bf92 <d_exprlist+0x90e>
 800bf84:	4658      	mov	r0, fp
 800bf86:	4924      	ldr	r1, [pc, #144]	; (800c018 <d_exprlist+0x994>)
 800bf88:	f002 ff5e 	bl	800ee48 <strcmp>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	f040 861b 	bne.w	800cbc8 <d_exprlist+0x1544>
 800bf92:	4620      	mov	r0, r4
 800bf94:	f001 fe62 	bl	800dc5c <d_unqualified_name>
 800bf98:	68e3      	ldr	r3, [r4, #12]
 800bf9a:	4683      	mov	fp, r0
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	2b49      	cmp	r3, #73	; 0x49
 800bfa0:	d109      	bne.n	800bfb6 <d_exprlist+0x932>
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f7fe fcf8 	bl	800a998 <d_template_args>
 800bfa8:	465a      	mov	r2, fp
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2104      	movs	r1, #4
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f7fa fdf2 	bl	8006b98 <d_make_comp>
 800bfb4:	4683      	mov	fp, r0
 800bfb6:	465b      	mov	r3, fp
 800bfb8:	9a00      	ldr	r2, [sp, #0]
 800bfba:	2137      	movs	r1, #55	; 0x37
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f7fa fdeb 	bl	8006b98 <d_make_comp>
 800bfc2:	464a      	mov	r2, r9
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2136      	movs	r1, #54	; 0x36
 800bfc8:	e77c      	b.n	800bec4 <d_exprlist+0x840>
 800bfca:	78d3      	ldrb	r3, [r2, #3]
 800bfcc:	2b72      	cmp	r3, #114	; 0x72
 800bfce:	f000 8456 	beq.w	800c87e <d_exprlist+0x11fa>
 800bfd2:	2b70      	cmp	r3, #112	; 0x70
 800bfd4:	f000 84ac 	beq.w	800c930 <d_exprlist+0x12ac>
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f001 fd7f 	bl	800dadc <d_operator_name>
 800bfde:	4680      	mov	r8, r0
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	f000 8117 	beq.w	800c214 <d_exprlist+0xb90>
 800bfe6:	7803      	ldrb	r3, [r0, #0]
 800bfe8:	2b31      	cmp	r3, #49	; 0x31
 800bfea:	f000 828b 	beq.w	800c504 <d_exprlist+0xe80>
 800bfee:	2b32      	cmp	r3, #50	; 0x32
 800bff0:	f040 8232 	bne.w	800c458 <d_exprlist+0xdd4>
 800bff4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	f200 810b 	bhi.w	800c214 <d_exprlist+0xb90>
 800bffe:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c002:	000d      	.short	0x000d
 800c004:	00590233 	.word	0x00590233
 800c008:	0015      	.short	0x0015
 800c00a:	bf00      	nop
 800c00c:	08016124 	.word	0x08016124
 800c010:	0801611c 	.word	0x0801611c
 800c014:	08016238 	.word	0x08016238
 800c018:	0801623c 	.word	0x0801623c
 800c01c:	4642      	mov	r2, r8
 800c01e:	2300      	movs	r3, #0
 800c020:	2134      	movs	r1, #52	; 0x34
 800c022:	4620      	mov	r0, r4
 800c024:	f7fa fdb8 	bl	8006b98 <d_make_comp>
 800c028:	4602      	mov	r2, r0
 800c02a:	e4fc      	b.n	800ba26 <d_exprlist+0x3a2>
 800c02c:	f04f 0900 	mov.w	r9, #0
 800c030:	49c8      	ldr	r1, [pc, #800]	; (800c354 <d_exprlist+0xcd0>)
 800c032:	4648      	mov	r0, r9
 800c034:	f002 ff08 	bl	800ee48 <strcmp>
 800c038:	2800      	cmp	r0, #0
 800c03a:	f000 8575 	beq.w	800cb28 <d_exprlist+0x14a4>
 800c03e:	f899 3000 	ldrb.w	r3, [r9]
 800c042:	2b6e      	cmp	r3, #110	; 0x6e
 800c044:	f040 80e6 	bne.w	800c214 <d_exprlist+0xb90>
 800c048:	f899 3001 	ldrb.w	r3, [r9, #1]
 800c04c:	2b77      	cmp	r3, #119	; 0x77
 800c04e:	d002      	beq.n	800c056 <d_exprlist+0x9d2>
 800c050:	2b61      	cmp	r3, #97	; 0x61
 800c052:	f040 80df 	bne.w	800c214 <d_exprlist+0xb90>
 800c056:	215f      	movs	r1, #95	; 0x5f
 800c058:	4620      	mov	r0, r4
 800c05a:	f7ff fb13 	bl	800b684 <d_exprlist>
 800c05e:	4681      	mov	r9, r0
 800c060:	4620      	mov	r0, r4
 800c062:	f001 f97f 	bl	800d364 <d_type>
 800c066:	68e3      	ldr	r3, [r4, #12]
 800c068:	4682      	mov	sl, r0
 800c06a:	781a      	ldrb	r2, [r3, #0]
 800c06c:	2a45      	cmp	r2, #69	; 0x45
 800c06e:	f000 85cb 	beq.w	800cc08 <d_exprlist+0x1584>
 800c072:	2a70      	cmp	r2, #112	; 0x70
 800c074:	f000 85bc 	beq.w	800cbf0 <d_exprlist+0x156c>
 800c078:	2a69      	cmp	r2, #105	; 0x69
 800c07a:	f040 80cb 	bne.w	800c214 <d_exprlist+0xb90>
 800c07e:	785b      	ldrb	r3, [r3, #1]
 800c080:	2b6c      	cmp	r3, #108	; 0x6c
 800c082:	f040 80c7 	bne.w	800c214 <d_exprlist+0xb90>
 800c086:	4620      	mov	r0, r4
 800c088:	f000 ff9a 	bl	800cfc0 <d_expression_1>
 800c08c:	4603      	mov	r3, r0
 800c08e:	4652      	mov	r2, sl
 800c090:	213a      	movs	r1, #58	; 0x3a
 800c092:	4620      	mov	r0, r4
 800c094:	f7fa fd80 	bl	8006b98 <d_make_comp>
 800c098:	464a      	mov	r2, r9
 800c09a:	4603      	mov	r3, r0
 800c09c:	2139      	movs	r1, #57	; 0x39
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f7fa fd7a 	bl	8006b98 <d_make_comp>
 800c0a4:	4642      	mov	r2, r8
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2138      	movs	r1, #56	; 0x38
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f7fa fd74 	bl	8006b98 <d_make_comp>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	e4b8      	b.n	800ba26 <d_exprlist+0x3a2>
 800c0b4:	f04f 0900 	mov.w	r9, #0
 800c0b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	785a      	ldrb	r2, [r3, #1]
 800c0c0:	2a63      	cmp	r2, #99	; 0x63
 800c0c2:	f000 84dd 	beq.w	800ca80 <d_exprlist+0x13fc>
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f000 ff7a 	bl	800cfc0 <d_expression_1>
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	49a2      	ldr	r1, [pc, #648]	; (800c358 <d_exprlist+0xcd4>)
 800c0d0:	4648      	mov	r0, r9
 800c0d2:	f002 feb9 	bl	800ee48 <strcmp>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f000 84c9 	beq.w	800ca6e <d_exprlist+0x13ea>
 800c0dc:	499f      	ldr	r1, [pc, #636]	; (800c35c <d_exprlist+0xcd8>)
 800c0de:	4648      	mov	r0, r9
 800c0e0:	f002 feb2 	bl	800ee48 <strcmp>
 800c0e4:	b130      	cbz	r0, 800c0f4 <d_exprlist+0xa70>
 800c0e6:	4648      	mov	r0, r9
 800c0e8:	499d      	ldr	r1, [pc, #628]	; (800c360 <d_exprlist+0xcdc>)
 800c0ea:	f002 fead 	bl	800ee48 <strcmp>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f040 8578 	bne.w	800cbe4 <d_exprlist+0x1560>
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f001 fdb1 	bl	800dc5c <d_unqualified_name>
 800c0fa:	68e3      	ldr	r3, [r4, #12]
 800c0fc:	4681      	mov	r9, r0
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b49      	cmp	r3, #73	; 0x49
 800c102:	f000 85ca 	beq.w	800cc9a <d_exprlist+0x1616>
 800c106:	464b      	mov	r3, r9
 800c108:	4652      	mov	r2, sl
 800c10a:	2137      	movs	r1, #55	; 0x37
 800c10c:	4620      	mov	r0, r4
 800c10e:	f7fa fd43 	bl	8006b98 <d_make_comp>
 800c112:	4642      	mov	r2, r8
 800c114:	4603      	mov	r3, r0
 800c116:	2136      	movs	r1, #54	; 0x36
 800c118:	4620      	mov	r0, r4
 800c11a:	f7fa fd3d 	bl	8006b98 <d_make_comp>
 800c11e:	4602      	mov	r2, r0
 800c120:	e481      	b.n	800ba26 <d_exprlist+0x3a2>
 800c122:	784b      	ldrb	r3, [r1, #1]
 800c124:	2b72      	cmp	r3, #114	; 0x72
 800c126:	f000 83cf 	beq.w	800c8c8 <d_exprlist+0x1244>
 800c12a:	2b70      	cmp	r3, #112	; 0x70
 800c12c:	f47f ad93 	bne.w	800bc56 <d_exprlist+0x5d2>
 800c130:	3102      	adds	r1, #2
 800c132:	60e1      	str	r1, [r4, #12]
 800c134:	4620      	mov	r0, r4
 800c136:	f000 ff43 	bl	800cfc0 <d_expression_1>
 800c13a:	2300      	movs	r3, #0
 800c13c:	4602      	mov	r2, r0
 800c13e:	2149      	movs	r1, #73	; 0x49
 800c140:	4620      	mov	r0, r4
 800c142:	f7fa fd29 	bl	8006b98 <d_make_comp>
 800c146:	4682      	mov	sl, r0
 800c148:	f7ff bbc8 	b.w	800b8dc <d_exprlist+0x258>
 800c14c:	78d3      	ldrb	r3, [r2, #3]
 800c14e:	2b70      	cmp	r3, #112	; 0x70
 800c150:	f47f af42 	bne.w	800bfd8 <d_exprlist+0x954>
 800c154:	1d13      	adds	r3, r2, #4
 800c156:	60e3      	str	r3, [r4, #12]
 800c158:	7913      	ldrb	r3, [r2, #4]
 800c15a:	2b54      	cmp	r3, #84	; 0x54
 800c15c:	d155      	bne.n	800c20a <d_exprlist+0xb86>
 800c15e:	3205      	adds	r2, #5
 800c160:	60e2      	str	r2, [r4, #12]
 800c162:	2000      	movs	r0, #0
 800c164:	6963      	ldr	r3, [r4, #20]
 800c166:	69a2      	ldr	r2, [r4, #24]
 800c168:	4293      	cmp	r3, r2
 800c16a:	da53      	bge.n	800c214 <d_exprlist+0xb90>
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	1c59      	adds	r1, r3, #1
 800c170:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c174:	6161      	str	r1, [r4, #20]
 800c176:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800c17a:	f000 8616 	beq.w	800cdaa <d_exprlist+0x1726>
 800c17e:	f04f 0e06 	mov.w	lr, #6
 800c182:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800c186:	460a      	mov	r2, r1
 800c188:	6048      	str	r0, [r1, #4]
 800c18a:	e44c      	b.n	800ba26 <d_exprlist+0x3a2>
 800c18c:	4620      	mov	r0, r4
 800c18e:	f7fe fc03 	bl	800a998 <d_template_args>
 800c192:	464a      	mov	r2, r9
 800c194:	4603      	mov	r3, r0
 800c196:	2104      	movs	r1, #4
 800c198:	4620      	mov	r0, r4
 800c19a:	f7fa fcfd 	bl	8006b98 <d_make_comp>
 800c19e:	4681      	mov	r9, r0
 800c1a0:	f7ff bbb8 	b.w	800b914 <d_exprlist+0x290>
 800c1a4:	784b      	ldrb	r3, [r1, #1]
 800c1a6:	2b70      	cmp	r3, #112	; 0x70
 800c1a8:	f47f ad55 	bne.w	800bc56 <d_exprlist+0x5d2>
 800c1ac:	1c8b      	adds	r3, r1, #2
 800c1ae:	60e3      	str	r3, [r4, #12]
 800c1b0:	788b      	ldrb	r3, [r1, #2]
 800c1b2:	2b54      	cmp	r3, #84	; 0x54
 800c1b4:	d130      	bne.n	800c218 <d_exprlist+0xb94>
 800c1b6:	3103      	adds	r1, #3
 800c1b8:	60e1      	str	r1, [r4, #12]
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	6963      	ldr	r3, [r4, #20]
 800c1be:	69a2      	ldr	r2, [r4, #24]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	da2e      	bge.n	800c222 <d_exprlist+0xb9e>
 800c1c4:	6922      	ldr	r2, [r4, #16]
 800c1c6:	1c59      	adds	r1, r3, #1
 800c1c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c1cc:	eb12 0a83 	adds.w	sl, r2, r3, lsl #2
 800c1d0:	6161      	str	r1, [r4, #20]
 800c1d2:	f43f ab83 	beq.w	800b8dc <d_exprlist+0x258>
 800c1d6:	2106      	movs	r1, #6
 800c1d8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800c1dc:	f8ca 0004 	str.w	r0, [sl, #4]
 800c1e0:	f7ff bb7c 	b.w	800b8dc <d_exprlist+0x258>
 800c1e4:	785a      	ldrb	r2, [r3, #1]
 800c1e6:	2a69      	cmp	r2, #105	; 0x69
 800c1e8:	f47f aacc 	bne.w	800b784 <d_exprlist+0x100>
 800c1ec:	3302      	adds	r3, #2
 800c1ee:	60e3      	str	r3, [r4, #12]
 800c1f0:	2145      	movs	r1, #69	; 0x45
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f7ff fa46 	bl	800b684 <d_exprlist>
 800c1f8:	4683      	mov	fp, r0
 800c1fa:	f7ff bb33 	b.w	800b864 <d_exprlist+0x1e0>
 800c1fe:	4620      	mov	r0, r4
 800c200:	f002 fba8 	bl	800e954 <d_expr_primary>
 800c204:	4681      	mov	r9, r0
 800c206:	f7ff bbbf 	b.w	800b988 <d_exprlist+0x304>
 800c20a:	4620      	mov	r0, r4
 800c20c:	f7fa fe4e 	bl	8006eac <d_compact_number>
 800c210:	3001      	adds	r0, #1
 800c212:	d1a7      	bne.n	800c164 <d_exprlist+0xae0>
 800c214:	2200      	movs	r2, #0
 800c216:	e406      	b.n	800ba26 <d_exprlist+0x3a2>
 800c218:	4620      	mov	r0, r4
 800c21a:	f7fa fe47 	bl	8006eac <d_compact_number>
 800c21e:	3001      	adds	r0, #1
 800c220:	d1cc      	bne.n	800c1bc <d_exprlist+0xb38>
 800c222:	f04f 0a00 	mov.w	sl, #0
 800c226:	f7ff bb59 	b.w	800b8dc <d_exprlist+0x258>
 800c22a:	4620      	mov	r0, r4
 800c22c:	f7fa fe56 	bl	8006edc <d_template_param>
 800c230:	4681      	mov	r9, r0
 800c232:	f7ff bba9 	b.w	800b988 <d_exprlist+0x304>
 800c236:	6843      	ldr	r3, [r0, #4]
 800c238:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c23a:	689a      	ldr	r2, [r3, #8]
 800c23c:	f8d3 b000 	ldr.w	fp, [r3]
 800c240:	3a02      	subs	r2, #2
 800c242:	440a      	add	r2, r1
 800c244:	6322      	str	r2, [r4, #48]	; 0x30
 800c246:	4658      	mov	r0, fp
 800c248:	4946      	ldr	r1, [pc, #280]	; (800c364 <d_exprlist+0xce0>)
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	f002 fdfc 	bl	800ee48 <strcmp>
 800c250:	9b00      	ldr	r3, [sp, #0]
 800c252:	2800      	cmp	r0, #0
 800c254:	f000 832b 	beq.w	800c8ae <d_exprlist+0x122a>
 800c258:	68da      	ldr	r2, [r3, #12]
 800c25a:	2a03      	cmp	r2, #3
 800c25c:	f63f ac9e 	bhi.w	800bb9c <d_exprlist+0x518>
 800c260:	a301      	add	r3, pc, #4	; (adr r3, 800c268 <d_exprlist+0xbe4>)
 800c262:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c266:	bf00      	nop
 800c268:	0800bcb3 	.word	0x0800bcb3
 800c26c:	0800c66f 	.word	0x0800c66f
 800c270:	0800bd4f 	.word	0x0800bd4f
 800c274:	0800bcc7 	.word	0x0800bcc7
 800c278:	7853      	ldrb	r3, [r2, #1]
 800c27a:	2b72      	cmp	r3, #114	; 0x72
 800c27c:	f000 838a 	beq.w	800c994 <d_exprlist+0x1310>
 800c280:	2b70      	cmp	r3, #112	; 0x70
 800c282:	f000 8443 	beq.w	800cb0c <d_exprlist+0x1488>
 800c286:	4620      	mov	r0, r4
 800c288:	f001 fc28 	bl	800dadc <d_operator_name>
 800c28c:	4683      	mov	fp, r0
 800c28e:	2800      	cmp	r0, #0
 800c290:	f43f aae8 	beq.w	800b864 <d_exprlist+0x1e0>
 800c294:	7803      	ldrb	r3, [r0, #0]
 800c296:	2b31      	cmp	r3, #49	; 0x31
 800c298:	f000 8242 	beq.w	800c720 <d_exprlist+0x109c>
 800c29c:	2b32      	cmp	r3, #50	; 0x32
 800c29e:	f040 81c8 	bne.w	800c632 <d_exprlist+0xfae>
 800c2a2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	f200 8128 	bhi.w	800c4fc <d_exprlist+0xe78>
 800c2ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c2b0:	01c90004 	.word	0x01c90004
 800c2b4:	000d005c 	.word	0x000d005c
 800c2b8:	465a      	mov	r2, fp
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	2134      	movs	r1, #52	; 0x34
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f7fa fc6a 	bl	8006b98 <d_make_comp>
 800c2c4:	4683      	mov	fp, r0
 800c2c6:	f7ff bacd 	b.w	800b864 <d_exprlist+0x1e0>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	4921      	ldr	r1, [pc, #132]	; (800c354 <d_exprlist+0xcd0>)
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	f002 fdb9 	bl	800ee48 <strcmp>
 800c2d6:	9b00      	ldr	r3, [sp, #0]
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	f000 850d 	beq.w	800ccf8 <d_exprlist+0x1674>
 800c2de:	781a      	ldrb	r2, [r3, #0]
 800c2e0:	2a6e      	cmp	r2, #110	; 0x6e
 800c2e2:	f040 810b 	bne.w	800c4fc <d_exprlist+0xe78>
 800c2e6:	785b      	ldrb	r3, [r3, #1]
 800c2e8:	2b77      	cmp	r3, #119	; 0x77
 800c2ea:	d002      	beq.n	800c2f2 <d_exprlist+0xc6e>
 800c2ec:	2b61      	cmp	r3, #97	; 0x61
 800c2ee:	f040 8105 	bne.w	800c4fc <d_exprlist+0xe78>
 800c2f2:	215f      	movs	r1, #95	; 0x5f
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	f7ff f9c5 	bl	800b684 <d_exprlist>
 800c2fa:	9000      	str	r0, [sp, #0]
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f001 f831 	bl	800d364 <d_type>
 800c302:	68e3      	ldr	r3, [r4, #12]
 800c304:	9001      	str	r0, [sp, #4]
 800c306:	781a      	ldrb	r2, [r3, #0]
 800c308:	2a45      	cmp	r2, #69	; 0x45
 800c30a:	f000 84e4 	beq.w	800ccd6 <d_exprlist+0x1652>
 800c30e:	2a70      	cmp	r2, #112	; 0x70
 800c310:	f000 85ce 	beq.w	800ceb0 <d_exprlist+0x182c>
 800c314:	2a69      	cmp	r2, #105	; 0x69
 800c316:	f040 80f1 	bne.w	800c4fc <d_exprlist+0xe78>
 800c31a:	785b      	ldrb	r3, [r3, #1]
 800c31c:	2b6c      	cmp	r3, #108	; 0x6c
 800c31e:	f040 80ed 	bne.w	800c4fc <d_exprlist+0xe78>
 800c322:	4620      	mov	r0, r4
 800c324:	f000 fe4c 	bl	800cfc0 <d_expression_1>
 800c328:	4603      	mov	r3, r0
 800c32a:	9a01      	ldr	r2, [sp, #4]
 800c32c:	213a      	movs	r1, #58	; 0x3a
 800c32e:	4620      	mov	r0, r4
 800c330:	f7fa fc32 	bl	8006b98 <d_make_comp>
 800c334:	9a00      	ldr	r2, [sp, #0]
 800c336:	4603      	mov	r3, r0
 800c338:	2139      	movs	r1, #57	; 0x39
 800c33a:	4620      	mov	r0, r4
 800c33c:	f7fa fc2c 	bl	8006b98 <d_make_comp>
 800c340:	465a      	mov	r2, fp
 800c342:	4603      	mov	r3, r0
 800c344:	2138      	movs	r1, #56	; 0x38
 800c346:	4620      	mov	r0, r4
 800c348:	f7fa fc26 	bl	8006b98 <d_make_comp>
 800c34c:	4683      	mov	fp, r0
 800c34e:	f7ff ba89 	b.w	800b864 <d_exprlist+0x1e0>
 800c352:	bf00      	nop
 800c354:	08016124 	.word	0x08016124
 800c358:	0801611c 	.word	0x0801611c
 800c35c:	08016238 	.word	0x08016238
 800c360:	0801623c 	.word	0x0801623c
 800c364:	0801642c 	.word	0x0801642c
 800c368:	2300      	movs	r3, #0
 800c36a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c36e:	6812      	ldr	r2, [r2, #0]
 800c370:	7851      	ldrb	r1, [r2, #1]
 800c372:	2963      	cmp	r1, #99	; 0x63
 800c374:	f000 84d4 	beq.w	800cd20 <d_exprlist+0x169c>
 800c378:	4620      	mov	r0, r4
 800c37a:	9301      	str	r3, [sp, #4]
 800c37c:	f000 fe20 	bl	800cfc0 <d_expression_1>
 800c380:	9b01      	ldr	r3, [sp, #4]
 800c382:	9000      	str	r0, [sp, #0]
 800c384:	4618      	mov	r0, r3
 800c386:	49d1      	ldr	r1, [pc, #836]	; (800c6cc <d_exprlist+0x1048>)
 800c388:	9301      	str	r3, [sp, #4]
 800c38a:	f002 fd5d 	bl	800ee48 <strcmp>
 800c38e:	9b01      	ldr	r3, [sp, #4]
 800c390:	2800      	cmp	r0, #0
 800c392:	f000 84be 	beq.w	800cd12 <d_exprlist+0x168e>
 800c396:	49ce      	ldr	r1, [pc, #824]	; (800c6d0 <d_exprlist+0x104c>)
 800c398:	4618      	mov	r0, r3
 800c39a:	9301      	str	r3, [sp, #4]
 800c39c:	f002 fd54 	bl	800ee48 <strcmp>
 800c3a0:	b138      	cbz	r0, 800c3b2 <d_exprlist+0xd2e>
 800c3a2:	9b01      	ldr	r3, [sp, #4]
 800c3a4:	49cb      	ldr	r1, [pc, #812]	; (800c6d4 <d_exprlist+0x1050>)
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f002 fd4e 	bl	800ee48 <strcmp>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f040 84c8 	bne.w	800cd42 <d_exprlist+0x16be>
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f001 fc52 	bl	800dc5c <d_unqualified_name>
 800c3b8:	68e3      	ldr	r3, [r4, #12]
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	2b49      	cmp	r3, #73	; 0x49
 800c3c0:	d10a      	bne.n	800c3d8 <d_exprlist+0xd54>
 800c3c2:	9001      	str	r0, [sp, #4]
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f7fe fae7 	bl	800a998 <d_template_args>
 800c3ca:	9a01      	ldr	r2, [sp, #4]
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2104      	movs	r1, #4
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f7fa fbe1 	bl	8006b98 <d_make_comp>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	4613      	mov	r3, r2
 800c3da:	2137      	movs	r1, #55	; 0x37
 800c3dc:	9a00      	ldr	r2, [sp, #0]
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f7fa fbda 	bl	8006b98 <d_make_comp>
 800c3e4:	465a      	mov	r2, fp
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2136      	movs	r1, #54	; 0x36
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7fa fbd4 	bl	8006b98 <d_make_comp>
 800c3f0:	4683      	mov	fp, r0
 800c3f2:	f7ff ba37 	b.w	800b864 <d_exprlist+0x1e0>
 800c3f6:	7843      	ldrb	r3, [r0, #1]
 800c3f8:	2b72      	cmp	r3, #114	; 0x72
 800c3fa:	f000 82a7 	beq.w	800c94c <d_exprlist+0x12c8>
 800c3fe:	2b70      	cmp	r3, #112	; 0x70
 800c400:	f47f ac06 	bne.w	800bc10 <d_exprlist+0x58c>
 800c404:	1c82      	adds	r2, r0, #2
 800c406:	60e2      	str	r2, [r4, #12]
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 fdd9 	bl	800cfc0 <d_expression_1>
 800c40e:	465b      	mov	r3, fp
 800c410:	4602      	mov	r2, r0
 800c412:	2149      	movs	r1, #73	; 0x49
 800c414:	e556      	b.n	800bec4 <d_exprlist+0x840>
 800c416:	7853      	ldrb	r3, [r2, #1]
 800c418:	2b70      	cmp	r3, #112	; 0x70
 800c41a:	f47f af34 	bne.w	800c286 <d_exprlist+0xc02>
 800c41e:	1c93      	adds	r3, r2, #2
 800c420:	60e3      	str	r3, [r4, #12]
 800c422:	7893      	ldrb	r3, [r2, #2]
 800c424:	2b54      	cmp	r3, #84	; 0x54
 800c426:	f040 82cc 	bne.w	800c9c2 <d_exprlist+0x133e>
 800c42a:	3203      	adds	r2, #3
 800c42c:	60e2      	str	r2, [r4, #12]
 800c42e:	2000      	movs	r0, #0
 800c430:	6963      	ldr	r3, [r4, #20]
 800c432:	69a2      	ldr	r2, [r4, #24]
 800c434:	4293      	cmp	r3, r2
 800c436:	da61      	bge.n	800c4fc <d_exprlist+0xe78>
 800c438:	6922      	ldr	r2, [r4, #16]
 800c43a:	1c59      	adds	r1, r3, #1
 800c43c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c440:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 800c444:	6161      	str	r1, [r4, #20]
 800c446:	f43f aa0d 	beq.w	800b864 <d_exprlist+0x1e0>
 800c44a:	2106      	movs	r1, #6
 800c44c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800c450:	f8cb 0004 	str.w	r0, [fp, #4]
 800c454:	f7ff ba06 	b.w	800b864 <d_exprlist+0x1e0>
 800c458:	2b33      	cmp	r3, #51	; 0x33
 800c45a:	f47f aedb 	bne.w	800c214 <d_exprlist+0xb90>
 800c45e:	68e3      	ldr	r3, [r4, #12]
 800c460:	781a      	ldrb	r2, [r3, #0]
 800c462:	2a5f      	cmp	r2, #95	; 0x5f
 800c464:	f000 83b6 	beq.w	800cbd4 <d_exprlist+0x1550>
 800c468:	f04f 0900 	mov.w	r9, #0
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 fda7 	bl	800cfc0 <d_expression_1>
 800c472:	4603      	mov	r3, r0
 800c474:	f1b9 0f00 	cmp.w	r9, #0
 800c478:	d005      	beq.n	800c486 <d_exprlist+0xe02>
 800c47a:	4602      	mov	r2, r0
 800c47c:	2137      	movs	r1, #55	; 0x37
 800c47e:	4620      	mov	r0, r4
 800c480:	f7fa fb8a 	bl	8006b98 <d_make_comp>
 800c484:	4603      	mov	r3, r0
 800c486:	4642      	mov	r2, r8
 800c488:	2135      	movs	r1, #53	; 0x35
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7fa fb84 	bl	8006b98 <d_make_comp>
 800c490:	4602      	mov	r2, r0
 800c492:	f7ff bac8 	b.w	800ba26 <d_exprlist+0x3a2>
 800c496:	2b33      	cmp	r3, #51	; 0x33
 800c498:	f47f aec3 	bne.w	800c222 <d_exprlist+0xb9e>
 800c49c:	68e3      	ldr	r3, [r4, #12]
 800c49e:	781a      	ldrb	r2, [r3, #0]
 800c4a0:	2a5f      	cmp	r2, #95	; 0x5f
 800c4a2:	f000 83e4 	beq.w	800cc6e <d_exprlist+0x15ea>
 800c4a6:	f04f 0b00 	mov.w	fp, #0
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 fd88 	bl	800cfc0 <d_expression_1>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	f1bb 0f00 	cmp.w	fp, #0
 800c4b6:	d005      	beq.n	800c4c4 <d_exprlist+0xe40>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	2137      	movs	r1, #55	; 0x37
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f7fa fb6b 	bl	8006b98 <d_make_comp>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	4652      	mov	r2, sl
 800c4c6:	2135      	movs	r1, #53	; 0x35
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f7fa fb65 	bl	8006b98 <d_make_comp>
 800c4ce:	4682      	mov	sl, r0
 800c4d0:	f7ff ba04 	b.w	800b8dc <d_exprlist+0x258>
 800c4d4:	784b      	ldrb	r3, [r1, #1]
 800c4d6:	2b6e      	cmp	r3, #110	; 0x6e
 800c4d8:	f47f abbd 	bne.w	800bc56 <d_exprlist+0x5d2>
 800c4dc:	3102      	adds	r1, #2
 800c4de:	60e1      	str	r1, [r4, #12]
 800c4e0:	f7ff b9f0 	b.w	800b8c4 <d_exprlist+0x240>
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f002 fa35 	bl	800e954 <d_expr_primary>
 800c4ea:	4682      	mov	sl, r0
 800c4ec:	f7ff b9f6 	b.w	800b8dc <d_exprlist+0x258>
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f7fa fcf3 	bl	8006edc <d_template_param>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	f7ff ba95 	b.w	800ba26 <d_exprlist+0x3a2>
 800c4fc:	f04f 0b00 	mov.w	fp, #0
 800c500:	f7ff b9b0 	b.w	800b864 <d_exprlist+0x1e0>
 800c504:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800c508:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c50a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c50e:	f8da 9000 	ldr.w	r9, [sl]
 800c512:	3b02      	subs	r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	6323      	str	r3, [r4, #48]	; 0x30
 800c518:	4648      	mov	r0, r9
 800c51a:	496f      	ldr	r1, [pc, #444]	; (800c6d8 <d_exprlist+0x1054>)
 800c51c:	f002 fc94 	bl	800ee48 <strcmp>
 800c520:	2800      	cmp	r0, #0
 800c522:	f000 8281 	beq.w	800ca28 <d_exprlist+0x13a4>
 800c526:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	f63f ae72 	bhi.w	800c214 <d_exprlist+0xb90>
 800c530:	a201      	add	r2, pc, #4	; (adr r2, 800c538 <d_exprlist+0xeb4>)
 800c532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c536:	bf00      	nop
 800c538:	0800c01d 	.word	0x0800c01d
 800c53c:	0800c805 	.word	0x0800c805
 800c540:	0800c0b9 	.word	0x0800c0b9
 800c544:	0800c031 	.word	0x0800c031
 800c548:	68e2      	ldr	r2, [r4, #12]
 800c54a:	f04f 0900 	mov.w	r9, #0
 800c54e:	7813      	ldrb	r3, [r2, #0]
 800c550:	f7ff babd 	b.w	800bace <d_exprlist+0x44a>
 800c554:	6843      	ldr	r3, [r0, #4]
 800c556:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c558:	689a      	ldr	r2, [r3, #8]
 800c55a:	f8d3 b000 	ldr.w	fp, [r3]
 800c55e:	3a02      	subs	r2, #2
 800c560:	440a      	add	r2, r1
 800c562:	6322      	str	r2, [r4, #48]	; 0x30
 800c564:	4658      	mov	r0, fp
 800c566:	495c      	ldr	r1, [pc, #368]	; (800c6d8 <d_exprlist+0x1054>)
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	f002 fc6d 	bl	800ee48 <strcmp>
 800c56e:	9b00      	ldr	r3, [sp, #0]
 800c570:	2800      	cmp	r0, #0
 800c572:	f000 8272 	beq.w	800ca5a <d_exprlist+0x13d6>
 800c576:	68da      	ldr	r2, [r3, #12]
 800c578:	2a03      	cmp	r2, #3
 800c57a:	f63f ae52 	bhi.w	800c222 <d_exprlist+0xb9e>
 800c57e:	a301      	add	r3, pc, #4	; (adr r3, 800c584 <d_exprlist+0xf00>)
 800c580:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c584:	0800bdb9 	.word	0x0800bdb9
 800c588:	0800c84f 	.word	0x0800c84f
 800c58c:	0800be55 	.word	0x0800be55
 800c590:	0800bdcd 	.word	0x0800bdcd
 800c594:	3301      	adds	r3, #1
 800c596:	60e3      	str	r3, [r4, #12]
 800c598:	f04f 0b00 	mov.w	fp, #0
 800c59c:	4620      	mov	r0, r4
 800c59e:	f000 fd0f 	bl	800cfc0 <d_expression_1>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	f1bb 0f00 	cmp.w	fp, #0
 800c5a8:	d005      	beq.n	800c5b6 <d_exprlist+0xf32>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	2137      	movs	r1, #55	; 0x37
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f7fa faf2 	bl	8006b98 <d_make_comp>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	464a      	mov	r2, r9
 800c5b8:	2135      	movs	r1, #53	; 0x35
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7fa faec 	bl	8006b98 <d_make_comp>
 800c5c0:	4681      	mov	r9, r0
 800c5c2:	f7ff b9e1 	b.w	800b988 <d_exprlist+0x304>
 800c5c6:	3101      	adds	r1, #1
 800c5c8:	60e1      	str	r1, [r4, #12]
 800c5ca:	f7ff b9bf 	b.w	800b94c <d_exprlist+0x2c8>
 800c5ce:	2b33      	cmp	r3, #51	; 0x33
 800c5d0:	d1ba      	bne.n	800c548 <d_exprlist+0xec4>
 800c5d2:	68e3      	ldr	r3, [r4, #12]
 800c5d4:	781a      	ldrb	r2, [r3, #0]
 800c5d6:	2a5f      	cmp	r2, #95	; 0x5f
 800c5d8:	f000 8286 	beq.w	800cae8 <d_exprlist+0x1464>
 800c5dc:	f04f 0b00 	mov.w	fp, #0
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 fced 	bl	800cfc0 <d_expression_1>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	f1bb 0f00 	cmp.w	fp, #0
 800c5ec:	f000 8283 	beq.w	800caf6 <d_exprlist+0x1472>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	2137      	movs	r1, #55	; 0x37
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f7fa facf 	bl	8006b98 <d_make_comp>
 800c5fa:	464a      	mov	r2, r9
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2135      	movs	r1, #53	; 0x35
 800c600:	e460      	b.n	800bec4 <d_exprlist+0x840>
 800c602:	3102      	adds	r1, #2
 800c604:	60e1      	str	r1, [r4, #12]
 800c606:	4620      	mov	r0, r4
 800c608:	f000 feac 	bl	800d364 <d_type>
 800c60c:	4681      	mov	r9, r0
 800c60e:	4620      	mov	r0, r4
 800c610:	f001 fb24 	bl	800dc5c <d_unqualified_name>
 800c614:	68e3      	ldr	r3, [r4, #12]
 800c616:	4683      	mov	fp, r0
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b49      	cmp	r3, #73	; 0x49
 800c61c:	f000 81e1 	beq.w	800c9e2 <d_exprlist+0x135e>
 800c620:	4603      	mov	r3, r0
 800c622:	464a      	mov	r2, r9
 800c624:	2101      	movs	r1, #1
 800c626:	4620      	mov	r0, r4
 800c628:	f7fa fab6 	bl	8006b98 <d_make_comp>
 800c62c:	4681      	mov	r9, r0
 800c62e:	f7ff b9ab 	b.w	800b988 <d_exprlist+0x304>
 800c632:	2b33      	cmp	r3, #51	; 0x33
 800c634:	f47f af62 	bne.w	800c4fc <d_exprlist+0xe78>
 800c638:	68e3      	ldr	r3, [r4, #12]
 800c63a:	781a      	ldrb	r2, [r3, #0]
 800c63c:	2a5f      	cmp	r2, #95	; 0x5f
 800c63e:	f000 83b7 	beq.w	800cdb0 <d_exprlist+0x172c>
 800c642:	2200      	movs	r2, #0
 800c644:	4620      	mov	r0, r4
 800c646:	9200      	str	r2, [sp, #0]
 800c648:	f000 fcba 	bl	800cfc0 <d_expression_1>
 800c64c:	9a00      	ldr	r2, [sp, #0]
 800c64e:	4603      	mov	r3, r0
 800c650:	b12a      	cbz	r2, 800c65e <d_exprlist+0xfda>
 800c652:	4602      	mov	r2, r0
 800c654:	2137      	movs	r1, #55	; 0x37
 800c656:	4620      	mov	r0, r4
 800c658:	f7fa fa9e 	bl	8006b98 <d_make_comp>
 800c65c:	4603      	mov	r3, r0
 800c65e:	465a      	mov	r2, fp
 800c660:	2135      	movs	r1, #53	; 0x35
 800c662:	4620      	mov	r0, r4
 800c664:	f7fa fa98 	bl	8006b98 <d_make_comp>
 800c668:	4683      	mov	fp, r0
 800c66a:	f7ff b8fb 	b.w	800b864 <d_exprlist+0x1e0>
 800c66e:	f1bb 0f00 	cmp.w	fp, #0
 800c672:	d091      	beq.n	800c598 <d_exprlist+0xf14>
 800c674:	f89b 2000 	ldrb.w	r2, [fp]
 800c678:	2a70      	cmp	r2, #112	; 0x70
 800c67a:	d001      	beq.n	800c680 <d_exprlist+0xffc>
 800c67c:	2a6d      	cmp	r2, #109	; 0x6d
 800c67e:	d18b      	bne.n	800c598 <d_exprlist+0xf14>
 800c680:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c684:	4293      	cmp	r3, r2
 800c686:	d187      	bne.n	800c598 <d_exprlist+0xf14>
 800c688:	68e3      	ldr	r3, [r4, #12]
 800c68a:	781a      	ldrb	r2, [r3, #0]
 800c68c:	2a5f      	cmp	r2, #95	; 0x5f
 800c68e:	d081      	beq.n	800c594 <d_exprlist+0xf10>
 800c690:	f04f 0b01 	mov.w	fp, #1
 800c694:	e782      	b.n	800c59c <d_exprlist+0xf18>
 800c696:	4620      	mov	r0, r4
 800c698:	f7fe f97e 	bl	800a998 <d_template_args>
 800c69c:	4642      	mov	r2, r8
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2104      	movs	r1, #4
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f7fa fa78 	bl	8006b98 <d_make_comp>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	f7ff b9bc 	b.w	800ba26 <d_exprlist+0x3a2>
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f002 f950 	bl	800e954 <d_expr_primary>
 800c6b4:	4683      	mov	fp, r0
 800c6b6:	f7ff b8d5 	b.w	800b864 <d_exprlist+0x1e0>
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f7fa fbf6 	bl	8006eac <d_compact_number>
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	f47f aa7a 	bne.w	800bbba <d_exprlist+0x536>
 800c6c6:	4681      	mov	r9, r0
 800c6c8:	f7ff b95e 	b.w	800b988 <d_exprlist+0x304>
 800c6cc:	0801611c 	.word	0x0801611c
 800c6d0:	08016238 	.word	0x08016238
 800c6d4:	0801623c 	.word	0x0801623c
 800c6d8:	0801642c 	.word	0x0801642c
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f002 f939 	bl	800e954 <d_expr_primary>
 800c6e2:	68e2      	ldr	r2, [r4, #12]
 800c6e4:	4681      	mov	r9, r0
 800c6e6:	7813      	ldrb	r3, [r2, #0]
 800c6e8:	f7ff b9f1 	b.w	800bace <d_exprlist+0x44a>
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f7fa fbf5 	bl	8006edc <d_template_param>
 800c6f2:	4683      	mov	fp, r0
 800c6f4:	f7ff b8b6 	b.w	800b864 <d_exprlist+0x1e0>
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f7fe f94d 	bl	800a998 <d_template_args>
 800c6fe:	4652      	mov	r2, sl
 800c700:	4603      	mov	r3, r0
 800c702:	2104      	movs	r1, #4
 800c704:	4620      	mov	r0, r4
 800c706:	f7fa fa47 	bl	8006b98 <d_make_comp>
 800c70a:	4682      	mov	sl, r0
 800c70c:	f7ff b8e6 	b.w	800b8dc <d_exprlist+0x258>
 800c710:	4620      	mov	r0, r4
 800c712:	f7fa fbe3 	bl	8006edc <d_template_param>
 800c716:	68e2      	ldr	r2, [r4, #12]
 800c718:	4681      	mov	r9, r0
 800c71a:	7813      	ldrb	r3, [r2, #0]
 800c71c:	f7ff b9d7 	b.w	800bace <d_exprlist+0x44a>
 800c720:	6842      	ldr	r2, [r0, #4]
 800c722:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c724:	6891      	ldr	r1, [r2, #8]
 800c726:	6813      	ldr	r3, [r2, #0]
 800c728:	3902      	subs	r1, #2
 800c72a:	4401      	add	r1, r0
 800c72c:	6321      	str	r1, [r4, #48]	; 0x30
 800c72e:	4618      	mov	r0, r3
 800c730:	49d2      	ldr	r1, [pc, #840]	; (800ca7c <d_exprlist+0x13f8>)
 800c732:	9201      	str	r2, [sp, #4]
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	f002 fb87 	bl	800ee48 <strcmp>
 800c73a:	9b00      	ldr	r3, [sp, #0]
 800c73c:	9a01      	ldr	r2, [sp, #4]
 800c73e:	2800      	cmp	r0, #0
 800c740:	f000 8190 	beq.w	800ca64 <d_exprlist+0x13e0>
 800c744:	68d2      	ldr	r2, [r2, #12]
 800c746:	2a03      	cmp	r2, #3
 800c748:	f63f aed8 	bhi.w	800c4fc <d_exprlist+0xe78>
 800c74c:	a101      	add	r1, pc, #4	; (adr r1, 800c754 <d_exprlist+0x10d0>)
 800c74e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c752:	bf00      	nop
 800c754:	0800c2b9 	.word	0x0800c2b9
 800c758:	0800ca33 	.word	0x0800ca33
 800c75c:	0800c36b 	.word	0x0800c36b
 800c760:	0800c2cd 	.word	0x0800c2cd
 800c764:	6843      	ldr	r3, [r0, #4]
 800c766:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c768:	689a      	ldr	r2, [r3, #8]
 800c76a:	f8d3 b000 	ldr.w	fp, [r3]
 800c76e:	3a02      	subs	r2, #2
 800c770:	440a      	add	r2, r1
 800c772:	6322      	str	r2, [r4, #48]	; 0x30
 800c774:	4658      	mov	r0, fp
 800c776:	49c1      	ldr	r1, [pc, #772]	; (800ca7c <d_exprlist+0x13f8>)
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	f002 fb65 	bl	800ee48 <strcmp>
 800c77e:	9b00      	ldr	r3, [sp, #0]
 800c780:	2800      	cmp	r0, #0
 800c782:	f000 81fd 	beq.w	800cb80 <d_exprlist+0x14fc>
 800c786:	68da      	ldr	r2, [r3, #12]
 800c788:	2a03      	cmp	r2, #3
 800c78a:	f63f aedd 	bhi.w	800c548 <d_exprlist+0xec4>
 800c78e:	a301      	add	r3, pc, #4	; (adr r3, 800c794 <d_exprlist+0x1110>)
 800c790:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c794:	0800bebf 	.word	0x0800bebf
 800c798:	0800c9f9 	.word	0x0800c9f9
 800c79c:	0800bf57 	.word	0x0800bf57
 800c7a0:	0800bed7 	.word	0x0800bed7
 800c7a4:	3102      	addpl	r1, #2
 800c7a6:	60e1      	str	r1, [r4, #12]
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fc09 	bl	800cfc0 <d_expression_1>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	2149      	movs	r1, #73	; 0x49
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f7fa f9ef 	bl	8006b98 <d_make_comp>
 800c7ba:	4681      	mov	r9, r0
 800c7bc:	f7ff b8e4 	b.w	800b988 <d_exprlist+0x304>
 800c7c0:	1c83      	adds	r3, r0, #2
 800c7c2:	60e3      	str	r3, [r4, #12]
 800c7c4:	7883      	ldrb	r3, [r0, #2]
 800c7c6:	2b54      	cmp	r3, #84	; 0x54
 800c7c8:	f040 80d9 	bne.w	800c97e <d_exprlist+0x12fa>
 800c7cc:	1cc2      	adds	r2, r0, #3
 800c7ce:	4658      	mov	r0, fp
 800c7d0:	60e2      	str	r2, [r4, #12]
 800c7d2:	6963      	ldr	r3, [r4, #20]
 800c7d4:	69a1      	ldr	r1, [r4, #24]
 800c7d6:	428b      	cmp	r3, r1
 800c7d8:	f280 80cc 	bge.w	800c974 <d_exprlist+0x12f0>
 800c7dc:	6921      	ldr	r1, [r4, #16]
 800c7de:	f103 0e01 	add.w	lr, r3, #1
 800c7e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c7e6:	eb11 0983 	adds.w	r9, r1, r3, lsl #2
 800c7ea:	f8c4 e014 	str.w	lr, [r4, #20]
 800c7ee:	f43f ab6e 	beq.w	800bece <d_exprlist+0x84a>
 800c7f2:	f04f 0e06 	mov.w	lr, #6
 800c7f6:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 800c7fa:	f8c9 0004 	str.w	r0, [r9, #4]
 800c7fe:	7813      	ldrb	r3, [r2, #0]
 800c800:	f7ff b965 	b.w	800bace <d_exprlist+0x44a>
 800c804:	f1b9 0f00 	cmp.w	r9, #0
 800c808:	f43f ae2e 	beq.w	800c468 <d_exprlist+0xde4>
 800c80c:	f899 3000 	ldrb.w	r3, [r9]
 800c810:	2b70      	cmp	r3, #112	; 0x70
 800c812:	d002      	beq.n	800c81a <d_exprlist+0x1196>
 800c814:	2b6d      	cmp	r3, #109	; 0x6d
 800c816:	f47f ae27 	bne.w	800c468 <d_exprlist+0xde4>
 800c81a:	f899 2001 	ldrb.w	r2, [r9, #1]
 800c81e:	429a      	cmp	r2, r3
 800c820:	f47f ae22 	bne.w	800c468 <d_exprlist+0xde4>
 800c824:	68e3      	ldr	r3, [r4, #12]
 800c826:	781a      	ldrb	r2, [r3, #0]
 800c828:	2a5f      	cmp	r2, #95	; 0x5f
 800c82a:	f000 8376 	beq.w	800cf1a <d_exprlist+0x1896>
 800c82e:	f04f 0901 	mov.w	r9, #1
 800c832:	e61b      	b.n	800c46c <d_exprlist+0xde8>
 800c834:	68e3      	ldr	r3, [r4, #12]
 800c836:	781a      	ldrb	r2, [r3, #0]
 800c838:	2a5f      	cmp	r2, #95	; 0x5f
 800c83a:	f47f aead 	bne.w	800c598 <d_exprlist+0xf14>
 800c83e:	3301      	adds	r3, #1
 800c840:	60e3      	str	r3, [r4, #12]
 800c842:	2145      	movs	r1, #69	; 0x45
 800c844:	4620      	mov	r0, r4
 800c846:	f7fe ff1d 	bl	800b684 <d_exprlist>
 800c84a:	4603      	mov	r3, r0
 800c84c:	e6b3      	b.n	800c5b6 <d_exprlist+0xf32>
 800c84e:	f1bb 0f00 	cmp.w	fp, #0
 800c852:	f43f ae28 	beq.w	800c4a6 <d_exprlist+0xe22>
 800c856:	f89b 2000 	ldrb.w	r2, [fp]
 800c85a:	2a70      	cmp	r2, #112	; 0x70
 800c85c:	d002      	beq.n	800c864 <d_exprlist+0x11e0>
 800c85e:	2a6d      	cmp	r2, #109	; 0x6d
 800c860:	f47f ae21 	bne.w	800c4a6 <d_exprlist+0xe22>
 800c864:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c868:	4293      	cmp	r3, r2
 800c86a:	f47f ae1c 	bne.w	800c4a6 <d_exprlist+0xe22>
 800c86e:	68e3      	ldr	r3, [r4, #12]
 800c870:	781a      	ldrb	r2, [r3, #0]
 800c872:	2a5f      	cmp	r2, #95	; 0x5f
 800c874:	f000 82f7 	beq.w	800ce66 <d_exprlist+0x17e2>
 800c878:	f04f 0b01 	mov.w	fp, #1
 800c87c:	e615      	b.n	800c4aa <d_exprlist+0xe26>
 800c87e:	3204      	adds	r2, #4
 800c880:	60e2      	str	r2, [r4, #12]
 800c882:	4620      	mov	r0, r4
 800c884:	f000 fd6e 	bl	800d364 <d_type>
 800c888:	4680      	mov	r8, r0
 800c88a:	4620      	mov	r0, r4
 800c88c:	f001 f9e6 	bl	800dc5c <d_unqualified_name>
 800c890:	68e3      	ldr	r3, [r4, #12]
 800c892:	4681      	mov	r9, r0
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2b49      	cmp	r3, #73	; 0x49
 800c898:	f000 810c 	beq.w	800cab4 <d_exprlist+0x1430>
 800c89c:	4603      	mov	r3, r0
 800c89e:	4642      	mov	r2, r8
 800c8a0:	2101      	movs	r1, #1
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f7fa f978 	bl	8006b98 <d_make_comp>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	f7ff b8bc 	b.w	800ba26 <d_exprlist+0x3a2>
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 fd58 	bl	800d364 <d_type>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	e67e      	b.n	800c5b6 <d_exprlist+0xf32>
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f7fe f86d 	bl	800a998 <d_template_args>
 800c8be:	464a      	mov	r2, r9
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2104      	movs	r1, #4
 800c8c4:	f7ff bafe 	b.w	800bec4 <d_exprlist+0x840>
 800c8c8:	3102      	adds	r1, #2
 800c8ca:	60e1      	str	r1, [r4, #12]
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 fd49 	bl	800d364 <d_type>
 800c8d2:	4682      	mov	sl, r0
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f001 f9c1 	bl	800dc5c <d_unqualified_name>
 800c8da:	68e3      	ldr	r3, [r4, #12]
 800c8dc:	4683      	mov	fp, r0
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b49      	cmp	r3, #73	; 0x49
 800c8e2:	f000 80dc 	beq.w	800ca9e <d_exprlist+0x141a>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	4652      	mov	r2, sl
 800c8ea:	2101      	movs	r1, #1
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7fa f953 	bl	8006b98 <d_make_comp>
 800c8f2:	4682      	mov	sl, r0
 800c8f4:	f7fe bff2 	b.w	800b8dc <d_exprlist+0x258>
 800c8f8:	7812      	ldrb	r2, [r2, #0]
 800c8fa:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800c8fe:	2901      	cmp	r1, #1
 800c900:	d903      	bls.n	800c90a <d_exprlist+0x1286>
 800c902:	3a72      	subs	r2, #114	; 0x72
 800c904:	2a01      	cmp	r2, #1
 800c906:	f63f aa29 	bhi.w	800bd5c <d_exprlist+0x6d8>
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 fd2a 	bl	800d364 <d_type>
 800c910:	9000      	str	r0, [sp, #0]
 800c912:	f7ff ba27 	b.w	800bd64 <d_exprlist+0x6e0>
 800c916:	4620      	mov	r0, r4
 800c918:	f000 fb52 	bl	800cfc0 <d_expression_1>
 800c91c:	9000      	str	r0, [sp, #0]
 800c91e:	4620      	mov	r0, r4
 800c920:	f000 fb4e 	bl	800cfc0 <d_expression_1>
 800c924:	4683      	mov	fp, r0
 800c926:	4620      	mov	r0, r4
 800c928:	f000 fb4a 	bl	800cfc0 <d_expression_1>
 800c92c:	f7ff b9f9 	b.w	800bd22 <d_exprlist+0x69e>
 800c930:	3204      	adds	r2, #4
 800c932:	60e2      	str	r2, [r4, #12]
 800c934:	4620      	mov	r0, r4
 800c936:	f000 fb43 	bl	800cfc0 <d_expression_1>
 800c93a:	2300      	movs	r3, #0
 800c93c:	4602      	mov	r2, r0
 800c93e:	2149      	movs	r1, #73	; 0x49
 800c940:	4620      	mov	r0, r4
 800c942:	f7fa f929 	bl	8006b98 <d_make_comp>
 800c946:	4602      	mov	r2, r0
 800c948:	f7ff b86d 	b.w	800ba26 <d_exprlist+0x3a2>
 800c94c:	1c82      	adds	r2, r0, #2
 800c94e:	60e2      	str	r2, [r4, #12]
 800c950:	4620      	mov	r0, r4
 800c952:	f000 fd07 	bl	800d364 <d_type>
 800c956:	4681      	mov	r9, r0
 800c958:	4620      	mov	r0, r4
 800c95a:	f001 f97f 	bl	800dc5c <d_unqualified_name>
 800c95e:	68e3      	ldr	r3, [r4, #12]
 800c960:	4683      	mov	fp, r0
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b49      	cmp	r3, #73	; 0x49
 800c966:	f000 818a 	beq.w	800cc7e <d_exprlist+0x15fa>
 800c96a:	4603      	mov	r3, r0
 800c96c:	464a      	mov	r2, r9
 800c96e:	2101      	movs	r1, #1
 800c970:	f7ff baa8 	b.w	800bec4 <d_exprlist+0x840>
 800c974:	7813      	ldrb	r3, [r2, #0]
 800c976:	f04f 0900 	mov.w	r9, #0
 800c97a:	f7ff b8a8 	b.w	800bace <d_exprlist+0x44a>
 800c97e:	4620      	mov	r0, r4
 800c980:	f7fa fa94 	bl	8006eac <d_compact_number>
 800c984:	3001      	adds	r0, #1
 800c986:	68e2      	ldr	r2, [r4, #12]
 800c988:	f47f af23 	bne.w	800c7d2 <d_exprlist+0x114e>
 800c98c:	4681      	mov	r9, r0
 800c98e:	7813      	ldrb	r3, [r2, #0]
 800c990:	f7ff b89d 	b.w	800bace <d_exprlist+0x44a>
 800c994:	3202      	adds	r2, #2
 800c996:	60e2      	str	r2, [r4, #12]
 800c998:	4620      	mov	r0, r4
 800c99a:	f000 fce3 	bl	800d364 <d_type>
 800c99e:	4683      	mov	fp, r0
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f001 f95b 	bl	800dc5c <d_unqualified_name>
 800c9a6:	68e3      	ldr	r3, [r4, #12]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b49      	cmp	r3, #73	; 0x49
 800c9ac:	f000 8198 	beq.w	800cce0 <d_exprlist+0x165c>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	465a      	mov	r2, fp
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f7fa f8ee 	bl	8006b98 <d_make_comp>
 800c9bc:	4683      	mov	fp, r0
 800c9be:	f7fe bf51 	b.w	800b864 <d_exprlist+0x1e0>
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f7fa fa72 	bl	8006eac <d_compact_number>
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	f47f ad31 	bne.w	800c430 <d_exprlist+0xdac>
 800c9ce:	4683      	mov	fp, r0
 800c9d0:	f7fe bf48 	b.w	800b864 <d_exprlist+0x1e0>
 800c9d4:	2145      	movs	r1, #69	; 0x45
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f7fe fe54 	bl	800b684 <d_exprlist>
 800c9dc:	4683      	mov	fp, r0
 800c9de:	f7ff b9dd 	b.w	800bd9c <d_exprlist+0x718>
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	f7fd ffd8 	bl	800a998 <d_template_args>
 800c9e8:	465a      	mov	r2, fp
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2104      	movs	r1, #4
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f7fa f8d2 	bl	8006b98 <d_make_comp>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	e614      	b.n	800c622 <d_exprlist+0xf9e>
 800c9f8:	f1bb 0f00 	cmp.w	fp, #0
 800c9fc:	f43f adee 	beq.w	800c5dc <d_exprlist+0xf58>
 800ca00:	f89b 2000 	ldrb.w	r2, [fp]
 800ca04:	2a70      	cmp	r2, #112	; 0x70
 800ca06:	d002      	beq.n	800ca0e <d_exprlist+0x138a>
 800ca08:	2a6d      	cmp	r2, #109	; 0x6d
 800ca0a:	f47f ade7 	bne.w	800c5dc <d_exprlist+0xf58>
 800ca0e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800ca12:	4293      	cmp	r3, r2
 800ca14:	f47f ade2 	bne.w	800c5dc <d_exprlist+0xf58>
 800ca18:	68e3      	ldr	r3, [r4, #12]
 800ca1a:	781a      	ldrb	r2, [r3, #0]
 800ca1c:	2a5f      	cmp	r2, #95	; 0x5f
 800ca1e:	f000 81cf 	beq.w	800cdc0 <d_exprlist+0x173c>
 800ca22:	f04f 0b01 	mov.w	fp, #1
 800ca26:	e5db      	b.n	800c5e0 <d_exprlist+0xf5c>
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f000 fc9b 	bl	800d364 <d_type>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	e529      	b.n	800c486 <d_exprlist+0xe02>
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f43f ae05 	beq.w	800c642 <d_exprlist+0xfbe>
 800ca38:	781a      	ldrb	r2, [r3, #0]
 800ca3a:	2a70      	cmp	r2, #112	; 0x70
 800ca3c:	d002      	beq.n	800ca44 <d_exprlist+0x13c0>
 800ca3e:	2a6d      	cmp	r2, #109	; 0x6d
 800ca40:	f47f adff 	bne.w	800c642 <d_exprlist+0xfbe>
 800ca44:	785b      	ldrb	r3, [r3, #1]
 800ca46:	4293      	cmp	r3, r2
 800ca48:	f47f adfb 	bne.w	800c642 <d_exprlist+0xfbe>
 800ca4c:	68e3      	ldr	r3, [r4, #12]
 800ca4e:	781a      	ldrb	r2, [r3, #0]
 800ca50:	2a5f      	cmp	r2, #95	; 0x5f
 800ca52:	f000 81b8 	beq.w	800cdc6 <d_exprlist+0x1742>
 800ca56:	2201      	movs	r2, #1
 800ca58:	e5f4      	b.n	800c644 <d_exprlist+0xfc0>
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 fc82 	bl	800d364 <d_type>
 800ca60:	4603      	mov	r3, r0
 800ca62:	e52f      	b.n	800c4c4 <d_exprlist+0xe40>
 800ca64:	4620      	mov	r0, r4
 800ca66:	f000 fc7d 	bl	800d364 <d_type>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	e5f7      	b.n	800c65e <d_exprlist+0xfda>
 800ca6e:	2145      	movs	r1, #69	; 0x45
 800ca70:	4620      	mov	r0, r4
 800ca72:	f7fe fe07 	bl	800b684 <d_exprlist>
 800ca76:	4681      	mov	r9, r0
 800ca78:	f7ff bb45 	b.w	800c106 <d_exprlist+0xa82>
 800ca7c:	0801642c 	.word	0x0801642c
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800ca86:	2a01      	cmp	r2, #1
 800ca88:	d903      	bls.n	800ca92 <d_exprlist+0x140e>
 800ca8a:	3b72      	subs	r3, #114	; 0x72
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	f63f ab1a 	bhi.w	800c0c6 <d_exprlist+0xa42>
 800ca92:	4620      	mov	r0, r4
 800ca94:	f000 fc66 	bl	800d364 <d_type>
 800ca98:	4682      	mov	sl, r0
 800ca9a:	f7ff bb18 	b.w	800c0ce <d_exprlist+0xa4a>
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7fd ff7a 	bl	800a998 <d_template_args>
 800caa4:	465a      	mov	r2, fp
 800caa6:	4603      	mov	r3, r0
 800caa8:	2104      	movs	r1, #4
 800caaa:	4620      	mov	r0, r4
 800caac:	f7fa f874 	bl	8006b98 <d_make_comp>
 800cab0:	4603      	mov	r3, r0
 800cab2:	e719      	b.n	800c8e8 <d_exprlist+0x1264>
 800cab4:	4620      	mov	r0, r4
 800cab6:	f7fd ff6f 	bl	800a998 <d_template_args>
 800caba:	464a      	mov	r2, r9
 800cabc:	4603      	mov	r3, r0
 800cabe:	2104      	movs	r1, #4
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7fa f869 	bl	8006b98 <d_make_comp>
 800cac6:	4603      	mov	r3, r0
 800cac8:	e6e9      	b.n	800c89e <d_exprlist+0x121a>
 800caca:	7812      	ldrb	r2, [r2, #0]
 800cacc:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800cad0:	2901      	cmp	r1, #1
 800cad2:	d903      	bls.n	800cadc <d_exprlist+0x1458>
 800cad4:	3a72      	subs	r2, #114	; 0x72
 800cad6:	2a01      	cmp	r2, #1
 800cad8:	f63f a9c3 	bhi.w	800be62 <d_exprlist+0x7de>
 800cadc:	4620      	mov	r0, r4
 800cade:	f000 fc41 	bl	800d364 <d_type>
 800cae2:	9000      	str	r0, [sp, #0]
 800cae4:	f7ff b9c1 	b.w	800be6a <d_exprlist+0x7e6>
 800cae8:	3301      	adds	r3, #1
 800caea:	60e3      	str	r3, [r4, #12]
 800caec:	2145      	movs	r1, #69	; 0x45
 800caee:	4620      	mov	r0, r4
 800caf0:	f7fe fdc8 	bl	800b684 <d_exprlist>
 800caf4:	4603      	mov	r3, r0
 800caf6:	464a      	mov	r2, r9
 800caf8:	2135      	movs	r1, #53	; 0x35
 800cafa:	f7ff b9e3 	b.w	800bec4 <d_exprlist+0x840>
 800cafe:	2145      	movs	r1, #69	; 0x45
 800cb00:	4620      	mov	r0, r4
 800cb02:	f7fe fdbf 	bl	800b684 <d_exprlist>
 800cb06:	4683      	mov	fp, r0
 800cb08:	f7ff b9cb 	b.w	800bea2 <d_exprlist+0x81e>
 800cb0c:	3202      	adds	r2, #2
 800cb0e:	60e2      	str	r2, [r4, #12]
 800cb10:	4620      	mov	r0, r4
 800cb12:	f000 fa55 	bl	800cfc0 <d_expression_1>
 800cb16:	2300      	movs	r3, #0
 800cb18:	4602      	mov	r2, r0
 800cb1a:	2149      	movs	r1, #73	; 0x49
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f7fa f83b 	bl	8006b98 <d_make_comp>
 800cb22:	4683      	mov	fp, r0
 800cb24:	f7fe be9e 	b.w	800b864 <d_exprlist+0x1e0>
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 fa49 	bl	800cfc0 <d_expression_1>
 800cb2e:	4681      	mov	r9, r0
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 fa45 	bl	800cfc0 <d_expression_1>
 800cb36:	4682      	mov	sl, r0
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f000 fa41 	bl	800cfc0 <d_expression_1>
 800cb3e:	f7ff baa5 	b.w	800c08c <d_exprlist+0xa08>
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 fa3c 	bl	800cfc0 <d_expression_1>
 800cb48:	4683      	mov	fp, r0
 800cb4a:	f7ff b927 	b.w	800bd9c <d_exprlist+0x718>
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f7fd ff22 	bl	800a998 <d_template_args>
 800cb54:	465a      	mov	r2, fp
 800cb56:	4603      	mov	r3, r0
 800cb58:	2104      	movs	r1, #4
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f7fa f81c 	bl	8006b98 <d_make_comp>
 800cb60:	4683      	mov	fp, r0
 800cb62:	f7ff b91b 	b.w	800bd9c <d_exprlist+0x718>
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 fa2a 	bl	800cfc0 <d_expression_1>
 800cb6c:	9000      	str	r0, [sp, #0]
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f000 fa26 	bl	800cfc0 <d_expression_1>
 800cb74:	4683      	mov	fp, r0
 800cb76:	4620      	mov	r0, r4
 800cb78:	f000 fa22 	bl	800cfc0 <d_expression_1>
 800cb7c:	f7ff b954 	b.w	800be28 <d_exprlist+0x7a4>
 800cb80:	4620      	mov	r0, r4
 800cb82:	f000 fbef 	bl	800d364 <d_type>
 800cb86:	464a      	mov	r2, r9
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2135      	movs	r1, #53	; 0x35
 800cb8c:	f7ff b99a 	b.w	800bec4 <d_exprlist+0x840>
 800cb90:	3301      	adds	r3, #1
 800cb92:	60e3      	str	r3, [r4, #12]
 800cb94:	2000      	movs	r0, #0
 800cb96:	f7ff b8c4 	b.w	800bd22 <d_exprlist+0x69e>
 800cb9a:	785a      	ldrb	r2, [r3, #1]
 800cb9c:	2a69      	cmp	r2, #105	; 0x69
 800cb9e:	f47f ab40 	bne.w	800c222 <d_exprlist+0xb9e>
 800cba2:	3302      	adds	r3, #2
 800cba4:	60e3      	str	r3, [r4, #12]
 800cba6:	2145      	movs	r1, #69	; 0x45
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f7fe fd6b 	bl	800b684 <d_exprlist>
 800cbae:	f7ff b93b 	b.w	800be28 <d_exprlist+0x7a4>
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	60e3      	str	r3, [r4, #12]
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	f7ff b936 	b.w	800be28 <d_exprlist+0x7a4>
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	f000 f9ff 	bl	800cfc0 <d_expression_1>
 800cbc2:	4683      	mov	fp, r0
 800cbc4:	f7ff b96d 	b.w	800bea2 <d_exprlist+0x81e>
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f000 f9f9 	bl	800cfc0 <d_expression_1>
 800cbce:	4683      	mov	fp, r0
 800cbd0:	f7ff b9f1 	b.w	800bfb6 <d_exprlist+0x932>
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	60e3      	str	r3, [r4, #12]
 800cbd8:	2145      	movs	r1, #69	; 0x45
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f7fe fd52 	bl	800b684 <d_exprlist>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	e450      	b.n	800c486 <d_exprlist+0xe02>
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	f000 f9eb 	bl	800cfc0 <d_expression_1>
 800cbea:	4681      	mov	r9, r0
 800cbec:	f7ff ba8b 	b.w	800c106 <d_exprlist+0xa82>
 800cbf0:	785a      	ldrb	r2, [r3, #1]
 800cbf2:	2a69      	cmp	r2, #105	; 0x69
 800cbf4:	f47f ab0e 	bne.w	800c214 <d_exprlist+0xb90>
 800cbf8:	3302      	adds	r3, #2
 800cbfa:	60e3      	str	r3, [r4, #12]
 800cbfc:	2145      	movs	r1, #69	; 0x45
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f7fe fd40 	bl	800b684 <d_exprlist>
 800cc04:	f7ff ba42 	b.w	800c08c <d_exprlist+0xa08>
 800cc08:	3301      	adds	r3, #1
 800cc0a:	60e3      	str	r3, [r4, #12]
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	f7ff ba3d 	b.w	800c08c <d_exprlist+0xa08>
 800cc12:	2145      	movs	r1, #69	; 0x45
 800cc14:	4620      	mov	r0, r4
 800cc16:	f7fe fd35 	bl	800b684 <d_exprlist>
 800cc1a:	4683      	mov	fp, r0
 800cc1c:	f7ff b9cb 	b.w	800bfb6 <d_exprlist+0x932>
 800cc20:	7812      	ldrb	r2, [r2, #0]
 800cc22:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800cc26:	2901      	cmp	r1, #1
 800cc28:	d903      	bls.n	800cc32 <d_exprlist+0x15ae>
 800cc2a:	3a72      	subs	r2, #114	; 0x72
 800cc2c:	2a01      	cmp	r2, #1
 800cc2e:	f63f a999 	bhi.w	800bf64 <d_exprlist+0x8e0>
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 fb96 	bl	800d364 <d_type>
 800cc38:	9000      	str	r0, [sp, #0]
 800cc3a:	f7ff b997 	b.w	800bf6c <d_exprlist+0x8e8>
 800cc3e:	785a      	ldrb	r2, [r3, #1]
 800cc40:	2a69      	cmp	r2, #105	; 0x69
 800cc42:	f47e afab 	bne.w	800bb9c <d_exprlist+0x518>
 800cc46:	3302      	adds	r3, #2
 800cc48:	60e3      	str	r3, [r4, #12]
 800cc4a:	2145      	movs	r1, #69	; 0x45
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f7fe fd19 	bl	800b684 <d_exprlist>
 800cc52:	f7ff b866 	b.w	800bd22 <d_exprlist+0x69e>
 800cc56:	4620      	mov	r0, r4
 800cc58:	f7fd fe9e 	bl	800a998 <d_template_args>
 800cc5c:	465a      	mov	r2, fp
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2104      	movs	r1, #4
 800cc62:	4620      	mov	r0, r4
 800cc64:	f7f9 ff98 	bl	8006b98 <d_make_comp>
 800cc68:	4683      	mov	fp, r0
 800cc6a:	f7ff b91a 	b.w	800bea2 <d_exprlist+0x81e>
 800cc6e:	3301      	adds	r3, #1
 800cc70:	60e3      	str	r3, [r4, #12]
 800cc72:	2145      	movs	r1, #69	; 0x45
 800cc74:	4620      	mov	r0, r4
 800cc76:	f7fe fd05 	bl	800b684 <d_exprlist>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	e422      	b.n	800c4c4 <d_exprlist+0xe40>
 800cc7e:	4620      	mov	r0, r4
 800cc80:	f7fd fe8a 	bl	800a998 <d_template_args>
 800cc84:	465a      	mov	r2, fp
 800cc86:	4603      	mov	r3, r0
 800cc88:	2104      	movs	r1, #4
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f7f9 ff84 	bl	8006b98 <d_make_comp>
 800cc90:	464a      	mov	r2, r9
 800cc92:	4603      	mov	r3, r0
 800cc94:	2101      	movs	r1, #1
 800cc96:	f7ff b915 	b.w	800bec4 <d_exprlist+0x840>
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f7fd fe7c 	bl	800a998 <d_template_args>
 800cca0:	464a      	mov	r2, r9
 800cca2:	4603      	mov	r3, r0
 800cca4:	2104      	movs	r1, #4
 800cca6:	4620      	mov	r0, r4
 800cca8:	f7f9 ff76 	bl	8006b98 <d_make_comp>
 800ccac:	4681      	mov	r9, r0
 800ccae:	f7ff ba2a 	b.w	800c106 <d_exprlist+0xa82>
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f000 f984 	bl	800cfc0 <d_expression_1>
 800ccb8:	9000      	str	r0, [sp, #0]
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 f980 	bl	800cfc0 <d_expression_1>
 800ccc0:	4683      	mov	fp, r0
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	f000 f97c 	bl	800cfc0 <d_expression_1>
 800ccc8:	f7ff b933 	b.w	800bf32 <d_exprlist+0x8ae>
 800cccc:	3201      	adds	r2, #1
 800ccce:	60e2      	str	r2, [r4, #12]
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	f7ff b92e 	b.w	800bf32 <d_exprlist+0x8ae>
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	60e3      	str	r3, [r4, #12]
 800ccda:	2000      	movs	r0, #0
 800ccdc:	f7ff bb24 	b.w	800c328 <d_exprlist+0xca4>
 800cce0:	9000      	str	r0, [sp, #0]
 800cce2:	4620      	mov	r0, r4
 800cce4:	f7fd fe58 	bl	800a998 <d_template_args>
 800cce8:	9a00      	ldr	r2, [sp, #0]
 800ccea:	4603      	mov	r3, r0
 800ccec:	2104      	movs	r1, #4
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f7f9 ff52 	bl	8006b98 <d_make_comp>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	e65c      	b.n	800c9b2 <d_exprlist+0x132e>
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f000 f961 	bl	800cfc0 <d_expression_1>
 800ccfe:	9000      	str	r0, [sp, #0]
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 f95d 	bl	800cfc0 <d_expression_1>
 800cd06:	9001      	str	r0, [sp, #4]
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 f959 	bl	800cfc0 <d_expression_1>
 800cd0e:	f7ff bb0b 	b.w	800c328 <d_exprlist+0xca4>
 800cd12:	2145      	movs	r1, #69	; 0x45
 800cd14:	4620      	mov	r0, r4
 800cd16:	f7fe fcb5 	bl	800b684 <d_exprlist>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	f7ff bb5c 	b.w	800c3d8 <d_exprlist+0xd54>
 800cd20:	7812      	ldrb	r2, [r2, #0]
 800cd22:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800cd26:	2901      	cmp	r1, #1
 800cd28:	d903      	bls.n	800cd32 <d_exprlist+0x16ae>
 800cd2a:	3a72      	subs	r2, #114	; 0x72
 800cd2c:	2a01      	cmp	r2, #1
 800cd2e:	f63f ab23 	bhi.w	800c378 <d_exprlist+0xcf4>
 800cd32:	4620      	mov	r0, r4
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	f000 fb15 	bl	800d364 <d_type>
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	9000      	str	r0, [sp, #0]
 800cd3e:	f7ff bb21 	b.w	800c384 <d_exprlist+0xd00>
 800cd42:	4620      	mov	r0, r4
 800cd44:	f000 f93c 	bl	800cfc0 <d_expression_1>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	f7ff bb45 	b.w	800c3d8 <d_exprlist+0xd54>
 800cd4e:	2b6f      	cmp	r3, #111	; 0x6f
 800cd50:	d017      	beq.n	800cd82 <d_exprlist+0x16fe>
 800cd52:	2b69      	cmp	r3, #105	; 0x69
 800cd54:	d11d      	bne.n	800cd92 <d_exprlist+0x170e>
 800cd56:	7853      	ldrb	r3, [r2, #1]
 800cd58:	2b6c      	cmp	r3, #108	; 0x6c
 800cd5a:	f47f aa94 	bne.w	800c286 <d_exprlist+0xc02>
 800cd5e:	f04f 0b00 	mov.w	fp, #0
 800cd62:	68e3      	ldr	r3, [r4, #12]
 800cd64:	2145      	movs	r1, #69	; 0x45
 800cd66:	3302      	adds	r3, #2
 800cd68:	60e3      	str	r3, [r4, #12]
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f7fe fc8a 	bl	800b684 <d_exprlist>
 800cd70:	465a      	mov	r2, fp
 800cd72:	4603      	mov	r3, r0
 800cd74:	2130      	movs	r1, #48	; 0x30
 800cd76:	4620      	mov	r0, r4
 800cd78:	f7f9 ff0e 	bl	8006b98 <d_make_comp>
 800cd7c:	4683      	mov	fp, r0
 800cd7e:	f7fe bd71 	b.w	800b864 <d_exprlist+0x1e0>
 800cd82:	7853      	ldrb	r3, [r2, #1]
 800cd84:	2b6e      	cmp	r3, #110	; 0x6e
 800cd86:	f47f aa7e 	bne.w	800c286 <d_exprlist+0xc02>
 800cd8a:	3202      	adds	r2, #2
 800cd8c:	60e2      	str	r2, [r4, #12]
 800cd8e:	f7fe beaf 	b.w	800baf0 <d_exprlist+0x46c>
 800cd92:	2b74      	cmp	r3, #116	; 0x74
 800cd94:	f47f aa77 	bne.w	800c286 <d_exprlist+0xc02>
 800cd98:	7853      	ldrb	r3, [r2, #1]
 800cd9a:	2b6c      	cmp	r3, #108	; 0x6c
 800cd9c:	f47f aa73 	bne.w	800c286 <d_exprlist+0xc02>
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 fadf 	bl	800d364 <d_type>
 800cda6:	4683      	mov	fp, r0
 800cda8:	e7db      	b.n	800cd62 <d_exprlist+0x16de>
 800cdaa:	460a      	mov	r2, r1
 800cdac:	f7fe be3b 	b.w	800ba26 <d_exprlist+0x3a2>
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	60e3      	str	r3, [r4, #12]
 800cdb4:	2145      	movs	r1, #69	; 0x45
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f7fe fc64 	bl	800b684 <d_exprlist>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	e44e      	b.n	800c65e <d_exprlist+0xfda>
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	60e3      	str	r3, [r4, #12]
 800cdc4:	e40a      	b.n	800c5dc <d_exprlist+0xf58>
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	60e3      	str	r3, [r4, #12]
 800cdca:	e43a      	b.n	800c642 <d_exprlist+0xfbe>
 800cdcc:	f04f 0a00 	mov.w	sl, #0
 800cdd0:	3102      	adds	r1, #2
 800cdd2:	60e1      	str	r1, [r4, #12]
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	2145      	movs	r1, #69	; 0x45
 800cdd8:	f7fe fc54 	bl	800b684 <d_exprlist>
 800cddc:	4652      	mov	r2, sl
 800cdde:	4603      	mov	r3, r0
 800cde0:	2130      	movs	r1, #48	; 0x30
 800cde2:	4620      	mov	r0, r4
 800cde4:	f7f9 fed8 	bl	8006b98 <d_make_comp>
 800cde8:	4682      	mov	sl, r0
 800cdea:	f7fe bd77 	b.w	800b8dc <d_exprlist+0x258>
 800cdee:	2b6f      	cmp	r3, #111	; 0x6f
 800cdf0:	d010      	beq.n	800ce14 <d_exprlist+0x1790>
 800cdf2:	2b69      	cmp	r3, #105	; 0x69
 800cdf4:	d13b      	bne.n	800ce6e <d_exprlist+0x17ea>
 800cdf6:	7843      	ldrb	r3, [r0, #1]
 800cdf8:	2b6c      	cmp	r3, #108	; 0x6c
 800cdfa:	f47e af09 	bne.w	800bc10 <d_exprlist+0x58c>
 800cdfe:	1c82      	adds	r2, r0, #2
 800ce00:	60e2      	str	r2, [r4, #12]
 800ce02:	2145      	movs	r1, #69	; 0x45
 800ce04:	4620      	mov	r0, r4
 800ce06:	f7fe fc3d 	bl	800b684 <d_exprlist>
 800ce0a:	465a      	mov	r2, fp
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2130      	movs	r1, #48	; 0x30
 800ce10:	f7ff b858 	b.w	800bec4 <d_exprlist+0x840>
 800ce14:	7843      	ldrb	r3, [r0, #1]
 800ce16:	2b6e      	cmp	r3, #110	; 0x6e
 800ce18:	f47e aefa 	bne.w	800bc10 <d_exprlist+0x58c>
 800ce1c:	1c82      	adds	r2, r0, #2
 800ce1e:	60e2      	str	r2, [r4, #12]
 800ce20:	f7fe be4b 	b.w	800baba <d_exprlist+0x436>
 800ce24:	2b6f      	cmp	r3, #111	; 0x6f
 800ce26:	d016      	beq.n	800ce56 <d_exprlist+0x17d2>
 800ce28:	2b69      	cmp	r3, #105	; 0x69
 800ce2a:	d12d      	bne.n	800ce88 <d_exprlist+0x1804>
 800ce2c:	78d3      	ldrb	r3, [r2, #3]
 800ce2e:	2b6c      	cmp	r3, #108	; 0x6c
 800ce30:	f47f a8d2 	bne.w	800bfd8 <d_exprlist+0x954>
 800ce34:	f04f 0800 	mov.w	r8, #0
 800ce38:	3102      	adds	r1, #2
 800ce3a:	60e1      	str	r1, [r4, #12]
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	2145      	movs	r1, #69	; 0x45
 800ce40:	f7fe fc20 	bl	800b684 <d_exprlist>
 800ce44:	4642      	mov	r2, r8
 800ce46:	4603      	mov	r3, r0
 800ce48:	2130      	movs	r1, #48	; 0x30
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f7f9 fea4 	bl	8006b98 <d_make_comp>
 800ce50:	4602      	mov	r2, r0
 800ce52:	f7fe bde8 	b.w	800ba26 <d_exprlist+0x3a2>
 800ce56:	78d3      	ldrb	r3, [r2, #3]
 800ce58:	2b6e      	cmp	r3, #110	; 0x6e
 800ce5a:	f47f a8bd 	bne.w	800bfd8 <d_exprlist+0x954>
 800ce5e:	3204      	adds	r2, #4
 800ce60:	60e2      	str	r2, [r4, #12]
 800ce62:	f7fe bdd3 	b.w	800ba0c <d_exprlist+0x388>
 800ce66:	3301      	adds	r3, #1
 800ce68:	60e3      	str	r3, [r4, #12]
 800ce6a:	f7ff bb1c 	b.w	800c4a6 <d_exprlist+0xe22>
 800ce6e:	2b74      	cmp	r3, #116	; 0x74
 800ce70:	f47e aece 	bne.w	800bc10 <d_exprlist+0x58c>
 800ce74:	7843      	ldrb	r3, [r0, #1]
 800ce76:	2b6c      	cmp	r3, #108	; 0x6c
 800ce78:	f47e aeca 	bne.w	800bc10 <d_exprlist+0x58c>
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f000 fa71 	bl	800d364 <d_type>
 800ce82:	4683      	mov	fp, r0
 800ce84:	68e0      	ldr	r0, [r4, #12]
 800ce86:	e7ba      	b.n	800cdfe <d_exprlist+0x177a>
 800ce88:	2b74      	cmp	r3, #116	; 0x74
 800ce8a:	f47f a8a5 	bne.w	800bfd8 <d_exprlist+0x954>
 800ce8e:	78d3      	ldrb	r3, [r2, #3]
 800ce90:	2b6c      	cmp	r3, #108	; 0x6c
 800ce92:	f47f a8a1 	bne.w	800bfd8 <d_exprlist+0x954>
 800ce96:	4620      	mov	r0, r4
 800ce98:	f000 fa64 	bl	800d364 <d_type>
 800ce9c:	68e1      	ldr	r1, [r4, #12]
 800ce9e:	4680      	mov	r8, r0
 800cea0:	e7ca      	b.n	800ce38 <d_exprlist+0x17b4>
 800cea2:	7853      	ldrb	r3, [r2, #1]
 800cea4:	2b69      	cmp	r3, #105	; 0x69
 800cea6:	d00f      	beq.n	800cec8 <d_exprlist+0x1844>
 800cea8:	f04f 0900 	mov.w	r9, #0
 800ceac:	f7ff b9eb 	b.w	800c286 <d_exprlist+0xc02>
 800ceb0:	785a      	ldrb	r2, [r3, #1]
 800ceb2:	2a69      	cmp	r2, #105	; 0x69
 800ceb4:	f47f ab22 	bne.w	800c4fc <d_exprlist+0xe78>
 800ceb8:	3302      	adds	r3, #2
 800ceba:	60e3      	str	r3, [r4, #12]
 800cebc:	2145      	movs	r1, #69	; 0x45
 800cebe:	4620      	mov	r0, r4
 800cec0:	f7fe fbe0 	bl	800b684 <d_exprlist>
 800cec4:	f7ff ba30 	b.w	800c328 <d_exprlist+0xca4>
 800cec8:	3202      	adds	r2, #2
 800ceca:	60e2      	str	r2, [r4, #12]
 800cecc:	2145      	movs	r1, #69	; 0x45
 800cece:	4620      	mov	r0, r4
 800ced0:	f7fe fbd8 	bl	800b684 <d_exprlist>
 800ced4:	f7ff b82d 	b.w	800bf32 <d_exprlist+0x8ae>
 800ced8:	2b6f      	cmp	r3, #111	; 0x6f
 800ceda:	d016      	beq.n	800cf0a <d_exprlist+0x1886>
 800cedc:	2b69      	cmp	r3, #105	; 0x69
 800cede:	d120      	bne.n	800cf22 <d_exprlist+0x189e>
 800cee0:	784b      	ldrb	r3, [r1, #1]
 800cee2:	2b6c      	cmp	r3, #108	; 0x6c
 800cee4:	f47e ae4a 	bne.w	800bb7c <d_exprlist+0x4f8>
 800cee8:	f04f 0900 	mov.w	r9, #0
 800ceec:	3102      	adds	r1, #2
 800ceee:	60e1      	str	r1, [r4, #12]
 800cef0:	4620      	mov	r0, r4
 800cef2:	2145      	movs	r1, #69	; 0x45
 800cef4:	f7fe fbc6 	bl	800b684 <d_exprlist>
 800cef8:	464a      	mov	r2, r9
 800cefa:	4603      	mov	r3, r0
 800cefc:	2130      	movs	r1, #48	; 0x30
 800cefe:	4620      	mov	r0, r4
 800cf00:	f7f9 fe4a 	bl	8006b98 <d_make_comp>
 800cf04:	4681      	mov	r9, r0
 800cf06:	f7fe bd3f 	b.w	800b988 <d_exprlist+0x304>
 800cf0a:	784b      	ldrb	r3, [r1, #1]
 800cf0c:	2b6e      	cmp	r3, #110	; 0x6e
 800cf0e:	f47e ae35 	bne.w	800bb7c <d_exprlist+0x4f8>
 800cf12:	3102      	adds	r1, #2
 800cf14:	60e1      	str	r1, [r4, #12]
 800cf16:	f7fe bd2d 	b.w	800b974 <d_exprlist+0x2f0>
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60e3      	str	r3, [r4, #12]
 800cf1e:	f7ff baa3 	b.w	800c468 <d_exprlist+0xde4>
 800cf22:	2b74      	cmp	r3, #116	; 0x74
 800cf24:	f47e ae2a 	bne.w	800bb7c <d_exprlist+0x4f8>
 800cf28:	784b      	ldrb	r3, [r1, #1]
 800cf2a:	2b6c      	cmp	r3, #108	; 0x6c
 800cf2c:	f47e ae26 	bne.w	800bb7c <d_exprlist+0x4f8>
 800cf30:	4620      	mov	r0, r4
 800cf32:	f000 fa17 	bl	800d364 <d_type>
 800cf36:	68e1      	ldr	r1, [r4, #12]
 800cf38:	4681      	mov	r9, r0
 800cf3a:	e7d7      	b.n	800ceec <d_exprlist+0x1868>
 800cf3c:	2b74      	cmp	r3, #116	; 0x74
 800cf3e:	f47e ae8a 	bne.w	800bc56 <d_exprlist+0x5d2>
 800cf42:	784b      	ldrb	r3, [r1, #1]
 800cf44:	2b6c      	cmp	r3, #108	; 0x6c
 800cf46:	f47e ae86 	bne.w	800bc56 <d_exprlist+0x5d2>
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f000 fa0a 	bl	800d364 <d_type>
 800cf50:	68e1      	ldr	r1, [r4, #12]
 800cf52:	4682      	mov	sl, r0
 800cf54:	e73c      	b.n	800cdd0 <d_exprlist+0x174c>
 800cf56:	2b6f      	cmp	r3, #111	; 0x6f
 800cf58:	d016      	beq.n	800cf88 <d_exprlist+0x1904>
 800cf5a:	2b69      	cmp	r3, #105	; 0x69
 800cf5c:	d11c      	bne.n	800cf98 <d_exprlist+0x1914>
 800cf5e:	7853      	ldrb	r3, [r2, #1]
 800cf60:	2b6c      	cmp	r3, #108	; 0x6c
 800cf62:	f47e abd3 	bne.w	800b70c <d_exprlist+0x88>
 800cf66:	f04f 0800 	mov.w	r8, #0
 800cf6a:	3202      	adds	r2, #2
 800cf6c:	60e2      	str	r2, [r4, #12]
 800cf6e:	2145      	movs	r1, #69	; 0x45
 800cf70:	4620      	mov	r0, r4
 800cf72:	f7fe fb87 	bl	800b684 <d_exprlist>
 800cf76:	4642      	mov	r2, r8
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2130      	movs	r1, #48	; 0x30
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7f9 fe0b 	bl	8006b98 <d_make_comp>
 800cf82:	4602      	mov	r2, r0
 800cf84:	f7fe bc07 	b.w	800b796 <d_exprlist+0x112>
 800cf88:	7853      	ldrb	r3, [r2, #1]
 800cf8a:	2b6e      	cmp	r3, #110	; 0x6e
 800cf8c:	f47e abbe 	bne.w	800b70c <d_exprlist+0x88>
 800cf90:	3202      	adds	r2, #2
 800cf92:	60e2      	str	r2, [r4, #12]
 800cf94:	f7fe bb8b 	b.w	800b6ae <d_exprlist+0x2a>
 800cf98:	2b74      	cmp	r3, #116	; 0x74
 800cf9a:	f47e abb7 	bne.w	800b70c <d_exprlist+0x88>
 800cf9e:	7853      	ldrb	r3, [r2, #1]
 800cfa0:	2b6c      	cmp	r3, #108	; 0x6c
 800cfa2:	f47e abb3 	bne.w	800b70c <d_exprlist+0x88>
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f000 f9dc 	bl	800d364 <d_type>
 800cfac:	68e2      	ldr	r2, [r4, #12]
 800cfae:	4680      	mov	r8, r0
 800cfb0:	e7db      	b.n	800cf6a <d_exprlist+0x18e6>
 800cfb2:	f04f 0900 	mov.w	r9, #0
 800cfb6:	e6ce      	b.n	800cd56 <d_exprlist+0x16d2>
 800cfb8:	f04f 0900 	mov.w	r9, #0
 800cfbc:	f7fe bd87 	b.w	800bace <d_exprlist+0x44a>

0800cfc0 <d_expression_1>:
 800cfc0:	68c2      	ldr	r2, [r0, #12]
 800cfc2:	7813      	ldrb	r3, [r2, #0]
 800cfc4:	2b4c      	cmp	r3, #76	; 0x4c
 800cfc6:	d060      	beq.n	800d08a <d_expression_1+0xca>
 800cfc8:	2b54      	cmp	r3, #84	; 0x54
 800cfca:	d060      	beq.n	800d08e <d_expression_1+0xce>
 800cfcc:	2b73      	cmp	r3, #115	; 0x73
 800cfce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	d024      	beq.n	800d020 <d_expression_1+0x60>
 800cfd6:	2b66      	cmp	r3, #102	; 0x66
 800cfd8:	d00f      	beq.n	800cffa <d_expression_1+0x3a>
 800cfda:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cfde:	2909      	cmp	r1, #9
 800cfe0:	f200 818b 	bhi.w	800d2fa <d_expression_1+0x33a>
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 fe39 	bl	800dc5c <d_unqualified_name>
 800cfea:	4605      	mov	r5, r0
 800cfec:	b1a8      	cbz	r0, 800d01a <d_expression_1+0x5a>
 800cfee:	68e3      	ldr	r3, [r4, #12]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b49      	cmp	r3, #73	; 0x49
 800cff4:	d062      	beq.n	800d0bc <d_expression_1+0xfc>
 800cff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cffa:	7853      	ldrb	r3, [r2, #1]
 800cffc:	2b70      	cmp	r3, #112	; 0x70
 800cffe:	d029      	beq.n	800d054 <d_expression_1+0x94>
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fd6b 	bl	800dadc <d_operator_name>
 800d006:	4605      	mov	r5, r0
 800d008:	b138      	cbz	r0, 800d01a <d_expression_1+0x5a>
 800d00a:	7803      	ldrb	r3, [r0, #0]
 800d00c:	2b31      	cmp	r3, #49	; 0x31
 800d00e:	d040      	beq.n	800d092 <d_expression_1+0xd2>
 800d010:	2b32      	cmp	r3, #50	; 0x32
 800d012:	d016      	beq.n	800d042 <d_expression_1+0x82>
 800d014:	2b33      	cmp	r3, #51	; 0x33
 800d016:	f000 8115 	beq.w	800d244 <d_expression_1+0x284>
 800d01a:	2000      	movs	r0, #0
 800d01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d020:	7853      	ldrb	r3, [r2, #1]
 800d022:	2b72      	cmp	r3, #114	; 0x72
 800d024:	d055      	beq.n	800d0d2 <d_expression_1+0x112>
 800d026:	2b70      	cmp	r3, #112	; 0x70
 800d028:	d1ea      	bne.n	800d000 <d_expression_1+0x40>
 800d02a:	3202      	adds	r2, #2
 800d02c:	60c2      	str	r2, [r0, #12]
 800d02e:	f7ff ffc7 	bl	800cfc0 <d_expression_1>
 800d032:	2300      	movs	r3, #0
 800d034:	4602      	mov	r2, r0
 800d036:	2149      	movs	r1, #73	; 0x49
 800d038:	4620      	mov	r0, r4
 800d03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d03e:	f7f9 bdab 	b.w	8006b98 <d_make_comp>
 800d042:	686b      	ldr	r3, [r5, #4]
 800d044:	2b03      	cmp	r3, #3
 800d046:	d8e8      	bhi.n	800d01a <d_expression_1+0x5a>
 800d048:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d04c:	00d9005d 	.word	0x00d9005d
 800d050:	006500a6 	.word	0x006500a6
 800d054:	1c93      	adds	r3, r2, #2
 800d056:	60c3      	str	r3, [r0, #12]
 800d058:	7893      	ldrb	r3, [r2, #2]
 800d05a:	2b54      	cmp	r3, #84	; 0x54
 800d05c:	d04f      	beq.n	800d0fe <d_expression_1+0x13e>
 800d05e:	f7f9 ff25 	bl	8006eac <d_compact_number>
 800d062:	1c45      	adds	r5, r0, #1
 800d064:	d0d9      	beq.n	800d01a <d_expression_1+0x5a>
 800d066:	6963      	ldr	r3, [r4, #20]
 800d068:	69a2      	ldr	r2, [r4, #24]
 800d06a:	4293      	cmp	r3, r2
 800d06c:	dad5      	bge.n	800d01a <d_expression_1+0x5a>
 800d06e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d072:	6921      	ldr	r1, [r4, #16]
 800d074:	3301      	adds	r3, #1
 800d076:	0092      	lsls	r2, r2, #2
 800d078:	6163      	str	r3, [r4, #20]
 800d07a:	188b      	adds	r3, r1, r2
 800d07c:	d0cd      	beq.n	800d01a <d_expression_1+0x5a>
 800d07e:	2006      	movs	r0, #6
 800d080:	5488      	strb	r0, [r1, r2]
 800d082:	605d      	str	r5, [r3, #4]
 800d084:	4618      	mov	r0, r3
 800d086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d08a:	f001 bc63 	b.w	800e954 <d_expr_primary>
 800d08e:	f7f9 bf25 	b.w	8006edc <d_template_param>
 800d092:	6847      	ldr	r7, [r0, #4]
 800d094:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	683e      	ldr	r6, [r7, #0]
 800d09a:	3b02      	subs	r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	6323      	str	r3, [r4, #48]	; 0x30
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	49ab      	ldr	r1, [pc, #684]	; (800d350 <d_expression_1+0x390>)
 800d0a4:	f001 fed0 	bl	800ee48 <strcmp>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	f000 80d7 	beq.w	800d25c <d_expression_1+0x29c>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2b03      	cmp	r3, #3
 800d0b2:	d8b2      	bhi.n	800d01a <d_expression_1+0x5a>
 800d0b4:	e8df f003 	tbb	[pc, r3]
 800d0b8:	3071b627 	.word	0x3071b627
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f7fd fc6b 	bl	800a998 <d_template_args>
 800d0c2:	462a      	mov	r2, r5
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2104      	movs	r1, #4
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ce:	f7f9 bd63 	b.w	8006b98 <d_make_comp>
 800d0d2:	3202      	adds	r2, #2
 800d0d4:	60c2      	str	r2, [r0, #12]
 800d0d6:	f000 f945 	bl	800d364 <d_type>
 800d0da:	4605      	mov	r5, r0
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f000 fdbd 	bl	800dc5c <d_unqualified_name>
 800d0e2:	68e3      	ldr	r3, [r4, #12]
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b49      	cmp	r3, #73	; 0x49
 800d0ea:	f000 80db 	beq.w	800d2a4 <d_expression_1+0x2e4>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	462a      	mov	r2, r5
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	f7f9 bd4d 	b.w	8006b98 <d_make_comp>
 800d0fe:	3203      	adds	r2, #3
 800d100:	60c2      	str	r2, [r0, #12]
 800d102:	2500      	movs	r5, #0
 800d104:	e7af      	b.n	800d066 <d_expression_1+0xa6>
 800d106:	462a      	mov	r2, r5
 800d108:	4620      	mov	r0, r4
 800d10a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d10e:	2300      	movs	r3, #0
 800d110:	2134      	movs	r1, #52	; 0x34
 800d112:	f7f9 bd41 	b.w	8006b98 <d_make_comp>
 800d116:	2600      	movs	r6, #0
 800d118:	498e      	ldr	r1, [pc, #568]	; (800d354 <d_expression_1+0x394>)
 800d11a:	4630      	mov	r0, r6
 800d11c:	f001 fe94 	bl	800ee48 <strcmp>
 800d120:	2800      	cmp	r0, #0
 800d122:	f000 809f 	beq.w	800d264 <d_expression_1+0x2a4>
 800d126:	7833      	ldrb	r3, [r6, #0]
 800d128:	2b6e      	cmp	r3, #110	; 0x6e
 800d12a:	f47f af76 	bne.w	800d01a <d_expression_1+0x5a>
 800d12e:	7873      	ldrb	r3, [r6, #1]
 800d130:	2b77      	cmp	r3, #119	; 0x77
 800d132:	d002      	beq.n	800d13a <d_expression_1+0x17a>
 800d134:	2b61      	cmp	r3, #97	; 0x61
 800d136:	f47f af70 	bne.w	800d01a <d_expression_1+0x5a>
 800d13a:	215f      	movs	r1, #95	; 0x5f
 800d13c:	4620      	mov	r0, r4
 800d13e:	f7fe faa1 	bl	800b684 <d_exprlist>
 800d142:	4606      	mov	r6, r0
 800d144:	4620      	mov	r0, r4
 800d146:	f000 f90d 	bl	800d364 <d_type>
 800d14a:	68e3      	ldr	r3, [r4, #12]
 800d14c:	4607      	mov	r7, r0
 800d14e:	7819      	ldrb	r1, [r3, #0]
 800d150:	2945      	cmp	r1, #69	; 0x45
 800d152:	f000 80b7 	beq.w	800d2c4 <d_expression_1+0x304>
 800d156:	2970      	cmp	r1, #112	; 0x70
 800d158:	f000 80c3 	beq.w	800d2e2 <d_expression_1+0x322>
 800d15c:	2969      	cmp	r1, #105	; 0x69
 800d15e:	f47f af5c 	bne.w	800d01a <d_expression_1+0x5a>
 800d162:	785b      	ldrb	r3, [r3, #1]
 800d164:	2b6c      	cmp	r3, #108	; 0x6c
 800d166:	f47f af58 	bne.w	800d01a <d_expression_1+0x5a>
 800d16a:	4620      	mov	r0, r4
 800d16c:	f7ff ff28 	bl	800cfc0 <d_expression_1>
 800d170:	4603      	mov	r3, r0
 800d172:	463a      	mov	r2, r7
 800d174:	213a      	movs	r1, #58	; 0x3a
 800d176:	4620      	mov	r0, r4
 800d178:	f7f9 fd0e 	bl	8006b98 <d_make_comp>
 800d17c:	4632      	mov	r2, r6
 800d17e:	4603      	mov	r3, r0
 800d180:	2139      	movs	r1, #57	; 0x39
 800d182:	4620      	mov	r0, r4
 800d184:	f7f9 fd08 	bl	8006b98 <d_make_comp>
 800d188:	462a      	mov	r2, r5
 800d18a:	4603      	mov	r3, r0
 800d18c:	2138      	movs	r1, #56	; 0x38
 800d18e:	4620      	mov	r0, r4
 800d190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d194:	f7f9 bd00 	b.w	8006b98 <d_make_comp>
 800d198:	2600      	movs	r6, #0
 800d19a:	686b      	ldr	r3, [r5, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	785a      	ldrb	r2, [r3, #1]
 800d1a0:	2a63      	cmp	r2, #99	; 0x63
 800d1a2:	d072      	beq.n	800d28a <d_expression_1+0x2ca>
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	f7ff ff0b 	bl	800cfc0 <d_expression_1>
 800d1aa:	4607      	mov	r7, r0
 800d1ac:	496a      	ldr	r1, [pc, #424]	; (800d358 <d_expression_1+0x398>)
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f001 fe4a 	bl	800ee48 <strcmp>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d062      	beq.n	800d27e <d_expression_1+0x2be>
 800d1b8:	4968      	ldr	r1, [pc, #416]	; (800d35c <d_expression_1+0x39c>)
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f001 fe44 	bl	800ee48 <strcmp>
 800d1c0:	b128      	cbz	r0, 800d1ce <d_expression_1+0x20e>
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	4966      	ldr	r1, [pc, #408]	; (800d360 <d_expression_1+0x3a0>)
 800d1c6:	f001 fe3f 	bl	800ee48 <strcmp>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d175      	bne.n	800d2ba <d_expression_1+0x2fa>
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f000 fd44 	bl	800dc5c <d_unqualified_name>
 800d1d4:	68e3      	ldr	r3, [r4, #12]
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b49      	cmp	r3, #73	; 0x49
 800d1dc:	d076      	beq.n	800d2cc <d_expression_1+0x30c>
 800d1de:	4633      	mov	r3, r6
 800d1e0:	463a      	mov	r2, r7
 800d1e2:	2137      	movs	r1, #55	; 0x37
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7f9 fcd7 	bl	8006b98 <d_make_comp>
 800d1ea:	462a      	mov	r2, r5
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2136      	movs	r1, #54	; 0x36
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f6:	f7f9 bccf 	b.w	8006b98 <d_make_comp>
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	60e3      	str	r3, [r4, #12]
 800d1fe:	2600      	movs	r6, #0
 800d200:	4620      	mov	r0, r4
 800d202:	f7ff fedd 	bl	800cfc0 <d_expression_1>
 800d206:	4603      	mov	r3, r0
 800d208:	b12e      	cbz	r6, 800d216 <d_expression_1+0x256>
 800d20a:	4602      	mov	r2, r0
 800d20c:	2137      	movs	r1, #55	; 0x37
 800d20e:	4620      	mov	r0, r4
 800d210:	f7f9 fcc2 	bl	8006b98 <d_make_comp>
 800d214:	4603      	mov	r3, r0
 800d216:	462a      	mov	r2, r5
 800d218:	4620      	mov	r0, r4
 800d21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21e:	2135      	movs	r1, #53	; 0x35
 800d220:	f7f9 bcba 	b.w	8006b98 <d_make_comp>
 800d224:	2e00      	cmp	r6, #0
 800d226:	d0ea      	beq.n	800d1fe <d_expression_1+0x23e>
 800d228:	7833      	ldrb	r3, [r6, #0]
 800d22a:	2b70      	cmp	r3, #112	; 0x70
 800d22c:	d001      	beq.n	800d232 <d_expression_1+0x272>
 800d22e:	2b6d      	cmp	r3, #109	; 0x6d
 800d230:	d1e5      	bne.n	800d1fe <d_expression_1+0x23e>
 800d232:	7872      	ldrb	r2, [r6, #1]
 800d234:	429a      	cmp	r2, r3
 800d236:	d1e2      	bne.n	800d1fe <d_expression_1+0x23e>
 800d238:	68e3      	ldr	r3, [r4, #12]
 800d23a:	781a      	ldrb	r2, [r3, #0]
 800d23c:	2a5f      	cmp	r2, #95	; 0x5f
 800d23e:	d0dc      	beq.n	800d1fa <d_expression_1+0x23a>
 800d240:	2601      	movs	r6, #1
 800d242:	e7dd      	b.n	800d200 <d_expression_1+0x240>
 800d244:	68e3      	ldr	r3, [r4, #12]
 800d246:	781a      	ldrb	r2, [r3, #0]
 800d248:	2a5f      	cmp	r2, #95	; 0x5f
 800d24a:	d1d8      	bne.n	800d1fe <d_expression_1+0x23e>
 800d24c:	3301      	adds	r3, #1
 800d24e:	60e3      	str	r3, [r4, #12]
 800d250:	2145      	movs	r1, #69	; 0x45
 800d252:	4620      	mov	r0, r4
 800d254:	f7fe fa16 	bl	800b684 <d_exprlist>
 800d258:	4603      	mov	r3, r0
 800d25a:	e7dc      	b.n	800d216 <d_expression_1+0x256>
 800d25c:	4620      	mov	r0, r4
 800d25e:	f000 f881 	bl	800d364 <d_type>
 800d262:	e7d7      	b.n	800d214 <d_expression_1+0x254>
 800d264:	4620      	mov	r0, r4
 800d266:	f7ff feab 	bl	800cfc0 <d_expression_1>
 800d26a:	4606      	mov	r6, r0
 800d26c:	4620      	mov	r0, r4
 800d26e:	f7ff fea7 	bl	800cfc0 <d_expression_1>
 800d272:	4607      	mov	r7, r0
 800d274:	4620      	mov	r0, r4
 800d276:	f7ff fea3 	bl	800cfc0 <d_expression_1>
 800d27a:	4603      	mov	r3, r0
 800d27c:	e779      	b.n	800d172 <d_expression_1+0x1b2>
 800d27e:	2145      	movs	r1, #69	; 0x45
 800d280:	4620      	mov	r0, r4
 800d282:	f7fe f9ff 	bl	800b684 <d_exprlist>
 800d286:	4606      	mov	r6, r0
 800d288:	e7a9      	b.n	800d1de <d_expression_1+0x21e>
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800d290:	2a01      	cmp	r2, #1
 800d292:	d902      	bls.n	800d29a <d_expression_1+0x2da>
 800d294:	3b72      	subs	r3, #114	; 0x72
 800d296:	2b01      	cmp	r3, #1
 800d298:	d884      	bhi.n	800d1a4 <d_expression_1+0x1e4>
 800d29a:	4620      	mov	r0, r4
 800d29c:	f000 f862 	bl	800d364 <d_type>
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	e783      	b.n	800d1ac <d_expression_1+0x1ec>
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	f7fd fb77 	bl	800a998 <d_template_args>
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2104      	movs	r1, #4
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f7f9 fc71 	bl	8006b98 <d_make_comp>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	e71a      	b.n	800d0f0 <d_expression_1+0x130>
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f7ff fe80 	bl	800cfc0 <d_expression_1>
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	e78c      	b.n	800d1de <d_expression_1+0x21e>
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	60e3      	str	r3, [r4, #12]
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	e752      	b.n	800d172 <d_expression_1+0x1b2>
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f7fd fb63 	bl	800a998 <d_template_args>
 800d2d2:	4632      	mov	r2, r6
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2104      	movs	r1, #4
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f7f9 fc5d 	bl	8006b98 <d_make_comp>
 800d2de:	4606      	mov	r6, r0
 800d2e0:	e77d      	b.n	800d1de <d_expression_1+0x21e>
 800d2e2:	785a      	ldrb	r2, [r3, #1]
 800d2e4:	2a69      	cmp	r2, #105	; 0x69
 800d2e6:	f47f ae98 	bne.w	800d01a <d_expression_1+0x5a>
 800d2ea:	3302      	adds	r3, #2
 800d2ec:	60e3      	str	r3, [r4, #12]
 800d2ee:	2145      	movs	r1, #69	; 0x45
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f7fe f9c7 	bl	800b684 <d_exprlist>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	e73b      	b.n	800d172 <d_expression_1+0x1b2>
 800d2fa:	2b6f      	cmp	r3, #111	; 0x6f
 800d2fc:	d014      	beq.n	800d328 <d_expression_1+0x368>
 800d2fe:	2b69      	cmp	r3, #105	; 0x69
 800d300:	d119      	bne.n	800d336 <d_expression_1+0x376>
 800d302:	7853      	ldrb	r3, [r2, #1]
 800d304:	2b6c      	cmp	r3, #108	; 0x6c
 800d306:	f47f ae7b 	bne.w	800d000 <d_expression_1+0x40>
 800d30a:	2500      	movs	r5, #0
 800d30c:	3202      	adds	r2, #2
 800d30e:	60e2      	str	r2, [r4, #12]
 800d310:	2145      	movs	r1, #69	; 0x45
 800d312:	4620      	mov	r0, r4
 800d314:	f7fe f9b6 	bl	800b684 <d_exprlist>
 800d318:	462a      	mov	r2, r5
 800d31a:	4603      	mov	r3, r0
 800d31c:	2130      	movs	r1, #48	; 0x30
 800d31e:	4620      	mov	r0, r4
 800d320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d324:	f7f9 bc38 	b.w	8006b98 <d_make_comp>
 800d328:	7853      	ldrb	r3, [r2, #1]
 800d32a:	2b6e      	cmp	r3, #110	; 0x6e
 800d32c:	f47f ae68 	bne.w	800d000 <d_expression_1+0x40>
 800d330:	3202      	adds	r2, #2
 800d332:	60c2      	str	r2, [r0, #12]
 800d334:	e656      	b.n	800cfe4 <d_expression_1+0x24>
 800d336:	2b74      	cmp	r3, #116	; 0x74
 800d338:	f47f ae62 	bne.w	800d000 <d_expression_1+0x40>
 800d33c:	7853      	ldrb	r3, [r2, #1]
 800d33e:	2b6c      	cmp	r3, #108	; 0x6c
 800d340:	f47f ae5e 	bne.w	800d000 <d_expression_1+0x40>
 800d344:	f000 f80e 	bl	800d364 <d_type>
 800d348:	68e2      	ldr	r2, [r4, #12]
 800d34a:	4605      	mov	r5, r0
 800d34c:	e7de      	b.n	800d30c <d_expression_1+0x34c>
 800d34e:	bf00      	nop
 800d350:	0801642c 	.word	0x0801642c
 800d354:	08016124 	.word	0x08016124
 800d358:	0801611c 	.word	0x0801611c
 800d35c:	08016238 	.word	0x08016238
 800d360:	0801623c 	.word	0x0801623c

0800d364 <d_type>:
 800d364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d368:	68c1      	ldr	r1, [r0, #12]
 800d36a:	b083      	sub	sp, #12
 800d36c:	780b      	ldrb	r3, [r1, #0]
 800d36e:	4604      	mov	r4, r0
 800d370:	2b72      	cmp	r3, #114	; 0x72
 800d372:	d055      	beq.n	800d420 <d_type+0xbc>
 800d374:	2b56      	cmp	r3, #86	; 0x56
 800d376:	d053      	beq.n	800d420 <d_type+0xbc>
 800d378:	2b4b      	cmp	r3, #75	; 0x4b
 800d37a:	d051      	beq.n	800d420 <d_type+0xbc>
 800d37c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d380:	2a4a      	cmp	r2, #74	; 0x4a
 800d382:	f200 808a 	bhi.w	800d49a <d_type+0x136>
 800d386:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d38a:	00b2      	.short	0x00b2
 800d38c:	00b200b2 	.word	0x00b200b2
 800d390:	00b200b2 	.word	0x00b200b2
 800d394:	00b200b2 	.word	0x00b200b2
 800d398:	00b200b2 	.word	0x00b200b2
 800d39c:	008800b2 	.word	0x008800b2
 800d3a0:	00880088 	.word	0x00880088
 800d3a4:	00880088 	.word	0x00880088
 800d3a8:	00880088 	.word	0x00880088
 800d3ac:	008800b8 	.word	0x008800b8
 800d3b0:	010300e1 	.word	0x010300e1
 800d3b4:	00ef0088 	.word	0x00ef0088
 800d3b8:	008800f5 	.word	0x008800f5
 800d3bc:	00880088 	.word	0x00880088
 800d3c0:	00880088 	.word	0x00880088
 800d3c4:	00b20175 	.word	0x00b20175
 800d3c8:	019b018d 	.word	0x019b018d
 800d3cc:	01a90088 	.word	0x01a90088
 800d3d0:	020f01b7 	.word	0x020f01b7
 800d3d4:	008801d8 	.word	0x008801d8
 800d3d8:	00880088 	.word	0x00880088
 800d3dc:	00b20088 	.word	0x00b20088
 800d3e0:	00880088 	.word	0x00880088
 800d3e4:	00880088 	.word	0x00880088
 800d3e8:	00880088 	.word	0x00880088
 800d3ec:	01ea01ea 	.word	0x01ea01ea
 800d3f0:	01ea01ea 	.word	0x01ea01ea
 800d3f4:	01ea01ea 	.word	0x01ea01ea
 800d3f8:	01ea01ea 	.word	0x01ea01ea
 800d3fc:	01ea01ea 	.word	0x01ea01ea
 800d400:	01ea0088 	.word	0x01ea0088
 800d404:	01ea01ea 	.word	0x01ea01ea
 800d408:	008801ea 	.word	0x008801ea
 800d40c:	00880088 	.word	0x00880088
 800d410:	01ea01ea 	.word	0x01ea01ea
 800d414:	01ea0098 	.word	0x01ea0098
 800d418:	01ea01ea 	.word	0x01ea01ea
 800d41c:	01ea01ea 	.word	0x01ea01ea
 800d420:	2200      	movs	r2, #0
 800d422:	a901      	add	r1, sp, #4
 800d424:	4620      	mov	r0, r4
 800d426:	f7f9 fc03 	bl	8006c30 <d_cv_qualifiers>
 800d42a:	4605      	mov	r5, r0
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d034      	beq.n	800d49a <d_type+0x136>
 800d430:	68e3      	ldr	r3, [r4, #12]
 800d432:	4620      	mov	r0, r4
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	2b46      	cmp	r3, #70	; 0x46
 800d438:	d034      	beq.n	800d4a4 <d_type+0x140>
 800d43a:	f7ff ff93 	bl	800d364 <d_type>
 800d43e:	6028      	str	r0, [r5, #0]
 800d440:	b358      	cbz	r0, 800d49a <d_type+0x136>
 800d442:	7803      	ldrb	r3, [r0, #0]
 800d444:	3b1f      	subs	r3, #31
 800d446:	2b01      	cmp	r3, #1
 800d448:	d930      	bls.n	800d4ac <d_type+0x148>
 800d44a:	9a01      	ldr	r2, [sp, #4]
 800d44c:	b32a      	cbz	r2, 800d49a <d_type+0x136>
 800d44e:	6a23      	ldr	r3, [r4, #32]
 800d450:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d452:	428b      	cmp	r3, r1
 800d454:	da21      	bge.n	800d49a <d_type+0x136>
 800d456:	69e0      	ldr	r0, [r4, #28]
 800d458:	1c59      	adds	r1, r3, #1
 800d45a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d45e:	9d01      	ldr	r5, [sp, #4]
 800d460:	6221      	str	r1, [r4, #32]
 800d462:	4628      	mov	r0, r5
 800d464:	b003      	add	sp, #12
 800d466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d46a:	2301      	movs	r3, #1
 800d46c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d46e:	4620      	mov	r0, r4
 800d470:	6363      	str	r3, [r4, #52]	; 0x34
 800d472:	f7ff fda5 	bl	800cfc0 <d_expression_1>
 800d476:	6365      	str	r5, [r4, #52]	; 0x34
 800d478:	4602      	mov	r2, r0
 800d47a:	2300      	movs	r3, #0
 800d47c:	2141      	movs	r1, #65	; 0x41
 800d47e:	4620      	mov	r0, r4
 800d480:	f7f9 fb8a 	bl	8006b98 <d_make_comp>
 800d484:	4605      	mov	r5, r0
 800d486:	9001      	str	r0, [sp, #4]
 800d488:	b138      	cbz	r0, 800d49a <d_type+0x136>
 800d48a:	68e3      	ldr	r3, [r4, #12]
 800d48c:	781a      	ldrb	r2, [r3, #0]
 800d48e:	b122      	cbz	r2, 800d49a <d_type+0x136>
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	60e2      	str	r2, [r4, #12]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	2b45      	cmp	r3, #69	; 0x45
 800d498:	d01e      	beq.n	800d4d8 <d_type+0x174>
 800d49a:	2500      	movs	r5, #0
 800d49c:	4628      	mov	r0, r5
 800d49e:	b003      	add	sp, #12
 800d4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4a4:	f000 fd30 	bl	800df08 <d_function_type>
 800d4a8:	6028      	str	r0, [r5, #0]
 800d4aa:	e7c9      	b.n	800d440 <d_type+0xdc>
 800d4ac:	9a01      	ldr	r2, [sp, #4]
 800d4ae:	6843      	ldr	r3, [r0, #4]
 800d4b0:	6042      	str	r2, [r0, #4]
 800d4b2:	682a      	ldr	r2, [r5, #0]
 800d4b4:	9201      	str	r2, [sp, #4]
 800d4b6:	602b      	str	r3, [r5, #0]
 800d4b8:	e7c7      	b.n	800d44a <d_type+0xe6>
 800d4ba:	3101      	adds	r1, #1
 800d4bc:	60e1      	str	r1, [r4, #12]
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f7f9 fd2e 	bl	8006f20 <d_source_name>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	2128      	movs	r1, #40	; 0x28
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f7f9 fb64 	bl	8006b98 <d_make_comp>
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	9001      	str	r0, [sp, #4]
 800d4d4:	2d00      	cmp	r5, #0
 800d4d6:	d0e0      	beq.n	800d49a <d_type+0x136>
 800d4d8:	6a23      	ldr	r3, [r4, #32]
 800d4da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	dadc      	bge.n	800d49a <d_type+0x136>
 800d4e0:	69e1      	ldr	r1, [r4, #28]
 800d4e2:	1c5a      	adds	r2, r3, #1
 800d4e4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800d4e8:	9d01      	ldr	r5, [sp, #4]
 800d4ea:	6222      	str	r2, [r4, #32]
 800d4ec:	e7d6      	b.n	800d49c <d_type+0x138>
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f000 fd2a 	bl	800df48 <d_name>
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	9001      	str	r0, [sp, #4]
 800d4f8:	e7ec      	b.n	800d4d4 <d_type+0x170>
 800d4fa:	1c48      	adds	r0, r1, #1
 800d4fc:	60e0      	str	r0, [r4, #12]
 800d4fe:	784b      	ldrb	r3, [r1, #1]
 800d500:	2b5f      	cmp	r3, #95	; 0x5f
 800d502:	f000 8273 	beq.w	800d9ec <d_type+0x688>
 800d506:	3b30      	subs	r3, #48	; 0x30
 800d508:	2b09      	cmp	r3, #9
 800d50a:	f200 827d 	bhi.w	800da08 <d_type+0x6a4>
 800d50e:	4603      	mov	r3, r0
 800d510:	3301      	adds	r3, #1
 800d512:	60e3      	str	r3, [r4, #12]
 800d514:	781a      	ldrb	r2, [r3, #0]
 800d516:	3a30      	subs	r2, #48	; 0x30
 800d518:	2a09      	cmp	r2, #9
 800d51a:	d9f9      	bls.n	800d510 <d_type+0x1ac>
 800d51c:	6962      	ldr	r2, [r4, #20]
 800d51e:	69a1      	ldr	r1, [r4, #24]
 800d520:	428a      	cmp	r2, r1
 800d522:	da11      	bge.n	800d548 <d_type+0x1e4>
 800d524:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d528:	6926      	ldr	r6, [r4, #16]
 800d52a:	0089      	lsls	r1, r1, #2
 800d52c:	3201      	adds	r2, #1
 800d52e:	1875      	adds	r5, r6, r1
 800d530:	6162      	str	r2, [r4, #20]
 800d532:	d009      	beq.n	800d548 <d_type+0x1e4>
 800d534:	1a1a      	subs	r2, r3, r0
 800d536:	d007      	beq.n	800d548 <d_type+0x1e4>
 800d538:	2700      	movs	r7, #0
 800d53a:	5477      	strb	r7, [r6, r1]
 800d53c:	6068      	str	r0, [r5, #4]
 800d53e:	60aa      	str	r2, [r5, #8]
 800d540:	781a      	ldrb	r2, [r3, #0]
 800d542:	2a5f      	cmp	r2, #95	; 0x5f
 800d544:	f000 82c7 	beq.w	800dad6 <d_type+0x772>
 800d548:	2500      	movs	r5, #0
 800d54a:	e0a9      	b.n	800d6a0 <d_type+0x33c>
 800d54c:	3101      	adds	r1, #1
 800d54e:	60e1      	str	r1, [r4, #12]
 800d550:	4620      	mov	r0, r4
 800d552:	f7ff ff07 	bl	800d364 <d_type>
 800d556:	2300      	movs	r3, #0
 800d558:	4602      	mov	r2, r0
 800d55a:	2125      	movs	r1, #37	; 0x25
 800d55c:	4620      	mov	r0, r4
 800d55e:	f7f9 fb1b 	bl	8006b98 <d_make_comp>
 800d562:	4605      	mov	r5, r0
 800d564:	9001      	str	r0, [sp, #4]
 800d566:	e7b5      	b.n	800d4d4 <d_type+0x170>
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 fccd 	bl	800df08 <d_function_type>
 800d56e:	4605      	mov	r5, r0
 800d570:	9001      	str	r0, [sp, #4]
 800d572:	e7af      	b.n	800d4d4 <d_type+0x170>
 800d574:	3101      	adds	r1, #1
 800d576:	60e1      	str	r1, [r4, #12]
 800d578:	4620      	mov	r0, r4
 800d57a:	f7ff fef3 	bl	800d364 <d_type>
 800d57e:	2300      	movs	r3, #0
 800d580:	4602      	mov	r2, r0
 800d582:	2126      	movs	r1, #38	; 0x26
 800d584:	4620      	mov	r0, r4
 800d586:	f7f9 fb07 	bl	8006b98 <d_make_comp>
 800d58a:	4605      	mov	r5, r0
 800d58c:	9001      	str	r0, [sp, #4]
 800d58e:	e7a1      	b.n	800d4d4 <d_type+0x170>
 800d590:	1c4b      	adds	r3, r1, #1
 800d592:	60e3      	str	r3, [r4, #12]
 800d594:	784b      	ldrb	r3, [r1, #1]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f43f af7f 	beq.w	800d49a <d_type+0x136>
 800d59c:	1c8b      	adds	r3, r1, #2
 800d59e:	60e3      	str	r3, [r4, #12]
 800d5a0:	784b      	ldrb	r3, [r1, #1]
 800d5a2:	3b46      	subs	r3, #70	; 0x46
 800d5a4:	2b30      	cmp	r3, #48	; 0x30
 800d5a6:	f63f af78 	bhi.w	800d49a <d_type+0x136>
 800d5aa:	a201      	add	r2, pc, #4	; (adr r2, 800d5b0 <d_type+0x24c>)
 800d5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b0:	0800d97d 	.word	0x0800d97d
 800d5b4:	0800d49b 	.word	0x0800d49b
 800d5b8:	0800d49b 	.word	0x0800d49b
 800d5bc:	0800d49b 	.word	0x0800d49b
 800d5c0:	0800d49b 	.word	0x0800d49b
 800d5c4:	0800d49b 	.word	0x0800d49b
 800d5c8:	0800d49b 	.word	0x0800d49b
 800d5cc:	0800d49b 	.word	0x0800d49b
 800d5d0:	0800d49b 	.word	0x0800d49b
 800d5d4:	0800d49b 	.word	0x0800d49b
 800d5d8:	0800d49b 	.word	0x0800d49b
 800d5dc:	0800d49b 	.word	0x0800d49b
 800d5e0:	0800d49b 	.word	0x0800d49b
 800d5e4:	0800d49b 	.word	0x0800d49b
 800d5e8:	0800d46b 	.word	0x0800d46b
 800d5ec:	0800d49b 	.word	0x0800d49b
 800d5f0:	0800d49b 	.word	0x0800d49b
 800d5f4:	0800d49b 	.word	0x0800d49b
 800d5f8:	0800d49b 	.word	0x0800d49b
 800d5fc:	0800d49b 	.word	0x0800d49b
 800d600:	0800d49b 	.word	0x0800d49b
 800d604:	0800d49b 	.word	0x0800d49b
 800d608:	0800d49b 	.word	0x0800d49b
 800d60c:	0800d49b 	.word	0x0800d49b
 800d610:	0800d49b 	.word	0x0800d49b
 800d614:	0800d49b 	.word	0x0800d49b
 800d618:	0800d49b 	.word	0x0800d49b
 800d61c:	0800d951 	.word	0x0800d951
 800d620:	0800d49b 	.word	0x0800d49b
 800d624:	0800d49b 	.word	0x0800d49b
 800d628:	0800d935 	.word	0x0800d935
 800d62c:	0800d871 	.word	0x0800d871
 800d630:	0800d845 	.word	0x0800d845
 800d634:	0800d49b 	.word	0x0800d49b
 800d638:	0800d819 	.word	0x0800d819
 800d63c:	0800d7ed 	.word	0x0800d7ed
 800d640:	0800d49b 	.word	0x0800d49b
 800d644:	0800d49b 	.word	0x0800d49b
 800d648:	0800d49b 	.word	0x0800d49b
 800d64c:	0800d49b 	.word	0x0800d49b
 800d650:	0800d90d 	.word	0x0800d90d
 800d654:	0800d49b 	.word	0x0800d49b
 800d658:	0800d8f5 	.word	0x0800d8f5
 800d65c:	0800d49b 	.word	0x0800d49b
 800d660:	0800d49b 	.word	0x0800d49b
 800d664:	0800d8d7 	.word	0x0800d8d7
 800d668:	0800d46b 	.word	0x0800d46b
 800d66c:	0800d49b 	.word	0x0800d49b
 800d670:	0800d89d 	.word	0x0800d89d
 800d674:	3101      	adds	r1, #1
 800d676:	60e1      	str	r1, [r4, #12]
 800d678:	4620      	mov	r0, r4
 800d67a:	f7ff fe73 	bl	800d364 <d_type>
 800d67e:	4605      	mov	r5, r0
 800d680:	2800      	cmp	r0, #0
 800d682:	f43f af61 	beq.w	800d548 <d_type+0x1e4>
 800d686:	4620      	mov	r0, r4
 800d688:	f7ff fe6c 	bl	800d364 <d_type>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	f43f af5b 	beq.w	800d548 <d_type+0x1e4>
 800d692:	4603      	mov	r3, r0
 800d694:	462a      	mov	r2, r5
 800d696:	212b      	movs	r1, #43	; 0x2b
 800d698:	4620      	mov	r0, r4
 800d69a:	f7f9 fa7d 	bl	8006b98 <d_make_comp>
 800d69e:	4605      	mov	r5, r0
 800d6a0:	9501      	str	r5, [sp, #4]
 800d6a2:	e717      	b.n	800d4d4 <d_type+0x170>
 800d6a4:	3101      	adds	r1, #1
 800d6a6:	60e1      	str	r1, [r4, #12]
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f7ff fe5b 	bl	800d364 <d_type>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	2124      	movs	r1, #36	; 0x24
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f7f9 fa6f 	bl	8006b98 <d_make_comp>
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	9001      	str	r0, [sp, #4]
 800d6be:	e709      	b.n	800d4d4 <d_type+0x170>
 800d6c0:	3101      	adds	r1, #1
 800d6c2:	60e1      	str	r1, [r4, #12]
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f7ff fe4d 	bl	800d364 <d_type>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	2122      	movs	r1, #34	; 0x22
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f7f9 fa61 	bl	8006b98 <d_make_comp>
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	9001      	str	r0, [sp, #4]
 800d6da:	e6fb      	b.n	800d4d4 <d_type+0x170>
 800d6dc:	3101      	adds	r1, #1
 800d6de:	60e1      	str	r1, [r4, #12]
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f7ff fe3f 	bl	800d364 <d_type>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	2123      	movs	r1, #35	; 0x23
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f7f9 fa53 	bl	8006b98 <d_make_comp>
 800d6f2:	4605      	mov	r5, r0
 800d6f4:	9001      	str	r0, [sp, #4]
 800d6f6:	e6ed      	b.n	800d4d4 <d_type+0x170>
 800d6f8:	784b      	ldrb	r3, [r1, #1]
 800d6fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d6fe:	2a09      	cmp	r2, #9
 800d700:	d905      	bls.n	800d70e <d_type+0x3aa>
 800d702:	2b5f      	cmp	r3, #95	; 0x5f
 800d704:	d003      	beq.n	800d70e <d_type+0x3aa>
 800d706:	3b41      	subs	r3, #65	; 0x41
 800d708:	2b19      	cmp	r3, #25
 800d70a:	f200 818a 	bhi.w	800da22 <d_type+0x6be>
 800d70e:	2100      	movs	r1, #0
 800d710:	4620      	mov	r0, r4
 800d712:	f7f9 fc7d 	bl	8007010 <d_substitution>
 800d716:	68e3      	ldr	r3, [r4, #12]
 800d718:	9001      	str	r0, [sp, #4]
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	4605      	mov	r5, r0
 800d71e:	2b49      	cmp	r3, #73	; 0x49
 800d720:	f47f aebc 	bne.w	800d49c <d_type+0x138>
 800d724:	4620      	mov	r0, r4
 800d726:	f7fd f937 	bl	800a998 <d_template_args>
 800d72a:	462a      	mov	r2, r5
 800d72c:	4603      	mov	r3, r0
 800d72e:	2104      	movs	r1, #4
 800d730:	4620      	mov	r0, r4
 800d732:	f7f9 fa31 	bl	8006b98 <d_make_comp>
 800d736:	4605      	mov	r5, r0
 800d738:	e7b2      	b.n	800d6a0 <d_type+0x33c>
 800d73a:	3101      	adds	r1, #1
 800d73c:	60e1      	str	r1, [r4, #12]
 800d73e:	4620      	mov	r0, r4
 800d740:	f7f9 fbee 	bl	8006f20 <d_source_name>
 800d744:	9001      	str	r0, [sp, #4]
 800d746:	4620      	mov	r0, r4
 800d748:	f7ff fe0c 	bl	800d364 <d_type>
 800d74c:	9b01      	ldr	r3, [sp, #4]
 800d74e:	4602      	mov	r2, r0
 800d750:	2121      	movs	r1, #33	; 0x21
 800d752:	4620      	mov	r0, r4
 800d754:	f7f9 fa20 	bl	8006b98 <d_make_comp>
 800d758:	4605      	mov	r5, r0
 800d75a:	9001      	str	r0, [sp, #4]
 800d75c:	e6ba      	b.n	800d4d4 <d_type+0x170>
 800d75e:	3b61      	subs	r3, #97	; 0x61
 800d760:	4fb6      	ldr	r7, [pc, #728]	; (800da3c <d_type+0x6d8>)
 800d762:	6962      	ldr	r2, [r4, #20]
 800d764:	69a5      	ldr	r5, [r4, #24]
 800d766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d76a:	009b      	lsls	r3, r3, #2
 800d76c:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 800d770:	42aa      	cmp	r2, r5
 800d772:	4418      	add	r0, r3
 800d774:	f280 8136 	bge.w	800d9e4 <d_type+0x680>
 800d778:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800d77c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800d780:	00b6      	lsls	r6, r6, #2
 800d782:	3201      	adds	r2, #1
 800d784:	eb1e 0506 	adds.w	r5, lr, r6
 800d788:	6162      	str	r2, [r4, #20]
 800d78a:	f000 812b 	beq.w	800d9e4 <d_type+0x680>
 800d78e:	2227      	movs	r2, #39	; 0x27
 800d790:	f80e 2006 	strb.w	r2, [lr, r6]
 800d794:	443b      	add	r3, r7
 800d796:	6068      	str	r0, [r5, #4]
 800d798:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d79a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d79e:	3101      	adds	r1, #1
 800d7a0:	4413      	add	r3, r2
 800d7a2:	60e1      	str	r1, [r4, #12]
 800d7a4:	6323      	str	r3, [r4, #48]	; 0x30
 800d7a6:	e679      	b.n	800d49c <d_type+0x138>
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f7f9 fb97 	bl	8006edc <d_template_param>
 800d7ae:	68e6      	ldr	r6, [r4, #12]
 800d7b0:	9001      	str	r0, [sp, #4]
 800d7b2:	7833      	ldrb	r3, [r6, #0]
 800d7b4:	4605      	mov	r5, r0
 800d7b6:	2b49      	cmp	r3, #73	; 0x49
 800d7b8:	f47f ae8c 	bne.w	800d4d4 <d_type+0x170>
 800d7bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	f040 814e 	bne.w	800da60 <d_type+0x6fc>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	f43f ae68 	beq.w	800d49a <d_type+0x136>
 800d7ca:	6a23      	ldr	r3, [r4, #32]
 800d7cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	f6bf ae63 	bge.w	800d49a <d_type+0x136>
 800d7d4:	69e1      	ldr	r1, [r4, #28]
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800d7dc:	6222      	str	r2, [r4, #32]
 800d7de:	4620      	mov	r0, r4
 800d7e0:	9d01      	ldr	r5, [sp, #4]
 800d7e2:	f7fd f8d9 	bl	800a998 <d_template_args>
 800d7e6:	462a      	mov	r2, r5
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	e7a0      	b.n	800d72e <d_type+0x3ca>
 800d7ec:	6963      	ldr	r3, [r4, #20]
 800d7ee:	69a2      	ldr	r2, [r4, #24]
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	f280 80f7 	bge.w	800d9e4 <d_type+0x680>
 800d7f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d7fa:	6922      	ldr	r2, [r4, #16]
 800d7fc:	0089      	lsls	r1, r1, #2
 800d7fe:	3301      	adds	r3, #1
 800d800:	1855      	adds	r5, r2, r1
 800d802:	6163      	str	r3, [r4, #20]
 800d804:	f000 80ee 	beq.w	800d9e4 <d_type+0x680>
 800d808:	4b8d      	ldr	r3, [pc, #564]	; (800da40 <d_type+0x6dc>)
 800d80a:	2027      	movs	r0, #39	; 0x27
 800d80c:	5450      	strb	r0, [r2, r1]
 800d80e:	606b      	str	r3, [r5, #4]
 800d810:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d812:	3308      	adds	r3, #8
 800d814:	6323      	str	r3, [r4, #48]	; 0x30
 800d816:	e641      	b.n	800d49c <d_type+0x138>
 800d818:	6963      	ldr	r3, [r4, #20]
 800d81a:	69a2      	ldr	r2, [r4, #24]
 800d81c:	4293      	cmp	r3, r2
 800d81e:	f280 80e1 	bge.w	800d9e4 <d_type+0x680>
 800d822:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d826:	6922      	ldr	r2, [r4, #16]
 800d828:	0089      	lsls	r1, r1, #2
 800d82a:	3301      	adds	r3, #1
 800d82c:	1855      	adds	r5, r2, r1
 800d82e:	6163      	str	r3, [r4, #20]
 800d830:	f000 80d8 	beq.w	800d9e4 <d_type+0x680>
 800d834:	4b83      	ldr	r3, [pc, #524]	; (800da44 <d_type+0x6e0>)
 800d836:	2027      	movs	r0, #39	; 0x27
 800d838:	5450      	strb	r0, [r2, r1]
 800d83a:	606b      	str	r3, [r5, #4]
 800d83c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d83e:	3304      	adds	r3, #4
 800d840:	6323      	str	r3, [r4, #48]	; 0x30
 800d842:	e62b      	b.n	800d49c <d_type+0x138>
 800d844:	6963      	ldr	r3, [r4, #20]
 800d846:	69a2      	ldr	r2, [r4, #24]
 800d848:	4293      	cmp	r3, r2
 800d84a:	f280 80cb 	bge.w	800d9e4 <d_type+0x680>
 800d84e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d852:	6922      	ldr	r2, [r4, #16]
 800d854:	0089      	lsls	r1, r1, #2
 800d856:	3301      	adds	r3, #1
 800d858:	1855      	adds	r5, r2, r1
 800d85a:	6163      	str	r3, [r4, #20]
 800d85c:	f000 80c2 	beq.w	800d9e4 <d_type+0x680>
 800d860:	4b79      	ldr	r3, [pc, #484]	; (800da48 <d_type+0x6e4>)
 800d862:	2027      	movs	r0, #39	; 0x27
 800d864:	5450      	strb	r0, [r2, r1]
 800d866:	606b      	str	r3, [r5, #4]
 800d868:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d86a:	3309      	adds	r3, #9
 800d86c:	6323      	str	r3, [r4, #48]	; 0x30
 800d86e:	e615      	b.n	800d49c <d_type+0x138>
 800d870:	6963      	ldr	r3, [r4, #20]
 800d872:	69a2      	ldr	r2, [r4, #24]
 800d874:	4293      	cmp	r3, r2
 800d876:	f280 80b5 	bge.w	800d9e4 <d_type+0x680>
 800d87a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d87e:	6922      	ldr	r2, [r4, #16]
 800d880:	0089      	lsls	r1, r1, #2
 800d882:	3301      	adds	r3, #1
 800d884:	1855      	adds	r5, r2, r1
 800d886:	6163      	str	r3, [r4, #20]
 800d888:	f000 80ac 	beq.w	800d9e4 <d_type+0x680>
 800d88c:	4b6f      	ldr	r3, [pc, #444]	; (800da4c <d_type+0x6e8>)
 800d88e:	2027      	movs	r0, #39	; 0x27
 800d890:	5450      	strb	r0, [r2, r1]
 800d892:	606b      	str	r3, [r5, #4]
 800d894:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d896:	330a      	adds	r3, #10
 800d898:	6323      	str	r3, [r4, #48]	; 0x30
 800d89a:	e5ff      	b.n	800d49c <d_type+0x138>
 800d89c:	788b      	ldrb	r3, [r1, #2]
 800d89e:	2b5f      	cmp	r3, #95	; 0x5f
 800d8a0:	f000 80fd 	beq.w	800da9e <d_type+0x73a>
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f7f9 fae5 	bl	8006e74 <d_number_component>
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	2d00      	cmp	r5, #0
 800d8ae:	f43f aef7 	beq.w	800d6a0 <d_type+0x33c>
 800d8b2:	68e3      	ldr	r3, [r4, #12]
 800d8b4:	781a      	ldrb	r2, [r3, #0]
 800d8b6:	2a5f      	cmp	r2, #95	; 0x5f
 800d8b8:	f47f ae46 	bne.w	800d548 <d_type+0x1e4>
 800d8bc:	3301      	adds	r3, #1
 800d8be:	60e3      	str	r3, [r4, #12]
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7ff fd4f 	bl	800d364 <d_type>
 800d8c6:	462a      	mov	r2, r5
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	212d      	movs	r1, #45	; 0x2d
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	f7f9 f963 	bl	8006b98 <d_make_comp>
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	e6e4      	b.n	800d6a0 <d_type+0x33c>
 800d8d6:	6963      	ldr	r3, [r4, #20]
 800d8d8:	69a2      	ldr	r2, [r4, #24]
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	f280 8082 	bge.w	800d9e4 <d_type+0x680>
 800d8e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d8e4:	6922      	ldr	r2, [r4, #16]
 800d8e6:	0089      	lsls	r1, r1, #2
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	1855      	adds	r5, r2, r1
 800d8ec:	6163      	str	r3, [r4, #20]
 800d8ee:	d079      	beq.n	800d9e4 <d_type+0x680>
 800d8f0:	4b57      	ldr	r3, [pc, #348]	; (800da50 <d_type+0x6ec>)
 800d8f2:	e78a      	b.n	800d80a <d_type+0x4a6>
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f7ff fd35 	bl	800d364 <d_type>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	2149      	movs	r1, #73	; 0x49
 800d900:	4620      	mov	r0, r4
 800d902:	f7f9 f949 	bl	8006b98 <d_make_comp>
 800d906:	4605      	mov	r5, r0
 800d908:	9001      	str	r0, [sp, #4]
 800d90a:	e5e3      	b.n	800d4d4 <d_type+0x170>
 800d90c:	6963      	ldr	r3, [r4, #20]
 800d90e:	69a2      	ldr	r2, [r4, #24]
 800d910:	4293      	cmp	r3, r2
 800d912:	da67      	bge.n	800d9e4 <d_type+0x680>
 800d914:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d918:	6922      	ldr	r2, [r4, #16]
 800d91a:	0089      	lsls	r1, r1, #2
 800d91c:	3301      	adds	r3, #1
 800d91e:	1855      	adds	r5, r2, r1
 800d920:	6163      	str	r3, [r4, #20]
 800d922:	d05f      	beq.n	800d9e4 <d_type+0x680>
 800d924:	4b4b      	ldr	r3, [pc, #300]	; (800da54 <d_type+0x6f0>)
 800d926:	2027      	movs	r0, #39	; 0x27
 800d928:	5450      	strb	r0, [r2, r1]
 800d92a:	606b      	str	r3, [r5, #4]
 800d92c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d92e:	3311      	adds	r3, #17
 800d930:	6323      	str	r3, [r4, #48]	; 0x30
 800d932:	e5b3      	b.n	800d49c <d_type+0x138>
 800d934:	6963      	ldr	r3, [r4, #20]
 800d936:	69a2      	ldr	r2, [r4, #24]
 800d938:	4293      	cmp	r3, r2
 800d93a:	da53      	bge.n	800d9e4 <d_type+0x680>
 800d93c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d940:	6922      	ldr	r2, [r4, #16]
 800d942:	0089      	lsls	r1, r1, #2
 800d944:	3301      	adds	r3, #1
 800d946:	1855      	adds	r5, r2, r1
 800d948:	6163      	str	r3, [r4, #20]
 800d94a:	d04b      	beq.n	800d9e4 <d_type+0x680>
 800d94c:	4b42      	ldr	r3, [pc, #264]	; (800da58 <d_type+0x6f4>)
 800d94e:	e788      	b.n	800d862 <d_type+0x4fe>
 800d950:	6963      	ldr	r3, [r4, #20]
 800d952:	69a2      	ldr	r2, [r4, #24]
 800d954:	4293      	cmp	r3, r2
 800d956:	f6bf ada0 	bge.w	800d49a <d_type+0x136>
 800d95a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d95e:	6921      	ldr	r1, [r4, #16]
 800d960:	3301      	adds	r3, #1
 800d962:	0092      	lsls	r2, r2, #2
 800d964:	6163      	str	r3, [r4, #20]
 800d966:	188b      	adds	r3, r1, r2
 800d968:	f43f ad97 	beq.w	800d49a <d_type+0x136>
 800d96c:	4c3b      	ldr	r4, [pc, #236]	; (800da5c <d_type+0x6f8>)
 800d96e:	2500      	movs	r5, #0
 800d970:	2004      	movs	r0, #4
 800d972:	548d      	strb	r5, [r1, r2]
 800d974:	461d      	mov	r5, r3
 800d976:	605c      	str	r4, [r3, #4]
 800d978:	6098      	str	r0, [r3, #8]
 800d97a:	e58f      	b.n	800d49c <d_type+0x138>
 800d97c:	6963      	ldr	r3, [r4, #20]
 800d97e:	69a2      	ldr	r2, [r4, #24]
 800d980:	4293      	cmp	r3, r2
 800d982:	f280 8083 	bge.w	800da8c <d_type+0x728>
 800d986:	6925      	ldr	r5, [r4, #16]
 800d988:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d98c:	0080      	lsls	r0, r0, #2
 800d98e:	3301      	adds	r3, #1
 800d990:	182a      	adds	r2, r5, r0
 800d992:	262c      	movs	r6, #44	; 0x2c
 800d994:	6163      	str	r3, [r4, #20]
 800d996:	9201      	str	r2, [sp, #4]
 800d998:	542e      	strb	r6, [r5, r0]
 800d99a:	788b      	ldrb	r3, [r1, #2]
 800d99c:	3b30      	subs	r3, #48	; 0x30
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b09      	cmp	r3, #9
 800d9a2:	bf94      	ite	ls
 800d9a4:	2301      	movls	r3, #1
 800d9a6:	2300      	movhi	r3, #0
 800d9a8:	8113      	strh	r3, [r2, #8]
 800d9aa:	d972      	bls.n	800da92 <d_type+0x72e>
 800d9ac:	4615      	mov	r5, r2
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	f7ff fcd8 	bl	800d364 <d_type>
 800d9b4:	9b01      	ldr	r3, [sp, #4]
 800d9b6:	6068      	str	r0, [r5, #4]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f43f ad6d 	beq.w	800d49a <d_type+0x136>
 800d9c0:	f104 000c 	add.w	r0, r4, #12
 800d9c4:	f7f9 fa2e 	bl	8006e24 <d_number.isra.0>
 800d9c8:	68e2      	ldr	r2, [r4, #12]
 800d9ca:	7813      	ldrb	r3, [r2, #0]
 800d9cc:	b13b      	cbz	r3, 800d9de <d_type+0x67a>
 800d9ce:	1c53      	adds	r3, r2, #1
 800d9d0:	60e3      	str	r3, [r4, #12]
 800d9d2:	7813      	ldrb	r3, [r2, #0]
 800d9d4:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 800d9d8:	fab3 f383 	clz	r3, r3
 800d9dc:	095b      	lsrs	r3, r3, #5
 800d9de:	9d01      	ldr	r5, [sp, #4]
 800d9e0:	816b      	strh	r3, [r5, #10]
 800d9e2:	e55b      	b.n	800d49c <d_type+0x138>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	9301      	str	r3, [sp, #4]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	deff      	udf	#255	; 0xff
 800d9ec:	2500      	movs	r5, #0
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	60e0      	str	r0, [r4, #12]
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f7ff fcb6 	bl	800d364 <d_type>
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	212a      	movs	r1, #42	; 0x2a
 800d9fe:	4620      	mov	r0, r4
 800da00:	f7f9 f8ca 	bl	8006b98 <d_make_comp>
 800da04:	4605      	mov	r5, r0
 800da06:	e64b      	b.n	800d6a0 <d_type+0x33c>
 800da08:	2301      	movs	r3, #1
 800da0a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800da0c:	4620      	mov	r0, r4
 800da0e:	6363      	str	r3, [r4, #52]	; 0x34
 800da10:	f7ff fad6 	bl	800cfc0 <d_expression_1>
 800da14:	6365      	str	r5, [r4, #52]	; 0x34
 800da16:	4605      	mov	r5, r0
 800da18:	2800      	cmp	r0, #0
 800da1a:	f43f ad95 	beq.w	800d548 <d_type+0x1e4>
 800da1e:	68e3      	ldr	r3, [r4, #12]
 800da20:	e58e      	b.n	800d540 <d_type+0x1dc>
 800da22:	4620      	mov	r0, r4
 800da24:	f000 fa90 	bl	800df48 <d_name>
 800da28:	4605      	mov	r5, r0
 800da2a:	9001      	str	r0, [sp, #4]
 800da2c:	2800      	cmp	r0, #0
 800da2e:	f43f ad34 	beq.w	800d49a <d_type+0x136>
 800da32:	7803      	ldrb	r3, [r0, #0]
 800da34:	2b18      	cmp	r3, #24
 800da36:	f47f ad4f 	bne.w	800d4d8 <d_type+0x174>
 800da3a:	e52f      	b.n	800d49c <d_type+0x138>
 800da3c:	08014980 	.word	0x08014980
 800da40:	08014cb0 	.word	0x08014cb0
 800da44:	08014c88 	.word	0x08014c88
 800da48:	08014c4c 	.word	0x08014c4c
 800da4c:	08014c74 	.word	0x08014c74
 800da50:	08014c9c 	.word	0x08014c9c
 800da54:	08014cc4 	.word	0x08014cc4
 800da58:	08014c60 	.word	0x08014c60
 800da5c:	08016240 	.word	0x08016240
 800da60:	4620      	mov	r0, r4
 800da62:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800da66:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800da6a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800da6c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800da6e:	f7fc ff93 	bl	800a998 <d_template_args>
 800da72:	68e2      	ldr	r2, [r4, #12]
 800da74:	7812      	ldrb	r2, [r2, #0]
 800da76:	2a49      	cmp	r2, #73	; 0x49
 800da78:	d01c      	beq.n	800dab4 <d_type+0x750>
 800da7a:	6325      	str	r5, [r4, #48]	; 0x30
 800da7c:	60e6      	str	r6, [r4, #12]
 800da7e:	f8c4 9014 	str.w	r9, [r4, #20]
 800da82:	f8c4 8020 	str.w	r8, [r4, #32]
 800da86:	62a7      	str	r7, [r4, #40]	; 0x28
 800da88:	9d01      	ldr	r5, [sp, #4]
 800da8a:	e523      	b.n	800d4d4 <d_type+0x170>
 800da8c:	2300      	movs	r3, #0
 800da8e:	701b      	strb	r3, [r3, #0]
 800da90:	deff      	udf	#255	; 0xff
 800da92:	f104 000c 	add.w	r0, r4, #12
 800da96:	f7f9 f9c5 	bl	8006e24 <d_number.isra.0>
 800da9a:	9d01      	ldr	r5, [sp, #4]
 800da9c:	e787      	b.n	800d9ae <d_type+0x64a>
 800da9e:	3103      	adds	r1, #3
 800daa0:	2301      	movs	r3, #1
 800daa2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800daa4:	60e1      	str	r1, [r4, #12]
 800daa6:	6363      	str	r3, [r4, #52]	; 0x34
 800daa8:	4620      	mov	r0, r4
 800daaa:	f7ff fa89 	bl	800cfc0 <d_expression_1>
 800daae:	6366      	str	r6, [r4, #52]	; 0x34
 800dab0:	4605      	mov	r5, r0
 800dab2:	e6fb      	b.n	800d8ac <d_type+0x548>
 800dab4:	9b01      	ldr	r3, [sp, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f43f acef 	beq.w	800d49a <d_type+0x136>
 800dabc:	6a22      	ldr	r2, [r4, #32]
 800dabe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dac0:	428a      	cmp	r2, r1
 800dac2:	f6bf acea 	bge.w	800d49a <d_type+0x136>
 800dac6:	69e5      	ldr	r5, [r4, #28]
 800dac8:	1c51      	adds	r1, r2, #1
 800daca:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800dace:	9a01      	ldr	r2, [sp, #4]
 800dad0:	4603      	mov	r3, r0
 800dad2:	6221      	str	r1, [r4, #32]
 800dad4:	e62b      	b.n	800d72e <d_type+0x3ca>
 800dad6:	4618      	mov	r0, r3
 800dad8:	e789      	b.n	800d9ee <d_type+0x68a>
 800dada:	bf00      	nop

0800dadc <d_operator_name>:
 800dadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae0:	68c3      	ldr	r3, [r0, #12]
 800dae2:	4684      	mov	ip, r0
 800dae4:	781f      	ldrb	r7, [r3, #0]
 800dae6:	b317      	cbz	r7, 800db2e <d_operator_name+0x52>
 800dae8:	1c5a      	adds	r2, r3, #1
 800daea:	60c2      	str	r2, [r0, #12]
 800daec:	785a      	ldrb	r2, [r3, #1]
 800daee:	781f      	ldrb	r7, [r3, #0]
 800daf0:	2a00      	cmp	r2, #0
 800daf2:	d059      	beq.n	800dba8 <d_operator_name+0xcc>
 800daf4:	1c9a      	adds	r2, r3, #2
 800daf6:	60c2      	str	r2, [r0, #12]
 800daf8:	2f76      	cmp	r7, #118	; 0x76
 800dafa:	4604      	mov	r4, r0
 800dafc:	f893 e001 	ldrb.w	lr, [r3, #1]
 800db00:	d043      	beq.n	800db8a <d_operator_name+0xae>
 800db02:	2f63      	cmp	r7, #99	; 0x63
 800db04:	d114      	bne.n	800db30 <d_operator_name+0x54>
 800db06:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 800db0a:	d111      	bne.n	800db30 <d_operator_name+0x54>
 800db0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800db0e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800db10:	fab3 f383 	clz	r3, r3
 800db14:	095b      	lsrs	r3, r3, #5
 800db16:	6383      	str	r3, [r0, #56]	; 0x38
 800db18:	f7ff fc24 	bl	800d364 <d_type>
 800db1c:	63a5      	str	r5, [r4, #56]	; 0x38
 800db1e:	4602      	mov	r2, r0
 800db20:	2300      	movs	r3, #0
 800db22:	4620      	mov	r0, r4
 800db24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db28:	2133      	movs	r1, #51	; 0x33
 800db2a:	f7f9 b835 	b.w	8006b98 <d_make_comp>
 800db2e:	46be      	mov	lr, r7
 800db30:	4d28      	ldr	r5, [pc, #160]	; (800dbd4 <d_operator_name+0xf8>)
 800db32:	203d      	movs	r0, #61	; 0x3d
 800db34:	2200      	movs	r2, #0
 800db36:	e004      	b.n	800db42 <d_operator_name+0x66>
 800db38:	bf8c      	ite	hi
 800db3a:	4618      	movhi	r0, r3
 800db3c:	1c5a      	addls	r2, r3, #1
 800db3e:	4282      	cmp	r2, r0
 800db40:	d02f      	beq.n	800dba2 <d_operator_name+0xc6>
 800db42:	1a83      	subs	r3, r0, r2
 800db44:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800db48:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800db4c:	0119      	lsls	r1, r3, #4
 800db4e:	586c      	ldr	r4, [r5, r1]
 800db50:	4429      	add	r1, r5
 800db52:	7826      	ldrb	r6, [r4, #0]
 800db54:	42be      	cmp	r6, r7
 800db56:	d1ef      	bne.n	800db38 <d_operator_name+0x5c>
 800db58:	7864      	ldrb	r4, [r4, #1]
 800db5a:	4574      	cmp	r4, lr
 800db5c:	d1ec      	bne.n	800db38 <d_operator_name+0x5c>
 800db5e:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800db62:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800db66:	4293      	cmp	r3, r2
 800db68:	da1b      	bge.n	800dba2 <d_operator_name+0xc6>
 800db6a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800db6e:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800db72:	3301      	adds	r3, #1
 800db74:	0092      	lsls	r2, r2, #2
 800db76:	f8cc 3014 	str.w	r3, [ip, #20]
 800db7a:	1883      	adds	r3, r0, r2
 800db7c:	d027      	beq.n	800dbce <d_operator_name+0xf2>
 800db7e:	2431      	movs	r4, #49	; 0x31
 800db80:	5484      	strb	r4, [r0, r2]
 800db82:	6059      	str	r1, [r3, #4]
 800db84:	4618      	mov	r0, r3
 800db86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db8a:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 800db8e:	b2eb      	uxtb	r3, r5
 800db90:	2b09      	cmp	r3, #9
 800db92:	d8cd      	bhi.n	800db30 <d_operator_name+0x54>
 800db94:	f7f9 f9c4 	bl	8006f20 <d_source_name>
 800db98:	6963      	ldr	r3, [r4, #20]
 800db9a:	69a2      	ldr	r2, [r4, #24]
 800db9c:	4601      	mov	r1, r0
 800db9e:	4293      	cmp	r3, r2
 800dba0:	db04      	blt.n	800dbac <d_operator_name+0xd0>
 800dba2:	2000      	movs	r0, #0
 800dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba8:	4696      	mov	lr, r2
 800dbaa:	e7c1      	b.n	800db30 <d_operator_name+0x54>
 800dbac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dbb0:	6920      	ldr	r0, [r4, #16]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	0092      	lsls	r2, r2, #2
 800dbb6:	6163      	str	r3, [r4, #20]
 800dbb8:	1883      	adds	r3, r0, r2
 800dbba:	d0f2      	beq.n	800dba2 <d_operator_name+0xc6>
 800dbbc:	2900      	cmp	r1, #0
 800dbbe:	d0f0      	beq.n	800dba2 <d_operator_name+0xc6>
 800dbc0:	2432      	movs	r4, #50	; 0x32
 800dbc2:	5484      	strb	r4, [r0, r2]
 800dbc4:	605d      	str	r5, [r3, #4]
 800dbc6:	6099      	str	r1, [r3, #8]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd4:	08014cd8 	.word	0x08014cd8

0800dbd8 <d_parmlist>:
 800dbd8:	b530      	push	{r4, r5, lr}
 800dbda:	68c2      	ldr	r2, [r0, #12]
 800dbdc:	b083      	sub	sp, #12
 800dbde:	7813      	ldrb	r3, [r2, #0]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	9101      	str	r1, [sp, #4]
 800dbe4:	b343      	cbz	r3, 800dc38 <d_parmlist+0x60>
 800dbe6:	2b45      	cmp	r3, #69	; 0x45
 800dbe8:	d026      	beq.n	800dc38 <d_parmlist+0x60>
 800dbea:	2b2e      	cmp	r3, #46	; 0x2e
 800dbec:	d024      	beq.n	800dc38 <d_parmlist+0x60>
 800dbee:	4604      	mov	r4, r0
 800dbf0:	ad01      	add	r5, sp, #4
 800dbf2:	e016      	b.n	800dc22 <d_parmlist+0x4a>
 800dbf4:	2b4f      	cmp	r3, #79	; 0x4f
 800dbf6:	d016      	beq.n	800dc26 <d_parmlist+0x4e>
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f7ff fbb3 	bl	800d364 <d_type>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	212e      	movs	r1, #46	; 0x2e
 800dc02:	b1c8      	cbz	r0, 800dc38 <d_parmlist+0x60>
 800dc04:	4602      	mov	r2, r0
 800dc06:	4620      	mov	r0, r4
 800dc08:	f7f8 ffc6 	bl	8006b98 <d_make_comp>
 800dc0c:	6028      	str	r0, [r5, #0]
 800dc0e:	b198      	cbz	r0, 800dc38 <d_parmlist+0x60>
 800dc10:	68e2      	ldr	r2, [r4, #12]
 800dc12:	f100 0508 	add.w	r5, r0, #8
 800dc16:	7813      	ldrb	r3, [r2, #0]
 800dc18:	b143      	cbz	r3, 800dc2c <d_parmlist+0x54>
 800dc1a:	2b45      	cmp	r3, #69	; 0x45
 800dc1c:	d006      	beq.n	800dc2c <d_parmlist+0x54>
 800dc1e:	2b2e      	cmp	r3, #46	; 0x2e
 800dc20:	d004      	beq.n	800dc2c <d_parmlist+0x54>
 800dc22:	2b52      	cmp	r3, #82	; 0x52
 800dc24:	d1e6      	bne.n	800dbf4 <d_parmlist+0x1c>
 800dc26:	7853      	ldrb	r3, [r2, #1]
 800dc28:	2b45      	cmp	r3, #69	; 0x45
 800dc2a:	d1e5      	bne.n	800dbf8 <d_parmlist+0x20>
 800dc2c:	9801      	ldr	r0, [sp, #4]
 800dc2e:	b118      	cbz	r0, 800dc38 <d_parmlist+0x60>
 800dc30:	6883      	ldr	r3, [r0, #8]
 800dc32:	b123      	cbz	r3, 800dc3e <d_parmlist+0x66>
 800dc34:	b003      	add	sp, #12
 800dc36:	bd30      	pop	{r4, r5, pc}
 800dc38:	2000      	movs	r0, #0
 800dc3a:	b003      	add	sp, #12
 800dc3c:	bd30      	pop	{r4, r5, pc}
 800dc3e:	6842      	ldr	r2, [r0, #4]
 800dc40:	7811      	ldrb	r1, [r2, #0]
 800dc42:	2927      	cmp	r1, #39	; 0x27
 800dc44:	d1f6      	bne.n	800dc34 <d_parmlist+0x5c>
 800dc46:	6852      	ldr	r2, [r2, #4]
 800dc48:	7c11      	ldrb	r1, [r2, #16]
 800dc4a:	2909      	cmp	r1, #9
 800dc4c:	d1f2      	bne.n	800dc34 <d_parmlist+0x5c>
 800dc4e:	6851      	ldr	r1, [r2, #4]
 800dc50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dc52:	1a52      	subs	r2, r2, r1
 800dc54:	6322      	str	r2, [r4, #48]	; 0x30
 800dc56:	6043      	str	r3, [r0, #4]
 800dc58:	e7ec      	b.n	800dc34 <d_parmlist+0x5c>
 800dc5a:	bf00      	nop

0800dc5c <d_unqualified_name>:
 800dc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5e:	68c2      	ldr	r2, [r0, #12]
 800dc60:	4604      	mov	r4, r0
 800dc62:	7813      	ldrb	r3, [r2, #0]
 800dc64:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dc68:	2909      	cmp	r1, #9
 800dc6a:	d920      	bls.n	800dcae <d_unqualified_name+0x52>
 800dc6c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 800dc70:	2919      	cmp	r1, #25
 800dc72:	d933      	bls.n	800dcdc <d_unqualified_name+0x80>
 800dc74:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 800dc78:	2901      	cmp	r1, #1
 800dc7a:	d921      	bls.n	800dcc0 <d_unqualified_name+0x64>
 800dc7c:	2b4c      	cmp	r3, #76	; 0x4c
 800dc7e:	f000 8089 	beq.w	800dd94 <d_unqualified_name+0x138>
 800dc82:	2b55      	cmp	r3, #85	; 0x55
 800dc84:	d128      	bne.n	800dcd8 <d_unqualified_name+0x7c>
 800dc86:	7853      	ldrb	r3, [r2, #1]
 800dc88:	2b6c      	cmp	r3, #108	; 0x6c
 800dc8a:	d032      	beq.n	800dcf2 <d_unqualified_name+0x96>
 800dc8c:	2b74      	cmp	r3, #116	; 0x74
 800dc8e:	d123      	bne.n	800dcd8 <d_unqualified_name+0x7c>
 800dc90:	1c53      	adds	r3, r2, #1
 800dc92:	60c3      	str	r3, [r0, #12]
 800dc94:	7853      	ldrb	r3, [r2, #1]
 800dc96:	2b74      	cmp	r3, #116	; 0x74
 800dc98:	d05b      	beq.n	800dd52 <d_unqualified_name+0xf6>
 800dc9a:	2b42      	cmp	r3, #66	; 0x42
 800dc9c:	f04f 0500 	mov.w	r5, #0
 800dca0:	d10c      	bne.n	800dcbc <d_unqualified_name+0x60>
 800dca2:	4629      	mov	r1, r5
 800dca4:	4620      	mov	r0, r4
 800dca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dcaa:	f7f9 b997 	b.w	8006fdc <d_abi_tags>
 800dcae:	f7f9 f937 	bl	8006f20 <d_source_name>
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	68e3      	ldr	r3, [r4, #12]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	2b42      	cmp	r3, #66	; 0x42
 800dcba:	d0f2      	beq.n	800dca2 <d_unqualified_name+0x46>
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcc0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dcc2:	b121      	cbz	r1, 800dcce <d_unqualified_name+0x72>
 800dcc4:	7808      	ldrb	r0, [r1, #0]
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d078      	beq.n	800ddbc <d_unqualified_name+0x160>
 800dcca:	2818      	cmp	r0, #24
 800dccc:	d076      	beq.n	800ddbc <d_unqualified_name+0x160>
 800dcce:	2b43      	cmp	r3, #67	; 0x43
 800dcd0:	f000 80cd 	beq.w	800de6e <d_unqualified_name+0x212>
 800dcd4:	2b44      	cmp	r3, #68	; 0x44
 800dcd6:	d07b      	beq.n	800ddd0 <d_unqualified_name+0x174>
 800dcd8:	2000      	movs	r0, #0
 800dcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcdc:	f7ff fefe 	bl	800dadc <d_operator_name>
 800dce0:	4605      	mov	r5, r0
 800dce2:	b118      	cbz	r0, 800dcec <d_unqualified_name+0x90>
 800dce4:	7803      	ldrb	r3, [r0, #0]
 800dce6:	2b31      	cmp	r3, #49	; 0x31
 800dce8:	f000 80a4 	beq.w	800de34 <d_unqualified_name+0x1d8>
 800dcec:	68e3      	ldr	r3, [r4, #12]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	e7e2      	b.n	800dcb8 <d_unqualified_name+0x5c>
 800dcf2:	1c53      	adds	r3, r2, #1
 800dcf4:	60c3      	str	r3, [r0, #12]
 800dcf6:	7853      	ldrb	r3, [r2, #1]
 800dcf8:	2b6c      	cmp	r3, #108	; 0x6c
 800dcfa:	d1ce      	bne.n	800dc9a <d_unqualified_name+0x3e>
 800dcfc:	3202      	adds	r2, #2
 800dcfe:	60c2      	str	r2, [r0, #12]
 800dd00:	f7ff ff6a 	bl	800dbd8 <d_parmlist>
 800dd04:	4606      	mov	r6, r0
 800dd06:	2800      	cmp	r0, #0
 800dd08:	f000 80da 	beq.w	800dec0 <d_unqualified_name+0x264>
 800dd0c:	68e2      	ldr	r2, [r4, #12]
 800dd0e:	7813      	ldrb	r3, [r2, #0]
 800dd10:	2b45      	cmp	r3, #69	; 0x45
 800dd12:	d1c2      	bne.n	800dc9a <d_unqualified_name+0x3e>
 800dd14:	3201      	adds	r2, #1
 800dd16:	60e2      	str	r2, [r4, #12]
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f7f9 f8c7 	bl	8006eac <d_compact_number>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	db13      	blt.n	800dd4a <d_unqualified_name+0xee>
 800dd22:	6963      	ldr	r3, [r4, #20]
 800dd24:	69a2      	ldr	r2, [r4, #24]
 800dd26:	4293      	cmp	r3, r2
 800dd28:	da0f      	bge.n	800dd4a <d_unqualified_name+0xee>
 800dd2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dd2e:	6921      	ldr	r1, [r4, #16]
 800dd30:	0092      	lsls	r2, r2, #2
 800dd32:	3301      	adds	r3, #1
 800dd34:	188d      	adds	r5, r1, r2
 800dd36:	6163      	str	r3, [r4, #20]
 800dd38:	d007      	beq.n	800dd4a <d_unqualified_name+0xee>
 800dd3a:	2344      	movs	r3, #68	; 0x44
 800dd3c:	548b      	strb	r3, [r1, r2]
 800dd3e:	606e      	str	r6, [r5, #4]
 800dd40:	60a8      	str	r0, [r5, #8]
 800dd42:	6a23      	ldr	r3, [r4, #32]
 800dd44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dd46:	4293      	cmp	r3, r2
 800dd48:	db1c      	blt.n	800dd84 <d_unqualified_name+0x128>
 800dd4a:	68e3      	ldr	r3, [r4, #12]
 800dd4c:	2500      	movs	r5, #0
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	e7b2      	b.n	800dcb8 <d_unqualified_name+0x5c>
 800dd52:	3202      	adds	r2, #2
 800dd54:	60c2      	str	r2, [r0, #12]
 800dd56:	f7f9 f8a9 	bl	8006eac <d_compact_number>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	dbf5      	blt.n	800dd4a <d_unqualified_name+0xee>
 800dd5e:	6963      	ldr	r3, [r4, #20]
 800dd60:	69a2      	ldr	r2, [r4, #24]
 800dd62:	4293      	cmp	r3, r2
 800dd64:	daf1      	bge.n	800dd4a <d_unqualified_name+0xee>
 800dd66:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dd6a:	6921      	ldr	r1, [r4, #16]
 800dd6c:	0092      	lsls	r2, r2, #2
 800dd6e:	3301      	adds	r3, #1
 800dd70:	188d      	adds	r5, r1, r2
 800dd72:	6163      	str	r3, [r4, #20]
 800dd74:	d0e9      	beq.n	800dd4a <d_unqualified_name+0xee>
 800dd76:	2346      	movs	r3, #70	; 0x46
 800dd78:	548b      	strb	r3, [r1, r2]
 800dd7a:	6068      	str	r0, [r5, #4]
 800dd7c:	6a23      	ldr	r3, [r4, #32]
 800dd7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dd80:	4293      	cmp	r3, r2
 800dd82:	dae2      	bge.n	800dd4a <d_unqualified_name+0xee>
 800dd84:	69e1      	ldr	r1, [r4, #28]
 800dd86:	1c5a      	adds	r2, r3, #1
 800dd88:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800dd8c:	68e3      	ldr	r3, [r4, #12]
 800dd8e:	6222      	str	r2, [r4, #32]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	e791      	b.n	800dcb8 <d_unqualified_name+0x5c>
 800dd94:	3201      	adds	r2, #1
 800dd96:	60c2      	str	r2, [r0, #12]
 800dd98:	f7f9 f8c2 	bl	8006f20 <d_source_name>
 800dd9c:	4605      	mov	r5, r0
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d09a      	beq.n	800dcd8 <d_unqualified_name+0x7c>
 800dda2:	68e2      	ldr	r2, [r4, #12]
 800dda4:	7813      	ldrb	r3, [r2, #0]
 800dda6:	2b5f      	cmp	r3, #95	; 0x5f
 800dda8:	d186      	bne.n	800dcb8 <d_unqualified_name+0x5c>
 800ddaa:	4620      	mov	r0, r4
 800ddac:	3201      	adds	r2, #1
 800ddae:	f840 2f0c 	str.w	r2, [r0, #12]!
 800ddb2:	f7f9 f837 	bl	8006e24 <d_number.isra.0>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	da98      	bge.n	800dcec <d_unqualified_name+0x90>
 800ddba:	e78d      	b.n	800dcd8 <d_unqualified_name+0x7c>
 800ddbc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ddbe:	688b      	ldr	r3, [r1, #8]
 800ddc0:	4403      	add	r3, r0
 800ddc2:	6323      	str	r3, [r4, #48]	; 0x30
 800ddc4:	7813      	ldrb	r3, [r2, #0]
 800ddc6:	2b43      	cmp	r3, #67	; 0x43
 800ddc8:	d051      	beq.n	800de6e <d_unqualified_name+0x212>
 800ddca:	2b44      	cmp	r3, #68	; 0x44
 800ddcc:	f47f af65 	bne.w	800dc9a <d_unqualified_name+0x3e>
 800ddd0:	7853      	ldrb	r3, [r2, #1]
 800ddd2:	3b30      	subs	r3, #48	; 0x30
 800ddd4:	2b05      	cmp	r3, #5
 800ddd6:	f63f af7f 	bhi.w	800dcd8 <d_unqualified_name+0x7c>
 800ddda:	a001      	add	r0, pc, #4	; (adr r0, 800dde0 <d_unqualified_name+0x184>)
 800dddc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dde0:	0800de29 	.word	0x0800de29
 800dde4:	0800ddf9 	.word	0x0800ddf9
 800dde8:	0800de25 	.word	0x0800de25
 800ddec:	0800dcd9 	.word	0x0800dcd9
 800ddf0:	0800de31 	.word	0x0800de31
 800ddf4:	0800de2d 	.word	0x0800de2d
 800ddf8:	2702      	movs	r7, #2
 800ddfa:	6963      	ldr	r3, [r4, #20]
 800ddfc:	69a0      	ldr	r0, [r4, #24]
 800ddfe:	1c95      	adds	r5, r2, #2
 800de00:	4283      	cmp	r3, r0
 800de02:	60e5      	str	r5, [r4, #12]
 800de04:	da30      	bge.n	800de68 <d_unqualified_name+0x20c>
 800de06:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800de0a:	6926      	ldr	r6, [r4, #16]
 800de0c:	0080      	lsls	r0, r0, #2
 800de0e:	3301      	adds	r3, #1
 800de10:	1835      	adds	r5, r6, r0
 800de12:	6163      	str	r3, [r4, #20]
 800de14:	d028      	beq.n	800de68 <d_unqualified_name+0x20c>
 800de16:	b339      	cbz	r1, 800de68 <d_unqualified_name+0x20c>
 800de18:	2308      	movs	r3, #8
 800de1a:	5433      	strb	r3, [r6, r0]
 800de1c:	712f      	strb	r7, [r5, #4]
 800de1e:	60a9      	str	r1, [r5, #8]
 800de20:	7893      	ldrb	r3, [r2, #2]
 800de22:	e749      	b.n	800dcb8 <d_unqualified_name+0x5c>
 800de24:	2703      	movs	r7, #3
 800de26:	e7e8      	b.n	800ddfa <d_unqualified_name+0x19e>
 800de28:	2701      	movs	r7, #1
 800de2a:	e7e6      	b.n	800ddfa <d_unqualified_name+0x19e>
 800de2c:	2705      	movs	r7, #5
 800de2e:	e7e4      	b.n	800ddfa <d_unqualified_name+0x19e>
 800de30:	2704      	movs	r7, #4
 800de32:	e7e2      	b.n	800ddfa <d_unqualified_name+0x19e>
 800de34:	6842      	ldr	r2, [r0, #4]
 800de36:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800de38:	6893      	ldr	r3, [r2, #8]
 800de3a:	6810      	ldr	r0, [r2, #0]
 800de3c:	440b      	add	r3, r1
 800de3e:	3307      	adds	r3, #7
 800de40:	6323      	str	r3, [r4, #48]	; 0x30
 800de42:	4921      	ldr	r1, [pc, #132]	; (800dec8 <d_unqualified_name+0x26c>)
 800de44:	f001 f800 	bl	800ee48 <strcmp>
 800de48:	2800      	cmp	r0, #0
 800de4a:	f47f af4f 	bne.w	800dcec <d_unqualified_name+0x90>
 800de4e:	4620      	mov	r0, r4
 800de50:	f7f9 f866 	bl	8006f20 <d_source_name>
 800de54:	462a      	mov	r2, r5
 800de56:	4603      	mov	r3, r0
 800de58:	2135      	movs	r1, #53	; 0x35
 800de5a:	4620      	mov	r0, r4
 800de5c:	f7f8 fe9c 	bl	8006b98 <d_make_comp>
 800de60:	68e3      	ldr	r3, [r4, #12]
 800de62:	4605      	mov	r5, r0
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	e727      	b.n	800dcb8 <d_unqualified_name+0x5c>
 800de68:	7893      	ldrb	r3, [r2, #2]
 800de6a:	2500      	movs	r5, #0
 800de6c:	e724      	b.n	800dcb8 <d_unqualified_name+0x5c>
 800de6e:	7853      	ldrb	r3, [r2, #1]
 800de70:	3b31      	subs	r3, #49	; 0x31
 800de72:	2b04      	cmp	r3, #4
 800de74:	f63f af30 	bhi.w	800dcd8 <d_unqualified_name+0x7c>
 800de78:	e8df f003 	tbb	[pc, r3]
 800de7c:	1e20031a 	.word	0x1e20031a
 800de80:	1c          	.byte	0x1c
 800de81:	00          	.byte	0x00
 800de82:	2702      	movs	r7, #2
 800de84:	6963      	ldr	r3, [r4, #20]
 800de86:	69a0      	ldr	r0, [r4, #24]
 800de88:	1c95      	adds	r5, r2, #2
 800de8a:	4283      	cmp	r3, r0
 800de8c:	60e5      	str	r5, [r4, #12]
 800de8e:	daeb      	bge.n	800de68 <d_unqualified_name+0x20c>
 800de90:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800de94:	6926      	ldr	r6, [r4, #16]
 800de96:	0080      	lsls	r0, r0, #2
 800de98:	3301      	adds	r3, #1
 800de9a:	1835      	adds	r5, r6, r0
 800de9c:	6163      	str	r3, [r4, #20]
 800de9e:	d0e3      	beq.n	800de68 <d_unqualified_name+0x20c>
 800dea0:	2900      	cmp	r1, #0
 800dea2:	d0e1      	beq.n	800de68 <d_unqualified_name+0x20c>
 800dea4:	2307      	movs	r3, #7
 800dea6:	5433      	strb	r3, [r6, r0]
 800dea8:	712f      	strb	r7, [r5, #4]
 800deaa:	60a9      	str	r1, [r5, #8]
 800deac:	7893      	ldrb	r3, [r2, #2]
 800deae:	e703      	b.n	800dcb8 <d_unqualified_name+0x5c>
 800deb0:	2701      	movs	r7, #1
 800deb2:	e7e7      	b.n	800de84 <d_unqualified_name+0x228>
 800deb4:	2705      	movs	r7, #5
 800deb6:	e7e5      	b.n	800de84 <d_unqualified_name+0x228>
 800deb8:	2704      	movs	r7, #4
 800deba:	e7e3      	b.n	800de84 <d_unqualified_name+0x228>
 800debc:	2703      	movs	r7, #3
 800debe:	e7e1      	b.n	800de84 <d_unqualified_name+0x228>
 800dec0:	68e3      	ldr	r3, [r4, #12]
 800dec2:	4605      	mov	r5, r0
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	e6f7      	b.n	800dcb8 <d_unqualified_name+0x5c>
 800dec8:	08016248 	.word	0x08016248

0800decc <d_bare_function_type>:
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	68c3      	ldr	r3, [r0, #12]
 800ded0:	4604      	mov	r4, r0
 800ded2:	781a      	ldrb	r2, [r3, #0]
 800ded4:	2a4a      	cmp	r2, #74	; 0x4a
 800ded6:	d00d      	beq.n	800def4 <d_bare_function_type+0x28>
 800ded8:	b971      	cbnz	r1, 800def8 <d_bare_function_type+0x2c>
 800deda:	460d      	mov	r5, r1
 800dedc:	4620      	mov	r0, r4
 800dede:	f7ff fe7b 	bl	800dbd8 <d_parmlist>
 800dee2:	b178      	cbz	r0, 800df04 <d_bare_function_type+0x38>
 800dee4:	4603      	mov	r3, r0
 800dee6:	462a      	mov	r2, r5
 800dee8:	4620      	mov	r0, r4
 800deea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800deee:	2129      	movs	r1, #41	; 0x29
 800def0:	f7f8 be52 	b.w	8006b98 <d_make_comp>
 800def4:	3301      	adds	r3, #1
 800def6:	60c3      	str	r3, [r0, #12]
 800def8:	4620      	mov	r0, r4
 800defa:	f7ff fa33 	bl	800d364 <d_type>
 800defe:	4605      	mov	r5, r0
 800df00:	2800      	cmp	r0, #0
 800df02:	d1eb      	bne.n	800dedc <d_bare_function_type+0x10>
 800df04:	2000      	movs	r0, #0
 800df06:	bd70      	pop	{r4, r5, r6, pc}

0800df08 <d_function_type>:
 800df08:	68c3      	ldr	r3, [r0, #12]
 800df0a:	781a      	ldrb	r2, [r3, #0]
 800df0c:	2a46      	cmp	r2, #70	; 0x46
 800df0e:	d001      	beq.n	800df14 <d_function_type+0xc>
 800df10:	2000      	movs	r0, #0
 800df12:	4770      	bx	lr
 800df14:	b510      	push	{r4, lr}
 800df16:	1c5a      	adds	r2, r3, #1
 800df18:	60c2      	str	r2, [r0, #12]
 800df1a:	785a      	ldrb	r2, [r3, #1]
 800df1c:	2101      	movs	r1, #1
 800df1e:	2a59      	cmp	r2, #89	; 0x59
 800df20:	bf04      	itt	eq
 800df22:	3302      	addeq	r3, #2
 800df24:	60c3      	streq	r3, [r0, #12]
 800df26:	4604      	mov	r4, r0
 800df28:	f7ff ffd0 	bl	800decc <d_bare_function_type>
 800df2c:	4601      	mov	r1, r0
 800df2e:	4620      	mov	r0, r4
 800df30:	f7f8 feda 	bl	8006ce8 <d_ref_qualifier>
 800df34:	68e3      	ldr	r3, [r4, #12]
 800df36:	781a      	ldrb	r2, [r3, #0]
 800df38:	2a45      	cmp	r2, #69	; 0x45
 800df3a:	d001      	beq.n	800df40 <d_function_type+0x38>
 800df3c:	2000      	movs	r0, #0
 800df3e:	bd10      	pop	{r4, pc}
 800df40:	3301      	adds	r3, #1
 800df42:	60e3      	str	r3, [r4, #12]
 800df44:	bd10      	pop	{r4, pc}
 800df46:	bf00      	nop

0800df48 <d_name>:
 800df48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df4c:	68c2      	ldr	r2, [r0, #12]
 800df4e:	b083      	sub	sp, #12
 800df50:	7813      	ldrb	r3, [r2, #0]
 800df52:	4605      	mov	r5, r0
 800df54:	3b4e      	subs	r3, #78	; 0x4e
 800df56:	2b0c      	cmp	r3, #12
 800df58:	d869      	bhi.n	800e02e <d_name+0xe6>
 800df5a:	e8df f003 	tbb	[pc, r3]
 800df5e:	681b      	.short	0x681b
 800df60:	59686868 	.word	0x59686868
 800df64:	68681668 	.word	0x68681668
 800df68:	6868      	.short	0x6868
 800df6a:	07          	.byte	0x07
 800df6b:	00          	.byte	0x00
 800df6c:	3201      	adds	r2, #1
 800df6e:	2100      	movs	r1, #0
 800df70:	60c2      	str	r2, [r0, #12]
 800df72:	f000 f9af 	bl	800e2d4 <d_encoding>
 800df76:	68eb      	ldr	r3, [r5, #12]
 800df78:	4606      	mov	r6, r0
 800df7a:	7819      	ldrb	r1, [r3, #0]
 800df7c:	2945      	cmp	r1, #69	; 0x45
 800df7e:	f000 809c 	beq.w	800e0ba <d_name+0x172>
 800df82:	2000      	movs	r0, #0
 800df84:	b003      	add	sp, #12
 800df86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df8a:	f7ff fe67 	bl	800dc5c <d_unqualified_name>
 800df8e:	b003      	add	sp, #12
 800df90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df94:	3201      	adds	r2, #1
 800df96:	60c2      	str	r2, [r0, #12]
 800df98:	a901      	add	r1, sp, #4
 800df9a:	2201      	movs	r2, #1
 800df9c:	f7f8 fe48 	bl	8006c30 <d_cv_qualifiers>
 800dfa0:	4681      	mov	r9, r0
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d0ed      	beq.n	800df82 <d_name+0x3a>
 800dfa6:	2100      	movs	r1, #0
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	f7f8 fe9d 	bl	8006ce8 <d_ref_qualifier>
 800dfae:	4680      	mov	r8, r0
 800dfb0:	68ea      	ldr	r2, [r5, #12]
 800dfb2:	4eba      	ldr	r6, [pc, #744]	; (800e29c <d_name+0x354>)
 800dfb4:	7814      	ldrb	r4, [r2, #0]
 800dfb6:	2700      	movs	r7, #0
 800dfb8:	2c00      	cmp	r4, #0
 800dfba:	f000 80f1 	beq.w	800e1a0 <d_name+0x258>
 800dfbe:	2c44      	cmp	r4, #68	; 0x44
 800dfc0:	f000 80d8 	beq.w	800e174 <d_name+0x22c>
 800dfc4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	2b1c      	cmp	r3, #28
 800dfcc:	f240 80ae 	bls.w	800e12c <d_name+0x1e4>
 800dfd0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b19      	cmp	r3, #25
 800dfd8:	f240 80ad 	bls.w	800e136 <d_name+0x1ee>
 800dfdc:	2c55      	cmp	r4, #85	; 0x55
 800dfde:	f000 80e5 	beq.w	800e1ac <d_name+0x264>
 800dfe2:	2c53      	cmp	r4, #83	; 0x53
 800dfe4:	f000 80f0 	beq.w	800e1c8 <d_name+0x280>
 800dfe8:	2c49      	cmp	r4, #73	; 0x49
 800dfea:	f000 80e6 	beq.w	800e1ba <d_name+0x272>
 800dfee:	2c54      	cmp	r4, #84	; 0x54
 800dff0:	f000 8122 	beq.w	800e238 <d_name+0x2f0>
 800dff4:	2c45      	cmp	r4, #69	; 0x45
 800dff6:	f000 8157 	beq.w	800e2a8 <d_name+0x360>
 800dffa:	2c4d      	cmp	r4, #77	; 0x4d
 800dffc:	f040 80d0 	bne.w	800e1a0 <d_name+0x258>
 800e000:	2f00      	cmp	r7, #0
 800e002:	f000 80cd 	beq.w	800e1a0 <d_name+0x258>
 800e006:	1c53      	adds	r3, r2, #1
 800e008:	60eb      	str	r3, [r5, #12]
 800e00a:	7854      	ldrb	r4, [r2, #1]
 800e00c:	461a      	mov	r2, r3
 800e00e:	e7d3      	b.n	800dfb8 <d_name+0x70>
 800e010:	7853      	ldrb	r3, [r2, #1]
 800e012:	2b74      	cmp	r3, #116	; 0x74
 800e014:	d029      	beq.n	800e06a <d_name+0x122>
 800e016:	2100      	movs	r1, #0
 800e018:	f7f8 fffa 	bl	8007010 <d_substitution>
 800e01c:	68eb      	ldr	r3, [r5, #12]
 800e01e:	4604      	mov	r4, r0
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	2b49      	cmp	r3, #73	; 0x49
 800e024:	d047      	beq.n	800e0b6 <d_name+0x16e>
 800e026:	4620      	mov	r0, r4
 800e028:	b003      	add	sp, #12
 800e02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e02e:	f7ff fe15 	bl	800dc5c <d_unqualified_name>
 800e032:	68eb      	ldr	r3, [r5, #12]
 800e034:	4604      	mov	r4, r0
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	2b49      	cmp	r3, #73	; 0x49
 800e03a:	d1f4      	bne.n	800e026 <d_name+0xde>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d0a0      	beq.n	800df82 <d_name+0x3a>
 800e040:	6a2b      	ldr	r3, [r5, #32]
 800e042:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e044:	4293      	cmp	r3, r2
 800e046:	da9c      	bge.n	800df82 <d_name+0x3a>
 800e048:	69e9      	ldr	r1, [r5, #28]
 800e04a:	1c5a      	adds	r2, r3, #1
 800e04c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800e050:	4628      	mov	r0, r5
 800e052:	622a      	str	r2, [r5, #32]
 800e054:	f7fc fca0 	bl	800a998 <d_template_args>
 800e058:	4622      	mov	r2, r4
 800e05a:	4603      	mov	r3, r0
 800e05c:	2104      	movs	r1, #4
 800e05e:	4628      	mov	r0, r5
 800e060:	f7f8 fd9a 	bl	8006b98 <d_make_comp>
 800e064:	b003      	add	sp, #12
 800e066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e06a:	6943      	ldr	r3, [r0, #20]
 800e06c:	6981      	ldr	r1, [r0, #24]
 800e06e:	3202      	adds	r2, #2
 800e070:	428b      	cmp	r3, r1
 800e072:	60c2      	str	r2, [r0, #12]
 800e074:	f2c0 80b2 	blt.w	800e1dc <d_name+0x294>
 800e078:	2400      	movs	r4, #0
 800e07a:	4628      	mov	r0, r5
 800e07c:	f7ff fdee 	bl	800dc5c <d_unqualified_name>
 800e080:	4622      	mov	r2, r4
 800e082:	4603      	mov	r3, r0
 800e084:	2101      	movs	r1, #1
 800e086:	4628      	mov	r0, r5
 800e088:	f7f8 fd86 	bl	8006b98 <d_make_comp>
 800e08c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e08e:	68ea      	ldr	r2, [r5, #12]
 800e090:	3303      	adds	r3, #3
 800e092:	632b      	str	r3, [r5, #48]	; 0x30
 800e094:	7813      	ldrb	r3, [r2, #0]
 800e096:	4604      	mov	r4, r0
 800e098:	2b49      	cmp	r3, #73	; 0x49
 800e09a:	d1c4      	bne.n	800e026 <d_name+0xde>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	f43f af70 	beq.w	800df82 <d_name+0x3a>
 800e0a2:	6a2b      	ldr	r3, [r5, #32]
 800e0a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	f6bf af6b 	bge.w	800df82 <d_name+0x3a>
 800e0ac:	69e9      	ldr	r1, [r5, #28]
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800e0b4:	622a      	str	r2, [r5, #32]
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	e7cc      	b.n	800e054 <d_name+0x10c>
 800e0ba:	1c5a      	adds	r2, r3, #1
 800e0bc:	60ea      	str	r2, [r5, #12]
 800e0be:	7859      	ldrb	r1, [r3, #1]
 800e0c0:	2973      	cmp	r1, #115	; 0x73
 800e0c2:	f000 80a0 	beq.w	800e206 <d_name+0x2be>
 800e0c6:	2964      	cmp	r1, #100	; 0x64
 800e0c8:	f000 80bd 	beq.w	800e246 <d_name+0x2fe>
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	f7ff ff3b 	bl	800df48 <d_name>
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	2800      	cmp	r0, #0
 800e0d6:	f000 8092 	beq.w	800e1fe <d_name+0x2b6>
 800e0da:	7803      	ldrb	r3, [r0, #0]
 800e0dc:	2b44      	cmp	r3, #68	; 0x44
 800e0de:	f000 808e 	beq.w	800e1fe <d_name+0x2b6>
 800e0e2:	2b46      	cmp	r3, #70	; 0x46
 800e0e4:	f000 808b 	beq.w	800e1fe <d_name+0x2b6>
 800e0e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e0ec:	68eb      	ldr	r3, [r5, #12]
 800e0ee:	781a      	ldrb	r2, [r3, #0]
 800e0f0:	2a5f      	cmp	r2, #95	; 0x5f
 800e0f2:	f000 80bf 	beq.w	800e274 <d_name+0x32c>
 800e0f6:	1c7b      	adds	r3, r7, #1
 800e0f8:	f000 8081 	beq.w	800e1fe <d_name+0x2b6>
 800e0fc:	696b      	ldr	r3, [r5, #20]
 800e0fe:	69aa      	ldr	r2, [r5, #24]
 800e100:	4293      	cmp	r3, r2
 800e102:	da7e      	bge.n	800e202 <d_name+0x2ba>
 800e104:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e108:	6929      	ldr	r1, [r5, #16]
 800e10a:	3301      	adds	r3, #1
 800e10c:	0092      	lsls	r2, r2, #2
 800e10e:	616b      	str	r3, [r5, #20]
 800e110:	188b      	adds	r3, r1, r2
 800e112:	d003      	beq.n	800e11c <d_name+0x1d4>
 800e114:	2045      	movs	r0, #69	; 0x45
 800e116:	5488      	strb	r0, [r1, r2]
 800e118:	609f      	str	r7, [r3, #8]
 800e11a:	605c      	str	r4, [r3, #4]
 800e11c:	4632      	mov	r2, r6
 800e11e:	4628      	mov	r0, r5
 800e120:	2102      	movs	r1, #2
 800e122:	f7f8 fd39 	bl	8006b98 <d_make_comp>
 800e126:	b003      	add	sp, #12
 800e128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e12c:	fa26 f303 	lsr.w	r3, r6, r3
 800e130:	07d9      	lsls	r1, r3, #31
 800e132:	f57f af4d 	bpl.w	800dfd0 <d_name+0x88>
 800e136:	4628      	mov	r0, r5
 800e138:	f7ff fd90 	bl	800dc5c <d_unqualified_name>
 800e13c:	b377      	cbz	r7, 800e19c <d_name+0x254>
 800e13e:	2101      	movs	r1, #1
 800e140:	4603      	mov	r3, r0
 800e142:	463a      	mov	r2, r7
 800e144:	4628      	mov	r0, r5
 800e146:	f7f8 fd27 	bl	8006b98 <d_make_comp>
 800e14a:	4607      	mov	r7, r0
 800e14c:	2c53      	cmp	r4, #83	; 0x53
 800e14e:	d01d      	beq.n	800e18c <d_name+0x244>
 800e150:	68ea      	ldr	r2, [r5, #12]
 800e152:	7814      	ldrb	r4, [r2, #0]
 800e154:	2c45      	cmp	r4, #69	; 0x45
 800e156:	f43f af35 	beq.w	800dfc4 <d_name+0x7c>
 800e15a:	b30f      	cbz	r7, 800e1a0 <d_name+0x258>
 800e15c:	6a2b      	ldr	r3, [r5, #32]
 800e15e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e160:	4293      	cmp	r3, r2
 800e162:	da1d      	bge.n	800e1a0 <d_name+0x258>
 800e164:	69ea      	ldr	r2, [r5, #28]
 800e166:	1c59      	adds	r1, r3, #1
 800e168:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
 800e16c:	68ea      	ldr	r2, [r5, #12]
 800e16e:	6229      	str	r1, [r5, #32]
 800e170:	7814      	ldrb	r4, [r2, #0]
 800e172:	e721      	b.n	800dfb8 <d_name+0x70>
 800e174:	7853      	ldrb	r3, [r2, #1]
 800e176:	4628      	mov	r0, r5
 800e178:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e17c:	2b54      	cmp	r3, #84	; 0x54
 800e17e:	d008      	beq.n	800e192 <d_name+0x24a>
 800e180:	f7ff fd6c 	bl	800dc5c <d_unqualified_name>
 800e184:	2f00      	cmp	r7, #0
 800e186:	d1da      	bne.n	800e13e <d_name+0x1f6>
 800e188:	4607      	mov	r7, r0
 800e18a:	e7e1      	b.n	800e150 <d_name+0x208>
 800e18c:	68ea      	ldr	r2, [r5, #12]
 800e18e:	7814      	ldrb	r4, [r2, #0]
 800e190:	e712      	b.n	800dfb8 <d_name+0x70>
 800e192:	f7ff f8e7 	bl	800d364 <d_type>
 800e196:	2f00      	cmp	r7, #0
 800e198:	d1d1      	bne.n	800e13e <d_name+0x1f6>
 800e19a:	e7f5      	b.n	800e188 <d_name+0x240>
 800e19c:	4607      	mov	r7, r0
 800e19e:	e7d5      	b.n	800e14c <d_name+0x204>
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	f8c9 0000 	str.w	r0, [r9]
 800e1a6:	b003      	add	sp, #12
 800e1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	f7ff fd55 	bl	800dc5c <d_unqualified_name>
 800e1b2:	2f00      	cmp	r7, #0
 800e1b4:	d1c3      	bne.n	800e13e <d_name+0x1f6>
 800e1b6:	4607      	mov	r7, r0
 800e1b8:	e7ca      	b.n	800e150 <d_name+0x208>
 800e1ba:	2f00      	cmp	r7, #0
 800e1bc:	d0f0      	beq.n	800e1a0 <d_name+0x258>
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f7fc fbea 	bl	800a998 <d_template_args>
 800e1c4:	2104      	movs	r1, #4
 800e1c6:	e7bb      	b.n	800e140 <d_name+0x1f8>
 800e1c8:	2101      	movs	r1, #1
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f7f8 ff20 	bl	8007010 <d_substitution>
 800e1d0:	2f00      	cmp	r7, #0
 800e1d2:	d1b4      	bne.n	800e13e <d_name+0x1f6>
 800e1d4:	68ea      	ldr	r2, [r5, #12]
 800e1d6:	4607      	mov	r7, r0
 800e1d8:	7814      	ldrb	r4, [r2, #0]
 800e1da:	e6ed      	b.n	800dfb8 <d_name+0x70>
 800e1dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e1e0:	6902      	ldr	r2, [r0, #16]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	0089      	lsls	r1, r1, #2
 800e1e6:	6143      	str	r3, [r0, #20]
 800e1e8:	1853      	adds	r3, r2, r1
 800e1ea:	f43f af45 	beq.w	800e078 <d_name+0x130>
 800e1ee:	4e2c      	ldr	r6, [pc, #176]	; (800e2a0 <d_name+0x358>)
 800e1f0:	2700      	movs	r7, #0
 800e1f2:	2003      	movs	r0, #3
 800e1f4:	5457      	strb	r7, [r2, r1]
 800e1f6:	461c      	mov	r4, r3
 800e1f8:	605e      	str	r6, [r3, #4]
 800e1fa:	6098      	str	r0, [r3, #8]
 800e1fc:	e73d      	b.n	800e07a <d_name+0x132>
 800e1fe:	4623      	mov	r3, r4
 800e200:	e78c      	b.n	800e11c <d_name+0x1d4>
 800e202:	2300      	movs	r3, #0
 800e204:	e78a      	b.n	800e11c <d_name+0x1d4>
 800e206:	1c9a      	adds	r2, r3, #2
 800e208:	60ea      	str	r2, [r5, #12]
 800e20a:	789a      	ldrb	r2, [r3, #2]
 800e20c:	2a5f      	cmp	r2, #95	; 0x5f
 800e20e:	d03b      	beq.n	800e288 <d_name+0x340>
 800e210:	696b      	ldr	r3, [r5, #20]
 800e212:	69aa      	ldr	r2, [r5, #24]
 800e214:	4293      	cmp	r3, r2
 800e216:	daf4      	bge.n	800e202 <d_name+0x2ba>
 800e218:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e21c:	6928      	ldr	r0, [r5, #16]
 800e21e:	0089      	lsls	r1, r1, #2
 800e220:	3301      	adds	r3, #1
 800e222:	1842      	adds	r2, r0, r1
 800e224:	616b      	str	r3, [r5, #20]
 800e226:	d0ec      	beq.n	800e202 <d_name+0x2ba>
 800e228:	4c1e      	ldr	r4, [pc, #120]	; (800e2a4 <d_name+0x35c>)
 800e22a:	2700      	movs	r7, #0
 800e22c:	5447      	strb	r7, [r0, r1]
 800e22e:	210e      	movs	r1, #14
 800e230:	4613      	mov	r3, r2
 800e232:	6054      	str	r4, [r2, #4]
 800e234:	6091      	str	r1, [r2, #8]
 800e236:	e771      	b.n	800e11c <d_name+0x1d4>
 800e238:	4628      	mov	r0, r5
 800e23a:	f7f8 fe4f 	bl	8006edc <d_template_param>
 800e23e:	2f00      	cmp	r7, #0
 800e240:	f47f af7d 	bne.w	800e13e <d_name+0x1f6>
 800e244:	e7a0      	b.n	800e188 <d_name+0x240>
 800e246:	3302      	adds	r3, #2
 800e248:	60eb      	str	r3, [r5, #12]
 800e24a:	4628      	mov	r0, r5
 800e24c:	f7f8 fe2e 	bl	8006eac <d_compact_number>
 800e250:	1e07      	subs	r7, r0, #0
 800e252:	f6ff ae96 	blt.w	800df82 <d_name+0x3a>
 800e256:	4628      	mov	r0, r5
 800e258:	f7ff fe76 	bl	800df48 <d_name>
 800e25c:	4604      	mov	r4, r0
 800e25e:	2800      	cmp	r0, #0
 800e260:	f43f af4c 	beq.w	800e0fc <d_name+0x1b4>
 800e264:	7803      	ldrb	r3, [r0, #0]
 800e266:	2b44      	cmp	r3, #68	; 0x44
 800e268:	f43f af48 	beq.w	800e0fc <d_name+0x1b4>
 800e26c:	2b46      	cmp	r3, #70	; 0x46
 800e26e:	f43f af45 	beq.w	800e0fc <d_name+0x1b4>
 800e272:	e73b      	b.n	800e0ec <d_name+0x1a4>
 800e274:	4628      	mov	r0, r5
 800e276:	3301      	adds	r3, #1
 800e278:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e27c:	f7f8 fdd2 	bl	8006e24 <d_number.isra.0>
 800e280:	2800      	cmp	r0, #0
 800e282:	f6bf af38 	bge.w	800e0f6 <d_name+0x1ae>
 800e286:	e67c      	b.n	800df82 <d_name+0x3a>
 800e288:	4628      	mov	r0, r5
 800e28a:	3303      	adds	r3, #3
 800e28c:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e290:	f7f8 fdc8 	bl	8006e24 <d_number.isra.0>
 800e294:	2800      	cmp	r0, #0
 800e296:	dabb      	bge.n	800e210 <d_name+0x2c8>
 800e298:	e673      	b.n	800df82 <d_name+0x3a>
 800e29a:	bf00      	nop
 800e29c:	100803ff 	.word	0x100803ff
 800e2a0:	0801625c 	.word	0x0801625c
 800e2a4:	0801624c 	.word	0x0801624c
 800e2a8:	f8c9 7000 	str.w	r7, [r9]
 800e2ac:	2f00      	cmp	r7, #0
 800e2ae:	f43f ae68 	beq.w	800df82 <d_name+0x3a>
 800e2b2:	f1b8 0f00 	cmp.w	r8, #0
 800e2b6:	d004      	beq.n	800e2c2 <d_name+0x37a>
 800e2b8:	9b01      	ldr	r3, [sp, #4]
 800e2ba:	f8cd 8004 	str.w	r8, [sp, #4]
 800e2be:	f8c8 3004 	str.w	r3, [r8, #4]
 800e2c2:	68eb      	ldr	r3, [r5, #12]
 800e2c4:	781a      	ldrb	r2, [r3, #0]
 800e2c6:	2a45      	cmp	r2, #69	; 0x45
 800e2c8:	f47f ae5b 	bne.w	800df82 <d_name+0x3a>
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	60eb      	str	r3, [r5, #12]
 800e2d0:	9801      	ldr	r0, [sp, #4]
 800e2d2:	e65c      	b.n	800df8e <d_name+0x46>

0800e2d4 <d_encoding>:
 800e2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d8:	68c3      	ldr	r3, [r0, #12]
 800e2da:	4605      	mov	r5, r0
 800e2dc:	781a      	ldrb	r2, [r3, #0]
 800e2de:	2a47      	cmp	r2, #71	; 0x47
 800e2e0:	d029      	beq.n	800e336 <d_encoding+0x62>
 800e2e2:	2a54      	cmp	r2, #84	; 0x54
 800e2e4:	d027      	beq.n	800e336 <d_encoding+0x62>
 800e2e6:	460e      	mov	r6, r1
 800e2e8:	f7ff fe2e 	bl	800df48 <d_name>
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	b360      	cbz	r0, 800e34a <d_encoding+0x76>
 800e2f0:	b116      	cbz	r6, 800e2f8 <d_encoding+0x24>
 800e2f2:	68ab      	ldr	r3, [r5, #8]
 800e2f4:	07db      	lsls	r3, r3, #31
 800e2f6:	d52c      	bpl.n	800e352 <d_encoding+0x7e>
 800e2f8:	68eb      	ldr	r3, [r5, #12]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	b38b      	cbz	r3, 800e362 <d_encoding+0x8e>
 800e2fe:	2b45      	cmp	r3, #69	; 0x45
 800e300:	d02f      	beq.n	800e362 <d_encoding+0x8e>
 800e302:	4621      	mov	r1, r4
 800e304:	780b      	ldrb	r3, [r1, #0]
 800e306:	2b04      	cmp	r3, #4
 800e308:	f1a3 021c 	sub.w	r2, r3, #28
 800e30c:	f000 8118 	beq.w	800e540 <d_encoding+0x26c>
 800e310:	f0c0 8114 	bcc.w	800e53c <d_encoding+0x268>
 800e314:	2a04      	cmp	r2, #4
 800e316:	f200 8111 	bhi.w	800e53c <d_encoding+0x268>
 800e31a:	6849      	ldr	r1, [r1, #4]
 800e31c:	2900      	cmp	r1, #0
 800e31e:	d1f1      	bne.n	800e304 <d_encoding+0x30>
 800e320:	4628      	mov	r0, r5
 800e322:	f7ff fdd3 	bl	800decc <d_bare_function_type>
 800e326:	4622      	mov	r2, r4
 800e328:	4603      	mov	r3, r0
 800e32a:	2103      	movs	r1, #3
 800e32c:	4628      	mov	r0, r5
 800e32e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e332:	f7f8 bc31 	b.w	8006b98 <d_make_comp>
 800e336:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800e338:	f101 0214 	add.w	r2, r1, #20
 800e33c:	632a      	str	r2, [r5, #48]	; 0x30
 800e33e:	781a      	ldrb	r2, [r3, #0]
 800e340:	2a54      	cmp	r2, #84	; 0x54
 800e342:	d011      	beq.n	800e368 <d_encoding+0x94>
 800e344:	2a47      	cmp	r2, #71	; 0x47
 800e346:	f000 8085 	beq.w	800e454 <d_encoding+0x180>
 800e34a:	2000      	movs	r0, #0
 800e34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e350:	6864      	ldr	r4, [r4, #4]
 800e352:	7823      	ldrb	r3, [r4, #0]
 800e354:	f1a3 021c 	sub.w	r2, r3, #28
 800e358:	2a04      	cmp	r2, #4
 800e35a:	d9f9      	bls.n	800e350 <d_encoding+0x7c>
 800e35c:	2b02      	cmp	r3, #2
 800e35e:	f000 815f 	beq.w	800e620 <d_encoding+0x34c>
 800e362:	4620      	mov	r0, r4
 800e364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e368:	1c5a      	adds	r2, r3, #1
 800e36a:	60ea      	str	r2, [r5, #12]
 800e36c:	785a      	ldrb	r2, [r3, #1]
 800e36e:	2a00      	cmp	r2, #0
 800e370:	d0eb      	beq.n	800e34a <d_encoding+0x76>
 800e372:	1c9a      	adds	r2, r3, #2
 800e374:	60ea      	str	r2, [r5, #12]
 800e376:	785b      	ldrb	r3, [r3, #1]
 800e378:	3b43      	subs	r3, #67	; 0x43
 800e37a:	2b33      	cmp	r3, #51	; 0x33
 800e37c:	d8e5      	bhi.n	800e34a <d_encoding+0x76>
 800e37e:	a201      	add	r2, pc, #4	; (adr r2, 800e384 <d_encoding+0xb0>)
 800e380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e384:	0800e8a1 	.word	0x0800e8a1
 800e388:	0800e34b 	.word	0x0800e34b
 800e38c:	0800e34b 	.word	0x0800e34b
 800e390:	0800e88b 	.word	0x0800e88b
 800e394:	0800e34b 	.word	0x0800e34b
 800e398:	0800e875 	.word	0x0800e875
 800e39c:	0800e85f 	.word	0x0800e85f
 800e3a0:	0800e849 	.word	0x0800e849
 800e3a4:	0800e34b 	.word	0x0800e34b
 800e3a8:	0800e34b 	.word	0x0800e34b
 800e3ac:	0800e34b 	.word	0x0800e34b
 800e3b0:	0800e34b 	.word	0x0800e34b
 800e3b4:	0800e34b 	.word	0x0800e34b
 800e3b8:	0800e34b 	.word	0x0800e34b
 800e3bc:	0800e34b 	.word	0x0800e34b
 800e3c0:	0800e34b 	.word	0x0800e34b
 800e3c4:	0800e833 	.word	0x0800e833
 800e3c8:	0800e819 	.word	0x0800e819
 800e3cc:	0800e34b 	.word	0x0800e34b
 800e3d0:	0800e7ff 	.word	0x0800e7ff
 800e3d4:	0800e7c3 	.word	0x0800e7c3
 800e3d8:	0800e34b 	.word	0x0800e34b
 800e3dc:	0800e34b 	.word	0x0800e34b
 800e3e0:	0800e34b 	.word	0x0800e34b
 800e3e4:	0800e34b 	.word	0x0800e34b
 800e3e8:	0800e34b 	.word	0x0800e34b
 800e3ec:	0800e34b 	.word	0x0800e34b
 800e3f0:	0800e34b 	.word	0x0800e34b
 800e3f4:	0800e34b 	.word	0x0800e34b
 800e3f8:	0800e34b 	.word	0x0800e34b
 800e3fc:	0800e34b 	.word	0x0800e34b
 800e400:	0800e34b 	.word	0x0800e34b
 800e404:	0800e78f 	.word	0x0800e78f
 800e408:	0800e34b 	.word	0x0800e34b
 800e40c:	0800e34b 	.word	0x0800e34b
 800e410:	0800e34b 	.word	0x0800e34b
 800e414:	0800e34b 	.word	0x0800e34b
 800e418:	0800e7d9 	.word	0x0800e7d9
 800e41c:	0800e34b 	.word	0x0800e34b
 800e420:	0800e34b 	.word	0x0800e34b
 800e424:	0800e34b 	.word	0x0800e34b
 800e428:	0800e34b 	.word	0x0800e34b
 800e42c:	0800e34b 	.word	0x0800e34b
 800e430:	0800e34b 	.word	0x0800e34b
 800e434:	0800e34b 	.word	0x0800e34b
 800e438:	0800e34b 	.word	0x0800e34b
 800e43c:	0800e34b 	.word	0x0800e34b
 800e440:	0800e34b 	.word	0x0800e34b
 800e444:	0800e34b 	.word	0x0800e34b
 800e448:	0800e34b 	.word	0x0800e34b
 800e44c:	0800e34b 	.word	0x0800e34b
 800e450:	0800e769 	.word	0x0800e769
 800e454:	1c5a      	adds	r2, r3, #1
 800e456:	60ea      	str	r2, [r5, #12]
 800e458:	785a      	ldrb	r2, [r3, #1]
 800e45a:	2a00      	cmp	r2, #0
 800e45c:	f43f af75 	beq.w	800e34a <d_encoding+0x76>
 800e460:	1c9a      	adds	r2, r3, #2
 800e462:	60ea      	str	r2, [r5, #12]
 800e464:	785a      	ldrb	r2, [r3, #1]
 800e466:	3a41      	subs	r2, #65	; 0x41
 800e468:	2a31      	cmp	r2, #49	; 0x31
 800e46a:	f63f af6e 	bhi.w	800e34a <d_encoding+0x76>
 800e46e:	a101      	add	r1, pc, #4	; (adr r1, 800e474 <d_encoding+0x1a0>)
 800e470:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e474:	0800e725 	.word	0x0800e725
 800e478:	0800e34b 	.word	0x0800e34b
 800e47c:	0800e34b 	.word	0x0800e34b
 800e480:	0800e34b 	.word	0x0800e34b
 800e484:	0800e34b 	.word	0x0800e34b
 800e488:	0800e34b 	.word	0x0800e34b
 800e48c:	0800e34b 	.word	0x0800e34b
 800e490:	0800e34b 	.word	0x0800e34b
 800e494:	0800e34b 	.word	0x0800e34b
 800e498:	0800e34b 	.word	0x0800e34b
 800e49c:	0800e34b 	.word	0x0800e34b
 800e4a0:	0800e34b 	.word	0x0800e34b
 800e4a4:	0800e34b 	.word	0x0800e34b
 800e4a8:	0800e34b 	.word	0x0800e34b
 800e4ac:	0800e34b 	.word	0x0800e34b
 800e4b0:	0800e34b 	.word	0x0800e34b
 800e4b4:	0800e34b 	.word	0x0800e34b
 800e4b8:	0800e707 	.word	0x0800e707
 800e4bc:	0800e34b 	.word	0x0800e34b
 800e4c0:	0800e73d 	.word	0x0800e73d
 800e4c4:	0800e34b 	.word	0x0800e34b
 800e4c8:	0800e6f1 	.word	0x0800e6f1
 800e4cc:	0800e34b 	.word	0x0800e34b
 800e4d0:	0800e34b 	.word	0x0800e34b
 800e4d4:	0800e34b 	.word	0x0800e34b
 800e4d8:	0800e34b 	.word	0x0800e34b
 800e4dc:	0800e34b 	.word	0x0800e34b
 800e4e0:	0800e34b 	.word	0x0800e34b
 800e4e4:	0800e34b 	.word	0x0800e34b
 800e4e8:	0800e34b 	.word	0x0800e34b
 800e4ec:	0800e34b 	.word	0x0800e34b
 800e4f0:	0800e34b 	.word	0x0800e34b
 800e4f4:	0800e34b 	.word	0x0800e34b
 800e4f8:	0800e34b 	.word	0x0800e34b
 800e4fc:	0800e34b 	.word	0x0800e34b
 800e500:	0800e34b 	.word	0x0800e34b
 800e504:	0800e34b 	.word	0x0800e34b
 800e508:	0800e34b 	.word	0x0800e34b
 800e50c:	0800e34b 	.word	0x0800e34b
 800e510:	0800e34b 	.word	0x0800e34b
 800e514:	0800e34b 	.word	0x0800e34b
 800e518:	0800e34b 	.word	0x0800e34b
 800e51c:	0800e34b 	.word	0x0800e34b
 800e520:	0800e34b 	.word	0x0800e34b
 800e524:	0800e34b 	.word	0x0800e34b
 800e528:	0800e34b 	.word	0x0800e34b
 800e52c:	0800e34b 	.word	0x0800e34b
 800e530:	0800e34b 	.word	0x0800e34b
 800e534:	0800e34b 	.word	0x0800e34b
 800e538:	0800e647 	.word	0x0800e647
 800e53c:	2100      	movs	r1, #0
 800e53e:	e6ef      	b.n	800e320 <d_encoding+0x4c>
 800e540:	684a      	ldr	r2, [r1, #4]
 800e542:	2a00      	cmp	r2, #0
 800e544:	d07d      	beq.n	800e642 <d_encoding+0x36e>
 800e546:	7813      	ldrb	r3, [r2, #0]
 800e548:	3b01      	subs	r3, #1
 800e54a:	2b32      	cmp	r3, #50	; 0x32
 800e54c:	d879      	bhi.n	800e642 <d_encoding+0x36e>
 800e54e:	a101      	add	r1, pc, #4	; (adr r1, 800e554 <d_encoding+0x280>)
 800e550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e554:	0800e63d 	.word	0x0800e63d
 800e558:	0800e63d 	.word	0x0800e63d
 800e55c:	0800e643 	.word	0x0800e643
 800e560:	0800e643 	.word	0x0800e643
 800e564:	0800e643 	.word	0x0800e643
 800e568:	0800e643 	.word	0x0800e643
 800e56c:	0800e53d 	.word	0x0800e53d
 800e570:	0800e53d 	.word	0x0800e53d
 800e574:	0800e643 	.word	0x0800e643
 800e578:	0800e643 	.word	0x0800e643
 800e57c:	0800e643 	.word	0x0800e643
 800e580:	0800e643 	.word	0x0800e643
 800e584:	0800e643 	.word	0x0800e643
 800e588:	0800e643 	.word	0x0800e643
 800e58c:	0800e643 	.word	0x0800e643
 800e590:	0800e643 	.word	0x0800e643
 800e594:	0800e643 	.word	0x0800e643
 800e598:	0800e643 	.word	0x0800e643
 800e59c:	0800e643 	.word	0x0800e643
 800e5a0:	0800e643 	.word	0x0800e643
 800e5a4:	0800e643 	.word	0x0800e643
 800e5a8:	0800e643 	.word	0x0800e643
 800e5ac:	0800e643 	.word	0x0800e643
 800e5b0:	0800e643 	.word	0x0800e643
 800e5b4:	0800e643 	.word	0x0800e643
 800e5b8:	0800e643 	.word	0x0800e643
 800e5bc:	0800e643 	.word	0x0800e643
 800e5c0:	0800e643 	.word	0x0800e643
 800e5c4:	0800e643 	.word	0x0800e643
 800e5c8:	0800e643 	.word	0x0800e643
 800e5cc:	0800e643 	.word	0x0800e643
 800e5d0:	0800e643 	.word	0x0800e643
 800e5d4:	0800e643 	.word	0x0800e643
 800e5d8:	0800e643 	.word	0x0800e643
 800e5dc:	0800e643 	.word	0x0800e643
 800e5e0:	0800e643 	.word	0x0800e643
 800e5e4:	0800e643 	.word	0x0800e643
 800e5e8:	0800e643 	.word	0x0800e643
 800e5ec:	0800e643 	.word	0x0800e643
 800e5f0:	0800e643 	.word	0x0800e643
 800e5f4:	0800e643 	.word	0x0800e643
 800e5f8:	0800e643 	.word	0x0800e643
 800e5fc:	0800e643 	.word	0x0800e643
 800e600:	0800e643 	.word	0x0800e643
 800e604:	0800e643 	.word	0x0800e643
 800e608:	0800e643 	.word	0x0800e643
 800e60c:	0800e643 	.word	0x0800e643
 800e610:	0800e643 	.word	0x0800e643
 800e614:	0800e643 	.word	0x0800e643
 800e618:	0800e643 	.word	0x0800e643
 800e61c:	0800e53d 	.word	0x0800e53d
 800e620:	68a2      	ldr	r2, [r4, #8]
 800e622:	7813      	ldrb	r3, [r2, #0]
 800e624:	3b1c      	subs	r3, #28
 800e626:	2b04      	cmp	r3, #4
 800e628:	d804      	bhi.n	800e634 <d_encoding+0x360>
 800e62a:	6852      	ldr	r2, [r2, #4]
 800e62c:	7813      	ldrb	r3, [r2, #0]
 800e62e:	3b1c      	subs	r3, #28
 800e630:	2b04      	cmp	r3, #4
 800e632:	d9fa      	bls.n	800e62a <d_encoding+0x356>
 800e634:	60a2      	str	r2, [r4, #8]
 800e636:	4620      	mov	r0, r4
 800e638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e63c:	6892      	ldr	r2, [r2, #8]
 800e63e:	2a00      	cmp	r2, #0
 800e640:	d181      	bne.n	800e546 <d_encoding+0x272>
 800e642:	2101      	movs	r1, #1
 800e644:	e66c      	b.n	800e320 <d_encoding+0x4c>
 800e646:	f105 000c 	add.w	r0, r5, #12
 800e64a:	f7f8 fbeb 	bl	8006e24 <d_number.isra.0>
 800e64e:	2801      	cmp	r0, #1
 800e650:	f77f ae7b 	ble.w	800e34a <d_encoding+0x76>
 800e654:	68eb      	ldr	r3, [r5, #12]
 800e656:	781a      	ldrb	r2, [r3, #0]
 800e658:	2a00      	cmp	r2, #0
 800e65a:	f43f ae76 	beq.w	800e34a <d_encoding+0x76>
 800e65e:	1c5f      	adds	r7, r3, #1
 800e660:	60ef      	str	r7, [r5, #12]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	2b5f      	cmp	r3, #95	; 0x5f
 800e666:	f47f ae70 	bne.w	800e34a <d_encoding+0x76>
 800e66a:	2200      	movs	r2, #0
 800e66c:	4690      	mov	r8, r2
 800e66e:	1e46      	subs	r6, r0, #1
 800e670:	f04f 093f 	mov.w	r9, #63	; 0x3f
 800e674:	783b      	ldrb	r3, [r7, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	f43f ae67 	beq.w	800e34a <d_encoding+0x76>
 800e67c:	2b24      	cmp	r3, #36	; 0x24
 800e67e:	f000 8135 	beq.w	800e8ec <d_encoding+0x618>
 800e682:	463c      	mov	r4, r7
 800e684:	2100      	movs	r1, #0
 800e686:	e004      	b.n	800e692 <d_encoding+0x3be>
 800e688:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e68c:	b123      	cbz	r3, 800e698 <d_encoding+0x3c4>
 800e68e:	2b24      	cmp	r3, #36	; 0x24
 800e690:	d002      	beq.n	800e698 <d_encoding+0x3c4>
 800e692:	3101      	adds	r1, #1
 800e694:	42b1      	cmp	r1, r6
 800e696:	dbf7      	blt.n	800e688 <d_encoding+0x3b4>
 800e698:	696b      	ldr	r3, [r5, #20]
 800e69a:	69a8      	ldr	r0, [r5, #24]
 800e69c:	4283      	cmp	r3, r0
 800e69e:	f280 811f 	bge.w	800e8e0 <d_encoding+0x60c>
 800e6a2:	6928      	ldr	r0, [r5, #16]
 800e6a4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e6a8:	f103 0e01 	add.w	lr, r3, #1
 800e6ac:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 800e6b0:	f8c5 e014 	str.w	lr, [r5, #20]
 800e6b4:	f000 8114 	beq.w	800e8e0 <d_encoding+0x60c>
 800e6b8:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 800e6bc:	605f      	str	r7, [r3, #4]
 800e6be:	6099      	str	r1, [r3, #8]
 800e6c0:	68ef      	ldr	r7, [r5, #12]
 800e6c2:	1a76      	subs	r6, r6, r1
 800e6c4:	440f      	add	r7, r1
 800e6c6:	60ef      	str	r7, [r5, #12]
 800e6c8:	2a00      	cmp	r2, #0
 800e6ca:	f000 812c 	beq.w	800e926 <d_encoding+0x652>
 800e6ce:	213e      	movs	r1, #62	; 0x3e
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f7f8 fa61 	bl	8006b98 <d_make_comp>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	f43f ae36 	beq.w	800e34a <d_encoding+0x76>
 800e6de:	2e00      	cmp	r6, #0
 800e6e0:	dcc8      	bgt.n	800e674 <d_encoding+0x3a0>
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	213d      	movs	r1, #61	; 0x3d
 800e6ec:	f7f8 ba54 	b.w	8006b98 <d_make_comp>
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	f7ff fc29 	bl	800df48 <d_name>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	2113      	movs	r1, #19
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e702:	f7f8 ba49 	b.w	8006b98 <d_make_comp>
 800e706:	4628      	mov	r0, r5
 800e708:	f7ff fc1e 	bl	800df48 <d_name>
 800e70c:	4604      	mov	r4, r0
 800e70e:	4628      	mov	r0, r5
 800e710:	f7f8 fbb0 	bl	8006e74 <d_number_component>
 800e714:	4622      	mov	r2, r4
 800e716:	4603      	mov	r3, r0
 800e718:	2116      	movs	r1, #22
 800e71a:	4628      	mov	r0, r5
 800e71c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	f7f8 ba3a 	b.w	8006b98 <d_make_comp>
 800e724:	2100      	movs	r1, #0
 800e726:	4628      	mov	r0, r5
 800e728:	f7ff fdd4 	bl	800e2d4 <d_encoding>
 800e72c:	2300      	movs	r3, #0
 800e72e:	4602      	mov	r2, r0
 800e730:	2117      	movs	r1, #23
 800e732:	4628      	mov	r0, r5
 800e734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e738:	f7f8 ba2e 	b.w	8006b98 <d_make_comp>
 800e73c:	789a      	ldrb	r2, [r3, #2]
 800e73e:	2100      	movs	r1, #0
 800e740:	4628      	mov	r0, r5
 800e742:	2a00      	cmp	r2, #0
 800e744:	f000 80f1 	beq.w	800e92a <d_encoding+0x656>
 800e748:	1cda      	adds	r2, r3, #3
 800e74a:	60ea      	str	r2, [r5, #12]
 800e74c:	789b      	ldrb	r3, [r3, #2]
 800e74e:	2b6e      	cmp	r3, #110	; 0x6e
 800e750:	f040 80eb 	bne.w	800e92a <d_encoding+0x656>
 800e754:	f7ff fdbe 	bl	800e2d4 <d_encoding>
 800e758:	2300      	movs	r3, #0
 800e75a:	4602      	mov	r2, r0
 800e75c:	2148      	movs	r1, #72	; 0x48
 800e75e:	4628      	mov	r0, r5
 800e760:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e764:	f7f8 ba18 	b.w	8006b98 <d_make_comp>
 800e768:	2176      	movs	r1, #118	; 0x76
 800e76a:	4628      	mov	r0, r5
 800e76c:	f7f8 fd16 	bl	800719c <d_call_offset>
 800e770:	2800      	cmp	r0, #0
 800e772:	f43f adea 	beq.w	800e34a <d_encoding+0x76>
 800e776:	2100      	movs	r1, #0
 800e778:	4628      	mov	r0, r5
 800e77a:	f7ff fdab 	bl	800e2d4 <d_encoding>
 800e77e:	2300      	movs	r3, #0
 800e780:	4602      	mov	r2, r0
 800e782:	2110      	movs	r1, #16
 800e784:	4628      	mov	r0, r5
 800e786:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e78a:	f7f8 ba05 	b.w	8006b98 <d_make_comp>
 800e78e:	2100      	movs	r1, #0
 800e790:	4628      	mov	r0, r5
 800e792:	f7f8 fd03 	bl	800719c <d_call_offset>
 800e796:	2800      	cmp	r0, #0
 800e798:	f43f add7 	beq.w	800e34a <d_encoding+0x76>
 800e79c:	2100      	movs	r1, #0
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f7f8 fcfc 	bl	800719c <d_call_offset>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	f43f add0 	beq.w	800e34a <d_encoding+0x76>
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	f7ff fd91 	bl	800e2d4 <d_encoding>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	2111      	movs	r1, #17
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7be:	f7f8 b9eb 	b.w	8006b98 <d_make_comp>
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f7ff fbc0 	bl	800df48 <d_name>
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	2115      	movs	r1, #21
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7d4:	f7f8 b9e0 	b.w	8006b98 <d_make_comp>
 800e7d8:	2168      	movs	r1, #104	; 0x68
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f7f8 fcde 	bl	800719c <d_call_offset>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	f43f adb2 	beq.w	800e34a <d_encoding+0x76>
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff fd73 	bl	800e2d4 <d_encoding>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	210f      	movs	r1, #15
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fa:	f7f8 b9cd 	b.w	8006b98 <d_make_comp>
 800e7fe:	310f      	adds	r1, #15
 800e800:	6329      	str	r1, [r5, #48]	; 0x30
 800e802:	4628      	mov	r0, r5
 800e804:	f7fe fdae 	bl	800d364 <d_type>
 800e808:	2300      	movs	r3, #0
 800e80a:	4602      	mov	r2, r0
 800e80c:	2109      	movs	r1, #9
 800e80e:	4628      	mov	r0, r5
 800e810:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e814:	f7f8 b9c0 	b.w	8006b98 <d_make_comp>
 800e818:	310a      	adds	r1, #10
 800e81a:	6329      	str	r1, [r5, #48]	; 0x30
 800e81c:	4628      	mov	r0, r5
 800e81e:	f7fe fda1 	bl	800d364 <d_type>
 800e822:	2300      	movs	r3, #0
 800e824:	4602      	mov	r2, r0
 800e826:	210a      	movs	r1, #10
 800e828:	4628      	mov	r0, r5
 800e82a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e82e:	f7f8 b9b3 	b.w	8006b98 <d_make_comp>
 800e832:	4628      	mov	r0, r5
 800e834:	f7fe fd96 	bl	800d364 <d_type>
 800e838:	2300      	movs	r3, #0
 800e83a:	4602      	mov	r2, r0
 800e83c:	210d      	movs	r1, #13
 800e83e:	4628      	mov	r0, r5
 800e840:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e844:	f7f8 b9a8 	b.w	8006b98 <d_make_comp>
 800e848:	4628      	mov	r0, r5
 800e84a:	f7fe fd8b 	bl	800d364 <d_type>
 800e84e:	2300      	movs	r3, #0
 800e850:	4602      	mov	r2, r0
 800e852:	2112      	movs	r1, #18
 800e854:	4628      	mov	r0, r5
 800e856:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e85a:	f7f8 b99d 	b.w	8006b98 <d_make_comp>
 800e85e:	4628      	mov	r0, r5
 800e860:	f7fe fd80 	bl	800d364 <d_type>
 800e864:	2300      	movs	r3, #0
 800e866:	4602      	mov	r2, r0
 800e868:	210c      	movs	r1, #12
 800e86a:	4628      	mov	r0, r5
 800e86c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e870:	f7f8 b992 	b.w	8006b98 <d_make_comp>
 800e874:	4628      	mov	r0, r5
 800e876:	f7ff fb67 	bl	800df48 <d_name>
 800e87a:	2300      	movs	r3, #0
 800e87c:	4602      	mov	r2, r0
 800e87e:	2114      	movs	r1, #20
 800e880:	4628      	mov	r0, r5
 800e882:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e886:	f7f8 b987 	b.w	8006b98 <d_make_comp>
 800e88a:	4628      	mov	r0, r5
 800e88c:	f7fe fd6a 	bl	800d364 <d_type>
 800e890:	2300      	movs	r3, #0
 800e892:	4602      	mov	r2, r0
 800e894:	210e      	movs	r1, #14
 800e896:	4628      	mov	r0, r5
 800e898:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e89c:	f7f8 b97c 	b.w	8006b98 <d_make_comp>
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	f7fe fd5f 	bl	800d364 <d_type>
 800e8a6:	4604      	mov	r4, r0
 800e8a8:	f105 000c 	add.w	r0, r5, #12
 800e8ac:	f7f8 faba 	bl	8006e24 <d_number.isra.0>
 800e8b0:	2800      	cmp	r0, #0
 800e8b2:	f6ff ad4a 	blt.w	800e34a <d_encoding+0x76>
 800e8b6:	68eb      	ldr	r3, [r5, #12]
 800e8b8:	781a      	ldrb	r2, [r3, #0]
 800e8ba:	2a5f      	cmp	r2, #95	; 0x5f
 800e8bc:	f47f ad45 	bne.w	800e34a <d_encoding+0x76>
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	60eb      	str	r3, [r5, #12]
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	f7fe fd4d 	bl	800d364 <d_type>
 800e8ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	1d59      	adds	r1, r3, #5
 800e8d0:	6329      	str	r1, [r5, #48]	; 0x30
 800e8d2:	4623      	mov	r3, r4
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8da:	210b      	movs	r1, #11
 800e8dc:	f7f8 b95c 	b.w	8006b98 <d_make_comp>
 800e8e0:	68eb      	ldr	r3, [r5, #12]
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	4419      	add	r1, r3
 800e8e6:	60e9      	str	r1, [r5, #12]
 800e8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ec:	787b      	ldrb	r3, [r7, #1]
 800e8ee:	2b53      	cmp	r3, #83	; 0x53
 800e8f0:	d027      	beq.n	800e942 <d_encoding+0x66e>
 800e8f2:	2b5f      	cmp	r3, #95	; 0x5f
 800e8f4:	d023      	beq.n	800e93e <d_encoding+0x66a>
 800e8f6:	2b24      	cmp	r3, #36	; 0x24
 800e8f8:	f47f ad27 	bne.w	800e34a <d_encoding+0x76>
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	696b      	ldr	r3, [r5, #20]
 800e900:	69a9      	ldr	r1, [r5, #24]
 800e902:	428b      	cmp	r3, r1
 800e904:	da1f      	bge.n	800e946 <d_encoding+0x672>
 800e906:	692c      	ldr	r4, [r5, #16]
 800e908:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e90c:	1c5f      	adds	r7, r3, #1
 800e90e:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 800e912:	616f      	str	r7, [r5, #20]
 800e914:	d017      	beq.n	800e946 <d_encoding+0x672>
 800e916:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 800e91a:	6058      	str	r0, [r3, #4]
 800e91c:	68ef      	ldr	r7, [r5, #12]
 800e91e:	3e02      	subs	r6, #2
 800e920:	3702      	adds	r7, #2
 800e922:	60ef      	str	r7, [r5, #12]
 800e924:	e6d0      	b.n	800e6c8 <d_encoding+0x3f4>
 800e926:	461a      	mov	r2, r3
 800e928:	e6d9      	b.n	800e6de <d_encoding+0x40a>
 800e92a:	f7ff fcd3 	bl	800e2d4 <d_encoding>
 800e92e:	2300      	movs	r3, #0
 800e930:	4602      	mov	r2, r0
 800e932:	2147      	movs	r1, #71	; 0x47
 800e934:	4628      	mov	r0, r5
 800e936:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e93a:	f7f8 b92d 	b.w	8006b98 <d_make_comp>
 800e93e:	202e      	movs	r0, #46	; 0x2e
 800e940:	e7dd      	b.n	800e8fe <d_encoding+0x62a>
 800e942:	202f      	movs	r0, #47	; 0x2f
 800e944:	e7db      	b.n	800e8fe <d_encoding+0x62a>
 800e946:	68eb      	ldr	r3, [r5, #12]
 800e948:	2000      	movs	r0, #0
 800e94a:	3302      	adds	r3, #2
 800e94c:	60eb      	str	r3, [r5, #12]
 800e94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e952:	bf00      	nop

0800e954 <d_expr_primary>:
 800e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e956:	68c2      	ldr	r2, [r0, #12]
 800e958:	7813      	ldrb	r3, [r2, #0]
 800e95a:	2b4c      	cmp	r3, #76	; 0x4c
 800e95c:	d001      	beq.n	800e962 <d_expr_primary+0xe>
 800e95e:	2000      	movs	r0, #0
 800e960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e962:	1c53      	adds	r3, r2, #1
 800e964:	60c3      	str	r3, [r0, #12]
 800e966:	7851      	ldrb	r1, [r2, #1]
 800e968:	4605      	mov	r5, r0
 800e96a:	295f      	cmp	r1, #95	; 0x5f
 800e96c:	d03e      	beq.n	800e9ec <d_expr_primary+0x98>
 800e96e:	295a      	cmp	r1, #90	; 0x5a
 800e970:	d043      	beq.n	800e9fa <d_expr_primary+0xa6>
 800e972:	f7fe fcf7 	bl	800d364 <d_type>
 800e976:	2800      	cmp	r0, #0
 800e978:	d0f1      	beq.n	800e95e <d_expr_primary+0xa>
 800e97a:	7803      	ldrb	r3, [r0, #0]
 800e97c:	2b27      	cmp	r3, #39	; 0x27
 800e97e:	d04a      	beq.n	800ea16 <d_expr_primary+0xc2>
 800e980:	68ee      	ldr	r6, [r5, #12]
 800e982:	7833      	ldrb	r3, [r6, #0]
 800e984:	2b6e      	cmp	r3, #110	; 0x6e
 800e986:	d04f      	beq.n	800ea28 <d_expr_primary+0xd4>
 800e988:	213b      	movs	r1, #59	; 0x3b
 800e98a:	2b45      	cmp	r3, #69	; 0x45
 800e98c:	d052      	beq.n	800ea34 <d_expr_primary+0xe0>
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d0e5      	beq.n	800e95e <d_expr_primary+0xa>
 800e992:	4633      	mov	r3, r6
 800e994:	e001      	b.n	800e99a <d_expr_primary+0x46>
 800e996:	2c00      	cmp	r4, #0
 800e998:	d0e1      	beq.n	800e95e <d_expr_primary+0xa>
 800e99a:	3301      	adds	r3, #1
 800e99c:	60eb      	str	r3, [r5, #12]
 800e99e:	781c      	ldrb	r4, [r3, #0]
 800e9a0:	2c45      	cmp	r4, #69	; 0x45
 800e9a2:	d1f8      	bne.n	800e996 <d_expr_primary+0x42>
 800e9a4:	1b9c      	subs	r4, r3, r6
 800e9a6:	696b      	ldr	r3, [r5, #20]
 800e9a8:	69aa      	ldr	r2, [r5, #24]
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	da31      	bge.n	800ea12 <d_expr_primary+0xbe>
 800e9ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e9b2:	692f      	ldr	r7, [r5, #16]
 800e9b4:	0092      	lsls	r2, r2, #2
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	eb17 0e02 	adds.w	lr, r7, r2
 800e9bc:	616b      	str	r3, [r5, #20]
 800e9be:	d028      	beq.n	800ea12 <d_expr_primary+0xbe>
 800e9c0:	b33e      	cbz	r6, 800ea12 <d_expr_primary+0xbe>
 800e9c2:	b334      	cbz	r4, 800ea12 <d_expr_primary+0xbe>
 800e9c4:	4673      	mov	r3, lr
 800e9c6:	f04f 0c00 	mov.w	ip, #0
 800e9ca:	f807 c002 	strb.w	ip, [r7, r2]
 800e9ce:	f8ce 6004 	str.w	r6, [lr, #4]
 800e9d2:	f8ce 4008 	str.w	r4, [lr, #8]
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	4628      	mov	r0, r5
 800e9da:	f7f8 f8dd 	bl	8006b98 <d_make_comp>
 800e9de:	68eb      	ldr	r3, [r5, #12]
 800e9e0:	781a      	ldrb	r2, [r3, #0]
 800e9e2:	2a45      	cmp	r2, #69	; 0x45
 800e9e4:	d1bb      	bne.n	800e95e <d_expr_primary+0xa>
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	60eb      	str	r3, [r5, #12]
 800e9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ec:	1c93      	adds	r3, r2, #2
 800e9ee:	60c3      	str	r3, [r0, #12]
 800e9f0:	7892      	ldrb	r2, [r2, #2]
 800e9f2:	2a5a      	cmp	r2, #90	; 0x5a
 800e9f4:	bf18      	it	ne
 800e9f6:	2000      	movne	r0, #0
 800e9f8:	d107      	bne.n	800ea0a <d_expr_primary+0xb6>
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	60eb      	str	r3, [r5, #12]
 800e9fe:	2100      	movs	r1, #0
 800ea00:	4628      	mov	r0, r5
 800ea02:	f7ff fc67 	bl	800e2d4 <d_encoding>
 800ea06:	68eb      	ldr	r3, [r5, #12]
 800ea08:	781a      	ldrb	r2, [r3, #0]
 800ea0a:	2a45      	cmp	r2, #69	; 0x45
 800ea0c:	d0eb      	beq.n	800e9e6 <d_expr_primary+0x92>
 800ea0e:	2000      	movs	r0, #0
 800ea10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea12:	2300      	movs	r3, #0
 800ea14:	e7df      	b.n	800e9d6 <d_expr_primary+0x82>
 800ea16:	6843      	ldr	r3, [r0, #4]
 800ea18:	7c1a      	ldrb	r2, [r3, #16]
 800ea1a:	2a00      	cmp	r2, #0
 800ea1c:	d0b0      	beq.n	800e980 <d_expr_primary+0x2c>
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ea22:	1a9b      	subs	r3, r3, r2
 800ea24:	632b      	str	r3, [r5, #48]	; 0x30
 800ea26:	e7ab      	b.n	800e980 <d_expr_primary+0x2c>
 800ea28:	1c72      	adds	r2, r6, #1
 800ea2a:	60ea      	str	r2, [r5, #12]
 800ea2c:	7873      	ldrb	r3, [r6, #1]
 800ea2e:	213c      	movs	r1, #60	; 0x3c
 800ea30:	4616      	mov	r6, r2
 800ea32:	e7aa      	b.n	800e98a <d_expr_primary+0x36>
 800ea34:	2400      	movs	r4, #0
 800ea36:	e7b6      	b.n	800e9a6 <d_expr_primary+0x52>

0800ea38 <d_demangle_callback.constprop.15>:
 800ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	b0e5      	sub	sp, #404	; 0x194
 800ea3e:	f890 9000 	ldrb.w	r9, [r0]
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800ea48:	4605      	mov	r5, r0
 800ea4a:	460e      	mov	r6, r1
 800ea4c:	607a      	str	r2, [r7, #4]
 800ea4e:	f000 80ec 	beq.w	800ec2a <d_demangle_callback.constprop.15+0x1f2>
 800ea52:	2208      	movs	r2, #8
 800ea54:	49c3      	ldr	r1, [pc, #780]	; (800ed64 <d_demangle_callback.constprop.15+0x32c>)
 800ea56:	4628      	mov	r0, r5
 800ea58:	f004 feda 	bl	8013810 <strncmp>
 800ea5c:	b978      	cbnz	r0, 800ea7e <d_demangle_callback.constprop.15+0x46>
 800ea5e:	7a2b      	ldrb	r3, [r5, #8]
 800ea60:	2b2e      	cmp	r3, #46	; 0x2e
 800ea62:	d005      	beq.n	800ea70 <d_demangle_callback.constprop.15+0x38>
 800ea64:	2b5f      	cmp	r3, #95	; 0x5f
 800ea66:	d003      	beq.n	800ea70 <d_demangle_callback.constprop.15+0x38>
 800ea68:	2b24      	cmp	r3, #36	; 0x24
 800ea6a:	d001      	beq.n	800ea70 <d_demangle_callback.constprop.15+0x38>
 800ea6c:	4680      	mov	r8, r0
 800ea6e:	e008      	b.n	800ea82 <d_demangle_callback.constprop.15+0x4a>
 800ea70:	7a6b      	ldrb	r3, [r5, #9]
 800ea72:	2b44      	cmp	r3, #68	; 0x44
 800ea74:	f000 80e9 	beq.w	800ec4a <d_demangle_callback.constprop.15+0x212>
 800ea78:	2b49      	cmp	r3, #73	; 0x49
 800ea7a:	f000 80e6 	beq.w	800ec4a <d_demangle_callback.constprop.15+0x212>
 800ea7e:	f04f 0800 	mov.w	r8, #0
 800ea82:	4628      	mov	r0, r5
 800ea84:	f000 f9ea 	bl	800ee5c <strlen>
 800ea88:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 800ea8c:	0083      	lsls	r3, r0, #2
 800ea8e:	eb03 020a 	add.w	r2, r3, sl
 800ea92:	0092      	lsls	r2, r2, #2
 800ea94:	3208      	adds	r2, #8
 800ea96:	ebad 0d02 	sub.w	sp, sp, r2
 800ea9a:	46eb      	mov	fp, sp
 800ea9c:	330a      	adds	r3, #10
 800ea9e:	f023 0307 	bic.w	r3, r3, #7
 800eaa2:	2400      	movs	r4, #0
 800eaa4:	ebad 0d03 	sub.w	sp, sp, r3
 800eaa8:	182a      	adds	r2, r5, r0
 800eaaa:	2311      	movs	r3, #17
 800eaac:	f1b8 0f01 	cmp.w	r8, #1
 800eab0:	f8c7 b020 	str.w	fp, [r7, #32]
 800eab4:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
 800eab8:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800eabc:	613d      	str	r5, [r7, #16]
 800eabe:	61fd      	str	r5, [r7, #28]
 800eac0:	6378      	str	r0, [r7, #52]	; 0x34
 800eac2:	617a      	str	r2, [r7, #20]
 800eac4:	61bb      	str	r3, [r7, #24]
 800eac6:	627c      	str	r4, [r7, #36]	; 0x24
 800eac8:	633c      	str	r4, [r7, #48]	; 0x30
 800eaca:	63bc      	str	r4, [r7, #56]	; 0x38
 800eacc:	63fc      	str	r4, [r7, #60]	; 0x3c
 800eace:	643c      	str	r4, [r7, #64]	; 0x40
 800ead0:	647c      	str	r4, [r7, #68]	; 0x44
 800ead2:	64bc      	str	r4, [r7, #72]	; 0x48
 800ead4:	f000 80b0 	beq.w	800ec38 <d_demangle_callback.constprop.15+0x200>
 800ead8:	f0c0 80cf 	bcc.w	800ec7a <d_demangle_callback.constprop.15+0x242>
 800eadc:	f1b8 0f03 	cmp.w	r8, #3
 800eae0:	f200 80cb 	bhi.w	800ec7a <d_demangle_callback.constprop.15+0x242>
 800eae4:	7aea      	ldrb	r2, [r5, #11]
 800eae6:	f1b8 0f02 	cmp.w	r8, #2
 800eaea:	f105 030b 	add.w	r3, r5, #11
 800eaee:	bf14      	ite	ne
 800eaf0:	f04f 0943 	movne.w	r9, #67	; 0x43
 800eaf4:	f04f 0942 	moveq.w	r9, #66	; 0x42
 800eaf8:	2a5f      	cmp	r2, #95	; 0x5f
 800eafa:	61fb      	str	r3, [r7, #28]
 800eafc:	f000 80b0 	beq.w	800ec60 <d_demangle_callback.constprop.15+0x228>
 800eb00:	4618      	mov	r0, r3
 800eb02:	603b      	str	r3, [r7, #0]
 800eb04:	f000 f9aa 	bl	800ee5c <strlen>
 800eb08:	f1ba 0f00 	cmp.w	sl, #0
 800eb0c:	f340 80be 	ble.w	800ec8c <d_demangle_callback.constprop.15+0x254>
 800eb10:	2201      	movs	r2, #1
 800eb12:	627a      	str	r2, [r7, #36]	; 0x24
 800eb14:	f1bb 0f00 	cmp.w	fp, #0
 800eb18:	f000 80b8 	beq.w	800ec8c <d_demangle_callback.constprop.15+0x254>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	f000 80b5 	beq.w	800ec8c <d_demangle_callback.constprop.15+0x254>
 800eb22:	2200      	movs	r2, #0
 800eb24:	f88b 2000 	strb.w	r2, [fp]
 800eb28:	465a      	mov	r2, fp
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	f8cb 0008 	str.w	r0, [fp, #8]
 800eb30:	f8cb 3004 	str.w	r3, [fp, #4]
 800eb34:	4649      	mov	r1, r9
 800eb36:	2300      	movs	r3, #0
 800eb38:	f107 0010 	add.w	r0, r7, #16
 800eb3c:	f7f8 f82c 	bl	8006b98 <d_make_comp>
 800eb40:	69fc      	ldr	r4, [r7, #28]
 800eb42:	4605      	mov	r5, r0
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 f989 	bl	800ee5c <strlen>
 800eb4a:	1823      	adds	r3, r4, r0
 800eb4c:	61fb      	str	r3, [r7, #28]
 800eb4e:	f814 9000 	ldrb.w	r9, [r4, r0]
 800eb52:	f1b9 0f00 	cmp.w	r9, #0
 800eb56:	d172      	bne.n	800ec3e <d_demangle_callback.constprop.15+0x206>
 800eb58:	2d00      	cmp	r5, #0
 800eb5a:	d070      	beq.n	800ec3e <d_demangle_callback.constprop.15+0x206>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800eb62:	462a      	mov	r2, r5
 800eb64:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800eb68:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 800eb6c:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 800eb70:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 800eb74:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800eb78:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800eb7c:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 800eb80:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800eb84:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 800eb88:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 800eb8c:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 800eb90:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 800eb94:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 800eb98:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 800eb9c:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 800eba0:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 800eba4:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 800eba8:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 800ebac:	f7f8 f8b6 	bl	8006d1c <d_count_templates_scopes>
 800ebb0:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 800ebb4:	466e      	mov	r6, sp
 800ebb6:	00cb      	lsls	r3, r1, #3
 800ebb8:	3308      	adds	r3, #8
 800ebba:	ebad 0d03 	sub.w	sp, sp, r3
 800ebbe:	4668      	mov	r0, sp
 800ebc0:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800ebc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800ebc8:	fb02 f101 	mul.w	r1, r2, r1
 800ebcc:	00ca      	lsls	r2, r1, #3
 800ebce:	3208      	adds	r2, #8
 800ebd0:	ebad 0d02 	sub.w	sp, sp, r2
 800ebd4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 800ebd8:	462a      	mov	r2, r5
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 800ebe0:	60fb      	str	r3, [r7, #12]
 800ebe2:	2111      	movs	r1, #17
 800ebe4:	f107 0308 	add.w	r3, r7, #8
 800ebe8:	f8c4 d134 	str.w	sp, [r4, #308]	; 0x134
 800ebec:	60bd      	str	r5, [r7, #8]
 800ebee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800ebf2:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 800ebf6:	f7f8 fba1 	bl	800733c <d_print_comp_inner>
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	4620      	mov	r0, r4
 800ebfe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800ec02:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800ec06:	46b5      	mov	sp, r6
 800ec08:	f804 9001 	strb.w	r9, [r4, r1]
 800ec0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800ec10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800ec14:	4798      	blx	r3
 800ec16:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800ec1a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800ec1e:	fab0 f080 	clz	r0, r0
 800ec22:	0940      	lsrs	r0, r0, #5
 800ec24:	46bd      	mov	sp, r7
 800ec26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec2a:	7843      	ldrb	r3, [r0, #1]
 800ec2c:	2b5a      	cmp	r3, #90	; 0x5a
 800ec2e:	f47f af10 	bne.w	800ea52 <d_demangle_callback.constprop.15+0x1a>
 800ec32:	f04f 0801 	mov.w	r8, #1
 800ec36:	e724      	b.n	800ea82 <d_demangle_callback.constprop.15+0x4a>
 800ec38:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800ec3c:	d028      	beq.n	800ec90 <d_demangle_callback.constprop.15+0x258>
 800ec3e:	2000      	movs	r0, #0
 800ec40:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800ec44:	46bd      	mov	sp, r7
 800ec46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec4a:	7aaa      	ldrb	r2, [r5, #10]
 800ec4c:	2a5f      	cmp	r2, #95	; 0x5f
 800ec4e:	f47f af16 	bne.w	800ea7e <d_demangle_callback.constprop.15+0x46>
 800ec52:	2b49      	cmp	r3, #73	; 0x49
 800ec54:	bf14      	ite	ne
 800ec56:	f04f 0803 	movne.w	r8, #3
 800ec5a:	f04f 0802 	moveq.w	r8, #2
 800ec5e:	e710      	b.n	800ea82 <d_demangle_callback.constprop.15+0x4a>
 800ec60:	7b2a      	ldrb	r2, [r5, #12]
 800ec62:	2a5a      	cmp	r2, #90	; 0x5a
 800ec64:	f47f af4c 	bne.w	800eb00 <d_demangle_callback.constprop.15+0xc8>
 800ec68:	350d      	adds	r5, #13
 800ec6a:	4621      	mov	r1, r4
 800ec6c:	f107 0010 	add.w	r0, r7, #16
 800ec70:	61fd      	str	r5, [r7, #28]
 800ec72:	f7ff fb2f 	bl	800e2d4 <d_encoding>
 800ec76:	4602      	mov	r2, r0
 800ec78:	e75c      	b.n	800eb34 <d_demangle_callback.constprop.15+0xfc>
 800ec7a:	f107 0010 	add.w	r0, r7, #16
 800ec7e:	f7fe fb71 	bl	800d364 <d_type>
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	4605      	mov	r5, r0
 800ec86:	f893 9000 	ldrb.w	r9, [r3]
 800ec8a:	e762      	b.n	800eb52 <d_demangle_callback.constprop.15+0x11a>
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	e751      	b.n	800eb34 <d_demangle_callback.constprop.15+0xfc>
 800ec90:	786b      	ldrb	r3, [r5, #1]
 800ec92:	2b5a      	cmp	r3, #90	; 0x5a
 800ec94:	d1d3      	bne.n	800ec3e <d_demangle_callback.constprop.15+0x206>
 800ec96:	3502      	adds	r5, #2
 800ec98:	4641      	mov	r1, r8
 800ec9a:	f107 0010 	add.w	r0, r7, #16
 800ec9e:	61fd      	str	r5, [r7, #28]
 800eca0:	f7ff fb18 	bl	800e2d4 <d_encoding>
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	4605      	mov	r5, r0
 800eca8:	07db      	lsls	r3, r3, #31
 800ecaa:	d556      	bpl.n	800ed5a <d_demangle_callback.constprop.15+0x322>
 800ecac:	69f8      	ldr	r0, [r7, #28]
 800ecae:	f890 9000 	ldrb.w	r9, [r0]
 800ecb2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800ecb6:	f47f af4c 	bne.w	800eb52 <d_demangle_callback.constprop.15+0x11a>
 800ecba:	7843      	ldrb	r3, [r0, #1]
 800ecbc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ecc0:	2a19      	cmp	r2, #25
 800ecc2:	d93d      	bls.n	800ed40 <d_demangle_callback.constprop.15+0x308>
 800ecc4:	2b5f      	cmp	r3, #95	; 0x5f
 800ecc6:	d03b      	beq.n	800ed40 <d_demangle_callback.constprop.15+0x308>
 800ecc8:	3b30      	subs	r3, #48	; 0x30
 800ecca:	2b09      	cmp	r3, #9
 800eccc:	d845      	bhi.n	800ed5a <d_demangle_callback.constprop.15+0x322>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	7802      	ldrb	r2, [r0, #0]
 800ecd2:	2a2e      	cmp	r2, #46	; 0x2e
 800ecd4:	d111      	bne.n	800ecfa <d_demangle_callback.constprop.15+0x2c2>
 800ecd6:	785a      	ldrb	r2, [r3, #1]
 800ecd8:	3a30      	subs	r2, #48	; 0x30
 800ecda:	2a09      	cmp	r2, #9
 800ecdc:	d80d      	bhi.n	800ecfa <d_demangle_callback.constprop.15+0x2c2>
 800ecde:	789a      	ldrb	r2, [r3, #2]
 800ece0:	3302      	adds	r3, #2
 800ece2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ece6:	2909      	cmp	r1, #9
 800ece8:	d8f3      	bhi.n	800ecd2 <d_demangle_callback.constprop.15+0x29a>
 800ecea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ecee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ecf2:	2909      	cmp	r1, #9
 800ecf4:	d9f9      	bls.n	800ecea <d_demangle_callback.constprop.15+0x2b2>
 800ecf6:	2a2e      	cmp	r2, #46	; 0x2e
 800ecf8:	d0ed      	beq.n	800ecd6 <d_demangle_callback.constprop.15+0x29e>
 800ecfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ecfe:	61fb      	str	r3, [r7, #28]
 800ed00:	428a      	cmp	r2, r1
 800ed02:	da1b      	bge.n	800ed3c <d_demangle_callback.constprop.15+0x304>
 800ed04:	6a39      	ldr	r1, [r7, #32]
 800ed06:	f102 0e01 	add.w	lr, r2, #1
 800ed0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ed0e:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 800ed12:	eb11 0e82 	adds.w	lr, r1, r2, lsl #2
 800ed16:	d011      	beq.n	800ed3c <d_demangle_callback.constprop.15+0x304>
 800ed18:	ebb3 0c00 	subs.w	ip, r3, r0
 800ed1c:	d00e      	beq.n	800ed3c <d_demangle_callback.constprop.15+0x304>
 800ed1e:	4673      	mov	r3, lr
 800ed20:	f801 4022 	strb.w	r4, [r1, r2, lsl #2]
 800ed24:	f8ce 0004 	str.w	r0, [lr, #4]
 800ed28:	f8ce c008 	str.w	ip, [lr, #8]
 800ed2c:	462a      	mov	r2, r5
 800ed2e:	214b      	movs	r1, #75	; 0x4b
 800ed30:	f107 0010 	add.w	r0, r7, #16
 800ed34:	f7f7 ff30 	bl	8006b98 <d_make_comp>
 800ed38:	4605      	mov	r5, r0
 800ed3a:	e7b7      	b.n	800ecac <d_demangle_callback.constprop.15+0x274>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	e7f5      	b.n	800ed2c <d_demangle_callback.constprop.15+0x2f4>
 800ed40:	1c81      	adds	r1, r0, #2
 800ed42:	780a      	ldrb	r2, [r1, #0]
 800ed44:	460b      	mov	r3, r1
 800ed46:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800ed4a:	f1be 0f19 	cmp.w	lr, #25
 800ed4e:	f101 0101 	add.w	r1, r1, #1
 800ed52:	d9f6      	bls.n	800ed42 <d_demangle_callback.constprop.15+0x30a>
 800ed54:	2a5f      	cmp	r2, #95	; 0x5f
 800ed56:	d0f4      	beq.n	800ed42 <d_demangle_callback.constprop.15+0x30a>
 800ed58:	e7bb      	b.n	800ecd2 <d_demangle_callback.constprop.15+0x29a>
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	f893 9000 	ldrb.w	r9, [r3]
 800ed60:	e6f7      	b.n	800eb52 <d_demangle_callback.constprop.15+0x11a>
 800ed62:	bf00      	nop
 800ed64:	08015f40 	.word	0x08015f40

0800ed68 <__cxa_demangle>:
 800ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6c:	b084      	sub	sp, #16
 800ed6e:	b370      	cbz	r0, 800edce <__cxa_demangle+0x66>
 800ed70:	b101      	cbz	r1, 800ed74 <__cxa_demangle+0xc>
 800ed72:	b362      	cbz	r2, 800edce <__cxa_demangle+0x66>
 800ed74:	2400      	movs	r4, #0
 800ed76:	4617      	mov	r7, r2
 800ed78:	460d      	mov	r5, r1
 800ed7a:	466a      	mov	r2, sp
 800ed7c:	4928      	ldr	r1, [pc, #160]	; (800ee20 <__cxa_demangle+0xb8>)
 800ed7e:	461e      	mov	r6, r3
 800ed80:	9400      	str	r4, [sp, #0]
 800ed82:	9401      	str	r4, [sp, #4]
 800ed84:	9402      	str	r4, [sp, #8]
 800ed86:	9403      	str	r4, [sp, #12]
 800ed88:	f7ff fe56 	bl	800ea38 <d_demangle_callback.constprop.15>
 800ed8c:	b368      	cbz	r0, 800edea <__cxa_demangle+0x82>
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	b1d3      	cbz	r3, 800edc8 <__cxa_demangle+0x60>
 800ed92:	f04f 0801 	mov.w	r8, #1
 800ed96:	9c00      	ldr	r4, [sp, #0]
 800ed98:	b3ac      	cbz	r4, 800ee06 <__cxa_demangle+0x9e>
 800ed9a:	b38d      	cbz	r5, 800ee00 <__cxa_demangle+0x98>
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	f000 f85d 	bl	800ee5c <strlen>
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	4298      	cmp	r0, r3
 800eda6:	d21a      	bcs.n	800edde <__cxa_demangle+0x76>
 800eda8:	1c42      	adds	r2, r0, #1
 800edaa:	4621      	mov	r1, r4
 800edac:	4628      	mov	r0, r5
 800edae:	f004 fb78 	bl	80134a2 <memcpy>
 800edb2:	4620      	mov	r0, r4
 800edb4:	f004 fb5e 	bl	8013474 <free>
 800edb8:	462c      	mov	r4, r5
 800edba:	b376      	cbz	r6, 800ee1a <__cxa_demangle+0xb2>
 800edbc:	4620      	mov	r0, r4
 800edbe:	2300      	movs	r3, #0
 800edc0:	6033      	str	r3, [r6, #0]
 800edc2:	b004      	add	sp, #16
 800edc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800edcc:	e7e3      	b.n	800ed96 <__cxa_demangle+0x2e>
 800edce:	b19b      	cbz	r3, 800edf8 <__cxa_demangle+0x90>
 800edd0:	f06f 0202 	mvn.w	r2, #2
 800edd4:	2000      	movs	r0, #0
 800edd6:	601a      	str	r2, [r3, #0]
 800edd8:	b004      	add	sp, #16
 800edda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edde:	4628      	mov	r0, r5
 800ede0:	f004 fb48 	bl	8013474 <free>
 800ede4:	f8c7 8000 	str.w	r8, [r7]
 800ede8:	e7e7      	b.n	800edba <__cxa_demangle+0x52>
 800edea:	9800      	ldr	r0, [sp, #0]
 800edec:	f004 fb42 	bl	8013474 <free>
 800edf0:	b116      	cbz	r6, 800edf8 <__cxa_demangle+0x90>
 800edf2:	f06f 0301 	mvn.w	r3, #1
 800edf6:	6033      	str	r3, [r6, #0]
 800edf8:	2000      	movs	r0, #0
 800edfa:	b004      	add	sp, #16
 800edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee00:	2f00      	cmp	r7, #0
 800ee02:	d1ef      	bne.n	800ede4 <__cxa_demangle+0x7c>
 800ee04:	e7d9      	b.n	800edba <__cxa_demangle+0x52>
 800ee06:	2e00      	cmp	r6, #0
 800ee08:	d0f6      	beq.n	800edf8 <__cxa_demangle+0x90>
 800ee0a:	f1b8 0f01 	cmp.w	r8, #1
 800ee0e:	d1f0      	bne.n	800edf2 <__cxa_demangle+0x8a>
 800ee10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee14:	4620      	mov	r0, r4
 800ee16:	6033      	str	r3, [r6, #0]
 800ee18:	e7d3      	b.n	800edc2 <__cxa_demangle+0x5a>
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	e7d1      	b.n	800edc2 <__cxa_demangle+0x5a>
 800ee1e:	bf00      	nop
 800ee20:	080072c1 	.word	0x080072c1

0800ee24 <__gcclibcxx_demangle_callback>:
 800ee24:	b160      	cbz	r0, 800ee40 <__gcclibcxx_demangle_callback+0x1c>
 800ee26:	b508      	push	{r3, lr}
 800ee28:	b139      	cbz	r1, 800ee3a <__gcclibcxx_demangle_callback+0x16>
 800ee2a:	f7ff fe05 	bl	800ea38 <d_demangle_callback.constprop.15>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	bf0c      	ite	eq
 800ee32:	f06f 0001 	mvneq.w	r0, #1
 800ee36:	2000      	movne	r0, #0
 800ee38:	bd08      	pop	{r3, pc}
 800ee3a:	f06f 0002 	mvn.w	r0, #2
 800ee3e:	bd08      	pop	{r3, pc}
 800ee40:	f06f 0002 	mvn.w	r0, #2
 800ee44:	4770      	bx	lr
 800ee46:	bf00      	nop

0800ee48 <strcmp>:
 800ee48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee50:	2a01      	cmp	r2, #1
 800ee52:	bf28      	it	cs
 800ee54:	429a      	cmpcs	r2, r3
 800ee56:	d0f7      	beq.n	800ee48 <strcmp>
 800ee58:	1ad0      	subs	r0, r2, r3
 800ee5a:	4770      	bx	lr

0800ee5c <strlen>:
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee62:	2a00      	cmp	r2, #0
 800ee64:	d1fb      	bne.n	800ee5e <strlen+0x2>
 800ee66:	1a18      	subs	r0, r3, r0
 800ee68:	3801      	subs	r0, #1
 800ee6a:	4770      	bx	lr

0800ee6c <Reset_Handler>:
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	e003      	b.n	800ee78 <LoopCopyDataInit>

0800ee70 <CopyDataInit>:
 800ee70:	4b0b      	ldr	r3, [pc, #44]	; (800eea0 <LoopFillZerobss+0x14>)
 800ee72:	585b      	ldr	r3, [r3, r1]
 800ee74:	5043      	str	r3, [r0, r1]
 800ee76:	3104      	adds	r1, #4

0800ee78 <LoopCopyDataInit>:
 800ee78:	480a      	ldr	r0, [pc, #40]	; (800eea4 <LoopFillZerobss+0x18>)
 800ee7a:	4b0b      	ldr	r3, [pc, #44]	; (800eea8 <LoopFillZerobss+0x1c>)
 800ee7c:	1842      	adds	r2, r0, r1
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d3f6      	bcc.n	800ee70 <CopyDataInit>
 800ee82:	4a0a      	ldr	r2, [pc, #40]	; (800eeac <LoopFillZerobss+0x20>)
 800ee84:	e002      	b.n	800ee8c <LoopFillZerobss>

0800ee86 <FillZerobss>:
 800ee86:	2300      	movs	r3, #0
 800ee88:	f842 3b04 	str.w	r3, [r2], #4

0800ee8c <LoopFillZerobss>:
 800ee8c:	4b08      	ldr	r3, [pc, #32]	; (800eeb0 <LoopFillZerobss+0x24>)
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d3f9      	bcc.n	800ee86 <FillZerobss>
 800ee92:	f7f1 f9d3 	bl	800023c <SystemInit>
 800ee96:	f004 fabf 	bl	8013418 <__libc_init_array>
 800ee9a:	f001 f8e5 	bl	8010068 <main>
 800ee9e:	4770      	bx	lr
 800eea0:	08016bf8 	.word	0x08016bf8
 800eea4:	20000000 	.word	0x20000000
 800eea8:	2000009c 	.word	0x2000009c
 800eeac:	200000a0 	.word	0x200000a0
 800eeb0:	20000d24 	.word	0x20000d24

0800eeb4 <ADC1_2_IRQHandler>:
 800eeb4:	e7fe      	b.n	800eeb4 <ADC1_2_IRQHandler>

0800eeb6 <std_msgs::Time::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800eeb6:	6843      	ldr	r3, [r0, #4]
 800eeb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800eeba:	6843      	ldr	r3, [r0, #4]
 800eebc:	0a1b      	lsrs	r3, r3, #8
 800eebe:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800eec0:	88c3      	ldrh	r3, [r0, #6]
 800eec2:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800eec4:	79c3      	ldrb	r3, [r0, #7]
 800eec6:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800eec8:	6883      	ldr	r3, [r0, #8]
 800eeca:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800eecc:	6883      	ldr	r3, [r0, #8]
 800eece:	0a1b      	lsrs	r3, r3, #8
 800eed0:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800eed2:	8943      	ldrh	r3, [r0, #10]
 800eed4:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800eed6:	7ac3      	ldrb	r3, [r0, #11]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800eed8:	2008      	movs	r0, #8
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800eeda:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800eedc:	4770      	bx	lr

0800eede <std_msgs::Time::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800eede:	780b      	ldrb	r3, [r1, #0]
 800eee0:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800eee2:	784a      	ldrb	r2, [r1, #1]
 800eee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eee8:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800eeea:	788a      	ldrb	r2, [r1, #2]
 800eeec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eef0:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800eef2:	78ca      	ldrb	r2, [r1, #3]
 800eef4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eef8:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800eefa:	790b      	ldrb	r3, [r1, #4]
 800eefc:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800eefe:	794a      	ldrb	r2, [r1, #5]
 800ef00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef04:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ef06:	798a      	ldrb	r2, [r1, #6]
 800ef08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef0c:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ef0e:	79ca      	ldrb	r2, [r1, #7]
 800ef10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef14:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 800ef16:	2008      	movs	r0, #8
 800ef18:	4770      	bx	lr
	...

0800ef1c <std_msgs::Time::getType()>:

    const char * getType(){ return "std_msgs/Time"; };
 800ef1c:	4800      	ldr	r0, [pc, #0]	; (800ef20 <std_msgs::Time::getType()+0x4>)
 800ef1e:	4770      	bx	lr
 800ef20:	080156dc 	.word	0x080156dc

0800ef24 <std_msgs::Time::getMD5()>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800ef24:	4800      	ldr	r0, [pc, #0]	; (800ef28 <std_msgs::Time::getMD5()+0x4>)
 800ef26:	4770      	bx	lr
 800ef28:	080156ea 	.word	0x080156ea

0800ef2c <rosserial_msgs::TopicInfo::getType()>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800ef2c:	4800      	ldr	r0, [pc, #0]	; (800ef30 <rosserial_msgs::TopicInfo::getType()+0x4>)
 800ef2e:	4770      	bx	lr
 800ef30:	0801570b 	.word	0x0801570b

0800ef34 <rosserial_msgs::TopicInfo::getMD5()>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800ef34:	4800      	ldr	r0, [pc, #0]	; (800ef38 <rosserial_msgs::TopicInfo::getMD5()+0x4>)
 800ef36:	4770      	bx	lr
 800ef38:	08015724 	.word	0x08015724

0800ef3c <rosserial_msgs::Log::getType()>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/Log"; };
 800ef3c:	4800      	ldr	r0, [pc, #0]	; (800ef40 <rosserial_msgs::Log::getType()+0x4>)
 800ef3e:	4770      	bx	lr
 800ef40:	08015745 	.word	0x08015745

0800ef44 <rosserial_msgs::Log::getMD5()>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800ef44:	4800      	ldr	r0, [pc, #0]	; (800ef48 <rosserial_msgs::Log::getMD5()+0x4>)
 800ef46:	4770      	bx	lr
 800ef48:	08015758 	.word	0x08015758

0800ef4c <rosserial_msgs::RequestParamRequest::getType()>:
      this->name = (char *)(inbuffer + offset-1);
      offset += length_name;
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800ef4c:	4800      	ldr	r0, [pc, #0]	; (800ef50 <rosserial_msgs::RequestParamRequest::getType()+0x4>)
 800ef4e:	4770      	bx	lr
 800ef50:	080148b0 	.word	0x080148b0

0800ef54 <rosserial_msgs::RequestParamRequest::getMD5()>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 800ef54:	4800      	ldr	r0, [pc, #0]	; (800ef58 <rosserial_msgs::RequestParamRequest::getMD5()+0x4>)
 800ef56:	4770      	bx	lr
 800ef58:	08015779 	.word	0x08015779

0800ef5c <rosserial_msgs::RequestParamResponse::getType()>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800ef5c:	4800      	ldr	r0, [pc, #0]	; (800ef60 <rosserial_msgs::RequestParamResponse::getType()+0x4>)
 800ef5e:	4770      	bx	lr
 800ef60:	080148b0 	.word	0x080148b0

0800ef64 <rosserial_msgs::RequestParamResponse::getMD5()>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800ef64:	4800      	ldr	r0, [pc, #0]	; (800ef68 <rosserial_msgs::RequestParamResponse::getMD5()+0x4>)
 800ef66:	4770      	bx	lr
 800ef68:	0801579a 	.word	0x0801579a

0800ef6c <std_msgs::UInt8::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800ef6c:	7903      	ldrb	r3, [r0, #4]
      offset += sizeof(this->data);
      return offset;
    }
 800ef6e:	2001      	movs	r0, #1
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800ef70:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 800ef72:	4770      	bx	lr

0800ef74 <std_msgs::UInt8::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800ef74:	780b      	ldrb	r3, [r1, #0]
 800ef76:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 800ef78:	2001      	movs	r0, #1
 800ef7a:	4770      	bx	lr

0800ef7c <std_msgs::UInt8::getType()>:

    const char * getType(){ return "std_msgs/UInt8"; };
 800ef7c:	4800      	ldr	r0, [pc, #0]	; (800ef80 <std_msgs::UInt8::getType()+0x4>)
 800ef7e:	4770      	bx	lr
 800ef80:	080157bb 	.word	0x080157bb

0800ef84 <std_msgs::UInt8::getMD5()>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 800ef84:	4800      	ldr	r0, [pc, #0]	; (800ef88 <std_msgs::UInt8::getMD5()+0x4>)
 800ef86:	4770      	bx	lr
 800ef88:	080157ca 	.word	0x080157ca

0800ef8c <std_msgs::Header::getType()>:
      this->frame_id = (char *)(inbuffer + offset-1);
      offset += length_frame_id;
     return offset;
    }

    const char * getType(){ return "std_msgs/Header"; };
 800ef8c:	4800      	ldr	r0, [pc, #0]	; (800ef90 <std_msgs::Header::getType()+0x4>)
 800ef8e:	4770      	bx	lr
 800ef90:	080157eb 	.word	0x080157eb

0800ef94 <std_msgs::Header::getMD5()>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800ef94:	4800      	ldr	r0, [pc, #0]	; (800ef98 <std_msgs::Header::getMD5()+0x4>)
 800ef96:	4770      	bx	lr
 800ef98:	080157fb 	.word	0x080157fb

0800ef9c <geometry_msgs::Point::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Point"; };
 800ef9c:	4800      	ldr	r0, [pc, #0]	; (800efa0 <geometry_msgs::Point::getType()+0x4>)
 800ef9e:	4770      	bx	lr
 800efa0:	0801581c 	.word	0x0801581c

0800efa4 <geometry_msgs::Point::getMD5()>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800efa4:	4800      	ldr	r0, [pc, #0]	; (800efa8 <geometry_msgs::Point::getMD5()+0x4>)
 800efa6:	4770      	bx	lr
 800efa8:	08015830 	.word	0x08015830

0800efac <geometry_msgs::Quaternion::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 800efac:	4800      	ldr	r0, [pc, #0]	; (800efb0 <geometry_msgs::Quaternion::getType()+0x4>)
 800efae:	4770      	bx	lr
 800efb0:	08015851 	.word	0x08015851

0800efb4 <geometry_msgs::Quaternion::getMD5()>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 800efb4:	4800      	ldr	r0, [pc, #0]	; (800efb8 <geometry_msgs::Quaternion::getMD5()+0x4>)
 800efb6:	4770      	bx	lr
 800efb8:	0801586a 	.word	0x0801586a

0800efbc <geometry_msgs::Pose::getType()>:
      offset += this->position.deserialize(inbuffer + offset);
      offset += this->orientation.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Pose"; };
 800efbc:	4800      	ldr	r0, [pc, #0]	; (800efc0 <geometry_msgs::Pose::getType()+0x4>)
 800efbe:	4770      	bx	lr
 800efc0:	0801588b 	.word	0x0801588b

0800efc4 <geometry_msgs::Pose::getMD5()>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 800efc4:	4800      	ldr	r0, [pc, #0]	; (800efc8 <geometry_msgs::Pose::getMD5()+0x4>)
 800efc6:	4770      	bx	lr
 800efc8:	0801589e 	.word	0x0801589e

0800efcc <geometry_msgs::PoseWithCovariance::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
      }
     return offset;
    }

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 800efcc:	4800      	ldr	r0, [pc, #0]	; (800efd0 <geometry_msgs::PoseWithCovariance::getType()+0x4>)
 800efce:	4770      	bx	lr
 800efd0:	080158bf 	.word	0x080158bf

0800efd4 <geometry_msgs::PoseWithCovariance::getMD5()>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 800efd4:	4800      	ldr	r0, [pc, #0]	; (800efd8 <geometry_msgs::PoseWithCovariance::getMD5()+0x4>)
 800efd6:	4770      	bx	lr
 800efd8:	080158e0 	.word	0x080158e0

0800efdc <geometry_msgs::Vector3::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800efdc:	4800      	ldr	r0, [pc, #0]	; (800efe0 <geometry_msgs::Vector3::getType()+0x4>)
 800efde:	4770      	bx	lr
 800efe0:	08015901 	.word	0x08015901

0800efe4 <geometry_msgs::Vector3::getMD5()>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 800efe4:	4800      	ldr	r0, [pc, #0]	; (800efe8 <geometry_msgs::Vector3::getMD5()+0x4>)
 800efe6:	4770      	bx	lr
 800efe8:	08015830 	.word	0x08015830

0800efec <geometry_msgs::Twist::getType()>:
      offset += this->linear.deserialize(inbuffer + offset);
      offset += this->angular.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Twist"; };
 800efec:	4800      	ldr	r0, [pc, #0]	; (800eff0 <geometry_msgs::Twist::getType()+0x4>)
 800efee:	4770      	bx	lr
 800eff0:	08015917 	.word	0x08015917

0800eff4 <geometry_msgs::Twist::getMD5()>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800eff4:	4800      	ldr	r0, [pc, #0]	; (800eff8 <geometry_msgs::Twist::getMD5()+0x4>)
 800eff6:	4770      	bx	lr
 800eff8:	0801592b 	.word	0x0801592b

0800effc <geometry_msgs::TwistWithCovariance::getType()>:
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
      }
     return offset;
    }

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 800effc:	4800      	ldr	r0, [pc, #0]	; (800f000 <geometry_msgs::TwistWithCovariance::getType()+0x4>)
 800effe:	4770      	bx	lr
 800f000:	0801594c 	.word	0x0801594c

0800f004 <geometry_msgs::TwistWithCovariance::getMD5()>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 800f004:	4800      	ldr	r0, [pc, #0]	; (800f008 <geometry_msgs::TwistWithCovariance::getMD5()+0x4>)
 800f006:	4770      	bx	lr
 800f008:	0801596e 	.word	0x0801596e

0800f00c <nav_msgs::Odometry::getType()>:
      offset += this->pose.deserialize(inbuffer + offset);
      offset += this->twist.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "nav_msgs/Odometry"; };
 800f00c:	4800      	ldr	r0, [pc, #0]	; (800f010 <nav_msgs::Odometry::getType()+0x4>)
 800f00e:	4770      	bx	lr
 800f010:	0801598f 	.word	0x0801598f

0800f014 <nav_msgs::Odometry::getMD5()>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 800f014:	4800      	ldr	r0, [pc, #0]	; (800f018 <nav_msgs::Odometry::getMD5()+0x4>)
 800f016:	4770      	bx	lr
 800f018:	080159a1 	.word	0x080159a1

0800f01c <roberto_msgs::MotorState::getType()>:
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->mode);
     return offset;
    }

    const char * getType(){ return "roberto_msgs/MotorState"; };
 800f01c:	4800      	ldr	r0, [pc, #0]	; (800f020 <roberto_msgs::MotorState::getType()+0x4>)
 800f01e:	4770      	bx	lr
 800f020:	080159c2 	.word	0x080159c2

0800f024 <roberto_msgs::MotorState::getMD5()>:
    const char * getMD5(){ return "e8b5d1162b85151c49e02b8224796c0e"; };
 800f024:	4800      	ldr	r0, [pc, #0]	; (800f028 <roberto_msgs::MotorState::getMD5()+0x4>)
 800f026:	4770      	bx	lr
 800f028:	080159da 	.word	0x080159da

0800f02c <geometry_msgs::Transform::getType()>:
      offset += this->translation.deserialize(inbuffer + offset);
      offset += this->rotation.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Transform"; };
 800f02c:	4800      	ldr	r0, [pc, #0]	; (800f030 <geometry_msgs::Transform::getType()+0x4>)
 800f02e:	4770      	bx	lr
 800f030:	080159fb 	.word	0x080159fb

0800f034 <geometry_msgs::Transform::getMD5()>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 800f034:	4800      	ldr	r0, [pc, #0]	; (800f038 <geometry_msgs::Transform::getMD5()+0x4>)
 800f036:	4770      	bx	lr
 800f038:	08015a13 	.word	0x08015a13

0800f03c <geometry_msgs::TransformStamped::getType()>:
      offset += length_child_frame_id;
      offset += this->transform.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 800f03c:	4800      	ldr	r0, [pc, #0]	; (800f040 <geometry_msgs::TransformStamped::getType()+0x4>)
 800f03e:	4770      	bx	lr
 800f040:	08015a34 	.word	0x08015a34

0800f044 <geometry_msgs::TransformStamped::getMD5()>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 800f044:	4800      	ldr	r0, [pc, #0]	; (800f048 <geometry_msgs::TransformStamped::getMD5()+0x4>)
 800f046:	4770      	bx	lr
 800f048:	08015a53 	.word	0x08015a53

0800f04c <tf::tfMessage::serialize(unsigned char*) const>:
    tfMessage():
      transforms_length(0), transforms(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f050:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
 800f052:	7903      	ldrb	r3, [r0, #4]
    tfMessage():
      transforms_length(0), transforms(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f054:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
      *(outbuffer + offset++) = 0;
 800f056:	2000      	movs	r0, #0
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
 800f058:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 800f05a:	7048      	strb	r0, [r1, #1]
      *(outbuffer + offset++) = 0;
 800f05c:	7088      	strb	r0, [r1, #2]
      *(outbuffer + offset++) = 0;
 800f05e:	70c8      	strb	r0, [r1, #3]
 800f060:	2504      	movs	r5, #4
      for( uint8_t i = 0; i < transforms_length; i++){
      offset += this->transforms[i].serialize(outbuffer + offset);
 800f062:	f04f 0844 	mov.w	r8, #68	; 0x44
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < transforms_length; i++){
 800f066:	7933      	ldrb	r3, [r6, #4]
 800f068:	1c47      	adds	r7, r0, #1
 800f06a:	b2c0      	uxtb	r0, r0
 800f06c:	4283      	cmp	r3, r0
 800f06e:	d90a      	bls.n	800f086 <tf::tfMessage::serialize(unsigned char*) const+0x3a>
      offset += this->transforms[i].serialize(outbuffer + offset);
 800f070:	fb08 f000 	mul.w	r0, r8, r0
 800f074:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800f076:	1961      	adds	r1, r4, r5
 800f078:	581a      	ldr	r2, [r3, r0]
 800f07a:	4418      	add	r0, r3
 800f07c:	6812      	ldr	r2, [r2, #0]
 800f07e:	4790      	blx	r2
 800f080:	4405      	add	r5, r0
      int offset = 0;
      *(outbuffer + offset++) = transforms_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < transforms_length; i++){
 800f082:	4638      	mov	r0, r7
 800f084:	e7ef      	b.n	800f066 <tf::tfMessage::serialize(unsigned char*) const+0x1a>
      offset += this->transforms[i].serialize(outbuffer + offset);
      }
      return offset;
    }
 800f086:	4628      	mov	r0, r5
 800f088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f08c <tf::tfMessage::getType()>:
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
      }
     return offset;
    }

    const char * getType(){ return "tf/tfMessage"; };
 800f08c:	4800      	ldr	r0, [pc, #0]	; (800f090 <tf::tfMessage::getType()+0x4>)
 800f08e:	4770      	bx	lr
 800f090:	08015a74 	.word	0x08015a74

0800f094 <tf::tfMessage::getMD5()>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 800f094:	4800      	ldr	r0, [pc, #0]	; (800f098 <tf::tfMessage::getMD5()+0x4>)
 800f096:	4770      	bx	lr
 800f098:	08015a81 	.word	0x08015a81

0800f09c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::connected()>:


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
      };
 800f09c:	f890 04f4 	ldrb.w	r0, [r0, #1268]	; 0x4f4
 800f0a0:	4770      	bx	lr

0800f0a2 <ros::Subscriber<std_msgs::UInt8>::callback(unsigned char*)>:
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800f0a2:	780b      	ldrb	r3, [r1, #0]
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 800f0a4:	300c      	adds	r0, #12
 800f0a6:	7103      	strb	r3, [r0, #4]
 800f0a8:	6883      	ldr	r3, [r0, #8]
 800f0aa:	4718      	bx	r3

0800f0ac <ros::Subscriber<std_msgs::UInt8>::getEndpointType()>:
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 800f0ac:	6980      	ldr	r0, [r0, #24]
 800f0ae:	4770      	bx	lr

0800f0b0 <ros::Subscriber<std_msgs::UInt8>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 800f0b0:	4800      	ldr	r0, [pc, #0]	; (800f0b4 <ros::Subscriber<std_msgs::UInt8>::getMsgType()+0x4>)
 800f0b2:	4770      	bx	lr
 800f0b4:	080157bb 	.word	0x080157bb

0800f0b8 <ros::Subscriber<std_msgs::UInt8>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800f0b8:	4800      	ldr	r0, [pc, #0]	; (800f0bc <ros::Subscriber<std_msgs::UInt8>::getMsgMD5()+0x4>)
 800f0ba:	4770      	bx	lr
 800f0bc:	080157ca 	.word	0x080157ca

0800f0c0 <ros::Subscriber<roberto_msgs::MotorState>::getEndpointType()>:
      virtual int getEndpointType(){ return endpoint_; }
 800f0c0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800f0c2:	4770      	bx	lr

0800f0c4 <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 800f0c4:	4800      	ldr	r0, [pc, #0]	; (800f0c8 <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()+0x4>)
 800f0c6:	4770      	bx	lr
 800f0c8:	080159c2 	.word	0x080159c2

0800f0cc <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800f0cc:	4800      	ldr	r0, [pc, #0]	; (800f0d0 <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()+0x4>)
 800f0ce:	4770      	bx	lr
 800f0d0:	080159da 	.word	0x080159da

0800f0d4 <std_msgs::Header::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800f0d4:	6843      	ldr	r3, [r0, #4]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800f0d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800f0da:	6843      	ldr	r3, [r0, #4]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0dc:	4605      	mov	r5, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800f0de:	0a1b      	lsrs	r3, r3, #8
 800f0e0:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800f0e2:	88c3      	ldrh	r3, [r0, #6]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0e4:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800f0e6:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800f0e8:	79c3      	ldrb	r3, [r0, #7]
 800f0ea:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->seq);
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800f0ec:	6883      	ldr	r3, [r0, #8]
 800f0ee:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800f0f0:	6883      	ldr	r3, [r0, #8]
 800f0f2:	0a1b      	lsrs	r3, r3, #8
 800f0f4:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800f0f6:	8943      	ldrh	r3, [r0, #10]
 800f0f8:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800f0fa:	7ac3      	ldrb	r3, [r0, #11]
 800f0fc:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800f0fe:	68c3      	ldr	r3, [r0, #12]
 800f100:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800f102:	68c3      	ldr	r3, [r0, #12]
 800f104:	0a1b      	lsrs	r3, r3, #8
 800f106:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800f108:	89c3      	ldrh	r3, [r0, #14]
 800f10a:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800f10c:	7bc3      	ldrb	r3, [r0, #15]
 800f10e:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id = strlen(this->frame_id);
 800f110:	6900      	ldr	r0, [r0, #16]
 800f112:	f7ff fea3 	bl	800ee5c <strlen>
 800f116:	4606      	mov	r6, r0
 800f118:	ab02      	add	r3, sp, #8
 800f11a:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 800f11e:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800f120:	4632      	mov	r2, r6
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id = strlen(this->frame_id);
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 800f122:	60e0      	str	r0, [r4, #12]
      offset += 4;
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800f124:	6929      	ldr	r1, [r5, #16]
 800f126:	f104 0010 	add.w	r0, r4, #16
 800f12a:	f004 f9ba 	bl	80134a2 <memcpy>
      offset += length_frame_id;
      return offset;
    }
 800f12e:	f106 0010 	add.w	r0, r6, #16
 800f132:	b002      	add	sp, #8
 800f134:	bd70      	pop	{r4, r5, r6, pc}

0800f136 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f136:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 800f13a:	7903      	ldrb	r3, [r0, #4]
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f13c:	4607      	mov	r7, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 800f13e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 800f140:	2300      	movs	r3, #0
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
 800f142:	461a      	mov	r2, r3
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f144:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
 800f146:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 800f148:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 800f14a:	70cb      	strb	r3, [r1, #3]
 800f14c:	3104      	adds	r1, #4
      for( uint8_t i = 0; i < ints_length; i++){
 800f14e:	793d      	ldrb	r5, [r7, #4]
 800f150:	1c50      	adds	r0, r2, #1
 800f152:	b2d2      	uxtb	r2, r2
 800f154:	4295      	cmp	r5, r2
 800f156:	eba1 0304 	sub.w	r3, r1, r4
 800f15a:	f101 0104 	add.w	r1, r1, #4
 800f15e:	d90f      	bls.n	800f180 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x4a>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800f166:	0a1a      	lsrs	r2, r3, #8
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800f168:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800f16c:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800f170:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800f172:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800f174:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800f178:	f801 3c01 	strb.w	r3, [r1, #-1]
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < ints_length; i++){
 800f17c:	4602      	mov	r2, r0
 800f17e:	e7e6      	b.n	800f14e <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x18>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800f180:	7c3a      	ldrb	r2, [r7, #16]
      *(outbuffer + offset++) = 0;
 800f182:	18e1      	adds	r1, r4, r3
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800f184:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 800f186:	2200      	movs	r2, #0
 800f188:	3304      	adds	r3, #4
 800f18a:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 800f18c:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 800f18e:	70ca      	strb	r2, [r1, #3]
 800f190:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 800f192:	7c38      	ldrb	r0, [r7, #16]
 800f194:	1c51      	adds	r1, r2, #1
 800f196:	b2d2      	uxtb	r2, r2
 800f198:	4290      	cmp	r0, r2
 800f19a:	eba3 0604 	sub.w	r6, r3, r4
 800f19e:	f103 0304 	add.w	r3, r3, #4
 800f1a2:	d90f      	bls.n	800f1c4 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x8e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800f1a4:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800f1a6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800f1aa:	0a10      	lsrs	r0, r2, #8
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800f1ac:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800f1b0:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800f1b4:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800f1b6:	0e12      	lsrs	r2, r2, #24
 800f1b8:	f803 2c01 	strb.w	r2, [r3, #-1]
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800f1bc:	f803 0c02 	strb.w	r0, [r3, #-2]
      }
      *(outbuffer + offset++) = floats_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < floats_length; i++){
 800f1c0:	460a      	mov	r2, r1
 800f1c2:	e7e6      	b.n	800f192 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x5c>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 800f1c4:	7f3b      	ldrb	r3, [r7, #28]
      *(outbuffer + offset++) = 0;
 800f1c6:	19a2      	adds	r2, r4, r6
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 800f1c8:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 800f1ce:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 800f1d0:	3604      	adds	r6, #4
 800f1d2:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 800f1d4:	7f3a      	ldrb	r2, [r7, #28]
 800f1d6:	b2dd      	uxtb	r5, r3
 800f1d8:	42aa      	cmp	r2, r5
 800f1da:	f103 0901 	add.w	r9, r3, #1
 800f1de:	d915      	bls.n	800f20c <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0xd6>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1e6:	f7ff fe39 	bl	800ee5c <strlen>
 800f1ea:	4680      	mov	r8, r0
 800f1ec:	ab02      	add	r3, sp, #8
 800f1ee:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 800f1f2:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800f1f4:	4642      	mov	r2, r8
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_stringsi = strlen(this->strings[i]);
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 800f1f6:	51a0      	str	r0, [r4, r6]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fa:	3604      	adds	r6, #4
 800f1fc:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800f200:	19a0      	adds	r0, r4, r6
 800f202:	f004 f94e 	bl	80134a2 <memcpy>
      offset += length_stringsi;
 800f206:	4446      	add	r6, r8
      }
      *(outbuffer + offset++) = strings_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
 800f208:	464b      	mov	r3, r9
 800f20a:	e7e3      	b.n	800f1d4 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x9e>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
 800f20c:	4630      	mov	r0, r6
 800f20e:	b003      	add	sp, #12
 800f210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f214 <rosserial_msgs::RequestParamRequest::serialize(unsigned char*) const>:
    RequestParamRequest():
      name("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f214:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f216:	4606      	mov	r6, r0
    {
      int offset = 0;
      uint32_t length_name = strlen(this->name);
 800f218:	6840      	ldr	r0, [r0, #4]
    RequestParamRequest():
      name("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f21a:	460c      	mov	r4, r1
    {
      int offset = 0;
      uint32_t length_name = strlen(this->name);
 800f21c:	f7ff fe1e 	bl	800ee5c <strlen>
 800f220:	ab02      	add	r3, sp, #8
 800f222:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f226:	4605      	mov	r5, r0
      memcpy(outbuffer + offset, &length_name, sizeof(uint32_t));
 800f228:	6818      	ldr	r0, [r3, #0]
 800f22a:	4623      	mov	r3, r4
 800f22c:	f843 0b04 	str.w	r0, [r3], #4
      offset += 4;
      memcpy(outbuffer + offset, this->name, length_name);
 800f230:	462a      	mov	r2, r5
 800f232:	6871      	ldr	r1, [r6, #4]
 800f234:	4618      	mov	r0, r3
 800f236:	f004 f934 	bl	80134a2 <memcpy>
      offset += length_name;
      return offset;
    }
 800f23a:	1d28      	adds	r0, r5, #4
 800f23c:	b002      	add	sp, #8
 800f23e:	bd70      	pop	{r4, r5, r6, pc}

0800f240 <rosserial_msgs::Log::serialize(unsigned char*) const>:
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f240:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800f242:	7903      	ldrb	r3, [r0, #4]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f244:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800f246:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 800f248:	6880      	ldr	r0, [r0, #8]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f24a:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 800f24c:	f7ff fe06 	bl	800ee5c <strlen>
 800f250:	4604      	mov	r4, r0
 800f252:	ab02      	add	r3, sp, #8
 800f254:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 800f258:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800f25a:	4622      	mov	r2, r4
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 800f25c:	f8c5 0001 	str.w	r0, [r5, #1]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800f260:	68b1      	ldr	r1, [r6, #8]
 800f262:	1d68      	adds	r0, r5, #5
 800f264:	f004 f91d 	bl	80134a2 <memcpy>
      offset += length_msg;
      return offset;
    }
 800f268:	1d60      	adds	r0, r4, #5
 800f26a:	b002      	add	sp, #8
 800f26c:	bd70      	pop	{r4, r5, r6, pc}

0800f26e <rosserial_msgs::TopicInfo::serialize(unsigned char*) const>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f26e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f272:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f274:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f276:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f278:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f27a:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f27c:	0a1b      	lsrs	r3, r3, #8
 800f27e:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
 800f280:	6880      	ldr	r0, [r0, #8]
 800f282:	f7ff fdeb 	bl	800ee5c <strlen>
 800f286:	4604      	mov	r4, r0
 800f288:	ab04      	add	r3, sp, #16
 800f28a:	f843 0d0c 	str.w	r0, [r3, #-12]!
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800f28e:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f290:	4622      	mov	r2, r4
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800f292:	f8c5 0002 	str.w	r0, [r5, #2]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f296:	68b1      	ldr	r1, [r6, #8]
 800f298:	1da8      	adds	r0, r5, #6
 800f29a:	f004 f902 	bl	80134a2 <memcpy>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
 800f29e:	68f0      	ldr	r0, [r6, #12]
 800f2a0:	f7ff fddc 	bl	800ee5c <strlen>
 800f2a4:	4607      	mov	r7, r0
 800f2a6:	ab04      	add	r3, sp, #16
 800f2a8:	f843 0d08 	str.w	r0, [r3, #-8]!
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800f2ac:	6818      	ldr	r0, [r3, #0]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
      offset += length_topic_name;
 800f2ae:	f104 0806 	add.w	r8, r4, #6
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800f2b2:	f845 0008 	str.w	r0, [r5, r8]
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800f2b6:	340a      	adds	r4, #10
 800f2b8:	463a      	mov	r2, r7
 800f2ba:	68f1      	ldr	r1, [r6, #12]
 800f2bc:	1928      	adds	r0, r5, r4
 800f2be:	f004 f8f0 	bl	80134a2 <memcpy>
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
 800f2c2:	6930      	ldr	r0, [r6, #16]
 800f2c4:	f7ff fdca 	bl	800ee5c <strlen>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
 800f2c8:	443c      	add	r4, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 800f2ca:	4607      	mov	r7, r0
 800f2cc:	ab04      	add	r3, sp, #16
 800f2ce:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800f2d2:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f2d4:	463a      	mov	r2, r7
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800f2d6:	5128      	str	r0, [r5, r4]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f2d8:	3404      	adds	r4, #4
 800f2da:	1928      	adds	r0, r5, r4
 800f2dc:	6931      	ldr	r1, [r6, #16]
 800f2de:	f004 f8e0 	bl	80134a2 <memcpy>
      offset += length_md5sum;
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800f2e2:	6973      	ldr	r3, [r6, #20]
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
      offset += length_md5sum;
 800f2e4:	1938      	adds	r0, r7, r4
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800f2e6:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800f2e8:	0a1a      	lsrs	r2, r3, #8
 800f2ea:	4405      	add	r5, r0
 800f2ec:	706a      	strb	r2, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }
 800f2ee:	3004      	adds	r0, #4
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f2f0:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f2f2:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f2f4:	70aa      	strb	r2, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f2f6:	70eb      	strb	r3, [r5, #3]
      offset += sizeof(this->buffer_size);
      return offset;
    }
 800f2f8:	b004      	add	sp, #16
 800f2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f2fe <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
 800f2fe:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->name, length_name);
      offset += length_name;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f302:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
 800f304:	f853 0b04 	ldr.w	r0, [r3], #4
 800f308:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
 800f30a:	9a01      	ldr	r2, [sp, #4]
 800f30c:	1d10      	adds	r0, r2, #4
 800f30e:	1a5d      	subs	r5, r3, r1
 800f310:	42a8      	cmp	r0, r5
 800f312:	d904      	bls.n	800f31e <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)+0x20>
          inbuffer[k-1]=inbuffer[k];
 800f314:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f318:	f803 5c02 	strb.w	r5, [r3, #-2]
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
 800f31c:	e7f7      	b.n	800f30e <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)+0x10>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_name-1]=0;
 800f31e:	440a      	add	r2, r1
 800f320:	2300      	movs	r3, #0
      this->name = (char *)(inbuffer + offset-1);
 800f322:	3103      	adds	r1, #3
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_name-1]=0;
 800f324:	70d3      	strb	r3, [r2, #3]
      this->name = (char *)(inbuffer + offset-1);
 800f326:	6061      	str	r1, [r4, #4]
      offset += length_name;
     return offset;
    }
 800f328:	b003      	add	sp, #12
 800f32a:	bd30      	pop	{r4, r5, pc}

0800f32c <std_msgs::Header::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f32c:	4603      	mov	r3, r0
 800f32e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800f330:	780a      	ldrb	r2, [r1, #0]
 800f332:	f101 0410 	add.w	r4, r1, #16
 800f336:	6042      	str	r2, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f338:	7848      	ldrb	r0, [r1, #1]
 800f33a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f33e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f340:	7888      	ldrb	r0, [r1, #2]
 800f342:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f346:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f348:	78c8      	ldrb	r0, [r1, #3]
 800f34a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f34e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800f350:	790a      	ldrb	r2, [r1, #4]
 800f352:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f354:	7948      	ldrb	r0, [r1, #5]
 800f356:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f35a:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f35c:	7988      	ldrb	r0, [r1, #6]
 800f35e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f362:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f364:	79c8      	ldrb	r0, [r1, #7]
 800f366:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f36a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800f36c:	7a0a      	ldrb	r2, [r1, #8]
 800f36e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f370:	7a48      	ldrb	r0, [r1, #9]
 800f372:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f376:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f378:	7a88      	ldrb	r0, [r1, #10]
 800f37a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f37e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f380:	7ac8      	ldrb	r0, [r1, #11]
 800f382:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f386:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
 800f388:	68c8      	ldr	r0, [r1, #12]
 800f38a:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800f38c:	9a01      	ldr	r2, [sp, #4]
 800f38e:	f102 0010 	add.w	r0, r2, #16
 800f392:	1a65      	subs	r5, r4, r1
 800f394:	42a8      	cmp	r0, r5
 800f396:	d904      	bls.n	800f3a2 <std_msgs::Header::deserialize(unsigned char*)+0x76>
          inbuffer[k-1]=inbuffer[k];
 800f398:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f39c:	f804 5c02 	strb.w	r5, [r4, #-2]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800f3a0:	e7f7      	b.n	800f392 <std_msgs::Header::deserialize(unsigned char*)+0x66>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 800f3a2:	440a      	add	r2, r1
 800f3a4:	2400      	movs	r4, #0
      this->frame_id = (char *)(inbuffer + offset-1);
 800f3a6:	310f      	adds	r1, #15
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 800f3a8:	73d4      	strb	r4, [r2, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
 800f3aa:	6119      	str	r1, [r3, #16]
      offset += length_frame_id;
     return offset;
    }
 800f3ac:	b003      	add	sp, #12
 800f3ae:	bd30      	pop	{r4, r5, pc}

0800f3b0 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f3b0:	780b      	ldrb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f3b2:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f3b4:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f3b6:	784a      	ldrb	r2, [r1, #1]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f3b8:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f3ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f3be:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800f3c0:	f8d1 0002 	ldr.w	r0, [r1, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f3c4:	b085      	sub	sp, #20
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800f3c6:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f3c8:	9d01      	ldr	r5, [sp, #4]
 800f3ca:	1d8a      	adds	r2, r1, #6
 800f3cc:	1dab      	adds	r3, r5, #6
 800f3ce:	1a50      	subs	r0, r2, r1
 800f3d0:	4283      	cmp	r3, r0
 800f3d2:	d904      	bls.n	800f3de <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x2e>
          inbuffer[k-1]=inbuffer[k];
 800f3d4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f3d8:	f802 0c02 	strb.w	r0, [r2, #-2]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f3dc:	e7f7      	b.n	800f3ce <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x1e>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 800f3de:	194a      	adds	r2, r1, r5
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	7150      	strb	r0, [r2, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 800f3e4:	1d4a      	adds	r2, r1, #5
 800f3e6:	60a2      	str	r2, [r4, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800f3e8:	58c8      	ldr	r0, [r1, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f3ea:	1d1a      	adds	r2, r3, #4
      }
      inbuffer[offset+length_topic_name-1]=0;
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800f3ec:	9002      	str	r0, [sp, #8]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f3ee:	9b02      	ldr	r3, [sp, #8]
 800f3f0:	f105 000a 	add.w	r0, r5, #10
 800f3f4:	4413      	add	r3, r2
 800f3f6:	4408      	add	r0, r1
 800f3f8:	1a45      	subs	r5, r0, r1
 800f3fa:	42ab      	cmp	r3, r5
 800f3fc:	d904      	bls.n	800f408 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x58>
          inbuffer[k-1]=inbuffer[k];
 800f3fe:	f810 5b01 	ldrb.w	r5, [r0], #1
 800f402:	f800 5c02 	strb.w	r5, [r0, #-2]
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f406:	e7f7      	b.n	800f3f8 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x48>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
 800f408:	3a01      	subs	r2, #1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800f40a:	18c8      	adds	r0, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 800f40c:	440a      	add	r2, r1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800f40e:	2500      	movs	r5, #0
 800f410:	f800 5c01 	strb.w	r5, [r0, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 800f414:	60e2      	str	r2, [r4, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800f416:	6800      	ldr	r0, [r0, #0]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f418:	3304      	adds	r3, #4
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800f41a:	9003      	str	r0, [sp, #12]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f41c:	9803      	ldr	r0, [sp, #12]
 800f41e:	18ca      	adds	r2, r1, r3
 800f420:	4418      	add	r0, r3
 800f422:	1a55      	subs	r5, r2, r1
 800f424:	42a8      	cmp	r0, r5
 800f426:	d904      	bls.n	800f432 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x82>
          inbuffer[k-1]=inbuffer[k];
 800f428:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f42c:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f430:	e7f7      	b.n	800f422 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x72>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
      this->md5sum = (char *)(inbuffer + offset-1);
 800f432:	3b01      	subs	r3, #1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f434:	180d      	adds	r5, r1, r0
      this->md5sum = (char *)(inbuffer + offset-1);
 800f436:	440b      	add	r3, r1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f438:	2200      	movs	r2, #0
 800f43a:	f805 2c01 	strb.w	r2, [r5, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 800f43e:	6123      	str	r3, [r4, #16]
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800f440:	78ab      	ldrb	r3, [r5, #2]
 800f442:	786a      	ldrb	r2, [r5, #1]
 800f444:	041b      	lsls	r3, r3, #16
 800f446:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f44a:	5c0a      	ldrb	r2, [r1, r0]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800f44c:	3004      	adds	r0, #4
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800f44e:	4313      	orrs	r3, r2
 800f450:	78ea      	ldrb	r2, [r5, #3]
 800f452:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f456:	6163      	str	r3, [r4, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800f458:	b005      	add	sp, #20
 800f45a:	bd30      	pop	{r4, r5, pc}

0800f45c <rosserial_msgs::Log::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f45c:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f45e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f460:	f813 2b01 	ldrb.w	r2, [r3], #1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f464:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f466:	7102      	strb	r2, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	1d4a      	adds	r2, r1, #5
 800f46c:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800f46e:	9b01      	ldr	r3, [sp, #4]
 800f470:	1d58      	adds	r0, r3, #5
 800f472:	1a55      	subs	r5, r2, r1
 800f474:	42a8      	cmp	r0, r5
 800f476:	d904      	bls.n	800f482 <rosserial_msgs::Log::deserialize(unsigned char*)+0x26>
          inbuffer[k-1]=inbuffer[k];
 800f478:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f47c:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800f480:	e7f7      	b.n	800f472 <rosserial_msgs::Log::deserialize(unsigned char*)+0x16>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 800f482:	440b      	add	r3, r1
 800f484:	2200      	movs	r2, #0
      this->msg = (char *)(inbuffer + offset-1);
 800f486:	3104      	adds	r1, #4
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 800f488:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 800f48a:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 800f48c:	b003      	add	sp, #12
 800f48e:	bd30      	pop	{r4, r5, pc}

0800f490 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>:
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
 800f492:	780d      	ldrb	r5, [r1, #0]
      if(ints_lengthT > ints_length)
 800f494:	7903      	ldrb	r3, [r0, #4]
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f496:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 800f498:	42ab      	cmp	r3, r5
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f49a:	460e      	mov	r6, r1
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 800f49c:	d204      	bcs.n	800f4a8 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800f49e:	00a9      	lsls	r1, r5, #2
 800f4a0:	68c0      	ldr	r0, [r0, #12]
 800f4a2:	f004 f8a9 	bl	80135f8 <realloc>
 800f4a6:	60e0      	str	r0, [r4, #12]
      offset += 3;
      ints_length = ints_lengthT;
 800f4a8:	7125      	strb	r5, [r4, #4]
 800f4aa:	1d32      	adds	r2, r6, #4
 800f4ac:	2100      	movs	r1, #0
      for( uint8_t i = 0; i < ints_length; i++){
 800f4ae:	7923      	ldrb	r3, [r4, #4]
 800f4b0:	1c4f      	adds	r7, r1, #1
 800f4b2:	b2c9      	uxtb	r1, r1
 800f4b4:	428b      	cmp	r3, r1
 800f4b6:	eba2 0506 	sub.w	r5, r2, r6
 800f4ba:	f102 0204 	add.w	r2, r2, #4
 800f4be:	d914      	bls.n	800f4ea <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x5a>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
 800f4c0:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 800f4c4:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800f4c8:	041b      	lsls	r3, r3, #16
 800f4ca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800f4ce:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800f4d2:	4303      	orrs	r3, r0
 800f4d4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800f4d8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f4dc:	60a3      	str	r3, [r4, #8]
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800f4de:	68a0      	ldr	r0, [r4, #8]
 800f4e0:	68e3      	ldr	r3, [r4, #12]
 800f4e2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 800f4e6:	4639      	mov	r1, r7
 800f4e8:	e7e1      	b.n	800f4ae <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x1e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 800f4ea:	5d77      	ldrb	r7, [r6, r5]
      if(floats_lengthT > floats_length)
 800f4ec:	7c23      	ldrb	r3, [r4, #16]
 800f4ee:	42bb      	cmp	r3, r7
 800f4f0:	d204      	bcs.n	800f4fc <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x6c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800f4f2:	00b9      	lsls	r1, r7, #2
 800f4f4:	69a0      	ldr	r0, [r4, #24]
 800f4f6:	f004 f87f 	bl	80135f8 <realloc>
 800f4fa:	61a0      	str	r0, [r4, #24]
 800f4fc:	1d2b      	adds	r3, r5, #4
      offset += 3;
      floats_length = floats_lengthT;
 800f4fe:	7427      	strb	r7, [r4, #16]
 800f500:	4433      	add	r3, r6
 800f502:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < floats_length; i++){
 800f504:	7c21      	ldrb	r1, [r4, #16]
 800f506:	1c57      	adds	r7, r2, #1
 800f508:	b2d2      	uxtb	r2, r2
 800f50a:	4291      	cmp	r1, r2
 800f50c:	eba3 0506 	sub.w	r5, r3, r6
 800f510:	f103 0304 	add.w	r3, r3, #4
 800f514:	d914      	bls.n	800f540 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xb0>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f516:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800f51a:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800f51e:	0409      	lsls	r1, r1, #16
 800f520:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800f524:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800f528:	4301      	orrs	r1, r0
 800f52a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
      this->st_floats = u_st_floats.real;
 800f52e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800f532:	6161      	str	r1, [r4, #20]
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800f534:	6960      	ldr	r0, [r4, #20]
 800f536:	69a1      	ldr	r1, [r4, #24]
 800f538:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      uint8_t floats_lengthT = *(inbuffer + offset++);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      offset += 3;
      floats_length = floats_lengthT;
      for( uint8_t i = 0; i < floats_length; i++){
 800f53c:	463a      	mov	r2, r7
 800f53e:	e7e1      	b.n	800f504 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x74>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 800f540:	5d77      	ldrb	r7, [r6, r5]
      if(strings_lengthT > strings_length)
 800f542:	7f23      	ldrb	r3, [r4, #28]
 800f544:	42bb      	cmp	r3, r7
 800f546:	d204      	bcs.n	800f552 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xc2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800f548:	00b9      	lsls	r1, r7, #2
 800f54a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f54c:	f004 f854 	bl	80135f8 <realloc>
 800f550:	6260      	str	r0, [r4, #36]	; 0x24
      offset += 3;
 800f552:	1d2b      	adds	r3, r5, #4
      strings_length = strings_lengthT;
 800f554:	2500      	movs	r5, #0
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f556:	46ae      	mov	lr, r5
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
 800f558:	7727      	strb	r7, [r4, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 800f55a:	7f22      	ldrb	r2, [r4, #28]
 800f55c:	b2ef      	uxtb	r7, r5
 800f55e:	42ba      	cmp	r2, r7
 800f560:	d919      	bls.n	800f596 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x106>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800f562:	58f0      	ldr	r0, [r6, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f564:	1d1a      	adds	r2, r3, #4
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800f566:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f568:	9b01      	ldr	r3, [sp, #4]
 800f56a:	18b1      	adds	r1, r6, r2
 800f56c:	4413      	add	r3, r2
 800f56e:	1b88      	subs	r0, r1, r6
 800f570:	4283      	cmp	r3, r0
 800f572:	d904      	bls.n	800f57e <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xee>
          inbuffer[k-1]=inbuffer[k];
 800f574:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f578:	f801 0c02 	strb.w	r0, [r1, #-2]
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f57c:	e7f7      	b.n	800f56e <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xde>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
 800f57e:	3a01      	subs	r2, #1
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f580:	18f1      	adds	r1, r6, r3
      this->st_strings = (char *)(inbuffer + offset-1);
 800f582:	4432      	add	r2, r6
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f584:	f801 ec01 	strb.w	lr, [r1, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 800f588:	6222      	str	r2, [r4, #32]
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800f58a:	6a21      	ldr	r1, [r4, #32]
 800f58c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f58e:	3501      	adds	r5, #1
 800f590:	f842 1027 	str.w	r1, [r2, r7, lsl #2]
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
 800f594:	e7e1      	b.n	800f55a <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xca>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
 800f596:	4618      	mov	r0, r3
 800f598:	b003      	add	sp, #12
 800f59a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f59c:	b538      	push	{r3, r4, r5, lr}
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800f59e:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f5a2:	4605      	mov	r5, r0
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800f5a4:	460a      	mov	r2, r1
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f5a6:	4608      	mov	r0, r1
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
    if (exp != 0)
 800f5a8:	b10b      	cbz	r3, 800f5ae <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x12>
    {
      exp += 1023 - 127;
 800f5aa:	f503 7360 	add.w	r3, r3, #896	; 0x380
    }

    int32_t sig = *val;
    *(outbuffer++) = 0;
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	7029      	strb	r1, [r5, #0]
    *(outbuffer++) = 0;
 800f5b2:	7069      	strb	r1, [r5, #1]
    *(outbuffer++) = 0;
 800f5b4:	70a9      	strb	r1, [r5, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 800f5b6:	0151      	lsls	r1, r2, #5
 800f5b8:	70e9      	strb	r1, [r5, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800f5ba:	10d1      	asrs	r1, r2, #3
 800f5bc:	7129      	strb	r1, [r5, #4]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800f5be:	12d1      	asrs	r1, r2, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800f5c0:	f3c2 42c3 	ubfx	r2, r2, #19, #4
 800f5c4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    *(outbuffer++) = 0;
    *(outbuffer++) = 0;
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
 800f5c8:	7169      	strb	r1, [r5, #5]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800f5ca:	71aa      	strb	r2, [r5, #6]
    *(outbuffer++) = (exp >> 4) & 0x7F;

    // Mark negative bit as necessary.
    if (f < 0)
 800f5cc:	2100      	movs	r1, #0
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800f5ce:	f3c3 1407 	ubfx	r4, r3, #4, #8

    // Mark negative bit as necessary.
    if (f < 0)
 800f5d2:	f7f6 fb01 	bl	8005bd8 <__aeabi_fcmplt>
 800f5d6:	b908      	cbnz	r0, 800f5dc <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x40>
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800f5d8:	71ec      	strb	r4, [r5, #7]
 800f5da:	e002      	b.n	800f5e2 <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x46>

    // Mark negative bit as necessary.
    if (f < 0)
    {
      *(outbuffer - 1) |= 0x80;
 800f5dc:	f064 037f 	orn	r3, r4, #127	; 0x7f
 800f5e0:	71eb      	strb	r3, [r5, #7]
    }

    return 8;
  }
 800f5e2:	2008      	movs	r0, #8
 800f5e4:	bd38      	pop	{r3, r4, r5, pc}

0800f5e6 <roberto_msgs::MotorState::serialize(unsigned char*) const>:
      acceleration(0),
      mode(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f5e6:	b570      	push	{r4, r5, r6, lr}
 800f5e8:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f5ea:	3004      	adds	r0, #4
      acceleration(0),
      mode(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f5ec:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f5ee:	f7ff fd71 	bl	800f0d4 <std_msgs::Header::serialize(unsigned char*) const>
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 800f5f2:	69a9      	ldr	r1, [r5, #24]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f5f4:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 800f5f6:	1830      	adds	r0, r6, r0
 800f5f8:	f7ff ffd0 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f5fc:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_velocity);
 800f5fe:	69e9      	ldr	r1, [r5, #28]
 800f600:	1930      	adds	r0, r6, r4
 800f602:	f7ff ffcb 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f606:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 800f608:	6a29      	ldr	r1, [r5, #32]
 800f60a:	1930      	adds	r0, r6, r4
 800f60c:	f7ff ffc6 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f610:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->acceleration);
 800f612:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800f614:	1930      	adds	r0, r6, r4
 800f616:	f7ff ffc1 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
 800f61a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800f61e:	4420      	add	r0, r4
 800f620:	5433      	strb	r3, [r6, r0]
      offset += sizeof(this->mode);
      return offset;
    }
 800f622:	3001      	adds	r0, #1
 800f624:	bd70      	pop	{r4, r5, r6, pc}

0800f626 <geometry_msgs::Vector3::serialize(unsigned char*) const>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f626:	b570      	push	{r4, r5, r6, lr}
 800f628:	460d      	mov	r5, r1
 800f62a:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f62c:	6841      	ldr	r1, [r0, #4]
 800f62e:	4628      	mov	r0, r5
 800f630:	f7ff ffb4 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f634:	68b1      	ldr	r1, [r6, #8]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f636:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f638:	1828      	adds	r0, r5, r0
 800f63a:	f7ff ffaf 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f63e:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800f640:	68f1      	ldr	r1, [r6, #12]
 800f642:	1928      	adds	r0, r5, r4
 800f644:	f7ff ffaa 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      return offset;
    }
 800f648:	4420      	add	r0, r4
 800f64a:	bd70      	pop	{r4, r5, r6, pc}

0800f64c <geometry_msgs::Twist::serialize(unsigned char*) const>:
      linear(),
      angular()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->linear.serialize(outbuffer + offset);
 800f650:	3004      	adds	r0, #4
      linear(),
      angular()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f652:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->linear.serialize(outbuffer + offset);
 800f654:	f7ff ffe7 	bl	800f626 <geometry_msgs::Vector3::serialize(unsigned char*) const>
 800f658:	4604      	mov	r4, r0
      offset += this->angular.serialize(outbuffer + offset);
 800f65a:	1831      	adds	r1, r6, r0
 800f65c:	f105 0014 	add.w	r0, r5, #20
 800f660:	f7ff ffe1 	bl	800f626 <geometry_msgs::Vector3::serialize(unsigned char*) const>
      return offset;
    }
 800f664:	4420      	add	r0, r4
 800f666:	bd70      	pop	{r4, r5, r6, pc}

0800f668 <geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const>:
      twist(),
      covariance()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f66a:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->twist.serialize(outbuffer + offset);
 800f66c:	3004      	adds	r0, #4
      twist(),
      covariance()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f66e:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->twist.serialize(outbuffer + offset);
 800f670:	f7ff ffec 	bl	800f64c <geometry_msgs::Twist::serialize(unsigned char*) const>
 800f674:	4605      	mov	r5, r0
 800f676:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800f67a:	34b4      	adds	r4, #180	; 0xb4
      for( uint8_t i = 0; i < 36; i++){
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800f67c:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800f680:	1978      	adds	r0, r7, r5
 800f682:	f7ff ff8b 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->twist.serialize(outbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f686:	42a6      	cmp	r6, r4
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800f688:	4405      	add	r5, r0

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->twist.serialize(outbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f68a:	d1f7      	bne.n	800f67c <geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const+0x14>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
      }
      return offset;
    }
 800f68c:	4628      	mov	r0, r5
 800f68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f690 <geometry_msgs::Quaternion::serialize(unsigned char*) const>:
      z(0),
      w(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f690:	b570      	push	{r4, r5, r6, lr}
 800f692:	460d      	mov	r5, r1
 800f694:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f696:	6841      	ldr	r1, [r0, #4]
 800f698:	4628      	mov	r0, r5
 800f69a:	f7ff ff7f 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f69e:	68b1      	ldr	r1, [r6, #8]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f6a0:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f6a2:	1828      	adds	r0, r5, r0
 800f6a4:	f7ff ff7a 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f6a8:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800f6aa:	68f1      	ldr	r1, [r6, #12]
 800f6ac:	1928      	adds	r0, r5, r4
 800f6ae:	f7ff ff75 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f6b2:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 800f6b4:	6931      	ldr	r1, [r6, #16]
 800f6b6:	1928      	adds	r0, r5, r4
 800f6b8:	f7ff ff70 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      return offset;
    }
 800f6bc:	4420      	add	r0, r4
 800f6be:	bd70      	pop	{r4, r5, r6, pc}

0800f6c0 <geometry_msgs::Transform::serialize(unsigned char*) const>:
      translation(),
      rotation()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6c0:	b570      	push	{r4, r5, r6, lr}
 800f6c2:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->translation.serialize(outbuffer + offset);
 800f6c4:	3004      	adds	r0, #4
      translation(),
      rotation()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6c6:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->translation.serialize(outbuffer + offset);
 800f6c8:	f7ff ffad 	bl	800f626 <geometry_msgs::Vector3::serialize(unsigned char*) const>
 800f6cc:	4604      	mov	r4, r0
      offset += this->rotation.serialize(outbuffer + offset);
 800f6ce:	1831      	adds	r1, r6, r0
 800f6d0:	f105 0014 	add.w	r0, r5, #20
 800f6d4:	f7ff ffdc 	bl	800f690 <geometry_msgs::Quaternion::serialize(unsigned char*) const>
      return offset;
    }
 800f6d8:	4420      	add	r0, r4
 800f6da:	bd70      	pop	{r4, r5, r6, pc}

0800f6dc <geometry_msgs::TransformStamped::serialize(unsigned char*) const>:
      child_frame_id(""),
      transform()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f6e0:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f6e2:	3004      	adds	r0, #4
      child_frame_id(""),
      transform()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f6e4:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f6e6:	f7ff fcf5 	bl	800f0d4 <std_msgs::Header::serialize(unsigned char*) const>
 800f6ea:	4605      	mov	r5, r0
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800f6ec:	69b0      	ldr	r0, [r6, #24]
 800f6ee:	f7ff fbb5 	bl	800ee5c <strlen>
 800f6f2:	4680      	mov	r8, r0
 800f6f4:	ab02      	add	r3, sp, #8
 800f6f6:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
 800f6fa:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f6fc:	1d2c      	adds	r4, r5, #4
    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
 800f6fe:	5178      	str	r0, [r7, r5]
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f700:	4642      	mov	r2, r8
 800f702:	69b1      	ldr	r1, [r6, #24]
 800f704:	1938      	adds	r0, r7, r4
      offset += length_child_frame_id;
 800f706:	4444      	add	r4, r8
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f708:	f003 fecb 	bl	80134a2 <memcpy>
      offset += length_child_frame_id;
      offset += this->transform.serialize(outbuffer + offset);
 800f70c:	1939      	adds	r1, r7, r4
 800f70e:	f106 001c 	add.w	r0, r6, #28
 800f712:	f7ff ffd5 	bl	800f6c0 <geometry_msgs::Transform::serialize(unsigned char*) const>
      return offset;
    }
 800f716:	4420      	add	r0, r4
 800f718:	b002      	add	sp, #8
 800f71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f71e <geometry_msgs::Point::serialize(unsigned char*) const>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f71e:	b570      	push	{r4, r5, r6, lr}
 800f720:	460d      	mov	r5, r1
 800f722:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f724:	6841      	ldr	r1, [r0, #4]
 800f726:	4628      	mov	r0, r5
 800f728:	f7ff ff38 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f72c:	68b1      	ldr	r1, [r6, #8]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 800f72e:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 800f730:	1828      	adds	r0, r5, r0
 800f732:	f7ff ff33 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f736:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800f738:	68f1      	ldr	r1, [r6, #12]
 800f73a:	1928      	adds	r0, r5, r4
 800f73c:	f7ff ff2e 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      return offset;
    }
 800f740:	4420      	add	r0, r4
 800f742:	bd70      	pop	{r4, r5, r6, pc}

0800f744 <geometry_msgs::Pose::serialize(unsigned char*) const>:
      position(),
      orientation()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->position.serialize(outbuffer + offset);
 800f748:	3004      	adds	r0, #4
      position(),
      orientation()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f74a:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->position.serialize(outbuffer + offset);
 800f74c:	f7ff ffe7 	bl	800f71e <geometry_msgs::Point::serialize(unsigned char*) const>
 800f750:	4604      	mov	r4, r0
      offset += this->orientation.serialize(outbuffer + offset);
 800f752:	1831      	adds	r1, r6, r0
 800f754:	f105 0014 	add.w	r0, r5, #20
 800f758:	f7ff ff9a 	bl	800f690 <geometry_msgs::Quaternion::serialize(unsigned char*) const>
      return offset;
    }
 800f75c:	4420      	add	r0, r4
 800f75e:	bd70      	pop	{r4, r5, r6, pc}

0800f760 <geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const>:
      pose(),
      covariance()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f762:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->pose.serialize(outbuffer + offset);
 800f764:	3004      	adds	r0, #4
      pose(),
      covariance()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f766:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->pose.serialize(outbuffer + offset);
 800f768:	f7ff ffec 	bl	800f744 <geometry_msgs::Pose::serialize(unsigned char*) const>
 800f76c:	4605      	mov	r5, r0
 800f76e:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800f772:	34b8      	adds	r4, #184	; 0xb8
      for( uint8_t i = 0; i < 36; i++){
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800f774:	f856 1f04 	ldr.w	r1, [r6, #4]!
 800f778:	1978      	adds	r0, r7, r5
 800f77a:	f7ff ff0f 	bl	800f59c <ros::Msg::serializeAvrFloat64(unsigned char*, float)>

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->pose.serialize(outbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f77e:	42a6      	cmp	r6, r4
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 800f780:	4405      	add	r5, r0

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->pose.serialize(outbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800f782:	d1f7      	bne.n	800f774 <geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const+0x14>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
      }
      return offset;
    }
 800f784:	4628      	mov	r0, r5
 800f786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f788 <nav_msgs::Odometry::serialize(unsigned char*) const>:
      pose(),
      twist()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f788:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f78c:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f78e:	3004      	adds	r0, #4
      pose(),
      twist()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f790:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f792:	f7ff fc9f 	bl	800f0d4 <std_msgs::Header::serialize(unsigned char*) const>
 800f796:	4605      	mov	r5, r0
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800f798:	69b0      	ldr	r0, [r6, #24]
 800f79a:	f7ff fb5f 	bl	800ee5c <strlen>
 800f79e:	4680      	mov	r8, r0
 800f7a0:	ab02      	add	r3, sp, #8
 800f7a2:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
 800f7a6:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f7a8:	1d2c      	adds	r4, r5, #4
    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
 800f7aa:	5178      	str	r0, [r7, r5]
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f7ac:	4642      	mov	r2, r8
 800f7ae:	69b1      	ldr	r1, [r6, #24]
 800f7b0:	1938      	adds	r0, r7, r4
      offset += length_child_frame_id;
 800f7b2:	4444      	add	r4, r8
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
      memcpy(outbuffer + offset, &length_child_frame_id, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800f7b4:	f003 fe75 	bl	80134a2 <memcpy>
      offset += length_child_frame_id;
      offset += this->pose.serialize(outbuffer + offset);
 800f7b8:	1939      	adds	r1, r7, r4
 800f7ba:	f106 001c 	add.w	r0, r6, #28
 800f7be:	f7ff ffcf 	bl	800f760 <geometry_msgs::PoseWithCovariance::serialize(unsigned char*) const>
 800f7c2:	4404      	add	r4, r0
      offset += this->twist.serialize(outbuffer + offset);
 800f7c4:	1939      	adds	r1, r7, r4
 800f7c6:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
 800f7ca:	f7ff ff4d 	bl	800f668 <geometry_msgs::TwistWithCovariance::serialize(unsigned char*) const>
      return offset;
    }
 800f7ce:	4420      	add	r0, r4
 800f7d0:	b002      	add	sp, #8
 800f7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800f7d6:	b530      	push	{r4, r5, lr}
  {
    uint32_t* val = (uint32_t*)f;
    inbuffer += 3;

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 800f7d8:	78c3      	ldrb	r3, [r0, #3]
 800f7da:	095b      	lsrs	r3, r3, #5
 800f7dc:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 800f7de:	7902      	ldrb	r2, [r0, #4]
 800f7e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f7e4:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 800f7e6:	7942      	ldrb	r2, [r0, #5]
 800f7e8:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 800f7ec:	600a      	str	r2, [r1, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 800f7ee:	7983      	ldrb	r3, [r0, #6]
 800f7f0:	04db      	lsls	r3, r3, #19
 800f7f2:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 800f7f6:	4313      	orrs	r3, r2
 800f7f8:	600b      	str	r3, [r1, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800f7fa:	79c4      	ldrb	r4, [r0, #7]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
 800f7fc:	7985      	ldrb	r5, [r0, #6]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800f7fe:	0124      	lsls	r4, r4, #4
 800f800:	f404 62fe 	and.w	r2, r4, #2032	; 0x7f0
    if (exp != 0)
 800f804:	ea52 1215 	orrs.w	r2, r2, r5, lsr #4
    {
      *val |= ((exp) - 1023 + 127) << 23;
 800f808:	bf1e      	ittt	ne
 800f80a:	f5a2 7260 	subne.w	r2, r2, #896	; 0x380
 800f80e:	ea43 53c2 	orrne.w	r3, r3, r2, lsl #23
 800f812:	600b      	strne	r3, [r1, #0]
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800f814:	79c3      	ldrb	r3, [r0, #7]

    return 8;
  }
 800f816:	2008      	movs	r0, #8
    {
      *val |= ((exp) - 1023 + 127) << 23;
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800f818:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800f81c:	680b      	ldr	r3, [r1, #0]
 800f81e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f822:	600b      	str	r3, [r1, #0]

    return 8;
  }
 800f824:	bd30      	pop	{r4, r5, pc}

0800f826 <roberto_msgs::MotorState::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f826:	b570      	push	{r4, r5, r6, lr}
 800f828:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f82a:	3004      	adds	r0, #4
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
      offset += sizeof(this->mode);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f82c:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f82e:	f7ff fd7d 	bl	800f32c <std_msgs::Header::deserialize(unsigned char*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800f832:	f105 0118 	add.w	r1, r5, #24
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f836:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800f838:	1830      	adds	r0, r6, r0
 800f83a:	f7ff ffcc 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f83e:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
 800f840:	f105 011c 	add.w	r1, r5, #28
 800f844:	1930      	adds	r0, r6, r4
 800f846:	f7ff ffc6 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f84a:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 800f84c:	f105 0120 	add.w	r1, r5, #32
 800f850:	1930      	adds	r0, r6, r4
 800f852:	f7ff ffc0 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f856:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
 800f858:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f85c:	1930      	adds	r0, r6, r4
 800f85e:	f7ff ffba 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 800f862:	4420      	add	r0, r4
 800f864:	5c33      	ldrb	r3, [r6, r0]
      offset += sizeof(this->mode);
     return offset;
    }
 800f866:	3001      	adds	r0, #1
      offset += this->header.deserialize(inbuffer + offset);
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 800f868:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
      offset += sizeof(this->mode);
     return offset;
    }
 800f86c:	bd70      	pop	{r4, r5, r6, pc}

0800f86e <ros::Subscriber<roberto_msgs::MotorState>::callback(unsigned char*)>:
        endpoint_(endpoint)
      {
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 800f86e:	b570      	push	{r4, r5, r6, lr}
 800f870:	4605      	mov	r5, r0
        msg.deserialize(data);
 800f872:	f100 040c 	add.w	r4, r0, #12
 800f876:	4620      	mov	r0, r4
 800f878:	f7ff ffd5 	bl	800f826 <roberto_msgs::MotorState::deserialize(unsigned char*)>
        this->cb_(msg);
 800f87c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f87e:	4620      	mov	r0, r4
      }
 800f880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 800f884:	4718      	bx	r3

0800f886 <geometry_msgs::Quaternion::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f886:	b570      	push	{r4, r5, r6, lr}
 800f888:	460d      	mov	r5, r1
 800f88a:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f88c:	1d01      	adds	r1, r0, #4
 800f88e:	4628      	mov	r0, r5
 800f890:	f7ff ffa1 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f894:	f106 0108 	add.w	r1, r6, #8
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f898:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f89a:	1828      	adds	r0, r5, r0
 800f89c:	f7ff ff9b 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f8a0:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800f8a2:	f106 010c 	add.w	r1, r6, #12
 800f8a6:	1928      	adds	r0, r5, r4
 800f8a8:	f7ff ff95 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f8ac:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 800f8ae:	f106 0110 	add.w	r1, r6, #16
 800f8b2:	1928      	adds	r0, r5, r4
 800f8b4:	f7ff ff8f 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
     return offset;
    }
 800f8b8:	4420      	add	r0, r4
 800f8ba:	bd70      	pop	{r4, r5, r6, pc}

0800f8bc <geometry_msgs::Vector3::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f8bc:	b570      	push	{r4, r5, r6, lr}
 800f8be:	460d      	mov	r5, r1
 800f8c0:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f8c2:	1d01      	adds	r1, r0, #4
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	f7ff ff86 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f8ca:	f106 0108 	add.w	r1, r6, #8
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f8ce:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f8d0:	1828      	adds	r0, r5, r0
 800f8d2:	f7ff ff80 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f8d6:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800f8d8:	f106 010c 	add.w	r1, r6, #12
 800f8dc:	1928      	adds	r0, r5, r4
 800f8de:	f7ff ff7a 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
     return offset;
    }
 800f8e2:	4420      	add	r0, r4
 800f8e4:	bd70      	pop	{r4, r5, r6, pc}

0800f8e6 <geometry_msgs::Transform::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f8e6:	b570      	push	{r4, r5, r6, lr}
 800f8e8:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->translation.deserialize(inbuffer + offset);
 800f8ea:	3004      	adds	r0, #4
      offset += this->translation.serialize(outbuffer + offset);
      offset += this->rotation.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f8ec:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->translation.deserialize(inbuffer + offset);
 800f8ee:	f7ff ffe5 	bl	800f8bc <geometry_msgs::Vector3::deserialize(unsigned char*)>
 800f8f2:	4604      	mov	r4, r0
      offset += this->rotation.deserialize(inbuffer + offset);
 800f8f4:	1831      	adds	r1, r6, r0
 800f8f6:	f105 0014 	add.w	r0, r5, #20
 800f8fa:	f7ff ffc4 	bl	800f886 <geometry_msgs::Quaternion::deserialize(unsigned char*)>
     return offset;
    }
 800f8fe:	4420      	add	r0, r4
 800f900:	bd70      	pop	{r4, r5, r6, pc}

0800f902 <geometry_msgs::TransformStamped::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f904:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f906:	3004      	adds	r0, #4
      offset += length_child_frame_id;
      offset += this->transform.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f908:	460d      	mov	r5, r1
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f90a:	f7ff fd0f 	bl	800f32c <std_msgs::Header::deserialize(unsigned char*)>
 800f90e:	4603      	mov	r3, r0
      uint32_t length_child_frame_id;
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
 800f910:	5828      	ldr	r0, [r5, r0]
 800f912:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800f914:	9c01      	ldr	r4, [sp, #4]
 800f916:	1d18      	adds	r0, r3, #4
 800f918:	4404      	add	r4, r0
 800f91a:	182b      	adds	r3, r5, r0
 800f91c:	1b5a      	subs	r2, r3, r5
 800f91e:	4294      	cmp	r4, r2
 800f920:	d904      	bls.n	800f92c <geometry_msgs::TransformStamped::deserialize(unsigned char*)+0x2a>
          inbuffer[k-1]=inbuffer[k];
 800f922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f926:	f803 2c02 	strb.w	r2, [r3, #-2]
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
      uint32_t length_child_frame_id;
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800f92a:	e7f7      	b.n	800f91c <geometry_msgs::TransformStamped::deserialize(unsigned char*)+0x1a>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800f92c:	3801      	subs	r0, #1
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800f92e:	1929      	adds	r1, r5, r4
 800f930:	2300      	movs	r3, #0
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800f932:	4428      	add	r0, r5
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800f934:	f801 3c01 	strb.w	r3, [r1, #-1]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800f938:	61b0      	str	r0, [r6, #24]
      offset += length_child_frame_id;
      offset += this->transform.deserialize(inbuffer + offset);
 800f93a:	f106 001c 	add.w	r0, r6, #28
 800f93e:	f7ff ffd2 	bl	800f8e6 <geometry_msgs::Transform::deserialize(unsigned char*)>
     return offset;
    }
 800f942:	4420      	add	r0, r4
 800f944:	b002      	add	sp, #8
 800f946:	bd70      	pop	{r4, r5, r6, pc}

0800f948 <tf::tfMessage::deserialize(unsigned char*)>:
      offset += this->transforms[i].serialize(outbuffer + offset);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    {
      int offset = 0;
      uint8_t transforms_lengthT = *(inbuffer + offset++);
 800f94c:	780d      	ldrb	r5, [r1, #0]
      if(transforms_lengthT > transforms_length)
 800f94e:	7903      	ldrb	r3, [r0, #4]
      offset += this->transforms[i].serialize(outbuffer + offset);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f950:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
 800f952:	42ab      	cmp	r3, r5
      offset += this->transforms[i].serialize(outbuffer + offset);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f954:	4688      	mov	r8, r1
    {
      int offset = 0;
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
 800f956:	d205      	bcs.n	800f964 <tf::tfMessage::deserialize(unsigned char*)+0x1c>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 800f958:	2144      	movs	r1, #68	; 0x44
 800f95a:	4369      	muls	r1, r5
 800f95c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800f95e:	f003 fe4b 	bl	80135f8 <realloc>
 800f962:	64e0      	str	r0, [r4, #76]	; 0x4c
      offset += 3;
      transforms_length = transforms_lengthT;
 800f964:	7125      	strb	r5, [r4, #4]
 800f966:	2000      	movs	r0, #0
    {
      int offset = 0;
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
      offset += 3;
 800f968:	2604      	movs	r6, #4
      transforms_length = transforms_lengthT;
      for( uint8_t i = 0; i < transforms_length; i++){
      offset += this->st_transforms.deserialize(inbuffer + offset);
 800f96a:	f104 0708 	add.w	r7, r4, #8
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 800f96e:	f04f 0a44 	mov.w	sl, #68	; 0x44
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
      offset += 3;
      transforms_length = transforms_lengthT;
      for( uint8_t i = 0; i < transforms_length; i++){
 800f972:	7923      	ldrb	r3, [r4, #4]
 800f974:	b2c5      	uxtb	r5, r0
 800f976:	42ab      	cmp	r3, r5
 800f978:	f100 0901 	add.w	r9, r0, #1
 800f97c:	d90e      	bls.n	800f99c <tf::tfMessage::deserialize(unsigned char*)+0x54>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 800f97e:	eb08 0106 	add.w	r1, r8, r6
 800f982:	4638      	mov	r0, r7
 800f984:	f7ff ffbd 	bl	800f902 <geometry_msgs::TransformStamped::deserialize(unsigned char*)>
 800f988:	4406      	add	r6, r0
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 800f98a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800f98c:	2244      	movs	r2, #68	; 0x44
 800f98e:	4639      	mov	r1, r7
 800f990:	fb0a 0005 	mla	r0, sl, r5, r0
 800f994:	f003 fd85 	bl	80134a2 <memcpy>
      uint8_t transforms_lengthT = *(inbuffer + offset++);
      if(transforms_lengthT > transforms_length)
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
      offset += 3;
      transforms_length = transforms_lengthT;
      for( uint8_t i = 0; i < transforms_length; i++){
 800f998:	4648      	mov	r0, r9
 800f99a:	e7ea      	b.n	800f972 <tf::tfMessage::deserialize(unsigned char*)+0x2a>
      offset += this->st_transforms.deserialize(inbuffer + offset);
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
      }
     return offset;
    }
 800f99c:	4630      	mov	r0, r6
 800f99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f9a2 <geometry_msgs::Twist::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f9a2:	b570      	push	{r4, r5, r6, lr}
 800f9a4:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->linear.deserialize(inbuffer + offset);
 800f9a6:	3004      	adds	r0, #4
      offset += this->linear.serialize(outbuffer + offset);
      offset += this->angular.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f9a8:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->linear.deserialize(inbuffer + offset);
 800f9aa:	f7ff ff87 	bl	800f8bc <geometry_msgs::Vector3::deserialize(unsigned char*)>
 800f9ae:	4604      	mov	r4, r0
      offset += this->angular.deserialize(inbuffer + offset);
 800f9b0:	1831      	adds	r1, r6, r0
 800f9b2:	f105 0014 	add.w	r0, r5, #20
 800f9b6:	f7ff ff81 	bl	800f8bc <geometry_msgs::Vector3::deserialize(unsigned char*)>
     return offset;
    }
 800f9ba:	4420      	add	r0, r4
 800f9bc:	bd70      	pop	{r4, r5, r6, pc}

0800f9be <geometry_msgs::Point::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f9be:	b570      	push	{r4, r5, r6, lr}
 800f9c0:	460d      	mov	r5, r1
 800f9c2:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f9c4:	1d01      	adds	r1, r0, #4
 800f9c6:	4628      	mov	r0, r5
 800f9c8:	f7ff ff05 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f9cc:	f106 0108 	add.w	r1, r6, #8
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 800f9d0:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800f9d2:	1828      	adds	r0, r5, r0
 800f9d4:	f7ff feff 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f9d8:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 800f9da:	f106 010c 	add.w	r1, r6, #12
 800f9de:	1928      	adds	r0, r5, r4
 800f9e0:	f7ff fef9 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
     return offset;
    }
 800f9e4:	4420      	add	r0, r4
 800f9e6:	bd70      	pop	{r4, r5, r6, pc}

0800f9e8 <geometry_msgs::Pose::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f9e8:	b570      	push	{r4, r5, r6, lr}
 800f9ea:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->position.deserialize(inbuffer + offset);
 800f9ec:	3004      	adds	r0, #4
      offset += this->position.serialize(outbuffer + offset);
      offset += this->orientation.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f9ee:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->position.deserialize(inbuffer + offset);
 800f9f0:	f7ff ffe5 	bl	800f9be <geometry_msgs::Point::deserialize(unsigned char*)>
 800f9f4:	4604      	mov	r4, r0
      offset += this->orientation.deserialize(inbuffer + offset);
 800f9f6:	1831      	adds	r1, r6, r0
 800f9f8:	f105 0014 	add.w	r0, r5, #20
 800f9fc:	f7ff ff43 	bl	800f886 <geometry_msgs::Quaternion::deserialize(unsigned char*)>
     return offset;
    }
 800fa00:	4420      	add	r0, r4
 800fa02:	bd70      	pop	{r4, r5, r6, pc}

0800fa04 <geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800fa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa06:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->pose.deserialize(inbuffer + offset);
 800fa08:	3004      	adds	r0, #4
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800fa0a:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->pose.deserialize(inbuffer + offset);
 800fa0c:	f7ff ffec 	bl	800f9e8 <geometry_msgs::Pose::deserialize(unsigned char*)>
 800fa10:	4605      	mov	r5, r0
 800fa12:	f104 062c 	add.w	r6, r4, #44	; 0x2c
 800fa16:	34bc      	adds	r4, #188	; 0xbc
      for( uint8_t i = 0; i < 36; i++){
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800fa18:	4631      	mov	r1, r6
 800fa1a:	1978      	adds	r0, r7, r5
 800fa1c:	f7ff fedb 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800fa20:	3604      	adds	r6, #4

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->pose.deserialize(inbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800fa22:	42a6      	cmp	r6, r4
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800fa24:	4405      	add	r5, r0

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->pose.deserialize(inbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800fa26:	d1f7      	bne.n	800fa18 <geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)+0x14>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
      }
     return offset;
    }
 800fa28:	4628      	mov	r0, r5
 800fa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa2c <geometry_msgs::TwistWithCovariance::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800fa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2e:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->twist.deserialize(inbuffer + offset);
 800fa30:	3004      	adds	r0, #4
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800fa32:	460f      	mov	r7, r1
    {
      int offset = 0;
      offset += this->twist.deserialize(inbuffer + offset);
 800fa34:	f7ff ffb5 	bl	800f9a2 <geometry_msgs::Twist::deserialize(unsigned char*)>
 800fa38:	4605      	mov	r5, r0
 800fa3a:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800fa3e:	34b8      	adds	r4, #184	; 0xb8
      for( uint8_t i = 0; i < 36; i++){
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800fa40:	4631      	mov	r1, r6
 800fa42:	1978      	adds	r0, r7, r5
 800fa44:	f7ff fec7 	bl	800f7d6 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800fa48:	3604      	adds	r6, #4

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->twist.deserialize(inbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800fa4a:	42a6      	cmp	r6, r4
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 800fa4c:	4405      	add	r5, r0

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->twist.deserialize(inbuffer + offset);
      for( uint8_t i = 0; i < 36; i++){
 800fa4e:	d1f7      	bne.n	800fa40 <geometry_msgs::TwistWithCovariance::deserialize(unsigned char*)+0x14>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
      }
     return offset;
    }
 800fa50:	4628      	mov	r0, r5
 800fa52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa54 <nav_msgs::Odometry::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800fa54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa56:	4606      	mov	r6, r0
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800fa58:	3004      	adds	r0, #4
      offset += this->pose.serialize(outbuffer + offset);
      offset += this->twist.serialize(outbuffer + offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800fa5a:	460d      	mov	r5, r1
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800fa5c:	f7ff fc66 	bl	800f32c <std_msgs::Header::deserialize(unsigned char*)>
 800fa60:	4603      	mov	r3, r0
      uint32_t length_child_frame_id;
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
 800fa62:	5828      	ldr	r0, [r5, r0]
 800fa64:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800fa66:	9c01      	ldr	r4, [sp, #4]
 800fa68:	1d18      	adds	r0, r3, #4
 800fa6a:	4404      	add	r4, r0
 800fa6c:	182b      	adds	r3, r5, r0
 800fa6e:	1b5a      	subs	r2, r3, r5
 800fa70:	4294      	cmp	r4, r2
 800fa72:	d904      	bls.n	800fa7e <nav_msgs::Odometry::deserialize(unsigned char*)+0x2a>
          inbuffer[k-1]=inbuffer[k];
 800fa74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa78:	f803 2c02 	strb.w	r2, [r3, #-2]
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
      uint32_t length_child_frame_id;
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 800fa7c:	e7f7      	b.n	800fa6e <nav_msgs::Odometry::deserialize(unsigned char*)+0x1a>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800fa7e:	3801      	subs	r0, #1
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800fa80:	1929      	adds	r1, r5, r4
 800fa82:	2300      	movs	r3, #0
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800fa84:	4428      	add	r0, r5
      memcpy(&length_child_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800fa86:	f801 3c01 	strb.w	r3, [r1, #-1]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800fa8a:	61b0      	str	r0, [r6, #24]
      offset += length_child_frame_id;
      offset += this->pose.deserialize(inbuffer + offset);
 800fa8c:	f106 001c 	add.w	r0, r6, #28
 800fa90:	f7ff ffb8 	bl	800fa04 <geometry_msgs::PoseWithCovariance::deserialize(unsigned char*)>
 800fa94:	4404      	add	r4, r0
      offset += this->twist.deserialize(inbuffer + offset);
 800fa96:	1929      	adds	r1, r5, r4
 800fa98:	f106 00d8 	add.w	r0, r6, #216	; 0xd8
 800fa9c:	f7ff ffc6 	bl	800fa2c <geometry_msgs::TwistWithCovariance::deserialize(unsigned char*)>
     return offset;
    }
 800faa0:	4420      	add	r0, r4
 800faa2:	b002      	add	sp, #8
 800faa4:	bd70      	pop	{r4, r5, r6, pc}

0800faa6 <ros::Publisher::publish(ros::Msg const*)>:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 800faa6:	68c3      	ldr	r3, [r0, #12]
 800faa8:	b410      	push	{r4}
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	6814      	ldr	r4, [r2, #0]
 800faae:	460a      	mov	r2, r1
 800fab0:	6881      	ldr	r1, [r0, #8]
 800fab2:	4618      	mov	r0, r3
 800fab4:	4623      	mov	r3, r4
 800fab6:	bc10      	pop	{r4}
 800fab8:	4718      	bx	r3
	...

0800fabc <ArduinoHardware::init()>:
      this->baud_= baud;
    }
  
    int getBaud(){return baud_;}

    void init(){
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	4604      	mov	r4, r0
 800fac0:	b086      	sub	sp, #24
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fac2:	4d21      	ldr	r5, [pc, #132]	; (800fb48 <ArduinoHardware::init()+0x8c>)
      /* Bit configuration structure for GPIOA PIN9 and PIN10 */
      GPIO_InitTypeDef gpioa_init_struct;

      /* Enalbe clock for USART1, AFIO and GPIOA */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | 
                           RCC_APB2Periph_GPIOA, ENABLE);
 800fac4:	2101      	movs	r1, #1
 800fac6:	f244 0005 	movw	r0, #16389	; 0x4005
 800faca:	f7f3 f80f 	bl	8002aec <RCC_APB2PeriphClockCmd>
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 800face:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fad2:	f8ad 3004 	strh.w	r3, [sp, #4]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800fad6:	2603      	movs	r6, #3
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800fad8:	2318      	movs	r3, #24
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fada:	a901      	add	r1, sp, #4
 800fadc:	4628      	mov	r0, r5
                           RCC_APB2Periph_GPIOA, ENABLE);
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800fade:	f88d 3007 	strb.w	r3, [sp, #7]
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | 
                           RCC_APB2Periph_GPIOA, ENABLE);
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800fae2:	f88d 6006 	strb.w	r6, [sp, #6]
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fae6:	f7f2 fba2 	bl	800222e <GPIO_Init>
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 800faea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faee:	f8ad 3004 	strh.w	r3, [sp, #4]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800faf2:	2304      	movs	r3, #4
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800faf4:	eb0d 0103 	add.w	r1, sp, r3
 800faf8:	4628      	mov	r0, r5
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800fafa:	f88d 3007 	strb.w	r3, [sp, #7]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800fafe:	f88d 6006 	strb.w	r6, [sp, #6]
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800fb02:	f7f2 fb94 	bl	800222e <GPIO_Init>

      /* Enable USART1 */
      USART_Cmd(iostream, ENABLE);  
 800fb06:	6820      	ldr	r0, [r4, #0]
 800fb08:	2101      	movs	r1, #1
 800fb0a:	f7f3 fa98 	bl	800303e <USART_Cmd>
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
 800fb0e:	6863      	ldr	r3, [r4, #4]
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800fb10:	220c      	movs	r2, #12
      /* Enable USART1 */
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
 800fb12:	9302      	str	r3, [sp, #8]
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800fb14:	a902      	add	r1, sp, #8
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 800fb16:	2300      	movs	r3, #0
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800fb18:	6820      	ldr	r0, [r4, #0]
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 800fb1a:	f8ad 300c 	strh.w	r3, [sp, #12]
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
 800fb1e:	f8ad 300e 	strh.w	r3, [sp, #14]
      usart1_init_struct.USART_Parity = USART_Parity_No ;
 800fb22:	f8ad 3010 	strh.w	r3, [sp, #16]
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800fb26:	f8ad 3014 	strh.w	r3, [sp, #20]
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800fb2a:	f8ad 2012 	strh.w	r2, [sp, #18]
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800fb2e:	f7f3 fa11 	bl	8002f54 <USART_Init>
      /* Enable RXNE interrupt */
      USART_ITConfig(iostream, USART_IT_RXNE, ENABLE);
 800fb32:	2201      	movs	r2, #1
 800fb34:	f240 5125 	movw	r1, #1317	; 0x525
 800fb38:	6820      	ldr	r0, [r4, #0]
 800fb3a:	f7f3 fa8c 	bl	8003056 <USART_ITConfig>
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800fb3e:	4b03      	ldr	r3, [pc, #12]	; (800fb4c <ArduinoHardware::init()+0x90>)
 800fb40:	2220      	movs	r2, #32
 800fb42:	605a      	str	r2, [r3, #4]
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }
 800fb44:	b006      	add	sp, #24
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	40010800 	.word	0x40010800
 800fb4c:	e000e100 	.word	0xe000e100

0800fb50 <geometry_msgs::TransformStamped::TransformStamped()>:
      geometry_msgs::Transform transform;

    TransformStamped():
      header(),
      child_frame_id(""),
      transform()
 800fb50:	4a0c      	ldr	r2, [pc, #48]	; (800fb84 <geometry_msgs::TransformStamped::TransformStamped()+0x34>)

    Quaternion():
      x(0),
      y(0),
      z(0),
      w(0)
 800fb52:	490d      	ldr	r1, [pc, #52]	; (800fb88 <geometry_msgs::TransformStamped::TransformStamped()+0x38>)
 800fb54:	6002      	str	r2, [r0, #0]
      const char* frame_id;

    Header():
      seq(0),
      stamp(),
      frame_id("")
 800fb56:	4a0d      	ldr	r2, [pc, #52]	; (800fb8c <geometry_msgs::TransformStamped::TransformStamped()+0x3c>)
 800fb58:	6301      	str	r1, [r0, #48]	; 0x30
 800fb5a:	6042      	str	r2, [r0, #4]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	6082      	str	r2, [r0, #8]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 800fb60:	60c2      	str	r2, [r0, #12]
 800fb62:	6102      	str	r2, [r0, #16]
 800fb64:	4a0a      	ldr	r2, [pc, #40]	; (800fb90 <geometry_msgs::TransformStamped::TransformStamped()+0x40>)
 800fb66:	6142      	str	r2, [r0, #20]
 800fb68:	6182      	str	r2, [r0, #24]
      geometry_msgs::Vector3 translation;
      geometry_msgs::Quaternion rotation;

    Transform():
      translation(),
      rotation()
 800fb6a:	4a0a      	ldr	r2, [pc, #40]	; (800fb94 <geometry_msgs::TransformStamped::TransformStamped()+0x44>)
 800fb6c:	61c2      	str	r2, [r0, #28]
      float z;

    Vector3():
      x(0),
      y(0),
      z(0)
 800fb6e:	4a0a      	ldr	r2, [pc, #40]	; (800fb98 <geometry_msgs::TransformStamped::TransformStamped()+0x48>)
 800fb70:	6202      	str	r2, [r0, #32]
 800fb72:	2200      	movs	r2, #0
 800fb74:	6242      	str	r2, [r0, #36]	; 0x24
 800fb76:	6282      	str	r2, [r0, #40]	; 0x28
 800fb78:	62c2      	str	r2, [r0, #44]	; 0x2c
 800fb7a:	6342      	str	r2, [r0, #52]	; 0x34
 800fb7c:	6382      	str	r2, [r0, #56]	; 0x38
 800fb7e:	63c2      	str	r2, [r0, #60]	; 0x3c
 800fb80:	6402      	str	r2, [r0, #64]	; 0x40
    {
    }
 800fb82:	4770      	bx	lr
 800fb84:	08015670 	.word	0x08015670
 800fb88:	08015598 	.word	0x08015598
 800fb8c:	08015568 	.word	0x08015568
 800fb90:	08015bf7 	.word	0x08015bf7
 800fb94:	08015658 	.word	0x08015658
 800fb98:	080155e0 	.word	0x080155e0

0800fb9c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>:
            return true;
          }
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
 800fb9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fba0:	4698      	mov	r8, r3
    private:
      bool param_recieved;
      rosserial_msgs::RequestParamResponse req_param_resp;

      bool requestParam(const char * name, int time_out =  1000){
        param_recieved = false;
 800fba2:	2300      	movs	r3, #0
 800fba4:	f880 3504 	strb.w	r3, [r0, #1284]	; 0x504
  {
    public:
      const char* name;

    RequestParamRequest():
      name("")
 800fba8:	4b17      	ldr	r3, [pc, #92]	; (800fc08 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x6c>)
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
 800fbaa:	9101      	str	r1, [sp, #4]
 800fbac:	9300      	str	r3, [sp, #0]
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800fbae:	6803      	ldr	r3, [r0, #0]
 800fbb0:	2106      	movs	r1, #6
 800fbb2:	681b      	ldr	r3, [r3, #0]
            return true;
          }
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
 800fbb4:	4617      	mov	r7, r2

      bool requestParam(const char * name, int time_out =  1000){
        param_recieved = false;
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800fbb6:	466a      	mov	r2, sp
            return true;
          }
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
 800fbb8:	4604      	mov	r4, r0

      bool requestParam(const char * name, int time_out =  1000){
        param_recieved = false;
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800fbba:	4798      	blx	r3
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 800fbbc:	f7f0 fdc2 	bl	8000744 <millis>
        uint16_t end_time = hardware_.time() + time_out;
 800fbc0:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800fbc4:	b286      	uxth	r6, r0
        while(!param_recieved ){
 800fbc6:	f894 5504 	ldrb.w	r5, [r4, #1284]	; 0x504
 800fbca:	b945      	cbnz	r5, 800fbde <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x42>
          spinOnce();
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	4620      	mov	r0, r4
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	4798      	blx	r3
 800fbd4:	f7f0 fdb6 	bl	8000744 <millis>
          if (hardware_.time() > end_time) return false;
 800fbd8:	42b0      	cmp	r0, r6
 800fbda:	d9f4      	bls.n	800fbc6 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x2a>
 800fbdc:	e00f      	b.n	800fbfe <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x62>
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
        if (requestParam(name) ){
          if (length == req_param_resp.floats_length){
 800fbde:	f894 2518 	ldrb.w	r2, [r4, #1304]	; 0x518
 800fbe2:	4542      	cmp	r2, r8
 800fbe4:	d10a      	bne.n	800fbfc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x60>
 800fbe6:	2300      	movs	r3, #0
            //copy it over
            for(int i=0; i<length; i++)
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	da08      	bge.n	800fbfe <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x62>
              param[i] = req_param_resp.floats[i];
 800fbec:	f8d4 1520 	ldr.w	r1, [r4, #1312]	; 0x520
 800fbf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fbf4:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
      }
      bool getParam(const char* name, float* param, int length=1){
        if (requestParam(name) ){
          if (length == req_param_resp.floats_length){
            //copy it over
            for(int i=0; i<length; i++)
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	e7f5      	b.n	800fbe8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x4c>
              param[i] = req_param_resp.floats[i];
            return true;
          }
        }
        return false;
 800fbfc:	2500      	movs	r5, #0
      }
 800fbfe:	4628      	mov	r0, r5
 800fc00:	b002      	add	sp, #8
 800fc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc06:	bf00      	nop
 800fc08:	08015520 	.word	0x08015520

0800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>:
        log(rosserial_msgs::Log::INFO, msg);
      }
      void logwarn(const char *msg){
        log(rosserial_msgs::Log::WARN, msg);
      }
      void logerror(const char*msg){
 800fc0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
 800fc0e:	4b07      	ldr	r3, [pc, #28]	; (800fc2c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)+0x20>)

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
        l.msg = (char*)msg;
 800fc10:	9103      	str	r1, [sp, #12]
 800fc12:	9301      	str	r3, [sp, #4]
       */

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
 800fc14:	2303      	movs	r3, #3
 800fc16:	f88d 3008 	strb.w	r3, [sp, #8]
        l.msg = (char*)msg;
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800fc1a:	6803      	ldr	r3, [r0, #0]
 800fc1c:	aa01      	add	r2, sp, #4
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2107      	movs	r1, #7
 800fc22:	4798      	blx	r3
      void logwarn(const char *msg){
        log(rosserial_msgs::Log::WARN, msg);
      }
      void logerror(const char*msg){
        log(rosserial_msgs::Log::ERROR, msg);
      }
 800fc24:	b005      	add	sp, #20
 800fc26:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc2a:	bf00      	nop
 800fc2c:	08015508 	.word	0x08015508

0800fc30 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)>:
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
      {
        if(id >= 100 && !configured_)
 800fc30:	2963      	cmp	r1, #99	; 0x63
          }
        }
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
 800fc32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc36:	4604      	mov	r4, r0
 800fc38:	460e      	mov	r6, r1
      {
        if(id >= 100 && !configured_)
 800fc3a:	dd03      	ble.n	800fc44 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x14>
 800fc3c:	f890 54f4 	ldrb.w	r5, [r0, #1268]	; 0x4f4
 800fc40:	2d00      	cmp	r5, #0
 800fc42:	d04f      	beq.n	800fce4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xb4>
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 800fc44:	6813      	ldr	r3, [r2, #0]
 800fc46:	f204 211f 	addw	r1, r4, #543	; 0x21f
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4610      	mov	r0, r2
 800fc4e:	4798      	blx	r3

        /* setup the header */
        message_out[0] = 0xff;
 800fc50:	22ff      	movs	r2, #255	; 0xff
 800fc52:	f884 2218 	strb.w	r2, [r4, #536]	; 0x218
        message_out[1] = PROTOCOL_VER;
 800fc56:	22fe      	movs	r2, #254	; 0xfe
      {
        if(id >= 100 && !configured_)
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 800fc58:	b283      	uxth	r3, r0

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
 800fc5a:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800fc5e:	b2c2      	uxtb	r2, r0
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
 800fc60:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800fc64:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800fc68:	4410      	add	r0, r2
 800fc6a:	43c0      	mvns	r0, r0
        message_out[5] = (uint8_t) ((int16_t)id&255);
 800fc6c:	f884 621d 	strb.w	r6, [r4, #541]	; 0x21d
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 800fc70:	f346 2607 	sbfx	r6, r6, #8, #8
        uint16_t l = msg->serialize(message_out+7);

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800fc74:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800fc78:	f884 021c 	strb.w	r0, [r4, #540]	; 0x21c
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 800fc7c:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
 800fc80:	f504 7007 	add.w	r0, r4, #540	; 0x21c

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800fc84:	2105      	movs	r1, #5
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
 800fc86:	2200      	movs	r2, #0
        for(int i =5; i<l+7; i++)
 800fc88:	1d9e      	adds	r6, r3, #6
 800fc8a:	42b1      	cmp	r1, r6
 800fc8c:	dc04      	bgt.n	800fc98 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x68>
          chk += message_out[i];
 800fc8e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800fc92:	3101      	adds	r1, #1
          chk += message_out[i];
 800fc94:	442a      	add	r2, r5
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800fc96:	e7f8      	b.n	800fc8a <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x5a>
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 800fc98:	43d2      	mvns	r2, r2
 800fc9a:	f103 0608 	add.w	r6, r3, #8
 800fc9e:	3307      	adds	r3, #7
 800fca0:	b2b6      	uxth	r6, r6
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	4423      	add	r3, r4

        if( l <= OUTPUT_SIZE ){
 800fca6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 800fcaa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

        if( l <= OUTPUT_SIZE ){
 800fcae:	d813      	bhi.n	800fcd8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xa8>
          hardware_.write(message_out, l);
 800fcb0:	f504 7806 	add.w	r8, r4, #536	; 0x218
 800fcb4:	4635      	mov	r5, r6
 800fcb6:	4647      	mov	r7, r8
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
        while( !(USART1->SR & 0x00000040) );
 800fcb8:	f8df 9034 	ldr.w	r9, [pc, #52]	; 800fcf0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xc0>
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
 800fcbc:	ebc8 0307 	rsb	r3, r8, r7
 800fcc0:	429e      	cmp	r6, r3
 800fcc2:	dd0f      	ble.n	800fce4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xb4>
        while( !(USART1->SR & 0x00000040) );
 800fcc4:	f8b9 3000 	ldrh.w	r3, [r9]
 800fcc8:	065b      	lsls	r3, r3, #25
 800fcca:	d5fb      	bpl.n	800fcc4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x94>
        USART_SendData(iostream, data[i]);
 800fccc:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fcd0:	6860      	ldr	r0, [r4, #4]
 800fcd2:	f7f3 fa1a 	bl	800310a <USART_SendData>
 800fcd6:	e7f1      	b.n	800fcbc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x8c>
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
 800fcd8:	4904      	ldr	r1, [pc, #16]	; (800fcec <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xbc>)
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f7ff ff96 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
          return -1;
 800fce0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        }
      }
 800fce4:	4628      	mov	r0, r5
 800fce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcea:	bf00      	nop
 800fcec:	08015aa2 	.word	0x08015aa2
 800fcf0:	40013800 	.word	0x40013800

0800fcf4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>:

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 800fcf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  {
    public:
      ros::Time data;

    Time():
      data()
 800fcf6:	4b08      	ldr	r3, [pc, #32]	; (800fd18 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()+0x24>)
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 800fcf8:	aa01      	add	r2, sp, #4
 800fcfa:	9301      	str	r3, [sp, #4]
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	9302      	str	r3, [sp, #8]
 800fd00:	9303      	str	r3, [sp, #12]
 800fd02:	6803      	ldr	r3, [r0, #0]
 800fd04:	210a      	movs	r1, #10
 800fd06:	681b      	ldr	r3, [r3, #0]

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 800fd08:	4604      	mov	r4, r0
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 800fd0a:	4798      	blx	r3
      }
    }

    uint32_t time(){
      return millis();
 800fd0c:	f7f0 fd1a 	bl	8000744 <millis>
        rt_time = hardware_.time();
 800fd10:	60e0      	str	r0, [r4, #12]
      }
 800fd12:	b004      	add	sp, #16
 800fd14:	bd10      	pop	{r4, pc}
 800fd16:	bf00      	nop
 800fd18:	080154d8 	.word	0x080154d8

0800fd1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()>:
          }
        }
        return false;
      }

      void negotiateTopics()
 800fd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd20:	4604      	mov	r4, r0
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800fd22:	4b2b      	ldr	r3, [pc, #172]	; (800fdd0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xb4>)
 800fd24:	b086      	sub	sp, #24
 800fd26:	9300      	str	r3, [sp, #0]
 800fd28:	4b2a      	ldr	r3, [pc, #168]	; (800fdd4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xb8>)
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fd30:	9302      	str	r3, [sp, #8]
 800fd32:	9303      	str	r3, [sp, #12]
 800fd34:	9304      	str	r3, [sp, #16]
 800fd36:	9205      	str	r2, [sp, #20]
 800fd38:	f200 4614 	addw	r6, r0, #1044	; 0x414
 800fd3c:	f500 658f 	add.w	r5, r0, #1144	; 0x478
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
 800fd40:	f44f 7700 	mov.w	r7, #512	; 0x200
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
 800fd44:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800fd48:	b1bb      	cbz	r3, 800fd7a <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x5e>
          {
            ti.topic_id = publishers[i]->id_;
 800fd4a:	689a      	ldr	r2, [r3, #8]
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fd4c:	6858      	ldr	r0, [r3, #4]
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
 800fd4e:	f8ad 2004 	strh.w	r2, [sp, #4]
            ti.topic_name = (char *) publishers[i]->topic_;
 800fd52:	681a      	ldr	r2, [r3, #0]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fd54:	6803      	ldr	r3, [r0, #0]
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
 800fd56:	9202      	str	r2, [sp, #8]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fd58:	689b      	ldr	r3, [r3, #8]
 800fd5a:	4798      	blx	r3
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fd5c:	6833      	ldr	r3, [r6, #0]
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fd5e:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fd60:	6858      	ldr	r0, [r3, #4]
 800fd62:	6803      	ldr	r3, [r0, #0]
 800fd64:	68db      	ldr	r3, [r3, #12]
 800fd66:	4798      	blx	r3
 800fd68:	6831      	ldr	r1, [r6, #0]
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
 800fd6a:	6823      	ldr	r3, [r4, #0]
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fd6c:	9004      	str	r0, [sp, #16]
            ti.buffer_size = OUTPUT_SIZE;
 800fd6e:	9705      	str	r7, [sp, #20]
            publish( publishers[i]->getEndpointType(), &ti );
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	466a      	mov	r2, sp
 800fd74:	6909      	ldr	r1, [r1, #16]
 800fd76:	4620      	mov	r0, r4
 800fd78:	4798      	blx	r3

      void negotiateTopics()
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
 800fd7a:	42ae      	cmp	r6, r5
 800fd7c:	d1e2      	bne.n	800fd44 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x28>
 800fd7e:	f204 46dc 	addw	r6, r4, #1244	; 0x4dc
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 800fd82:	f44f 7700 	mov.w	r7, #512	; 0x200
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
 800fd86:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800fd8a:	b1c8      	cbz	r0, 800fdc0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xa4>
          {
            ti.topic_id = subscribers[i]->id_;
 800fd8c:	6843      	ldr	r3, [r0, #4]
 800fd8e:	f8ad 3004 	strh.w	r3, [sp, #4]
            ti.topic_name = (char *) subscribers[i]->topic_;
 800fd92:	6883      	ldr	r3, [r0, #8]
 800fd94:	9302      	str	r3, [sp, #8]
            ti.message_type = (char *) subscribers[i]->getMsgType();
 800fd96:	6803      	ldr	r3, [r0, #0]
 800fd98:	689b      	ldr	r3, [r3, #8]
 800fd9a:	4798      	blx	r3
 800fd9c:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800fd9e:	6828      	ldr	r0, [r5, #0]
 800fda0:	6803      	ldr	r3, [r0, #0]
 800fda2:	68db      	ldr	r3, [r3, #12]
 800fda4:	4798      	blx	r3
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800fda6:	6823      	ldr	r3, [r4, #0]
          if(subscribers[i] != 0) // non-empty slot
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800fda8:	9004      	str	r0, [sp, #16]
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800fdaa:	6828      	ldr	r0, [r5, #0]
 800fdac:	f8d3 8000 	ldr.w	r8, [r3]
 800fdb0:	6803      	ldr	r3, [r0, #0]
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 800fdb2:	9705      	str	r7, [sp, #20]
            publish( subscribers[i]->getEndpointType(), &ti );
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	4798      	blx	r3
 800fdb8:	466a      	mov	r2, sp
 800fdba:	4601      	mov	r1, r0
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	47c0      	blx	r8
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
 800fdc0:	42ae      	cmp	r6, r5
 800fdc2:	d1e0      	bne.n	800fd86 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x6a>
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
          }
        }
        configured_ = true;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
      }
 800fdca:	b006      	add	sp, #24
 800fdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd0:	080154f0 	.word	0x080154f0
 800fdd4:	08015bf7 	.word	0x08015bf7

0800fdd8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)>:
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
        rt_time = hardware_.time();
      }

      void syncTime(uint8_t * data)
 800fdd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fdda:	4b1c      	ldr	r3, [pc, #112]	; (800fe4c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x74>)
 800fddc:	4604      	mov	r4, r0
 800fdde:	9301      	str	r3, [sp, #4]
 800fde0:	2300      	movs	r3, #0
 800fde2:	9302      	str	r3, [sp, #8]
 800fde4:	9303      	str	r3, [sp, #12]
 800fde6:	460d      	mov	r5, r1
 800fde8:	f7f0 fcac 	bl	8000744 <millis>
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 800fdec:	68e2      	ldr	r2, [r4, #12]

        t.deserialize(data);
 800fdee:	4629      	mov	r1, r5
      }

      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 800fdf0:	1a86      	subs	r6, r0, r2

        t.deserialize(data);
        t.data.sec += offset/1000;
 800fdf2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
 800fdf6:	a801      	add	r0, sp, #4
 800fdf8:	f7ff f871 	bl	800eede <std_msgs::Time::deserialize(unsigned char*)>
        t.data.sec += offset/1000;
 800fdfc:	fbb6 f2f5 	udiv	r2, r6, r5
 800fe00:	9b02      	ldr	r3, [sp, #8]
 800fe02:	4413      	add	r3, r2
        t.data.nsec += (offset%1000)*1000000UL;
 800fe04:	fb05 6212 	mls	r2, r5, r2, r6
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
        t.data.sec += offset/1000;
 800fe08:	9302      	str	r3, [sp, #8]
        t.data.nsec += (offset%1000)*1000000UL;
 800fe0a:	4e11      	ldr	r6, [pc, #68]	; (800fe50 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x78>)
 800fe0c:	9b03      	ldr	r3, [sp, #12]
 800fe0e:	fb06 3202 	mla	r2, r6, r2, r3
 800fe12:	9203      	str	r2, [sp, #12]
 800fe14:	f7f0 fc96 	bl	8000744 <millis>
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 800fe18:	fbb0 f3f5 	udiv	r3, r0, r5
 800fe1c:	9a02      	ldr	r2, [sp, #8]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800fe1e:	9903      	ldr	r1, [sp, #12]
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 800fe20:	3a01      	subs	r2, #1
 800fe22:	1ad2      	subs	r2, r2, r3
 800fe24:	6122      	str	r2, [r4, #16]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800fe26:	4a0b      	ldr	r2, [pc, #44]	; (800fe54 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x7c>)
 800fe28:	fb05 0013 	mls	r0, r5, r3, r0
 800fe2c:	440a      	add	r2, r1
 800fe2e:	4621      	mov	r1, r4
 800fe30:	fb06 2310 	mls	r3, r6, r0, r2
        normalizeSecNSec(sec_offset, nsec_offset);
 800fe34:	f104 0010 	add.w	r0, r4, #16

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800fe38:	f841 3f14 	str.w	r3, [r1, #20]!
        normalizeSecNSec(sec_offset, nsec_offset);
 800fe3c:	f7f4 ff1c 	bl	8004c78 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 800fe40:	f7f0 fc80 	bl	8000744 <millis>
        t.deserialize(data);
        t.data.sec += offset/1000;
        t.data.nsec += (offset%1000)*1000000UL;

        this->setNow(t.data);
        last_sync_receive_time = hardware_.time();
 800fe44:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
      }
 800fe48:	b004      	add	sp, #16
 800fe4a:	bd70      	pop	{r4, r5, r6, pc}
 800fe4c:	080154d8 	.word	0x080154d8
 800fe50:	000f4240 	.word	0x000f4240
 800fe54:	3b9aca00 	.word	0x3b9aca00

0800fe58 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>:
      /* This function goes in your loop() function, it handles
       *  serial input and callbacks for subscribers.
       */


      virtual int spinOnce(){
 800fe58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	f7f0 fc71 	bl	8000744 <millis>

        /* restart if timed out */
        uint32_t c_time = hardware_.time();
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 800fe62:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800fe66:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	1ac3      	subs	r3, r0, r3
 800fe6e:	4293      	cmp	r3, r2
            configured_ = false;
 800fe70:	bf84      	itt	hi
 800fe72:	2300      	movhi	r3, #0
 800fe74:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
         }

        /* reset if message has timed out */
        if ( mode_ != MODE_FIRST_FF){
 800fe78:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 800fe7c:	b133      	cbz	r3, 800fe8c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x34>
          if (c_time > last_msg_timeout_time){
 800fe7e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 800fe82:	4283      	cmp	r3, r0
            mode_ = MODE_FIRST_FF;
 800fe84:	bf3c      	itt	cc
 800fe86:	2300      	movcc	r3, #0
 800fe88:	f8c4 34e0 	strcc.w	r3, [r4, #1248]	; 0x4e0
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }

    int read(){
      if(USART_CNTIN == USART_CNTOUT)
 800fe8c:	4f74      	ldr	r7, [pc, #464]	; (8010060 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x208>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800fe8e:	f04f 0800 	mov.w	r8, #0
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
              }else{
                if(subscribers[topic_-100])
                  subscribers[topic_-100]->callback( message_in );
 800fe92:	f104 0918 	add.w	r9, r4, #24
 800fe96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe98:	6a3b      	ldr	r3, [r7, #32]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	f000 80cc 	beq.w	8010038 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1e0>
        return -1;
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800fea0:	6a3b      	ldr	r3, [r7, #32]
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fea2:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
 800fea6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800feaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800feac:	6a3a      	ldr	r2, [r7, #32]

    int read(){
      if(USART_CNTIN == USART_CNTOUT)
        return -1;
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800feae:	b29b      	uxth	r3, r3
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800feb0:	3201      	adds	r2, #1
 800feb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800feb6:	623a      	str	r2, [r7, #32]
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 800feb8:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800febc:	2d07      	cmp	r5, #7
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 800febe:	441a      	add	r2, r3
 800fec0:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fec4:	d10f      	bne.n	800fee6 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x8e>
            message_in[index_++] = data;
 800fec6:	f8d4 24ec 	ldr.w	r2, [r4, #1260]	; 0x4ec
 800feca:	1c51      	adds	r1, r2, #1
 800fecc:	4422      	add	r2, r4
 800fece:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
 800fed2:	7613      	strb	r3, [r2, #24]
            bytes_--;
 800fed4:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 800fed8:	3b01      	subs	r3, #1
 800feda:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1d9      	bne.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              mode_ = MODE_MSG_CHECKSUM;
 800fee2:	2308      	movs	r3, #8
 800fee4:	e01a      	b.n	800ff1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
          }else if( mode_ == MODE_FIRST_FF ){
 800fee6:	b9a5      	cbnz	r5, 800ff12 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xba>
            if(data == 0xff){
 800fee8:	2bff      	cmp	r3, #255	; 0xff
 800feea:	d107      	bne.n	800fefc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xa4>
              mode_++;
 800feec:	2301      	movs	r3, #1
 800feee:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 800fef2:	f106 0314 	add.w	r3, r6, #20
 800fef6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
 800fefa:	e7cc      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 800fefc:	f7f0 fc22 	bl	8000744 <millis>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 800ff00:	1b80      	subs	r0, r0, r6
 800ff02:	2805      	cmp	r0, #5
 800ff04:	d9c7      	bls.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
 800ff06:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
              return -2;
 800ff0a:	f06f 0001 	mvn.w	r0, #1
 800ff0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
 800ff12:	2d01      	cmp	r5, #1
 800ff14:	d10f      	bne.n	800ff36 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xde>
            if(data == PROTOCOL_VER){
 800ff16:	2bfe      	cmp	r3, #254	; 0xfe
 800ff18:	d103      	bne.n	800ff22 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xca>
              mode_++;
 800ff1a:	2302      	movs	r3, #2
 800ff1c:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800ff20:	e7b9      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }else{
              mode_ = MODE_FIRST_FF;
              if (configured_ == false)
 800ff22:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
            if(data == PROTOCOL_VER){
              mode_++;
            }else{
              mode_ = MODE_FIRST_FF;
 800ff26:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
              if (configured_ == false)
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1b3      	bne.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f7ff fee0 	bl	800fcf4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
 800ff34:	e7af      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 800ff36:	2d02      	cmp	r5, #2
 800ff38:	d105      	bne.n	800ff46 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xee>
            bytes_ = data;
 800ff3a:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
            index_ = 0;
 800ff3e:	f8c4 84ec 	str.w	r8, [r4, #1260]	; 0x4ec
            mode_++;
 800ff42:	2203      	movs	r2, #3
 800ff44:	e020      	b.n	800ff88 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x130>
            checksum_ = data;               /* first byte for calculating size checksum */
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 800ff46:	2d03      	cmp	r5, #3
 800ff48:	d107      	bne.n	800ff5a <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x102>
            bytes_ += data<<8;
 800ff4a:	f8d4 24e4 	ldr.w	r2, [r4, #1252]	; 0x4e4
 800ff4e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800ff52:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
	    mode_++;
 800ff56:	2304      	movs	r3, #4
 800ff58:	e7e0      	b.n	800ff1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 800ff5a:	2d04      	cmp	r5, #4
 800ff5c:	d10f      	bne.n	800ff7e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x126>
            if( (checksum_%256) == 255)
 800ff5e:	4b41      	ldr	r3, [pc, #260]	; (8010064 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x20c>)
 800ff60:	4013      	ands	r3, r2
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	bfbe      	ittt	lt
 800ff66:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800ff6a:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800ff6e:	3301      	addlt	r3, #1
 800ff70:	2bff      	cmp	r3, #255	; 0xff
 800ff72:	d101      	bne.n	800ff78 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x120>
	      mode_++;
 800ff74:	2305      	movs	r3, #5
 800ff76:	e7d1      	b.n	800ff1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
	    else
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800ff78:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
 800ff7c:	e78b      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 800ff7e:	2d05      	cmp	r5, #5
 800ff80:	d107      	bne.n	800ff92 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x13a>
            topic_ = data;
 800ff82:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            mode_++;
 800ff86:	2206      	movs	r2, #6
 800ff88:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
            checksum_ = data;               /* first byte included in checksum */
 800ff8c:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
 800ff90:	e781      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 800ff92:	2d06      	cmp	r5, #6
 800ff94:	d10b      	bne.n	800ffae <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x156>
            topic_ += data<<8;
 800ff96:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
 800ff9a:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800ff9e:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            mode_ = MODE_MESSAGE;
 800ffa2:	2307      	movs	r3, #7
 800ffa4:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
            if(bytes_ == 0)
 800ffa8:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 800ffac:	e797      	b.n	800fede <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x86>
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 800ffae:	2d08      	cmp	r5, #8
 800ffb0:	f47f af71 	bne.w	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
 800ffb4:	4b2b      	ldr	r3, [pc, #172]	; (8010064 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x20c>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800ffb6:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
            if( (checksum_%256) == 255){
 800ffba:	4013      	ands	r3, r2
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	bfbe      	ittt	lt
 800ffc0:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800ffc4:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800ffc8:	3301      	addlt	r3, #1
 800ffca:	2bff      	cmp	r3, #255	; 0xff
 800ffcc:	f47f af63 	bne.w	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 800ffd0:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 800ffd4:	b96b      	cbnz	r3, 800fff2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x19a>
                requestSyncTime();
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f7ff fe8c 	bl	800fcf4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
                negotiateTopics();
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f7ff fe9d 	bl	800fd1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()>
                last_sync_time = c_time;
 800ffe2:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
                last_sync_receive_time = c_time;
 800ffe6:	f8c4 64fc 	str.w	r6, [r4, #1276]	; 0x4fc
                return -1;
 800ffea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
              }else if(topic_ == TopicInfo::ID_TIME){
 800fff2:	2b0a      	cmp	r3, #10
 800fff4:	d104      	bne.n	8010000 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1a8>
                syncTime(message_in);
 800fff6:	4649      	mov	r1, r9
 800fff8:	4620      	mov	r0, r4
 800fffa:	f7ff feed 	bl	800fdd8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)>
 800fffe:	e74a      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 8010000:	2b06      	cmp	r3, #6
 8010002:	d108      	bne.n	8010016 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1be>
                  req_param_resp.deserialize(message_in);
 8010004:	4649      	mov	r1, r9
 8010006:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
 801000a:	f7ff fa41 	bl	800f490 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>
                  param_recieved= true;
 801000e:	2301      	movs	r3, #1
 8010010:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 8010014:	e73f      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 8010016:	2b0b      	cmp	r3, #11
 8010018:	d102      	bne.n	8010020 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1c8>
                  configured_ = false;
 801001a:	f884 84f4 	strb.w	r8, [r4, #1268]	; 0x4f4
 801001e:	e73a      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else{
                if(subscribers[topic_-100])
 8010020:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010024:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010028:	2800      	cmp	r0, #0
 801002a:	f43f af34 	beq.w	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
                  subscribers[topic_-100]->callback( message_in );
 801002e:	6803      	ldr	r3, [r0, #0]
 8010030:	4649      	mov	r1, r9
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4798      	blx	r3
 8010036:	e72e      	b.n	800fe96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }
          }
        }

        /* occasionally sync time */
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 8010038:	f894 04f4 	ldrb.w	r0, [r4, #1268]	; 0x4f4
 801003c:	b170      	cbz	r0, 801005c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x204>
 801003e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010042:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 8010046:	1af3      	subs	r3, r6, r3
 8010048:	4293      	cmp	r3, r2
 801004a:	d904      	bls.n	8010056 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1fe>
          requestSyncTime();
 801004c:	4620      	mov	r0, r4
 801004e:	f7ff fe51 	bl	800fcf4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
          last_sync_time = c_time;
 8010052:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
        }

        return 0;
 8010056:	2000      	movs	r0, #0
 8010058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
 801005c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010060:	200000c0 	.word	0x200000c0
 8010064:	800000ff 	.word	0x800000ff

08010068 <main>:


nav_msgs::Odometry odom;
ros::Publisher odom_pub("odom", &odom);

int main(){
 8010068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return &hardware_;
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
 801006c:	4c3a      	ldr	r4, [pc, #232]	; (8010158 <main+0xf0>)
 801006e:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
  /* System Clocks Configuration */
  RCC_Configuration();
 8010072:	f7f0 fb77 	bl	8000764 <RCC_Configuration>

  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8010076:	2101      	movs	r1, #1
 8010078:	4838      	ldr	r0, [pc, #224]	; (801015c <main+0xf4>)
 801007a:	f7f2 f96b 	bl	8002354 <GPIO_PinRemapConfig>
  I2C1_Init();
 801007e:	f7f0 fa21 	bl	80004c4 <I2C1_Init>
  SysTick_Init();
 8010082:	f7f0 fb2b 	bl	80006dc <SysTick_Init>
  DEBUG_Init();
 8010086:	f7f0 f9c8 	bl	800041a <DEBUG_Init>
  SHUTDOWN_Init();
 801008a:	f7f0 f9ed 	bl	8000468 <SHUTDOWN_Init>
  LED_Init();
 801008e:	f7f0 f981 	bl	8000394 <LED_Init>
 8010092:	f504 6086 	add.w	r0, r4, #1072	; 0x430
 8010096:	f7ff fd11 	bl	800fabc <ArduinoHardware::init()>
 801009a:	f604 02a4 	addw	r2, r4, #2212	; 0x8a4
        mode_ = 0;
        bytes_ = 0;
        index_ = 0;
        topic_ = 0;
 801009e:	4611      	mov	r1, r2
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
        mode_ = 0;
 80100a0:	2300      	movs	r3, #0
 80100a2:	f8c4 390c 	str.w	r3, [r4, #2316]	; 0x90c
        bytes_ = 0;
 80100a6:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
        index_ = 0;
 80100aa:	f8c4 3918 	str.w	r3, [r4, #2328]	; 0x918
        topic_ = 0;
 80100ae:	f8c4 3914 	str.w	r3, [r4, #2324]	; 0x914

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
 80100b2:	f851 0f04 	ldr.w	r0, [r1, #4]!
 80100b6:	b940      	cbnz	r0, 80100ca <main+0x62>
            subscribers[i] = (Subscriber_*) &s;
 80100b8:	4829      	ldr	r0, [pc, #164]	; (8010160 <main+0xf8>)
 80100ba:	eb04 0183 	add.w	r1, r4, r3, lsl #2
            s.id_ = i+100;
 80100be:	3364      	adds	r3, #100	; 0x64
      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
            subscribers[i] = (Subscriber_*) &s;
 80100c0:	f8c1 08a8 	str.w	r0, [r1, #2216]	; 0x8a8
            s.id_ = i+100;
 80100c4:	f8c4 3960 	str.w	r3, [r4, #2400]	; 0x960
 80100c8:	e002      	b.n	80100d0 <main+0x68>
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 80100ca:	3301      	adds	r3, #1
 80100cc:	2b19      	cmp	r3, #25
 80100ce:	d1f0      	bne.n	80100b2 <main+0x4a>
 80100d0:	2300      	movs	r3, #0
          if(subscribers[i] == 0){ // empty slot
 80100d2:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80100d6:	b941      	cbnz	r1, 80100ea <main+0x82>
            subscribers[i] = (Subscriber_*) &s;
 80100d8:	4922      	ldr	r1, [pc, #136]	; (8010164 <main+0xfc>)
 80100da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
            s.id_ = i+100;
 80100de:	3364      	adds	r3, #100	; 0x64
      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
            subscribers[i] = (Subscriber_*) &s;
 80100e0:	f8c2 18a8 	str.w	r1, [r2, #2216]	; 0x8a8
            s.id_ = i+100;
 80100e4:	f8c4 39a0 	str.w	r3, [r4, #2464]	; 0x9a0
 80100e8:	e002      	b.n	80100f0 <main+0x88>
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 80100ea:	3301      	adds	r3, #1
 80100ec:	2b19      	cmp	r3, #25
 80100ee:	d1f0      	bne.n	80100d2 <main+0x6a>
 80100f0:	491d      	ldr	r1, [pc, #116]	; (8010168 <main+0x100>)
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 80100f2:	2300      	movs	r3, #0
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 80100f4:	460a      	mov	r2, r1

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
 80100f6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80100fa:	b960      	cbnz	r0, 8010116 <main+0xae>
            publishers[i] = &p;
 80100fc:	4a1b      	ldr	r2, [pc, #108]	; (801016c <main+0x104>)
 80100fe:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8010102:	f8c0 2844 	str.w	r2, [r0, #2116]	; 0x844
            p.id_ = i+100+MAX_SUBSCRIBERS;
 8010106:	337d      	adds	r3, #125	; 0x7d
            p.nh_ = this;
 8010108:	f2a2 528c 	subw	r2, r2, #1420	; 0x58c
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
            publishers[i] = &p;
            p.id_ = i+100+MAX_SUBSCRIBERS;
 801010c:	f8c4 39c0 	str.w	r3, [r4, #2496]	; 0x9c0
            p.nh_ = this;
 8010110:	f8c4 29c4 	str.w	r2, [r4, #2500]	; 0x9c4
 8010114:	e002      	b.n	801011c <main+0xb4>
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 8010116:	3301      	adds	r3, #1
 8010118:	2b19      	cmp	r3, #25
 801011a:	d1ec      	bne.n	80100f6 <main+0x8e>
 801011c:	2300      	movs	r3, #0
          if(publishers[i] == 0){ // empty slot
 801011e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010122:	b962      	cbnz	r2, 801013e <main+0xd6>
            publishers[i] = &p;
 8010124:	4a12      	ldr	r2, [pc, #72]	; (8010170 <main+0x108>)
 8010126:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801012a:	f8c1 2844 	str.w	r2, [r1, #2116]	; 0x844
            p.id_ = i+100+MAX_SUBSCRIBERS;
 801012e:	337d      	adds	r3, #125	; 0x7d
            p.nh_ = this;
 8010130:	f5a2 62be 	sub.w	r2, r2, #1520	; 0x5f0
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
            publishers[i] = &p;
            p.id_ = i+100+MAX_SUBSCRIBERS;
 8010134:	f8c4 3a24 	str.w	r3, [r4, #2596]	; 0xa24
            p.nh_ = this;
 8010138:	f8c4 2a28 	str.w	r2, [r4, #2600]	; 0xa28
 801013c:	e002      	b.n	8010144 <main+0xdc>
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 801013e:	3301      	adds	r3, #1
 8010140:	2b19      	cmp	r3, #25
 8010142:	d1ec      	bne.n	801011e <main+0xb6>
  nh.subscribe(motor_sub);
  nh.subscribe(led_sub);
  nh.advertise(odom_pub);
  odom_broadcaster.init(nh);

  while(!nh.connected()){
 8010144:	f894 3920 	ldrb.w	r3, [r4, #2336]	; 0x920
      }


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
 8010148:	4803      	ldr	r0, [pc, #12]	; (8010158 <main+0xf0>)
 801014a:	b99b      	cbnz	r3, 8010174 <main+0x10c>
    nh.spinOnce();
 801014c:	f200 402c 	addw	r0, r0, #1068	; 0x42c
 8010150:	f7ff fe82 	bl	800fe58 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>
 8010154:	e7f6      	b.n	8010144 <main+0xdc>
 8010156:	bf00      	nop
 8010158:	200000c0 	.word	0x200000c0
 801015c:	00300200 	.word	0x00300200
 8010160:	20000a1c 	.word	0x20000a1c
 8010164:	20000a5c 	.word	0x20000a5c
 8010168:	20000900 	.word	0x20000900
 801016c:	20000a78 	.word	0x20000a78
 8010170:	20000adc 	.word	0x20000adc
  }

  shuttingDown = false;
 8010174:	2300      	movs	r3, #0
 8010176:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428

  

  float KP;
  if(!nh.getParam("serial_node/KP", &KP, 1)){
 801017a:	aa23      	add	r2, sp, #140	; 0x8c
 801017c:	2301      	movs	r3, #1
 801017e:	49a4      	ldr	r1, [pc, #656]	; (8010410 <main+0x3a8>)
 8010180:	f200 402c 	addw	r0, r0, #1068	; 0x42c
 8010184:	f7ff fd0a 	bl	800fb9c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 8010188:	b908      	cbnz	r0, 801018e <main+0x126>
    KP = 5000;
 801018a:	4ba2      	ldr	r3, [pc, #648]	; (8010414 <main+0x3ac>)
 801018c:	9323      	str	r3, [sp, #140]	; 0x8c
  }
  float KI;
  if(!nh.getParam("serial_node/KI", &KI, 1)){
 801018e:	2301      	movs	r3, #1
 8010190:	aa24      	add	r2, sp, #144	; 0x90
 8010192:	49a1      	ldr	r1, [pc, #644]	; (8010418 <main+0x3b0>)
 8010194:	48a1      	ldr	r0, [pc, #644]	; (801041c <main+0x3b4>)
 8010196:	f7ff fd01 	bl	800fb9c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 801019a:	b908      	cbnz	r0, 80101a0 <main+0x138>
    KI = 5000;
 801019c:	4b9d      	ldr	r3, [pc, #628]	; (8010414 <main+0x3ac>)
 801019e:	9324      	str	r3, [sp, #144]	; 0x90
  }
  float KD;
  if(!nh.getParam("serial_node/KD", &KD, 1)){
 80101a0:	2301      	movs	r3, #1
 80101a2:	aa25      	add	r2, sp, #148	; 0x94
 80101a4:	499e      	ldr	r1, [pc, #632]	; (8010420 <main+0x3b8>)
 80101a6:	489d      	ldr	r0, [pc, #628]	; (801041c <main+0x3b4>)
 80101a8:	f7ff fcf8 	bl	800fb9c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 80101ac:	b910      	cbnz	r0, 80101b4 <main+0x14c>
    KD = 4;
 80101ae:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80101b2:	9325      	str	r3, [sp, #148]	; 0x94
  }
  float integralSaturation;
  if(!nh.getParam("serial_node/integralSaturation", &integralSaturation, 1)){
 80101b4:	2301      	movs	r3, #1
 80101b6:	aa26      	add	r2, sp, #152	; 0x98
 80101b8:	499a      	ldr	r1, [pc, #616]	; (8010424 <main+0x3bc>)
 80101ba:	4898      	ldr	r0, [pc, #608]	; (801041c <main+0x3b4>)
 80101bc:	f7ff fcee 	bl	800fb9c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 80101c0:	b908      	cbnz	r0, 80101c6 <main+0x15e>
    integralSaturation = 10000;
 80101c2:	4b99      	ldr	r3, [pc, #612]	; (8010428 <main+0x3c0>)
 80101c4:	9326      	str	r3, [sp, #152]	; 0x98
  }
  float wheelRadius;
  if(!nh.getParam("serial_node/wheelRadius", &wheelRadius, 1)){
 80101c6:	2301      	movs	r3, #1
 80101c8:	aa27      	add	r2, sp, #156	; 0x9c
 80101ca:	4998      	ldr	r1, [pc, #608]	; (801042c <main+0x3c4>)
 80101cc:	4893      	ldr	r0, [pc, #588]	; (801041c <main+0x3b4>)
 80101ce:	f7ff fce5 	bl	800fb9c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 80101d2:	b908      	cbnz	r0, 80101d8 <main+0x170>
    wheelRadius = 0.04;
 80101d4:	4b96      	ldr	r3, [pc, #600]	; (8010430 <main+0x3c8>)
 80101d6:	9327      	str	r3, [sp, #156]	; 0x9c
  }

  if(!nh.getParam("serial_node/widthBetweenMotorPivotPoints", &L, 1)){
 80101d8:	4c96      	ldr	r4, [pc, #600]	; (8010434 <main+0x3cc>)
 80101da:	2301      	movs	r3, #1
 80101dc:	1d22      	adds	r2, r4, #4
 80101de:	4996      	ldr	r1, [pc, #600]	; (8010438 <main+0x3d0>)
 80101e0:	f204 402c 	addw	r0, r4, #1068	; 0x42c
 80101e4:	f7ff fcda 	bl	800fb9c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 80101e8:	b908      	cbnz	r0, 80101ee <main+0x186>
    L = 0.17;
 80101ea:	4b94      	ldr	r3, [pc, #592]	; (801043c <main+0x3d4>)
 80101ec:	6063      	str	r3, [r4, #4]
  }

  if(!nh.getParam("serial_node/motorPivotPointToWheel", &d, 1)){
 80101ee:	4c91      	ldr	r4, [pc, #580]	; (8010434 <main+0x3cc>)
 80101f0:	2301      	movs	r3, #1
 80101f2:	f504 6223 	add.w	r2, r4, #2608	; 0xa30
 80101f6:	4992      	ldr	r1, [pc, #584]	; (8010440 <main+0x3d8>)
 80101f8:	f204 402c 	addw	r0, r4, #1068	; 0x42c
 80101fc:	f7ff fcce 	bl	800fb9c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 8010200:	b910      	cbnz	r0, 8010208 <main+0x1a0>
    d = 0.06;
 8010202:	4b90      	ldr	r3, [pc, #576]	; (8010444 <main+0x3dc>)
 8010204:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
  }

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 8010208:	2604      	movs	r6, #4

  if(!nh.getParam("serial_node/motorPivotPointToWheel", &d, 1)){
    d = 0.06;
  }

  delay(1000);
 801020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801020e:	f7f0 fa87 	bl	8000720 <delay>

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 8010212:	4b8d      	ldr	r3, [pc, #564]	; (8010448 <main+0x3e0>)
 8010214:	4a8d      	ldr	r2, [pc, #564]	; (801044c <main+0x3e4>)
 8010216:	2101      	movs	r1, #1
 8010218:	9600      	str	r6, [sp, #0]
 801021a:	a84e      	add	r0, sp, #312	; 0x138
 801021c:	f7f4 fcb3 	bl	8004b86 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  SL.m_ServoPin = GPIO_Pin_9;
 8010220:	f44f 7300 	mov.w	r3, #512	; 0x200
  SL.m_ServoPort = GPIOB;
 8010224:	4c8a      	ldr	r4, [pc, #552]	; (8010450 <main+0x3e8>)
  }

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
 8010226:	9354      	str	r3, [sp, #336]	; 0x150
  SL.m_ServoPort = GPIOB;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 8010228:	2303      	movs	r3, #3
  SR.m_ServoPin = GPIO_Pin_8;
  SR.m_ServoPort = GPIOB;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 801022a:	2701      	movs	r7, #1

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 801022c:	9300      	str	r3, [sp, #0]
 801022e:	4a89      	ldr	r2, [pc, #548]	; (8010454 <main+0x3ec>)
 8010230:	4b85      	ldr	r3, [pc, #532]	; (8010448 <main+0x3e0>)
 8010232:	2101      	movs	r1, #1
 8010234:	a867      	add	r0, sp, #412	; 0x19c
  SR.m_ServoPin = GPIO_Pin_8;
 8010236:	f44f 7880 	mov.w	r8, #256	; 0x100

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;
 801023a:	9455      	str	r4, [sp, #340]	; 0x154

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 801023c:	f7f4 fca3 	bl	8004b86 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  SR.m_ServoPin = GPIO_Pin_8;
  SR.m_ServoPort = GPIOB;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 8010240:	9700      	str	r7, [sp, #0]
 8010242:	4b85      	ldr	r3, [pc, #532]	; (8010458 <main+0x3f0>)
 8010244:	4a85      	ldr	r2, [pc, #532]	; (801045c <main+0x3f4>)
 8010246:	2102      	movs	r1, #2
 8010248:	a880      	add	r0, sp, #512	; 0x200
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
 801024a:	4d85      	ldr	r5, [pc, #532]	; (8010460 <main+0x3f8>)
  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
  SR.m_ServoPin = GPIO_Pin_8;
 801024c:	f8cd 81b4 	str.w	r8, [sp, #436]	; 0x1b4
  SR.m_ServoPort = GPIOB;
 8010250:	946e      	str	r4, [sp, #440]	; 0x1b8

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 8010252:	f7f4 fc98 	bl	8004b86 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
 8010256:	4a83      	ldr	r2, [pc, #524]	; (8010464 <main+0x3fc>)
 8010258:	9703      	str	r7, [sp, #12]
 801025a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 801025e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010262:	9202      	str	r2, [sp, #8]
 8010264:	e88d 0084 	stmia.w	sp, {r2, r7}
 8010268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801026c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010270:	a880      	add	r0, sp, #512	; 0x200
 8010272:	9506      	str	r5, [sp, #24]
 8010274:	9504      	str	r5, [sp, #16]
 8010276:	f7f4 fc8c 	bl	8004b92 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FR.encoderAddr = (0x10 | 0x08);
 801027a:	2318      	movs	r3, #24
 801027c:	f8ad 3248 	strh.w	r3, [sp, #584]	; 0x248
  FR.setRegulator(KP,KI,KD,integralSaturation);
 8010280:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010282:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010284:	9300      	str	r3, [sp, #0]
 8010286:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8010288:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801028a:	a880      	add	r0, sp, #512	; 0x200
 801028c:	f7f4 fc93 	bl	8004bb6 <motorSettings::setRegulator(float, float, float, float)>
  FR.wheelRadius = wheelRadius;
 8010290:	9b27      	ldr	r3, [sp, #156]	; 0x9c

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 8010292:	4a75      	ldr	r2, [pc, #468]	; (8010468 <main+0x400>)
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
  FR.encoderAddr = (0x10 | 0x08);
  FR.setRegulator(KP,KI,KD,integralSaturation);
  FR.wheelRadius = wheelRadius;
 8010294:	9398      	str	r3, [sp, #608]	; 0x260

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 8010296:	2102      	movs	r1, #2
 8010298:	4b74      	ldr	r3, [pc, #464]	; (801046c <main+0x404>)
 801029a:	9600      	str	r6, [sp, #0]
 801029c:	a899      	add	r0, sp, #612	; 0x264
 801029e:	f7f4 fc72 	bl	8004b86 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
 80102a2:	f04f 0802 	mov.w	r8, #2
 80102a6:	f04f 0910 	mov.w	r9, #16
 80102aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102ae:	4622      	mov	r2, r4
 80102b0:	9406      	str	r4, [sp, #24]
 80102b2:	9404      	str	r4, [sp, #16]
 80102b4:	9303      	str	r3, [sp, #12]
 80102b6:	e88d 0220 	stmia.w	sp, {r5, r9}
 80102ba:	2320      	movs	r3, #32
 80102bc:	4631      	mov	r1, r6
 80102be:	a899      	add	r0, sp, #612	; 0x264
 80102c0:	f8cd 8014 	str.w	r8, [sp, #20]
 80102c4:	9502      	str	r5, [sp, #8]
 80102c6:	f7f4 fc64 	bl	8004b92 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FL.encoderAddr = (0x10);
  FL.setRegulator(KP,KI,KD,integralSaturation);
 80102ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80102cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80102ce:	9300      	str	r3, [sp, #0]
 80102d0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80102d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80102d4:	a899      	add	r0, sp, #612	; 0x264

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
 80102d6:	f8ad 92ac 	strh.w	r9, [sp, #684]	; 0x2ac
  FL.setRegulator(KP,KI,KD,integralSaturation);
 80102da:	f7f4 fc6c 	bl	8004bb6 <motorSettings::setRegulator(float, float, float, float)>
  FL.wheelRadius = wheelRadius;
 80102de:	9b27      	ldr	r3, [sp, #156]	; 0x9c

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 80102e0:	4a63      	ldr	r2, [pc, #396]	; (8010470 <main+0x408>)
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
  FL.setRegulator(KP,KI,KD,integralSaturation);
  FL.wheelRadius = wheelRadius;
 80102e2:	93b1      	str	r3, [sp, #708]	; 0x2c4

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 80102e4:	4641      	mov	r1, r8
 80102e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102ea:	9600      	str	r6, [sp, #0]
 80102ec:	a8b2      	add	r0, sp, #712	; 0x2c8
 80102ee:	f7f4 fc4a 	bl	8004b86 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  RL.setDCPins(GPIO_Pin_11, GPIOB, GPIO_Pin_12, GPIOB,
    GPIO_Pin_13, GPIOB, GPIO_Pin_14, GPIOB,
    GPIO_Pin_3, GPIOA);
 80102f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80102f6:	f04f 0908 	mov.w	r9, #8
 80102fa:	9303      	str	r3, [sp, #12]
 80102fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010300:	4622      	mov	r2, r4
 8010302:	9404      	str	r4, [sp, #16]
 8010304:	9402      	str	r4, [sp, #8]
 8010306:	9301      	str	r3, [sp, #4]
 8010308:	9400      	str	r4, [sp, #0]
 801030a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801030e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010312:	a8b2      	add	r0, sp, #712	; 0x2c8
 8010314:	9506      	str	r5, [sp, #24]
 8010316:	f8cd 9014 	str.w	r9, [sp, #20]
 801031a:	f7f4 fc3a 	bl	8004b92 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RL.encoderAddr = (0x10 | 0x04);
 801031e:	2314      	movs	r3, #20
 8010320:	f8ad 3310 	strh.w	r3, [sp, #784]	; 0x310
  RL.setRegulator(KP,KI,KD,integralSaturation);
 8010324:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010326:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801032c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801032e:	a8b2      	add	r0, sp, #712	; 0x2c8
 8010330:	f7f4 fc41 	bl	8004bb6 <motorSettings::setRegulator(float, float, float, float)>
  RL.wheelRadius = wheelRadius;
 8010334:	9b27      	ldr	r3, [sp, #156]	; 0x9c

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 8010336:	4a4f      	ldr	r2, [pc, #316]	; (8010474 <main+0x40c>)
  RL.setDCPins(GPIO_Pin_11, GPIOB, GPIO_Pin_12, GPIOB,
    GPIO_Pin_13, GPIOB, GPIO_Pin_14, GPIOB,
    GPIO_Pin_3, GPIOA);
  RL.encoderAddr = (0x10 | 0x04);
  RL.setRegulator(KP,KI,KD,integralSaturation);
  RL.wheelRadius = wheelRadius;
 8010338:	93ca      	str	r3, [sp, #808]	; 0x328

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 801033a:	4641      	mov	r1, r8
 801033c:	4b46      	ldr	r3, [pc, #280]	; (8010458 <main+0x3f0>)
 801033e:	9600      	str	r6, [sp, #0]
 8010340:	a8cb      	add	r0, sp, #812	; 0x32c
 8010342:	f7f4 fc20 	bl	8004b86 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
 8010346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801034a:	4622      	mov	r2, r4
 801034c:	9305      	str	r3, [sp, #20]
 801034e:	9404      	str	r4, [sp, #16]
 8010350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010354:	4639      	mov	r1, r7
 8010356:	a8cb      	add	r0, sp, #812	; 0x32c
 8010358:	9506      	str	r5, [sp, #24]
 801035a:	f8cd 900c 	str.w	r9, [sp, #12]
 801035e:	9502      	str	r5, [sp, #8]
 8010360:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8010364:	f7f4 fc15 	bl	8004b92 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
 8010368:	231c      	movs	r3, #28
 801036a:	f8ad 3374 	strh.w	r3, [sp, #884]	; 0x374
  RR.setRegulator(KP,KI,KD,integralSaturation);
 801036e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010370:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010372:	9300      	str	r3, [sp, #0]
 8010374:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8010376:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8010378:	a8cb      	add	r0, sp, #812	; 0x32c
 801037a:	f7f4 fc1c 	bl	8004bb6 <motorSettings::setRegulator(float, float, float, float)>
  RR.wheelRadius = wheelRadius;
 801037e:	9b27      	ldr	r3, [sp, #156]	; 0x9c

  char error[150];
  servo_left = motor::createMotor(&SL);
 8010380:	a84e      	add	r0, sp, #312	; 0x138
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
  RR.setRegulator(KP,KI,KD,integralSaturation);
  RR.wheelRadius = wheelRadius;
 8010382:	93e3      	str	r3, [sp, #908]	; 0x38c

  char error[150];
  servo_left = motor::createMotor(&SL);
 8010384:	f7f4 f892 	bl	80044ac <motor::createMotor(motorSettings*)>
 8010388:	4c2a      	ldr	r4, [pc, #168]	; (8010434 <main+0x3cc>)
  if(!servo_left->motorInit()){
 801038a:	6803      	ldr	r3, [r0, #0]
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
  RR.setRegulator(KP,KI,KD,integralSaturation);
  RR.wheelRadius = wheelRadius;

  char error[150];
  servo_left = motor::createMotor(&SL);
 801038c:	61a0      	str	r0, [r4, #24]
  if(!servo_left->motorInit()){
 801038e:	68db      	ldr	r3, [r3, #12]
 8010390:	4798      	blx	r3
 8010392:	b968      	cbnz	r0, 80103b0 <main+0x348>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
 8010394:	69a0      	ldr	r0, [r4, #24]
 8010396:	6803      	ldr	r3, [r0, #0]
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	4798      	blx	r3
 801039c:	4936      	ldr	r1, [pc, #216]	; (8010478 <main+0x410>)
 801039e:	4602      	mov	r2, r0
 80103a0:	a8e4      	add	r0, sp, #912	; 0x390
 80103a2:	f003 fa11 	bl	80137c8 <siprintf>
    nh.logerror(error);
 80103a6:	a9e4      	add	r1, sp, #912	; 0x390
 80103a8:	f204 402c 	addw	r0, r4, #1068	; 0x42c
 80103ac:	f7ff fc2e 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  servo_right = motor::createMotor(&SR);
 80103b0:	a867      	add	r0, sp, #412	; 0x19c
 80103b2:	f7f4 f87b 	bl	80044ac <motor::createMotor(motorSettings*)>
  if(!servo_right->motorInit()){
 80103b6:	6803      	ldr	r3, [r0, #0]
  if(!servo_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
    nh.logerror(error);
  }

  servo_right = motor::createMotor(&SR);
 80103b8:	61e0      	str	r0, [r4, #28]
  if(!servo_right->motorInit()){
 80103ba:	68db      	ldr	r3, [r3, #12]
  if(!servo_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
    nh.logerror(error);
  }

  servo_right = motor::createMotor(&SR);
 80103bc:	4d1d      	ldr	r5, [pc, #116]	; (8010434 <main+0x3cc>)
  if(!servo_right->motorInit()){
 80103be:	4798      	blx	r3
 80103c0:	b968      	cbnz	r0, 80103de <main+0x376>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
 80103c2:	69e8      	ldr	r0, [r5, #28]
 80103c4:	6803      	ldr	r3, [r0, #0]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	4798      	blx	r3
 80103ca:	492b      	ldr	r1, [pc, #172]	; (8010478 <main+0x410>)
 80103cc:	4602      	mov	r2, r0
 80103ce:	a8e4      	add	r0, sp, #912	; 0x390
 80103d0:	f003 f9fa 	bl	80137c8 <siprintf>
    nh.logerror(error);
 80103d4:	a9e4      	add	r1, sp, #912	; 0x390
 80103d6:	f205 402c 	addw	r0, r5, #1068	; 0x42c
 80103da:	f7ff fc17 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  front_left = motor::createMotor(&FL);
 80103de:	a899      	add	r0, sp, #612	; 0x264
 80103e0:	f7f4 f864 	bl	80044ac <motor::createMotor(motorSettings*)>
  if(!front_left->motorInit()){
 80103e4:	6803      	ldr	r3, [r0, #0]
  if(!servo_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
    nh.logerror(error);
  }

  front_left = motor::createMotor(&FL);
 80103e6:	f8c4 0a34 	str.w	r0, [r4, #2612]	; 0xa34
  if(!front_left->motorInit()){
 80103ea:	68db      	ldr	r3, [r3, #12]
  if(!servo_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
    nh.logerror(error);
  }

  front_left = motor::createMotor(&FL);
 80103ec:	4d11      	ldr	r5, [pc, #68]	; (8010434 <main+0x3cc>)
  if(!front_left->motorInit()){
 80103ee:	4798      	blx	r3
 80103f0:	2800      	cmp	r0, #0
 80103f2:	d145      	bne.n	8010480 <main+0x418>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
 80103f4:	f8d5 0a34 	ldr.w	r0, [r5, #2612]	; 0xa34
 80103f8:	6803      	ldr	r3, [r0, #0]
 80103fa:	691b      	ldr	r3, [r3, #16]
 80103fc:	4798      	blx	r3
 80103fe:	491e      	ldr	r1, [pc, #120]	; (8010478 <main+0x410>)
 8010400:	4602      	mov	r2, r0
 8010402:	a8e4      	add	r0, sp, #912	; 0x390
 8010404:	f003 f9e0 	bl	80137c8 <siprintf>
    nh.logerror(error);
 8010408:	a9e4      	add	r1, sp, #912	; 0x390
 801040a:	f205 402c 	addw	r0, r5, #1068	; 0x42c
 801040e:	e035      	b.n	801047c <main+0x414>
 8010410:	08015adb 	.word	0x08015adb
 8010414:	459c4000 	.word	0x459c4000
 8010418:	08015aea 	.word	0x08015aea
 801041c:	200004ec 	.word	0x200004ec
 8010420:	08015af9 	.word	0x08015af9
 8010424:	08015b08 	.word	0x08015b08
 8010428:	461c4000 	.word	0x461c4000
 801042c:	08015b27 	.word	0x08015b27
 8010430:	3d23d70a 	.word	0x3d23d70a
 8010434:	200000c0 	.word	0x200000c0
 8010438:	08015b3f 	.word	0x08015b3f
 801043c:	3e2e147b 	.word	0x3e2e147b
 8010440:	08015b68 	.word	0x08015b68
 8010444:	3d75c28f 	.word	0x3d75c28f
 8010448:	40000800 	.word	0x40000800
 801044c:	08015b8b 	.word	0x08015b8b
 8010450:	40010c00 	.word	0x40010c00
 8010454:	08015b96 	.word	0x08015b96
 8010458:	40012c00 	.word	0x40012c00
 801045c:	08015ba2 	.word	0x08015ba2
 8010460:	40010800 	.word	0x40010800
 8010464:	40011000 	.word	0x40011000
 8010468:	08015bae 	.word	0x08015bae
 801046c:	40000400 	.word	0x40000400
 8010470:	08015bb9 	.word	0x08015bb9
 8010474:	08015bc3 	.word	0x08015bc3
 8010478:	08015bce 	.word	0x08015bce
 801047c:	f7ff fbc6 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  front_right = motor::createMotor(&FR);
 8010480:	a880      	add	r0, sp, #512	; 0x200
 8010482:	f7f4 f813 	bl	80044ac <motor::createMotor(motorSettings*)>
  if(!front_right->motorInit()){
 8010486:	6803      	ldr	r3, [r0, #0]
  if(!front_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
    nh.logerror(error);
  }

  front_right = motor::createMotor(&FR);
 8010488:	f8c4 0a38 	str.w	r0, [r4, #2616]	; 0xa38
  if(!front_right->motorInit()){
 801048c:	68db      	ldr	r3, [r3, #12]
  if(!front_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
    nh.logerror(error);
  }

  front_right = motor::createMotor(&FR);
 801048e:	4d76      	ldr	r5, [pc, #472]	; (8010668 <main+0x600>)
  if(!front_right->motorInit()){
 8010490:	4798      	blx	r3
 8010492:	b970      	cbnz	r0, 80104b2 <main+0x44a>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
 8010494:	f8d5 0a38 	ldr.w	r0, [r5, #2616]	; 0xa38
 8010498:	6803      	ldr	r3, [r0, #0]
 801049a:	691b      	ldr	r3, [r3, #16]
 801049c:	4798      	blx	r3
 801049e:	4973      	ldr	r1, [pc, #460]	; (801066c <main+0x604>)
 80104a0:	4602      	mov	r2, r0
 80104a2:	a8e4      	add	r0, sp, #912	; 0x390
 80104a4:	f003 f990 	bl	80137c8 <siprintf>
    nh.logerror(error);
 80104a8:	a9e4      	add	r1, sp, #912	; 0x390
 80104aa:	f205 402c 	addw	r0, r5, #1068	; 0x42c
 80104ae:	f7ff fbad 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  rear_left = motor::createMotor(&RL);
 80104b2:	a8b2      	add	r0, sp, #712	; 0x2c8
 80104b4:	f7f3 fffa 	bl	80044ac <motor::createMotor(motorSettings*)>
  if(!rear_left->motorInit()){
 80104b8:	6803      	ldr	r3, [r0, #0]
  if(!front_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
    nh.logerror(error);
  }

  rear_left = motor::createMotor(&RL);
 80104ba:	f8c4 0a3c 	str.w	r0, [r4, #2620]	; 0xa3c
  if(!rear_left->motorInit()){
 80104be:	68db      	ldr	r3, [r3, #12]
  if(!front_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
    nh.logerror(error);
  }

  rear_left = motor::createMotor(&RL);
 80104c0:	4d69      	ldr	r5, [pc, #420]	; (8010668 <main+0x600>)
  if(!rear_left->motorInit()){
 80104c2:	4798      	blx	r3
 80104c4:	b970      	cbnz	r0, 80104e4 <main+0x47c>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
 80104c6:	f8d5 0a3c 	ldr.w	r0, [r5, #2620]	; 0xa3c
 80104ca:	6803      	ldr	r3, [r0, #0]
 80104cc:	691b      	ldr	r3, [r3, #16]
 80104ce:	4798      	blx	r3
 80104d0:	4966      	ldr	r1, [pc, #408]	; (801066c <main+0x604>)
 80104d2:	4602      	mov	r2, r0
 80104d4:	a8e4      	add	r0, sp, #912	; 0x390
 80104d6:	f003 f977 	bl	80137c8 <siprintf>
    nh.logerror(error);
 80104da:	a9e4      	add	r1, sp, #912	; 0x390
 80104dc:	f205 402c 	addw	r0, r5, #1068	; 0x42c
 80104e0:	f7ff fb94 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  rear_right = motor::createMotor(&RR);
 80104e4:	a8cb      	add	r0, sp, #812	; 0x32c
 80104e6:	f7f3 ffe1 	bl	80044ac <motor::createMotor(motorSettings*)>
  if(!rear_right->motorInit()){
 80104ea:	6803      	ldr	r3, [r0, #0]
  if(!rear_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
    nh.logerror(error);
  }

  rear_right = motor::createMotor(&RR);
 80104ec:	f8c4 0a40 	str.w	r0, [r4, #2624]	; 0xa40
  if(!rear_right->motorInit()){
 80104f0:	68db      	ldr	r3, [r3, #12]
  if(!rear_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
    nh.logerror(error);
  }

  rear_right = motor::createMotor(&RR);
 80104f2:	4d5d      	ldr	r5, [pc, #372]	; (8010668 <main+0x600>)
  if(!rear_right->motorInit()){
 80104f4:	4798      	blx	r3
 80104f6:	b970      	cbnz	r0, 8010516 <main+0x4ae>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_right->motorName());
 80104f8:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	; 0xa40
 80104fc:	6803      	ldr	r3, [r0, #0]
 80104fe:	691b      	ldr	r3, [r3, #16]
 8010500:	4798      	blx	r3
 8010502:	495a      	ldr	r1, [pc, #360]	; (801066c <main+0x604>)
 8010504:	4602      	mov	r2, r0
 8010506:	a8e4      	add	r0, sp, #912	; 0x390
 8010508:	f003 f95e 	bl	80137c8 <siprintf>
    nh.logerror(error);
 801050c:	a9e4      	add	r1, sp, #912	; 0x390
 801050e:	f205 402c 	addw	r0, r5, #1068	; 0x42c
 8010512:	f7ff fb7b 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }
  
  
  led_set(0);
 8010516:	2000      	movs	r0, #0
 8010518:	f7ef ff74 	bl	8000404 <led_set>

  servo_left->setReference(0);
 801051c:	69a0      	ldr	r0, [r4, #24]
 801051e:	2100      	movs	r1, #0
 8010520:	6803      	ldr	r3, [r0, #0]
  rear_right->setReference(0);
  rear_left->setReference(0);

  bool connected = false;

  int cnt = 0;
 8010522:	2600      	movs	r6, #0
  }
  
  
  led_set(0);

  servo_left->setReference(0);
 8010524:	695b      	ldr	r3, [r3, #20]
 8010526:	4798      	blx	r3
  servo_right->setReference(0);
 8010528:	69e0      	ldr	r0, [r4, #28]
 801052a:	2100      	movs	r1, #0
 801052c:	6803      	ldr	r3, [r0, #0]
 801052e:	695b      	ldr	r3, [r3, #20]
 8010530:	4798      	blx	r3
  front_right->setReference(0);
 8010532:	f8d4 0a38 	ldr.w	r0, [r4, #2616]	; 0xa38
 8010536:	2100      	movs	r1, #0
 8010538:	6803      	ldr	r3, [r0, #0]
 801053a:	695b      	ldr	r3, [r3, #20]
 801053c:	4798      	blx	r3
  front_left->setReference(0);
 801053e:	f8d4 0a34 	ldr.w	r0, [r4, #2612]	; 0xa34
 8010542:	2100      	movs	r1, #0
 8010544:	6803      	ldr	r3, [r0, #0]
 8010546:	695b      	ldr	r3, [r3, #20]
 8010548:	4798      	blx	r3
  rear_right->setReference(0);
 801054a:	f8d4 0a40 	ldr.w	r0, [r4, #2624]	; 0xa40
 801054e:	2100      	movs	r1, #0
 8010550:	6803      	ldr	r3, [r0, #0]
 8010552:	695b      	ldr	r3, [r3, #20]
 8010554:	4798      	blx	r3
  rear_left->setReference(0);
 8010556:	f8d4 0a3c 	ldr.w	r0, [r4, #2620]	; 0xa3c
 801055a:	2100      	movs	r1, #0
 801055c:	6803      	ldr	r3, [r0, #0]
 801055e:	695b      	ldr	r3, [r3, #20]
 8010560:	4798      	blx	r3
  float dt = 0.02;

  double x = 0.0;
  double y = 0.0;
  double th = 0.0;
  float l = sqrt(pow((L/2),2)*2);
 8010562:	6860      	ldr	r0, [r4, #4]
 8010564:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010568:	f7f5 f998 	bl	800589c <__aeabi_fmul>
 801056c:	f7f4 fd22 	bl	8004fb4 <__aeabi_f2d>
 8010570:	4602      	mov	r2, r0
 8010572:	460b      	mov	r3, r1
 8010574:	f7f4 fd72 	bl	800505c <__aeabi_dmul>
 8010578:	460b      	mov	r3, r1
 801057a:	4602      	mov	r2, r0
 801057c:	f7f4 fbbc 	bl	8004cf8 <__adddf3>
 8010580:	f001 fc94 	bl	8011eac <sqrt>
 8010584:	f7f5 f82c 	bl	80055e0 <__aeabi_d2f>

  float alpha[4] = {0,0,0,0};
 8010588:	2210      	movs	r2, #16
  float dt = 0.02;

  double x = 0.0;
  double y = 0.0;
  double th = 0.0;
  float l = sqrt(pow((L/2),2)*2);
 801058a:	901f      	str	r0, [sp, #124]	; 0x7c

  float alpha[4] = {0,0,0,0};
 801058c:	2100      	movs	r1, #0
 801058e:	a82a      	add	r0, sp, #168	; 0xa8
 8010590:	f002 ff92 	bl	80134b8 <memset>
  float start_time;
  float dt = 0.02;

  double x = 0.0;
  double y = 0.0;
  double th = 0.0;
 8010594:	2400      	movs	r4, #0
 8010596:	2300      	movs	r3, #0
 8010598:	e9cd 3408 	strd	r3, r4, [sp, #32]
  int cnt = 0;
  float start_time;
  float dt = 0.02;

  double x = 0.0;
  double y = 0.0;
 801059c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30

  int cnt = 0;
  float start_time;
  float dt = 0.02;

  double x = 0.0;
 80105a0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28

  float alpha[4] = {0,0,0,0};


  while (1){
    nh.spinOnce();
 80105a4:	4c30      	ldr	r4, [pc, #192]	; (8010668 <main+0x600>)
 80105a6:	46a3      	mov	fp, r4
 80105a8:	4831      	ldr	r0, [pc, #196]	; (8010670 <main+0x608>)
 80105aa:	f7ff fc55 	bl	800fe58 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>
    start_time = ((int)millis()) / 1000.0;
 80105ae:	f7f0 f8c9 	bl	8000744 <millis>
 80105b2:	f7f4 fced 	bl	8004f90 <__aeabi_i2d>
 80105b6:	4b2f      	ldr	r3, [pc, #188]	; (8010674 <main+0x60c>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	f7f4 fe79 	bl	80052b0 <__aeabi_ddiv>
 80105be:	f7f5 f80f 	bl	80055e0 <__aeabi_d2f>

    if(shuttingDown){
 80105c2:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  float alpha[4] = {0,0,0,0};


  while (1){
    nh.spinOnce();
    start_time = ((int)millis()) / 1000.0;
 80105c6:	9015      	str	r0, [sp, #84]	; 0x54

    if(shuttingDown){
 80105c8:	b963      	cbnz	r3, 80105e4 <main+0x57c>
      connected = false;
      // TODO: Advertise shutdown??
    }else{
      connected = nh.connected();
      if(cnt++%10==0)
 80105ca:	1c73      	adds	r3, r6, #1
 80105cc:	220a      	movs	r2, #10
 80105ce:	9314      	str	r3, [sp, #80]	; 0x50
 80105d0:	fb96 f3f2 	sdiv	r3, r6, r2
 80105d4:	fb02 6613 	mls	r6, r2, r3, r6
 80105d8:	f894 5920 	ldrb.w	r5, [r4, #2336]	; 0x920
 80105dc:	b926      	cbnz	r6, 80105e8 <main+0x580>
        debug_toggle();
 80105de:	f7ef ff2f 	bl	8000440 <debug_toggle>
 80105e2:	e001      	b.n	80105e8 <main+0x580>
 80105e4:	9614      	str	r6, [sp, #80]	; 0x50
  while (1){
    nh.spinOnce();
    start_time = ((int)millis()) / 1000.0;

    if(shuttingDown){
      connected = false;
 80105e6:	2500      	movs	r5, #0
      connected = nh.connected();
      if(cnt++%10==0)
        debug_toggle();
    }

    auto sl = servo_left->update(0.1, connected);
 80105e8:	f8db 1018 	ldr.w	r1, [fp, #24]
 80105ec:	4a22      	ldr	r2, [pc, #136]	; (8010678 <main+0x610>)
 80105ee:	680b      	ldr	r3, [r1, #0]
 80105f0:	a82e      	add	r0, sp, #184	; 0xb8
 80105f2:	69de      	ldr	r6, [r3, #28]
 80105f4:	462b      	mov	r3, r5
 80105f6:	47b0      	blx	r6
    auto sr = servo_right->update(0.1, connected);
 80105f8:	f8db 101c 	ldr.w	r1, [fp, #28]
 80105fc:	4a1e      	ldr	r2, [pc, #120]	; (8010678 <main+0x610>)
 80105fe:	680b      	ldr	r3, [r1, #0]
 8010600:	a832      	add	r0, sp, #200	; 0xc8
 8010602:	69de      	ldr	r6, [r3, #28]
 8010604:	462b      	mov	r3, r5
 8010606:	47b0      	blx	r6

    if(waitForServos){
 8010608:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d04d      	beq.n	80106ac <main+0x644>
      if(std::get<2>(sr) == (int)servo_right->getReference() && std::get<2>(sl) == (int)servo_left->getReference()){
 8010610:	69e0      	ldr	r0, [r4, #28]
 8010612:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 8010614:	6803      	ldr	r3, [r0, #0]
 8010616:	699b      	ldr	r3, [r3, #24]
 8010618:	4798      	blx	r3
 801061a:	f7f5 fb05 	bl	8005c28 <__aeabi_f2iz>
 801061e:	4286      	cmp	r6, r0
 8010620:	d12c      	bne.n	801067c <main+0x614>
 8010622:	69a0      	ldr	r0, [r4, #24]
 8010624:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8010626:	6803      	ldr	r3, [r0, #0]
 8010628:	699b      	ldr	r3, [r3, #24]
 801062a:	4798      	blx	r3
 801062c:	f7f5 fafc 	bl	8005c28 <__aeabi_f2iz>
 8010630:	4286      	cmp	r6, r0
 8010632:	d123      	bne.n	801067c <main+0x614>
        waitForServos = false;
        front_right->setReference(motorCmd[0]);
 8010634:	f8d4 0a38 	ldr.w	r0, [r4, #2616]	; 0xa38
    auto sl = servo_left->update(0.1, connected);
    auto sr = servo_right->update(0.1, connected);

    if(waitForServos){
      if(std::get<2>(sr) == (int)servo_right->getReference() && std::get<2>(sl) == (int)servo_left->getReference()){
        waitForServos = false;
 8010638:	2300      	movs	r3, #0
 801063a:	7063      	strb	r3, [r4, #1]
        front_right->setReference(motorCmd[0]);
 801063c:	6803      	ldr	r3, [r0, #0]
 801063e:	68a1      	ldr	r1, [r4, #8]
 8010640:	695b      	ldr	r3, [r3, #20]
 8010642:	4798      	blx	r3
        front_left->setReference(motorCmd[1]);
 8010644:	f8d4 0a34 	ldr.w	r0, [r4, #2612]	; 0xa34
 8010648:	68e1      	ldr	r1, [r4, #12]
 801064a:	6803      	ldr	r3, [r0, #0]
 801064c:	695b      	ldr	r3, [r3, #20]
 801064e:	4798      	blx	r3
        rear_left->setReference(motorCmd[2]);
 8010650:	f8d4 0a3c 	ldr.w	r0, [r4, #2620]	; 0xa3c
 8010654:	6921      	ldr	r1, [r4, #16]
 8010656:	6803      	ldr	r3, [r0, #0]
 8010658:	695b      	ldr	r3, [r3, #20]
 801065a:	4798      	blx	r3
        rear_right->setReference(motorCmd[3]);
 801065c:	f8d4 0a40 	ldr.w	r0, [r4, #2624]	; 0xa40
 8010660:	6961      	ldr	r1, [r4, #20]
 8010662:	6803      	ldr	r3, [r0, #0]
 8010664:	695b      	ldr	r3, [r3, #20]
 8010666:	e020      	b.n	80106aa <main+0x642>
 8010668:	200000c0 	.word	0x200000c0
 801066c:	08015bce 	.word	0x08015bce
 8010670:	200004ec 	.word	0x200004ec
 8010674:	408f4000 	.word	0x408f4000
 8010678:	3dcccccd 	.word	0x3dcccccd
      }else{
        front_right->setReference(0);
 801067c:	f8d4 0a38 	ldr.w	r0, [r4, #2616]	; 0xa38
 8010680:	2100      	movs	r1, #0
 8010682:	6803      	ldr	r3, [r0, #0]
 8010684:	695b      	ldr	r3, [r3, #20]
 8010686:	4798      	blx	r3
        front_left->setReference(0);
 8010688:	f8d4 0a34 	ldr.w	r0, [r4, #2612]	; 0xa34
 801068c:	2100      	movs	r1, #0
 801068e:	6803      	ldr	r3, [r0, #0]
 8010690:	695b      	ldr	r3, [r3, #20]
 8010692:	4798      	blx	r3
        rear_left->setReference(0);
 8010694:	f8d4 0a3c 	ldr.w	r0, [r4, #2620]	; 0xa3c
 8010698:	2100      	movs	r1, #0
 801069a:	6803      	ldr	r3, [r0, #0]
 801069c:	695b      	ldr	r3, [r3, #20]
 801069e:	4798      	blx	r3
        rear_right->setReference(0);
 80106a0:	f8d4 0a40 	ldr.w	r0, [r4, #2624]	; 0xa40
 80106a4:	2100      	movs	r1, #0
 80106a6:	6803      	ldr	r3, [r0, #0]
 80106a8:	695b      	ldr	r3, [r3, #20]
 80106aa:	4798      	blx	r3
      }
    }
    
    auto fr = front_right->update(0.1, connected);
 80106ac:	f8d4 1a38 	ldr.w	r1, [r4, #2616]	; 0xa38
 80106b0:	4a44      	ldr	r2, [pc, #272]	; (80107c4 <main+0x75c>)
 80106b2:	680b      	ldr	r3, [r1, #0]
 80106b4:	a836      	add	r0, sp, #216	; 0xd8
 80106b6:	69de      	ldr	r6, [r3, #28]
 80106b8:	462b      	mov	r3, r5
 80106ba:	47b0      	blx	r6
    auto fl = front_left->update(0.1, connected);
 80106bc:	f8d4 1a34 	ldr.w	r1, [r4, #2612]	; 0xa34
 80106c0:	4a40      	ldr	r2, [pc, #256]	; (80107c4 <main+0x75c>)
 80106c2:	680b      	ldr	r3, [r1, #0]
 80106c4:	a83a      	add	r0, sp, #232	; 0xe8
 80106c6:	69de      	ldr	r6, [r3, #28]
 80106c8:	462b      	mov	r3, r5
 80106ca:	47b0      	blx	r6
    auto rl = rear_left->update(0.1, connected);
 80106cc:	f8d4 1a3c 	ldr.w	r1, [r4, #2620]	; 0xa3c
 80106d0:	4a3c      	ldr	r2, [pc, #240]	; (80107c4 <main+0x75c>)
 80106d2:	680b      	ldr	r3, [r1, #0]
 80106d4:	a83e      	add	r0, sp, #248	; 0xf8
 80106d6:	69de      	ldr	r6, [r3, #28]
 80106d8:	462b      	mov	r3, r5
 80106da:	47b0      	blx	r6
    auto rr = rear_right->update(0.1, connected);
 80106dc:	f8d4 1a40 	ldr.w	r1, [r4, #2624]	; 0xa40
 80106e0:	4a38      	ldr	r2, [pc, #224]	; (80107c4 <main+0x75c>)
 80106e2:	680b      	ldr	r3, [r1, #0]
 80106e4:	a842      	add	r0, sp, #264	; 0x108
 80106e6:	69de      	ldr	r6, [r3, #28]
 80106e8:	462b      	mov	r3, r5
 80106ea:	47b0      	blx	r6

    if(std::get<3>(fr) == 65535){
 80106ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106f0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d10d      	bne.n	8010712 <main+0x6aa>
      sprintf(error, "Encoder timeout: %s - [FAIL]", front_right->motorName());
 80106f6:	f8d4 0a38 	ldr.w	r0, [r4, #2616]	; 0xa38
 80106fa:	6803      	ldr	r3, [r0, #0]
 80106fc:	691b      	ldr	r3, [r3, #16]
 80106fe:	4798      	blx	r3
 8010700:	4931      	ldr	r1, [pc, #196]	; (80107c8 <main+0x760>)
 8010702:	4602      	mov	r2, r0
 8010704:	a8e4      	add	r0, sp, #912	; 0x390
 8010706:	f003 f85f 	bl	80137c8 <siprintf>
      nh.logerror(error);
 801070a:	a9e4      	add	r1, sp, #912	; 0x390
 801070c:	482f      	ldr	r0, [pc, #188]	; (80107cc <main+0x764>)
 801070e:	f7ff fa7d 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    }
    if(std::get<3>(fl) == 65535){
 8010712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010716:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8010718:	4293      	cmp	r3, r2
 801071a:	d10d      	bne.n	8010738 <main+0x6d0>
      sprintf(error, "Encoder timeout: %s - [FAIL]", front_left->motorName());
 801071c:	f8db 0a34 	ldr.w	r0, [fp, #2612]	; 0xa34
 8010720:	6803      	ldr	r3, [r0, #0]
 8010722:	691b      	ldr	r3, [r3, #16]
 8010724:	4798      	blx	r3
 8010726:	4928      	ldr	r1, [pc, #160]	; (80107c8 <main+0x760>)
 8010728:	4602      	mov	r2, r0
 801072a:	a8e4      	add	r0, sp, #912	; 0x390
 801072c:	f003 f84c 	bl	80137c8 <siprintf>
      nh.logerror(error);
 8010730:	a9e4      	add	r1, sp, #912	; 0x390
 8010732:	4826      	ldr	r0, [pc, #152]	; (80107cc <main+0x764>)
 8010734:	f7ff fa6a 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    }
    if(std::get<3>(rl) == 65535){
 8010738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801073c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 801073e:	4293      	cmp	r3, r2
 8010740:	d10d      	bne.n	801075e <main+0x6f6>
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_left->motorName());
 8010742:	f8db 0a3c 	ldr.w	r0, [fp, #2620]	; 0xa3c
 8010746:	6803      	ldr	r3, [r0, #0]
 8010748:	691b      	ldr	r3, [r3, #16]
 801074a:	4798      	blx	r3
 801074c:	491e      	ldr	r1, [pc, #120]	; (80107c8 <main+0x760>)
 801074e:	4602      	mov	r2, r0
 8010750:	a8e4      	add	r0, sp, #912	; 0x390
 8010752:	f003 f839 	bl	80137c8 <siprintf>
      nh.logerror(error);
 8010756:	a9e4      	add	r1, sp, #912	; 0x390
 8010758:	481c      	ldr	r0, [pc, #112]	; (80107cc <main+0x764>)
 801075a:	f7ff fa57 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    }
    if(std::get<3>(rr) == 65535){
 801075e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010762:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8010764:	4293      	cmp	r3, r2
 8010766:	d10d      	bne.n	8010784 <main+0x71c>
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
 8010768:	f8db 0a40 	ldr.w	r0, [fp, #2624]	; 0xa40
 801076c:	6803      	ldr	r3, [r0, #0]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	4798      	blx	r3
 8010772:	4915      	ldr	r1, [pc, #84]	; (80107c8 <main+0x760>)
 8010774:	4602      	mov	r2, r0
 8010776:	a8e4      	add	r0, sp, #912	; 0x390
 8010778:	f003 f826 	bl	80137c8 <siprintf>
      nh.logerror(error);
 801077c:	a9e4      	add	r1, sp, #912	; 0x390
 801077e:	4813      	ldr	r0, [pc, #76]	; (80107cc <main+0x764>)
 8010780:	f7ff fa44 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 8010784:	9b39      	ldr	r3, [sp, #228]	; 0xe4

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 8010786:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 8010788:	9346      	str	r3, [sp, #280]	; 0x118
 801078a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    for(i = 0; i < 4; i++){
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 801078c:	f8d4 0a30 	ldr.w	r0, [r4, #2608]	; 0xa30
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 8010790:	9347      	str	r3, [sp, #284]	; 0x11c
 8010792:	9b41      	ldr	r3, [sp, #260]	; 0x104

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 8010794:	924a      	str	r2, [sp, #296]	; 0x128
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 8010796:	9348      	str	r3, [sp, #288]	; 0x120
 8010798:	9b45      	ldr	r3, [sp, #276]	; 0x114

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 801079a:	924c      	str	r2, [sp, #304]	; 0x130
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 801079c:	9349      	str	r3, [sp, #292]	; 0x124

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 801079e:	9b35      	ldr	r3, [sp, #212]	; 0xd4

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
 80107a0:	f04f 0a00 	mov.w	sl, #0
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 80107a4:	934b      	str	r3, [sp, #300]	; 0x12c
 80107a6:	934d      	str	r3, [sp, #308]	; 0x134
    for(i = 0; i < 4; i++){
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 80107a8:	f7f4 fc04 	bl	8004fb4 <__aeabi_f2d>
 80107ac:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
    if(std::get<3>(rr) == 65535){
      sprintf(error, "Encoder timeout: %s - [FAIL]", rear_right->motorName());
      nh.logerror(error);
    }

    float speeds[4] = {std::get<0>(fr), std::get<0>(fl), std::get<0>(rl), std::get<0>(rr)};
 80107b0:	ae46      	add	r6, sp, #280	; 0x118

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};
 80107b2:	af4a      	add	r7, sp, #296	; 0x128

    int i;
    float x_dot = 0;
    float y_dot = 0;
 80107b4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c

    // TODO: Correct these to fit!
    float angles[4] = {std::get<0>(sl), std::get<0>(sr), std::get<0>(sl), std::get<0>(sr)};

    int i;
    float x_dot = 0;
 80107b8:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 80107bc:	2500      	movs	r5, #0
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
 80107be:	9720      	str	r7, [sp, #128]	; 0x80
      x_dot += sin(alpha[i]+beta)*speeds[i];
 80107c0:	9621      	str	r6, [sp, #132]	; 0x84
 80107c2:	e005      	b.n	80107d0 <main+0x768>
 80107c4:	3dcccccd 	.word	0x3dcccccd
 80107c8:	08015bf8 	.word	0x08015bf8
 80107cc:	200004ec 	.word	0x200004ec
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
 80107d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80107d2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80107d6:	931e      	str	r3, [sp, #120]	; 0x78
      x_dot += sin(alpha[i]+beta)*speeds[i];
 80107d8:	ab2a      	add	r3, sp, #168	; 0xa8
 80107da:	f853 8025 	ldr.w	r8, [r3, r5, lsl #2]
 80107de:	981e      	ldr	r0, [sp, #120]	; 0x78
 80107e0:	4641      	mov	r1, r8
 80107e2:	f7f4 ff53 	bl	800568c <__addsf3>
 80107e6:	f7f4 fbe5 	bl	8004fb4 <__aeabi_f2d>
 80107ea:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80107ee:	f001 fb15 	bl	8011e1c <sin>
 80107f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107f4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80107f8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80107fc:	f7f4 fbda 	bl	8004fb4 <__aeabi_f2d>
 8010800:	4602      	mov	r2, r0
 8010802:	460b      	mov	r3, r1
 8010804:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010808:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 801080c:	f7f4 fc26 	bl	800505c <__aeabi_dmul>
 8010810:	4606      	mov	r6, r0
 8010812:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010814:	460f      	mov	r7, r1
 8010816:	f7f4 fbcd 	bl	8004fb4 <__aeabi_f2d>
 801081a:	4602      	mov	r2, r0
 801081c:	460b      	mov	r3, r1
 801081e:	4630      	mov	r0, r6
 8010820:	4639      	mov	r1, r7
 8010822:	f7f4 fa69 	bl	8004cf8 <__adddf3>
 8010826:	f7f4 fedb 	bl	80055e0 <__aeabi_d2f>
 801082a:	9010      	str	r0, [sp, #64]	; 0x40
      y_dot += cos(alpha[i]+beta)*speeds[i];
 801082c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8010830:	f001 faa8 	bl	8011d84 <cos>
 8010834:	4602      	mov	r2, r0
 8010836:	460b      	mov	r3, r1
 8010838:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 801083c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010840:	f7f4 fc0c 	bl	800505c <__aeabi_dmul>
 8010844:	4606      	mov	r6, r0
 8010846:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010848:	460f      	mov	r7, r1
 801084a:	f7f4 fbb3 	bl	8004fb4 <__aeabi_f2d>
 801084e:	4602      	mov	r2, r0
 8010850:	460b      	mov	r3, r1
 8010852:	4630      	mov	r0, r6
 8010854:	4639      	mov	r1, r7
 8010856:	f7f4 fa4f 	bl	8004cf8 <__adddf3>
 801085a:	f7f4 fec1 	bl	80055e0 <__aeabi_d2f>
 801085e:	9013      	str	r0, [sp, #76]	; 0x4c
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 8010860:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010862:	f7f4 fba7 	bl	8004fb4 <__aeabi_f2d>
 8010866:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 801086a:	4640      	mov	r0, r8
 801086c:	f7f4 fba2 	bl	8004fb4 <__aeabi_f2d>
 8010870:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8010874:	4606      	mov	r6, r0
 8010876:	460f      	mov	r7, r1
 8010878:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 801087c:	f7f4 fbee 	bl	800505c <__aeabi_dmul>
 8010880:	4632      	mov	r2, r6
 8010882:	463b      	mov	r3, r7
 8010884:	f7f4 fa38 	bl	8004cf8 <__adddf3>
 8010888:	f001 fa7c 	bl	8011d84 <cos>
 801088c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8010890:	4680      	mov	r8, r0
 8010892:	4689      	mov	r9, r1
 8010894:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8010898:	f7f4 fbe0 	bl	800505c <__aeabi_dmul>
 801089c:	4632      	mov	r2, r6
 801089e:	463b      	mov	r3, r7
 80108a0:	f7f4 fa2a 	bl	8004cf8 <__adddf3>
 80108a4:	f001 faba 	bl	8011e1c <sin>
 80108a8:	4642      	mov	r2, r8
 80108aa:	4606      	mov	r6, r0
 80108ac:	460f      	mov	r7, r1
 80108ae:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80108b2:	464b      	mov	r3, r9
 80108b4:	f7f4 fbd2 	bl	800505c <__aeabi_dmul>
 80108b8:	4632      	mov	r2, r6
 80108ba:	463b      	mov	r3, r7
 80108bc:	4680      	mov	r8, r0
 80108be:	4689      	mov	r9, r1
 80108c0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80108c4:	f7f4 fbca 	bl	800505c <__aeabi_dmul>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	4640      	mov	r0, r8
 80108ce:	4649      	mov	r1, r9
 80108d0:	f7f4 fcee 	bl	80052b0 <__aeabi_ddiv>
 80108d4:	f001 f8b8 	bl	8011a48 <atan>
 80108d8:	4606      	mov	r6, r0
 80108da:	460f      	mov	r7, r1
 80108dc:	981e      	ldr	r0, [sp, #120]	; 0x78
 80108de:	f7f4 fb69 	bl	8004fb4 <__aeabi_f2d>
 80108e2:	4632      	mov	r2, r6
 80108e4:	463b      	mov	r3, r7
 80108e6:	f7f4 fa05 	bl	8004cf4 <__aeabi_dsub>
 80108ea:	f001 fa4b 	bl	8011d84 <cos>
 80108ee:	4602      	mov	r2, r0
 80108f0:	460b      	mov	r3, r1
 80108f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80108f6:	f7f4 fbb1 	bl	800505c <__aeabi_dmul>
 80108fa:	4606      	mov	r6, r0
 80108fc:	4650      	mov	r0, sl
 80108fe:	460f      	mov	r7, r1
 8010900:	f7f4 fb58 	bl	8004fb4 <__aeabi_f2d>
 8010904:	4602      	mov	r2, r0
 8010906:	460b      	mov	r3, r1
 8010908:	4630      	mov	r0, r6
 801090a:	4639      	mov	r1, r7
 801090c:	f7f4 f9f4 	bl	8004cf8 <__adddf3>
 8010910:	f7f4 fe66 	bl	80055e0 <__aeabi_d2f>

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 8010914:	3501      	adds	r5, #1
 8010916:	2d04      	cmp	r5, #4
      // TODO: Calculate beta correctly
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
 8010918:	4682      	mov	sl, r0

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 801091a:	f47f af59 	bne.w	80107d0 <main+0x768>
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
    }
    x_dot /= 4;
 801091e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010920:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8010924:	f7f4 ffba 	bl	800589c <__aeabi_fmul>
    y_dot /= 4;
 8010928:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
      float beta = angles[i];//*PWM2DEG;
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
    }
    x_dot /= 4;
 801092c:	901e      	str	r0, [sp, #120]	; 0x78
    y_dot /= 4;
 801092e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010930:	f7f4 ffb4 	bl	800589c <__aeabi_fmul>
    theta_dot /= 4;
 8010934:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
      x_dot += sin(alpha[i]+beta)*speeds[i];
      y_dot += cos(alpha[i]+beta)*speeds[i];
      theta_dot += cos(beta - atan((l*cos(alpha[i]+d*cos(alpha[i] + beta)))/(l*sin(alpha[i] + d*sin(alpha[i] + beta)))))*speeds[i];
    }
    x_dot /= 4;
    y_dot /= 4;
 8010938:	9013      	str	r0, [sp, #76]	; 0x4c
    theta_dot /= 4;
 801093a:	4650      	mov	r0, sl
 801093c:	f7f4 ffae 	bl	800589c <__aeabi_fmul>
 8010940:	9016      	str	r0, [sp, #88]	; 0x58



    double delta_x = (x_dot * cos(th) - y_dot * sin(th)) * dt;
 8010942:	981e      	ldr	r0, [sp, #120]	; 0x78
 8010944:	f7f4 fb36 	bl	8004fb4 <__aeabi_f2d>
 8010948:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801094c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010950:	f001 fa18 	bl	8011d84 <cos>
 8010954:	4680      	mov	r8, r0
 8010956:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010958:	4689      	mov	r9, r1
 801095a:	f7f4 fb2b 	bl	8004fb4 <__aeabi_f2d>
 801095e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010962:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010966:	f001 fa59 	bl	8011e1c <sin>
    double delta_y = (x_dot * sin(th) + y_dot * cos(th)) * dt;
    double delta_th = theta_dot * dt;

    x += delta_x;
 801096a:	4642      	mov	r2, r8
    y_dot /= 4;
    theta_dot /= 4;



    double delta_x = (x_dot * cos(th) - y_dot * sin(th)) * dt;
 801096c:	4606      	mov	r6, r0
 801096e:	460f      	mov	r7, r1
    double delta_y = (x_dot * sin(th) + y_dot * cos(th)) * dt;
    double delta_th = theta_dot * dt;

    x += delta_x;
 8010970:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010974:	464b      	mov	r3, r9
 8010976:	f7f4 fb71 	bl	800505c <__aeabi_dmul>
 801097a:	4632      	mov	r2, r6
 801097c:	463b      	mov	r3, r7
 801097e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8010982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010986:	f7f4 fb69 	bl	800505c <__aeabi_dmul>
 801098a:	4602      	mov	r2, r0
 801098c:	460b      	mov	r3, r1
 801098e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8010992:	f7f4 f9af 	bl	8004cf4 <__aeabi_dsub>
 8010996:	a37a      	add	r3, pc, #488	; (adr r3, 8010b80 <main+0xb18>)
 8010998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099c:	f7f4 fb5e 	bl	800505c <__aeabi_dmul>
 80109a0:	4602      	mov	r2, r0
 80109a2:	460b      	mov	r3, r1
 80109a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80109a8:	f7f4 f9a6 	bl	8004cf8 <__adddf3>
    y += delta_y;
 80109ac:	4632      	mov	r2, r6
 80109ae:	463b      	mov	r3, r7

    double delta_x = (x_dot * cos(th) - y_dot * sin(th)) * dt;
    double delta_y = (x_dot * sin(th) + y_dot * cos(th)) * dt;
    double delta_th = theta_dot * dt;

    x += delta_x;
 80109b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    y += delta_y;
 80109b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80109b8:	f7f4 fb50 	bl	800505c <__aeabi_dmul>
 80109bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80109c0:	4606      	mov	r6, r0
 80109c2:	460f      	mov	r7, r1
 80109c4:	4640      	mov	r0, r8
 80109c6:	4649      	mov	r1, r9
 80109c8:	f7f4 fb48 	bl	800505c <__aeabi_dmul>
 80109cc:	4602      	mov	r2, r0
 80109ce:	460b      	mov	r3, r1
 80109d0:	4630      	mov	r0, r6
 80109d2:	4639      	mov	r1, r7
 80109d4:	f7f4 f990 	bl	8004cf8 <__adddf3>
 80109d8:	a369      	add	r3, pc, #420	; (adr r3, 8010b80 <main+0xb18>)
 80109da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109de:	f7f4 fb3d 	bl	800505c <__aeabi_dmul>
 80109e2:	4602      	mov	r2, r0
 80109e4:	460b      	mov	r3, r1
 80109e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80109ea:	f7f4 f985 	bl	8004cf8 <__adddf3>
 80109ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    th += delta_th;
 80109f2:	4965      	ldr	r1, [pc, #404]	; (8010b88 <main+0xb20>)
 80109f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80109f6:	f7f4 ff51 	bl	800589c <__aeabi_fmul>
 80109fa:	f7f4 fadb 	bl	8004fb4 <__aeabi_f2d>
 80109fe:	4602      	mov	r2, r0
 8010a00:	460b      	mov	r3, r1
 8010a02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010a06:	f7f4 f977 	bl	8004cf8 <__adddf3>
  static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
  {
    geometry_msgs::Quaternion q;
    q.x = 0;
    q.y = 0;
    q.z = sin(yaw * 0.5);
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	4b5f      	ldr	r3, [pc, #380]	; (8010b8c <main+0xb24>)
 8010a0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010a12:	f7f4 fb23 	bl	800505c <__aeabi_dmul>
 8010a16:	4606      	mov	r6, r0
 8010a18:	460f      	mov	r7, r1
 8010a1a:	f001 f9ff 	bl	8011e1c <sin>
 8010a1e:	f7f4 fddf 	bl	80055e0 <__aeabi_d2f>
    q.w = cos(yaw * 0.5);
 8010a22:	4639      	mov	r1, r7
  static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
  {
    geometry_msgs::Quaternion q;
    q.x = 0;
    q.y = 0;
    q.z = sin(yaw * 0.5);
 8010a24:	900e      	str	r0, [sp, #56]	; 0x38
    q.w = cos(yaw * 0.5);
 8010a26:	4630      	mov	r0, r6
 8010a28:	f001 f9ac 	bl	8011d84 <cos>
 8010a2c:	f7f4 fdd8 	bl	80055e0 <__aeabi_d2f>
 8010a30:	4680      	mov	r8, r0


    geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);

    //first, we'll publish the transform over tf
    odom_trans.header.stamp = ros::Time(start_time,0);
 8010a32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010a34:	f7f5 f91e 	bl	8005c74 <__aeabi_f2uiz>
      Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
 8010a38:	ad28      	add	r5, sp, #160	; 0xa0
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	9028      	str	r0, [sp, #160]	; 0xa0
 8010a3e:	9018      	str	r0, [sp, #96]	; 0x60
      {
        normalizeSecNSec(sec, nsec);
 8010a40:	a929      	add	r1, sp, #164	; 0xa4
 8010a42:	4628      	mov	r0, r5
 8010a44:	4e52      	ldr	r6, [pc, #328]	; (8010b90 <main+0xb28>)
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
      Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
 8010a46:	9329      	str	r3, [sp, #164]	; 0xa4
 8010a48:	9310      	str	r3, [sp, #64]	; 0x40
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";
 8010a4a:	4f52      	ldr	r7, [pc, #328]	; (8010b94 <main+0xb2c>)
      {
        normalizeSecNSec(sec, nsec);
 8010a4c:	f7f4 f914 	bl	8004c78 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>


    geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);

    //first, we'll publish the transform over tf
    odom_trans.header.stamp = ros::Time(start_time,0);
 8010a50:	e895 0003 	ldmia.w	r5, {r0, r1}
    odom_trans.header.frame_id = "odom";
 8010a54:	4b50      	ldr	r3, [pc, #320]	; (8010b98 <main+0xb30>)


    geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);

    //first, we'll publish the transform over tf
    odom_trans.header.stamp = ros::Time(start_time,0);
 8010a56:	e886 0003 	stmia.w	r6, {r0, r1}
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";

    odom_trans.transform.translation.x = x;
 8010a5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28

    geometry_msgs::Quaternion odom_quat = tf::createQuaternionFromYaw(th);

    //first, we'll publish the transform over tf
    odom_trans.header.stamp = ros::Time(start_time,0);
    odom_trans.header.frame_id = "odom";
 8010a5e:	f8c4 3a58 	str.w	r3, [r4, #2648]	; 0xa58
    odom_trans.child_frame_id = "base_link";
 8010a62:	f8c4 7a5c 	str.w	r7, [r4, #2652]	; 0xa5c

    odom_trans.transform.translation.x = x;
 8010a66:	f7f4 fdbb 	bl	80055e0 <__aeabi_d2f>
 8010a6a:	4682      	mov	sl, r0
 8010a6c:	f8c4 0a68 	str.w	r0, [r4, #2664]	; 0xa68
    odom_trans.transform.translation.y = y;
 8010a70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010a74:	f7f4 fdb4 	bl	80055e0 <__aeabi_d2f>
 8010a78:	4681      	mov	r9, r0
    odom_trans.transform.translation.z = 0.0;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	f8c4 3a70 	str.w	r3, [r4, #2672]	; 0xa70
#include "ros/msg.h"

namespace geometry_msgs
{

  class Quaternion : public ros::Msg
 8010a80:	f8c4 3a78 	str.w	r3, [r4, #2680]	; 0xa78
 8010a84:	f8c4 3a7c 	str.w	r3, [r4, #2684]	; 0xa7c
        nh.advertise(publisher_);
      }

      void sendTransform(geometry_msgs::TransformStamped &transform)
      {
        internal_msg.transforms_length = 1;
 8010a88:	2101      	movs	r1, #1
 8010a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a8c:	f884 19d0 	strb.w	r1, [r4, #2512]	; 0x9d0
        internal_msg.transforms = &transform;
 8010a90:	f1a6 010c 	sub.w	r1, r6, #12
    odom_trans.header.stamp = ros::Time(start_time,0);
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";

    odom_trans.transform.translation.x = x;
    odom_trans.transform.translation.y = y;
 8010a94:	f8c4 0a6c 	str.w	r0, [r4, #2668]	; 0xa6c
 8010a98:	f8c4 3a80 	str.w	r3, [r4, #2688]	; 0xa80
 8010a9c:	f8c4 8a84 	str.w	r8, [r4, #2692]	; 0xa84
 8010aa0:	f8c4 1a18 	str.w	r1, [r4, #2584]	; 0xa18
        publisher_.publish(&internal_msg);
 8010aa4:	f1a6 0034 	sub.w	r0, r6, #52	; 0x34
 8010aa8:	f1a6 0184 	sub.w	r1, r6, #132	; 0x84
 8010aac:	f7fe fffb 	bl	800faa6 <ros::Publisher::publish(ros::Msg const*)>
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
      Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
 8010ab0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010ab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
      {
        normalizeSecNSec(sec, nsec);
 8010ab4:	4628      	mov	r0, r5
 8010ab6:	a929      	add	r1, sp, #164	; 0xa4
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
      Time(uint32_t _sec, uint32_t _nsec) : sec(_sec), nsec(_nsec)
 8010ab8:	602a      	str	r2, [r5, #0]
 8010aba:	606b      	str	r3, [r5, #4]
      {
        normalizeSecNSec(sec, nsec);
 8010abc:	f7f4 f8dc 	bl	8004c78 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>

    //send the transform
    odom_broadcaster.sendTransform(odom_trans);

    //next, we'll publish the odometry message over ROS
    odom.header.stamp = ros::Time(start_time,0);
 8010ac0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010ac4:	f106 0344 	add.w	r3, r6, #68	; 0x44
 8010ac8:	e883 0003 	stmia.w	r3, {r0, r1}
    odom.header.frame_id = "odom";
 8010acc:	4b32      	ldr	r3, [pc, #200]	; (8010b98 <main+0xb30>)
    odom.twist.twist.linear.x = x_dot;
    odom.twist.twist.linear.y = y_dot;
    odom.twist.twist.angular.z = theta_dot;

    //publish the message
    odom_pub.publish(&odom);
 8010ace:	f106 0138 	add.w	r1, r6, #56	; 0x38
    //send the transform
    odom_broadcaster.sendTransform(odom_trans);

    //next, we'll publish the odometry message over ROS
    odom.header.stamp = ros::Time(start_time,0);
    odom.header.frame_id = "odom";
 8010ad2:	f8c4 3a9c 	str.w	r3, [r4, #2716]	; 0xa9c

    //set the position
    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	f8c4 3ab8 	str.w	r3, [r4, #2744]	; 0xab8
 8010adc:	f8c4 3ac0 	str.w	r3, [r4, #2752]	; 0xac0
 8010ae0:	f8c4 3ac4 	str.w	r3, [r4, #2756]	; 0xac4
 8010ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ae6:	f8c4 8acc 	str.w	r8, [r4, #2764]	; 0xacc
 8010aea:	f8c4 3ac8 	str.w	r3, [r4, #2760]	; 0xac8
    odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = x_dot;
 8010aee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    odom.twist.twist.linear.y = y_dot;
    odom.twist.twist.angular.z = theta_dot;

    //publish the message
    odom_pub.publish(&odom);
 8010af0:	f1a6 0098 	sub.w	r0, r6, #152	; 0x98
    odom.pose.pose.position.z = 0.0;
    odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = x_dot;
 8010af4:	f8c4 3b6c 	str.w	r3, [r4, #2924]	; 0xb6c
    odom.twist.twist.linear.y = y_dot;
 8010af8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    odom.header.stamp = ros::Time(start_time,0);
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
 8010afa:	f8c4 9ab4 	str.w	r9, [r4, #2740]	; 0xab4
    odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = x_dot;
    odom.twist.twist.linear.y = y_dot;
 8010afe:	f8c4 3b70 	str.w	r3, [r4, #2928]	; 0xb70
    odom.twist.twist.angular.z = theta_dot;
 8010b02:	9b16      	ldr	r3, [sp, #88]	; 0x58
    //next, we'll publish the odometry message over ROS
    odom.header.stamp = ros::Time(start_time,0);
    odom.header.frame_id = "odom";

    //set the position
    odom.pose.pose.position.x = x;
 8010b04:	f8c4 aab0 	str.w	sl, [r4, #2736]	; 0xab0

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = x_dot;
    odom.twist.twist.linear.y = y_dot;
    odom.twist.twist.angular.z = theta_dot;
 8010b08:	f8c4 3b84 	str.w	r3, [r4, #2948]	; 0xb84
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
    odom.pose.pose.orientation = odom_quat;

    //set the velocity
    odom.child_frame_id = "base_link";
 8010b0c:	f8c4 7aa0 	str.w	r7, [r4, #2720]	; 0xaa0
    odom.twist.twist.linear.x = x_dot;
    odom.twist.twist.linear.y = y_dot;
    odom.twist.twist.angular.z = theta_dot;

    //publish the message
    odom_pub.publish(&odom);
 8010b10:	f7fe ffc9 	bl	800faa6 <ros::Publisher::publish(ros::Msg const*)>

    //delay(20);
    if((((int)millis()) / 1000.0) - start_time >= dt){
 8010b14:	f7ef fe16 	bl	8000744 <millis>
 8010b18:	4605      	mov	r5, r0
 8010b1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010b1c:	f7f4 fa4a 	bl	8004fb4 <__aeabi_f2d>
 8010b20:	4680      	mov	r8, r0
 8010b22:	4689      	mov	r9, r1
 8010b24:	4628      	mov	r0, r5
 8010b26:	f7f4 fa33 	bl	8004f90 <__aeabi_i2d>
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	4b1b      	ldr	r3, [pc, #108]	; (8010b9c <main+0xb34>)
 8010b2e:	f7f4 fbbf 	bl	80052b0 <__aeabi_ddiv>
 8010b32:	4642      	mov	r2, r8
 8010b34:	464b      	mov	r3, r9
 8010b36:	f7f4 f8dd 	bl	8004cf4 <__aeabi_dsub>
 8010b3a:	a311      	add	r3, pc, #68	; (adr r3, 8010b80 <main+0xb18>)
 8010b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b40:	f7f4 fd12 	bl	8005568 <__aeabi_dcmpge>
 8010b44:	b128      	cbz	r0, 8010b52 <main+0xaea>
      nh.logerror("Main loop running slower than expected!");
 8010b46:	4916      	ldr	r1, [pc, #88]	; (8010ba0 <main+0xb38>)
 8010b48:	f2a6 6024 	subw	r0, r6, #1572	; 0x624
 8010b4c:	f7ff f85e 	bl	800fc0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
 8010b50:	e012      	b.n	8010b78 <main+0xb10>
    }else{
      while( (((int)millis()) / 1000.0) - start_time <= dt){}
 8010b52:	f7ef fdf7 	bl	8000744 <millis>
 8010b56:	f7f4 fa1b 	bl	8004f90 <__aeabi_i2d>
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	4b0f      	ldr	r3, [pc, #60]	; (8010b9c <main+0xb34>)
 8010b5e:	f7f4 fba7 	bl	80052b0 <__aeabi_ddiv>
 8010b62:	4642      	mov	r2, r8
 8010b64:	464b      	mov	r3, r9
 8010b66:	f7f4 f8c5 	bl	8004cf4 <__aeabi_dsub>
 8010b6a:	a305      	add	r3, pc, #20	; (adr r3, 8010b80 <main+0xb18>)
 8010b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b70:	f7f4 fcf0 	bl	8005554 <__aeabi_dcmple>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	d1ec      	bne.n	8010b52 <main+0xaea>
  float l = sqrt(pow((L/2),2)*2);

  float alpha[4] = {0,0,0,0};


  while (1){
 8010b78:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8010b7a:	e515      	b.n	80105a8 <main+0x540>
 8010b7c:	f3af 8000 	nop.w
 8010b80:	40000000 	.word	0x40000000
 8010b84:	3f947ae1 	.word	0x3f947ae1
 8010b88:	3ca3d70a 	.word	0x3ca3d70a
 8010b8c:	3fe00000 	.word	0x3fe00000
 8010b90:	20000b10 	.word	0x20000b10
 8010b94:	08015c1a 	.word	0x08015c1a
 8010b98:	08015c15 	.word	0x08015c15
 8010b9c:	408f4000 	.word	0x408f4000
 8010ba0:	08015c24 	.word	0x08015c24

08010ba4 <_GLOBAL__sub_I_USART_FIFO>:
  while (1){
    debug_toggle();
    delay(100);
    nh.spinOnce();
  }
}
 8010ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      /*
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {
 8010ba8:	4a78      	ldr	r2, [pc, #480]	; (8010d8c <_GLOBAL__sub_I_USART_FIFO+0x1e8>)
 8010baa:	4b79      	ldr	r3, [pc, #484]	; (8010d90 <_GLOBAL__sub_I_USART_FIFO+0x1ec>)
      char* * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8010bac:	4979      	ldr	r1, [pc, #484]	; (8010d94 <_GLOBAL__sub_I_USART_FIFO+0x1f0>)
 8010bae:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
      USART_CNTOUT = 0;
    }
    ArduinoHardware()
    {
      /* Leonardo support */
      iostream = USART1;
 8010bb2:	4a79      	ldr	r2, [pc, #484]	; (8010d98 <_GLOBAL__sub_I_USART_FIFO+0x1f4>)
 8010bb4:	f8c3 1934 	str.w	r1, [r3, #2356]	; 0x934
 8010bb8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
      baud_ = 115200;
 8010bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010bc0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
      USART_CNTIN = 0;
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	625a      	str	r2, [r3, #36]	; 0x24
 8010bc8:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
      USART_CNTOUT = 0;
 8010bcc:	621a      	str	r2, [r3, #32]
 8010bce:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 8010bd2:	f8c3 2940 	str.w	r2, [r3, #2368]	; 0x940
 8010bd6:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 8010bda:	f8c3 294c 	str.w	r2, [r3, #2380]	; 0x94c
 8010bde:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 8010be2:	f8c3 2958 	str.w	r2, [r3, #2392]	; 0x958
 8010be6:	f503 6104 	add.w	r1, r3, #2112	; 0x840
 8010bea:	f603 03a4 	addw	r3, r3, #2212	; 0x8a4

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;
 8010bee:	f841 2f04 	str.w	r2, [r1, #4]!
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8010bf2:	4299      	cmp	r1, r3
 8010bf4:	d1fb      	bne.n	8010bee <_GLOBAL__sub_I_USART_FIFO+0x4a>
 8010bf6:	4a69      	ldr	r2, [pc, #420]	; (8010d9c <_GLOBAL__sub_I_USART_FIFO+0x1f8>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	f843 1f04 	str.w	r1, [r3, #4]!
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d1fb      	bne.n	8010bfa <_GLOBAL__sub_I_USART_FIFO+0x56>
 8010c02:	2300      	movs	r3, #0
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;
 8010c04:	4619      	mov	r1, r3
 8010c06:	4c66      	ldr	r4, [pc, #408]	; (8010da0 <_GLOBAL__sub_I_USART_FIFO+0x1fc>)
 8010c08:	18e2      	adds	r2, r4, r3
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	   message_in[i] = 0;
 8010c10:	7611      	strb	r1, [r2, #24]
 8010c12:	4863      	ldr	r0, [pc, #396]	; (8010da0 <_GLOBAL__sub_I_USART_FIFO+0x1fc>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010c14:	d1f8      	bne.n	8010c08 <_GLOBAL__sub_I_USART_FIFO+0x64>
 8010c16:	2300      	movs	r3, #0
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
	   message_out[i] = 0;
 8010c18:	4619      	mov	r1, r3
 8010c1a:	18c2      	adds	r2, r0, r3
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	   message_out[i] = 0;
 8010c22:	4c5b      	ldr	r4, [pc, #364]	; (8010d90 <_GLOBAL__sub_I_USART_FIFO+0x1ec>)
 8010c24:	f04f 0600 	mov.w	r6, #0
 8010c28:	f882 1218 	strb.w	r1, [r2, #536]	; 0x218
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8010c2c:	d1f5      	bne.n	8010c1a <_GLOBAL__sub_I_USART_FIFO+0x76>
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010c2e:	4b5d      	ldr	r3, [pc, #372]	; (8010da4 <_GLOBAL__sub_I_USART_FIFO+0x200>)
      {
        topic_ = topic_name;
 8010c30:	4a5d      	ldr	r2, [pc, #372]	; (8010da8 <_GLOBAL__sub_I_USART_FIFO+0x204>)
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010c32:	f8c4 395c 	str.w	r3, [r4, #2396]	; 0x95c
      header(),
      heading_angle(0),
      heading_velocity(0),
      speed(0),
      acceleration(0),
      mode(0)
 8010c36:	4b5d      	ldr	r3, [pc, #372]	; (8010dac <_GLOBAL__sub_I_USART_FIFO+0x208>)
      {
        topic_ = topic_name;
 8010c38:	f8c4 2964 	str.w	r2, [r4, #2404]	; 0x964
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010c3c:	4a5c      	ldr	r2, [pc, #368]	; (8010db0 <_GLOBAL__sub_I_USART_FIFO+0x20c>)
 8010c3e:	f8c4 3968 	str.w	r3, [r4, #2408]	; 0x968
 8010c42:	4b5c      	ldr	r3, [pc, #368]	; (8010db4 <_GLOBAL__sub_I_USART_FIFO+0x210>)
 8010c44:	f8c4 299c 	str.w	r2, [r4, #2460]	; 0x99c
  {
    public:
      uint8_t data;

    UInt8():
      data(0)
 8010c48:	4a5b      	ldr	r2, [pc, #364]	; (8010db8 <_GLOBAL__sub_I_USART_FIFO+0x214>)
 8010c4a:	4f5c      	ldr	r7, [pc, #368]	; (8010dbc <_GLOBAL__sub_I_USART_FIFO+0x218>)
 8010c4c:	f8c4 3994 	str.w	r3, [r4, #2452]	; 0x994
 8010c50:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8010df4 <_GLOBAL__sub_I_USART_FIFO+0x250>
 8010c54:	2301      	movs	r3, #1
 8010c56:	2500      	movs	r5, #0
 8010c58:	f8c4 3998 	str.w	r3, [r4, #2456]	; 0x998
 8010c5c:	f8c4 29a8 	str.w	r2, [r4, #2472]	; 0x9a8
 8010c60:	f8c4 39b4 	str.w	r3, [r4, #2484]	; 0x9b4
 8010c64:	4a56      	ldr	r2, [pc, #344]	; (8010dc0 <_GLOBAL__sub_I_USART_FIFO+0x21c>)
      {
        topic_ = topic_name;
 8010c66:	4b57      	ldr	r3, [pc, #348]	; (8010dc4 <_GLOBAL__sub_I_USART_FIFO+0x220>)
 8010c68:	f8c4 896c 	str.w	r8, [r4, #2412]	; 0x96c
 8010c6c:	f8c4 6970 	str.w	r6, [r4, #2416]	; 0x970
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 8010c70:	f8c4 6974 	str.w	r6, [r4, #2420]	; 0x974
 8010c74:	f8c4 6978 	str.w	r6, [r4, #2424]	; 0x978
 8010c78:	f8c4 797c 	str.w	r7, [r4, #2428]	; 0x97c
 8010c7c:	f8c4 5980 	str.w	r5, [r4, #2432]	; 0x980
 8010c80:	f8c4 5984 	str.w	r5, [r4, #2436]	; 0x984
 8010c84:	f8c4 5988 	str.w	r5, [r4, #2440]	; 0x988
 8010c88:	f8c4 598c 	str.w	r5, [r4, #2444]	; 0x98c
 8010c8c:	f884 6990 	strb.w	r6, [r4, #2448]	; 0x990
 8010c90:	f884 69ac 	strb.w	r6, [r4, #2476]	; 0x9ac

ros::Subscriber<roberto_msgs::MotorState> motor_sub("throttled_joy_vel", &motor_cb);
//ros::Subscriber<sensor_msgs::Joy> motor_sub("joy", &motor_cb);
ros::Subscriber<std_msgs::UInt8> led_sub("led", &led_cb);

geometry_msgs::TransformStamped odom_trans;
 8010c94:	f604 2044 	addw	r0, r4, #2628	; 0xa44
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010c98:	f8c4 29b0 	str.w	r2, [r4, #2480]	; 0x9b0
      {
        topic_ = topic_name;
 8010c9c:	f8c4 39a4 	str.w	r3, [r4, #2468]	; 0x9a4
 8010ca0:	f7fe ff56 	bl	800fb50 <geometry_msgs::TransformStamped::TransformStamped()>
      uint8_t transforms_length;
      geometry_msgs::TransformStamped st_transforms;
      geometry_msgs::TransformStamped * transforms;

    tfMessage():
      transforms_length(0), transforms(NULL)
 8010ca4:	4b48      	ldr	r3, [pc, #288]	; (8010dc8 <_GLOBAL__sub_I_USART_FIFO+0x224>)
 8010ca6:	f884 69d0 	strb.w	r6, [r4, #2512]	; 0x9d0
 8010caa:	f8c4 39cc 	str.w	r3, [r4, #2508]	; 0x9cc
 8010cae:	f604 10d4 	addw	r0, r4, #2516	; 0x9d4
 8010cb2:	f7fe ff4d 	bl	800fb50 <geometry_msgs::TransformStamped::TransformStamped()>
  {
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};
 8010cb6:	4b45      	ldr	r3, [pc, #276]	; (8010dcc <_GLOBAL__sub_I_USART_FIFO+0x228>)
 8010cb8:	f604 19cc 	addw	r9, r4, #2508	; 0x9cc
 8010cbc:	f8c4 3a1c 	str.w	r3, [r4, #2588]	; 0xa1c

    Odometry():
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8010cc0:	4b43      	ldr	r3, [pc, #268]	; (8010dd0 <_GLOBAL__sub_I_USART_FIFO+0x22c>)
 8010cc2:	f8c4 6a18 	str.w	r6, [r4, #2584]	; 0xa18
 8010cc6:	f8c4 3a88 	str.w	r3, [r4, #2696]	; 0xa88
      geometry_msgs::Pose pose;
      float covariance[36];

    PoseWithCovariance():
      pose(),
      covariance()
 8010cca:	4b42      	ldr	r3, [pc, #264]	; (8010dd4 <_GLOBAL__sub_I_USART_FIFO+0x230>)
 8010ccc:	f8c4 9a20 	str.w	r9, [r4, #2592]	; 0xa20
 8010cd0:	f8c4 3aa4 	str.w	r3, [r4, #2724]	; 0xaa4
      geometry_msgs::Point position;
      geometry_msgs::Quaternion orientation;

    Pose():
      position(),
      orientation()
 8010cd4:	4b40      	ldr	r3, [pc, #256]	; (8010dd8 <_GLOBAL__sub_I_USART_FIFO+0x234>)
 8010cd6:	f8c4 6a2c 	str.w	r6, [r4, #2604]	; 0xa2c
 8010cda:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
      float z;

    Point():
      x(0),
      y(0),
      z(0)
 8010cde:	4b3f      	ldr	r3, [pc, #252]	; (8010ddc <_GLOBAL__sub_I_USART_FIFO+0x238>)
 8010ce0:	f8c4 8a8c 	str.w	r8, [r4, #2700]	; 0xa8c
 8010ce4:	f8c4 3aac 	str.w	r3, [r4, #2732]	; 0xaac

    Quaternion():
      x(0),
      y(0),
      z(0),
      w(0)
 8010ce8:	4b3d      	ldr	r3, [pc, #244]	; (8010de0 <_GLOBAL__sub_I_USART_FIFO+0x23c>)
 8010cea:	f8c4 6a90 	str.w	r6, [r4, #2704]	; 0xa90
 8010cee:	f8c4 6a94 	str.w	r6, [r4, #2708]	; 0xa94
 8010cf2:	f8c4 6a98 	str.w	r6, [r4, #2712]	; 0xa98
 8010cf6:	f8c4 7a9c 	str.w	r7, [r4, #2716]	; 0xa9c
 8010cfa:	f8c4 7aa0 	str.w	r7, [r4, #2720]	; 0xaa0
 8010cfe:	f8c4 5ab0 	str.w	r5, [r4, #2736]	; 0xab0
 8010d02:	f8c4 5ab4 	str.w	r5, [r4, #2740]	; 0xab4
 8010d06:	f8c4 5ab8 	str.w	r5, [r4, #2744]	; 0xab8
 8010d0a:	f8c4 3abc 	str.w	r3, [r4, #2748]	; 0xabc
 8010d0e:	f8c4 5ac0 	str.w	r5, [r4, #2752]	; 0xac0
 8010d12:	f8c4 5ac4 	str.w	r5, [r4, #2756]	; 0xac4
 8010d16:	f8c4 5ac8 	str.w	r5, [r4, #2760]	; 0xac8
 8010d1a:	f8c4 5acc 	str.w	r5, [r4, #2764]	; 0xacc
 8010d1e:	f504 612d 	add.w	r1, r4, #2768	; 0xad0
 8010d22:	f504 6436 	add.w	r4, r4, #2912	; 0xb60
 8010d26:	f841 5b04 	str.w	r5, [r1], #4
 8010d2a:	42a1      	cmp	r1, r4
 8010d2c:	f04f 0200 	mov.w	r2, #0
 8010d30:	4b17      	ldr	r3, [pc, #92]	; (8010d90 <_GLOBAL__sub_I_USART_FIFO+0x1ec>)
 8010d32:	d1f8      	bne.n	8010d26 <_GLOBAL__sub_I_USART_FIFO+0x182>
      geometry_msgs::Twist twist;
      float covariance[36];

    TwistWithCovariance():
      twist(),
      covariance()
 8010d34:	492b      	ldr	r1, [pc, #172]	; (8010de4 <_GLOBAL__sub_I_USART_FIFO+0x240>)
 8010d36:	f8c3 2b6c 	str.w	r2, [r3, #2924]	; 0xb6c
 8010d3a:	f8c3 1b60 	str.w	r1, [r3, #2912]	; 0xb60
      geometry_msgs::Vector3 linear;
      geometry_msgs::Vector3 angular;

    Twist():
      linear(),
      angular()
 8010d3e:	492a      	ldr	r1, [pc, #168]	; (8010de8 <_GLOBAL__sub_I_USART_FIFO+0x244>)
 8010d40:	f8c3 2b70 	str.w	r2, [r3, #2928]	; 0xb70
 8010d44:	f8c3 1b64 	str.w	r1, [r3, #2916]	; 0xb64
 8010d48:	4928      	ldr	r1, [pc, #160]	; (8010dec <_GLOBAL__sub_I_USART_FIFO+0x248>)
 8010d4a:	f8c3 2b74 	str.w	r2, [r3, #2932]	; 0xb74
 8010d4e:	f8c3 1b68 	str.w	r1, [r3, #2920]	; 0xb68
 8010d52:	f8c3 1b78 	str.w	r1, [r3, #2936]	; 0xb78
 8010d56:	f8c3 2b7c 	str.w	r2, [r3, #2940]	; 0xb7c
 8010d5a:	f8c3 2b80 	str.w	r2, [r3, #2944]	; 0xb80
 8010d5e:	f8c3 2b84 	str.w	r2, [r3, #2948]	; 0xb84
 8010d62:	f603 3188 	addw	r1, r3, #2952	; 0xb88
 8010d66:	f603 4318 	addw	r3, r3, #3096	; 0xc18
 8010d6a:	f841 5b04 	str.w	r5, [r1], #4
 8010d6e:	4a08      	ldr	r2, [pc, #32]	; (8010d90 <_GLOBAL__sub_I_USART_FIFO+0x1ec>)
 8010d70:	4299      	cmp	r1, r3
 8010d72:	f602 2088 	addw	r0, r2, #2696	; 0xa88
 8010d76:	d1f8      	bne.n	8010d6a <_GLOBAL__sub_I_USART_FIFO+0x1c6>
 8010d78:	4b1d      	ldr	r3, [pc, #116]	; (8010df0 <_GLOBAL__sub_I_USART_FIFO+0x24c>)
 8010d7a:	f8c2 09bc 	str.w	r0, [r2, #2492]	; 0x9bc
 8010d7e:	f8c2 39b8 	str.w	r3, [r2, #2488]	; 0x9b8
 8010d82:	2300      	movs	r3, #0
 8010d84:	f8c2 39c8 	str.w	r3, [r2, #2504]	; 0x9c8
 8010d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d8c:	080156a0 	.word	0x080156a0
 8010d90:	200000c0 	.word	0x200000c0
 8010d94:	08015538 	.word	0x08015538
 8010d98:	40013800 	.word	0x40013800
 8010d9c:	200009c8 	.word	0x200009c8
 8010da0:	200004ec 	.word	0x200004ec
 8010da4:	080156b4 	.word	0x080156b4
 8010da8:	08015c79 	.word	0x08015c79
 8010dac:	08015640 	.word	0x08015640
 8010db0:	080156cc 	.word	0x080156cc
 8010db4:	08004293 	.word	0x08004293
 8010db8:	08015550 	.word	0x08015550
 8010dbc:	08015bf7 	.word	0x08015bf7
 8010dc0:	0800428d 	.word	0x0800428d
 8010dc4:	08015c8b 	.word	0x08015c8b
 8010dc8:	08015688 	.word	0x08015688
 8010dcc:	08015c8f 	.word	0x08015c8f
 8010dd0:	08015628 	.word	0x08015628
 8010dd4:	080155c8 	.word	0x080155c8
 8010dd8:	080155b0 	.word	0x080155b0
 8010ddc:	08015580 	.word	0x08015580
 8010de0:	08015598 	.word	0x08015598
 8010de4:	08015610 	.word	0x08015610
 8010de8:	080155f8 	.word	0x080155f8
 8010dec:	080155e0 	.word	0x080155e0
 8010df0:	08015c15 	.word	0x08015c15
 8010df4:	08015568 	.word	0x08015568

08010df8 <servo::motorType()>:
    virtual void setReference(float setPoint);
    virtual float getReference();
    virtual const char* motorName();
    virtual std::tuple<float, float, int, int> update(float dt, bool connected);

    virtual int motorType() { return MOTOR_TYPE_SERVO; }
 8010df8:	2001      	movs	r0, #1
 8010dfa:	4770      	bx	lr

08010dfc <DCMotor::motorType()>:
    virtual void setReference(float setPoint);
    virtual float getReference();
    virtual const char* motorName();
    virtual std::tuple<float, float, int, int> update(float dt, bool connected);

    virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
 8010dfc:	2002      	movs	r0, #2
 8010dfe:	4770      	bx	lr

08010e00 <operator delete(void*)>:
 8010e00:	f002 bb38 	b.w	8013474 <free>

08010e04 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	4604      	mov	r4, r0
 8010e08:	4b02      	ldr	r3, [pc, #8]	; (8010e14 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
 8010e0a:	6003      	str	r3, [r0, #0]
 8010e0c:	f000 fc62 	bl	80116d4 <__cxxabiv1::__class_type_info::~__class_type_info()>
 8010e10:	4620      	mov	r0, r4
 8010e12:	bd10      	pop	{r4, pc}
 8010e14:	08015c9c 	.word	0x08015c9c

08010e18 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8010e18:	b510      	push	{r4, lr}
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	f7ff fff2 	bl	8010e04 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
 8010e20:	4620      	mov	r0, r4
 8010e22:	f7ff ffed 	bl	8010e00 <operator delete(void*)>
 8010e26:	4620      	mov	r0, r4
 8010e28:	bd10      	pop	{r4, pc}

08010e2a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8010e2a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2e:	460e      	mov	r6, r1
 8010e30:	4619      	mov	r1, r3
 8010e32:	4683      	mov	fp, r0
 8010e34:	4617      	mov	r7, r2
 8010e36:	4699      	mov	r9, r3
 8010e38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e3a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8010e3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010e42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010e44:	f000 fb58 	bl	80114f8 <std::type_info::operator==(std::type_info const&) const>
 8010e48:	b178      	cbz	r0, 8010e6a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
 8010e4a:	2e00      	cmp	r6, #0
 8010e4c:	602c      	str	r4, [r5, #0]
 8010e4e:	712f      	strb	r7, [r5, #4]
 8010e50:	db06      	blt.n	8010e60 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x36>
 8010e52:	4434      	add	r4, r6
 8010e54:	45a0      	cmp	r8, r4
 8010e56:	bf0c      	ite	eq
 8010e58:	2406      	moveq	r4, #6
 8010e5a:	2401      	movne	r4, #1
 8010e5c:	71ac      	strb	r4, [r5, #6]
 8010e5e:	e01e      	b.n	8010e9e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8010e60:	3602      	adds	r6, #2
 8010e62:	d11c      	bne.n	8010e9e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8010e64:	2301      	movs	r3, #1
 8010e66:	71ab      	strb	r3, [r5, #6]
 8010e68:	e019      	b.n	8010e9e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8010e6a:	4544      	cmp	r4, r8
 8010e6c:	d104      	bne.n	8010e78 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x4e>
 8010e6e:	4651      	mov	r1, sl
 8010e70:	4658      	mov	r0, fp
 8010e72:	f000 fb41 	bl	80114f8 <std::type_info::operator==(std::type_info const&) const>
 8010e76:	b988      	cbnz	r0, 8010e9c <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x72>
 8010e78:	f8db 0008 	ldr.w	r0, [fp, #8]
 8010e7c:	463a      	mov	r2, r7
 8010e7e:	6803      	ldr	r3, [r0, #0]
 8010e80:	950d      	str	r5, [sp, #52]	; 0x34
 8010e82:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8010e86:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8010e8a:	940a      	str	r4, [sp, #40]	; 0x28
 8010e8c:	69dc      	ldr	r4, [r3, #28]
 8010e8e:	4631      	mov	r1, r6
 8010e90:	464b      	mov	r3, r9
 8010e92:	46a4      	mov	ip, r4
 8010e94:	b001      	add	sp, #4
 8010e96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9a:	4760      	bx	ip
 8010e9c:	716f      	strb	r7, [r5, #5]
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	b001      	add	sp, #4
 8010ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ea6 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8010ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eaa:	9e06      	ldr	r6, [sp, #24]
 8010eac:	4680      	mov	r8, r0
 8010eae:	4296      	cmp	r6, r2
 8010eb0:	460f      	mov	r7, r1
 8010eb2:	4614      	mov	r4, r2
 8010eb4:	461d      	mov	r5, r3
 8010eb6:	d103      	bne.n	8010ec0 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1a>
 8010eb8:	4619      	mov	r1, r3
 8010eba:	f000 fb1d 	bl	80114f8 <std::type_info::operator==(std::type_info const&) const>
 8010ebe:	b958      	cbnz	r0, 8010ed8 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x32>
 8010ec0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8010ec4:	4622      	mov	r2, r4
 8010ec6:	6803      	ldr	r3, [r0, #0]
 8010ec8:	9606      	str	r6, [sp, #24]
 8010eca:	6a1e      	ldr	r6, [r3, #32]
 8010ecc:	4639      	mov	r1, r7
 8010ece:	462b      	mov	r3, r5
 8010ed0:	46b4      	mov	ip, r6
 8010ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed6:	4760      	bx	ip
 8010ed8:	2006      	movs	r0, #6
 8010eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ede <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8010ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	460d      	mov	r5, r1
 8010ee6:	4616      	mov	r6, r2
 8010ee8:	461f      	mov	r7, r3
 8010eea:	f000 fc06 	bl	80116fa <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
 8010eee:	b948      	cbnz	r0, 8010f04 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
 8010ef0:	68a0      	ldr	r0, [r4, #8]
 8010ef2:	4632      	mov	r2, r6
 8010ef4:	6803      	ldr	r3, [r0, #0]
 8010ef6:	4629      	mov	r1, r5
 8010ef8:	699c      	ldr	r4, [r3, #24]
 8010efa:	463b      	mov	r3, r7
 8010efc:	46a4      	mov	ip, r4
 8010efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f02:	4760      	bx	ip
 8010f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f08 <read_uleb128(unsigned char const*, unsigned long*)>:
 8010f08:	b570      	push	{r4, r5, r6, lr}
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8010f10:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8010f14:	f810 5b01 	ldrb.w	r5, [r0], #1
 8010f18:	1994      	adds	r4, r2, r6
 8010f1a:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8010f1e:	40a2      	lsls	r2, r4
 8010f20:	4313      	orrs	r3, r2
 8010f22:	062a      	lsls	r2, r5, #24
 8010f24:	d4f4      	bmi.n	8010f10 <read_uleb128(unsigned char const*, unsigned long*)+0x8>
 8010f26:	600b      	str	r3, [r1, #0]
 8010f28:	bd70      	pop	{r4, r5, r6, pc}

08010f2a <read_sleb128(unsigned char const*, long*)>:
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	b530      	push	{r4, r5, lr}
 8010f30:	f810 4b01 	ldrb.w	r4, [r0], #1
 8010f34:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8010f38:	4095      	lsls	r5, r2
 8010f3a:	432b      	orrs	r3, r5
 8010f3c:	0625      	lsls	r5, r4, #24
 8010f3e:	f102 0207 	add.w	r2, r2, #7
 8010f42:	d4f5      	bmi.n	8010f30 <read_sleb128(unsigned char const*, long*)+0x6>
 8010f44:	2a1f      	cmp	r2, #31
 8010f46:	d806      	bhi.n	8010f56 <read_sleb128(unsigned char const*, long*)+0x2c>
 8010f48:	0664      	lsls	r4, r4, #25
 8010f4a:	bf42      	ittt	mi
 8010f4c:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8010f50:	fa04 f202 	lslmi.w	r2, r4, r2
 8010f54:	4313      	orrmi	r3, r2
 8010f56:	600b      	str	r3, [r1, #0]
 8010f58:	bd30      	pop	{r4, r5, pc}

08010f5a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
 8010f5a:	2850      	cmp	r0, #80	; 0x50
 8010f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f5e:	4605      	mov	r5, r0
 8010f60:	460f      	mov	r7, r1
 8010f62:	4614      	mov	r4, r2
 8010f64:	461e      	mov	r6, r3
 8010f66:	d105      	bne.n	8010f74 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x1a>
 8010f68:	1cd0      	adds	r0, r2, #3
 8010f6a:	f020 0003 	bic.w	r0, r0, #3
 8010f6e:	f850 3b04 	ldr.w	r3, [r0], #4
 8010f72:	e033      	b.n	8010fdc <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x82>
 8010f74:	f000 030f 	and.w	r3, r0, #15
 8010f78:	2b0c      	cmp	r3, #12
 8010f7a:	d823      	bhi.n	8010fc4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6a>
 8010f7c:	e8df f003 	tbb	[pc, r3]
 8010f80:	1a12071a 	.word	0x1a12071a
 8010f84:	2222221e 	.word	0x2222221e
 8010f88:	1a160c22 	.word	0x1a160c22
 8010f8c:	1e          	.byte	0x1e
 8010f8d:	00          	.byte	0x00
 8010f8e:	a901      	add	r1, sp, #4
 8010f90:	4620      	mov	r0, r4
 8010f92:	f7ff ffb9 	bl	8010f08 <read_uleb128(unsigned char const*, unsigned long*)>
 8010f96:	e003      	b.n	8010fa0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x46>
 8010f98:	a901      	add	r1, sp, #4
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7ff ffc5 	bl	8010f2a <read_sleb128(unsigned char const*, long*)>
 8010fa0:	9b01      	ldr	r3, [sp, #4]
 8010fa2:	e011      	b.n	8010fc8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f830 3b02 	ldrh.w	r3, [r0], #2
 8010faa:	e00d      	b.n	8010fc8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010fac:	4620      	mov	r0, r4
 8010fae:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8010fb2:	e009      	b.n	8010fc8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f850 3b04 	ldr.w	r3, [r0], #4
 8010fba:	e005      	b.n	8010fc8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	f850 3b08 	ldr.w	r3, [r0], #8
 8010fc2:	e001      	b.n	8010fc8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8010fc4:	f002 f9aa 	bl	801331c <abort>
 8010fc8:	b143      	cbz	r3, 8010fdc <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x82>
 8010fca:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8010fce:	2a10      	cmp	r2, #16
 8010fd0:	bf18      	it	ne
 8010fd2:	463c      	movne	r4, r7
 8010fd4:	062a      	lsls	r2, r5, #24
 8010fd6:	4423      	add	r3, r4
 8010fd8:	bf48      	it	mi
 8010fda:	681b      	ldrmi	r3, [r3, #0]
 8010fdc:	6033      	str	r3, [r6, #0]
 8010fde:	b003      	add	sp, #12
 8010fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fe2 <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
 8010fe2:	b508      	push	{r3, lr}
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2bff      	cmp	r3, #255	; 0xff
 8010fe8:	4608      	mov	r0, r1
 8010fea:	d01c      	beq.n	8011026 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010ff0:	2b20      	cmp	r3, #32
 8010ff2:	d00e      	beq.n	8011012 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x30>
 8010ff4:	d803      	bhi.n	8010ffe <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1c>
 8010ff6:	b1b3      	cbz	r3, 8011026 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010ff8:	2b10      	cmp	r3, #16
 8010ffa:	d112      	bne.n	8011022 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 8010ffc:	e013      	b.n	8011026 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010ffe:	2b40      	cmp	r3, #64	; 0x40
 8011000:	d00b      	beq.n	801101a <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
 8011002:	2b50      	cmp	r3, #80	; 0x50
 8011004:	d00f      	beq.n	8011026 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8011006:	2b30      	cmp	r3, #48	; 0x30
 8011008:	d10b      	bne.n	8011022 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 801100a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801100e:	f7f5 bdbf 	b.w	8006b90 <_Unwind_GetDataRelBase>
 8011012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011016:	f7f5 bdb7 	b.w	8006b88 <_Unwind_GetTextRelBase>
 801101a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801101e:	f7f5 bda3 	b.w	8006b68 <_Unwind_GetRegionStart>
 8011022:	f002 f97b 	bl	801331c <abort>
 8011026:	2000      	movs	r0, #0
 8011028:	bd08      	pop	{r3, pc}

0801102a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>:
 801102a:	b570      	push	{r4, r5, r6, lr}
 801102c:	460c      	mov	r4, r1
 801102e:	4601      	mov	r1, r0
 8011030:	4620      	mov	r0, r4
 8011032:	4615      	mov	r5, r2
 8011034:	461e      	mov	r6, r3
 8011036:	f7ff ffd4 	bl	8010fe2 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 801103a:	4633      	mov	r3, r6
 801103c:	462a      	mov	r2, r5
 801103e:	4601      	mov	r1, r0
 8011040:	4620      	mov	r0, r4
 8011042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011046:	f7ff bf88 	b.w	8010f5a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>

0801104a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
 801104a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801104c:	460e      	mov	r6, r1
 801104e:	4614      	mov	r4, r2
 8011050:	4605      	mov	r5, r0
 8011052:	b110      	cbz	r0, 801105a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>
 8011054:	f7f5 fd88 	bl	8006b68 <_Unwind_GetRegionStart>
 8011058:	e7ff      	b.n	801105a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>
 801105a:	6020      	str	r0, [r4, #0]
 801105c:	7831      	ldrb	r1, [r6, #0]
 801105e:	1c72      	adds	r2, r6, #1
 8011060:	29ff      	cmp	r1, #255	; 0xff
 8011062:	d005      	beq.n	8011070 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x26>
 8011064:	1d23      	adds	r3, r4, #4
 8011066:	4628      	mov	r0, r5
 8011068:	f7ff ffdf 	bl	801102a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 801106c:	4602      	mov	r2, r0
 801106e:	e000      	b.n	8011072 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x28>
 8011070:	6060      	str	r0, [r4, #4]
 8011072:	7813      	ldrb	r3, [r2, #0]
 8011074:	1c50      	adds	r0, r2, #1
 8011076:	2bff      	cmp	r3, #255	; 0xff
 8011078:	7523      	strb	r3, [r4, #20]
 801107a:	d007      	beq.n	801108c <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x42>
 801107c:	2310      	movs	r3, #16
 801107e:	7523      	strb	r3, [r4, #20]
 8011080:	a901      	add	r1, sp, #4
 8011082:	f7ff ff41 	bl	8010f08 <read_uleb128(unsigned char const*, unsigned long*)>
 8011086:	9b01      	ldr	r3, [sp, #4]
 8011088:	4403      	add	r3, r0
 801108a:	e000      	b.n	801108e <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x44>
 801108c:	2300      	movs	r3, #0
 801108e:	60e3      	str	r3, [r4, #12]
 8011090:	7803      	ldrb	r3, [r0, #0]
 8011092:	a901      	add	r1, sp, #4
 8011094:	7563      	strb	r3, [r4, #21]
 8011096:	3001      	adds	r0, #1
 8011098:	f7ff ff36 	bl	8010f08 <read_uleb128(unsigned char const*, unsigned long*)>
 801109c:	9b01      	ldr	r3, [sp, #4]
 801109e:	4403      	add	r3, r0
 80110a0:	6123      	str	r3, [r4, #16]
 80110a2:	b002      	add	sp, #8
 80110a4:	bd70      	pop	{r4, r5, r6, pc}

080110a6 <_Unwind_GetGR>:
 80110a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110a8:	ab03      	add	r3, sp, #12
 80110aa:	9300      	str	r3, [sp, #0]
 80110ac:	2300      	movs	r3, #0
 80110ae:	460a      	mov	r2, r1
 80110b0:	4619      	mov	r1, r3
 80110b2:	f7f4 ffcf 	bl	8006054 <_Unwind_VRS_Get>
 80110b6:	9803      	ldr	r0, [sp, #12]
 80110b8:	b005      	add	sp, #20
 80110ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080110c0 <__gxx_personality_v0>:
 80110c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110c4:	2300      	movs	r3, #0
 80110c6:	b091      	sub	sp, #68	; 0x44
 80110c8:	9304      	str	r3, [sp, #16]
 80110ca:	f000 0303 	and.w	r3, r0, #3
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	4607      	mov	r7, r0
 80110d2:	460c      	mov	r4, r1
 80110d4:	4615      	mov	r5, r2
 80110d6:	d00e      	beq.n	80110f6 <__gxx_personality_v0+0x36>
 80110d8:	d302      	bcc.n	80110e0 <__gxx_personality_v0+0x20>
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d002      	beq.n	80110e4 <__gxx_personality_v0+0x24>
 80110de:	e0ef      	b.n	80112c0 <__gxx_personality_v0+0x200>
 80110e0:	0702      	lsls	r2, r0, #28
 80110e2:	d517      	bpl.n	8011114 <__gxx_personality_v0+0x54>
 80110e4:	4629      	mov	r1, r5
 80110e6:	4620      	mov	r0, r4
 80110e8:	f7f5 fd2a 	bl	8006b40 <__gnu_unwind_frame>
 80110ec:	b108      	cbz	r0, 80110f2 <__gxx_personality_v0+0x32>
 80110ee:	2009      	movs	r0, #9
 80110f0:	e19f      	b.n	8011432 <__gxx_personality_v0+0x372>
 80110f2:	2008      	movs	r0, #8
 80110f4:	e19d      	b.n	8011432 <__gxx_personality_v0+0x372>
 80110f6:	f000 0208 	and.w	r2, r0, #8
 80110fa:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 80110fe:	b95a      	cbnz	r2, 8011118 <__gxx_personality_v0+0x58>
 8011100:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8011104:	4628      	mov	r0, r5
 8011106:	210d      	movs	r1, #13
 8011108:	f7ff ffcd 	bl	80110a6 <_Unwind_GetGR>
 801110c:	4580      	cmp	r8, r0
 801110e:	d120      	bne.n	8011152 <__gxx_personality_v0+0x92>
 8011110:	2606      	movs	r6, #6
 8011112:	e002      	b.n	801111a <__gxx_personality_v0+0x5a>
 8011114:	2601      	movs	r6, #1
 8011116:	e000      	b.n	801111a <__gxx_personality_v0+0x5a>
 8011118:	2602      	movs	r6, #2
 801111a:	ab10      	add	r3, sp, #64	; 0x40
 801111c:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8011120:	9300      	str	r3, [sp, #0]
 8011122:	f007 0708 	and.w	r7, r7, #8
 8011126:	2300      	movs	r3, #0
 8011128:	433e      	orrs	r6, r7
 801112a:	220c      	movs	r2, #12
 801112c:	4619      	mov	r1, r3
 801112e:	4628      	mov	r0, r5
 8011130:	f7f4 ffb6 	bl	80060a0 <_Unwind_VRS_Set>
 8011134:	2e06      	cmp	r6, #6
 8011136:	d117      	bne.n	8011168 <__gxx_personality_v0+0xa8>
 8011138:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801113c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801113e:	f1b8 0f00 	cmp.w	r8, #0
 8011142:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 8011146:	bf0c      	ite	eq
 8011148:	f04f 0a01 	moveq.w	sl, #1
 801114c:	f04f 0a03 	movne.w	sl, #3
 8011150:	e105      	b.n	801135e <__gxx_personality_v0+0x29e>
 8011152:	aa10      	add	r2, sp, #64	; 0x40
 8011154:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8011158:	9200      	str	r2, [sp, #0]
 801115a:	4633      	mov	r3, r6
 801115c:	4631      	mov	r1, r6
 801115e:	220c      	movs	r2, #12
 8011160:	4628      	mov	r0, r5
 8011162:	f7f4 ff9d 	bl	80060a0 <_Unwind_VRS_Set>
 8011166:	2602      	movs	r6, #2
 8011168:	4628      	mov	r0, r5
 801116a:	f7f5 fd03 	bl	8006b74 <_Unwind_GetLanguageSpecificData>
 801116e:	4681      	mov	r9, r0
 8011170:	2800      	cmp	r0, #0
 8011172:	d0b7      	beq.n	80110e4 <__gxx_personality_v0+0x24>
 8011174:	aa0a      	add	r2, sp, #40	; 0x28
 8011176:	4601      	mov	r1, r0
 8011178:	4628      	mov	r0, r5
 801117a:	f7ff ff66 	bl	801104a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 801117e:	4629      	mov	r1, r5
 8011180:	4680      	mov	r8, r0
 8011182:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011186:	f7ff ff2c 	bl	8010fe2 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 801118a:	210f      	movs	r1, #15
 801118c:	900c      	str	r0, [sp, #48]	; 0x30
 801118e:	4628      	mov	r0, r5
 8011190:	f7ff ff89 	bl	80110a6 <_Unwind_GetGR>
 8011194:	f020 0001 	bic.w	r0, r0, #1
 8011198:	1e47      	subs	r7, r0, #1
 801119a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801119c:	4598      	cmp	r8, r3
 801119e:	f080 813f 	bcs.w	8011420 <__gxx_personality_v0+0x360>
 80111a2:	4642      	mov	r2, r8
 80111a4:	ab06      	add	r3, sp, #24
 80111a6:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80111aa:	2000      	movs	r0, #0
 80111ac:	f7ff ff3d 	bl	801102a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 80111b0:	ab07      	add	r3, sp, #28
 80111b2:	4602      	mov	r2, r0
 80111b4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80111b8:	2000      	movs	r0, #0
 80111ba:	f7ff ff36 	bl	801102a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 80111be:	ab08      	add	r3, sp, #32
 80111c0:	4602      	mov	r2, r0
 80111c2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80111c6:	2000      	movs	r0, #0
 80111c8:	f7ff ff2f 	bl	801102a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 80111cc:	a909      	add	r1, sp, #36	; 0x24
 80111ce:	f7ff fe9b 	bl	8010f08 <read_uleb128(unsigned char const*, unsigned long*)>
 80111d2:	9b06      	ldr	r3, [sp, #24]
 80111d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111d6:	4680      	mov	r8, r0
 80111d8:	4413      	add	r3, r2
 80111da:	429f      	cmp	r7, r3
 80111dc:	d202      	bcs.n	80111e4 <__gxx_personality_v0+0x124>
 80111de:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80111e2:	e7da      	b.n	801119a <__gxx_personality_v0+0xda>
 80111e4:	9a07      	ldr	r2, [sp, #28]
 80111e6:	4413      	add	r3, r2
 80111e8:	429f      	cmp	r7, r3
 80111ea:	d2d6      	bcs.n	801119a <__gxx_personality_v0+0xda>
 80111ec:	9808      	ldr	r0, [sp, #32]
 80111ee:	b118      	cbz	r0, 80111f8 <__gxx_personality_v0+0x138>
 80111f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111f2:	eb00 0803 	add.w	r8, r0, r3
 80111f6:	e000      	b.n	80111fa <__gxx_personality_v0+0x13a>
 80111f8:	4680      	mov	r8, r0
 80111fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111fc:	b110      	cbz	r0, 8011204 <__gxx_personality_v0+0x144>
 80111fe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011200:	3801      	subs	r0, #1
 8011202:	4438      	add	r0, r7
 8011204:	f1b8 0f00 	cmp.w	r8, #0
 8011208:	f43f af6c 	beq.w	80110e4 <__gxx_personality_v0+0x24>
 801120c:	2800      	cmp	r0, #0
 801120e:	f000 810c 	beq.w	801142a <__gxx_personality_v0+0x36a>
 8011212:	f016 0308 	ands.w	r3, r6, #8
 8011216:	9302      	str	r3, [sp, #8]
 8011218:	d014      	beq.n	8011244 <__gxx_personality_v0+0x184>
 801121a:	2347      	movs	r3, #71	; 0x47
 801121c:	7023      	strb	r3, [r4, #0]
 801121e:	234e      	movs	r3, #78	; 0x4e
 8011220:	7063      	strb	r3, [r4, #1]
 8011222:	2355      	movs	r3, #85	; 0x55
 8011224:	70a3      	strb	r3, [r4, #2]
 8011226:	2343      	movs	r3, #67	; 0x43
 8011228:	70e3      	strb	r3, [r4, #3]
 801122a:	2346      	movs	r3, #70	; 0x46
 801122c:	7123      	strb	r3, [r4, #4]
 801122e:	234f      	movs	r3, #79	; 0x4f
 8011230:	7163      	strb	r3, [r4, #5]
 8011232:	2352      	movs	r3, #82	; 0x52
 8011234:	71a3      	strb	r3, [r4, #6]
 8011236:	2300      	movs	r3, #0
 8011238:	71e3      	strb	r3, [r4, #7]
 801123a:	f04f 0a00 	mov.w	sl, #0
 801123e:	f06f 0b03 	mvn.w	fp, #3
 8011242:	e01b      	b.n	801127c <__gxx_personality_v0+0x1bc>
 8011244:	79e3      	ldrb	r3, [r4, #7]
 8011246:	2b01      	cmp	r3, #1
 8011248:	bf0c      	ite	eq
 801124a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 801124e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8011252:	9304      	str	r3, [sp, #16]
 8011254:	e7f1      	b.n	801123a <__gxx_personality_v0+0x17a>
 8011256:	2704      	movs	r7, #4
 8011258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801125a:	ab09      	add	r3, sp, #36	; 0x24
 801125c:	fb07 2211 	mls	r2, r7, r1, r2
 8011260:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011262:	f7ff fe7a 	bl	8010f5a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8011266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011268:	2900      	cmp	r1, #0
 801126a:	f000 80d5 	beq.w	8011418 <__gxx_personality_v0+0x358>
 801126e:	bb6c      	cbnz	r4, 80112cc <__gxx_personality_v0+0x20c>
 8011270:	9f08      	ldr	r7, [sp, #32]
 8011272:	2f00      	cmp	r7, #0
 8011274:	d059      	beq.n	801132a <__gxx_personality_v0+0x26a>
 8011276:	9b03      	ldr	r3, [sp, #12]
 8011278:	443b      	add	r3, r7
 801127a:	4618      	mov	r0, r3
 801127c:	a907      	add	r1, sp, #28
 801127e:	f7ff fe54 	bl	8010f2a <read_sleb128(unsigned char const*, long*)>
 8011282:	a908      	add	r1, sp, #32
 8011284:	9003      	str	r0, [sp, #12]
 8011286:	f7ff fe50 	bl	8010f2a <read_sleb128(unsigned char const*, long*)>
 801128a:	9907      	ldr	r1, [sp, #28]
 801128c:	2900      	cmp	r1, #0
 801128e:	d049      	beq.n	8011324 <__gxx_personality_v0+0x264>
 8011290:	dd25      	ble.n	80112de <__gxx_personality_v0+0x21e>
 8011292:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011296:	28ff      	cmp	r0, #255	; 0xff
 8011298:	d014      	beq.n	80112c4 <__gxx_personality_v0+0x204>
 801129a:	f000 0307 	and.w	r3, r0, #7
 801129e:	2b04      	cmp	r3, #4
 80112a0:	d80e      	bhi.n	80112c0 <__gxx_personality_v0+0x200>
 80112a2:	a201      	add	r2, pc, #4	; (adr r2, 80112a8 <__gxx_personality_v0+0x1e8>)
 80112a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a8:	08011257 	.word	0x08011257
 80112ac:	080112c1 	.word	0x080112c1
 80112b0:	080112c9 	.word	0x080112c9
 80112b4:	08011257 	.word	0x08011257
 80112b8:	080112bd 	.word	0x080112bd
 80112bc:	2708      	movs	r7, #8
 80112be:	e7cb      	b.n	8011258 <__gxx_personality_v0+0x198>
 80112c0:	f002 f82c 	bl	801331c <abort>
 80112c4:	2700      	movs	r7, #0
 80112c6:	e7c7      	b.n	8011258 <__gxx_personality_v0+0x198>
 80112c8:	2702      	movs	r7, #2
 80112ca:	e7c5      	b.n	8011258 <__gxx_personality_v0+0x198>
 80112cc:	ab04      	add	r3, sp, #16
 80112ce:	2200      	movs	r2, #0
 80112d0:	4620      	mov	r0, r4
 80112d2:	f000 f94d 	bl	8011570 <__cxa_type_match>
 80112d6:	2800      	cmp	r0, #0
 80112d8:	f040 809e 	bne.w	8011418 <__gxx_personality_v0+0x358>
 80112dc:	e7c8      	b.n	8011270 <__gxx_personality_v0+0x1b0>
 80112de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80112e0:	1c4a      	adds	r2, r1, #1
 80112e2:	b1b4      	cbz	r4, 8011312 <__gxx_personality_v0+0x252>
 80112e4:	9b02      	ldr	r3, [sp, #8]
 80112e6:	b9a3      	cbnz	r3, 8011312 <__gxx_personality_v0+0x252>
 80112e8:	fb0b 7202 	mla	r2, fp, r2, r7
 80112ec:	9b04      	ldr	r3, [sp, #16]
 80112ee:	1f17      	subs	r7, r2, #4
 80112f0:	9306      	str	r3, [sp, #24]
 80112f2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80112f6:	b141      	cbz	r1, 801130a <__gxx_personality_v0+0x24a>
 80112f8:	ab06      	add	r3, sp, #24
 80112fa:	2200      	movs	r2, #0
 80112fc:	4439      	add	r1, r7
 80112fe:	4620      	mov	r0, r4
 8011300:	f000 f936 	bl	8011570 <__cxa_type_match>
 8011304:	2800      	cmp	r0, #0
 8011306:	d0f4      	beq.n	80112f2 <__gxx_personality_v0+0x232>
 8011308:	2101      	movs	r1, #1
 801130a:	f081 0101 	eor.w	r1, r1, #1
 801130e:	b2c9      	uxtb	r1, r1
 8011310:	e005      	b.n	801131e <__gxx_personality_v0+0x25e>
 8011312:	fb0b f202 	mul.w	r2, fp, r2
 8011316:	58b9      	ldr	r1, [r7, r2]
 8011318:	fab1 f181 	clz	r1, r1
 801131c:	0949      	lsrs	r1, r1, #5
 801131e:	2900      	cmp	r1, #0
 8011320:	d0a6      	beq.n	8011270 <__gxx_personality_v0+0x1b0>
 8011322:	e079      	b.n	8011418 <__gxx_personality_v0+0x358>
 8011324:	f04f 0a01 	mov.w	sl, #1
 8011328:	e7a2      	b.n	8011270 <__gxx_personality_v0+0x1b0>
 801132a:	f1ba 0f00 	cmp.w	sl, #0
 801132e:	f43f aed9 	beq.w	80110e4 <__gxx_personality_v0+0x24>
 8011332:	f04f 0a02 	mov.w	sl, #2
 8011336:	07f3      	lsls	r3, r6, #31
 8011338:	d511      	bpl.n	801135e <__gxx_personality_v0+0x29e>
 801133a:	f1ba 0f02 	cmp.w	sl, #2
 801133e:	f43f aed1 	beq.w	80110e4 <__gxx_personality_v0+0x24>
 8011342:	210d      	movs	r1, #13
 8011344:	4628      	mov	r0, r5
 8011346:	9e04      	ldr	r6, [sp, #16]
 8011348:	f7ff fead 	bl	80110a6 <_Unwind_GetGR>
 801134c:	6266      	str	r6, [r4, #36]	; 0x24
 801134e:	6220      	str	r0, [r4, #32]
 8011350:	62a7      	str	r7, [r4, #40]	; 0x28
 8011352:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8011356:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 801135a:	2006      	movs	r0, #6
 801135c:	e069      	b.n	8011432 <__gxx_personality_v0+0x372>
 801135e:	f016 0608 	ands.w	r6, r6, #8
 8011362:	d008      	beq.n	8011376 <__gxx_personality_v0+0x2b6>
 8011364:	f1ba 0f01 	cmp.w	sl, #1
 8011368:	d101      	bne.n	801136e <__gxx_personality_v0+0x2ae>
 801136a:	f000 f893 	bl	8011494 <std::terminate()>
 801136e:	2f00      	cmp	r7, #0
 8011370:	da24      	bge.n	80113bc <__gxx_personality_v0+0x2fc>
 8011372:	f000 f8b1 	bl	80114d8 <std::unexpected()>
 8011376:	f1ba 0f01 	cmp.w	sl, #1
 801137a:	d102      	bne.n	8011382 <__gxx_personality_v0+0x2c2>
 801137c:	4620      	mov	r0, r4
 801137e:	f000 fa2a 	bl	80117d6 <__cxa_call_terminate>
 8011382:	2f00      	cmp	r7, #0
 8011384:	da1a      	bge.n	80113bc <__gxx_personality_v0+0x2fc>
 8011386:	aa0a      	add	r2, sp, #40	; 0x28
 8011388:	4649      	mov	r1, r9
 801138a:	4628      	mov	r0, r5
 801138c:	f7ff fe5d 	bl	801104a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 8011390:	4629      	mov	r1, r5
 8011392:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011396:	f7ff fe24 	bl	8010fe2 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 801139a:	f06f 0303 	mvn.w	r3, #3
 801139e:	fb07 3303 	mla	r3, r7, r3, r3
 80113a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80113a4:	900c      	str	r0, [sp, #48]	; 0x30
 80113a6:	4413      	add	r3, r2
 80113a8:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80113ac:	b10a      	cbz	r2, 80113b2 <__gxx_personality_v0+0x2f2>
 80113ae:	3601      	adds	r6, #1
 80113b0:	e7fa      	b.n	80113a8 <__gxx_personality_v0+0x2e8>
 80113b2:	2204      	movs	r2, #4
 80113b4:	62a6      	str	r6, [r4, #40]	; 0x28
 80113b6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80113b8:	6322      	str	r2, [r4, #48]	; 0x30
 80113ba:	6363      	str	r3, [r4, #52]	; 0x34
 80113bc:	ab10      	add	r3, sp, #64	; 0x40
 80113be:	f843 4d1c 	str.w	r4, [r3, #-28]!
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	2300      	movs	r3, #0
 80113c6:	461a      	mov	r2, r3
 80113c8:	4619      	mov	r1, r3
 80113ca:	4628      	mov	r0, r5
 80113cc:	f7f4 fe68 	bl	80060a0 <_Unwind_VRS_Set>
 80113d0:	ab10      	add	r3, sp, #64	; 0x40
 80113d2:	f843 7d20 	str.w	r7, [r3, #-32]!
 80113d6:	9300      	str	r3, [sp, #0]
 80113d8:	2300      	movs	r3, #0
 80113da:	4619      	mov	r1, r3
 80113dc:	2201      	movs	r2, #1
 80113de:	4628      	mov	r0, r5
 80113e0:	f7f4 fe5e 	bl	80060a0 <_Unwind_VRS_Set>
 80113e4:	210f      	movs	r1, #15
 80113e6:	4628      	mov	r0, r5
 80113e8:	f7ff fe5d 	bl	80110a6 <_Unwind_GetGR>
 80113ec:	f000 0001 	and.w	r0, r0, #1
 80113f0:	ab10      	add	r3, sp, #64	; 0x40
 80113f2:	ea40 0008 	orr.w	r0, r0, r8
 80113f6:	f843 0d24 	str.w	r0, [r3, #-36]!
 80113fa:	9300      	str	r3, [sp, #0]
 80113fc:	2300      	movs	r3, #0
 80113fe:	220f      	movs	r2, #15
 8011400:	4619      	mov	r1, r3
 8011402:	4628      	mov	r0, r5
 8011404:	f7f4 fe4c 	bl	80060a0 <_Unwind_VRS_Set>
 8011408:	f1ba 0f02 	cmp.w	sl, #2
 801140c:	d102      	bne.n	8011414 <__gxx_personality_v0+0x354>
 801140e:	4620      	mov	r0, r4
 8011410:	f000 f90a 	bl	8011628 <__cxa_begin_cleanup>
 8011414:	2007      	movs	r0, #7
 8011416:	e00c      	b.n	8011432 <__gxx_personality_v0+0x372>
 8011418:	9f07      	ldr	r7, [sp, #28]
 801141a:	f04f 0a03 	mov.w	sl, #3
 801141e:	e78a      	b.n	8011336 <__gxx_personality_v0+0x276>
 8011420:	f04f 0800 	mov.w	r8, #0
 8011424:	f04f 0a01 	mov.w	sl, #1
 8011428:	e001      	b.n	801142e <__gxx_personality_v0+0x36e>
 801142a:	f04f 0a02 	mov.w	sl, #2
 801142e:	2700      	movs	r7, #0
 8011430:	e781      	b.n	8011336 <__gxx_personality_v0+0x276>
 8011432:	b011      	add	sp, #68	; 0x44
 8011434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011438 <operator new(unsigned int)>:
 8011438:	b510      	push	{r4, lr}
 801143a:	2800      	cmp	r0, #0
 801143c:	bf14      	ite	ne
 801143e:	4604      	movne	r4, r0
 8011440:	2401      	moveq	r4, #1
 8011442:	4620      	mov	r0, r4
 8011444:	f002 f80e 	bl	8013464 <malloc>
 8011448:	b930      	cbnz	r0, 8011458 <operator new(unsigned int)+0x20>
 801144a:	f000 f9f7 	bl	801183c <std::get_new_handler()>
 801144e:	b908      	cbnz	r0, 8011454 <operator new(unsigned int)+0x1c>
 8011450:	f001 ff64 	bl	801331c <abort>
 8011454:	4780      	blx	r0
 8011456:	e7f4      	b.n	8011442 <operator new(unsigned int)+0xa>
 8011458:	bd10      	pop	{r4, pc}

0801145a <__cxxabiv1::__terminate(void (*)())>:
 801145a:	b508      	push	{r3, lr}
 801145c:	4780      	blx	r0
 801145e:	f001 ff5d 	bl	801331c <abort>
	...

08011464 <std::set_terminate(void (*)())>:
 8011464:	4602      	mov	r2, r0
 8011466:	f3bf 8f5f 	dmb	sy
 801146a:	4b05      	ldr	r3, [pc, #20]	; (8011480 <std::set_terminate(void (*)())+0x1c>)
 801146c:	e853 0f00 	ldrex	r0, [r3]
 8011470:	e843 2100 	strex	r1, r2, [r3]
 8011474:	2900      	cmp	r1, #0
 8011476:	d1f9      	bne.n	801146c <std::set_terminate(void (*)())+0x8>
 8011478:	f3bf 8f5f 	dmb	sy
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop
 8011480:	2000002c 	.word	0x2000002c

08011484 <std::get_terminate()>:
 8011484:	4b02      	ldr	r3, [pc, #8]	; (8011490 <std::get_terminate()+0xc>)
 8011486:	6818      	ldr	r0, [r3, #0]
 8011488:	f3bf 8f5f 	dmb	sy
 801148c:	4770      	bx	lr
 801148e:	bf00      	nop
 8011490:	2000002c 	.word	0x2000002c

08011494 <std::terminate()>:
 8011494:	b508      	push	{r3, lr}
 8011496:	f7ff fff5 	bl	8011484 <std::get_terminate()>
 801149a:	f7ff ffde 	bl	801145a <__cxxabiv1::__terminate(void (*)())>

0801149e <__cxxabiv1::__unexpected(void (*)())>:
 801149e:	b508      	push	{r3, lr}
 80114a0:	4780      	blx	r0
 80114a2:	f7ff fff7 	bl	8011494 <std::terminate()>
	...

080114a8 <std::set_unexpected(void (*)())>:
 80114a8:	4602      	mov	r2, r0
 80114aa:	f3bf 8f5f 	dmb	sy
 80114ae:	4b05      	ldr	r3, [pc, #20]	; (80114c4 <std::set_unexpected(void (*)())+0x1c>)
 80114b0:	e853 0f00 	ldrex	r0, [r3]
 80114b4:	e843 2100 	strex	r1, r2, [r3]
 80114b8:	2900      	cmp	r1, #0
 80114ba:	d1f9      	bne.n	80114b0 <std::set_unexpected(void (*)())+0x8>
 80114bc:	f3bf 8f5f 	dmb	sy
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	20000030 	.word	0x20000030

080114c8 <std::get_unexpected()>:
 80114c8:	4b02      	ldr	r3, [pc, #8]	; (80114d4 <std::get_unexpected()+0xc>)
 80114ca:	6818      	ldr	r0, [r3, #0]
 80114cc:	f3bf 8f5f 	dmb	sy
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	20000030 	.word	0x20000030

080114d8 <std::unexpected()>:
 80114d8:	b508      	push	{r3, lr}
 80114da:	f7ff fff5 	bl	80114c8 <std::get_unexpected()>
 80114de:	f7ff ffde 	bl	801149e <__cxxabiv1::__unexpected(void (*)())>

080114e2 <std::type_info::~type_info()>:
 80114e2:	4770      	bx	lr

080114e4 <std::type_info::__is_pointer_p() const>:
 80114e4:	2000      	movs	r0, #0
 80114e6:	4770      	bx	lr

080114e8 <std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 80114e8:	2000      	movs	r0, #0
 80114ea:	4770      	bx	lr

080114ec <std::type_info::~type_info()>:
 80114ec:	b510      	push	{r4, lr}
 80114ee:	4604      	mov	r4, r0
 80114f0:	f7ff fc86 	bl	8010e00 <operator delete(void*)>
 80114f4:	4620      	mov	r0, r4
 80114f6:	bd10      	pop	{r4, pc}

080114f8 <std::type_info::operator==(std::type_info const&) const>:
 80114f8:	4281      	cmp	r1, r0
 80114fa:	b508      	push	{r3, lr}
 80114fc:	d00e      	beq.n	801151c <std::type_info::operator==(std::type_info const&) const+0x24>
 80114fe:	6840      	ldr	r0, [r0, #4]
 8011500:	7803      	ldrb	r3, [r0, #0]
 8011502:	2b2a      	cmp	r3, #42	; 0x2a
 8011504:	d00c      	beq.n	8011520 <std::type_info::operator==(std::type_info const&) const+0x28>
 8011506:	6849      	ldr	r1, [r1, #4]
 8011508:	780b      	ldrb	r3, [r1, #0]
 801150a:	2b2a      	cmp	r3, #42	; 0x2a
 801150c:	bf08      	it	eq
 801150e:	3101      	addeq	r1, #1
 8011510:	f7fd fc9a 	bl	800ee48 <strcmp>
 8011514:	fab0 f080 	clz	r0, r0
 8011518:	0940      	lsrs	r0, r0, #5
 801151a:	bd08      	pop	{r3, pc}
 801151c:	2001      	movs	r0, #1
 801151e:	bd08      	pop	{r3, pc}
 8011520:	2000      	movs	r0, #0
 8011522:	bd08      	pop	{r3, pc}

08011524 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 8011524:	f7ff bfe8 	b.w	80114f8 <std::type_info::operator==(std::type_info const&) const>

08011528 <__cxa_end_cleanup>:
 8011528:	b41e      	push	{r1, r2, r3, r4}
 801152a:	f000 f89a 	bl	8011662 <__gnu_end_cleanup>
 801152e:	bc1e      	pop	{r1, r2, r3, r4}
 8011530:	f7f5 f940 	bl	80067b4 <_Unwind_Resume>

08011534 <__cxxabiv1::__is_gxx_exception_class(char*)>:
 8011534:	7803      	ldrb	r3, [r0, #0]
 8011536:	2b47      	cmp	r3, #71	; 0x47
 8011538:	d117      	bne.n	801156a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801153a:	7843      	ldrb	r3, [r0, #1]
 801153c:	2b4e      	cmp	r3, #78	; 0x4e
 801153e:	d114      	bne.n	801156a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011540:	7883      	ldrb	r3, [r0, #2]
 8011542:	2b55      	cmp	r3, #85	; 0x55
 8011544:	d111      	bne.n	801156a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011546:	78c3      	ldrb	r3, [r0, #3]
 8011548:	2b43      	cmp	r3, #67	; 0x43
 801154a:	d10e      	bne.n	801156a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801154c:	7903      	ldrb	r3, [r0, #4]
 801154e:	2b43      	cmp	r3, #67	; 0x43
 8011550:	d10b      	bne.n	801156a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011552:	7943      	ldrb	r3, [r0, #5]
 8011554:	2b2b      	cmp	r3, #43	; 0x2b
 8011556:	d108      	bne.n	801156a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011558:	7983      	ldrb	r3, [r0, #6]
 801155a:	2b2b      	cmp	r3, #43	; 0x2b
 801155c:	d105      	bne.n	801156a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801155e:	79c0      	ldrb	r0, [r0, #7]
 8011560:	2801      	cmp	r0, #1
 8011562:	bf8c      	ite	hi
 8011564:	2000      	movhi	r0, #0
 8011566:	2001      	movls	r0, #1
 8011568:	4770      	bx	lr
 801156a:	2000      	movs	r0, #0
 801156c:	4770      	bx	lr
	...

08011570 <__cxa_type_match>:
 8011570:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011574:	461d      	mov	r5, r3
 8011576:	7803      	ldrb	r3, [r0, #0]
 8011578:	460e      	mov	r6, r1
 801157a:	2b47      	cmp	r3, #71	; 0x47
 801157c:	4602      	mov	r2, r0
 801157e:	79c1      	ldrb	r1, [r0, #7]
 8011580:	d143      	bne.n	801160a <__cxa_type_match+0x9a>
 8011582:	7843      	ldrb	r3, [r0, #1]
 8011584:	2b4e      	cmp	r3, #78	; 0x4e
 8011586:	d140      	bne.n	801160a <__cxa_type_match+0x9a>
 8011588:	7883      	ldrb	r3, [r0, #2]
 801158a:	2b55      	cmp	r3, #85	; 0x55
 801158c:	d13d      	bne.n	801160a <__cxa_type_match+0x9a>
 801158e:	78c3      	ldrb	r3, [r0, #3]
 8011590:	2b43      	cmp	r3, #67	; 0x43
 8011592:	d13a      	bne.n	801160a <__cxa_type_match+0x9a>
 8011594:	7903      	ldrb	r3, [r0, #4]
 8011596:	2b46      	cmp	r3, #70	; 0x46
 8011598:	d137      	bne.n	801160a <__cxa_type_match+0x9a>
 801159a:	7943      	ldrb	r3, [r0, #5]
 801159c:	2b4f      	cmp	r3, #79	; 0x4f
 801159e:	d134      	bne.n	801160a <__cxa_type_match+0x9a>
 80115a0:	7983      	ldrb	r3, [r0, #6]
 80115a2:	2b52      	cmp	r3, #82	; 0x52
 80115a4:	d131      	bne.n	801160a <__cxa_type_match+0x9a>
 80115a6:	2900      	cmp	r1, #0
 80115a8:	d12f      	bne.n	801160a <__cxa_type_match+0x9a>
 80115aa:	4608      	mov	r0, r1
 80115ac:	2301      	movs	r3, #1
 80115ae:	2400      	movs	r4, #0
 80115b0:	9401      	str	r4, [sp, #4]
 80115b2:	b97b      	cbnz	r3, 80115d4 <__cxa_type_match+0x64>
 80115b4:	b980      	cbnz	r0, 80115d8 <__cxa_type_match+0x68>
 80115b6:	2901      	cmp	r1, #1
 80115b8:	bf0a      	itet	eq
 80115ba:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 80115be:	f1a2 0320 	subne.w	r3, r2, #32
 80115c2:	3b78      	subeq	r3, #120	; 0x78
 80115c4:	2901      	cmp	r1, #1
 80115c6:	bf0c      	ite	eq
 80115c8:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80115cc:	3258      	addne	r2, #88	; 0x58
 80115ce:	681c      	ldr	r4, [r3, #0]
 80115d0:	9201      	str	r2, [sp, #4]
 80115d2:	e002      	b.n	80115da <__cxa_type_match+0x6a>
 80115d4:	4c12      	ldr	r4, [pc, #72]	; (8011620 <__cxa_type_match+0xb0>)
 80115d6:	e000      	b.n	80115da <__cxa_type_match+0x6a>
 80115d8:	4c12      	ldr	r4, [pc, #72]	; (8011624 <__cxa_type_match+0xb4>)
 80115da:	6823      	ldr	r3, [r4, #0]
 80115dc:	4620      	mov	r0, r4
 80115de:	689b      	ldr	r3, [r3, #8]
 80115e0:	4798      	blx	r3
 80115e2:	b120      	cbz	r0, 80115ee <__cxa_type_match+0x7e>
 80115e4:	9b01      	ldr	r3, [sp, #4]
 80115e6:	2702      	movs	r7, #2
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	9301      	str	r3, [sp, #4]
 80115ec:	e000      	b.n	80115f0 <__cxa_type_match+0x80>
 80115ee:	2701      	movs	r7, #1
 80115f0:	6833      	ldr	r3, [r6, #0]
 80115f2:	aa01      	add	r2, sp, #4
 80115f4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80115f8:	4621      	mov	r1, r4
 80115fa:	2301      	movs	r3, #1
 80115fc:	4630      	mov	r0, r6
 80115fe:	47c0      	blx	r8
 8011600:	b158      	cbz	r0, 801161a <__cxa_type_match+0xaa>
 8011602:	9b01      	ldr	r3, [sp, #4]
 8011604:	4638      	mov	r0, r7
 8011606:	602b      	str	r3, [r5, #0]
 8011608:	e007      	b.n	801161a <__cxa_type_match+0xaa>
 801160a:	4610      	mov	r0, r2
 801160c:	f7ff ff92 	bl	8011534 <__cxxabiv1::__is_gxx_exception_class(char*)>
 8011610:	f080 0001 	eor.w	r0, r0, #1
 8011614:	b2c0      	uxtb	r0, r0
 8011616:	2300      	movs	r3, #0
 8011618:	e7c9      	b.n	80115ae <__cxa_type_match+0x3e>
 801161a:	b002      	add	sp, #8
 801161c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011620:	08015e0c 	.word	0x08015e0c
 8011624:	08015e64 	.word	0x08015e64

08011628 <__cxa_begin_cleanup>:
 8011628:	b510      	push	{r4, lr}
 801162a:	4604      	mov	r4, r0
 801162c:	f000 f988 	bl	8011940 <__cxa_get_globals>
 8011630:	4602      	mov	r2, r0
 8011632:	4620      	mov	r0, r4
 8011634:	f1a4 0120 	sub.w	r1, r4, #32
 8011638:	f7ff ff7c 	bl	8011534 <__cxxabiv1::__is_gxx_exception_class(char*)>
 801163c:	b150      	cbz	r0, 8011654 <__cxa_begin_cleanup+0x2c>
 801163e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011642:	3301      	adds	r3, #1
 8011644:	2b01      	cmp	r3, #1
 8011646:	f844 3c04 	str.w	r3, [r4, #-4]
 801164a:	d108      	bne.n	801165e <__cxa_begin_cleanup+0x36>
 801164c:	6893      	ldr	r3, [r2, #8]
 801164e:	f844 3c08 	str.w	r3, [r4, #-8]
 8011652:	e003      	b.n	801165c <__cxa_begin_cleanup+0x34>
 8011654:	6893      	ldr	r3, [r2, #8]
 8011656:	b10b      	cbz	r3, 801165c <__cxa_begin_cleanup+0x34>
 8011658:	f7ff ff1c 	bl	8011494 <std::terminate()>
 801165c:	6091      	str	r1, [r2, #8]
 801165e:	2001      	movs	r0, #1
 8011660:	bd10      	pop	{r4, pc}

08011662 <__gnu_end_cleanup>:
 8011662:	b510      	push	{r4, lr}
 8011664:	f000 f96c 	bl	8011940 <__cxa_get_globals>
 8011668:	6882      	ldr	r2, [r0, #8]
 801166a:	4601      	mov	r1, r0
 801166c:	b90a      	cbnz	r2, 8011672 <__gnu_end_cleanup+0x10>
 801166e:	f7ff ff11 	bl	8011494 <std::terminate()>
 8011672:	f102 0420 	add.w	r4, r2, #32
 8011676:	4620      	mov	r0, r4
 8011678:	f7ff ff5c 	bl	8011534 <__cxxabiv1::__is_gxx_exception_class(char*)>
 801167c:	b138      	cbz	r0, 801168e <__gnu_end_cleanup+0x2c>
 801167e:	69d3      	ldr	r3, [r2, #28]
 8011680:	3b01      	subs	r3, #1
 8011682:	61d3      	str	r3, [r2, #28]
 8011684:	b923      	cbnz	r3, 8011690 <__gnu_end_cleanup+0x2e>
 8011686:	6990      	ldr	r0, [r2, #24]
 8011688:	6088      	str	r0, [r1, #8]
 801168a:	6193      	str	r3, [r2, #24]
 801168c:	e000      	b.n	8011690 <__gnu_end_cleanup+0x2e>
 801168e:	6088      	str	r0, [r1, #8]
 8011690:	4620      	mov	r0, r4
 8011692:	bd10      	pop	{r4, pc}

08011694 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8011694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011696:	2310      	movs	r3, #16
 8011698:	9302      	str	r3, [sp, #8]
 801169a:	6803      	ldr	r3, [r0, #0]
 801169c:	2400      	movs	r4, #0
 801169e:	4615      	mov	r5, r2
 80116a0:	699e      	ldr	r6, [r3, #24]
 80116a2:	9400      	str	r4, [sp, #0]
 80116a4:	466b      	mov	r3, sp
 80116a6:	f88d 4004 	strb.w	r4, [sp, #4]
 80116aa:	9403      	str	r4, [sp, #12]
 80116ac:	6812      	ldr	r2, [r2, #0]
 80116ae:	47b0      	blx	r6
 80116b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116b4:	f003 0306 	and.w	r3, r3, #6
 80116b8:	2b06      	cmp	r3, #6
 80116ba:	bf11      	iteee	ne
 80116bc:	4620      	movne	r0, r4
 80116be:	9b00      	ldreq	r3, [sp, #0]
 80116c0:	2001      	moveq	r0, #1
 80116c2:	602b      	streq	r3, [r5, #0]
 80116c4:	b004      	add	sp, #16
 80116c6:	bd70      	pop	{r4, r5, r6, pc}

080116c8 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 80116c8:	9800      	ldr	r0, [sp, #0]
 80116ca:	4290      	cmp	r0, r2
 80116cc:	bf0c      	ite	eq
 80116ce:	2006      	moveq	r0, #6
 80116d0:	2001      	movne	r0, #1
 80116d2:	4770      	bx	lr

080116d4 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 80116d4:	b510      	push	{r4, lr}
 80116d6:	4604      	mov	r4, r0
 80116d8:	4b02      	ldr	r3, [pc, #8]	; (80116e4 <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
 80116da:	6003      	str	r3, [r0, #0]
 80116dc:	f7ff ff01 	bl	80114e2 <std::type_info::~type_info()>
 80116e0:	4620      	mov	r0, r4
 80116e2:	bd10      	pop	{r4, pc}
 80116e4:	08015d34 	.word	0x08015d34

080116e8 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 80116e8:	b510      	push	{r4, lr}
 80116ea:	4604      	mov	r4, r0
 80116ec:	f7ff fff2 	bl	80116d4 <__cxxabiv1::__class_type_info::~__class_type_info()>
 80116f0:	4620      	mov	r0, r4
 80116f2:	f7ff fb85 	bl	8010e00 <operator delete(void*)>
 80116f6:	4620      	mov	r0, r4
 80116f8:	bd10      	pop	{r4, pc}

080116fa <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 80116fa:	b538      	push	{r3, r4, r5, lr}
 80116fc:	4615      	mov	r5, r2
 80116fe:	461c      	mov	r4, r3
 8011700:	f7ff fefa 	bl	80114f8 <std::type_info::operator==(std::type_info const&) const>
 8011704:	b120      	cbz	r0, 8011710 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x16>
 8011706:	2308      	movs	r3, #8
 8011708:	60e3      	str	r3, [r4, #12]
 801170a:	2306      	movs	r3, #6
 801170c:	6025      	str	r5, [r4, #0]
 801170e:	7123      	strb	r3, [r4, #4]
 8011710:	bd38      	pop	{r3, r4, r5, pc}

08011712 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8011712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011716:	9e06      	ldr	r6, [sp, #24]
 8011718:	4698      	mov	r8, r3
 801171a:	9b08      	ldr	r3, [sp, #32]
 801171c:	4607      	mov	r7, r0
 801171e:	429e      	cmp	r6, r3
 8011720:	4615      	mov	r5, r2
 8011722:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011724:	d103      	bne.n	801172e <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x1c>
 8011726:	9907      	ldr	r1, [sp, #28]
 8011728:	f7ff fee6 	bl	80114f8 <std::type_info::operator==(std::type_info const&) const>
 801172c:	b948      	cbnz	r0, 8011742 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x30>
 801172e:	4641      	mov	r1, r8
 8011730:	4638      	mov	r0, r7
 8011732:	f7ff fee1 	bl	80114f8 <std::type_info::operator==(std::type_info const&) const>
 8011736:	b128      	cbz	r0, 8011744 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8011738:	2301      	movs	r3, #1
 801173a:	6026      	str	r6, [r4, #0]
 801173c:	7125      	strb	r5, [r4, #4]
 801173e:	71a3      	strb	r3, [r4, #6]
 8011740:	e000      	b.n	8011744 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8011742:	7165      	strb	r5, [r4, #5]
 8011744:	2000      	movs	r0, #0
 8011746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801174a <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 801174a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801174e:	4605      	mov	r5, r0
 8011750:	460c      	mov	r4, r1
 8011752:	4616      	mov	r6, r2
 8011754:	461f      	mov	r7, r3
 8011756:	f7ff fecf 	bl	80114f8 <std::type_info::operator==(std::type_info const&) const>
 801175a:	b948      	cbnz	r0, 8011770 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 801175c:	2f03      	cmp	r7, #3
 801175e:	d807      	bhi.n	8011770 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 8011760:	6823      	ldr	r3, [r4, #0]
 8011762:	4632      	mov	r2, r6
 8011764:	4629      	mov	r1, r5
 8011766:	4620      	mov	r0, r4
 8011768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801176c:	695b      	ldr	r3, [r3, #20]
 801176e:	4718      	bx	r3
 8011770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011774 <__cxa_pure_virtual>:
 8011774:	b508      	push	{r3, lr}
 8011776:	221b      	movs	r2, #27
 8011778:	4902      	ldr	r1, [pc, #8]	; (8011784 <__cxa_pure_virtual+0x10>)
 801177a:	2002      	movs	r0, #2
 801177c:	f002 f878 	bl	8013870 <write>
 8011780:	f7ff fe88 	bl	8011494 <std::terminate()>
 8011784:	08015d86 	.word	0x08015d86

08011788 <__cxa_deleted_virtual>:
 8011788:	b508      	push	{r3, lr}
 801178a:	221e      	movs	r2, #30
 801178c:	4902      	ldr	r1, [pc, #8]	; (8011798 <__cxa_deleted_virtual+0x10>)
 801178e:	2002      	movs	r0, #2
 8011790:	f002 f86e 	bl	8013870 <write>
 8011794:	f7ff fe7e 	bl	8011494 <std::terminate()>
 8011798:	08015da2 	.word	0x08015da2

0801179c <__cxxabiv1::__is_gxx_exception_class(char*)>:
 801179c:	7803      	ldrb	r3, [r0, #0]
 801179e:	2b47      	cmp	r3, #71	; 0x47
 80117a0:	d117      	bne.n	80117d2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 80117a2:	7843      	ldrb	r3, [r0, #1]
 80117a4:	2b4e      	cmp	r3, #78	; 0x4e
 80117a6:	d114      	bne.n	80117d2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 80117a8:	7883      	ldrb	r3, [r0, #2]
 80117aa:	2b55      	cmp	r3, #85	; 0x55
 80117ac:	d111      	bne.n	80117d2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 80117ae:	78c3      	ldrb	r3, [r0, #3]
 80117b0:	2b43      	cmp	r3, #67	; 0x43
 80117b2:	d10e      	bne.n	80117d2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 80117b4:	7903      	ldrb	r3, [r0, #4]
 80117b6:	2b43      	cmp	r3, #67	; 0x43
 80117b8:	d10b      	bne.n	80117d2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 80117ba:	7943      	ldrb	r3, [r0, #5]
 80117bc:	2b2b      	cmp	r3, #43	; 0x2b
 80117be:	d108      	bne.n	80117d2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 80117c0:	7983      	ldrb	r3, [r0, #6]
 80117c2:	2b2b      	cmp	r3, #43	; 0x2b
 80117c4:	d105      	bne.n	80117d2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 80117c6:	79c0      	ldrb	r0, [r0, #7]
 80117c8:	2801      	cmp	r0, #1
 80117ca:	bf8c      	ite	hi
 80117cc:	2000      	movhi	r0, #0
 80117ce:	2001      	movls	r0, #1
 80117d0:	4770      	bx	lr
 80117d2:	2000      	movs	r0, #0
 80117d4:	4770      	bx	lr

080117d6 <__cxa_call_terminate>:
 80117d6:	b510      	push	{r4, lr}
 80117d8:	4604      	mov	r4, r0
 80117da:	b148      	cbz	r0, 80117f0 <__cxa_call_terminate+0x1a>
 80117dc:	f000 f855 	bl	801188a <__cxa_begin_catch>
 80117e0:	4620      	mov	r0, r4
 80117e2:	f7ff ffdb 	bl	801179c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80117e6:	b118      	cbz	r0, 80117f0 <__cxa_call_terminate+0x1a>
 80117e8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80117ec:	f7ff fe35 	bl	801145a <__cxxabiv1::__terminate(void (*)())>
 80117f0:	f7ff fe50 	bl	8011494 <std::terminate()>

080117f4 <__cxa_call_unexpected>:
 80117f4:	b538      	push	{r3, r4, r5, lr}
 80117f6:	4602      	mov	r2, r0
 80117f8:	f7ff ffd0 	bl	801179c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80117fc:	b118      	cbz	r0, 8011806 <__cxa_call_unexpected+0x12>
 80117fe:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8011802:	2500      	movs	r5, #0
 8011804:	e001      	b.n	801180a <__cxa_call_unexpected+0x16>
 8011806:	4604      	mov	r4, r0
 8011808:	2501      	movs	r5, #1
 801180a:	4610      	mov	r0, r2
 801180c:	f000 f83d 	bl	801188a <__cxa_begin_catch>
 8011810:	b10d      	cbz	r5, 8011816 <__cxa_call_unexpected+0x22>
 8011812:	f7ff fe61 	bl	80114d8 <std::unexpected()>
 8011816:	4620      	mov	r0, r4
 8011818:	f7ff fe41 	bl	801149e <__cxxabiv1::__unexpected(void (*)())>

0801181c <std::set_new_handler(void (*)())>:
 801181c:	4602      	mov	r2, r0
 801181e:	f3bf 8f5f 	dmb	sy
 8011822:	4b05      	ldr	r3, [pc, #20]	; (8011838 <std::set_new_handler(void (*)())+0x1c>)
 8011824:	e853 0f00 	ldrex	r0, [r3]
 8011828:	e843 2100 	strex	r1, r2, [r3]
 801182c:	2900      	cmp	r1, #0
 801182e:	d1f9      	bne.n	8011824 <std::set_new_handler(void (*)())+0x8>
 8011830:	f3bf 8f5f 	dmb	sy
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop
 8011838:	20000ce4 	.word	0x20000ce4

0801183c <std::get_new_handler()>:
 801183c:	4b02      	ldr	r3, [pc, #8]	; (8011848 <std::get_new_handler()+0xc>)
 801183e:	6818      	ldr	r0, [r3, #0]
 8011840:	f3bf 8f5f 	dmb	sy
 8011844:	4770      	bx	lr
 8011846:	bf00      	nop
 8011848:	20000ce4 	.word	0x20000ce4

0801184c <__cxxabiv1::__is_gxx_exception_class(char*)>:
 801184c:	7803      	ldrb	r3, [r0, #0]
 801184e:	2b47      	cmp	r3, #71	; 0x47
 8011850:	d117      	bne.n	8011882 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011852:	7843      	ldrb	r3, [r0, #1]
 8011854:	2b4e      	cmp	r3, #78	; 0x4e
 8011856:	d114      	bne.n	8011882 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011858:	7883      	ldrb	r3, [r0, #2]
 801185a:	2b55      	cmp	r3, #85	; 0x55
 801185c:	d111      	bne.n	8011882 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801185e:	78c3      	ldrb	r3, [r0, #3]
 8011860:	2b43      	cmp	r3, #67	; 0x43
 8011862:	d10e      	bne.n	8011882 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011864:	7903      	ldrb	r3, [r0, #4]
 8011866:	2b43      	cmp	r3, #67	; 0x43
 8011868:	d10b      	bne.n	8011882 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801186a:	7943      	ldrb	r3, [r0, #5]
 801186c:	2b2b      	cmp	r3, #43	; 0x2b
 801186e:	d108      	bne.n	8011882 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011870:	7983      	ldrb	r3, [r0, #6]
 8011872:	2b2b      	cmp	r3, #43	; 0x2b
 8011874:	d105      	bne.n	8011882 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011876:	79c0      	ldrb	r0, [r0, #7]
 8011878:	2801      	cmp	r0, #1
 801187a:	bf8c      	ite	hi
 801187c:	2000      	movhi	r0, #0
 801187e:	2001      	movls	r0, #1
 8011880:	4770      	bx	lr
 8011882:	2000      	movs	r0, #0
 8011884:	4770      	bx	lr

08011886 <__cxa_get_exception_ptr>:
 8011886:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011888:	4770      	bx	lr

0801188a <__cxa_begin_catch>:
 801188a:	b538      	push	{r3, r4, r5, lr}
 801188c:	4605      	mov	r5, r0
 801188e:	f000 f857 	bl	8011940 <__cxa_get_globals>
 8011892:	4601      	mov	r1, r0
 8011894:	6802      	ldr	r2, [r0, #0]
 8011896:	4628      	mov	r0, r5
 8011898:	f1a5 0420 	sub.w	r4, r5, #32
 801189c:	f7ff ffd6 	bl	801184c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80118a0:	b928      	cbnz	r0, 80118ae <__cxa_begin_catch+0x24>
 80118a2:	b10a      	cbz	r2, 80118a8 <__cxa_begin_catch+0x1e>
 80118a4:	f7ff fdf6 	bl	8011494 <std::terminate()>
 80118a8:	600c      	str	r4, [r1, #0]
 80118aa:	4614      	mov	r4, r2
 80118ac:	e015      	b.n	80118da <__cxa_begin_catch+0x50>
 80118ae:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 80118b2:	4628      	mov	r0, r5
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	bfb4      	ite	lt
 80118b8:	f1c3 0301 	rsblt	r3, r3, #1
 80118bc:	3301      	addge	r3, #1
 80118be:	f845 3c0c 	str.w	r3, [r5, #-12]
 80118c2:	684b      	ldr	r3, [r1, #4]
 80118c4:	42a2      	cmp	r2, r4
 80118c6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80118ca:	604b      	str	r3, [r1, #4]
 80118cc:	bf1c      	itt	ne
 80118ce:	f845 2c10 	strne.w	r2, [r5, #-16]
 80118d2:	600c      	strne	r4, [r1, #0]
 80118d4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80118d6:	f7f4 fbb5 	bl	8006044 <_Unwind_Complete>
 80118da:	4620      	mov	r0, r4
 80118dc:	bd38      	pop	{r3, r4, r5, pc}

080118de <__cxa_end_catch>:
 80118de:	b510      	push	{r4, lr}
 80118e0:	f000 f82a 	bl	8011938 <__cxa_get_globals_fast>
 80118e4:	6802      	ldr	r2, [r0, #0]
 80118e6:	4601      	mov	r1, r0
 80118e8:	b1ea      	cbz	r2, 8011926 <__cxa_end_catch+0x48>
 80118ea:	f102 0420 	add.w	r4, r2, #32
 80118ee:	4620      	mov	r0, r4
 80118f0:	f7ff ffac 	bl	801184c <__cxxabiv1::__is_gxx_exception_class(char*)>
 80118f4:	b908      	cbnz	r0, 80118fa <__cxa_end_catch+0x1c>
 80118f6:	6008      	str	r0, [r1, #0]
 80118f8:	e00b      	b.n	8011912 <__cxa_end_catch+0x34>
 80118fa:	6953      	ldr	r3, [r2, #20]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	da04      	bge.n	801190a <__cxa_end_catch+0x2c>
 8011900:	3301      	adds	r3, #1
 8011902:	d10f      	bne.n	8011924 <__cxa_end_catch+0x46>
 8011904:	6910      	ldr	r0, [r2, #16]
 8011906:	6008      	str	r0, [r1, #0]
 8011908:	e00c      	b.n	8011924 <__cxa_end_catch+0x46>
 801190a:	3b01      	subs	r3, #1
 801190c:	d106      	bne.n	801191c <__cxa_end_catch+0x3e>
 801190e:	6913      	ldr	r3, [r2, #16]
 8011910:	600b      	str	r3, [r1, #0]
 8011912:	4620      	mov	r0, r4
 8011914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011918:	f7f4 bb96 	b.w	8006048 <_Unwind_DeleteException>
 801191c:	1c59      	adds	r1, r3, #1
 801191e:	d101      	bne.n	8011924 <__cxa_end_catch+0x46>
 8011920:	f7ff fdb8 	bl	8011494 <std::terminate()>
 8011924:	6153      	str	r3, [r2, #20]
 8011926:	bd10      	pop	{r4, pc}

08011928 <std::uncaught_exception()>:
 8011928:	b508      	push	{r3, lr}
 801192a:	f000 f809 	bl	8011940 <__cxa_get_globals>
 801192e:	6840      	ldr	r0, [r0, #4]
 8011930:	3000      	adds	r0, #0
 8011932:	bf18      	it	ne
 8011934:	2001      	movne	r0, #1
 8011936:	bd08      	pop	{r3, pc}

08011938 <__cxa_get_globals_fast>:
 8011938:	4800      	ldr	r0, [pc, #0]	; (801193c <__cxa_get_globals_fast+0x4>)
 801193a:	4770      	bx	lr
 801193c:	20000ce8 	.word	0x20000ce8

08011940 <__cxa_get_globals>:
 8011940:	4800      	ldr	r0, [pc, #0]	; (8011944 <__cxa_get_globals+0x4>)
 8011942:	4770      	bx	lr
 8011944:	20000ce8 	.word	0x20000ce8

08011948 <std::exception::~exception()>:
 8011948:	4770      	bx	lr

0801194a <std::bad_exception::~bad_exception()>:
 801194a:	4770      	bx	lr

0801194c <std::exception::what() const>:
 801194c:	4800      	ldr	r0, [pc, #0]	; (8011950 <std::exception::what() const+0x4>)
 801194e:	4770      	bx	lr
 8011950:	08015e38 	.word	0x08015e38

08011954 <std::bad_exception::what() const>:
 8011954:	4800      	ldr	r0, [pc, #0]	; (8011958 <std::bad_exception::what() const+0x4>)
 8011956:	4770      	bx	lr
 8011958:	08015e47 	.word	0x08015e47

0801195c <std::exception::~exception()>:
 801195c:	b510      	push	{r4, lr}
 801195e:	4604      	mov	r4, r0
 8011960:	f7ff fa4e 	bl	8010e00 <operator delete(void*)>
 8011964:	4620      	mov	r0, r4
 8011966:	bd10      	pop	{r4, pc}

08011968 <std::bad_exception::~bad_exception()>:
 8011968:	b510      	push	{r4, lr}
 801196a:	4604      	mov	r4, r0
 801196c:	f7ff fa48 	bl	8010e00 <operator delete(void*)>
 8011970:	4620      	mov	r0, r4
 8011972:	bd10      	pop	{r4, pc}

08011974 <__cxxabiv1::__forced_unwind::~__forced_unwind()>:
 8011974:	4770      	bx	lr

08011976 <__cxxabiv1::__forced_unwind::~__forced_unwind()>:
 8011976:	b510      	push	{r4, lr}
 8011978:	4604      	mov	r4, r0
 801197a:	f7ff fa41 	bl	8010e00 <operator delete(void*)>
 801197e:	4620      	mov	r0, r4
 8011980:	bd10      	pop	{r4, pc}

08011982 <__cxxabiv1::__foreign_exception::~__foreign_exception()>:
 8011982:	4770      	bx	lr

08011984 <__cxxabiv1::__foreign_exception::~__foreign_exception()>:
 8011984:	b510      	push	{r4, lr}
 8011986:	4604      	mov	r4, r0
 8011988:	f7ff fa3a 	bl	8010e00 <operator delete(void*)>
 801198c:	4620      	mov	r0, r4
 801198e:	bd10      	pop	{r4, pc}

08011990 <__gnu_cxx::__verbose_terminate_handler()>:
 8011990:	4b20      	ldr	r3, [pc, #128]	; (8011a14 <__gnu_cxx::__verbose_terminate_handler()+0x84>)
 8011992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011994:	781a      	ldrb	r2, [r3, #0]
 8011996:	4d20      	ldr	r5, [pc, #128]	; (8011a18 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
 8011998:	b11a      	cbz	r2, 80119a2 <__gnu_cxx::__verbose_terminate_handler()+0x12>
 801199a:	682b      	ldr	r3, [r5, #0]
 801199c:	481f      	ldr	r0, [pc, #124]	; (8011a1c <__gnu_cxx::__verbose_terminate_handler()+0x8c>)
 801199e:	68d9      	ldr	r1, [r3, #12]
 80119a0:	e033      	b.n	8011a0a <__gnu_cxx::__verbose_terminate_handler()+0x7a>
 80119a2:	2201      	movs	r2, #1
 80119a4:	701a      	strb	r2, [r3, #0]
 80119a6:	f000 f841 	bl	8011a2c <__cxa_current_exception_type>
 80119aa:	b358      	cbz	r0, 8011a04 <__gnu_cxx::__verbose_terminate_handler()+0x74>
 80119ac:	6844      	ldr	r4, [r0, #4]
 80119ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119b2:	7823      	ldrb	r3, [r4, #0]
 80119b4:	4f18      	ldr	r7, [pc, #96]	; (8011a18 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
 80119b6:	2b2a      	cmp	r3, #42	; 0x2a
 80119b8:	ab02      	add	r3, sp, #8
 80119ba:	bf08      	it	eq
 80119bc:	3401      	addeq	r4, #1
 80119be:	f843 2d04 	str.w	r2, [r3, #-4]!
 80119c2:	2200      	movs	r2, #0
 80119c4:	4611      	mov	r1, r2
 80119c6:	4620      	mov	r0, r4
 80119c8:	f7fd f9ce 	bl	800ed68 <__cxa_demangle>
 80119cc:	682b      	ldr	r3, [r5, #0]
 80119ce:	4606      	mov	r6, r0
 80119d0:	68d9      	ldr	r1, [r3, #12]
 80119d2:	4813      	ldr	r0, [pc, #76]	; (8011a20 <__gnu_cxx::__verbose_terminate_handler()+0x90>)
 80119d4:	f001 fd18 	bl	8013408 <fputs>
 80119d8:	9b01      	ldr	r3, [sp, #4]
 80119da:	b91b      	cbnz	r3, 80119e4 <__gnu_cxx::__verbose_terminate_handler()+0x54>
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	4630      	mov	r0, r6
 80119e0:	68d9      	ldr	r1, [r3, #12]
 80119e2:	e002      	b.n	80119ea <__gnu_cxx::__verbose_terminate_handler()+0x5a>
 80119e4:	4620      	mov	r0, r4
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	68d9      	ldr	r1, [r3, #12]
 80119ea:	f001 fd0d 	bl	8013408 <fputs>
 80119ee:	682b      	ldr	r3, [r5, #0]
 80119f0:	480c      	ldr	r0, [pc, #48]	; (8011a24 <__gnu_cxx::__verbose_terminate_handler()+0x94>)
 80119f2:	68d9      	ldr	r1, [r3, #12]
 80119f4:	f001 fd08 	bl	8013408 <fputs>
 80119f8:	9b01      	ldr	r3, [sp, #4]
 80119fa:	b943      	cbnz	r3, 8011a0e <__gnu_cxx::__verbose_terminate_handler()+0x7e>
 80119fc:	4630      	mov	r0, r6
 80119fe:	f001 fd39 	bl	8013474 <free>
 8011a02:	e004      	b.n	8011a0e <__gnu_cxx::__verbose_terminate_handler()+0x7e>
 8011a04:	682b      	ldr	r3, [r5, #0]
 8011a06:	4808      	ldr	r0, [pc, #32]	; (8011a28 <__gnu_cxx::__verbose_terminate_handler()+0x98>)
 8011a08:	68d9      	ldr	r1, [r3, #12]
 8011a0a:	f001 fcfd 	bl	8013408 <fputs>
 8011a0e:	f001 fc85 	bl	801331c <abort>
 8011a12:	bf00      	nop
 8011a14:	20000cf4 	.word	0x20000cf4
 8011a18:	20000098 	.word	0x20000098
 8011a1c:	08015ec0 	.word	0x08015ec0
 8011a20:	08015ede 	.word	0x08015ede
 8011a24:	08015f0f 	.word	0x08015f0f
 8011a28:	08015f12 	.word	0x08015f12

08011a2c <__cxa_current_exception_type>:
 8011a2c:	b508      	push	{r3, lr}
 8011a2e:	f7ff ff87 	bl	8011940 <__cxa_get_globals>
 8011a32:	6800      	ldr	r0, [r0, #0]
 8011a34:	b130      	cbz	r0, 8011a44 <__cxa_current_exception_type+0x18>
 8011a36:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	bf04      	itt	eq
 8011a3e:	6800      	ldreq	r0, [r0, #0]
 8011a40:	3878      	subeq	r0, #120	; 0x78
 8011a42:	6800      	ldr	r0, [r0, #0]
 8011a44:	bd08      	pop	{r3, pc}
	...

08011a48 <atan>:
 8011a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a4c:	4bc0      	ldr	r3, [pc, #768]	; (8011d50 <atan+0x308>)
 8011a4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011a52:	429e      	cmp	r6, r3
 8011a54:	460d      	mov	r5, r1
 8011a56:	468a      	mov	sl, r1
 8011a58:	4604      	mov	r4, r0
 8011a5a:	dd0f      	ble.n	8011a7c <atan+0x34>
 8011a5c:	4bbd      	ldr	r3, [pc, #756]	; (8011d54 <atan+0x30c>)
 8011a5e:	429e      	cmp	r6, r3
 8011a60:	f300 80b2 	bgt.w	8011bc8 <atan+0x180>
 8011a64:	f000 80ad 	beq.w	8011bc2 <atan+0x17a>
 8011a68:	4bbb      	ldr	r3, [pc, #748]	; (8011d58 <atan+0x310>)
 8011a6a:	49bc      	ldr	r1, [pc, #752]	; (8011d5c <atan+0x314>)
 8011a6c:	4cbc      	ldr	r4, [pc, #752]	; (8011d60 <atan+0x318>)
 8011a6e:	f1ba 0f00 	cmp.w	sl, #0
 8011a72:	bfc8      	it	gt
 8011a74:	4619      	movgt	r1, r3
 8011a76:	4620      	mov	r0, r4
 8011a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a7c:	4bb9      	ldr	r3, [pc, #740]	; (8011d64 <atan+0x31c>)
 8011a7e:	429e      	cmp	r6, r3
 8011a80:	f300 80bc 	bgt.w	8011bfc <atan+0x1b4>
 8011a84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011a88:	429e      	cmp	r6, r3
 8011a8a:	f340 80a7 	ble.w	8011bdc <atan+0x194>
 8011a8e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011a92:	4622      	mov	r2, r4
 8011a94:	462b      	mov	r3, r5
 8011a96:	4620      	mov	r0, r4
 8011a98:	4629      	mov	r1, r5
 8011a9a:	f7f3 fadf 	bl	800505c <__aeabi_dmul>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	4680      	mov	r8, r0
 8011aa4:	4689      	mov	r9, r1
 8011aa6:	f7f3 fad9 	bl	800505c <__aeabi_dmul>
 8011aaa:	a391      	add	r3, pc, #580	; (adr r3, 8011cf0 <atan+0x2a8>)
 8011aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab0:	4606      	mov	r6, r0
 8011ab2:	460f      	mov	r7, r1
 8011ab4:	f7f3 fad2 	bl	800505c <__aeabi_dmul>
 8011ab8:	a38f      	add	r3, pc, #572	; (adr r3, 8011cf8 <atan+0x2b0>)
 8011aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abe:	f7f3 f91b 	bl	8004cf8 <__adddf3>
 8011ac2:	4632      	mov	r2, r6
 8011ac4:	463b      	mov	r3, r7
 8011ac6:	f7f3 fac9 	bl	800505c <__aeabi_dmul>
 8011aca:	a38d      	add	r3, pc, #564	; (adr r3, 8011d00 <atan+0x2b8>)
 8011acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad0:	f7f3 f912 	bl	8004cf8 <__adddf3>
 8011ad4:	4632      	mov	r2, r6
 8011ad6:	463b      	mov	r3, r7
 8011ad8:	f7f3 fac0 	bl	800505c <__aeabi_dmul>
 8011adc:	a38a      	add	r3, pc, #552	; (adr r3, 8011d08 <atan+0x2c0>)
 8011ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae2:	f7f3 f909 	bl	8004cf8 <__adddf3>
 8011ae6:	4632      	mov	r2, r6
 8011ae8:	463b      	mov	r3, r7
 8011aea:	f7f3 fab7 	bl	800505c <__aeabi_dmul>
 8011aee:	a388      	add	r3, pc, #544	; (adr r3, 8011d10 <atan+0x2c8>)
 8011af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af4:	f7f3 f900 	bl	8004cf8 <__adddf3>
 8011af8:	4632      	mov	r2, r6
 8011afa:	463b      	mov	r3, r7
 8011afc:	f7f3 faae 	bl	800505c <__aeabi_dmul>
 8011b00:	a385      	add	r3, pc, #532	; (adr r3, 8011d18 <atan+0x2d0>)
 8011b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b06:	f7f3 f8f7 	bl	8004cf8 <__adddf3>
 8011b0a:	4642      	mov	r2, r8
 8011b0c:	464b      	mov	r3, r9
 8011b0e:	f7f3 faa5 	bl	800505c <__aeabi_dmul>
 8011b12:	a383      	add	r3, pc, #524	; (adr r3, 8011d20 <atan+0x2d8>)
 8011b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b18:	4680      	mov	r8, r0
 8011b1a:	4689      	mov	r9, r1
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	4639      	mov	r1, r7
 8011b20:	f7f3 fa9c 	bl	800505c <__aeabi_dmul>
 8011b24:	a380      	add	r3, pc, #512	; (adr r3, 8011d28 <atan+0x2e0>)
 8011b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2a:	f7f3 f8e3 	bl	8004cf4 <__aeabi_dsub>
 8011b2e:	4632      	mov	r2, r6
 8011b30:	463b      	mov	r3, r7
 8011b32:	f7f3 fa93 	bl	800505c <__aeabi_dmul>
 8011b36:	a37e      	add	r3, pc, #504	; (adr r3, 8011d30 <atan+0x2e8>)
 8011b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3c:	f7f3 f8da 	bl	8004cf4 <__aeabi_dsub>
 8011b40:	4632      	mov	r2, r6
 8011b42:	463b      	mov	r3, r7
 8011b44:	f7f3 fa8a 	bl	800505c <__aeabi_dmul>
 8011b48:	a37b      	add	r3, pc, #492	; (adr r3, 8011d38 <atan+0x2f0>)
 8011b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4e:	f7f3 f8d1 	bl	8004cf4 <__aeabi_dsub>
 8011b52:	4632      	mov	r2, r6
 8011b54:	463b      	mov	r3, r7
 8011b56:	f7f3 fa81 	bl	800505c <__aeabi_dmul>
 8011b5a:	a379      	add	r3, pc, #484	; (adr r3, 8011d40 <atan+0x2f8>)
 8011b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b60:	f7f3 f8c8 	bl	8004cf4 <__aeabi_dsub>
 8011b64:	4632      	mov	r2, r6
 8011b66:	463b      	mov	r3, r7
 8011b68:	f7f3 fa78 	bl	800505c <__aeabi_dmul>
 8011b6c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8011b70:	4602      	mov	r2, r0
 8011b72:	460b      	mov	r3, r1
 8011b74:	d069      	beq.n	8011c4a <atan+0x202>
 8011b76:	4640      	mov	r0, r8
 8011b78:	4649      	mov	r1, r9
 8011b7a:	f7f3 f8bd 	bl	8004cf8 <__adddf3>
 8011b7e:	4622      	mov	r2, r4
 8011b80:	462b      	mov	r3, r5
 8011b82:	f7f3 fa6b 	bl	800505c <__aeabi_dmul>
 8011b86:	4e78      	ldr	r6, [pc, #480]	; (8011d68 <atan+0x320>)
 8011b88:	4b78      	ldr	r3, [pc, #480]	; (8011d6c <atan+0x324>)
 8011b8a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011b8e:	445e      	add	r6, fp
 8011b90:	449b      	add	fp, r3
 8011b92:	e9db 2300 	ldrd	r2, r3, [fp]
 8011b96:	f7f3 f8ad 	bl	8004cf4 <__aeabi_dsub>
 8011b9a:	4622      	mov	r2, r4
 8011b9c:	462b      	mov	r3, r5
 8011b9e:	f7f3 f8a9 	bl	8004cf4 <__aeabi_dsub>
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	460b      	mov	r3, r1
 8011ba6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011baa:	f7f3 f8a3 	bl	8004cf4 <__aeabi_dsub>
 8011bae:	f1ba 0f00 	cmp.w	sl, #0
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	f6bf af5f 	bge.w	8011a76 <atan+0x2e>
 8011bb8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	f43f af50 	beq.w	8011a68 <atan+0x20>
 8011bc8:	4622      	mov	r2, r4
 8011bca:	4620      	mov	r0, r4
 8011bcc:	462b      	mov	r3, r5
 8011bce:	4629      	mov	r1, r5
 8011bd0:	f7f3 f892 	bl	8004cf8 <__adddf3>
 8011bd4:	4604      	mov	r4, r0
 8011bd6:	4620      	mov	r0, r4
 8011bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bdc:	a35a      	add	r3, pc, #360	; (adr r3, 8011d48 <atan+0x300>)
 8011bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be2:	f7f3 f889 	bl	8004cf8 <__adddf3>
 8011be6:	2200      	movs	r2, #0
 8011be8:	4b61      	ldr	r3, [pc, #388]	; (8011d70 <atan+0x328>)
 8011bea:	f7f3 fcc7 	bl	800557c <__aeabi_dcmpgt>
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	f43f af4d 	beq.w	8011a8e <atan+0x46>
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bfc:	f000 f90a 	bl	8011e14 <fabs>
 8011c00:	4b5c      	ldr	r3, [pc, #368]	; (8011d74 <atan+0x32c>)
 8011c02:	4604      	mov	r4, r0
 8011c04:	429e      	cmp	r6, r3
 8011c06:	460d      	mov	r5, r1
 8011c08:	dc2f      	bgt.n	8011c6a <atan+0x222>
 8011c0a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011c0e:	429e      	cmp	r6, r3
 8011c10:	dc54      	bgt.n	8011cbc <atan+0x274>
 8011c12:	4602      	mov	r2, r0
 8011c14:	460b      	mov	r3, r1
 8011c16:	f7f3 f86f 	bl	8004cf8 <__adddf3>
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	4b54      	ldr	r3, [pc, #336]	; (8011d70 <atan+0x328>)
 8011c1e:	f7f3 f869 	bl	8004cf4 <__aeabi_dsub>
 8011c22:	2200      	movs	r2, #0
 8011c24:	4606      	mov	r6, r0
 8011c26:	460f      	mov	r7, r1
 8011c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	4629      	mov	r1, r5
 8011c30:	f7f3 f862 	bl	8004cf8 <__adddf3>
 8011c34:	4602      	mov	r2, r0
 8011c36:	460b      	mov	r3, r1
 8011c38:	4630      	mov	r0, r6
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	f7f3 fb38 	bl	80052b0 <__aeabi_ddiv>
 8011c40:	f04f 0b00 	mov.w	fp, #0
 8011c44:	4604      	mov	r4, r0
 8011c46:	460d      	mov	r5, r1
 8011c48:	e723      	b.n	8011a92 <atan+0x4a>
 8011c4a:	4640      	mov	r0, r8
 8011c4c:	4649      	mov	r1, r9
 8011c4e:	f7f3 f853 	bl	8004cf8 <__adddf3>
 8011c52:	4622      	mov	r2, r4
 8011c54:	462b      	mov	r3, r5
 8011c56:	f7f3 fa01 	bl	800505c <__aeabi_dmul>
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	4620      	mov	r0, r4
 8011c60:	4629      	mov	r1, r5
 8011c62:	f7f3 f847 	bl	8004cf4 <__aeabi_dsub>
 8011c66:	4604      	mov	r4, r0
 8011c68:	e705      	b.n	8011a76 <atan+0x2e>
 8011c6a:	4b43      	ldr	r3, [pc, #268]	; (8011d78 <atan+0x330>)
 8011c6c:	429e      	cmp	r6, r3
 8011c6e:	dc1a      	bgt.n	8011ca6 <atan+0x25e>
 8011c70:	2200      	movs	r2, #0
 8011c72:	4b42      	ldr	r3, [pc, #264]	; (8011d7c <atan+0x334>)
 8011c74:	f7f3 f83e 	bl	8004cf4 <__aeabi_dsub>
 8011c78:	2200      	movs	r2, #0
 8011c7a:	4606      	mov	r6, r0
 8011c7c:	460f      	mov	r7, r1
 8011c7e:	4b3f      	ldr	r3, [pc, #252]	; (8011d7c <atan+0x334>)
 8011c80:	4620      	mov	r0, r4
 8011c82:	4629      	mov	r1, r5
 8011c84:	f7f3 f9ea 	bl	800505c <__aeabi_dmul>
 8011c88:	2200      	movs	r2, #0
 8011c8a:	4b39      	ldr	r3, [pc, #228]	; (8011d70 <atan+0x328>)
 8011c8c:	f7f3 f834 	bl	8004cf8 <__adddf3>
 8011c90:	4602      	mov	r2, r0
 8011c92:	460b      	mov	r3, r1
 8011c94:	4630      	mov	r0, r6
 8011c96:	4639      	mov	r1, r7
 8011c98:	f7f3 fb0a 	bl	80052b0 <__aeabi_ddiv>
 8011c9c:	f04f 0b02 	mov.w	fp, #2
 8011ca0:	4604      	mov	r4, r0
 8011ca2:	460d      	mov	r5, r1
 8011ca4:	e6f5      	b.n	8011a92 <atan+0x4a>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	460b      	mov	r3, r1
 8011caa:	2000      	movs	r0, #0
 8011cac:	4934      	ldr	r1, [pc, #208]	; (8011d80 <atan+0x338>)
 8011cae:	f7f3 faff 	bl	80052b0 <__aeabi_ddiv>
 8011cb2:	f04f 0b03 	mov.w	fp, #3
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	460d      	mov	r5, r1
 8011cba:	e6ea      	b.n	8011a92 <atan+0x4a>
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	4b2c      	ldr	r3, [pc, #176]	; (8011d70 <atan+0x328>)
 8011cc0:	f7f3 f818 	bl	8004cf4 <__aeabi_dsub>
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	4606      	mov	r6, r0
 8011cc8:	460f      	mov	r7, r1
 8011cca:	4b29      	ldr	r3, [pc, #164]	; (8011d70 <atan+0x328>)
 8011ccc:	4620      	mov	r0, r4
 8011cce:	4629      	mov	r1, r5
 8011cd0:	f7f3 f812 	bl	8004cf8 <__adddf3>
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	460b      	mov	r3, r1
 8011cd8:	4630      	mov	r0, r6
 8011cda:	4639      	mov	r1, r7
 8011cdc:	f7f3 fae8 	bl	80052b0 <__aeabi_ddiv>
 8011ce0:	f04f 0b01 	mov.w	fp, #1
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	e6d3      	b.n	8011a92 <atan+0x4a>
 8011cea:	bf00      	nop
 8011cec:	f3af 8000 	nop.w
 8011cf0:	e322da11 	.word	0xe322da11
 8011cf4:	3f90ad3a 	.word	0x3f90ad3a
 8011cf8:	24760deb 	.word	0x24760deb
 8011cfc:	3fa97b4b 	.word	0x3fa97b4b
 8011d00:	a0d03d51 	.word	0xa0d03d51
 8011d04:	3fb10d66 	.word	0x3fb10d66
 8011d08:	c54c206e 	.word	0xc54c206e
 8011d0c:	3fb745cd 	.word	0x3fb745cd
 8011d10:	920083ff 	.word	0x920083ff
 8011d14:	3fc24924 	.word	0x3fc24924
 8011d18:	5555550d 	.word	0x5555550d
 8011d1c:	3fd55555 	.word	0x3fd55555
 8011d20:	2c6a6c2f 	.word	0x2c6a6c2f
 8011d24:	bfa2b444 	.word	0xbfa2b444
 8011d28:	52defd9a 	.word	0x52defd9a
 8011d2c:	3fadde2d 	.word	0x3fadde2d
 8011d30:	af749a6d 	.word	0xaf749a6d
 8011d34:	3fb3b0f2 	.word	0x3fb3b0f2
 8011d38:	fe231671 	.word	0xfe231671
 8011d3c:	3fbc71c6 	.word	0x3fbc71c6
 8011d40:	9998ebc4 	.word	0x9998ebc4
 8011d44:	3fc99999 	.word	0x3fc99999
 8011d48:	8800759c 	.word	0x8800759c
 8011d4c:	7e37e43c 	.word	0x7e37e43c
 8011d50:	440fffff 	.word	0x440fffff
 8011d54:	7ff00000 	.word	0x7ff00000
 8011d58:	3ff921fb 	.word	0x3ff921fb
 8011d5c:	bff921fb 	.word	0xbff921fb
 8011d60:	54442d18 	.word	0x54442d18
 8011d64:	3fdbffff 	.word	0x3fdbffff
 8011d68:	08016758 	.word	0x08016758
 8011d6c:	08016738 	.word	0x08016738
 8011d70:	3ff00000 	.word	0x3ff00000
 8011d74:	3ff2ffff 	.word	0x3ff2ffff
 8011d78:	40037fff 	.word	0x40037fff
 8011d7c:	3ff80000 	.word	0x3ff80000
 8011d80:	bff00000 	.word	0xbff00000

08011d84 <cos>:
 8011d84:	b530      	push	{r4, r5, lr}
 8011d86:	4a21      	ldr	r2, [pc, #132]	; (8011e0c <cos+0x88>)
 8011d88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d8c:	4293      	cmp	r3, r2
 8011d8e:	b087      	sub	sp, #28
 8011d90:	dd1b      	ble.n	8011dca <cos+0x46>
 8011d92:	4a1f      	ldr	r2, [pc, #124]	; (8011e10 <cos+0x8c>)
 8011d94:	4293      	cmp	r3, r2
 8011d96:	dd05      	ble.n	8011da4 <cos+0x20>
 8011d98:	4602      	mov	r2, r0
 8011d9a:	460b      	mov	r3, r1
 8011d9c:	f7f2 ffaa 	bl	8004cf4 <__aeabi_dsub>
 8011da0:	b007      	add	sp, #28
 8011da2:	bd30      	pop	{r4, r5, pc}
 8011da4:	aa02      	add	r2, sp, #8
 8011da6:	f000 f8d7 	bl	8011f58 <__ieee754_rem_pio2>
 8011daa:	f000 0003 	and.w	r0, r0, #3
 8011dae:	2801      	cmp	r0, #1
 8011db0:	d01a      	beq.n	8011de8 <cos+0x64>
 8011db2:	2802      	cmp	r0, #2
 8011db4:	d00f      	beq.n	8011dd6 <cos+0x52>
 8011db6:	b308      	cbz	r0, 8011dfc <cos+0x78>
 8011db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dc4:	f001 f8c4 	bl	8012f50 <__kernel_sin>
 8011dc8:	e7ea      	b.n	8011da0 <cos+0x1c>
 8011dca:	2200      	movs	r2, #0
 8011dcc:	2300      	movs	r3, #0
 8011dce:	f000 fb9f 	bl	8012510 <__kernel_cos>
 8011dd2:	b007      	add	sp, #28
 8011dd4:	bd30      	pop	{r4, r5, pc}
 8011dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dde:	f000 fb97 	bl	8012510 <__kernel_cos>
 8011de2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011de6:	e7db      	b.n	8011da0 <cos+0x1c>
 8011de8:	9000      	str	r0, [sp, #0]
 8011dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011df2:	f001 f8ad 	bl	8012f50 <__kernel_sin>
 8011df6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011dfa:	e7d1      	b.n	8011da0 <cos+0x1c>
 8011dfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e04:	f000 fb84 	bl	8012510 <__kernel_cos>
 8011e08:	e7ca      	b.n	8011da0 <cos+0x1c>
 8011e0a:	bf00      	nop
 8011e0c:	3fe921fb 	.word	0x3fe921fb
 8011e10:	7fefffff 	.word	0x7fefffff

08011e14 <fabs>:
 8011e14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011e18:	4770      	bx	lr
 8011e1a:	bf00      	nop

08011e1c <sin>:
 8011e1c:	b530      	push	{r4, r5, lr}
 8011e1e:	4a21      	ldr	r2, [pc, #132]	; (8011ea4 <sin+0x88>)
 8011e20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e24:	4293      	cmp	r3, r2
 8011e26:	b087      	sub	sp, #28
 8011e28:	dd1b      	ble.n	8011e62 <sin+0x46>
 8011e2a:	4a1f      	ldr	r2, [pc, #124]	; (8011ea8 <sin+0x8c>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	dd05      	ble.n	8011e3c <sin+0x20>
 8011e30:	4602      	mov	r2, r0
 8011e32:	460b      	mov	r3, r1
 8011e34:	f7f2 ff5e 	bl	8004cf4 <__aeabi_dsub>
 8011e38:	b007      	add	sp, #28
 8011e3a:	bd30      	pop	{r4, r5, pc}
 8011e3c:	aa02      	add	r2, sp, #8
 8011e3e:	f000 f88b 	bl	8011f58 <__ieee754_rem_pio2>
 8011e42:	f000 0003 	and.w	r0, r0, #3
 8011e46:	2801      	cmp	r0, #1
 8011e48:	d01e      	beq.n	8011e88 <sin+0x6c>
 8011e4a:	2802      	cmp	r0, #2
 8011e4c:	d011      	beq.n	8011e72 <sin+0x56>
 8011e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e52:	b300      	cbz	r0, 8011e96 <sin+0x7a>
 8011e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e58:	f000 fb5a 	bl	8012510 <__kernel_cos>
 8011e5c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011e60:	e7ea      	b.n	8011e38 <sin+0x1c>
 8011e62:	2300      	movs	r3, #0
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	2200      	movs	r2, #0
 8011e68:	2300      	movs	r3, #0
 8011e6a:	f001 f871 	bl	8012f50 <__kernel_sin>
 8011e6e:	b007      	add	sp, #28
 8011e70:	bd30      	pop	{r4, r5, pc}
 8011e72:	2301      	movs	r3, #1
 8011e74:	9300      	str	r3, [sp, #0]
 8011e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e7e:	f001 f867 	bl	8012f50 <__kernel_sin>
 8011e82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011e86:	e7d7      	b.n	8011e38 <sin+0x1c>
 8011e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e90:	f000 fb3e 	bl	8012510 <__kernel_cos>
 8011e94:	e7d0      	b.n	8011e38 <sin+0x1c>
 8011e96:	2401      	movs	r4, #1
 8011e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e9c:	9400      	str	r4, [sp, #0]
 8011e9e:	f001 f857 	bl	8012f50 <__kernel_sin>
 8011ea2:	e7c9      	b.n	8011e38 <sin+0x1c>
 8011ea4:	3fe921fb 	.word	0x3fe921fb
 8011ea8:	7fefffff 	.word	0x7fefffff

08011eac <sqrt>:
 8011eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb0:	b08a      	sub	sp, #40	; 0x28
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	460f      	mov	r7, r1
 8011eb6:	f000 fa65 	bl	8012384 <__ieee754_sqrt>
 8011eba:	f8df a098 	ldr.w	sl, [pc, #152]	; 8011f54 <sqrt+0xa8>
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	f99a 3000 	ldrsb.w	r3, [sl]
 8011ec4:	460d      	mov	r5, r1
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	d00f      	beq.n	8011eea <sqrt+0x3e>
 8011eca:	4630      	mov	r0, r6
 8011ecc:	4639      	mov	r1, r7
 8011ece:	f001 f97f 	bl	80131d0 <__fpclassifyd>
 8011ed2:	b150      	cbz	r0, 8011eea <sqrt+0x3e>
 8011ed4:	f04f 0800 	mov.w	r8, #0
 8011ed8:	f04f 0900 	mov.w	r9, #0
 8011edc:	4630      	mov	r0, r6
 8011ede:	4639      	mov	r1, r7
 8011ee0:	4642      	mov	r2, r8
 8011ee2:	464b      	mov	r3, r9
 8011ee4:	f7f3 fb2c 	bl	8005540 <__aeabi_dcmplt>
 8011ee8:	b920      	cbnz	r0, 8011ef4 <sqrt+0x48>
 8011eea:	4620      	mov	r0, r4
 8011eec:	4629      	mov	r1, r5
 8011eee:	b00a      	add	sp, #40	; 0x28
 8011ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef4:	4916      	ldr	r1, [pc, #88]	; (8011f50 <sqrt+0xa4>)
 8011ef6:	f89a 4000 	ldrb.w	r4, [sl]
 8011efa:	2201      	movs	r2, #1
 8011efc:	2300      	movs	r3, #0
 8011efe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011f02:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011f06:	9101      	str	r1, [sp, #4]
 8011f08:	9200      	str	r2, [sp, #0]
 8011f0a:	9308      	str	r3, [sp, #32]
 8011f0c:	b964      	cbnz	r4, 8011f28 <sqrt+0x7c>
 8011f0e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8011f12:	4668      	mov	r0, sp
 8011f14:	f001 f986 	bl	8013224 <matherr>
 8011f18:	b180      	cbz	r0, 8011f3c <sqrt+0x90>
 8011f1a:	9b08      	ldr	r3, [sp, #32]
 8011f1c:	b99b      	cbnz	r3, 8011f46 <sqrt+0x9a>
 8011f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f22:	b00a      	add	sp, #40	; 0x28
 8011f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f28:	4642      	mov	r2, r8
 8011f2a:	464b      	mov	r3, r9
 8011f2c:	4640      	mov	r0, r8
 8011f2e:	4649      	mov	r1, r9
 8011f30:	f7f3 f9be 	bl	80052b0 <__aeabi_ddiv>
 8011f34:	2c02      	cmp	r4, #2
 8011f36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011f3a:	d1ea      	bne.n	8011f12 <sqrt+0x66>
 8011f3c:	f001 f9f6 	bl	801332c <__errno>
 8011f40:	2321      	movs	r3, #33	; 0x21
 8011f42:	6003      	str	r3, [r0, #0]
 8011f44:	e7e9      	b.n	8011f1a <sqrt+0x6e>
 8011f46:	f001 f9f1 	bl	801332c <__errno>
 8011f4a:	9b08      	ldr	r3, [sp, #32]
 8011f4c:	6003      	str	r3, [r0, #0]
 8011f4e:	e7e6      	b.n	8011f1e <sqrt+0x72>
 8011f50:	08016778 	.word	0x08016778
 8011f54:	20000034 	.word	0x20000034

08011f58 <__ieee754_rem_pio2>:
 8011f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5c:	4c94      	ldr	r4, [pc, #592]	; (80121b0 <__ieee754_rem_pio2+0x258>)
 8011f5e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8011f62:	42a7      	cmp	r7, r4
 8011f64:	b08f      	sub	sp, #60	; 0x3c
 8011f66:	f340 8081 	ble.w	801206c <__ieee754_rem_pio2+0x114>
 8011f6a:	4614      	mov	r4, r2
 8011f6c:	4a91      	ldr	r2, [pc, #580]	; (80121b4 <__ieee754_rem_pio2+0x25c>)
 8011f6e:	460e      	mov	r6, r1
 8011f70:	4297      	cmp	r7, r2
 8011f72:	dc26      	bgt.n	8011fc2 <__ieee754_rem_pio2+0x6a>
 8011f74:	a384      	add	r3, pc, #528	; (adr r3, 8012188 <__ieee754_rem_pio2+0x230>)
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	2900      	cmp	r1, #0
 8011f7c:	f340 81a0 	ble.w	80122c0 <__ieee754_rem_pio2+0x368>
 8011f80:	f7f2 feb8 	bl	8004cf4 <__aeabi_dsub>
 8011f84:	4b8c      	ldr	r3, [pc, #560]	; (80121b8 <__ieee754_rem_pio2+0x260>)
 8011f86:	4680      	mov	r8, r0
 8011f88:	429f      	cmp	r7, r3
 8011f8a:	4689      	mov	r9, r1
 8011f8c:	f000 8083 	beq.w	8012096 <__ieee754_rem_pio2+0x13e>
 8011f90:	a37f      	add	r3, pc, #508	; (adr r3, 8012190 <__ieee754_rem_pio2+0x238>)
 8011f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f96:	f7f2 fead 	bl	8004cf4 <__aeabi_dsub>
 8011f9a:	4602      	mov	r2, r0
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	4640      	mov	r0, r8
 8011fa0:	e9c4 2300 	strd	r2, r3, [r4]
 8011fa4:	4649      	mov	r1, r9
 8011fa6:	f7f2 fea5 	bl	8004cf4 <__aeabi_dsub>
 8011faa:	a379      	add	r3, pc, #484	; (adr r3, 8012190 <__ieee754_rem_pio2+0x238>)
 8011fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb0:	f7f2 fea0 	bl	8004cf4 <__aeabi_dsub>
 8011fb4:	2501      	movs	r5, #1
 8011fb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011fba:	4628      	mov	r0, r5
 8011fbc:	b00f      	add	sp, #60	; 0x3c
 8011fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc2:	4a7e      	ldr	r2, [pc, #504]	; (80121bc <__ieee754_rem_pio2+0x264>)
 8011fc4:	4297      	cmp	r7, r2
 8011fc6:	f340 8083 	ble.w	80120d0 <__ieee754_rem_pio2+0x178>
 8011fca:	4a7d      	ldr	r2, [pc, #500]	; (80121c0 <__ieee754_rem_pio2+0x268>)
 8011fcc:	4297      	cmp	r7, r2
 8011fce:	dc58      	bgt.n	8012082 <__ieee754_rem_pio2+0x12a>
 8011fd0:	153d      	asrs	r5, r7, #20
 8011fd2:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011fd6:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
 8011fda:	468b      	mov	fp, r1
 8011fdc:	4682      	mov	sl, r0
 8011fde:	f7f3 fad7 	bl	8005590 <__aeabi_d2iz>
 8011fe2:	f7f2 ffd5 	bl	8004f90 <__aeabi_i2d>
 8011fe6:	4680      	mov	r8, r0
 8011fe8:	4689      	mov	r9, r1
 8011fea:	4642      	mov	r2, r8
 8011fec:	464b      	mov	r3, r9
 8011fee:	4650      	mov	r0, sl
 8011ff0:	4659      	mov	r1, fp
 8011ff2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8011ff6:	f7f2 fe7d 	bl	8004cf4 <__aeabi_dsub>
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4b71      	ldr	r3, [pc, #452]	; (80121c4 <__ieee754_rem_pio2+0x26c>)
 8011ffe:	f7f3 f82d 	bl	800505c <__aeabi_dmul>
 8012002:	468b      	mov	fp, r1
 8012004:	4682      	mov	sl, r0
 8012006:	f7f3 fac3 	bl	8005590 <__aeabi_d2iz>
 801200a:	f7f2 ffc1 	bl	8004f90 <__aeabi_i2d>
 801200e:	4680      	mov	r8, r0
 8012010:	4689      	mov	r9, r1
 8012012:	4642      	mov	r2, r8
 8012014:	464b      	mov	r3, r9
 8012016:	4650      	mov	r0, sl
 8012018:	4659      	mov	r1, fp
 801201a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801201e:	f7f2 fe69 	bl	8004cf4 <__aeabi_dsub>
 8012022:	2200      	movs	r2, #0
 8012024:	4b67      	ldr	r3, [pc, #412]	; (80121c4 <__ieee754_rem_pio2+0x26c>)
 8012026:	f7f3 f819 	bl	800505c <__aeabi_dmul>
 801202a:	2200      	movs	r2, #0
 801202c:	2300      	movs	r3, #0
 801202e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012032:	f7f3 fa7b 	bl	800552c <__aeabi_dcmpeq>
 8012036:	2800      	cmp	r0, #0
 8012038:	f000 816a 	beq.w	8012310 <__ieee754_rem_pio2+0x3b8>
 801203c:	2300      	movs	r3, #0
 801203e:	4640      	mov	r0, r8
 8012040:	4649      	mov	r1, r9
 8012042:	2200      	movs	r2, #0
 8012044:	f7f3 fa72 	bl	800552c <__aeabi_dcmpeq>
 8012048:	2800      	cmp	r0, #0
 801204a:	bf14      	ite	ne
 801204c:	2301      	movne	r3, #1
 801204e:	2302      	moveq	r3, #2
 8012050:	485d      	ldr	r0, [pc, #372]	; (80121c8 <__ieee754_rem_pio2+0x270>)
 8012052:	2102      	movs	r1, #2
 8012054:	9001      	str	r0, [sp, #4]
 8012056:	9100      	str	r1, [sp, #0]
 8012058:	462a      	mov	r2, r5
 801205a:	4621      	mov	r1, r4
 801205c:	a808      	add	r0, sp, #32
 801205e:	f000 fb7b 	bl	8012758 <__kernel_rem_pio2>
 8012062:	2e00      	cmp	r6, #0
 8012064:	f2c0 814a 	blt.w	80122fc <__ieee754_rem_pio2+0x3a4>
 8012068:	4605      	mov	r5, r0
 801206a:	e006      	b.n	801207a <__ieee754_rem_pio2+0x122>
 801206c:	e9c2 0100 	strd	r0, r1, [r2]
 8012070:	2500      	movs	r5, #0
 8012072:	2400      	movs	r4, #0
 8012074:	e9c2 4502 	strd	r4, r5, [r2, #8]
 8012078:	2500      	movs	r5, #0
 801207a:	4628      	mov	r0, r5
 801207c:	b00f      	add	sp, #60	; 0x3c
 801207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012082:	4602      	mov	r2, r0
 8012084:	460b      	mov	r3, r1
 8012086:	f7f2 fe35 	bl	8004cf4 <__aeabi_dsub>
 801208a:	2500      	movs	r5, #0
 801208c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012090:	e9c4 0100 	strd	r0, r1, [r4]
 8012094:	e7f1      	b.n	801207a <__ieee754_rem_pio2+0x122>
 8012096:	a340      	add	r3, pc, #256	; (adr r3, 8012198 <__ieee754_rem_pio2+0x240>)
 8012098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801209c:	f7f2 fe2a 	bl	8004cf4 <__aeabi_dsub>
 80120a0:	a33f      	add	r3, pc, #252	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x248>)
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	4606      	mov	r6, r0
 80120a8:	460f      	mov	r7, r1
 80120aa:	f7f2 fe23 	bl	8004cf4 <__aeabi_dsub>
 80120ae:	4602      	mov	r2, r0
 80120b0:	460b      	mov	r3, r1
 80120b2:	4630      	mov	r0, r6
 80120b4:	e9c4 2300 	strd	r2, r3, [r4]
 80120b8:	4639      	mov	r1, r7
 80120ba:	f7f2 fe1b 	bl	8004cf4 <__aeabi_dsub>
 80120be:	a338      	add	r3, pc, #224	; (adr r3, 80121a0 <__ieee754_rem_pio2+0x248>)
 80120c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c4:	f7f2 fe16 	bl	8004cf4 <__aeabi_dsub>
 80120c8:	2501      	movs	r5, #1
 80120ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80120ce:	e7d4      	b.n	801207a <__ieee754_rem_pio2+0x122>
 80120d0:	f7ff fea0 	bl	8011e14 <fabs>
 80120d4:	a334      	add	r3, pc, #208	; (adr r3, 80121a8 <__ieee754_rem_pio2+0x250>)
 80120d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120da:	4680      	mov	r8, r0
 80120dc:	4689      	mov	r9, r1
 80120de:	f7f2 ffbd 	bl	800505c <__aeabi_dmul>
 80120e2:	2200      	movs	r2, #0
 80120e4:	4b39      	ldr	r3, [pc, #228]	; (80121cc <__ieee754_rem_pio2+0x274>)
 80120e6:	f7f2 fe07 	bl	8004cf8 <__adddf3>
 80120ea:	f7f3 fa51 	bl	8005590 <__aeabi_d2iz>
 80120ee:	4605      	mov	r5, r0
 80120f0:	f7f2 ff4e 	bl	8004f90 <__aeabi_i2d>
 80120f4:	a324      	add	r3, pc, #144	; (adr r3, 8012188 <__ieee754_rem_pio2+0x230>)
 80120f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80120fe:	f7f2 ffad 	bl	800505c <__aeabi_dmul>
 8012102:	4602      	mov	r2, r0
 8012104:	460b      	mov	r3, r1
 8012106:	4640      	mov	r0, r8
 8012108:	4649      	mov	r1, r9
 801210a:	f7f2 fdf3 	bl	8004cf4 <__aeabi_dsub>
 801210e:	a320      	add	r3, pc, #128	; (adr r3, 8012190 <__ieee754_rem_pio2+0x238>)
 8012110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012114:	4682      	mov	sl, r0
 8012116:	468b      	mov	fp, r1
 8012118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801211c:	f7f2 ff9e 	bl	800505c <__aeabi_dmul>
 8012120:	2d1f      	cmp	r5, #31
 8012122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012126:	dc55      	bgt.n	80121d4 <__ieee754_rem_pio2+0x27c>
 8012128:	4b29      	ldr	r3, [pc, #164]	; (80121d0 <__ieee754_rem_pio2+0x278>)
 801212a:	1e6a      	subs	r2, r5, #1
 801212c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012130:	429f      	cmp	r7, r3
 8012132:	d04f      	beq.n	80121d4 <__ieee754_rem_pio2+0x27c>
 8012134:	4602      	mov	r2, r0
 8012136:	460b      	mov	r3, r1
 8012138:	4650      	mov	r0, sl
 801213a:	4659      	mov	r1, fp
 801213c:	f7f2 fdda 	bl	8004cf4 <__aeabi_dsub>
 8012140:	4602      	mov	r2, r0
 8012142:	460b      	mov	r3, r1
 8012144:	4681      	mov	r9, r0
 8012146:	4688      	mov	r8, r1
 8012148:	e9c4 2300 	strd	r2, r3, [r4]
 801214c:	464a      	mov	r2, r9
 801214e:	4643      	mov	r3, r8
 8012150:	4650      	mov	r0, sl
 8012152:	4659      	mov	r1, fp
 8012154:	f7f2 fdce 	bl	8004cf4 <__aeabi_dsub>
 8012158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801215c:	f7f2 fdca 	bl	8004cf4 <__aeabi_dsub>
 8012160:	4602      	mov	r2, r0
 8012162:	460b      	mov	r3, r1
 8012164:	2e00      	cmp	r6, #0
 8012166:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801216a:	da86      	bge.n	801207a <__ieee754_rem_pio2+0x122>
 801216c:	464a      	mov	r2, r9
 801216e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012172:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8012176:	e884 000c 	stmia.w	r4, {r2, r3}
 801217a:	60e1      	str	r1, [r4, #12]
 801217c:	60a0      	str	r0, [r4, #8]
 801217e:	426d      	negs	r5, r5
 8012180:	e77b      	b.n	801207a <__ieee754_rem_pio2+0x122>
 8012182:	bf00      	nop
 8012184:	f3af 8000 	nop.w
 8012188:	54400000 	.word	0x54400000
 801218c:	3ff921fb 	.word	0x3ff921fb
 8012190:	1a626331 	.word	0x1a626331
 8012194:	3dd0b461 	.word	0x3dd0b461
 8012198:	1a600000 	.word	0x1a600000
 801219c:	3dd0b461 	.word	0x3dd0b461
 80121a0:	2e037073 	.word	0x2e037073
 80121a4:	3ba3198a 	.word	0x3ba3198a
 80121a8:	6dc9c883 	.word	0x6dc9c883
 80121ac:	3fe45f30 	.word	0x3fe45f30
 80121b0:	3fe921fb 	.word	0x3fe921fb
 80121b4:	4002d97b 	.word	0x4002d97b
 80121b8:	3ff921fb 	.word	0x3ff921fb
 80121bc:	413921fb 	.word	0x413921fb
 80121c0:	7fefffff 	.word	0x7fefffff
 80121c4:	41700000 	.word	0x41700000
 80121c8:	08016800 	.word	0x08016800
 80121cc:	3fe00000 	.word	0x3fe00000
 80121d0:	08016780 	.word	0x08016780
 80121d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121d8:	4650      	mov	r0, sl
 80121da:	4659      	mov	r1, fp
 80121dc:	f7f2 fd8a 	bl	8004cf4 <__aeabi_dsub>
 80121e0:	153f      	asrs	r7, r7, #20
 80121e2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80121e6:	1afb      	subs	r3, r7, r3
 80121e8:	2b10      	cmp	r3, #16
 80121ea:	4681      	mov	r9, r0
 80121ec:	4688      	mov	r8, r1
 80121ee:	e9c4 0100 	strd	r0, r1, [r4]
 80121f2:	ddab      	ble.n	801214c <__ieee754_rem_pio2+0x1f4>
 80121f4:	a358      	add	r3, pc, #352	; (adr r3, 8012358 <__ieee754_rem_pio2+0x400>)
 80121f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121fe:	f7f2 ff2d 	bl	800505c <__aeabi_dmul>
 8012202:	4680      	mov	r8, r0
 8012204:	4689      	mov	r9, r1
 8012206:	4602      	mov	r2, r0
 8012208:	460b      	mov	r3, r1
 801220a:	4650      	mov	r0, sl
 801220c:	4659      	mov	r1, fp
 801220e:	f7f2 fd71 	bl	8004cf4 <__aeabi_dsub>
 8012212:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012216:	4602      	mov	r2, r0
 8012218:	460b      	mov	r3, r1
 801221a:	4650      	mov	r0, sl
 801221c:	4659      	mov	r1, fp
 801221e:	f7f2 fd69 	bl	8004cf4 <__aeabi_dsub>
 8012222:	4642      	mov	r2, r8
 8012224:	464b      	mov	r3, r9
 8012226:	f7f2 fd65 	bl	8004cf4 <__aeabi_dsub>
 801222a:	a34d      	add	r3, pc, #308	; (adr r3, 8012360 <__ieee754_rem_pio2+0x408>)
 801222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012230:	4680      	mov	r8, r0
 8012232:	4689      	mov	r9, r1
 8012234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012238:	f7f2 ff10 	bl	800505c <__aeabi_dmul>
 801223c:	4642      	mov	r2, r8
 801223e:	464b      	mov	r3, r9
 8012240:	f7f2 fd58 	bl	8004cf4 <__aeabi_dsub>
 8012244:	4602      	mov	r2, r0
 8012246:	460b      	mov	r3, r1
 8012248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801224c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012250:	f7f2 fd50 	bl	8004cf4 <__aeabi_dsub>
 8012254:	460b      	mov	r3, r1
 8012256:	4602      	mov	r2, r0
 8012258:	4688      	mov	r8, r1
 801225a:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801225e:	1a7f      	subs	r7, r7, r1
 8012260:	2f31      	cmp	r7, #49	; 0x31
 8012262:	4681      	mov	r9, r0
 8012264:	e9c4 2300 	strd	r2, r3, [r4]
 8012268:	dd72      	ble.n	8012350 <__ieee754_rem_pio2+0x3f8>
 801226a:	a33f      	add	r3, pc, #252	; (adr r3, 8012368 <__ieee754_rem_pio2+0x410>)
 801226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012274:	f7f2 fef2 	bl	800505c <__aeabi_dmul>
 8012278:	4680      	mov	r8, r0
 801227a:	4689      	mov	r9, r1
 801227c:	4602      	mov	r2, r0
 801227e:	460b      	mov	r3, r1
 8012280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012284:	f7f2 fd36 	bl	8004cf4 <__aeabi_dsub>
 8012288:	4602      	mov	r2, r0
 801228a:	460b      	mov	r3, r1
 801228c:	4682      	mov	sl, r0
 801228e:	468b      	mov	fp, r1
 8012290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012294:	f7f2 fd2e 	bl	8004cf4 <__aeabi_dsub>
 8012298:	4642      	mov	r2, r8
 801229a:	464b      	mov	r3, r9
 801229c:	f7f2 fd2a 	bl	8004cf4 <__aeabi_dsub>
 80122a0:	a333      	add	r3, pc, #204	; (adr r3, 8012370 <__ieee754_rem_pio2+0x418>)
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	4680      	mov	r8, r0
 80122a8:	4689      	mov	r9, r1
 80122aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122ae:	f7f2 fed5 	bl	800505c <__aeabi_dmul>
 80122b2:	4642      	mov	r2, r8
 80122b4:	464b      	mov	r3, r9
 80122b6:	f7f2 fd1d 	bl	8004cf4 <__aeabi_dsub>
 80122ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122be:	e739      	b.n	8012134 <__ieee754_rem_pio2+0x1dc>
 80122c0:	f7f2 fd1a 	bl	8004cf8 <__adddf3>
 80122c4:	4b2e      	ldr	r3, [pc, #184]	; (8012380 <__ieee754_rem_pio2+0x428>)
 80122c6:	4680      	mov	r8, r0
 80122c8:	429f      	cmp	r7, r3
 80122ca:	4689      	mov	r9, r1
 80122cc:	d022      	beq.n	8012314 <__ieee754_rem_pio2+0x3bc>
 80122ce:	a32a      	add	r3, pc, #168	; (adr r3, 8012378 <__ieee754_rem_pio2+0x420>)
 80122d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d4:	f7f2 fd10 	bl	8004cf8 <__adddf3>
 80122d8:	4602      	mov	r2, r0
 80122da:	460b      	mov	r3, r1
 80122dc:	4640      	mov	r0, r8
 80122de:	e9c4 2300 	strd	r2, r3, [r4]
 80122e2:	4649      	mov	r1, r9
 80122e4:	f7f2 fd06 	bl	8004cf4 <__aeabi_dsub>
 80122e8:	a323      	add	r3, pc, #140	; (adr r3, 8012378 <__ieee754_rem_pio2+0x420>)
 80122ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ee:	f7f2 fd03 	bl	8004cf8 <__adddf3>
 80122f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80122f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122fa:	e6be      	b.n	801207a <__ieee754_rem_pio2+0x122>
 80122fc:	6862      	ldr	r2, [r4, #4]
 80122fe:	68e3      	ldr	r3, [r4, #12]
 8012300:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8012304:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012308:	4245      	negs	r5, r0
 801230a:	6062      	str	r2, [r4, #4]
 801230c:	60e3      	str	r3, [r4, #12]
 801230e:	e6b4      	b.n	801207a <__ieee754_rem_pio2+0x122>
 8012310:	2303      	movs	r3, #3
 8012312:	e69d      	b.n	8012050 <__ieee754_rem_pio2+0xf8>
 8012314:	a310      	add	r3, pc, #64	; (adr r3, 8012358 <__ieee754_rem_pio2+0x400>)
 8012316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231a:	f7f2 fced 	bl	8004cf8 <__adddf3>
 801231e:	a310      	add	r3, pc, #64	; (adr r3, 8012360 <__ieee754_rem_pio2+0x408>)
 8012320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012324:	4606      	mov	r6, r0
 8012326:	460f      	mov	r7, r1
 8012328:	f7f2 fce6 	bl	8004cf8 <__adddf3>
 801232c:	4602      	mov	r2, r0
 801232e:	460b      	mov	r3, r1
 8012330:	4630      	mov	r0, r6
 8012332:	e9c4 2300 	strd	r2, r3, [r4]
 8012336:	4639      	mov	r1, r7
 8012338:	f7f2 fcdc 	bl	8004cf4 <__aeabi_dsub>
 801233c:	a308      	add	r3, pc, #32	; (adr r3, 8012360 <__ieee754_rem_pio2+0x408>)
 801233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012342:	f7f2 fcd9 	bl	8004cf8 <__adddf3>
 8012346:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801234a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801234e:	e694      	b.n	801207a <__ieee754_rem_pio2+0x122>
 8012350:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012354:	e6fa      	b.n	801214c <__ieee754_rem_pio2+0x1f4>
 8012356:	bf00      	nop
 8012358:	1a600000 	.word	0x1a600000
 801235c:	3dd0b461 	.word	0x3dd0b461
 8012360:	2e037073 	.word	0x2e037073
 8012364:	3ba3198a 	.word	0x3ba3198a
 8012368:	2e000000 	.word	0x2e000000
 801236c:	3ba3198a 	.word	0x3ba3198a
 8012370:	252049c1 	.word	0x252049c1
 8012374:	397b839a 	.word	0x397b839a
 8012378:	1a626331 	.word	0x1a626331
 801237c:	3dd0b461 	.word	0x3dd0b461
 8012380:	3ff921fb 	.word	0x3ff921fb

08012384 <__ieee754_sqrt>:
 8012384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012388:	4e5f      	ldr	r6, [pc, #380]	; (8012508 <__ieee754_sqrt+0x184>)
 801238a:	460c      	mov	r4, r1
 801238c:	46b6      	mov	lr, r6
 801238e:	400e      	ands	r6, r1
 8012390:	4576      	cmp	r6, lr
 8012392:	4605      	mov	r5, r0
 8012394:	f000 8098 	beq.w	80124c8 <__ieee754_sqrt+0x144>
 8012398:	2900      	cmp	r1, #0
 801239a:	460b      	mov	r3, r1
 801239c:	4602      	mov	r2, r0
 801239e:	dd74      	ble.n	801248a <__ieee754_sqrt+0x106>
 80123a0:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80123a4:	d07f      	beq.n	80124a6 <__ieee754_sqrt+0x122>
 80123a6:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80123aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123ae:	f01e 0f01 	tst.w	lr, #1
 80123b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80123b6:	d163      	bne.n	8012480 <__ieee754_sqrt+0xfc>
 80123b8:	2700      	movs	r7, #0
 80123ba:	463e      	mov	r6, r7
 80123bc:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80123c0:	440b      	add	r3, r1
 80123c2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80123c6:	0052      	lsls	r2, r2, #1
 80123c8:	2016      	movs	r0, #22
 80123ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80123ce:	1874      	adds	r4, r6, r1
 80123d0:	429c      	cmp	r4, r3
 80123d2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80123d6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80123da:	dc02      	bgt.n	80123e2 <__ieee754_sqrt+0x5e>
 80123dc:	1b1b      	subs	r3, r3, r4
 80123de:	1866      	adds	r6, r4, r1
 80123e0:	440f      	add	r7, r1
 80123e2:	3801      	subs	r0, #1
 80123e4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80123e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80123ec:	d1ef      	bne.n	80123ce <__ieee754_sqrt+0x4a>
 80123ee:	4684      	mov	ip, r0
 80123f0:	2420      	movs	r4, #32
 80123f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80123f6:	e009      	b.n	801240c <__ieee754_sqrt+0x88>
 80123f8:	d020      	beq.n	801243c <__ieee754_sqrt+0xb8>
 80123fa:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80123fe:	3c01      	subs	r4, #1
 8012400:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012404:	442b      	add	r3, r5
 8012406:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801240a:	d020      	beq.n	801244e <__ieee754_sqrt+0xca>
 801240c:	429e      	cmp	r6, r3
 801240e:	eb01 050c 	add.w	r5, r1, ip
 8012412:	daf1      	bge.n	80123f8 <__ieee754_sqrt+0x74>
 8012414:	2d00      	cmp	r5, #0
 8012416:	eb05 0c01 	add.w	ip, r5, r1
 801241a:	db09      	blt.n	8012430 <__ieee754_sqrt+0xac>
 801241c:	46b0      	mov	r8, r6
 801241e:	4295      	cmp	r5, r2
 8012420:	eba3 0306 	sub.w	r3, r3, r6
 8012424:	d900      	bls.n	8012428 <__ieee754_sqrt+0xa4>
 8012426:	3b01      	subs	r3, #1
 8012428:	4646      	mov	r6, r8
 801242a:	1b52      	subs	r2, r2, r5
 801242c:	4408      	add	r0, r1
 801242e:	e7e4      	b.n	80123fa <__ieee754_sqrt+0x76>
 8012430:	f1bc 0f00 	cmp.w	ip, #0
 8012434:	dbf2      	blt.n	801241c <__ieee754_sqrt+0x98>
 8012436:	f106 0801 	add.w	r8, r6, #1
 801243a:	e7f0      	b.n	801241e <__ieee754_sqrt+0x9a>
 801243c:	4295      	cmp	r5, r2
 801243e:	d817      	bhi.n	8012470 <__ieee754_sqrt+0xec>
 8012440:	2d00      	cmp	r5, #0
 8012442:	eb05 0c01 	add.w	ip, r5, r1
 8012446:	db49      	blt.n	80124dc <__ieee754_sqrt+0x158>
 8012448:	4698      	mov	r8, r3
 801244a:	2300      	movs	r3, #0
 801244c:	e7ec      	b.n	8012428 <__ieee754_sqrt+0xa4>
 801244e:	4313      	orrs	r3, r2
 8012450:	d110      	bne.n	8012474 <__ieee754_sqrt+0xf0>
 8012452:	0840      	lsrs	r0, r0, #1
 8012454:	107b      	asrs	r3, r7, #1
 8012456:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801245a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801245e:	07fa      	lsls	r2, r7, #31
 8012460:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 8012464:	4639      	mov	r1, r7
 8012466:	bf48      	it	mi
 8012468:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 801246c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012470:	4633      	mov	r3, r6
 8012472:	e7c2      	b.n	80123fa <__ieee754_sqrt+0x76>
 8012474:	1c41      	adds	r1, r0, #1
 8012476:	d035      	beq.n	80124e4 <__ieee754_sqrt+0x160>
 8012478:	f000 0301 	and.w	r3, r0, #1
 801247c:	4418      	add	r0, r3
 801247e:	e7e8      	b.n	8012452 <__ieee754_sqrt+0xce>
 8012480:	005b      	lsls	r3, r3, #1
 8012482:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012486:	0052      	lsls	r2, r2, #1
 8012488:	e796      	b.n	80123b8 <__ieee754_sqrt+0x34>
 801248a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801248e:	4306      	orrs	r6, r0
 8012490:	d0ec      	beq.n	801246c <__ieee754_sqrt+0xe8>
 8012492:	bb79      	cbnz	r1, 80124f4 <__ieee754_sqrt+0x170>
 8012494:	468e      	mov	lr, r1
 8012496:	0ad3      	lsrs	r3, r2, #11
 8012498:	f1ae 0e15 	sub.w	lr, lr, #21
 801249c:	0552      	lsls	r2, r2, #21
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d0f9      	beq.n	8012496 <__ieee754_sqrt+0x112>
 80124a2:	02dd      	lsls	r5, r3, #11
 80124a4:	d421      	bmi.n	80124ea <__ieee754_sqrt+0x166>
 80124a6:	2100      	movs	r1, #0
 80124a8:	e000      	b.n	80124ac <__ieee754_sqrt+0x128>
 80124aa:	4601      	mov	r1, r0
 80124ac:	005b      	lsls	r3, r3, #1
 80124ae:	02dc      	lsls	r4, r3, #11
 80124b0:	f101 0001 	add.w	r0, r1, #1
 80124b4:	d5f9      	bpl.n	80124aa <__ieee754_sqrt+0x126>
 80124b6:	f1c0 0420 	rsb	r4, r0, #32
 80124ba:	fa22 f404 	lsr.w	r4, r2, r4
 80124be:	4323      	orrs	r3, r4
 80124c0:	ebc1 0e0e 	rsb	lr, r1, lr
 80124c4:	4082      	lsls	r2, r0
 80124c6:	e76e      	b.n	80123a6 <__ieee754_sqrt+0x22>
 80124c8:	4602      	mov	r2, r0
 80124ca:	460b      	mov	r3, r1
 80124cc:	f7f2 fdc6 	bl	800505c <__aeabi_dmul>
 80124d0:	462a      	mov	r2, r5
 80124d2:	4623      	mov	r3, r4
 80124d4:	f7f2 fc10 	bl	8004cf8 <__adddf3>
 80124d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124dc:	f1bc 0f00 	cmp.w	ip, #0
 80124e0:	dbb2      	blt.n	8012448 <__ieee754_sqrt+0xc4>
 80124e2:	e7a8      	b.n	8012436 <__ieee754_sqrt+0xb2>
 80124e4:	3701      	adds	r7, #1
 80124e6:	4620      	mov	r0, r4
 80124e8:	e7b4      	b.n	8012454 <__ieee754_sqrt+0xd0>
 80124ea:	2420      	movs	r4, #32
 80124ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80124f0:	2000      	movs	r0, #0
 80124f2:	e7e2      	b.n	80124ba <__ieee754_sqrt+0x136>
 80124f4:	4602      	mov	r2, r0
 80124f6:	460b      	mov	r3, r1
 80124f8:	f7f2 fbfc 	bl	8004cf4 <__aeabi_dsub>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	f7f2 fed6 	bl	80052b0 <__aeabi_ddiv>
 8012504:	e7b2      	b.n	801246c <__ieee754_sqrt+0xe8>
 8012506:	bf00      	nop
 8012508:	7ff00000 	.word	0x7ff00000
 801250c:	00000000 	.word	0x00000000

08012510 <__kernel_cos>:
 8012510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012514:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012518:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801251c:	b085      	sub	sp, #20
 801251e:	460c      	mov	r4, r1
 8012520:	4692      	mov	sl, r2
 8012522:	469b      	mov	fp, r3
 8012524:	4605      	mov	r5, r0
 8012526:	da6b      	bge.n	8012600 <__kernel_cos+0xf0>
 8012528:	f7f3 f832 	bl	8005590 <__aeabi_d2iz>
 801252c:	2800      	cmp	r0, #0
 801252e:	f000 80e7 	beq.w	8012700 <__kernel_cos+0x1f0>
 8012532:	462a      	mov	r2, r5
 8012534:	4623      	mov	r3, r4
 8012536:	4628      	mov	r0, r5
 8012538:	4621      	mov	r1, r4
 801253a:	f7f2 fd8f 	bl	800505c <__aeabi_dmul>
 801253e:	a374      	add	r3, pc, #464	; (adr r3, 8012710 <__kernel_cos+0x200>)
 8012540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012544:	4680      	mov	r8, r0
 8012546:	4689      	mov	r9, r1
 8012548:	f7f2 fd88 	bl	800505c <__aeabi_dmul>
 801254c:	a372      	add	r3, pc, #456	; (adr r3, 8012718 <__kernel_cos+0x208>)
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	f7f2 fbd1 	bl	8004cf8 <__adddf3>
 8012556:	4642      	mov	r2, r8
 8012558:	464b      	mov	r3, r9
 801255a:	f7f2 fd7f 	bl	800505c <__aeabi_dmul>
 801255e:	a370      	add	r3, pc, #448	; (adr r3, 8012720 <__kernel_cos+0x210>)
 8012560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012564:	f7f2 fbc6 	bl	8004cf4 <__aeabi_dsub>
 8012568:	4642      	mov	r2, r8
 801256a:	464b      	mov	r3, r9
 801256c:	f7f2 fd76 	bl	800505c <__aeabi_dmul>
 8012570:	a36d      	add	r3, pc, #436	; (adr r3, 8012728 <__kernel_cos+0x218>)
 8012572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012576:	f7f2 fbbf 	bl	8004cf8 <__adddf3>
 801257a:	4642      	mov	r2, r8
 801257c:	464b      	mov	r3, r9
 801257e:	f7f2 fd6d 	bl	800505c <__aeabi_dmul>
 8012582:	a36b      	add	r3, pc, #428	; (adr r3, 8012730 <__kernel_cos+0x220>)
 8012584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012588:	f7f2 fbb4 	bl	8004cf4 <__aeabi_dsub>
 801258c:	4642      	mov	r2, r8
 801258e:	464b      	mov	r3, r9
 8012590:	f7f2 fd64 	bl	800505c <__aeabi_dmul>
 8012594:	a368      	add	r3, pc, #416	; (adr r3, 8012738 <__kernel_cos+0x228>)
 8012596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801259a:	f7f2 fbad 	bl	8004cf8 <__adddf3>
 801259e:	4642      	mov	r2, r8
 80125a0:	464b      	mov	r3, r9
 80125a2:	f7f2 fd5b 	bl	800505c <__aeabi_dmul>
 80125a6:	e9cd 0100 	strd	r0, r1, [sp]
 80125aa:	2200      	movs	r2, #0
 80125ac:	4b64      	ldr	r3, [pc, #400]	; (8012740 <__kernel_cos+0x230>)
 80125ae:	4640      	mov	r0, r8
 80125b0:	4649      	mov	r1, r9
 80125b2:	f7f2 fd53 	bl	800505c <__aeabi_dmul>
 80125b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125ba:	4606      	mov	r6, r0
 80125bc:	460f      	mov	r7, r1
 80125be:	4640      	mov	r0, r8
 80125c0:	4649      	mov	r1, r9
 80125c2:	f7f2 fd4b 	bl	800505c <__aeabi_dmul>
 80125c6:	4652      	mov	r2, sl
 80125c8:	4680      	mov	r8, r0
 80125ca:	4689      	mov	r9, r1
 80125cc:	465b      	mov	r3, fp
 80125ce:	4628      	mov	r0, r5
 80125d0:	4621      	mov	r1, r4
 80125d2:	f7f2 fd43 	bl	800505c <__aeabi_dmul>
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	4640      	mov	r0, r8
 80125dc:	4649      	mov	r1, r9
 80125de:	f7f2 fb89 	bl	8004cf4 <__aeabi_dsub>
 80125e2:	4602      	mov	r2, r0
 80125e4:	460b      	mov	r3, r1
 80125e6:	4630      	mov	r0, r6
 80125e8:	4639      	mov	r1, r7
 80125ea:	f7f2 fb83 	bl	8004cf4 <__aeabi_dsub>
 80125ee:	4602      	mov	r2, r0
 80125f0:	460b      	mov	r3, r1
 80125f2:	2000      	movs	r0, #0
 80125f4:	4953      	ldr	r1, [pc, #332]	; (8012744 <__kernel_cos+0x234>)
 80125f6:	f7f2 fb7d 	bl	8004cf4 <__aeabi_dsub>
 80125fa:	b005      	add	sp, #20
 80125fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012600:	4602      	mov	r2, r0
 8012602:	460b      	mov	r3, r1
 8012604:	f7f2 fd2a 	bl	800505c <__aeabi_dmul>
 8012608:	a341      	add	r3, pc, #260	; (adr r3, 8012710 <__kernel_cos+0x200>)
 801260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260e:	4680      	mov	r8, r0
 8012610:	4689      	mov	r9, r1
 8012612:	f7f2 fd23 	bl	800505c <__aeabi_dmul>
 8012616:	a340      	add	r3, pc, #256	; (adr r3, 8012718 <__kernel_cos+0x208>)
 8012618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261c:	f7f2 fb6c 	bl	8004cf8 <__adddf3>
 8012620:	4642      	mov	r2, r8
 8012622:	464b      	mov	r3, r9
 8012624:	f7f2 fd1a 	bl	800505c <__aeabi_dmul>
 8012628:	a33d      	add	r3, pc, #244	; (adr r3, 8012720 <__kernel_cos+0x210>)
 801262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262e:	f7f2 fb61 	bl	8004cf4 <__aeabi_dsub>
 8012632:	4642      	mov	r2, r8
 8012634:	464b      	mov	r3, r9
 8012636:	f7f2 fd11 	bl	800505c <__aeabi_dmul>
 801263a:	a33b      	add	r3, pc, #236	; (adr r3, 8012728 <__kernel_cos+0x218>)
 801263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012640:	f7f2 fb5a 	bl	8004cf8 <__adddf3>
 8012644:	4642      	mov	r2, r8
 8012646:	464b      	mov	r3, r9
 8012648:	f7f2 fd08 	bl	800505c <__aeabi_dmul>
 801264c:	a338      	add	r3, pc, #224	; (adr r3, 8012730 <__kernel_cos+0x220>)
 801264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012652:	f7f2 fb4f 	bl	8004cf4 <__aeabi_dsub>
 8012656:	4642      	mov	r2, r8
 8012658:	464b      	mov	r3, r9
 801265a:	f7f2 fcff 	bl	800505c <__aeabi_dmul>
 801265e:	a336      	add	r3, pc, #216	; (adr r3, 8012738 <__kernel_cos+0x228>)
 8012660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012664:	f7f2 fb48 	bl	8004cf8 <__adddf3>
 8012668:	464b      	mov	r3, r9
 801266a:	4642      	mov	r2, r8
 801266c:	f7f2 fcf6 	bl	800505c <__aeabi_dmul>
 8012670:	4b35      	ldr	r3, [pc, #212]	; (8012748 <__kernel_cos+0x238>)
 8012672:	e9cd 0100 	strd	r0, r1, [sp]
 8012676:	429e      	cmp	r6, r3
 8012678:	dd97      	ble.n	80125aa <__kernel_cos+0x9a>
 801267a:	4b34      	ldr	r3, [pc, #208]	; (801274c <__kernel_cos+0x23c>)
 801267c:	2200      	movs	r2, #0
 801267e:	429e      	cmp	r6, r3
 8012680:	dc38      	bgt.n	80126f4 <__kernel_cos+0x1e4>
 8012682:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 8012686:	2000      	movs	r0, #0
 8012688:	492e      	ldr	r1, [pc, #184]	; (8012744 <__kernel_cos+0x234>)
 801268a:	4616      	mov	r6, r2
 801268c:	461f      	mov	r7, r3
 801268e:	f7f2 fb31 	bl	8004cf4 <__aeabi_dsub>
 8012692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012696:	2200      	movs	r2, #0
 8012698:	4b29      	ldr	r3, [pc, #164]	; (8012740 <__kernel_cos+0x230>)
 801269a:	4640      	mov	r0, r8
 801269c:	4649      	mov	r1, r9
 801269e:	f7f2 fcdd 	bl	800505c <__aeabi_dmul>
 80126a2:	4632      	mov	r2, r6
 80126a4:	463b      	mov	r3, r7
 80126a6:	f7f2 fb25 	bl	8004cf4 <__aeabi_dsub>
 80126aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126ae:	4606      	mov	r6, r0
 80126b0:	460f      	mov	r7, r1
 80126b2:	4640      	mov	r0, r8
 80126b4:	4649      	mov	r1, r9
 80126b6:	f7f2 fcd1 	bl	800505c <__aeabi_dmul>
 80126ba:	4652      	mov	r2, sl
 80126bc:	4680      	mov	r8, r0
 80126be:	4689      	mov	r9, r1
 80126c0:	465b      	mov	r3, fp
 80126c2:	4628      	mov	r0, r5
 80126c4:	4621      	mov	r1, r4
 80126c6:	f7f2 fcc9 	bl	800505c <__aeabi_dmul>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	4640      	mov	r0, r8
 80126d0:	4649      	mov	r1, r9
 80126d2:	f7f2 fb0f 	bl	8004cf4 <__aeabi_dsub>
 80126d6:	4602      	mov	r2, r0
 80126d8:	460b      	mov	r3, r1
 80126da:	4630      	mov	r0, r6
 80126dc:	4639      	mov	r1, r7
 80126de:	f7f2 fb09 	bl	8004cf4 <__aeabi_dsub>
 80126e2:	4602      	mov	r2, r0
 80126e4:	460b      	mov	r3, r1
 80126e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126ea:	f7f2 fb03 	bl	8004cf4 <__aeabi_dsub>
 80126ee:	b005      	add	sp, #20
 80126f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f4:	4b16      	ldr	r3, [pc, #88]	; (8012750 <__kernel_cos+0x240>)
 80126f6:	2600      	movs	r6, #0
 80126f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126fc:	4f15      	ldr	r7, [pc, #84]	; (8012754 <__kernel_cos+0x244>)
 80126fe:	e7ca      	b.n	8012696 <__kernel_cos+0x186>
 8012700:	4910      	ldr	r1, [pc, #64]	; (8012744 <__kernel_cos+0x234>)
 8012702:	2000      	movs	r0, #0
 8012704:	b005      	add	sp, #20
 8012706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801270a:	bf00      	nop
 801270c:	f3af 8000 	nop.w
 8012710:	be8838d4 	.word	0xbe8838d4
 8012714:	bda8fae9 	.word	0xbda8fae9
 8012718:	bdb4b1c4 	.word	0xbdb4b1c4
 801271c:	3e21ee9e 	.word	0x3e21ee9e
 8012720:	809c52ad 	.word	0x809c52ad
 8012724:	3e927e4f 	.word	0x3e927e4f
 8012728:	19cb1590 	.word	0x19cb1590
 801272c:	3efa01a0 	.word	0x3efa01a0
 8012730:	16c15177 	.word	0x16c15177
 8012734:	3f56c16c 	.word	0x3f56c16c
 8012738:	5555554c 	.word	0x5555554c
 801273c:	3fa55555 	.word	0x3fa55555
 8012740:	3fe00000 	.word	0x3fe00000
 8012744:	3ff00000 	.word	0x3ff00000
 8012748:	3fd33332 	.word	0x3fd33332
 801274c:	3fe90000 	.word	0x3fe90000
 8012750:	3fe70000 	.word	0x3fe70000
 8012754:	3fd20000 	.word	0x3fd20000

08012758 <__kernel_rem_pio2>:
 8012758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801275c:	4c7a      	ldr	r4, [pc, #488]	; (8012948 <__kernel_rem_pio2+0x1f0>)
 801275e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8012762:	461f      	mov	r7, r3
 8012764:	930c      	str	r3, [sp, #48]	; 0x30
 8012766:	1ed3      	subs	r3, r2, #3
 8012768:	fb84 5403 	smull	r5, r4, r4, r3
 801276c:	17db      	asrs	r3, r3, #31
 801276e:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 8012772:	9ea6      	ldr	r6, [sp, #664]	; 0x298
 8012774:	4c75      	ldr	r4, [pc, #468]	; (801294c <__kernel_rem_pio2+0x1f4>)
 8012776:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801277a:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 801277e:	1c6b      	adds	r3, r5, #1
 8012780:	4626      	mov	r6, r4
 8012782:	9409      	str	r4, [sp, #36]	; 0x24
 8012784:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8012788:	1e7c      	subs	r4, r7, #1
 801278a:	950d      	str	r5, [sp, #52]	; 0x34
 801278c:	9402      	str	r4, [sp, #8]
 801278e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012792:	1b2d      	subs	r5, r5, r4
 8012794:	1934      	adds	r4, r6, r4
 8012796:	9004      	str	r0, [sp, #16]
 8012798:	910a      	str	r1, [sp, #40]	; 0x28
 801279a:	9308      	str	r3, [sp, #32]
 801279c:	d416      	bmi.n	80127cc <__kernel_rem_pio2+0x74>
 801279e:	442c      	add	r4, r5
 80127a0:	3401      	adds	r4, #1
 80127a2:	ae22      	add	r6, sp, #136	; 0x88
 80127a4:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
 80127a6:	e008      	b.n	80127ba <__kernel_rem_pio2+0x62>
 80127a8:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80127ac:	f7f2 fbf0 	bl	8004f90 <__aeabi_i2d>
 80127b0:	3501      	adds	r5, #1
 80127b2:	42a5      	cmp	r5, r4
 80127b4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80127b8:	d008      	beq.n	80127cc <__kernel_rem_pio2+0x74>
 80127ba:	2d00      	cmp	r5, #0
 80127bc:	daf4      	bge.n	80127a8 <__kernel_rem_pio2+0x50>
 80127be:	3501      	adds	r5, #1
 80127c0:	2000      	movs	r0, #0
 80127c2:	2100      	movs	r1, #0
 80127c4:	42a5      	cmp	r5, r4
 80127c6:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80127ca:	d1f6      	bne.n	80127ba <__kernel_rem_pio2+0x62>
 80127cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	db31      	blt.n	8012836 <__kernel_rem_pio2+0xde>
 80127d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127d6:	a974      	add	r1, sp, #464	; 0x1d0
 80127d8:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
 80127dc:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 80127e0:	9a02      	ldr	r2, [sp, #8]
 80127e2:	a924      	add	r1, sp, #144	; 0x90
 80127e4:	00db      	lsls	r3, r3, #3
 80127e6:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 80127ea:	9301      	str	r3, [sp, #4]
 80127ec:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 80127f0:	9b02      	ldr	r3, [sp, #8]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f2c0 8190 	blt.w	8012b18 <__kernel_rem_pio2+0x3c0>
 80127f8:	464c      	mov	r4, r9
 80127fa:	9b04      	ldr	r3, [sp, #16]
 80127fc:	2600      	movs	r6, #0
 80127fe:	f1a3 0508 	sub.w	r5, r3, #8
 8012802:	9b01      	ldr	r3, [sp, #4]
 8012804:	2700      	movs	r7, #0
 8012806:	eb09 0803 	add.w	r8, r9, r3
 801280a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 801280e:	e874 0102 	ldrd	r0, r1, [r4], #-8
 8012812:	f7f2 fc23 	bl	800505c <__aeabi_dmul>
 8012816:	4602      	mov	r2, r0
 8012818:	460b      	mov	r3, r1
 801281a:	4630      	mov	r0, r6
 801281c:	4639      	mov	r1, r7
 801281e:	f7f2 fa6b 	bl	8004cf8 <__adddf3>
 8012822:	4544      	cmp	r4, r8
 8012824:	4606      	mov	r6, r0
 8012826:	460f      	mov	r7, r1
 8012828:	d1ef      	bne.n	801280a <__kernel_rem_pio2+0xb2>
 801282a:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 801282e:	45da      	cmp	sl, fp
 8012830:	f109 0908 	add.w	r9, r9, #8
 8012834:	d1dc      	bne.n	80127f0 <__kernel_rem_pio2+0x98>
 8012836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012838:	a910      	add	r1, sp, #64	; 0x40
 801283a:	461d      	mov	r5, r3
 801283c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012840:	3b02      	subs	r3, #2
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	1d1a      	adds	r2, r3, #4
 8012846:	440a      	add	r2, r1
 8012848:	440b      	add	r3, r1
 801284a:	920f      	str	r2, [sp, #60]	; 0x3c
 801284c:	930e      	str	r3, [sp, #56]	; 0x38
 801284e:	ab9c      	add	r3, sp, #624	; 0x270
 8012850:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012854:	2d00      	cmp	r5, #0
 8012856:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801285a:	dd2b      	ble.n	80128b4 <__kernel_rem_pio2+0x15c>
 801285c:	ab9c      	add	r3, sp, #624	; 0x270
 801285e:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
 8012862:	3ca8      	subs	r4, #168	; 0xa8
 8012864:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8012868:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801286c:	2200      	movs	r2, #0
 801286e:	4b38      	ldr	r3, [pc, #224]	; (8012950 <__kernel_rem_pio2+0x1f8>)
 8012870:	4630      	mov	r0, r6
 8012872:	4639      	mov	r1, r7
 8012874:	f7f2 fbf2 	bl	800505c <__aeabi_dmul>
 8012878:	f7f2 fe8a 	bl	8005590 <__aeabi_d2iz>
 801287c:	f7f2 fb88 	bl	8004f90 <__aeabi_i2d>
 8012880:	2200      	movs	r2, #0
 8012882:	4b34      	ldr	r3, [pc, #208]	; (8012954 <__kernel_rem_pio2+0x1fc>)
 8012884:	4680      	mov	r8, r0
 8012886:	4689      	mov	r9, r1
 8012888:	f7f2 fbe8 	bl	800505c <__aeabi_dmul>
 801288c:	4602      	mov	r2, r0
 801288e:	460b      	mov	r3, r1
 8012890:	4630      	mov	r0, r6
 8012892:	4639      	mov	r1, r7
 8012894:	f7f2 fa2e 	bl	8004cf4 <__aeabi_dsub>
 8012898:	f7f2 fe7a 	bl	8005590 <__aeabi_d2iz>
 801289c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80128a0:	f84a 0f04 	str.w	r0, [sl, #4]!
 80128a4:	4649      	mov	r1, r9
 80128a6:	4640      	mov	r0, r8
 80128a8:	f7f2 fa26 	bl	8004cf8 <__adddf3>
 80128ac:	455c      	cmp	r4, fp
 80128ae:	4606      	mov	r6, r0
 80128b0:	460f      	mov	r7, r1
 80128b2:	d1db      	bne.n	801286c <__kernel_rem_pio2+0x114>
 80128b4:	9c08      	ldr	r4, [sp, #32]
 80128b6:	4630      	mov	r0, r6
 80128b8:	4639      	mov	r1, r7
 80128ba:	4622      	mov	r2, r4
 80128bc:	f000 fcb4 	bl	8013228 <scalbn>
 80128c0:	2200      	movs	r2, #0
 80128c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80128c6:	4606      	mov	r6, r0
 80128c8:	460f      	mov	r7, r1
 80128ca:	f7f2 fbc7 	bl	800505c <__aeabi_dmul>
 80128ce:	f000 fbf7 	bl	80130c0 <floor>
 80128d2:	2200      	movs	r2, #0
 80128d4:	4b20      	ldr	r3, [pc, #128]	; (8012958 <__kernel_rem_pio2+0x200>)
 80128d6:	f7f2 fbc1 	bl	800505c <__aeabi_dmul>
 80128da:	4602      	mov	r2, r0
 80128dc:	460b      	mov	r3, r1
 80128de:	4630      	mov	r0, r6
 80128e0:	4639      	mov	r1, r7
 80128e2:	f7f2 fa07 	bl	8004cf4 <__aeabi_dsub>
 80128e6:	460f      	mov	r7, r1
 80128e8:	4606      	mov	r6, r0
 80128ea:	f7f2 fe51 	bl	8005590 <__aeabi_d2iz>
 80128ee:	4681      	mov	r9, r0
 80128f0:	f7f2 fb4e 	bl	8004f90 <__aeabi_i2d>
 80128f4:	4602      	mov	r2, r0
 80128f6:	460b      	mov	r3, r1
 80128f8:	4630      	mov	r0, r6
 80128fa:	4639      	mov	r1, r7
 80128fc:	f7f2 f9fa 	bl	8004cf4 <__aeabi_dsub>
 8012900:	2c00      	cmp	r4, #0
 8012902:	4606      	mov	r6, r0
 8012904:	460f      	mov	r7, r1
 8012906:	f340 80ee 	ble.w	8012ae6 <__kernel_rem_pio2+0x38e>
 801290a:	1e68      	subs	r0, r5, #1
 801290c:	ab10      	add	r3, sp, #64	; 0x40
 801290e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012912:	f1c4 0218 	rsb	r2, r4, #24
 8012916:	fa43 f102 	asr.w	r1, r3, r2
 801291a:	fa01 f202 	lsl.w	r2, r1, r2
 801291e:	1a9b      	subs	r3, r3, r2
 8012920:	f1c4 0817 	rsb	r8, r4, #23
 8012924:	aa10      	add	r2, sp, #64	; 0x40
 8012926:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801292a:	4489      	add	r9, r1
 801292c:	fa43 f808 	asr.w	r8, r3, r8
 8012930:	f1b8 0f00 	cmp.w	r8, #0
 8012934:	dd3d      	ble.n	80129b2 <__kernel_rem_pio2+0x25a>
 8012936:	2d00      	cmp	r5, #0
 8012938:	f109 0901 	add.w	r9, r9, #1
 801293c:	f340 82d5 	ble.w	8012eea <__kernel_rem_pio2+0x792>
 8012940:	2200      	movs	r2, #0
 8012942:	4614      	mov	r4, r2
 8012944:	a90f      	add	r1, sp, #60	; 0x3c
 8012946:	e011      	b.n	801296c <__kernel_rem_pio2+0x214>
 8012948:	2aaaaaab 	.word	0x2aaaaaab
 801294c:	08016908 	.word	0x08016908
 8012950:	3e700000 	.word	0x3e700000
 8012954:	41700000 	.word	0x41700000
 8012958:	40200000 	.word	0x40200000
 801295c:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 8012960:	b10b      	cbz	r3, 8012966 <__kernel_rem_pio2+0x20e>
 8012962:	6008      	str	r0, [r1, #0]
 8012964:	2401      	movs	r4, #1
 8012966:	3201      	adds	r2, #1
 8012968:	4295      	cmp	r5, r2
 801296a:	dd0d      	ble.n	8012988 <__kernel_rem_pio2+0x230>
 801296c:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8012970:	2c00      	cmp	r4, #0
 8012972:	d0f3      	beq.n	801295c <__kernel_rem_pio2+0x204>
 8012974:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8012978:	3201      	adds	r2, #1
 801297a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 801297e:	4295      	cmp	r5, r2
 8012980:	600b      	str	r3, [r1, #0]
 8012982:	f04f 0401 	mov.w	r4, #1
 8012986:	dcf1      	bgt.n	801296c <__kernel_rem_pio2+0x214>
 8012988:	9b08      	ldr	r3, [sp, #32]
 801298a:	2b00      	cmp	r3, #0
 801298c:	dd0d      	ble.n	80129aa <__kernel_rem_pio2+0x252>
 801298e:	2b01      	cmp	r3, #1
 8012990:	f000 80b1 	beq.w	8012af6 <__kernel_rem_pio2+0x39e>
 8012994:	2b02      	cmp	r3, #2
 8012996:	d108      	bne.n	80129aa <__kernel_rem_pio2+0x252>
 8012998:	1e6a      	subs	r2, r5, #1
 801299a:	ab10      	add	r3, sp, #64	; 0x40
 801299c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129a0:	a910      	add	r1, sp, #64	; 0x40
 80129a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80129a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80129aa:	f1b8 0f02 	cmp.w	r8, #2
 80129ae:	f000 8081 	beq.w	8012ab4 <__kernel_rem_pio2+0x35c>
 80129b2:	2200      	movs	r2, #0
 80129b4:	2300      	movs	r3, #0
 80129b6:	4630      	mov	r0, r6
 80129b8:	4639      	mov	r1, r7
 80129ba:	f7f2 fdb7 	bl	800552c <__aeabi_dcmpeq>
 80129be:	2800      	cmp	r0, #0
 80129c0:	f000 825d 	beq.w	8012e7e <__kernel_rem_pio2+0x726>
 80129c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129c6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80129ca:	455b      	cmp	r3, fp
 80129cc:	dc10      	bgt.n	80129f0 <__kernel_rem_pio2+0x298>
 80129ce:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80129d2:	aa10      	add	r2, sp, #64	; 0x40
 80129d4:	3b01      	subs	r3, #1
 80129d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80129d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80129dc:	2200      	movs	r2, #0
 80129de:	f853 1904 	ldr.w	r1, [r3], #-4
 80129e2:	4283      	cmp	r3, r0
 80129e4:	ea42 0201 	orr.w	r2, r2, r1
 80129e8:	d1f9      	bne.n	80129de <__kernel_rem_pio2+0x286>
 80129ea:	2a00      	cmp	r2, #0
 80129ec:	f040 80b1 	bne.w	8012b52 <__kernel_rem_pio2+0x3fa>
 80129f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129f2:	aa10      	add	r2, sp, #64	; 0x40
 80129f4:	3b01      	subs	r3, #1
 80129f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	f040 8273 	bne.w	8012ee6 <__kernel_rem_pio2+0x78e>
 8012a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a02:	2301      	movs	r3, #1
 8012a04:	f852 1904 	ldr.w	r1, [r2], #-4
 8012a08:	3301      	adds	r3, #1
 8012a0a:	2900      	cmp	r1, #0
 8012a0c:	d0fa      	beq.n	8012a04 <__kernel_rem_pio2+0x2ac>
 8012a0e:	18e9      	adds	r1, r5, r3
 8012a10:	1c6a      	adds	r2, r5, #1
 8012a12:	428a      	cmp	r2, r1
 8012a14:	910b      	str	r1, [sp, #44]	; 0x2c
 8012a16:	dc4b      	bgt.n	8012ab0 <__kernel_rem_pio2+0x358>
 8012a18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012a1c:	1851      	adds	r1, r2, r1
 8012a1e:	00db      	lsls	r3, r3, #3
 8012a20:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8012a24:	9305      	str	r3, [sp, #20]
 8012a26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012a28:	4405      	add	r5, r0
 8012a2a:	3901      	subs	r1, #1
 8012a2c:	00e8      	lsls	r0, r5, #3
 8012a2e:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 8012a32:	ab24      	add	r3, sp, #144	; 0x90
 8012a34:	00d2      	lsls	r2, r2, #3
 8012a36:	eb03 0b00 	add.w	fp, r3, r0
 8012a3a:	ab74      	add	r3, sp, #464	; 0x1d0
 8012a3c:	4413      	add	r3, r2
 8012a3e:	9301      	str	r3, [sp, #4]
 8012a40:	f1a2 0308 	sub.w	r3, r2, #8
 8012a44:	9006      	str	r0, [sp, #24]
 8012a46:	9307      	str	r3, [sp, #28]
 8012a48:	f04f 0900 	mov.w	r9, #0
 8012a4c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8012a50:	f7f2 fa9e 	bl	8004f90 <__aeabi_i2d>
 8012a54:	9b02      	ldr	r3, [sp, #8]
 8012a56:	e8eb 0102 	strd	r0, r1, [fp], #8
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	f04f 0600 	mov.w	r6, #0
 8012a60:	f04f 0700 	mov.w	r7, #0
 8012a64:	db1b      	blt.n	8012a9e <__kernel_rem_pio2+0x346>
 8012a66:	9b06      	ldr	r3, [sp, #24]
 8012a68:	eb03 0409 	add.w	r4, r3, r9
 8012a6c:	9b07      	ldr	r3, [sp, #28]
 8012a6e:	eb09 0803 	add.w	r8, r9, r3
 8012a72:	ab24      	add	r3, sp, #144	; 0x90
 8012a74:	441c      	add	r4, r3
 8012a76:	4498      	add	r8, r3
 8012a78:	9b04      	ldr	r3, [sp, #16]
 8012a7a:	f1a3 0508 	sub.w	r5, r3, #8
 8012a7e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8012a82:	e874 0102 	ldrd	r0, r1, [r4], #-8
 8012a86:	f7f2 fae9 	bl	800505c <__aeabi_dmul>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	460b      	mov	r3, r1
 8012a8e:	4630      	mov	r0, r6
 8012a90:	4639      	mov	r1, r7
 8012a92:	f7f2 f931 	bl	8004cf8 <__adddf3>
 8012a96:	4544      	cmp	r4, r8
 8012a98:	4606      	mov	r6, r0
 8012a9a:	460f      	mov	r7, r1
 8012a9c:	d1ef      	bne.n	8012a7e <__kernel_rem_pio2+0x326>
 8012a9e:	9b01      	ldr	r3, [sp, #4]
 8012aa0:	f109 0908 	add.w	r9, r9, #8
 8012aa4:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012aa8:	9301      	str	r3, [sp, #4]
 8012aaa:	9b05      	ldr	r3, [sp, #20]
 8012aac:	4599      	cmp	r9, r3
 8012aae:	d1cd      	bne.n	8012a4c <__kernel_rem_pio2+0x2f4>
 8012ab0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012ab2:	e6cc      	b.n	801284e <__kernel_rem_pio2+0xf6>
 8012ab4:	4632      	mov	r2, r6
 8012ab6:	463b      	mov	r3, r7
 8012ab8:	2000      	movs	r0, #0
 8012aba:	49b1      	ldr	r1, [pc, #708]	; (8012d80 <__kernel_rem_pio2+0x628>)
 8012abc:	f7f2 f91a 	bl	8004cf4 <__aeabi_dsub>
 8012ac0:	4606      	mov	r6, r0
 8012ac2:	460f      	mov	r7, r1
 8012ac4:	2c00      	cmp	r4, #0
 8012ac6:	f43f af74 	beq.w	80129b2 <__kernel_rem_pio2+0x25a>
 8012aca:	9a08      	ldr	r2, [sp, #32]
 8012acc:	2000      	movs	r0, #0
 8012ace:	49ac      	ldr	r1, [pc, #688]	; (8012d80 <__kernel_rem_pio2+0x628>)
 8012ad0:	f000 fbaa 	bl	8013228 <scalbn>
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	460b      	mov	r3, r1
 8012ad8:	4630      	mov	r0, r6
 8012ada:	4639      	mov	r1, r7
 8012adc:	f7f2 f90a 	bl	8004cf4 <__aeabi_dsub>
 8012ae0:	4606      	mov	r6, r0
 8012ae2:	460f      	mov	r7, r1
 8012ae4:	e765      	b.n	80129b2 <__kernel_rem_pio2+0x25a>
 8012ae6:	d110      	bne.n	8012b0a <__kernel_rem_pio2+0x3b2>
 8012ae8:	1e6b      	subs	r3, r5, #1
 8012aea:	aa10      	add	r2, sp, #64	; 0x40
 8012aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012af0:	ea4f 58e3 	mov.w	r8, r3, asr #23
 8012af4:	e71c      	b.n	8012930 <__kernel_rem_pio2+0x1d8>
 8012af6:	1e6a      	subs	r2, r5, #1
 8012af8:	ab10      	add	r3, sp, #64	; 0x40
 8012afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012afe:	a910      	add	r1, sp, #64	; 0x40
 8012b00:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012b04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012b08:	e74f      	b.n	80129aa <__kernel_rem_pio2+0x252>
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	4b9d      	ldr	r3, [pc, #628]	; (8012d84 <__kernel_rem_pio2+0x62c>)
 8012b0e:	f7f2 fd2b 	bl	8005568 <__aeabi_dcmpge>
 8012b12:	b958      	cbnz	r0, 8012b2c <__kernel_rem_pio2+0x3d4>
 8012b14:	4680      	mov	r8, r0
 8012b16:	e74c      	b.n	80129b2 <__kernel_rem_pio2+0x25a>
 8012b18:	2600      	movs	r6, #0
 8012b1a:	2700      	movs	r7, #0
 8012b1c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8012b20:	45da      	cmp	sl, fp
 8012b22:	f109 0908 	add.w	r9, r9, #8
 8012b26:	f47f ae63 	bne.w	80127f0 <__kernel_rem_pio2+0x98>
 8012b2a:	e684      	b.n	8012836 <__kernel_rem_pio2+0xde>
 8012b2c:	2d00      	cmp	r5, #0
 8012b2e:	f109 0901 	add.w	r9, r9, #1
 8012b32:	bfc8      	it	gt
 8012b34:	f04f 0802 	movgt.w	r8, #2
 8012b38:	f73f af02 	bgt.w	8012940 <__kernel_rem_pio2+0x1e8>
 8012b3c:	4632      	mov	r2, r6
 8012b3e:	463b      	mov	r3, r7
 8012b40:	2000      	movs	r0, #0
 8012b42:	498f      	ldr	r1, [pc, #572]	; (8012d80 <__kernel_rem_pio2+0x628>)
 8012b44:	f7f2 f8d6 	bl	8004cf4 <__aeabi_dsub>
 8012b48:	f04f 0802 	mov.w	r8, #2
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	460f      	mov	r7, r1
 8012b50:	e72f      	b.n	80129b2 <__kernel_rem_pio2+0x25a>
 8012b52:	9a08      	ldr	r2, [sp, #32]
 8012b54:	ab10      	add	r3, sp, #64	; 0x40
 8012b56:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012b5a:	3a18      	subs	r2, #24
 8012b5c:	f8cd 9014 	str.w	r9, [sp, #20]
 8012b60:	f8cd 8004 	str.w	r8, [sp, #4]
 8012b64:	9208      	str	r2, [sp, #32]
 8012b66:	b96b      	cbnz	r3, 8012b84 <__kernel_rem_pio2+0x42c>
 8012b68:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 8012b6c:	3b01      	subs	r3, #1
 8012b6e:	a910      	add	r1, sp, #64	; 0x40
 8012b70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012b74:	f853 1904 	ldr.w	r1, [r3], #-4
 8012b78:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012b7c:	3a18      	subs	r2, #24
 8012b7e:	2900      	cmp	r1, #0
 8012b80:	d0f8      	beq.n	8012b74 <__kernel_rem_pio2+0x41c>
 8012b82:	9208      	str	r2, [sp, #32]
 8012b84:	9a08      	ldr	r2, [sp, #32]
 8012b86:	2000      	movs	r0, #0
 8012b88:	497d      	ldr	r1, [pc, #500]	; (8012d80 <__kernel_rem_pio2+0x628>)
 8012b8a:	f000 fb4d 	bl	8013228 <scalbn>
 8012b8e:	f1bb 0f00 	cmp.w	fp, #0
 8012b92:	4604      	mov	r4, r0
 8012b94:	460d      	mov	r5, r1
 8012b96:	f2c0 81b8 	blt.w	8012f0a <__kernel_rem_pio2+0x7b2>
 8012b9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012b9e:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
 8012ba2:	aa10      	add	r2, sp, #64	; 0x40
 8012ba4:	eb02 068b 	add.w	r6, r2, fp, lsl #2
 8012ba8:	eb08 0903 	add.w	r9, r8, r3
 8012bac:	9304      	str	r3, [sp, #16]
 8012bae:	3604      	adds	r6, #4
 8012bb0:	f109 0708 	add.w	r7, r9, #8
 8012bb4:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8012bb8:	f7f2 f9ea 	bl	8004f90 <__aeabi_i2d>
 8012bbc:	4622      	mov	r2, r4
 8012bbe:	462b      	mov	r3, r5
 8012bc0:	f7f2 fa4c 	bl	800505c <__aeabi_dmul>
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012bca:	4b6f      	ldr	r3, [pc, #444]	; (8012d88 <__kernel_rem_pio2+0x630>)
 8012bcc:	4620      	mov	r0, r4
 8012bce:	4629      	mov	r1, r5
 8012bd0:	f7f2 fa44 	bl	800505c <__aeabi_dmul>
 8012bd4:	45b8      	cmp	r8, r7
 8012bd6:	4604      	mov	r4, r0
 8012bd8:	460d      	mov	r5, r1
 8012bda:	d1eb      	bne.n	8012bb4 <__kernel_rem_pio2+0x45c>
 8012bdc:	464b      	mov	r3, r9
 8012bde:	f8cd b018 	str.w	fp, [sp, #24]
 8012be2:	469b      	mov	fp, r3
 8012be4:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8012be8:	f8cd a008 	str.w	sl, [sp, #8]
 8012bec:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012bf0:	f04f 0900 	mov.w	r9, #0
 8012bf4:	f1ba 0f00 	cmp.w	sl, #0
 8012bf8:	f2c0 8128 	blt.w	8012e4c <__kernel_rem_pio2+0x6f4>
 8012bfc:	a35e      	add	r3, pc, #376	; (adr r3, 8012d78 <__kernel_rem_pio2+0x620>)
 8012bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c02:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8012d8c <__kernel_rem_pio2+0x634>
 8012c06:	465d      	mov	r5, fp
 8012c08:	2600      	movs	r6, #0
 8012c0a:	2700      	movs	r7, #0
 8012c0c:	2400      	movs	r4, #0
 8012c0e:	e003      	b.n	8012c18 <__kernel_rem_pio2+0x4c0>
 8012c10:	45a1      	cmp	r9, r4
 8012c12:	db10      	blt.n	8012c36 <__kernel_rem_pio2+0x4de>
 8012c14:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8012c18:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012c1c:	f7f2 fa1e 	bl	800505c <__aeabi_dmul>
 8012c20:	4602      	mov	r2, r0
 8012c22:	460b      	mov	r3, r1
 8012c24:	4630      	mov	r0, r6
 8012c26:	4639      	mov	r1, r7
 8012c28:	f7f2 f866 	bl	8004cf8 <__adddf3>
 8012c2c:	3401      	adds	r4, #1
 8012c2e:	45a2      	cmp	sl, r4
 8012c30:	4606      	mov	r6, r0
 8012c32:	460f      	mov	r7, r1
 8012c34:	daec      	bge.n	8012c10 <__kernel_rem_pio2+0x4b8>
 8012c36:	9b02      	ldr	r3, [sp, #8]
 8012c38:	f1ab 0b08 	sub.w	fp, fp, #8
 8012c3c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012c40:	e9c3 6700 	strd	r6, r7, [r3]
 8012c44:	ab72      	add	r3, sp, #456	; 0x1c8
 8012c46:	455b      	cmp	r3, fp
 8012c48:	f109 0901 	add.w	r9, r9, #1
 8012c4c:	d1d2      	bne.n	8012bf4 <__kernel_rem_pio2+0x49c>
 8012c4e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012c50:	f8dd b018 	ldr.w	fp, [sp, #24]
 8012c54:	f8dd a008 	ldr.w	sl, [sp, #8]
 8012c58:	2b03      	cmp	r3, #3
 8012c5a:	f200 8083 	bhi.w	8012d64 <__kernel_rem_pio2+0x60c>
 8012c5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012c62:	00d3      	.short	0x00d3
 8012c64:	00970097 	.word	0x00970097
 8012c68:	0004      	.short	0x0004
 8012c6a:	f1bb 0f00 	cmp.w	fp, #0
 8012c6e:	f340 8156 	ble.w	8012f1e <__kernel_rem_pio2+0x7c6>
 8012c72:	9b04      	ldr	r3, [sp, #16]
 8012c74:	f8cd b008 	str.w	fp, [sp, #8]
 8012c78:	4453      	add	r3, sl
 8012c7a:	4698      	mov	r8, r3
 8012c7c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012c80:	46d3      	mov	fp, sl
 8012c82:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
 8012c86:	4632      	mov	r2, r6
 8012c88:	463b      	mov	r3, r7
 8012c8a:	4648      	mov	r0, r9
 8012c8c:	4651      	mov	r1, sl
 8012c8e:	f7f2 f833 	bl	8004cf8 <__adddf3>
 8012c92:	4604      	mov	r4, r0
 8012c94:	460d      	mov	r5, r1
 8012c96:	4602      	mov	r2, r0
 8012c98:	460b      	mov	r3, r1
 8012c9a:	4648      	mov	r0, r9
 8012c9c:	4651      	mov	r1, sl
 8012c9e:	f7f2 f829 	bl	8004cf4 <__aeabi_dsub>
 8012ca2:	4632      	mov	r2, r6
 8012ca4:	463b      	mov	r3, r7
 8012ca6:	f7f2 f827 	bl	8004cf8 <__adddf3>
 8012caa:	e9c8 0100 	strd	r0, r1, [r8]
 8012cae:	e968 4502 	strd	r4, r5, [r8, #-8]!
 8012cb2:	45c3      	cmp	fp, r8
 8012cb4:	4626      	mov	r6, r4
 8012cb6:	462f      	mov	r7, r5
 8012cb8:	d1e3      	bne.n	8012c82 <__kernel_rem_pio2+0x52a>
 8012cba:	46da      	mov	sl, fp
 8012cbc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012cc0:	f1bb 0f01 	cmp.w	fp, #1
 8012cc4:	f340 812b 	ble.w	8012f1e <__kernel_rem_pio2+0x7c6>
 8012cc8:	9b04      	ldr	r3, [sp, #16]
 8012cca:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8012cce:	4453      	add	r3, sl
 8012cd0:	4698      	mov	r8, r3
 8012cd2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012cd6:	4699      	mov	r9, r3
 8012cd8:	e959 3402 	ldrd	r3, r4, [r9, #-8]
 8012cdc:	4630      	mov	r0, r6
 8012cde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	4639      	mov	r1, r7
 8012ce6:	4623      	mov	r3, r4
 8012ce8:	f7f2 f806 	bl	8004cf8 <__adddf3>
 8012cec:	4604      	mov	r4, r0
 8012cee:	460d      	mov	r5, r1
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cf8:	f7f1 fffc 	bl	8004cf4 <__aeabi_dsub>
 8012cfc:	4632      	mov	r2, r6
 8012cfe:	463b      	mov	r3, r7
 8012d00:	f7f1 fffa 	bl	8004cf8 <__adddf3>
 8012d04:	e9c9 0100 	strd	r0, r1, [r9]
 8012d08:	e969 4502 	strd	r4, r5, [r9, #-8]!
 8012d0c:	45cb      	cmp	fp, r9
 8012d0e:	4626      	mov	r6, r4
 8012d10:	462f      	mov	r7, r5
 8012d12:	d1e1      	bne.n	8012cd8 <__kernel_rem_pio2+0x580>
 8012d14:	2300      	movs	r3, #0
 8012d16:	461d      	mov	r5, r3
 8012d18:	f108 0808 	add.w	r8, r8, #8
 8012d1c:	ac50      	add	r4, sp, #320	; 0x140
 8012d1e:	4618      	mov	r0, r3
 8012d20:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8012d24:	4629      	mov	r1, r5
 8012d26:	f7f1 ffe7 	bl	8004cf8 <__adddf3>
 8012d2a:	4544      	cmp	r4, r8
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	460d      	mov	r5, r1
 8012d30:	d1f5      	bne.n	8012d1e <__kernel_rem_pio2+0x5c6>
 8012d32:	9a01      	ldr	r2, [sp, #4]
 8012d34:	2a00      	cmp	r2, #0
 8012d36:	f000 80da 	beq.w	8012eee <__kernel_rem_pio2+0x796>
 8012d3a:	f8da 4004 	ldr.w	r4, [sl, #4]
 8012d3e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8012d42:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012d44:	f8da 1000 	ldr.w	r1, [sl]
 8012d48:	f8da 0008 	ldr.w	r0, [sl, #8]
 8012d4c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8012d50:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8012d54:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8012d58:	617d      	str	r5, [r7, #20]
 8012d5a:	613b      	str	r3, [r7, #16]
 8012d5c:	607c      	str	r4, [r7, #4]
 8012d5e:	60fa      	str	r2, [r7, #12]
 8012d60:	6039      	str	r1, [r7, #0]
 8012d62:	60b8      	str	r0, [r7, #8]
 8012d64:	9b05      	ldr	r3, [sp, #20]
 8012d66:	f003 0007 	and.w	r0, r3, #7
 8012d6a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8012d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d72:	bf00      	nop
 8012d74:	f3af 8000 	nop.w
 8012d78:	40000000 	.word	0x40000000
 8012d7c:	3ff921fb 	.word	0x3ff921fb
 8012d80:	3ff00000 	.word	0x3ff00000
 8012d84:	3fe00000 	.word	0x3fe00000
 8012d88:	3e700000 	.word	0x3e700000
 8012d8c:	08016918 	.word	0x08016918
 8012d90:	2400      	movs	r4, #0
 8012d92:	4621      	mov	r1, r4
 8012d94:	9d04      	ldr	r5, [sp, #16]
 8012d96:	3508      	adds	r5, #8
 8012d98:	4455      	add	r5, sl
 8012d9a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f7f1 ffaa 	bl	8004cf8 <__adddf3>
 8012da4:	4555      	cmp	r5, sl
 8012da6:	4604      	mov	r4, r0
 8012da8:	d1f7      	bne.n	8012d9a <__kernel_rem_pio2+0x642>
 8012daa:	9b01      	ldr	r3, [sp, #4]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d050      	beq.n	8012e52 <__kernel_rem_pio2+0x6fa>
 8012db0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012db2:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8012db6:	460b      	mov	r3, r1
 8012db8:	e9da 0100 	ldrd	r0, r1, [sl]
 8012dbc:	e887 0030 	stmia.w	r7, {r4, r5}
 8012dc0:	4622      	mov	r2, r4
 8012dc2:	f7f1 ff97 	bl	8004cf4 <__aeabi_dsub>
 8012dc6:	f1bb 0f00 	cmp.w	fp, #0
 8012dca:	4603      	mov	r3, r0
 8012dcc:	460d      	mov	r5, r1
 8012dce:	dd0d      	ble.n	8012dec <__kernel_rem_pio2+0x694>
 8012dd0:	2401      	movs	r4, #1
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 8012dd8:	4629      	mov	r1, r5
 8012dda:	f7f1 ff8d 	bl	8004cf8 <__adddf3>
 8012dde:	3401      	adds	r4, #1
 8012de0:	45a3      	cmp	fp, r4
 8012de2:	4603      	mov	r3, r0
 8012de4:	460d      	mov	r5, r1
 8012de6:	daf4      	bge.n	8012dd2 <__kernel_rem_pio2+0x67a>
 8012de8:	9a01      	ldr	r2, [sp, #4]
 8012dea:	b10a      	cbz	r2, 8012df0 <__kernel_rem_pio2+0x698>
 8012dec:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8012df0:	4618      	mov	r0, r3
 8012df2:	4629      	mov	r1, r5
 8012df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012df6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012dfa:	9b05      	ldr	r3, [sp, #20]
 8012dfc:	f003 0007 	and.w	r0, r3, #7
 8012e00:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8012e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e08:	2300      	movs	r3, #0
 8012e0a:	461c      	mov	r4, r3
 8012e0c:	9a04      	ldr	r2, [sp, #16]
 8012e0e:	3208      	adds	r2, #8
 8012e10:	4492      	add	sl, r2
 8012e12:	4618      	mov	r0, r3
 8012e14:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8012e18:	4621      	mov	r1, r4
 8012e1a:	f7f1 ff6d 	bl	8004cf8 <__adddf3>
 8012e1e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012e22:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8012e26:	4603      	mov	r3, r0
 8012e28:	460c      	mov	r4, r1
 8012e2a:	d1f2      	bne.n	8012e12 <__kernel_rem_pio2+0x6ba>
 8012e2c:	9a01      	ldr	r2, [sp, #4]
 8012e2e:	b10a      	cbz	r2, 8012e34 <__kernel_rem_pio2+0x6dc>
 8012e30:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8012e34:	4618      	mov	r0, r3
 8012e36:	4621      	mov	r1, r4
 8012e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e3a:	e9c3 0100 	strd	r0, r1, [r3]
 8012e3e:	9b05      	ldr	r3, [sp, #20]
 8012e40:	f003 0007 	and.w	r0, r3, #7
 8012e44:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8012e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e4c:	2600      	movs	r6, #0
 8012e4e:	2700      	movs	r7, #0
 8012e50:	e6f1      	b.n	8012c36 <__kernel_rem_pio2+0x4de>
 8012e52:	4626      	mov	r6, r4
 8012e54:	460f      	mov	r7, r1
 8012e56:	4622      	mov	r2, r4
 8012e58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012e5a:	460b      	mov	r3, r1
 8012e5c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012e60:	e9c4 6700 	strd	r6, r7, [r4]
 8012e64:	f7f1 ff46 	bl	8004cf4 <__aeabi_dsub>
 8012e68:	f1bb 0f00 	cmp.w	fp, #0
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	460d      	mov	r5, r1
 8012e70:	dcae      	bgt.n	8012dd0 <__kernel_rem_pio2+0x678>
 8012e72:	4618      	mov	r0, r3
 8012e74:	4629      	mov	r1, r5
 8012e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012e7c:	e7bd      	b.n	8012dfa <__kernel_rem_pio2+0x6a2>
 8012e7e:	9b08      	ldr	r3, [sp, #32]
 8012e80:	4630      	mov	r0, r6
 8012e82:	425a      	negs	r2, r3
 8012e84:	4639      	mov	r1, r7
 8012e86:	f8cd 9014 	str.w	r9, [sp, #20]
 8012e8a:	f8cd 8004 	str.w	r8, [sp, #4]
 8012e8e:	f000 f9cb 	bl	8013228 <scalbn>
 8012e92:	2200      	movs	r2, #0
 8012e94:	4b2c      	ldr	r3, [pc, #176]	; (8012f48 <__kernel_rem_pio2+0x7f0>)
 8012e96:	4606      	mov	r6, r0
 8012e98:	460f      	mov	r7, r1
 8012e9a:	f7f2 fb65 	bl	8005568 <__aeabi_dcmpge>
 8012e9e:	2800      	cmp	r0, #0
 8012ea0:	d040      	beq.n	8012f24 <__kernel_rem_pio2+0x7cc>
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	4b29      	ldr	r3, [pc, #164]	; (8012f4c <__kernel_rem_pio2+0x7f4>)
 8012ea6:	4630      	mov	r0, r6
 8012ea8:	4639      	mov	r1, r7
 8012eaa:	f7f2 f8d7 	bl	800505c <__aeabi_dmul>
 8012eae:	f7f2 fb6f 	bl	8005590 <__aeabi_d2iz>
 8012eb2:	4604      	mov	r4, r0
 8012eb4:	f7f2 f86c 	bl	8004f90 <__aeabi_i2d>
 8012eb8:	2200      	movs	r2, #0
 8012eba:	4b23      	ldr	r3, [pc, #140]	; (8012f48 <__kernel_rem_pio2+0x7f0>)
 8012ebc:	f7f2 f8ce 	bl	800505c <__aeabi_dmul>
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	4639      	mov	r1, r7
 8012ec6:	4630      	mov	r0, r6
 8012ec8:	f7f1 ff14 	bl	8004cf4 <__aeabi_dsub>
 8012ecc:	f7f2 fb60 	bl	8005590 <__aeabi_d2iz>
 8012ed0:	9b08      	ldr	r3, [sp, #32]
 8012ed2:	f105 0b01 	add.w	fp, r5, #1
 8012ed6:	3318      	adds	r3, #24
 8012ed8:	9308      	str	r3, [sp, #32]
 8012eda:	ab10      	add	r3, sp, #64	; 0x40
 8012edc:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012ee0:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
 8012ee4:	e64e      	b.n	8012b84 <__kernel_rem_pio2+0x42c>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e591      	b.n	8012a0e <__kernel_rem_pio2+0x2b6>
 8012eea:	2400      	movs	r4, #0
 8012eec:	e54c      	b.n	8012988 <__kernel_rem_pio2+0x230>
 8012eee:	4618      	mov	r0, r3
 8012ef0:	e9da 6700 	ldrd	r6, r7, [sl]
 8012ef4:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8012ef8:	4629      	mov	r1, r5
 8012efa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012efc:	e9c5 6700 	strd	r6, r7, [r5]
 8012f00:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8012f04:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8012f08:	e72c      	b.n	8012d64 <__kernel_rem_pio2+0x60c>
 8012f0a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012f0c:	2b03      	cmp	r3, #3
 8012f0e:	f63f af29 	bhi.w	8012d64 <__kernel_rem_pio2+0x60c>
 8012f12:	e8df f003 	tbb	[pc, r3]
 8012f16:	1015      	.short	0x1015
 8012f18:	0210      	.short	0x0210
 8012f1a:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8012f1e:	2300      	movs	r3, #0
 8012f20:	461d      	mov	r5, r3
 8012f22:	e706      	b.n	8012d32 <__kernel_rem_pio2+0x5da>
 8012f24:	4630      	mov	r0, r6
 8012f26:	4639      	mov	r1, r7
 8012f28:	f7f2 fb32 	bl	8005590 <__aeabi_d2iz>
 8012f2c:	ab10      	add	r3, sp, #64	; 0x40
 8012f2e:	46ab      	mov	fp, r5
 8012f30:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012f34:	e626      	b.n	8012b84 <__kernel_rem_pio2+0x42c>
 8012f36:	2400      	movs	r4, #0
 8012f38:	4621      	mov	r1, r4
 8012f3a:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8012f3e:	e734      	b.n	8012daa <__kernel_rem_pio2+0x652>
 8012f40:	2300      	movs	r3, #0
 8012f42:	461c      	mov	r4, r3
 8012f44:	e772      	b.n	8012e2c <__kernel_rem_pio2+0x6d4>
 8012f46:	bf00      	nop
 8012f48:	41700000 	.word	0x41700000
 8012f4c:	3e700000 	.word	0x3e700000

08012f50 <__kernel_sin>:
 8012f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012f58:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012f5c:	b085      	sub	sp, #20
 8012f5e:	460c      	mov	r4, r1
 8012f60:	4690      	mov	r8, r2
 8012f62:	4699      	mov	r9, r3
 8012f64:	4605      	mov	r5, r0
 8012f66:	da04      	bge.n	8012f72 <__kernel_sin+0x22>
 8012f68:	f7f2 fb12 	bl	8005590 <__aeabi_d2iz>
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	f000 8085 	beq.w	801307c <__kernel_sin+0x12c>
 8012f72:	462a      	mov	r2, r5
 8012f74:	4623      	mov	r3, r4
 8012f76:	4628      	mov	r0, r5
 8012f78:	4621      	mov	r1, r4
 8012f7a:	f7f2 f86f 	bl	800505c <__aeabi_dmul>
 8012f7e:	4606      	mov	r6, r0
 8012f80:	460f      	mov	r7, r1
 8012f82:	4602      	mov	r2, r0
 8012f84:	460b      	mov	r3, r1
 8012f86:	4628      	mov	r0, r5
 8012f88:	4621      	mov	r1, r4
 8012f8a:	f7f2 f867 	bl	800505c <__aeabi_dmul>
 8012f8e:	a33e      	add	r3, pc, #248	; (adr r3, 8013088 <__kernel_sin+0x138>)
 8012f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f94:	4682      	mov	sl, r0
 8012f96:	468b      	mov	fp, r1
 8012f98:	4630      	mov	r0, r6
 8012f9a:	4639      	mov	r1, r7
 8012f9c:	f7f2 f85e 	bl	800505c <__aeabi_dmul>
 8012fa0:	a33b      	add	r3, pc, #236	; (adr r3, 8013090 <__kernel_sin+0x140>)
 8012fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa6:	f7f1 fea5 	bl	8004cf4 <__aeabi_dsub>
 8012faa:	4632      	mov	r2, r6
 8012fac:	463b      	mov	r3, r7
 8012fae:	f7f2 f855 	bl	800505c <__aeabi_dmul>
 8012fb2:	a339      	add	r3, pc, #228	; (adr r3, 8013098 <__kernel_sin+0x148>)
 8012fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb8:	f7f1 fe9e 	bl	8004cf8 <__adddf3>
 8012fbc:	4632      	mov	r2, r6
 8012fbe:	463b      	mov	r3, r7
 8012fc0:	f7f2 f84c 	bl	800505c <__aeabi_dmul>
 8012fc4:	a336      	add	r3, pc, #216	; (adr r3, 80130a0 <__kernel_sin+0x150>)
 8012fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fca:	f7f1 fe93 	bl	8004cf4 <__aeabi_dsub>
 8012fce:	4632      	mov	r2, r6
 8012fd0:	463b      	mov	r3, r7
 8012fd2:	f7f2 f843 	bl	800505c <__aeabi_dmul>
 8012fd6:	a334      	add	r3, pc, #208	; (adr r3, 80130a8 <__kernel_sin+0x158>)
 8012fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fdc:	f7f1 fe8c 	bl	8004cf8 <__adddf3>
 8012fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fe2:	e9cd 0100 	strd	r0, r1, [sp]
 8012fe6:	b39b      	cbz	r3, 8013050 <__kernel_sin+0x100>
 8012fe8:	2200      	movs	r2, #0
 8012fea:	4b33      	ldr	r3, [pc, #204]	; (80130b8 <__kernel_sin+0x168>)
 8012fec:	4640      	mov	r0, r8
 8012fee:	4649      	mov	r1, r9
 8012ff0:	f7f2 f834 	bl	800505c <__aeabi_dmul>
 8012ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ffc:	4650      	mov	r0, sl
 8012ffe:	4659      	mov	r1, fp
 8013000:	f7f2 f82c 	bl	800505c <__aeabi_dmul>
 8013004:	4602      	mov	r2, r0
 8013006:	460b      	mov	r3, r1
 8013008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801300c:	f7f1 fe72 	bl	8004cf4 <__aeabi_dsub>
 8013010:	4632      	mov	r2, r6
 8013012:	463b      	mov	r3, r7
 8013014:	f7f2 f822 	bl	800505c <__aeabi_dmul>
 8013018:	4642      	mov	r2, r8
 801301a:	464b      	mov	r3, r9
 801301c:	f7f1 fe6a 	bl	8004cf4 <__aeabi_dsub>
 8013020:	a323      	add	r3, pc, #140	; (adr r3, 80130b0 <__kernel_sin+0x160>)
 8013022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013026:	4606      	mov	r6, r0
 8013028:	460f      	mov	r7, r1
 801302a:	4650      	mov	r0, sl
 801302c:	4659      	mov	r1, fp
 801302e:	f7f2 f815 	bl	800505c <__aeabi_dmul>
 8013032:	4602      	mov	r2, r0
 8013034:	460b      	mov	r3, r1
 8013036:	4630      	mov	r0, r6
 8013038:	4639      	mov	r1, r7
 801303a:	f7f1 fe5d 	bl	8004cf8 <__adddf3>
 801303e:	4602      	mov	r2, r0
 8013040:	460b      	mov	r3, r1
 8013042:	4628      	mov	r0, r5
 8013044:	4621      	mov	r1, r4
 8013046:	f7f1 fe55 	bl	8004cf4 <__aeabi_dsub>
 801304a:	b005      	add	sp, #20
 801304c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013050:	4602      	mov	r2, r0
 8013052:	460b      	mov	r3, r1
 8013054:	4630      	mov	r0, r6
 8013056:	4639      	mov	r1, r7
 8013058:	f7f2 f800 	bl	800505c <__aeabi_dmul>
 801305c:	a314      	add	r3, pc, #80	; (adr r3, 80130b0 <__kernel_sin+0x160>)
 801305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013062:	f7f1 fe47 	bl	8004cf4 <__aeabi_dsub>
 8013066:	4652      	mov	r2, sl
 8013068:	465b      	mov	r3, fp
 801306a:	f7f1 fff7 	bl	800505c <__aeabi_dmul>
 801306e:	462a      	mov	r2, r5
 8013070:	4623      	mov	r3, r4
 8013072:	f7f1 fe41 	bl	8004cf8 <__adddf3>
 8013076:	b005      	add	sp, #20
 8013078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801307c:	4628      	mov	r0, r5
 801307e:	4621      	mov	r1, r4
 8013080:	b005      	add	sp, #20
 8013082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013086:	bf00      	nop
 8013088:	5acfd57c 	.word	0x5acfd57c
 801308c:	3de5d93a 	.word	0x3de5d93a
 8013090:	8a2b9ceb 	.word	0x8a2b9ceb
 8013094:	3e5ae5e6 	.word	0x3e5ae5e6
 8013098:	57b1fe7d 	.word	0x57b1fe7d
 801309c:	3ec71de3 	.word	0x3ec71de3
 80130a0:	19c161d5 	.word	0x19c161d5
 80130a4:	3f2a01a0 	.word	0x3f2a01a0
 80130a8:	1110f8a6 	.word	0x1110f8a6
 80130ac:	3f811111 	.word	0x3f811111
 80130b0:	55555549 	.word	0x55555549
 80130b4:	3fc55555 	.word	0x3fc55555
 80130b8:	3fe00000 	.word	0x3fe00000
 80130bc:	00000000 	.word	0x00000000

080130c0 <floor>:
 80130c0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80130c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130c8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80130cc:	2e13      	cmp	r6, #19
 80130ce:	460b      	mov	r3, r1
 80130d0:	4604      	mov	r4, r0
 80130d2:	460d      	mov	r5, r1
 80130d4:	4688      	mov	r8, r1
 80130d6:	4607      	mov	r7, r0
 80130d8:	dc1c      	bgt.n	8013114 <floor+0x54>
 80130da:	2e00      	cmp	r6, #0
 80130dc:	db3f      	blt.n	801315e <floor+0x9e>
 80130de:	4a3a      	ldr	r2, [pc, #232]	; (80131c8 <floor+0x108>)
 80130e0:	4686      	mov	lr, r0
 80130e2:	fa42 f906 	asr.w	r9, r2, r6
 80130e6:	ea01 0209 	and.w	r2, r1, r9
 80130ea:	4302      	orrs	r2, r0
 80130ec:	d017      	beq.n	801311e <floor+0x5e>
 80130ee:	a334      	add	r3, pc, #208	; (adr r3, 80131c0 <floor+0x100>)
 80130f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f4:	f7f1 fe00 	bl	8004cf8 <__adddf3>
 80130f8:	2200      	movs	r2, #0
 80130fa:	2300      	movs	r3, #0
 80130fc:	f7f2 fa3e 	bl	800557c <__aeabi_dcmpgt>
 8013100:	b120      	cbz	r0, 801310c <floor+0x4c>
 8013102:	2d00      	cmp	r5, #0
 8013104:	db40      	blt.n	8013188 <floor+0xc8>
 8013106:	ea28 0509 	bic.w	r5, r8, r9
 801310a:	2700      	movs	r7, #0
 801310c:	4638      	mov	r0, r7
 801310e:	4629      	mov	r1, r5
 8013110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013114:	2e33      	cmp	r6, #51	; 0x33
 8013116:	dd06      	ble.n	8013126 <floor+0x66>
 8013118:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801311c:	d02f      	beq.n	801317e <floor+0xbe>
 801311e:	4620      	mov	r0, r4
 8013120:	4619      	mov	r1, r3
 8013122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013126:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801312a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801312e:	fa29 f902 	lsr.w	r9, r9, r2
 8013132:	ea10 0f09 	tst.w	r0, r9
 8013136:	d0f2      	beq.n	801311e <floor+0x5e>
 8013138:	a321      	add	r3, pc, #132	; (adr r3, 80131c0 <floor+0x100>)
 801313a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801313e:	f7f1 fddb 	bl	8004cf8 <__adddf3>
 8013142:	2200      	movs	r2, #0
 8013144:	2300      	movs	r3, #0
 8013146:	f7f2 fa19 	bl	800557c <__aeabi_dcmpgt>
 801314a:	2800      	cmp	r0, #0
 801314c:	d0de      	beq.n	801310c <floor+0x4c>
 801314e:	2d00      	cmp	r5, #0
 8013150:	db20      	blt.n	8013194 <floor+0xd4>
 8013152:	4645      	mov	r5, r8
 8013154:	ea27 0709 	bic.w	r7, r7, r9
 8013158:	4638      	mov	r0, r7
 801315a:	4629      	mov	r1, r5
 801315c:	e7d8      	b.n	8013110 <floor+0x50>
 801315e:	a318      	add	r3, pc, #96	; (adr r3, 80131c0 <floor+0x100>)
 8013160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013164:	f7f1 fdc8 	bl	8004cf8 <__adddf3>
 8013168:	2200      	movs	r2, #0
 801316a:	2300      	movs	r3, #0
 801316c:	f7f2 fa06 	bl	800557c <__aeabi_dcmpgt>
 8013170:	2800      	cmp	r0, #0
 8013172:	d0cb      	beq.n	801310c <floor+0x4c>
 8013174:	2d00      	cmp	r5, #0
 8013176:	db18      	blt.n	80131aa <floor+0xea>
 8013178:	2700      	movs	r7, #0
 801317a:	463d      	mov	r5, r7
 801317c:	e7c6      	b.n	801310c <floor+0x4c>
 801317e:	4602      	mov	r2, r0
 8013180:	460b      	mov	r3, r1
 8013182:	f7f1 fdb9 	bl	8004cf8 <__adddf3>
 8013186:	e7cc      	b.n	8013122 <floor+0x62>
 8013188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801318c:	fa43 f606 	asr.w	r6, r3, r6
 8013190:	44b0      	add	r8, r6
 8013192:	e7b8      	b.n	8013106 <floor+0x46>
 8013194:	2e14      	cmp	r6, #20
 8013196:	d010      	beq.n	80131ba <floor+0xfa>
 8013198:	2301      	movs	r3, #1
 801319a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801319e:	fa03 f606 	lsl.w	r6, r3, r6
 80131a2:	1937      	adds	r7, r6, r4
 80131a4:	bf28      	it	cs
 80131a6:	4498      	addcs	r8, r3
 80131a8:	e7d3      	b.n	8013152 <floor+0x92>
 80131aa:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80131ae:	4b07      	ldr	r3, [pc, #28]	; (80131cc <floor+0x10c>)
 80131b0:	4322      	orrs	r2, r4
 80131b2:	bf18      	it	ne
 80131b4:	461d      	movne	r5, r3
 80131b6:	2700      	movs	r7, #0
 80131b8:	e7a8      	b.n	801310c <floor+0x4c>
 80131ba:	f105 0801 	add.w	r8, r5, #1
 80131be:	e7c8      	b.n	8013152 <floor+0x92>
 80131c0:	8800759c 	.word	0x8800759c
 80131c4:	7e37e43c 	.word	0x7e37e43c
 80131c8:	000fffff 	.word	0x000fffff
 80131cc:	bff00000 	.word	0xbff00000

080131d0 <__fpclassifyd>:
 80131d0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80131d4:	b410      	push	{r4}
 80131d6:	d007      	beq.n	80131e8 <__fpclassifyd+0x18>
 80131d8:	4a10      	ldr	r2, [pc, #64]	; (801321c <__fpclassifyd+0x4c>)
 80131da:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 80131de:	4294      	cmp	r4, r2
 80131e0:	d806      	bhi.n	80131f0 <__fpclassifyd+0x20>
 80131e2:	2004      	movs	r0, #4
 80131e4:	bc10      	pop	{r4}
 80131e6:	4770      	bx	lr
 80131e8:	b910      	cbnz	r0, 80131f0 <__fpclassifyd+0x20>
 80131ea:	2002      	movs	r0, #2
 80131ec:	bc10      	pop	{r4}
 80131ee:	4770      	bx	lr
 80131f0:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 80131f4:	4a09      	ldr	r2, [pc, #36]	; (801321c <__fpclassifyd+0x4c>)
 80131f6:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 80131fa:	4291      	cmp	r1, r2
 80131fc:	d9f1      	bls.n	80131e2 <__fpclassifyd+0x12>
 80131fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013202:	d201      	bcs.n	8013208 <__fpclassifyd+0x38>
 8013204:	2003      	movs	r0, #3
 8013206:	e7ed      	b.n	80131e4 <__fpclassifyd+0x14>
 8013208:	4a05      	ldr	r2, [pc, #20]	; (8013220 <__fpclassifyd+0x50>)
 801320a:	4293      	cmp	r3, r2
 801320c:	d001      	beq.n	8013212 <__fpclassifyd+0x42>
 801320e:	2000      	movs	r0, #0
 8013210:	e7e8      	b.n	80131e4 <__fpclassifyd+0x14>
 8013212:	fab0 f080 	clz	r0, r0
 8013216:	0940      	lsrs	r0, r0, #5
 8013218:	e7e4      	b.n	80131e4 <__fpclassifyd+0x14>
 801321a:	bf00      	nop
 801321c:	7fdfffff 	.word	0x7fdfffff
 8013220:	7ff00000 	.word	0x7ff00000

08013224 <matherr>:
 8013224:	2000      	movs	r0, #0
 8013226:	4770      	bx	lr

08013228 <scalbn>:
 8013228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801322a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801322e:	4604      	mov	r4, r0
 8013230:	460d      	mov	r5, r1
 8013232:	460b      	mov	r3, r1
 8013234:	4617      	mov	r7, r2
 8013236:	bb06      	cbnz	r6, 801327a <scalbn+0x52>
 8013238:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801323c:	4303      	orrs	r3, r0
 801323e:	d025      	beq.n	801328c <scalbn+0x64>
 8013240:	2200      	movs	r2, #0
 8013242:	4b2f      	ldr	r3, [pc, #188]	; (8013300 <scalbn+0xd8>)
 8013244:	f7f1 ff0a 	bl	800505c <__aeabi_dmul>
 8013248:	4a2e      	ldr	r2, [pc, #184]	; (8013304 <scalbn+0xdc>)
 801324a:	4604      	mov	r4, r0
 801324c:	4297      	cmp	r7, r2
 801324e:	460d      	mov	r5, r1
 8013250:	460b      	mov	r3, r1
 8013252:	db2a      	blt.n	80132aa <scalbn+0x82>
 8013254:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8013258:	3e36      	subs	r6, #54	; 0x36
 801325a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 801325e:	443e      	add	r6, r7
 8013260:	4296      	cmp	r6, r2
 8013262:	dc28      	bgt.n	80132b6 <scalbn+0x8e>
 8013264:	2e00      	cmp	r6, #0
 8013266:	dd12      	ble.n	801328e <scalbn+0x66>
 8013268:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801326c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013270:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8013274:	4620      	mov	r0, r4
 8013276:	4629      	mov	r1, r5
 8013278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801327a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801327e:	4296      	cmp	r6, r2
 8013280:	d1eb      	bne.n	801325a <scalbn+0x32>
 8013282:	4602      	mov	r2, r0
 8013284:	460b      	mov	r3, r1
 8013286:	f7f1 fd37 	bl	8004cf8 <__adddf3>
 801328a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801328c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801328e:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8013292:	da1d      	bge.n	80132d0 <scalbn+0xa8>
 8013294:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013298:	429f      	cmp	r7, r3
 801329a:	dc0c      	bgt.n	80132b6 <scalbn+0x8e>
 801329c:	a114      	add	r1, pc, #80	; (adr r1, 80132f0 <scalbn+0xc8>)
 801329e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132a2:	4622      	mov	r2, r4
 80132a4:	462b      	mov	r3, r5
 80132a6:	f000 f831 	bl	801330c <copysign>
 80132aa:	a311      	add	r3, pc, #68	; (adr r3, 80132f0 <scalbn+0xc8>)
 80132ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b0:	f7f1 fed4 	bl	800505c <__aeabi_dmul>
 80132b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132b6:	4622      	mov	r2, r4
 80132b8:	a10f      	add	r1, pc, #60	; (adr r1, 80132f8 <scalbn+0xd0>)
 80132ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132be:	462b      	mov	r3, r5
 80132c0:	f000 f824 	bl	801330c <copysign>
 80132c4:	a30c      	add	r3, pc, #48	; (adr r3, 80132f8 <scalbn+0xd0>)
 80132c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ca:	f7f1 fec7 	bl	800505c <__aeabi_dmul>
 80132ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80132d8:	3636      	adds	r6, #54	; 0x36
 80132da:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80132de:	4620      	mov	r0, r4
 80132e0:	4629      	mov	r1, r5
 80132e2:	2200      	movs	r2, #0
 80132e4:	4b08      	ldr	r3, [pc, #32]	; (8013308 <scalbn+0xe0>)
 80132e6:	f7f1 feb9 	bl	800505c <__aeabi_dmul>
 80132ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132ec:	f3af 8000 	nop.w
 80132f0:	c2f8f359 	.word	0xc2f8f359
 80132f4:	01a56e1f 	.word	0x01a56e1f
 80132f8:	8800759c 	.word	0x8800759c
 80132fc:	7e37e43c 	.word	0x7e37e43c
 8013300:	43500000 	.word	0x43500000
 8013304:	ffff3cb0 	.word	0xffff3cb0
 8013308:	3c900000 	.word	0x3c900000

0801330c <copysign>:
 801330c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013310:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8013314:	ea42 0103 	orr.w	r1, r2, r3
 8013318:	4770      	bx	lr
 801331a:	bf00      	nop

0801331c <abort>:
 801331c:	b508      	push	{r3, lr}
 801331e:	2006      	movs	r0, #6
 8013320:	f000 fa00 	bl	8013724 <raise>
 8013324:	2001      	movs	r0, #1
 8013326:	f001 fab1 	bl	801488c <_exit>
	...

0801332c <__errno>:
 801332c:	4b01      	ldr	r3, [pc, #4]	; (8013334 <__errno+0x8>)
 801332e:	6818      	ldr	r0, [r3, #0]
 8013330:	4770      	bx	lr
 8013332:	bf00      	nop
 8013334:	20000098 	.word	0x20000098

08013338 <exit>:
 8013338:	b508      	push	{r3, lr}
 801333a:	4b07      	ldr	r3, [pc, #28]	; (8013358 <exit+0x20>)
 801333c:	4604      	mov	r4, r0
 801333e:	b113      	cbz	r3, 8013346 <exit+0xe>
 8013340:	2100      	movs	r1, #0
 8013342:	f3af 8000 	nop.w
 8013346:	4b05      	ldr	r3, [pc, #20]	; (801335c <exit+0x24>)
 8013348:	6818      	ldr	r0, [r3, #0]
 801334a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801334c:	b103      	cbz	r3, 8013350 <exit+0x18>
 801334e:	4798      	blx	r3
 8013350:	4620      	mov	r0, r4
 8013352:	f001 fa9b 	bl	801488c <_exit>
 8013356:	bf00      	nop
 8013358:	00000000 	.word	0x00000000
 801335c:	0801695c 	.word	0x0801695c

08013360 <_fputs_r>:
 8013360:	b570      	push	{r4, r5, r6, lr}
 8013362:	460d      	mov	r5, r1
 8013364:	4614      	mov	r4, r2
 8013366:	4606      	mov	r6, r0
 8013368:	b118      	cbz	r0, 8013372 <_fputs_r+0x12>
 801336a:	6983      	ldr	r3, [r0, #24]
 801336c:	b90b      	cbnz	r3, 8013372 <_fputs_r+0x12>
 801336e:	f000 fc6f 	bl	8013c50 <__sinit>
 8013372:	4b22      	ldr	r3, [pc, #136]	; (80133fc <_fputs_r+0x9c>)
 8013374:	429c      	cmp	r4, r3
 8013376:	d101      	bne.n	801337c <_fputs_r+0x1c>
 8013378:	6874      	ldr	r4, [r6, #4]
 801337a:	e008      	b.n	801338e <_fputs_r+0x2e>
 801337c:	4b20      	ldr	r3, [pc, #128]	; (8013400 <_fputs_r+0xa0>)
 801337e:	429c      	cmp	r4, r3
 8013380:	d101      	bne.n	8013386 <_fputs_r+0x26>
 8013382:	68b4      	ldr	r4, [r6, #8]
 8013384:	e003      	b.n	801338e <_fputs_r+0x2e>
 8013386:	4b1f      	ldr	r3, [pc, #124]	; (8013404 <_fputs_r+0xa4>)
 8013388:	429c      	cmp	r4, r3
 801338a:	bf08      	it	eq
 801338c:	68f4      	ldreq	r4, [r6, #12]
 801338e:	89a3      	ldrh	r3, [r4, #12]
 8013390:	071a      	lsls	r2, r3, #28
 8013392:	d501      	bpl.n	8013398 <_fputs_r+0x38>
 8013394:	6923      	ldr	r3, [r4, #16]
 8013396:	b99b      	cbnz	r3, 80133c0 <_fputs_r+0x60>
 8013398:	4621      	mov	r1, r4
 801339a:	4630      	mov	r0, r6
 801339c:	f000 fae0 	bl	8013960 <__swsetup_r>
 80133a0:	b170      	cbz	r0, 80133c0 <_fputs_r+0x60>
 80133a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133a6:	bd70      	pop	{r4, r5, r6, pc}
 80133a8:	68a3      	ldr	r3, [r4, #8]
 80133aa:	3b01      	subs	r3, #1
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	60a3      	str	r3, [r4, #8]
 80133b0:	db0b      	blt.n	80133ca <_fputs_r+0x6a>
 80133b2:	6823      	ldr	r3, [r4, #0]
 80133b4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80133b8:	701a      	strb	r2, [r3, #0]
 80133ba:	6823      	ldr	r3, [r4, #0]
 80133bc:	3301      	adds	r3, #1
 80133be:	6023      	str	r3, [r4, #0]
 80133c0:	f815 0b01 	ldrb.w	r0, [r5], #1
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d1ef      	bne.n	80133a8 <_fputs_r+0x48>
 80133c8:	e016      	b.n	80133f8 <_fputs_r+0x98>
 80133ca:	69a2      	ldr	r2, [r4, #24]
 80133cc:	4293      	cmp	r3, r2
 80133ce:	db09      	blt.n	80133e4 <_fputs_r+0x84>
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80133d6:	701a      	strb	r2, [r3, #0]
 80133d8:	6823      	ldr	r3, [r4, #0]
 80133da:	7819      	ldrb	r1, [r3, #0]
 80133dc:	290a      	cmp	r1, #10
 80133de:	d1ed      	bne.n	80133bc <_fputs_r+0x5c>
 80133e0:	4622      	mov	r2, r4
 80133e2:	e002      	b.n	80133ea <_fputs_r+0x8a>
 80133e4:	4622      	mov	r2, r4
 80133e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80133ea:	4630      	mov	r0, r6
 80133ec:	f000 fa4a 	bl	8013884 <__swbuf_r>
 80133f0:	1c43      	adds	r3, r0, #1
 80133f2:	4258      	negs	r0, r3
 80133f4:	4158      	adcs	r0, r3
 80133f6:	e7d3      	b.n	80133a0 <_fputs_r+0x40>
 80133f8:	bd70      	pop	{r4, r5, r6, pc}
 80133fa:	bf00      	nop
 80133fc:	08016960 	.word	0x08016960
 8013400:	08016980 	.word	0x08016980
 8013404:	080169a0 	.word	0x080169a0

08013408 <fputs>:
 8013408:	4b02      	ldr	r3, [pc, #8]	; (8013414 <fputs+0xc>)
 801340a:	460a      	mov	r2, r1
 801340c:	4601      	mov	r1, r0
 801340e:	6818      	ldr	r0, [r3, #0]
 8013410:	f7ff bfa6 	b.w	8013360 <_fputs_r>
 8013414:	20000098 	.word	0x20000098

08013418 <__libc_init_array>:
 8013418:	4b0e      	ldr	r3, [pc, #56]	; (8013454 <__libc_init_array+0x3c>)
 801341a:	b570      	push	{r4, r5, r6, lr}
 801341c:	461e      	mov	r6, r3
 801341e:	4c0e      	ldr	r4, [pc, #56]	; (8013458 <__libc_init_array+0x40>)
 8013420:	2500      	movs	r5, #0
 8013422:	1ae4      	subs	r4, r4, r3
 8013424:	10a4      	asrs	r4, r4, #2
 8013426:	42a5      	cmp	r5, r4
 8013428:	d004      	beq.n	8013434 <__libc_init_array+0x1c>
 801342a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801342e:	4798      	blx	r3
 8013430:	3501      	adds	r5, #1
 8013432:	e7f8      	b.n	8013426 <__libc_init_array+0xe>
 8013434:	f001 fa2e 	bl	8014894 <_init>
 8013438:	4b08      	ldr	r3, [pc, #32]	; (801345c <__libc_init_array+0x44>)
 801343a:	4c09      	ldr	r4, [pc, #36]	; (8013460 <__libc_init_array+0x48>)
 801343c:	461e      	mov	r6, r3
 801343e:	1ae4      	subs	r4, r4, r3
 8013440:	10a4      	asrs	r4, r4, #2
 8013442:	2500      	movs	r5, #0
 8013444:	42a5      	cmp	r5, r4
 8013446:	d004      	beq.n	8013452 <__libc_init_array+0x3a>
 8013448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801344c:	4798      	blx	r3
 801344e:	3501      	adds	r5, #1
 8013450:	e7f8      	b.n	8013444 <__libc_init_array+0x2c>
 8013452:	bd70      	pop	{r4, r5, r6, pc}
 8013454:	08016bec 	.word	0x08016bec
 8013458:	08016bec 	.word	0x08016bec
 801345c:	08016bec 	.word	0x08016bec
 8013460:	08016bf4 	.word	0x08016bf4

08013464 <malloc>:
 8013464:	4b02      	ldr	r3, [pc, #8]	; (8013470 <malloc+0xc>)
 8013466:	4601      	mov	r1, r0
 8013468:	6818      	ldr	r0, [r3, #0]
 801346a:	f000 b871 	b.w	8013550 <_malloc_r>
 801346e:	bf00      	nop
 8013470:	20000098 	.word	0x20000098

08013474 <free>:
 8013474:	4b02      	ldr	r3, [pc, #8]	; (8013480 <free+0xc>)
 8013476:	4601      	mov	r1, r0
 8013478:	6818      	ldr	r0, [r3, #0]
 801347a:	f000 b825 	b.w	80134c8 <_free_r>
 801347e:	bf00      	nop
 8013480:	20000098 	.word	0x20000098

08013484 <memcmp>:
 8013484:	b510      	push	{r4, lr}
 8013486:	3901      	subs	r1, #1
 8013488:	4402      	add	r2, r0
 801348a:	4290      	cmp	r0, r2
 801348c:	d007      	beq.n	801349e <memcmp+0x1a>
 801348e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013492:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013496:	42a3      	cmp	r3, r4
 8013498:	d0f7      	beq.n	801348a <memcmp+0x6>
 801349a:	1b18      	subs	r0, r3, r4
 801349c:	bd10      	pop	{r4, pc}
 801349e:	2000      	movs	r0, #0
 80134a0:	bd10      	pop	{r4, pc}

080134a2 <memcpy>:
 80134a2:	b510      	push	{r4, lr}
 80134a4:	1e43      	subs	r3, r0, #1
 80134a6:	440a      	add	r2, r1
 80134a8:	4291      	cmp	r1, r2
 80134aa:	d004      	beq.n	80134b6 <memcpy+0x14>
 80134ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134b4:	e7f8      	b.n	80134a8 <memcpy+0x6>
 80134b6:	bd10      	pop	{r4, pc}

080134b8 <memset>:
 80134b8:	4603      	mov	r3, r0
 80134ba:	4402      	add	r2, r0
 80134bc:	4293      	cmp	r3, r2
 80134be:	d002      	beq.n	80134c6 <memset+0xe>
 80134c0:	f803 1b01 	strb.w	r1, [r3], #1
 80134c4:	e7fa      	b.n	80134bc <memset+0x4>
 80134c6:	4770      	bx	lr

080134c8 <_free_r>:
 80134c8:	b530      	push	{r4, r5, lr}
 80134ca:	2900      	cmp	r1, #0
 80134cc:	d03c      	beq.n	8013548 <_free_r+0x80>
 80134ce:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80134d2:	1f0b      	subs	r3, r1, #4
 80134d4:	491d      	ldr	r1, [pc, #116]	; (801354c <_free_r+0x84>)
 80134d6:	2a00      	cmp	r2, #0
 80134d8:	bfb8      	it	lt
 80134da:	189b      	addlt	r3, r3, r2
 80134dc:	680a      	ldr	r2, [r1, #0]
 80134de:	460c      	mov	r4, r1
 80134e0:	b912      	cbnz	r2, 80134e8 <_free_r+0x20>
 80134e2:	605a      	str	r2, [r3, #4]
 80134e4:	600b      	str	r3, [r1, #0]
 80134e6:	bd30      	pop	{r4, r5, pc}
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d90d      	bls.n	8013508 <_free_r+0x40>
 80134ec:	6819      	ldr	r1, [r3, #0]
 80134ee:	1858      	adds	r0, r3, r1
 80134f0:	4282      	cmp	r2, r0
 80134f2:	bf01      	itttt	eq
 80134f4:	6810      	ldreq	r0, [r2, #0]
 80134f6:	6852      	ldreq	r2, [r2, #4]
 80134f8:	1809      	addeq	r1, r1, r0
 80134fa:	6019      	streq	r1, [r3, #0]
 80134fc:	605a      	str	r2, [r3, #4]
 80134fe:	6023      	str	r3, [r4, #0]
 8013500:	bd30      	pop	{r4, r5, pc}
 8013502:	4299      	cmp	r1, r3
 8013504:	d803      	bhi.n	801350e <_free_r+0x46>
 8013506:	460a      	mov	r2, r1
 8013508:	6851      	ldr	r1, [r2, #4]
 801350a:	2900      	cmp	r1, #0
 801350c:	d1f9      	bne.n	8013502 <_free_r+0x3a>
 801350e:	6814      	ldr	r4, [r2, #0]
 8013510:	1915      	adds	r5, r2, r4
 8013512:	429d      	cmp	r5, r3
 8013514:	d10a      	bne.n	801352c <_free_r+0x64>
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4423      	add	r3, r4
 801351a:	18d0      	adds	r0, r2, r3
 801351c:	4281      	cmp	r1, r0
 801351e:	6013      	str	r3, [r2, #0]
 8013520:	d112      	bne.n	8013548 <_free_r+0x80>
 8013522:	6808      	ldr	r0, [r1, #0]
 8013524:	4403      	add	r3, r0
 8013526:	6013      	str	r3, [r2, #0]
 8013528:	684b      	ldr	r3, [r1, #4]
 801352a:	e00c      	b.n	8013546 <_free_r+0x7e>
 801352c:	d902      	bls.n	8013534 <_free_r+0x6c>
 801352e:	230c      	movs	r3, #12
 8013530:	6003      	str	r3, [r0, #0]
 8013532:	bd30      	pop	{r4, r5, pc}
 8013534:	6818      	ldr	r0, [r3, #0]
 8013536:	181c      	adds	r4, r3, r0
 8013538:	42a1      	cmp	r1, r4
 801353a:	bf01      	itttt	eq
 801353c:	680c      	ldreq	r4, [r1, #0]
 801353e:	6849      	ldreq	r1, [r1, #4]
 8013540:	1900      	addeq	r0, r0, r4
 8013542:	6018      	streq	r0, [r3, #0]
 8013544:	6059      	str	r1, [r3, #4]
 8013546:	6053      	str	r3, [r2, #4]
 8013548:	bd30      	pop	{r4, r5, pc}
 801354a:	bf00      	nop
 801354c:	20000cfc 	.word	0x20000cfc

08013550 <_malloc_r>:
 8013550:	b570      	push	{r4, r5, r6, lr}
 8013552:	1ccd      	adds	r5, r1, #3
 8013554:	f025 0503 	bic.w	r5, r5, #3
 8013558:	3508      	adds	r5, #8
 801355a:	2d0c      	cmp	r5, #12
 801355c:	bf38      	it	cc
 801355e:	250c      	movcc	r5, #12
 8013560:	2d00      	cmp	r5, #0
 8013562:	4606      	mov	r6, r0
 8013564:	da03      	bge.n	801356e <_malloc_r+0x1e>
 8013566:	230c      	movs	r3, #12
 8013568:	6033      	str	r3, [r6, #0]
 801356a:	2000      	movs	r0, #0
 801356c:	bd70      	pop	{r4, r5, r6, pc}
 801356e:	42a9      	cmp	r1, r5
 8013570:	d8f9      	bhi.n	8013566 <_malloc_r+0x16>
 8013572:	4b1f      	ldr	r3, [pc, #124]	; (80135f0 <_malloc_r+0xa0>)
 8013574:	681c      	ldr	r4, [r3, #0]
 8013576:	461a      	mov	r2, r3
 8013578:	4621      	mov	r1, r4
 801357a:	b1a1      	cbz	r1, 80135a6 <_malloc_r+0x56>
 801357c:	680b      	ldr	r3, [r1, #0]
 801357e:	1b5b      	subs	r3, r3, r5
 8013580:	d40e      	bmi.n	80135a0 <_malloc_r+0x50>
 8013582:	2b0b      	cmp	r3, #11
 8013584:	d903      	bls.n	801358e <_malloc_r+0x3e>
 8013586:	600b      	str	r3, [r1, #0]
 8013588:	18cc      	adds	r4, r1, r3
 801358a:	50cd      	str	r5, [r1, r3]
 801358c:	e01e      	b.n	80135cc <_malloc_r+0x7c>
 801358e:	428c      	cmp	r4, r1
 8013590:	bf0b      	itete	eq
 8013592:	6863      	ldreq	r3, [r4, #4]
 8013594:	684b      	ldrne	r3, [r1, #4]
 8013596:	6013      	streq	r3, [r2, #0]
 8013598:	6063      	strne	r3, [r4, #4]
 801359a:	bf18      	it	ne
 801359c:	460c      	movne	r4, r1
 801359e:	e015      	b.n	80135cc <_malloc_r+0x7c>
 80135a0:	460c      	mov	r4, r1
 80135a2:	6849      	ldr	r1, [r1, #4]
 80135a4:	e7e9      	b.n	801357a <_malloc_r+0x2a>
 80135a6:	4c13      	ldr	r4, [pc, #76]	; (80135f4 <_malloc_r+0xa4>)
 80135a8:	6823      	ldr	r3, [r4, #0]
 80135aa:	b91b      	cbnz	r3, 80135b4 <_malloc_r+0x64>
 80135ac:	4630      	mov	r0, r6
 80135ae:	f000 f82b 	bl	8013608 <_sbrk_r>
 80135b2:	6020      	str	r0, [r4, #0]
 80135b4:	4629      	mov	r1, r5
 80135b6:	4630      	mov	r0, r6
 80135b8:	f000 f826 	bl	8013608 <_sbrk_r>
 80135bc:	1c43      	adds	r3, r0, #1
 80135be:	d0d2      	beq.n	8013566 <_malloc_r+0x16>
 80135c0:	1cc4      	adds	r4, r0, #3
 80135c2:	f024 0403 	bic.w	r4, r4, #3
 80135c6:	42a0      	cmp	r0, r4
 80135c8:	d10a      	bne.n	80135e0 <_malloc_r+0x90>
 80135ca:	6025      	str	r5, [r4, #0]
 80135cc:	f104 000b 	add.w	r0, r4, #11
 80135d0:	1d23      	adds	r3, r4, #4
 80135d2:	f020 0007 	bic.w	r0, r0, #7
 80135d6:	1ac3      	subs	r3, r0, r3
 80135d8:	d009      	beq.n	80135ee <_malloc_r+0x9e>
 80135da:	425a      	negs	r2, r3
 80135dc:	50e2      	str	r2, [r4, r3]
 80135de:	bd70      	pop	{r4, r5, r6, pc}
 80135e0:	1a21      	subs	r1, r4, r0
 80135e2:	4630      	mov	r0, r6
 80135e4:	f000 f810 	bl	8013608 <_sbrk_r>
 80135e8:	3001      	adds	r0, #1
 80135ea:	d1ee      	bne.n	80135ca <_malloc_r+0x7a>
 80135ec:	e7bb      	b.n	8013566 <_malloc_r+0x16>
 80135ee:	bd70      	pop	{r4, r5, r6, pc}
 80135f0:	20000cfc 	.word	0x20000cfc
 80135f4:	20000cf8 	.word	0x20000cf8

080135f8 <realloc>:
 80135f8:	4b02      	ldr	r3, [pc, #8]	; (8013604 <realloc+0xc>)
 80135fa:	460a      	mov	r2, r1
 80135fc:	4601      	mov	r1, r0
 80135fe:	6818      	ldr	r0, [r3, #0]
 8013600:	f000 bc30 	b.w	8013e64 <_realloc_r>
 8013604:	20000098 	.word	0x20000098

08013608 <_sbrk_r>:
 8013608:	b538      	push	{r3, r4, r5, lr}
 801360a:	4c06      	ldr	r4, [pc, #24]	; (8013624 <_sbrk_r+0x1c>)
 801360c:	2300      	movs	r3, #0
 801360e:	4605      	mov	r5, r0
 8013610:	4608      	mov	r0, r1
 8013612:	6023      	str	r3, [r4, #0]
 8013614:	f001 f924 	bl	8014860 <_sbrk>
 8013618:	1c43      	adds	r3, r0, #1
 801361a:	d102      	bne.n	8013622 <_sbrk_r+0x1a>
 801361c:	6823      	ldr	r3, [r4, #0]
 801361e:	b103      	cbz	r3, 8013622 <_sbrk_r+0x1a>
 8013620:	602b      	str	r3, [r5, #0]
 8013622:	bd38      	pop	{r3, r4, r5, pc}
 8013624:	20000d20 	.word	0x20000d20

08013628 <_init_signal_r>:
 8013628:	b538      	push	{r3, r4, r5, lr}
 801362a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 801362c:	4605      	mov	r5, r0
 801362e:	b10c      	cbz	r4, 8013634 <_init_signal_r+0xc>
 8013630:	2000      	movs	r0, #0
 8013632:	bd38      	pop	{r3, r4, r5, pc}
 8013634:	2180      	movs	r1, #128	; 0x80
 8013636:	f7ff ff8b 	bl	8013550 <_malloc_r>
 801363a:	6468      	str	r0, [r5, #68]	; 0x44
 801363c:	b138      	cbz	r0, 801364e <_init_signal_r+0x26>
 801363e:	4623      	mov	r3, r4
 8013640:	4621      	mov	r1, r4
 8013642:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8013644:	50d1      	str	r1, [r2, r3]
 8013646:	3304      	adds	r3, #4
 8013648:	2b80      	cmp	r3, #128	; 0x80
 801364a:	d1fa      	bne.n	8013642 <_init_signal_r+0x1a>
 801364c:	e7f0      	b.n	8013630 <_init_signal_r+0x8>
 801364e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013652:	bd38      	pop	{r3, r4, r5, pc}

08013654 <_signal_r>:
 8013654:	291f      	cmp	r1, #31
 8013656:	b570      	push	{r4, r5, r6, lr}
 8013658:	4604      	mov	r4, r0
 801365a:	460d      	mov	r5, r1
 801365c:	4616      	mov	r6, r2
 801365e:	d902      	bls.n	8013666 <_signal_r+0x12>
 8013660:	2316      	movs	r3, #22
 8013662:	6003      	str	r3, [r0, #0]
 8013664:	e00b      	b.n	801367e <_signal_r+0x2a>
 8013666:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8013668:	b12b      	cbz	r3, 8013676 <_signal_r+0x22>
 801366a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801366c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013670:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8013674:	bd70      	pop	{r4, r5, r6, pc}
 8013676:	f7ff ffd7 	bl	8013628 <_init_signal_r>
 801367a:	2800      	cmp	r0, #0
 801367c:	d0f5      	beq.n	801366a <_signal_r+0x16>
 801367e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013682:	bd70      	pop	{r4, r5, r6, pc}

08013684 <_raise_r>:
 8013684:	291f      	cmp	r1, #31
 8013686:	b538      	push	{r3, r4, r5, lr}
 8013688:	4604      	mov	r4, r0
 801368a:	460d      	mov	r5, r1
 801368c:	d904      	bls.n	8013698 <_raise_r+0x14>
 801368e:	2316      	movs	r3, #22
 8013690:	6003      	str	r3, [r0, #0]
 8013692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013696:	bd38      	pop	{r3, r4, r5, pc}
 8013698:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801369a:	b112      	cbz	r2, 80136a2 <_raise_r+0x1e>
 801369c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80136a0:	b94b      	cbnz	r3, 80136b6 <_raise_r+0x32>
 80136a2:	4620      	mov	r0, r4
 80136a4:	f000 f86e 	bl	8013784 <_getpid_r>
 80136a8:	462a      	mov	r2, r5
 80136aa:	4601      	mov	r1, r0
 80136ac:	4620      	mov	r0, r4
 80136ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136b2:	f000 b855 	b.w	8013760 <_kill_r>
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	d00c      	beq.n	80136d4 <_raise_r+0x50>
 80136ba:	1c59      	adds	r1, r3, #1
 80136bc:	d103      	bne.n	80136c6 <_raise_r+0x42>
 80136be:	2316      	movs	r3, #22
 80136c0:	6003      	str	r3, [r0, #0]
 80136c2:	2001      	movs	r0, #1
 80136c4:	bd38      	pop	{r3, r4, r5, pc}
 80136c6:	2400      	movs	r4, #0
 80136c8:	4628      	mov	r0, r5
 80136ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80136ce:	4798      	blx	r3
 80136d0:	4620      	mov	r0, r4
 80136d2:	bd38      	pop	{r3, r4, r5, pc}
 80136d4:	2000      	movs	r0, #0
 80136d6:	bd38      	pop	{r3, r4, r5, pc}

080136d8 <__sigtramp_r>:
 80136d8:	291f      	cmp	r1, #31
 80136da:	b538      	push	{r3, r4, r5, lr}
 80136dc:	4604      	mov	r4, r0
 80136de:	460d      	mov	r5, r1
 80136e0:	d902      	bls.n	80136e8 <__sigtramp_r+0x10>
 80136e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136e6:	bd38      	pop	{r3, r4, r5, pc}
 80136e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80136ea:	b123      	cbz	r3, 80136f6 <__sigtramp_r+0x1e>
 80136ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80136ee:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 80136f2:	b92b      	cbnz	r3, 8013700 <__sigtramp_r+0x28>
 80136f4:	e00f      	b.n	8013716 <__sigtramp_r+0x3e>
 80136f6:	f7ff ff97 	bl	8013628 <_init_signal_r>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d0f6      	beq.n	80136ec <__sigtramp_r+0x14>
 80136fe:	e7f0      	b.n	80136e2 <__sigtramp_r+0xa>
 8013700:	1c59      	adds	r1, r3, #1
 8013702:	d00a      	beq.n	801371a <__sigtramp_r+0x42>
 8013704:	2b01      	cmp	r3, #1
 8013706:	d00a      	beq.n	801371e <__sigtramp_r+0x46>
 8013708:	2400      	movs	r4, #0
 801370a:	4628      	mov	r0, r5
 801370c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013710:	4798      	blx	r3
 8013712:	4620      	mov	r0, r4
 8013714:	bd38      	pop	{r3, r4, r5, pc}
 8013716:	2001      	movs	r0, #1
 8013718:	bd38      	pop	{r3, r4, r5, pc}
 801371a:	2002      	movs	r0, #2
 801371c:	bd38      	pop	{r3, r4, r5, pc}
 801371e:	2003      	movs	r0, #3
 8013720:	bd38      	pop	{r3, r4, r5, pc}
	...

08013724 <raise>:
 8013724:	4b02      	ldr	r3, [pc, #8]	; (8013730 <raise+0xc>)
 8013726:	4601      	mov	r1, r0
 8013728:	6818      	ldr	r0, [r3, #0]
 801372a:	f7ff bfab 	b.w	8013684 <_raise_r>
 801372e:	bf00      	nop
 8013730:	20000098 	.word	0x20000098

08013734 <signal>:
 8013734:	4b02      	ldr	r3, [pc, #8]	; (8013740 <signal+0xc>)
 8013736:	460a      	mov	r2, r1
 8013738:	4601      	mov	r1, r0
 801373a:	6818      	ldr	r0, [r3, #0]
 801373c:	f7ff bf8a 	b.w	8013654 <_signal_r>
 8013740:	20000098 	.word	0x20000098

08013744 <_init_signal>:
 8013744:	4b01      	ldr	r3, [pc, #4]	; (801374c <_init_signal+0x8>)
 8013746:	6818      	ldr	r0, [r3, #0]
 8013748:	f7ff bf6e 	b.w	8013628 <_init_signal_r>
 801374c:	20000098 	.word	0x20000098

08013750 <__sigtramp>:
 8013750:	4b02      	ldr	r3, [pc, #8]	; (801375c <__sigtramp+0xc>)
 8013752:	4601      	mov	r1, r0
 8013754:	6818      	ldr	r0, [r3, #0]
 8013756:	f7ff bfbf 	b.w	80136d8 <__sigtramp_r>
 801375a:	bf00      	nop
 801375c:	20000098 	.word	0x20000098

08013760 <_kill_r>:
 8013760:	b538      	push	{r3, r4, r5, lr}
 8013762:	4c07      	ldr	r4, [pc, #28]	; (8013780 <_kill_r+0x20>)
 8013764:	2300      	movs	r3, #0
 8013766:	4605      	mov	r5, r0
 8013768:	4608      	mov	r0, r1
 801376a:	4611      	mov	r1, r2
 801376c:	6023      	str	r3, [r4, #0]
 801376e:	f001 f85f 	bl	8014830 <_kill>
 8013772:	1c43      	adds	r3, r0, #1
 8013774:	d102      	bne.n	801377c <_kill_r+0x1c>
 8013776:	6823      	ldr	r3, [r4, #0]
 8013778:	b103      	cbz	r3, 801377c <_kill_r+0x1c>
 801377a:	602b      	str	r3, [r5, #0]
 801377c:	bd38      	pop	{r3, r4, r5, pc}
 801377e:	bf00      	nop
 8013780:	20000d20 	.word	0x20000d20

08013784 <_getpid_r>:
 8013784:	f001 b844 	b.w	8014810 <_getpid>

08013788 <_siprintf_r>:
 8013788:	b40c      	push	{r2, r3}
 801378a:	b510      	push	{r4, lr}
 801378c:	b09c      	sub	sp, #112	; 0x70
 801378e:	9102      	str	r1, [sp, #8]
 8013790:	9106      	str	r1, [sp, #24]
 8013792:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013796:	9104      	str	r1, [sp, #16]
 8013798:	9107      	str	r1, [sp, #28]
 801379a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801379e:	ab1e      	add	r3, sp, #120	; 0x78
 80137a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80137a4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80137a8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80137ac:	a902      	add	r1, sp, #8
 80137ae:	9301      	str	r3, [sp, #4]
 80137b0:	f8ad 4014 	strh.w	r4, [sp, #20]
 80137b4:	f000 fc54 	bl	8014060 <_svfiprintf_r>
 80137b8:	9b02      	ldr	r3, [sp, #8]
 80137ba:	2200      	movs	r2, #0
 80137bc:	701a      	strb	r2, [r3, #0]
 80137be:	b01c      	add	sp, #112	; 0x70
 80137c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80137c4:	b002      	add	sp, #8
 80137c6:	4770      	bx	lr

080137c8 <siprintf>:
 80137c8:	b40e      	push	{r1, r2, r3}
 80137ca:	b500      	push	{lr}
 80137cc:	f44f 7102 	mov.w	r1, #520	; 0x208
 80137d0:	b09c      	sub	sp, #112	; 0x70
 80137d2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80137d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80137da:	9104      	str	r1, [sp, #16]
 80137dc:	9107      	str	r1, [sp, #28]
 80137de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80137e2:	ab1d      	add	r3, sp, #116	; 0x74
 80137e4:	9002      	str	r0, [sp, #8]
 80137e6:	9006      	str	r0, [sp, #24]
 80137e8:	4808      	ldr	r0, [pc, #32]	; (801380c <siprintf+0x44>)
 80137ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ee:	f8ad 1016 	strh.w	r1, [sp, #22]
 80137f2:	6800      	ldr	r0, [r0, #0]
 80137f4:	a902      	add	r1, sp, #8
 80137f6:	9301      	str	r3, [sp, #4]
 80137f8:	f000 fc32 	bl	8014060 <_svfiprintf_r>
 80137fc:	9b02      	ldr	r3, [sp, #8]
 80137fe:	2200      	movs	r2, #0
 8013800:	701a      	strb	r2, [r3, #0]
 8013802:	b01c      	add	sp, #112	; 0x70
 8013804:	f85d eb04 	ldr.w	lr, [sp], #4
 8013808:	b003      	add	sp, #12
 801380a:	4770      	bx	lr
 801380c:	20000098 	.word	0x20000098

08013810 <strncmp>:
 8013810:	b530      	push	{r4, r5, lr}
 8013812:	b182      	cbz	r2, 8013836 <strncmp+0x26>
 8013814:	1e45      	subs	r5, r0, #1
 8013816:	3901      	subs	r1, #1
 8013818:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 801381c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013820:	42a3      	cmp	r3, r4
 8013822:	d106      	bne.n	8013832 <strncmp+0x22>
 8013824:	43ec      	mvns	r4, r5
 8013826:	4414      	add	r4, r2
 8013828:	42e0      	cmn	r0, r4
 801382a:	d001      	beq.n	8013830 <strncmp+0x20>
 801382c:	2b00      	cmp	r3, #0
 801382e:	d1f3      	bne.n	8013818 <strncmp+0x8>
 8013830:	461c      	mov	r4, r3
 8013832:	1b18      	subs	r0, r3, r4
 8013834:	bd30      	pop	{r4, r5, pc}
 8013836:	4610      	mov	r0, r2
 8013838:	bd30      	pop	{r4, r5, pc}

0801383a <strstr>:
 801383a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801383c:	7803      	ldrb	r3, [r0, #0]
 801383e:	b963      	cbnz	r3, 801385a <strstr+0x20>
 8013840:	780b      	ldrb	r3, [r1, #0]
 8013842:	2b00      	cmp	r3, #0
 8013844:	bf18      	it	ne
 8013846:	2000      	movne	r0, #0
 8013848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801384a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801384e:	b162      	cbz	r2, 801386a <strstr+0x30>
 8013850:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8013854:	4630      	mov	r0, r6
 8013856:	4297      	cmp	r7, r2
 8013858:	d0f7      	beq.n	801384a <strstr+0x10>
 801385a:	4603      	mov	r3, r0
 801385c:	1c46      	adds	r6, r0, #1
 801385e:	7800      	ldrb	r0, [r0, #0]
 8013860:	b110      	cbz	r0, 8013868 <strstr+0x2e>
 8013862:	1e4d      	subs	r5, r1, #1
 8013864:	1e5c      	subs	r4, r3, #1
 8013866:	e7f0      	b.n	801384a <strstr+0x10>
 8013868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801386a:	4618      	mov	r0, r3
 801386c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013870 <write>:
 8013870:	4613      	mov	r3, r2
 8013872:	460a      	mov	r2, r1
 8013874:	4601      	mov	r1, r0
 8013876:	4802      	ldr	r0, [pc, #8]	; (8013880 <write+0x10>)
 8013878:	6800      	ldr	r0, [r0, #0]
 801387a:	f000 b85f 	b.w	801393c <_write_r>
 801387e:	bf00      	nop
 8013880:	20000098 	.word	0x20000098

08013884 <__swbuf_r>:
 8013884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013886:	460f      	mov	r7, r1
 8013888:	4614      	mov	r4, r2
 801388a:	4606      	mov	r6, r0
 801388c:	b118      	cbz	r0, 8013896 <__swbuf_r+0x12>
 801388e:	6983      	ldr	r3, [r0, #24]
 8013890:	b90b      	cbnz	r3, 8013896 <__swbuf_r+0x12>
 8013892:	f000 f9dd 	bl	8013c50 <__sinit>
 8013896:	4b22      	ldr	r3, [pc, #136]	; (8013920 <__swbuf_r+0x9c>)
 8013898:	429c      	cmp	r4, r3
 801389a:	d101      	bne.n	80138a0 <__swbuf_r+0x1c>
 801389c:	6874      	ldr	r4, [r6, #4]
 801389e:	e008      	b.n	80138b2 <__swbuf_r+0x2e>
 80138a0:	4b20      	ldr	r3, [pc, #128]	; (8013924 <__swbuf_r+0xa0>)
 80138a2:	429c      	cmp	r4, r3
 80138a4:	d101      	bne.n	80138aa <__swbuf_r+0x26>
 80138a6:	68b4      	ldr	r4, [r6, #8]
 80138a8:	e003      	b.n	80138b2 <__swbuf_r+0x2e>
 80138aa:	4b1f      	ldr	r3, [pc, #124]	; (8013928 <__swbuf_r+0xa4>)
 80138ac:	429c      	cmp	r4, r3
 80138ae:	bf08      	it	eq
 80138b0:	68f4      	ldreq	r4, [r6, #12]
 80138b2:	69a3      	ldr	r3, [r4, #24]
 80138b4:	60a3      	str	r3, [r4, #8]
 80138b6:	89a3      	ldrh	r3, [r4, #12]
 80138b8:	071a      	lsls	r2, r3, #28
 80138ba:	d509      	bpl.n	80138d0 <__swbuf_r+0x4c>
 80138bc:	6923      	ldr	r3, [r4, #16]
 80138be:	b13b      	cbz	r3, 80138d0 <__swbuf_r+0x4c>
 80138c0:	6823      	ldr	r3, [r4, #0]
 80138c2:	6920      	ldr	r0, [r4, #16]
 80138c4:	b2fd      	uxtb	r5, r7
 80138c6:	1a18      	subs	r0, r3, r0
 80138c8:	6963      	ldr	r3, [r4, #20]
 80138ca:	4298      	cmp	r0, r3
 80138cc:	db0f      	blt.n	80138ee <__swbuf_r+0x6a>
 80138ce:	e008      	b.n	80138e2 <__swbuf_r+0x5e>
 80138d0:	4621      	mov	r1, r4
 80138d2:	4630      	mov	r0, r6
 80138d4:	f000 f844 	bl	8013960 <__swsetup_r>
 80138d8:	2800      	cmp	r0, #0
 80138da:	d0f1      	beq.n	80138c0 <__swbuf_r+0x3c>
 80138dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138e2:	4621      	mov	r1, r4
 80138e4:	4630      	mov	r0, r6
 80138e6:	f000 f92d 	bl	8013b44 <_fflush_r>
 80138ea:	2800      	cmp	r0, #0
 80138ec:	d1f6      	bne.n	80138dc <__swbuf_r+0x58>
 80138ee:	68a3      	ldr	r3, [r4, #8]
 80138f0:	3b01      	subs	r3, #1
 80138f2:	60a3      	str	r3, [r4, #8]
 80138f4:	6823      	ldr	r3, [r4, #0]
 80138f6:	1c5a      	adds	r2, r3, #1
 80138f8:	6022      	str	r2, [r4, #0]
 80138fa:	701f      	strb	r7, [r3, #0]
 80138fc:	6962      	ldr	r2, [r4, #20]
 80138fe:	1c43      	adds	r3, r0, #1
 8013900:	4293      	cmp	r3, r2
 8013902:	d004      	beq.n	801390e <__swbuf_r+0x8a>
 8013904:	89a3      	ldrh	r3, [r4, #12]
 8013906:	07db      	lsls	r3, r3, #31
 8013908:	d507      	bpl.n	801391a <__swbuf_r+0x96>
 801390a:	2d0a      	cmp	r5, #10
 801390c:	d105      	bne.n	801391a <__swbuf_r+0x96>
 801390e:	4621      	mov	r1, r4
 8013910:	4630      	mov	r0, r6
 8013912:	f000 f917 	bl	8013b44 <_fflush_r>
 8013916:	2800      	cmp	r0, #0
 8013918:	d1e0      	bne.n	80138dc <__swbuf_r+0x58>
 801391a:	4628      	mov	r0, r5
 801391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801391e:	bf00      	nop
 8013920:	08016960 	.word	0x08016960
 8013924:	08016980 	.word	0x08016980
 8013928:	080169a0 	.word	0x080169a0

0801392c <__swbuf>:
 801392c:	4b02      	ldr	r3, [pc, #8]	; (8013938 <__swbuf+0xc>)
 801392e:	460a      	mov	r2, r1
 8013930:	4601      	mov	r1, r0
 8013932:	6818      	ldr	r0, [r3, #0]
 8013934:	f7ff bfa6 	b.w	8013884 <__swbuf_r>
 8013938:	20000098 	.word	0x20000098

0801393c <_write_r>:
 801393c:	b538      	push	{r3, r4, r5, lr}
 801393e:	4c07      	ldr	r4, [pc, #28]	; (801395c <_write_r+0x20>)
 8013940:	4605      	mov	r5, r0
 8013942:	4608      	mov	r0, r1
 8013944:	4611      	mov	r1, r2
 8013946:	2200      	movs	r2, #0
 8013948:	6022      	str	r2, [r4, #0]
 801394a:	461a      	mov	r2, r3
 801394c:	f000 ff96 	bl	801487c <_write>
 8013950:	1c43      	adds	r3, r0, #1
 8013952:	d102      	bne.n	801395a <_write_r+0x1e>
 8013954:	6823      	ldr	r3, [r4, #0]
 8013956:	b103      	cbz	r3, 801395a <_write_r+0x1e>
 8013958:	602b      	str	r3, [r5, #0]
 801395a:	bd38      	pop	{r3, r4, r5, pc}
 801395c:	20000d20 	.word	0x20000d20

08013960 <__swsetup_r>:
 8013960:	4b31      	ldr	r3, [pc, #196]	; (8013a28 <__swsetup_r+0xc8>)
 8013962:	b570      	push	{r4, r5, r6, lr}
 8013964:	681d      	ldr	r5, [r3, #0]
 8013966:	4606      	mov	r6, r0
 8013968:	460c      	mov	r4, r1
 801396a:	b125      	cbz	r5, 8013976 <__swsetup_r+0x16>
 801396c:	69ab      	ldr	r3, [r5, #24]
 801396e:	b913      	cbnz	r3, 8013976 <__swsetup_r+0x16>
 8013970:	4628      	mov	r0, r5
 8013972:	f000 f96d 	bl	8013c50 <__sinit>
 8013976:	4b2d      	ldr	r3, [pc, #180]	; (8013a2c <__swsetup_r+0xcc>)
 8013978:	429c      	cmp	r4, r3
 801397a:	d101      	bne.n	8013980 <__swsetup_r+0x20>
 801397c:	686c      	ldr	r4, [r5, #4]
 801397e:	e008      	b.n	8013992 <__swsetup_r+0x32>
 8013980:	4b2b      	ldr	r3, [pc, #172]	; (8013a30 <__swsetup_r+0xd0>)
 8013982:	429c      	cmp	r4, r3
 8013984:	d101      	bne.n	801398a <__swsetup_r+0x2a>
 8013986:	68ac      	ldr	r4, [r5, #8]
 8013988:	e003      	b.n	8013992 <__swsetup_r+0x32>
 801398a:	4b2a      	ldr	r3, [pc, #168]	; (8013a34 <__swsetup_r+0xd4>)
 801398c:	429c      	cmp	r4, r3
 801398e:	bf08      	it	eq
 8013990:	68ec      	ldreq	r4, [r5, #12]
 8013992:	89a3      	ldrh	r3, [r4, #12]
 8013994:	b29a      	uxth	r2, r3
 8013996:	0711      	lsls	r1, r2, #28
 8013998:	d41d      	bmi.n	80139d6 <__swsetup_r+0x76>
 801399a:	06d5      	lsls	r5, r2, #27
 801399c:	d402      	bmi.n	80139a4 <__swsetup_r+0x44>
 801399e:	2209      	movs	r2, #9
 80139a0:	6032      	str	r2, [r6, #0]
 80139a2:	e038      	b.n	8013a16 <__swsetup_r+0xb6>
 80139a4:	0750      	lsls	r0, r2, #29
 80139a6:	d512      	bpl.n	80139ce <__swsetup_r+0x6e>
 80139a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139aa:	b141      	cbz	r1, 80139be <__swsetup_r+0x5e>
 80139ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139b0:	4299      	cmp	r1, r3
 80139b2:	d002      	beq.n	80139ba <__swsetup_r+0x5a>
 80139b4:	4630      	mov	r0, r6
 80139b6:	f7ff fd87 	bl	80134c8 <_free_r>
 80139ba:	2300      	movs	r3, #0
 80139bc:	6363      	str	r3, [r4, #52]	; 0x34
 80139be:	89a3      	ldrh	r3, [r4, #12]
 80139c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80139c4:	81a3      	strh	r3, [r4, #12]
 80139c6:	2300      	movs	r3, #0
 80139c8:	6063      	str	r3, [r4, #4]
 80139ca:	6923      	ldr	r3, [r4, #16]
 80139cc:	6023      	str	r3, [r4, #0]
 80139ce:	89a3      	ldrh	r3, [r4, #12]
 80139d0:	f043 0308 	orr.w	r3, r3, #8
 80139d4:	81a3      	strh	r3, [r4, #12]
 80139d6:	6923      	ldr	r3, [r4, #16]
 80139d8:	b94b      	cbnz	r3, 80139ee <__swsetup_r+0x8e>
 80139da:	89a3      	ldrh	r3, [r4, #12]
 80139dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80139e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139e4:	d003      	beq.n	80139ee <__swsetup_r+0x8e>
 80139e6:	4621      	mov	r1, r4
 80139e8:	4630      	mov	r0, r6
 80139ea:	f000 f9ef 	bl	8013dcc <__smakebuf_r>
 80139ee:	89a3      	ldrh	r3, [r4, #12]
 80139f0:	f013 0201 	ands.w	r2, r3, #1
 80139f4:	d005      	beq.n	8013a02 <__swsetup_r+0xa2>
 80139f6:	2200      	movs	r2, #0
 80139f8:	60a2      	str	r2, [r4, #8]
 80139fa:	6962      	ldr	r2, [r4, #20]
 80139fc:	4252      	negs	r2, r2
 80139fe:	61a2      	str	r2, [r4, #24]
 8013a00:	e003      	b.n	8013a0a <__swsetup_r+0xaa>
 8013a02:	0799      	lsls	r1, r3, #30
 8013a04:	bf58      	it	pl
 8013a06:	6962      	ldrpl	r2, [r4, #20]
 8013a08:	60a2      	str	r2, [r4, #8]
 8013a0a:	6922      	ldr	r2, [r4, #16]
 8013a0c:	b94a      	cbnz	r2, 8013a22 <__swsetup_r+0xc2>
 8013a0e:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8013a12:	b280      	uxth	r0, r0
 8013a14:	b130      	cbz	r0, 8013a24 <__swsetup_r+0xc4>
 8013a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a1a:	81a3      	strh	r3, [r4, #12]
 8013a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a20:	bd70      	pop	{r4, r5, r6, pc}
 8013a22:	2000      	movs	r0, #0
 8013a24:	bd70      	pop	{r4, r5, r6, pc}
 8013a26:	bf00      	nop
 8013a28:	20000098 	.word	0x20000098
 8013a2c:	08016960 	.word	0x08016960
 8013a30:	08016980 	.word	0x08016980
 8013a34:	080169a0 	.word	0x080169a0

08013a38 <__sflush_r>:
 8013a38:	898a      	ldrh	r2, [r1, #12]
 8013a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a3e:	4605      	mov	r5, r0
 8013a40:	0710      	lsls	r0, r2, #28
 8013a42:	460c      	mov	r4, r1
 8013a44:	d459      	bmi.n	8013afa <__sflush_r+0xc2>
 8013a46:	684b      	ldr	r3, [r1, #4]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	dc02      	bgt.n	8013a52 <__sflush_r+0x1a>
 8013a4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	dd17      	ble.n	8013a82 <__sflush_r+0x4a>
 8013a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a54:	b1ae      	cbz	r6, 8013a82 <__sflush_r+0x4a>
 8013a56:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	b292      	uxth	r2, r2
 8013a5e:	682f      	ldr	r7, [r5, #0]
 8013a60:	602b      	str	r3, [r5, #0]
 8013a62:	b10a      	cbz	r2, 8013a68 <__sflush_r+0x30>
 8013a64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a66:	e015      	b.n	8013a94 <__sflush_r+0x5c>
 8013a68:	6a21      	ldr	r1, [r4, #32]
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	47b0      	blx	r6
 8013a70:	1c41      	adds	r1, r0, #1
 8013a72:	d10f      	bne.n	8013a94 <__sflush_r+0x5c>
 8013a74:	682b      	ldr	r3, [r5, #0]
 8013a76:	b16b      	cbz	r3, 8013a94 <__sflush_r+0x5c>
 8013a78:	2b1d      	cmp	r3, #29
 8013a7a:	d001      	beq.n	8013a80 <__sflush_r+0x48>
 8013a7c:	2b16      	cmp	r3, #22
 8013a7e:	d103      	bne.n	8013a88 <__sflush_r+0x50>
 8013a80:	602f      	str	r7, [r5, #0]
 8013a82:	2000      	movs	r0, #0
 8013a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a88:	89a3      	ldrh	r3, [r4, #12]
 8013a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a8e:	81a3      	strh	r3, [r4, #12]
 8013a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a94:	89a3      	ldrh	r3, [r4, #12]
 8013a96:	075a      	lsls	r2, r3, #29
 8013a98:	d505      	bpl.n	8013aa6 <__sflush_r+0x6e>
 8013a9a:	6863      	ldr	r3, [r4, #4]
 8013a9c:	1ac0      	subs	r0, r0, r3
 8013a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013aa0:	b10b      	cbz	r3, 8013aa6 <__sflush_r+0x6e>
 8013aa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013aa4:	1ac0      	subs	r0, r0, r3
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	4602      	mov	r2, r0
 8013aaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013aac:	6a21      	ldr	r1, [r4, #32]
 8013aae:	4628      	mov	r0, r5
 8013ab0:	47b0      	blx	r6
 8013ab2:	1c43      	adds	r3, r0, #1
 8013ab4:	89a3      	ldrh	r3, [r4, #12]
 8013ab6:	d106      	bne.n	8013ac6 <__sflush_r+0x8e>
 8013ab8:	6829      	ldr	r1, [r5, #0]
 8013aba:	291d      	cmp	r1, #29
 8013abc:	d839      	bhi.n	8013b32 <__sflush_r+0xfa>
 8013abe:	4a20      	ldr	r2, [pc, #128]	; (8013b40 <__sflush_r+0x108>)
 8013ac0:	40ca      	lsrs	r2, r1
 8013ac2:	07d6      	lsls	r6, r2, #31
 8013ac4:	d535      	bpl.n	8013b32 <__sflush_r+0xfa>
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	6062      	str	r2, [r4, #4]
 8013aca:	6922      	ldr	r2, [r4, #16]
 8013acc:	04d9      	lsls	r1, r3, #19
 8013ace:	6022      	str	r2, [r4, #0]
 8013ad0:	d504      	bpl.n	8013adc <__sflush_r+0xa4>
 8013ad2:	1c42      	adds	r2, r0, #1
 8013ad4:	d101      	bne.n	8013ada <__sflush_r+0xa2>
 8013ad6:	682b      	ldr	r3, [r5, #0]
 8013ad8:	b903      	cbnz	r3, 8013adc <__sflush_r+0xa4>
 8013ada:	6560      	str	r0, [r4, #84]	; 0x54
 8013adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ade:	602f      	str	r7, [r5, #0]
 8013ae0:	2900      	cmp	r1, #0
 8013ae2:	d0ce      	beq.n	8013a82 <__sflush_r+0x4a>
 8013ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ae8:	4299      	cmp	r1, r3
 8013aea:	d002      	beq.n	8013af2 <__sflush_r+0xba>
 8013aec:	4628      	mov	r0, r5
 8013aee:	f7ff fceb 	bl	80134c8 <_free_r>
 8013af2:	2000      	movs	r0, #0
 8013af4:	6360      	str	r0, [r4, #52]	; 0x34
 8013af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013afa:	690f      	ldr	r7, [r1, #16]
 8013afc:	2f00      	cmp	r7, #0
 8013afe:	d0c0      	beq.n	8013a82 <__sflush_r+0x4a>
 8013b00:	0793      	lsls	r3, r2, #30
 8013b02:	680e      	ldr	r6, [r1, #0]
 8013b04:	bf0c      	ite	eq
 8013b06:	694b      	ldreq	r3, [r1, #20]
 8013b08:	2300      	movne	r3, #0
 8013b0a:	ebc7 0806 	rsb	r8, r7, r6
 8013b0e:	600f      	str	r7, [r1, #0]
 8013b10:	608b      	str	r3, [r1, #8]
 8013b12:	e002      	b.n	8013b1a <__sflush_r+0xe2>
 8013b14:	4407      	add	r7, r0
 8013b16:	ebc0 0808 	rsb	r8, r0, r8
 8013b1a:	f1b8 0f00 	cmp.w	r8, #0
 8013b1e:	ddb0      	ble.n	8013a82 <__sflush_r+0x4a>
 8013b20:	4643      	mov	r3, r8
 8013b22:	463a      	mov	r2, r7
 8013b24:	6a21      	ldr	r1, [r4, #32]
 8013b26:	4628      	mov	r0, r5
 8013b28:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b2a:	47b0      	blx	r6
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	dcf1      	bgt.n	8013b14 <__sflush_r+0xdc>
 8013b30:	89a3      	ldrh	r3, [r4, #12]
 8013b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b36:	81a3      	strh	r3, [r4, #12]
 8013b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b40:	20400001 	.word	0x20400001

08013b44 <_fflush_r>:
 8013b44:	b538      	push	{r3, r4, r5, lr}
 8013b46:	690b      	ldr	r3, [r1, #16]
 8013b48:	4605      	mov	r5, r0
 8013b4a:	460c      	mov	r4, r1
 8013b4c:	b1db      	cbz	r3, 8013b86 <_fflush_r+0x42>
 8013b4e:	b118      	cbz	r0, 8013b58 <_fflush_r+0x14>
 8013b50:	6983      	ldr	r3, [r0, #24]
 8013b52:	b90b      	cbnz	r3, 8013b58 <_fflush_r+0x14>
 8013b54:	f000 f87c 	bl	8013c50 <__sinit>
 8013b58:	4b0c      	ldr	r3, [pc, #48]	; (8013b8c <_fflush_r+0x48>)
 8013b5a:	429c      	cmp	r4, r3
 8013b5c:	d101      	bne.n	8013b62 <_fflush_r+0x1e>
 8013b5e:	686c      	ldr	r4, [r5, #4]
 8013b60:	e008      	b.n	8013b74 <_fflush_r+0x30>
 8013b62:	4b0b      	ldr	r3, [pc, #44]	; (8013b90 <_fflush_r+0x4c>)
 8013b64:	429c      	cmp	r4, r3
 8013b66:	d101      	bne.n	8013b6c <_fflush_r+0x28>
 8013b68:	68ac      	ldr	r4, [r5, #8]
 8013b6a:	e003      	b.n	8013b74 <_fflush_r+0x30>
 8013b6c:	4b09      	ldr	r3, [pc, #36]	; (8013b94 <_fflush_r+0x50>)
 8013b6e:	429c      	cmp	r4, r3
 8013b70:	bf08      	it	eq
 8013b72:	68ec      	ldreq	r4, [r5, #12]
 8013b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b78:	b12b      	cbz	r3, 8013b86 <_fflush_r+0x42>
 8013b7a:	4621      	mov	r1, r4
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b82:	f7ff bf59 	b.w	8013a38 <__sflush_r>
 8013b86:	2000      	movs	r0, #0
 8013b88:	bd38      	pop	{r3, r4, r5, pc}
 8013b8a:	bf00      	nop
 8013b8c:	08016960 	.word	0x08016960
 8013b90:	08016980 	.word	0x08016980
 8013b94:	080169a0 	.word	0x080169a0

08013b98 <fflush>:
 8013b98:	4601      	mov	r1, r0
 8013b9a:	b920      	cbnz	r0, 8013ba6 <fflush+0xe>
 8013b9c:	4b04      	ldr	r3, [pc, #16]	; (8013bb0 <fflush+0x18>)
 8013b9e:	4905      	ldr	r1, [pc, #20]	; (8013bb4 <fflush+0x1c>)
 8013ba0:	6818      	ldr	r0, [r3, #0]
 8013ba2:	f000 b8f5 	b.w	8013d90 <_fwalk_reent>
 8013ba6:	4b04      	ldr	r3, [pc, #16]	; (8013bb8 <fflush+0x20>)
 8013ba8:	6818      	ldr	r0, [r3, #0]
 8013baa:	f7ff bfcb 	b.w	8013b44 <_fflush_r>
 8013bae:	bf00      	nop
 8013bb0:	0801695c 	.word	0x0801695c
 8013bb4:	08013b45 	.word	0x08013b45
 8013bb8:	20000098 	.word	0x20000098

08013bbc <__fp_unlock>:
 8013bbc:	2000      	movs	r0, #0
 8013bbe:	4770      	bx	lr

08013bc0 <_cleanup_r>:
 8013bc0:	4901      	ldr	r1, [pc, #4]	; (8013bc8 <_cleanup_r+0x8>)
 8013bc2:	f000 b8e5 	b.w	8013d90 <_fwalk_reent>
 8013bc6:	bf00      	nop
 8013bc8:	08013b45 	.word	0x08013b45

08013bcc <std.isra.0>:
 8013bcc:	b510      	push	{r4, lr}
 8013bce:	4604      	mov	r4, r0
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	6003      	str	r3, [r0, #0]
 8013bd4:	6043      	str	r3, [r0, #4]
 8013bd6:	6083      	str	r3, [r0, #8]
 8013bd8:	8181      	strh	r1, [r0, #12]
 8013bda:	6643      	str	r3, [r0, #100]	; 0x64
 8013bdc:	81c2      	strh	r2, [r0, #14]
 8013bde:	6103      	str	r3, [r0, #16]
 8013be0:	6143      	str	r3, [r0, #20]
 8013be2:	6183      	str	r3, [r0, #24]
 8013be4:	4619      	mov	r1, r3
 8013be6:	2208      	movs	r2, #8
 8013be8:	305c      	adds	r0, #92	; 0x5c
 8013bea:	f7ff fc65 	bl	80134b8 <memset>
 8013bee:	4b05      	ldr	r3, [pc, #20]	; (8013c04 <std.isra.0+0x38>)
 8013bf0:	6224      	str	r4, [r4, #32]
 8013bf2:	6263      	str	r3, [r4, #36]	; 0x24
 8013bf4:	4b04      	ldr	r3, [pc, #16]	; (8013c08 <std.isra.0+0x3c>)
 8013bf6:	62a3      	str	r3, [r4, #40]	; 0x28
 8013bf8:	4b04      	ldr	r3, [pc, #16]	; (8013c0c <std.isra.0+0x40>)
 8013bfa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013bfc:	4b04      	ldr	r3, [pc, #16]	; (8013c10 <std.isra.0+0x44>)
 8013bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8013c00:	bd10      	pop	{r4, pc}
 8013c02:	bf00      	nop
 8013c04:	08014651 	.word	0x08014651
 8013c08:	08014677 	.word	0x08014677
 8013c0c:	080146af 	.word	0x080146af
 8013c10:	080146d3 	.word	0x080146d3

08013c14 <__fp_lock>:
 8013c14:	2000      	movs	r0, #0
 8013c16:	4770      	bx	lr

08013c18 <__sfmoreglue>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	2368      	movs	r3, #104	; 0x68
 8013c1c:	1e4d      	subs	r5, r1, #1
 8013c1e:	435d      	muls	r5, r3
 8013c20:	460e      	mov	r6, r1
 8013c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013c26:	f7ff fc93 	bl	8013550 <_malloc_r>
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	b140      	cbz	r0, 8013c40 <__sfmoreglue+0x28>
 8013c2e:	2100      	movs	r1, #0
 8013c30:	e880 0042 	stmia.w	r0, {r1, r6}
 8013c34:	300c      	adds	r0, #12
 8013c36:	60a0      	str	r0, [r4, #8]
 8013c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013c3c:	f7ff fc3c 	bl	80134b8 <memset>
 8013c40:	4620      	mov	r0, r4
 8013c42:	bd70      	pop	{r4, r5, r6, pc}

08013c44 <_cleanup>:
 8013c44:	4b01      	ldr	r3, [pc, #4]	; (8013c4c <_cleanup+0x8>)
 8013c46:	6818      	ldr	r0, [r3, #0]
 8013c48:	f7ff bfba 	b.w	8013bc0 <_cleanup_r>
 8013c4c:	0801695c 	.word	0x0801695c

08013c50 <__sinit>:
 8013c50:	6983      	ldr	r3, [r0, #24]
 8013c52:	b510      	push	{r4, lr}
 8013c54:	4604      	mov	r4, r0
 8013c56:	bb33      	cbnz	r3, 8013ca6 <__sinit+0x56>
 8013c58:	6483      	str	r3, [r0, #72]	; 0x48
 8013c5a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013c5c:	6503      	str	r3, [r0, #80]	; 0x50
 8013c5e:	4b12      	ldr	r3, [pc, #72]	; (8013ca8 <__sinit+0x58>)
 8013c60:	4a12      	ldr	r2, [pc, #72]	; (8013cac <__sinit+0x5c>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	6282      	str	r2, [r0, #40]	; 0x28
 8013c66:	4298      	cmp	r0, r3
 8013c68:	bf04      	itt	eq
 8013c6a:	2301      	moveq	r3, #1
 8013c6c:	6183      	streq	r3, [r0, #24]
 8013c6e:	f000 f81f 	bl	8013cb0 <__sfp>
 8013c72:	6060      	str	r0, [r4, #4]
 8013c74:	4620      	mov	r0, r4
 8013c76:	f000 f81b 	bl	8013cb0 <__sfp>
 8013c7a:	60a0      	str	r0, [r4, #8]
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	f000 f817 	bl	8013cb0 <__sfp>
 8013c82:	2200      	movs	r2, #0
 8013c84:	60e0      	str	r0, [r4, #12]
 8013c86:	2104      	movs	r1, #4
 8013c88:	6860      	ldr	r0, [r4, #4]
 8013c8a:	f7ff ff9f 	bl	8013bcc <std.isra.0>
 8013c8e:	2201      	movs	r2, #1
 8013c90:	2109      	movs	r1, #9
 8013c92:	68a0      	ldr	r0, [r4, #8]
 8013c94:	f7ff ff9a 	bl	8013bcc <std.isra.0>
 8013c98:	2202      	movs	r2, #2
 8013c9a:	2112      	movs	r1, #18
 8013c9c:	68e0      	ldr	r0, [r4, #12]
 8013c9e:	f7ff ff95 	bl	8013bcc <std.isra.0>
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	61a3      	str	r3, [r4, #24]
 8013ca6:	bd10      	pop	{r4, pc}
 8013ca8:	0801695c 	.word	0x0801695c
 8013cac:	08013bc1 	.word	0x08013bc1

08013cb0 <__sfp>:
 8013cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cb2:	4b1c      	ldr	r3, [pc, #112]	; (8013d24 <__sfp+0x74>)
 8013cb4:	4607      	mov	r7, r0
 8013cb6:	681e      	ldr	r6, [r3, #0]
 8013cb8:	69b3      	ldr	r3, [r6, #24]
 8013cba:	b913      	cbnz	r3, 8013cc2 <__sfp+0x12>
 8013cbc:	4630      	mov	r0, r6
 8013cbe:	f7ff ffc7 	bl	8013c50 <__sinit>
 8013cc2:	3648      	adds	r6, #72	; 0x48
 8013cc4:	68b4      	ldr	r4, [r6, #8]
 8013cc6:	6873      	ldr	r3, [r6, #4]
 8013cc8:	3b01      	subs	r3, #1
 8013cca:	d404      	bmi.n	8013cd6 <__sfp+0x26>
 8013ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013cd0:	b17d      	cbz	r5, 8013cf2 <__sfp+0x42>
 8013cd2:	3468      	adds	r4, #104	; 0x68
 8013cd4:	e7f8      	b.n	8013cc8 <__sfp+0x18>
 8013cd6:	6833      	ldr	r3, [r6, #0]
 8013cd8:	b10b      	cbz	r3, 8013cde <__sfp+0x2e>
 8013cda:	6836      	ldr	r6, [r6, #0]
 8013cdc:	e7f2      	b.n	8013cc4 <__sfp+0x14>
 8013cde:	2104      	movs	r1, #4
 8013ce0:	4638      	mov	r0, r7
 8013ce2:	f7ff ff99 	bl	8013c18 <__sfmoreglue>
 8013ce6:	6030      	str	r0, [r6, #0]
 8013ce8:	2800      	cmp	r0, #0
 8013cea:	d1f6      	bne.n	8013cda <__sfp+0x2a>
 8013cec:	230c      	movs	r3, #12
 8013cee:	603b      	str	r3, [r7, #0]
 8013cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cf6:	81e3      	strh	r3, [r4, #14]
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	81a3      	strh	r3, [r4, #12]
 8013cfc:	6665      	str	r5, [r4, #100]	; 0x64
 8013cfe:	6025      	str	r5, [r4, #0]
 8013d00:	60a5      	str	r5, [r4, #8]
 8013d02:	6065      	str	r5, [r4, #4]
 8013d04:	6125      	str	r5, [r4, #16]
 8013d06:	6165      	str	r5, [r4, #20]
 8013d08:	61a5      	str	r5, [r4, #24]
 8013d0a:	2208      	movs	r2, #8
 8013d0c:	4629      	mov	r1, r5
 8013d0e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013d12:	f7ff fbd1 	bl	80134b8 <memset>
 8013d16:	6365      	str	r5, [r4, #52]	; 0x34
 8013d18:	63a5      	str	r5, [r4, #56]	; 0x38
 8013d1a:	64a5      	str	r5, [r4, #72]	; 0x48
 8013d1c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013d1e:	4620      	mov	r0, r4
 8013d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d22:	bf00      	nop
 8013d24:	0801695c 	.word	0x0801695c

08013d28 <__sfp_lock_acquire>:
 8013d28:	4770      	bx	lr

08013d2a <__sfp_lock_release>:
 8013d2a:	4770      	bx	lr

08013d2c <__sinit_lock_acquire>:
 8013d2c:	4770      	bx	lr

08013d2e <__sinit_lock_release>:
 8013d2e:	4770      	bx	lr

08013d30 <__fp_lock_all>:
 8013d30:	4b02      	ldr	r3, [pc, #8]	; (8013d3c <__fp_lock_all+0xc>)
 8013d32:	4903      	ldr	r1, [pc, #12]	; (8013d40 <__fp_lock_all+0x10>)
 8013d34:	6818      	ldr	r0, [r3, #0]
 8013d36:	f000 b80f 	b.w	8013d58 <_fwalk>
 8013d3a:	bf00      	nop
 8013d3c:	20000098 	.word	0x20000098
 8013d40:	08013c15 	.word	0x08013c15

08013d44 <__fp_unlock_all>:
 8013d44:	4b02      	ldr	r3, [pc, #8]	; (8013d50 <__fp_unlock_all+0xc>)
 8013d46:	4903      	ldr	r1, [pc, #12]	; (8013d54 <__fp_unlock_all+0x10>)
 8013d48:	6818      	ldr	r0, [r3, #0]
 8013d4a:	f000 b805 	b.w	8013d58 <_fwalk>
 8013d4e:	bf00      	nop
 8013d50:	20000098 	.word	0x20000098
 8013d54:	08013bbd 	.word	0x08013bbd

08013d58 <_fwalk>:
 8013d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5c:	4688      	mov	r8, r1
 8013d5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d62:	2600      	movs	r6, #0
 8013d64:	b18c      	cbz	r4, 8013d8a <_fwalk+0x32>
 8013d66:	68a5      	ldr	r5, [r4, #8]
 8013d68:	6867      	ldr	r7, [r4, #4]
 8013d6a:	3f01      	subs	r7, #1
 8013d6c:	d40b      	bmi.n	8013d86 <_fwalk+0x2e>
 8013d6e:	89ab      	ldrh	r3, [r5, #12]
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	d906      	bls.n	8013d82 <_fwalk+0x2a>
 8013d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d78:	3301      	adds	r3, #1
 8013d7a:	d002      	beq.n	8013d82 <_fwalk+0x2a>
 8013d7c:	4628      	mov	r0, r5
 8013d7e:	47c0      	blx	r8
 8013d80:	4306      	orrs	r6, r0
 8013d82:	3568      	adds	r5, #104	; 0x68
 8013d84:	e7f1      	b.n	8013d6a <_fwalk+0x12>
 8013d86:	6824      	ldr	r4, [r4, #0]
 8013d88:	e7ec      	b.n	8013d64 <_fwalk+0xc>
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d90 <_fwalk_reent>:
 8013d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d94:	4680      	mov	r8, r0
 8013d96:	4689      	mov	r9, r1
 8013d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013d9c:	2600      	movs	r6, #0
 8013d9e:	b194      	cbz	r4, 8013dc6 <_fwalk_reent+0x36>
 8013da0:	68a5      	ldr	r5, [r4, #8]
 8013da2:	6867      	ldr	r7, [r4, #4]
 8013da4:	3f01      	subs	r7, #1
 8013da6:	d40c      	bmi.n	8013dc2 <_fwalk_reent+0x32>
 8013da8:	89ab      	ldrh	r3, [r5, #12]
 8013daa:	2b01      	cmp	r3, #1
 8013dac:	d907      	bls.n	8013dbe <_fwalk_reent+0x2e>
 8013dae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013db2:	3301      	adds	r3, #1
 8013db4:	d003      	beq.n	8013dbe <_fwalk_reent+0x2e>
 8013db6:	4629      	mov	r1, r5
 8013db8:	4640      	mov	r0, r8
 8013dba:	47c8      	blx	r9
 8013dbc:	4306      	orrs	r6, r0
 8013dbe:	3568      	adds	r5, #104	; 0x68
 8013dc0:	e7f0      	b.n	8013da4 <_fwalk_reent+0x14>
 8013dc2:	6824      	ldr	r4, [r4, #0]
 8013dc4:	e7eb      	b.n	8013d9e <_fwalk_reent+0xe>
 8013dc6:	4630      	mov	r0, r6
 8013dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013dcc <__smakebuf_r>:
 8013dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dce:	898b      	ldrh	r3, [r1, #12]
 8013dd0:	b091      	sub	sp, #68	; 0x44
 8013dd2:	079d      	lsls	r5, r3, #30
 8013dd4:	4606      	mov	r6, r0
 8013dd6:	460c      	mov	r4, r1
 8013dd8:	d425      	bmi.n	8013e26 <__smakebuf_r+0x5a>
 8013dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dde:	2900      	cmp	r1, #0
 8013de0:	da08      	bge.n	8013df4 <__smakebuf_r+0x28>
 8013de2:	89a3      	ldrh	r3, [r4, #12]
 8013de4:	2500      	movs	r5, #0
 8013de6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013dea:	bf14      	ite	ne
 8013dec:	2740      	movne	r7, #64	; 0x40
 8013dee:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8013df2:	e00d      	b.n	8013e10 <__smakebuf_r+0x44>
 8013df4:	aa01      	add	r2, sp, #4
 8013df6:	f000 fc81 	bl	80146fc <_fstat_r>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	dbf1      	blt.n	8013de2 <__smakebuf_r+0x16>
 8013dfe:	9d02      	ldr	r5, [sp, #8]
 8013e00:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8013e04:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8013e08:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8013e0c:	424d      	negs	r5, r1
 8013e0e:	414d      	adcs	r5, r1
 8013e10:	4639      	mov	r1, r7
 8013e12:	4630      	mov	r0, r6
 8013e14:	f7ff fb9c 	bl	8013550 <_malloc_r>
 8013e18:	b960      	cbnz	r0, 8013e34 <__smakebuf_r+0x68>
 8013e1a:	89a3      	ldrh	r3, [r4, #12]
 8013e1c:	059a      	lsls	r2, r3, #22
 8013e1e:	d41d      	bmi.n	8013e5c <__smakebuf_r+0x90>
 8013e20:	f043 0302 	orr.w	r3, r3, #2
 8013e24:	81a3      	strh	r3, [r4, #12]
 8013e26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013e2a:	6023      	str	r3, [r4, #0]
 8013e2c:	6123      	str	r3, [r4, #16]
 8013e2e:	2301      	movs	r3, #1
 8013e30:	6163      	str	r3, [r4, #20]
 8013e32:	e013      	b.n	8013e5c <__smakebuf_r+0x90>
 8013e34:	4b0a      	ldr	r3, [pc, #40]	; (8013e60 <__smakebuf_r+0x94>)
 8013e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8013e38:	89a3      	ldrh	r3, [r4, #12]
 8013e3a:	6020      	str	r0, [r4, #0]
 8013e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e40:	81a3      	strh	r3, [r4, #12]
 8013e42:	6120      	str	r0, [r4, #16]
 8013e44:	6167      	str	r7, [r4, #20]
 8013e46:	b14d      	cbz	r5, 8013e5c <__smakebuf_r+0x90>
 8013e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	f000 fc67 	bl	8014720 <_isatty_r>
 8013e52:	b118      	cbz	r0, 8013e5c <__smakebuf_r+0x90>
 8013e54:	89a3      	ldrh	r3, [r4, #12]
 8013e56:	f043 0301 	orr.w	r3, r3, #1
 8013e5a:	81a3      	strh	r3, [r4, #12]
 8013e5c:	b011      	add	sp, #68	; 0x44
 8013e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e60:	08013bc1 	.word	0x08013bc1

08013e64 <_realloc_r>:
 8013e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e66:	4607      	mov	r7, r0
 8013e68:	4615      	mov	r5, r2
 8013e6a:	460e      	mov	r6, r1
 8013e6c:	b921      	cbnz	r1, 8013e78 <_realloc_r+0x14>
 8013e6e:	4611      	mov	r1, r2
 8013e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013e74:	f7ff bb6c 	b.w	8013550 <_malloc_r>
 8013e78:	b91a      	cbnz	r2, 8013e82 <_realloc_r+0x1e>
 8013e7a:	f7ff fb25 	bl	80134c8 <_free_r>
 8013e7e:	4628      	mov	r0, r5
 8013e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e82:	f000 fc98 	bl	80147b6 <_malloc_usable_size_r>
 8013e86:	4285      	cmp	r5, r0
 8013e88:	d90e      	bls.n	8013ea8 <_realloc_r+0x44>
 8013e8a:	4629      	mov	r1, r5
 8013e8c:	4638      	mov	r0, r7
 8013e8e:	f7ff fb5f 	bl	8013550 <_malloc_r>
 8013e92:	4604      	mov	r4, r0
 8013e94:	b150      	cbz	r0, 8013eac <_realloc_r+0x48>
 8013e96:	4631      	mov	r1, r6
 8013e98:	462a      	mov	r2, r5
 8013e9a:	f7ff fb02 	bl	80134a2 <memcpy>
 8013e9e:	4631      	mov	r1, r6
 8013ea0:	4638      	mov	r0, r7
 8013ea2:	f7ff fb11 	bl	80134c8 <_free_r>
 8013ea6:	e001      	b.n	8013eac <_realloc_r+0x48>
 8013ea8:	4630      	mov	r0, r6
 8013eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eac:	4620      	mov	r0, r4
 8013eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013eb0 <__ssputs_r>:
 8013eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013eb4:	688e      	ldr	r6, [r1, #8]
 8013eb6:	4682      	mov	sl, r0
 8013eb8:	429e      	cmp	r6, r3
 8013eba:	460c      	mov	r4, r1
 8013ebc:	4691      	mov	r9, r2
 8013ebe:	4698      	mov	r8, r3
 8013ec0:	d83e      	bhi.n	8013f40 <__ssputs_r+0x90>
 8013ec2:	898a      	ldrh	r2, [r1, #12]
 8013ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ec8:	d03a      	beq.n	8013f40 <__ssputs_r+0x90>
 8013eca:	6825      	ldr	r5, [r4, #0]
 8013ecc:	6909      	ldr	r1, [r1, #16]
 8013ece:	2302      	movs	r3, #2
 8013ed0:	1a6f      	subs	r7, r5, r1
 8013ed2:	6965      	ldr	r5, [r4, #20]
 8013ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ed8:	fb95 f5f3 	sdiv	r5, r5, r3
 8013edc:	1c7b      	adds	r3, r7, #1
 8013ede:	4443      	add	r3, r8
 8013ee0:	429d      	cmp	r5, r3
 8013ee2:	bf38      	it	cc
 8013ee4:	461d      	movcc	r5, r3
 8013ee6:	0553      	lsls	r3, r2, #21
 8013ee8:	d50f      	bpl.n	8013f0a <__ssputs_r+0x5a>
 8013eea:	4629      	mov	r1, r5
 8013eec:	f7ff fb30 	bl	8013550 <_malloc_r>
 8013ef0:	4606      	mov	r6, r0
 8013ef2:	b198      	cbz	r0, 8013f1c <__ssputs_r+0x6c>
 8013ef4:	463a      	mov	r2, r7
 8013ef6:	6921      	ldr	r1, [r4, #16]
 8013ef8:	f7ff fad3 	bl	80134a2 <memcpy>
 8013efc:	89a3      	ldrh	r3, [r4, #12]
 8013efe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f06:	81a3      	strh	r3, [r4, #12]
 8013f08:	e013      	b.n	8013f32 <__ssputs_r+0x82>
 8013f0a:	462a      	mov	r2, r5
 8013f0c:	f7ff ffaa 	bl	8013e64 <_realloc_r>
 8013f10:	4606      	mov	r6, r0
 8013f12:	b970      	cbnz	r0, 8013f32 <__ssputs_r+0x82>
 8013f14:	6921      	ldr	r1, [r4, #16]
 8013f16:	4650      	mov	r0, sl
 8013f18:	f7ff fad6 	bl	80134c8 <_free_r>
 8013f1c:	230c      	movs	r3, #12
 8013f1e:	f8ca 3000 	str.w	r3, [sl]
 8013f22:	89a3      	ldrh	r3, [r4, #12]
 8013f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f2c:	81a3      	strh	r3, [r4, #12]
 8013f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f32:	6126      	str	r6, [r4, #16]
 8013f34:	443e      	add	r6, r7
 8013f36:	6026      	str	r6, [r4, #0]
 8013f38:	4646      	mov	r6, r8
 8013f3a:	6165      	str	r5, [r4, #20]
 8013f3c:	1bed      	subs	r5, r5, r7
 8013f3e:	60a5      	str	r5, [r4, #8]
 8013f40:	4546      	cmp	r6, r8
 8013f42:	bf28      	it	cs
 8013f44:	4646      	movcs	r6, r8
 8013f46:	4649      	mov	r1, r9
 8013f48:	4632      	mov	r2, r6
 8013f4a:	6820      	ldr	r0, [r4, #0]
 8013f4c:	f000 fc18 	bl	8014780 <memmove>
 8013f50:	68a3      	ldr	r3, [r4, #8]
 8013f52:	2000      	movs	r0, #0
 8013f54:	1b9b      	subs	r3, r3, r6
 8013f56:	60a3      	str	r3, [r4, #8]
 8013f58:	6823      	ldr	r3, [r4, #0]
 8013f5a:	441e      	add	r6, r3
 8013f5c:	6026      	str	r6, [r4, #0]
 8013f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013f62 <__ssprint_r>:
 8013f62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f66:	4693      	mov	fp, r2
 8013f68:	6892      	ldr	r2, [r2, #8]
 8013f6a:	4681      	mov	r9, r0
 8013f6c:	460c      	mov	r4, r1
 8013f6e:	b34a      	cbz	r2, 8013fc4 <__ssprint_r+0x62>
 8013f70:	2300      	movs	r3, #0
 8013f72:	f8db a000 	ldr.w	sl, [fp]
 8013f76:	9301      	str	r3, [sp, #4]
 8013f78:	461f      	mov	r7, r3
 8013f7a:	e006      	b.n	8013f8a <__ssprint_r+0x28>
 8013f7c:	f8da 3000 	ldr.w	r3, [sl]
 8013f80:	f8da 7004 	ldr.w	r7, [sl, #4]
 8013f84:	9301      	str	r3, [sp, #4]
 8013f86:	f10a 0a08 	add.w	sl, sl, #8
 8013f8a:	2f00      	cmp	r7, #0
 8013f8c:	d0f6      	beq.n	8013f7c <__ssprint_r+0x1a>
 8013f8e:	68a6      	ldr	r6, [r4, #8]
 8013f90:	42b7      	cmp	r7, r6
 8013f92:	d360      	bcc.n	8014056 <__ssprint_r+0xf4>
 8013f94:	89a0      	ldrh	r0, [r4, #12]
 8013f96:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8013f9a:	d117      	bne.n	8013fcc <__ssprint_r+0x6a>
 8013f9c:	42b7      	cmp	r7, r6
 8013f9e:	d35a      	bcc.n	8014056 <__ssprint_r+0xf4>
 8013fa0:	4632      	mov	r2, r6
 8013fa2:	9901      	ldr	r1, [sp, #4]
 8013fa4:	6820      	ldr	r0, [r4, #0]
 8013fa6:	f000 fbeb 	bl	8014780 <memmove>
 8013faa:	68a2      	ldr	r2, [r4, #8]
 8013fac:	1b92      	subs	r2, r2, r6
 8013fae:	60a2      	str	r2, [r4, #8]
 8013fb0:	6822      	ldr	r2, [r4, #0]
 8013fb2:	4416      	add	r6, r2
 8013fb4:	f8db 2008 	ldr.w	r2, [fp, #8]
 8013fb8:	6026      	str	r6, [r4, #0]
 8013fba:	1bd7      	subs	r7, r2, r7
 8013fbc:	f8cb 7008 	str.w	r7, [fp, #8]
 8013fc0:	2f00      	cmp	r7, #0
 8013fc2:	d1db      	bne.n	8013f7c <__ssprint_r+0x1a>
 8013fc4:	2000      	movs	r0, #0
 8013fc6:	f8cb 0004 	str.w	r0, [fp, #4]
 8013fca:	e046      	b.n	801405a <__ssprint_r+0xf8>
 8013fcc:	6825      	ldr	r5, [r4, #0]
 8013fce:	6921      	ldr	r1, [r4, #16]
 8013fd0:	2302      	movs	r3, #2
 8013fd2:	ebc1 0805 	rsb	r8, r1, r5
 8013fd6:	6965      	ldr	r5, [r4, #20]
 8013fd8:	f108 0201 	add.w	r2, r8, #1
 8013fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013fe0:	fb95 f5f3 	sdiv	r5, r5, r3
 8013fe4:	443a      	add	r2, r7
 8013fe6:	4295      	cmp	r5, r2
 8013fe8:	bf38      	it	cc
 8013fea:	4615      	movcc	r5, r2
 8013fec:	0543      	lsls	r3, r0, #21
 8013fee:	d510      	bpl.n	8014012 <__ssprint_r+0xb0>
 8013ff0:	4629      	mov	r1, r5
 8013ff2:	4648      	mov	r0, r9
 8013ff4:	f7ff faac 	bl	8013550 <_malloc_r>
 8013ff8:	4606      	mov	r6, r0
 8013ffa:	b1a0      	cbz	r0, 8014026 <__ssprint_r+0xc4>
 8013ffc:	4642      	mov	r2, r8
 8013ffe:	6921      	ldr	r1, [r4, #16]
 8014000:	f7ff fa4f 	bl	80134a2 <memcpy>
 8014004:	89a2      	ldrh	r2, [r4, #12]
 8014006:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 801400a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801400e:	81a2      	strh	r2, [r4, #12]
 8014010:	e018      	b.n	8014044 <__ssprint_r+0xe2>
 8014012:	462a      	mov	r2, r5
 8014014:	4648      	mov	r0, r9
 8014016:	f7ff ff25 	bl	8013e64 <_realloc_r>
 801401a:	4606      	mov	r6, r0
 801401c:	b990      	cbnz	r0, 8014044 <__ssprint_r+0xe2>
 801401e:	6921      	ldr	r1, [r4, #16]
 8014020:	4648      	mov	r0, r9
 8014022:	f7ff fa51 	bl	80134c8 <_free_r>
 8014026:	220c      	movs	r2, #12
 8014028:	f8c9 2000 	str.w	r2, [r9]
 801402c:	89a2      	ldrh	r2, [r4, #12]
 801402e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014036:	81a2      	strh	r2, [r4, #12]
 8014038:	2200      	movs	r2, #0
 801403a:	f8cb 2008 	str.w	r2, [fp, #8]
 801403e:	f8cb 2004 	str.w	r2, [fp, #4]
 8014042:	e00a      	b.n	801405a <__ssprint_r+0xf8>
 8014044:	6126      	str	r6, [r4, #16]
 8014046:	6165      	str	r5, [r4, #20]
 8014048:	4446      	add	r6, r8
 801404a:	ebc8 0505 	rsb	r5, r8, r5
 801404e:	6026      	str	r6, [r4, #0]
 8014050:	60a5      	str	r5, [r4, #8]
 8014052:	463e      	mov	r6, r7
 8014054:	e7a2      	b.n	8013f9c <__ssprint_r+0x3a>
 8014056:	463e      	mov	r6, r7
 8014058:	e7a2      	b.n	8013fa0 <__ssprint_r+0x3e>
 801405a:	b003      	add	sp, #12
 801405c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014060 <_svfiprintf_r>:
 8014060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014064:	b09d      	sub	sp, #116	; 0x74
 8014066:	9303      	str	r3, [sp, #12]
 8014068:	898b      	ldrh	r3, [r1, #12]
 801406a:	4680      	mov	r8, r0
 801406c:	061c      	lsls	r4, r3, #24
 801406e:	460d      	mov	r5, r1
 8014070:	4616      	mov	r6, r2
 8014072:	d50d      	bpl.n	8014090 <_svfiprintf_r+0x30>
 8014074:	690b      	ldr	r3, [r1, #16]
 8014076:	b95b      	cbnz	r3, 8014090 <_svfiprintf_r+0x30>
 8014078:	2140      	movs	r1, #64	; 0x40
 801407a:	f7ff fa69 	bl	8013550 <_malloc_r>
 801407e:	6028      	str	r0, [r5, #0]
 8014080:	6128      	str	r0, [r5, #16]
 8014082:	b918      	cbnz	r0, 801408c <_svfiprintf_r+0x2c>
 8014084:	230c      	movs	r3, #12
 8014086:	f8c8 3000 	str.w	r3, [r8]
 801408a:	e0cd      	b.n	8014228 <_svfiprintf_r+0x1c8>
 801408c:	2340      	movs	r3, #64	; 0x40
 801408e:	616b      	str	r3, [r5, #20]
 8014090:	2300      	movs	r3, #0
 8014092:	9309      	str	r3, [sp, #36]	; 0x24
 8014094:	2320      	movs	r3, #32
 8014096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801409a:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8014238 <_svfiprintf_r+0x1d8>
 801409e:	2330      	movs	r3, #48	; 0x30
 80140a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140a4:	4637      	mov	r7, r6
 80140a6:	463c      	mov	r4, r7
 80140a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80140ac:	b91b      	cbnz	r3, 80140b6 <_svfiprintf_r+0x56>
 80140ae:	ebb7 0906 	subs.w	r9, r7, r6
 80140b2:	d010      	beq.n	80140d6 <_svfiprintf_r+0x76>
 80140b4:	e003      	b.n	80140be <_svfiprintf_r+0x5e>
 80140b6:	2b25      	cmp	r3, #37	; 0x25
 80140b8:	d0f9      	beq.n	80140ae <_svfiprintf_r+0x4e>
 80140ba:	4627      	mov	r7, r4
 80140bc:	e7f3      	b.n	80140a6 <_svfiprintf_r+0x46>
 80140be:	464b      	mov	r3, r9
 80140c0:	4632      	mov	r2, r6
 80140c2:	4629      	mov	r1, r5
 80140c4:	4640      	mov	r0, r8
 80140c6:	f7ff fef3 	bl	8013eb0 <__ssputs_r>
 80140ca:	3001      	adds	r0, #1
 80140cc:	f000 80a7 	beq.w	801421e <_svfiprintf_r+0x1be>
 80140d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140d2:	444b      	add	r3, r9
 80140d4:	9309      	str	r3, [sp, #36]	; 0x24
 80140d6:	783b      	ldrb	r3, [r7, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	f000 80a0 	beq.w	801421e <_svfiprintf_r+0x1be>
 80140de:	2300      	movs	r3, #0
 80140e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80140e4:	9304      	str	r3, [sp, #16]
 80140e6:	9307      	str	r3, [sp, #28]
 80140e8:	9205      	str	r2, [sp, #20]
 80140ea:	9306      	str	r3, [sp, #24]
 80140ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140f0:	931a      	str	r3, [sp, #104]	; 0x68
 80140f2:	2601      	movs	r6, #1
 80140f4:	2205      	movs	r2, #5
 80140f6:	7821      	ldrb	r1, [r4, #0]
 80140f8:	484e      	ldr	r0, [pc, #312]	; (8014234 <_svfiprintf_r+0x1d4>)
 80140fa:	f000 fb33 	bl	8014764 <memchr>
 80140fe:	1c67      	adds	r7, r4, #1
 8014100:	9b04      	ldr	r3, [sp, #16]
 8014102:	b138      	cbz	r0, 8014114 <_svfiprintf_r+0xb4>
 8014104:	4a4b      	ldr	r2, [pc, #300]	; (8014234 <_svfiprintf_r+0x1d4>)
 8014106:	463c      	mov	r4, r7
 8014108:	1a80      	subs	r0, r0, r2
 801410a:	fa06 f000 	lsl.w	r0, r6, r0
 801410e:	4318      	orrs	r0, r3
 8014110:	9004      	str	r0, [sp, #16]
 8014112:	e7ef      	b.n	80140f4 <_svfiprintf_r+0x94>
 8014114:	06d9      	lsls	r1, r3, #27
 8014116:	bf44      	itt	mi
 8014118:	2220      	movmi	r2, #32
 801411a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801411e:	071a      	lsls	r2, r3, #28
 8014120:	bf44      	itt	mi
 8014122:	222b      	movmi	r2, #43	; 0x2b
 8014124:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014128:	7822      	ldrb	r2, [r4, #0]
 801412a:	2a2a      	cmp	r2, #42	; 0x2a
 801412c:	d003      	beq.n	8014136 <_svfiprintf_r+0xd6>
 801412e:	9a07      	ldr	r2, [sp, #28]
 8014130:	2100      	movs	r1, #0
 8014132:	200a      	movs	r0, #10
 8014134:	e00b      	b.n	801414e <_svfiprintf_r+0xee>
 8014136:	9a03      	ldr	r2, [sp, #12]
 8014138:	1d11      	adds	r1, r2, #4
 801413a:	6812      	ldr	r2, [r2, #0]
 801413c:	9103      	str	r1, [sp, #12]
 801413e:	2a00      	cmp	r2, #0
 8014140:	da10      	bge.n	8014164 <_svfiprintf_r+0x104>
 8014142:	4252      	negs	r2, r2
 8014144:	f043 0002 	orr.w	r0, r3, #2
 8014148:	9207      	str	r2, [sp, #28]
 801414a:	9004      	str	r0, [sp, #16]
 801414c:	e00b      	b.n	8014166 <_svfiprintf_r+0x106>
 801414e:	4627      	mov	r7, r4
 8014150:	783b      	ldrb	r3, [r7, #0]
 8014152:	3401      	adds	r4, #1
 8014154:	3b30      	subs	r3, #48	; 0x30
 8014156:	2b09      	cmp	r3, #9
 8014158:	d803      	bhi.n	8014162 <_svfiprintf_r+0x102>
 801415a:	fb00 3202 	mla	r2, r0, r2, r3
 801415e:	2101      	movs	r1, #1
 8014160:	e7f5      	b.n	801414e <_svfiprintf_r+0xee>
 8014162:	b101      	cbz	r1, 8014166 <_svfiprintf_r+0x106>
 8014164:	9207      	str	r2, [sp, #28]
 8014166:	783b      	ldrb	r3, [r7, #0]
 8014168:	2b2e      	cmp	r3, #46	; 0x2e
 801416a:	d11e      	bne.n	80141aa <_svfiprintf_r+0x14a>
 801416c:	787b      	ldrb	r3, [r7, #1]
 801416e:	2b2a      	cmp	r3, #42	; 0x2a
 8014170:	d10a      	bne.n	8014188 <_svfiprintf_r+0x128>
 8014172:	9b03      	ldr	r3, [sp, #12]
 8014174:	3702      	adds	r7, #2
 8014176:	1d1a      	adds	r2, r3, #4
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	9203      	str	r2, [sp, #12]
 801417c:	2b00      	cmp	r3, #0
 801417e:	bfb8      	it	lt
 8014180:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014184:	9305      	str	r3, [sp, #20]
 8014186:	e010      	b.n	80141aa <_svfiprintf_r+0x14a>
 8014188:	2300      	movs	r3, #0
 801418a:	4619      	mov	r1, r3
 801418c:	9305      	str	r3, [sp, #20]
 801418e:	1c78      	adds	r0, r7, #1
 8014190:	240a      	movs	r4, #10
 8014192:	4607      	mov	r7, r0
 8014194:	783a      	ldrb	r2, [r7, #0]
 8014196:	3001      	adds	r0, #1
 8014198:	3a30      	subs	r2, #48	; 0x30
 801419a:	2a09      	cmp	r2, #9
 801419c:	d803      	bhi.n	80141a6 <_svfiprintf_r+0x146>
 801419e:	fb04 2101 	mla	r1, r4, r1, r2
 80141a2:	2301      	movs	r3, #1
 80141a4:	e7f5      	b.n	8014192 <_svfiprintf_r+0x132>
 80141a6:	b103      	cbz	r3, 80141aa <_svfiprintf_r+0x14a>
 80141a8:	9105      	str	r1, [sp, #20]
 80141aa:	2203      	movs	r2, #3
 80141ac:	7839      	ldrb	r1, [r7, #0]
 80141ae:	4822      	ldr	r0, [pc, #136]	; (8014238 <_svfiprintf_r+0x1d8>)
 80141b0:	f000 fad8 	bl	8014764 <memchr>
 80141b4:	b140      	cbz	r0, 80141c8 <_svfiprintf_r+0x168>
 80141b6:	2340      	movs	r3, #64	; 0x40
 80141b8:	ebcb 0000 	rsb	r0, fp, r0
 80141bc:	fa03 f000 	lsl.w	r0, r3, r0
 80141c0:	9b04      	ldr	r3, [sp, #16]
 80141c2:	3701      	adds	r7, #1
 80141c4:	4318      	orrs	r0, r3
 80141c6:	9004      	str	r0, [sp, #16]
 80141c8:	7839      	ldrb	r1, [r7, #0]
 80141ca:	2206      	movs	r2, #6
 80141cc:	481b      	ldr	r0, [pc, #108]	; (801423c <_svfiprintf_r+0x1dc>)
 80141ce:	1c7e      	adds	r6, r7, #1
 80141d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141d4:	f000 fac6 	bl	8014764 <memchr>
 80141d8:	b188      	cbz	r0, 80141fe <_svfiprintf_r+0x19e>
 80141da:	4b19      	ldr	r3, [pc, #100]	; (8014240 <_svfiprintf_r+0x1e0>)
 80141dc:	b933      	cbnz	r3, 80141ec <_svfiprintf_r+0x18c>
 80141de:	9b03      	ldr	r3, [sp, #12]
 80141e0:	3307      	adds	r3, #7
 80141e2:	f023 0307 	bic.w	r3, r3, #7
 80141e6:	3308      	adds	r3, #8
 80141e8:	9303      	str	r3, [sp, #12]
 80141ea:	e014      	b.n	8014216 <_svfiprintf_r+0x1b6>
 80141ec:	ab03      	add	r3, sp, #12
 80141ee:	9300      	str	r3, [sp, #0]
 80141f0:	462a      	mov	r2, r5
 80141f2:	4b14      	ldr	r3, [pc, #80]	; (8014244 <_svfiprintf_r+0x1e4>)
 80141f4:	a904      	add	r1, sp, #16
 80141f6:	4640      	mov	r0, r8
 80141f8:	f3af 8000 	nop.w
 80141fc:	e007      	b.n	801420e <_svfiprintf_r+0x1ae>
 80141fe:	ab03      	add	r3, sp, #12
 8014200:	9300      	str	r3, [sp, #0]
 8014202:	462a      	mov	r2, r5
 8014204:	4b0f      	ldr	r3, [pc, #60]	; (8014244 <_svfiprintf_r+0x1e4>)
 8014206:	a904      	add	r1, sp, #16
 8014208:	4640      	mov	r0, r8
 801420a:	f000 f893 	bl	8014334 <_printf_i>
 801420e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014212:	4682      	mov	sl, r0
 8014214:	d003      	beq.n	801421e <_svfiprintf_r+0x1be>
 8014216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014218:	4453      	add	r3, sl
 801421a:	9309      	str	r3, [sp, #36]	; 0x24
 801421c:	e742      	b.n	80140a4 <_svfiprintf_r+0x44>
 801421e:	89ab      	ldrh	r3, [r5, #12]
 8014220:	065b      	lsls	r3, r3, #25
 8014222:	d401      	bmi.n	8014228 <_svfiprintf_r+0x1c8>
 8014224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014226:	e001      	b.n	801422c <_svfiprintf_r+0x1cc>
 8014228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801422c:	b01d      	add	sp, #116	; 0x74
 801422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014232:	bf00      	nop
 8014234:	080169c0 	.word	0x080169c0
 8014238:	080169c6 	.word	0x080169c6
 801423c:	080169ca 	.word	0x080169ca
 8014240:	00000000 	.word	0x00000000
 8014244:	08013eb1 	.word	0x08013eb1

08014248 <_printf_common>:
 8014248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801424c:	4691      	mov	r9, r2
 801424e:	461f      	mov	r7, r3
 8014250:	690a      	ldr	r2, [r1, #16]
 8014252:	688b      	ldr	r3, [r1, #8]
 8014254:	4606      	mov	r6, r0
 8014256:	4293      	cmp	r3, r2
 8014258:	bfb8      	it	lt
 801425a:	4613      	movlt	r3, r2
 801425c:	f8c9 3000 	str.w	r3, [r9]
 8014260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014264:	460c      	mov	r4, r1
 8014266:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801426a:	b112      	cbz	r2, 8014272 <_printf_common+0x2a>
 801426c:	3301      	adds	r3, #1
 801426e:	f8c9 3000 	str.w	r3, [r9]
 8014272:	6823      	ldr	r3, [r4, #0]
 8014274:	0699      	lsls	r1, r3, #26
 8014276:	bf42      	ittt	mi
 8014278:	f8d9 3000 	ldrmi.w	r3, [r9]
 801427c:	3302      	addmi	r3, #2
 801427e:	f8c9 3000 	strmi.w	r3, [r9]
 8014282:	6825      	ldr	r5, [r4, #0]
 8014284:	f015 0506 	ands.w	r5, r5, #6
 8014288:	d110      	bne.n	80142ac <_printf_common+0x64>
 801428a:	f104 0a19 	add.w	sl, r4, #25
 801428e:	e007      	b.n	80142a0 <_printf_common+0x58>
 8014290:	2301      	movs	r3, #1
 8014292:	4652      	mov	r2, sl
 8014294:	4639      	mov	r1, r7
 8014296:	4630      	mov	r0, r6
 8014298:	47c0      	blx	r8
 801429a:	3001      	adds	r0, #1
 801429c:	d01a      	beq.n	80142d4 <_printf_common+0x8c>
 801429e:	3501      	adds	r5, #1
 80142a0:	68e3      	ldr	r3, [r4, #12]
 80142a2:	f8d9 2000 	ldr.w	r2, [r9]
 80142a6:	1a9b      	subs	r3, r3, r2
 80142a8:	429d      	cmp	r5, r3
 80142aa:	dbf1      	blt.n	8014290 <_printf_common+0x48>
 80142ac:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80142b0:	6822      	ldr	r2, [r4, #0]
 80142b2:	3300      	adds	r3, #0
 80142b4:	bf18      	it	ne
 80142b6:	2301      	movne	r3, #1
 80142b8:	0692      	lsls	r2, r2, #26
 80142ba:	d50f      	bpl.n	80142dc <_printf_common+0x94>
 80142bc:	18e1      	adds	r1, r4, r3
 80142be:	2030      	movs	r0, #48	; 0x30
 80142c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80142c4:	1c5a      	adds	r2, r3, #1
 80142c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80142ca:	4422      	add	r2, r4
 80142cc:	3302      	adds	r3, #2
 80142ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80142d2:	e003      	b.n	80142dc <_printf_common+0x94>
 80142d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80142e0:	4639      	mov	r1, r7
 80142e2:	4630      	mov	r0, r6
 80142e4:	47c0      	blx	r8
 80142e6:	3001      	adds	r0, #1
 80142e8:	d0f4      	beq.n	80142d4 <_printf_common+0x8c>
 80142ea:	6822      	ldr	r2, [r4, #0]
 80142ec:	f8d9 5000 	ldr.w	r5, [r9]
 80142f0:	68e3      	ldr	r3, [r4, #12]
 80142f2:	f002 0206 	and.w	r2, r2, #6
 80142f6:	2a04      	cmp	r2, #4
 80142f8:	bf08      	it	eq
 80142fa:	1b5d      	subeq	r5, r3, r5
 80142fc:	6922      	ldr	r2, [r4, #16]
 80142fe:	68a3      	ldr	r3, [r4, #8]
 8014300:	bf0c      	ite	eq
 8014302:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014306:	2500      	movne	r5, #0
 8014308:	4293      	cmp	r3, r2
 801430a:	bfc4      	itt	gt
 801430c:	1a9b      	subgt	r3, r3, r2
 801430e:	18ed      	addgt	r5, r5, r3
 8014310:	f04f 0900 	mov.w	r9, #0
 8014314:	341a      	adds	r4, #26
 8014316:	454d      	cmp	r5, r9
 8014318:	d009      	beq.n	801432e <_printf_common+0xe6>
 801431a:	2301      	movs	r3, #1
 801431c:	4622      	mov	r2, r4
 801431e:	4639      	mov	r1, r7
 8014320:	4630      	mov	r0, r6
 8014322:	47c0      	blx	r8
 8014324:	3001      	adds	r0, #1
 8014326:	d0d5      	beq.n	80142d4 <_printf_common+0x8c>
 8014328:	f109 0901 	add.w	r9, r9, #1
 801432c:	e7f3      	b.n	8014316 <_printf_common+0xce>
 801432e:	2000      	movs	r0, #0
 8014330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014334 <_printf_i>:
 8014334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014338:	4617      	mov	r7, r2
 801433a:	7e0a      	ldrb	r2, [r1, #24]
 801433c:	b085      	sub	sp, #20
 801433e:	2a6e      	cmp	r2, #110	; 0x6e
 8014340:	4698      	mov	r8, r3
 8014342:	4606      	mov	r6, r0
 8014344:	460c      	mov	r4, r1
 8014346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014348:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 801434c:	f000 80ae 	beq.w	80144ac <_printf_i+0x178>
 8014350:	d811      	bhi.n	8014376 <_printf_i+0x42>
 8014352:	2a63      	cmp	r2, #99	; 0x63
 8014354:	d022      	beq.n	801439c <_printf_i+0x68>
 8014356:	d809      	bhi.n	801436c <_printf_i+0x38>
 8014358:	2a00      	cmp	r2, #0
 801435a:	f000 80bb 	beq.w	80144d4 <_printf_i+0x1a0>
 801435e:	2a58      	cmp	r2, #88	; 0x58
 8014360:	f040 80ca 	bne.w	80144f8 <_printf_i+0x1c4>
 8014364:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8014368:	4983      	ldr	r1, [pc, #524]	; (8014578 <_printf_i+0x244>)
 801436a:	e055      	b.n	8014418 <_printf_i+0xe4>
 801436c:	2a64      	cmp	r2, #100	; 0x64
 801436e:	d01e      	beq.n	80143ae <_printf_i+0x7a>
 8014370:	2a69      	cmp	r2, #105	; 0x69
 8014372:	d01c      	beq.n	80143ae <_printf_i+0x7a>
 8014374:	e0c0      	b.n	80144f8 <_printf_i+0x1c4>
 8014376:	2a73      	cmp	r2, #115	; 0x73
 8014378:	f000 80b0 	beq.w	80144dc <_printf_i+0x1a8>
 801437c:	d809      	bhi.n	8014392 <_printf_i+0x5e>
 801437e:	2a6f      	cmp	r2, #111	; 0x6f
 8014380:	d02e      	beq.n	80143e0 <_printf_i+0xac>
 8014382:	2a70      	cmp	r2, #112	; 0x70
 8014384:	f040 80b8 	bne.w	80144f8 <_printf_i+0x1c4>
 8014388:	680a      	ldr	r2, [r1, #0]
 801438a:	f042 0220 	orr.w	r2, r2, #32
 801438e:	600a      	str	r2, [r1, #0]
 8014390:	e03e      	b.n	8014410 <_printf_i+0xdc>
 8014392:	2a75      	cmp	r2, #117	; 0x75
 8014394:	d024      	beq.n	80143e0 <_printf_i+0xac>
 8014396:	2a78      	cmp	r2, #120	; 0x78
 8014398:	d03a      	beq.n	8014410 <_printf_i+0xdc>
 801439a:	e0ad      	b.n	80144f8 <_printf_i+0x1c4>
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80143a2:	1d11      	adds	r1, r2, #4
 80143a4:	6019      	str	r1, [r3, #0]
 80143a6:	6813      	ldr	r3, [r2, #0]
 80143a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80143ac:	e0a8      	b.n	8014500 <_printf_i+0x1cc>
 80143ae:	6821      	ldr	r1, [r4, #0]
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80143b6:	d002      	beq.n	80143be <_printf_i+0x8a>
 80143b8:	1d11      	adds	r1, r2, #4
 80143ba:	6019      	str	r1, [r3, #0]
 80143bc:	e008      	b.n	80143d0 <_printf_i+0x9c>
 80143be:	f011 0f40 	tst.w	r1, #64	; 0x40
 80143c2:	f102 0104 	add.w	r1, r2, #4
 80143c6:	6019      	str	r1, [r3, #0]
 80143c8:	d002      	beq.n	80143d0 <_printf_i+0x9c>
 80143ca:	f9b2 3000 	ldrsh.w	r3, [r2]
 80143ce:	e000      	b.n	80143d2 <_printf_i+0x9e>
 80143d0:	6813      	ldr	r3, [r2, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	da3c      	bge.n	8014450 <_printf_i+0x11c>
 80143d6:	222d      	movs	r2, #45	; 0x2d
 80143d8:	425b      	negs	r3, r3
 80143da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80143de:	e037      	b.n	8014450 <_printf_i+0x11c>
 80143e0:	6821      	ldr	r1, [r4, #0]
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80143e8:	d002      	beq.n	80143f0 <_printf_i+0xbc>
 80143ea:	1d11      	adds	r1, r2, #4
 80143ec:	6019      	str	r1, [r3, #0]
 80143ee:	e007      	b.n	8014400 <_printf_i+0xcc>
 80143f0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80143f4:	f102 0104 	add.w	r1, r2, #4
 80143f8:	6019      	str	r1, [r3, #0]
 80143fa:	d001      	beq.n	8014400 <_printf_i+0xcc>
 80143fc:	8813      	ldrh	r3, [r2, #0]
 80143fe:	e000      	b.n	8014402 <_printf_i+0xce>
 8014400:	6813      	ldr	r3, [r2, #0]
 8014402:	7e22      	ldrb	r2, [r4, #24]
 8014404:	495c      	ldr	r1, [pc, #368]	; (8014578 <_printf_i+0x244>)
 8014406:	2a6f      	cmp	r2, #111	; 0x6f
 8014408:	bf14      	ite	ne
 801440a:	220a      	movne	r2, #10
 801440c:	2208      	moveq	r2, #8
 801440e:	e01b      	b.n	8014448 <_printf_i+0x114>
 8014410:	2278      	movs	r2, #120	; 0x78
 8014412:	495a      	ldr	r1, [pc, #360]	; (801457c <_printf_i+0x248>)
 8014414:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8014418:	6822      	ldr	r2, [r4, #0]
 801441a:	6818      	ldr	r0, [r3, #0]
 801441c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8014420:	f100 0504 	add.w	r5, r0, #4
 8014424:	601d      	str	r5, [r3, #0]
 8014426:	d103      	bne.n	8014430 <_printf_i+0xfc>
 8014428:	0655      	lsls	r5, r2, #25
 801442a:	d501      	bpl.n	8014430 <_printf_i+0xfc>
 801442c:	8803      	ldrh	r3, [r0, #0]
 801442e:	e000      	b.n	8014432 <_printf_i+0xfe>
 8014430:	6803      	ldr	r3, [r0, #0]
 8014432:	07d0      	lsls	r0, r2, #31
 8014434:	bf44      	itt	mi
 8014436:	f042 0220 	orrmi.w	r2, r2, #32
 801443a:	6022      	strmi	r2, [r4, #0]
 801443c:	b91b      	cbnz	r3, 8014446 <_printf_i+0x112>
 801443e:	6822      	ldr	r2, [r4, #0]
 8014440:	f022 0220 	bic.w	r2, r2, #32
 8014444:	6022      	str	r2, [r4, #0]
 8014446:	2210      	movs	r2, #16
 8014448:	2000      	movs	r0, #0
 801444a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801444e:	e001      	b.n	8014454 <_printf_i+0x120>
 8014450:	4949      	ldr	r1, [pc, #292]	; (8014578 <_printf_i+0x244>)
 8014452:	220a      	movs	r2, #10
 8014454:	6865      	ldr	r5, [r4, #4]
 8014456:	2d00      	cmp	r5, #0
 8014458:	60a5      	str	r5, [r4, #8]
 801445a:	db08      	blt.n	801446e <_printf_i+0x13a>
 801445c:	6820      	ldr	r0, [r4, #0]
 801445e:	f020 0004 	bic.w	r0, r0, #4
 8014462:	6020      	str	r0, [r4, #0]
 8014464:	b92b      	cbnz	r3, 8014472 <_printf_i+0x13e>
 8014466:	2d00      	cmp	r5, #0
 8014468:	d17d      	bne.n	8014566 <_printf_i+0x232>
 801446a:	4675      	mov	r5, lr
 801446c:	e00c      	b.n	8014488 <_printf_i+0x154>
 801446e:	2b00      	cmp	r3, #0
 8014470:	d079      	beq.n	8014566 <_printf_i+0x232>
 8014472:	4675      	mov	r5, lr
 8014474:	fbb3 f0f2 	udiv	r0, r3, r2
 8014478:	fb02 3310 	mls	r3, r2, r0, r3
 801447c:	5ccb      	ldrb	r3, [r1, r3]
 801447e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014482:	4603      	mov	r3, r0
 8014484:	2800      	cmp	r0, #0
 8014486:	d1f5      	bne.n	8014474 <_printf_i+0x140>
 8014488:	2a08      	cmp	r2, #8
 801448a:	d10b      	bne.n	80144a4 <_printf_i+0x170>
 801448c:	6823      	ldr	r3, [r4, #0]
 801448e:	07da      	lsls	r2, r3, #31
 8014490:	d508      	bpl.n	80144a4 <_printf_i+0x170>
 8014492:	6923      	ldr	r3, [r4, #16]
 8014494:	6862      	ldr	r2, [r4, #4]
 8014496:	429a      	cmp	r2, r3
 8014498:	bfde      	ittt	le
 801449a:	2330      	movle	r3, #48	; 0x30
 801449c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80144a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80144a4:	ebc5 030e 	rsb	r3, r5, lr
 80144a8:	6123      	str	r3, [r4, #16]
 80144aa:	e02e      	b.n	801450a <_printf_i+0x1d6>
 80144ac:	6808      	ldr	r0, [r1, #0]
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80144b4:	6949      	ldr	r1, [r1, #20]
 80144b6:	d003      	beq.n	80144c0 <_printf_i+0x18c>
 80144b8:	1d10      	adds	r0, r2, #4
 80144ba:	6018      	str	r0, [r3, #0]
 80144bc:	6813      	ldr	r3, [r2, #0]
 80144be:	e008      	b.n	80144d2 <_printf_i+0x19e>
 80144c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80144c4:	f102 0004 	add.w	r0, r2, #4
 80144c8:	6018      	str	r0, [r3, #0]
 80144ca:	6813      	ldr	r3, [r2, #0]
 80144cc:	d001      	beq.n	80144d2 <_printf_i+0x19e>
 80144ce:	8019      	strh	r1, [r3, #0]
 80144d0:	e000      	b.n	80144d4 <_printf_i+0x1a0>
 80144d2:	6019      	str	r1, [r3, #0]
 80144d4:	2300      	movs	r3, #0
 80144d6:	6123      	str	r3, [r4, #16]
 80144d8:	4675      	mov	r5, lr
 80144da:	e016      	b.n	801450a <_printf_i+0x1d6>
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	1d11      	adds	r1, r2, #4
 80144e0:	6019      	str	r1, [r3, #0]
 80144e2:	6815      	ldr	r5, [r2, #0]
 80144e4:	2100      	movs	r1, #0
 80144e6:	6862      	ldr	r2, [r4, #4]
 80144e8:	4628      	mov	r0, r5
 80144ea:	f000 f93b 	bl	8014764 <memchr>
 80144ee:	b108      	cbz	r0, 80144f4 <_printf_i+0x1c0>
 80144f0:	1b40      	subs	r0, r0, r5
 80144f2:	6060      	str	r0, [r4, #4]
 80144f4:	6863      	ldr	r3, [r4, #4]
 80144f6:	e004      	b.n	8014502 <_printf_i+0x1ce>
 80144f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144fc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8014500:	2301      	movs	r3, #1
 8014502:	6123      	str	r3, [r4, #16]
 8014504:	2300      	movs	r3, #0
 8014506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801450a:	f8cd 8000 	str.w	r8, [sp]
 801450e:	463b      	mov	r3, r7
 8014510:	aa03      	add	r2, sp, #12
 8014512:	4621      	mov	r1, r4
 8014514:	4630      	mov	r0, r6
 8014516:	f7ff fe97 	bl	8014248 <_printf_common>
 801451a:	3001      	adds	r0, #1
 801451c:	d102      	bne.n	8014524 <_printf_i+0x1f0>
 801451e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014522:	e026      	b.n	8014572 <_printf_i+0x23e>
 8014524:	6923      	ldr	r3, [r4, #16]
 8014526:	462a      	mov	r2, r5
 8014528:	4639      	mov	r1, r7
 801452a:	4630      	mov	r0, r6
 801452c:	47c0      	blx	r8
 801452e:	3001      	adds	r0, #1
 8014530:	d0f5      	beq.n	801451e <_printf_i+0x1ea>
 8014532:	6823      	ldr	r3, [r4, #0]
 8014534:	079b      	lsls	r3, r3, #30
 8014536:	d510      	bpl.n	801455a <_printf_i+0x226>
 8014538:	2500      	movs	r5, #0
 801453a:	f104 0919 	add.w	r9, r4, #25
 801453e:	e007      	b.n	8014550 <_printf_i+0x21c>
 8014540:	2301      	movs	r3, #1
 8014542:	464a      	mov	r2, r9
 8014544:	4639      	mov	r1, r7
 8014546:	4630      	mov	r0, r6
 8014548:	47c0      	blx	r8
 801454a:	3001      	adds	r0, #1
 801454c:	d0e7      	beq.n	801451e <_printf_i+0x1ea>
 801454e:	3501      	adds	r5, #1
 8014550:	68e3      	ldr	r3, [r4, #12]
 8014552:	9a03      	ldr	r2, [sp, #12]
 8014554:	1a9b      	subs	r3, r3, r2
 8014556:	429d      	cmp	r5, r3
 8014558:	dbf2      	blt.n	8014540 <_printf_i+0x20c>
 801455a:	68e0      	ldr	r0, [r4, #12]
 801455c:	9b03      	ldr	r3, [sp, #12]
 801455e:	4298      	cmp	r0, r3
 8014560:	bfb8      	it	lt
 8014562:	4618      	movlt	r0, r3
 8014564:	e005      	b.n	8014572 <_printf_i+0x23e>
 8014566:	780b      	ldrb	r3, [r1, #0]
 8014568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801456c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014570:	e78a      	b.n	8014488 <_printf_i+0x154>
 8014572:	b005      	add	sp, #20
 8014574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014578:	080169d1 	.word	0x080169d1
 801457c:	080169e2 	.word	0x080169e2

08014580 <cleanup_glue>:
 8014580:	b538      	push	{r3, r4, r5, lr}
 8014582:	460c      	mov	r4, r1
 8014584:	6809      	ldr	r1, [r1, #0]
 8014586:	4605      	mov	r5, r0
 8014588:	b109      	cbz	r1, 801458e <cleanup_glue+0xe>
 801458a:	f7ff fff9 	bl	8014580 <cleanup_glue>
 801458e:	4621      	mov	r1, r4
 8014590:	4628      	mov	r0, r5
 8014592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014596:	f7fe bf97 	b.w	80134c8 <_free_r>
	...

0801459c <_reclaim_reent>:
 801459c:	4b2b      	ldr	r3, [pc, #172]	; (801464c <_reclaim_reent+0xb0>)
 801459e:	b570      	push	{r4, r5, r6, lr}
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	4604      	mov	r4, r0
 80145a4:	4283      	cmp	r3, r0
 80145a6:	d050      	beq.n	801464a <_reclaim_reent+0xae>
 80145a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80145aa:	b1d3      	cbz	r3, 80145e2 <_reclaim_reent+0x46>
 80145ac:	68db      	ldr	r3, [r3, #12]
 80145ae:	b193      	cbz	r3, 80145d6 <_reclaim_reent+0x3a>
 80145b0:	2500      	movs	r5, #0
 80145b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145b4:	68db      	ldr	r3, [r3, #12]
 80145b6:	5959      	ldr	r1, [r3, r5]
 80145b8:	b129      	cbz	r1, 80145c6 <_reclaim_reent+0x2a>
 80145ba:	680e      	ldr	r6, [r1, #0]
 80145bc:	4620      	mov	r0, r4
 80145be:	f7fe ff83 	bl	80134c8 <_free_r>
 80145c2:	4631      	mov	r1, r6
 80145c4:	e7f8      	b.n	80145b8 <_reclaim_reent+0x1c>
 80145c6:	3504      	adds	r5, #4
 80145c8:	2d80      	cmp	r5, #128	; 0x80
 80145ca:	d1f2      	bne.n	80145b2 <_reclaim_reent+0x16>
 80145cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145ce:	4620      	mov	r0, r4
 80145d0:	68d9      	ldr	r1, [r3, #12]
 80145d2:	f7fe ff79 	bl	80134c8 <_free_r>
 80145d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145d8:	6819      	ldr	r1, [r3, #0]
 80145da:	b111      	cbz	r1, 80145e2 <_reclaim_reent+0x46>
 80145dc:	4620      	mov	r0, r4
 80145de:	f7fe ff73 	bl	80134c8 <_free_r>
 80145e2:	6961      	ldr	r1, [r4, #20]
 80145e4:	b111      	cbz	r1, 80145ec <_reclaim_reent+0x50>
 80145e6:	4620      	mov	r0, r4
 80145e8:	f7fe ff6e 	bl	80134c8 <_free_r>
 80145ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80145ee:	b111      	cbz	r1, 80145f6 <_reclaim_reent+0x5a>
 80145f0:	4620      	mov	r0, r4
 80145f2:	f7fe ff69 	bl	80134c8 <_free_r>
 80145f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80145f8:	b111      	cbz	r1, 8014600 <_reclaim_reent+0x64>
 80145fa:	4620      	mov	r0, r4
 80145fc:	f7fe ff64 	bl	80134c8 <_free_r>
 8014600:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014602:	b111      	cbz	r1, 801460a <_reclaim_reent+0x6e>
 8014604:	4620      	mov	r0, r4
 8014606:	f7fe ff5f 	bl	80134c8 <_free_r>
 801460a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801460c:	b111      	cbz	r1, 8014614 <_reclaim_reent+0x78>
 801460e:	4620      	mov	r0, r4
 8014610:	f7fe ff5a 	bl	80134c8 <_free_r>
 8014614:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014616:	b111      	cbz	r1, 801461e <_reclaim_reent+0x82>
 8014618:	4620      	mov	r0, r4
 801461a:	f7fe ff55 	bl	80134c8 <_free_r>
 801461e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014620:	b111      	cbz	r1, 8014628 <_reclaim_reent+0x8c>
 8014622:	4620      	mov	r0, r4
 8014624:	f7fe ff50 	bl	80134c8 <_free_r>
 8014628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801462a:	b111      	cbz	r1, 8014632 <_reclaim_reent+0x96>
 801462c:	4620      	mov	r0, r4
 801462e:	f7fe ff4b 	bl	80134c8 <_free_r>
 8014632:	69a3      	ldr	r3, [r4, #24]
 8014634:	b14b      	cbz	r3, 801464a <_reclaim_reent+0xae>
 8014636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014638:	4620      	mov	r0, r4
 801463a:	4798      	blx	r3
 801463c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801463e:	b121      	cbz	r1, 801464a <_reclaim_reent+0xae>
 8014640:	4620      	mov	r0, r4
 8014642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014646:	f7ff bf9b 	b.w	8014580 <cleanup_glue>
 801464a:	bd70      	pop	{r4, r5, r6, pc}
 801464c:	20000098 	.word	0x20000098

08014650 <__sread>:
 8014650:	b510      	push	{r4, lr}
 8014652:	460c      	mov	r4, r1
 8014654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014658:	f000 f8b8 	bl	80147cc <_read_r>
 801465c:	2800      	cmp	r0, #0
 801465e:	bfab      	itete	ge
 8014660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014662:	89a3      	ldrhlt	r3, [r4, #12]
 8014664:	181b      	addge	r3, r3, r0
 8014666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801466a:	bfac      	ite	ge
 801466c:	6563      	strge	r3, [r4, #84]	; 0x54
 801466e:	81a3      	strhlt	r3, [r4, #12]
 8014670:	bd10      	pop	{r4, pc}

08014672 <__seofread>:
 8014672:	2000      	movs	r0, #0
 8014674:	4770      	bx	lr

08014676 <__swrite>:
 8014676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801467a:	461f      	mov	r7, r3
 801467c:	898b      	ldrh	r3, [r1, #12]
 801467e:	4605      	mov	r5, r0
 8014680:	05db      	lsls	r3, r3, #23
 8014682:	460c      	mov	r4, r1
 8014684:	4616      	mov	r6, r2
 8014686:	d505      	bpl.n	8014694 <__swrite+0x1e>
 8014688:	2302      	movs	r3, #2
 801468a:	2200      	movs	r2, #0
 801468c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014690:	f000 f856 	bl	8014740 <_lseek_r>
 8014694:	89a3      	ldrh	r3, [r4, #12]
 8014696:	4632      	mov	r2, r6
 8014698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801469c:	81a3      	strh	r3, [r4, #12]
 801469e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146a2:	463b      	mov	r3, r7
 80146a4:	4628      	mov	r0, r5
 80146a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146aa:	f7ff b947 	b.w	801393c <_write_r>

080146ae <__sseek>:
 80146ae:	b510      	push	{r4, lr}
 80146b0:	460c      	mov	r4, r1
 80146b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146b6:	f000 f843 	bl	8014740 <_lseek_r>
 80146ba:	1c43      	adds	r3, r0, #1
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	bf15      	itete	ne
 80146c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80146c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80146ca:	81a3      	strheq	r3, [r4, #12]
 80146cc:	bf18      	it	ne
 80146ce:	81a3      	strhne	r3, [r4, #12]
 80146d0:	bd10      	pop	{r4, pc}

080146d2 <__sclose>:
 80146d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146d6:	f000 b801 	b.w	80146dc <_close_r>
	...

080146dc <_close_r>:
 80146dc:	b538      	push	{r3, r4, r5, lr}
 80146de:	4c06      	ldr	r4, [pc, #24]	; (80146f8 <_close_r+0x1c>)
 80146e0:	2300      	movs	r3, #0
 80146e2:	4605      	mov	r5, r0
 80146e4:	4608      	mov	r0, r1
 80146e6:	6023      	str	r3, [r4, #0]
 80146e8:	f000 f882 	bl	80147f0 <_close>
 80146ec:	1c43      	adds	r3, r0, #1
 80146ee:	d102      	bne.n	80146f6 <_close_r+0x1a>
 80146f0:	6823      	ldr	r3, [r4, #0]
 80146f2:	b103      	cbz	r3, 80146f6 <_close_r+0x1a>
 80146f4:	602b      	str	r3, [r5, #0]
 80146f6:	bd38      	pop	{r3, r4, r5, pc}
 80146f8:	20000d20 	.word	0x20000d20

080146fc <_fstat_r>:
 80146fc:	b538      	push	{r3, r4, r5, lr}
 80146fe:	4c07      	ldr	r4, [pc, #28]	; (801471c <_fstat_r+0x20>)
 8014700:	2300      	movs	r3, #0
 8014702:	4605      	mov	r5, r0
 8014704:	4608      	mov	r0, r1
 8014706:	4611      	mov	r1, r2
 8014708:	6023      	str	r3, [r4, #0]
 801470a:	f000 f879 	bl	8014800 <_fstat>
 801470e:	1c43      	adds	r3, r0, #1
 8014710:	d102      	bne.n	8014718 <_fstat_r+0x1c>
 8014712:	6823      	ldr	r3, [r4, #0]
 8014714:	b103      	cbz	r3, 8014718 <_fstat_r+0x1c>
 8014716:	602b      	str	r3, [r5, #0]
 8014718:	bd38      	pop	{r3, r4, r5, pc}
 801471a:	bf00      	nop
 801471c:	20000d20 	.word	0x20000d20

08014720 <_isatty_r>:
 8014720:	b538      	push	{r3, r4, r5, lr}
 8014722:	4c06      	ldr	r4, [pc, #24]	; (801473c <_isatty_r+0x1c>)
 8014724:	2300      	movs	r3, #0
 8014726:	4605      	mov	r5, r0
 8014728:	4608      	mov	r0, r1
 801472a:	6023      	str	r3, [r4, #0]
 801472c:	f000 f878 	bl	8014820 <_isatty>
 8014730:	1c43      	adds	r3, r0, #1
 8014732:	d102      	bne.n	801473a <_isatty_r+0x1a>
 8014734:	6823      	ldr	r3, [r4, #0]
 8014736:	b103      	cbz	r3, 801473a <_isatty_r+0x1a>
 8014738:	602b      	str	r3, [r5, #0]
 801473a:	bd38      	pop	{r3, r4, r5, pc}
 801473c:	20000d20 	.word	0x20000d20

08014740 <_lseek_r>:
 8014740:	b538      	push	{r3, r4, r5, lr}
 8014742:	4c07      	ldr	r4, [pc, #28]	; (8014760 <_lseek_r+0x20>)
 8014744:	4605      	mov	r5, r0
 8014746:	4608      	mov	r0, r1
 8014748:	4611      	mov	r1, r2
 801474a:	2200      	movs	r2, #0
 801474c:	6022      	str	r2, [r4, #0]
 801474e:	461a      	mov	r2, r3
 8014750:	f000 f876 	bl	8014840 <_lseek>
 8014754:	1c43      	adds	r3, r0, #1
 8014756:	d102      	bne.n	801475e <_lseek_r+0x1e>
 8014758:	6823      	ldr	r3, [r4, #0]
 801475a:	b103      	cbz	r3, 801475e <_lseek_r+0x1e>
 801475c:	602b      	str	r3, [r5, #0]
 801475e:	bd38      	pop	{r3, r4, r5, pc}
 8014760:	20000d20 	.word	0x20000d20

08014764 <memchr>:
 8014764:	b510      	push	{r4, lr}
 8014766:	b2c9      	uxtb	r1, r1
 8014768:	4402      	add	r2, r0
 801476a:	4290      	cmp	r0, r2
 801476c:	4603      	mov	r3, r0
 801476e:	d005      	beq.n	801477c <memchr+0x18>
 8014770:	781c      	ldrb	r4, [r3, #0]
 8014772:	3001      	adds	r0, #1
 8014774:	428c      	cmp	r4, r1
 8014776:	d1f8      	bne.n	801476a <memchr+0x6>
 8014778:	4618      	mov	r0, r3
 801477a:	bd10      	pop	{r4, pc}
 801477c:	2000      	movs	r0, #0
 801477e:	bd10      	pop	{r4, pc}

08014780 <memmove>:
 8014780:	4288      	cmp	r0, r1
 8014782:	b510      	push	{r4, lr}
 8014784:	eb01 0302 	add.w	r3, r1, r2
 8014788:	d801      	bhi.n	801478e <memmove+0xe>
 801478a:	1e42      	subs	r2, r0, #1
 801478c:	e00b      	b.n	80147a6 <memmove+0x26>
 801478e:	4298      	cmp	r0, r3
 8014790:	d2fb      	bcs.n	801478a <memmove+0xa>
 8014792:	1881      	adds	r1, r0, r2
 8014794:	1ad2      	subs	r2, r2, r3
 8014796:	42d3      	cmn	r3, r2
 8014798:	d004      	beq.n	80147a4 <memmove+0x24>
 801479a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801479e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80147a2:	e7f8      	b.n	8014796 <memmove+0x16>
 80147a4:	bd10      	pop	{r4, pc}
 80147a6:	4299      	cmp	r1, r3
 80147a8:	d004      	beq.n	80147b4 <memmove+0x34>
 80147aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80147b2:	e7f8      	b.n	80147a6 <memmove+0x26>
 80147b4:	bd10      	pop	{r4, pc}

080147b6 <_malloc_usable_size_r>:
 80147b6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80147ba:	2800      	cmp	r0, #0
 80147bc:	bfbe      	ittt	lt
 80147be:	1809      	addlt	r1, r1, r0
 80147c0:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 80147c4:	18c0      	addlt	r0, r0, r3
 80147c6:	3804      	subs	r0, #4
 80147c8:	4770      	bx	lr
	...

080147cc <_read_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4c07      	ldr	r4, [pc, #28]	; (80147ec <_read_r+0x20>)
 80147d0:	4605      	mov	r5, r0
 80147d2:	4608      	mov	r0, r1
 80147d4:	4611      	mov	r1, r2
 80147d6:	2200      	movs	r2, #0
 80147d8:	6022      	str	r2, [r4, #0]
 80147da:	461a      	mov	r2, r3
 80147dc:	f000 f838 	bl	8014850 <_read>
 80147e0:	1c43      	adds	r3, r0, #1
 80147e2:	d102      	bne.n	80147ea <_read_r+0x1e>
 80147e4:	6823      	ldr	r3, [r4, #0]
 80147e6:	b103      	cbz	r3, 80147ea <_read_r+0x1e>
 80147e8:	602b      	str	r3, [r5, #0]
 80147ea:	bd38      	pop	{r3, r4, r5, pc}
 80147ec:	20000d20 	.word	0x20000d20

080147f0 <_close>:
 80147f0:	4b02      	ldr	r3, [pc, #8]	; (80147fc <_close+0xc>)
 80147f2:	2258      	movs	r2, #88	; 0x58
 80147f4:	601a      	str	r2, [r3, #0]
 80147f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147fa:	4770      	bx	lr
 80147fc:	20000d20 	.word	0x20000d20

08014800 <_fstat>:
 8014800:	4b02      	ldr	r3, [pc, #8]	; (801480c <_fstat+0xc>)
 8014802:	2258      	movs	r2, #88	; 0x58
 8014804:	601a      	str	r2, [r3, #0]
 8014806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801480a:	4770      	bx	lr
 801480c:	20000d20 	.word	0x20000d20

08014810 <_getpid>:
 8014810:	4b02      	ldr	r3, [pc, #8]	; (801481c <_getpid+0xc>)
 8014812:	2258      	movs	r2, #88	; 0x58
 8014814:	601a      	str	r2, [r3, #0]
 8014816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801481a:	4770      	bx	lr
 801481c:	20000d20 	.word	0x20000d20

08014820 <_isatty>:
 8014820:	4b02      	ldr	r3, [pc, #8]	; (801482c <_isatty+0xc>)
 8014822:	2258      	movs	r2, #88	; 0x58
 8014824:	601a      	str	r2, [r3, #0]
 8014826:	2000      	movs	r0, #0
 8014828:	4770      	bx	lr
 801482a:	bf00      	nop
 801482c:	20000d20 	.word	0x20000d20

08014830 <_kill>:
 8014830:	4b02      	ldr	r3, [pc, #8]	; (801483c <_kill+0xc>)
 8014832:	2258      	movs	r2, #88	; 0x58
 8014834:	601a      	str	r2, [r3, #0]
 8014836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801483a:	4770      	bx	lr
 801483c:	20000d20 	.word	0x20000d20

08014840 <_lseek>:
 8014840:	4b02      	ldr	r3, [pc, #8]	; (801484c <_lseek+0xc>)
 8014842:	2258      	movs	r2, #88	; 0x58
 8014844:	601a      	str	r2, [r3, #0]
 8014846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801484a:	4770      	bx	lr
 801484c:	20000d20 	.word	0x20000d20

08014850 <_read>:
 8014850:	4b02      	ldr	r3, [pc, #8]	; (801485c <_read+0xc>)
 8014852:	2258      	movs	r2, #88	; 0x58
 8014854:	601a      	str	r2, [r3, #0]
 8014856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801485a:	4770      	bx	lr
 801485c:	20000d20 	.word	0x20000d20

08014860 <_sbrk>:
 8014860:	4a04      	ldr	r2, [pc, #16]	; (8014874 <_sbrk+0x14>)
 8014862:	4905      	ldr	r1, [pc, #20]	; (8014878 <_sbrk+0x18>)
 8014864:	6813      	ldr	r3, [r2, #0]
 8014866:	2b00      	cmp	r3, #0
 8014868:	bf08      	it	eq
 801486a:	460b      	moveq	r3, r1
 801486c:	4418      	add	r0, r3
 801486e:	6010      	str	r0, [r2, #0]
 8014870:	4618      	mov	r0, r3
 8014872:	4770      	bx	lr
 8014874:	20000d00 	.word	0x20000d00
 8014878:	20000d24 	.word	0x20000d24

0801487c <_write>:
 801487c:	4b02      	ldr	r3, [pc, #8]	; (8014888 <_write+0xc>)
 801487e:	2258      	movs	r2, #88	; 0x58
 8014880:	601a      	str	r2, [r3, #0]
 8014882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014886:	4770      	bx	lr
 8014888:	20000d20 	.word	0x20000d20

0801488c <_exit>:
 801488c:	e7fe      	b.n	801488c <_exit>
 801488e:	bf00      	nop

08014890 <__EH_FRAME_BEGIN__>:
 8014890:	0000 0000                                   ....

08014894 <_init>:
 8014894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014896:	bf00      	nop
 8014898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801489a:	bc08      	pop	{r3}
 801489c:	469e      	mov	lr, r3
 801489e:	4770      	bx	lr

080148a0 <_fini>:
 80148a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a2:	bf00      	nop
 80148a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148a6:	bc08      	pop	{r3}
 80148a8:	469e      	mov	lr, r3
 80148aa:	4770      	bx	lr
