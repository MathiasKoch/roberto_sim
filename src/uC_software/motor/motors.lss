
motors.none-eabi:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  080083b8  080083b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000128  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000090  20000000  0800851c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .jcr          00000004  20000090  080085ac  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  20000094  080085b0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa8  080085b0  00020aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138ba  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f82  00000000  00000000  00033977  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000983e  00000000  00000000  000378f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000588  00000000  00000000  00041137  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000568  00000000  00000000  000416bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000506b  00000000  00000000  00041c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006d8c  00000000  00000000  00046c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000006e  00000000  00000000  0004da1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c0  00000000  00000000  0004da8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000003c  00000000  00000000  0005124c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00051288  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <deregister_tm_clones>:
 800010c:	4b04      	ldr	r3, [pc, #16]	; (8000120 <deregister_tm_clones+0x14>)
 800010e:	4805      	ldr	r0, [pc, #20]	; (8000124 <deregister_tm_clones+0x18>)
 8000110:	1a1b      	subs	r3, r3, r0
 8000112:	2b06      	cmp	r3, #6
 8000114:	d902      	bls.n	800011c <deregister_tm_clones+0x10>
 8000116:	4b04      	ldr	r3, [pc, #16]	; (8000128 <deregister_tm_clones+0x1c>)
 8000118:	b103      	cbz	r3, 800011c <deregister_tm_clones+0x10>
 800011a:	4718      	bx	r3
 800011c:	4770      	bx	lr
 800011e:	bf00      	nop
 8000120:	20000097 	.word	0x20000097
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000

0800012c <register_tm_clones>:
 800012c:	4905      	ldr	r1, [pc, #20]	; (8000144 <register_tm_clones+0x18>)
 800012e:	4806      	ldr	r0, [pc, #24]	; (8000148 <register_tm_clones+0x1c>)
 8000130:	1a09      	subs	r1, r1, r0
 8000132:	1089      	asrs	r1, r1, #2
 8000134:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000138:	1049      	asrs	r1, r1, #1
 800013a:	d002      	beq.n	8000142 <register_tm_clones+0x16>
 800013c:	4b03      	ldr	r3, [pc, #12]	; (800014c <register_tm_clones+0x20>)
 800013e:	b103      	cbz	r3, 8000142 <register_tm_clones+0x16>
 8000140:	4718      	bx	r3
 8000142:	4770      	bx	lr
 8000144:	20000094 	.word	0x20000094
 8000148:	20000094 	.word	0x20000094
 800014c:	00000000 	.word	0x00000000

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c06      	ldr	r4, [pc, #24]	; (800016c <__do_global_dtors_aux+0x1c>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b943      	cbnz	r3, 800016a <__do_global_dtors_aux+0x1a>
 8000158:	f7ff ffd8 	bl	800010c <deregister_tm_clones>
 800015c:	4b04      	ldr	r3, [pc, #16]	; (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	b113      	cbz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <__do_global_dtors_aux+0x24>)
 8000162:	f3af 8000 	nop.w
 8000166:	2301      	movs	r3, #1
 8000168:	7023      	strb	r3, [r4, #0]
 800016a:	bd10      	pop	{r4, pc}
 800016c:	20000094 	.word	0x20000094
 8000170:	00000000 	.word	0x00000000
 8000174:	08007cd8 	.word	0x08007cd8

08000178 <frame_dummy>:
 8000178:	b508      	push	{r3, lr}
 800017a:	4b08      	ldr	r3, [pc, #32]	; (800019c <frame_dummy+0x24>)
 800017c:	b11b      	cbz	r3, 8000186 <frame_dummy+0xe>
 800017e:	4908      	ldr	r1, [pc, #32]	; (80001a0 <frame_dummy+0x28>)
 8000180:	4808      	ldr	r0, [pc, #32]	; (80001a4 <frame_dummy+0x2c>)
 8000182:	f3af 8000 	nop.w
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <frame_dummy+0x30>)
 8000188:	6803      	ldr	r3, [r0, #0]
 800018a:	b913      	cbnz	r3, 8000192 <frame_dummy+0x1a>
 800018c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000190:	e7cc      	b.n	800012c <register_tm_clones>
 8000192:	4b06      	ldr	r3, [pc, #24]	; (80001ac <frame_dummy+0x34>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d0f9      	beq.n	800018c <frame_dummy+0x14>
 8000198:	4798      	blx	r3
 800019a:	e7f7      	b.n	800018c <frame_dummy+0x14>
 800019c:	00000000 	.word	0x00000000
 80001a0:	20000098 	.word	0x20000098
 80001a4:	08007cd8 	.word	0x08007cd8
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000

080001b0 <_mainCRTStartup>:
 80001b0:	4b15      	ldr	r3, [pc, #84]	; (8000208 <_mainCRTStartup+0x58>)
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	bf08      	it	eq
 80001b6:	4b13      	ldreq	r3, [pc, #76]	; (8000204 <_mainCRTStartup+0x54>)
 80001b8:	469d      	mov	sp, r3
 80001ba:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001be:	2100      	movs	r1, #0
 80001c0:	468b      	mov	fp, r1
 80001c2:	460f      	mov	r7, r1
 80001c4:	4813      	ldr	r0, [pc, #76]	; (8000214 <_mainCRTStartup+0x64>)
 80001c6:	4a14      	ldr	r2, [pc, #80]	; (8000218 <_mainCRTStartup+0x68>)
 80001c8:	1a12      	subs	r2, r2, r0
 80001ca:	f006 ff8e 	bl	80070ea <memset>
 80001ce:	4b0f      	ldr	r3, [pc, #60]	; (800020c <_mainCRTStartup+0x5c>)
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d000      	beq.n	80001d6 <_mainCRTStartup+0x26>
 80001d4:	4798      	blx	r3
 80001d6:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <_mainCRTStartup+0x60>)
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d000      	beq.n	80001de <_mainCRTStartup+0x2e>
 80001dc:	4798      	blx	r3
 80001de:	2000      	movs	r0, #0
 80001e0:	2100      	movs	r1, #0
 80001e2:	0004      	movs	r4, r0
 80001e4:	000d      	movs	r5, r1
 80001e6:	480d      	ldr	r0, [pc, #52]	; (800021c <_mainCRTStartup+0x6c>)
 80001e8:	2800      	cmp	r0, #0
 80001ea:	d002      	beq.n	80001f2 <_mainCRTStartup+0x42>
 80001ec:	480c      	ldr	r0, [pc, #48]	; (8000220 <_mainCRTStartup+0x70>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	f006 ff39 	bl	8007068 <__libc_init_array>
 80001f6:	0020      	movs	r0, r4
 80001f8:	0029      	movs	r1, r5
 80001fa:	f006 fcad 	bl	8006b58 <main>
 80001fe:	f006 ff1f 	bl	8007040 <exit>
 8000202:	bf00      	nop
 8000204:	00080000 	.word	0x00080000
	...
 8000214:	20000094 	.word	0x20000094
 8000218:	20000aa8 	.word	0x20000aa8
	...
 8000224:	0800851c 	.word	0x0800851c
 8000228:	20000000 	.word	0x20000000
 800022c:	20000090 	.word	0x20000090
 8000230:	20000094 	.word	0x20000094
 8000234:	20000aa8 	.word	0x20000aa8

08000238 <SystemInit>:
 8000238:	4b38      	ldr	r3, [pc, #224]	; (800031c <SystemInit+0xe4>)
 800023a:	b082      	sub	sp, #8
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	f042 0201 	orr.w	r2, r2, #1
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	6859      	ldr	r1, [r3, #4]
 8000246:	4a36      	ldr	r2, [pc, #216]	; (8000320 <SystemInit+0xe8>)
 8000248:	400a      	ands	r2, r1
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000252:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	685a      	ldr	r2, [r3, #4]
 8000262:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	2200      	movs	r2, #0
 8000270:	9200      	str	r2, [sp, #0]
 8000272:	9201      	str	r2, [sp, #4]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000282:	9201      	str	r2, [sp, #4]
 8000284:	9a00      	ldr	r2, [sp, #0]
 8000286:	3201      	adds	r2, #1
 8000288:	9200      	str	r2, [sp, #0]
 800028a:	9a01      	ldr	r2, [sp, #4]
 800028c:	b91a      	cbnz	r2, 8000296 <SystemInit+0x5e>
 800028e:	9a00      	ldr	r2, [sp, #0]
 8000290:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000294:	d1f2      	bne.n	800027c <SystemInit+0x44>
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800029c:	bf18      	it	ne
 800029e:	2201      	movne	r2, #1
 80002a0:	9201      	str	r2, [sp, #4]
 80002a2:	9a01      	ldr	r2, [sp, #4]
 80002a4:	2a01      	cmp	r2, #1
 80002a6:	d005      	beq.n	80002b4 <SystemInit+0x7c>
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <SystemInit+0xec>)
 80002aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	b002      	add	sp, #8
 80002b2:	4770      	bx	lr
 80002b4:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <SystemInit+0xf0>)
 80002b6:	6811      	ldr	r1, [r2, #0]
 80002b8:	f041 0110 	orr.w	r1, r1, #16
 80002bc:	6011      	str	r1, [r2, #0]
 80002be:	6811      	ldr	r1, [r2, #0]
 80002c0:	f021 0103 	bic.w	r1, r1, #3
 80002c4:	6011      	str	r1, [r2, #0]
 80002c6:	6811      	ldr	r1, [r2, #0]
 80002c8:	f041 0102 	orr.w	r1, r1, #2
 80002cc:	6011      	str	r1, [r2, #0]
 80002ce:	685a      	ldr	r2, [r3, #4]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	685a      	ldr	r2, [r3, #4]
 80002e8:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	6819      	ldr	r1, [r3, #0]
 80002f8:	4a08      	ldr	r2, [pc, #32]	; (800031c <SystemInit+0xe4>)
 80002fa:	0189      	lsls	r1, r1, #6
 80002fc:	d5fb      	bpl.n	80002f6 <SystemInit+0xbe>
 80002fe:	6851      	ldr	r1, [r2, #4]
 8000300:	f021 0103 	bic.w	r1, r1, #3
 8000304:	6051      	str	r1, [r2, #4]
 8000306:	6851      	ldr	r1, [r2, #4]
 8000308:	f041 0102 	orr.w	r1, r1, #2
 800030c:	6051      	str	r1, [r2, #4]
 800030e:	685a      	ldr	r2, [r3, #4]
 8000310:	f002 020c 	and.w	r2, r2, #12
 8000314:	2a08      	cmp	r2, #8
 8000316:	d1fa      	bne.n	800030e <SystemInit+0xd6>
 8000318:	e7c6      	b.n	80002a8 <SystemInit+0x70>
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000
 8000320:	f8ff0000 	.word	0xf8ff0000
 8000324:	e000ed00 	.word	0xe000ed00
 8000328:	40022000 	.word	0x40022000

0800032c <SystemCoreClockUpdate>:
 800032c:	4a13      	ldr	r2, [pc, #76]	; (800037c <SystemCoreClockUpdate+0x50>)
 800032e:	4b14      	ldr	r3, [pc, #80]	; (8000380 <SystemCoreClockUpdate+0x54>)
 8000330:	6851      	ldr	r1, [r2, #4]
 8000332:	f001 010c 	and.w	r1, r1, #12
 8000336:	2904      	cmp	r1, #4
 8000338:	d003      	beq.n	8000342 <SystemCoreClockUpdate+0x16>
 800033a:	2908      	cmp	r1, #8
 800033c:	d003      	beq.n	8000346 <SystemCoreClockUpdate+0x1a>
 800033e:	4911      	ldr	r1, [pc, #68]	; (8000384 <SystemCoreClockUpdate+0x58>)
 8000340:	e011      	b.n	8000366 <SystemCoreClockUpdate+0x3a>
 8000342:	4911      	ldr	r1, [pc, #68]	; (8000388 <SystemCoreClockUpdate+0x5c>)
 8000344:	e00f      	b.n	8000366 <SystemCoreClockUpdate+0x3a>
 8000346:	6851      	ldr	r1, [r2, #4]
 8000348:	6850      	ldr	r0, [r2, #4]
 800034a:	f3c1 4183 	ubfx	r1, r1, #18, #4
 800034e:	03c0      	lsls	r0, r0, #15
 8000350:	f101 0102 	add.w	r1, r1, #2
 8000354:	d401      	bmi.n	800035a <SystemCoreClockUpdate+0x2e>
 8000356:	480d      	ldr	r0, [pc, #52]	; (800038c <SystemCoreClockUpdate+0x60>)
 8000358:	e004      	b.n	8000364 <SystemCoreClockUpdate+0x38>
 800035a:	6850      	ldr	r0, [r2, #4]
 800035c:	0380      	lsls	r0, r0, #14
 800035e:	bf4c      	ite	mi
 8000360:	4808      	ldrmi	r0, [pc, #32]	; (8000384 <SystemCoreClockUpdate+0x58>)
 8000362:	4809      	ldrpl	r0, [pc, #36]	; (8000388 <SystemCoreClockUpdate+0x5c>)
 8000364:	4341      	muls	r1, r0
 8000366:	6019      	str	r1, [r3, #0]
 8000368:	6852      	ldr	r2, [r2, #4]
 800036a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800036e:	441a      	add	r2, r3
 8000370:	7911      	ldrb	r1, [r2, #4]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	40ca      	lsrs	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	20000004 	.word	0x20000004
 8000384:	007a1200 	.word	0x007a1200
 8000388:	00f42400 	.word	0x00f42400
 800038c:	003d0900 	.word	0x003d0900

08000390 <motor_set_speed>:
	motor_set_speed(1, 7000, DIR_REVERSE);
	motor_set_speed(2, 7000, DIR_REVERSE);
	motor_set_speed(3, 7000, DIR_REVERSE);
}

uint8_t motor_set_speed(int motor_id, uint16_t speed, int dir){
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	460c      	mov	r4, r1
 8000394:	4615      	mov	r5, r2
	/*if(speed < 0)
		speed = 0;
	if(speed > PERIOD)
		speed = PERIOD;*/

	if(motor_id == 0){
 8000396:	4606      	mov	r6, r0
 8000398:	2800      	cmp	r0, #0
 800039a:	d13e      	bne.n	800041a <motor_set_speed+0x8a>
		if(speed > 0){
			GPIO_WriteBit(GPIOC, GPIO_Pin_14, 1);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003a2:	4877      	ldr	r0, [pc, #476]	; (8000580 <motor_set_speed+0x1f0>)
		speed = 0;
	if(speed > PERIOD)
		speed = PERIOD;*/

	if(motor_id == 0){
		if(speed > 0){
 80003a4:	b30c      	cbz	r4, 80003ea <motor_set_speed+0x5a>
			GPIO_WriteBit(GPIOC, GPIO_Pin_14, 1);
 80003a6:	f002 fad2 	bl	800294e <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA, GPIO_Pin_0, 1);
 80003aa:	2201      	movs	r2, #1
 80003ac:	4611      	mov	r1, r2
 80003ae:	4875      	ldr	r0, [pc, #468]	; (8000584 <motor_set_speed+0x1f4>)
 80003b0:	f002 facd 	bl	800294e <GPIO_WriteBit>

			if(dir == DIR_FORWARD){
 80003b4:	b955      	cbnz	r5, 80003cc <motor_set_speed+0x3c>
				GPIO_SetBits(GPIOC, GPIO_Pin_13);
 80003b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ba:	4871      	ldr	r0, [pc, #452]	; (8000580 <motor_set_speed+0x1f0>)
 80003bc:	f002 fac3 	bl	8002946 <GPIO_SetBits>
				GPIO_ResetBits(GPIOC, GPIO_Pin_15);
 80003c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c4:	486e      	ldr	r0, [pc, #440]	; (8000580 <motor_set_speed+0x1f0>)
 80003c6:	f002 fac0 	bl	800294a <GPIO_ResetBits>
 80003ca:	e021      	b.n	8000410 <motor_set_speed+0x80>
			}else if(dir == DIR_REVERSE){
 80003cc:	2d01      	cmp	r5, #1
 80003ce:	d001      	beq.n	80003d4 <motor_set_speed+0x44>
				GPIO_ResetBits(GPIOC, GPIO_Pin_13);
				GPIO_SetBits(GPIOC, GPIO_Pin_15);
			}else{
				return ERROR_DIR_INAVAILABLE;
 80003d0:	2002      	movs	r0, #2
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

			if(dir == DIR_FORWARD){
				GPIO_SetBits(GPIOC, GPIO_Pin_13);
				GPIO_ResetBits(GPIOC, GPIO_Pin_15);
			}else if(dir == DIR_REVERSE){
				GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 80003d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d8:	4869      	ldr	r0, [pc, #420]	; (8000580 <motor_set_speed+0x1f0>)
 80003da:	f002 fab6 	bl	800294a <GPIO_ResetBits>
				GPIO_SetBits(GPIOC, GPIO_Pin_15);
 80003de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e2:	4867      	ldr	r0, [pc, #412]	; (8000580 <motor_set_speed+0x1f0>)
 80003e4:	f002 faaf 	bl	8002946 <GPIO_SetBits>
 80003e8:	e012      	b.n	8000410 <motor_set_speed+0x80>
			}else{
				return ERROR_DIR_INAVAILABLE;
			}
		}else{
			GPIO_WriteBit(GPIOC, GPIO_Pin_14, 1);
 80003ea:	f002 fab0 	bl	800294e <GPIO_WriteBit>
			GPIO_WriteBit(GPIOA, GPIO_Pin_0, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	4611      	mov	r1, r2
 80003f2:	4864      	ldr	r0, [pc, #400]	; (8000584 <motor_set_speed+0x1f4>)
 80003f4:	f002 faab 	bl	800294e <GPIO_WriteBit>

			// Break to GND
			GPIO_WriteBit(GPIOC, GPIO_Pin_13, 0);
 80003f8:	4622      	mov	r2, r4
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	4860      	ldr	r0, [pc, #384]	; (8000580 <motor_set_speed+0x1f0>)
 8000400:	f002 faa5 	bl	800294e <GPIO_WriteBit>
			GPIO_WriteBit(GPIOC, GPIO_Pin_15, 0);
 8000404:	4622      	mov	r2, r4
 8000406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800040a:	485d      	ldr	r0, [pc, #372]	; (8000580 <motor_set_speed+0x1f0>)
 800040c:	f002 fa9f 	bl	800294e <GPIO_WriteBit>
		}


		TIM1->CCR1 = (uint32_t)speed*2;
 8000410:	0064      	lsls	r4, r4, #1
 8000412:	4b5d      	ldr	r3, [pc, #372]	; (8000588 <motor_set_speed+0x1f8>)
 8000414:	b2a4      	uxth	r4, r4
 8000416:	869c      	strh	r4, [r3, #52]	; 0x34
 8000418:	e0ad      	b.n	8000576 <motor_set_speed+0x1e6>
	}else if(motor_id == 1){
 800041a:	2801      	cmp	r0, #1
 800041c:	d134      	bne.n	8000488 <motor_set_speed+0xf8>
		if(speed != 0){
			GPIO_WriteBit(GPIOA, GPIO_Pin_5, 1);
 800041e:	4602      	mov	r2, r0
 8000420:	2120      	movs	r1, #32
 8000422:	4858      	ldr	r0, [pc, #352]	; (8000584 <motor_set_speed+0x1f4>)
		}


		TIM1->CCR1 = (uint32_t)speed*2;
	}else if(motor_id == 1){
		if(speed != 0){
 8000424:	b1e4      	cbz	r4, 8000460 <motor_set_speed+0xd0>
			GPIO_WriteBit(GPIOA, GPIO_Pin_5, 1);
 8000426:	f002 fa92 	bl	800294e <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB, GPIO_Pin_10, 1);
 800042a:	4632      	mov	r2, r6
 800042c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000430:	4856      	ldr	r0, [pc, #344]	; (800058c <motor_set_speed+0x1fc>)
 8000432:	f002 fa8c 	bl	800294e <GPIO_WriteBit>

			if(dir == DIR_FORWARD){
 8000436:	b945      	cbnz	r5, 800044a <motor_set_speed+0xba>
				GPIO_SetBits(GPIOA, GPIO_Pin_4);
 8000438:	2110      	movs	r1, #16
 800043a:	4852      	ldr	r0, [pc, #328]	; (8000584 <motor_set_speed+0x1f4>)
 800043c:	f002 fa83 	bl	8002946 <GPIO_SetBits>
				GPIO_ResetBits(GPIOB, GPIO_Pin_2);
 8000440:	2104      	movs	r1, #4
 8000442:	4852      	ldr	r0, [pc, #328]	; (800058c <motor_set_speed+0x1fc>)
 8000444:	f002 fa81 	bl	800294a <GPIO_ResetBits>
 8000448:	e01c      	b.n	8000484 <motor_set_speed+0xf4>
			}else if(dir == DIR_REVERSE){
 800044a:	2d01      	cmp	r5, #1
 800044c:	d1c0      	bne.n	80003d0 <motor_set_speed+0x40>
				GPIO_ResetBits(GPIOA, GPIO_Pin_4);
 800044e:	2110      	movs	r1, #16
 8000450:	484c      	ldr	r0, [pc, #304]	; (8000584 <motor_set_speed+0x1f4>)
 8000452:	f002 fa7a 	bl	800294a <GPIO_ResetBits>
				GPIO_SetBits(GPIOB, GPIO_Pin_2);
 8000456:	2104      	movs	r1, #4
 8000458:	484c      	ldr	r0, [pc, #304]	; (800058c <motor_set_speed+0x1fc>)
 800045a:	f002 fa74 	bl	8002946 <GPIO_SetBits>
 800045e:	e011      	b.n	8000484 <motor_set_speed+0xf4>
			}else{
				return ERROR_DIR_INAVAILABLE;
			}	
		}else{
			GPIO_WriteBit(GPIOA, GPIO_Pin_5, 1);
 8000460:	f002 fa75 	bl	800294e <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB, GPIO_Pin_10, 1);
 8000464:	4632      	mov	r2, r6
 8000466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800046a:	4848      	ldr	r0, [pc, #288]	; (800058c <motor_set_speed+0x1fc>)
 800046c:	f002 fa6f 	bl	800294e <GPIO_WriteBit>

			// Break to GND
			GPIO_WriteBit(GPIOA, GPIO_Pin_4, 0);
 8000470:	4622      	mov	r2, r4
 8000472:	2110      	movs	r1, #16
 8000474:	4843      	ldr	r0, [pc, #268]	; (8000584 <motor_set_speed+0x1f4>)
 8000476:	f002 fa6a 	bl	800294e <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB, GPIO_Pin_2, 0);
 800047a:	4622      	mov	r2, r4
 800047c:	2104      	movs	r1, #4
 800047e:	4843      	ldr	r0, [pc, #268]	; (800058c <motor_set_speed+0x1fc>)
 8000480:	f002 fa65 	bl	800294e <GPIO_WriteBit>
		}

		TIM3->CCR4 = (uint32_t)speed;
 8000484:	4b42      	ldr	r3, [pc, #264]	; (8000590 <motor_set_speed+0x200>)
 8000486:	e074      	b.n	8000572 <motor_set_speed+0x1e2>
	}else if(motor_id == 2){
 8000488:	2802      	cmp	r0, #2
 800048a:	d13e      	bne.n	800050a <motor_set_speed+0x17a>
		if(speed != 0){
 800048c:	b311      	cbz	r1, 80004d4 <motor_set_speed+0x144>
			GPIO_SetBits(GPIOB, GPIO_Pin_12);
 800048e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000492:	483e      	ldr	r0, [pc, #248]	; (800058c <motor_set_speed+0x1fc>)
 8000494:	f002 fa57 	bl	8002946 <GPIO_SetBits>
			GPIO_SetBits(GPIOB, GPIO_Pin_14);
 8000498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800049c:	483b      	ldr	r0, [pc, #236]	; (800058c <motor_set_speed+0x1fc>)
 800049e:	f002 fa52 	bl	8002946 <GPIO_SetBits>

			if(dir == DIR_FORWARD){
 80004a2:	b955      	cbnz	r5, 80004ba <motor_set_speed+0x12a>
				GPIO_SetBits(GPIOB, GPIO_Pin_11);
 80004a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a8:	4838      	ldr	r0, [pc, #224]	; (800058c <motor_set_speed+0x1fc>)
 80004aa:	f002 fa4c 	bl	8002946 <GPIO_SetBits>
				GPIO_ResetBits(GPIOB, GPIO_Pin_13);
 80004ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b2:	4836      	ldr	r0, [pc, #216]	; (800058c <motor_set_speed+0x1fc>)
 80004b4:	f002 fa49 	bl	800294a <GPIO_ResetBits>
 80004b8:	e024      	b.n	8000504 <motor_set_speed+0x174>
			}else if(dir == DIR_REVERSE){
 80004ba:	2d01      	cmp	r5, #1
 80004bc:	d188      	bne.n	80003d0 <motor_set_speed+0x40>
				GPIO_ResetBits(GPIOB, GPIO_Pin_11);
 80004be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004c2:	4832      	ldr	r0, [pc, #200]	; (800058c <motor_set_speed+0x1fc>)
 80004c4:	f002 fa41 	bl	800294a <GPIO_ResetBits>
				GPIO_SetBits(GPIOB, GPIO_Pin_13);
 80004c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004cc:	482f      	ldr	r0, [pc, #188]	; (800058c <motor_set_speed+0x1fc>)
 80004ce:	f002 fa3a 	bl	8002946 <GPIO_SetBits>
 80004d2:	e017      	b.n	8000504 <motor_set_speed+0x174>
			}else{
				return ERROR_DIR_INAVAILABLE;
			}	
		}else{
			GPIO_WriteBit(GPIOB, GPIO_Pin_12, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004da:	482c      	ldr	r0, [pc, #176]	; (800058c <motor_set_speed+0x1fc>)
 80004dc:	f002 fa37 	bl	800294e <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB, GPIO_Pin_14, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e6:	4829      	ldr	r0, [pc, #164]	; (800058c <motor_set_speed+0x1fc>)
 80004e8:	f002 fa31 	bl	800294e <GPIO_WriteBit>

			// Break to GND
			GPIO_WriteBit(GPIOB, GPIO_Pin_11, 0);
 80004ec:	4622      	mov	r2, r4
 80004ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f2:	4826      	ldr	r0, [pc, #152]	; (800058c <motor_set_speed+0x1fc>)
 80004f4:	f002 fa2b 	bl	800294e <GPIO_WriteBit>
			GPIO_WriteBit(GPIOB, GPIO_Pin_13, 0);
 80004f8:	4622      	mov	r2, r4
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	4823      	ldr	r0, [pc, #140]	; (800058c <motor_set_speed+0x1fc>)
 8000500:	f002 fa25 	bl	800294e <GPIO_WriteBit>
		}

		TIM2->CCR4 = (uint32_t)speed;
 8000504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000508:	e033      	b.n	8000572 <motor_set_speed+0x1e2>
	}else if(motor_id == 3){
 800050a:	2803      	cmp	r0, #3
 800050c:	d135      	bne.n	800057a <motor_set_speed+0x1ea>
		if(speed != 0){
			GPIO_SetBits(GPIOA, GPIO_Pin_12);
 800050e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000512:	481c      	ldr	r0, [pc, #112]	; (8000584 <motor_set_speed+0x1f4>)
			GPIO_WriteBit(GPIOB, GPIO_Pin_13, 0);
		}

		TIM2->CCR4 = (uint32_t)speed;
	}else if(motor_id == 3){
		if(speed != 0){
 8000514:	b1d4      	cbz	r4, 800054c <motor_set_speed+0x1bc>
			GPIO_SetBits(GPIOA, GPIO_Pin_12);
 8000516:	f002 fa16 	bl	8002946 <GPIO_SetBits>
			GPIO_SetBits(GPIOB, GPIO_Pin_3);
 800051a:	2108      	movs	r1, #8
 800051c:	481b      	ldr	r0, [pc, #108]	; (800058c <motor_set_speed+0x1fc>)
 800051e:	f002 fa12 	bl	8002946 <GPIO_SetBits>

			if(dir == DIR_FORWARD){
 8000522:	b92d      	cbnz	r5, 8000530 <motor_set_speed+0x1a0>
				GPIO_SetBits(GPIOB, GPIO_Pin_15);
 8000524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000528:	4818      	ldr	r0, [pc, #96]	; (800058c <motor_set_speed+0x1fc>)
 800052a:	f002 fa0c 	bl	8002946 <GPIO_SetBits>
 800052e:	e018      	b.n	8000562 <motor_set_speed+0x1d2>
				GPIO_ResetBits(GPIOA, GPIO_Pin_15);
			}else if(dir == DIR_REVERSE){
 8000530:	2d01      	cmp	r5, #1
 8000532:	f47f af4d 	bne.w	80003d0 <motor_set_speed+0x40>
				GPIO_ResetBits(GPIOB, GPIO_Pin_15);
 8000536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053a:	4814      	ldr	r0, [pc, #80]	; (800058c <motor_set_speed+0x1fc>)
 800053c:	f002 fa05 	bl	800294a <GPIO_ResetBits>
				GPIO_SetBits(GPIOA, GPIO_Pin_15);
 8000540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <motor_set_speed+0x1f4>)
 8000546:	f002 f9fe 	bl	8002946 <GPIO_SetBits>
 800054a:	e00f      	b.n	800056c <motor_set_speed+0x1dc>
			}else{
				return ERROR_DIR_INAVAILABLE;
			}
		}else{
			GPIO_SetBits(GPIOA, GPIO_Pin_12);
 800054c:	f002 f9fb 	bl	8002946 <GPIO_SetBits>
			GPIO_SetBits(GPIOB, GPIO_Pin_3);
 8000550:	2108      	movs	r1, #8
 8000552:	480e      	ldr	r0, [pc, #56]	; (800058c <motor_set_speed+0x1fc>)
 8000554:	f002 f9f7 	bl	8002946 <GPIO_SetBits>

			// Break to GND
			GPIO_ResetBits(GPIOB, GPIO_Pin_15);
 8000558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <motor_set_speed+0x1fc>)
 800055e:	f002 f9f4 	bl	800294a <GPIO_ResetBits>
			GPIO_ResetBits(GPIOA, GPIO_Pin_15);
 8000562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <motor_set_speed+0x1f4>)
 8000568:	f002 f9ef 	bl	800294a <GPIO_ResetBits>
		}	

		TIM1->CCR4 = (uint32_t)speed*2;
 800056c:	0064      	lsls	r4, r4, #1
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <motor_set_speed+0x1f8>)
 8000570:	b2a4      	uxth	r4, r4
 8000572:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
	}else{
		return ERROR_MOTOR_NOT_EXISTING;
	}

	return SUCCESS;
 8000576:	2000      	movs	r0, #0
 8000578:	bd70      	pop	{r4, r5, r6, pc}
			GPIO_ResetBits(GPIOA, GPIO_Pin_15);
		}	

		TIM1->CCR4 = (uint32_t)speed*2;
	}else{
		return ERROR_MOTOR_NOT_EXISTING;
 800057a:	2001      	movs	r0, #1
	}

	return SUCCESS;
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	bf00      	nop
 8000580:	40011000 	.word	0x40011000
 8000584:	40010800 	.word	0x40010800
 8000588:	40012c00 	.word	0x40012c00
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40000400 	.word	0x40000400

08000594 <MOTOR_Init>:

#define PERIOD 14399
#define PRESCALER 0
#define CLOCKDIV 0

void MOTOR_Init(void){
 8000594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000598:	4cd9      	ldr	r4, [pc, #868]	; (8000900 <MOTOR_Init+0x36c>)

#define PERIOD 14399
#define PRESCALER 0
#define CLOCKDIV 0

void MOTOR_Init(void){
 800059a:	b085      	sub	sp, #20

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800059c:	2603      	movs	r6, #3
void MOTOR_Init(void){

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800059e:	f04f 0a10 	mov.w	sl, #16

void MOTOR_Init(void){

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80005a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80005a6:	a903      	add	r1, sp, #12
 80005a8:	4620      	mov	r0, r4

void MOTOR_Init(void){

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 80005aa:	f8ad 200c 	strh.w	r2, [sp, #12]
 80005ae:	9201      	str	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80005b0:	f88d a00f 	strb.w	sl, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005b4:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80005b8:	f002 f959 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 80005bc:	f248 0300 	movw	r3, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80005c0:	a903      	add	r1, sp, #12
 80005c2:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 80005c4:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80005c8:	f88d a00f 	strb.w	sl, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005cc:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80005d0:	f002 f94d 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 80005d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d8:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80005dc:	f04f 0314 	mov.w	r3, #20
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80005e0:	a903      	add	r1, sp, #12
 80005e2:	4620      	mov	r0, r4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80005e4:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80005e8:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80005ec:	f002 f93f 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80005f0:	f04f 0314 	mov.w	r3, #20
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 80005f4:	2501      	movs	r5, #1
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80005f6:	a903      	add	r1, sp, #12
 80005f8:	48c2      	ldr	r0, [pc, #776]	; (8000904 <MOTOR_Init+0x370>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80005fa:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 80005fe:	f8ad 500c 	strh.w	r5, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000602:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000606:	f002 f932 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 800060a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060e:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000612:	f04f 0318 	mov.w	r3, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000616:	a903      	add	r1, sp, #12
 8000618:	48ba      	ldr	r0, [pc, #744]	; (8000904 <MOTOR_Init+0x370>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800061a:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800061e:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000622:	f002 f924 	bl	800286e <GPIO_Init>


	TIM_TimeBaseStructure.TIM_Period = PERIOD; // ie 0..29999
 8000626:	f643 023f 	movw	r2, #14399	; 0x383f
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800062a:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 8000914 <MOTOR_Init+0x380>
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_TimeBaseStructure.TIM_Period = PERIOD; // ie 0..29999
 800062e:	4bb6      	ldr	r3, [pc, #728]	; (8000908 <MOTOR_Init+0x374>)
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 8000630:	4cb6      	ldr	r4, [pc, #728]	; (800090c <MOTOR_Init+0x378>)
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_TimeBaseStructure.TIM_Period = PERIOD; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 8000632:	2700      	movs	r7, #0
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8000634:	4619      	mov	r1, r3
 8000636:	4640      	mov	r0, r8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_TimeBaseStructure.TIM_Period = PERIOD; // ie 0..29999
 8000638:	809a      	strh	r2, [r3, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 800063a:	801f      	strh	r7, [r3, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 800063c:	80df      	strh	r7, [r3, #6]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800063e:	805f      	strh	r7, [r3, #2]

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	f003 fa7b 	bl	8003b3c <TIM_TimeBaseInit>

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 8000646:	4620      	mov	r0, r4
 8000648:	f003 fbda 	bl	8003e00 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800064c:	f04f 0360 	mov.w	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8000650:	4621      	mov	r1, r4
 8000652:	4640      	mov	r0, r8
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000654:	8023      	strh	r3, [r4, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000656:	8065      	strh	r5, [r4, #2]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 8000658:	80e7      	strh	r7, [r4, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800065a:	8127      	strh	r7, [r4, #8]

	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 800065c:	f003 fab8 	bl	8003bd0 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8000660:	4640      	mov	r0, r8
 8000662:	2108      	movs	r1, #8
 8000664:	f003 fce4 	bl	8004030 <TIM_OC1PreloadConfig>

	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8000668:	4629      	mov	r1, r5
 800066a:	4640      	mov	r0, r8
 800066c:	f003 fcb0 	bl	8003fd0 <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8000670:	4629      	mov	r1, r5
 8000672:	4640      	mov	r0, r8
 8000674:	f003 fbeb 	bl	8003e4e <TIM_CtrlPWMOutputs>

	TIM_Cmd(TIM1, ENABLE);
 8000678:	4629      	mov	r1, r5
 800067a:	4640      	mov	r0, r8
 800067c:	f003 fbdb 	bl	8003e36 <TIM_Cmd>

	// IN2_B
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000680:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8000918 <MOTOR_Init+0x384>

	// IN2_A
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000684:	a903      	add	r1, sp, #12
 8000686:	489f      	ldr	r0, [pc, #636]	; (8000904 <MOTOR_Init+0x370>)




	// IN2_A
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 8000688:	f8ad a00c 	strh.w	sl, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800068c:	f88d a00f 	strb.w	sl, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000690:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000694:	f002 f8eb 	bl	800286e <GPIO_Init>

	// IN2_B
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000698:	2104      	movs	r1, #4
 800069a:	f8ad 100c 	strh.w	r1, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800069e:	4648      	mov	r0, r9
 80006a0:	a903      	add	r1, sp, #12
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	// IN2_B
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80006a2:	f88d a00f 	strb.w	sl, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006a6:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006aa:	f002 f8e0 	bl	800286e <GPIO_Init>

	// EN2_A
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80006ae:	f04f 0314 	mov.w	r3, #20
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	// EN2_A
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 80006b2:	2120      	movs	r1, #32
 80006b4:	f8ad 100c 	strh.w	r1, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006b8:	4892      	ldr	r0, [pc, #584]	; (8000904 <MOTOR_Init+0x370>)
 80006ba:	a903      	add	r1, sp, #12
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	// EN2_A
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80006bc:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006c0:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006c4:	f002 f8d3 	bl	800286e <GPIO_Init>

	// EN2_B
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80006c8:	f04f 0314 	mov.w	r3, #20
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	// EN2_B
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	f8ad 100c 	strh.w	r1, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006d4:	4648      	mov	r0, r9
 80006d6:	a903      	add	r1, sp, #12
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	// EN2_B
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80006d8:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006dc:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006e0:	f002 f8c5 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 80006e4:	f04f 0302 	mov.w	r3, #2
 80006e8:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80006ec:	f04f 0318 	mov.w	r3, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006f0:	a903      	add	r1, sp, #12
 80006f2:	4648      	mov	r0, r9
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80006f4:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006f8:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006fc:	f002 f8b7 	bl	800286e <GPIO_Init>


	TIM_TimeBaseStructure.TIM_Period = PERIOD; // ie 0..29999
 8000700:	f643 023f 	movw	r2, #14399	; 0x383f
 8000704:	9b00      	ldr	r3, [sp, #0]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000706:	f8df b214 	ldr.w	fp, [pc, #532]	; 800091c <MOTOR_Init+0x388>
 800070a:	4619      	mov	r1, r3
 800070c:	4658      	mov	r0, fp
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);


	TIM_TimeBaseStructure.TIM_Period = PERIOD; // ie 0..29999
 800070e:	809a      	strh	r2, [r3, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 8000710:	801f      	strh	r7, [r3, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 8000712:	80df      	strh	r7, [r3, #6]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000714:	805f      	strh	r7, [r3, #2]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000716:	f003 fa11 	bl	8003b3c <TIM_TimeBaseInit>

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 800071a:	4620      	mov	r0, r4
 800071c:	f003 fb70 	bl	8003e00 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000720:	f04f 0360 	mov.w	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8000724:	4621      	mov	r1, r4
 8000726:	4658      	mov	r0, fp
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000728:	8023      	strh	r3, [r4, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800072a:	8065      	strh	r5, [r4, #2]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 800072c:	80e7      	strh	r7, [r4, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800072e:	8127      	strh	r7, [r4, #8]

	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 8000730:	f003 fb18 	bl	8003d64 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8000734:	4658      	mov	r0, fp
 8000736:	2108      	movs	r1, #8
 8000738:	f003 fc94 	bl	8004064 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM3, ENABLE);
 800073c:	4629      	mov	r1, r5
 800073e:	4658      	mov	r0, fp
 8000740:	f003 fc46 	bl	8003fd0 <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(TIM3, ENABLE);
 8000744:	4629      	mov	r1, r5
 8000746:	4658      	mov	r0, fp
 8000748:	f003 fb81 	bl	8003e4e <TIM_CtrlPWMOutputs>

	TIM_Cmd(TIM3, ENABLE);
 800074c:	4629      	mov	r1, r5
 800074e:	4658      	mov	r0, fp
 8000750:	f003 fb71 	bl	8003e36 <TIM_Cmd>




	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8000754:	f44f 6300 	mov.w	r3, #2048	; 0x800
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000758:	a903      	add	r1, sp, #12
 800075a:	4648      	mov	r0, r9
	TIM_Cmd(TIM3, ENABLE);




	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800075c:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000760:	f88d a00f 	strb.w	sl, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000764:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000768:	f002 f881 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 800076c:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800076e:	a903      	add	r1, sp, #12
 8000770:	4648      	mov	r0, r9
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8000772:	f8ad 200c 	strh.w	r2, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000776:	f88d a00f 	strb.w	sl, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800077a:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800077e:	f002 f876 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8000782:	f04f 0314 	mov.w	r3, #20
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8000786:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800078a:	a903      	add	r1, sp, #12
 800078c:	4648      	mov	r0, r9
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 800078e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8000792:	9201      	str	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8000794:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000798:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800079c:	f002 f867 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 80007a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007a4:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80007a8:	f04f 0314 	mov.w	r3, #20
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007ac:	a903      	add	r1, sp, #12
 80007ae:	4648      	mov	r0, r9
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 80007b0:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80007b4:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007b8:	f002 f859 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80007bc:	f04f 0318 	mov.w	r3, #24
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 80007c0:	f04f 0b08 	mov.w	fp, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80007c4:	a903      	add	r1, sp, #12
 80007c6:	484f      	ldr	r0, [pc, #316]	; (8000904 <MOTOR_Init+0x370>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80007c8:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 80007cc:	f8ad b00c 	strh.w	fp, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80007d0:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80007d4:	f002 f84b 	bl	800286e <GPIO_Init>


	TIM_TimeBaseStructure.TIM_Period = PERIOD; // ie 0..29999
 80007d8:	f643 023f 	movw	r2, #14399	; 0x383f
 80007dc:	9b00      	ldr	r3, [sp, #0]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80007de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007e2:	4619      	mov	r1, r3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_TimeBaseStructure.TIM_Period = PERIOD; // ie 0..29999
 80007e4:	809a      	strh	r2, [r3, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 80007e6:	801f      	strh	r7, [r3, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 80007e8:	80df      	strh	r7, [r3, #6]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80007ea:	805f      	strh	r7, [r3, #2]

	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80007ec:	f003 f9a6 	bl	8003b3c <TIM_TimeBaseInit>

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80007f0:	4620      	mov	r0, r4
 80007f2:	f003 fb05 	bl	8003e00 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80007f6:	f04f 0360 	mov.w	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 80007fa:	4621      	mov	r1, r4
 80007fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000800:	8023      	strh	r3, [r4, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000802:	8065      	strh	r5, [r4, #2]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 8000804:	80e7      	strh	r7, [r4, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000806:	8127      	strh	r7, [r4, #8]

	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8000808:	f003 faac 	bl	8003d64 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 800080c:	4659      	mov	r1, fp
 800080e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000812:	f003 fc27 	bl	8004064 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 8000816:	4629      	mov	r1, r5
 8000818:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800081c:	f003 fbd8 	bl	8003fd0 <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8000820:	4629      	mov	r1, r5
 8000822:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000826:	f003 fb12 	bl	8003e4e <TIM_CtrlPWMOutputs>

	TIM_Cmd(TIM2, ENABLE);
 800082a:	4629      	mov	r1, r5
 800082c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000830:	f003 fb01 	bl	8003e36 <TIM_Cmd>


	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8000834:	4629      	mov	r1, r5
 8000836:	4836      	ldr	r0, [pc, #216]	; (8000910 <MOTOR_Init+0x37c>)
 8000838:	f002 f8ac 	bl	8002994 <GPIO_PinRemapConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 800083c:	f248 0300 	movw	r3, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000840:	a903      	add	r1, sp, #12
 8000842:	4648      	mov	r0, r9
	TIM_Cmd(TIM2, ENABLE);


	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8000844:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000848:	f88d a00f 	strb.w	sl, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800084c:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000850:	f002 f80d 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8000854:	f248 0300 	movw	r3, #32768	; 0x8000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000858:	a903      	add	r1, sp, #12
 800085a:	482a      	ldr	r0, [pc, #168]	; (8000904 <MOTOR_Init+0x370>)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 800085c:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000860:	f88d a00f 	strb.w	sl, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000864:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000868:	f002 f801 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800086c:	f04f 0314 	mov.w	r3, #20
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8000870:	9a01      	ldr	r2, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000872:	a903      	add	r1, sp, #12
 8000874:	4823      	ldr	r0, [pc, #140]	; (8000904 <MOTOR_Init+0x370>)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8000876:	f8ad 200c 	strh.w	r2, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800087a:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800087e:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000882:	f001 fff4 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8000886:	f04f 0314 	mov.w	r3, #20
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800088a:	a903      	add	r1, sp, #12
 800088c:	4648      	mov	r0, r9
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800088e:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000892:	f8ad b00c 	strh.w	fp, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000896:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800089a:	f001 ffe8 	bl	800286e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800089e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008a2:	f8ad 300c 	strh.w	r3, [sp, #12]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80008a6:	f04f 0318 	mov.w	r3, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008aa:	a903      	add	r1, sp, #12
 80008ac:	4815      	ldr	r0, [pc, #84]	; (8000904 <MOTOR_Init+0x370>)
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80008ae:	f88d 300f 	strb.w	r3, [sp, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008b2:	f88d 600e 	strb.w	r6, [sp, #14]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008b6:	f001 ffda 	bl	800286e <GPIO_Init>


	TIM_TimeBaseStructure.TIM_Period = PERIOD*2; // ie 0..29999
 80008ba:	f247 027e 	movw	r2, #28798	; 0x707e
 80008be:	9b00      	ldr	r3, [sp, #0]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80008c0:	4640      	mov	r0, r8
 80008c2:	4619      	mov	r1, r3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_TimeBaseStructure.TIM_Period = PERIOD*2; // ie 0..29999
 80008c4:	809a      	strh	r2, [r3, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 80008c6:	801f      	strh	r7, [r3, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 80008c8:	80df      	strh	r7, [r3, #6]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80008ca:	805f      	strh	r7, [r3, #2]

	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80008cc:	f003 f936 	bl	8003b3c <TIM_TimeBaseInit>

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80008d0:	4620      	mov	r0, r4
 80008d2:	f003 fa95 	bl	8003e00 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80008d6:	f04f 0360 	mov.w	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 80008da:	4621      	mov	r1, r4
 80008dc:	4640      	mov	r0, r8
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80008de:	8023      	strh	r3, [r4, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80008e0:	8065      	strh	r5, [r4, #2]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80008e2:	80e7      	strh	r7, [r4, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80008e4:	8127      	strh	r7, [r4, #8]

	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 80008e6:	f003 fa3d 	bl	8003d64 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 80008ea:	4659      	mov	r1, fp
 80008ec:	4640      	mov	r0, r8
 80008ee:	f003 fbb9 	bl	8004064 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM1, ENABLE);
 80008f2:	4629      	mov	r1, r5
 80008f4:	4640      	mov	r0, r8
 80008f6:	f003 fb6b 	bl	8003fd0 <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 80008fa:	4629      	mov	r1, r5
 80008fc:	4640      	mov	r0, r8
 80008fe:	e00f      	b.n	8000920 <MOTOR_Init+0x38c>
 8000900:	40011000 	.word	0x40011000
 8000904:	40010800 	.word	0x40010800
 8000908:	20000a88 	.word	0x20000a88
 800090c:	20000a92 	.word	0x20000a92
 8000910:	00300200 	.word	0x00300200
 8000914:	40012c00 	.word	0x40012c00
 8000918:	40010c00 	.word	0x40010c00
 800091c:	40000400 	.word	0x40000400
 8000920:	f003 fa95 	bl	8003e4e <TIM_CtrlPWMOutputs>

	TIM_Cmd(TIM1, ENABLE);
 8000924:	4629      	mov	r1, r5
 8000926:	4640      	mov	r0, r8
 8000928:	f003 fa85 	bl	8003e36 <TIM_Cmd>


	motor_set_speed(0, 7000, DIR_FORWARD);
 800092c:	463a      	mov	r2, r7
 800092e:	f641 3158 	movw	r1, #7000	; 0x1b58
 8000932:	4638      	mov	r0, r7
 8000934:	f7ff fd2c 	bl	8000390 <motor_set_speed>
	motor_set_speed(1, 7000, DIR_REVERSE);
 8000938:	462a      	mov	r2, r5
 800093a:	f641 3158 	movw	r1, #7000	; 0x1b58
 800093e:	4628      	mov	r0, r5
 8000940:	f7ff fd26 	bl	8000390 <motor_set_speed>
	motor_set_speed(2, 7000, DIR_REVERSE);
 8000944:	462a      	mov	r2, r5
 8000946:	f641 3158 	movw	r1, #7000	; 0x1b58
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff fd20 	bl	8000390 <motor_set_speed>
	motor_set_speed(3, 7000, DIR_REVERSE);
 8000950:	462a      	mov	r2, r5
 8000952:	f641 3158 	movw	r1, #7000	; 0x1b58
 8000956:	4630      	mov	r0, r6
 8000958:	f7ff fd1a 	bl	8000390 <motor_set_speed>
}
 800095c:	b005      	add	sp, #20
 800095e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000962:	bf00      	nop

08000964 <SERVO_Init>:
 8000964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000966:	4c28      	ldr	r4, [pc, #160]	; (8000a08 <SERVO_Init+0xa4>)
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	2618      	movs	r6, #24
 800096e:	2503      	movs	r5, #3
 8000970:	a901      	add	r1, sp, #4
 8000972:	4620      	mov	r0, r4
 8000974:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000978:	f88d 6007 	strb.w	r6, [sp, #7]
 800097c:	f88d 5006 	strb.w	r5, [sp, #6]
 8000980:	f001 ff75 	bl	800286e <GPIO_Init>
 8000984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000988:	a901      	add	r1, sp, #4
 800098a:	4620      	mov	r0, r4
 800098c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000990:	f88d 6007 	strb.w	r6, [sp, #7]
 8000994:	f88d 5006 	strb.w	r5, [sp, #6]
 8000998:	f001 ff69 	bl	800286e <GPIO_Init>
 800099c:	f64e 235f 	movw	r3, #59999	; 0xea5f
 80009a0:	491a      	ldr	r1, [pc, #104]	; (8000a0c <SERVO_Init+0xa8>)
 80009a2:	f5a4 3482 	sub.w	r4, r4, #66560	; 0x10400
 80009a6:	4d1a      	ldr	r5, [pc, #104]	; (8000a10 <SERVO_Init+0xac>)
 80009a8:	2700      	movs	r7, #0
 80009aa:	808b      	strh	r3, [r1, #4]
 80009ac:	4620      	mov	r0, r4
 80009ae:	2317      	movs	r3, #23
 80009b0:	800b      	strh	r3, [r1, #0]
 80009b2:	80cf      	strh	r7, [r1, #6]
 80009b4:	804f      	strh	r7, [r1, #2]
 80009b6:	f003 f8c1 	bl	8003b3c <TIM_TimeBaseInit>
 80009ba:	4628      	mov	r0, r5
 80009bc:	f003 fa20 	bl	8003e00 <TIM_OCStructInit>
 80009c0:	2601      	movs	r6, #1
 80009c2:	2360      	movs	r3, #96	; 0x60
 80009c4:	4629      	mov	r1, r5
 80009c6:	4620      	mov	r0, r4
 80009c8:	802b      	strh	r3, [r5, #0]
 80009ca:	806e      	strh	r6, [r5, #2]
 80009cc:	80ef      	strh	r7, [r5, #6]
 80009ce:	812f      	strh	r7, [r5, #8]
 80009d0:	f003 f986 	bl	8003ce0 <TIM_OC3Init>
 80009d4:	4629      	mov	r1, r5
 80009d6:	4620      	mov	r0, r4
 80009d8:	f003 f9c4 	bl	8003d64 <TIM_OC4Init>
 80009dc:	4620      	mov	r0, r4
 80009de:	2108      	movs	r1, #8
 80009e0:	f003 fb38 	bl	8004054 <TIM_OC3PreloadConfig>
 80009e4:	4620      	mov	r0, r4
 80009e6:	2108      	movs	r1, #8
 80009e8:	f003 fb3c 	bl	8004064 <TIM_OC4PreloadConfig>
 80009ec:	4631      	mov	r1, r6
 80009ee:	4620      	mov	r0, r4
 80009f0:	f003 faee 	bl	8003fd0 <TIM_ARRPreloadConfig>
 80009f4:	4631      	mov	r1, r6
 80009f6:	4620      	mov	r0, r4
 80009f8:	f003 fa29 	bl	8003e4e <TIM_CtrlPWMOutputs>
 80009fc:	4631      	mov	r1, r6
 80009fe:	4620      	mov	r0, r4
 8000a00:	f003 fa19 	bl	8003e36 <TIM_Cmd>
 8000a04:	b003      	add	sp, #12
 8000a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a08:	40010c00 	.word	0x40010c00
 8000a0c:	20000a88 	.word	0x20000a88
 8000a10:	20000a92 	.word	0x20000a92

08000a14 <servo_set>:
 8000a14:	29b4      	cmp	r1, #180	; 0xb4
 8000a16:	bf28      	it	cs
 8000a18:	21b4      	movcs	r1, #180	; 0xb4
 8000a1a:	b958      	cbnz	r0, 8000a34 <servo_set+0x20>
 8000a1c:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000a20:	4351      	muls	r1, r2
 8000a22:	23b4      	movs	r3, #180	; 0xb4
 8000a24:	fb91 f3f3 	sdiv	r3, r1, r3
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <servo_set+0x40>)
 8000a2a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	8793      	strh	r3, [r2, #60]	; 0x3c
 8000a32:	4770      	bx	lr
 8000a34:	2801      	cmp	r0, #1
 8000a36:	d10b      	bne.n	8000a50 <servo_set+0x3c>
 8000a38:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000a3c:	4351      	muls	r1, r2
 8000a3e:	23b4      	movs	r3, #180	; 0xb4
 8000a40:	fb91 f3f3 	sdiv	r3, r1, r3
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <servo_set+0x40>)
 8000a46:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40000800 	.word	0x40000800

08000a58 <LED_Init>:
 8000a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	4c18      	ldr	r4, [pc, #96]	; (8000ac0 <LED_Init+0x68>)
 8000a5e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000a62:	2318      	movs	r3, #24
 8000a64:	a901      	add	r1, sp, #4
 8000a66:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <LED_Init+0x6c>)
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	f88d 3006 	strb.w	r3, [sp, #6]
 8000a72:	f001 fefc 	bl	800286e <GPIO_Init>
 8000a76:	4620      	mov	r0, r4
 8000a78:	f003 f9c2 	bl	8003e00 <TIM_OCStructInit>
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	2501      	movs	r5, #1
 8000a80:	8023      	strh	r3, [r4, #0]
 8000a82:	4621      	mov	r1, r4
 8000a84:	2300      	movs	r3, #0
 8000a86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a8a:	80e3      	strh	r3, [r4, #6]
 8000a8c:	8123      	strh	r3, [r4, #8]
 8000a8e:	8065      	strh	r5, [r4, #2]
 8000a90:	f003 f8e2 	bl	8003c58 <TIM_OC2Init>
 8000a94:	2108      	movs	r1, #8
 8000a96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000a9a:	f003 fad1 	bl	8004040 <TIM_OC2PreloadConfig>
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aa4:	f003 fa94 	bl	8003fd0 <TIM_ARRPreloadConfig>
 8000aa8:	4629      	mov	r1, r5
 8000aaa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000aae:	f003 f9ce 	bl	8003e4e <TIM_CtrlPWMOutputs>
 8000ab2:	4629      	mov	r1, r5
 8000ab4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ab8:	f003 f9bd 	bl	8003e36 <TIM_Cmd>
 8000abc:	b003      	add	sp, #12
 8000abe:	bd30      	pop	{r4, r5, pc}
 8000ac0:	20000a92 	.word	0x20000a92
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <led_set>:
 8000ac8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000acc:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4358      	muls	r0, r3
 8000ad2:	23ff      	movs	r3, #255	; 0xff
 8000ad4:	fb90 f0f3 	sdiv	r0, r0, r3
 8000ad8:	b280      	uxth	r0, r0
 8000ada:	8710      	strh	r0, [r2, #56]	; 0x38
 8000adc:	4770      	bx	lr

08000ade <DEBUG_Init>:
 8000ade:	b507      	push	{r0, r1, r2, lr}
 8000ae0:	2330      	movs	r3, #48	; 0x30
 8000ae2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	f88d 3006 	strb.w	r3, [sp, #6]
 8000aec:	a901      	add	r1, sp, #4
 8000aee:	2310      	movs	r3, #16
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <DEBUG_Init+0x22>)
 8000af2:	f88d 3007 	strb.w	r3, [sp, #7]
 8000af6:	f001 feba 	bl	800286e <GPIO_Init>
 8000afa:	b003      	add	sp, #12
 8000afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <debug_toggle>:
 8000b04:	2120      	movs	r1, #32
 8000b06:	b508      	push	{r3, lr}
 8000b08:	4807      	ldr	r0, [pc, #28]	; (8000b28 <debug_toggle+0x24>)
 8000b0a:	f001 ff13 	bl	8002934 <GPIO_ReadOutputDataBit>
 8000b0e:	2801      	cmp	r0, #1
 8000b10:	f04f 0120 	mov.w	r1, #32
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <debug_toggle+0x24>)
 8000b16:	d103      	bne.n	8000b20 <debug_toggle+0x1c>
 8000b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b1c:	f001 bf15 	b.w	800294a <GPIO_ResetBits>
 8000b20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b24:	f001 bf0f 	b.w	8002946 <GPIO_SetBits>
 8000b28:	40010c00 	.word	0x40010c00

08000b2c <I2C1_Init>:
 8000b2c:	b510      	push	{r4, lr}
 8000b2e:	2101      	movs	r1, #1
 8000b30:	b086      	sub	sp, #24
 8000b32:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000b36:	f002 fb05 	bl	8003144 <RCC_APB1PeriphClockCmd>
 8000b3a:	23c0      	movs	r3, #192	; 0xc0
 8000b3c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000b40:	2303      	movs	r3, #3
 8000b42:	f88d 3006 	strb.w	r3, [sp, #6]
 8000b46:	a901      	add	r1, sp, #4
 8000b48:	231c      	movs	r3, #28
 8000b4a:	4814      	ldr	r0, [pc, #80]	; (8000b9c <I2C1_Init+0x70>)
 8000b4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000b50:	f001 fe8d 	bl	800286e <GPIO_Init>
 8000b54:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8000b5e:	f8ad 3010 	strh.w	r3, [sp, #16]
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	f8ad 3012 	strh.w	r3, [sp, #18]
 8000b6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b6e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000b72:	4c0b      	ldr	r4, [pc, #44]	; (8000ba0 <I2C1_Init+0x74>)
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <I2C1_Init+0x78>)
 8000b76:	a906      	add	r1, sp, #24
 8000b78:	f841 3d10 	str.w	r3, [r1, #-16]!
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f8ad 200e 	strh.w	r2, [sp, #14]
 8000b82:	f001 ff6b 	bl	8002a5c <I2C_Init>
 8000b86:	2101      	movs	r1, #1
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f001 ffdf 	bl	8002b4c <I2C_Cmd>
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <I2C1_Init+0x7c>)
 8000b90:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	b006      	add	sp, #24
 8000b98:	bd10      	pop	{r4, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	000186a0 	.word	0x000186a0
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <I2C1_EV_IRQHandler>:
 8000bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bae:	495b      	ldr	r1, [pc, #364]	; (8000d1c <I2C1_EV_IRQHandler+0x170>)
 8000bb0:	485b      	ldr	r0, [pc, #364]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000bb2:	f002 f8f6 	bl	8002da2 <I2C_GetITStatus>
 8000bb6:	2801      	cmp	r0, #1
 8000bb8:	4604      	mov	r4, r0
 8000bba:	d110      	bne.n	8000bde <I2C1_EV_IRQHandler+0x32>
 8000bbc:	4b59      	ldr	r3, [pc, #356]	; (8000d24 <I2C1_EV_IRQHandler+0x178>)
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	7819      	ldrb	r1, [r3, #0]
 8000bc2:	4857      	ldr	r0, [pc, #348]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000bc4:	0049      	lsls	r1, r1, #1
 8000bc6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000bca:	f002 f836 	bl	8002c3a <I2C_Send7bitAddress>
 8000bce:	4b56      	ldr	r3, [pc, #344]	; (8000d28 <I2C1_EV_IRQHandler+0x17c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d02b      	beq.n	8000c2e <I2C1_EV_IRQHandler+0x82>
 8000bd6:	4622      	mov	r2, r4
 8000bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bdc:	e08a      	b.n	8000cf4 <I2C1_EV_IRQHandler+0x148>
 8000bde:	4953      	ldr	r1, [pc, #332]	; (8000d2c <I2C1_EV_IRQHandler+0x180>)
 8000be0:	484f      	ldr	r0, [pc, #316]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000be2:	f002 f8de 	bl	8002da2 <I2C_GetITStatus>
 8000be6:	2801      	cmp	r0, #1
 8000be8:	d123      	bne.n	8000c32 <I2C1_EV_IRQHandler+0x86>
 8000bea:	4c4f      	ldr	r4, [pc, #316]	; (8000d28 <I2C1_EV_IRQHandler+0x17c>)
 8000bec:	7823      	ldrb	r3, [r4, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d103      	bne.n	8000bfa <I2C1_EV_IRQHandler+0x4e>
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	484a      	ldr	r0, [pc, #296]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000bf6:	f001 ffe5 	bl	8002bc4 <I2C_AcknowledgeConfig>
 8000bfa:	4849      	ldr	r0, [pc, #292]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000bfc:	8a83      	ldrh	r3, [r0, #20]
 8000bfe:	8b03      	ldrh	r3, [r0, #24]
 8000c00:	4b4b      	ldr	r3, [pc, #300]	; (8000d30 <I2C1_EV_IRQHandler+0x184>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f040 8087 	bne.w	8000d18 <I2C1_EV_IRQHandler+0x16c>
 8000c0a:	7821      	ldrb	r1, [r4, #0]
 8000c0c:	b2c9      	uxtb	r1, r1
 8000c0e:	2901      	cmp	r1, #1
 8000c10:	d101      	bne.n	8000c16 <I2C1_EV_IRQHandler+0x6a>
 8000c12:	f001 ffcb 	bl	8002bac <I2C_GenerateSTOP>
 8000c16:	7823      	ldrb	r3, [r4, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d17d      	bne.n	8000d18 <I2C1_EV_IRQHandler+0x16c>
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4840      	ldr	r0, [pc, #256]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000c20:	f001 ffd0 	bl	8002bc4 <I2C_AcknowledgeConfig>
 8000c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c28:	483d      	ldr	r0, [pc, #244]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000c2a:	f002 f84f 	bl	8002ccc <I2C_NACKPositionConfig>
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e7d2      	b.n	8000bd8 <I2C1_EV_IRQHandler+0x2c>
 8000c32:	4940      	ldr	r1, [pc, #256]	; (8000d34 <I2C1_EV_IRQHandler+0x188>)
 8000c34:	483a      	ldr	r0, [pc, #232]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000c36:	f002 f8b4 	bl	8002da2 <I2C_GetITStatus>
 8000c3a:	2801      	cmp	r0, #1
 8000c3c:	d125      	bne.n	8000c8a <I2C1_EV_IRQHandler+0xde>
 8000c3e:	493e      	ldr	r1, [pc, #248]	; (8000d38 <I2C1_EV_IRQHandler+0x18c>)
 8000c40:	4837      	ldr	r0, [pc, #220]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000c42:	f002 f8ae 	bl	8002da2 <I2C_GetITStatus>
 8000c46:	4605      	mov	r5, r0
 8000c48:	b9f8      	cbnz	r0, 8000c8a <I2C1_EV_IRQHandler+0xde>
 8000c4a:	4a3c      	ldr	r2, [pc, #240]	; (8000d3c <I2C1_EV_IRQHandler+0x190>)
 8000c4c:	4834      	ldr	r0, [pc, #208]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000c4e:	7814      	ldrb	r4, [r2, #0]
 8000c50:	b2e4      	uxtb	r4, r4
 8000c52:	1c63      	adds	r3, r4, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	7013      	strb	r3, [r2, #0]
 8000c58:	f001 ffec 	bl	8002c34 <I2C_ReceiveData>
 8000c5c:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <I2C1_EV_IRQHandler+0x194>)
 8000c5e:	5518      	strb	r0, [r3, r4]
 8000c60:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <I2C1_EV_IRQHandler+0x17c>)
 8000c62:	7819      	ldrb	r1, [r3, #0]
 8000c64:	461c      	mov	r4, r3
 8000c66:	3901      	subs	r1, #1
 8000c68:	b2c9      	uxtb	r1, r1
 8000c6a:	7019      	strb	r1, [r3, #0]
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	2a03      	cmp	r2, #3
 8000c70:	d105      	bne.n	8000c7e <I2C1_EV_IRQHandler+0xd2>
 8000c72:	462a      	mov	r2, r5
 8000c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c78:	4829      	ldr	r0, [pc, #164]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000c7a:	f001 ffd0 	bl	8002c1e <I2C_ITConfig>
 8000c7e:	7823      	ldrb	r3, [r4, #0]
 8000c80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d147      	bne.n	8000d18 <I2C1_EV_IRQHandler+0x16c>
 8000c88:	e032      	b.n	8000cf0 <I2C1_EV_IRQHandler+0x144>
 8000c8a:	492b      	ldr	r1, [pc, #172]	; (8000d38 <I2C1_EV_IRQHandler+0x18c>)
 8000c8c:	4824      	ldr	r0, [pc, #144]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000c8e:	f002 f888 	bl	8002da2 <I2C_GetITStatus>
 8000c92:	2801      	cmp	r0, #1
 8000c94:	4601      	mov	r1, r0
 8000c96:	d13f      	bne.n	8000d18 <I2C1_EV_IRQHandler+0x16c>
 8000c98:	4c23      	ldr	r4, [pc, #140]	; (8000d28 <I2C1_EV_IRQHandler+0x17c>)
 8000c9a:	4d28      	ldr	r5, [pc, #160]	; (8000d3c <I2C1_EV_IRQHandler+0x190>)
 8000c9c:	7823      	ldrb	r3, [r4, #0]
 8000c9e:	4f28      	ldr	r7, [pc, #160]	; (8000d40 <I2C1_EV_IRQHandler+0x194>)
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d104      	bne.n	8000cae <I2C1_EV_IRQHandler+0x102>
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	481e      	ldr	r0, [pc, #120]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000ca8:	f001 ff8c 	bl	8002bc4 <I2C_AcknowledgeConfig>
 8000cac:	e027      	b.n	8000cfe <I2C1_EV_IRQHandler+0x152>
 8000cae:	7823      	ldrb	r3, [r4, #0]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d124      	bne.n	8000cfe <I2C1_EV_IRQHandler+0x152>
 8000cb4:	481a      	ldr	r0, [pc, #104]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000cb6:	f001 ff79 	bl	8002bac <I2C_GenerateSTOP>
 8000cba:	782e      	ldrb	r6, [r5, #0]
 8000cbc:	4818      	ldr	r0, [pc, #96]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000cbe:	b2f6      	uxtb	r6, r6
 8000cc0:	1c73      	adds	r3, r6, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	702b      	strb	r3, [r5, #0]
 8000cc6:	f001 ffb5 	bl	8002c34 <I2C_ReceiveData>
 8000cca:	7823      	ldrb	r3, [r4, #0]
 8000ccc:	55b8      	strb	r0, [r7, r6]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	7023      	strb	r3, [r4, #0]
 8000cd4:	782e      	ldrb	r6, [r5, #0]
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000cd8:	b2f6      	uxtb	r6, r6
 8000cda:	1c73      	adds	r3, r6, #1
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	702b      	strb	r3, [r5, #0]
 8000ce0:	f001 ffa8 	bl	8002c34 <I2C_ReceiveData>
 8000ce4:	7823      	ldrb	r3, [r4, #0]
 8000ce6:	55b8      	strb	r0, [r7, r6]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	7023      	strb	r3, [r4, #0]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000cfa:	f001 bf90 	b.w	8002c1e <I2C_ITConfig>
 8000cfe:	782e      	ldrb	r6, [r5, #0]
 8000d00:	4807      	ldr	r0, [pc, #28]	; (8000d20 <I2C1_EV_IRQHandler+0x174>)
 8000d02:	b2f6      	uxtb	r6, r6
 8000d04:	1c73      	adds	r3, r6, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	702b      	strb	r3, [r5, #0]
 8000d0a:	f001 ff93 	bl	8002c34 <I2C_ReceiveData>
 8000d0e:	7823      	ldrb	r3, [r4, #0]
 8000d10:	55b8      	strb	r0, [r7, r6]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	7023      	strb	r3, [r4, #0]
 8000d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	02000001 	.word	0x02000001
 8000d20:	40005400 	.word	0x40005400
 8000d24:	20000a78 	.word	0x20000a78
 8000d28:	20000a75 	.word	0x20000a75
 8000d2c:	02000002 	.word	0x02000002
 8000d30:	200000b0 	.word	0x200000b0
 8000d34:	06000040 	.word	0x06000040
 8000d38:	02000004 	.word	0x02000004
 8000d3c:	20000a79 	.word	0x20000a79
 8000d40:	20000a76 	.word	0x20000a76

08000d44 <SysTick_Init>:
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <SysTick_Init+0x24>)
 8000d46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	21f0      	movs	r1, #240	; 0xf0
 8000d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d52:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <SysTick_Init+0x28>)
 8000d54:	3b01      	subs	r3, #1
 8000d56:	6053      	str	r3, [r2, #4]
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Init+0x2c>)
 8000d5a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8000d5e:	2300      	movs	r3, #0
 8000d60:	6093      	str	r3, [r2, #8]
 8000d62:	2307      	movs	r3, #7
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4770      	bx	lr
 8000d68:	20000004 	.word	0x20000004
 8000d6c:	e000e010 	.word	0xe000e010
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <SysTick_Handler>:
 8000d74:	4a02      	ldr	r2, [pc, #8]	; (8000d80 <SysTick_Handler+0xc>)
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200000b4 	.word	0x200000b4

08000d84 <delay>:
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <delay+0x10>)
 8000d86:	6819      	ldr	r1, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	1a52      	subs	r2, r2, r1
 8000d8c:	4282      	cmp	r2, r0
 8000d8e:	d3fb      	bcc.n	8000d88 <delay+0x4>
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200000b4 	.word	0x200000b4

08000d98 <millis>:
 8000d98:	4b01      	ldr	r3, [pc, #4]	; (8000da0 <millis+0x8>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200000b4 	.word	0x200000b4

08000da4 <RCC_Configuration>:
 8000da4:	b508      	push	{r3, lr}
 8000da6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000daa:	f002 f919 	bl	8002fe0 <RCC_PCLK1Config>
 8000dae:	2101      	movs	r1, #1
 8000db0:	2007      	movs	r0, #7
 8000db2:	f002 f9c7 	bl	8003144 <RCC_APB1PeriphClockCmd>
 8000db6:	2101      	movs	r1, #1
 8000db8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000dbc:	f002 f9b6 	bl	800312c <RCC_APB2PeriphClockCmd>
 8000dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	201d      	movs	r0, #29
 8000dc8:	f002 b9b0 	b.w	800312c <RCC_APB2PeriphClockCmd>

08000dcc <ADC_DeInit>:
 8000dcc:	b508      	push	{r3, lr}
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <ADC_DeInit+0x54>)
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	d108      	bne.n	8000de6 <ADC_DeInit+0x1a>
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dda:	f002 f9bf 	bl	800315c <RCC_APB2PeriphResetCmd>
 8000dde:	2100      	movs	r1, #0
 8000de0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000de4:	e016      	b.n	8000e14 <ADC_DeInit+0x48>
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <ADC_DeInit+0x58>)
 8000de8:	4298      	cmp	r0, r3
 8000dea:	d108      	bne.n	8000dfe <ADC_DeInit+0x32>
 8000dec:	2101      	movs	r1, #1
 8000dee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000df2:	f002 f9b3 	bl	800315c <RCC_APB2PeriphResetCmd>
 8000df6:	2100      	movs	r1, #0
 8000df8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000dfc:	e00a      	b.n	8000e14 <ADC_DeInit+0x48>
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <ADC_DeInit+0x5c>)
 8000e00:	4298      	cmp	r0, r3
 8000e02:	d10b      	bne.n	8000e1c <ADC_DeInit+0x50>
 8000e04:	2101      	movs	r1, #1
 8000e06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e0a:	f002 f9a7 	bl	800315c <RCC_APB2PeriphResetCmd>
 8000e0e:	2100      	movs	r1, #0
 8000e10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e18:	f002 b9a0 	b.w	800315c <RCC_APB2PeriphResetCmd>
 8000e1c:	bd08      	pop	{r3, pc}
 8000e1e:	bf00      	nop
 8000e20:	40012400 	.word	0x40012400
 8000e24:	40012800 	.word	0x40012800
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <ADC_Init>:
 8000e2c:	6843      	ldr	r3, [r0, #4]
 8000e2e:	b510      	push	{r4, lr}
 8000e30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000e34:	680b      	ldr	r3, [r1, #0]
 8000e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	790a      	ldrb	r2, [r1, #4]
 8000e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000e42:	6043      	str	r3, [r0, #4]
 8000e44:	68ca      	ldr	r2, [r1, #12]
 8000e46:	688b      	ldr	r3, [r1, #8]
 8000e48:	6884      	ldr	r4, [r0, #8]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <ADC_Init+0x44>)
 8000e4e:	4023      	ands	r3, r4
 8000e50:	4313      	orrs	r3, r2
 8000e52:	794a      	ldrb	r2, [r1, #5]
 8000e54:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000e58:	6083      	str	r3, [r0, #8]
 8000e5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e5c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000e60:	7c0b      	ldrb	r3, [r1, #16]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8000e6a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000e6c:	bd10      	pop	{r4, pc}
 8000e6e:	bf00      	nop
 8000e70:	fff1f7fd 	.word	0xfff1f7fd

08000e74 <ADC_StructInit>:
 8000e74:	2300      	movs	r3, #0
 8000e76:	6003      	str	r3, [r0, #0]
 8000e78:	7103      	strb	r3, [r0, #4]
 8000e7a:	7143      	strb	r3, [r0, #5]
 8000e7c:	6083      	str	r3, [r0, #8]
 8000e7e:	60c3      	str	r3, [r0, #12]
 8000e80:	2301      	movs	r3, #1
 8000e82:	7403      	strb	r3, [r0, #16]
 8000e84:	4770      	bx	lr

08000e86 <ADC_Cmd>:
 8000e86:	6883      	ldr	r3, [r0, #8]
 8000e88:	b111      	cbz	r1, 8000e90 <ADC_Cmd+0xa>
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	e001      	b.n	8000e94 <ADC_Cmd+0xe>
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	6083      	str	r3, [r0, #8]
 8000e96:	4770      	bx	lr

08000e98 <ADC_DMACmd>:
 8000e98:	6883      	ldr	r3, [r0, #8]
 8000e9a:	b111      	cbz	r1, 8000ea2 <ADC_DMACmd+0xa>
 8000e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea0:	e001      	b.n	8000ea6 <ADC_DMACmd+0xe>
 8000ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ea6:	6083      	str	r3, [r0, #8]
 8000ea8:	4770      	bx	lr

08000eaa <ADC_ITConfig>:
 8000eaa:	b2c9      	uxtb	r1, r1
 8000eac:	6843      	ldr	r3, [r0, #4]
 8000eae:	b10a      	cbz	r2, 8000eb4 <ADC_ITConfig+0xa>
 8000eb0:	4319      	orrs	r1, r3
 8000eb2:	e001      	b.n	8000eb8 <ADC_ITConfig+0xe>
 8000eb4:	ea23 0101 	bic.w	r1, r3, r1
 8000eb8:	6041      	str	r1, [r0, #4]
 8000eba:	4770      	bx	lr

08000ebc <ADC_ResetCalibration>:
 8000ebc:	6883      	ldr	r3, [r0, #8]
 8000ebe:	f043 0308 	orr.w	r3, r3, #8
 8000ec2:	6083      	str	r3, [r0, #8]
 8000ec4:	4770      	bx	lr

08000ec6 <ADC_GetResetCalibrationStatus>:
 8000ec6:	6880      	ldr	r0, [r0, #8]
 8000ec8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000ecc:	4770      	bx	lr

08000ece <ADC_StartCalibration>:
 8000ece:	6883      	ldr	r3, [r0, #8]
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6083      	str	r3, [r0, #8]
 8000ed6:	4770      	bx	lr

08000ed8 <ADC_GetCalibrationStatus>:
 8000ed8:	6880      	ldr	r0, [r0, #8]
 8000eda:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000ede:	4770      	bx	lr

08000ee0 <ADC_SoftwareStartConvCmd>:
 8000ee0:	6883      	ldr	r3, [r0, #8]
 8000ee2:	b111      	cbz	r1, 8000eea <ADC_SoftwareStartConvCmd+0xa>
 8000ee4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000ee8:	e001      	b.n	8000eee <ADC_SoftwareStartConvCmd+0xe>
 8000eea:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 8000eee:	6083      	str	r3, [r0, #8]
 8000ef0:	4770      	bx	lr

08000ef2 <ADC_GetSoftwareStartConvStatus>:
 8000ef2:	6880      	ldr	r0, [r0, #8]
 8000ef4:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8000ef8:	4770      	bx	lr

08000efa <ADC_DiscModeChannelCountConfig>:
 8000efa:	6843      	ldr	r3, [r0, #4]
 8000efc:	3901      	subs	r1, #1
 8000efe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f02:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8000f06:	6043      	str	r3, [r0, #4]
 8000f08:	4770      	bx	lr

08000f0a <ADC_DiscModeCmd>:
 8000f0a:	6843      	ldr	r3, [r0, #4]
 8000f0c:	b111      	cbz	r1, 8000f14 <ADC_DiscModeCmd+0xa>
 8000f0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f12:	e001      	b.n	8000f18 <ADC_DiscModeCmd+0xe>
 8000f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f18:	6043      	str	r3, [r0, #4]
 8000f1a:	4770      	bx	lr

08000f1c <ADC_RegularChannelConfig>:
 8000f1c:	2909      	cmp	r1, #9
 8000f1e:	b570      	push	{r4, r5, r6, lr}
 8000f20:	d90d      	bls.n	8000f3e <ADC_RegularChannelConfig+0x22>
 8000f22:	f1a1 040a 	sub.w	r4, r1, #10
 8000f26:	68c6      	ldr	r6, [r0, #12]
 8000f28:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8000f2c:	2507      	movs	r5, #7
 8000f2e:	40a5      	lsls	r5, r4
 8000f30:	ea26 0505 	bic.w	r5, r6, r5
 8000f34:	fa03 f404 	lsl.w	r4, r3, r4
 8000f38:	432c      	orrs	r4, r5
 8000f3a:	60c4      	str	r4, [r0, #12]
 8000f3c:	e00a      	b.n	8000f54 <ADC_RegularChannelConfig+0x38>
 8000f3e:	6906      	ldr	r6, [r0, #16]
 8000f40:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8000f44:	2507      	movs	r5, #7
 8000f46:	40a5      	lsls	r5, r4
 8000f48:	ea26 0505 	bic.w	r5, r6, r5
 8000f4c:	fa03 f404 	lsl.w	r4, r3, r4
 8000f50:	432c      	orrs	r4, r5
 8000f52:	6104      	str	r4, [r0, #16]
 8000f54:	2a06      	cmp	r2, #6
 8000f56:	d80c      	bhi.n	8000f72 <ADC_RegularChannelConfig+0x56>
 8000f58:	3a01      	subs	r2, #1
 8000f5a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000f5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f60:	231f      	movs	r3, #31
 8000f62:	4093      	lsls	r3, r2
 8000f64:	ea24 0303 	bic.w	r3, r4, r3
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	6342      	str	r2, [r0, #52]	; 0x34
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
 8000f72:	2a0c      	cmp	r2, #12
 8000f74:	d80c      	bhi.n	8000f90 <ADC_RegularChannelConfig+0x74>
 8000f76:	3a07      	subs	r2, #7
 8000f78:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000f7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f7e:	231f      	movs	r3, #31
 8000f80:	4093      	lsls	r3, r2
 8000f82:	ea24 0303 	bic.w	r3, r4, r3
 8000f86:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	6302      	str	r2, [r0, #48]	; 0x30
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	3a0d      	subs	r2, #13
 8000f92:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000f94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000f98:	231f      	movs	r3, #31
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	ea24 0303 	bic.w	r3, r4, r3
 8000fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	62c2      	str	r2, [r0, #44]	; 0x2c
 8000fa8:	bd70      	pop	{r4, r5, r6, pc}

08000faa <ADC_ExternalTrigConvCmd>:
 8000faa:	6883      	ldr	r3, [r0, #8]
 8000fac:	b111      	cbz	r1, 8000fb4 <ADC_ExternalTrigConvCmd+0xa>
 8000fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fb2:	e001      	b.n	8000fb8 <ADC_ExternalTrigConvCmd+0xe>
 8000fb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000fb8:	6083      	str	r3, [r0, #8]
 8000fba:	4770      	bx	lr

08000fbc <ADC_GetConversionValue>:
 8000fbc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8000fbe:	b280      	uxth	r0, r0
 8000fc0:	4770      	bx	lr

08000fc2 <ADC_GetDualModeConversionValue>:
 8000fc2:	4b01      	ldr	r3, [pc, #4]	; (8000fc8 <ADC_GetDualModeConversionValue+0x6>)
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	4770      	bx	lr
 8000fc8:	4001244c 	.word	0x4001244c

08000fcc <ADC_AutoInjectedConvCmd>:
 8000fcc:	6843      	ldr	r3, [r0, #4]
 8000fce:	b111      	cbz	r1, 8000fd6 <ADC_AutoInjectedConvCmd+0xa>
 8000fd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd4:	e001      	b.n	8000fda <ADC_AutoInjectedConvCmd+0xe>
 8000fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fda:	6043      	str	r3, [r0, #4]
 8000fdc:	4770      	bx	lr

08000fde <ADC_InjectedDiscModeCmd>:
 8000fde:	6843      	ldr	r3, [r0, #4]
 8000fe0:	b111      	cbz	r1, 8000fe8 <ADC_InjectedDiscModeCmd+0xa>
 8000fe2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fe6:	e001      	b.n	8000fec <ADC_InjectedDiscModeCmd+0xe>
 8000fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fec:	6043      	str	r3, [r0, #4]
 8000fee:	4770      	bx	lr

08000ff0 <ADC_ExternalTrigInjectedConvConfig>:
 8000ff0:	6883      	ldr	r3, [r0, #8]
 8000ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ff6:	4319      	orrs	r1, r3
 8000ff8:	6081      	str	r1, [r0, #8]
 8000ffa:	4770      	bx	lr

08000ffc <ADC_ExternalTrigInjectedConvCmd>:
 8000ffc:	6883      	ldr	r3, [r0, #8]
 8000ffe:	b111      	cbz	r1, 8001006 <ADC_ExternalTrigInjectedConvCmd+0xa>
 8001000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001004:	e001      	b.n	800100a <ADC_ExternalTrigInjectedConvCmd+0xe>
 8001006:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800100a:	6083      	str	r3, [r0, #8]
 800100c:	4770      	bx	lr

0800100e <ADC_SoftwareStartInjectedConvCmd>:
 800100e:	6883      	ldr	r3, [r0, #8]
 8001010:	b111      	cbz	r1, 8001018 <ADC_SoftwareStartInjectedConvCmd+0xa>
 8001012:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 8001016:	e001      	b.n	800101c <ADC_SoftwareStartInjectedConvCmd+0xe>
 8001018:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 800101c:	6083      	str	r3, [r0, #8]
 800101e:	4770      	bx	lr

08001020 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
 8001020:	6880      	ldr	r0, [r0, #8]
 8001022:	f3c0 5040 	ubfx	r0, r0, #21, #1
 8001026:	4770      	bx	lr

08001028 <ADC_InjectedChannelConfig>:
 8001028:	2909      	cmp	r1, #9
 800102a:	b570      	push	{r4, r5, r6, lr}
 800102c:	d90d      	bls.n	800104a <ADC_InjectedChannelConfig+0x22>
 800102e:	f1a1 040a 	sub.w	r4, r1, #10
 8001032:	68c6      	ldr	r6, [r0, #12]
 8001034:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001038:	2507      	movs	r5, #7
 800103a:	40a5      	lsls	r5, r4
 800103c:	ea26 0505 	bic.w	r5, r6, r5
 8001040:	fa03 f404 	lsl.w	r4, r3, r4
 8001044:	432c      	orrs	r4, r5
 8001046:	60c4      	str	r4, [r0, #12]
 8001048:	e00a      	b.n	8001060 <ADC_InjectedChannelConfig+0x38>
 800104a:	6906      	ldr	r6, [r0, #16]
 800104c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001050:	2507      	movs	r5, #7
 8001052:	40a5      	lsls	r5, r4
 8001054:	ea26 0505 	bic.w	r5, r6, r5
 8001058:	fa03 f404 	lsl.w	r4, r3, r4
 800105c:	432c      	orrs	r4, r5
 800105e:	6104      	str	r4, [r0, #16]
 8001060:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001062:	3202      	adds	r2, #2
 8001064:	f3c3 5401 	ubfx	r4, r3, #20, #2
 8001068:	1b12      	subs	r2, r2, r4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001070:	241f      	movs	r4, #31
 8001072:	4094      	lsls	r4, r2
 8001074:	ea23 0304 	bic.w	r3, r3, r4
 8001078:	4091      	lsls	r1, r2
 800107a:	4319      	orrs	r1, r3
 800107c:	6381      	str	r1, [r0, #56]	; 0x38
 800107e:	bd70      	pop	{r4, r5, r6, pc}

08001080 <ADC_InjectedSequencerLengthConfig>:
 8001080:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001082:	3901      	subs	r1, #1
 8001084:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001088:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800108c:	6383      	str	r3, [r0, #56]	; 0x38
 800108e:	4770      	bx	lr

08001090 <ADC_SetInjectedOffset>:
 8001090:	b082      	sub	sp, #8
 8001092:	2300      	movs	r3, #0
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	9001      	str	r0, [sp, #4]
 8001098:	9b01      	ldr	r3, [sp, #4]
 800109a:	4419      	add	r1, r3
 800109c:	9101      	str	r1, [sp, #4]
 800109e:	9b01      	ldr	r3, [sp, #4]
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	b002      	add	sp, #8
 80010a4:	4770      	bx	lr

080010a6 <ADC_GetInjectedConversionValue>:
 80010a6:	b082      	sub	sp, #8
 80010a8:	2300      	movs	r3, #0
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9001      	str	r0, [sp, #4]
 80010ae:	9b01      	ldr	r3, [sp, #4]
 80010b0:	3328      	adds	r3, #40	; 0x28
 80010b2:	4419      	add	r1, r3
 80010b4:	9101      	str	r1, [sp, #4]
 80010b6:	9b01      	ldr	r3, [sp, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	b280      	uxth	r0, r0
 80010bc:	b002      	add	sp, #8
 80010be:	4770      	bx	lr

080010c0 <ADC_AnalogWatchdogCmd>:
 80010c0:	6843      	ldr	r3, [r0, #4]
 80010c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80010c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010ca:	4319      	orrs	r1, r3
 80010cc:	6041      	str	r1, [r0, #4]
 80010ce:	4770      	bx	lr

080010d0 <ADC_AnalogWatchdogThresholdsConfig>:
 80010d0:	6241      	str	r1, [r0, #36]	; 0x24
 80010d2:	6282      	str	r2, [r0, #40]	; 0x28
 80010d4:	4770      	bx	lr

080010d6 <ADC_AnalogWatchdogSingleChannelConfig>:
 80010d6:	6843      	ldr	r3, [r0, #4]
 80010d8:	f023 031f 	bic.w	r3, r3, #31
 80010dc:	4319      	orrs	r1, r3
 80010de:	6041      	str	r1, [r0, #4]
 80010e0:	4770      	bx	lr

080010e2 <ADC_TempSensorVrefintCmd>:
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <ADC_TempSensorVrefintCmd+0x16>)
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	b110      	cbz	r0, 80010ee <ADC_TempSensorVrefintCmd+0xc>
 80010e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010ec:	e001      	b.n	80010f2 <ADC_TempSensorVrefintCmd+0x10>
 80010ee:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40012400 	.word	0x40012400

080010fc <ADC_GetFlagStatus>:
 80010fc:	6803      	ldr	r3, [r0, #0]
 80010fe:	4219      	tst	r1, r3
 8001100:	bf14      	ite	ne
 8001102:	2001      	movne	r0, #1
 8001104:	2000      	moveq	r0, #0
 8001106:	4770      	bx	lr

08001108 <ADC_ClearFlag>:
 8001108:	43c9      	mvns	r1, r1
 800110a:	6001      	str	r1, [r0, #0]
 800110c:	4770      	bx	lr

0800110e <ADC_GetITStatus>:
 800110e:	6843      	ldr	r3, [r0, #4]
 8001110:	6800      	ldr	r0, [r0, #0]
 8001112:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 8001116:	d004      	beq.n	8001122 <ADC_GetITStatus+0x14>
 8001118:	b2c9      	uxtb	r1, r1
 800111a:	4219      	tst	r1, r3
 800111c:	bf14      	ite	ne
 800111e:	2001      	movne	r0, #1
 8001120:	2000      	moveq	r0, #0
 8001122:	4770      	bx	lr

08001124 <ADC_ClearITPendingBit>:
 8001124:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8001128:	6001      	str	r1, [r0, #0]
 800112a:	4770      	bx	lr

0800112c <BKP_DeInit>:
 800112c:	b508      	push	{r3, lr}
 800112e:	2001      	movs	r0, #1
 8001130:	f002 f82c 	bl	800318c <RCC_BackupResetCmd>
 8001134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001138:	2000      	movs	r0, #0
 800113a:	f002 b827 	b.w	800318c <RCC_BackupResetCmd>

0800113e <BKP_TamperPinLevelConfig>:
 800113e:	4b01      	ldr	r3, [pc, #4]	; (8001144 <BKP_TamperPinLevelConfig+0x6>)
 8001140:	6018      	str	r0, [r3, #0]
 8001142:	4770      	bx	lr
 8001144:	420d8604 	.word	0x420d8604

08001148 <BKP_TamperPinCmd>:
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <BKP_TamperPinCmd+0x8>)
 800114a:	6018      	str	r0, [r3, #0]
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	420d8600 	.word	0x420d8600

08001154 <BKP_ITConfig>:
 8001154:	4b01      	ldr	r3, [pc, #4]	; (800115c <BKP_ITConfig+0x8>)
 8001156:	6018      	str	r0, [r3, #0]
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	420d8688 	.word	0x420d8688

08001160 <BKP_RTCOutputConfig>:
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <BKP_RTCOutputConfig+0x14>)
 8001162:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8001164:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001168:	041b      	lsls	r3, r3, #16
 800116a:	0c1b      	lsrs	r3, r3, #16
 800116c:	4318      	orrs	r0, r3
 800116e:	8590      	strh	r0, [r2, #44]	; 0x2c
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40006c00 	.word	0x40006c00

08001178 <BKP_SetRTCCalibrationValue>:
 8001178:	4a04      	ldr	r2, [pc, #16]	; (800118c <BKP_SetRTCCalibrationValue+0x14>)
 800117a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800117c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001180:	041b      	lsls	r3, r3, #16
 8001182:	0c1b      	lsrs	r3, r3, #16
 8001184:	4318      	orrs	r0, r3
 8001186:	8590      	strh	r0, [r2, #44]	; 0x2c
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40006c00 	.word	0x40006c00

08001190 <BKP_WriteBackupRegister>:
 8001190:	b082      	sub	sp, #8
 8001192:	2300      	movs	r3, #0
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <BKP_WriteBackupRegister+0x18>)
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	9b01      	ldr	r3, [sp, #4]
 800119c:	4418      	add	r0, r3
 800119e:	9001      	str	r0, [sp, #4]
 80011a0:	9b01      	ldr	r3, [sp, #4]
 80011a2:	6019      	str	r1, [r3, #0]
 80011a4:	b002      	add	sp, #8
 80011a6:	4770      	bx	lr
 80011a8:	40006c00 	.word	0x40006c00

080011ac <BKP_ReadBackupRegister>:
 80011ac:	b082      	sub	sp, #8
 80011ae:	2300      	movs	r3, #0
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <BKP_ReadBackupRegister+0x1c>)
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	9b01      	ldr	r3, [sp, #4]
 80011b8:	4418      	add	r0, r3
 80011ba:	9001      	str	r0, [sp, #4]
 80011bc:	9b01      	ldr	r3, [sp, #4]
 80011be:	8818      	ldrh	r0, [r3, #0]
 80011c0:	b280      	uxth	r0, r0
 80011c2:	b002      	add	sp, #8
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40006c00 	.word	0x40006c00

080011cc <BKP_GetFlagStatus>:
 80011cc:	4b01      	ldr	r3, [pc, #4]	; (80011d4 <BKP_GetFlagStatus+0x8>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	b2c0      	uxtb	r0, r0
 80011d2:	4770      	bx	lr
 80011d4:	420d86a0 	.word	0x420d86a0

080011d8 <BKP_ClearFlag>:
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <BKP_ClearFlag+0x10>)
 80011da:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	8693      	strh	r3, [r2, #52]	; 0x34
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40006c00 	.word	0x40006c00

080011ec <BKP_GetITStatus>:
 80011ec:	4b01      	ldr	r3, [pc, #4]	; (80011f4 <BKP_GetITStatus+0x8>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	b2c0      	uxtb	r0, r0
 80011f2:	4770      	bx	lr
 80011f4:	420d86a4 	.word	0x420d86a4

080011f8 <BKP_ClearITPendingBit>:
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <BKP_ClearITPendingBit+0x10>)
 80011fa:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	8693      	strh	r3, [r2, #52]	; 0x34
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40006c00 	.word	0x40006c00

0800120c <CAN_DeInit>:
 800120c:	b508      	push	{r3, lr}
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <CAN_DeInit+0x30>)
 8001210:	2101      	movs	r1, #1
 8001212:	4298      	cmp	r0, r3
 8001214:	d107      	bne.n	8001226 <CAN_DeInit+0x1a>
 8001216:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800121a:	f001 ffab 	bl	8003174 <RCC_APB1PeriphResetCmd>
 800121e:	2100      	movs	r1, #0
 8001220:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001224:	e006      	b.n	8001234 <CAN_DeInit+0x28>
 8001226:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800122a:	f001 ffa3 	bl	8003174 <RCC_APB1PeriphResetCmd>
 800122e:	2100      	movs	r1, #0
 8001230:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001238:	f001 bf9c 	b.w	8003174 <RCC_APB1PeriphResetCmd>
 800123c:	40006400 	.word	0x40006400

08001240 <CAN_Init>:
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	f023 0302 	bic.w	r3, r3, #2
 8001246:	6003      	str	r3, [r0, #0]
 8001248:	6803      	ldr	r3, [r0, #0]
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6003      	str	r3, [r0, #0]
 8001250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001254:	6842      	ldr	r2, [r0, #4]
 8001256:	07d2      	lsls	r2, r2, #31
 8001258:	d401      	bmi.n	800125e <CAN_Init+0x1e>
 800125a:	3b01      	subs	r3, #1
 800125c:	d1fa      	bne.n	8001254 <CAN_Init+0x14>
 800125e:	6843      	ldr	r3, [r0, #4]
 8001260:	f013 0301 	ands.w	r3, r3, #1
 8001264:	d055      	beq.n	8001312 <CAN_Init+0xd2>
 8001266:	798b      	ldrb	r3, [r1, #6]
 8001268:	2b01      	cmp	r3, #1
 800126a:	6803      	ldr	r3, [r0, #0]
 800126c:	bf0c      	ite	eq
 800126e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8001272:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8001276:	6003      	str	r3, [r0, #0]
 8001278:	79cb      	ldrb	r3, [r1, #7]
 800127a:	2b01      	cmp	r3, #1
 800127c:	6803      	ldr	r3, [r0, #0]
 800127e:	bf0c      	ite	eq
 8001280:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8001284:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8001288:	6003      	str	r3, [r0, #0]
 800128a:	7a0b      	ldrb	r3, [r1, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	6803      	ldr	r3, [r0, #0]
 8001290:	bf0c      	ite	eq
 8001292:	f043 0320 	orreq.w	r3, r3, #32
 8001296:	f023 0320 	bicne.w	r3, r3, #32
 800129a:	6003      	str	r3, [r0, #0]
 800129c:	7a4b      	ldrb	r3, [r1, #9]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	6803      	ldr	r3, [r0, #0]
 80012a2:	bf0c      	ite	eq
 80012a4:	f043 0310 	orreq.w	r3, r3, #16
 80012a8:	f023 0310 	bicne.w	r3, r3, #16
 80012ac:	6003      	str	r3, [r0, #0]
 80012ae:	7a8b      	ldrb	r3, [r1, #10]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	6803      	ldr	r3, [r0, #0]
 80012b4:	bf0c      	ite	eq
 80012b6:	f043 0308 	orreq.w	r3, r3, #8
 80012ba:	f023 0308 	bicne.w	r3, r3, #8
 80012be:	6003      	str	r3, [r0, #0]
 80012c0:	7acb      	ldrb	r3, [r1, #11]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	6803      	ldr	r3, [r0, #0]
 80012c6:	bf0c      	ite	eq
 80012c8:	f043 0304 	orreq.w	r3, r3, #4
 80012cc:	f023 0304 	bicne.w	r3, r3, #4
 80012d0:	6003      	str	r3, [r0, #0]
 80012d2:	78cb      	ldrb	r3, [r1, #3]
 80012d4:	788a      	ldrb	r2, [r1, #2]
 80012d6:	061b      	lsls	r3, r3, #24
 80012d8:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80012dc:	790a      	ldrb	r2, [r1, #4]
 80012de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012e2:	794a      	ldrb	r2, [r1, #5]
 80012e4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80012e8:	880a      	ldrh	r2, [r1, #0]
 80012ea:	3a01      	subs	r2, #1
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61c3      	str	r3, [r0, #28]
 80012f0:	6803      	ldr	r3, [r0, #0]
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	6003      	str	r3, [r0, #0]
 80012f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fc:	6842      	ldr	r2, [r0, #4]
 80012fe:	07d2      	lsls	r2, r2, #31
 8001300:	d501      	bpl.n	8001306 <CAN_Init+0xc6>
 8001302:	3b01      	subs	r3, #1
 8001304:	d1fa      	bne.n	80012fc <CAN_Init+0xbc>
 8001306:	6840      	ldr	r0, [r0, #4]
 8001308:	f000 0001 	and.w	r0, r0, #1
 800130c:	f080 0001 	eor.w	r0, r0, #1
 8001310:	4770      	bx	lr
 8001312:	4618      	mov	r0, r3
 8001314:	4770      	bx	lr

08001316 <CAN_FilterInit>:
 8001316:	7a83      	ldrb	r3, [r0, #10]
 8001318:	2201      	movs	r2, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	b570      	push	{r4, r5, r6, lr}
 8001320:	43dc      	mvns	r4, r3
 8001322:	4a33      	ldr	r2, [pc, #204]	; (80013f0 <CAN_FilterInit+0xda>)
 8001324:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8001328:	f041 0101 	orr.w	r1, r1, #1
 800132c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
 8001330:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8001334:	4021      	ands	r1, r4
 8001336:	f8c2 121c 	str.w	r1, [r2, #540]	; 0x21c
 800133a:	7b01      	ldrb	r1, [r0, #12]
 800133c:	b9a1      	cbnz	r1, 8001368 <CAN_FilterInit+0x52>
 800133e:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8001342:	88c6      	ldrh	r6, [r0, #6]
 8001344:	4021      	ands	r1, r4
 8001346:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
 800134a:	7a81      	ldrb	r1, [r0, #10]
 800134c:	8845      	ldrh	r5, [r0, #2]
 800134e:	3148      	adds	r1, #72	; 0x48
 8001350:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001354:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
 8001358:	8802      	ldrh	r2, [r0, #0]
 800135a:	8881      	ldrh	r1, [r0, #4]
 800135c:	7a85      	ldrb	r5, [r0, #10]
 800135e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8001362:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <CAN_FilterInit+0xde>)
 8001364:	00ed      	lsls	r5, r5, #3
 8001366:	5151      	str	r1, [r2, r5]
 8001368:	7b02      	ldrb	r2, [r0, #12]
 800136a:	2a01      	cmp	r2, #1
 800136c:	d115      	bne.n	800139a <CAN_FilterInit+0x84>
 800136e:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <CAN_FilterInit+0xda>)
 8001370:	8806      	ldrh	r6, [r0, #0]
 8001372:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8001376:	8845      	ldrh	r5, [r0, #2]
 8001378:	4319      	orrs	r1, r3
 800137a:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
 800137e:	7a81      	ldrb	r1, [r0, #10]
 8001380:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001384:	3148      	adds	r1, #72	; 0x48
 8001386:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
 800138a:	88c2      	ldrh	r2, [r0, #6]
 800138c:	8881      	ldrh	r1, [r0, #4]
 800138e:	7a85      	ldrb	r5, [r0, #10]
 8001390:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <CAN_FilterInit+0xde>)
 8001396:	00ed      	lsls	r5, r5, #3
 8001398:	5151      	str	r1, [r2, r5]
 800139a:	7ac2      	ldrb	r2, [r0, #11]
 800139c:	4914      	ldr	r1, [pc, #80]	; (80013f0 <CAN_FilterInit+0xda>)
 800139e:	b91a      	cbnz	r2, 80013a8 <CAN_FilterInit+0x92>
 80013a0:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 80013a4:	4022      	ands	r2, r4
 80013a6:	e002      	b.n	80013ae <CAN_FilterInit+0x98>
 80013a8:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 80013ac:	431a      	orrs	r2, r3
 80013ae:	8905      	ldrh	r5, [r0, #8]
 80013b0:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <CAN_FilterInit+0xda>)
 80013b6:	b92d      	cbnz	r5, 80013c4 <CAN_FilterInit+0xae>
 80013b8:	f8d1 5214 	ldr.w	r5, [r1, #532]	; 0x214
 80013bc:	402c      	ands	r4, r5
 80013be:	f8c1 4214 	str.w	r4, [r1, #532]	; 0x214
 80013c2:	e006      	b.n	80013d2 <CAN_FilterInit+0xbc>
 80013c4:	2d01      	cmp	r5, #1
 80013c6:	bf02      	ittt	eq
 80013c8:	f8d2 1214 	ldreq.w	r1, [r2, #532]	; 0x214
 80013cc:	4319      	orreq	r1, r3
 80013ce:	f8c2 1214 	streq.w	r1, [r2, #532]	; 0x214
 80013d2:	7b41      	ldrb	r1, [r0, #13]
 80013d4:	2901      	cmp	r1, #1
 80013d6:	bf02      	ittt	eq
 80013d8:	f8d2 121c 	ldreq.w	r1, [r2, #540]	; 0x21c
 80013dc:	430b      	orreq	r3, r1
 80013de:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
 80013e2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	40006400 	.word	0x40006400
 80013f4:	40006644 	.word	0x40006644

080013f8 <CAN_StructInit>:
 80013f8:	2300      	movs	r3, #0
 80013fa:	7183      	strb	r3, [r0, #6]
 80013fc:	71c3      	strb	r3, [r0, #7]
 80013fe:	7203      	strb	r3, [r0, #8]
 8001400:	7243      	strb	r3, [r0, #9]
 8001402:	7283      	strb	r3, [r0, #10]
 8001404:	72c3      	strb	r3, [r0, #11]
 8001406:	7083      	strb	r3, [r0, #2]
 8001408:	70c3      	strb	r3, [r0, #3]
 800140a:	2303      	movs	r3, #3
 800140c:	7103      	strb	r3, [r0, #4]
 800140e:	2302      	movs	r3, #2
 8001410:	7143      	strb	r3, [r0, #5]
 8001412:	2301      	movs	r3, #1
 8001414:	8003      	strh	r3, [r0, #0]
 8001416:	4770      	bx	lr

08001418 <CAN_SlaveStartBank>:
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <CAN_SlaveStartBank+0x38>)
 800141a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001426:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800142a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800142e:	f022 020e 	bic.w	r2, r2, #14
 8001432:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8001436:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800143a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 800143e:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
 8001442:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800144e:	4770      	bx	lr
 8001450:	40006400 	.word	0x40006400

08001454 <CAN_DBGFreeze>:
 8001454:	6803      	ldr	r3, [r0, #0]
 8001456:	b111      	cbz	r1, 800145e <CAN_DBGFreeze+0xa>
 8001458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145c:	e001      	b.n	8001462 <CAN_DBGFreeze+0xe>
 800145e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001462:	6003      	str	r3, [r0, #0]
 8001464:	4770      	bx	lr

08001466 <CAN_TTComModeCmd>:
 8001466:	6803      	ldr	r3, [r0, #0]
 8001468:	b199      	cbz	r1, 8001492 <CAN_TTComModeCmd+0x2c>
 800146a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146e:	6003      	str	r3, [r0, #0]
 8001470:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
 800147c:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 8001488:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	e012      	b.n	80014b8 <CAN_TTComModeCmd+0x52>
 8001492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001496:	6003      	str	r3, [r0, #0]
 8001498:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 800149c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014a0:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
 80014a4:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 80014a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ac:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
 80014b0:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 80014b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014b8:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 80014bc:	4770      	bx	lr

080014be <CAN_Transmit>:
 80014be:	6883      	ldr	r3, [r0, #8]
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	015c      	lsls	r4, r3, #5
 80014c4:	d407      	bmi.n	80014d6 <CAN_Transmit+0x18>
 80014c6:	6883      	ldr	r3, [r0, #8]
 80014c8:	011a      	lsls	r2, r3, #4
 80014ca:	d406      	bmi.n	80014da <CAN_Transmit+0x1c>
 80014cc:	6883      	ldr	r3, [r0, #8]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	d405      	bmi.n	80014de <CAN_Transmit+0x20>
 80014d2:	2404      	movs	r4, #4
 80014d4:	e03e      	b.n	8001554 <CAN_Transmit+0x96>
 80014d6:	2400      	movs	r4, #0
 80014d8:	e002      	b.n	80014e0 <CAN_Transmit+0x22>
 80014da:	2401      	movs	r4, #1
 80014dc:	e000      	b.n	80014e0 <CAN_Transmit+0x22>
 80014de:	2402      	movs	r4, #2
 80014e0:	0125      	lsls	r5, r4, #4
 80014e2:	1943      	adds	r3, r0, r5
 80014e4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80014e8:	f002 0201 	and.w	r2, r2, #1
 80014ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80014f0:	7a0e      	ldrb	r6, [r1, #8]
 80014f2:	7a4a      	ldrb	r2, [r1, #9]
 80014f4:	b92e      	cbnz	r6, 8001502 <CAN_Transmit+0x44>
 80014f6:	680f      	ldr	r7, [r1, #0]
 80014f8:	f8d3 6180 	ldr.w	r6, [r3, #384]	; 0x180
 80014fc:	ea42 5247 	orr.w	r2, r2, r7, lsl #21
 8001500:	e006      	b.n	8001510 <CAN_Transmit+0x52>
 8001502:	684f      	ldr	r7, [r1, #4]
 8001504:	f8d3 e180 	ldr.w	lr, [r3, #384]	; 0x180
 8001508:	ea46 06c7 	orr.w	r6, r6, r7, lsl #3
 800150c:	ea46 060e 	orr.w	r6, r6, lr
 8001510:	4332      	orrs	r2, r6
 8001512:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001516:	7a8a      	ldrb	r2, [r1, #10]
 8001518:	4428      	add	r0, r5
 800151a:	f002 020f 	and.w	r2, r2, #15
 800151e:	728a      	strb	r2, [r1, #10]
 8001520:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001524:	f022 020f 	bic.w	r2, r2, #15
 8001528:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 800152c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001530:	7a8e      	ldrb	r6, [r1, #10]
 8001532:	4332      	orrs	r2, r6
 8001534:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8001538:	f8d1 200b 	ldr.w	r2, [r1, #11]
 800153c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8001540:	f8d1 200f 	ldr.w	r2, [r1, #15]
 8001544:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8001548:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800154c:	f042 0201 	orr.w	r2, r2, #1
 8001550:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001554:	4620      	mov	r0, r4
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001558 <CAN_TransmitStatus>:
 8001558:	2901      	cmp	r1, #1
 800155a:	d008      	beq.n	800156e <CAN_TransmitStatus+0x16>
 800155c:	d304      	bcc.n	8001568 <CAN_TransmitStatus+0x10>
 800155e:	2902      	cmp	r1, #2
 8001560:	d118      	bne.n	8001594 <CAN_TransmitStatus+0x3c>
 8001562:	6882      	ldr	r2, [r0, #8]
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <CAN_TransmitStatus+0x40>)
 8001566:	e004      	b.n	8001572 <CAN_TransmitStatus+0x1a>
 8001568:	6882      	ldr	r2, [r0, #8]
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <CAN_TransmitStatus+0x44>)
 800156c:	e001      	b.n	8001572 <CAN_TransmitStatus+0x1a>
 800156e:	6882      	ldr	r2, [r0, #8]
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <CAN_TransmitStatus+0x48>)
 8001572:	4013      	ands	r3, r2
 8001574:	4a09      	ldr	r2, [pc, #36]	; (800159c <CAN_TransmitStatus+0x44>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00a      	beq.n	8001590 <CAN_TransmitStatus+0x38>
 800157a:	d801      	bhi.n	8001580 <CAN_TransmitStatus+0x28>
 800157c:	b933      	cbnz	r3, 800158c <CAN_TransmitStatus+0x34>
 800157e:	e009      	b.n	8001594 <CAN_TransmitStatus+0x3c>
 8001580:	4a07      	ldr	r2, [pc, #28]	; (80015a0 <CAN_TransmitStatus+0x48>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d004      	beq.n	8001590 <CAN_TransmitStatus+0x38>
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <CAN_TransmitStatus+0x40>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d001      	beq.n	8001590 <CAN_TransmitStatus+0x38>
 800158c:	2000      	movs	r0, #0
 800158e:	4770      	bx	lr
 8001590:	2001      	movs	r0, #1
 8001592:	4770      	bx	lr
 8001594:	2002      	movs	r0, #2
 8001596:	4770      	bx	lr
 8001598:	10030000 	.word	0x10030000
 800159c:	04000003 	.word	0x04000003
 80015a0:	08000300 	.word	0x08000300

080015a4 <CAN_CancelTransmit>:
 80015a4:	2901      	cmp	r1, #1
 80015a6:	d007      	beq.n	80015b8 <CAN_CancelTransmit+0x14>
 80015a8:	d302      	bcc.n	80015b0 <CAN_CancelTransmit+0xc>
 80015aa:	2902      	cmp	r1, #2
 80015ac:	d008      	beq.n	80015c0 <CAN_CancelTransmit+0x1c>
 80015ae:	4770      	bx	lr
 80015b0:	6883      	ldr	r3, [r0, #8]
 80015b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b6:	e006      	b.n	80015c6 <CAN_CancelTransmit+0x22>
 80015b8:	6883      	ldr	r3, [r0, #8]
 80015ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015be:	e002      	b.n	80015c6 <CAN_CancelTransmit+0x22>
 80015c0:	6883      	ldr	r3, [r0, #8]
 80015c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015c6:	6083      	str	r3, [r0, #8]
 80015c8:	4770      	bx	lr

080015ca <CAN_Receive>:
 80015ca:	010b      	lsls	r3, r1, #4
 80015cc:	b530      	push	{r4, r5, lr}
 80015ce:	18c4      	adds	r4, r0, r3
 80015d0:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 80015d4:	f005 0504 	and.w	r5, r5, #4
 80015d8:	b2ed      	uxtb	r5, r5
 80015da:	7215      	strb	r5, [r2, #8]
 80015dc:	b925      	cbnz	r5, 80015e8 <CAN_Receive+0x1e>
 80015de:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 80015e2:	0d6d      	lsrs	r5, r5, #21
 80015e4:	6015      	str	r5, [r2, #0]
 80015e6:	e003      	b.n	80015f0 <CAN_Receive+0x26>
 80015e8:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 80015ec:	08ed      	lsrs	r5, r5, #3
 80015ee:	6055      	str	r5, [r2, #4]
 80015f0:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 80015f4:	4403      	add	r3, r0
 80015f6:	f005 0502 	and.w	r5, r5, #2
 80015fa:	7255      	strb	r5, [r2, #9]
 80015fc:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
 8001600:	f005 050f 	and.w	r5, r5, #15
 8001604:	7295      	strb	r5, [r2, #10]
 8001606:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
 800160a:	0a24      	lsrs	r4, r4, #8
 800160c:	74d4      	strb	r4, [r2, #19]
 800160e:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8001612:	72d4      	strb	r4, [r2, #11]
 8001614:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8001618:	0a24      	lsrs	r4, r4, #8
 800161a:	7314      	strb	r4, [r2, #12]
 800161c:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8001620:	0c24      	lsrs	r4, r4, #16
 8001622:	7354      	strb	r4, [r2, #13]
 8001624:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8001628:	0e24      	lsrs	r4, r4, #24
 800162a:	7394      	strb	r4, [r2, #14]
 800162c:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8001630:	73d4      	strb	r4, [r2, #15]
 8001632:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8001636:	0a24      	lsrs	r4, r4, #8
 8001638:	7414      	strb	r4, [r2, #16]
 800163a:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 800163e:	0c24      	lsrs	r4, r4, #16
 8001640:	7454      	strb	r4, [r2, #17]
 8001642:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8001646:	0e1b      	lsrs	r3, r3, #24
 8001648:	7493      	strb	r3, [r2, #18]
 800164a:	b921      	cbnz	r1, 8001656 <CAN_Receive+0x8c>
 800164c:	68c3      	ldr	r3, [r0, #12]
 800164e:	f043 0320 	orr.w	r3, r3, #32
 8001652:	60c3      	str	r3, [r0, #12]
 8001654:	bd30      	pop	{r4, r5, pc}
 8001656:	6903      	ldr	r3, [r0, #16]
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	6103      	str	r3, [r0, #16]
 800165e:	bd30      	pop	{r4, r5, pc}

08001660 <CAN_FIFORelease>:
 8001660:	b921      	cbnz	r1, 800166c <CAN_FIFORelease+0xc>
 8001662:	68c3      	ldr	r3, [r0, #12]
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	60c3      	str	r3, [r0, #12]
 800166a:	4770      	bx	lr
 800166c:	6903      	ldr	r3, [r0, #16]
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	6103      	str	r3, [r0, #16]
 8001674:	4770      	bx	lr

08001676 <CAN_MessagePending>:
 8001676:	b909      	cbnz	r1, 800167c <CAN_MessagePending+0x6>
 8001678:	68c0      	ldr	r0, [r0, #12]
 800167a:	e002      	b.n	8001682 <CAN_MessagePending+0xc>
 800167c:	2901      	cmp	r1, #1
 800167e:	d103      	bne.n	8001688 <CAN_MessagePending+0x12>
 8001680:	6900      	ldr	r0, [r0, #16]
 8001682:	f000 0003 	and.w	r0, r0, #3
 8001686:	4770      	bx	lr
 8001688:	2000      	movs	r0, #0
 800168a:	4770      	bx	lr

0800168c <CAN_OperatingModeRequest>:
 800168c:	b999      	cbnz	r1, 80016b6 <CAN_OperatingModeRequest+0x2a>
 800168e:	6803      	ldr	r3, [r0, #0]
 8001690:	f023 0303 	bic.w	r3, r3, #3
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6003      	str	r3, [r0, #0]
 800169a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169e:	6842      	ldr	r2, [r0, #4]
 80016a0:	f002 0203 	and.w	r2, r2, #3
 80016a4:	2a01      	cmp	r2, #1
 80016a6:	d001      	beq.n	80016ac <CAN_OperatingModeRequest+0x20>
 80016a8:	3b01      	subs	r3, #1
 80016aa:	d1f8      	bne.n	800169e <CAN_OperatingModeRequest+0x12>
 80016ac:	6840      	ldr	r0, [r0, #4]
 80016ae:	f000 0003 	and.w	r0, r0, #3
 80016b2:	2801      	cmp	r0, #1
 80016b4:	e028      	b.n	8001708 <CAN_OperatingModeRequest+0x7c>
 80016b6:	2901      	cmp	r1, #1
 80016b8:	d111      	bne.n	80016de <CAN_OperatingModeRequest+0x52>
 80016ba:	6803      	ldr	r3, [r0, #0]
 80016bc:	f023 0303 	bic.w	r3, r3, #3
 80016c0:	6003      	str	r3, [r0, #0]
 80016c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c6:	6842      	ldr	r2, [r0, #4]
 80016c8:	0792      	lsls	r2, r2, #30
 80016ca:	d001      	beq.n	80016d0 <CAN_OperatingModeRequest+0x44>
 80016cc:	3b01      	subs	r3, #1
 80016ce:	d1fa      	bne.n	80016c6 <CAN_OperatingModeRequest+0x3a>
 80016d0:	6843      	ldr	r3, [r0, #4]
 80016d2:	f013 0f03 	tst.w	r3, #3
 80016d6:	bf0c      	ite	eq
 80016d8:	2001      	moveq	r0, #1
 80016da:	2000      	movne	r0, #0
 80016dc:	4770      	bx	lr
 80016de:	2902      	cmp	r1, #2
 80016e0:	d116      	bne.n	8001710 <CAN_OperatingModeRequest+0x84>
 80016e2:	6803      	ldr	r3, [r0, #0]
 80016e4:	f023 0303 	bic.w	r3, r3, #3
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6003      	str	r3, [r0, #0]
 80016ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f2:	6842      	ldr	r2, [r0, #4]
 80016f4:	f002 0203 	and.w	r2, r2, #3
 80016f8:	2a02      	cmp	r2, #2
 80016fa:	d001      	beq.n	8001700 <CAN_OperatingModeRequest+0x74>
 80016fc:	3b01      	subs	r3, #1
 80016fe:	d1f8      	bne.n	80016f2 <CAN_OperatingModeRequest+0x66>
 8001700:	6840      	ldr	r0, [r0, #4]
 8001702:	f000 0003 	and.w	r0, r0, #3
 8001706:	2802      	cmp	r0, #2
 8001708:	bf14      	ite	ne
 800170a:	2000      	movne	r0, #0
 800170c:	2001      	moveq	r0, #1
 800170e:	4770      	bx	lr
 8001710:	2000      	movs	r0, #0
 8001712:	4770      	bx	lr

08001714 <CAN_Sleep>:
 8001714:	6803      	ldr	r3, [r0, #0]
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	6003      	str	r3, [r0, #0]
 8001720:	6840      	ldr	r0, [r0, #4]
 8001722:	f000 0003 	and.w	r0, r0, #3
 8001726:	1e83      	subs	r3, r0, #2
 8001728:	4258      	negs	r0, r3
 800172a:	4158      	adcs	r0, r3
 800172c:	4770      	bx	lr

0800172e <CAN_WakeUp>:
 800172e:	6803      	ldr	r3, [r0, #0]
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	6003      	str	r3, [r0, #0]
 8001736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173a:	6842      	ldr	r2, [r0, #4]
 800173c:	0792      	lsls	r2, r2, #30
 800173e:	d501      	bpl.n	8001744 <CAN_WakeUp+0x16>
 8001740:	3b01      	subs	r3, #1
 8001742:	d1fa      	bne.n	800173a <CAN_WakeUp+0xc>
 8001744:	6840      	ldr	r0, [r0, #4]
 8001746:	f080 0002 	eor.w	r0, r0, #2
 800174a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800174e:	4770      	bx	lr

08001750 <CAN_GetLastErrorCode>:
 8001750:	6980      	ldr	r0, [r0, #24]
 8001752:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001756:	4770      	bx	lr

08001758 <CAN_GetReceiveErrorCounter>:
 8001758:	6980      	ldr	r0, [r0, #24]
 800175a:	0e00      	lsrs	r0, r0, #24
 800175c:	4770      	bx	lr

0800175e <CAN_GetLSBTransmitErrorCounter>:
 800175e:	6980      	ldr	r0, [r0, #24]
 8001760:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001764:	4770      	bx	lr

08001766 <CAN_ITConfig>:
 8001766:	6943      	ldr	r3, [r0, #20]
 8001768:	b10a      	cbz	r2, 800176e <CAN_ITConfig+0x8>
 800176a:	4319      	orrs	r1, r3
 800176c:	e001      	b.n	8001772 <CAN_ITConfig+0xc>
 800176e:	ea23 0101 	bic.w	r1, r3, r1
 8001772:	6141      	str	r1, [r0, #20]
 8001774:	4770      	bx	lr

08001776 <CAN_GetFlagStatus>:
 8001776:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800177a:	d001      	beq.n	8001780 <CAN_GetFlagStatus+0xa>
 800177c:	6983      	ldr	r3, [r0, #24]
 800177e:	e00b      	b.n	8001798 <CAN_GetFlagStatus+0x22>
 8001780:	01cb      	lsls	r3, r1, #7
 8001782:	d501      	bpl.n	8001788 <CAN_GetFlagStatus+0x12>
 8001784:	6843      	ldr	r3, [r0, #4]
 8001786:	e007      	b.n	8001798 <CAN_GetFlagStatus+0x22>
 8001788:	010a      	lsls	r2, r1, #4
 800178a:	d501      	bpl.n	8001790 <CAN_GetFlagStatus+0x1a>
 800178c:	6883      	ldr	r3, [r0, #8]
 800178e:	e003      	b.n	8001798 <CAN_GetFlagStatus+0x22>
 8001790:	018b      	lsls	r3, r1, #6
 8001792:	bf4c      	ite	mi
 8001794:	68c3      	ldrmi	r3, [r0, #12]
 8001796:	6903      	ldrpl	r3, [r0, #16]
 8001798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800179c:	420b      	tst	r3, r1
 800179e:	bf14      	ite	ne
 80017a0:	2001      	movne	r0, #1
 80017a2:	2000      	moveq	r0, #0
 80017a4:	4770      	bx	lr

080017a6 <CAN_ClearFlag>:
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <CAN_ClearFlag+0x2a>)
 80017a8:	4299      	cmp	r1, r3
 80017aa:	d102      	bne.n	80017b2 <CAN_ClearFlag+0xc>
 80017ac:	2300      	movs	r3, #0
 80017ae:	6183      	str	r3, [r0, #24]
 80017b0:	4770      	bx	lr
 80017b2:	018a      	lsls	r2, r1, #6
 80017b4:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80017b8:	d501      	bpl.n	80017be <CAN_ClearFlag+0x18>
 80017ba:	60c3      	str	r3, [r0, #12]
 80017bc:	4770      	bx	lr
 80017be:	014a      	lsls	r2, r1, #5
 80017c0:	d501      	bpl.n	80017c6 <CAN_ClearFlag+0x20>
 80017c2:	6103      	str	r3, [r0, #16]
 80017c4:	4770      	bx	lr
 80017c6:	010a      	lsls	r2, r1, #4
 80017c8:	bf4c      	ite	mi
 80017ca:	6083      	strmi	r3, [r0, #8]
 80017cc:	6043      	strpl	r3, [r0, #4]
 80017ce:	4770      	bx	lr
 80017d0:	30f00070 	.word	0x30f00070

080017d4 <CAN_GetITStatus>:
 80017d4:	6943      	ldr	r3, [r0, #20]
 80017d6:	400b      	ands	r3, r1
 80017d8:	d05c      	beq.n	8001894 <CAN_GetITStatus+0xc0>
 80017da:	2940      	cmp	r1, #64	; 0x40
 80017dc:	d042      	beq.n	8001864 <CAN_GetITStatus+0x90>
 80017de:	d810      	bhi.n	8001802 <CAN_GetITStatus+0x2e>
 80017e0:	2904      	cmp	r1, #4
 80017e2:	d033      	beq.n	800184c <CAN_GetITStatus+0x78>
 80017e4:	d805      	bhi.n	80017f2 <CAN_GetITStatus+0x1e>
 80017e6:	2901      	cmp	r1, #1
 80017e8:	d027      	beq.n	800183a <CAN_GetITStatus+0x66>
 80017ea:	2902      	cmp	r1, #2
 80017ec:	d154      	bne.n	8001898 <CAN_GetITStatus+0xc4>
 80017ee:	68c0      	ldr	r0, [r0, #12]
 80017f0:	e02f      	b.n	8001852 <CAN_GetITStatus+0x7e>
 80017f2:	2910      	cmp	r1, #16
 80017f4:	d02c      	beq.n	8001850 <CAN_GetITStatus+0x7c>
 80017f6:	2920      	cmp	r1, #32
 80017f8:	d030      	beq.n	800185c <CAN_GetITStatus+0x88>
 80017fa:	2908      	cmp	r1, #8
 80017fc:	d14c      	bne.n	8001898 <CAN_GetITStatus+0xc4>
 80017fe:	68c0      	ldr	r0, [r0, #12]
 8001800:	e035      	b.n	800186e <CAN_GetITStatus+0x9a>
 8001802:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001806:	d03b      	beq.n	8001880 <CAN_GetITStatus+0xac>
 8001808:	d80c      	bhi.n	8001824 <CAN_GetITStatus+0x50>
 800180a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800180e:	d031      	beq.n	8001874 <CAN_GetITStatus+0xa0>
 8001810:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001814:	d032      	beq.n	800187c <CAN_GetITStatus+0xa8>
 8001816:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800181a:	d13d      	bne.n	8001898 <CAN_GetITStatus+0xc4>
 800181c:	6980      	ldr	r0, [r0, #24]
 800181e:	f000 0001 	and.w	r0, r0, #1
 8001822:	4770      	bx	lr
 8001824:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001828:	d01e      	beq.n	8001868 <CAN_GetITStatus+0x94>
 800182a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800182e:	d01d      	beq.n	800186c <CAN_GetITStatus+0x98>
 8001830:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001834:	d130      	bne.n	8001898 <CAN_GetITStatus+0xc4>
 8001836:	6840      	ldr	r0, [r0, #4]
 8001838:	e029      	b.n	800188e <CAN_GetITStatus+0xba>
 800183a:	6880      	ldr	r0, [r0, #8]
 800183c:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8001840:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8001844:	3000      	adds	r0, #0
 8001846:	bf18      	it	ne
 8001848:	2001      	movne	r0, #1
 800184a:	4770      	bx	lr
 800184c:	68c0      	ldr	r0, [r0, #12]
 800184e:	e006      	b.n	800185e <CAN_GetITStatus+0x8a>
 8001850:	6900      	ldr	r0, [r0, #16]
 8001852:	f010 0003 	ands.w	r0, r0, #3
 8001856:	bf18      	it	ne
 8001858:	2001      	movne	r0, #1
 800185a:	4770      	bx	lr
 800185c:	6900      	ldr	r0, [r0, #16]
 800185e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001862:	4770      	bx	lr
 8001864:	6900      	ldr	r0, [r0, #16]
 8001866:	e002      	b.n	800186e <CAN_GetITStatus+0x9a>
 8001868:	6840      	ldr	r0, [r0, #4]
 800186a:	e7f8      	b.n	800185e <CAN_GetITStatus+0x8a>
 800186c:	6840      	ldr	r0, [r0, #4]
 800186e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001872:	4770      	bx	lr
 8001874:	6980      	ldr	r0, [r0, #24]
 8001876:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800187a:	4770      	bx	lr
 800187c:	6980      	ldr	r0, [r0, #24]
 800187e:	e006      	b.n	800188e <CAN_GetITStatus+0xba>
 8001880:	6983      	ldr	r3, [r0, #24]
 8001882:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001886:	bf14      	ite	ne
 8001888:	2001      	movne	r0, #1
 800188a:	2000      	moveq	r0, #0
 800188c:	4770      	bx	lr
 800188e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001892:	4770      	bx	lr
 8001894:	4618      	mov	r0, r3
 8001896:	4770      	bx	lr
 8001898:	2000      	movs	r0, #0
 800189a:	4770      	bx	lr

0800189c <CAN_ClearITPendingBit>:
 800189c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80018a0:	d035      	beq.n	800190e <CAN_ClearITPendingBit+0x72>
 80018a2:	d80c      	bhi.n	80018be <CAN_ClearITPendingBit+0x22>
 80018a4:	2908      	cmp	r1, #8
 80018a6:	d024      	beq.n	80018f2 <CAN_ClearITPendingBit+0x56>
 80018a8:	d804      	bhi.n	80018b4 <CAN_ClearITPendingBit+0x18>
 80018aa:	2901      	cmp	r1, #1
 80018ac:	d01c      	beq.n	80018e8 <CAN_ClearITPendingBit+0x4c>
 80018ae:	2904      	cmp	r1, #4
 80018b0:	d01d      	beq.n	80018ee <CAN_ClearITPendingBit+0x52>
 80018b2:	4770      	bx	lr
 80018b4:	2920      	cmp	r1, #32
 80018b6:	d01f      	beq.n	80018f8 <CAN_ClearITPendingBit+0x5c>
 80018b8:	2940      	cmp	r1, #64	; 0x40
 80018ba:	d01f      	beq.n	80018fc <CAN_ClearITPendingBit+0x60>
 80018bc:	4770      	bx	lr
 80018be:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80018c2:	d022      	beq.n	800190a <CAN_ClearITPendingBit+0x6e>
 80018c4:	d806      	bhi.n	80018d4 <CAN_ClearITPendingBit+0x38>
 80018c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80018ca:	d020      	beq.n	800190e <CAN_ClearITPendingBit+0x72>
 80018cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80018d0:	d01d      	beq.n	800190e <CAN_ClearITPendingBit+0x72>
 80018d2:	4770      	bx	lr
 80018d4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80018d8:	d013      	beq.n	8001902 <CAN_ClearITPendingBit+0x66>
 80018da:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80018de:	d012      	beq.n	8001906 <CAN_ClearITPendingBit+0x6a>
 80018e0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80018e4:	d115      	bne.n	8001912 <CAN_ClearITPendingBit+0x76>
 80018e6:	e010      	b.n	800190a <CAN_ClearITPendingBit+0x6e>
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <CAN_ClearITPendingBit+0x78>)
 80018ea:	6083      	str	r3, [r0, #8]
 80018ec:	4770      	bx	lr
 80018ee:	2308      	movs	r3, #8
 80018f0:	e000      	b.n	80018f4 <CAN_ClearITPendingBit+0x58>
 80018f2:	2310      	movs	r3, #16
 80018f4:	60c3      	str	r3, [r0, #12]
 80018f6:	4770      	bx	lr
 80018f8:	2308      	movs	r3, #8
 80018fa:	e000      	b.n	80018fe <CAN_ClearITPendingBit+0x62>
 80018fc:	2310      	movs	r3, #16
 80018fe:	6103      	str	r3, [r0, #16]
 8001900:	4770      	bx	lr
 8001902:	2308      	movs	r3, #8
 8001904:	e004      	b.n	8001910 <CAN_ClearITPendingBit+0x74>
 8001906:	2310      	movs	r3, #16
 8001908:	e002      	b.n	8001910 <CAN_ClearITPendingBit+0x74>
 800190a:	2300      	movs	r3, #0
 800190c:	6183      	str	r3, [r0, #24]
 800190e:	2304      	movs	r3, #4
 8001910:	6043      	str	r3, [r0, #4]
 8001912:	4770      	bx	lr
 8001914:	00010101 	.word	0x00010101

08001918 <CEC_DeInit>:
 8001918:	b508      	push	{r3, lr}
 800191a:	2101      	movs	r1, #1
 800191c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001920:	f001 fc28 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8001924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001928:	2100      	movs	r1, #0
 800192a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800192e:	f001 bc21 	b.w	8003174 <RCC_APB1PeriphResetCmd>

08001932 <CEC_Init>:
 8001932:	b510      	push	{r4, lr}
 8001934:	4c05      	ldr	r4, [pc, #20]	; (800194c <CEC_Init+0x1a>)
 8001936:	8842      	ldrh	r2, [r0, #2]
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	f003 01f3 	and.w	r1, r3, #243	; 0xf3
 800193e:	8803      	ldrh	r3, [r0, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	430b      	orrs	r3, r1
 8001944:	b29b      	uxth	r3, r3
 8001946:	6023      	str	r3, [r4, #0]
 8001948:	bd10      	pop	{r4, pc}
 800194a:	bf00      	nop
 800194c:	40007800 	.word	0x40007800

08001950 <CEC_Cmd>:
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <CEC_Cmd+0x10>)
 8001952:	6018      	str	r0, [r3, #0]
 8001954:	b918      	cbnz	r0, 800195e <CEC_Cmd+0xe>
 8001956:	4a03      	ldr	r2, [pc, #12]	; (8001964 <CEC_Cmd+0x14>)
 8001958:	6813      	ldr	r3, [r2, #0]
 800195a:	07db      	lsls	r3, r3, #31
 800195c:	d4fc      	bmi.n	8001958 <CEC_Cmd+0x8>
 800195e:	4770      	bx	lr
 8001960:	420f0000 	.word	0x420f0000
 8001964:	40007800 	.word	0x40007800

08001968 <CEC_ITConfig>:
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <CEC_ITConfig+0x8>)
 800196a:	6018      	str	r0, [r3, #0]
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	420f0004 	.word	0x420f0004

08001974 <CEC_OwnAddressConfig>:
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <CEC_OwnAddressConfig+0x8>)
 8001976:	6058      	str	r0, [r3, #4]
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40007800 	.word	0x40007800

08001980 <CEC_SetPrescaler>:
 8001980:	4b01      	ldr	r3, [pc, #4]	; (8001988 <CEC_SetPrescaler+0x8>)
 8001982:	6098      	str	r0, [r3, #8]
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40007800 	.word	0x40007800

0800198c <CEC_SendDataByte>:
 800198c:	4b01      	ldr	r3, [pc, #4]	; (8001994 <CEC_SendDataByte+0x8>)
 800198e:	6158      	str	r0, [r3, #20]
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40007800 	.word	0x40007800

08001998 <CEC_ReceiveDataByte>:
 8001998:	4b01      	ldr	r3, [pc, #4]	; (80019a0 <CEC_ReceiveDataByte+0x8>)
 800199a:	6998      	ldr	r0, [r3, #24]
 800199c:	b2c0      	uxtb	r0, r0
 800199e:	4770      	bx	lr
 80019a0:	40007800 	.word	0x40007800

080019a4 <CEC_StartOfMessage>:
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <CEC_StartOfMessage+0x8>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	4770      	bx	lr
 80019ac:	420f0200 	.word	0x420f0200

080019b0 <CEC_EndOfMessageCmd>:
 80019b0:	4b01      	ldr	r3, [pc, #4]	; (80019b8 <CEC_EndOfMessageCmd+0x8>)
 80019b2:	6018      	str	r0, [r3, #0]
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	420f0204 	.word	0x420f0204

080019bc <CEC_GetFlagStatus>:
 80019bc:	0f02      	lsrs	r2, r0, #28
 80019be:	bf14      	ite	ne
 80019c0:	4a05      	ldrne	r2, [pc, #20]	; (80019d8 <CEC_GetFlagStatus+0x1c>)
 80019c2:	4a06      	ldreq	r2, [pc, #24]	; (80019dc <CEC_GetFlagStatus+0x20>)
 80019c4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	bf18      	it	ne
 80019cc:	0c1b      	lsrne	r3, r3, #16
 80019ce:	4213      	tst	r3, r2
 80019d0:	bf14      	ite	ne
 80019d2:	2001      	movne	r0, #1
 80019d4:	2000      	moveq	r0, #0
 80019d6:	4770      	bx	lr
 80019d8:	4000780c 	.word	0x4000780c
 80019dc:	40007810 	.word	0x40007810

080019e0 <CEC_ClearFlag>:
 80019e0:	43c0      	mvns	r0, r0
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <CEC_ClearFlag+0x18>)
 80019e4:	f020 0003 	bic.w	r0, r0, #3
 80019e8:	6913      	ldr	r3, [r2, #16]
 80019ea:	6911      	ldr	r1, [r2, #16]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	4303      	orrs	r3, r0
 80019f2:	400b      	ands	r3, r1
 80019f4:	6113      	str	r3, [r2, #16]
 80019f6:	4770      	bx	lr
 80019f8:	40007800 	.word	0x40007800

080019fc <CEC_GetITStatus>:
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <CEC_GetITStatus+0x10>)
 80019fe:	6811      	ldr	r1, [r2, #0]
 8001a00:	6913      	ldr	r3, [r2, #16]
 8001a02:	4018      	ands	r0, r3
 8001a04:	bf18      	it	ne
 8001a06:	f3c1 0040 	ubfxne	r0, r1, #1, #1
 8001a0a:	4770      	bx	lr
 8001a0c:	40007800 	.word	0x40007800

08001a10 <CEC_ClearITPendingBit>:
 8001a10:	43c0      	mvns	r0, r0
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <CEC_ClearITPendingBit+0x18>)
 8001a14:	f020 0003 	bic.w	r0, r0, #3
 8001a18:	6913      	ldr	r3, [r2, #16]
 8001a1a:	6911      	ldr	r1, [r2, #16]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	4303      	orrs	r3, r0
 8001a22:	400b      	ands	r3, r1
 8001a24:	6113      	str	r3, [r2, #16]
 8001a26:	4770      	bx	lr
 8001a28:	40007800 	.word	0x40007800

08001a2c <CRC_ResetDR>:
 8001a2c:	4b01      	ldr	r3, [pc, #4]	; (8001a34 <CRC_ResetDR+0x8>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	4770      	bx	lr
 8001a34:	40023000 	.word	0x40023000

08001a38 <CRC_CalcCRC>:
 8001a38:	4b01      	ldr	r3, [pc, #4]	; (8001a40 <CRC_CalcCRC+0x8>)
 8001a3a:	6018      	str	r0, [r3, #0]
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	4770      	bx	lr
 8001a40:	40023000 	.word	0x40023000

08001a44 <CRC_CalcBlockCRC>:
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <CRC_CalcBlockCRC+0x18>)
 8001a46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001a4a:	4288      	cmp	r0, r1
 8001a4c:	d003      	beq.n	8001a56 <CRC_CalcBlockCRC+0x12>
 8001a4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e7f9      	b.n	8001a4a <CRC_CalcBlockCRC+0x6>
 8001a56:	4b01      	ldr	r3, [pc, #4]	; (8001a5c <CRC_CalcBlockCRC+0x18>)
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	4770      	bx	lr
 8001a5c:	40023000 	.word	0x40023000

08001a60 <CRC_GetCRC>:
 8001a60:	4b01      	ldr	r3, [pc, #4]	; (8001a68 <CRC_GetCRC+0x8>)
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023000 	.word	0x40023000

08001a6c <CRC_SetIDRegister>:
 8001a6c:	4b01      	ldr	r3, [pc, #4]	; (8001a74 <CRC_SetIDRegister+0x8>)
 8001a6e:	7118      	strb	r0, [r3, #4]
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40023000 	.word	0x40023000

08001a78 <CRC_GetIDRegister>:
 8001a78:	4b01      	ldr	r3, [pc, #4]	; (8001a80 <CRC_GetIDRegister+0x8>)
 8001a7a:	7918      	ldrb	r0, [r3, #4]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40023000 	.word	0x40023000

08001a84 <DAC_DeInit>:
 8001a84:	b508      	push	{r3, lr}
 8001a86:	2101      	movs	r1, #1
 8001a88:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001a8c:	f001 fb72 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8001a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001a94:	2100      	movs	r1, #0
 8001a96:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001a9a:	f001 bb6b 	b.w	8003174 <RCC_APB1PeriphResetCmd>

08001a9e <DAC_Init>:
 8001a9e:	f640 73fe 	movw	r3, #4094	; 0xffe
 8001aa2:	b530      	push	{r4, r5, lr}
 8001aa4:	4d08      	ldr	r5, [pc, #32]	; (8001ac8 <DAC_Init+0x2a>)
 8001aa6:	4083      	lsls	r3, r0
 8001aa8:	682a      	ldr	r2, [r5, #0]
 8001aaa:	ea22 0303 	bic.w	r3, r2, r3
 8001aae:	e891 0014 	ldmia.w	r1, {r2, r4}
 8001ab2:	4314      	orrs	r4, r2
 8001ab4:	688a      	ldr	r2, [r1, #8]
 8001ab6:	4314      	orrs	r4, r2
 8001ab8:	68ca      	ldr	r2, [r1, #12]
 8001aba:	4322      	orrs	r2, r4
 8001abc:	fa02 f000 	lsl.w	r0, r2, r0
 8001ac0:	4318      	orrs	r0, r3
 8001ac2:	6028      	str	r0, [r5, #0]
 8001ac4:	bd30      	pop	{r4, r5, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40007400 	.word	0x40007400

08001acc <DAC_StructInit>:
 8001acc:	2300      	movs	r3, #0
 8001ace:	6003      	str	r3, [r0, #0]
 8001ad0:	6043      	str	r3, [r0, #4]
 8001ad2:	6083      	str	r3, [r0, #8]
 8001ad4:	60c3      	str	r3, [r0, #12]
 8001ad6:	4770      	bx	lr

08001ad8 <DAC_Cmd>:
 8001ad8:	4a06      	ldr	r2, [pc, #24]	; (8001af4 <DAC_Cmd+0x1c>)
 8001ada:	2301      	movs	r3, #1
 8001adc:	b119      	cbz	r1, 8001ae6 <DAC_Cmd+0xe>
 8001ade:	6811      	ldr	r1, [r2, #0]
 8001ae0:	4083      	lsls	r3, r0
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	e003      	b.n	8001aee <DAC_Cmd+0x16>
 8001ae6:	6811      	ldr	r1, [r2, #0]
 8001ae8:	4083      	lsls	r3, r0
 8001aea:	ea21 0303 	bic.w	r3, r1, r3
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007400 	.word	0x40007400

08001af8 <DAC_DMACmd>:
 8001af8:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <DAC_DMACmd+0x1c>)
 8001afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afe:	b119      	cbz	r1, 8001b08 <DAC_DMACmd+0x10>
 8001b00:	6811      	ldr	r1, [r2, #0]
 8001b02:	4083      	lsls	r3, r0
 8001b04:	430b      	orrs	r3, r1
 8001b06:	e003      	b.n	8001b10 <DAC_DMACmd+0x18>
 8001b08:	6811      	ldr	r1, [r2, #0]
 8001b0a:	4083      	lsls	r3, r0
 8001b0c:	ea21 0303 	bic.w	r3, r1, r3
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4770      	bx	lr
 8001b14:	40007400 	.word	0x40007400

08001b18 <DAC_SoftwareTriggerCmd>:
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <DAC_SoftwareTriggerCmd+0x1c>)
 8001b1a:	0900      	lsrs	r0, r0, #4
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	b119      	cbz	r1, 8001b28 <DAC_SoftwareTriggerCmd+0x10>
 8001b20:	6851      	ldr	r1, [r2, #4]
 8001b22:	4083      	lsls	r3, r0
 8001b24:	430b      	orrs	r3, r1
 8001b26:	e003      	b.n	8001b30 <DAC_SoftwareTriggerCmd+0x18>
 8001b28:	6851      	ldr	r1, [r2, #4]
 8001b2a:	4083      	lsls	r3, r0
 8001b2c:	ea21 0303 	bic.w	r3, r1, r3
 8001b30:	6053      	str	r3, [r2, #4]
 8001b32:	4770      	bx	lr
 8001b34:	40007400 	.word	0x40007400

08001b38 <DAC_DualSoftwareTriggerCmd>:
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <DAC_DualSoftwareTriggerCmd+0x14>)
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	b110      	cbz	r0, 8001b44 <DAC_DualSoftwareTriggerCmd+0xc>
 8001b3e:	f042 0203 	orr.w	r2, r2, #3
 8001b42:	e001      	b.n	8001b48 <DAC_DualSoftwareTriggerCmd+0x10>
 8001b44:	f022 0203 	bic.w	r2, r2, #3
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	4770      	bx	lr
 8001b4c:	40007400 	.word	0x40007400

08001b50 <DAC_WaveGenerationCmd>:
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <DAC_WaveGenerationCmd+0x18>)
 8001b52:	4081      	lsls	r1, r0
 8001b54:	b112      	cbz	r2, 8001b5c <DAC_WaveGenerationCmd+0xc>
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4311      	orrs	r1, r2
 8001b5a:	e002      	b.n	8001b62 <DAC_WaveGenerationCmd+0x12>
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	ea22 0101 	bic.w	r1, r2, r1
 8001b62:	6019      	str	r1, [r3, #0]
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40007400 	.word	0x40007400

08001b6c <DAC_SetChannel1Data>:
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	2300      	movs	r3, #0
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <DAC_SetChannel1Data+0x1c>)
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	9b01      	ldr	r3, [sp, #4]
 8001b78:	3308      	adds	r3, #8
 8001b7a:	4418      	add	r0, r3
 8001b7c:	9001      	str	r0, [sp, #4]
 8001b7e:	9b01      	ldr	r3, [sp, #4]
 8001b80:	6019      	str	r1, [r3, #0]
 8001b82:	b002      	add	sp, #8
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40007400 	.word	0x40007400

08001b8c <DAC_SetChannel2Data>:
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <DAC_SetChannel2Data+0x1c>)
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	3314      	adds	r3, #20
 8001b9a:	4418      	add	r0, r3
 8001b9c:	9001      	str	r0, [sp, #4]
 8001b9e:	9b01      	ldr	r3, [sp, #4]
 8001ba0:	6019      	str	r1, [r3, #0]
 8001ba2:	b002      	add	sp, #8
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40007400 	.word	0x40007400

08001bac <DAC_SetDualChannelData>:
 8001bac:	2808      	cmp	r0, #8
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <DAC_SetDualChannelData+0x14>)
 8001bb0:	bf0c      	ite	eq
 8001bb2:	ea42 2201 	orreq.w	r2, r2, r1, lsl #8
 8001bb6:	ea42 4201 	orrne.w	r2, r2, r1, lsl #16
 8001bba:	50c2      	str	r2, [r0, r3]
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007420 	.word	0x40007420

08001bc4 <DAC_GetDataOutputValue>:
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <DAC_GetDataOutputValue+0x20>)
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	9b01      	ldr	r3, [sp, #4]
 8001bd0:	332c      	adds	r3, #44	; 0x2c
 8001bd2:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8001bd6:	9001      	str	r0, [sp, #4]
 8001bd8:	9b01      	ldr	r3, [sp, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	b280      	uxth	r0, r0
 8001bde:	b002      	add	sp, #8
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40007400 	.word	0x40007400

08001be8 <DMA_DeInit>:
 8001be8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001bec:	6802      	ldr	r2, [r0, #0]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	6003      	str	r3, [r0, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	6003      	str	r3, [r0, #0]
 8001bf6:	6043      	str	r3, [r0, #4]
 8001bf8:	6083      	str	r3, [r0, #8]
 8001bfa:	60c3      	str	r3, [r0, #12]
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <DMA_DeInit+0xb8>)
 8001bfe:	4298      	cmp	r0, r3
 8001c00:	d101      	bne.n	8001c06 <DMA_DeInit+0x1e>
 8001c02:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <DMA_DeInit+0xbc>)
 8001c04:	e027      	b.n	8001c56 <DMA_DeInit+0x6e>
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <DMA_DeInit+0xc0>)
 8001c08:	4298      	cmp	r0, r3
 8001c0a:	d101      	bne.n	8001c10 <DMA_DeInit+0x28>
 8001c0c:	4a25      	ldr	r2, [pc, #148]	; (8001ca4 <DMA_DeInit+0xbc>)
 8001c0e:	e02a      	b.n	8001c66 <DMA_DeInit+0x7e>
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <DMA_DeInit+0xc4>)
 8001c12:	4298      	cmp	r0, r3
 8001c14:	d101      	bne.n	8001c1a <DMA_DeInit+0x32>
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <DMA_DeInit+0xbc>)
 8001c18:	e02d      	b.n	8001c76 <DMA_DeInit+0x8e>
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <DMA_DeInit+0xc8>)
 8001c1c:	4298      	cmp	r0, r3
 8001c1e:	d101      	bne.n	8001c24 <DMA_DeInit+0x3c>
 8001c20:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <DMA_DeInit+0xbc>)
 8001c22:	e030      	b.n	8001c86 <DMA_DeInit+0x9e>
 8001c24:	4b23      	ldr	r3, [pc, #140]	; (8001cb4 <DMA_DeInit+0xcc>)
 8001c26:	4298      	cmp	r0, r3
 8001c28:	d101      	bne.n	8001c2e <DMA_DeInit+0x46>
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <DMA_DeInit+0xbc>)
 8001c2c:	e033      	b.n	8001c96 <DMA_DeInit+0xae>
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <DMA_DeInit+0xd0>)
 8001c30:	4298      	cmp	r0, r3
 8001c32:	d104      	bne.n	8001c3e <DMA_DeInit+0x56>
 8001c34:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <DMA_DeInit+0xbc>)
 8001c36:	6853      	ldr	r3, [r2, #4]
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3c:	e02e      	b.n	8001c9c <DMA_DeInit+0xb4>
 8001c3e:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <DMA_DeInit+0xd4>)
 8001c40:	4298      	cmp	r0, r3
 8001c42:	d104      	bne.n	8001c4e <DMA_DeInit+0x66>
 8001c44:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <DMA_DeInit+0xbc>)
 8001c46:	6853      	ldr	r3, [r2, #4]
 8001c48:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001c4c:	e026      	b.n	8001c9c <DMA_DeInit+0xb4>
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <DMA_DeInit+0xd8>)
 8001c50:	4298      	cmp	r0, r3
 8001c52:	d104      	bne.n	8001c5e <DMA_DeInit+0x76>
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <DMA_DeInit+0xdc>)
 8001c56:	6853      	ldr	r3, [r2, #4]
 8001c58:	f043 030f 	orr.w	r3, r3, #15
 8001c5c:	e01e      	b.n	8001c9c <DMA_DeInit+0xb4>
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <DMA_DeInit+0xe0>)
 8001c60:	4298      	cmp	r0, r3
 8001c62:	d104      	bne.n	8001c6e <DMA_DeInit+0x86>
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <DMA_DeInit+0xdc>)
 8001c66:	6853      	ldr	r3, [r2, #4]
 8001c68:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001c6c:	e016      	b.n	8001c9c <DMA_DeInit+0xb4>
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <DMA_DeInit+0xe4>)
 8001c70:	4298      	cmp	r0, r3
 8001c72:	d104      	bne.n	8001c7e <DMA_DeInit+0x96>
 8001c74:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <DMA_DeInit+0xdc>)
 8001c76:	6853      	ldr	r3, [r2, #4]
 8001c78:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8001c7c:	e00e      	b.n	8001c9c <DMA_DeInit+0xb4>
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <DMA_DeInit+0xe8>)
 8001c80:	4298      	cmp	r0, r3
 8001c82:	d104      	bne.n	8001c8e <DMA_DeInit+0xa6>
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <DMA_DeInit+0xdc>)
 8001c86:	6853      	ldr	r3, [r2, #4]
 8001c88:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8001c8c:	e006      	b.n	8001c9c <DMA_DeInit+0xb4>
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <DMA_DeInit+0xec>)
 8001c90:	4298      	cmp	r0, r3
 8001c92:	d104      	bne.n	8001c9e <DMA_DeInit+0xb6>
 8001c94:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <DMA_DeInit+0xdc>)
 8001c96:	6853      	ldr	r3, [r2, #4]
 8001c98:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8001c9c:	6053      	str	r3, [r2, #4]
 8001c9e:	4770      	bx	lr
 8001ca0:	40020008 	.word	0x40020008
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	4002001c 	.word	0x4002001c
 8001cac:	40020030 	.word	0x40020030
 8001cb0:	40020044 	.word	0x40020044
 8001cb4:	40020058 	.word	0x40020058
 8001cb8:	4002006c 	.word	0x4002006c
 8001cbc:	40020080 	.word	0x40020080
 8001cc0:	40020408 	.word	0x40020408
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	4002041c 	.word	0x4002041c
 8001ccc:	40020430 	.word	0x40020430
 8001cd0:	40020444 	.word	0x40020444
 8001cd4:	40020458 	.word	0x40020458

08001cd8 <DMA_Init>:
 8001cd8:	6a0a      	ldr	r2, [r1, #32]
 8001cda:	b510      	push	{r4, lr}
 8001cdc:	688c      	ldr	r4, [r1, #8]
 8001cde:	6803      	ldr	r3, [r0, #0]
 8001ce0:	4314      	orrs	r4, r2
 8001ce2:	690a      	ldr	r2, [r1, #16]
 8001ce4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ce8:	4314      	orrs	r4, r2
 8001cea:	694a      	ldr	r2, [r1, #20]
 8001cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf0:	4314      	orrs	r4, r2
 8001cf2:	698a      	ldr	r2, [r1, #24]
 8001cf4:	4314      	orrs	r4, r2
 8001cf6:	69ca      	ldr	r2, [r1, #28]
 8001cf8:	4314      	orrs	r4, r2
 8001cfa:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001cfc:	4314      	orrs	r4, r2
 8001cfe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001d00:	4322      	orrs	r2, r4
 8001d02:	4313      	orrs	r3, r2
 8001d04:	6003      	str	r3, [r0, #0]
 8001d06:	68cb      	ldr	r3, [r1, #12]
 8001d08:	6043      	str	r3, [r0, #4]
 8001d0a:	680b      	ldr	r3, [r1, #0]
 8001d0c:	6083      	str	r3, [r0, #8]
 8001d0e:	684b      	ldr	r3, [r1, #4]
 8001d10:	60c3      	str	r3, [r0, #12]
 8001d12:	bd10      	pop	{r4, pc}

08001d14 <DMA_StructInit>:
 8001d14:	2300      	movs	r3, #0
 8001d16:	6003      	str	r3, [r0, #0]
 8001d18:	6043      	str	r3, [r0, #4]
 8001d1a:	6083      	str	r3, [r0, #8]
 8001d1c:	60c3      	str	r3, [r0, #12]
 8001d1e:	6103      	str	r3, [r0, #16]
 8001d20:	6143      	str	r3, [r0, #20]
 8001d22:	6183      	str	r3, [r0, #24]
 8001d24:	61c3      	str	r3, [r0, #28]
 8001d26:	6203      	str	r3, [r0, #32]
 8001d28:	6243      	str	r3, [r0, #36]	; 0x24
 8001d2a:	6283      	str	r3, [r0, #40]	; 0x28
 8001d2c:	4770      	bx	lr

08001d2e <DMA_Cmd>:
 8001d2e:	b119      	cbz	r1, 8001d38 <DMA_Cmd+0xa>
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	e003      	b.n	8001d40 <DMA_Cmd+0x12>
 8001d38:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001d3c:	6802      	ldr	r2, [r0, #0]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	6003      	str	r3, [r0, #0]
 8001d42:	4770      	bx	lr

08001d44 <DMA_ITConfig>:
 8001d44:	6803      	ldr	r3, [r0, #0]
 8001d46:	b10a      	cbz	r2, 8001d4c <DMA_ITConfig+0x8>
 8001d48:	4319      	orrs	r1, r3
 8001d4a:	e001      	b.n	8001d50 <DMA_ITConfig+0xc>
 8001d4c:	ea23 0101 	bic.w	r1, r3, r1
 8001d50:	6001      	str	r1, [r0, #0]
 8001d52:	4770      	bx	lr

08001d54 <DMA_SetCurrDataCounter>:
 8001d54:	6041      	str	r1, [r0, #4]
 8001d56:	4770      	bx	lr

08001d58 <DMA_GetCurrDataCounter>:
 8001d58:	6840      	ldr	r0, [r0, #4]
 8001d5a:	b280      	uxth	r0, r0
 8001d5c:	4770      	bx	lr

08001d5e <DMA_GetITStatus>:
 8001d5e:	00c3      	lsls	r3, r0, #3
 8001d60:	bf4c      	ite	mi
 8001d62:	4b04      	ldrmi	r3, [pc, #16]	; (8001d74 <DMA_GetITStatus+0x16>)
 8001d64:	4b04      	ldrpl	r3, [pc, #16]	; (8001d78 <DMA_GetITStatus+0x1a>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4203      	tst	r3, r0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2001      	movne	r0, #1
 8001d6e:	2000      	moveq	r0, #0
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020000 	.word	0x40020000

08001d7c <DMA_GetFlagStatus>:
 8001d7c:	f7ff bfef 	b.w	8001d5e <DMA_GetITStatus>

08001d80 <DMA_ClearITPendingBit>:
 8001d80:	00c3      	lsls	r3, r0, #3
 8001d82:	bf4c      	ite	mi
 8001d84:	4b01      	ldrmi	r3, [pc, #4]	; (8001d8c <DMA_ClearITPendingBit+0xc>)
 8001d86:	4b02      	ldrpl	r3, [pc, #8]	; (8001d90 <DMA_ClearITPendingBit+0x10>)
 8001d88:	6058      	str	r0, [r3, #4]
 8001d8a:	4770      	bx	lr
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020000 	.word	0x40020000

08001d94 <DMA_ClearFlag>:
 8001d94:	f7ff bff4 	b.w	8001d80 <DMA_ClearITPendingBit>

08001d98 <EXTI_DeInit>:
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <EXTI_DeInit+0x14>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	4a02      	ldr	r2, [pc, #8]	; (8001db0 <EXTI_DeInit+0x18>)
 8001da6:	615a      	str	r2, [r3, #20]
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40010400 	.word	0x40010400
 8001db0:	000fffff 	.word	0x000fffff

08001db4 <EXTI_Init>:
 8001db4:	7982      	ldrb	r2, [r0, #6]
 8001db6:	b570      	push	{r4, r5, r6, lr}
 8001db8:	6801      	ldr	r1, [r0, #0]
 8001dba:	7903      	ldrb	r3, [r0, #4]
 8001dbc:	b342      	cbz	r2, 8001e10 <EXTI_Init+0x5c>
 8001dbe:	43ce      	mvns	r6, r1
 8001dc0:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <EXTI_Init+0x70>)
 8001dc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001dc6:	6815      	ldr	r5, [r2, #0]
 8001dc8:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001dcc:	4035      	ands	r5, r6
 8001dce:	6015      	str	r5, [r2, #0]
 8001dd0:	6854      	ldr	r4, [r2, #4]
 8001dd2:	4034      	ands	r4, r6
 8001dd4:	6054      	str	r4, [r2, #4]
 8001dd6:	681c      	ldr	r4, [r3, #0]
 8001dd8:	4321      	orrs	r1, r4
 8001dda:	6019      	str	r1, [r3, #0]
 8001ddc:	6801      	ldr	r1, [r0, #0]
 8001dde:	6894      	ldr	r4, [r2, #8]
 8001de0:	43cd      	mvns	r5, r1
 8001de2:	402c      	ands	r4, r5
 8001de4:	6094      	str	r4, [r2, #8]
 8001de6:	68d3      	ldr	r3, [r2, #12]
 8001de8:	402b      	ands	r3, r5
 8001dea:	60d3      	str	r3, [r2, #12]
 8001dec:	7943      	ldrb	r3, [r0, #5]
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d106      	bne.n	8001e00 <EXTI_Init+0x4c>
 8001df2:	6893      	ldr	r3, [r2, #8]
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6093      	str	r3, [r2, #8]
 8001df8:	68d3      	ldr	r3, [r2, #12]
 8001dfa:	4319      	orrs	r1, r3
 8001dfc:	60d1      	str	r1, [r2, #12]
 8001dfe:	bd70      	pop	{r4, r5, r6, pc}
 8001e00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e04:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	6019      	str	r1, [r3, #0]
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
 8001e10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e14:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	ea22 0201 	bic.w	r2, r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	bd70      	pop	{r4, r5, r6, pc}
 8001e22:	bf00      	nop
 8001e24:	40010400 	.word	0x40010400

08001e28 <EXTI_StructInit>:
 8001e28:	2300      	movs	r3, #0
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	6003      	str	r3, [r0, #0]
 8001e2e:	7103      	strb	r3, [r0, #4]
 8001e30:	7142      	strb	r2, [r0, #5]
 8001e32:	7183      	strb	r3, [r0, #6]
 8001e34:	4770      	bx	lr

08001e36 <EXTI_GenerateSWInterrupt>:
 8001e36:	4a02      	ldr	r2, [pc, #8]	; (8001e40 <EXTI_GenerateSWInterrupt+0xa>)
 8001e38:	6913      	ldr	r3, [r2, #16]
 8001e3a:	4318      	orrs	r0, r3
 8001e3c:	6110      	str	r0, [r2, #16]
 8001e3e:	4770      	bx	lr
 8001e40:	40010400 	.word	0x40010400

08001e44 <EXTI_GetFlagStatus>:
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <EXTI_GetFlagStatus+0x10>)
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	4203      	tst	r3, r0
 8001e4a:	bf14      	ite	ne
 8001e4c:	2001      	movne	r0, #1
 8001e4e:	2000      	moveq	r0, #0
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40010400 	.word	0x40010400

08001e58 <EXTI_ClearFlag>:
 8001e58:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <EXTI_ClearFlag+0x8>)
 8001e5a:	6158      	str	r0, [r3, #20]
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010400 	.word	0x40010400

08001e64 <EXTI_GetITStatus>:
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <EXTI_GetITStatus+0x18>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4003      	ands	r3, r0
 8001e6c:	d004      	beq.n	8001e78 <EXTI_GetITStatus+0x14>
 8001e6e:	4202      	tst	r2, r0
 8001e70:	bf14      	ite	ne
 8001e72:	2001      	movne	r0, #1
 8001e74:	2000      	moveq	r0, #0
 8001e76:	4770      	bx	lr
 8001e78:	4618      	mov	r0, r3
 8001e7a:	4770      	bx	lr
 8001e7c:	40010400 	.word	0x40010400

08001e80 <EXTI_ClearITPendingBit>:
 8001e80:	4b01      	ldr	r3, [pc, #4]	; (8001e88 <EXTI_ClearITPendingBit+0x8>)
 8001e82:	6158      	str	r0, [r3, #20]
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40010400 	.word	0x40010400

08001e8c <FLASH_SetLatency>:
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <FLASH_SetLatency+0x10>)
 8001e8e:	6813      	ldr	r3, [r2, #0]
 8001e90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e94:	4318      	orrs	r0, r3
 8001e96:	6010      	str	r0, [r2, #0]
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40022000 	.word	0x40022000

08001ea0 <FLASH_HalfCycleAccessCmd>:
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <FLASH_HalfCycleAccessCmd+0x14>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	f022 0208 	bic.w	r2, r2, #8
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4310      	orrs	r0, r2
 8001eae:	6018      	str	r0, [r3, #0]
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <FLASH_PrefetchBufferCmd>:
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <FLASH_PrefetchBufferCmd+0x14>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f022 0210 	bic.w	r2, r2, #16
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4310      	orrs	r0, r2
 8001ec6:	6018      	str	r0, [r3, #0]
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40022000 	.word	0x40022000

08001ed0 <FLASH_UnlockBank1>:
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <FLASH_UnlockBank1+0x10>)
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <FLASH_UnlockBank1+0x14>)
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	45670123 	.word	0x45670123

08001ee8 <FLASH_Unlock>:
 8001ee8:	f7ff bff2 	b.w	8001ed0 <FLASH_UnlockBank1>

08001eec <FLASH_LockBank1>:
 8001eec:	4a02      	ldr	r2, [pc, #8]	; (8001ef8 <FLASH_LockBank1+0xc>)
 8001eee:	6913      	ldr	r3, [r2, #16]
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef4:	6113      	str	r3, [r2, #16]
 8001ef6:	4770      	bx	lr
 8001ef8:	40022000 	.word	0x40022000

08001efc <FLASH_Lock>:
 8001efc:	f7ff bff6 	b.w	8001eec <FLASH_LockBank1>

08001f00 <FLASH_GetUserOptionByte>:
 8001f00:	4b01      	ldr	r3, [pc, #4]	; (8001f08 <FLASH_GetUserOptionByte+0x8>)
 8001f02:	69d8      	ldr	r0, [r3, #28]
 8001f04:	0880      	lsrs	r0, r0, #2
 8001f06:	4770      	bx	lr
 8001f08:	40022000 	.word	0x40022000

08001f0c <FLASH_GetWriteProtectionOptionByte>:
 8001f0c:	4b01      	ldr	r3, [pc, #4]	; (8001f14 <FLASH_GetWriteProtectionOptionByte+0x8>)
 8001f0e:	6a18      	ldr	r0, [r3, #32]
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40022000 	.word	0x40022000

08001f18 <FLASH_GetReadOutProtectionStatus>:
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <FLASH_GetReadOutProtectionStatus+0xc>)
 8001f1a:	69d8      	ldr	r0, [r3, #28]
 8001f1c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000

08001f28 <FLASH_GetPrefetchBufferStatus>:
 8001f28:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <FLASH_GetPrefetchBufferStatus+0xc>)
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000

08001f38 <FLASH_ITConfig>:
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <FLASH_ITConfig+0x14>)
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	b109      	cbz	r1, 8001f42 <FLASH_ITConfig+0xa>
 8001f3e:	4310      	orrs	r0, r2
 8001f40:	e001      	b.n	8001f46 <FLASH_ITConfig+0xe>
 8001f42:	ea22 0000 	bic.w	r0, r2, r0
 8001f46:	6118      	str	r0, [r3, #16]
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000

08001f50 <FLASH_GetFlagStatus>:
 8001f50:	2801      	cmp	r0, #1
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <FLASH_GetFlagStatus+0x1c>)
 8001f54:	d103      	bne.n	8001f5e <FLASH_GetFlagStatus+0xe>
 8001f56:	69d8      	ldr	r0, [r3, #28]
 8001f58:	f000 0001 	and.w	r0, r0, #1
 8001f5c:	4770      	bx	lr
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4218      	tst	r0, r3
 8001f62:	bf14      	ite	ne
 8001f64:	2001      	movne	r0, #1
 8001f66:	2000      	moveq	r0, #0
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40022000 	.word	0x40022000

08001f70 <FLASH_ClearFlag>:
 8001f70:	4b01      	ldr	r3, [pc, #4]	; (8001f78 <FLASH_ClearFlag+0x8>)
 8001f72:	60d8      	str	r0, [r3, #12]
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000

08001f7c <FLASH_GetStatus>:
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <FLASH_GetStatus+0x24>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	07d1      	lsls	r1, r2, #31
 8001f82:	d409      	bmi.n	8001f98 <FLASH_GetStatus+0x1c>
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	0752      	lsls	r2, r2, #29
 8001f88:	d408      	bmi.n	8001f9c <FLASH_GetStatus+0x20>
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f013 0f10 	tst.w	r3, #16
 8001f90:	bf14      	ite	ne
 8001f92:	2003      	movne	r0, #3
 8001f94:	2004      	moveq	r0, #4
 8001f96:	4770      	bx	lr
 8001f98:	2001      	movs	r0, #1
 8001f9a:	4770      	bx	lr
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	4770      	bx	lr
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <FLASH_GetBank1Status>:
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <FLASH_GetBank1Status+0x24>)
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	07d1      	lsls	r1, r2, #31
 8001faa:	d409      	bmi.n	8001fc0 <FLASH_GetBank1Status+0x1c>
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	0752      	lsls	r2, r2, #29
 8001fb0:	d408      	bmi.n	8001fc4 <FLASH_GetBank1Status+0x20>
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f013 0f10 	tst.w	r3, #16
 8001fb8:	bf14      	ite	ne
 8001fba:	2003      	movne	r0, #3
 8001fbc:	2004      	moveq	r0, #4
 8001fbe:	4770      	bx	lr
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	4770      	bx	lr
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	4770      	bx	lr
 8001fc8:	40022000 	.word	0x40022000

08001fcc <FLASH_WaitForLastBank1Operation>:
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	4604      	mov	r4, r0
 8001fd0:	f7ff ffe8 	bl	8001fa4 <FLASH_GetBank1Status>
 8001fd4:	2801      	cmp	r0, #1
 8001fd6:	d106      	bne.n	8001fe6 <FLASH_WaitForLastBank1Operation+0x1a>
 8001fd8:	b11c      	cbz	r4, 8001fe2 <FLASH_WaitForLastBank1Operation+0x16>
 8001fda:	f7ff ffe3 	bl	8001fa4 <FLASH_GetBank1Status>
 8001fde:	3c01      	subs	r4, #1
 8001fe0:	e7f8      	b.n	8001fd4 <FLASH_WaitForLastBank1Operation+0x8>
 8001fe2:	2005      	movs	r0, #5
 8001fe4:	bd10      	pop	{r4, pc}
 8001fe6:	2c00      	cmp	r4, #0
 8001fe8:	bf08      	it	eq
 8001fea:	2005      	moveq	r0, #5
 8001fec:	bd10      	pop	{r4, pc}

08001fee <FLASH_EraseAllBank1Pages>:
 8001fee:	b510      	push	{r4, lr}
 8001ff0:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001ff4:	f7ff ffea 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8001ff8:	2804      	cmp	r0, #4
 8001ffa:	d111      	bne.n	8002020 <FLASH_EraseAllBank1Pages+0x32>
 8001ffc:	4c09      	ldr	r4, [pc, #36]	; (8002024 <FLASH_EraseAllBank1Pages+0x36>)
 8001ffe:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002002:	6923      	ldr	r3, [r4, #16]
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6123      	str	r3, [r4, #16]
 800200a:	6923      	ldr	r3, [r4, #16]
 800200c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002010:	6123      	str	r3, [r4, #16]
 8002012:	f7ff ffdb 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002016:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 800201a:	6922      	ldr	r2, [r4, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	6123      	str	r3, [r4, #16]
 8002020:	bd10      	pop	{r4, pc}
 8002022:	bf00      	nop
 8002024:	40022000 	.word	0x40022000

08002028 <FLASH_EraseAllPages>:
 8002028:	f7ff bfe1 	b.w	8001fee <FLASH_EraseAllBank1Pages>

0800202c <FLASH_UserOptionByteConfig>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	4d13      	ldr	r5, [pc, #76]	; (800207c <FLASH_UserOptionByteConfig+0x50>)
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <FLASH_UserOptionByteConfig+0x54>)
 8002032:	4604      	mov	r4, r0
 8002034:	60ab      	str	r3, [r5, #8]
 8002036:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800203a:	60ab      	str	r3, [r5, #8]
 800203c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002040:	460f      	mov	r7, r1
 8002042:	4616      	mov	r6, r2
 8002044:	f7ff ffc2 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002048:	2804      	cmp	r0, #4
 800204a:	d116      	bne.n	800207a <FLASH_UserOptionByteConfig+0x4e>
 800204c:	692b      	ldr	r3, [r5, #16]
 800204e:	f044 04f8 	orr.w	r4, r4, #248	; 0xf8
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	612b      	str	r3, [r5, #16]
 8002058:	ea47 0104 	orr.w	r1, r7, r4
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <FLASH_UserOptionByteConfig+0x58>)
 800205e:	ea46 0201 	orr.w	r2, r6, r1
 8002062:	805a      	strh	r2, [r3, #2]
 8002064:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002068:	f7ff ffb0 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 800206c:	2805      	cmp	r0, #5
 800206e:	bf1f      	itttt	ne
 8002070:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8002074:	692a      	ldrne	r2, [r5, #16]
 8002076:	4013      	andne	r3, r2
 8002078:	612b      	strne	r3, [r5, #16]
 800207a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800207c:	40022000 	.word	0x40022000
 8002080:	45670123 	.word	0x45670123
 8002084:	1ffff800 	.word	0x1ffff800

08002088 <FLASH_ReadOutProtection>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	4605      	mov	r5, r0
 800208c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002090:	f7ff ff9c 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002094:	2804      	cmp	r0, #4
 8002096:	d136      	bne.n	8002106 <FLASH_ReadOutProtection+0x7e>
 8002098:	4c1b      	ldr	r4, [pc, #108]	; (8002108 <FLASH_ReadOutProtection+0x80>)
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <FLASH_ReadOutProtection+0x84>)
 800209c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80020a0:	60a3      	str	r3, [r4, #8]
 80020a2:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80020a6:	60a3      	str	r3, [r4, #8]
 80020a8:	6923      	ldr	r3, [r4, #16]
 80020aa:	f043 0320 	orr.w	r3, r3, #32
 80020ae:	6123      	str	r3, [r4, #16]
 80020b0:	6923      	ldr	r3, [r4, #16]
 80020b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b6:	6123      	str	r3, [r4, #16]
 80020b8:	f7ff ff88 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 80020bc:	2804      	cmp	r0, #4
 80020be:	d11b      	bne.n	80020f8 <FLASH_ReadOutProtection+0x70>
 80020c0:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80020c4:	6922      	ldr	r2, [r4, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	6123      	str	r3, [r4, #16]
 80020ca:	6923      	ldr	r3, [r4, #16]
 80020cc:	f043 0310 	orr.w	r3, r3, #16
 80020d0:	6123      	str	r3, [r4, #16]
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <FLASH_ReadOutProtection+0x88>)
 80020d4:	b10d      	cbz	r5, 80020da <FLASH_ReadOutProtection+0x52>
 80020d6:	2200      	movs	r2, #0
 80020d8:	e000      	b.n	80020dc <FLASH_ReadOutProtection+0x54>
 80020da:	22a5      	movs	r2, #165	; 0xa5
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80020e2:	f7ff ff73 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 80020e6:	2805      	cmp	r0, #5
 80020e8:	d00d      	beq.n	8002106 <FLASH_ReadOutProtection+0x7e>
 80020ea:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80020ee:	4a06      	ldr	r2, [pc, #24]	; (8002108 <FLASH_ReadOutProtection+0x80>)
 80020f0:	6911      	ldr	r1, [r2, #16]
 80020f2:	400b      	ands	r3, r1
 80020f4:	6113      	str	r3, [r2, #16]
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
 80020f8:	2805      	cmp	r0, #5
 80020fa:	bf1f      	itttt	ne
 80020fc:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8002100:	6922      	ldrne	r2, [r4, #16]
 8002102:	4013      	andne	r3, r2
 8002104:	6123      	strne	r3, [r4, #16]
 8002106:	bd38      	pop	{r3, r4, r5, pc}
 8002108:	40022000 	.word	0x40022000
 800210c:	45670123 	.word	0x45670123
 8002110:	1ffff800 	.word	0x1ffff800

08002114 <FLASH_EnableWriteProtection>:
 8002114:	b510      	push	{r4, lr}
 8002116:	4604      	mov	r4, r0
 8002118:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800211c:	f7ff ff56 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002120:	2804      	cmp	r0, #4
 8002122:	d143      	bne.n	80021ac <FLASH_EnableWriteProtection+0x98>
 8002124:	43e4      	mvns	r4, r4
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <FLASH_EnableWriteProtection+0x9c>)
 8002128:	4a22      	ldr	r2, [pc, #136]	; (80021b4 <FLASH_EnableWriteProtection+0xa0>)
 800212a:	b2e1      	uxtb	r1, r4
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	29ff      	cmp	r1, #255	; 0xff
 8002138:	f042 0210 	orr.w	r2, r2, #16
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	d104      	bne.n	800214a <FLASH_EnableWriteProtection+0x36>
 8002140:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8002144:	2bff      	cmp	r3, #255	; 0xff
 8002146:	d109      	bne.n	800215c <FLASH_EnableWriteProtection+0x48>
 8002148:	e010      	b.n	800216c <FLASH_EnableWriteProtection+0x58>
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <FLASH_EnableWriteProtection+0xa4>)
 800214c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002150:	8119      	strh	r1, [r3, #8]
 8002152:	f7ff ff3b 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002156:	2804      	cmp	r0, #4
 8002158:	d120      	bne.n	800219c <FLASH_EnableWriteProtection+0x88>
 800215a:	e7f1      	b.n	8002140 <FLASH_EnableWriteProtection+0x2c>
 800215c:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <FLASH_EnableWriteProtection+0xa4>)
 800215e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002162:	8153      	strh	r3, [r2, #10]
 8002164:	f7ff ff32 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002168:	2804      	cmp	r0, #4
 800216a:	d117      	bne.n	800219c <FLASH_EnableWriteProtection+0x88>
 800216c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002170:	2bff      	cmp	r3, #255	; 0xff
 8002172:	d007      	beq.n	8002184 <FLASH_EnableWriteProtection+0x70>
 8002174:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <FLASH_EnableWriteProtection+0xa4>)
 8002176:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800217a:	8193      	strh	r3, [r2, #12]
 800217c:	f7ff ff26 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002180:	2804      	cmp	r0, #4
 8002182:	d10b      	bne.n	800219c <FLASH_EnableWriteProtection+0x88>
 8002184:	0e24      	lsrs	r4, r4, #24
 8002186:	2cff      	cmp	r4, #255	; 0xff
 8002188:	d101      	bne.n	800218e <FLASH_EnableWriteProtection+0x7a>
 800218a:	2004      	movs	r0, #4
 800218c:	e008      	b.n	80021a0 <FLASH_EnableWriteProtection+0x8c>
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <FLASH_EnableWriteProtection+0xa4>)
 8002190:	b2a4      	uxth	r4, r4
 8002192:	81dc      	strh	r4, [r3, #14]
 8002194:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002198:	f7ff ff18 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 800219c:	2805      	cmp	r0, #5
 800219e:	d005      	beq.n	80021ac <FLASH_EnableWriteProtection+0x98>
 80021a0:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80021a4:	4a02      	ldr	r2, [pc, #8]	; (80021b0 <FLASH_EnableWriteProtection+0x9c>)
 80021a6:	6911      	ldr	r1, [r2, #16]
 80021a8:	400b      	ands	r3, r1
 80021aa:	6113      	str	r3, [r2, #16]
 80021ac:	bd10      	pop	{r4, pc}
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000
 80021b4:	45670123 	.word	0x45670123
 80021b8:	1ffff800 	.word	0x1ffff800

080021bc <FLASH_ProgramOptionByteData>:
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	4606      	mov	r6, r0
 80021c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021c4:	460d      	mov	r5, r1
 80021c6:	f7ff ff01 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 80021ca:	2804      	cmp	r0, #4
 80021cc:	d116      	bne.n	80021fc <FLASH_ProgramOptionByteData+0x40>
 80021ce:	4c0c      	ldr	r4, [pc, #48]	; (8002200 <FLASH_ProgramOptionByteData+0x44>)
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <FLASH_ProgramOptionByteData+0x48>)
 80021d2:	b2ad      	uxth	r5, r5
 80021d4:	60a3      	str	r3, [r4, #8]
 80021d6:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80021da:	60a3      	str	r3, [r4, #8]
 80021dc:	6923      	ldr	r3, [r4, #16]
 80021de:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021e2:	f043 0310 	orr.w	r3, r3, #16
 80021e6:	6123      	str	r3, [r4, #16]
 80021e8:	8035      	strh	r5, [r6, #0]
 80021ea:	f7ff feef 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 80021ee:	2805      	cmp	r0, #5
 80021f0:	bf1f      	itttt	ne
 80021f2:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80021f6:	6922      	ldrne	r2, [r4, #16]
 80021f8:	4013      	andne	r3, r2
 80021fa:	6123      	strne	r3, [r4, #16]
 80021fc:	bd70      	pop	{r4, r5, r6, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	45670123 	.word	0x45670123

08002208 <FLASH_ProgramHalfWord>:
 8002208:	b570      	push	{r4, r5, r6, lr}
 800220a:	4605      	mov	r5, r0
 800220c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002210:	460e      	mov	r6, r1
 8002212:	f7ff fedb 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002216:	2804      	cmp	r0, #4
 8002218:	d10e      	bne.n	8002238 <FLASH_ProgramHalfWord+0x30>
 800221a:	4c08      	ldr	r4, [pc, #32]	; (800223c <FLASH_ProgramHalfWord+0x34>)
 800221c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002220:	6923      	ldr	r3, [r4, #16]
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6123      	str	r3, [r4, #16]
 8002228:	802e      	strh	r6, [r5, #0]
 800222a:	f7ff fecf 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 800222e:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8002232:	6922      	ldr	r2, [r4, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	6123      	str	r3, [r4, #16]
 8002238:	bd70      	pop	{r4, r5, r6, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000

08002240 <FLASH_ProgramWord>:
 8002240:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002242:	2300      	movs	r3, #0
 8002244:	4606      	mov	r6, r0
 8002246:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800224a:	460d      	mov	r5, r1
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f7ff febd 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002252:	2804      	cmp	r0, #4
 8002254:	d11a      	bne.n	800228c <FLASH_ProgramWord+0x4c>
 8002256:	4c0e      	ldr	r4, [pc, #56]	; (8002290 <FLASH_ProgramWord+0x50>)
 8002258:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800225c:	6923      	ldr	r3, [r4, #16]
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6123      	str	r3, [r4, #16]
 8002264:	b2ab      	uxth	r3, r5
 8002266:	8033      	strh	r3, [r6, #0]
 8002268:	f7ff feb0 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 800226c:	2804      	cmp	r0, #4
 800226e:	d108      	bne.n	8002282 <FLASH_ProgramWord+0x42>
 8002270:	3602      	adds	r6, #2
 8002272:	9601      	str	r6, [sp, #4]
 8002274:	9b01      	ldr	r3, [sp, #4]
 8002276:	0c2d      	lsrs	r5, r5, #16
 8002278:	801d      	strh	r5, [r3, #0]
 800227a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800227e:	f7ff fea5 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 8002282:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8002286:	6922      	ldr	r2, [r4, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	6123      	str	r3, [r4, #16]
 800228c:	b002      	add	sp, #8
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	40022000 	.word	0x40022000

08002294 <FLASH_EraseOptionBytes>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	f7ff fe3f 	bl	8001f18 <FLASH_GetReadOutProtectionStatus>
 800229a:	2800      	cmp	r0, #0
 800229c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80022a0:	bf0c      	ite	eq
 80022a2:	25a5      	moveq	r5, #165	; 0xa5
 80022a4:	2500      	movne	r5, #0
 80022a6:	f7ff fe91 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 80022aa:	2804      	cmp	r0, #4
 80022ac:	d129      	bne.n	8002302 <FLASH_EraseOptionBytes+0x6e>
 80022ae:	4c15      	ldr	r4, [pc, #84]	; (8002304 <FLASH_EraseOptionBytes+0x70>)
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <FLASH_EraseOptionBytes+0x74>)
 80022b2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80022b6:	60a3      	str	r3, [r4, #8]
 80022b8:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80022bc:	60a3      	str	r3, [r4, #8]
 80022be:	6923      	ldr	r3, [r4, #16]
 80022c0:	f043 0320 	orr.w	r3, r3, #32
 80022c4:	6123      	str	r3, [r4, #16]
 80022c6:	6923      	ldr	r3, [r4, #16]
 80022c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022cc:	6123      	str	r3, [r4, #16]
 80022ce:	f7ff fe7d 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 80022d2:	2804      	cmp	r0, #4
 80022d4:	d10e      	bne.n	80022f4 <FLASH_EraseOptionBytes+0x60>
 80022d6:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80022da:	6922      	ldr	r2, [r4, #16]
 80022dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022e0:	4013      	ands	r3, r2
 80022e2:	6123      	str	r3, [r4, #16]
 80022e4:	6923      	ldr	r3, [r4, #16]
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6123      	str	r3, [r4, #16]
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <FLASH_EraseOptionBytes+0x78>)
 80022ee:	801d      	strh	r5, [r3, #0]
 80022f0:	f7ff fe6c 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 80022f4:	2805      	cmp	r0, #5
 80022f6:	bf1f      	itttt	ne
 80022f8:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80022fc:	6922      	ldrne	r2, [r4, #16]
 80022fe:	4013      	andne	r3, r2
 8002300:	6123      	strne	r3, [r4, #16]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	40022000 	.word	0x40022000
 8002308:	45670123 	.word	0x45670123
 800230c:	1ffff800 	.word	0x1ffff800

08002310 <FLASH_ErasePage>:
 8002310:	b538      	push	{r3, r4, r5, lr}
 8002312:	4605      	mov	r5, r0
 8002314:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002318:	f7ff fe58 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 800231c:	2804      	cmp	r0, #4
 800231e:	d112      	bne.n	8002346 <FLASH_ErasePage+0x36>
 8002320:	4c09      	ldr	r4, [pc, #36]	; (8002348 <FLASH_ErasePage+0x38>)
 8002322:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6123      	str	r3, [r4, #16]
 800232e:	6165      	str	r5, [r4, #20]
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002336:	6123      	str	r3, [r4, #16]
 8002338:	f7ff fe48 	bl	8001fcc <FLASH_WaitForLastBank1Operation>
 800233c:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8002340:	6922      	ldr	r2, [r4, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	6123      	str	r3, [r4, #16]
 8002346:	bd38      	pop	{r3, r4, r5, pc}
 8002348:	40022000 	.word	0x40022000

0800234c <FLASH_WaitForLastOperation>:
 800234c:	f7ff be3e 	b.w	8001fcc <FLASH_WaitForLastBank1Operation>

08002350 <FSMC_NORSRAMDeInit>:
 8002350:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002354:	b918      	cbnz	r0, 800235e <FSMC_NORSRAMDeInit+0xe>
 8002356:	f243 02db 	movw	r2, #12507	; 0x30db
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e003      	b.n	8002366 <FSMC_NORSRAMDeInit+0x16>
 800235e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002362:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8002366:	0080      	lsls	r0, r0, #2
 8002368:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 800236c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002370:	6043      	str	r3, [r0, #4]
 8002372:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8002376:	4770      	bx	lr

08002378 <FSMC_NANDDeInit>:
 8002378:	2810      	cmp	r0, #16
 800237a:	bf0c      	ite	eq
 800237c:	4b05      	ldreq	r3, [pc, #20]	; (8002394 <FSMC_NANDDeInit+0x1c>)
 800237e:	4b06      	ldrne	r3, [pc, #24]	; (8002398 <FSMC_NANDDeInit+0x20>)
 8002380:	2240      	movs	r2, #64	; 0x40
 8002382:	2118      	movs	r1, #24
 8002384:	6019      	str	r1, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	a0000060 	.word	0xa0000060
 8002398:	a0000080 	.word	0xa0000080

0800239c <FSMC_PCCARDDeInit>:
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <FSMC_PCCARDDeInit+0x18>)
 800239e:	2218      	movs	r2, #24
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	a00000a0 	.word	0xa00000a0

080023b8 <FSMC_NORSRAMInit>:
 80023b8:	6881      	ldr	r1, [r0, #8]
 80023ba:	6843      	ldr	r3, [r0, #4]
 80023bc:	b530      	push	{r4, r5, lr}
 80023be:	ea41 0203 	orr.w	r2, r1, r3
 80023c2:	68c3      	ldr	r3, [r0, #12]
 80023c4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80023c6:	431a      	orrs	r2, r3
 80023c8:	6903      	ldr	r3, [r0, #16]
 80023ca:	2908      	cmp	r1, #8
 80023cc:	ea42 0203 	orr.w	r2, r2, r3
 80023d0:	6943      	ldr	r3, [r0, #20]
 80023d2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80023d4:	ea42 0203 	orr.w	r2, r2, r3
 80023d8:	6983      	ldr	r3, [r0, #24]
 80023da:	680d      	ldr	r5, [r1, #0]
 80023dc:	ea42 0203 	orr.w	r2, r2, r3
 80023e0:	69c3      	ldr	r3, [r0, #28]
 80023e2:	ea42 0203 	orr.w	r2, r2, r3
 80023e6:	6a03      	ldr	r3, [r0, #32]
 80023e8:	ea42 0203 	orr.w	r2, r2, r3
 80023ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023ee:	ea42 0203 	orr.w	r2, r2, r3
 80023f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023f4:	ea43 0302 	orr.w	r3, r3, r2
 80023f8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023fa:	ea43 0304 	orr.w	r3, r3, r4
 80023fe:	ea43 0302 	orr.w	r3, r3, r2
 8002402:	6802      	ldr	r2, [r0, #0]
 8002404:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8002408:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	bf02      	ittt	eq
 8002410:	6813      	ldreq	r3, [r2, #0]
 8002412:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8002416:	6013      	streq	r3, [r2, #0]
 8002418:	698b      	ldr	r3, [r1, #24]
 800241a:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800241e:	ea43 0305 	orr.w	r3, r3, r5
 8002422:	684d      	ldr	r5, [r1, #4]
 8002424:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002428:	688d      	ldr	r5, [r1, #8]
 800242a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800242e:	68cd      	ldr	r5, [r1, #12]
 8002430:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002434:	690d      	ldr	r5, [r1, #16]
 8002436:	6949      	ldr	r1, [r1, #20]
 8002438:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800243c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002440:	6053      	str	r3, [r2, #4]
 8002442:	d110      	bne.n	8002466 <FSMC_NORSRAMInit+0xae>
 8002444:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002446:	6808      	ldr	r0, [r1, #0]
 8002448:	698b      	ldr	r3, [r1, #24]
 800244a:	4303      	orrs	r3, r0
 800244c:	6848      	ldr	r0, [r1, #4]
 800244e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002452:	6888      	ldr	r0, [r1, #8]
 8002454:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002458:	6908      	ldr	r0, [r1, #16]
 800245a:	6949      	ldr	r1, [r1, #20]
 800245c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8002460:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002464:	e001      	b.n	800246a <FSMC_NORSRAMInit+0xb2>
 8002466:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800246a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 800246e:	bd30      	pop	{r4, r5, pc}

08002470 <FSMC_NANDInit>:
 8002470:	6842      	ldr	r2, [r0, #4]
 8002472:	6883      	ldr	r3, [r0, #8]
 8002474:	b530      	push	{r4, r5, lr}
 8002476:	4313      	orrs	r3, r2
 8002478:	68c2      	ldr	r2, [r0, #12]
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	431a      	orrs	r2, r3
 8002480:	6903      	ldr	r3, [r0, #16]
 8002482:	69c4      	ldr	r4, [r0, #28]
 8002484:	4313      	orrs	r3, r2
 8002486:	6942      	ldr	r2, [r0, #20]
 8002488:	6861      	ldr	r1, [r4, #4]
 800248a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800248e:	6982      	ldr	r2, [r0, #24]
 8002490:	6a05      	ldr	r5, [r0, #32]
 8002492:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002496:	68a2      	ldr	r2, [r4, #8]
 8002498:	6800      	ldr	r0, [r0, #0]
 800249a:	0412      	lsls	r2, r2, #16
 800249c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024a0:	6821      	ldr	r1, [r4, #0]
 80024a2:	2810      	cmp	r0, #16
 80024a4:	ea42 0201 	orr.w	r2, r2, r1
 80024a8:	68e1      	ldr	r1, [r4, #12]
 80024aa:	68ac      	ldr	r4, [r5, #8]
 80024ac:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80024b0:	686a      	ldr	r2, [r5, #4]
 80024b2:	ea4f 4404 	mov.w	r4, r4, lsl #16
 80024b6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80024ba:	682a      	ldr	r2, [r5, #0]
 80024bc:	bf08      	it	eq
 80024be:	4806      	ldreq	r0, [pc, #24]	; (80024d8 <FSMC_NANDInit+0x68>)
 80024c0:	ea42 0204 	orr.w	r2, r2, r4
 80024c4:	68ec      	ldr	r4, [r5, #12]
 80024c6:	bf18      	it	ne
 80024c8:	4804      	ldrne	r0, [pc, #16]	; (80024dc <FSMC_NANDInit+0x6c>)
 80024ca:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80024ce:	6003      	str	r3, [r0, #0]
 80024d0:	6081      	str	r1, [r0, #8]
 80024d2:	60c2      	str	r2, [r0, #12]
 80024d4:	bd30      	pop	{r4, r5, pc}
 80024d6:	bf00      	nop
 80024d8:	a0000060 	.word	0xa0000060
 80024dc:	a0000080 	.word	0xa0000080

080024e0 <FSMC_PCCARDInit>:
 80024e0:	6803      	ldr	r3, [r0, #0]
 80024e2:	6842      	ldr	r2, [r0, #4]
 80024e4:	f043 0310 	orr.w	r3, r3, #16
 80024e8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 80024ec:	6882      	ldr	r2, [r0, #8]
 80024ee:	4915      	ldr	r1, [pc, #84]	; (8002544 <FSMC_PCCARDInit+0x64>)
 80024f0:	b510      	push	{r4, lr}
 80024f2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80024f6:	68c4      	ldr	r4, [r0, #12]
 80024f8:	600b      	str	r3, [r1, #0]
 80024fa:	68a2      	ldr	r2, [r4, #8]
 80024fc:	6863      	ldr	r3, [r4, #4]
 80024fe:	0412      	lsls	r2, r2, #16
 8002500:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002504:	6823      	ldr	r3, [r4, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	68e2      	ldr	r2, [r4, #12]
 800250a:	6904      	ldr	r4, [r0, #16]
 800250c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002510:	608b      	str	r3, [r1, #8]
 8002512:	68a2      	ldr	r2, [r4, #8]
 8002514:	6863      	ldr	r3, [r4, #4]
 8002516:	0412      	lsls	r2, r2, #16
 8002518:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	6940      	ldr	r0, [r0, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	68e2      	ldr	r2, [r4, #12]
 8002524:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002528:	60cb      	str	r3, [r1, #12]
 800252a:	6882      	ldr	r2, [r0, #8]
 800252c:	6843      	ldr	r3, [r0, #4]
 800252e:	0412      	lsls	r2, r2, #16
 8002530:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002534:	6803      	ldr	r3, [r0, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	68c2      	ldr	r2, [r0, #12]
 800253a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800253e:	610b      	str	r3, [r1, #16]
 8002540:	bd10      	pop	{r4, pc}
 8002542:	bf00      	nop
 8002544:	a00000a0 	.word	0xa00000a0

08002548 <FSMC_NORSRAMStructInit>:
 8002548:	2202      	movs	r2, #2
 800254a:	b510      	push	{r4, lr}
 800254c:	6042      	str	r2, [r0, #4]
 800254e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002552:	6242      	str	r2, [r0, #36]	; 0x24
 8002554:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800255a:	6282      	str	r2, [r0, #40]	; 0x28
 800255c:	2300      	movs	r3, #0
 800255e:	220f      	movs	r2, #15
 8002560:	24ff      	movs	r4, #255	; 0xff
 8002562:	6003      	str	r3, [r0, #0]
 8002564:	6083      	str	r3, [r0, #8]
 8002566:	60c3      	str	r3, [r0, #12]
 8002568:	6103      	str	r3, [r0, #16]
 800256a:	6143      	str	r3, [r0, #20]
 800256c:	6183      	str	r3, [r0, #24]
 800256e:	61c3      	str	r3, [r0, #28]
 8002570:	6203      	str	r3, [r0, #32]
 8002572:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002574:	6303      	str	r3, [r0, #48]	; 0x30
 8002576:	600a      	str	r2, [r1, #0]
 8002578:	604a      	str	r2, [r1, #4]
 800257a:	608c      	str	r4, [r1, #8]
 800257c:	60ca      	str	r2, [r1, #12]
 800257e:	610a      	str	r2, [r1, #16]
 8002580:	614a      	str	r2, [r1, #20]
 8002582:	618b      	str	r3, [r1, #24]
 8002584:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002586:	600a      	str	r2, [r1, #0]
 8002588:	604a      	str	r2, [r1, #4]
 800258a:	608c      	str	r4, [r1, #8]
 800258c:	60ca      	str	r2, [r1, #12]
 800258e:	610a      	str	r2, [r1, #16]
 8002590:	614a      	str	r2, [r1, #20]
 8002592:	618b      	str	r3, [r1, #24]
 8002594:	bd10      	pop	{r4, pc}

08002596 <FSMC_NANDStructInit>:
 8002596:	2310      	movs	r3, #16
 8002598:	6003      	str	r3, [r0, #0]
 800259a:	69c2      	ldr	r2, [r0, #28]
 800259c:	2300      	movs	r3, #0
 800259e:	6043      	str	r3, [r0, #4]
 80025a0:	6083      	str	r3, [r0, #8]
 80025a2:	60c3      	str	r3, [r0, #12]
 80025a4:	6103      	str	r3, [r0, #16]
 80025a6:	6143      	str	r3, [r0, #20]
 80025a8:	6183      	str	r3, [r0, #24]
 80025aa:	23fc      	movs	r3, #252	; 0xfc
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	6053      	str	r3, [r2, #4]
 80025b0:	6093      	str	r3, [r2, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
 80025b4:	6a02      	ldr	r2, [r0, #32]
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	6053      	str	r3, [r2, #4]
 80025ba:	6093      	str	r3, [r2, #8]
 80025bc:	60d3      	str	r3, [r2, #12]
 80025be:	4770      	bx	lr

080025c0 <FSMC_PCCARDStructInit>:
 80025c0:	68c2      	ldr	r2, [r0, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	6003      	str	r3, [r0, #0]
 80025c6:	6043      	str	r3, [r0, #4]
 80025c8:	6083      	str	r3, [r0, #8]
 80025ca:	23fc      	movs	r3, #252	; 0xfc
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	6053      	str	r3, [r2, #4]
 80025d0:	6093      	str	r3, [r2, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
 80025d4:	6902      	ldr	r2, [r0, #16]
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	6053      	str	r3, [r2, #4]
 80025da:	6093      	str	r3, [r2, #8]
 80025dc:	60d3      	str	r3, [r2, #12]
 80025de:	6942      	ldr	r2, [r0, #20]
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	6053      	str	r3, [r2, #4]
 80025e4:	6093      	str	r3, [r2, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
 80025e8:	4770      	bx	lr

080025ea <FSMC_NORSRAMCmd>:
 80025ea:	0080      	lsls	r0, r0, #2
 80025ec:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
 80025f0:	b119      	cbz	r1, 80025fa <FSMC_NORSRAMCmd+0x10>
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	e002      	b.n	8002600 <FSMC_NORSRAMCmd+0x16>
 80025fa:	6802      	ldr	r2, [r0, #0]
 80025fc:	4b01      	ldr	r3, [pc, #4]	; (8002604 <FSMC_NORSRAMCmd+0x1a>)
 80025fe:	4013      	ands	r3, r2
 8002600:	6003      	str	r3, [r0, #0]
 8002602:	4770      	bx	lr
 8002604:	000ffffe 	.word	0x000ffffe

08002608 <FSMC_NANDCmd>:
 8002608:	b139      	cbz	r1, 800261a <FSMC_NANDCmd+0x12>
 800260a:	2810      	cmp	r0, #16
 800260c:	bf0c      	ite	eq
 800260e:	4a07      	ldreq	r2, [pc, #28]	; (800262c <FSMC_NANDCmd+0x24>)
 8002610:	4a07      	ldrne	r2, [pc, #28]	; (8002630 <FSMC_NANDCmd+0x28>)
 8002612:	6813      	ldr	r3, [r2, #0]
 8002614:	f043 0304 	orr.w	r3, r3, #4
 8002618:	e006      	b.n	8002628 <FSMC_NANDCmd+0x20>
 800261a:	2810      	cmp	r0, #16
 800261c:	bf0c      	ite	eq
 800261e:	4a03      	ldreq	r2, [pc, #12]	; (800262c <FSMC_NANDCmd+0x24>)
 8002620:	4a03      	ldrne	r2, [pc, #12]	; (8002630 <FSMC_NANDCmd+0x28>)
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <FSMC_NANDCmd+0x2c>)
 8002624:	6811      	ldr	r1, [r2, #0]
 8002626:	400b      	ands	r3, r1
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4770      	bx	lr
 800262c:	a0000060 	.word	0xa0000060
 8002630:	a0000080 	.word	0xa0000080
 8002634:	000ffffb 	.word	0x000ffffb

08002638 <FSMC_PCCARDCmd>:
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <FSMC_PCCARDCmd+0x18>)
 800263a:	b118      	cbz	r0, 8002644 <FSMC_PCCARDCmd+0xc>
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f042 0204 	orr.w	r2, r2, #4
 8002642:	e002      	b.n	800264a <FSMC_PCCARDCmd+0x12>
 8002644:	6819      	ldr	r1, [r3, #0]
 8002646:	4a03      	ldr	r2, [pc, #12]	; (8002654 <FSMC_PCCARDCmd+0x1c>)
 8002648:	400a      	ands	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	a00000a0 	.word	0xa00000a0
 8002654:	000ffffb 	.word	0x000ffffb

08002658 <FSMC_NANDECCCmd>:
 8002658:	b139      	cbz	r1, 800266a <FSMC_NANDECCCmd+0x12>
 800265a:	2810      	cmp	r0, #16
 800265c:	bf0c      	ite	eq
 800265e:	4a07      	ldreq	r2, [pc, #28]	; (800267c <FSMC_NANDECCCmd+0x24>)
 8002660:	4a07      	ldrne	r2, [pc, #28]	; (8002680 <FSMC_NANDECCCmd+0x28>)
 8002662:	6813      	ldr	r3, [r2, #0]
 8002664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002668:	e006      	b.n	8002678 <FSMC_NANDECCCmd+0x20>
 800266a:	2810      	cmp	r0, #16
 800266c:	bf0c      	ite	eq
 800266e:	4a03      	ldreq	r2, [pc, #12]	; (800267c <FSMC_NANDECCCmd+0x24>)
 8002670:	4a03      	ldrne	r2, [pc, #12]	; (8002680 <FSMC_NANDECCCmd+0x28>)
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <FSMC_NANDECCCmd+0x2c>)
 8002674:	6811      	ldr	r1, [r2, #0]
 8002676:	400b      	ands	r3, r1
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4770      	bx	lr
 800267c:	a0000060 	.word	0xa0000060
 8002680:	a0000080 	.word	0xa0000080
 8002684:	000fffbf 	.word	0x000fffbf

08002688 <FSMC_GetECC>:
 8002688:	2810      	cmp	r0, #16
 800268a:	bf0c      	ite	eq
 800268c:	4b01      	ldreq	r3, [pc, #4]	; (8002694 <FSMC_GetECC+0xc>)
 800268e:	4b02      	ldrne	r3, [pc, #8]	; (8002698 <FSMC_GetECC+0x10>)
 8002690:	6958      	ldr	r0, [r3, #20]
 8002692:	4770      	bx	lr
 8002694:	a0000060 	.word	0xa0000060
 8002698:	a0000080 	.word	0xa0000080

0800269c <FSMC_ITConfig>:
 800269c:	b17a      	cbz	r2, 80026be <FSMC_ITConfig+0x22>
 800269e:	2810      	cmp	r0, #16
 80026a0:	d101      	bne.n	80026a6 <FSMC_ITConfig+0xa>
 80026a2:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <FSMC_ITConfig+0x40>)
 80026a4:	e008      	b.n	80026b8 <FSMC_ITConfig+0x1c>
 80026a6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80026aa:	d104      	bne.n	80026b6 <FSMC_ITConfig+0x1a>
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <FSMC_ITConfig+0x44>)
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4311      	orrs	r1, r2
 80026b2:	6059      	str	r1, [r3, #4]
 80026b4:	4770      	bx	lr
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <FSMC_ITConfig+0x48>)
 80026b8:	6853      	ldr	r3, [r2, #4]
 80026ba:	4319      	orrs	r1, r3
 80026bc:	e00c      	b.n	80026d8 <FSMC_ITConfig+0x3c>
 80026be:	2810      	cmp	r0, #16
 80026c0:	ea6f 0101 	mvn.w	r1, r1
 80026c4:	d101      	bne.n	80026ca <FSMC_ITConfig+0x2e>
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <FSMC_ITConfig+0x40>)
 80026c8:	e004      	b.n	80026d4 <FSMC_ITConfig+0x38>
 80026ca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80026ce:	bf0c      	ite	eq
 80026d0:	4a03      	ldreq	r2, [pc, #12]	; (80026e0 <FSMC_ITConfig+0x44>)
 80026d2:	4a04      	ldrne	r2, [pc, #16]	; (80026e4 <FSMC_ITConfig+0x48>)
 80026d4:	6853      	ldr	r3, [r2, #4]
 80026d6:	4019      	ands	r1, r3
 80026d8:	6051      	str	r1, [r2, #4]
 80026da:	4770      	bx	lr
 80026dc:	a0000060 	.word	0xa0000060
 80026e0:	a0000080 	.word	0xa0000080
 80026e4:	a00000a0 	.word	0xa00000a0

080026e8 <FSMC_GetFlagStatus>:
 80026e8:	2810      	cmp	r0, #16
 80026ea:	d101      	bne.n	80026f0 <FSMC_GetFlagStatus+0x8>
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <FSMC_GetFlagStatus+0x20>)
 80026ee:	e004      	b.n	80026fa <FSMC_GetFlagStatus+0x12>
 80026f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80026f4:	bf0c      	ite	eq
 80026f6:	4b05      	ldreq	r3, [pc, #20]	; (800270c <FSMC_GetFlagStatus+0x24>)
 80026f8:	4b05      	ldrne	r3, [pc, #20]	; (8002710 <FSMC_GetFlagStatus+0x28>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	420b      	tst	r3, r1
 80026fe:	bf14      	ite	ne
 8002700:	2001      	movne	r0, #1
 8002702:	2000      	moveq	r0, #0
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	a0000060 	.word	0xa0000060
 800270c:	a0000080 	.word	0xa0000080
 8002710:	a00000a0 	.word	0xa00000a0

08002714 <FSMC_ClearFlag>:
 8002714:	2810      	cmp	r0, #16
 8002716:	ea6f 0101 	mvn.w	r1, r1
 800271a:	d101      	bne.n	8002720 <FSMC_ClearFlag+0xc>
 800271c:	4a05      	ldr	r2, [pc, #20]	; (8002734 <FSMC_ClearFlag+0x20>)
 800271e:	e004      	b.n	800272a <FSMC_ClearFlag+0x16>
 8002720:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002724:	bf0c      	ite	eq
 8002726:	4a04      	ldreq	r2, [pc, #16]	; (8002738 <FSMC_ClearFlag+0x24>)
 8002728:	4a04      	ldrne	r2, [pc, #16]	; (800273c <FSMC_ClearFlag+0x28>)
 800272a:	6853      	ldr	r3, [r2, #4]
 800272c:	4019      	ands	r1, r3
 800272e:	6051      	str	r1, [r2, #4]
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	a0000060 	.word	0xa0000060
 8002738:	a0000080 	.word	0xa0000080
 800273c:	a00000a0 	.word	0xa00000a0

08002740 <FSMC_GetITStatus>:
 8002740:	2810      	cmp	r0, #16
 8002742:	d101      	bne.n	8002748 <FSMC_GetITStatus+0x8>
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <FSMC_GetITStatus+0x28>)
 8002746:	e004      	b.n	8002752 <FSMC_GetITStatus+0x12>
 8002748:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800274c:	bf0c      	ite	eq
 800274e:	4b07      	ldreq	r3, [pc, #28]	; (800276c <FSMC_GetITStatus+0x2c>)
 8002750:	4b07      	ldrne	r3, [pc, #28]	; (8002770 <FSMC_GetITStatus+0x30>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	ea13 0001 	ands.w	r0, r3, r1
 8002758:	d004      	beq.n	8002764 <FSMC_GetITStatus+0x24>
 800275a:	ea13 03d1 	ands.w	r3, r3, r1, lsr #3
 800275e:	bf14      	ite	ne
 8002760:	2001      	movne	r0, #1
 8002762:	2000      	moveq	r0, #0
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	a0000060 	.word	0xa0000060
 800276c:	a0000080 	.word	0xa0000080
 8002770:	a00000a0 	.word	0xa00000a0

08002774 <FSMC_ClearITPendingBit>:
 8002774:	2810      	cmp	r0, #16
 8002776:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 800277a:	d101      	bne.n	8002780 <FSMC_ClearITPendingBit+0xc>
 800277c:	4a05      	ldr	r2, [pc, #20]	; (8002794 <FSMC_ClearITPendingBit+0x20>)
 800277e:	e004      	b.n	800278a <FSMC_ClearITPendingBit+0x16>
 8002780:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002784:	bf0c      	ite	eq
 8002786:	4a04      	ldreq	r2, [pc, #16]	; (8002798 <FSMC_ClearITPendingBit+0x24>)
 8002788:	4a04      	ldrne	r2, [pc, #16]	; (800279c <FSMC_ClearITPendingBit+0x28>)
 800278a:	6853      	ldr	r3, [r2, #4]
 800278c:	ea23 0101 	bic.w	r1, r3, r1
 8002790:	6051      	str	r1, [r2, #4]
 8002792:	4770      	bx	lr
 8002794:	a0000060 	.word	0xa0000060
 8002798:	a0000080 	.word	0xa0000080
 800279c:	a00000a0 	.word	0xa00000a0

080027a0 <GPIO_DeInit>:
 80027a0:	b508      	push	{r3, lr}
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <GPIO_DeInit+0x9c>)
 80027a4:	4298      	cmp	r0, r3
 80027a6:	d106      	bne.n	80027b6 <GPIO_DeInit+0x16>
 80027a8:	2101      	movs	r1, #1
 80027aa:	2004      	movs	r0, #4
 80027ac:	f000 fcd6 	bl	800315c <RCC_APB2PeriphResetCmd>
 80027b0:	2100      	movs	r1, #0
 80027b2:	2004      	movs	r0, #4
 80027b4:	e03c      	b.n	8002830 <GPIO_DeInit+0x90>
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <GPIO_DeInit+0xa0>)
 80027b8:	4298      	cmp	r0, r3
 80027ba:	d106      	bne.n	80027ca <GPIO_DeInit+0x2a>
 80027bc:	2101      	movs	r1, #1
 80027be:	2008      	movs	r0, #8
 80027c0:	f000 fccc 	bl	800315c <RCC_APB2PeriphResetCmd>
 80027c4:	2100      	movs	r1, #0
 80027c6:	2008      	movs	r0, #8
 80027c8:	e032      	b.n	8002830 <GPIO_DeInit+0x90>
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <GPIO_DeInit+0xa4>)
 80027cc:	4298      	cmp	r0, r3
 80027ce:	d106      	bne.n	80027de <GPIO_DeInit+0x3e>
 80027d0:	2101      	movs	r1, #1
 80027d2:	2010      	movs	r0, #16
 80027d4:	f000 fcc2 	bl	800315c <RCC_APB2PeriphResetCmd>
 80027d8:	2100      	movs	r1, #0
 80027da:	2010      	movs	r0, #16
 80027dc:	e028      	b.n	8002830 <GPIO_DeInit+0x90>
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <GPIO_DeInit+0xa8>)
 80027e0:	4298      	cmp	r0, r3
 80027e2:	d106      	bne.n	80027f2 <GPIO_DeInit+0x52>
 80027e4:	2101      	movs	r1, #1
 80027e6:	2020      	movs	r0, #32
 80027e8:	f000 fcb8 	bl	800315c <RCC_APB2PeriphResetCmd>
 80027ec:	2100      	movs	r1, #0
 80027ee:	2020      	movs	r0, #32
 80027f0:	e01e      	b.n	8002830 <GPIO_DeInit+0x90>
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <GPIO_DeInit+0xac>)
 80027f4:	4298      	cmp	r0, r3
 80027f6:	d106      	bne.n	8002806 <GPIO_DeInit+0x66>
 80027f8:	2101      	movs	r1, #1
 80027fa:	2040      	movs	r0, #64	; 0x40
 80027fc:	f000 fcae 	bl	800315c <RCC_APB2PeriphResetCmd>
 8002800:	2100      	movs	r1, #0
 8002802:	2040      	movs	r0, #64	; 0x40
 8002804:	e014      	b.n	8002830 <GPIO_DeInit+0x90>
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <GPIO_DeInit+0xb0>)
 8002808:	4298      	cmp	r0, r3
 800280a:	d106      	bne.n	800281a <GPIO_DeInit+0x7a>
 800280c:	2101      	movs	r1, #1
 800280e:	2080      	movs	r0, #128	; 0x80
 8002810:	f000 fca4 	bl	800315c <RCC_APB2PeriphResetCmd>
 8002814:	2100      	movs	r1, #0
 8002816:	2080      	movs	r0, #128	; 0x80
 8002818:	e00a      	b.n	8002830 <GPIO_DeInit+0x90>
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <GPIO_DeInit+0xb4>)
 800281c:	4298      	cmp	r0, r3
 800281e:	d10b      	bne.n	8002838 <GPIO_DeInit+0x98>
 8002820:	2101      	movs	r1, #1
 8002822:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002826:	f000 fc99 	bl	800315c <RCC_APB2PeriphResetCmd>
 800282a:	2100      	movs	r1, #0
 800282c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002830:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002834:	f000 bc92 	b.w	800315c <RCC_APB2PeriphResetCmd>
 8002838:	bd08      	pop	{r3, pc}
 800283a:	bf00      	nop
 800283c:	40010800 	.word	0x40010800
 8002840:	40010c00 	.word	0x40010c00
 8002844:	40011000 	.word	0x40011000
 8002848:	40011400 	.word	0x40011400
 800284c:	40011800 	.word	0x40011800
 8002850:	40011c00 	.word	0x40011c00
 8002854:	40012000 	.word	0x40012000

08002858 <GPIO_AFIODeInit>:
 8002858:	b508      	push	{r3, lr}
 800285a:	2101      	movs	r1, #1
 800285c:	4608      	mov	r0, r1
 800285e:	f000 fc7d 	bl	800315c <RCC_APB2PeriphResetCmd>
 8002862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002866:	2100      	movs	r1, #0
 8002868:	2001      	movs	r0, #1
 800286a:	f000 bc77 	b.w	800315c <RCC_APB2PeriphResetCmd>

0800286e <GPIO_Init>:
 800286e:	78ca      	ldrb	r2, [r1, #3]
 8002870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002874:	06d4      	lsls	r4, r2, #27
 8002876:	bf48      	it	mi
 8002878:	788c      	ldrbmi	r4, [r1, #2]
 800287a:	880e      	ldrh	r6, [r1, #0]
 800287c:	f002 030f 	and.w	r3, r2, #15
 8002880:	bf48      	it	mi
 8002882:	4323      	orrmi	r3, r4
 8002884:	f016 0fff 	tst.w	r6, #255	; 0xff
 8002888:	d01e      	beq.n	80028c8 <GPIO_Init+0x5a>
 800288a:	6801      	ldr	r1, [r0, #0]
 800288c:	2400      	movs	r4, #0
 800288e:	f04f 0e01 	mov.w	lr, #1
 8002892:	f04f 0c0f 	mov.w	ip, #15
 8002896:	fa0e f704 	lsl.w	r7, lr, r4
 800289a:	ea37 0506 	bics.w	r5, r7, r6
 800289e:	d10f      	bne.n	80028c0 <GPIO_Init+0x52>
 80028a0:	00a5      	lsls	r5, r4, #2
 80028a2:	fa0c f805 	lsl.w	r8, ip, r5
 80028a6:	ea21 0108 	bic.w	r1, r1, r8
 80028aa:	fa03 f505 	lsl.w	r5, r3, r5
 80028ae:	2a28      	cmp	r2, #40	; 0x28
 80028b0:	ea41 0105 	orr.w	r1, r1, r5
 80028b4:	d101      	bne.n	80028ba <GPIO_Init+0x4c>
 80028b6:	6147      	str	r7, [r0, #20]
 80028b8:	e002      	b.n	80028c0 <GPIO_Init+0x52>
 80028ba:	2a48      	cmp	r2, #72	; 0x48
 80028bc:	bf08      	it	eq
 80028be:	6107      	streq	r7, [r0, #16]
 80028c0:	3401      	adds	r4, #1
 80028c2:	2c08      	cmp	r4, #8
 80028c4:	d1e7      	bne.n	8002896 <GPIO_Init+0x28>
 80028c6:	6001      	str	r1, [r0, #0]
 80028c8:	2eff      	cmp	r6, #255	; 0xff
 80028ca:	d920      	bls.n	800290e <GPIO_Init+0xa0>
 80028cc:	6841      	ldr	r1, [r0, #4]
 80028ce:	2400      	movs	r4, #0
 80028d0:	f04f 0e01 	mov.w	lr, #1
 80028d4:	f04f 0c0f 	mov.w	ip, #15
 80028d8:	f104 0508 	add.w	r5, r4, #8
 80028dc:	fa0e f505 	lsl.w	r5, lr, r5
 80028e0:	ea35 0706 	bics.w	r7, r5, r6
 80028e4:	d10f      	bne.n	8002906 <GPIO_Init+0x98>
 80028e6:	00a7      	lsls	r7, r4, #2
 80028e8:	fa0c f807 	lsl.w	r8, ip, r7
 80028ec:	ea21 0108 	bic.w	r1, r1, r8
 80028f0:	fa03 f707 	lsl.w	r7, r3, r7
 80028f4:	2a28      	cmp	r2, #40	; 0x28
 80028f6:	ea41 0107 	orr.w	r1, r1, r7
 80028fa:	d101      	bne.n	8002900 <GPIO_Init+0x92>
 80028fc:	6145      	str	r5, [r0, #20]
 80028fe:	e002      	b.n	8002906 <GPIO_Init+0x98>
 8002900:	2a48      	cmp	r2, #72	; 0x48
 8002902:	bf08      	it	eq
 8002904:	6105      	streq	r5, [r0, #16]
 8002906:	3401      	adds	r4, #1
 8002908:	2c08      	cmp	r4, #8
 800290a:	d1e5      	bne.n	80028d8 <GPIO_Init+0x6a>
 800290c:	6041      	str	r1, [r0, #4]
 800290e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002912 <GPIO_StructInit>:
 8002912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002916:	8003      	strh	r3, [r0, #0]
 8002918:	2302      	movs	r3, #2
 800291a:	7083      	strb	r3, [r0, #2]
 800291c:	2304      	movs	r3, #4
 800291e:	70c3      	strb	r3, [r0, #3]
 8002920:	4770      	bx	lr

08002922 <GPIO_ReadInputDataBit>:
 8002922:	6883      	ldr	r3, [r0, #8]
 8002924:	4219      	tst	r1, r3
 8002926:	bf14      	ite	ne
 8002928:	2001      	movne	r0, #1
 800292a:	2000      	moveq	r0, #0
 800292c:	4770      	bx	lr

0800292e <GPIO_ReadInputData>:
 800292e:	6880      	ldr	r0, [r0, #8]
 8002930:	b280      	uxth	r0, r0
 8002932:	4770      	bx	lr

08002934 <GPIO_ReadOutputDataBit>:
 8002934:	68c3      	ldr	r3, [r0, #12]
 8002936:	4219      	tst	r1, r3
 8002938:	bf14      	ite	ne
 800293a:	2001      	movne	r0, #1
 800293c:	2000      	moveq	r0, #0
 800293e:	4770      	bx	lr

08002940 <GPIO_ReadOutputData>:
 8002940:	68c0      	ldr	r0, [r0, #12]
 8002942:	b280      	uxth	r0, r0
 8002944:	4770      	bx	lr

08002946 <GPIO_SetBits>:
 8002946:	6101      	str	r1, [r0, #16]
 8002948:	4770      	bx	lr

0800294a <GPIO_ResetBits>:
 800294a:	6141      	str	r1, [r0, #20]
 800294c:	4770      	bx	lr

0800294e <GPIO_WriteBit>:
 800294e:	b10a      	cbz	r2, 8002954 <GPIO_WriteBit+0x6>
 8002950:	6101      	str	r1, [r0, #16]
 8002952:	4770      	bx	lr
 8002954:	6141      	str	r1, [r0, #20]
 8002956:	4770      	bx	lr

08002958 <GPIO_Write>:
 8002958:	60c1      	str	r1, [r0, #12]
 800295a:	4770      	bx	lr

0800295c <GPIO_PinLockConfig>:
 800295c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 8002960:	6183      	str	r3, [r0, #24]
 8002962:	6181      	str	r1, [r0, #24]
 8002964:	6183      	str	r3, [r0, #24]
 8002966:	6983      	ldr	r3, [r0, #24]
 8002968:	6983      	ldr	r3, [r0, #24]
 800296a:	4770      	bx	lr

0800296c <GPIO_EventOutputConfig>:
 800296c:	4a05      	ldr	r2, [pc, #20]	; (8002984 <GPIO_EventOutputConfig+0x18>)
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002974:	041b      	lsls	r3, r3, #16
 8002976:	0c1b      	lsrs	r3, r3, #16
 8002978:	4319      	orrs	r1, r3
 800297a:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
 800297e:	6010      	str	r0, [r2, #0]
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	40010000 	.word	0x40010000

08002988 <GPIO_EventOutputCmd>:
 8002988:	4b01      	ldr	r3, [pc, #4]	; (8002990 <GPIO_EventOutputCmd+0x8>)
 800298a:	6018      	str	r0, [r3, #0]
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	4220001c 	.word	0x4220001c

08002994 <GPIO_PinRemapConfig>:
 8002994:	2800      	cmp	r0, #0
 8002996:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <GPIO_PinRemapConfig+0x5c>)
 8002998:	b530      	push	{r4, r5, lr}
 800299a:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 800299e:	bfb4      	ite	lt
 80029a0:	69d3      	ldrlt	r3, [r2, #28]
 80029a2:	6853      	ldrge	r3, [r2, #4]
 80029a4:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 80029a8:	b284      	uxth	r4, r0
 80029aa:	d106      	bne.n	80029ba <GPIO_PinRemapConfig+0x26>
 80029ac:	6855      	ldr	r5, [r2, #4]
 80029ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80029b2:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80029b6:	6055      	str	r5, [r2, #4]
 80029b8:	e00e      	b.n	80029d8 <GPIO_PinRemapConfig+0x44>
 80029ba:	02c2      	lsls	r2, r0, #11
 80029bc:	bf55      	itete	pl
 80029be:	0d42      	lsrpl	r2, r0, #21
 80029c0:	2203      	movmi	r2, #3
 80029c2:	0112      	lslpl	r2, r2, #4
 80029c4:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80029c8:	bf4c      	ite	mi
 80029ca:	40aa      	lslmi	r2, r5
 80029cc:	fa04 f202 	lslpl.w	r2, r4, r2
 80029d0:	ea23 0302 	bic.w	r3, r3, r2
 80029d4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80029d8:	b119      	cbz	r1, 80029e2 <GPIO_PinRemapConfig+0x4e>
 80029da:	0d42      	lsrs	r2, r0, #21
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	4094      	lsls	r4, r2
 80029e0:	4323      	orrs	r3, r4
 80029e2:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <GPIO_PinRemapConfig+0x5c>)
 80029e4:	2800      	cmp	r0, #0
 80029e6:	bfb4      	ite	lt
 80029e8:	61d3      	strlt	r3, [r2, #28]
 80029ea:	6053      	strge	r3, [r2, #4]
 80029ec:	bd30      	pop	{r4, r5, pc}
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000

080029f4 <GPIO_EXTILineConfig>:
 80029f4:	f001 0303 	and.w	r3, r1, #3
 80029f8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80029fc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002a00:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8002a04:	b510      	push	{r4, lr}
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	688c      	ldr	r4, [r1, #8]
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	ea24 0202 	bic.w	r2, r4, r2
 8002a12:	608a      	str	r2, [r1, #8]
 8002a14:	688a      	ldr	r2, [r1, #8]
 8002a16:	4098      	lsls	r0, r3
 8002a18:	4310      	orrs	r0, r2
 8002a1a:	6088      	str	r0, [r1, #8]
 8002a1c:	bd10      	pop	{r4, pc}

08002a1e <GPIO_ETH_MediaInterfaceConfig>:
 8002a1e:	4b01      	ldr	r3, [pc, #4]	; (8002a24 <GPIO_ETH_MediaInterfaceConfig+0x6>)
 8002a20:	6018      	str	r0, [r3, #0]
 8002a22:	4770      	bx	lr
 8002a24:	422000dc 	.word	0x422000dc

08002a28 <I2C_DeInit>:
 8002a28:	b508      	push	{r3, lr}
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <I2C_DeInit+0x30>)
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4298      	cmp	r0, r3
 8002a30:	d107      	bne.n	8002a42 <I2C_DeInit+0x1a>
 8002a32:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a36:	f000 fb9d 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002a40:	e006      	b.n	8002a50 <I2C_DeInit+0x28>
 8002a42:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002a46:	f000 fb95 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002a54:	f000 bb8e 	b.w	8003174 <RCC_APB1PeriphResetCmd>
 8002a58:	40005400 	.word	0x40005400

08002a5c <I2C_Init>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	4604      	mov	r4, r0
 8002a62:	8886      	ldrh	r6, [r0, #4]
 8002a64:	a801      	add	r0, sp, #4
 8002a66:	460d      	mov	r5, r1
 8002a68:	f000 fb0e 	bl	8003088 <RCC_GetClocksFreq>
 8002a6c:	9a03      	ldr	r2, [sp, #12]
 8002a6e:	482e      	ldr	r0, [pc, #184]	; (8002b28 <I2C_Init+0xcc>)
 8002a70:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8002a74:	fbb2 f0f0 	udiv	r0, r2, r0
 8002a78:	0436      	lsls	r6, r6, #16
 8002a7a:	0c36      	lsrs	r6, r6, #16
 8002a7c:	b281      	uxth	r1, r0
 8002a7e:	430e      	orrs	r6, r1
 8002a80:	80a6      	strh	r6, [r4, #4]
 8002a82:	8823      	ldrh	r3, [r4, #0]
 8002a84:	4e29      	ldr	r6, [pc, #164]	; (8002b2c <I2C_Init+0xd0>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	8023      	strh	r3, [r4, #0]
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	42b3      	cmp	r3, r6
 8002a94:	d80a      	bhi.n	8002aac <I2C_Init+0x50>
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	3101      	adds	r1, #1
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	b289      	uxth	r1, r1
 8002aa4:	bf98      	it	ls
 8002aa6:	2304      	movls	r3, #4
 8002aa8:	8421      	strh	r1, [r4, #32]
 8002aaa:	e023      	b.n	8002af4 <I2C_Init+0x98>
 8002aac:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 8002ab0:	88ee      	ldrh	r6, [r5, #6]
 8002ab2:	428e      	cmp	r6, r1
 8002ab4:	bf1b      	ittet	ne
 8002ab6:	2119      	movne	r1, #25
 8002ab8:	434b      	mulne	r3, r1
 8002aba:	eb03 0343 	addeq.w	r3, r3, r3, lsl #1
 8002abe:	fbb2 f3f3 	udivne	r3, r2, r3
 8002ac2:	bf0b      	itete	eq
 8002ac4:	fbb2 f3f3 	udiveq	r3, r2, r3
 8002ac8:	b29b      	uxthne	r3, r3
 8002aca:	b29b      	uxtheq	r3, r3
 8002acc:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
 8002ad0:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002ad4:	b90a      	cbnz	r2, 8002ada <I2C_Init+0x7e>
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002ade:	fb01 f200 	mul.w	r2, r1, r0
 8002ae2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ae6:	fb92 f2f1 	sdiv	r2, r2, r1
 8002aea:	3201      	adds	r2, #1
 8002aec:	b292      	uxth	r2, r2
 8002aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002af2:	8422      	strh	r2, [r4, #32]
 8002af4:	83a3      	strh	r3, [r4, #28]
 8002af6:	8823      	ldrh	r3, [r4, #0]
 8002af8:	88a9      	ldrh	r1, [r5, #4]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	8023      	strh	r3, [r4, #0]
 8002b02:	8823      	ldrh	r3, [r4, #0]
 8002b04:	896a      	ldrh	r2, [r5, #10]
 8002b06:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8002b0a:	f023 0302 	bic.w	r3, r3, #2
 8002b0e:	041b      	lsls	r3, r3, #16
 8002b10:	430a      	orrs	r2, r1
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	4313      	orrs	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8023      	strh	r3, [r4, #0]
 8002b1a:	89aa      	ldrh	r2, [r5, #12]
 8002b1c:	892b      	ldrh	r3, [r5, #8]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	8123      	strh	r3, [r4, #8]
 8002b24:	b006      	add	sp, #24
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	000f4240 	.word	0x000f4240
 8002b2c:	000186a0 	.word	0x000186a0

08002b30 <I2C_StructInit>:
 8002b30:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b34:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8002b38:	6003      	str	r3, [r0, #0]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	8083      	strh	r3, [r0, #4]
 8002b3e:	8103      	strh	r3, [r0, #8]
 8002b40:	8143      	strh	r3, [r0, #10]
 8002b42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b46:	80c2      	strh	r2, [r0, #6]
 8002b48:	8183      	strh	r3, [r0, #12]
 8002b4a:	4770      	bx	lr

08002b4c <I2C_Cmd>:
 8002b4c:	8803      	ldrh	r3, [r0, #0]
 8002b4e:	b119      	cbz	r1, 8002b58 <I2C_Cmd+0xc>
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	e003      	b.n	8002b60 <I2C_Cmd+0x14>
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	0c1b      	lsrs	r3, r3, #16
 8002b60:	8003      	strh	r3, [r0, #0]
 8002b62:	4770      	bx	lr

08002b64 <I2C_DMACmd>:
 8002b64:	8883      	ldrh	r3, [r0, #4]
 8002b66:	b119      	cbz	r1, 8002b70 <I2C_DMACmd+0xc>
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b6e:	e003      	b.n	8002b78 <I2C_DMACmd+0x14>
 8002b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	8083      	strh	r3, [r0, #4]
 8002b7a:	4770      	bx	lr

08002b7c <I2C_DMALastTransferCmd>:
 8002b7c:	8883      	ldrh	r3, [r0, #4]
 8002b7e:	b119      	cbz	r1, 8002b88 <I2C_DMALastTransferCmd+0xc>
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b86:	e003      	b.n	8002b90 <I2C_DMALastTransferCmd+0x14>
 8002b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	8083      	strh	r3, [r0, #4]
 8002b92:	4770      	bx	lr

08002b94 <I2C_GenerateSTART>:
 8002b94:	8803      	ldrh	r3, [r0, #0]
 8002b96:	b119      	cbz	r1, 8002ba0 <I2C_GenerateSTART+0xc>
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	e003      	b.n	8002ba8 <I2C_GenerateSTART+0x14>
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	8003      	strh	r3, [r0, #0]
 8002baa:	4770      	bx	lr

08002bac <I2C_GenerateSTOP>:
 8002bac:	8803      	ldrh	r3, [r0, #0]
 8002bae:	b119      	cbz	r1, 8002bb8 <I2C_GenerateSTOP+0xc>
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb6:	e003      	b.n	8002bc0 <I2C_GenerateSTOP+0x14>
 8002bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	8003      	strh	r3, [r0, #0]
 8002bc2:	4770      	bx	lr

08002bc4 <I2C_AcknowledgeConfig>:
 8002bc4:	8803      	ldrh	r3, [r0, #0]
 8002bc6:	b119      	cbz	r1, 8002bd0 <I2C_AcknowledgeConfig+0xc>
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bce:	e003      	b.n	8002bd8 <I2C_AcknowledgeConfig+0x14>
 8002bd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	8003      	strh	r3, [r0, #0]
 8002bda:	4770      	bx	lr

08002bdc <I2C_OwnAddress2Config>:
 8002bdc:	8983      	ldrh	r3, [r0, #12]
 8002bde:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002be8:	430b      	orrs	r3, r1
 8002bea:	8183      	strh	r3, [r0, #12]
 8002bec:	4770      	bx	lr

08002bee <I2C_DualAddressCmd>:
 8002bee:	8983      	ldrh	r3, [r0, #12]
 8002bf0:	b119      	cbz	r1, 8002bfa <I2C_DualAddressCmd+0xc>
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	e003      	b.n	8002c02 <I2C_DualAddressCmd+0x14>
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	8183      	strh	r3, [r0, #12]
 8002c04:	4770      	bx	lr

08002c06 <I2C_GeneralCallCmd>:
 8002c06:	8803      	ldrh	r3, [r0, #0]
 8002c08:	b119      	cbz	r1, 8002c12 <I2C_GeneralCallCmd+0xc>
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c10:	e003      	b.n	8002c1a <I2C_GeneralCallCmd+0x14>
 8002c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	8003      	strh	r3, [r0, #0]
 8002c1c:	4770      	bx	lr

08002c1e <I2C_ITConfig>:
 8002c1e:	8883      	ldrh	r3, [r0, #4]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b10a      	cbz	r2, 8002c28 <I2C_ITConfig+0xa>
 8002c24:	4319      	orrs	r1, r3
 8002c26:	e001      	b.n	8002c2c <I2C_ITConfig+0xe>
 8002c28:	ea23 0101 	bic.w	r1, r3, r1
 8002c2c:	8081      	strh	r1, [r0, #4]
 8002c2e:	4770      	bx	lr

08002c30 <I2C_SendData>:
 8002c30:	8201      	strh	r1, [r0, #16]
 8002c32:	4770      	bx	lr

08002c34 <I2C_ReceiveData>:
 8002c34:	8a00      	ldrh	r0, [r0, #16]
 8002c36:	b2c0      	uxtb	r0, r0
 8002c38:	4770      	bx	lr

08002c3a <I2C_Send7bitAddress>:
 8002c3a:	b112      	cbz	r2, 8002c42 <I2C_Send7bitAddress+0x8>
 8002c3c:	f041 0101 	orr.w	r1, r1, #1
 8002c40:	e001      	b.n	8002c46 <I2C_Send7bitAddress+0xc>
 8002c42:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8002c46:	b289      	uxth	r1, r1
 8002c48:	8201      	strh	r1, [r0, #16]
 8002c4a:	4770      	bx	lr

08002c4c <I2C_ReadRegister>:
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	9001      	str	r0, [sp, #4]
 8002c54:	9b01      	ldr	r3, [sp, #4]
 8002c56:	4419      	add	r1, r3
 8002c58:	9101      	str	r1, [sp, #4]
 8002c5a:	9b01      	ldr	r3, [sp, #4]
 8002c5c:	8818      	ldrh	r0, [r3, #0]
 8002c5e:	b280      	uxth	r0, r0
 8002c60:	b002      	add	sp, #8
 8002c62:	4770      	bx	lr

08002c64 <I2C_SoftwareResetCmd>:
 8002c64:	8803      	ldrh	r3, [r0, #0]
 8002c66:	b129      	cbz	r1, 8002c74 <I2C_SoftwareResetCmd+0x10>
 8002c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	e001      	b.n	8002c78 <I2C_SoftwareResetCmd+0x14>
 8002c74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002c78:	8003      	strh	r3, [r0, #0]
 8002c7a:	4770      	bx	lr

08002c7c <I2C_SMBusAlertConfig>:
 8002c7c:	8803      	ldrh	r3, [r0, #0]
 8002c7e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002c82:	bf15      	itete	ne
 8002c84:	f423 5300 	bicne.w	r3, r3, #8192	; 0x2000
 8002c88:	b29b      	uxtheq	r3, r3
 8002c8a:	041b      	lslne	r3, r3, #16
 8002c8c:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
 8002c90:	bf18      	it	ne
 8002c92:	0c1b      	lsrne	r3, r3, #16
 8002c94:	8003      	strh	r3, [r0, #0]
 8002c96:	4770      	bx	lr

08002c98 <I2C_TransmitPEC>:
 8002c98:	8803      	ldrh	r3, [r0, #0]
 8002c9a:	b119      	cbz	r1, 8002ca4 <I2C_TransmitPEC+0xc>
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca2:	e003      	b.n	8002cac <I2C_TransmitPEC+0x14>
 8002ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ca8:	041b      	lsls	r3, r3, #16
 8002caa:	0c1b      	lsrs	r3, r3, #16
 8002cac:	8003      	strh	r3, [r0, #0]
 8002cae:	4770      	bx	lr

08002cb0 <I2C_PECPositionConfig>:
 8002cb0:	8803      	ldrh	r3, [r0, #0]
 8002cb2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002cb6:	bf15      	itete	ne
 8002cb8:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
 8002cbc:	b29b      	uxtheq	r3, r3
 8002cbe:	041b      	lslne	r3, r3, #16
 8002cc0:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 8002cc4:	bf18      	it	ne
 8002cc6:	0c1b      	lsrne	r3, r3, #16
 8002cc8:	8003      	strh	r3, [r0, #0]
 8002cca:	4770      	bx	lr

08002ccc <I2C_NACKPositionConfig>:
 8002ccc:	f7ff bff0 	b.w	8002cb0 <I2C_PECPositionConfig>

08002cd0 <I2C_CalculatePEC>:
 8002cd0:	8803      	ldrh	r3, [r0, #0]
 8002cd2:	b119      	cbz	r1, 8002cdc <I2C_CalculatePEC+0xc>
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
 8002cda:	e003      	b.n	8002ce4 <I2C_CalculatePEC+0x14>
 8002cdc:	f023 0320 	bic.w	r3, r3, #32
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	8003      	strh	r3, [r0, #0]
 8002ce6:	4770      	bx	lr

08002ce8 <I2C_GetPEC>:
 8002ce8:	8b00      	ldrh	r0, [r0, #24]
 8002cea:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002cee:	4770      	bx	lr

08002cf0 <I2C_ARPCmd>:
 8002cf0:	8803      	ldrh	r3, [r0, #0]
 8002cf2:	b119      	cbz	r1, 8002cfc <I2C_ARPCmd+0xc>
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	f043 0310 	orr.w	r3, r3, #16
 8002cfa:	e003      	b.n	8002d04 <I2C_ARPCmd+0x14>
 8002cfc:	f023 0310 	bic.w	r3, r3, #16
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	8003      	strh	r3, [r0, #0]
 8002d06:	4770      	bx	lr

08002d08 <I2C_StretchClockCmd>:
 8002d08:	8803      	ldrh	r3, [r0, #0]
 8002d0a:	b919      	cbnz	r1, 8002d14 <I2C_StretchClockCmd+0xc>
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d12:	e003      	b.n	8002d1c <I2C_StretchClockCmd+0x14>
 8002d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	8003      	strh	r3, [r0, #0]
 8002d1e:	4770      	bx	lr

08002d20 <I2C_FastModeDutyCycleConfig>:
 8002d20:	8b83      	ldrh	r3, [r0, #28]
 8002d22:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002d26:	bf1b      	ittet	ne
 8002d28:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8002d2c:	041b      	lslne	r3, r3, #16
 8002d2e:	b29b      	uxtheq	r3, r3
 8002d30:	0c1b      	lsrne	r3, r3, #16
 8002d32:	bf08      	it	eq
 8002d34:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002d38:	8383      	strh	r3, [r0, #28]
 8002d3a:	4770      	bx	lr

08002d3c <I2C_CheckEvent>:
 8002d3c:	8a83      	ldrh	r3, [r0, #20]
 8002d3e:	8b00      	ldrh	r0, [r0, #24]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002d46:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8002d4a:	ea03 0002 	and.w	r0, r3, r2
 8002d4e:	1a43      	subs	r3, r0, r1
 8002d50:	4258      	negs	r0, r3
 8002d52:	4158      	adcs	r0, r3
 8002d54:	4770      	bx	lr

08002d56 <I2C_GetLastEvent>:
 8002d56:	8a83      	ldrh	r3, [r0, #20]
 8002d58:	8b00      	ldrh	r0, [r0, #24]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002d60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002d64:	4770      	bx	lr

08002d66 <I2C_GetFlagStatus>:
 8002d66:	b082      	sub	sp, #8
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	0f0b      	lsrs	r3, r1, #28
 8002d70:	9001      	str	r0, [sp, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	9b00      	ldr	r3, [sp, #0]
 8002d76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002d7a:	b113      	cbz	r3, 8002d82 <I2C_GetFlagStatus+0x1c>
 8002d7c:	9b01      	ldr	r3, [sp, #4]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	e002      	b.n	8002d88 <I2C_GetFlagStatus+0x22>
 8002d82:	9b01      	ldr	r3, [sp, #4]
 8002d84:	0c09      	lsrs	r1, r1, #16
 8002d86:	3318      	adds	r3, #24
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	9b01      	ldr	r3, [sp, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4219      	tst	r1, r3
 8002d90:	bf14      	ite	ne
 8002d92:	2001      	movne	r0, #1
 8002d94:	2000      	moveq	r0, #0
 8002d96:	b002      	add	sp, #8
 8002d98:	4770      	bx	lr

08002d9a <I2C_ClearFlag>:
 8002d9a:	43c9      	mvns	r1, r1
 8002d9c:	b289      	uxth	r1, r1
 8002d9e:	8281      	strh	r1, [r0, #20]
 8002da0:	4770      	bx	lr

08002da2 <I2C_GetITStatus>:
 8002da2:	8883      	ldrh	r3, [r0, #4]
 8002da4:	8a80      	ldrh	r0, [r0, #20]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b280      	uxth	r0, r0
 8002daa:	4008      	ands	r0, r1
 8002dac:	d006      	beq.n	8002dbc <I2C_GetITStatus+0x1a>
 8002dae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002db2:	ea13 4311 	ands.w	r3, r3, r1, lsr #16
 8002db6:	bf14      	ite	ne
 8002db8:	2001      	movne	r0, #1
 8002dba:	2000      	moveq	r0, #0
 8002dbc:	4770      	bx	lr

08002dbe <I2C_ClearITPendingBit>:
 8002dbe:	43c9      	mvns	r1, r1
 8002dc0:	b289      	uxth	r1, r1
 8002dc2:	8281      	strh	r1, [r0, #20]
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop

08002dc8 <IWDG_WriteAccessCmd>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <IWDG_WriteAccessCmd+0x8>)
 8002dca:	6018      	str	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40003000 	.word	0x40003000

08002dd4 <IWDG_SetPrescaler>:
 8002dd4:	4b01      	ldr	r3, [pc, #4]	; (8002ddc <IWDG_SetPrescaler+0x8>)
 8002dd6:	6058      	str	r0, [r3, #4]
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40003000 	.word	0x40003000

08002de0 <IWDG_SetReload>:
 8002de0:	4b01      	ldr	r3, [pc, #4]	; (8002de8 <IWDG_SetReload+0x8>)
 8002de2:	6098      	str	r0, [r3, #8]
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40003000 	.word	0x40003000

08002dec <IWDG_ReloadCounter>:
 8002dec:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002df0:	4b01      	ldr	r3, [pc, #4]	; (8002df8 <IWDG_ReloadCounter+0xc>)
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40003000 	.word	0x40003000

08002dfc <IWDG_Enable>:
 8002dfc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002e00:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <IWDG_Enable+0xc>)
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40003000 	.word	0x40003000

08002e0c <IWDG_GetFlagStatus>:
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <IWDG_GetFlagStatus+0x10>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4218      	tst	r0, r3
 8002e12:	bf14      	ite	ne
 8002e14:	2001      	movne	r0, #1
 8002e16:	2000      	moveq	r0, #0
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40003000 	.word	0x40003000

08002e20 <PWR_DeInit>:
 8002e20:	b508      	push	{r3, lr}
 8002e22:	2101      	movs	r1, #1
 8002e24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002e28:	f000 f9a4 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8002e2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e30:	2100      	movs	r1, #0
 8002e32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002e36:	f000 b99d 	b.w	8003174 <RCC_APB1PeriphResetCmd>

08002e3a <PWR_BackupAccessCmd>:
 8002e3a:	4b01      	ldr	r3, [pc, #4]	; (8002e40 <PWR_BackupAccessCmd+0x6>)
 8002e3c:	6018      	str	r0, [r3, #0]
 8002e3e:	4770      	bx	lr
 8002e40:	420e0020 	.word	0x420e0020

08002e44 <PWR_PVDCmd>:
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <PWR_PVDCmd+0x8>)
 8002e46:	6018      	str	r0, [r3, #0]
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	420e0010 	.word	0x420e0010

08002e50 <PWR_PVDLevelConfig>:
 8002e50:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <PWR_PVDLevelConfig+0x10>)
 8002e52:	6813      	ldr	r3, [r2, #0]
 8002e54:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002e58:	4318      	orrs	r0, r3
 8002e5a:	6010      	str	r0, [r2, #0]
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40007000 	.word	0x40007000

08002e64 <PWR_WakeUpPinCmd>:
 8002e64:	4b01      	ldr	r3, [pc, #4]	; (8002e6c <PWR_WakeUpPinCmd+0x8>)
 8002e66:	6018      	str	r0, [r3, #0]
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	420e00a0 	.word	0x420e00a0

08002e70 <PWR_EnterSTOPMode>:
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <PWR_EnterSTOPMode+0x2c>)
 8002e72:	2901      	cmp	r1, #1
 8002e74:	6813      	ldr	r3, [r2, #0]
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	ea40 0003 	orr.w	r0, r0, r3
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <PWR_EnterSTOPMode+0x30>)
 8002e80:	6010      	str	r0, [r2, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	f042 0204 	orr.w	r2, r2, #4
 8002e88:	611a      	str	r2, [r3, #16]
 8002e8a:	d101      	bne.n	8002e90 <PWR_EnterSTOPMode+0x20>
 8002e8c:	bf30      	wfi
 8002e8e:	e000      	b.n	8002e92 <PWR_EnterSTOPMode+0x22>
 8002e90:	bf20      	wfe
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	f022 0204 	bic.w	r2, r2, #4
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	4770      	bx	lr
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <PWR_EnterSTANDBYMode>:
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <PWR_EnterSTANDBYMode+0x20>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f042 0204 	orr.w	r2, r2, #4
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	f042 0202 	orr.w	r2, r2, #2
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <PWR_EnterSTANDBYMode+0x24>)
 8002eb8:	6913      	ldr	r3, [r2, #16]
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6113      	str	r3, [r2, #16]
 8002ec0:	bf30      	wfi
 8002ec2:	4770      	bx	lr
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <PWR_GetFlagStatus>:
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <PWR_GetFlagStatus+0x10>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	4203      	tst	r3, r0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2001      	movne	r0, #1
 8002ed6:	2000      	moveq	r0, #0
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40007000 	.word	0x40007000

08002ee0 <PWR_ClearFlag>:
 8002ee0:	4a02      	ldr	r2, [pc, #8]	; (8002eec <PWR_ClearFlag+0xc>)
 8002ee2:	6813      	ldr	r3, [r2, #0]
 8002ee4:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 8002ee8:	6010      	str	r0, [r2, #0]
 8002eea:	4770      	bx	lr
 8002eec:	40007000 	.word	0x40007000

08002ef0 <RCC_DeInit>:
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <RCC_DeInit+0x38>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <RCC_DeInit+0x3c>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	f8ff0000 	.word	0xf8ff0000

08002f30 <RCC_HSEConfig>:
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <RCC_HSEConfig+0x34>)
 8002f32:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	d003      	beq.n	8002f50 <RCC_HSEConfig+0x20>
 8002f48:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8002f4c:	d004      	beq.n	8002f58 <RCC_HSEConfig+0x28>
 8002f4e:	4770      	bx	lr
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f56:	e002      	b.n	8002f5e <RCC_HSEConfig+0x2e>
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <RCC_AdjustHSICalibrationValue>:
 8002f68:	4a03      	ldr	r2, [pc, #12]	; (8002f78 <RCC_AdjustHSICalibrationValue+0x10>)
 8002f6a:	6813      	ldr	r3, [r2, #0]
 8002f6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f70:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8002f74:	6010      	str	r0, [r2, #0]
 8002f76:	4770      	bx	lr
 8002f78:	40021000 	.word	0x40021000

08002f7c <RCC_HSICmd>:
 8002f7c:	4b01      	ldr	r3, [pc, #4]	; (8002f84 <RCC_HSICmd+0x8>)
 8002f7e:	6018      	str	r0, [r3, #0]
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	42420000 	.word	0x42420000

08002f88 <RCC_PLLConfig>:
 8002f88:	4a03      	ldr	r2, [pc, #12]	; (8002f98 <RCC_PLLConfig+0x10>)
 8002f8a:	6853      	ldr	r3, [r2, #4]
 8002f8c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002f90:	4319      	orrs	r1, r3
 8002f92:	4308      	orrs	r0, r1
 8002f94:	6050      	str	r0, [r2, #4]
 8002f96:	4770      	bx	lr
 8002f98:	40021000 	.word	0x40021000

08002f9c <RCC_PLLCmd>:
 8002f9c:	4b01      	ldr	r3, [pc, #4]	; (8002fa4 <RCC_PLLCmd+0x8>)
 8002f9e:	6018      	str	r0, [r3, #0]
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	42420060 	.word	0x42420060

08002fa8 <RCC_SYSCLKConfig>:
 8002fa8:	4a03      	ldr	r2, [pc, #12]	; (8002fb8 <RCC_SYSCLKConfig+0x10>)
 8002faa:	6853      	ldr	r3, [r2, #4]
 8002fac:	f023 0303 	bic.w	r3, r3, #3
 8002fb0:	4318      	orrs	r0, r3
 8002fb2:	6050      	str	r0, [r2, #4]
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000

08002fbc <RCC_GetSYSCLKSource>:
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <RCC_GetSYSCLKSource+0xc>)
 8002fbe:	6858      	ldr	r0, [r3, #4]
 8002fc0:	f000 000c 	and.w	r0, r0, #12
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000

08002fcc <RCC_HCLKConfig>:
 8002fcc:	4a03      	ldr	r2, [pc, #12]	; (8002fdc <RCC_HCLKConfig+0x10>)
 8002fce:	6853      	ldr	r3, [r2, #4]
 8002fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fd4:	4318      	orrs	r0, r3
 8002fd6:	6050      	str	r0, [r2, #4]
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <RCC_PCLK1Config>:
 8002fe0:	4a03      	ldr	r2, [pc, #12]	; (8002ff0 <RCC_PCLK1Config+0x10>)
 8002fe2:	6853      	ldr	r3, [r2, #4]
 8002fe4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fe8:	4318      	orrs	r0, r3
 8002fea:	6050      	str	r0, [r2, #4]
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <RCC_PCLK2Config>:
 8002ff4:	4a03      	ldr	r2, [pc, #12]	; (8003004 <RCC_PCLK2Config+0x10>)
 8002ff6:	6853      	ldr	r3, [r2, #4]
 8002ff8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ffc:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003000:	6050      	str	r0, [r2, #4]
 8003002:	4770      	bx	lr
 8003004:	40021000 	.word	0x40021000

08003008 <RCC_ITConfig>:
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <RCC_ITConfig+0x14>)
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	b109      	cbz	r1, 8003012 <RCC_ITConfig+0xa>
 800300e:	4310      	orrs	r0, r2
 8003010:	e001      	b.n	8003016 <RCC_ITConfig+0xe>
 8003012:	ea22 0000 	bic.w	r0, r2, r0
 8003016:	7018      	strb	r0, [r3, #0]
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40021009 	.word	0x40021009

08003020 <RCC_USBCLKConfig>:
 8003020:	4b01      	ldr	r3, [pc, #4]	; (8003028 <RCC_USBCLKConfig+0x8>)
 8003022:	6018      	str	r0, [r3, #0]
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	424200d8 	.word	0x424200d8

0800302c <RCC_ADCCLKConfig>:
 800302c:	4a03      	ldr	r2, [pc, #12]	; (800303c <RCC_ADCCLKConfig+0x10>)
 800302e:	6853      	ldr	r3, [r2, #4]
 8003030:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003034:	4318      	orrs	r0, r3
 8003036:	6050      	str	r0, [r2, #4]
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000

08003040 <RCC_LSEConfig>:
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <RCC_LSEConfig+0x1c>)
 8003042:	2200      	movs	r2, #0
 8003044:	2801      	cmp	r0, #1
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	d002      	beq.n	8003052 <RCC_LSEConfig+0x12>
 800304c:	2804      	cmp	r0, #4
 800304e:	d002      	beq.n	8003056 <RCC_LSEConfig+0x16>
 8003050:	4770      	bx	lr
 8003052:	7018      	strb	r0, [r3, #0]
 8003054:	4770      	bx	lr
 8003056:	2205      	movs	r2, #5
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	4770      	bx	lr
 800305c:	40021020 	.word	0x40021020

08003060 <RCC_LSICmd>:
 8003060:	4b01      	ldr	r3, [pc, #4]	; (8003068 <RCC_LSICmd+0x8>)
 8003062:	6018      	str	r0, [r3, #0]
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	42420480 	.word	0x42420480

0800306c <RCC_RTCCLKConfig>:
 800306c:	4a02      	ldr	r2, [pc, #8]	; (8003078 <RCC_RTCCLKConfig+0xc>)
 800306e:	6a13      	ldr	r3, [r2, #32]
 8003070:	4318      	orrs	r0, r3
 8003072:	6210      	str	r0, [r2, #32]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000

0800307c <RCC_RTCCLKCmd>:
 800307c:	4b01      	ldr	r3, [pc, #4]	; (8003084 <RCC_RTCCLKCmd+0x8>)
 800307e:	6018      	str	r0, [r3, #0]
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	4242043c 	.word	0x4242043c

08003088 <RCC_GetClocksFreq>:
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <RCC_GetClocksFreq+0x78>)
 800308a:	b510      	push	{r4, lr}
 800308c:	6853      	ldr	r3, [r2, #4]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d003      	beq.n	800309e <RCC_GetClocksFreq+0x16>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d003      	beq.n	80030a2 <RCC_GetClocksFreq+0x1a>
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <RCC_GetClocksFreq+0x7c>)
 800309c:	e011      	b.n	80030c2 <RCC_GetClocksFreq+0x3a>
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <RCC_GetClocksFreq+0x80>)
 80030a0:	e00f      	b.n	80030c2 <RCC_GetClocksFreq+0x3a>
 80030a2:	6853      	ldr	r3, [r2, #4]
 80030a4:	6851      	ldr	r1, [r2, #4]
 80030a6:	f3c3 4383 	ubfx	r3, r3, #18, #4
 80030aa:	03cc      	lsls	r4, r1, #15
 80030ac:	f103 0302 	add.w	r3, r3, #2
 80030b0:	d401      	bmi.n	80030b6 <RCC_GetClocksFreq+0x2e>
 80030b2:	4916      	ldr	r1, [pc, #88]	; (800310c <RCC_GetClocksFreq+0x84>)
 80030b4:	e004      	b.n	80030c0 <RCC_GetClocksFreq+0x38>
 80030b6:	6851      	ldr	r1, [r2, #4]
 80030b8:	0389      	lsls	r1, r1, #14
 80030ba:	bf4c      	ite	mi
 80030bc:	4911      	ldrmi	r1, [pc, #68]	; (8003104 <RCC_GetClocksFreq+0x7c>)
 80030be:	4912      	ldrpl	r1, [pc, #72]	; (8003108 <RCC_GetClocksFreq+0x80>)
 80030c0:	434b      	muls	r3, r1
 80030c2:	6003      	str	r3, [r0, #0]
 80030c4:	6853      	ldr	r3, [r2, #4]
 80030c6:	4912      	ldr	r1, [pc, #72]	; (8003110 <RCC_GetClocksFreq+0x88>)
 80030c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030cc:	5ccc      	ldrb	r4, [r1, r3]
 80030ce:	6803      	ldr	r3, [r0, #0]
 80030d0:	40e3      	lsrs	r3, r4
 80030d2:	6043      	str	r3, [r0, #4]
 80030d4:	6854      	ldr	r4, [r2, #4]
 80030d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
 80030da:	5d0c      	ldrb	r4, [r1, r4]
 80030dc:	fa23 f404 	lsr.w	r4, r3, r4
 80030e0:	6084      	str	r4, [r0, #8]
 80030e2:	6854      	ldr	r4, [r2, #4]
 80030e4:	f3c4 24c2 	ubfx	r4, r4, #11, #3
 80030e8:	5d0c      	ldrb	r4, [r1, r4]
 80030ea:	40e3      	lsrs	r3, r4
 80030ec:	60c3      	str	r3, [r0, #12]
 80030ee:	6852      	ldr	r2, [r2, #4]
 80030f0:	f3c2 3281 	ubfx	r2, r2, #14, #2
 80030f4:	440a      	add	r2, r1
 80030f6:	7c12      	ldrb	r2, [r2, #16]
 80030f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030fc:	6103      	str	r3, [r0, #16]
 80030fe:	bd10      	pop	{r4, pc}
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	00f42400 	.word	0x00f42400
 800310c:	003d0900 	.word	0x003d0900
 8003110:	20000018 	.word	0x20000018

08003114 <RCC_AHBPeriphClockCmd>:
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <RCC_AHBPeriphClockCmd+0x14>)
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	b109      	cbz	r1, 800311e <RCC_AHBPeriphClockCmd+0xa>
 800311a:	4310      	orrs	r0, r2
 800311c:	e001      	b.n	8003122 <RCC_AHBPeriphClockCmd+0xe>
 800311e:	ea22 0000 	bic.w	r0, r2, r0
 8003122:	6158      	str	r0, [r3, #20]
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000

0800312c <RCC_APB2PeriphClockCmd>:
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <RCC_APB2PeriphClockCmd+0x14>)
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	b109      	cbz	r1, 8003136 <RCC_APB2PeriphClockCmd+0xa>
 8003132:	4310      	orrs	r0, r2
 8003134:	e001      	b.n	800313a <RCC_APB2PeriphClockCmd+0xe>
 8003136:	ea22 0000 	bic.w	r0, r2, r0
 800313a:	6198      	str	r0, [r3, #24]
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000

08003144 <RCC_APB1PeriphClockCmd>:
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <RCC_APB1PeriphClockCmd+0x14>)
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	b109      	cbz	r1, 800314e <RCC_APB1PeriphClockCmd+0xa>
 800314a:	4310      	orrs	r0, r2
 800314c:	e001      	b.n	8003152 <RCC_APB1PeriphClockCmd+0xe>
 800314e:	ea22 0000 	bic.w	r0, r2, r0
 8003152:	61d8      	str	r0, [r3, #28]
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000

0800315c <RCC_APB2PeriphResetCmd>:
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <RCC_APB2PeriphResetCmd+0x14>)
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	b109      	cbz	r1, 8003166 <RCC_APB2PeriphResetCmd+0xa>
 8003162:	4310      	orrs	r0, r2
 8003164:	e001      	b.n	800316a <RCC_APB2PeriphResetCmd+0xe>
 8003166:	ea22 0000 	bic.w	r0, r2, r0
 800316a:	60d8      	str	r0, [r3, #12]
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000

08003174 <RCC_APB1PeriphResetCmd>:
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <RCC_APB1PeriphResetCmd+0x14>)
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	b109      	cbz	r1, 800317e <RCC_APB1PeriphResetCmd+0xa>
 800317a:	4310      	orrs	r0, r2
 800317c:	e001      	b.n	8003182 <RCC_APB1PeriphResetCmd+0xe>
 800317e:	ea22 0000 	bic.w	r0, r2, r0
 8003182:	6118      	str	r0, [r3, #16]
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40021000 	.word	0x40021000

0800318c <RCC_BackupResetCmd>:
 800318c:	4b01      	ldr	r3, [pc, #4]	; (8003194 <RCC_BackupResetCmd+0x8>)
 800318e:	6018      	str	r0, [r3, #0]
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	42420440 	.word	0x42420440

08003198 <RCC_ClockSecuritySystemCmd>:
 8003198:	4b01      	ldr	r3, [pc, #4]	; (80031a0 <RCC_ClockSecuritySystemCmd+0x8>)
 800319a:	6018      	str	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	4242004c 	.word	0x4242004c

080031a4 <RCC_MCOConfig>:
 80031a4:	4b01      	ldr	r3, [pc, #4]	; (80031ac <RCC_MCOConfig+0x8>)
 80031a6:	7018      	strb	r0, [r3, #0]
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40021007 	.word	0x40021007

080031b0 <RCC_GetFlagStatus>:
 80031b0:	0942      	lsrs	r2, r0, #5
 80031b2:	2a01      	cmp	r2, #1
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <RCC_GetFlagStatus+0x24>)
 80031b6:	d101      	bne.n	80031bc <RCC_GetFlagStatus+0xc>
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	e003      	b.n	80031c4 <RCC_GetFlagStatus+0x14>
 80031bc:	2a02      	cmp	r2, #2
 80031be:	bf0c      	ite	eq
 80031c0:	6a1b      	ldreq	r3, [r3, #32]
 80031c2:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 80031c4:	f000 001f 	and.w	r0, r0, #31
 80031c8:	fa23 f000 	lsr.w	r0, r3, r0
 80031cc:	f000 0001 	and.w	r0, r0, #1
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000

080031d8 <RCC_WaitForHSEStartUp>:
 80031d8:	b507      	push	{r0, r1, r2, lr}
 80031da:	2300      	movs	r3, #0
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	2031      	movs	r0, #49	; 0x31
 80031e0:	f7ff ffe6 	bl	80031b0 <RCC_GetFlagStatus>
 80031e4:	9b01      	ldr	r3, [sp, #4]
 80031e6:	3301      	adds	r3, #1
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	9b01      	ldr	r3, [sp, #4]
 80031ec:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80031f0:	d001      	beq.n	80031f6 <RCC_WaitForHSEStartUp+0x1e>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d0f3      	beq.n	80031de <RCC_WaitForHSEStartUp+0x6>
 80031f6:	2031      	movs	r0, #49	; 0x31
 80031f8:	f7ff ffda 	bl	80031b0 <RCC_GetFlagStatus>
 80031fc:	3000      	adds	r0, #0
 80031fe:	bf18      	it	ne
 8003200:	2001      	movne	r0, #1
 8003202:	b003      	add	sp, #12
 8003204:	f85d fb04 	ldr.w	pc, [sp], #4

08003208 <RCC_ClearFlag>:
 8003208:	4a02      	ldr	r2, [pc, #8]	; (8003214 <RCC_ClearFlag+0xc>)
 800320a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800320c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003210:	6253      	str	r3, [r2, #36]	; 0x24
 8003212:	4770      	bx	lr
 8003214:	40021000 	.word	0x40021000

08003218 <RCC_GetITStatus>:
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <RCC_GetITStatus+0x10>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4218      	tst	r0, r3
 800321e:	bf14      	ite	ne
 8003220:	2001      	movne	r0, #1
 8003222:	2000      	moveq	r0, #0
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000

0800322c <RCC_ClearITPendingBit>:
 800322c:	4b01      	ldr	r3, [pc, #4]	; (8003234 <RCC_ClearITPendingBit+0x8>)
 800322e:	7018      	strb	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	4002100a 	.word	0x4002100a

08003238 <SPI_I2S_DeInit>:
 8003238:	b508      	push	{r3, lr}
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <SPI_I2S_DeInit+0x58>)
 800323c:	4298      	cmp	r0, r3
 800323e:	d10b      	bne.n	8003258 <SPI_I2S_DeInit+0x20>
 8003240:	2101      	movs	r1, #1
 8003242:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003246:	f7ff ff89 	bl	800315c <RCC_APB2PeriphResetCmd>
 800324a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800324e:	2100      	movs	r1, #0
 8003250:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003254:	f7ff bf82 	b.w	800315c <RCC_APB2PeriphResetCmd>
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <SPI_I2S_DeInit+0x5c>)
 800325a:	4298      	cmp	r0, r3
 800325c:	d108      	bne.n	8003270 <SPI_I2S_DeInit+0x38>
 800325e:	2101      	movs	r1, #1
 8003260:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003264:	f7ff ff86 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003268:	2100      	movs	r1, #0
 800326a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800326e:	e00a      	b.n	8003286 <SPI_I2S_DeInit+0x4e>
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <SPI_I2S_DeInit+0x60>)
 8003272:	4298      	cmp	r0, r3
 8003274:	d10b      	bne.n	800328e <SPI_I2S_DeInit+0x56>
 8003276:	2101      	movs	r1, #1
 8003278:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800327c:	f7ff ff7a 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003280:	2100      	movs	r1, #0
 8003282:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800328a:	f7ff bf73 	b.w	8003174 <RCC_APB1PeriphResetCmd>
 800328e:	bd08      	pop	{r3, pc}
 8003290:	40013000 	.word	0x40013000
 8003294:	40003800 	.word	0x40003800
 8003298:	40003c00 	.word	0x40003c00

0800329c <SPI_Init>:
 800329c:	8803      	ldrh	r3, [r0, #0]
 800329e:	880a      	ldrh	r2, [r1, #0]
 80032a0:	b510      	push	{r4, lr}
 80032a2:	f403 5441 	and.w	r4, r3, #12352	; 0x3040
 80032a6:	884b      	ldrh	r3, [r1, #2]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	888a      	ldrh	r2, [r1, #4]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	88ca      	ldrh	r2, [r1, #6]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	890a      	ldrh	r2, [r1, #8]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	894a      	ldrh	r2, [r1, #10]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	898a      	ldrh	r2, [r1, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	89ca      	ldrh	r2, [r1, #14]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	4323      	orrs	r3, r4
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	8003      	strh	r3, [r0, #0]
 80032c8:	8b83      	ldrh	r3, [r0, #28]
 80032ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	8383      	strh	r3, [r0, #28]
 80032d4:	8a0b      	ldrh	r3, [r1, #16]
 80032d6:	8203      	strh	r3, [r0, #16]
 80032d8:	bd10      	pop	{r4, pc}

080032da <I2S_Init>:
 80032da:	8b83      	ldrh	r3, [r0, #28]
 80032dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032e2:	f023 030f 	bic.w	r3, r3, #15
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	8383      	strh	r3, [r0, #28]
 80032ec:	2302      	movs	r3, #2
 80032ee:	8403      	strh	r3, [r0, #32]
 80032f0:	688b      	ldr	r3, [r1, #8]
 80032f2:	8b86      	ldrh	r6, [r0, #28]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	b087      	sub	sp, #28
 80032f8:	4605      	mov	r5, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	b2b6      	uxth	r6, r6
 80032fe:	d023      	beq.n	8003348 <I2S_Init+0x6e>
 8003300:	888b      	ldrh	r3, [r1, #4]
 8003302:	a801      	add	r0, sp, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf14      	ite	ne
 8003308:	2702      	movne	r7, #2
 800330a:	2701      	moveq	r7, #1
 800330c:	f7ff febc 	bl	8003088 <RCC_GetClocksFreq>
 8003310:	88e3      	ldrh	r3, [r4, #6]
 8003312:	9901      	ldr	r1, [sp, #4]
 8003314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003318:	bf1c      	itt	ne
 800331a:	017f      	lslne	r7, r7, #5
 800331c:	fbb1 f1f7 	udivne	r1, r1, r7
 8003320:	f04f 020a 	mov.w	r2, #10
 8003324:	bf08      	it	eq
 8003326:	0a09      	lsreq	r1, r1, #8
 8003328:	434a      	muls	r2, r1
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	3305      	adds	r3, #5
 8003332:	220a      	movs	r2, #10
 8003334:	b29b      	uxth	r3, r3
 8003336:	fbb3 f3f2 	udiv	r3, r3, r2
 800333a:	f003 0201 	and.w	r2, r3, #1
 800333e:	0212      	lsls	r2, r2, #8
 8003340:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8003344:	b292      	uxth	r2, r2
 8003346:	e000      	b.n	800334a <I2S_Init+0x70>
 8003348:	2200      	movs	r2, #0
 800334a:	1e99      	subs	r1, r3, #2
 800334c:	b289      	uxth	r1, r1
 800334e:	29fe      	cmp	r1, #254	; 0xfe
 8003350:	bf24      	itt	cs
 8003352:	2200      	movcs	r2, #0
 8003354:	2302      	movcs	r3, #2
 8003356:	4313      	orrs	r3, r2
 8003358:	88e2      	ldrh	r2, [r4, #6]
 800335a:	4313      	orrs	r3, r2
 800335c:	b29b      	uxth	r3, r3
 800335e:	842b      	strh	r3, [r5, #32]
 8003360:	8823      	ldrh	r3, [r4, #0]
 8003362:	88a2      	ldrh	r2, [r4, #4]
 8003364:	431e      	orrs	r6, r3
 8003366:	8863      	ldrh	r3, [r4, #2]
 8003368:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 800336c:	4333      	orrs	r3, r6
 800336e:	4313      	orrs	r3, r2
 8003370:	89a2      	ldrh	r2, [r4, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	b29b      	uxth	r3, r3
 8003376:	83ab      	strh	r3, [r5, #28]
 8003378:	b007      	add	sp, #28
 800337a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800337c <SPI_StructInit>:
 800337c:	2300      	movs	r3, #0
 800337e:	8003      	strh	r3, [r0, #0]
 8003380:	8043      	strh	r3, [r0, #2]
 8003382:	8083      	strh	r3, [r0, #4]
 8003384:	80c3      	strh	r3, [r0, #6]
 8003386:	8103      	strh	r3, [r0, #8]
 8003388:	8143      	strh	r3, [r0, #10]
 800338a:	8183      	strh	r3, [r0, #12]
 800338c:	81c3      	strh	r3, [r0, #14]
 800338e:	2307      	movs	r3, #7
 8003390:	8203      	strh	r3, [r0, #16]
 8003392:	4770      	bx	lr

08003394 <I2S_StructInit>:
 8003394:	2300      	movs	r3, #0
 8003396:	2202      	movs	r2, #2
 8003398:	8003      	strh	r3, [r0, #0]
 800339a:	8043      	strh	r3, [r0, #2]
 800339c:	8083      	strh	r3, [r0, #4]
 800339e:	80c3      	strh	r3, [r0, #6]
 80033a0:	6082      	str	r2, [r0, #8]
 80033a2:	8183      	strh	r3, [r0, #12]
 80033a4:	4770      	bx	lr

080033a6 <SPI_Cmd>:
 80033a6:	8803      	ldrh	r3, [r0, #0]
 80033a8:	b119      	cbz	r1, 80033b2 <SPI_Cmd+0xc>
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b0:	e003      	b.n	80033ba <SPI_Cmd+0x14>
 80033b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	8003      	strh	r3, [r0, #0]
 80033bc:	4770      	bx	lr

080033be <I2S_Cmd>:
 80033be:	8b83      	ldrh	r3, [r0, #28]
 80033c0:	b119      	cbz	r1, 80033ca <I2S_Cmd+0xc>
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c8:	e003      	b.n	80033d2 <I2S_Cmd+0x14>
 80033ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	8383      	strh	r3, [r0, #28]
 80033d4:	4770      	bx	lr

080033d6 <SPI_I2S_ITConfig>:
 80033d6:	2301      	movs	r3, #1
 80033d8:	0909      	lsrs	r1, r1, #4
 80033da:	fa03 f101 	lsl.w	r1, r3, r1
 80033de:	8883      	ldrh	r3, [r0, #4]
 80033e0:	b289      	uxth	r1, r1
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	b10a      	cbz	r2, 80033ea <SPI_I2S_ITConfig+0x14>
 80033e6:	4319      	orrs	r1, r3
 80033e8:	e001      	b.n	80033ee <SPI_I2S_ITConfig+0x18>
 80033ea:	ea23 0101 	bic.w	r1, r3, r1
 80033ee:	8081      	strh	r1, [r0, #4]
 80033f0:	4770      	bx	lr

080033f2 <SPI_I2S_DMACmd>:
 80033f2:	8883      	ldrh	r3, [r0, #4]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	b10a      	cbz	r2, 80033fc <SPI_I2S_DMACmd+0xa>
 80033f8:	4319      	orrs	r1, r3
 80033fa:	e001      	b.n	8003400 <SPI_I2S_DMACmd+0xe>
 80033fc:	ea23 0101 	bic.w	r1, r3, r1
 8003400:	8081      	strh	r1, [r0, #4]
 8003402:	4770      	bx	lr

08003404 <SPI_I2S_SendData>:
 8003404:	8181      	strh	r1, [r0, #12]
 8003406:	4770      	bx	lr

08003408 <SPI_I2S_ReceiveData>:
 8003408:	8980      	ldrh	r0, [r0, #12]
 800340a:	b280      	uxth	r0, r0
 800340c:	4770      	bx	lr

0800340e <SPI_NSSInternalSoftwareConfig>:
 800340e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8003412:	4299      	cmp	r1, r3
 8003414:	8803      	ldrh	r3, [r0, #0]
 8003416:	bf0b      	itete	eq
 8003418:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
 800341c:	b29b      	uxthne	r3, r3
 800341e:	041b      	lsleq	r3, r3, #16
 8003420:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
 8003424:	bf08      	it	eq
 8003426:	0c1b      	lsreq	r3, r3, #16
 8003428:	8003      	strh	r3, [r0, #0]
 800342a:	4770      	bx	lr

0800342c <SPI_SSOutputCmd>:
 800342c:	8883      	ldrh	r3, [r0, #4]
 800342e:	b119      	cbz	r1, 8003438 <SPI_SSOutputCmd+0xc>
 8003430:	b29b      	uxth	r3, r3
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	e003      	b.n	8003440 <SPI_SSOutputCmd+0x14>
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	8083      	strh	r3, [r0, #4]
 8003442:	4770      	bx	lr

08003444 <SPI_DataSizeConfig>:
 8003444:	8803      	ldrh	r3, [r0, #0]
 8003446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	8003      	strh	r3, [r0, #0]
 8003450:	8803      	ldrh	r3, [r0, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	4319      	orrs	r1, r3
 8003456:	8001      	strh	r1, [r0, #0]
 8003458:	4770      	bx	lr

0800345a <SPI_TransmitCRC>:
 800345a:	8803      	ldrh	r3, [r0, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003462:	8003      	strh	r3, [r0, #0]
 8003464:	4770      	bx	lr

08003466 <SPI_CalculateCRC>:
 8003466:	8803      	ldrh	r3, [r0, #0]
 8003468:	b119      	cbz	r1, 8003472 <SPI_CalculateCRC+0xc>
 800346a:	b29b      	uxth	r3, r3
 800346c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003470:	e003      	b.n	800347a <SPI_CalculateCRC+0x14>
 8003472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	8003      	strh	r3, [r0, #0]
 800347c:	4770      	bx	lr

0800347e <SPI_GetCRC>:
 800347e:	2901      	cmp	r1, #1
 8003480:	bf14      	ite	ne
 8003482:	8b00      	ldrhne	r0, [r0, #24]
 8003484:	8a80      	ldrheq	r0, [r0, #20]
 8003486:	b280      	uxth	r0, r0
 8003488:	4770      	bx	lr

0800348a <SPI_GetCRCPolynomial>:
 800348a:	8a00      	ldrh	r0, [r0, #16]
 800348c:	b280      	uxth	r0, r0
 800348e:	4770      	bx	lr

08003490 <SPI_BiDirectionalLineConfig>:
 8003490:	8803      	ldrh	r3, [r0, #0]
 8003492:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003496:	bf15      	itete	ne
 8003498:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 800349c:	b29b      	uxtheq	r3, r3
 800349e:	041b      	lslne	r3, r3, #16
 80034a0:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 80034a4:	bf18      	it	ne
 80034a6:	0c1b      	lsrne	r3, r3, #16
 80034a8:	8003      	strh	r3, [r0, #0]
 80034aa:	4770      	bx	lr

080034ac <SPI_I2S_GetFlagStatus>:
 80034ac:	8903      	ldrh	r3, [r0, #8]
 80034ae:	4219      	tst	r1, r3
 80034b0:	bf14      	ite	ne
 80034b2:	2001      	movne	r0, #1
 80034b4:	2000      	moveq	r0, #0
 80034b6:	4770      	bx	lr

080034b8 <SPI_I2S_ClearFlag>:
 80034b8:	43c9      	mvns	r1, r1
 80034ba:	b289      	uxth	r1, r1
 80034bc:	8101      	strh	r1, [r0, #8]
 80034be:	4770      	bx	lr

080034c0 <SPI_I2S_GetITStatus>:
 80034c0:	b510      	push	{r4, lr}
 80034c2:	8884      	ldrh	r4, [r0, #4]
 80034c4:	8903      	ldrh	r3, [r0, #8]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f001 000f 	and.w	r0, r1, #15
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	fa02 f000 	lsl.w	r0, r2, r0
 80034d2:	4018      	ands	r0, r3
 80034d4:	b2a4      	uxth	r4, r4
 80034d6:	d005      	beq.n	80034e4 <SPI_I2S_GetITStatus+0x24>
 80034d8:	0909      	lsrs	r1, r1, #4
 80034da:	408a      	lsls	r2, r1
 80034dc:	4214      	tst	r4, r2
 80034de:	bf14      	ite	ne
 80034e0:	2001      	movne	r0, #1
 80034e2:	2000      	moveq	r0, #0
 80034e4:	bd10      	pop	{r4, pc}

080034e6 <SPI_I2S_ClearITPendingBit>:
 80034e6:	f001 010f 	and.w	r1, r1, #15
 80034ea:	2301      	movs	r3, #1
 80034ec:	fa03 f101 	lsl.w	r1, r3, r1
 80034f0:	43c9      	mvns	r1, r1
 80034f2:	b289      	uxth	r1, r1
 80034f4:	8101      	strh	r1, [r0, #8]
 80034f6:	4770      	bx	lr

080034f8 <USART_DeInit>:
 80034f8:	b508      	push	{r3, lr}
 80034fa:	4b21      	ldr	r3, [pc, #132]	; (8003580 <USART_DeInit+0x88>)
 80034fc:	4298      	cmp	r0, r3
 80034fe:	d10b      	bne.n	8003518 <USART_DeInit+0x20>
 8003500:	2101      	movs	r1, #1
 8003502:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003506:	f7ff fe29 	bl	800315c <RCC_APB2PeriphResetCmd>
 800350a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800350e:	2100      	movs	r1, #0
 8003510:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003514:	f7ff be22 	b.w	800315c <RCC_APB2PeriphResetCmd>
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <USART_DeInit+0x8c>)
 800351a:	4298      	cmp	r0, r3
 800351c:	d108      	bne.n	8003530 <USART_DeInit+0x38>
 800351e:	2101      	movs	r1, #1
 8003520:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003524:	f7ff fe26 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003528:	2100      	movs	r1, #0
 800352a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800352e:	e022      	b.n	8003576 <USART_DeInit+0x7e>
 8003530:	4b15      	ldr	r3, [pc, #84]	; (8003588 <USART_DeInit+0x90>)
 8003532:	4298      	cmp	r0, r3
 8003534:	d108      	bne.n	8003548 <USART_DeInit+0x50>
 8003536:	2101      	movs	r1, #1
 8003538:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800353c:	f7ff fe1a 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003540:	2100      	movs	r1, #0
 8003542:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003546:	e016      	b.n	8003576 <USART_DeInit+0x7e>
 8003548:	4b10      	ldr	r3, [pc, #64]	; (800358c <USART_DeInit+0x94>)
 800354a:	4298      	cmp	r0, r3
 800354c:	d108      	bne.n	8003560 <USART_DeInit+0x68>
 800354e:	2101      	movs	r1, #1
 8003550:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003554:	f7ff fe0e 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003558:	2100      	movs	r1, #0
 800355a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800355e:	e00a      	b.n	8003576 <USART_DeInit+0x7e>
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <USART_DeInit+0x98>)
 8003562:	4298      	cmp	r0, r3
 8003564:	d10b      	bne.n	800357e <USART_DeInit+0x86>
 8003566:	2101      	movs	r1, #1
 8003568:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800356c:	f7ff fe02 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003570:	2100      	movs	r1, #0
 8003572:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003576:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800357a:	f7ff bdfb 	b.w	8003174 <RCC_APB1PeriphResetCmd>
 800357e:	bd08      	pop	{r3, pc}
 8003580:	40013800 	.word	0x40013800
 8003584:	40004400 	.word	0x40004400
 8003588:	40004800 	.word	0x40004800
 800358c:	40004c00 	.word	0x40004c00
 8003590:	40005000 	.word	0x40005000

08003594 <USART_Init>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	460e      	mov	r6, r1
 8003598:	4604      	mov	r4, r0
 800359a:	8a03      	ldrh	r3, [r0, #16]
 800359c:	88ca      	ldrh	r2, [r1, #6]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035a4:	4313      	orrs	r3, r2
 80035a6:	8203      	strh	r3, [r0, #16]
 80035a8:	8982      	ldrh	r2, [r0, #12]
 80035aa:	8889      	ldrh	r1, [r1, #4]
 80035ac:	8933      	ldrh	r3, [r6, #8]
 80035ae:	b292      	uxth	r2, r2
 80035b0:	430b      	orrs	r3, r1
 80035b2:	8971      	ldrh	r1, [r6, #10]
 80035b4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80035b8:	430b      	orrs	r3, r1
 80035ba:	f022 020c 	bic.w	r2, r2, #12
 80035be:	4313      	orrs	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	8183      	strh	r3, [r0, #12]
 80035c4:	8a83      	ldrh	r3, [r0, #20]
 80035c6:	89b2      	ldrh	r2, [r6, #12]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ce:	b086      	sub	sp, #24
 80035d0:	4313      	orrs	r3, r2
 80035d2:	8283      	strh	r3, [r0, #20]
 80035d4:	a801      	add	r0, sp, #4
 80035d6:	f7ff fd57 	bl	8003088 <RCC_GetClocksFreq>
 80035da:	4a17      	ldr	r2, [pc, #92]	; (8003638 <USART_Init+0xa4>)
 80035dc:	9b03      	ldr	r3, [sp, #12]
 80035de:	9d04      	ldr	r5, [sp, #16]
 80035e0:	6831      	ldr	r1, [r6, #0]
 80035e2:	4294      	cmp	r4, r2
 80035e4:	bf18      	it	ne
 80035e6:	461d      	movne	r5, r3
 80035e8:	2219      	movs	r2, #25
 80035ea:	436a      	muls	r2, r5
 80035ec:	89a3      	ldrh	r3, [r4, #12]
 80035ee:	2664      	movs	r6, #100	; 0x64
 80035f0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80035f4:	bf14      	ite	ne
 80035f6:	004d      	lslne	r5, r1, #1
 80035f8:	008d      	lsleq	r5, r1, #2
 80035fa:	fbb2 f5f5 	udiv	r5, r2, r5
 80035fe:	fbb5 f0f6 	udiv	r0, r5, r6
 8003602:	89a2      	ldrh	r2, [r4, #12]
 8003604:	0100      	lsls	r0, r0, #4
 8003606:	0901      	lsrs	r1, r0, #4
 8003608:	0412      	lsls	r2, r2, #16
 800360a:	fb06 5311 	mls	r3, r6, r1, r5
 800360e:	d507      	bpl.n	8003620 <USART_Init+0x8c>
 8003610:	00d9      	lsls	r1, r3, #3
 8003612:	3132      	adds	r1, #50	; 0x32
 8003614:	fbb1 f2f6 	udiv	r2, r1, r6
 8003618:	f002 0207 	and.w	r2, r2, #7
 800361c:	4310      	orrs	r0, r2
 800361e:	e006      	b.n	800362e <USART_Init+0x9a>
 8003620:	011a      	lsls	r2, r3, #4
 8003622:	3232      	adds	r2, #50	; 0x32
 8003624:	fbb2 f3f6 	udiv	r3, r2, r6
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	4318      	orrs	r0, r3
 800362e:	b280      	uxth	r0, r0
 8003630:	8120      	strh	r0, [r4, #8]
 8003632:	b006      	add	sp, #24
 8003634:	bd70      	pop	{r4, r5, r6, pc}
 8003636:	bf00      	nop
 8003638:	40013800 	.word	0x40013800

0800363c <USART_StructInit>:
 800363c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003640:	6003      	str	r3, [r0, #0]
 8003642:	220c      	movs	r2, #12
 8003644:	2300      	movs	r3, #0
 8003646:	8083      	strh	r3, [r0, #4]
 8003648:	80c3      	strh	r3, [r0, #6]
 800364a:	8103      	strh	r3, [r0, #8]
 800364c:	8142      	strh	r2, [r0, #10]
 800364e:	8183      	strh	r3, [r0, #12]
 8003650:	4770      	bx	lr

08003652 <USART_ClockInit>:
 8003652:	884b      	ldrh	r3, [r1, #2]
 8003654:	b510      	push	{r4, lr}
 8003656:	880c      	ldrh	r4, [r1, #0]
 8003658:	8a02      	ldrh	r2, [r0, #16]
 800365a:	4323      	orrs	r3, r4
 800365c:	888c      	ldrh	r4, [r1, #4]
 800365e:	88c9      	ldrh	r1, [r1, #6]
 8003660:	b292      	uxth	r2, r2
 8003662:	4323      	orrs	r3, r4
 8003664:	430b      	orrs	r3, r1
 8003666:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800366a:	4313      	orrs	r3, r2
 800366c:	b29b      	uxth	r3, r3
 800366e:	8203      	strh	r3, [r0, #16]
 8003670:	bd10      	pop	{r4, pc}

08003672 <USART_ClockStructInit>:
 8003672:	2300      	movs	r3, #0
 8003674:	8003      	strh	r3, [r0, #0]
 8003676:	8043      	strh	r3, [r0, #2]
 8003678:	8083      	strh	r3, [r0, #4]
 800367a:	80c3      	strh	r3, [r0, #6]
 800367c:	4770      	bx	lr

0800367e <USART_Cmd>:
 800367e:	8983      	ldrh	r3, [r0, #12]
 8003680:	b119      	cbz	r1, 800368a <USART_Cmd+0xc>
 8003682:	b29b      	uxth	r3, r3
 8003684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003688:	e003      	b.n	8003692 <USART_Cmd+0x14>
 800368a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800368e:	041b      	lsls	r3, r3, #16
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	8183      	strh	r3, [r0, #12]
 8003694:	4770      	bx	lr

08003696 <USART_ITConfig>:
 8003696:	2301      	movs	r3, #1
 8003698:	b510      	push	{r4, lr}
 800369a:	f3c1 1442 	ubfx	r4, r1, #5, #3
 800369e:	429c      	cmp	r4, r3
 80036a0:	f001 011f 	and.w	r1, r1, #31
 80036a4:	fa03 f101 	lsl.w	r1, r3, r1
 80036a8:	d101      	bne.n	80036ae <USART_ITConfig+0x18>
 80036aa:	300c      	adds	r0, #12
 80036ac:	e003      	b.n	80036b6 <USART_ITConfig+0x20>
 80036ae:	2c02      	cmp	r4, #2
 80036b0:	bf0c      	ite	eq
 80036b2:	3010      	addeq	r0, #16
 80036b4:	3014      	addne	r0, #20
 80036b6:	6803      	ldr	r3, [r0, #0]
 80036b8:	b10a      	cbz	r2, 80036be <USART_ITConfig+0x28>
 80036ba:	4319      	orrs	r1, r3
 80036bc:	e001      	b.n	80036c2 <USART_ITConfig+0x2c>
 80036be:	ea23 0101 	bic.w	r1, r3, r1
 80036c2:	6001      	str	r1, [r0, #0]
 80036c4:	bd10      	pop	{r4, pc}

080036c6 <USART_DMACmd>:
 80036c6:	8a83      	ldrh	r3, [r0, #20]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	b10a      	cbz	r2, 80036d0 <USART_DMACmd+0xa>
 80036cc:	4319      	orrs	r1, r3
 80036ce:	e001      	b.n	80036d4 <USART_DMACmd+0xe>
 80036d0:	ea23 0101 	bic.w	r1, r3, r1
 80036d4:	8281      	strh	r1, [r0, #20]
 80036d6:	4770      	bx	lr

080036d8 <USART_SetAddress>:
 80036d8:	8a03      	ldrh	r3, [r0, #16]
 80036da:	f023 030f 	bic.w	r3, r3, #15
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	0c1b      	lsrs	r3, r3, #16
 80036e2:	8203      	strh	r3, [r0, #16]
 80036e4:	8a03      	ldrh	r3, [r0, #16]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	4319      	orrs	r1, r3
 80036ea:	8201      	strh	r1, [r0, #16]
 80036ec:	4770      	bx	lr

080036ee <USART_WakeUpConfig>:
 80036ee:	8983      	ldrh	r3, [r0, #12]
 80036f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	8183      	strh	r3, [r0, #12]
 80036fa:	8983      	ldrh	r3, [r0, #12]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	4319      	orrs	r1, r3
 8003700:	8181      	strh	r1, [r0, #12]
 8003702:	4770      	bx	lr

08003704 <USART_ReceiverWakeUpCmd>:
 8003704:	8983      	ldrh	r3, [r0, #12]
 8003706:	b119      	cbz	r1, 8003710 <USART_ReceiverWakeUpCmd+0xc>
 8003708:	b29b      	uxth	r3, r3
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	e003      	b.n	8003718 <USART_ReceiverWakeUpCmd+0x14>
 8003710:	f023 0302 	bic.w	r3, r3, #2
 8003714:	041b      	lsls	r3, r3, #16
 8003716:	0c1b      	lsrs	r3, r3, #16
 8003718:	8183      	strh	r3, [r0, #12]
 800371a:	4770      	bx	lr

0800371c <USART_LINBreakDetectLengthConfig>:
 800371c:	8a03      	ldrh	r3, [r0, #16]
 800371e:	f023 0320 	bic.w	r3, r3, #32
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	8203      	strh	r3, [r0, #16]
 8003728:	8a03      	ldrh	r3, [r0, #16]
 800372a:	b29b      	uxth	r3, r3
 800372c:	4319      	orrs	r1, r3
 800372e:	8201      	strh	r1, [r0, #16]
 8003730:	4770      	bx	lr

08003732 <USART_LINCmd>:
 8003732:	8a03      	ldrh	r3, [r0, #16]
 8003734:	b119      	cbz	r1, 800373e <USART_LINCmd+0xc>
 8003736:	b29b      	uxth	r3, r3
 8003738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800373c:	e003      	b.n	8003746 <USART_LINCmd+0x14>
 800373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	8203      	strh	r3, [r0, #16]
 8003748:	4770      	bx	lr

0800374a <USART_SendData>:
 800374a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800374e:	8081      	strh	r1, [r0, #4]
 8003750:	4770      	bx	lr

08003752 <USART_ReceiveData>:
 8003752:	8880      	ldrh	r0, [r0, #4]
 8003754:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003758:	4770      	bx	lr

0800375a <USART_SendBreak>:
 800375a:	8983      	ldrh	r3, [r0, #12]
 800375c:	b29b      	uxth	r3, r3
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	8183      	strh	r3, [r0, #12]
 8003764:	4770      	bx	lr

08003766 <USART_SetGuardTime>:
 8003766:	8b03      	ldrh	r3, [r0, #24]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	8303      	strh	r3, [r0, #24]
 800376c:	8b03      	ldrh	r3, [r0, #24]
 800376e:	b29b      	uxth	r3, r3
 8003770:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003774:	8301      	strh	r1, [r0, #24]
 8003776:	4770      	bx	lr

08003778 <USART_SetPrescaler>:
 8003778:	8b03      	ldrh	r3, [r0, #24]
 800377a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800377e:	8303      	strh	r3, [r0, #24]
 8003780:	8b03      	ldrh	r3, [r0, #24]
 8003782:	b29b      	uxth	r3, r3
 8003784:	4319      	orrs	r1, r3
 8003786:	8301      	strh	r1, [r0, #24]
 8003788:	4770      	bx	lr

0800378a <USART_SmartCardCmd>:
 800378a:	8a83      	ldrh	r3, [r0, #20]
 800378c:	b119      	cbz	r1, 8003796 <USART_SmartCardCmd+0xc>
 800378e:	b29b      	uxth	r3, r3
 8003790:	f043 0320 	orr.w	r3, r3, #32
 8003794:	e003      	b.n	800379e <USART_SmartCardCmd+0x14>
 8003796:	f023 0320 	bic.w	r3, r3, #32
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	8283      	strh	r3, [r0, #20]
 80037a0:	4770      	bx	lr

080037a2 <USART_SmartCardNACKCmd>:
 80037a2:	8a83      	ldrh	r3, [r0, #20]
 80037a4:	b119      	cbz	r1, 80037ae <USART_SmartCardNACKCmd+0xc>
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f043 0310 	orr.w	r3, r3, #16
 80037ac:	e003      	b.n	80037b6 <USART_SmartCardNACKCmd+0x14>
 80037ae:	f023 0310 	bic.w	r3, r3, #16
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	8283      	strh	r3, [r0, #20]
 80037b8:	4770      	bx	lr

080037ba <USART_HalfDuplexCmd>:
 80037ba:	8a83      	ldrh	r3, [r0, #20]
 80037bc:	b119      	cbz	r1, 80037c6 <USART_HalfDuplexCmd+0xc>
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	e003      	b.n	80037ce <USART_HalfDuplexCmd+0x14>
 80037c6:	f023 0308 	bic.w	r3, r3, #8
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	8283      	strh	r3, [r0, #20]
 80037d0:	4770      	bx	lr

080037d2 <USART_OverSampling8Cmd>:
 80037d2:	8983      	ldrh	r3, [r0, #12]
 80037d4:	b129      	cbz	r1, 80037e2 <USART_OverSampling8Cmd+0x10>
 80037d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037de:	b29b      	uxth	r3, r3
 80037e0:	e001      	b.n	80037e6 <USART_OverSampling8Cmd+0x14>
 80037e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80037e6:	8183      	strh	r3, [r0, #12]
 80037e8:	4770      	bx	lr

080037ea <USART_OneBitMethodCmd>:
 80037ea:	8a83      	ldrh	r3, [r0, #20]
 80037ec:	b119      	cbz	r1, 80037f6 <USART_OneBitMethodCmd+0xc>
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037f4:	e003      	b.n	80037fe <USART_OneBitMethodCmd+0x14>
 80037f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	8283      	strh	r3, [r0, #20]
 8003800:	4770      	bx	lr

08003802 <USART_IrDAConfig>:
 8003802:	8a83      	ldrh	r3, [r0, #20]
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	0c1b      	lsrs	r3, r3, #16
 800380c:	8283      	strh	r3, [r0, #20]
 800380e:	8a83      	ldrh	r3, [r0, #20]
 8003810:	b29b      	uxth	r3, r3
 8003812:	4319      	orrs	r1, r3
 8003814:	8281      	strh	r1, [r0, #20]
 8003816:	4770      	bx	lr

08003818 <USART_IrDACmd>:
 8003818:	8a83      	ldrh	r3, [r0, #20]
 800381a:	b119      	cbz	r1, 8003824 <USART_IrDACmd+0xc>
 800381c:	b29b      	uxth	r3, r3
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	e003      	b.n	800382c <USART_IrDACmd+0x14>
 8003824:	f023 0302 	bic.w	r3, r3, #2
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	0c1b      	lsrs	r3, r3, #16
 800382c:	8283      	strh	r3, [r0, #20]
 800382e:	4770      	bx	lr

08003830 <USART_GetFlagStatus>:
 8003830:	8803      	ldrh	r3, [r0, #0]
 8003832:	4219      	tst	r1, r3
 8003834:	bf14      	ite	ne
 8003836:	2001      	movne	r0, #1
 8003838:	2000      	moveq	r0, #0
 800383a:	4770      	bx	lr

0800383c <USART_ClearFlag>:
 800383c:	43c9      	mvns	r1, r1
 800383e:	b289      	uxth	r1, r1
 8003840:	8001      	strh	r1, [r0, #0]
 8003842:	4770      	bx	lr

08003844 <USART_GetITStatus>:
 8003844:	2301      	movs	r3, #1
 8003846:	b510      	push	{r4, lr}
 8003848:	f3c1 1442 	ubfx	r4, r1, #5, #3
 800384c:	f001 021f 	and.w	r2, r1, #31
 8003850:	429c      	cmp	r4, r3
 8003852:	fa03 f202 	lsl.w	r2, r3, r2
 8003856:	d101      	bne.n	800385c <USART_GetITStatus+0x18>
 8003858:	8983      	ldrh	r3, [r0, #12]
 800385a:	e003      	b.n	8003864 <USART_GetITStatus+0x20>
 800385c:	2c02      	cmp	r4, #2
 800385e:	bf0c      	ite	eq
 8003860:	8a03      	ldrheq	r3, [r0, #16]
 8003862:	8a83      	ldrhne	r3, [r0, #20]
 8003864:	b29b      	uxth	r3, r3
 8003866:	4013      	ands	r3, r2
 8003868:	8802      	ldrh	r2, [r0, #0]
 800386a:	b292      	uxth	r2, r2
 800386c:	b143      	cbz	r3, 8003880 <USART_GetITStatus+0x3c>
 800386e:	2301      	movs	r3, #1
 8003870:	0a09      	lsrs	r1, r1, #8
 8003872:	fa03 f101 	lsl.w	r1, r3, r1
 8003876:	420a      	tst	r2, r1
 8003878:	bf14      	ite	ne
 800387a:	4618      	movne	r0, r3
 800387c:	2000      	moveq	r0, #0
 800387e:	bd10      	pop	{r4, pc}
 8003880:	4618      	mov	r0, r3
 8003882:	bd10      	pop	{r4, pc}

08003884 <USART_ClearITPendingBit>:
 8003884:	0a09      	lsrs	r1, r1, #8
 8003886:	2301      	movs	r3, #1
 8003888:	fa03 f101 	lsl.w	r1, r3, r1
 800388c:	43c9      	mvns	r1, r1
 800388e:	b289      	uxth	r1, r1
 8003890:	8001      	strh	r1, [r0, #0]
 8003892:	4770      	bx	lr

08003894 <TI1_Config>:
 8003894:	b530      	push	{r4, r5, lr}
 8003896:	8c05      	ldrh	r5, [r0, #32]
 8003898:	f025 0501 	bic.w	r5, r5, #1
 800389c:	042d      	lsls	r5, r5, #16
 800389e:	0c2d      	lsrs	r5, r5, #16
 80038a0:	8405      	strh	r5, [r0, #32]
 80038a2:	8b05      	ldrh	r5, [r0, #24]
 80038a4:	8c04      	ldrh	r4, [r0, #32]
 80038a6:	b2ad      	uxth	r5, r5
 80038a8:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 80038ac:	432a      	orrs	r2, r5
 80038ae:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <TI1_Config+0x64>)
 80038b6:	b2a4      	uxth	r4, r4
 80038b8:	4298      	cmp	r0, r3
 80038ba:	d012      	beq.n	80038e2 <TI1_Config+0x4e>
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	4298      	cmp	r0, r3
 80038c2:	d00e      	beq.n	80038e2 <TI1_Config+0x4e>
 80038c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80038c8:	d00b      	beq.n	80038e2 <TI1_Config+0x4e>
 80038ca:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80038ce:	4298      	cmp	r0, r3
 80038d0:	d007      	beq.n	80038e2 <TI1_Config+0x4e>
 80038d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d6:	4298      	cmp	r0, r3
 80038d8:	d003      	beq.n	80038e2 <TI1_Config+0x4e>
 80038da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038de:	4298      	cmp	r0, r3
 80038e0:	d102      	bne.n	80038e8 <TI1_Config+0x54>
 80038e2:	f024 0402 	bic.w	r4, r4, #2
 80038e6:	e001      	b.n	80038ec <TI1_Config+0x58>
 80038e8:	f024 040a 	bic.w	r4, r4, #10
 80038ec:	f044 0401 	orr.w	r4, r4, #1
 80038f0:	4321      	orrs	r1, r4
 80038f2:	8302      	strh	r2, [r0, #24]
 80038f4:	8401      	strh	r1, [r0, #32]
 80038f6:	bd30      	pop	{r4, r5, pc}
 80038f8:	40012c00 	.word	0x40012c00

080038fc <TI2_Config>:
 80038fc:	b530      	push	{r4, r5, lr}
 80038fe:	8c04      	ldrh	r4, [r0, #32]
 8003900:	f024 0410 	bic.w	r4, r4, #16
 8003904:	0424      	lsls	r4, r4, #16
 8003906:	0c24      	lsrs	r4, r4, #16
 8003908:	8404      	strh	r4, [r0, #32]
 800390a:	8b05      	ldrh	r5, [r0, #24]
 800390c:	8c04      	ldrh	r4, [r0, #32]
 800390e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 8003912:	052d      	lsls	r5, r5, #20
 8003914:	0d2d      	lsrs	r5, r5, #20
 8003916:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
 800391a:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
 800391e:	4a14      	ldr	r2, [pc, #80]	; (8003970 <TI2_Config+0x74>)
 8003920:	b2a4      	uxth	r4, r4
 8003922:	4290      	cmp	r0, r2
 8003924:	b29b      	uxth	r3, r3
 8003926:	d012      	beq.n	800394e <TI2_Config+0x52>
 8003928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392c:	4290      	cmp	r0, r2
 800392e:	d00e      	beq.n	800394e <TI2_Config+0x52>
 8003930:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003934:	d00b      	beq.n	800394e <TI2_Config+0x52>
 8003936:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800393a:	4290      	cmp	r0, r2
 800393c:	d007      	beq.n	800394e <TI2_Config+0x52>
 800393e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003942:	4290      	cmp	r0, r2
 8003944:	d003      	beq.n	800394e <TI2_Config+0x52>
 8003946:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800394a:	4290      	cmp	r0, r2
 800394c:	d107      	bne.n	800395e <TI2_Config+0x62>
 800394e:	f024 0420 	bic.w	r4, r4, #32
 8003952:	f044 0410 	orr.w	r4, r4, #16
 8003956:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
 800395a:	b289      	uxth	r1, r1
 800395c:	e004      	b.n	8003968 <TI2_Config+0x6c>
 800395e:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
 8003962:	f044 0410 	orr.w	r4, r4, #16
 8003966:	4321      	orrs	r1, r4
 8003968:	8303      	strh	r3, [r0, #24]
 800396a:	8401      	strh	r1, [r0, #32]
 800396c:	bd30      	pop	{r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	40012c00 	.word	0x40012c00

08003974 <TIM_DeInit>:
 8003974:	b508      	push	{r3, lr}
 8003976:	4b61      	ldr	r3, [pc, #388]	; (8003afc <TIM_DeInit+0x188>)
 8003978:	4298      	cmp	r0, r3
 800397a:	d108      	bne.n	800398e <TIM_DeInit+0x1a>
 800397c:	2101      	movs	r1, #1
 800397e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003982:	f7ff fbeb 	bl	800315c <RCC_APB2PeriphResetCmd>
 8003986:	2100      	movs	r1, #0
 8003988:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800398c:	e0b1      	b.n	8003af2 <TIM_DeInit+0x17e>
 800398e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003992:	d106      	bne.n	80039a2 <TIM_DeInit+0x2e>
 8003994:	2101      	movs	r1, #1
 8003996:	4608      	mov	r0, r1
 8003998:	f7ff fbec 	bl	8003174 <RCC_APB1PeriphResetCmd>
 800399c:	2100      	movs	r1, #0
 800399e:	2001      	movs	r0, #1
 80039a0:	e008      	b.n	80039b4 <TIM_DeInit+0x40>
 80039a2:	4b57      	ldr	r3, [pc, #348]	; (8003b00 <TIM_DeInit+0x18c>)
 80039a4:	4298      	cmp	r0, r3
 80039a6:	d109      	bne.n	80039bc <TIM_DeInit+0x48>
 80039a8:	2101      	movs	r1, #1
 80039aa:	2002      	movs	r0, #2
 80039ac:	f7ff fbe2 	bl	8003174 <RCC_APB1PeriphResetCmd>
 80039b0:	2100      	movs	r1, #0
 80039b2:	2002      	movs	r0, #2
 80039b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80039b8:	f7ff bbdc 	b.w	8003174 <RCC_APB1PeriphResetCmd>
 80039bc:	4b51      	ldr	r3, [pc, #324]	; (8003b04 <TIM_DeInit+0x190>)
 80039be:	4298      	cmp	r0, r3
 80039c0:	d106      	bne.n	80039d0 <TIM_DeInit+0x5c>
 80039c2:	2101      	movs	r1, #1
 80039c4:	2004      	movs	r0, #4
 80039c6:	f7ff fbd5 	bl	8003174 <RCC_APB1PeriphResetCmd>
 80039ca:	2100      	movs	r1, #0
 80039cc:	2004      	movs	r0, #4
 80039ce:	e7f1      	b.n	80039b4 <TIM_DeInit+0x40>
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <TIM_DeInit+0x194>)
 80039d2:	4298      	cmp	r0, r3
 80039d4:	d106      	bne.n	80039e4 <TIM_DeInit+0x70>
 80039d6:	2101      	movs	r1, #1
 80039d8:	2008      	movs	r0, #8
 80039da:	f7ff fbcb 	bl	8003174 <RCC_APB1PeriphResetCmd>
 80039de:	2100      	movs	r1, #0
 80039e0:	2008      	movs	r0, #8
 80039e2:	e7e7      	b.n	80039b4 <TIM_DeInit+0x40>
 80039e4:	4b49      	ldr	r3, [pc, #292]	; (8003b0c <TIM_DeInit+0x198>)
 80039e6:	4298      	cmp	r0, r3
 80039e8:	d106      	bne.n	80039f8 <TIM_DeInit+0x84>
 80039ea:	2101      	movs	r1, #1
 80039ec:	2010      	movs	r0, #16
 80039ee:	f7ff fbc1 	bl	8003174 <RCC_APB1PeriphResetCmd>
 80039f2:	2100      	movs	r1, #0
 80039f4:	2010      	movs	r0, #16
 80039f6:	e7dd      	b.n	80039b4 <TIM_DeInit+0x40>
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <TIM_DeInit+0x19c>)
 80039fa:	4298      	cmp	r0, r3
 80039fc:	d106      	bne.n	8003a0c <TIM_DeInit+0x98>
 80039fe:	2101      	movs	r1, #1
 8003a00:	2020      	movs	r0, #32
 8003a02:	f7ff fbb7 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003a06:	2100      	movs	r1, #0
 8003a08:	2020      	movs	r0, #32
 8003a0a:	e7d3      	b.n	80039b4 <TIM_DeInit+0x40>
 8003a0c:	4b41      	ldr	r3, [pc, #260]	; (8003b14 <TIM_DeInit+0x1a0>)
 8003a0e:	4298      	cmp	r0, r3
 8003a10:	d108      	bne.n	8003a24 <TIM_DeInit+0xb0>
 8003a12:	2101      	movs	r1, #1
 8003a14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a18:	f7ff fba0 	bl	800315c <RCC_APB2PeriphResetCmd>
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a22:	e066      	b.n	8003af2 <TIM_DeInit+0x17e>
 8003a24:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <TIM_DeInit+0x1a4>)
 8003a26:	4298      	cmp	r0, r3
 8003a28:	d108      	bne.n	8003a3c <TIM_DeInit+0xc8>
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a30:	f7ff fb94 	bl	800315c <RCC_APB2PeriphResetCmd>
 8003a34:	2100      	movs	r1, #0
 8003a36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a3a:	e05a      	b.n	8003af2 <TIM_DeInit+0x17e>
 8003a3c:	4b37      	ldr	r3, [pc, #220]	; (8003b1c <TIM_DeInit+0x1a8>)
 8003a3e:	4298      	cmp	r0, r3
 8003a40:	d108      	bne.n	8003a54 <TIM_DeInit+0xe0>
 8003a42:	2101      	movs	r1, #1
 8003a44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a48:	f7ff fb88 	bl	800315c <RCC_APB2PeriphResetCmd>
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a52:	e04e      	b.n	8003af2 <TIM_DeInit+0x17e>
 8003a54:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <TIM_DeInit+0x1ac>)
 8003a56:	4298      	cmp	r0, r3
 8003a58:	d108      	bne.n	8003a6c <TIM_DeInit+0xf8>
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a60:	f7ff fb7c 	bl	800315c <RCC_APB2PeriphResetCmd>
 8003a64:	2100      	movs	r1, #0
 8003a66:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003a6a:	e042      	b.n	8003af2 <TIM_DeInit+0x17e>
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <TIM_DeInit+0x1b0>)
 8003a6e:	4298      	cmp	r0, r3
 8003a70:	d106      	bne.n	8003a80 <TIM_DeInit+0x10c>
 8003a72:	2101      	movs	r1, #1
 8003a74:	2040      	movs	r0, #64	; 0x40
 8003a76:	f7ff fb7d 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	2040      	movs	r0, #64	; 0x40
 8003a7e:	e799      	b.n	80039b4 <TIM_DeInit+0x40>
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <TIM_DeInit+0x1b4>)
 8003a82:	4298      	cmp	r0, r3
 8003a84:	d106      	bne.n	8003a94 <TIM_DeInit+0x120>
 8003a86:	2101      	movs	r1, #1
 8003a88:	2080      	movs	r0, #128	; 0x80
 8003a8a:	f7ff fb73 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003a8e:	2100      	movs	r1, #0
 8003a90:	2080      	movs	r0, #128	; 0x80
 8003a92:	e78f      	b.n	80039b4 <TIM_DeInit+0x40>
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <TIM_DeInit+0x1b8>)
 8003a96:	4298      	cmp	r0, r3
 8003a98:	d108      	bne.n	8003aac <TIM_DeInit+0x138>
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003aa0:	f7ff fb68 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003aaa:	e783      	b.n	80039b4 <TIM_DeInit+0x40>
 8003aac:	4b20      	ldr	r3, [pc, #128]	; (8003b30 <TIM_DeInit+0x1bc>)
 8003aae:	4298      	cmp	r0, r3
 8003ab0:	d108      	bne.n	8003ac4 <TIM_DeInit+0x150>
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ab8:	f7ff fb50 	bl	800315c <RCC_APB2PeriphResetCmd>
 8003abc:	2100      	movs	r1, #0
 8003abe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003ac2:	e016      	b.n	8003af2 <TIM_DeInit+0x17e>
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <TIM_DeInit+0x1c0>)
 8003ac6:	4298      	cmp	r0, r3
 8003ac8:	d108      	bne.n	8003adc <TIM_DeInit+0x168>
 8003aca:	2101      	movs	r1, #1
 8003acc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003ad0:	f7ff fb44 	bl	800315c <RCC_APB2PeriphResetCmd>
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003ada:	e00a      	b.n	8003af2 <TIM_DeInit+0x17e>
 8003adc:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <TIM_DeInit+0x1c4>)
 8003ade:	4298      	cmp	r0, r3
 8003ae0:	d10b      	bne.n	8003afa <TIM_DeInit+0x186>
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003ae8:	f7ff fb38 	bl	800315c <RCC_APB2PeriphResetCmd>
 8003aec:	2100      	movs	r1, #0
 8003aee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003af6:	f7ff bb31 	b.w	800315c <RCC_APB2PeriphResetCmd>
 8003afa:	bd08      	pop	{r3, pc}
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40001000 	.word	0x40001000
 8003b10:	40001400 	.word	0x40001400
 8003b14:	40013400 	.word	0x40013400
 8003b18:	40014c00 	.word	0x40014c00
 8003b1c:	40015000 	.word	0x40015000
 8003b20:	40015400 	.word	0x40015400
 8003b24:	40001800 	.word	0x40001800
 8003b28:	40001c00 	.word	0x40001c00
 8003b2c:	40002000 	.word	0x40002000
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800

08003b3c <TIM_TimeBaseInit>:
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <TIM_TimeBaseInit+0x8c>)
 8003b3e:	8803      	ldrh	r3, [r0, #0]
 8003b40:	4290      	cmp	r0, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	d012      	beq.n	8003b6c <TIM_TimeBaseInit+0x30>
 8003b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4a:	4290      	cmp	r0, r2
 8003b4c:	d00e      	beq.n	8003b6c <TIM_TimeBaseInit+0x30>
 8003b4e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003b52:	d00b      	beq.n	8003b6c <TIM_TimeBaseInit+0x30>
 8003b54:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003b58:	4290      	cmp	r0, r2
 8003b5a:	d007      	beq.n	8003b6c <TIM_TimeBaseInit+0x30>
 8003b5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b60:	4290      	cmp	r0, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_TimeBaseInit+0x30>
 8003b64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b68:	4290      	cmp	r0, r2
 8003b6a:	d103      	bne.n	8003b74 <TIM_TimeBaseInit+0x38>
 8003b6c:	884a      	ldrh	r2, [r1, #2]
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	4313      	orrs	r3, r2
 8003b74:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <TIM_TimeBaseInit+0x90>)
 8003b76:	4290      	cmp	r0, r2
 8003b78:	d008      	beq.n	8003b8c <TIM_TimeBaseInit+0x50>
 8003b7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b7e:	4290      	cmp	r0, r2
 8003b80:	bf1f      	itttt	ne
 8003b82:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8003b86:	88ca      	ldrhne	r2, [r1, #6]
 8003b88:	b29b      	uxthne	r3, r3
 8003b8a:	4313      	orrne	r3, r2
 8003b8c:	8003      	strh	r3, [r0, #0]
 8003b8e:	888b      	ldrh	r3, [r1, #4]
 8003b90:	8583      	strh	r3, [r0, #44]	; 0x2c
 8003b92:	880b      	ldrh	r3, [r1, #0]
 8003b94:	8503      	strh	r3, [r0, #40]	; 0x28
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <TIM_TimeBaseInit+0x8c>)
 8003b98:	4298      	cmp	r0, r3
 8003b9a:	d00f      	beq.n	8003bbc <TIM_TimeBaseInit+0x80>
 8003b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba0:	4298      	cmp	r0, r3
 8003ba2:	d00b      	beq.n	8003bbc <TIM_TimeBaseInit+0x80>
 8003ba4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003ba8:	4298      	cmp	r0, r3
 8003baa:	d007      	beq.n	8003bbc <TIM_TimeBaseInit+0x80>
 8003bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bb0:	4298      	cmp	r0, r3
 8003bb2:	d003      	beq.n	8003bbc <TIM_TimeBaseInit+0x80>
 8003bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bb8:	4298      	cmp	r0, r3
 8003bba:	d101      	bne.n	8003bc0 <TIM_TimeBaseInit+0x84>
 8003bbc:	7a0b      	ldrb	r3, [r1, #8]
 8003bbe:	8603      	strh	r3, [r0, #48]	; 0x30
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	8283      	strh	r3, [r0, #20]
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40001000 	.word	0x40001000

08003bd0 <TIM_OC1Init>:
 8003bd0:	8c03      	ldrh	r3, [r0, #32]
 8003bd2:	b570      	push	{r4, r5, r6, lr}
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	0c1b      	lsrs	r3, r3, #16
 8003bdc:	8403      	strh	r3, [r0, #32]
 8003bde:	8c02      	ldrh	r2, [r0, #32]
 8003be0:	8886      	ldrh	r6, [r0, #4]
 8003be2:	8b03      	ldrh	r3, [r0, #24]
 8003be4:	880d      	ldrh	r5, [r1, #0]
 8003be6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	431d      	orrs	r5, r3
 8003bf0:	f022 0202 	bic.w	r2, r2, #2
 8003bf4:	890c      	ldrh	r4, [r1, #8]
 8003bf6:	884b      	ldrh	r3, [r1, #2]
 8003bf8:	0412      	lsls	r2, r2, #16
 8003bfa:	0c12      	lsrs	r2, r2, #16
 8003bfc:	4323      	orrs	r3, r4
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <TIM_OC1Init+0x84>)
 8003c02:	b2b6      	uxth	r6, r6
 8003c04:	4290      	cmp	r0, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	d00f      	beq.n	8003c2a <TIM_OC1Init+0x5a>
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0e:	4290      	cmp	r0, r2
 8003c10:	d00b      	beq.n	8003c2a <TIM_OC1Init+0x5a>
 8003c12:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003c16:	4290      	cmp	r0, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_OC1Init+0x5a>
 8003c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c1e:	4290      	cmp	r0, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_OC1Init+0x5a>
 8003c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c26:	4290      	cmp	r0, r2
 8003c28:	d10e      	bne.n	8003c48 <TIM_OC1Init+0x78>
 8003c2a:	894c      	ldrh	r4, [r1, #10]
 8003c2c:	f023 0308 	bic.w	r3, r3, #8
 8003c30:	431c      	orrs	r4, r3
 8003c32:	888b      	ldrh	r3, [r1, #4]
 8003c34:	f024 0404 	bic.w	r4, r4, #4
 8003c38:	f426 7240 	bic.w	r2, r6, #768	; 0x300
 8003c3c:	4323      	orrs	r3, r4
 8003c3e:	898e      	ldrh	r6, [r1, #12]
 8003c40:	89cc      	ldrh	r4, [r1, #14]
 8003c42:	4334      	orrs	r4, r6
 8003c44:	4322      	orrs	r2, r4
 8003c46:	b296      	uxth	r6, r2
 8003c48:	88ca      	ldrh	r2, [r1, #6]
 8003c4a:	8086      	strh	r6, [r0, #4]
 8003c4c:	8305      	strh	r5, [r0, #24]
 8003c4e:	8682      	strh	r2, [r0, #52]	; 0x34
 8003c50:	8403      	strh	r3, [r0, #32]
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	40012c00 	.word	0x40012c00

08003c58 <TIM_OC2Init>:
 8003c58:	8c03      	ldrh	r3, [r0, #32]
 8003c5a:	b530      	push	{r4, r5, lr}
 8003c5c:	f023 0310 	bic.w	r3, r3, #16
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	8403      	strh	r3, [r0, #32]
 8003c66:	8c03      	ldrh	r3, [r0, #32]
 8003c68:	8885      	ldrh	r5, [r0, #4]
 8003c6a:	8b02      	ldrh	r2, [r0, #24]
 8003c6c:	880c      	ldrh	r4, [r1, #0]
 8003c6e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8003c72:	0412      	lsls	r2, r2, #16
 8003c74:	0c12      	lsrs	r2, r2, #16
 8003c76:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8003c7a:	f023 0320 	bic.w	r3, r3, #32
 8003c7e:	b294      	uxth	r4, r2
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	890a      	ldrh	r2, [r1, #8]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003c8a:	884a      	ldrh	r2, [r1, #2]
 8003c8c:	b2ad      	uxth	r5, r5
 8003c8e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <TIM_OC2Init+0x84>)
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	4290      	cmp	r0, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_OC2Init+0x4a>
 8003c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9e:	4290      	cmp	r0, r2
 8003ca0:	d115      	bne.n	8003cce <TIM_OC2Init+0x76>
 8003ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca6:	894a      	ldrh	r2, [r1, #10]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
 8003cae:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	888a      	ldrh	r2, [r1, #4]
 8003cb6:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
 8003cba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003cbe:	898a      	ldrh	r2, [r1, #12]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 8003cc6:	89ca      	ldrh	r2, [r1, #14]
 8003cc8:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 8003ccc:	b2ad      	uxth	r5, r5
 8003cce:	88ca      	ldrh	r2, [r1, #6]
 8003cd0:	8085      	strh	r5, [r0, #4]
 8003cd2:	8304      	strh	r4, [r0, #24]
 8003cd4:	8702      	strh	r2, [r0, #56]	; 0x38
 8003cd6:	8403      	strh	r3, [r0, #32]
 8003cd8:	bd30      	pop	{r4, r5, pc}
 8003cda:	bf00      	nop
 8003cdc:	40012c00 	.word	0x40012c00

08003ce0 <TIM_OC3Init>:
 8003ce0:	8c03      	ldrh	r3, [r0, #32]
 8003ce2:	b530      	push	{r4, r5, lr}
 8003ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	8403      	strh	r3, [r0, #32]
 8003cee:	8c03      	ldrh	r3, [r0, #32]
 8003cf0:	8884      	ldrh	r4, [r0, #4]
 8003cf2:	8b82      	ldrh	r2, [r0, #28]
 8003cf4:	880d      	ldrh	r5, [r1, #0]
 8003cf6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003cfa:	0412      	lsls	r2, r2, #16
 8003cfc:	0c12      	lsrs	r2, r2, #16
 8003cfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d02:	4315      	orrs	r5, r2
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	890a      	ldrh	r2, [r1, #8]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d0e:	884a      	ldrh	r2, [r1, #2]
 8003d10:	b2a4      	uxth	r4, r4
 8003d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <TIM_OC3Init+0x80>)
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	4290      	cmp	r0, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_OC3Init+0x46>
 8003d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d22:	4290      	cmp	r0, r2
 8003d24:	d115      	bne.n	8003d52 <TIM_OC3Init+0x72>
 8003d26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d2a:	894a      	ldrh	r2, [r1, #10]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8003d32:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8003d36:	4013      	ands	r3, r2
 8003d38:	888a      	ldrh	r2, [r1, #4]
 8003d3a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
 8003d3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d42:	898a      	ldrh	r2, [r1, #12]
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003d4a:	89ca      	ldrh	r2, [r1, #14]
 8003d4c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003d50:	b2a4      	uxth	r4, r4
 8003d52:	88ca      	ldrh	r2, [r1, #6]
 8003d54:	8084      	strh	r4, [r0, #4]
 8003d56:	8385      	strh	r5, [r0, #28]
 8003d58:	8782      	strh	r2, [r0, #60]	; 0x3c
 8003d5a:	8403      	strh	r3, [r0, #32]
 8003d5c:	bd30      	pop	{r4, r5, pc}
 8003d5e:	bf00      	nop
 8003d60:	40012c00 	.word	0x40012c00

08003d64 <TIM_OC4Init>:
 8003d64:	8c03      	ldrh	r3, [r0, #32]
 8003d66:	b530      	push	{r4, r5, lr}
 8003d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	0c1b      	lsrs	r3, r3, #16
 8003d70:	8403      	strh	r3, [r0, #32]
 8003d72:	8c03      	ldrh	r3, [r0, #32]
 8003d74:	8884      	ldrh	r4, [r0, #4]
 8003d76:	8b82      	ldrh	r2, [r0, #28]
 8003d78:	880d      	ldrh	r5, [r1, #0]
 8003d7a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8003d7e:	0412      	lsls	r2, r2, #16
 8003d80:	0c12      	lsrs	r2, r2, #16
 8003d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	890d      	ldrh	r5, [r1, #8]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8003d94:	884d      	ldrh	r5, [r1, #2]
 8003d96:	b2a4      	uxth	r4, r4
 8003d98:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8003d9c:	4d0a      	ldr	r5, [pc, #40]	; (8003dc8 <TIM_OC4Init+0x64>)
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	42a8      	cmp	r0, r5
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	d003      	beq.n	8003dae <TIM_OC4Init+0x4a>
 8003da6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003daa:	42a8      	cmp	r0, r5
 8003dac:	d105      	bne.n	8003dba <TIM_OC4Init+0x56>
 8003dae:	898d      	ldrh	r5, [r1, #12]
 8003db0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8003db4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003db8:	b2a4      	uxth	r4, r4
 8003dba:	8084      	strh	r4, [r0, #4]
 8003dbc:	8382      	strh	r2, [r0, #28]
 8003dbe:	88ca      	ldrh	r2, [r1, #6]
 8003dc0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8003dc4:	8403      	strh	r3, [r0, #32]
 8003dc6:	bd30      	pop	{r4, r5, pc}
 8003dc8:	40012c00 	.word	0x40012c00

08003dcc <TIM_BDTRConfig>:
 8003dcc:	880a      	ldrh	r2, [r1, #0]
 8003dce:	884b      	ldrh	r3, [r1, #2]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	888a      	ldrh	r2, [r1, #4]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	88ca      	ldrh	r2, [r1, #6]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	890a      	ldrh	r2, [r1, #8]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	894a      	ldrh	r2, [r1, #10]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	898a      	ldrh	r2, [r1, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8003dec:	4770      	bx	lr

08003dee <TIM_TimeBaseStructInit>:
 8003dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003df2:	8083      	strh	r3, [r0, #4]
 8003df4:	2300      	movs	r3, #0
 8003df6:	8003      	strh	r3, [r0, #0]
 8003df8:	80c3      	strh	r3, [r0, #6]
 8003dfa:	8043      	strh	r3, [r0, #2]
 8003dfc:	7203      	strb	r3, [r0, #8]
 8003dfe:	4770      	bx	lr

08003e00 <TIM_OCStructInit>:
 8003e00:	2300      	movs	r3, #0
 8003e02:	8003      	strh	r3, [r0, #0]
 8003e04:	8043      	strh	r3, [r0, #2]
 8003e06:	8083      	strh	r3, [r0, #4]
 8003e08:	80c3      	strh	r3, [r0, #6]
 8003e0a:	8103      	strh	r3, [r0, #8]
 8003e0c:	8143      	strh	r3, [r0, #10]
 8003e0e:	8183      	strh	r3, [r0, #12]
 8003e10:	81c3      	strh	r3, [r0, #14]
 8003e12:	4770      	bx	lr

08003e14 <TIM_ICStructInit>:
 8003e14:	2300      	movs	r3, #0
 8003e16:	2201      	movs	r2, #1
 8003e18:	8003      	strh	r3, [r0, #0]
 8003e1a:	8043      	strh	r3, [r0, #2]
 8003e1c:	8082      	strh	r2, [r0, #4]
 8003e1e:	80c3      	strh	r3, [r0, #6]
 8003e20:	8103      	strh	r3, [r0, #8]
 8003e22:	4770      	bx	lr

08003e24 <TIM_BDTRStructInit>:
 8003e24:	2300      	movs	r3, #0
 8003e26:	8003      	strh	r3, [r0, #0]
 8003e28:	8043      	strh	r3, [r0, #2]
 8003e2a:	8083      	strh	r3, [r0, #4]
 8003e2c:	80c3      	strh	r3, [r0, #6]
 8003e2e:	8103      	strh	r3, [r0, #8]
 8003e30:	8143      	strh	r3, [r0, #10]
 8003e32:	8183      	strh	r3, [r0, #12]
 8003e34:	4770      	bx	lr

08003e36 <TIM_Cmd>:
 8003e36:	8803      	ldrh	r3, [r0, #0]
 8003e38:	b119      	cbz	r1, 8003e42 <TIM_Cmd+0xc>
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	e003      	b.n	8003e4a <TIM_Cmd+0x14>
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	8003      	strh	r3, [r0, #0]
 8003e4c:	4770      	bx	lr

08003e4e <TIM_CtrlPWMOutputs>:
 8003e4e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8003e52:	b129      	cbz	r1, 8003e60 <TIM_CtrlPWMOutputs+0x12>
 8003e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	e001      	b.n	8003e64 <TIM_CtrlPWMOutputs+0x16>
 8003e60:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e64:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8003e68:	4770      	bx	lr

08003e6a <TIM_GenerateEvent>:
 8003e6a:	8281      	strh	r1, [r0, #20]
 8003e6c:	4770      	bx	lr

08003e6e <TIM_DMAConfig>:
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8003e74:	4770      	bx	lr

08003e76 <TIM_DMACmd>:
 8003e76:	8983      	ldrh	r3, [r0, #12]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	b10a      	cbz	r2, 8003e80 <TIM_DMACmd+0xa>
 8003e7c:	4319      	orrs	r1, r3
 8003e7e:	e001      	b.n	8003e84 <TIM_DMACmd+0xe>
 8003e80:	ea23 0101 	bic.w	r1, r3, r1
 8003e84:	8181      	strh	r1, [r0, #12]
 8003e86:	4770      	bx	lr

08003e88 <TIM_ITConfig>:
 8003e88:	f7ff bff5 	b.w	8003e76 <TIM_DMACmd>

08003e8c <TIM_InternalClockConfig>:
 8003e8c:	8903      	ldrh	r3, [r0, #8]
 8003e8e:	f023 0307 	bic.w	r3, r3, #7
 8003e92:	041b      	lsls	r3, r3, #16
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	8103      	strh	r3, [r0, #8]
 8003e98:	4770      	bx	lr

08003e9a <TIM_ITRxExternalClockConfig>:
 8003e9a:	8903      	ldrh	r3, [r0, #8]
 8003e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	0c1b      	lsrs	r3, r3, #16
 8003ea4:	4319      	orrs	r1, r3
 8003ea6:	8101      	strh	r1, [r0, #8]
 8003ea8:	8903      	ldrh	r3, [r0, #8]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f043 0307 	orr.w	r3, r3, #7
 8003eb0:	8103      	strh	r3, [r0, #8]
 8003eb2:	4770      	bx	lr

08003eb4 <TIM_TIxExternalClockConfig>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	460d      	mov	r5, r1
 8003eb8:	2d60      	cmp	r5, #96	; 0x60
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	f04f 0201 	mov.w	r2, #1
 8003ec2:	d102      	bne.n	8003eca <TIM_TIxExternalClockConfig+0x16>
 8003ec4:	f7ff fd1a 	bl	80038fc <TI2_Config>
 8003ec8:	e001      	b.n	8003ece <TIM_TIxExternalClockConfig+0x1a>
 8003eca:	f7ff fce3 	bl	8003894 <TI1_Config>
 8003ece:	8921      	ldrh	r1, [r4, #8]
 8003ed0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003ed4:	0409      	lsls	r1, r1, #16
 8003ed6:	0c09      	lsrs	r1, r1, #16
 8003ed8:	4329      	orrs	r1, r5
 8003eda:	8121      	strh	r1, [r4, #8]
 8003edc:	8923      	ldrh	r3, [r4, #8]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f043 0307 	orr.w	r3, r3, #7
 8003ee4:	8123      	strh	r3, [r4, #8]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}

08003ee8 <TIM_ETRConfig>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	8904      	ldrh	r4, [r0, #8]
 8003eec:	b2e4      	uxtb	r4, r4
 8003eee:	4321      	orrs	r1, r4
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003ef6:	b299      	uxth	r1, r3
 8003ef8:	8101      	strh	r1, [r0, #8]
 8003efa:	bd10      	pop	{r4, pc}

08003efc <TIM_ETRClockMode1Config>:
 8003efc:	b510      	push	{r4, lr}
 8003efe:	f7ff fff3 	bl	8003ee8 <TIM_ETRConfig>
 8003f02:	8903      	ldrh	r3, [r0, #8]
 8003f04:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f08:	041b      	lsls	r3, r3, #16
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f10:	8103      	strh	r3, [r0, #8]
 8003f12:	bd10      	pop	{r4, pc}

08003f14 <TIM_ETRClockMode2Config>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	f7ff ffe7 	bl	8003ee8 <TIM_ETRConfig>
 8003f1a:	8903      	ldrh	r3, [r0, #8]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f22:	8103      	strh	r3, [r0, #8]
 8003f24:	bd10      	pop	{r4, pc}

08003f26 <TIM_PrescalerConfig>:
 8003f26:	8501      	strh	r1, [r0, #40]	; 0x28
 8003f28:	8282      	strh	r2, [r0, #20]
 8003f2a:	4770      	bx	lr

08003f2c <TIM_CounterModeConfig>:
 8003f2c:	8803      	ldrh	r3, [r0, #0]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	4319      	orrs	r1, r3
 8003f38:	8001      	strh	r1, [r0, #0]
 8003f3a:	4770      	bx	lr

08003f3c <TIM_SelectInputTrigger>:
 8003f3c:	8903      	ldrh	r3, [r0, #8]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	041b      	lsls	r3, r3, #16
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	4319      	orrs	r1, r3
 8003f48:	8101      	strh	r1, [r0, #8]
 8003f4a:	4770      	bx	lr

08003f4c <TIM_EncoderInterfaceConfig>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	8906      	ldrh	r6, [r0, #8]
 8003f50:	8b04      	ldrh	r4, [r0, #24]
 8003f52:	8c05      	ldrh	r5, [r0, #32]
 8003f54:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8003f58:	b2ad      	uxth	r5, r5
 8003f5a:	f024 0403 	bic.w	r4, r4, #3
 8003f5e:	f025 0522 	bic.w	r5, r5, #34	; 0x22
 8003f62:	f026 0607 	bic.w	r6, r6, #7
 8003f66:	0424      	lsls	r4, r4, #16
 8003f68:	432a      	orrs	r2, r5
 8003f6a:	0436      	lsls	r6, r6, #16
 8003f6c:	0c24      	lsrs	r4, r4, #16
 8003f6e:	0c36      	lsrs	r6, r6, #16
 8003f70:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8003f74:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8003f78:	4331      	orrs	r1, r6
 8003f7a:	f044 0401 	orr.w	r4, r4, #1
 8003f7e:	b29d      	uxth	r5, r3
 8003f80:	8101      	strh	r1, [r0, #8]
 8003f82:	8304      	strh	r4, [r0, #24]
 8003f84:	8405      	strh	r5, [r0, #32]
 8003f86:	bd70      	pop	{r4, r5, r6, pc}

08003f88 <TIM_ForcedOC1Config>:
 8003f88:	8b03      	ldrh	r3, [r0, #24]
 8003f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8e:	041b      	lsls	r3, r3, #16
 8003f90:	0c1b      	lsrs	r3, r3, #16
 8003f92:	4319      	orrs	r1, r3
 8003f94:	8301      	strh	r1, [r0, #24]
 8003f96:	4770      	bx	lr

08003f98 <TIM_ForcedOC2Config>:
 8003f98:	8b03      	ldrh	r3, [r0, #24]
 8003f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9e:	041b      	lsls	r3, r3, #16
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003fa6:	b289      	uxth	r1, r1
 8003fa8:	8301      	strh	r1, [r0, #24]
 8003faa:	4770      	bx	lr

08003fac <TIM_ForcedOC3Config>:
 8003fac:	8b83      	ldrh	r3, [r0, #28]
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	4319      	orrs	r1, r3
 8003fb8:	8381      	strh	r1, [r0, #28]
 8003fba:	4770      	bx	lr

08003fbc <TIM_ForcedOC4Config>:
 8003fbc:	8b83      	ldrh	r3, [r0, #28]
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003fca:	b289      	uxth	r1, r1
 8003fcc:	8381      	strh	r1, [r0, #28]
 8003fce:	4770      	bx	lr

08003fd0 <TIM_ARRPreloadConfig>:
 8003fd0:	8803      	ldrh	r3, [r0, #0]
 8003fd2:	b119      	cbz	r1, 8003fdc <TIM_ARRPreloadConfig+0xc>
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fda:	e003      	b.n	8003fe4 <TIM_ARRPreloadConfig+0x14>
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	8003      	strh	r3, [r0, #0]
 8003fe6:	4770      	bx	lr

08003fe8 <TIM_SelectCOM>:
 8003fe8:	8883      	ldrh	r3, [r0, #4]
 8003fea:	b119      	cbz	r1, 8003ff4 <TIM_SelectCOM+0xc>
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f043 0304 	orr.w	r3, r3, #4
 8003ff2:	e003      	b.n	8003ffc <TIM_SelectCOM+0x14>
 8003ff4:	f023 0304 	bic.w	r3, r3, #4
 8003ff8:	041b      	lsls	r3, r3, #16
 8003ffa:	0c1b      	lsrs	r3, r3, #16
 8003ffc:	8083      	strh	r3, [r0, #4]
 8003ffe:	4770      	bx	lr

08004000 <TIM_SelectCCDMA>:
 8004000:	8883      	ldrh	r3, [r0, #4]
 8004002:	b119      	cbz	r1, 800400c <TIM_SelectCCDMA+0xc>
 8004004:	b29b      	uxth	r3, r3
 8004006:	f043 0308 	orr.w	r3, r3, #8
 800400a:	e003      	b.n	8004014 <TIM_SelectCCDMA+0x14>
 800400c:	f023 0308 	bic.w	r3, r3, #8
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	8083      	strh	r3, [r0, #4]
 8004016:	4770      	bx	lr

08004018 <TIM_CCPreloadControl>:
 8004018:	8883      	ldrh	r3, [r0, #4]
 800401a:	b119      	cbz	r1, 8004024 <TIM_CCPreloadControl+0xc>
 800401c:	b29b      	uxth	r3, r3
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	e003      	b.n	800402c <TIM_CCPreloadControl+0x14>
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	8083      	strh	r3, [r0, #4]
 800402e:	4770      	bx	lr

08004030 <TIM_OC1PreloadConfig>:
 8004030:	8b03      	ldrh	r3, [r0, #24]
 8004032:	f023 0308 	bic.w	r3, r3, #8
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	4319      	orrs	r1, r3
 800403c:	8301      	strh	r1, [r0, #24]
 800403e:	4770      	bx	lr

08004040 <TIM_OC2PreloadConfig>:
 8004040:	8b03      	ldrh	r3, [r0, #24]
 8004042:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800404e:	b289      	uxth	r1, r1
 8004050:	8301      	strh	r1, [r0, #24]
 8004052:	4770      	bx	lr

08004054 <TIM_OC3PreloadConfig>:
 8004054:	8b83      	ldrh	r3, [r0, #28]
 8004056:	f023 0308 	bic.w	r3, r3, #8
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	4319      	orrs	r1, r3
 8004060:	8381      	strh	r1, [r0, #28]
 8004062:	4770      	bx	lr

08004064 <TIM_OC4PreloadConfig>:
 8004064:	8b83      	ldrh	r3, [r0, #28]
 8004066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800406a:	041b      	lsls	r3, r3, #16
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004072:	b289      	uxth	r1, r1
 8004074:	8381      	strh	r1, [r0, #28]
 8004076:	4770      	bx	lr

08004078 <TIM_OC1FastConfig>:
 8004078:	8b03      	ldrh	r3, [r0, #24]
 800407a:	f023 0304 	bic.w	r3, r3, #4
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	4319      	orrs	r1, r3
 8004084:	8301      	strh	r1, [r0, #24]
 8004086:	4770      	bx	lr

08004088 <TIM_OC2FastConfig>:
 8004088:	8b03      	ldrh	r3, [r0, #24]
 800408a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800408e:	041b      	lsls	r3, r3, #16
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004096:	b289      	uxth	r1, r1
 8004098:	8301      	strh	r1, [r0, #24]
 800409a:	4770      	bx	lr

0800409c <TIM_OC3FastConfig>:
 800409c:	8b83      	ldrh	r3, [r0, #28]
 800409e:	f023 0304 	bic.w	r3, r3, #4
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	4319      	orrs	r1, r3
 80040a8:	8381      	strh	r1, [r0, #28]
 80040aa:	4770      	bx	lr

080040ac <TIM_OC4FastConfig>:
 80040ac:	8b83      	ldrh	r3, [r0, #28]
 80040ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80040ba:	b289      	uxth	r1, r1
 80040bc:	8381      	strh	r1, [r0, #28]
 80040be:	4770      	bx	lr

080040c0 <TIM_ClearOC1Ref>:
 80040c0:	8b03      	ldrh	r3, [r0, #24]
 80040c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c6:	041b      	lsls	r3, r3, #16
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	4319      	orrs	r1, r3
 80040cc:	8301      	strh	r1, [r0, #24]
 80040ce:	4770      	bx	lr

080040d0 <TIM_ClearOC2Ref>:
 80040d0:	8b03      	ldrh	r3, [r0, #24]
 80040d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80040d6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80040da:	b289      	uxth	r1, r1
 80040dc:	8301      	strh	r1, [r0, #24]
 80040de:	4770      	bx	lr

080040e0 <TIM_ClearOC3Ref>:
 80040e0:	8b83      	ldrh	r3, [r0, #28]
 80040e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	4319      	orrs	r1, r3
 80040ec:	8381      	strh	r1, [r0, #28]
 80040ee:	4770      	bx	lr

080040f0 <TIM_ClearOC4Ref>:
 80040f0:	8b83      	ldrh	r3, [r0, #28]
 80040f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80040f6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80040fa:	b289      	uxth	r1, r1
 80040fc:	8381      	strh	r1, [r0, #28]
 80040fe:	4770      	bx	lr

08004100 <TIM_OC1PolarityConfig>:
 8004100:	8c03      	ldrh	r3, [r0, #32]
 8004102:	f023 0302 	bic.w	r3, r3, #2
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	4319      	orrs	r1, r3
 800410c:	8401      	strh	r1, [r0, #32]
 800410e:	4770      	bx	lr

08004110 <TIM_OC1NPolarityConfig>:
 8004110:	8c03      	ldrh	r3, [r0, #32]
 8004112:	f023 0308 	bic.w	r3, r3, #8
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	4319      	orrs	r1, r3
 800411c:	8401      	strh	r1, [r0, #32]
 800411e:	4770      	bx	lr

08004120 <TIM_OC2PolarityConfig>:
 8004120:	8c03      	ldrh	r3, [r0, #32]
 8004122:	f023 0320 	bic.w	r3, r3, #32
 8004126:	041b      	lsls	r3, r3, #16
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 800412e:	b289      	uxth	r1, r1
 8004130:	8401      	strh	r1, [r0, #32]
 8004132:	4770      	bx	lr

08004134 <TIM_OC2NPolarityConfig>:
 8004134:	8c03      	ldrh	r3, [r0, #32]
 8004136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8004142:	b289      	uxth	r1, r1
 8004144:	8401      	strh	r1, [r0, #32]
 8004146:	4770      	bx	lr

08004148 <TIM_OC3PolarityConfig>:
 8004148:	8c03      	ldrh	r3, [r0, #32]
 800414a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004156:	b289      	uxth	r1, r1
 8004158:	8401      	strh	r1, [r0, #32]
 800415a:	4770      	bx	lr

0800415c <TIM_OC3NPolarityConfig>:
 800415c:	8c03      	ldrh	r3, [r0, #32]
 800415e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800416a:	b289      	uxth	r1, r1
 800416c:	8401      	strh	r1, [r0, #32]
 800416e:	4770      	bx	lr

08004170 <TIM_OC4PolarityConfig>:
 8004170:	8c03      	ldrh	r3, [r0, #32]
 8004172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004176:	041b      	lsls	r3, r3, #16
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 800417e:	b289      	uxth	r1, r1
 8004180:	8401      	strh	r1, [r0, #32]
 8004182:	4770      	bx	lr

08004184 <TIM_CCxCmd>:
 8004184:	b530      	push	{r4, r5, lr}
 8004186:	8c04      	ldrh	r4, [r0, #32]
 8004188:	408a      	lsls	r2, r1
 800418a:	b2a5      	uxth	r5, r4
 800418c:	2401      	movs	r4, #1
 800418e:	408c      	lsls	r4, r1
 8004190:	ea25 0404 	bic.w	r4, r5, r4
 8004194:	8404      	strh	r4, [r0, #32]
 8004196:	8c03      	ldrh	r3, [r0, #32]
 8004198:	4313      	orrs	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	8403      	strh	r3, [r0, #32]
 800419e:	bd30      	pop	{r4, r5, pc}

080041a0 <TIM_CCxNCmd>:
 80041a0:	b530      	push	{r4, r5, lr}
 80041a2:	8c04      	ldrh	r4, [r0, #32]
 80041a4:	408a      	lsls	r2, r1
 80041a6:	b2a5      	uxth	r5, r4
 80041a8:	2404      	movs	r4, #4
 80041aa:	408c      	lsls	r4, r1
 80041ac:	ea25 0404 	bic.w	r4, r5, r4
 80041b0:	8404      	strh	r4, [r0, #32]
 80041b2:	8c03      	ldrh	r3, [r0, #32]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	8403      	strh	r3, [r0, #32]
 80041ba:	bd30      	pop	{r4, r5, pc}

080041bc <TIM_SelectOCxM>:
 80041bc:	b530      	push	{r4, r5, lr}
 80041be:	8c04      	ldrh	r4, [r0, #32]
 80041c0:	f100 0318 	add.w	r3, r0, #24
 80041c4:	b2a5      	uxth	r5, r4
 80041c6:	2401      	movs	r4, #1
 80041c8:	408c      	lsls	r4, r1
 80041ca:	ea25 0404 	bic.w	r4, r5, r4
 80041ce:	8404      	strh	r4, [r0, #32]
 80041d0:	f021 0008 	bic.w	r0, r1, #8
 80041d4:	b930      	cbnz	r0, 80041e4 <TIM_SelectOCxM+0x28>
 80041d6:	0849      	lsrs	r1, r1, #1
 80041d8:	58c8      	ldr	r0, [r1, r3]
 80041da:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80041de:	50c8      	str	r0, [r1, r3]
 80041e0:	58c8      	ldr	r0, [r1, r3]
 80041e2:	e009      	b.n	80041f8 <TIM_SelectOCxM+0x3c>
 80041e4:	3904      	subs	r1, #4
 80041e6:	f3c1 014e 	ubfx	r1, r1, #1, #15
 80041ea:	58c8      	ldr	r0, [r1, r3]
 80041ec:	0212      	lsls	r2, r2, #8
 80041ee:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 80041f2:	50c8      	str	r0, [r1, r3]
 80041f4:	58c8      	ldr	r0, [r1, r3]
 80041f6:	b292      	uxth	r2, r2
 80041f8:	4302      	orrs	r2, r0
 80041fa:	50ca      	str	r2, [r1, r3]
 80041fc:	bd30      	pop	{r4, r5, pc}

080041fe <TIM_UpdateDisableConfig>:
 80041fe:	8803      	ldrh	r3, [r0, #0]
 8004200:	b119      	cbz	r1, 800420a <TIM_UpdateDisableConfig+0xc>
 8004202:	b29b      	uxth	r3, r3
 8004204:	f043 0302 	orr.w	r3, r3, #2
 8004208:	e003      	b.n	8004212 <TIM_UpdateDisableConfig+0x14>
 800420a:	f023 0302 	bic.w	r3, r3, #2
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	8003      	strh	r3, [r0, #0]
 8004214:	4770      	bx	lr

08004216 <TIM_UpdateRequestConfig>:
 8004216:	8803      	ldrh	r3, [r0, #0]
 8004218:	b119      	cbz	r1, 8004222 <TIM_UpdateRequestConfig+0xc>
 800421a:	b29b      	uxth	r3, r3
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	e003      	b.n	800422a <TIM_UpdateRequestConfig+0x14>
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	8003      	strh	r3, [r0, #0]
 800422c:	4770      	bx	lr

0800422e <TIM_SelectHallSensor>:
 800422e:	8883      	ldrh	r3, [r0, #4]
 8004230:	b119      	cbz	r1, 800423a <TIM_SelectHallSensor+0xc>
 8004232:	b29b      	uxth	r3, r3
 8004234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004238:	e003      	b.n	8004242 <TIM_SelectHallSensor+0x14>
 800423a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	0c1b      	lsrs	r3, r3, #16
 8004242:	8083      	strh	r3, [r0, #4]
 8004244:	4770      	bx	lr

08004246 <TIM_SelectOnePulseMode>:
 8004246:	8803      	ldrh	r3, [r0, #0]
 8004248:	f023 0308 	bic.w	r3, r3, #8
 800424c:	041b      	lsls	r3, r3, #16
 800424e:	0c1b      	lsrs	r3, r3, #16
 8004250:	8003      	strh	r3, [r0, #0]
 8004252:	8803      	ldrh	r3, [r0, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	4319      	orrs	r1, r3
 8004258:	8001      	strh	r1, [r0, #0]
 800425a:	4770      	bx	lr

0800425c <TIM_SelectOutputTrigger>:
 800425c:	8883      	ldrh	r3, [r0, #4]
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	8083      	strh	r3, [r0, #4]
 8004268:	8883      	ldrh	r3, [r0, #4]
 800426a:	b29b      	uxth	r3, r3
 800426c:	4319      	orrs	r1, r3
 800426e:	8081      	strh	r1, [r0, #4]
 8004270:	4770      	bx	lr

08004272 <TIM_SelectSlaveMode>:
 8004272:	8903      	ldrh	r3, [r0, #8]
 8004274:	f023 0307 	bic.w	r3, r3, #7
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	8103      	strh	r3, [r0, #8]
 800427e:	8903      	ldrh	r3, [r0, #8]
 8004280:	b29b      	uxth	r3, r3
 8004282:	4319      	orrs	r1, r3
 8004284:	8101      	strh	r1, [r0, #8]
 8004286:	4770      	bx	lr

08004288 <TIM_SelectMasterSlaveMode>:
 8004288:	8903      	ldrh	r3, [r0, #8]
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	041b      	lsls	r3, r3, #16
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	8103      	strh	r3, [r0, #8]
 8004294:	8903      	ldrh	r3, [r0, #8]
 8004296:	b29b      	uxth	r3, r3
 8004298:	4319      	orrs	r1, r3
 800429a:	8101      	strh	r1, [r0, #8]
 800429c:	4770      	bx	lr

0800429e <TIM_SetCounter>:
 800429e:	8481      	strh	r1, [r0, #36]	; 0x24
 80042a0:	4770      	bx	lr

080042a2 <TIM_SetAutoreload>:
 80042a2:	8581      	strh	r1, [r0, #44]	; 0x2c
 80042a4:	4770      	bx	lr

080042a6 <TIM_SetCompare1>:
 80042a6:	8681      	strh	r1, [r0, #52]	; 0x34
 80042a8:	4770      	bx	lr

080042aa <TIM_SetCompare2>:
 80042aa:	8701      	strh	r1, [r0, #56]	; 0x38
 80042ac:	4770      	bx	lr

080042ae <TIM_SetCompare3>:
 80042ae:	8781      	strh	r1, [r0, #60]	; 0x3c
 80042b0:	4770      	bx	lr

080042b2 <TIM_SetCompare4>:
 80042b2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80042b6:	4770      	bx	lr

080042b8 <TIM_SetIC1Prescaler>:
 80042b8:	8b03      	ldrh	r3, [r0, #24]
 80042ba:	f023 030c 	bic.w	r3, r3, #12
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	8303      	strh	r3, [r0, #24]
 80042c4:	8b03      	ldrh	r3, [r0, #24]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	4319      	orrs	r1, r3
 80042ca:	8301      	strh	r1, [r0, #24]
 80042cc:	4770      	bx	lr

080042ce <TIM_SetIC2Prescaler>:
 80042ce:	8b03      	ldrh	r3, [r0, #24]
 80042d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042d4:	041b      	lsls	r3, r3, #16
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	8303      	strh	r3, [r0, #24]
 80042da:	8b03      	ldrh	r3, [r0, #24]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80042e2:	b289      	uxth	r1, r1
 80042e4:	8301      	strh	r1, [r0, #24]
 80042e6:	4770      	bx	lr

080042e8 <TIM_PWMIConfig>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	460c      	mov	r4, r1
 80042ec:	8849      	ldrh	r1, [r1, #2]
 80042ee:	88a2      	ldrh	r2, [r4, #4]
 80042f0:	2900      	cmp	r1, #0
 80042f2:	f8b4 e000 	ldrh.w	lr, [r4]
 80042f6:	bf0c      	ite	eq
 80042f8:	2602      	moveq	r6, #2
 80042fa:	2600      	movne	r6, #0
 80042fc:	2a01      	cmp	r2, #1
 80042fe:	bf0c      	ite	eq
 8004300:	2702      	moveq	r7, #2
 8004302:	2701      	movne	r7, #1
 8004304:	8923      	ldrh	r3, [r4, #8]
 8004306:	f1be 0f00 	cmp.w	lr, #0
 800430a:	d10e      	bne.n	800432a <TIM_PWMIConfig+0x42>
 800430c:	f7ff fac2 	bl	8003894 <TI1_Config>
 8004310:	88e1      	ldrh	r1, [r4, #6]
 8004312:	f7ff ffd1 	bl	80042b8 <TIM_SetIC1Prescaler>
 8004316:	4631      	mov	r1, r6
 8004318:	8923      	ldrh	r3, [r4, #8]
 800431a:	463a      	mov	r2, r7
 800431c:	f7ff faee 	bl	80038fc <TI2_Config>
 8004320:	88e1      	ldrh	r1, [r4, #6]
 8004322:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004326:	f7ff bfd2 	b.w	80042ce <TIM_SetIC2Prescaler>
 800432a:	f7ff fae7 	bl	80038fc <TI2_Config>
 800432e:	88e1      	ldrh	r1, [r4, #6]
 8004330:	f7ff ffcd 	bl	80042ce <TIM_SetIC2Prescaler>
 8004334:	4631      	mov	r1, r6
 8004336:	8923      	ldrh	r3, [r4, #8]
 8004338:	463a      	mov	r2, r7
 800433a:	f7ff faab 	bl	8003894 <TI1_Config>
 800433e:	88e1      	ldrh	r1, [r4, #6]
 8004340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004344:	f7ff bfb8 	b.w	80042b8 <TIM_SetIC1Prescaler>

08004348 <TIM_SetIC3Prescaler>:
 8004348:	8b83      	ldrh	r3, [r0, #28]
 800434a:	f023 030c 	bic.w	r3, r3, #12
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	8383      	strh	r3, [r0, #28]
 8004354:	8b83      	ldrh	r3, [r0, #28]
 8004356:	b29b      	uxth	r3, r3
 8004358:	4319      	orrs	r1, r3
 800435a:	8381      	strh	r1, [r0, #28]
 800435c:	4770      	bx	lr

0800435e <TIM_SetIC4Prescaler>:
 800435e:	8b83      	ldrh	r3, [r0, #28]
 8004360:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	0c1b      	lsrs	r3, r3, #16
 8004368:	8383      	strh	r3, [r0, #28]
 800436a:	8b83      	ldrh	r3, [r0, #28]
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8004372:	b289      	uxth	r1, r1
 8004374:	8381      	strh	r1, [r0, #28]
 8004376:	4770      	bx	lr

08004378 <TIM_ICInit>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	880e      	ldrh	r6, [r1, #0]
 800437c:	460d      	mov	r5, r1
 800437e:	890b      	ldrh	r3, [r1, #8]
 8004380:	888a      	ldrh	r2, [r1, #4]
 8004382:	4604      	mov	r4, r0
 8004384:	8849      	ldrh	r1, [r1, #2]
 8004386:	b936      	cbnz	r6, 8004396 <TIM_ICInit+0x1e>
 8004388:	f7ff fa84 	bl	8003894 <TI1_Config>
 800438c:	88e9      	ldrh	r1, [r5, #6]
 800438e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004392:	f7ff bf91 	b.w	80042b8 <TIM_SetIC1Prescaler>
 8004396:	2e04      	cmp	r6, #4
 8004398:	d106      	bne.n	80043a8 <TIM_ICInit+0x30>
 800439a:	f7ff faaf 	bl	80038fc <TI2_Config>
 800439e:	88e9      	ldrh	r1, [r5, #6]
 80043a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043a4:	f7ff bf93 	b.w	80042ce <TIM_SetIC2Prescaler>
 80043a8:	2e08      	cmp	r6, #8
 80043aa:	88ef      	ldrh	r7, [r5, #6]
 80043ac:	8c00      	ldrh	r0, [r0, #32]
 80043ae:	d139      	bne.n	8004424 <TIM_ICInit+0xac>
 80043b0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80043b4:	0400      	lsls	r0, r0, #16
 80043b6:	0c00      	lsrs	r0, r0, #16
 80043b8:	8420      	strh	r0, [r4, #32]
 80043ba:	8ba6      	ldrh	r6, [r4, #28]
 80043bc:	8c20      	ldrh	r0, [r4, #32]
 80043be:	b2b6      	uxth	r6, r6
 80043c0:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 80043c4:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	431a      	orrs	r2, r3
 80043cc:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <TIM_ICInit+0x12c>)
 80043ce:	b280      	uxth	r0, r0
 80043d0:	429c      	cmp	r4, r3
 80043d2:	d012      	beq.n	80043fa <TIM_ICInit+0x82>
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	429c      	cmp	r4, r3
 80043da:	d00e      	beq.n	80043fa <TIM_ICInit+0x82>
 80043dc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80043e0:	d00b      	beq.n	80043fa <TIM_ICInit+0x82>
 80043e2:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80043e6:	429c      	cmp	r4, r3
 80043e8:	d007      	beq.n	80043fa <TIM_ICInit+0x82>
 80043ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ee:	429c      	cmp	r4, r3
 80043f0:	d003      	beq.n	80043fa <TIM_ICInit+0x82>
 80043f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f6:	429c      	cmp	r4, r3
 80043f8:	d107      	bne.n	800440a <TIM_ICInit+0x92>
 80043fa:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80043fe:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8004402:	b280      	uxth	r0, r0
 8004404:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004408:	e004      	b.n	8004414 <TIM_ICInit+0x9c>
 800440a:	f420 6320 	bic.w	r3, r0, #2560	; 0xa00
 800440e:	f441 7080 	orr.w	r0, r1, #256	; 0x100
 8004412:	4318      	orrs	r0, r3
 8004414:	83a2      	strh	r2, [r4, #28]
 8004416:	4639      	mov	r1, r7
 8004418:	8420      	strh	r0, [r4, #32]
 800441a:	4620      	mov	r0, r4
 800441c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004420:	f7ff bf92 	b.w	8004348 <TIM_SetIC3Prescaler>
 8004424:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8004428:	0400      	lsls	r0, r0, #16
 800442a:	0c00      	lsrs	r0, r0, #16
 800442c:	8420      	strh	r0, [r4, #32]
 800442e:	8ba6      	ldrh	r6, [r4, #28]
 8004430:	f8b4 e020 	ldrh.w	lr, [r4, #32]
 8004434:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8004438:	052d      	lsls	r5, r5, #20
 800443a:	0d2d      	lsrs	r5, r5, #20
 800443c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8004440:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <TIM_ICInit+0x12c>)
 8004442:	ea45 3303 	orr.w	r3, r5, r3, lsl #12
 8004446:	4294      	cmp	r4, r2
 8004448:	fa1f fe8e 	uxth.w	lr, lr
 800444c:	b29b      	uxth	r3, r3
 800444e:	d012      	beq.n	8004476 <TIM_ICInit+0xfe>
 8004450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004454:	4294      	cmp	r4, r2
 8004456:	d00e      	beq.n	8004476 <TIM_ICInit+0xfe>
 8004458:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800445c:	d00b      	beq.n	8004476 <TIM_ICInit+0xfe>
 800445e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004462:	4294      	cmp	r4, r2
 8004464:	d007      	beq.n	8004476 <TIM_ICInit+0xfe>
 8004466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800446a:	4294      	cmp	r4, r2
 800446c:	d003      	beq.n	8004476 <TIM_ICInit+0xfe>
 800446e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004472:	4294      	cmp	r4, r2
 8004474:	d107      	bne.n	8004486 <TIM_ICInit+0x10e>
 8004476:	f42e 5000 	bic.w	r0, lr, #8192	; 0x2000
 800447a:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 800447e:	b280      	uxth	r0, r0
 8004480:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8004484:	e006      	b.n	8004494 <TIM_ICInit+0x11c>
 8004486:	f647 52ff 	movw	r2, #32255	; 0x7dff
 800448a:	f441 5080 	orr.w	r0, r1, #4096	; 0x1000
 800448e:	ea0e 0202 	and.w	r2, lr, r2
 8004492:	4310      	orrs	r0, r2
 8004494:	83a3      	strh	r3, [r4, #28]
 8004496:	4639      	mov	r1, r7
 8004498:	8420      	strh	r0, [r4, #32]
 800449a:	4620      	mov	r0, r4
 800449c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044a0:	f7ff bf5d 	b.w	800435e <TIM_SetIC4Prescaler>
 80044a4:	40012c00 	.word	0x40012c00

080044a8 <TIM_SetClockDivision>:
 80044a8:	8803      	ldrh	r3, [r0, #0]
 80044aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	8003      	strh	r3, [r0, #0]
 80044b4:	8803      	ldrh	r3, [r0, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4319      	orrs	r1, r3
 80044ba:	8001      	strh	r1, [r0, #0]
 80044bc:	4770      	bx	lr

080044be <TIM_GetCapture1>:
 80044be:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80044c0:	b280      	uxth	r0, r0
 80044c2:	4770      	bx	lr

080044c4 <TIM_GetCapture2>:
 80044c4:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 80044c6:	b280      	uxth	r0, r0
 80044c8:	4770      	bx	lr

080044ca <TIM_GetCapture3>:
 80044ca:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
 80044cc:	b280      	uxth	r0, r0
 80044ce:	4770      	bx	lr

080044d0 <TIM_GetCapture4>:
 80044d0:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
 80044d4:	b280      	uxth	r0, r0
 80044d6:	4770      	bx	lr

080044d8 <TIM_GetCounter>:
 80044d8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80044da:	b280      	uxth	r0, r0
 80044dc:	4770      	bx	lr

080044de <TIM_GetPrescaler>:
 80044de:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80044e0:	b280      	uxth	r0, r0
 80044e2:	4770      	bx	lr

080044e4 <TIM_GetFlagStatus>:
 80044e4:	8a03      	ldrh	r3, [r0, #16]
 80044e6:	4219      	tst	r1, r3
 80044e8:	bf14      	ite	ne
 80044ea:	2001      	movne	r0, #1
 80044ec:	2000      	moveq	r0, #0
 80044ee:	4770      	bx	lr

080044f0 <TIM_ClearFlag>:
 80044f0:	43c9      	mvns	r1, r1
 80044f2:	b289      	uxth	r1, r1
 80044f4:	8201      	strh	r1, [r0, #16]
 80044f6:	4770      	bx	lr

080044f8 <TIM_GetITStatus>:
 80044f8:	8a03      	ldrh	r3, [r0, #16]
 80044fa:	8982      	ldrh	r2, [r0, #12]
 80044fc:	ea11 0003 	ands.w	r0, r1, r3
 8004500:	b292      	uxth	r2, r2
 8004502:	d003      	beq.n	800450c <TIM_GetITStatus+0x14>
 8004504:	4211      	tst	r1, r2
 8004506:	bf14      	ite	ne
 8004508:	2001      	movne	r0, #1
 800450a:	2000      	moveq	r0, #0
 800450c:	4770      	bx	lr

0800450e <TIM_ClearITPendingBit>:
 800450e:	43c9      	mvns	r1, r1
 8004510:	b289      	uxth	r1, r1
 8004512:	8201      	strh	r1, [r0, #16]
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop

08004518 <SDIO_DeInit>:
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <SDIO_DeInit+0x1c>)
 800451a:	4907      	ldr	r1, [pc, #28]	; (8004538 <SDIO_DeInit+0x20>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24
 8004528:	629a      	str	r2, [r3, #40]	; 0x28
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c
 800452c:	6399      	str	r1, [r3, #56]	; 0x38
 800452e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40018000 	.word	0x40018000
 8004538:	00c007ff 	.word	0x00c007ff

0800453c <SDIO_Init>:
 800453c:	6843      	ldr	r3, [r0, #4]
 800453e:	6881      	ldr	r1, [r0, #8]
 8004540:	b510      	push	{r4, lr}
 8004542:	4319      	orrs	r1, r3
 8004544:	68c3      	ldr	r3, [r0, #12]
 8004546:	4c08      	ldr	r4, [pc, #32]	; (8004568 <SDIO_Init+0x2c>)
 8004548:	4319      	orrs	r1, r3
 800454a:	6803      	ldr	r3, [r0, #0]
 800454c:	6862      	ldr	r2, [r4, #4]
 800454e:	4319      	orrs	r1, r3
 8004550:	6903      	ldr	r3, [r0, #16]
 8004552:	4319      	orrs	r1, r3
 8004554:	f422 43fd 	bic.w	r3, r2, #32384	; 0x7e80
 8004558:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800455c:	7d02      	ldrb	r2, [r0, #20]
 800455e:	430b      	orrs	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	6063      	str	r3, [r4, #4]
 8004564:	bd10      	pop	{r4, pc}
 8004566:	bf00      	nop
 8004568:	40018000 	.word	0x40018000

0800456c <SDIO_StructInit>:
 800456c:	2300      	movs	r3, #0
 800456e:	7503      	strb	r3, [r0, #20]
 8004570:	6003      	str	r3, [r0, #0]
 8004572:	6043      	str	r3, [r0, #4]
 8004574:	6083      	str	r3, [r0, #8]
 8004576:	60c3      	str	r3, [r0, #12]
 8004578:	6103      	str	r3, [r0, #16]
 800457a:	4770      	bx	lr

0800457c <SDIO_ClockCmd>:
 800457c:	4b01      	ldr	r3, [pc, #4]	; (8004584 <SDIO_ClockCmd+0x8>)
 800457e:	6018      	str	r0, [r3, #0]
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	423000a0 	.word	0x423000a0

08004588 <SDIO_SetPowerState>:
 8004588:	4b04      	ldr	r3, [pc, #16]	; (800459c <SDIO_SetPowerState+0x14>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	f022 0203 	bic.w	r2, r2, #3
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4310      	orrs	r0, r2
 8004596:	6018      	str	r0, [r3, #0]
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40018000 	.word	0x40018000

080045a0 <SDIO_GetPowerState>:
 80045a0:	4b02      	ldr	r3, [pc, #8]	; (80045ac <SDIO_GetPowerState+0xc>)
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	f000 0003 	and.w	r0, r0, #3
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40018000 	.word	0x40018000

080045b0 <SDIO_ITConfig>:
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <SDIO_ITConfig+0x14>)
 80045b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b4:	b109      	cbz	r1, 80045ba <SDIO_ITConfig+0xa>
 80045b6:	4310      	orrs	r0, r2
 80045b8:	e001      	b.n	80045be <SDIO_ITConfig+0xe>
 80045ba:	ea22 0000 	bic.w	r0, r2, r0
 80045be:	63d8      	str	r0, [r3, #60]	; 0x3c
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40018000 	.word	0x40018000

080045c8 <SDIO_DMACmd>:
 80045c8:	4b01      	ldr	r3, [pc, #4]	; (80045d0 <SDIO_DMACmd+0x8>)
 80045ca:	6018      	str	r0, [r3, #0]
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	4230058c 	.word	0x4230058c

080045d4 <SDIO_SendCommand>:
 80045d4:	6803      	ldr	r3, [r0, #0]
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <SDIO_SendCommand+0x28>)
 80045d8:	b510      	push	{r4, lr}
 80045da:	6093      	str	r3, [r2, #8]
 80045dc:	6881      	ldr	r1, [r0, #8]
 80045de:	6844      	ldr	r4, [r0, #4]
 80045e0:	68d3      	ldr	r3, [r2, #12]
 80045e2:	430c      	orrs	r4, r1
 80045e4:	68c1      	ldr	r1, [r0, #12]
 80045e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045ea:	430c      	orrs	r4, r1
 80045ec:	6901      	ldr	r1, [r0, #16]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	4321      	orrs	r1, r4
 80045f4:	430b      	orrs	r3, r1
 80045f6:	60d3      	str	r3, [r2, #12]
 80045f8:	bd10      	pop	{r4, pc}
 80045fa:	bf00      	nop
 80045fc:	40018000 	.word	0x40018000

08004600 <SDIO_CmdStructInit>:
 8004600:	2300      	movs	r3, #0
 8004602:	6003      	str	r3, [r0, #0]
 8004604:	6043      	str	r3, [r0, #4]
 8004606:	6083      	str	r3, [r0, #8]
 8004608:	60c3      	str	r3, [r0, #12]
 800460a:	6103      	str	r3, [r0, #16]
 800460c:	4770      	bx	lr

0800460e <SDIO_GetCommandResponse>:
 800460e:	4b02      	ldr	r3, [pc, #8]	; (8004618 <SDIO_GetCommandResponse+0xa>)
 8004610:	6918      	ldr	r0, [r3, #16]
 8004612:	b2c0      	uxtb	r0, r0
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40018000 	.word	0x40018000

0800461c <SDIO_GetResponse>:
 800461c:	b082      	sub	sp, #8
 800461e:	2300      	movs	r3, #0
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	4b03      	ldr	r3, [pc, #12]	; (8004630 <SDIO_GetResponse+0x14>)
 8004624:	4403      	add	r3, r0
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	9b01      	ldr	r3, [sp, #4]
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	b002      	add	sp, #8
 800462e:	4770      	bx	lr
 8004630:	40018014 	.word	0x40018014

08004634 <SDIO_DataConfig>:
 8004634:	6803      	ldr	r3, [r0, #0]
 8004636:	4909      	ldr	r1, [pc, #36]	; (800465c <SDIO_DataConfig+0x28>)
 8004638:	b510      	push	{r4, lr}
 800463a:	624b      	str	r3, [r1, #36]	; 0x24
 800463c:	6843      	ldr	r3, [r0, #4]
 800463e:	628b      	str	r3, [r1, #40]	; 0x28
 8004640:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004642:	6884      	ldr	r4, [r0, #8]
 8004644:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004648:	68c3      	ldr	r3, [r0, #12]
 800464a:	431c      	orrs	r4, r3
 800464c:	6903      	ldr	r3, [r0, #16]
 800464e:	6940      	ldr	r0, [r0, #20]
 8004650:	4323      	orrs	r3, r4
 8004652:	4303      	orrs	r3, r0
 8004654:	4313      	orrs	r3, r2
 8004656:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004658:	bd10      	pop	{r4, pc}
 800465a:	bf00      	nop
 800465c:	40018000 	.word	0x40018000

08004660 <SDIO_DataStructInit>:
 8004660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004664:	6003      	str	r3, [r0, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	6043      	str	r3, [r0, #4]
 800466a:	6083      	str	r3, [r0, #8]
 800466c:	60c3      	str	r3, [r0, #12]
 800466e:	6103      	str	r3, [r0, #16]
 8004670:	6143      	str	r3, [r0, #20]
 8004672:	4770      	bx	lr

08004674 <SDIO_GetDataCounter>:
 8004674:	4b01      	ldr	r3, [pc, #4]	; (800467c <SDIO_GetDataCounter+0x8>)
 8004676:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40018000 	.word	0x40018000

08004680 <SDIO_ReadData>:
 8004680:	4b01      	ldr	r3, [pc, #4]	; (8004688 <SDIO_ReadData+0x8>)
 8004682:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8004686:	4770      	bx	lr
 8004688:	40018000 	.word	0x40018000

0800468c <SDIO_WriteData>:
 800468c:	4b01      	ldr	r3, [pc, #4]	; (8004694 <SDIO_WriteData+0x8>)
 800468e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8004692:	4770      	bx	lr
 8004694:	40018000 	.word	0x40018000

08004698 <SDIO_GetFIFOCount>:
 8004698:	4b01      	ldr	r3, [pc, #4]	; (80046a0 <SDIO_GetFIFOCount+0x8>)
 800469a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40018000 	.word	0x40018000

080046a4 <SDIO_StartSDIOReadWait>:
 80046a4:	4b01      	ldr	r3, [pc, #4]	; (80046ac <SDIO_StartSDIOReadWait+0x8>)
 80046a6:	6018      	str	r0, [r3, #0]
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	423005a0 	.word	0x423005a0

080046b0 <SDIO_StopSDIOReadWait>:
 80046b0:	4b01      	ldr	r3, [pc, #4]	; (80046b8 <SDIO_StopSDIOReadWait+0x8>)
 80046b2:	6018      	str	r0, [r3, #0]
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	423005a4 	.word	0x423005a4

080046bc <SDIO_SetSDIOReadWaitMode>:
 80046bc:	4b01      	ldr	r3, [pc, #4]	; (80046c4 <SDIO_SetSDIOReadWaitMode+0x8>)
 80046be:	6018      	str	r0, [r3, #0]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	423005a8 	.word	0x423005a8

080046c8 <SDIO_SetSDIOOperation>:
 80046c8:	4b01      	ldr	r3, [pc, #4]	; (80046d0 <SDIO_SetSDIOOperation+0x8>)
 80046ca:	6018      	str	r0, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	423005ac 	.word	0x423005ac

080046d4 <SDIO_SendSDIOSuspendCmd>:
 80046d4:	4b01      	ldr	r3, [pc, #4]	; (80046dc <SDIO_SendSDIOSuspendCmd+0x8>)
 80046d6:	6018      	str	r0, [r3, #0]
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	423001ac 	.word	0x423001ac

080046e0 <SDIO_CommandCompletionCmd>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	; (80046e8 <SDIO_CommandCompletionCmd+0x8>)
 80046e2:	6018      	str	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	423001b0 	.word	0x423001b0

080046ec <SDIO_CEATAITCmd>:
 80046ec:	f000 0001 	and.w	r0, r0, #1
 80046f0:	4b02      	ldr	r3, [pc, #8]	; (80046fc <SDIO_CEATAITCmd+0x10>)
 80046f2:	f080 0001 	eor.w	r0, r0, #1
 80046f6:	6018      	str	r0, [r3, #0]
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	423001b4 	.word	0x423001b4

08004700 <SDIO_SendCEATACmd>:
 8004700:	4b01      	ldr	r3, [pc, #4]	; (8004708 <SDIO_SendCEATACmd+0x8>)
 8004702:	6018      	str	r0, [r3, #0]
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	423001b8 	.word	0x423001b8

0800470c <SDIO_ClearFlag>:
 800470c:	4b01      	ldr	r3, [pc, #4]	; (8004714 <SDIO_ClearFlag+0x8>)
 800470e:	6398      	str	r0, [r3, #56]	; 0x38
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40018000 	.word	0x40018000

08004718 <SDIO_GetITStatus>:
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <SDIO_GetITStatus+0x10>)
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	4203      	tst	r3, r0
 800471e:	bf14      	ite	ne
 8004720:	2001      	movne	r0, #1
 8004722:	2000      	moveq	r0, #0
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40018000 	.word	0x40018000

0800472c <SDIO_GetFlagStatus>:
 800472c:	f7ff bff4 	b.w	8004718 <SDIO_GetITStatus>

08004730 <SDIO_ClearITPendingBit>:
 8004730:	4b01      	ldr	r3, [pc, #4]	; (8004738 <SDIO_ClearITPendingBit+0x8>)
 8004732:	6398      	str	r0, [r3, #56]	; 0x38
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40018000 	.word	0x40018000

0800473c <WWDG_DeInit>:
 800473c:	b508      	push	{r3, lr}
 800473e:	2101      	movs	r1, #1
 8004740:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004744:	f7fe fd16 	bl	8003174 <RCC_APB1PeriphResetCmd>
 8004748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800474c:	2100      	movs	r1, #0
 800474e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004752:	f7fe bd0f 	b.w	8003174 <RCC_APB1PeriphResetCmd>

08004756 <WWDG_SetPrescaler>:
 8004756:	4a03      	ldr	r2, [pc, #12]	; (8004764 <WWDG_SetPrescaler+0xe>)
 8004758:	6853      	ldr	r3, [r2, #4]
 800475a:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800475e:	4318      	orrs	r0, r3
 8004760:	6050      	str	r0, [r2, #4]
 8004762:	4770      	bx	lr
 8004764:	40002c00 	.word	0x40002c00

08004768 <WWDG_SetWindowValue>:
 8004768:	b082      	sub	sp, #8
 800476a:	4a08      	ldr	r2, [pc, #32]	; (800478c <WWDG_SetWindowValue+0x24>)
 800476c:	2300      	movs	r3, #0
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	6853      	ldr	r3, [r2, #4]
 8004772:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	9b01      	ldr	r3, [sp, #4]
 800477e:	4303      	orrs	r3, r0
 8004780:	9301      	str	r3, [sp, #4]
 8004782:	9b01      	ldr	r3, [sp, #4]
 8004784:	6053      	str	r3, [r2, #4]
 8004786:	b002      	add	sp, #8
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40002c00 	.word	0x40002c00

08004790 <WWDG_EnableIT>:
 8004790:	4b01      	ldr	r3, [pc, #4]	; (8004798 <WWDG_EnableIT+0x8>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	4770      	bx	lr
 8004798:	420580a4 	.word	0x420580a4

0800479c <WWDG_SetCounter>:
 800479c:	4b02      	ldr	r3, [pc, #8]	; (80047a8 <WWDG_SetCounter+0xc>)
 800479e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80047a2:	6018      	str	r0, [r3, #0]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40002c00 	.word	0x40002c00

080047ac <WWDG_Enable>:
 80047ac:	4b02      	ldr	r3, [pc, #8]	; (80047b8 <WWDG_Enable+0xc>)
 80047ae:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80047b2:	6018      	str	r0, [r3, #0]
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40002c00 	.word	0x40002c00

080047bc <WWDG_GetFlagStatus>:
 80047bc:	4b01      	ldr	r3, [pc, #4]	; (80047c4 <WWDG_GetFlagStatus+0x8>)
 80047be:	6898      	ldr	r0, [r3, #8]
 80047c0:	b2c0      	uxtb	r0, r0
 80047c2:	4770      	bx	lr
 80047c4:	40002c00 	.word	0x40002c00

080047c8 <WWDG_ClearFlag>:
 80047c8:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <WWDG_ClearFlag+0x8>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
 80047ce:	4770      	bx	lr
 80047d0:	40002c00 	.word	0x40002c00

080047d4 <DBGMCU_GetREVID>:
 80047d4:	4b01      	ldr	r3, [pc, #4]	; (80047dc <DBGMCU_GetREVID+0x8>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	0c00      	lsrs	r0, r0, #16
 80047da:	4770      	bx	lr
 80047dc:	e0042000 	.word	0xe0042000

080047e0 <DBGMCU_GetDEVID>:
 80047e0:	4b02      	ldr	r3, [pc, #8]	; (80047ec <DBGMCU_GetDEVID+0xc>)
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	e0042000 	.word	0xe0042000

080047f0 <DBGMCU_Config>:
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <DBGMCU_Config+0x14>)
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	b109      	cbz	r1, 80047fa <DBGMCU_Config+0xa>
 80047f6:	4310      	orrs	r0, r2
 80047f8:	e001      	b.n	80047fe <DBGMCU_Config+0xe>
 80047fa:	ea22 0000 	bic.w	r0, r2, r0
 80047fe:	6058      	str	r0, [r3, #4]
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	e0042000 	.word	0xe0042000

08004808 <NVIC_PriorityGroupConfig>:
 8004808:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800480c:	4b02      	ldr	r3, [pc, #8]	; (8004818 <NVIC_PriorityGroupConfig+0x10>)
 800480e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8004812:	60d8      	str	r0, [r3, #12]
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <NVIC_Init>:
 800481c:	78c2      	ldrb	r2, [r0, #3]
 800481e:	b510      	push	{r4, lr}
 8004820:	7803      	ldrb	r3, [r0, #0]
 8004822:	b30a      	cbz	r2, 8004868 <NVIC_Init+0x4c>
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <NVIC_Init+0x64>)
 8004826:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800482a:	68d1      	ldr	r1, [r2, #12]
 800482c:	7842      	ldrb	r2, [r0, #1]
 800482e:	43c9      	mvns	r1, r1
 8004830:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8004834:	f1c1 0404 	rsb	r4, r1, #4
 8004838:	fa02 f404 	lsl.w	r4, r2, r4
 800483c:	220f      	movs	r2, #15
 800483e:	40ca      	lsrs	r2, r1
 8004840:	7881      	ldrb	r1, [r0, #2]
 8004842:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8004846:	400a      	ands	r2, r1
 8004848:	4322      	orrs	r2, r4
 800484a:	0112      	lsls	r2, r2, #4
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004852:	7803      	ldrb	r3, [r0, #0]
 8004854:	2201      	movs	r2, #1
 8004856:	0959      	lsrs	r1, r3, #5
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	4a08      	ldr	r2, [pc, #32]	; (8004884 <NVIC_Init+0x68>)
 8004862:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004866:	bd10      	pop	{r4, pc}
 8004868:	095a      	lsrs	r2, r3, #5
 800486a:	2101      	movs	r1, #1
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <NVIC_Init+0x68>)
 8004876:	3220      	adds	r2, #32
 8004878:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800487c:	bd10      	pop	{r4, pc}
 800487e:	bf00      	nop
 8004880:	e000ed00 	.word	0xe000ed00
 8004884:	e000e100 	.word	0xe000e100

08004888 <NVIC_SetVectorTable>:
 8004888:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800488c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004890:	4b01      	ldr	r3, [pc, #4]	; (8004898 <NVIC_SetVectorTable+0x10>)
 8004892:	4308      	orrs	r0, r1
 8004894:	6098      	str	r0, [r3, #8]
 8004896:	4770      	bx	lr
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <NVIC_SystemLPConfig>:
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <NVIC_SystemLPConfig+0x14>)
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	b109      	cbz	r1, 80048a6 <NVIC_SystemLPConfig+0xa>
 80048a2:	4310      	orrs	r0, r2
 80048a4:	e001      	b.n	80048aa <NVIC_SystemLPConfig+0xe>
 80048a6:	ea22 0000 	bic.w	r0, r2, r0
 80048aa:	6118      	str	r0, [r3, #16]
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <SysTick_CLKSourceConfig>:
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <SysTick_CLKSourceConfig+0x14>)
 80048b6:	2804      	cmp	r0, #4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	bf0c      	ite	eq
 80048bc:	f042 0204 	orreq.w	r2, r2, #4
 80048c0:	f022 0204 	bicne.w	r2, r2, #4
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	4770      	bx	lr
 80048c8:	e000e010 	.word	0xe000e010

080048cc <servo_cb(std_msgs::UInt16 const&)>:
      GPIO_ResetBits(GPIOB, GPIO_Pin_5);
  else
      GPIO_SetBits(GPIOB, GPIO_Pin_5);
}

void servo_cb( const std_msgs::UInt16& cmd_msg){
 80048cc:	b510      	push	{r4, lr}
 80048ce:	4604      	mov	r4, r0
  servo_set(0, cmd_msg.data);
 80048d0:	7901      	ldrb	r1, [r0, #4]
 80048d2:	2000      	movs	r0, #0
 80048d4:	f7fc f89e 	bl	8000a14 <servo_set>
  servo_set(1, cmd_msg.data);
 80048d8:	7921      	ldrb	r1, [r4, #4]
 80048da:	2001      	movs	r0, #1
}
 80048dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      GPIO_SetBits(GPIOB, GPIO_Pin_5);
}

void servo_cb( const std_msgs::UInt16& cmd_msg){
  servo_set(0, cmd_msg.data);
  servo_set(1, cmd_msg.data);
 80048e0:	f7fc b898 	b.w	8000a14 <servo_set>

080048e4 <motor_cb(std_msgs::Int16 const&)>:
}

void motor_cb( const std_msgs::Int16& cmd_msg){
 80048e4:	b510      	push	{r4, lr}
 80048e6:	4604      	mov	r4, r0
  motor_set_speed(0, abs(cmd_msg.data), (cmd_msg.data > 0));
 80048e8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80048ec:	2000      	movs	r0, #0
 80048ee:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 80048f2:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 80048f6:	2a00      	cmp	r2, #0
 80048f8:	bfd4      	ite	le
 80048fa:	2200      	movle	r2, #0
 80048fc:	2201      	movgt	r2, #1
 80048fe:	b289      	uxth	r1, r1
 8004900:	f7fb fd46 	bl	8000390 <motor_set_speed>
  motor_set_speed(1, abs(cmd_msg.data), (cmd_msg.data > 0));
 8004904:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8004908:	2001      	movs	r0, #1
 800490a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800490e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8004912:	2a00      	cmp	r2, #0
 8004914:	bfd4      	ite	le
 8004916:	2200      	movle	r2, #0
 8004918:	2201      	movgt	r2, #1
 800491a:	b289      	uxth	r1, r1
 800491c:	f7fb fd38 	bl	8000390 <motor_set_speed>
  motor_set_speed(2, abs(cmd_msg.data), (cmd_msg.data > 0));
 8004920:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8004924:	2002      	movs	r0, #2
 8004926:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800492a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800492e:	2a00      	cmp	r2, #0
 8004930:	bfd4      	ite	le
 8004932:	2200      	movle	r2, #0
 8004934:	2201      	movgt	r2, #1
 8004936:	b289      	uxth	r1, r1
 8004938:	f7fb fd2a 	bl	8000390 <motor_set_speed>
  motor_set_speed(3, abs(cmd_msg.data), (cmd_msg.data > 0));
 800493c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8004940:	2003      	movs	r0, #3
 8004942:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8004946:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800494a:	2a00      	cmp	r2, #0
 800494c:	bfd4      	ite	le
 800494e:	2200      	movle	r2, #0
 8004950:	2201      	movgt	r2, #1
 8004952:	b289      	uxth	r1, r1
}
 8004954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void motor_cb( const std_msgs::Int16& cmd_msg){
  motor_set_speed(0, abs(cmd_msg.data), (cmd_msg.data > 0));
  motor_set_speed(1, abs(cmd_msg.data), (cmd_msg.data > 0));
  motor_set_speed(2, abs(cmd_msg.data), (cmd_msg.data > 0));
  motor_set_speed(3, abs(cmd_msg.data), (cmd_msg.data > 0));
 8004958:	f7fb bd1a 	b.w	8000390 <motor_set_speed>

0800495c <led_cb(std_msgs::Empty const&)>:


ros::NodeHandle nh;

void led_cb( const std_msgs::Empty& toggle_msg){
  uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 800495c:	2120      	movs	r1, #32
__IO uint8_t NumberOfByteToReceive = 0x00;


ros::NodeHandle nh;

void led_cb( const std_msgs::Empty& toggle_msg){
 800495e:	b508      	push	{r3, lr}
  uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 8004960:	4807      	ldr	r0, [pc, #28]	; (8004980 <led_cb(std_msgs::Empty const&)+0x24>)
 8004962:	f7fd ffe7 	bl	8002934 <GPIO_ReadOutputDataBit>
  if(led_bit == (uint8_t)Bit_SET)
 8004966:	2801      	cmp	r0, #1
      GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8004968:	f04f 0120 	mov.w	r1, #32
 800496c:	4804      	ldr	r0, [pc, #16]	; (8004980 <led_cb(std_msgs::Empty const&)+0x24>)

ros::NodeHandle nh;

void led_cb( const std_msgs::Empty& toggle_msg){
  uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
  if(led_bit == (uint8_t)Bit_SET)
 800496e:	d103      	bne.n	8004978 <led_cb(std_msgs::Empty const&)+0x1c>
      GPIO_ResetBits(GPIOB, GPIO_Pin_5);
  else
      GPIO_SetBits(GPIOB, GPIO_Pin_5);
}
 8004970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
ros::NodeHandle nh;

void led_cb( const std_msgs::Empty& toggle_msg){
  uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
  if(led_bit == (uint8_t)Bit_SET)
      GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8004974:	f7fd bfe9 	b.w	800294a <GPIO_ResetBits>
  else
      GPIO_SetBits(GPIOB, GPIO_Pin_5);
}
 8004978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void led_cb( const std_msgs::Empty& toggle_msg){
  uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
  if(led_bit == (uint8_t)Bit_SET)
      GPIO_ResetBits(GPIOB, GPIO_Pin_5);
  else
      GPIO_SetBits(GPIOB, GPIO_Pin_5);
 800497c:	f7fd bfe3 	b.w	8002946 <GPIO_SetBits>
 8004980:	40010c00 	.word	0x40010c00

08004984 <USART1_IRQHandler>:
};



extern "C"{
  void USART1_IRQHandler(void){
 8004984:	b538      	push	{r3, r4, r5, lr}

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET 
 8004986:	f240 5125 	movw	r1, #1317	; 0x525
 800498a:	480f      	ldr	r0, [pc, #60]	; (80049c8 <USART1_IRQHandler+0x44>)
 800498c:	f7fe ff5a 	bl	8003844 <USART_GetITStatus>
      && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){
 8004990:	b140      	cbz	r0, 80049a4 <USART1_IRQHandler+0x20>
 8004992:	4c0e      	ldr	r4, [pc, #56]	; (80049cc <USART1_IRQHandler+0x48>)
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	6862      	ldr	r2, [r4, #4]
 8004998:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d104      	bne.n	80049ae <USART1_IRQHandler+0x2a>
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear inerrupt flag by reading byte
    }
  }   
 80049a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

      USART_FIFO[USART_CNTIN] = USART_ReceiveData(USART1);
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear inerrupt flag by reading byte
 80049a8:	4807      	ldr	r0, [pc, #28]	; (80049c8 <USART1_IRQHandler+0x44>)
 80049aa:	f7fe bed2 	b.w	8003752 <USART_ReceiveData>
  void USART1_IRQHandler(void){

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET 
      && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){

      USART_FIFO[USART_CNTIN] = USART_ReceiveData(USART1);
 80049ae:	4806      	ldr	r0, [pc, #24]	; (80049c8 <USART1_IRQHandler+0x44>)
 80049b0:	6865      	ldr	r5, [r4, #4]
 80049b2:	f7fe fece 	bl	8003752 <USART_ReceiveData>
 80049b6:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80049ba:	8128      	strh	r0, [r5, #8]
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	3301      	adds	r3, #1
 80049c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c4:	6063      	str	r3, [r4, #4]
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	40013800 	.word	0x40013800
 80049cc:	200000b8 	.word	0x200000b8

080049d0 <assert_failed(unsigned char*, unsigned long)>:

    delay(100);
  }
}

void assert_failed(uint8_t* file, uint32_t line){
 80049d0:	b500      	push	{lr}
 80049d2:	b095      	sub	sp, #84	; 0x54
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  char str[80];

  sprintf(str, "Wrong parameters value: file %s on line %u\r\n", file, (unsigned int)line);
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4668      	mov	r0, sp
 80049da:	4907      	ldr	r1, [pc, #28]	; (80049f8 <assert_failed(unsigned char*, unsigned long)+0x28>)
 80049dc:	f002 fd0e 	bl	80073fc <siprintf>
      }
      void logwarn(const char *msg){
        log(rosserial_msgs::Log::WARN, msg);
      }
      void logerror(const char*msg){
        log(rosserial_msgs::Log::ERROR, msg);
 80049e0:	466a      	mov	r2, sp
 80049e2:	2103      	movs	r1, #3
 80049e4:	4805      	ldr	r0, [pc, #20]	; (80049fc <assert_failed(unsigned char*, unsigned long)+0x2c>)
 80049e6:	f002 f999 	bl	8006d1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::log(char, char const*)>
  nh.logerror(str);
  while (1){
    debug_toggle();
 80049ea:	f7fc f88b 	bl	8000b04 <debug_toggle>
    delay(100);
 80049ee:	2064      	movs	r0, #100	; 0x64
 80049f0:	f7fc f9c8 	bl	8000d84 <delay>
 80049f4:	e7f9      	b.n	80049ea <assert_failed(unsigned char*, unsigned long)+0x1a>
 80049f6:	bf00      	nop
 80049f8:	08008245 	.word	0x08008245
 80049fc:	200004c0 	.word	0x200004c0

08004a00 <ros::normalizeSecNSecSigned(long&, long&)>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	680b      	ldr	r3, [r1, #0]
 8004a04:	6802      	ldr	r2, [r0, #0]
 8004a06:	4c0c      	ldr	r4, [pc, #48]	; (8004a38 <ros::normalizeSecNSecSigned(long&, long&)+0x38>)
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	dd07      	ble.n	8004a1c <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
 8004a0c:	f103 4344 	add.w	r3, r3, #3288334336	; 0xc4000000
 8004a10:	f503 03ca 	add.w	r3, r3, #6619136	; 0x650000
 8004a14:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
 8004a18:	3201      	adds	r2, #1
 8004a1a:	e7f5      	b.n	8004a08 <ros::normalizeSecNSecSigned(long&, long&)+0x8>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	da07      	bge.n	8004a30 <ros::normalizeSecNSecSigned(long&, long&)+0x30>
 8004a20:	f103 536e 	add.w	r3, r3, #998244352	; 0x3b800000
 8004a24:	f503 13d6 	add.w	r3, r3, #1753088	; 0x1ac000
 8004a28:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8004a2c:	3a01      	subs	r2, #1
 8004a2e:	e7f5      	b.n	8004a1c <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
 8004a30:	6002      	str	r2, [r0, #0]
 8004a32:	600b      	str	r3, [r1, #0]
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	bf00      	nop
 8004a38:	3b9aca00 	.word	0x3b9aca00

08004a3c <ros::Duration::operator+=(ros::Duration const&)>:
 8004a3c:	6802      	ldr	r2, [r0, #0]
 8004a3e:	680b      	ldr	r3, [r1, #0]
 8004a40:	b510      	push	{r4, lr}
 8004a42:	4413      	add	r3, r2
 8004a44:	6003      	str	r3, [r0, #0]
 8004a46:	684b      	ldr	r3, [r1, #4]
 8004a48:	4601      	mov	r1, r0
 8004a4a:	6842      	ldr	r2, [r0, #4]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f841 3f04 	str.w	r3, [r1, #4]!
 8004a52:	f7ff ffd5 	bl	8004a00 <ros::normalizeSecNSecSigned(long&, long&)>
 8004a56:	bd10      	pop	{r4, pc}

08004a58 <ros::Duration::operator-=(ros::Duration const&)>:
 8004a58:	6803      	ldr	r3, [r0, #0]
 8004a5a:	680a      	ldr	r2, [r1, #0]
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	684a      	ldr	r2, [r1, #4]
 8004a62:	4601      	mov	r1, r0
 8004a64:	6003      	str	r3, [r0, #0]
 8004a66:	6843      	ldr	r3, [r0, #4]
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	f841 3f04 	str.w	r3, [r1, #4]!
 8004a6e:	f7ff ffc7 	bl	8004a00 <ros::normalizeSecNSecSigned(long&, long&)>
 8004a72:	bd10      	pop	{r4, pc}

08004a74 <ros::Duration::operator*=(double)>:
 8004a74:	b5d0      	push	{r4, r6, r7, lr}
 8004a76:	4616      	mov	r6, r2
 8004a78:	461f      	mov	r7, r3
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f000 f9a5 	bl	8004dcc <__aeabi_i2d>
 8004a82:	4632      	mov	r2, r6
 8004a84:	463b      	mov	r3, r7
 8004a86:	f000 fa07 	bl	8004e98 <__aeabi_dmul>
 8004a8a:	f000 fc17 	bl	80052bc <__aeabi_d2iz>
 8004a8e:	6020      	str	r0, [r4, #0]
 8004a90:	6860      	ldr	r0, [r4, #4]
 8004a92:	f000 f99b 	bl	8004dcc <__aeabi_i2d>
 8004a96:	4632      	mov	r2, r6
 8004a98:	463b      	mov	r3, r7
 8004a9a:	f000 f9fd 	bl	8004e98 <__aeabi_dmul>
 8004a9e:	f000 fc0d 	bl	80052bc <__aeabi_d2iz>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	f841 0f04 	str.w	r0, [r1, #4]!
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff ffa9 	bl	8004a00 <ros::normalizeSecNSecSigned(long&, long&)>
 8004aae:	4620      	mov	r0, r4
 8004ab0:	bdd0      	pop	{r4, r6, r7, pc}
 8004ab2:	bf00      	nop

08004ab4 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>:
 8004ab4:	b530      	push	{r4, r5, lr}
 8004ab6:	680d      	ldr	r5, [r1, #0]
 8004ab8:	4c04      	ldr	r4, [pc, #16]	; (8004acc <ros::normalizeSecNSec(unsigned long&, unsigned long&)+0x18>)
 8004aba:	6802      	ldr	r2, [r0, #0]
 8004abc:	fbb5 f3f4 	udiv	r3, r5, r4
 8004ac0:	441a      	add	r2, r3
 8004ac2:	fb04 5313 	mls	r3, r4, r3, r5
 8004ac6:	6002      	str	r2, [r0, #0]
 8004ac8:	600b      	str	r3, [r1, #0]
 8004aca:	bd30      	pop	{r4, r5, pc}
 8004acc:	3b9aca00 	.word	0x3b9aca00

08004ad0 <ros::Time::fromNSec(long)>:
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <ros::Time::fromNSec(long)+0x1c>)
 8004ad2:	b510      	push	{r4, lr}
 8004ad4:	fb91 f3f2 	sdiv	r3, r1, r2
 8004ad8:	6003      	str	r3, [r0, #0]
 8004ada:	fb02 1313 	mls	r3, r2, r3, r1
 8004ade:	4601      	mov	r1, r0
 8004ae0:	f841 3f04 	str.w	r3, [r1, #4]!
 8004ae4:	f7ff ffe6 	bl	8004ab4 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 8004ae8:	bd10      	pop	{r4, pc}
 8004aea:	bf00      	nop
 8004aec:	3b9aca00 	.word	0x3b9aca00

08004af0 <ros::Time::operator+=(ros::Duration const&)>:
 8004af0:	6802      	ldr	r2, [r0, #0]
 8004af2:	680b      	ldr	r3, [r1, #0]
 8004af4:	b510      	push	{r4, lr}
 8004af6:	4413      	add	r3, r2
 8004af8:	6003      	str	r3, [r0, #0]
 8004afa:	684b      	ldr	r3, [r1, #4]
 8004afc:	4601      	mov	r1, r0
 8004afe:	6842      	ldr	r2, [r0, #4]
 8004b00:	4413      	add	r3, r2
 8004b02:	f841 3f04 	str.w	r3, [r1, #4]!
 8004b06:	f7ff ffd5 	bl	8004ab4 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 8004b0a:	bd10      	pop	{r4, pc}

08004b0c <ros::Time::operator-=(ros::Duration const&)>:
 8004b0c:	6803      	ldr	r3, [r0, #0]
 8004b0e:	680a      	ldr	r2, [r1, #0]
 8004b10:	b510      	push	{r4, lr}
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	684a      	ldr	r2, [r1, #4]
 8004b16:	4601      	mov	r1, r0
 8004b18:	6003      	str	r3, [r0, #0]
 8004b1a:	6843      	ldr	r3, [r0, #4]
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	f841 3f04 	str.w	r3, [r1, #4]!
 8004b22:	f7ff ffc7 	bl	8004ab4 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 8004b26:	bd10      	pop	{r4, pc}

08004b28 <__aeabi_drsub>:
 8004b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004b2c:	e002      	b.n	8004b34 <__adddf3>
 8004b2e:	bf00      	nop

08004b30 <__aeabi_dsub>:
 8004b30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004b34 <__adddf3>:
 8004b34:	b530      	push	{r4, r5, lr}
 8004b36:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004b3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004b3e:	ea94 0f05 	teq	r4, r5
 8004b42:	bf08      	it	eq
 8004b44:	ea90 0f02 	teqeq	r0, r2
 8004b48:	bf1f      	itttt	ne
 8004b4a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004b4e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004b52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004b56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004b5a:	f000 80e2 	beq.w	8004d22 <__adddf3+0x1ee>
 8004b5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004b62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004b66:	bfb8      	it	lt
 8004b68:	426d      	neglt	r5, r5
 8004b6a:	dd0c      	ble.n	8004b86 <__adddf3+0x52>
 8004b6c:	442c      	add	r4, r5
 8004b6e:	ea80 0202 	eor.w	r2, r0, r2
 8004b72:	ea81 0303 	eor.w	r3, r1, r3
 8004b76:	ea82 0000 	eor.w	r0, r2, r0
 8004b7a:	ea83 0101 	eor.w	r1, r3, r1
 8004b7e:	ea80 0202 	eor.w	r2, r0, r2
 8004b82:	ea81 0303 	eor.w	r3, r1, r3
 8004b86:	2d36      	cmp	r5, #54	; 0x36
 8004b88:	bf88      	it	hi
 8004b8a:	bd30      	pophi	{r4, r5, pc}
 8004b8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004b90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004b94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004b98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004b9c:	d002      	beq.n	8004ba4 <__adddf3+0x70>
 8004b9e:	4240      	negs	r0, r0
 8004ba0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004ba4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004bac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004bb0:	d002      	beq.n	8004bb8 <__adddf3+0x84>
 8004bb2:	4252      	negs	r2, r2
 8004bb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004bb8:	ea94 0f05 	teq	r4, r5
 8004bbc:	f000 80a7 	beq.w	8004d0e <__adddf3+0x1da>
 8004bc0:	f1a4 0401 	sub.w	r4, r4, #1
 8004bc4:	f1d5 0e20 	rsbs	lr, r5, #32
 8004bc8:	db0d      	blt.n	8004be6 <__adddf3+0xb2>
 8004bca:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004bce:	fa22 f205 	lsr.w	r2, r2, r5
 8004bd2:	1880      	adds	r0, r0, r2
 8004bd4:	f141 0100 	adc.w	r1, r1, #0
 8004bd8:	fa03 f20e 	lsl.w	r2, r3, lr
 8004bdc:	1880      	adds	r0, r0, r2
 8004bde:	fa43 f305 	asr.w	r3, r3, r5
 8004be2:	4159      	adcs	r1, r3
 8004be4:	e00e      	b.n	8004c04 <__adddf3+0xd0>
 8004be6:	f1a5 0520 	sub.w	r5, r5, #32
 8004bea:	f10e 0e20 	add.w	lr, lr, #32
 8004bee:	2a01      	cmp	r2, #1
 8004bf0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004bf4:	bf28      	it	cs
 8004bf6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004bfa:	fa43 f305 	asr.w	r3, r3, r5
 8004bfe:	18c0      	adds	r0, r0, r3
 8004c00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004c08:	d507      	bpl.n	8004c1a <__adddf3+0xe6>
 8004c0a:	f04f 0e00 	mov.w	lr, #0
 8004c0e:	f1dc 0c00 	rsbs	ip, ip, #0
 8004c12:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004c16:	eb6e 0101 	sbc.w	r1, lr, r1
 8004c1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004c1e:	d31b      	bcc.n	8004c58 <__adddf3+0x124>
 8004c20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004c24:	d30c      	bcc.n	8004c40 <__adddf3+0x10c>
 8004c26:	0849      	lsrs	r1, r1, #1
 8004c28:	ea5f 0030 	movs.w	r0, r0, rrx
 8004c2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004c30:	f104 0401 	add.w	r4, r4, #1
 8004c34:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004c38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004c3c:	f080 809a 	bcs.w	8004d74 <__adddf3+0x240>
 8004c40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004c44:	bf08      	it	eq
 8004c46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004c4a:	f150 0000 	adcs.w	r0, r0, #0
 8004c4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004c52:	ea41 0105 	orr.w	r1, r1, r5
 8004c56:	bd30      	pop	{r4, r5, pc}
 8004c58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004c5c:	4140      	adcs	r0, r0
 8004c5e:	eb41 0101 	adc.w	r1, r1, r1
 8004c62:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004c66:	f1a4 0401 	sub.w	r4, r4, #1
 8004c6a:	d1e9      	bne.n	8004c40 <__adddf3+0x10c>
 8004c6c:	f091 0f00 	teq	r1, #0
 8004c70:	bf04      	itt	eq
 8004c72:	4601      	moveq	r1, r0
 8004c74:	2000      	moveq	r0, #0
 8004c76:	fab1 f381 	clz	r3, r1
 8004c7a:	bf08      	it	eq
 8004c7c:	3320      	addeq	r3, #32
 8004c7e:	f1a3 030b 	sub.w	r3, r3, #11
 8004c82:	f1b3 0220 	subs.w	r2, r3, #32
 8004c86:	da0c      	bge.n	8004ca2 <__adddf3+0x16e>
 8004c88:	320c      	adds	r2, #12
 8004c8a:	dd08      	ble.n	8004c9e <__adddf3+0x16a>
 8004c8c:	f102 0c14 	add.w	ip, r2, #20
 8004c90:	f1c2 020c 	rsb	r2, r2, #12
 8004c94:	fa01 f00c 	lsl.w	r0, r1, ip
 8004c98:	fa21 f102 	lsr.w	r1, r1, r2
 8004c9c:	e00c      	b.n	8004cb8 <__adddf3+0x184>
 8004c9e:	f102 0214 	add.w	r2, r2, #20
 8004ca2:	bfd8      	it	le
 8004ca4:	f1c2 0c20 	rsble	ip, r2, #32
 8004ca8:	fa01 f102 	lsl.w	r1, r1, r2
 8004cac:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004cb0:	bfdc      	itt	le
 8004cb2:	ea41 010c 	orrle.w	r1, r1, ip
 8004cb6:	4090      	lslle	r0, r2
 8004cb8:	1ae4      	subs	r4, r4, r3
 8004cba:	bfa2      	ittt	ge
 8004cbc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004cc0:	4329      	orrge	r1, r5
 8004cc2:	bd30      	popge	{r4, r5, pc}
 8004cc4:	ea6f 0404 	mvn.w	r4, r4
 8004cc8:	3c1f      	subs	r4, #31
 8004cca:	da1c      	bge.n	8004d06 <__adddf3+0x1d2>
 8004ccc:	340c      	adds	r4, #12
 8004cce:	dc0e      	bgt.n	8004cee <__adddf3+0x1ba>
 8004cd0:	f104 0414 	add.w	r4, r4, #20
 8004cd4:	f1c4 0220 	rsb	r2, r4, #32
 8004cd8:	fa20 f004 	lsr.w	r0, r0, r4
 8004cdc:	fa01 f302 	lsl.w	r3, r1, r2
 8004ce0:	ea40 0003 	orr.w	r0, r0, r3
 8004ce4:	fa21 f304 	lsr.w	r3, r1, r4
 8004ce8:	ea45 0103 	orr.w	r1, r5, r3
 8004cec:	bd30      	pop	{r4, r5, pc}
 8004cee:	f1c4 040c 	rsb	r4, r4, #12
 8004cf2:	f1c4 0220 	rsb	r2, r4, #32
 8004cf6:	fa20 f002 	lsr.w	r0, r0, r2
 8004cfa:	fa01 f304 	lsl.w	r3, r1, r4
 8004cfe:	ea40 0003 	orr.w	r0, r0, r3
 8004d02:	4629      	mov	r1, r5
 8004d04:	bd30      	pop	{r4, r5, pc}
 8004d06:	fa21 f004 	lsr.w	r0, r1, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	bd30      	pop	{r4, r5, pc}
 8004d0e:	f094 0f00 	teq	r4, #0
 8004d12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004d16:	bf06      	itte	eq
 8004d18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004d1c:	3401      	addeq	r4, #1
 8004d1e:	3d01      	subne	r5, #1
 8004d20:	e74e      	b.n	8004bc0 <__adddf3+0x8c>
 8004d22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004d26:	bf18      	it	ne
 8004d28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004d2c:	d029      	beq.n	8004d82 <__adddf3+0x24e>
 8004d2e:	ea94 0f05 	teq	r4, r5
 8004d32:	bf08      	it	eq
 8004d34:	ea90 0f02 	teqeq	r0, r2
 8004d38:	d005      	beq.n	8004d46 <__adddf3+0x212>
 8004d3a:	ea54 0c00 	orrs.w	ip, r4, r0
 8004d3e:	bf04      	itt	eq
 8004d40:	4619      	moveq	r1, r3
 8004d42:	4610      	moveq	r0, r2
 8004d44:	bd30      	pop	{r4, r5, pc}
 8004d46:	ea91 0f03 	teq	r1, r3
 8004d4a:	bf1e      	ittt	ne
 8004d4c:	2100      	movne	r1, #0
 8004d4e:	2000      	movne	r0, #0
 8004d50:	bd30      	popne	{r4, r5, pc}
 8004d52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004d56:	d105      	bne.n	8004d64 <__adddf3+0x230>
 8004d58:	0040      	lsls	r0, r0, #1
 8004d5a:	4149      	adcs	r1, r1
 8004d5c:	bf28      	it	cs
 8004d5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004d62:	bd30      	pop	{r4, r5, pc}
 8004d64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004d68:	bf3c      	itt	cc
 8004d6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004d6e:	bd30      	popcc	{r4, r5, pc}
 8004d70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004d74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004d78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d7c:	f04f 0000 	mov.w	r0, #0
 8004d80:	bd30      	pop	{r4, r5, pc}
 8004d82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004d86:	bf1a      	itte	ne
 8004d88:	4619      	movne	r1, r3
 8004d8a:	4610      	movne	r0, r2
 8004d8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004d90:	bf1c      	itt	ne
 8004d92:	460b      	movne	r3, r1
 8004d94:	4602      	movne	r2, r0
 8004d96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004d9a:	bf06      	itte	eq
 8004d9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004da0:	ea91 0f03 	teqeq	r1, r3
 8004da4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004da8:	bd30      	pop	{r4, r5, pc}
 8004daa:	bf00      	nop

08004dac <__aeabi_ui2d>:
 8004dac:	f090 0f00 	teq	r0, #0
 8004db0:	bf04      	itt	eq
 8004db2:	2100      	moveq	r1, #0
 8004db4:	4770      	bxeq	lr
 8004db6:	b530      	push	{r4, r5, lr}
 8004db8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004dbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004dc0:	f04f 0500 	mov.w	r5, #0
 8004dc4:	f04f 0100 	mov.w	r1, #0
 8004dc8:	e750      	b.n	8004c6c <__adddf3+0x138>
 8004dca:	bf00      	nop

08004dcc <__aeabi_i2d>:
 8004dcc:	f090 0f00 	teq	r0, #0
 8004dd0:	bf04      	itt	eq
 8004dd2:	2100      	moveq	r1, #0
 8004dd4:	4770      	bxeq	lr
 8004dd6:	b530      	push	{r4, r5, lr}
 8004dd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004ddc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004de0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004de4:	bf48      	it	mi
 8004de6:	4240      	negmi	r0, r0
 8004de8:	f04f 0100 	mov.w	r1, #0
 8004dec:	e73e      	b.n	8004c6c <__adddf3+0x138>
 8004dee:	bf00      	nop

08004df0 <__aeabi_f2d>:
 8004df0:	0042      	lsls	r2, r0, #1
 8004df2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004df6:	ea4f 0131 	mov.w	r1, r1, rrx
 8004dfa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004dfe:	bf1f      	itttt	ne
 8004e00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004e04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004e08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004e0c:	4770      	bxne	lr
 8004e0e:	f092 0f00 	teq	r2, #0
 8004e12:	bf14      	ite	ne
 8004e14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004e18:	4770      	bxeq	lr
 8004e1a:	b530      	push	{r4, r5, lr}
 8004e1c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004e20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004e24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004e28:	e720      	b.n	8004c6c <__adddf3+0x138>
 8004e2a:	bf00      	nop

08004e2c <__aeabi_ul2d>:
 8004e2c:	ea50 0201 	orrs.w	r2, r0, r1
 8004e30:	bf08      	it	eq
 8004e32:	4770      	bxeq	lr
 8004e34:	b530      	push	{r4, r5, lr}
 8004e36:	f04f 0500 	mov.w	r5, #0
 8004e3a:	e00a      	b.n	8004e52 <__aeabi_l2d+0x16>

08004e3c <__aeabi_l2d>:
 8004e3c:	ea50 0201 	orrs.w	r2, r0, r1
 8004e40:	bf08      	it	eq
 8004e42:	4770      	bxeq	lr
 8004e44:	b530      	push	{r4, r5, lr}
 8004e46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004e4a:	d502      	bpl.n	8004e52 <__aeabi_l2d+0x16>
 8004e4c:	4240      	negs	r0, r0
 8004e4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004e52:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004e56:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004e5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004e5e:	f43f aedc 	beq.w	8004c1a <__adddf3+0xe6>
 8004e62:	f04f 0203 	mov.w	r2, #3
 8004e66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004e6a:	bf18      	it	ne
 8004e6c:	3203      	addne	r2, #3
 8004e6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004e72:	bf18      	it	ne
 8004e74:	3203      	addne	r2, #3
 8004e76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004e7a:	f1c2 0320 	rsb	r3, r2, #32
 8004e7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8004e82:	fa20 f002 	lsr.w	r0, r0, r2
 8004e86:	fa01 fe03 	lsl.w	lr, r1, r3
 8004e8a:	ea40 000e 	orr.w	r0, r0, lr
 8004e8e:	fa21 f102 	lsr.w	r1, r1, r2
 8004e92:	4414      	add	r4, r2
 8004e94:	e6c1      	b.n	8004c1a <__adddf3+0xe6>
 8004e96:	bf00      	nop

08004e98 <__aeabi_dmul>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004e9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004ea2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004ea6:	bf1d      	ittte	ne
 8004ea8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004eac:	ea94 0f0c 	teqne	r4, ip
 8004eb0:	ea95 0f0c 	teqne	r5, ip
 8004eb4:	f000 f8de 	bleq	8005074 <__aeabi_dmul+0x1dc>
 8004eb8:	442c      	add	r4, r5
 8004eba:	ea81 0603 	eor.w	r6, r1, r3
 8004ebe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004ec2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004ec6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004eca:	bf18      	it	ne
 8004ecc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004ed0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004ed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ed8:	d038      	beq.n	8004f4c <__aeabi_dmul+0xb4>
 8004eda:	fba0 ce02 	umull	ip, lr, r0, r2
 8004ede:	f04f 0500 	mov.w	r5, #0
 8004ee2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004ee6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004eea:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004eee:	f04f 0600 	mov.w	r6, #0
 8004ef2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004ef6:	f09c 0f00 	teq	ip, #0
 8004efa:	bf18      	it	ne
 8004efc:	f04e 0e01 	orrne.w	lr, lr, #1
 8004f00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004f04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004f08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004f0c:	d204      	bcs.n	8004f18 <__aeabi_dmul+0x80>
 8004f0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004f12:	416d      	adcs	r5, r5
 8004f14:	eb46 0606 	adc.w	r6, r6, r6
 8004f18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004f1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004f20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004f24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004f28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004f2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004f30:	bf88      	it	hi
 8004f32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004f36:	d81e      	bhi.n	8004f76 <__aeabi_dmul+0xde>
 8004f38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004f3c:	bf08      	it	eq
 8004f3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004f42:	f150 0000 	adcs.w	r0, r0, #0
 8004f46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004f50:	ea46 0101 	orr.w	r1, r6, r1
 8004f54:	ea40 0002 	orr.w	r0, r0, r2
 8004f58:	ea81 0103 	eor.w	r1, r1, r3
 8004f5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004f60:	bfc2      	ittt	gt
 8004f62:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004f66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004f6a:	bd70      	popgt	{r4, r5, r6, pc}
 8004f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f70:	f04f 0e00 	mov.w	lr, #0
 8004f74:	3c01      	subs	r4, #1
 8004f76:	f300 80ab 	bgt.w	80050d0 <__aeabi_dmul+0x238>
 8004f7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004f7e:	bfde      	ittt	le
 8004f80:	2000      	movle	r0, #0
 8004f82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004f86:	bd70      	pople	{r4, r5, r6, pc}
 8004f88:	f1c4 0400 	rsb	r4, r4, #0
 8004f8c:	3c20      	subs	r4, #32
 8004f8e:	da35      	bge.n	8004ffc <__aeabi_dmul+0x164>
 8004f90:	340c      	adds	r4, #12
 8004f92:	dc1b      	bgt.n	8004fcc <__aeabi_dmul+0x134>
 8004f94:	f104 0414 	add.w	r4, r4, #20
 8004f98:	f1c4 0520 	rsb	r5, r4, #32
 8004f9c:	fa00 f305 	lsl.w	r3, r0, r5
 8004fa0:	fa20 f004 	lsr.w	r0, r0, r4
 8004fa4:	fa01 f205 	lsl.w	r2, r1, r5
 8004fa8:	ea40 0002 	orr.w	r0, r0, r2
 8004fac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004fb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004fb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004fb8:	fa21 f604 	lsr.w	r6, r1, r4
 8004fbc:	eb42 0106 	adc.w	r1, r2, r6
 8004fc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004fc4:	bf08      	it	eq
 8004fc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f1c4 040c 	rsb	r4, r4, #12
 8004fd0:	f1c4 0520 	rsb	r5, r4, #32
 8004fd4:	fa00 f304 	lsl.w	r3, r0, r4
 8004fd8:	fa20 f005 	lsr.w	r0, r0, r5
 8004fdc:	fa01 f204 	lsl.w	r2, r1, r4
 8004fe0:	ea40 0002 	orr.w	r0, r0, r2
 8004fe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004fe8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004fec:	f141 0100 	adc.w	r1, r1, #0
 8004ff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004ff4:	bf08      	it	eq
 8004ff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	f1c4 0520 	rsb	r5, r4, #32
 8005000:	fa00 f205 	lsl.w	r2, r0, r5
 8005004:	ea4e 0e02 	orr.w	lr, lr, r2
 8005008:	fa20 f304 	lsr.w	r3, r0, r4
 800500c:	fa01 f205 	lsl.w	r2, r1, r5
 8005010:	ea43 0302 	orr.w	r3, r3, r2
 8005014:	fa21 f004 	lsr.w	r0, r1, r4
 8005018:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800501c:	fa21 f204 	lsr.w	r2, r1, r4
 8005020:	ea20 0002 	bic.w	r0, r0, r2
 8005024:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800502c:	bf08      	it	eq
 800502e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	f094 0f00 	teq	r4, #0
 8005038:	d10f      	bne.n	800505a <__aeabi_dmul+0x1c2>
 800503a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800503e:	0040      	lsls	r0, r0, #1
 8005040:	eb41 0101 	adc.w	r1, r1, r1
 8005044:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005048:	bf08      	it	eq
 800504a:	3c01      	subeq	r4, #1
 800504c:	d0f7      	beq.n	800503e <__aeabi_dmul+0x1a6>
 800504e:	ea41 0106 	orr.w	r1, r1, r6
 8005052:	f095 0f00 	teq	r5, #0
 8005056:	bf18      	it	ne
 8005058:	4770      	bxne	lr
 800505a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800505e:	0052      	lsls	r2, r2, #1
 8005060:	eb43 0303 	adc.w	r3, r3, r3
 8005064:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005068:	bf08      	it	eq
 800506a:	3d01      	subeq	r5, #1
 800506c:	d0f7      	beq.n	800505e <__aeabi_dmul+0x1c6>
 800506e:	ea43 0306 	orr.w	r3, r3, r6
 8005072:	4770      	bx	lr
 8005074:	ea94 0f0c 	teq	r4, ip
 8005078:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800507c:	bf18      	it	ne
 800507e:	ea95 0f0c 	teqne	r5, ip
 8005082:	d00c      	beq.n	800509e <__aeabi_dmul+0x206>
 8005084:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005088:	bf18      	it	ne
 800508a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800508e:	d1d1      	bne.n	8005034 <__aeabi_dmul+0x19c>
 8005090:	ea81 0103 	eor.w	r1, r1, r3
 8005094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005098:	f04f 0000 	mov.w	r0, #0
 800509c:	bd70      	pop	{r4, r5, r6, pc}
 800509e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80050a2:	bf06      	itte	eq
 80050a4:	4610      	moveq	r0, r2
 80050a6:	4619      	moveq	r1, r3
 80050a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80050ac:	d019      	beq.n	80050e2 <__aeabi_dmul+0x24a>
 80050ae:	ea94 0f0c 	teq	r4, ip
 80050b2:	d102      	bne.n	80050ba <__aeabi_dmul+0x222>
 80050b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80050b8:	d113      	bne.n	80050e2 <__aeabi_dmul+0x24a>
 80050ba:	ea95 0f0c 	teq	r5, ip
 80050be:	d105      	bne.n	80050cc <__aeabi_dmul+0x234>
 80050c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80050c4:	bf1c      	itt	ne
 80050c6:	4610      	movne	r0, r2
 80050c8:	4619      	movne	r1, r3
 80050ca:	d10a      	bne.n	80050e2 <__aeabi_dmul+0x24a>
 80050cc:	ea81 0103 	eor.w	r1, r1, r3
 80050d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80050d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80050d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050dc:	f04f 0000 	mov.w	r0, #0
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
 80050e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80050e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80050ea:	bd70      	pop	{r4, r5, r6, pc}

080050ec <__aeabi_ddiv>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80050f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80050f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80050fa:	bf1d      	ittte	ne
 80050fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005100:	ea94 0f0c 	teqne	r4, ip
 8005104:	ea95 0f0c 	teqne	r5, ip
 8005108:	f000 f8a7 	bleq	800525a <__aeabi_ddiv+0x16e>
 800510c:	eba4 0405 	sub.w	r4, r4, r5
 8005110:	ea81 0e03 	eor.w	lr, r1, r3
 8005114:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005118:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800511c:	f000 8088 	beq.w	8005230 <__aeabi_ddiv+0x144>
 8005120:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005124:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005128:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800512c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005130:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005134:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005138:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800513c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005140:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005144:	429d      	cmp	r5, r3
 8005146:	bf08      	it	eq
 8005148:	4296      	cmpeq	r6, r2
 800514a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800514e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005152:	d202      	bcs.n	800515a <__aeabi_ddiv+0x6e>
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	ea4f 0232 	mov.w	r2, r2, rrx
 800515a:	1ab6      	subs	r6, r6, r2
 800515c:	eb65 0503 	sbc.w	r5, r5, r3
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	ea4f 0232 	mov.w	r2, r2, rrx
 8005166:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800516a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800516e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005172:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005176:	bf22      	ittt	cs
 8005178:	1ab6      	subcs	r6, r6, r2
 800517a:	4675      	movcs	r5, lr
 800517c:	ea40 000c 	orrcs.w	r0, r0, ip
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	ea4f 0232 	mov.w	r2, r2, rrx
 8005186:	ebb6 0e02 	subs.w	lr, r6, r2
 800518a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800518e:	bf22      	ittt	cs
 8005190:	1ab6      	subcs	r6, r6, r2
 8005192:	4675      	movcs	r5, lr
 8005194:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	ea4f 0232 	mov.w	r2, r2, rrx
 800519e:	ebb6 0e02 	subs.w	lr, r6, r2
 80051a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80051a6:	bf22      	ittt	cs
 80051a8:	1ab6      	subcs	r6, r6, r2
 80051aa:	4675      	movcs	r5, lr
 80051ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80051b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80051ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80051be:	bf22      	ittt	cs
 80051c0:	1ab6      	subcs	r6, r6, r2
 80051c2:	4675      	movcs	r5, lr
 80051c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80051c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80051cc:	d018      	beq.n	8005200 <__aeabi_ddiv+0x114>
 80051ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80051d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80051d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80051da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80051de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80051e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80051e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80051ea:	d1c0      	bne.n	800516e <__aeabi_ddiv+0x82>
 80051ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80051f0:	d10b      	bne.n	800520a <__aeabi_ddiv+0x11e>
 80051f2:	ea41 0100 	orr.w	r1, r1, r0
 80051f6:	f04f 0000 	mov.w	r0, #0
 80051fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80051fe:	e7b6      	b.n	800516e <__aeabi_ddiv+0x82>
 8005200:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005204:	bf04      	itt	eq
 8005206:	4301      	orreq	r1, r0
 8005208:	2000      	moveq	r0, #0
 800520a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800520e:	bf88      	it	hi
 8005210:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005214:	f63f aeaf 	bhi.w	8004f76 <__aeabi_dmul+0xde>
 8005218:	ebb5 0c03 	subs.w	ip, r5, r3
 800521c:	bf04      	itt	eq
 800521e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005222:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005226:	f150 0000 	adcs.w	r0, r0, #0
 800522a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005234:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005238:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800523c:	bfc2      	ittt	gt
 800523e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005246:	bd70      	popgt	{r4, r5, r6, pc}
 8005248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800524c:	f04f 0e00 	mov.w	lr, #0
 8005250:	3c01      	subs	r4, #1
 8005252:	e690      	b.n	8004f76 <__aeabi_dmul+0xde>
 8005254:	ea45 0e06 	orr.w	lr, r5, r6
 8005258:	e68d      	b.n	8004f76 <__aeabi_dmul+0xde>
 800525a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800525e:	ea94 0f0c 	teq	r4, ip
 8005262:	bf08      	it	eq
 8005264:	ea95 0f0c 	teqeq	r5, ip
 8005268:	f43f af3b 	beq.w	80050e2 <__aeabi_dmul+0x24a>
 800526c:	ea94 0f0c 	teq	r4, ip
 8005270:	d10a      	bne.n	8005288 <__aeabi_ddiv+0x19c>
 8005272:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005276:	f47f af34 	bne.w	80050e2 <__aeabi_dmul+0x24a>
 800527a:	ea95 0f0c 	teq	r5, ip
 800527e:	f47f af25 	bne.w	80050cc <__aeabi_dmul+0x234>
 8005282:	4610      	mov	r0, r2
 8005284:	4619      	mov	r1, r3
 8005286:	e72c      	b.n	80050e2 <__aeabi_dmul+0x24a>
 8005288:	ea95 0f0c 	teq	r5, ip
 800528c:	d106      	bne.n	800529c <__aeabi_ddiv+0x1b0>
 800528e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005292:	f43f aefd 	beq.w	8005090 <__aeabi_dmul+0x1f8>
 8005296:	4610      	mov	r0, r2
 8005298:	4619      	mov	r1, r3
 800529a:	e722      	b.n	80050e2 <__aeabi_dmul+0x24a>
 800529c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80052a0:	bf18      	it	ne
 80052a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80052a6:	f47f aec5 	bne.w	8005034 <__aeabi_dmul+0x19c>
 80052aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80052ae:	f47f af0d 	bne.w	80050cc <__aeabi_dmul+0x234>
 80052b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80052b6:	f47f aeeb 	bne.w	8005090 <__aeabi_dmul+0x1f8>
 80052ba:	e712      	b.n	80050e2 <__aeabi_dmul+0x24a>

080052bc <__aeabi_d2iz>:
 80052bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80052c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80052c4:	d215      	bcs.n	80052f2 <__aeabi_d2iz+0x36>
 80052c6:	d511      	bpl.n	80052ec <__aeabi_d2iz+0x30>
 80052c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80052cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80052d0:	d912      	bls.n	80052f8 <__aeabi_d2iz+0x3c>
 80052d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80052d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80052de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80052e2:	fa23 f002 	lsr.w	r0, r3, r2
 80052e6:	bf18      	it	ne
 80052e8:	4240      	negne	r0, r0
 80052ea:	4770      	bx	lr
 80052ec:	f04f 0000 	mov.w	r0, #0
 80052f0:	4770      	bx	lr
 80052f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80052f6:	d105      	bne.n	8005304 <__aeabi_d2iz+0x48>
 80052f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80052fc:	bf08      	it	eq
 80052fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005302:	4770      	bx	lr
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop

0800530c <selfrel_offset31>:
 800530c:	6803      	ldr	r3, [r0, #0]
 800530e:	005a      	lsls	r2, r3, #1
 8005310:	bf4c      	ite	mi
 8005312:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005316:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800531a:	4418      	add	r0, r3
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop

08005320 <search_EIT_table>:
 8005320:	b361      	cbz	r1, 800537c <search_EIT_table+0x5c>
 8005322:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005326:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800532a:	4690      	mov	r8, r2
 800532c:	4606      	mov	r6, r0
 800532e:	46d1      	mov	r9, sl
 8005330:	2700      	movs	r7, #0
 8005332:	eb07 0409 	add.w	r4, r7, r9
 8005336:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800533a:	1064      	asrs	r4, r4, #1
 800533c:	00e5      	lsls	r5, r4, #3
 800533e:	1971      	adds	r1, r6, r5
 8005340:	4608      	mov	r0, r1
 8005342:	f7ff ffe3 	bl	800530c <selfrel_offset31>
 8005346:	45a2      	cmp	sl, r4
 8005348:	4683      	mov	fp, r0
 800534a:	f105 0008 	add.w	r0, r5, #8
 800534e:	4430      	add	r0, r6
 8005350:	d009      	beq.n	8005366 <search_EIT_table+0x46>
 8005352:	f7ff ffdb 	bl	800530c <selfrel_offset31>
 8005356:	45c3      	cmp	fp, r8
 8005358:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800535c:	d805      	bhi.n	800536a <search_EIT_table+0x4a>
 800535e:	4540      	cmp	r0, r8
 8005360:	d209      	bcs.n	8005376 <search_EIT_table+0x56>
 8005362:	1c67      	adds	r7, r4, #1
 8005364:	e7e5      	b.n	8005332 <search_EIT_table+0x12>
 8005366:	45c3      	cmp	fp, r8
 8005368:	d905      	bls.n	8005376 <search_EIT_table+0x56>
 800536a:	42a7      	cmp	r7, r4
 800536c:	d002      	beq.n	8005374 <search_EIT_table+0x54>
 800536e:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8005372:	e7de      	b.n	8005332 <search_EIT_table+0x12>
 8005374:	2100      	movs	r1, #0
 8005376:	4608      	mov	r0, r1
 8005378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537c:	4608      	mov	r0, r1
 800537e:	4770      	bx	lr

08005380 <__gnu_unwind_get_pr_addr>:
 8005380:	2801      	cmp	r0, #1
 8005382:	d007      	beq.n	8005394 <__gnu_unwind_get_pr_addr+0x14>
 8005384:	2802      	cmp	r0, #2
 8005386:	d007      	beq.n	8005398 <__gnu_unwind_get_pr_addr+0x18>
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <__gnu_unwind_get_pr_addr+0x1c>)
 800538a:	2800      	cmp	r0, #0
 800538c:	bf0c      	ite	eq
 800538e:	4618      	moveq	r0, r3
 8005390:	2000      	movne	r0, #0
 8005392:	4770      	bx	lr
 8005394:	4802      	ldr	r0, [pc, #8]	; (80053a0 <__gnu_unwind_get_pr_addr+0x20>)
 8005396:	4770      	bx	lr
 8005398:	4802      	ldr	r0, [pc, #8]	; (80053a4 <__gnu_unwind_get_pr_addr+0x24>)
 800539a:	4770      	bx	lr
 800539c:	08005a95 	.word	0x08005a95
 80053a0:	08005a99 	.word	0x08005a99
 80053a4:	08005a9d 	.word	0x08005a9d

080053a8 <get_eit_entry>:
 80053a8:	b530      	push	{r4, r5, lr}
 80053aa:	4b25      	ldr	r3, [pc, #148]	; (8005440 <get_eit_entry+0x98>)
 80053ac:	b083      	sub	sp, #12
 80053ae:	4604      	mov	r4, r0
 80053b0:	1e8d      	subs	r5, r1, #2
 80053b2:	b37b      	cbz	r3, 8005414 <get_eit_entry+0x6c>
 80053b4:	a901      	add	r1, sp, #4
 80053b6:	4628      	mov	r0, r5
 80053b8:	f3af 8000 	nop.w
 80053bc:	b320      	cbz	r0, 8005408 <get_eit_entry+0x60>
 80053be:	9901      	ldr	r1, [sp, #4]
 80053c0:	462a      	mov	r2, r5
 80053c2:	f7ff ffad 	bl	8005320 <search_EIT_table>
 80053c6:	4601      	mov	r1, r0
 80053c8:	b1f0      	cbz	r0, 8005408 <get_eit_entry+0x60>
 80053ca:	f7ff ff9f 	bl	800530c <selfrel_offset31>
 80053ce:	684b      	ldr	r3, [r1, #4]
 80053d0:	64a0      	str	r0, [r4, #72]	; 0x48
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d012      	beq.n	80053fc <get_eit_entry+0x54>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f101 0004 	add.w	r0, r1, #4
 80053dc:	db21      	blt.n	8005422 <get_eit_entry+0x7a>
 80053de:	f7ff ff95 	bl	800530c <selfrel_offset31>
 80053e2:	2300      	movs	r3, #0
 80053e4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80053e6:	6523      	str	r3, [r4, #80]	; 0x50
 80053e8:	6803      	ldr	r3, [r0, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db1d      	blt.n	800542a <get_eit_entry+0x82>
 80053ee:	f7ff ff8d 	bl	800530c <selfrel_offset31>
 80053f2:	2300      	movs	r3, #0
 80053f4:	6120      	str	r0, [r4, #16]
 80053f6:	4618      	mov	r0, r3
 80053f8:	b003      	add	sp, #12
 80053fa:	bd30      	pop	{r4, r5, pc}
 80053fc:	2300      	movs	r3, #0
 80053fe:	6123      	str	r3, [r4, #16]
 8005400:	2305      	movs	r3, #5
 8005402:	4618      	mov	r0, r3
 8005404:	b003      	add	sp, #12
 8005406:	bd30      	pop	{r4, r5, pc}
 8005408:	2300      	movs	r3, #0
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	2309      	movs	r3, #9
 800540e:	4618      	mov	r0, r3
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	490b      	ldr	r1, [pc, #44]	; (8005444 <get_eit_entry+0x9c>)
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <get_eit_entry+0xa0>)
 8005418:	4608      	mov	r0, r1
 800541a:	1a59      	subs	r1, r3, r1
 800541c:	10c9      	asrs	r1, r1, #3
 800541e:	9101      	str	r1, [sp, #4]
 8005420:	e7ce      	b.n	80053c0 <get_eit_entry+0x18>
 8005422:	2301      	movs	r3, #1
 8005424:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005426:	6523      	str	r3, [r4, #80]	; 0x50
 8005428:	e7de      	b.n	80053e8 <get_eit_entry+0x40>
 800542a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800542e:	f7ff ffa7 	bl	8005380 <__gnu_unwind_get_pr_addr>
 8005432:	2800      	cmp	r0, #0
 8005434:	6120      	str	r0, [r4, #16]
 8005436:	bf14      	ite	ne
 8005438:	2300      	movne	r3, #0
 800543a:	2309      	moveq	r3, #9
 800543c:	e7db      	b.n	80053f6 <get_eit_entry+0x4e>
 800543e:	bf00      	nop
 8005440:	00000000 	.word	0x00000000
 8005444:	080083e8 	.word	0x080083e8
 8005448:	08008510 	.word	0x08008510

0800544c <restore_non_core_regs>:
 800544c:	6803      	ldr	r3, [r0, #0]
 800544e:	b510      	push	{r4, lr}
 8005450:	07da      	lsls	r2, r3, #31
 8005452:	4604      	mov	r4, r0
 8005454:	d406      	bmi.n	8005464 <restore_non_core_regs+0x18>
 8005456:	079b      	lsls	r3, r3, #30
 8005458:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800545c:	d509      	bpl.n	8005472 <restore_non_core_regs+0x26>
 800545e:	f000 fc5b 	bl	8005d18 <__gnu_Unwind_Restore_VFP_D>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0759      	lsls	r1, r3, #29
 8005466:	d509      	bpl.n	800547c <restore_non_core_regs+0x30>
 8005468:	071a      	lsls	r2, r3, #28
 800546a:	d50e      	bpl.n	800548a <restore_non_core_regs+0x3e>
 800546c:	06db      	lsls	r3, r3, #27
 800546e:	d513      	bpl.n	8005498 <restore_non_core_regs+0x4c>
 8005470:	bd10      	pop	{r4, pc}
 8005472:	f000 fc49 	bl	8005d08 <__gnu_Unwind_Restore_VFP>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	0759      	lsls	r1, r3, #29
 800547a:	d4f5      	bmi.n	8005468 <restore_non_core_regs+0x1c>
 800547c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005480:	f000 fc52 	bl	8005d28 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	071a      	lsls	r2, r3, #28
 8005488:	d4f0      	bmi.n	800546c <restore_non_core_regs+0x20>
 800548a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800548e:	f000 fc53 	bl	8005d38 <__gnu_Unwind_Restore_WMMXD>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	06db      	lsls	r3, r3, #27
 8005496:	d4eb      	bmi.n	8005470 <restore_non_core_regs+0x24>
 8005498:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800549c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054a0:	f000 bc8e 	b.w	8005dc0 <__gnu_Unwind_Restore_WMMXC>

080054a4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80054a4:	6803      	ldr	r3, [r0, #0]
 80054a6:	b10b      	cbz	r3, 80054ac <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 80054a8:	4418      	add	r0, r3
 80054aa:	4770      	bx	lr
 80054ac:	4618      	mov	r0, r3
 80054ae:	4770      	bx	lr

080054b0 <__gnu_unwind_24bit.isra.1>:
 80054b0:	2009      	movs	r0, #9
 80054b2:	4770      	bx	lr

080054b4 <_Unwind_DebugHook>:
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop

080054b8 <unwind_phase2>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4604      	mov	r4, r0
 80054bc:	460d      	mov	r5, r1
 80054be:	e008      	b.n	80054d2 <unwind_phase2+0x1a>
 80054c0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	6162      	str	r2, [r4, #20]
 80054c6:	4621      	mov	r1, r4
 80054c8:	462a      	mov	r2, r5
 80054ca:	2001      	movs	r0, #1
 80054cc:	4798      	blx	r3
 80054ce:	2808      	cmp	r0, #8
 80054d0:	d108      	bne.n	80054e4 <unwind_phase2+0x2c>
 80054d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7ff ff67 	bl	80053a8 <get_eit_entry>
 80054da:	4606      	mov	r6, r0
 80054dc:	2800      	cmp	r0, #0
 80054de:	d0ef      	beq.n	80054c0 <unwind_phase2+0x8>
 80054e0:	f001 fda6 	bl	8007030 <abort>
 80054e4:	2807      	cmp	r0, #7
 80054e6:	d1fb      	bne.n	80054e0 <unwind_phase2+0x28>
 80054e8:	4630      	mov	r0, r6
 80054ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80054ec:	f7ff ffe2 	bl	80054b4 <_Unwind_DebugHook>
 80054f0:	1d28      	adds	r0, r5, #4
 80054f2:	f000 fbfd 	bl	8005cf0 <__restore_core_regs>
 80054f6:	bf00      	nop

080054f8 <unwind_phase2_forced>:
 80054f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	4606      	mov	r6, r0
 80054fe:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8005502:	ad03      	add	r5, sp, #12
 8005504:	1d0c      	adds	r4, r1, #4
 8005506:	4617      	mov	r7, r2
 8005508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800550a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800550c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800550e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005514:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005518:	ac02      	add	r4, sp, #8
 800551a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800551e:	f8d6 9018 	ldr.w	r9, [r6, #24]
 8005522:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005526:	2300      	movs	r3, #0
 8005528:	4630      	mov	r0, r6
 800552a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	f7ff ff3b 	bl	80053a8 <get_eit_entry>
 8005532:	4605      	mov	r5, r0
 8005534:	2f00      	cmp	r7, #0
 8005536:	bf14      	ite	ne
 8005538:	270a      	movne	r7, #10
 800553a:	2709      	moveq	r7, #9
 800553c:	b17d      	cbz	r5, 800555e <unwind_phase2_forced+0x66>
 800553e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005540:	f047 0110 	orr.w	r1, r7, #16
 8005544:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005548:	4632      	mov	r2, r6
 800554a:	6463      	str	r3, [r4, #68]	; 0x44
 800554c:	2001      	movs	r0, #1
 800554e:	4633      	mov	r3, r6
 8005550:	47c0      	blx	r8
 8005552:	bb78      	cbnz	r0, 80055b4 <unwind_phase2_forced+0xbc>
 8005554:	4628      	mov	r0, r5
 8005556:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005560:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005564:	6173      	str	r3, [r6, #20]
 8005566:	4621      	mov	r1, r4
 8005568:	a87a      	add	r0, sp, #488	; 0x1e8
 800556a:	f001 fdb3 	bl	80070d4 <memcpy>
 800556e:	6933      	ldr	r3, [r6, #16]
 8005570:	aa7a      	add	r2, sp, #488	; 0x1e8
 8005572:	4631      	mov	r1, r6
 8005574:	4638      	mov	r0, r7
 8005576:	4798      	blx	r3
 8005578:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800557a:	4682      	mov	sl, r0
 800557c:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005580:	4639      	mov	r1, r7
 8005582:	6463      	str	r3, [r4, #68]	; 0x44
 8005584:	4632      	mov	r2, r6
 8005586:	4633      	mov	r3, r6
 8005588:	2001      	movs	r0, #1
 800558a:	47c0      	blx	r8
 800558c:	b990      	cbnz	r0, 80055b4 <unwind_phase2_forced+0xbc>
 800558e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005592:	a97a      	add	r1, sp, #488	; 0x1e8
 8005594:	4620      	mov	r0, r4
 8005596:	f001 fd9d 	bl	80070d4 <memcpy>
 800559a:	f1ba 0f08 	cmp.w	sl, #8
 800559e:	d106      	bne.n	80055ae <unwind_phase2_forced+0xb6>
 80055a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80055a2:	4630      	mov	r0, r6
 80055a4:	f7ff ff00 	bl	80053a8 <get_eit_entry>
 80055a8:	2709      	movs	r7, #9
 80055aa:	4605      	mov	r5, r0
 80055ac:	e7c6      	b.n	800553c <unwind_phase2_forced+0x44>
 80055ae:	f1ba 0f07 	cmp.w	sl, #7
 80055b2:	d004      	beq.n	80055be <unwind_phase2_forced+0xc6>
 80055b4:	2009      	movs	r0, #9
 80055b6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80055ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055be:	4628      	mov	r0, r5
 80055c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80055c2:	f7ff ff77 	bl	80054b4 <_Unwind_DebugHook>
 80055c6:	a803      	add	r0, sp, #12
 80055c8:	f000 fb92 	bl	8005cf0 <__restore_core_regs>

080055cc <_Unwind_GetCFA>:
 80055cc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80055ce:	4770      	bx	lr

080055d0 <__gnu_Unwind_RaiseException>:
 80055d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80055d4:	b0f9      	sub	sp, #484	; 0x1e4
 80055d6:	640b      	str	r3, [r1, #64]	; 0x40
 80055d8:	1d0e      	adds	r6, r1, #4
 80055da:	ad01      	add	r5, sp, #4
 80055dc:	460f      	mov	r7, r1
 80055de:	4604      	mov	r4, r0
 80055e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80055f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80055f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80055f8:	9600      	str	r6, [sp, #0]
 80055fa:	e006      	b.n	800560a <__gnu_Unwind_RaiseException+0x3a>
 80055fc:	6923      	ldr	r3, [r4, #16]
 80055fe:	466a      	mov	r2, sp
 8005600:	4621      	mov	r1, r4
 8005602:	4798      	blx	r3
 8005604:	2808      	cmp	r0, #8
 8005606:	4605      	mov	r5, r0
 8005608:	d108      	bne.n	800561c <__gnu_Unwind_RaiseException+0x4c>
 800560a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800560c:	4620      	mov	r0, r4
 800560e:	f7ff fecb 	bl	80053a8 <get_eit_entry>
 8005612:	2800      	cmp	r0, #0
 8005614:	d0f2      	beq.n	80055fc <__gnu_Unwind_RaiseException+0x2c>
 8005616:	2009      	movs	r0, #9
 8005618:	b079      	add	sp, #484	; 0x1e4
 800561a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800561c:	4668      	mov	r0, sp
 800561e:	f7ff ff15 	bl	800544c <restore_non_core_regs>
 8005622:	2d06      	cmp	r5, #6
 8005624:	d1f7      	bne.n	8005616 <__gnu_Unwind_RaiseException+0x46>
 8005626:	4639      	mov	r1, r7
 8005628:	4620      	mov	r0, r4
 800562a:	f7ff ff45 	bl	80054b8 <unwind_phase2>
 800562e:	bf00      	nop

08005630 <__gnu_Unwind_ForcedUnwind>:
 8005630:	b430      	push	{r4, r5}
 8005632:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8005634:	60c1      	str	r1, [r0, #12]
 8005636:	6182      	str	r2, [r0, #24]
 8005638:	4619      	mov	r1, r3
 800563a:	641d      	str	r5, [r3, #64]	; 0x40
 800563c:	2200      	movs	r2, #0
 800563e:	bc30      	pop	{r4, r5}
 8005640:	e75a      	b.n	80054f8 <unwind_phase2_forced>
 8005642:	bf00      	nop

08005644 <__gnu_Unwind_Resume>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	6943      	ldr	r3, [r0, #20]
 8005648:	68c6      	ldr	r6, [r0, #12]
 800564a:	640b      	str	r3, [r1, #64]	; 0x40
 800564c:	b126      	cbz	r6, 8005658 <__gnu_Unwind_Resume+0x14>
 800564e:	2201      	movs	r2, #1
 8005650:	f7ff ff52 	bl	80054f8 <unwind_phase2_forced>
 8005654:	f001 fcec 	bl	8007030 <abort>
 8005658:	6903      	ldr	r3, [r0, #16]
 800565a:	460a      	mov	r2, r1
 800565c:	4604      	mov	r4, r0
 800565e:	460d      	mov	r5, r1
 8005660:	4601      	mov	r1, r0
 8005662:	2002      	movs	r0, #2
 8005664:	4798      	blx	r3
 8005666:	2807      	cmp	r0, #7
 8005668:	d007      	beq.n	800567a <__gnu_Unwind_Resume+0x36>
 800566a:	2808      	cmp	r0, #8
 800566c:	d103      	bne.n	8005676 <__gnu_Unwind_Resume+0x32>
 800566e:	4629      	mov	r1, r5
 8005670:	4620      	mov	r0, r4
 8005672:	f7ff ff21 	bl	80054b8 <unwind_phase2>
 8005676:	f001 fcdb 	bl	8007030 <abort>
 800567a:	4630      	mov	r0, r6
 800567c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800567e:	f7ff ff19 	bl	80054b4 <_Unwind_DebugHook>
 8005682:	1d28      	adds	r0, r5, #4
 8005684:	f000 fb34 	bl	8005cf0 <__restore_core_regs>

08005688 <__gnu_Unwind_Resume_or_Rethrow>:
 8005688:	68c2      	ldr	r2, [r0, #12]
 800568a:	b12a      	cbz	r2, 8005698 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 800568c:	b410      	push	{r4}
 800568e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8005690:	2200      	movs	r2, #0
 8005692:	640c      	str	r4, [r1, #64]	; 0x40
 8005694:	bc10      	pop	{r4}
 8005696:	e72f      	b.n	80054f8 <unwind_phase2_forced>
 8005698:	e79a      	b.n	80055d0 <__gnu_Unwind_RaiseException>
 800569a:	bf00      	nop

0800569c <_Unwind_Complete>:
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop

080056a0 <_Unwind_DeleteException>:
 80056a0:	6883      	ldr	r3, [r0, #8]
 80056a2:	b113      	cbz	r3, 80056aa <_Unwind_DeleteException+0xa>
 80056a4:	4601      	mov	r1, r0
 80056a6:	2001      	movs	r0, #1
 80056a8:	4718      	bx	r3
 80056aa:	4770      	bx	lr

080056ac <_Unwind_VRS_Get>:
 80056ac:	b500      	push	{lr}
 80056ae:	2904      	cmp	r1, #4
 80056b0:	d807      	bhi.n	80056c2 <_Unwind_VRS_Get+0x16>
 80056b2:	e8df f001 	tbb	[pc, r1]
 80056b6:	0903      	.short	0x0903
 80056b8:	0906      	.short	0x0906
 80056ba:	09          	.byte	0x09
 80056bb:	00          	.byte	0x00
 80056bc:	b90b      	cbnz	r3, 80056c2 <_Unwind_VRS_Get+0x16>
 80056be:	2a0f      	cmp	r2, #15
 80056c0:	d905      	bls.n	80056ce <_Unwind_VRS_Get+0x22>
 80056c2:	2002      	movs	r0, #2
 80056c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80056c8:	2001      	movs	r0, #1
 80056ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80056ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80056d2:	6852      	ldr	r2, [r2, #4]
 80056d4:	4618      	mov	r0, r3
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	f85d fb04 	ldr.w	pc, [sp], #4
 80056de:	bf00      	nop

080056e0 <_Unwind_GetGR>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	2300      	movs	r3, #0
 80056e6:	ac03      	add	r4, sp, #12
 80056e8:	460a      	mov	r2, r1
 80056ea:	9400      	str	r4, [sp, #0]
 80056ec:	4619      	mov	r1, r3
 80056ee:	f7ff ffdd 	bl	80056ac <_Unwind_VRS_Get>
 80056f2:	9803      	ldr	r0, [sp, #12]
 80056f4:	b004      	add	sp, #16
 80056f6:	bd10      	pop	{r4, pc}

080056f8 <_Unwind_VRS_Set>:
 80056f8:	b500      	push	{lr}
 80056fa:	2904      	cmp	r1, #4
 80056fc:	d807      	bhi.n	800570e <_Unwind_VRS_Set+0x16>
 80056fe:	e8df f001 	tbb	[pc, r1]
 8005702:	0903      	.short	0x0903
 8005704:	0906      	.short	0x0906
 8005706:	09          	.byte	0x09
 8005707:	00          	.byte	0x00
 8005708:	b90b      	cbnz	r3, 800570e <_Unwind_VRS_Set+0x16>
 800570a:	2a0f      	cmp	r2, #15
 800570c:	d905      	bls.n	800571a <_Unwind_VRS_Set+0x22>
 800570e:	2002      	movs	r0, #2
 8005710:	f85d fb04 	ldr.w	pc, [sp], #4
 8005714:	2001      	movs	r0, #1
 8005716:	f85d fb04 	ldr.w	pc, [sp], #4
 800571a:	9901      	ldr	r1, [sp, #4]
 800571c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005720:	6809      	ldr	r1, [r1, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	6051      	str	r1, [r2, #4]
 8005726:	f85d fb04 	ldr.w	pc, [sp], #4
 800572a:	bf00      	nop

0800572c <_Unwind_SetGR>:
 800572c:	b510      	push	{r4, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	ac04      	add	r4, sp, #16
 8005732:	f844 2d04 	str.w	r2, [r4, #-4]!
 8005736:	2300      	movs	r3, #0
 8005738:	460a      	mov	r2, r1
 800573a:	9400      	str	r4, [sp, #0]
 800573c:	4619      	mov	r1, r3
 800573e:	f7ff ffdb 	bl	80056f8 <_Unwind_VRS_Set>
 8005742:	b004      	add	sp, #16
 8005744:	bd10      	pop	{r4, pc}
 8005746:	bf00      	nop

08005748 <__gnu_Unwind_Backtrace>:
 8005748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800574c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005750:	6413      	str	r3, [r2, #64]	; 0x40
 8005752:	1d15      	adds	r5, r2, #4
 8005754:	ac17      	add	r4, sp, #92	; 0x5c
 8005756:	4607      	mov	r7, r0
 8005758:	460e      	mov	r6, r1
 800575a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800575c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800575e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005766:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800576a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800576e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005772:	9516      	str	r5, [sp, #88]	; 0x58
 8005774:	e011      	b.n	800579a <__gnu_Unwind_Backtrace+0x52>
 8005776:	a816      	add	r0, sp, #88	; 0x58
 8005778:	466a      	mov	r2, sp
 800577a:	f7ff ffd7 	bl	800572c <_Unwind_SetGR>
 800577e:	4631      	mov	r1, r6
 8005780:	a816      	add	r0, sp, #88	; 0x58
 8005782:	47b8      	blx	r7
 8005784:	b980      	cbnz	r0, 80057a8 <__gnu_Unwind_Backtrace+0x60>
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	aa16      	add	r2, sp, #88	; 0x58
 800578a:	4669      	mov	r1, sp
 800578c:	2008      	movs	r0, #8
 800578e:	4798      	blx	r3
 8005790:	2805      	cmp	r0, #5
 8005792:	4604      	mov	r4, r0
 8005794:	d009      	beq.n	80057aa <__gnu_Unwind_Backtrace+0x62>
 8005796:	2809      	cmp	r0, #9
 8005798:	d006      	beq.n	80057a8 <__gnu_Unwind_Backtrace+0x60>
 800579a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800579c:	4668      	mov	r0, sp
 800579e:	f7ff fe03 	bl	80053a8 <get_eit_entry>
 80057a2:	210c      	movs	r1, #12
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d0e6      	beq.n	8005776 <__gnu_Unwind_Backtrace+0x2e>
 80057a8:	2409      	movs	r4, #9
 80057aa:	a816      	add	r0, sp, #88	; 0x58
 80057ac:	f7ff fe4e 	bl	800544c <restore_non_core_regs>
 80057b0:	4620      	mov	r0, r4
 80057b2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057b8 <__gnu_unwind_pr_common>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80057be:	4691      	mov	r9, r2
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	b08b      	sub	sp, #44	; 0x2c
 80057c4:	3404      	adds	r4, #4
 80057c6:	460d      	mov	r5, r1
 80057c8:	9207      	str	r2, [sp, #28]
 80057ca:	9408      	str	r4, [sp, #32]
 80057cc:	f000 0b03 	and.w	fp, r0, #3
 80057d0:	461e      	mov	r6, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d164      	bne.n	80058a0 <__gnu_unwind_pr_common+0xe8>
 80057d6:	0212      	lsls	r2, r2, #8
 80057d8:	2303      	movs	r3, #3
 80057da:	9207      	str	r2, [sp, #28]
 80057dc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80057e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80057e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80057e6:	f1bb 0f02 	cmp.w	fp, #2
 80057ea:	bf08      	it	eq
 80057ec:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80057ee:	f013 0301 	ands.w	r3, r3, #1
 80057f2:	d143      	bne.n	800587c <__gnu_unwind_pr_common+0xc4>
 80057f4:	f000 0008 	and.w	r0, r0, #8
 80057f8:	b2c2      	uxtb	r2, r0
 80057fa:	9203      	str	r2, [sp, #12]
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	6827      	ldr	r7, [r4, #0]
 8005800:	2f00      	cmp	r7, #0
 8005802:	d03d      	beq.n	8005880 <__gnu_unwind_pr_common+0xc8>
 8005804:	2e02      	cmp	r6, #2
 8005806:	d047      	beq.n	8005898 <__gnu_unwind_pr_common+0xe0>
 8005808:	8827      	ldrh	r7, [r4, #0]
 800580a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 800580e:	3404      	adds	r4, #4
 8005810:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8005812:	f028 0a01 	bic.w	sl, r8, #1
 8005816:	210f      	movs	r1, #15
 8005818:	4648      	mov	r0, r9
 800581a:	449a      	add	sl, r3
 800581c:	f7ff ff60 	bl	80056e0 <_Unwind_GetGR>
 8005820:	4582      	cmp	sl, r0
 8005822:	d837      	bhi.n	8005894 <__gnu_unwind_pr_common+0xdc>
 8005824:	f027 0301 	bic.w	r3, r7, #1
 8005828:	449a      	add	sl, r3
 800582a:	4550      	cmp	r0, sl
 800582c:	bf2c      	ite	cs
 800582e:	2000      	movcs	r0, #0
 8005830:	2001      	movcc	r0, #1
 8005832:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8005836:	f008 0802 	and.w	r8, r8, #2
 800583a:	f007 0701 	and.w	r7, r7, #1
 800583e:	ea48 0807 	orr.w	r8, r8, r7
 8005842:	f1b8 0f01 	cmp.w	r8, #1
 8005846:	d041      	beq.n	80058cc <__gnu_unwind_pr_common+0x114>
 8005848:	d338      	bcc.n	80058bc <__gnu_unwind_pr_common+0x104>
 800584a:	f1b8 0f02 	cmp.w	r8, #2
 800584e:	d11d      	bne.n	800588c <__gnu_unwind_pr_common+0xd4>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005856:	9202      	str	r2, [sp, #8]
 8005858:	f1bb 0f00 	cmp.w	fp, #0
 800585c:	d179      	bne.n	8005952 <__gnu_unwind_pr_common+0x19a>
 800585e:	b130      	cbz	r0, 800586e <__gnu_unwind_pr_common+0xb6>
 8005860:	9903      	ldr	r1, [sp, #12]
 8005862:	2900      	cmp	r1, #0
 8005864:	f000 8081 	beq.w	800596a <__gnu_unwind_pr_common+0x1b2>
 8005868:	2a00      	cmp	r2, #0
 800586a:	f000 80a8 	beq.w	80059be <__gnu_unwind_pr_common+0x206>
 800586e:	2b00      	cmp	r3, #0
 8005870:	db79      	blt.n	8005966 <__gnu_unwind_pr_common+0x1ae>
 8005872:	9b02      	ldr	r3, [sp, #8]
 8005874:	3301      	adds	r3, #1
 8005876:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800587a:	e7c0      	b.n	80057fe <__gnu_unwind_pr_common+0x46>
 800587c:	2300      	movs	r3, #0
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	2e02      	cmp	r6, #2
 8005882:	dd40      	ble.n	8005906 <__gnu_unwind_pr_common+0x14e>
 8005884:	f7ff fe14 	bl	80054b0 <__gnu_unwind_24bit.isra.1>
 8005888:	2800      	cmp	r0, #0
 800588a:	d042      	beq.n	8005912 <__gnu_unwind_pr_common+0x15a>
 800588c:	2009      	movs	r0, #9
 800588e:	b00b      	add	sp, #44	; 0x2c
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005894:	2000      	movs	r0, #0
 8005896:	e7cc      	b.n	8005832 <__gnu_unwind_pr_common+0x7a>
 8005898:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800589c:	3408      	adds	r4, #8
 800589e:	e7b7      	b.n	8005810 <__gnu_unwind_pr_common+0x58>
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	dc9f      	bgt.n	80057e4 <__gnu_unwind_pr_common+0x2c>
 80058a4:	0c13      	lsrs	r3, r2, #16
 80058a6:	b2d9      	uxtb	r1, r3
 80058a8:	0412      	lsls	r2, r2, #16
 80058aa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80058ae:	2302      	movs	r3, #2
 80058b0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80058b4:	9207      	str	r2, [sp, #28]
 80058b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80058ba:	e793      	b.n	80057e4 <__gnu_unwind_pr_common+0x2c>
 80058bc:	f1bb 0f00 	cmp.w	fp, #0
 80058c0:	d002      	beq.n	80058c8 <__gnu_unwind_pr_common+0x110>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f040 80b0 	bne.w	8005a28 <__gnu_unwind_pr_common+0x270>
 80058c8:	3404      	adds	r4, #4
 80058ca:	e798      	b.n	80057fe <__gnu_unwind_pr_common+0x46>
 80058cc:	f1bb 0f00 	cmp.w	fp, #0
 80058d0:	d126      	bne.n	8005920 <__gnu_unwind_pr_common+0x168>
 80058d2:	b1b0      	cbz	r0, 8005902 <__gnu_unwind_pr_common+0x14a>
 80058d4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80058d8:	1c99      	adds	r1, r3, #2
 80058da:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80058de:	d0d5      	beq.n	800588c <__gnu_unwind_pr_common+0xd4>
 80058e0:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80058e4:	3301      	adds	r3, #1
 80058e6:	9106      	str	r1, [sp, #24]
 80058e8:	f000 8094 	beq.w	8005a14 <__gnu_unwind_pr_common+0x25c>
 80058ec:	1d20      	adds	r0, r4, #4
 80058ee:	f7ff fdd9 	bl	80054a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 80058f2:	ab06      	add	r3, sp, #24
 80058f4:	4601      	mov	r1, r0
 80058f6:	4628      	mov	r0, r5
 80058f8:	f3af 8000 	nop.w
 80058fc:	2800      	cmp	r0, #0
 80058fe:	f040 80b8 	bne.w	8005a72 <__gnu_unwind_pr_common+0x2ba>
 8005902:	3408      	adds	r4, #8
 8005904:	e77b      	b.n	80057fe <__gnu_unwind_pr_common+0x46>
 8005906:	a907      	add	r1, sp, #28
 8005908:	4648      	mov	r0, r9
 800590a:	f000 faf3 	bl	8005ef4 <__gnu_unwind_execute>
 800590e:	2800      	cmp	r0, #0
 8005910:	d1bc      	bne.n	800588c <__gnu_unwind_pr_common+0xd4>
 8005912:	9b01      	ldr	r3, [sp, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d15c      	bne.n	80059d2 <__gnu_unwind_pr_common+0x21a>
 8005918:	2008      	movs	r0, #8
 800591a:	b00b      	add	sp, #44	; 0x2c
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	210d      	movs	r1, #13
 8005922:	4648      	mov	r0, r9
 8005924:	6a2f      	ldr	r7, [r5, #32]
 8005926:	f7ff fedb 	bl	80056e0 <_Unwind_GetGR>
 800592a:	4287      	cmp	r7, r0
 800592c:	d1e9      	bne.n	8005902 <__gnu_unwind_pr_common+0x14a>
 800592e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005930:	429c      	cmp	r4, r3
 8005932:	d1e6      	bne.n	8005902 <__gnu_unwind_pr_common+0x14a>
 8005934:	4620      	mov	r0, r4
 8005936:	f7ff fce9 	bl	800530c <selfrel_offset31>
 800593a:	210f      	movs	r1, #15
 800593c:	4602      	mov	r2, r0
 800593e:	4648      	mov	r0, r9
 8005940:	f7ff fef4 	bl	800572c <_Unwind_SetGR>
 8005944:	4648      	mov	r0, r9
 8005946:	462a      	mov	r2, r5
 8005948:	2100      	movs	r1, #0
 800594a:	f7ff feef 	bl	800572c <_Unwind_SetGR>
 800594e:	2007      	movs	r0, #7
 8005950:	e79d      	b.n	800588e <__gnu_unwind_pr_common+0xd6>
 8005952:	210d      	movs	r1, #13
 8005954:	4648      	mov	r0, r9
 8005956:	6a2f      	ldr	r7, [r5, #32]
 8005958:	f7ff fec2 	bl	80056e0 <_Unwind_GetGR>
 800595c:	4287      	cmp	r7, r0
 800595e:	d048      	beq.n	80059f2 <__gnu_unwind_pr_common+0x23a>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	da85      	bge.n	8005872 <__gnu_unwind_pr_common+0xba>
 8005966:	3404      	adds	r4, #4
 8005968:	e783      	b.n	8005872 <__gnu_unwind_pr_common+0xba>
 800596a:	9b02      	ldr	r3, [sp, #8]
 800596c:	b33b      	cbz	r3, 80059be <__gnu_unwind_pr_common+0x206>
 800596e:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8005972:	1d27      	adds	r7, r4, #4
 8005974:	f8cd b010 	str.w	fp, [sp, #16]
 8005978:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800597c:	46a3      	mov	fp, r4
 800597e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005982:	461c      	mov	r4, r3
 8005984:	9605      	str	r6, [sp, #20]
 8005986:	e002      	b.n	800598e <__gnu_unwind_pr_common+0x1d6>
 8005988:	45b2      	cmp	sl, r6
 800598a:	46b0      	mov	r8, r6
 800598c:	d016      	beq.n	80059bc <__gnu_unwind_pr_common+0x204>
 800598e:	4638      	mov	r0, r7
 8005990:	9406      	str	r4, [sp, #24]
 8005992:	f7ff fd87 	bl	80054a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8005996:	ab06      	add	r3, sp, #24
 8005998:	4601      	mov	r1, r0
 800599a:	2200      	movs	r2, #0
 800599c:	4628      	mov	r0, r5
 800599e:	f3af 8000 	nop.w
 80059a2:	f108 0601 	add.w	r6, r8, #1
 80059a6:	3704      	adds	r7, #4
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d0ed      	beq.n	8005988 <__gnu_unwind_pr_common+0x1d0>
 80059ac:	9b02      	ldr	r3, [sp, #8]
 80059ae:	465c      	mov	r4, fp
 80059b0:	4543      	cmp	r3, r8
 80059b2:	f8dd b010 	ldr.w	fp, [sp, #16]
 80059b6:	9e05      	ldr	r6, [sp, #20]
 80059b8:	d1d2      	bne.n	8005960 <__gnu_unwind_pr_common+0x1a8>
 80059ba:	e000      	b.n	80059be <__gnu_unwind_pr_common+0x206>
 80059bc:	465c      	mov	r4, fp
 80059be:	4648      	mov	r0, r9
 80059c0:	210d      	movs	r1, #13
 80059c2:	f7ff fe8d 	bl	80056e0 <_Unwind_GetGR>
 80059c6:	9b06      	ldr	r3, [sp, #24]
 80059c8:	6228      	str	r0, [r5, #32]
 80059ca:	62ac      	str	r4, [r5, #40]	; 0x28
 80059cc:	626b      	str	r3, [r5, #36]	; 0x24
 80059ce:	2006      	movs	r0, #6
 80059d0:	e75d      	b.n	800588e <__gnu_unwind_pr_common+0xd6>
 80059d2:	210f      	movs	r1, #15
 80059d4:	4648      	mov	r0, r9
 80059d6:	f7ff fe83 	bl	80056e0 <_Unwind_GetGR>
 80059da:	210e      	movs	r1, #14
 80059dc:	4602      	mov	r2, r0
 80059de:	4648      	mov	r0, r9
 80059e0:	f7ff fea4 	bl	800572c <_Unwind_SetGR>
 80059e4:	4648      	mov	r0, r9
 80059e6:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <__gnu_unwind_pr_common+0x2d8>)
 80059e8:	210f      	movs	r1, #15
 80059ea:	f7ff fe9f 	bl	800572c <_Unwind_SetGR>
 80059ee:	2007      	movs	r0, #7
 80059f0:	e74d      	b.n	800588e <__gnu_unwind_pr_common+0xd6>
 80059f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80059f4:	429c      	cmp	r4, r3
 80059f6:	d1b3      	bne.n	8005960 <__gnu_unwind_pr_common+0x1a8>
 80059f8:	2204      	movs	r2, #4
 80059fa:	9902      	ldr	r1, [sp, #8]
 80059fc:	2700      	movs	r7, #0
 80059fe:	18a3      	adds	r3, r4, r2
 8005a00:	62a9      	str	r1, [r5, #40]	; 0x28
 8005a02:	62ef      	str	r7, [r5, #44]	; 0x2c
 8005a04:	632a      	str	r2, [r5, #48]	; 0x30
 8005a06:	636b      	str	r3, [r5, #52]	; 0x34
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	42bb      	cmp	r3, r7
 8005a0c:	db1f      	blt.n	8005a4e <__gnu_unwind_pr_common+0x296>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	e72e      	b.n	8005872 <__gnu_unwind_pr_common+0xba>
 8005a14:	4648      	mov	r0, r9
 8005a16:	210d      	movs	r1, #13
 8005a18:	f7ff fe62 	bl	80056e0 <_Unwind_GetGR>
 8005a1c:	6228      	str	r0, [r5, #32]
 8005a1e:	9b06      	ldr	r3, [sp, #24]
 8005a20:	626b      	str	r3, [r5, #36]	; 0x24
 8005a22:	62ac      	str	r4, [r5, #40]	; 0x28
 8005a24:	2006      	movs	r0, #6
 8005a26:	e732      	b.n	800588e <__gnu_unwind_pr_common+0xd6>
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f7ff fc6f 	bl	800530c <selfrel_offset31>
 8005a2e:	3404      	adds	r4, #4
 8005a30:	4606      	mov	r6, r0
 8005a32:	63ac      	str	r4, [r5, #56]	; 0x38
 8005a34:	4628      	mov	r0, r5
 8005a36:	f3af 8000 	nop.w
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	f43f af26 	beq.w	800588c <__gnu_unwind_pr_common+0xd4>
 8005a40:	4648      	mov	r0, r9
 8005a42:	4632      	mov	r2, r6
 8005a44:	210f      	movs	r1, #15
 8005a46:	f7ff fe71 	bl	800572c <_Unwind_SetGR>
 8005a4a:	2007      	movs	r0, #7
 8005a4c:	e71f      	b.n	800588e <__gnu_unwind_pr_common+0xd6>
 8005a4e:	4608      	mov	r0, r1
 8005a50:	3001      	adds	r0, #1
 8005a52:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005a56:	f7ff fc59 	bl	800530c <selfrel_offset31>
 8005a5a:	210f      	movs	r1, #15
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	4648      	mov	r0, r9
 8005a60:	f7ff fe64 	bl	800572c <_Unwind_SetGR>
 8005a64:	4648      	mov	r0, r9
 8005a66:	462a      	mov	r2, r5
 8005a68:	4639      	mov	r1, r7
 8005a6a:	f7ff fe5f 	bl	800572c <_Unwind_SetGR>
 8005a6e:	2007      	movs	r0, #7
 8005a70:	e70d      	b.n	800588e <__gnu_unwind_pr_common+0xd6>
 8005a72:	4607      	mov	r7, r0
 8005a74:	210d      	movs	r1, #13
 8005a76:	4648      	mov	r0, r9
 8005a78:	f7ff fe32 	bl	80056e0 <_Unwind_GetGR>
 8005a7c:	2f02      	cmp	r7, #2
 8005a7e:	6228      	str	r0, [r5, #32]
 8005a80:	d1cd      	bne.n	8005a1e <__gnu_unwind_pr_common+0x266>
 8005a82:	462b      	mov	r3, r5
 8005a84:	9a06      	ldr	r2, [sp, #24]
 8005a86:	f843 2f2c 	str.w	r2, [r3, #44]!
 8005a8a:	626b      	str	r3, [r5, #36]	; 0x24
 8005a8c:	e7c9      	b.n	8005a22 <__gnu_unwind_pr_common+0x26a>
 8005a8e:	bf00      	nop
 8005a90:	00000000 	.word	0x00000000

08005a94 <__aeabi_unwind_cpp_pr0>:
 8005a94:	2300      	movs	r3, #0
 8005a96:	e68f      	b.n	80057b8 <__gnu_unwind_pr_common>

08005a98 <__aeabi_unwind_cpp_pr1>:
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e68d      	b.n	80057b8 <__gnu_unwind_pr_common>

08005a9c <__aeabi_unwind_cpp_pr2>:
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e68b      	b.n	80057b8 <__gnu_unwind_pr_common>

08005aa0 <_Unwind_VRS_Pop>:
 8005aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	b0c5      	sub	sp, #276	; 0x114
 8005aa6:	2904      	cmp	r1, #4
 8005aa8:	d80d      	bhi.n	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005aaa:	e8df f001 	tbb	[pc, r1]
 8005aae:	0357      	.short	0x0357
 8005ab0:	310c      	.short	0x310c
 8005ab2:	0f          	.byte	0x0f
 8005ab3:	00          	.byte	0x00
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8005aba:	b295      	uxth	r5, r2
 8005abc:	d166      	bne.n	8005b8c <_Unwind_VRS_Pop+0xec>
 8005abe:	1972      	adds	r2, r6, r5
 8005ac0:	2a10      	cmp	r2, #16
 8005ac2:	f240 809f 	bls.w	8005c04 <_Unwind_VRS_Pop+0x164>
 8005ac6:	2002      	movs	r0, #2
 8005ac8:	b045      	add	sp, #276	; 0x114
 8005aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1fa      	bne.n	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005ad0:	2a10      	cmp	r2, #16
 8005ad2:	d8f8      	bhi.n	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	06d8      	lsls	r0, r3, #27
 8005ad8:	f100 80c9 	bmi.w	8005c6e <_Unwind_VRS_Pop+0x1ce>
 8005adc:	ae22      	add	r6, sp, #136	; 0x88
 8005ade:	4630      	mov	r0, r6
 8005ae0:	9201      	str	r2, [sp, #4]
 8005ae2:	f000 f977 	bl	8005dd4 <__gnu_Unwind_Save_WMMXC>
 8005ae6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ae8:	9a01      	ldr	r2, [sp, #4]
 8005aea:	2300      	movs	r3, #0
 8005aec:	2501      	movs	r5, #1
 8005aee:	fa05 f103 	lsl.w	r1, r5, r3
 8005af2:	4211      	tst	r1, r2
 8005af4:	d003      	beq.n	8005afe <_Unwind_VRS_Pop+0x5e>
 8005af6:	6801      	ldr	r1, [r0, #0]
 8005af8:	3004      	adds	r0, #4
 8005afa:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8005afe:	3301      	adds	r3, #1
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d1f4      	bne.n	8005aee <_Unwind_VRS_Pop+0x4e>
 8005b04:	63a0      	str	r0, [r4, #56]	; 0x38
 8005b06:	4630      	mov	r0, r6
 8005b08:	f000 f95a 	bl	8005dc0 <__gnu_Unwind_Restore_WMMXC>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e7db      	b.n	8005ac8 <_Unwind_VRS_Pop+0x28>
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d1d8      	bne.n	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005b14:	0c15      	lsrs	r5, r2, #16
 8005b16:	b297      	uxth	r7, r2
 8005b18:	19eb      	adds	r3, r5, r7
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d8d3      	bhi.n	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	071e      	lsls	r6, r3, #28
 8005b22:	f100 80b8 	bmi.w	8005c96 <_Unwind_VRS_Pop+0x1f6>
 8005b26:	ae22      	add	r6, sp, #136	; 0x88
 8005b28:	4630      	mov	r0, r6
 8005b2a:	007f      	lsls	r7, r7, #1
 8005b2c:	f000 f926 	bl	8005d7c <__gnu_Unwind_Save_WMMXD>
 8005b30:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8005b34:	1e7b      	subs	r3, r7, #1
 8005b36:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005b38:	b157      	cbz	r7, 8005b50 <_Unwind_VRS_Pop+0xb0>
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	3a04      	subs	r2, #4
 8005b3e:	f851 0b04 	ldr.w	r0, [r1], #4
 8005b42:	3b01      	subs	r3, #1
 8005b44:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b48:	1c58      	adds	r0, r3, #1
 8005b4a:	d1f8      	bne.n	8005b3e <_Unwind_VRS_Pop+0x9e>
 8005b4c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8005b50:	4630      	mov	r0, r6
 8005b52:	63a5      	str	r5, [r4, #56]	; 0x38
 8005b54:	f000 f8f0 	bl	8005d38 <__gnu_Unwind_Restore_WMMXD>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e7b5      	b.n	8005ac8 <_Unwind_VRS_Pop+0x28>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1b2      	bne.n	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005b60:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005b62:	b297      	uxth	r7, r2
 8005b64:	1d20      	adds	r0, r4, #4
 8005b66:	2601      	movs	r6, #1
 8005b68:	fa06 f103 	lsl.w	r1, r6, r3
 8005b6c:	4239      	tst	r1, r7
 8005b6e:	f103 0301 	add.w	r3, r3, #1
 8005b72:	d002      	beq.n	8005b7a <_Unwind_VRS_Pop+0xda>
 8005b74:	6829      	ldr	r1, [r5, #0]
 8005b76:	3504      	adds	r5, #4
 8005b78:	6001      	str	r1, [r0, #0]
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	f100 0004 	add.w	r0, r0, #4
 8005b80:	d1f2      	bne.n	8005b68 <_Unwind_VRS_Pop+0xc8>
 8005b82:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8005b86:	d13b      	bne.n	8005c00 <_Unwind_VRS_Pop+0x160>
 8005b88:	63a5      	str	r5, [r4, #56]	; 0x38
 8005b8a:	e79d      	b.n	8005ac8 <_Unwind_VRS_Pop+0x28>
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	d19a      	bne.n	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005b90:	1977      	adds	r7, r6, r5
 8005b92:	2f20      	cmp	r7, #32
 8005b94:	d897      	bhi.n	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005b96:	2e0f      	cmp	r6, #15
 8005b98:	d965      	bls.n	8005c66 <_Unwind_VRS_Pop+0x1c6>
 8005b9a:	462f      	mov	r7, r5
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	d148      	bne.n	8005c32 <_Unwind_VRS_Pop+0x192>
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	2700      	movs	r7, #0
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005ba8:	dd71      	ble.n	8005c8e <_Unwind_VRS_Pop+0x1ee>
 8005baa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005bae:	4601      	mov	r1, r0
 8005bb0:	a844      	add	r0, sp, #272	; 0x110
 8005bb2:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8005bb6:	388c      	subs	r0, #140	; 0x8c
 8005bb8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bbc:	4291      	cmp	r1, r2
 8005bbe:	f840 5f04 	str.w	r5, [r0, #4]!
 8005bc2:	d1f9      	bne.n	8005bb8 <_Unwind_VRS_Pop+0x118>
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	b197      	cbz	r7, 8005bee <_Unwind_VRS_Pop+0x14e>
 8005bc8:	4632      	mov	r2, r6
 8005bca:	2e10      	cmp	r6, #16
 8005bcc:	a944      	add	r1, sp, #272	; 0x110
 8005bce:	bf38      	it	cc
 8005bd0:	2210      	movcc	r2, #16
 8005bd2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8005bd6:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8005bda:	0079      	lsls	r1, r7, #1
 8005bdc:	3a04      	subs	r2, #4
 8005bde:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005be2:	f850 5b04 	ldr.w	r5, [r0], #4
 8005be6:	4281      	cmp	r1, r0
 8005be8:	f842 5f04 	str.w	r5, [r2, #4]!
 8005bec:	d1f9      	bne.n	8005be2 <_Unwind_VRS_Pop+0x142>
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d047      	beq.n	8005c82 <_Unwind_VRS_Pop+0x1e2>
 8005bf2:	2e0f      	cmp	r6, #15
 8005bf4:	63a1      	str	r1, [r4, #56]	; 0x38
 8005bf6:	d932      	bls.n	8005c5e <_Unwind_VRS_Pop+0x1be>
 8005bf8:	b117      	cbz	r7, 8005c00 <_Unwind_VRS_Pop+0x160>
 8005bfa:	a802      	add	r0, sp, #8
 8005bfc:	f000 f894 	bl	8005d28 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005c00:	2000      	movs	r0, #0
 8005c02:	e761      	b.n	8005ac8 <_Unwind_VRS_Pop+0x28>
 8005c04:	2e0f      	cmp	r6, #15
 8005c06:	f63f af5e 	bhi.w	8005ac6 <_Unwind_VRS_Pop+0x26>
 8005c0a:	2700      	movs	r7, #0
 8005c0c:	6822      	ldr	r2, [r4, #0]
 8005c0e:	07d1      	lsls	r1, r2, #31
 8005c10:	d50d      	bpl.n	8005c2e <_Unwind_VRS_Pop+0x18e>
 8005c12:	f022 0101 	bic.w	r1, r2, #1
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	6021      	str	r1, [r4, #0]
 8005c1a:	9301      	str	r3, [sp, #4]
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	d052      	beq.n	8005cc6 <_Unwind_VRS_Pop+0x226>
 8005c20:	f022 0203 	bic.w	r2, r2, #3
 8005c24:	f840 2b48 	str.w	r2, [r0], #72
 8005c28:	f000 f872 	bl	8005d10 <__gnu_Unwind_Save_VFP>
 8005c2c:	9b01      	ldr	r3, [sp, #4]
 8005c2e:	2f00      	cmp	r7, #0
 8005c30:	d051      	beq.n	8005cd6 <_Unwind_VRS_Pop+0x236>
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	0751      	lsls	r1, r2, #29
 8005c36:	d436      	bmi.n	8005ca6 <_Unwind_VRS_Pop+0x206>
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d03e      	beq.n	8005cba <_Unwind_VRS_Pop+0x21a>
 8005c3c:	2e0f      	cmp	r6, #15
 8005c3e:	d806      	bhi.n	8005c4e <_Unwind_VRS_Pop+0x1ae>
 8005c40:	a822      	add	r0, sp, #136	; 0x88
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	f000 f86c 	bl	8005d20 <__gnu_Unwind_Save_VFP_D>
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	2f00      	cmp	r7, #0
 8005c4c:	d0a8      	beq.n	8005ba0 <_Unwind_VRS_Pop+0x100>
 8005c4e:	a802      	add	r0, sp, #8
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	f000 f86d 	bl	8005d30 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8005c56:	9b01      	ldr	r3, [sp, #4]
 8005c58:	f1c6 0210 	rsb	r2, r6, #16
 8005c5c:	e7a2      	b.n	8005ba4 <_Unwind_VRS_Pop+0x104>
 8005c5e:	a822      	add	r0, sp, #136	; 0x88
 8005c60:	f000 f85a 	bl	8005d18 <__gnu_Unwind_Restore_VFP_D>
 8005c64:	e7c8      	b.n	8005bf8 <_Unwind_VRS_Pop+0x158>
 8005c66:	2f10      	cmp	r7, #16
 8005c68:	d9cf      	bls.n	8005c0a <_Unwind_VRS_Pop+0x16a>
 8005c6a:	3f10      	subs	r7, #16
 8005c6c:	e7ce      	b.n	8005c0c <_Unwind_VRS_Pop+0x16c>
 8005c6e:	f023 0310 	bic.w	r3, r3, #16
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	f000 f8ab 	bl	8005dd4 <__gnu_Unwind_Save_WMMXC>
 8005c7e:	9a01      	ldr	r2, [sp, #4]
 8005c80:	e72c      	b.n	8005adc <_Unwind_VRS_Pop+0x3c>
 8005c82:	3104      	adds	r1, #4
 8005c84:	63a1      	str	r1, [r4, #56]	; 0x38
 8005c86:	a822      	add	r0, sp, #136	; 0x88
 8005c88:	f000 f83e 	bl	8005d08 <__gnu_Unwind_Restore_VFP>
 8005c8c:	e7b8      	b.n	8005c00 <_Unwind_VRS_Pop+0x160>
 8005c8e:	2f00      	cmp	r7, #0
 8005c90:	d19a      	bne.n	8005bc8 <_Unwind_VRS_Pop+0x128>
 8005c92:	4601      	mov	r1, r0
 8005c94:	e7ab      	b.n	8005bee <_Unwind_VRS_Pop+0x14e>
 8005c96:	f023 0308 	bic.w	r3, r3, #8
 8005c9a:	6023      	str	r3, [r4, #0]
 8005c9c:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8005ca0:	f000 f86c 	bl	8005d7c <__gnu_Unwind_Save_WMMXD>
 8005ca4:	e73f      	b.n	8005b26 <_Unwind_VRS_Pop+0x86>
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f022 0204 	bic.w	r2, r2, #4
 8005cac:	f840 2bd0 	str.w	r2, [r0], #208
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	f000 f83d 	bl	8005d30 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8005cb6:	9b01      	ldr	r3, [sp, #4]
 8005cb8:	e7be      	b.n	8005c38 <_Unwind_VRS_Pop+0x198>
 8005cba:	a822      	add	r0, sp, #136	; 0x88
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	f000 f827 	bl	8005d10 <__gnu_Unwind_Save_VFP>
 8005cc2:	9b01      	ldr	r3, [sp, #4]
 8005cc4:	e7c8      	b.n	8005c58 <_Unwind_VRS_Pop+0x1b8>
 8005cc6:	f041 0102 	orr.w	r1, r1, #2
 8005cca:	f840 1b48 	str.w	r1, [r0], #72
 8005cce:	f000 f827 	bl	8005d20 <__gnu_Unwind_Save_VFP_D>
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	e7ab      	b.n	8005c2e <_Unwind_VRS_Pop+0x18e>
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d003      	beq.n	8005ce2 <_Unwind_VRS_Pop+0x242>
 8005cda:	2e0f      	cmp	r6, #15
 8005cdc:	f63f af60 	bhi.w	8005ba0 <_Unwind_VRS_Pop+0x100>
 8005ce0:	e7ae      	b.n	8005c40 <_Unwind_VRS_Pop+0x1a0>
 8005ce2:	a822      	add	r0, sp, #136	; 0x88
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	f000 f813 	bl	8005d10 <__gnu_Unwind_Save_VFP>
 8005cea:	9b01      	ldr	r3, [sp, #4]
 8005cec:	e758      	b.n	8005ba0 <_Unwind_VRS_Pop+0x100>
 8005cee:	bf00      	nop

08005cf0 <__restore_core_regs>:
 8005cf0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8005cf4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8005cf8:	469c      	mov	ip, r3
 8005cfa:	46a6      	mov	lr, r4
 8005cfc:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8005d00:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8005d04:	46e5      	mov	sp, ip
 8005d06:	bd00      	pop	{pc}

08005d08 <__gnu_Unwind_Restore_VFP>:
 8005d08:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop

08005d10 <__gnu_Unwind_Save_VFP>:
 8005d10:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop

08005d18 <__gnu_Unwind_Restore_VFP_D>:
 8005d18:	ec90 0b20 	vldmia	r0, {d0-d15}
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop

08005d20 <__gnu_Unwind_Save_VFP_D>:
 8005d20:	ec80 0b20 	vstmia	r0, {d0-d15}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8005d28:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop

08005d30 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8005d30:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop

08005d38 <__gnu_Unwind_Restore_WMMXD>:
 8005d38:	ecf0 0102 	ldfe	f0, [r0], #8
 8005d3c:	ecf0 1102 	ldfe	f1, [r0], #8
 8005d40:	ecf0 2102 	ldfe	f2, [r0], #8
 8005d44:	ecf0 3102 	ldfe	f3, [r0], #8
 8005d48:	ecf0 4102 	ldfe	f4, [r0], #8
 8005d4c:	ecf0 5102 	ldfe	f5, [r0], #8
 8005d50:	ecf0 6102 	ldfe	f6, [r0], #8
 8005d54:	ecf0 7102 	ldfe	f7, [r0], #8
 8005d58:	ecf0 8102 	ldfp	f0, [r0], #8
 8005d5c:	ecf0 9102 	ldfp	f1, [r0], #8
 8005d60:	ecf0 a102 	ldfp	f2, [r0], #8
 8005d64:	ecf0 b102 	ldfp	f3, [r0], #8
 8005d68:	ecf0 c102 	ldfp	f4, [r0], #8
 8005d6c:	ecf0 d102 	ldfp	f5, [r0], #8
 8005d70:	ecf0 e102 	ldfp	f6, [r0], #8
 8005d74:	ecf0 f102 	ldfp	f7, [r0], #8
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop

08005d7c <__gnu_Unwind_Save_WMMXD>:
 8005d7c:	ece0 0102 	stfe	f0, [r0], #8
 8005d80:	ece0 1102 	stfe	f1, [r0], #8
 8005d84:	ece0 2102 	stfe	f2, [r0], #8
 8005d88:	ece0 3102 	stfe	f3, [r0], #8
 8005d8c:	ece0 4102 	stfe	f4, [r0], #8
 8005d90:	ece0 5102 	stfe	f5, [r0], #8
 8005d94:	ece0 6102 	stfe	f6, [r0], #8
 8005d98:	ece0 7102 	stfe	f7, [r0], #8
 8005d9c:	ece0 8102 	stfp	f0, [r0], #8
 8005da0:	ece0 9102 	stfp	f1, [r0], #8
 8005da4:	ece0 a102 	stfp	f2, [r0], #8
 8005da8:	ece0 b102 	stfp	f3, [r0], #8
 8005dac:	ece0 c102 	stfp	f4, [r0], #8
 8005db0:	ece0 d102 	stfp	f5, [r0], #8
 8005db4:	ece0 e102 	stfp	f6, [r0], #8
 8005db8:	ece0 f102 	stfp	f7, [r0], #8
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop

08005dc0 <__gnu_Unwind_Restore_WMMXC>:
 8005dc0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8005dc4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8005dc8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8005dcc:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop

08005dd4 <__gnu_Unwind_Save_WMMXC>:
 8005dd4:	fca0 8101 	stc2	1, cr8, [r0], #4
 8005dd8:	fca0 9101 	stc2	1, cr9, [r0], #4
 8005ddc:	fca0 a101 	stc2	1, cr10, [r0], #4
 8005de0:	fca0 b101 	stc2	1, cr11, [r0], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop

08005de8 <_Unwind_RaiseException>:
 8005de8:	46ec      	mov	ip, sp
 8005dea:	b500      	push	{lr}
 8005dec:	e92d 5000 	stmdb	sp!, {ip, lr}
 8005df0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8005dfc:	a901      	add	r1, sp, #4
 8005dfe:	f7ff fbe7 	bl	80055d0 <__gnu_Unwind_RaiseException>
 8005e02:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8005e06:	b012      	add	sp, #72	; 0x48
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop

08005e0c <_Unwind_Resume>:
 8005e0c:	46ec      	mov	ip, sp
 8005e0e:	b500      	push	{lr}
 8005e10:	e92d 5000 	stmdb	sp!, {ip, lr}
 8005e14:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8005e20:	a901      	add	r1, sp, #4
 8005e22:	f7ff fc0f 	bl	8005644 <__gnu_Unwind_Resume>
 8005e26:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8005e2a:	b012      	add	sp, #72	; 0x48
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop

08005e30 <_Unwind_Resume_or_Rethrow>:
 8005e30:	46ec      	mov	ip, sp
 8005e32:	b500      	push	{lr}
 8005e34:	e92d 5000 	stmdb	sp!, {ip, lr}
 8005e38:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e92d 000c 	stmdb	sp!, {r2, r3}
 8005e44:	a901      	add	r1, sp, #4
 8005e46:	f7ff fc1f 	bl	8005688 <__gnu_Unwind_Resume_or_Rethrow>
 8005e4a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8005e4e:	b012      	add	sp, #72	; 0x48
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop

08005e54 <_Unwind_ForcedUnwind>:
 8005e54:	46ec      	mov	ip, sp
 8005e56:	b500      	push	{lr}
 8005e58:	e92d 5000 	stmdb	sp!, {ip, lr}
 8005e5c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	e92d 000c 	stmdb	sp!, {r2, r3}
 8005e68:	ab01      	add	r3, sp, #4
 8005e6a:	f7ff fbe1 	bl	8005630 <__gnu_Unwind_ForcedUnwind>
 8005e6e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8005e72:	b012      	add	sp, #72	; 0x48
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop

08005e78 <_Unwind_Backtrace>:
 8005e78:	46ec      	mov	ip, sp
 8005e7a:	b500      	push	{lr}
 8005e7c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8005e80:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	e92d 000c 	stmdb	sp!, {r2, r3}
 8005e8c:	aa01      	add	r2, sp, #4
 8005e8e:	f7ff fc5b 	bl	8005748 <__gnu_Unwind_Backtrace>
 8005e92:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8005e96:	b012      	add	sp, #72	; 0x48
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop

08005e9c <next_unwind_byte>:
 8005e9c:	7a03      	ldrb	r3, [r0, #8]
 8005e9e:	b91b      	cbnz	r3, 8005ea8 <next_unwind_byte+0xc>
 8005ea0:	7a43      	ldrb	r3, [r0, #9]
 8005ea2:	b943      	cbnz	r3, 8005eb6 <next_unwind_byte+0x1a>
 8005ea4:	20b0      	movs	r0, #176	; 0xb0
 8005ea6:	4770      	bx	lr
 8005ea8:	1e5a      	subs	r2, r3, #1
 8005eaa:	6803      	ldr	r3, [r0, #0]
 8005eac:	7202      	strb	r2, [r0, #8]
 8005eae:	021a      	lsls	r2, r3, #8
 8005eb0:	6002      	str	r2, [r0, #0]
 8005eb2:	0e18      	lsrs	r0, r3, #24
 8005eb4:	4770      	bx	lr
 8005eb6:	6842      	ldr	r2, [r0, #4]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b410      	push	{r4}
 8005ebc:	7243      	strb	r3, [r0, #9]
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	2103      	movs	r1, #3
 8005ec2:	1d14      	adds	r4, r2, #4
 8005ec4:	7201      	strb	r1, [r0, #8]
 8005ec6:	021a      	lsls	r2, r3, #8
 8005ec8:	6044      	str	r4, [r0, #4]
 8005eca:	6002      	str	r2, [r0, #0]
 8005ecc:	bc10      	pop	{r4}
 8005ece:	0e18      	lsrs	r0, r3, #24
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop

08005ed4 <_Unwind_GetGR.constprop.0>:
 8005ed4:	b500      	push	{lr}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	aa03      	add	r2, sp, #12
 8005eda:	2300      	movs	r3, #0
 8005edc:	9200      	str	r2, [sp, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	220c      	movs	r2, #12
 8005ee2:	f7ff fbe3 	bl	80056ac <_Unwind_VRS_Get>
 8005ee6:	9803      	ldr	r0, [sp, #12]
 8005ee8:	b005      	add	sp, #20
 8005eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eee:	bf00      	nop

08005ef0 <unwind_UCB_from_context>:
 8005ef0:	e7f0      	b.n	8005ed4 <_Unwind_GetGR.constprop.0>
 8005ef2:	bf00      	nop

08005ef4 <__gnu_unwind_execute>:
 8005ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ef8:	4606      	mov	r6, r0
 8005efa:	460d      	mov	r5, r1
 8005efc:	b085      	sub	sp, #20
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	4628      	mov	r0, r5
 8005f04:	f7ff ffca 	bl	8005e9c <next_unwind_byte>
 8005f08:	28b0      	cmp	r0, #176	; 0xb0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	f000 80b4 	beq.w	8006078 <__gnu_unwind_execute+0x184>
 8005f10:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 8005f14:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8005f18:	d020      	beq.n	8005f5c <__gnu_unwind_execute+0x68>
 8005f1a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d07a      	beq.n	8006018 <__gnu_unwind_execute+0x124>
 8005f22:	2b90      	cmp	r3, #144	; 0x90
 8005f24:	d035      	beq.n	8005f92 <__gnu_unwind_execute+0x9e>
 8005f26:	2ba0      	cmp	r3, #160	; 0xa0
 8005f28:	d048      	beq.n	8005fbc <__gnu_unwind_execute+0xc8>
 8005f2a:	2bb0      	cmp	r3, #176	; 0xb0
 8005f2c:	d05c      	beq.n	8005fe8 <__gnu_unwind_execute+0xf4>
 8005f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f30:	f000 8089 	beq.w	8006046 <__gnu_unwind_execute+0x152>
 8005f34:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8005f38:	2bd0      	cmp	r3, #208	; 0xd0
 8005f3a:	d10b      	bne.n	8005f54 <__gnu_unwind_execute+0x60>
 8005f3c:	f000 0207 	and.w	r2, r0, #7
 8005f40:	3201      	adds	r2, #1
 8005f42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005f46:	2305      	movs	r3, #5
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	f7ff fda8 	bl	8005aa0 <_Unwind_VRS_Pop>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d0d6      	beq.n	8005f02 <__gnu_unwind_execute+0xe>
 8005f54:	2009      	movs	r0, #9
 8005f56:	b005      	add	sp, #20
 8005f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f5c:	f10d 090c 	add.w	r9, sp, #12
 8005f60:	4619      	mov	r1, r3
 8005f62:	0087      	lsls	r7, r0, #2
 8005f64:	f8cd 9000 	str.w	r9, [sp]
 8005f68:	220d      	movs	r2, #13
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f7ff fb9e 	bl	80056ac <_Unwind_VRS_Get>
 8005f70:	b2ff      	uxtb	r7, r7
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	3704      	adds	r7, #4
 8005f76:	0660      	lsls	r0, r4, #25
 8005f78:	bf4c      	ite	mi
 8005f7a:	1bdf      	submi	r7, r3, r7
 8005f7c:	18ff      	addpl	r7, r7, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8cd 9000 	str.w	r9, [sp]
 8005f84:	4619      	mov	r1, r3
 8005f86:	220d      	movs	r2, #13
 8005f88:	4630      	mov	r0, r6
 8005f8a:	9703      	str	r7, [sp, #12]
 8005f8c:	f7ff fbb4 	bl	80056f8 <_Unwind_VRS_Set>
 8005f90:	e7b7      	b.n	8005f02 <__gnu_unwind_execute+0xe>
 8005f92:	f000 030d 	and.w	r3, r0, #13
 8005f96:	2b0d      	cmp	r3, #13
 8005f98:	d0dc      	beq.n	8005f54 <__gnu_unwind_execute+0x60>
 8005f9a:	af03      	add	r7, sp, #12
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f000 020f 	and.w	r2, r0, #15
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	9700      	str	r7, [sp, #0]
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7ff fb80 	bl	80056ac <_Unwind_VRS_Get>
 8005fac:	2300      	movs	r3, #0
 8005fae:	9700      	str	r7, [sp, #0]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	220d      	movs	r2, #13
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f7ff fb9f 	bl	80056f8 <_Unwind_VRS_Set>
 8005fba:	e7a2      	b.n	8005f02 <__gnu_unwind_execute+0xe>
 8005fbc:	43c2      	mvns	r2, r0
 8005fbe:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8005fc2:	f002 0207 	and.w	r2, r2, #7
 8005fc6:	fa43 f202 	asr.w	r2, r3, r2
 8005fca:	0701      	lsls	r1, r0, #28
 8005fcc:	ea02 0203 	and.w	r2, r2, r3
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	bf48      	it	mi
 8005fd6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff fd5f 	bl	8005aa0 <_Unwind_VRS_Pop>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d1b6      	bne.n	8005f54 <__gnu_unwind_execute+0x60>
 8005fe6:	e78c      	b.n	8005f02 <__gnu_unwind_execute+0xe>
 8005fe8:	28b1      	cmp	r0, #177	; 0xb1
 8005fea:	d04a      	beq.n	8006082 <__gnu_unwind_execute+0x18e>
 8005fec:	28b2      	cmp	r0, #178	; 0xb2
 8005fee:	d053      	beq.n	8006098 <__gnu_unwind_execute+0x1a4>
 8005ff0:	28b3      	cmp	r0, #179	; 0xb3
 8005ff2:	f000 8081 	beq.w	80060f8 <__gnu_unwind_execute+0x204>
 8005ff6:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8005ffa:	2bb4      	cmp	r3, #180	; 0xb4
 8005ffc:	d0aa      	beq.n	8005f54 <__gnu_unwind_execute+0x60>
 8005ffe:	f000 0207 	and.w	r2, r0, #7
 8006002:	3201      	adds	r2, #1
 8006004:	2301      	movs	r3, #1
 8006006:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800600a:	4619      	mov	r1, r3
 800600c:	4630      	mov	r0, r6
 800600e:	f7ff fd47 	bl	8005aa0 <_Unwind_VRS_Pop>
 8006012:	2800      	cmp	r0, #0
 8006014:	d19e      	bne.n	8005f54 <__gnu_unwind_execute+0x60>
 8006016:	e774      	b.n	8005f02 <__gnu_unwind_execute+0xe>
 8006018:	4628      	mov	r0, r5
 800601a:	f7ff ff3f 	bl	8005e9c <next_unwind_byte>
 800601e:	0224      	lsls	r4, r4, #8
 8006020:	4320      	orrs	r0, r4
 8006022:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006026:	d095      	beq.n	8005f54 <__gnu_unwind_execute+0x60>
 8006028:	0104      	lsls	r4, r0, #4
 800602a:	2300      	movs	r3, #0
 800602c:	b2a2      	uxth	r2, r4
 800602e:	4619      	mov	r1, r3
 8006030:	4630      	mov	r0, r6
 8006032:	f7ff fd35 	bl	8005aa0 <_Unwind_VRS_Pop>
 8006036:	2800      	cmp	r0, #0
 8006038:	d18c      	bne.n	8005f54 <__gnu_unwind_execute+0x60>
 800603a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800603e:	bf18      	it	ne
 8006040:	f04f 0801 	movne.w	r8, #1
 8006044:	e75d      	b.n	8005f02 <__gnu_unwind_execute+0xe>
 8006046:	28c6      	cmp	r0, #198	; 0xc6
 8006048:	d062      	beq.n	8006110 <__gnu_unwind_execute+0x21c>
 800604a:	28c7      	cmp	r0, #199	; 0xc7
 800604c:	d06c      	beq.n	8006128 <__gnu_unwind_execute+0x234>
 800604e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8006052:	2bc0      	cmp	r3, #192	; 0xc0
 8006054:	d07b      	beq.n	800614e <__gnu_unwind_execute+0x25a>
 8006056:	28c8      	cmp	r0, #200	; 0xc8
 8006058:	f000 8091 	beq.w	800617e <__gnu_unwind_execute+0x28a>
 800605c:	28c9      	cmp	r0, #201	; 0xc9
 800605e:	f47f af79 	bne.w	8005f54 <__gnu_unwind_execute+0x60>
 8006062:	4628      	mov	r0, r5
 8006064:	f7ff ff1a 	bl	8005e9c <next_unwind_byte>
 8006068:	0302      	lsls	r2, r0, #12
 800606a:	f000 000f 	and.w	r0, r0, #15
 800606e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8006072:	3001      	adds	r0, #1
 8006074:	4302      	orrs	r2, r0
 8006076:	e766      	b.n	8005f46 <__gnu_unwind_execute+0x52>
 8006078:	f1b8 0f00 	cmp.w	r8, #0
 800607c:	d06e      	beq.n	800615c <__gnu_unwind_execute+0x268>
 800607e:	2000      	movs	r0, #0
 8006080:	e769      	b.n	8005f56 <__gnu_unwind_execute+0x62>
 8006082:	4628      	mov	r0, r5
 8006084:	f7ff ff0a 	bl	8005e9c <next_unwind_byte>
 8006088:	4602      	mov	r2, r0
 800608a:	2800      	cmp	r0, #0
 800608c:	f43f af62 	beq.w	8005f54 <__gnu_unwind_execute+0x60>
 8006090:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8006094:	d0b9      	beq.n	800600a <__gnu_unwind_execute+0x116>
 8006096:	e75d      	b.n	8005f54 <__gnu_unwind_execute+0x60>
 8006098:	2300      	movs	r3, #0
 800609a:	f10d 090c 	add.w	r9, sp, #12
 800609e:	220d      	movs	r2, #13
 80060a0:	4619      	mov	r1, r3
 80060a2:	f8cd 9000 	str.w	r9, [sp]
 80060a6:	4630      	mov	r0, r6
 80060a8:	f7ff fb00 	bl	80056ac <_Unwind_VRS_Get>
 80060ac:	4628      	mov	r0, r5
 80060ae:	f7ff fef5 	bl	8005e9c <next_unwind_byte>
 80060b2:	0602      	lsls	r2, r0, #24
 80060b4:	f04f 0402 	mov.w	r4, #2
 80060b8:	d50c      	bpl.n	80060d4 <__gnu_unwind_execute+0x1e0>
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80060c0:	40a0      	lsls	r0, r4
 80060c2:	4403      	add	r3, r0
 80060c4:	4628      	mov	r0, r5
 80060c6:	9303      	str	r3, [sp, #12]
 80060c8:	f7ff fee8 	bl	8005e9c <next_unwind_byte>
 80060cc:	0603      	lsls	r3, r0, #24
 80060ce:	f104 0407 	add.w	r4, r4, #7
 80060d2:	d4f2      	bmi.n	80060ba <__gnu_unwind_execute+0x1c6>
 80060d4:	9b03      	ldr	r3, [sp, #12]
 80060d6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80060da:	fa00 f204 	lsl.w	r2, r0, r4
 80060de:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80060e2:	2300      	movs	r3, #0
 80060e4:	4414      	add	r4, r2
 80060e6:	f8cd 9000 	str.w	r9, [sp]
 80060ea:	4619      	mov	r1, r3
 80060ec:	220d      	movs	r2, #13
 80060ee:	4630      	mov	r0, r6
 80060f0:	9403      	str	r4, [sp, #12]
 80060f2:	f7ff fb01 	bl	80056f8 <_Unwind_VRS_Set>
 80060f6:	e704      	b.n	8005f02 <__gnu_unwind_execute+0xe>
 80060f8:	4628      	mov	r0, r5
 80060fa:	f7ff fecf 	bl	8005e9c <next_unwind_byte>
 80060fe:	0301      	lsls	r1, r0, #12
 8006100:	f000 000f 	and.w	r0, r0, #15
 8006104:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8006108:	1c42      	adds	r2, r0, #1
 800610a:	2301      	movs	r3, #1
 800610c:	430a      	orrs	r2, r1
 800610e:	e77c      	b.n	800600a <__gnu_unwind_execute+0x116>
 8006110:	4628      	mov	r0, r5
 8006112:	f7ff fec3 	bl	8005e9c <next_unwind_byte>
 8006116:	0301      	lsls	r1, r0, #12
 8006118:	f000 000f 	and.w	r0, r0, #15
 800611c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8006120:	1c42      	adds	r2, r0, #1
 8006122:	2303      	movs	r3, #3
 8006124:	430a      	orrs	r2, r1
 8006126:	e770      	b.n	800600a <__gnu_unwind_execute+0x116>
 8006128:	4628      	mov	r0, r5
 800612a:	f7ff feb7 	bl	8005e9c <next_unwind_byte>
 800612e:	4602      	mov	r2, r0
 8006130:	2800      	cmp	r0, #0
 8006132:	f43f af0f 	beq.w	8005f54 <__gnu_unwind_execute+0x60>
 8006136:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800613a:	f47f af0b 	bne.w	8005f54 <__gnu_unwind_execute+0x60>
 800613e:	2104      	movs	r1, #4
 8006140:	4630      	mov	r0, r6
 8006142:	f7ff fcad 	bl	8005aa0 <_Unwind_VRS_Pop>
 8006146:	2800      	cmp	r0, #0
 8006148:	f47f af04 	bne.w	8005f54 <__gnu_unwind_execute+0x60>
 800614c:	e6d9      	b.n	8005f02 <__gnu_unwind_execute+0xe>
 800614e:	f000 020f 	and.w	r2, r0, #15
 8006152:	3201      	adds	r2, #1
 8006154:	2303      	movs	r3, #3
 8006156:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800615a:	e756      	b.n	800600a <__gnu_unwind_execute+0x116>
 800615c:	ac03      	add	r4, sp, #12
 800615e:	4643      	mov	r3, r8
 8006160:	220e      	movs	r2, #14
 8006162:	4641      	mov	r1, r8
 8006164:	9400      	str	r4, [sp, #0]
 8006166:	4630      	mov	r0, r6
 8006168:	f7ff faa0 	bl	80056ac <_Unwind_VRS_Get>
 800616c:	9400      	str	r4, [sp, #0]
 800616e:	4630      	mov	r0, r6
 8006170:	4643      	mov	r3, r8
 8006172:	220f      	movs	r2, #15
 8006174:	4641      	mov	r1, r8
 8006176:	f7ff fabf 	bl	80056f8 <_Unwind_VRS_Set>
 800617a:	4640      	mov	r0, r8
 800617c:	e6eb      	b.n	8005f56 <__gnu_unwind_execute+0x62>
 800617e:	4628      	mov	r0, r5
 8006180:	f7ff fe8c 	bl	8005e9c <next_unwind_byte>
 8006184:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006188:	f000 030f 	and.w	r3, r0, #15
 800618c:	3210      	adds	r2, #16
 800618e:	3301      	adds	r3, #1
 8006190:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006194:	e6d7      	b.n	8005f46 <__gnu_unwind_execute+0x52>
 8006196:	bf00      	nop

08006198 <__gnu_unwind_frame>:
 8006198:	b510      	push	{r4, lr}
 800619a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800619c:	b084      	sub	sp, #16
 800619e:	2003      	movs	r0, #3
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	f88d 000c 	strb.w	r0, [sp, #12]
 80061a6:	79dc      	ldrb	r4, [r3, #7]
 80061a8:	0212      	lsls	r2, r2, #8
 80061aa:	3308      	adds	r3, #8
 80061ac:	4608      	mov	r0, r1
 80061ae:	a901      	add	r1, sp, #4
 80061b0:	9201      	str	r2, [sp, #4]
 80061b2:	f88d 400d 	strb.w	r4, [sp, #13]
 80061b6:	9302      	str	r3, [sp, #8]
 80061b8:	f7ff fe9c 	bl	8005ef4 <__gnu_unwind_execute>
 80061bc:	b004      	add	sp, #16
 80061be:	bd10      	pop	{r4, pc}

080061c0 <_Unwind_GetRegionStart>:
 80061c0:	b508      	push	{r3, lr}
 80061c2:	f7ff fe95 	bl	8005ef0 <unwind_UCB_from_context>
 80061c6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80061c8:	bd08      	pop	{r3, pc}
 80061ca:	bf00      	nop

080061cc <_Unwind_GetLanguageSpecificData>:
 80061cc:	b508      	push	{r3, lr}
 80061ce:	f7ff fe8f 	bl	8005ef0 <unwind_UCB_from_context>
 80061d2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80061d4:	79d8      	ldrb	r0, [r3, #7]
 80061d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80061da:	3008      	adds	r0, #8
 80061dc:	bd08      	pop	{r3, pc}
 80061de:	bf00      	nop

080061e0 <_Unwind_GetTextRelBase>:
 80061e0:	b508      	push	{r3, lr}
 80061e2:	f000 ff25 	bl	8007030 <abort>
 80061e6:	bf00      	nop

080061e8 <_Unwind_GetDataRelBase>:
 80061e8:	b508      	push	{r3, lr}
 80061ea:	f7ff fff9 	bl	80061e0 <_Unwind_GetTextRelBase>
 80061ee:	bf00      	nop

080061f0 <strcmp>:
 80061f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f8:	2a01      	cmp	r2, #1
 80061fa:	bf28      	it	cs
 80061fc:	429a      	cmpcs	r2, r3
 80061fe:	d0f7      	beq.n	80061f0 <strcmp>
 8006200:	1ad0      	subs	r0, r2, r3
 8006202:	4770      	bx	lr

08006204 <strlen>:
 8006204:	4603      	mov	r3, r0
 8006206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800620a:	2a00      	cmp	r2, #0
 800620c:	d1fb      	bne.n	8006206 <strlen+0x2>
 800620e:	1a18      	subs	r0, r3, r0
 8006210:	3801      	subs	r0, #1
 8006212:	4770      	bx	lr

08006214 <Reset_Handler>:
 8006214:	2100      	movs	r1, #0
 8006216:	e003      	b.n	8006220 <LoopCopyDataInit>

08006218 <CopyDataInit>:
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <LoopFillZerobss+0x14>)
 800621a:	585b      	ldr	r3, [r3, r1]
 800621c:	5043      	str	r3, [r0, r1]
 800621e:	3104      	adds	r1, #4

08006220 <LoopCopyDataInit>:
 8006220:	480a      	ldr	r0, [pc, #40]	; (800624c <LoopFillZerobss+0x18>)
 8006222:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <LoopFillZerobss+0x1c>)
 8006224:	1842      	adds	r2, r0, r1
 8006226:	429a      	cmp	r2, r3
 8006228:	d3f6      	bcc.n	8006218 <CopyDataInit>
 800622a:	4a0a      	ldr	r2, [pc, #40]	; (8006254 <LoopFillZerobss+0x20>)
 800622c:	e002      	b.n	8006234 <LoopFillZerobss>

0800622e <FillZerobss>:
 800622e:	2300      	movs	r3, #0
 8006230:	f842 3b04 	str.w	r3, [r2], #4

08006234 <LoopFillZerobss>:
 8006234:	4b08      	ldr	r3, [pc, #32]	; (8006258 <LoopFillZerobss+0x24>)
 8006236:	429a      	cmp	r2, r3
 8006238:	d3f9      	bcc.n	800622e <FillZerobss>
 800623a:	f7f9 fffd 	bl	8000238 <SystemInit>
 800623e:	f000 ff13 	bl	8007068 <__libc_init_array>
 8006242:	f000 fc89 	bl	8006b58 <main>
 8006246:	4770      	bx	lr
 8006248:	0800851c 	.word	0x0800851c
 800624c:	20000000 	.word	0x20000000
 8006250:	20000090 	.word	0x20000090
 8006254:	20000094 	.word	0x20000094
 8006258:	20000aa8 	.word	0x20000aa8

0800625c <ADC1_2_IRQHandler>:
 800625c:	e7fe      	b.n	800625c <ADC1_2_IRQHandler>

0800625e <std_msgs::Time::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800625e:	6843      	ldr	r3, [r0, #4]
 8006260:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8006262:	6843      	ldr	r3, [r0, #4]
 8006264:	0a1b      	lsrs	r3, r3, #8
 8006266:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8006268:	88c3      	ldrh	r3, [r0, #6]
 800626a:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800626c:	79c3      	ldrb	r3, [r0, #7]
 800626e:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8006270:	6883      	ldr	r3, [r0, #8]
 8006272:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8006274:	6883      	ldr	r3, [r0, #8]
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800627a:	8943      	ldrh	r3, [r0, #10]
 800627c:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800627e:	7ac3      	ldrb	r3, [r0, #11]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8006280:	2008      	movs	r0, #8
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8006282:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 8006284:	4770      	bx	lr

08006286 <std_msgs::Time::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8006286:	780b      	ldrb	r3, [r1, #0]
 8006288:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800628a:	784a      	ldrb	r2, [r1, #1]
 800628c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006290:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8006292:	788a      	ldrb	r2, [r1, #2]
 8006294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006298:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800629a:	78ca      	ldrb	r2, [r1, #3]
 800629c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062a0:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80062a2:	790b      	ldrb	r3, [r1, #4]
 80062a4:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80062a6:	794a      	ldrb	r2, [r1, #5]
 80062a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062ac:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80062ae:	798a      	ldrb	r2, [r1, #6]
 80062b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062b4:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80062b6:	79ca      	ldrb	r2, [r1, #7]
 80062b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80062bc:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 80062be:	2008      	movs	r0, #8
 80062c0:	4770      	bx	lr
	...

080062c4 <std_msgs::Time::getType()>:

    const char * getType(){ return "std_msgs/Time"; };
 80062c4:	4800      	ldr	r0, [pc, #0]	; (80062c8 <std_msgs::Time::getType()+0x4>)
 80062c6:	4770      	bx	lr
 80062c8:	0800808c 	.word	0x0800808c

080062cc <std_msgs::Time::getMD5()>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80062cc:	4800      	ldr	r0, [pc, #0]	; (80062d0 <std_msgs::Time::getMD5()+0x4>)
 80062ce:	4770      	bx	lr
 80062d0:	0800809a 	.word	0x0800809a

080062d4 <rosserial_msgs::TopicInfo::getType()>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80062d4:	4800      	ldr	r0, [pc, #0]	; (80062d8 <rosserial_msgs::TopicInfo::getType()+0x4>)
 80062d6:	4770      	bx	lr
 80062d8:	080080bb 	.word	0x080080bb

080062dc <rosserial_msgs::TopicInfo::getMD5()>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80062dc:	4800      	ldr	r0, [pc, #0]	; (80062e0 <rosserial_msgs::TopicInfo::getMD5()+0x4>)
 80062de:	4770      	bx	lr
 80062e0:	080080d4 	.word	0x080080d4

080062e4 <rosserial_msgs::Log::getType()>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/Log"; };
 80062e4:	4800      	ldr	r0, [pc, #0]	; (80062e8 <rosserial_msgs::Log::getType()+0x4>)
 80062e6:	4770      	bx	lr
 80062e8:	080080f5 	.word	0x080080f5

080062ec <rosserial_msgs::Log::getMD5()>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80062ec:	4800      	ldr	r0, [pc, #0]	; (80062f0 <rosserial_msgs::Log::getMD5()+0x4>)
 80062ee:	4770      	bx	lr
 80062f0:	08008108 	.word	0x08008108

080062f4 <rosserial_msgs::RequestParamResponse::getType()>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 80062f4:	4800      	ldr	r0, [pc, #0]	; (80062f8 <rosserial_msgs::RequestParamResponse::getType()+0x4>)
 80062f6:	4770      	bx	lr
 80062f8:	08007cf4 	.word	0x08007cf4

080062fc <rosserial_msgs::RequestParamResponse::getMD5()>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80062fc:	4800      	ldr	r0, [pc, #0]	; (8006300 <rosserial_msgs::RequestParamResponse::getMD5()+0x4>)
 80062fe:	4770      	bx	lr
 8006300:	08008129 	.word	0x08008129

08006304 <std_msgs::String::getType()>:
      this->data = (char *)(inbuffer + offset-1);
      offset += length_data;
     return offset;
    }

    const char * getType(){ return "std_msgs/String"; };
 8006304:	4800      	ldr	r0, [pc, #0]	; (8006308 <std_msgs::String::getType()+0x4>)
 8006306:	4770      	bx	lr
 8006308:	0800814a 	.word	0x0800814a

0800630c <std_msgs::String::getMD5()>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 800630c:	4800      	ldr	r0, [pc, #0]	; (8006310 <std_msgs::String::getMD5()+0x4>)
 800630e:	4770      	bx	lr
 8006310:	0800815a 	.word	0x0800815a

08006314 <std_msgs::Empty::serialize(unsigned char*) const>:

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      return offset;
    }
 8006314:	2000      	movs	r0, #0
 8006316:	4770      	bx	lr

08006318 <std_msgs::Empty::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
     return offset;
    }
 8006318:	2000      	movs	r0, #0
 800631a:	4770      	bx	lr

0800631c <std_msgs::Empty::getType()>:

    const char * getType(){ return "std_msgs/Empty"; };
 800631c:	4800      	ldr	r0, [pc, #0]	; (8006320 <std_msgs::Empty::getType()+0x4>)
 800631e:	4770      	bx	lr
 8006320:	0800817b 	.word	0x0800817b

08006324 <std_msgs::Empty::getMD5()>:
    const char * getMD5(){ return "d41d8cd98f00b204e9800998ecf8427e"; };
 8006324:	4800      	ldr	r0, [pc, #0]	; (8006328 <std_msgs::Empty::getMD5()+0x4>)
 8006326:	4770      	bx	lr
 8006328:	0800818a 	.word	0x0800818a

0800632c <std_msgs::UInt16::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800632c:	8883      	ldrh	r3, [r0, #4]
 800632e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8006330:	8883      	ldrh	r3, [r0, #4]
      offset += sizeof(this->data);
      return offset;
    }
 8006332:	2002      	movs	r0, #2

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->data);
      return offset;
    }
 8006338:	4770      	bx	lr

0800633a <std_msgs::UInt16::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 800633a:	780b      	ldrb	r3, [r1, #0]
 800633c:	8083      	strh	r3, [r0, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800633e:	784a      	ldrb	r2, [r1, #1]
 8006340:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006344:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8006346:	2002      	movs	r0, #2
 8006348:	4770      	bx	lr
	...

0800634c <std_msgs::UInt16::getType()>:

    const char * getType(){ return "std_msgs/UInt16"; };
 800634c:	4800      	ldr	r0, [pc, #0]	; (8006350 <std_msgs::UInt16::getType()+0x4>)
 800634e:	4770      	bx	lr
 8006350:	080081ab 	.word	0x080081ab

08006354 <std_msgs::UInt16::getMD5()>:
    const char * getMD5(){ return "1df79edf208b629fe6b81923a544552d"; };
 8006354:	4800      	ldr	r0, [pc, #0]	; (8006358 <std_msgs::UInt16::getMD5()+0x4>)
 8006356:	4770      	bx	lr
 8006358:	080081bb 	.word	0x080081bb

0800635c <std_msgs::Int16::serialize(unsigned char*) const>:
      int offset = 0;
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 800635c:	8883      	ldrh	r3, [r0, #4]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
      offset += sizeof(this->data);
      return offset;
    }
 800635e:	2002      	movs	r0, #2
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8006360:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8006362:	0a1b      	lsrs	r3, r3, #8
 8006364:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->data);
      return offset;
    }
 8006366:	4770      	bx	lr

08006368 <std_msgs::Int16::deserialize(unsigned char*)>:
        uint16_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->data = u_data.real;
 8006368:	784a      	ldrb	r2, [r1, #1]
 800636a:	780b      	ldrb	r3, [r1, #0]
 800636c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006370:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 8006372:	2002      	movs	r0, #2
 8006374:	4770      	bx	lr
	...

08006378 <std_msgs::Int16::getType()>:

    const char * getType(){ return "std_msgs/Int16"; };
 8006378:	4800      	ldr	r0, [pc, #0]	; (800637c <std_msgs::Int16::getType()+0x4>)
 800637a:	4770      	bx	lr
 800637c:	080081dc 	.word	0x080081dc

08006380 <std_msgs::Int16::getMD5()>:
    const char * getMD5(){ return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8006380:	4800      	ldr	r0, [pc, #0]	; (8006384 <std_msgs::Int16::getMD5()+0x4>)
 8006382:	4770      	bx	lr
 8006384:	080081eb 	.word	0x080081eb

08006388 <ros::Subscriber<std_msgs::Empty>::callback(unsigned char*)>:
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 8006388:	6903      	ldr	r3, [r0, #16]
 800638a:	300c      	adds	r0, #12
 800638c:	4718      	bx	r3

0800638e <ros::Subscriber<std_msgs::Empty>::getEndpointType()>:
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 800638e:	6940      	ldr	r0, [r0, #20]
 8006390:	4770      	bx	lr
	...

08006394 <ros::Subscriber<std_msgs::Empty>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 8006394:	4800      	ldr	r0, [pc, #0]	; (8006398 <ros::Subscriber<std_msgs::Empty>::getMsgType()+0x4>)
 8006396:	4770      	bx	lr
 8006398:	0800817b 	.word	0x0800817b

0800639c <ros::Subscriber<std_msgs::Empty>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800639c:	4800      	ldr	r0, [pc, #0]	; (80063a0 <ros::Subscriber<std_msgs::Empty>::getMsgMD5()+0x4>)
 800639e:	4770      	bx	lr
 80063a0:	0800818a 	.word	0x0800818a

080063a4 <ros::Subscriber<std_msgs::UInt16>::callback(unsigned char*)>:
        endpoint_(endpoint)
      {
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	4605      	mov	r5, r0
        msg.deserialize(data);
 80063a8:	f100 040c 	add.w	r4, r0, #12
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7ff ffc4 	bl	800633a <std_msgs::UInt16::deserialize(unsigned char*)>
        this->cb_(msg);
 80063b2:	696b      	ldr	r3, [r5, #20]
 80063b4:	4620      	mov	r0, r4
      }
 80063b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 80063ba:	4718      	bx	r3

080063bc <ros::Subscriber<std_msgs::UInt16>::getEndpointType()>:
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 80063bc:	6980      	ldr	r0, [r0, #24]
 80063be:	4770      	bx	lr

080063c0 <ros::Subscriber<std_msgs::UInt16>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 80063c0:	4800      	ldr	r0, [pc, #0]	; (80063c4 <ros::Subscriber<std_msgs::UInt16>::getMsgType()+0x4>)
 80063c2:	4770      	bx	lr
 80063c4:	080081ab 	.word	0x080081ab

080063c8 <ros::Subscriber<std_msgs::UInt16>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 80063c8:	4800      	ldr	r0, [pc, #0]	; (80063cc <ros::Subscriber<std_msgs::UInt16>::getMsgMD5()+0x4>)
 80063ca:	4770      	bx	lr
 80063cc:	080081bb 	.word	0x080081bb

080063d0 <ros::Subscriber<std_msgs::Int16>::callback(unsigned char*)>:
        endpoint_(endpoint)
      {
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	4605      	mov	r5, r0
        msg.deserialize(data);
 80063d4:	f100 040c 	add.w	r4, r0, #12
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff ffc5 	bl	8006368 <std_msgs::Int16::deserialize(unsigned char*)>
        this->cb_(msg);
 80063de:	696b      	ldr	r3, [r5, #20]
 80063e0:	4620      	mov	r0, r4
      }
 80063e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 80063e6:	4718      	bx	r3

080063e8 <ros::Subscriber<std_msgs::Int16>::getEndpointType()>:
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 80063e8:	6980      	ldr	r0, [r0, #24]
 80063ea:	4770      	bx	lr

080063ec <ros::Subscriber<std_msgs::Int16>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 80063ec:	4800      	ldr	r0, [pc, #0]	; (80063f0 <ros::Subscriber<std_msgs::Int16>::getMsgType()+0x4>)
 80063ee:	4770      	bx	lr
 80063f0:	080081dc 	.word	0x080081dc

080063f4 <ros::Subscriber<std_msgs::Int16>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 80063f4:	4800      	ldr	r0, [pc, #0]	; (80063f8 <ros::Subscriber<std_msgs::Int16>::getMsgMD5()+0x4>)
 80063f6:	4770      	bx	lr
 80063f8:	080081eb 	.word	0x080081eb

080063fc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::connected()>:


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
      };
 80063fc:	f890 04f4 	ldrb.w	r0, [r0, #1268]	; 0x4f4
 8006400:	4770      	bx	lr

08006402 <std_msgs::String::serialize(unsigned char*) const>:
    String():
      data("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8006402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006404:	4606      	mov	r6, r0
    {
      int offset = 0;
      uint32_t length_data = strlen(this->data);
 8006406:	6840      	ldr	r0, [r0, #4]
    String():
      data("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8006408:	460c      	mov	r4, r1
    {
      int offset = 0;
      uint32_t length_data = strlen(this->data);
 800640a:	f7ff fefb 	bl	8006204 <strlen>
 800640e:	ab02      	add	r3, sp, #8
 8006410:	f843 0d04 	str.w	r0, [r3, #-4]!
 8006414:	4605      	mov	r5, r0
      memcpy(outbuffer + offset, &length_data, sizeof(uint32_t));
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4623      	mov	r3, r4
 800641a:	f843 0b04 	str.w	r0, [r3], #4
      offset += 4;
      memcpy(outbuffer + offset, this->data, length_data);
 800641e:	462a      	mov	r2, r5
 8006420:	6871      	ldr	r1, [r6, #4]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fe56 	bl	80070d4 <memcpy>
      offset += length_data;
      return offset;
    }
 8006428:	1d28      	adds	r0, r5, #4
 800642a:	b002      	add	sp, #8
 800642c:	bd70      	pop	{r4, r5, r6, pc}

0800642e <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800642e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 8006432:	7903      	ldrb	r3, [r0, #4]
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8006434:	4607      	mov	r7, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 8006436:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 8006438:	2300      	movs	r3, #0
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
 800643a:	461a      	mov	r2, r3
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800643c:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
 800643e:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 8006440:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 8006442:	70cb      	strb	r3, [r1, #3]
 8006444:	3104      	adds	r1, #4
      for( uint8_t i = 0; i < ints_length; i++){
 8006446:	793d      	ldrb	r5, [r7, #4]
 8006448:	1c50      	adds	r0, r2, #1
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	4295      	cmp	r5, r2
 800644e:	eba1 0304 	sub.w	r3, r1, r4
 8006452:	f101 0104 	add.w	r1, r1, #4
 8006456:	d90f      	bls.n	8006478 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x4a>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800645e:	0a1a      	lsrs	r2, r3, #8
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8006460:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8006464:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8006468:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800646a:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800646c:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8006470:	f801 3c01 	strb.w	r3, [r1, #-1]
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < ints_length; i++){
 8006474:	4602      	mov	r2, r0
 8006476:	e7e6      	b.n	8006446 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x18>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 8006478:	7c3a      	ldrb	r2, [r7, #16]
      *(outbuffer + offset++) = 0;
 800647a:	18e1      	adds	r1, r4, r3
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800647c:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 800647e:	2200      	movs	r2, #0
 8006480:	3304      	adds	r3, #4
 8006482:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 8006484:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 8006486:	70ca      	strb	r2, [r1, #3]
 8006488:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 800648a:	7c38      	ldrb	r0, [r7, #16]
 800648c:	1c51      	adds	r1, r2, #1
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	4290      	cmp	r0, r2
 8006492:	eba3 0604 	sub.w	r6, r3, r4
 8006496:	f103 0304 	add.w	r3, r3, #4
 800649a:	d90f      	bls.n	80064bc <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x8e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800649c:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800649e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80064a2:	0a10      	lsrs	r0, r2, #8
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80064a4:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80064a8:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80064ac:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80064ae:	0e12      	lsrs	r2, r2, #24
 80064b0:	f803 2c01 	strb.w	r2, [r3, #-1]
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80064b4:	f803 0c02 	strb.w	r0, [r3, #-2]
      }
      *(outbuffer + offset++) = floats_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < floats_length; i++){
 80064b8:	460a      	mov	r2, r1
 80064ba:	e7e6      	b.n	800648a <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x5c>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 80064bc:	7f3b      	ldrb	r3, [r7, #28]
      *(outbuffer + offset++) = 0;
 80064be:	19a2      	adds	r2, r4, r6
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 80064c0:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 80064c6:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 80064c8:	3604      	adds	r6, #4
 80064ca:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 80064cc:	7f3a      	ldrb	r2, [r7, #28]
 80064ce:	b2dd      	uxtb	r5, r3
 80064d0:	42aa      	cmp	r2, r5
 80064d2:	f103 0901 	add.w	r9, r3, #1
 80064d6:	d915      	bls.n	8006504 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0xd6>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064de:	f7ff fe91 	bl	8006204 <strlen>
 80064e2:	4680      	mov	r8, r0
 80064e4:	ab02      	add	r3, sp, #8
 80064e6:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 80064ea:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80064ec:	4642      	mov	r2, r8
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_stringsi = strlen(this->strings[i]);
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 80064ee:	51a0      	str	r0, [r4, r6]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	3604      	adds	r6, #4
 80064f4:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 80064f8:	19a0      	adds	r0, r4, r6
 80064fa:	f000 fdeb 	bl	80070d4 <memcpy>
      offset += length_stringsi;
 80064fe:	4446      	add	r6, r8
      }
      *(outbuffer + offset++) = strings_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
 8006500:	464b      	mov	r3, r9
 8006502:	e7e3      	b.n	80064cc <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x9e>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
 8006504:	4630      	mov	r0, r6
 8006506:	b003      	add	sp, #12
 8006508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800650c <rosserial_msgs::Log::serialize(unsigned char*) const>:
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800650c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800650e:	7903      	ldrb	r3, [r0, #4]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8006510:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8006512:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 8006514:	6880      	ldr	r0, [r0, #8]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8006516:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 8006518:	f7ff fe74 	bl	8006204 <strlen>
 800651c:	4604      	mov	r4, r0
 800651e:	ab02      	add	r3, sp, #8
 8006520:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 8006524:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 8006526:	4622      	mov	r2, r4
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 8006528:	f8c5 0001 	str.w	r0, [r5, #1]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800652c:	68b1      	ldr	r1, [r6, #8]
 800652e:	1d68      	adds	r0, r5, #5
 8006530:	f000 fdd0 	bl	80070d4 <memcpy>
      offset += length_msg;
      return offset;
    }
 8006534:	1d60      	adds	r0, r4, #5
 8006536:	b002      	add	sp, #8
 8006538:	bd70      	pop	{r4, r5, r6, pc}

0800653a <rosserial_msgs::TopicInfo::serialize(unsigned char*) const>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800653a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800653e:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8006540:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8006542:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8006544:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 8006546:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8006548:	0a1b      	lsrs	r3, r3, #8
 800654a:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
 800654c:	6880      	ldr	r0, [r0, #8]
 800654e:	f7ff fe59 	bl	8006204 <strlen>
 8006552:	4604      	mov	r4, r0
 8006554:	ab04      	add	r3, sp, #16
 8006556:	f843 0d0c 	str.w	r0, [r3, #-12]!
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800655a:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800655c:	4622      	mov	r2, r4
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800655e:	f8c5 0002 	str.w	r0, [r5, #2]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8006562:	68b1      	ldr	r1, [r6, #8]
 8006564:	1da8      	adds	r0, r5, #6
 8006566:	f000 fdb5 	bl	80070d4 <memcpy>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
 800656a:	68f0      	ldr	r0, [r6, #12]
 800656c:	f7ff fe4a 	bl	8006204 <strlen>
 8006570:	4607      	mov	r7, r0
 8006572:	ab04      	add	r3, sp, #16
 8006574:	f843 0d08 	str.w	r0, [r3, #-8]!
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 8006578:	6818      	ldr	r0, [r3, #0]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
      offset += length_topic_name;
 800657a:	f104 0806 	add.w	r8, r4, #6
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800657e:	f845 0008 	str.w	r0, [r5, r8]
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8006582:	340a      	adds	r4, #10
 8006584:	463a      	mov	r2, r7
 8006586:	68f1      	ldr	r1, [r6, #12]
 8006588:	1928      	adds	r0, r5, r4
 800658a:	f000 fda3 	bl	80070d4 <memcpy>
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
 800658e:	6930      	ldr	r0, [r6, #16]
 8006590:	f7ff fe38 	bl	8006204 <strlen>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
 8006594:	443c      	add	r4, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 8006596:	4607      	mov	r7, r0
 8006598:	ab04      	add	r3, sp, #16
 800659a:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800659e:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80065a0:	463a      	mov	r2, r7
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 80065a2:	5128      	str	r0, [r5, r4]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80065a4:	3404      	adds	r4, #4
 80065a6:	1928      	adds	r0, r5, r4
 80065a8:	6931      	ldr	r1, [r6, #16]
 80065aa:	f000 fd93 	bl	80070d4 <memcpy>
      offset += length_md5sum;
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80065ae:	6973      	ldr	r3, [r6, #20]
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
      offset += length_md5sum;
 80065b0:	1938      	adds	r0, r7, r4
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80065b2:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80065b4:	0a1a      	lsrs	r2, r3, #8
 80065b6:	4405      	add	r5, r0
 80065b8:	706a      	strb	r2, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }
 80065ba:	3004      	adds	r0, #4
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80065bc:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80065be:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80065c0:	70aa      	strb	r2, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80065c2:	70eb      	strb	r3, [r5, #3]
      offset += sizeof(this->buffer_size);
      return offset;
    }
 80065c4:	b004      	add	sp, #16
 80065c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065ca <rosserial_msgs::Log::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80065ca:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80065cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80065ce:	f813 2b01 	ldrb.w	r2, [r3], #1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80065d2:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80065d4:	7102      	strb	r2, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	1d4a      	adds	r2, r1, #5
 80065da:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	1d58      	adds	r0, r3, #5
 80065e0:	1a55      	subs	r5, r2, r1
 80065e2:	42a8      	cmp	r0, r5
 80065e4:	d904      	bls.n	80065f0 <rosserial_msgs::Log::deserialize(unsigned char*)+0x26>
          inbuffer[k-1]=inbuffer[k];
 80065e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80065ea:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80065ee:	e7f7      	b.n	80065e0 <rosserial_msgs::Log::deserialize(unsigned char*)+0x16>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 80065f0:	440b      	add	r3, r1
 80065f2:	2200      	movs	r2, #0
      this->msg = (char *)(inbuffer + offset-1);
 80065f4:	3104      	adds	r1, #4
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 80065f6:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 80065f8:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 80065fa:	b003      	add	sp, #12
 80065fc:	bd30      	pop	{r4, r5, pc}

080065fe <rosserial_msgs::TopicInfo::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80065fe:	780b      	ldrb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8006600:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8006602:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006604:	784a      	ldrb	r2, [r1, #1]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8006606:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8006608:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800660c:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800660e:	f8d1 0002 	ldr.w	r0, [r1, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 8006612:	b085      	sub	sp, #20
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 8006614:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8006616:	9d01      	ldr	r5, [sp, #4]
 8006618:	1d8a      	adds	r2, r1, #6
 800661a:	1dab      	adds	r3, r5, #6
 800661c:	1a50      	subs	r0, r2, r1
 800661e:	4283      	cmp	r3, r0
 8006620:	d904      	bls.n	800662c <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x2e>
          inbuffer[k-1]=inbuffer[k];
 8006622:	f812 0b01 	ldrb.w	r0, [r2], #1
 8006626:	f802 0c02 	strb.w	r0, [r2, #-2]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800662a:	e7f7      	b.n	800661c <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x1e>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 800662c:	194a      	adds	r2, r1, r5
 800662e:	2000      	movs	r0, #0
 8006630:	7150      	strb	r0, [r2, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 8006632:	1d4a      	adds	r2, r1, #5
 8006634:	60a2      	str	r2, [r4, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 8006636:	58c8      	ldr	r0, [r1, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8006638:	1d1a      	adds	r2, r3, #4
      }
      inbuffer[offset+length_topic_name-1]=0;
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800663a:	9002      	str	r0, [sp, #8]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800663c:	9b02      	ldr	r3, [sp, #8]
 800663e:	f105 000a 	add.w	r0, r5, #10
 8006642:	4413      	add	r3, r2
 8006644:	4408      	add	r0, r1
 8006646:	1a45      	subs	r5, r0, r1
 8006648:	42ab      	cmp	r3, r5
 800664a:	d904      	bls.n	8006656 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x58>
          inbuffer[k-1]=inbuffer[k];
 800664c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8006650:	f800 5c02 	strb.w	r5, [r0, #-2]
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8006654:	e7f7      	b.n	8006646 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x48>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
 8006656:	3a01      	subs	r2, #1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 8006658:	18c8      	adds	r0, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 800665a:	440a      	add	r2, r1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800665c:	2500      	movs	r5, #0
 800665e:	f800 5c01 	strb.w	r5, [r0, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 8006662:	60e2      	str	r2, [r4, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 8006664:	6800      	ldr	r0, [r0, #0]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8006666:	3304      	adds	r3, #4
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 8006668:	9003      	str	r0, [sp, #12]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800666a:	9803      	ldr	r0, [sp, #12]
 800666c:	18ca      	adds	r2, r1, r3
 800666e:	4418      	add	r0, r3
 8006670:	1a55      	subs	r5, r2, r1
 8006672:	42a8      	cmp	r0, r5
 8006674:	d904      	bls.n	8006680 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x82>
          inbuffer[k-1]=inbuffer[k];
 8006676:	f812 5b01 	ldrb.w	r5, [r2], #1
 800667a:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800667e:	e7f7      	b.n	8006670 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x72>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
      this->md5sum = (char *)(inbuffer + offset-1);
 8006680:	3b01      	subs	r3, #1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 8006682:	180d      	adds	r5, r1, r0
      this->md5sum = (char *)(inbuffer + offset-1);
 8006684:	440b      	add	r3, r1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 8006686:	2200      	movs	r2, #0
 8006688:	f805 2c01 	strb.w	r2, [r5, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 800668c:	6123      	str	r3, [r4, #16]
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800668e:	78ab      	ldrb	r3, [r5, #2]
 8006690:	786a      	ldrb	r2, [r5, #1]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006698:	5c0a      	ldrb	r2, [r1, r0]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800669a:	3004      	adds	r0, #4
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800669c:	4313      	orrs	r3, r2
 800669e:	78ea      	ldrb	r2, [r5, #3]
 80066a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80066a4:	6163      	str	r3, [r4, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 80066a6:	b005      	add	sp, #20
 80066a8:	bd30      	pop	{r4, r5, pc}

080066aa <std_msgs::String::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t length_data;
      memcpy(&length_data, (inbuffer + offset), sizeof(uint32_t));
 80066aa:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->data, length_data);
      offset += length_data;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80066ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ae:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint32_t length_data;
      memcpy(&length_data, (inbuffer + offset), sizeof(uint32_t));
 80066b0:	f853 0b04 	ldr.w	r0, [r3], #4
 80066b4:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80066b6:	9a01      	ldr	r2, [sp, #4]
 80066b8:	1d10      	adds	r0, r2, #4
 80066ba:	1a5d      	subs	r5, r3, r1
 80066bc:	42a8      	cmp	r0, r5
 80066be:	d904      	bls.n	80066ca <std_msgs::String::deserialize(unsigned char*)+0x20>
          inbuffer[k-1]=inbuffer[k];
 80066c0:	f813 5b01 	ldrb.w	r5, [r3], #1
 80066c4:	f803 5c02 	strb.w	r5, [r3, #-2]
    {
      int offset = 0;
      uint32_t length_data;
      memcpy(&length_data, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80066c8:	e7f7      	b.n	80066ba <std_msgs::String::deserialize(unsigned char*)+0x10>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_data-1]=0;
 80066ca:	440a      	add	r2, r1
 80066cc:	2300      	movs	r3, #0
      this->data = (char *)(inbuffer + offset-1);
 80066ce:	3103      	adds	r1, #3
      memcpy(&length_data, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_data; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_data-1]=0;
 80066d0:	70d3      	strb	r3, [r2, #3]
      this->data = (char *)(inbuffer + offset-1);
 80066d2:	6061      	str	r1, [r4, #4]
      offset += length_data;
     return offset;
    }
 80066d4:	b003      	add	sp, #12
 80066d6:	bd30      	pop	{r4, r5, pc}

080066d8 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 80066d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
 80066da:	780d      	ldrb	r5, [r1, #0]
      if(ints_lengthT > ints_length)
 80066dc:	7903      	ldrb	r3, [r0, #4]
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80066de:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 80066e0:	42ab      	cmp	r3, r5
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 80066e2:	460e      	mov	r6, r1
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 80066e4:	d204      	bcs.n	80066f0 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80066e6:	00a9      	lsls	r1, r5, #2
 80066e8:	68c0      	ldr	r0, [r0, #12]
 80066ea:	f000 fd9f 	bl	800722c <realloc>
 80066ee:	60e0      	str	r0, [r4, #12]
      offset += 3;
      ints_length = ints_lengthT;
 80066f0:	7125      	strb	r5, [r4, #4]
 80066f2:	1d32      	adds	r2, r6, #4
 80066f4:	2100      	movs	r1, #0
      for( uint8_t i = 0; i < ints_length; i++){
 80066f6:	7923      	ldrb	r3, [r4, #4]
 80066f8:	1c4f      	adds	r7, r1, #1
 80066fa:	b2c9      	uxtb	r1, r1
 80066fc:	428b      	cmp	r3, r1
 80066fe:	eba2 0506 	sub.w	r5, r2, r6
 8006702:	f102 0204 	add.w	r2, r2, #4
 8006706:	d914      	bls.n	8006732 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x5a>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
 8006708:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 800670c:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8006710:	041b      	lsls	r3, r3, #16
 8006712:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006716:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800671a:	4303      	orrs	r3, r0
 800671c:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8006720:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006724:	60a3      	str	r3, [r4, #8]
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8006726:	68a0      	ldr	r0, [r4, #8]
 8006728:	68e3      	ldr	r3, [r4, #12]
 800672a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 800672e:	4639      	mov	r1, r7
 8006730:	e7e1      	b.n	80066f6 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x1e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 8006732:	5d77      	ldrb	r7, [r6, r5]
      if(floats_lengthT > floats_length)
 8006734:	7c23      	ldrb	r3, [r4, #16]
 8006736:	42bb      	cmp	r3, r7
 8006738:	d204      	bcs.n	8006744 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x6c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800673a:	00b9      	lsls	r1, r7, #2
 800673c:	69a0      	ldr	r0, [r4, #24]
 800673e:	f000 fd75 	bl	800722c <realloc>
 8006742:	61a0      	str	r0, [r4, #24]
 8006744:	1d2b      	adds	r3, r5, #4
      offset += 3;
      floats_length = floats_lengthT;
 8006746:	7427      	strb	r7, [r4, #16]
 8006748:	4433      	add	r3, r6
 800674a:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < floats_length; i++){
 800674c:	7c21      	ldrb	r1, [r4, #16]
 800674e:	1c57      	adds	r7, r2, #1
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	4291      	cmp	r1, r2
 8006754:	eba3 0506 	sub.w	r5, r3, r6
 8006758:	f103 0304 	add.w	r3, r3, #4
 800675c:	d914      	bls.n	8006788 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xb0>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800675e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8006762:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 8006766:	0409      	lsls	r1, r1, #16
 8006768:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800676c:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8006770:	4301      	orrs	r1, r0
 8006772:	f813 0c01 	ldrb.w	r0, [r3, #-1]
      this->st_floats = u_st_floats.real;
 8006776:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800677a:	6161      	str	r1, [r4, #20]
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800677c:	6960      	ldr	r0, [r4, #20]
 800677e:	69a1      	ldr	r1, [r4, #24]
 8006780:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      uint8_t floats_lengthT = *(inbuffer + offset++);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      offset += 3;
      floats_length = floats_lengthT;
      for( uint8_t i = 0; i < floats_length; i++){
 8006784:	463a      	mov	r2, r7
 8006786:	e7e1      	b.n	800674c <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x74>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 8006788:	5d77      	ldrb	r7, [r6, r5]
      if(strings_lengthT > strings_length)
 800678a:	7f23      	ldrb	r3, [r4, #28]
 800678c:	42bb      	cmp	r3, r7
 800678e:	d204      	bcs.n	800679a <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xc2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8006790:	00b9      	lsls	r1, r7, #2
 8006792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006794:	f000 fd4a 	bl	800722c <realloc>
 8006798:	6260      	str	r0, [r4, #36]	; 0x24
      offset += 3;
 800679a:	1d2b      	adds	r3, r5, #4
      strings_length = strings_lengthT;
 800679c:	2500      	movs	r5, #0
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800679e:	46ae      	mov	lr, r5
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
 80067a0:	7727      	strb	r7, [r4, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 80067a2:	7f22      	ldrb	r2, [r4, #28]
 80067a4:	b2ef      	uxtb	r7, r5
 80067a6:	42ba      	cmp	r2, r7
 80067a8:	d919      	bls.n	80067de <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x106>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 80067aa:	58f0      	ldr	r0, [r6, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80067ac:	1d1a      	adds	r2, r3, #4
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 80067ae:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80067b0:	9b01      	ldr	r3, [sp, #4]
 80067b2:	18b1      	adds	r1, r6, r2
 80067b4:	4413      	add	r3, r2
 80067b6:	1b88      	subs	r0, r1, r6
 80067b8:	4283      	cmp	r3, r0
 80067ba:	d904      	bls.n	80067c6 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xee>
          inbuffer[k-1]=inbuffer[k];
 80067bc:	f811 0b01 	ldrb.w	r0, [r1], #1
 80067c0:	f801 0c02 	strb.w	r0, [r1, #-2]
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80067c4:	e7f7      	b.n	80067b6 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xde>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
 80067c6:	3a01      	subs	r2, #1
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 80067c8:	18f1      	adds	r1, r6, r3
      this->st_strings = (char *)(inbuffer + offset-1);
 80067ca:	4432      	add	r2, r6
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 80067cc:	f801 ec01 	strb.w	lr, [r1, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 80067d0:	6222      	str	r2, [r4, #32]
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80067d2:	6a21      	ldr	r1, [r4, #32]
 80067d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067d6:	3501      	adds	r5, #1
 80067d8:	f842 1027 	str.w	r1, [r2, r7, lsl #2]
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
 80067dc:	e7e1      	b.n	80067a2 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xca>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
 80067de:	4618      	mov	r0, r3
 80067e0:	b003      	add	sp, #12
 80067e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067e4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>:

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 80067e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  {
    public:
      ros::Time data;

    Time():
      data()
 80067e6:	4b08      	ldr	r3, [pc, #32]	; (8006808 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()+0x24>)
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 80067e8:	aa01      	add	r2, sp, #4
 80067ea:	9301      	str	r3, [sp, #4]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 80067ec:	2300      	movs	r3, #0
 80067ee:	9302      	str	r3, [sp, #8]
 80067f0:	9303      	str	r3, [sp, #12]
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	210a      	movs	r1, #10
 80067f6:	681b      	ldr	r3, [r3, #0]

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 80067f8:	4604      	mov	r4, r0
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 80067fa:	4798      	blx	r3
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 80067fc:	f7fa facc 	bl	8000d98 <millis>
        rt_time = hardware_.time();
 8006800:	60e0      	str	r0, [r4, #12]
      }
 8006802:	b004      	add	sp, #16
 8006804:	bd10      	pop	{r4, pc}
 8006806:	bf00      	nop
 8006808:	08007f78 	.word	0x08007f78

0800680c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()>:
          }
        }
        return false;
      }

      void negotiateTopics()
 800680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006810:	4604      	mov	r4, r0
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8006812:	4b2b      	ldr	r3, [pc, #172]	; (80068c0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xb4>)
 8006814:	b086      	sub	sp, #24
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xb8>)
 800681a:	2200      	movs	r2, #0
 800681c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006820:	9302      	str	r3, [sp, #8]
 8006822:	9303      	str	r3, [sp, #12]
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	9205      	str	r2, [sp, #20]
 8006828:	f200 4614 	addw	r6, r0, #1044	; 0x414
 800682c:	f500 658f 	add.w	r5, r0, #1144	; 0x478
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
 8006830:	f44f 7700 	mov.w	r7, #512	; 0x200
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
 8006834:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8006838:	b1bb      	cbz	r3, 800686a <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x5e>
          {
            ti.topic_id = publishers[i]->id_;
 800683a:	689a      	ldr	r2, [r3, #8]
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800683c:	6858      	ldr	r0, [r3, #4]
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
 800683e:	f8ad 2004 	strh.w	r2, [sp, #4]
            ti.topic_name = (char *) publishers[i]->topic_;
 8006842:	681a      	ldr	r2, [r3, #0]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 8006844:	6803      	ldr	r3, [r0, #0]
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
 8006846:	9202      	str	r2, [sp, #8]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	4798      	blx	r3
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800684c:	6833      	ldr	r3, [r6, #0]
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800684e:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8006850:	6858      	ldr	r0, [r3, #4]
 8006852:	6803      	ldr	r3, [r0, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	4798      	blx	r3
 8006858:	6831      	ldr	r1, [r6, #0]
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
 800685a:	6823      	ldr	r3, [r4, #0]
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800685c:	9004      	str	r0, [sp, #16]
            ti.buffer_size = OUTPUT_SIZE;
 800685e:	9705      	str	r7, [sp, #20]
            publish( publishers[i]->getEndpointType(), &ti );
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	466a      	mov	r2, sp
 8006864:	6909      	ldr	r1, [r1, #16]
 8006866:	4620      	mov	r0, r4
 8006868:	4798      	blx	r3

      void negotiateTopics()
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
 800686a:	42ae      	cmp	r6, r5
 800686c:	d1e2      	bne.n	8006834 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x28>
 800686e:	f204 46dc 	addw	r6, r4, #1244	; 0x4dc
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 8006872:	f44f 7700 	mov.w	r7, #512	; 0x200
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
 8006876:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800687a:	b1c8      	cbz	r0, 80068b0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xa4>
          {
            ti.topic_id = subscribers[i]->id_;
 800687c:	6843      	ldr	r3, [r0, #4]
 800687e:	f8ad 3004 	strh.w	r3, [sp, #4]
            ti.topic_name = (char *) subscribers[i]->topic_;
 8006882:	6883      	ldr	r3, [r0, #8]
 8006884:	9302      	str	r3, [sp, #8]
            ti.message_type = (char *) subscribers[i]->getMsgType();
 8006886:	6803      	ldr	r3, [r0, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4798      	blx	r3
 800688c:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800688e:	6828      	ldr	r0, [r5, #0]
 8006890:	6803      	ldr	r3, [r0, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	4798      	blx	r3
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 8006896:	6823      	ldr	r3, [r4, #0]
          if(subscribers[i] != 0) // non-empty slot
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8006898:	9004      	str	r0, [sp, #16]
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800689a:	6828      	ldr	r0, [r5, #0]
 800689c:	f8d3 8000 	ldr.w	r8, [r3]
 80068a0:	6803      	ldr	r3, [r0, #0]
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 80068a2:	9705      	str	r7, [sp, #20]
            publish( subscribers[i]->getEndpointType(), &ti );
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4798      	blx	r3
 80068a8:	466a      	mov	r2, sp
 80068aa:	4601      	mov	r1, r0
 80068ac:	4620      	mov	r0, r4
 80068ae:	47c0      	blx	r8
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
 80068b0:	42ae      	cmp	r6, r5
 80068b2:	d1e0      	bne.n	8006876 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x6a>
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
          }
        }
        configured_ = true;
 80068b4:	2301      	movs	r3, #1
 80068b6:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
      }
 80068ba:	b006      	add	sp, #24
 80068bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068c0:	08007f90 	.word	0x08007f90
 80068c4:	08008271 	.word	0x08008271

080068c8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)>:
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
        rt_time = hardware_.time();
      }

      void syncTime(uint8_t * data)
 80068c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80068ca:	4b1c      	ldr	r3, [pc, #112]	; (800693c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x74>)
 80068cc:	4604      	mov	r4, r0
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	2300      	movs	r3, #0
 80068d2:	9302      	str	r3, [sp, #8]
 80068d4:	9303      	str	r3, [sp, #12]
 80068d6:	460d      	mov	r5, r1
 80068d8:	f7fa fa5e 	bl	8000d98 <millis>
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 80068dc:	68e2      	ldr	r2, [r4, #12]

        t.deserialize(data);
 80068de:	4629      	mov	r1, r5
      }

      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 80068e0:	1a86      	subs	r6, r0, r2

        t.deserialize(data);
        t.data.sec += offset/1000;
 80068e2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
 80068e6:	a801      	add	r0, sp, #4
 80068e8:	f7ff fccd 	bl	8006286 <std_msgs::Time::deserialize(unsigned char*)>
        t.data.sec += offset/1000;
 80068ec:	fbb6 f2f5 	udiv	r2, r6, r5
 80068f0:	9b02      	ldr	r3, [sp, #8]
 80068f2:	4413      	add	r3, r2
        t.data.nsec += (offset%1000)*1000000UL;
 80068f4:	fb05 6212 	mls	r2, r5, r2, r6
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
        t.data.sec += offset/1000;
 80068f8:	9302      	str	r3, [sp, #8]
        t.data.nsec += (offset%1000)*1000000UL;
 80068fa:	4e11      	ldr	r6, [pc, #68]	; (8006940 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x78>)
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	fb06 3202 	mla	r2, r6, r2, r3
 8006902:	9203      	str	r2, [sp, #12]
 8006904:	f7fa fa48 	bl	8000d98 <millis>
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 8006908:	fbb0 f3f5 	udiv	r3, r0, r5
 800690c:	9a02      	ldr	r2, [sp, #8]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800690e:	9903      	ldr	r1, [sp, #12]
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 8006910:	3a01      	subs	r2, #1
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	6122      	str	r2, [r4, #16]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 8006916:	4a0b      	ldr	r2, [pc, #44]	; (8006944 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x7c>)
 8006918:	fb05 0013 	mls	r0, r5, r3, r0
 800691c:	440a      	add	r2, r1
 800691e:	4621      	mov	r1, r4
 8006920:	fb06 2310 	mls	r3, r6, r0, r2
        normalizeSecNSec(sec_offset, nsec_offset);
 8006924:	f104 0010 	add.w	r0, r4, #16

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 8006928:	f841 3f14 	str.w	r3, [r1, #20]!
        normalizeSecNSec(sec_offset, nsec_offset);
 800692c:	f7fe f8c2 	bl	8004ab4 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 8006930:	f7fa fa32 	bl	8000d98 <millis>
        t.deserialize(data);
        t.data.sec += offset/1000;
        t.data.nsec += (offset%1000)*1000000UL;

        this->setNow(t.data);
        last_sync_receive_time = hardware_.time();
 8006934:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
      }
 8006938:	b004      	add	sp, #16
 800693a:	bd70      	pop	{r4, r5, r6, pc}
 800693c:	08007f78 	.word	0x08007f78
 8006940:	000f4240 	.word	0x000f4240
 8006944:	3b9aca00 	.word	0x3b9aca00

08006948 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>:
      /* This function goes in your loop() function, it handles
       *  serial input and callbacks for subscribers.
       */


      virtual int spinOnce(){
 8006948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800694c:	4604      	mov	r4, r0
 800694e:	f7fa fa23 	bl	8000d98 <millis>

        /* restart if timed out */
        uint32_t c_time = hardware_.time();
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 8006952:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8006956:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 800695a:	4606      	mov	r6, r0
 800695c:	1ac3      	subs	r3, r0, r3
 800695e:	4293      	cmp	r3, r2
            configured_ = false;
 8006960:	bf84      	itt	hi
 8006962:	2300      	movhi	r3, #0
 8006964:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
         }

        /* reset if message has timed out */
        if ( mode_ != MODE_FIRST_FF){
 8006968:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 800696c:	b133      	cbz	r3, 800697c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x34>
          if (c_time > last_msg_timeout_time){
 800696e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8006972:	4283      	cmp	r3, r0
            mode_ = MODE_FIRST_FF;
 8006974:	bf3c      	itt	cc
 8006976:	2300      	movcc	r3, #0
 8006978:	f8c4 34e0 	strcc.w	r3, [r4, #1248]	; 0x4e0
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }

    int read(){
      if(USART_CNTIN == USART_CNTOUT)
 800697c:	4f74      	ldr	r7, [pc, #464]	; (8006b50 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x208>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800697e:	f04f 0800 	mov.w	r8, #0
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
              }else{
                if(subscribers[topic_-100])
                  subscribers[topic_-100]->callback( message_in );
 8006982:	f104 0918 	add.w	r9, r4, #24
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	f000 80cc 	beq.w	8006b28 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1e0>
        return -1;
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 8006990:	683b      	ldr	r3, [r7, #0]
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 8006992:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
 8006996:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800699a:	891b      	ldrh	r3, [r3, #8]
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800699c:	683a      	ldr	r2, [r7, #0]

    int read(){
      if(USART_CNTIN == USART_CNTOUT)
        return -1;
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800699e:	b29b      	uxth	r3, r3
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 80069a0:	3201      	adds	r2, #1
 80069a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a6:	603a      	str	r2, [r7, #0]
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 80069a8:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 80069ac:	2d07      	cmp	r5, #7
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 80069ae:	441a      	add	r2, r3
 80069b0:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 80069b4:	d10f      	bne.n	80069d6 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x8e>
            message_in[index_++] = data;
 80069b6:	f8d4 24ec 	ldr.w	r2, [r4, #1260]	; 0x4ec
 80069ba:	1c51      	adds	r1, r2, #1
 80069bc:	4422      	add	r2, r4
 80069be:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
 80069c2:	7613      	strb	r3, [r2, #24]
            bytes_--;
 80069c4:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 80069c8:	3b01      	subs	r3, #1
 80069ca:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1d9      	bne.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              mode_ = MODE_MSG_CHECKSUM;
 80069d2:	2308      	movs	r3, #8
 80069d4:	e01a      	b.n	8006a0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
          }else if( mode_ == MODE_FIRST_FF ){
 80069d6:	b9a5      	cbnz	r5, 8006a02 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xba>
            if(data == 0xff){
 80069d8:	2bff      	cmp	r3, #255	; 0xff
 80069da:	d107      	bne.n	80069ec <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xa4>
              mode_++;
 80069dc:	2301      	movs	r3, #1
 80069de:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 80069e2:	f106 0314 	add.w	r3, r6, #20
 80069e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
 80069ea:	e7cc      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 80069ec:	f7fa f9d4 	bl	8000d98 <millis>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 80069f0:	1b80      	subs	r0, r0, r6
 80069f2:	2805      	cmp	r0, #5
 80069f4:	d9c7      	bls.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
 80069f6:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
              return -2;
 80069fa:	f06f 0001 	mvn.w	r0, #1
 80069fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
 8006a02:	2d01      	cmp	r5, #1
 8006a04:	d10f      	bne.n	8006a26 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xde>
            if(data == PROTOCOL_VER){
 8006a06:	2bfe      	cmp	r3, #254	; 0xfe
 8006a08:	d103      	bne.n	8006a12 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xca>
              mode_++;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8006a10:	e7b9      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }else{
              mode_ = MODE_FIRST_FF;
              if (configured_ == false)
 8006a12:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
            if(data == PROTOCOL_VER){
              mode_++;
            }else{
              mode_ = MODE_FIRST_FF;
 8006a16:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
              if (configured_ == false)
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1b3      	bne.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff fee0 	bl	80067e4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
 8006a24:	e7af      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 8006a26:	2d02      	cmp	r5, #2
 8006a28:	d105      	bne.n	8006a36 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xee>
            bytes_ = data;
 8006a2a:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
            index_ = 0;
 8006a2e:	f8c4 84ec 	str.w	r8, [r4, #1260]	; 0x4ec
            mode_++;
 8006a32:	2203      	movs	r2, #3
 8006a34:	e020      	b.n	8006a78 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x130>
            checksum_ = data;               /* first byte for calculating size checksum */
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 8006a36:	2d03      	cmp	r5, #3
 8006a38:	d107      	bne.n	8006a4a <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x102>
            bytes_ += data<<8;
 8006a3a:	f8d4 24e4 	ldr.w	r2, [r4, #1252]	; 0x4e4
 8006a3e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8006a42:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
	    mode_++;
 8006a46:	2304      	movs	r3, #4
 8006a48:	e7e0      	b.n	8006a0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 8006a4a:	2d04      	cmp	r5, #4
 8006a4c:	d10f      	bne.n	8006a6e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x126>
            if( (checksum_%256) == 255)
 8006a4e:	4b41      	ldr	r3, [pc, #260]	; (8006b54 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x20c>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bfbe      	ittt	lt
 8006a56:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8006a5a:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 8006a5e:	3301      	addlt	r3, #1
 8006a60:	2bff      	cmp	r3, #255	; 0xff
 8006a62:	d101      	bne.n	8006a68 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x120>
	      mode_++;
 8006a64:	2305      	movs	r3, #5
 8006a66:	e7d1      	b.n	8006a0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
	    else
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8006a68:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
 8006a6c:	e78b      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 8006a6e:	2d05      	cmp	r5, #5
 8006a70:	d107      	bne.n	8006a82 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x13a>
            topic_ = data;
 8006a72:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            mode_++;
 8006a76:	2206      	movs	r2, #6
 8006a78:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
            checksum_ = data;               /* first byte included in checksum */
 8006a7c:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
 8006a80:	e781      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 8006a82:	2d06      	cmp	r5, #6
 8006a84:	d10b      	bne.n	8006a9e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x156>
            topic_ += data<<8;
 8006a86:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
 8006a8a:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8006a8e:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            mode_ = MODE_MESSAGE;
 8006a92:	2307      	movs	r3, #7
 8006a94:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
            if(bytes_ == 0)
 8006a98:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 8006a9c:	e797      	b.n	80069ce <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x86>
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 8006a9e:	2d08      	cmp	r5, #8
 8006aa0:	f47f af71 	bne.w	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
 8006aa4:	4b2b      	ldr	r3, [pc, #172]	; (8006b54 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x20c>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 8006aa6:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
            if( (checksum_%256) == 255){
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	bfbe      	ittt	lt
 8006ab0:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8006ab4:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 8006ab8:	3301      	addlt	r3, #1
 8006aba:	2bff      	cmp	r3, #255	; 0xff
 8006abc:	f47f af63 	bne.w	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 8006ac0:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 8006ac4:	b96b      	cbnz	r3, 8006ae2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x19a>
                requestSyncTime();
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7ff fe8c 	bl	80067e4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
                negotiateTopics();
 8006acc:	4620      	mov	r0, r4
 8006ace:	f7ff fe9d 	bl	800680c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()>
                last_sync_time = c_time;
 8006ad2:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
                last_sync_receive_time = c_time;
 8006ad6:	f8c4 64fc 	str.w	r6, [r4, #1276]	; 0x4fc
                return -1;
 8006ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
              }else if(topic_ == TopicInfo::ID_TIME){
 8006ae2:	2b0a      	cmp	r3, #10
 8006ae4:	d104      	bne.n	8006af0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1a8>
                syncTime(message_in);
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f7ff feed 	bl	80068c8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)>
 8006aee:	e74a      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 8006af0:	2b06      	cmp	r3, #6
 8006af2:	d108      	bne.n	8006b06 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1be>
                  req_param_resp.deserialize(message_in);
 8006af4:	4649      	mov	r1, r9
 8006af6:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
 8006afa:	f7ff fded 	bl	80066d8 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>
                  param_recieved= true;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 8006b04:	e73f      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 8006b06:	2b0b      	cmp	r3, #11
 8006b08:	d102      	bne.n	8006b10 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1c8>
                  configured_ = false;
 8006b0a:	f884 84f4 	strb.w	r8, [r4, #1268]	; 0x4f4
 8006b0e:	e73a      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else{
                if(subscribers[topic_-100])
 8006b10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b14:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	f43f af34 	beq.w	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
                  subscribers[topic_-100]->callback( message_in );
 8006b1e:	6803      	ldr	r3, [r0, #0]
 8006b20:	4649      	mov	r1, r9
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4798      	blx	r3
 8006b26:	e72e      	b.n	8006986 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }
          }
        }

        /* occasionally sync time */
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 8006b28:	f894 04f4 	ldrb.w	r0, [r4, #1268]	; 0x4f4
 8006b2c:	b170      	cbz	r0, 8006b4c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x204>
 8006b2e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006b32:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 8006b36:	1af3      	subs	r3, r6, r3
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d904      	bls.n	8006b46 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1fe>
          requestSyncTime();
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff fe51 	bl	80067e4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
          last_sync_time = c_time;
 8006b42:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
        }

        return 0;
 8006b46:	2000      	movs	r0, #0
 8006b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
 8006b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b50:	200000b8 	.word	0x200000b8
 8006b54:	800000ff 	.word	0x800000ff

08006b58 <main>:
ros::Publisher chatter("encoder", &str_msg);

char hello[25];


int main(void){
 8006b58:	b508      	push	{r3, lr}
  /* System Clocks Configuration */
  RCC_Configuration();
 8006b5a:	f7fa f923 	bl	8000da4 <RCC_Configuration>

  I2C1_Init();
 8006b5e:	f7f9 ffe5 	bl	8000b2c <I2C1_Init>
  SysTick_Init();
 8006b62:	f7fa f8ef 	bl	8000d44 <SysTick_Init>
  DEBUG_Init();
 8006b66:	f7f9 ffba 	bl	8000ade <DEBUG_Init>
  SERVO_Init();
 8006b6a:	f7f9 fefb 	bl	8000964 <SERVO_Init>
  MOTOR_Init();
 8006b6e:	f7f9 fd11 	bl	8000594 <MOTOR_Init>
  LED_Init();
 8006b72:	f7f9 ff71 	bl	8000a58 <LED_Init>
 

  //servo_set(0,90);
  //servo_set(1,90);

  led_set(0);
 8006b76:	2000      	movs	r0, #0
 8006b78:	f7f9 ffa6 	bl	8000ac8 <led_set>
  nh.subscribe(led_sub);
  nh.advertise(chatter);*/
  int cnt = 7000;
  int dir = 1;

  motor_set_speed(0, cnt, dir);
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f641 3158 	movw	r1, #7000	; 0x1b58
 8006b82:	2000      	movs	r0, #0
 8006b84:	f7f9 fc04 	bl	8000390 <motor_set_speed>
  motor_set_speed(1, cnt, dir);
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f641 3158 	movw	r1, #7000	; 0x1b58
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f7f9 fbfe 	bl	8000390 <motor_set_speed>
  motor_set_speed(2, cnt, dir);
 8006b94:	2201      	movs	r2, #1
 8006b96:	f641 3158 	movw	r1, #7000	; 0x1b58
 8006b9a:	2002      	movs	r0, #2
 8006b9c:	f7f9 fbf8 	bl	8000390 <motor_set_speed>
  motor_set_speed(3, cnt, dir);
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f641 3158 	movw	r1, #7000	; 0x1b58
 8006ba6:	2003      	movs	r0, #3
 8006ba8:	f7f9 fbf2 	bl	8000390 <motor_set_speed>

    sprintf(hello, "Speed is: %d",speed);
    str_msg.data = hello;
    chatter.publish( &str_msg );*/

    nh.spinOnce();
 8006bac:	4803      	ldr	r0, [pc, #12]	; (8006bbc <main+0x64>)
 8006bae:	f7ff fecb 	bl	8006948 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>


    delay(100);
 8006bb2:	2064      	movs	r0, #100	; 0x64
 8006bb4:	f7fa f8e6 	bl	8000d84 <delay>
 8006bb8:	e7f8      	b.n	8006bac <main+0x54>
 8006bba:	bf00      	nop
 8006bbc:	200004c0 	.word	0x200004c0

08006bc0 <_GLOBAL__sub_I_USART_FIFO>:

      /*
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {
 8006bc0:	4b41      	ldr	r3, [pc, #260]	; (8006cc8 <_GLOBAL__sub_I_USART_FIFO+0x108>)
 8006bc2:	4a42      	ldr	r2, [pc, #264]	; (8006ccc <_GLOBAL__sub_I_USART_FIFO+0x10c>)
  nh.logerror(str);
  while (1){
    debug_toggle();
    delay(100);
  }
}
 8006bc4:	b530      	push	{r4, r5, lr}
 8006bc6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
      USART_CNTOUT = 0;
    }
    ArduinoHardware()
    {
      /* Leonardo support */
      iostream = USART1;
 8006bca:	4a41      	ldr	r2, [pc, #260]	; (8006cd0 <_GLOBAL__sub_I_USART_FIFO+0x110>)
      char* * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8006bcc:	4941      	ldr	r1, [pc, #260]	; (8006cd4 <_GLOBAL__sub_I_USART_FIFO+0x114>)
 8006bce:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      baud_ = 115200;
 8006bd2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006bd6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      USART_CNTIN = 0;
 8006bda:	2200      	movs	r2, #0
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
      USART_CNTOUT = 0;
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8006be8:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8006bec:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
 8006bf0:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8006bf4:	f8c3 2928 	str.w	r2, [r3, #2344]	; 0x928
 8006bf8:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 8006bfc:	f8c3 2934 	str.w	r2, [r3, #2356]	; 0x934
 8006c00:	f603 011c 	addw	r1, r3, #2076	; 0x81c
 8006c04:	f503 6308 	add.w	r3, r3, #2176	; 0x880

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;
 8006c08:	f841 2f04 	str.w	r2, [r1, #4]!
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	d1fb      	bne.n	8006c08 <_GLOBAL__sub_I_USART_FIFO+0x48>
 8006c10:	4a31      	ldr	r2, [pc, #196]	; (8006cd8 <_GLOBAL__sub_I_USART_FIFO+0x118>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;
 8006c12:	2100      	movs	r1, #0
 8006c14:	f843 1f04 	str.w	r1, [r3, #4]!
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d1fb      	bne.n	8006c14 <_GLOBAL__sub_I_USART_FIFO+0x54>
 8006c1c:	2300      	movs	r3, #0
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;
 8006c1e:	4619      	mov	r1, r3
 8006c20:	482e      	ldr	r0, [pc, #184]	; (8006cdc <_GLOBAL__sub_I_USART_FIFO+0x11c>)
 8006c22:	18c2      	adds	r2, r0, r3
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8006c24:	3301      	adds	r3, #1
 8006c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	   message_in[i] = 0;
 8006c2a:	7611      	strb	r1, [r2, #24]
 8006c2c:	4d2b      	ldr	r5, [pc, #172]	; (8006cdc <_GLOBAL__sub_I_USART_FIFO+0x11c>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8006c2e:	d1f8      	bne.n	8006c22 <_GLOBAL__sub_I_USART_FIFO+0x62>
 8006c30:	2200      	movs	r2, #0
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
	   message_out[i] = 0;
 8006c32:	4614      	mov	r4, r2
 8006c34:	18a8      	adds	r0, r5, r2
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8006c36:	3201      	adds	r2, #1
 8006c38:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
	   message_out[i] = 0;
 8006c3c:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <_GLOBAL__sub_I_USART_FIFO+0x108>)
 8006c3e:	f04f 0100 	mov.w	r1, #0
 8006c42:	f880 4218 	strb.w	r4, [r0, #536]	; 0x218
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8006c46:	d1f5      	bne.n	8006c34 <_GLOBAL__sub_I_USART_FIFO+0x74>
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8006c48:	4a25      	ldr	r2, [pc, #148]	; (8006ce0 <_GLOBAL__sub_I_USART_FIFO+0x120>)
      {
        topic_ = topic_name;
 8006c4a:	4826      	ldr	r0, [pc, #152]	; (8006ce4 <_GLOBAL__sub_I_USART_FIFO+0x124>)
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8006c4c:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
      {
        topic_ = topic_name;
 8006c50:	f8c3 0940 	str.w	r0, [r3, #2368]	; 0x940
  {
    public:
      int16_t data;

    Int16():
      data(0)
 8006c54:	4a24      	ldr	r2, [pc, #144]	; (8006ce8 <_GLOBAL__sub_I_USART_FIFO+0x128>)
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8006c56:	4825      	ldr	r0, [pc, #148]	; (8006cec <_GLOBAL__sub_I_USART_FIFO+0x12c>)
 8006c58:	f8c3 2944 	str.w	r2, [r3, #2372]	; 0x944
 8006c5c:	f8c3 0954 	str.w	r0, [r3, #2388]	; 0x954
 8006c60:	4a23      	ldr	r2, [pc, #140]	; (8006cf0 <_GLOBAL__sub_I_USART_FIFO+0x130>)
  {
    public:
      uint16_t data;

    UInt16():
      data(0)
 8006c62:	4824      	ldr	r0, [pc, #144]	; (8006cf4 <_GLOBAL__sub_I_USART_FIFO+0x134>)
 8006c64:	f8c3 294c 	str.w	r2, [r3, #2380]	; 0x94c
 8006c68:	f8c3 0960 	str.w	r0, [r3, #2400]	; 0x960
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4822      	ldr	r0, [pc, #136]	; (8006cf8 <_GLOBAL__sub_I_USART_FIFO+0x138>)
 8006c70:	f8c3 2950 	str.w	r2, [r3, #2384]	; 0x950
 8006c74:	f8c3 296c 	str.w	r2, [r3, #2412]	; 0x96c
 8006c78:	f8c3 2984 	str.w	r2, [r3, #2436]	; 0x984
      {
        topic_ = topic_name;
 8006c7c:	4a1f      	ldr	r2, [pc, #124]	; (8006cfc <_GLOBAL__sub_I_USART_FIFO+0x13c>)
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8006c7e:	f8c3 0968 	str.w	r0, [r3, #2408]	; 0x968
      {
        topic_ = topic_name;
 8006c82:	481f      	ldr	r0, [pc, #124]	; (8006d00 <_GLOBAL__sub_I_USART_FIFO+0x140>)
 8006c84:	f8c3 2978 	str.w	r2, [r3, #2424]	; 0x978
  {
    public:
      const char* data;

    String():
      data("")
 8006c88:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <_GLOBAL__sub_I_USART_FIFO+0x144>)
 8006c8a:	f8c3 095c 	str.w	r0, [r3, #2396]	; 0x95c
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8006c8e:	481e      	ldr	r0, [pc, #120]	; (8006d08 <_GLOBAL__sub_I_USART_FIFO+0x148>)
 8006c90:	f8c3 2988 	str.w	r2, [r3, #2440]	; 0x988
 8006c94:	4a1d      	ldr	r2, [pc, #116]	; (8006d0c <_GLOBAL__sub_I_USART_FIFO+0x14c>)
 8006c96:	f8c3 0970 	str.w	r0, [r3, #2416]	; 0x970
  class Empty : public ros::Msg
  {
    public:

    Empty()
    {
 8006c9a:	481d      	ldr	r0, [pc, #116]	; (8006d10 <_GLOBAL__sub_I_USART_FIFO+0x150>)
 8006c9c:	f8c3 298c 	str.w	r2, [r3, #2444]	; 0x98c
  {
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};
 8006ca0:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <_GLOBAL__sub_I_USART_FIFO+0x154>)
 8006ca2:	f8c3 097c 	str.w	r0, [r3, #2428]	; 0x97c
 8006ca6:	481c      	ldr	r0, [pc, #112]	; (8006d18 <_GLOBAL__sub_I_USART_FIFO+0x158>)
 8006ca8:	f8c3 2990 	str.w	r2, [r3, #2448]	; 0x990
 8006cac:	f603 1288 	addw	r2, r3, #2440	; 0x988
 8006cb0:	f8a3 1948 	strh.w	r1, [r3, #2376]	; 0x948
 8006cb4:	f8a3 1964 	strh.w	r1, [r3, #2404]	; 0x964
 8006cb8:	f8c3 0980 	str.w	r0, [r3, #2432]	; 0x980
 8006cbc:	f8c3 2994 	str.w	r2, [r3, #2452]	; 0x994
 8006cc0:	f8c3 19a0 	str.w	r1, [r3, #2464]	; 0x9a0
 8006cc4:	bd30      	pop	{r4, r5, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200000b8 	.word	0x200000b8
 8006ccc:	08008038 	.word	0x08008038
 8006cd0:	40013800 	.word	0x40013800
 8006cd4:	08007fc0 	.word	0x08007fc0
 8006cd8:	2000099c 	.word	0x2000099c
 8006cdc:	200004c0 	.word	0x200004c0
 8006ce0:	0800804c 	.word	0x0800804c
 8006ce4:	08008272 	.word	0x08008272
 8006ce8:	08008020 	.word	0x08008020
 8006cec:	08008064 	.word	0x08008064
 8006cf0:	080048e5 	.word	0x080048e5
 8006cf4:	08008008 	.word	0x08008008
 8006cf8:	080048cd 	.word	0x080048cd
 8006cfc:	0800827e 	.word	0x0800827e
 8006d00:	08008278 	.word	0x08008278
 8006d04:	08007fd8 	.word	0x08007fd8
 8006d08:	0800807c 	.word	0x0800807c
 8006d0c:	08008271 	.word	0x08008271
 8006d10:	08007ff0 	.word	0x08007ff0
 8006d14:	08008282 	.word	0x08008282
 8006d18:	0800495d 	.word	0x0800495d

08006d1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::log(char, char const*)>:
      /********************************************************************
       * Logging
       */

    private:
      void log(char byte, const char * msg){
 8006d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
 8006d1e:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::log(char, char const*)+0x1c>)
        rosserial_msgs::Log l;
        l.level= byte;
 8006d20:	f88d 1008 	strb.w	r1, [sp, #8]
 8006d24:	9301      	str	r3, [sp, #4]
        l.msg = (char*)msg;
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006d26:	6803      	ldr	r3, [r0, #0]

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
        l.msg = (char*)msg;
 8006d28:	9203      	str	r2, [sp, #12]
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	aa01      	add	r2, sp, #4
 8006d2e:	2107      	movs	r1, #7
 8006d30:	4798      	blx	r3
      }
 8006d32:	b005      	add	sp, #20
 8006d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d38:	08007fa8 	.word	0x08007fa8

08006d3c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)>:
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
      {
        if(id >= 100 && !configured_)
 8006d3c:	2963      	cmp	r1, #99	; 0x63
          }
        }
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
 8006d3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d42:	4604      	mov	r4, r0
 8006d44:	460e      	mov	r6, r1
      {
        if(id >= 100 && !configured_)
 8006d46:	dd03      	ble.n	8006d50 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x14>
 8006d48:	f890 54f4 	ldrb.w	r5, [r0, #1268]	; 0x4f4
 8006d4c:	2d00      	cmp	r5, #0
 8006d4e:	d050      	beq.n	8006df2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xb6>
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 8006d50:	6813      	ldr	r3, [r2, #0]
 8006d52:	f204 211f 	addw	r1, r4, #543	; 0x21f
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3

        /* setup the header */
        message_out[0] = 0xff;
 8006d5c:	22ff      	movs	r2, #255	; 0xff
 8006d5e:	f884 2218 	strb.w	r2, [r4, #536]	; 0x218
        message_out[1] = PROTOCOL_VER;
 8006d62:	22fe      	movs	r2, #254	; 0xfe
      {
        if(id >= 100 && !configured_)
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 8006d64:	b283      	uxth	r3, r0

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
 8006d66:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 8006d6a:	b2c2      	uxtb	r2, r0
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
 8006d6c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006d70:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
	      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 8006d74:	4410      	add	r0, r2
 8006d76:	43c0      	mvns	r0, r0
        message_out[5] = (uint8_t) ((int16_t)id&255);
 8006d78:	f884 621d 	strb.w	r6, [r4, #541]	; 0x21d
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 8006d7c:	f346 2607 	sbfx	r6, r6, #8, #8
        uint16_t l = msg->serialize(message_out+7);

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 8006d80:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
	      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 8006d84:	f884 021c 	strb.w	r0, [r4, #540]	; 0x21c
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 8006d88:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
 8006d8c:	f504 7007 	add.w	r0, r4, #540	; 0x21c

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 8006d90:	2105      	movs	r1, #5
	      message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
 8006d92:	2200      	movs	r2, #0
        for(int i =5; i<l+7; i++)
 8006d94:	1d9e      	adds	r6, r3, #6
 8006d96:	42b1      	cmp	r1, r6
 8006d98:	dc04      	bgt.n	8006da4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x68>
          chk += message_out[i];
 8006d9a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 8006d9e:	3101      	adds	r1, #1
          chk += message_out[i];
 8006da0:	442a      	add	r2, r5
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 8006da2:	e7f8      	b.n	8006d96 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x5a>
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 8006da4:	43d2      	mvns	r2, r2
 8006da6:	f103 0608 	add.w	r6, r3, #8
 8006daa:	3307      	adds	r3, #7
 8006dac:	b2b6      	uxth	r6, r6
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4423      	add	r3, r4

        if( l <= OUTPUT_SIZE ){
 8006db2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 8006db6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

        if( l <= OUTPUT_SIZE ){
 8006dba:	d813      	bhi.n	8006de4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xa8>
          hardware_.write(message_out, l);
 8006dbc:	f504 7806 	add.w	r8, r4, #536	; 0x218
 8006dc0:	4635      	mov	r5, r6
 8006dc2:	4647      	mov	r7, r8
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
        while( !(USART1->SR & 0x00000040) );
 8006dc4:	f8df 9034 	ldr.w	r9, [pc, #52]	; 8006dfc <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xc0>
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
 8006dc8:	ebc8 0307 	rsb	r3, r8, r7
 8006dcc:	429e      	cmp	r6, r3
 8006dce:	dd10      	ble.n	8006df2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xb6>
        while( !(USART1->SR & 0x00000040) );
 8006dd0:	f8b9 3000 	ldrh.w	r3, [r9]
 8006dd4:	065b      	lsls	r3, r3, #25
 8006dd6:	d5fb      	bpl.n	8006dd0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x94>
        USART_SendData(iostream, data[i]);
 8006dd8:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006ddc:	6860      	ldr	r0, [r4, #4]
 8006dde:	f7fc fcb4 	bl	800374a <USART_SendData>
 8006de2:	e7f1      	b.n	8006dc8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x8c>
      }
      void logwarn(const char *msg){
        log(rosserial_msgs::Log::WARN, msg);
      }
      void logerror(const char*msg){
        log(rosserial_msgs::Log::ERROR, msg);
 8006de4:	4a04      	ldr	r2, [pc, #16]	; (8006df8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xbc>)
 8006de6:	2103      	movs	r1, #3
 8006de8:	4620      	mov	r0, r4
 8006dea:	f7ff ff97 	bl	8006d1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::log(char, char const*)>
        if( l <= OUTPUT_SIZE ){
          hardware_.write(message_out, l);
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
          return -1;
 8006dee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        }
      }
 8006df2:	4628      	mov	r0, r5
 8006df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006df8:	0800820c 	.word	0x0800820c
 8006dfc:	40013800 	.word	0x40013800

08006e00 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	4604      	mov	r4, r0
 8006e04:	4b02      	ldr	r3, [pc, #8]	; (8006e10 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
 8006e06:	6003      	str	r3, [r0, #0]
 8006e08:	f000 f8c0 	bl	8006f8c <__cxxabiv1::__class_type_info::~__class_type_info()>
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	bd10      	pop	{r4, pc}
 8006e10:	08008294 	.word	0x08008294

08006e14 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8006e14:	b510      	push	{r4, lr}
 8006e16:	4604      	mov	r4, r0
 8006e18:	f7ff fff2 	bl	8006e00 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f905 	bl	800702c <operator delete(void*)>
 8006e22:	4620      	mov	r0, r4
 8006e24:	bd10      	pop	{r4, pc}

08006e26 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8006e26:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2a:	460e      	mov	r6, r1
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4683      	mov	fp, r0
 8006e30:	4617      	mov	r7, r2
 8006e32:	4699      	mov	r9, r3
 8006e34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e36:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006e3a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006e3e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006e40:	f000 f86b 	bl	8006f1a <std::type_info::operator==(std::type_info const&) const>
 8006e44:	b178      	cbz	r0, 8006e66 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
 8006e46:	2e00      	cmp	r6, #0
 8006e48:	602c      	str	r4, [r5, #0]
 8006e4a:	712f      	strb	r7, [r5, #4]
 8006e4c:	db06      	blt.n	8006e5c <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x36>
 8006e4e:	4434      	add	r4, r6
 8006e50:	45a0      	cmp	r8, r4
 8006e52:	bf0c      	ite	eq
 8006e54:	2406      	moveq	r4, #6
 8006e56:	2401      	movne	r4, #1
 8006e58:	71ac      	strb	r4, [r5, #6]
 8006e5a:	e01e      	b.n	8006e9a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8006e5c:	3602      	adds	r6, #2
 8006e5e:	d11c      	bne.n	8006e9a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8006e60:	2301      	movs	r3, #1
 8006e62:	71ab      	strb	r3, [r5, #6]
 8006e64:	e019      	b.n	8006e9a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8006e66:	4544      	cmp	r4, r8
 8006e68:	d104      	bne.n	8006e74 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x4e>
 8006e6a:	4651      	mov	r1, sl
 8006e6c:	4658      	mov	r0, fp
 8006e6e:	f000 f854 	bl	8006f1a <std::type_info::operator==(std::type_info const&) const>
 8006e72:	b988      	cbnz	r0, 8006e98 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x72>
 8006e74:	f8db 0008 	ldr.w	r0, [fp, #8]
 8006e78:	463a      	mov	r2, r7
 8006e7a:	6803      	ldr	r3, [r0, #0]
 8006e7c:	950d      	str	r5, [sp, #52]	; 0x34
 8006e7e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006e82:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006e86:	940a      	str	r4, [sp, #40]	; 0x28
 8006e88:	69dc      	ldr	r4, [r3, #28]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	464b      	mov	r3, r9
 8006e8e:	46a4      	mov	ip, r4
 8006e90:	b001      	add	sp, #4
 8006e92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e96:	4760      	bx	ip
 8006e98:	716f      	strb	r7, [r5, #5]
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	b001      	add	sp, #4
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ea2 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8006ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea6:	9e06      	ldr	r6, [sp, #24]
 8006ea8:	4680      	mov	r8, r0
 8006eaa:	4296      	cmp	r6, r2
 8006eac:	460f      	mov	r7, r1
 8006eae:	4614      	mov	r4, r2
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	d103      	bne.n	8006ebc <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1a>
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	f000 f830 	bl	8006f1a <std::type_info::operator==(std::type_info const&) const>
 8006eba:	b958      	cbnz	r0, 8006ed4 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x32>
 8006ebc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	6803      	ldr	r3, [r0, #0]
 8006ec4:	9606      	str	r6, [sp, #24]
 8006ec6:	6a1e      	ldr	r6, [r3, #32]
 8006ec8:	4639      	mov	r1, r7
 8006eca:	462b      	mov	r3, r5
 8006ecc:	46b4      	mov	ip, r6
 8006ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed2:	4760      	bx	ip
 8006ed4:	2006      	movs	r0, #6
 8006ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006eda <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8006eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ede:	4604      	mov	r4, r0
 8006ee0:	460d      	mov	r5, r1
 8006ee2:	4616      	mov	r6, r2
 8006ee4:	461f      	mov	r7, r3
 8006ee6:	f000 f864 	bl	8006fb2 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
 8006eea:	b948      	cbnz	r0, 8006f00 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
 8006eec:	68a0      	ldr	r0, [r4, #8]
 8006eee:	4632      	mov	r2, r6
 8006ef0:	6803      	ldr	r3, [r0, #0]
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	699c      	ldr	r4, [r3, #24]
 8006ef6:	463b      	mov	r3, r7
 8006ef8:	46a4      	mov	ip, r4
 8006efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006efe:	4760      	bx	ip
 8006f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f04 <std::type_info::~type_info()>:
 8006f04:	4770      	bx	lr

08006f06 <std::type_info::__is_pointer_p() const>:
 8006f06:	2000      	movs	r0, #0
 8006f08:	4770      	bx	lr

08006f0a <std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	4770      	bx	lr

08006f0e <std::type_info::~type_info()>:
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	4604      	mov	r4, r0
 8006f12:	f000 f88b 	bl	800702c <operator delete(void*)>
 8006f16:	4620      	mov	r0, r4
 8006f18:	bd10      	pop	{r4, pc}

08006f1a <std::type_info::operator==(std::type_info const&) const>:
 8006f1a:	4281      	cmp	r1, r0
 8006f1c:	b508      	push	{r3, lr}
 8006f1e:	d00e      	beq.n	8006f3e <std::type_info::operator==(std::type_info const&) const+0x24>
 8006f20:	6840      	ldr	r0, [r0, #4]
 8006f22:	7803      	ldrb	r3, [r0, #0]
 8006f24:	2b2a      	cmp	r3, #42	; 0x2a
 8006f26:	d00c      	beq.n	8006f42 <std::type_info::operator==(std::type_info const&) const+0x28>
 8006f28:	6849      	ldr	r1, [r1, #4]
 8006f2a:	780b      	ldrb	r3, [r1, #0]
 8006f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f2e:	bf08      	it	eq
 8006f30:	3101      	addeq	r1, #1
 8006f32:	f7ff f95d 	bl	80061f0 <strcmp>
 8006f36:	fab0 f080 	clz	r0, r0
 8006f3a:	0940      	lsrs	r0, r0, #5
 8006f3c:	bd08      	pop	{r3, pc}
 8006f3e:	2001      	movs	r0, #1
 8006f40:	bd08      	pop	{r3, pc}
 8006f42:	2000      	movs	r0, #0
 8006f44:	bd08      	pop	{r3, pc}

08006f46 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 8006f46:	f7ff bfe8 	b.w	8006f1a <std::type_info::operator==(std::type_info const&) const>

08006f4a <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8006f4a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	9302      	str	r3, [sp, #8]
 8006f50:	6803      	ldr	r3, [r0, #0]
 8006f52:	2400      	movs	r4, #0
 8006f54:	4615      	mov	r5, r2
 8006f56:	699e      	ldr	r6, [r3, #24]
 8006f58:	9400      	str	r4, [sp, #0]
 8006f5a:	466b      	mov	r3, sp
 8006f5c:	f88d 4004 	strb.w	r4, [sp, #4]
 8006f60:	9403      	str	r4, [sp, #12]
 8006f62:	6812      	ldr	r2, [r2, #0]
 8006f64:	47b0      	blx	r6
 8006f66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f6a:	f003 0306 	and.w	r3, r3, #6
 8006f6e:	2b06      	cmp	r3, #6
 8006f70:	bf11      	iteee	ne
 8006f72:	4620      	movne	r0, r4
 8006f74:	9b00      	ldreq	r3, [sp, #0]
 8006f76:	2001      	moveq	r0, #1
 8006f78:	602b      	streq	r3, [r5, #0]
 8006f7a:	b004      	add	sp, #16
 8006f7c:	bd70      	pop	{r4, r5, r6, pc}

08006f7e <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8006f7e:	9800      	ldr	r0, [sp, #0]
 8006f80:	4290      	cmp	r0, r2
 8006f82:	bf0c      	ite	eq
 8006f84:	2006      	moveq	r0, #6
 8006f86:	2001      	movne	r0, #1
 8006f88:	4770      	bx	lr
	...

08006f8c <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
 8006f92:	6003      	str	r3, [r0, #0]
 8006f94:	f7ff ffb6 	bl	8006f04 <std::type_info::~type_info()>
 8006f98:	4620      	mov	r0, r4
 8006f9a:	bd10      	pop	{r4, pc}
 8006f9c:	0800832c 	.word	0x0800832c

08006fa0 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	f7ff fff2 	bl	8006f8c <__cxxabiv1::__class_type_info::~__class_type_info()>
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f000 f83f 	bl	800702c <operator delete(void*)>
 8006fae:	4620      	mov	r0, r4
 8006fb0:	bd10      	pop	{r4, pc}

08006fb2 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8006fb2:	b538      	push	{r3, r4, r5, lr}
 8006fb4:	4615      	mov	r5, r2
 8006fb6:	461c      	mov	r4, r3
 8006fb8:	f7ff ffaf 	bl	8006f1a <std::type_info::operator==(std::type_info const&) const>
 8006fbc:	b120      	cbz	r0, 8006fc8 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x16>
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	60e3      	str	r3, [r4, #12]
 8006fc2:	2306      	movs	r3, #6
 8006fc4:	6025      	str	r5, [r4, #0]
 8006fc6:	7123      	strb	r3, [r4, #4]
 8006fc8:	bd38      	pop	{r3, r4, r5, pc}

08006fca <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8006fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fce:	9e06      	ldr	r6, [sp, #24]
 8006fd0:	4698      	mov	r8, r3
 8006fd2:	9b08      	ldr	r3, [sp, #32]
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	429e      	cmp	r6, r3
 8006fd8:	4615      	mov	r5, r2
 8006fda:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006fdc:	d103      	bne.n	8006fe6 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x1c>
 8006fde:	9907      	ldr	r1, [sp, #28]
 8006fe0:	f7ff ff9b 	bl	8006f1a <std::type_info::operator==(std::type_info const&) const>
 8006fe4:	b948      	cbnz	r0, 8006ffa <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x30>
 8006fe6:	4641      	mov	r1, r8
 8006fe8:	4638      	mov	r0, r7
 8006fea:	f7ff ff96 	bl	8006f1a <std::type_info::operator==(std::type_info const&) const>
 8006fee:	b128      	cbz	r0, 8006ffc <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	6026      	str	r6, [r4, #0]
 8006ff4:	7125      	strb	r5, [r4, #4]
 8006ff6:	71a3      	strb	r3, [r4, #6]
 8006ff8:	e000      	b.n	8006ffc <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8006ffa:	7165      	strb	r5, [r4, #5]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007002 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 8007002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	4605      	mov	r5, r0
 8007008:	460c      	mov	r4, r1
 800700a:	4616      	mov	r6, r2
 800700c:	461f      	mov	r7, r3
 800700e:	f7ff ff84 	bl	8006f1a <std::type_info::operator==(std::type_info const&) const>
 8007012:	b948      	cbnz	r0, 8007028 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 8007014:	2f03      	cmp	r7, #3
 8007016:	d807      	bhi.n	8007028 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	4632      	mov	r2, r6
 800701c:	4629      	mov	r1, r5
 800701e:	4620      	mov	r0, r4
 8007020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	4718      	bx	r3
 8007028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800702c <operator delete(void*)>:
 800702c:	f000 b84a 	b.w	80070c4 <free>

08007030 <abort>:
 8007030:	b508      	push	{r3, lr}
 8007032:	2006      	movs	r0, #6
 8007034:	f000 f990 	bl	8007358 <raise>
 8007038:	2001      	movs	r0, #1
 800703a:	f000 fe4b 	bl	8007cd4 <_exit>
	...

08007040 <exit>:
 8007040:	b508      	push	{r3, lr}
 8007042:	4b07      	ldr	r3, [pc, #28]	; (8007060 <exit+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	b113      	cbz	r3, 800704e <exit+0xe>
 8007048:	2100      	movs	r1, #0
 800704a:	f3af 8000 	nop.w
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <exit+0x24>)
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007054:	b103      	cbz	r3, 8007058 <exit+0x18>
 8007056:	4798      	blx	r3
 8007058:	4620      	mov	r0, r4
 800705a:	f000 fe3b 	bl	8007cd4 <_exit>
 800705e:	bf00      	nop
 8007060:	00000000 	.word	0x00000000
 8007064:	08008380 	.word	0x08008380

08007068 <__libc_init_array>:
 8007068:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <__libc_init_array+0x3c>)
 800706a:	b570      	push	{r4, r5, r6, lr}
 800706c:	461e      	mov	r6, r3
 800706e:	4c0e      	ldr	r4, [pc, #56]	; (80070a8 <__libc_init_array+0x40>)
 8007070:	2500      	movs	r5, #0
 8007072:	1ae4      	subs	r4, r4, r3
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	42a5      	cmp	r5, r4
 8007078:	d004      	beq.n	8007084 <__libc_init_array+0x1c>
 800707a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800707e:	4798      	blx	r3
 8007080:	3501      	adds	r5, #1
 8007082:	e7f8      	b.n	8007076 <__libc_init_array+0xe>
 8007084:	f000 fe2a 	bl	8007cdc <_init>
 8007088:	4b08      	ldr	r3, [pc, #32]	; (80070ac <__libc_init_array+0x44>)
 800708a:	4c09      	ldr	r4, [pc, #36]	; (80070b0 <__libc_init_array+0x48>)
 800708c:	461e      	mov	r6, r3
 800708e:	1ae4      	subs	r4, r4, r3
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	2500      	movs	r5, #0
 8007094:	42a5      	cmp	r5, r4
 8007096:	d004      	beq.n	80070a2 <__libc_init_array+0x3a>
 8007098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800709c:	4798      	blx	r3
 800709e:	3501      	adds	r5, #1
 80070a0:	e7f8      	b.n	8007094 <__libc_init_array+0x2c>
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	08008510 	.word	0x08008510
 80070a8:	08008510 	.word	0x08008510
 80070ac:	08008510 	.word	0x08008510
 80070b0:	08008518 	.word	0x08008518

080070b4 <malloc>:
 80070b4:	4b02      	ldr	r3, [pc, #8]	; (80070c0 <malloc+0xc>)
 80070b6:	4601      	mov	r1, r0
 80070b8:	6818      	ldr	r0, [r3, #0]
 80070ba:	f000 b863 	b.w	8007184 <_malloc_r>
 80070be:	bf00      	nop
 80070c0:	2000008c 	.word	0x2000008c

080070c4 <free>:
 80070c4:	4b02      	ldr	r3, [pc, #8]	; (80070d0 <free+0xc>)
 80070c6:	4601      	mov	r1, r0
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	f000 b817 	b.w	80070fc <_free_r>
 80070ce:	bf00      	nop
 80070d0:	2000008c 	.word	0x2000008c

080070d4 <memcpy>:
 80070d4:	b510      	push	{r4, lr}
 80070d6:	1e43      	subs	r3, r0, #1
 80070d8:	440a      	add	r2, r1
 80070da:	4291      	cmp	r1, r2
 80070dc:	d004      	beq.n	80070e8 <memcpy+0x14>
 80070de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070e6:	e7f8      	b.n	80070da <memcpy+0x6>
 80070e8:	bd10      	pop	{r4, pc}

080070ea <memset>:
 80070ea:	4603      	mov	r3, r0
 80070ec:	4402      	add	r2, r0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d002      	beq.n	80070f8 <memset+0xe>
 80070f2:	f803 1b01 	strb.w	r1, [r3], #1
 80070f6:	e7fa      	b.n	80070ee <memset+0x4>
 80070f8:	4770      	bx	lr
	...

080070fc <_free_r>:
 80070fc:	b530      	push	{r4, r5, lr}
 80070fe:	2900      	cmp	r1, #0
 8007100:	d03c      	beq.n	800717c <_free_r+0x80>
 8007102:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8007106:	1f0b      	subs	r3, r1, #4
 8007108:	491d      	ldr	r1, [pc, #116]	; (8007180 <_free_r+0x84>)
 800710a:	2a00      	cmp	r2, #0
 800710c:	bfb8      	it	lt
 800710e:	189b      	addlt	r3, r3, r2
 8007110:	680a      	ldr	r2, [r1, #0]
 8007112:	460c      	mov	r4, r1
 8007114:	b912      	cbnz	r2, 800711c <_free_r+0x20>
 8007116:	605a      	str	r2, [r3, #4]
 8007118:	600b      	str	r3, [r1, #0]
 800711a:	bd30      	pop	{r4, r5, pc}
 800711c:	429a      	cmp	r2, r3
 800711e:	d90d      	bls.n	800713c <_free_r+0x40>
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	1858      	adds	r0, r3, r1
 8007124:	4282      	cmp	r2, r0
 8007126:	bf01      	itttt	eq
 8007128:	6810      	ldreq	r0, [r2, #0]
 800712a:	6852      	ldreq	r2, [r2, #4]
 800712c:	1809      	addeq	r1, r1, r0
 800712e:	6019      	streq	r1, [r3, #0]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	bd30      	pop	{r4, r5, pc}
 8007136:	4299      	cmp	r1, r3
 8007138:	d803      	bhi.n	8007142 <_free_r+0x46>
 800713a:	460a      	mov	r2, r1
 800713c:	6851      	ldr	r1, [r2, #4]
 800713e:	2900      	cmp	r1, #0
 8007140:	d1f9      	bne.n	8007136 <_free_r+0x3a>
 8007142:	6814      	ldr	r4, [r2, #0]
 8007144:	1915      	adds	r5, r2, r4
 8007146:	429d      	cmp	r5, r3
 8007148:	d10a      	bne.n	8007160 <_free_r+0x64>
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4423      	add	r3, r4
 800714e:	18d0      	adds	r0, r2, r3
 8007150:	4281      	cmp	r1, r0
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	d112      	bne.n	800717c <_free_r+0x80>
 8007156:	6808      	ldr	r0, [r1, #0]
 8007158:	4403      	add	r3, r0
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	684b      	ldr	r3, [r1, #4]
 800715e:	e00c      	b.n	800717a <_free_r+0x7e>
 8007160:	d902      	bls.n	8007168 <_free_r+0x6c>
 8007162:	230c      	movs	r3, #12
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	bd30      	pop	{r4, r5, pc}
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	181c      	adds	r4, r3, r0
 800716c:	42a1      	cmp	r1, r4
 800716e:	bf01      	itttt	eq
 8007170:	680c      	ldreq	r4, [r1, #0]
 8007172:	6849      	ldreq	r1, [r1, #4]
 8007174:	1900      	addeq	r0, r0, r4
 8007176:	6018      	streq	r0, [r3, #0]
 8007178:	6059      	str	r1, [r3, #4]
 800717a:	6053      	str	r3, [r2, #4]
 800717c:	bd30      	pop	{r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	20000a80 	.word	0x20000a80

08007184 <_malloc_r>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	1ccd      	adds	r5, r1, #3
 8007188:	f025 0503 	bic.w	r5, r5, #3
 800718c:	3508      	adds	r5, #8
 800718e:	2d0c      	cmp	r5, #12
 8007190:	bf38      	it	cc
 8007192:	250c      	movcc	r5, #12
 8007194:	2d00      	cmp	r5, #0
 8007196:	4606      	mov	r6, r0
 8007198:	da03      	bge.n	80071a2 <_malloc_r+0x1e>
 800719a:	230c      	movs	r3, #12
 800719c:	6033      	str	r3, [r6, #0]
 800719e:	2000      	movs	r0, #0
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	42a9      	cmp	r1, r5
 80071a4:	d8f9      	bhi.n	800719a <_malloc_r+0x16>
 80071a6:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <_malloc_r+0xa0>)
 80071a8:	681c      	ldr	r4, [r3, #0]
 80071aa:	461a      	mov	r2, r3
 80071ac:	4621      	mov	r1, r4
 80071ae:	b1a1      	cbz	r1, 80071da <_malloc_r+0x56>
 80071b0:	680b      	ldr	r3, [r1, #0]
 80071b2:	1b5b      	subs	r3, r3, r5
 80071b4:	d40e      	bmi.n	80071d4 <_malloc_r+0x50>
 80071b6:	2b0b      	cmp	r3, #11
 80071b8:	d903      	bls.n	80071c2 <_malloc_r+0x3e>
 80071ba:	600b      	str	r3, [r1, #0]
 80071bc:	18cc      	adds	r4, r1, r3
 80071be:	50cd      	str	r5, [r1, r3]
 80071c0:	e01e      	b.n	8007200 <_malloc_r+0x7c>
 80071c2:	428c      	cmp	r4, r1
 80071c4:	bf0b      	itete	eq
 80071c6:	6863      	ldreq	r3, [r4, #4]
 80071c8:	684b      	ldrne	r3, [r1, #4]
 80071ca:	6013      	streq	r3, [r2, #0]
 80071cc:	6063      	strne	r3, [r4, #4]
 80071ce:	bf18      	it	ne
 80071d0:	460c      	movne	r4, r1
 80071d2:	e015      	b.n	8007200 <_malloc_r+0x7c>
 80071d4:	460c      	mov	r4, r1
 80071d6:	6849      	ldr	r1, [r1, #4]
 80071d8:	e7e9      	b.n	80071ae <_malloc_r+0x2a>
 80071da:	4c13      	ldr	r4, [pc, #76]	; (8007228 <_malloc_r+0xa4>)
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	b91b      	cbnz	r3, 80071e8 <_malloc_r+0x64>
 80071e0:	4630      	mov	r0, r6
 80071e2:	f000 f82b 	bl	800723c <_sbrk_r>
 80071e6:	6020      	str	r0, [r4, #0]
 80071e8:	4629      	mov	r1, r5
 80071ea:	4630      	mov	r0, r6
 80071ec:	f000 f826 	bl	800723c <_sbrk_r>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d0d2      	beq.n	800719a <_malloc_r+0x16>
 80071f4:	1cc4      	adds	r4, r0, #3
 80071f6:	f024 0403 	bic.w	r4, r4, #3
 80071fa:	42a0      	cmp	r0, r4
 80071fc:	d10a      	bne.n	8007214 <_malloc_r+0x90>
 80071fe:	6025      	str	r5, [r4, #0]
 8007200:	f104 000b 	add.w	r0, r4, #11
 8007204:	1d23      	adds	r3, r4, #4
 8007206:	f020 0007 	bic.w	r0, r0, #7
 800720a:	1ac3      	subs	r3, r0, r3
 800720c:	d009      	beq.n	8007222 <_malloc_r+0x9e>
 800720e:	425a      	negs	r2, r3
 8007210:	50e2      	str	r2, [r4, r3]
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	1a21      	subs	r1, r4, r0
 8007216:	4630      	mov	r0, r6
 8007218:	f000 f810 	bl	800723c <_sbrk_r>
 800721c:	3001      	adds	r0, #1
 800721e:	d1ee      	bne.n	80071fe <_malloc_r+0x7a>
 8007220:	e7bb      	b.n	800719a <_malloc_r+0x16>
 8007222:	bd70      	pop	{r4, r5, r6, pc}
 8007224:	20000a80 	.word	0x20000a80
 8007228:	20000a7c 	.word	0x20000a7c

0800722c <realloc>:
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <realloc+0xc>)
 800722e:	460a      	mov	r2, r1
 8007230:	4601      	mov	r1, r0
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	f000 b906 	b.w	8007444 <_realloc_r>
 8007238:	2000008c 	.word	0x2000008c

0800723c <_sbrk_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4c06      	ldr	r4, [pc, #24]	; (8007258 <_sbrk_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4605      	mov	r5, r0
 8007244:	4608      	mov	r0, r1
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	f000 fd36 	bl	8007cb8 <_sbrk>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_sbrk_r+0x1a>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	b103      	cbz	r3, 8007256 <_sbrk_r+0x1a>
 8007254:	602b      	str	r3, [r5, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20000aa4 	.word	0x20000aa4

0800725c <_init_signal_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007260:	4605      	mov	r5, r0
 8007262:	b10c      	cbz	r4, 8007268 <_init_signal_r+0xc>
 8007264:	2000      	movs	r0, #0
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	2180      	movs	r1, #128	; 0x80
 800726a:	f7ff ff8b 	bl	8007184 <_malloc_r>
 800726e:	6468      	str	r0, [r5, #68]	; 0x44
 8007270:	b138      	cbz	r0, 8007282 <_init_signal_r+0x26>
 8007272:	4623      	mov	r3, r4
 8007274:	4621      	mov	r1, r4
 8007276:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8007278:	50d1      	str	r1, [r2, r3]
 800727a:	3304      	adds	r3, #4
 800727c:	2b80      	cmp	r3, #128	; 0x80
 800727e:	d1fa      	bne.n	8007276 <_init_signal_r+0x1a>
 8007280:	e7f0      	b.n	8007264 <_init_signal_r+0x8>
 8007282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007286:	bd38      	pop	{r3, r4, r5, pc}

08007288 <_signal_r>:
 8007288:	291f      	cmp	r1, #31
 800728a:	b570      	push	{r4, r5, r6, lr}
 800728c:	4604      	mov	r4, r0
 800728e:	460d      	mov	r5, r1
 8007290:	4616      	mov	r6, r2
 8007292:	d902      	bls.n	800729a <_signal_r+0x12>
 8007294:	2316      	movs	r3, #22
 8007296:	6003      	str	r3, [r0, #0]
 8007298:	e00b      	b.n	80072b2 <_signal_r+0x2a>
 800729a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800729c:	b12b      	cbz	r3, 80072aa <_signal_r+0x22>
 800729e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80072a0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072a4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 80072a8:	bd70      	pop	{r4, r5, r6, pc}
 80072aa:	f7ff ffd7 	bl	800725c <_init_signal_r>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d0f5      	beq.n	800729e <_signal_r+0x16>
 80072b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b6:	bd70      	pop	{r4, r5, r6, pc}

080072b8 <_raise_r>:
 80072b8:	291f      	cmp	r1, #31
 80072ba:	b538      	push	{r3, r4, r5, lr}
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	d904      	bls.n	80072cc <_raise_r+0x14>
 80072c2:	2316      	movs	r3, #22
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ca:	bd38      	pop	{r3, r4, r5, pc}
 80072cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072ce:	b112      	cbz	r2, 80072d6 <_raise_r+0x1e>
 80072d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072d4:	b94b      	cbnz	r3, 80072ea <_raise_r+0x32>
 80072d6:	4620      	mov	r0, r4
 80072d8:	f000 f86e 	bl	80073b8 <_getpid_r>
 80072dc:	462a      	mov	r2, r5
 80072de:	4601      	mov	r1, r0
 80072e0:	4620      	mov	r0, r4
 80072e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e6:	f000 b855 	b.w	8007394 <_kill_r>
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d00c      	beq.n	8007308 <_raise_r+0x50>
 80072ee:	1c59      	adds	r1, r3, #1
 80072f0:	d103      	bne.n	80072fa <_raise_r+0x42>
 80072f2:	2316      	movs	r3, #22
 80072f4:	6003      	str	r3, [r0, #0]
 80072f6:	2001      	movs	r0, #1
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	2400      	movs	r4, #0
 80072fc:	4628      	mov	r0, r5
 80072fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007302:	4798      	blx	r3
 8007304:	4620      	mov	r0, r4
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	2000      	movs	r0, #0
 800730a:	bd38      	pop	{r3, r4, r5, pc}

0800730c <__sigtramp_r>:
 800730c:	291f      	cmp	r1, #31
 800730e:	b538      	push	{r3, r4, r5, lr}
 8007310:	4604      	mov	r4, r0
 8007312:	460d      	mov	r5, r1
 8007314:	d902      	bls.n	800731c <__sigtramp_r+0x10>
 8007316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800731e:	b123      	cbz	r3, 800732a <__sigtramp_r+0x1e>
 8007320:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007322:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8007326:	b92b      	cbnz	r3, 8007334 <__sigtramp_r+0x28>
 8007328:	e00f      	b.n	800734a <__sigtramp_r+0x3e>
 800732a:	f7ff ff97 	bl	800725c <_init_signal_r>
 800732e:	2800      	cmp	r0, #0
 8007330:	d0f6      	beq.n	8007320 <__sigtramp_r+0x14>
 8007332:	e7f0      	b.n	8007316 <__sigtramp_r+0xa>
 8007334:	1c59      	adds	r1, r3, #1
 8007336:	d00a      	beq.n	800734e <__sigtramp_r+0x42>
 8007338:	2b01      	cmp	r3, #1
 800733a:	d00a      	beq.n	8007352 <__sigtramp_r+0x46>
 800733c:	2400      	movs	r4, #0
 800733e:	4628      	mov	r0, r5
 8007340:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007344:	4798      	blx	r3
 8007346:	4620      	mov	r0, r4
 8007348:	bd38      	pop	{r3, r4, r5, pc}
 800734a:	2001      	movs	r0, #1
 800734c:	bd38      	pop	{r3, r4, r5, pc}
 800734e:	2002      	movs	r0, #2
 8007350:	bd38      	pop	{r3, r4, r5, pc}
 8007352:	2003      	movs	r0, #3
 8007354:	bd38      	pop	{r3, r4, r5, pc}
	...

08007358 <raise>:
 8007358:	4b02      	ldr	r3, [pc, #8]	; (8007364 <raise+0xc>)
 800735a:	4601      	mov	r1, r0
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f7ff bfab 	b.w	80072b8 <_raise_r>
 8007362:	bf00      	nop
 8007364:	2000008c 	.word	0x2000008c

08007368 <signal>:
 8007368:	4b02      	ldr	r3, [pc, #8]	; (8007374 <signal+0xc>)
 800736a:	460a      	mov	r2, r1
 800736c:	4601      	mov	r1, r0
 800736e:	6818      	ldr	r0, [r3, #0]
 8007370:	f7ff bf8a 	b.w	8007288 <_signal_r>
 8007374:	2000008c 	.word	0x2000008c

08007378 <_init_signal>:
 8007378:	4b01      	ldr	r3, [pc, #4]	; (8007380 <_init_signal+0x8>)
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	f7ff bf6e 	b.w	800725c <_init_signal_r>
 8007380:	2000008c 	.word	0x2000008c

08007384 <__sigtramp>:
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <__sigtramp+0xc>)
 8007386:	4601      	mov	r1, r0
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f7ff bfbf 	b.w	800730c <__sigtramp_r>
 800738e:	bf00      	nop
 8007390:	2000008c 	.word	0x2000008c

08007394 <_kill_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4c07      	ldr	r4, [pc, #28]	; (80073b4 <_kill_r+0x20>)
 8007398:	2300      	movs	r3, #0
 800739a:	4605      	mov	r5, r0
 800739c:	4608      	mov	r0, r1
 800739e:	4611      	mov	r1, r2
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	f000 fc81 	bl	8007ca8 <_kill>
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d102      	bne.n	80073b0 <_kill_r+0x1c>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	b103      	cbz	r3, 80073b0 <_kill_r+0x1c>
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	bd38      	pop	{r3, r4, r5, pc}
 80073b2:	bf00      	nop
 80073b4:	20000aa4 	.word	0x20000aa4

080073b8 <_getpid_r>:
 80073b8:	f000 bc6e 	b.w	8007c98 <_getpid>

080073bc <_siprintf_r>:
 80073bc:	b40c      	push	{r2, r3}
 80073be:	b510      	push	{r4, lr}
 80073c0:	b09c      	sub	sp, #112	; 0x70
 80073c2:	9102      	str	r1, [sp, #8]
 80073c4:	9106      	str	r1, [sp, #24]
 80073c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073ca:	9104      	str	r1, [sp, #16]
 80073cc:	9107      	str	r1, [sp, #28]
 80073ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80073d2:	ab1e      	add	r3, sp, #120	; 0x78
 80073d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80073dc:	f44f 7402 	mov.w	r4, #520	; 0x208
 80073e0:	a902      	add	r1, sp, #8
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	f8ad 4014 	strh.w	r4, [sp, #20]
 80073e8:	f000 f92a 	bl	8007640 <_svfiprintf_r>
 80073ec:	9b02      	ldr	r3, [sp, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	b01c      	add	sp, #112	; 0x70
 80073f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f8:	b002      	add	sp, #8
 80073fa:	4770      	bx	lr

080073fc <siprintf>:
 80073fc:	b40e      	push	{r1, r2, r3}
 80073fe:	b500      	push	{lr}
 8007400:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007404:	b09c      	sub	sp, #112	; 0x70
 8007406:	f8ad 1014 	strh.w	r1, [sp, #20]
 800740a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800740e:	9104      	str	r1, [sp, #16]
 8007410:	9107      	str	r1, [sp, #28]
 8007412:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007416:	ab1d      	add	r3, sp, #116	; 0x74
 8007418:	9002      	str	r0, [sp, #8]
 800741a:	9006      	str	r0, [sp, #24]
 800741c:	4808      	ldr	r0, [pc, #32]	; (8007440 <siprintf+0x44>)
 800741e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007422:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	a902      	add	r1, sp, #8
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	f000 f908 	bl	8007640 <_svfiprintf_r>
 8007430:	9b02      	ldr	r3, [sp, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
 8007436:	b01c      	add	sp, #112	; 0x70
 8007438:	f85d eb04 	ldr.w	lr, [sp], #4
 800743c:	b003      	add	sp, #12
 800743e:	4770      	bx	lr
 8007440:	2000008c 	.word	0x2000008c

08007444 <_realloc_r>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	4607      	mov	r7, r0
 8007448:	4615      	mov	r5, r2
 800744a:	460e      	mov	r6, r1
 800744c:	b921      	cbnz	r1, 8007458 <_realloc_r+0x14>
 800744e:	4611      	mov	r1, r2
 8007450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007454:	f7ff be96 	b.w	8007184 <_malloc_r>
 8007458:	b91a      	cbnz	r2, 8007462 <_realloc_r+0x1e>
 800745a:	f7ff fe4f 	bl	80070fc <_free_r>
 800745e:	4628      	mov	r0, r5
 8007460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007462:	f000 fc0e 	bl	8007c82 <_malloc_usable_size_r>
 8007466:	4285      	cmp	r5, r0
 8007468:	d90e      	bls.n	8007488 <_realloc_r+0x44>
 800746a:	4629      	mov	r1, r5
 800746c:	4638      	mov	r0, r7
 800746e:	f7ff fe89 	bl	8007184 <_malloc_r>
 8007472:	4604      	mov	r4, r0
 8007474:	b150      	cbz	r0, 800748c <_realloc_r+0x48>
 8007476:	4631      	mov	r1, r6
 8007478:	462a      	mov	r2, r5
 800747a:	f7ff fe2b 	bl	80070d4 <memcpy>
 800747e:	4631      	mov	r1, r6
 8007480:	4638      	mov	r0, r7
 8007482:	f7ff fe3b 	bl	80070fc <_free_r>
 8007486:	e001      	b.n	800748c <_realloc_r+0x48>
 8007488:	4630      	mov	r0, r6
 800748a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748c:	4620      	mov	r0, r4
 800748e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007490 <__ssputs_r>:
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	688e      	ldr	r6, [r1, #8]
 8007496:	4682      	mov	sl, r0
 8007498:	429e      	cmp	r6, r3
 800749a:	460c      	mov	r4, r1
 800749c:	4691      	mov	r9, r2
 800749e:	4698      	mov	r8, r3
 80074a0:	d83e      	bhi.n	8007520 <__ssputs_r+0x90>
 80074a2:	898a      	ldrh	r2, [r1, #12]
 80074a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074a8:	d03a      	beq.n	8007520 <__ssputs_r+0x90>
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	6909      	ldr	r1, [r1, #16]
 80074ae:	2302      	movs	r3, #2
 80074b0:	1a6f      	subs	r7, r5, r1
 80074b2:	6965      	ldr	r5, [r4, #20]
 80074b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80074bc:	1c7b      	adds	r3, r7, #1
 80074be:	4443      	add	r3, r8
 80074c0:	429d      	cmp	r5, r3
 80074c2:	bf38      	it	cc
 80074c4:	461d      	movcc	r5, r3
 80074c6:	0553      	lsls	r3, r2, #21
 80074c8:	d50f      	bpl.n	80074ea <__ssputs_r+0x5a>
 80074ca:	4629      	mov	r1, r5
 80074cc:	f7ff fe5a 	bl	8007184 <_malloc_r>
 80074d0:	4606      	mov	r6, r0
 80074d2:	b198      	cbz	r0, 80074fc <__ssputs_r+0x6c>
 80074d4:	463a      	mov	r2, r7
 80074d6:	6921      	ldr	r1, [r4, #16]
 80074d8:	f7ff fdfc 	bl	80070d4 <memcpy>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	e013      	b.n	8007512 <__ssputs_r+0x82>
 80074ea:	462a      	mov	r2, r5
 80074ec:	f7ff ffaa 	bl	8007444 <_realloc_r>
 80074f0:	4606      	mov	r6, r0
 80074f2:	b970      	cbnz	r0, 8007512 <__ssputs_r+0x82>
 80074f4:	6921      	ldr	r1, [r4, #16]
 80074f6:	4650      	mov	r0, sl
 80074f8:	f7ff fe00 	bl	80070fc <_free_r>
 80074fc:	230c      	movs	r3, #12
 80074fe:	f8ca 3000 	str.w	r3, [sl]
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007512:	6126      	str	r6, [r4, #16]
 8007514:	443e      	add	r6, r7
 8007516:	6026      	str	r6, [r4, #0]
 8007518:	4646      	mov	r6, r8
 800751a:	6165      	str	r5, [r4, #20]
 800751c:	1bed      	subs	r5, r5, r7
 800751e:	60a5      	str	r5, [r4, #8]
 8007520:	4546      	cmp	r6, r8
 8007522:	bf28      	it	cs
 8007524:	4646      	movcs	r6, r8
 8007526:	4649      	mov	r1, r9
 8007528:	4632      	mov	r2, r6
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	f000 fb8e 	bl	8007c4c <memmove>
 8007530:	68a3      	ldr	r3, [r4, #8]
 8007532:	2000      	movs	r0, #0
 8007534:	1b9b      	subs	r3, r3, r6
 8007536:	60a3      	str	r3, [r4, #8]
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	441e      	add	r6, r3
 800753c:	6026      	str	r6, [r4, #0]
 800753e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007542 <__ssprint_r>:
 8007542:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007546:	4693      	mov	fp, r2
 8007548:	6892      	ldr	r2, [r2, #8]
 800754a:	4681      	mov	r9, r0
 800754c:	460c      	mov	r4, r1
 800754e:	b34a      	cbz	r2, 80075a4 <__ssprint_r+0x62>
 8007550:	2300      	movs	r3, #0
 8007552:	f8db a000 	ldr.w	sl, [fp]
 8007556:	9301      	str	r3, [sp, #4]
 8007558:	461f      	mov	r7, r3
 800755a:	e006      	b.n	800756a <__ssprint_r+0x28>
 800755c:	f8da 3000 	ldr.w	r3, [sl]
 8007560:	f8da 7004 	ldr.w	r7, [sl, #4]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	f10a 0a08 	add.w	sl, sl, #8
 800756a:	2f00      	cmp	r7, #0
 800756c:	d0f6      	beq.n	800755c <__ssprint_r+0x1a>
 800756e:	68a6      	ldr	r6, [r4, #8]
 8007570:	42b7      	cmp	r7, r6
 8007572:	d360      	bcc.n	8007636 <__ssprint_r+0xf4>
 8007574:	89a0      	ldrh	r0, [r4, #12]
 8007576:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800757a:	d117      	bne.n	80075ac <__ssprint_r+0x6a>
 800757c:	42b7      	cmp	r7, r6
 800757e:	d35a      	bcc.n	8007636 <__ssprint_r+0xf4>
 8007580:	4632      	mov	r2, r6
 8007582:	9901      	ldr	r1, [sp, #4]
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	f000 fb61 	bl	8007c4c <memmove>
 800758a:	68a2      	ldr	r2, [r4, #8]
 800758c:	1b92      	subs	r2, r2, r6
 800758e:	60a2      	str	r2, [r4, #8]
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	4416      	add	r6, r2
 8007594:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007598:	6026      	str	r6, [r4, #0]
 800759a:	1bd7      	subs	r7, r2, r7
 800759c:	f8cb 7008 	str.w	r7, [fp, #8]
 80075a0:	2f00      	cmp	r7, #0
 80075a2:	d1db      	bne.n	800755c <__ssprint_r+0x1a>
 80075a4:	2000      	movs	r0, #0
 80075a6:	f8cb 0004 	str.w	r0, [fp, #4]
 80075aa:	e046      	b.n	800763a <__ssprint_r+0xf8>
 80075ac:	6825      	ldr	r5, [r4, #0]
 80075ae:	6921      	ldr	r1, [r4, #16]
 80075b0:	2302      	movs	r3, #2
 80075b2:	ebc1 0805 	rsb	r8, r1, r5
 80075b6:	6965      	ldr	r5, [r4, #20]
 80075b8:	f108 0201 	add.w	r2, r8, #1
 80075bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80075c4:	443a      	add	r2, r7
 80075c6:	4295      	cmp	r5, r2
 80075c8:	bf38      	it	cc
 80075ca:	4615      	movcc	r5, r2
 80075cc:	0543      	lsls	r3, r0, #21
 80075ce:	d510      	bpl.n	80075f2 <__ssprint_r+0xb0>
 80075d0:	4629      	mov	r1, r5
 80075d2:	4648      	mov	r0, r9
 80075d4:	f7ff fdd6 	bl	8007184 <_malloc_r>
 80075d8:	4606      	mov	r6, r0
 80075da:	b1a0      	cbz	r0, 8007606 <__ssprint_r+0xc4>
 80075dc:	4642      	mov	r2, r8
 80075de:	6921      	ldr	r1, [r4, #16]
 80075e0:	f7ff fd78 	bl	80070d4 <memcpy>
 80075e4:	89a2      	ldrh	r2, [r4, #12]
 80075e6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80075ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075ee:	81a2      	strh	r2, [r4, #12]
 80075f0:	e018      	b.n	8007624 <__ssprint_r+0xe2>
 80075f2:	462a      	mov	r2, r5
 80075f4:	4648      	mov	r0, r9
 80075f6:	f7ff ff25 	bl	8007444 <_realloc_r>
 80075fa:	4606      	mov	r6, r0
 80075fc:	b990      	cbnz	r0, 8007624 <__ssprint_r+0xe2>
 80075fe:	6921      	ldr	r1, [r4, #16]
 8007600:	4648      	mov	r0, r9
 8007602:	f7ff fd7b 	bl	80070fc <_free_r>
 8007606:	220c      	movs	r2, #12
 8007608:	f8c9 2000 	str.w	r2, [r9]
 800760c:	89a2      	ldrh	r2, [r4, #12]
 800760e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007616:	81a2      	strh	r2, [r4, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f8cb 2008 	str.w	r2, [fp, #8]
 800761e:	f8cb 2004 	str.w	r2, [fp, #4]
 8007622:	e00a      	b.n	800763a <__ssprint_r+0xf8>
 8007624:	6126      	str	r6, [r4, #16]
 8007626:	6165      	str	r5, [r4, #20]
 8007628:	4446      	add	r6, r8
 800762a:	ebc8 0505 	rsb	r5, r8, r5
 800762e:	6026      	str	r6, [r4, #0]
 8007630:	60a5      	str	r5, [r4, #8]
 8007632:	463e      	mov	r6, r7
 8007634:	e7a2      	b.n	800757c <__ssprint_r+0x3a>
 8007636:	463e      	mov	r6, r7
 8007638:	e7a2      	b.n	8007580 <__ssprint_r+0x3e>
 800763a:	b003      	add	sp, #12
 800763c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007640 <_svfiprintf_r>:
 8007640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007644:	b09d      	sub	sp, #116	; 0x74
 8007646:	9303      	str	r3, [sp, #12]
 8007648:	898b      	ldrh	r3, [r1, #12]
 800764a:	4680      	mov	r8, r0
 800764c:	061c      	lsls	r4, r3, #24
 800764e:	460d      	mov	r5, r1
 8007650:	4616      	mov	r6, r2
 8007652:	d50d      	bpl.n	8007670 <_svfiprintf_r+0x30>
 8007654:	690b      	ldr	r3, [r1, #16]
 8007656:	b95b      	cbnz	r3, 8007670 <_svfiprintf_r+0x30>
 8007658:	2140      	movs	r1, #64	; 0x40
 800765a:	f7ff fd93 	bl	8007184 <_malloc_r>
 800765e:	6028      	str	r0, [r5, #0]
 8007660:	6128      	str	r0, [r5, #16]
 8007662:	b918      	cbnz	r0, 800766c <_svfiprintf_r+0x2c>
 8007664:	230c      	movs	r3, #12
 8007666:	f8c8 3000 	str.w	r3, [r8]
 800766a:	e0cd      	b.n	8007808 <_svfiprintf_r+0x1c8>
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	616b      	str	r3, [r5, #20]
 8007670:	2300      	movs	r3, #0
 8007672:	9309      	str	r3, [sp, #36]	; 0x24
 8007674:	2320      	movs	r3, #32
 8007676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800767a:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8007818 <_svfiprintf_r+0x1d8>
 800767e:	2330      	movs	r3, #48	; 0x30
 8007680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007684:	4637      	mov	r7, r6
 8007686:	463c      	mov	r4, r7
 8007688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800768c:	b91b      	cbnz	r3, 8007696 <_svfiprintf_r+0x56>
 800768e:	ebb7 0906 	subs.w	r9, r7, r6
 8007692:	d010      	beq.n	80076b6 <_svfiprintf_r+0x76>
 8007694:	e003      	b.n	800769e <_svfiprintf_r+0x5e>
 8007696:	2b25      	cmp	r3, #37	; 0x25
 8007698:	d0f9      	beq.n	800768e <_svfiprintf_r+0x4e>
 800769a:	4627      	mov	r7, r4
 800769c:	e7f3      	b.n	8007686 <_svfiprintf_r+0x46>
 800769e:	464b      	mov	r3, r9
 80076a0:	4632      	mov	r2, r6
 80076a2:	4629      	mov	r1, r5
 80076a4:	4640      	mov	r0, r8
 80076a6:	f7ff fef3 	bl	8007490 <__ssputs_r>
 80076aa:	3001      	adds	r0, #1
 80076ac:	f000 80a7 	beq.w	80077fe <_svfiprintf_r+0x1be>
 80076b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b2:	444b      	add	r3, r9
 80076b4:	9309      	str	r3, [sp, #36]	; 0x24
 80076b6:	783b      	ldrb	r3, [r7, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80a0 	beq.w	80077fe <_svfiprintf_r+0x1be>
 80076be:	2300      	movs	r3, #0
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076c4:	9304      	str	r3, [sp, #16]
 80076c6:	9307      	str	r3, [sp, #28]
 80076c8:	9205      	str	r2, [sp, #20]
 80076ca:	9306      	str	r3, [sp, #24]
 80076cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076d0:	931a      	str	r3, [sp, #104]	; 0x68
 80076d2:	2601      	movs	r6, #1
 80076d4:	2205      	movs	r2, #5
 80076d6:	7821      	ldrb	r1, [r4, #0]
 80076d8:	484e      	ldr	r0, [pc, #312]	; (8007814 <_svfiprintf_r+0x1d4>)
 80076da:	f000 faa9 	bl	8007c30 <memchr>
 80076de:	1c67      	adds	r7, r4, #1
 80076e0:	9b04      	ldr	r3, [sp, #16]
 80076e2:	b138      	cbz	r0, 80076f4 <_svfiprintf_r+0xb4>
 80076e4:	4a4b      	ldr	r2, [pc, #300]	; (8007814 <_svfiprintf_r+0x1d4>)
 80076e6:	463c      	mov	r4, r7
 80076e8:	1a80      	subs	r0, r0, r2
 80076ea:	fa06 f000 	lsl.w	r0, r6, r0
 80076ee:	4318      	orrs	r0, r3
 80076f0:	9004      	str	r0, [sp, #16]
 80076f2:	e7ef      	b.n	80076d4 <_svfiprintf_r+0x94>
 80076f4:	06d9      	lsls	r1, r3, #27
 80076f6:	bf44      	itt	mi
 80076f8:	2220      	movmi	r2, #32
 80076fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076fe:	071a      	lsls	r2, r3, #28
 8007700:	bf44      	itt	mi
 8007702:	222b      	movmi	r2, #43	; 0x2b
 8007704:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007708:	7822      	ldrb	r2, [r4, #0]
 800770a:	2a2a      	cmp	r2, #42	; 0x2a
 800770c:	d003      	beq.n	8007716 <_svfiprintf_r+0xd6>
 800770e:	9a07      	ldr	r2, [sp, #28]
 8007710:	2100      	movs	r1, #0
 8007712:	200a      	movs	r0, #10
 8007714:	e00b      	b.n	800772e <_svfiprintf_r+0xee>
 8007716:	9a03      	ldr	r2, [sp, #12]
 8007718:	1d11      	adds	r1, r2, #4
 800771a:	6812      	ldr	r2, [r2, #0]
 800771c:	9103      	str	r1, [sp, #12]
 800771e:	2a00      	cmp	r2, #0
 8007720:	da10      	bge.n	8007744 <_svfiprintf_r+0x104>
 8007722:	4252      	negs	r2, r2
 8007724:	f043 0002 	orr.w	r0, r3, #2
 8007728:	9207      	str	r2, [sp, #28]
 800772a:	9004      	str	r0, [sp, #16]
 800772c:	e00b      	b.n	8007746 <_svfiprintf_r+0x106>
 800772e:	4627      	mov	r7, r4
 8007730:	783b      	ldrb	r3, [r7, #0]
 8007732:	3401      	adds	r4, #1
 8007734:	3b30      	subs	r3, #48	; 0x30
 8007736:	2b09      	cmp	r3, #9
 8007738:	d803      	bhi.n	8007742 <_svfiprintf_r+0x102>
 800773a:	fb00 3202 	mla	r2, r0, r2, r3
 800773e:	2101      	movs	r1, #1
 8007740:	e7f5      	b.n	800772e <_svfiprintf_r+0xee>
 8007742:	b101      	cbz	r1, 8007746 <_svfiprintf_r+0x106>
 8007744:	9207      	str	r2, [sp, #28]
 8007746:	783b      	ldrb	r3, [r7, #0]
 8007748:	2b2e      	cmp	r3, #46	; 0x2e
 800774a:	d11e      	bne.n	800778a <_svfiprintf_r+0x14a>
 800774c:	787b      	ldrb	r3, [r7, #1]
 800774e:	2b2a      	cmp	r3, #42	; 0x2a
 8007750:	d10a      	bne.n	8007768 <_svfiprintf_r+0x128>
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	3702      	adds	r7, #2
 8007756:	1d1a      	adds	r2, r3, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	9203      	str	r2, [sp, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	bfb8      	it	lt
 8007760:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007764:	9305      	str	r3, [sp, #20]
 8007766:	e010      	b.n	800778a <_svfiprintf_r+0x14a>
 8007768:	2300      	movs	r3, #0
 800776a:	4619      	mov	r1, r3
 800776c:	9305      	str	r3, [sp, #20]
 800776e:	1c78      	adds	r0, r7, #1
 8007770:	240a      	movs	r4, #10
 8007772:	4607      	mov	r7, r0
 8007774:	783a      	ldrb	r2, [r7, #0]
 8007776:	3001      	adds	r0, #1
 8007778:	3a30      	subs	r2, #48	; 0x30
 800777a:	2a09      	cmp	r2, #9
 800777c:	d803      	bhi.n	8007786 <_svfiprintf_r+0x146>
 800777e:	fb04 2101 	mla	r1, r4, r1, r2
 8007782:	2301      	movs	r3, #1
 8007784:	e7f5      	b.n	8007772 <_svfiprintf_r+0x132>
 8007786:	b103      	cbz	r3, 800778a <_svfiprintf_r+0x14a>
 8007788:	9105      	str	r1, [sp, #20]
 800778a:	2203      	movs	r2, #3
 800778c:	7839      	ldrb	r1, [r7, #0]
 800778e:	4822      	ldr	r0, [pc, #136]	; (8007818 <_svfiprintf_r+0x1d8>)
 8007790:	f000 fa4e 	bl	8007c30 <memchr>
 8007794:	b140      	cbz	r0, 80077a8 <_svfiprintf_r+0x168>
 8007796:	2340      	movs	r3, #64	; 0x40
 8007798:	ebcb 0000 	rsb	r0, fp, r0
 800779c:	fa03 f000 	lsl.w	r0, r3, r0
 80077a0:	9b04      	ldr	r3, [sp, #16]
 80077a2:	3701      	adds	r7, #1
 80077a4:	4318      	orrs	r0, r3
 80077a6:	9004      	str	r0, [sp, #16]
 80077a8:	7839      	ldrb	r1, [r7, #0]
 80077aa:	2206      	movs	r2, #6
 80077ac:	481b      	ldr	r0, [pc, #108]	; (800781c <_svfiprintf_r+0x1dc>)
 80077ae:	1c7e      	adds	r6, r7, #1
 80077b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077b4:	f000 fa3c 	bl	8007c30 <memchr>
 80077b8:	b188      	cbz	r0, 80077de <_svfiprintf_r+0x19e>
 80077ba:	4b19      	ldr	r3, [pc, #100]	; (8007820 <_svfiprintf_r+0x1e0>)
 80077bc:	b933      	cbnz	r3, 80077cc <_svfiprintf_r+0x18c>
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	3307      	adds	r3, #7
 80077c2:	f023 0307 	bic.w	r3, r3, #7
 80077c6:	3308      	adds	r3, #8
 80077c8:	9303      	str	r3, [sp, #12]
 80077ca:	e014      	b.n	80077f6 <_svfiprintf_r+0x1b6>
 80077cc:	ab03      	add	r3, sp, #12
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	462a      	mov	r2, r5
 80077d2:	4b14      	ldr	r3, [pc, #80]	; (8007824 <_svfiprintf_r+0x1e4>)
 80077d4:	a904      	add	r1, sp, #16
 80077d6:	4640      	mov	r0, r8
 80077d8:	f3af 8000 	nop.w
 80077dc:	e007      	b.n	80077ee <_svfiprintf_r+0x1ae>
 80077de:	ab03      	add	r3, sp, #12
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	462a      	mov	r2, r5
 80077e4:	4b0f      	ldr	r3, [pc, #60]	; (8007824 <_svfiprintf_r+0x1e4>)
 80077e6:	a904      	add	r1, sp, #16
 80077e8:	4640      	mov	r0, r8
 80077ea:	f000 f893 	bl	8007914 <_printf_i>
 80077ee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80077f2:	4682      	mov	sl, r0
 80077f4:	d003      	beq.n	80077fe <_svfiprintf_r+0x1be>
 80077f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f8:	4453      	add	r3, sl
 80077fa:	9309      	str	r3, [sp, #36]	; 0x24
 80077fc:	e742      	b.n	8007684 <_svfiprintf_r+0x44>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	065b      	lsls	r3, r3, #25
 8007802:	d401      	bmi.n	8007808 <_svfiprintf_r+0x1c8>
 8007804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007806:	e001      	b.n	800780c <_svfiprintf_r+0x1cc>
 8007808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800780c:	b01d      	add	sp, #116	; 0x74
 800780e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007812:	bf00      	nop
 8007814:	08008384 	.word	0x08008384
 8007818:	0800838a 	.word	0x0800838a
 800781c:	0800838e 	.word	0x0800838e
 8007820:	00000000 	.word	0x00000000
 8007824:	08007491 	.word	0x08007491

08007828 <_printf_common>:
 8007828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800782c:	4691      	mov	r9, r2
 800782e:	461f      	mov	r7, r3
 8007830:	690a      	ldr	r2, [r1, #16]
 8007832:	688b      	ldr	r3, [r1, #8]
 8007834:	4606      	mov	r6, r0
 8007836:	4293      	cmp	r3, r2
 8007838:	bfb8      	it	lt
 800783a:	4613      	movlt	r3, r2
 800783c:	f8c9 3000 	str.w	r3, [r9]
 8007840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007844:	460c      	mov	r4, r1
 8007846:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800784a:	b112      	cbz	r2, 8007852 <_printf_common+0x2a>
 800784c:	3301      	adds	r3, #1
 800784e:	f8c9 3000 	str.w	r3, [r9]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	0699      	lsls	r1, r3, #26
 8007856:	bf42      	ittt	mi
 8007858:	f8d9 3000 	ldrmi.w	r3, [r9]
 800785c:	3302      	addmi	r3, #2
 800785e:	f8c9 3000 	strmi.w	r3, [r9]
 8007862:	6825      	ldr	r5, [r4, #0]
 8007864:	f015 0506 	ands.w	r5, r5, #6
 8007868:	d110      	bne.n	800788c <_printf_common+0x64>
 800786a:	f104 0a19 	add.w	sl, r4, #25
 800786e:	e007      	b.n	8007880 <_printf_common+0x58>
 8007870:	2301      	movs	r3, #1
 8007872:	4652      	mov	r2, sl
 8007874:	4639      	mov	r1, r7
 8007876:	4630      	mov	r0, r6
 8007878:	47c0      	blx	r8
 800787a:	3001      	adds	r0, #1
 800787c:	d01a      	beq.n	80078b4 <_printf_common+0x8c>
 800787e:	3501      	adds	r5, #1
 8007880:	68e3      	ldr	r3, [r4, #12]
 8007882:	f8d9 2000 	ldr.w	r2, [r9]
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	429d      	cmp	r5, r3
 800788a:	dbf1      	blt.n	8007870 <_printf_common+0x48>
 800788c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007890:	6822      	ldr	r2, [r4, #0]
 8007892:	3300      	adds	r3, #0
 8007894:	bf18      	it	ne
 8007896:	2301      	movne	r3, #1
 8007898:	0692      	lsls	r2, r2, #26
 800789a:	d50f      	bpl.n	80078bc <_printf_common+0x94>
 800789c:	18e1      	adds	r1, r4, r3
 800789e:	2030      	movs	r0, #48	; 0x30
 80078a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078aa:	4422      	add	r2, r4
 80078ac:	3302      	adds	r3, #2
 80078ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078b2:	e003      	b.n	80078bc <_printf_common+0x94>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078c0:	4639      	mov	r1, r7
 80078c2:	4630      	mov	r0, r6
 80078c4:	47c0      	blx	r8
 80078c6:	3001      	adds	r0, #1
 80078c8:	d0f4      	beq.n	80078b4 <_printf_common+0x8c>
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	f8d9 5000 	ldr.w	r5, [r9]
 80078d0:	68e3      	ldr	r3, [r4, #12]
 80078d2:	f002 0206 	and.w	r2, r2, #6
 80078d6:	2a04      	cmp	r2, #4
 80078d8:	bf08      	it	eq
 80078da:	1b5d      	subeq	r5, r3, r5
 80078dc:	6922      	ldr	r2, [r4, #16]
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	bf0c      	ite	eq
 80078e2:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e6:	2500      	movne	r5, #0
 80078e8:	4293      	cmp	r3, r2
 80078ea:	bfc4      	itt	gt
 80078ec:	1a9b      	subgt	r3, r3, r2
 80078ee:	18ed      	addgt	r5, r5, r3
 80078f0:	f04f 0900 	mov.w	r9, #0
 80078f4:	341a      	adds	r4, #26
 80078f6:	454d      	cmp	r5, r9
 80078f8:	d009      	beq.n	800790e <_printf_common+0xe6>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4622      	mov	r2, r4
 80078fe:	4639      	mov	r1, r7
 8007900:	4630      	mov	r0, r6
 8007902:	47c0      	blx	r8
 8007904:	3001      	adds	r0, #1
 8007906:	d0d5      	beq.n	80078b4 <_printf_common+0x8c>
 8007908:	f109 0901 	add.w	r9, r9, #1
 800790c:	e7f3      	b.n	80078f6 <_printf_common+0xce>
 800790e:	2000      	movs	r0, #0
 8007910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007914 <_printf_i>:
 8007914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007918:	4617      	mov	r7, r2
 800791a:	7e0a      	ldrb	r2, [r1, #24]
 800791c:	b085      	sub	sp, #20
 800791e:	2a6e      	cmp	r2, #110	; 0x6e
 8007920:	4698      	mov	r8, r3
 8007922:	4606      	mov	r6, r0
 8007924:	460c      	mov	r4, r1
 8007926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007928:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800792c:	f000 80ae 	beq.w	8007a8c <_printf_i+0x178>
 8007930:	d811      	bhi.n	8007956 <_printf_i+0x42>
 8007932:	2a63      	cmp	r2, #99	; 0x63
 8007934:	d022      	beq.n	800797c <_printf_i+0x68>
 8007936:	d809      	bhi.n	800794c <_printf_i+0x38>
 8007938:	2a00      	cmp	r2, #0
 800793a:	f000 80bb 	beq.w	8007ab4 <_printf_i+0x1a0>
 800793e:	2a58      	cmp	r2, #88	; 0x58
 8007940:	f040 80ca 	bne.w	8007ad8 <_printf_i+0x1c4>
 8007944:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8007948:	4983      	ldr	r1, [pc, #524]	; (8007b58 <_printf_i+0x244>)
 800794a:	e055      	b.n	80079f8 <_printf_i+0xe4>
 800794c:	2a64      	cmp	r2, #100	; 0x64
 800794e:	d01e      	beq.n	800798e <_printf_i+0x7a>
 8007950:	2a69      	cmp	r2, #105	; 0x69
 8007952:	d01c      	beq.n	800798e <_printf_i+0x7a>
 8007954:	e0c0      	b.n	8007ad8 <_printf_i+0x1c4>
 8007956:	2a73      	cmp	r2, #115	; 0x73
 8007958:	f000 80b0 	beq.w	8007abc <_printf_i+0x1a8>
 800795c:	d809      	bhi.n	8007972 <_printf_i+0x5e>
 800795e:	2a6f      	cmp	r2, #111	; 0x6f
 8007960:	d02e      	beq.n	80079c0 <_printf_i+0xac>
 8007962:	2a70      	cmp	r2, #112	; 0x70
 8007964:	f040 80b8 	bne.w	8007ad8 <_printf_i+0x1c4>
 8007968:	680a      	ldr	r2, [r1, #0]
 800796a:	f042 0220 	orr.w	r2, r2, #32
 800796e:	600a      	str	r2, [r1, #0]
 8007970:	e03e      	b.n	80079f0 <_printf_i+0xdc>
 8007972:	2a75      	cmp	r2, #117	; 0x75
 8007974:	d024      	beq.n	80079c0 <_printf_i+0xac>
 8007976:	2a78      	cmp	r2, #120	; 0x78
 8007978:	d03a      	beq.n	80079f0 <_printf_i+0xdc>
 800797a:	e0ad      	b.n	8007ad8 <_printf_i+0x1c4>
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007982:	1d11      	adds	r1, r2, #4
 8007984:	6019      	str	r1, [r3, #0]
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800798c:	e0a8      	b.n	8007ae0 <_printf_i+0x1cc>
 800798e:	6821      	ldr	r1, [r4, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007996:	d002      	beq.n	800799e <_printf_i+0x8a>
 8007998:	1d11      	adds	r1, r2, #4
 800799a:	6019      	str	r1, [r3, #0]
 800799c:	e008      	b.n	80079b0 <_printf_i+0x9c>
 800799e:	f011 0f40 	tst.w	r1, #64	; 0x40
 80079a2:	f102 0104 	add.w	r1, r2, #4
 80079a6:	6019      	str	r1, [r3, #0]
 80079a8:	d002      	beq.n	80079b0 <_printf_i+0x9c>
 80079aa:	f9b2 3000 	ldrsh.w	r3, [r2]
 80079ae:	e000      	b.n	80079b2 <_printf_i+0x9e>
 80079b0:	6813      	ldr	r3, [r2, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da3c      	bge.n	8007a30 <_printf_i+0x11c>
 80079b6:	222d      	movs	r2, #45	; 0x2d
 80079b8:	425b      	negs	r3, r3
 80079ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80079be:	e037      	b.n	8007a30 <_printf_i+0x11c>
 80079c0:	6821      	ldr	r1, [r4, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80079c8:	d002      	beq.n	80079d0 <_printf_i+0xbc>
 80079ca:	1d11      	adds	r1, r2, #4
 80079cc:	6019      	str	r1, [r3, #0]
 80079ce:	e007      	b.n	80079e0 <_printf_i+0xcc>
 80079d0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80079d4:	f102 0104 	add.w	r1, r2, #4
 80079d8:	6019      	str	r1, [r3, #0]
 80079da:	d001      	beq.n	80079e0 <_printf_i+0xcc>
 80079dc:	8813      	ldrh	r3, [r2, #0]
 80079de:	e000      	b.n	80079e2 <_printf_i+0xce>
 80079e0:	6813      	ldr	r3, [r2, #0]
 80079e2:	7e22      	ldrb	r2, [r4, #24]
 80079e4:	495c      	ldr	r1, [pc, #368]	; (8007b58 <_printf_i+0x244>)
 80079e6:	2a6f      	cmp	r2, #111	; 0x6f
 80079e8:	bf14      	ite	ne
 80079ea:	220a      	movne	r2, #10
 80079ec:	2208      	moveq	r2, #8
 80079ee:	e01b      	b.n	8007a28 <_printf_i+0x114>
 80079f0:	2278      	movs	r2, #120	; 0x78
 80079f2:	495a      	ldr	r1, [pc, #360]	; (8007b5c <_printf_i+0x248>)
 80079f4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007a00:	f100 0504 	add.w	r5, r0, #4
 8007a04:	601d      	str	r5, [r3, #0]
 8007a06:	d103      	bne.n	8007a10 <_printf_i+0xfc>
 8007a08:	0655      	lsls	r5, r2, #25
 8007a0a:	d501      	bpl.n	8007a10 <_printf_i+0xfc>
 8007a0c:	8803      	ldrh	r3, [r0, #0]
 8007a0e:	e000      	b.n	8007a12 <_printf_i+0xfe>
 8007a10:	6803      	ldr	r3, [r0, #0]
 8007a12:	07d0      	lsls	r0, r2, #31
 8007a14:	bf44      	itt	mi
 8007a16:	f042 0220 	orrmi.w	r2, r2, #32
 8007a1a:	6022      	strmi	r2, [r4, #0]
 8007a1c:	b91b      	cbnz	r3, 8007a26 <_printf_i+0x112>
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	f022 0220 	bic.w	r2, r2, #32
 8007a24:	6022      	str	r2, [r4, #0]
 8007a26:	2210      	movs	r2, #16
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8007a2e:	e001      	b.n	8007a34 <_printf_i+0x120>
 8007a30:	4949      	ldr	r1, [pc, #292]	; (8007b58 <_printf_i+0x244>)
 8007a32:	220a      	movs	r2, #10
 8007a34:	6865      	ldr	r5, [r4, #4]
 8007a36:	2d00      	cmp	r5, #0
 8007a38:	60a5      	str	r5, [r4, #8]
 8007a3a:	db08      	blt.n	8007a4e <_printf_i+0x13a>
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	f020 0004 	bic.w	r0, r0, #4
 8007a42:	6020      	str	r0, [r4, #0]
 8007a44:	b92b      	cbnz	r3, 8007a52 <_printf_i+0x13e>
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	d17d      	bne.n	8007b46 <_printf_i+0x232>
 8007a4a:	4675      	mov	r5, lr
 8007a4c:	e00c      	b.n	8007a68 <_printf_i+0x154>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d079      	beq.n	8007b46 <_printf_i+0x232>
 8007a52:	4675      	mov	r5, lr
 8007a54:	fbb3 f0f2 	udiv	r0, r3, r2
 8007a58:	fb02 3310 	mls	r3, r2, r0, r3
 8007a5c:	5ccb      	ldrb	r3, [r1, r3]
 8007a5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a62:	4603      	mov	r3, r0
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d1f5      	bne.n	8007a54 <_printf_i+0x140>
 8007a68:	2a08      	cmp	r2, #8
 8007a6a:	d10b      	bne.n	8007a84 <_printf_i+0x170>
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	07da      	lsls	r2, r3, #31
 8007a70:	d508      	bpl.n	8007a84 <_printf_i+0x170>
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	6862      	ldr	r2, [r4, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	bfde      	ittt	le
 8007a7a:	2330      	movle	r3, #48	; 0x30
 8007a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a84:	ebc5 030e 	rsb	r3, r5, lr
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	e02e      	b.n	8007aea <_printf_i+0x1d6>
 8007a8c:	6808      	ldr	r0, [r1, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007a94:	6949      	ldr	r1, [r1, #20]
 8007a96:	d003      	beq.n	8007aa0 <_printf_i+0x18c>
 8007a98:	1d10      	adds	r0, r2, #4
 8007a9a:	6018      	str	r0, [r3, #0]
 8007a9c:	6813      	ldr	r3, [r2, #0]
 8007a9e:	e008      	b.n	8007ab2 <_printf_i+0x19e>
 8007aa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aa4:	f102 0004 	add.w	r0, r2, #4
 8007aa8:	6018      	str	r0, [r3, #0]
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	d001      	beq.n	8007ab2 <_printf_i+0x19e>
 8007aae:	8019      	strh	r1, [r3, #0]
 8007ab0:	e000      	b.n	8007ab4 <_printf_i+0x1a0>
 8007ab2:	6019      	str	r1, [r3, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	4675      	mov	r5, lr
 8007aba:	e016      	b.n	8007aea <_printf_i+0x1d6>
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	1d11      	adds	r1, r2, #4
 8007ac0:	6019      	str	r1, [r3, #0]
 8007ac2:	6815      	ldr	r5, [r2, #0]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6862      	ldr	r2, [r4, #4]
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f000 f8b1 	bl	8007c30 <memchr>
 8007ace:	b108      	cbz	r0, 8007ad4 <_printf_i+0x1c0>
 8007ad0:	1b40      	subs	r0, r0, r5
 8007ad2:	6060      	str	r0, [r4, #4]
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	e004      	b.n	8007ae2 <_printf_i+0x1ce>
 8007ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007adc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aea:	f8cd 8000 	str.w	r8, [sp]
 8007aee:	463b      	mov	r3, r7
 8007af0:	aa03      	add	r2, sp, #12
 8007af2:	4621      	mov	r1, r4
 8007af4:	4630      	mov	r0, r6
 8007af6:	f7ff fe97 	bl	8007828 <_printf_common>
 8007afa:	3001      	adds	r0, #1
 8007afc:	d102      	bne.n	8007b04 <_printf_i+0x1f0>
 8007afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b02:	e026      	b.n	8007b52 <_printf_i+0x23e>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	462a      	mov	r2, r5
 8007b08:	4639      	mov	r1, r7
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	47c0      	blx	r8
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d0f5      	beq.n	8007afe <_printf_i+0x1ea>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	079b      	lsls	r3, r3, #30
 8007b16:	d510      	bpl.n	8007b3a <_printf_i+0x226>
 8007b18:	2500      	movs	r5, #0
 8007b1a:	f104 0919 	add.w	r9, r4, #25
 8007b1e:	e007      	b.n	8007b30 <_printf_i+0x21c>
 8007b20:	2301      	movs	r3, #1
 8007b22:	464a      	mov	r2, r9
 8007b24:	4639      	mov	r1, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	47c0      	blx	r8
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d0e7      	beq.n	8007afe <_printf_i+0x1ea>
 8007b2e:	3501      	adds	r5, #1
 8007b30:	68e3      	ldr	r3, [r4, #12]
 8007b32:	9a03      	ldr	r2, [sp, #12]
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	429d      	cmp	r5, r3
 8007b38:	dbf2      	blt.n	8007b20 <_printf_i+0x20c>
 8007b3a:	68e0      	ldr	r0, [r4, #12]
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	4298      	cmp	r0, r3
 8007b40:	bfb8      	it	lt
 8007b42:	4618      	movlt	r0, r3
 8007b44:	e005      	b.n	8007b52 <_printf_i+0x23e>
 8007b46:	780b      	ldrb	r3, [r1, #0]
 8007b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b50:	e78a      	b.n	8007a68 <_printf_i+0x154>
 8007b52:	b005      	add	sp, #20
 8007b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b58:	08008395 	.word	0x08008395
 8007b5c:	080083a6 	.word	0x080083a6

08007b60 <cleanup_glue>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	6809      	ldr	r1, [r1, #0]
 8007b66:	4605      	mov	r5, r0
 8007b68:	b109      	cbz	r1, 8007b6e <cleanup_glue+0xe>
 8007b6a:	f7ff fff9 	bl	8007b60 <cleanup_glue>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b76:	f7ff bac1 	b.w	80070fc <_free_r>
	...

08007b7c <_reclaim_reent>:
 8007b7c:	4b2b      	ldr	r3, [pc, #172]	; (8007c2c <_reclaim_reent+0xb0>)
 8007b7e:	b570      	push	{r4, r5, r6, lr}
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4604      	mov	r4, r0
 8007b84:	4283      	cmp	r3, r0
 8007b86:	d050      	beq.n	8007c2a <_reclaim_reent+0xae>
 8007b88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b8a:	b1d3      	cbz	r3, 8007bc2 <_reclaim_reent+0x46>
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	b193      	cbz	r3, 8007bb6 <_reclaim_reent+0x3a>
 8007b90:	2500      	movs	r5, #0
 8007b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	5959      	ldr	r1, [r3, r5]
 8007b98:	b129      	cbz	r1, 8007ba6 <_reclaim_reent+0x2a>
 8007b9a:	680e      	ldr	r6, [r1, #0]
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f7ff faad 	bl	80070fc <_free_r>
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	e7f8      	b.n	8007b98 <_reclaim_reent+0x1c>
 8007ba6:	3504      	adds	r5, #4
 8007ba8:	2d80      	cmp	r5, #128	; 0x80
 8007baa:	d1f2      	bne.n	8007b92 <_reclaim_reent+0x16>
 8007bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bae:	4620      	mov	r0, r4
 8007bb0:	68d9      	ldr	r1, [r3, #12]
 8007bb2:	f7ff faa3 	bl	80070fc <_free_r>
 8007bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bb8:	6819      	ldr	r1, [r3, #0]
 8007bba:	b111      	cbz	r1, 8007bc2 <_reclaim_reent+0x46>
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f7ff fa9d 	bl	80070fc <_free_r>
 8007bc2:	6961      	ldr	r1, [r4, #20]
 8007bc4:	b111      	cbz	r1, 8007bcc <_reclaim_reent+0x50>
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7ff fa98 	bl	80070fc <_free_r>
 8007bcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bce:	b111      	cbz	r1, 8007bd6 <_reclaim_reent+0x5a>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f7ff fa93 	bl	80070fc <_free_r>
 8007bd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bd8:	b111      	cbz	r1, 8007be0 <_reclaim_reent+0x64>
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f7ff fa8e 	bl	80070fc <_free_r>
 8007be0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007be2:	b111      	cbz	r1, 8007bea <_reclaim_reent+0x6e>
 8007be4:	4620      	mov	r0, r4
 8007be6:	f7ff fa89 	bl	80070fc <_free_r>
 8007bea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bec:	b111      	cbz	r1, 8007bf4 <_reclaim_reent+0x78>
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f7ff fa84 	bl	80070fc <_free_r>
 8007bf4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007bf6:	b111      	cbz	r1, 8007bfe <_reclaim_reent+0x82>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f7ff fa7f 	bl	80070fc <_free_r>
 8007bfe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007c00:	b111      	cbz	r1, 8007c08 <_reclaim_reent+0x8c>
 8007c02:	4620      	mov	r0, r4
 8007c04:	f7ff fa7a 	bl	80070fc <_free_r>
 8007c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c0a:	b111      	cbz	r1, 8007c12 <_reclaim_reent+0x96>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f7ff fa75 	bl	80070fc <_free_r>
 8007c12:	69a3      	ldr	r3, [r4, #24]
 8007c14:	b14b      	cbz	r3, 8007c2a <_reclaim_reent+0xae>
 8007c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c18:	4620      	mov	r0, r4
 8007c1a:	4798      	blx	r3
 8007c1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c1e:	b121      	cbz	r1, 8007c2a <_reclaim_reent+0xae>
 8007c20:	4620      	mov	r0, r4
 8007c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c26:	f7ff bf9b 	b.w	8007b60 <cleanup_glue>
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	2000008c 	.word	0x2000008c

08007c30 <memchr>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	b2c9      	uxtb	r1, r1
 8007c34:	4402      	add	r2, r0
 8007c36:	4290      	cmp	r0, r2
 8007c38:	4603      	mov	r3, r0
 8007c3a:	d005      	beq.n	8007c48 <memchr+0x18>
 8007c3c:	781c      	ldrb	r4, [r3, #0]
 8007c3e:	3001      	adds	r0, #1
 8007c40:	428c      	cmp	r4, r1
 8007c42:	d1f8      	bne.n	8007c36 <memchr+0x6>
 8007c44:	4618      	mov	r0, r3
 8007c46:	bd10      	pop	{r4, pc}
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bd10      	pop	{r4, pc}

08007c4c <memmove>:
 8007c4c:	4288      	cmp	r0, r1
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	eb01 0302 	add.w	r3, r1, r2
 8007c54:	d801      	bhi.n	8007c5a <memmove+0xe>
 8007c56:	1e42      	subs	r2, r0, #1
 8007c58:	e00b      	b.n	8007c72 <memmove+0x26>
 8007c5a:	4298      	cmp	r0, r3
 8007c5c:	d2fb      	bcs.n	8007c56 <memmove+0xa>
 8007c5e:	1881      	adds	r1, r0, r2
 8007c60:	1ad2      	subs	r2, r2, r3
 8007c62:	42d3      	cmn	r3, r2
 8007c64:	d004      	beq.n	8007c70 <memmove+0x24>
 8007c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007c6e:	e7f8      	b.n	8007c62 <memmove+0x16>
 8007c70:	bd10      	pop	{r4, pc}
 8007c72:	4299      	cmp	r1, r3
 8007c74:	d004      	beq.n	8007c80 <memmove+0x34>
 8007c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c7a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007c7e:	e7f8      	b.n	8007c72 <memmove+0x26>
 8007c80:	bd10      	pop	{r4, pc}

08007c82 <_malloc_usable_size_r>:
 8007c82:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007c86:	2800      	cmp	r0, #0
 8007c88:	bfbe      	ittt	lt
 8007c8a:	1809      	addlt	r1, r1, r0
 8007c8c:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8007c90:	18c0      	addlt	r0, r0, r3
 8007c92:	3804      	subs	r0, #4
 8007c94:	4770      	bx	lr
	...

08007c98 <_getpid>:
 8007c98:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <_getpid+0xc>)
 8007c9a:	2258      	movs	r2, #88	; 0x58
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ca2:	4770      	bx	lr
 8007ca4:	20000aa4 	.word	0x20000aa4

08007ca8 <_kill>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <_kill+0xc>)
 8007caa:	2258      	movs	r2, #88	; 0x58
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cb2:	4770      	bx	lr
 8007cb4:	20000aa4 	.word	0x20000aa4

08007cb8 <_sbrk>:
 8007cb8:	4a04      	ldr	r2, [pc, #16]	; (8007ccc <_sbrk+0x14>)
 8007cba:	4905      	ldr	r1, [pc, #20]	; (8007cd0 <_sbrk+0x18>)
 8007cbc:	6813      	ldr	r3, [r2, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bf08      	it	eq
 8007cc2:	460b      	moveq	r3, r1
 8007cc4:	4418      	add	r0, r3
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	4770      	bx	lr
 8007ccc:	20000a84 	.word	0x20000a84
 8007cd0:	20000aa8 	.word	0x20000aa8

08007cd4 <_exit>:
 8007cd4:	e7fe      	b.n	8007cd4 <_exit>
 8007cd6:	bf00      	nop

08007cd8 <__EH_FRAME_BEGIN__>:
 8007cd8:	0000 0000                                   ....

08007cdc <_init>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	bf00      	nop
 8007ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce2:	bc08      	pop	{r3}
 8007ce4:	469e      	mov	lr, r3
 8007ce6:	4770      	bx	lr

08007ce8 <_fini>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	bf00      	nop
 8007cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cee:	bc08      	pop	{r3}
 8007cf0:	469e      	mov	lr, r3
 8007cf2:	4770      	bx	lr
