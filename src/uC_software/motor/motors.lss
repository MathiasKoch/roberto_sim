
motors.none-eabi:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b54  080124f8  080124f8  000224f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000038  0801404c  0801404c  0002404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001c0  08014084  08014084  00024084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08014244  08014244  00024244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801424c  0801424c  0002424c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000098  20000000  08014250  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .jcr          00000004  20000098  080142e8  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  2000009c  080142ec  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000afc  080142ec  00030afc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017269  00000000  00000000  000300c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049b8  00000000  00000000  0004732e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000adf1  00000000  00000000  0004bce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000640  00000000  00000000  00056ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000658  00000000  00000000  00057117  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005897  00000000  00000000  0005776f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007b1c  00000000  00000000  0005d006  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000006e  00000000  00000000  00064b22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f0c  00000000  00000000  00064b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000cc  00000000  00000000  00069a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00069b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <deregister_tm_clones>:
 8000110:	4b04      	ldr	r3, [pc, #16]	; (8000124 <deregister_tm_clones+0x14>)
 8000112:	4805      	ldr	r0, [pc, #20]	; (8000128 <deregister_tm_clones+0x18>)
 8000114:	1a1b      	subs	r3, r3, r0
 8000116:	2b06      	cmp	r3, #6
 8000118:	d902      	bls.n	8000120 <deregister_tm_clones+0x10>
 800011a:	4b04      	ldr	r3, [pc, #16]	; (800012c <deregister_tm_clones+0x1c>)
 800011c:	b103      	cbz	r3, 8000120 <deregister_tm_clones+0x10>
 800011e:	4718      	bx	r3
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop
 8000124:	2000009f 	.word	0x2000009f
 8000128:	2000009c 	.word	0x2000009c
 800012c:	00000000 	.word	0x00000000

08000130 <register_tm_clones>:
 8000130:	4905      	ldr	r1, [pc, #20]	; (8000148 <register_tm_clones+0x18>)
 8000132:	4806      	ldr	r0, [pc, #24]	; (800014c <register_tm_clones+0x1c>)
 8000134:	1a09      	subs	r1, r1, r0
 8000136:	1089      	asrs	r1, r1, #2
 8000138:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800013c:	1049      	asrs	r1, r1, #1
 800013e:	d002      	beq.n	8000146 <register_tm_clones+0x16>
 8000140:	4b03      	ldr	r3, [pc, #12]	; (8000150 <register_tm_clones+0x20>)
 8000142:	b103      	cbz	r3, 8000146 <register_tm_clones+0x16>
 8000144:	4718      	bx	r3
 8000146:	4770      	bx	lr
 8000148:	2000009c 	.word	0x2000009c
 800014c:	2000009c 	.word	0x2000009c
 8000150:	00000000 	.word	0x00000000

08000154 <__do_global_dtors_aux>:
 8000154:	b510      	push	{r4, lr}
 8000156:	4c06      	ldr	r4, [pc, #24]	; (8000170 <__do_global_dtors_aux+0x1c>)
 8000158:	7823      	ldrb	r3, [r4, #0]
 800015a:	b943      	cbnz	r3, 800016e <__do_global_dtors_aux+0x1a>
 800015c:	f7ff ffd8 	bl	8000110 <deregister_tm_clones>
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__do_global_dtors_aux+0x20>)
 8000162:	b113      	cbz	r3, 800016a <__do_global_dtors_aux+0x16>
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <__do_global_dtors_aux+0x24>)
 8000166:	f3af 8000 	nop.w
 800016a:	2301      	movs	r3, #1
 800016c:	7023      	strb	r3, [r4, #0]
 800016e:	bd10      	pop	{r4, pc}
 8000170:	2000009c 	.word	0x2000009c
 8000174:	00000000 	.word	0x00000000
 8000178:	080124dc 	.word	0x080124dc

0800017c <frame_dummy>:
 800017c:	b508      	push	{r3, lr}
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <frame_dummy+0x24>)
 8000180:	b11b      	cbz	r3, 800018a <frame_dummy+0xe>
 8000182:	4908      	ldr	r1, [pc, #32]	; (80001a4 <frame_dummy+0x28>)
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <frame_dummy+0x2c>)
 8000186:	f3af 8000 	nop.w
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <frame_dummy+0x30>)
 800018c:	6803      	ldr	r3, [r0, #0]
 800018e:	b913      	cbnz	r3, 8000196 <frame_dummy+0x1a>
 8000190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000194:	e7cc      	b.n	8000130 <register_tm_clones>
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <frame_dummy+0x34>)
 8000198:	2b00      	cmp	r3, #0
 800019a:	d0f9      	beq.n	8000190 <frame_dummy+0x14>
 800019c:	4798      	blx	r3
 800019e:	e7f7      	b.n	8000190 <frame_dummy+0x14>
 80001a0:	00000000 	.word	0x00000000
 80001a4:	200000a0 	.word	0x200000a0
 80001a8:	080124dc 	.word	0x080124dc
 80001ac:	20000098 	.word	0x20000098
 80001b0:	00000000 	.word	0x00000000

080001b4 <_mainCRTStartup>:
 80001b4:	4b15      	ldr	r3, [pc, #84]	; (800020c <_mainCRTStartup+0x58>)
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	bf08      	it	eq
 80001ba:	4b13      	ldreq	r3, [pc, #76]	; (8000208 <_mainCRTStartup+0x54>)
 80001bc:	469d      	mov	sp, r3
 80001be:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001c2:	2100      	movs	r1, #0
 80001c4:	468b      	mov	fp, r1
 80001c6:	460f      	mov	r7, r1
 80001c8:	4813      	ldr	r0, [pc, #76]	; (8000218 <_mainCRTStartup+0x64>)
 80001ca:	4a14      	ldr	r2, [pc, #80]	; (800021c <_mainCRTStartup+0x68>)
 80001cc:	1a12      	subs	r2, r2, r0
 80001ce:	f010 ff99 	bl	8011104 <memset>
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <_mainCRTStartup+0x5c>)
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d000      	beq.n	80001da <_mainCRTStartup+0x26>
 80001d8:	4798      	blx	r3
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <_mainCRTStartup+0x60>)
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d000      	beq.n	80001e2 <_mainCRTStartup+0x2e>
 80001e0:	4798      	blx	r3
 80001e2:	2000      	movs	r0, #0
 80001e4:	2100      	movs	r1, #0
 80001e6:	0004      	movs	r4, r0
 80001e8:	000d      	movs	r5, r1
 80001ea:	480d      	ldr	r0, [pc, #52]	; (8000220 <_mainCRTStartup+0x6c>)
 80001ec:	2800      	cmp	r0, #0
 80001ee:	d002      	beq.n	80001f6 <_mainCRTStartup+0x42>
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <_mainCRTStartup+0x70>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	f010 ff35 	bl	8011064 <__libc_init_array>
 80001fa:	0020      	movs	r0, r4
 80001fc:	0029      	movs	r1, r5
 80001fe:	f00f fcdb 	bl	800fbb8 <main>
 8000202:	f010 febf 	bl	8010f84 <exit>
 8000206:	bf00      	nop
 8000208:	00080000 	.word	0x00080000
	...
 8000218:	2000009c 	.word	0x2000009c
 800021c:	20000afc 	.word	0x20000afc
	...
 8000228:	08014250 	.word	0x08014250
 800022c:	20000000 	.word	0x20000000
 8000230:	20000098 	.word	0x20000098
 8000234:	2000009c 	.word	0x2000009c
 8000238:	20000afc 	.word	0x20000afc

0800023c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800023c:	4b38      	ldr	r3, [pc, #224]	; (8000320 <SystemInit+0xe4>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800023e:	b082      	sub	sp, #8
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	f042 0201 	orr.w	r2, r2, #1
 8000246:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000248:	6859      	ldr	r1, [r3, #4]
 800024a:	4a36      	ldr	r2, [pc, #216]	; (8000324 <SystemInit+0xe8>)
 800024c:	400a      	ands	r2, r1
 800024e:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000256:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800025a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000262:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800026a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800026c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000270:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000272:	2200      	movs	r2, #0
 8000274:	9200      	str	r2, [sp, #0]
 8000276:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000278:	681a      	ldr	r2, [r3, #0]
 800027a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800027e:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000286:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 8000288:	9a00      	ldr	r2, [sp, #0]
 800028a:	3201      	adds	r2, #1
 800028c:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800028e:	9a01      	ldr	r2, [sp, #4]
 8000290:	b91a      	cbnz	r2, 800029a <SystemInit+0x5e>
 8000292:	9a00      	ldr	r2, [sp, #0]
 8000294:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8000298:	d1f2      	bne.n	8000280 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80002a0:	bf18      	it	ne
 80002a2:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002a4:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80002a6:	9a01      	ldr	r2, [sp, #4]
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	d005      	beq.n	80002b8 <SystemInit+0x7c>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <SystemInit+0xec>)
 80002ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80002b4:	b002      	add	sp, #8
 80002b6:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80002b8:	4a1c      	ldr	r2, [pc, #112]	; (800032c <SystemInit+0xf0>)
 80002ba:	6811      	ldr	r1, [r2, #0]
 80002bc:	f041 0110 	orr.w	r1, r1, #16
 80002c0:	6011      	str	r1, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80002c2:	6811      	ldr	r1, [r2, #0]
 80002c4:	f021 0103 	bic.w	r1, r1, #3
 80002c8:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80002ca:	6811      	ldr	r1, [r2, #0]
 80002cc:	f041 0102 	orr.w	r1, r1, #2
 80002d0:	6011      	str	r1, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80002d2:	685a      	ldr	r2, [r3, #4]
 80002d4:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002e0:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80002e8:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80002f0:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002f8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002fa:	6819      	ldr	r1, [r3, #0]
 80002fc:	4a08      	ldr	r2, [pc, #32]	; (8000320 <SystemInit+0xe4>)
 80002fe:	0189      	lsls	r1, r1, #6
 8000300:	d5fb      	bpl.n	80002fa <SystemInit+0xbe>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000302:	6851      	ldr	r1, [r2, #4]
 8000304:	f021 0103 	bic.w	r1, r1, #3
 8000308:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800030a:	6851      	ldr	r1, [r2, #4]
 800030c:	f041 0102 	orr.w	r1, r1, #2
 8000310:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000312:	685a      	ldr	r2, [r3, #4]
 8000314:	f002 020c 	and.w	r2, r2, #12
 8000318:	2a08      	cmp	r2, #8
 800031a:	d1fa      	bne.n	8000312 <SystemInit+0xd6>
 800031c:	e7c6      	b.n	80002ac <SystemInit+0x70>
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	f8ff0000 	.word	0xf8ff0000
 8000328:	e000ed00 	.word	0xe000ed00
 800032c:	40022000 	.word	0x40022000

08000330 <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000330:	4a13      	ldr	r2, [pc, #76]	; (8000380 <SystemCoreClockUpdate+0x50>)
 8000332:	4b14      	ldr	r3, [pc, #80]	; (8000384 <SystemCoreClockUpdate+0x54>)
 8000334:	6851      	ldr	r1, [r2, #4]
  
  switch (tmp)
 8000336:	f001 010c 	and.w	r1, r1, #12
 800033a:	2904      	cmp	r1, #4
 800033c:	d003      	beq.n	8000346 <SystemCoreClockUpdate+0x16>
 800033e:	2908      	cmp	r1, #8
 8000340:	d003      	beq.n	800034a <SystemCoreClockUpdate+0x1a>
 8000342:	4911      	ldr	r1, [pc, #68]	; (8000388 <SystemCoreClockUpdate+0x58>)
 8000344:	e011      	b.n	800036a <SystemCoreClockUpdate+0x3a>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000346:	4911      	ldr	r1, [pc, #68]	; (800038c <SystemCoreClockUpdate+0x5c>)
 8000348:	e00f      	b.n	800036a <SystemCoreClockUpdate+0x3a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800034a:	6851      	ldr	r1, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800034c:	6850      	ldr	r0, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800034e:	f3c1 4183 	ubfx	r1, r1, #18, #4
      
      if (pllsource == 0x00)
 8000352:	03c0      	lsls	r0, r0, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000354:	f101 0102 	add.w	r1, r1, #2
      
      if (pllsource == 0x00)
 8000358:	d401      	bmi.n	800035e <SystemCoreClockUpdate+0x2e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 800035a:	480d      	ldr	r0, [pc, #52]	; (8000390 <SystemCoreClockUpdate+0x60>)
 800035c:	e004      	b.n	8000368 <SystemCoreClockUpdate+0x38>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800035e:	6850      	ldr	r0, [r2, #4]
 8000360:	0380      	lsls	r0, r0, #14
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000362:	bf4c      	ite	mi
 8000364:	4808      	ldrmi	r0, [pc, #32]	; (8000388 <SystemCoreClockUpdate+0x58>)
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 8000366:	4809      	ldrpl	r0, [pc, #36]	; (800038c <SystemCoreClockUpdate+0x5c>)
 8000368:	4341      	muls	r1, r0
 800036a:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800036c:	6852      	ldr	r2, [r2, #4]
 800036e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000372:	441a      	add	r2, r3
 8000374:	7911      	ldrb	r1, [r2, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	40ca      	lsrs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	20000004 	.word	0x20000004
 8000388:	007a1200 	.word	0x007a1200
 800038c:	00f42400 	.word	0x00f42400
 8000390:	003d0900 	.word	0x003d0900

08000394 <LED_Init>:
TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
TIM_OCInitTypeDef  TIM_OCInitStructure;



void LED_Init(){
 8000394:	b537      	push	{r0, r1, r2, r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 8000396:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 8000398:	4c18      	ldr	r4, [pc, #96]	; (80003fc <LED_Init+0x68>)
void LED_Init(){

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800039a:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800039e:	2318      	movs	r3, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003a0:	a901      	add	r1, sp, #4

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80003a2:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003a6:	4816      	ldr	r0, [pc, #88]	; (8000400 <LED_Init+0x6c>)
	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80003a8:	2303      	movs	r3, #3
 80003aa:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80003ae:	f001 fefc 	bl	80021aa <GPIO_Init>


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80003b2:	4620      	mov	r0, r4
 80003b4:	f003 f9c2 	bl	800373c <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80003b8:	2360      	movs	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80003ba:	2501      	movs	r5, #1


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80003bc:	8023      	strh	r3, [r4, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80003be:	4621      	mov	r1, r4
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80003c0:	2300      	movs	r3, #0
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80003c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 80003c6:	80e3      	strh	r3, [r4, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80003c8:	8123      	strh	r3, [r4, #8]

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80003ca:	8065      	strh	r5, [r4, #2]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 80003cc:	f003 f8e2 	bl	8003594 <TIM_OC2Init>
	
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80003d0:	2108      	movs	r1, #8
 80003d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003d6:	f003 fad1 	bl	800397c <TIM_OC2PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 80003da:	4629      	mov	r1, r5
 80003dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003e0:	f003 fa94 	bl	800390c <TIM_ARRPreloadConfig>


	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 80003e4:	4629      	mov	r1, r5
 80003e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003ea:	f003 f9ce 	bl	800378a <TIM_CtrlPWMOutputs>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80003ee:	4629      	mov	r1, r5
 80003f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003f4:	f003 f9bd 	bl	8003772 <TIM_Cmd>
}
 80003f8:	b003      	add	sp, #12
 80003fa:	bd30      	pop	{r4, r5, pc}
 80003fc:	20000ae6 	.word	0x20000ae6
 8000400:	40010800 	.word	0x40010800

08000404 <led_set>:


void led_set(uint8_t val){
	TIM2->CCR2 = val*TIM2->ARR/255;
 8000404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000408:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800040a:	b29b      	uxth	r3, r3
 800040c:	4358      	muls	r0, r3
 800040e:	23ff      	movs	r3, #255	; 0xff
 8000410:	fb90 f0f3 	sdiv	r0, r0, r3
 8000414:	b280      	uxth	r0, r0
 8000416:	8710      	strh	r0, [r2, #56]	; 0x38
 8000418:	4770      	bx	lr

0800041a <DEBUG_Init>:
}

void DEBUG_Init(){
 800041a:	b507      	push	{r0, r1, r2, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 800041c:	2330      	movs	r3, #48	; 0x30
 800041e:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000422:	2303      	movs	r3, #3
 8000424:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000428:	a901      	add	r1, sp, #4
void DEBUG_Init(){
  GPIO_InitTypeDef  GPIO_InitStructure;

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800042a:	2310      	movs	r3, #16
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <DEBUG_Init+0x22>)
void DEBUG_Init(){
  GPIO_InitTypeDef  GPIO_InitStructure;

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800042e:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000432:	f001 feba 	bl	80021aa <GPIO_Init>
}
 8000436:	b003      	add	sp, #12
 8000438:	f85d fb04 	ldr.w	pc, [sp], #4
 800043c:	40010c00 	.word	0x40010c00

08000440 <debug_toggle>:

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 8000440:	2120      	movs	r1, #32
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
}

void debug_toggle(void){
 8000442:	b508      	push	{r3, lr}
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 8000444:	4807      	ldr	r0, [pc, #28]	; (8000464 <debug_toggle+0x24>)
 8000446:	f001 ff13 	bl	8002270 <GPIO_ReadOutputDataBit>
    if(led_bit == (uint8_t)Bit_SET)
 800044a:	2801      	cmp	r0, #1
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 800044c:	f04f 0120 	mov.w	r1, #32
 8000450:	4804      	ldr	r0, [pc, #16]	; (8000464 <debug_toggle+0x24>)
  GPIO_Init(GPIOB, &GPIO_InitStructure);
}

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
 8000452:	d103      	bne.n	800045c <debug_toggle+0x1c>
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
 8000454:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 8000458:	f001 bf15 	b.w	8002286 <GPIO_ResetBits>
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
 800045c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
 8000460:	f001 bf0f 	b.w	8002282 <GPIO_SetBits>
 8000464:	40010c00 	.word	0x40010c00

08000468 <I2C1_Init>:

#include <stm32f10x.h>
#include "encoder.h"


void I2C1_Init(void){
 8000468:	b510      	push	{r4, lr}
    GPIO_InitTypeDef  GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

    /* I2C1 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800046a:	2101      	movs	r1, #1

#include <stm32f10x.h>
#include "encoder.h"


void I2C1_Init(void){
 800046c:	b086      	sub	sp, #24
    GPIO_InitTypeDef  GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

    /* I2C1 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800046e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000472:	f002 fb05 	bl	8002a80 <RCC_APB1PeriphClockCmd>

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000476:	23c0      	movs	r3, #192	; 0xc0
 8000478:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800047c:	2303      	movs	r3, #3
 800047e:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000482:	a901      	add	r1, sp, #4
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8000484:	231c      	movs	r3, #28
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000486:	4814      	ldr	r0, [pc, #80]	; (80004d8 <I2C1_Init+0x70>)
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8000488:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 800048c:	f001 fe8d 	bl	80021aa <GPIO_Init>
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8000490:	f64b 72ff 	movw	r2, #49151	; 0xbfff
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000494:	2300      	movs	r3, #0
 8000496:	f8ad 300c 	strh.w	r3, [sp, #12]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800049a:	f8ad 3010 	strh.w	r3, [sp, #16]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800049e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a2:	f8ad 3012 	strh.w	r3, [sp, #18]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004aa:	f8ad 3014 	strh.w	r3, [sp, #20]
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
    I2C_Init(I2C1, &I2C_InitStructure);
 80004ae:	4c0b      	ldr	r4, [pc, #44]	; (80004dc <I2C1_Init+0x74>)
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <I2C1_Init+0x78>)
 80004b2:	a906      	add	r1, sp, #24
 80004b4:	f841 3d10 	str.w	r3, [r1, #-16]!
    I2C_Init(I2C1, &I2C_InitStructure);
 80004b8:	4620      	mov	r0, r4
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80004ba:	f8ad 200e 	strh.w	r2, [sp, #14]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
    I2C_Init(I2C1, &I2C_InitStructure);
 80004be:	f001 ff6b 	bl	8002398 <I2C_Init>

     /*enable I2C*/
    I2C_Cmd(I2C1,ENABLE);
 80004c2:	2101      	movs	r1, #1
 80004c4:	4620      	mov	r0, r4
 80004c6:	f001 ffdf 	bl	8002488 <I2C_Cmd>
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <I2C1_Init+0x7c>)
 80004cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80004d0:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(I2C1_EV_IRQn);
}
 80004d2:	b006      	add	sp, #24
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	bf00      	nop
 80004d8:	40010c00 	.word	0x40010c00
 80004dc:	40005400 	.word	0x40005400
 80004e0:	000186a0 	.word	0x000186a0
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check on EV5 */
  if(I2C_GetITStatus(I2C1, I2C_IT_SB)== SET){
 80004ea:	495b      	ldr	r1, [pc, #364]	; (8000658 <I2C1_EV_IRQHandler+0x170>)
 80004ec:	485b      	ldr	r0, [pc, #364]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 80004ee:	f002 f8f6 	bl	80026de <I2C_GetITStatus>
 80004f2:	2801      	cmp	r0, #1
 80004f4:	4604      	mov	r4, r0
 80004f6:	d110      	bne.n	800051a <I2C1_EV_IRQHandler+0x32>
    /* Send slave Address for read */
    I2C_Send7bitAddress(I2C1, slaveAddress<<1, I2C_Direction_Receiver);
 80004f8:	4b59      	ldr	r3, [pc, #356]	; (8000660 <I2C1_EV_IRQHandler+0x178>)
 80004fa:	4602      	mov	r2, r0
 80004fc:	7819      	ldrb	r1, [r3, #0]
 80004fe:	4857      	ldr	r0, [pc, #348]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 8000500:	0049      	lsls	r1, r1, #1
 8000502:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000506:	f002 f836 	bl	8002576 <I2C_Send7bitAddress>
    if (NumberOfByteToReceive == 0x03){
 800050a:	4b56      	ldr	r3, [pc, #344]	; (8000664 <I2C1_EV_IRQHandler+0x17c>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b03      	cmp	r3, #3
 8000510:	d02b      	beq.n	800056a <I2C1_EV_IRQHandler+0x82>
      /* Disable buffer Interrupts */
      I2C_ITConfig(I2C1, I2C_IT_BUF , DISABLE);
    }else{    	
      /* Enable buffer Interrupts */
      I2C_ITConfig(I2C1, I2C_IT_BUF , ENABLE);
 8000512:	4622      	mov	r2, r4
 8000514:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000518:	e08a      	b.n	8000630 <I2C1_EV_IRQHandler+0x148>
    }
  }else if(I2C_GetITStatus(I2C1, I2C_IT_ADDR)== SET){
 800051a:	4953      	ldr	r1, [pc, #332]	; (8000668 <I2C1_EV_IRQHandler+0x180>)
 800051c:	484f      	ldr	r0, [pc, #316]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 800051e:	f002 f8de 	bl	80026de <I2C_GetITStatus>
 8000522:	2801      	cmp	r0, #1
 8000524:	d123      	bne.n	800056e <I2C1_EV_IRQHandler+0x86>
    if (NumberOfByteToReceive == 1){
 8000526:	4c4f      	ldr	r4, [pc, #316]	; (8000664 <I2C1_EV_IRQHandler+0x17c>)
 8000528:	7823      	ldrb	r3, [r4, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d103      	bne.n	8000536 <I2C1_EV_IRQHandler+0x4e>
      I2C_AcknowledgeConfig(I2C1, DISABLE);
 800052e:	2100      	movs	r1, #0
 8000530:	484a      	ldr	r0, [pc, #296]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 8000532:	f001 ffe5 	bl	8002500 <I2C_AcknowledgeConfig>
    }
    
    /* Clear ADDR Register */
    (void)(I2C1->SR1);
 8000536:	4849      	ldr	r0, [pc, #292]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 8000538:	8a83      	ldrh	r3, [r0, #20]
    (void)(I2C1->SR2);  
 800053a:	8b03      	ldrh	r3, [r0, #24]
    if (GenerateStartStatus == 0x00){ 
 800053c:	4b4b      	ldr	r3, [pc, #300]	; (800066c <I2C1_EV_IRQHandler+0x184>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	f040 8087 	bne.w	8000654 <I2C1_EV_IRQHandler+0x16c>
      if (NumberOfByteToReceive == 1){
 8000546:	7821      	ldrb	r1, [r4, #0]
 8000548:	b2c9      	uxtb	r1, r1
 800054a:	2901      	cmp	r1, #1
 800054c:	d101      	bne.n	8000552 <I2C1_EV_IRQHandler+0x6a>
         I2C_GenerateSTOP(I2C1, ENABLE);  
 800054e:	f001 ffcb 	bl	80024e8 <I2C_GenerateSTOP>
      }  
      if (NumberOfByteToReceive == 2){
 8000552:	7823      	ldrb	r3, [r4, #0]
 8000554:	2b02      	cmp	r3, #2
 8000556:	d17d      	bne.n	8000654 <I2C1_EV_IRQHandler+0x16c>
        I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000558:	2100      	movs	r1, #0
 800055a:	4840      	ldr	r0, [pc, #256]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 800055c:	f001 ffd0 	bl	8002500 <I2C_AcknowledgeConfig>
        I2C_NACKPositionConfig(I2C1, I2C_NACKPosition_Next);
 8000560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000564:	483d      	ldr	r0, [pc, #244]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 8000566:	f002 f84f 	bl	8002608 <I2C_NACKPositionConfig>
        /* Disable buffer Interrupts */
        I2C_ITConfig(I2C1, I2C_IT_BUF , DISABLE);
 800056a:	2200      	movs	r2, #0
 800056c:	e7d2      	b.n	8000514 <I2C1_EV_IRQHandler+0x2c>
      }
    }
  }else if((I2C_GetITStatus(I2C1, I2C_IT_RXNE)== SET)
 800056e:	4940      	ldr	r1, [pc, #256]	; (8000670 <I2C1_EV_IRQHandler+0x188>)
 8000570:	483a      	ldr	r0, [pc, #232]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 8000572:	f002 f8b4 	bl	80026de <I2C_GetITStatus>
 8000576:	2801      	cmp	r0, #1
 8000578:	d125      	bne.n	80005c6 <I2C1_EV_IRQHandler+0xde>
  				&&(I2C_GetITStatus(I2C1, I2C_IT_BTF)== RESET)){  	
 800057a:	493e      	ldr	r1, [pc, #248]	; (8000674 <I2C1_EV_IRQHandler+0x18c>)
 800057c:	4837      	ldr	r0, [pc, #220]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 800057e:	f002 f8ae 	bl	80026de <I2C_GetITStatus>
 8000582:	4605      	mov	r5, r0
 8000584:	b9f8      	cbnz	r0, 80005c6 <I2C1_EV_IRQHandler+0xde>

    /* Store I2C received data */
    RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 8000586:	4a3c      	ldr	r2, [pc, #240]	; (8000678 <I2C1_EV_IRQHandler+0x190>)
 8000588:	4834      	ldr	r0, [pc, #208]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 800058a:	7814      	ldrb	r4, [r2, #0]
 800058c:	b2e4      	uxtb	r4, r4
 800058e:	1c63      	adds	r3, r4, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	7013      	strb	r3, [r2, #0]
 8000594:	f001 ffec 	bl	8002570 <I2C_ReceiveData>
 8000598:	4b38      	ldr	r3, [pc, #224]	; (800067c <I2C1_EV_IRQHandler+0x194>)
 800059a:	5518      	strb	r0, [r3, r4]
    NumberOfByteToReceive--;
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <I2C1_EV_IRQHandler+0x17c>)
 800059e:	7819      	ldrb	r1, [r3, #0]
 80005a0:	461c      	mov	r4, r3
 80005a2:	3901      	subs	r1, #1
 80005a4:	b2c9      	uxtb	r1, r1
 80005a6:	7019      	strb	r1, [r3, #0]
    
    if (NumberOfByteToReceive == 0x03){
 80005a8:	781a      	ldrb	r2, [r3, #0]
 80005aa:	2a03      	cmp	r2, #3
 80005ac:	d105      	bne.n	80005ba <I2C1_EV_IRQHandler+0xd2>
      /* Disable buffer Interrupts */
      I2C_ITConfig(I2C1, I2C_IT_BUF , DISABLE);
 80005ae:	462a      	mov	r2, r5
 80005b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b4:	4829      	ldr	r0, [pc, #164]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 80005b6:	f001 ffd0 	bl	800255a <I2C_ITConfig>
    }
    if (NumberOfByteToReceive == 0x00){    	
 80005ba:	7823      	ldrb	r3, [r4, #0]
 80005bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d147      	bne.n	8000654 <I2C1_EV_IRQHandler+0x16c>
 80005c4:	e032      	b.n	800062c <I2C1_EV_IRQHandler+0x144>
      /* Disable Error and Buffer Interrupts */
      I2C_ITConfig(I2C1, (I2C_IT_EVT | I2C_IT_BUF), DISABLE);            
    }
  }else if(I2C_GetITStatus(I2C1, I2C_IT_BTF)== SET){ /* BUSY, MSL and RXNE flags */
 80005c6:	492b      	ldr	r1, [pc, #172]	; (8000674 <I2C1_EV_IRQHandler+0x18c>)
 80005c8:	4824      	ldr	r0, [pc, #144]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 80005ca:	f002 f888 	bl	80026de <I2C_GetITStatus>
 80005ce:	2801      	cmp	r0, #1
 80005d0:	4601      	mov	r1, r0
 80005d2:	d13f      	bne.n	8000654 <I2C1_EV_IRQHandler+0x16c>
    /* if Three bytes remaining for reception */
    if (NumberOfByteToReceive == 3){
 80005d4:	4c23      	ldr	r4, [pc, #140]	; (8000664 <I2C1_EV_IRQHandler+0x17c>)
 80005d6:	4d28      	ldr	r5, [pc, #160]	; (8000678 <I2C1_EV_IRQHandler+0x190>)
 80005d8:	7823      	ldrb	r3, [r4, #0]
 80005da:	4f28      	ldr	r7, [pc, #160]	; (800067c <I2C1_EV_IRQHandler+0x194>)
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d104      	bne.n	80005ea <I2C1_EV_IRQHandler+0x102>
      I2C_AcknowledgeConfig(I2C1, DISABLE);
 80005e0:	2100      	movs	r1, #0
 80005e2:	481e      	ldr	r0, [pc, #120]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 80005e4:	f001 ff8c 	bl	8002500 <I2C_AcknowledgeConfig>
 80005e8:	e027      	b.n	800063a <I2C1_EV_IRQHandler+0x152>
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
      NumberOfByteToReceive--;        
    }else if (NumberOfByteToReceive == 2){           
 80005ea:	7823      	ldrb	r3, [r4, #0]
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d124      	bne.n	800063a <I2C1_EV_IRQHandler+0x152>
      I2C_GenerateSTOP(I2C1, ENABLE);    
 80005f0:	481a      	ldr	r0, [pc, #104]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 80005f2:	f001 ff79 	bl	80024e8 <I2C_GenerateSTOP>
      
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 80005f6:	782e      	ldrb	r6, [r5, #0]
 80005f8:	4818      	ldr	r0, [pc, #96]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 80005fa:	b2f6      	uxtb	r6, r6
 80005fc:	1c73      	adds	r3, r6, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	702b      	strb	r3, [r5, #0]
 8000602:	f001 ffb5 	bl	8002570 <I2C_ReceiveData>
      NumberOfByteToReceive--;
 8000606:	7823      	ldrb	r3, [r4, #0]
      NumberOfByteToReceive--;        
    }else if (NumberOfByteToReceive == 2){           
      I2C_GenerateSTOP(I2C1, ENABLE);    
      
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 8000608:	55b8      	strb	r0, [r7, r6]
      NumberOfByteToReceive--;
 800060a:	3b01      	subs	r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	7023      	strb	r3, [r4, #0]
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 8000610:	782e      	ldrb	r6, [r5, #0]
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 8000614:	b2f6      	uxtb	r6, r6
 8000616:	1c73      	adds	r3, r6, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	702b      	strb	r3, [r5, #0]
 800061c:	f001 ffa8 	bl	8002570 <I2C_ReceiveData>
      NumberOfByteToReceive--;        
 8000620:	7823      	ldrb	r3, [r4, #0]
      
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
      NumberOfByteToReceive--;
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 8000622:	55b8      	strb	r0, [r7, r6]
      NumberOfByteToReceive--;        
 8000624:	3b01      	subs	r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	7023      	strb	r3, [r4, #0]
      /* Disable Error and Buffer Interrupts */
      I2C_ITConfig(I2C1, (I2C_IT_EVT | I2C_IT_BUF), DISABLE);            
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <I2C1_EV_IRQHandler+0x174>)
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
      NumberOfByteToReceive--;
    }
  } 
 8000632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      NumberOfByteToReceive--;
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
      NumberOfByteToReceive--;        
      /* Disable Error and Buffer Interrupts */
      I2C_ITConfig(I2C1, (I2C_IT_EVT | I2C_IT_BUF), DISABLE);            
 8000636:	f001 bf90 	b.w	800255a <I2C_ITConfig>
    }else{
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 800063a:	782e      	ldrb	r6, [r5, #0]
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <I2C1_EV_IRQHandler+0x174>)
 800063e:	b2f6      	uxtb	r6, r6
 8000640:	1c73      	adds	r3, r6, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	702b      	strb	r3, [r5, #0]
 8000646:	f001 ff93 	bl	8002570 <I2C_ReceiveData>
      NumberOfByteToReceive--;
 800064a:	7823      	ldrb	r3, [r4, #0]
      NumberOfByteToReceive--;        
      /* Disable Error and Buffer Interrupts */
      I2C_ITConfig(I2C1, (I2C_IT_EVT | I2C_IT_BUF), DISABLE);            
    }else{
      /* Store I2C received data */
      RxBuffer[Rx_Idx++] = I2C_ReceiveData (I2C1);
 800064c:	55b8      	strb	r0, [r7, r6]
      NumberOfByteToReceive--;
 800064e:	3b01      	subs	r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	7023      	strb	r3, [r4, #0]
 8000654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000656:	bf00      	nop
 8000658:	02000001 	.word	0x02000001
 800065c:	40005400 	.word	0x40005400
 8000660:	20000ab7 	.word	0x20000ab7
 8000664:	20000ab1 	.word	0x20000ab1
 8000668:	02000002 	.word	0x02000002
 800066c:	20000ab0 	.word	0x20000ab0
 8000670:	06000040 	.word	0x06000040
 8000674:	02000004 	.word	0x02000004
 8000678:	20000ab8 	.word	0x20000ab8
 800067c:	20000ab2 	.word	0x20000ab2

08000680 <SysTick_Init>:
	/****************************************
	 *SystemFrequency/1000      1ms         *
	 *SystemFrequency/100000    10us        *
	 *SystemFrequency/1000000   1us         *
	 *****************************************/
	while (SysTick_Config(SystemCoreClock / 1000) != 0); // One SysTick interrupt now equals 1us
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <SysTick_Init+0x24>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000686:	681b      	ldr	r3, [r3, #0]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8000688:	21f0      	movs	r1, #240	; 0xf0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800068a:	fbb3 f3f2 	udiv	r3, r3, r2
 800068e:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <SysTick_Init+0x28>)
 8000690:	3b01      	subs	r3, #1
 8000692:	6053      	str	r3, [r2, #4]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <SysTick_Init+0x2c>)
 8000696:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800069a:	2300      	movs	r3, #0
 800069c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 800069e:	2307      	movs	r3, #7
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	4770      	bx	lr
 80006a4:	20000004 	.word	0x20000004
 80006a8:	e000e010 	.word	0xe000e010
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <SysTick_Handler>:
/**
 * This method needs to be called in the SysTick_Handler
 */

void SysTick_Handler(void) {
	sysTickCounter++;
 80006b0:	4a02      	ldr	r2, [pc, #8]	; (80006bc <SysTick_Handler+0xc>)
 80006b2:	6813      	ldr	r3, [r2, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	200000b8 	.word	0x200000b8

080006c0 <delay>:
	uint32_t i = sysTickCounter;
	while (sysTickCounter - i < n);
}*/
 
void delay(uint32_t n) {
	uint32_t i = sysTickCounter;
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <delay+0x10>)
 80006c2:	6819      	ldr	r1, [r3, #0]
	while ((sysTickCounter - i) < (n));
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	1a52      	subs	r2, r2, r1
 80006c8:	4282      	cmp	r2, r0
 80006ca:	d3fb      	bcc.n	80006c4 <delay+0x4>
}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	200000b8 	.word	0x200000b8

080006d4 <millis>:

uint32_t millis(void){
	return sysTickCounter;
 80006d4:	4b01      	ldr	r3, [pc, #4]	; (80006dc <millis+0x8>)
 80006d6:	6818      	ldr	r0, [r3, #0]
}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	200000b8 	.word	0x200000b8

080006e0 <RCC_Configuration>:

void RCC_Configuration(void){
 80006e0:	b508      	push	{r3, lr}
  /* PCLK1 = HCLK/4 */
  RCC_PCLK1Config(RCC_HCLK_Div4);
 80006e2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80006e6:	f002 f919 	bl	800291c <RCC_PCLK1Config>

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, ENABLE);
 80006ea:	2101      	movs	r1, #1
 80006ec:	2007      	movs	r0, #7
 80006ee:	f002 f9c7 	bl	8002a80 <RCC_APB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80006f2:	2101      	movs	r1, #1
 80006f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80006f8:	f002 f9b6 	bl	8002a68 <RCC_APB2PeriphClockCmd>
 
 
  /* GPIOA, GPIOB and GPIOC clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 80006fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 
 
  /* GPIOA, GPIOB and GPIOC clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 8000700:	2101      	movs	r1, #1
 8000702:	201d      	movs	r0, #29
 8000704:	f002 b9b0 	b.w	8002a68 <RCC_APB2PeriphClockCmd>

08000708 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 8000708:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <ADC_DeInit+0x54>)
 800070c:	4298      	cmp	r0, r3
 800070e:	d108      	bne.n	8000722 <ADC_DeInit+0x1a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000710:	2101      	movs	r1, #1
 8000712:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000716:	f002 f9bf 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 800071a:	2100      	movs	r1, #0
 800071c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000720:	e016      	b.n	8000750 <ADC_DeInit+0x48>
  }
  else if (ADCx == ADC2)
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <ADC_DeInit+0x58>)
 8000724:	4298      	cmp	r0, r3
 8000726:	d108      	bne.n	800073a <ADC_DeInit+0x32>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 8000728:	2101      	movs	r1, #1
 800072a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800072e:	f002 f9b3 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 8000732:	2100      	movs	r1, #0
 8000734:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000738:	e00a      	b.n	8000750 <ADC_DeInit+0x48>
  }
  else
  {
    if (ADCx == ADC3)
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <ADC_DeInit+0x5c>)
 800073c:	4298      	cmp	r0, r3
 800073e:	d10b      	bne.n	8000758 <ADC_DeInit+0x50>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 8000740:	2101      	movs	r1, #1
 8000742:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000746:	f002 f9a7 	bl	8002a98 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 800074a:	2100      	movs	r1, #0
 800074c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }
  }
}
 8000750:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (ADCx == ADC3)
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 8000754:	f002 b9a0 	b.w	8002a98 <RCC_APB2PeriphResetCmd>
 8000758:	bd08      	pop	{r3, pc}
 800075a:	bf00      	nop
 800075c:	40012400 	.word	0x40012400
 8000760:	40012800 	.word	0x40012800
 8000764:	40013c00 	.word	0x40013c00

08000768 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000768:	6843      	ldr	r3, [r0, #4]
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800076a:	b510      	push	{r4, lr}
 800076c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000770:	680b      	ldr	r3, [r1, #0]
 8000772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000776:	4313      	orrs	r3, r2
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000778:	790a      	ldrb	r2, [r1, #4]
 800077a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800077e:	6043      	str	r3, [r0, #4]
 8000780:	68ca      	ldr	r2, [r1, #12]
 8000782:	688b      	ldr	r3, [r1, #8]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000784:	6884      	ldr	r4, [r0, #8]
 8000786:	431a      	orrs	r2, r3
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <ADC_Init+0x44>)
 800078a:	4023      	ands	r3, r4
 800078c:	4313      	orrs	r3, r2
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800078e:	794a      	ldrb	r2, [r1, #5]
 8000790:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000794:	6083      	str	r3, [r0, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000796:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 8000798:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 800079c:	7c0b      	ldrb	r3, [r1, #16]
 800079e:	3b01      	subs	r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80007a6:	62c3      	str	r3, [r0, #44]	; 0x2c
 80007a8:	bd10      	pop	{r4, pc}
 80007aa:	bf00      	nop
 80007ac:	fff1f7fd 	.word	0xfff1f7fd

080007b0 <ADC_StructInit>:
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 80007b0:	2300      	movs	r3, #0
 80007b2:	6003      	str	r3, [r0, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80007b4:	7103      	strb	r3, [r0, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80007b6:	7143      	strb	r3, [r0, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80007b8:	6083      	str	r3, [r0, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80007ba:	60c3      	str	r3, [r0, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	7403      	strb	r3, [r0, #16]
 80007c0:	4770      	bx	lr

080007c2 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 80007c2:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007c4:	b111      	cbz	r1, 80007cc <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	e001      	b.n	80007d0 <ADC_Cmd+0xe>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	6083      	str	r3, [r0, #8]
 80007d2:	4770      	bx	lr

080007d4 <ADC_DMACmd>:
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 80007d4:	6883      	ldr	r3, [r0, #8]
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007d6:	b111      	cbz	r1, 80007de <ADC_DMACmd+0xa>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 80007d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007dc:	e001      	b.n	80007e2 <ADC_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 80007de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007e2:	6083      	str	r3, [r0, #8]
 80007e4:	4770      	bx	lr

080007e6 <ADC_ITConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80007e6:	b2c9      	uxtb	r1, r1
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80007e8:	6843      	ldr	r3, [r0, #4]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  if (NewState != DISABLE)
 80007ea:	b10a      	cbz	r2, 80007f0 <ADC_ITConfig+0xa>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80007ec:	4319      	orrs	r1, r3
 80007ee:	e001      	b.n	80007f4 <ADC_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80007f0:	ea23 0101 	bic.w	r1, r3, r1
 80007f4:	6041      	str	r1, [r0, #4]
 80007f6:	4770      	bx	lr

080007f8 <ADC_ResetCalibration>:
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 80007f8:	6883      	ldr	r3, [r0, #8]
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6083      	str	r3, [r0, #8]
 8000800:	4770      	bx	lr

08000802 <ADC_GetResetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000802:	6880      	ldr	r0, [r0, #8]
    /* RSTCAL bit is reset */
    bitstatus = RESET;
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
}
 8000804:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000808:	4770      	bx	lr

0800080a <ADC_StartCalibration>:
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800080a:	6883      	ldr	r3, [r0, #8]
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6083      	str	r3, [r0, #8]
 8000812:	4770      	bx	lr

08000814 <ADC_GetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8000814:	6880      	ldr	r0, [r0, #8]
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
  }
  /* Return the CAL bit status */
  return  bitstatus;
}
 8000816:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800081a:	4770      	bx	lr

0800081c <ADC_SoftwareStartConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 800081c:	6883      	ldr	r3, [r0, #8]
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800081e:	b111      	cbz	r1, 8000826 <ADC_SoftwareStartConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 8000820:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000824:	e001      	b.n	800082a <ADC_SoftwareStartConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8000826:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 800082a:	6083      	str	r3, [r0, #8]
 800082c:	4770      	bx	lr

0800082e <ADC_GetSoftwareStartConvStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 800082e:	6880      	ldr	r0, [r0, #8]
    /* SWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 8000830:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8000834:	4770      	bx	lr

08000836 <ADC_DiscModeChannelCountConfig>:
  uint32_t tmpreg2 = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8000836:	6843      	ldr	r3, [r0, #4]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 8000838:	3901      	subs	r1, #1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
 800083a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 800083e:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8000842:	6043      	str	r3, [r0, #4]
 8000844:	4770      	bx	lr

08000846 <ADC_DiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 8000846:	6843      	ldr	r3, [r0, #4]
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000848:	b111      	cbz	r1, 8000850 <ADC_DiscModeCmd+0xa>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 800084a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800084e:	e001      	b.n	8000854 <ADC_DiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
 8000850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000854:	6043      	str	r3, [r0, #4]
 8000856:	4770      	bx	lr

08000858 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000858:	2909      	cmp	r1, #9
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800085a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800085c:	d90d      	bls.n	800087a <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 800085e:	f1a1 040a 	sub.w	r4, r1, #10
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000862:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000864:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000868:	2507      	movs	r5, #7
 800086a:	40a5      	lsls	r5, r4
 800086c:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000870:	fa03 f404 	lsl.w	r4, r3, r4
 8000874:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000876:	60c4      	str	r4, [r0, #12]
 8000878:	e00a      	b.n	8000890 <ADC_RegularChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800087a:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800087c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000880:	2507      	movs	r5, #7
 8000882:	40a5      	lsls	r5, r4
 8000884:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000888:	fa03 f404 	lsl.w	r4, r3, r4
 800088c:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800088e:	6104      	str	r4, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000890:	2a06      	cmp	r2, #6
 8000892:	d80c      	bhi.n	80008ae <ADC_RegularChannelConfig+0x56>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000894:	3a01      	subs	r2, #1
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000896:	6b44      	ldr	r4, [r0, #52]	; 0x34
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000898:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800089c:	231f      	movs	r3, #31
 800089e:	4093      	lsls	r3, r2
 80008a0:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80008aa:	6342      	str	r2, [r0, #52]	; 0x34
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80008ae:	2a0c      	cmp	r2, #12
 80008b0:	d80c      	bhi.n	80008cc <ADC_RegularChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80008b2:	3a07      	subs	r2, #7
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80008b4:	6b04      	ldr	r4, [r0, #48]	; 0x30
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 80008b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008ba:	231f      	movs	r3, #31
 80008bc:	4093      	lsls	r3, r2
 80008be:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008c2:	fa01 f202 	lsl.w	r2, r1, r2
 80008c6:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80008c8:	6302      	str	r2, [r0, #48]	; 0x30
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80008cc:	3a0d      	subs	r2, #13
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80008ce:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80008d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008d4:	231f      	movs	r3, #31
 80008d6:	4093      	lsls	r3, r2
 80008d8:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80008e2:	62c2      	str	r2, [r0, #44]	; 0x2c
 80008e4:	bd70      	pop	{r4, r5, r6, pc}

080008e6 <ADC_ExternalTrigConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 80008e6:	6883      	ldr	r3, [r0, #8]
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008e8:	b111      	cbz	r1, 80008f0 <ADC_ExternalTrigConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 80008ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008ee:	e001      	b.n	80008f4 <ADC_ExternalTrigConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 80008f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80008f4:	6083      	str	r3, [r0, #8]
 80008f6:	4770      	bx	lr

080008f8 <ADC_GetConversionValue>:
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80008f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 80008fa:	b280      	uxth	r0, r0
 80008fc:	4770      	bx	lr

080008fe <ADC_GetDualModeConversionValue>:
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
 80008fe:	4b01      	ldr	r3, [pc, #4]	; (8000904 <ADC_GetDualModeConversionValue+0x6>)
 8000900:	6818      	ldr	r0, [r3, #0]
}
 8000902:	4770      	bx	lr
 8000904:	4001244c 	.word	0x4001244c

08000908 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 8000908:	6843      	ldr	r3, [r0, #4]
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800090a:	b111      	cbz	r1, 8000912 <ADC_AutoInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 800090c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000910:	e001      	b.n	8000916 <ADC_AutoInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
 8000912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000916:	6043      	str	r3, [r0, #4]
 8000918:	4770      	bx	lr

0800091a <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 800091a:	6843      	ldr	r3, [r0, #4]
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800091c:	b111      	cbz	r1, 8000924 <ADC_InjectedDiscModeCmd+0xa>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 800091e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000922:	e001      	b.n	8000928 <ADC_InjectedDiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 8000924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000928:	6043      	str	r3, [r0, #4]
 800092a:	4770      	bx	lr

0800092c <ADC_ExternalTrigInjectedConvConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 800092c:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
 800092e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8000932:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000934:	6081      	str	r1, [r0, #8]
 8000936:	4770      	bx	lr

08000938 <ADC_ExternalTrigInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 8000938:	6883      	ldr	r3, [r0, #8]
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800093a:	b111      	cbz	r1, 8000942 <ADC_ExternalTrigInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 800093c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000940:	e001      	b.n	8000946 <ADC_ExternalTrigInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 8000942:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000946:	6083      	str	r3, [r0, #8]
 8000948:	4770      	bx	lr

0800094a <ADC_SoftwareStartInjectedConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 800094a:	6883      	ldr	r3, [r0, #8]
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800094c:	b111      	cbz	r1, 8000954 <ADC_SoftwareStartInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 800094e:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 8000952:	e001      	b.n	8000958 <ADC_SoftwareStartInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 8000954:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 8000958:	6083      	str	r3, [r0, #8]
 800095a:	4770      	bx	lr

0800095c <ADC_GetSoftwareStartInjectedConvCmdStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 800095c:	6880      	ldr	r0, [r0, #8]
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 800095e:	f3c0 5040 	ubfx	r0, r0, #21, #1
 8000962:	4770      	bx	lr

08000964 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000964:	2909      	cmp	r1, #9
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000966:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000968:	d90d      	bls.n	8000986 <ADC_InjectedChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 800096a:	f1a1 040a 	sub.w	r4, r1, #10
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800096e:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 8000970:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000974:	2507      	movs	r5, #7
 8000976:	40a5      	lsls	r5, r4
 8000978:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 800097c:	fa03 f404 	lsl.w	r4, r3, r4
 8000980:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000982:	60c4      	str	r4, [r0, #12]
 8000984:	e00a      	b.n	800099c <ADC_InjectedChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000986:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000988:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800098c:	2507      	movs	r5, #7
 800098e:	40a5      	lsls	r5, r4
 8000990:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000994:	fa03 f404 	lsl.w	r4, r3, r4
 8000998:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800099a:	6104      	str	r4, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800099c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800099e:	3202      	adds	r2, #2
 80009a0:	f3c3 5401 	ubfx	r4, r3, #20, #2
 80009a4:	1b12      	subs	r2, r2, r4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80009ac:	241f      	movs	r4, #31
 80009ae:	4094      	lsls	r4, r2
 80009b0:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80009b4:	4091      	lsls	r1, r2
 80009b6:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80009b8:	6381      	str	r1, [r0, #56]	; 0x38
 80009ba:	bd70      	pop	{r4, r5, r6, pc}

080009bc <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80009bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 80009be:	3901      	subs	r1, #1
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
 80009c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 80009c4:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80009c8:	6383      	str	r3, [r0, #56]	; 0x38
 80009ca:	4770      	bx	lr

080009cc <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 80009cc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
 80009d2:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 80009d4:	9b01      	ldr	r3, [sp, #4]
 80009d6:	4419      	add	r1, r3
 80009d8:	9101      	str	r1, [sp, #4]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80009da:	9b01      	ldr	r3, [sp, #4]
 80009dc:	601a      	str	r2, [r3, #0]
}
 80009de:	b002      	add	sp, #8
 80009e0:	4770      	bx	lr

080009e2 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 80009e2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80009e8:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_Offset;
 80009ea:	9b01      	ldr	r3, [sp, #4]
 80009ec:	3328      	adds	r3, #40	; 0x28
 80009ee:	4419      	add	r1, r3
 80009f0:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 80009f2:	9b01      	ldr	r3, [sp, #4]
 80009f4:	6818      	ldr	r0, [r3, #0]
}
 80009f6:	b280      	uxth	r0, r0
 80009f8:	b002      	add	sp, #8
 80009fa:	4770      	bx	lr

080009fc <ADC_AnalogWatchdogCmd>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80009fc:	6843      	ldr	r3, [r0, #4]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
 80009fe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000a02:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000a06:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000a08:	6041      	str	r1, [r0, #4]
 8000a0a:	4770      	bx	lr

08000a0c <ADC_AnalogWatchdogThresholdsConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000a0c:	6241      	str	r1, [r0, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8000a0e:	6282      	str	r2, [r0, #40]	; 0x28
 8000a10:	4770      	bx	lr

08000a12 <ADC_AnalogWatchdogSingleChannelConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000a12:	6843      	ldr	r3, [r0, #4]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
 8000a14:	f023 031f 	bic.w	r3, r3, #31
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000a18:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000a1a:	6041      	str	r1, [r0, #4]
 8000a1c:	4770      	bx	lr

08000a1e <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <ADC_TempSensorVrefintCmd+0x16>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8000a20:	689a      	ldr	r2, [r3, #8]
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a22:	b110      	cbz	r0, 8000a2a <ADC_TempSensorVrefintCmd+0xc>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 8000a24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a28:	e001      	b.n	8000a2e <ADC_TempSensorVrefintCmd+0x10>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 8000a2a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40012400 	.word	0x40012400

08000a38 <ADC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000a38:	6803      	ldr	r3, [r0, #0]
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000a3a:	4219      	tst	r1, r3
}
 8000a3c:	bf14      	ite	ne
 8000a3e:	2001      	movne	r0, #1
 8000a40:	2000      	moveq	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <ADC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000a44:	43c9      	mvns	r1, r1
 8000a46:	6001      	str	r1, [r0, #0]
 8000a48:	4770      	bx	lr

08000a4a <ADC_GetITStatus>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 8000a4a:	6843      	ldr	r3, [r0, #4]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000a4c:	6800      	ldr	r0, [r0, #0]
 8000a4e:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 8000a52:	d004      	beq.n	8000a5e <ADC_GetITStatus+0x14>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000a54:	b2c9      	uxtb	r1, r1
 8000a56:	4219      	tst	r1, r3
 8000a58:	bf14      	ite	ne
 8000a5a:	2001      	movne	r0, #1
 8000a5c:	2000      	moveq	r0, #0
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 8000a5e:	4770      	bx	lr

08000a60 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000a60:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8000a64:	6001      	str	r1, [r0, #0]
 8000a66:	4770      	bx	lr

08000a68 <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
 8000a68:	b508      	push	{r3, lr}
  RCC_BackupResetCmd(ENABLE);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f002 f82c 	bl	8002ac8 <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
}
 8000a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void BKP_DeInit(void)
{
  RCC_BackupResetCmd(ENABLE);
  RCC_BackupResetCmd(DISABLE);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f002 b827 	b.w	8002ac8 <RCC_BackupResetCmd>

08000a7a <BKP_TamperPinLevelConfig>:
  */
void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
{
  /* Check the parameters */
  assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
  *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
 8000a7a:	4b01      	ldr	r3, [pc, #4]	; (8000a80 <BKP_TamperPinLevelConfig+0x6>)
 8000a7c:	6018      	str	r0, [r3, #0]
 8000a7e:	4770      	bx	lr
 8000a80:	420d8604 	.word	0x420d8604

08000a84 <BKP_TamperPinCmd>:
  */
void BKP_TamperPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
 8000a84:	4b01      	ldr	r3, [pc, #4]	; (8000a8c <BKP_TamperPinCmd+0x8>)
 8000a86:	6018      	str	r0, [r3, #0]
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	420d8600 	.word	0x420d8600

08000a90 <BKP_ITConfig>:
  */
void BKP_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
 8000a90:	4b01      	ldr	r3, [pc, #4]	; (8000a98 <BKP_ITConfig+0x8>)
 8000a92:	6018      	str	r0, [r3, #0]
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	420d8688 	.word	0x420d8688

08000a9c <BKP_RTCOutputConfig>:
void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
{
  uint16_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
  tmpreg = BKP->RTCCR;
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <BKP_RTCOutputConfig+0x14>)
 8000a9e:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
  /* Clear CCO, ASOE and ASOS bits */
  tmpreg &= RTCCR_MASK;
 8000aa0:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8000aa4:	041b      	lsls	r3, r3, #16
 8000aa6:	0c1b      	lsrs	r3, r3, #16
  
  /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
  tmpreg |= BKP_RTCOutputSource;
 8000aa8:	4318      	orrs	r0, r3
  /* Store the new value */
  BKP->RTCCR = tmpreg;
 8000aaa:	8590      	strh	r0, [r2, #44]	; 0x2c
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40006c00 	.word	0x40006c00

08000ab4 <BKP_SetRTCCalibrationValue>:
void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
{
  uint16_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
  tmpreg = BKP->RTCCR;
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <BKP_SetRTCCalibrationValue+0x14>)
 8000ab6:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
  /* Clear CAL[6:0] bits */
  tmpreg &= RTCCR_CAL_MASK;
 8000ab8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	0c1b      	lsrs	r3, r3, #16
  /* Set CAL[6:0] bits according to CalibrationValue value */
  tmpreg |= CalibrationValue;
 8000ac0:	4318      	orrs	r0, r3
  /* Store the new value */
  BKP->RTCCR = tmpreg;
 8000ac2:	8590      	strh	r0, [r2, #44]	; 0x2c
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40006c00 	.word	0x40006c00

08000acc <BKP_WriteBackupRegister>:
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
 8000acc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <BKP_WriteBackupRegister+0x18>)
 8000ad4:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 8000ad6:	9b01      	ldr	r3, [sp, #4]
 8000ad8:	4418      	add	r0, r3
 8000ada:	9001      	str	r0, [sp, #4]

  *(__IO uint32_t *) tmp = Data;
 8000adc:	9b01      	ldr	r3, [sp, #4]
 8000ade:	6019      	str	r1, [r3, #0]
}
 8000ae0:	b002      	add	sp, #8
 8000ae2:	4770      	bx	lr
 8000ae4:	40006c00 	.word	0x40006c00

08000ae8 <BKP_ReadBackupRegister>:
  * @param  BKP_DR: specifies the Data Backup Register.
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @retval The content of the specified Data Backup Register
  */
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
{
 8000ae8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <BKP_ReadBackupRegister+0x1c>)
 8000af0:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 8000af2:	9b01      	ldr	r3, [sp, #4]
 8000af4:	4418      	add	r0, r3
 8000af6:	9001      	str	r0, [sp, #4]

  return (*(__IO uint16_t *) tmp);
 8000af8:	9b01      	ldr	r3, [sp, #4]
 8000afa:	8818      	ldrh	r0, [r3, #0]
}
 8000afc:	b280      	uxth	r0, r0
 8000afe:	b002      	add	sp, #8
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40006c00 	.word	0x40006c00

08000b08 <BKP_GetFlagStatus>:
  * @param  None
  * @retval The new state of the Tamper Pin Event flag (SET or RESET).
  */
FlagStatus BKP_GetFlagStatus(void)
{
  return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
 8000b08:	4b01      	ldr	r3, [pc, #4]	; (8000b10 <BKP_GetFlagStatus+0x8>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
}
 8000b0c:	b2c0      	uxtb	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	420d86a0 	.word	0x420d86a0

08000b14 <BKP_ClearFlag>:
  * @retval None
  */
void BKP_ClearFlag(void)
{
  /* Set CTE bit to clear Tamper Pin Event flag */
  BKP->CSR |= BKP_CSR_CTE;
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <BKP_ClearFlag+0x10>)
 8000b16:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	8693      	strh	r3, [r2, #52]	; 0x34
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40006c00 	.word	0x40006c00

08000b28 <BKP_GetITStatus>:
  * @param  None
  * @retval The new state of the Tamper Pin Interrupt (SET or RESET).
  */
ITStatus BKP_GetITStatus(void)
{
  return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
 8000b28:	4b01      	ldr	r3, [pc, #4]	; (8000b30 <BKP_GetITStatus+0x8>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
}
 8000b2c:	b2c0      	uxtb	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	420d86a4 	.word	0x420d86a4

08000b34 <BKP_ClearITPendingBit>:
  * @retval None
  */
void BKP_ClearITPendingBit(void)
{
  /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
  BKP->CSR |= BKP_CSR_CTI;
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <BKP_ClearITPendingBit+0x10>)
 8000b36:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	8693      	strh	r3, [r2, #52]	; 0x34
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40006c00 	.word	0x40006c00

08000b48 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000b48:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <CAN_DeInit+0x30>)
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000b4c:	2101      	movs	r1, #1
void CAN_DeInit(CAN_TypeDef* CANx)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000b4e:	4298      	cmp	r0, r3
 8000b50:	d107      	bne.n	8000b62 <CAN_DeInit+0x1a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000b52:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000b56:	f001 ffab 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000b60:	e006      	b.n	8000b70 <CAN_DeInit+0x28>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8000b62:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b66:	f001 ffa3 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  }
}
 8000b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000b74:	f001 bf9c 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>
 8000b78:	40006400 	.word	0x40006400

08000b7c <CAN_Init>:
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000b7c:	6803      	ldr	r3, [r0, #0]
 8000b7e:	f023 0302 	bic.w	r3, r3, #2
 8000b82:	6003      	str	r3, [r0, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000b84:	6803      	ldr	r3, [r0, #0]
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6003      	str	r3, [r0, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b90:	6842      	ldr	r2, [r0, #4]
 8000b92:	07d2      	lsls	r2, r2, #31
 8000b94:	d401      	bmi.n	8000b9a <CAN_Init+0x1e>
 8000b96:	3b01      	subs	r3, #1
 8000b98:	d1fa      	bne.n	8000b90 <CAN_Init+0x14>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000b9a:	6843      	ldr	r3, [r0, #4]
 8000b9c:	f013 0301 	ands.w	r3, r3, #1
 8000ba0:	d055      	beq.n	8000c4e <CAN_Init+0xd2>
    InitStatus = CAN_InitStatus_Failed;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000ba2:	798b      	ldrb	r3, [r1, #6]
 8000ba4:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000ba6:	6803      	ldr	r3, [r0, #0]
 8000ba8:	bf0c      	ite	eq
 8000baa:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000bae:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8000bb2:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000bb4:	79cb      	ldrb	r3, [r1, #7]
 8000bb6:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000bb8:	6803      	ldr	r3, [r0, #0]
 8000bba:	bf0c      	ite	eq
 8000bbc:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000bc0:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000bc4:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000bc6:	7a0b      	ldrb	r3, [r1, #8]
 8000bc8:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000bca:	6803      	ldr	r3, [r0, #0]
 8000bcc:	bf0c      	ite	eq
 8000bce:	f043 0320 	orreq.w	r3, r3, #32
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000bd2:	f023 0320 	bicne.w	r3, r3, #32
 8000bd6:	6003      	str	r3, [r0, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000bd8:	7a4b      	ldrb	r3, [r1, #9]
 8000bda:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_NART;
 8000bdc:	6803      	ldr	r3, [r0, #0]
 8000bde:	bf0c      	ite	eq
 8000be0:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000be4:	f023 0310 	bicne.w	r3, r3, #16
 8000be8:	6003      	str	r3, [r0, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000bea:	7a8b      	ldrb	r3, [r1, #10]
 8000bec:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000bee:	6803      	ldr	r3, [r0, #0]
 8000bf0:	bf0c      	ite	eq
 8000bf2:	f043 0308 	orreq.w	r3, r3, #8
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000bf6:	f023 0308 	bicne.w	r3, r3, #8
 8000bfa:	6003      	str	r3, [r0, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000bfc:	7acb      	ldrb	r3, [r1, #11]
 8000bfe:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000c00:	6803      	ldr	r3, [r0, #0]
 8000c02:	bf0c      	ite	eq
 8000c04:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000c08:	f023 0304 	bicne.w	r3, r3, #4
 8000c0c:	6003      	str	r3, [r0, #0]

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000c0e:	78cb      	ldrb	r3, [r1, #3]
 8000c10:	788a      	ldrb	r2, [r1, #2]
 8000c12:	061b      	lsls	r3, r3, #24
 8000c14:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000c18:	790a      	ldrb	r2, [r1, #4]
 8000c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1e:	794a      	ldrb	r2, [r1, #5]
 8000c20:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000c24:	880a      	ldrh	r2, [r1, #0]
 8000c26:	3a01      	subs	r2, #1
 8000c28:	4313      	orrs	r3, r2
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000c2a:	61c3      	str	r3, [r0, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000c2c:	6803      	ldr	r3, [r0, #0]
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6003      	str	r3, [r0, #0]

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c38:	6842      	ldr	r2, [r0, #4]
 8000c3a:	07d2      	lsls	r2, r2, #31
 8000c3c:	d501      	bpl.n	8000c42 <CAN_Init+0xc6>
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	d1fa      	bne.n	8000c38 <CAN_Init+0xbc>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000c42:	6840      	ldr	r0, [r0, #4]
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  {
    InitStatus = CAN_InitStatus_Failed;
 8000c44:	f000 0001 	and.w	r0, r0, #1
 8000c48:	f080 0001 	eor.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	4618      	mov	r0, r3
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
}
 8000c50:	4770      	bx	lr

08000c52 <CAN_FilterInit>:
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000c52:	7a83      	ldrb	r3, [r0, #10]
 8000c54:	2201      	movs	r2, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
  *                               structure that contains the configuration 
  *                               information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000c5a:	b570      	push	{r4, r5, r6, lr}

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000c5c:	43dc      	mvns	r4, r3
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000c5e:	4a33      	ldr	r2, [pc, #204]	; (8000d2c <CAN_FilterInit+0xda>)
 8000c60:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8000c64:	f041 0101 	orr.w	r1, r1, #1
 8000c68:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000c6c:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000c70:	4021      	ands	r1, r4
 8000c72:	f8c2 121c 	str.w	r1, [r2, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8000c76:	7b01      	ldrb	r1, [r0, #12]
 8000c78:	b9a1      	cbnz	r1, 8000ca4 <CAN_FilterInit+0x52>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000c7a:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000c7e:	88c6      	ldrh	r6, [r0, #6]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000c80:	4021      	ands	r1, r4
 8000c82:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000c86:	7a81      	ldrb	r1, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000c88:	8845      	ldrh	r5, [r0, #2]
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000c8a:	3148      	adds	r1, #72	; 0x48
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000c8c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000c90:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000c94:	8802      	ldrh	r2, [r0, #0]
 8000c96:	8881      	ldrh	r1, [r0, #4]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000c98:	7a85      	ldrb	r5, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000c9a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000c9e:	4a24      	ldr	r2, [pc, #144]	; (8000d30 <CAN_FilterInit+0xde>)
 8000ca0:	00ed      	lsls	r5, r5, #3
 8000ca2:	5151      	str	r1, [r2, r5]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000ca4:	7b02      	ldrb	r2, [r0, #12]
 8000ca6:	2a01      	cmp	r2, #1
 8000ca8:	d115      	bne.n	8000cd6 <CAN_FilterInit+0x84>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000caa:	4a20      	ldr	r2, [pc, #128]	; (8000d2c <CAN_FilterInit+0xda>)
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000cac:	8806      	ldrh	r6, [r0, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000cae:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000cb2:	8845      	ldrh	r5, [r0, #2]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000cba:	7a81      	ldrb	r1, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000cbc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000cc0:	3148      	adds	r1, #72	; 0x48
 8000cc2:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000cc6:	88c2      	ldrh	r2, [r0, #6]
 8000cc8:	8881      	ldrh	r1, [r0, #4]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000cca:	7a85      	ldrb	r5, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000ccc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <CAN_FilterInit+0xde>)
 8000cd2:	00ed      	lsls	r5, r5, #3
 8000cd4:	5151      	str	r1, [r2, r5]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000cd6:	7ac2      	ldrb	r2, [r0, #11]
 8000cd8:	4914      	ldr	r1, [pc, #80]	; (8000d2c <CAN_FilterInit+0xda>)
 8000cda:	b91a      	cbnz	r2, 8000ce4 <CAN_FilterInit+0x92>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000cdc:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 8000ce0:	4022      	ands	r2, r4
 8000ce2:	e002      	b.n	8000cea <CAN_FilterInit+0x98>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000ce4:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 8000ce8:	431a      	orrs	r2, r3
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000cea:	8905      	ldrh	r5, [r0, #8]
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000cec:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <CAN_FilterInit+0xda>)
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000cf2:	b92d      	cbnz	r5, 8000d00 <CAN_FilterInit+0xae>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000cf4:	f8d1 5214 	ldr.w	r5, [r1, #532]	; 0x214
 8000cf8:	402c      	ands	r4, r5
 8000cfa:	f8c1 4214 	str.w	r4, [r1, #532]	; 0x214
 8000cfe:	e006      	b.n	8000d0e <CAN_FilterInit+0xbc>
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000d00:	2d01      	cmp	r5, #1
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000d02:	bf02      	ittt	eq
 8000d04:	f8d2 1214 	ldreq.w	r1, [r2, #532]	; 0x214
 8000d08:	4319      	orreq	r1, r3
 8000d0a:	f8c2 1214 	streq.w	r1, [r2, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8000d0e:	7b41      	ldrb	r1, [r0, #13]
 8000d10:	2901      	cmp	r1, #1
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000d12:	bf02      	ittt	eq
 8000d14:	f8d2 121c 	ldreq.w	r1, [r2, #540]	; 0x21c
 8000d18:	430b      	orreq	r3, r1
 8000d1a:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000d1e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000d22:	f023 0301 	bic.w	r3, r3, #1
 8000d26:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
 8000d2c:	40006400 	.word	0x40006400
 8000d30:	40006644 	.word	0x40006644

08000d34 <CAN_StructInit>:
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	7183      	strb	r3, [r0, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8000d38:	71c3      	strb	r3, [r0, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8000d3a:	7203      	strb	r3, [r0, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8000d3c:	7243      	strb	r3, [r0, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8000d3e:	7283      	strb	r3, [r0, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8000d40:	72c3      	strb	r3, [r0, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8000d42:	7083      	strb	r3, [r0, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8000d44:	70c3      	strb	r3, [r0, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8000d46:	2303      	movs	r3, #3
 8000d48:	7103      	strb	r3, [r0, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	7143      	strb	r3, [r0, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	8003      	strh	r3, [r0, #0]
 8000d52:	4770      	bx	lr

08000d54 <CAN_SlaveStartBank>:
{
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <CAN_SlaveStartBank+0x38>)
 8000d56:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d5a:	f042 0201 	orr.w	r2, r2, #1
 8000d5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8000d62:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d66:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000d6a:	f022 020e 	bic.w	r2, r2, #14
 8000d6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8000d72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d76:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000d7a:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000d7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000d8a:	4770      	bx	lr
 8000d8c:	40006400 	.word	0x40006400

08000d90 <CAN_DBGFreeze>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000d90:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d92:	b111      	cbz	r1, 8000d9a <CAN_DBGFreeze+0xa>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d98:	e001      	b.n	8000d9e <CAN_DBGFreeze+0xe>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8000d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9e:	6003      	str	r3, [r0, #0]
 8000da0:	4770      	bx	lr

08000da2 <CAN_TTComModeCmd>:
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000da2:	6803      	ldr	r3, [r0, #0]
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000da4:	b199      	cbz	r1, 8000dce <CAN_TTComModeCmd+0x2c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000daa:	6003      	str	r3, [r0, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8000dac:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db4:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8000db8:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8000dc4:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	e012      	b.n	8000df4 <CAN_TTComModeCmd+0x52>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8000dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dd2:	6003      	str	r3, [r0, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8000dd4:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ddc:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8000de0:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000de8:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8000dec:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df4:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 8000df8:	4770      	bx	lr

08000dfa <CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000dfa:	6883      	ldr	r3, [r0, #8]
  *                    DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission
  *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000dfe:	015c      	lsls	r4, r3, #5
 8000e00:	d407      	bmi.n	8000e12 <CAN_Transmit+0x18>
  {
    transmit_mailbox = 0;
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000e02:	6883      	ldr	r3, [r0, #8]
 8000e04:	011a      	lsls	r2, r3, #4
 8000e06:	d406      	bmi.n	8000e16 <CAN_Transmit+0x1c>
  {
    transmit_mailbox = 1;
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000e08:	6883      	ldr	r3, [r0, #8]
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	d405      	bmi.n	8000e1a <CAN_Transmit+0x20>
  {
    transmit_mailbox = 2;
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000e0e:	2404      	movs	r4, #4
 8000e10:	e03e      	b.n	8000e90 <CAN_Transmit+0x96>
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
  {
    transmit_mailbox = 0;
 8000e12:	2400      	movs	r4, #0
 8000e14:	e002      	b.n	8000e1c <CAN_Transmit+0x22>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
  {
    transmit_mailbox = 1;
 8000e16:	2401      	movs	r4, #1
 8000e18:	e000      	b.n	8000e1c <CAN_Transmit+0x22>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
  {
    transmit_mailbox = 2;
 8000e1a:	2402      	movs	r4, #2
 8000e1c:	0125      	lsls	r5, r4, #4
 8000e1e:	1943      	adds	r3, r0, r5
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8000e20:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000e24:	f002 0201 	and.w	r2, r2, #1
 8000e28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    if (TxMessage->IDE == CAN_Id_Standard)
 8000e2c:	7a0e      	ldrb	r6, [r1, #8]
 8000e2e:	7a4a      	ldrb	r2, [r1, #9]
 8000e30:	b92e      	cbnz	r6, 8000e3e <CAN_Transmit+0x44>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000e32:	680f      	ldr	r7, [r1, #0]
 8000e34:	f8d3 6180 	ldr.w	r6, [r3, #384]	; 0x180
 8000e38:	ea42 5247 	orr.w	r2, r2, r7, lsl #21
 8000e3c:	e006      	b.n	8000e4c <CAN_Transmit+0x52>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000e3e:	684f      	ldr	r7, [r1, #4]
 8000e40:	f8d3 e180 	ldr.w	lr, [r3, #384]	; 0x180
 8000e44:	ea46 06c7 	orr.w	r6, r6, r7, lsl #3
 8000e48:	ea46 060e 	orr.w	r6, r6, lr
 8000e4c:	4332      	orrs	r2, r6
 8000e4e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000e52:	7a8a      	ldrb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000e54:	4428      	add	r0, r5
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000e56:	f002 020f 	and.w	r2, r2, #15
 8000e5a:	728a      	strb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000e5c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000e60:	f022 020f 	bic.w	r2, r2, #15
 8000e64:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8000e68:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000e6c:	7a8e      	ldrb	r6, [r1, #10]
 8000e6e:	4332      	orrs	r2, r6
 8000e70:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8000e74:	f8d1 200b 	ldr.w	r2, [r1, #11]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000e78:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000e7c:	f8d1 200f 	ldr.w	r2, [r1, #15]
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000e80:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8000e84:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000e88:	f042 0201 	orr.w	r2, r2, #1
 8000e8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
  return transmit_mailbox;
}
 8000e90:	4620      	mov	r0, r4
 8000e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e94 <CAN_TransmitStatus>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8000e94:	2901      	cmp	r1, #1
 8000e96:	d008      	beq.n	8000eaa <CAN_TransmitStatus+0x16>
 8000e98:	d304      	bcc.n	8000ea4 <CAN_TransmitStatus+0x10>
 8000e9a:	2902      	cmp	r1, #2
 8000e9c:	d118      	bne.n	8000ed0 <CAN_TransmitStatus+0x3c>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000e9e:	6882      	ldr	r2, [r0, #8]
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <CAN_TransmitStatus+0x40>)
 8000ea2:	e004      	b.n	8000eae <CAN_TransmitStatus+0x1a>
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8000ea4:	6882      	ldr	r2, [r0, #8]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <CAN_TransmitStatus+0x44>)
 8000ea8:	e001      	b.n	8000eae <CAN_TransmitStatus+0x1a>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8000eaa:	6882      	ldr	r2, [r0, #8]
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <CAN_TransmitStatus+0x48>)
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000eae:	4013      	ands	r3, r2
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 8000eb0:	4a09      	ldr	r2, [pc, #36]	; (8000ed8 <CAN_TransmitStatus+0x44>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00a      	beq.n	8000ecc <CAN_TransmitStatus+0x38>
 8000eb6:	d801      	bhi.n	8000ebc <CAN_TransmitStatus+0x28>
 8000eb8:	b933      	cbnz	r3, 8000ec8 <CAN_TransmitStatus+0x34>
 8000eba:	e009      	b.n	8000ed0 <CAN_TransmitStatus+0x3c>
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <CAN_TransmitStatus+0x48>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d004      	beq.n	8000ecc <CAN_TransmitStatus+0x38>
 8000ec2:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <CAN_TransmitStatus+0x40>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d001      	beq.n	8000ecc <CAN_TransmitStatus+0x38>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
      break;
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8000ec8:	2000      	movs	r0, #0
 8000eca:	4770      	bx	lr
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8000ecc:	2001      	movs	r0, #1
      break;
 8000ece:	4770      	bx	lr
      break;
  }
  switch (state)
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8000ed0:	2002      	movs	r0, #2
      break;
    default: state = CAN_TxStatus_Failed;
      break;
  }
  return (uint8_t) state;
}
 8000ed2:	4770      	bx	lr
 8000ed4:	10030000 	.word	0x10030000
 8000ed8:	04000003 	.word	0x04000003
 8000edc:	08000300 	.word	0x08000300

08000ee0 <CAN_CancelTransmit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8000ee0:	2901      	cmp	r1, #1
 8000ee2:	d007      	beq.n	8000ef4 <CAN_CancelTransmit+0x14>
 8000ee4:	d302      	bcc.n	8000eec <CAN_CancelTransmit+0xc>
 8000ee6:	2902      	cmp	r1, #2
 8000ee8:	d008      	beq.n	8000efc <CAN_CancelTransmit+0x1c>
 8000eea:	4770      	bx	lr
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8000eec:	6883      	ldr	r3, [r0, #8]
 8000eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef2:	e006      	b.n	8000f02 <CAN_CancelTransmit+0x22>
      break;
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8000ef4:	6883      	ldr	r3, [r0, #8]
 8000ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000efa:	e002      	b.n	8000f02 <CAN_CancelTransmit+0x22>
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8000efc:	6883      	ldr	r3, [r0, #8]
 8000efe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f02:	6083      	str	r3, [r0, #8]
 8000f04:	4770      	bx	lr

08000f06 <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000f06:	010b      	lsls	r3, r1, #4
 8000f08:	b530      	push	{r4, r5, lr}
 8000f0a:	18c4      	adds	r4, r0, r3
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000f0c:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000f10:	f005 0504 	and.w	r5, r5, #4
 8000f14:	b2ed      	uxtb	r5, r5
 8000f16:	7215      	strb	r5, [r2, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000f18:	b925      	cbnz	r5, 8000f24 <CAN_Receive+0x1e>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000f1a:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000f1e:	0d6d      	lsrs	r5, r5, #21
 8000f20:	6015      	str	r5, [r2, #0]
 8000f22:	e003      	b.n	8000f2c <CAN_Receive+0x26>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000f24:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000f28:	08ed      	lsrs	r5, r5, #3
 8000f2a:	6055      	str	r5, [r2, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000f2c:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000f30:	4403      	add	r3, r0
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000f32:	f005 0502 	and.w	r5, r5, #2
 8000f36:	7255      	strb	r5, [r2, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000f38:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
 8000f3c:	f005 050f 	and.w	r5, r5, #15
 8000f40:	7295      	strb	r5, [r2, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000f42:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
 8000f46:	0a24      	lsrs	r4, r4, #8
 8000f48:	74d4      	strb	r4, [r2, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000f4a:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000f4e:	72d4      	strb	r4, [r2, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000f50:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000f54:	0a24      	lsrs	r4, r4, #8
 8000f56:	7314      	strb	r4, [r2, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000f58:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000f5c:	0c24      	lsrs	r4, r4, #16
 8000f5e:	7354      	strb	r4, [r2, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000f60:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000f64:	0e24      	lsrs	r4, r4, #24
 8000f66:	7394      	strb	r4, [r2, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000f68:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000f6c:	73d4      	strb	r4, [r2, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000f6e:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000f72:	0a24      	lsrs	r4, r4, #8
 8000f74:	7414      	strb	r4, [r2, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000f76:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000f7a:	0c24      	lsrs	r4, r4, #16
 8000f7c:	7454      	strb	r4, [r2, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000f7e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000f82:	0e1b      	lsrs	r3, r3, #24
 8000f84:	7493      	strb	r3, [r2, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000f86:	b921      	cbnz	r1, 8000f92 <CAN_Receive+0x8c>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000f88:	68c3      	ldr	r3, [r0, #12]
 8000f8a:	f043 0320 	orr.w	r3, r3, #32
 8000f8e:	60c3      	str	r3, [r0, #12]
 8000f90:	bd30      	pop	{r4, r5, pc}
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000f92:	6903      	ldr	r3, [r0, #16]
 8000f94:	f043 0320 	orr.w	r3, r3, #32
 8000f98:	6103      	str	r3, [r0, #16]
 8000f9a:	bd30      	pop	{r4, r5, pc}

08000f9c <CAN_FIFORelease>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000f9c:	b921      	cbnz	r1, 8000fa8 <CAN_FIFORelease+0xc>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000f9e:	68c3      	ldr	r3, [r0, #12]
 8000fa0:	f043 0320 	orr.w	r3, r3, #32
 8000fa4:	60c3      	str	r3, [r0, #12]
 8000fa6:	4770      	bx	lr
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000fa8:	6903      	ldr	r3, [r0, #16]
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	6103      	str	r3, [r0, #16]
 8000fb0:	4770      	bx	lr

08000fb2 <CAN_MessagePending>:
{
  uint8_t message_pending=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8000fb2:	b909      	cbnz	r1, 8000fb8 <CAN_MessagePending+0x6>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8000fb4:	68c0      	ldr	r0, [r0, #12]
 8000fb6:	e002      	b.n	8000fbe <CAN_MessagePending+0xc>
  }
  else if (FIFONumber == CAN_FIFO1)
 8000fb8:	2901      	cmp	r1, #1
 8000fba:	d103      	bne.n	8000fc4 <CAN_MessagePending+0x12>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8000fbc:	6900      	ldr	r0, [r0, #16]
 8000fbe:	f000 0003 	and.w	r0, r0, #3
 8000fc2:	4770      	bx	lr
  }
  else
  {
    message_pending = 0;
 8000fc4:	2000      	movs	r0, #0
  }
  return message_pending;
}
 8000fc6:	4770      	bx	lr

08000fc8 <CAN_OperatingModeRequest>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8000fc8:	b999      	cbnz	r1, 8000ff2 <CAN_OperatingModeRequest+0x2a>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8000fca:	6803      	ldr	r3, [r0, #0]
 8000fcc:	f023 0303 	bic.w	r3, r3, #3
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8000fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fda:	6842      	ldr	r2, [r0, #4]
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d001      	beq.n	8000fe8 <CAN_OperatingModeRequest+0x20>
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	d1f8      	bne.n	8000fda <CAN_OperatingModeRequest+0x12>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8000fe8:	6840      	ldr	r0, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000fea:	f000 0003 	and.w	r0, r0, #3
 8000fee:	2801      	cmp	r0, #1
 8000ff0:	e028      	b.n	8001044 <CAN_OperatingModeRequest+0x7c>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8000ff2:	2901      	cmp	r1, #1
 8000ff4:	d111      	bne.n	800101a <CAN_OperatingModeRequest+0x52>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8000ff6:	6803      	ldr	r3, [r0, #0]
 8000ff8:	f023 0303 	bic.w	r3, r3, #3
 8000ffc:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8000ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001002:	6842      	ldr	r2, [r0, #4]
 8001004:	0792      	lsls	r2, r2, #30
 8001006:	d001      	beq.n	800100c <CAN_OperatingModeRequest+0x44>
 8001008:	3b01      	subs	r3, #1
 800100a:	d1fa      	bne.n	8001002 <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 800100c:	6843      	ldr	r3, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800100e:	f013 0f03 	tst.w	r3, #3
 8001012:	bf0c      	ite	eq
 8001014:	2001      	moveq	r0, #1
 8001016:	2000      	movne	r0, #0
 8001018:	4770      	bx	lr
    else
    {
      status = CAN_ModeStatus_Success;
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 800101a:	2902      	cmp	r1, #2
 800101c:	d116      	bne.n	800104c <CAN_OperatingModeRequest+0x84>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800101e:	6803      	ldr	r3, [r0, #0]
 8001020:	f023 0303 	bic.w	r3, r3, #3
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800102a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800102e:	6842      	ldr	r2, [r0, #4]
 8001030:	f002 0203 	and.w	r2, r2, #3
 8001034:	2a02      	cmp	r2, #2
 8001036:	d001      	beq.n	800103c <CAN_OperatingModeRequest+0x74>
 8001038:	3b01      	subs	r3, #1
 800103a:	d1f8      	bne.n	800102e <CAN_OperatingModeRequest+0x66>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 800103c:	6840      	ldr	r0, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800103e:	f000 0003 	and.w	r0, r0, #3
 8001042:	2802      	cmp	r0, #2
 8001044:	bf14      	ite	ne
 8001046:	2000      	movne	r0, #0
 8001048:	2001      	moveq	r0, #1
 800104a:	4770      	bx	lr
      status = CAN_ModeStatus_Success;
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 800104c:	2000      	movs	r0, #0
  }

  return  (uint8_t) status;
}
 800104e:	4770      	bx	lr

08001050 <CAN_Sleep>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8001050:	6803      	ldr	r3, [r0, #0]
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	6003      	str	r3, [r0, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 800105c:	6840      	ldr	r0, [r0, #4]
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 800105e:	f000 0003 	and.w	r0, r0, #3
}
 8001062:	1e83      	subs	r3, r0, #2
 8001064:	4258      	negs	r0, r3
 8001066:	4158      	adcs	r0, r3
 8001068:	4770      	bx	lr

0800106a <CAN_WakeUp>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 800106a:	6803      	ldr	r3, [r0, #0]
 800106c:	f023 0302 	bic.w	r3, r3, #2
 8001070:	6003      	str	r3, [r0, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8001072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001076:	6842      	ldr	r2, [r0, #4]
 8001078:	0792      	lsls	r2, r2, #30
 800107a:	d501      	bpl.n	8001080 <CAN_WakeUp+0x16>
 800107c:	3b01      	subs	r3, #1
 800107e:	d1fa      	bne.n	8001076 <CAN_WakeUp+0xc>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8001080:	6840      	ldr	r0, [r0, #4]
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8001082:	f080 0002 	eor.w	r0, r0, #2
}
 8001086:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800108a:	4770      	bx	lr

0800108c <CAN_GetLastErrorCode>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 800108c:	6980      	ldr	r0, [r0, #24]
  
  /* Return the error code*/
  return errorcode;
}
 800108e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001092:	4770      	bx	lr

08001094 <CAN_GetReceiveErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8001094:	6980      	ldr	r0, [r0, #24]
  
  /* Return the Receive Error Counter*/
  return counter;
}
 8001096:	0e00      	lsrs	r0, r0, #24
 8001098:	4770      	bx	lr

0800109a <CAN_GetLSBTransmitErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 800109a:	6980      	ldr	r0, [r0, #24]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
}
 800109c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80010a0:	4770      	bx	lr

080010a2 <CAN_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80010a2:	6943      	ldr	r3, [r0, #20]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80010a4:	b10a      	cbz	r2, 80010aa <CAN_ITConfig+0x8>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80010a6:	4319      	orrs	r1, r3
 80010a8:	e001      	b.n	80010ae <CAN_ITConfig+0xc>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80010aa:	ea23 0101 	bic.w	r1, r3, r1
 80010ae:	6141      	str	r1, [r0, #20]
 80010b0:	4770      	bx	lr

080010b2 <CAN_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 80010b2:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80010b6:	d001      	beq.n	80010bc <CAN_GetFlagStatus+0xa>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80010b8:	6983      	ldr	r3, [r0, #24]
 80010ba:	e00b      	b.n	80010d4 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 80010bc:	01cb      	lsls	r3, r1, #7
 80010be:	d501      	bpl.n	80010c4 <CAN_GetFlagStatus+0x12>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80010c0:	6843      	ldr	r3, [r0, #4]
 80010c2:	e007      	b.n	80010d4 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 80010c4:	010a      	lsls	r2, r1, #4
 80010c6:	d501      	bpl.n	80010cc <CAN_GetFlagStatus+0x1a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80010c8:	6883      	ldr	r3, [r0, #8]
 80010ca:	e003      	b.n	80010d4 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 80010cc:	018b      	lsls	r3, r1, #6
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80010ce:	bf4c      	ite	mi
 80010d0:	68c3      	ldrmi	r3, [r0, #12]
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80010d2:	6903      	ldrpl	r3, [r0, #16]
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80010d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010d8:	420b      	tst	r3, r1
 80010da:	bf14      	ite	ne
 80010dc:	2001      	movne	r0, #1
 80010de:	2000      	moveq	r0, #0
      bitstatus = RESET;
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
}
 80010e0:	4770      	bx	lr

080010e2 <CAN_ClearFlag>:
  uint32_t flagtmp=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <CAN_ClearFlag+0x2a>)
 80010e4:	4299      	cmp	r1, r3
 80010e6:	d102      	bne.n	80010ee <CAN_ClearFlag+0xc>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	6183      	str	r3, [r0, #24]
 80010ec:	4770      	bx	lr
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 80010ee:	018a      	lsls	r2, r1, #6
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 80010f0:	f3c1 0313 	ubfx	r3, r1, #0, #20

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 80010f4:	d501      	bpl.n	80010fa <CAN_ClearFlag+0x18>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 80010f6:	60c3      	str	r3, [r0, #12]
 80010f8:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 80010fa:	014a      	lsls	r2, r1, #5
 80010fc:	d501      	bpl.n	8001102 <CAN_ClearFlag+0x20>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 80010fe:	6103      	str	r3, [r0, #16]
 8001100:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8001102:	010a      	lsls	r2, r1, #4
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8001104:	bf4c      	ite	mi
 8001106:	6083      	strmi	r3, [r0, #8]
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8001108:	6043      	strpl	r3, [r0, #4]
 800110a:	4770      	bx	lr
 800110c:	30f00070 	.word	0x30f00070

08001110 <CAN_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 8001110:	6943      	ldr	r3, [r0, #20]
 8001112:	400b      	ands	r3, r1
 8001114:	d05c      	beq.n	80011d0 <CAN_GetITStatus+0xc0>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001116:	2940      	cmp	r1, #64	; 0x40
 8001118:	d042      	beq.n	80011a0 <CAN_GetITStatus+0x90>
 800111a:	d810      	bhi.n	800113e <CAN_GetITStatus+0x2e>
 800111c:	2904      	cmp	r1, #4
 800111e:	d033      	beq.n	8001188 <CAN_GetITStatus+0x78>
 8001120:	d805      	bhi.n	800112e <CAN_GetITStatus+0x1e>
 8001122:	2901      	cmp	r1, #1
 8001124:	d027      	beq.n	8001176 <CAN_GetITStatus+0x66>
 8001126:	2902      	cmp	r1, #2
 8001128:	d154      	bne.n	80011d4 <CAN_GetITStatus+0xc4>
               /* Check CAN_TSR_RQCPx bits */
	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
	      break;
      case CAN_IT_FMP0:
               /* Check CAN_RF0R_FMP0 bit */
	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 800112a:	68c0      	ldr	r0, [r0, #12]
 800112c:	e02f      	b.n	800118e <CAN_GetITStatus+0x7e>
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 800112e:	2910      	cmp	r1, #16
 8001130:	d02c      	beq.n	800118c <CAN_GetITStatus+0x7c>
 8001132:	2920      	cmp	r1, #32
 8001134:	d030      	beq.n	8001198 <CAN_GetITStatus+0x88>
 8001136:	2908      	cmp	r1, #8
 8001138:	d14c      	bne.n	80011d4 <CAN_GetITStatus+0xc4>
               /* Check CAN_RF0R_FULL0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
	      break;
      case CAN_IT_FOV0:
               /* Check CAN_RF0R_FOVR0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 800113a:	68c0      	ldr	r0, [r0, #12]
 800113c:	e035      	b.n	80011aa <CAN_GetITStatus+0x9a>
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 800113e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001142:	d03b      	beq.n	80011bc <CAN_GetITStatus+0xac>
 8001144:	d80c      	bhi.n	8001160 <CAN_GetITStatus+0x50>
 8001146:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800114a:	d031      	beq.n	80011b0 <CAN_GetITStatus+0xa0>
 800114c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001150:	d032      	beq.n	80011b8 <CAN_GetITStatus+0xa8>
 8001152:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001156:	d13d      	bne.n	80011d4 <CAN_GetITStatus+0xc4>
               /* Check CAN_MSR_SLAKI bit */
	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
	      break;
      case CAN_IT_EWG:
               /* Check CAN_ESR_EWGF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8001158:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800115a:	f000 0001 	and.w	r0, r0, #1
 800115e:	4770      	bx	lr
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001160:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001164:	d01e      	beq.n	80011a4 <CAN_GetITStatus+0x94>
 8001166:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800116a:	d01d      	beq.n	80011a8 <CAN_GetITStatus+0x98>
 800116c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001170:	d130      	bne.n	80011d4 <CAN_GetITStatus+0xc4>
               /* Check CAN_ESR_LEC bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
	      break;
      case CAN_IT_ERR:
               /* Check CAN_MSR_ERRI bit */ 
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8001172:	6840      	ldr	r0, [r0, #4]
 8001174:	e029      	b.n	80011ca <CAN_GetITStatus+0xba>
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
    {
      case CAN_IT_TME:
               /* Check CAN_TSR_RQCPx bits */
	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8001176:	6880      	ldr	r0, [r0, #8]
  ITStatus pendingbitstatus = RESET;
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8001178:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 800117c:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8001180:	3000      	adds	r0, #0
 8001182:	bf18      	it	ne
 8001184:	2001      	movne	r0, #1
 8001186:	4770      	bx	lr
               /* Check CAN_RF0R_FMP0 bit */
	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
	      break;
      case CAN_IT_FF0:
               /* Check CAN_RF0R_FULL0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8001188:	68c0      	ldr	r0, [r0, #12]
 800118a:	e006      	b.n	800119a <CAN_GetITStatus+0x8a>
               /* Check CAN_RF0R_FOVR0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
	      break;
      case CAN_IT_FMP1:
               /* Check CAN_RF1R_FMP1 bit */
               itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 800118c:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800118e:	f010 0003 	ands.w	r0, r0, #3
 8001192:	bf18      	it	ne
 8001194:	2001      	movne	r0, #1
 8001196:	4770      	bx	lr
               /* Check CAN_RF1R_FMP1 bit */
               itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
	      break;
      case CAN_IT_FF1:
               /* Check CAN_RF1R_FULL1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8001198:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800119a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800119e:	4770      	bx	lr
               /* Check CAN_RF1R_FULL1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
	      break;
      case CAN_IT_FOV1:
               /* Check CAN_RF1R_FOVR1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 80011a0:	6900      	ldr	r0, [r0, #16]
 80011a2:	e002      	b.n	80011aa <CAN_GetITStatus+0x9a>
	      break;
      case CAN_IT_WKU:
               /* Check CAN_MSR_WKUI bit */
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 80011a4:	6840      	ldr	r0, [r0, #4]
 80011a6:	e7f8      	b.n	800119a <CAN_GetITStatus+0x8a>
	      break;
      case CAN_IT_SLK:
               /* Check CAN_MSR_SLAKI bit */
	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 80011a8:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 80011aa:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80011ae:	4770      	bx	lr
               /* Check CAN_ESR_EWGF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
	      break;
      case CAN_IT_EPV:
               /* Check CAN_ESR_EPVF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80011b0:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 80011b2:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80011b6:	4770      	bx	lr
               /* Check CAN_ESR_EPVF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
	      break;
      case CAN_IT_BOF:
               /* Check CAN_ESR_BOFF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80011b8:	6980      	ldr	r0, [r0, #24]
 80011ba:	e006      	b.n	80011ca <CAN_GetITStatus+0xba>
	      break;
      case CAN_IT_LEC:
               /* Check CAN_ESR_LEC bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80011bc:	6983      	ldr	r3, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 80011be:	f013 0f70 	tst.w	r3, #112	; 0x70
 80011c2:	bf14      	ite	ne
 80011c4:	2001      	movne	r0, #1
 80011c6:	2000      	moveq	r0, #0
 80011c8:	4770      	bx	lr
 80011ca:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80011ce:	4770      	bx	lr
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80011d0:	4618      	mov	r0, r3
 80011d2:	4770      	bx	lr
               /* Check CAN_MSR_ERRI bit */ 
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
	      break;
      default :
               /* in case of error, return RESET */
              itstatus = RESET;
 80011d4:	2000      	movs	r0, #0
    itstatus  = RESET;
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
}
 80011d6:	4770      	bx	lr

080011d8 <CAN_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 80011d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80011dc:	d035      	beq.n	800124a <CAN_ClearITPendingBit+0x72>
 80011de:	d80c      	bhi.n	80011fa <CAN_ClearITPendingBit+0x22>
 80011e0:	2908      	cmp	r1, #8
 80011e2:	d024      	beq.n	800122e <CAN_ClearITPendingBit+0x56>
 80011e4:	d804      	bhi.n	80011f0 <CAN_ClearITPendingBit+0x18>
 80011e6:	2901      	cmp	r1, #1
 80011e8:	d01c      	beq.n	8001224 <CAN_ClearITPendingBit+0x4c>
 80011ea:	2904      	cmp	r1, #4
 80011ec:	d01d      	beq.n	800122a <CAN_ClearITPendingBit+0x52>
 80011ee:	4770      	bx	lr
 80011f0:	2920      	cmp	r1, #32
 80011f2:	d01f      	beq.n	8001234 <CAN_ClearITPendingBit+0x5c>
 80011f4:	2940      	cmp	r1, #64	; 0x40
 80011f6:	d01f      	beq.n	8001238 <CAN_ClearITPendingBit+0x60>
 80011f8:	4770      	bx	lr
 80011fa:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80011fe:	d022      	beq.n	8001246 <CAN_ClearITPendingBit+0x6e>
 8001200:	d806      	bhi.n	8001210 <CAN_ClearITPendingBit+0x38>
 8001202:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001206:	d020      	beq.n	800124a <CAN_ClearITPendingBit+0x72>
 8001208:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800120c:	d01d      	beq.n	800124a <CAN_ClearITPendingBit+0x72>
 800120e:	4770      	bx	lr
 8001210:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001214:	d013      	beq.n	800123e <CAN_ClearITPendingBit+0x66>
 8001216:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800121a:	d012      	beq.n	8001242 <CAN_ClearITPendingBit+0x6a>
 800121c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001220:	d115      	bne.n	800124e <CAN_ClearITPendingBit+0x76>
 8001222:	e010      	b.n	8001246 <CAN_ClearITPendingBit+0x6e>
  {
      case CAN_IT_TME:
              /* Clear CAN_TSR_RQCPx (rc_w1)*/
	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <CAN_ClearITPendingBit+0x78>)
 8001226:	6083      	str	r3, [r0, #8]
	      break;
 8001228:	4770      	bx	lr
      case CAN_IT_FF0:
              /* Clear CAN_RF0R_FULL0 (rc_w1)*/
	      CANx->RF0R = CAN_RF0R_FULL0; 
 800122a:	2308      	movs	r3, #8
 800122c:	e000      	b.n	8001230 <CAN_ClearITPendingBit+0x58>
	      break;
      case CAN_IT_FOV0:
              /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
	      CANx->RF0R = CAN_RF0R_FOVR0; 
 800122e:	2310      	movs	r3, #16
 8001230:	60c3      	str	r3, [r0, #12]
	      break;
 8001232:	4770      	bx	lr
      case CAN_IT_FF1:
              /* Clear CAN_RF1R_FULL1 (rc_w1)*/
	      CANx->RF1R = CAN_RF1R_FULL1;  
 8001234:	2308      	movs	r3, #8
 8001236:	e000      	b.n	800123a <CAN_ClearITPendingBit+0x62>
	      break;
      case CAN_IT_FOV1:
              /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
	      CANx->RF1R = CAN_RF1R_FOVR1; 
 8001238:	2310      	movs	r3, #16
 800123a:	6103      	str	r3, [r0, #16]
	      break;
 800123c:	4770      	bx	lr
      case CAN_IT_WKU:
              /* Clear CAN_MSR_WKUI (rc_w1)*/
	      CANx->MSR = CAN_MSR_WKUI;  
 800123e:	2308      	movs	r3, #8
 8001240:	e004      	b.n	800124c <CAN_ClearITPendingBit+0x74>
	      break;
      case CAN_IT_SLK:
              /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
	      CANx->MSR = CAN_MSR_SLAKI;   
 8001242:	2310      	movs	r3, #16
 8001244:	e002      	b.n	800124c <CAN_ClearITPendingBit+0x74>
              /* Clear CAN_MSR_ERRI (rc_w1) */
	      CANx->MSR = CAN_MSR_ERRI; 
	      break;
      case CAN_IT_ERR:
              /*Clear LEC bits */
	      CANx->ESR = RESET; 
 8001246:	2300      	movs	r3, #0
 8001248:	6183      	str	r3, [r0, #24]
              /* Clear CAN_MSR_ERRI (rc_w1) */
	      CANx->MSR = CAN_MSR_ERRI; 
 800124a:	2304      	movs	r3, #4
 800124c:	6043      	str	r3, [r0, #4]
 800124e:	4770      	bx	lr
 8001250:	00010101 	.word	0x00010101

08001254 <CEC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void CEC_DeInit(void)
{
 8001254:	b508      	push	{r3, lr}
  /* Enable CEC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
 8001256:	2101      	movs	r1, #1
 8001258:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800125c:	f001 fc28 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
  /* Release CEC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
}
 8001260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CEC_DeInit(void)
{
  /* Enable CEC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
  /* Release CEC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
 8001264:	2100      	movs	r1, #0
 8001266:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800126a:	f001 bc21 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>

0800126e <CEC_Init>:
  *         contains the configuration information for the specified
  *         CEC peripheral.
  * @retval None
  */
void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
{
 800126e:	b510      	push	{r4, lr}
  assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
  assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
     
  /*---------------------------- CEC CFGR Configuration -----------------*/
  /* Get the CEC CFGR value */
  tmpreg = CEC->CFGR;
 8001270:	4c05      	ldr	r4, [pc, #20]	; (8001288 <CEC_Init+0x1a>)
  
  /* Configure CEC: Bit Timing Error and Bit Period Error */
  tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);

  /* Write to CEC CFGR  register*/
  CEC->CFGR = tmpreg;
 8001272:	8842      	ldrh	r2, [r0, #2]
  assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
  assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
     
  /*---------------------------- CEC CFGR Configuration -----------------*/
  /* Get the CEC CFGR value */
  tmpreg = CEC->CFGR;
 8001274:	6823      	ldr	r3, [r4, #0]
  
  /* Clear BTEM and BPEM bits */
  tmpreg &= CFGR_CLEAR_Mask;
 8001276:	f003 01f3 	and.w	r1, r3, #243	; 0xf3
  
  /* Configure CEC: Bit Timing Error and Bit Period Error */
  tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);

  /* Write to CEC CFGR  register*/
  CEC->CFGR = tmpreg;
 800127a:	8803      	ldrh	r3, [r0, #0]
 800127c:	4313      	orrs	r3, r2
 800127e:	430b      	orrs	r3, r1
 8001280:	b29b      	uxth	r3, r3
 8001282:	6023      	str	r3, [r4, #0]
 8001284:	bd10      	pop	{r4, pc}
 8001286:	bf00      	nop
 8001288:	40007800 	.word	0x40007800

0800128c <CEC_Cmd>:
void CEC_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CFGR_PE_BB = (uint32_t)NewState;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <CEC_Cmd+0x10>)
 800128e:	6018      	str	r0, [r3, #0]

  if(NewState == DISABLE)
 8001290:	b918      	cbnz	r0, 800129a <CEC_Cmd+0xe>
  {
    /* Wait until the PE bit is cleared by hardware (Idle Line detected) */
    while((CEC->CFGR & CEC_CFGR_PE) != (uint32_t)RESET)
 8001292:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <CEC_Cmd+0x14>)
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	07db      	lsls	r3, r3, #31
 8001298:	d4fc      	bmi.n	8001294 <CEC_Cmd+0x8>
 800129a:	4770      	bx	lr
 800129c:	420f0000 	.word	0x420f0000
 80012a0:	40007800 	.word	0x40007800

080012a4 <CEC_ITConfig>:
void CEC_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CFGR_IE_BB = (uint32_t)NewState;
 80012a4:	4b01      	ldr	r3, [pc, #4]	; (80012ac <CEC_ITConfig+0x8>)
 80012a6:	6018      	str	r0, [r3, #0]
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	420f0004 	.word	0x420f0004

080012b0 <CEC_OwnAddressConfig>:
{
  /* Check the parameters */
  assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));

  /* Set the CEC own address */
  CEC->OAR = CEC_OwnAddress;
 80012b0:	4b01      	ldr	r3, [pc, #4]	; (80012b8 <CEC_OwnAddressConfig+0x8>)
 80012b2:	6058      	str	r0, [r3, #4]
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40007800 	.word	0x40007800

080012bc <CEC_SetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_CEC_PRESCALER(CEC_Prescaler));

  /* Set the  Prescaler value*/
  CEC->PRES = CEC_Prescaler;
 80012bc:	4b01      	ldr	r3, [pc, #4]	; (80012c4 <CEC_SetPrescaler+0x8>)
 80012be:	6098      	str	r0, [r3, #8]
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40007800 	.word	0x40007800

080012c8 <CEC_SendDataByte>:
  * @retval None
  */
void CEC_SendDataByte(uint8_t Data)
{  
  /* Transmit Data */
  CEC->TXD = Data ;
 80012c8:	4b01      	ldr	r3, [pc, #4]	; (80012d0 <CEC_SendDataByte+0x8>)
 80012ca:	6158      	str	r0, [r3, #20]
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40007800 	.word	0x40007800

080012d4 <CEC_ReceiveDataByte>:
  * @retval The received data.
  */
uint8_t CEC_ReceiveDataByte(void)
{
  /* Receive Data */
  return (uint8_t)(CEC->RXD);
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <CEC_ReceiveDataByte+0x8>)
 80012d6:	6998      	ldr	r0, [r3, #24]
}
 80012d8:	b2c0      	uxtb	r0, r0
 80012da:	4770      	bx	lr
 80012dc:	40007800 	.word	0x40007800

080012e0 <CEC_StartOfMessage>:
  * @retval None
  */
void CEC_StartOfMessage(void)
{  
  /* Starts of new message */
  *(__IO uint32_t *) CSR_TSOM_BB = (uint32_t)0x1;
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <CEC_StartOfMessage+0x8>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4770      	bx	lr
 80012e8:	420f0200 	.word	0x420f0200

080012ec <CEC_EndOfMessageCmd>:
{   
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* The data byte will be transmitted with or without an EOM bit*/
  *(__IO uint32_t *) CSR_TEOM_BB = (uint32_t)NewState;
 80012ec:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <CEC_EndOfMessageCmd+0x8>)
 80012ee:	6018      	str	r0, [r3, #0]
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	420f0204 	.word	0x420f0204

080012f8 <CEC_GetFlagStatus>:
  cecreg = CEC_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  CEC_FLAG &= FLAG_Mask;
  
  if(cecreg != 0)
 80012f8:	0f02      	lsrs	r2, r0, #28
  {
    /* Flag in CEC ESR Register */
    CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
    
    /* Get the CEC ESR register address */
    cecbase += 0xC;
 80012fa:	bf14      	ite	ne
 80012fc:	4a05      	ldrne	r2, [pc, #20]	; (8001314 <CEC_GetFlagStatus+0x1c>)
  }
  else
  {
    /* Get the CEC CSR register address */
    cecbase += 0x10;
 80012fe:	4a06      	ldreq	r2, [pc, #24]	; (8001318 <CEC_GetFlagStatus+0x20>)
  
  /* Read flag register index */
  cecreg = CEC_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  CEC_FLAG &= FLAG_Mask;
 8001300:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
  {
    /* Get the CEC CSR register address */
    cecbase += 0x10;
  }
  
  if(((*(__IO uint32_t *)cecbase) & CEC_FLAG) != (uint32_t)RESET)
 8001304:	6812      	ldr	r2, [r2, #0]
  CEC_FLAG &= FLAG_Mask;
  
  if(cecreg != 0)
  {
    /* Flag in CEC ESR Register */
    CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
 8001306:	bf18      	it	ne
 8001308:	0c1b      	lsrne	r3, r3, #16
    /* CEC_FLAG is reset */
    bitstatus = RESET;
  }
  
  /* Return the CEC_FLAG status */
  return  bitstatus;
 800130a:	4213      	tst	r3, r2
}
 800130c:	bf14      	ite	ne
 800130e:	2001      	movne	r0, #1
 8001310:	2000      	moveq	r0, #0
 8001312:	4770      	bx	lr
 8001314:	4000780c 	.word	0x4000780c
 8001318:	40007810 	.word	0x40007810

0800131c <CEC_ClearFlag>:
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 800131c:	43c0      	mvns	r0, r0
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <CEC_ClearFlag+0x18>)
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 8001320:	f020 0003 	bic.w	r0, r0, #3
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
 8001324:	6913      	ldr	r3, [r2, #16]
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 8001326:	6911      	ldr	r1, [r2, #16]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	4303      	orrs	r3, r0
 800132e:	400b      	ands	r3, r1
 8001330:	6113      	str	r3, [r2, #16]
 8001332:	4770      	bx	lr
 8001334:	40007800 	.word	0x40007800

08001338 <CEC_GetITStatus>:
  
  /* Check the parameters */
   assert_param(IS_CEC_GET_IT(CEC_IT));
   
  /* Get the CEC IT enable bit status */
  enablestatus = (CEC->CFGR & (uint8_t)CEC_CFGR_IE) ;
 8001338:	4a03      	ldr	r2, [pc, #12]	; (8001348 <CEC_GetITStatus+0x10>)
 800133a:	6811      	ldr	r1, [r2, #0]
  
  /* Check the status of the specified CEC interrupt */
  if (((CEC->CSR & CEC_IT) != (uint32_t)RESET) && enablestatus)
 800133c:	6913      	ldr	r3, [r2, #16]
 800133e:	4018      	ands	r0, r3
  {
    /* CEC_IT is set */
    bitstatus = SET;
 8001340:	bf18      	it	ne
 8001342:	f3c1 0040 	ubfxne	r0, r1, #1, #1
    /* CEC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the CEC_IT status */
  return  bitstatus;
}
 8001346:	4770      	bx	lr
 8001348:	40007800 	.word	0x40007800

0800134c <CEC_ClearITPendingBit>:
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 800134c:	43c0      	mvns	r0, r0
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <CEC_ClearITPendingBit+0x18>)
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 8001350:	f020 0003 	bic.w	r0, r0, #3
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
 8001354:	6913      	ldr	r3, [r2, #16]
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 8001356:	6911      	ldr	r1, [r2, #16]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	4303      	orrs	r3, r0
 800135e:	400b      	ands	r3, r1
 8001360:	6113      	str	r3, [r2, #16]
 8001362:	4770      	bx	lr
 8001364:	40007800 	.word	0x40007800

08001368 <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8001368:	4b01      	ldr	r3, [pc, #4]	; (8001370 <CRC_ResetDR+0x8>)
 800136a:	2201      	movs	r2, #1
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	4770      	bx	lr
 8001370:	40023000 	.word	0x40023000

08001374 <CRC_CalcCRC>:
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
  CRC->DR = Data;
 8001374:	4b01      	ldr	r3, [pc, #4]	; (800137c <CRC_CalcCRC+0x8>)
 8001376:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 8001378:	6818      	ldr	r0, [r3, #0]
}
 800137a:	4770      	bx	lr
 800137c:	40023000 	.word	0x40023000

08001380 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <CRC_CalcBlockCRC+0x18>)
 8001382:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8001386:	4288      	cmp	r0, r1
 8001388:	d003      	beq.n	8001392 <CRC_CalcBlockCRC+0x12>
  {
    CRC->DR = pBuffer[index];
 800138a:	f850 2b04 	ldr.w	r2, [r0], #4
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	e7f9      	b.n	8001386 <CRC_CalcBlockCRC+0x6>
  }
  return (CRC->DR);
 8001392:	4b01      	ldr	r3, [pc, #4]	; (8001398 <CRC_CalcBlockCRC+0x18>)
 8001394:	6818      	ldr	r0, [r3, #0]
}
 8001396:	4770      	bx	lr
 8001398:	40023000 	.word	0x40023000

0800139c <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 800139c:	4b01      	ldr	r3, [pc, #4]	; (80013a4 <CRC_GetCRC+0x8>)
 800139e:	6818      	ldr	r0, [r3, #0]
}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023000 	.word	0x40023000

080013a8 <CRC_SetIDRegister>:
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
  CRC->IDR = IDValue;
 80013a8:	4b01      	ldr	r3, [pc, #4]	; (80013b0 <CRC_SetIDRegister+0x8>)
 80013aa:	7118      	strb	r0, [r3, #4]
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023000 	.word	0x40023000

080013b4 <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 80013b4:	4b01      	ldr	r3, [pc, #4]	; (80013bc <CRC_GetIDRegister+0x8>)
 80013b6:	7918      	ldrb	r0, [r3, #4]
}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023000 	.word	0x40023000

080013c0 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 80013c0:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 80013c2:	2101      	movs	r1, #1
 80013c4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80013c8:	f001 fb72 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
}
 80013cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DAC_DeInit(void)
{
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80013d0:	2100      	movs	r1, #0
 80013d2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80013d6:	f001 bb6b 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>

080013da <DAC_Init>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80013da:	f640 73fe 	movw	r3, #4094	; 0xffe
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80013de:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80013e0:	4d08      	ldr	r5, [pc, #32]	; (8001404 <DAC_Init+0x2a>)
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80013e2:	4083      	lsls	r3, r0
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80013e4:	682a      	ldr	r2, [r5, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80013e6:	ea22 0303 	bic.w	r3, r2, r3
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80013ea:	e891 0014 	ldmia.w	r1, {r2, r4}
 80013ee:	4314      	orrs	r4, r2
 80013f0:	688a      	ldr	r2, [r1, #8]
 80013f2:	4314      	orrs	r4, r2
 80013f4:	68ca      	ldr	r2, [r1, #12]
 80013f6:	4322      	orrs	r2, r4
 80013f8:	fa02 f000 	lsl.w	r0, r2, r0
 80013fc:	4318      	orrs	r0, r3
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80013fe:	6028      	str	r0, [r5, #0]
 8001400:	bd30      	pop	{r4, r5, pc}
 8001402:	bf00      	nop
 8001404:	40007400 	.word	0x40007400

08001408 <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8001408:	2300      	movs	r3, #0
 800140a:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 800140c:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 800140e:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001410:	60c3      	str	r3, [r0, #12]
 8001412:	4770      	bx	lr

08001414 <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <DAC_Cmd+0x1c>)
 8001416:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001418:	b119      	cbz	r1, 8001422 <DAC_Cmd+0xe>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800141a:	6811      	ldr	r1, [r2, #0]
 800141c:	4083      	lsls	r3, r0
 800141e:	430b      	orrs	r3, r1
 8001420:	e003      	b.n	800142a <DAC_Cmd+0x16>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
 8001422:	6811      	ldr	r1, [r2, #0]
 8001424:	4083      	lsls	r3, r0
 8001426:	ea21 0303 	bic.w	r3, r1, r3
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40007400 	.word	0x40007400

08001434 <DAC_DMACmd>:
  * @param  NewState: new state of the selected DAC channel DMA request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <DAC_DMACmd+0x1c>)
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800143a:	b119      	cbz	r1, 8001444 <DAC_DMACmd+0x10>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 800143c:	6811      	ldr	r1, [r2, #0]
 800143e:	4083      	lsls	r3, r0
 8001440:	430b      	orrs	r3, r1
 8001442:	e003      	b.n	800144c <DAC_DMACmd+0x18>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
 8001444:	6811      	ldr	r1, [r2, #0]
 8001446:	4083      	lsls	r3, r0
 8001448:	ea21 0303 	bic.w	r3, r1, r3
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4770      	bx	lr
 8001450:	40007400 	.word	0x40007400

08001454 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <DAC_SoftwareTriggerCmd+0x1c>)
 8001456:	0900      	lsrs	r0, r0, #4
 8001458:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800145a:	b119      	cbz	r1, 8001464 <DAC_SoftwareTriggerCmd+0x10>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 800145c:	6851      	ldr	r1, [r2, #4]
 800145e:	4083      	lsls	r3, r0
 8001460:	430b      	orrs	r3, r1
 8001462:	e003      	b.n	800146c <DAC_SoftwareTriggerCmd+0x18>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8001464:	6851      	ldr	r1, [r2, #4]
 8001466:	4083      	lsls	r3, r0
 8001468:	ea21 0303 	bic.w	r3, r1, r3
 800146c:	6053      	str	r3, [r2, #4]
 800146e:	4770      	bx	lr
 8001470:	40007400 	.word	0x40007400

08001474 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <DAC_DualSoftwareTriggerCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
 8001476:	685a      	ldr	r2, [r3, #4]
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001478:	b110      	cbz	r0, 8001480 <DAC_DualSoftwareTriggerCmd+0xc>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
 800147a:	f042 0203 	orr.w	r2, r2, #3
 800147e:	e001      	b.n	8001484 <DAC_DualSoftwareTriggerCmd+0x10>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8001480:	f022 0203 	bic.w	r2, r2, #3
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	4770      	bx	lr
 8001488:	40007400 	.word	0x40007400

0800148c <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <DAC_WaveGenerationCmd+0x18>)
 800148e:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001490:	b112      	cbz	r2, 8001498 <DAC_WaveGenerationCmd+0xc>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4311      	orrs	r1, r2
 8001496:	e002      	b.n	800149e <DAC_WaveGenerationCmd+0x12>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	ea22 0101 	bic.w	r1, r2, r1
 800149e:	6019      	str	r1, [r3, #0]
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40007400 	.word	0x40007400

080014a8 <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80014a8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <DAC_SetChannel1Data+0x1c>)
 80014b0:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80014b2:	9b01      	ldr	r3, [sp, #4]
 80014b4:	3308      	adds	r3, #8
 80014b6:	4418      	add	r0, r3
 80014b8:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80014ba:	9b01      	ldr	r3, [sp, #4]
 80014bc:	6019      	str	r1, [r3, #0]
}
 80014be:	b002      	add	sp, #8
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40007400 	.word	0x40007400

080014c8 <DAC_SetChannel2Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 80014c8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <DAC_SetChannel2Data+0x1c>)
 80014d0:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 80014d2:	9b01      	ldr	r3, [sp, #4]
 80014d4:	3314      	adds	r3, #20
 80014d6:	4418      	add	r0, r3
 80014d8:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	6019      	str	r1, [r3, #0]
}
 80014de:	b002      	add	sp, #8
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40007400 	.word	0x40007400

080014e8 <DAC_SetDualChannelData>:
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 80014e8:	2808      	cmp	r0, #8
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <DAC_SetDualChannelData+0x14>)
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 80014ec:	bf0c      	ite	eq
 80014ee:	ea42 2201 	orreq.w	r2, r2, r1, lsl #8
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 80014f2:	ea42 4201 	orrne.w	r2, r2, r1, lsl #16
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80014f6:	50c2      	str	r2, [r0, r3]
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40007420 	.word	0x40007420

08001500 <DAC_GetDataOutputValue>:
  *     @arg DAC_Channel_1: DAC Channel1 selected
  *     @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8001500:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <DAC_GetDataOutputValue+0x20>)
 8001508:	9301      	str	r3, [sp, #4]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 800150a:	9b01      	ldr	r3, [sp, #4]
 800150c:	332c      	adds	r3, #44	; 0x2c
 800150e:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8001512:	9001      	str	r0, [sp, #4]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8001514:	9b01      	ldr	r3, [sp, #4]
 8001516:	6818      	ldr	r0, [r3, #0]
}
 8001518:	b280      	uxth	r0, r0
 800151a:	b002      	add	sp, #8
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40007400 	.word	0x40007400

08001524 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001524:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001528:	6802      	ldr	r2, [r0, #0]
 800152a:	4013      	ands	r3, r2
 800152c:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8001532:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8001534:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8001536:	60c3      	str	r3, [r0, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <DMA_DeInit+0xb8>)
 800153a:	4298      	cmp	r0, r3
 800153c:	d101      	bne.n	8001542 <DMA_DeInit+0x1e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <DMA_DeInit+0xbc>)
 8001540:	e027      	b.n	8001592 <DMA_DeInit+0x6e>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8001542:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <DMA_DeInit+0xc0>)
 8001544:	4298      	cmp	r0, r3
 8001546:	d101      	bne.n	800154c <DMA_DeInit+0x28>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8001548:	4a25      	ldr	r2, [pc, #148]	; (80015e0 <DMA_DeInit+0xbc>)
 800154a:	e02a      	b.n	80015a2 <DMA_DeInit+0x7e>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <DMA_DeInit+0xc4>)
 800154e:	4298      	cmp	r0, r3
 8001550:	d101      	bne.n	8001556 <DMA_DeInit+0x32>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <DMA_DeInit+0xbc>)
 8001554:	e02d      	b.n	80015b2 <DMA_DeInit+0x8e>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <DMA_DeInit+0xc8>)
 8001558:	4298      	cmp	r0, r3
 800155a:	d101      	bne.n	8001560 <DMA_DeInit+0x3c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <DMA_DeInit+0xbc>)
 800155e:	e030      	b.n	80015c2 <DMA_DeInit+0x9e>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <DMA_DeInit+0xcc>)
 8001562:	4298      	cmp	r0, r3
 8001564:	d101      	bne.n	800156a <DMA_DeInit+0x46>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <DMA_DeInit+0xbc>)
 8001568:	e033      	b.n	80015d2 <DMA_DeInit+0xae>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <DMA_DeInit+0xd0>)
 800156c:	4298      	cmp	r0, r3
 800156e:	d104      	bne.n	800157a <DMA_DeInit+0x56>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8001570:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <DMA_DeInit+0xbc>)
 8001572:	6853      	ldr	r3, [r2, #4]
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	e02e      	b.n	80015d8 <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <DMA_DeInit+0xd4>)
 800157c:	4298      	cmp	r0, r3
 800157e:	d104      	bne.n	800158a <DMA_DeInit+0x66>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8001580:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <DMA_DeInit+0xbc>)
 8001582:	6853      	ldr	r3, [r2, #4]
 8001584:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001588:	e026      	b.n	80015d8 <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <DMA_DeInit+0xd8>)
 800158c:	4298      	cmp	r0, r3
 800158e:	d104      	bne.n	800159a <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <DMA_DeInit+0xdc>)
 8001592:	6853      	ldr	r3, [r2, #4]
 8001594:	f043 030f 	orr.w	r3, r3, #15
 8001598:	e01e      	b.n	80015d8 <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <DMA_DeInit+0xe0>)
 800159c:	4298      	cmp	r0, r3
 800159e:	d104      	bne.n	80015aa <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 80015a0:	4a17      	ldr	r2, [pc, #92]	; (8001600 <DMA_DeInit+0xdc>)
 80015a2:	6853      	ldr	r3, [r2, #4]
 80015a4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80015a8:	e016      	b.n	80015d8 <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <DMA_DeInit+0xe4>)
 80015ac:	4298      	cmp	r0, r3
 80015ae:	d104      	bne.n	80015ba <DMA_DeInit+0x96>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 80015b0:	4a13      	ldr	r2, [pc, #76]	; (8001600 <DMA_DeInit+0xdc>)
 80015b2:	6853      	ldr	r3, [r2, #4]
 80015b4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80015b8:	e00e      	b.n	80015d8 <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <DMA_DeInit+0xe8>)
 80015bc:	4298      	cmp	r0, r3
 80015be:	d104      	bne.n	80015ca <DMA_DeInit+0xa6>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <DMA_DeInit+0xdc>)
 80015c2:	6853      	ldr	r3, [r2, #4]
 80015c4:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80015c8:	e006      	b.n	80015d8 <DMA_DeInit+0xb4>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <DMA_DeInit+0xec>)
 80015cc:	4298      	cmp	r0, r3
 80015ce:	d104      	bne.n	80015da <DMA_DeInit+0xb6>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <DMA_DeInit+0xdc>)
 80015d2:	6853      	ldr	r3, [r2, #4]
 80015d4:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80015d8:	6053      	str	r3, [r2, #4]
 80015da:	4770      	bx	lr
 80015dc:	40020008 	.word	0x40020008
 80015e0:	40020000 	.word	0x40020000
 80015e4:	4002001c 	.word	0x4002001c
 80015e8:	40020030 	.word	0x40020030
 80015ec:	40020044 	.word	0x40020044
 80015f0:	40020058 	.word	0x40020058
 80015f4:	4002006c 	.word	0x4002006c
 80015f8:	40020080 	.word	0x40020080
 80015fc:	40020408 	.word	0x40020408
 8001600:	40020400 	.word	0x40020400
 8001604:	4002041c 	.word	0x4002041c
 8001608:	40020430 	.word	0x40020430
 800160c:	40020444 	.word	0x40020444
 8001610:	40020458 	.word	0x40020458

08001614 <DMA_Init>:
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001614:	6a0a      	ldr	r2, [r1, #32]
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001616:	b510      	push	{r4, lr}
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001618:	688c      	ldr	r4, [r1, #8]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 800161a:	6803      	ldr	r3, [r0, #0]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800161c:	4314      	orrs	r4, r2
 800161e:	690a      	ldr	r2, [r1, #16]

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8001620:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001624:	4314      	orrs	r4, r2
 8001626:	694a      	ldr	r2, [r1, #20]

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8001628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800162c:	4314      	orrs	r4, r2
 800162e:	698a      	ldr	r2, [r1, #24]
 8001630:	4314      	orrs	r4, r2
 8001632:	69ca      	ldr	r2, [r1, #28]
 8001634:	4314      	orrs	r4, r2
 8001636:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001638:	4314      	orrs	r4, r2
 800163a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800163c:	4322      	orrs	r2, r4
 800163e:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001640:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001642:	68cb      	ldr	r3, [r1, #12]
 8001644:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001646:	680b      	ldr	r3, [r1, #0]
 8001648:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800164a:	684b      	ldr	r3, [r1, #4]
 800164c:	60c3      	str	r3, [r0, #12]
 800164e:	bd10      	pop	{r4, pc}

08001650 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	6003      	str	r3, [r0, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8001654:	6043      	str	r3, [r0, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8001656:	6083      	str	r3, [r0, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8001658:	60c3      	str	r3, [r0, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800165a:	6103      	str	r3, [r0, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800165c:	6143      	str	r3, [r0, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800165e:	6183      	str	r3, [r0, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001660:	61c3      	str	r3, [r0, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8001662:	6203      	str	r3, [r0, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001664:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 8001666:	6283      	str	r3, [r0, #40]	; 0x28
 8001668:	4770      	bx	lr

0800166a <DMA_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800166a:	b119      	cbz	r1, 8001674 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 800166c:	6803      	ldr	r3, [r0, #0]
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	e003      	b.n	800167c <DMA_Cmd+0x12>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001674:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001678:	6802      	ldr	r2, [r0, #0]
 800167a:	4013      	ands	r3, r2
 800167c:	6003      	str	r3, [r0, #0]
 800167e:	4770      	bx	lr

08001680 <DMA_ITConfig>:
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001680:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001682:	b10a      	cbz	r2, 8001688 <DMA_ITConfig+0x8>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001684:	4319      	orrs	r1, r3
 8001686:	e001      	b.n	800168c <DMA_ITConfig+0xc>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8001688:	ea23 0101 	bic.w	r1, r3, r1
 800168c:	6001      	str	r1, [r0, #0]
 800168e:	4770      	bx	lr

08001690 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8001690:	6041      	str	r1, [r0, #4]
 8001692:	4770      	bx	lr

08001694 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8001694:	6840      	ldr	r0, [r0, #4]
}
 8001696:	b280      	uxth	r0, r0
 8001698:	4770      	bx	lr

0800169a <DMA_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 800169a:	00c3      	lsls	r3, r0, #3
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 800169c:	bf4c      	ite	mi
 800169e:	4b04      	ldrmi	r3, [pc, #16]	; (80016b0 <DMA_GetITStatus+0x16>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 80016a0:	4b04      	ldrpl	r3, [pc, #16]	; (80016b4 <DMA_GetITStatus+0x1a>)
 80016a2:	681b      	ldr	r3, [r3, #0]
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 80016a4:	4203      	tst	r3, r0
}
 80016a6:	bf14      	ite	ne
 80016a8:	2001      	movne	r0, #1
 80016aa:	2000      	moveq	r0, #0
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020000 	.word	0x40020000

080016b8 <DMA_GetFlagStatus>:
 80016b8:	f7ff bfef 	b.w	800169a <DMA_GetITStatus>

080016bc <DMA_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 80016bc:	00c3      	lsls	r3, r0, #3
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 80016be:	bf4c      	ite	mi
 80016c0:	4b01      	ldrmi	r3, [pc, #4]	; (80016c8 <DMA_ClearITPendingBit+0xc>)
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 80016c2:	4b02      	ldrpl	r3, [pc, #8]	; (80016cc <DMA_ClearITPendingBit+0x10>)
 80016c4:	6058      	str	r0, [r3, #4]
 80016c6:	4770      	bx	lr
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40020000 	.word	0x40020000

080016d0 <DMA_ClearFlag>:
 80016d0:	f7ff bff4 	b.w	80016bc <DMA_ClearITPendingBit>

080016d4 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <EXTI_DeInit+0x14>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80016da:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
 80016dc:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
 80016de:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
 80016e0:	4a02      	ldr	r2, [pc, #8]	; (80016ec <EXTI_DeInit+0x18>)
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40010400 	.word	0x40010400
 80016ec:	000fffff 	.word	0x000fffff

080016f0 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80016f0:	7982      	ldrb	r2, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80016f2:	b570      	push	{r4, r5, r6, lr}
 80016f4:	6801      	ldr	r1, [r0, #0]
 80016f6:	7903      	ldrb	r3, [r0, #4]
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80016f8:	b342      	cbz	r2, 800174c <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80016fa:	43ce      	mvns	r6, r1
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <EXTI_Init+0x70>)
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80016fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001702:	6815      	ldr	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001704:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001708:	4035      	ands	r5, r6
 800170a:	6015      	str	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800170c:	6854      	ldr	r4, [r2, #4]
 800170e:	4034      	ands	r4, r6
 8001710:	6054      	str	r4, [r2, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001712:	681c      	ldr	r4, [r3, #0]
 8001714:	4321      	orrs	r1, r4
 8001716:	6019      	str	r1, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001718:	6801      	ldr	r1, [r0, #0]
 800171a:	6894      	ldr	r4, [r2, #8]
 800171c:	43cd      	mvns	r5, r1
 800171e:	402c      	ands	r4, r5
 8001720:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8001722:	68d3      	ldr	r3, [r2, #12]
 8001724:	402b      	ands	r3, r5
 8001726:	60d3      	str	r3, [r2, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8001728:	7943      	ldrb	r3, [r0, #5]
 800172a:	2b10      	cmp	r3, #16
 800172c:	d106      	bne.n	800173c <EXTI_Init+0x4c>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800172e:	6893      	ldr	r3, [r2, #8]
 8001730:	430b      	orrs	r3, r1
 8001732:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001734:	68d3      	ldr	r3, [r2, #12]
 8001736:	4319      	orrs	r1, r3
 8001738:	60d1      	str	r1, [r2, #12]
 800173a:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800173c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001740:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4311      	orrs	r1, r2
 8001748:	6019      	str	r1, [r3, #0]
 800174a:	bd70      	pop	{r4, r5, r6, pc}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800174c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001750:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	ea22 0201 	bic.w	r2, r2, r1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	bf00      	nop
 8001760:	40010400 	.word	0x40010400

08001764 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8001764:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8001766:	220c      	movs	r2, #12
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8001768:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800176a:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800176c:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800176e:	7183      	strb	r3, [r0, #6]
 8001770:	4770      	bx	lr

08001772 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8001772:	4a02      	ldr	r2, [pc, #8]	; (800177c <EXTI_GenerateSWInterrupt+0xa>)
 8001774:	6913      	ldr	r3, [r2, #16]
 8001776:	4318      	orrs	r0, r3
 8001778:	6110      	str	r0, [r2, #16]
 800177a:	4770      	bx	lr
 800177c:	40010400 	.word	0x40010400

08001780 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <EXTI_GetFlagStatus+0x10>)
 8001782:	695b      	ldr	r3, [r3, #20]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001784:	4203      	tst	r3, r0
}
 8001786:	bf14      	ite	ne
 8001788:	2001      	movne	r0, #1
 800178a:	2000      	moveq	r0, #0
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40010400 	.word	0x40010400

08001794 <EXTI_ClearFlag>:
 8001794:	4b01      	ldr	r3, [pc, #4]	; (800179c <EXTI_ClearFlag+0x8>)
 8001796:	6158      	str	r0, [r3, #20]
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40010400 	.word	0x40010400

080017a0 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <EXTI_GetITStatus+0x18>)
 80017a2:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	4003      	ands	r3, r0
 80017a8:	d004      	beq.n	80017b4 <EXTI_GetITStatus+0x14>
  {
    bitstatus = SET;
 80017aa:	4202      	tst	r2, r0
 80017ac:	bf14      	ite	ne
 80017ae:	2001      	movne	r0, #1
 80017b0:	2000      	moveq	r0, #0
 80017b2:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 80017b4:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 80017b6:	4770      	bx	lr
 80017b8:	40010400 	.word	0x40010400

080017bc <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80017bc:	4b01      	ldr	r3, [pc, #4]	; (80017c4 <EXTI_ClearITPendingBit+0x8>)
 80017be:	6158      	str	r0, [r3, #20]
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40010400 	.word	0x40010400

080017c8 <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 80017c8:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <FLASH_SetLatency+0x10>)
 80017ca:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 80017cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 80017d0:	4318      	orrs	r0, r3
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 80017d2:	6010      	str	r0, [r2, #0]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40022000 	.word	0x40022000

080017dc <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <FLASH_HalfCycleAccessCmd+0x14>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	f022 0208 	bic.w	r2, r2, #8
 80017e4:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4310      	orrs	r0, r2
 80017ea:	6018      	str	r0, [r3, #0]
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000

080017f4 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <FLASH_PrefetchBufferCmd+0x14>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f022 0210 	bic.w	r2, r2, #16
 80017fc:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4310      	orrs	r0, r2
 8001802:	6018      	str	r0, [r3, #0]
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000

0800180c <FLASH_UnlockBank1>:
  * @retval None
  */
void FLASH_UnlockBank1(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <FLASH_UnlockBank1+0x10>)
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <FLASH_UnlockBank1+0x14>)
 8001810:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 8001812:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000
 8001820:	45670123 	.word	0x45670123

08001824 <FLASH_Unlock>:
 8001824:	f7ff bff2 	b.w	800180c <FLASH_UnlockBank1>

08001828 <FLASH_LockBank1>:
  * @retval None
  */
void FLASH_LockBank1(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 8001828:	4a02      	ldr	r2, [pc, #8]	; (8001834 <FLASH_LockBank1+0xc>)
 800182a:	6913      	ldr	r3, [r2, #16]
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	6113      	str	r3, [r2, #16]
 8001832:	4770      	bx	lr
 8001834:	40022000 	.word	0x40022000

08001838 <FLASH_Lock>:
 8001838:	f7ff bff6 	b.w	8001828 <FLASH_LockBank1>

0800183c <FLASH_GetUserOptionByte>:
  *         and RST_STDBY(Bit2).
  */
uint32_t FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (uint32_t)(FLASH->OBR >> 2);
 800183c:	4b01      	ldr	r3, [pc, #4]	; (8001844 <FLASH_GetUserOptionByte+0x8>)
 800183e:	69d8      	ldr	r0, [r3, #28]
}
 8001840:	0880      	lsrs	r0, r0, #2
 8001842:	4770      	bx	lr
 8001844:	40022000 	.word	0x40022000

08001848 <FLASH_GetWriteProtectionOptionByte>:
  * @retval The FLASH Write Protection  Option Bytes Register value
  */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Flash write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 8001848:	4b01      	ldr	r3, [pc, #4]	; (8001850 <FLASH_GetWriteProtectionOptionByte+0x8>)
 800184a:	6a18      	ldr	r0, [r3, #32]
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000

08001854 <FLASH_GetReadOutProtectionStatus>:
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;
  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <FLASH_GetReadOutProtectionStatus+0xc>)
 8001856:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 8001858:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40022000 	.word	0x40022000

08001864 <FLASH_GetPrefetchBufferStatus>:
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <FLASH_GetPrefetchBufferStatus+0xc>)
 8001866:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 8001868:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40022000 	.word	0x40022000

08001874 <FLASH_ITConfig>:
  * @param  NewState: new state of the specified Flash interrupts.
  *   This parameter can be: ENABLE or DISABLE.      
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8001876:	691a      	ldr	r2, [r3, #16]
#else
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8001878:	b109      	cbz	r1, 800187e <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800187a:	4310      	orrs	r0, r2
 800187c:	e001      	b.n	8001882 <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800187e:	ea22 0000 	bic.w	r0, r2, r0
 8001882:	6118      	str	r0, [r3, #16]
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40022000 	.word	0x40022000

0800188c <FLASH_GetFlagStatus>:
    }
  }
#else
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 800188c:	2801      	cmp	r0, #1
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <FLASH_GetFlagStatus+0x1c>)
 8001890:	d103      	bne.n	800189a <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 8001892:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8001894:	f000 0001 	and.w	r0, r0, #1
 8001898:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800189a:	68db      	ldr	r3, [r3, #12]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 800189c:	4218      	tst	r0, r3
 800189e:	bf14      	ite	ne
 80018a0:	2001      	movne	r0, #1
 80018a2:	2000      	moveq	r0, #0
  }
#endif /* STM32F10X_XL */

  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000

080018ac <FLASH_ClearFlag>:
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80018ac:	4b01      	ldr	r3, [pc, #4]	; (80018b4 <FLASH_ClearFlag+0x8>)
 80018ae:	60d8      	str	r0, [r3, #12]
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40022000 	.word	0x40022000

080018b8 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <FLASH_GetStatus+0x24>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	07d1      	lsls	r1, r2, #31
 80018be:	d409      	bmi.n	80018d4 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	0752      	lsls	r2, r2, #29
 80018c4:	d408      	bmi.n	80018d8 <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80018cc:	bf14      	ite	ne
 80018ce:	2003      	movne	r0, #3
 80018d0:	2004      	moveq	r0, #4
 80018d2:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80018d4:	2001      	movs	r0, #1
 80018d6:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 80018d8:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80018da:	4770      	bx	lr
 80018dc:	40022000 	.word	0x40022000

080018e0 <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <FLASH_GetBank1Status+0x24>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	07d1      	lsls	r1, r2, #31
 80018e6:	d409      	bmi.n	80018fc <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	0752      	lsls	r2, r2, #29
 80018ec:	d408      	bmi.n	8001900 <FLASH_GetBank1Status+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80018f4:	bf14      	ite	ne
 80018f6:	2003      	movne	r0, #3
 80018f8:	2004      	moveq	r0, #4
 80018fa:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80018fc:	2001      	movs	r0, #1
 80018fe:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 8001900:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8001902:	4770      	bx	lr
 8001904:	40022000 	.word	0x40022000

08001908 <FLASH_WaitForLastBank1Operation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
{ 
 8001908:	b510      	push	{r4, lr}
 800190a:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 800190c:	f7ff ffe8 	bl	80018e0 <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 8001910:	2801      	cmp	r0, #1
 8001912:	d106      	bne.n	8001922 <FLASH_WaitForLastBank1Operation+0x1a>
 8001914:	b11c      	cbz	r4, 800191e <FLASH_WaitForLastBank1Operation+0x16>
  {
    status = FLASH_GetBank1Status();
 8001916:	f7ff ffe3 	bl	80018e0 <FLASH_GetBank1Status>
    Timeout--;
 800191a:	3c01      	subs	r4, #1
 800191c:	e7f8      	b.n	8001910 <FLASH_WaitForLastBank1Operation+0x8>
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 800191e:	2005      	movs	r0, #5
 8001920:	bd10      	pop	{r4, pc}
 8001922:	2c00      	cmp	r4, #0
 8001924:	bf08      	it	eq
 8001926:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 8001928:	bd10      	pop	{r4, pc}

0800192a <FLASH_EraseAllBank1Pages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllBank1Pages(void)
{
 800192a:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 800192c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001930:	f7ff ffea 	bl	8001908 <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001934:	2804      	cmp	r0, #4
 8001936:	d111      	bne.n	800195c <FLASH_EraseAllBank1Pages+0x32>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8001938:	4c09      	ldr	r4, [pc, #36]	; (8001960 <FLASH_EraseAllBank1Pages+0x36>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 800193a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800193e:	6923      	ldr	r3, [r4, #16]
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 8001946:	6923      	ldr	r3, [r4, #16]
 8001948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800194c:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 800194e:	f7ff ffdb 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    
    /* Disable the MER Bit */
    FLASH->CR &= CR_MER_Reset;
 8001952:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 8001956:	6922      	ldr	r2, [r4, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	6123      	str	r3, [r4, #16]
  }    
  /* Return the Erase Status */
  return status;
}
 800195c:	bd10      	pop	{r4, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000

08001964 <FLASH_EraseAllPages>:
 8001964:	f7ff bfe1 	b.w	800192a <FLASH_EraseAllBank1Pages>

08001968 <FLASH_UserOptionByteConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800196a:	4d13      	ldr	r5, [pc, #76]	; (80019b8 <FLASH_UserOptionByteConfig+0x50>)
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <FLASH_UserOptionByteConfig+0x54>)
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 800196e:	4604      	mov	r4, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8001970:	60ab      	str	r3, [r5, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8001972:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001976:	60ab      	str	r3, [r5, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001978:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 800197c:	460f      	mov	r7, r1
 800197e:	4616      	mov	r6, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001980:	f7ff ffc2 	bl	8001908 <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001984:	2804      	cmp	r0, #4
 8001986:	d116      	bne.n	80019b6 <FLASH_UserOptionByteConfig+0x4e>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001988:	692b      	ldr	r3, [r5, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 800198a:	f044 04f8 	orr.w	r4, r4, #248	; 0xf8
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800198e:	f043 0310 	orr.w	r3, r3, #16
 8001992:	612b      	str	r3, [r5, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8001994:	ea47 0104 	orr.w	r1, r7, r4
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <FLASH_UserOptionByteConfig+0x58>)
 800199a:	ea46 0201 	orr.w	r2, r6, r1
 800199e:	805a      	strh	r2, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80019a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019a4:	f7ff ffb0 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    if(status != FLASH_TIMEOUT)
 80019a8:	2805      	cmp	r0, #5
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80019aa:	bf1f      	itttt	ne
 80019ac:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 80019b0:	692a      	ldrne	r2, [r5, #16]
 80019b2:	4013      	andne	r3, r2
 80019b4:	612b      	strne	r3, [r5, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 80019b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019b8:	40022000 	.word	0x40022000
 80019bc:	45670123 	.word	0x45670123
 80019c0:	1ffff800 	.word	0x1ffff800

080019c4 <FLASH_ReadOutProtection>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80019c8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80019cc:	f7ff ff9c 	bl	8001908 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 80019d0:	2804      	cmp	r0, #4
 80019d2:	d136      	bne.n	8001a42 <FLASH_ReadOutProtection+0x7e>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80019d4:	4c1b      	ldr	r4, [pc, #108]	; (8001a44 <FLASH_ReadOutProtection+0x80>)
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <FLASH_ReadOutProtection+0x84>)
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80019d8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80019dc:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80019de:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80019e2:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 80019e4:	6923      	ldr	r3, [r4, #16]
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80019ec:	6923      	ldr	r3, [r4, #16]
 80019ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f2:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80019f4:	f7ff ff88 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    if(status == FLASH_COMPLETE)
 80019f8:	2804      	cmp	r0, #4
 80019fa:	d11b      	bne.n	8001a34 <FLASH_ReadOutProtection+0x70>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80019fc:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8001a00:	6922      	ldr	r2, [r4, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	6123      	str	r3, [r4, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 8001a06:	6923      	ldr	r3, [r4, #16]
 8001a08:	f043 0310 	orr.w	r3, r3, #16
 8001a0c:	6123      	str	r3, [r4, #16]
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <FLASH_ReadOutProtection+0x88>)
      if(NewState != DISABLE)
 8001a10:	b10d      	cbz	r5, 8001a16 <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 8001a12:	2200      	movs	r2, #0
 8001a14:	e000      	b.n	8001a18 <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 8001a16:	22a5      	movs	r2, #165	; 0xa5
 8001a18:	801a      	strh	r2, [r3, #0]
      }
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 8001a1a:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001a1e:	f7ff ff73 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    
      if(status != FLASH_TIMEOUT)
 8001a22:	2805      	cmp	r0, #5
 8001a24:	d00d      	beq.n	8001a42 <FLASH_ReadOutProtection+0x7e>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8001a26:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <FLASH_ReadOutProtection+0x80>)
 8001a2c:	6911      	ldr	r1, [r2, #16]
 8001a2e:	400b      	ands	r3, r1
 8001a30:	6113      	str	r3, [r2, #16]
 8001a32:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 8001a34:	2805      	cmp	r0, #5
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8001a36:	bf1f      	itttt	ne
 8001a38:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8001a3c:	6922      	ldrne	r2, [r4, #16]
 8001a3e:	4013      	andne	r3, r2
 8001a40:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;       
}
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
 8001a44:	40022000 	.word	0x40022000
 8001a48:	45670123 	.word	0x45670123
 8001a4c:	1ffff800 	.word	0x1ffff800

08001a50 <FLASH_EnableWriteProtection>:
  *     @arg FLASH_WRProt_AllPages
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	4604      	mov	r4, r0
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a58:	f7ff ff56 	bl	8001908 <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001a5c:	2804      	cmp	r0, #4
 8001a5e:	d143      	bne.n	8001ae8 <FLASH_EnableWriteProtection+0x98>
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
 8001a60:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <FLASH_EnableWriteProtection+0x9c>)
 8001a64:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <FLASH_EnableWriteProtection+0xa0>)
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 8001a66:	b2e1      	uxtb	r1, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001a68:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001a6a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001a6e:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8001a70:	691a      	ldr	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 8001a72:	29ff      	cmp	r1, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8001a74:	f042 0210 	orr.w	r2, r2, #16
 8001a78:	611a      	str	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 8001a7a:	d104      	bne.n	8001a86 <FLASH_EnableWriteProtection+0x36>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 8001a7c:	f3c4 2307 	ubfx	r3, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d109      	bne.n	8001a98 <FLASH_EnableWriteProtection+0x48>
 8001a84:	e010      	b.n	8001aa8 <FLASH_EnableWriteProtection+0x58>
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8001a8c:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a8e:	f7ff ff3b 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001a92:	2804      	cmp	r0, #4
 8001a94:	d120      	bne.n	8001ad8 <FLASH_EnableWriteProtection+0x88>
 8001a96:	e7f1      	b.n	8001a7c <FLASH_EnableWriteProtection+0x2c>
    {
      OB->WRP1 = WRP1_Data;
 8001a98:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a9a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8001a9e:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001aa0:	f7ff ff32 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8001aa4:	2804      	cmp	r0, #4
 8001aa6:	d117      	bne.n	8001ad8 <FLASH_EnableWriteProtection+0x88>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 8001aa8:	f3c4 4307 	ubfx	r3, r4, #16, #8
      OB->WRP1 = WRP1_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8001aac:	2bff      	cmp	r3, #255	; 0xff
 8001aae:	d007      	beq.n	8001ac0 <FLASH_EnableWriteProtection+0x70>
    {
      OB->WRP2 = WRP2_Data;
 8001ab0:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001ab2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8001ab6:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001ab8:	f7ff ff26 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8001abc:	2804      	cmp	r0, #4
 8001abe:	d10b      	bne.n	8001ad8 <FLASH_EnableWriteProtection+0x88>
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8001ac0:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8001ac2:	2cff      	cmp	r4, #255	; 0xff
 8001ac4:	d101      	bne.n	8001aca <FLASH_EnableWriteProtection+0x7a>
 8001ac6:	2004      	movs	r0, #4
 8001ac8:	e008      	b.n	8001adc <FLASH_EnableWriteProtection+0x8c>
    {
      OB->WRP3 = WRP3_Data;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <FLASH_EnableWriteProtection+0xa4>)
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8001acc:	b2a4      	uxth	r4, r4
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 8001ace:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ad4:	f7ff ff18 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    }
          
    if(status != FLASH_TIMEOUT)
 8001ad8:	2805      	cmp	r0, #5
 8001ada:	d005      	beq.n	8001ae8 <FLASH_EnableWriteProtection+0x98>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8001adc:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8001ae0:	4a02      	ldr	r2, [pc, #8]	; (8001aec <FLASH_EnableWriteProtection+0x9c>)
 8001ae2:	6911      	ldr	r1, [r2, #16]
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	45670123 	.word	0x45670123
 8001af4:	1ffff800 	.word	0x1ffff800

08001af8 <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8001af8:	b570      	push	{r4, r5, r6, lr}
 8001afa:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001afc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8001b00:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b02:	f7ff ff01 	bl	8001908 <FLASH_WaitForLastBank1Operation>

  if(status == FLASH_COMPLETE)
 8001b06:	2804      	cmp	r0, #4
 8001b08:	d116      	bne.n	8001b38 <FLASH_ProgramOptionByteData+0x40>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001b0a:	4c0c      	ldr	r4, [pc, #48]	; (8001b3c <FLASH_ProgramOptionByteData+0x44>)
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <FLASH_ProgramOptionByteData+0x48>)
    FLASH->OPTKEYR = FLASH_KEY2;
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(__IO uint16_t*)Address = Data;
 8001b0e:	b2ad      	uxth	r5, r5
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001b10:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001b12:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001b16:	60a3      	str	r3, [r4, #8]
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001b18:	6923      	ldr	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8001b24:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b26:	f7ff feef 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    if(status != FLASH_TIMEOUT)
 8001b2a:	2805      	cmp	r0, #5
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8001b2c:	bf1f      	itttt	ne
 8001b2e:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001b32:	6922      	ldrne	r2, [r4, #16]
 8001b34:	4013      	andne	r3, r2
 8001b36:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
}
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	45670123 	.word	0x45670123

08001b44 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001b4c:	460e      	mov	r6, r1
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b4e:	f7ff fedb 	bl	8001908 <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001b52:	2804      	cmp	r0, #4
 8001b54:	d10e      	bne.n	8001b74 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8001b56:	4c08      	ldr	r4, [pc, #32]	; (8001b78 <FLASH_ProgramHalfWord+0x34>)
  
    *(__IO uint16_t*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8001b5c:	6923      	ldr	r3, [r4, #16]
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = Data;
 8001b64:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b66:	f7ff fecf 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8001b6a:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001b6e:	6922      	ldr	r2, [r4, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	6123      	str	r3, [r4, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
}
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000

08001b7c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 8001b7e:	2300      	movs	r3, #0
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001b80:	4606      	mov	r6, r0
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b82:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001b86:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 8001b88:	9301      	str	r3, [sp, #4]
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b8a:	f7ff febd 	bl	8001908 <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001b8e:	2804      	cmp	r0, #4
 8001b90:	d11a      	bne.n	8001bc8 <FLASH_ProgramWord+0x4c>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8001b92:	4c0e      	ldr	r4, [pc, #56]	; (8001bcc <FLASH_ProgramWord+0x50>)
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8001b98:	6923      	ldr	r3, [r4, #16]
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8001ba0:	b2ab      	uxth	r3, r5
 8001ba2:	8033      	strh	r3, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001ba4:	f7ff feb0 	bl	8001908 <FLASH_WaitForLastBank1Operation>
 
    if(status == FLASH_COMPLETE)
 8001ba8:	2804      	cmp	r0, #4
 8001baa:	d108      	bne.n	8001bbe <FLASH_ProgramWord+0x42>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 8001bac:	3602      	adds	r6, #2
 8001bae:	9601      	str	r6, [sp, #4]

      *(__IO uint16_t*) tmp = Data >> 16;
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	0c2d      	lsrs	r5, r5, #16
 8001bb4:	801d      	strh	r5, [r3, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001bb6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bba:	f7ff fea5 	bl	8001908 <FLASH_WaitForLastBank1Operation>
      FLASH->CR &= CR_PG_Reset;
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8001bbe:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001bc2:	6922      	ldr	r2, [r4, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	6123      	str	r3, [r4, #16]
  }         
#endif /* STM32F10X_XL */
   
  /* Return the Program Status */
  return status;
}
 8001bc8:	b002      	add	sp, #8
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
 8001bcc:	40022000 	.word	0x40022000

08001bd0 <FLASH_EraseOptionBytes>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8001bd0:	b538      	push	{r3, r4, r5, lr}
  uint16_t rdptmp = RDP_Key;

  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
 8001bd2:	f7ff fe3f 	bl	8001854 <FLASH_GetReadOutProtectionStatus>
  {
    rdptmp = 0x00;  
 8001bd6:	2800      	cmp	r0, #0
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001bd8:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
  {
    rdptmp = 0x00;  
 8001bdc:	bf0c      	ite	eq
 8001bde:	25a5      	moveq	r5, #165	; 0xa5
 8001be0:	2500      	movne	r5, #0
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001be2:	f7ff fe91 	bl	8001908 <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8001be6:	2804      	cmp	r0, #4
 8001be8:	d129      	bne.n	8001c3e <FLASH_EraseOptionBytes+0x6e>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001bea:	4c15      	ldr	r4, [pc, #84]	; (8001c40 <FLASH_EraseOptionBytes+0x70>)
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <FLASH_EraseOptionBytes+0x74>)
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001bee:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001bf2:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001bf4:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001bf8:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8001bfa:	6923      	ldr	r3, [r4, #16]
 8001bfc:	f043 0320 	orr.w	r3, r3, #32
 8001c00:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8001c02:	6923      	ldr	r3, [r4, #16]
 8001c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c08:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c0a:	f7ff fe7d 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    
    if(status == FLASH_COMPLETE)
 8001c0e:	2804      	cmp	r0, #4
 8001c10:	d10e      	bne.n	8001c30 <FLASH_EraseOptionBytes+0x60>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8001c12:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8001c16:	6922      	ldr	r2, [r4, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    status = FLASH_WaitForLastOperation(EraseTimeout);
    
    if(status == FLASH_COMPLETE)
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8001c20:	6923      	ldr	r3, [r4, #16]
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6123      	str	r3, [r4, #16]
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <FLASH_EraseOptionBytes+0x78>)
 8001c2a:	801d      	strh	r5, [r3, #0]
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c2c:	f7ff fe6c 	bl	8001908 <FLASH_WaitForLastBank1Operation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
 8001c30:	2805      	cmp	r0, #5
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8001c32:	bf1f      	itttt	ne
 8001c34:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001c38:	6922      	ldrne	r2, [r4, #16]
 8001c3a:	4013      	andne	r3, r2
 8001c3c:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8001c3e:	bd38      	pop	{r3, r4, r5, pc}
 8001c40:	40022000 	.word	0x40022000
 8001c44:	45670123 	.word	0x45670123
 8001c48:	1ffff800 	.word	0x1ffff800

08001c4c <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001c4c:	b538      	push	{r3, r4, r5, lr}
 8001c4e:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c50:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001c54:	f7ff fe58 	bl	8001908 <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001c58:	2804      	cmp	r0, #4
 8001c5a:	d112      	bne.n	8001c82 <FLASH_ErasePage+0x36>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001c5c:	4c09      	ldr	r4, [pc, #36]	; (8001c84 <FLASH_ErasePage+0x38>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c5e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001c62:	6923      	ldr	r3, [r4, #16]
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8001c6a:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8001c6c:	6923      	ldr	r3, [r4, #16]
 8001c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c72:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c74:	f7ff fe48 	bl	8001908 <FLASH_WaitForLastBank1Operation>
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8001c78:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8001c7c:	6922      	ldr	r2, [r4, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	6123      	str	r3, [r4, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
}
 8001c82:	bd38      	pop	{r3, r4, r5, pc}
 8001c84:	40022000 	.word	0x40022000

08001c88 <FLASH_WaitForLastOperation>:
 8001c88:	f7ff be3e 	b.w	8001908 <FLASH_WaitForLastBank1Operation>

08001c8c <FSMC_NORSRAMDeInit>:
  *     @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *     @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8001c8c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8001c90:	b918      	cbnz	r0, 8001c9a <FSMC_NORSRAMDeInit+0xe>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8001c92:	f243 02db 	movw	r2, #12507	; 0x30db
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e003      	b.n	8001ca2 <FSMC_NORSRAMDeInit+0x16>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8001c9a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c9e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8001ca2:	0080      	lsls	r0, r0, #2
 8001ca4:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8001ca8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001cac:	6043      	str	r3, [r0, #4]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8001cae:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8001cb2:	4770      	bx	lr

08001cb4 <FSMC_NANDDeInit>:
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8001cb4:	2810      	cmp	r0, #16
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8001cb6:	bf0c      	ite	eq
 8001cb8:	4b05      	ldreq	r3, [pc, #20]	; (8001cd0 <FSMC_NANDDeInit+0x1c>)
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8001cba:	4b06      	ldrne	r3, [pc, #24]	; (8001cd4 <FSMC_NANDDeInit+0x20>)
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2118      	movs	r1, #24
 8001cc0:	6019      	str	r1, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8001cc2:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8001cc4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001cc8:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	a0000060 	.word	0xa0000060
 8001cd4:	a0000080 	.word	0xa0000080

08001cd8 <FSMC_PCCARDDeInit>:
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <FSMC_PCCARDDeInit+0x18>)
 8001cda:	2218      	movs	r2, #24
 8001cdc:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8001ce2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001ce6:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8001ce8:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	a00000a0 	.word	0xa00000a0

08001cf4 <FSMC_NORSRAMInit>:
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8001cf4:	6881      	ldr	r1, [r0, #8]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001cf6:	6843      	ldr	r3, [r0, #4]
  *         structure that contains the configuration information for 
  *        the FSMC NOR/SRAM specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8001cf8:	b530      	push	{r4, r5, lr}
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001cfa:	ea41 0203 	orr.w	r2, r1, r3
 8001cfe:	68c3      	ldr	r3, [r0, #12]
 8001d00:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d02:	431a      	orrs	r2, r3
 8001d04:	6903      	ldr	r3, [r0, #16]
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;

  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8001d06:	2908      	cmp	r1, #8
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001d08:	ea42 0203 	orr.w	r2, r2, r3
 8001d0c:	6943      	ldr	r3, [r0, #20]
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
  }
  
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8001d0e:	6b41      	ldr	r1, [r0, #52]	; 0x34
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001d10:	ea42 0203 	orr.w	r2, r2, r3
 8001d14:	6983      	ldr	r3, [r0, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001d16:	680d      	ldr	r5, [r1, #0]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001d18:	ea42 0203 	orr.w	r2, r2, r3
 8001d1c:	69c3      	ldr	r3, [r0, #28]
 8001d1e:	ea42 0203 	orr.w	r2, r2, r3
 8001d22:	6a03      	ldr	r3, [r0, #32]
 8001d24:	ea42 0203 	orr.w	r2, r2, r3
 8001d28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d2a:	ea42 0203 	orr.w	r2, r2, r3
 8001d2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d30:	ea43 0302 	orr.w	r3, r3, r2
 8001d34:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001d36:	ea43 0304 	orr.w	r3, r3, r4
 8001d3a:	ea43 0302 	orr.w	r3, r3, r2
 8001d3e:	6802      	ldr	r2, [r0, #0]
 8001d40:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8001d44:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8001d48:	6013      	str	r3, [r2, #0]
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;

  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
 8001d4a:	bf02      	ittt	eq
 8001d4c:	6813      	ldreq	r3, [r2, #0]
 8001d4e:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8001d52:	6013      	streq	r3, [r2, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001d54:	698b      	ldr	r3, [r1, #24]
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8001d56:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001d5a:	ea43 0305 	orr.w	r3, r3, r5
 8001d5e:	684d      	ldr	r5, [r1, #4]
 8001d60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001d64:	688d      	ldr	r5, [r1, #8]
 8001d66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001d6a:	68cd      	ldr	r5, [r1, #12]
 8001d6c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001d70:	690d      	ldr	r5, [r1, #16]
 8001d72:	6949      	ldr	r1, [r1, #20]
 8001d74:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8001d78:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
  }
  
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8001d7c:	6053      	str	r3, [r2, #4]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8001d7e:	d110      	bne.n	8001da2 <FSMC_NORSRAMInit+0xae>
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8001d80:	6b81      	ldr	r1, [r0, #56]	; 0x38
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8001d82:	6808      	ldr	r0, [r1, #0]
 8001d84:	698b      	ldr	r3, [r1, #24]
 8001d86:	4303      	orrs	r3, r0
 8001d88:	6848      	ldr	r0, [r1, #4]
 8001d8a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001d8e:	6888      	ldr	r0, [r1, #8]
 8001d90:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001d94:	6908      	ldr	r0, [r1, #16]
 8001d96:	6949      	ldr	r1, [r1, #20]
 8001d98:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8001d9c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001da0:	e001      	b.n	8001da6 <FSMC_NORSRAMInit+0xb2>
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8001da2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001da6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8001daa:	bd30      	pop	{r4, r5, pc}

08001dac <FSMC_NANDInit>:
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001dac:	6842      	ldr	r2, [r0, #4]
 8001dae:	6883      	ldr	r3, [r0, #8]
  *         structure that contains the configuration information for the FSMC 
  *         NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8001db0:	b530      	push	{r4, r5, lr}
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001db2:	4313      	orrs	r3, r2
 8001db4:	68c2      	ldr	r2, [r0, #12]
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	6903      	ldr	r3, [r0, #16]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001dbe:	69c4      	ldr	r4, [r0, #28]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	6942      	ldr	r2, [r0, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001dc4:	6861      	ldr	r1, [r4, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001dc6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001dca:	6982      	ldr	r2, [r0, #24]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001dcc:	6a05      	ldr	r5, [r0, #32]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001dce:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001dd2:	68a2      	ldr	r2, [r4, #8]
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8001dd4:	6800      	ldr	r0, [r0, #0]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001dd6:	0412      	lsls	r2, r2, #16
 8001dd8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ddc:	6821      	ldr	r1, [r4, #0]
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8001dde:	2810      	cmp	r0, #16
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001de0:	ea42 0201 	orr.w	r2, r2, r1
 8001de4:	68e1      	ldr	r1, [r4, #12]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001de6:	68ac      	ldr	r4, [r5, #8]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001de8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001dec:	686a      	ldr	r2, [r5, #4]
 8001dee:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8001df2:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001df6:	682a      	ldr	r2, [r5, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8001df8:	bf08      	it	eq
 8001dfa:	4806      	ldreq	r0, [pc, #24]	; (8001e14 <FSMC_NANDInit+0x68>)
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001dfc:	ea42 0204 	orr.w	r2, r2, r4
 8001e00:	68ec      	ldr	r4, [r5, #12]
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8001e02:	bf18      	it	ne
 8001e04:	4804      	ldrne	r0, [pc, #16]	; (8001e18 <FSMC_NANDInit+0x6c>)
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e06:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8001e0a:	6003      	str	r3, [r0, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8001e0c:	6081      	str	r1, [r0, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8001e0e:	60c2      	str	r2, [r0, #12]
 8001e10:	bd30      	pop	{r4, r5, pc}
 8001e12:	bf00      	nop
 8001e14:	a0000060 	.word	0xa0000060
 8001e18:	a0000080 	.word	0xa0000080

08001e1c <FSMC_PCCARDInit>:
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8001e1c:	6803      	ldr	r3, [r0, #0]
 8001e1e:	6842      	ldr	r2, [r0, #4]
 8001e20:	f043 0310 	orr.w	r3, r3, #16
 8001e24:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001e28:	6882      	ldr	r2, [r0, #8]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8001e2a:	4915      	ldr	r1, [pc, #84]	; (8001e80 <FSMC_PCCARDInit+0x64>)
  *         structure that contains the configuration information for the FSMC 
  *         PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8001e2c:	b510      	push	{r4, lr}
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8001e2e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e32:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8001e34:	600b      	str	r3, [r1, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e36:	68a2      	ldr	r2, [r4, #8]
 8001e38:	6863      	ldr	r3, [r4, #4]
 8001e3a:	0412      	lsls	r2, r2, #16
 8001e3c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	68e2      	ldr	r2, [r4, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e46:	6904      	ldr	r4, [r0, #16]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e48:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e4c:	608b      	str	r3, [r1, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e4e:	68a2      	ldr	r2, [r4, #8]
 8001e50:	6863      	ldr	r3, [r4, #4]
 8001e52:	0412      	lsls	r2, r2, #16
 8001e54:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e58:	6823      	ldr	r3, [r4, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8001e5a:	6940      	ldr	r0, [r0, #20]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	68e2      	ldr	r2, [r4, #12]
 8001e60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e64:	60cb      	str	r3, [r1, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e66:	6882      	ldr	r2, [r0, #8]
 8001e68:	6843      	ldr	r3, [r0, #4]
 8001e6a:	0412      	lsls	r2, r2, #16
 8001e6c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e70:	6803      	ldr	r3, [r0, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	68c2      	ldr	r2, [r0, #12]
 8001e76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8001e7a:	610b      	str	r3, [r1, #16]
 8001e7c:	bd10      	pop	{r4, pc}
 8001e7e:	bf00      	nop
 8001e80:	a00000a0 	.word	0xa00000a0

08001e84 <FSMC_NORSRAMStructInit>:
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8001e84:	2202      	movs	r2, #2
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8001e86:	b510      	push	{r4, lr}
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8001e88:	6042      	str	r2, [r0, #4]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8001e8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8e:	6242      	str	r2, [r0, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001e90:	6b41      	ldr	r1, [r0, #52]	; 0x34
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	6282      	str	r2, [r0, #40]	; 0x28
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8001e98:	2300      	movs	r3, #0
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001e9a:	220f      	movs	r2, #15
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001e9c:	24ff      	movs	r4, #255	; 0xff
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8001e9e:	6003      	str	r3, [r0, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8001ea0:	6083      	str	r3, [r0, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8001ea2:	60c3      	str	r3, [r0, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8001ea4:	6103      	str	r3, [r0, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8001ea6:	6143      	str	r3, [r0, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8001ea8:	6183      	str	r3, [r0, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8001eaa:	61c3      	str	r3, [r0, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8001eac:	6203      	str	r3, [r0, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8001eae:	62c3      	str	r3, [r0, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8001eb0:	6303      	str	r3, [r0, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001eb2:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8001eb4:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001eb6:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8001eb8:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8001eba:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8001ebc:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8001ebe:	618b      	str	r3, [r1, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001ec0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001ec2:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8001ec4:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001ec6:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8001ec8:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8001eca:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8001ecc:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8001ece:	618b      	str	r3, [r1, #24]
 8001ed0:	bd10      	pop	{r4, pc}

08001ed2 <FSMC_NANDStructInit>:
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8001ed2:	2310      	movs	r3, #16
 8001ed4:	6003      	str	r3, [r0, #0]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001ed6:	69c2      	ldr	r2, [r0, #28]
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6043      	str	r3, [r0, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8001edc:	6083      	str	r3, [r0, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8001ede:	60c3      	str	r3, [r0, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8001ee0:	6103      	str	r3, [r0, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8001ee2:	6143      	str	r3, [r0, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8001ee4:	6183      	str	r3, [r0, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001ee6:	23fc      	movs	r3, #252	; 0xfc
 8001ee8:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001eea:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001eec:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001eee:	60d3      	str	r3, [r2, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001ef0:	6a02      	ldr	r2, [r0, #32]
 8001ef2:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001ef4:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001ef6:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8001ef8:	60d3      	str	r3, [r2, #12]
 8001efa:	4770      	bx	lr

08001efc <FSMC_PCCARDStructInit>:
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001efc:	68c2      	ldr	r2, [r0, #12]
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8001efe:	2300      	movs	r3, #0
 8001f00:	6003      	str	r3, [r0, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8001f02:	6043      	str	r3, [r0, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8001f04:	6083      	str	r3, [r0, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f06:	23fc      	movs	r3, #252	; 0xfc
 8001f08:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001f0a:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001f0c:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001f0e:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f10:	6902      	ldr	r2, [r0, #16]
 8001f12:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001f14:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001f16:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8001f18:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001f1a:	6942      	ldr	r2, [r0, #20]
 8001f1c:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001f1e:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001f20:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001f22:	60d3      	str	r3, [r2, #12]
 8001f24:	4770      	bx	lr

08001f26 <FSMC_NORSRAMCmd>:
  *     @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8001f26:	0080      	lsls	r0, r0, #2
 8001f28:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f2c:	b119      	cbz	r1, 8001f36 <FSMC_NORSRAMCmd+0x10>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
 8001f2e:	6803      	ldr	r3, [r0, #0]
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	e002      	b.n	8001f3c <FSMC_NORSRAMCmd+0x16>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
 8001f36:	6802      	ldr	r2, [r0, #0]
 8001f38:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <FSMC_NORSRAMCmd+0x1a>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	6003      	str	r3, [r0, #0]
 8001f3e:	4770      	bx	lr
 8001f40:	000ffffe 	.word	0x000ffffe

08001f44 <FSMC_NANDCmd>:
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f44:	b139      	cbz	r1, 8001f56 <FSMC_NANDCmd+0x12>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001f46:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
 8001f48:	bf0c      	ite	eq
 8001f4a:	4a07      	ldreq	r2, [pc, #28]	; (8001f68 <FSMC_NANDCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
 8001f4c:	4a07      	ldrne	r2, [pc, #28]	; (8001f6c <FSMC_NANDCmd+0x28>)
 8001f4e:	6813      	ldr	r3, [r2, #0]
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	e006      	b.n	8001f64 <FSMC_NANDCmd+0x20>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001f56:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
 8001f58:	bf0c      	ite	eq
 8001f5a:	4a03      	ldreq	r2, [pc, #12]	; (8001f68 <FSMC_NANDCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
 8001f5c:	4a03      	ldrne	r2, [pc, #12]	; (8001f6c <FSMC_NANDCmd+0x28>)
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <FSMC_NANDCmd+0x2c>)
 8001f60:	6811      	ldr	r1, [r2, #0]
 8001f62:	400b      	ands	r3, r1
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4770      	bx	lr
 8001f68:	a0000060 	.word	0xa0000060
 8001f6c:	a0000080 	.word	0xa0000080
 8001f70:	000ffffb 	.word	0x000ffffb

08001f74 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <FSMC_PCCARDCmd+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f76:	b118      	cbz	r0, 8001f80 <FSMC_PCCARDCmd+0xc>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f042 0204 	orr.w	r2, r2, #4
 8001f7e:	e002      	b.n	8001f86 <FSMC_PCCARDCmd+0x12>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
 8001f80:	6819      	ldr	r1, [r3, #0]
 8001f82:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <FSMC_PCCARDCmd+0x1c>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	a00000a0 	.word	0xa00000a0
 8001f90:	000ffffb 	.word	0x000ffffb

08001f94 <FSMC_NANDECCCmd>:
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f94:	b139      	cbz	r1, 8001fa6 <FSMC_NANDECCCmd+0x12>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001f96:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
 8001f98:	bf0c      	ite	eq
 8001f9a:	4a07      	ldreq	r2, [pc, #28]	; (8001fb8 <FSMC_NANDECCCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
 8001f9c:	4a07      	ldrne	r2, [pc, #28]	; (8001fbc <FSMC_NANDECCCmd+0x28>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa4:	e006      	b.n	8001fb4 <FSMC_NANDECCCmd+0x20>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001fa6:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
 8001fa8:	bf0c      	ite	eq
 8001faa:	4a03      	ldreq	r2, [pc, #12]	; (8001fb8 <FSMC_NANDECCCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
 8001fac:	4a03      	ldrne	r2, [pc, #12]	; (8001fbc <FSMC_NANDECCCmd+0x28>)
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <FSMC_NANDECCCmd+0x2c>)
 8001fb0:	6811      	ldr	r1, [r2, #0]
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4770      	bx	lr
 8001fb8:	a0000060 	.word	0xa0000060
 8001fbc:	a0000080 	.word	0xa0000080
 8001fc0:	000fffbf 	.word	0x000fffbf

08001fc4 <FSMC_GetECC>:
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8001fc4:	2810      	cmp	r0, #16
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8001fc6:	bf0c      	ite	eq
 8001fc8:	4b01      	ldreq	r3, [pc, #4]	; (8001fd0 <FSMC_GetECC+0xc>)
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8001fca:	4b02      	ldrne	r3, [pc, #8]	; (8001fd4 <FSMC_GetECC+0x10>)
 8001fcc:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 8001fce:	4770      	bx	lr
 8001fd0:	a0000060 	.word	0xa0000060
 8001fd4:	a0000080 	.word	0xa0000080

08001fd8 <FSMC_ITConfig>:
{
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fd8:	b17a      	cbz	r2, 8001ffa <FSMC_ITConfig+0x22>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001fda:	2810      	cmp	r0, #16
 8001fdc:	d101      	bne.n	8001fe2 <FSMC_ITConfig+0xa>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <FSMC_ITConfig+0x40>)
 8001fe0:	e008      	b.n	8001ff4 <FSMC_ITConfig+0x1c>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8001fe2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001fe6:	d104      	bne.n	8001ff2 <FSMC_ITConfig+0x1a>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <FSMC_ITConfig+0x44>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4311      	orrs	r1, r2
 8001fee:	6059      	str	r1, [r3, #4]
 8001ff0:	4770      	bx	lr
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <FSMC_ITConfig+0x48>)
 8001ff4:	6853      	ldr	r3, [r2, #4]
 8001ff6:	4319      	orrs	r1, r3
 8001ff8:	e00c      	b.n	8002014 <FSMC_ITConfig+0x3c>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001ffa:	2810      	cmp	r0, #16
 8001ffc:	ea6f 0101 	mvn.w	r1, r1
 8002000:	d101      	bne.n	8002006 <FSMC_ITConfig+0x2e>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <FSMC_ITConfig+0x40>)
 8002004:	e004      	b.n	8002010 <FSMC_ITConfig+0x38>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8002006:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 800200a:	bf0c      	ite	eq
 800200c:	4a03      	ldreq	r2, [pc, #12]	; (800201c <FSMC_ITConfig+0x44>)
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 800200e:	4a04      	ldrne	r2, [pc, #16]	; (8002020 <FSMC_ITConfig+0x48>)
 8002010:	6853      	ldr	r3, [r2, #4]
 8002012:	4019      	ands	r1, r3
 8002014:	6051      	str	r1, [r2, #4]
 8002016:	4770      	bx	lr
 8002018:	a0000060 	.word	0xa0000060
 800201c:	a0000080 	.word	0xa0000080
 8002020:	a00000a0 	.word	0xa00000a0

08002024 <FSMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002024:	2810      	cmp	r0, #16
 8002026:	d101      	bne.n	800202c <FSMC_GetFlagStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <FSMC_GetFlagStatus+0x20>)
 800202a:	e004      	b.n	8002036 <FSMC_GetFlagStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800202c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 8002030:	bf0c      	ite	eq
 8002032:	4b05      	ldreq	r3, [pc, #20]	; (8002048 <FSMC_GetFlagStatus+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002034:	4b05      	ldrne	r3, [pc, #20]	; (800204c <FSMC_GetFlagStatus+0x28>)
 8002036:	685b      	ldr	r3, [r3, #4]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8002038:	420b      	tst	r3, r1
}
 800203a:	bf14      	ite	ne
 800203c:	2001      	movne	r0, #1
 800203e:	2000      	moveq	r0, #0
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	a0000060 	.word	0xa0000060
 8002048:	a0000080 	.word	0xa0000080
 800204c:	a00000a0 	.word	0xa00000a0

08002050 <FSMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002050:	2810      	cmp	r0, #16
 8002052:	ea6f 0101 	mvn.w	r1, r1
 8002056:	d101      	bne.n	800205c <FSMC_ClearFlag+0xc>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 8002058:	4a05      	ldr	r2, [pc, #20]	; (8002070 <FSMC_ClearFlag+0x20>)
 800205a:	e004      	b.n	8002066 <FSMC_ClearFlag+0x16>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800205c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8002060:	bf0c      	ite	eq
 8002062:	4a04      	ldreq	r2, [pc, #16]	; (8002074 <FSMC_ClearFlag+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8002064:	4a04      	ldrne	r2, [pc, #16]	; (8002078 <FSMC_ClearFlag+0x28>)
 8002066:	6853      	ldr	r3, [r2, #4]
 8002068:	4019      	ands	r1, r3
 800206a:	6051      	str	r1, [r2, #4]
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	a0000060 	.word	0xa0000060
 8002074:	a0000080 	.word	0xa0000080
 8002078:	a00000a0 	.word	0xa00000a0

0800207c <FSMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800207c:	2810      	cmp	r0, #16
 800207e:	d101      	bne.n	8002084 <FSMC_GetITStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <FSMC_GetITStatus+0x28>)
 8002082:	e004      	b.n	800208e <FSMC_GetITStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002084:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 8002088:	bf0c      	ite	eq
 800208a:	4b07      	ldreq	r3, [pc, #28]	; (80020a8 <FSMC_GetITStatus+0x2c>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 800208c:	4b07      	ldrne	r3, [pc, #28]	; (80020ac <FSMC_GetITStatus+0x30>)
 800208e:	685b      	ldr	r3, [r3, #4]
  } 
  
  itstatus = tmpsr & FSMC_IT;
  
  itenable = tmpsr & (FSMC_IT >> 3);
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8002090:	ea13 0001 	ands.w	r0, r3, r1
 8002094:	d004      	beq.n	80020a0 <FSMC_GetITStatus+0x24>
  {
    bitstatus = SET;
 8002096:	ea13 03d1 	ands.w	r3, r3, r1, lsr #3
 800209a:	bf14      	ite	ne
 800209c:	2001      	movne	r0, #1
 800209e:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	a0000060 	.word	0xa0000060
 80020a8:	a0000080 	.word	0xa0000080
 80020ac:	a00000a0 	.word	0xa00000a0

080020b0 <FSMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80020b0:	2810      	cmp	r0, #16
 80020b2:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 80020b6:	d101      	bne.n	80020bc <FSMC_ClearITPendingBit+0xc>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <FSMC_ClearITPendingBit+0x20>)
 80020ba:	e004      	b.n	80020c6 <FSMC_ClearITPendingBit+0x16>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80020bc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 80020c0:	bf0c      	ite	eq
 80020c2:	4a04      	ldreq	r2, [pc, #16]	; (80020d4 <FSMC_ClearITPendingBit+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 80020c4:	4a04      	ldrne	r2, [pc, #16]	; (80020d8 <FSMC_ClearITPendingBit+0x28>)
 80020c6:	6853      	ldr	r3, [r2, #4]
 80020c8:	ea23 0101 	bic.w	r1, r3, r1
 80020cc:	6051      	str	r1, [r2, #4]
 80020ce:	4770      	bx	lr
 80020d0:	a0000060 	.word	0xa0000060
 80020d4:	a0000080 	.word	0xa0000080
 80020d8:	a00000a0 	.word	0xa00000a0

080020dc <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80020dc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 80020de:	4b26      	ldr	r3, [pc, #152]	; (8002178 <GPIO_DeInit+0x9c>)
 80020e0:	4298      	cmp	r0, r3
 80020e2:	d106      	bne.n	80020f2 <GPIO_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80020e4:	2101      	movs	r1, #1
 80020e6:	2004      	movs	r0, #4
 80020e8:	f000 fcd6 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80020ec:	2100      	movs	r1, #0
 80020ee:	2004      	movs	r0, #4
 80020f0:	e03c      	b.n	800216c <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOB)
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <GPIO_DeInit+0xa0>)
 80020f4:	4298      	cmp	r0, r3
 80020f6:	d106      	bne.n	8002106 <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80020f8:	2101      	movs	r1, #1
 80020fa:	2008      	movs	r0, #8
 80020fc:	f000 fccc 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 8002100:	2100      	movs	r1, #0
 8002102:	2008      	movs	r0, #8
 8002104:	e032      	b.n	800216c <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOC)
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <GPIO_DeInit+0xa4>)
 8002108:	4298      	cmp	r0, r3
 800210a:	d106      	bne.n	800211a <GPIO_DeInit+0x3e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800210c:	2101      	movs	r1, #1
 800210e:	2010      	movs	r0, #16
 8002110:	f000 fcc2 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 8002114:	2100      	movs	r1, #0
 8002116:	2010      	movs	r0, #16
 8002118:	e028      	b.n	800216c <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOD)
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <GPIO_DeInit+0xa8>)
 800211c:	4298      	cmp	r0, r3
 800211e:	d106      	bne.n	800212e <GPIO_DeInit+0x52>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8002120:	2101      	movs	r1, #1
 8002122:	2020      	movs	r0, #32
 8002124:	f000 fcb8 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 8002128:	2100      	movs	r1, #0
 800212a:	2020      	movs	r0, #32
 800212c:	e01e      	b.n	800216c <GPIO_DeInit+0x90>
  }    
  else if (GPIOx == GPIOE)
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <GPIO_DeInit+0xac>)
 8002130:	4298      	cmp	r0, r3
 8002132:	d106      	bne.n	8002142 <GPIO_DeInit+0x66>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8002134:	2101      	movs	r1, #1
 8002136:	2040      	movs	r0, #64	; 0x40
 8002138:	f000 fcae 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 800213c:	2100      	movs	r1, #0
 800213e:	2040      	movs	r0, #64	; 0x40
 8002140:	e014      	b.n	800216c <GPIO_DeInit+0x90>
  } 
  else if (GPIOx == GPIOF)
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <GPIO_DeInit+0xb0>)
 8002144:	4298      	cmp	r0, r3
 8002146:	d106      	bne.n	8002156 <GPIO_DeInit+0x7a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8002148:	2101      	movs	r1, #1
 800214a:	2080      	movs	r0, #128	; 0x80
 800214c:	f000 fca4 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8002150:	2100      	movs	r1, #0
 8002152:	2080      	movs	r0, #128	; 0x80
 8002154:	e00a      	b.n	800216c <GPIO_DeInit+0x90>
  }
  else
  {
    if (GPIOx == GPIOG)
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <GPIO_DeInit+0xb4>)
 8002158:	4298      	cmp	r0, r3
 800215a:	d10b      	bne.n	8002174 <GPIO_DeInit+0x98>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 800215c:	2101      	movs	r1, #1
 800215e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002162:	f000 fc99 	bl	8002a98 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8002166:	2100      	movs	r1, #0
 8002168:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 800216c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOG)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8002170:	f000 bc92 	b.w	8002a98 <RCC_APB2PeriphResetCmd>
 8002174:	bd08      	pop	{r3, pc}
 8002176:	bf00      	nop
 8002178:	40010800 	.word	0x40010800
 800217c:	40010c00 	.word	0x40010c00
 8002180:	40011000 	.word	0x40011000
 8002184:	40011400 	.word	0x40011400
 8002188:	40011800 	.word	0x40011800
 800218c:	40011c00 	.word	0x40011c00
 8002190:	40012000 	.word	0x40012000

08002194 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8002194:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 8002196:	2101      	movs	r1, #1
 8002198:	4608      	mov	r0, r1
 800219a:	f000 fc7d 	bl	8002a98 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 800219e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 80021a2:	2100      	movs	r1, #0
 80021a4:	2001      	movs	r0, #1
 80021a6:	f000 bc77 	b.w	8002a98 <RCC_APB2PeriphResetCmd>

080021aa <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80021aa:	78ca      	ldrb	r2, [r1, #3]
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80021ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80021b0:	06d4      	lsls	r4, r2, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80021b2:	bf48      	it	mi
 80021b4:	788c      	ldrbmi	r4, [r1, #2]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80021b6:	880e      	ldrh	r6, [r1, #0]
 80021b8:	f002 030f 	and.w	r3, r2, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80021bc:	bf48      	it	mi
 80021be:	4323      	orrmi	r3, r4
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80021c0:	f016 0fff 	tst.w	r6, #255	; 0xff
 80021c4:	d01e      	beq.n	8002204 <GPIO_Init+0x5a>
  {
    tmpreg = GPIOx->CRL;
 80021c6:	6801      	ldr	r1, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80021c8:	2400      	movs	r4, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 80021ca:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80021ce:	f04f 0c0f 	mov.w	ip, #15
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
 80021d2:	fa0e f704 	lsl.w	r7, lr, r4
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80021d6:	ea37 0506 	bics.w	r5, r7, r6
 80021da:	d10f      	bne.n	80021fc <GPIO_Init+0x52>
      {
        pos = pinpos << 2;
 80021dc:	00a5      	lsls	r5, r4, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80021de:	fa0c f805 	lsl.w	r8, ip, r5
 80021e2:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80021e6:	fa03 f505 	lsl.w	r5, r3, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80021ea:	2a28      	cmp	r2, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80021ec:	ea41 0105 	orr.w	r1, r1, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80021f0:	d101      	bne.n	80021f6 <GPIO_Init+0x4c>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80021f2:	6147      	str	r7, [r0, #20]
 80021f4:	e002      	b.n	80021fc <GPIO_Init+0x52>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80021f6:	2a48      	cmp	r2, #72	; 0x48
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80021f8:	bf08      	it	eq
 80021fa:	6107      	streq	r7, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80021fc:	3401      	adds	r4, #1
 80021fe:	2c08      	cmp	r4, #8
 8002200:	d1e7      	bne.n	80021d2 <GPIO_Init+0x28>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8002202:	6001      	str	r1, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8002204:	2eff      	cmp	r6, #255	; 0xff
 8002206:	d920      	bls.n	800224a <GPIO_Init+0xa0>
  {
    tmpreg = GPIOx->CRH;
 8002208:	6841      	ldr	r1, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800220a:	2400      	movs	r4, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800220c:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8002210:	f04f 0c0f 	mov.w	ip, #15
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8002214:	f104 0508 	add.w	r5, r4, #8
 8002218:	fa0e f505 	lsl.w	r5, lr, r5
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800221c:	ea35 0706 	bics.w	r7, r5, r6
 8002220:	d10f      	bne.n	8002242 <GPIO_Init+0x98>
      {
        pos = pinpos << 2;
 8002222:	00a7      	lsls	r7, r4, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8002224:	fa0c f807 	lsl.w	r8, ip, r7
 8002228:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800222c:	fa03 f707 	lsl.w	r7, r3, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002230:	2a28      	cmp	r2, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002232:	ea41 0107 	orr.w	r1, r1, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002236:	d101      	bne.n	800223c <GPIO_Init+0x92>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002238:	6145      	str	r5, [r0, #20]
 800223a:	e002      	b.n	8002242 <GPIO_Init+0x98>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800223c:	2a48      	cmp	r2, #72	; 0x48
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800223e:	bf08      	it	eq
 8002240:	6105      	streq	r5, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002242:	3401      	adds	r4, #1
 8002244:	2c08      	cmp	r4, #8
 8002246:	d1e5      	bne.n	8002214 <GPIO_Init+0x6a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8002248:	6041      	str	r1, [r0, #4]
 800224a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800224e <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800224e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002252:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002254:	2302      	movs	r3, #2
 8002256:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002258:	2304      	movs	r3, #4
 800225a:	70c3      	strb	r3, [r0, #3]
 800225c:	4770      	bx	lr

0800225e <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800225e:	6883      	ldr	r3, [r0, #8]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8002260:	4219      	tst	r1, r3
}
 8002262:	bf14      	ite	ne
 8002264:	2001      	movne	r0, #1
 8002266:	2000      	moveq	r0, #0
 8002268:	4770      	bx	lr

0800226a <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800226a:	6880      	ldr	r0, [r0, #8]
}
 800226c:	b280      	uxth	r0, r0
 800226e:	4770      	bx	lr

08002270 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002270:	68c3      	ldr	r3, [r0, #12]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8002272:	4219      	tst	r1, r3
}
 8002274:	bf14      	ite	ne
 8002276:	2001      	movne	r0, #1
 8002278:	2000      	moveq	r0, #0
 800227a:	4770      	bx	lr

0800227c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 800227c:	68c0      	ldr	r0, [r0, #12]
}
 800227e:	b280      	uxth	r0, r0
 8002280:	4770      	bx	lr

08002282 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8002282:	6101      	str	r1, [r0, #16]
 8002284:	4770      	bx	lr

08002286 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8002286:	6141      	str	r1, [r0, #20]
 8002288:	4770      	bx	lr

0800228a <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800228a:	b10a      	cbz	r2, 8002290 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228c:	6101      	str	r1, [r0, #16]
 800228e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8002290:	6141      	str	r1, [r0, #20]
 8002292:	4770      	bx	lr

08002294 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8002294:	60c1      	str	r1, [r0, #12]
 8002296:	4770      	bx	lr

08002298 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 8002298:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800229c:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800229e:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80022a0:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80022a2:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80022a4:	6983      	ldr	r3, [r0, #24]
 80022a6:	4770      	bx	lr

080022a8 <GPIO_EventOutputConfig>:
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <GPIO_EventOutputConfig+0x18>)
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	0c1b      	lsrs	r3, r3, #16
 80022b4:	4319      	orrs	r1, r3
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 80022b6:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 80022ba:	6010      	str	r0, [r2, #0]
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000

080022c4 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 80022c4:	4b01      	ldr	r3, [pc, #4]	; (80022cc <GPIO_EventOutputCmd+0x8>)
 80022c6:	6018      	str	r0, [r3, #0]
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	4220001c 	.word	0x4220001c

080022d0 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80022d0:	2800      	cmp	r0, #0
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <GPIO_PinRemapConfig+0x5c>)
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80022d4:	b530      	push	{r4, r5, lr}
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80022d6:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    tmpreg = AFIO->MAPR2;
 80022da:	bfb4      	ite	lt
 80022dc:	69d3      	ldrlt	r3, [r2, #28]
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80022de:	6853      	ldrge	r3, [r2, #4]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80022e0:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 80022e4:	b284      	uxth	r4, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80022e6:	d106      	bne.n	80022f6 <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80022e8:	6855      	ldr	r5, [r2, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80022ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80022ee:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80022f2:	6055      	str	r5, [r2, #4]
 80022f4:	e00e      	b.n	8002314 <GPIO_PinRemapConfig+0x44>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80022f6:	02c2      	lsls	r2, r0, #11
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80022f8:	bf55      	itete	pl
 80022fa:	0d42      	lsrpl	r2, r0, #21
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 80022fc:	2203      	movmi	r2, #3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80022fe:	0112      	lslpl	r2, r2, #4
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 8002300:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8002304:	bf4c      	ite	mi
 8002306:	40aa      	lslmi	r2, r5
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8002308:	fa04 f202 	lslpl.w	r2, r4, r2
 800230c:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8002310:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8002314:	b119      	cbz	r1, 800231e <GPIO_PinRemapConfig+0x4e>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8002316:	0d42      	lsrs	r2, r0, #21
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	4094      	lsls	r4, r2
 800231c:	4323      	orrs	r3, r4
 800231e:	4a03      	ldr	r2, [pc, #12]	; (800232c <GPIO_PinRemapConfig+0x5c>)
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8002320:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 8002322:	bfb4      	ite	lt
 8002324:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8002326:	6053      	strge	r3, [r2, #4]
 8002328:	bd30      	pop	{r4, r5, pc}
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000

08002330 <GPIO_EXTILineConfig>:
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8002330:	f001 0303 	and.w	r3, r1, #3
 8002334:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8002338:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800233c:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8002340:	b510      	push	{r4, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8002342:	009b      	lsls	r3, r3, #2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8002344:	688c      	ldr	r4, [r1, #8]
 8002346:	220f      	movs	r2, #15
 8002348:	409a      	lsls	r2, r3
 800234a:	ea24 0202 	bic.w	r2, r4, r2
 800234e:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8002350:	688a      	ldr	r2, [r1, #8]
 8002352:	4098      	lsls	r0, r3
 8002354:	4310      	orrs	r0, r2
 8002356:	6088      	str	r0, [r1, #8]
 8002358:	bd10      	pop	{r4, pc}

0800235a <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 800235a:	4b01      	ldr	r3, [pc, #4]	; (8002360 <GPIO_ETH_MediaInterfaceConfig+0x6>)
 800235c:	6018      	str	r0, [r3, #0]
 800235e:	4770      	bx	lr
 8002360:	422000dc 	.word	0x422000dc

08002364 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8002364:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <I2C_DeInit+0x30>)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8002368:	2101      	movs	r1, #1
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800236a:	4298      	cmp	r0, r3
 800236c:	d107      	bne.n	800237e <I2C_DeInit+0x1a>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800236e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002372:	f000 fb9d 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8002376:	2100      	movs	r1, #0
 8002378:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800237c:	e006      	b.n	800238c <I2C_DeInit+0x28>
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800237e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002382:	f000 fb95 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8002386:	2100      	movs	r1, #0
 8002388:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 800238c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8002390:	f000 bb8e 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>
 8002394:	40005400 	.word	0x40005400

08002398 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8002398:	b570      	push	{r4, r5, r6, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800239e:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80023a0:	a801      	add	r0, sp, #4
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80023a2:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80023a4:	f000 fb0e 	bl	80029c4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80023a8:	9a03      	ldr	r2, [sp, #12]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80023aa:	482e      	ldr	r0, [pc, #184]	; (8002464 <I2C_Init+0xcc>)

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 80023ac:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80023b0:	fbb2 f0f0 	udiv	r0, r2, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 80023b4:	0436      	lsls	r6, r6, #16
 80023b6:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80023b8:	b281      	uxth	r1, r0
  tmpreg |= freqrange;
 80023ba:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80023bc:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80023be:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80023c0:	4e29      	ldr	r6, [pc, #164]	; (8002468 <I2C_Init+0xd0>)
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80023cc:	682b      	ldr	r3, [r5, #0]
 80023ce:	42b3      	cmp	r3, r6
 80023d0:	d80a      	bhi.n	80023e8 <I2C_Init+0x50>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80023d8:	3101      	adds	r1, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80023da:	b29b      	uxth	r3, r3
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80023dc:	2b03      	cmp	r3, #3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80023de:	b289      	uxth	r1, r1
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80023e0:	bf98      	it	ls
 80023e2:	2304      	movls	r3, #4
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80023e4:	8421      	strh	r1, [r4, #32]
 80023e6:	e023      	b.n	8002430 <I2C_Init+0x98>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80023e8:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 80023ec:	88ee      	ldrh	r6, [r5, #6]
 80023ee:	428e      	cmp	r6, r1
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80023f0:	bf1b      	ittet	ne
 80023f2:	2119      	movne	r1, #25
 80023f4:	434b      	mulne	r3, r1
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80023f6:	eb03 0343 	addeq.w	r3, r3, r3, lsl #1
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80023fa:	fbb2 f3f3 	udivne	r3, r2, r3
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80023fe:	bf0b      	itete	eq
 8002400:	fbb2 f3f3 	udiveq	r3, r2, r3
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8002404:	b29b      	uxthne	r3, r3
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8002406:	b29b      	uxtheq	r3, r3
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8002408:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 800240c:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002410:	b90a      	cbnz	r2, 8002416 <I2C_Init+0x7e>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8002412:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8002416:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800241a:	fb01 f200 	mul.w	r2, r1, r0
 800241e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002422:	fb92 f2f1 	sdiv	r2, r2, r1
 8002426:	3201      	adds	r2, #1
 8002428:	b292      	uxth	r2, r2
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 800242a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800242e:	8422      	strh	r2, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8002430:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8002432:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8002434:	88a9      	ldrh	r1, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8002436:	b29b      	uxth	r3, r3
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800243e:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8002440:	896a      	ldrh	r2, [r5, #10]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002442:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8002446:	f023 0302 	bic.w	r3, r3, #2
 800244a:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800244c:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 800244e:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8002450:	4313      	orrs	r3, r2
 8002452:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8002454:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8002456:	89aa      	ldrh	r2, [r5, #12]
 8002458:	892b      	ldrh	r3, [r5, #8]
 800245a:	4313      	orrs	r3, r2
 800245c:	b29b      	uxth	r3, r3
 800245e:	8123      	strh	r3, [r4, #8]
}
 8002460:	b006      	add	sp, #24
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	000f4240 	.word	0x000f4240
 8002468:	000186a0 	.word	0x000186a0

0800246c <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800246c:	f241 3388 	movw	r3, #5000	; 0x1388
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8002470:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8002474:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8002476:	2300      	movs	r3, #0
 8002478:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800247a:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800247c:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800247e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8002482:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002484:	8183      	strh	r3, [r0, #12]
 8002486:	4770      	bx	lr

08002488 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8002488:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800248a:	b119      	cbz	r1, 8002494 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800248c:	b29b      	uxth	r3, r3
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	e003      	b.n	800249c <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	041b      	lsls	r3, r3, #16
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	8003      	strh	r3, [r0, #0]
 800249e:	4770      	bx	lr

080024a0 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 80024a0:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024a2:	b119      	cbz	r1, 80024ac <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024aa:	e003      	b.n	80024b4 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 80024ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024b0:	041b      	lsls	r3, r3, #16
 80024b2:	0c1b      	lsrs	r3, r3, #16
 80024b4:	8083      	strh	r3, [r0, #4]
 80024b6:	4770      	bx	lr

080024b8 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 80024b8:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024ba:	b119      	cbz	r1, 80024c4 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 80024bc:	b29b      	uxth	r3, r3
 80024be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c2:	e003      	b.n	80024cc <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= CR2_LAST_Reset;
 80024c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	0c1b      	lsrs	r3, r3, #16
 80024cc:	8083      	strh	r3, [r0, #4]
 80024ce:	4770      	bx	lr

080024d0 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80024d0:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024d2:	b119      	cbz	r1, 80024dc <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024da:	e003      	b.n	80024e4 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 80024dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	8003      	strh	r3, [r0, #0]
 80024e6:	4770      	bx	lr

080024e8 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80024e8:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024ea:	b119      	cbz	r1, 80024f4 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f2:	e003      	b.n	80024fc <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 80024f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	0c1b      	lsrs	r3, r3, #16
 80024fc:	8003      	strh	r3, [r0, #0]
 80024fe:	4770      	bx	lr

08002500 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8002500:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002502:	b119      	cbz	r1, 800250c <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8002504:	b29b      	uxth	r3, r3
 8002506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250a:	e003      	b.n	8002514 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 800250c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	8003      	strh	r3, [r0, #0]
 8002516:	4770      	bx	lr

08002518 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8002518:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800251a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800251e:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8002520:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002524:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8002526:	8183      	strh	r3, [r0, #12]
 8002528:	4770      	bx	lr

0800252a <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 800252a:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800252c:	b119      	cbz	r1, 8002536 <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 800252e:	b29b      	uxth	r3, r3
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	e003      	b.n	800253e <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	0c1b      	lsrs	r3, r3, #16
 800253e:	8183      	strh	r3, [r0, #12]
 8002540:	4770      	bx	lr

08002542 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= CR1_ENGC_Set;
 8002542:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002544:	b119      	cbz	r1, 800254e <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= CR1_ENGC_Set;
 8002546:	b29b      	uxth	r3, r3
 8002548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800254c:	e003      	b.n	8002556 <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= CR1_ENGC_Reset;
 800254e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	8003      	strh	r3, [r0, #0]
 8002558:	4770      	bx	lr

0800255a <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800255a:	8883      	ldrh	r3, [r0, #4]
 800255c:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800255e:	b10a      	cbz	r2, 8002564 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8002560:	4319      	orrs	r1, r3
 8002562:	e001      	b.n	8002568 <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8002564:	ea23 0101 	bic.w	r1, r3, r1
 8002568:	8081      	strh	r1, [r0, #4]
 800256a:	4770      	bx	lr

0800256c <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800256c:	8201      	strh	r1, [r0, #16]
 800256e:	4770      	bx	lr

08002570 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8002570:	8a00      	ldrh	r0, [r0, #16]
}
 8002572:	b2c0      	uxtb	r0, r0
 8002574:	4770      	bx	lr

08002576 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8002576:	b112      	cbz	r2, 800257e <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8002578:	f041 0101 	orr.w	r1, r1, #1
 800257c:	e001      	b.n	8002582 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 800257e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8002582:	b289      	uxth	r1, r1
 8002584:	8201      	strh	r1, [r0, #16]
 8002586:	4770      	bx	lr

08002588 <I2C_ReadRegister>:
  *     @arg I2C_Register_CCR:   CCR register.
  *     @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8002588:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800258e:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8002590:	9b01      	ldr	r3, [sp, #4]
 8002592:	4419      	add	r1, r3
 8002594:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8002596:	9b01      	ldr	r3, [sp, #4]
 8002598:	8818      	ldrh	r0, [r3, #0]
}
 800259a:	b280      	uxth	r0, r0
 800259c:	b002      	add	sp, #8
 800259e:	4770      	bx	lr

080025a0 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= CR1_SWRST_Set;
 80025a0:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025a2:	b129      	cbz	r1, 80025b0 <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= CR1_SWRST_Set;
 80025a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	e001      	b.n	80025b4 <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= CR1_SWRST_Reset;
 80025b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025b4:	8003      	strh	r3, [r0, #0]
 80025b6:	4770      	bx	lr

080025b8 <I2C_SMBusAlertConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80025b8:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80025ba:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80025be:	bf15      	itete	ne
 80025c0:	f423 5300 	bicne.w	r3, r3, #8192	; 0x2000
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80025c4:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80025c6:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80025c8:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80025cc:	bf18      	it	ne
 80025ce:	0c1b      	lsrne	r3, r3, #16
 80025d0:	8003      	strh	r3, [r0, #0]
 80025d2:	4770      	bx	lr

080025d4 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= CR1_PEC_Set;
 80025d4:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025d6:	b119      	cbz	r1, 80025e0 <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= CR1_PEC_Set;
 80025d8:	b29b      	uxth	r3, r3
 80025da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025de:	e003      	b.n	80025e8 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= CR1_PEC_Reset;
 80025e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	0c1b      	lsrs	r3, r3, #16
 80025e8:	8003      	strh	r3, [r0, #0]
 80025ea:	4770      	bx	lr

080025ec <I2C_PECPositionConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80025ec:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80025ee:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80025f2:	bf15      	itete	ne
 80025f4:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80025f8:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80025fa:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80025fc:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8002600:	bf18      	it	ne
 8002602:	0c1b      	lsrne	r3, r3, #16
 8002604:	8003      	strh	r3, [r0, #0]
 8002606:	4770      	bx	lr

08002608 <I2C_NACKPositionConfig>:
 8002608:	f7ff bff0 	b.w	80025ec <I2C_PECPositionConfig>

0800260c <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= CR1_ENPEC_Set;
 800260c:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800260e:	b119      	cbz	r1, 8002618 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= CR1_ENPEC_Set;
 8002610:	b29b      	uxth	r3, r3
 8002612:	f043 0320 	orr.w	r3, r3, #32
 8002616:	e003      	b.n	8002620 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= CR1_ENPEC_Reset;
 8002618:	f023 0320 	bic.w	r3, r3, #32
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	8003      	strh	r3, [r0, #0]
 8002622:	4770      	bx	lr

08002624 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8002624:	8b00      	ldrh	r0, [r0, #24]
}
 8002626:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800262a:	4770      	bx	lr

0800262c <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= CR1_ENARP_Set;
 800262c:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800262e:	b119      	cbz	r1, 8002638 <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= CR1_ENARP_Set;
 8002630:	b29b      	uxth	r3, r3
 8002632:	f043 0310 	orr.w	r3, r3, #16
 8002636:	e003      	b.n	8002640 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= CR1_ENARP_Reset;
 8002638:	f023 0310 	bic.w	r3, r3, #16
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	8003      	strh	r3, [r0, #0]
 8002642:	4770      	bx	lr

08002644 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 8002644:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8002646:	b919      	cbnz	r1, 8002650 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 8002648:	b29b      	uxth	r3, r3
 800264a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800264e:	e003      	b.n	8002658 <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 8002650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	8003      	strh	r3, [r0, #0]
 800265a:	4770      	bx	lr

0800265c <I2C_FastModeDutyCycleConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800265c:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800265e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8002662:	bf1b      	ittet	ne
 8002664:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 8002668:	041b      	lslne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800266a:	b29b      	uxtheq	r3, r3
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800266c:	0c1b      	lsrne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800266e:	bf08      	it	eq
 8002670:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002674:	8383      	strh	r3, [r0, #28]
 8002676:	4770      	bx	lr

08002678 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002678:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 800267a:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800267c:	b29b      	uxth	r3, r3
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
 800267e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002682:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8002686:	ea03 0002 	and.w	r0, r3, r2
}
 800268a:	1a43      	subs	r3, r0, r1
 800268c:	4258      	negs	r0, r3
 800268e:	4158      	adcs	r0, r3
 8002690:	4770      	bx	lr

08002692 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002692:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8002694:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002696:	b29b      	uxth	r3, r3

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;

  /* Return status */
  return lastevent;
 8002698:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
}
 800269c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80026a0:	4770      	bx	lr

080026a2 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80026a2:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80026aa:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80026ac:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80026ae:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
  
  if(i2creg != 0)
 80026b0:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 80026b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 80026b6:	b113      	cbz	r3, 80026be <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80026b8:	9b01      	ldr	r3, [sp, #4]
 80026ba:	3314      	adds	r3, #20
 80026bc:	e002      	b.n	80026c4 <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80026be:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80026c0:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80026c2:	3318      	adds	r3, #24
 80026c4:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80026c6:	9b01      	ldr	r3, [sp, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80026ca:	4219      	tst	r1, r3
}
 80026cc:	bf14      	ite	ne
 80026ce:	2001      	movne	r0, #1
 80026d0:	2000      	moveq	r0, #0
 80026d2:	b002      	add	sp, #8
 80026d4:	4770      	bx	lr

080026d6 <I2C_ClearFlag>:
 80026d6:	43c9      	mvns	r1, r1
 80026d8:	b289      	uxth	r1, r1
 80026da:	8281      	strh	r1, [r0, #20]
 80026dc:	4770      	bx	lr

080026de <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 80026de:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80026e0:	8a80      	ldrh	r0, [r0, #20]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 80026e2:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80026e4:	b280      	uxth	r0, r0
 80026e6:	4008      	ands	r0, r1
 80026e8:	d006      	beq.n	80026f8 <I2C_GetITStatus+0x1a>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80026ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026ee:	ea13 4311 	ands.w	r3, r3, r1, lsr #16
 80026f2:	bf14      	ite	ne
 80026f4:	2001      	movne	r0, #1
 80026f6:	2000      	moveq	r0, #0
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80026f8:	4770      	bx	lr

080026fa <I2C_ClearITPendingBit>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_Mask;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80026fa:	43c9      	mvns	r1, r1
 80026fc:	b289      	uxth	r1, r1
 80026fe:	8281      	strh	r1, [r0, #20]
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop

08002704 <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8002704:	4b01      	ldr	r3, [pc, #4]	; (800270c <IWDG_WriteAccessCmd+0x8>)
 8002706:	6018      	str	r0, [r3, #0]
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40003000 	.word	0x40003000

08002710 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <IWDG_SetPrescaler+0x8>)
 8002712:	6058      	str	r0, [r3, #4]
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40003000 	.word	0x40003000

0800271c <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800271c:	4b01      	ldr	r3, [pc, #4]	; (8002724 <IWDG_SetReload+0x8>)
 800271e:	6098      	str	r0, [r3, #8]
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40003000 	.word	0x40003000

08002728 <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_Reload;
 8002728:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800272c:	4b01      	ldr	r3, [pc, #4]	; (8002734 <IWDG_ReloadCounter+0xc>)
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40003000 	.word	0x40003000

08002738 <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_Enable;
 8002738:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800273c:	4b01      	ldr	r3, [pc, #4]	; (8002744 <IWDG_Enable+0xc>)
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40003000 	.word	0x40003000

08002748 <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <IWDG_GetFlagStatus+0x10>)
 800274a:	68db      	ldr	r3, [r3, #12]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 800274c:	4218      	tst	r0, r3
}
 800274e:	bf14      	ite	ne
 8002750:	2001      	movne	r0, #1
 8002752:	2000      	moveq	r0, #0
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40003000 	.word	0x40003000

0800275c <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800275c:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800275e:	2101      	movs	r1, #1
 8002760:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002764:	f000 f9a4 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
}
 8002768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800276c:	2100      	movs	r1, #0
 800276e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002772:	f000 b99d 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>

08002776 <PWR_BackupAccessCmd>:
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8002776:	4b01      	ldr	r3, [pc, #4]	; (800277c <PWR_BackupAccessCmd+0x6>)
 8002778:	6018      	str	r0, [r3, #0]
 800277a:	4770      	bx	lr
 800277c:	420e0020 	.word	0x420e0020

08002780 <PWR_PVDCmd>:
  */
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8002780:	4b01      	ldr	r3, [pc, #4]	; (8002788 <PWR_PVDCmd+0x8>)
 8002782:	6018      	str	r0, [r3, #0]
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	420e0010 	.word	0x420e0010

0800278c <PWR_PVDLevelConfig>:
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  tmpreg = PWR->CR;
 800278c:	4a03      	ldr	r2, [pc, #12]	; (800279c <PWR_PVDLevelConfig+0x10>)
 800278e:	6813      	ldr	r3, [r2, #0]
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8002790:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8002794:	4318      	orrs	r0, r3
  /* Store the new value */
  PWR->CR = tmpreg;
 8002796:	6010      	str	r0, [r2, #0]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40007000 	.word	0x40007000

080027a0 <PWR_WakeUpPinCmd>:
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 80027a0:	4b01      	ldr	r3, [pc, #4]	; (80027a8 <PWR_WakeUpPinCmd+0x8>)
 80027a2:	6018      	str	r0, [r3, #0]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	420e00a0 	.word	0x420e00a0

080027ac <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <PWR_EnterSTOPMode+0x2c>)
  PWR->CR = tmpreg;
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80027ae:	2901      	cmp	r1, #1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 80027b0:	6813      	ldr	r3, [r2, #0]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 80027b2:	f023 0303 	bic.w	r3, r3, #3
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 80027b6:	ea40 0003 	orr.w	r0, r0, r3
  /* Store the new value */
  PWR->CR = tmpreg;
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <PWR_EnterSTOPMode+0x30>)
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
  /* Store the new value */
  PWR->CR = tmpreg;
 80027bc:	6010      	str	r0, [r2, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	f042 0204 	orr.w	r2, r2, #4
 80027c4:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 80027c6:	d101      	bne.n	80027cc <PWR_EnterSTOPMode+0x20>

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 80027c8:	bf30      	wfi
 80027ca:	e000      	b.n	80027ce <PWR_EnterSTOPMode+0x22>
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 80027cc:	bf20      	wfe
    /* Request Wait For Event */
    __WFE();
  }
  
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	f022 0204 	bic.w	r2, r2, #4
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	4770      	bx	lr
 80027d8:	40007000 	.word	0x40007000
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <PWR_EnterSTANDBYMode>:
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= PWR_CR_CWUF;
 80027e0:	4b07      	ldr	r3, [pc, #28]	; (8002800 <PWR_EnterSTANDBYMode+0x20>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f042 0204 	orr.w	r2, r2, #4
 80027e8:	601a      	str	r2, [r3, #0]
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	f042 0202 	orr.w	r2, r2, #2
 80027f0:	601a      	str	r2, [r3, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 80027f2:	4a04      	ldr	r2, [pc, #16]	; (8002804 <PWR_EnterSTANDBYMode+0x24>)
 80027f4:	6913      	ldr	r3, [r2, #16]
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6113      	str	r3, [r2, #16]

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 80027fc:	bf30      	wfi
 80027fe:	4770      	bx	lr
 8002800:	40007000 	.word	0x40007000
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <PWR_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <PWR_GetFlagStatus+0x10>)
 800280a:	685b      	ldr	r3, [r3, #4]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 800280c:	4203      	tst	r3, r0
}
 800280e:	bf14      	ite	ne
 8002810:	2001      	movne	r0, #1
 8002812:	2000      	moveq	r0, #0
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000

0800281c <PWR_ClearFlag>:
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 800281c:	4a02      	ldr	r2, [pc, #8]	; (8002828 <PWR_ClearFlag+0xc>)
 800281e:	6813      	ldr	r3, [r2, #0]
 8002820:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 8002824:	6010      	str	r0, [r2, #0]
 8002826:	4770      	bx	lr
 8002828:	40007000 	.word	0x40007000

0800282c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <RCC_DeInit+0x38>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <RCC_DeInit+0x3c>)
 800283a:	400a      	ands	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002844:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002848:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002850:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002858:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800285a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	f8ff0000 	.word	0xf8ff0000

0800286c <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800286e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002878:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002880:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8002882:	d003      	beq.n	800288c <RCC_HSEConfig+0x20>
 8002884:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8002888:	d004      	beq.n	8002894 <RCC_HSEConfig+0x28>
 800288a:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002892:	e002      	b.n	800289a <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 80028a4:	4a03      	ldr	r2, [pc, #12]	; (80028b4 <RCC_AdjustHSICalibrationValue+0x10>)
 80028a6:	6813      	ldr	r3, [r2, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 80028a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80028ac:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 80028b0:	6010      	str	r0, [r2, #0]
 80028b2:	4770      	bx	lr
 80028b4:	40021000 	.word	0x40021000

080028b8 <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80028b8:	4b01      	ldr	r3, [pc, #4]	; (80028c0 <RCC_HSICmd+0x8>)
 80028ba:	6018      	str	r0, [r3, #0]
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	42420000 	.word	0x42420000

080028c4 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 80028c4:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <RCC_PLLConfig+0x10>)
 80028c6:	6853      	ldr	r3, [r2, #4]
 80028c8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80028cc:	4319      	orrs	r1, r3
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80028ce:	4308      	orrs	r0, r1
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80028d0:	6050      	str	r0, [r2, #4]
 80028d2:	4770      	bx	lr
 80028d4:	40021000 	.word	0x40021000

080028d8 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <RCC_PLLCmd+0x8>)
 80028da:	6018      	str	r0, [r3, #0]
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	42420060 	.word	0x42420060

080028e4 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 80028e4:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <RCC_SYSCLKConfig+0x10>)
 80028e6:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80028e8:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80028ec:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80028ee:	6050      	str	r0, [r2, #4]
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000

080028f8 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 80028f8:	4b02      	ldr	r3, [pc, #8]	; (8002904 <RCC_GetSYSCLKSource+0xc>)
 80028fa:	6858      	ldr	r0, [r3, #4]
}
 80028fc:	f000 000c 	and.w	r0, r0, #12
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000

08002908 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8002908:	4a03      	ldr	r2, [pc, #12]	; (8002918 <RCC_HCLKConfig+0x10>)
 800290a:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 800290c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8002910:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002912:	6050      	str	r0, [r2, #4]
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 800291c:	4a03      	ldr	r2, [pc, #12]	; (800292c <RCC_PCLK1Config+0x10>)
 800291e:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8002920:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8002924:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002926:	6050      	str	r0, [r2, #4]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000

08002930 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8002930:	4a03      	ldr	r2, [pc, #12]	; (8002940 <RCC_PCLK2Config+0x10>)
 8002932:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8002934:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8002938:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800293c:	6050      	str	r0, [r2, #4]
 800293e:	4770      	bx	lr
 8002940:	40021000 	.word	0x40021000

08002944 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8002946:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002948:	b109      	cbz	r1, 800294e <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800294a:	4310      	orrs	r0, r2
 800294c:	e001      	b.n	8002952 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800294e:	ea22 0000 	bic.w	r0, r2, r0
 8002952:	7018      	strb	r0, [r3, #0]
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021009 	.word	0x40021009

0800295c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800295c:	4b01      	ldr	r3, [pc, #4]	; (8002964 <RCC_USBCLKConfig+0x8>)
 800295e:	6018      	str	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	424200d8 	.word	0x424200d8

08002968 <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <RCC_ADCCLKConfig+0x10>)
 800296a:	6853      	ldr	r3, [r2, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 800296c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8002970:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002972:	6050      	str	r0, [r2, #4]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <RCC_LSEConfig+0x1c>)
 800297e:	2200      	movs	r2, #0
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8002980:	2801      	cmp	r0, #1
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002982:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002984:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8002986:	d002      	beq.n	800298e <RCC_LSEConfig+0x12>
 8002988:	2804      	cmp	r0, #4
 800298a:	d002      	beq.n	8002992 <RCC_LSEConfig+0x16>
 800298c:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800298e:	7018      	strb	r0, [r3, #0]
      break;
 8002990:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8002992:	2205      	movs	r2, #5
 8002994:	701a      	strb	r2, [r3, #0]
 8002996:	4770      	bx	lr
 8002998:	40021020 	.word	0x40021020

0800299c <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <RCC_LSICmd+0x8>)
 800299e:	6018      	str	r0, [r3, #0]
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	42420480 	.word	0x42420480

080029a8 <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80029a8:	4a02      	ldr	r2, [pc, #8]	; (80029b4 <RCC_RTCCLKConfig+0xc>)
 80029aa:	6a13      	ldr	r3, [r2, #32]
 80029ac:	4318      	orrs	r0, r3
 80029ae:	6210      	str	r0, [r2, #32]
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000

080029b8 <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80029b8:	4b01      	ldr	r3, [pc, #4]	; (80029c0 <RCC_RTCCLKCmd+0x8>)
 80029ba:	6018      	str	r0, [r3, #0]
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	4242043c 	.word	0x4242043c

080029c4 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80029c4:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <RCC_GetClocksFreq+0x78>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80029c6:	b510      	push	{r4, lr}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80029c8:	6853      	ldr	r3, [r2, #4]
  
  switch (tmp)
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <RCC_GetClocksFreq+0x16>
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d003      	beq.n	80029de <RCC_GetClocksFreq+0x1a>
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <RCC_GetClocksFreq+0x7c>)
 80029d8:	e011      	b.n	80029fe <RCC_GetClocksFreq+0x3a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <RCC_GetClocksFreq+0x80>)
 80029dc:	e00f      	b.n	80029fe <RCC_GetClocksFreq+0x3a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80029de:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80029e0:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80029e2:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 80029e6:	03cc      	lsls	r4, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80029e8:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 80029ec:	d401      	bmi.n	80029f2 <RCC_GetClocksFreq+0x2e>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80029ee:	4916      	ldr	r1, [pc, #88]	; (8002a48 <RCC_GetClocksFreq+0x84>)
 80029f0:	e004      	b.n	80029fc <RCC_GetClocksFreq+0x38>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80029f2:	6851      	ldr	r1, [r2, #4]
 80029f4:	0389      	lsls	r1, r1, #14
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80029f6:	bf4c      	ite	mi
 80029f8:	4911      	ldrmi	r1, [pc, #68]	; (8002a40 <RCC_GetClocksFreq+0x7c>)
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80029fa:	4912      	ldrpl	r1, [pc, #72]	; (8002a44 <RCC_GetClocksFreq+0x80>)
 80029fc:	434b      	muls	r3, r1
 80029fe:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8002a00:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8002a02:	4912      	ldr	r1, [pc, #72]	; (8002a4c <RCC_GetClocksFreq+0x88>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8002a04:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8002a08:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002a0a:	6803      	ldr	r3, [r0, #0]
 8002a0c:	40e3      	lsrs	r3, r4
 8002a0e:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8002a10:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 8002a12:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 8002a16:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002a18:	fa23 f404 	lsr.w	r4, r3, r4
 8002a1c:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8002a1e:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 8002a20:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 8002a24:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002a26:	40e3      	lsrs	r3, r4
 8002a28:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8002a2a:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8002a2c:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8002a30:	440a      	add	r2, r1
 8002a32:	7c12      	ldrb	r2, [r2, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8002a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a38:	6103      	str	r3, [r0, #16]
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	007a1200 	.word	0x007a1200
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	003d0900 	.word	0x003d0900
 8002a4c:	20000018 	.word	0x20000018

08002a50 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002a52:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002a54:	b109      	cbz	r1, 8002a5a <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002a56:	4310      	orrs	r0, r2
 8002a58:	e001      	b.n	8002a5e <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002a5a:	ea22 0000 	bic.w	r0, r2, r0
 8002a5e:	6158      	str	r0, [r3, #20]
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000

08002a68 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002a68:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002a6a:	699a      	ldr	r2, [r3, #24]
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a6c:	b109      	cbz	r1, 8002a72 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002a6e:	4310      	orrs	r0, r2
 8002a70:	e001      	b.n	8002a76 <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002a72:	ea22 0000 	bic.w	r0, r2, r0
 8002a76:	6198      	str	r0, [r3, #24]
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000

08002a80 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002a82:	69da      	ldr	r2, [r3, #28]
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a84:	b109      	cbz	r1, 8002a8a <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002a86:	4310      	orrs	r0, r2
 8002a88:	e001      	b.n	8002a8e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002a8a:	ea22 0000 	bic.w	r0, r2, r0
 8002a8e:	61d8      	str	r0, [r3, #28]
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002a9a:	68da      	ldr	r2, [r3, #12]
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a9c:	b109      	cbz	r1, 8002aa2 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002a9e:	4310      	orrs	r0, r2
 8002aa0:	e001      	b.n	8002aa6 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002aa2:	ea22 0000 	bic.w	r0, r2, r0
 8002aa6:	60d8      	str	r0, [r3, #12]
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000

08002ab0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002ab2:	691a      	ldr	r2, [r3, #16]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002ab4:	b109      	cbz	r1, 8002aba <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002ab6:	4310      	orrs	r0, r2
 8002ab8:	e001      	b.n	8002abe <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002aba:	ea22 0000 	bic.w	r0, r2, r0
 8002abe:	6118      	str	r0, [r3, #16]
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8002ac8:	4b01      	ldr	r3, [pc, #4]	; (8002ad0 <RCC_BackupResetCmd+0x8>)
 8002aca:	6018      	str	r0, [r3, #0]
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	42420440 	.word	0x42420440

08002ad4 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8002ad4:	4b01      	ldr	r3, [pc, #4]	; (8002adc <RCC_ClockSecuritySystemCmd+0x8>)
 8002ad6:	6018      	str	r0, [r3, #0]
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	4242004c 	.word	0x4242004c

08002ae0 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8002ae0:	4b01      	ldr	r3, [pc, #4]	; (8002ae8 <RCC_MCOConfig+0x8>)
 8002ae2:	7018      	strb	r0, [r3, #0]
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021007 	.word	0x40021007

08002aec <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002aec:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8002aee:	2a01      	cmp	r2, #1
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <RCC_GetFlagStatus+0x24>)
 8002af2:	d101      	bne.n	8002af8 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	e003      	b.n	8002b00 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002af8:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8002afa:	bf0c      	ite	eq
 8002afc:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002afe:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
 8002b00:	f000 001f 	and.w	r0, r0, #31
 8002b04:	fa23 f000 	lsr.w	r0, r3, r0
}
 8002b08:	f000 0001 	and.w	r0, r0, #1
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000

08002b14 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8002b14:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8002b1a:	2031      	movs	r0, #49	; 0x31
 8002b1c:	f7ff ffe6 	bl	8002aec <RCC_GetFlagStatus>
    StartUpCounter++;  
 8002b20:	9b01      	ldr	r3, [sp, #4]
 8002b22:	3301      	adds	r3, #1
 8002b24:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8002b26:	9b01      	ldr	r3, [sp, #4]
 8002b28:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b2c:	d001      	beq.n	8002b32 <RCC_WaitForHSEStartUp+0x1e>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d0f3      	beq.n	8002b1a <RCC_WaitForHSEStartUp+0x6>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8002b32:	2031      	movs	r0, #49	; 0x31
 8002b34:	f7ff ffda 	bl	8002aec <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 8002b38:	3000      	adds	r0, #0
 8002b3a:	bf18      	it	ne
 8002b3c:	2001      	movne	r0, #1
 8002b3e:	b003      	add	sp, #12
 8002b40:	f85d fb04 	ldr.w	pc, [sp], #4

08002b44 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8002b44:	4a02      	ldr	r2, [pc, #8]	; (8002b50 <RCC_ClearFlag+0xc>)
 8002b46:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	6253      	str	r3, [r2, #36]	; 0x24
 8002b4e:	4770      	bx	lr
 8002b50:	40021000 	.word	0x40021000

08002b54 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <RCC_GetITStatus+0x10>)
 8002b56:	689b      	ldr	r3, [r3, #8]
  {
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8002b58:	4218      	tst	r0, r3
}
 8002b5a:	bf14      	ite	ne
 8002b5c:	2001      	movne	r0, #1
 8002b5e:	2000      	moveq	r0, #0
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8002b68:	4b01      	ldr	r3, [pc, #4]	; (8002b70 <RCC_ClearITPendingBit+0x8>)
 8002b6a:	7018      	strb	r0, [r3, #0]
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	4002100a 	.word	0x4002100a

08002b74 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002b74:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <SPI_I2S_DeInit+0x58>)
 8002b78:	4298      	cmp	r0, r3
 8002b7a:	d10b      	bne.n	8002b94 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b82:	f7ff ff89 	bl	8002a98 <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8002b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b90:	f7ff bf82 	b.w	8002a98 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <SPI_I2S_DeInit+0x5c>)
 8002b96:	4298      	cmp	r0, r3
 8002b98:	d108      	bne.n	8002bac <SPI_I2S_DeInit+0x38>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ba0:	f7ff ff86 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002baa:	e00a      	b.n	8002bc2 <SPI_I2S_DeInit+0x4e>
  }
  else
  {
    if (SPIx == SPI3)
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <SPI_I2S_DeInit+0x60>)
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	d10b      	bne.n	8002bca <SPI_I2S_DeInit+0x56>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002bb8:	f7ff ff7a 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }
  }
}
 8002bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002bc6:	f7ff bf73 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>
 8002bca:	bd08      	pop	{r3, pc}
 8002bcc:	40013000 	.word	0x40013000
 8002bd0:	40003800 	.word	0x40003800
 8002bd4:	40003c00 	.word	0x40003c00

08002bd8 <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002bd8:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002bda:	880a      	ldrh	r2, [r1, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002bdc:	b510      	push	{r4, lr}

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002bde:	f403 5441 	and.w	r4, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002be2:	884b      	ldrh	r3, [r1, #2]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	888a      	ldrh	r2, [r1, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	88ca      	ldrh	r2, [r1, #6]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	890a      	ldrh	r2, [r1, #8]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	894a      	ldrh	r2, [r1, #10]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	898a      	ldrh	r2, [r1, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	89ca      	ldrh	r2, [r1, #14]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	4323      	orrs	r3, r4
 8002c00:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002c02:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8002c04:	8b83      	ldrh	r3, [r0, #28]
 8002c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002c10:	8a0b      	ldrh	r3, [r1, #16]
 8002c12:	8203      	strh	r3, [r0, #16]
 8002c14:	bd10      	pop	{r4, pc}

08002c16 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8002c16:	8b83      	ldrh	r3, [r0, #28]
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002c18:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8002c1a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c1e:	f023 030f 	bic.w	r3, r3, #15
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002c2c:	688b      	ldr	r3, [r1, #8]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002c2e:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002c30:	2b02      	cmp	r3, #2
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002c32:	b087      	sub	sp, #28
 8002c34:	4605      	mov	r5, r0
 8002c36:	460c      	mov	r4, r1
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002c38:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002c3a:	d023      	beq.n	8002c84 <I2S_Init+0x6e>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002c3c:	888b      	ldrh	r3, [r1, #4]
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8002c3e:	a801      	add	r0, sp, #4
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002c40:	2b00      	cmp	r3, #0
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8002c42:	bf14      	ite	ne
 8002c44:	2702      	movne	r7, #2
 8002c46:	2701      	moveq	r7, #1
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8002c48:	f7ff febc 	bl	80029c4 <RCC_GetClocksFreq>
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002c4c:	88e3      	ldrh	r3, [r4, #6]
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
      
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8002c4e:	9901      	ldr	r1, [sp, #4]
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002c54:	bf1c      	itt	ne
 8002c56:	017f      	lslne	r7, r7, #5
 8002c58:	fbb1 f1f7 	udivne	r1, r1, r7
 8002c5c:	f04f 020a 	mov.w	r2, #10

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002c60:	bf08      	it	eq
 8002c62:	0a09      	lsreq	r1, r1, #8
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002c64:	434a      	muls	r2, r1
 8002c66:	68a3      	ldr	r3, [r4, #8]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	3305      	adds	r3, #5
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;  
 8002c6e:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002c70:	b29b      	uxth	r3, r3
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;  
 8002c72:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002c76:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002c7a:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002c7c:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002c80:	b292      	uxth	r2, r2
 8002c82:	e000      	b.n	8002c86 <I2S_Init+0x70>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8002c84:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002c86:	1e99      	subs	r1, r3, #2
 8002c88:	b289      	uxth	r1, r1
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8002c8a:	29fe      	cmp	r1, #254	; 0xfe
 8002c8c:	bf24      	itt	cs
 8002c8e:	2200      	movcs	r2, #0
 8002c90:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 8002c92:	4313      	orrs	r3, r2
 8002c94:	88e2      	ldrh	r2, [r4, #6]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	842b      	strh	r3, [r5, #32]
 8002c9c:	8823      	ldrh	r3, [r4, #0]
 8002c9e:	88a2      	ldrh	r2, [r4, #4]
 8002ca0:	431e      	orrs	r6, r3
 8002ca2:	8863      	ldrh	r3, [r4, #2]
 8002ca4:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 8002ca8:	4333      	orrs	r3, r6
 8002caa:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8002cac:	89a2      	ldrh	r2, [r4, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
 8002cb2:	83ab      	strh	r3, [r5, #28]
}
 8002cb4:	b007      	add	sp, #28
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cb8 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8002cbc:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002cbe:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8002cc0:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8002cc2:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8002cc4:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8002cc6:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8002cc8:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002cca:	2307      	movs	r3, #7
 8002ccc:	8203      	strh	r3, [r0, #16]
 8002cce:	4770      	bx	lr

08002cd0 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8002cd0:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8002cd2:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8002cd4:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8002cd6:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8002cd8:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8002cda:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8002cdc:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8002cde:	8183      	strh	r3, [r0, #12]
 8002ce0:	4770      	bx	lr

08002ce2 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8002ce2:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002ce4:	b119      	cbz	r1, 8002cee <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cec:	e003      	b.n	8002cf6 <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8002cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	8003      	strh	r3, [r0, #0]
 8002cf8:	4770      	bx	lr

08002cfa <I2S_Cmd>:
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 8002cfa:	8b83      	ldrh	r3, [r0, #28]
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002cfc:	b119      	cbz	r1, 8002d06 <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d04:	e003      	b.n	8002d0e <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
 8002d06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	8383      	strh	r3, [r0, #28]
 8002d10:	4770      	bx	lr

08002d12 <SPI_I2S_ITConfig>:

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002d12:	2301      	movs	r3, #1
 8002d14:	0909      	lsrs	r1, r1, #4
 8002d16:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002d1a:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002d1c:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002d1e:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8002d20:	b10a      	cbz	r2, 8002d26 <SPI_I2S_ITConfig+0x14>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002d22:	4319      	orrs	r1, r3
 8002d24:	e001      	b.n	8002d2a <SPI_I2S_ITConfig+0x18>
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8002d26:	ea23 0101 	bic.w	r1, r3, r1
 8002d2a:	8081      	strh	r1, [r0, #4]
 8002d2c:	4770      	bx	lr

08002d2e <SPI_I2S_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002d2e:	8883      	ldrh	r3, [r0, #4]
 8002d30:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8002d32:	b10a      	cbz	r2, 8002d38 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002d34:	4319      	orrs	r1, r3
 8002d36:	e001      	b.n	8002d3c <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002d38:	ea23 0101 	bic.w	r1, r3, r1
 8002d3c:	8081      	strh	r1, [r0, #4]
 8002d3e:	4770      	bx	lr

08002d40 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002d40:	8181      	strh	r1, [r0, #12]
 8002d42:	4770      	bx	lr

08002d44 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002d44:	8980      	ldrh	r0, [r0, #12]
}
 8002d46:	b280      	uxth	r0, r0
 8002d48:	4770      	bx	lr

08002d4a <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002d4a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8002d4e:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002d50:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002d52:	bf0b      	itete	eq
 8002d54:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002d58:	b29b      	uxthne	r3, r3
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002d5a:	041b      	lsleq	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002d5c:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002d60:	bf08      	it	eq
 8002d62:	0c1b      	lsreq	r3, r3, #16
 8002d64:	8003      	strh	r3, [r0, #0]
 8002d66:	4770      	bx	lr

08002d68 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8002d68:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d6a:	b119      	cbz	r1, 8002d74 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	e003      	b.n	8002d7c <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	0c1b      	lsrs	r3, r3, #16
 8002d7c:	8083      	strh	r3, [r0, #4]
 8002d7e:	4770      	bx	lr

08002d80 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8002d80:	8803      	ldrh	r3, [r0, #0]
 8002d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8002d8c:	8803      	ldrh	r3, [r0, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4319      	orrs	r1, r3
 8002d92:	8001      	strh	r1, [r0, #0]
 8002d94:	4770      	bx	lr

08002d96 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= CR1_CRCNext_Set;
 8002d96:	8803      	ldrh	r3, [r0, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d9e:	8003      	strh	r3, [r0, #0]
 8002da0:	4770      	bx	lr

08002da2 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8002da2:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002da4:	b119      	cbz	r1, 8002dae <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dac:	e003      	b.n	8002db6 <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
 8002dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	8003      	strh	r3, [r0, #0]
 8002db8:	4770      	bx	lr

08002dba <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8002dba:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8002dbc:	bf14      	ite	ne
 8002dbe:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8002dc0:	8a80      	ldrheq	r0, [r0, #20]
 8002dc2:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8002dc4:	4770      	bx	lr

08002dc6 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8002dc6:	8a00      	ldrh	r0, [r0, #16]
}
 8002dc8:	b280      	uxth	r0, r0
 8002dca:	4770      	bx	lr

08002dcc <SPI_BiDirectionalLineConfig>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002dcc:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002dce:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002dd2:	bf15      	itete	ne
 8002dd4:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002dd8:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002dda:	041b      	lslne	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002ddc:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002de0:	bf18      	it	ne
 8002de2:	0c1b      	lsrne	r3, r3, #16
 8002de4:	8003      	strh	r3, [r0, #0]
 8002de6:	4770      	bx	lr

08002de8 <SPI_I2S_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002de8:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002dea:	4219      	tst	r1, r3
}
 8002dec:	bf14      	ite	ne
 8002dee:	2001      	movne	r0, #1
 8002df0:	2000      	moveq	r0, #0
 8002df2:	4770      	bx	lr

08002df4 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8002df4:	43c9      	mvns	r1, r1
 8002df6:	b289      	uxth	r1, r1
 8002df8:	8101      	strh	r1, [r0, #8]
 8002dfa:	4770      	bx	lr

08002dfc <SPI_I2S_GetITStatus>:
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8002dfc:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002dfe:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002e00:	8903      	ldrh	r3, [r0, #8]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f001 000f 	and.w	r0, r1, #15
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	fa02 f000 	lsl.w	r0, r2, r0
 8002e0e:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002e10:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002e12:	d005      	beq.n	8002e20 <SPI_I2S_GetITStatus+0x24>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8002e14:	0909      	lsrs	r1, r1, #4
 8002e16:	408a      	lsls	r2, r1
 8002e18:	4214      	tst	r4, r2
 8002e1a:	bf14      	ite	ne
 8002e1c:	2001      	movne	r0, #1
 8002e1e:	2000      	moveq	r0, #0
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002e20:	bd10      	pop	{r4, pc}

08002e22 <SPI_I2S_ClearITPendingBit>:

  /* Get the SPI IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8002e22:	f001 010f 	and.w	r1, r1, #15
 8002e26:	2301      	movs	r3, #1
 8002e28:	fa03 f101 	lsl.w	r1, r3, r1
 8002e2c:	43c9      	mvns	r1, r1
 8002e2e:	b289      	uxth	r1, r1
 8002e30:	8101      	strh	r1, [r0, #8]
 8002e32:	4770      	bx	lr

08002e34 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002e34:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002e36:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <USART_DeInit+0x88>)
 8002e38:	4298      	cmp	r0, r3
 8002e3a:	d10b      	bne.n	8002e54 <USART_DeInit+0x20>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e42:	f7ff fe29 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8002e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e50:	f7ff be22 	b.w	8002a98 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <USART_DeInit+0x8c>)
 8002e56:	4298      	cmp	r0, r3
 8002e58:	d108      	bne.n	8002e6c <USART_DeInit+0x38>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e60:	f7ff fe26 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002e64:	2100      	movs	r1, #0
 8002e66:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e6a:	e022      	b.n	8002eb2 <USART_DeInit+0x7e>
  }
  else if (USARTx == USART3)
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <USART_DeInit+0x90>)
 8002e6e:	4298      	cmp	r0, r3
 8002e70:	d108      	bne.n	8002e84 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002e72:	2101      	movs	r1, #1
 8002e74:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e78:	f7ff fe1a 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e82:	e016      	b.n	8002eb2 <USART_DeInit+0x7e>
  }    
  else if (USARTx == UART4)
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <USART_DeInit+0x94>)
 8002e86:	4298      	cmp	r0, r3
 8002e88:	d108      	bne.n	8002e9c <USART_DeInit+0x68>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e90:	f7ff fe0e 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002e94:	2100      	movs	r1, #0
 8002e96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e9a:	e00a      	b.n	8002eb2 <USART_DeInit+0x7e>
  }    
  else
  {
    if (USARTx == UART5)
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <USART_DeInit+0x98>)
 8002e9e:	4298      	cmp	r0, r3
 8002ea0:	d10b      	bne.n	8002eba <USART_DeInit+0x86>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ea8:	f7ff fe02 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002eac:	2100      	movs	r1, #0
 8002eae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    }
  }
}
 8002eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART5)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002eb6:	f7ff bdfb 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>
 8002eba:	bd08      	pop	{r3, pc}
 8002ebc:	40013800 	.word	0x40013800
 8002ec0:	40004400 	.word	0x40004400
 8002ec4:	40004800 	.word	0x40004800
 8002ec8:	40004c00 	.word	0x40004c00
 8002ecc:	40005000 	.word	0x40005000

08002ed0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	460e      	mov	r6, r1
 8002ed4:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002ed6:	8a03      	ldrh	r3, [r0, #16]
 8002ed8:	88ca      	ldrh	r2, [r1, #6]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ee0:	4313      	orrs	r3, r2
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002ee2:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002ee4:	8982      	ldrh	r2, [r0, #12]
 8002ee6:	8889      	ldrh	r1, [r1, #4]
 8002ee8:	8933      	ldrh	r3, [r6, #8]
 8002eea:	b292      	uxth	r2, r2
 8002eec:	430b      	orrs	r3, r1
 8002eee:	8971      	ldrh	r1, [r6, #10]
 8002ef0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	f022 020c 	bic.w	r2, r2, #12
 8002efa:	4313      	orrs	r3, r2
 8002efc:	b29b      	uxth	r3, r3
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002efe:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002f00:	8a83      	ldrh	r3, [r0, #20]
 8002f02:	89b2      	ldrh	r2, [r6, #12]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	4313      	orrs	r3, r2
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002f0e:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002f10:	a801      	add	r0, sp, #4
 8002f12:	f7ff fd57 	bl	80029c4 <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002f16:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <USART_Init+0xa4>)
 8002f18:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002f1a:	9d04      	ldr	r5, [sp, #16]
 8002f1c:	6831      	ldr	r1, [r6, #0]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002f1e:	4294      	cmp	r4, r2
 8002f20:	bf18      	it	ne
 8002f22:	461d      	movne	r5, r3
 8002f24:	2219      	movs	r2, #25
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002f26:	436a      	muls	r2, r5
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f28:	89a3      	ldrh	r3, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002f2a:	2664      	movs	r6, #100	; 0x64
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f2c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002f30:	bf14      	ite	ne
 8002f32:	004d      	lslne	r5, r1, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002f34:	008d      	lsleq	r5, r1, #2
 8002f36:	fbb2 f5f5 	udiv	r5, r2, r5
  }
  tmpreg = (integerdivider / 100) << 4;
 8002f3a:	fbb5 f0f6 	udiv	r0, r5, r6

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f3e:	89a2      	ldrh	r2, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002f40:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002f42:	0901      	lsrs	r1, r0, #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f44:	0412      	lsls	r2, r2, #16
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002f46:	fb06 5311 	mls	r3, r6, r1, r5

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f4a:	d507      	bpl.n	8002f5c <USART_Init+0x8c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002f4c:	00d9      	lsls	r1, r3, #3
 8002f4e:	3132      	adds	r1, #50	; 0x32
 8002f50:	fbb1 f2f6 	udiv	r2, r1, r6
 8002f54:	f002 0207 	and.w	r2, r2, #7
 8002f58:	4310      	orrs	r0, r2
 8002f5a:	e006      	b.n	8002f6a <USART_Init+0x9a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002f5c:	011a      	lsls	r2, r3, #4
 8002f5e:	3232      	adds	r2, #50	; 0x32
 8002f60:	fbb2 f3f6 	udiv	r3, r2, r6
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	4318      	orrs	r0, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8002f6a:	b280      	uxth	r0, r0
 8002f6c:	8120      	strh	r0, [r4, #8]
}
 8002f6e:	b006      	add	sp, #24
 8002f70:	bd70      	pop	{r4, r5, r6, pc}
 8002f72:	bf00      	nop
 8002f74:	40013800 	.word	0x40013800

08002f78 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002f78:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002f7c:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002f7e:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002f80:	2300      	movs	r3, #0
 8002f82:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002f84:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002f86:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002f88:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002f8a:	8183      	strh	r3, [r0, #12]
 8002f8c:	4770      	bx	lr

08002f8e <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002f8e:	884b      	ldrh	r3, [r1, #2]
 8002f90:	b510      	push	{r4, lr}
 8002f92:	880c      	ldrh	r4, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002f94:	8a02      	ldrh	r2, [r0, #16]
 8002f96:	4323      	orrs	r3, r4
 8002f98:	888c      	ldrh	r4, [r1, #4]
 8002f9a:	88c9      	ldrh	r1, [r1, #6]
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	4323      	orrs	r3, r4
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002faa:	8203      	strh	r3, [r0, #16]
 8002fac:	bd10      	pop	{r4, pc}

08002fae <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002fb2:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002fb4:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002fb6:	80c3      	strh	r3, [r0, #6]
 8002fb8:	4770      	bx	lr

08002fba <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002fba:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002fbc:	b119      	cbz	r1, 8002fc6 <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fc4:	e003      	b.n	8002fce <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8002fc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	0c1b      	lsrs	r3, r3, #16
 8002fce:	8183      	strh	r3, [r0, #12]
 8002fd0:	4770      	bx	lr

08002fd2 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8002fd2:	2301      	movs	r3, #1
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002fd4:	b510      	push	{r4, lr}
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002fd6:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002fda:	429c      	cmp	r4, r3
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8002fdc:	f001 011f 	and.w	r1, r1, #31
 8002fe0:	fa03 f101 	lsl.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002fe4:	d101      	bne.n	8002fea <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002fe6:	300c      	adds	r0, #12
 8002fe8:	e003      	b.n	8002ff2 <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002fea:	2c02      	cmp	r4, #2
  {
    usartxbase += 0x10;
 8002fec:	bf0c      	ite	eq
 8002fee:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002ff0:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002ff2:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002ff4:	b10a      	cbz	r2, 8002ffa <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002ff6:	4319      	orrs	r1, r3
 8002ff8:	e001      	b.n	8002ffe <USART_ITConfig+0x2c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002ffa:	ea23 0101 	bic.w	r1, r3, r1
 8002ffe:	6001      	str	r1, [r0, #0]
 8003000:	bd10      	pop	{r4, pc}

08003002 <USART_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8003002:	8a83      	ldrh	r3, [r0, #20]
 8003004:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8003006:	b10a      	cbz	r2, 800300c <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8003008:	4319      	orrs	r1, r3
 800300a:	e001      	b.n	8003010 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800300c:	ea23 0101 	bic.w	r1, r3, r1
 8003010:	8281      	strh	r1, [r0, #20]
 8003012:	4770      	bx	lr

08003014 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8003014:	8a03      	ldrh	r3, [r0, #16]
 8003016:	f023 030f 	bic.w	r3, r3, #15
 800301a:	041b      	lsls	r3, r3, #16
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8003020:	8a03      	ldrh	r3, [r0, #16]
 8003022:	b29b      	uxth	r3, r3
 8003024:	4319      	orrs	r1, r3
 8003026:	8201      	strh	r1, [r0, #16]
 8003028:	4770      	bx	lr

0800302a <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 800302a:	8983      	ldrh	r3, [r0, #12]
 800302c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8003036:	8983      	ldrh	r3, [r0, #12]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4319      	orrs	r1, r3
 800303c:	8181      	strh	r1, [r0, #12]
 800303e:	4770      	bx	lr

08003040 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8003040:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8003042:	b119      	cbz	r1, 800304c <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8003044:	b29b      	uxth	r3, r3
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	e003      	b.n	8003054 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 800304c:	f023 0302 	bic.w	r3, r3, #2
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	8183      	strh	r3, [r0, #12]
 8003056:	4770      	bx	lr

08003058 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 8003058:	8a03      	ldrh	r3, [r0, #16]
 800305a:	f023 0320 	bic.w	r3, r3, #32
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8003064:	8a03      	ldrh	r3, [r0, #16]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4319      	orrs	r1, r3
 800306a:	8201      	strh	r1, [r0, #16]
 800306c:	4770      	bx	lr

0800306e <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 800306e:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003070:	b119      	cbz	r1, 800307a <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8003072:	b29b      	uxth	r3, r3
 8003074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003078:	e003      	b.n	8003082 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 800307a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800307e:	041b      	lsls	r3, r3, #16
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	8203      	strh	r3, [r0, #16]
 8003084:	4770      	bx	lr

08003086 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003086:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800308a:	8081      	strh	r1, [r0, #4]
 800308c:	4770      	bx	lr

0800308e <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800308e:	8880      	ldrh	r0, [r0, #4]
}
 8003090:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003094:	4770      	bx	lr

08003096 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 8003096:	8983      	ldrh	r3, [r0, #12]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	8183      	strh	r3, [r0, #12]
 80030a0:	4770      	bx	lr

080030a2 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 80030a2:	8b03      	ldrh	r3, [r0, #24]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80030a8:	8b03      	ldrh	r3, [r0, #24]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80030b0:	8301      	strh	r1, [r0, #24]
 80030b2:	4770      	bx	lr

080030b4 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 80030b4:	8b03      	ldrh	r3, [r0, #24]
 80030b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030ba:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80030bc:	8b03      	ldrh	r3, [r0, #24]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4319      	orrs	r1, r3
 80030c2:	8301      	strh	r1, [r0, #24]
 80030c4:	4770      	bx	lr

080030c6 <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 80030c6:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80030c8:	b119      	cbz	r1, 80030d2 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f043 0320 	orr.w	r3, r3, #32
 80030d0:	e003      	b.n	80030da <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 80030d2:	f023 0320 	bic.w	r3, r3, #32
 80030d6:	041b      	lsls	r3, r3, #16
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	8283      	strh	r3, [r0, #20]
 80030dc:	4770      	bx	lr

080030de <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80030de:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80030e0:	b119      	cbz	r1, 80030ea <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f043 0310 	orr.w	r3, r3, #16
 80030e8:	e003      	b.n	80030f2 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 80030ea:	f023 0310 	bic.w	r3, r3, #16
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	8283      	strh	r3, [r0, #20]
 80030f4:	4770      	bx	lr

080030f6 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80030f6:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80030f8:	b119      	cbz	r1, 8003102 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	e003      	b.n	800310a <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 8003102:	f023 0308 	bic.w	r3, r3, #8
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	8283      	strh	r3, [r0, #20]
 800310c:	4770      	bx	lr

0800310e <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 800310e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003110:	b129      	cbz	r1, 800311e <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 8003112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311a:	b29b      	uxth	r3, r3
 800311c:	e001      	b.n	8003122 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 800311e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003122:	8183      	strh	r3, [r0, #12]
 8003124:	4770      	bx	lr

08003126 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 8003126:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003128:	b119      	cbz	r1, 8003132 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 800312a:	b29b      	uxth	r3, r3
 800312c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003130:	e003      	b.n	800313a <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 8003132:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	8283      	strh	r3, [r0, #20]
 800313c:	4770      	bx	lr

0800313e <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 800313e:	8a83      	ldrh	r3, [r0, #20]
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800314a:	8a83      	ldrh	r3, [r0, #20]
 800314c:	b29b      	uxth	r3, r3
 800314e:	4319      	orrs	r1, r3
 8003150:	8281      	strh	r1, [r0, #20]
 8003152:	4770      	bx	lr

08003154 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8003154:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003156:	b119      	cbz	r1, 8003160 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8003158:	b29b      	uxth	r3, r3
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	e003      	b.n	8003168 <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8003160:	f023 0302 	bic.w	r3, r3, #2
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	8283      	strh	r3, [r0, #20]
 800316a:	4770      	bx	lr

0800316c <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800316c:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 800316e:	4219      	tst	r1, r3
}
 8003170:	bf14      	ite	ne
 8003172:	2001      	movne	r0, #1
 8003174:	2000      	moveq	r0, #0
 8003176:	4770      	bx	lr

08003178 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 8003178:	43c9      	mvns	r1, r1
 800317a:	b289      	uxth	r1, r1
 800317c:	8001      	strh	r1, [r0, #0]
 800317e:	4770      	bx	lr

08003180 <USART_GetITStatus>:
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8003180:	2301      	movs	r3, #1
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003182:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003184:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8003188:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800318c:	429c      	cmp	r4, r3
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 800318e:	fa03 f202 	lsl.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003192:	d101      	bne.n	8003198 <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8003194:	8983      	ldrh	r3, [r0, #12]
 8003196:	e003      	b.n	80031a0 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8003198:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 800319a:	bf0c      	ite	eq
 800319c:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800319e:	8a83      	ldrhne	r3, [r0, #20]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 80031a4:	8802      	ldrh	r2, [r0, #0]
 80031a6:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80031a8:	b143      	cbz	r3, 80031bc <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 80031aa:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 80031ac:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 80031ae:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 80031b2:	420a      	tst	r2, r1
 80031b4:	bf14      	ite	ne
 80031b6:	4618      	movne	r0, r3
 80031b8:	2000      	moveq	r0, #0
 80031ba:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 80031bc:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 80031be:	bd10      	pop	{r4, pc}

080031c0 <USART_ClearITPendingBit>:
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
  USARTx->SR = (uint16_t)~itmask;
 80031c0:	0a09      	lsrs	r1, r1, #8
 80031c2:	2301      	movs	r3, #1
 80031c4:	fa03 f101 	lsl.w	r1, r3, r1
 80031c8:	43c9      	mvns	r1, r1
 80031ca:	b289      	uxth	r1, r1
 80031cc:	8001      	strh	r1, [r0, #0]
 80031ce:	4770      	bx	lr

080031d0 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80031d0:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80031d2:	8c05      	ldrh	r5, [r0, #32]
 80031d4:	f025 0501 	bic.w	r5, r5, #1
 80031d8:	042d      	lsls	r5, r5, #16
 80031da:	0c2d      	lsrs	r5, r5, #16
 80031dc:	8405      	strh	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80031e0:	8c04      	ldrh	r4, [r0, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
 80031e2:	b2ad      	uxth	r5, r5
 80031e4:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 80031e8:	432a      	orrs	r2, r5
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80031ea:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80031ee:	b29a      	uxth	r2, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <TI1_Config+0x64>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80031f2:	b2a4      	uxth	r4, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80031f4:	4298      	cmp	r0, r3
 80031f6:	d012      	beq.n	800321e <TI1_Config+0x4e>
 80031f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fc:	4298      	cmp	r0, r3
 80031fe:	d00e      	beq.n	800321e <TI1_Config+0x4e>
 8003200:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003204:	d00b      	beq.n	800321e <TI1_Config+0x4e>
 8003206:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800320a:	4298      	cmp	r0, r3
 800320c:	d007      	beq.n	800321e <TI1_Config+0x4e>
 800320e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003212:	4298      	cmp	r0, r3
 8003214:	d003      	beq.n	800321e <TI1_Config+0x4e>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800321a:	4298      	cmp	r0, r3
 800321c:	d102      	bne.n	8003224 <TI1_Config+0x54>
 800321e:	f024 0402 	bic.w	r4, r4, #2
 8003222:	e001      	b.n	8003228 <TI1_Config+0x58>
 8003224:	f024 040a 	bic.w	r4, r4, #10
 8003228:	f044 0401 	orr.w	r4, r4, #1
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800322c:	4321      	orrs	r1, r4
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800322e:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003230:	8401      	strh	r1, [r0, #32]
 8003232:	bd30      	pop	{r4, r5, pc}
 8003234:	40012c00 	.word	0x40012c00

08003238 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8003238:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800323a:	8c04      	ldrh	r4, [r0, #32]
 800323c:	f024 0410 	bic.w	r4, r4, #16
 8003240:	0424      	lsls	r4, r4, #16
 8003242:	0c24      	lsrs	r4, r4, #16
 8003244:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003246:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8003248:	8c04      	ldrh	r4, [r0, #32]
 800324a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 800324e:	052d      	lsls	r5, r5, #20
 8003250:	0d2d      	lsrs	r5, r5, #20
 8003252:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003256:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800325a:	4a14      	ldr	r2, [pc, #80]	; (80032ac <TI2_Config+0x74>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800325c:	b2a4      	uxth	r4, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800325e:	4290      	cmp	r0, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003260:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003262:	d012      	beq.n	800328a <TI2_Config+0x52>
 8003264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003268:	4290      	cmp	r0, r2
 800326a:	d00e      	beq.n	800328a <TI2_Config+0x52>
 800326c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003270:	d00b      	beq.n	800328a <TI2_Config+0x52>
 8003272:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003276:	4290      	cmp	r0, r2
 8003278:	d007      	beq.n	800328a <TI2_Config+0x52>
 800327a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800327e:	4290      	cmp	r0, r2
 8003280:	d003      	beq.n	800328a <TI2_Config+0x52>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003286:	4290      	cmp	r0, r2
 8003288:	d107      	bne.n	800329a <TI2_Config+0x62>
 800328a:	f024 0420 	bic.w	r4, r4, #32
 800328e:	f044 0410 	orr.w	r4, r4, #16
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003292:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
 8003296:	b289      	uxth	r1, r1
 8003298:	e004      	b.n	80032a4 <TI2_Config+0x6c>
 800329a:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
 800329e:	f044 0410 	orr.w	r4, r4, #16
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 80032a2:	4321      	orrs	r1, r4
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032a4:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80032a6:	8401      	strh	r1, [r0, #32]
 80032a8:	bd30      	pop	{r4, r5, pc}
 80032aa:	bf00      	nop
 80032ac:	40012c00 	.word	0x40012c00

080032b0 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80032b0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 80032b2:	4b61      	ldr	r3, [pc, #388]	; (8003438 <TIM_DeInit+0x188>)
 80032b4:	4298      	cmp	r0, r3
 80032b6:	d108      	bne.n	80032ca <TIM_DeInit+0x1a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80032b8:	2101      	movs	r1, #1
 80032ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032be:	f7ff fbeb 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80032c2:	2100      	movs	r1, #0
 80032c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032c8:	e0b1      	b.n	800342e <TIM_DeInit+0x17e>
  }     
  else if (TIMx == TIM2)
 80032ca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032ce:	d106      	bne.n	80032de <TIM_DeInit+0x2e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80032d0:	2101      	movs	r1, #1
 80032d2:	4608      	mov	r0, r1
 80032d4:	f7ff fbec 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80032d8:	2100      	movs	r1, #0
 80032da:	2001      	movs	r0, #1
 80032dc:	e008      	b.n	80032f0 <TIM_DeInit+0x40>
  }
  else if (TIMx == TIM3)
 80032de:	4b57      	ldr	r3, [pc, #348]	; (800343c <TIM_DeInit+0x18c>)
 80032e0:	4298      	cmp	r0, r3
 80032e2:	d109      	bne.n	80032f8 <TIM_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80032e4:	2101      	movs	r1, #1
 80032e6:	2002      	movs	r0, #2
 80032e8:	f7ff fbe2 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80032ec:	2100      	movs	r1, #0
 80032ee:	2002      	movs	r0, #2
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
 80032f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80032f4:	f7ff bbdc 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>
  }
  else if (TIMx == TIM4)
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <TIM_DeInit+0x190>)
 80032fa:	4298      	cmp	r0, r3
 80032fc:	d106      	bne.n	800330c <TIM_DeInit+0x5c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80032fe:	2101      	movs	r1, #1
 8003300:	2004      	movs	r0, #4
 8003302:	f7ff fbd5 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8003306:	2100      	movs	r1, #0
 8003308:	2004      	movs	r0, #4
 800330a:	e7f1      	b.n	80032f0 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM5)
 800330c:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <TIM_DeInit+0x194>)
 800330e:	4298      	cmp	r0, r3
 8003310:	d106      	bne.n	8003320 <TIM_DeInit+0x70>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8003312:	2101      	movs	r1, #1
 8003314:	2008      	movs	r0, #8
 8003316:	f7ff fbcb 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800331a:	2100      	movs	r1, #0
 800331c:	2008      	movs	r0, #8
 800331e:	e7e7      	b.n	80032f0 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM6)
 8003320:	4b49      	ldr	r3, [pc, #292]	; (8003448 <TIM_DeInit+0x198>)
 8003322:	4298      	cmp	r0, r3
 8003324:	d106      	bne.n	8003334 <TIM_DeInit+0x84>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8003326:	2101      	movs	r1, #1
 8003328:	2010      	movs	r0, #16
 800332a:	f7ff fbc1 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800332e:	2100      	movs	r1, #0
 8003330:	2010      	movs	r0, #16
 8003332:	e7dd      	b.n	80032f0 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM7)
 8003334:	4b45      	ldr	r3, [pc, #276]	; (800344c <TIM_DeInit+0x19c>)
 8003336:	4298      	cmp	r0, r3
 8003338:	d106      	bne.n	8003348 <TIM_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800333a:	2101      	movs	r1, #1
 800333c:	2020      	movs	r0, #32
 800333e:	f7ff fbb7 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8003342:	2100      	movs	r1, #0
 8003344:	2020      	movs	r0, #32
 8003346:	e7d3      	b.n	80032f0 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM8)
 8003348:	4b41      	ldr	r3, [pc, #260]	; (8003450 <TIM_DeInit+0x1a0>)
 800334a:	4298      	cmp	r0, r3
 800334c:	d108      	bne.n	8003360 <TIM_DeInit+0xb0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800334e:	2101      	movs	r1, #1
 8003350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003354:	f7ff fba0 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 8003358:	2100      	movs	r1, #0
 800335a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800335e:	e066      	b.n	800342e <TIM_DeInit+0x17e>
  }
  else if (TIMx == TIM9)
 8003360:	4b3c      	ldr	r3, [pc, #240]	; (8003454 <TIM_DeInit+0x1a4>)
 8003362:	4298      	cmp	r0, r3
 8003364:	d108      	bne.n	8003378 <TIM_DeInit+0xc8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8003366:	2101      	movs	r1, #1
 8003368:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800336c:	f7ff fb94 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8003370:	2100      	movs	r1, #0
 8003372:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003376:	e05a      	b.n	800342e <TIM_DeInit+0x17e>
   }  
  else if (TIMx == TIM10)
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <TIM_DeInit+0x1a8>)
 800337a:	4298      	cmp	r0, r3
 800337c:	d108      	bne.n	8003390 <TIM_DeInit+0xe0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800337e:	2101      	movs	r1, #1
 8003380:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003384:	f7ff fb88 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8003388:	2100      	movs	r1, #0
 800338a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800338e:	e04e      	b.n	800342e <TIM_DeInit+0x17e>
  }  
  else if (TIMx == TIM11) 
 8003390:	4b32      	ldr	r3, [pc, #200]	; (800345c <TIM_DeInit+0x1ac>)
 8003392:	4298      	cmp	r0, r3
 8003394:	d108      	bne.n	80033a8 <TIM_DeInit+0xf8>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8003396:	2101      	movs	r1, #1
 8003398:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800339c:	f7ff fb7c 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80033a0:	2100      	movs	r1, #0
 80033a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80033a6:	e042      	b.n	800342e <TIM_DeInit+0x17e>
  }  
  else if (TIMx == TIM12)
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <TIM_DeInit+0x1b0>)
 80033aa:	4298      	cmp	r0, r3
 80033ac:	d106      	bne.n	80033bc <TIM_DeInit+0x10c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80033ae:	2101      	movs	r1, #1
 80033b0:	2040      	movs	r0, #64	; 0x40
 80033b2:	f7ff fb7d 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80033b6:	2100      	movs	r1, #0
 80033b8:	2040      	movs	r0, #64	; 0x40
 80033ba:	e799      	b.n	80032f0 <TIM_DeInit+0x40>
  }  
  else if (TIMx == TIM13) 
 80033bc:	4b29      	ldr	r3, [pc, #164]	; (8003464 <TIM_DeInit+0x1b4>)
 80033be:	4298      	cmp	r0, r3
 80033c0:	d106      	bne.n	80033d0 <TIM_DeInit+0x120>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80033c2:	2101      	movs	r1, #1
 80033c4:	2080      	movs	r0, #128	; 0x80
 80033c6:	f7ff fb73 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80033ca:	2100      	movs	r1, #0
 80033cc:	2080      	movs	r0, #128	; 0x80
 80033ce:	e78f      	b.n	80032f0 <TIM_DeInit+0x40>
  }
  else if (TIMx == TIM14) 
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <TIM_DeInit+0x1b8>)
 80033d2:	4298      	cmp	r0, r3
 80033d4:	d108      	bne.n	80033e8 <TIM_DeInit+0x138>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80033d6:	2101      	movs	r1, #1
 80033d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033dc:	f7ff fb68 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 80033e0:	2100      	movs	r1, #0
 80033e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033e6:	e783      	b.n	80032f0 <TIM_DeInit+0x40>
  }        
  else if (TIMx == TIM15)
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <TIM_DeInit+0x1bc>)
 80033ea:	4298      	cmp	r0, r3
 80033ec:	d108      	bne.n	8003400 <TIM_DeInit+0x150>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 80033ee:	2101      	movs	r1, #1
 80033f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80033f4:	f7ff fb50 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 80033f8:	2100      	movs	r1, #0
 80033fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80033fe:	e016      	b.n	800342e <TIM_DeInit+0x17e>
  } 
  else if (TIMx == TIM16)
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <TIM_DeInit+0x1c0>)
 8003402:	4298      	cmp	r0, r3
 8003404:	d108      	bne.n	8003418 <TIM_DeInit+0x168>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8003406:	2101      	movs	r1, #1
 8003408:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800340c:	f7ff fb44 	bl	8002a98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 8003410:	2100      	movs	r1, #0
 8003412:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003416:	e00a      	b.n	800342e <TIM_DeInit+0x17e>
  } 
  else
  {
    if (TIMx == TIM17)
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <TIM_DeInit+0x1c4>)
 800341a:	4298      	cmp	r0, r3
 800341c:	d10b      	bne.n	8003436 <TIM_DeInit+0x186>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 800341e:	2101      	movs	r1, #1
 8003420:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003424:	f7ff fb38 	bl	8002a98 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8003428:	2100      	movs	r1, #0
 800342a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    }  
  }
}
 800342e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM17)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8003432:	f7ff bb31 	b.w	8002a98 <RCC_APB2PeriphResetCmd>
 8003436:	bd08      	pop	{r3, pc}
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40001000 	.word	0x40001000
 800344c:	40001400 	.word	0x40001400
 8003450:	40013400 	.word	0x40013400
 8003454:	40014c00 	.word	0x40014c00
 8003458:	40015000 	.word	0x40015000
 800345c:	40015400 	.word	0x40015400
 8003460:	40001800 	.word	0x40001800
 8003464:	40001c00 	.word	0x40001c00
 8003468:	40002000 	.word	0x40002000
 800346c:	40014000 	.word	0x40014000
 8003470:	40014400 	.word	0x40014400
 8003474:	40014800 	.word	0x40014800

08003478 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8003478:	4a22      	ldr	r2, [pc, #136]	; (8003504 <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800347a:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800347c:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800347e:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8003480:	d012      	beq.n	80034a8 <TIM_TimeBaseInit+0x30>
 8003482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003486:	4290      	cmp	r0, r2
 8003488:	d00e      	beq.n	80034a8 <TIM_TimeBaseInit+0x30>
 800348a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800348e:	d00b      	beq.n	80034a8 <TIM_TimeBaseInit+0x30>
 8003490:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003494:	4290      	cmp	r0, r2
 8003496:	d007      	beq.n	80034a8 <TIM_TimeBaseInit+0x30>
 8003498:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800349c:	4290      	cmp	r0, r2
 800349e:	d003      	beq.n	80034a8 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80034a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034a4:	4290      	cmp	r0, r2
 80034a6:	d103      	bne.n	80034b0 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80034a8:	884a      	ldrh	r2, [r1, #2]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80034aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80034ae:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <TIM_TimeBaseInit+0x90>)
 80034b2:	4290      	cmp	r0, r2
 80034b4:	d008      	beq.n	80034c8 <TIM_TimeBaseInit+0x50>
 80034b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ba:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80034bc:	bf1f      	itttt	ne
 80034be:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80034c2:	88ca      	ldrhne	r2, [r1, #6]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80034c4:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80034c6:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80034c8:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80034ca:	888b      	ldrh	r3, [r1, #4]
 80034cc:	8583      	strh	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80034ce:	880b      	ldrh	r3, [r1, #0]
 80034d0:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <TIM_TimeBaseInit+0x8c>)
 80034d4:	4298      	cmp	r0, r3
 80034d6:	d00f      	beq.n	80034f8 <TIM_TimeBaseInit+0x80>
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	4298      	cmp	r0, r3
 80034de:	d00b      	beq.n	80034f8 <TIM_TimeBaseInit+0x80>
 80034e0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80034e4:	4298      	cmp	r0, r3
 80034e6:	d007      	beq.n	80034f8 <TIM_TimeBaseInit+0x80>
 80034e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ec:	4298      	cmp	r0, r3
 80034ee:	d003      	beq.n	80034f8 <TIM_TimeBaseInit+0x80>
 80034f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034f4:	4298      	cmp	r0, r3
 80034f6:	d101      	bne.n	80034fc <TIM_TimeBaseInit+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80034f8:	7a0b      	ldrb	r3, [r1, #8]
 80034fa:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80034fc:	2301      	movs	r3, #1
 80034fe:	8283      	strh	r3, [r0, #20]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40001000 	.word	0x40001000

0800350c <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 800350c:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800350e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	8886      	ldrh	r6, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351e:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003520:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8003522:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	0c1b      	lsrs	r3, r3, #16

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800352a:	431d      	orrs	r5, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 800352c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003530:	890c      	ldrh	r4, [r1, #8]
 8003532:	884b      	ldrh	r3, [r1, #2]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8003534:	0412      	lsls	r2, r2, #16
 8003536:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003538:	4323      	orrs	r3, r4
 800353a:	4313      	orrs	r3, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <TIM_OC1Init+0x84>)
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800353e:	b2b6      	uxth	r6, r6
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8003540:	4290      	cmp	r0, r2
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003542:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8003544:	d00f      	beq.n	8003566 <TIM_OC1Init+0x5a>
 8003546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800354a:	4290      	cmp	r0, r2
 800354c:	d00b      	beq.n	8003566 <TIM_OC1Init+0x5a>
 800354e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003552:	4290      	cmp	r0, r2
 8003554:	d007      	beq.n	8003566 <TIM_OC1Init+0x5a>
 8003556:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800355a:	4290      	cmp	r0, r2
 800355c:	d003      	beq.n	8003566 <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 800355e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003562:	4290      	cmp	r0, r2
 8003564:	d10e      	bne.n	8003584 <TIM_OC1Init+0x78>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8003566:	894c      	ldrh	r4, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8003568:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800356c:	431c      	orrs	r4, r3
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800356e:	888b      	ldrh	r3, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8003570:	f024 0404 	bic.w	r4, r4, #4
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8003574:	f426 7240 	bic.w	r2, r6, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003578:	4323      	orrs	r3, r4
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800357a:	898e      	ldrh	r6, [r1, #12]
 800357c:	89cc      	ldrh	r4, [r1, #14]
 800357e:	4334      	orrs	r4, r6
 8003580:	4322      	orrs	r2, r4
 8003582:	b296      	uxth	r6, r2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8003584:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003586:	8086      	strh	r6, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003588:	8305      	strh	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800358a:	8682      	strh	r2, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358c:	8403      	strh	r3, [r0, #32]
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	40012c00 	.word	0x40012c00

08003594 <TIM_OC2Init>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8003594:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003596:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8003598:	f023 0310 	bic.w	r3, r3, #16
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80035a2:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a6:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80035a8:	880c      	ldrh	r4, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 80035aa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80035ae:	0412      	lsls	r2, r2, #16
 80035b0:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80035b2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80035b6:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80035ba:	b294      	uxth	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80035bc:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80035be:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 80035c0:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 80035c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80035c6:	884a      	ldrh	r2, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c8:	b2ad      	uxth	r5, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80035ca:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <TIM_OC2Init+0x84>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80035d0:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80035d2:	4290      	cmp	r0, r2
 80035d4:	d003      	beq.n	80035de <TIM_OC2Init+0x4a>
 80035d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035da:	4290      	cmp	r0, r2
 80035dc:	d115      	bne.n	800360a <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80035de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80035e2:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80035e4:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80035e6:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 80035ea:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80035ee:	4013      	ands	r3, r2
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80035f0:	888a      	ldrh	r2, [r1, #4]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 80035f2:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80035f6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80035fa:	898a      	ldrh	r2, [r1, #12]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80035fc:	b29b      	uxth	r3, r3
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80035fe:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8003602:	89ca      	ldrh	r2, [r1, #14]
 8003604:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 8003608:	b2ad      	uxth	r5, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800360a:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360c:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800360e:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8003610:	8702      	strh	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003612:	8403      	strh	r3, [r0, #32]
 8003614:	bd30      	pop	{r4, r5, pc}
 8003616:	bf00      	nop
 8003618:	40012c00 	.word	0x40012c00

0800361c <TIM_OC3Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 800361c:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800361e:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8003620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003624:	041b      	lsls	r3, r3, #16
 8003626:	0c1b      	lsrs	r3, r3, #16
 8003628:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800362c:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362e:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003630:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8003632:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003636:	0412      	lsls	r2, r2, #16
 8003638:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800363a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800363e:	4315      	orrs	r5, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8003640:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8003642:	890a      	ldrh	r2, [r1, #8]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8003644:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8003646:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800364a:	884a      	ldrh	r2, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800364e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003652:	4a12      	ldr	r2, [pc, #72]	; (800369c <TIM_OC3Init+0x80>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8003654:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003656:	4290      	cmp	r0, r2
 8003658:	d003      	beq.n	8003662 <TIM_OC3Init+0x46>
 800365a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800365e:	4290      	cmp	r0, r2
 8003660:	d115      	bne.n	800368e <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8003662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8003666:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8003668:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800366a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 800366e:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8003672:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003674:	888a      	ldrh	r2, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8003676:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800367a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800367e:	898a      	ldrh	r2, [r1, #12]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003680:	b29b      	uxth	r3, r3
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003682:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8003686:	89ca      	ldrh	r2, [r1, #14]
 8003688:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800368c:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800368e:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003690:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003692:	8385      	strh	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8003694:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003696:	8403      	strh	r3, [r0, #32]
 8003698:	bd30      	pop	{r4, r5, pc}
 800369a:	bf00      	nop
 800369c:	40012c00 	.word	0x40012c00

080036a0 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80036a0:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80036a2:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 80036a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	0c1b      	lsrs	r3, r3, #16
 80036ac:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b0:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036b2:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80036b4:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 80036b6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80036ba:	0412      	lsls	r2, r2, #16
 80036bc:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80036be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80036c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80036c6:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80036c8:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 80036ca:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80036cc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80036d0:	884d      	ldrh	r5, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d2:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80036d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036d8:	4d0a      	ldr	r5, [pc, #40]	; (8003704 <TIM_OC4Init+0x64>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80036da:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036dc:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80036de:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036e0:	d003      	beq.n	80036ea <TIM_OC4Init+0x4a>
 80036e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80036e6:	42a8      	cmp	r0, r5
 80036e8:	d105      	bne.n	80036f6 <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80036ea:	898d      	ldrh	r5, [r1, #12]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 80036ec:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80036f0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80036f4:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f6:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80036f8:	8382      	strh	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80036fa:	88ca      	ldrh	r2, [r1, #6]
 80036fc:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003700:	8403      	strh	r3, [r0, #32]
 8003702:	bd30      	pop	{r4, r5, pc}
 8003704:	40012c00 	.word	0x40012c00

08003708 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8003708:	880a      	ldrh	r2, [r1, #0]
 800370a:	884b      	ldrh	r3, [r1, #2]
 800370c:	4313      	orrs	r3, r2
 800370e:	888a      	ldrh	r2, [r1, #4]
 8003710:	4313      	orrs	r3, r2
 8003712:	88ca      	ldrh	r2, [r1, #6]
 8003714:	4313      	orrs	r3, r2
 8003716:	890a      	ldrh	r2, [r1, #8]
 8003718:	4313      	orrs	r3, r2
 800371a:	894a      	ldrh	r2, [r1, #10]
 800371c:	4313      	orrs	r3, r2
 800371e:	898a      	ldrh	r2, [r1, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8003728:	4770      	bx	lr

0800372a <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 800372a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800372e:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8003730:	2300      	movs	r3, #0
 8003732:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8003734:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8003736:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8003738:	7203      	strb	r3, [r0, #8]
 800373a:	4770      	bx	lr

0800373c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800373c:	2300      	movs	r3, #0
 800373e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8003740:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8003742:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8003744:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8003746:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8003748:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800374a:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800374c:	81c3      	strh	r3, [r0, #14]
 800374e:	4770      	bx	lr

08003750 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003750:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003752:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003754:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8003756:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003758:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800375a:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800375c:	8103      	strh	r3, [r0, #8]
 800375e:	4770      	bx	lr

08003760 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8003760:	2300      	movs	r3, #0
 8003762:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8003764:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8003766:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8003768:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800376a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800376c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800376e:	8183      	strh	r3, [r0, #12]
 8003770:	4770      	bx	lr

08003772 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003772:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003774:	b119      	cbz	r1, 800377e <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003776:	b29b      	uxth	r3, r3
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	e003      	b.n	8003786 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	8003      	strh	r3, [r0, #0]
 8003788:	4770      	bx	lr

0800378a <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800378a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800378e:	b129      	cbz	r1, 800379c <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003798:	b29b      	uxth	r3, r3
 800379a:	e001      	b.n	80037a0 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 800379c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80037a0:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80037a4:	4770      	bx	lr

080037a6 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80037a6:	8281      	strh	r1, [r0, #20]
 80037a8:	4770      	bx	lr

080037aa <TIM_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80037aa:	430a      	orrs	r2, r1
 80037ac:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 80037b0:	4770      	bx	lr

080037b2 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80037b2:	8983      	ldrh	r3, [r0, #12]
 80037b4:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80037b6:	b10a      	cbz	r2, 80037bc <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80037b8:	4319      	orrs	r1, r3
 80037ba:	e001      	b.n	80037c0 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80037bc:	ea23 0101 	bic.w	r1, r3, r1
 80037c0:	8181      	strh	r1, [r0, #12]
 80037c2:	4770      	bx	lr

080037c4 <TIM_ITConfig>:
 80037c4:	f7ff bff5 	b.w	80037b2 <TIM_DMACmd>

080037c8 <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80037c8:	8903      	ldrh	r3, [r0, #8]
 80037ca:	f023 0307 	bic.w	r3, r3, #7
 80037ce:	041b      	lsls	r3, r3, #16
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	8103      	strh	r3, [r0, #8]
 80037d4:	4770      	bx	lr

080037d6 <TIM_ITRxExternalClockConfig>:
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037d6:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80037d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80037e0:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e2:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80037e4:	8903      	ldrh	r3, [r0, #8]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f043 0307 	orr.w	r3, r3, #7
 80037ec:	8103      	strh	r3, [r0, #8]
 80037ee:	4770      	bx	lr

080037f0 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	460d      	mov	r5, r1
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80037f4:	2d60      	cmp	r5, #96	; 0x60
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80037f6:	4611      	mov	r1, r2
 80037f8:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80037fa:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80037fe:	d102      	bne.n	8003806 <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003800:	f7ff fd1a 	bl	8003238 <TI2_Config>
 8003804:	e001      	b.n	800380a <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8003806:	f7ff fce3 	bl	80031d0 <TI1_Config>
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800380a:	8921      	ldrh	r1, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800380c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8003810:	0409      	lsls	r1, r1, #16
 8003812:	0c09      	lsrs	r1, r1, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003814:	4329      	orrs	r1, r5
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003816:	8121      	strh	r1, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8003818:	8923      	ldrh	r3, [r4, #8]
 800381a:	b29b      	uxth	r3, r3
 800381c:	f043 0307 	orr.w	r3, r3, #7
 8003820:	8123      	strh	r3, [r4, #8]
 8003822:	bd38      	pop	{r3, r4, r5, pc}

08003824 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8003824:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 8003826:	8904      	ldrh	r4, [r0, #8]
 8003828:	b2e4      	uxtb	r4, r4
 800382a:	4321      	orrs	r1, r4
 800382c:	430a      	orrs	r2, r1
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800382e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003832:	b299      	uxth	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003834:	8101      	strh	r1, [r0, #8]
 8003836:	bd10      	pop	{r4, pc}

08003838 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8003838:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800383a:	f7ff fff3 	bl	8003824 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800383e:	8903      	ldrh	r3, [r0, #8]
 8003840:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  tmpsmcr |= TIM_TS_ETRF;
 8003848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384c:	8103      	strh	r3, [r0, #8]
 800384e:	bd10      	pop	{r4, pc}

08003850 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003850:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003852:	f7ff ffe7 	bl	8003824 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8003856:	8903      	ldrh	r3, [r0, #8]
 8003858:	b29b      	uxth	r3, r3
 800385a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800385e:	8103      	strh	r3, [r0, #8]
 8003860:	bd10      	pop	{r4, pc}

08003862 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8003862:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8003864:	8282      	strh	r2, [r0, #20]
 8003866:	4770      	bx	lr

08003868 <TIM_CounterModeConfig>:
{
  uint16_t tmpcr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 8003868:	8803      	ldrh	r3, [r0, #0]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	0c1b      	lsrs	r3, r3, #16
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8003872:	4319      	orrs	r1, r3
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8003874:	8001      	strh	r1, [r0, #0]
 8003876:	4770      	bx	lr

08003878 <TIM_SelectInputTrigger>:
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003878:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003882:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003884:	8101      	strh	r1, [r0, #8]
 8003886:	4770      	bx	lr

08003888 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8003888:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800388a:	8906      	ldrh	r6, [r0, #8]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800388c:	8b04      	ldrh	r4, [r0, #24]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8003890:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003894:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8003896:	f024 0403 	bic.w	r4, r4, #3
 800389a:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800389e:	f026 0607 	bic.w	r6, r6, #7
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 80038a2:	0424      	lsls	r4, r4, #16
 80038a4:	432a      	orrs	r2, r5
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80038a6:	0436      	lsls	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 80038a8:	0c24      	lsrs	r4, r4, #16
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 80038aa:	0c36      	lsrs	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80038ac:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80038b0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
 80038b4:	4331      	orrs	r1, r6
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80038b6:	f044 0401 	orr.w	r4, r4, #1
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80038ba:	b29d      	uxth	r5, r3
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038bc:	8101      	strh	r1, [r0, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80038be:	8304      	strh	r4, [r0, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c0:	8405      	strh	r5, [r0, #32]
 80038c2:	bd70      	pop	{r4, r5, r6, pc}

080038c4 <TIM_ForcedOC1Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80038c4:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	041b      	lsls	r3, r3, #16
 80038cc:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80038ce:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80038d0:	8301      	strh	r1, [r0, #24]
 80038d2:	4770      	bx	lr

080038d4 <TIM_ForcedOC2Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80038d4:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 80038d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038da:	041b      	lsls	r3, r3, #16
 80038dc:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80038de:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80038e2:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80038e4:	8301      	strh	r1, [r0, #24]
 80038e6:	4770      	bx	lr

080038e8 <TIM_ForcedOC3Config>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80038e8:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	041b      	lsls	r3, r3, #16
 80038f0:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80038f2:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80038f4:	8381      	strh	r1, [r0, #28]
 80038f6:	4770      	bx	lr

080038f8 <TIM_ForcedOC4Config>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80038f8:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8003902:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003906:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003908:	8381      	strh	r1, [r0, #28]
 800390a:	4770      	bx	lr

0800390c <TIM_ARRPreloadConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800390c:	8803      	ldrh	r3, [r0, #0]
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800390e:	b119      	cbz	r1, 8003918 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003910:	b29b      	uxth	r3, r3
 8003912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003916:	e003      	b.n	8003920 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8003918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	8003      	strh	r3, [r0, #0]
 8003922:	4770      	bx	lr

08003924 <TIM_SelectCOM>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003924:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003926:	b119      	cbz	r1, 8003930 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8003928:	b29b      	uxth	r3, r3
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	e003      	b.n	8003938 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	041b      	lsls	r3, r3, #16
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	8083      	strh	r3, [r0, #4]
 800393a:	4770      	bx	lr

0800393c <TIM_SelectCCDMA>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800393c:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800393e:	b119      	cbz	r1, 8003948 <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003940:	b29b      	uxth	r3, r3
 8003942:	f043 0308 	orr.w	r3, r3, #8
 8003946:	e003      	b.n	8003950 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 8003948:	f023 0308 	bic.w	r3, r3, #8
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	0c1b      	lsrs	r3, r3, #16
 8003950:	8083      	strh	r3, [r0, #4]
 8003952:	4770      	bx	lr

08003954 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8003954:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003956:	b119      	cbz	r1, 8003960 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8003958:	b29b      	uxth	r3, r3
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	e003      	b.n	8003968 <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	0c1b      	lsrs	r3, r3, #16
 8003968:	8083      	strh	r3, [r0, #4]
 800396a:	4770      	bx	lr

0800396c <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 800396c:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 800396e:	f023 0308 	bic.w	r3, r3, #8
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8003976:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003978:	8301      	strh	r1, [r0, #24]
 800397a:	4770      	bx	lr

0800397c <TIM_OC2PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 800397c:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 800397e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8003986:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800398a:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800398c:	8301      	strh	r1, [r0, #24]
 800398e:	4770      	bx	lr

08003990 <TIM_OC3PreloadConfig>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8003990:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8003992:	f023 0308 	bic.w	r3, r3, #8
 8003996:	041b      	lsls	r3, r3, #16
 8003998:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800399a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800399c:	8381      	strh	r1, [r0, #28]
 800399e:	4770      	bx	lr

080039a0 <TIM_OC4PreloadConfig>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 80039a0:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 80039a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80039aa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80039ae:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80039b0:	8381      	strh	r1, [r0, #28]
 80039b2:	4770      	bx	lr

080039b4 <TIM_OC1FastConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80039b4:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 80039b6:	f023 0304 	bic.w	r3, r3, #4
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80039be:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80039c0:	8301      	strh	r1, [r0, #24]
 80039c2:	4770      	bx	lr

080039c4 <TIM_OC2FastConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80039c4:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 80039c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80039ce:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80039d2:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80039d4:	8301      	strh	r1, [r0, #24]
 80039d6:	4770      	bx	lr

080039d8 <TIM_OC3FastConfig>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80039d8:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80039e2:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80039e4:	8381      	strh	r1, [r0, #28]
 80039e6:	4770      	bx	lr

080039e8 <TIM_OC4FastConfig>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80039e8:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 80039ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ee:	041b      	lsls	r3, r3, #16
 80039f0:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80039f2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80039f6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80039f8:	8381      	strh	r1, [r0, #28]
 80039fa:	4770      	bx	lr

080039fc <TIM_ClearOC1Ref>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80039fc:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 80039fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8003a06:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003a08:	8301      	strh	r1, [r0, #24]
 8003a0a:	4770      	bx	lr

08003a0c <TIM_ClearOC2Ref>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 8003a0c:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8003a0e:	f3c3 030e 	ubfx	r3, r3, #0, #15
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8003a12:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a16:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003a18:	8301      	strh	r1, [r0, #24]
 8003a1a:	4770      	bx	lr

08003a1c <TIM_ClearOC3Ref>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003a1c:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8003a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a22:	041b      	lsls	r3, r3, #16
 8003a24:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8003a26:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003a28:	8381      	strh	r1, [r0, #28]
 8003a2a:	4770      	bx	lr

08003a2c <TIM_ClearOC4Ref>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003a2c:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8003a2e:	f3c3 030e 	ubfx	r3, r3, #0, #15
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8003a32:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a36:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003a38:	8381      	strh	r1, [r0, #28]
 8003a3a:	4770      	bx	lr

08003a3c <TIM_OC1PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003a3c:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8003a3e:	f023 0302 	bic.w	r3, r3, #2
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8003a46:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a48:	8401      	strh	r1, [r0, #32]
 8003a4a:	4770      	bx	lr

08003a4c <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003a4c:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8003a56:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a58:	8401      	strh	r1, [r0, #32]
 8003a5a:	4770      	bx	lr

08003a5c <TIM_OC2PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003a5c:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8003a5e:	f023 0320 	bic.w	r3, r3, #32
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8003a66:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003a6a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a6c:	8401      	strh	r1, [r0, #32]
 8003a6e:	4770      	bx	lr

08003a70 <TIM_OC2NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003a70:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8003a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8003a7a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003a7e:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a80:	8401      	strh	r1, [r0, #32]
 8003a82:	4770      	bx	lr

08003a84 <TIM_OC3PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003a84:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8003a86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8003a8e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a92:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a94:	8401      	strh	r1, [r0, #32]
 8003a96:	4770      	bx	lr

08003a98 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8003a98:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8003a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8003aa2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003aa6:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003aa8:	8401      	strh	r1, [r0, #32]
 8003aaa:	4770      	bx	lr

08003aac <TIM_OC4PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003aac:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8003aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8003ab6:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8003aba:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003abc:	8401      	strh	r1, [r0, #32]
 8003abe:	4770      	bx	lr

08003ac0 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003ac0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8003ac2:	8c04      	ldrh	r4, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003ac4:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8003ac6:	b2a5      	uxth	r5, r4
 8003ac8:	2401      	movs	r4, #1
 8003aca:	408c      	lsls	r4, r1
 8003acc:	ea25 0404 	bic.w	r4, r5, r4
 8003ad0:	8404      	strh	r4, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003ad2:	8c03      	ldrh	r3, [r0, #32]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	8403      	strh	r3, [r0, #32]
 8003ada:	bd30      	pop	{r4, r5, pc}

08003adc <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003adc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003ade:	8c04      	ldrh	r4, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003ae0:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003ae2:	b2a5      	uxth	r5, r4
 8003ae4:	2404      	movs	r4, #4
 8003ae6:	408c      	lsls	r4, r1
 8003ae8:	ea25 0404 	bic.w	r4, r5, r4
 8003aec:	8404      	strh	r4, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003aee:	8c03      	ldrh	r3, [r0, #32]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	8403      	strh	r3, [r0, #32]
 8003af6:	bd30      	pop	{r4, r5, pc}

08003af8 <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8003af8:	b530      	push	{r4, r5, lr}
  tmp += CCMR_Offset;

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003afa:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;
 8003afc:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003b00:	b2a5      	uxth	r5, r4
 8003b02:	2401      	movs	r4, #1
 8003b04:	408c      	lsls	r4, r1
 8003b06:	ea25 0404 	bic.w	r4, r5, r4
 8003b0a:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8003b0c:	f021 0008 	bic.w	r0, r1, #8
 8003b10:	b930      	cbnz	r0, 8003b20 <TIM_SelectOCxM+0x28>
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8003b12:	0849      	lsrs	r1, r1, #1
 8003b14:	58c8      	ldr	r0, [r1, r3]
 8003b16:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8003b1a:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8003b1c:	58c8      	ldr	r0, [r1, r3]
 8003b1e:	e009      	b.n	8003b34 <TIM_SelectOCxM+0x3c>
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8003b20:	3904      	subs	r1, #4
 8003b22:	f3c1 014e 	ubfx	r1, r1, #1, #15
 8003b26:	58c8      	ldr	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8003b28:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8003b2a:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8003b2e:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8003b30:	58c8      	ldr	r0, [r1, r3]
 8003b32:	b292      	uxth	r2, r2
 8003b34:	4302      	orrs	r2, r0
 8003b36:	50ca      	str	r2, [r1, r3]
 8003b38:	bd30      	pop	{r4, r5, pc}

08003b3a <TIM_UpdateDisableConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8003b3a:	8803      	ldrh	r3, [r0, #0]
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b3c:	b119      	cbz	r1, 8003b46 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	e003      	b.n	8003b4e <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8003b46:	f023 0302 	bic.w	r3, r3, #2
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	8003      	strh	r3, [r0, #0]
 8003b50:	4770      	bx	lr

08003b52 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003b52:	8803      	ldrh	r3, [r0, #0]
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8003b54:	b119      	cbz	r1, 8003b5e <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	e003      	b.n	8003b66 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	8003      	strh	r3, [r0, #0]
 8003b68:	4770      	bx	lr

08003b6a <TIM_SelectHallSensor>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003b6a:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b6c:	b119      	cbz	r1, 8003b76 <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b74:	e003      	b.n	8003b7e <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8003b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	8083      	strh	r3, [r0, #4]
 8003b80:	4770      	bx	lr

08003b82 <TIM_SelectOnePulseMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8003b82:	8803      	ldrh	r3, [r0, #0]
 8003b84:	f023 0308 	bic.w	r3, r3, #8
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	8003      	strh	r3, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8003b8e:	8803      	ldrh	r3, [r0, #0]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	4319      	orrs	r1, r3
 8003b94:	8001      	strh	r1, [r0, #0]
 8003b96:	4770      	bx	lr

08003b98 <TIM_SelectOutputTrigger>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8003b98:	8883      	ldrh	r3, [r0, #4]
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003ba4:	8883      	ldrh	r3, [r0, #4]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	4319      	orrs	r1, r3
 8003baa:	8081      	strh	r1, [r0, #4]
 8003bac:	4770      	bx	lr

08003bae <TIM_SelectSlaveMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8003bae:	8903      	ldrh	r3, [r0, #8]
 8003bb0:	f023 0307 	bic.w	r3, r3, #7
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	8103      	strh	r3, [r0, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8003bba:	8903      	ldrh	r3, [r0, #8]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4319      	orrs	r1, r3
 8003bc0:	8101      	strh	r1, [r0, #8]
 8003bc2:	4770      	bx	lr

08003bc4 <TIM_SelectMasterSlaveMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8003bc4:	8903      	ldrh	r3, [r0, #8]
 8003bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8003bd0:	8903      	ldrh	r3, [r0, #8]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	4319      	orrs	r1, r3
 8003bd6:	8101      	strh	r1, [r0, #8]
 8003bd8:	4770      	bx	lr

08003bda <TIM_SetCounter>:
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003bda:	8481      	strh	r1, [r0, #36]	; 0x24
 8003bdc:	4770      	bx	lr

08003bde <TIM_SetAutoreload>:
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8003bde:	8581      	strh	r1, [r0, #44]	; 0x2c
 8003be0:	4770      	bx	lr

08003be2 <TIM_SetCompare1>:
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8003be2:	8681      	strh	r1, [r0, #52]	; 0x34
 8003be4:	4770      	bx	lr

08003be6 <TIM_SetCompare2>:
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8003be6:	8701      	strh	r1, [r0, #56]	; 0x38
 8003be8:	4770      	bx	lr

08003bea <TIM_SetCompare3>:
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8003bea:	8781      	strh	r1, [r0, #60]	; 0x3c
 8003bec:	4770      	bx	lr

08003bee <TIM_SetCompare4>:
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8003bee:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_SetIC1Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8003bf4:	8b03      	ldrh	r3, [r0, #24]
 8003bf6:	f023 030c 	bic.w	r3, r3, #12
 8003bfa:	041b      	lsls	r3, r3, #16
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003c00:	8b03      	ldrh	r3, [r0, #24]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	4319      	orrs	r1, r3
 8003c06:	8301      	strh	r1, [r0, #24]
 8003c08:	4770      	bx	lr

08003c0a <TIM_SetIC2Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8003c0a:	8b03      	ldrh	r3, [r0, #24]
 8003c0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c10:	041b      	lsls	r3, r3, #16
 8003c12:	0c1b      	lsrs	r3, r3, #16
 8003c14:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8003c16:	8b03      	ldrh	r3, [r0, #24]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003c1e:	b289      	uxth	r1, r1
 8003c20:	8301      	strh	r1, [r0, #24]
 8003c22:	4770      	bx	lr

08003c24 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	460c      	mov	r4, r1
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003c28:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003c2a:	88a2      	ldrh	r2, [r4, #4]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003c2c:	2900      	cmp	r1, #0
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003c2e:	f8b4 e000 	ldrh.w	lr, [r4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8003c32:	bf0c      	ite	eq
 8003c34:	2602      	moveq	r6, #2
 8003c36:	2600      	movne	r6, #0
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003c38:	2a01      	cmp	r2, #1
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2702      	moveq	r7, #2
 8003c3e:	2701      	movne	r7, #1
 8003c40:	8923      	ldrh	r3, [r4, #8]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003c42:	f1be 0f00 	cmp.w	lr, #0
 8003c46:	d10e      	bne.n	8003c66 <TIM_PWMIConfig+0x42>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003c48:	f7ff fac2 	bl	80031d0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c4c:	88e1      	ldrh	r1, [r4, #6]
 8003c4e:	f7ff ffd1 	bl	8003bf4 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003c52:	4631      	mov	r1, r6
 8003c54:	8923      	ldrh	r3, [r4, #8]
 8003c56:	463a      	mov	r2, r7
 8003c58:	f7ff faee 	bl	8003238 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c5c:	88e1      	ldrh	r1, [r4, #6]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c62:	f7ff bfd2 	b.w	8003c0a <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003c66:	f7ff fae7 	bl	8003238 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c6a:	88e1      	ldrh	r1, [r4, #6]
 8003c6c:	f7ff ffcd 	bl	8003c0a <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003c70:	4631      	mov	r1, r6
 8003c72:	8923      	ldrh	r3, [r4, #8]
 8003c74:	463a      	mov	r2, r7
 8003c76:	f7ff faab 	bl	80031d0 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c7a:	88e1      	ldrh	r1, [r4, #6]
  }
}
 8003c7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c80:	f7ff bfb8 	b.w	8003bf4 <TIM_SetIC1Prescaler>

08003c84 <TIM_SetIC3Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8003c84:	8b83      	ldrh	r3, [r0, #28]
 8003c86:	f023 030c 	bic.w	r3, r3, #12
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003c90:	8b83      	ldrh	r3, [r0, #28]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	4319      	orrs	r1, r3
 8003c96:	8381      	strh	r1, [r0, #28]
 8003c98:	4770      	bx	lr

08003c9a <TIM_SetIC4Prescaler>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8003c9a:	8b83      	ldrh	r3, [r0, #28]
 8003c9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003ca6:	8b83      	ldrh	r3, [r0, #28]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003cae:	b289      	uxth	r1, r1
 8003cb0:	8381      	strh	r1, [r0, #28]
 8003cb2:	4770      	bx	lr

08003cb4 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003cb6:	880e      	ldrh	r6, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003cb8:	460d      	mov	r5, r1
 8003cba:	890b      	ldrh	r3, [r1, #8]
 8003cbc:	888a      	ldrh	r2, [r1, #4]
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	8849      	ldrh	r1, [r1, #2]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003cc2:	b936      	cbnz	r6, 8003cd2 <TIM_ICInit+0x1e>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003cc4:	f7ff fa84 	bl	80031d0 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cc8:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003cca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cce:	f7ff bf91 	b.w	8003bf4 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8003cd2:	2e04      	cmp	r6, #4
 8003cd4:	d106      	bne.n	8003ce4 <TIM_ICInit+0x30>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003cd6:	f7ff faaf 	bl	8003238 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cda:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003cdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003ce0:	f7ff bf93 	b.w	8003c0a <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003ce4:	2e08      	cmp	r6, #8
 8003ce6:	88ef      	ldrh	r7, [r5, #6]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8003ce8:	8c00      	ldrh	r0, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003cea:	d139      	bne.n	8003d60 <TIM_ICInit+0xac>
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8003cec:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003cf0:	0400      	lsls	r0, r0, #16
 8003cf2:	0c00      	lsrs	r0, r0, #16
 8003cf4:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cf6:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8003cf8:	8c20      	ldrh	r0, [r4, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
 8003cfa:	b2b6      	uxth	r6, r6
 8003cfc:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 8003d00:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 8003d04:	b29b      	uxth	r3, r3
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003d06:	431a      	orrs	r2, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d08:	4b35      	ldr	r3, [pc, #212]	; (8003de0 <TIM_ICInit+0x12c>)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8003d0a:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d0c:	429c      	cmp	r4, r3
 8003d0e:	d012      	beq.n	8003d36 <TIM_ICInit+0x82>
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	429c      	cmp	r4, r3
 8003d16:	d00e      	beq.n	8003d36 <TIM_ICInit+0x82>
 8003d18:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003d1c:	d00b      	beq.n	8003d36 <TIM_ICInit+0x82>
 8003d1e:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8003d22:	429c      	cmp	r4, r3
 8003d24:	d007      	beq.n	8003d36 <TIM_ICInit+0x82>
 8003d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	d003      	beq.n	8003d36 <TIM_ICInit+0x82>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d107      	bne.n	8003d46 <TIM_ICInit+0x92>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003d36:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8003d3a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8003d3e:	b280      	uxth	r0, r0
 8003d40:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003d44:	e004      	b.n	8003d50 <TIM_ICInit+0x9c>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d46:	f420 6320 	bic.w	r3, r0, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8003d4a:	f441 7080 	orr.w	r0, r1, #256	; 0x100
 8003d4e:	4318      	orrs	r0, r3
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d50:	83a2      	strh	r2, [r4, #28]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d52:	4639      	mov	r1, r7
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 8003d54:	8420      	strh	r0, [r4, #32]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d56:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003d58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d5c:	f7ff bf92 	b.w	8003c84 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8003d60:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003d64:	0400      	lsls	r0, r0, #16
 8003d66:	0c00      	lsrs	r0, r0, #16
 8003d68:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d6a:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8003d6c:	f8b4 e020 	ldrh.w	lr, [r4, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8003d70:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8003d74:	052d      	lsls	r5, r5, #20
 8003d76:	0d2d      	lsrs	r5, r5, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003d78:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d7c:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <TIM_ICInit+0x12c>)
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003d7e:	ea45 3303 	orr.w	r3, r5, r3, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d82:	4294      	cmp	r4, r2
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8003d84:	fa1f fe8e 	uxth.w	lr, lr
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003d88:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d8a:	d012      	beq.n	8003db2 <TIM_ICInit+0xfe>
 8003d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d90:	4294      	cmp	r4, r2
 8003d92:	d00e      	beq.n	8003db2 <TIM_ICInit+0xfe>
 8003d94:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003d98:	d00b      	beq.n	8003db2 <TIM_ICInit+0xfe>
 8003d9a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003d9e:	4294      	cmp	r4, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_ICInit+0xfe>
 8003da2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003da6:	4294      	cmp	r4, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_ICInit+0xfe>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003daa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dae:	4294      	cmp	r4, r2
 8003db0:	d107      	bne.n	8003dc2 <TIM_ICInit+0x10e>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003db2:	f42e 5000 	bic.w	r0, lr, #8192	; 0x2000
 8003db6:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 8003dba:	b280      	uxth	r0, r0
 8003dbc:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8003dc0:	e006      	b.n	8003dd0 <TIM_ICInit+0x11c>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8003dc2:	f647 52ff 	movw	r2, #32255	; 0x7dff
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8003dc6:	f441 5080 	orr.w	r0, r1, #4096	; 0x1000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8003dca:	ea0e 0202 	and.w	r2, lr, r2
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8003dce:	4310      	orrs	r0, r2
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dd0:	83a3      	strh	r3, [r4, #28]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003dd2:	4639      	mov	r1, r7
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 8003dd4:	8420      	strh	r0, [r4, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003dd6:	4620      	mov	r0, r4
  }
}
 8003dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003ddc:	f7ff bf5d 	b.w	8003c9a <TIM_SetIC4Prescaler>
 8003de0:	40012c00 	.word	0x40012c00

08003de4 <TIM_SetClockDivision>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8003de4:	8803      	ldrh	r3, [r0, #0]
 8003de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	8003      	strh	r3, [r0, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8003df0:	8803      	ldrh	r3, [r0, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4319      	orrs	r1, r3
 8003df6:	8001      	strh	r1, [r0, #0]
 8003df8:	4770      	bx	lr

08003dfa <TIM_GetCapture1>:
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003dfa:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 8003dfc:	b280      	uxth	r0, r0
 8003dfe:	4770      	bx	lr

08003e00 <TIM_GetCapture2>:
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003e00:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 8003e02:	b280      	uxth	r0, r0
 8003e04:	4770      	bx	lr

08003e06 <TIM_GetCapture3>:
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003e06:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 8003e08:	b280      	uxth	r0, r0
 8003e0a:	4770      	bx	lr

08003e0c <TIM_GetCapture4>:
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003e0c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8003e10:	b280      	uxth	r0, r0
 8003e12:	4770      	bx	lr

08003e14 <TIM_GetCounter>:
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 8003e14:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8003e16:	b280      	uxth	r0, r0
 8003e18:	4770      	bx	lr

08003e1a <TIM_GetPrescaler>:
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8003e1a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8003e1c:	b280      	uxth	r0, r0
 8003e1e:	4770      	bx	lr

08003e20 <TIM_GetFlagStatus>:
  ITStatus bitstatus = RESET;  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003e20:	8a03      	ldrh	r3, [r0, #16]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8003e22:	4219      	tst	r1, r3
}
 8003e24:	bf14      	ite	ne
 8003e26:	2001      	movne	r0, #1
 8003e28:	2000      	moveq	r0, #0
 8003e2a:	4770      	bx	lr

08003e2c <TIM_ClearFlag>:
 8003e2c:	43c9      	mvns	r1, r1
 8003e2e:	b289      	uxth	r1, r1
 8003e30:	8201      	strh	r1, [r0, #16]
 8003e32:	4770      	bx	lr

08003e34 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003e34:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8003e36:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003e38:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8003e3c:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003e3e:	d003      	beq.n	8003e48 <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8003e40:	4211      	tst	r1, r2
 8003e42:	bf14      	ite	ne
 8003e44:	2001      	movne	r0, #1
 8003e46:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8003e48:	4770      	bx	lr

08003e4a <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003e4a:	43c9      	mvns	r1, r1
 8003e4c:	b289      	uxth	r1, r1
 8003e4e:	8201      	strh	r1, [r0, #16]
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop

08003e54 <SDIO_DeInit>:
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
  SDIO->POWER = 0x00000000;
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <SDIO_DeInit+0x1c>)
  SDIO->ARG = 0x00000000;
  SDIO->CMD = 0x00000000;
  SDIO->DTIMER = 0x00000000;
  SDIO->DLEN = 0x00000000;
  SDIO->DCTRL = 0x00000000;
  SDIO->ICR = 0x00C007FF;
 8003e56:	4907      	ldr	r1, [pc, #28]	; (8003e74 <SDIO_DeInit+0x20>)
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
  SDIO->POWER = 0x00000000;
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
  SDIO->CLKCR = 0x00000000;
 8003e5c:	605a      	str	r2, [r3, #4]
  SDIO->ARG = 0x00000000;
 8003e5e:	609a      	str	r2, [r3, #8]
  SDIO->CMD = 0x00000000;
 8003e60:	60da      	str	r2, [r3, #12]
  SDIO->DTIMER = 0x00000000;
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24
  SDIO->DLEN = 0x00000000;
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28
  SDIO->DCTRL = 0x00000000;
 8003e66:	62da      	str	r2, [r3, #44]	; 0x2c
  SDIO->ICR = 0x00C007FF;
 8003e68:	6399      	str	r1, [r3, #56]	; 0x38
  SDIO->MASK = 0x00000000;
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40018000 	.word	0x40018000
 8003e74:	00c007ff 	.word	0x00c007ff

08003e78 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8003e78:	6843      	ldr	r3, [r0, #4]
 8003e7a:	6881      	ldr	r1, [r0, #8]
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	4319      	orrs	r1, r3
 8003e80:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8003e82:	4c08      	ldr	r4, [pc, #32]	; (8003ea4 <SDIO_Init+0x2c>)
 8003e84:	4319      	orrs	r1, r3
 8003e86:	6803      	ldr	r3, [r0, #0]
 8003e88:	6862      	ldr	r2, [r4, #4]
 8003e8a:	4319      	orrs	r1, r3
 8003e8c:	6903      	ldr	r3, [r0, #16]
 8003e8e:	4319      	orrs	r1, r3
 8003e90:	f422 43fd 	bic.w	r3, r2, #32384	; 0x7e80
 8003e94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8003e98:	7d02      	ldrb	r2, [r0, #20]
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	4313      	orrs	r3, r2
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	bd10      	pop	{r4, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40018000 	.word	0x40018000

08003ea8 <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8003eac:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8003eae:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8003eb0:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8003eb2:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8003eb4:	6103      	str	r3, [r0, #16]
 8003eb6:	4770      	bx	lr

08003eb8 <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <SDIO_ClockCmd+0x8>)
 8003eba:	6018      	str	r0, [r3, #0]
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	423000a0 	.word	0x423000a0

08003ec4 <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER &= PWR_PWRCTRL_MASK;
 8003ec4:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <SDIO_SetPowerState+0x14>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	f022 0203 	bic.w	r2, r2, #3
 8003ecc:	601a      	str	r2, [r3, #0]
  SDIO->POWER |= SDIO_PowerState;
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4310      	orrs	r0, r2
 8003ed2:	6018      	str	r0, [r3, #0]
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40018000 	.word	0x40018000

08003edc <SDIO_GetPowerState>:
  * - 0x02: Power UP
  * - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8003edc:	4b02      	ldr	r3, [pc, #8]	; (8003ee8 <SDIO_GetPowerState+0xc>)
 8003ede:	6818      	ldr	r0, [r3, #0]
}
 8003ee0:	f000 0003 	and.w	r0, r0, #3
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40018000 	.word	0x40018000

08003eec <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <SDIO_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8003eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003ef0:	b109      	cbz	r1, 8003ef6 <SDIO_ITConfig+0xa>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8003ef2:	4310      	orrs	r0, r2
 8003ef4:	e001      	b.n	8003efa <SDIO_ITConfig+0xe>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8003ef6:	ea22 0000 	bic.w	r0, r2, r0
 8003efa:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40018000 	.word	0x40018000

08003f04 <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8003f04:	4b01      	ldr	r3, [pc, #4]	; (8003f0c <SDIO_DMACmd+0x8>)
 8003f06:	6018      	str	r0, [r3, #0]
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	4230058c 	.word	0x4230058c

08003f10 <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8003f10:	6803      	ldr	r3, [r0, #0]
 8003f12:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <SDIO_SendCommand+0x28>)
  * @param  SDIO_CmdInitStruct : pointer to a SDIO_CmdInitTypeDef 
  *         structure that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8003f14:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8003f16:	6093      	str	r3, [r2, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003f18:	6881      	ldr	r1, [r0, #8]
 8003f1a:	6844      	ldr	r4, [r0, #4]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8003f1c:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003f1e:	430c      	orrs	r4, r1
 8003f20:	68c1      	ldr	r1, [r0, #12]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8003f22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003f26:	430c      	orrs	r4, r1
 8003f28:	6901      	ldr	r1, [r0, #16]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003f2e:	4321      	orrs	r1, r4
 8003f30:	430b      	orrs	r3, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8003f32:	60d3      	str	r3, [r2, #12]
 8003f34:	bd10      	pop	{r4, pc}
 8003f36:	bf00      	nop
 8003f38:	40018000 	.word	0x40018000

08003f3c <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8003f40:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8003f42:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8003f44:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8003f46:	6103      	str	r3, [r0, #16]
 8003f48:	4770      	bx	lr

08003f4a <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 8003f4a:	4b02      	ldr	r3, [pc, #8]	; (8003f54 <SDIO_GetCommandResponse+0xa>)
 8003f4c:	6918      	ldr	r0, [r3, #16]
}
 8003f4e:	b2c0      	uxtb	r0, r0
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40018000 	.word	0x40018000

08003f58 <SDIO_GetResponse>:
  *     @arg SDIO_RESP3: Response Register 3
  *     @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8003f58:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8003f5e:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <SDIO_GetResponse+0x14>)
 8003f60:	4403      	add	r3, r0
 8003f62:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 8003f64:	9b01      	ldr	r3, [sp, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
}
 8003f68:	b002      	add	sp, #8
 8003f6a:	4770      	bx	lr
 8003f6c:	40018014 	.word	0x40018014

08003f70 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8003f70:	6803      	ldr	r3, [r0, #0]
 8003f72:	4909      	ldr	r1, [pc, #36]	; (8003f98 <SDIO_DataConfig+0x28>)
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure that
  *   contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8003f74:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8003f76:	624b      	str	r3, [r1, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8003f78:	6843      	ldr	r3, [r0, #4]
 8003f7a:	628b      	str	r3, [r1, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8003f7c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8003f7e:	6884      	ldr	r4, [r0, #8]

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8003f80:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8003f84:	68c3      	ldr	r3, [r0, #12]
 8003f86:	431c      	orrs	r4, r3
 8003f88:	6903      	ldr	r3, [r0, #16]
 8003f8a:	6940      	ldr	r0, [r0, #20]
 8003f8c:	4323      	orrs	r3, r4
 8003f8e:	4303      	orrs	r3, r0
 8003f90:	4313      	orrs	r3, r2
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8003f92:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	bf00      	nop
 8003f98:	40018000 	.word	0x40018000

08003f9c <SDIO_DataStructInit>:
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fa0:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6043      	str	r3, [r0, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8003fa6:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8003fa8:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8003faa:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8003fac:	6143      	str	r3, [r0, #20]
 8003fae:	4770      	bx	lr

08003fb0 <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 8003fb0:	4b01      	ldr	r3, [pc, #4]	; (8003fb8 <SDIO_GetDataCounter+0x8>)
 8003fb2:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40018000 	.word	0x40018000

08003fbc <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 8003fbc:	4b01      	ldr	r3, [pc, #4]	; (8003fc4 <SDIO_ReadData+0x8>)
 8003fbe:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8003fc2:	4770      	bx	lr
 8003fc4:	40018000 	.word	0x40018000

08003fc8 <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <SDIO_WriteData+0x8>)
 8003fca:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8003fce:	4770      	bx	lr
 8003fd0:	40018000 	.word	0x40018000

08003fd4 <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 8003fd4:	4b01      	ldr	r3, [pc, #4]	; (8003fdc <SDIO_GetFIFOCount+0x8>)
 8003fd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40018000 	.word	0x40018000

08003fe0 <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8003fe0:	4b01      	ldr	r3, [pc, #4]	; (8003fe8 <SDIO_StartSDIOReadWait+0x8>)
 8003fe2:	6018      	str	r0, [r3, #0]
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	423005a0 	.word	0x423005a0

08003fec <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8003fec:	4b01      	ldr	r3, [pc, #4]	; (8003ff4 <SDIO_StopSDIOReadWait+0x8>)
 8003fee:	6018      	str	r0, [r3, #0]
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	423005a4 	.word	0x423005a4

08003ff8 <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8003ff8:	4b01      	ldr	r3, [pc, #4]	; (8004000 <SDIO_SetSDIOReadWaitMode+0x8>)
 8003ffa:	6018      	str	r0, [r3, #0]
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	423005a8 	.word	0x423005a8

08004004 <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8004004:	4b01      	ldr	r3, [pc, #4]	; (800400c <SDIO_SetSDIOOperation+0x8>)
 8004006:	6018      	str	r0, [r3, #0]
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	423005ac 	.word	0x423005ac

08004010 <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8004010:	4b01      	ldr	r3, [pc, #4]	; (8004018 <SDIO_SendSDIOSuspendCmd+0x8>)
 8004012:	6018      	str	r0, [r3, #0]
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	423001ac 	.word	0x423001ac

0800401c <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800401c:	4b01      	ldr	r3, [pc, #4]	; (8004024 <SDIO_CommandCompletionCmd+0x8>)
 800401e:	6018      	str	r0, [r3, #0]
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	423001b0 	.word	0x423001b0

08004028 <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8004028:	f000 0001 	and.w	r0, r0, #1
 800402c:	4b02      	ldr	r3, [pc, #8]	; (8004038 <SDIO_CEATAITCmd+0x10>)
 800402e:	f080 0001 	eor.w	r0, r0, #1
 8004032:	6018      	str	r0, [r3, #0]
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	423001b4 	.word	0x423001b4

0800403c <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800403c:	4b01      	ldr	r3, [pc, #4]	; (8004044 <SDIO_SendCEATACmd+0x8>)
 800403e:	6018      	str	r0, [r3, #0]
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	423001b8 	.word	0x423001b8

08004048 <SDIO_ClearFlag>:
 8004048:	4b01      	ldr	r3, [pc, #4]	; (8004050 <SDIO_ClearFlag+0x8>)
 800404a:	6398      	str	r0, [r3, #56]	; 0x38
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40018000 	.word	0x40018000

08004054 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <SDIO_GetITStatus+0x10>)
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8004058:	4203      	tst	r3, r0
}
 800405a:	bf14      	ite	ne
 800405c:	2001      	movne	r0, #1
 800405e:	2000      	moveq	r0, #0
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40018000 	.word	0x40018000

08004068 <SDIO_GetFlagStatus>:
 8004068:	f7ff bff4 	b.w	8004054 <SDIO_GetITStatus>

0800406c <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800406c:	4b01      	ldr	r3, [pc, #4]	; (8004074 <SDIO_ClearITPendingBit+0x8>)
 800406e:	6398      	str	r0, [r3, #56]	; 0x38
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40018000 	.word	0x40018000

08004078 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8004078:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800407a:	2101      	movs	r1, #1
 800407c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004080:	f7fe fd16 	bl	8002ab0 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
}
 8004084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8004088:	2100      	movs	r1, #0
 800408a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800408e:	f7fe bd0f 	b.w	8002ab0 <RCC_APB1PeriphResetCmd>

08004092 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
 8004092:	4a03      	ldr	r2, [pc, #12]	; (80040a0 <WWDG_SetPrescaler+0xe>)
 8004094:	6853      	ldr	r3, [r2, #4]
 8004096:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800409a:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800409c:	6050      	str	r0, [r2, #4]
 800409e:	4770      	bx	lr
 80040a0:	40002c00 	.word	0x40002c00

080040a4 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80040a4:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <WWDG_SetWindowValue+0x24>)
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 80040ac:	6853      	ldr	r3, [r2, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
 80040ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 80040b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80040b6:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
 80040b8:	9b01      	ldr	r3, [sp, #4]
 80040ba:	4303      	orrs	r3, r0
 80040bc:	9301      	str	r3, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 80040be:	9b01      	ldr	r3, [sp, #4]
 80040c0:	6053      	str	r3, [r2, #4]
}
 80040c2:	b002      	add	sp, #8
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40002c00 	.word	0x40002c00

080040cc <WWDG_EnableIT>:
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 80040cc:	4b01      	ldr	r3, [pc, #4]	; (80040d4 <WWDG_EnableIT+0x8>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	4770      	bx	lr
 80040d4:	420580a4 	.word	0x420580a4

080040d8 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_Mask;
 80040d8:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <WWDG_SetCounter+0xc>)
 80040da:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80040de:	6018      	str	r0, [r3, #0]
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40002c00 	.word	0x40002c00

080040e8 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = CR_WDGA_Set | Counter;
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <WWDG_Enable+0xc>)
 80040ea:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80040ee:	6018      	str	r0, [r3, #0]
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40002c00 	.word	0x40002c00

080040f8 <WWDG_GetFlagStatus>:
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  return (FlagStatus)(WWDG->SR);
 80040f8:	4b01      	ldr	r3, [pc, #4]	; (8004100 <WWDG_GetFlagStatus+0x8>)
 80040fa:	6898      	ldr	r0, [r3, #8]
}
 80040fc:	b2c0      	uxtb	r0, r0
 80040fe:	4770      	bx	lr
 8004100:	40002c00 	.word	0x40002c00

08004104 <WWDG_ClearFlag>:
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
 8004104:	4b01      	ldr	r3, [pc, #4]	; (800410c <WWDG_ClearFlag+0x8>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
 800410a:	4770      	bx	lr
 800410c:	40002c00 	.word	0x40002c00

08004110 <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 8004110:	4b01      	ldr	r3, [pc, #4]	; (8004118 <DBGMCU_GetREVID+0x8>)
 8004112:	6818      	ldr	r0, [r3, #0]
}
 8004114:	0c00      	lsrs	r0, r0, #16
 8004116:	4770      	bx	lr
 8004118:	e0042000 	.word	0xe0042000

0800411c <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <DBGMCU_GetDEVID+0xc>)
 800411e:	6818      	ldr	r0, [r3, #0]
}
 8004120:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e0042000 	.word	0xe0042000

0800412c <DBGMCU_Config>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <DBGMCU_Config+0x14>)
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800412e:	685a      	ldr	r2, [r3, #4]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004130:	b109      	cbz	r1, 8004136 <DBGMCU_Config+0xa>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8004132:	4310      	orrs	r0, r2
 8004134:	e001      	b.n	800413a <DBGMCU_Config+0xe>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8004136:	ea22 0000 	bic.w	r0, r2, r0
 800413a:	6058      	str	r0, [r3, #4]
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e0042000 	.word	0xe0042000

08004144 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004144:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8004148:	4b02      	ldr	r3, [pc, #8]	; (8004154 <NVIC_PriorityGroupConfig+0x10>)
 800414a:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800414e:	60d8      	str	r0, [r3, #12]
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004158:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800415a:	b510      	push	{r4, lr}
 800415c:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800415e:	b30a      	cbz	r2, 80041a4 <NVIC_Init+0x4c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <NVIC_Init+0x64>)

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004162:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004166:	68d1      	ldr	r1, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004168:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800416a:	43c9      	mvns	r1, r1
 800416c:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 8004170:	f1c1 0404 	rsb	r4, r1, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004174:	fa02 f404 	lsl.w	r4, r2, r4
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004178:	220f      	movs	r2, #15
 800417a:	40ca      	lsrs	r2, r1
 800417c:	7881      	ldrb	r1, [r0, #2]
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800417e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004182:	400a      	ands	r2, r1
 8004184:	4322      	orrs	r2, r4
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800418e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004190:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004192:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004194:	f003 031f 	and.w	r3, r3, #31
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <NVIC_Init+0x68>)
 800419e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80041a2:	bd10      	pop	{r4, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80041a4:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80041a6:	2101      	movs	r1, #1
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <NVIC_Init+0x68>)
 80041b2:	3220      	adds	r2, #32
 80041b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	bf00      	nop
 80041bc:	e000ed00 	.word	0xe000ed00
 80041c0:	e000e100 	.word	0xe000e100

080041c4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80041c4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80041c8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80041cc:	4b01      	ldr	r3, [pc, #4]	; (80041d4 <NVIC_SetVectorTable+0x10>)
 80041ce:	4308      	orrs	r0, r1
 80041d0:	6098      	str	r0, [r3, #8]
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80041da:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80041dc:	b109      	cbz	r1, 80041e2 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 80041de:	4310      	orrs	r0, r2
 80041e0:	e001      	b.n	80041e6 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80041e2:	ea22 0000 	bic.w	r0, r2, r0
 80041e6:	6118      	str	r0, [r3, #16]
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80041f2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	bf0c      	ite	eq
 80041f8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80041fc:	f022 0204 	bicne.w	r2, r2, #4
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	4770      	bx	lr
 8004204:	e000e010 	.word	0xe000e010

08004208 <led_cb(std_msgs::UInt8 const&)>:
float wheelSeperation;

ros::NodeHandle nh;

void led_cb( const std_msgs::UInt8& cmd_msg){
  led_set(cmd_msg.data);
 8004208:	7900      	ldrb	r0, [r0, #4]
 800420a:	f7fc b8fb 	b.w	8000404 <led_set>

0800420e <motor_cb(roberto_msgs::MotorState const&)>:
}



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 800420e:	b570      	push	{r4, r5, r6, lr}
  if(cmd_msg.mode == cmd_msg.DRIVE_MODE_AUTO){

  }else if(cmd_msg.mode == cmd_msg.DRIVE_MODE_PIVOT){
 8004210:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
  led_set(cmd_msg.data);
}



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 8004214:	4605      	mov	r5, r0
  if(cmd_msg.mode == cmd_msg.DRIVE_MODE_AUTO){

  }else if(cmd_msg.mode == cmd_msg.DRIVE_MODE_PIVOT){
 8004216:	2b01      	cmp	r3, #1
 8004218:	d12e      	bne.n	8004278 <motor_cb(roberto_msgs::MotorState const&)+0x6a>
    front_right->setReference(cmd_msg.speed);
 800421a:	4c18      	ldr	r4, [pc, #96]	; (800427c <motor_cb(roberto_msgs::MotorState const&)+0x6e>)
 800421c:	6a29      	ldr	r1, [r5, #32]
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	6803      	ldr	r3, [r0, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	4798      	blx	r3
    front_left->setReference(cmd_msg.speed);
 8004226:	6860      	ldr	r0, [r4, #4]
 8004228:	6a29      	ldr	r1, [r5, #32]
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	4798      	blx	r3
    rear_right->setReference(cmd_msg.speed);
 8004230:	68a0      	ldr	r0, [r4, #8]
 8004232:	6a29      	ldr	r1, [r5, #32]
 8004234:	6803      	ldr	r3, [r0, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	4798      	blx	r3
    rear_left->setReference(cmd_msg.speed);
 800423a:	68e0      	ldr	r0, [r4, #12]
 800423c:	6a29      	ldr	r1, [r5, #32]
 800423e:	6803      	ldr	r3, [r0, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4798      	blx	r3
    float h = (cmd_msg.heading_angle+1.0)*90;             //[0-2]*90 = [0-180]
 8004244:	69a8      	ldr	r0, [r5, #24]
 8004246:	f000 fdcd 	bl	8004de4 <__aeabi_f2d>
 800424a:	2200      	movs	r2, #0
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <motor_cb(roberto_msgs::MotorState const&)+0x72>)
 800424e:	f000 fc6b 	bl	8004b28 <__adddf3>
 8004252:	2200      	movs	r2, #0
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <motor_cb(roberto_msgs::MotorState const&)+0x76>)
 8004256:	f000 fe19 	bl	8004e8c <__aeabi_dmul>
 800425a:	f001 f8d9 	bl	8005410 <__aeabi_d2f>
 800425e:	4605      	mov	r5, r0
    servo_left->setReference(h);
 8004260:	6920      	ldr	r0, [r4, #16]
 8004262:	4629      	mov	r1, r5
 8004264:	6803      	ldr	r3, [r0, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	4798      	blx	r3
    servo_right->setReference(h);
 800426a:	6960      	ldr	r0, [r4, #20]
 800426c:	4629      	mov	r1, r5
  }else if(cmd_msg.mode == cmd_msg.DRIVE_MODE_SPIN){

  }else if(cmd_msg.mode == cmd_msg.DRIVE_MODE_SIDEWAYS){

  }
}
 800426e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    front_left->setReference(cmd_msg.speed);
    rear_right->setReference(cmd_msg.speed);
    rear_left->setReference(cmd_msg.speed);
    float h = (cmd_msg.heading_angle+1.0)*90;             //[0-2]*90 = [0-180]
    servo_left->setReference(h);
    servo_right->setReference(h);
 8004272:	6803      	ldr	r3, [r0, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	4718      	bx	r3
 8004278:	bd70      	pop	{r4, r5, r6, pc}
 800427a:	bf00      	nop
 800427c:	200000bc 	.word	0x200000bc
 8004280:	3ff00000 	.word	0x3ff00000
 8004284:	40568000 	.word	0x40568000

08004288 <USART1_IRQHandler>:
};



extern "C"{
  void USART1_IRQHandler(void){
 8004288:	b538      	push	{r3, r4, r5, lr}

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET 
 800428a:	f240 5125 	movw	r1, #1317	; 0x525
 800428e:	480f      	ldr	r0, [pc, #60]	; (80042cc <USART1_IRQHandler+0x44>)
 8004290:	f7fe ff76 	bl	8003180 <USART_GetITStatus>
      && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){
 8004294:	b140      	cbz	r0, 80042a8 <USART1_IRQHandler+0x20>
 8004296:	4c0e      	ldr	r4, [pc, #56]	; (80042d0 <USART1_IRQHandler+0x48>)
 8004298:	69a3      	ldr	r3, [r4, #24]
 800429a:	69e2      	ldr	r2, [r4, #28]
 800429c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80042a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d104      	bne.n	80042b2 <USART1_IRQHandler+0x2a>
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear inerrupt flag by reading byte
    }
  }   
 80042a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

      USART_FIFO[USART_CNTIN] = USART_ReceiveData(USART1);
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear inerrupt flag by reading byte
 80042ac:	4807      	ldr	r0, [pc, #28]	; (80042cc <USART1_IRQHandler+0x44>)
 80042ae:	f7fe beee 	b.w	800308e <USART_ReceiveData>
  void USART1_IRQHandler(void){

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET 
      && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){

      USART_FIFO[USART_CNTIN] = USART_ReceiveData(USART1);
 80042b2:	4806      	ldr	r0, [pc, #24]	; (80042cc <USART1_IRQHandler+0x44>)
 80042b4:	69e5      	ldr	r5, [r4, #28]
 80042b6:	f7fe feea 	bl	800308e <USART_ReceiveData>
 80042ba:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80042be:	8428      	strh	r0, [r5, #32]
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
 80042c0:	69e3      	ldr	r3, [r4, #28]
 80042c2:	3301      	adds	r3, #1
 80042c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c8:	61e3      	str	r3, [r4, #28]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	40013800 	.word	0x40013800
 80042d0:	200000bc 	.word	0x200000bc

080042d4 <assert_failed(unsigned char*, unsigned long)>:
    }
  }
  return 0;
}

void assert_failed(uint8_t* file, uint32_t line){
 80042d4:	b500      	push	{lr}
 80042d6:	b0a7      	sub	sp, #156	; 0x9c
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  char str[150];

  sprintf(str, "Wrong parameters value: file %s on line %d\r\n", file, line);
 80042d8:	460b      	mov	r3, r1
 80042da:	4602      	mov	r2, r0
 80042dc:	4908      	ldr	r1, [pc, #32]	; (8004300 <assert_failed(unsigned char*, unsigned long)+0x2c>)
 80042de:	4668      	mov	r0, sp
 80042e0:	f00d f898 	bl	8011414 <siprintf>
  nh.logerror(str);
 80042e4:	4669      	mov	r1, sp
 80042e6:	4807      	ldr	r0, [pc, #28]	; (8004304 <assert_failed(unsigned char*, unsigned long)+0x30>)
 80042e8:	f00b f9fa 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  while (1){
    debug_toggle();
 80042ec:	f7fc f8a8 	bl	8000440 <debug_toggle>
    delay(100);
 80042f0:	2064      	movs	r0, #100	; 0x64
 80042f2:	f7fc f9e5 	bl	80006c0 <delay>
    nh.spinOnce();
 80042f6:	4803      	ldr	r0, [pc, #12]	; (8004304 <assert_failed(unsigned char*, unsigned long)+0x30>)
 80042f8:	f00b fb54 	bl	800f9a4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>
 80042fc:	e7f6      	b.n	80042ec <assert_failed(unsigned char*, unsigned long)+0x18>
 80042fe:	bf00      	nop
 8004300:	080134c3 	.word	0x080134c3
 8004304:	2000050c 	.word	0x2000050c

08004308 <motor::createMotor(motorSettings*)>:
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 8004308:	b538      	push	{r3, r4, r5, lr}
    switch (settings->m_motorType) {
 800430a:	6803      	ldr	r3, [r0, #0]
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 800430c:	4605      	mov	r5, r0
    switch (settings->m_motorType) {
 800430e:	2b01      	cmp	r3, #1
 8004310:	d002      	beq.n	8004318 <motor::createMotor(motorSettings*)+0x10>
 8004312:	2b02      	cmp	r3, #2
 8004314:	d00e      	beq.n	8004334 <motor::createMotor(motorSettings*)+0x2c>
 8004316:	e015      	b.n	8004344 <motor::createMotor(motorSettings*)+0x3c>
	    case MOTOR_TYPE_SERVO:
	    	settings->m_ServoLimitMax = 6800;
 8004318:	f641 2390 	movw	r3, #6800	; 0x1a90
 800431c:	6103      	str	r3, [r0, #16]
  			settings->m_ServoLimitMin = 2000;
 800431e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004322:	6143      	str	r3, [r0, #20]
	        return new servo(settings);
 8004324:	200c      	movs	r0, #12
 8004326:	f00c fb1f 	bl	8010968 <operator new(unsigned int)>
 800432a:	4629      	mov	r1, r5
 800432c:	4604      	mov	r4, r0
 800432e:	f000 f935 	bl	800459c <servo::servo(motorSettings*)>
 8004332:	e009      	b.n	8004348 <motor::createMotor(motorSettings*)+0x40>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);
 8004334:	202c      	movs	r0, #44	; 0x2c
 8004336:	f00c fb17 	bl	8010968 <operator new(unsigned int)>
 800433a:	4629      	mov	r1, r5
 800433c:	4604      	mov	r4, r0
 800433e:	f000 fa07 	bl	8004750 <DCMotor::DCMotor(motorSettings*)>
 8004342:	e001      	b.n	8004348 <motor::createMotor(motorSettings*)+0x40>

	    default:
	        return 0;
 8004344:	2000      	movs	r0, #0
 8004346:	bd38      	pop	{r3, r4, r5, pc}
motor *motor::createMotor(motorSettings *settings){
    switch (settings->m_motorType) {
	    case MOTOR_TYPE_SERVO:
	    	settings->m_ServoLimitMax = 6800;
  			settings->m_ServoLimitMin = 2000;
	        return new servo(settings);
 8004348:	4620      	mov	r0, r4
 800434a:	bd38      	pop	{r3, r4, r5, pc}
 800434c:	e7ff      	b.n	800434e <motor::createMotor(motorSettings*)+0x46>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);
 800434e:	4620      	mov	r0, r4
 8004350:	f00b ffee 	bl	8010330 <operator delete(void*)>
 8004354:	f00c fb80 	bl	8010a58 <__cxa_end_cleanup>

08004358 <motor::motor(motorSettings*)>:
	        return 0;
    }
}


motor::motor(motorSettings *settings){
 8004358:	4a01      	ldr	r2, [pc, #4]	; (8004360 <motor::motor(motorSettings*)+0x8>)
    m_settings = settings;
 800435a:	6041      	str	r1, [r0, #4]
	        return 0;
    }
}


motor::motor(motorSettings *settings){
 800435c:	6002      	str	r2, [r0, #0]
    m_settings = settings;
}
 800435e:	4770      	bx	lr
 8004360:	0801251c 	.word	0x0801251c

08004364 <motor::~motor()>:

motor::~motor()
{
 8004364:	4770      	bx	lr

08004366 <motor::~motor()>:

motor::motor(motorSettings *settings){
    m_settings = settings;
}

motor::~motor()
 8004366:	b510      	push	{r4, lr}
 8004368:	4604      	mov	r4, r0
{
 800436a:	f00b ffe1 	bl	8010330 <operator delete(void*)>
 800436e:	4620      	mov	r0, r4
 8004370:	bd10      	pop	{r4, pc}
 8004372:	bf00      	nop

08004374 <servo::setReference(float)>:
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	return true;
}

void servo::setReference(float setPoint){
 8004374:	b510      	push	{r4, lr}
 8004376:	4604      	mov	r4, r0
	pos = (int)setPoint;
 8004378:	4608      	mov	r0, r1
 800437a:	f001 fb6d 	bl	8005a58 <__aeabi_f2iz>
	if(pos > 180){
 800437e:	28b4      	cmp	r0, #180	; 0xb4
 8004380:	dd01      	ble.n	8004386 <servo::setReference(float)+0x12>
		pos = 180;
 8004382:	23b4      	movs	r3, #180	; 0xb4
 8004384:	e004      	b.n	8004390 <servo::setReference(float)+0x1c>
	}else if(pos < 0){
 8004386:	2800      	cmp	r0, #0
 8004388:	db01      	blt.n	800438e <servo::setReference(float)+0x1a>

	return true;
}

void servo::setReference(float setPoint){
	pos = (int)setPoint;
 800438a:	60a0      	str	r0, [r4, #8]
 800438c:	bd10      	pop	{r4, pc}
	if(pos > 180){
		pos = 180;
	}else if(pos < 0){
		pos = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	60a3      	str	r3, [r4, #8]
 8004392:	bd10      	pop	{r4, pc}

08004394 <servo::getReference()>:
	}
}

float servo::getReference(){
 8004394:	b508      	push	{r3, lr}
	return (float)pos;
 8004396:	6880      	ldr	r0, [r0, #8]
 8004398:	f001 f944 	bl	8005624 <__aeabi_i2f>
}
 800439c:	bd08      	pop	{r3, pc}

0800439e <servo::motorName()>:
char* servo::motorName(){
	return m_settings->m_motorName;
 800439e:	6843      	ldr	r3, [r0, #4]
}
 80043a0:	6858      	ldr	r0, [r3, #4]
 80043a2:	4770      	bx	lr

080043a4 <servo::update(float, bool)>:

float servo::update(float dt, bool connected){
	float LPF_Beta = 0.06;
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;
 80043a4:	6842      	ldr	r2, [r0, #4]
}
char* servo::motorName(){
	return m_settings->m_motorName;
}

float servo::update(float dt, bool connected){
 80043a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	float LPF_Beta = 0.06;
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;
 80043a8:	6911      	ldr	r1, [r2, #16]
 80043aa:	6955      	ldr	r5, [r2, #20]
 80043ac:	6880      	ldr	r0, [r0, #8]
 80043ae:	1b49      	subs	r1, r1, r5
 80043b0:	4341      	muls	r1, r0
 80043b2:	24b4      	movs	r4, #180	; 0xb4
 80043b4:	fb91 f1f4 	sdiv	r1, r1, r4
 80043b8:	194c      	adds	r4, r1, r5
	int curr, newVal;
	switch(m_settings->m_TimerChannel){
 80043ba:	68d1      	ldr	r1, [r2, #12]
 80043bc:	3901      	subs	r1, #1
 80043be:	2903      	cmp	r1, #3
 80043c0:	d860      	bhi.n	8004484 <servo::update(float, bool)+0xe0>
 80043c2:	e8df f001 	tbb	[pc, r1]
 80043c6:	1902      	.short	0x1902
 80043c8:	4730      	.short	0x4730
		case 1:
			curr = (m_settings->m_Timer)->CCR1;
 80043ca:	6896      	ldr	r6, [r2, #8]
 80043cc:	8eb5      	ldrh	r5, [r6, #52]	; 0x34
 80043ce:	b2ad      	uxth	r5, r5
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 80043d0:	4628      	mov	r0, r5
 80043d2:	f001 f927 	bl	8005624 <__aeabi_i2f>
 80043d6:	4607      	mov	r7, r0
 80043d8:	1b28      	subs	r0, r5, r4
 80043da:	f001 f923 	bl	8005624 <__aeabi_i2f>
 80043de:	492b      	ldr	r1, [pc, #172]	; (800448c <servo::update(float, bool)+0xe8>)
 80043e0:	f001 f974 	bl	80056cc <__aeabi_fmul>
 80043e4:	4601      	mov	r1, r0
 80043e6:	4638      	mov	r0, r7
 80043e8:	f001 f866 	bl	80054b8 <__aeabi_fsub>
 80043ec:	f001 fb34 	bl	8005a58 <__aeabi_f2iz>
			(m_settings->m_Timer)->CCR1 = newVal;
 80043f0:	b282      	uxth	r2, r0
	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;
	int curr, newVal;
	switch(m_settings->m_TimerChannel){
		case 1:
			curr = (m_settings->m_Timer)->CCR1;
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 80043f2:	4603      	mov	r3, r0
			(m_settings->m_Timer)->CCR1 = newVal;
 80043f4:	86b2      	strh	r2, [r6, #52]	; 0x34
			break;
 80043f6:	e045      	b.n	8004484 <servo::update(float, bool)+0xe0>
		case 2:
			curr = (m_settings->m_Timer)->CCR2;
 80043f8:	6896      	ldr	r6, [r2, #8]
 80043fa:	8f35      	ldrh	r5, [r6, #56]	; 0x38
 80043fc:	b2ad      	uxth	r5, r5
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 80043fe:	4628      	mov	r0, r5
 8004400:	f001 f910 	bl	8005624 <__aeabi_i2f>
 8004404:	4607      	mov	r7, r0
 8004406:	1b28      	subs	r0, r5, r4
 8004408:	f001 f90c 	bl	8005624 <__aeabi_i2f>
 800440c:	491f      	ldr	r1, [pc, #124]	; (800448c <servo::update(float, bool)+0xe8>)
 800440e:	f001 f95d 	bl	80056cc <__aeabi_fmul>
 8004412:	4601      	mov	r1, r0
 8004414:	4638      	mov	r0, r7
 8004416:	f001 f84f 	bl	80054b8 <__aeabi_fsub>
 800441a:	f001 fb1d 	bl	8005a58 <__aeabi_f2iz>
			(m_settings->m_Timer)->CCR2 = newVal;
 800441e:	b282      	uxth	r2, r0
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
			(m_settings->m_Timer)->CCR1 = newVal;
			break;
		case 2:
			curr = (m_settings->m_Timer)->CCR2;
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 8004420:	4603      	mov	r3, r0
			(m_settings->m_Timer)->CCR2 = newVal;
 8004422:	8732      	strh	r2, [r6, #56]	; 0x38
			break;
 8004424:	e02e      	b.n	8004484 <servo::update(float, bool)+0xe0>
		case 3:
			curr = (m_settings->m_Timer)->CCR3;
 8004426:	6896      	ldr	r6, [r2, #8]
 8004428:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
 800442a:	b2ad      	uxth	r5, r5
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 800442c:	4628      	mov	r0, r5
 800442e:	f001 f8f9 	bl	8005624 <__aeabi_i2f>
 8004432:	4607      	mov	r7, r0
 8004434:	1b28      	subs	r0, r5, r4
 8004436:	f001 f8f5 	bl	8005624 <__aeabi_i2f>
 800443a:	4914      	ldr	r1, [pc, #80]	; (800448c <servo::update(float, bool)+0xe8>)
 800443c:	f001 f946 	bl	80056cc <__aeabi_fmul>
 8004440:	4601      	mov	r1, r0
 8004442:	4638      	mov	r0, r7
 8004444:	f001 f838 	bl	80054b8 <__aeabi_fsub>
 8004448:	f001 fb06 	bl	8005a58 <__aeabi_f2iz>
			(m_settings->m_Timer)->CCR3 = newVal;
 800444c:	b282      	uxth	r2, r0
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
			(m_settings->m_Timer)->CCR2 = newVal;
			break;
		case 3:
			curr = (m_settings->m_Timer)->CCR3;
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 800444e:	4603      	mov	r3, r0
			(m_settings->m_Timer)->CCR3 = newVal;
 8004450:	87b2      	strh	r2, [r6, #60]	; 0x3c
			break;
 8004452:	e017      	b.n	8004484 <servo::update(float, bool)+0xe0>
		case 4:
			curr = (m_settings->m_Timer)->CCR4;
 8004454:	6896      	ldr	r6, [r2, #8]
 8004456:	f8b6 5040 	ldrh.w	r5, [r6, #64]	; 0x40
 800445a:	b2ad      	uxth	r5, r5
			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 800445c:	4628      	mov	r0, r5
 800445e:	f001 f8e1 	bl	8005624 <__aeabi_i2f>
 8004462:	4607      	mov	r7, r0
 8004464:	1b28      	subs	r0, r5, r4
 8004466:	f001 f8dd 	bl	8005624 <__aeabi_i2f>
 800446a:	4908      	ldr	r1, [pc, #32]	; (800448c <servo::update(float, bool)+0xe8>)
 800446c:	f001 f92e 	bl	80056cc <__aeabi_fmul>
 8004470:	4601      	mov	r1, r0
 8004472:	4638      	mov	r0, r7
 8004474:	f001 f820 	bl	80054b8 <__aeabi_fsub>
 8004478:	f001 faee 	bl	8005a58 <__aeabi_f2iz>
 800447c:	4603      	mov	r3, r0
			(m_settings->m_Timer)->CCR4 = newVal;
 800447e:	b282      	uxth	r2, r0
 8004480:	f8a6 2040 	strh.w	r2, [r6, #64]	; 0x40
			break;
	}
	return newVal;
 8004484:	4618      	mov	r0, r3
 8004486:	f001 f8cd 	bl	8005624 <__aeabi_i2f>
 800448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448c:	3d75c28f 	.word	0x3d75c28f

08004490 <servo::~servo()>:
servo::servo(motorSettings *settings) : motor(settings)
{

}

servo::~servo()
 8004490:	b510      	push	{r4, lr}
 8004492:	4604      	mov	r4, r0
 8004494:	4b02      	ldr	r3, [pc, #8]	; (80044a0 <servo::~servo()+0x10>)
 8004496:	6003      	str	r3, [r0, #0]
 8004498:	f7ff ff64 	bl	8004364 <motor::~motor()>
{
}
 800449c:	4620      	mov	r0, r4
 800449e:	bd10      	pop	{r4, pc}
 80044a0:	08012554 	.word	0x08012554

080044a4 <servo::~servo()>:
servo::servo(motorSettings *settings) : motor(settings)
{

}

servo::~servo()
 80044a4:	b510      	push	{r4, lr}
 80044a6:	4604      	mov	r4, r0
{
}
 80044a8:	f7ff fff2 	bl	8004490 <servo::~servo()>
 80044ac:	4620      	mov	r0, r4
 80044ae:	f00b ff3f 	bl	8010330 <operator delete(void*)>
 80044b2:	4620      	mov	r0, r4
 80044b4:	bd10      	pop	{r4, pc}

080044b6 <servo::motorInit()>:

bool servo::motorInit()
{
 80044b6:	b530      	push	{r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80044b8:	6843      	ldr	r3, [r0, #4]
servo::~servo()
{
}

bool servo::motorInit()
{
 80044ba:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80044bc:	699a      	ldr	r2, [r3, #24]
servo::~servo()
{
}

bool servo::motorInit()
{
 80044be:	4604      	mov	r4, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80044c0:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80044c4:	2218      	movs	r2, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 80044c6:	69d8      	ldr	r0, [r3, #28]
{

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80044c8:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 80044cc:	4669      	mov	r1, sp

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80044ce:	2203      	movs	r2, #3
 80044d0:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 80044d4:	f7fd fe69 	bl	80021aa <GPIO_Init>




	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
 80044d8:	f64e 235f 	movw	r3, #59999	; 0xea5f
 80044dc:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
 80044e0:	2317      	movs	r3, #23
 80044e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80044e6:	6863      	ldr	r3, [r4, #4]


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80044e8:	2500      	movs	r5, #0
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80044ea:	6898      	ldr	r0, [r3, #8]
 80044ec:	a901      	add	r1, sp, #4


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80044ee:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80044f2:	f8ad 5006 	strh.w	r5, [sp, #6]

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80044f6:	f7fe ffbf 	bl	8003478 <TIM_TimeBaseInit>


	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80044fa:	a804      	add	r0, sp, #16
 80044fc:	f7ff f91e 	bl	800373c <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8004500:	2360      	movs	r3, #96	; 0x60
 8004502:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8004506:	2301      	movs	r3, #1
 8004508:	f8ad 3012 	strh.w	r3, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 800450c:	6863      	ldr	r3, [r4, #4]
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 800450e:	f8ad 5016 	strh.w	r5, [sp, #22]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 8004512:	68da      	ldr	r2, [r3, #12]

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8004514:	f8ad 5018 	strh.w	r5, [sp, #24]

	switch(m_settings->m_TimerChannel){
 8004518:	3a01      	subs	r2, #1
 800451a:	2a03      	cmp	r2, #3
 800451c:	d83b      	bhi.n	8004596 <servo::motorInit()+0xe0>
 800451e:	e8df f002 	tbb	[pc, r2]
 8004522:	0c02      	.short	0x0c02
 8004524:	2016      	.short	0x2016
		case 1:
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004526:	a904      	add	r1, sp, #16
 8004528:	6898      	ldr	r0, [r3, #8]
 800452a:	f7fe ffef 	bl	800350c <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800452e:	6863      	ldr	r3, [r4, #4]
 8004530:	2108      	movs	r1, #8
 8004532:	6898      	ldr	r0, [r3, #8]
 8004534:	f7ff fa1a 	bl	800396c <TIM_OC1PreloadConfig>
 8004538:	e01c      	b.n	8004574 <servo::motorInit()+0xbe>
			break;
		case 2:
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 800453a:	a904      	add	r1, sp, #16
 800453c:	6898      	ldr	r0, [r3, #8]
 800453e:	f7ff f829 	bl	8003594 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004542:	6863      	ldr	r3, [r4, #4]
 8004544:	2108      	movs	r1, #8
 8004546:	6898      	ldr	r0, [r3, #8]
 8004548:	f7ff fa18 	bl	800397c <TIM_OC2PreloadConfig>
 800454c:	e012      	b.n	8004574 <servo::motorInit()+0xbe>
			break;
		case 3:
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 800454e:	a904      	add	r1, sp, #16
 8004550:	6898      	ldr	r0, [r3, #8]
 8004552:	f7ff f863 	bl	800361c <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004556:	6863      	ldr	r3, [r4, #4]
 8004558:	2108      	movs	r1, #8
 800455a:	6898      	ldr	r0, [r3, #8]
 800455c:	f7ff fa18 	bl	8003990 <TIM_OC3PreloadConfig>
 8004560:	e008      	b.n	8004574 <servo::motorInit()+0xbe>
			break;
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004562:	6898      	ldr	r0, [r3, #8]
 8004564:	a904      	add	r1, sp, #16
 8004566:	f7ff f89b 	bl	80036a0 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	2108      	movs	r1, #8
 800456e:	6898      	ldr	r0, [r3, #8]
 8004570:	f7ff fa16 	bl	80039a0 <TIM_OC4PreloadConfig>
		default:
			return false;
	}


	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 8004574:	6863      	ldr	r3, [r4, #4]
 8004576:	2101      	movs	r1, #1
 8004578:	6898      	ldr	r0, [r3, #8]
 800457a:	f7ff f9c7 	bl	800390c <TIM_ARRPreloadConfig>

	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	2101      	movs	r1, #1
 8004582:	6898      	ldr	r0, [r3, #8]
 8004584:	f7ff f901 	bl	800378a <TIM_CtrlPWMOutputs>

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	2101      	movs	r1, #1
 800458c:	6898      	ldr	r0, [r3, #8]
 800458e:	f7ff f8f0 	bl	8003772 <TIM_Cmd>

	return true;
 8004592:	2001      	movs	r0, #1
 8004594:	e000      	b.n	8004598 <servo::motorInit()+0xe2>
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
			break;
		default:
			return false;
 8004596:	2000      	movs	r0, #0

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	return true;
}
 8004598:	b009      	add	sp, #36	; 0x24
 800459a:	bd30      	pop	{r4, r5, pc}

0800459c <servo::servo(motorSettings*)>:

#include "servo.h"
#include "motorSettings.h"


servo::servo(motorSettings *settings) : motor(settings)
 800459c:	b510      	push	{r4, lr}
 800459e:	4604      	mov	r4, r0
 80045a0:	f7ff feda 	bl	8004358 <motor::motor(motorSettings*)>
 80045a4:	4b01      	ldr	r3, [pc, #4]	; (80045ac <servo::servo(motorSettings*)+0x10>)
{

}
 80045a6:	4620      	mov	r0, r4

#include "servo.h"
#include "motorSettings.h"


servo::servo(motorSettings *settings) : motor(settings)
 80045a8:	6023      	str	r3, [r4, #0]
{

}
 80045aa:	bd10      	pop	{r4, pc}
 80045ac:	08012554 	.word	0x08012554

080045b0 <DCMotor::setReference(float)>:

	return true;
}

void DCMotor::setReference(float setPoint){
	speed = setPoint;
 80045b0:	6081      	str	r1, [r0, #8]
 80045b2:	4770      	bx	lr

080045b4 <DCMotor::getReference()>:
	return true;
}

float DCMotor::getReference(){
	return speed;
}
 80045b4:	6880      	ldr	r0, [r0, #8]
 80045b6:	4770      	bx	lr

080045b8 <DCMotor::motorName()>:

char* DCMotor::motorName(){
	return m_settings->m_motorName;
 80045b8:	6843      	ldr	r3, [r0, #4]
}
 80045ba:	6858      	ldr	r0, [r3, #4]
 80045bc:	4770      	bx	lr

080045be <DCMotor::~DCMotor()>:
DCMotor::DCMotor(motorSettings *settings) : motor(settings)
{

}

DCMotor::~DCMotor()
 80045be:	b510      	push	{r4, lr}
 80045c0:	4604      	mov	r4, r0
 80045c2:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <DCMotor::~DCMotor()+0x12>)
 80045c4:	6003      	str	r3, [r0, #0]
 80045c6:	f7ff fecd 	bl	8004364 <motor::~motor()>
{
}
 80045ca:	4620      	mov	r0, r4
 80045cc:	bd10      	pop	{r4, pc}
 80045ce:	bf00      	nop
 80045d0:	08012590 	.word	0x08012590

080045d4 <DCMotor::~DCMotor()>:
DCMotor::DCMotor(motorSettings *settings) : motor(settings)
{

}

DCMotor::~DCMotor()
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4604      	mov	r4, r0
{
}
 80045d8:	f7ff fff1 	bl	80045be <DCMotor::~DCMotor()>
 80045dc:	4620      	mov	r0, r4
 80045de:	f00b fea7 	bl	8010330 <operator delete(void*)>
 80045e2:	4620      	mov	r0, r4
 80045e4:	bd10      	pop	{r4, pc}

080045e6 <DCMotor::motorInit()>:

bool DCMotor::motorInit()
{
 80045e6:	b570      	push	{r4, r5, r6, lr}
 80045e8:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 80045ea:	6843      	ldr	r3, [r0, #4]
DCMotor::~DCMotor()
{
}

bool DCMotor::motorInit()
{
 80045ec:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 80045ee:	6a1a      	ldr	r2, [r3, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80045f0:	2503      	movs	r5, #3
bool DCMotor::motorInit()
{
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80045f2:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 80045f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80045f6:	4669      	mov	r1, sp

bool DCMotor::motorInit()
{
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 80045f8:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80045fc:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004600:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 8004604:	f7fd fdd1 	bl	80021aa <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 8004608:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 800460a:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 800460c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 800460e:	6b58      	ldr	r0, [r3, #52]	; 0x34
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 8004610:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004614:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004618:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 800461c:	f7fd fdc5 	bl	80021aa <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 8004620:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8004622:	2614      	movs	r6, #20
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 8004624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 8004626:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004628:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 800462a:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800462e:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8004632:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 8004636:	f7fd fdb8 	bl	80021aa <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 800463a:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 800463c:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 800463e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 8004640:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 8004642:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004646:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800464a:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 800464e:	f7fd fdac 	bl	80021aa <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 8004652:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 8004654:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 8004656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 8004658:	6c58      	ldr	r0, [r3, #68]	; 0x44
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 800465a:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800465e:	2218      	movs	r2, #24
 8004660:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004664:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 8004668:	f7fd fd9f 	bl	80021aa <GPIO_Init>

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 800466c:	6863      	ldr	r3, [r4, #4]
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 800466e:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 8004670:	6898      	ldr	r0, [r3, #8]
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <DCMotor::motorInit()+0x166>)
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 8004674:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 8004676:	4298      	cmp	r0, r3
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 8004678:	bf0c      	ite	eq
 800467a:	f247 037e 	movweq	r3, #28798	; 0x707e
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
 800467e:	f643 033f 	movwne	r3, #14399	; 0x383f
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 8004682:	f8ad 5004 	strh.w	r5, [sp, #4]

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
 8004686:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 800468a:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800468e:	f8ad 5006 	strh.w	r5, [sp, #6]

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 8004692:	f7fe fef1 	bl	8003478 <TIM_TimeBaseInit>

	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure);
 8004696:	a804      	add	r0, sp, #16
 8004698:	f7ff f850 	bl	800373c <TIM_OCStructInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800469c:	2360      	movs	r3, #96	; 0x60
 800469e:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f8ad 3012 	strh.w	r3, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = 0x00;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 80046a8:	6863      	ldr	r3, [r4, #4]
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x00;
 80046aa:	f8ad 5016 	strh.w	r5, [sp, #22]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 80046ae:	68da      	ldr	r2, [r3, #12]
	TIM_OCStructInit(&TIM_OCInitStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x00;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80046b0:	f8ad 5018 	strh.w	r5, [sp, #24]

	switch(m_settings->m_TimerChannel){
 80046b4:	3a01      	subs	r2, #1
 80046b6:	2a03      	cmp	r2, #3
 80046b8:	d844      	bhi.n	8004744 <DCMotor::motorInit()+0x15e>
 80046ba:	e8df f002 	tbb	[pc, r2]
 80046be:	0c02      	.short	0x0c02
 80046c0:	2016      	.short	0x2016
		case 1:
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80046c2:	a904      	add	r1, sp, #16
 80046c4:	6898      	ldr	r0, [r3, #8]
 80046c6:	f7fe ff21 	bl	800350c <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80046ca:	6863      	ldr	r3, [r4, #4]
 80046cc:	2108      	movs	r1, #8
 80046ce:	6898      	ldr	r0, [r3, #8]
 80046d0:	f7ff f94c 	bl	800396c <TIM_OC1PreloadConfig>
 80046d4:	e01c      	b.n	8004710 <DCMotor::motorInit()+0x12a>
			break;
		case 2:
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80046d6:	a904      	add	r1, sp, #16
 80046d8:	6898      	ldr	r0, [r3, #8]
 80046da:	f7fe ff5b 	bl	8003594 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80046de:	6863      	ldr	r3, [r4, #4]
 80046e0:	2108      	movs	r1, #8
 80046e2:	6898      	ldr	r0, [r3, #8]
 80046e4:	f7ff f94a 	bl	800397c <TIM_OC2PreloadConfig>
 80046e8:	e012      	b.n	8004710 <DCMotor::motorInit()+0x12a>
			break;
		case 3:
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80046ea:	a904      	add	r1, sp, #16
 80046ec:	6898      	ldr	r0, [r3, #8]
 80046ee:	f7fe ff95 	bl	800361c <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	2108      	movs	r1, #8
 80046f6:	6898      	ldr	r0, [r3, #8]
 80046f8:	f7ff f94a 	bl	8003990 <TIM_OC3PreloadConfig>
 80046fc:	e008      	b.n	8004710 <DCMotor::motorInit()+0x12a>
			break;
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80046fe:	6898      	ldr	r0, [r3, #8]
 8004700:	a904      	add	r1, sp, #16
 8004702:	f7fe ffcd 	bl	80036a0 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004706:	6863      	ldr	r3, [r4, #4]
 8004708:	2108      	movs	r1, #8
 800470a:	6898      	ldr	r0, [r3, #8]
 800470c:	f7ff f948 	bl	80039a0 <TIM_OC4PreloadConfig>
			break;
		default:
			return false;
	}

	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 8004710:	6863      	ldr	r3, [r4, #4]
 8004712:	2101      	movs	r1, #1
 8004714:	6898      	ldr	r0, [r3, #8]
 8004716:	f7ff f8f9 	bl	800390c <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 800471a:	6863      	ldr	r3, [r4, #4]
 800471c:	2101      	movs	r1, #1
 800471e:	6898      	ldr	r0, [r3, #8]
 8004720:	f7ff f833 	bl	800378a <TIM_CtrlPWMOutputs>

	TIM_Cmd(m_settings->m_Timer, ENABLE);
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	2101      	movs	r1, #1
 8004728:	6898      	ldr	r0, [r3, #8]
 800472a:	f7ff f822 	bl	8003772 <TIM_Cmd>

	// Initialize encoder
	initEncoder(m_settings->encoderAddr);
 800472e:	6863      	ldr	r3, [r4, #4]
	integral = 0;
	error = 0;

	wheelRadius = m_settings->wheelRadius;

	return true;
 8004730:	2001      	movs	r0, #1
char* DCMotor::motorName(){
	return m_settings->m_motorName;
}

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
 8004732:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004736:	7322      	strb	r2, [r4, #12]
	initEncoder(m_settings->encoderAddr);

	integral = 0;
	error = 0;

	wheelRadius = m_settings->wheelRadius;
 8004738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	// Initialize encoder
	initEncoder(m_settings->encoderAddr);

	integral = 0;
 800473a:	2200      	movs	r2, #0
 800473c:	62a2      	str	r2, [r4, #40]	; 0x28
	error = 0;
 800473e:	6262      	str	r2, [r4, #36]	; 0x24

	wheelRadius = m_settings->wheelRadius;
 8004740:	6123      	str	r3, [r4, #16]

	return true;
 8004742:	e000      	b.n	8004746 <DCMotor::motorInit()+0x160>
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
			break;
		default:
			return false;
 8004744:	2000      	movs	r0, #0
	error = 0;

	wheelRadius = m_settings->wheelRadius;

	return true;
}
 8004746:	b008      	add	sp, #32
 8004748:	bd70      	pop	{r4, r5, r6, pc}
 800474a:	bf00      	nop
 800474c:	40012c00 	.word	0x40012c00

08004750 <DCMotor::DCMotor(motorSettings*)>:
#define PERIOD 14399
#define PRESCALER 0
#define CLOCKDIV 0


DCMotor::DCMotor(motorSettings *settings) : motor(settings)
 8004750:	b510      	push	{r4, lr}
 8004752:	4604      	mov	r4, r0
 8004754:	f7ff fe00 	bl	8004358 <motor::motor(motorSettings*)>
 8004758:	4b01      	ldr	r3, [pc, #4]	; (8004760 <DCMotor::DCMotor(motorSettings*)+0x10>)
{

}
 800475a:	4620      	mov	r0, r4
#define PERIOD 14399
#define PRESCALER 0
#define CLOCKDIV 0


DCMotor::DCMotor(motorSettings *settings) : motor(settings)
 800475c:	6023      	str	r3, [r4, #0]
{

}
 800475e:	bd10      	pop	{r4, pc}
 8004760:	08012590 	.word	0x08012590

08004764 <DCMotor::setSpeed(int)>:
	speed = setPoint;

}

bool DCMotor::setSpeed(int s){
	if(s < -PERIOD)
 8004764:	4a35      	ldr	r2, [pc, #212]	; (800483c <DCMotor::setSpeed(int)+0xd8>)
void DCMotor::setReference(float setPoint){
	speed = setPoint;

}

bool DCMotor::setSpeed(int s){
 8004766:	b538      	push	{r3, r4, r5, lr}
	if(s < -PERIOD)
 8004768:	4291      	cmp	r1, r2
void DCMotor::setReference(float setPoint){
	speed = setPoint;

}

bool DCMotor::setSpeed(int s){
 800476a:	4605      	mov	r5, r0
 800476c:	6843      	ldr	r3, [r0, #4]
	if(s < -PERIOD)
 800476e:	db06      	blt.n	800477e <DCMotor::setSpeed(int)+0x1a>
 8004770:	f643 043f 	movw	r4, #14399	; 0x383f
 8004774:	428c      	cmp	r4, r1
 8004776:	bfa8      	it	ge
 8004778:	460c      	movge	r4, r1
		s = -PERIOD;

	if(s > PERIOD)
		s = PERIOD;

	if(abs(s) > 0){
 800477a:	b1f4      	cbz	r4, 80047ba <DCMotor::setSpeed(int)+0x56>
 800477c:	e000      	b.n	8004780 <DCMotor::setSpeed(int)+0x1c>

}

bool DCMotor::setSpeed(int s){
	if(s < -PERIOD)
		s = -PERIOD;
 800477e:	4614      	mov	r4, r2

	if(s > PERIOD)
		s = PERIOD;

	if(abs(s) > 0){
		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 8004780:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8004782:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004784:	f7fd fd7d 	bl	8002282 <GPIO_SetBits>
		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 8004788:	686b      	ldr	r3, [r5, #4]
 800478a:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 800478c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800478e:	f7fd fd78 	bl	8002282 <GPIO_SetBits>

		if(s > 0){
 8004792:	2c00      	cmp	r4, #0
 8004794:	dd05      	ble.n	80047a2 <DCMotor::setSpeed(int)+0x3e>
			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 8004796:	686b      	ldr	r3, [r5, #4]
 8004798:	8c19      	ldrh	r1, [r3, #32]
 800479a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800479c:	f7fd fd71 	bl	8002282 <GPIO_SetBits>
 80047a0:	e019      	b.n	80047d6 <DCMotor::setSpeed(int)+0x72>
			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
		}else if(s < 0){
 80047a2:	d046      	beq.n	8004832 <DCMotor::setSpeed(int)+0xce>
			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 80047a4:	686b      	ldr	r3, [r5, #4]
 80047a6:	8c19      	ldrh	r1, [r3, #32]
 80047a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80047aa:	f7fd fd6c 	bl	8002286 <GPIO_ResetBits>
			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 80047ae:	686b      	ldr	r3, [r5, #4]
 80047b0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80047b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80047b4:	f7fd fd65 	bl	8002282 <GPIO_SetBits>
 80047b8:	e012      	b.n	80047e0 <DCMotor::setSpeed(int)+0x7c>
			return false;
		}
	}else{
		s = 0;

		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 80047ba:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80047bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80047be:	f7fd fd60 	bl	8002282 <GPIO_SetBits>
		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 80047c2:	686b      	ldr	r3, [r5, #4]
 80047c4:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80047c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80047c8:	f7fd fd5b 	bl	8002282 <GPIO_SetBits>

		// Break to GND
		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 80047cc:	686b      	ldr	r3, [r5, #4]
 80047ce:	8c19      	ldrh	r1, [r3, #32]
 80047d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80047d2:	f7fd fd58 	bl	8002286 <GPIO_ResetBits>
		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 80047d6:	686b      	ldr	r3, [r5, #4]
 80047d8:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80047da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80047dc:	f7fd fd53 	bl	8002286 <GPIO_ResetBits>
	}
	

	if(m_settings->m_Timer == TIM1)
 80047e0:	686a      	ldr	r2, [r5, #4]
 80047e2:	4917      	ldr	r1, [pc, #92]	; (8004840 <DCMotor::setSpeed(int)+0xdc>)
 80047e4:	6893      	ldr	r3, [r2, #8]
		s = s * 2;

	switch(m_settings->m_TimerChannel){
 80047e6:	68d2      	ldr	r2, [r2, #12]
		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
	}
	

	if(m_settings->m_Timer == TIM1)
 80047e8:	428b      	cmp	r3, r1
		s = s * 2;

	switch(m_settings->m_TimerChannel){
 80047ea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
	}
	

	if(m_settings->m_Timer == TIM1)
		s = s * 2;
 80047ee:	bf08      	it	eq
 80047f0:	0064      	lsleq	r4, r4, #1

	switch(m_settings->m_TimerChannel){
 80047f2:	2a03      	cmp	r2, #3
 80047f4:	d81f      	bhi.n	8004836 <DCMotor::setSpeed(int)+0xd2>
 80047f6:	e8df f002 	tbb	[pc, r2]
 80047fa:	0802      	.short	0x0802
 80047fc:	140e      	.short	0x140e
		case 1:
			(m_settings->m_Timer)->CCR1 = (uint32_t)abs(s);
 80047fe:	2c00      	cmp	r4, #0
 8004800:	bfb8      	it	lt
 8004802:	4264      	neglt	r4, r4
 8004804:	b2a4      	uxth	r4, r4
 8004806:	869c      	strh	r4, [r3, #52]	; 0x34
 8004808:	e011      	b.n	800482e <DCMotor::setSpeed(int)+0xca>
			break;
		case 2:
			(m_settings->m_Timer)->CCR2 = (uint32_t)abs(s);
 800480a:	2c00      	cmp	r4, #0
 800480c:	bfb8      	it	lt
 800480e:	4264      	neglt	r4, r4
 8004810:	b2a4      	uxth	r4, r4
 8004812:	871c      	strh	r4, [r3, #56]	; 0x38
 8004814:	e00b      	b.n	800482e <DCMotor::setSpeed(int)+0xca>
			break;
		case 3:
			(m_settings->m_Timer)->CCR3 = (uint32_t)abs(s);
 8004816:	2c00      	cmp	r4, #0
 8004818:	bfb8      	it	lt
 800481a:	4264      	neglt	r4, r4
 800481c:	b2a4      	uxth	r4, r4
 800481e:	879c      	strh	r4, [r3, #60]	; 0x3c
 8004820:	e005      	b.n	800482e <DCMotor::setSpeed(int)+0xca>
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
 8004822:	2c00      	cmp	r4, #0
 8004824:	bfb8      	it	lt
 8004826:	4264      	neglt	r4, r4
 8004828:	b2a4      	uxth	r4, r4
 800482a:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
			break;
		default:
			return false;
	}

	return true;
 800482e:	2001      	movs	r0, #1
		case 3:
			(m_settings->m_Timer)->CCR3 = (uint32_t)abs(s);
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
			break;
 8004830:	bd38      	pop	{r3, r4, r5, pc}
			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
		}else if(s < 0){
			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
		}else{
			return false;
 8004832:	4620      	mov	r0, r4
 8004834:	bd38      	pop	{r3, r4, r5, pc}
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
			break;
		default:
			return false;
 8004836:	2000      	movs	r0, #0
	}

	return true;
}
 8004838:	bd38      	pop	{r3, r4, r5, pc}
 800483a:	bf00      	nop
 800483c:	ffffc7c1 	.word	0xffffc7c1
 8004840:	40012c00 	.word	0x40012c00

08004844 <DCMotor::initEncoder(unsigned short)>:
char* DCMotor::motorName(){
	return m_settings->m_motorName;
}

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
 8004844:	7301      	strb	r1, [r0, #12]
 8004846:	4770      	bx	lr

08004848 <DCMotor::readEncoder()>:
}

int32_t DCMotor::readEncoder(){
 8004848:	b570      	push	{r4, r5, r6, lr}
	NumberOfByteToReceive = RXBUFFERSIZE;
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <DCMotor::readEncoder()+0x70>)
 800484c:	2205      	movs	r2, #5
    Rx_Idx = 0x00;
 800484e:	4c1b      	ldr	r4, [pc, #108]	; (80048bc <DCMotor::readEncoder()+0x74>)
void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
}

int32_t DCMotor::readEncoder(){
	NumberOfByteToReceive = RXBUFFERSIZE;
 8004850:	701a      	strb	r2, [r3, #0]
    Rx_Idx = 0x00;
 8004852:	2300      	movs	r3, #0

    slaveAddress = encAddr;
 8004854:	7b02      	ldrb	r2, [r0, #12]
	encAddr = addr;
}

int32_t DCMotor::readEncoder(){
	NumberOfByteToReceive = RXBUFFERSIZE;
    Rx_Idx = 0x00;
 8004856:	7023      	strb	r3, [r4, #0]

    slaveAddress = encAddr;
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <DCMotor::readEncoder()+0x78>)
    
    I2C_ITConfig(I2C1, I2C_IT_EVT , ENABLE);
 800485a:	f44f 7100 	mov.w	r1, #512	; 0x200

int32_t DCMotor::readEncoder(){
	NumberOfByteToReceive = RXBUFFERSIZE;
    Rx_Idx = 0x00;

    slaveAddress = encAddr;
 800485e:	701a      	strb	r2, [r3, #0]

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
}

int32_t DCMotor::readEncoder(){
 8004860:	4605      	mov	r5, r0
	NumberOfByteToReceive = RXBUFFERSIZE;
    Rx_Idx = 0x00;

    slaveAddress = encAddr;
    
    I2C_ITConfig(I2C1, I2C_IT_EVT , ENABLE);
 8004862:	2201      	movs	r2, #1
 8004864:	4817      	ldr	r0, [pc, #92]	; (80048c4 <DCMotor::readEncoder()+0x7c>)
 8004866:	f7fd fe78 	bl	800255a <I2C_ITConfig>
    I2C_AcknowledgeConfig(I2C1, ENABLE);
 800486a:	2101      	movs	r1, #1
 800486c:	4815      	ldr	r0, [pc, #84]	; (80048c4 <DCMotor::readEncoder()+0x7c>)
 800486e:	f7fd fe47 	bl	8002500 <I2C_AcknowledgeConfig>
    I2C_GenerateSTART(I2C1, ENABLE);
 8004872:	2101      	movs	r1, #1
 8004874:	4813      	ldr	r0, [pc, #76]	; (80048c4 <DCMotor::readEncoder()+0x7c>)
 8004876:	f7fd fe2b 	bl	80024d0 <I2C_GenerateSTART>

    // TODO: Implement actual error handling on timeout and retry count.. At the very least throw an error message!
    uint32_t start = millis();
 800487a:	f7fb ff2b 	bl	80006d4 <millis>
 800487e:	4606      	mov	r6, r0
    while ((Rx_Idx < RXBUFFERSIZE)){
 8004880:	7823      	ldrb	r3, [r4, #0]
 8004882:	2b04      	cmp	r3, #4
 8004884:	d808      	bhi.n	8004898 <DCMotor::readEncoder()+0x50>
    	if((millis() - start) > (uint32_t)(m_settings->encoder_timeout)){
 8004886:	f7fb ff25 	bl	80006d4 <millis>
 800488a:	686b      	ldr	r3, [r5, #4]
 800488c:	1b80      	subs	r0, r0, r6
 800488e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004890:	4298      	cmp	r0, r3
 8004892:	d9f5      	bls.n	8004880 <DCMotor::readEncoder()+0x38>
    		return 0;
 8004894:	2000      	movs	r0, #0
 8004896:	bd70      	pop	{r4, r5, r6, pc}
    	}
    } 

    if(RxBuffer[4] > 5){
 8004898:	4a0b      	ldr	r2, [pc, #44]	; (80048c8 <DCMotor::readEncoder()+0x80>)
 800489a:	7913      	ldrb	r3, [r2, #4]
 800489c:	2b05      	cmp	r3, #5
 800489e:	d8f9      	bhi.n	8004894 <DCMotor::readEncoder()+0x4c>
    	return 0;
    }

    return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
 80048a0:	7850      	ldrb	r0, [r2, #1]
 80048a2:	7813      	ldrb	r3, [r2, #0]
 80048a4:	0400      	lsls	r0, r0, #16
 80048a6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80048aa:	78d3      	ldrb	r3, [r2, #3]
 80048ac:	4318      	orrs	r0, r3
 80048ae:	7893      	ldrb	r3, [r2, #2]
 80048b0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	bf00      	nop
 80048b8:	20000ab1 	.word	0x20000ab1
 80048bc:	20000ab8 	.word	0x20000ab8
 80048c0:	20000ab7 	.word	0x20000ab7
 80048c4:	40005400 	.word	0x40005400
 80048c8:	20000ab2 	.word	0x20000ab2

080048cc <DCMotor::updateRegulator(float, float)>:

float DCMotor::updateRegulator(float enc, float dt){
 80048cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048d0:	4604      	mov	r4, r0
 80048d2:	4690      	mov	r8, r2
	float error_new = speed-enc;
 80048d4:	6880      	ldr	r0, [r0, #8]
 80048d6:	f000 fdef 	bl	80054b8 <__aeabi_fsub>
	
	integral += error_new*dt;
 80048da:	4641      	mov	r1, r8

    return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
}

float DCMotor::updateRegulator(float enc, float dt){
	float error_new = speed-enc;
 80048dc:	4607      	mov	r7, r0
	
	integral += error_new*dt;
 80048de:	f000 fef5 	bl	80056cc <__aeabi_fmul>
 80048e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80048e4:	f000 fdea 	bl	80054bc <__addsf3>
	
	if (integral > m_settings->integralSaturation){
 80048e8:	6866      	ldr	r6, [r4, #4]
}

float DCMotor::updateRegulator(float enc, float dt){
	float error_new = speed-enc;
	
	integral += error_new*dt;
 80048ea:	62a0      	str	r0, [r4, #40]	; 0x28
	
	if (integral > m_settings->integralSaturation){
 80048ec:	6df5      	ldr	r5, [r6, #92]	; 0x5c
}

float DCMotor::updateRegulator(float enc, float dt){
	float error_new = speed-enc;
	
	integral += error_new*dt;
 80048ee:	4681      	mov	r9, r0
	
	if (integral > m_settings->integralSaturation){
 80048f0:	4629      	mov	r1, r5
 80048f2:	f001 f8a7 	bl	8005a44 <__aeabi_fcmpgt>
 80048f6:	b930      	cbnz	r0, 8004906 <DCMotor::updateRegulator(float, float)+0x3a>
		integral = m_settings->integralSaturation;
	}else if (integral < -(m_settings->integralSaturation)){
 80048f8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80048fc:	4629      	mov	r1, r5
 80048fe:	4648      	mov	r0, r9
 8004900:	f001 f882 	bl	8005a08 <__aeabi_fcmplt>
 8004904:	b100      	cbz	r0, 8004908 <DCMotor::updateRegulator(float, float)+0x3c>
		integral = -(m_settings->integralSaturation);
 8004906:	62a5      	str	r5, [r4, #40]	; 0x28
	}
	
	float derivative = (error_new-error)/dt;
	float output = (m_settings->KP*error + m_settings->KI*integral + m_settings->KD*derivative);
 8004908:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800490a:	6d70      	ldr	r0, [r6, #84]	; 0x54
 800490c:	f000 fede 	bl	80056cc <__aeabi_fmul>
		integral = m_settings->integralSaturation;
	}else if (integral < -(m_settings->integralSaturation)){
		integral = -(m_settings->integralSaturation);
	}
	
	float derivative = (error_new-error)/dt;
 8004910:	6a65      	ldr	r5, [r4, #36]	; 0x24
	float output = (m_settings->KP*error + m_settings->KI*integral + m_settings->KD*derivative);
 8004912:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8004914:	4681      	mov	r9, r0
 8004916:	4628      	mov	r0, r5
 8004918:	f000 fed8 	bl	80056cc <__aeabi_fmul>
 800491c:	4601      	mov	r1, r0
 800491e:	4648      	mov	r0, r9
 8004920:	f000 fdcc 	bl	80054bc <__addsf3>
 8004924:	4629      	mov	r1, r5
 8004926:	4681      	mov	r9, r0
 8004928:	4638      	mov	r0, r7
 800492a:	f000 fdc5 	bl	80054b8 <__aeabi_fsub>
 800492e:	4641      	mov	r1, r8
 8004930:	f000 ff80 	bl	8005834 <__aeabi_fdiv>
 8004934:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8004936:	f000 fec9 	bl	80056cc <__aeabi_fmul>
 800493a:	4601      	mov	r1, r0
 800493c:	4648      	mov	r0, r9
 800493e:	f000 fdbd 	bl	80054bc <__addsf3>
	error = error_new;
 8004942:	6267      	str	r7, [r4, #36]	; 0x24
	return output;
}
 8004944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004948 <DCMotor::update(float, bool)>:

float DCMotor::update(float dt, bool connected){
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4605      	mov	r5, r0
 800494c:	460e      	mov	r6, r1
	// Read encoder
	int s = 0;
	float speed_si = -1;
	if(connected){
 800494e:	b1fa      	cbz	r2, 8004990 <DCMotor::update(float, bool)+0x48>
		float encSpeed = readEncoder()*0.04793689962;		// rad/s
 8004950:	f7ff ff7a 	bl	8004848 <DCMotor::readEncoder()>
		speed_si = encSpeed * wheelRadius;	// m/s
 8004954:	f000 fa34 	bl	8004dc0 <__aeabi_i2d>
 8004958:	a311      	add	r3, pc, #68	; (adr r3, 80049a0 <DCMotor::update(float, bool)+0x58>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f000 fa95 	bl	8004e8c <__aeabi_dmul>
 8004962:	f000 fd55 	bl	8005410 <__aeabi_d2f>
 8004966:	6929      	ldr	r1, [r5, #16]
 8004968:	f000 feb0 	bl	80056cc <__aeabi_fmul>
		if(strstr(m_settings->m_motorName, "left") > 0)
 800496c:	686b      	ldr	r3, [r5, #4]
	// Read encoder
	int s = 0;
	float speed_si = -1;
	if(connected){
		float encSpeed = readEncoder()*0.04793689962;		// rad/s
		speed_si = encSpeed * wheelRadius;	// m/s
 800496e:	4604      	mov	r4, r0
		if(strstr(m_settings->m_motorName, "left") > 0)
 8004970:	490d      	ldr	r1, [pc, #52]	; (80049a8 <DCMotor::update(float, bool)+0x60>)
 8004972:	6858      	ldr	r0, [r3, #4]
 8004974:	f00c fd87 	bl	8011486 <strstr>
 8004978:	b108      	cbz	r0, 800497e <DCMotor::update(float, bool)+0x36>
			speed_si = speed_si * -1;
 800497a:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
		// Update PID regulator
		s = (int) updateRegulator(speed_si, dt);		// m/s*/
 800497e:	4621      	mov	r1, r4
 8004980:	4632      	mov	r2, r6
 8004982:	4628      	mov	r0, r5
 8004984:	f7ff ffa2 	bl	80048cc <DCMotor::updateRegulator(float, float)>
 8004988:	f001 f866 	bl	8005a58 <__aeabi_f2iz>
 800498c:	4601      	mov	r1, r0
 800498e:	e001      	b.n	8004994 <DCMotor::update(float, bool)+0x4c>
	return output;
}

float DCMotor::update(float dt, bool connected){
	// Read encoder
	int s = 0;
 8004990:	4611      	mov	r1, r2
	float speed_si = -1;
 8004992:	4c06      	ldr	r4, [pc, #24]	; (80049ac <DCMotor::update(float, bool)+0x64>)
			speed_si = speed_si * -1;
		// Update PID regulator
		s = (int) updateRegulator(speed_si, dt);		// m/s*/
		// Set motor speed to process value
	}
	setSpeed(s);		// m/s
 8004994:	4628      	mov	r0, r5
 8004996:	f7ff fee5 	bl	8004764 <DCMotor::setSpeed(int)>
	// Return encoder values for publishing to localization
	return speed_si;
 800499a:	4620      	mov	r0, r4
 800499c:	bd70      	pop	{r4, r5, r6, pc}
 800499e:	bf00      	nop
 80049a0:	7047711c 	.word	0x7047711c
 80049a4:	3fa88b2f 	.word	0x3fa88b2f
 80049a8:	08013434 	.word	0x08013434
 80049ac:	bf800000 	.word	0xbf800000

080049b0 <motorSettings::motorSettings()>:

motorSettings::motorSettings()
{
    //  preset general defaults

    m_motorType = 0;
 80049b0:	2200      	movs	r2, #0
 80049b2:	6002      	str	r2, [r0, #0]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 80049b4:	4770      	bx	lr

080049b6 <motorSettings::motorSettings(int, char*, TIM_TypeDef*, int)>:

motorSettings::motorSettings(int type, char* name, TIM_TypeDef* timer, int timerChannel)
 80049b6:	b510      	push	{r4, lr}
{
    //  preset general defaults

    m_motorType = type;
    m_motorName = name;
    m_Timer = timer;
 80049b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    m_TimerChannel = timerChannel;
 80049bc:	9b02      	ldr	r3, [sp, #8]
 80049be:	60c3      	str	r3, [r0, #12]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 80049c0:	bd10      	pop	{r4, pc}

080049c2 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>:
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
 80049c2:	6283      	str	r3, [r0, #40]	; 0x28
    m_DCEnAPort = m_DCEnAPort_;
 80049c4:	9b00      	ldr	r3, [sp, #0]

void motorSettings::setDCPins(int m_DCInAPin_, GPIO_TypeDef* m_DCInAPort_, int m_DCEnAPin_, GPIO_TypeDef* m_DCEnAPort_,
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
 80049c6:	6201      	str	r1, [r0, #32]
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
    m_DCEnAPort = m_DCEnAPort_;
 80049c8:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_DCInBPin = m_DCInBPin_;
 80049ca:	9b01      	ldr	r3, [sp, #4]
void motorSettings::setDCPins(int m_DCInAPin_, GPIO_TypeDef* m_DCInAPort_, int m_DCEnAPin_, GPIO_TypeDef* m_DCEnAPort_,
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
 80049cc:	6242      	str	r2, [r0, #36]	; 0x24
    m_DCEnAPin = m_DCEnAPin_;
    m_DCEnAPort = m_DCEnAPort_;
    m_DCInBPin = m_DCInBPin_;
 80049ce:	6303      	str	r3, [r0, #48]	; 0x30
    m_DCInBPort = m_DCInBPort_;
 80049d0:	9b02      	ldr	r3, [sp, #8]
 80049d2:	6343      	str	r3, [r0, #52]	; 0x34
    m_DCEnBPin = m_DCEnBPin_;
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	6383      	str	r3, [r0, #56]	; 0x38
    m_DCEnBPort = m_DCEnBPort_;
 80049d8:	9b04      	ldr	r3, [sp, #16]
 80049da:	63c3      	str	r3, [r0, #60]	; 0x3c
    m_DCPWMPin = m_DCPWMPin_;
 80049dc:	9b05      	ldr	r3, [sp, #20]
 80049de:	6403      	str	r3, [r0, #64]	; 0x40
    m_DCPWMPort = m_DCPWMPort_;
 80049e0:	9b06      	ldr	r3, [sp, #24]
 80049e2:	6443      	str	r3, [r0, #68]	; 0x44
 80049e4:	4770      	bx	lr

080049e6 <motorSettings::setRegulator(float, float, float, float)>:
}

void motorSettings::setRegulator(float KP_, float KI_, float KD_, float integralSaturation_){
    KP = KP_;
    KI = KI_;
    KD = KD_;
 80049e6:	6583      	str	r3, [r0, #88]	; 0x58
    integralSaturation = integralSaturation_;
 80049e8:	9b00      	ldr	r3, [sp, #0]
    m_DCPWMPin = m_DCPWMPin_;
    m_DCPWMPort = m_DCPWMPort_;
}

void motorSettings::setRegulator(float KP_, float KI_, float KD_, float integralSaturation_){
    KP = KP_;
 80049ea:	6501      	str	r1, [r0, #80]	; 0x50
    KI = KI_;
 80049ec:	6542      	str	r2, [r0, #84]	; 0x54
    KD = KD_;
    integralSaturation = integralSaturation_;
 80049ee:	65c3      	str	r3, [r0, #92]	; 0x5c
 80049f0:	4770      	bx	lr
	...

080049f4 <ros::normalizeSecNSecSigned(long&, long&)>:
#include "ros/duration.h"

namespace ros
{
  void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
  {
 80049f4:	b510      	push	{r4, lr}
    int32_t nsec_part = nsec;
 80049f6:	680b      	ldr	r3, [r1, #0]
    int32_t sec_part = sec;
 80049f8:	6802      	ldr	r2, [r0, #0]

    while (nsec_part > 1000000000L)
 80049fa:	4c0c      	ldr	r4, [pc, #48]	; (8004a2c <ros::normalizeSecNSecSigned(long&, long&)+0x38>)
 80049fc:	42a3      	cmp	r3, r4
 80049fe:	dd07      	ble.n	8004a10 <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
    {
      nsec_part -= 1000000000L;
 8004a00:	f103 4344 	add.w	r3, r3, #3288334336	; 0xc4000000
 8004a04:	f503 03ca 	add.w	r3, r3, #6619136	; 0x650000
 8004a08:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
      ++sec_part;
 8004a0c:	3201      	adds	r2, #1
  void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
  {
    int32_t nsec_part = nsec;
    int32_t sec_part = sec;

    while (nsec_part > 1000000000L)
 8004a0e:	e7f5      	b.n	80049fc <ros::normalizeSecNSecSigned(long&, long&)+0x8>
    {
      nsec_part -= 1000000000L;
      ++sec_part;
    }
    while (nsec_part < 0)
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da07      	bge.n	8004a24 <ros::normalizeSecNSecSigned(long&, long&)+0x30>
    {
      nsec_part += 1000000000L;
 8004a14:	f103 536e 	add.w	r3, r3, #998244352	; 0x3b800000
 8004a18:	f503 13d6 	add.w	r3, r3, #1753088	; 0x1ac000
 8004a1c:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
      --sec_part;
 8004a20:	3a01      	subs	r2, #1
    while (nsec_part > 1000000000L)
    {
      nsec_part -= 1000000000L;
      ++sec_part;
    }
    while (nsec_part < 0)
 8004a22:	e7f5      	b.n	8004a10 <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
    {
      nsec_part += 1000000000L;
      --sec_part;
    }
    sec = sec_part;
 8004a24:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004a26:	600b      	str	r3, [r1, #0]
 8004a28:	bd10      	pop	{r4, pc}
 8004a2a:	bf00      	nop
 8004a2c:	3b9aca00 	.word	0x3b9aca00

08004a30 <ros::Duration::operator+=(ros::Duration const&)>:
  }

  Duration& Duration::operator+=(const Duration &rhs)
  {
    sec += rhs.sec;
 8004a30:	6802      	ldr	r2, [r0, #0]
 8004a32:	680b      	ldr	r3, [r1, #0]
    sec = sec_part;
    nsec = nsec_part;
  }

  Duration& Duration::operator+=(const Duration &rhs)
  {
 8004a34:	b510      	push	{r4, lr}
    sec += rhs.sec;
 8004a36:	4413      	add	r3, r2
 8004a38:	6003      	str	r3, [r0, #0]
    nsec += rhs.nsec;
 8004a3a:	684b      	ldr	r3, [r1, #4]
 8004a3c:	4601      	mov	r1, r0
 8004a3e:	6842      	ldr	r2, [r0, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004a46:	f7ff ffd5 	bl	80049f4 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004a4a:	bd10      	pop	{r4, pc}

08004a4c <ros::Duration::operator-=(ros::Duration const&)>:

  Duration& Duration::operator-=(const Duration &rhs){
    sec += -rhs.sec;
 8004a4c:	6803      	ldr	r3, [r0, #0]
 8004a4e:	680a      	ldr	r2, [r1, #0]
    nsec += rhs.nsec;
    normalizeSecNSecSigned(sec, nsec);
    return *this;
  }

  Duration& Duration::operator-=(const Duration &rhs){
 8004a50:	b510      	push	{r4, lr}
    sec += -rhs.sec;
 8004a52:	1a9b      	subs	r3, r3, r2
    nsec += -rhs.nsec;
 8004a54:	684a      	ldr	r2, [r1, #4]
 8004a56:	4601      	mov	r1, r0
    normalizeSecNSecSigned(sec, nsec);
    return *this;
  }

  Duration& Duration::operator-=(const Duration &rhs){
    sec += -rhs.sec;
 8004a58:	6003      	str	r3, [r0, #0]
    nsec += -rhs.nsec;
 8004a5a:	6843      	ldr	r3, [r0, #4]
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004a62:	f7ff ffc7 	bl	80049f4 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004a66:	bd10      	pop	{r4, pc}

08004a68 <ros::Duration::operator*=(double)>:

  Duration& Duration::operator*=(double scale){
 8004a68:	b5d0      	push	{r4, r6, r7, lr}
 8004a6a:	4616      	mov	r6, r2
 8004a6c:	461f      	mov	r7, r3
 8004a6e:	4604      	mov	r4, r0
    sec *= scale;
 8004a70:	6800      	ldr	r0, [r0, #0]
 8004a72:	f000 f9a5 	bl	8004dc0 <__aeabi_i2d>
 8004a76:	4632      	mov	r2, r6
 8004a78:	463b      	mov	r3, r7
 8004a7a:	f000 fa07 	bl	8004e8c <__aeabi_dmul>
 8004a7e:	f000 fc9f 	bl	80053c0 <__aeabi_d2iz>
 8004a82:	6020      	str	r0, [r4, #0]
    nsec *= scale;
 8004a84:	6860      	ldr	r0, [r4, #4]
 8004a86:	f000 f99b 	bl	8004dc0 <__aeabi_i2d>
 8004a8a:	4632      	mov	r2, r6
 8004a8c:	463b      	mov	r3, r7
 8004a8e:	f000 f9fd 	bl	8004e8c <__aeabi_dmul>
 8004a92:	f000 fc95 	bl	80053c0 <__aeabi_d2iz>
 8004a96:	4621      	mov	r1, r4
 8004a98:	f841 0f04 	str.w	r0, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff ffa9 	bl	80049f4 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	bdd0      	pop	{r4, r6, r7, pc}
 8004aa6:	bf00      	nop

08004aa8 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 8004aa8:	b530      	push	{r4, r5, lr}
    uint32_t nsec_part= nsec % 1000000000UL;
 8004aaa:	680d      	ldr	r5, [r1, #0]
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 8004aac:	4c04      	ldr	r4, [pc, #16]	; (8004ac0 <ros::normalizeSecNSec(unsigned long&, unsigned long&)+0x18>)
 8004aae:	6802      	ldr	r2, [r0, #0]
 8004ab0:	fbb5 f3f4 	udiv	r3, r5, r4
 8004ab4:	441a      	add	r2, r3
    nsec = nsec_part;
 8004ab6:	fb04 5313 	mls	r3, r4, r3, r5
namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
    uint32_t nsec_part= nsec % 1000000000UL;
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 8004aba:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004abc:	600b      	str	r3, [r1, #0]
 8004abe:	bd30      	pop	{r4, r5, pc}
 8004ac0:	3b9aca00 	.word	0x3b9aca00

08004ac4 <ros::Time::fromNSec(long)>:
  }

  Time& Time::fromNSec(int32_t t)
  {
    sec = t / 1000000000;
 8004ac4:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <ros::Time::fromNSec(long)+0x1c>)
    sec += sec_part;
    nsec = nsec_part;
  }

  Time& Time::fromNSec(int32_t t)
  {
 8004ac6:	b510      	push	{r4, lr}
    sec = t / 1000000000;
 8004ac8:	fb91 f3f2 	sdiv	r3, r1, r2
 8004acc:	6003      	str	r3, [r0, #0]
    nsec = t % 1000000000;
 8004ace:	fb02 1313 	mls	r3, r2, r3, r1
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004ad8:	f7ff ffe6 	bl	8004aa8 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	bf00      	nop
 8004ae0:	3b9aca00 	.word	0x3b9aca00

08004ae4 <ros::Time::operator+=(ros::Duration const&)>:

  Time& Time::operator +=(const Duration &rhs)
  {
    sec += rhs.sec;
 8004ae4:	6802      	ldr	r2, [r0, #0]
 8004ae6:	680b      	ldr	r3, [r1, #0]
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator +=(const Duration &rhs)
  {
 8004ae8:	b510      	push	{r4, lr}
    sec += rhs.sec;
 8004aea:	4413      	add	r3, r2
 8004aec:	6003      	str	r3, [r0, #0]
    nsec += rhs.nsec;
 8004aee:	684b      	ldr	r3, [r1, #4]
 8004af0:	4601      	mov	r1, r0
 8004af2:	6842      	ldr	r2, [r0, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004afa:	f7ff ffd5 	bl	8004aa8 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004afe:	bd10      	pop	{r4, pc}

08004b00 <ros::Time::operator-=(ros::Duration const&)>:

  Time& Time::operator -=(const Duration &rhs){
    sec += -rhs.sec;
 8004b00:	6803      	ldr	r3, [r0, #0]
 8004b02:	680a      	ldr	r2, [r1, #0]
    nsec += rhs.nsec;
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator -=(const Duration &rhs){
 8004b04:	b510      	push	{r4, lr}
    sec += -rhs.sec;
 8004b06:	1a9b      	subs	r3, r3, r2
    nsec += -rhs.nsec;
 8004b08:	684a      	ldr	r2, [r1, #4]
 8004b0a:	4601      	mov	r1, r0
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator -=(const Duration &rhs){
    sec += -rhs.sec;
 8004b0c:	6003      	str	r3, [r0, #0]
    nsec += -rhs.nsec;
 8004b0e:	6843      	ldr	r3, [r0, #4]
 8004b10:	1a9b      	subs	r3, r3, r2
 8004b12:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004b16:	f7ff ffc7 	bl	8004aa8 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004b1a:	bd10      	pop	{r4, pc}

08004b1c <__aeabi_drsub>:
 8004b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004b20:	e002      	b.n	8004b28 <__adddf3>
 8004b22:	bf00      	nop

08004b24 <__aeabi_dsub>:
 8004b24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004b28 <__adddf3>:
 8004b28:	b530      	push	{r4, r5, lr}
 8004b2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004b2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004b32:	ea94 0f05 	teq	r4, r5
 8004b36:	bf08      	it	eq
 8004b38:	ea90 0f02 	teqeq	r0, r2
 8004b3c:	bf1f      	itttt	ne
 8004b3e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004b42:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004b46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004b4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004b4e:	f000 80e2 	beq.w	8004d16 <__adddf3+0x1ee>
 8004b52:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004b56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004b5a:	bfb8      	it	lt
 8004b5c:	426d      	neglt	r5, r5
 8004b5e:	dd0c      	ble.n	8004b7a <__adddf3+0x52>
 8004b60:	442c      	add	r4, r5
 8004b62:	ea80 0202 	eor.w	r2, r0, r2
 8004b66:	ea81 0303 	eor.w	r3, r1, r3
 8004b6a:	ea82 0000 	eor.w	r0, r2, r0
 8004b6e:	ea83 0101 	eor.w	r1, r3, r1
 8004b72:	ea80 0202 	eor.w	r2, r0, r2
 8004b76:	ea81 0303 	eor.w	r3, r1, r3
 8004b7a:	2d36      	cmp	r5, #54	; 0x36
 8004b7c:	bf88      	it	hi
 8004b7e:	bd30      	pophi	{r4, r5, pc}
 8004b80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004b84:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004b88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004b8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004b90:	d002      	beq.n	8004b98 <__adddf3+0x70>
 8004b92:	4240      	negs	r0, r0
 8004b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004b98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004b9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004ba0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004ba4:	d002      	beq.n	8004bac <__adddf3+0x84>
 8004ba6:	4252      	negs	r2, r2
 8004ba8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004bac:	ea94 0f05 	teq	r4, r5
 8004bb0:	f000 80a7 	beq.w	8004d02 <__adddf3+0x1da>
 8004bb4:	f1a4 0401 	sub.w	r4, r4, #1
 8004bb8:	f1d5 0e20 	rsbs	lr, r5, #32
 8004bbc:	db0d      	blt.n	8004bda <__adddf3+0xb2>
 8004bbe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004bc2:	fa22 f205 	lsr.w	r2, r2, r5
 8004bc6:	1880      	adds	r0, r0, r2
 8004bc8:	f141 0100 	adc.w	r1, r1, #0
 8004bcc:	fa03 f20e 	lsl.w	r2, r3, lr
 8004bd0:	1880      	adds	r0, r0, r2
 8004bd2:	fa43 f305 	asr.w	r3, r3, r5
 8004bd6:	4159      	adcs	r1, r3
 8004bd8:	e00e      	b.n	8004bf8 <__adddf3+0xd0>
 8004bda:	f1a5 0520 	sub.w	r5, r5, #32
 8004bde:	f10e 0e20 	add.w	lr, lr, #32
 8004be2:	2a01      	cmp	r2, #1
 8004be4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004be8:	bf28      	it	cs
 8004bea:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004bee:	fa43 f305 	asr.w	r3, r3, r5
 8004bf2:	18c0      	adds	r0, r0, r3
 8004bf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004bf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004bfc:	d507      	bpl.n	8004c0e <__adddf3+0xe6>
 8004bfe:	f04f 0e00 	mov.w	lr, #0
 8004c02:	f1dc 0c00 	rsbs	ip, ip, #0
 8004c06:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004c0a:	eb6e 0101 	sbc.w	r1, lr, r1
 8004c0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004c12:	d31b      	bcc.n	8004c4c <__adddf3+0x124>
 8004c14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004c18:	d30c      	bcc.n	8004c34 <__adddf3+0x10c>
 8004c1a:	0849      	lsrs	r1, r1, #1
 8004c1c:	ea5f 0030 	movs.w	r0, r0, rrx
 8004c20:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004c24:	f104 0401 	add.w	r4, r4, #1
 8004c28:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004c2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004c30:	f080 809a 	bcs.w	8004d68 <__adddf3+0x240>
 8004c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004c38:	bf08      	it	eq
 8004c3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004c3e:	f150 0000 	adcs.w	r0, r0, #0
 8004c42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004c46:	ea41 0105 	orr.w	r1, r1, r5
 8004c4a:	bd30      	pop	{r4, r5, pc}
 8004c4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004c50:	4140      	adcs	r0, r0
 8004c52:	eb41 0101 	adc.w	r1, r1, r1
 8004c56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004c5a:	f1a4 0401 	sub.w	r4, r4, #1
 8004c5e:	d1e9      	bne.n	8004c34 <__adddf3+0x10c>
 8004c60:	f091 0f00 	teq	r1, #0
 8004c64:	bf04      	itt	eq
 8004c66:	4601      	moveq	r1, r0
 8004c68:	2000      	moveq	r0, #0
 8004c6a:	fab1 f381 	clz	r3, r1
 8004c6e:	bf08      	it	eq
 8004c70:	3320      	addeq	r3, #32
 8004c72:	f1a3 030b 	sub.w	r3, r3, #11
 8004c76:	f1b3 0220 	subs.w	r2, r3, #32
 8004c7a:	da0c      	bge.n	8004c96 <__adddf3+0x16e>
 8004c7c:	320c      	adds	r2, #12
 8004c7e:	dd08      	ble.n	8004c92 <__adddf3+0x16a>
 8004c80:	f102 0c14 	add.w	ip, r2, #20
 8004c84:	f1c2 020c 	rsb	r2, r2, #12
 8004c88:	fa01 f00c 	lsl.w	r0, r1, ip
 8004c8c:	fa21 f102 	lsr.w	r1, r1, r2
 8004c90:	e00c      	b.n	8004cac <__adddf3+0x184>
 8004c92:	f102 0214 	add.w	r2, r2, #20
 8004c96:	bfd8      	it	le
 8004c98:	f1c2 0c20 	rsble	ip, r2, #32
 8004c9c:	fa01 f102 	lsl.w	r1, r1, r2
 8004ca0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004ca4:	bfdc      	itt	le
 8004ca6:	ea41 010c 	orrle.w	r1, r1, ip
 8004caa:	4090      	lslle	r0, r2
 8004cac:	1ae4      	subs	r4, r4, r3
 8004cae:	bfa2      	ittt	ge
 8004cb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004cb4:	4329      	orrge	r1, r5
 8004cb6:	bd30      	popge	{r4, r5, pc}
 8004cb8:	ea6f 0404 	mvn.w	r4, r4
 8004cbc:	3c1f      	subs	r4, #31
 8004cbe:	da1c      	bge.n	8004cfa <__adddf3+0x1d2>
 8004cc0:	340c      	adds	r4, #12
 8004cc2:	dc0e      	bgt.n	8004ce2 <__adddf3+0x1ba>
 8004cc4:	f104 0414 	add.w	r4, r4, #20
 8004cc8:	f1c4 0220 	rsb	r2, r4, #32
 8004ccc:	fa20 f004 	lsr.w	r0, r0, r4
 8004cd0:	fa01 f302 	lsl.w	r3, r1, r2
 8004cd4:	ea40 0003 	orr.w	r0, r0, r3
 8004cd8:	fa21 f304 	lsr.w	r3, r1, r4
 8004cdc:	ea45 0103 	orr.w	r1, r5, r3
 8004ce0:	bd30      	pop	{r4, r5, pc}
 8004ce2:	f1c4 040c 	rsb	r4, r4, #12
 8004ce6:	f1c4 0220 	rsb	r2, r4, #32
 8004cea:	fa20 f002 	lsr.w	r0, r0, r2
 8004cee:	fa01 f304 	lsl.w	r3, r1, r4
 8004cf2:	ea40 0003 	orr.w	r0, r0, r3
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	bd30      	pop	{r4, r5, pc}
 8004cfa:	fa21 f004 	lsr.w	r0, r1, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	bd30      	pop	{r4, r5, pc}
 8004d02:	f094 0f00 	teq	r4, #0
 8004d06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004d0a:	bf06      	itte	eq
 8004d0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004d10:	3401      	addeq	r4, #1
 8004d12:	3d01      	subne	r5, #1
 8004d14:	e74e      	b.n	8004bb4 <__adddf3+0x8c>
 8004d16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004d1a:	bf18      	it	ne
 8004d1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004d20:	d029      	beq.n	8004d76 <__adddf3+0x24e>
 8004d22:	ea94 0f05 	teq	r4, r5
 8004d26:	bf08      	it	eq
 8004d28:	ea90 0f02 	teqeq	r0, r2
 8004d2c:	d005      	beq.n	8004d3a <__adddf3+0x212>
 8004d2e:	ea54 0c00 	orrs.w	ip, r4, r0
 8004d32:	bf04      	itt	eq
 8004d34:	4619      	moveq	r1, r3
 8004d36:	4610      	moveq	r0, r2
 8004d38:	bd30      	pop	{r4, r5, pc}
 8004d3a:	ea91 0f03 	teq	r1, r3
 8004d3e:	bf1e      	ittt	ne
 8004d40:	2100      	movne	r1, #0
 8004d42:	2000      	movne	r0, #0
 8004d44:	bd30      	popne	{r4, r5, pc}
 8004d46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004d4a:	d105      	bne.n	8004d58 <__adddf3+0x230>
 8004d4c:	0040      	lsls	r0, r0, #1
 8004d4e:	4149      	adcs	r1, r1
 8004d50:	bf28      	it	cs
 8004d52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004d56:	bd30      	pop	{r4, r5, pc}
 8004d58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004d5c:	bf3c      	itt	cc
 8004d5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004d62:	bd30      	popcc	{r4, r5, pc}
 8004d64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004d68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004d6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d70:	f04f 0000 	mov.w	r0, #0
 8004d74:	bd30      	pop	{r4, r5, pc}
 8004d76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004d7a:	bf1a      	itte	ne
 8004d7c:	4619      	movne	r1, r3
 8004d7e:	4610      	movne	r0, r2
 8004d80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8004d84:	bf1c      	itt	ne
 8004d86:	460b      	movne	r3, r1
 8004d88:	4602      	movne	r2, r0
 8004d8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004d8e:	bf06      	itte	eq
 8004d90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8004d94:	ea91 0f03 	teqeq	r1, r3
 8004d98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8004d9c:	bd30      	pop	{r4, r5, pc}
 8004d9e:	bf00      	nop

08004da0 <__aeabi_ui2d>:
 8004da0:	f090 0f00 	teq	r0, #0
 8004da4:	bf04      	itt	eq
 8004da6:	2100      	moveq	r1, #0
 8004da8:	4770      	bxeq	lr
 8004daa:	b530      	push	{r4, r5, lr}
 8004dac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004db0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004db4:	f04f 0500 	mov.w	r5, #0
 8004db8:	f04f 0100 	mov.w	r1, #0
 8004dbc:	e750      	b.n	8004c60 <__adddf3+0x138>
 8004dbe:	bf00      	nop

08004dc0 <__aeabi_i2d>:
 8004dc0:	f090 0f00 	teq	r0, #0
 8004dc4:	bf04      	itt	eq
 8004dc6:	2100      	moveq	r1, #0
 8004dc8:	4770      	bxeq	lr
 8004dca:	b530      	push	{r4, r5, lr}
 8004dcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004dd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004dd4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004dd8:	bf48      	it	mi
 8004dda:	4240      	negmi	r0, r0
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	e73e      	b.n	8004c60 <__adddf3+0x138>
 8004de2:	bf00      	nop

08004de4 <__aeabi_f2d>:
 8004de4:	0042      	lsls	r2, r0, #1
 8004de6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004dea:	ea4f 0131 	mov.w	r1, r1, rrx
 8004dee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004df2:	bf1f      	itttt	ne
 8004df4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004df8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004dfc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004e00:	4770      	bxne	lr
 8004e02:	f092 0f00 	teq	r2, #0
 8004e06:	bf14      	ite	ne
 8004e08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004e0c:	4770      	bxeq	lr
 8004e0e:	b530      	push	{r4, r5, lr}
 8004e10:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004e14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004e18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004e1c:	e720      	b.n	8004c60 <__adddf3+0x138>
 8004e1e:	bf00      	nop

08004e20 <__aeabi_ul2d>:
 8004e20:	ea50 0201 	orrs.w	r2, r0, r1
 8004e24:	bf08      	it	eq
 8004e26:	4770      	bxeq	lr
 8004e28:	b530      	push	{r4, r5, lr}
 8004e2a:	f04f 0500 	mov.w	r5, #0
 8004e2e:	e00a      	b.n	8004e46 <__aeabi_l2d+0x16>

08004e30 <__aeabi_l2d>:
 8004e30:	ea50 0201 	orrs.w	r2, r0, r1
 8004e34:	bf08      	it	eq
 8004e36:	4770      	bxeq	lr
 8004e38:	b530      	push	{r4, r5, lr}
 8004e3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8004e3e:	d502      	bpl.n	8004e46 <__aeabi_l2d+0x16>
 8004e40:	4240      	negs	r0, r0
 8004e42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004e46:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004e4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004e4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004e52:	f43f aedc 	beq.w	8004c0e <__adddf3+0xe6>
 8004e56:	f04f 0203 	mov.w	r2, #3
 8004e5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004e5e:	bf18      	it	ne
 8004e60:	3203      	addne	r2, #3
 8004e62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004e66:	bf18      	it	ne
 8004e68:	3203      	addne	r2, #3
 8004e6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8004e6e:	f1c2 0320 	rsb	r3, r2, #32
 8004e72:	fa00 fc03 	lsl.w	ip, r0, r3
 8004e76:	fa20 f002 	lsr.w	r0, r0, r2
 8004e7a:	fa01 fe03 	lsl.w	lr, r1, r3
 8004e7e:	ea40 000e 	orr.w	r0, r0, lr
 8004e82:	fa21 f102 	lsr.w	r1, r1, r2
 8004e86:	4414      	add	r4, r2
 8004e88:	e6c1      	b.n	8004c0e <__adddf3+0xe6>
 8004e8a:	bf00      	nop

08004e8c <__aeabi_dmul>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8004e9a:	bf1d      	ittte	ne
 8004e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004ea0:	ea94 0f0c 	teqne	r4, ip
 8004ea4:	ea95 0f0c 	teqne	r5, ip
 8004ea8:	f000 f8de 	bleq	8005068 <__aeabi_dmul+0x1dc>
 8004eac:	442c      	add	r4, r5
 8004eae:	ea81 0603 	eor.w	r6, r1, r3
 8004eb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004eb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004eba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8004ebe:	bf18      	it	ne
 8004ec0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004ec4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ecc:	d038      	beq.n	8004f40 <__aeabi_dmul+0xb4>
 8004ece:	fba0 ce02 	umull	ip, lr, r0, r2
 8004ed2:	f04f 0500 	mov.w	r5, #0
 8004ed6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004eda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8004ede:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004ee2:	f04f 0600 	mov.w	r6, #0
 8004ee6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004eea:	f09c 0f00 	teq	ip, #0
 8004eee:	bf18      	it	ne
 8004ef0:	f04e 0e01 	orrne.w	lr, lr, #1
 8004ef4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004ef8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004efc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004f00:	d204      	bcs.n	8004f0c <__aeabi_dmul+0x80>
 8004f02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004f06:	416d      	adcs	r5, r5
 8004f08:	eb46 0606 	adc.w	r6, r6, r6
 8004f0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004f10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004f14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004f18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004f1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004f20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004f24:	bf88      	it	hi
 8004f26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004f2a:	d81e      	bhi.n	8004f6a <__aeabi_dmul+0xde>
 8004f2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004f30:	bf08      	it	eq
 8004f32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004f36:	f150 0000 	adcs.w	r0, r0, #0
 8004f3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004f44:	ea46 0101 	orr.w	r1, r6, r1
 8004f48:	ea40 0002 	orr.w	r0, r0, r2
 8004f4c:	ea81 0103 	eor.w	r1, r1, r3
 8004f50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004f54:	bfc2      	ittt	gt
 8004f56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004f5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004f5e:	bd70      	popgt	{r4, r5, r6, pc}
 8004f60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004f64:	f04f 0e00 	mov.w	lr, #0
 8004f68:	3c01      	subs	r4, #1
 8004f6a:	f300 80ab 	bgt.w	80050c4 <__aeabi_dmul+0x238>
 8004f6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004f72:	bfde      	ittt	le
 8004f74:	2000      	movle	r0, #0
 8004f76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004f7a:	bd70      	pople	{r4, r5, r6, pc}
 8004f7c:	f1c4 0400 	rsb	r4, r4, #0
 8004f80:	3c20      	subs	r4, #32
 8004f82:	da35      	bge.n	8004ff0 <__aeabi_dmul+0x164>
 8004f84:	340c      	adds	r4, #12
 8004f86:	dc1b      	bgt.n	8004fc0 <__aeabi_dmul+0x134>
 8004f88:	f104 0414 	add.w	r4, r4, #20
 8004f8c:	f1c4 0520 	rsb	r5, r4, #32
 8004f90:	fa00 f305 	lsl.w	r3, r0, r5
 8004f94:	fa20 f004 	lsr.w	r0, r0, r4
 8004f98:	fa01 f205 	lsl.w	r2, r1, r5
 8004f9c:	ea40 0002 	orr.w	r0, r0, r2
 8004fa0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004fa4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004fac:	fa21 f604 	lsr.w	r6, r1, r4
 8004fb0:	eb42 0106 	adc.w	r1, r2, r6
 8004fb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004fb8:	bf08      	it	eq
 8004fba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
 8004fc0:	f1c4 040c 	rsb	r4, r4, #12
 8004fc4:	f1c4 0520 	rsb	r5, r4, #32
 8004fc8:	fa00 f304 	lsl.w	r3, r0, r4
 8004fcc:	fa20 f005 	lsr.w	r0, r0, r5
 8004fd0:	fa01 f204 	lsl.w	r2, r1, r4
 8004fd4:	ea40 0002 	orr.w	r0, r0, r2
 8004fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004fdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004fe0:	f141 0100 	adc.w	r1, r1, #0
 8004fe4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004fe8:	bf08      	it	eq
 8004fea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f1c4 0520 	rsb	r5, r4, #32
 8004ff4:	fa00 f205 	lsl.w	r2, r0, r5
 8004ff8:	ea4e 0e02 	orr.w	lr, lr, r2
 8004ffc:	fa20 f304 	lsr.w	r3, r0, r4
 8005000:	fa01 f205 	lsl.w	r2, r1, r5
 8005004:	ea43 0302 	orr.w	r3, r3, r2
 8005008:	fa21 f004 	lsr.w	r0, r1, r4
 800500c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005010:	fa21 f204 	lsr.w	r2, r1, r4
 8005014:	ea20 0002 	bic.w	r0, r0, r2
 8005018:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800501c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005020:	bf08      	it	eq
 8005022:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	f094 0f00 	teq	r4, #0
 800502c:	d10f      	bne.n	800504e <__aeabi_dmul+0x1c2>
 800502e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8005032:	0040      	lsls	r0, r0, #1
 8005034:	eb41 0101 	adc.w	r1, r1, r1
 8005038:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800503c:	bf08      	it	eq
 800503e:	3c01      	subeq	r4, #1
 8005040:	d0f7      	beq.n	8005032 <__aeabi_dmul+0x1a6>
 8005042:	ea41 0106 	orr.w	r1, r1, r6
 8005046:	f095 0f00 	teq	r5, #0
 800504a:	bf18      	it	ne
 800504c:	4770      	bxne	lr
 800504e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8005052:	0052      	lsls	r2, r2, #1
 8005054:	eb43 0303 	adc.w	r3, r3, r3
 8005058:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800505c:	bf08      	it	eq
 800505e:	3d01      	subeq	r5, #1
 8005060:	d0f7      	beq.n	8005052 <__aeabi_dmul+0x1c6>
 8005062:	ea43 0306 	orr.w	r3, r3, r6
 8005066:	4770      	bx	lr
 8005068:	ea94 0f0c 	teq	r4, ip
 800506c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005070:	bf18      	it	ne
 8005072:	ea95 0f0c 	teqne	r5, ip
 8005076:	d00c      	beq.n	8005092 <__aeabi_dmul+0x206>
 8005078:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800507c:	bf18      	it	ne
 800507e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005082:	d1d1      	bne.n	8005028 <__aeabi_dmul+0x19c>
 8005084:	ea81 0103 	eor.w	r1, r1, r3
 8005088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800508c:	f04f 0000 	mov.w	r0, #0
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005096:	bf06      	itte	eq
 8005098:	4610      	moveq	r0, r2
 800509a:	4619      	moveq	r1, r3
 800509c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80050a0:	d019      	beq.n	80050d6 <__aeabi_dmul+0x24a>
 80050a2:	ea94 0f0c 	teq	r4, ip
 80050a6:	d102      	bne.n	80050ae <__aeabi_dmul+0x222>
 80050a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80050ac:	d113      	bne.n	80050d6 <__aeabi_dmul+0x24a>
 80050ae:	ea95 0f0c 	teq	r5, ip
 80050b2:	d105      	bne.n	80050c0 <__aeabi_dmul+0x234>
 80050b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80050b8:	bf1c      	itt	ne
 80050ba:	4610      	movne	r0, r2
 80050bc:	4619      	movne	r1, r3
 80050be:	d10a      	bne.n	80050d6 <__aeabi_dmul+0x24a>
 80050c0:	ea81 0103 	eor.w	r1, r1, r3
 80050c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80050c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80050cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050d0:	f04f 0000 	mov.w	r0, #0
 80050d4:	bd70      	pop	{r4, r5, r6, pc}
 80050d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80050da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80050de:	bd70      	pop	{r4, r5, r6, pc}

080050e0 <__aeabi_ddiv>:
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80050e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80050ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80050ee:	bf1d      	ittte	ne
 80050f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80050f4:	ea94 0f0c 	teqne	r4, ip
 80050f8:	ea95 0f0c 	teqne	r5, ip
 80050fc:	f000 f8a7 	bleq	800524e <__aeabi_ddiv+0x16e>
 8005100:	eba4 0405 	sub.w	r4, r4, r5
 8005104:	ea81 0e03 	eor.w	lr, r1, r3
 8005108:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800510c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005110:	f000 8088 	beq.w	8005224 <__aeabi_ddiv+0x144>
 8005114:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005118:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800511c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005120:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005124:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005128:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800512c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005130:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005134:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005138:	429d      	cmp	r5, r3
 800513a:	bf08      	it	eq
 800513c:	4296      	cmpeq	r6, r2
 800513e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005142:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005146:	d202      	bcs.n	800514e <__aeabi_ddiv+0x6e>
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	ea4f 0232 	mov.w	r2, r2, rrx
 800514e:	1ab6      	subs	r6, r6, r2
 8005150:	eb65 0503 	sbc.w	r5, r5, r3
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	ea4f 0232 	mov.w	r2, r2, rrx
 800515a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800515e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005162:	ebb6 0e02 	subs.w	lr, r6, r2
 8005166:	eb75 0e03 	sbcs.w	lr, r5, r3
 800516a:	bf22      	ittt	cs
 800516c:	1ab6      	subcs	r6, r6, r2
 800516e:	4675      	movcs	r5, lr
 8005170:	ea40 000c 	orrcs.w	r0, r0, ip
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	ea4f 0232 	mov.w	r2, r2, rrx
 800517a:	ebb6 0e02 	subs.w	lr, r6, r2
 800517e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005182:	bf22      	ittt	cs
 8005184:	1ab6      	subcs	r6, r6, r2
 8005186:	4675      	movcs	r5, lr
 8005188:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800518c:	085b      	lsrs	r3, r3, #1
 800518e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005192:	ebb6 0e02 	subs.w	lr, r6, r2
 8005196:	eb75 0e03 	sbcs.w	lr, r5, r3
 800519a:	bf22      	ittt	cs
 800519c:	1ab6      	subcs	r6, r6, r2
 800519e:	4675      	movcs	r5, lr
 80051a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80051aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80051ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80051b2:	bf22      	ittt	cs
 80051b4:	1ab6      	subcs	r6, r6, r2
 80051b6:	4675      	movcs	r5, lr
 80051b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80051bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80051c0:	d018      	beq.n	80051f4 <__aeabi_ddiv+0x114>
 80051c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80051c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80051ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80051ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80051d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80051d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80051da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80051de:	d1c0      	bne.n	8005162 <__aeabi_ddiv+0x82>
 80051e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80051e4:	d10b      	bne.n	80051fe <__aeabi_ddiv+0x11e>
 80051e6:	ea41 0100 	orr.w	r1, r1, r0
 80051ea:	f04f 0000 	mov.w	r0, #0
 80051ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80051f2:	e7b6      	b.n	8005162 <__aeabi_ddiv+0x82>
 80051f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80051f8:	bf04      	itt	eq
 80051fa:	4301      	orreq	r1, r0
 80051fc:	2000      	moveq	r0, #0
 80051fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005202:	bf88      	it	hi
 8005204:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005208:	f63f aeaf 	bhi.w	8004f6a <__aeabi_dmul+0xde>
 800520c:	ebb5 0c03 	subs.w	ip, r5, r3
 8005210:	bf04      	itt	eq
 8005212:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005216:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800521a:	f150 0000 	adcs.w	r0, r0, #0
 800521e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005228:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800522c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005230:	bfc2      	ittt	gt
 8005232:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005236:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800523a:	bd70      	popgt	{r4, r5, r6, pc}
 800523c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005240:	f04f 0e00 	mov.w	lr, #0
 8005244:	3c01      	subs	r4, #1
 8005246:	e690      	b.n	8004f6a <__aeabi_dmul+0xde>
 8005248:	ea45 0e06 	orr.w	lr, r5, r6
 800524c:	e68d      	b.n	8004f6a <__aeabi_dmul+0xde>
 800524e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005252:	ea94 0f0c 	teq	r4, ip
 8005256:	bf08      	it	eq
 8005258:	ea95 0f0c 	teqeq	r5, ip
 800525c:	f43f af3b 	beq.w	80050d6 <__aeabi_dmul+0x24a>
 8005260:	ea94 0f0c 	teq	r4, ip
 8005264:	d10a      	bne.n	800527c <__aeabi_ddiv+0x19c>
 8005266:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800526a:	f47f af34 	bne.w	80050d6 <__aeabi_dmul+0x24a>
 800526e:	ea95 0f0c 	teq	r5, ip
 8005272:	f47f af25 	bne.w	80050c0 <__aeabi_dmul+0x234>
 8005276:	4610      	mov	r0, r2
 8005278:	4619      	mov	r1, r3
 800527a:	e72c      	b.n	80050d6 <__aeabi_dmul+0x24a>
 800527c:	ea95 0f0c 	teq	r5, ip
 8005280:	d106      	bne.n	8005290 <__aeabi_ddiv+0x1b0>
 8005282:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005286:	f43f aefd 	beq.w	8005084 <__aeabi_dmul+0x1f8>
 800528a:	4610      	mov	r0, r2
 800528c:	4619      	mov	r1, r3
 800528e:	e722      	b.n	80050d6 <__aeabi_dmul+0x24a>
 8005290:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005294:	bf18      	it	ne
 8005296:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800529a:	f47f aec5 	bne.w	8005028 <__aeabi_dmul+0x19c>
 800529e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80052a2:	f47f af0d 	bne.w	80050c0 <__aeabi_dmul+0x234>
 80052a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80052aa:	f47f aeeb 	bne.w	8005084 <__aeabi_dmul+0x1f8>
 80052ae:	e712      	b.n	80050d6 <__aeabi_dmul+0x24a>

080052b0 <__gedf2>:
 80052b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80052b4:	e006      	b.n	80052c4 <__cmpdf2+0x4>
 80052b6:	bf00      	nop

080052b8 <__ledf2>:
 80052b8:	f04f 0c01 	mov.w	ip, #1
 80052bc:	e002      	b.n	80052c4 <__cmpdf2+0x4>
 80052be:	bf00      	nop

080052c0 <__cmpdf2>:
 80052c0:	f04f 0c01 	mov.w	ip, #1
 80052c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80052c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80052cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80052d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80052d4:	bf18      	it	ne
 80052d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80052da:	d01b      	beq.n	8005314 <__cmpdf2+0x54>
 80052dc:	b001      	add	sp, #4
 80052de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80052e2:	bf0c      	ite	eq
 80052e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80052e8:	ea91 0f03 	teqne	r1, r3
 80052ec:	bf02      	ittt	eq
 80052ee:	ea90 0f02 	teqeq	r0, r2
 80052f2:	2000      	moveq	r0, #0
 80052f4:	4770      	bxeq	lr
 80052f6:	f110 0f00 	cmn.w	r0, #0
 80052fa:	ea91 0f03 	teq	r1, r3
 80052fe:	bf58      	it	pl
 8005300:	4299      	cmppl	r1, r3
 8005302:	bf08      	it	eq
 8005304:	4290      	cmpeq	r0, r2
 8005306:	bf2c      	ite	cs
 8005308:	17d8      	asrcs	r0, r3, #31
 800530a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800530e:	f040 0001 	orr.w	r0, r0, #1
 8005312:	4770      	bx	lr
 8005314:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005318:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800531c:	d102      	bne.n	8005324 <__cmpdf2+0x64>
 800531e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005322:	d107      	bne.n	8005334 <__cmpdf2+0x74>
 8005324:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005328:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800532c:	d1d6      	bne.n	80052dc <__cmpdf2+0x1c>
 800532e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005332:	d0d3      	beq.n	80052dc <__cmpdf2+0x1c>
 8005334:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop

0800533c <__aeabi_cdrcmple>:
 800533c:	4684      	mov	ip, r0
 800533e:	4610      	mov	r0, r2
 8005340:	4662      	mov	r2, ip
 8005342:	468c      	mov	ip, r1
 8005344:	4619      	mov	r1, r3
 8005346:	4663      	mov	r3, ip
 8005348:	e000      	b.n	800534c <__aeabi_cdcmpeq>
 800534a:	bf00      	nop

0800534c <__aeabi_cdcmpeq>:
 800534c:	b501      	push	{r0, lr}
 800534e:	f7ff ffb7 	bl	80052c0 <__cmpdf2>
 8005352:	2800      	cmp	r0, #0
 8005354:	bf48      	it	mi
 8005356:	f110 0f00 	cmnmi.w	r0, #0
 800535a:	bd01      	pop	{r0, pc}

0800535c <__aeabi_dcmpeq>:
 800535c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005360:	f7ff fff4 	bl	800534c <__aeabi_cdcmpeq>
 8005364:	bf0c      	ite	eq
 8005366:	2001      	moveq	r0, #1
 8005368:	2000      	movne	r0, #0
 800536a:	f85d fb08 	ldr.w	pc, [sp], #8
 800536e:	bf00      	nop

08005370 <__aeabi_dcmplt>:
 8005370:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005374:	f7ff ffea 	bl	800534c <__aeabi_cdcmpeq>
 8005378:	bf34      	ite	cc
 800537a:	2001      	movcc	r0, #1
 800537c:	2000      	movcs	r0, #0
 800537e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005382:	bf00      	nop

08005384 <__aeabi_dcmple>:
 8005384:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005388:	f7ff ffe0 	bl	800534c <__aeabi_cdcmpeq>
 800538c:	bf94      	ite	ls
 800538e:	2001      	movls	r0, #1
 8005390:	2000      	movhi	r0, #0
 8005392:	f85d fb08 	ldr.w	pc, [sp], #8
 8005396:	bf00      	nop

08005398 <__aeabi_dcmpge>:
 8005398:	f84d ed08 	str.w	lr, [sp, #-8]!
 800539c:	f7ff ffce 	bl	800533c <__aeabi_cdrcmple>
 80053a0:	bf94      	ite	ls
 80053a2:	2001      	movls	r0, #1
 80053a4:	2000      	movhi	r0, #0
 80053a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80053aa:	bf00      	nop

080053ac <__aeabi_dcmpgt>:
 80053ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80053b0:	f7ff ffc4 	bl	800533c <__aeabi_cdrcmple>
 80053b4:	bf34      	ite	cc
 80053b6:	2001      	movcc	r0, #1
 80053b8:	2000      	movcs	r0, #0
 80053ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80053be:	bf00      	nop

080053c0 <__aeabi_d2iz>:
 80053c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80053c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80053c8:	d215      	bcs.n	80053f6 <__aeabi_d2iz+0x36>
 80053ca:	d511      	bpl.n	80053f0 <__aeabi_d2iz+0x30>
 80053cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80053d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80053d4:	d912      	bls.n	80053fc <__aeabi_d2iz+0x3c>
 80053d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80053da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80053e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80053e6:	fa23 f002 	lsr.w	r0, r3, r2
 80053ea:	bf18      	it	ne
 80053ec:	4240      	negne	r0, r0
 80053ee:	4770      	bx	lr
 80053f0:	f04f 0000 	mov.w	r0, #0
 80053f4:	4770      	bx	lr
 80053f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80053fa:	d105      	bne.n	8005408 <__aeabi_d2iz+0x48>
 80053fc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005400:	bf08      	it	eq
 8005402:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005406:	4770      	bx	lr
 8005408:	f04f 0000 	mov.w	r0, #0
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop

08005410 <__aeabi_d2f>:
 8005410:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005414:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005418:	bf24      	itt	cs
 800541a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800541e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005422:	d90d      	bls.n	8005440 <__aeabi_d2f+0x30>
 8005424:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005428:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800542c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005430:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005434:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005438:	bf08      	it	eq
 800543a:	f020 0001 	biceq.w	r0, r0, #1
 800543e:	4770      	bx	lr
 8005440:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005444:	d121      	bne.n	800548a <__aeabi_d2f+0x7a>
 8005446:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800544a:	bfbc      	itt	lt
 800544c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005450:	4770      	bxlt	lr
 8005452:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005456:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800545a:	f1c2 0218 	rsb	r2, r2, #24
 800545e:	f1c2 0c20 	rsb	ip, r2, #32
 8005462:	fa10 f30c 	lsls.w	r3, r0, ip
 8005466:	fa20 f002 	lsr.w	r0, r0, r2
 800546a:	bf18      	it	ne
 800546c:	f040 0001 	orrne.w	r0, r0, #1
 8005470:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005474:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005478:	fa03 fc0c 	lsl.w	ip, r3, ip
 800547c:	ea40 000c 	orr.w	r0, r0, ip
 8005480:	fa23 f302 	lsr.w	r3, r3, r2
 8005484:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005488:	e7cc      	b.n	8005424 <__aeabi_d2f+0x14>
 800548a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800548e:	d107      	bne.n	80054a0 <__aeabi_d2f+0x90>
 8005490:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005494:	bf1e      	ittt	ne
 8005496:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800549a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800549e:	4770      	bxne	lr
 80054a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80054a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80054a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop

080054b0 <__aeabi_frsub>:
 80054b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80054b4:	e002      	b.n	80054bc <__addsf3>
 80054b6:	bf00      	nop

080054b8 <__aeabi_fsub>:
 80054b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080054bc <__addsf3>:
 80054bc:	0042      	lsls	r2, r0, #1
 80054be:	bf1f      	itttt	ne
 80054c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80054c4:	ea92 0f03 	teqne	r2, r3
 80054c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80054cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80054d0:	d06a      	beq.n	80055a8 <__addsf3+0xec>
 80054d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80054d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80054da:	bfc1      	itttt	gt
 80054dc:	18d2      	addgt	r2, r2, r3
 80054de:	4041      	eorgt	r1, r0
 80054e0:	4048      	eorgt	r0, r1
 80054e2:	4041      	eorgt	r1, r0
 80054e4:	bfb8      	it	lt
 80054e6:	425b      	neglt	r3, r3
 80054e8:	2b19      	cmp	r3, #25
 80054ea:	bf88      	it	hi
 80054ec:	4770      	bxhi	lr
 80054ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80054f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80054f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80054fa:	bf18      	it	ne
 80054fc:	4240      	negne	r0, r0
 80054fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005502:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8005506:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800550a:	bf18      	it	ne
 800550c:	4249      	negne	r1, r1
 800550e:	ea92 0f03 	teq	r2, r3
 8005512:	d03f      	beq.n	8005594 <__addsf3+0xd8>
 8005514:	f1a2 0201 	sub.w	r2, r2, #1
 8005518:	fa41 fc03 	asr.w	ip, r1, r3
 800551c:	eb10 000c 	adds.w	r0, r0, ip
 8005520:	f1c3 0320 	rsb	r3, r3, #32
 8005524:	fa01 f103 	lsl.w	r1, r1, r3
 8005528:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800552c:	d502      	bpl.n	8005534 <__addsf3+0x78>
 800552e:	4249      	negs	r1, r1
 8005530:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8005534:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005538:	d313      	bcc.n	8005562 <__addsf3+0xa6>
 800553a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800553e:	d306      	bcc.n	800554e <__addsf3+0x92>
 8005540:	0840      	lsrs	r0, r0, #1
 8005542:	ea4f 0131 	mov.w	r1, r1, rrx
 8005546:	f102 0201 	add.w	r2, r2, #1
 800554a:	2afe      	cmp	r2, #254	; 0xfe
 800554c:	d251      	bcs.n	80055f2 <__addsf3+0x136>
 800554e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8005552:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005556:	bf08      	it	eq
 8005558:	f020 0001 	biceq.w	r0, r0, #1
 800555c:	ea40 0003 	orr.w	r0, r0, r3
 8005560:	4770      	bx	lr
 8005562:	0049      	lsls	r1, r1, #1
 8005564:	eb40 0000 	adc.w	r0, r0, r0
 8005568:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800556c:	f1a2 0201 	sub.w	r2, r2, #1
 8005570:	d1ed      	bne.n	800554e <__addsf3+0x92>
 8005572:	fab0 fc80 	clz	ip, r0
 8005576:	f1ac 0c08 	sub.w	ip, ip, #8
 800557a:	ebb2 020c 	subs.w	r2, r2, ip
 800557e:	fa00 f00c 	lsl.w	r0, r0, ip
 8005582:	bfaa      	itet	ge
 8005584:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8005588:	4252      	neglt	r2, r2
 800558a:	4318      	orrge	r0, r3
 800558c:	bfbc      	itt	lt
 800558e:	40d0      	lsrlt	r0, r2
 8005590:	4318      	orrlt	r0, r3
 8005592:	4770      	bx	lr
 8005594:	f092 0f00 	teq	r2, #0
 8005598:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800559c:	bf06      	itte	eq
 800559e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80055a2:	3201      	addeq	r2, #1
 80055a4:	3b01      	subne	r3, #1
 80055a6:	e7b5      	b.n	8005514 <__addsf3+0x58>
 80055a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80055ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80055b0:	bf18      	it	ne
 80055b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80055b6:	d021      	beq.n	80055fc <__addsf3+0x140>
 80055b8:	ea92 0f03 	teq	r2, r3
 80055bc:	d004      	beq.n	80055c8 <__addsf3+0x10c>
 80055be:	f092 0f00 	teq	r2, #0
 80055c2:	bf08      	it	eq
 80055c4:	4608      	moveq	r0, r1
 80055c6:	4770      	bx	lr
 80055c8:	ea90 0f01 	teq	r0, r1
 80055cc:	bf1c      	itt	ne
 80055ce:	2000      	movne	r0, #0
 80055d0:	4770      	bxne	lr
 80055d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80055d6:	d104      	bne.n	80055e2 <__addsf3+0x126>
 80055d8:	0040      	lsls	r0, r0, #1
 80055da:	bf28      	it	cs
 80055dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80055e0:	4770      	bx	lr
 80055e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80055e6:	bf3c      	itt	cc
 80055e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80055ec:	4770      	bxcc	lr
 80055ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80055f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80055f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80055fa:	4770      	bx	lr
 80055fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005600:	bf16      	itet	ne
 8005602:	4608      	movne	r0, r1
 8005604:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8005608:	4601      	movne	r1, r0
 800560a:	0242      	lsls	r2, r0, #9
 800560c:	bf06      	itte	eq
 800560e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8005612:	ea90 0f01 	teqeq	r0, r1
 8005616:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800561a:	4770      	bx	lr

0800561c <__aeabi_ui2f>:
 800561c:	f04f 0300 	mov.w	r3, #0
 8005620:	e004      	b.n	800562c <__aeabi_i2f+0x8>
 8005622:	bf00      	nop

08005624 <__aeabi_i2f>:
 8005624:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8005628:	bf48      	it	mi
 800562a:	4240      	negmi	r0, r0
 800562c:	ea5f 0c00 	movs.w	ip, r0
 8005630:	bf08      	it	eq
 8005632:	4770      	bxeq	lr
 8005634:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8005638:	4601      	mov	r1, r0
 800563a:	f04f 0000 	mov.w	r0, #0
 800563e:	e01c      	b.n	800567a <__aeabi_l2f+0x2a>

08005640 <__aeabi_ul2f>:
 8005640:	ea50 0201 	orrs.w	r2, r0, r1
 8005644:	bf08      	it	eq
 8005646:	4770      	bxeq	lr
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	e00a      	b.n	8005664 <__aeabi_l2f+0x14>
 800564e:	bf00      	nop

08005650 <__aeabi_l2f>:
 8005650:	ea50 0201 	orrs.w	r2, r0, r1
 8005654:	bf08      	it	eq
 8005656:	4770      	bxeq	lr
 8005658:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800565c:	d502      	bpl.n	8005664 <__aeabi_l2f+0x14>
 800565e:	4240      	negs	r0, r0
 8005660:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005664:	ea5f 0c01 	movs.w	ip, r1
 8005668:	bf02      	ittt	eq
 800566a:	4684      	moveq	ip, r0
 800566c:	4601      	moveq	r1, r0
 800566e:	2000      	moveq	r0, #0
 8005670:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8005674:	bf08      	it	eq
 8005676:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800567a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800567e:	fabc f28c 	clz	r2, ip
 8005682:	3a08      	subs	r2, #8
 8005684:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8005688:	db10      	blt.n	80056ac <__aeabi_l2f+0x5c>
 800568a:	fa01 fc02 	lsl.w	ip, r1, r2
 800568e:	4463      	add	r3, ip
 8005690:	fa00 fc02 	lsl.w	ip, r0, r2
 8005694:	f1c2 0220 	rsb	r2, r2, #32
 8005698:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800569c:	fa20 f202 	lsr.w	r2, r0, r2
 80056a0:	eb43 0002 	adc.w	r0, r3, r2
 80056a4:	bf08      	it	eq
 80056a6:	f020 0001 	biceq.w	r0, r0, #1
 80056aa:	4770      	bx	lr
 80056ac:	f102 0220 	add.w	r2, r2, #32
 80056b0:	fa01 fc02 	lsl.w	ip, r1, r2
 80056b4:	f1c2 0220 	rsb	r2, r2, #32
 80056b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80056bc:	fa21 f202 	lsr.w	r2, r1, r2
 80056c0:	eb43 0002 	adc.w	r0, r3, r2
 80056c4:	bf08      	it	eq
 80056c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80056ca:	4770      	bx	lr

080056cc <__aeabi_fmul>:
 80056cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80056d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80056d4:	bf1e      	ittt	ne
 80056d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80056da:	ea92 0f0c 	teqne	r2, ip
 80056de:	ea93 0f0c 	teqne	r3, ip
 80056e2:	d06f      	beq.n	80057c4 <__aeabi_fmul+0xf8>
 80056e4:	441a      	add	r2, r3
 80056e6:	ea80 0c01 	eor.w	ip, r0, r1
 80056ea:	0240      	lsls	r0, r0, #9
 80056ec:	bf18      	it	ne
 80056ee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80056f2:	d01e      	beq.n	8005732 <__aeabi_fmul+0x66>
 80056f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056f8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80056fc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005700:	fba0 3101 	umull	r3, r1, r0, r1
 8005704:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8005708:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800570c:	bf3e      	ittt	cc
 800570e:	0049      	lslcc	r1, r1, #1
 8005710:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8005714:	005b      	lslcc	r3, r3, #1
 8005716:	ea40 0001 	orr.w	r0, r0, r1
 800571a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800571e:	2afd      	cmp	r2, #253	; 0xfd
 8005720:	d81d      	bhi.n	800575e <__aeabi_fmul+0x92>
 8005722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005726:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800572a:	bf08      	it	eq
 800572c:	f020 0001 	biceq.w	r0, r0, #1
 8005730:	4770      	bx	lr
 8005732:	f090 0f00 	teq	r0, #0
 8005736:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800573a:	bf08      	it	eq
 800573c:	0249      	lsleq	r1, r1, #9
 800573e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005742:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8005746:	3a7f      	subs	r2, #127	; 0x7f
 8005748:	bfc2      	ittt	gt
 800574a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800574e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005752:	4770      	bxgt	lr
 8005754:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	3a01      	subs	r2, #1
 800575e:	dc5d      	bgt.n	800581c <__aeabi_fmul+0x150>
 8005760:	f112 0f19 	cmn.w	r2, #25
 8005764:	bfdc      	itt	le
 8005766:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800576a:	4770      	bxle	lr
 800576c:	f1c2 0200 	rsb	r2, r2, #0
 8005770:	0041      	lsls	r1, r0, #1
 8005772:	fa21 f102 	lsr.w	r1, r1, r2
 8005776:	f1c2 0220 	rsb	r2, r2, #32
 800577a:	fa00 fc02 	lsl.w	ip, r0, r2
 800577e:	ea5f 0031 	movs.w	r0, r1, rrx
 8005782:	f140 0000 	adc.w	r0, r0, #0
 8005786:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800578a:	bf08      	it	eq
 800578c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005790:	4770      	bx	lr
 8005792:	f092 0f00 	teq	r2, #0
 8005796:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800579a:	bf02      	ittt	eq
 800579c:	0040      	lsleq	r0, r0, #1
 800579e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80057a2:	3a01      	subeq	r2, #1
 80057a4:	d0f9      	beq.n	800579a <__aeabi_fmul+0xce>
 80057a6:	ea40 000c 	orr.w	r0, r0, ip
 80057aa:	f093 0f00 	teq	r3, #0
 80057ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80057b2:	bf02      	ittt	eq
 80057b4:	0049      	lsleq	r1, r1, #1
 80057b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80057ba:	3b01      	subeq	r3, #1
 80057bc:	d0f9      	beq.n	80057b2 <__aeabi_fmul+0xe6>
 80057be:	ea41 010c 	orr.w	r1, r1, ip
 80057c2:	e78f      	b.n	80056e4 <__aeabi_fmul+0x18>
 80057c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80057c8:	ea92 0f0c 	teq	r2, ip
 80057cc:	bf18      	it	ne
 80057ce:	ea93 0f0c 	teqne	r3, ip
 80057d2:	d00a      	beq.n	80057ea <__aeabi_fmul+0x11e>
 80057d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80057d8:	bf18      	it	ne
 80057da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80057de:	d1d8      	bne.n	8005792 <__aeabi_fmul+0xc6>
 80057e0:	ea80 0001 	eor.w	r0, r0, r1
 80057e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80057e8:	4770      	bx	lr
 80057ea:	f090 0f00 	teq	r0, #0
 80057ee:	bf17      	itett	ne
 80057f0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80057f4:	4608      	moveq	r0, r1
 80057f6:	f091 0f00 	teqne	r1, #0
 80057fa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80057fe:	d014      	beq.n	800582a <__aeabi_fmul+0x15e>
 8005800:	ea92 0f0c 	teq	r2, ip
 8005804:	d101      	bne.n	800580a <__aeabi_fmul+0x13e>
 8005806:	0242      	lsls	r2, r0, #9
 8005808:	d10f      	bne.n	800582a <__aeabi_fmul+0x15e>
 800580a:	ea93 0f0c 	teq	r3, ip
 800580e:	d103      	bne.n	8005818 <__aeabi_fmul+0x14c>
 8005810:	024b      	lsls	r3, r1, #9
 8005812:	bf18      	it	ne
 8005814:	4608      	movne	r0, r1
 8005816:	d108      	bne.n	800582a <__aeabi_fmul+0x15e>
 8005818:	ea80 0001 	eor.w	r0, r0, r1
 800581c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005820:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005824:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005828:	4770      	bx	lr
 800582a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800582e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8005832:	4770      	bx	lr

08005834 <__aeabi_fdiv>:
 8005834:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005838:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800583c:	bf1e      	ittt	ne
 800583e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8005842:	ea92 0f0c 	teqne	r2, ip
 8005846:	ea93 0f0c 	teqne	r3, ip
 800584a:	d069      	beq.n	8005920 <__aeabi_fdiv+0xec>
 800584c:	eba2 0203 	sub.w	r2, r2, r3
 8005850:	ea80 0c01 	eor.w	ip, r0, r1
 8005854:	0249      	lsls	r1, r1, #9
 8005856:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800585a:	d037      	beq.n	80058cc <__aeabi_fdiv+0x98>
 800585c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005860:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8005864:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8005868:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800586c:	428b      	cmp	r3, r1
 800586e:	bf38      	it	cc
 8005870:	005b      	lslcc	r3, r3, #1
 8005872:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8005876:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800587a:	428b      	cmp	r3, r1
 800587c:	bf24      	itt	cs
 800587e:	1a5b      	subcs	r3, r3, r1
 8005880:	ea40 000c 	orrcs.w	r0, r0, ip
 8005884:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8005888:	bf24      	itt	cs
 800588a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800588e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005892:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8005896:	bf24      	itt	cs
 8005898:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800589c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80058a0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80058a4:	bf24      	itt	cs
 80058a6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80058aa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	bf18      	it	ne
 80058b2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80058b6:	d1e0      	bne.n	800587a <__aeabi_fdiv+0x46>
 80058b8:	2afd      	cmp	r2, #253	; 0xfd
 80058ba:	f63f af50 	bhi.w	800575e <__aeabi_fmul+0x92>
 80058be:	428b      	cmp	r3, r1
 80058c0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80058c4:	bf08      	it	eq
 80058c6:	f020 0001 	biceq.w	r0, r0, #1
 80058ca:	4770      	bx	lr
 80058cc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80058d0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80058d4:	327f      	adds	r2, #127	; 0x7f
 80058d6:	bfc2      	ittt	gt
 80058d8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80058dc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80058e0:	4770      	bxgt	lr
 80058e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	3a01      	subs	r2, #1
 80058ec:	e737      	b.n	800575e <__aeabi_fmul+0x92>
 80058ee:	f092 0f00 	teq	r2, #0
 80058f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80058f6:	bf02      	ittt	eq
 80058f8:	0040      	lsleq	r0, r0, #1
 80058fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80058fe:	3a01      	subeq	r2, #1
 8005900:	d0f9      	beq.n	80058f6 <__aeabi_fdiv+0xc2>
 8005902:	ea40 000c 	orr.w	r0, r0, ip
 8005906:	f093 0f00 	teq	r3, #0
 800590a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800590e:	bf02      	ittt	eq
 8005910:	0049      	lsleq	r1, r1, #1
 8005912:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005916:	3b01      	subeq	r3, #1
 8005918:	d0f9      	beq.n	800590e <__aeabi_fdiv+0xda>
 800591a:	ea41 010c 	orr.w	r1, r1, ip
 800591e:	e795      	b.n	800584c <__aeabi_fdiv+0x18>
 8005920:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005924:	ea92 0f0c 	teq	r2, ip
 8005928:	d108      	bne.n	800593c <__aeabi_fdiv+0x108>
 800592a:	0242      	lsls	r2, r0, #9
 800592c:	f47f af7d 	bne.w	800582a <__aeabi_fmul+0x15e>
 8005930:	ea93 0f0c 	teq	r3, ip
 8005934:	f47f af70 	bne.w	8005818 <__aeabi_fmul+0x14c>
 8005938:	4608      	mov	r0, r1
 800593a:	e776      	b.n	800582a <__aeabi_fmul+0x15e>
 800593c:	ea93 0f0c 	teq	r3, ip
 8005940:	d104      	bne.n	800594c <__aeabi_fdiv+0x118>
 8005942:	024b      	lsls	r3, r1, #9
 8005944:	f43f af4c 	beq.w	80057e0 <__aeabi_fmul+0x114>
 8005948:	4608      	mov	r0, r1
 800594a:	e76e      	b.n	800582a <__aeabi_fmul+0x15e>
 800594c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005950:	bf18      	it	ne
 8005952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005956:	d1ca      	bne.n	80058ee <__aeabi_fdiv+0xba>
 8005958:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800595c:	f47f af5c 	bne.w	8005818 <__aeabi_fmul+0x14c>
 8005960:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005964:	f47f af3c 	bne.w	80057e0 <__aeabi_fmul+0x114>
 8005968:	e75f      	b.n	800582a <__aeabi_fmul+0x15e>
 800596a:	bf00      	nop

0800596c <__gesf2>:
 800596c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005970:	e006      	b.n	8005980 <__cmpsf2+0x4>
 8005972:	bf00      	nop

08005974 <__lesf2>:
 8005974:	f04f 0c01 	mov.w	ip, #1
 8005978:	e002      	b.n	8005980 <__cmpsf2+0x4>
 800597a:	bf00      	nop

0800597c <__cmpsf2>:
 800597c:	f04f 0c01 	mov.w	ip, #1
 8005980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005984:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005988:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800598c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005990:	bf18      	it	ne
 8005992:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005996:	d011      	beq.n	80059bc <__cmpsf2+0x40>
 8005998:	b001      	add	sp, #4
 800599a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800599e:	bf18      	it	ne
 80059a0:	ea90 0f01 	teqne	r0, r1
 80059a4:	bf58      	it	pl
 80059a6:	ebb2 0003 	subspl.w	r0, r2, r3
 80059aa:	bf88      	it	hi
 80059ac:	17c8      	asrhi	r0, r1, #31
 80059ae:	bf38      	it	cc
 80059b0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80059b4:	bf18      	it	ne
 80059b6:	f040 0001 	orrne.w	r0, r0, #1
 80059ba:	4770      	bx	lr
 80059bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80059c0:	d102      	bne.n	80059c8 <__cmpsf2+0x4c>
 80059c2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80059c6:	d105      	bne.n	80059d4 <__cmpsf2+0x58>
 80059c8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80059cc:	d1e4      	bne.n	8005998 <__cmpsf2+0x1c>
 80059ce:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80059d2:	d0e1      	beq.n	8005998 <__cmpsf2+0x1c>
 80059d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop

080059dc <__aeabi_cfrcmple>:
 80059dc:	4684      	mov	ip, r0
 80059de:	4608      	mov	r0, r1
 80059e0:	4661      	mov	r1, ip
 80059e2:	e7ff      	b.n	80059e4 <__aeabi_cfcmpeq>

080059e4 <__aeabi_cfcmpeq>:
 80059e4:	b50f      	push	{r0, r1, r2, r3, lr}
 80059e6:	f7ff ffc9 	bl	800597c <__cmpsf2>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	bf48      	it	mi
 80059ee:	f110 0f00 	cmnmi.w	r0, #0
 80059f2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080059f4 <__aeabi_fcmpeq>:
 80059f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80059f8:	f7ff fff4 	bl	80059e4 <__aeabi_cfcmpeq>
 80059fc:	bf0c      	ite	eq
 80059fe:	2001      	moveq	r0, #1
 8005a00:	2000      	movne	r0, #0
 8005a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a06:	bf00      	nop

08005a08 <__aeabi_fcmplt>:
 8005a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a0c:	f7ff ffea 	bl	80059e4 <__aeabi_cfcmpeq>
 8005a10:	bf34      	ite	cc
 8005a12:	2001      	movcc	r0, #1
 8005a14:	2000      	movcs	r0, #0
 8005a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a1a:	bf00      	nop

08005a1c <__aeabi_fcmple>:
 8005a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a20:	f7ff ffe0 	bl	80059e4 <__aeabi_cfcmpeq>
 8005a24:	bf94      	ite	ls
 8005a26:	2001      	movls	r0, #1
 8005a28:	2000      	movhi	r0, #0
 8005a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a2e:	bf00      	nop

08005a30 <__aeabi_fcmpge>:
 8005a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a34:	f7ff ffd2 	bl	80059dc <__aeabi_cfrcmple>
 8005a38:	bf94      	ite	ls
 8005a3a:	2001      	movls	r0, #1
 8005a3c:	2000      	movhi	r0, #0
 8005a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a42:	bf00      	nop

08005a44 <__aeabi_fcmpgt>:
 8005a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005a48:	f7ff ffc8 	bl	80059dc <__aeabi_cfrcmple>
 8005a4c:	bf34      	ite	cc
 8005a4e:	2001      	movcc	r0, #1
 8005a50:	2000      	movcs	r0, #0
 8005a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8005a56:	bf00      	nop

08005a58 <__aeabi_f2iz>:
 8005a58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005a5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005a60:	d30f      	bcc.n	8005a82 <__aeabi_f2iz+0x2a>
 8005a62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005a66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005a6a:	d90d      	bls.n	8005a88 <__aeabi_f2iz+0x30>
 8005a6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005a78:	fa23 f002 	lsr.w	r0, r3, r2
 8005a7c:	bf18      	it	ne
 8005a7e:	4240      	negne	r0, r0
 8005a80:	4770      	bx	lr
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	4770      	bx	lr
 8005a88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005a8c:	d101      	bne.n	8005a92 <__aeabi_f2iz+0x3a>
 8005a8e:	0242      	lsls	r2, r0, #9
 8005a90:	d105      	bne.n	8005a9e <__aeabi_f2iz+0x46>
 8005a92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8005a96:	bf08      	it	eq
 8005a98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005a9c:	4770      	bx	lr
 8005a9e:	f04f 0000 	mov.w	r0, #0
 8005aa2:	4770      	bx	lr

08005aa4 <selfrel_offset31>:
 8005aa4:	6803      	ldr	r3, [r0, #0]
 8005aa6:	005a      	lsls	r2, r3, #1
 8005aa8:	bf4c      	ite	mi
 8005aaa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005aae:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8005ab2:	4418      	add	r0, r3
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop

08005ab8 <search_EIT_table>:
 8005ab8:	b361      	cbz	r1, 8005b14 <search_EIT_table+0x5c>
 8005aba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abe:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8005ac2:	4690      	mov	r8, r2
 8005ac4:	4606      	mov	r6, r0
 8005ac6:	46d1      	mov	r9, sl
 8005ac8:	2700      	movs	r7, #0
 8005aca:	eb07 0409 	add.w	r4, r7, r9
 8005ace:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8005ad2:	1064      	asrs	r4, r4, #1
 8005ad4:	00e5      	lsls	r5, r4, #3
 8005ad6:	1971      	adds	r1, r6, r5
 8005ad8:	4608      	mov	r0, r1
 8005ada:	f7ff ffe3 	bl	8005aa4 <selfrel_offset31>
 8005ade:	45a2      	cmp	sl, r4
 8005ae0:	4683      	mov	fp, r0
 8005ae2:	f105 0008 	add.w	r0, r5, #8
 8005ae6:	4430      	add	r0, r6
 8005ae8:	d009      	beq.n	8005afe <search_EIT_table+0x46>
 8005aea:	f7ff ffdb 	bl	8005aa4 <selfrel_offset31>
 8005aee:	45c3      	cmp	fp, r8
 8005af0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8005af4:	d805      	bhi.n	8005b02 <search_EIT_table+0x4a>
 8005af6:	4540      	cmp	r0, r8
 8005af8:	d209      	bcs.n	8005b0e <search_EIT_table+0x56>
 8005afa:	1c67      	adds	r7, r4, #1
 8005afc:	e7e5      	b.n	8005aca <search_EIT_table+0x12>
 8005afe:	45c3      	cmp	fp, r8
 8005b00:	d905      	bls.n	8005b0e <search_EIT_table+0x56>
 8005b02:	42a7      	cmp	r7, r4
 8005b04:	d002      	beq.n	8005b0c <search_EIT_table+0x54>
 8005b06:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8005b0a:	e7de      	b.n	8005aca <search_EIT_table+0x12>
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4608      	mov	r0, r1
 8005b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	4608      	mov	r0, r1
 8005b16:	4770      	bx	lr

08005b18 <__gnu_unwind_get_pr_addr>:
 8005b18:	2801      	cmp	r0, #1
 8005b1a:	d007      	beq.n	8005b2c <__gnu_unwind_get_pr_addr+0x14>
 8005b1c:	2802      	cmp	r0, #2
 8005b1e:	d007      	beq.n	8005b30 <__gnu_unwind_get_pr_addr+0x18>
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <__gnu_unwind_get_pr_addr+0x1c>)
 8005b22:	2800      	cmp	r0, #0
 8005b24:	bf0c      	ite	eq
 8005b26:	4618      	moveq	r0, r3
 8005b28:	2000      	movne	r0, #0
 8005b2a:	4770      	bx	lr
 8005b2c:	4802      	ldr	r0, [pc, #8]	; (8005b38 <__gnu_unwind_get_pr_addr+0x20>)
 8005b2e:	4770      	bx	lr
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <__gnu_unwind_get_pr_addr+0x24>)
 8005b32:	4770      	bx	lr
 8005b34:	0800622d 	.word	0x0800622d
 8005b38:	08006231 	.word	0x08006231
 8005b3c:	08006235 	.word	0x08006235

08005b40 <get_eit_entry>:
 8005b40:	b530      	push	{r4, r5, lr}
 8005b42:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <get_eit_entry+0x98>)
 8005b44:	b083      	sub	sp, #12
 8005b46:	4604      	mov	r4, r0
 8005b48:	1e8d      	subs	r5, r1, #2
 8005b4a:	b37b      	cbz	r3, 8005bac <get_eit_entry+0x6c>
 8005b4c:	a901      	add	r1, sp, #4
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f3af 8000 	nop.w
 8005b54:	b320      	cbz	r0, 8005ba0 <get_eit_entry+0x60>
 8005b56:	9901      	ldr	r1, [sp, #4]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	f7ff ffad 	bl	8005ab8 <search_EIT_table>
 8005b5e:	4601      	mov	r1, r0
 8005b60:	b1f0      	cbz	r0, 8005ba0 <get_eit_entry+0x60>
 8005b62:	f7ff ff9f 	bl	8005aa4 <selfrel_offset31>
 8005b66:	684b      	ldr	r3, [r1, #4]
 8005b68:	64a0      	str	r0, [r4, #72]	; 0x48
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d012      	beq.n	8005b94 <get_eit_entry+0x54>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f101 0004 	add.w	r0, r1, #4
 8005b74:	db21      	blt.n	8005bba <get_eit_entry+0x7a>
 8005b76:	f7ff ff95 	bl	8005aa4 <selfrel_offset31>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005b7e:	6523      	str	r3, [r4, #80]	; 0x50
 8005b80:	6803      	ldr	r3, [r0, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	db1d      	blt.n	8005bc2 <get_eit_entry+0x82>
 8005b86:	f7ff ff8d 	bl	8005aa4 <selfrel_offset31>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6120      	str	r0, [r4, #16]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	b003      	add	sp, #12
 8005b92:	bd30      	pop	{r4, r5, pc}
 8005b94:	2300      	movs	r3, #0
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	2305      	movs	r3, #5
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	b003      	add	sp, #12
 8005b9e:	bd30      	pop	{r4, r5, pc}
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	6123      	str	r3, [r4, #16]
 8005ba4:	2309      	movs	r3, #9
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	b003      	add	sp, #12
 8005baa:	bd30      	pop	{r4, r5, pc}
 8005bac:	490b      	ldr	r1, [pc, #44]	; (8005bdc <get_eit_entry+0x9c>)
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <get_eit_entry+0xa0>)
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	1a59      	subs	r1, r3, r1
 8005bb4:	10c9      	asrs	r1, r1, #3
 8005bb6:	9101      	str	r1, [sp, #4]
 8005bb8:	e7ce      	b.n	8005b58 <get_eit_entry+0x18>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005bbe:	6523      	str	r3, [r4, #80]	; 0x50
 8005bc0:	e7de      	b.n	8005b80 <get_eit_entry+0x40>
 8005bc2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005bc6:	f7ff ffa7 	bl	8005b18 <__gnu_unwind_get_pr_addr>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	6120      	str	r0, [r4, #16]
 8005bce:	bf14      	ite	ne
 8005bd0:	2300      	movne	r3, #0
 8005bd2:	2309      	moveq	r3, #9
 8005bd4:	e7db      	b.n	8005b8e <get_eit_entry+0x4e>
 8005bd6:	bf00      	nop
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	08014084 	.word	0x08014084
 8005be0:	08014244 	.word	0x08014244

08005be4 <restore_non_core_regs>:
 8005be4:	6803      	ldr	r3, [r0, #0]
 8005be6:	b510      	push	{r4, lr}
 8005be8:	07da      	lsls	r2, r3, #31
 8005bea:	4604      	mov	r4, r0
 8005bec:	d406      	bmi.n	8005bfc <restore_non_core_regs+0x18>
 8005bee:	079b      	lsls	r3, r3, #30
 8005bf0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005bf4:	d509      	bpl.n	8005c0a <restore_non_core_regs+0x26>
 8005bf6:	f000 fc5b 	bl	80064b0 <__gnu_Unwind_Restore_VFP_D>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	0759      	lsls	r1, r3, #29
 8005bfe:	d509      	bpl.n	8005c14 <restore_non_core_regs+0x30>
 8005c00:	071a      	lsls	r2, r3, #28
 8005c02:	d50e      	bpl.n	8005c22 <restore_non_core_regs+0x3e>
 8005c04:	06db      	lsls	r3, r3, #27
 8005c06:	d513      	bpl.n	8005c30 <restore_non_core_regs+0x4c>
 8005c08:	bd10      	pop	{r4, pc}
 8005c0a:	f000 fc49 	bl	80064a0 <__gnu_Unwind_Restore_VFP>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	0759      	lsls	r1, r3, #29
 8005c12:	d4f5      	bmi.n	8005c00 <restore_non_core_regs+0x1c>
 8005c14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c18:	f000 fc52 	bl	80064c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	071a      	lsls	r2, r3, #28
 8005c20:	d4f0      	bmi.n	8005c04 <restore_non_core_regs+0x20>
 8005c22:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8005c26:	f000 fc53 	bl	80064d0 <__gnu_Unwind_Restore_WMMXD>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	06db      	lsls	r3, r3, #27
 8005c2e:	d4eb      	bmi.n	8005c08 <restore_non_core_regs+0x24>
 8005c30:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8005c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c38:	f000 bc8e 	b.w	8006558 <__gnu_Unwind_Restore_WMMXC>

08005c3c <_Unwind_decode_typeinfo_ptr.isra.0>:
 8005c3c:	6803      	ldr	r3, [r0, #0]
 8005c3e:	b10b      	cbz	r3, 8005c44 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8005c40:	4418      	add	r0, r3
 8005c42:	4770      	bx	lr
 8005c44:	4618      	mov	r0, r3
 8005c46:	4770      	bx	lr

08005c48 <__gnu_unwind_24bit.isra.1>:
 8005c48:	2009      	movs	r0, #9
 8005c4a:	4770      	bx	lr

08005c4c <_Unwind_DebugHook>:
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop

08005c50 <unwind_phase2>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	4604      	mov	r4, r0
 8005c54:	460d      	mov	r5, r1
 8005c56:	e008      	b.n	8005c6a <unwind_phase2+0x1a>
 8005c58:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	6162      	str	r2, [r4, #20]
 8005c5e:	4621      	mov	r1, r4
 8005c60:	462a      	mov	r2, r5
 8005c62:	2001      	movs	r0, #1
 8005c64:	4798      	blx	r3
 8005c66:	2808      	cmp	r0, #8
 8005c68:	d108      	bne.n	8005c7c <unwind_phase2+0x2c>
 8005c6a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7ff ff67 	bl	8005b40 <get_eit_entry>
 8005c72:	4606      	mov	r6, r0
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d0ef      	beq.n	8005c58 <unwind_phase2+0x8>
 8005c78:	f00b f97d 	bl	8010f76 <abort>
 8005c7c:	2807      	cmp	r0, #7
 8005c7e:	d1fb      	bne.n	8005c78 <unwind_phase2+0x28>
 8005c80:	4630      	mov	r0, r6
 8005c82:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005c84:	f7ff ffe2 	bl	8005c4c <_Unwind_DebugHook>
 8005c88:	1d28      	adds	r0, r5, #4
 8005c8a:	f000 fbfd 	bl	8006488 <__restore_core_regs>
 8005c8e:	bf00      	nop

08005c90 <unwind_phase2_forced>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	4606      	mov	r6, r0
 8005c96:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8005c9a:	ad03      	add	r5, sp, #12
 8005c9c:	1d0c      	adds	r4, r1, #4
 8005c9e:	4617      	mov	r7, r2
 8005ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005cb0:	ac02      	add	r4, sp, #8
 8005cb2:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005cb6:	f8d6 9018 	ldr.w	r9, [r6, #24]
 8005cba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	f7ff ff3b 	bl	8005b40 <get_eit_entry>
 8005cca:	4605      	mov	r5, r0
 8005ccc:	2f00      	cmp	r7, #0
 8005cce:	bf14      	ite	ne
 8005cd0:	270a      	movne	r7, #10
 8005cd2:	2709      	moveq	r7, #9
 8005cd4:	b17d      	cbz	r5, 8005cf6 <unwind_phase2_forced+0x66>
 8005cd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd8:	f047 0110 	orr.w	r1, r7, #16
 8005cdc:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005ce0:	4632      	mov	r2, r6
 8005ce2:	6463      	str	r3, [r4, #68]	; 0x44
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	4633      	mov	r3, r6
 8005ce8:	47c0      	blx	r8
 8005cea:	bb78      	cbnz	r0, 8005d4c <unwind_phase2_forced+0xbc>
 8005cec:	4628      	mov	r0, r5
 8005cee:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cf8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005cfc:	6173      	str	r3, [r6, #20]
 8005cfe:	4621      	mov	r1, r4
 8005d00:	a87a      	add	r0, sp, #488	; 0x1e8
 8005d02:	f00b f9f4 	bl	80110ee <memcpy>
 8005d06:	6933      	ldr	r3, [r6, #16]
 8005d08:	aa7a      	add	r2, sp, #488	; 0x1e8
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	4798      	blx	r3
 8005d10:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8005d12:	4682      	mov	sl, r0
 8005d14:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005d18:	4639      	mov	r1, r7
 8005d1a:	6463      	str	r3, [r4, #68]	; 0x44
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	4633      	mov	r3, r6
 8005d20:	2001      	movs	r0, #1
 8005d22:	47c0      	blx	r8
 8005d24:	b990      	cbnz	r0, 8005d4c <unwind_phase2_forced+0xbc>
 8005d26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005d2a:	a97a      	add	r1, sp, #488	; 0x1e8
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f00b f9de 	bl	80110ee <memcpy>
 8005d32:	f1ba 0f08 	cmp.w	sl, #8
 8005d36:	d106      	bne.n	8005d46 <unwind_phase2_forced+0xb6>
 8005d38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff ff00 	bl	8005b40 <get_eit_entry>
 8005d40:	2709      	movs	r7, #9
 8005d42:	4605      	mov	r5, r0
 8005d44:	e7c6      	b.n	8005cd4 <unwind_phase2_forced+0x44>
 8005d46:	f1ba 0f07 	cmp.w	sl, #7
 8005d4a:	d004      	beq.n	8005d56 <unwind_phase2_forced+0xc6>
 8005d4c:	2009      	movs	r0, #9
 8005d4e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d56:	4628      	mov	r0, r5
 8005d58:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d5a:	f7ff ff77 	bl	8005c4c <_Unwind_DebugHook>
 8005d5e:	a803      	add	r0, sp, #12
 8005d60:	f000 fb92 	bl	8006488 <__restore_core_regs>

08005d64 <_Unwind_GetCFA>:
 8005d64:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005d66:	4770      	bx	lr

08005d68 <__gnu_Unwind_RaiseException>:
 8005d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005d6c:	b0f9      	sub	sp, #484	; 0x1e4
 8005d6e:	640b      	str	r3, [r1, #64]	; 0x40
 8005d70:	1d0e      	adds	r6, r1, #4
 8005d72:	ad01      	add	r5, sp, #4
 8005d74:	460f      	mov	r7, r1
 8005d76:	4604      	mov	r4, r0
 8005d78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d7c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d84:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005d88:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005d8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005d90:	9600      	str	r6, [sp, #0]
 8005d92:	e006      	b.n	8005da2 <__gnu_Unwind_RaiseException+0x3a>
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	466a      	mov	r2, sp
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4798      	blx	r3
 8005d9c:	2808      	cmp	r0, #8
 8005d9e:	4605      	mov	r5, r0
 8005da0:	d108      	bne.n	8005db4 <__gnu_Unwind_RaiseException+0x4c>
 8005da2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff fecb 	bl	8005b40 <get_eit_entry>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d0f2      	beq.n	8005d94 <__gnu_Unwind_RaiseException+0x2c>
 8005dae:	2009      	movs	r0, #9
 8005db0:	b079      	add	sp, #484	; 0x1e4
 8005db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db4:	4668      	mov	r0, sp
 8005db6:	f7ff ff15 	bl	8005be4 <restore_non_core_regs>
 8005dba:	2d06      	cmp	r5, #6
 8005dbc:	d1f7      	bne.n	8005dae <__gnu_Unwind_RaiseException+0x46>
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff ff45 	bl	8005c50 <unwind_phase2>
 8005dc6:	bf00      	nop

08005dc8 <__gnu_Unwind_ForcedUnwind>:
 8005dc8:	b430      	push	{r4, r5}
 8005dca:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8005dcc:	60c1      	str	r1, [r0, #12]
 8005dce:	6182      	str	r2, [r0, #24]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	641d      	str	r5, [r3, #64]	; 0x40
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	bc30      	pop	{r4, r5}
 8005dd8:	e75a      	b.n	8005c90 <unwind_phase2_forced>
 8005dda:	bf00      	nop

08005ddc <__gnu_Unwind_Resume>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	6943      	ldr	r3, [r0, #20]
 8005de0:	68c6      	ldr	r6, [r0, #12]
 8005de2:	640b      	str	r3, [r1, #64]	; 0x40
 8005de4:	b126      	cbz	r6, 8005df0 <__gnu_Unwind_Resume+0x14>
 8005de6:	2201      	movs	r2, #1
 8005de8:	f7ff ff52 	bl	8005c90 <unwind_phase2_forced>
 8005dec:	f00b f8c3 	bl	8010f76 <abort>
 8005df0:	6903      	ldr	r3, [r0, #16]
 8005df2:	460a      	mov	r2, r1
 8005df4:	4604      	mov	r4, r0
 8005df6:	460d      	mov	r5, r1
 8005df8:	4601      	mov	r1, r0
 8005dfa:	2002      	movs	r0, #2
 8005dfc:	4798      	blx	r3
 8005dfe:	2807      	cmp	r0, #7
 8005e00:	d007      	beq.n	8005e12 <__gnu_Unwind_Resume+0x36>
 8005e02:	2808      	cmp	r0, #8
 8005e04:	d103      	bne.n	8005e0e <__gnu_Unwind_Resume+0x32>
 8005e06:	4629      	mov	r1, r5
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f7ff ff21 	bl	8005c50 <unwind_phase2>
 8005e0e:	f00b f8b2 	bl	8010f76 <abort>
 8005e12:	4630      	mov	r0, r6
 8005e14:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005e16:	f7ff ff19 	bl	8005c4c <_Unwind_DebugHook>
 8005e1a:	1d28      	adds	r0, r5, #4
 8005e1c:	f000 fb34 	bl	8006488 <__restore_core_regs>

08005e20 <__gnu_Unwind_Resume_or_Rethrow>:
 8005e20:	68c2      	ldr	r2, [r0, #12]
 8005e22:	b12a      	cbz	r2, 8005e30 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8005e24:	b410      	push	{r4}
 8005e26:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8005e28:	2200      	movs	r2, #0
 8005e2a:	640c      	str	r4, [r1, #64]	; 0x40
 8005e2c:	bc10      	pop	{r4}
 8005e2e:	e72f      	b.n	8005c90 <unwind_phase2_forced>
 8005e30:	e79a      	b.n	8005d68 <__gnu_Unwind_RaiseException>
 8005e32:	bf00      	nop

08005e34 <_Unwind_Complete>:
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop

08005e38 <_Unwind_DeleteException>:
 8005e38:	6883      	ldr	r3, [r0, #8]
 8005e3a:	b113      	cbz	r3, 8005e42 <_Unwind_DeleteException+0xa>
 8005e3c:	4601      	mov	r1, r0
 8005e3e:	2001      	movs	r0, #1
 8005e40:	4718      	bx	r3
 8005e42:	4770      	bx	lr

08005e44 <_Unwind_VRS_Get>:
 8005e44:	b500      	push	{lr}
 8005e46:	2904      	cmp	r1, #4
 8005e48:	d807      	bhi.n	8005e5a <_Unwind_VRS_Get+0x16>
 8005e4a:	e8df f001 	tbb	[pc, r1]
 8005e4e:	0903      	.short	0x0903
 8005e50:	0906      	.short	0x0906
 8005e52:	09          	.byte	0x09
 8005e53:	00          	.byte	0x00
 8005e54:	b90b      	cbnz	r3, 8005e5a <_Unwind_VRS_Get+0x16>
 8005e56:	2a0f      	cmp	r2, #15
 8005e58:	d905      	bls.n	8005e66 <_Unwind_VRS_Get+0x22>
 8005e5a:	2002      	movs	r0, #2
 8005e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e60:	2001      	movs	r0, #1
 8005e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e66:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e6a:	6852      	ldr	r2, [r2, #4]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e76:	bf00      	nop

08005e78 <_Unwind_GetGR>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	ac03      	add	r4, sp, #12
 8005e80:	460a      	mov	r2, r1
 8005e82:	9400      	str	r4, [sp, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	f7ff ffdd 	bl	8005e44 <_Unwind_VRS_Get>
 8005e8a:	9803      	ldr	r0, [sp, #12]
 8005e8c:	b004      	add	sp, #16
 8005e8e:	bd10      	pop	{r4, pc}

08005e90 <_Unwind_VRS_Set>:
 8005e90:	b500      	push	{lr}
 8005e92:	2904      	cmp	r1, #4
 8005e94:	d807      	bhi.n	8005ea6 <_Unwind_VRS_Set+0x16>
 8005e96:	e8df f001 	tbb	[pc, r1]
 8005e9a:	0903      	.short	0x0903
 8005e9c:	0906      	.short	0x0906
 8005e9e:	09          	.byte	0x09
 8005e9f:	00          	.byte	0x00
 8005ea0:	b90b      	cbnz	r3, 8005ea6 <_Unwind_VRS_Set+0x16>
 8005ea2:	2a0f      	cmp	r2, #15
 8005ea4:	d905      	bls.n	8005eb2 <_Unwind_VRS_Set+0x22>
 8005ea6:	2002      	movs	r0, #2
 8005ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eac:	2001      	movs	r0, #1
 8005eae:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eb2:	9901      	ldr	r1, [sp, #4]
 8005eb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005eb8:	6809      	ldr	r1, [r1, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	6051      	str	r1, [r2, #4]
 8005ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ec2:	bf00      	nop

08005ec4 <_Unwind_SetGR>:
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	ac04      	add	r4, sp, #16
 8005eca:	f844 2d04 	str.w	r2, [r4, #-4]!
 8005ece:	2300      	movs	r3, #0
 8005ed0:	460a      	mov	r2, r1
 8005ed2:	9400      	str	r4, [sp, #0]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f7ff ffdb 	bl	8005e90 <_Unwind_VRS_Set>
 8005eda:	b004      	add	sp, #16
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop

08005ee0 <__gnu_Unwind_Backtrace>:
 8005ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ee2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005ee4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eea:	1d15      	adds	r5, r2, #4
 8005eec:	ac17      	add	r4, sp, #92	; 0x5c
 8005eee:	4607      	mov	r7, r0
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005efe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005f06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005f0a:	9516      	str	r5, [sp, #88]	; 0x58
 8005f0c:	e011      	b.n	8005f32 <__gnu_Unwind_Backtrace+0x52>
 8005f0e:	a816      	add	r0, sp, #88	; 0x58
 8005f10:	466a      	mov	r2, sp
 8005f12:	f7ff ffd7 	bl	8005ec4 <_Unwind_SetGR>
 8005f16:	4631      	mov	r1, r6
 8005f18:	a816      	add	r0, sp, #88	; 0x58
 8005f1a:	47b8      	blx	r7
 8005f1c:	b980      	cbnz	r0, 8005f40 <__gnu_Unwind_Backtrace+0x60>
 8005f1e:	9b04      	ldr	r3, [sp, #16]
 8005f20:	aa16      	add	r2, sp, #88	; 0x58
 8005f22:	4669      	mov	r1, sp
 8005f24:	2008      	movs	r0, #8
 8005f26:	4798      	blx	r3
 8005f28:	2805      	cmp	r0, #5
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	d009      	beq.n	8005f42 <__gnu_Unwind_Backtrace+0x62>
 8005f2e:	2809      	cmp	r0, #9
 8005f30:	d006      	beq.n	8005f40 <__gnu_Unwind_Backtrace+0x60>
 8005f32:	9926      	ldr	r1, [sp, #152]	; 0x98
 8005f34:	4668      	mov	r0, sp
 8005f36:	f7ff fe03 	bl	8005b40 <get_eit_entry>
 8005f3a:	210c      	movs	r1, #12
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	d0e6      	beq.n	8005f0e <__gnu_Unwind_Backtrace+0x2e>
 8005f40:	2409      	movs	r4, #9
 8005f42:	a816      	add	r0, sp, #88	; 0x58
 8005f44:	f7ff fe4e 	bl	8005be4 <restore_non_core_regs>
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8005f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f50 <__gnu_unwind_pr_common>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8005f56:	4691      	mov	r9, r2
 8005f58:	6822      	ldr	r2, [r4, #0]
 8005f5a:	b08b      	sub	sp, #44	; 0x2c
 8005f5c:	3404      	adds	r4, #4
 8005f5e:	460d      	mov	r5, r1
 8005f60:	9207      	str	r2, [sp, #28]
 8005f62:	9408      	str	r4, [sp, #32]
 8005f64:	f000 0b03 	and.w	fp, r0, #3
 8005f68:	461e      	mov	r6, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d164      	bne.n	8006038 <__gnu_unwind_pr_common+0xe8>
 8005f6e:	0212      	lsls	r2, r2, #8
 8005f70:	2303      	movs	r3, #3
 8005f72:	9207      	str	r2, [sp, #28]
 8005f74:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8005f78:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8005f7c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005f7e:	f1bb 0f02 	cmp.w	fp, #2
 8005f82:	bf08      	it	eq
 8005f84:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8005f86:	f013 0301 	ands.w	r3, r3, #1
 8005f8a:	d143      	bne.n	8006014 <__gnu_unwind_pr_common+0xc4>
 8005f8c:	f000 0008 	and.w	r0, r0, #8
 8005f90:	b2c2      	uxtb	r2, r0
 8005f92:	9203      	str	r2, [sp, #12]
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	6827      	ldr	r7, [r4, #0]
 8005f98:	2f00      	cmp	r7, #0
 8005f9a:	d03d      	beq.n	8006018 <__gnu_unwind_pr_common+0xc8>
 8005f9c:	2e02      	cmp	r6, #2
 8005f9e:	d047      	beq.n	8006030 <__gnu_unwind_pr_common+0xe0>
 8005fa0:	8827      	ldrh	r7, [r4, #0]
 8005fa2:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 8005fa6:	3404      	adds	r4, #4
 8005fa8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8005faa:	f028 0a01 	bic.w	sl, r8, #1
 8005fae:	210f      	movs	r1, #15
 8005fb0:	4648      	mov	r0, r9
 8005fb2:	449a      	add	sl, r3
 8005fb4:	f7ff ff60 	bl	8005e78 <_Unwind_GetGR>
 8005fb8:	4582      	cmp	sl, r0
 8005fba:	d837      	bhi.n	800602c <__gnu_unwind_pr_common+0xdc>
 8005fbc:	f027 0301 	bic.w	r3, r7, #1
 8005fc0:	449a      	add	sl, r3
 8005fc2:	4550      	cmp	r0, sl
 8005fc4:	bf2c      	ite	cs
 8005fc6:	2000      	movcs	r0, #0
 8005fc8:	2001      	movcc	r0, #1
 8005fca:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8005fce:	f008 0802 	and.w	r8, r8, #2
 8005fd2:	f007 0701 	and.w	r7, r7, #1
 8005fd6:	ea48 0807 	orr.w	r8, r8, r7
 8005fda:	f1b8 0f01 	cmp.w	r8, #1
 8005fde:	d041      	beq.n	8006064 <__gnu_unwind_pr_common+0x114>
 8005fe0:	d338      	bcc.n	8006054 <__gnu_unwind_pr_common+0x104>
 8005fe2:	f1b8 0f02 	cmp.w	r8, #2
 8005fe6:	d11d      	bne.n	8006024 <__gnu_unwind_pr_common+0xd4>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fee:	9202      	str	r2, [sp, #8]
 8005ff0:	f1bb 0f00 	cmp.w	fp, #0
 8005ff4:	d179      	bne.n	80060ea <__gnu_unwind_pr_common+0x19a>
 8005ff6:	b130      	cbz	r0, 8006006 <__gnu_unwind_pr_common+0xb6>
 8005ff8:	9903      	ldr	r1, [sp, #12]
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	f000 8081 	beq.w	8006102 <__gnu_unwind_pr_common+0x1b2>
 8006000:	2a00      	cmp	r2, #0
 8006002:	f000 80a8 	beq.w	8006156 <__gnu_unwind_pr_common+0x206>
 8006006:	2b00      	cmp	r3, #0
 8006008:	db79      	blt.n	80060fe <__gnu_unwind_pr_common+0x1ae>
 800600a:	9b02      	ldr	r3, [sp, #8]
 800600c:	3301      	adds	r3, #1
 800600e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006012:	e7c0      	b.n	8005f96 <__gnu_unwind_pr_common+0x46>
 8006014:	2300      	movs	r3, #0
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	2e02      	cmp	r6, #2
 800601a:	dd40      	ble.n	800609e <__gnu_unwind_pr_common+0x14e>
 800601c:	f7ff fe14 	bl	8005c48 <__gnu_unwind_24bit.isra.1>
 8006020:	2800      	cmp	r0, #0
 8006022:	d042      	beq.n	80060aa <__gnu_unwind_pr_common+0x15a>
 8006024:	2009      	movs	r0, #9
 8006026:	b00b      	add	sp, #44	; 0x2c
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602c:	2000      	movs	r0, #0
 800602e:	e7cc      	b.n	8005fca <__gnu_unwind_pr_common+0x7a>
 8006030:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8006034:	3408      	adds	r4, #8
 8006036:	e7b7      	b.n	8005fa8 <__gnu_unwind_pr_common+0x58>
 8006038:	2b02      	cmp	r3, #2
 800603a:	dc9f      	bgt.n	8005f7c <__gnu_unwind_pr_common+0x2c>
 800603c:	0c13      	lsrs	r3, r2, #16
 800603e:	b2d9      	uxtb	r1, r3
 8006040:	0412      	lsls	r2, r2, #16
 8006042:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8006046:	2302      	movs	r3, #2
 8006048:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800604c:	9207      	str	r2, [sp, #28]
 800604e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8006052:	e793      	b.n	8005f7c <__gnu_unwind_pr_common+0x2c>
 8006054:	f1bb 0f00 	cmp.w	fp, #0
 8006058:	d002      	beq.n	8006060 <__gnu_unwind_pr_common+0x110>
 800605a:	2800      	cmp	r0, #0
 800605c:	f040 80b0 	bne.w	80061c0 <__gnu_unwind_pr_common+0x270>
 8006060:	3404      	adds	r4, #4
 8006062:	e798      	b.n	8005f96 <__gnu_unwind_pr_common+0x46>
 8006064:	f1bb 0f00 	cmp.w	fp, #0
 8006068:	d126      	bne.n	80060b8 <__gnu_unwind_pr_common+0x168>
 800606a:	b1b0      	cbz	r0, 800609a <__gnu_unwind_pr_common+0x14a>
 800606c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8006070:	1c99      	adds	r1, r3, #2
 8006072:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8006076:	d0d5      	beq.n	8006024 <__gnu_unwind_pr_common+0xd4>
 8006078:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800607c:	3301      	adds	r3, #1
 800607e:	9106      	str	r1, [sp, #24]
 8006080:	f000 8094 	beq.w	80061ac <__gnu_unwind_pr_common+0x25c>
 8006084:	1d20      	adds	r0, r4, #4
 8006086:	f7ff fdd9 	bl	8005c3c <_Unwind_decode_typeinfo_ptr.isra.0>
 800608a:	ab06      	add	r3, sp, #24
 800608c:	4601      	mov	r1, r0
 800608e:	4628      	mov	r0, r5
 8006090:	f00a fd06 	bl	8010aa0 <__cxa_type_match>
 8006094:	2800      	cmp	r0, #0
 8006096:	f040 80b8 	bne.w	800620a <__gnu_unwind_pr_common+0x2ba>
 800609a:	3408      	adds	r4, #8
 800609c:	e77b      	b.n	8005f96 <__gnu_unwind_pr_common+0x46>
 800609e:	a907      	add	r1, sp, #28
 80060a0:	4648      	mov	r0, r9
 80060a2:	f000 faf3 	bl	800668c <__gnu_unwind_execute>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d1bc      	bne.n	8006024 <__gnu_unwind_pr_common+0xd4>
 80060aa:	9b01      	ldr	r3, [sp, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d15c      	bne.n	800616a <__gnu_unwind_pr_common+0x21a>
 80060b0:	2008      	movs	r0, #8
 80060b2:	b00b      	add	sp, #44	; 0x2c
 80060b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b8:	210d      	movs	r1, #13
 80060ba:	4648      	mov	r0, r9
 80060bc:	6a2f      	ldr	r7, [r5, #32]
 80060be:	f7ff fedb 	bl	8005e78 <_Unwind_GetGR>
 80060c2:	4287      	cmp	r7, r0
 80060c4:	d1e9      	bne.n	800609a <__gnu_unwind_pr_common+0x14a>
 80060c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80060c8:	429c      	cmp	r4, r3
 80060ca:	d1e6      	bne.n	800609a <__gnu_unwind_pr_common+0x14a>
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7ff fce9 	bl	8005aa4 <selfrel_offset31>
 80060d2:	210f      	movs	r1, #15
 80060d4:	4602      	mov	r2, r0
 80060d6:	4648      	mov	r0, r9
 80060d8:	f7ff fef4 	bl	8005ec4 <_Unwind_SetGR>
 80060dc:	4648      	mov	r0, r9
 80060de:	462a      	mov	r2, r5
 80060e0:	2100      	movs	r1, #0
 80060e2:	f7ff feef 	bl	8005ec4 <_Unwind_SetGR>
 80060e6:	2007      	movs	r0, #7
 80060e8:	e79d      	b.n	8006026 <__gnu_unwind_pr_common+0xd6>
 80060ea:	210d      	movs	r1, #13
 80060ec:	4648      	mov	r0, r9
 80060ee:	6a2f      	ldr	r7, [r5, #32]
 80060f0:	f7ff fec2 	bl	8005e78 <_Unwind_GetGR>
 80060f4:	4287      	cmp	r7, r0
 80060f6:	d048      	beq.n	800618a <__gnu_unwind_pr_common+0x23a>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	da85      	bge.n	800600a <__gnu_unwind_pr_common+0xba>
 80060fe:	3404      	adds	r4, #4
 8006100:	e783      	b.n	800600a <__gnu_unwind_pr_common+0xba>
 8006102:	9b02      	ldr	r3, [sp, #8]
 8006104:	b33b      	cbz	r3, 8006156 <__gnu_unwind_pr_common+0x206>
 8006106:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800610a:	1d27      	adds	r7, r4, #4
 800610c:	f8cd b010 	str.w	fp, [sp, #16]
 8006110:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006114:	46a3      	mov	fp, r4
 8006116:	f8dd a008 	ldr.w	sl, [sp, #8]
 800611a:	461c      	mov	r4, r3
 800611c:	9605      	str	r6, [sp, #20]
 800611e:	e002      	b.n	8006126 <__gnu_unwind_pr_common+0x1d6>
 8006120:	45b2      	cmp	sl, r6
 8006122:	46b0      	mov	r8, r6
 8006124:	d016      	beq.n	8006154 <__gnu_unwind_pr_common+0x204>
 8006126:	4638      	mov	r0, r7
 8006128:	9406      	str	r4, [sp, #24]
 800612a:	f7ff fd87 	bl	8005c3c <_Unwind_decode_typeinfo_ptr.isra.0>
 800612e:	ab06      	add	r3, sp, #24
 8006130:	4601      	mov	r1, r0
 8006132:	2200      	movs	r2, #0
 8006134:	4628      	mov	r0, r5
 8006136:	f00a fcb3 	bl	8010aa0 <__cxa_type_match>
 800613a:	f108 0601 	add.w	r6, r8, #1
 800613e:	3704      	adds	r7, #4
 8006140:	2800      	cmp	r0, #0
 8006142:	d0ed      	beq.n	8006120 <__gnu_unwind_pr_common+0x1d0>
 8006144:	9b02      	ldr	r3, [sp, #8]
 8006146:	465c      	mov	r4, fp
 8006148:	4543      	cmp	r3, r8
 800614a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800614e:	9e05      	ldr	r6, [sp, #20]
 8006150:	d1d2      	bne.n	80060f8 <__gnu_unwind_pr_common+0x1a8>
 8006152:	e000      	b.n	8006156 <__gnu_unwind_pr_common+0x206>
 8006154:	465c      	mov	r4, fp
 8006156:	4648      	mov	r0, r9
 8006158:	210d      	movs	r1, #13
 800615a:	f7ff fe8d 	bl	8005e78 <_Unwind_GetGR>
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	6228      	str	r0, [r5, #32]
 8006162:	62ac      	str	r4, [r5, #40]	; 0x28
 8006164:	626b      	str	r3, [r5, #36]	; 0x24
 8006166:	2006      	movs	r0, #6
 8006168:	e75d      	b.n	8006026 <__gnu_unwind_pr_common+0xd6>
 800616a:	210f      	movs	r1, #15
 800616c:	4648      	mov	r0, r9
 800616e:	f7ff fe83 	bl	8005e78 <_Unwind_GetGR>
 8006172:	210e      	movs	r1, #14
 8006174:	4602      	mov	r2, r0
 8006176:	4648      	mov	r0, r9
 8006178:	f7ff fea4 	bl	8005ec4 <_Unwind_SetGR>
 800617c:	4648      	mov	r0, r9
 800617e:	4a2a      	ldr	r2, [pc, #168]	; (8006228 <__gnu_unwind_pr_common+0x2d8>)
 8006180:	210f      	movs	r1, #15
 8006182:	f7ff fe9f 	bl	8005ec4 <_Unwind_SetGR>
 8006186:	2007      	movs	r0, #7
 8006188:	e74d      	b.n	8006026 <__gnu_unwind_pr_common+0xd6>
 800618a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800618c:	429c      	cmp	r4, r3
 800618e:	d1b3      	bne.n	80060f8 <__gnu_unwind_pr_common+0x1a8>
 8006190:	2204      	movs	r2, #4
 8006192:	9902      	ldr	r1, [sp, #8]
 8006194:	2700      	movs	r7, #0
 8006196:	18a3      	adds	r3, r4, r2
 8006198:	62a9      	str	r1, [r5, #40]	; 0x28
 800619a:	62ef      	str	r7, [r5, #44]	; 0x2c
 800619c:	632a      	str	r2, [r5, #48]	; 0x30
 800619e:	636b      	str	r3, [r5, #52]	; 0x34
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	42bb      	cmp	r3, r7
 80061a4:	db1f      	blt.n	80061e6 <__gnu_unwind_pr_common+0x296>
 80061a6:	2301      	movs	r3, #1
 80061a8:	9301      	str	r3, [sp, #4]
 80061aa:	e72e      	b.n	800600a <__gnu_unwind_pr_common+0xba>
 80061ac:	4648      	mov	r0, r9
 80061ae:	210d      	movs	r1, #13
 80061b0:	f7ff fe62 	bl	8005e78 <_Unwind_GetGR>
 80061b4:	6228      	str	r0, [r5, #32]
 80061b6:	9b06      	ldr	r3, [sp, #24]
 80061b8:	626b      	str	r3, [r5, #36]	; 0x24
 80061ba:	62ac      	str	r4, [r5, #40]	; 0x28
 80061bc:	2006      	movs	r0, #6
 80061be:	e732      	b.n	8006026 <__gnu_unwind_pr_common+0xd6>
 80061c0:	4620      	mov	r0, r4
 80061c2:	f7ff fc6f 	bl	8005aa4 <selfrel_offset31>
 80061c6:	3404      	adds	r4, #4
 80061c8:	4606      	mov	r6, r0
 80061ca:	63ac      	str	r4, [r5, #56]	; 0x38
 80061cc:	4628      	mov	r0, r5
 80061ce:	f00a fcc3 	bl	8010b58 <__cxa_begin_cleanup>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	f43f af26 	beq.w	8006024 <__gnu_unwind_pr_common+0xd4>
 80061d8:	4648      	mov	r0, r9
 80061da:	4632      	mov	r2, r6
 80061dc:	210f      	movs	r1, #15
 80061de:	f7ff fe71 	bl	8005ec4 <_Unwind_SetGR>
 80061e2:	2007      	movs	r0, #7
 80061e4:	e71f      	b.n	8006026 <__gnu_unwind_pr_common+0xd6>
 80061e6:	4608      	mov	r0, r1
 80061e8:	3001      	adds	r0, #1
 80061ea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80061ee:	f7ff fc59 	bl	8005aa4 <selfrel_offset31>
 80061f2:	210f      	movs	r1, #15
 80061f4:	4602      	mov	r2, r0
 80061f6:	4648      	mov	r0, r9
 80061f8:	f7ff fe64 	bl	8005ec4 <_Unwind_SetGR>
 80061fc:	4648      	mov	r0, r9
 80061fe:	462a      	mov	r2, r5
 8006200:	4639      	mov	r1, r7
 8006202:	f7ff fe5f 	bl	8005ec4 <_Unwind_SetGR>
 8006206:	2007      	movs	r0, #7
 8006208:	e70d      	b.n	8006026 <__gnu_unwind_pr_common+0xd6>
 800620a:	4607      	mov	r7, r0
 800620c:	210d      	movs	r1, #13
 800620e:	4648      	mov	r0, r9
 8006210:	f7ff fe32 	bl	8005e78 <_Unwind_GetGR>
 8006214:	2f02      	cmp	r7, #2
 8006216:	6228      	str	r0, [r5, #32]
 8006218:	d1cd      	bne.n	80061b6 <__gnu_unwind_pr_common+0x266>
 800621a:	462b      	mov	r3, r5
 800621c:	9a06      	ldr	r2, [sp, #24]
 800621e:	f843 2f2c 	str.w	r2, [r3, #44]!
 8006222:	626b      	str	r3, [r5, #36]	; 0x24
 8006224:	e7c9      	b.n	80061ba <__gnu_unwind_pr_common+0x26a>
 8006226:	bf00      	nop
 8006228:	08010d25 	.word	0x08010d25

0800622c <__aeabi_unwind_cpp_pr0>:
 800622c:	2300      	movs	r3, #0
 800622e:	e68f      	b.n	8005f50 <__gnu_unwind_pr_common>

08006230 <__aeabi_unwind_cpp_pr1>:
 8006230:	2301      	movs	r3, #1
 8006232:	e68d      	b.n	8005f50 <__gnu_unwind_pr_common>

08006234 <__aeabi_unwind_cpp_pr2>:
 8006234:	2302      	movs	r3, #2
 8006236:	e68b      	b.n	8005f50 <__gnu_unwind_pr_common>

08006238 <_Unwind_VRS_Pop>:
 8006238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623a:	4604      	mov	r4, r0
 800623c:	b0c5      	sub	sp, #276	; 0x114
 800623e:	2904      	cmp	r1, #4
 8006240:	d80d      	bhi.n	800625e <_Unwind_VRS_Pop+0x26>
 8006242:	e8df f001 	tbb	[pc, r1]
 8006246:	0357      	.short	0x0357
 8006248:	310c      	.short	0x310c
 800624a:	0f          	.byte	0x0f
 800624b:	00          	.byte	0x00
 800624c:	2b01      	cmp	r3, #1
 800624e:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8006252:	b295      	uxth	r5, r2
 8006254:	d166      	bne.n	8006324 <_Unwind_VRS_Pop+0xec>
 8006256:	1972      	adds	r2, r6, r5
 8006258:	2a10      	cmp	r2, #16
 800625a:	f240 809f 	bls.w	800639c <_Unwind_VRS_Pop+0x164>
 800625e:	2002      	movs	r0, #2
 8006260:	b045      	add	sp, #276	; 0x114
 8006262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1fa      	bne.n	800625e <_Unwind_VRS_Pop+0x26>
 8006268:	2a10      	cmp	r2, #16
 800626a:	d8f8      	bhi.n	800625e <_Unwind_VRS_Pop+0x26>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	06d8      	lsls	r0, r3, #27
 8006270:	f100 80c9 	bmi.w	8006406 <_Unwind_VRS_Pop+0x1ce>
 8006274:	ae22      	add	r6, sp, #136	; 0x88
 8006276:	4630      	mov	r0, r6
 8006278:	9201      	str	r2, [sp, #4]
 800627a:	f000 f977 	bl	800656c <__gnu_Unwind_Save_WMMXC>
 800627e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006280:	9a01      	ldr	r2, [sp, #4]
 8006282:	2300      	movs	r3, #0
 8006284:	2501      	movs	r5, #1
 8006286:	fa05 f103 	lsl.w	r1, r5, r3
 800628a:	4211      	tst	r1, r2
 800628c:	d003      	beq.n	8006296 <_Unwind_VRS_Pop+0x5e>
 800628e:	6801      	ldr	r1, [r0, #0]
 8006290:	3004      	adds	r0, #4
 8006292:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8006296:	3301      	adds	r3, #1
 8006298:	2b04      	cmp	r3, #4
 800629a:	d1f4      	bne.n	8006286 <_Unwind_VRS_Pop+0x4e>
 800629c:	63a0      	str	r0, [r4, #56]	; 0x38
 800629e:	4630      	mov	r0, r6
 80062a0:	f000 f95a 	bl	8006558 <__gnu_Unwind_Restore_WMMXC>
 80062a4:	2000      	movs	r0, #0
 80062a6:	e7db      	b.n	8006260 <_Unwind_VRS_Pop+0x28>
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d1d8      	bne.n	800625e <_Unwind_VRS_Pop+0x26>
 80062ac:	0c15      	lsrs	r5, r2, #16
 80062ae:	b297      	uxth	r7, r2
 80062b0:	19eb      	adds	r3, r5, r7
 80062b2:	2b10      	cmp	r3, #16
 80062b4:	d8d3      	bhi.n	800625e <_Unwind_VRS_Pop+0x26>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	071e      	lsls	r6, r3, #28
 80062ba:	f100 80b8 	bmi.w	800642e <_Unwind_VRS_Pop+0x1f6>
 80062be:	ae22      	add	r6, sp, #136	; 0x88
 80062c0:	4630      	mov	r0, r6
 80062c2:	007f      	lsls	r7, r7, #1
 80062c4:	f000 f926 	bl	8006514 <__gnu_Unwind_Save_WMMXD>
 80062c8:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80062cc:	1e7b      	subs	r3, r7, #1
 80062ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80062d0:	b157      	cbz	r7, 80062e8 <_Unwind_VRS_Pop+0xb0>
 80062d2:	4629      	mov	r1, r5
 80062d4:	3a04      	subs	r2, #4
 80062d6:	f851 0b04 	ldr.w	r0, [r1], #4
 80062da:	3b01      	subs	r3, #1
 80062dc:	f842 0f04 	str.w	r0, [r2, #4]!
 80062e0:	1c58      	adds	r0, r3, #1
 80062e2:	d1f8      	bne.n	80062d6 <_Unwind_VRS_Pop+0x9e>
 80062e4:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80062e8:	4630      	mov	r0, r6
 80062ea:	63a5      	str	r5, [r4, #56]	; 0x38
 80062ec:	f000 f8f0 	bl	80064d0 <__gnu_Unwind_Restore_WMMXD>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7b5      	b.n	8006260 <_Unwind_VRS_Pop+0x28>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1b2      	bne.n	800625e <_Unwind_VRS_Pop+0x26>
 80062f8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80062fa:	b297      	uxth	r7, r2
 80062fc:	1d20      	adds	r0, r4, #4
 80062fe:	2601      	movs	r6, #1
 8006300:	fa06 f103 	lsl.w	r1, r6, r3
 8006304:	4239      	tst	r1, r7
 8006306:	f103 0301 	add.w	r3, r3, #1
 800630a:	d002      	beq.n	8006312 <_Unwind_VRS_Pop+0xda>
 800630c:	6829      	ldr	r1, [r5, #0]
 800630e:	3504      	adds	r5, #4
 8006310:	6001      	str	r1, [r0, #0]
 8006312:	2b10      	cmp	r3, #16
 8006314:	f100 0004 	add.w	r0, r0, #4
 8006318:	d1f2      	bne.n	8006300 <_Unwind_VRS_Pop+0xc8>
 800631a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800631e:	d13b      	bne.n	8006398 <_Unwind_VRS_Pop+0x160>
 8006320:	63a5      	str	r5, [r4, #56]	; 0x38
 8006322:	e79d      	b.n	8006260 <_Unwind_VRS_Pop+0x28>
 8006324:	2b05      	cmp	r3, #5
 8006326:	d19a      	bne.n	800625e <_Unwind_VRS_Pop+0x26>
 8006328:	1977      	adds	r7, r6, r5
 800632a:	2f20      	cmp	r7, #32
 800632c:	d897      	bhi.n	800625e <_Unwind_VRS_Pop+0x26>
 800632e:	2e0f      	cmp	r6, #15
 8006330:	d965      	bls.n	80063fe <_Unwind_VRS_Pop+0x1c6>
 8006332:	462f      	mov	r7, r5
 8006334:	2d00      	cmp	r5, #0
 8006336:	d148      	bne.n	80063ca <_Unwind_VRS_Pop+0x192>
 8006338:	462a      	mov	r2, r5
 800633a:	2700      	movs	r7, #0
 800633c:	2a00      	cmp	r2, #0
 800633e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006340:	dd71      	ble.n	8006426 <_Unwind_VRS_Pop+0x1ee>
 8006342:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8006346:	4601      	mov	r1, r0
 8006348:	a844      	add	r0, sp, #272	; 0x110
 800634a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800634e:	388c      	subs	r0, #140	; 0x8c
 8006350:	f851 5b04 	ldr.w	r5, [r1], #4
 8006354:	4291      	cmp	r1, r2
 8006356:	f840 5f04 	str.w	r5, [r0, #4]!
 800635a:	d1f9      	bne.n	8006350 <_Unwind_VRS_Pop+0x118>
 800635c:	4608      	mov	r0, r1
 800635e:	b197      	cbz	r7, 8006386 <_Unwind_VRS_Pop+0x14e>
 8006360:	4632      	mov	r2, r6
 8006362:	2e10      	cmp	r6, #16
 8006364:	a944      	add	r1, sp, #272	; 0x110
 8006366:	bf38      	it	cc
 8006368:	2210      	movcc	r2, #16
 800636a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800636e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8006372:	0079      	lsls	r1, r7, #1
 8006374:	3a04      	subs	r2, #4
 8006376:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800637a:	f850 5b04 	ldr.w	r5, [r0], #4
 800637e:	4281      	cmp	r1, r0
 8006380:	f842 5f04 	str.w	r5, [r2, #4]!
 8006384:	d1f9      	bne.n	800637a <_Unwind_VRS_Pop+0x142>
 8006386:	2b01      	cmp	r3, #1
 8006388:	d047      	beq.n	800641a <_Unwind_VRS_Pop+0x1e2>
 800638a:	2e0f      	cmp	r6, #15
 800638c:	63a1      	str	r1, [r4, #56]	; 0x38
 800638e:	d932      	bls.n	80063f6 <_Unwind_VRS_Pop+0x1be>
 8006390:	b117      	cbz	r7, 8006398 <_Unwind_VRS_Pop+0x160>
 8006392:	a802      	add	r0, sp, #8
 8006394:	f000 f894 	bl	80064c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8006398:	2000      	movs	r0, #0
 800639a:	e761      	b.n	8006260 <_Unwind_VRS_Pop+0x28>
 800639c:	2e0f      	cmp	r6, #15
 800639e:	f63f af5e 	bhi.w	800625e <_Unwind_VRS_Pop+0x26>
 80063a2:	2700      	movs	r7, #0
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	07d1      	lsls	r1, r2, #31
 80063a8:	d50d      	bpl.n	80063c6 <_Unwind_VRS_Pop+0x18e>
 80063aa:	f022 0101 	bic.w	r1, r2, #1
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	6021      	str	r1, [r4, #0]
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	4620      	mov	r0, r4
 80063b6:	d052      	beq.n	800645e <_Unwind_VRS_Pop+0x226>
 80063b8:	f022 0203 	bic.w	r2, r2, #3
 80063bc:	f840 2b48 	str.w	r2, [r0], #72
 80063c0:	f000 f872 	bl	80064a8 <__gnu_Unwind_Save_VFP>
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	2f00      	cmp	r7, #0
 80063c8:	d051      	beq.n	800646e <_Unwind_VRS_Pop+0x236>
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	0751      	lsls	r1, r2, #29
 80063ce:	d436      	bmi.n	800643e <_Unwind_VRS_Pop+0x206>
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d03e      	beq.n	8006452 <_Unwind_VRS_Pop+0x21a>
 80063d4:	2e0f      	cmp	r6, #15
 80063d6:	d806      	bhi.n	80063e6 <_Unwind_VRS_Pop+0x1ae>
 80063d8:	a822      	add	r0, sp, #136	; 0x88
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	f000 f86c 	bl	80064b8 <__gnu_Unwind_Save_VFP_D>
 80063e0:	9b01      	ldr	r3, [sp, #4]
 80063e2:	2f00      	cmp	r7, #0
 80063e4:	d0a8      	beq.n	8006338 <_Unwind_VRS_Pop+0x100>
 80063e6:	a802      	add	r0, sp, #8
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	f000 f86d 	bl	80064c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	f1c6 0210 	rsb	r2, r6, #16
 80063f4:	e7a2      	b.n	800633c <_Unwind_VRS_Pop+0x104>
 80063f6:	a822      	add	r0, sp, #136	; 0x88
 80063f8:	f000 f85a 	bl	80064b0 <__gnu_Unwind_Restore_VFP_D>
 80063fc:	e7c8      	b.n	8006390 <_Unwind_VRS_Pop+0x158>
 80063fe:	2f10      	cmp	r7, #16
 8006400:	d9cf      	bls.n	80063a2 <_Unwind_VRS_Pop+0x16a>
 8006402:	3f10      	subs	r7, #16
 8006404:	e7ce      	b.n	80063a4 <_Unwind_VRS_Pop+0x16c>
 8006406:	f023 0310 	bic.w	r3, r3, #16
 800640a:	6023      	str	r3, [r4, #0]
 800640c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8006410:	9201      	str	r2, [sp, #4]
 8006412:	f000 f8ab 	bl	800656c <__gnu_Unwind_Save_WMMXC>
 8006416:	9a01      	ldr	r2, [sp, #4]
 8006418:	e72c      	b.n	8006274 <_Unwind_VRS_Pop+0x3c>
 800641a:	3104      	adds	r1, #4
 800641c:	63a1      	str	r1, [r4, #56]	; 0x38
 800641e:	a822      	add	r0, sp, #136	; 0x88
 8006420:	f000 f83e 	bl	80064a0 <__gnu_Unwind_Restore_VFP>
 8006424:	e7b8      	b.n	8006398 <_Unwind_VRS_Pop+0x160>
 8006426:	2f00      	cmp	r7, #0
 8006428:	d19a      	bne.n	8006360 <_Unwind_VRS_Pop+0x128>
 800642a:	4601      	mov	r1, r0
 800642c:	e7ab      	b.n	8006386 <_Unwind_VRS_Pop+0x14e>
 800642e:	f023 0308 	bic.w	r3, r3, #8
 8006432:	6023      	str	r3, [r4, #0]
 8006434:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8006438:	f000 f86c 	bl	8006514 <__gnu_Unwind_Save_WMMXD>
 800643c:	e73f      	b.n	80062be <_Unwind_VRS_Pop+0x86>
 800643e:	4620      	mov	r0, r4
 8006440:	f022 0204 	bic.w	r2, r2, #4
 8006444:	f840 2bd0 	str.w	r2, [r0], #208
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	f000 f83d 	bl	80064c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	e7be      	b.n	80063d0 <_Unwind_VRS_Pop+0x198>
 8006452:	a822      	add	r0, sp, #136	; 0x88
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	f000 f827 	bl	80064a8 <__gnu_Unwind_Save_VFP>
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	e7c8      	b.n	80063f0 <_Unwind_VRS_Pop+0x1b8>
 800645e:	f041 0102 	orr.w	r1, r1, #2
 8006462:	f840 1b48 	str.w	r1, [r0], #72
 8006466:	f000 f827 	bl	80064b8 <__gnu_Unwind_Save_VFP_D>
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	e7ab      	b.n	80063c6 <_Unwind_VRS_Pop+0x18e>
 800646e:	2b01      	cmp	r3, #1
 8006470:	d003      	beq.n	800647a <_Unwind_VRS_Pop+0x242>
 8006472:	2e0f      	cmp	r6, #15
 8006474:	f63f af60 	bhi.w	8006338 <_Unwind_VRS_Pop+0x100>
 8006478:	e7ae      	b.n	80063d8 <_Unwind_VRS_Pop+0x1a0>
 800647a:	a822      	add	r0, sp, #136	; 0x88
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	f000 f813 	bl	80064a8 <__gnu_Unwind_Save_VFP>
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	e758      	b.n	8006338 <_Unwind_VRS_Pop+0x100>
 8006486:	bf00      	nop

08006488 <__restore_core_regs>:
 8006488:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800648c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8006490:	469c      	mov	ip, r3
 8006492:	46a6      	mov	lr, r4
 8006494:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8006498:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800649c:	46e5      	mov	sp, ip
 800649e:	bd00      	pop	{pc}

080064a0 <__gnu_Unwind_Restore_VFP>:
 80064a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop

080064a8 <__gnu_Unwind_Save_VFP>:
 80064a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop

080064b0 <__gnu_Unwind_Restore_VFP_D>:
 80064b0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop

080064b8 <__gnu_Unwind_Save_VFP_D>:
 80064b8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop

080064c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80064c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop

080064c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80064c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop

080064d0 <__gnu_Unwind_Restore_WMMXD>:
 80064d0:	ecf0 0102 	ldfe	f0, [r0], #8
 80064d4:	ecf0 1102 	ldfe	f1, [r0], #8
 80064d8:	ecf0 2102 	ldfe	f2, [r0], #8
 80064dc:	ecf0 3102 	ldfe	f3, [r0], #8
 80064e0:	ecf0 4102 	ldfe	f4, [r0], #8
 80064e4:	ecf0 5102 	ldfe	f5, [r0], #8
 80064e8:	ecf0 6102 	ldfe	f6, [r0], #8
 80064ec:	ecf0 7102 	ldfe	f7, [r0], #8
 80064f0:	ecf0 8102 	ldfp	f0, [r0], #8
 80064f4:	ecf0 9102 	ldfp	f1, [r0], #8
 80064f8:	ecf0 a102 	ldfp	f2, [r0], #8
 80064fc:	ecf0 b102 	ldfp	f3, [r0], #8
 8006500:	ecf0 c102 	ldfp	f4, [r0], #8
 8006504:	ecf0 d102 	ldfp	f5, [r0], #8
 8006508:	ecf0 e102 	ldfp	f6, [r0], #8
 800650c:	ecf0 f102 	ldfp	f7, [r0], #8
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop

08006514 <__gnu_Unwind_Save_WMMXD>:
 8006514:	ece0 0102 	stfe	f0, [r0], #8
 8006518:	ece0 1102 	stfe	f1, [r0], #8
 800651c:	ece0 2102 	stfe	f2, [r0], #8
 8006520:	ece0 3102 	stfe	f3, [r0], #8
 8006524:	ece0 4102 	stfe	f4, [r0], #8
 8006528:	ece0 5102 	stfe	f5, [r0], #8
 800652c:	ece0 6102 	stfe	f6, [r0], #8
 8006530:	ece0 7102 	stfe	f7, [r0], #8
 8006534:	ece0 8102 	stfp	f0, [r0], #8
 8006538:	ece0 9102 	stfp	f1, [r0], #8
 800653c:	ece0 a102 	stfp	f2, [r0], #8
 8006540:	ece0 b102 	stfp	f3, [r0], #8
 8006544:	ece0 c102 	stfp	f4, [r0], #8
 8006548:	ece0 d102 	stfp	f5, [r0], #8
 800654c:	ece0 e102 	stfp	f6, [r0], #8
 8006550:	ece0 f102 	stfp	f7, [r0], #8
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop

08006558 <__gnu_Unwind_Restore_WMMXC>:
 8006558:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800655c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8006560:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8006564:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop

0800656c <__gnu_Unwind_Save_WMMXC>:
 800656c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8006570:	fca0 9101 	stc2	1, cr9, [r0], #4
 8006574:	fca0 a101 	stc2	1, cr10, [r0], #4
 8006578:	fca0 b101 	stc2	1, cr11, [r0], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop

08006580 <_Unwind_RaiseException>:
 8006580:	46ec      	mov	ip, sp
 8006582:	b500      	push	{lr}
 8006584:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006588:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006594:	a901      	add	r1, sp, #4
 8006596:	f7ff fbe7 	bl	8005d68 <__gnu_Unwind_RaiseException>
 800659a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800659e:	b012      	add	sp, #72	; 0x48
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop

080065a4 <_Unwind_Resume>:
 80065a4:	46ec      	mov	ip, sp
 80065a6:	b500      	push	{lr}
 80065a8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80065ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80065b8:	a901      	add	r1, sp, #4
 80065ba:	f7ff fc0f 	bl	8005ddc <__gnu_Unwind_Resume>
 80065be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80065c2:	b012      	add	sp, #72	; 0x48
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop

080065c8 <_Unwind_Resume_or_Rethrow>:
 80065c8:	46ec      	mov	ip, sp
 80065ca:	b500      	push	{lr}
 80065cc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80065d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80065d4:	f04f 0300 	mov.w	r3, #0
 80065d8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80065dc:	a901      	add	r1, sp, #4
 80065de:	f7ff fc1f 	bl	8005e20 <__gnu_Unwind_Resume_or_Rethrow>
 80065e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80065e6:	b012      	add	sp, #72	; 0x48
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop

080065ec <_Unwind_ForcedUnwind>:
 80065ec:	46ec      	mov	ip, sp
 80065ee:	b500      	push	{lr}
 80065f0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80065f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006600:	ab01      	add	r3, sp, #4
 8006602:	f7ff fbe1 	bl	8005dc8 <__gnu_Unwind_ForcedUnwind>
 8006606:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800660a:	b012      	add	sp, #72	; 0x48
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <_Unwind_Backtrace>:
 8006610:	46ec      	mov	ip, sp
 8006612:	b500      	push	{lr}
 8006614:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006618:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006624:	aa01      	add	r2, sp, #4
 8006626:	f7ff fc5b 	bl	8005ee0 <__gnu_Unwind_Backtrace>
 800662a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800662e:	b012      	add	sp, #72	; 0x48
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop

08006634 <next_unwind_byte>:
 8006634:	7a03      	ldrb	r3, [r0, #8]
 8006636:	b91b      	cbnz	r3, 8006640 <next_unwind_byte+0xc>
 8006638:	7a43      	ldrb	r3, [r0, #9]
 800663a:	b943      	cbnz	r3, 800664e <next_unwind_byte+0x1a>
 800663c:	20b0      	movs	r0, #176	; 0xb0
 800663e:	4770      	bx	lr
 8006640:	1e5a      	subs	r2, r3, #1
 8006642:	6803      	ldr	r3, [r0, #0]
 8006644:	7202      	strb	r2, [r0, #8]
 8006646:	021a      	lsls	r2, r3, #8
 8006648:	6002      	str	r2, [r0, #0]
 800664a:	0e18      	lsrs	r0, r3, #24
 800664c:	4770      	bx	lr
 800664e:	6842      	ldr	r2, [r0, #4]
 8006650:	3b01      	subs	r3, #1
 8006652:	b410      	push	{r4}
 8006654:	7243      	strb	r3, [r0, #9]
 8006656:	6813      	ldr	r3, [r2, #0]
 8006658:	2103      	movs	r1, #3
 800665a:	1d14      	adds	r4, r2, #4
 800665c:	7201      	strb	r1, [r0, #8]
 800665e:	021a      	lsls	r2, r3, #8
 8006660:	6044      	str	r4, [r0, #4]
 8006662:	6002      	str	r2, [r0, #0]
 8006664:	bc10      	pop	{r4}
 8006666:	0e18      	lsrs	r0, r3, #24
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop

0800666c <_Unwind_GetGR.constprop.0>:
 800666c:	b500      	push	{lr}
 800666e:	b085      	sub	sp, #20
 8006670:	aa03      	add	r2, sp, #12
 8006672:	2300      	movs	r3, #0
 8006674:	9200      	str	r2, [sp, #0]
 8006676:	4619      	mov	r1, r3
 8006678:	220c      	movs	r2, #12
 800667a:	f7ff fbe3 	bl	8005e44 <_Unwind_VRS_Get>
 800667e:	9803      	ldr	r0, [sp, #12]
 8006680:	b005      	add	sp, #20
 8006682:	f85d fb04 	ldr.w	pc, [sp], #4
 8006686:	bf00      	nop

08006688 <unwind_UCB_from_context>:
 8006688:	e7f0      	b.n	800666c <_Unwind_GetGR.constprop.0>
 800668a:	bf00      	nop

0800668c <__gnu_unwind_execute>:
 800668c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006690:	4606      	mov	r6, r0
 8006692:	460d      	mov	r5, r1
 8006694:	b085      	sub	sp, #20
 8006696:	f04f 0800 	mov.w	r8, #0
 800669a:	4628      	mov	r0, r5
 800669c:	f7ff ffca 	bl	8006634 <next_unwind_byte>
 80066a0:	28b0      	cmp	r0, #176	; 0xb0
 80066a2:	4604      	mov	r4, r0
 80066a4:	f000 80b4 	beq.w	8006810 <__gnu_unwind_execute+0x184>
 80066a8:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 80066ac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80066b0:	d020      	beq.n	80066f4 <__gnu_unwind_execute+0x68>
 80066b2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d07a      	beq.n	80067b0 <__gnu_unwind_execute+0x124>
 80066ba:	2b90      	cmp	r3, #144	; 0x90
 80066bc:	d035      	beq.n	800672a <__gnu_unwind_execute+0x9e>
 80066be:	2ba0      	cmp	r3, #160	; 0xa0
 80066c0:	d048      	beq.n	8006754 <__gnu_unwind_execute+0xc8>
 80066c2:	2bb0      	cmp	r3, #176	; 0xb0
 80066c4:	d05c      	beq.n	8006780 <__gnu_unwind_execute+0xf4>
 80066c6:	2bc0      	cmp	r3, #192	; 0xc0
 80066c8:	f000 8089 	beq.w	80067de <__gnu_unwind_execute+0x152>
 80066cc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80066d0:	2bd0      	cmp	r3, #208	; 0xd0
 80066d2:	d10b      	bne.n	80066ec <__gnu_unwind_execute+0x60>
 80066d4:	f000 0207 	and.w	r2, r0, #7
 80066d8:	3201      	adds	r2, #1
 80066da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80066de:	2305      	movs	r3, #5
 80066e0:	2101      	movs	r1, #1
 80066e2:	4630      	mov	r0, r6
 80066e4:	f7ff fda8 	bl	8006238 <_Unwind_VRS_Pop>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d0d6      	beq.n	800669a <__gnu_unwind_execute+0xe>
 80066ec:	2009      	movs	r0, #9
 80066ee:	b005      	add	sp, #20
 80066f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066f4:	f10d 090c 	add.w	r9, sp, #12
 80066f8:	4619      	mov	r1, r3
 80066fa:	0087      	lsls	r7, r0, #2
 80066fc:	f8cd 9000 	str.w	r9, [sp]
 8006700:	220d      	movs	r2, #13
 8006702:	4630      	mov	r0, r6
 8006704:	f7ff fb9e 	bl	8005e44 <_Unwind_VRS_Get>
 8006708:	b2ff      	uxtb	r7, r7
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	3704      	adds	r7, #4
 800670e:	0660      	lsls	r0, r4, #25
 8006710:	bf4c      	ite	mi
 8006712:	1bdf      	submi	r7, r3, r7
 8006714:	18ff      	addpl	r7, r7, r3
 8006716:	2300      	movs	r3, #0
 8006718:	f8cd 9000 	str.w	r9, [sp]
 800671c:	4619      	mov	r1, r3
 800671e:	220d      	movs	r2, #13
 8006720:	4630      	mov	r0, r6
 8006722:	9703      	str	r7, [sp, #12]
 8006724:	f7ff fbb4 	bl	8005e90 <_Unwind_VRS_Set>
 8006728:	e7b7      	b.n	800669a <__gnu_unwind_execute+0xe>
 800672a:	f000 030d 	and.w	r3, r0, #13
 800672e:	2b0d      	cmp	r3, #13
 8006730:	d0dc      	beq.n	80066ec <__gnu_unwind_execute+0x60>
 8006732:	af03      	add	r7, sp, #12
 8006734:	2300      	movs	r3, #0
 8006736:	f000 020f 	and.w	r2, r0, #15
 800673a:	4619      	mov	r1, r3
 800673c:	9700      	str	r7, [sp, #0]
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff fb80 	bl	8005e44 <_Unwind_VRS_Get>
 8006744:	2300      	movs	r3, #0
 8006746:	9700      	str	r7, [sp, #0]
 8006748:	4619      	mov	r1, r3
 800674a:	220d      	movs	r2, #13
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff fb9f 	bl	8005e90 <_Unwind_VRS_Set>
 8006752:	e7a2      	b.n	800669a <__gnu_unwind_execute+0xe>
 8006754:	43c2      	mvns	r2, r0
 8006756:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 800675a:	f002 0207 	and.w	r2, r2, #7
 800675e:	fa43 f202 	asr.w	r2, r3, r2
 8006762:	0701      	lsls	r1, r0, #28
 8006764:	ea02 0203 	and.w	r2, r2, r3
 8006768:	f04f 0300 	mov.w	r3, #0
 800676c:	bf48      	it	mi
 800676e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8006772:	4619      	mov	r1, r3
 8006774:	4630      	mov	r0, r6
 8006776:	f7ff fd5f 	bl	8006238 <_Unwind_VRS_Pop>
 800677a:	2800      	cmp	r0, #0
 800677c:	d1b6      	bne.n	80066ec <__gnu_unwind_execute+0x60>
 800677e:	e78c      	b.n	800669a <__gnu_unwind_execute+0xe>
 8006780:	28b1      	cmp	r0, #177	; 0xb1
 8006782:	d04a      	beq.n	800681a <__gnu_unwind_execute+0x18e>
 8006784:	28b2      	cmp	r0, #178	; 0xb2
 8006786:	d053      	beq.n	8006830 <__gnu_unwind_execute+0x1a4>
 8006788:	28b3      	cmp	r0, #179	; 0xb3
 800678a:	f000 8081 	beq.w	8006890 <__gnu_unwind_execute+0x204>
 800678e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8006792:	2bb4      	cmp	r3, #180	; 0xb4
 8006794:	d0aa      	beq.n	80066ec <__gnu_unwind_execute+0x60>
 8006796:	f000 0207 	and.w	r2, r0, #7
 800679a:	3201      	adds	r2, #1
 800679c:	2301      	movs	r3, #1
 800679e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80067a2:	4619      	mov	r1, r3
 80067a4:	4630      	mov	r0, r6
 80067a6:	f7ff fd47 	bl	8006238 <_Unwind_VRS_Pop>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	d19e      	bne.n	80066ec <__gnu_unwind_execute+0x60>
 80067ae:	e774      	b.n	800669a <__gnu_unwind_execute+0xe>
 80067b0:	4628      	mov	r0, r5
 80067b2:	f7ff ff3f 	bl	8006634 <next_unwind_byte>
 80067b6:	0224      	lsls	r4, r4, #8
 80067b8:	4320      	orrs	r0, r4
 80067ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80067be:	d095      	beq.n	80066ec <__gnu_unwind_execute+0x60>
 80067c0:	0104      	lsls	r4, r0, #4
 80067c2:	2300      	movs	r3, #0
 80067c4:	b2a2      	uxth	r2, r4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4630      	mov	r0, r6
 80067ca:	f7ff fd35 	bl	8006238 <_Unwind_VRS_Pop>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d18c      	bne.n	80066ec <__gnu_unwind_execute+0x60>
 80067d2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80067d6:	bf18      	it	ne
 80067d8:	f04f 0801 	movne.w	r8, #1
 80067dc:	e75d      	b.n	800669a <__gnu_unwind_execute+0xe>
 80067de:	28c6      	cmp	r0, #198	; 0xc6
 80067e0:	d062      	beq.n	80068a8 <__gnu_unwind_execute+0x21c>
 80067e2:	28c7      	cmp	r0, #199	; 0xc7
 80067e4:	d06c      	beq.n	80068c0 <__gnu_unwind_execute+0x234>
 80067e6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80067ea:	2bc0      	cmp	r3, #192	; 0xc0
 80067ec:	d07b      	beq.n	80068e6 <__gnu_unwind_execute+0x25a>
 80067ee:	28c8      	cmp	r0, #200	; 0xc8
 80067f0:	f000 8091 	beq.w	8006916 <__gnu_unwind_execute+0x28a>
 80067f4:	28c9      	cmp	r0, #201	; 0xc9
 80067f6:	f47f af79 	bne.w	80066ec <__gnu_unwind_execute+0x60>
 80067fa:	4628      	mov	r0, r5
 80067fc:	f7ff ff1a 	bl	8006634 <next_unwind_byte>
 8006800:	0302      	lsls	r2, r0, #12
 8006802:	f000 000f 	and.w	r0, r0, #15
 8006806:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800680a:	3001      	adds	r0, #1
 800680c:	4302      	orrs	r2, r0
 800680e:	e766      	b.n	80066de <__gnu_unwind_execute+0x52>
 8006810:	f1b8 0f00 	cmp.w	r8, #0
 8006814:	d06e      	beq.n	80068f4 <__gnu_unwind_execute+0x268>
 8006816:	2000      	movs	r0, #0
 8006818:	e769      	b.n	80066ee <__gnu_unwind_execute+0x62>
 800681a:	4628      	mov	r0, r5
 800681c:	f7ff ff0a 	bl	8006634 <next_unwind_byte>
 8006820:	4602      	mov	r2, r0
 8006822:	2800      	cmp	r0, #0
 8006824:	f43f af62 	beq.w	80066ec <__gnu_unwind_execute+0x60>
 8006828:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 800682c:	d0b9      	beq.n	80067a2 <__gnu_unwind_execute+0x116>
 800682e:	e75d      	b.n	80066ec <__gnu_unwind_execute+0x60>
 8006830:	2300      	movs	r3, #0
 8006832:	f10d 090c 	add.w	r9, sp, #12
 8006836:	220d      	movs	r2, #13
 8006838:	4619      	mov	r1, r3
 800683a:	f8cd 9000 	str.w	r9, [sp]
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff fb00 	bl	8005e44 <_Unwind_VRS_Get>
 8006844:	4628      	mov	r0, r5
 8006846:	f7ff fef5 	bl	8006634 <next_unwind_byte>
 800684a:	0602      	lsls	r2, r0, #24
 800684c:	f04f 0402 	mov.w	r4, #2
 8006850:	d50c      	bpl.n	800686c <__gnu_unwind_execute+0x1e0>
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006858:	40a0      	lsls	r0, r4
 800685a:	4403      	add	r3, r0
 800685c:	4628      	mov	r0, r5
 800685e:	9303      	str	r3, [sp, #12]
 8006860:	f7ff fee8 	bl	8006634 <next_unwind_byte>
 8006864:	0603      	lsls	r3, r0, #24
 8006866:	f104 0407 	add.w	r4, r4, #7
 800686a:	d4f2      	bmi.n	8006852 <__gnu_unwind_execute+0x1c6>
 800686c:	9b03      	ldr	r3, [sp, #12]
 800686e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006872:	fa00 f204 	lsl.w	r2, r0, r4
 8006876:	f503 7401 	add.w	r4, r3, #516	; 0x204
 800687a:	2300      	movs	r3, #0
 800687c:	4414      	add	r4, r2
 800687e:	f8cd 9000 	str.w	r9, [sp]
 8006882:	4619      	mov	r1, r3
 8006884:	220d      	movs	r2, #13
 8006886:	4630      	mov	r0, r6
 8006888:	9403      	str	r4, [sp, #12]
 800688a:	f7ff fb01 	bl	8005e90 <_Unwind_VRS_Set>
 800688e:	e704      	b.n	800669a <__gnu_unwind_execute+0xe>
 8006890:	4628      	mov	r0, r5
 8006892:	f7ff fecf 	bl	8006634 <next_unwind_byte>
 8006896:	0301      	lsls	r1, r0, #12
 8006898:	f000 000f 	and.w	r0, r0, #15
 800689c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80068a0:	1c42      	adds	r2, r0, #1
 80068a2:	2301      	movs	r3, #1
 80068a4:	430a      	orrs	r2, r1
 80068a6:	e77c      	b.n	80067a2 <__gnu_unwind_execute+0x116>
 80068a8:	4628      	mov	r0, r5
 80068aa:	f7ff fec3 	bl	8006634 <next_unwind_byte>
 80068ae:	0301      	lsls	r1, r0, #12
 80068b0:	f000 000f 	and.w	r0, r0, #15
 80068b4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80068b8:	1c42      	adds	r2, r0, #1
 80068ba:	2303      	movs	r3, #3
 80068bc:	430a      	orrs	r2, r1
 80068be:	e770      	b.n	80067a2 <__gnu_unwind_execute+0x116>
 80068c0:	4628      	mov	r0, r5
 80068c2:	f7ff feb7 	bl	8006634 <next_unwind_byte>
 80068c6:	4602      	mov	r2, r0
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f43f af0f 	beq.w	80066ec <__gnu_unwind_execute+0x60>
 80068ce:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80068d2:	f47f af0b 	bne.w	80066ec <__gnu_unwind_execute+0x60>
 80068d6:	2104      	movs	r1, #4
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff fcad 	bl	8006238 <_Unwind_VRS_Pop>
 80068de:	2800      	cmp	r0, #0
 80068e0:	f47f af04 	bne.w	80066ec <__gnu_unwind_execute+0x60>
 80068e4:	e6d9      	b.n	800669a <__gnu_unwind_execute+0xe>
 80068e6:	f000 020f 	and.w	r2, r0, #15
 80068ea:	3201      	adds	r2, #1
 80068ec:	2303      	movs	r3, #3
 80068ee:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80068f2:	e756      	b.n	80067a2 <__gnu_unwind_execute+0x116>
 80068f4:	ac03      	add	r4, sp, #12
 80068f6:	4643      	mov	r3, r8
 80068f8:	220e      	movs	r2, #14
 80068fa:	4641      	mov	r1, r8
 80068fc:	9400      	str	r4, [sp, #0]
 80068fe:	4630      	mov	r0, r6
 8006900:	f7ff faa0 	bl	8005e44 <_Unwind_VRS_Get>
 8006904:	9400      	str	r4, [sp, #0]
 8006906:	4630      	mov	r0, r6
 8006908:	4643      	mov	r3, r8
 800690a:	220f      	movs	r2, #15
 800690c:	4641      	mov	r1, r8
 800690e:	f7ff fabf 	bl	8005e90 <_Unwind_VRS_Set>
 8006912:	4640      	mov	r0, r8
 8006914:	e6eb      	b.n	80066ee <__gnu_unwind_execute+0x62>
 8006916:	4628      	mov	r0, r5
 8006918:	f7ff fe8c 	bl	8006634 <next_unwind_byte>
 800691c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006920:	f000 030f 	and.w	r3, r0, #15
 8006924:	3210      	adds	r2, #16
 8006926:	3301      	adds	r3, #1
 8006928:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800692c:	e6d7      	b.n	80066de <__gnu_unwind_execute+0x52>
 800692e:	bf00      	nop

08006930 <__gnu_unwind_frame>:
 8006930:	b510      	push	{r4, lr}
 8006932:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006934:	b084      	sub	sp, #16
 8006936:	2003      	movs	r0, #3
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	f88d 000c 	strb.w	r0, [sp, #12]
 800693e:	79dc      	ldrb	r4, [r3, #7]
 8006940:	0212      	lsls	r2, r2, #8
 8006942:	3308      	adds	r3, #8
 8006944:	4608      	mov	r0, r1
 8006946:	a901      	add	r1, sp, #4
 8006948:	9201      	str	r2, [sp, #4]
 800694a:	f88d 400d 	strb.w	r4, [sp, #13]
 800694e:	9302      	str	r3, [sp, #8]
 8006950:	f7ff fe9c 	bl	800668c <__gnu_unwind_execute>
 8006954:	b004      	add	sp, #16
 8006956:	bd10      	pop	{r4, pc}

08006958 <_Unwind_GetRegionStart>:
 8006958:	b508      	push	{r3, lr}
 800695a:	f7ff fe95 	bl	8006688 <unwind_UCB_from_context>
 800695e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006960:	bd08      	pop	{r3, pc}
 8006962:	bf00      	nop

08006964 <_Unwind_GetLanguageSpecificData>:
 8006964:	b508      	push	{r3, lr}
 8006966:	f7ff fe8f 	bl	8006688 <unwind_UCB_from_context>
 800696a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800696c:	79d8      	ldrb	r0, [r3, #7]
 800696e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006972:	3008      	adds	r0, #8
 8006974:	bd08      	pop	{r3, pc}
 8006976:	bf00      	nop

08006978 <_Unwind_GetTextRelBase>:
 8006978:	b508      	push	{r3, lr}
 800697a:	f00a fafc 	bl	8010f76 <abort>
 800697e:	bf00      	nop

08006980 <_Unwind_GetDataRelBase>:
 8006980:	b508      	push	{r3, lr}
 8006982:	f7ff fff9 	bl	8006978 <_Unwind_GetTextRelBase>
 8006986:	bf00      	nop

08006988 <d_make_comp>:
 8006988:	b470      	push	{r4, r5, r6}
 800698a:	1e4c      	subs	r4, r1, #1
 800698c:	2c4a      	cmp	r4, #74	; 0x4a
 800698e:	d82c      	bhi.n	80069ea <d_make_comp+0x62>
 8006990:	e8df f004 	tbb	[pc, r4]
 8006994:	3c3c3c3c 	.word	0x3c3c3c3c
 8006998:	2b2b2b2b 	.word	0x2b2b2b2b
 800699c:	263c2626 	.word	0x263c2626
 80069a0:	26262626 	.word	0x26262626
 80069a4:	26262626 	.word	0x26262626
 80069a8:	2b262626 	.word	0x2b262626
 80069ac:	27272727 	.word	0x27272727
 80069b0:	27272727 	.word	0x27272727
 80069b4:	2626263c 	.word	0x2626263c
 80069b8:	262b2626 	.word	0x262b2626
 80069bc:	2b3c3d27 	.word	0x2b3c3d27
 80069c0:	3d27273c 	.word	0x3d27273c
 80069c4:	26262b2b 	.word	0x26262b2b
 80069c8:	3c3c3c3c 	.word	0x3c3c3c3c
 80069cc:	3c3c263c 	.word	0x3c3c263c
 80069d0:	2b2b3c26 	.word	0x2b2b3c26
 80069d4:	2b262626 	.word	0x2b262626
 80069d8:	26262b2b 	.word	0x26262b2b
 80069dc:	3c26      	.short	0x3c26
 80069de:	3c          	.byte	0x3c
 80069df:	00          	.byte	0x00
 80069e0:	b1ca      	cbz	r2, 8006a16 <d_make_comp+0x8e>
 80069e2:	6944      	ldr	r4, [r0, #20]
 80069e4:	6985      	ldr	r5, [r0, #24]
 80069e6:	42ac      	cmp	r4, r5
 80069e8:	db02      	blt.n	80069f0 <d_make_comp+0x68>
 80069ea:	2000      	movs	r0, #0
 80069ec:	bc70      	pop	{r4, r5, r6}
 80069ee:	4770      	bx	lr
 80069f0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80069f4:	6906      	ldr	r6, [r0, #16]
 80069f6:	3401      	adds	r4, #1
 80069f8:	00ad      	lsls	r5, r5, #2
 80069fa:	6144      	str	r4, [r0, #20]
 80069fc:	1974      	adds	r4, r6, r5
 80069fe:	d00c      	beq.n	8006a1a <d_make_comp+0x92>
 8006a00:	5571      	strb	r1, [r6, r5]
 8006a02:	6062      	str	r2, [r4, #4]
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	4620      	mov	r0, r4
 8006a08:	bc70      	pop	{r4, r5, r6}
 8006a0a:	4770      	bx	lr
 8006a0c:	b11a      	cbz	r2, 8006a16 <d_make_comp+0x8e>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e7      	bne.n	80069e2 <d_make_comp+0x5a>
 8006a12:	4618      	mov	r0, r3
 8006a14:	e7ea      	b.n	80069ec <d_make_comp+0x64>
 8006a16:	4610      	mov	r0, r2
 8006a18:	e7e8      	b.n	80069ec <d_make_comp+0x64>
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	e7e6      	b.n	80069ec <d_make_comp+0x64>
 8006a1e:	bf00      	nop

08006a20 <d_cv_qualifiers>:
 8006a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a24:	68c3      	ldr	r3, [r0, #12]
 8006a26:	f1b2 0a00 	subs.w	sl, r2, #0
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	460f      	mov	r7, r1
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	bf15      	itete	ne
 8006a32:	f04f 081c 	movne.w	r8, #28
 8006a36:	f04f 0819 	moveq.w	r8, #25
 8006a3a:	f04f 091d 	movne.w	r9, #29
 8006a3e:	f04f 091a 	moveq.w	r9, #26
 8006a42:	bf14      	ite	ne
 8006a44:	261e      	movne	r6, #30
 8006a46:	261b      	moveq	r6, #27
 8006a48:	460d      	mov	r5, r1
 8006a4a:	e012      	b.n	8006a72 <d_cv_qualifiers+0x52>
 8006a4c:	2a56      	cmp	r2, #86	; 0x56
 8006a4e:	d01b      	beq.n	8006a88 <d_cv_qualifiers+0x68>
 8006a50:	2a4b      	cmp	r2, #75	; 0x4b
 8006a52:	d122      	bne.n	8006a9a <d_cv_qualifiers+0x7a>
 8006a54:	60e1      	str	r1, [r4, #12]
 8006a56:	4631      	mov	r1, r6
 8006a58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006a5a:	3306      	adds	r3, #6
 8006a5c:	6323      	str	r3, [r4, #48]	; 0x30
 8006a5e:	2300      	movs	r3, #0
 8006a60:	461a      	mov	r2, r3
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff ff90 	bl	8006988 <d_make_comp>
 8006a68:	6028      	str	r0, [r5, #0]
 8006a6a:	b1a0      	cbz	r0, 8006a96 <d_cv_qualifiers+0x76>
 8006a6c:	68e3      	ldr	r3, [r4, #12]
 8006a6e:	1d05      	adds	r5, r0, #4
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	2a72      	cmp	r2, #114	; 0x72
 8006a74:	f103 0101 	add.w	r1, r3, #1
 8006a78:	d1e8      	bne.n	8006a4c <d_cv_qualifiers+0x2c>
 8006a7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	3209      	adds	r2, #9
 8006a80:	60e3      	str	r3, [r4, #12]
 8006a82:	6322      	str	r2, [r4, #48]	; 0x30
 8006a84:	4641      	mov	r1, r8
 8006a86:	e7ea      	b.n	8006a5e <d_cv_qualifiers+0x3e>
 8006a88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	3209      	adds	r2, #9
 8006a8e:	60e3      	str	r3, [r4, #12]
 8006a90:	6322      	str	r2, [r4, #48]	; 0x30
 8006a92:	4649      	mov	r1, r9
 8006a94:	e7e3      	b.n	8006a5e <d_cv_qualifiers+0x3e>
 8006a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9a:	f1ba 0f00 	cmp.w	sl, #0
 8006a9e:	d101      	bne.n	8006aa4 <d_cv_qualifiers+0x84>
 8006aa0:	2a46      	cmp	r2, #70	; 0x46
 8006aa2:	d002      	beq.n	8006aaa <d_cv_qualifiers+0x8a>
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aaa:	42bd      	cmp	r5, r7
 8006aac:	d0fa      	beq.n	8006aa4 <d_cv_qualifiers+0x84>
 8006aae:	201d      	movs	r0, #29
 8006ab0:	211e      	movs	r1, #30
 8006ab2:	221c      	movs	r2, #28
 8006ab4:	e007      	b.n	8006ac6 <d_cv_qualifiers+0xa6>
 8006ab6:	2b1b      	cmp	r3, #27
 8006ab8:	d00b      	beq.n	8006ad2 <d_cv_qualifiers+0xb2>
 8006aba:	2b19      	cmp	r3, #25
 8006abc:	d100      	bne.n	8006ac0 <d_cv_qualifiers+0xa0>
 8006abe:	703a      	strb	r2, [r7, #0]
 8006ac0:	3704      	adds	r7, #4
 8006ac2:	42bd      	cmp	r5, r7
 8006ac4:	d0ee      	beq.n	8006aa4 <d_cv_qualifiers+0x84>
 8006ac6:	683f      	ldr	r7, [r7, #0]
 8006ac8:	783b      	ldrb	r3, [r7, #0]
 8006aca:	2b1a      	cmp	r3, #26
 8006acc:	d1f3      	bne.n	8006ab6 <d_cv_qualifiers+0x96>
 8006ace:	7038      	strb	r0, [r7, #0]
 8006ad0:	e7f6      	b.n	8006ac0 <d_cv_qualifiers+0xa0>
 8006ad2:	7039      	strb	r1, [r7, #0]
 8006ad4:	e7f4      	b.n	8006ac0 <d_cv_qualifiers+0xa0>
 8006ad6:	bf00      	nop

08006ad8 <d_ref_qualifier>:
 8006ad8:	b410      	push	{r4}
 8006ada:	68c3      	ldr	r3, [r0, #12]
 8006adc:	460a      	mov	r2, r1
 8006ade:	781c      	ldrb	r4, [r3, #0]
 8006ae0:	2c52      	cmp	r4, #82	; 0x52
 8006ae2:	d00d      	beq.n	8006b00 <d_ref_qualifier+0x28>
 8006ae4:	2c4f      	cmp	r4, #79	; 0x4f
 8006ae6:	d002      	beq.n	8006aee <d_ref_qualifier+0x16>
 8006ae8:	4608      	mov	r0, r1
 8006aea:	bc10      	pop	{r4}
 8006aec:	4770      	bx	lr
 8006aee:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006af0:	2120      	movs	r1, #32
 8006af2:	3403      	adds	r4, #3
 8006af4:	6304      	str	r4, [r0, #48]	; 0x30
 8006af6:	3301      	adds	r3, #1
 8006af8:	60c3      	str	r3, [r0, #12]
 8006afa:	bc10      	pop	{r4}
 8006afc:	2300      	movs	r3, #0
 8006afe:	e743      	b.n	8006988 <d_make_comp>
 8006b00:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006b02:	211f      	movs	r1, #31
 8006b04:	3402      	adds	r4, #2
 8006b06:	6304      	str	r4, [r0, #48]	; 0x30
 8006b08:	e7f5      	b.n	8006af6 <d_ref_qualifier+0x1e>
 8006b0a:	bf00      	nop

08006b0c <d_count_templates_scopes>:
 8006b0c:	2a00      	cmp	r2, #0
 8006b0e:	d04c      	beq.n	8006baa <d_count_templates_scopes+0x9e>
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4605      	mov	r5, r0
 8006b14:	460e      	mov	r6, r1
 8006b16:	4614      	mov	r4, r2
 8006b18:	7823      	ldrb	r3, [r4, #0]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	2b4a      	cmp	r3, #74	; 0x4a
 8006b1e:	d82a      	bhi.n	8006b76 <d_count_templates_scopes+0x6a>
 8006b20:	e8df f003 	tbb	[pc, r3]
 8006b24:	3e353535 	.word	0x3e353535
 8006b28:	26262929 	.word	0x26262929
 8006b2c:	35353535 	.word	0x35353535
 8006b30:	35353535 	.word	0x35353535
 8006b34:	35353535 	.word	0x35353535
 8006b38:	29353535 	.word	0x29353535
 8006b3c:	35353535 	.word	0x35353535
 8006b40:	35353535 	.word	0x35353535
 8006b44:	2e2e3535 	.word	0x2e2e3535
 8006b48:	35293535 	.word	0x35293535
 8006b4c:	2a353535 	.word	0x2a353535
 8006b50:	35353535 	.word	0x35353535
 8006b54:	35352629 	.word	0x35352629
 8006b58:	35353535 	.word	0x35353535
 8006b5c:	35353535 	.word	0x35353535
 8006b60:	29293535 	.word	0x29293535
 8006b64:	2a2a2a35 	.word	0x2a2a2a35
 8006b68:	3535292a 	.word	0x3535292a
 8006b6c:	3535      	.short	0x3535
 8006b6e:	35          	.byte	0x35
 8006b6f:	00          	.byte	0x00
 8006b70:	68a4      	ldr	r4, [r4, #8]
 8006b72:	2c00      	cmp	r4, #0
 8006b74:	d1d0      	bne.n	8006b18 <d_count_templates_scopes+0xc>
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	6864      	ldr	r4, [r4, #4]
 8006b7a:	2c00      	cmp	r4, #0
 8006b7c:	d1cc      	bne.n	8006b18 <d_count_templates_scopes+0xc>
 8006b7e:	e7fa      	b.n	8006b76 <d_count_templates_scopes+0x6a>
 8006b80:	6862      	ldr	r2, [r4, #4]
 8006b82:	7813      	ldrb	r3, [r2, #0]
 8006b84:	2b05      	cmp	r3, #5
 8006b86:	d103      	bne.n	8006b90 <d_count_templates_scopes+0x84>
 8006b88:	6833      	ldr	r3, [r6, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	6033      	str	r3, [r6, #0]
 8006b8e:	6862      	ldr	r2, [r4, #4]
 8006b90:	4631      	mov	r1, r6
 8006b92:	4628      	mov	r0, r5
 8006b94:	f7ff ffba 	bl	8006b0c <d_count_templates_scopes>
 8006b98:	68a4      	ldr	r4, [r4, #8]
 8006b9a:	2c00      	cmp	r4, #0
 8006b9c:	d1bc      	bne.n	8006b18 <d_count_templates_scopes+0xc>
 8006b9e:	e7ea      	b.n	8006b76 <d_count_templates_scopes+0x6a>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	602b      	str	r3, [r5, #0]
 8006ba6:	6862      	ldr	r2, [r4, #4]
 8006ba8:	e7f2      	b.n	8006b90 <d_count_templates_scopes+0x84>
 8006baa:	4770      	bx	lr

08006bac <d_append_buffer>:
 8006bac:	b382      	cbz	r2, 8006c10 <d_append_buffer+0x64>
 8006bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb2:	460d      	mov	r5, r1
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006bba:	18af      	adds	r7, r5, r2
 8006bbc:	f04f 0800 	mov.w	r8, #0
 8006bc0:	e009      	b.n	8006bd6 <d_append_buffer+0x2a>
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	42bd      	cmp	r5, r7
 8006bc6:	f101 0101 	add.w	r1, r1, #1
 8006bca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006bce:	54e6      	strb	r6, [r4, r3]
 8006bd0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006bd4:	d01a      	beq.n	8006c0c <d_append_buffer+0x60>
 8006bd6:	29ff      	cmp	r1, #255	; 0xff
 8006bd8:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006bdc:	d1f1      	bne.n	8006bc2 <d_append_buffer+0x16>
 8006bde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006be2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006be6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006bea:	4620      	mov	r0, r4
 8006bec:	4798      	blx	r3
 8006bee:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	440b      	add	r3, r1
 8006bf6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006bfa:	42bd      	cmp	r5, r7
 8006bfc:	f04f 0300 	mov.w	r3, #0
 8006c00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006c04:	54e6      	strb	r6, [r4, r3]
 8006c06:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006c0a:	d1e4      	bne.n	8006bd6 <d_append_buffer+0x2a>
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop

08006c14 <d_number.isra.0>:
 8006c14:	b430      	push	{r4, r5}
 8006c16:	6803      	ldr	r3, [r0, #0]
 8006c18:	4604      	mov	r4, r0
 8006c1a:	781a      	ldrb	r2, [r3, #0]
 8006c1c:	2a6e      	cmp	r2, #110	; 0x6e
 8006c1e:	d015      	beq.n	8006c4c <d_number.isra.0+0x38>
 8006c20:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c24:	2909      	cmp	r1, #9
 8006c26:	d81b      	bhi.n	8006c60 <d_number.isra.0+0x4c>
 8006c28:	2500      	movs	r5, #0
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c34:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	3830      	subs	r0, #48	; 0x30
 8006c3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c40:	2909      	cmp	r1, #9
 8006c42:	d9f3      	bls.n	8006c2c <d_number.isra.0+0x18>
 8006c44:	b105      	cbz	r5, 8006c48 <d_number.isra.0+0x34>
 8006c46:	4240      	negs	r0, r0
 8006c48:	bc30      	pop	{r4, r5}
 8006c4a:	4770      	bx	lr
 8006c4c:	1c59      	adds	r1, r3, #1
 8006c4e:	6001      	str	r1, [r0, #0]
 8006c50:	785a      	ldrb	r2, [r3, #1]
 8006c52:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c56:	2b09      	cmp	r3, #9
 8006c58:	d802      	bhi.n	8006c60 <d_number.isra.0+0x4c>
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	2501      	movs	r5, #1
 8006c5e:	e7e4      	b.n	8006c2a <d_number.isra.0+0x16>
 8006c60:	2000      	movs	r0, #0
 8006c62:	e7f1      	b.n	8006c48 <d_number.isra.0+0x34>

08006c64 <d_number_component>:
 8006c64:	6943      	ldr	r3, [r0, #20]
 8006c66:	6982      	ldr	r2, [r0, #24]
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	da14      	bge.n	8006c96 <d_number_component+0x32>
 8006c6c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006c70:	6901      	ldr	r1, [r0, #16]
 8006c72:	0092      	lsls	r2, r2, #2
 8006c74:	b510      	push	{r4, lr}
 8006c76:	3301      	adds	r3, #1
 8006c78:	188c      	adds	r4, r1, r2
 8006c7a:	6143      	str	r3, [r0, #20]
 8006c7c:	d008      	beq.n	8006c90 <d_number_component+0x2c>
 8006c7e:	2340      	movs	r3, #64	; 0x40
 8006c80:	548b      	strb	r3, [r1, r2]
 8006c82:	300c      	adds	r0, #12
 8006c84:	f7ff ffc6 	bl	8006c14 <d_number.isra.0>
 8006c88:	4623      	mov	r3, r4
 8006c8a:	6060      	str	r0, [r4, #4]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd10      	pop	{r4, pc}
 8006c90:	4623      	mov	r3, r4
 8006c92:	4618      	mov	r0, r3
 8006c94:	bd10      	pop	{r4, pc}
 8006c96:	2300      	movs	r3, #0
 8006c98:	4618      	mov	r0, r3
 8006c9a:	4770      	bx	lr

08006c9c <d_compact_number>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	68c3      	ldr	r3, [r0, #12]
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	781a      	ldrb	r2, [r3, #0]
 8006ca4:	2a5f      	cmp	r2, #95	; 0x5f
 8006ca6:	d00b      	beq.n	8006cc0 <d_compact_number+0x24>
 8006ca8:	2a6e      	cmp	r2, #110	; 0x6e
 8006caa:	d006      	beq.n	8006cba <d_compact_number+0x1e>
 8006cac:	300c      	adds	r0, #12
 8006cae:	f7ff ffb1 	bl	8006c14 <d_number.isra.0>
 8006cb2:	68e3      	ldr	r3, [r4, #12]
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	2a5f      	cmp	r2, #95	; 0x5f
 8006cb8:	d006      	beq.n	8006cc8 <d_compact_number+0x2c>
 8006cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cbe:	bd10      	pop	{r4, pc}
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	60e3      	str	r3, [r4, #12]
 8006cc6:	bd10      	pop	{r4, pc}
 8006cc8:	3001      	adds	r0, #1
 8006cca:	e7fa      	b.n	8006cc2 <d_compact_number+0x26>

08006ccc <d_template_param>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	68c3      	ldr	r3, [r0, #12]
 8006cd0:	781a      	ldrb	r2, [r3, #0]
 8006cd2:	2a54      	cmp	r2, #84	; 0x54
 8006cd4:	d001      	beq.n	8006cda <d_template_param+0xe>
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	bd38      	pop	{r3, r4, r5, pc}
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60c3      	str	r3, [r0, #12]
 8006cde:	4604      	mov	r4, r0
 8006ce0:	f7ff ffdc 	bl	8006c9c <d_compact_number>
 8006ce4:	1e05      	subs	r5, r0, #0
 8006ce6:	dbf6      	blt.n	8006cd6 <d_template_param+0xa>
 8006ce8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006cea:	6963      	ldr	r3, [r4, #20]
 8006cec:	69a1      	ldr	r1, [r4, #24]
 8006cee:	3201      	adds	r2, #1
 8006cf0:	428b      	cmp	r3, r1
 8006cf2:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cf4:	daef      	bge.n	8006cd6 <d_template_param+0xa>
 8006cf6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006cfa:	6921      	ldr	r1, [r4, #16]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	0092      	lsls	r2, r2, #2
 8006d00:	6163      	str	r3, [r4, #20]
 8006d02:	188b      	adds	r3, r1, r2
 8006d04:	d0e7      	beq.n	8006cd6 <d_template_param+0xa>
 8006d06:	2005      	movs	r0, #5
 8006d08:	5488      	strb	r0, [r1, r2]
 8006d0a:	605d      	str	r5, [r3, #4]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}

08006d10 <d_source_name>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	4604      	mov	r4, r0
 8006d14:	300c      	adds	r0, #12
 8006d16:	f7ff ff7d 	bl	8006c14 <d_number.isra.0>
 8006d1a:	1e06      	subs	r6, r0, #0
 8006d1c:	dd4f      	ble.n	8006dbe <d_source_name+0xae>
 8006d1e:	68e5      	ldr	r5, [r4, #12]
 8006d20:	6863      	ldr	r3, [r4, #4]
 8006d22:	1b5b      	subs	r3, r3, r5
 8006d24:	429e      	cmp	r6, r3
 8006d26:	dc2c      	bgt.n	8006d82 <d_source_name+0x72>
 8006d28:	68a2      	ldr	r2, [r4, #8]
 8006d2a:	19ab      	adds	r3, r5, r6
 8006d2c:	0752      	lsls	r2, r2, #29
 8006d2e:	60e3      	str	r3, [r4, #12]
 8006d30:	d504      	bpl.n	8006d3c <d_source_name+0x2c>
 8006d32:	5daa      	ldrb	r2, [r5, r6]
 8006d34:	2a24      	cmp	r2, #36	; 0x24
 8006d36:	bf04      	itt	eq
 8006d38:	3301      	addeq	r3, #1
 8006d3a:	60e3      	streq	r3, [r4, #12]
 8006d3c:	2e09      	cmp	r6, #9
 8006d3e:	dd0c      	ble.n	8006d5a <d_source_name+0x4a>
 8006d40:	2208      	movs	r2, #8
 8006d42:	4920      	ldr	r1, [pc, #128]	; (8006dc4 <d_source_name+0xb4>)
 8006d44:	4628      	mov	r0, r5
 8006d46:	f00a f9c3 	bl	80110d0 <memcmp>
 8006d4a:	b930      	cbnz	r0, 8006d5a <d_source_name+0x4a>
 8006d4c:	7a2b      	ldrb	r3, [r5, #8]
 8006d4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d50:	d01a      	beq.n	8006d88 <d_source_name+0x78>
 8006d52:	2b5f      	cmp	r3, #95	; 0x5f
 8006d54:	d018      	beq.n	8006d88 <d_source_name+0x78>
 8006d56:	2b24      	cmp	r3, #36	; 0x24
 8006d58:	d016      	beq.n	8006d88 <d_source_name+0x78>
 8006d5a:	6963      	ldr	r3, [r4, #20]
 8006d5c:	69a2      	ldr	r2, [r4, #24]
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	da0f      	bge.n	8006d82 <d_source_name+0x72>
 8006d62:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006d66:	6921      	ldr	r1, [r4, #16]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	0092      	lsls	r2, r2, #2
 8006d6c:	6163      	str	r3, [r4, #20]
 8006d6e:	188b      	adds	r3, r1, r2
 8006d70:	d007      	beq.n	8006d82 <d_source_name+0x72>
 8006d72:	b135      	cbz	r5, 8006d82 <d_source_name+0x72>
 8006d74:	4618      	mov	r0, r3
 8006d76:	2700      	movs	r7, #0
 8006d78:	548f      	strb	r7, [r1, r2]
 8006d7a:	605d      	str	r5, [r3, #4]
 8006d7c:	609e      	str	r6, [r3, #8]
 8006d7e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d82:	2000      	movs	r0, #0
 8006d84:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d88:	7a6b      	ldrb	r3, [r5, #9]
 8006d8a:	2b4e      	cmp	r3, #78	; 0x4e
 8006d8c:	d1e5      	bne.n	8006d5a <d_source_name+0x4a>
 8006d8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d90:	6962      	ldr	r2, [r4, #20]
 8006d92:	69a1      	ldr	r1, [r4, #24]
 8006d94:	3316      	adds	r3, #22
 8006d96:	1b9e      	subs	r6, r3, r6
 8006d98:	428a      	cmp	r2, r1
 8006d9a:	6326      	str	r6, [r4, #48]	; 0x30
 8006d9c:	daf1      	bge.n	8006d82 <d_source_name+0x72>
 8006d9e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006da2:	6921      	ldr	r1, [r4, #16]
 8006da4:	3201      	adds	r2, #1
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	6162      	str	r2, [r4, #20]
 8006daa:	18ca      	adds	r2, r1, r3
 8006dac:	d0e9      	beq.n	8006d82 <d_source_name+0x72>
 8006dae:	4e06      	ldr	r6, [pc, #24]	; (8006dc8 <d_source_name+0xb8>)
 8006db0:	2000      	movs	r0, #0
 8006db2:	2515      	movs	r5, #21
 8006db4:	54c8      	strb	r0, [r1, r3]
 8006db6:	4610      	mov	r0, r2
 8006db8:	6056      	str	r6, [r2, #4]
 8006dba:	6095      	str	r5, [r2, #8]
 8006dbc:	e7e2      	b.n	8006d84 <d_source_name+0x74>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	080137bc 	.word	0x080137bc
 8006dc8:	080137c8 	.word	0x080137c8

08006dcc <d_abi_tags>:
 8006dcc:	b538      	push	{r3, r4, r5, lr}
 8006dce:	68c3      	ldr	r3, [r0, #12]
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	781a      	ldrb	r2, [r3, #0]
 8006dd4:	2a42      	cmp	r2, #66	; 0x42
 8006dd6:	d110      	bne.n	8006dfa <d_abi_tags+0x2e>
 8006dd8:	4604      	mov	r4, r0
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60e3      	str	r3, [r4, #12]
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7ff ff96 	bl	8006d10 <d_source_name>
 8006de4:	462a      	mov	r2, r5
 8006de6:	4603      	mov	r3, r0
 8006de8:	214a      	movs	r1, #74	; 0x4a
 8006dea:	4620      	mov	r0, r4
 8006dec:	f7ff fdcc 	bl	8006988 <d_make_comp>
 8006df0:	68e3      	ldr	r3, [r4, #12]
 8006df2:	4605      	mov	r5, r0
 8006df4:	781a      	ldrb	r2, [r3, #0]
 8006df6:	2a42      	cmp	r2, #66	; 0x42
 8006df8:	d0ef      	beq.n	8006dda <d_abi_tags+0xe>
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	bf00      	nop

08006e00 <d_substitution>:
 8006e00:	68c2      	ldr	r2, [r0, #12]
 8006e02:	7813      	ldrb	r3, [r2, #0]
 8006e04:	2b53      	cmp	r3, #83	; 0x53
 8006e06:	d002      	beq.n	8006e0e <d_substitution+0xe>
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4608      	mov	r0, r1
 8006e0c:	4770      	bx	lr
 8006e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e12:	1c53      	adds	r3, r2, #1
 8006e14:	60c3      	str	r3, [r0, #12]
 8006e16:	7853      	ldrb	r3, [r2, #1]
 8006e18:	b18b      	cbz	r3, 8006e3e <d_substitution+0x3e>
 8006e1a:	1c93      	adds	r3, r2, #2
 8006e1c:	60c3      	str	r3, [r0, #12]
 8006e1e:	7854      	ldrb	r4, [r2, #1]
 8006e20:	2c5f      	cmp	r4, #95	; 0x5f
 8006e22:	d12d      	bne.n	8006e80 <d_substitution+0x80>
 8006e24:	2300      	movs	r3, #0
 8006e26:	6a02      	ldr	r2, [r0, #32]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d21c      	bcs.n	8006e66 <d_substitution+0x66>
 8006e2c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006e2e:	69c1      	ldr	r1, [r0, #28]
 8006e30:	3201      	adds	r2, #1
 8006e32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006e36:	6282      	str	r2, [r0, #40]	; 0x28
 8006e38:	4608      	mov	r0, r1
 8006e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e3e:	461c      	mov	r4, r3
 8006e40:	6883      	ldr	r3, [r0, #8]
 8006e42:	f003 0308 	and.w	r3, r3, #8
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	bf14      	ite	ne
 8006e4a:	2501      	movne	r5, #1
 8006e4c:	2500      	moveq	r5, #0
 8006e4e:	d00e      	beq.n	8006e6e <d_substitution+0x6e>
 8006e50:	4b4d      	ldr	r3, [pc, #308]	; (8006f88 <d_substitution+0x188>)
 8006e52:	2274      	movs	r2, #116	; 0x74
 8006e54:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
 8006e58:	e000      	b.n	8006e5c <d_substitution+0x5c>
 8006e5a:	781a      	ldrb	r2, [r3, #0]
 8006e5c:	4294      	cmp	r4, r2
 8006e5e:	d038      	beq.n	8006ed2 <d_substitution+0xd2>
 8006e60:	331c      	adds	r3, #28
 8006e62:	428b      	cmp	r3, r1
 8006e64:	d3f9      	bcc.n	8006e5a <d_substitution+0x5a>
 8006e66:	2100      	movs	r1, #0
 8006e68:	4608      	mov	r0, r1
 8006e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d0ee      	beq.n	8006e50 <d_substitution+0x50>
 8006e72:	68c3      	ldr	r3, [r0, #12]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	3b43      	subs	r3, #67	; 0x43
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	bf98      	it	ls
 8006e7c:	2501      	movls	r5, #1
 8006e7e:	e7e7      	b.n	8006e50 <d_substitution+0x50>
 8006e80:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8006e84:	b2eb      	uxtb	r3, r5
 8006e86:	2b09      	cmp	r3, #9
 8006e88:	d879      	bhi.n	8006f7e <d_substitution+0x17e>
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	e00d      	b.n	8006eaa <d_substitution+0xaa>
 8006e8e:	3b30      	subs	r3, #48	; 0x30
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d8e8      	bhi.n	8006e66 <d_substitution+0x66>
 8006e94:	68c2      	ldr	r2, [r0, #12]
 8006e96:	7814      	ldrb	r4, [r2, #0]
 8006e98:	1c51      	adds	r1, r2, #1
 8006e9a:	b11c      	cbz	r4, 8006ea4 <d_substitution+0xa4>
 8006e9c:	60c1      	str	r1, [r0, #12]
 8006e9e:	7814      	ldrb	r4, [r2, #0]
 8006ea0:	2c5f      	cmp	r4, #95	; 0x5f
 8006ea2:	d014      	beq.n	8006ece <d_substitution+0xce>
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8006eaa:	b2ed      	uxtb	r5, r5
 8006eac:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8006eb0:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8006eb4:	2d09      	cmp	r5, #9
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ebc:	d9e7      	bls.n	8006e8e <d_substitution+0x8e>
 8006ebe:	2a19      	cmp	r2, #25
 8006ec0:	d8d1      	bhi.n	8006e66 <d_substitution+0x66>
 8006ec2:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8006ec6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006eca:	3b37      	subs	r3, #55	; 0x37
 8006ecc:	e7e0      	b.n	8006e90 <d_substitution+0x90>
 8006ece:	3301      	adds	r3, #1
 8006ed0:	e7a9      	b.n	8006e26 <d_substitution+0x26>
 8006ed2:	695c      	ldr	r4, [r3, #20]
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	d049      	beq.n	8006f6c <d_substitution+0x16c>
 8006ed8:	6942      	ldr	r2, [r0, #20]
 8006eda:	6981      	ldr	r1, [r0, #24]
 8006edc:	428a      	cmp	r2, r1
 8006ede:	da43      	bge.n	8006f68 <d_substitution+0x168>
 8006ee0:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8006ee4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8006ee8:	00b6      	lsls	r6, r6, #2
 8006eea:	3201      	adds	r2, #1
 8006eec:	eb1e 0706 	adds.w	r7, lr, r6
 8006ef0:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8006ef4:	6142      	str	r2, [r0, #20]
 8006ef6:	d040      	beq.n	8006f7a <d_substitution+0x17a>
 8006ef8:	f04f 0c18 	mov.w	ip, #24
 8006efc:	f80e c006 	strb.w	ip, [lr, r6]
 8006f00:	463e      	mov	r6, r7
 8006f02:	607c      	str	r4, [r7, #4]
 8006f04:	f8c7 8008 	str.w	r8, [r7, #8]
 8006f08:	62c6      	str	r6, [r0, #44]	; 0x2c
 8006f0a:	b345      	cbz	r5, 8006f5e <d_substitution+0x15e>
 8006f0c:	68de      	ldr	r6, [r3, #12]
 8006f0e:	691c      	ldr	r4, [r3, #16]
 8006f10:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006f12:	4291      	cmp	r1, r2
 8006f14:	4423      	add	r3, r4
 8006f16:	6303      	str	r3, [r0, #48]	; 0x30
 8006f18:	dd24      	ble.n	8006f64 <d_substitution+0x164>
 8006f1a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8006f1e:	6905      	ldr	r5, [r0, #16]
 8006f20:	0089      	lsls	r1, r1, #2
 8006f22:	3201      	adds	r2, #1
 8006f24:	186b      	adds	r3, r5, r1
 8006f26:	6142      	str	r2, [r0, #20]
 8006f28:	d025      	beq.n	8006f76 <d_substitution+0x176>
 8006f2a:	2218      	movs	r2, #24
 8006f2c:	546a      	strb	r2, [r5, r1]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	605e      	str	r6, [r3, #4]
 8006f32:	609c      	str	r4, [r3, #8]
 8006f34:	68c3      	ldr	r3, [r0, #12]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b42      	cmp	r3, #66	; 0x42
 8006f3a:	f47f af7d 	bne.w	8006e38 <d_substitution+0x38>
 8006f3e:	4604      	mov	r4, r0
 8006f40:	f7ff ff44 	bl	8006dcc <d_abi_tags>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d08e      	beq.n	8006e66 <d_substitution+0x66>
 8006f48:	6a23      	ldr	r3, [r4, #32]
 8006f4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	da10      	bge.n	8006f72 <d_substitution+0x172>
 8006f50:	69e1      	ldr	r1, [r4, #28]
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8006f58:	4601      	mov	r1, r0
 8006f5a:	6222      	str	r2, [r4, #32]
 8006f5c:	e76c      	b.n	8006e38 <d_substitution+0x38>
 8006f5e:	685e      	ldr	r6, [r3, #4]
 8006f60:	689c      	ldr	r4, [r3, #8]
 8006f62:	e7d5      	b.n	8006f10 <d_substitution+0x110>
 8006f64:	2100      	movs	r1, #0
 8006f66:	e7e5      	b.n	8006f34 <d_substitution+0x134>
 8006f68:	2600      	movs	r6, #0
 8006f6a:	e7cd      	b.n	8006f08 <d_substitution+0x108>
 8006f6c:	6981      	ldr	r1, [r0, #24]
 8006f6e:	6942      	ldr	r2, [r0, #20]
 8006f70:	e7cb      	b.n	8006f0a <d_substitution+0x10a>
 8006f72:	4601      	mov	r1, r0
 8006f74:	e760      	b.n	8006e38 <d_substitution+0x38>
 8006f76:	4619      	mov	r1, r3
 8006f78:	e7dc      	b.n	8006f34 <d_substitution+0x134>
 8006f7a:	463e      	mov	r6, r7
 8006f7c:	e7c4      	b.n	8006f08 <d_substitution+0x108>
 8006f7e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006f82:	2b19      	cmp	r3, #25
 8006f84:	d981      	bls.n	8006e8a <d_substitution+0x8a>
 8006f86:	e75b      	b.n	8006e40 <d_substitution+0x40>
 8006f88:	080125c8 	.word	0x080125c8

08006f8c <d_call_offset>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4604      	mov	r4, r0
 8006f90:	b929      	cbnz	r1, 8006f9e <d_call_offset+0x12>
 8006f92:	68c3      	ldr	r3, [r0, #12]
 8006f94:	781a      	ldrb	r2, [r3, #0]
 8006f96:	b132      	cbz	r2, 8006fa6 <d_call_offset+0x1a>
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	60c2      	str	r2, [r0, #12]
 8006f9c:	7819      	ldrb	r1, [r3, #0]
 8006f9e:	2968      	cmp	r1, #104	; 0x68
 8006fa0:	d019      	beq.n	8006fd6 <d_call_offset+0x4a>
 8006fa2:	2976      	cmp	r1, #118	; 0x76
 8006fa4:	d001      	beq.n	8006faa <d_call_offset+0x1e>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	f104 050c 	add.w	r5, r4, #12
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f7ff fe30 	bl	8006c14 <d_number.isra.0>
 8006fb4:	68e3      	ldr	r3, [r4, #12]
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	2a5f      	cmp	r2, #95	; 0x5f
 8006fba:	d1f4      	bne.n	8006fa6 <d_call_offset+0x1a>
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60e3      	str	r3, [r4, #12]
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f7ff fe27 	bl	8006c14 <d_number.isra.0>
 8006fc6:	68e3      	ldr	r3, [r4, #12]
 8006fc8:	781a      	ldrb	r2, [r3, #0]
 8006fca:	2a5f      	cmp	r2, #95	; 0x5f
 8006fcc:	d1eb      	bne.n	8006fa6 <d_call_offset+0x1a>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60e3      	str	r3, [r4, #12]
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	f104 000c 	add.w	r0, r4, #12
 8006fda:	f7ff fe1b 	bl	8006c14 <d_number.isra.0>
 8006fde:	e7f2      	b.n	8006fc6 <d_call_offset+0x3a>

08006fe0 <d_lookup_template_argument.isra.6>:
 8006fe0:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	b1c3      	cbz	r3, 800701a <d_lookup_template_argument.isra.6+0x3a>
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	680b      	ldr	r3, [r1, #0]
 8006fec:	6890      	ldr	r0, [r2, #8]
 8006fee:	b170      	cbz	r0, 800700e <d_lookup_template_argument.isra.6+0x2e>
 8006ff0:	7802      	ldrb	r2, [r0, #0]
 8006ff2:	2a2f      	cmp	r2, #47	; 0x2f
 8006ff4:	d10d      	bne.n	8007012 <d_lookup_template_argument.isra.6+0x32>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	dc04      	bgt.n	8007004 <d_lookup_template_argument.isra.6+0x24>
 8006ffa:	e009      	b.n	8007010 <d_lookup_template_argument.isra.6+0x30>
 8006ffc:	7802      	ldrb	r2, [r0, #0]
 8006ffe:	2a2f      	cmp	r2, #47	; 0x2f
 8007000:	d107      	bne.n	8007012 <d_lookup_template_argument.isra.6+0x32>
 8007002:	b143      	cbz	r3, 8007016 <d_lookup_template_argument.isra.6+0x36>
 8007004:	6880      	ldr	r0, [r0, #8]
 8007006:	3b01      	subs	r3, #1
 8007008:	2800      	cmp	r0, #0
 800700a:	d1f7      	bne.n	8006ffc <d_lookup_template_argument.isra.6+0x1c>
 800700c:	4770      	bx	lr
 800700e:	4770      	bx	lr
 8007010:	d001      	beq.n	8007016 <d_lookup_template_argument.isra.6+0x36>
 8007012:	2000      	movs	r0, #0
 8007014:	4770      	bx	lr
 8007016:	6840      	ldr	r0, [r0, #4]
 8007018:	4770      	bx	lr
 800701a:	2101      	movs	r1, #1
 800701c:	4618      	mov	r0, r3
 800701e:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 8007022:	4770      	bx	lr

08007024 <d_find_pack>:
 8007024:	2900      	cmp	r1, #0
 8007026:	d041      	beq.n	80070ac <d_find_pack+0x88>
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4605      	mov	r5, r0
 800702c:	460c      	mov	r4, r1
 800702e:	7823      	ldrb	r3, [r4, #0]
 8007030:	2b4a      	cmp	r3, #74	; 0x4a
 8007032:	d827      	bhi.n	8007084 <d_find_pack+0x60>
 8007034:	e8df f003 	tbb	[pc, r3]
 8007038:	2626262e 	.word	0x2626262e
 800703c:	2b2e3026 	.word	0x2b2e3026
 8007040:	2626262b 	.word	0x2626262b
 8007044:	26262626 	.word	0x26262626
 8007048:	26262626 	.word	0x26262626
 800704c:	26262626 	.word	0x26262626
 8007050:	2626262e 	.word	0x2626262e
 8007054:	26262626 	.word	0x26262626
 8007058:	26262626 	.word	0x26262626
 800705c:	2e262626 	.word	0x2e262626
 8007060:	26262626 	.word	0x26262626
 8007064:	26262626 	.word	0x26262626
 8007068:	262b2e26 	.word	0x262b2e26
 800706c:	26262626 	.word	0x26262626
 8007070:	26262626 	.word	0x26262626
 8007074:	2e262626 	.word	0x2e262626
 8007078:	26262626 	.word	0x26262626
 800707c:	262e262e 	.word	0x262e262e
 8007080:	2e26      	.short	0x2e26
 8007082:	2e          	.byte	0x2e
 8007083:	00          	.byte	0x00
 8007084:	6861      	ldr	r1, [r4, #4]
 8007086:	4628      	mov	r0, r5
 8007088:	f7ff ffcc 	bl	8007024 <d_find_pack>
 800708c:	b918      	cbnz	r0, 8007096 <d_find_pack+0x72>
 800708e:	68a4      	ldr	r4, [r4, #8]
 8007090:	2c00      	cmp	r4, #0
 8007092:	d1cc      	bne.n	800702e <d_find_pack+0xa>
 8007094:	2000      	movs	r0, #0
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	1d21      	adds	r1, r4, #4
 800709a:	4628      	mov	r0, r5
 800709c:	f7ff ffa0 	bl	8006fe0 <d_lookup_template_argument.isra.6>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d0f7      	beq.n	8007094 <d_find_pack+0x70>
 80070a4:	7803      	ldrb	r3, [r0, #0]
 80070a6:	2b2f      	cmp	r3, #47	; 0x2f
 80070a8:	d1f4      	bne.n	8007094 <d_find_pack+0x70>
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	2000      	movs	r0, #0
 80070ae:	4770      	bx	lr

080070b0 <d_growable_string_callback_adapter>:
 80070b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070b2:	6853      	ldr	r3, [r2, #4]
 80070b4:	6894      	ldr	r4, [r2, #8]
 80070b6:	3301      	adds	r3, #1
 80070b8:	440b      	add	r3, r1
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	b083      	sub	sp, #12
 80070be:	4615      	mov	r5, r2
 80070c0:	460e      	mov	r6, r1
 80070c2:	4607      	mov	r7, r0
 80070c4:	d813      	bhi.n	80070ee <d_growable_string_callback_adapter+0x3e>
 80070c6:	68ec      	ldr	r4, [r5, #12]
 80070c8:	b10c      	cbz	r4, 80070ce <d_growable_string_callback_adapter+0x1e>
 80070ca:	b003      	add	sp, #12
 80070cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ce:	e895 0009 	ldmia.w	r5, {r0, r3}
 80070d2:	4632      	mov	r2, r6
 80070d4:	4639      	mov	r1, r7
 80070d6:	4418      	add	r0, r3
 80070d8:	f00a f809 	bl	80110ee <memcpy>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	686a      	ldr	r2, [r5, #4]
 80070e0:	4433      	add	r3, r6
 80070e2:	549c      	strb	r4, [r3, r2]
 80070e4:	686b      	ldr	r3, [r5, #4]
 80070e6:	441e      	add	r6, r3
 80070e8:	606e      	str	r6, [r5, #4]
 80070ea:	b003      	add	sp, #12
 80070ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ee:	68d2      	ldr	r2, [r2, #12]
 80070f0:	2a00      	cmp	r2, #0
 80070f2:	d1ea      	bne.n	80070ca <d_growable_string_callback_adapter+0x1a>
 80070f4:	b91c      	cbnz	r4, 80070fe <d_growable_string_callback_adapter+0x4e>
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	f04f 0402 	mov.w	r4, #2
 80070fc:	d902      	bls.n	8007104 <d_growable_string_callback_adapter+0x54>
 80070fe:	0064      	lsls	r4, r4, #1
 8007100:	42a3      	cmp	r3, r4
 8007102:	d8fc      	bhi.n	80070fe <d_growable_string_callback_adapter+0x4e>
 8007104:	4621      	mov	r1, r4
 8007106:	6828      	ldr	r0, [r5, #0]
 8007108:	f00a f89c 	bl	8011244 <realloc>
 800710c:	b110      	cbz	r0, 8007114 <d_growable_string_callback_adapter+0x64>
 800710e:	6028      	str	r0, [r5, #0]
 8007110:	60ac      	str	r4, [r5, #8]
 8007112:	e7d8      	b.n	80070c6 <d_growable_string_callback_adapter+0x16>
 8007114:	9001      	str	r0, [sp, #4]
 8007116:	6828      	ldr	r0, [r5, #0]
 8007118:	f009 ffd2 	bl	80110c0 <free>
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	602b      	str	r3, [r5, #0]
 8007122:	606b      	str	r3, [r5, #4]
 8007124:	60ab      	str	r3, [r5, #8]
 8007126:	60ea      	str	r2, [r5, #12]
 8007128:	e7cf      	b.n	80070ca <d_growable_string_callback_adapter+0x1a>
 800712a:	bf00      	nop

0800712c <d_print_comp_inner>:
 800712c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007130:	4604      	mov	r4, r0
 8007132:	b095      	sub	sp, #84	; 0x54
 8007134:	2a00      	cmp	r2, #0
 8007136:	f000 80c3 	beq.w	80072c0 <d_print_comp_inner+0x194>
 800713a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800713e:	2b00      	cmp	r3, #0
 8007140:	f040 80b6 	bne.w	80072b0 <d_print_comp_inner+0x184>
 8007144:	7813      	ldrb	r3, [r2, #0]
 8007146:	460f      	mov	r7, r1
 8007148:	4615      	mov	r5, r2
 800714a:	2b4b      	cmp	r3, #75	; 0x4b
 800714c:	f201 81ec 	bhi.w	8008528 <d_print_comp_inner+0x13fc>
 8007150:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007154:	094c096d 	.word	0x094c096d
 8007158:	08bf094c 	.word	0x08bf094c
 800715c:	09cd087b 	.word	0x09cd087b
 8007160:	09e509a2 	.word	0x09e509a2
 8007164:	085407c7 	.word	0x085407c7
 8007168:	0806082d 	.word	0x0806082d
 800716c:	05d607df 	.word	0x05d607df
 8007170:	057a05af 	.word	0x057a05af
 8007174:	07100553 	.word	0x07100553
 8007178:	06c206e9 	.word	0x06c206e9
 800717c:	0674069b 	.word	0x0674069b
 8007180:	0626064d 	.word	0x0626064d
 8007184:	07ad05fd 	.word	0x07ad05fd
 8007188:	07ad07ad 	.word	0x07ad07ad
 800718c:	07a807a8 	.word	0x07a807a8
 8007190:	07a807a8 	.word	0x07a807a8
 8007194:	07a807a8 	.word	0x07a807a8
 8007198:	077607a8 	.word	0x077607a8
 800719c:	07a80776 	.word	0x07a80776
 80071a0:	073707a8 	.word	0x073707a8
 80071a4:	04fd07da 	.word	0x04fd07da
 80071a8:	04760491 	.word	0x04760491
 80071ac:	047603d4 	.word	0x047603d4
 80071b0:	03940394 	.word	0x03940394
 80071b4:	03470371 	.word	0x03470371
 80071b8:	02f90320 	.word	0x02f90320
 80071bc:	02c702f5 	.word	0x02c702f5
 80071c0:	0472004c 	.word	0x0472004c
 80071c4:	04170512 	.word	0x04170512
 80071c8:	04420417 	.word	0x04420417
 80071cc:	041b0442 	.word	0x041b0442
 80071d0:	02b102be 	.word	0x02b102be
 80071d4:	0233025a 	.word	0x0233025a
 80071d8:	01d001f7 	.word	0x01d001f7
 80071dc:	09ea01a9 	.word	0x09ea01a9
 80071e0:	028a0183 	.word	0x028a0183
 80071e4:	0110015c 	.word	0x0110015c
 80071e8:	00bc00e6 	.word	0x00bc00e6
 80071ec:	68ae      	ldr	r6, [r5, #8]
 80071ee:	7833      	ldrb	r3, [r6, #0]
 80071f0:	2b37      	cmp	r3, #55	; 0x37
 80071f2:	d165      	bne.n	80072c0 <d_print_comp_inner+0x194>
 80071f4:	686a      	ldr	r2, [r5, #4]
 80071f6:	6853      	ldr	r3, [r2, #4]
 80071f8:	6819      	ldr	r1, [r3, #0]
 80071fa:	7848      	ldrb	r0, [r1, #1]
 80071fc:	2863      	cmp	r0, #99	; 0x63
 80071fe:	f002 8089 	beq.w	8009314 <d_print_comp_inner+0x21e8>
 8007202:	7811      	ldrb	r1, [r2, #0]
 8007204:	2931      	cmp	r1, #49	; 0x31
 8007206:	f002 815e 	beq.w	80094c6 <d_print_comp_inner+0x239a>
 800720a:	6853      	ldr	r3, [r2, #4]
 800720c:	49d1      	ldr	r1, [pc, #836]	; (8007554 <d_print_comp_inner+0x428>)
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	f007 fd12 	bl	800ec38 <strcmp>
 8007214:	6872      	ldr	r2, [r6, #4]
 8007216:	b918      	cbnz	r0, 8007220 <d_print_comp_inner+0xf4>
 8007218:	7813      	ldrb	r3, [r2, #0]
 800721a:	2b03      	cmp	r3, #3
 800721c:	f002 81ed 	beq.w	80095fa <d_print_comp_inner+0x24ce>
 8007220:	4639      	mov	r1, r7
 8007222:	4620      	mov	r0, r4
 8007224:	f003 fa4c 	bl	800a6c0 <d_print_subexpr>
 8007228:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800722c:	49ca      	ldr	r1, [pc, #808]	; (8007558 <d_print_comp_inner+0x42c>)
 800722e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007232:	f8d3 9000 	ldr.w	r9, [r3]
 8007236:	4648      	mov	r0, r9
 8007238:	f007 fcfe 	bl	800ec38 <strcmp>
 800723c:	4606      	mov	r6, r0
 800723e:	2800      	cmp	r0, #0
 8007240:	f041 87ee 	bne.w	8009220 <d_print_comp_inner+0x20f4>
 8007244:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007248:	29ff      	cmp	r1, #255	; 0xff
 800724a:	f002 827c 	beq.w	8009746 <d_print_comp_inner+0x261a>
 800724e:	1c4a      	adds	r2, r1, #1
 8007250:	235b      	movs	r3, #91	; 0x5b
 8007252:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007256:	5463      	strb	r3, [r4, r1]
 8007258:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800725c:	68ab      	ldr	r3, [r5, #8]
 800725e:	4639      	mov	r1, r7
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	4620      	mov	r0, r4
 8007264:	f002 fb7a 	bl	800995c <d_print_comp>
 8007268:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800726c:	29ff      	cmp	r1, #255	; 0xff
 800726e:	f002 827a 	beq.w	8009766 <d_print_comp_inner+0x263a>
 8007272:	235d      	movs	r3, #93	; 0x5d
 8007274:	1c4a      	adds	r2, r1, #1
 8007276:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800727a:	5463      	strb	r3, [r4, r1]
 800727c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007280:	686b      	ldr	r3, [r5, #4]
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	2a31      	cmp	r2, #49	; 0x31
 8007286:	d113      	bne.n	80072b0 <d_print_comp_inner+0x184>
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	2a01      	cmp	r2, #1
 800728e:	d10f      	bne.n	80072b0 <d_print_comp_inner+0x184>
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b3e      	cmp	r3, #62	; 0x3e
 8007296:	d10b      	bne.n	80072b0 <d_print_comp_inner+0x184>
 8007298:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800729c:	29ff      	cmp	r1, #255	; 0xff
 800729e:	f002 8323 	beq.w	80098e8 <d_print_comp_inner+0x27bc>
 80072a2:	2329      	movs	r3, #41	; 0x29
 80072a4:	1c4a      	adds	r2, r1, #1
 80072a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80072aa:	5463      	strb	r3, [r4, r1]
 80072ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80072b0:	b015      	add	sp, #84	; 0x54
 80072b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b6:	f1b8 0f00 	cmp.w	r8, #0
 80072ba:	d001      	beq.n	80072c0 <d_print_comp_inner+0x194>
 80072bc:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 80072c0:	2301      	movs	r3, #1
 80072c2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80072c6:	b015      	add	sp, #84	; 0x54
 80072c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	4ea3      	ldr	r6, [pc, #652]	; (800755c <d_print_comp_inner+0x430>)
 80072ce:	686a      	ldr	r2, [r5, #4]
 80072d0:	f002 fb44 	bl	800995c <d_print_comp>
 80072d4:	f106 0a08 	add.w	sl, r6, #8
 80072d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80072dc:	f04f 0900 	mov.w	r9, #0
 80072e0:	e00a      	b.n	80072f8 <d_print_comp_inner+0x1cc>
 80072e2:	460b      	mov	r3, r1
 80072e4:	3101      	adds	r1, #1
 80072e6:	45b2      	cmp	sl, r6
 80072e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80072ec:	f804 8003 	strb.w	r8, [r4, r3]
 80072f0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80072f4:	f001 8299 	beq.w	800882a <d_print_comp_inner+0x16fe>
 80072f8:	29ff      	cmp	r1, #255	; 0xff
 80072fa:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80072fe:	d1f0      	bne.n	80072e2 <d_print_comp_inner+0x1b6>
 8007300:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007304:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007308:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800730c:	4620      	mov	r0, r4
 800730e:	4798      	blx	r3
 8007310:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007314:	2101      	movs	r1, #1
 8007316:	440b      	add	r3, r1
 8007318:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800731c:	2300      	movs	r3, #0
 800731e:	e7e2      	b.n	80072e6 <d_print_comp_inner+0x1ba>
 8007320:	4e8f      	ldr	r6, [pc, #572]	; (8007560 <d_print_comp_inner+0x434>)
 8007322:	686a      	ldr	r2, [r5, #4]
 8007324:	f002 fb1a 	bl	800995c <d_print_comp>
 8007328:	f106 0a05 	add.w	sl, r6, #5
 800732c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007330:	f04f 0900 	mov.w	r9, #0
 8007334:	e00a      	b.n	800734c <d_print_comp_inner+0x220>
 8007336:	460b      	mov	r3, r1
 8007338:	3101      	adds	r1, #1
 800733a:	45b2      	cmp	sl, r6
 800733c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007340:	f804 8003 	strb.w	r8, [r4, r3]
 8007344:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007348:	f001 8248 	beq.w	80087dc <d_print_comp_inner+0x16b0>
 800734c:	29ff      	cmp	r1, #255	; 0xff
 800734e:	f816 8b01 	ldrb.w	r8, [r6], #1
 8007352:	d1f0      	bne.n	8007336 <d_print_comp_inner+0x20a>
 8007354:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007358:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800735c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007360:	4620      	mov	r0, r4
 8007362:	4798      	blx	r3
 8007364:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007368:	2101      	movs	r1, #1
 800736a:	440b      	add	r3, r1
 800736c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007370:	2300      	movs	r3, #0
 8007372:	e7e2      	b.n	800733a <d_print_comp_inner+0x20e>
 8007374:	6869      	ldr	r1, [r5, #4]
 8007376:	f7ff fe55 	bl	8007024 <d_find_pack>
 800737a:	f04f 0900 	mov.w	r9, #0
 800737e:	2800      	cmp	r0, #0
 8007380:	f002 8149 	beq.w	8009616 <d_print_comp_inner+0x24ea>
 8007384:	7803      	ldrb	r3, [r0, #0]
 8007386:	2b2f      	cmp	r3, #47	; 0x2f
 8007388:	f041 8315 	bne.w	80089b6 <d_print_comp_inner+0x188a>
 800738c:	6843      	ldr	r3, [r0, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f001 8311 	beq.w	80089b6 <d_print_comp_inner+0x188a>
 8007394:	6880      	ldr	r0, [r0, #8]
 8007396:	f109 0901 	add.w	r9, r9, #1
 800739a:	2800      	cmp	r0, #0
 800739c:	d1f2      	bne.n	8007384 <d_print_comp_inner+0x258>
 800739e:	686b      	ldr	r3, [r5, #4]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	f04f 0b00 	mov.w	fp, #0
 80073a6:	46da      	mov	sl, fp
 80073a8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	f8c4 b11c 	str.w	fp, [r4, #284]	; 0x11c
 80073b2:	9a00      	ldr	r2, [sp, #0]
 80073b4:	4639      	mov	r1, r7
 80073b6:	4620      	mov	r0, r4
 80073b8:	f002 fad0 	bl	800995c <d_print_comp>
 80073bc:	9b01      	ldr	r3, [sp, #4]
 80073be:	455b      	cmp	r3, fp
 80073c0:	f341 80b7 	ble.w	8008532 <d_print_comp_inner+0x1406>
 80073c4:	4d67      	ldr	r5, [pc, #412]	; (8007564 <d_print_comp_inner+0x438>)
 80073c6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80073ca:	f105 0802 	add.w	r8, r5, #2
 80073ce:	e009      	b.n	80073e4 <d_print_comp_inner+0x2b8>
 80073d0:	460b      	mov	r3, r1
 80073d2:	3101      	adds	r1, #1
 80073d4:	45a8      	cmp	r8, r5
 80073d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80073da:	54e6      	strb	r6, [r4, r3]
 80073dc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80073e0:	f001 80a7 	beq.w	8008532 <d_print_comp_inner+0x1406>
 80073e4:	29ff      	cmp	r1, #255	; 0xff
 80073e6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80073ea:	d1f1      	bne.n	80073d0 <d_print_comp_inner+0x2a4>
 80073ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80073f0:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80073f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80073f8:	4620      	mov	r0, r4
 80073fa:	4798      	blx	r3
 80073fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007400:	2101      	movs	r1, #1
 8007402:	440b      	add	r3, r1
 8007404:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007408:	2300      	movs	r3, #0
 800740a:	e7e3      	b.n	80073d4 <d_print_comp_inner+0x2a8>
 800740c:	4e56      	ldr	r6, [pc, #344]	; (8007568 <d_print_comp_inner+0x43c>)
 800740e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007412:	f106 0a1a 	add.w	sl, r6, #26
 8007416:	f04f 0900 	mov.w	r9, #0
 800741a:	e00a      	b.n	8007432 <d_print_comp_inner+0x306>
 800741c:	460b      	mov	r3, r1
 800741e:	3101      	adds	r1, #1
 8007420:	45b2      	cmp	sl, r6
 8007422:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007426:	f804 8003 	strb.w	r8, [r4, r3]
 800742a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800742e:	f001 81e8 	beq.w	8008802 <d_print_comp_inner+0x16d6>
 8007432:	29ff      	cmp	r1, #255	; 0xff
 8007434:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007438:	d1f0      	bne.n	800741c <d_print_comp_inner+0x2f0>
 800743a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800743e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007446:	4620      	mov	r0, r4
 8007448:	4798      	blx	r3
 800744a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800744e:	2101      	movs	r1, #1
 8007450:	440b      	add	r3, r1
 8007452:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007456:	2300      	movs	r3, #0
 8007458:	e7e2      	b.n	8007420 <d_print_comp_inner+0x2f4>
 800745a:	4e44      	ldr	r6, [pc, #272]	; (800756c <d_print_comp_inner+0x440>)
 800745c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007460:	f106 090e 	add.w	r9, r6, #14
 8007464:	f04f 0800 	mov.w	r8, #0
 8007468:	e009      	b.n	800747e <d_print_comp_inner+0x352>
 800746a:	460b      	mov	r3, r1
 800746c:	3101      	adds	r1, #1
 800746e:	45b1      	cmp	r9, r6
 8007470:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007474:	54e7      	strb	r7, [r4, r3]
 8007476:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800747a:	f001 80b1 	beq.w	80085e0 <d_print_comp_inner+0x14b4>
 800747e:	29ff      	cmp	r1, #255	; 0xff
 8007480:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8007484:	d1f1      	bne.n	800746a <d_print_comp_inner+0x33e>
 8007486:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800748a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800748e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007492:	4620      	mov	r0, r4
 8007494:	4798      	blx	r3
 8007496:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800749a:	2101      	movs	r1, #1
 800749c:	440b      	add	r3, r1
 800749e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80074a2:	2300      	movs	r3, #0
 80074a4:	e7e3      	b.n	800746e <d_print_comp_inner+0x342>
 80074a6:	4e32      	ldr	r6, [pc, #200]	; (8007570 <d_print_comp_inner+0x444>)
 80074a8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80074ac:	f106 0a08 	add.w	sl, r6, #8
 80074b0:	f04f 0900 	mov.w	r9, #0
 80074b4:	e00a      	b.n	80074cc <d_print_comp_inner+0x3a0>
 80074b6:	460b      	mov	r3, r1
 80074b8:	3101      	adds	r1, #1
 80074ba:	45b2      	cmp	sl, r6
 80074bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80074c0:	f804 8003 	strb.w	r8, [r4, r3]
 80074c4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80074c8:	f001 80c6 	beq.w	8008658 <d_print_comp_inner+0x152c>
 80074cc:	29ff      	cmp	r1, #255	; 0xff
 80074ce:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80074d2:	d1f0      	bne.n	80074b6 <d_print_comp_inner+0x38a>
 80074d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80074d8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80074dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80074e0:	4620      	mov	r0, r4
 80074e2:	4798      	blx	r3
 80074e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074e8:	2101      	movs	r1, #1
 80074ea:	440b      	add	r3, r1
 80074ec:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80074f0:	2300      	movs	r3, #0
 80074f2:	e7e2      	b.n	80074ba <d_print_comp_inner+0x38e>
 80074f4:	4e1f      	ldr	r6, [pc, #124]	; (8007574 <d_print_comp_inner+0x448>)
 80074f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80074fa:	f106 0a1c 	add.w	sl, r6, #28
 80074fe:	f04f 0900 	mov.w	r9, #0
 8007502:	e00a      	b.n	800751a <d_print_comp_inner+0x3ee>
 8007504:	460b      	mov	r3, r1
 8007506:	3101      	adds	r1, #1
 8007508:	45b2      	cmp	sl, r6
 800750a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800750e:	f804 8003 	strb.w	r8, [r4, r3]
 8007512:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007516:	f001 805c 	beq.w	80085d2 <d_print_comp_inner+0x14a6>
 800751a:	29ff      	cmp	r1, #255	; 0xff
 800751c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007520:	d1f0      	bne.n	8007504 <d_print_comp_inner+0x3d8>
 8007522:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007526:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800752a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800752e:	4620      	mov	r0, r4
 8007530:	4798      	blx	r3
 8007532:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007536:	2101      	movs	r1, #1
 8007538:	440b      	add	r3, r1
 800753a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800753e:	2300      	movs	r3, #0
 8007540:	e7e2      	b.n	8007508 <d_print_comp_inner+0x3dc>
 8007542:	4e0d      	ldr	r6, [pc, #52]	; (8007578 <d_print_comp_inner+0x44c>)
 8007544:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007548:	f106 0a1d 	add.w	sl, r6, #29
 800754c:	f04f 0900 	mov.w	r9, #0
 8007550:	e01f      	b.n	8007592 <d_print_comp_inner+0x466>
 8007552:	bf00      	nop
 8007554:	08013998 	.word	0x08013998
 8007558:	0801399c 	.word	0x0801399c
 800755c:	08013a5b 	.word	0x08013a5b
 8007560:	080137e0 	.word	0x080137e0
 8007564:	08013970 	.word	0x08013970
 8007568:	0801393b 	.word	0x0801393b
 800756c:	08013a4b 	.word	0x08013a4b
 8007570:	08013a3b 	.word	0x08013a3b
 8007574:	08013a1b 	.word	0x08013a1b
 8007578:	080139fb 	.word	0x080139fb
 800757c:	460b      	mov	r3, r1
 800757e:	3101      	adds	r1, #1
 8007580:	45b2      	cmp	sl, r6
 8007582:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007586:	f804 8003 	strb.w	r8, [r4, r3]
 800758a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800758e:	f001 80db 	beq.w	8008748 <d_print_comp_inner+0x161c>
 8007592:	29ff      	cmp	r1, #255	; 0xff
 8007594:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007598:	d1f0      	bne.n	800757c <d_print_comp_inner+0x450>
 800759a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800759e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80075a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075a6:	4620      	mov	r0, r4
 80075a8:	4798      	blx	r3
 80075aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075ae:	2101      	movs	r1, #1
 80075b0:	440b      	add	r3, r1
 80075b2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80075b6:	2300      	movs	r3, #0
 80075b8:	e7e2      	b.n	8007580 <d_print_comp_inner+0x454>
 80075ba:	4eca      	ldr	r6, [pc, #808]	; (80078e4 <d_print_comp_inner+0x7b8>)
 80075bc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80075c0:	f106 0a0a 	add.w	sl, r6, #10
 80075c4:	f04f 0900 	mov.w	r9, #0
 80075c8:	e00a      	b.n	80075e0 <d_print_comp_inner+0x4b4>
 80075ca:	460b      	mov	r3, r1
 80075cc:	3101      	adds	r1, #1
 80075ce:	45b2      	cmp	sl, r6
 80075d0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80075d4:	f804 8003 	strb.w	r8, [r4, r3]
 80075d8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80075dc:	f000 87e6 	beq.w	80085ac <d_print_comp_inner+0x1480>
 80075e0:	29ff      	cmp	r1, #255	; 0xff
 80075e2:	f816 8b01 	ldrb.w	r8, [r6], #1
 80075e6:	d1f0      	bne.n	80075ca <d_print_comp_inner+0x49e>
 80075e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80075ec:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80075f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075f4:	4620      	mov	r0, r4
 80075f6:	4798      	blx	r3
 80075f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075fc:	2101      	movs	r1, #1
 80075fe:	440b      	add	r3, r1
 8007600:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007604:	2300      	movs	r3, #0
 8007606:	e7e2      	b.n	80075ce <d_print_comp_inner+0x4a2>
 8007608:	686a      	ldr	r2, [r5, #4]
 800760a:	a804      	add	r0, sp, #16
 800760c:	49b6      	ldr	r1, [pc, #728]	; (80078e8 <d_print_comp_inner+0x7bc>)
 800760e:	f009 ff01 	bl	8011414 <siprintf>
 8007612:	a804      	add	r0, sp, #16
 8007614:	f007 fb1a 	bl	800ec4c <strlen>
 8007618:	2800      	cmp	r0, #0
 800761a:	f43f ae49 	beq.w	80072b0 <d_print_comp_inner+0x184>
 800761e:	ad04      	add	r5, sp, #16
 8007620:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007624:	182f      	adds	r7, r5, r0
 8007626:	f04f 0800 	mov.w	r8, #0
 800762a:	e009      	b.n	8007640 <d_print_comp_inner+0x514>
 800762c:	460b      	mov	r3, r1
 800762e:	3101      	adds	r1, #1
 8007630:	42af      	cmp	r7, r5
 8007632:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007636:	54e6      	strb	r6, [r4, r3]
 8007638:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800763c:	f43f ae38 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8007640:	29ff      	cmp	r1, #255	; 0xff
 8007642:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007646:	d1f1      	bne.n	800762c <d_print_comp_inner+0x500>
 8007648:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800764c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007650:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007654:	4620      	mov	r0, r4
 8007656:	4798      	blx	r3
 8007658:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800765c:	2101      	movs	r1, #1
 800765e:	440b      	add	r3, r1
 8007660:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007664:	2300      	movs	r3, #0
 8007666:	e7e3      	b.n	8007630 <d_print_comp_inner+0x504>
 8007668:	4ea0      	ldr	r6, [pc, #640]	; (80078ec <d_print_comp_inner+0x7c0>)
 800766a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800766e:	f106 0a16 	add.w	sl, r6, #22
 8007672:	f04f 0900 	mov.w	r9, #0
 8007676:	e00a      	b.n	800768e <d_print_comp_inner+0x562>
 8007678:	460b      	mov	r3, r1
 800767a:	3101      	adds	r1, #1
 800767c:	45b2      	cmp	sl, r6
 800767e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007682:	f804 8003 	strb.w	r8, [r4, r3]
 8007686:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800768a:	f001 8056 	beq.w	800873a <d_print_comp_inner+0x160e>
 800768e:	29ff      	cmp	r1, #255	; 0xff
 8007690:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007694:	d1f0      	bne.n	8007678 <d_print_comp_inner+0x54c>
 8007696:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800769a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800769e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80076a2:	4620      	mov	r0, r4
 80076a4:	4798      	blx	r3
 80076a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80076aa:	2101      	movs	r1, #1
 80076ac:	440b      	add	r3, r1
 80076ae:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80076b2:	2300      	movs	r3, #0
 80076b4:	e7e2      	b.n	800767c <d_print_comp_inner+0x550>
 80076b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80076ba:	792d      	ldrb	r5, [r5, #4]
 80076bc:	29ff      	cmp	r1, #255	; 0xff
 80076be:	f001 846d 	beq.w	8008f9c <d_print_comp_inner+0x1e70>
 80076c2:	1c4b      	adds	r3, r1, #1
 80076c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80076c8:	5465      	strb	r5, [r4, r1]
 80076ca:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80076ce:	e5ef      	b.n	80072b0 <d_print_comp_inner+0x184>
 80076d0:	686a      	ldr	r2, [r5, #4]
 80076d2:	f002 f943 	bl	800995c <d_print_comp>
 80076d6:	68aa      	ldr	r2, [r5, #8]
 80076d8:	4639      	mov	r1, r7
 80076da:	4620      	mov	r0, r4
 80076dc:	f002 f93e 	bl	800995c <d_print_comp>
 80076e0:	e5e6      	b.n	80072b0 <d_print_comp_inner+0x184>
 80076e2:	686e      	ldr	r6, [r5, #4]
 80076e4:	68ad      	ldr	r5, [r5, #8]
 80076e6:	7833      	ldrb	r3, [r6, #0]
 80076e8:	2b31      	cmp	r3, #49	; 0x31
 80076ea:	f001 82b9 	beq.w	8008c60 <d_print_comp_inner+0x1b34>
 80076ee:	2b33      	cmp	r3, #51	; 0x33
 80076f0:	f041 83fc 	bne.w	8008eec <d_print_comp_inner+0x1dc0>
 80076f4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80076f8:	2bff      	cmp	r3, #255	; 0xff
 80076fa:	f001 872f 	beq.w	800955c <d_print_comp_inner+0x2430>
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8007704:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007708:	1d32      	adds	r2, r6, #4
 800770a:	4639      	mov	r1, r7
 800770c:	f804 e003 	strb.w	lr, [r4, r3]
 8007710:	4620      	mov	r0, r4
 8007712:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 8007716:	f002 fec1 	bl	800a49c <d_print_cast.isra.12>
 800771a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800771e:	29ff      	cmp	r1, #255	; 0xff
 8007720:	f001 870b 	beq.w	800953a <d_print_comp_inner+0x240e>
 8007724:	2329      	movs	r3, #41	; 0x29
 8007726:	1c4a      	adds	r2, r1, #1
 8007728:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800772c:	5463      	strb	r3, [r4, r1]
 800772e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007732:	462a      	mov	r2, r5
 8007734:	4639      	mov	r1, r7
 8007736:	4620      	mov	r0, r4
 8007738:	f002 ffc2 	bl	800a6c0 <d_print_subexpr>
 800773c:	e5b8      	b.n	80072b0 <d_print_comp_inner+0x184>
 800773e:	686a      	ldr	r2, [r5, #4]
 8007740:	f002 ff80 	bl	800a644 <d_print_expr_op>
 8007744:	e5b4      	b.n	80072b0 <d_print_comp_inner+0x184>
 8007746:	4e6a      	ldr	r6, [pc, #424]	; (80078f0 <d_print_comp_inner+0x7c4>)
 8007748:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800774c:	f106 0a09 	add.w	sl, r6, #9
 8007750:	f04f 0900 	mov.w	r9, #0
 8007754:	e00a      	b.n	800776c <d_print_comp_inner+0x640>
 8007756:	460b      	mov	r3, r1
 8007758:	3101      	adds	r1, #1
 800775a:	45b2      	cmp	sl, r6
 800775c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007760:	f804 8003 	strb.w	r8, [r4, r3]
 8007764:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007768:	f001 8031 	beq.w	80087ce <d_print_comp_inner+0x16a2>
 800776c:	29ff      	cmp	r1, #255	; 0xff
 800776e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007772:	d1f0      	bne.n	8007756 <d_print_comp_inner+0x62a>
 8007774:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007778:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800777c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007780:	4620      	mov	r0, r4
 8007782:	4798      	blx	r3
 8007784:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007788:	2101      	movs	r1, #1
 800778a:	440b      	add	r3, r1
 800778c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007790:	2300      	movs	r3, #0
 8007792:	e7e2      	b.n	800775a <d_print_comp_inner+0x62e>
 8007794:	4e56      	ldr	r6, [pc, #344]	; (80078f0 <d_print_comp_inner+0x7c4>)
 8007796:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800779a:	f106 0a09 	add.w	sl, r6, #9
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	e00a      	b.n	80077ba <d_print_comp_inner+0x68e>
 80077a4:	460b      	mov	r3, r1
 80077a6:	3101      	adds	r1, #1
 80077a8:	45b2      	cmp	sl, r6
 80077aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80077ae:	f804 8003 	strb.w	r8, [r4, r3]
 80077b2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80077b6:	f001 8031 	beq.w	800881c <d_print_comp_inner+0x16f0>
 80077ba:	29ff      	cmp	r1, #255	; 0xff
 80077bc:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80077c0:	d1f0      	bne.n	80077a4 <d_print_comp_inner+0x678>
 80077c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80077c6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80077ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80077ce:	4620      	mov	r0, r4
 80077d0:	4798      	blx	r3
 80077d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80077d6:	2101      	movs	r1, #1
 80077d8:	440b      	add	r3, r1
 80077da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80077de:	2300      	movs	r3, #0
 80077e0:	e7e2      	b.n	80077a8 <d_print_comp_inner+0x67c>
 80077e2:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80077e6:	4d43      	ldr	r5, [pc, #268]	; (80078f4 <d_print_comp_inner+0x7c8>)
 80077e8:	f8da 7008 	ldr.w	r7, [sl, #8]
 80077ec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80077f0:	f105 0808 	add.w	r8, r5, #8
 80077f4:	f04f 0900 	mov.w	r9, #0
 80077f8:	e009      	b.n	800780e <d_print_comp_inner+0x6e2>
 80077fa:	460b      	mov	r3, r1
 80077fc:	3101      	adds	r1, #1
 80077fe:	45a8      	cmp	r8, r5
 8007800:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007804:	54e6      	strb	r6, [r4, r3]
 8007806:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800780a:	f000 8756 	beq.w	80086ba <d_print_comp_inner+0x158e>
 800780e:	29ff      	cmp	r1, #255	; 0xff
 8007810:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007814:	d1f1      	bne.n	80077fa <d_print_comp_inner+0x6ce>
 8007816:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800781a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800781e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007822:	4620      	mov	r0, r4
 8007824:	4798      	blx	r3
 8007826:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800782a:	2101      	movs	r1, #1
 800782c:	440b      	add	r3, r1
 800782e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007832:	2300      	movs	r3, #0
 8007834:	e7e3      	b.n	80077fe <d_print_comp_inner+0x6d2>
 8007836:	686a      	ldr	r2, [r5, #4]
 8007838:	68ae      	ldr	r6, [r5, #8]
 800783a:	b10a      	cbz	r2, 8007840 <d_print_comp_inner+0x714>
 800783c:	f002 f88e 	bl	800995c <d_print_comp>
 8007840:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007844:	2bff      	cmp	r3, #255	; 0xff
 8007846:	f001 8484 	beq.w	8009152 <d_print_comp_inner+0x2026>
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	257b      	movs	r5, #123	; 0x7b
 800784e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007852:	4639      	mov	r1, r7
 8007854:	54e5      	strb	r5, [r4, r3]
 8007856:	4632      	mov	r2, r6
 8007858:	4620      	mov	r0, r4
 800785a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800785e:	f002 f87d 	bl	800995c <d_print_comp>
 8007862:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007866:	29ff      	cmp	r1, #255	; 0xff
 8007868:	f001 8367 	beq.w	8008f3a <d_print_comp_inner+0x1e0e>
 800786c:	1c4a      	adds	r2, r1, #1
 800786e:	237d      	movs	r3, #125	; 0x7d
 8007870:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007874:	5463      	strb	r3, [r4, r1]
 8007876:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800787a:	e519      	b.n	80072b0 <d_print_comp_inner+0x184>
 800787c:	686a      	ldr	r2, [r5, #4]
 800787e:	b10a      	cbz	r2, 8007884 <d_print_comp_inner+0x758>
 8007880:	f002 f86c 	bl	800995c <d_print_comp>
 8007884:	68ab      	ldr	r3, [r5, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f43f ad12 	beq.w	80072b0 <d_print_comp_inner+0x184>
 800788c:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8007890:	2efd      	cmp	r6, #253	; 0xfd
 8007892:	f201 830b 	bhi.w	8008eac <d_print_comp_inner+0x1d80>
 8007896:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80078f8 <d_print_comp_inner+0x7cc>
 800789a:	f04f 0a00 	mov.w	sl, #0
 800789e:	f108 0b02 	add.w	fp, r8, #2
 80078a2:	4631      	mov	r1, r6
 80078a4:	e009      	b.n	80078ba <d_print_comp_inner+0x78e>
 80078a6:	460b      	mov	r3, r1
 80078a8:	3101      	adds	r1, #1
 80078aa:	45c3      	cmp	fp, r8
 80078ac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80078b0:	54e6      	strb	r6, [r4, r3]
 80078b2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80078b6:	f001 8060 	beq.w	800897a <d_print_comp_inner+0x184e>
 80078ba:	29ff      	cmp	r1, #255	; 0xff
 80078bc:	f818 6b01 	ldrb.w	r6, [r8], #1
 80078c0:	d1f1      	bne.n	80078a6 <d_print_comp_inner+0x77a>
 80078c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80078c6:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 80078ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80078ce:	4620      	mov	r0, r4
 80078d0:	4798      	blx	r3
 80078d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80078d6:	2101      	movs	r1, #1
 80078d8:	440b      	add	r3, r1
 80078da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80078de:	2300      	movs	r3, #0
 80078e0:	e7e3      	b.n	80078aa <d_print_comp_inner+0x77e>
 80078e2:	bf00      	nop
 80078e4:	080139dc 	.word	0x080139dc
 80078e8:	080137fc 	.word	0x080137fc
 80078ec:	0801393f 	.word	0x0801393f
 80078f0:	0801397f 	.word	0x0801397f
 80078f4:	08013973 	.word	0x08013973
 80078f8:	08013970 	.word	0x08013970
 80078fc:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8007900:	2b00      	cmp	r3, #0
 8007902:	f041 8186 	bne.w	8008c12 <d_print_comp_inner+0x1ae6>
 8007906:	686a      	ldr	r2, [r5, #4]
 8007908:	4bd3      	ldr	r3, [pc, #844]	; (8007c58 <d_print_comp_inner+0xb2c>)
 800790a:	6851      	ldr	r1, [r2, #4]
 800790c:	4299      	cmp	r1, r3
 800790e:	f001 817c 	beq.w	8008c0a <d_print_comp_inner+0x1ade>
 8007912:	4639      	mov	r1, r7
 8007914:	4620      	mov	r0, r4
 8007916:	f002 f821 	bl	800995c <d_print_comp>
 800791a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800791e:	2bff      	cmp	r3, #255	; 0xff
 8007920:	f001 85be 	beq.w	80094a0 <d_print_comp_inner+0x2374>
 8007924:	1c59      	adds	r1, r3, #1
 8007926:	2220      	movs	r2, #32
 8007928:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800792c:	54e2      	strb	r2, [r4, r3]
 800792e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007932:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f001 8100 	beq.w	8008b3c <d_print_comp_inner+0x1a10>
 800793c:	4dc7      	ldr	r5, [pc, #796]	; (8007c5c <d_print_comp_inner+0xb30>)
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	1daf      	adds	r7, r5, #6
 8007944:	e009      	b.n	800795a <d_print_comp_inner+0x82e>
 8007946:	460b      	mov	r3, r1
 8007948:	3101      	adds	r1, #1
 800794a:	42bd      	cmp	r5, r7
 800794c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007950:	54e6      	strb	r6, [r4, r3]
 8007952:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007956:	f43f acab 	beq.w	80072b0 <d_print_comp_inner+0x184>
 800795a:	29ff      	cmp	r1, #255	; 0xff
 800795c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007960:	d1f1      	bne.n	8007946 <d_print_comp_inner+0x81a>
 8007962:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007966:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800796a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800796e:	4620      	mov	r0, r4
 8007970:	4798      	blx	r3
 8007972:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007976:	2101      	movs	r1, #1
 8007978:	440b      	add	r3, r1
 800797a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800797e:	2300      	movs	r3, #0
 8007980:	e7e3      	b.n	800794a <d_print_comp_inner+0x81e>
 8007982:	2301      	movs	r3, #1
 8007984:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007988:	e492      	b.n	80072b0 <d_print_comp_inner+0x184>
 800798a:	4eb5      	ldr	r6, [pc, #724]	; (8007c60 <d_print_comp_inner+0xb34>)
 800798c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007990:	f106 0a0e 	add.w	sl, r6, #14
 8007994:	f04f 0900 	mov.w	r9, #0
 8007998:	e00a      	b.n	80079b0 <d_print_comp_inner+0x884>
 800799a:	460b      	mov	r3, r1
 800799c:	3101      	adds	r1, #1
 800799e:	45b2      	cmp	sl, r6
 80079a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80079a4:	f804 8003 	strb.w	r8, [r4, r3]
 80079a8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80079ac:	f000 867e 	beq.w	80086ac <d_print_comp_inner+0x1580>
 80079b0:	29ff      	cmp	r1, #255	; 0xff
 80079b2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80079b6:	d1f0      	bne.n	800799a <d_print_comp_inner+0x86e>
 80079b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80079bc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80079c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80079c4:	4620      	mov	r0, r4
 80079c6:	4798      	blx	r3
 80079c8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80079cc:	2101      	movs	r1, #1
 80079ce:	440b      	add	r3, r1
 80079d0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80079d4:	2300      	movs	r3, #0
 80079d6:	e7e2      	b.n	800799e <d_print_comp_inner+0x872>
 80079d8:	686a      	ldr	r2, [r5, #4]
 80079da:	7811      	ldrb	r1, [r2, #0]
 80079dc:	2927      	cmp	r1, #39	; 0x27
 80079de:	f001 81a6 	beq.w	8008d2e <d_print_comp_inner+0x1c02>
 80079e2:	2600      	movs	r6, #0
 80079e4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80079e8:	29ff      	cmp	r1, #255	; 0xff
 80079ea:	f001 8428 	beq.w	800923e <d_print_comp_inner+0x2112>
 80079ee:	1c4a      	adds	r2, r1, #1
 80079f0:	2328      	movs	r3, #40	; 0x28
 80079f2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80079f6:	5463      	strb	r3, [r4, r1]
 80079f8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80079fc:	686a      	ldr	r2, [r5, #4]
 80079fe:	4639      	mov	r1, r7
 8007a00:	4620      	mov	r0, r4
 8007a02:	f001 ffab 	bl	800995c <d_print_comp>
 8007a06:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007a0a:	2bff      	cmp	r3, #255	; 0xff
 8007a0c:	f001 83ed 	beq.w	80091ea <d_print_comp_inner+0x20be>
 8007a10:	1c59      	adds	r1, r3, #1
 8007a12:	2229      	movs	r2, #41	; 0x29
 8007a14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007a18:	54e2      	strb	r2, [r4, r3]
 8007a1a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007a1e:	782b      	ldrb	r3, [r5, #0]
 8007a20:	2b3c      	cmp	r3, #60	; 0x3c
 8007a22:	f001 827e 	beq.w	8008f22 <d_print_comp_inner+0x1df6>
 8007a26:	2e08      	cmp	r6, #8
 8007a28:	f001 8221 	beq.w	8008e6e <d_print_comp_inner+0x1d42>
 8007a2c:	68aa      	ldr	r2, [r5, #8]
 8007a2e:	4639      	mov	r1, r7
 8007a30:	4620      	mov	r0, r4
 8007a32:	f001 ff93 	bl	800995c <d_print_comp>
 8007a36:	e43b      	b.n	80072b0 <d_print_comp_inner+0x184>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007a3e:	e437      	b.n	80072b0 <d_print_comp_inner+0x184>
 8007a40:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8007a44:	ab14      	add	r3, sp, #80	; 0x50
 8007a46:	f843 2d40 	str.w	r2, [r3, #-64]!
 8007a4a:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8007a4e:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8007a52:	2300      	movs	r3, #0
 8007a54:	68aa      	ldr	r2, [r5, #8]
 8007a56:	9306      	str	r3, [sp, #24]
 8007a58:	9505      	str	r5, [sp, #20]
 8007a5a:	9607      	str	r6, [sp, #28]
 8007a5c:	f001 ff7e 	bl	800995c <d_print_comp>
 8007a60:	9b06      	ldr	r3, [sp, #24]
 8007a62:	b923      	cbnz	r3, 8007a6e <d_print_comp_inner+0x942>
 8007a64:	462a      	mov	r2, r5
 8007a66:	4639      	mov	r1, r7
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f001 ff87 	bl	800997c <d_print_mod>
 8007a6e:	9b04      	ldr	r3, [sp, #16]
 8007a70:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8007a74:	e41c      	b.n	80072b0 <d_print_comp_inner+0x184>
 8007a76:	f8d0 a114 	ldr.w	sl, [r0, #276]	; 0x114
 8007a7a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8007a7e:	4656      	mov	r6, sl
 8007a80:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8007a84:	f849 ad40 	str.w	sl, [r9, #-64]!
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f8cd a000 	str.w	sl, [sp]
 8007a8e:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8007a92:	9505      	str	r5, [sp, #20]
 8007a94:	9207      	str	r2, [sp, #28]
 8007a96:	9306      	str	r3, [sp, #24]
 8007a98:	2e00      	cmp	r6, #0
 8007a9a:	f001 8585 	beq.w	80095a8 <d_print_comp_inner+0x247c>
 8007a9e:	6873      	ldr	r3, [r6, #4]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	3b19      	subs	r3, #25
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	f201 857f 	bhi.w	80095a8 <d_print_comp_inner+0x247c>
 8007aaa:	46ac      	mov	ip, r5
 8007aac:	f04f 0801 	mov.w	r8, #1
 8007ab0:	464d      	mov	r5, r9
 8007ab2:	e004      	b.n	8007abe <d_print_comp_inner+0x992>
 8007ab4:	6873      	ldr	r3, [r6, #4]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	3b19      	subs	r3, #25
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d81e      	bhi.n	8007afc <d_print_comp_inner+0x9d0>
 8007abe:	68b3      	ldr	r3, [r6, #8]
 8007ac0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007ac4:	b9bb      	cbnz	r3, 8007af6 <d_print_comp_inner+0x9ca>
 8007ac6:	f1b8 0f03 	cmp.w	r8, #3
 8007aca:	f201 82d0 	bhi.w	800906e <d_print_comp_inner+0x1f42>
 8007ace:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007ad2:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 8007ad6:	eb0e 0b0a 	add.w	fp, lr, sl
 8007ada:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
 8007ade:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8007ae2:	f84b 5c40 	str.w	r5, [fp, #-64]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	eb09 050a 	add.w	r5, r9, sl
 8007aec:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8007af0:	f108 0801 	add.w	r8, r8, #1
 8007af4:	60b3      	str	r3, [r6, #8]
 8007af6:	6836      	ldr	r6, [r6, #0]
 8007af8:	2e00      	cmp	r6, #0
 8007afa:	d1db      	bne.n	8007ab4 <d_print_comp_inner+0x988>
 8007afc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007b00:	4639      	mov	r1, r7
 8007b02:	4620      	mov	r0, r4
 8007b04:	4665      	mov	r5, ip
 8007b06:	f001 ff29 	bl	800995c <d_print_comp>
 8007b0a:	9a00      	ldr	r2, [sp, #0]
 8007b0c:	9b06      	ldr	r3, [sp, #24]
 8007b0e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f47f abcc 	bne.w	80072b0 <d_print_comp_inner+0x184>
 8007b18:	f1b8 0f01 	cmp.w	r8, #1
 8007b1c:	d00e      	beq.n	8007b3c <d_print_comp_inner+0xa10>
 8007b1e:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 8007b22:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8007b26:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f001 ff25 	bl	800997c <d_print_mod>
 8007b32:	f1b8 0f01 	cmp.w	r8, #1
 8007b36:	f1a9 0910 	sub.w	r9, r9, #16
 8007b3a:	d1f2      	bne.n	8007b22 <d_print_comp_inner+0x9f6>
 8007b3c:	1d2a      	adds	r2, r5, #4
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007b44:	4620      	mov	r0, r4
 8007b46:	f002 fad7 	bl	800a0f8 <d_print_array_type.isra.10>
 8007b4a:	f7ff bbb1 	b.w	80072b0 <d_print_comp_inner+0x184>
 8007b4e:	068b      	lsls	r3, r1, #26
 8007b50:	f101 8048 	bmi.w	8008be4 <d_print_comp_inner+0x1ab8>
 8007b54:	686b      	ldr	r3, [r5, #4]
 8007b56:	b11b      	cbz	r3, 8007b60 <d_print_comp_inner+0xa34>
 8007b58:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8007b5c:	f001 82ca 	beq.w	80090f4 <d_print_comp_inner+0x1fc8>
 8007b60:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 8007b64:	f105 0208 	add.w	r2, r5, #8
 8007b68:	4639      	mov	r1, r7
 8007b6a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f002 fb9e 	bl	800a2b0 <d_print_function_type.isra.11>
 8007b74:	f7ff bb9c 	b.w	80072b0 <d_print_comp_inner+0x184>
 8007b78:	68ab      	ldr	r3, [r5, #8]
 8007b7a:	781a      	ldrb	r2, [r3, #0]
 8007b7c:	2a39      	cmp	r2, #57	; 0x39
 8007b7e:	f47f ab9f 	bne.w	80072c0 <d_print_comp_inner+0x194>
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	7811      	ldrb	r1, [r2, #0]
 8007b86:	293a      	cmp	r1, #58	; 0x3a
 8007b88:	f47f ab9a 	bne.w	80072c0 <d_print_comp_inner+0x194>
 8007b8c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8007b90:	4934      	ldr	r1, [pc, #208]	; (8007c64 <d_print_comp_inner+0xb38>)
 8007b92:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8007b96:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	6856      	ldr	r6, [r2, #4]
 8007b9e:	6895      	ldr	r5, [r2, #8]
 8007ba0:	f007 f84a 	bl	800ec38 <strcmp>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f001 850d 	beq.w	80095c4 <d_print_comp_inner+0x2498>
 8007baa:	2204      	movs	r2, #4
 8007bac:	492e      	ldr	r1, [pc, #184]	; (8007c68 <d_print_comp_inner+0xb3c>)
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f7fe fffc 	bl	8006bac <d_append_buffer>
 8007bb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007bb8:	b183      	cbz	r3, 8007bdc <d_print_comp_inner+0xab0>
 8007bba:	4639      	mov	r1, r7
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f002 fd7e 	bl	800a6c0 <d_print_subexpr>
 8007bc4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007bc8:	29ff      	cmp	r1, #255	; 0xff
 8007bca:	f001 8628 	beq.w	800981e <d_print_comp_inner+0x26f2>
 8007bce:	2320      	movs	r3, #32
 8007bd0:	1c4a      	adds	r2, r1, #1
 8007bd2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007bd6:	5463      	strb	r3, [r4, r1]
 8007bd8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007bdc:	4632      	mov	r2, r6
 8007bde:	4639      	mov	r1, r7
 8007be0:	4620      	mov	r0, r4
 8007be2:	f001 febb 	bl	800995c <d_print_comp>
 8007be6:	2d00      	cmp	r5, #0
 8007be8:	f43f ab62 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8007bec:	462a      	mov	r2, r5
 8007bee:	4639      	mov	r1, r7
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f002 fd65 	bl	800a6c0 <d_print_subexpr>
 8007bf6:	f7ff bb5b 	b.w	80072b0 <d_print_comp_inner+0x184>
 8007bfa:	4e1c      	ldr	r6, [pc, #112]	; (8007c6c <d_print_comp_inner+0xb40>)
 8007bfc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007c00:	f106 0a11 	add.w	sl, r6, #17
 8007c04:	f04f 0900 	mov.w	r9, #0
 8007c08:	e00a      	b.n	8007c20 <d_print_comp_inner+0xaf4>
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	3101      	adds	r1, #1
 8007c0e:	4556      	cmp	r6, sl
 8007c10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007c14:	f804 8003 	strb.w	r8, [r4, r3]
 8007c18:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007c1c:	f000 84bf 	beq.w	800859e <d_print_comp_inner+0x1472>
 8007c20:	29ff      	cmp	r1, #255	; 0xff
 8007c22:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007c26:	d1f0      	bne.n	8007c0a <d_print_comp_inner+0xade>
 8007c28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007c2c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007c30:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007c34:	4620      	mov	r0, r4
 8007c36:	4798      	blx	r3
 8007c38:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	440b      	add	r3, r1
 8007c40:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007c44:	2300      	movs	r3, #0
 8007c46:	e7e2      	b.n	8007c0e <d_print_comp_inner+0xae2>
 8007c48:	4e09      	ldr	r6, [pc, #36]	; (8007c70 <d_print_comp_inner+0xb44>)
 8007c4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007c4e:	f106 0a15 	add.w	sl, r6, #21
 8007c52:	f04f 0900 	mov.w	r9, #0
 8007c56:	e018      	b.n	8007c8a <d_print_comp_inner+0xb5e>
 8007c58:	0801272c 	.word	0x0801272c
 8007c5c:	08013960 	.word	0x08013960
 8007c60:	080139cb 	.word	0x080139cb
 8007c64:	080139a0 	.word	0x080139a0
 8007c68:	080139a8 	.word	0x080139a8
 8007c6c:	08013887 	.word	0x08013887
 8007c70:	08013883 	.word	0x08013883
 8007c74:	460b      	mov	r3, r1
 8007c76:	3101      	adds	r1, #1
 8007c78:	45b2      	cmp	sl, r6
 8007c7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007c7e:	f804 8003 	strb.w	r8, [r4, r3]
 8007c82:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007c86:	f000 8483 	beq.w	8008590 <d_print_comp_inner+0x1464>
 8007c8a:	29ff      	cmp	r1, #255	; 0xff
 8007c8c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007c90:	d1f0      	bne.n	8007c74 <d_print_comp_inner+0xb48>
 8007c92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007c96:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007c9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4798      	blx	r3
 8007ca2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	440b      	add	r3, r1
 8007caa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e7e2      	b.n	8007c78 <d_print_comp_inner+0xb4c>
 8007cb2:	4eda      	ldr	r6, [pc, #872]	; (800801c <d_print_comp_inner+0xef0>)
 8007cb4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007cb8:	f106 0a10 	add.w	sl, r6, #16
 8007cbc:	f04f 0900 	mov.w	r9, #0
 8007cc0:	e00a      	b.n	8007cd8 <d_print_comp_inner+0xbac>
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	3101      	adds	r1, #1
 8007cc6:	45b2      	cmp	sl, r6
 8007cc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ccc:	f804 8003 	strb.w	r8, [r4, r3]
 8007cd0:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007cd4:	f000 8455 	beq.w	8008582 <d_print_comp_inner+0x1456>
 8007cd8:	29ff      	cmp	r1, #255	; 0xff
 8007cda:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007cde:	d1f0      	bne.n	8007cc2 <d_print_comp_inner+0xb96>
 8007ce0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007ce4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007ce8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007cec:	4620      	mov	r0, r4
 8007cee:	4798      	blx	r3
 8007cf0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007cf4:	2101      	movs	r1, #1
 8007cf6:	440b      	add	r3, r1
 8007cf8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e7e2      	b.n	8007cc6 <d_print_comp_inner+0xb9a>
 8007d00:	4ec7      	ldr	r6, [pc, #796]	; (8008020 <d_print_comp_inner+0xef4>)
 8007d02:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007d06:	f106 0a12 	add.w	sl, r6, #18
 8007d0a:	f04f 0900 	mov.w	r9, #0
 8007d0e:	e00a      	b.n	8007d26 <d_print_comp_inner+0xbfa>
 8007d10:	460b      	mov	r3, r1
 8007d12:	3101      	adds	r1, #1
 8007d14:	45b2      	cmp	sl, r6
 8007d16:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007d1a:	f804 8003 	strb.w	r8, [r4, r3]
 8007d1e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007d22:	f000 85d5 	beq.w	80088d0 <d_print_comp_inner+0x17a4>
 8007d26:	29ff      	cmp	r1, #255	; 0xff
 8007d28:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007d2c:	d1f0      	bne.n	8007d10 <d_print_comp_inner+0xbe4>
 8007d2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007d32:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007d36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	4798      	blx	r3
 8007d3e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007d42:	2101      	movs	r1, #1
 8007d44:	440b      	add	r3, r1
 8007d46:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e7e2      	b.n	8007d14 <d_print_comp_inner+0xbe8>
 8007d4e:	68af      	ldr	r7, [r5, #8]
 8007d50:	686d      	ldr	r5, [r5, #4]
 8007d52:	2f00      	cmp	r7, #0
 8007d54:	f43f aaac 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8007d58:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007d5c:	442f      	add	r7, r5
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	e009      	b.n	8007d78 <d_print_comp_inner+0xc4c>
 8007d64:	460b      	mov	r3, r1
 8007d66:	3101      	adds	r1, #1
 8007d68:	42af      	cmp	r7, r5
 8007d6a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007d6e:	54e6      	strb	r6, [r4, r3]
 8007d70:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007d74:	f43f aa9c 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8007d78:	29ff      	cmp	r1, #255	; 0xff
 8007d7a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007d7e:	d1f1      	bne.n	8007d64 <d_print_comp_inner+0xc38>
 8007d80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007d84:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007d88:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4798      	blx	r3
 8007d90:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007d94:	2101      	movs	r1, #1
 8007d96:	440b      	add	r3, r1
 8007d98:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e7e3      	b.n	8007d68 <d_print_comp_inner+0xc3c>
 8007da0:	4ea0      	ldr	r6, [pc, #640]	; (8008024 <d_print_comp_inner+0xef8>)
 8007da2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007da6:	f106 0a11 	add.w	sl, r6, #17
 8007daa:	f04f 0900 	mov.w	r9, #0
 8007dae:	e00a      	b.n	8007dc6 <d_print_comp_inner+0xc9a>
 8007db0:	460b      	mov	r3, r1
 8007db2:	3101      	adds	r1, #1
 8007db4:	45b2      	cmp	sl, r6
 8007db6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007dba:	f804 8003 	strb.w	r8, [r4, r3]
 8007dbe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007dc2:	f000 858c 	beq.w	80088de <d_print_comp_inner+0x17b2>
 8007dc6:	29ff      	cmp	r1, #255	; 0xff
 8007dc8:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007dcc:	d1f0      	bne.n	8007db0 <d_print_comp_inner+0xc84>
 8007dce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007dd2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007dd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007dda:	4620      	mov	r0, r4
 8007ddc:	4798      	blx	r3
 8007dde:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007de2:	2101      	movs	r1, #1
 8007de4:	440b      	add	r3, r1
 8007de6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007dea:	2300      	movs	r3, #0
 8007dec:	e7e2      	b.n	8007db4 <d_print_comp_inner+0xc88>
 8007dee:	4e8e      	ldr	r6, [pc, #568]	; (8008028 <d_print_comp_inner+0xefc>)
 8007df0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007df4:	f106 0a15 	add.w	sl, r6, #21
 8007df8:	f04f 0900 	mov.w	r9, #0
 8007dfc:	e00a      	b.n	8007e14 <d_print_comp_inner+0xce8>
 8007dfe:	460b      	mov	r3, r1
 8007e00:	3101      	adds	r1, #1
 8007e02:	45b2      	cmp	sl, r6
 8007e04:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e08:	f804 8003 	strb.w	r8, [r4, r3]
 8007e0c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007e10:	f000 8533 	beq.w	800887a <d_print_comp_inner+0x174e>
 8007e14:	29ff      	cmp	r1, #255	; 0xff
 8007e16:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007e1a:	d1f0      	bne.n	8007dfe <d_print_comp_inner+0xcd2>
 8007e1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e20:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007e24:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007e28:	4620      	mov	r0, r4
 8007e2a:	4798      	blx	r3
 8007e2c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007e30:	2101      	movs	r1, #1
 8007e32:	440b      	add	r3, r1
 8007e34:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e7e2      	b.n	8007e02 <d_print_comp_inner+0xcd6>
 8007e3c:	4e7b      	ldr	r6, [pc, #492]	; (800802c <d_print_comp_inner+0xf00>)
 8007e3e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007e42:	f106 0a19 	add.w	sl, r6, #25
 8007e46:	f04f 0900 	mov.w	r9, #0
 8007e4a:	e00a      	b.n	8007e62 <d_print_comp_inner+0xd36>
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	3101      	adds	r1, #1
 8007e50:	45b2      	cmp	sl, r6
 8007e52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e56:	f804 8003 	strb.w	r8, [r4, r3]
 8007e5a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007e5e:	f000 8545 	beq.w	80088ec <d_print_comp_inner+0x17c0>
 8007e62:	29ff      	cmp	r1, #255	; 0xff
 8007e64:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007e68:	d1f0      	bne.n	8007e4c <d_print_comp_inner+0xd20>
 8007e6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e6e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007e72:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007e76:	4620      	mov	r0, r4
 8007e78:	4798      	blx	r3
 8007e7a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007e7e:	2101      	movs	r1, #1
 8007e80:	440b      	add	r3, r1
 8007e82:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007e86:	2300      	movs	r3, #0
 8007e88:	e7e2      	b.n	8007e50 <d_print_comp_inner+0xd24>
 8007e8a:	4e69      	ldr	r6, [pc, #420]	; (8008030 <d_print_comp_inner+0xf04>)
 8007e8c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007e90:	f106 0a16 	add.w	sl, r6, #22
 8007e94:	f04f 0900 	mov.w	r9, #0
 8007e98:	e00a      	b.n	8007eb0 <d_print_comp_inner+0xd84>
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	3101      	adds	r1, #1
 8007e9e:	45b2      	cmp	sl, r6
 8007ea0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ea4:	f804 8003 	strb.w	r8, [r4, r3]
 8007ea8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007eac:	f000 84d7 	beq.w	800885e <d_print_comp_inner+0x1732>
 8007eb0:	29ff      	cmp	r1, #255	; 0xff
 8007eb2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007eb6:	d1f0      	bne.n	8007e9a <d_print_comp_inner+0xd6e>
 8007eb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007ebc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007ec0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4798      	blx	r3
 8007ec8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007ecc:	2101      	movs	r1, #1
 8007ece:	440b      	add	r3, r1
 8007ed0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e7e2      	b.n	8007e9e <d_print_comp_inner+0xd72>
 8007ed8:	4e56      	ldr	r6, [pc, #344]	; (8008034 <d_print_comp_inner+0xf08>)
 8007eda:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007ede:	f106 0a13 	add.w	sl, r6, #19
 8007ee2:	f04f 0900 	mov.w	r9, #0
 8007ee6:	e00a      	b.n	8007efe <d_print_comp_inner+0xdd2>
 8007ee8:	460b      	mov	r3, r1
 8007eea:	3101      	adds	r1, #1
 8007eec:	4556      	cmp	r6, sl
 8007eee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ef2:	f804 8003 	strb.w	r8, [r4, r3]
 8007ef6:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007efa:	f000 84b7 	beq.w	800886c <d_print_comp_inner+0x1740>
 8007efe:	29ff      	cmp	r1, #255	; 0xff
 8007f00:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007f04:	d1f0      	bne.n	8007ee8 <d_print_comp_inner+0xdbc>
 8007f06:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f0a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007f0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f12:	4620      	mov	r0, r4
 8007f14:	4798      	blx	r3
 8007f16:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	440b      	add	r3, r1
 8007f1e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f22:	2300      	movs	r3, #0
 8007f24:	e7e2      	b.n	8007eec <d_print_comp_inner+0xdc0>
 8007f26:	4e44      	ldr	r6, [pc, #272]	; (8008038 <d_print_comp_inner+0xf0c>)
 8007f28:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f2c:	f106 0a0f 	add.w	sl, r6, #15
 8007f30:	f04f 0900 	mov.w	r9, #0
 8007f34:	e00a      	b.n	8007f4c <d_print_comp_inner+0xe20>
 8007f36:	460b      	mov	r3, r1
 8007f38:	3101      	adds	r1, #1
 8007f3a:	4556      	cmp	r6, sl
 8007f3c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f40:	f804 8003 	strb.w	r8, [r4, r3]
 8007f44:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007f48:	f000 830d 	beq.w	8008566 <d_print_comp_inner+0x143a>
 8007f4c:	29ff      	cmp	r1, #255	; 0xff
 8007f4e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007f52:	d1f0      	bne.n	8007f36 <d_print_comp_inner+0xe0a>
 8007f54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007f5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f60:	4620      	mov	r0, r4
 8007f62:	4798      	blx	r3
 8007f64:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f68:	2101      	movs	r1, #1
 8007f6a:	440b      	add	r3, r1
 8007f6c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f70:	2300      	movs	r3, #0
 8007f72:	e7e2      	b.n	8007f3a <d_print_comp_inner+0xe0e>
 8007f74:	4e31      	ldr	r6, [pc, #196]	; (800803c <d_print_comp_inner+0xf10>)
 8007f76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f7a:	f106 0a1a 	add.w	sl, r6, #26
 8007f7e:	f04f 0900 	mov.w	r9, #0
 8007f82:	e00a      	b.n	8007f9a <d_print_comp_inner+0xe6e>
 8007f84:	460b      	mov	r3, r1
 8007f86:	3101      	adds	r1, #1
 8007f88:	4556      	cmp	r6, sl
 8007f8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f8e:	f804 8003 	strb.w	r8, [r4, r3]
 8007f92:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007f96:	f000 82ed 	beq.w	8008574 <d_print_comp_inner+0x1448>
 8007f9a:	29ff      	cmp	r1, #255	; 0xff
 8007f9c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007fa0:	d1f0      	bne.n	8007f84 <d_print_comp_inner+0xe58>
 8007fa2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007fa6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007faa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4798      	blx	r3
 8007fb2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	440b      	add	r3, r1
 8007fba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e7e2      	b.n	8007f88 <d_print_comp_inner+0xe5c>
 8007fc2:	f011 0704 	ands.w	r7, r1, #4
 8007fc6:	f040 8539 	bne.w	8008a3c <d_print_comp_inner+0x1910>
 8007fca:	686a      	ldr	r2, [r5, #4]
 8007fcc:	6853      	ldr	r3, [r2, #4]
 8007fce:	6815      	ldr	r5, [r2, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f43f a96d 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8007fd6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007fda:	eb05 0803 	add.w	r8, r5, r3
 8007fde:	e009      	b.n	8007ff4 <d_print_comp_inner+0xec8>
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	3101      	adds	r1, #1
 8007fe4:	4545      	cmp	r5, r8
 8007fe6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007fea:	54e6      	strb	r6, [r4, r3]
 8007fec:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007ff0:	f43f a95e 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8007ff4:	29ff      	cmp	r1, #255	; 0xff
 8007ff6:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007ffa:	d1f1      	bne.n	8007fe0 <d_print_comp_inner+0xeb4>
 8007ffc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008000:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8008004:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008008:	4620      	mov	r0, r4
 800800a:	4798      	blx	r3
 800800c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008010:	2101      	movs	r1, #1
 8008012:	440b      	add	r3, r1
 8008014:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008018:	2300      	movs	r3, #0
 800801a:	e7e3      	b.n	8007fe4 <d_print_comp_inner+0xeb8>
 800801c:	0801386f 	.word	0x0801386f
 8008020:	0801385b 	.word	0x0801385b
 8008024:	08013927 	.word	0x08013927
 8008028:	0801390f 	.word	0x0801390f
 800802c:	080138f3 	.word	0x080138f3
 8008030:	080138db 	.word	0x080138db
 8008034:	080138c7 	.word	0x080138c7
 8008038:	080138b7 	.word	0x080138b7
 800803c:	0801389b 	.word	0x0801389b
 8008040:	6868      	ldr	r0, [r5, #4]
 8008042:	7803      	ldrb	r3, [r0, #0]
 8008044:	2b05      	cmp	r3, #5
 8008046:	f000 8697 	beq.w	8008d78 <d_print_comp_inner+0x1c4c>
 800804a:	f04f 0800 	mov.w	r8, #0
 800804e:	2b23      	cmp	r3, #35	; 0x23
 8008050:	f000 8596 	beq.w	8008b80 <d_print_comp_inner+0x1a54>
 8008054:	782a      	ldrb	r2, [r5, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	f000 8592 	beq.w	8008b80 <d_print_comp_inner+0x1a54>
 800805c:	2b24      	cmp	r3, #36	; 0x24
 800805e:	f001 808b 	beq.w	8009178 <d_print_comp_inner+0x204c>
 8008062:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8008066:	ab14      	add	r3, sp, #80	; 0x50
 8008068:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 800806c:	f843 0d40 	str.w	r0, [r3, #-64]!
 8008070:	2200      	movs	r2, #0
 8008072:	9505      	str	r5, [sp, #20]
 8008074:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8008078:	9107      	str	r1, [sp, #28]
 800807a:	9206      	str	r2, [sp, #24]
 800807c:	686a      	ldr	r2, [r5, #4]
 800807e:	4639      	mov	r1, r7
 8008080:	4620      	mov	r0, r4
 8008082:	f001 fc6b 	bl	800995c <d_print_comp>
 8008086:	9b06      	ldr	r3, [sp, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 848d 	beq.w	80089a8 <d_print_comp_inner+0x187c>
 800808e:	9b04      	ldr	r3, [sp, #16]
 8008090:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8008094:	f1b8 0f00 	cmp.w	r8, #0
 8008098:	f43f a90a 	beq.w	80072b0 <d_print_comp_inner+0x184>
 800809c:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 80080a0:	f7ff b906 	b.w	80072b0 <d_print_comp_inner+0x184>
 80080a4:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 80080a8:	f04f 0800 	mov.w	r8, #0
 80080ac:	e7db      	b.n	8008066 <d_print_comp_inner+0xf3a>
 80080ae:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 80080b2:	f1bc 0f00 	cmp.w	ip, #0
 80080b6:	f001 831f 	beq.w	80096f8 <d_print_comp_inner+0x25cc>
 80080ba:	4662      	mov	r2, ip
 80080bc:	6891      	ldr	r1, [r2, #8]
 80080be:	b951      	cbnz	r1, 80080d6 <d_print_comp_inner+0xfaa>
 80080c0:	6850      	ldr	r0, [r2, #4]
 80080c2:	7800      	ldrb	r0, [r0, #0]
 80080c4:	f1a0 0e19 	sub.w	lr, r0, #25
 80080c8:	f1be 0f02 	cmp.w	lr, #2
 80080cc:	f200 8703 	bhi.w	8008ed6 <d_print_comp_inner+0x1daa>
 80080d0:	4283      	cmp	r3, r0
 80080d2:	f000 8704 	beq.w	8008ede <d_print_comp_inner+0x1db2>
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	2a00      	cmp	r2, #0
 80080da:	d1ef      	bne.n	80080bc <d_print_comp_inner+0xf90>
 80080dc:	4660      	mov	r0, ip
 80080de:	4690      	mov	r8, r2
 80080e0:	e7c1      	b.n	8008066 <d_print_comp_inner+0xf3a>
 80080e2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80080e6:	29ff      	cmp	r1, #255	; 0xff
 80080e8:	f000 8769 	beq.w	8008fbe <d_print_comp_inner+0x1e92>
 80080ec:	1c4a      	adds	r2, r1, #1
 80080ee:	237e      	movs	r3, #126	; 0x7e
 80080f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80080f4:	5463      	strb	r3, [r4, r1]
 80080f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80080fa:	4639      	mov	r1, r7
 80080fc:	68aa      	ldr	r2, [r5, #8]
 80080fe:	4620      	mov	r0, r4
 8008100:	f001 fc2c 	bl	800995c <d_print_comp>
 8008104:	f7ff b8d4 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008108:	686a      	ldr	r2, [r5, #4]
 800810a:	f001 fc27 	bl	800995c <d_print_comp>
 800810e:	f7ff b8cf 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008112:	4edd      	ldr	r6, [pc, #884]	; (8008488 <d_print_comp_inner+0x135c>)
 8008114:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008118:	f106 0a0d 	add.w	sl, r6, #13
 800811c:	f04f 0900 	mov.w	r9, #0
 8008120:	e00a      	b.n	8008138 <d_print_comp_inner+0x100c>
 8008122:	460b      	mov	r3, r1
 8008124:	3101      	adds	r1, #1
 8008126:	45b2      	cmp	sl, r6
 8008128:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800812c:	f804 8003 	strb.w	r8, [r4, r3]
 8008130:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008134:	f000 83e8 	beq.w	8008908 <d_print_comp_inner+0x17dc>
 8008138:	29ff      	cmp	r1, #255	; 0xff
 800813a:	f816 8b01 	ldrb.w	r8, [r6], #1
 800813e:	d1f0      	bne.n	8008122 <d_print_comp_inner+0xff6>
 8008140:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008144:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008148:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800814c:	4620      	mov	r0, r4
 800814e:	4798      	blx	r3
 8008150:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008154:	2101      	movs	r1, #1
 8008156:	440b      	add	r3, r1
 8008158:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800815c:	2300      	movs	r3, #0
 800815e:	e7e2      	b.n	8008126 <d_print_comp_inner+0xffa>
 8008160:	4eca      	ldr	r6, [pc, #808]	; (800848c <d_print_comp_inner+0x1360>)
 8008162:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008166:	f106 0a18 	add.w	sl, r6, #24
 800816a:	f04f 0900 	mov.w	r9, #0
 800816e:	e00a      	b.n	8008186 <d_print_comp_inner+0x105a>
 8008170:	460b      	mov	r3, r1
 8008172:	3101      	adds	r1, #1
 8008174:	45b2      	cmp	sl, r6
 8008176:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800817a:	f804 8003 	strb.w	r8, [r4, r3]
 800817e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008182:	f000 83c8 	beq.w	8008916 <d_print_comp_inner+0x17ea>
 8008186:	29ff      	cmp	r1, #255	; 0xff
 8008188:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800818c:	d1f0      	bne.n	8008170 <d_print_comp_inner+0x1044>
 800818e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008192:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008196:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800819a:	4620      	mov	r0, r4
 800819c:	4798      	blx	r3
 800819e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80081a2:	2101      	movs	r1, #1
 80081a4:	440b      	add	r3, r1
 80081a6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80081aa:	2300      	movs	r3, #0
 80081ac:	e7e2      	b.n	8008174 <d_print_comp_inner+0x1048>
 80081ae:	4eb8      	ldr	r6, [pc, #736]	; (8008490 <d_print_comp_inner+0x1364>)
 80081b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80081b4:	f106 0a08 	add.w	sl, r6, #8
 80081b8:	f04f 0900 	mov.w	r9, #0
 80081bc:	e00a      	b.n	80081d4 <d_print_comp_inner+0x10a8>
 80081be:	460b      	mov	r3, r1
 80081c0:	3101      	adds	r1, #1
 80081c2:	45b2      	cmp	sl, r6
 80081c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80081c8:	f804 8003 	strb.w	r8, [r4, r3]
 80081cc:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80081d0:	f000 833e 	beq.w	8008850 <d_print_comp_inner+0x1724>
 80081d4:	29ff      	cmp	r1, #255	; 0xff
 80081d6:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80081da:	d1f0      	bne.n	80081be <d_print_comp_inner+0x1092>
 80081dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80081e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80081e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80081e8:	4620      	mov	r0, r4
 80081ea:	4798      	blx	r3
 80081ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80081f0:	2101      	movs	r1, #1
 80081f2:	440b      	add	r3, r1
 80081f4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80081f8:	2300      	movs	r3, #0
 80081fa:	e7e2      	b.n	80081c2 <d_print_comp_inner+0x1096>
 80081fc:	4ea5      	ldr	r6, [pc, #660]	; (8008494 <d_print_comp_inner+0x1368>)
 80081fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008202:	f106 0a0b 	add.w	sl, r6, #11
 8008206:	f04f 0900 	mov.w	r9, #0
 800820a:	e00a      	b.n	8008222 <d_print_comp_inner+0x10f6>
 800820c:	460b      	mov	r3, r1
 800820e:	3101      	adds	r1, #1
 8008210:	45b2      	cmp	sl, r6
 8008212:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008216:	f804 8003 	strb.w	r8, [r4, r3]
 800821a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800821e:	f000 819b 	beq.w	8008558 <d_print_comp_inner+0x142c>
 8008222:	29ff      	cmp	r1, #255	; 0xff
 8008224:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008228:	d1f0      	bne.n	800820c <d_print_comp_inner+0x10e0>
 800822a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800822e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008232:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008236:	4620      	mov	r0, r4
 8008238:	4798      	blx	r3
 800823a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800823e:	2101      	movs	r1, #1
 8008240:	440b      	add	r3, r1
 8008242:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008246:	2300      	movs	r3, #0
 8008248:	e7e2      	b.n	8008210 <d_print_comp_inner+0x10e4>
 800824a:	2300      	movs	r3, #0
 800824c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8008250:	f8d0 8140 	ldr.w	r8, [r0, #320]	; 0x140
 8008254:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8008258:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
 800825c:	074a      	lsls	r2, r1, #29
 800825e:	686e      	ldr	r6, [r5, #4]
 8008260:	d505      	bpl.n	800826e <d_print_comp_inner+0x1142>
 8008262:	7833      	ldrb	r3, [r6, #0]
 8008264:	b91b      	cbnz	r3, 800826e <d_print_comp_inner+0x1142>
 8008266:	68b2      	ldr	r2, [r6, #8]
 8008268:	2a06      	cmp	r2, #6
 800826a:	f001 808b 	beq.w	8009384 <d_print_comp_inner+0x2258>
 800826e:	4632      	mov	r2, r6
 8008270:	4639      	mov	r1, r7
 8008272:	4620      	mov	r0, r4
 8008274:	f001 fb72 	bl	800995c <d_print_comp>
 8008278:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800827c:	2b3c      	cmp	r3, #60	; 0x3c
 800827e:	f000 85e8 	beq.w	8008e52 <d_print_comp_inner+0x1d26>
 8008282:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008286:	2bff      	cmp	r3, #255	; 0xff
 8008288:	f000 879c 	beq.w	80091c4 <d_print_comp_inner+0x2098>
 800828c:	1c59      	adds	r1, r3, #1
 800828e:	223c      	movs	r2, #60	; 0x3c
 8008290:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008294:	54e2      	strb	r2, [r4, r3]
 8008296:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800829a:	4639      	mov	r1, r7
 800829c:	68aa      	ldr	r2, [r5, #8]
 800829e:	4620      	mov	r0, r4
 80082a0:	f001 fb5c 	bl	800995c <d_print_comp>
 80082a4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 80082a8:	2b3e      	cmp	r3, #62	; 0x3e
 80082aa:	f000 85c4 	beq.w	8008e36 <d_print_comp_inner+0x1d0a>
 80082ae:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80082b2:	2bff      	cmp	r3, #255	; 0xff
 80082b4:	f000 8773 	beq.w	800919e <d_print_comp_inner+0x2072>
 80082b8:	1c59      	adds	r1, r3, #1
 80082ba:	223e      	movs	r2, #62	; 0x3e
 80082bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80082c0:	54e2      	strb	r2, [r4, r3]
 80082c2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80082c6:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80082ca:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 80082ce:	f7fe bfef 	b.w	80072b0 <d_print_comp_inner+0x184>
 80082d2:	2300      	movs	r3, #0
 80082d4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80082d8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80082dc:	686e      	ldr	r6, [r5, #4]
 80082de:	9200      	str	r2, [sp, #0]
 80082e0:	2e00      	cmp	r6, #0
 80082e2:	f000 8134 	beq.w	800854e <d_print_comp_inner+0x1422>
 80082e6:	f10d 0910 	add.w	r9, sp, #16
 80082ea:	469e      	mov	lr, r3
 80082ec:	4618      	mov	r0, r3
 80082ee:	464a      	mov	r2, r9
 80082f0:	f8d4 c110 	ldr.w	ip, [r4, #272]	; 0x110
 80082f4:	7831      	ldrb	r1, [r6, #0]
 80082f6:	f10e 0801 	add.w	r8, lr, #1
 80082fa:	f1a1 0a1c 	sub.w	sl, r1, #28
 80082fe:	f1ba 0f04 	cmp.w	sl, #4
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8008308:	6056      	str	r6, [r2, #4]
 800830a:	6090      	str	r0, [r2, #8]
 800830c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008310:	4613      	mov	r3, r2
 8008312:	f102 0210 	add.w	r2, r2, #16
 8008316:	f240 8113 	bls.w	8008540 <d_print_comp_inner+0x1414>
 800831a:	2904      	cmp	r1, #4
 800831c:	f001 8193 	beq.w	8009646 <d_print_comp_inner+0x251a>
 8008320:	2902      	cmp	r1, #2
 8008322:	d137      	bne.n	8008394 <d_print_comp_inner+0x1268>
 8008324:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008328:	f89b 3000 	ldrb.w	r3, [fp]
 800832c:	2b45      	cmp	r3, #69	; 0x45
 800832e:	bf08      	it	eq
 8008330:	f8db b004 	ldreq.w	fp, [fp, #4]
 8008334:	f89b 3000 	ldrb.w	r3, [fp]
 8008338:	3b1c      	subs	r3, #28
 800833a:	2b04      	cmp	r3, #4
 800833c:	d82a      	bhi.n	8008394 <d_print_comp_inner+0x1268>
 800833e:	f1b8 0f04 	cmp.w	r8, #4
 8008342:	f000 8104 	beq.w	800854e <d_print_comp_inner+0x1422>
 8008346:	462b      	mov	r3, r5
 8008348:	eb09 1e0e 	add.w	lr, r9, lr, lsl #4
 800834c:	46b2      	mov	sl, r6
 800834e:	465d      	mov	r5, fp
 8008350:	4666      	mov	r6, ip
 8008352:	469b      	mov	fp, r3
 8008354:	46a4      	mov	ip, r4
 8008356:	4674      	mov	r4, lr
 8008358:	e003      	b.n	8008362 <d_print_comp_inner+0x1236>
 800835a:	f1b8 0f04 	cmp.w	r8, #4
 800835e:	f001 81b7 	beq.w	80096d0 <d_print_comp_inner+0x25a4>
 8008362:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008366:	f104 0e10 	add.w	lr, r4, #16
 800836a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800836e:	4623      	mov	r3, r4
 8008370:	2200      	movs	r2, #0
 8008372:	611c      	str	r4, [r3, #16]
 8008374:	605d      	str	r5, [r3, #4]
 8008376:	609a      	str	r2, [r3, #8]
 8008378:	60de      	str	r6, [r3, #12]
 800837a:	f8cc e114 	str.w	lr, [ip, #276]	; 0x114
 800837e:	686d      	ldr	r5, [r5, #4]
 8008380:	4674      	mov	r4, lr
 8008382:	782b      	ldrb	r3, [r5, #0]
 8008384:	f108 0801 	add.w	r8, r8, #1
 8008388:	3b1c      	subs	r3, #28
 800838a:	2b04      	cmp	r3, #4
 800838c:	d9e5      	bls.n	800835a <d_print_comp_inner+0x122e>
 800838e:	4656      	mov	r6, sl
 8008390:	4664      	mov	r4, ip
 8008392:	465d      	mov	r5, fp
 8008394:	68aa      	ldr	r2, [r5, #8]
 8008396:	4639      	mov	r1, r7
 8008398:	4620      	mov	r0, r4
 800839a:	f001 fadf 	bl	800995c <d_print_comp>
 800839e:	7833      	ldrb	r3, [r6, #0]
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	f001 8190 	beq.w	80096c6 <d_print_comp_inner+0x259a>
 80083a6:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 80083aa:	4645      	mov	r5, r8
 80083ac:	46b8      	mov	r8, r7
 80083ae:	2620      	movs	r6, #32
 80083b0:	f859 7c08 	ldr.w	r7, [r9, #-8]
 80083b4:	3d01      	subs	r5, #1
 80083b6:	b987      	cbnz	r7, 80083da <d_print_comp_inner+0x12ae>
 80083b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80083bc:	29ff      	cmp	r1, #255	; 0xff
 80083be:	f001 8172 	beq.w	80096a6 <d_print_comp_inner+0x257a>
 80083c2:	1c4b      	adds	r3, r1, #1
 80083c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80083c8:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80083cc:	5466      	strb	r6, [r4, r1]
 80083ce:	4620      	mov	r0, r4
 80083d0:	4641      	mov	r1, r8
 80083d2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80083d6:	f001 fad1 	bl	800997c <d_print_mod>
 80083da:	f1a9 0910 	sub.w	r9, r9, #16
 80083de:	2d00      	cmp	r5, #0
 80083e0:	d1e6      	bne.n	80083b0 <d_print_comp_inner+0x1284>
 80083e2:	9b00      	ldr	r3, [sp, #0]
 80083e4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80083e8:	f7fe bf62 	b.w	80072b0 <d_print_comp_inner+0x184>
 80083ec:	686a      	ldr	r2, [r5, #4]
 80083ee:	f001 fab5 	bl	800995c <d_print_comp>
 80083f2:	f017 0904 	ands.w	r9, r7, #4
 80083f6:	f000 8475 	beq.w	8008ce4 <d_print_comp_inner+0x1bb8>
 80083fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80083fe:	29ff      	cmp	r1, #255	; 0xff
 8008400:	f000 87d3 	beq.w	80093aa <d_print_comp_inner+0x227e>
 8008404:	1c4a      	adds	r2, r1, #1
 8008406:	232e      	movs	r3, #46	; 0x2e
 8008408:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800840c:	5463      	strb	r3, [r4, r1]
 800840e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008412:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8008416:	f898 3000 	ldrb.w	r3, [r8]
 800841a:	2b45      	cmp	r3, #69	; 0x45
 800841c:	f000 862c 	beq.w	8009078 <d_print_comp_inner+0x1f4c>
 8008420:	4642      	mov	r2, r8
 8008422:	4639      	mov	r1, r7
 8008424:	4620      	mov	r0, r4
 8008426:	f001 fa99 	bl	800995c <d_print_comp>
 800842a:	f7fe bf41 	b.w	80072b0 <d_print_comp_inner+0x184>
 800842e:	f011 0704 	ands.w	r7, r1, #4
 8008432:	f040 832d 	bne.w	8008a90 <d_print_comp_inner+0x1964>
 8008436:	68ab      	ldr	r3, [r5, #8]
 8008438:	686d      	ldr	r5, [r5, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f43e af38 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8008440:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008444:	eb05 0803 	add.w	r8, r5, r3
 8008448:	e009      	b.n	800845e <d_print_comp_inner+0x1332>
 800844a:	460b      	mov	r3, r1
 800844c:	3101      	adds	r1, #1
 800844e:	45a8      	cmp	r8, r5
 8008450:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008454:	54e6      	strb	r6, [r4, r3]
 8008456:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800845a:	f43e af29 	beq.w	80072b0 <d_print_comp_inner+0x184>
 800845e:	29ff      	cmp	r1, #255	; 0xff
 8008460:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008464:	d1f1      	bne.n	800844a <d_print_comp_inner+0x131e>
 8008466:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800846a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800846e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008472:	4620      	mov	r0, r4
 8008474:	4798      	blx	r3
 8008476:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800847a:	2101      	movs	r1, #1
 800847c:	440b      	add	r3, r1
 800847e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008482:	2300      	movs	r3, #0
 8008484:	e7e3      	b.n	800844e <d_print_comp_inner+0x1322>
 8008486:	bf00      	nop
 8008488:	0801384c 	.word	0x0801384c
 800848c:	08013827 	.word	0x08013827
 8008490:	0801381b 	.word	0x0801381b
 8008494:	08013810 	.word	0x08013810
 8008498:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800849c:	f1b9 0f00 	cmp.w	r9, #0
 80084a0:	f000 8373 	beq.w	8008b8a <d_print_comp_inner+0x1a5e>
 80084a4:	4dda      	ldr	r5, [pc, #872]	; (8008810 <d_print_comp_inner+0x16e4>)
 80084a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80084aa:	1daf      	adds	r7, r5, #6
 80084ac:	f04f 0800 	mov.w	r8, #0
 80084b0:	e009      	b.n	80084c6 <d_print_comp_inner+0x139a>
 80084b2:	460b      	mov	r3, r1
 80084b4:	3101      	adds	r1, #1
 80084b6:	42bd      	cmp	r5, r7
 80084b8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80084bc:	54e6      	strb	r6, [r4, r3]
 80084be:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80084c2:	f000 8280 	beq.w	80089c6 <d_print_comp_inner+0x189a>
 80084c6:	29ff      	cmp	r1, #255	; 0xff
 80084c8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80084cc:	d1f1      	bne.n	80084b2 <d_print_comp_inner+0x1386>
 80084ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80084d2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80084d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80084da:	4620      	mov	r0, r4
 80084dc:	4798      	blx	r3
 80084de:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80084e2:	2101      	movs	r1, #1
 80084e4:	440b      	add	r3, r1
 80084e6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80084ea:	2300      	movs	r3, #0
 80084ec:	e7e3      	b.n	80084b6 <d_print_comp_inner+0x138a>
 80084ee:	1d29      	adds	r1, r5, #4
 80084f0:	f7fe fd76 	bl	8006fe0 <d_lookup_template_argument.isra.6>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	f43e aee3 	beq.w	80072c0 <d_print_comp_inner+0x194>
 80084fa:	7803      	ldrb	r3, [r0, #0]
 80084fc:	2b2f      	cmp	r3, #47	; 0x2f
 80084fe:	f000 84fa 	beq.w	8008ef6 <d_print_comp_inner+0x1dca>
 8008502:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8008506:	4602      	mov	r2, r0
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	4639      	mov	r1, r7
 800850c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8008510:	4620      	mov	r0, r4
 8008512:	f001 fa23 	bl	800995c <d_print_comp>
 8008516:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800851a:	f7fe bec9 	b.w	80072b0 <d_print_comp_inner+0x184>
 800851e:	68aa      	ldr	r2, [r5, #8]
 8008520:	f001 fa1c 	bl	800995c <d_print_comp>
 8008524:	f7fe bec4 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008528:	2301      	movs	r3, #1
 800852a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800852e:	f7fe bebf 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008532:	f10b 0b01 	add.w	fp, fp, #1
 8008536:	45cb      	cmp	fp, r9
 8008538:	f47e af39 	bne.w	80073ae <d_print_comp_inner+0x282>
 800853c:	f7fe beb8 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008540:	6876      	ldr	r6, [r6, #4]
 8008542:	b126      	cbz	r6, 800854e <d_print_comp_inner+0x1422>
 8008544:	f1b8 0f04 	cmp.w	r8, #4
 8008548:	46c6      	mov	lr, r8
 800854a:	f47f aed3 	bne.w	80082f4 <d_print_comp_inner+0x11c8>
 800854e:	2301      	movs	r3, #1
 8008550:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8008554:	f7fe beac 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008558:	686a      	ldr	r2, [r5, #4]
 800855a:	4639      	mov	r1, r7
 800855c:	4620      	mov	r0, r4
 800855e:	f001 f9fd 	bl	800995c <d_print_comp>
 8008562:	f7fe bea5 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008566:	686a      	ldr	r2, [r5, #4]
 8008568:	4639      	mov	r1, r7
 800856a:	4620      	mov	r0, r4
 800856c:	f001 f9f6 	bl	800995c <d_print_comp>
 8008570:	f7fe be9e 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008574:	686a      	ldr	r2, [r5, #4]
 8008576:	4639      	mov	r1, r7
 8008578:	4620      	mov	r0, r4
 800857a:	f001 f9ef 	bl	800995c <d_print_comp>
 800857e:	f7fe be97 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008582:	686a      	ldr	r2, [r5, #4]
 8008584:	4639      	mov	r1, r7
 8008586:	4620      	mov	r0, r4
 8008588:	f001 f9e8 	bl	800995c <d_print_comp>
 800858c:	f7fe be90 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008590:	686a      	ldr	r2, [r5, #4]
 8008592:	4639      	mov	r1, r7
 8008594:	4620      	mov	r0, r4
 8008596:	f001 f9e1 	bl	800995c <d_print_comp>
 800859a:	f7fe be89 	b.w	80072b0 <d_print_comp_inner+0x184>
 800859e:	686a      	ldr	r2, [r5, #4]
 80085a0:	4639      	mov	r1, r7
 80085a2:	4620      	mov	r0, r4
 80085a4:	f001 f9da 	bl	800995c <d_print_comp>
 80085a8:	f7fe be82 	b.w	80072b0 <d_print_comp_inner+0x184>
 80085ac:	4639      	mov	r1, r7
 80085ae:	686a      	ldr	r2, [r5, #4]
 80085b0:	4620      	mov	r0, r4
 80085b2:	f001 f9d3 	bl	800995c <d_print_comp>
 80085b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80085ba:	29ff      	cmp	r1, #255	; 0xff
 80085bc:	f000 84cf 	beq.w	8008f5e <d_print_comp_inner+0x1e32>
 80085c0:	1c4a      	adds	r2, r1, #1
 80085c2:	2329      	movs	r3, #41	; 0x29
 80085c4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80085c8:	5463      	strb	r3, [r4, r1]
 80085ca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80085ce:	f7fe be6f 	b.w	80072b0 <d_print_comp_inner+0x184>
 80085d2:	686a      	ldr	r2, [r5, #4]
 80085d4:	4639      	mov	r1, r7
 80085d6:	4620      	mov	r0, r4
 80085d8:	f001 f9c0 	bl	800995c <d_print_comp>
 80085dc:	f7fe be68 	b.w	80072b0 <d_print_comp_inner+0x184>
 80085e0:	686a      	ldr	r2, [r5, #4]
 80085e2:	a804      	add	r0, sp, #16
 80085e4:	3201      	adds	r2, #1
 80085e6:	498b      	ldr	r1, [pc, #556]	; (8008814 <d_print_comp_inner+0x16e8>)
 80085e8:	f008 ff14 	bl	8011414 <siprintf>
 80085ec:	a804      	add	r0, sp, #16
 80085ee:	f006 fb2d 	bl	800ec4c <strlen>
 80085f2:	b318      	cbz	r0, 800863c <d_print_comp_inner+0x1510>
 80085f4:	ad04      	add	r5, sp, #16
 80085f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80085fa:	182f      	adds	r7, r5, r0
 80085fc:	f04f 0800 	mov.w	r8, #0
 8008600:	e008      	b.n	8008614 <d_print_comp_inner+0x14e8>
 8008602:	460b      	mov	r3, r1
 8008604:	3101      	adds	r1, #1
 8008606:	42af      	cmp	r7, r5
 8008608:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800860c:	54e6      	strb	r6, [r4, r3]
 800860e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008612:	d015      	beq.n	8008640 <d_print_comp_inner+0x1514>
 8008614:	29ff      	cmp	r1, #255	; 0xff
 8008616:	f815 6b01 	ldrb.w	r6, [r5], #1
 800861a:	d1f2      	bne.n	8008602 <d_print_comp_inner+0x14d6>
 800861c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008620:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008624:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008628:	4620      	mov	r0, r4
 800862a:	4798      	blx	r3
 800862c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008630:	2101      	movs	r1, #1
 8008632:	440b      	add	r3, r1
 8008634:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008638:	2300      	movs	r3, #0
 800863a:	e7e4      	b.n	8008606 <d_print_comp_inner+0x14da>
 800863c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008640:	29ff      	cmp	r1, #255	; 0xff
 8008642:	f000 84cd 	beq.w	8008fe0 <d_print_comp_inner+0x1eb4>
 8008646:	1c4a      	adds	r2, r1, #1
 8008648:	237d      	movs	r3, #125	; 0x7d
 800864a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800864e:	5463      	strb	r3, [r4, r1]
 8008650:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008654:	f7fe be2c 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008658:	4e6f      	ldr	r6, [pc, #444]	; (8008818 <d_print_comp_inner+0x16ec>)
 800865a:	4639      	mov	r1, r7
 800865c:	686a      	ldr	r2, [r5, #4]
 800865e:	4620      	mov	r0, r4
 8008660:	f001 f97c 	bl	800995c <d_print_comp>
 8008664:	f106 0902 	add.w	r9, r6, #2
 8008668:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800866c:	f04f 0800 	mov.w	r8, #0
 8008670:	e008      	b.n	8008684 <d_print_comp_inner+0x1558>
 8008672:	460b      	mov	r3, r1
 8008674:	3101      	adds	r1, #1
 8008676:	45b1      	cmp	r9, r6
 8008678:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800867c:	54e7      	strb	r7, [r4, r3]
 800867e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8008682:	d068      	beq.n	8008756 <d_print_comp_inner+0x162a>
 8008684:	29ff      	cmp	r1, #255	; 0xff
 8008686:	f816 7b01 	ldrb.w	r7, [r6], #1
 800868a:	d1f2      	bne.n	8008672 <d_print_comp_inner+0x1546>
 800868c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008690:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008694:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008698:	4620      	mov	r0, r4
 800869a:	4798      	blx	r3
 800869c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80086a0:	2101      	movs	r1, #1
 80086a2:	440b      	add	r3, r1
 80086a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80086a8:	2300      	movs	r3, #0
 80086aa:	e7e4      	b.n	8008676 <d_print_comp_inner+0x154a>
 80086ac:	686a      	ldr	r2, [r5, #4]
 80086ae:	4639      	mov	r1, r7
 80086b0:	4620      	mov	r0, r4
 80086b2:	f001 f953 	bl	800995c <d_print_comp>
 80086b6:	f7fe bdfb 	b.w	80072b0 <d_print_comp_inner+0x184>
 80086ba:	f8da 5004 	ldr.w	r5, [sl, #4]
 80086be:	782b      	ldrb	r3, [r5, #0]
 80086c0:	3b61      	subs	r3, #97	; 0x61
 80086c2:	2b19      	cmp	r3, #25
 80086c4:	d80b      	bhi.n	80086de <d_print_comp_inner+0x15b2>
 80086c6:	29ff      	cmp	r1, #255	; 0xff
 80086c8:	f000 8726 	beq.w	8009518 <d_print_comp_inner+0x23ec>
 80086cc:	2320      	movs	r3, #32
 80086ce:	1c4a      	adds	r2, r1, #1
 80086d0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80086d4:	5463      	strb	r3, [r4, r1]
 80086d6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80086da:	f8da 5004 	ldr.w	r5, [sl, #4]
 80086de:	19eb      	adds	r3, r5, r7
 80086e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	bf08      	it	eq
 80086e8:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80086ec:	2f00      	cmp	r7, #0
 80086ee:	f43e addf 	beq.w	80072b0 <d_print_comp_inner+0x184>
 80086f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80086f6:	442f      	add	r7, r5
 80086f8:	f04f 0800 	mov.w	r8, #0
 80086fc:	e009      	b.n	8008712 <d_print_comp_inner+0x15e6>
 80086fe:	460b      	mov	r3, r1
 8008700:	3101      	adds	r1, #1
 8008702:	42af      	cmp	r7, r5
 8008704:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008708:	54e6      	strb	r6, [r4, r3]
 800870a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800870e:	f43e adcf 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8008712:	29ff      	cmp	r1, #255	; 0xff
 8008714:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008718:	d1f1      	bne.n	80086fe <d_print_comp_inner+0x15d2>
 800871a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800871e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008722:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008726:	4620      	mov	r0, r4
 8008728:	4798      	blx	r3
 800872a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800872e:	2101      	movs	r1, #1
 8008730:	440b      	add	r3, r1
 8008732:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008736:	2300      	movs	r3, #0
 8008738:	e7e3      	b.n	8008702 <d_print_comp_inner+0x15d6>
 800873a:	686a      	ldr	r2, [r5, #4]
 800873c:	4639      	mov	r1, r7
 800873e:	4620      	mov	r0, r4
 8008740:	f001 f90c 	bl	800995c <d_print_comp>
 8008744:	f7fe bdb4 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008748:	686a      	ldr	r2, [r5, #4]
 800874a:	4639      	mov	r1, r7
 800874c:	4620      	mov	r0, r4
 800874e:	f001 f905 	bl	800995c <d_print_comp>
 8008752:	f7fe bdad 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008756:	68aa      	ldr	r2, [r5, #8]
 8008758:	a804      	add	r0, sp, #16
 800875a:	3201      	adds	r2, #1
 800875c:	492d      	ldr	r1, [pc, #180]	; (8008814 <d_print_comp_inner+0x16e8>)
 800875e:	f008 fe59 	bl	8011414 <siprintf>
 8008762:	a804      	add	r0, sp, #16
 8008764:	f006 fa72 	bl	800ec4c <strlen>
 8008768:	b318      	cbz	r0, 80087b2 <d_print_comp_inner+0x1686>
 800876a:	ad04      	add	r5, sp, #16
 800876c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008770:	182f      	adds	r7, r5, r0
 8008772:	f04f 0800 	mov.w	r8, #0
 8008776:	e008      	b.n	800878a <d_print_comp_inner+0x165e>
 8008778:	460b      	mov	r3, r1
 800877a:	3101      	adds	r1, #1
 800877c:	42af      	cmp	r7, r5
 800877e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008782:	54e6      	strb	r6, [r4, r3]
 8008784:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008788:	d015      	beq.n	80087b6 <d_print_comp_inner+0x168a>
 800878a:	29ff      	cmp	r1, #255	; 0xff
 800878c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008790:	d1f2      	bne.n	8008778 <d_print_comp_inner+0x164c>
 8008792:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008796:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800879a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800879e:	4620      	mov	r0, r4
 80087a0:	4798      	blx	r3
 80087a2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80087a6:	2101      	movs	r1, #1
 80087a8:	440b      	add	r3, r1
 80087aa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80087ae:	2300      	movs	r3, #0
 80087b0:	e7e4      	b.n	800877c <d_print_comp_inner+0x1650>
 80087b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80087b6:	29ff      	cmp	r1, #255	; 0xff
 80087b8:	f000 8447 	beq.w	800904a <d_print_comp_inner+0x1f1e>
 80087bc:	1c4a      	adds	r2, r1, #1
 80087be:	237d      	movs	r3, #125	; 0x7d
 80087c0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80087c4:	5463      	strb	r3, [r4, r1]
 80087c6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80087ca:	f7fe bd71 	b.w	80072b0 <d_print_comp_inner+0x184>
 80087ce:	1d2a      	adds	r2, r5, #4
 80087d0:	4639      	mov	r1, r7
 80087d2:	4620      	mov	r0, r4
 80087d4:	f001 fe62 	bl	800a49c <d_print_cast.isra.12>
 80087d8:	f7fe bd6a 	b.w	80072b0 <d_print_comp_inner+0x184>
 80087dc:	4639      	mov	r1, r7
 80087de:	68aa      	ldr	r2, [r5, #8]
 80087e0:	4620      	mov	r0, r4
 80087e2:	f001 f8bb 	bl	800995c <d_print_comp>
 80087e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80087ea:	29ff      	cmp	r1, #255	; 0xff
 80087ec:	f000 841b 	beq.w	8009026 <d_print_comp_inner+0x1efa>
 80087f0:	1c4a      	adds	r2, r1, #1
 80087f2:	235d      	movs	r3, #93	; 0x5d
 80087f4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80087f8:	5463      	strb	r3, [r4, r1]
 80087fa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80087fe:	f7fe bd57 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008802:	686a      	ldr	r2, [r5, #4]
 8008804:	4639      	mov	r1, r7
 8008806:	4620      	mov	r0, r4
 8008808:	f001 f8a8 	bl	800995c <d_print_comp>
 800880c:	f7fe bd50 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008810:	080139f4 	.word	0x080139f4
 8008814:	080137fc 	.word	0x080137fc
 8008818:	08013a48 	.word	0x08013a48
 800881c:	68aa      	ldr	r2, [r5, #8]
 800881e:	4639      	mov	r1, r7
 8008820:	4620      	mov	r0, r4
 8008822:	f001 f89b 	bl	800995c <d_print_comp>
 8008826:	f7fe bd43 	b.w	80072b0 <d_print_comp_inner+0x184>
 800882a:	4639      	mov	r1, r7
 800882c:	68aa      	ldr	r2, [r5, #8]
 800882e:	4620      	mov	r0, r4
 8008830:	f001 f894 	bl	800995c <d_print_comp>
 8008834:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008838:	29ff      	cmp	r1, #255	; 0xff
 800883a:	f000 83e3 	beq.w	8009004 <d_print_comp_inner+0x1ed8>
 800883e:	1c4a      	adds	r2, r1, #1
 8008840:	235d      	movs	r3, #93	; 0x5d
 8008842:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008846:	5463      	strb	r3, [r4, r1]
 8008848:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800884c:	f7fe bd30 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008850:	686a      	ldr	r2, [r5, #4]
 8008852:	4639      	mov	r1, r7
 8008854:	4620      	mov	r0, r4
 8008856:	f001 f881 	bl	800995c <d_print_comp>
 800885a:	f7fe bd29 	b.w	80072b0 <d_print_comp_inner+0x184>
 800885e:	686a      	ldr	r2, [r5, #4]
 8008860:	4639      	mov	r1, r7
 8008862:	4620      	mov	r0, r4
 8008864:	f001 f87a 	bl	800995c <d_print_comp>
 8008868:	f7fe bd22 	b.w	80072b0 <d_print_comp_inner+0x184>
 800886c:	686a      	ldr	r2, [r5, #4]
 800886e:	4639      	mov	r1, r7
 8008870:	4620      	mov	r0, r4
 8008872:	f001 f873 	bl	800995c <d_print_comp>
 8008876:	f7fe bd1b 	b.w	80072b0 <d_print_comp_inner+0x184>
 800887a:	4ed5      	ldr	r6, [pc, #852]	; (8008bd0 <d_print_comp_inner+0x1aa4>)
 800887c:	4639      	mov	r1, r7
 800887e:	68aa      	ldr	r2, [r5, #8]
 8008880:	4620      	mov	r0, r4
 8008882:	f001 f86b 	bl	800995c <d_print_comp>
 8008886:	f106 0a05 	add.w	sl, r6, #5
 800888a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800888e:	f04f 0900 	mov.w	r9, #0
 8008892:	e009      	b.n	80088a8 <d_print_comp_inner+0x177c>
 8008894:	460b      	mov	r3, r1
 8008896:	3101      	adds	r1, #1
 8008898:	45b2      	cmp	sl, r6
 800889a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800889e:	f804 8003 	strb.w	r8, [r4, r3]
 80088a2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80088a6:	d028      	beq.n	80088fa <d_print_comp_inner+0x17ce>
 80088a8:	29ff      	cmp	r1, #255	; 0xff
 80088aa:	f816 8b01 	ldrb.w	r8, [r6], #1
 80088ae:	d1f1      	bne.n	8008894 <d_print_comp_inner+0x1768>
 80088b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80088b4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80088b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80088bc:	4620      	mov	r0, r4
 80088be:	4798      	blx	r3
 80088c0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80088c4:	2101      	movs	r1, #1
 80088c6:	440b      	add	r3, r1
 80088c8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80088cc:	2300      	movs	r3, #0
 80088ce:	e7e3      	b.n	8008898 <d_print_comp_inner+0x176c>
 80088d0:	686a      	ldr	r2, [r5, #4]
 80088d2:	4639      	mov	r1, r7
 80088d4:	4620      	mov	r0, r4
 80088d6:	f001 f841 	bl	800995c <d_print_comp>
 80088da:	f7fe bce9 	b.w	80072b0 <d_print_comp_inner+0x184>
 80088de:	686a      	ldr	r2, [r5, #4]
 80088e0:	4639      	mov	r1, r7
 80088e2:	4620      	mov	r0, r4
 80088e4:	f001 f83a 	bl	800995c <d_print_comp>
 80088e8:	f7fe bce2 	b.w	80072b0 <d_print_comp_inner+0x184>
 80088ec:	686a      	ldr	r2, [r5, #4]
 80088ee:	4639      	mov	r1, r7
 80088f0:	4620      	mov	r0, r4
 80088f2:	f001 f833 	bl	800995c <d_print_comp>
 80088f6:	f7fe bcdb 	b.w	80072b0 <d_print_comp_inner+0x184>
 80088fa:	686a      	ldr	r2, [r5, #4]
 80088fc:	4639      	mov	r1, r7
 80088fe:	4620      	mov	r0, r4
 8008900:	f001 f82c 	bl	800995c <d_print_comp>
 8008904:	f7fe bcd4 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008908:	686a      	ldr	r2, [r5, #4]
 800890a:	4639      	mov	r1, r7
 800890c:	4620      	mov	r0, r4
 800890e:	f001 f825 	bl	800995c <d_print_comp>
 8008912:	f7fe bccd 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008916:	4eaf      	ldr	r6, [pc, #700]	; (8008bd4 <d_print_comp_inner+0x1aa8>)
 8008918:	4639      	mov	r1, r7
 800891a:	686a      	ldr	r2, [r5, #4]
 800891c:	4620      	mov	r0, r4
 800891e:	f001 f81d 	bl	800995c <d_print_comp>
 8008922:	f106 0a04 	add.w	sl, r6, #4
 8008926:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800892a:	f04f 0900 	mov.w	r9, #0
 800892e:	e009      	b.n	8008944 <d_print_comp_inner+0x1818>
 8008930:	460b      	mov	r3, r1
 8008932:	3101      	adds	r1, #1
 8008934:	4556      	cmp	r6, sl
 8008936:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800893a:	f804 8003 	strb.w	r8, [r4, r3]
 800893e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008942:	d013      	beq.n	800896c <d_print_comp_inner+0x1840>
 8008944:	29ff      	cmp	r1, #255	; 0xff
 8008946:	f816 8b01 	ldrb.w	r8, [r6], #1
 800894a:	d1f1      	bne.n	8008930 <d_print_comp_inner+0x1804>
 800894c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008950:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008954:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008958:	4620      	mov	r0, r4
 800895a:	4798      	blx	r3
 800895c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008960:	2101      	movs	r1, #1
 8008962:	440b      	add	r3, r1
 8008964:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008968:	2300      	movs	r3, #0
 800896a:	e7e3      	b.n	8008934 <d_print_comp_inner+0x1808>
 800896c:	68aa      	ldr	r2, [r5, #8]
 800896e:	4639      	mov	r1, r7
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fff3 	bl	800995c <d_print_comp>
 8008976:	f7fe bc9b 	b.w	80072b0 <d_print_comp_inner+0x184>
 800897a:	68aa      	ldr	r2, [r5, #8]
 800897c:	460e      	mov	r6, r1
 800897e:	4620      	mov	r0, r4
 8008980:	4639      	mov	r1, r7
 8008982:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8008986:	f000 ffe9 	bl	800995c <d_print_comp>
 800898a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800898e:	429d      	cmp	r5, r3
 8008990:	f47e ac8e 	bne.w	80072b0 <d_print_comp_inner+0x184>
 8008994:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008998:	42b3      	cmp	r3, r6
 800899a:	f47e ac89 	bne.w	80072b0 <d_print_comp_inner+0x184>
 800899e:	3e02      	subs	r6, #2
 80089a0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80089a4:	f7fe bc84 	b.w	80072b0 <d_print_comp_inner+0x184>
 80089a8:	462a      	mov	r2, r5
 80089aa:	4639      	mov	r1, r7
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 ffe5 	bl	800997c <d_print_mod>
 80089b2:	f7ff bb6c 	b.w	800808e <d_print_comp_inner+0xf62>
 80089b6:	686b      	ldr	r3, [r5, #4]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	f1b9 0f00 	cmp.w	r9, #0
 80089be:	f47e acf0 	bne.w	80073a2 <d_print_comp_inner+0x276>
 80089c2:	f7fe bc75 	b.w	80072b0 <d_print_comp_inner+0x184>
 80089c6:	464a      	mov	r2, r9
 80089c8:	a804      	add	r0, sp, #16
 80089ca:	4983      	ldr	r1, [pc, #524]	; (8008bd8 <d_print_comp_inner+0x1aac>)
 80089cc:	f008 fd22 	bl	8011414 <siprintf>
 80089d0:	a804      	add	r0, sp, #16
 80089d2:	f006 f93b 	bl	800ec4c <strlen>
 80089d6:	b318      	cbz	r0, 8008a20 <d_print_comp_inner+0x18f4>
 80089d8:	ad04      	add	r5, sp, #16
 80089da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80089de:	182f      	adds	r7, r5, r0
 80089e0:	f04f 0800 	mov.w	r8, #0
 80089e4:	e008      	b.n	80089f8 <d_print_comp_inner+0x18cc>
 80089e6:	460b      	mov	r3, r1
 80089e8:	3101      	adds	r1, #1
 80089ea:	42bd      	cmp	r5, r7
 80089ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80089f0:	54e6      	strb	r6, [r4, r3]
 80089f2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80089f6:	d015      	beq.n	8008a24 <d_print_comp_inner+0x18f8>
 80089f8:	29ff      	cmp	r1, #255	; 0xff
 80089fa:	f815 6b01 	ldrb.w	r6, [r5], #1
 80089fe:	d1f2      	bne.n	80089e6 <d_print_comp_inner+0x18ba>
 8008a00:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008a04:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008a08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4798      	blx	r3
 8008a10:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008a14:	2101      	movs	r1, #1
 8008a16:	440b      	add	r3, r1
 8008a18:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e7e4      	b.n	80089ea <d_print_comp_inner+0x18be>
 8008a20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008a24:	29ff      	cmp	r1, #255	; 0xff
 8008a26:	f000 841d 	beq.w	8009264 <d_print_comp_inner+0x2138>
 8008a2a:	1c4a      	adds	r2, r1, #1
 8008a2c:	237d      	movs	r3, #125	; 0x7d
 8008a2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008a32:	5463      	strb	r3, [r4, r1]
 8008a34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008a38:	f7fe bc3a 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008a3c:	686b      	ldr	r3, [r5, #4]
 8008a3e:	68df      	ldr	r7, [r3, #12]
 8008a40:	689d      	ldr	r5, [r3, #8]
 8008a42:	2f00      	cmp	r7, #0
 8008a44:	f43e ac34 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8008a48:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008a4c:	442f      	add	r7, r5
 8008a4e:	f04f 0800 	mov.w	r8, #0
 8008a52:	e009      	b.n	8008a68 <d_print_comp_inner+0x193c>
 8008a54:	460b      	mov	r3, r1
 8008a56:	3101      	adds	r1, #1
 8008a58:	42af      	cmp	r7, r5
 8008a5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008a5e:	54e6      	strb	r6, [r4, r3]
 8008a60:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008a64:	f43e ac24 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8008a68:	29ff      	cmp	r1, #255	; 0xff
 8008a6a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008a6e:	d1f1      	bne.n	8008a54 <d_print_comp_inner+0x1928>
 8008a70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008a74:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008a78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4798      	blx	r3
 8008a80:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008a84:	2101      	movs	r1, #1
 8008a86:	440b      	add	r3, r1
 8008a88:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e7e3      	b.n	8008a58 <d_print_comp_inner+0x192c>
 8008a90:	686e      	ldr	r6, [r5, #4]
 8008a92:	68af      	ldr	r7, [r5, #8]
 8008a94:	4437      	add	r7, r6
 8008a96:	42be      	cmp	r6, r7
 8008a98:	f4be ac0a 	bcs.w	80072b0 <d_print_comp_inner+0x184>
 8008a9c:	f04f 0800 	mov.w	r8, #0
 8008aa0:	e00d      	b.n	8008abe <d_print_comp_inner+0x1992>
 8008aa2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008aa6:	29ff      	cmp	r1, #255	; 0xff
 8008aa8:	d038      	beq.n	8008b1c <d_print_comp_inner+0x19f0>
 8008aaa:	1c4b      	adds	r3, r1, #1
 8008aac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008ab0:	5465      	strb	r5, [r4, r1]
 8008ab2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8008ab6:	3601      	adds	r6, #1
 8008ab8:	42b7      	cmp	r7, r6
 8008aba:	f67e abf9 	bls.w	80072b0 <d_print_comp_inner+0x184>
 8008abe:	1bbb      	subs	r3, r7, r6
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	7835      	ldrb	r5, [r6, #0]
 8008ac4:	dded      	ble.n	8008aa2 <d_print_comp_inner+0x1976>
 8008ac6:	2d5f      	cmp	r5, #95	; 0x5f
 8008ac8:	d1eb      	bne.n	8008aa2 <d_print_comp_inner+0x1976>
 8008aca:	7872      	ldrb	r2, [r6, #1]
 8008acc:	2a5f      	cmp	r2, #95	; 0x5f
 8008ace:	d1e8      	bne.n	8008aa2 <d_print_comp_inner+0x1976>
 8008ad0:	78b3      	ldrb	r3, [r6, #2]
 8008ad2:	2b55      	cmp	r3, #85	; 0x55
 8008ad4:	d001      	beq.n	8008ada <d_print_comp_inner+0x19ae>
 8008ad6:	4615      	mov	r5, r2
 8008ad8:	e7e3      	b.n	8008aa2 <d_print_comp_inner+0x1976>
 8008ada:	1cf3      	adds	r3, r6, #3
 8008adc:	429f      	cmp	r7, r3
 8008ade:	d9fa      	bls.n	8008ad6 <d_print_comp_inner+0x19aa>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e006      	b.n	8008af2 <d_print_comp_inner+0x19c6>
 8008ae4:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8008ae8:	42bb      	cmp	r3, r7
 8008aea:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8008aee:	f000 8558 	beq.w	80095a2 <d_print_comp_inner+0x2476>
 8008af2:	4699      	mov	r9, r3
 8008af4:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008af8:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8008afc:	b2d1      	uxtb	r1, r2
 8008afe:	2909      	cmp	r1, #9
 8008b00:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8008b04:	d9f0      	bls.n	8008ae8 <d_print_comp_inner+0x19bc>
 8008b06:	f1be 0f05 	cmp.w	lr, #5
 8008b0a:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8008b0e:	d9e9      	bls.n	8008ae4 <d_print_comp_inner+0x19b8>
 8008b10:	2a05      	cmp	r2, #5
 8008b12:	f200 869a 	bhi.w	800984a <d_print_comp_inner+0x271e>
 8008b16:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8008b1a:	e7e5      	b.n	8008ae8 <d_print_comp_inner+0x19bc>
 8008b1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008b20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008b24:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008b28:	4620      	mov	r0, r4
 8008b2a:	4798      	blx	r3
 8008b2c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008b30:	2301      	movs	r3, #1
 8008b32:	441a      	add	r2, r3
 8008b34:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8008b38:	2100      	movs	r1, #0
 8008b3a:	e7b7      	b.n	8008aac <d_print_comp_inner+0x1980>
 8008b3c:	4d27      	ldr	r5, [pc, #156]	; (8008bdc <d_print_comp_inner+0x1ab0>)
 8008b3e:	4698      	mov	r8, r3
 8008b40:	1daf      	adds	r7, r5, #6
 8008b42:	e009      	b.n	8008b58 <d_print_comp_inner+0x1a2c>
 8008b44:	460b      	mov	r3, r1
 8008b46:	3101      	adds	r1, #1
 8008b48:	42af      	cmp	r7, r5
 8008b4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008b4e:	54e6      	strb	r6, [r4, r3]
 8008b50:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008b54:	f43e abac 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8008b58:	29ff      	cmp	r1, #255	; 0xff
 8008b5a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008b5e:	d1f1      	bne.n	8008b44 <d_print_comp_inner+0x1a18>
 8008b60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008b64:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008b68:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	4798      	blx	r3
 8008b70:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008b74:	2101      	movs	r1, #1
 8008b76:	440b      	add	r3, r1
 8008b78:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	e7e3      	b.n	8008b48 <d_print_comp_inner+0x1a1c>
 8008b80:	4605      	mov	r5, r0
 8008b82:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8008b86:	f7ff ba6e 	b.w	8008066 <d_print_comp_inner+0xf3a>
 8008b8a:	4d15      	ldr	r5, [pc, #84]	; (8008be0 <d_print_comp_inner+0x1ab4>)
 8008b8c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008b90:	1d2f      	adds	r7, r5, #4
 8008b92:	e009      	b.n	8008ba8 <d_print_comp_inner+0x1a7c>
 8008b94:	460b      	mov	r3, r1
 8008b96:	3101      	adds	r1, #1
 8008b98:	42bd      	cmp	r5, r7
 8008b9a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008b9e:	54e6      	strb	r6, [r4, r3]
 8008ba0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008ba4:	f43e ab84 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8008ba8:	29ff      	cmp	r1, #255	; 0xff
 8008baa:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008bae:	d1f1      	bne.n	8008b94 <d_print_comp_inner+0x1a68>
 8008bb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008bb4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008bb8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	4798      	blx	r3
 8008bc0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	440b      	add	r3, r1
 8008bc8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e7e3      	b.n	8008b98 <d_print_comp_inner+0x1a6c>
 8008bd0:	08013908 	.word	0x08013908
 8008bd4:	08013844 	.word	0x08013844
 8008bd8:	080137fc 	.word	0x080137fc
 8008bdc:	08013968 	.word	0x08013968
 8008be0:	080139ec 	.word	0x080139ec
 8008be4:	f021 0760 	bic.w	r7, r1, #96	; 0x60
 8008be8:	f105 0208 	add.w	r2, r5, #8
 8008bec:	4639      	mov	r1, r7
 8008bee:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8008bf2:	f001 fb5d 	bl	800a2b0 <d_print_function_type.isra.11>
 8008bf6:	686a      	ldr	r2, [r5, #4]
 8008bf8:	2a00      	cmp	r2, #0
 8008bfa:	f43e ab59 	beq.w	80072b0 <d_print_comp_inner+0x184>
 8008bfe:	4639      	mov	r1, r7
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 feab 	bl	800995c <d_print_comp>
 8008c06:	f7fe bb53 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008c0a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008c0e:	f7fe be90 	b.w	8007932 <d_print_comp_inner+0x806>
 8008c12:	4edc      	ldr	r6, [pc, #880]	; (8008f84 <d_print_comp_inner+0x1e58>)
 8008c14:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008c18:	f106 0a05 	add.w	sl, r6, #5
 8008c1c:	f04f 0900 	mov.w	r9, #0
 8008c20:	e00a      	b.n	8008c38 <d_print_comp_inner+0x1b0c>
 8008c22:	460b      	mov	r3, r1
 8008c24:	3101      	adds	r1, #1
 8008c26:	4556      	cmp	r6, sl
 8008c28:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008c2c:	f804 8003 	strb.w	r8, [r4, r3]
 8008c30:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008c34:	f43e ae67 	beq.w	8007906 <d_print_comp_inner+0x7da>
 8008c38:	29ff      	cmp	r1, #255	; 0xff
 8008c3a:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008c3e:	d1f0      	bne.n	8008c22 <d_print_comp_inner+0x1af6>
 8008c40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008c44:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008c48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	4798      	blx	r3
 8008c50:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008c54:	2101      	movs	r1, #1
 8008c56:	440b      	add	r3, r1
 8008c58:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	e7e2      	b.n	8008c26 <d_print_comp_inner+0x1afa>
 8008c60:	6873      	ldr	r3, [r6, #4]
 8008c62:	49c9      	ldr	r1, [pc, #804]	; (8008f88 <d_print_comp_inner+0x1e5c>)
 8008c64:	f8d3 8000 	ldr.w	r8, [r3]
 8008c68:	4640      	mov	r0, r8
 8008c6a:	f005 ffe5 	bl	800ec38 <strcmp>
 8008c6e:	782b      	ldrb	r3, [r5, #0]
 8008c70:	b910      	cbnz	r0, 8008c78 <d_print_comp_inner+0x1b4c>
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	f000 84db 	beq.w	800962e <d_print_comp_inner+0x2502>
 8008c78:	2b37      	cmp	r3, #55	; 0x37
 8008c7a:	f000 8585 	beq.w	8009788 <d_print_comp_inner+0x265c>
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4620      	mov	r0, r4
 8008c82:	4632      	mov	r2, r6
 8008c84:	f001 fcde 	bl	800a644 <d_print_expr_op>
 8008c88:	49c0      	ldr	r1, [pc, #768]	; (8008f8c <d_print_comp_inner+0x1e60>)
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	f005 ffd4 	bl	800ec38 <strcmp>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	f000 8257 	beq.w	8009144 <d_print_comp_inner+0x2018>
 8008c96:	4640      	mov	r0, r8
 8008c98:	49bd      	ldr	r1, [pc, #756]	; (8008f90 <d_print_comp_inner+0x1e64>)
 8008c9a:	f005 ffcd 	bl	800ec38 <strcmp>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	f47e ad46 	bne.w	8007732 <d_print_comp_inner+0x606>
 8008ca6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008caa:	2bff      	cmp	r3, #255	; 0xff
 8008cac:	f000 8468 	beq.w	8009580 <d_print_comp_inner+0x2454>
 8008cb0:	1c58      	adds	r0, r3, #1
 8008cb2:	2628      	movs	r6, #40	; 0x28
 8008cb4:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8008cb8:	4639      	mov	r1, r7
 8008cba:	54e6      	strb	r6, [r4, r3]
 8008cbc:	462a      	mov	r2, r5
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008cc4:	f000 fe4a 	bl	800995c <d_print_comp>
 8008cc8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008ccc:	29ff      	cmp	r1, #255	; 0xff
 8008cce:	f000 83d6 	beq.w	800947e <d_print_comp_inner+0x2352>
 8008cd2:	1c4a      	adds	r2, r1, #1
 8008cd4:	2329      	movs	r3, #41	; 0x29
 8008cd6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008cda:	5463      	strb	r3, [r4, r1]
 8008cdc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008ce0:	f7fe bae6 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008ce4:	4eab      	ldr	r6, [pc, #684]	; (8008f94 <d_print_comp_inner+0x1e68>)
 8008ce6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008cea:	f106 0a02 	add.w	sl, r6, #2
 8008cee:	e00a      	b.n	8008d06 <d_print_comp_inner+0x1bda>
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	3101      	adds	r1, #1
 8008cf4:	4556      	cmp	r6, sl
 8008cf6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008cfa:	f804 8003 	strb.w	r8, [r4, r3]
 8008cfe:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008d02:	f43f ab86 	beq.w	8008412 <d_print_comp_inner+0x12e6>
 8008d06:	29ff      	cmp	r1, #255	; 0xff
 8008d08:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008d0c:	d1f0      	bne.n	8008cf0 <d_print_comp_inner+0x1bc4>
 8008d0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008d12:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008d16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	4798      	blx	r3
 8008d1e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008d22:	2101      	movs	r1, #1
 8008d24:	440b      	add	r3, r1
 8008d26:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e7e2      	b.n	8008cf4 <d_print_comp_inner+0x1bc8>
 8008d2e:	6852      	ldr	r2, [r2, #4]
 8008d30:	7c16      	ldrb	r6, [r2, #16]
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	f43e ae56 	beq.w	80079e4 <d_print_comp_inner+0x8b8>
 8008d38:	2e06      	cmp	r6, #6
 8008d3a:	f240 8357 	bls.w	80093ec <d_print_comp_inner+0x22c0>
 8008d3e:	2e07      	cmp	r6, #7
 8008d40:	f47e ae50 	bne.w	80079e4 <d_print_comp_inner+0x8b8>
 8008d44:	68aa      	ldr	r2, [r5, #8]
 8008d46:	7811      	ldrb	r1, [r2, #0]
 8008d48:	2900      	cmp	r1, #0
 8008d4a:	f47e ae4b 	bne.w	80079e4 <d_print_comp_inner+0x8b8>
 8008d4e:	6891      	ldr	r1, [r2, #8]
 8008d50:	2901      	cmp	r1, #1
 8008d52:	f47e ae47 	bne.w	80079e4 <d_print_comp_inner+0x8b8>
 8008d56:	2b3b      	cmp	r3, #59	; 0x3b
 8008d58:	f47e ae44 	bne.w	80079e4 <d_print_comp_inner+0x8b8>
 8008d5c:	6853      	ldr	r3, [r2, #4]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b30      	cmp	r3, #48	; 0x30
 8008d62:	f000 85bb 	beq.w	80098dc <d_print_comp_inner+0x27b0>
 8008d66:	2b31      	cmp	r3, #49	; 0x31
 8008d68:	f47e ae3c 	bne.w	80079e4 <d_print_comp_inner+0x8b8>
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	498a      	ldr	r1, [pc, #552]	; (8008f98 <d_print_comp_inner+0x1e6c>)
 8008d70:	f7fd ff1c 	bl	8006bac <d_append_buffer>
 8008d74:	f7fe ba9c 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008d78:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 8008d7c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8008d80:	f1bc 0f00 	cmp.w	ip, #0
 8008d84:	dd14      	ble.n	8008db0 <d_print_comp_inner+0x1c84>
 8008d86:	680b      	ldr	r3, [r1, #0]
 8008d88:	4298      	cmp	r0, r3
 8008d8a:	f000 855c 	beq.w	8009846 <d_print_comp_inner+0x271a>
 8008d8e:	f101 0208 	add.w	r2, r1, #8
 8008d92:	2300      	movs	r3, #0
 8008d94:	46a6      	mov	lr, r4
 8008d96:	e007      	b.n	8008da8 <d_print_comp_inner+0x1c7c>
 8008d98:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8008d9c:	4690      	mov	r8, r2
 8008d9e:	42a0      	cmp	r0, r4
 8008da0:	f102 0208 	add.w	r2, r2, #8
 8008da4:	f000 8270 	beq.w	8009288 <d_print_comp_inner+0x215c>
 8008da8:	3301      	adds	r3, #1
 8008daa:	459c      	cmp	ip, r3
 8008dac:	d1f4      	bne.n	8008d98 <d_print_comp_inner+0x1c6c>
 8008dae:	4674      	mov	r4, lr
 8008db0:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8008db4:	459c      	cmp	ip, r3
 8008db6:	f280 84f5 	bge.w	80097a4 <d_print_comp_inner+0x2678>
 8008dba:	f10c 0301 	add.w	r3, ip, #1
 8008dbe:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8008dc2:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8008dc6:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 8008dca:	f841 003c 	str.w	r0, [r1, ip, lsl #3]
 8008dce:	f103 0e04 	add.w	lr, r3, #4
 8008dd2:	f1b8 0f00 	cmp.w	r8, #0
 8008dd6:	d021      	beq.n	8008e1c <d_print_comp_inner+0x1cf0>
 8008dd8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8008ddc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8008de0:	4299      	cmp	r1, r3
 8008de2:	f340 84df 	ble.w	80097a4 <d_print_comp_inner+0x2678>
 8008de6:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8008dea:	4681      	mov	r9, r0
 8008dec:	e002      	b.n	8008df4 <d_print_comp_inner+0x1cc8>
 8008dee:	4299      	cmp	r1, r3
 8008df0:	f000 84d6 	beq.w	80097a0 <d_print_comp_inner+0x2674>
 8008df4:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 8008df8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008dfc:	4462      	add	r2, ip
 8008dfe:	6050      	str	r0, [r2, #4]
 8008e00:	f8ce 2000 	str.w	r2, [lr]
 8008e04:	f8d8 8000 	ldr.w	r8, [r8]
 8008e08:	f10c 0c08 	add.w	ip, ip, #8
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	4696      	mov	lr, r2
 8008e10:	f1b8 0f00 	cmp.w	r8, #0
 8008e14:	d1eb      	bne.n	8008dee <d_print_comp_inner+0x1cc2>
 8008e16:	4648      	mov	r0, r9
 8008e18:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8008e1c:	f04f 0800 	mov.w	r8, #0
 8008e20:	1d01      	adds	r1, r0, #4
 8008e22:	f8ce 8000 	str.w	r8, [lr]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f7fe f8da 	bl	8006fe0 <d_lookup_template_argument.isra.6>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f040 8246 	bne.w	80092be <d_print_comp_inner+0x2192>
 8008e32:	f7fe ba45 	b.w	80072c0 <d_print_comp_inner+0x194>
 8008e36:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e3a:	29ff      	cmp	r1, #255	; 0xff
 8008e3c:	f000 8411 	beq.w	8009662 <d_print_comp_inner+0x2536>
 8008e40:	2220      	movs	r2, #32
 8008e42:	1c4b      	adds	r3, r1, #1
 8008e44:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008e48:	5462      	strb	r2, [r4, r1]
 8008e4a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8008e4e:	f7ff ba30 	b.w	80082b2 <d_print_comp_inner+0x1186>
 8008e52:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e56:	29ff      	cmp	r1, #255	; 0xff
 8008e58:	f000 843d 	beq.w	80096d6 <d_print_comp_inner+0x25aa>
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	1c4b      	adds	r3, r1, #1
 8008e60:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008e64:	5462      	strb	r2, [r4, r1]
 8008e66:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8008e6a:	f7ff ba0c 	b.w	8008286 <d_print_comp_inner+0x115a>
 8008e6e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e72:	29ff      	cmp	r1, #255	; 0xff
 8008e74:	f000 8444 	beq.w	8009700 <d_print_comp_inner+0x25d4>
 8008e78:	1c4a      	adds	r2, r1, #1
 8008e7a:	235b      	movs	r3, #91	; 0x5b
 8008e7c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008e80:	5463      	strb	r3, [r4, r1]
 8008e82:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008e86:	4639      	mov	r1, r7
 8008e88:	68aa      	ldr	r2, [r5, #8]
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 fd66 	bl	800995c <d_print_comp>
 8008e90:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e94:	29ff      	cmp	r1, #255	; 0xff
 8008e96:	f000 832f 	beq.w	80094f8 <d_print_comp_inner+0x23cc>
 8008e9a:	235d      	movs	r3, #93	; 0x5d
 8008e9c:	1c4a      	adds	r2, r1, #1
 8008e9e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008ea2:	5463      	strb	r3, [r4, r1]
 8008ea4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008ea8:	f7fe ba02 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008eac:	f04f 0800 	mov.w	r8, #0
 8008eb0:	f804 8006 	strb.w	r8, [r4, r6]
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008eba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	4798      	blx	r3
 8008ec2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008ec6:	4646      	mov	r6, r8
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8008ece:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008ed2:	f7fe bce0 	b.w	8007896 <d_print_comp_inner+0x76a>
 8008ed6:	4660      	mov	r0, ip
 8008ed8:	4688      	mov	r8, r1
 8008eda:	f7ff b8c4 	b.w	8008066 <d_print_comp_inner+0xf3a>
 8008ede:	686a      	ldr	r2, [r5, #4]
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 fd3a 	bl	800995c <d_print_comp>
 8008ee8:	f7fe b9e2 	b.w	80072b0 <d_print_comp_inner+0x184>
 8008eec:	4632      	mov	r2, r6
 8008eee:	f001 fba9 	bl	800a644 <d_print_expr_op>
 8008ef2:	f7fe bc1e 	b.w	8007732 <d_print_comp_inner+0x606>
 8008ef6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8008efa:	e008      	b.n	8008f0e <d_print_comp_inner+0x1de2>
 8008efc:	6880      	ldr	r0, [r0, #8]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	2800      	cmp	r0, #0
 8008f02:	f43e a9dd 	beq.w	80072c0 <d_print_comp_inner+0x194>
 8008f06:	7802      	ldrb	r2, [r0, #0]
 8008f08:	2a2f      	cmp	r2, #47	; 0x2f
 8008f0a:	f47e a9d9 	bne.w	80072c0 <d_print_comp_inner+0x194>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	dcf4      	bgt.n	8008efc <d_print_comp_inner+0x1dd0>
 8008f12:	f47e a9d5 	bne.w	80072c0 <d_print_comp_inner+0x194>
 8008f16:	6840      	ldr	r0, [r0, #4]
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f47f aaf2 	bne.w	8008502 <d_print_comp_inner+0x13d6>
 8008f1e:	f7fe b9cf 	b.w	80072c0 <d_print_comp_inner+0x194>
 8008f22:	29ff      	cmp	r1, #255	; 0xff
 8008f24:	f000 83ae 	beq.w	8009684 <d_print_comp_inner+0x2558>
 8008f28:	232d      	movs	r3, #45	; 0x2d
 8008f2a:	1c4a      	adds	r2, r1, #1
 8008f2c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008f30:	5463      	strb	r3, [r4, r1]
 8008f32:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008f36:	f7fe bd76 	b.w	8007a26 <d_print_comp_inner+0x8fa>
 8008f3a:	2500      	movs	r5, #0
 8008f3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008f40:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008f44:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8008f48:	4620      	mov	r0, r4
 8008f4a:	4798      	blx	r3
 8008f4c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008f50:	2201      	movs	r2, #1
 8008f52:	4413      	add	r3, r2
 8008f54:	4629      	mov	r1, r5
 8008f56:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008f5a:	f7fe bc88 	b.w	800786e <d_print_comp_inner+0x742>
 8008f5e:	2500      	movs	r5, #0
 8008f60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008f64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008f68:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4798      	blx	r3
 8008f70:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008f74:	2201      	movs	r2, #1
 8008f76:	4413      	add	r3, r2
 8008f78:	4629      	mov	r1, r5
 8008f7a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008f7e:	f7ff bb20 	b.w	80085c2 <d_print_comp_inner+0x1496>
 8008f82:	bf00      	nop
 8008f84:	08013958 	.word	0x08013958
 8008f88:	0801398c 	.word	0x0801398c
 8008f8c:	08013990 	.word	0x08013990
 8008f90:	08013ca8 	.word	0x08013ca8
 8008f94:	080137e8 	.word	0x080137e8
 8008f98:	080139c4 	.word	0x080139c4
 8008f9c:	2600      	movs	r6, #0
 8008f9e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8008fa2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8008fa6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8008faa:	4798      	blx	r3
 8008fac:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	441a      	add	r2, r3
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8008fba:	f7fe bb83 	b.w	80076c4 <d_print_comp_inner+0x598>
 8008fbe:	2600      	movs	r6, #0
 8008fc0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8008fc4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8008fc8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8008fcc:	4798      	blx	r3
 8008fce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	4413      	add	r3, r2
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008fdc:	f7ff b887 	b.w	80080ee <d_print_comp_inner+0xfc2>
 8008fe0:	2500      	movs	r5, #0
 8008fe2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008fe6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008fea:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8008fee:	4620      	mov	r0, r4
 8008ff0:	4798      	blx	r3
 8008ff2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	4413      	add	r3, r2
 8008ffa:	4629      	mov	r1, r5
 8008ffc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009000:	f7ff bb22 	b.w	8008648 <d_print_comp_inner+0x151c>
 8009004:	2500      	movs	r5, #0
 8009006:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800900a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800900e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009012:	4620      	mov	r0, r4
 8009014:	4798      	blx	r3
 8009016:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800901a:	2201      	movs	r2, #1
 800901c:	4413      	add	r3, r2
 800901e:	4629      	mov	r1, r5
 8009020:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009024:	e40c      	b.n	8008840 <d_print_comp_inner+0x1714>
 8009026:	2500      	movs	r5, #0
 8009028:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800902c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009030:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009034:	4620      	mov	r0, r4
 8009036:	4798      	blx	r3
 8009038:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800903c:	2201      	movs	r2, #1
 800903e:	4413      	add	r3, r2
 8009040:	4629      	mov	r1, r5
 8009042:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009046:	f7ff bbd4 	b.w	80087f2 <d_print_comp_inner+0x16c6>
 800904a:	2500      	movs	r5, #0
 800904c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009050:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009054:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009058:	4620      	mov	r0, r4
 800905a:	4798      	blx	r3
 800905c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009060:	2201      	movs	r2, #1
 8009062:	4413      	add	r3, r2
 8009064:	4629      	mov	r1, r5
 8009066:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800906a:	f7ff bba8 	b.w	80087be <d_print_comp_inner+0x1692>
 800906e:	2301      	movs	r3, #1
 8009070:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8009074:	f7fe b91c 	b.w	80072b0 <d_print_comp_inner+0x184>
 8009078:	220d      	movs	r2, #13
 800907a:	49d5      	ldr	r1, [pc, #852]	; (80093d0 <d_print_comp_inner+0x22a4>)
 800907c:	4620      	mov	r0, r4
 800907e:	f7fd fd95 	bl	8006bac <d_append_buffer>
 8009082:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009086:	a804      	add	r0, sp, #16
 8009088:	3201      	adds	r2, #1
 800908a:	49d2      	ldr	r1, [pc, #840]	; (80093d4 <d_print_comp_inner+0x22a8>)
 800908c:	f008 f9c2 	bl	8011414 <siprintf>
 8009090:	a804      	add	r0, sp, #16
 8009092:	f005 fddb 	bl	800ec4c <strlen>
 8009096:	b320      	cbz	r0, 80090e2 <d_print_comp_inner+0x1fb6>
 8009098:	ad04      	add	r5, sp, #16
 800909a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800909e:	eb05 0a00 	add.w	sl, r5, r0
 80090a2:	f04f 0900 	mov.w	r9, #0
 80090a6:	e008      	b.n	80090ba <d_print_comp_inner+0x1f8e>
 80090a8:	460b      	mov	r3, r1
 80090aa:	3101      	adds	r1, #1
 80090ac:	45aa      	cmp	sl, r5
 80090ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80090b2:	54e6      	strb	r6, [r4, r3]
 80090b4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80090b8:	d013      	beq.n	80090e2 <d_print_comp_inner+0x1fb6>
 80090ba:	29ff      	cmp	r1, #255	; 0xff
 80090bc:	f815 6b01 	ldrb.w	r6, [r5], #1
 80090c0:	d1f2      	bne.n	80090a8 <d_print_comp_inner+0x1f7c>
 80090c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80090c6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80090ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80090ce:	4620      	mov	r0, r4
 80090d0:	4798      	blx	r3
 80090d2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80090d6:	2101      	movs	r1, #1
 80090d8:	440b      	add	r3, r1
 80090da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80090de:	2300      	movs	r3, #0
 80090e0:	e7e4      	b.n	80090ac <d_print_comp_inner+0x1f80>
 80090e2:	2203      	movs	r2, #3
 80090e4:	49bc      	ldr	r1, [pc, #752]	; (80093d8 <d_print_comp_inner+0x22ac>)
 80090e6:	4620      	mov	r0, r4
 80090e8:	f7fd fd60 	bl	8006bac <d_append_buffer>
 80090ec:	f8d8 8004 	ldr.w	r8, [r8, #4]
 80090f0:	f7ff b996 	b.w	8008420 <d_print_comp_inner+0x12f4>
 80090f4:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 80090f8:	aa14      	add	r2, sp, #80	; 0x50
 80090fa:	f842 1d40 	str.w	r1, [r2, #-64]!
 80090fe:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8009102:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8009106:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 800910a:	686a      	ldr	r2, [r5, #4]
 800910c:	4639      	mov	r1, r7
 800910e:	4620      	mov	r0, r4
 8009110:	9306      	str	r3, [sp, #24]
 8009112:	9607      	str	r6, [sp, #28]
 8009114:	9505      	str	r5, [sp, #20]
 8009116:	f000 fc21 	bl	800995c <d_print_comp>
 800911a:	9b04      	ldr	r3, [sp, #16]
 800911c:	9e06      	ldr	r6, [sp, #24]
 800911e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8009122:	2e00      	cmp	r6, #0
 8009124:	f47e a8c4 	bne.w	80072b0 <d_print_comp_inner+0x184>
 8009128:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800912c:	29ff      	cmp	r1, #255	; 0xff
 800912e:	f000 8349 	beq.w	80097c4 <d_print_comp_inner+0x2698>
 8009132:	2320      	movs	r3, #32
 8009134:	1c4a      	adds	r2, r1, #1
 8009136:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800913a:	5463      	strb	r3, [r4, r1]
 800913c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009140:	f7fe bd10 	b.w	8007b64 <d_print_comp_inner+0xa38>
 8009144:	462a      	mov	r2, r5
 8009146:	4639      	mov	r1, r7
 8009148:	4620      	mov	r0, r4
 800914a:	f000 fc07 	bl	800995c <d_print_comp>
 800914e:	f7fe b8af 	b.w	80072b0 <d_print_comp_inner+0x184>
 8009152:	2500      	movs	r5, #0
 8009154:	4619      	mov	r1, r3
 8009156:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800915a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800915e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009162:	4620      	mov	r0, r4
 8009164:	4798      	blx	r3
 8009166:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800916a:	2201      	movs	r2, #1
 800916c:	4411      	add	r1, r2
 800916e:	462b      	mov	r3, r5
 8009170:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 8009174:	f7fe bb6a 	b.w	800784c <d_print_comp_inner+0x720>
 8009178:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 800917c:	6842      	ldr	r2, [r0, #4]
 800917e:	ab14      	add	r3, sp, #80	; 0x50
 8009180:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8009184:	f843 1d40 	str.w	r1, [r3, #-64]!
 8009188:	2100      	movs	r1, #0
 800918a:	9505      	str	r5, [sp, #20]
 800918c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8009190:	9007      	str	r0, [sp, #28]
 8009192:	9106      	str	r1, [sp, #24]
 8009194:	2a00      	cmp	r2, #0
 8009196:	f47e af72 	bne.w	800807e <d_print_comp_inner+0xf52>
 800919a:	f7fe bf6f 	b.w	800807c <d_print_comp_inner+0xf50>
 800919e:	2500      	movs	r5, #0
 80091a0:	4619      	mov	r1, r3
 80091a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091aa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80091ae:	4620      	mov	r0, r4
 80091b0:	4798      	blx	r3
 80091b2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80091b6:	2101      	movs	r1, #1
 80091b8:	440a      	add	r2, r1
 80091ba:	462b      	mov	r3, r5
 80091bc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80091c0:	f7ff b87b 	b.w	80082ba <d_print_comp_inner+0x118e>
 80091c4:	2600      	movs	r6, #0
 80091c6:	4619      	mov	r1, r3
 80091c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091d0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80091d4:	4620      	mov	r0, r4
 80091d6:	4798      	blx	r3
 80091d8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80091dc:	2101      	movs	r1, #1
 80091de:	440a      	add	r2, r1
 80091e0:	4633      	mov	r3, r6
 80091e2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80091e6:	f7ff b852 	b.w	800828e <d_print_comp_inner+0x1162>
 80091ea:	2200      	movs	r2, #0
 80091ec:	4619      	mov	r1, r3
 80091ee:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 80091f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091fa:	4620      	mov	r0, r4
 80091fc:	4798      	blx	r3
 80091fe:	2329      	movs	r3, #41	; 0x29
 8009200:	7023      	strb	r3, [r4, #0]
 8009202:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009206:	782a      	ldrb	r2, [r5, #0]
 8009208:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800920c:	2101      	movs	r1, #1
 800920e:	3301      	adds	r3, #1
 8009210:	2a3c      	cmp	r2, #60	; 0x3c
 8009212:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009216:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800921a:	f47e ac04 	bne.w	8007a26 <d_print_comp_inner+0x8fa>
 800921e:	e683      	b.n	8008f28 <d_print_comp_inner+0x1dfc>
 8009220:	4648      	mov	r0, r9
 8009222:	496e      	ldr	r1, [pc, #440]	; (80093dc <d_print_comp_inner+0x22b0>)
 8009224:	f005 fd08 	bl	800ec38 <strcmp>
 8009228:	2800      	cmp	r0, #0
 800922a:	f040 8214 	bne.w	8009656 <d_print_comp_inner+0x252a>
 800922e:	68ab      	ldr	r3, [r5, #8]
 8009230:	4639      	mov	r1, r7
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	4620      	mov	r0, r4
 8009236:	f001 fa43 	bl	800a6c0 <d_print_subexpr>
 800923a:	f7fe b821 	b.w	8007280 <d_print_comp_inner+0x154>
 800923e:	f04f 0800 	mov.w	r8, #0
 8009242:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009246:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800924a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800924e:	4620      	mov	r0, r4
 8009250:	4798      	blx	r3
 8009252:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009256:	2201      	movs	r2, #1
 8009258:	4413      	add	r3, r2
 800925a:	4641      	mov	r1, r8
 800925c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009260:	f7fe bbc6 	b.w	80079f0 <d_print_comp_inner+0x8c4>
 8009264:	2500      	movs	r5, #0
 8009266:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800926a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800926e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009272:	4620      	mov	r0, r4
 8009274:	4798      	blx	r3
 8009276:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800927a:	2201      	movs	r2, #1
 800927c:	4413      	add	r3, r2
 800927e:	4629      	mov	r1, r5
 8009280:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009284:	f7ff bbd2 	b.w	8008a2c <d_print_comp_inner+0x1900>
 8009288:	4674      	mov	r4, lr
 800928a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 800928e:	b389      	cbz	r1, 80092f4 <d_print_comp_inner+0x21c8>
 8009290:	680a      	ldr	r2, [r1, #0]
 8009292:	4290      	cmp	r0, r2
 8009294:	d00a      	beq.n	80092ac <d_print_comp_inner+0x2180>
 8009296:	460b      	mov	r3, r1
 8009298:	e004      	b.n	80092a4 <d_print_comp_inner+0x2178>
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	b353      	cbz	r3, 80092f4 <d_print_comp_inner+0x21c8>
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	4290      	cmp	r0, r2
 80092a2:	d003      	beq.n	80092ac <d_print_comp_inner+0x2180>
 80092a4:	4295      	cmp	r5, r2
 80092a6:	d1f8      	bne.n	800929a <d_print_comp_inner+0x216e>
 80092a8:	4299      	cmp	r1, r3
 80092aa:	d0f6      	beq.n	800929a <d_print_comp_inner+0x216e>
 80092ac:	1d01      	adds	r1, r0, #4
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7fd fe96 	bl	8006fe0 <d_lookup_template_argument.isra.6>
 80092b4:	f04f 0800 	mov.w	r8, #0
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f43e a801 	beq.w	80072c0 <d_print_comp_inner+0x194>
 80092be:	7803      	ldrb	r3, [r0, #0]
 80092c0:	2b2f      	cmp	r3, #47	; 0x2f
 80092c2:	f47e aec4 	bne.w	800804e <d_print_comp_inner+0xf22>
 80092c6:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80092ca:	e008      	b.n	80092de <d_print_comp_inner+0x21b2>
 80092cc:	6880      	ldr	r0, [r0, #8]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	2800      	cmp	r0, #0
 80092d2:	f43d aff0 	beq.w	80072b6 <d_print_comp_inner+0x18a>
 80092d6:	7802      	ldrb	r2, [r0, #0]
 80092d8:	2a2f      	cmp	r2, #47	; 0x2f
 80092da:	f47d afec 	bne.w	80072b6 <d_print_comp_inner+0x18a>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	dcf4      	bgt.n	80092cc <d_print_comp_inner+0x21a0>
 80092e2:	f47d afe8 	bne.w	80072b6 <d_print_comp_inner+0x18a>
 80092e6:	6840      	ldr	r0, [r0, #4]
 80092e8:	2800      	cmp	r0, #0
 80092ea:	f43d afe4 	beq.w	80072b6 <d_print_comp_inner+0x18a>
 80092ee:	7803      	ldrb	r3, [r0, #0]
 80092f0:	f7fe bead 	b.w	800804e <d_print_comp_inner+0xf22>
 80092f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80092f8:	1d01      	adds	r1, r0, #4
 80092fa:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 80092fe:	4620      	mov	r0, r4
 8009300:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8009304:	f7fd fe6c 	bl	8006fe0 <d_lookup_template_argument.isra.6>
 8009308:	2800      	cmp	r0, #0
 800930a:	f43d afd7 	beq.w	80072bc <d_print_comp_inner+0x190>
 800930e:	f04f 0801 	mov.w	r8, #1
 8009312:	e7d4      	b.n	80092be <d_print_comp_inner+0x2192>
 8009314:	7809      	ldrb	r1, [r1, #0]
 8009316:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
 800931a:	2801      	cmp	r0, #1
 800931c:	d903      	bls.n	8009326 <d_print_comp_inner+0x21fa>
 800931e:	3972      	subs	r1, #114	; 0x72
 8009320:	2901      	cmp	r1, #1
 8009322:	f63d af6e 	bhi.w	8007202 <d_print_comp_inner+0xd6>
 8009326:	4639      	mov	r1, r7
 8009328:	4620      	mov	r0, r4
 800932a:	f001 f98b 	bl	800a644 <d_print_expr_op>
 800932e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009332:	29ff      	cmp	r1, #255	; 0xff
 8009334:	f000 8263 	beq.w	80097fe <d_print_comp_inner+0x26d2>
 8009338:	1c4a      	adds	r2, r1, #1
 800933a:	233c      	movs	r3, #60	; 0x3c
 800933c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009340:	5463      	strb	r3, [r4, r1]
 8009342:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009346:	68ab      	ldr	r3, [r5, #8]
 8009348:	4639      	mov	r1, r7
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	4620      	mov	r0, r4
 800934e:	f000 fb05 	bl	800995c <d_print_comp>
 8009352:	2202      	movs	r2, #2
 8009354:	4922      	ldr	r1, [pc, #136]	; (80093e0 <d_print_comp_inner+0x22b4>)
 8009356:	4620      	mov	r0, r4
 8009358:	f7fd fc28 	bl	8006bac <d_append_buffer>
 800935c:	68ab      	ldr	r3, [r5, #8]
 800935e:	4639      	mov	r1, r7
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fafa 	bl	800995c <d_print_comp>
 8009368:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800936c:	29ff      	cmp	r1, #255	; 0xff
 800936e:	f000 81d8 	beq.w	8009722 <d_print_comp_inner+0x25f6>
 8009372:	2329      	movs	r3, #41	; 0x29
 8009374:	1c4a      	adds	r2, r1, #1
 8009376:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800937a:	5463      	strb	r3, [r4, r1]
 800937c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009380:	f7fd bf96 	b.w	80072b0 <d_print_comp_inner+0x184>
 8009384:	4917      	ldr	r1, [pc, #92]	; (80093e4 <d_print_comp_inner+0x22b8>)
 8009386:	6870      	ldr	r0, [r6, #4]
 8009388:	f008 f868 	bl	801145c <strncmp>
 800938c:	2800      	cmp	r0, #0
 800938e:	f47e af6e 	bne.w	800826e <d_print_comp_inner+0x1142>
 8009392:	68aa      	ldr	r2, [r5, #8]
 8009394:	4639      	mov	r1, r7
 8009396:	4620      	mov	r0, r4
 8009398:	f000 fae0 	bl	800995c <d_print_comp>
 800939c:	2202      	movs	r2, #2
 800939e:	4912      	ldr	r1, [pc, #72]	; (80093e8 <d_print_comp_inner+0x22bc>)
 80093a0:	4620      	mov	r0, r4
 80093a2:	f7fd fc03 	bl	8006bac <d_append_buffer>
 80093a6:	f7fe bf8e 	b.w	80082c6 <d_print_comp_inner+0x119a>
 80093aa:	2600      	movs	r6, #0
 80093ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80093b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80093b4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80093b8:	4620      	mov	r0, r4
 80093ba:	4798      	blx	r3
 80093bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80093c0:	2201      	movs	r2, #1
 80093c2:	4413      	add	r3, r2
 80093c4:	4631      	mov	r1, r6
 80093c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80093ca:	f7ff b81c 	b.w	8008406 <d_print_comp_inner+0x12da>
 80093ce:	bf00      	nop
 80093d0:	080137ec 	.word	0x080137ec
 80093d4:	080137fc 	.word	0x080137fc
 80093d8:	08013800 	.word	0x08013800
 80093dc:	08013998 	.word	0x08013998
 80093e0:	08013994 	.word	0x08013994
 80093e4:	08013804 	.word	0x08013804
 80093e8:	0801380c 	.word	0x0801380c
 80093ec:	68aa      	ldr	r2, [r5, #8]
 80093ee:	f892 8000 	ldrb.w	r8, [r2]
 80093f2:	f1b8 0f00 	cmp.w	r8, #0
 80093f6:	f47e aaf5 	bne.w	80079e4 <d_print_comp_inner+0x8b8>
 80093fa:	2b3c      	cmp	r3, #60	; 0x3c
 80093fc:	f000 81f3 	beq.w	80097e6 <d_print_comp_inner+0x26ba>
 8009400:	68aa      	ldr	r2, [r5, #8]
 8009402:	4639      	mov	r1, r7
 8009404:	4620      	mov	r0, r4
 8009406:	3e02      	subs	r6, #2
 8009408:	f000 faa8 	bl	800995c <d_print_comp>
 800940c:	2e04      	cmp	r6, #4
 800940e:	f63d af4f 	bhi.w	80072b0 <d_print_comp_inner+0x184>
 8009412:	e8df f006 	tbb	[pc, r6]
 8009416:	1826      	.short	0x1826
 8009418:	0a11      	.short	0x0a11
 800941a:	03          	.byte	0x03
 800941b:	00          	.byte	0x00
 800941c:	4620      	mov	r0, r4
 800941e:	2203      	movs	r2, #3
 8009420:	49e3      	ldr	r1, [pc, #908]	; (80097b0 <d_print_comp_inner+0x2684>)
 8009422:	f7fd fbc3 	bl	8006bac <d_append_buffer>
 8009426:	f7fd bf43 	b.w	80072b0 <d_print_comp_inner+0x184>
 800942a:	4620      	mov	r0, r4
 800942c:	2202      	movs	r2, #2
 800942e:	49e1      	ldr	r1, [pc, #900]	; (80097b4 <d_print_comp_inner+0x2688>)
 8009430:	f7fd fbbc 	bl	8006bac <d_append_buffer>
 8009434:	f7fd bf3c 	b.w	80072b0 <d_print_comp_inner+0x184>
 8009438:	4620      	mov	r0, r4
 800943a:	2202      	movs	r2, #2
 800943c:	49de      	ldr	r1, [pc, #888]	; (80097b8 <d_print_comp_inner+0x268c>)
 800943e:	f7fd fbb5 	bl	8006bac <d_append_buffer>
 8009442:	f7fd bf35 	b.w	80072b0 <d_print_comp_inner+0x184>
 8009446:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800944a:	29ff      	cmp	r1, #255	; 0xff
 800944c:	f000 825f 	beq.w	800990e <d_print_comp_inner+0x27e2>
 8009450:	236c      	movs	r3, #108	; 0x6c
 8009452:	1c4a      	adds	r2, r1, #1
 8009454:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009458:	5463      	strb	r3, [r4, r1]
 800945a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800945e:	f7fd bf27 	b.w	80072b0 <d_print_comp_inner+0x184>
 8009462:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009466:	29ff      	cmp	r1, #255	; 0xff
 8009468:	f000 8263 	beq.w	8009932 <d_print_comp_inner+0x2806>
 800946c:	2375      	movs	r3, #117	; 0x75
 800946e:	1c4a      	adds	r2, r1, #1
 8009470:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009474:	5463      	strb	r3, [r4, r1]
 8009476:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800947a:	f7fd bf19 	b.w	80072b0 <d_print_comp_inner+0x184>
 800947e:	2500      	movs	r5, #0
 8009480:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009484:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009488:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800948c:	4620      	mov	r0, r4
 800948e:	4798      	blx	r3
 8009490:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009494:	2201      	movs	r2, #1
 8009496:	4413      	add	r3, r2
 8009498:	4629      	mov	r1, r5
 800949a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800949e:	e419      	b.n	8008cd4 <d_print_comp_inner+0x1ba8>
 80094a0:	2600      	movs	r6, #0
 80094a2:	4619      	mov	r1, r3
 80094a4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80094a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80094ac:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80094b0:	4620      	mov	r0, r4
 80094b2:	4798      	blx	r3
 80094b4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80094b8:	2101      	movs	r1, #1
 80094ba:	440a      	add	r2, r1
 80094bc:	4633      	mov	r3, r6
 80094be:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 80094c2:	f7fe ba30 	b.w	8007926 <d_print_comp_inner+0x7fa>
 80094c6:	6899      	ldr	r1, [r3, #8]
 80094c8:	2901      	cmp	r1, #1
 80094ca:	f47d ae9e 	bne.w	800720a <d_print_comp_inner+0xde>
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b3e      	cmp	r3, #62	; 0x3e
 80094d4:	f47d ae99 	bne.w	800720a <d_print_comp_inner+0xde>
 80094d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80094dc:	29ff      	cmp	r1, #255	; 0xff
 80094de:	f000 81eb 	beq.w	80098b8 <d_print_comp_inner+0x278c>
 80094e2:	1c4a      	adds	r2, r1, #1
 80094e4:	2328      	movs	r3, #40	; 0x28
 80094e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80094ea:	5463      	strb	r3, [r4, r1]
 80094ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80094f0:	686a      	ldr	r2, [r5, #4]
 80094f2:	68ae      	ldr	r6, [r5, #8]
 80094f4:	f7fd be89 	b.w	800720a <d_print_comp_inner+0xde>
 80094f8:	2500      	movs	r5, #0
 80094fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80094fe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009502:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009506:	4620      	mov	r0, r4
 8009508:	4798      	blx	r3
 800950a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800950e:	4629      	mov	r1, r5
 8009510:	3301      	adds	r3, #1
 8009512:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009516:	e4c0      	b.n	8008e9a <d_print_comp_inner+0x1d6e>
 8009518:	2500      	movs	r5, #0
 800951a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800951e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009522:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009526:	4620      	mov	r0, r4
 8009528:	4798      	blx	r3
 800952a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800952e:	4629      	mov	r1, r5
 8009530:	3301      	adds	r3, #1
 8009532:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009536:	f7ff b8c9 	b.w	80086cc <d_print_comp_inner+0x15a0>
 800953a:	2600      	movs	r6, #0
 800953c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009540:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009544:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009548:	4620      	mov	r0, r4
 800954a:	4798      	blx	r3
 800954c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009550:	4631      	mov	r1, r6
 8009552:	3301      	adds	r3, #1
 8009554:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009558:	f7fe b8e4 	b.w	8007724 <d_print_comp_inner+0x5f8>
 800955c:	f04f 0800 	mov.w	r8, #0
 8009560:	4619      	mov	r1, r3
 8009562:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009566:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800956a:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 800956e:	4798      	blx	r3
 8009570:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009574:	4643      	mov	r3, r8
 8009576:	3201      	adds	r2, #1
 8009578:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800957c:	f7fe b8bf 	b.w	80076fe <d_print_comp_inner+0x5d2>
 8009580:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8009584:	4619      	mov	r1, r3
 8009586:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800958a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800958e:	4620      	mov	r0, r4
 8009590:	4798      	blx	r3
 8009592:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009596:	4633      	mov	r3, r6
 8009598:	3201      	adds	r2, #1
 800959a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800959e:	f7ff bb87 	b.w	8008cb0 <d_print_comp_inner+0x1b84>
 80095a2:	255f      	movs	r5, #95	; 0x5f
 80095a4:	f7ff ba7d 	b.w	8008aa2 <d_print_comp_inner+0x1976>
 80095a8:	68aa      	ldr	r2, [r5, #8]
 80095aa:	4639      	mov	r1, r7
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 f9d5 	bl	800995c <d_print_comp>
 80095b2:	9a00      	ldr	r2, [sp, #0]
 80095b4:	9b06      	ldr	r3, [sp, #24]
 80095b6:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f43e aabe 	beq.w	8007b3c <d_print_comp_inner+0xa10>
 80095c0:	f7fd be76 	b.w	80072b0 <d_print_comp_inner+0x184>
 80095c4:	4642      	mov	r2, r8
 80095c6:	4639      	mov	r1, r7
 80095c8:	4620      	mov	r0, r4
 80095ca:	f001 f879 	bl	800a6c0 <d_print_subexpr>
 80095ce:	464a      	mov	r2, r9
 80095d0:	4639      	mov	r1, r7
 80095d2:	4620      	mov	r0, r4
 80095d4:	f001 f836 	bl	800a644 <d_print_expr_op>
 80095d8:	4632      	mov	r2, r6
 80095da:	4639      	mov	r1, r7
 80095dc:	4620      	mov	r0, r4
 80095de:	f001 f86f 	bl	800a6c0 <d_print_subexpr>
 80095e2:	4620      	mov	r0, r4
 80095e4:	2203      	movs	r2, #3
 80095e6:	4975      	ldr	r1, [pc, #468]	; (80097bc <d_print_comp_inner+0x2690>)
 80095e8:	f7fd fae0 	bl	8006bac <d_append_buffer>
 80095ec:	462a      	mov	r2, r5
 80095ee:	4639      	mov	r1, r7
 80095f0:	4620      	mov	r0, r4
 80095f2:	f001 f865 	bl	800a6c0 <d_print_subexpr>
 80095f6:	f7fd be5b 	b.w	80072b0 <d_print_comp_inner+0x184>
 80095fa:	6893      	ldr	r3, [r2, #8]
 80095fc:	4639      	mov	r1, r7
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	4620      	mov	r0, r4
 8009602:	2b29      	cmp	r3, #41	; 0x29
 8009604:	bf1c      	itt	ne
 8009606:	2301      	movne	r3, #1
 8009608:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 800960c:	6852      	ldr	r2, [r2, #4]
 800960e:	f001 f857 	bl	800a6c0 <d_print_subexpr>
 8009612:	f7fd be09 	b.w	8007228 <d_print_comp_inner+0xfc>
 8009616:	686a      	ldr	r2, [r5, #4]
 8009618:	4639      	mov	r1, r7
 800961a:	4620      	mov	r0, r4
 800961c:	f001 f850 	bl	800a6c0 <d_print_subexpr>
 8009620:	4620      	mov	r0, r4
 8009622:	2203      	movs	r2, #3
 8009624:	4966      	ldr	r1, [pc, #408]	; (80097c0 <d_print_comp_inner+0x2694>)
 8009626:	f7fd fac1 	bl	8006bac <d_append_buffer>
 800962a:	f7fd be41 	b.w	80072b0 <d_print_comp_inner+0x184>
 800962e:	686b      	ldr	r3, [r5, #4]
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	2a01      	cmp	r2, #1
 8009634:	f47f ab23 	bne.w	8008c7e <d_print_comp_inner+0x1b52>
 8009638:	68aa      	ldr	r2, [r5, #8]
 800963a:	7812      	ldrb	r2, [r2, #0]
 800963c:	2a29      	cmp	r2, #41	; 0x29
 800963e:	bf08      	it	eq
 8009640:	461d      	moveq	r5, r3
 8009642:	f7ff bb1c 	b.w	8008c7e <d_print_comp_inner+0x1b52>
 8009646:	ab14      	add	r3, sp, #80	; 0x50
 8009648:	f843 cd48 	str.w	ip, [r3, #-72]!
 800964c:	9603      	str	r6, [sp, #12]
 800964e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8009652:	f7fe be9f 	b.w	8008394 <d_print_comp_inner+0x1268>
 8009656:	4642      	mov	r2, r8
 8009658:	4639      	mov	r1, r7
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fff2 	bl	800a644 <d_print_expr_op>
 8009660:	e5e5      	b.n	800922e <d_print_comp_inner+0x2102>
 8009662:	2500      	movs	r5, #0
 8009664:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009668:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800966c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009670:	4620      	mov	r0, r4
 8009672:	4798      	blx	r3
 8009674:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009678:	4629      	mov	r1, r5
 800967a:	3301      	adds	r3, #1
 800967c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009680:	f7ff bbde 	b.w	8008e40 <d_print_comp_inner+0x1d14>
 8009684:	f04f 0800 	mov.w	r8, #0
 8009688:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800968c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009690:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009694:	4620      	mov	r0, r4
 8009696:	4798      	blx	r3
 8009698:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800969c:	4641      	mov	r1, r8
 800969e:	3301      	adds	r3, #1
 80096a0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80096a4:	e440      	b.n	8008f28 <d_print_comp_inner+0x1dfc>
 80096a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80096aa:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80096ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80096b2:	4620      	mov	r0, r4
 80096b4:	4798      	blx	r3
 80096b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80096ba:	4639      	mov	r1, r7
 80096bc:	3301      	adds	r3, #1
 80096be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80096c2:	f7fe be7e 	b.w	80083c2 <d_print_comp_inner+0x1296>
 80096c6:	9b02      	ldr	r3, [sp, #8]
 80096c8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80096cc:	f7fe be6b 	b.w	80083a6 <d_print_comp_inner+0x127a>
 80096d0:	4664      	mov	r4, ip
 80096d2:	f7fe bf3c 	b.w	800854e <d_print_comp_inner+0x1422>
 80096d6:	2600      	movs	r6, #0
 80096d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80096dc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80096e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80096e4:	4620      	mov	r0, r4
 80096e6:	4798      	blx	r3
 80096e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80096ec:	4631      	mov	r1, r6
 80096ee:	3301      	adds	r3, #1
 80096f0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80096f4:	f7ff bbb2 	b.w	8008e5c <d_print_comp_inner+0x1d30>
 80096f8:	4660      	mov	r0, ip
 80096fa:	46e0      	mov	r8, ip
 80096fc:	f7fe bcb3 	b.w	8008066 <d_print_comp_inner+0xf3a>
 8009700:	2600      	movs	r6, #0
 8009702:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009706:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800970a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800970e:	4620      	mov	r0, r4
 8009710:	4798      	blx	r3
 8009712:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009716:	4631      	mov	r1, r6
 8009718:	3301      	adds	r3, #1
 800971a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800971e:	f7ff bbab 	b.w	8008e78 <d_print_comp_inner+0x1d4c>
 8009722:	2500      	movs	r5, #0
 8009724:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009728:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800972c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009730:	4620      	mov	r0, r4
 8009732:	4798      	blx	r3
 8009734:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009738:	4629      	mov	r1, r5
 800973a:	3301      	adds	r3, #1
 800973c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009740:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009744:	e615      	b.n	8009372 <d_print_comp_inner+0x2246>
 8009746:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800974a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800974e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009752:	4620      	mov	r0, r4
 8009754:	4798      	blx	r3
 8009756:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800975a:	4631      	mov	r1, r6
 800975c:	3301      	adds	r3, #1
 800975e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009762:	f7fd bd74 	b.w	800724e <d_print_comp_inner+0x122>
 8009766:	2600      	movs	r6, #0
 8009768:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800976c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009770:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009774:	4620      	mov	r0, r4
 8009776:	4798      	blx	r3
 8009778:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800977c:	4631      	mov	r1, r6
 800977e:	3301      	adds	r3, #1
 8009780:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009784:	f7fd bd75 	b.w	8007272 <d_print_comp_inner+0x146>
 8009788:	686a      	ldr	r2, [r5, #4]
 800978a:	4639      	mov	r1, r7
 800978c:	4620      	mov	r0, r4
 800978e:	f000 ff97 	bl	800a6c0 <d_print_subexpr>
 8009792:	4632      	mov	r2, r6
 8009794:	4639      	mov	r1, r7
 8009796:	4620      	mov	r0, r4
 8009798:	f000 ff54 	bl	800a644 <d_print_expr_op>
 800979c:	f7fd bd88 	b.w	80072b0 <d_print_comp_inner+0x184>
 80097a0:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 80097a4:	2301      	movs	r3, #1
 80097a6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80097aa:	f7fd bd81 	b.w	80072b0 <d_print_comp_inner+0x184>
 80097ae:	bf00      	nop
 80097b0:	080139b8 	.word	0x080139b8
 80097b4:	080139b4 	.word	0x080139b4
 80097b8:	080139b0 	.word	0x080139b0
 80097bc:	080139a4 	.word	0x080139a4
 80097c0:	080139e8 	.word	0x080139e8
 80097c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80097c8:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80097cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80097d0:	4620      	mov	r0, r4
 80097d2:	4798      	blx	r3
 80097d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80097d8:	4631      	mov	r1, r6
 80097da:	3301      	adds	r3, #1
 80097dc:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80097e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80097e4:	e4a5      	b.n	8009132 <d_print_comp_inner+0x2006>
 80097e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80097ea:	29ff      	cmp	r1, #255	; 0xff
 80097ec:	d054      	beq.n	8009898 <d_print_comp_inner+0x276c>
 80097ee:	232d      	movs	r3, #45	; 0x2d
 80097f0:	1c4a      	adds	r2, r1, #1
 80097f2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80097f6:	5463      	strb	r3, [r4, r1]
 80097f8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80097fc:	e600      	b.n	8009400 <d_print_comp_inner+0x22d4>
 80097fe:	2600      	movs	r6, #0
 8009800:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009804:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009808:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800980c:	4620      	mov	r0, r4
 800980e:	4798      	blx	r3
 8009810:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009814:	4631      	mov	r1, r6
 8009816:	3301      	adds	r3, #1
 8009818:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800981c:	e58c      	b.n	8009338 <d_print_comp_inner+0x220c>
 800981e:	f04f 0800 	mov.w	r8, #0
 8009822:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009826:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800982a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800982e:	4620      	mov	r0, r4
 8009830:	4798      	blx	r3
 8009832:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009836:	4641      	mov	r1, r8
 8009838:	3301      	adds	r3, #1
 800983a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800983e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009842:	f7fe b9c4 	b.w	8007bce <d_print_comp_inner+0xaa2>
 8009846:	4688      	mov	r8, r1
 8009848:	e51f      	b.n	800928a <d_print_comp_inner+0x215e>
 800984a:	454f      	cmp	r7, r9
 800984c:	f67f aea9 	bls.w	80095a2 <d_print_comp_inner+0x2476>
 8009850:	2d5f      	cmp	r5, #95	; 0x5f
 8009852:	f47f aea6 	bne.w	80095a2 <d_print_comp_inner+0x2476>
 8009856:	28ff      	cmp	r0, #255	; 0xff
 8009858:	f63f a923 	bhi.w	8008aa2 <d_print_comp_inner+0x1976>
 800985c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009860:	b2c5      	uxtb	r5, r0
 8009862:	29ff      	cmp	r1, #255	; 0xff
 8009864:	d10f      	bne.n	8009886 <d_print_comp_inner+0x275a>
 8009866:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800986a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800986e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009872:	4620      	mov	r0, r4
 8009874:	4798      	blx	r3
 8009876:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800987a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 800987e:	3301      	adds	r3, #1
 8009880:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009884:	2100      	movs	r1, #0
 8009886:	1c4b      	adds	r3, r1, #1
 8009888:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800988c:	464e      	mov	r6, r9
 800988e:	5465      	strb	r5, [r4, r1]
 8009890:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8009894:	f7ff b90f 	b.w	8008ab6 <d_print_comp_inner+0x198a>
 8009898:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800989c:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 80098a0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80098a4:	4798      	blx	r3
 80098a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098aa:	4641      	mov	r1, r8
 80098ac:	3301      	adds	r3, #1
 80098ae:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80098b2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098b6:	e79a      	b.n	80097ee <d_print_comp_inner+0x26c2>
 80098b8:	2600      	movs	r6, #0
 80098ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098be:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80098c2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098c6:	4620      	mov	r0, r4
 80098c8:	4798      	blx	r3
 80098ca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098ce:	4631      	mov	r1, r6
 80098d0:	3301      	adds	r3, #1
 80098d2:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80098d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098da:	e602      	b.n	80094e2 <d_print_comp_inner+0x23b6>
 80098dc:	2205      	movs	r2, #5
 80098de:	491e      	ldr	r1, [pc, #120]	; (8009958 <d_print_comp_inner+0x282c>)
 80098e0:	f7fd f964 	bl	8006bac <d_append_buffer>
 80098e4:	f7fd bce4 	b.w	80072b0 <d_print_comp_inner+0x184>
 80098e8:	2500      	movs	r5, #0
 80098ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098ee:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80098f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098f6:	4620      	mov	r0, r4
 80098f8:	4798      	blx	r3
 80098fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098fe:	4629      	mov	r1, r5
 8009900:	3301      	adds	r3, #1
 8009902:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009906:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800990a:	f7fd bcca 	b.w	80072a2 <d_print_comp_inner+0x176>
 800990e:	2500      	movs	r5, #0
 8009910:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009914:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009918:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800991c:	4620      	mov	r0, r4
 800991e:	4798      	blx	r3
 8009920:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009924:	4629      	mov	r1, r5
 8009926:	3301      	adds	r3, #1
 8009928:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800992c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009930:	e58e      	b.n	8009450 <d_print_comp_inner+0x2324>
 8009932:	2500      	movs	r5, #0
 8009934:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009938:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800993c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009940:	4620      	mov	r0, r4
 8009942:	4798      	blx	r3
 8009944:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009948:	4629      	mov	r1, r5
 800994a:	3301      	adds	r3, #1
 800994c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009950:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009954:	e58a      	b.n	800946c <d_print_comp_inner+0x2340>
 8009956:	bf00      	nop
 8009958:	080139bc 	.word	0x080139bc

0800995c <d_print_comp>:
 800995c:	b510      	push	{r4, lr}
 800995e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8009962:	b082      	sub	sp, #8
 8009964:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8009968:	4604      	mov	r4, r0
 800996a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800996e:	f7fd fbdd 	bl	800712c <d_print_comp_inner>
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009978:	b002      	add	sp, #8
 800997a:	bd10      	pop	{r4, pc}

0800997c <d_print_mod>:
 800997c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009980:	7813      	ldrb	r3, [r2, #0]
 8009982:	b082      	sub	sp, #8
 8009984:	3b03      	subs	r3, #3
 8009986:	4615      	mov	r5, r2
 8009988:	4604      	mov	r4, r0
 800998a:	4688      	mov	r8, r1
 800998c:	2b2a      	cmp	r3, #42	; 0x2a
 800998e:	f200 81d2 	bhi.w	8009d36 <d_print_mod+0x3ba>
 8009992:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009996:	0051      	.short	0x0051
 8009998:	01d001d0 	.word	0x01d001d0
 800999c:	01d001d0 	.word	0x01d001d0
 80099a0:	01d001d0 	.word	0x01d001d0
 80099a4:	01d001d0 	.word	0x01d001d0
 80099a8:	01d001d0 	.word	0x01d001d0
 80099ac:	01d001d0 	.word	0x01d001d0
 80099b0:	01d001d0 	.word	0x01d001d0
 80099b4:	01d001d0 	.word	0x01d001d0
 80099b8:	01d001d0 	.word	0x01d001d0
 80099bc:	01d001d0 	.word	0x01d001d0
 80099c0:	006201d0 	.word	0x006201d0
 80099c4:	00ac0087 	.word	0x00ac0087
 80099c8:	00870062 	.word	0x00870062
 80099cc:	00d000ac 	.word	0x00d000ac
 80099d0:	011800e9 	.word	0x011800e9
 80099d4:	013b012a 	.word	0x013b012a
 80099d8:	0141013e 	.word	0x0141013e
 80099dc:	01d00167 	.word	0x01d00167
 80099e0:	01d001d0 	.word	0x01d001d0
 80099e4:	018d01d0 	.word	0x018d01d0
 80099e8:	002b01d0 	.word	0x002b01d0
 80099ec:	4ed8      	ldr	r6, [pc, #864]	; (8009d50 <d_print_mod+0x3d4>)
 80099ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80099f2:	f106 0a0a 	add.w	sl, r6, #10
 80099f6:	f04f 0900 	mov.w	r9, #0
 80099fa:	e009      	b.n	8009a10 <d_print_mod+0x94>
 80099fc:	460b      	mov	r3, r1
 80099fe:	3101      	adds	r1, #1
 8009a00:	45b2      	cmp	sl, r6
 8009a02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009a06:	54e7      	strb	r7, [r4, r3]
 8009a08:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8009a0c:	f000 81b0 	beq.w	8009d70 <d_print_mod+0x3f4>
 8009a10:	29ff      	cmp	r1, #255	; 0xff
 8009a12:	f816 7b01 	ldrb.w	r7, [r6], #1
 8009a16:	d1f1      	bne.n	80099fc <d_print_mod+0x80>
 8009a18:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a1c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8009a20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a24:	4620      	mov	r0, r4
 8009a26:	4798      	blx	r3
 8009a28:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	440b      	add	r3, r1
 8009a30:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a34:	2300      	movs	r3, #0
 8009a36:	e7e3      	b.n	8009a00 <d_print_mod+0x84>
 8009a38:	686b      	ldr	r3, [r5, #4]
 8009a3a:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009a44:	4620      	mov	r0, r4
 8009a46:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009a4a:	f7fd fb6f 	bl	800712c <d_print_comp_inner>
 8009a4e:	9b01      	ldr	r3, [sp, #4]
 8009a50:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009a54:	b002      	add	sp, #8
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	4dbe      	ldr	r5, [pc, #760]	; (8009d54 <d_print_mod+0x3d8>)
 8009a5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009a60:	f105 0709 	add.w	r7, r5, #9
 8009a64:	f04f 0800 	mov.w	r8, #0
 8009a68:	e008      	b.n	8009a7c <d_print_mod+0x100>
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	3101      	adds	r1, #1
 8009a6e:	42af      	cmp	r7, r5
 8009a70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009a74:	54e6      	strb	r6, [r4, r3]
 8009a76:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009a7a:	d0eb      	beq.n	8009a54 <d_print_mod+0xd8>
 8009a7c:	29ff      	cmp	r1, #255	; 0xff
 8009a7e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009a82:	d1f2      	bne.n	8009a6a <d_print_mod+0xee>
 8009a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a90:	4620      	mov	r0, r4
 8009a92:	4798      	blx	r3
 8009a94:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a98:	2101      	movs	r1, #1
 8009a9a:	440b      	add	r3, r1
 8009a9c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e7e4      	b.n	8009a6e <d_print_mod+0xf2>
 8009aa4:	4dac      	ldr	r5, [pc, #688]	; (8009d58 <d_print_mod+0x3dc>)
 8009aa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009aaa:	f105 0709 	add.w	r7, r5, #9
 8009aae:	f04f 0800 	mov.w	r8, #0
 8009ab2:	e008      	b.n	8009ac6 <d_print_mod+0x14a>
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	3101      	adds	r1, #1
 8009ab8:	42af      	cmp	r7, r5
 8009aba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009abe:	54e6      	strb	r6, [r4, r3]
 8009ac0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009ac4:	d0c6      	beq.n	8009a54 <d_print_mod+0xd8>
 8009ac6:	29ff      	cmp	r1, #255	; 0xff
 8009ac8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009acc:	d1f2      	bne.n	8009ab4 <d_print_mod+0x138>
 8009ace:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009ad2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009ad6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ada:	4620      	mov	r0, r4
 8009adc:	4798      	blx	r3
 8009ade:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	440b      	add	r3, r1
 8009ae6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009aea:	2300      	movs	r3, #0
 8009aec:	e7e4      	b.n	8009ab8 <d_print_mod+0x13c>
 8009aee:	4d9b      	ldr	r5, [pc, #620]	; (8009d5c <d_print_mod+0x3e0>)
 8009af0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009af4:	1daf      	adds	r7, r5, #6
 8009af6:	f04f 0800 	mov.w	r8, #0
 8009afa:	e008      	b.n	8009b0e <d_print_mod+0x192>
 8009afc:	460b      	mov	r3, r1
 8009afe:	3101      	adds	r1, #1
 8009b00:	42af      	cmp	r7, r5
 8009b02:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009b06:	54e6      	strb	r6, [r4, r3]
 8009b08:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009b0c:	d0a2      	beq.n	8009a54 <d_print_mod+0xd8>
 8009b0e:	29ff      	cmp	r1, #255	; 0xff
 8009b10:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009b14:	d1f2      	bne.n	8009afc <d_print_mod+0x180>
 8009b16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009b1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009b1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009b22:	4620      	mov	r0, r4
 8009b24:	4798      	blx	r3
 8009b26:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	440b      	add	r3, r1
 8009b2e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009b32:	2300      	movs	r3, #0
 8009b34:	e7e4      	b.n	8009b00 <d_print_mod+0x184>
 8009b36:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009b3a:	2bff      	cmp	r3, #255	; 0xff
 8009b3c:	f000 8175 	beq.w	8009e2a <d_print_mod+0x4ae>
 8009b40:	1c59      	adds	r1, r3, #1
 8009b42:	2220      	movs	r2, #32
 8009b44:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009b48:	54e2      	strb	r2, [r4, r3]
 8009b4a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009b4e:	29ff      	cmp	r1, #255	; 0xff
 8009b50:	f000 8139 	beq.w	8009dc6 <d_print_mod+0x44a>
 8009b54:	1c4a      	adds	r2, r1, #1
 8009b56:	2326      	movs	r3, #38	; 0x26
 8009b58:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009b5c:	5463      	strb	r3, [r4, r1]
 8009b5e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009b62:	b002      	add	sp, #8
 8009b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b68:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009b6c:	2bff      	cmp	r3, #255	; 0xff
 8009b6e:	f000 816d 	beq.w	8009e4c <d_print_mod+0x4d0>
 8009b72:	1c59      	adds	r1, r3, #1
 8009b74:	2220      	movs	r2, #32
 8009b76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009b7a:	54e2      	strb	r2, [r4, r3]
 8009b7c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009b80:	4d77      	ldr	r5, [pc, #476]	; (8009d60 <d_print_mod+0x3e4>)
 8009b82:	f04f 0800 	mov.w	r8, #0
 8009b86:	1caf      	adds	r7, r5, #2
 8009b88:	e009      	b.n	8009b9e <d_print_mod+0x222>
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	3101      	adds	r1, #1
 8009b8e:	42af      	cmp	r7, r5
 8009b90:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009b94:	54e6      	strb	r6, [r4, r3]
 8009b96:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009b9a:	f43f af5b 	beq.w	8009a54 <d_print_mod+0xd8>
 8009b9e:	29ff      	cmp	r1, #255	; 0xff
 8009ba0:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009ba4:	d1f1      	bne.n	8009b8a <d_print_mod+0x20e>
 8009ba6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009baa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009bae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4798      	blx	r3
 8009bb6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009bba:	2101      	movs	r1, #1
 8009bbc:	440b      	add	r3, r1
 8009bbe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e7e3      	b.n	8009b8e <d_print_mod+0x212>
 8009bc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009bca:	29ff      	cmp	r1, #255	; 0xff
 8009bcc:	f000 810c 	beq.w	8009de8 <d_print_mod+0x46c>
 8009bd0:	1c4a      	adds	r2, r1, #1
 8009bd2:	2320      	movs	r3, #32
 8009bd4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009bd8:	5463      	strb	r3, [r4, r1]
 8009bda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009bde:	68ab      	ldr	r3, [r5, #8]
 8009be0:	4641      	mov	r1, r8
 8009be2:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009be6:	461a      	mov	r2, r3
 8009be8:	e72a      	b.n	8009a40 <d_print_mod+0xc4>
 8009bea:	f011 0804 	ands.w	r8, r1, #4
 8009bee:	f47f af31 	bne.w	8009a54 <d_print_mod+0xd8>
 8009bf2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009bf6:	29ff      	cmp	r1, #255	; 0xff
 8009bf8:	f000 8139 	beq.w	8009e6e <d_print_mod+0x4f2>
 8009bfc:	1c4a      	adds	r2, r1, #1
 8009bfe:	232a      	movs	r3, #42	; 0x2a
 8009c00:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009c04:	5463      	strb	r3, [r4, r1]
 8009c06:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009c0a:	e723      	b.n	8009a54 <d_print_mod+0xd8>
 8009c0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c10:	e79d      	b.n	8009b4e <d_print_mod+0x1d2>
 8009c12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c16:	e7b3      	b.n	8009b80 <d_print_mod+0x204>
 8009c18:	4d52      	ldr	r5, [pc, #328]	; (8009d64 <d_print_mod+0x3e8>)
 8009c1a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c1e:	f105 0708 	add.w	r7, r5, #8
 8009c22:	f04f 0800 	mov.w	r8, #0
 8009c26:	e009      	b.n	8009c3c <d_print_mod+0x2c0>
 8009c28:	460b      	mov	r3, r1
 8009c2a:	3101      	adds	r1, #1
 8009c2c:	42af      	cmp	r7, r5
 8009c2e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009c32:	54e6      	strb	r6, [r4, r3]
 8009c34:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009c38:	f43f af0c 	beq.w	8009a54 <d_print_mod+0xd8>
 8009c3c:	29ff      	cmp	r1, #255	; 0xff
 8009c3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c42:	d1f1      	bne.n	8009c28 <d_print_mod+0x2ac>
 8009c44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c48:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009c4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009c50:	4620      	mov	r0, r4
 8009c52:	4798      	blx	r3
 8009c54:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009c58:	2101      	movs	r1, #1
 8009c5a:	440b      	add	r3, r1
 8009c5c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009c60:	2300      	movs	r3, #0
 8009c62:	e7e3      	b.n	8009c2c <d_print_mod+0x2b0>
 8009c64:	4d40      	ldr	r5, [pc, #256]	; (8009d68 <d_print_mod+0x3ec>)
 8009c66:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c6a:	f105 070a 	add.w	r7, r5, #10
 8009c6e:	f04f 0800 	mov.w	r8, #0
 8009c72:	e009      	b.n	8009c88 <d_print_mod+0x30c>
 8009c74:	460b      	mov	r3, r1
 8009c76:	3101      	adds	r1, #1
 8009c78:	42af      	cmp	r7, r5
 8009c7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009c7e:	54e6      	strb	r6, [r4, r3]
 8009c80:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009c84:	f43f aee6 	beq.w	8009a54 <d_print_mod+0xd8>
 8009c88:	29ff      	cmp	r1, #255	; 0xff
 8009c8a:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009c8e:	d1f1      	bne.n	8009c74 <d_print_mod+0x2f8>
 8009c90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c94:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009c98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	4798      	blx	r3
 8009ca0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	440b      	add	r3, r1
 8009ca8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009cac:	2300      	movs	r3, #0
 8009cae:	e7e3      	b.n	8009c78 <d_print_mod+0x2fc>
 8009cb0:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8009cb4:	2b28      	cmp	r3, #40	; 0x28
 8009cb6:	d00a      	beq.n	8009cce <d_print_mod+0x352>
 8009cb8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009cbc:	29ff      	cmp	r1, #255	; 0xff
 8009cbe:	d072      	beq.n	8009da6 <d_print_mod+0x42a>
 8009cc0:	1c4a      	adds	r2, r1, #1
 8009cc2:	2320      	movs	r3, #32
 8009cc4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009cc8:	5463      	strb	r3, [r4, r1]
 8009cca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009cce:	686b      	ldr	r3, [r5, #4]
 8009cd0:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009cd4:	4641      	mov	r1, r8
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009cdc:	4620      	mov	r0, r4
 8009cde:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009ce2:	f7fd fa23 	bl	800712c <d_print_comp_inner>
 8009ce6:	4d21      	ldr	r5, [pc, #132]	; (8009d6c <d_print_mod+0x3f0>)
 8009ce8:	9b01      	ldr	r3, [sp, #4]
 8009cea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009cee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009cf2:	1cef      	adds	r7, r5, #3
 8009cf4:	f04f 0800 	mov.w	r8, #0
 8009cf8:	e009      	b.n	8009d0e <d_print_mod+0x392>
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	42af      	cmp	r7, r5
 8009d00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009d04:	54e6      	strb	r6, [r4, r3]
 8009d06:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009d0a:	f43f aea3 	beq.w	8009a54 <d_print_mod+0xd8>
 8009d0e:	29ff      	cmp	r1, #255	; 0xff
 8009d10:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009d14:	d1f1      	bne.n	8009cfa <d_print_mod+0x37e>
 8009d16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009d1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009d1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009d22:	4620      	mov	r0, r4
 8009d24:	4798      	blx	r3
 8009d26:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	440b      	add	r3, r1
 8009d2e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009d32:	2300      	movs	r3, #0
 8009d34:	e7e3      	b.n	8009cfe <d_print_mod+0x382>
 8009d36:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	9500      	str	r5, [sp, #0]
 8009d44:	f7fd f9f2 	bl	800712c <d_print_comp_inner>
 8009d48:	9b01      	ldr	r3, [sp, #4]
 8009d4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009d4e:	e681      	b.n	8009a54 <d_print_mod+0xd8>
 8009d50:	08013aa8 	.word	0x08013aa8
 8009d54:	08013a67 	.word	0x08013a67
 8009d58:	08013a73 	.word	0x08013a73
 8009d5c:	08013a80 	.word	0x08013a80
 8009d60:	08013a88 	.word	0x08013a88
 8009d64:	08013a8b 	.word	0x08013a8b
 8009d68:	08013a98 	.word	0x08013a98
 8009d6c:	08013aa4 	.word	0x08013aa4
 8009d70:	686b      	ldr	r3, [r5, #4]
 8009d72:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009d76:	461a      	mov	r2, r3
 8009d78:	4641      	mov	r1, r8
 8009d7a:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009d7e:	4620      	mov	r0, r4
 8009d80:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009d84:	f7fd f9d2 	bl	800712c <d_print_comp_inner>
 8009d88:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	29ff      	cmp	r1, #255	; 0xff
 8009d90:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009d94:	d038      	beq.n	8009e08 <d_print_mod+0x48c>
 8009d96:	1c4a      	adds	r2, r1, #1
 8009d98:	2329      	movs	r3, #41	; 0x29
 8009d9a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009d9e:	5463      	strb	r3, [r4, r1]
 8009da0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009da4:	e656      	b.n	8009a54 <d_print_mod+0xd8>
 8009da6:	2600      	movs	r6, #0
 8009da8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009dac:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009db0:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009db4:	4798      	blx	r3
 8009db6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009dba:	2201      	movs	r2, #1
 8009dbc:	4413      	add	r3, r2
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009dc4:	e77d      	b.n	8009cc2 <d_print_mod+0x346>
 8009dc6:	2500      	movs	r5, #0
 8009dc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009dcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009dd0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4798      	blx	r3
 8009dd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009ddc:	2201      	movs	r2, #1
 8009dde:	4413      	add	r3, r2
 8009de0:	4629      	mov	r1, r5
 8009de2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009de6:	e6b6      	b.n	8009b56 <d_print_mod+0x1da>
 8009de8:	2600      	movs	r6, #0
 8009dea:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009dee:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009df2:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009df6:	4798      	blx	r3
 8009df8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	4413      	add	r3, r2
 8009e00:	4631      	mov	r1, r6
 8009e02:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009e06:	e6e4      	b.n	8009bd2 <d_print_mod+0x256>
 8009e08:	2500      	movs	r5, #0
 8009e0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009e0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009e12:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009e16:	4620      	mov	r0, r4
 8009e18:	4798      	blx	r3
 8009e1a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009e1e:	2201      	movs	r2, #1
 8009e20:	4413      	add	r3, r2
 8009e22:	4629      	mov	r1, r5
 8009e24:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009e28:	e7b6      	b.n	8009d98 <d_print_mod+0x41c>
 8009e2a:	2500      	movs	r5, #0
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009e32:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009e36:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8009e3a:	4798      	blx	r3
 8009e3c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009e40:	2101      	movs	r1, #1
 8009e42:	440a      	add	r2, r1
 8009e44:	462b      	mov	r3, r5
 8009e46:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009e4a:	e67a      	b.n	8009b42 <d_print_mod+0x1c6>
 8009e4c:	2500      	movs	r5, #0
 8009e4e:	4619      	mov	r1, r3
 8009e50:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009e54:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009e58:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8009e5c:	4798      	blx	r3
 8009e5e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009e62:	2101      	movs	r1, #1
 8009e64:	440a      	add	r2, r1
 8009e66:	462b      	mov	r3, r5
 8009e68:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009e6c:	e682      	b.n	8009b74 <d_print_mod+0x1f8>
 8009e6e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009e72:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009e76:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8009e7a:	4798      	blx	r3
 8009e7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009e80:	2201      	movs	r2, #1
 8009e82:	4413      	add	r3, r2
 8009e84:	4641      	mov	r1, r8
 8009e86:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009e8a:	e6b8      	b.n	8009bfe <d_print_mod+0x282>

08009e8c <d_print_mod_list>:
 8009e8c:	2a00      	cmp	r2, #0
 8009e8e:	f000 809c 	beq.w	8009fca <d_print_mod_list+0x13e>
 8009e92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e96:	461e      	mov	r6, r3
 8009e98:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8009e9c:	b089      	sub	sp, #36	; 0x24
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	bb33      	cbnz	r3, 8009ef0 <d_print_mod_list+0x64>
 8009ea2:	460f      	mov	r7, r1
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	f04f 0801 	mov.w	r8, #1
 8009eaa:	e002      	b.n	8009eb2 <d_print_mod_list+0x26>
 8009eac:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8009eb0:	b9f3      	cbnz	r3, 8009ef0 <d_print_mod_list+0x64>
 8009eb2:	68a3      	ldr	r3, [r4, #8]
 8009eb4:	b9cb      	cbnz	r3, 8009eea <d_print_mod_list+0x5e>
 8009eb6:	6862      	ldr	r2, [r4, #4]
 8009eb8:	7813      	ldrb	r3, [r2, #0]
 8009eba:	b91e      	cbnz	r6, 8009ec4 <d_print_mod_list+0x38>
 8009ebc:	f1a3 011c 	sub.w	r1, r3, #28
 8009ec0:	2904      	cmp	r1, #4
 8009ec2:	d912      	bls.n	8009eea <d_print_mod_list+0x5e>
 8009ec4:	68e1      	ldr	r1, [r4, #12]
 8009ec6:	2b29      	cmp	r3, #41	; 0x29
 8009ec8:	f8c4 8008 	str.w	r8, [r4, #8]
 8009ecc:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8009ed0:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8009ed4:	d00f      	beq.n	8009ef6 <d_print_mod_list+0x6a>
 8009ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed8:	d018      	beq.n	8009f0c <d_print_mod_list+0x80>
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d021      	beq.n	8009f22 <d_print_mod_list+0x96>
 8009ede:	4639      	mov	r1, r7
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f7ff fd4b 	bl	800997c <d_print_mod>
 8009ee6:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8009eea:	6824      	ldr	r4, [r4, #0]
 8009eec:	2c00      	cmp	r4, #0
 8009eee:	d1dd      	bne.n	8009eac <d_print_mod_list+0x20>
 8009ef0:	b009      	add	sp, #36	; 0x24
 8009ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	3208      	adds	r2, #8
 8009efa:	4639      	mov	r1, r7
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 f9d7 	bl	800a2b0 <d_print_function_type.isra.11>
 8009f02:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8009f06:	b009      	add	sp, #36	; 0x24
 8009f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	3204      	adds	r2, #4
 8009f10:	4639      	mov	r1, r7
 8009f12:	4628      	mov	r0, r5
 8009f14:	f000 f8f0 	bl	800a0f8 <d_print_array_type.isra.10>
 8009f18:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8009f1c:	b009      	add	sp, #36	; 0x24
 8009f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f22:	2600      	movs	r6, #0
 8009f24:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8009f28:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8009f2c:	6852      	ldr	r2, [r2, #4]
 8009f2e:	4639      	mov	r1, r7
 8009f30:	4628      	mov	r0, r5
 8009f32:	f7ff fd13 	bl	800995c <d_print_comp>
 8009f36:	f017 0b04 	ands.w	fp, r7, #4
 8009f3a:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8009f3e:	d020      	beq.n	8009f82 <d_print_mod_list+0xf6>
 8009f40:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8009f44:	29ff      	cmp	r1, #255	; 0xff
 8009f46:	f000 80be 	beq.w	800a0c6 <d_print_mod_list+0x23a>
 8009f4a:	1c4a      	adds	r2, r1, #1
 8009f4c:	232e      	movs	r3, #46	; 0x2e
 8009f4e:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8009f52:	546b      	strb	r3, [r5, r1]
 8009f54:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8009f58:	6863      	ldr	r3, [r4, #4]
 8009f5a:	689c      	ldr	r4, [r3, #8]
 8009f5c:	7823      	ldrb	r3, [r4, #0]
 8009f5e:	2b45      	cmp	r3, #69	; 0x45
 8009f60:	d102      	bne.n	8009f68 <d_print_mod_list+0xdc>
 8009f62:	e033      	b.n	8009fcc <d_print_mod_list+0x140>
 8009f64:	6864      	ldr	r4, [r4, #4]
 8009f66:	7823      	ldrb	r3, [r4, #0]
 8009f68:	3b1c      	subs	r3, #28
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	d9fa      	bls.n	8009f64 <d_print_mod_list+0xd8>
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4639      	mov	r1, r7
 8009f72:	4628      	mov	r0, r5
 8009f74:	f7ff fcf2 	bl	800995c <d_print_comp>
 8009f78:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8009f7c:	b009      	add	sp, #36	; 0x24
 8009f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f82:	4e59      	ldr	r6, [pc, #356]	; (800a0e8 <d_print_mod_list+0x25c>)
 8009f84:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8009f88:	f106 0a02 	add.w	sl, r6, #2
 8009f8c:	e009      	b.n	8009fa2 <d_print_mod_list+0x116>
 8009f8e:	460b      	mov	r3, r1
 8009f90:	3101      	adds	r1, #1
 8009f92:	45b2      	cmp	sl, r6
 8009f94:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8009f98:	f805 8003 	strb.w	r8, [r5, r3]
 8009f9c:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8009fa0:	d0da      	beq.n	8009f58 <d_print_mod_list+0xcc>
 8009fa2:	29ff      	cmp	r1, #255	; 0xff
 8009fa4:	f816 8b01 	ldrb.w	r8, [r6], #1
 8009fa8:	d1f1      	bne.n	8009f8e <d_print_mod_list+0x102>
 8009faa:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8009fae:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8009fb2:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	4798      	blx	r3
 8009fba:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	440b      	add	r3, r1
 8009fc2:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	e7e3      	b.n	8009f92 <d_print_mod_list+0x106>
 8009fca:	4770      	bx	lr
 8009fcc:	4e47      	ldr	r6, [pc, #284]	; (800a0ec <d_print_mod_list+0x260>)
 8009fce:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8009fd2:	f106 0a0d 	add.w	sl, r6, #13
 8009fd6:	f04f 0b00 	mov.w	fp, #0
 8009fda:	e009      	b.n	8009ff0 <d_print_mod_list+0x164>
 8009fdc:	460b      	mov	r3, r1
 8009fde:	3101      	adds	r1, #1
 8009fe0:	45b2      	cmp	sl, r6
 8009fe2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8009fe6:	f805 8003 	strb.w	r8, [r5, r3]
 8009fea:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8009fee:	d013      	beq.n	800a018 <d_print_mod_list+0x18c>
 8009ff0:	29ff      	cmp	r1, #255	; 0xff
 8009ff2:	f816 8b01 	ldrb.w	r8, [r6], #1
 8009ff6:	d1f1      	bne.n	8009fdc <d_print_mod_list+0x150>
 8009ff8:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8009ffc:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a000:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a004:	4628      	mov	r0, r5
 800a006:	4798      	blx	r3
 800a008:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a00c:	2101      	movs	r1, #1
 800a00e:	440b      	add	r3, r1
 800a010:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a014:	2300      	movs	r3, #0
 800a016:	e7e3      	b.n	8009fe0 <d_print_mod_list+0x154>
 800a018:	68a2      	ldr	r2, [r4, #8]
 800a01a:	a801      	add	r0, sp, #4
 800a01c:	3201      	adds	r2, #1
 800a01e:	4934      	ldr	r1, [pc, #208]	; (800a0f0 <d_print_mod_list+0x264>)
 800a020:	f007 f9f8 	bl	8011414 <siprintf>
 800a024:	a801      	add	r0, sp, #4
 800a026:	f004 fe11 	bl	800ec4c <strlen>
 800a02a:	b328      	cbz	r0, 800a078 <d_print_mod_list+0x1ec>
 800a02c:	ae01      	add	r6, sp, #4
 800a02e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a032:	eb06 0a00 	add.w	sl, r6, r0
 800a036:	f04f 0b00 	mov.w	fp, #0
 800a03a:	e009      	b.n	800a050 <d_print_mod_list+0x1c4>
 800a03c:	460b      	mov	r3, r1
 800a03e:	3101      	adds	r1, #1
 800a040:	45b2      	cmp	sl, r6
 800a042:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a046:	f805 8003 	strb.w	r8, [r5, r3]
 800a04a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a04e:	d015      	beq.n	800a07c <d_print_mod_list+0x1f0>
 800a050:	29ff      	cmp	r1, #255	; 0xff
 800a052:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a056:	d1f1      	bne.n	800a03c <d_print_mod_list+0x1b0>
 800a058:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a05c:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a060:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a064:	4628      	mov	r0, r5
 800a066:	4798      	blx	r3
 800a068:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a06c:	2101      	movs	r1, #1
 800a06e:	440b      	add	r3, r1
 800a070:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a074:	2300      	movs	r3, #0
 800a076:	e7e3      	b.n	800a040 <d_print_mod_list+0x1b4>
 800a078:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a07c:	4e1d      	ldr	r6, [pc, #116]	; (800a0f4 <d_print_mod_list+0x268>)
 800a07e:	f04f 0b00 	mov.w	fp, #0
 800a082:	f106 0a03 	add.w	sl, r6, #3
 800a086:	e00a      	b.n	800a09e <d_print_mod_list+0x212>
 800a088:	460b      	mov	r3, r1
 800a08a:	3101      	adds	r1, #1
 800a08c:	4556      	cmp	r6, sl
 800a08e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a092:	f805 8003 	strb.w	r8, [r5, r3]
 800a096:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a09a:	f43f af63 	beq.w	8009f64 <d_print_mod_list+0xd8>
 800a09e:	29ff      	cmp	r1, #255	; 0xff
 800a0a0:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a0a4:	d1f0      	bne.n	800a088 <d_print_mod_list+0x1fc>
 800a0a6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a0aa:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a0ae:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	4798      	blx	r3
 800a0b6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	440b      	add	r3, r1
 800a0be:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	e7e2      	b.n	800a08c <d_print_mod_list+0x200>
 800a0c6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a0ca:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a0ce:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	4798      	blx	r3
 800a0d6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4413      	add	r3, r2
 800a0de:	4631      	mov	r1, r6
 800a0e0:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a0e4:	e732      	b.n	8009f4c <d_print_mod_list+0xc0>
 800a0e6:	bf00      	nop
 800a0e8:	080137e8 	.word	0x080137e8
 800a0ec:	080137ec 	.word	0x080137ec
 800a0f0:	080137fc 	.word	0x080137fc
 800a0f4:	08013800 	.word	0x08013800

0800a0f8 <d_print_array_type.isra.10>:
 800a0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	460f      	mov	r7, r1
 800a100:	4690      	mov	r8, r2
 800a102:	b163      	cbz	r3, 800a11e <d_print_array_type.isra.10+0x26>
 800a104:	461e      	mov	r6, r3
 800a106:	461a      	mov	r2, r3
 800a108:	6893      	ldr	r3, [r2, #8]
 800a10a:	b393      	cbz	r3, 800a172 <d_print_array_type.isra.10+0x7a>
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	2a00      	cmp	r2, #0
 800a110:	d1fa      	bne.n	800a108 <d_print_array_type.isra.10+0x10>
 800a112:	4613      	mov	r3, r2
 800a114:	4639      	mov	r1, r7
 800a116:	4632      	mov	r2, r6
 800a118:	4620      	mov	r0, r4
 800a11a:	f7ff feb7 	bl	8009e8c <d_print_mod_list>
 800a11e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a122:	29ff      	cmp	r1, #255	; 0xff
 800a124:	f000 808e 	beq.w	800a244 <d_print_array_type.isra.10+0x14c>
 800a128:	1c4b      	adds	r3, r1, #1
 800a12a:	2220      	movs	r2, #32
 800a12c:	2bff      	cmp	r3, #255	; 0xff
 800a12e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800a132:	5462      	strb	r2, [r4, r1]
 800a134:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a138:	d069      	beq.n	800a20e <d_print_array_type.isra.10+0x116>
 800a13a:	225b      	movs	r2, #91	; 0x5b
 800a13c:	1c59      	adds	r1, r3, #1
 800a13e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a142:	54e2      	strb	r2, [r4, r3]
 800a144:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a148:	f8d8 2000 	ldr.w	r2, [r8]
 800a14c:	b12a      	cbz	r2, 800a15a <d_print_array_type.isra.10+0x62>
 800a14e:	4639      	mov	r1, r7
 800a150:	4620      	mov	r0, r4
 800a152:	f7ff fc03 	bl	800995c <d_print_comp>
 800a156:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a15a:	29ff      	cmp	r1, #255	; 0xff
 800a15c:	f000 8083 	beq.w	800a266 <d_print_array_type.isra.10+0x16e>
 800a160:	1c4a      	adds	r2, r1, #1
 800a162:	235d      	movs	r3, #93	; 0x5d
 800a164:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a168:	5463      	strb	r3, [r4, r1]
 800a16a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a16e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a172:	6852      	ldr	r2, [r2, #4]
 800a174:	7812      	ldrb	r2, [r2, #0]
 800a176:	2a2a      	cmp	r2, #42	; 0x2a
 800a178:	d040      	beq.n	800a1fc <d_print_array_type.isra.10+0x104>
 800a17a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a2ac <d_print_array_type.isra.10+0x1b4>
 800a17e:	461d      	mov	r5, r3
 800a180:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a184:	f109 0b02 	add.w	fp, r9, #2
 800a188:	e00a      	b.n	800a1a0 <d_print_array_type.isra.10+0xa8>
 800a18a:	460b      	mov	r3, r1
 800a18c:	45cb      	cmp	fp, r9
 800a18e:	f101 0101 	add.w	r1, r1, #1
 800a192:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a196:	f804 a003 	strb.w	sl, [r4, r3]
 800a19a:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800a19e:	d01b      	beq.n	800a1d8 <d_print_array_type.isra.10+0xe0>
 800a1a0:	29ff      	cmp	r1, #255	; 0xff
 800a1a2:	f819 ab01 	ldrb.w	sl, [r9], #1
 800a1a6:	d1f0      	bne.n	800a18a <d_print_array_type.isra.10+0x92>
 800a1a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a1ac:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a1b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	4798      	blx	r3
 800a1b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a1bc:	2101      	movs	r1, #1
 800a1be:	440b      	add	r3, r1
 800a1c0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a1c4:	45cb      	cmp	fp, r9
 800a1c6:	f04f 0300 	mov.w	r3, #0
 800a1ca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a1ce:	f804 a003 	strb.w	sl, [r4, r3]
 800a1d2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800a1d6:	d1e3      	bne.n	800a1a0 <d_print_array_type.isra.10+0xa8>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	4632      	mov	r2, r6
 800a1dc:	4639      	mov	r1, r7
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f7ff fe54 	bl	8009e8c <d_print_mod_list>
 800a1e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a1e8:	2bff      	cmp	r3, #255	; 0xff
 800a1ea:	d04d      	beq.n	800a288 <d_print_array_type.isra.10+0x190>
 800a1ec:	1c59      	adds	r1, r3, #1
 800a1ee:	2229      	movs	r2, #41	; 0x29
 800a1f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a1f4:	54e2      	strb	r2, [r4, r3]
 800a1f6:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a1fa:	e792      	b.n	800a122 <d_print_array_type.isra.10+0x2a>
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	4620      	mov	r0, r4
 800a202:	f7ff fe43 	bl	8009e8c <d_print_mod_list>
 800a206:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a20a:	2bff      	cmp	r3, #255	; 0xff
 800a20c:	d195      	bne.n	800a13a <d_print_array_type.isra.10+0x42>
 800a20e:	2200      	movs	r2, #0
 800a210:	4619      	mov	r1, r3
 800a212:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800a216:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a21a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a21e:	4620      	mov	r0, r4
 800a220:	4798      	blx	r3
 800a222:	235b      	movs	r3, #91	; 0x5b
 800a224:	7023      	strb	r3, [r4, #0]
 800a226:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a22a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a22e:	f8d8 2000 	ldr.w	r2, [r8]
 800a232:	3301      	adds	r3, #1
 800a234:	2101      	movs	r1, #1
 800a236:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a23a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a23e:	2a00      	cmp	r2, #0
 800a240:	d185      	bne.n	800a14e <d_print_array_type.isra.10+0x56>
 800a242:	e78d      	b.n	800a160 <d_print_array_type.isra.10+0x68>
 800a244:	2500      	movs	r5, #0
 800a246:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a24a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a24e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a252:	4620      	mov	r0, r4
 800a254:	4798      	blx	r3
 800a256:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a25a:	2301      	movs	r3, #1
 800a25c:	441a      	add	r2, r3
 800a25e:	4629      	mov	r1, r5
 800a260:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a264:	e761      	b.n	800a12a <d_print_array_type.isra.10+0x32>
 800a266:	2500      	movs	r5, #0
 800a268:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a26c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a270:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a274:	4620      	mov	r0, r4
 800a276:	4798      	blx	r3
 800a278:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a27c:	2201      	movs	r2, #1
 800a27e:	4413      	add	r3, r2
 800a280:	4629      	mov	r1, r5
 800a282:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a286:	e76c      	b.n	800a162 <d_print_array_type.isra.10+0x6a>
 800a288:	2500      	movs	r5, #0
 800a28a:	4619      	mov	r1, r3
 800a28c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a290:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a294:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a298:	4620      	mov	r0, r4
 800a29a:	4798      	blx	r3
 800a29c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	440a      	add	r2, r1
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a2aa:	e7a0      	b.n	800a1ee <d_print_array_type.isra.10+0xf6>
 800a2ac:	080139e4 	.word	0x080139e4

0800a2b0 <d_print_function_type.isra.11>:
 800a2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	460e      	mov	r6, r1
 800a2ba:	4617      	mov	r7, r2
 800a2bc:	461d      	mov	r5, r3
 800a2be:	b353      	cbz	r3, 800a316 <d_print_function_type.isra.11+0x66>
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	bb43      	cbnz	r3, 800a316 <d_print_function_type.isra.11+0x66>
 800a2c4:	462a      	mov	r2, r5
 800a2c6:	f04f 0e01 	mov.w	lr, #1
 800a2ca:	e006      	b.n	800a2da <d_print_function_type.isra.11+0x2a>
 800a2cc:	f410 6f60 	tst.w	r0, #3584	; 0xe00
 800a2d0:	d15d      	bne.n	800a38e <d_print_function_type.isra.11+0xde>
 800a2d2:	6812      	ldr	r2, [r2, #0]
 800a2d4:	b1fa      	cbz	r2, 800a316 <d_print_function_type.isra.11+0x66>
 800a2d6:	6893      	ldr	r3, [r2, #8]
 800a2d8:	b9eb      	cbnz	r3, 800a316 <d_print_function_type.isra.11+0x66>
 800a2da:	6853      	ldr	r3, [r2, #4]
 800a2dc:	496e      	ldr	r1, [pc, #440]	; (800a498 <d_print_function_type.isra.11+0x1e8>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	3b19      	subs	r3, #25
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	fa0e f003 	lsl.w	r0, lr, r3
 800a2e8:	2b12      	cmp	r3, #18
 800a2ea:	ea01 0100 	and.w	r1, r1, r0
 800a2ee:	d8f0      	bhi.n	800a2d2 <d_print_function_type.isra.11+0x22>
 800a2f0:	2900      	cmp	r1, #0
 800a2f2:	d0eb      	beq.n	800a2cc <d_print_function_type.isra.11+0x1c>
 800a2f4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	d04e      	beq.n	800a39a <d_print_function_type.isra.11+0xea>
 800a2fc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a300:	2bff      	cmp	r3, #255	; 0xff
 800a302:	f000 80b5 	beq.w	800a470 <d_print_function_type.isra.11+0x1c0>
 800a306:	1c59      	adds	r1, r3, #1
 800a308:	2220      	movs	r2, #32
 800a30a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a30e:	54e2      	strb	r2, [r4, r3]
 800a310:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a314:	e043      	b.n	800a39e <d_print_function_type.isra.11+0xee>
 800a316:	2200      	movs	r2, #0
 800a318:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800a31c:	4613      	mov	r3, r2
 800a31e:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800a322:	4631      	mov	r1, r6
 800a324:	462a      	mov	r2, r5
 800a326:	4620      	mov	r0, r4
 800a328:	f7ff fdb0 	bl	8009e8c <d_print_mod_list>
 800a32c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a330:	29ff      	cmp	r1, #255	; 0xff
 800a332:	d056      	beq.n	800a3e2 <d_print_function_type.isra.11+0x132>
 800a334:	1c4b      	adds	r3, r1, #1
 800a336:	2228      	movs	r2, #40	; 0x28
 800a338:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800a33c:	5462      	strb	r2, [r4, r1]
 800a33e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a342:	6838      	ldr	r0, [r7, #0]
 800a344:	b178      	cbz	r0, 800a366 <d_print_function_type.isra.11+0xb6>
 800a346:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a34a:	4602      	mov	r2, r0
 800a34c:	9000      	str	r0, [sp, #0]
 800a34e:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a352:	4631      	mov	r1, r6
 800a354:	4620      	mov	r0, r4
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	f7fc fee8 	bl	800712c <d_print_comp_inner>
 800a35c:	9a01      	ldr	r2, [sp, #4]
 800a35e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a362:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a366:	2bff      	cmp	r3, #255	; 0xff
 800a368:	d04d      	beq.n	800a406 <d_print_function_type.isra.11+0x156>
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	2029      	movs	r0, #41	; 0x29
 800a36e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a372:	4631      	mov	r1, r6
 800a374:	54e0      	strb	r0, [r4, r3]
 800a376:	462a      	mov	r2, r5
 800a378:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 800a37c:	2301      	movs	r3, #1
 800a37e:	4620      	mov	r0, r4
 800a380:	f7ff fd84 	bl	8009e8c <d_print_mod_list>
 800a384:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 800a388:	b003      	add	sp, #12
 800a38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a38e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a392:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800a396:	2a28      	cmp	r2, #40	; 0x28
 800a398:	d1ae      	bne.n	800a2f8 <d_print_function_type.isra.11+0x48>
 800a39a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a39e:	29ff      	cmp	r1, #255	; 0xff
 800a3a0:	d054      	beq.n	800a44c <d_print_function_type.isra.11+0x19c>
 800a3a2:	1c4a      	adds	r2, r1, #1
 800a3a4:	2328      	movs	r3, #40	; 0x28
 800a3a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a3aa:	f04f 0900 	mov.w	r9, #0
 800a3ae:	5463      	strb	r3, [r4, r1]
 800a3b0:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800a3b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a3b8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800a3bc:	464b      	mov	r3, r9
 800a3be:	462a      	mov	r2, r5
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4620      	mov	r0, r4
 800a3c4:	f7ff fd62 	bl	8009e8c <d_print_mod_list>
 800a3c8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a3cc:	2bff      	cmp	r3, #255	; 0xff
 800a3ce:	d02c      	beq.n	800a42a <d_print_function_type.isra.11+0x17a>
 800a3d0:	1c59      	adds	r1, r3, #1
 800a3d2:	2229      	movs	r2, #41	; 0x29
 800a3d4:	29ff      	cmp	r1, #255	; 0xff
 800a3d6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a3da:	54e2      	strb	r2, [r4, r3]
 800a3dc:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a3e0:	d1a8      	bne.n	800a334 <d_print_function_type.isra.11+0x84>
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a3ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a3ee:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	4798      	blx	r3
 800a3f6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	441a      	add	r2, r3
 800a3fe:	4649      	mov	r1, r9
 800a400:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a404:	e797      	b.n	800a336 <d_print_function_type.isra.11+0x86>
 800a406:	2700      	movs	r7, #0
 800a408:	4619      	mov	r1, r3
 800a40a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a40e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a412:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800a416:	4620      	mov	r0, r4
 800a418:	4798      	blx	r3
 800a41a:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800a41e:	2201      	movs	r2, #1
 800a420:	4411      	add	r1, r2
 800a422:	463b      	mov	r3, r7
 800a424:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 800a428:	e7a0      	b.n	800a36c <d_print_function_type.isra.11+0xbc>
 800a42a:	4619      	mov	r1, r3
 800a42c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a430:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a434:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800a438:	4620      	mov	r0, r4
 800a43a:	4798      	blx	r3
 800a43c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a440:	2101      	movs	r1, #1
 800a442:	440a      	add	r2, r1
 800a444:	464b      	mov	r3, r9
 800a446:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a44a:	e7c2      	b.n	800a3d2 <d_print_function_type.isra.11+0x122>
 800a44c:	f04f 0800 	mov.w	r8, #0
 800a450:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a454:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a458:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a45c:	4620      	mov	r0, r4
 800a45e:	4798      	blx	r3
 800a460:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a464:	2201      	movs	r2, #1
 800a466:	4413      	add	r3, r2
 800a468:	4641      	mov	r1, r8
 800a46a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a46e:	e799      	b.n	800a3a4 <d_print_function_type.isra.11+0xf4>
 800a470:	f04f 0800 	mov.w	r8, #0
 800a474:	4619      	mov	r1, r3
 800a476:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a47a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a47e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a482:	4620      	mov	r0, r4
 800a484:	4798      	blx	r3
 800a486:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a48a:	2101      	movs	r1, #1
 800a48c:	440a      	add	r2, r1
 800a48e:	4643      	mov	r3, r8
 800a490:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a494:	e738      	b.n	800a308 <d_print_function_type.isra.11+0x58>
 800a496:	bf00      	nop
 800a498:	00043107 	.word	0x00043107

0800a49c <d_print_cast.isra.12>:
 800a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	460e      	mov	r6, r1
 800a4aa:	4615      	mov	r5, r2
 800a4ac:	b138      	cbz	r0, 800a4be <d_print_cast.isra.12+0x22>
 800a4ae:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 800a4b2:	ab04      	add	r3, sp, #16
 800a4b4:	f843 2d10 	str.w	r2, [r3, #-16]!
 800a4b8:	9001      	str	r0, [sp, #4]
 800a4ba:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a4be:	682b      	ldr	r3, [r5, #0]
 800a4c0:	781a      	ldrb	r2, [r3, #0]
 800a4c2:	2a04      	cmp	r2, #4
 800a4c4:	d017      	beq.n	800a4f6 <d_print_cast.isra.12+0x5a>
 800a4c6:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 800a4ca:	a802      	add	r0, sp, #8
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	9302      	str	r3, [sp, #8]
 800a4d8:	9503      	str	r5, [sp, #12]
 800a4da:	f7fc fe27 	bl	800712c <d_print_comp_inner>
 800a4de:	9a03      	ldr	r2, [sp, #12]
 800a4e0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800a4e4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a4e8:	b113      	cbz	r3, 800a4f0 <d_print_cast.isra.12+0x54>
 800a4ea:	9b00      	ldr	r3, [sp, #0]
 800a4ec:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a4f0:	b004      	add	sp, #16
 800a4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f6:	6858      	ldr	r0, [r3, #4]
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a4fe:	4602      	mov	r2, r0
 800a500:	9002      	str	r0, [sp, #8]
 800a502:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 800a506:	4631      	mov	r1, r6
 800a508:	4620      	mov	r0, r4
 800a50a:	9303      	str	r3, [sp, #12]
 800a50c:	f7fc fe0e 	bl	800712c <d_print_comp_inner>
 800a510:	9a03      	ldr	r2, [sp, #12]
 800a512:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800a516:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a51a:	b113      	cbz	r3, 800a522 <d_print_cast.isra.12+0x86>
 800a51c:	9b00      	ldr	r3, [sp, #0]
 800a51e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a522:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a526:	2b3c      	cmp	r3, #60	; 0x3c
 800a528:	d02c      	beq.n	800a584 <d_print_cast.isra.12+0xe8>
 800a52a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a52e:	29ff      	cmp	r1, #255	; 0xff
 800a530:	d051      	beq.n	800a5d6 <d_print_cast.isra.12+0x13a>
 800a532:	1c4a      	adds	r2, r1, #1
 800a534:	233c      	movs	r3, #60	; 0x3c
 800a536:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a53a:	5463      	strb	r3, [r4, r1]
 800a53c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a540:	682b      	ldr	r3, [r5, #0]
 800a542:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	4631      	mov	r1, r6
 800a54a:	461a      	mov	r2, r3
 800a54c:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 800a550:	4620      	mov	r0, r4
 800a552:	9302      	str	r3, [sp, #8]
 800a554:	9503      	str	r5, [sp, #12]
 800a556:	f7fc fde9 	bl	800712c <d_print_comp_inner>
 800a55a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a55e:	9a03      	ldr	r2, [sp, #12]
 800a560:	2b3e      	cmp	r3, #62	; 0x3e
 800a562:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a566:	d019      	beq.n	800a59c <d_print_cast.isra.12+0x100>
 800a568:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a56c:	29ff      	cmp	r1, #255	; 0xff
 800a56e:	d021      	beq.n	800a5b4 <d_print_cast.isra.12+0x118>
 800a570:	1c4a      	adds	r2, r1, #1
 800a572:	233e      	movs	r3, #62	; 0x3e
 800a574:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a578:	5463      	strb	r3, [r4, r1]
 800a57a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a57e:	b004      	add	sp, #16
 800a580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a584:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a588:	2bff      	cmp	r3, #255	; 0xff
 800a58a:	d048      	beq.n	800a61e <d_print_cast.isra.12+0x182>
 800a58c:	1c59      	adds	r1, r3, #1
 800a58e:	2220      	movs	r2, #32
 800a590:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a594:	54e2      	strb	r2, [r4, r3]
 800a596:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a59a:	e7c8      	b.n	800a52e <d_print_cast.isra.12+0x92>
 800a59c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a5a0:	2bff      	cmp	r3, #255	; 0xff
 800a5a2:	d02a      	beq.n	800a5fa <d_print_cast.isra.12+0x15e>
 800a5a4:	1c59      	adds	r1, r3, #1
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a5ac:	54e2      	strb	r2, [r4, r3]
 800a5ae:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a5b2:	e7db      	b.n	800a56c <d_print_cast.isra.12+0xd0>
 800a5b4:	2500      	movs	r5, #0
 800a5b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a5ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a5be:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	4798      	blx	r3
 800a5c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	4413      	add	r3, r2
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a5d4:	e7cd      	b.n	800a572 <d_print_cast.isra.12+0xd6>
 800a5d6:	f04f 0800 	mov.w	r8, #0
 800a5da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a5de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a5e2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	4798      	blx	r3
 800a5ea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	4413      	add	r3, r2
 800a5f2:	4641      	mov	r1, r8
 800a5f4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a5f8:	e79c      	b.n	800a534 <d_print_cast.isra.12+0x98>
 800a5fa:	2500      	movs	r5, #0
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a602:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a606:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a60a:	4620      	mov	r0, r4
 800a60c:	4798      	blx	r3
 800a60e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a612:	2101      	movs	r1, #1
 800a614:	440a      	add	r2, r1
 800a616:	462b      	mov	r3, r5
 800a618:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a61c:	e7c3      	b.n	800a5a6 <d_print_cast.isra.12+0x10a>
 800a61e:	f04f 0800 	mov.w	r8, #0
 800a622:	4619      	mov	r1, r3
 800a624:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a628:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a62c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a630:	4620      	mov	r0, r4
 800a632:	4798      	blx	r3
 800a634:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a638:	2101      	movs	r1, #1
 800a63a:	440a      	add	r2, r1
 800a63c:	4643      	mov	r3, r8
 800a63e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a642:	e7a4      	b.n	800a58e <d_print_cast.isra.12+0xf2>

0800a644 <d_print_expr_op>:
 800a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a648:	7815      	ldrb	r5, [r2, #0]
 800a64a:	b082      	sub	sp, #8
 800a64c:	2d31      	cmp	r5, #49	; 0x31
 800a64e:	4613      	mov	r3, r2
 800a650:	4604      	mov	r4, r0
 800a652:	d00d      	beq.n	800a670 <d_print_expr_op+0x2c>
 800a654:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 800a658:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 800a65c:	e88d 0028 	stmia.w	sp, {r3, r5}
 800a660:	f7fc fd64 	bl	800712c <d_print_comp_inner>
 800a664:	9b01      	ldr	r3, [sp, #4]
 800a666:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a66a:	b002      	add	sp, #8
 800a66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a670:	6853      	ldr	r3, [r2, #4]
 800a672:	689f      	ldr	r7, [r3, #8]
 800a674:	685d      	ldr	r5, [r3, #4]
 800a676:	2f00      	cmp	r7, #0
 800a678:	d0f7      	beq.n	800a66a <d_print_expr_op+0x26>
 800a67a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800a67e:	442f      	add	r7, r5
 800a680:	f04f 0800 	mov.w	r8, #0
 800a684:	e008      	b.n	800a698 <d_print_expr_op+0x54>
 800a686:	460b      	mov	r3, r1
 800a688:	3101      	adds	r1, #1
 800a68a:	42bd      	cmp	r5, r7
 800a68c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a690:	54e6      	strb	r6, [r4, r3]
 800a692:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800a696:	d0e8      	beq.n	800a66a <d_print_expr_op+0x26>
 800a698:	29ff      	cmp	r1, #255	; 0xff
 800a69a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800a69e:	d1f2      	bne.n	800a686 <d_print_expr_op+0x42>
 800a6a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a6a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a6a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4798      	blx	r3
 800a6b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	440b      	add	r3, r1
 800a6b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a6bc:	2300      	movs	r3, #0
 800a6be:	e7e4      	b.n	800a68a <d_print_expr_op+0x46>

0800a6c0 <d_print_subexpr>:
 800a6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c2:	7813      	ldrb	r3, [r2, #0]
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	4615      	mov	r5, r2
 800a6ca:	460e      	mov	r6, r1
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	d929      	bls.n	800a724 <d_print_subexpr+0x64>
 800a6d0:	2b30      	cmp	r3, #48	; 0x30
 800a6d2:	d027      	beq.n	800a724 <d_print_subexpr+0x64>
 800a6d4:	2b06      	cmp	r3, #6
 800a6d6:	d025      	beq.n	800a724 <d_print_subexpr+0x64>
 800a6d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800a6dc:	29ff      	cmp	r1, #255	; 0xff
 800a6de:	d031      	beq.n	800a744 <d_print_subexpr+0x84>
 800a6e0:	1c4a      	adds	r2, r1, #1
 800a6e2:	2328      	movs	r3, #40	; 0x28
 800a6e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a6e8:	5463      	strb	r3, [r4, r1]
 800a6ea:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a6f4:	462a      	mov	r2, r5
 800a6f6:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800a700:	f7fc fd14 	bl	800712c <d_print_comp_inner>
 800a704:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a708:	9b01      	ldr	r3, [sp, #4]
 800a70a:	29ff      	cmp	r1, #255	; 0xff
 800a70c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a710:	d028      	beq.n	800a764 <d_print_subexpr+0xa4>
 800a712:	1c4a      	adds	r2, r1, #1
 800a714:	2329      	movs	r3, #41	; 0x29
 800a716:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a71a:	5463      	strb	r3, [r4, r1]
 800a71c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a720:	b003      	add	sp, #12
 800a722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a724:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a728:	4631      	mov	r1, r6
 800a72a:	462a      	mov	r2, r5
 800a72c:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a730:	4620      	mov	r0, r4
 800a732:	9301      	str	r3, [sp, #4]
 800a734:	9500      	str	r5, [sp, #0]
 800a736:	f7fc fcf9 	bl	800712c <d_print_comp_inner>
 800a73a:	9b01      	ldr	r3, [sp, #4]
 800a73c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a740:	b003      	add	sp, #12
 800a742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a744:	2700      	movs	r7, #0
 800a746:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a74a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a74e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800a752:	4798      	blx	r3
 800a754:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a758:	2201      	movs	r2, #1
 800a75a:	4413      	add	r3, r2
 800a75c:	4639      	mov	r1, r7
 800a75e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a762:	e7be      	b.n	800a6e2 <d_print_subexpr+0x22>
 800a764:	2500      	movs	r5, #0
 800a766:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a76a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a76e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a772:	4620      	mov	r0, r4
 800a774:	4798      	blx	r3
 800a776:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a77a:	2201      	movs	r2, #1
 800a77c:	4413      	add	r3, r2
 800a77e:	4629      	mov	r1, r5
 800a780:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a784:	e7c6      	b.n	800a714 <d_print_subexpr+0x54>
 800a786:	bf00      	nop

0800a788 <d_template_args>:
 800a788:	68c1      	ldr	r1, [r0, #12]
 800a78a:	780b      	ldrb	r3, [r1, #0]
 800a78c:	3b49      	subs	r3, #73	; 0x49
 800a78e:	2b01      	cmp	r3, #1
 800a790:	f200 80ac 	bhi.w	800a8ec <d_template_args+0x164>
 800a794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	1c4a      	adds	r2, r1, #1
 800a79a:	60c2      	str	r2, [r0, #12]
 800a79c:	784b      	ldrb	r3, [r1, #1]
 800a79e:	b085      	sub	sp, #20
 800a7a0:	2b45      	cmp	r3, #69	; 0x45
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 800a7a8:	f000 8166 	beq.w	800aa78 <d_template_args+0x2f0>
 800a7ac:	ae04      	add	r6, sp, #16
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	f846 1d04 	str.w	r1, [r6, #-4]!
 800a7b4:	3b49      	subs	r3, #73	; 0x49
 800a7b6:	2b0f      	cmp	r3, #15
 800a7b8:	d854      	bhi.n	800a864 <d_template_args+0xdc>
 800a7ba:	e8df f003 	tbb	[pc, r3]
 800a7be:	4e4e      	.short	0x4e4e
 800a7c0:	53533253 	.word	0x53533253
 800a7c4:	53535353 	.word	0x53535353
 800a7c8:	53535353 	.word	0x53535353
 800a7cc:	0853      	.short	0x0853
 800a7ce:	1c53      	adds	r3, r2, #1
 800a7d0:	2501      	movs	r5, #1
 800a7d2:	60e3      	str	r3, [r4, #12]
 800a7d4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800a7d6:	6365      	str	r5, [r4, #52]	; 0x34
 800a7d8:	7853      	ldrb	r3, [r2, #1]
 800a7da:	2b4c      	cmp	r3, #76	; 0x4c
 800a7dc:	f000 8088 	beq.w	800a8f0 <d_template_args+0x168>
 800a7e0:	2b54      	cmp	r3, #84	; 0x54
 800a7e2:	f000 808b 	beq.w	800a8fc <d_template_args+0x174>
 800a7e6:	2b73      	cmp	r3, #115	; 0x73
 800a7e8:	d044      	beq.n	800a874 <d_template_args+0xec>
 800a7ea:	2b66      	cmp	r3, #102	; 0x66
 800a7ec:	d060      	beq.n	800a8b0 <d_template_args+0x128>
 800a7ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a7f2:	2909      	cmp	r1, #9
 800a7f4:	f200 81b1 	bhi.w	800ab5a <d_template_args+0x3d2>
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f003 f927 	bl	800da4c <d_unqualified_name>
 800a7fe:	4605      	mov	r5, r0
 800a800:	2800      	cmp	r0, #0
 800a802:	f000 821f 	beq.w	800ac44 <d_template_args+0x4bc>
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	781a      	ldrb	r2, [r3, #0]
 800a80a:	2a49      	cmp	r2, #73	; 0x49
 800a80c:	f000 8128 	beq.w	800aa60 <d_template_args+0x2d8>
 800a810:	4602      	mov	r2, r0
 800a812:	6367      	str	r7, [r4, #52]	; 0x34
 800a814:	7819      	ldrb	r1, [r3, #0]
 800a816:	2945      	cmp	r1, #69	; 0x45
 800a818:	d029      	beq.n	800a86e <d_template_args+0xe6>
 800a81a:	2000      	movs	r0, #0
 800a81c:	b005      	add	sp, #20
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	4620      	mov	r0, r4
 800a824:	f003 ff8e 	bl	800e744 <d_expr_primary>
 800a828:	4602      	mov	r2, r0
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	d0f5      	beq.n	800a81a <d_template_args+0x92>
 800a82e:	2300      	movs	r3, #0
 800a830:	212f      	movs	r1, #47	; 0x2f
 800a832:	4620      	mov	r0, r4
 800a834:	f7fc f8a8 	bl	8006988 <d_make_comp>
 800a838:	6030      	str	r0, [r6, #0]
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d0ed      	beq.n	800a81a <d_template_args+0x92>
 800a83e:	68e2      	ldr	r2, [r4, #12]
 800a840:	f100 0608 	add.w	r6, r0, #8
 800a844:	7813      	ldrb	r3, [r2, #0]
 800a846:	2b45      	cmp	r3, #69	; 0x45
 800a848:	d1b4      	bne.n	800a7b4 <d_template_args+0x2c>
 800a84a:	9803      	ldr	r0, [sp, #12]
 800a84c:	3201      	adds	r2, #1
 800a84e:	60e2      	str	r2, [r4, #12]
 800a850:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800a854:	b005      	add	sp, #20
 800a856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a85a:	4620      	mov	r0, r4
 800a85c:	f7ff ff94 	bl	800a788 <d_template_args>
 800a860:	4602      	mov	r2, r0
 800a862:	e7e2      	b.n	800a82a <d_template_args+0xa2>
 800a864:	4620      	mov	r0, r4
 800a866:	f002 fc75 	bl	800d154 <d_type>
 800a86a:	4602      	mov	r2, r0
 800a86c:	e7dd      	b.n	800a82a <d_template_args+0xa2>
 800a86e:	3301      	adds	r3, #1
 800a870:	60e3      	str	r3, [r4, #12]
 800a872:	e7da      	b.n	800a82a <d_template_args+0xa2>
 800a874:	7893      	ldrb	r3, [r2, #2]
 800a876:	2b72      	cmp	r3, #114	; 0x72
 800a878:	f000 8149 	beq.w	800ab0e <d_template_args+0x386>
 800a87c:	2b70      	cmp	r3, #112	; 0x70
 800a87e:	f000 81aa 	beq.w	800abd6 <d_template_args+0x44e>
 800a882:	4620      	mov	r0, r4
 800a884:	f003 f822 	bl	800d8cc <d_operator_name>
 800a888:	4605      	mov	r5, r0
 800a88a:	2800      	cmp	r0, #0
 800a88c:	f000 81da 	beq.w	800ac44 <d_template_args+0x4bc>
 800a890:	f890 9000 	ldrb.w	r9, [r0]
 800a894:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800a898:	d036      	beq.n	800a908 <d_template_args+0x180>
 800a89a:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 800a89e:	f000 80cf 	beq.w	800aa40 <d_template_args+0x2b8>
 800a8a2:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 800a8a6:	f000 8172 	beq.w	800ab8e <d_template_args+0x406>
 800a8aa:	68e3      	ldr	r3, [r4, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	e7b0      	b.n	800a812 <d_template_args+0x8a>
 800a8b0:	7893      	ldrb	r3, [r2, #2]
 800a8b2:	2b70      	cmp	r3, #112	; 0x70
 800a8b4:	d1e5      	bne.n	800a882 <d_template_args+0xfa>
 800a8b6:	1cd3      	adds	r3, r2, #3
 800a8b8:	60e3      	str	r3, [r4, #12]
 800a8ba:	78d3      	ldrb	r3, [r2, #3]
 800a8bc:	2b54      	cmp	r3, #84	; 0x54
 800a8be:	f040 813c 	bne.w	800ab3a <d_template_args+0x3b2>
 800a8c2:	3204      	adds	r2, #4
 800a8c4:	60e2      	str	r2, [r4, #12]
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	6963      	ldr	r3, [r4, #20]
 800a8ca:	69a1      	ldr	r1, [r4, #24]
 800a8cc:	428b      	cmp	r3, r1
 800a8ce:	daec      	bge.n	800a8aa <d_template_args+0x122>
 800a8d0:	6921      	ldr	r1, [r4, #16]
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a8d8:	6162      	str	r2, [r4, #20]
 800a8da:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800a8de:	d06d      	beq.n	800a9bc <d_template_args+0x234>
 800a8e0:	2506      	movs	r5, #6
 800a8e2:	f801 5023 	strb.w	r5, [r1, r3, lsl #2]
 800a8e6:	6050      	str	r0, [r2, #4]
 800a8e8:	68e3      	ldr	r3, [r4, #12]
 800a8ea:	e792      	b.n	800a812 <d_template_args+0x8a>
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	4770      	bx	lr
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f003 ff27 	bl	800e744 <d_expr_primary>
 800a8f6:	68e3      	ldr	r3, [r4, #12]
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	e78a      	b.n	800a812 <d_template_args+0x8a>
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f7fc f9e5 	bl	8006ccc <d_template_param>
 800a902:	68e3      	ldr	r3, [r4, #12]
 800a904:	4602      	mov	r2, r0
 800a906:	e784      	b.n	800a812 <d_template_args+0x8a>
 800a908:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800a90c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a90e:	f8db 3008 	ldr.w	r3, [fp, #8]
 800a912:	f8db a000 	ldr.w	sl, [fp]
 800a916:	3b02      	subs	r3, #2
 800a918:	441a      	add	r2, r3
 800a91a:	6322      	str	r2, [r4, #48]	; 0x30
 800a91c:	4650      	mov	r0, sl
 800a91e:	49cb      	ldr	r1, [pc, #812]	; (800ac4c <d_template_args+0x4c4>)
 800a920:	f004 f98a 	bl	800ec38 <strcmp>
 800a924:	2800      	cmp	r0, #0
 800a926:	f000 8188 	beq.w	800ac3a <d_template_args+0x4b2>
 800a92a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800a92e:	2b03      	cmp	r3, #3
 800a930:	d8bb      	bhi.n	800a8aa <d_template_args+0x122>
 800a932:	e8df f003 	tbb	[pc, r3]
 800a936:	ab7c      	.short	0xab7c
 800a938:	0447      	.short	0x0447
 800a93a:	f04f 0a00 	mov.w	sl, #0
 800a93e:	49c4      	ldr	r1, [pc, #784]	; (800ac50 <d_template_args+0x4c8>)
 800a940:	4650      	mov	r0, sl
 800a942:	f004 f979 	bl	800ec38 <strcmp>
 800a946:	2800      	cmp	r0, #0
 800a948:	f000 819e 	beq.w	800ac88 <d_template_args+0x500>
 800a94c:	f89a 3000 	ldrb.w	r3, [sl]
 800a950:	2b6e      	cmp	r3, #110	; 0x6e
 800a952:	d1aa      	bne.n	800a8aa <d_template_args+0x122>
 800a954:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a958:	2b77      	cmp	r3, #119	; 0x77
 800a95a:	d001      	beq.n	800a960 <d_template_args+0x1d8>
 800a95c:	2b61      	cmp	r3, #97	; 0x61
 800a95e:	d1a4      	bne.n	800a8aa <d_template_args+0x122>
 800a960:	215f      	movs	r1, #95	; 0x5f
 800a962:	4620      	mov	r0, r4
 800a964:	f000 fd86 	bl	800b474 <d_exprlist>
 800a968:	4681      	mov	r9, r0
 800a96a:	4620      	mov	r0, r4
 800a96c:	f002 fbf2 	bl	800d154 <d_type>
 800a970:	68e3      	ldr	r3, [r4, #12]
 800a972:	4682      	mov	sl, r0
 800a974:	7819      	ldrb	r1, [r3, #0]
 800a976:	2945      	cmp	r1, #69	; 0x45
 800a978:	f000 825e 	beq.w	800ae38 <d_template_args+0x6b0>
 800a97c:	2970      	cmp	r1, #112	; 0x70
 800a97e:	f000 8343 	beq.w	800b008 <d_template_args+0x880>
 800a982:	2969      	cmp	r1, #105	; 0x69
 800a984:	f040 824e 	bne.w	800ae24 <d_template_args+0x69c>
 800a988:	785a      	ldrb	r2, [r3, #1]
 800a98a:	2a6c      	cmp	r2, #108	; 0x6c
 800a98c:	f040 824a 	bne.w	800ae24 <d_template_args+0x69c>
 800a990:	4620      	mov	r0, r4
 800a992:	f002 fa0d 	bl	800cdb0 <d_expression_1>
 800a996:	4603      	mov	r3, r0
 800a998:	4652      	mov	r2, sl
 800a99a:	213a      	movs	r1, #58	; 0x3a
 800a99c:	4620      	mov	r0, r4
 800a99e:	f7fb fff3 	bl	8006988 <d_make_comp>
 800a9a2:	464a      	mov	r2, r9
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2139      	movs	r1, #57	; 0x39
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f7fb ffed 	bl	8006988 <d_make_comp>
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2138      	movs	r1, #56	; 0x38
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f7fb ffe7 	bl	8006988 <d_make_comp>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	68e3      	ldr	r3, [r4, #12]
 800a9be:	e728      	b.n	800a812 <d_template_args+0x8a>
 800a9c0:	f04f 0a00 	mov.w	sl, #0
 800a9c4:	686b      	ldr	r3, [r5, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	785a      	ldrb	r2, [r3, #1]
 800a9ca:	2a63      	cmp	r2, #99	; 0x63
 800a9cc:	f000 814e 	beq.w	800ac6c <d_template_args+0x4e4>
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f002 f9ed 	bl	800cdb0 <d_expression_1>
 800a9d6:	4681      	mov	r9, r0
 800a9d8:	499e      	ldr	r1, [pc, #632]	; (800ac54 <d_template_args+0x4cc>)
 800a9da:	4650      	mov	r0, sl
 800a9dc:	f004 f92c 	bl	800ec38 <strcmp>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	f000 813d 	beq.w	800ac60 <d_template_args+0x4d8>
 800a9e6:	499c      	ldr	r1, [pc, #624]	; (800ac58 <d_template_args+0x4d0>)
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	f004 f925 	bl	800ec38 <strcmp>
 800a9ee:	b130      	cbz	r0, 800a9fe <d_template_args+0x276>
 800a9f0:	4650      	mov	r0, sl
 800a9f2:	499a      	ldr	r1, [pc, #616]	; (800ac5c <d_template_args+0x4d4>)
 800a9f4:	f004 f920 	bl	800ec38 <strcmp>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	f040 8215 	bne.w	800ae28 <d_template_args+0x6a0>
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f003 f824 	bl	800da4c <d_unqualified_name>
 800aa04:	68e3      	ldr	r3, [r4, #12]
 800aa06:	4682      	mov	sl, r0
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	2b49      	cmp	r3, #73	; 0x49
 800aa0c:	f000 82d3 	beq.w	800afb6 <d_template_args+0x82e>
 800aa10:	4653      	mov	r3, sl
 800aa12:	464a      	mov	r2, r9
 800aa14:	2137      	movs	r1, #55	; 0x37
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7fb ffb6 	bl	8006988 <d_make_comp>
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2136      	movs	r1, #54	; 0x36
 800aa22:	4620      	mov	r0, r4
 800aa24:	f7fb ffb0 	bl	8006988 <d_make_comp>
 800aa28:	68e3      	ldr	r3, [r4, #12]
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	e6f1      	b.n	800a812 <d_template_args+0x8a>
 800aa2e:	462a      	mov	r2, r5
 800aa30:	2300      	movs	r3, #0
 800aa32:	2134      	movs	r1, #52	; 0x34
 800aa34:	4620      	mov	r0, r4
 800aa36:	f7fb ffa7 	bl	8006988 <d_make_comp>
 800aa3a:	68e3      	ldr	r3, [r4, #12]
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	e6e8      	b.n	800a812 <d_template_args+0x8a>
 800aa40:	686b      	ldr	r3, [r5, #4]
 800aa42:	2b03      	cmp	r3, #3
 800aa44:	f63f af31 	bhi.w	800a8aa <d_template_args+0x122>
 800aa48:	a201      	add	r2, pc, #4	; (adr r2, 800aa50 <d_template_args+0x2c8>)
 800aa4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4e:	bf00      	nop
 800aa50:	0800aa2f 	.word	0x0800aa2f
 800aa54:	0800ab4b 	.word	0x0800ab4b
 800aa58:	0800a9c1 	.word	0x0800a9c1
 800aa5c:	0800a93b 	.word	0x0800a93b
 800aa60:	4620      	mov	r0, r4
 800aa62:	f7ff fe91 	bl	800a788 <d_template_args>
 800aa66:	462a      	mov	r2, r5
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2104      	movs	r1, #4
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f7fb ff8b 	bl	8006988 <d_make_comp>
 800aa72:	68e3      	ldr	r3, [r4, #12]
 800aa74:	4602      	mov	r2, r0
 800aa76:	e6cc      	b.n	800a812 <d_template_args+0x8a>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	3102      	adds	r1, #2
 800aa7e:	60c1      	str	r1, [r0, #12]
 800aa80:	212f      	movs	r1, #47	; 0x2f
 800aa82:	b005      	add	sp, #20
 800aa84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	f7fb bf7e 	b.w	8006988 <d_make_comp>
 800aa8c:	f1ba 0f00 	cmp.w	sl, #0
 800aa90:	d05b      	beq.n	800ab4a <d_template_args+0x3c2>
 800aa92:	f89a 3000 	ldrb.w	r3, [sl]
 800aa96:	2b70      	cmp	r3, #112	; 0x70
 800aa98:	d001      	beq.n	800aa9e <d_template_args+0x316>
 800aa9a:	2b6d      	cmp	r3, #109	; 0x6d
 800aa9c:	d155      	bne.n	800ab4a <d_template_args+0x3c2>
 800aa9e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d151      	bne.n	800ab4a <d_template_args+0x3c2>
 800aaa6:	68e2      	ldr	r2, [r4, #12]
 800aaa8:	7813      	ldrb	r3, [r2, #0]
 800aaaa:	2b5f      	cmp	r3, #95	; 0x5f
 800aaac:	f000 8336 	beq.w	800b11c <d_template_args+0x994>
 800aab0:	f04f 0a01 	mov.w	sl, #1
 800aab4:	2b4c      	cmp	r3, #76	; 0x4c
 800aab6:	f000 82c1 	beq.w	800b03c <d_template_args+0x8b4>
 800aaba:	2b54      	cmp	r3, #84	; 0x54
 800aabc:	f000 82b0 	beq.w	800b020 <d_template_args+0x898>
 800aac0:	2b73      	cmp	r3, #115	; 0x73
 800aac2:	f000 80ee 	beq.w	800aca2 <d_template_args+0x51a>
 800aac6:	2b66      	cmp	r3, #102	; 0x66
 800aac8:	f000 818c 	beq.w	800ade4 <d_template_args+0x65c>
 800aacc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aad0:	2909      	cmp	r1, #9
 800aad2:	f200 8402 	bhi.w	800b2da <d_template_args+0xb52>
 800aad6:	4620      	mov	r0, r4
 800aad8:	f002 ffb8 	bl	800da4c <d_unqualified_name>
 800aadc:	4681      	mov	r9, r0
 800aade:	b118      	cbz	r0, 800aae8 <d_template_args+0x360>
 800aae0:	68e3      	ldr	r3, [r4, #12]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	2b49      	cmp	r3, #73	; 0x49
 800aae6:	d064      	beq.n	800abb2 <d_template_args+0x42a>
 800aae8:	f1ba 0f00 	cmp.w	sl, #0
 800aaec:	f000 80a3 	beq.w	800ac36 <d_template_args+0x4ae>
 800aaf0:	464b      	mov	r3, r9
 800aaf2:	464a      	mov	r2, r9
 800aaf4:	2137      	movs	r1, #55	; 0x37
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f7fb ff46 	bl	8006988 <d_make_comp>
 800aafc:	4603      	mov	r3, r0
 800aafe:	462a      	mov	r2, r5
 800ab00:	2135      	movs	r1, #53	; 0x35
 800ab02:	4620      	mov	r0, r4
 800ab04:	f7fb ff40 	bl	8006988 <d_make_comp>
 800ab08:	68e3      	ldr	r3, [r4, #12]
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	e681      	b.n	800a812 <d_template_args+0x8a>
 800ab0e:	3203      	adds	r2, #3
 800ab10:	60e2      	str	r2, [r4, #12]
 800ab12:	4620      	mov	r0, r4
 800ab14:	f002 fb1e 	bl	800d154 <d_type>
 800ab18:	4681      	mov	r9, r0
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f002 ff96 	bl	800da4c <d_unqualified_name>
 800ab20:	68e3      	ldr	r3, [r4, #12]
 800ab22:	4682      	mov	sl, r0
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	2b49      	cmp	r3, #73	; 0x49
 800ab28:	d038      	beq.n	800ab9c <d_template_args+0x414>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	464a      	mov	r2, r9
 800ab2e:	4629      	mov	r1, r5
 800ab30:	4620      	mov	r0, r4
 800ab32:	f7fb ff29 	bl	8006988 <d_make_comp>
 800ab36:	4602      	mov	r2, r0
 800ab38:	e740      	b.n	800a9bc <d_template_args+0x234>
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7fc f8ae 	bl	8006c9c <d_compact_number>
 800ab40:	3001      	adds	r0, #1
 800ab42:	f47f aec1 	bne.w	800a8c8 <d_template_args+0x140>
 800ab46:	4602      	mov	r2, r0
 800ab48:	e738      	b.n	800a9bc <d_template_args+0x234>
 800ab4a:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 800ab4e:	68e2      	ldr	r2, [r4, #12]
 800ab50:	d01e      	beq.n	800ab90 <d_template_args+0x408>
 800ab52:	7813      	ldrb	r3, [r2, #0]
 800ab54:	f04f 0a00 	mov.w	sl, #0
 800ab58:	e7ac      	b.n	800aab4 <d_template_args+0x32c>
 800ab5a:	2b6f      	cmp	r3, #111	; 0x6f
 800ab5c:	d034      	beq.n	800abc8 <d_template_args+0x440>
 800ab5e:	2b69      	cmp	r3, #105	; 0x69
 800ab60:	f040 8423 	bne.w	800b3aa <d_template_args+0xc22>
 800ab64:	7893      	ldrb	r3, [r2, #2]
 800ab66:	2b6c      	cmp	r3, #108	; 0x6c
 800ab68:	f47f ae8b 	bne.w	800a882 <d_template_args+0xfa>
 800ab6c:	2500      	movs	r5, #0
 800ab6e:	68e3      	ldr	r3, [r4, #12]
 800ab70:	2145      	movs	r1, #69	; 0x45
 800ab72:	3302      	adds	r3, #2
 800ab74:	60e3      	str	r3, [r4, #12]
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fc7c 	bl	800b474 <d_exprlist>
 800ab7c:	462a      	mov	r2, r5
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2130      	movs	r1, #48	; 0x30
 800ab82:	4620      	mov	r0, r4
 800ab84:	f7fb ff00 	bl	8006988 <d_make_comp>
 800ab88:	68e3      	ldr	r3, [r4, #12]
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	e641      	b.n	800a812 <d_template_args+0x8a>
 800ab8e:	68e2      	ldr	r2, [r4, #12]
 800ab90:	7813      	ldrb	r3, [r2, #0]
 800ab92:	2b5f      	cmp	r3, #95	; 0x5f
 800ab94:	d048      	beq.n	800ac28 <d_template_args+0x4a0>
 800ab96:	f04f 0a00 	mov.w	sl, #0
 800ab9a:	e78b      	b.n	800aab4 <d_template_args+0x32c>
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f7ff fdf3 	bl	800a788 <d_template_args>
 800aba2:	4652      	mov	r2, sl
 800aba4:	4603      	mov	r3, r0
 800aba6:	2104      	movs	r1, #4
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7fb feed 	bl	8006988 <d_make_comp>
 800abae:	4603      	mov	r3, r0
 800abb0:	e7bc      	b.n	800ab2c <d_template_args+0x3a4>
 800abb2:	4620      	mov	r0, r4
 800abb4:	f7ff fde8 	bl	800a788 <d_template_args>
 800abb8:	464a      	mov	r2, r9
 800abba:	4603      	mov	r3, r0
 800abbc:	2104      	movs	r1, #4
 800abbe:	4620      	mov	r0, r4
 800abc0:	f7fb fee2 	bl	8006988 <d_make_comp>
 800abc4:	4681      	mov	r9, r0
 800abc6:	e78f      	b.n	800aae8 <d_template_args+0x360>
 800abc8:	7893      	ldrb	r3, [r2, #2]
 800abca:	2b6e      	cmp	r3, #110	; 0x6e
 800abcc:	f47f ae59 	bne.w	800a882 <d_template_args+0xfa>
 800abd0:	3203      	adds	r2, #3
 800abd2:	60e2      	str	r2, [r4, #12]
 800abd4:	e610      	b.n	800a7f8 <d_template_args+0x70>
 800abd6:	1cd3      	adds	r3, r2, #3
 800abd8:	60e3      	str	r3, [r4, #12]
 800abda:	78d3      	ldrb	r3, [r2, #3]
 800abdc:	2b4c      	cmp	r3, #76	; 0x4c
 800abde:	f000 825b 	beq.w	800b098 <d_template_args+0x910>
 800abe2:	2b54      	cmp	r3, #84	; 0x54
 800abe4:	f000 8275 	beq.w	800b0d2 <d_template_args+0x94a>
 800abe8:	2b73      	cmp	r3, #115	; 0x73
 800abea:	f000 8129 	beq.w	800ae40 <d_template_args+0x6b8>
 800abee:	2b66      	cmp	r3, #102	; 0x66
 800abf0:	f000 81c2 	beq.w	800af78 <d_template_args+0x7f0>
 800abf4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800abf8:	2909      	cmp	r1, #9
 800abfa:	f200 83e3 	bhi.w	800b3c4 <d_template_args+0xc3c>
 800abfe:	4620      	mov	r0, r4
 800ac00:	f002 ff24 	bl	800da4c <d_unqualified_name>
 800ac04:	4605      	mov	r5, r0
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f000 8244 	beq.w	800b094 <d_template_args+0x90c>
 800ac0c:	68e3      	ldr	r3, [r4, #12]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	2b49      	cmp	r3, #73	; 0x49
 800ac12:	f000 8286 	beq.w	800b122 <d_template_args+0x99a>
 800ac16:	4602      	mov	r2, r0
 800ac18:	2300      	movs	r3, #0
 800ac1a:	2149      	movs	r1, #73	; 0x49
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f7fb feb3 	bl	8006988 <d_make_comp>
 800ac22:	68e3      	ldr	r3, [r4, #12]
 800ac24:	4602      	mov	r2, r0
 800ac26:	e5f4      	b.n	800a812 <d_template_args+0x8a>
 800ac28:	3201      	adds	r2, #1
 800ac2a:	60e2      	str	r2, [r4, #12]
 800ac2c:	2145      	movs	r1, #69	; 0x45
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 fc20 	bl	800b474 <d_exprlist>
 800ac34:	4681      	mov	r9, r0
 800ac36:	464b      	mov	r3, r9
 800ac38:	e761      	b.n	800aafe <d_template_args+0x376>
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f002 fa8a 	bl	800d154 <d_type>
 800ac40:	4603      	mov	r3, r0
 800ac42:	e75c      	b.n	800aafe <d_template_args+0x376>
 800ac44:	462a      	mov	r2, r5
 800ac46:	68e3      	ldr	r3, [r4, #12]
 800ac48:	e5e3      	b.n	800a812 <d_template_args+0x8a>
 800ac4a:	bf00      	nop
 800ac4c:	08013ca8 	.word	0x08013ca8
 800ac50:	080139a0 	.word	0x080139a0
 800ac54:	08013998 	.word	0x08013998
 800ac58:	08013ab4 	.word	0x08013ab4
 800ac5c:	08013ab8 	.word	0x08013ab8
 800ac60:	2145      	movs	r1, #69	; 0x45
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 fc06 	bl	800b474 <d_exprlist>
 800ac68:	4682      	mov	sl, r0
 800ac6a:	e6d1      	b.n	800aa10 <d_template_args+0x288>
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800ac72:	2a01      	cmp	r2, #1
 800ac74:	d903      	bls.n	800ac7e <d_template_args+0x4f6>
 800ac76:	3b72      	subs	r3, #114	; 0x72
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	f63f aea9 	bhi.w	800a9d0 <d_template_args+0x248>
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f002 fa68 	bl	800d154 <d_type>
 800ac84:	4681      	mov	r9, r0
 800ac86:	e6a7      	b.n	800a9d8 <d_template_args+0x250>
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f002 f891 	bl	800cdb0 <d_expression_1>
 800ac8e:	4681      	mov	r9, r0
 800ac90:	4620      	mov	r0, r4
 800ac92:	f002 f88d 	bl	800cdb0 <d_expression_1>
 800ac96:	4682      	mov	sl, r0
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f002 f889 	bl	800cdb0 <d_expression_1>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	e67a      	b.n	800a998 <d_template_args+0x210>
 800aca2:	7853      	ldrb	r3, [r2, #1]
 800aca4:	2b72      	cmp	r3, #114	; 0x72
 800aca6:	f000 8266 	beq.w	800b176 <d_template_args+0x9ee>
 800acaa:	2b70      	cmp	r3, #112	; 0x70
 800acac:	f000 82a3 	beq.w	800b1f6 <d_template_args+0xa6e>
 800acb0:	4620      	mov	r0, r4
 800acb2:	f002 fe0b 	bl	800d8cc <d_operator_name>
 800acb6:	4681      	mov	r9, r0
 800acb8:	2800      	cmp	r0, #0
 800acba:	f43f af15 	beq.w	800aae8 <d_template_args+0x360>
 800acbe:	7803      	ldrb	r3, [r0, #0]
 800acc0:	2b31      	cmp	r3, #49	; 0x31
 800acc2:	f000 81c0 	beq.w	800b046 <d_template_args+0x8be>
 800acc6:	2b32      	cmp	r3, #50	; 0x32
 800acc8:	f040 8180 	bne.w	800afcc <d_template_args+0x844>
 800accc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	f200 80ae 	bhi.w	800ae32 <d_template_args+0x6aa>
 800acd6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800acda:	0004      	.short	0x0004
 800acdc:	004e0181 	.word	0x004e0181
 800ace0:	000c      	.short	0x000c
 800ace2:	464a      	mov	r2, r9
 800ace4:	2300      	movs	r3, #0
 800ace6:	2134      	movs	r1, #52	; 0x34
 800ace8:	4620      	mov	r0, r4
 800acea:	f7fb fe4d 	bl	8006988 <d_make_comp>
 800acee:	4681      	mov	r9, r0
 800acf0:	e6fa      	b.n	800aae8 <d_template_args+0x360>
 800acf2:	f04f 0b00 	mov.w	fp, #0
 800acf6:	49cd      	ldr	r1, [pc, #820]	; (800b02c <d_template_args+0x8a4>)
 800acf8:	4658      	mov	r0, fp
 800acfa:	f003 ff9d 	bl	800ec38 <strcmp>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f000 82a3 	beq.w	800b24a <d_template_args+0xac2>
 800ad04:	f89b 2000 	ldrb.w	r2, [fp]
 800ad08:	2a6e      	cmp	r2, #110	; 0x6e
 800ad0a:	f040 8092 	bne.w	800ae32 <d_template_args+0x6aa>
 800ad0e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800ad12:	2b77      	cmp	r3, #119	; 0x77
 800ad14:	d002      	beq.n	800ad1c <d_template_args+0x594>
 800ad16:	2b61      	cmp	r3, #97	; 0x61
 800ad18:	f040 808b 	bne.w	800ae32 <d_template_args+0x6aa>
 800ad1c:	215f      	movs	r1, #95	; 0x5f
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 fba8 	bl	800b474 <d_exprlist>
 800ad24:	9001      	str	r0, [sp, #4]
 800ad26:	4620      	mov	r0, r4
 800ad28:	f002 fa14 	bl	800d154 <d_type>
 800ad2c:	68e3      	ldr	r3, [r4, #12]
 800ad2e:	4683      	mov	fp, r0
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	2a45      	cmp	r2, #69	; 0x45
 800ad34:	f000 8317 	beq.w	800b366 <d_template_args+0xbde>
 800ad38:	2a70      	cmp	r2, #112	; 0x70
 800ad3a:	f000 8309 	beq.w	800b350 <d_template_args+0xbc8>
 800ad3e:	2a69      	cmp	r2, #105	; 0x69
 800ad40:	d177      	bne.n	800ae32 <d_template_args+0x6aa>
 800ad42:	785b      	ldrb	r3, [r3, #1]
 800ad44:	2b6c      	cmp	r3, #108	; 0x6c
 800ad46:	d174      	bne.n	800ae32 <d_template_args+0x6aa>
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f002 f831 	bl	800cdb0 <d_expression_1>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	465a      	mov	r2, fp
 800ad52:	213a      	movs	r1, #58	; 0x3a
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7fb fe17 	bl	8006988 <d_make_comp>
 800ad5a:	9a01      	ldr	r2, [sp, #4]
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2139      	movs	r1, #57	; 0x39
 800ad60:	4620      	mov	r0, r4
 800ad62:	f7fb fe11 	bl	8006988 <d_make_comp>
 800ad66:	464a      	mov	r2, r9
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2138      	movs	r1, #56	; 0x38
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f7fb fe0b 	bl	8006988 <d_make_comp>
 800ad72:	4681      	mov	r9, r0
 800ad74:	e6b8      	b.n	800aae8 <d_template_args+0x360>
 800ad76:	f04f 0b00 	mov.w	fp, #0
 800ad7a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ad7e:	6812      	ldr	r2, [r2, #0]
 800ad80:	7851      	ldrb	r1, [r2, #1]
 800ad82:	2963      	cmp	r1, #99	; 0x63
 800ad84:	f000 8296 	beq.w	800b2b4 <d_template_args+0xb2c>
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f002 f811 	bl	800cdb0 <d_expression_1>
 800ad8e:	9001      	str	r0, [sp, #4]
 800ad90:	49a7      	ldr	r1, [pc, #668]	; (800b030 <d_template_args+0x8a8>)
 800ad92:	4658      	mov	r0, fp
 800ad94:	f003 ff50 	bl	800ec38 <strcmp>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f000 8244 	beq.w	800b226 <d_template_args+0xa9e>
 800ad9e:	49a5      	ldr	r1, [pc, #660]	; (800b034 <d_template_args+0x8ac>)
 800ada0:	4658      	mov	r0, fp
 800ada2:	f003 ff49 	bl	800ec38 <strcmp>
 800ada6:	b130      	cbz	r0, 800adb6 <d_template_args+0x62e>
 800ada8:	4658      	mov	r0, fp
 800adaa:	49a3      	ldr	r1, [pc, #652]	; (800b038 <d_template_args+0x8b0>)
 800adac:	f003 ff44 	bl	800ec38 <strcmp>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	f040 828d 	bne.w	800b2d0 <d_template_args+0xb48>
 800adb6:	4620      	mov	r0, r4
 800adb8:	f002 fe48 	bl	800da4c <d_unqualified_name>
 800adbc:	68e3      	ldr	r3, [r4, #12]
 800adbe:	4683      	mov	fp, r0
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b49      	cmp	r3, #73	; 0x49
 800adc4:	f000 833e 	beq.w	800b444 <d_template_args+0xcbc>
 800adc8:	465b      	mov	r3, fp
 800adca:	9a01      	ldr	r2, [sp, #4]
 800adcc:	2137      	movs	r1, #55	; 0x37
 800adce:	4620      	mov	r0, r4
 800add0:	f7fb fdda 	bl	8006988 <d_make_comp>
 800add4:	464a      	mov	r2, r9
 800add6:	4603      	mov	r3, r0
 800add8:	2136      	movs	r1, #54	; 0x36
 800adda:	4620      	mov	r0, r4
 800addc:	f7fb fdd4 	bl	8006988 <d_make_comp>
 800ade0:	4681      	mov	r9, r0
 800ade2:	e681      	b.n	800aae8 <d_template_args+0x360>
 800ade4:	7853      	ldrb	r3, [r2, #1]
 800ade6:	2b70      	cmp	r3, #112	; 0x70
 800ade8:	f47f af62 	bne.w	800acb0 <d_template_args+0x528>
 800adec:	1c93      	adds	r3, r2, #2
 800adee:	60e3      	str	r3, [r4, #12]
 800adf0:	7893      	ldrb	r3, [r2, #2]
 800adf2:	2b54      	cmp	r3, #84	; 0x54
 800adf4:	f040 81b7 	bne.w	800b166 <d_template_args+0x9de>
 800adf8:	3203      	adds	r2, #3
 800adfa:	60e2      	str	r2, [r4, #12]
 800adfc:	2000      	movs	r0, #0
 800adfe:	6963      	ldr	r3, [r4, #20]
 800ae00:	69a2      	ldr	r2, [r4, #24]
 800ae02:	4293      	cmp	r3, r2
 800ae04:	da15      	bge.n	800ae32 <d_template_args+0x6aa>
 800ae06:	6922      	ldr	r2, [r4, #16]
 800ae08:	1c59      	adds	r1, r3, #1
 800ae0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ae0e:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 800ae12:	6161      	str	r1, [r4, #20]
 800ae14:	f43f ae68 	beq.w	800aae8 <d_template_args+0x360>
 800ae18:	2106      	movs	r1, #6
 800ae1a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800ae1e:	f8c9 0004 	str.w	r0, [r9, #4]
 800ae22:	e661      	b.n	800aae8 <d_template_args+0x360>
 800ae24:	2200      	movs	r2, #0
 800ae26:	e4f4      	b.n	800a812 <d_template_args+0x8a>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f001 ffc1 	bl	800cdb0 <d_expression_1>
 800ae2e:	4682      	mov	sl, r0
 800ae30:	e5ee      	b.n	800aa10 <d_template_args+0x288>
 800ae32:	f04f 0900 	mov.w	r9, #0
 800ae36:	e657      	b.n	800aae8 <d_template_args+0x360>
 800ae38:	3301      	adds	r3, #1
 800ae3a:	60e3      	str	r3, [r4, #12]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e5ab      	b.n	800a998 <d_template_args+0x210>
 800ae40:	7913      	ldrb	r3, [r2, #4]
 800ae42:	2b72      	cmp	r3, #114	; 0x72
 800ae44:	f000 81ad 	beq.w	800b1a2 <d_template_args+0xa1a>
 800ae48:	2b70      	cmp	r3, #112	; 0x70
 800ae4a:	f000 8223 	beq.w	800b294 <d_template_args+0xb0c>
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f002 fd3c 	bl	800d8cc <d_operator_name>
 800ae54:	4681      	mov	r9, r0
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f000 811c 	beq.w	800b094 <d_template_args+0x90c>
 800ae5c:	7803      	ldrb	r3, [r0, #0]
 800ae5e:	2b31      	cmp	r3, #49	; 0x31
 800ae60:	f000 813b 	beq.w	800b0da <d_template_args+0x952>
 800ae64:	2b32      	cmp	r3, #50	; 0x32
 800ae66:	f040 811b 	bne.w	800b0a0 <d_template_args+0x918>
 800ae6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ae6e:	2b03      	cmp	r3, #3
 800ae70:	f200 8110 	bhi.w	800b094 <d_template_args+0x90c>
 800ae74:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae78:	011b0004 	.word	0x011b0004
 800ae7c:	000b004b 	.word	0x000b004b
 800ae80:	464a      	mov	r2, r9
 800ae82:	2300      	movs	r3, #0
 800ae84:	2134      	movs	r1, #52	; 0x34
 800ae86:	4620      	mov	r0, r4
 800ae88:	f7fb fd7e 	bl	8006988 <d_make_comp>
 800ae8c:	e6c3      	b.n	800ac16 <d_template_args+0x48e>
 800ae8e:	2500      	movs	r5, #0
 800ae90:	4966      	ldr	r1, [pc, #408]	; (800b02c <d_template_args+0x8a4>)
 800ae92:	4628      	mov	r0, r5
 800ae94:	f003 fed0 	bl	800ec38 <strcmp>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f000 81ca 	beq.w	800b232 <d_template_args+0xaaa>
 800ae9e:	782b      	ldrb	r3, [r5, #0]
 800aea0:	2b6e      	cmp	r3, #110	; 0x6e
 800aea2:	f040 80f7 	bne.w	800b094 <d_template_args+0x90c>
 800aea6:	786b      	ldrb	r3, [r5, #1]
 800aea8:	2b77      	cmp	r3, #119	; 0x77
 800aeaa:	d002      	beq.n	800aeb2 <d_template_args+0x72a>
 800aeac:	2b61      	cmp	r3, #97	; 0x61
 800aeae:	f040 80f1 	bne.w	800b094 <d_template_args+0x90c>
 800aeb2:	215f      	movs	r1, #95	; 0x5f
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f000 fadd 	bl	800b474 <d_exprlist>
 800aeba:	4605      	mov	r5, r0
 800aebc:	4620      	mov	r0, r4
 800aebe:	f002 f949 	bl	800d154 <d_type>
 800aec2:	68e3      	ldr	r3, [r4, #12]
 800aec4:	4682      	mov	sl, r0
 800aec6:	781a      	ldrb	r2, [r3, #0]
 800aec8:	2a45      	cmp	r2, #69	; 0x45
 800aeca:	f000 82b7 	beq.w	800b43c <d_template_args+0xcb4>
 800aece:	2a70      	cmp	r2, #112	; 0x70
 800aed0:	f000 82a9 	beq.w	800b426 <d_template_args+0xc9e>
 800aed4:	2a69      	cmp	r2, #105	; 0x69
 800aed6:	f040 80dd 	bne.w	800b094 <d_template_args+0x90c>
 800aeda:	785b      	ldrb	r3, [r3, #1]
 800aedc:	2b6c      	cmp	r3, #108	; 0x6c
 800aede:	f040 80d9 	bne.w	800b094 <d_template_args+0x90c>
 800aee2:	4620      	mov	r0, r4
 800aee4:	f001 ff64 	bl	800cdb0 <d_expression_1>
 800aee8:	4603      	mov	r3, r0
 800aeea:	4652      	mov	r2, sl
 800aeec:	213a      	movs	r1, #58	; 0x3a
 800aeee:	4620      	mov	r0, r4
 800aef0:	f7fb fd4a 	bl	8006988 <d_make_comp>
 800aef4:	462a      	mov	r2, r5
 800aef6:	4603      	mov	r3, r0
 800aef8:	2139      	movs	r1, #57	; 0x39
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7fb fd44 	bl	8006988 <d_make_comp>
 800af00:	464a      	mov	r2, r9
 800af02:	4603      	mov	r3, r0
 800af04:	2138      	movs	r1, #56	; 0x38
 800af06:	4620      	mov	r0, r4
 800af08:	f7fb fd3e 	bl	8006988 <d_make_comp>
 800af0c:	e683      	b.n	800ac16 <d_template_args+0x48e>
 800af0e:	2500      	movs	r5, #0
 800af10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	785a      	ldrb	r2, [r3, #1]
 800af18:	2a63      	cmp	r2, #99	; 0x63
 800af1a:	f000 81a8 	beq.w	800b26e <d_template_args+0xae6>
 800af1e:	4620      	mov	r0, r4
 800af20:	f001 ff46 	bl	800cdb0 <d_expression_1>
 800af24:	4682      	mov	sl, r0
 800af26:	4942      	ldr	r1, [pc, #264]	; (800b030 <d_template_args+0x8a8>)
 800af28:	4628      	mov	r0, r5
 800af2a:	f003 fe85 	bl	800ec38 <strcmp>
 800af2e:	2800      	cmp	r0, #0
 800af30:	f000 8197 	beq.w	800b262 <d_template_args+0xada>
 800af34:	493f      	ldr	r1, [pc, #252]	; (800b034 <d_template_args+0x8ac>)
 800af36:	4628      	mov	r0, r5
 800af38:	f003 fe7e 	bl	800ec38 <strcmp>
 800af3c:	b130      	cbz	r0, 800af4c <d_template_args+0x7c4>
 800af3e:	4628      	mov	r0, r5
 800af40:	493d      	ldr	r1, [pc, #244]	; (800b038 <d_template_args+0x8b0>)
 800af42:	f003 fe79 	bl	800ec38 <strcmp>
 800af46:	2800      	cmp	r0, #0
 800af48:	f040 822a 	bne.w	800b3a0 <d_template_args+0xc18>
 800af4c:	4620      	mov	r0, r4
 800af4e:	f002 fd7d 	bl	800da4c <d_unqualified_name>
 800af52:	68e3      	ldr	r3, [r4, #12]
 800af54:	4605      	mov	r5, r0
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b49      	cmp	r3, #73	; 0x49
 800af5a:	f000 820b 	beq.w	800b374 <d_template_args+0xbec>
 800af5e:	462b      	mov	r3, r5
 800af60:	4652      	mov	r2, sl
 800af62:	2137      	movs	r1, #55	; 0x37
 800af64:	4620      	mov	r0, r4
 800af66:	f7fb fd0f 	bl	8006988 <d_make_comp>
 800af6a:	464a      	mov	r2, r9
 800af6c:	4603      	mov	r3, r0
 800af6e:	2136      	movs	r1, #54	; 0x36
 800af70:	4620      	mov	r0, r4
 800af72:	f7fb fd09 	bl	8006988 <d_make_comp>
 800af76:	e64e      	b.n	800ac16 <d_template_args+0x48e>
 800af78:	7913      	ldrb	r3, [r2, #4]
 800af7a:	2b70      	cmp	r3, #112	; 0x70
 800af7c:	f47f af67 	bne.w	800ae4e <d_template_args+0x6c6>
 800af80:	1d53      	adds	r3, r2, #5
 800af82:	60e3      	str	r3, [r4, #12]
 800af84:	7953      	ldrb	r3, [r2, #5]
 800af86:	2b54      	cmp	r3, #84	; 0x54
 800af88:	d17e      	bne.n	800b088 <d_template_args+0x900>
 800af8a:	3206      	adds	r2, #6
 800af8c:	60e2      	str	r2, [r4, #12]
 800af8e:	2500      	movs	r5, #0
 800af90:	6963      	ldr	r3, [r4, #20]
 800af92:	69a2      	ldr	r2, [r4, #24]
 800af94:	4293      	cmp	r3, r2
 800af96:	da7d      	bge.n	800b094 <d_template_args+0x90c>
 800af98:	6921      	ldr	r1, [r4, #16]
 800af9a:	1c5a      	adds	r2, r3, #1
 800af9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800afa0:	6162      	str	r2, [r4, #20]
 800afa2:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800afa6:	f000 8238 	beq.w	800b41a <d_template_args+0xc92>
 800afaa:	2006      	movs	r0, #6
 800afac:	f801 0023 	strb.w	r0, [r1, r3, lsl #2]
 800afb0:	4610      	mov	r0, r2
 800afb2:	6055      	str	r5, [r2, #4]
 800afb4:	e62f      	b.n	800ac16 <d_template_args+0x48e>
 800afb6:	4620      	mov	r0, r4
 800afb8:	f7ff fbe6 	bl	800a788 <d_template_args>
 800afbc:	4652      	mov	r2, sl
 800afbe:	4603      	mov	r3, r0
 800afc0:	2104      	movs	r1, #4
 800afc2:	4620      	mov	r0, r4
 800afc4:	f7fb fce0 	bl	8006988 <d_make_comp>
 800afc8:	4682      	mov	sl, r0
 800afca:	e521      	b.n	800aa10 <d_template_args+0x288>
 800afcc:	2b33      	cmp	r3, #51	; 0x33
 800afce:	f47f af30 	bne.w	800ae32 <d_template_args+0x6aa>
 800afd2:	68e3      	ldr	r3, [r4, #12]
 800afd4:	781a      	ldrb	r2, [r3, #0]
 800afd6:	2a5f      	cmp	r2, #95	; 0x5f
 800afd8:	f000 81a2 	beq.w	800b320 <d_template_args+0xb98>
 800afdc:	f04f 0b00 	mov.w	fp, #0
 800afe0:	4620      	mov	r0, r4
 800afe2:	f001 fee5 	bl	800cdb0 <d_expression_1>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f1bb 0f00 	cmp.w	fp, #0
 800afec:	d005      	beq.n	800affa <d_template_args+0x872>
 800afee:	4602      	mov	r2, r0
 800aff0:	2137      	movs	r1, #55	; 0x37
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7fb fcc8 	bl	8006988 <d_make_comp>
 800aff8:	4603      	mov	r3, r0
 800affa:	464a      	mov	r2, r9
 800affc:	2135      	movs	r1, #53	; 0x35
 800affe:	4620      	mov	r0, r4
 800b000:	f7fb fcc2 	bl	8006988 <d_make_comp>
 800b004:	4681      	mov	r9, r0
 800b006:	e56f      	b.n	800aae8 <d_template_args+0x360>
 800b008:	785a      	ldrb	r2, [r3, #1]
 800b00a:	2a69      	cmp	r2, #105	; 0x69
 800b00c:	f47f af0a 	bne.w	800ae24 <d_template_args+0x69c>
 800b010:	3302      	adds	r3, #2
 800b012:	60e3      	str	r3, [r4, #12]
 800b014:	2145      	movs	r1, #69	; 0x45
 800b016:	4620      	mov	r0, r4
 800b018:	f000 fa2c 	bl	800b474 <d_exprlist>
 800b01c:	4603      	mov	r3, r0
 800b01e:	e4bb      	b.n	800a998 <d_template_args+0x210>
 800b020:	4620      	mov	r0, r4
 800b022:	f7fb fe53 	bl	8006ccc <d_template_param>
 800b026:	4681      	mov	r9, r0
 800b028:	e55e      	b.n	800aae8 <d_template_args+0x360>
 800b02a:	bf00      	nop
 800b02c:	080139a0 	.word	0x080139a0
 800b030:	08013998 	.word	0x08013998
 800b034:	08013ab4 	.word	0x08013ab4
 800b038:	08013ab8 	.word	0x08013ab8
 800b03c:	4620      	mov	r0, r4
 800b03e:	f003 fb81 	bl	800e744 <d_expr_primary>
 800b042:	4681      	mov	r9, r0
 800b044:	e550      	b.n	800aae8 <d_template_args+0x360>
 800b046:	6843      	ldr	r3, [r0, #4]
 800b048:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b04a:	689a      	ldr	r2, [r3, #8]
 800b04c:	f8d3 b000 	ldr.w	fp, [r3]
 800b050:	3a02      	subs	r2, #2
 800b052:	440a      	add	r2, r1
 800b054:	6322      	str	r2, [r4, #48]	; 0x30
 800b056:	4658      	mov	r0, fp
 800b058:	49d0      	ldr	r1, [pc, #832]	; (800b39c <d_template_args+0xc14>)
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	f003 fdec 	bl	800ec38 <strcmp>
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	2800      	cmp	r0, #0
 800b064:	f000 8111 	beq.w	800b28a <d_template_args+0xb02>
 800b068:	68da      	ldr	r2, [r3, #12]
 800b06a:	2a03      	cmp	r2, #3
 800b06c:	f63f aee1 	bhi.w	800ae32 <d_template_args+0x6aa>
 800b070:	a301      	add	r3, pc, #4	; (adr r3, 800b078 <d_template_args+0x8f0>)
 800b072:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800b076:	bf00      	nop
 800b078:	0800ace3 	.word	0x0800ace3
 800b07c:	0800b137 	.word	0x0800b137
 800b080:	0800ad7b 	.word	0x0800ad7b
 800b084:	0800acf7 	.word	0x0800acf7
 800b088:	4620      	mov	r0, r4
 800b08a:	f7fb fe07 	bl	8006c9c <d_compact_number>
 800b08e:	1c45      	adds	r5, r0, #1
 800b090:	f47f af7e 	bne.w	800af90 <d_template_args+0x808>
 800b094:	2000      	movs	r0, #0
 800b096:	e5be      	b.n	800ac16 <d_template_args+0x48e>
 800b098:	4620      	mov	r0, r4
 800b09a:	f003 fb53 	bl	800e744 <d_expr_primary>
 800b09e:	e5ba      	b.n	800ac16 <d_template_args+0x48e>
 800b0a0:	2b33      	cmp	r3, #51	; 0x33
 800b0a2:	d1f7      	bne.n	800b094 <d_template_args+0x90c>
 800b0a4:	68e3      	ldr	r3, [r4, #12]
 800b0a6:	781a      	ldrb	r2, [r3, #0]
 800b0a8:	2a5f      	cmp	r2, #95	; 0x5f
 800b0aa:	f000 816e 	beq.w	800b38a <d_template_args+0xc02>
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f001 fe7d 	bl	800cdb0 <d_expression_1>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	b12d      	cbz	r5, 800b0c6 <d_template_args+0x93e>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	2137      	movs	r1, #55	; 0x37
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7fb fc62 	bl	8006988 <d_make_comp>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	464a      	mov	r2, r9
 800b0c8:	2135      	movs	r1, #53	; 0x35
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7fb fc5c 	bl	8006988 <d_make_comp>
 800b0d0:	e5a1      	b.n	800ac16 <d_template_args+0x48e>
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7fb fdfa 	bl	8006ccc <d_template_param>
 800b0d8:	e59d      	b.n	800ac16 <d_template_args+0x48e>
 800b0da:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b0de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b0e0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b0e4:	f8da 5000 	ldr.w	r5, [sl]
 800b0e8:	3b02      	subs	r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	6323      	str	r3, [r4, #48]	; 0x30
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	49aa      	ldr	r1, [pc, #680]	; (800b39c <d_template_args+0xc14>)
 800b0f2:	f003 fda1 	bl	800ec38 <strcmp>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f000 80d8 	beq.w	800b2ac <d_template_args+0xb24>
 800b0fc:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b100:	2b03      	cmp	r3, #3
 800b102:	d8c7      	bhi.n	800b094 <d_template_args+0x90c>
 800b104:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <d_template_args+0x984>)
 800b106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800ae81 	.word	0x0800ae81
 800b110:	0800b1cf 	.word	0x0800b1cf
 800b114:	0800af11 	.word	0x0800af11
 800b118:	0800ae91 	.word	0x0800ae91
 800b11c:	3201      	adds	r2, #1
 800b11e:	60e2      	str	r2, [r4, #12]
 800b120:	e517      	b.n	800ab52 <d_template_args+0x3ca>
 800b122:	4620      	mov	r0, r4
 800b124:	f7ff fb30 	bl	800a788 <d_template_args>
 800b128:	462a      	mov	r2, r5
 800b12a:	4603      	mov	r3, r0
 800b12c:	2104      	movs	r1, #4
 800b12e:	4620      	mov	r0, r4
 800b130:	f7fb fc2a 	bl	8006988 <d_make_comp>
 800b134:	e56f      	b.n	800ac16 <d_template_args+0x48e>
 800b136:	f1bb 0f00 	cmp.w	fp, #0
 800b13a:	f43f af4f 	beq.w	800afdc <d_template_args+0x854>
 800b13e:	f89b 2000 	ldrb.w	r2, [fp]
 800b142:	2a70      	cmp	r2, #112	; 0x70
 800b144:	d002      	beq.n	800b14c <d_template_args+0x9c4>
 800b146:	2a6d      	cmp	r2, #109	; 0x6d
 800b148:	f47f af48 	bne.w	800afdc <d_template_args+0x854>
 800b14c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800b150:	4293      	cmp	r3, r2
 800b152:	f47f af43 	bne.w	800afdc <d_template_args+0x854>
 800b156:	68e3      	ldr	r3, [r4, #12]
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	2a5f      	cmp	r2, #95	; 0x5f
 800b15c:	f000 8107 	beq.w	800b36e <d_template_args+0xbe6>
 800b160:	f04f 0b01 	mov.w	fp, #1
 800b164:	e73c      	b.n	800afe0 <d_template_args+0x858>
 800b166:	4620      	mov	r0, r4
 800b168:	f7fb fd98 	bl	8006c9c <d_compact_number>
 800b16c:	3001      	adds	r0, #1
 800b16e:	f47f ae46 	bne.w	800adfe <d_template_args+0x676>
 800b172:	4681      	mov	r9, r0
 800b174:	e4b8      	b.n	800aae8 <d_template_args+0x360>
 800b176:	3202      	adds	r2, #2
 800b178:	60e2      	str	r2, [r4, #12]
 800b17a:	4620      	mov	r0, r4
 800b17c:	f001 ffea 	bl	800d154 <d_type>
 800b180:	4681      	mov	r9, r0
 800b182:	4620      	mov	r0, r4
 800b184:	f002 fc62 	bl	800da4c <d_unqualified_name>
 800b188:	68e3      	ldr	r3, [r4, #12]
 800b18a:	4683      	mov	fp, r0
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b49      	cmp	r3, #73	; 0x49
 800b190:	d03e      	beq.n	800b210 <d_template_args+0xa88>
 800b192:	4603      	mov	r3, r0
 800b194:	464a      	mov	r2, r9
 800b196:	2101      	movs	r1, #1
 800b198:	4620      	mov	r0, r4
 800b19a:	f7fb fbf5 	bl	8006988 <d_make_comp>
 800b19e:	4681      	mov	r9, r0
 800b1a0:	e4a2      	b.n	800aae8 <d_template_args+0x360>
 800b1a2:	3205      	adds	r2, #5
 800b1a4:	60e2      	str	r2, [r4, #12]
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f001 ffd4 	bl	800d154 <d_type>
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f002 fc4c 	bl	800da4c <d_unqualified_name>
 800b1b4:	68e3      	ldr	r3, [r4, #12]
 800b1b6:	4681      	mov	r9, r0
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	2b49      	cmp	r3, #73	; 0x49
 800b1bc:	f000 80b8 	beq.w	800b330 <d_template_args+0xba8>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f7fb fbde 	bl	8006988 <d_make_comp>
 800b1cc:	e523      	b.n	800ac16 <d_template_args+0x48e>
 800b1ce:	2d00      	cmp	r5, #0
 800b1d0:	f43f af6d 	beq.w	800b0ae <d_template_args+0x926>
 800b1d4:	782b      	ldrb	r3, [r5, #0]
 800b1d6:	2b70      	cmp	r3, #112	; 0x70
 800b1d8:	d002      	beq.n	800b1e0 <d_template_args+0xa58>
 800b1da:	2b6d      	cmp	r3, #109	; 0x6d
 800b1dc:	f47f af67 	bne.w	800b0ae <d_template_args+0x926>
 800b1e0:	786a      	ldrb	r2, [r5, #1]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	f47f af63 	bne.w	800b0ae <d_template_args+0x926>
 800b1e8:	68e3      	ldr	r3, [r4, #12]
 800b1ea:	781a      	ldrb	r2, [r3, #0]
 800b1ec:	2a5f      	cmp	r2, #95	; 0x5f
 800b1ee:	f000 8117 	beq.w	800b420 <d_template_args+0xc98>
 800b1f2:	2501      	movs	r5, #1
 800b1f4:	e75c      	b.n	800b0b0 <d_template_args+0x928>
 800b1f6:	3202      	adds	r2, #2
 800b1f8:	60e2      	str	r2, [r4, #12]
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f001 fdd8 	bl	800cdb0 <d_expression_1>
 800b200:	2300      	movs	r3, #0
 800b202:	4602      	mov	r2, r0
 800b204:	2149      	movs	r1, #73	; 0x49
 800b206:	4620      	mov	r0, r4
 800b208:	f7fb fbbe 	bl	8006988 <d_make_comp>
 800b20c:	4681      	mov	r9, r0
 800b20e:	e46b      	b.n	800aae8 <d_template_args+0x360>
 800b210:	4620      	mov	r0, r4
 800b212:	f7ff fab9 	bl	800a788 <d_template_args>
 800b216:	465a      	mov	r2, fp
 800b218:	4603      	mov	r3, r0
 800b21a:	2104      	movs	r1, #4
 800b21c:	4620      	mov	r0, r4
 800b21e:	f7fb fbb3 	bl	8006988 <d_make_comp>
 800b222:	4603      	mov	r3, r0
 800b224:	e7b6      	b.n	800b194 <d_template_args+0xa0c>
 800b226:	2145      	movs	r1, #69	; 0x45
 800b228:	4620      	mov	r0, r4
 800b22a:	f000 f923 	bl	800b474 <d_exprlist>
 800b22e:	4683      	mov	fp, r0
 800b230:	e5ca      	b.n	800adc8 <d_template_args+0x640>
 800b232:	4620      	mov	r0, r4
 800b234:	f001 fdbc 	bl	800cdb0 <d_expression_1>
 800b238:	4605      	mov	r5, r0
 800b23a:	4620      	mov	r0, r4
 800b23c:	f001 fdb8 	bl	800cdb0 <d_expression_1>
 800b240:	4682      	mov	sl, r0
 800b242:	4620      	mov	r0, r4
 800b244:	f001 fdb4 	bl	800cdb0 <d_expression_1>
 800b248:	e64e      	b.n	800aee8 <d_template_args+0x760>
 800b24a:	4620      	mov	r0, r4
 800b24c:	f001 fdb0 	bl	800cdb0 <d_expression_1>
 800b250:	9001      	str	r0, [sp, #4]
 800b252:	4620      	mov	r0, r4
 800b254:	f001 fdac 	bl	800cdb0 <d_expression_1>
 800b258:	4683      	mov	fp, r0
 800b25a:	4620      	mov	r0, r4
 800b25c:	f001 fda8 	bl	800cdb0 <d_expression_1>
 800b260:	e575      	b.n	800ad4e <d_template_args+0x5c6>
 800b262:	2145      	movs	r1, #69	; 0x45
 800b264:	4620      	mov	r0, r4
 800b266:	f000 f905 	bl	800b474 <d_exprlist>
 800b26a:	4605      	mov	r5, r0
 800b26c:	e677      	b.n	800af5e <d_template_args+0x7d6>
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800b274:	2a01      	cmp	r2, #1
 800b276:	d903      	bls.n	800b280 <d_template_args+0xaf8>
 800b278:	3b72      	subs	r3, #114	; 0x72
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	f63f ae4f 	bhi.w	800af1e <d_template_args+0x796>
 800b280:	4620      	mov	r0, r4
 800b282:	f001 ff67 	bl	800d154 <d_type>
 800b286:	4682      	mov	sl, r0
 800b288:	e64d      	b.n	800af26 <d_template_args+0x79e>
 800b28a:	4620      	mov	r0, r4
 800b28c:	f001 ff62 	bl	800d154 <d_type>
 800b290:	4603      	mov	r3, r0
 800b292:	e6b2      	b.n	800affa <d_template_args+0x872>
 800b294:	3205      	adds	r2, #5
 800b296:	60e2      	str	r2, [r4, #12]
 800b298:	4620      	mov	r0, r4
 800b29a:	f001 fd89 	bl	800cdb0 <d_expression_1>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	2149      	movs	r1, #73	; 0x49
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f7fb fb6f 	bl	8006988 <d_make_comp>
 800b2aa:	e4b4      	b.n	800ac16 <d_template_args+0x48e>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f001 ff51 	bl	800d154 <d_type>
 800b2b2:	e707      	b.n	800b0c4 <d_template_args+0x93c>
 800b2b4:	7812      	ldrb	r2, [r2, #0]
 800b2b6:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800b2ba:	2901      	cmp	r1, #1
 800b2bc:	d903      	bls.n	800b2c6 <d_template_args+0xb3e>
 800b2be:	3a72      	subs	r2, #114	; 0x72
 800b2c0:	2a01      	cmp	r2, #1
 800b2c2:	f63f ad61 	bhi.w	800ad88 <d_template_args+0x600>
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f001 ff44 	bl	800d154 <d_type>
 800b2cc:	9001      	str	r0, [sp, #4]
 800b2ce:	e55f      	b.n	800ad90 <d_template_args+0x608>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f001 fd6d 	bl	800cdb0 <d_expression_1>
 800b2d6:	4683      	mov	fp, r0
 800b2d8:	e576      	b.n	800adc8 <d_template_args+0x640>
 800b2da:	2b6f      	cmp	r3, #111	; 0x6f
 800b2dc:	d018      	beq.n	800b310 <d_template_args+0xb88>
 800b2de:	2b69      	cmp	r3, #105	; 0x69
 800b2e0:	f040 80bb 	bne.w	800b45a <d_template_args+0xcd2>
 800b2e4:	7853      	ldrb	r3, [r2, #1]
 800b2e6:	2b6c      	cmp	r3, #108	; 0x6c
 800b2e8:	f47f ace2 	bne.w	800acb0 <d_template_args+0x528>
 800b2ec:	f04f 0900 	mov.w	r9, #0
 800b2f0:	68e3      	ldr	r3, [r4, #12]
 800b2f2:	2145      	movs	r1, #69	; 0x45
 800b2f4:	3302      	adds	r3, #2
 800b2f6:	60e3      	str	r3, [r4, #12]
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f000 f8bb 	bl	800b474 <d_exprlist>
 800b2fe:	464a      	mov	r2, r9
 800b300:	4603      	mov	r3, r0
 800b302:	2130      	movs	r1, #48	; 0x30
 800b304:	4620      	mov	r0, r4
 800b306:	f7fb fb3f 	bl	8006988 <d_make_comp>
 800b30a:	4681      	mov	r9, r0
 800b30c:	f7ff bbec 	b.w	800aae8 <d_template_args+0x360>
 800b310:	7853      	ldrb	r3, [r2, #1]
 800b312:	2b6e      	cmp	r3, #110	; 0x6e
 800b314:	f47f accc 	bne.w	800acb0 <d_template_args+0x528>
 800b318:	3202      	adds	r2, #2
 800b31a:	60e2      	str	r2, [r4, #12]
 800b31c:	f7ff bbdb 	b.w	800aad6 <d_template_args+0x34e>
 800b320:	3301      	adds	r3, #1
 800b322:	60e3      	str	r3, [r4, #12]
 800b324:	2145      	movs	r1, #69	; 0x45
 800b326:	4620      	mov	r0, r4
 800b328:	f000 f8a4 	bl	800b474 <d_exprlist>
 800b32c:	4603      	mov	r3, r0
 800b32e:	e664      	b.n	800affa <d_template_args+0x872>
 800b330:	4620      	mov	r0, r4
 800b332:	f7ff fa29 	bl	800a788 <d_template_args>
 800b336:	464a      	mov	r2, r9
 800b338:	4603      	mov	r3, r0
 800b33a:	2104      	movs	r1, #4
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7fb fb23 	bl	8006988 <d_make_comp>
 800b342:	462a      	mov	r2, r5
 800b344:	4603      	mov	r3, r0
 800b346:	2101      	movs	r1, #1
 800b348:	4620      	mov	r0, r4
 800b34a:	f7fb fb1d 	bl	8006988 <d_make_comp>
 800b34e:	e462      	b.n	800ac16 <d_template_args+0x48e>
 800b350:	785a      	ldrb	r2, [r3, #1]
 800b352:	2a69      	cmp	r2, #105	; 0x69
 800b354:	f47f ad6d 	bne.w	800ae32 <d_template_args+0x6aa>
 800b358:	3302      	adds	r3, #2
 800b35a:	60e3      	str	r3, [r4, #12]
 800b35c:	2145      	movs	r1, #69	; 0x45
 800b35e:	4620      	mov	r0, r4
 800b360:	f000 f888 	bl	800b474 <d_exprlist>
 800b364:	e4f3      	b.n	800ad4e <d_template_args+0x5c6>
 800b366:	3301      	adds	r3, #1
 800b368:	60e3      	str	r3, [r4, #12]
 800b36a:	2000      	movs	r0, #0
 800b36c:	e4ef      	b.n	800ad4e <d_template_args+0x5c6>
 800b36e:	3301      	adds	r3, #1
 800b370:	60e3      	str	r3, [r4, #12]
 800b372:	e633      	b.n	800afdc <d_template_args+0x854>
 800b374:	4620      	mov	r0, r4
 800b376:	f7ff fa07 	bl	800a788 <d_template_args>
 800b37a:	462a      	mov	r2, r5
 800b37c:	4603      	mov	r3, r0
 800b37e:	2104      	movs	r1, #4
 800b380:	4620      	mov	r0, r4
 800b382:	f7fb fb01 	bl	8006988 <d_make_comp>
 800b386:	4605      	mov	r5, r0
 800b388:	e5e9      	b.n	800af5e <d_template_args+0x7d6>
 800b38a:	3301      	adds	r3, #1
 800b38c:	60e3      	str	r3, [r4, #12]
 800b38e:	2145      	movs	r1, #69	; 0x45
 800b390:	4620      	mov	r0, r4
 800b392:	f000 f86f 	bl	800b474 <d_exprlist>
 800b396:	4603      	mov	r3, r0
 800b398:	e695      	b.n	800b0c6 <d_template_args+0x93e>
 800b39a:	bf00      	nop
 800b39c:	08013ca8 	.word	0x08013ca8
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f001 fd05 	bl	800cdb0 <d_expression_1>
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	e5d9      	b.n	800af5e <d_template_args+0x7d6>
 800b3aa:	2b74      	cmp	r3, #116	; 0x74
 800b3ac:	f47f aa69 	bne.w	800a882 <d_template_args+0xfa>
 800b3b0:	7893      	ldrb	r3, [r2, #2]
 800b3b2:	2b6c      	cmp	r3, #108	; 0x6c
 800b3b4:	f47f aa65 	bne.w	800a882 <d_template_args+0xfa>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f001 fecb 	bl	800d154 <d_type>
 800b3be:	4605      	mov	r5, r0
 800b3c0:	f7ff bbd5 	b.w	800ab6e <d_template_args+0x3e6>
 800b3c4:	2b6f      	cmp	r3, #111	; 0x6f
 800b3c6:	d014      	beq.n	800b3f2 <d_template_args+0xc6a>
 800b3c8:	2b69      	cmp	r3, #105	; 0x69
 800b3ca:	d11a      	bne.n	800b402 <d_template_args+0xc7a>
 800b3cc:	7913      	ldrb	r3, [r2, #4]
 800b3ce:	2b6c      	cmp	r3, #108	; 0x6c
 800b3d0:	f47f ad3d 	bne.w	800ae4e <d_template_args+0x6c6>
 800b3d4:	2500      	movs	r5, #0
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	2145      	movs	r1, #69	; 0x45
 800b3da:	3302      	adds	r3, #2
 800b3dc:	60e3      	str	r3, [r4, #12]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f000 f848 	bl	800b474 <d_exprlist>
 800b3e4:	462a      	mov	r2, r5
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2130      	movs	r1, #48	; 0x30
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7fb facc 	bl	8006988 <d_make_comp>
 800b3f0:	e411      	b.n	800ac16 <d_template_args+0x48e>
 800b3f2:	7913      	ldrb	r3, [r2, #4]
 800b3f4:	2b6e      	cmp	r3, #110	; 0x6e
 800b3f6:	f47f ad2a 	bne.w	800ae4e <d_template_args+0x6c6>
 800b3fa:	3205      	adds	r2, #5
 800b3fc:	60e2      	str	r2, [r4, #12]
 800b3fe:	f7ff bbfe 	b.w	800abfe <d_template_args+0x476>
 800b402:	2b74      	cmp	r3, #116	; 0x74
 800b404:	f47f ad23 	bne.w	800ae4e <d_template_args+0x6c6>
 800b408:	7913      	ldrb	r3, [r2, #4]
 800b40a:	2b6c      	cmp	r3, #108	; 0x6c
 800b40c:	f47f ad1f 	bne.w	800ae4e <d_template_args+0x6c6>
 800b410:	4620      	mov	r0, r4
 800b412:	f001 fe9f 	bl	800d154 <d_type>
 800b416:	4605      	mov	r5, r0
 800b418:	e7dd      	b.n	800b3d6 <d_template_args+0xc4e>
 800b41a:	4610      	mov	r0, r2
 800b41c:	f7ff bbfb 	b.w	800ac16 <d_template_args+0x48e>
 800b420:	3301      	adds	r3, #1
 800b422:	60e3      	str	r3, [r4, #12]
 800b424:	e643      	b.n	800b0ae <d_template_args+0x926>
 800b426:	785a      	ldrb	r2, [r3, #1]
 800b428:	2a69      	cmp	r2, #105	; 0x69
 800b42a:	f47f ae33 	bne.w	800b094 <d_template_args+0x90c>
 800b42e:	3302      	adds	r3, #2
 800b430:	60e3      	str	r3, [r4, #12]
 800b432:	2145      	movs	r1, #69	; 0x45
 800b434:	4620      	mov	r0, r4
 800b436:	f000 f81d 	bl	800b474 <d_exprlist>
 800b43a:	e555      	b.n	800aee8 <d_template_args+0x760>
 800b43c:	3301      	adds	r3, #1
 800b43e:	60e3      	str	r3, [r4, #12]
 800b440:	2000      	movs	r0, #0
 800b442:	e551      	b.n	800aee8 <d_template_args+0x760>
 800b444:	4620      	mov	r0, r4
 800b446:	f7ff f99f 	bl	800a788 <d_template_args>
 800b44a:	465a      	mov	r2, fp
 800b44c:	4603      	mov	r3, r0
 800b44e:	2104      	movs	r1, #4
 800b450:	4620      	mov	r0, r4
 800b452:	f7fb fa99 	bl	8006988 <d_make_comp>
 800b456:	4683      	mov	fp, r0
 800b458:	e4b6      	b.n	800adc8 <d_template_args+0x640>
 800b45a:	2b74      	cmp	r3, #116	; 0x74
 800b45c:	f47f ac28 	bne.w	800acb0 <d_template_args+0x528>
 800b460:	7853      	ldrb	r3, [r2, #1]
 800b462:	2b6c      	cmp	r3, #108	; 0x6c
 800b464:	f47f ac24 	bne.w	800acb0 <d_template_args+0x528>
 800b468:	4620      	mov	r0, r4
 800b46a:	f001 fe73 	bl	800d154 <d_type>
 800b46e:	4681      	mov	r9, r0
 800b470:	e73e      	b.n	800b2f0 <d_template_args+0xb68>
 800b472:	bf00      	nop

0800b474 <d_exprlist>:
 800b474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b478:	68c2      	ldr	r2, [r0, #12]
 800b47a:	b085      	sub	sp, #20
 800b47c:	7815      	ldrb	r5, [r2, #0]
 800b47e:	2300      	movs	r3, #0
 800b480:	428d      	cmp	r5, r1
 800b482:	4604      	mov	r4, r0
 800b484:	9303      	str	r3, [sp, #12]
 800b486:	f000 8261 	beq.w	800b94c <d_exprlist+0x4d8>
 800b48a:	460f      	mov	r7, r1
 800b48c:	ae03      	add	r6, sp, #12
 800b48e:	e022      	b.n	800b4d6 <d_exprlist+0x62>
 800b490:	2b66      	cmp	r3, #102	; 0x66
 800b492:	d04b      	beq.n	800b52c <d_exprlist+0xb8>
 800b494:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b498:	2909      	cmp	r1, #9
 800b49a:	f201 8454 	bhi.w	800cd46 <d_exprlist+0x18d2>
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f002 fad4 	bl	800da4c <d_unqualified_name>
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d064      	beq.n	800b574 <d_exprlist+0x100>
 800b4aa:	68e3      	ldr	r3, [r4, #12]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	2b49      	cmp	r3, #73	; 0x49
 800b4b0:	f000 808b 	beq.w	800b5ca <d_exprlist+0x156>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	6365      	str	r5, [r4, #52]	; 0x34
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	212e      	movs	r1, #46	; 0x2e
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f7fb fa63 	bl	8006988 <d_make_comp>
 800b4c2:	6030      	str	r0, [r6, #0]
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d056      	beq.n	800b576 <d_exprlist+0x102>
 800b4c8:	68e2      	ldr	r2, [r4, #12]
 800b4ca:	f100 0608 	add.w	r6, r0, #8
 800b4ce:	7813      	ldrb	r3, [r2, #0]
 800b4d0:	42bb      	cmp	r3, r7
 800b4d2:	f000 8179 	beq.w	800b7c8 <d_exprlist+0x354>
 800b4d6:	f04f 0801 	mov.w	r8, #1
 800b4da:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b4dc:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800b4e0:	7813      	ldrb	r3, [r2, #0]
 800b4e2:	2b4c      	cmp	r3, #76	; 0x4c
 800b4e4:	d04b      	beq.n	800b57e <d_exprlist+0x10a>
 800b4e6:	2b54      	cmp	r3, #84	; 0x54
 800b4e8:	d051      	beq.n	800b58e <d_exprlist+0x11a>
 800b4ea:	2b73      	cmp	r3, #115	; 0x73
 800b4ec:	d1d0      	bne.n	800b490 <d_exprlist+0x1c>
 800b4ee:	7853      	ldrb	r3, [r2, #1]
 800b4f0:	2b72      	cmp	r3, #114	; 0x72
 800b4f2:	f000 8152 	beq.w	800b79a <d_exprlist+0x326>
 800b4f6:	2b70      	cmp	r3, #112	; 0x70
 800b4f8:	f000 816c 	beq.w	800b7d4 <d_exprlist+0x360>
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f002 f9e5 	bl	800d8cc <d_operator_name>
 800b502:	4680      	mov	r8, r0
 800b504:	2800      	cmp	r0, #0
 800b506:	d035      	beq.n	800b574 <d_exprlist+0x100>
 800b508:	f890 a000 	ldrb.w	sl, [r0]
 800b50c:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b510:	d042      	beq.n	800b598 <d_exprlist+0x124>
 800b512:	f1ba 0f32 	cmp.w	sl, #50	; 0x32
 800b516:	d129      	bne.n	800b56c <d_exprlist+0xf8>
 800b518:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d829      	bhi.n	800b574 <d_exprlist+0x100>
 800b520:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b524:	01080062 	.word	0x01080062
 800b528:	006a00ac 	.word	0x006a00ac
 800b52c:	7853      	ldrb	r3, [r2, #1]
 800b52e:	2b70      	cmp	r3, #112	; 0x70
 800b530:	d1e4      	bne.n	800b4fc <d_exprlist+0x88>
 800b532:	1c93      	adds	r3, r2, #2
 800b534:	60e3      	str	r3, [r4, #12]
 800b536:	7893      	ldrb	r3, [r2, #2]
 800b538:	2b54      	cmp	r3, #84	; 0x54
 800b53a:	d051      	beq.n	800b5e0 <d_exprlist+0x16c>
 800b53c:	4620      	mov	r0, r4
 800b53e:	f7fb fbad 	bl	8006c9c <d_compact_number>
 800b542:	3001      	adds	r0, #1
 800b544:	d016      	beq.n	800b574 <d_exprlist+0x100>
 800b546:	6963      	ldr	r3, [r4, #20]
 800b548:	69a2      	ldr	r2, [r4, #24]
 800b54a:	4293      	cmp	r3, r2
 800b54c:	da12      	bge.n	800b574 <d_exprlist+0x100>
 800b54e:	6922      	ldr	r2, [r4, #16]
 800b550:	1c59      	adds	r1, r3, #1
 800b552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b556:	6161      	str	r1, [r4, #20]
 800b558:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800b55c:	d00a      	beq.n	800b574 <d_exprlist+0x100>
 800b55e:	f04f 0e06 	mov.w	lr, #6
 800b562:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800b566:	460a      	mov	r2, r1
 800b568:	6048      	str	r0, [r1, #4]
 800b56a:	e7a4      	b.n	800b4b6 <d_exprlist+0x42>
 800b56c:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 800b570:	f000 8158 	beq.w	800b824 <d_exprlist+0x3b0>
 800b574:	6365      	str	r5, [r4, #52]	; 0x34
 800b576:	2000      	movs	r0, #0
 800b578:	b005      	add	sp, #20
 800b57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57e:	4620      	mov	r0, r4
 800b580:	f003 f8e0 	bl	800e744 <d_expr_primary>
 800b584:	4602      	mov	r2, r0
 800b586:	6365      	str	r5, [r4, #52]	; 0x34
 800b588:	2a00      	cmp	r2, #0
 800b58a:	d195      	bne.n	800b4b8 <d_exprlist+0x44>
 800b58c:	e7f3      	b.n	800b576 <d_exprlist+0x102>
 800b58e:	4620      	mov	r0, r4
 800b590:	f7fb fb9c 	bl	8006ccc <d_template_param>
 800b594:	4602      	mov	r2, r0
 800b596:	e7f6      	b.n	800b586 <d_exprlist+0x112>
 800b598:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800b59c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b59e:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b5a2:	f8db 9000 	ldr.w	r9, [fp]
 800b5a6:	3b02      	subs	r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	6323      	str	r3, [r4, #48]	; 0x30
 800b5ac:	4648      	mov	r0, r9
 800b5ae:	49ae      	ldr	r1, [pc, #696]	; (800b868 <d_exprlist+0x3f4>)
 800b5b0:	f003 fb42 	bl	800ec38 <strcmp>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f000 8152 	beq.w	800b85e <d_exprlist+0x3ea>
 800b5ba:	f8db 300c 	ldr.w	r3, [fp, #12]
 800b5be:	2b03      	cmp	r3, #3
 800b5c0:	d8d8      	bhi.n	800b574 <d_exprlist+0x100>
 800b5c2:	e8df f003 	tbb	[pc, r3]
 800b5c6:	ad11      	.short	0xad11
 800b5c8:	1b5d      	.short	0x1b5d
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7ff f8dc 	bl	800a788 <d_template_args>
 800b5d0:	4642      	mov	r2, r8
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2104      	movs	r1, #4
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f7fb f9d6 	bl	8006988 <d_make_comp>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	e7d2      	b.n	800b586 <d_exprlist+0x112>
 800b5e0:	3203      	adds	r2, #3
 800b5e2:	60e2      	str	r2, [r4, #12]
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	e7ae      	b.n	800b546 <d_exprlist+0xd2>
 800b5e8:	4642      	mov	r2, r8
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	2134      	movs	r1, #52	; 0x34
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7fb f9ca 	bl	8006988 <d_make_comp>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	e7c6      	b.n	800b586 <d_exprlist+0x112>
 800b5f8:	f04f 0900 	mov.w	r9, #0
 800b5fc:	499b      	ldr	r1, [pc, #620]	; (800b86c <d_exprlist+0x3f8>)
 800b5fe:	4648      	mov	r0, r9
 800b600:	f003 fb1a 	bl	800ec38 <strcmp>
 800b604:	4683      	mov	fp, r0
 800b606:	2800      	cmp	r0, #0
 800b608:	f000 8138 	beq.w	800b87c <d_exprlist+0x408>
 800b60c:	f899 3000 	ldrb.w	r3, [r9]
 800b610:	2b6e      	cmp	r3, #110	; 0x6e
 800b612:	d1af      	bne.n	800b574 <d_exprlist+0x100>
 800b614:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b618:	2b77      	cmp	r3, #119	; 0x77
 800b61a:	d001      	beq.n	800b620 <d_exprlist+0x1ac>
 800b61c:	2b61      	cmp	r3, #97	; 0x61
 800b61e:	d1a9      	bne.n	800b574 <d_exprlist+0x100>
 800b620:	215f      	movs	r1, #95	; 0x5f
 800b622:	4620      	mov	r0, r4
 800b624:	f7ff ff26 	bl	800b474 <d_exprlist>
 800b628:	4682      	mov	sl, r0
 800b62a:	4620      	mov	r0, r4
 800b62c:	f001 fd92 	bl	800d154 <d_type>
 800b630:	68e3      	ldr	r3, [r4, #12]
 800b632:	4681      	mov	r9, r0
 800b634:	781a      	ldrb	r2, [r3, #0]
 800b636:	2a45      	cmp	r2, #69	; 0x45
 800b638:	f000 81cf 	beq.w	800b9da <d_exprlist+0x566>
 800b63c:	2a70      	cmp	r2, #112	; 0x70
 800b63e:	f000 84c9 	beq.w	800bfd4 <d_exprlist+0xb60>
 800b642:	2a69      	cmp	r2, #105	; 0x69
 800b644:	d196      	bne.n	800b574 <d_exprlist+0x100>
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	2b6c      	cmp	r3, #108	; 0x6c
 800b64a:	d193      	bne.n	800b574 <d_exprlist+0x100>
 800b64c:	4620      	mov	r0, r4
 800b64e:	f001 fbaf 	bl	800cdb0 <d_expression_1>
 800b652:	4683      	mov	fp, r0
 800b654:	465b      	mov	r3, fp
 800b656:	464a      	mov	r2, r9
 800b658:	213a      	movs	r1, #58	; 0x3a
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7fb f994 	bl	8006988 <d_make_comp>
 800b660:	4652      	mov	r2, sl
 800b662:	4603      	mov	r3, r0
 800b664:	2139      	movs	r1, #57	; 0x39
 800b666:	4620      	mov	r0, r4
 800b668:	f7fb f98e 	bl	8006988 <d_make_comp>
 800b66c:	4642      	mov	r2, r8
 800b66e:	4603      	mov	r3, r0
 800b670:	2138      	movs	r1, #56	; 0x38
 800b672:	4620      	mov	r0, r4
 800b674:	f7fb f988 	bl	8006988 <d_make_comp>
 800b678:	4602      	mov	r2, r0
 800b67a:	e784      	b.n	800b586 <d_exprlist+0x112>
 800b67c:	f04f 0900 	mov.w	r9, #0
 800b680:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	785a      	ldrb	r2, [r3, #1]
 800b688:	2a63      	cmp	r2, #99	; 0x63
 800b68a:	f000 8146 	beq.w	800b91a <d_exprlist+0x4a6>
 800b68e:	68e1      	ldr	r1, [r4, #12]
 800b690:	780b      	ldrb	r3, [r1, #0]
 800b692:	2b4c      	cmp	r3, #76	; 0x4c
 800b694:	f000 861e 	beq.w	800c2d4 <d_exprlist+0xe60>
 800b698:	2b54      	cmp	r3, #84	; 0x54
 800b69a:	f000 81fd 	beq.w	800ba98 <d_exprlist+0x624>
 800b69e:	2b73      	cmp	r3, #115	; 0x73
 800b6a0:	f000 8437 	beq.w	800bf12 <d_exprlist+0xa9e>
 800b6a4:	2b66      	cmp	r3, #102	; 0x66
 800b6a6:	f000 8475 	beq.w	800bf94 <d_exprlist+0xb20>
 800b6aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b6ae:	2a09      	cmp	r2, #9
 800b6b0:	f200 81bf 	bhi.w	800ba32 <d_exprlist+0x5be>
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f002 f9c9 	bl	800da4c <d_unqualified_name>
 800b6ba:	4682      	mov	sl, r0
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	f000 84a8 	beq.w	800c012 <d_exprlist+0xb9e>
 800b6c2:	68e3      	ldr	r3, [r4, #12]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	2b49      	cmp	r3, #73	; 0x49
 800b6c8:	f000 870e 	beq.w	800c4e8 <d_exprlist+0x1074>
 800b6cc:	4968      	ldr	r1, [pc, #416]	; (800b870 <d_exprlist+0x3fc>)
 800b6ce:	4648      	mov	r0, r9
 800b6d0:	f003 fab2 	bl	800ec38 <strcmp>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	f000 811a 	beq.w	800b90e <d_exprlist+0x49a>
 800b6da:	4966      	ldr	r1, [pc, #408]	; (800b874 <d_exprlist+0x400>)
 800b6dc:	4648      	mov	r0, r9
 800b6de:	f003 faab 	bl	800ec38 <strcmp>
 800b6e2:	b130      	cbz	r0, 800b6f2 <d_exprlist+0x27e>
 800b6e4:	4648      	mov	r0, r9
 800b6e6:	4964      	ldr	r1, [pc, #400]	; (800b878 <d_exprlist+0x404>)
 800b6e8:	f003 faa6 	bl	800ec38 <strcmp>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	f040 816f 	bne.w	800b9d0 <d_exprlist+0x55c>
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f002 f9aa 	bl	800da4c <d_unqualified_name>
 800b6f8:	68e3      	ldr	r3, [r4, #12]
 800b6fa:	4681      	mov	r9, r0
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b49      	cmp	r3, #73	; 0x49
 800b700:	f000 843c 	beq.w	800bf7c <d_exprlist+0xb08>
 800b704:	464b      	mov	r3, r9
 800b706:	4652      	mov	r2, sl
 800b708:	2137      	movs	r1, #55	; 0x37
 800b70a:	4620      	mov	r0, r4
 800b70c:	f7fb f93c 	bl	8006988 <d_make_comp>
 800b710:	4642      	mov	r2, r8
 800b712:	4603      	mov	r3, r0
 800b714:	2136      	movs	r1, #54	; 0x36
 800b716:	4620      	mov	r0, r4
 800b718:	f7fb f936 	bl	8006988 <d_make_comp>
 800b71c:	4602      	mov	r2, r0
 800b71e:	e732      	b.n	800b586 <d_exprlist+0x112>
 800b720:	f1b9 0f00 	cmp.w	r9, #0
 800b724:	d006      	beq.n	800b734 <d_exprlist+0x2c0>
 800b726:	f899 3000 	ldrb.w	r3, [r9]
 800b72a:	2b70      	cmp	r3, #112	; 0x70
 800b72c:	f000 8081 	beq.w	800b832 <d_exprlist+0x3be>
 800b730:	2b6d      	cmp	r3, #109	; 0x6d
 800b732:	d07e      	beq.n	800b832 <d_exprlist+0x3be>
 800b734:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 800b738:	68e1      	ldr	r1, [r4, #12]
 800b73a:	d074      	beq.n	800b826 <d_exprlist+0x3b2>
 800b73c:	780b      	ldrb	r3, [r1, #0]
 800b73e:	f04f 0a00 	mov.w	sl, #0
 800b742:	2b4c      	cmp	r3, #76	; 0x4c
 800b744:	f000 8453 	beq.w	800bfee <d_exprlist+0xb7a>
 800b748:	2b54      	cmp	r3, #84	; 0x54
 800b74a:	f000 8466 	beq.w	800c01a <d_exprlist+0xba6>
 800b74e:	2b73      	cmp	r3, #115	; 0x73
 800b750:	f000 8105 	beq.w	800b95e <d_exprlist+0x4ea>
 800b754:	2b66      	cmp	r3, #102	; 0x66
 800b756:	f000 811c 	beq.w	800b992 <d_exprlist+0x51e>
 800b75a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b75e:	2a09      	cmp	r2, #9
 800b760:	f201 82b2 	bhi.w	800ccc8 <d_exprlist+0x1854>
 800b764:	4620      	mov	r0, r4
 800b766:	f002 f971 	bl	800da4c <d_unqualified_name>
 800b76a:	4681      	mov	r9, r0
 800b76c:	b120      	cbz	r0, 800b778 <d_exprlist+0x304>
 800b76e:	68e3      	ldr	r3, [r4, #12]
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b49      	cmp	r3, #73	; 0x49
 800b774:	f000 8185 	beq.w	800ba82 <d_exprlist+0x60e>
 800b778:	f1ba 0f00 	cmp.w	sl, #0
 800b77c:	d06d      	beq.n	800b85a <d_exprlist+0x3e6>
 800b77e:	464b      	mov	r3, r9
 800b780:	464a      	mov	r2, r9
 800b782:	2137      	movs	r1, #55	; 0x37
 800b784:	4620      	mov	r0, r4
 800b786:	f7fb f8ff 	bl	8006988 <d_make_comp>
 800b78a:	4603      	mov	r3, r0
 800b78c:	4642      	mov	r2, r8
 800b78e:	2135      	movs	r1, #53	; 0x35
 800b790:	4620      	mov	r0, r4
 800b792:	f7fb f8f9 	bl	8006988 <d_make_comp>
 800b796:	4602      	mov	r2, r0
 800b798:	e6f5      	b.n	800b586 <d_exprlist+0x112>
 800b79a:	3202      	adds	r2, #2
 800b79c:	60e2      	str	r2, [r4, #12]
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f001 fcd8 	bl	800d154 <d_type>
 800b7a4:	4681      	mov	r9, r0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f002 f950 	bl	800da4c <d_unqualified_name>
 800b7ac:	68e3      	ldr	r3, [r4, #12]
 800b7ae:	4682      	mov	sl, r0
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b49      	cmp	r3, #73	; 0x49
 800b7b4:	f000 80bf 	beq.w	800b936 <d_exprlist+0x4c2>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	464a      	mov	r2, r9
 800b7bc:	4641      	mov	r1, r8
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f7fb f8e2 	bl	8006988 <d_make_comp>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	e6de      	b.n	800b586 <d_exprlist+0x112>
 800b7c8:	9803      	ldr	r0, [sp, #12]
 800b7ca:	3201      	adds	r2, #1
 800b7cc:	60e2      	str	r2, [r4, #12]
 800b7ce:	b005      	add	sp, #20
 800b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	1c91      	adds	r1, r2, #2
 800b7d6:	60e1      	str	r1, [r4, #12]
 800b7d8:	7893      	ldrb	r3, [r2, #2]
 800b7da:	2b4c      	cmp	r3, #76	; 0x4c
 800b7dc:	f000 814c 	beq.w	800ba78 <d_exprlist+0x604>
 800b7e0:	2b54      	cmp	r3, #84	; 0x54
 800b7e2:	f000 857d 	beq.w	800c2e0 <d_exprlist+0xe6c>
 800b7e6:	2b73      	cmp	r3, #115	; 0x73
 800b7e8:	f000 82e7 	beq.w	800bdba <d_exprlist+0x946>
 800b7ec:	2b66      	cmp	r3, #102	; 0x66
 800b7ee:	f000 83a5 	beq.w	800bf3c <d_exprlist+0xac8>
 800b7f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800b7f6:	2809      	cmp	r0, #9
 800b7f8:	f201 820c 	bhi.w	800cc14 <d_exprlist+0x17a0>
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f002 f925 	bl	800da4c <d_unqualified_name>
 800b802:	4680      	mov	r8, r0
 800b804:	2800      	cmp	r0, #0
 800b806:	f000 83fd 	beq.w	800c004 <d_exprlist+0xb90>
 800b80a:	68e3      	ldr	r3, [r4, #12]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	2b49      	cmp	r3, #73	; 0x49
 800b810:	f000 8639 	beq.w	800c486 <d_exprlist+0x1012>
 800b814:	4602      	mov	r2, r0
 800b816:	2300      	movs	r3, #0
 800b818:	2149      	movs	r1, #73	; 0x49
 800b81a:	4620      	mov	r0, r4
 800b81c:	f7fb f8b4 	bl	8006988 <d_make_comp>
 800b820:	4602      	mov	r2, r0
 800b822:	e6b0      	b.n	800b586 <d_exprlist+0x112>
 800b824:	68e1      	ldr	r1, [r4, #12]
 800b826:	780b      	ldrb	r3, [r1, #0]
 800b828:	2b5f      	cmp	r3, #95	; 0x5f
 800b82a:	d00f      	beq.n	800b84c <d_exprlist+0x3d8>
 800b82c:	f04f 0a00 	mov.w	sl, #0
 800b830:	e787      	b.n	800b742 <d_exprlist+0x2ce>
 800b832:	f899 2001 	ldrb.w	r2, [r9, #1]
 800b836:	429a      	cmp	r2, r3
 800b838:	f47f af7c 	bne.w	800b734 <d_exprlist+0x2c0>
 800b83c:	68e1      	ldr	r1, [r4, #12]
 800b83e:	780b      	ldrb	r3, [r1, #0]
 800b840:	2b5f      	cmp	r3, #95	; 0x5f
 800b842:	f000 85b8 	beq.w	800c3b6 <d_exprlist+0xf42>
 800b846:	f04f 0a01 	mov.w	sl, #1
 800b84a:	e77a      	b.n	800b742 <d_exprlist+0x2ce>
 800b84c:	3101      	adds	r1, #1
 800b84e:	60e1      	str	r1, [r4, #12]
 800b850:	4620      	mov	r0, r4
 800b852:	2145      	movs	r1, #69	; 0x45
 800b854:	f7ff fe0e 	bl	800b474 <d_exprlist>
 800b858:	4681      	mov	r9, r0
 800b85a:	464b      	mov	r3, r9
 800b85c:	e796      	b.n	800b78c <d_exprlist+0x318>
 800b85e:	4620      	mov	r0, r4
 800b860:	f001 fc78 	bl	800d154 <d_type>
 800b864:	4603      	mov	r3, r0
 800b866:	e791      	b.n	800b78c <d_exprlist+0x318>
 800b868:	08013ca8 	.word	0x08013ca8
 800b86c:	080139a0 	.word	0x080139a0
 800b870:	08013998 	.word	0x08013998
 800b874:	08013ab4 	.word	0x08013ab4
 800b878:	08013ab8 	.word	0x08013ab8
 800b87c:	4620      	mov	r0, r4
 800b87e:	f001 fa97 	bl	800cdb0 <d_expression_1>
 800b882:	4682      	mov	sl, r0
 800b884:	68e0      	ldr	r0, [r4, #12]
 800b886:	7803      	ldrb	r3, [r0, #0]
 800b888:	2b4c      	cmp	r3, #76	; 0x4c
 800b88a:	f000 861f 	beq.w	800c4cc <d_exprlist+0x1058>
 800b88e:	2b54      	cmp	r3, #84	; 0x54
 800b890:	f000 8636 	beq.w	800c500 <d_exprlist+0x108c>
 800b894:	2b73      	cmp	r3, #115	; 0x73
 800b896:	f000 84a6 	beq.w	800c1e6 <d_exprlist+0xd72>
 800b89a:	2b66      	cmp	r3, #102	; 0x66
 800b89c:	f000 80ac 	beq.w	800b9f8 <d_exprlist+0x584>
 800b8a0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b8a4:	2909      	cmp	r1, #9
 800b8a6:	f201 819a 	bhi.w	800cbde <d_exprlist+0x176a>
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f002 f8ce 	bl	800da4c <d_unqualified_name>
 800b8b0:	68e2      	ldr	r2, [r4, #12]
 800b8b2:	4681      	mov	r9, r0
 800b8b4:	7813      	ldrb	r3, [r2, #0]
 800b8b6:	b110      	cbz	r0, 800b8be <d_exprlist+0x44a>
 800b8b8:	2b49      	cmp	r3, #73	; 0x49
 800b8ba:	f000 86f5 	beq.w	800c6a8 <d_exprlist+0x1234>
 800b8be:	2b4c      	cmp	r3, #76	; 0x4c
 800b8c0:	f000 85ed 	beq.w	800c49e <d_exprlist+0x102a>
 800b8c4:	2b54      	cmp	r3, #84	; 0x54
 800b8c6:	f000 8609 	beq.w	800c4dc <d_exprlist+0x1068>
 800b8ca:	2b73      	cmp	r3, #115	; 0x73
 800b8cc:	f000 83cc 	beq.w	800c068 <d_exprlist+0xbf4>
 800b8d0:	2b66      	cmp	r3, #102	; 0x66
 800b8d2:	f000 8498 	beq.w	800c206 <d_exprlist+0xd92>
 800b8d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b8da:	2909      	cmp	r1, #9
 800b8dc:	f201 812f 	bhi.w	800cb3e <d_exprlist+0x16ca>
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f002 f8b3 	bl	800da4c <d_unqualified_name>
 800b8e6:	4683      	mov	fp, r0
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	f43f aeb3 	beq.w	800b654 <d_exprlist+0x1e0>
 800b8ee:	68e3      	ldr	r3, [r4, #12]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b49      	cmp	r3, #73	; 0x49
 800b8f4:	f47f aeae 	bne.w	800b654 <d_exprlist+0x1e0>
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f7fe ff45 	bl	800a788 <d_template_args>
 800b8fe:	465a      	mov	r2, fp
 800b900:	4603      	mov	r3, r0
 800b902:	2104      	movs	r1, #4
 800b904:	4620      	mov	r0, r4
 800b906:	f7fb f83f 	bl	8006988 <d_make_comp>
 800b90a:	4683      	mov	fp, r0
 800b90c:	e6a2      	b.n	800b654 <d_exprlist+0x1e0>
 800b90e:	2145      	movs	r1, #69	; 0x45
 800b910:	4620      	mov	r0, r4
 800b912:	f7ff fdaf 	bl	800b474 <d_exprlist>
 800b916:	4681      	mov	r9, r0
 800b918:	e6f4      	b.n	800b704 <d_exprlist+0x290>
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800b920:	2a01      	cmp	r2, #1
 800b922:	d903      	bls.n	800b92c <d_exprlist+0x4b8>
 800b924:	3b72      	subs	r3, #114	; 0x72
 800b926:	2b01      	cmp	r3, #1
 800b928:	f63f aeb1 	bhi.w	800b68e <d_exprlist+0x21a>
 800b92c:	4620      	mov	r0, r4
 800b92e:	f001 fc11 	bl	800d154 <d_type>
 800b932:	4682      	mov	sl, r0
 800b934:	e6ca      	b.n	800b6cc <d_exprlist+0x258>
 800b936:	4620      	mov	r0, r4
 800b938:	f7fe ff26 	bl	800a788 <d_template_args>
 800b93c:	4652      	mov	r2, sl
 800b93e:	4603      	mov	r3, r0
 800b940:	2104      	movs	r1, #4
 800b942:	4620      	mov	r0, r4
 800b944:	f7fb f820 	bl	8006988 <d_make_comp>
 800b948:	4603      	mov	r3, r0
 800b94a:	e736      	b.n	800b7ba <d_exprlist+0x346>
 800b94c:	3201      	adds	r2, #1
 800b94e:	60c2      	str	r2, [r0, #12]
 800b950:	461a      	mov	r2, r3
 800b952:	212e      	movs	r1, #46	; 0x2e
 800b954:	b005      	add	sp, #20
 800b956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95a:	f7fb b815 	b.w	8006988 <d_make_comp>
 800b95e:	784b      	ldrb	r3, [r1, #1]
 800b960:	2b72      	cmp	r3, #114	; 0x72
 800b962:	f000 8546 	beq.w	800c3f2 <d_exprlist+0xf7e>
 800b966:	2b70      	cmp	r3, #112	; 0x70
 800b968:	f000 8614 	beq.w	800c594 <d_exprlist+0x1120>
 800b96c:	4620      	mov	r0, r4
 800b96e:	f001 ffad 	bl	800d8cc <d_operator_name>
 800b972:	4681      	mov	r9, r0
 800b974:	2800      	cmp	r0, #0
 800b976:	f43f aeff 	beq.w	800b778 <d_exprlist+0x304>
 800b97a:	7803      	ldrb	r3, [r0, #0]
 800b97c:	2b31      	cmp	r3, #49	; 0x31
 800b97e:	f000 8352 	beq.w	800c026 <d_exprlist+0xbb2>
 800b982:	2b32      	cmp	r3, #50	; 0x32
 800b984:	d02e      	beq.n	800b9e4 <d_exprlist+0x570>
 800b986:	2b33      	cmp	r3, #51	; 0x33
 800b988:	f000 864c 	beq.w	800c624 <d_exprlist+0x11b0>
 800b98c:	f04f 0900 	mov.w	r9, #0
 800b990:	e6f2      	b.n	800b778 <d_exprlist+0x304>
 800b992:	784b      	ldrb	r3, [r1, #1]
 800b994:	2b70      	cmp	r3, #112	; 0x70
 800b996:	d1e9      	bne.n	800b96c <d_exprlist+0x4f8>
 800b998:	1c8b      	adds	r3, r1, #2
 800b99a:	60e3      	str	r3, [r4, #12]
 800b99c:	788b      	ldrb	r3, [r1, #2]
 800b99e:	2b54      	cmp	r3, #84	; 0x54
 800b9a0:	f040 8583 	bne.w	800c4aa <d_exprlist+0x1036>
 800b9a4:	3103      	adds	r1, #3
 800b9a6:	60e1      	str	r1, [r4, #12]
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	6963      	ldr	r3, [r4, #20]
 800b9ac:	69a2      	ldr	r2, [r4, #24]
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	daec      	bge.n	800b98c <d_exprlist+0x518>
 800b9b2:	6922      	ldr	r2, [r4, #16]
 800b9b4:	1c59      	adds	r1, r3, #1
 800b9b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b9ba:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 800b9be:	6161      	str	r1, [r4, #20]
 800b9c0:	f43f aeda 	beq.w	800b778 <d_exprlist+0x304>
 800b9c4:	2106      	movs	r1, #6
 800b9c6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800b9ca:	f8c9 0004 	str.w	r0, [r9, #4]
 800b9ce:	e6d3      	b.n	800b778 <d_exprlist+0x304>
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f001 f9ed 	bl	800cdb0 <d_expression_1>
 800b9d6:	4681      	mov	r9, r0
 800b9d8:	e694      	b.n	800b704 <d_exprlist+0x290>
 800b9da:	3301      	adds	r3, #1
 800b9dc:	60e3      	str	r3, [r4, #12]
 800b9de:	f04f 0b00 	mov.w	fp, #0
 800b9e2:	e637      	b.n	800b654 <d_exprlist+0x1e0>
 800b9e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d8cf      	bhi.n	800b98c <d_exprlist+0x518>
 800b9ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b9f0:	04cc0059 	.word	0x04cc0059
 800b9f4:	006100a5 	.word	0x006100a5
 800b9f8:	7843      	ldrb	r3, [r0, #1]
 800b9fa:	2b70      	cmp	r3, #112	; 0x70
 800b9fc:	f000 85d8 	beq.w	800c5b0 <d_exprlist+0x113c>
 800ba00:	4620      	mov	r0, r4
 800ba02:	f001 ff63 	bl	800d8cc <d_operator_name>
 800ba06:	4681      	mov	r9, r0
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	f000 8157 	beq.w	800bcbc <d_exprlist+0x848>
 800ba0e:	7803      	ldrb	r3, [r0, #0]
 800ba10:	2b31      	cmp	r3, #49	; 0x31
 800ba12:	f000 859f 	beq.w	800c554 <d_exprlist+0x10e0>
 800ba16:	2b32      	cmp	r3, #50	; 0x32
 800ba18:	f040 84d1 	bne.w	800c3be <d_exprlist+0xf4a>
 800ba1c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	f200 8489 	bhi.w	800c338 <d_exprlist+0xec4>
 800ba26:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ba2a:	0142      	.short	0x0142
 800ba2c:	018c04d1 	.word	0x018c04d1
 800ba30:	014c      	.short	0x014c
 800ba32:	2b6f      	cmp	r3, #111	; 0x6f
 800ba34:	f000 8446 	beq.w	800c2c4 <d_exprlist+0xe50>
 800ba38:	2b69      	cmp	r3, #105	; 0x69
 800ba3a:	f041 8177 	bne.w	800cd2c <d_exprlist+0x18b8>
 800ba3e:	784b      	ldrb	r3, [r1, #1]
 800ba40:	2b6c      	cmp	r3, #108	; 0x6c
 800ba42:	f001 80bb 	beq.w	800cbbc <d_exprlist+0x1748>
 800ba46:	4620      	mov	r0, r4
 800ba48:	f001 ff40 	bl	800d8cc <d_operator_name>
 800ba4c:	4682      	mov	sl, r0
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f000 82df 	beq.w	800c012 <d_exprlist+0xb9e>
 800ba54:	7803      	ldrb	r3, [r0, #0]
 800ba56:	2b31      	cmp	r3, #49	; 0x31
 800ba58:	f000 8474 	beq.w	800c344 <d_exprlist+0xed0>
 800ba5c:	2b32      	cmp	r3, #50	; 0x32
 800ba5e:	f040 8412 	bne.w	800c286 <d_exprlist+0xe12>
 800ba62:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	f200 82d3 	bhi.w	800c012 <d_exprlist+0xb9e>
 800ba6c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ba70:	0413009c 	.word	0x0413009c
 800ba74:	00a400e8 	.word	0x00a400e8
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f002 fe63 	bl	800e744 <d_expr_primary>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	e6c9      	b.n	800b816 <d_exprlist+0x3a2>
 800ba82:	4620      	mov	r0, r4
 800ba84:	f7fe fe80 	bl	800a788 <d_template_args>
 800ba88:	464a      	mov	r2, r9
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2104      	movs	r1, #4
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f7fa ff7a 	bl	8006988 <d_make_comp>
 800ba94:	4681      	mov	r9, r0
 800ba96:	e66f      	b.n	800b778 <d_exprlist+0x304>
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f7fb f917 	bl	8006ccc <d_template_param>
 800ba9e:	4682      	mov	sl, r0
 800baa0:	e614      	b.n	800b6cc <d_exprlist+0x258>
 800baa2:	464a      	mov	r2, r9
 800baa4:	2300      	movs	r3, #0
 800baa6:	2134      	movs	r1, #52	; 0x34
 800baa8:	4620      	mov	r0, r4
 800baaa:	f7fa ff6d 	bl	8006988 <d_make_comp>
 800baae:	4681      	mov	r9, r0
 800bab0:	e662      	b.n	800b778 <d_exprlist+0x304>
 800bab2:	f04f 0b00 	mov.w	fp, #0
 800bab6:	49d1      	ldr	r1, [pc, #836]	; (800bdfc <d_exprlist+0x988>)
 800bab8:	4658      	mov	r0, fp
 800baba:	f003 f8bd 	bl	800ec38 <strcmp>
 800babe:	2800      	cmp	r0, #0
 800bac0:	f000 8621 	beq.w	800c706 <d_exprlist+0x1292>
 800bac4:	f89b 2000 	ldrb.w	r2, [fp]
 800bac8:	2a6e      	cmp	r2, #110	; 0x6e
 800baca:	f47f af5f 	bne.w	800b98c <d_exprlist+0x518>
 800bace:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bad2:	2b77      	cmp	r3, #119	; 0x77
 800bad4:	d002      	beq.n	800badc <d_exprlist+0x668>
 800bad6:	2b61      	cmp	r3, #97	; 0x61
 800bad8:	f47f af58 	bne.w	800b98c <d_exprlist+0x518>
 800badc:	215f      	movs	r1, #95	; 0x5f
 800bade:	4620      	mov	r0, r4
 800bae0:	f7ff fcc8 	bl	800b474 <d_exprlist>
 800bae4:	9000      	str	r0, [sp, #0]
 800bae6:	4620      	mov	r0, r4
 800bae8:	f001 fb34 	bl	800d154 <d_type>
 800baec:	68e3      	ldr	r3, [r4, #12]
 800baee:	4683      	mov	fp, r0
 800baf0:	781a      	ldrb	r2, [r3, #0]
 800baf2:	2a45      	cmp	r2, #69	; 0x45
 800baf4:	f000 8744 	beq.w	800c980 <d_exprlist+0x150c>
 800baf8:	2a70      	cmp	r2, #112	; 0x70
 800bafa:	f000 8798 	beq.w	800ca2e <d_exprlist+0x15ba>
 800bafe:	2a69      	cmp	r2, #105	; 0x69
 800bb00:	f47f af44 	bne.w	800b98c <d_exprlist+0x518>
 800bb04:	785b      	ldrb	r3, [r3, #1]
 800bb06:	2b6c      	cmp	r3, #108	; 0x6c
 800bb08:	f47f af40 	bne.w	800b98c <d_exprlist+0x518>
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f001 f94f 	bl	800cdb0 <d_expression_1>
 800bb12:	4603      	mov	r3, r0
 800bb14:	465a      	mov	r2, fp
 800bb16:	213a      	movs	r1, #58	; 0x3a
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f7fa ff35 	bl	8006988 <d_make_comp>
 800bb1e:	9a00      	ldr	r2, [sp, #0]
 800bb20:	4603      	mov	r3, r0
 800bb22:	2139      	movs	r1, #57	; 0x39
 800bb24:	4620      	mov	r0, r4
 800bb26:	f7fa ff2f 	bl	8006988 <d_make_comp>
 800bb2a:	464a      	mov	r2, r9
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2138      	movs	r1, #56	; 0x38
 800bb30:	4620      	mov	r0, r4
 800bb32:	f7fa ff29 	bl	8006988 <d_make_comp>
 800bb36:	4681      	mov	r9, r0
 800bb38:	e61e      	b.n	800b778 <d_exprlist+0x304>
 800bb3a:	f04f 0b00 	mov.w	fp, #0
 800bb3e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bb42:	6812      	ldr	r2, [r2, #0]
 800bb44:	7851      	ldrb	r1, [r2, #1]
 800bb46:	2963      	cmp	r1, #99	; 0x63
 800bb48:	f000 85ce 	beq.w	800c6e8 <d_exprlist+0x1274>
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f001 f92f 	bl	800cdb0 <d_expression_1>
 800bb52:	9000      	str	r0, [sp, #0]
 800bb54:	49aa      	ldr	r1, [pc, #680]	; (800be00 <d_exprlist+0x98c>)
 800bb56:	4658      	mov	r0, fp
 800bb58:	f003 f86e 	bl	800ec38 <strcmp>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	f000 8631 	beq.w	800c7c4 <d_exprlist+0x1350>
 800bb62:	49a8      	ldr	r1, [pc, #672]	; (800be04 <d_exprlist+0x990>)
 800bb64:	4658      	mov	r0, fp
 800bb66:	f003 f867 	bl	800ec38 <strcmp>
 800bb6a:	b130      	cbz	r0, 800bb7a <d_exprlist+0x706>
 800bb6c:	4658      	mov	r0, fp
 800bb6e:	49a6      	ldr	r1, [pc, #664]	; (800be08 <d_exprlist+0x994>)
 800bb70:	f003 f862 	bl	800ec38 <strcmp>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	f040 86dc 	bne.w	800c932 <d_exprlist+0x14be>
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f001 ff66 	bl	800da4c <d_unqualified_name>
 800bb80:	68e3      	ldr	r3, [r4, #12]
 800bb82:	4683      	mov	fp, r0
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b49      	cmp	r3, #73	; 0x49
 800bb88:	f000 86d9 	beq.w	800c93e <d_exprlist+0x14ca>
 800bb8c:	465b      	mov	r3, fp
 800bb8e:	9a00      	ldr	r2, [sp, #0]
 800bb90:	2137      	movs	r1, #55	; 0x37
 800bb92:	4620      	mov	r0, r4
 800bb94:	f7fa fef8 	bl	8006988 <d_make_comp>
 800bb98:	464a      	mov	r2, r9
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2136      	movs	r1, #54	; 0x36
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f7fa fef2 	bl	8006988 <d_make_comp>
 800bba4:	4681      	mov	r9, r0
 800bba6:	e5e7      	b.n	800b778 <d_exprlist+0x304>
 800bba8:	4652      	mov	r2, sl
 800bbaa:	2300      	movs	r3, #0
 800bbac:	2134      	movs	r1, #52	; 0x34
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f7fa feea 	bl	8006988 <d_make_comp>
 800bbb4:	4682      	mov	sl, r0
 800bbb6:	e589      	b.n	800b6cc <d_exprlist+0x258>
 800bbb8:	f04f 0b00 	mov.w	fp, #0
 800bbbc:	498f      	ldr	r1, [pc, #572]	; (800bdfc <d_exprlist+0x988>)
 800bbbe:	4658      	mov	r0, fp
 800bbc0:	f003 f83a 	bl	800ec38 <strcmp>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f000 86c6 	beq.w	800c956 <d_exprlist+0x14e2>
 800bbca:	f89b 2000 	ldrb.w	r2, [fp]
 800bbce:	2a6e      	cmp	r2, #110	; 0x6e
 800bbd0:	f040 821f 	bne.w	800c012 <d_exprlist+0xb9e>
 800bbd4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bbd8:	2b77      	cmp	r3, #119	; 0x77
 800bbda:	d002      	beq.n	800bbe2 <d_exprlist+0x76e>
 800bbdc:	2b61      	cmp	r3, #97	; 0x61
 800bbde:	f040 8218 	bne.w	800c012 <d_exprlist+0xb9e>
 800bbe2:	215f      	movs	r1, #95	; 0x5f
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f7ff fc45 	bl	800b474 <d_exprlist>
 800bbea:	9000      	str	r0, [sp, #0]
 800bbec:	4620      	mov	r0, r4
 800bbee:	f001 fab1 	bl	800d154 <d_type>
 800bbf2:	68e3      	ldr	r3, [r4, #12]
 800bbf4:	4683      	mov	fp, r0
 800bbf6:	781a      	ldrb	r2, [r3, #0]
 800bbf8:	2a45      	cmp	r2, #69	; 0x45
 800bbfa:	f000 86d2 	beq.w	800c9a2 <d_exprlist+0x152e>
 800bbfe:	2a70      	cmp	r2, #112	; 0x70
 800bc00:	f000 86c3 	beq.w	800c98a <d_exprlist+0x1516>
 800bc04:	2a69      	cmp	r2, #105	; 0x69
 800bc06:	f040 8204 	bne.w	800c012 <d_exprlist+0xb9e>
 800bc0a:	785b      	ldrb	r3, [r3, #1]
 800bc0c:	2b6c      	cmp	r3, #108	; 0x6c
 800bc0e:	f040 8200 	bne.w	800c012 <d_exprlist+0xb9e>
 800bc12:	4620      	mov	r0, r4
 800bc14:	f001 f8cc 	bl	800cdb0 <d_expression_1>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	465a      	mov	r2, fp
 800bc1c:	213a      	movs	r1, #58	; 0x3a
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f7fa feb2 	bl	8006988 <d_make_comp>
 800bc24:	9a00      	ldr	r2, [sp, #0]
 800bc26:	4603      	mov	r3, r0
 800bc28:	2139      	movs	r1, #57	; 0x39
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f7fa feac 	bl	8006988 <d_make_comp>
 800bc30:	4652      	mov	r2, sl
 800bc32:	4603      	mov	r3, r0
 800bc34:	2138      	movs	r1, #56	; 0x38
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7fa fea6 	bl	8006988 <d_make_comp>
 800bc3c:	4682      	mov	sl, r0
 800bc3e:	e545      	b.n	800b6cc <d_exprlist+0x258>
 800bc40:	f04f 0b00 	mov.w	fp, #0
 800bc44:	f8da 2004 	ldr.w	r2, [sl, #4]
 800bc48:	6812      	ldr	r2, [r2, #0]
 800bc4a:	7851      	ldrb	r1, [r2, #1]
 800bc4c:	2963      	cmp	r1, #99	; 0x63
 800bc4e:	f000 8634 	beq.w	800c8ba <d_exprlist+0x1446>
 800bc52:	4620      	mov	r0, r4
 800bc54:	f001 f8ac 	bl	800cdb0 <d_expression_1>
 800bc58:	9000      	str	r0, [sp, #0]
 800bc5a:	4969      	ldr	r1, [pc, #420]	; (800be00 <d_exprlist+0x98c>)
 800bc5c:	4658      	mov	r0, fp
 800bc5e:	f002 ffeb 	bl	800ec38 <strcmp>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	f000 8643 	beq.w	800c8ee <d_exprlist+0x147a>
 800bc68:	4966      	ldr	r1, [pc, #408]	; (800be04 <d_exprlist+0x990>)
 800bc6a:	4658      	mov	r0, fp
 800bc6c:	f002 ffe4 	bl	800ec38 <strcmp>
 800bc70:	b130      	cbz	r0, 800bc80 <d_exprlist+0x80c>
 800bc72:	4658      	mov	r0, fp
 800bc74:	4964      	ldr	r1, [pc, #400]	; (800be08 <d_exprlist+0x994>)
 800bc76:	f002 ffdf 	bl	800ec38 <strcmp>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f040 8696 	bne.w	800c9ac <d_exprlist+0x1538>
 800bc80:	4620      	mov	r0, r4
 800bc82:	f001 fee3 	bl	800da4c <d_unqualified_name>
 800bc86:	68e3      	ldr	r3, [r4, #12]
 800bc88:	4683      	mov	fp, r0
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b49      	cmp	r3, #73	; 0x49
 800bc8e:	f000 86da 	beq.w	800ca46 <d_exprlist+0x15d2>
 800bc92:	465b      	mov	r3, fp
 800bc94:	9a00      	ldr	r2, [sp, #0]
 800bc96:	2137      	movs	r1, #55	; 0x37
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f7fa fe75 	bl	8006988 <d_make_comp>
 800bc9e:	4652      	mov	r2, sl
 800bca0:	4603      	mov	r3, r0
 800bca2:	2136      	movs	r1, #54	; 0x36
 800bca4:	4620      	mov	r0, r4
 800bca6:	f7fa fe6f 	bl	8006988 <d_make_comp>
 800bcaa:	4682      	mov	sl, r0
 800bcac:	e50e      	b.n	800b6cc <d_exprlist+0x258>
 800bcae:	464a      	mov	r2, r9
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	2134      	movs	r1, #52	; 0x34
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f7fa fe67 	bl	8006988 <d_make_comp>
 800bcba:	4681      	mov	r9, r0
 800bcbc:	68e2      	ldr	r2, [r4, #12]
 800bcbe:	7813      	ldrb	r3, [r2, #0]
 800bcc0:	e5fd      	b.n	800b8be <d_exprlist+0x44a>
 800bcc2:	f04f 0b00 	mov.w	fp, #0
 800bcc6:	494d      	ldr	r1, [pc, #308]	; (800bdfc <d_exprlist+0x988>)
 800bcc8:	4658      	mov	r0, fp
 800bcca:	f002 ffb5 	bl	800ec38 <strcmp>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	f000 86e7 	beq.w	800caa2 <d_exprlist+0x162e>
 800bcd4:	f89b 2000 	ldrb.w	r2, [fp]
 800bcd8:	2a6e      	cmp	r2, #110	; 0x6e
 800bcda:	f040 832d 	bne.w	800c338 <d_exprlist+0xec4>
 800bcde:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bce2:	2b77      	cmp	r3, #119	; 0x77
 800bce4:	d002      	beq.n	800bcec <d_exprlist+0x878>
 800bce6:	2b61      	cmp	r3, #97	; 0x61
 800bce8:	f040 8326 	bne.w	800c338 <d_exprlist+0xec4>
 800bcec:	215f      	movs	r1, #95	; 0x5f
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f7ff fbc0 	bl	800b474 <d_exprlist>
 800bcf4:	9000      	str	r0, [sp, #0]
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f001 fa2c 	bl	800d154 <d_type>
 800bcfc:	68e2      	ldr	r2, [r4, #12]
 800bcfe:	4683      	mov	fp, r0
 800bd00:	7813      	ldrb	r3, [r2, #0]
 800bd02:	2b45      	cmp	r3, #69	; 0x45
 800bd04:	f000 86da 	beq.w	800cabc <d_exprlist+0x1648>
 800bd08:	2b70      	cmp	r3, #112	; 0x70
 800bd0a:	f000 87c2 	beq.w	800cc92 <d_exprlist+0x181e>
 800bd0e:	2b69      	cmp	r3, #105	; 0x69
 800bd10:	f041 804a 	bne.w	800cda8 <d_exprlist+0x1934>
 800bd14:	7853      	ldrb	r3, [r2, #1]
 800bd16:	2b6c      	cmp	r3, #108	; 0x6c
 800bd18:	f041 8043 	bne.w	800cda2 <d_exprlist+0x192e>
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f001 f847 	bl	800cdb0 <d_expression_1>
 800bd22:	4603      	mov	r3, r0
 800bd24:	465a      	mov	r2, fp
 800bd26:	213a      	movs	r1, #58	; 0x3a
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f7fa fe2d 	bl	8006988 <d_make_comp>
 800bd2e:	9a00      	ldr	r2, [sp, #0]
 800bd30:	4603      	mov	r3, r0
 800bd32:	2139      	movs	r1, #57	; 0x39
 800bd34:	4620      	mov	r0, r4
 800bd36:	f7fa fe27 	bl	8006988 <d_make_comp>
 800bd3a:	464a      	mov	r2, r9
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2138      	movs	r1, #56	; 0x38
 800bd40:	e7b8      	b.n	800bcb4 <d_exprlist+0x840>
 800bd42:	f04f 0b00 	mov.w	fp, #0
 800bd46:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bd4a:	6812      	ldr	r2, [r2, #0]
 800bd4c:	7851      	ldrb	r1, [r2, #1]
 800bd4e:	2963      	cmp	r1, #99	; 0x63
 800bd50:	f000 865e 	beq.w	800ca10 <d_exprlist+0x159c>
 800bd54:	4620      	mov	r0, r4
 800bd56:	f001 f82b 	bl	800cdb0 <d_expression_1>
 800bd5a:	9000      	str	r0, [sp, #0]
 800bd5c:	4928      	ldr	r1, [pc, #160]	; (800be00 <d_exprlist+0x98c>)
 800bd5e:	4658      	mov	r0, fp
 800bd60:	f002 ff6a 	bl	800ec38 <strcmp>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	f000 864c 	beq.w	800ca02 <d_exprlist+0x158e>
 800bd6a:	4926      	ldr	r1, [pc, #152]	; (800be04 <d_exprlist+0x990>)
 800bd6c:	4658      	mov	r0, fp
 800bd6e:	f002 ff63 	bl	800ec38 <strcmp>
 800bd72:	b130      	cbz	r0, 800bd82 <d_exprlist+0x90e>
 800bd74:	4658      	mov	r0, fp
 800bd76:	4924      	ldr	r1, [pc, #144]	; (800be08 <d_exprlist+0x994>)
 800bd78:	f002 ff5e 	bl	800ec38 <strcmp>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	f040 861b 	bne.w	800c9b8 <d_exprlist+0x1544>
 800bd82:	4620      	mov	r0, r4
 800bd84:	f001 fe62 	bl	800da4c <d_unqualified_name>
 800bd88:	68e3      	ldr	r3, [r4, #12]
 800bd8a:	4683      	mov	fp, r0
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	2b49      	cmp	r3, #73	; 0x49
 800bd90:	d109      	bne.n	800bda6 <d_exprlist+0x932>
 800bd92:	4620      	mov	r0, r4
 800bd94:	f7fe fcf8 	bl	800a788 <d_template_args>
 800bd98:	465a      	mov	r2, fp
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2104      	movs	r1, #4
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f7fa fdf2 	bl	8006988 <d_make_comp>
 800bda4:	4683      	mov	fp, r0
 800bda6:	465b      	mov	r3, fp
 800bda8:	9a00      	ldr	r2, [sp, #0]
 800bdaa:	2137      	movs	r1, #55	; 0x37
 800bdac:	4620      	mov	r0, r4
 800bdae:	f7fa fdeb 	bl	8006988 <d_make_comp>
 800bdb2:	464a      	mov	r2, r9
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2136      	movs	r1, #54	; 0x36
 800bdb8:	e77c      	b.n	800bcb4 <d_exprlist+0x840>
 800bdba:	78d3      	ldrb	r3, [r2, #3]
 800bdbc:	2b72      	cmp	r3, #114	; 0x72
 800bdbe:	f000 8456 	beq.w	800c66e <d_exprlist+0x11fa>
 800bdc2:	2b70      	cmp	r3, #112	; 0x70
 800bdc4:	f000 84ac 	beq.w	800c720 <d_exprlist+0x12ac>
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f001 fd7f 	bl	800d8cc <d_operator_name>
 800bdce:	4680      	mov	r8, r0
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	f000 8117 	beq.w	800c004 <d_exprlist+0xb90>
 800bdd6:	7803      	ldrb	r3, [r0, #0]
 800bdd8:	2b31      	cmp	r3, #49	; 0x31
 800bdda:	f000 828b 	beq.w	800c2f4 <d_exprlist+0xe80>
 800bdde:	2b32      	cmp	r3, #50	; 0x32
 800bde0:	f040 8232 	bne.w	800c248 <d_exprlist+0xdd4>
 800bde4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	f200 810b 	bhi.w	800c004 <d_exprlist+0xb90>
 800bdee:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bdf2:	000d      	.short	0x000d
 800bdf4:	00590233 	.word	0x00590233
 800bdf8:	0015      	.short	0x0015
 800bdfa:	bf00      	nop
 800bdfc:	080139a0 	.word	0x080139a0
 800be00:	08013998 	.word	0x08013998
 800be04:	08013ab4 	.word	0x08013ab4
 800be08:	08013ab8 	.word	0x08013ab8
 800be0c:	4642      	mov	r2, r8
 800be0e:	2300      	movs	r3, #0
 800be10:	2134      	movs	r1, #52	; 0x34
 800be12:	4620      	mov	r0, r4
 800be14:	f7fa fdb8 	bl	8006988 <d_make_comp>
 800be18:	4602      	mov	r2, r0
 800be1a:	e4fc      	b.n	800b816 <d_exprlist+0x3a2>
 800be1c:	f04f 0900 	mov.w	r9, #0
 800be20:	49c8      	ldr	r1, [pc, #800]	; (800c144 <d_exprlist+0xcd0>)
 800be22:	4648      	mov	r0, r9
 800be24:	f002 ff08 	bl	800ec38 <strcmp>
 800be28:	2800      	cmp	r0, #0
 800be2a:	f000 8575 	beq.w	800c918 <d_exprlist+0x14a4>
 800be2e:	f899 3000 	ldrb.w	r3, [r9]
 800be32:	2b6e      	cmp	r3, #110	; 0x6e
 800be34:	f040 80e6 	bne.w	800c004 <d_exprlist+0xb90>
 800be38:	f899 3001 	ldrb.w	r3, [r9, #1]
 800be3c:	2b77      	cmp	r3, #119	; 0x77
 800be3e:	d002      	beq.n	800be46 <d_exprlist+0x9d2>
 800be40:	2b61      	cmp	r3, #97	; 0x61
 800be42:	f040 80df 	bne.w	800c004 <d_exprlist+0xb90>
 800be46:	215f      	movs	r1, #95	; 0x5f
 800be48:	4620      	mov	r0, r4
 800be4a:	f7ff fb13 	bl	800b474 <d_exprlist>
 800be4e:	4681      	mov	r9, r0
 800be50:	4620      	mov	r0, r4
 800be52:	f001 f97f 	bl	800d154 <d_type>
 800be56:	68e3      	ldr	r3, [r4, #12]
 800be58:	4682      	mov	sl, r0
 800be5a:	781a      	ldrb	r2, [r3, #0]
 800be5c:	2a45      	cmp	r2, #69	; 0x45
 800be5e:	f000 85cb 	beq.w	800c9f8 <d_exprlist+0x1584>
 800be62:	2a70      	cmp	r2, #112	; 0x70
 800be64:	f000 85bc 	beq.w	800c9e0 <d_exprlist+0x156c>
 800be68:	2a69      	cmp	r2, #105	; 0x69
 800be6a:	f040 80cb 	bne.w	800c004 <d_exprlist+0xb90>
 800be6e:	785b      	ldrb	r3, [r3, #1]
 800be70:	2b6c      	cmp	r3, #108	; 0x6c
 800be72:	f040 80c7 	bne.w	800c004 <d_exprlist+0xb90>
 800be76:	4620      	mov	r0, r4
 800be78:	f000 ff9a 	bl	800cdb0 <d_expression_1>
 800be7c:	4603      	mov	r3, r0
 800be7e:	4652      	mov	r2, sl
 800be80:	213a      	movs	r1, #58	; 0x3a
 800be82:	4620      	mov	r0, r4
 800be84:	f7fa fd80 	bl	8006988 <d_make_comp>
 800be88:	464a      	mov	r2, r9
 800be8a:	4603      	mov	r3, r0
 800be8c:	2139      	movs	r1, #57	; 0x39
 800be8e:	4620      	mov	r0, r4
 800be90:	f7fa fd7a 	bl	8006988 <d_make_comp>
 800be94:	4642      	mov	r2, r8
 800be96:	4603      	mov	r3, r0
 800be98:	2138      	movs	r1, #56	; 0x38
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7fa fd74 	bl	8006988 <d_make_comp>
 800bea0:	4602      	mov	r2, r0
 800bea2:	e4b8      	b.n	800b816 <d_exprlist+0x3a2>
 800bea4:	f04f 0900 	mov.w	r9, #0
 800bea8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	785a      	ldrb	r2, [r3, #1]
 800beb0:	2a63      	cmp	r2, #99	; 0x63
 800beb2:	f000 84dd 	beq.w	800c870 <d_exprlist+0x13fc>
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 ff7a 	bl	800cdb0 <d_expression_1>
 800bebc:	4682      	mov	sl, r0
 800bebe:	49a2      	ldr	r1, [pc, #648]	; (800c148 <d_exprlist+0xcd4>)
 800bec0:	4648      	mov	r0, r9
 800bec2:	f002 feb9 	bl	800ec38 <strcmp>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f000 84c9 	beq.w	800c85e <d_exprlist+0x13ea>
 800becc:	499f      	ldr	r1, [pc, #636]	; (800c14c <d_exprlist+0xcd8>)
 800bece:	4648      	mov	r0, r9
 800bed0:	f002 feb2 	bl	800ec38 <strcmp>
 800bed4:	b130      	cbz	r0, 800bee4 <d_exprlist+0xa70>
 800bed6:	4648      	mov	r0, r9
 800bed8:	499d      	ldr	r1, [pc, #628]	; (800c150 <d_exprlist+0xcdc>)
 800beda:	f002 fead 	bl	800ec38 <strcmp>
 800bede:	2800      	cmp	r0, #0
 800bee0:	f040 8578 	bne.w	800c9d4 <d_exprlist+0x1560>
 800bee4:	4620      	mov	r0, r4
 800bee6:	f001 fdb1 	bl	800da4c <d_unqualified_name>
 800beea:	68e3      	ldr	r3, [r4, #12]
 800beec:	4681      	mov	r9, r0
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	2b49      	cmp	r3, #73	; 0x49
 800bef2:	f000 85ca 	beq.w	800ca8a <d_exprlist+0x1616>
 800bef6:	464b      	mov	r3, r9
 800bef8:	4652      	mov	r2, sl
 800befa:	2137      	movs	r1, #55	; 0x37
 800befc:	4620      	mov	r0, r4
 800befe:	f7fa fd43 	bl	8006988 <d_make_comp>
 800bf02:	4642      	mov	r2, r8
 800bf04:	4603      	mov	r3, r0
 800bf06:	2136      	movs	r1, #54	; 0x36
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f7fa fd3d 	bl	8006988 <d_make_comp>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	e481      	b.n	800b816 <d_exprlist+0x3a2>
 800bf12:	784b      	ldrb	r3, [r1, #1]
 800bf14:	2b72      	cmp	r3, #114	; 0x72
 800bf16:	f000 83cf 	beq.w	800c6b8 <d_exprlist+0x1244>
 800bf1a:	2b70      	cmp	r3, #112	; 0x70
 800bf1c:	f47f ad93 	bne.w	800ba46 <d_exprlist+0x5d2>
 800bf20:	3102      	adds	r1, #2
 800bf22:	60e1      	str	r1, [r4, #12]
 800bf24:	4620      	mov	r0, r4
 800bf26:	f000 ff43 	bl	800cdb0 <d_expression_1>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	2149      	movs	r1, #73	; 0x49
 800bf30:	4620      	mov	r0, r4
 800bf32:	f7fa fd29 	bl	8006988 <d_make_comp>
 800bf36:	4682      	mov	sl, r0
 800bf38:	f7ff bbc8 	b.w	800b6cc <d_exprlist+0x258>
 800bf3c:	78d3      	ldrb	r3, [r2, #3]
 800bf3e:	2b70      	cmp	r3, #112	; 0x70
 800bf40:	f47f af42 	bne.w	800bdc8 <d_exprlist+0x954>
 800bf44:	1d13      	adds	r3, r2, #4
 800bf46:	60e3      	str	r3, [r4, #12]
 800bf48:	7913      	ldrb	r3, [r2, #4]
 800bf4a:	2b54      	cmp	r3, #84	; 0x54
 800bf4c:	d155      	bne.n	800bffa <d_exprlist+0xb86>
 800bf4e:	3205      	adds	r2, #5
 800bf50:	60e2      	str	r2, [r4, #12]
 800bf52:	2000      	movs	r0, #0
 800bf54:	6963      	ldr	r3, [r4, #20]
 800bf56:	69a2      	ldr	r2, [r4, #24]
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	da53      	bge.n	800c004 <d_exprlist+0xb90>
 800bf5c:	6922      	ldr	r2, [r4, #16]
 800bf5e:	1c59      	adds	r1, r3, #1
 800bf60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bf64:	6161      	str	r1, [r4, #20]
 800bf66:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800bf6a:	f000 8616 	beq.w	800cb9a <d_exprlist+0x1726>
 800bf6e:	f04f 0e06 	mov.w	lr, #6
 800bf72:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800bf76:	460a      	mov	r2, r1
 800bf78:	6048      	str	r0, [r1, #4]
 800bf7a:	e44c      	b.n	800b816 <d_exprlist+0x3a2>
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f7fe fc03 	bl	800a788 <d_template_args>
 800bf82:	464a      	mov	r2, r9
 800bf84:	4603      	mov	r3, r0
 800bf86:	2104      	movs	r1, #4
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f7fa fcfd 	bl	8006988 <d_make_comp>
 800bf8e:	4681      	mov	r9, r0
 800bf90:	f7ff bbb8 	b.w	800b704 <d_exprlist+0x290>
 800bf94:	784b      	ldrb	r3, [r1, #1]
 800bf96:	2b70      	cmp	r3, #112	; 0x70
 800bf98:	f47f ad55 	bne.w	800ba46 <d_exprlist+0x5d2>
 800bf9c:	1c8b      	adds	r3, r1, #2
 800bf9e:	60e3      	str	r3, [r4, #12]
 800bfa0:	788b      	ldrb	r3, [r1, #2]
 800bfa2:	2b54      	cmp	r3, #84	; 0x54
 800bfa4:	d130      	bne.n	800c008 <d_exprlist+0xb94>
 800bfa6:	3103      	adds	r1, #3
 800bfa8:	60e1      	str	r1, [r4, #12]
 800bfaa:	2000      	movs	r0, #0
 800bfac:	6963      	ldr	r3, [r4, #20]
 800bfae:	69a2      	ldr	r2, [r4, #24]
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	da2e      	bge.n	800c012 <d_exprlist+0xb9e>
 800bfb4:	6922      	ldr	r2, [r4, #16]
 800bfb6:	1c59      	adds	r1, r3, #1
 800bfb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bfbc:	eb12 0a83 	adds.w	sl, r2, r3, lsl #2
 800bfc0:	6161      	str	r1, [r4, #20]
 800bfc2:	f43f ab83 	beq.w	800b6cc <d_exprlist+0x258>
 800bfc6:	2106      	movs	r1, #6
 800bfc8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800bfcc:	f8ca 0004 	str.w	r0, [sl, #4]
 800bfd0:	f7ff bb7c 	b.w	800b6cc <d_exprlist+0x258>
 800bfd4:	785a      	ldrb	r2, [r3, #1]
 800bfd6:	2a69      	cmp	r2, #105	; 0x69
 800bfd8:	f47f aacc 	bne.w	800b574 <d_exprlist+0x100>
 800bfdc:	3302      	adds	r3, #2
 800bfde:	60e3      	str	r3, [r4, #12]
 800bfe0:	2145      	movs	r1, #69	; 0x45
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7ff fa46 	bl	800b474 <d_exprlist>
 800bfe8:	4683      	mov	fp, r0
 800bfea:	f7ff bb33 	b.w	800b654 <d_exprlist+0x1e0>
 800bfee:	4620      	mov	r0, r4
 800bff0:	f002 fba8 	bl	800e744 <d_expr_primary>
 800bff4:	4681      	mov	r9, r0
 800bff6:	f7ff bbbf 	b.w	800b778 <d_exprlist+0x304>
 800bffa:	4620      	mov	r0, r4
 800bffc:	f7fa fe4e 	bl	8006c9c <d_compact_number>
 800c000:	3001      	adds	r0, #1
 800c002:	d1a7      	bne.n	800bf54 <d_exprlist+0xae0>
 800c004:	2200      	movs	r2, #0
 800c006:	e406      	b.n	800b816 <d_exprlist+0x3a2>
 800c008:	4620      	mov	r0, r4
 800c00a:	f7fa fe47 	bl	8006c9c <d_compact_number>
 800c00e:	3001      	adds	r0, #1
 800c010:	d1cc      	bne.n	800bfac <d_exprlist+0xb38>
 800c012:	f04f 0a00 	mov.w	sl, #0
 800c016:	f7ff bb59 	b.w	800b6cc <d_exprlist+0x258>
 800c01a:	4620      	mov	r0, r4
 800c01c:	f7fa fe56 	bl	8006ccc <d_template_param>
 800c020:	4681      	mov	r9, r0
 800c022:	f7ff bba9 	b.w	800b778 <d_exprlist+0x304>
 800c026:	6843      	ldr	r3, [r0, #4]
 800c028:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c02a:	689a      	ldr	r2, [r3, #8]
 800c02c:	f8d3 b000 	ldr.w	fp, [r3]
 800c030:	3a02      	subs	r2, #2
 800c032:	440a      	add	r2, r1
 800c034:	6322      	str	r2, [r4, #48]	; 0x30
 800c036:	4658      	mov	r0, fp
 800c038:	4946      	ldr	r1, [pc, #280]	; (800c154 <d_exprlist+0xce0>)
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	f002 fdfc 	bl	800ec38 <strcmp>
 800c040:	9b00      	ldr	r3, [sp, #0]
 800c042:	2800      	cmp	r0, #0
 800c044:	f000 832b 	beq.w	800c69e <d_exprlist+0x122a>
 800c048:	68da      	ldr	r2, [r3, #12]
 800c04a:	2a03      	cmp	r2, #3
 800c04c:	f63f ac9e 	bhi.w	800b98c <d_exprlist+0x518>
 800c050:	a301      	add	r3, pc, #4	; (adr r3, 800c058 <d_exprlist+0xbe4>)
 800c052:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c056:	bf00      	nop
 800c058:	0800baa3 	.word	0x0800baa3
 800c05c:	0800c45f 	.word	0x0800c45f
 800c060:	0800bb3f 	.word	0x0800bb3f
 800c064:	0800bab7 	.word	0x0800bab7
 800c068:	7853      	ldrb	r3, [r2, #1]
 800c06a:	2b72      	cmp	r3, #114	; 0x72
 800c06c:	f000 838a 	beq.w	800c784 <d_exprlist+0x1310>
 800c070:	2b70      	cmp	r3, #112	; 0x70
 800c072:	f000 8443 	beq.w	800c8fc <d_exprlist+0x1488>
 800c076:	4620      	mov	r0, r4
 800c078:	f001 fc28 	bl	800d8cc <d_operator_name>
 800c07c:	4683      	mov	fp, r0
 800c07e:	2800      	cmp	r0, #0
 800c080:	f43f aae8 	beq.w	800b654 <d_exprlist+0x1e0>
 800c084:	7803      	ldrb	r3, [r0, #0]
 800c086:	2b31      	cmp	r3, #49	; 0x31
 800c088:	f000 8242 	beq.w	800c510 <d_exprlist+0x109c>
 800c08c:	2b32      	cmp	r3, #50	; 0x32
 800c08e:	f040 81c8 	bne.w	800c422 <d_exprlist+0xfae>
 800c092:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c096:	2b03      	cmp	r3, #3
 800c098:	f200 8128 	bhi.w	800c2ec <d_exprlist+0xe78>
 800c09c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c0a0:	01c90004 	.word	0x01c90004
 800c0a4:	000d005c 	.word	0x000d005c
 800c0a8:	465a      	mov	r2, fp
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	2134      	movs	r1, #52	; 0x34
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f7fa fc6a 	bl	8006988 <d_make_comp>
 800c0b4:	4683      	mov	fp, r0
 800c0b6:	f7ff bacd 	b.w	800b654 <d_exprlist+0x1e0>
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	4618      	mov	r0, r3
 800c0be:	4921      	ldr	r1, [pc, #132]	; (800c144 <d_exprlist+0xcd0>)
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	f002 fdb9 	bl	800ec38 <strcmp>
 800c0c6:	9b00      	ldr	r3, [sp, #0]
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	f000 850d 	beq.w	800cae8 <d_exprlist+0x1674>
 800c0ce:	781a      	ldrb	r2, [r3, #0]
 800c0d0:	2a6e      	cmp	r2, #110	; 0x6e
 800c0d2:	f040 810b 	bne.w	800c2ec <d_exprlist+0xe78>
 800c0d6:	785b      	ldrb	r3, [r3, #1]
 800c0d8:	2b77      	cmp	r3, #119	; 0x77
 800c0da:	d002      	beq.n	800c0e2 <d_exprlist+0xc6e>
 800c0dc:	2b61      	cmp	r3, #97	; 0x61
 800c0de:	f040 8105 	bne.w	800c2ec <d_exprlist+0xe78>
 800c0e2:	215f      	movs	r1, #95	; 0x5f
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f7ff f9c5 	bl	800b474 <d_exprlist>
 800c0ea:	9000      	str	r0, [sp, #0]
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f001 f831 	bl	800d154 <d_type>
 800c0f2:	68e3      	ldr	r3, [r4, #12]
 800c0f4:	9001      	str	r0, [sp, #4]
 800c0f6:	781a      	ldrb	r2, [r3, #0]
 800c0f8:	2a45      	cmp	r2, #69	; 0x45
 800c0fa:	f000 84e4 	beq.w	800cac6 <d_exprlist+0x1652>
 800c0fe:	2a70      	cmp	r2, #112	; 0x70
 800c100:	f000 85ce 	beq.w	800cca0 <d_exprlist+0x182c>
 800c104:	2a69      	cmp	r2, #105	; 0x69
 800c106:	f040 80f1 	bne.w	800c2ec <d_exprlist+0xe78>
 800c10a:	785b      	ldrb	r3, [r3, #1]
 800c10c:	2b6c      	cmp	r3, #108	; 0x6c
 800c10e:	f040 80ed 	bne.w	800c2ec <d_exprlist+0xe78>
 800c112:	4620      	mov	r0, r4
 800c114:	f000 fe4c 	bl	800cdb0 <d_expression_1>
 800c118:	4603      	mov	r3, r0
 800c11a:	9a01      	ldr	r2, [sp, #4]
 800c11c:	213a      	movs	r1, #58	; 0x3a
 800c11e:	4620      	mov	r0, r4
 800c120:	f7fa fc32 	bl	8006988 <d_make_comp>
 800c124:	9a00      	ldr	r2, [sp, #0]
 800c126:	4603      	mov	r3, r0
 800c128:	2139      	movs	r1, #57	; 0x39
 800c12a:	4620      	mov	r0, r4
 800c12c:	f7fa fc2c 	bl	8006988 <d_make_comp>
 800c130:	465a      	mov	r2, fp
 800c132:	4603      	mov	r3, r0
 800c134:	2138      	movs	r1, #56	; 0x38
 800c136:	4620      	mov	r0, r4
 800c138:	f7fa fc26 	bl	8006988 <d_make_comp>
 800c13c:	4683      	mov	fp, r0
 800c13e:	f7ff ba89 	b.w	800b654 <d_exprlist+0x1e0>
 800c142:	bf00      	nop
 800c144:	080139a0 	.word	0x080139a0
 800c148:	08013998 	.word	0x08013998
 800c14c:	08013ab4 	.word	0x08013ab4
 800c150:	08013ab8 	.word	0x08013ab8
 800c154:	08013ca8 	.word	0x08013ca8
 800c158:	2300      	movs	r3, #0
 800c15a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c15e:	6812      	ldr	r2, [r2, #0]
 800c160:	7851      	ldrb	r1, [r2, #1]
 800c162:	2963      	cmp	r1, #99	; 0x63
 800c164:	f000 84d4 	beq.w	800cb10 <d_exprlist+0x169c>
 800c168:	4620      	mov	r0, r4
 800c16a:	9301      	str	r3, [sp, #4]
 800c16c:	f000 fe20 	bl	800cdb0 <d_expression_1>
 800c170:	9b01      	ldr	r3, [sp, #4]
 800c172:	9000      	str	r0, [sp, #0]
 800c174:	4618      	mov	r0, r3
 800c176:	49d1      	ldr	r1, [pc, #836]	; (800c4bc <d_exprlist+0x1048>)
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	f002 fd5d 	bl	800ec38 <strcmp>
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	2800      	cmp	r0, #0
 800c182:	f000 84be 	beq.w	800cb02 <d_exprlist+0x168e>
 800c186:	49ce      	ldr	r1, [pc, #824]	; (800c4c0 <d_exprlist+0x104c>)
 800c188:	4618      	mov	r0, r3
 800c18a:	9301      	str	r3, [sp, #4]
 800c18c:	f002 fd54 	bl	800ec38 <strcmp>
 800c190:	b138      	cbz	r0, 800c1a2 <d_exprlist+0xd2e>
 800c192:	9b01      	ldr	r3, [sp, #4]
 800c194:	49cb      	ldr	r1, [pc, #812]	; (800c4c4 <d_exprlist+0x1050>)
 800c196:	4618      	mov	r0, r3
 800c198:	f002 fd4e 	bl	800ec38 <strcmp>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	f040 84c8 	bne.w	800cb32 <d_exprlist+0x16be>
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f001 fc52 	bl	800da4c <d_unqualified_name>
 800c1a8:	68e3      	ldr	r3, [r4, #12]
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	2b49      	cmp	r3, #73	; 0x49
 800c1b0:	d10a      	bne.n	800c1c8 <d_exprlist+0xd54>
 800c1b2:	9001      	str	r0, [sp, #4]
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f7fe fae7 	bl	800a788 <d_template_args>
 800c1ba:	9a01      	ldr	r2, [sp, #4]
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2104      	movs	r1, #4
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f7fa fbe1 	bl	8006988 <d_make_comp>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	2137      	movs	r1, #55	; 0x37
 800c1cc:	9a00      	ldr	r2, [sp, #0]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f7fa fbda 	bl	8006988 <d_make_comp>
 800c1d4:	465a      	mov	r2, fp
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2136      	movs	r1, #54	; 0x36
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f7fa fbd4 	bl	8006988 <d_make_comp>
 800c1e0:	4683      	mov	fp, r0
 800c1e2:	f7ff ba37 	b.w	800b654 <d_exprlist+0x1e0>
 800c1e6:	7843      	ldrb	r3, [r0, #1]
 800c1e8:	2b72      	cmp	r3, #114	; 0x72
 800c1ea:	f000 82a7 	beq.w	800c73c <d_exprlist+0x12c8>
 800c1ee:	2b70      	cmp	r3, #112	; 0x70
 800c1f0:	f47f ac06 	bne.w	800ba00 <d_exprlist+0x58c>
 800c1f4:	1c82      	adds	r2, r0, #2
 800c1f6:	60e2      	str	r2, [r4, #12]
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f000 fdd9 	bl	800cdb0 <d_expression_1>
 800c1fe:	465b      	mov	r3, fp
 800c200:	4602      	mov	r2, r0
 800c202:	2149      	movs	r1, #73	; 0x49
 800c204:	e556      	b.n	800bcb4 <d_exprlist+0x840>
 800c206:	7853      	ldrb	r3, [r2, #1]
 800c208:	2b70      	cmp	r3, #112	; 0x70
 800c20a:	f47f af34 	bne.w	800c076 <d_exprlist+0xc02>
 800c20e:	1c93      	adds	r3, r2, #2
 800c210:	60e3      	str	r3, [r4, #12]
 800c212:	7893      	ldrb	r3, [r2, #2]
 800c214:	2b54      	cmp	r3, #84	; 0x54
 800c216:	f040 82cc 	bne.w	800c7b2 <d_exprlist+0x133e>
 800c21a:	3203      	adds	r2, #3
 800c21c:	60e2      	str	r2, [r4, #12]
 800c21e:	2000      	movs	r0, #0
 800c220:	6963      	ldr	r3, [r4, #20]
 800c222:	69a2      	ldr	r2, [r4, #24]
 800c224:	4293      	cmp	r3, r2
 800c226:	da61      	bge.n	800c2ec <d_exprlist+0xe78>
 800c228:	6922      	ldr	r2, [r4, #16]
 800c22a:	1c59      	adds	r1, r3, #1
 800c22c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c230:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 800c234:	6161      	str	r1, [r4, #20]
 800c236:	f43f aa0d 	beq.w	800b654 <d_exprlist+0x1e0>
 800c23a:	2106      	movs	r1, #6
 800c23c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800c240:	f8cb 0004 	str.w	r0, [fp, #4]
 800c244:	f7ff ba06 	b.w	800b654 <d_exprlist+0x1e0>
 800c248:	2b33      	cmp	r3, #51	; 0x33
 800c24a:	f47f aedb 	bne.w	800c004 <d_exprlist+0xb90>
 800c24e:	68e3      	ldr	r3, [r4, #12]
 800c250:	781a      	ldrb	r2, [r3, #0]
 800c252:	2a5f      	cmp	r2, #95	; 0x5f
 800c254:	f000 83b6 	beq.w	800c9c4 <d_exprlist+0x1550>
 800c258:	f04f 0900 	mov.w	r9, #0
 800c25c:	4620      	mov	r0, r4
 800c25e:	f000 fda7 	bl	800cdb0 <d_expression_1>
 800c262:	4603      	mov	r3, r0
 800c264:	f1b9 0f00 	cmp.w	r9, #0
 800c268:	d005      	beq.n	800c276 <d_exprlist+0xe02>
 800c26a:	4602      	mov	r2, r0
 800c26c:	2137      	movs	r1, #55	; 0x37
 800c26e:	4620      	mov	r0, r4
 800c270:	f7fa fb8a 	bl	8006988 <d_make_comp>
 800c274:	4603      	mov	r3, r0
 800c276:	4642      	mov	r2, r8
 800c278:	2135      	movs	r1, #53	; 0x35
 800c27a:	4620      	mov	r0, r4
 800c27c:	f7fa fb84 	bl	8006988 <d_make_comp>
 800c280:	4602      	mov	r2, r0
 800c282:	f7ff bac8 	b.w	800b816 <d_exprlist+0x3a2>
 800c286:	2b33      	cmp	r3, #51	; 0x33
 800c288:	f47f aec3 	bne.w	800c012 <d_exprlist+0xb9e>
 800c28c:	68e3      	ldr	r3, [r4, #12]
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	2a5f      	cmp	r2, #95	; 0x5f
 800c292:	f000 83e4 	beq.w	800ca5e <d_exprlist+0x15ea>
 800c296:	f04f 0b00 	mov.w	fp, #0
 800c29a:	4620      	mov	r0, r4
 800c29c:	f000 fd88 	bl	800cdb0 <d_expression_1>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	f1bb 0f00 	cmp.w	fp, #0
 800c2a6:	d005      	beq.n	800c2b4 <d_exprlist+0xe40>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	2137      	movs	r1, #55	; 0x37
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f7fa fb6b 	bl	8006988 <d_make_comp>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	4652      	mov	r2, sl
 800c2b6:	2135      	movs	r1, #53	; 0x35
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7fa fb65 	bl	8006988 <d_make_comp>
 800c2be:	4682      	mov	sl, r0
 800c2c0:	f7ff ba04 	b.w	800b6cc <d_exprlist+0x258>
 800c2c4:	784b      	ldrb	r3, [r1, #1]
 800c2c6:	2b6e      	cmp	r3, #110	; 0x6e
 800c2c8:	f47f abbd 	bne.w	800ba46 <d_exprlist+0x5d2>
 800c2cc:	3102      	adds	r1, #2
 800c2ce:	60e1      	str	r1, [r4, #12]
 800c2d0:	f7ff b9f0 	b.w	800b6b4 <d_exprlist+0x240>
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f002 fa35 	bl	800e744 <d_expr_primary>
 800c2da:	4682      	mov	sl, r0
 800c2dc:	f7ff b9f6 	b.w	800b6cc <d_exprlist+0x258>
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f7fa fcf3 	bl	8006ccc <d_template_param>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	f7ff ba95 	b.w	800b816 <d_exprlist+0x3a2>
 800c2ec:	f04f 0b00 	mov.w	fp, #0
 800c2f0:	f7ff b9b0 	b.w	800b654 <d_exprlist+0x1e0>
 800c2f4:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800c2f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c2fa:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c2fe:	f8da 9000 	ldr.w	r9, [sl]
 800c302:	3b02      	subs	r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	6323      	str	r3, [r4, #48]	; 0x30
 800c308:	4648      	mov	r0, r9
 800c30a:	496f      	ldr	r1, [pc, #444]	; (800c4c8 <d_exprlist+0x1054>)
 800c30c:	f002 fc94 	bl	800ec38 <strcmp>
 800c310:	2800      	cmp	r0, #0
 800c312:	f000 8281 	beq.w	800c818 <d_exprlist+0x13a4>
 800c316:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	f63f ae72 	bhi.w	800c004 <d_exprlist+0xb90>
 800c320:	a201      	add	r2, pc, #4	; (adr r2, 800c328 <d_exprlist+0xeb4>)
 800c322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c326:	bf00      	nop
 800c328:	0800be0d 	.word	0x0800be0d
 800c32c:	0800c5f5 	.word	0x0800c5f5
 800c330:	0800bea9 	.word	0x0800bea9
 800c334:	0800be21 	.word	0x0800be21
 800c338:	68e2      	ldr	r2, [r4, #12]
 800c33a:	f04f 0900 	mov.w	r9, #0
 800c33e:	7813      	ldrb	r3, [r2, #0]
 800c340:	f7ff babd 	b.w	800b8be <d_exprlist+0x44a>
 800c344:	6843      	ldr	r3, [r0, #4]
 800c346:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c348:	689a      	ldr	r2, [r3, #8]
 800c34a:	f8d3 b000 	ldr.w	fp, [r3]
 800c34e:	3a02      	subs	r2, #2
 800c350:	440a      	add	r2, r1
 800c352:	6322      	str	r2, [r4, #48]	; 0x30
 800c354:	4658      	mov	r0, fp
 800c356:	495c      	ldr	r1, [pc, #368]	; (800c4c8 <d_exprlist+0x1054>)
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	f002 fc6d 	bl	800ec38 <strcmp>
 800c35e:	9b00      	ldr	r3, [sp, #0]
 800c360:	2800      	cmp	r0, #0
 800c362:	f000 8272 	beq.w	800c84a <d_exprlist+0x13d6>
 800c366:	68da      	ldr	r2, [r3, #12]
 800c368:	2a03      	cmp	r2, #3
 800c36a:	f63f ae52 	bhi.w	800c012 <d_exprlist+0xb9e>
 800c36e:	a301      	add	r3, pc, #4	; (adr r3, 800c374 <d_exprlist+0xf00>)
 800c370:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c374:	0800bba9 	.word	0x0800bba9
 800c378:	0800c63f 	.word	0x0800c63f
 800c37c:	0800bc45 	.word	0x0800bc45
 800c380:	0800bbbd 	.word	0x0800bbbd
 800c384:	3301      	adds	r3, #1
 800c386:	60e3      	str	r3, [r4, #12]
 800c388:	f04f 0b00 	mov.w	fp, #0
 800c38c:	4620      	mov	r0, r4
 800c38e:	f000 fd0f 	bl	800cdb0 <d_expression_1>
 800c392:	4603      	mov	r3, r0
 800c394:	f1bb 0f00 	cmp.w	fp, #0
 800c398:	d005      	beq.n	800c3a6 <d_exprlist+0xf32>
 800c39a:	4602      	mov	r2, r0
 800c39c:	2137      	movs	r1, #55	; 0x37
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f7fa faf2 	bl	8006988 <d_make_comp>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	464a      	mov	r2, r9
 800c3a8:	2135      	movs	r1, #53	; 0x35
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f7fa faec 	bl	8006988 <d_make_comp>
 800c3b0:	4681      	mov	r9, r0
 800c3b2:	f7ff b9e1 	b.w	800b778 <d_exprlist+0x304>
 800c3b6:	3101      	adds	r1, #1
 800c3b8:	60e1      	str	r1, [r4, #12]
 800c3ba:	f7ff b9bf 	b.w	800b73c <d_exprlist+0x2c8>
 800c3be:	2b33      	cmp	r3, #51	; 0x33
 800c3c0:	d1ba      	bne.n	800c338 <d_exprlist+0xec4>
 800c3c2:	68e3      	ldr	r3, [r4, #12]
 800c3c4:	781a      	ldrb	r2, [r3, #0]
 800c3c6:	2a5f      	cmp	r2, #95	; 0x5f
 800c3c8:	f000 8286 	beq.w	800c8d8 <d_exprlist+0x1464>
 800c3cc:	f04f 0b00 	mov.w	fp, #0
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 fced 	bl	800cdb0 <d_expression_1>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	f1bb 0f00 	cmp.w	fp, #0
 800c3dc:	f000 8283 	beq.w	800c8e6 <d_exprlist+0x1472>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	2137      	movs	r1, #55	; 0x37
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7fa facf 	bl	8006988 <d_make_comp>
 800c3ea:	464a      	mov	r2, r9
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2135      	movs	r1, #53	; 0x35
 800c3f0:	e460      	b.n	800bcb4 <d_exprlist+0x840>
 800c3f2:	3102      	adds	r1, #2
 800c3f4:	60e1      	str	r1, [r4, #12]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 feac 	bl	800d154 <d_type>
 800c3fc:	4681      	mov	r9, r0
 800c3fe:	4620      	mov	r0, r4
 800c400:	f001 fb24 	bl	800da4c <d_unqualified_name>
 800c404:	68e3      	ldr	r3, [r4, #12]
 800c406:	4683      	mov	fp, r0
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	2b49      	cmp	r3, #73	; 0x49
 800c40c:	f000 81e1 	beq.w	800c7d2 <d_exprlist+0x135e>
 800c410:	4603      	mov	r3, r0
 800c412:	464a      	mov	r2, r9
 800c414:	2101      	movs	r1, #1
 800c416:	4620      	mov	r0, r4
 800c418:	f7fa fab6 	bl	8006988 <d_make_comp>
 800c41c:	4681      	mov	r9, r0
 800c41e:	f7ff b9ab 	b.w	800b778 <d_exprlist+0x304>
 800c422:	2b33      	cmp	r3, #51	; 0x33
 800c424:	f47f af62 	bne.w	800c2ec <d_exprlist+0xe78>
 800c428:	68e3      	ldr	r3, [r4, #12]
 800c42a:	781a      	ldrb	r2, [r3, #0]
 800c42c:	2a5f      	cmp	r2, #95	; 0x5f
 800c42e:	f000 83b7 	beq.w	800cba0 <d_exprlist+0x172c>
 800c432:	2200      	movs	r2, #0
 800c434:	4620      	mov	r0, r4
 800c436:	9200      	str	r2, [sp, #0]
 800c438:	f000 fcba 	bl	800cdb0 <d_expression_1>
 800c43c:	9a00      	ldr	r2, [sp, #0]
 800c43e:	4603      	mov	r3, r0
 800c440:	b12a      	cbz	r2, 800c44e <d_exprlist+0xfda>
 800c442:	4602      	mov	r2, r0
 800c444:	2137      	movs	r1, #55	; 0x37
 800c446:	4620      	mov	r0, r4
 800c448:	f7fa fa9e 	bl	8006988 <d_make_comp>
 800c44c:	4603      	mov	r3, r0
 800c44e:	465a      	mov	r2, fp
 800c450:	2135      	movs	r1, #53	; 0x35
 800c452:	4620      	mov	r0, r4
 800c454:	f7fa fa98 	bl	8006988 <d_make_comp>
 800c458:	4683      	mov	fp, r0
 800c45a:	f7ff b8fb 	b.w	800b654 <d_exprlist+0x1e0>
 800c45e:	f1bb 0f00 	cmp.w	fp, #0
 800c462:	d091      	beq.n	800c388 <d_exprlist+0xf14>
 800c464:	f89b 2000 	ldrb.w	r2, [fp]
 800c468:	2a70      	cmp	r2, #112	; 0x70
 800c46a:	d001      	beq.n	800c470 <d_exprlist+0xffc>
 800c46c:	2a6d      	cmp	r2, #109	; 0x6d
 800c46e:	d18b      	bne.n	800c388 <d_exprlist+0xf14>
 800c470:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c474:	4293      	cmp	r3, r2
 800c476:	d187      	bne.n	800c388 <d_exprlist+0xf14>
 800c478:	68e3      	ldr	r3, [r4, #12]
 800c47a:	781a      	ldrb	r2, [r3, #0]
 800c47c:	2a5f      	cmp	r2, #95	; 0x5f
 800c47e:	d081      	beq.n	800c384 <d_exprlist+0xf10>
 800c480:	f04f 0b01 	mov.w	fp, #1
 800c484:	e782      	b.n	800c38c <d_exprlist+0xf18>
 800c486:	4620      	mov	r0, r4
 800c488:	f7fe f97e 	bl	800a788 <d_template_args>
 800c48c:	4642      	mov	r2, r8
 800c48e:	4603      	mov	r3, r0
 800c490:	2104      	movs	r1, #4
 800c492:	4620      	mov	r0, r4
 800c494:	f7fa fa78 	bl	8006988 <d_make_comp>
 800c498:	4602      	mov	r2, r0
 800c49a:	f7ff b9bc 	b.w	800b816 <d_exprlist+0x3a2>
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f002 f950 	bl	800e744 <d_expr_primary>
 800c4a4:	4683      	mov	fp, r0
 800c4a6:	f7ff b8d5 	b.w	800b654 <d_exprlist+0x1e0>
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f7fa fbf6 	bl	8006c9c <d_compact_number>
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	f47f aa7a 	bne.w	800b9aa <d_exprlist+0x536>
 800c4b6:	4681      	mov	r9, r0
 800c4b8:	f7ff b95e 	b.w	800b778 <d_exprlist+0x304>
 800c4bc:	08013998 	.word	0x08013998
 800c4c0:	08013ab4 	.word	0x08013ab4
 800c4c4:	08013ab8 	.word	0x08013ab8
 800c4c8:	08013ca8 	.word	0x08013ca8
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f002 f939 	bl	800e744 <d_expr_primary>
 800c4d2:	68e2      	ldr	r2, [r4, #12]
 800c4d4:	4681      	mov	r9, r0
 800c4d6:	7813      	ldrb	r3, [r2, #0]
 800c4d8:	f7ff b9f1 	b.w	800b8be <d_exprlist+0x44a>
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7fa fbf5 	bl	8006ccc <d_template_param>
 800c4e2:	4683      	mov	fp, r0
 800c4e4:	f7ff b8b6 	b.w	800b654 <d_exprlist+0x1e0>
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f7fe f94d 	bl	800a788 <d_template_args>
 800c4ee:	4652      	mov	r2, sl
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2104      	movs	r1, #4
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f7fa fa47 	bl	8006988 <d_make_comp>
 800c4fa:	4682      	mov	sl, r0
 800c4fc:	f7ff b8e6 	b.w	800b6cc <d_exprlist+0x258>
 800c500:	4620      	mov	r0, r4
 800c502:	f7fa fbe3 	bl	8006ccc <d_template_param>
 800c506:	68e2      	ldr	r2, [r4, #12]
 800c508:	4681      	mov	r9, r0
 800c50a:	7813      	ldrb	r3, [r2, #0]
 800c50c:	f7ff b9d7 	b.w	800b8be <d_exprlist+0x44a>
 800c510:	6842      	ldr	r2, [r0, #4]
 800c512:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c514:	6891      	ldr	r1, [r2, #8]
 800c516:	6813      	ldr	r3, [r2, #0]
 800c518:	3902      	subs	r1, #2
 800c51a:	4401      	add	r1, r0
 800c51c:	6321      	str	r1, [r4, #48]	; 0x30
 800c51e:	4618      	mov	r0, r3
 800c520:	49d2      	ldr	r1, [pc, #840]	; (800c86c <d_exprlist+0x13f8>)
 800c522:	9201      	str	r2, [sp, #4]
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	f002 fb87 	bl	800ec38 <strcmp>
 800c52a:	9b00      	ldr	r3, [sp, #0]
 800c52c:	9a01      	ldr	r2, [sp, #4]
 800c52e:	2800      	cmp	r0, #0
 800c530:	f000 8190 	beq.w	800c854 <d_exprlist+0x13e0>
 800c534:	68d2      	ldr	r2, [r2, #12]
 800c536:	2a03      	cmp	r2, #3
 800c538:	f63f aed8 	bhi.w	800c2ec <d_exprlist+0xe78>
 800c53c:	a101      	add	r1, pc, #4	; (adr r1, 800c544 <d_exprlist+0x10d0>)
 800c53e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c542:	bf00      	nop
 800c544:	0800c0a9 	.word	0x0800c0a9
 800c548:	0800c823 	.word	0x0800c823
 800c54c:	0800c15b 	.word	0x0800c15b
 800c550:	0800c0bd 	.word	0x0800c0bd
 800c554:	6843      	ldr	r3, [r0, #4]
 800c556:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c558:	689a      	ldr	r2, [r3, #8]
 800c55a:	f8d3 b000 	ldr.w	fp, [r3]
 800c55e:	3a02      	subs	r2, #2
 800c560:	440a      	add	r2, r1
 800c562:	6322      	str	r2, [r4, #48]	; 0x30
 800c564:	4658      	mov	r0, fp
 800c566:	49c1      	ldr	r1, [pc, #772]	; (800c86c <d_exprlist+0x13f8>)
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	f002 fb65 	bl	800ec38 <strcmp>
 800c56e:	9b00      	ldr	r3, [sp, #0]
 800c570:	2800      	cmp	r0, #0
 800c572:	f000 81fd 	beq.w	800c970 <d_exprlist+0x14fc>
 800c576:	68da      	ldr	r2, [r3, #12]
 800c578:	2a03      	cmp	r2, #3
 800c57a:	f63f aedd 	bhi.w	800c338 <d_exprlist+0xec4>
 800c57e:	a301      	add	r3, pc, #4	; (adr r3, 800c584 <d_exprlist+0x1110>)
 800c580:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c584:	0800bcaf 	.word	0x0800bcaf
 800c588:	0800c7e9 	.word	0x0800c7e9
 800c58c:	0800bd47 	.word	0x0800bd47
 800c590:	0800bcc7 	.word	0x0800bcc7
 800c594:	3102      	adds	r1, #2
 800c596:	60e1      	str	r1, [r4, #12]
 800c598:	4620      	mov	r0, r4
 800c59a:	f000 fc09 	bl	800cdb0 <d_expression_1>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	2149      	movs	r1, #73	; 0x49
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f7fa f9ef 	bl	8006988 <d_make_comp>
 800c5aa:	4681      	mov	r9, r0
 800c5ac:	f7ff b8e4 	b.w	800b778 <d_exprlist+0x304>
 800c5b0:	1c83      	adds	r3, r0, #2
 800c5b2:	60e3      	str	r3, [r4, #12]
 800c5b4:	7883      	ldrb	r3, [r0, #2]
 800c5b6:	2b54      	cmp	r3, #84	; 0x54
 800c5b8:	f040 80d9 	bne.w	800c76e <d_exprlist+0x12fa>
 800c5bc:	1cc2      	adds	r2, r0, #3
 800c5be:	4658      	mov	r0, fp
 800c5c0:	60e2      	str	r2, [r4, #12]
 800c5c2:	6963      	ldr	r3, [r4, #20]
 800c5c4:	69a1      	ldr	r1, [r4, #24]
 800c5c6:	428b      	cmp	r3, r1
 800c5c8:	f280 80cc 	bge.w	800c764 <d_exprlist+0x12f0>
 800c5cc:	6921      	ldr	r1, [r4, #16]
 800c5ce:	f103 0e01 	add.w	lr, r3, #1
 800c5d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c5d6:	eb11 0983 	adds.w	r9, r1, r3, lsl #2
 800c5da:	f8c4 e014 	str.w	lr, [r4, #20]
 800c5de:	f43f ab6e 	beq.w	800bcbe <d_exprlist+0x84a>
 800c5e2:	f04f 0e06 	mov.w	lr, #6
 800c5e6:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 800c5ea:	f8c9 0004 	str.w	r0, [r9, #4]
 800c5ee:	7813      	ldrb	r3, [r2, #0]
 800c5f0:	f7ff b965 	b.w	800b8be <d_exprlist+0x44a>
 800c5f4:	f1b9 0f00 	cmp.w	r9, #0
 800c5f8:	f43f ae2e 	beq.w	800c258 <d_exprlist+0xde4>
 800c5fc:	f899 3000 	ldrb.w	r3, [r9]
 800c600:	2b70      	cmp	r3, #112	; 0x70
 800c602:	d002      	beq.n	800c60a <d_exprlist+0x1196>
 800c604:	2b6d      	cmp	r3, #109	; 0x6d
 800c606:	f47f ae27 	bne.w	800c258 <d_exprlist+0xde4>
 800c60a:	f899 2001 	ldrb.w	r2, [r9, #1]
 800c60e:	429a      	cmp	r2, r3
 800c610:	f47f ae22 	bne.w	800c258 <d_exprlist+0xde4>
 800c614:	68e3      	ldr	r3, [r4, #12]
 800c616:	781a      	ldrb	r2, [r3, #0]
 800c618:	2a5f      	cmp	r2, #95	; 0x5f
 800c61a:	f000 8376 	beq.w	800cd0a <d_exprlist+0x1896>
 800c61e:	f04f 0901 	mov.w	r9, #1
 800c622:	e61b      	b.n	800c25c <d_exprlist+0xde8>
 800c624:	68e3      	ldr	r3, [r4, #12]
 800c626:	781a      	ldrb	r2, [r3, #0]
 800c628:	2a5f      	cmp	r2, #95	; 0x5f
 800c62a:	f47f aead 	bne.w	800c388 <d_exprlist+0xf14>
 800c62e:	3301      	adds	r3, #1
 800c630:	60e3      	str	r3, [r4, #12]
 800c632:	2145      	movs	r1, #69	; 0x45
 800c634:	4620      	mov	r0, r4
 800c636:	f7fe ff1d 	bl	800b474 <d_exprlist>
 800c63a:	4603      	mov	r3, r0
 800c63c:	e6b3      	b.n	800c3a6 <d_exprlist+0xf32>
 800c63e:	f1bb 0f00 	cmp.w	fp, #0
 800c642:	f43f ae28 	beq.w	800c296 <d_exprlist+0xe22>
 800c646:	f89b 2000 	ldrb.w	r2, [fp]
 800c64a:	2a70      	cmp	r2, #112	; 0x70
 800c64c:	d002      	beq.n	800c654 <d_exprlist+0x11e0>
 800c64e:	2a6d      	cmp	r2, #109	; 0x6d
 800c650:	f47f ae21 	bne.w	800c296 <d_exprlist+0xe22>
 800c654:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c658:	4293      	cmp	r3, r2
 800c65a:	f47f ae1c 	bne.w	800c296 <d_exprlist+0xe22>
 800c65e:	68e3      	ldr	r3, [r4, #12]
 800c660:	781a      	ldrb	r2, [r3, #0]
 800c662:	2a5f      	cmp	r2, #95	; 0x5f
 800c664:	f000 82f7 	beq.w	800cc56 <d_exprlist+0x17e2>
 800c668:	f04f 0b01 	mov.w	fp, #1
 800c66c:	e615      	b.n	800c29a <d_exprlist+0xe26>
 800c66e:	3204      	adds	r2, #4
 800c670:	60e2      	str	r2, [r4, #12]
 800c672:	4620      	mov	r0, r4
 800c674:	f000 fd6e 	bl	800d154 <d_type>
 800c678:	4680      	mov	r8, r0
 800c67a:	4620      	mov	r0, r4
 800c67c:	f001 f9e6 	bl	800da4c <d_unqualified_name>
 800c680:	68e3      	ldr	r3, [r4, #12]
 800c682:	4681      	mov	r9, r0
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2b49      	cmp	r3, #73	; 0x49
 800c688:	f000 810c 	beq.w	800c8a4 <d_exprlist+0x1430>
 800c68c:	4603      	mov	r3, r0
 800c68e:	4642      	mov	r2, r8
 800c690:	2101      	movs	r1, #1
 800c692:	4620      	mov	r0, r4
 800c694:	f7fa f978 	bl	8006988 <d_make_comp>
 800c698:	4602      	mov	r2, r0
 800c69a:	f7ff b8bc 	b.w	800b816 <d_exprlist+0x3a2>
 800c69e:	4620      	mov	r0, r4
 800c6a0:	f000 fd58 	bl	800d154 <d_type>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	e67e      	b.n	800c3a6 <d_exprlist+0xf32>
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f7fe f86d 	bl	800a788 <d_template_args>
 800c6ae:	464a      	mov	r2, r9
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2104      	movs	r1, #4
 800c6b4:	f7ff bafe 	b.w	800bcb4 <d_exprlist+0x840>
 800c6b8:	3102      	adds	r1, #2
 800c6ba:	60e1      	str	r1, [r4, #12]
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 fd49 	bl	800d154 <d_type>
 800c6c2:	4682      	mov	sl, r0
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f001 f9c1 	bl	800da4c <d_unqualified_name>
 800c6ca:	68e3      	ldr	r3, [r4, #12]
 800c6cc:	4683      	mov	fp, r0
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	2b49      	cmp	r3, #73	; 0x49
 800c6d2:	f000 80dc 	beq.w	800c88e <d_exprlist+0x141a>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	4652      	mov	r2, sl
 800c6da:	2101      	movs	r1, #1
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f7fa f953 	bl	8006988 <d_make_comp>
 800c6e2:	4682      	mov	sl, r0
 800c6e4:	f7fe bff2 	b.w	800b6cc <d_exprlist+0x258>
 800c6e8:	7812      	ldrb	r2, [r2, #0]
 800c6ea:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800c6ee:	2901      	cmp	r1, #1
 800c6f0:	d903      	bls.n	800c6fa <d_exprlist+0x1286>
 800c6f2:	3a72      	subs	r2, #114	; 0x72
 800c6f4:	2a01      	cmp	r2, #1
 800c6f6:	f63f aa29 	bhi.w	800bb4c <d_exprlist+0x6d8>
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 fd2a 	bl	800d154 <d_type>
 800c700:	9000      	str	r0, [sp, #0]
 800c702:	f7ff ba27 	b.w	800bb54 <d_exprlist+0x6e0>
 800c706:	4620      	mov	r0, r4
 800c708:	f000 fb52 	bl	800cdb0 <d_expression_1>
 800c70c:	9000      	str	r0, [sp, #0]
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 fb4e 	bl	800cdb0 <d_expression_1>
 800c714:	4683      	mov	fp, r0
 800c716:	4620      	mov	r0, r4
 800c718:	f000 fb4a 	bl	800cdb0 <d_expression_1>
 800c71c:	f7ff b9f9 	b.w	800bb12 <d_exprlist+0x69e>
 800c720:	3204      	adds	r2, #4
 800c722:	60e2      	str	r2, [r4, #12]
 800c724:	4620      	mov	r0, r4
 800c726:	f000 fb43 	bl	800cdb0 <d_expression_1>
 800c72a:	2300      	movs	r3, #0
 800c72c:	4602      	mov	r2, r0
 800c72e:	2149      	movs	r1, #73	; 0x49
 800c730:	4620      	mov	r0, r4
 800c732:	f7fa f929 	bl	8006988 <d_make_comp>
 800c736:	4602      	mov	r2, r0
 800c738:	f7ff b86d 	b.w	800b816 <d_exprlist+0x3a2>
 800c73c:	1c82      	adds	r2, r0, #2
 800c73e:	60e2      	str	r2, [r4, #12]
 800c740:	4620      	mov	r0, r4
 800c742:	f000 fd07 	bl	800d154 <d_type>
 800c746:	4681      	mov	r9, r0
 800c748:	4620      	mov	r0, r4
 800c74a:	f001 f97f 	bl	800da4c <d_unqualified_name>
 800c74e:	68e3      	ldr	r3, [r4, #12]
 800c750:	4683      	mov	fp, r0
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	2b49      	cmp	r3, #73	; 0x49
 800c756:	f000 818a 	beq.w	800ca6e <d_exprlist+0x15fa>
 800c75a:	4603      	mov	r3, r0
 800c75c:	464a      	mov	r2, r9
 800c75e:	2101      	movs	r1, #1
 800c760:	f7ff baa8 	b.w	800bcb4 <d_exprlist+0x840>
 800c764:	7813      	ldrb	r3, [r2, #0]
 800c766:	f04f 0900 	mov.w	r9, #0
 800c76a:	f7ff b8a8 	b.w	800b8be <d_exprlist+0x44a>
 800c76e:	4620      	mov	r0, r4
 800c770:	f7fa fa94 	bl	8006c9c <d_compact_number>
 800c774:	3001      	adds	r0, #1
 800c776:	68e2      	ldr	r2, [r4, #12]
 800c778:	f47f af23 	bne.w	800c5c2 <d_exprlist+0x114e>
 800c77c:	4681      	mov	r9, r0
 800c77e:	7813      	ldrb	r3, [r2, #0]
 800c780:	f7ff b89d 	b.w	800b8be <d_exprlist+0x44a>
 800c784:	3202      	adds	r2, #2
 800c786:	60e2      	str	r2, [r4, #12]
 800c788:	4620      	mov	r0, r4
 800c78a:	f000 fce3 	bl	800d154 <d_type>
 800c78e:	4683      	mov	fp, r0
 800c790:	4620      	mov	r0, r4
 800c792:	f001 f95b 	bl	800da4c <d_unqualified_name>
 800c796:	68e3      	ldr	r3, [r4, #12]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b49      	cmp	r3, #73	; 0x49
 800c79c:	f000 8198 	beq.w	800cad0 <d_exprlist+0x165c>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	465a      	mov	r2, fp
 800c7a4:	2101      	movs	r1, #1
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f7fa f8ee 	bl	8006988 <d_make_comp>
 800c7ac:	4683      	mov	fp, r0
 800c7ae:	f7fe bf51 	b.w	800b654 <d_exprlist+0x1e0>
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f7fa fa72 	bl	8006c9c <d_compact_number>
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	f47f ad31 	bne.w	800c220 <d_exprlist+0xdac>
 800c7be:	4683      	mov	fp, r0
 800c7c0:	f7fe bf48 	b.w	800b654 <d_exprlist+0x1e0>
 800c7c4:	2145      	movs	r1, #69	; 0x45
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f7fe fe54 	bl	800b474 <d_exprlist>
 800c7cc:	4683      	mov	fp, r0
 800c7ce:	f7ff b9dd 	b.w	800bb8c <d_exprlist+0x718>
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f7fd ffd8 	bl	800a788 <d_template_args>
 800c7d8:	465a      	mov	r2, fp
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2104      	movs	r1, #4
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f7fa f8d2 	bl	8006988 <d_make_comp>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	e614      	b.n	800c412 <d_exprlist+0xf9e>
 800c7e8:	f1bb 0f00 	cmp.w	fp, #0
 800c7ec:	f43f adee 	beq.w	800c3cc <d_exprlist+0xf58>
 800c7f0:	f89b 2000 	ldrb.w	r2, [fp]
 800c7f4:	2a70      	cmp	r2, #112	; 0x70
 800c7f6:	d002      	beq.n	800c7fe <d_exprlist+0x138a>
 800c7f8:	2a6d      	cmp	r2, #109	; 0x6d
 800c7fa:	f47f ade7 	bne.w	800c3cc <d_exprlist+0xf58>
 800c7fe:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c802:	4293      	cmp	r3, r2
 800c804:	f47f ade2 	bne.w	800c3cc <d_exprlist+0xf58>
 800c808:	68e3      	ldr	r3, [r4, #12]
 800c80a:	781a      	ldrb	r2, [r3, #0]
 800c80c:	2a5f      	cmp	r2, #95	; 0x5f
 800c80e:	f000 81cf 	beq.w	800cbb0 <d_exprlist+0x173c>
 800c812:	f04f 0b01 	mov.w	fp, #1
 800c816:	e5db      	b.n	800c3d0 <d_exprlist+0xf5c>
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 fc9b 	bl	800d154 <d_type>
 800c81e:	4603      	mov	r3, r0
 800c820:	e529      	b.n	800c276 <d_exprlist+0xe02>
 800c822:	2b00      	cmp	r3, #0
 800c824:	f43f ae05 	beq.w	800c432 <d_exprlist+0xfbe>
 800c828:	781a      	ldrb	r2, [r3, #0]
 800c82a:	2a70      	cmp	r2, #112	; 0x70
 800c82c:	d002      	beq.n	800c834 <d_exprlist+0x13c0>
 800c82e:	2a6d      	cmp	r2, #109	; 0x6d
 800c830:	f47f adff 	bne.w	800c432 <d_exprlist+0xfbe>
 800c834:	785b      	ldrb	r3, [r3, #1]
 800c836:	4293      	cmp	r3, r2
 800c838:	f47f adfb 	bne.w	800c432 <d_exprlist+0xfbe>
 800c83c:	68e3      	ldr	r3, [r4, #12]
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	2a5f      	cmp	r2, #95	; 0x5f
 800c842:	f000 81b8 	beq.w	800cbb6 <d_exprlist+0x1742>
 800c846:	2201      	movs	r2, #1
 800c848:	e5f4      	b.n	800c434 <d_exprlist+0xfc0>
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fc82 	bl	800d154 <d_type>
 800c850:	4603      	mov	r3, r0
 800c852:	e52f      	b.n	800c2b4 <d_exprlist+0xe40>
 800c854:	4620      	mov	r0, r4
 800c856:	f000 fc7d 	bl	800d154 <d_type>
 800c85a:	4603      	mov	r3, r0
 800c85c:	e5f7      	b.n	800c44e <d_exprlist+0xfda>
 800c85e:	2145      	movs	r1, #69	; 0x45
 800c860:	4620      	mov	r0, r4
 800c862:	f7fe fe07 	bl	800b474 <d_exprlist>
 800c866:	4681      	mov	r9, r0
 800c868:	f7ff bb45 	b.w	800bef6 <d_exprlist+0xa82>
 800c86c:	08013ca8 	.word	0x08013ca8
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800c876:	2a01      	cmp	r2, #1
 800c878:	d903      	bls.n	800c882 <d_exprlist+0x140e>
 800c87a:	3b72      	subs	r3, #114	; 0x72
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	f63f ab1a 	bhi.w	800beb6 <d_exprlist+0xa42>
 800c882:	4620      	mov	r0, r4
 800c884:	f000 fc66 	bl	800d154 <d_type>
 800c888:	4682      	mov	sl, r0
 800c88a:	f7ff bb18 	b.w	800bebe <d_exprlist+0xa4a>
 800c88e:	4620      	mov	r0, r4
 800c890:	f7fd ff7a 	bl	800a788 <d_template_args>
 800c894:	465a      	mov	r2, fp
 800c896:	4603      	mov	r3, r0
 800c898:	2104      	movs	r1, #4
 800c89a:	4620      	mov	r0, r4
 800c89c:	f7fa f874 	bl	8006988 <d_make_comp>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	e719      	b.n	800c6d8 <d_exprlist+0x1264>
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f7fd ff6f 	bl	800a788 <d_template_args>
 800c8aa:	464a      	mov	r2, r9
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2104      	movs	r1, #4
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f7fa f869 	bl	8006988 <d_make_comp>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	e6e9      	b.n	800c68e <d_exprlist+0x121a>
 800c8ba:	7812      	ldrb	r2, [r2, #0]
 800c8bc:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800c8c0:	2901      	cmp	r1, #1
 800c8c2:	d903      	bls.n	800c8cc <d_exprlist+0x1458>
 800c8c4:	3a72      	subs	r2, #114	; 0x72
 800c8c6:	2a01      	cmp	r2, #1
 800c8c8:	f63f a9c3 	bhi.w	800bc52 <d_exprlist+0x7de>
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 fc41 	bl	800d154 <d_type>
 800c8d2:	9000      	str	r0, [sp, #0]
 800c8d4:	f7ff b9c1 	b.w	800bc5a <d_exprlist+0x7e6>
 800c8d8:	3301      	adds	r3, #1
 800c8da:	60e3      	str	r3, [r4, #12]
 800c8dc:	2145      	movs	r1, #69	; 0x45
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f7fe fdc8 	bl	800b474 <d_exprlist>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	464a      	mov	r2, r9
 800c8e8:	2135      	movs	r1, #53	; 0x35
 800c8ea:	f7ff b9e3 	b.w	800bcb4 <d_exprlist+0x840>
 800c8ee:	2145      	movs	r1, #69	; 0x45
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f7fe fdbf 	bl	800b474 <d_exprlist>
 800c8f6:	4683      	mov	fp, r0
 800c8f8:	f7ff b9cb 	b.w	800bc92 <d_exprlist+0x81e>
 800c8fc:	3202      	adds	r2, #2
 800c8fe:	60e2      	str	r2, [r4, #12]
 800c900:	4620      	mov	r0, r4
 800c902:	f000 fa55 	bl	800cdb0 <d_expression_1>
 800c906:	2300      	movs	r3, #0
 800c908:	4602      	mov	r2, r0
 800c90a:	2149      	movs	r1, #73	; 0x49
 800c90c:	4620      	mov	r0, r4
 800c90e:	f7fa f83b 	bl	8006988 <d_make_comp>
 800c912:	4683      	mov	fp, r0
 800c914:	f7fe be9e 	b.w	800b654 <d_exprlist+0x1e0>
 800c918:	4620      	mov	r0, r4
 800c91a:	f000 fa49 	bl	800cdb0 <d_expression_1>
 800c91e:	4681      	mov	r9, r0
 800c920:	4620      	mov	r0, r4
 800c922:	f000 fa45 	bl	800cdb0 <d_expression_1>
 800c926:	4682      	mov	sl, r0
 800c928:	4620      	mov	r0, r4
 800c92a:	f000 fa41 	bl	800cdb0 <d_expression_1>
 800c92e:	f7ff baa5 	b.w	800be7c <d_exprlist+0xa08>
 800c932:	4620      	mov	r0, r4
 800c934:	f000 fa3c 	bl	800cdb0 <d_expression_1>
 800c938:	4683      	mov	fp, r0
 800c93a:	f7ff b927 	b.w	800bb8c <d_exprlist+0x718>
 800c93e:	4620      	mov	r0, r4
 800c940:	f7fd ff22 	bl	800a788 <d_template_args>
 800c944:	465a      	mov	r2, fp
 800c946:	4603      	mov	r3, r0
 800c948:	2104      	movs	r1, #4
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7fa f81c 	bl	8006988 <d_make_comp>
 800c950:	4683      	mov	fp, r0
 800c952:	f7ff b91b 	b.w	800bb8c <d_exprlist+0x718>
 800c956:	4620      	mov	r0, r4
 800c958:	f000 fa2a 	bl	800cdb0 <d_expression_1>
 800c95c:	9000      	str	r0, [sp, #0]
 800c95e:	4620      	mov	r0, r4
 800c960:	f000 fa26 	bl	800cdb0 <d_expression_1>
 800c964:	4683      	mov	fp, r0
 800c966:	4620      	mov	r0, r4
 800c968:	f000 fa22 	bl	800cdb0 <d_expression_1>
 800c96c:	f7ff b954 	b.w	800bc18 <d_exprlist+0x7a4>
 800c970:	4620      	mov	r0, r4
 800c972:	f000 fbef 	bl	800d154 <d_type>
 800c976:	464a      	mov	r2, r9
 800c978:	4603      	mov	r3, r0
 800c97a:	2135      	movs	r1, #53	; 0x35
 800c97c:	f7ff b99a 	b.w	800bcb4 <d_exprlist+0x840>
 800c980:	3301      	adds	r3, #1
 800c982:	60e3      	str	r3, [r4, #12]
 800c984:	2000      	movs	r0, #0
 800c986:	f7ff b8c4 	b.w	800bb12 <d_exprlist+0x69e>
 800c98a:	785a      	ldrb	r2, [r3, #1]
 800c98c:	2a69      	cmp	r2, #105	; 0x69
 800c98e:	f47f ab40 	bne.w	800c012 <d_exprlist+0xb9e>
 800c992:	3302      	adds	r3, #2
 800c994:	60e3      	str	r3, [r4, #12]
 800c996:	2145      	movs	r1, #69	; 0x45
 800c998:	4620      	mov	r0, r4
 800c99a:	f7fe fd6b 	bl	800b474 <d_exprlist>
 800c99e:	f7ff b93b 	b.w	800bc18 <d_exprlist+0x7a4>
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	60e3      	str	r3, [r4, #12]
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	f7ff b936 	b.w	800bc18 <d_exprlist+0x7a4>
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 f9ff 	bl	800cdb0 <d_expression_1>
 800c9b2:	4683      	mov	fp, r0
 800c9b4:	f7ff b96d 	b.w	800bc92 <d_exprlist+0x81e>
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f000 f9f9 	bl	800cdb0 <d_expression_1>
 800c9be:	4683      	mov	fp, r0
 800c9c0:	f7ff b9f1 	b.w	800bda6 <d_exprlist+0x932>
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	60e3      	str	r3, [r4, #12]
 800c9c8:	2145      	movs	r1, #69	; 0x45
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f7fe fd52 	bl	800b474 <d_exprlist>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	e450      	b.n	800c276 <d_exprlist+0xe02>
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f000 f9eb 	bl	800cdb0 <d_expression_1>
 800c9da:	4681      	mov	r9, r0
 800c9dc:	f7ff ba8b 	b.w	800bef6 <d_exprlist+0xa82>
 800c9e0:	785a      	ldrb	r2, [r3, #1]
 800c9e2:	2a69      	cmp	r2, #105	; 0x69
 800c9e4:	f47f ab0e 	bne.w	800c004 <d_exprlist+0xb90>
 800c9e8:	3302      	adds	r3, #2
 800c9ea:	60e3      	str	r3, [r4, #12]
 800c9ec:	2145      	movs	r1, #69	; 0x45
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f7fe fd40 	bl	800b474 <d_exprlist>
 800c9f4:	f7ff ba42 	b.w	800be7c <d_exprlist+0xa08>
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	60e3      	str	r3, [r4, #12]
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	f7ff ba3d 	b.w	800be7c <d_exprlist+0xa08>
 800ca02:	2145      	movs	r1, #69	; 0x45
 800ca04:	4620      	mov	r0, r4
 800ca06:	f7fe fd35 	bl	800b474 <d_exprlist>
 800ca0a:	4683      	mov	fp, r0
 800ca0c:	f7ff b9cb 	b.w	800bda6 <d_exprlist+0x932>
 800ca10:	7812      	ldrb	r2, [r2, #0]
 800ca12:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800ca16:	2901      	cmp	r1, #1
 800ca18:	d903      	bls.n	800ca22 <d_exprlist+0x15ae>
 800ca1a:	3a72      	subs	r2, #114	; 0x72
 800ca1c:	2a01      	cmp	r2, #1
 800ca1e:	f63f a999 	bhi.w	800bd54 <d_exprlist+0x8e0>
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 fb96 	bl	800d154 <d_type>
 800ca28:	9000      	str	r0, [sp, #0]
 800ca2a:	f7ff b997 	b.w	800bd5c <d_exprlist+0x8e8>
 800ca2e:	785a      	ldrb	r2, [r3, #1]
 800ca30:	2a69      	cmp	r2, #105	; 0x69
 800ca32:	f47e afab 	bne.w	800b98c <d_exprlist+0x518>
 800ca36:	3302      	adds	r3, #2
 800ca38:	60e3      	str	r3, [r4, #12]
 800ca3a:	2145      	movs	r1, #69	; 0x45
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f7fe fd19 	bl	800b474 <d_exprlist>
 800ca42:	f7ff b866 	b.w	800bb12 <d_exprlist+0x69e>
 800ca46:	4620      	mov	r0, r4
 800ca48:	f7fd fe9e 	bl	800a788 <d_template_args>
 800ca4c:	465a      	mov	r2, fp
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2104      	movs	r1, #4
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7f9 ff98 	bl	8006988 <d_make_comp>
 800ca58:	4683      	mov	fp, r0
 800ca5a:	f7ff b91a 	b.w	800bc92 <d_exprlist+0x81e>
 800ca5e:	3301      	adds	r3, #1
 800ca60:	60e3      	str	r3, [r4, #12]
 800ca62:	2145      	movs	r1, #69	; 0x45
 800ca64:	4620      	mov	r0, r4
 800ca66:	f7fe fd05 	bl	800b474 <d_exprlist>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	e422      	b.n	800c2b4 <d_exprlist+0xe40>
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f7fd fe8a 	bl	800a788 <d_template_args>
 800ca74:	465a      	mov	r2, fp
 800ca76:	4603      	mov	r3, r0
 800ca78:	2104      	movs	r1, #4
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7f9 ff84 	bl	8006988 <d_make_comp>
 800ca80:	464a      	mov	r2, r9
 800ca82:	4603      	mov	r3, r0
 800ca84:	2101      	movs	r1, #1
 800ca86:	f7ff b915 	b.w	800bcb4 <d_exprlist+0x840>
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f7fd fe7c 	bl	800a788 <d_template_args>
 800ca90:	464a      	mov	r2, r9
 800ca92:	4603      	mov	r3, r0
 800ca94:	2104      	movs	r1, #4
 800ca96:	4620      	mov	r0, r4
 800ca98:	f7f9 ff76 	bl	8006988 <d_make_comp>
 800ca9c:	4681      	mov	r9, r0
 800ca9e:	f7ff ba2a 	b.w	800bef6 <d_exprlist+0xa82>
 800caa2:	4620      	mov	r0, r4
 800caa4:	f000 f984 	bl	800cdb0 <d_expression_1>
 800caa8:	9000      	str	r0, [sp, #0]
 800caaa:	4620      	mov	r0, r4
 800caac:	f000 f980 	bl	800cdb0 <d_expression_1>
 800cab0:	4683      	mov	fp, r0
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 f97c 	bl	800cdb0 <d_expression_1>
 800cab8:	f7ff b933 	b.w	800bd22 <d_exprlist+0x8ae>
 800cabc:	3201      	adds	r2, #1
 800cabe:	60e2      	str	r2, [r4, #12]
 800cac0:	2000      	movs	r0, #0
 800cac2:	f7ff b92e 	b.w	800bd22 <d_exprlist+0x8ae>
 800cac6:	3301      	adds	r3, #1
 800cac8:	60e3      	str	r3, [r4, #12]
 800caca:	2000      	movs	r0, #0
 800cacc:	f7ff bb24 	b.w	800c118 <d_exprlist+0xca4>
 800cad0:	9000      	str	r0, [sp, #0]
 800cad2:	4620      	mov	r0, r4
 800cad4:	f7fd fe58 	bl	800a788 <d_template_args>
 800cad8:	9a00      	ldr	r2, [sp, #0]
 800cada:	4603      	mov	r3, r0
 800cadc:	2104      	movs	r1, #4
 800cade:	4620      	mov	r0, r4
 800cae0:	f7f9 ff52 	bl	8006988 <d_make_comp>
 800cae4:	4603      	mov	r3, r0
 800cae6:	e65c      	b.n	800c7a2 <d_exprlist+0x132e>
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 f961 	bl	800cdb0 <d_expression_1>
 800caee:	9000      	str	r0, [sp, #0]
 800caf0:	4620      	mov	r0, r4
 800caf2:	f000 f95d 	bl	800cdb0 <d_expression_1>
 800caf6:	9001      	str	r0, [sp, #4]
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 f959 	bl	800cdb0 <d_expression_1>
 800cafe:	f7ff bb0b 	b.w	800c118 <d_exprlist+0xca4>
 800cb02:	2145      	movs	r1, #69	; 0x45
 800cb04:	4620      	mov	r0, r4
 800cb06:	f7fe fcb5 	bl	800b474 <d_exprlist>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	f7ff bb5c 	b.w	800c1c8 <d_exprlist+0xd54>
 800cb10:	7812      	ldrb	r2, [r2, #0]
 800cb12:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800cb16:	2901      	cmp	r1, #1
 800cb18:	d903      	bls.n	800cb22 <d_exprlist+0x16ae>
 800cb1a:	3a72      	subs	r2, #114	; 0x72
 800cb1c:	2a01      	cmp	r2, #1
 800cb1e:	f63f ab23 	bhi.w	800c168 <d_exprlist+0xcf4>
 800cb22:	4620      	mov	r0, r4
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	f000 fb15 	bl	800d154 <d_type>
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	9000      	str	r0, [sp, #0]
 800cb2e:	f7ff bb21 	b.w	800c174 <d_exprlist+0xd00>
 800cb32:	4620      	mov	r0, r4
 800cb34:	f000 f93c 	bl	800cdb0 <d_expression_1>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	f7ff bb45 	b.w	800c1c8 <d_exprlist+0xd54>
 800cb3e:	2b6f      	cmp	r3, #111	; 0x6f
 800cb40:	d017      	beq.n	800cb72 <d_exprlist+0x16fe>
 800cb42:	2b69      	cmp	r3, #105	; 0x69
 800cb44:	d11d      	bne.n	800cb82 <d_exprlist+0x170e>
 800cb46:	7853      	ldrb	r3, [r2, #1]
 800cb48:	2b6c      	cmp	r3, #108	; 0x6c
 800cb4a:	f47f aa94 	bne.w	800c076 <d_exprlist+0xc02>
 800cb4e:	f04f 0b00 	mov.w	fp, #0
 800cb52:	68e3      	ldr	r3, [r4, #12]
 800cb54:	2145      	movs	r1, #69	; 0x45
 800cb56:	3302      	adds	r3, #2
 800cb58:	60e3      	str	r3, [r4, #12]
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f7fe fc8a 	bl	800b474 <d_exprlist>
 800cb60:	465a      	mov	r2, fp
 800cb62:	4603      	mov	r3, r0
 800cb64:	2130      	movs	r1, #48	; 0x30
 800cb66:	4620      	mov	r0, r4
 800cb68:	f7f9 ff0e 	bl	8006988 <d_make_comp>
 800cb6c:	4683      	mov	fp, r0
 800cb6e:	f7fe bd71 	b.w	800b654 <d_exprlist+0x1e0>
 800cb72:	7853      	ldrb	r3, [r2, #1]
 800cb74:	2b6e      	cmp	r3, #110	; 0x6e
 800cb76:	f47f aa7e 	bne.w	800c076 <d_exprlist+0xc02>
 800cb7a:	3202      	adds	r2, #2
 800cb7c:	60e2      	str	r2, [r4, #12]
 800cb7e:	f7fe beaf 	b.w	800b8e0 <d_exprlist+0x46c>
 800cb82:	2b74      	cmp	r3, #116	; 0x74
 800cb84:	f47f aa77 	bne.w	800c076 <d_exprlist+0xc02>
 800cb88:	7853      	ldrb	r3, [r2, #1]
 800cb8a:	2b6c      	cmp	r3, #108	; 0x6c
 800cb8c:	f47f aa73 	bne.w	800c076 <d_exprlist+0xc02>
 800cb90:	4620      	mov	r0, r4
 800cb92:	f000 fadf 	bl	800d154 <d_type>
 800cb96:	4683      	mov	fp, r0
 800cb98:	e7db      	b.n	800cb52 <d_exprlist+0x16de>
 800cb9a:	460a      	mov	r2, r1
 800cb9c:	f7fe be3b 	b.w	800b816 <d_exprlist+0x3a2>
 800cba0:	3301      	adds	r3, #1
 800cba2:	60e3      	str	r3, [r4, #12]
 800cba4:	2145      	movs	r1, #69	; 0x45
 800cba6:	4620      	mov	r0, r4
 800cba8:	f7fe fc64 	bl	800b474 <d_exprlist>
 800cbac:	4603      	mov	r3, r0
 800cbae:	e44e      	b.n	800c44e <d_exprlist+0xfda>
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	60e3      	str	r3, [r4, #12]
 800cbb4:	e40a      	b.n	800c3cc <d_exprlist+0xf58>
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	60e3      	str	r3, [r4, #12]
 800cbba:	e43a      	b.n	800c432 <d_exprlist+0xfbe>
 800cbbc:	f04f 0a00 	mov.w	sl, #0
 800cbc0:	3102      	adds	r1, #2
 800cbc2:	60e1      	str	r1, [r4, #12]
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	2145      	movs	r1, #69	; 0x45
 800cbc8:	f7fe fc54 	bl	800b474 <d_exprlist>
 800cbcc:	4652      	mov	r2, sl
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2130      	movs	r1, #48	; 0x30
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f7f9 fed8 	bl	8006988 <d_make_comp>
 800cbd8:	4682      	mov	sl, r0
 800cbda:	f7fe bd77 	b.w	800b6cc <d_exprlist+0x258>
 800cbde:	2b6f      	cmp	r3, #111	; 0x6f
 800cbe0:	d010      	beq.n	800cc04 <d_exprlist+0x1790>
 800cbe2:	2b69      	cmp	r3, #105	; 0x69
 800cbe4:	d13b      	bne.n	800cc5e <d_exprlist+0x17ea>
 800cbe6:	7843      	ldrb	r3, [r0, #1]
 800cbe8:	2b6c      	cmp	r3, #108	; 0x6c
 800cbea:	f47e af09 	bne.w	800ba00 <d_exprlist+0x58c>
 800cbee:	1c82      	adds	r2, r0, #2
 800cbf0:	60e2      	str	r2, [r4, #12]
 800cbf2:	2145      	movs	r1, #69	; 0x45
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f7fe fc3d 	bl	800b474 <d_exprlist>
 800cbfa:	465a      	mov	r2, fp
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2130      	movs	r1, #48	; 0x30
 800cc00:	f7ff b858 	b.w	800bcb4 <d_exprlist+0x840>
 800cc04:	7843      	ldrb	r3, [r0, #1]
 800cc06:	2b6e      	cmp	r3, #110	; 0x6e
 800cc08:	f47e aefa 	bne.w	800ba00 <d_exprlist+0x58c>
 800cc0c:	1c82      	adds	r2, r0, #2
 800cc0e:	60e2      	str	r2, [r4, #12]
 800cc10:	f7fe be4b 	b.w	800b8aa <d_exprlist+0x436>
 800cc14:	2b6f      	cmp	r3, #111	; 0x6f
 800cc16:	d016      	beq.n	800cc46 <d_exprlist+0x17d2>
 800cc18:	2b69      	cmp	r3, #105	; 0x69
 800cc1a:	d12d      	bne.n	800cc78 <d_exprlist+0x1804>
 800cc1c:	78d3      	ldrb	r3, [r2, #3]
 800cc1e:	2b6c      	cmp	r3, #108	; 0x6c
 800cc20:	f47f a8d2 	bne.w	800bdc8 <d_exprlist+0x954>
 800cc24:	f04f 0800 	mov.w	r8, #0
 800cc28:	3102      	adds	r1, #2
 800cc2a:	60e1      	str	r1, [r4, #12]
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	2145      	movs	r1, #69	; 0x45
 800cc30:	f7fe fc20 	bl	800b474 <d_exprlist>
 800cc34:	4642      	mov	r2, r8
 800cc36:	4603      	mov	r3, r0
 800cc38:	2130      	movs	r1, #48	; 0x30
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f7f9 fea4 	bl	8006988 <d_make_comp>
 800cc40:	4602      	mov	r2, r0
 800cc42:	f7fe bde8 	b.w	800b816 <d_exprlist+0x3a2>
 800cc46:	78d3      	ldrb	r3, [r2, #3]
 800cc48:	2b6e      	cmp	r3, #110	; 0x6e
 800cc4a:	f47f a8bd 	bne.w	800bdc8 <d_exprlist+0x954>
 800cc4e:	3204      	adds	r2, #4
 800cc50:	60e2      	str	r2, [r4, #12]
 800cc52:	f7fe bdd3 	b.w	800b7fc <d_exprlist+0x388>
 800cc56:	3301      	adds	r3, #1
 800cc58:	60e3      	str	r3, [r4, #12]
 800cc5a:	f7ff bb1c 	b.w	800c296 <d_exprlist+0xe22>
 800cc5e:	2b74      	cmp	r3, #116	; 0x74
 800cc60:	f47e aece 	bne.w	800ba00 <d_exprlist+0x58c>
 800cc64:	7843      	ldrb	r3, [r0, #1]
 800cc66:	2b6c      	cmp	r3, #108	; 0x6c
 800cc68:	f47e aeca 	bne.w	800ba00 <d_exprlist+0x58c>
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f000 fa71 	bl	800d154 <d_type>
 800cc72:	4683      	mov	fp, r0
 800cc74:	68e0      	ldr	r0, [r4, #12]
 800cc76:	e7ba      	b.n	800cbee <d_exprlist+0x177a>
 800cc78:	2b74      	cmp	r3, #116	; 0x74
 800cc7a:	f47f a8a5 	bne.w	800bdc8 <d_exprlist+0x954>
 800cc7e:	78d3      	ldrb	r3, [r2, #3]
 800cc80:	2b6c      	cmp	r3, #108	; 0x6c
 800cc82:	f47f a8a1 	bne.w	800bdc8 <d_exprlist+0x954>
 800cc86:	4620      	mov	r0, r4
 800cc88:	f000 fa64 	bl	800d154 <d_type>
 800cc8c:	68e1      	ldr	r1, [r4, #12]
 800cc8e:	4680      	mov	r8, r0
 800cc90:	e7ca      	b.n	800cc28 <d_exprlist+0x17b4>
 800cc92:	7853      	ldrb	r3, [r2, #1]
 800cc94:	2b69      	cmp	r3, #105	; 0x69
 800cc96:	d00f      	beq.n	800ccb8 <d_exprlist+0x1844>
 800cc98:	f04f 0900 	mov.w	r9, #0
 800cc9c:	f7ff b9eb 	b.w	800c076 <d_exprlist+0xc02>
 800cca0:	785a      	ldrb	r2, [r3, #1]
 800cca2:	2a69      	cmp	r2, #105	; 0x69
 800cca4:	f47f ab22 	bne.w	800c2ec <d_exprlist+0xe78>
 800cca8:	3302      	adds	r3, #2
 800ccaa:	60e3      	str	r3, [r4, #12]
 800ccac:	2145      	movs	r1, #69	; 0x45
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f7fe fbe0 	bl	800b474 <d_exprlist>
 800ccb4:	f7ff ba30 	b.w	800c118 <d_exprlist+0xca4>
 800ccb8:	3202      	adds	r2, #2
 800ccba:	60e2      	str	r2, [r4, #12]
 800ccbc:	2145      	movs	r1, #69	; 0x45
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f7fe fbd8 	bl	800b474 <d_exprlist>
 800ccc4:	f7ff b82d 	b.w	800bd22 <d_exprlist+0x8ae>
 800ccc8:	2b6f      	cmp	r3, #111	; 0x6f
 800ccca:	d016      	beq.n	800ccfa <d_exprlist+0x1886>
 800cccc:	2b69      	cmp	r3, #105	; 0x69
 800ccce:	d120      	bne.n	800cd12 <d_exprlist+0x189e>
 800ccd0:	784b      	ldrb	r3, [r1, #1]
 800ccd2:	2b6c      	cmp	r3, #108	; 0x6c
 800ccd4:	f47e ae4a 	bne.w	800b96c <d_exprlist+0x4f8>
 800ccd8:	f04f 0900 	mov.w	r9, #0
 800ccdc:	3102      	adds	r1, #2
 800ccde:	60e1      	str	r1, [r4, #12]
 800cce0:	4620      	mov	r0, r4
 800cce2:	2145      	movs	r1, #69	; 0x45
 800cce4:	f7fe fbc6 	bl	800b474 <d_exprlist>
 800cce8:	464a      	mov	r2, r9
 800ccea:	4603      	mov	r3, r0
 800ccec:	2130      	movs	r1, #48	; 0x30
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f7f9 fe4a 	bl	8006988 <d_make_comp>
 800ccf4:	4681      	mov	r9, r0
 800ccf6:	f7fe bd3f 	b.w	800b778 <d_exprlist+0x304>
 800ccfa:	784b      	ldrb	r3, [r1, #1]
 800ccfc:	2b6e      	cmp	r3, #110	; 0x6e
 800ccfe:	f47e ae35 	bne.w	800b96c <d_exprlist+0x4f8>
 800cd02:	3102      	adds	r1, #2
 800cd04:	60e1      	str	r1, [r4, #12]
 800cd06:	f7fe bd2d 	b.w	800b764 <d_exprlist+0x2f0>
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	60e3      	str	r3, [r4, #12]
 800cd0e:	f7ff baa3 	b.w	800c258 <d_exprlist+0xde4>
 800cd12:	2b74      	cmp	r3, #116	; 0x74
 800cd14:	f47e ae2a 	bne.w	800b96c <d_exprlist+0x4f8>
 800cd18:	784b      	ldrb	r3, [r1, #1]
 800cd1a:	2b6c      	cmp	r3, #108	; 0x6c
 800cd1c:	f47e ae26 	bne.w	800b96c <d_exprlist+0x4f8>
 800cd20:	4620      	mov	r0, r4
 800cd22:	f000 fa17 	bl	800d154 <d_type>
 800cd26:	68e1      	ldr	r1, [r4, #12]
 800cd28:	4681      	mov	r9, r0
 800cd2a:	e7d7      	b.n	800ccdc <d_exprlist+0x1868>
 800cd2c:	2b74      	cmp	r3, #116	; 0x74
 800cd2e:	f47e ae8a 	bne.w	800ba46 <d_exprlist+0x5d2>
 800cd32:	784b      	ldrb	r3, [r1, #1]
 800cd34:	2b6c      	cmp	r3, #108	; 0x6c
 800cd36:	f47e ae86 	bne.w	800ba46 <d_exprlist+0x5d2>
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 fa0a 	bl	800d154 <d_type>
 800cd40:	68e1      	ldr	r1, [r4, #12]
 800cd42:	4682      	mov	sl, r0
 800cd44:	e73c      	b.n	800cbc0 <d_exprlist+0x174c>
 800cd46:	2b6f      	cmp	r3, #111	; 0x6f
 800cd48:	d016      	beq.n	800cd78 <d_exprlist+0x1904>
 800cd4a:	2b69      	cmp	r3, #105	; 0x69
 800cd4c:	d11c      	bne.n	800cd88 <d_exprlist+0x1914>
 800cd4e:	7853      	ldrb	r3, [r2, #1]
 800cd50:	2b6c      	cmp	r3, #108	; 0x6c
 800cd52:	f47e abd3 	bne.w	800b4fc <d_exprlist+0x88>
 800cd56:	f04f 0800 	mov.w	r8, #0
 800cd5a:	3202      	adds	r2, #2
 800cd5c:	60e2      	str	r2, [r4, #12]
 800cd5e:	2145      	movs	r1, #69	; 0x45
 800cd60:	4620      	mov	r0, r4
 800cd62:	f7fe fb87 	bl	800b474 <d_exprlist>
 800cd66:	4642      	mov	r2, r8
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2130      	movs	r1, #48	; 0x30
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7f9 fe0b 	bl	8006988 <d_make_comp>
 800cd72:	4602      	mov	r2, r0
 800cd74:	f7fe bc07 	b.w	800b586 <d_exprlist+0x112>
 800cd78:	7853      	ldrb	r3, [r2, #1]
 800cd7a:	2b6e      	cmp	r3, #110	; 0x6e
 800cd7c:	f47e abbe 	bne.w	800b4fc <d_exprlist+0x88>
 800cd80:	3202      	adds	r2, #2
 800cd82:	60e2      	str	r2, [r4, #12]
 800cd84:	f7fe bb8b 	b.w	800b49e <d_exprlist+0x2a>
 800cd88:	2b74      	cmp	r3, #116	; 0x74
 800cd8a:	f47e abb7 	bne.w	800b4fc <d_exprlist+0x88>
 800cd8e:	7853      	ldrb	r3, [r2, #1]
 800cd90:	2b6c      	cmp	r3, #108	; 0x6c
 800cd92:	f47e abb3 	bne.w	800b4fc <d_exprlist+0x88>
 800cd96:	4620      	mov	r0, r4
 800cd98:	f000 f9dc 	bl	800d154 <d_type>
 800cd9c:	68e2      	ldr	r2, [r4, #12]
 800cd9e:	4680      	mov	r8, r0
 800cda0:	e7db      	b.n	800cd5a <d_exprlist+0x18e6>
 800cda2:	f04f 0900 	mov.w	r9, #0
 800cda6:	e6ce      	b.n	800cb46 <d_exprlist+0x16d2>
 800cda8:	f04f 0900 	mov.w	r9, #0
 800cdac:	f7fe bd87 	b.w	800b8be <d_exprlist+0x44a>

0800cdb0 <d_expression_1>:
 800cdb0:	68c2      	ldr	r2, [r0, #12]
 800cdb2:	7813      	ldrb	r3, [r2, #0]
 800cdb4:	2b4c      	cmp	r3, #76	; 0x4c
 800cdb6:	d060      	beq.n	800ce7a <d_expression_1+0xca>
 800cdb8:	2b54      	cmp	r3, #84	; 0x54
 800cdba:	d060      	beq.n	800ce7e <d_expression_1+0xce>
 800cdbc:	2b73      	cmp	r3, #115	; 0x73
 800cdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	d024      	beq.n	800ce10 <d_expression_1+0x60>
 800cdc6:	2b66      	cmp	r3, #102	; 0x66
 800cdc8:	d00f      	beq.n	800cdea <d_expression_1+0x3a>
 800cdca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cdce:	2909      	cmp	r1, #9
 800cdd0:	f200 818b 	bhi.w	800d0ea <d_expression_1+0x33a>
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 fe39 	bl	800da4c <d_unqualified_name>
 800cdda:	4605      	mov	r5, r0
 800cddc:	b1a8      	cbz	r0, 800ce0a <d_expression_1+0x5a>
 800cdde:	68e3      	ldr	r3, [r4, #12]
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b49      	cmp	r3, #73	; 0x49
 800cde4:	d062      	beq.n	800ceac <d_expression_1+0xfc>
 800cde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdea:	7853      	ldrb	r3, [r2, #1]
 800cdec:	2b70      	cmp	r3, #112	; 0x70
 800cdee:	d029      	beq.n	800ce44 <d_expression_1+0x94>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 fd6b 	bl	800d8cc <d_operator_name>
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	b138      	cbz	r0, 800ce0a <d_expression_1+0x5a>
 800cdfa:	7803      	ldrb	r3, [r0, #0]
 800cdfc:	2b31      	cmp	r3, #49	; 0x31
 800cdfe:	d040      	beq.n	800ce82 <d_expression_1+0xd2>
 800ce00:	2b32      	cmp	r3, #50	; 0x32
 800ce02:	d016      	beq.n	800ce32 <d_expression_1+0x82>
 800ce04:	2b33      	cmp	r3, #51	; 0x33
 800ce06:	f000 8115 	beq.w	800d034 <d_expression_1+0x284>
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce10:	7853      	ldrb	r3, [r2, #1]
 800ce12:	2b72      	cmp	r3, #114	; 0x72
 800ce14:	d055      	beq.n	800cec2 <d_expression_1+0x112>
 800ce16:	2b70      	cmp	r3, #112	; 0x70
 800ce18:	d1ea      	bne.n	800cdf0 <d_expression_1+0x40>
 800ce1a:	3202      	adds	r2, #2
 800ce1c:	60c2      	str	r2, [r0, #12]
 800ce1e:	f7ff ffc7 	bl	800cdb0 <d_expression_1>
 800ce22:	2300      	movs	r3, #0
 800ce24:	4602      	mov	r2, r0
 800ce26:	2149      	movs	r1, #73	; 0x49
 800ce28:	4620      	mov	r0, r4
 800ce2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce2e:	f7f9 bdab 	b.w	8006988 <d_make_comp>
 800ce32:	686b      	ldr	r3, [r5, #4]
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d8e8      	bhi.n	800ce0a <d_expression_1+0x5a>
 800ce38:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ce3c:	00d9005d 	.word	0x00d9005d
 800ce40:	006500a6 	.word	0x006500a6
 800ce44:	1c93      	adds	r3, r2, #2
 800ce46:	60c3      	str	r3, [r0, #12]
 800ce48:	7893      	ldrb	r3, [r2, #2]
 800ce4a:	2b54      	cmp	r3, #84	; 0x54
 800ce4c:	d04f      	beq.n	800ceee <d_expression_1+0x13e>
 800ce4e:	f7f9 ff25 	bl	8006c9c <d_compact_number>
 800ce52:	1c45      	adds	r5, r0, #1
 800ce54:	d0d9      	beq.n	800ce0a <d_expression_1+0x5a>
 800ce56:	6963      	ldr	r3, [r4, #20]
 800ce58:	69a2      	ldr	r2, [r4, #24]
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	dad5      	bge.n	800ce0a <d_expression_1+0x5a>
 800ce5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ce62:	6921      	ldr	r1, [r4, #16]
 800ce64:	3301      	adds	r3, #1
 800ce66:	0092      	lsls	r2, r2, #2
 800ce68:	6163      	str	r3, [r4, #20]
 800ce6a:	188b      	adds	r3, r1, r2
 800ce6c:	d0cd      	beq.n	800ce0a <d_expression_1+0x5a>
 800ce6e:	2006      	movs	r0, #6
 800ce70:	5488      	strb	r0, [r1, r2]
 800ce72:	605d      	str	r5, [r3, #4]
 800ce74:	4618      	mov	r0, r3
 800ce76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce7a:	f001 bc63 	b.w	800e744 <d_expr_primary>
 800ce7e:	f7f9 bf25 	b.w	8006ccc <d_template_param>
 800ce82:	6847      	ldr	r7, [r0, #4]
 800ce84:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	683e      	ldr	r6, [r7, #0]
 800ce8a:	3b02      	subs	r3, #2
 800ce8c:	4413      	add	r3, r2
 800ce8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ce90:	4630      	mov	r0, r6
 800ce92:	49ab      	ldr	r1, [pc, #684]	; (800d140 <d_expression_1+0x390>)
 800ce94:	f001 fed0 	bl	800ec38 <strcmp>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	f000 80d7 	beq.w	800d04c <d_expression_1+0x29c>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2b03      	cmp	r3, #3
 800cea2:	d8b2      	bhi.n	800ce0a <d_expression_1+0x5a>
 800cea4:	e8df f003 	tbb	[pc, r3]
 800cea8:	3071b627 	.word	0x3071b627
 800ceac:	4620      	mov	r0, r4
 800ceae:	f7fd fc6b 	bl	800a788 <d_template_args>
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2104      	movs	r1, #4
 800ceb8:	4620      	mov	r0, r4
 800ceba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cebe:	f7f9 bd63 	b.w	8006988 <d_make_comp>
 800cec2:	3202      	adds	r2, #2
 800cec4:	60c2      	str	r2, [r0, #12]
 800cec6:	f000 f945 	bl	800d154 <d_type>
 800ceca:	4605      	mov	r5, r0
 800cecc:	4620      	mov	r0, r4
 800cece:	f000 fdbd 	bl	800da4c <d_unqualified_name>
 800ced2:	68e3      	ldr	r3, [r4, #12]
 800ced4:	4606      	mov	r6, r0
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2b49      	cmp	r3, #73	; 0x49
 800ceda:	f000 80db 	beq.w	800d094 <d_expression_1+0x2e4>
 800cede:	4603      	mov	r3, r0
 800cee0:	462a      	mov	r2, r5
 800cee2:	4620      	mov	r0, r4
 800cee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cee8:	2101      	movs	r1, #1
 800ceea:	f7f9 bd4d 	b.w	8006988 <d_make_comp>
 800ceee:	3203      	adds	r2, #3
 800cef0:	60c2      	str	r2, [r0, #12]
 800cef2:	2500      	movs	r5, #0
 800cef4:	e7af      	b.n	800ce56 <d_expression_1+0xa6>
 800cef6:	462a      	mov	r2, r5
 800cef8:	4620      	mov	r0, r4
 800cefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cefe:	2300      	movs	r3, #0
 800cf00:	2134      	movs	r1, #52	; 0x34
 800cf02:	f7f9 bd41 	b.w	8006988 <d_make_comp>
 800cf06:	2600      	movs	r6, #0
 800cf08:	498e      	ldr	r1, [pc, #568]	; (800d144 <d_expression_1+0x394>)
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f001 fe94 	bl	800ec38 <strcmp>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	f000 809f 	beq.w	800d054 <d_expression_1+0x2a4>
 800cf16:	7833      	ldrb	r3, [r6, #0]
 800cf18:	2b6e      	cmp	r3, #110	; 0x6e
 800cf1a:	f47f af76 	bne.w	800ce0a <d_expression_1+0x5a>
 800cf1e:	7873      	ldrb	r3, [r6, #1]
 800cf20:	2b77      	cmp	r3, #119	; 0x77
 800cf22:	d002      	beq.n	800cf2a <d_expression_1+0x17a>
 800cf24:	2b61      	cmp	r3, #97	; 0x61
 800cf26:	f47f af70 	bne.w	800ce0a <d_expression_1+0x5a>
 800cf2a:	215f      	movs	r1, #95	; 0x5f
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f7fe faa1 	bl	800b474 <d_exprlist>
 800cf32:	4606      	mov	r6, r0
 800cf34:	4620      	mov	r0, r4
 800cf36:	f000 f90d 	bl	800d154 <d_type>
 800cf3a:	68e3      	ldr	r3, [r4, #12]
 800cf3c:	4607      	mov	r7, r0
 800cf3e:	7819      	ldrb	r1, [r3, #0]
 800cf40:	2945      	cmp	r1, #69	; 0x45
 800cf42:	f000 80b7 	beq.w	800d0b4 <d_expression_1+0x304>
 800cf46:	2970      	cmp	r1, #112	; 0x70
 800cf48:	f000 80c3 	beq.w	800d0d2 <d_expression_1+0x322>
 800cf4c:	2969      	cmp	r1, #105	; 0x69
 800cf4e:	f47f af5c 	bne.w	800ce0a <d_expression_1+0x5a>
 800cf52:	785b      	ldrb	r3, [r3, #1]
 800cf54:	2b6c      	cmp	r3, #108	; 0x6c
 800cf56:	f47f af58 	bne.w	800ce0a <d_expression_1+0x5a>
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f7ff ff28 	bl	800cdb0 <d_expression_1>
 800cf60:	4603      	mov	r3, r0
 800cf62:	463a      	mov	r2, r7
 800cf64:	213a      	movs	r1, #58	; 0x3a
 800cf66:	4620      	mov	r0, r4
 800cf68:	f7f9 fd0e 	bl	8006988 <d_make_comp>
 800cf6c:	4632      	mov	r2, r6
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2139      	movs	r1, #57	; 0x39
 800cf72:	4620      	mov	r0, r4
 800cf74:	f7f9 fd08 	bl	8006988 <d_make_comp>
 800cf78:	462a      	mov	r2, r5
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2138      	movs	r1, #56	; 0x38
 800cf7e:	4620      	mov	r0, r4
 800cf80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf84:	f7f9 bd00 	b.w	8006988 <d_make_comp>
 800cf88:	2600      	movs	r6, #0
 800cf8a:	686b      	ldr	r3, [r5, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	785a      	ldrb	r2, [r3, #1]
 800cf90:	2a63      	cmp	r2, #99	; 0x63
 800cf92:	d072      	beq.n	800d07a <d_expression_1+0x2ca>
 800cf94:	4620      	mov	r0, r4
 800cf96:	f7ff ff0b 	bl	800cdb0 <d_expression_1>
 800cf9a:	4607      	mov	r7, r0
 800cf9c:	496a      	ldr	r1, [pc, #424]	; (800d148 <d_expression_1+0x398>)
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	f001 fe4a 	bl	800ec38 <strcmp>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d062      	beq.n	800d06e <d_expression_1+0x2be>
 800cfa8:	4968      	ldr	r1, [pc, #416]	; (800d14c <d_expression_1+0x39c>)
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f001 fe44 	bl	800ec38 <strcmp>
 800cfb0:	b128      	cbz	r0, 800cfbe <d_expression_1+0x20e>
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	4966      	ldr	r1, [pc, #408]	; (800d150 <d_expression_1+0x3a0>)
 800cfb6:	f001 fe3f 	bl	800ec38 <strcmp>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d175      	bne.n	800d0aa <d_expression_1+0x2fa>
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f000 fd44 	bl	800da4c <d_unqualified_name>
 800cfc4:	68e3      	ldr	r3, [r4, #12]
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	2b49      	cmp	r3, #73	; 0x49
 800cfcc:	d076      	beq.n	800d0bc <d_expression_1+0x30c>
 800cfce:	4633      	mov	r3, r6
 800cfd0:	463a      	mov	r2, r7
 800cfd2:	2137      	movs	r1, #55	; 0x37
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f7f9 fcd7 	bl	8006988 <d_make_comp>
 800cfda:	462a      	mov	r2, r5
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2136      	movs	r1, #54	; 0x36
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe6:	f7f9 bccf 	b.w	8006988 <d_make_comp>
 800cfea:	3301      	adds	r3, #1
 800cfec:	60e3      	str	r3, [r4, #12]
 800cfee:	2600      	movs	r6, #0
 800cff0:	4620      	mov	r0, r4
 800cff2:	f7ff fedd 	bl	800cdb0 <d_expression_1>
 800cff6:	4603      	mov	r3, r0
 800cff8:	b12e      	cbz	r6, 800d006 <d_expression_1+0x256>
 800cffa:	4602      	mov	r2, r0
 800cffc:	2137      	movs	r1, #55	; 0x37
 800cffe:	4620      	mov	r0, r4
 800d000:	f7f9 fcc2 	bl	8006988 <d_make_comp>
 800d004:	4603      	mov	r3, r0
 800d006:	462a      	mov	r2, r5
 800d008:	4620      	mov	r0, r4
 800d00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d00e:	2135      	movs	r1, #53	; 0x35
 800d010:	f7f9 bcba 	b.w	8006988 <d_make_comp>
 800d014:	2e00      	cmp	r6, #0
 800d016:	d0ea      	beq.n	800cfee <d_expression_1+0x23e>
 800d018:	7833      	ldrb	r3, [r6, #0]
 800d01a:	2b70      	cmp	r3, #112	; 0x70
 800d01c:	d001      	beq.n	800d022 <d_expression_1+0x272>
 800d01e:	2b6d      	cmp	r3, #109	; 0x6d
 800d020:	d1e5      	bne.n	800cfee <d_expression_1+0x23e>
 800d022:	7872      	ldrb	r2, [r6, #1]
 800d024:	429a      	cmp	r2, r3
 800d026:	d1e2      	bne.n	800cfee <d_expression_1+0x23e>
 800d028:	68e3      	ldr	r3, [r4, #12]
 800d02a:	781a      	ldrb	r2, [r3, #0]
 800d02c:	2a5f      	cmp	r2, #95	; 0x5f
 800d02e:	d0dc      	beq.n	800cfea <d_expression_1+0x23a>
 800d030:	2601      	movs	r6, #1
 800d032:	e7dd      	b.n	800cff0 <d_expression_1+0x240>
 800d034:	68e3      	ldr	r3, [r4, #12]
 800d036:	781a      	ldrb	r2, [r3, #0]
 800d038:	2a5f      	cmp	r2, #95	; 0x5f
 800d03a:	d1d8      	bne.n	800cfee <d_expression_1+0x23e>
 800d03c:	3301      	adds	r3, #1
 800d03e:	60e3      	str	r3, [r4, #12]
 800d040:	2145      	movs	r1, #69	; 0x45
 800d042:	4620      	mov	r0, r4
 800d044:	f7fe fa16 	bl	800b474 <d_exprlist>
 800d048:	4603      	mov	r3, r0
 800d04a:	e7dc      	b.n	800d006 <d_expression_1+0x256>
 800d04c:	4620      	mov	r0, r4
 800d04e:	f000 f881 	bl	800d154 <d_type>
 800d052:	e7d7      	b.n	800d004 <d_expression_1+0x254>
 800d054:	4620      	mov	r0, r4
 800d056:	f7ff feab 	bl	800cdb0 <d_expression_1>
 800d05a:	4606      	mov	r6, r0
 800d05c:	4620      	mov	r0, r4
 800d05e:	f7ff fea7 	bl	800cdb0 <d_expression_1>
 800d062:	4607      	mov	r7, r0
 800d064:	4620      	mov	r0, r4
 800d066:	f7ff fea3 	bl	800cdb0 <d_expression_1>
 800d06a:	4603      	mov	r3, r0
 800d06c:	e779      	b.n	800cf62 <d_expression_1+0x1b2>
 800d06e:	2145      	movs	r1, #69	; 0x45
 800d070:	4620      	mov	r0, r4
 800d072:	f7fe f9ff 	bl	800b474 <d_exprlist>
 800d076:	4606      	mov	r6, r0
 800d078:	e7a9      	b.n	800cfce <d_expression_1+0x21e>
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800d080:	2a01      	cmp	r2, #1
 800d082:	d902      	bls.n	800d08a <d_expression_1+0x2da>
 800d084:	3b72      	subs	r3, #114	; 0x72
 800d086:	2b01      	cmp	r3, #1
 800d088:	d884      	bhi.n	800cf94 <d_expression_1+0x1e4>
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 f862 	bl	800d154 <d_type>
 800d090:	4607      	mov	r7, r0
 800d092:	e783      	b.n	800cf9c <d_expression_1+0x1ec>
 800d094:	4620      	mov	r0, r4
 800d096:	f7fd fb77 	bl	800a788 <d_template_args>
 800d09a:	4632      	mov	r2, r6
 800d09c:	4603      	mov	r3, r0
 800d09e:	2104      	movs	r1, #4
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f7f9 fc71 	bl	8006988 <d_make_comp>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	e71a      	b.n	800cee0 <d_expression_1+0x130>
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f7ff fe80 	bl	800cdb0 <d_expression_1>
 800d0b0:	4606      	mov	r6, r0
 800d0b2:	e78c      	b.n	800cfce <d_expression_1+0x21e>
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	60e3      	str	r3, [r4, #12]
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e752      	b.n	800cf62 <d_expression_1+0x1b2>
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f7fd fb63 	bl	800a788 <d_template_args>
 800d0c2:	4632      	mov	r2, r6
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2104      	movs	r1, #4
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f7f9 fc5d 	bl	8006988 <d_make_comp>
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	e77d      	b.n	800cfce <d_expression_1+0x21e>
 800d0d2:	785a      	ldrb	r2, [r3, #1]
 800d0d4:	2a69      	cmp	r2, #105	; 0x69
 800d0d6:	f47f ae98 	bne.w	800ce0a <d_expression_1+0x5a>
 800d0da:	3302      	adds	r3, #2
 800d0dc:	60e3      	str	r3, [r4, #12]
 800d0de:	2145      	movs	r1, #69	; 0x45
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f7fe f9c7 	bl	800b474 <d_exprlist>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	e73b      	b.n	800cf62 <d_expression_1+0x1b2>
 800d0ea:	2b6f      	cmp	r3, #111	; 0x6f
 800d0ec:	d014      	beq.n	800d118 <d_expression_1+0x368>
 800d0ee:	2b69      	cmp	r3, #105	; 0x69
 800d0f0:	d119      	bne.n	800d126 <d_expression_1+0x376>
 800d0f2:	7853      	ldrb	r3, [r2, #1]
 800d0f4:	2b6c      	cmp	r3, #108	; 0x6c
 800d0f6:	f47f ae7b 	bne.w	800cdf0 <d_expression_1+0x40>
 800d0fa:	2500      	movs	r5, #0
 800d0fc:	3202      	adds	r2, #2
 800d0fe:	60e2      	str	r2, [r4, #12]
 800d100:	2145      	movs	r1, #69	; 0x45
 800d102:	4620      	mov	r0, r4
 800d104:	f7fe f9b6 	bl	800b474 <d_exprlist>
 800d108:	462a      	mov	r2, r5
 800d10a:	4603      	mov	r3, r0
 800d10c:	2130      	movs	r1, #48	; 0x30
 800d10e:	4620      	mov	r0, r4
 800d110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d114:	f7f9 bc38 	b.w	8006988 <d_make_comp>
 800d118:	7853      	ldrb	r3, [r2, #1]
 800d11a:	2b6e      	cmp	r3, #110	; 0x6e
 800d11c:	f47f ae68 	bne.w	800cdf0 <d_expression_1+0x40>
 800d120:	3202      	adds	r2, #2
 800d122:	60c2      	str	r2, [r0, #12]
 800d124:	e656      	b.n	800cdd4 <d_expression_1+0x24>
 800d126:	2b74      	cmp	r3, #116	; 0x74
 800d128:	f47f ae62 	bne.w	800cdf0 <d_expression_1+0x40>
 800d12c:	7853      	ldrb	r3, [r2, #1]
 800d12e:	2b6c      	cmp	r3, #108	; 0x6c
 800d130:	f47f ae5e 	bne.w	800cdf0 <d_expression_1+0x40>
 800d134:	f000 f80e 	bl	800d154 <d_type>
 800d138:	68e2      	ldr	r2, [r4, #12]
 800d13a:	4605      	mov	r5, r0
 800d13c:	e7de      	b.n	800d0fc <d_expression_1+0x34c>
 800d13e:	bf00      	nop
 800d140:	08013ca8 	.word	0x08013ca8
 800d144:	080139a0 	.word	0x080139a0
 800d148:	08013998 	.word	0x08013998
 800d14c:	08013ab4 	.word	0x08013ab4
 800d150:	08013ab8 	.word	0x08013ab8

0800d154 <d_type>:
 800d154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d158:	68c1      	ldr	r1, [r0, #12]
 800d15a:	b083      	sub	sp, #12
 800d15c:	780b      	ldrb	r3, [r1, #0]
 800d15e:	4604      	mov	r4, r0
 800d160:	2b72      	cmp	r3, #114	; 0x72
 800d162:	d055      	beq.n	800d210 <d_type+0xbc>
 800d164:	2b56      	cmp	r3, #86	; 0x56
 800d166:	d053      	beq.n	800d210 <d_type+0xbc>
 800d168:	2b4b      	cmp	r3, #75	; 0x4b
 800d16a:	d051      	beq.n	800d210 <d_type+0xbc>
 800d16c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d170:	2a4a      	cmp	r2, #74	; 0x4a
 800d172:	f200 808a 	bhi.w	800d28a <d_type+0x136>
 800d176:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d17a:	00b2      	.short	0x00b2
 800d17c:	00b200b2 	.word	0x00b200b2
 800d180:	00b200b2 	.word	0x00b200b2
 800d184:	00b200b2 	.word	0x00b200b2
 800d188:	00b200b2 	.word	0x00b200b2
 800d18c:	008800b2 	.word	0x008800b2
 800d190:	00880088 	.word	0x00880088
 800d194:	00880088 	.word	0x00880088
 800d198:	00880088 	.word	0x00880088
 800d19c:	008800b8 	.word	0x008800b8
 800d1a0:	010300e1 	.word	0x010300e1
 800d1a4:	00ef0088 	.word	0x00ef0088
 800d1a8:	008800f5 	.word	0x008800f5
 800d1ac:	00880088 	.word	0x00880088
 800d1b0:	00880088 	.word	0x00880088
 800d1b4:	00b20175 	.word	0x00b20175
 800d1b8:	019b018d 	.word	0x019b018d
 800d1bc:	01a90088 	.word	0x01a90088
 800d1c0:	020f01b7 	.word	0x020f01b7
 800d1c4:	008801d8 	.word	0x008801d8
 800d1c8:	00880088 	.word	0x00880088
 800d1cc:	00b20088 	.word	0x00b20088
 800d1d0:	00880088 	.word	0x00880088
 800d1d4:	00880088 	.word	0x00880088
 800d1d8:	00880088 	.word	0x00880088
 800d1dc:	01ea01ea 	.word	0x01ea01ea
 800d1e0:	01ea01ea 	.word	0x01ea01ea
 800d1e4:	01ea01ea 	.word	0x01ea01ea
 800d1e8:	01ea01ea 	.word	0x01ea01ea
 800d1ec:	01ea01ea 	.word	0x01ea01ea
 800d1f0:	01ea0088 	.word	0x01ea0088
 800d1f4:	01ea01ea 	.word	0x01ea01ea
 800d1f8:	008801ea 	.word	0x008801ea
 800d1fc:	00880088 	.word	0x00880088
 800d200:	01ea01ea 	.word	0x01ea01ea
 800d204:	01ea0098 	.word	0x01ea0098
 800d208:	01ea01ea 	.word	0x01ea01ea
 800d20c:	01ea01ea 	.word	0x01ea01ea
 800d210:	2200      	movs	r2, #0
 800d212:	a901      	add	r1, sp, #4
 800d214:	4620      	mov	r0, r4
 800d216:	f7f9 fc03 	bl	8006a20 <d_cv_qualifiers>
 800d21a:	4605      	mov	r5, r0
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d034      	beq.n	800d28a <d_type+0x136>
 800d220:	68e3      	ldr	r3, [r4, #12]
 800d222:	4620      	mov	r0, r4
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b46      	cmp	r3, #70	; 0x46
 800d228:	d034      	beq.n	800d294 <d_type+0x140>
 800d22a:	f7ff ff93 	bl	800d154 <d_type>
 800d22e:	6028      	str	r0, [r5, #0]
 800d230:	b358      	cbz	r0, 800d28a <d_type+0x136>
 800d232:	7803      	ldrb	r3, [r0, #0]
 800d234:	3b1f      	subs	r3, #31
 800d236:	2b01      	cmp	r3, #1
 800d238:	d930      	bls.n	800d29c <d_type+0x148>
 800d23a:	9a01      	ldr	r2, [sp, #4]
 800d23c:	b32a      	cbz	r2, 800d28a <d_type+0x136>
 800d23e:	6a23      	ldr	r3, [r4, #32]
 800d240:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d242:	428b      	cmp	r3, r1
 800d244:	da21      	bge.n	800d28a <d_type+0x136>
 800d246:	69e0      	ldr	r0, [r4, #28]
 800d248:	1c59      	adds	r1, r3, #1
 800d24a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d24e:	9d01      	ldr	r5, [sp, #4]
 800d250:	6221      	str	r1, [r4, #32]
 800d252:	4628      	mov	r0, r5
 800d254:	b003      	add	sp, #12
 800d256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d25a:	2301      	movs	r3, #1
 800d25c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d25e:	4620      	mov	r0, r4
 800d260:	6363      	str	r3, [r4, #52]	; 0x34
 800d262:	f7ff fda5 	bl	800cdb0 <d_expression_1>
 800d266:	6365      	str	r5, [r4, #52]	; 0x34
 800d268:	4602      	mov	r2, r0
 800d26a:	2300      	movs	r3, #0
 800d26c:	2141      	movs	r1, #65	; 0x41
 800d26e:	4620      	mov	r0, r4
 800d270:	f7f9 fb8a 	bl	8006988 <d_make_comp>
 800d274:	4605      	mov	r5, r0
 800d276:	9001      	str	r0, [sp, #4]
 800d278:	b138      	cbz	r0, 800d28a <d_type+0x136>
 800d27a:	68e3      	ldr	r3, [r4, #12]
 800d27c:	781a      	ldrb	r2, [r3, #0]
 800d27e:	b122      	cbz	r2, 800d28a <d_type+0x136>
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	60e2      	str	r2, [r4, #12]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	2b45      	cmp	r3, #69	; 0x45
 800d288:	d01e      	beq.n	800d2c8 <d_type+0x174>
 800d28a:	2500      	movs	r5, #0
 800d28c:	4628      	mov	r0, r5
 800d28e:	b003      	add	sp, #12
 800d290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d294:	f000 fd30 	bl	800dcf8 <d_function_type>
 800d298:	6028      	str	r0, [r5, #0]
 800d29a:	e7c9      	b.n	800d230 <d_type+0xdc>
 800d29c:	9a01      	ldr	r2, [sp, #4]
 800d29e:	6843      	ldr	r3, [r0, #4]
 800d2a0:	6042      	str	r2, [r0, #4]
 800d2a2:	682a      	ldr	r2, [r5, #0]
 800d2a4:	9201      	str	r2, [sp, #4]
 800d2a6:	602b      	str	r3, [r5, #0]
 800d2a8:	e7c7      	b.n	800d23a <d_type+0xe6>
 800d2aa:	3101      	adds	r1, #1
 800d2ac:	60e1      	str	r1, [r4, #12]
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f7f9 fd2e 	bl	8006d10 <d_source_name>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	2128      	movs	r1, #40	; 0x28
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f7f9 fb64 	bl	8006988 <d_make_comp>
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	9001      	str	r0, [sp, #4]
 800d2c4:	2d00      	cmp	r5, #0
 800d2c6:	d0e0      	beq.n	800d28a <d_type+0x136>
 800d2c8:	6a23      	ldr	r3, [r4, #32]
 800d2ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	dadc      	bge.n	800d28a <d_type+0x136>
 800d2d0:	69e1      	ldr	r1, [r4, #28]
 800d2d2:	1c5a      	adds	r2, r3, #1
 800d2d4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800d2d8:	9d01      	ldr	r5, [sp, #4]
 800d2da:	6222      	str	r2, [r4, #32]
 800d2dc:	e7d6      	b.n	800d28c <d_type+0x138>
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f000 fd2a 	bl	800dd38 <d_name>
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	9001      	str	r0, [sp, #4]
 800d2e8:	e7ec      	b.n	800d2c4 <d_type+0x170>
 800d2ea:	1c48      	adds	r0, r1, #1
 800d2ec:	60e0      	str	r0, [r4, #12]
 800d2ee:	784b      	ldrb	r3, [r1, #1]
 800d2f0:	2b5f      	cmp	r3, #95	; 0x5f
 800d2f2:	f000 8273 	beq.w	800d7dc <d_type+0x688>
 800d2f6:	3b30      	subs	r3, #48	; 0x30
 800d2f8:	2b09      	cmp	r3, #9
 800d2fa:	f200 827d 	bhi.w	800d7f8 <d_type+0x6a4>
 800d2fe:	4603      	mov	r3, r0
 800d300:	3301      	adds	r3, #1
 800d302:	60e3      	str	r3, [r4, #12]
 800d304:	781a      	ldrb	r2, [r3, #0]
 800d306:	3a30      	subs	r2, #48	; 0x30
 800d308:	2a09      	cmp	r2, #9
 800d30a:	d9f9      	bls.n	800d300 <d_type+0x1ac>
 800d30c:	6962      	ldr	r2, [r4, #20]
 800d30e:	69a1      	ldr	r1, [r4, #24]
 800d310:	428a      	cmp	r2, r1
 800d312:	da11      	bge.n	800d338 <d_type+0x1e4>
 800d314:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d318:	6926      	ldr	r6, [r4, #16]
 800d31a:	0089      	lsls	r1, r1, #2
 800d31c:	3201      	adds	r2, #1
 800d31e:	1875      	adds	r5, r6, r1
 800d320:	6162      	str	r2, [r4, #20]
 800d322:	d009      	beq.n	800d338 <d_type+0x1e4>
 800d324:	1a1a      	subs	r2, r3, r0
 800d326:	d007      	beq.n	800d338 <d_type+0x1e4>
 800d328:	2700      	movs	r7, #0
 800d32a:	5477      	strb	r7, [r6, r1]
 800d32c:	6068      	str	r0, [r5, #4]
 800d32e:	60aa      	str	r2, [r5, #8]
 800d330:	781a      	ldrb	r2, [r3, #0]
 800d332:	2a5f      	cmp	r2, #95	; 0x5f
 800d334:	f000 82c7 	beq.w	800d8c6 <d_type+0x772>
 800d338:	2500      	movs	r5, #0
 800d33a:	e0a9      	b.n	800d490 <d_type+0x33c>
 800d33c:	3101      	adds	r1, #1
 800d33e:	60e1      	str	r1, [r4, #12]
 800d340:	4620      	mov	r0, r4
 800d342:	f7ff ff07 	bl	800d154 <d_type>
 800d346:	2300      	movs	r3, #0
 800d348:	4602      	mov	r2, r0
 800d34a:	2125      	movs	r1, #37	; 0x25
 800d34c:	4620      	mov	r0, r4
 800d34e:	f7f9 fb1b 	bl	8006988 <d_make_comp>
 800d352:	4605      	mov	r5, r0
 800d354:	9001      	str	r0, [sp, #4]
 800d356:	e7b5      	b.n	800d2c4 <d_type+0x170>
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 fccd 	bl	800dcf8 <d_function_type>
 800d35e:	4605      	mov	r5, r0
 800d360:	9001      	str	r0, [sp, #4]
 800d362:	e7af      	b.n	800d2c4 <d_type+0x170>
 800d364:	3101      	adds	r1, #1
 800d366:	60e1      	str	r1, [r4, #12]
 800d368:	4620      	mov	r0, r4
 800d36a:	f7ff fef3 	bl	800d154 <d_type>
 800d36e:	2300      	movs	r3, #0
 800d370:	4602      	mov	r2, r0
 800d372:	2126      	movs	r1, #38	; 0x26
 800d374:	4620      	mov	r0, r4
 800d376:	f7f9 fb07 	bl	8006988 <d_make_comp>
 800d37a:	4605      	mov	r5, r0
 800d37c:	9001      	str	r0, [sp, #4]
 800d37e:	e7a1      	b.n	800d2c4 <d_type+0x170>
 800d380:	1c4b      	adds	r3, r1, #1
 800d382:	60e3      	str	r3, [r4, #12]
 800d384:	784b      	ldrb	r3, [r1, #1]
 800d386:	2b00      	cmp	r3, #0
 800d388:	f43f af7f 	beq.w	800d28a <d_type+0x136>
 800d38c:	1c8b      	adds	r3, r1, #2
 800d38e:	60e3      	str	r3, [r4, #12]
 800d390:	784b      	ldrb	r3, [r1, #1]
 800d392:	3b46      	subs	r3, #70	; 0x46
 800d394:	2b30      	cmp	r3, #48	; 0x30
 800d396:	f63f af78 	bhi.w	800d28a <d_type+0x136>
 800d39a:	a201      	add	r2, pc, #4	; (adr r2, 800d3a0 <d_type+0x24c>)
 800d39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a0:	0800d76d 	.word	0x0800d76d
 800d3a4:	0800d28b 	.word	0x0800d28b
 800d3a8:	0800d28b 	.word	0x0800d28b
 800d3ac:	0800d28b 	.word	0x0800d28b
 800d3b0:	0800d28b 	.word	0x0800d28b
 800d3b4:	0800d28b 	.word	0x0800d28b
 800d3b8:	0800d28b 	.word	0x0800d28b
 800d3bc:	0800d28b 	.word	0x0800d28b
 800d3c0:	0800d28b 	.word	0x0800d28b
 800d3c4:	0800d28b 	.word	0x0800d28b
 800d3c8:	0800d28b 	.word	0x0800d28b
 800d3cc:	0800d28b 	.word	0x0800d28b
 800d3d0:	0800d28b 	.word	0x0800d28b
 800d3d4:	0800d28b 	.word	0x0800d28b
 800d3d8:	0800d25b 	.word	0x0800d25b
 800d3dc:	0800d28b 	.word	0x0800d28b
 800d3e0:	0800d28b 	.word	0x0800d28b
 800d3e4:	0800d28b 	.word	0x0800d28b
 800d3e8:	0800d28b 	.word	0x0800d28b
 800d3ec:	0800d28b 	.word	0x0800d28b
 800d3f0:	0800d28b 	.word	0x0800d28b
 800d3f4:	0800d28b 	.word	0x0800d28b
 800d3f8:	0800d28b 	.word	0x0800d28b
 800d3fc:	0800d28b 	.word	0x0800d28b
 800d400:	0800d28b 	.word	0x0800d28b
 800d404:	0800d28b 	.word	0x0800d28b
 800d408:	0800d28b 	.word	0x0800d28b
 800d40c:	0800d741 	.word	0x0800d741
 800d410:	0800d28b 	.word	0x0800d28b
 800d414:	0800d28b 	.word	0x0800d28b
 800d418:	0800d725 	.word	0x0800d725
 800d41c:	0800d661 	.word	0x0800d661
 800d420:	0800d635 	.word	0x0800d635
 800d424:	0800d28b 	.word	0x0800d28b
 800d428:	0800d609 	.word	0x0800d609
 800d42c:	0800d5dd 	.word	0x0800d5dd
 800d430:	0800d28b 	.word	0x0800d28b
 800d434:	0800d28b 	.word	0x0800d28b
 800d438:	0800d28b 	.word	0x0800d28b
 800d43c:	0800d28b 	.word	0x0800d28b
 800d440:	0800d6fd 	.word	0x0800d6fd
 800d444:	0800d28b 	.word	0x0800d28b
 800d448:	0800d6e5 	.word	0x0800d6e5
 800d44c:	0800d28b 	.word	0x0800d28b
 800d450:	0800d28b 	.word	0x0800d28b
 800d454:	0800d6c7 	.word	0x0800d6c7
 800d458:	0800d25b 	.word	0x0800d25b
 800d45c:	0800d28b 	.word	0x0800d28b
 800d460:	0800d68d 	.word	0x0800d68d
 800d464:	3101      	adds	r1, #1
 800d466:	60e1      	str	r1, [r4, #12]
 800d468:	4620      	mov	r0, r4
 800d46a:	f7ff fe73 	bl	800d154 <d_type>
 800d46e:	4605      	mov	r5, r0
 800d470:	2800      	cmp	r0, #0
 800d472:	f43f af61 	beq.w	800d338 <d_type+0x1e4>
 800d476:	4620      	mov	r0, r4
 800d478:	f7ff fe6c 	bl	800d154 <d_type>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	f43f af5b 	beq.w	800d338 <d_type+0x1e4>
 800d482:	4603      	mov	r3, r0
 800d484:	462a      	mov	r2, r5
 800d486:	212b      	movs	r1, #43	; 0x2b
 800d488:	4620      	mov	r0, r4
 800d48a:	f7f9 fa7d 	bl	8006988 <d_make_comp>
 800d48e:	4605      	mov	r5, r0
 800d490:	9501      	str	r5, [sp, #4]
 800d492:	e717      	b.n	800d2c4 <d_type+0x170>
 800d494:	3101      	adds	r1, #1
 800d496:	60e1      	str	r1, [r4, #12]
 800d498:	4620      	mov	r0, r4
 800d49a:	f7ff fe5b 	bl	800d154 <d_type>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	2124      	movs	r1, #36	; 0x24
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f7f9 fa6f 	bl	8006988 <d_make_comp>
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	9001      	str	r0, [sp, #4]
 800d4ae:	e709      	b.n	800d2c4 <d_type+0x170>
 800d4b0:	3101      	adds	r1, #1
 800d4b2:	60e1      	str	r1, [r4, #12]
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f7ff fe4d 	bl	800d154 <d_type>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	4602      	mov	r2, r0
 800d4be:	2122      	movs	r1, #34	; 0x22
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f7f9 fa61 	bl	8006988 <d_make_comp>
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	9001      	str	r0, [sp, #4]
 800d4ca:	e6fb      	b.n	800d2c4 <d_type+0x170>
 800d4cc:	3101      	adds	r1, #1
 800d4ce:	60e1      	str	r1, [r4, #12]
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f7ff fe3f 	bl	800d154 <d_type>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	4602      	mov	r2, r0
 800d4da:	2123      	movs	r1, #35	; 0x23
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f7f9 fa53 	bl	8006988 <d_make_comp>
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	9001      	str	r0, [sp, #4]
 800d4e6:	e6ed      	b.n	800d2c4 <d_type+0x170>
 800d4e8:	784b      	ldrb	r3, [r1, #1]
 800d4ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d4ee:	2a09      	cmp	r2, #9
 800d4f0:	d905      	bls.n	800d4fe <d_type+0x3aa>
 800d4f2:	2b5f      	cmp	r3, #95	; 0x5f
 800d4f4:	d003      	beq.n	800d4fe <d_type+0x3aa>
 800d4f6:	3b41      	subs	r3, #65	; 0x41
 800d4f8:	2b19      	cmp	r3, #25
 800d4fa:	f200 818a 	bhi.w	800d812 <d_type+0x6be>
 800d4fe:	2100      	movs	r1, #0
 800d500:	4620      	mov	r0, r4
 800d502:	f7f9 fc7d 	bl	8006e00 <d_substitution>
 800d506:	68e3      	ldr	r3, [r4, #12]
 800d508:	9001      	str	r0, [sp, #4]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	4605      	mov	r5, r0
 800d50e:	2b49      	cmp	r3, #73	; 0x49
 800d510:	f47f aebc 	bne.w	800d28c <d_type+0x138>
 800d514:	4620      	mov	r0, r4
 800d516:	f7fd f937 	bl	800a788 <d_template_args>
 800d51a:	462a      	mov	r2, r5
 800d51c:	4603      	mov	r3, r0
 800d51e:	2104      	movs	r1, #4
 800d520:	4620      	mov	r0, r4
 800d522:	f7f9 fa31 	bl	8006988 <d_make_comp>
 800d526:	4605      	mov	r5, r0
 800d528:	e7b2      	b.n	800d490 <d_type+0x33c>
 800d52a:	3101      	adds	r1, #1
 800d52c:	60e1      	str	r1, [r4, #12]
 800d52e:	4620      	mov	r0, r4
 800d530:	f7f9 fbee 	bl	8006d10 <d_source_name>
 800d534:	9001      	str	r0, [sp, #4]
 800d536:	4620      	mov	r0, r4
 800d538:	f7ff fe0c 	bl	800d154 <d_type>
 800d53c:	9b01      	ldr	r3, [sp, #4]
 800d53e:	4602      	mov	r2, r0
 800d540:	2121      	movs	r1, #33	; 0x21
 800d542:	4620      	mov	r0, r4
 800d544:	f7f9 fa20 	bl	8006988 <d_make_comp>
 800d548:	4605      	mov	r5, r0
 800d54a:	9001      	str	r0, [sp, #4]
 800d54c:	e6ba      	b.n	800d2c4 <d_type+0x170>
 800d54e:	3b61      	subs	r3, #97	; 0x61
 800d550:	4fb6      	ldr	r7, [pc, #728]	; (800d82c <d_type+0x6d8>)
 800d552:	6962      	ldr	r2, [r4, #20]
 800d554:	69a5      	ldr	r5, [r4, #24]
 800d556:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 800d560:	42aa      	cmp	r2, r5
 800d562:	4418      	add	r0, r3
 800d564:	f280 8136 	bge.w	800d7d4 <d_type+0x680>
 800d568:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800d56c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800d570:	00b6      	lsls	r6, r6, #2
 800d572:	3201      	adds	r2, #1
 800d574:	eb1e 0506 	adds.w	r5, lr, r6
 800d578:	6162      	str	r2, [r4, #20]
 800d57a:	f000 812b 	beq.w	800d7d4 <d_type+0x680>
 800d57e:	2227      	movs	r2, #39	; 0x27
 800d580:	f80e 2006 	strb.w	r2, [lr, r6]
 800d584:	443b      	add	r3, r7
 800d586:	6068      	str	r0, [r5, #4]
 800d588:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d58a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d58e:	3101      	adds	r1, #1
 800d590:	4413      	add	r3, r2
 800d592:	60e1      	str	r1, [r4, #12]
 800d594:	6323      	str	r3, [r4, #48]	; 0x30
 800d596:	e679      	b.n	800d28c <d_type+0x138>
 800d598:	4620      	mov	r0, r4
 800d59a:	f7f9 fb97 	bl	8006ccc <d_template_param>
 800d59e:	68e6      	ldr	r6, [r4, #12]
 800d5a0:	9001      	str	r0, [sp, #4]
 800d5a2:	7833      	ldrb	r3, [r6, #0]
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	2b49      	cmp	r3, #73	; 0x49
 800d5a8:	f47f ae8c 	bne.w	800d2c4 <d_type+0x170>
 800d5ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f040 814e 	bne.w	800d850 <d_type+0x6fc>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	f43f ae68 	beq.w	800d28a <d_type+0x136>
 800d5ba:	6a23      	ldr	r3, [r4, #32]
 800d5bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	f6bf ae63 	bge.w	800d28a <d_type+0x136>
 800d5c4:	69e1      	ldr	r1, [r4, #28]
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800d5cc:	6222      	str	r2, [r4, #32]
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	9d01      	ldr	r5, [sp, #4]
 800d5d2:	f7fd f8d9 	bl	800a788 <d_template_args>
 800d5d6:	462a      	mov	r2, r5
 800d5d8:	4603      	mov	r3, r0
 800d5da:	e7a0      	b.n	800d51e <d_type+0x3ca>
 800d5dc:	6963      	ldr	r3, [r4, #20]
 800d5de:	69a2      	ldr	r2, [r4, #24]
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	f280 80f7 	bge.w	800d7d4 <d_type+0x680>
 800d5e6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d5ea:	6922      	ldr	r2, [r4, #16]
 800d5ec:	0089      	lsls	r1, r1, #2
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	1855      	adds	r5, r2, r1
 800d5f2:	6163      	str	r3, [r4, #20]
 800d5f4:	f000 80ee 	beq.w	800d7d4 <d_type+0x680>
 800d5f8:	4b8d      	ldr	r3, [pc, #564]	; (800d830 <d_type+0x6dc>)
 800d5fa:	2027      	movs	r0, #39	; 0x27
 800d5fc:	5450      	strb	r0, [r2, r1]
 800d5fe:	606b      	str	r3, [r5, #4]
 800d600:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d602:	3308      	adds	r3, #8
 800d604:	6323      	str	r3, [r4, #48]	; 0x30
 800d606:	e641      	b.n	800d28c <d_type+0x138>
 800d608:	6963      	ldr	r3, [r4, #20]
 800d60a:	69a2      	ldr	r2, [r4, #24]
 800d60c:	4293      	cmp	r3, r2
 800d60e:	f280 80e1 	bge.w	800d7d4 <d_type+0x680>
 800d612:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d616:	6922      	ldr	r2, [r4, #16]
 800d618:	0089      	lsls	r1, r1, #2
 800d61a:	3301      	adds	r3, #1
 800d61c:	1855      	adds	r5, r2, r1
 800d61e:	6163      	str	r3, [r4, #20]
 800d620:	f000 80d8 	beq.w	800d7d4 <d_type+0x680>
 800d624:	4b83      	ldr	r3, [pc, #524]	; (800d834 <d_type+0x6e0>)
 800d626:	2027      	movs	r0, #39	; 0x27
 800d628:	5450      	strb	r0, [r2, r1]
 800d62a:	606b      	str	r3, [r5, #4]
 800d62c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d62e:	3304      	adds	r3, #4
 800d630:	6323      	str	r3, [r4, #48]	; 0x30
 800d632:	e62b      	b.n	800d28c <d_type+0x138>
 800d634:	6963      	ldr	r3, [r4, #20]
 800d636:	69a2      	ldr	r2, [r4, #24]
 800d638:	4293      	cmp	r3, r2
 800d63a:	f280 80cb 	bge.w	800d7d4 <d_type+0x680>
 800d63e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d642:	6922      	ldr	r2, [r4, #16]
 800d644:	0089      	lsls	r1, r1, #2
 800d646:	3301      	adds	r3, #1
 800d648:	1855      	adds	r5, r2, r1
 800d64a:	6163      	str	r3, [r4, #20]
 800d64c:	f000 80c2 	beq.w	800d7d4 <d_type+0x680>
 800d650:	4b79      	ldr	r3, [pc, #484]	; (800d838 <d_type+0x6e4>)
 800d652:	2027      	movs	r0, #39	; 0x27
 800d654:	5450      	strb	r0, [r2, r1]
 800d656:	606b      	str	r3, [r5, #4]
 800d658:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d65a:	3309      	adds	r3, #9
 800d65c:	6323      	str	r3, [r4, #48]	; 0x30
 800d65e:	e615      	b.n	800d28c <d_type+0x138>
 800d660:	6963      	ldr	r3, [r4, #20]
 800d662:	69a2      	ldr	r2, [r4, #24]
 800d664:	4293      	cmp	r3, r2
 800d666:	f280 80b5 	bge.w	800d7d4 <d_type+0x680>
 800d66a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d66e:	6922      	ldr	r2, [r4, #16]
 800d670:	0089      	lsls	r1, r1, #2
 800d672:	3301      	adds	r3, #1
 800d674:	1855      	adds	r5, r2, r1
 800d676:	6163      	str	r3, [r4, #20]
 800d678:	f000 80ac 	beq.w	800d7d4 <d_type+0x680>
 800d67c:	4b6f      	ldr	r3, [pc, #444]	; (800d83c <d_type+0x6e8>)
 800d67e:	2027      	movs	r0, #39	; 0x27
 800d680:	5450      	strb	r0, [r2, r1]
 800d682:	606b      	str	r3, [r5, #4]
 800d684:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d686:	330a      	adds	r3, #10
 800d688:	6323      	str	r3, [r4, #48]	; 0x30
 800d68a:	e5ff      	b.n	800d28c <d_type+0x138>
 800d68c:	788b      	ldrb	r3, [r1, #2]
 800d68e:	2b5f      	cmp	r3, #95	; 0x5f
 800d690:	f000 80fd 	beq.w	800d88e <d_type+0x73a>
 800d694:	4620      	mov	r0, r4
 800d696:	f7f9 fae5 	bl	8006c64 <d_number_component>
 800d69a:	4605      	mov	r5, r0
 800d69c:	2d00      	cmp	r5, #0
 800d69e:	f43f aef7 	beq.w	800d490 <d_type+0x33c>
 800d6a2:	68e3      	ldr	r3, [r4, #12]
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	2a5f      	cmp	r2, #95	; 0x5f
 800d6a8:	f47f ae46 	bne.w	800d338 <d_type+0x1e4>
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	60e3      	str	r3, [r4, #12]
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f7ff fd4f 	bl	800d154 <d_type>
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	212d      	movs	r1, #45	; 0x2d
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f7f9 f963 	bl	8006988 <d_make_comp>
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	e6e4      	b.n	800d490 <d_type+0x33c>
 800d6c6:	6963      	ldr	r3, [r4, #20]
 800d6c8:	69a2      	ldr	r2, [r4, #24]
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	f280 8082 	bge.w	800d7d4 <d_type+0x680>
 800d6d0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d6d4:	6922      	ldr	r2, [r4, #16]
 800d6d6:	0089      	lsls	r1, r1, #2
 800d6d8:	3301      	adds	r3, #1
 800d6da:	1855      	adds	r5, r2, r1
 800d6dc:	6163      	str	r3, [r4, #20]
 800d6de:	d079      	beq.n	800d7d4 <d_type+0x680>
 800d6e0:	4b57      	ldr	r3, [pc, #348]	; (800d840 <d_type+0x6ec>)
 800d6e2:	e78a      	b.n	800d5fa <d_type+0x4a6>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f7ff fd35 	bl	800d154 <d_type>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	2149      	movs	r1, #73	; 0x49
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f7f9 f949 	bl	8006988 <d_make_comp>
 800d6f6:	4605      	mov	r5, r0
 800d6f8:	9001      	str	r0, [sp, #4]
 800d6fa:	e5e3      	b.n	800d2c4 <d_type+0x170>
 800d6fc:	6963      	ldr	r3, [r4, #20]
 800d6fe:	69a2      	ldr	r2, [r4, #24]
 800d700:	4293      	cmp	r3, r2
 800d702:	da67      	bge.n	800d7d4 <d_type+0x680>
 800d704:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d708:	6922      	ldr	r2, [r4, #16]
 800d70a:	0089      	lsls	r1, r1, #2
 800d70c:	3301      	adds	r3, #1
 800d70e:	1855      	adds	r5, r2, r1
 800d710:	6163      	str	r3, [r4, #20]
 800d712:	d05f      	beq.n	800d7d4 <d_type+0x680>
 800d714:	4b4b      	ldr	r3, [pc, #300]	; (800d844 <d_type+0x6f0>)
 800d716:	2027      	movs	r0, #39	; 0x27
 800d718:	5450      	strb	r0, [r2, r1]
 800d71a:	606b      	str	r3, [r5, #4]
 800d71c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d71e:	3311      	adds	r3, #17
 800d720:	6323      	str	r3, [r4, #48]	; 0x30
 800d722:	e5b3      	b.n	800d28c <d_type+0x138>
 800d724:	6963      	ldr	r3, [r4, #20]
 800d726:	69a2      	ldr	r2, [r4, #24]
 800d728:	4293      	cmp	r3, r2
 800d72a:	da53      	bge.n	800d7d4 <d_type+0x680>
 800d72c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d730:	6922      	ldr	r2, [r4, #16]
 800d732:	0089      	lsls	r1, r1, #2
 800d734:	3301      	adds	r3, #1
 800d736:	1855      	adds	r5, r2, r1
 800d738:	6163      	str	r3, [r4, #20]
 800d73a:	d04b      	beq.n	800d7d4 <d_type+0x680>
 800d73c:	4b42      	ldr	r3, [pc, #264]	; (800d848 <d_type+0x6f4>)
 800d73e:	e788      	b.n	800d652 <d_type+0x4fe>
 800d740:	6963      	ldr	r3, [r4, #20]
 800d742:	69a2      	ldr	r2, [r4, #24]
 800d744:	4293      	cmp	r3, r2
 800d746:	f6bf ada0 	bge.w	800d28a <d_type+0x136>
 800d74a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d74e:	6921      	ldr	r1, [r4, #16]
 800d750:	3301      	adds	r3, #1
 800d752:	0092      	lsls	r2, r2, #2
 800d754:	6163      	str	r3, [r4, #20]
 800d756:	188b      	adds	r3, r1, r2
 800d758:	f43f ad97 	beq.w	800d28a <d_type+0x136>
 800d75c:	4c3b      	ldr	r4, [pc, #236]	; (800d84c <d_type+0x6f8>)
 800d75e:	2500      	movs	r5, #0
 800d760:	2004      	movs	r0, #4
 800d762:	548d      	strb	r5, [r1, r2]
 800d764:	461d      	mov	r5, r3
 800d766:	605c      	str	r4, [r3, #4]
 800d768:	6098      	str	r0, [r3, #8]
 800d76a:	e58f      	b.n	800d28c <d_type+0x138>
 800d76c:	6963      	ldr	r3, [r4, #20]
 800d76e:	69a2      	ldr	r2, [r4, #24]
 800d770:	4293      	cmp	r3, r2
 800d772:	f280 8083 	bge.w	800d87c <d_type+0x728>
 800d776:	6925      	ldr	r5, [r4, #16]
 800d778:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d77c:	0080      	lsls	r0, r0, #2
 800d77e:	3301      	adds	r3, #1
 800d780:	182a      	adds	r2, r5, r0
 800d782:	262c      	movs	r6, #44	; 0x2c
 800d784:	6163      	str	r3, [r4, #20]
 800d786:	9201      	str	r2, [sp, #4]
 800d788:	542e      	strb	r6, [r5, r0]
 800d78a:	788b      	ldrb	r3, [r1, #2]
 800d78c:	3b30      	subs	r3, #48	; 0x30
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b09      	cmp	r3, #9
 800d792:	bf94      	ite	ls
 800d794:	2301      	movls	r3, #1
 800d796:	2300      	movhi	r3, #0
 800d798:	8113      	strh	r3, [r2, #8]
 800d79a:	d972      	bls.n	800d882 <d_type+0x72e>
 800d79c:	4615      	mov	r5, r2
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f7ff fcd8 	bl	800d154 <d_type>
 800d7a4:	9b01      	ldr	r3, [sp, #4]
 800d7a6:	6068      	str	r0, [r5, #4]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f43f ad6d 	beq.w	800d28a <d_type+0x136>
 800d7b0:	f104 000c 	add.w	r0, r4, #12
 800d7b4:	f7f9 fa2e 	bl	8006c14 <d_number.isra.0>
 800d7b8:	68e2      	ldr	r2, [r4, #12]
 800d7ba:	7813      	ldrb	r3, [r2, #0]
 800d7bc:	b13b      	cbz	r3, 800d7ce <d_type+0x67a>
 800d7be:	1c53      	adds	r3, r2, #1
 800d7c0:	60e3      	str	r3, [r4, #12]
 800d7c2:	7813      	ldrb	r3, [r2, #0]
 800d7c4:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 800d7c8:	fab3 f383 	clz	r3, r3
 800d7cc:	095b      	lsrs	r3, r3, #5
 800d7ce:	9d01      	ldr	r5, [sp, #4]
 800d7d0:	816b      	strh	r3, [r5, #10]
 800d7d2:	e55b      	b.n	800d28c <d_type+0x138>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	deff      	udf	#255	; 0xff
 800d7dc:	2500      	movs	r5, #0
 800d7de:	3001      	adds	r0, #1
 800d7e0:	60e0      	str	r0, [r4, #12]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f7ff fcb6 	bl	800d154 <d_type>
 800d7e8:	462a      	mov	r2, r5
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	212a      	movs	r1, #42	; 0x2a
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f7f9 f8ca 	bl	8006988 <d_make_comp>
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	e64b      	b.n	800d490 <d_type+0x33c>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	6363      	str	r3, [r4, #52]	; 0x34
 800d800:	f7ff fad6 	bl	800cdb0 <d_expression_1>
 800d804:	6365      	str	r5, [r4, #52]	; 0x34
 800d806:	4605      	mov	r5, r0
 800d808:	2800      	cmp	r0, #0
 800d80a:	f43f ad95 	beq.w	800d338 <d_type+0x1e4>
 800d80e:	68e3      	ldr	r3, [r4, #12]
 800d810:	e58e      	b.n	800d330 <d_type+0x1dc>
 800d812:	4620      	mov	r0, r4
 800d814:	f000 fa90 	bl	800dd38 <d_name>
 800d818:	4605      	mov	r5, r0
 800d81a:	9001      	str	r0, [sp, #4]
 800d81c:	2800      	cmp	r0, #0
 800d81e:	f43f ad34 	beq.w	800d28a <d_type+0x136>
 800d822:	7803      	ldrb	r3, [r0, #0]
 800d824:	2b18      	cmp	r3, #24
 800d826:	f47f ad4f 	bne.w	800d2c8 <d_type+0x174>
 800d82a:	e52f      	b.n	800d28c <d_type+0x138>
 800d82c:	080125c8 	.word	0x080125c8
 800d830:	080128f8 	.word	0x080128f8
 800d834:	080128d0 	.word	0x080128d0
 800d838:	08012894 	.word	0x08012894
 800d83c:	080128bc 	.word	0x080128bc
 800d840:	080128e4 	.word	0x080128e4
 800d844:	0801290c 	.word	0x0801290c
 800d848:	080128a8 	.word	0x080128a8
 800d84c:	08013abc 	.word	0x08013abc
 800d850:	4620      	mov	r0, r4
 800d852:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800d856:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800d85a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800d85c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d85e:	f7fc ff93 	bl	800a788 <d_template_args>
 800d862:	68e2      	ldr	r2, [r4, #12]
 800d864:	7812      	ldrb	r2, [r2, #0]
 800d866:	2a49      	cmp	r2, #73	; 0x49
 800d868:	d01c      	beq.n	800d8a4 <d_type+0x750>
 800d86a:	6325      	str	r5, [r4, #48]	; 0x30
 800d86c:	60e6      	str	r6, [r4, #12]
 800d86e:	f8c4 9014 	str.w	r9, [r4, #20]
 800d872:	f8c4 8020 	str.w	r8, [r4, #32]
 800d876:	62a7      	str	r7, [r4, #40]	; 0x28
 800d878:	9d01      	ldr	r5, [sp, #4]
 800d87a:	e523      	b.n	800d2c4 <d_type+0x170>
 800d87c:	2300      	movs	r3, #0
 800d87e:	701b      	strb	r3, [r3, #0]
 800d880:	deff      	udf	#255	; 0xff
 800d882:	f104 000c 	add.w	r0, r4, #12
 800d886:	f7f9 f9c5 	bl	8006c14 <d_number.isra.0>
 800d88a:	9d01      	ldr	r5, [sp, #4]
 800d88c:	e787      	b.n	800d79e <d_type+0x64a>
 800d88e:	3103      	adds	r1, #3
 800d890:	2301      	movs	r3, #1
 800d892:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800d894:	60e1      	str	r1, [r4, #12]
 800d896:	6363      	str	r3, [r4, #52]	; 0x34
 800d898:	4620      	mov	r0, r4
 800d89a:	f7ff fa89 	bl	800cdb0 <d_expression_1>
 800d89e:	6366      	str	r6, [r4, #52]	; 0x34
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	e6fb      	b.n	800d69c <d_type+0x548>
 800d8a4:	9b01      	ldr	r3, [sp, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f43f acef 	beq.w	800d28a <d_type+0x136>
 800d8ac:	6a22      	ldr	r2, [r4, #32]
 800d8ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d8b0:	428a      	cmp	r2, r1
 800d8b2:	f6bf acea 	bge.w	800d28a <d_type+0x136>
 800d8b6:	69e5      	ldr	r5, [r4, #28]
 800d8b8:	1c51      	adds	r1, r2, #1
 800d8ba:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800d8be:	9a01      	ldr	r2, [sp, #4]
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	6221      	str	r1, [r4, #32]
 800d8c4:	e62b      	b.n	800d51e <d_type+0x3ca>
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	e789      	b.n	800d7de <d_type+0x68a>
 800d8ca:	bf00      	nop

0800d8cc <d_operator_name>:
 800d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d0:	68c3      	ldr	r3, [r0, #12]
 800d8d2:	4684      	mov	ip, r0
 800d8d4:	781f      	ldrb	r7, [r3, #0]
 800d8d6:	b317      	cbz	r7, 800d91e <d_operator_name+0x52>
 800d8d8:	1c5a      	adds	r2, r3, #1
 800d8da:	60c2      	str	r2, [r0, #12]
 800d8dc:	785a      	ldrb	r2, [r3, #1]
 800d8de:	781f      	ldrb	r7, [r3, #0]
 800d8e0:	2a00      	cmp	r2, #0
 800d8e2:	d059      	beq.n	800d998 <d_operator_name+0xcc>
 800d8e4:	1c9a      	adds	r2, r3, #2
 800d8e6:	60c2      	str	r2, [r0, #12]
 800d8e8:	2f76      	cmp	r7, #118	; 0x76
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	f893 e001 	ldrb.w	lr, [r3, #1]
 800d8f0:	d043      	beq.n	800d97a <d_operator_name+0xae>
 800d8f2:	2f63      	cmp	r7, #99	; 0x63
 800d8f4:	d114      	bne.n	800d920 <d_operator_name+0x54>
 800d8f6:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 800d8fa:	d111      	bne.n	800d920 <d_operator_name+0x54>
 800d8fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d8fe:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800d900:	fab3 f383 	clz	r3, r3
 800d904:	095b      	lsrs	r3, r3, #5
 800d906:	6383      	str	r3, [r0, #56]	; 0x38
 800d908:	f7ff fc24 	bl	800d154 <d_type>
 800d90c:	63a5      	str	r5, [r4, #56]	; 0x38
 800d90e:	4602      	mov	r2, r0
 800d910:	2300      	movs	r3, #0
 800d912:	4620      	mov	r0, r4
 800d914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d918:	2133      	movs	r1, #51	; 0x33
 800d91a:	f7f9 b835 	b.w	8006988 <d_make_comp>
 800d91e:	46be      	mov	lr, r7
 800d920:	4d28      	ldr	r5, [pc, #160]	; (800d9c4 <d_operator_name+0xf8>)
 800d922:	203d      	movs	r0, #61	; 0x3d
 800d924:	2200      	movs	r2, #0
 800d926:	e004      	b.n	800d932 <d_operator_name+0x66>
 800d928:	bf8c      	ite	hi
 800d92a:	4618      	movhi	r0, r3
 800d92c:	1c5a      	addls	r2, r3, #1
 800d92e:	4282      	cmp	r2, r0
 800d930:	d02f      	beq.n	800d992 <d_operator_name+0xc6>
 800d932:	1a83      	subs	r3, r0, r2
 800d934:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d938:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800d93c:	0119      	lsls	r1, r3, #4
 800d93e:	586c      	ldr	r4, [r5, r1]
 800d940:	4429      	add	r1, r5
 800d942:	7826      	ldrb	r6, [r4, #0]
 800d944:	42be      	cmp	r6, r7
 800d946:	d1ef      	bne.n	800d928 <d_operator_name+0x5c>
 800d948:	7864      	ldrb	r4, [r4, #1]
 800d94a:	4574      	cmp	r4, lr
 800d94c:	d1ec      	bne.n	800d928 <d_operator_name+0x5c>
 800d94e:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800d952:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800d956:	4293      	cmp	r3, r2
 800d958:	da1b      	bge.n	800d992 <d_operator_name+0xc6>
 800d95a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d95e:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800d962:	3301      	adds	r3, #1
 800d964:	0092      	lsls	r2, r2, #2
 800d966:	f8cc 3014 	str.w	r3, [ip, #20]
 800d96a:	1883      	adds	r3, r0, r2
 800d96c:	d027      	beq.n	800d9be <d_operator_name+0xf2>
 800d96e:	2431      	movs	r4, #49	; 0x31
 800d970:	5484      	strb	r4, [r0, r2]
 800d972:	6059      	str	r1, [r3, #4]
 800d974:	4618      	mov	r0, r3
 800d976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d97a:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 800d97e:	b2eb      	uxtb	r3, r5
 800d980:	2b09      	cmp	r3, #9
 800d982:	d8cd      	bhi.n	800d920 <d_operator_name+0x54>
 800d984:	f7f9 f9c4 	bl	8006d10 <d_source_name>
 800d988:	6963      	ldr	r3, [r4, #20]
 800d98a:	69a2      	ldr	r2, [r4, #24]
 800d98c:	4601      	mov	r1, r0
 800d98e:	4293      	cmp	r3, r2
 800d990:	db04      	blt.n	800d99c <d_operator_name+0xd0>
 800d992:	2000      	movs	r0, #0
 800d994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d998:	4696      	mov	lr, r2
 800d99a:	e7c1      	b.n	800d920 <d_operator_name+0x54>
 800d99c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d9a0:	6920      	ldr	r0, [r4, #16]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	0092      	lsls	r2, r2, #2
 800d9a6:	6163      	str	r3, [r4, #20]
 800d9a8:	1883      	adds	r3, r0, r2
 800d9aa:	d0f2      	beq.n	800d992 <d_operator_name+0xc6>
 800d9ac:	2900      	cmp	r1, #0
 800d9ae:	d0f0      	beq.n	800d992 <d_operator_name+0xc6>
 800d9b0:	2432      	movs	r4, #50	; 0x32
 800d9b2:	5484      	strb	r4, [r0, r2]
 800d9b4:	605d      	str	r5, [r3, #4]
 800d9b6:	6099      	str	r1, [r3, #8]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c4:	08012920 	.word	0x08012920

0800d9c8 <d_parmlist>:
 800d9c8:	b530      	push	{r4, r5, lr}
 800d9ca:	68c2      	ldr	r2, [r0, #12]
 800d9cc:	b083      	sub	sp, #12
 800d9ce:	7813      	ldrb	r3, [r2, #0]
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	9101      	str	r1, [sp, #4]
 800d9d4:	b343      	cbz	r3, 800da28 <d_parmlist+0x60>
 800d9d6:	2b45      	cmp	r3, #69	; 0x45
 800d9d8:	d026      	beq.n	800da28 <d_parmlist+0x60>
 800d9da:	2b2e      	cmp	r3, #46	; 0x2e
 800d9dc:	d024      	beq.n	800da28 <d_parmlist+0x60>
 800d9de:	4604      	mov	r4, r0
 800d9e0:	ad01      	add	r5, sp, #4
 800d9e2:	e016      	b.n	800da12 <d_parmlist+0x4a>
 800d9e4:	2b4f      	cmp	r3, #79	; 0x4f
 800d9e6:	d016      	beq.n	800da16 <d_parmlist+0x4e>
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f7ff fbb3 	bl	800d154 <d_type>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	212e      	movs	r1, #46	; 0x2e
 800d9f2:	b1c8      	cbz	r0, 800da28 <d_parmlist+0x60>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f7f8 ffc6 	bl	8006988 <d_make_comp>
 800d9fc:	6028      	str	r0, [r5, #0]
 800d9fe:	b198      	cbz	r0, 800da28 <d_parmlist+0x60>
 800da00:	68e2      	ldr	r2, [r4, #12]
 800da02:	f100 0508 	add.w	r5, r0, #8
 800da06:	7813      	ldrb	r3, [r2, #0]
 800da08:	b143      	cbz	r3, 800da1c <d_parmlist+0x54>
 800da0a:	2b45      	cmp	r3, #69	; 0x45
 800da0c:	d006      	beq.n	800da1c <d_parmlist+0x54>
 800da0e:	2b2e      	cmp	r3, #46	; 0x2e
 800da10:	d004      	beq.n	800da1c <d_parmlist+0x54>
 800da12:	2b52      	cmp	r3, #82	; 0x52
 800da14:	d1e6      	bne.n	800d9e4 <d_parmlist+0x1c>
 800da16:	7853      	ldrb	r3, [r2, #1]
 800da18:	2b45      	cmp	r3, #69	; 0x45
 800da1a:	d1e5      	bne.n	800d9e8 <d_parmlist+0x20>
 800da1c:	9801      	ldr	r0, [sp, #4]
 800da1e:	b118      	cbz	r0, 800da28 <d_parmlist+0x60>
 800da20:	6883      	ldr	r3, [r0, #8]
 800da22:	b123      	cbz	r3, 800da2e <d_parmlist+0x66>
 800da24:	b003      	add	sp, #12
 800da26:	bd30      	pop	{r4, r5, pc}
 800da28:	2000      	movs	r0, #0
 800da2a:	b003      	add	sp, #12
 800da2c:	bd30      	pop	{r4, r5, pc}
 800da2e:	6842      	ldr	r2, [r0, #4]
 800da30:	7811      	ldrb	r1, [r2, #0]
 800da32:	2927      	cmp	r1, #39	; 0x27
 800da34:	d1f6      	bne.n	800da24 <d_parmlist+0x5c>
 800da36:	6852      	ldr	r2, [r2, #4]
 800da38:	7c11      	ldrb	r1, [r2, #16]
 800da3a:	2909      	cmp	r1, #9
 800da3c:	d1f2      	bne.n	800da24 <d_parmlist+0x5c>
 800da3e:	6851      	ldr	r1, [r2, #4]
 800da40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800da42:	1a52      	subs	r2, r2, r1
 800da44:	6322      	str	r2, [r4, #48]	; 0x30
 800da46:	6043      	str	r3, [r0, #4]
 800da48:	e7ec      	b.n	800da24 <d_parmlist+0x5c>
 800da4a:	bf00      	nop

0800da4c <d_unqualified_name>:
 800da4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4e:	68c2      	ldr	r2, [r0, #12]
 800da50:	4604      	mov	r4, r0
 800da52:	7813      	ldrb	r3, [r2, #0]
 800da54:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800da58:	2909      	cmp	r1, #9
 800da5a:	d920      	bls.n	800da9e <d_unqualified_name+0x52>
 800da5c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 800da60:	2919      	cmp	r1, #25
 800da62:	d933      	bls.n	800dacc <d_unqualified_name+0x80>
 800da64:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 800da68:	2901      	cmp	r1, #1
 800da6a:	d921      	bls.n	800dab0 <d_unqualified_name+0x64>
 800da6c:	2b4c      	cmp	r3, #76	; 0x4c
 800da6e:	f000 8089 	beq.w	800db84 <d_unqualified_name+0x138>
 800da72:	2b55      	cmp	r3, #85	; 0x55
 800da74:	d128      	bne.n	800dac8 <d_unqualified_name+0x7c>
 800da76:	7853      	ldrb	r3, [r2, #1]
 800da78:	2b6c      	cmp	r3, #108	; 0x6c
 800da7a:	d032      	beq.n	800dae2 <d_unqualified_name+0x96>
 800da7c:	2b74      	cmp	r3, #116	; 0x74
 800da7e:	d123      	bne.n	800dac8 <d_unqualified_name+0x7c>
 800da80:	1c53      	adds	r3, r2, #1
 800da82:	60c3      	str	r3, [r0, #12]
 800da84:	7853      	ldrb	r3, [r2, #1]
 800da86:	2b74      	cmp	r3, #116	; 0x74
 800da88:	d05b      	beq.n	800db42 <d_unqualified_name+0xf6>
 800da8a:	2b42      	cmp	r3, #66	; 0x42
 800da8c:	f04f 0500 	mov.w	r5, #0
 800da90:	d10c      	bne.n	800daac <d_unqualified_name+0x60>
 800da92:	4629      	mov	r1, r5
 800da94:	4620      	mov	r0, r4
 800da96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da9a:	f7f9 b997 	b.w	8006dcc <d_abi_tags>
 800da9e:	f7f9 f937 	bl	8006d10 <d_source_name>
 800daa2:	4605      	mov	r5, r0
 800daa4:	68e3      	ldr	r3, [r4, #12]
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	2b42      	cmp	r3, #66	; 0x42
 800daaa:	d0f2      	beq.n	800da92 <d_unqualified_name+0x46>
 800daac:	4628      	mov	r0, r5
 800daae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dab0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dab2:	b121      	cbz	r1, 800dabe <d_unqualified_name+0x72>
 800dab4:	7808      	ldrb	r0, [r1, #0]
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d078      	beq.n	800dbac <d_unqualified_name+0x160>
 800daba:	2818      	cmp	r0, #24
 800dabc:	d076      	beq.n	800dbac <d_unqualified_name+0x160>
 800dabe:	2b43      	cmp	r3, #67	; 0x43
 800dac0:	f000 80cd 	beq.w	800dc5e <d_unqualified_name+0x212>
 800dac4:	2b44      	cmp	r3, #68	; 0x44
 800dac6:	d07b      	beq.n	800dbc0 <d_unqualified_name+0x174>
 800dac8:	2000      	movs	r0, #0
 800daca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dacc:	f7ff fefe 	bl	800d8cc <d_operator_name>
 800dad0:	4605      	mov	r5, r0
 800dad2:	b118      	cbz	r0, 800dadc <d_unqualified_name+0x90>
 800dad4:	7803      	ldrb	r3, [r0, #0]
 800dad6:	2b31      	cmp	r3, #49	; 0x31
 800dad8:	f000 80a4 	beq.w	800dc24 <d_unqualified_name+0x1d8>
 800dadc:	68e3      	ldr	r3, [r4, #12]
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	e7e2      	b.n	800daa8 <d_unqualified_name+0x5c>
 800dae2:	1c53      	adds	r3, r2, #1
 800dae4:	60c3      	str	r3, [r0, #12]
 800dae6:	7853      	ldrb	r3, [r2, #1]
 800dae8:	2b6c      	cmp	r3, #108	; 0x6c
 800daea:	d1ce      	bne.n	800da8a <d_unqualified_name+0x3e>
 800daec:	3202      	adds	r2, #2
 800daee:	60c2      	str	r2, [r0, #12]
 800daf0:	f7ff ff6a 	bl	800d9c8 <d_parmlist>
 800daf4:	4606      	mov	r6, r0
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f000 80da 	beq.w	800dcb0 <d_unqualified_name+0x264>
 800dafc:	68e2      	ldr	r2, [r4, #12]
 800dafe:	7813      	ldrb	r3, [r2, #0]
 800db00:	2b45      	cmp	r3, #69	; 0x45
 800db02:	d1c2      	bne.n	800da8a <d_unqualified_name+0x3e>
 800db04:	3201      	adds	r2, #1
 800db06:	60e2      	str	r2, [r4, #12]
 800db08:	4620      	mov	r0, r4
 800db0a:	f7f9 f8c7 	bl	8006c9c <d_compact_number>
 800db0e:	2800      	cmp	r0, #0
 800db10:	db13      	blt.n	800db3a <d_unqualified_name+0xee>
 800db12:	6963      	ldr	r3, [r4, #20]
 800db14:	69a2      	ldr	r2, [r4, #24]
 800db16:	4293      	cmp	r3, r2
 800db18:	da0f      	bge.n	800db3a <d_unqualified_name+0xee>
 800db1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800db1e:	6921      	ldr	r1, [r4, #16]
 800db20:	0092      	lsls	r2, r2, #2
 800db22:	3301      	adds	r3, #1
 800db24:	188d      	adds	r5, r1, r2
 800db26:	6163      	str	r3, [r4, #20]
 800db28:	d007      	beq.n	800db3a <d_unqualified_name+0xee>
 800db2a:	2344      	movs	r3, #68	; 0x44
 800db2c:	548b      	strb	r3, [r1, r2]
 800db2e:	606e      	str	r6, [r5, #4]
 800db30:	60a8      	str	r0, [r5, #8]
 800db32:	6a23      	ldr	r3, [r4, #32]
 800db34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db36:	4293      	cmp	r3, r2
 800db38:	db1c      	blt.n	800db74 <d_unqualified_name+0x128>
 800db3a:	68e3      	ldr	r3, [r4, #12]
 800db3c:	2500      	movs	r5, #0
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	e7b2      	b.n	800daa8 <d_unqualified_name+0x5c>
 800db42:	3202      	adds	r2, #2
 800db44:	60c2      	str	r2, [r0, #12]
 800db46:	f7f9 f8a9 	bl	8006c9c <d_compact_number>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	dbf5      	blt.n	800db3a <d_unqualified_name+0xee>
 800db4e:	6963      	ldr	r3, [r4, #20]
 800db50:	69a2      	ldr	r2, [r4, #24]
 800db52:	4293      	cmp	r3, r2
 800db54:	daf1      	bge.n	800db3a <d_unqualified_name+0xee>
 800db56:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800db5a:	6921      	ldr	r1, [r4, #16]
 800db5c:	0092      	lsls	r2, r2, #2
 800db5e:	3301      	adds	r3, #1
 800db60:	188d      	adds	r5, r1, r2
 800db62:	6163      	str	r3, [r4, #20]
 800db64:	d0e9      	beq.n	800db3a <d_unqualified_name+0xee>
 800db66:	2346      	movs	r3, #70	; 0x46
 800db68:	548b      	strb	r3, [r1, r2]
 800db6a:	6068      	str	r0, [r5, #4]
 800db6c:	6a23      	ldr	r3, [r4, #32]
 800db6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db70:	4293      	cmp	r3, r2
 800db72:	dae2      	bge.n	800db3a <d_unqualified_name+0xee>
 800db74:	69e1      	ldr	r1, [r4, #28]
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800db7c:	68e3      	ldr	r3, [r4, #12]
 800db7e:	6222      	str	r2, [r4, #32]
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	e791      	b.n	800daa8 <d_unqualified_name+0x5c>
 800db84:	3201      	adds	r2, #1
 800db86:	60c2      	str	r2, [r0, #12]
 800db88:	f7f9 f8c2 	bl	8006d10 <d_source_name>
 800db8c:	4605      	mov	r5, r0
 800db8e:	2800      	cmp	r0, #0
 800db90:	d09a      	beq.n	800dac8 <d_unqualified_name+0x7c>
 800db92:	68e2      	ldr	r2, [r4, #12]
 800db94:	7813      	ldrb	r3, [r2, #0]
 800db96:	2b5f      	cmp	r3, #95	; 0x5f
 800db98:	d186      	bne.n	800daa8 <d_unqualified_name+0x5c>
 800db9a:	4620      	mov	r0, r4
 800db9c:	3201      	adds	r2, #1
 800db9e:	f840 2f0c 	str.w	r2, [r0, #12]!
 800dba2:	f7f9 f837 	bl	8006c14 <d_number.isra.0>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	da98      	bge.n	800dadc <d_unqualified_name+0x90>
 800dbaa:	e78d      	b.n	800dac8 <d_unqualified_name+0x7c>
 800dbac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dbae:	688b      	ldr	r3, [r1, #8]
 800dbb0:	4403      	add	r3, r0
 800dbb2:	6323      	str	r3, [r4, #48]	; 0x30
 800dbb4:	7813      	ldrb	r3, [r2, #0]
 800dbb6:	2b43      	cmp	r3, #67	; 0x43
 800dbb8:	d051      	beq.n	800dc5e <d_unqualified_name+0x212>
 800dbba:	2b44      	cmp	r3, #68	; 0x44
 800dbbc:	f47f af65 	bne.w	800da8a <d_unqualified_name+0x3e>
 800dbc0:	7853      	ldrb	r3, [r2, #1]
 800dbc2:	3b30      	subs	r3, #48	; 0x30
 800dbc4:	2b05      	cmp	r3, #5
 800dbc6:	f63f af7f 	bhi.w	800dac8 <d_unqualified_name+0x7c>
 800dbca:	a001      	add	r0, pc, #4	; (adr r0, 800dbd0 <d_unqualified_name+0x184>)
 800dbcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dbd0:	0800dc19 	.word	0x0800dc19
 800dbd4:	0800dbe9 	.word	0x0800dbe9
 800dbd8:	0800dc15 	.word	0x0800dc15
 800dbdc:	0800dac9 	.word	0x0800dac9
 800dbe0:	0800dc21 	.word	0x0800dc21
 800dbe4:	0800dc1d 	.word	0x0800dc1d
 800dbe8:	2702      	movs	r7, #2
 800dbea:	6963      	ldr	r3, [r4, #20]
 800dbec:	69a0      	ldr	r0, [r4, #24]
 800dbee:	1c95      	adds	r5, r2, #2
 800dbf0:	4283      	cmp	r3, r0
 800dbf2:	60e5      	str	r5, [r4, #12]
 800dbf4:	da30      	bge.n	800dc58 <d_unqualified_name+0x20c>
 800dbf6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800dbfa:	6926      	ldr	r6, [r4, #16]
 800dbfc:	0080      	lsls	r0, r0, #2
 800dbfe:	3301      	adds	r3, #1
 800dc00:	1835      	adds	r5, r6, r0
 800dc02:	6163      	str	r3, [r4, #20]
 800dc04:	d028      	beq.n	800dc58 <d_unqualified_name+0x20c>
 800dc06:	b339      	cbz	r1, 800dc58 <d_unqualified_name+0x20c>
 800dc08:	2308      	movs	r3, #8
 800dc0a:	5433      	strb	r3, [r6, r0]
 800dc0c:	712f      	strb	r7, [r5, #4]
 800dc0e:	60a9      	str	r1, [r5, #8]
 800dc10:	7893      	ldrb	r3, [r2, #2]
 800dc12:	e749      	b.n	800daa8 <d_unqualified_name+0x5c>
 800dc14:	2703      	movs	r7, #3
 800dc16:	e7e8      	b.n	800dbea <d_unqualified_name+0x19e>
 800dc18:	2701      	movs	r7, #1
 800dc1a:	e7e6      	b.n	800dbea <d_unqualified_name+0x19e>
 800dc1c:	2705      	movs	r7, #5
 800dc1e:	e7e4      	b.n	800dbea <d_unqualified_name+0x19e>
 800dc20:	2704      	movs	r7, #4
 800dc22:	e7e2      	b.n	800dbea <d_unqualified_name+0x19e>
 800dc24:	6842      	ldr	r2, [r0, #4]
 800dc26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dc28:	6893      	ldr	r3, [r2, #8]
 800dc2a:	6810      	ldr	r0, [r2, #0]
 800dc2c:	440b      	add	r3, r1
 800dc2e:	3307      	adds	r3, #7
 800dc30:	6323      	str	r3, [r4, #48]	; 0x30
 800dc32:	4921      	ldr	r1, [pc, #132]	; (800dcb8 <d_unqualified_name+0x26c>)
 800dc34:	f001 f800 	bl	800ec38 <strcmp>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	f47f af4f 	bne.w	800dadc <d_unqualified_name+0x90>
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f7f9 f866 	bl	8006d10 <d_source_name>
 800dc44:	462a      	mov	r2, r5
 800dc46:	4603      	mov	r3, r0
 800dc48:	2135      	movs	r1, #53	; 0x35
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f7f8 fe9c 	bl	8006988 <d_make_comp>
 800dc50:	68e3      	ldr	r3, [r4, #12]
 800dc52:	4605      	mov	r5, r0
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	e727      	b.n	800daa8 <d_unqualified_name+0x5c>
 800dc58:	7893      	ldrb	r3, [r2, #2]
 800dc5a:	2500      	movs	r5, #0
 800dc5c:	e724      	b.n	800daa8 <d_unqualified_name+0x5c>
 800dc5e:	7853      	ldrb	r3, [r2, #1]
 800dc60:	3b31      	subs	r3, #49	; 0x31
 800dc62:	2b04      	cmp	r3, #4
 800dc64:	f63f af30 	bhi.w	800dac8 <d_unqualified_name+0x7c>
 800dc68:	e8df f003 	tbb	[pc, r3]
 800dc6c:	1e20031a 	.word	0x1e20031a
 800dc70:	1c          	.byte	0x1c
 800dc71:	00          	.byte	0x00
 800dc72:	2702      	movs	r7, #2
 800dc74:	6963      	ldr	r3, [r4, #20]
 800dc76:	69a0      	ldr	r0, [r4, #24]
 800dc78:	1c95      	adds	r5, r2, #2
 800dc7a:	4283      	cmp	r3, r0
 800dc7c:	60e5      	str	r5, [r4, #12]
 800dc7e:	daeb      	bge.n	800dc58 <d_unqualified_name+0x20c>
 800dc80:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800dc84:	6926      	ldr	r6, [r4, #16]
 800dc86:	0080      	lsls	r0, r0, #2
 800dc88:	3301      	adds	r3, #1
 800dc8a:	1835      	adds	r5, r6, r0
 800dc8c:	6163      	str	r3, [r4, #20]
 800dc8e:	d0e3      	beq.n	800dc58 <d_unqualified_name+0x20c>
 800dc90:	2900      	cmp	r1, #0
 800dc92:	d0e1      	beq.n	800dc58 <d_unqualified_name+0x20c>
 800dc94:	2307      	movs	r3, #7
 800dc96:	5433      	strb	r3, [r6, r0]
 800dc98:	712f      	strb	r7, [r5, #4]
 800dc9a:	60a9      	str	r1, [r5, #8]
 800dc9c:	7893      	ldrb	r3, [r2, #2]
 800dc9e:	e703      	b.n	800daa8 <d_unqualified_name+0x5c>
 800dca0:	2701      	movs	r7, #1
 800dca2:	e7e7      	b.n	800dc74 <d_unqualified_name+0x228>
 800dca4:	2705      	movs	r7, #5
 800dca6:	e7e5      	b.n	800dc74 <d_unqualified_name+0x228>
 800dca8:	2704      	movs	r7, #4
 800dcaa:	e7e3      	b.n	800dc74 <d_unqualified_name+0x228>
 800dcac:	2703      	movs	r7, #3
 800dcae:	e7e1      	b.n	800dc74 <d_unqualified_name+0x228>
 800dcb0:	68e3      	ldr	r3, [r4, #12]
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	e6f7      	b.n	800daa8 <d_unqualified_name+0x5c>
 800dcb8:	08013ac4 	.word	0x08013ac4

0800dcbc <d_bare_function_type>:
 800dcbc:	b570      	push	{r4, r5, r6, lr}
 800dcbe:	68c3      	ldr	r3, [r0, #12]
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	781a      	ldrb	r2, [r3, #0]
 800dcc4:	2a4a      	cmp	r2, #74	; 0x4a
 800dcc6:	d00d      	beq.n	800dce4 <d_bare_function_type+0x28>
 800dcc8:	b971      	cbnz	r1, 800dce8 <d_bare_function_type+0x2c>
 800dcca:	460d      	mov	r5, r1
 800dccc:	4620      	mov	r0, r4
 800dcce:	f7ff fe7b 	bl	800d9c8 <d_parmlist>
 800dcd2:	b178      	cbz	r0, 800dcf4 <d_bare_function_type+0x38>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	462a      	mov	r2, r5
 800dcd8:	4620      	mov	r0, r4
 800dcda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcde:	2129      	movs	r1, #41	; 0x29
 800dce0:	f7f8 be52 	b.w	8006988 <d_make_comp>
 800dce4:	3301      	adds	r3, #1
 800dce6:	60c3      	str	r3, [r0, #12]
 800dce8:	4620      	mov	r0, r4
 800dcea:	f7ff fa33 	bl	800d154 <d_type>
 800dcee:	4605      	mov	r5, r0
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d1eb      	bne.n	800dccc <d_bare_function_type+0x10>
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	bd70      	pop	{r4, r5, r6, pc}

0800dcf8 <d_function_type>:
 800dcf8:	68c3      	ldr	r3, [r0, #12]
 800dcfa:	781a      	ldrb	r2, [r3, #0]
 800dcfc:	2a46      	cmp	r2, #70	; 0x46
 800dcfe:	d001      	beq.n	800dd04 <d_function_type+0xc>
 800dd00:	2000      	movs	r0, #0
 800dd02:	4770      	bx	lr
 800dd04:	b510      	push	{r4, lr}
 800dd06:	1c5a      	adds	r2, r3, #1
 800dd08:	60c2      	str	r2, [r0, #12]
 800dd0a:	785a      	ldrb	r2, [r3, #1]
 800dd0c:	2101      	movs	r1, #1
 800dd0e:	2a59      	cmp	r2, #89	; 0x59
 800dd10:	bf04      	itt	eq
 800dd12:	3302      	addeq	r3, #2
 800dd14:	60c3      	streq	r3, [r0, #12]
 800dd16:	4604      	mov	r4, r0
 800dd18:	f7ff ffd0 	bl	800dcbc <d_bare_function_type>
 800dd1c:	4601      	mov	r1, r0
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f7f8 feda 	bl	8006ad8 <d_ref_qualifier>
 800dd24:	68e3      	ldr	r3, [r4, #12]
 800dd26:	781a      	ldrb	r2, [r3, #0]
 800dd28:	2a45      	cmp	r2, #69	; 0x45
 800dd2a:	d001      	beq.n	800dd30 <d_function_type+0x38>
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	bd10      	pop	{r4, pc}
 800dd30:	3301      	adds	r3, #1
 800dd32:	60e3      	str	r3, [r4, #12]
 800dd34:	bd10      	pop	{r4, pc}
 800dd36:	bf00      	nop

0800dd38 <d_name>:
 800dd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd3c:	68c2      	ldr	r2, [r0, #12]
 800dd3e:	b083      	sub	sp, #12
 800dd40:	7813      	ldrb	r3, [r2, #0]
 800dd42:	4605      	mov	r5, r0
 800dd44:	3b4e      	subs	r3, #78	; 0x4e
 800dd46:	2b0c      	cmp	r3, #12
 800dd48:	d869      	bhi.n	800de1e <d_name+0xe6>
 800dd4a:	e8df f003 	tbb	[pc, r3]
 800dd4e:	681b      	.short	0x681b
 800dd50:	59686868 	.word	0x59686868
 800dd54:	68681668 	.word	0x68681668
 800dd58:	6868      	.short	0x6868
 800dd5a:	07          	.byte	0x07
 800dd5b:	00          	.byte	0x00
 800dd5c:	3201      	adds	r2, #1
 800dd5e:	2100      	movs	r1, #0
 800dd60:	60c2      	str	r2, [r0, #12]
 800dd62:	f000 f9af 	bl	800e0c4 <d_encoding>
 800dd66:	68eb      	ldr	r3, [r5, #12]
 800dd68:	4606      	mov	r6, r0
 800dd6a:	7819      	ldrb	r1, [r3, #0]
 800dd6c:	2945      	cmp	r1, #69	; 0x45
 800dd6e:	f000 809c 	beq.w	800deaa <d_name+0x172>
 800dd72:	2000      	movs	r0, #0
 800dd74:	b003      	add	sp, #12
 800dd76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd7a:	f7ff fe67 	bl	800da4c <d_unqualified_name>
 800dd7e:	b003      	add	sp, #12
 800dd80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd84:	3201      	adds	r2, #1
 800dd86:	60c2      	str	r2, [r0, #12]
 800dd88:	a901      	add	r1, sp, #4
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	f7f8 fe48 	bl	8006a20 <d_cv_qualifiers>
 800dd90:	4681      	mov	r9, r0
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d0ed      	beq.n	800dd72 <d_name+0x3a>
 800dd96:	2100      	movs	r1, #0
 800dd98:	4628      	mov	r0, r5
 800dd9a:	f7f8 fe9d 	bl	8006ad8 <d_ref_qualifier>
 800dd9e:	4680      	mov	r8, r0
 800dda0:	68ea      	ldr	r2, [r5, #12]
 800dda2:	4eba      	ldr	r6, [pc, #744]	; (800e08c <d_name+0x354>)
 800dda4:	7814      	ldrb	r4, [r2, #0]
 800dda6:	2700      	movs	r7, #0
 800dda8:	2c00      	cmp	r4, #0
 800ddaa:	f000 80f1 	beq.w	800df90 <d_name+0x258>
 800ddae:	2c44      	cmp	r4, #68	; 0x44
 800ddb0:	f000 80d8 	beq.w	800df64 <d_name+0x22c>
 800ddb4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	2b1c      	cmp	r3, #28
 800ddbc:	f240 80ae 	bls.w	800df1c <d_name+0x1e4>
 800ddc0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b19      	cmp	r3, #25
 800ddc8:	f240 80ad 	bls.w	800df26 <d_name+0x1ee>
 800ddcc:	2c55      	cmp	r4, #85	; 0x55
 800ddce:	f000 80e5 	beq.w	800df9c <d_name+0x264>
 800ddd2:	2c53      	cmp	r4, #83	; 0x53
 800ddd4:	f000 80f0 	beq.w	800dfb8 <d_name+0x280>
 800ddd8:	2c49      	cmp	r4, #73	; 0x49
 800ddda:	f000 80e6 	beq.w	800dfaa <d_name+0x272>
 800ddde:	2c54      	cmp	r4, #84	; 0x54
 800dde0:	f000 8122 	beq.w	800e028 <d_name+0x2f0>
 800dde4:	2c45      	cmp	r4, #69	; 0x45
 800dde6:	f000 8157 	beq.w	800e098 <d_name+0x360>
 800ddea:	2c4d      	cmp	r4, #77	; 0x4d
 800ddec:	f040 80d0 	bne.w	800df90 <d_name+0x258>
 800ddf0:	2f00      	cmp	r7, #0
 800ddf2:	f000 80cd 	beq.w	800df90 <d_name+0x258>
 800ddf6:	1c53      	adds	r3, r2, #1
 800ddf8:	60eb      	str	r3, [r5, #12]
 800ddfa:	7854      	ldrb	r4, [r2, #1]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	e7d3      	b.n	800dda8 <d_name+0x70>
 800de00:	7853      	ldrb	r3, [r2, #1]
 800de02:	2b74      	cmp	r3, #116	; 0x74
 800de04:	d029      	beq.n	800de5a <d_name+0x122>
 800de06:	2100      	movs	r1, #0
 800de08:	f7f8 fffa 	bl	8006e00 <d_substitution>
 800de0c:	68eb      	ldr	r3, [r5, #12]
 800de0e:	4604      	mov	r4, r0
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b49      	cmp	r3, #73	; 0x49
 800de14:	d047      	beq.n	800dea6 <d_name+0x16e>
 800de16:	4620      	mov	r0, r4
 800de18:	b003      	add	sp, #12
 800de1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de1e:	f7ff fe15 	bl	800da4c <d_unqualified_name>
 800de22:	68eb      	ldr	r3, [r5, #12]
 800de24:	4604      	mov	r4, r0
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b49      	cmp	r3, #73	; 0x49
 800de2a:	d1f4      	bne.n	800de16 <d_name+0xde>
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d0a0      	beq.n	800dd72 <d_name+0x3a>
 800de30:	6a2b      	ldr	r3, [r5, #32]
 800de32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800de34:	4293      	cmp	r3, r2
 800de36:	da9c      	bge.n	800dd72 <d_name+0x3a>
 800de38:	69e9      	ldr	r1, [r5, #28]
 800de3a:	1c5a      	adds	r2, r3, #1
 800de3c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800de40:	4628      	mov	r0, r5
 800de42:	622a      	str	r2, [r5, #32]
 800de44:	f7fc fca0 	bl	800a788 <d_template_args>
 800de48:	4622      	mov	r2, r4
 800de4a:	4603      	mov	r3, r0
 800de4c:	2104      	movs	r1, #4
 800de4e:	4628      	mov	r0, r5
 800de50:	f7f8 fd9a 	bl	8006988 <d_make_comp>
 800de54:	b003      	add	sp, #12
 800de56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de5a:	6943      	ldr	r3, [r0, #20]
 800de5c:	6981      	ldr	r1, [r0, #24]
 800de5e:	3202      	adds	r2, #2
 800de60:	428b      	cmp	r3, r1
 800de62:	60c2      	str	r2, [r0, #12]
 800de64:	f2c0 80b2 	blt.w	800dfcc <d_name+0x294>
 800de68:	2400      	movs	r4, #0
 800de6a:	4628      	mov	r0, r5
 800de6c:	f7ff fdee 	bl	800da4c <d_unqualified_name>
 800de70:	4622      	mov	r2, r4
 800de72:	4603      	mov	r3, r0
 800de74:	2101      	movs	r1, #1
 800de76:	4628      	mov	r0, r5
 800de78:	f7f8 fd86 	bl	8006988 <d_make_comp>
 800de7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800de7e:	68ea      	ldr	r2, [r5, #12]
 800de80:	3303      	adds	r3, #3
 800de82:	632b      	str	r3, [r5, #48]	; 0x30
 800de84:	7813      	ldrb	r3, [r2, #0]
 800de86:	4604      	mov	r4, r0
 800de88:	2b49      	cmp	r3, #73	; 0x49
 800de8a:	d1c4      	bne.n	800de16 <d_name+0xde>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	f43f af70 	beq.w	800dd72 <d_name+0x3a>
 800de92:	6a2b      	ldr	r3, [r5, #32]
 800de94:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800de96:	4293      	cmp	r3, r2
 800de98:	f6bf af6b 	bge.w	800dd72 <d_name+0x3a>
 800de9c:	69e9      	ldr	r1, [r5, #28]
 800de9e:	1c5a      	adds	r2, r3, #1
 800dea0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800dea4:	622a      	str	r2, [r5, #32]
 800dea6:	4628      	mov	r0, r5
 800dea8:	e7cc      	b.n	800de44 <d_name+0x10c>
 800deaa:	1c5a      	adds	r2, r3, #1
 800deac:	60ea      	str	r2, [r5, #12]
 800deae:	7859      	ldrb	r1, [r3, #1]
 800deb0:	2973      	cmp	r1, #115	; 0x73
 800deb2:	f000 80a0 	beq.w	800dff6 <d_name+0x2be>
 800deb6:	2964      	cmp	r1, #100	; 0x64
 800deb8:	f000 80bd 	beq.w	800e036 <d_name+0x2fe>
 800debc:	4628      	mov	r0, r5
 800debe:	f7ff ff3b 	bl	800dd38 <d_name>
 800dec2:	4604      	mov	r4, r0
 800dec4:	2800      	cmp	r0, #0
 800dec6:	f000 8092 	beq.w	800dfee <d_name+0x2b6>
 800deca:	7803      	ldrb	r3, [r0, #0]
 800decc:	2b44      	cmp	r3, #68	; 0x44
 800dece:	f000 808e 	beq.w	800dfee <d_name+0x2b6>
 800ded2:	2b46      	cmp	r3, #70	; 0x46
 800ded4:	f000 808b 	beq.w	800dfee <d_name+0x2b6>
 800ded8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dedc:	68eb      	ldr	r3, [r5, #12]
 800dede:	781a      	ldrb	r2, [r3, #0]
 800dee0:	2a5f      	cmp	r2, #95	; 0x5f
 800dee2:	f000 80bf 	beq.w	800e064 <d_name+0x32c>
 800dee6:	1c7b      	adds	r3, r7, #1
 800dee8:	f000 8081 	beq.w	800dfee <d_name+0x2b6>
 800deec:	696b      	ldr	r3, [r5, #20]
 800deee:	69aa      	ldr	r2, [r5, #24]
 800def0:	4293      	cmp	r3, r2
 800def2:	da7e      	bge.n	800dff2 <d_name+0x2ba>
 800def4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800def8:	6929      	ldr	r1, [r5, #16]
 800defa:	3301      	adds	r3, #1
 800defc:	0092      	lsls	r2, r2, #2
 800defe:	616b      	str	r3, [r5, #20]
 800df00:	188b      	adds	r3, r1, r2
 800df02:	d003      	beq.n	800df0c <d_name+0x1d4>
 800df04:	2045      	movs	r0, #69	; 0x45
 800df06:	5488      	strb	r0, [r1, r2]
 800df08:	609f      	str	r7, [r3, #8]
 800df0a:	605c      	str	r4, [r3, #4]
 800df0c:	4632      	mov	r2, r6
 800df0e:	4628      	mov	r0, r5
 800df10:	2102      	movs	r1, #2
 800df12:	f7f8 fd39 	bl	8006988 <d_make_comp>
 800df16:	b003      	add	sp, #12
 800df18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df1c:	fa26 f303 	lsr.w	r3, r6, r3
 800df20:	07d9      	lsls	r1, r3, #31
 800df22:	f57f af4d 	bpl.w	800ddc0 <d_name+0x88>
 800df26:	4628      	mov	r0, r5
 800df28:	f7ff fd90 	bl	800da4c <d_unqualified_name>
 800df2c:	b377      	cbz	r7, 800df8c <d_name+0x254>
 800df2e:	2101      	movs	r1, #1
 800df30:	4603      	mov	r3, r0
 800df32:	463a      	mov	r2, r7
 800df34:	4628      	mov	r0, r5
 800df36:	f7f8 fd27 	bl	8006988 <d_make_comp>
 800df3a:	4607      	mov	r7, r0
 800df3c:	2c53      	cmp	r4, #83	; 0x53
 800df3e:	d01d      	beq.n	800df7c <d_name+0x244>
 800df40:	68ea      	ldr	r2, [r5, #12]
 800df42:	7814      	ldrb	r4, [r2, #0]
 800df44:	2c45      	cmp	r4, #69	; 0x45
 800df46:	f43f af35 	beq.w	800ddb4 <d_name+0x7c>
 800df4a:	b30f      	cbz	r7, 800df90 <d_name+0x258>
 800df4c:	6a2b      	ldr	r3, [r5, #32]
 800df4e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800df50:	4293      	cmp	r3, r2
 800df52:	da1d      	bge.n	800df90 <d_name+0x258>
 800df54:	69ea      	ldr	r2, [r5, #28]
 800df56:	1c59      	adds	r1, r3, #1
 800df58:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
 800df5c:	68ea      	ldr	r2, [r5, #12]
 800df5e:	6229      	str	r1, [r5, #32]
 800df60:	7814      	ldrb	r4, [r2, #0]
 800df62:	e721      	b.n	800dda8 <d_name+0x70>
 800df64:	7853      	ldrb	r3, [r2, #1]
 800df66:	4628      	mov	r0, r5
 800df68:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df6c:	2b54      	cmp	r3, #84	; 0x54
 800df6e:	d008      	beq.n	800df82 <d_name+0x24a>
 800df70:	f7ff fd6c 	bl	800da4c <d_unqualified_name>
 800df74:	2f00      	cmp	r7, #0
 800df76:	d1da      	bne.n	800df2e <d_name+0x1f6>
 800df78:	4607      	mov	r7, r0
 800df7a:	e7e1      	b.n	800df40 <d_name+0x208>
 800df7c:	68ea      	ldr	r2, [r5, #12]
 800df7e:	7814      	ldrb	r4, [r2, #0]
 800df80:	e712      	b.n	800dda8 <d_name+0x70>
 800df82:	f7ff f8e7 	bl	800d154 <d_type>
 800df86:	2f00      	cmp	r7, #0
 800df88:	d1d1      	bne.n	800df2e <d_name+0x1f6>
 800df8a:	e7f5      	b.n	800df78 <d_name+0x240>
 800df8c:	4607      	mov	r7, r0
 800df8e:	e7d5      	b.n	800df3c <d_name+0x204>
 800df90:	2000      	movs	r0, #0
 800df92:	f8c9 0000 	str.w	r0, [r9]
 800df96:	b003      	add	sp, #12
 800df98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df9c:	4628      	mov	r0, r5
 800df9e:	f7ff fd55 	bl	800da4c <d_unqualified_name>
 800dfa2:	2f00      	cmp	r7, #0
 800dfa4:	d1c3      	bne.n	800df2e <d_name+0x1f6>
 800dfa6:	4607      	mov	r7, r0
 800dfa8:	e7ca      	b.n	800df40 <d_name+0x208>
 800dfaa:	2f00      	cmp	r7, #0
 800dfac:	d0f0      	beq.n	800df90 <d_name+0x258>
 800dfae:	4628      	mov	r0, r5
 800dfb0:	f7fc fbea 	bl	800a788 <d_template_args>
 800dfb4:	2104      	movs	r1, #4
 800dfb6:	e7bb      	b.n	800df30 <d_name+0x1f8>
 800dfb8:	2101      	movs	r1, #1
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f7f8 ff20 	bl	8006e00 <d_substitution>
 800dfc0:	2f00      	cmp	r7, #0
 800dfc2:	d1b4      	bne.n	800df2e <d_name+0x1f6>
 800dfc4:	68ea      	ldr	r2, [r5, #12]
 800dfc6:	4607      	mov	r7, r0
 800dfc8:	7814      	ldrb	r4, [r2, #0]
 800dfca:	e6ed      	b.n	800dda8 <d_name+0x70>
 800dfcc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800dfd0:	6902      	ldr	r2, [r0, #16]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	0089      	lsls	r1, r1, #2
 800dfd6:	6143      	str	r3, [r0, #20]
 800dfd8:	1853      	adds	r3, r2, r1
 800dfda:	f43f af45 	beq.w	800de68 <d_name+0x130>
 800dfde:	4e2c      	ldr	r6, [pc, #176]	; (800e090 <d_name+0x358>)
 800dfe0:	2700      	movs	r7, #0
 800dfe2:	2003      	movs	r0, #3
 800dfe4:	5457      	strb	r7, [r2, r1]
 800dfe6:	461c      	mov	r4, r3
 800dfe8:	605e      	str	r6, [r3, #4]
 800dfea:	6098      	str	r0, [r3, #8]
 800dfec:	e73d      	b.n	800de6a <d_name+0x132>
 800dfee:	4623      	mov	r3, r4
 800dff0:	e78c      	b.n	800df0c <d_name+0x1d4>
 800dff2:	2300      	movs	r3, #0
 800dff4:	e78a      	b.n	800df0c <d_name+0x1d4>
 800dff6:	1c9a      	adds	r2, r3, #2
 800dff8:	60ea      	str	r2, [r5, #12]
 800dffa:	789a      	ldrb	r2, [r3, #2]
 800dffc:	2a5f      	cmp	r2, #95	; 0x5f
 800dffe:	d03b      	beq.n	800e078 <d_name+0x340>
 800e000:	696b      	ldr	r3, [r5, #20]
 800e002:	69aa      	ldr	r2, [r5, #24]
 800e004:	4293      	cmp	r3, r2
 800e006:	daf4      	bge.n	800dff2 <d_name+0x2ba>
 800e008:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e00c:	6928      	ldr	r0, [r5, #16]
 800e00e:	0089      	lsls	r1, r1, #2
 800e010:	3301      	adds	r3, #1
 800e012:	1842      	adds	r2, r0, r1
 800e014:	616b      	str	r3, [r5, #20]
 800e016:	d0ec      	beq.n	800dff2 <d_name+0x2ba>
 800e018:	4c1e      	ldr	r4, [pc, #120]	; (800e094 <d_name+0x35c>)
 800e01a:	2700      	movs	r7, #0
 800e01c:	5447      	strb	r7, [r0, r1]
 800e01e:	210e      	movs	r1, #14
 800e020:	4613      	mov	r3, r2
 800e022:	6054      	str	r4, [r2, #4]
 800e024:	6091      	str	r1, [r2, #8]
 800e026:	e771      	b.n	800df0c <d_name+0x1d4>
 800e028:	4628      	mov	r0, r5
 800e02a:	f7f8 fe4f 	bl	8006ccc <d_template_param>
 800e02e:	2f00      	cmp	r7, #0
 800e030:	f47f af7d 	bne.w	800df2e <d_name+0x1f6>
 800e034:	e7a0      	b.n	800df78 <d_name+0x240>
 800e036:	3302      	adds	r3, #2
 800e038:	60eb      	str	r3, [r5, #12]
 800e03a:	4628      	mov	r0, r5
 800e03c:	f7f8 fe2e 	bl	8006c9c <d_compact_number>
 800e040:	1e07      	subs	r7, r0, #0
 800e042:	f6ff ae96 	blt.w	800dd72 <d_name+0x3a>
 800e046:	4628      	mov	r0, r5
 800e048:	f7ff fe76 	bl	800dd38 <d_name>
 800e04c:	4604      	mov	r4, r0
 800e04e:	2800      	cmp	r0, #0
 800e050:	f43f af4c 	beq.w	800deec <d_name+0x1b4>
 800e054:	7803      	ldrb	r3, [r0, #0]
 800e056:	2b44      	cmp	r3, #68	; 0x44
 800e058:	f43f af48 	beq.w	800deec <d_name+0x1b4>
 800e05c:	2b46      	cmp	r3, #70	; 0x46
 800e05e:	f43f af45 	beq.w	800deec <d_name+0x1b4>
 800e062:	e73b      	b.n	800dedc <d_name+0x1a4>
 800e064:	4628      	mov	r0, r5
 800e066:	3301      	adds	r3, #1
 800e068:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e06c:	f7f8 fdd2 	bl	8006c14 <d_number.isra.0>
 800e070:	2800      	cmp	r0, #0
 800e072:	f6bf af38 	bge.w	800dee6 <d_name+0x1ae>
 800e076:	e67c      	b.n	800dd72 <d_name+0x3a>
 800e078:	4628      	mov	r0, r5
 800e07a:	3303      	adds	r3, #3
 800e07c:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e080:	f7f8 fdc8 	bl	8006c14 <d_number.isra.0>
 800e084:	2800      	cmp	r0, #0
 800e086:	dabb      	bge.n	800e000 <d_name+0x2c8>
 800e088:	e673      	b.n	800dd72 <d_name+0x3a>
 800e08a:	bf00      	nop
 800e08c:	100803ff 	.word	0x100803ff
 800e090:	08013ad8 	.word	0x08013ad8
 800e094:	08013ac8 	.word	0x08013ac8
 800e098:	f8c9 7000 	str.w	r7, [r9]
 800e09c:	2f00      	cmp	r7, #0
 800e09e:	f43f ae68 	beq.w	800dd72 <d_name+0x3a>
 800e0a2:	f1b8 0f00 	cmp.w	r8, #0
 800e0a6:	d004      	beq.n	800e0b2 <d_name+0x37a>
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	f8cd 8004 	str.w	r8, [sp, #4]
 800e0ae:	f8c8 3004 	str.w	r3, [r8, #4]
 800e0b2:	68eb      	ldr	r3, [r5, #12]
 800e0b4:	781a      	ldrb	r2, [r3, #0]
 800e0b6:	2a45      	cmp	r2, #69	; 0x45
 800e0b8:	f47f ae5b 	bne.w	800dd72 <d_name+0x3a>
 800e0bc:	3301      	adds	r3, #1
 800e0be:	60eb      	str	r3, [r5, #12]
 800e0c0:	9801      	ldr	r0, [sp, #4]
 800e0c2:	e65c      	b.n	800dd7e <d_name+0x46>

0800e0c4 <d_encoding>:
 800e0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c8:	68c3      	ldr	r3, [r0, #12]
 800e0ca:	4605      	mov	r5, r0
 800e0cc:	781a      	ldrb	r2, [r3, #0]
 800e0ce:	2a47      	cmp	r2, #71	; 0x47
 800e0d0:	d029      	beq.n	800e126 <d_encoding+0x62>
 800e0d2:	2a54      	cmp	r2, #84	; 0x54
 800e0d4:	d027      	beq.n	800e126 <d_encoding+0x62>
 800e0d6:	460e      	mov	r6, r1
 800e0d8:	f7ff fe2e 	bl	800dd38 <d_name>
 800e0dc:	4604      	mov	r4, r0
 800e0de:	b360      	cbz	r0, 800e13a <d_encoding+0x76>
 800e0e0:	b116      	cbz	r6, 800e0e8 <d_encoding+0x24>
 800e0e2:	68ab      	ldr	r3, [r5, #8]
 800e0e4:	07db      	lsls	r3, r3, #31
 800e0e6:	d52c      	bpl.n	800e142 <d_encoding+0x7e>
 800e0e8:	68eb      	ldr	r3, [r5, #12]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	b38b      	cbz	r3, 800e152 <d_encoding+0x8e>
 800e0ee:	2b45      	cmp	r3, #69	; 0x45
 800e0f0:	d02f      	beq.n	800e152 <d_encoding+0x8e>
 800e0f2:	4621      	mov	r1, r4
 800e0f4:	780b      	ldrb	r3, [r1, #0]
 800e0f6:	2b04      	cmp	r3, #4
 800e0f8:	f1a3 021c 	sub.w	r2, r3, #28
 800e0fc:	f000 8118 	beq.w	800e330 <d_encoding+0x26c>
 800e100:	f0c0 8114 	bcc.w	800e32c <d_encoding+0x268>
 800e104:	2a04      	cmp	r2, #4
 800e106:	f200 8111 	bhi.w	800e32c <d_encoding+0x268>
 800e10a:	6849      	ldr	r1, [r1, #4]
 800e10c:	2900      	cmp	r1, #0
 800e10e:	d1f1      	bne.n	800e0f4 <d_encoding+0x30>
 800e110:	4628      	mov	r0, r5
 800e112:	f7ff fdd3 	bl	800dcbc <d_bare_function_type>
 800e116:	4622      	mov	r2, r4
 800e118:	4603      	mov	r3, r0
 800e11a:	2103      	movs	r1, #3
 800e11c:	4628      	mov	r0, r5
 800e11e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e122:	f7f8 bc31 	b.w	8006988 <d_make_comp>
 800e126:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800e128:	f101 0214 	add.w	r2, r1, #20
 800e12c:	632a      	str	r2, [r5, #48]	; 0x30
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	2a54      	cmp	r2, #84	; 0x54
 800e132:	d011      	beq.n	800e158 <d_encoding+0x94>
 800e134:	2a47      	cmp	r2, #71	; 0x47
 800e136:	f000 8085 	beq.w	800e244 <d_encoding+0x180>
 800e13a:	2000      	movs	r0, #0
 800e13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e140:	6864      	ldr	r4, [r4, #4]
 800e142:	7823      	ldrb	r3, [r4, #0]
 800e144:	f1a3 021c 	sub.w	r2, r3, #28
 800e148:	2a04      	cmp	r2, #4
 800e14a:	d9f9      	bls.n	800e140 <d_encoding+0x7c>
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	f000 815f 	beq.w	800e410 <d_encoding+0x34c>
 800e152:	4620      	mov	r0, r4
 800e154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e158:	1c5a      	adds	r2, r3, #1
 800e15a:	60ea      	str	r2, [r5, #12]
 800e15c:	785a      	ldrb	r2, [r3, #1]
 800e15e:	2a00      	cmp	r2, #0
 800e160:	d0eb      	beq.n	800e13a <d_encoding+0x76>
 800e162:	1c9a      	adds	r2, r3, #2
 800e164:	60ea      	str	r2, [r5, #12]
 800e166:	785b      	ldrb	r3, [r3, #1]
 800e168:	3b43      	subs	r3, #67	; 0x43
 800e16a:	2b33      	cmp	r3, #51	; 0x33
 800e16c:	d8e5      	bhi.n	800e13a <d_encoding+0x76>
 800e16e:	a201      	add	r2, pc, #4	; (adr r2, 800e174 <d_encoding+0xb0>)
 800e170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e174:	0800e691 	.word	0x0800e691
 800e178:	0800e13b 	.word	0x0800e13b
 800e17c:	0800e13b 	.word	0x0800e13b
 800e180:	0800e67b 	.word	0x0800e67b
 800e184:	0800e13b 	.word	0x0800e13b
 800e188:	0800e665 	.word	0x0800e665
 800e18c:	0800e64f 	.word	0x0800e64f
 800e190:	0800e639 	.word	0x0800e639
 800e194:	0800e13b 	.word	0x0800e13b
 800e198:	0800e13b 	.word	0x0800e13b
 800e19c:	0800e13b 	.word	0x0800e13b
 800e1a0:	0800e13b 	.word	0x0800e13b
 800e1a4:	0800e13b 	.word	0x0800e13b
 800e1a8:	0800e13b 	.word	0x0800e13b
 800e1ac:	0800e13b 	.word	0x0800e13b
 800e1b0:	0800e13b 	.word	0x0800e13b
 800e1b4:	0800e623 	.word	0x0800e623
 800e1b8:	0800e609 	.word	0x0800e609
 800e1bc:	0800e13b 	.word	0x0800e13b
 800e1c0:	0800e5ef 	.word	0x0800e5ef
 800e1c4:	0800e5b3 	.word	0x0800e5b3
 800e1c8:	0800e13b 	.word	0x0800e13b
 800e1cc:	0800e13b 	.word	0x0800e13b
 800e1d0:	0800e13b 	.word	0x0800e13b
 800e1d4:	0800e13b 	.word	0x0800e13b
 800e1d8:	0800e13b 	.word	0x0800e13b
 800e1dc:	0800e13b 	.word	0x0800e13b
 800e1e0:	0800e13b 	.word	0x0800e13b
 800e1e4:	0800e13b 	.word	0x0800e13b
 800e1e8:	0800e13b 	.word	0x0800e13b
 800e1ec:	0800e13b 	.word	0x0800e13b
 800e1f0:	0800e13b 	.word	0x0800e13b
 800e1f4:	0800e57f 	.word	0x0800e57f
 800e1f8:	0800e13b 	.word	0x0800e13b
 800e1fc:	0800e13b 	.word	0x0800e13b
 800e200:	0800e13b 	.word	0x0800e13b
 800e204:	0800e13b 	.word	0x0800e13b
 800e208:	0800e5c9 	.word	0x0800e5c9
 800e20c:	0800e13b 	.word	0x0800e13b
 800e210:	0800e13b 	.word	0x0800e13b
 800e214:	0800e13b 	.word	0x0800e13b
 800e218:	0800e13b 	.word	0x0800e13b
 800e21c:	0800e13b 	.word	0x0800e13b
 800e220:	0800e13b 	.word	0x0800e13b
 800e224:	0800e13b 	.word	0x0800e13b
 800e228:	0800e13b 	.word	0x0800e13b
 800e22c:	0800e13b 	.word	0x0800e13b
 800e230:	0800e13b 	.word	0x0800e13b
 800e234:	0800e13b 	.word	0x0800e13b
 800e238:	0800e13b 	.word	0x0800e13b
 800e23c:	0800e13b 	.word	0x0800e13b
 800e240:	0800e559 	.word	0x0800e559
 800e244:	1c5a      	adds	r2, r3, #1
 800e246:	60ea      	str	r2, [r5, #12]
 800e248:	785a      	ldrb	r2, [r3, #1]
 800e24a:	2a00      	cmp	r2, #0
 800e24c:	f43f af75 	beq.w	800e13a <d_encoding+0x76>
 800e250:	1c9a      	adds	r2, r3, #2
 800e252:	60ea      	str	r2, [r5, #12]
 800e254:	785a      	ldrb	r2, [r3, #1]
 800e256:	3a41      	subs	r2, #65	; 0x41
 800e258:	2a31      	cmp	r2, #49	; 0x31
 800e25a:	f63f af6e 	bhi.w	800e13a <d_encoding+0x76>
 800e25e:	a101      	add	r1, pc, #4	; (adr r1, 800e264 <d_encoding+0x1a0>)
 800e260:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e264:	0800e515 	.word	0x0800e515
 800e268:	0800e13b 	.word	0x0800e13b
 800e26c:	0800e13b 	.word	0x0800e13b
 800e270:	0800e13b 	.word	0x0800e13b
 800e274:	0800e13b 	.word	0x0800e13b
 800e278:	0800e13b 	.word	0x0800e13b
 800e27c:	0800e13b 	.word	0x0800e13b
 800e280:	0800e13b 	.word	0x0800e13b
 800e284:	0800e13b 	.word	0x0800e13b
 800e288:	0800e13b 	.word	0x0800e13b
 800e28c:	0800e13b 	.word	0x0800e13b
 800e290:	0800e13b 	.word	0x0800e13b
 800e294:	0800e13b 	.word	0x0800e13b
 800e298:	0800e13b 	.word	0x0800e13b
 800e29c:	0800e13b 	.word	0x0800e13b
 800e2a0:	0800e13b 	.word	0x0800e13b
 800e2a4:	0800e13b 	.word	0x0800e13b
 800e2a8:	0800e4f7 	.word	0x0800e4f7
 800e2ac:	0800e13b 	.word	0x0800e13b
 800e2b0:	0800e52d 	.word	0x0800e52d
 800e2b4:	0800e13b 	.word	0x0800e13b
 800e2b8:	0800e4e1 	.word	0x0800e4e1
 800e2bc:	0800e13b 	.word	0x0800e13b
 800e2c0:	0800e13b 	.word	0x0800e13b
 800e2c4:	0800e13b 	.word	0x0800e13b
 800e2c8:	0800e13b 	.word	0x0800e13b
 800e2cc:	0800e13b 	.word	0x0800e13b
 800e2d0:	0800e13b 	.word	0x0800e13b
 800e2d4:	0800e13b 	.word	0x0800e13b
 800e2d8:	0800e13b 	.word	0x0800e13b
 800e2dc:	0800e13b 	.word	0x0800e13b
 800e2e0:	0800e13b 	.word	0x0800e13b
 800e2e4:	0800e13b 	.word	0x0800e13b
 800e2e8:	0800e13b 	.word	0x0800e13b
 800e2ec:	0800e13b 	.word	0x0800e13b
 800e2f0:	0800e13b 	.word	0x0800e13b
 800e2f4:	0800e13b 	.word	0x0800e13b
 800e2f8:	0800e13b 	.word	0x0800e13b
 800e2fc:	0800e13b 	.word	0x0800e13b
 800e300:	0800e13b 	.word	0x0800e13b
 800e304:	0800e13b 	.word	0x0800e13b
 800e308:	0800e13b 	.word	0x0800e13b
 800e30c:	0800e13b 	.word	0x0800e13b
 800e310:	0800e13b 	.word	0x0800e13b
 800e314:	0800e13b 	.word	0x0800e13b
 800e318:	0800e13b 	.word	0x0800e13b
 800e31c:	0800e13b 	.word	0x0800e13b
 800e320:	0800e13b 	.word	0x0800e13b
 800e324:	0800e13b 	.word	0x0800e13b
 800e328:	0800e437 	.word	0x0800e437
 800e32c:	2100      	movs	r1, #0
 800e32e:	e6ef      	b.n	800e110 <d_encoding+0x4c>
 800e330:	684a      	ldr	r2, [r1, #4]
 800e332:	2a00      	cmp	r2, #0
 800e334:	d07d      	beq.n	800e432 <d_encoding+0x36e>
 800e336:	7813      	ldrb	r3, [r2, #0]
 800e338:	3b01      	subs	r3, #1
 800e33a:	2b32      	cmp	r3, #50	; 0x32
 800e33c:	d879      	bhi.n	800e432 <d_encoding+0x36e>
 800e33e:	a101      	add	r1, pc, #4	; (adr r1, 800e344 <d_encoding+0x280>)
 800e340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e344:	0800e42d 	.word	0x0800e42d
 800e348:	0800e42d 	.word	0x0800e42d
 800e34c:	0800e433 	.word	0x0800e433
 800e350:	0800e433 	.word	0x0800e433
 800e354:	0800e433 	.word	0x0800e433
 800e358:	0800e433 	.word	0x0800e433
 800e35c:	0800e32d 	.word	0x0800e32d
 800e360:	0800e32d 	.word	0x0800e32d
 800e364:	0800e433 	.word	0x0800e433
 800e368:	0800e433 	.word	0x0800e433
 800e36c:	0800e433 	.word	0x0800e433
 800e370:	0800e433 	.word	0x0800e433
 800e374:	0800e433 	.word	0x0800e433
 800e378:	0800e433 	.word	0x0800e433
 800e37c:	0800e433 	.word	0x0800e433
 800e380:	0800e433 	.word	0x0800e433
 800e384:	0800e433 	.word	0x0800e433
 800e388:	0800e433 	.word	0x0800e433
 800e38c:	0800e433 	.word	0x0800e433
 800e390:	0800e433 	.word	0x0800e433
 800e394:	0800e433 	.word	0x0800e433
 800e398:	0800e433 	.word	0x0800e433
 800e39c:	0800e433 	.word	0x0800e433
 800e3a0:	0800e433 	.word	0x0800e433
 800e3a4:	0800e433 	.word	0x0800e433
 800e3a8:	0800e433 	.word	0x0800e433
 800e3ac:	0800e433 	.word	0x0800e433
 800e3b0:	0800e433 	.word	0x0800e433
 800e3b4:	0800e433 	.word	0x0800e433
 800e3b8:	0800e433 	.word	0x0800e433
 800e3bc:	0800e433 	.word	0x0800e433
 800e3c0:	0800e433 	.word	0x0800e433
 800e3c4:	0800e433 	.word	0x0800e433
 800e3c8:	0800e433 	.word	0x0800e433
 800e3cc:	0800e433 	.word	0x0800e433
 800e3d0:	0800e433 	.word	0x0800e433
 800e3d4:	0800e433 	.word	0x0800e433
 800e3d8:	0800e433 	.word	0x0800e433
 800e3dc:	0800e433 	.word	0x0800e433
 800e3e0:	0800e433 	.word	0x0800e433
 800e3e4:	0800e433 	.word	0x0800e433
 800e3e8:	0800e433 	.word	0x0800e433
 800e3ec:	0800e433 	.word	0x0800e433
 800e3f0:	0800e433 	.word	0x0800e433
 800e3f4:	0800e433 	.word	0x0800e433
 800e3f8:	0800e433 	.word	0x0800e433
 800e3fc:	0800e433 	.word	0x0800e433
 800e400:	0800e433 	.word	0x0800e433
 800e404:	0800e433 	.word	0x0800e433
 800e408:	0800e433 	.word	0x0800e433
 800e40c:	0800e32d 	.word	0x0800e32d
 800e410:	68a2      	ldr	r2, [r4, #8]
 800e412:	7813      	ldrb	r3, [r2, #0]
 800e414:	3b1c      	subs	r3, #28
 800e416:	2b04      	cmp	r3, #4
 800e418:	d804      	bhi.n	800e424 <d_encoding+0x360>
 800e41a:	6852      	ldr	r2, [r2, #4]
 800e41c:	7813      	ldrb	r3, [r2, #0]
 800e41e:	3b1c      	subs	r3, #28
 800e420:	2b04      	cmp	r3, #4
 800e422:	d9fa      	bls.n	800e41a <d_encoding+0x356>
 800e424:	60a2      	str	r2, [r4, #8]
 800e426:	4620      	mov	r0, r4
 800e428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e42c:	6892      	ldr	r2, [r2, #8]
 800e42e:	2a00      	cmp	r2, #0
 800e430:	d181      	bne.n	800e336 <d_encoding+0x272>
 800e432:	2101      	movs	r1, #1
 800e434:	e66c      	b.n	800e110 <d_encoding+0x4c>
 800e436:	f105 000c 	add.w	r0, r5, #12
 800e43a:	f7f8 fbeb 	bl	8006c14 <d_number.isra.0>
 800e43e:	2801      	cmp	r0, #1
 800e440:	f77f ae7b 	ble.w	800e13a <d_encoding+0x76>
 800e444:	68eb      	ldr	r3, [r5, #12]
 800e446:	781a      	ldrb	r2, [r3, #0]
 800e448:	2a00      	cmp	r2, #0
 800e44a:	f43f ae76 	beq.w	800e13a <d_encoding+0x76>
 800e44e:	1c5f      	adds	r7, r3, #1
 800e450:	60ef      	str	r7, [r5, #12]
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	2b5f      	cmp	r3, #95	; 0x5f
 800e456:	f47f ae70 	bne.w	800e13a <d_encoding+0x76>
 800e45a:	2200      	movs	r2, #0
 800e45c:	4690      	mov	r8, r2
 800e45e:	1e46      	subs	r6, r0, #1
 800e460:	f04f 093f 	mov.w	r9, #63	; 0x3f
 800e464:	783b      	ldrb	r3, [r7, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	f43f ae67 	beq.w	800e13a <d_encoding+0x76>
 800e46c:	2b24      	cmp	r3, #36	; 0x24
 800e46e:	f000 8135 	beq.w	800e6dc <d_encoding+0x618>
 800e472:	463c      	mov	r4, r7
 800e474:	2100      	movs	r1, #0
 800e476:	e004      	b.n	800e482 <d_encoding+0x3be>
 800e478:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e47c:	b123      	cbz	r3, 800e488 <d_encoding+0x3c4>
 800e47e:	2b24      	cmp	r3, #36	; 0x24
 800e480:	d002      	beq.n	800e488 <d_encoding+0x3c4>
 800e482:	3101      	adds	r1, #1
 800e484:	42b1      	cmp	r1, r6
 800e486:	dbf7      	blt.n	800e478 <d_encoding+0x3b4>
 800e488:	696b      	ldr	r3, [r5, #20]
 800e48a:	69a8      	ldr	r0, [r5, #24]
 800e48c:	4283      	cmp	r3, r0
 800e48e:	f280 811f 	bge.w	800e6d0 <d_encoding+0x60c>
 800e492:	6928      	ldr	r0, [r5, #16]
 800e494:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e498:	f103 0e01 	add.w	lr, r3, #1
 800e49c:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 800e4a0:	f8c5 e014 	str.w	lr, [r5, #20]
 800e4a4:	f000 8114 	beq.w	800e6d0 <d_encoding+0x60c>
 800e4a8:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 800e4ac:	605f      	str	r7, [r3, #4]
 800e4ae:	6099      	str	r1, [r3, #8]
 800e4b0:	68ef      	ldr	r7, [r5, #12]
 800e4b2:	1a76      	subs	r6, r6, r1
 800e4b4:	440f      	add	r7, r1
 800e4b6:	60ef      	str	r7, [r5, #12]
 800e4b8:	2a00      	cmp	r2, #0
 800e4ba:	f000 812c 	beq.w	800e716 <d_encoding+0x652>
 800e4be:	213e      	movs	r1, #62	; 0x3e
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	f7f8 fa61 	bl	8006988 <d_make_comp>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	f43f ae36 	beq.w	800e13a <d_encoding+0x76>
 800e4ce:	2e00      	cmp	r6, #0
 800e4d0:	dcc8      	bgt.n	800e464 <d_encoding+0x3a0>
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	2300      	movs	r3, #0
 800e4da:	213d      	movs	r1, #61	; 0x3d
 800e4dc:	f7f8 ba54 	b.w	8006988 <d_make_comp>
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	f7ff fc29 	bl	800dd38 <d_name>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	2113      	movs	r1, #19
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f2:	f7f8 ba49 	b.w	8006988 <d_make_comp>
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	f7ff fc1e 	bl	800dd38 <d_name>
 800e4fc:	4604      	mov	r4, r0
 800e4fe:	4628      	mov	r0, r5
 800e500:	f7f8 fbb0 	bl	8006c64 <d_number_component>
 800e504:	4622      	mov	r2, r4
 800e506:	4603      	mov	r3, r0
 800e508:	2116      	movs	r1, #22
 800e50a:	4628      	mov	r0, r5
 800e50c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e510:	f7f8 ba3a 	b.w	8006988 <d_make_comp>
 800e514:	2100      	movs	r1, #0
 800e516:	4628      	mov	r0, r5
 800e518:	f7ff fdd4 	bl	800e0c4 <d_encoding>
 800e51c:	2300      	movs	r3, #0
 800e51e:	4602      	mov	r2, r0
 800e520:	2117      	movs	r1, #23
 800e522:	4628      	mov	r0, r5
 800e524:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e528:	f7f8 ba2e 	b.w	8006988 <d_make_comp>
 800e52c:	789a      	ldrb	r2, [r3, #2]
 800e52e:	2100      	movs	r1, #0
 800e530:	4628      	mov	r0, r5
 800e532:	2a00      	cmp	r2, #0
 800e534:	f000 80f1 	beq.w	800e71a <d_encoding+0x656>
 800e538:	1cda      	adds	r2, r3, #3
 800e53a:	60ea      	str	r2, [r5, #12]
 800e53c:	789b      	ldrb	r3, [r3, #2]
 800e53e:	2b6e      	cmp	r3, #110	; 0x6e
 800e540:	f040 80eb 	bne.w	800e71a <d_encoding+0x656>
 800e544:	f7ff fdbe 	bl	800e0c4 <d_encoding>
 800e548:	2300      	movs	r3, #0
 800e54a:	4602      	mov	r2, r0
 800e54c:	2148      	movs	r1, #72	; 0x48
 800e54e:	4628      	mov	r0, r5
 800e550:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e554:	f7f8 ba18 	b.w	8006988 <d_make_comp>
 800e558:	2176      	movs	r1, #118	; 0x76
 800e55a:	4628      	mov	r0, r5
 800e55c:	f7f8 fd16 	bl	8006f8c <d_call_offset>
 800e560:	2800      	cmp	r0, #0
 800e562:	f43f adea 	beq.w	800e13a <d_encoding+0x76>
 800e566:	2100      	movs	r1, #0
 800e568:	4628      	mov	r0, r5
 800e56a:	f7ff fdab 	bl	800e0c4 <d_encoding>
 800e56e:	2300      	movs	r3, #0
 800e570:	4602      	mov	r2, r0
 800e572:	2110      	movs	r1, #16
 800e574:	4628      	mov	r0, r5
 800e576:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e57a:	f7f8 ba05 	b.w	8006988 <d_make_comp>
 800e57e:	2100      	movs	r1, #0
 800e580:	4628      	mov	r0, r5
 800e582:	f7f8 fd03 	bl	8006f8c <d_call_offset>
 800e586:	2800      	cmp	r0, #0
 800e588:	f43f add7 	beq.w	800e13a <d_encoding+0x76>
 800e58c:	2100      	movs	r1, #0
 800e58e:	4628      	mov	r0, r5
 800e590:	f7f8 fcfc 	bl	8006f8c <d_call_offset>
 800e594:	2800      	cmp	r0, #0
 800e596:	f43f add0 	beq.w	800e13a <d_encoding+0x76>
 800e59a:	2100      	movs	r1, #0
 800e59c:	4628      	mov	r0, r5
 800e59e:	f7ff fd91 	bl	800e0c4 <d_encoding>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	2111      	movs	r1, #17
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ae:	f7f8 b9eb 	b.w	8006988 <d_make_comp>
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	f7ff fbc0 	bl	800dd38 <d_name>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	2115      	movs	r1, #21
 800e5be:	4628      	mov	r0, r5
 800e5c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c4:	f7f8 b9e0 	b.w	8006988 <d_make_comp>
 800e5c8:	2168      	movs	r1, #104	; 0x68
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f7f8 fcde 	bl	8006f8c <d_call_offset>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	f43f adb2 	beq.w	800e13a <d_encoding+0x76>
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f7ff fd73 	bl	800e0c4 <d_encoding>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	210f      	movs	r1, #15
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5ea:	f7f8 b9cd 	b.w	8006988 <d_make_comp>
 800e5ee:	310f      	adds	r1, #15
 800e5f0:	6329      	str	r1, [r5, #48]	; 0x30
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	f7fe fdae 	bl	800d154 <d_type>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	2109      	movs	r1, #9
 800e5fe:	4628      	mov	r0, r5
 800e600:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e604:	f7f8 b9c0 	b.w	8006988 <d_make_comp>
 800e608:	310a      	adds	r1, #10
 800e60a:	6329      	str	r1, [r5, #48]	; 0x30
 800e60c:	4628      	mov	r0, r5
 800e60e:	f7fe fda1 	bl	800d154 <d_type>
 800e612:	2300      	movs	r3, #0
 800e614:	4602      	mov	r2, r0
 800e616:	210a      	movs	r1, #10
 800e618:	4628      	mov	r0, r5
 800e61a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e61e:	f7f8 b9b3 	b.w	8006988 <d_make_comp>
 800e622:	4628      	mov	r0, r5
 800e624:	f7fe fd96 	bl	800d154 <d_type>
 800e628:	2300      	movs	r3, #0
 800e62a:	4602      	mov	r2, r0
 800e62c:	210d      	movs	r1, #13
 800e62e:	4628      	mov	r0, r5
 800e630:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e634:	f7f8 b9a8 	b.w	8006988 <d_make_comp>
 800e638:	4628      	mov	r0, r5
 800e63a:	f7fe fd8b 	bl	800d154 <d_type>
 800e63e:	2300      	movs	r3, #0
 800e640:	4602      	mov	r2, r0
 800e642:	2112      	movs	r1, #18
 800e644:	4628      	mov	r0, r5
 800e646:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e64a:	f7f8 b99d 	b.w	8006988 <d_make_comp>
 800e64e:	4628      	mov	r0, r5
 800e650:	f7fe fd80 	bl	800d154 <d_type>
 800e654:	2300      	movs	r3, #0
 800e656:	4602      	mov	r2, r0
 800e658:	210c      	movs	r1, #12
 800e65a:	4628      	mov	r0, r5
 800e65c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e660:	f7f8 b992 	b.w	8006988 <d_make_comp>
 800e664:	4628      	mov	r0, r5
 800e666:	f7ff fb67 	bl	800dd38 <d_name>
 800e66a:	2300      	movs	r3, #0
 800e66c:	4602      	mov	r2, r0
 800e66e:	2114      	movs	r1, #20
 800e670:	4628      	mov	r0, r5
 800e672:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e676:	f7f8 b987 	b.w	8006988 <d_make_comp>
 800e67a:	4628      	mov	r0, r5
 800e67c:	f7fe fd6a 	bl	800d154 <d_type>
 800e680:	2300      	movs	r3, #0
 800e682:	4602      	mov	r2, r0
 800e684:	210e      	movs	r1, #14
 800e686:	4628      	mov	r0, r5
 800e688:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e68c:	f7f8 b97c 	b.w	8006988 <d_make_comp>
 800e690:	4628      	mov	r0, r5
 800e692:	f7fe fd5f 	bl	800d154 <d_type>
 800e696:	4604      	mov	r4, r0
 800e698:	f105 000c 	add.w	r0, r5, #12
 800e69c:	f7f8 faba 	bl	8006c14 <d_number.isra.0>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	f6ff ad4a 	blt.w	800e13a <d_encoding+0x76>
 800e6a6:	68eb      	ldr	r3, [r5, #12]
 800e6a8:	781a      	ldrb	r2, [r3, #0]
 800e6aa:	2a5f      	cmp	r2, #95	; 0x5f
 800e6ac:	f47f ad45 	bne.w	800e13a <d_encoding+0x76>
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	60eb      	str	r3, [r5, #12]
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	f7fe fd4d 	bl	800d154 <d_type>
 800e6ba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e6bc:	4602      	mov	r2, r0
 800e6be:	1d59      	adds	r1, r3, #5
 800e6c0:	6329      	str	r1, [r5, #48]	; 0x30
 800e6c2:	4623      	mov	r3, r4
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ca:	210b      	movs	r1, #11
 800e6cc:	f7f8 b95c 	b.w	8006988 <d_make_comp>
 800e6d0:	68eb      	ldr	r3, [r5, #12]
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	4419      	add	r1, r3
 800e6d6:	60e9      	str	r1, [r5, #12]
 800e6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6dc:	787b      	ldrb	r3, [r7, #1]
 800e6de:	2b53      	cmp	r3, #83	; 0x53
 800e6e0:	d027      	beq.n	800e732 <d_encoding+0x66e>
 800e6e2:	2b5f      	cmp	r3, #95	; 0x5f
 800e6e4:	d023      	beq.n	800e72e <d_encoding+0x66a>
 800e6e6:	2b24      	cmp	r3, #36	; 0x24
 800e6e8:	f47f ad27 	bne.w	800e13a <d_encoding+0x76>
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	696b      	ldr	r3, [r5, #20]
 800e6f0:	69a9      	ldr	r1, [r5, #24]
 800e6f2:	428b      	cmp	r3, r1
 800e6f4:	da1f      	bge.n	800e736 <d_encoding+0x672>
 800e6f6:	692c      	ldr	r4, [r5, #16]
 800e6f8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e6fc:	1c5f      	adds	r7, r3, #1
 800e6fe:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 800e702:	616f      	str	r7, [r5, #20]
 800e704:	d017      	beq.n	800e736 <d_encoding+0x672>
 800e706:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 800e70a:	6058      	str	r0, [r3, #4]
 800e70c:	68ef      	ldr	r7, [r5, #12]
 800e70e:	3e02      	subs	r6, #2
 800e710:	3702      	adds	r7, #2
 800e712:	60ef      	str	r7, [r5, #12]
 800e714:	e6d0      	b.n	800e4b8 <d_encoding+0x3f4>
 800e716:	461a      	mov	r2, r3
 800e718:	e6d9      	b.n	800e4ce <d_encoding+0x40a>
 800e71a:	f7ff fcd3 	bl	800e0c4 <d_encoding>
 800e71e:	2300      	movs	r3, #0
 800e720:	4602      	mov	r2, r0
 800e722:	2147      	movs	r1, #71	; 0x47
 800e724:	4628      	mov	r0, r5
 800e726:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e72a:	f7f8 b92d 	b.w	8006988 <d_make_comp>
 800e72e:	202e      	movs	r0, #46	; 0x2e
 800e730:	e7dd      	b.n	800e6ee <d_encoding+0x62a>
 800e732:	202f      	movs	r0, #47	; 0x2f
 800e734:	e7db      	b.n	800e6ee <d_encoding+0x62a>
 800e736:	68eb      	ldr	r3, [r5, #12]
 800e738:	2000      	movs	r0, #0
 800e73a:	3302      	adds	r3, #2
 800e73c:	60eb      	str	r3, [r5, #12]
 800e73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e742:	bf00      	nop

0800e744 <d_expr_primary>:
 800e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e746:	68c2      	ldr	r2, [r0, #12]
 800e748:	7813      	ldrb	r3, [r2, #0]
 800e74a:	2b4c      	cmp	r3, #76	; 0x4c
 800e74c:	d001      	beq.n	800e752 <d_expr_primary+0xe>
 800e74e:	2000      	movs	r0, #0
 800e750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e752:	1c53      	adds	r3, r2, #1
 800e754:	60c3      	str	r3, [r0, #12]
 800e756:	7851      	ldrb	r1, [r2, #1]
 800e758:	4605      	mov	r5, r0
 800e75a:	295f      	cmp	r1, #95	; 0x5f
 800e75c:	d03e      	beq.n	800e7dc <d_expr_primary+0x98>
 800e75e:	295a      	cmp	r1, #90	; 0x5a
 800e760:	d043      	beq.n	800e7ea <d_expr_primary+0xa6>
 800e762:	f7fe fcf7 	bl	800d154 <d_type>
 800e766:	2800      	cmp	r0, #0
 800e768:	d0f1      	beq.n	800e74e <d_expr_primary+0xa>
 800e76a:	7803      	ldrb	r3, [r0, #0]
 800e76c:	2b27      	cmp	r3, #39	; 0x27
 800e76e:	d04a      	beq.n	800e806 <d_expr_primary+0xc2>
 800e770:	68ee      	ldr	r6, [r5, #12]
 800e772:	7833      	ldrb	r3, [r6, #0]
 800e774:	2b6e      	cmp	r3, #110	; 0x6e
 800e776:	d04f      	beq.n	800e818 <d_expr_primary+0xd4>
 800e778:	213b      	movs	r1, #59	; 0x3b
 800e77a:	2b45      	cmp	r3, #69	; 0x45
 800e77c:	d052      	beq.n	800e824 <d_expr_primary+0xe0>
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d0e5      	beq.n	800e74e <d_expr_primary+0xa>
 800e782:	4633      	mov	r3, r6
 800e784:	e001      	b.n	800e78a <d_expr_primary+0x46>
 800e786:	2c00      	cmp	r4, #0
 800e788:	d0e1      	beq.n	800e74e <d_expr_primary+0xa>
 800e78a:	3301      	adds	r3, #1
 800e78c:	60eb      	str	r3, [r5, #12]
 800e78e:	781c      	ldrb	r4, [r3, #0]
 800e790:	2c45      	cmp	r4, #69	; 0x45
 800e792:	d1f8      	bne.n	800e786 <d_expr_primary+0x42>
 800e794:	1b9c      	subs	r4, r3, r6
 800e796:	696b      	ldr	r3, [r5, #20]
 800e798:	69aa      	ldr	r2, [r5, #24]
 800e79a:	4293      	cmp	r3, r2
 800e79c:	da31      	bge.n	800e802 <d_expr_primary+0xbe>
 800e79e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e7a2:	692f      	ldr	r7, [r5, #16]
 800e7a4:	0092      	lsls	r2, r2, #2
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	eb17 0e02 	adds.w	lr, r7, r2
 800e7ac:	616b      	str	r3, [r5, #20]
 800e7ae:	d028      	beq.n	800e802 <d_expr_primary+0xbe>
 800e7b0:	b33e      	cbz	r6, 800e802 <d_expr_primary+0xbe>
 800e7b2:	b334      	cbz	r4, 800e802 <d_expr_primary+0xbe>
 800e7b4:	4673      	mov	r3, lr
 800e7b6:	f04f 0c00 	mov.w	ip, #0
 800e7ba:	f807 c002 	strb.w	ip, [r7, r2]
 800e7be:	f8ce 6004 	str.w	r6, [lr, #4]
 800e7c2:	f8ce 4008 	str.w	r4, [lr, #8]
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	f7f8 f8dd 	bl	8006988 <d_make_comp>
 800e7ce:	68eb      	ldr	r3, [r5, #12]
 800e7d0:	781a      	ldrb	r2, [r3, #0]
 800e7d2:	2a45      	cmp	r2, #69	; 0x45
 800e7d4:	d1bb      	bne.n	800e74e <d_expr_primary+0xa>
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	60eb      	str	r3, [r5, #12]
 800e7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7dc:	1c93      	adds	r3, r2, #2
 800e7de:	60c3      	str	r3, [r0, #12]
 800e7e0:	7892      	ldrb	r2, [r2, #2]
 800e7e2:	2a5a      	cmp	r2, #90	; 0x5a
 800e7e4:	bf18      	it	ne
 800e7e6:	2000      	movne	r0, #0
 800e7e8:	d107      	bne.n	800e7fa <d_expr_primary+0xb6>
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	60eb      	str	r3, [r5, #12]
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	f7ff fc67 	bl	800e0c4 <d_encoding>
 800e7f6:	68eb      	ldr	r3, [r5, #12]
 800e7f8:	781a      	ldrb	r2, [r3, #0]
 800e7fa:	2a45      	cmp	r2, #69	; 0x45
 800e7fc:	d0eb      	beq.n	800e7d6 <d_expr_primary+0x92>
 800e7fe:	2000      	movs	r0, #0
 800e800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e802:	2300      	movs	r3, #0
 800e804:	e7df      	b.n	800e7c6 <d_expr_primary+0x82>
 800e806:	6843      	ldr	r3, [r0, #4]
 800e808:	7c1a      	ldrb	r2, [r3, #16]
 800e80a:	2a00      	cmp	r2, #0
 800e80c:	d0b0      	beq.n	800e770 <d_expr_primary+0x2c>
 800e80e:	685a      	ldr	r2, [r3, #4]
 800e810:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e812:	1a9b      	subs	r3, r3, r2
 800e814:	632b      	str	r3, [r5, #48]	; 0x30
 800e816:	e7ab      	b.n	800e770 <d_expr_primary+0x2c>
 800e818:	1c72      	adds	r2, r6, #1
 800e81a:	60ea      	str	r2, [r5, #12]
 800e81c:	7873      	ldrb	r3, [r6, #1]
 800e81e:	213c      	movs	r1, #60	; 0x3c
 800e820:	4616      	mov	r6, r2
 800e822:	e7aa      	b.n	800e77a <d_expr_primary+0x36>
 800e824:	2400      	movs	r4, #0
 800e826:	e7b6      	b.n	800e796 <d_expr_primary+0x52>

0800e828 <d_demangle_callback.constprop.15>:
 800e828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82c:	b0e5      	sub	sp, #404	; 0x194
 800e82e:	f890 9000 	ldrb.w	r9, [r0]
 800e832:	af00      	add	r7, sp, #0
 800e834:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800e838:	4605      	mov	r5, r0
 800e83a:	460e      	mov	r6, r1
 800e83c:	607a      	str	r2, [r7, #4]
 800e83e:	f000 80ec 	beq.w	800ea1a <d_demangle_callback.constprop.15+0x1f2>
 800e842:	2208      	movs	r2, #8
 800e844:	49c3      	ldr	r1, [pc, #780]	; (800eb54 <d_demangle_callback.constprop.15+0x32c>)
 800e846:	4628      	mov	r0, r5
 800e848:	f002 fe08 	bl	801145c <strncmp>
 800e84c:	b978      	cbnz	r0, 800e86e <d_demangle_callback.constprop.15+0x46>
 800e84e:	7a2b      	ldrb	r3, [r5, #8]
 800e850:	2b2e      	cmp	r3, #46	; 0x2e
 800e852:	d005      	beq.n	800e860 <d_demangle_callback.constprop.15+0x38>
 800e854:	2b5f      	cmp	r3, #95	; 0x5f
 800e856:	d003      	beq.n	800e860 <d_demangle_callback.constprop.15+0x38>
 800e858:	2b24      	cmp	r3, #36	; 0x24
 800e85a:	d001      	beq.n	800e860 <d_demangle_callback.constprop.15+0x38>
 800e85c:	4680      	mov	r8, r0
 800e85e:	e008      	b.n	800e872 <d_demangle_callback.constprop.15+0x4a>
 800e860:	7a6b      	ldrb	r3, [r5, #9]
 800e862:	2b44      	cmp	r3, #68	; 0x44
 800e864:	f000 80e9 	beq.w	800ea3a <d_demangle_callback.constprop.15+0x212>
 800e868:	2b49      	cmp	r3, #73	; 0x49
 800e86a:	f000 80e6 	beq.w	800ea3a <d_demangle_callback.constprop.15+0x212>
 800e86e:	f04f 0800 	mov.w	r8, #0
 800e872:	4628      	mov	r0, r5
 800e874:	f000 f9ea 	bl	800ec4c <strlen>
 800e878:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 800e87c:	0083      	lsls	r3, r0, #2
 800e87e:	eb03 020a 	add.w	r2, r3, sl
 800e882:	0092      	lsls	r2, r2, #2
 800e884:	3208      	adds	r2, #8
 800e886:	ebad 0d02 	sub.w	sp, sp, r2
 800e88a:	46eb      	mov	fp, sp
 800e88c:	330a      	adds	r3, #10
 800e88e:	f023 0307 	bic.w	r3, r3, #7
 800e892:	2400      	movs	r4, #0
 800e894:	ebad 0d03 	sub.w	sp, sp, r3
 800e898:	182a      	adds	r2, r5, r0
 800e89a:	2311      	movs	r3, #17
 800e89c:	f1b8 0f01 	cmp.w	r8, #1
 800e8a0:	f8c7 b020 	str.w	fp, [r7, #32]
 800e8a4:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
 800e8a8:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800e8ac:	613d      	str	r5, [r7, #16]
 800e8ae:	61fd      	str	r5, [r7, #28]
 800e8b0:	6378      	str	r0, [r7, #52]	; 0x34
 800e8b2:	617a      	str	r2, [r7, #20]
 800e8b4:	61bb      	str	r3, [r7, #24]
 800e8b6:	627c      	str	r4, [r7, #36]	; 0x24
 800e8b8:	633c      	str	r4, [r7, #48]	; 0x30
 800e8ba:	63bc      	str	r4, [r7, #56]	; 0x38
 800e8bc:	63fc      	str	r4, [r7, #60]	; 0x3c
 800e8be:	643c      	str	r4, [r7, #64]	; 0x40
 800e8c0:	647c      	str	r4, [r7, #68]	; 0x44
 800e8c2:	64bc      	str	r4, [r7, #72]	; 0x48
 800e8c4:	f000 80b0 	beq.w	800ea28 <d_demangle_callback.constprop.15+0x200>
 800e8c8:	f0c0 80cf 	bcc.w	800ea6a <d_demangle_callback.constprop.15+0x242>
 800e8cc:	f1b8 0f03 	cmp.w	r8, #3
 800e8d0:	f200 80cb 	bhi.w	800ea6a <d_demangle_callback.constprop.15+0x242>
 800e8d4:	7aea      	ldrb	r2, [r5, #11]
 800e8d6:	f1b8 0f02 	cmp.w	r8, #2
 800e8da:	f105 030b 	add.w	r3, r5, #11
 800e8de:	bf14      	ite	ne
 800e8e0:	f04f 0943 	movne.w	r9, #67	; 0x43
 800e8e4:	f04f 0942 	moveq.w	r9, #66	; 0x42
 800e8e8:	2a5f      	cmp	r2, #95	; 0x5f
 800e8ea:	61fb      	str	r3, [r7, #28]
 800e8ec:	f000 80b0 	beq.w	800ea50 <d_demangle_callback.constprop.15+0x228>
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	603b      	str	r3, [r7, #0]
 800e8f4:	f000 f9aa 	bl	800ec4c <strlen>
 800e8f8:	f1ba 0f00 	cmp.w	sl, #0
 800e8fc:	f340 80be 	ble.w	800ea7c <d_demangle_callback.constprop.15+0x254>
 800e900:	2201      	movs	r2, #1
 800e902:	627a      	str	r2, [r7, #36]	; 0x24
 800e904:	f1bb 0f00 	cmp.w	fp, #0
 800e908:	f000 80b8 	beq.w	800ea7c <d_demangle_callback.constprop.15+0x254>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	f000 80b5 	beq.w	800ea7c <d_demangle_callback.constprop.15+0x254>
 800e912:	2200      	movs	r2, #0
 800e914:	f88b 2000 	strb.w	r2, [fp]
 800e918:	465a      	mov	r2, fp
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	f8cb 0008 	str.w	r0, [fp, #8]
 800e920:	f8cb 3004 	str.w	r3, [fp, #4]
 800e924:	4649      	mov	r1, r9
 800e926:	2300      	movs	r3, #0
 800e928:	f107 0010 	add.w	r0, r7, #16
 800e92c:	f7f8 f82c 	bl	8006988 <d_make_comp>
 800e930:	69fc      	ldr	r4, [r7, #28]
 800e932:	4605      	mov	r5, r0
 800e934:	4620      	mov	r0, r4
 800e936:	f000 f989 	bl	800ec4c <strlen>
 800e93a:	1823      	adds	r3, r4, r0
 800e93c:	61fb      	str	r3, [r7, #28]
 800e93e:	f814 9000 	ldrb.w	r9, [r4, r0]
 800e942:	f1b9 0f00 	cmp.w	r9, #0
 800e946:	d172      	bne.n	800ea2e <d_demangle_callback.constprop.15+0x206>
 800e948:	2d00      	cmp	r5, #0
 800e94a:	d070      	beq.n	800ea2e <d_demangle_callback.constprop.15+0x206>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e952:	462a      	mov	r2, r5
 800e954:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800e958:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 800e95c:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 800e960:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 800e964:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800e968:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800e96c:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 800e970:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800e974:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 800e978:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 800e97c:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 800e980:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 800e984:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 800e988:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 800e98c:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 800e990:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 800e994:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 800e998:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 800e99c:	f7f8 f8b6 	bl	8006b0c <d_count_templates_scopes>
 800e9a0:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 800e9a4:	466e      	mov	r6, sp
 800e9a6:	00cb      	lsls	r3, r1, #3
 800e9a8:	3308      	adds	r3, #8
 800e9aa:	ebad 0d03 	sub.w	sp, sp, r3
 800e9ae:	4668      	mov	r0, sp
 800e9b0:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800e9b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800e9b8:	fb02 f101 	mul.w	r1, r2, r1
 800e9bc:	00ca      	lsls	r2, r1, #3
 800e9be:	3208      	adds	r2, #8
 800e9c0:	ebad 0d02 	sub.w	sp, sp, r2
 800e9c4:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 800e9c8:	462a      	mov	r2, r5
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 800e9d0:	60fb      	str	r3, [r7, #12]
 800e9d2:	2111      	movs	r1, #17
 800e9d4:	f107 0308 	add.w	r3, r7, #8
 800e9d8:	f8c4 d134 	str.w	sp, [r4, #308]	; 0x134
 800e9dc:	60bd      	str	r5, [r7, #8]
 800e9de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800e9e2:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 800e9e6:	f7f8 fba1 	bl	800712c <d_print_comp_inner>
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800e9f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800e9f6:	46b5      	mov	sp, r6
 800e9f8:	f804 9001 	strb.w	r9, [r4, r1]
 800e9fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800ea00:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800ea04:	4798      	blx	r3
 800ea06:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800ea0a:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800ea0e:	fab0 f080 	clz	r0, r0
 800ea12:	0940      	lsrs	r0, r0, #5
 800ea14:	46bd      	mov	sp, r7
 800ea16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1a:	7843      	ldrb	r3, [r0, #1]
 800ea1c:	2b5a      	cmp	r3, #90	; 0x5a
 800ea1e:	f47f af10 	bne.w	800e842 <d_demangle_callback.constprop.15+0x1a>
 800ea22:	f04f 0801 	mov.w	r8, #1
 800ea26:	e724      	b.n	800e872 <d_demangle_callback.constprop.15+0x4a>
 800ea28:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800ea2c:	d028      	beq.n	800ea80 <d_demangle_callback.constprop.15+0x258>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800ea34:	46bd      	mov	sp, r7
 800ea36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3a:	7aaa      	ldrb	r2, [r5, #10]
 800ea3c:	2a5f      	cmp	r2, #95	; 0x5f
 800ea3e:	f47f af16 	bne.w	800e86e <d_demangle_callback.constprop.15+0x46>
 800ea42:	2b49      	cmp	r3, #73	; 0x49
 800ea44:	bf14      	ite	ne
 800ea46:	f04f 0803 	movne.w	r8, #3
 800ea4a:	f04f 0802 	moveq.w	r8, #2
 800ea4e:	e710      	b.n	800e872 <d_demangle_callback.constprop.15+0x4a>
 800ea50:	7b2a      	ldrb	r2, [r5, #12]
 800ea52:	2a5a      	cmp	r2, #90	; 0x5a
 800ea54:	f47f af4c 	bne.w	800e8f0 <d_demangle_callback.constprop.15+0xc8>
 800ea58:	350d      	adds	r5, #13
 800ea5a:	4621      	mov	r1, r4
 800ea5c:	f107 0010 	add.w	r0, r7, #16
 800ea60:	61fd      	str	r5, [r7, #28]
 800ea62:	f7ff fb2f 	bl	800e0c4 <d_encoding>
 800ea66:	4602      	mov	r2, r0
 800ea68:	e75c      	b.n	800e924 <d_demangle_callback.constprop.15+0xfc>
 800ea6a:	f107 0010 	add.w	r0, r7, #16
 800ea6e:	f7fe fb71 	bl	800d154 <d_type>
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	4605      	mov	r5, r0
 800ea76:	f893 9000 	ldrb.w	r9, [r3]
 800ea7a:	e762      	b.n	800e942 <d_demangle_callback.constprop.15+0x11a>
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	e751      	b.n	800e924 <d_demangle_callback.constprop.15+0xfc>
 800ea80:	786b      	ldrb	r3, [r5, #1]
 800ea82:	2b5a      	cmp	r3, #90	; 0x5a
 800ea84:	d1d3      	bne.n	800ea2e <d_demangle_callback.constprop.15+0x206>
 800ea86:	3502      	adds	r5, #2
 800ea88:	4641      	mov	r1, r8
 800ea8a:	f107 0010 	add.w	r0, r7, #16
 800ea8e:	61fd      	str	r5, [r7, #28]
 800ea90:	f7ff fb18 	bl	800e0c4 <d_encoding>
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	4605      	mov	r5, r0
 800ea98:	07db      	lsls	r3, r3, #31
 800ea9a:	d556      	bpl.n	800eb4a <d_demangle_callback.constprop.15+0x322>
 800ea9c:	69f8      	ldr	r0, [r7, #28]
 800ea9e:	f890 9000 	ldrb.w	r9, [r0]
 800eaa2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800eaa6:	f47f af4c 	bne.w	800e942 <d_demangle_callback.constprop.15+0x11a>
 800eaaa:	7843      	ldrb	r3, [r0, #1]
 800eaac:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800eab0:	2a19      	cmp	r2, #25
 800eab2:	d93d      	bls.n	800eb30 <d_demangle_callback.constprop.15+0x308>
 800eab4:	2b5f      	cmp	r3, #95	; 0x5f
 800eab6:	d03b      	beq.n	800eb30 <d_demangle_callback.constprop.15+0x308>
 800eab8:	3b30      	subs	r3, #48	; 0x30
 800eaba:	2b09      	cmp	r3, #9
 800eabc:	d845      	bhi.n	800eb4a <d_demangle_callback.constprop.15+0x322>
 800eabe:	4603      	mov	r3, r0
 800eac0:	7802      	ldrb	r2, [r0, #0]
 800eac2:	2a2e      	cmp	r2, #46	; 0x2e
 800eac4:	d111      	bne.n	800eaea <d_demangle_callback.constprop.15+0x2c2>
 800eac6:	785a      	ldrb	r2, [r3, #1]
 800eac8:	3a30      	subs	r2, #48	; 0x30
 800eaca:	2a09      	cmp	r2, #9
 800eacc:	d80d      	bhi.n	800eaea <d_demangle_callback.constprop.15+0x2c2>
 800eace:	789a      	ldrb	r2, [r3, #2]
 800ead0:	3302      	adds	r3, #2
 800ead2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ead6:	2909      	cmp	r1, #9
 800ead8:	d8f3      	bhi.n	800eac2 <d_demangle_callback.constprop.15+0x29a>
 800eada:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800eade:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800eae2:	2909      	cmp	r1, #9
 800eae4:	d9f9      	bls.n	800eada <d_demangle_callback.constprop.15+0x2b2>
 800eae6:	2a2e      	cmp	r2, #46	; 0x2e
 800eae8:	d0ed      	beq.n	800eac6 <d_demangle_callback.constprop.15+0x29e>
 800eaea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eaee:	61fb      	str	r3, [r7, #28]
 800eaf0:	428a      	cmp	r2, r1
 800eaf2:	da1b      	bge.n	800eb2c <d_demangle_callback.constprop.15+0x304>
 800eaf4:	6a39      	ldr	r1, [r7, #32]
 800eaf6:	f102 0e01 	add.w	lr, r2, #1
 800eafa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800eafe:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 800eb02:	eb11 0e82 	adds.w	lr, r1, r2, lsl #2
 800eb06:	d011      	beq.n	800eb2c <d_demangle_callback.constprop.15+0x304>
 800eb08:	ebb3 0c00 	subs.w	ip, r3, r0
 800eb0c:	d00e      	beq.n	800eb2c <d_demangle_callback.constprop.15+0x304>
 800eb0e:	4673      	mov	r3, lr
 800eb10:	f801 4022 	strb.w	r4, [r1, r2, lsl #2]
 800eb14:	f8ce 0004 	str.w	r0, [lr, #4]
 800eb18:	f8ce c008 	str.w	ip, [lr, #8]
 800eb1c:	462a      	mov	r2, r5
 800eb1e:	214b      	movs	r1, #75	; 0x4b
 800eb20:	f107 0010 	add.w	r0, r7, #16
 800eb24:	f7f7 ff30 	bl	8006988 <d_make_comp>
 800eb28:	4605      	mov	r5, r0
 800eb2a:	e7b7      	b.n	800ea9c <d_demangle_callback.constprop.15+0x274>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	e7f5      	b.n	800eb1c <d_demangle_callback.constprop.15+0x2f4>
 800eb30:	1c81      	adds	r1, r0, #2
 800eb32:	780a      	ldrb	r2, [r1, #0]
 800eb34:	460b      	mov	r3, r1
 800eb36:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800eb3a:	f1be 0f19 	cmp.w	lr, #25
 800eb3e:	f101 0101 	add.w	r1, r1, #1
 800eb42:	d9f6      	bls.n	800eb32 <d_demangle_callback.constprop.15+0x30a>
 800eb44:	2a5f      	cmp	r2, #95	; 0x5f
 800eb46:	d0f4      	beq.n	800eb32 <d_demangle_callback.constprop.15+0x30a>
 800eb48:	e7bb      	b.n	800eac2 <d_demangle_callback.constprop.15+0x29a>
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	f893 9000 	ldrb.w	r9, [r3]
 800eb50:	e6f7      	b.n	800e942 <d_demangle_callback.constprop.15+0x11a>
 800eb52:	bf00      	nop
 800eb54:	080137bc 	.word	0x080137bc

0800eb58 <__cxa_demangle>:
 800eb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5c:	b084      	sub	sp, #16
 800eb5e:	b370      	cbz	r0, 800ebbe <__cxa_demangle+0x66>
 800eb60:	b101      	cbz	r1, 800eb64 <__cxa_demangle+0xc>
 800eb62:	b362      	cbz	r2, 800ebbe <__cxa_demangle+0x66>
 800eb64:	2400      	movs	r4, #0
 800eb66:	4617      	mov	r7, r2
 800eb68:	460d      	mov	r5, r1
 800eb6a:	466a      	mov	r2, sp
 800eb6c:	4928      	ldr	r1, [pc, #160]	; (800ec10 <__cxa_demangle+0xb8>)
 800eb6e:	461e      	mov	r6, r3
 800eb70:	9400      	str	r4, [sp, #0]
 800eb72:	9401      	str	r4, [sp, #4]
 800eb74:	9402      	str	r4, [sp, #8]
 800eb76:	9403      	str	r4, [sp, #12]
 800eb78:	f7ff fe56 	bl	800e828 <d_demangle_callback.constprop.15>
 800eb7c:	b368      	cbz	r0, 800ebda <__cxa_demangle+0x82>
 800eb7e:	9b03      	ldr	r3, [sp, #12]
 800eb80:	b1d3      	cbz	r3, 800ebb8 <__cxa_demangle+0x60>
 800eb82:	f04f 0801 	mov.w	r8, #1
 800eb86:	9c00      	ldr	r4, [sp, #0]
 800eb88:	b3ac      	cbz	r4, 800ebf6 <__cxa_demangle+0x9e>
 800eb8a:	b38d      	cbz	r5, 800ebf0 <__cxa_demangle+0x98>
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f000 f85d 	bl	800ec4c <strlen>
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	4298      	cmp	r0, r3
 800eb96:	d21a      	bcs.n	800ebce <__cxa_demangle+0x76>
 800eb98:	1c42      	adds	r2, r0, #1
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	f002 faa6 	bl	80110ee <memcpy>
 800eba2:	4620      	mov	r0, r4
 800eba4:	f002 fa8c 	bl	80110c0 <free>
 800eba8:	462c      	mov	r4, r5
 800ebaa:	b376      	cbz	r6, 800ec0a <__cxa_demangle+0xb2>
 800ebac:	4620      	mov	r0, r4
 800ebae:	2300      	movs	r3, #0
 800ebb0:	6033      	str	r3, [r6, #0]
 800ebb2:	b004      	add	sp, #16
 800ebb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ebbc:	e7e3      	b.n	800eb86 <__cxa_demangle+0x2e>
 800ebbe:	b19b      	cbz	r3, 800ebe8 <__cxa_demangle+0x90>
 800ebc0:	f06f 0202 	mvn.w	r2, #2
 800ebc4:	2000      	movs	r0, #0
 800ebc6:	601a      	str	r2, [r3, #0]
 800ebc8:	b004      	add	sp, #16
 800ebca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebce:	4628      	mov	r0, r5
 800ebd0:	f002 fa76 	bl	80110c0 <free>
 800ebd4:	f8c7 8000 	str.w	r8, [r7]
 800ebd8:	e7e7      	b.n	800ebaa <__cxa_demangle+0x52>
 800ebda:	9800      	ldr	r0, [sp, #0]
 800ebdc:	f002 fa70 	bl	80110c0 <free>
 800ebe0:	b116      	cbz	r6, 800ebe8 <__cxa_demangle+0x90>
 800ebe2:	f06f 0301 	mvn.w	r3, #1
 800ebe6:	6033      	str	r3, [r6, #0]
 800ebe8:	2000      	movs	r0, #0
 800ebea:	b004      	add	sp, #16
 800ebec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf0:	2f00      	cmp	r7, #0
 800ebf2:	d1ef      	bne.n	800ebd4 <__cxa_demangle+0x7c>
 800ebf4:	e7d9      	b.n	800ebaa <__cxa_demangle+0x52>
 800ebf6:	2e00      	cmp	r6, #0
 800ebf8:	d0f6      	beq.n	800ebe8 <__cxa_demangle+0x90>
 800ebfa:	f1b8 0f01 	cmp.w	r8, #1
 800ebfe:	d1f0      	bne.n	800ebe2 <__cxa_demangle+0x8a>
 800ec00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec04:	4620      	mov	r0, r4
 800ec06:	6033      	str	r3, [r6, #0]
 800ec08:	e7d3      	b.n	800ebb2 <__cxa_demangle+0x5a>
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	e7d1      	b.n	800ebb2 <__cxa_demangle+0x5a>
 800ec0e:	bf00      	nop
 800ec10:	080070b1 	.word	0x080070b1

0800ec14 <__gcclibcxx_demangle_callback>:
 800ec14:	b160      	cbz	r0, 800ec30 <__gcclibcxx_demangle_callback+0x1c>
 800ec16:	b508      	push	{r3, lr}
 800ec18:	b139      	cbz	r1, 800ec2a <__gcclibcxx_demangle_callback+0x16>
 800ec1a:	f7ff fe05 	bl	800e828 <d_demangle_callback.constprop.15>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	bf0c      	ite	eq
 800ec22:	f06f 0001 	mvneq.w	r0, #1
 800ec26:	2000      	movne	r0, #0
 800ec28:	bd08      	pop	{r3, pc}
 800ec2a:	f06f 0002 	mvn.w	r0, #2
 800ec2e:	bd08      	pop	{r3, pc}
 800ec30:	f06f 0002 	mvn.w	r0, #2
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop

0800ec38 <strcmp>:
 800ec38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec40:	2a01      	cmp	r2, #1
 800ec42:	bf28      	it	cs
 800ec44:	429a      	cmpcs	r2, r3
 800ec46:	d0f7      	beq.n	800ec38 <strcmp>
 800ec48:	1ad0      	subs	r0, r2, r3
 800ec4a:	4770      	bx	lr

0800ec4c <strlen>:
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec52:	2a00      	cmp	r2, #0
 800ec54:	d1fb      	bne.n	800ec4e <strlen+0x2>
 800ec56:	1a18      	subs	r0, r3, r0
 800ec58:	3801      	subs	r0, #1
 800ec5a:	4770      	bx	lr

0800ec5c <Reset_Handler>:
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	e003      	b.n	800ec68 <LoopCopyDataInit>

0800ec60 <CopyDataInit>:
 800ec60:	4b0b      	ldr	r3, [pc, #44]	; (800ec90 <LoopFillZerobss+0x14>)
 800ec62:	585b      	ldr	r3, [r3, r1]
 800ec64:	5043      	str	r3, [r0, r1]
 800ec66:	3104      	adds	r1, #4

0800ec68 <LoopCopyDataInit>:
 800ec68:	480a      	ldr	r0, [pc, #40]	; (800ec94 <LoopFillZerobss+0x18>)
 800ec6a:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <LoopFillZerobss+0x1c>)
 800ec6c:	1842      	adds	r2, r0, r1
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d3f6      	bcc.n	800ec60 <CopyDataInit>
 800ec72:	4a0a      	ldr	r2, [pc, #40]	; (800ec9c <LoopFillZerobss+0x20>)
 800ec74:	e002      	b.n	800ec7c <LoopFillZerobss>

0800ec76 <FillZerobss>:
 800ec76:	2300      	movs	r3, #0
 800ec78:	f842 3b04 	str.w	r3, [r2], #4

0800ec7c <LoopFillZerobss>:
 800ec7c:	4b08      	ldr	r3, [pc, #32]	; (800eca0 <LoopFillZerobss+0x24>)
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d3f9      	bcc.n	800ec76 <FillZerobss>
 800ec82:	f7f1 fadb 	bl	800023c <SystemInit>
 800ec86:	f002 f9ed 	bl	8011064 <__libc_init_array>
 800ec8a:	f000 ff95 	bl	800fbb8 <main>
 800ec8e:	4770      	bx	lr
 800ec90:	08014250 	.word	0x08014250
 800ec94:	20000000 	.word	0x20000000
 800ec98:	20000098 	.word	0x20000098
 800ec9c:	2000009c 	.word	0x2000009c
 800eca0:	20000afc 	.word	0x20000afc

0800eca4 <ADC1_2_IRQHandler>:
 800eca4:	e7fe      	b.n	800eca4 <ADC1_2_IRQHandler>

0800eca6 <std_msgs::Time::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800eca6:	6843      	ldr	r3, [r0, #4]
 800eca8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800ecaa:	6843      	ldr	r3, [r0, #4]
 800ecac:	0a1b      	lsrs	r3, r3, #8
 800ecae:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800ecb0:	88c3      	ldrh	r3, [r0, #6]
 800ecb2:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800ecb4:	79c3      	ldrb	r3, [r0, #7]
 800ecb6:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800ecb8:	6883      	ldr	r3, [r0, #8]
 800ecba:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800ecbc:	6883      	ldr	r3, [r0, #8]
 800ecbe:	0a1b      	lsrs	r3, r3, #8
 800ecc0:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800ecc2:	8943      	ldrh	r3, [r0, #10]
 800ecc4:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800ecc6:	7ac3      	ldrb	r3, [r0, #11]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800ecc8:	2008      	movs	r0, #8
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800ecca:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800eccc:	4770      	bx	lr

0800ecce <std_msgs::Time::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800ecce:	780b      	ldrb	r3, [r1, #0]
 800ecd0:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ecd2:	784a      	ldrb	r2, [r1, #1]
 800ecd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ecd8:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ecda:	788a      	ldrb	r2, [r1, #2]
 800ecdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ece0:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ece2:	78ca      	ldrb	r2, [r1, #3]
 800ece4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ece8:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800ecea:	790b      	ldrb	r3, [r1, #4]
 800ecec:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ecee:	794a      	ldrb	r2, [r1, #5]
 800ecf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ecf4:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ecf6:	798a      	ldrb	r2, [r1, #6]
 800ecf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecfc:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ecfe:	79ca      	ldrb	r2, [r1, #7]
 800ed00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ed04:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 800ed06:	2008      	movs	r0, #8
 800ed08:	4770      	bx	lr
	...

0800ed0c <std_msgs::Time::getType()>:

    const char * getType(){ return "std_msgs/Time"; };
 800ed0c:	4800      	ldr	r0, [pc, #0]	; (800ed10 <std_msgs::Time::getType()+0x4>)
 800ed0e:	4770      	bx	lr
 800ed10:	0801312c 	.word	0x0801312c

0800ed14 <std_msgs::Time::getMD5()>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800ed14:	4800      	ldr	r0, [pc, #0]	; (800ed18 <std_msgs::Time::getMD5()+0x4>)
 800ed16:	4770      	bx	lr
 800ed18:	0801313a 	.word	0x0801313a

0800ed1c <rosserial_msgs::TopicInfo::getType()>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800ed1c:	4800      	ldr	r0, [pc, #0]	; (800ed20 <rosserial_msgs::TopicInfo::getType()+0x4>)
 800ed1e:	4770      	bx	lr
 800ed20:	0801315b 	.word	0x0801315b

0800ed24 <rosserial_msgs::TopicInfo::getMD5()>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800ed24:	4800      	ldr	r0, [pc, #0]	; (800ed28 <rosserial_msgs::TopicInfo::getMD5()+0x4>)
 800ed26:	4770      	bx	lr
 800ed28:	08013174 	.word	0x08013174

0800ed2c <rosserial_msgs::Log::getType()>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/Log"; };
 800ed2c:	4800      	ldr	r0, [pc, #0]	; (800ed30 <rosserial_msgs::Log::getType()+0x4>)
 800ed2e:	4770      	bx	lr
 800ed30:	08013195 	.word	0x08013195

0800ed34 <rosserial_msgs::Log::getMD5()>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800ed34:	4800      	ldr	r0, [pc, #0]	; (800ed38 <rosserial_msgs::Log::getMD5()+0x4>)
 800ed36:	4770      	bx	lr
 800ed38:	080131a8 	.word	0x080131a8

0800ed3c <rosserial_msgs::RequestParamRequest::getType()>:
      this->name = (char *)(inbuffer + offset-1);
      offset += length_name;
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800ed3c:	4800      	ldr	r0, [pc, #0]	; (800ed40 <rosserial_msgs::RequestParamRequest::getType()+0x4>)
 800ed3e:	4770      	bx	lr
 800ed40:	080124f8 	.word	0x080124f8

0800ed44 <rosserial_msgs::RequestParamRequest::getMD5()>:
    const char * getMD5(){ return "c1f3d28f1b044c871e6eff2e9fc3c667"; };
 800ed44:	4800      	ldr	r0, [pc, #0]	; (800ed48 <rosserial_msgs::RequestParamRequest::getMD5()+0x4>)
 800ed46:	4770      	bx	lr
 800ed48:	080131c9 	.word	0x080131c9

0800ed4c <rosserial_msgs::RequestParamResponse::getType()>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800ed4c:	4800      	ldr	r0, [pc, #0]	; (800ed50 <rosserial_msgs::RequestParamResponse::getType()+0x4>)
 800ed4e:	4770      	bx	lr
 800ed50:	080124f8 	.word	0x080124f8

0800ed54 <rosserial_msgs::RequestParamResponse::getMD5()>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800ed54:	4800      	ldr	r0, [pc, #0]	; (800ed58 <rosserial_msgs::RequestParamResponse::getMD5()+0x4>)
 800ed56:	4770      	bx	lr
 800ed58:	080131ea 	.word	0x080131ea

0800ed5c <std_msgs::MultiArrayDimension::getType()>:
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stride);
     return offset;
    }

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 800ed5c:	4800      	ldr	r0, [pc, #0]	; (800ed60 <std_msgs::MultiArrayDimension::getType()+0x4>)
 800ed5e:	4770      	bx	lr
 800ed60:	0801320b 	.word	0x0801320b

0800ed64 <std_msgs::MultiArrayDimension::getMD5()>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 800ed64:	4800      	ldr	r0, [pc, #0]	; (800ed68 <std_msgs::MultiArrayDimension::getMD5()+0x4>)
 800ed66:	4770      	bx	lr
 800ed68:	08013228 	.word	0x08013228

0800ed6c <std_msgs::MultiArrayLayout::serialize(unsigned char*) const>:
      dim_length(0), dim(NULL),
      data_offset(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800ed6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed6e:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
 800ed70:	7903      	ldrb	r3, [r0, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800ed72:	4604      	mov	r4, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
      *(outbuffer + offset++) = 0;
 800ed74:	2000      	movs	r0, #0
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
 800ed76:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 800ed78:	7048      	strb	r0, [r1, #1]
      *(outbuffer + offset++) = 0;
 800ed7a:	7088      	strb	r0, [r1, #2]
      *(outbuffer + offset++) = 0;
 800ed7c:	70c8      	strb	r0, [r1, #3]
 800ed7e:	2604      	movs	r6, #4
      for( uint8_t i = 0; i < dim_length; i++){
 800ed80:	7923      	ldrb	r3, [r4, #4]
 800ed82:	1c47      	adds	r7, r0, #1
 800ed84:	b2c0      	uxtb	r0, r0
 800ed86:	4283      	cmp	r3, r0
 800ed88:	eb05 0106 	add.w	r1, r5, r6
 800ed8c:	d908      	bls.n	800eda0 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const+0x34>
      offset += this->dim[i].serialize(outbuffer + offset);
 800ed8e:	69a3      	ldr	r3, [r4, #24]
 800ed90:	0100      	lsls	r0, r0, #4
 800ed92:	581a      	ldr	r2, [r3, r0]
 800ed94:	4418      	add	r0, r3
 800ed96:	6812      	ldr	r2, [r2, #0]
 800ed98:	4790      	blx	r2
 800ed9a:	4406      	add	r6, r0
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < dim_length; i++){
 800ed9c:	4638      	mov	r0, r7
 800ed9e:	e7ef      	b.n	800ed80 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const+0x14>
      offset += this->dim[i].serialize(outbuffer + offset);
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 800eda0:	69e3      	ldr	r3, [r4, #28]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }
 800eda2:	1d30      	adds	r0, r6, #4
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < dim_length; i++){
      offset += this->dim[i].serialize(outbuffer + offset);
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 800eda4:	55ab      	strb	r3, [r5, r6]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800eda6:	69e3      	ldr	r3, [r4, #28]
 800eda8:	0a1b      	lsrs	r3, r3, #8
 800edaa:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 800edac:	8be3      	ldrh	r3, [r4, #30]
 800edae:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800edb0:	7fe3      	ldrb	r3, [r4, #31]
 800edb2:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data_offset);
      return offset;
    }
 800edb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800edb8 <std_msgs::MultiArrayLayout::getType()>:
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data_offset);
     return offset;
    }

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 800edb8:	4800      	ldr	r0, [pc, #0]	; (800edbc <std_msgs::MultiArrayLayout::getType()+0x4>)
 800edba:	4770      	bx	lr
 800edbc:	08013249 	.word	0x08013249

0800edc0 <std_msgs::MultiArrayLayout::getMD5()>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 800edc0:	4800      	ldr	r0, [pc, #0]	; (800edc4 <std_msgs::MultiArrayLayout::getMD5()+0x4>)
 800edc2:	4770      	bx	lr
 800edc4:	08013263 	.word	0x08013263

0800edc8 <std_msgs::Float32MultiArray::serialize(unsigned char*) const>:
      layout(),
      data_length(0), data(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800edc8:	b570      	push	{r4, r5, r6, lr}
 800edca:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->layout.serialize(outbuffer + offset);
 800edcc:	3004      	adds	r0, #4
      layout(),
      data_length(0), data(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800edce:	460d      	mov	r5, r1
    {
      int offset = 0;
      offset += this->layout.serialize(outbuffer + offset);
 800edd0:	f7ff ffcc 	bl	800ed6c <std_msgs::MultiArrayLayout::serialize(unsigned char*) const>
      *(outbuffer + offset++) = data_length;
 800edd4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      *(outbuffer + offset++) = 0;
 800edd8:	2200      	movs	r2, #0

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->layout.serialize(outbuffer + offset);
      *(outbuffer + offset++) = data_length;
 800edda:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset++) = 0;
 800eddc:	182b      	adds	r3, r5, r0
 800edde:	3004      	adds	r0, #4
 800ede0:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset++) = 0;
 800ede2:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset++) = 0;
 800ede4:	70da      	strb	r2, [r3, #3]
 800ede6:	182b      	adds	r3, r5, r0
      for( uint8_t i = 0; i < data_length; i++){
 800ede8:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 800edec:	1c51      	adds	r1, r2, #1
 800edee:	b2d2      	uxtb	r2, r2
 800edf0:	4296      	cmp	r6, r2
 800edf2:	eba3 0005 	sub.w	r0, r3, r5
 800edf6:	f103 0304 	add.w	r3, r3, #4
 800edfa:	d90f      	bls.n	800ee1c <std_msgs::Float32MultiArray::serialize(unsigned char*) const+0x54>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800edfc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800edfe:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 800ee02:	0a10      	lsrs	r0, r2, #8
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800ee04:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 800ee08:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 800ee0c:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 800ee0e:	0e12      	lsrs	r2, r2, #24
 800ee10:	f803 2c01 	strb.w	r2, [r3, #-1]
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 800ee14:	f803 0c02 	strb.w	r0, [r3, #-2]
      offset += this->layout.serialize(outbuffer + offset);
      *(outbuffer + offset++) = data_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < data_length; i++){
 800ee18:	460a      	mov	r2, r1
 800ee1a:	e7e5      	b.n	800ede8 <std_msgs::Float32MultiArray::serialize(unsigned char*) const+0x20>
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data[i]);
      }
      return offset;
    }
 800ee1c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ee20 <std_msgs::Float32MultiArray::getType()>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
      }
     return offset;
    }

    const char * getType(){ return "std_msgs/Float32MultiArray"; };
 800ee20:	4800      	ldr	r0, [pc, #0]	; (800ee24 <std_msgs::Float32MultiArray::getType()+0x4>)
 800ee22:	4770      	bx	lr
 800ee24:	08013284 	.word	0x08013284

0800ee28 <std_msgs::Float32MultiArray::getMD5()>:
    const char * getMD5(){ return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 800ee28:	4800      	ldr	r0, [pc, #0]	; (800ee2c <std_msgs::Float32MultiArray::getMD5()+0x4>)
 800ee2a:	4770      	bx	lr
 800ee2c:	0801329f 	.word	0x0801329f

0800ee30 <std_msgs::UInt8::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800ee30:	7903      	ldrb	r3, [r0, #4]
      offset += sizeof(this->data);
      return offset;
    }
 800ee32:	2001      	movs	r0, #1
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800ee34:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
 800ee36:	4770      	bx	lr

0800ee38 <std_msgs::UInt8::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800ee38:	780b      	ldrb	r3, [r1, #0]
 800ee3a:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
 800ee3c:	2001      	movs	r0, #1
 800ee3e:	4770      	bx	lr

0800ee40 <std_msgs::UInt8::getType()>:

    const char * getType(){ return "std_msgs/UInt8"; };
 800ee40:	4800      	ldr	r0, [pc, #0]	; (800ee44 <std_msgs::UInt8::getType()+0x4>)
 800ee42:	4770      	bx	lr
 800ee44:	080132c0 	.word	0x080132c0

0800ee48 <std_msgs::UInt8::getMD5()>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
 800ee48:	4800      	ldr	r0, [pc, #0]	; (800ee4c <std_msgs::UInt8::getMD5()+0x4>)
 800ee4a:	4770      	bx	lr
 800ee4c:	080132cf 	.word	0x080132cf

0800ee50 <std_msgs::Header::getType()>:
      this->frame_id = (char *)(inbuffer + offset-1);
      offset += length_frame_id;
     return offset;
    }

    const char * getType(){ return "std_msgs/Header"; };
 800ee50:	4800      	ldr	r0, [pc, #0]	; (800ee54 <std_msgs::Header::getType()+0x4>)
 800ee52:	4770      	bx	lr
 800ee54:	080132f0 	.word	0x080132f0

0800ee58 <std_msgs::Header::getMD5()>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800ee58:	4800      	ldr	r0, [pc, #0]	; (800ee5c <std_msgs::Header::getMD5()+0x4>)
 800ee5a:	4770      	bx	lr
 800ee5c:	08013300 	.word	0x08013300

0800ee60 <roberto_msgs::MotorState::getType()>:
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->mode);
     return offset;
    }

    const char * getType(){ return "roberto_msgs/MotorState"; };
 800ee60:	4800      	ldr	r0, [pc, #0]	; (800ee64 <roberto_msgs::MotorState::getType()+0x4>)
 800ee62:	4770      	bx	lr
 800ee64:	08013321 	.word	0x08013321

0800ee68 <roberto_msgs::MotorState::getMD5()>:
    const char * getMD5(){ return "e8b5d1162b85151c49e02b8224796c0e"; };
 800ee68:	4800      	ldr	r0, [pc, #0]	; (800ee6c <roberto_msgs::MotorState::getMD5()+0x4>)
 800ee6a:	4770      	bx	lr
 800ee6c:	08013339 	.word	0x08013339

0800ee70 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::connected()>:


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
      };
 800ee70:	f890 04f4 	ldrb.w	r0, [r0, #1268]	; 0x4f4
 800ee74:	4770      	bx	lr

0800ee76 <ros::Subscriber<std_msgs::UInt8>::callback(unsigned char*)>:
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 800ee76:	780b      	ldrb	r3, [r1, #0]
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 800ee78:	300c      	adds	r0, #12
 800ee7a:	7103      	strb	r3, [r0, #4]
 800ee7c:	6883      	ldr	r3, [r0, #8]
 800ee7e:	4718      	bx	r3

0800ee80 <ros::Subscriber<std_msgs::UInt8>::getEndpointType()>:
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 800ee80:	6980      	ldr	r0, [r0, #24]
 800ee82:	4770      	bx	lr

0800ee84 <ros::Subscriber<std_msgs::UInt8>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 800ee84:	4800      	ldr	r0, [pc, #0]	; (800ee88 <ros::Subscriber<std_msgs::UInt8>::getMsgType()+0x4>)
 800ee86:	4770      	bx	lr
 800ee88:	080132c0 	.word	0x080132c0

0800ee8c <ros::Subscriber<std_msgs::UInt8>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800ee8c:	4800      	ldr	r0, [pc, #0]	; (800ee90 <ros::Subscriber<std_msgs::UInt8>::getMsgMD5()+0x4>)
 800ee8e:	4770      	bx	lr
 800ee90:	080132cf 	.word	0x080132cf

0800ee94 <ros::Subscriber<roberto_msgs::MotorState>::getEndpointType()>:
      virtual int getEndpointType(){ return endpoint_; }
 800ee94:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800ee96:	4770      	bx	lr

0800ee98 <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 800ee98:	4800      	ldr	r0, [pc, #0]	; (800ee9c <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()+0x4>)
 800ee9a:	4770      	bx	lr
 800ee9c:	08013321 	.word	0x08013321

0800eea0 <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800eea0:	4800      	ldr	r0, [pc, #0]	; (800eea4 <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()+0x4>)
 800eea2:	4770      	bx	lr
 800eea4:	08013339 	.word	0x08013339

0800eea8 <std_msgs::Header::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800eea8:	6843      	ldr	r3, [r0, #4]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800eeaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800eeac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800eeae:	6843      	ldr	r3, [r0, #4]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800eeb0:	4605      	mov	r5, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800eeb2:	0a1b      	lsrs	r3, r3, #8
 800eeb4:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800eeb6:	88c3      	ldrh	r3, [r0, #6]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800eeb8:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800eeba:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800eebc:	79c3      	ldrb	r3, [r0, #7]
 800eebe:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->seq);
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800eec0:	6883      	ldr	r3, [r0, #8]
 800eec2:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800eec4:	6883      	ldr	r3, [r0, #8]
 800eec6:	0a1b      	lsrs	r3, r3, #8
 800eec8:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800eeca:	8943      	ldrh	r3, [r0, #10]
 800eecc:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800eece:	7ac3      	ldrb	r3, [r0, #11]
 800eed0:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800eed2:	68c3      	ldr	r3, [r0, #12]
 800eed4:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800eed6:	68c3      	ldr	r3, [r0, #12]
 800eed8:	0a1b      	lsrs	r3, r3, #8
 800eeda:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800eedc:	89c3      	ldrh	r3, [r0, #14]
 800eede:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800eee0:	7bc3      	ldrb	r3, [r0, #15]
 800eee2:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id = strlen(this->frame_id);
 800eee4:	6900      	ldr	r0, [r0, #16]
 800eee6:	f7ff feb1 	bl	800ec4c <strlen>
 800eeea:	4606      	mov	r6, r0
 800eeec:	ab02      	add	r3, sp, #8
 800eeee:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 800eef2:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800eef4:	4632      	mov	r2, r6
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id = strlen(this->frame_id);
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 800eef6:	60e0      	str	r0, [r4, #12]
      offset += 4;
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800eef8:	6929      	ldr	r1, [r5, #16]
 800eefa:	f104 0010 	add.w	r0, r4, #16
 800eefe:	f002 f8f6 	bl	80110ee <memcpy>
      offset += length_frame_id;
      return offset;
    }
 800ef02:	f106 0010 	add.w	r0, r6, #16
 800ef06:	b002      	add	sp, #8
 800ef08:	bd70      	pop	{r4, r5, r6, pc}

0800ef0a <std_msgs::MultiArrayDimension::serialize(unsigned char*) const>:
      size(0),
      stride(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800ef0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef0c:	4605      	mov	r5, r0
    {
      int offset = 0;
      uint32_t length_label = strlen(this->label);
 800ef0e:	6840      	ldr	r0, [r0, #4]
      size(0),
      stride(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800ef10:	460c      	mov	r4, r1
    {
      int offset = 0;
      uint32_t length_label = strlen(this->label);
 800ef12:	f7ff fe9b 	bl	800ec4c <strlen>
 800ef16:	ab02      	add	r3, sp, #8
 800ef18:	f843 0d04 	str.w	r0, [r3, #-4]!
 800ef1c:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, &length_label, sizeof(uint32_t));
 800ef1e:	6818      	ldr	r0, [r3, #0]
 800ef20:	4623      	mov	r3, r4
 800ef22:	f843 0b04 	str.w	r0, [r3], #4
      offset += 4;
      memcpy(outbuffer + offset, this->label, length_label);
 800ef26:	6869      	ldr	r1, [r5, #4]
 800ef28:	4632      	mov	r2, r6
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f002 f8df 	bl	80110ee <memcpy>
      offset += length_label;
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800ef30:	68ab      	ldr	r3, [r5, #8]
 800ef32:	19a1      	adds	r1, r4, r6
 800ef34:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800ef36:	68ab      	ldr	r3, [r5, #8]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stride);
      return offset;
    }
 800ef38:	f106 000c 	add.w	r0, r6, #12
      memcpy(outbuffer + offset, &length_label, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->label, length_label);
      offset += length_label;
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800ef3c:	0a1b      	lsrs	r3, r3, #8
 800ef3e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800ef40:	896b      	ldrh	r3, [r5, #10]
 800ef42:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800ef44:	7aeb      	ldrb	r3, [r5, #11]
 800ef46:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->size);
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 800ef48:	68eb      	ldr	r3, [r5, #12]
 800ef4a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 800ef4c:	68eb      	ldr	r3, [r5, #12]
 800ef4e:	0a1b      	lsrs	r3, r3, #8
 800ef50:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800ef52:	89eb      	ldrh	r3, [r5, #14]
 800ef54:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 800ef56:	7beb      	ldrb	r3, [r5, #15]
 800ef58:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->stride);
      return offset;
    }
 800ef5a:	b002      	add	sp, #8
 800ef5c:	bd70      	pop	{r4, r5, r6, pc}

0800ef5e <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800ef5e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 800ef62:	7903      	ldrb	r3, [r0, #4]
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800ef64:	4607      	mov	r7, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 800ef66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 800ef68:	2300      	movs	r3, #0
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
 800ef6a:	461a      	mov	r2, r3
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800ef6c:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
 800ef6e:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 800ef70:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 800ef72:	70cb      	strb	r3, [r1, #3]
 800ef74:	3104      	adds	r1, #4
      for( uint8_t i = 0; i < ints_length; i++){
 800ef76:	793d      	ldrb	r5, [r7, #4]
 800ef78:	1c50      	adds	r0, r2, #1
 800ef7a:	b2d2      	uxtb	r2, r2
 800ef7c:	4295      	cmp	r5, r2
 800ef7e:	eba1 0304 	sub.w	r3, r1, r4
 800ef82:	f101 0104 	add.w	r1, r1, #4
 800ef86:	d90f      	bls.n	800efa8 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x4a>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800ef8e:	0a1a      	lsrs	r2, r3, #8
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800ef90:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800ef94:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800ef98:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800ef9a:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800ef9c:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800efa0:	f801 3c01 	strb.w	r3, [r1, #-1]
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < ints_length; i++){
 800efa4:	4602      	mov	r2, r0
 800efa6:	e7e6      	b.n	800ef76 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x18>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800efa8:	7c3a      	ldrb	r2, [r7, #16]
      *(outbuffer + offset++) = 0;
 800efaa:	18e1      	adds	r1, r4, r3
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800efac:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 800efae:	2200      	movs	r2, #0
 800efb0:	3304      	adds	r3, #4
 800efb2:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 800efb4:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 800efb6:	70ca      	strb	r2, [r1, #3]
 800efb8:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 800efba:	7c38      	ldrb	r0, [r7, #16]
 800efbc:	1c51      	adds	r1, r2, #1
 800efbe:	b2d2      	uxtb	r2, r2
 800efc0:	4290      	cmp	r0, r2
 800efc2:	eba3 0604 	sub.w	r6, r3, r4
 800efc6:	f103 0304 	add.w	r3, r3, #4
 800efca:	d90f      	bls.n	800efec <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x8e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800efcc:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800efce:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800efd2:	0a10      	lsrs	r0, r2, #8
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800efd4:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800efd8:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800efdc:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800efde:	0e12      	lsrs	r2, r2, #24
 800efe0:	f803 2c01 	strb.w	r2, [r3, #-1]
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800efe4:	f803 0c02 	strb.w	r0, [r3, #-2]
      }
      *(outbuffer + offset++) = floats_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < floats_length; i++){
 800efe8:	460a      	mov	r2, r1
 800efea:	e7e6      	b.n	800efba <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x5c>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 800efec:	7f3b      	ldrb	r3, [r7, #28]
      *(outbuffer + offset++) = 0;
 800efee:	19a2      	adds	r2, r4, r6
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 800eff0:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 800eff6:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 800eff8:	3604      	adds	r6, #4
 800effa:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 800effc:	7f3a      	ldrb	r2, [r7, #28]
 800effe:	b2dd      	uxtb	r5, r3
 800f000:	42aa      	cmp	r2, r5
 800f002:	f103 0901 	add.w	r9, r3, #1
 800f006:	d915      	bls.n	800f034 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0xd6>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f00e:	f7ff fe1d 	bl	800ec4c <strlen>
 800f012:	4680      	mov	r8, r0
 800f014:	ab02      	add	r3, sp, #8
 800f016:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 800f01a:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800f01c:	4642      	mov	r2, r8
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_stringsi = strlen(this->strings[i]);
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 800f01e:	51a0      	str	r0, [r4, r6]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	3604      	adds	r6, #4
 800f024:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800f028:	19a0      	adds	r0, r4, r6
 800f02a:	f002 f860 	bl	80110ee <memcpy>
      offset += length_stringsi;
 800f02e:	4446      	add	r6, r8
      }
      *(outbuffer + offset++) = strings_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
 800f030:	464b      	mov	r3, r9
 800f032:	e7e3      	b.n	800effc <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x9e>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
 800f034:	4630      	mov	r0, r6
 800f036:	b003      	add	sp, #12
 800f038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f03c <rosserial_msgs::RequestParamRequest::serialize(unsigned char*) const>:
    RequestParamRequest():
      name("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f03c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f03e:	4606      	mov	r6, r0
    {
      int offset = 0;
      uint32_t length_name = strlen(this->name);
 800f040:	6840      	ldr	r0, [r0, #4]
    RequestParamRequest():
      name("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f042:	460c      	mov	r4, r1
    {
      int offset = 0;
      uint32_t length_name = strlen(this->name);
 800f044:	f7ff fe02 	bl	800ec4c <strlen>
 800f048:	ab02      	add	r3, sp, #8
 800f04a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f04e:	4605      	mov	r5, r0
      memcpy(outbuffer + offset, &length_name, sizeof(uint32_t));
 800f050:	6818      	ldr	r0, [r3, #0]
 800f052:	4623      	mov	r3, r4
 800f054:	f843 0b04 	str.w	r0, [r3], #4
      offset += 4;
      memcpy(outbuffer + offset, this->name, length_name);
 800f058:	462a      	mov	r2, r5
 800f05a:	6871      	ldr	r1, [r6, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f002 f846 	bl	80110ee <memcpy>
      offset += length_name;
      return offset;
    }
 800f062:	1d28      	adds	r0, r5, #4
 800f064:	b002      	add	sp, #8
 800f066:	bd70      	pop	{r4, r5, r6, pc}

0800f068 <rosserial_msgs::Log::serialize(unsigned char*) const>:
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f068:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800f06a:	7903      	ldrb	r3, [r0, #4]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f06c:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800f06e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 800f070:	6880      	ldr	r0, [r0, #8]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f072:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 800f074:	f7ff fdea 	bl	800ec4c <strlen>
 800f078:	4604      	mov	r4, r0
 800f07a:	ab02      	add	r3, sp, #8
 800f07c:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 800f080:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800f082:	4622      	mov	r2, r4
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 800f084:	f8c5 0001 	str.w	r0, [r5, #1]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800f088:	68b1      	ldr	r1, [r6, #8]
 800f08a:	1d68      	adds	r0, r5, #5
 800f08c:	f002 f82f 	bl	80110ee <memcpy>
      offset += length_msg;
      return offset;
    }
 800f090:	1d60      	adds	r0, r4, #5
 800f092:	b002      	add	sp, #8
 800f094:	bd70      	pop	{r4, r5, r6, pc}

0800f096 <rosserial_msgs::TopicInfo::serialize(unsigned char*) const>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f096:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f09a:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f09c:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f09e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f0a0:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0a2:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f0a4:	0a1b      	lsrs	r3, r3, #8
 800f0a6:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
 800f0a8:	6880      	ldr	r0, [r0, #8]
 800f0aa:	f7ff fdcf 	bl	800ec4c <strlen>
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	ab04      	add	r3, sp, #16
 800f0b2:	f843 0d0c 	str.w	r0, [r3, #-12]!
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800f0b6:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f0b8:	4622      	mov	r2, r4
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800f0ba:	f8c5 0002 	str.w	r0, [r5, #2]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f0be:	68b1      	ldr	r1, [r6, #8]
 800f0c0:	1da8      	adds	r0, r5, #6
 800f0c2:	f002 f814 	bl	80110ee <memcpy>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
 800f0c6:	68f0      	ldr	r0, [r6, #12]
 800f0c8:	f7ff fdc0 	bl	800ec4c <strlen>
 800f0cc:	4607      	mov	r7, r0
 800f0ce:	ab04      	add	r3, sp, #16
 800f0d0:	f843 0d08 	str.w	r0, [r3, #-8]!
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800f0d4:	6818      	ldr	r0, [r3, #0]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
      offset += length_topic_name;
 800f0d6:	f104 0806 	add.w	r8, r4, #6
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800f0da:	f845 0008 	str.w	r0, [r5, r8]
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800f0de:	340a      	adds	r4, #10
 800f0e0:	463a      	mov	r2, r7
 800f0e2:	68f1      	ldr	r1, [r6, #12]
 800f0e4:	1928      	adds	r0, r5, r4
 800f0e6:	f002 f802 	bl	80110ee <memcpy>
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
 800f0ea:	6930      	ldr	r0, [r6, #16]
 800f0ec:	f7ff fdae 	bl	800ec4c <strlen>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
 800f0f0:	443c      	add	r4, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 800f0f2:	4607      	mov	r7, r0
 800f0f4:	ab04      	add	r3, sp, #16
 800f0f6:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800f0fa:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f0fc:	463a      	mov	r2, r7
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800f0fe:	5128      	str	r0, [r5, r4]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f100:	3404      	adds	r4, #4
 800f102:	1928      	adds	r0, r5, r4
 800f104:	6931      	ldr	r1, [r6, #16]
 800f106:	f001 fff2 	bl	80110ee <memcpy>
      offset += length_md5sum;
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800f10a:	6973      	ldr	r3, [r6, #20]
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
      offset += length_md5sum;
 800f10c:	1938      	adds	r0, r7, r4
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800f10e:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800f110:	0a1a      	lsrs	r2, r3, #8
 800f112:	4405      	add	r5, r0
 800f114:	706a      	strb	r2, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }
 800f116:	3004      	adds	r0, #4
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f118:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f11a:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f11c:	70aa      	strb	r2, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f11e:	70eb      	strb	r3, [r5, #3]
      offset += sizeof(this->buffer_size);
      return offset;
    }
 800f120:	b004      	add	sp, #16
 800f122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f126 <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
 800f126:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->name, length_name);
      offset += length_name;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f12a:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
 800f12c:	f853 0b04 	ldr.w	r0, [r3], #4
 800f130:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
 800f132:	9a01      	ldr	r2, [sp, #4]
 800f134:	1d10      	adds	r0, r2, #4
 800f136:	1a5d      	subs	r5, r3, r1
 800f138:	42a8      	cmp	r0, r5
 800f13a:	d904      	bls.n	800f146 <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)+0x20>
          inbuffer[k-1]=inbuffer[k];
 800f13c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f140:	f803 5c02 	strb.w	r5, [r3, #-2]
    {
      int offset = 0;
      uint32_t length_name;
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
 800f144:	e7f7      	b.n	800f136 <rosserial_msgs::RequestParamRequest::deserialize(unsigned char*)+0x10>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_name-1]=0;
 800f146:	440a      	add	r2, r1
 800f148:	2300      	movs	r3, #0
      this->name = (char *)(inbuffer + offset-1);
 800f14a:	3103      	adds	r1, #3
      memcpy(&length_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_name; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_name-1]=0;
 800f14c:	70d3      	strb	r3, [r2, #3]
      this->name = (char *)(inbuffer + offset-1);
 800f14e:	6061      	str	r1, [r4, #4]
      offset += length_name;
     return offset;
    }
 800f150:	b003      	add	sp, #12
 800f152:	bd30      	pop	{r4, r5, pc}

0800f154 <std_msgs::Header::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f154:	4603      	mov	r3, r0
 800f156:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800f158:	780a      	ldrb	r2, [r1, #0]
 800f15a:	f101 0410 	add.w	r4, r1, #16
 800f15e:	6042      	str	r2, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f160:	7848      	ldrb	r0, [r1, #1]
 800f162:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f166:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f168:	7888      	ldrb	r0, [r1, #2]
 800f16a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f16e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f170:	78c8      	ldrb	r0, [r1, #3]
 800f172:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f176:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800f178:	790a      	ldrb	r2, [r1, #4]
 800f17a:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f17c:	7948      	ldrb	r0, [r1, #5]
 800f17e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f182:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f184:	7988      	ldrb	r0, [r1, #6]
 800f186:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f18a:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f18c:	79c8      	ldrb	r0, [r1, #7]
 800f18e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f192:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800f194:	7a0a      	ldrb	r2, [r1, #8]
 800f196:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f198:	7a48      	ldrb	r0, [r1, #9]
 800f19a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f19e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f1a0:	7a88      	ldrb	r0, [r1, #10]
 800f1a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f1a6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f1a8:	7ac8      	ldrb	r0, [r1, #11]
 800f1aa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f1ae:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
 800f1b0:	68c8      	ldr	r0, [r1, #12]
 800f1b2:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800f1b4:	9a01      	ldr	r2, [sp, #4]
 800f1b6:	f102 0010 	add.w	r0, r2, #16
 800f1ba:	1a65      	subs	r5, r4, r1
 800f1bc:	42a8      	cmp	r0, r5
 800f1be:	d904      	bls.n	800f1ca <std_msgs::Header::deserialize(unsigned char*)+0x76>
          inbuffer[k-1]=inbuffer[k];
 800f1c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f1c4:	f804 5c02 	strb.w	r5, [r4, #-2]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800f1c8:	e7f7      	b.n	800f1ba <std_msgs::Header::deserialize(unsigned char*)+0x66>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 800f1ca:	440a      	add	r2, r1
 800f1cc:	2400      	movs	r4, #0
      this->frame_id = (char *)(inbuffer + offset-1);
 800f1ce:	310f      	adds	r1, #15
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 800f1d0:	73d4      	strb	r4, [r2, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
 800f1d2:	6119      	str	r1, [r3, #16]
      offset += length_frame_id;
     return offset;
    }
 800f1d4:	b003      	add	sp, #12
 800f1d6:	bd30      	pop	{r4, r5, pc}

0800f1d8 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f1d8:	780b      	ldrb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f1da:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f1dc:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f1de:	784a      	ldrb	r2, [r1, #1]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f1e0:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f1e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f1e6:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800f1e8:	f8d1 0002 	ldr.w	r0, [r1, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f1ec:	b085      	sub	sp, #20
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800f1ee:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f1f0:	9d01      	ldr	r5, [sp, #4]
 800f1f2:	1d8a      	adds	r2, r1, #6
 800f1f4:	1dab      	adds	r3, r5, #6
 800f1f6:	1a50      	subs	r0, r2, r1
 800f1f8:	4283      	cmp	r3, r0
 800f1fa:	d904      	bls.n	800f206 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x2e>
          inbuffer[k-1]=inbuffer[k];
 800f1fc:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f200:	f802 0c02 	strb.w	r0, [r2, #-2]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f204:	e7f7      	b.n	800f1f6 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x1e>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 800f206:	194a      	adds	r2, r1, r5
 800f208:	2000      	movs	r0, #0
 800f20a:	7150      	strb	r0, [r2, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 800f20c:	1d4a      	adds	r2, r1, #5
 800f20e:	60a2      	str	r2, [r4, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800f210:	58c8      	ldr	r0, [r1, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f212:	1d1a      	adds	r2, r3, #4
      }
      inbuffer[offset+length_topic_name-1]=0;
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800f214:	9002      	str	r0, [sp, #8]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f216:	9b02      	ldr	r3, [sp, #8]
 800f218:	f105 000a 	add.w	r0, r5, #10
 800f21c:	4413      	add	r3, r2
 800f21e:	4408      	add	r0, r1
 800f220:	1a45      	subs	r5, r0, r1
 800f222:	42ab      	cmp	r3, r5
 800f224:	d904      	bls.n	800f230 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x58>
          inbuffer[k-1]=inbuffer[k];
 800f226:	f810 5b01 	ldrb.w	r5, [r0], #1
 800f22a:	f800 5c02 	strb.w	r5, [r0, #-2]
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f22e:	e7f7      	b.n	800f220 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x48>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
 800f230:	3a01      	subs	r2, #1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800f232:	18c8      	adds	r0, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 800f234:	440a      	add	r2, r1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800f236:	2500      	movs	r5, #0
 800f238:	f800 5c01 	strb.w	r5, [r0, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 800f23c:	60e2      	str	r2, [r4, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800f23e:	6800      	ldr	r0, [r0, #0]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f240:	3304      	adds	r3, #4
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800f242:	9003      	str	r0, [sp, #12]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f244:	9803      	ldr	r0, [sp, #12]
 800f246:	18ca      	adds	r2, r1, r3
 800f248:	4418      	add	r0, r3
 800f24a:	1a55      	subs	r5, r2, r1
 800f24c:	42a8      	cmp	r0, r5
 800f24e:	d904      	bls.n	800f25a <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x82>
          inbuffer[k-1]=inbuffer[k];
 800f250:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f254:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f258:	e7f7      	b.n	800f24a <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x72>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
      this->md5sum = (char *)(inbuffer + offset-1);
 800f25a:	3b01      	subs	r3, #1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f25c:	180d      	adds	r5, r1, r0
      this->md5sum = (char *)(inbuffer + offset-1);
 800f25e:	440b      	add	r3, r1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f260:	2200      	movs	r2, #0
 800f262:	f805 2c01 	strb.w	r2, [r5, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 800f266:	6123      	str	r3, [r4, #16]
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800f268:	78ab      	ldrb	r3, [r5, #2]
 800f26a:	786a      	ldrb	r2, [r5, #1]
 800f26c:	041b      	lsls	r3, r3, #16
 800f26e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f272:	5c0a      	ldrb	r2, [r1, r0]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800f274:	3004      	adds	r0, #4
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800f276:	4313      	orrs	r3, r2
 800f278:	78ea      	ldrb	r2, [r5, #3]
 800f27a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f27e:	6163      	str	r3, [r4, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800f280:	b005      	add	sp, #20
 800f282:	bd30      	pop	{r4, r5, pc}

0800f284 <rosserial_msgs::Log::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f284:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f286:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f288:	f813 2b01 	ldrb.w	r2, [r3], #1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f28c:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f28e:	7102      	strb	r2, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 800f290:	6818      	ldr	r0, [r3, #0]
 800f292:	1d4a      	adds	r2, r1, #5
 800f294:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800f296:	9b01      	ldr	r3, [sp, #4]
 800f298:	1d58      	adds	r0, r3, #5
 800f29a:	1a55      	subs	r5, r2, r1
 800f29c:	42a8      	cmp	r0, r5
 800f29e:	d904      	bls.n	800f2aa <rosserial_msgs::Log::deserialize(unsigned char*)+0x26>
          inbuffer[k-1]=inbuffer[k];
 800f2a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f2a4:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800f2a8:	e7f7      	b.n	800f29a <rosserial_msgs::Log::deserialize(unsigned char*)+0x16>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 800f2aa:	440b      	add	r3, r1
 800f2ac:	2200      	movs	r2, #0
      this->msg = (char *)(inbuffer + offset-1);
 800f2ae:	3104      	adds	r1, #4
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 800f2b0:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 800f2b2:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 800f2b4:	b003      	add	sp, #12
 800f2b6:	bd30      	pop	{r4, r5, pc}

0800f2b8 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t length_label;
      memcpy(&length_label, (inbuffer + offset), sizeof(uint32_t));
 800f2b8:	460b      	mov	r3, r1
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stride);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f2ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2bc:	4602      	mov	r2, r0
    {
      int offset = 0;
      uint32_t length_label;
      memcpy(&length_label, (inbuffer + offset), sizeof(uint32_t));
 800f2be:	f853 0b04 	ldr.w	r0, [r3], #4
 800f2c2:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800f2c4:	9801      	ldr	r0, [sp, #4]
 800f2c6:	1d05      	adds	r5, r0, #4
 800f2c8:	1a5c      	subs	r4, r3, r1
 800f2ca:	42a5      	cmp	r5, r4
 800f2cc:	d904      	bls.n	800f2d8 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)+0x20>
          inbuffer[k-1]=inbuffer[k];
 800f2ce:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f2d2:	f803 4c02 	strb.w	r4, [r3, #-2]
    {
      int offset = 0;
      uint32_t length_label;
      memcpy(&length_label, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800f2d6:	e7f7      	b.n	800f2c8 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)+0x10>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_label-1]=0;
 800f2d8:	180c      	adds	r4, r1, r0
 800f2da:	2300      	movs	r3, #0
 800f2dc:	70e3      	strb	r3, [r4, #3]
      this->label = (char *)(inbuffer + offset-1);
 800f2de:	1ccb      	adds	r3, r1, #3
 800f2e0:	6053      	str	r3, [r2, #4]
      offset += length_label;
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800f2e2:	5d4b      	ldrb	r3, [r1, r5]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stride);
     return offset;
    }
 800f2e4:	300c      	adds	r0, #12
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_label-1]=0;
      this->label = (char *)(inbuffer + offset-1);
      offset += length_label;
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800f2e6:	6093      	str	r3, [r2, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f2e8:	7961      	ldrb	r1, [r4, #5]
 800f2ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f2ee:	6093      	str	r3, [r2, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f2f0:	79a1      	ldrb	r1, [r4, #6]
 800f2f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f2f6:	6093      	str	r3, [r2, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f2f8:	79e1      	ldrb	r1, [r4, #7]
 800f2fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f2fe:	6093      	str	r3, [r2, #8]
      offset += sizeof(this->size);
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 800f300:	7a23      	ldrb	r3, [r4, #8]
 800f302:	60d3      	str	r3, [r2, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f304:	7a61      	ldrb	r1, [r4, #9]
 800f306:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f30a:	60d3      	str	r3, [r2, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f30c:	7aa1      	ldrb	r1, [r4, #10]
 800f30e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f312:	60d3      	str	r3, [r2, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f314:	7ae1      	ldrb	r1, [r4, #11]
 800f316:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f31a:	60d3      	str	r3, [r2, #12]
      offset += sizeof(this->stride);
     return offset;
    }
 800f31c:	b003      	add	sp, #12
 800f31e:	bd30      	pop	{r4, r5, pc}

0800f320 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>:
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
 800f322:	780d      	ldrb	r5, [r1, #0]
      if(ints_lengthT > ints_length)
 800f324:	7903      	ldrb	r3, [r0, #4]
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f326:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 800f328:	42ab      	cmp	r3, r5
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f32a:	460e      	mov	r6, r1
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 800f32c:	d204      	bcs.n	800f338 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800f32e:	00a9      	lsls	r1, r5, #2
 800f330:	68c0      	ldr	r0, [r0, #12]
 800f332:	f001 ff87 	bl	8011244 <realloc>
 800f336:	60e0      	str	r0, [r4, #12]
      offset += 3;
      ints_length = ints_lengthT;
 800f338:	7125      	strb	r5, [r4, #4]
 800f33a:	1d32      	adds	r2, r6, #4
 800f33c:	2100      	movs	r1, #0
      for( uint8_t i = 0; i < ints_length; i++){
 800f33e:	7923      	ldrb	r3, [r4, #4]
 800f340:	1c4f      	adds	r7, r1, #1
 800f342:	b2c9      	uxtb	r1, r1
 800f344:	428b      	cmp	r3, r1
 800f346:	eba2 0506 	sub.w	r5, r2, r6
 800f34a:	f102 0204 	add.w	r2, r2, #4
 800f34e:	d914      	bls.n	800f37a <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x5a>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
 800f350:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 800f354:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800f358:	041b      	lsls	r3, r3, #16
 800f35a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800f35e:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800f362:	4303      	orrs	r3, r0
 800f364:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800f368:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f36c:	60a3      	str	r3, [r4, #8]
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800f36e:	68a0      	ldr	r0, [r4, #8]
 800f370:	68e3      	ldr	r3, [r4, #12]
 800f372:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 800f376:	4639      	mov	r1, r7
 800f378:	e7e1      	b.n	800f33e <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x1e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 800f37a:	5d77      	ldrb	r7, [r6, r5]
      if(floats_lengthT > floats_length)
 800f37c:	7c23      	ldrb	r3, [r4, #16]
 800f37e:	42bb      	cmp	r3, r7
 800f380:	d204      	bcs.n	800f38c <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x6c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800f382:	00b9      	lsls	r1, r7, #2
 800f384:	69a0      	ldr	r0, [r4, #24]
 800f386:	f001 ff5d 	bl	8011244 <realloc>
 800f38a:	61a0      	str	r0, [r4, #24]
 800f38c:	1d2b      	adds	r3, r5, #4
      offset += 3;
      floats_length = floats_lengthT;
 800f38e:	7427      	strb	r7, [r4, #16]
 800f390:	4433      	add	r3, r6
 800f392:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < floats_length; i++){
 800f394:	7c21      	ldrb	r1, [r4, #16]
 800f396:	1c57      	adds	r7, r2, #1
 800f398:	b2d2      	uxtb	r2, r2
 800f39a:	4291      	cmp	r1, r2
 800f39c:	eba3 0506 	sub.w	r5, r3, r6
 800f3a0:	f103 0304 	add.w	r3, r3, #4
 800f3a4:	d914      	bls.n	800f3d0 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xb0>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f3a6:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800f3aa:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800f3ae:	0409      	lsls	r1, r1, #16
 800f3b0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800f3b4:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800f3b8:	4301      	orrs	r1, r0
 800f3ba:	f813 0c01 	ldrb.w	r0, [r3, #-1]
      this->st_floats = u_st_floats.real;
 800f3be:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800f3c2:	6161      	str	r1, [r4, #20]
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800f3c4:	6960      	ldr	r0, [r4, #20]
 800f3c6:	69a1      	ldr	r1, [r4, #24]
 800f3c8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      uint8_t floats_lengthT = *(inbuffer + offset++);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      offset += 3;
      floats_length = floats_lengthT;
      for( uint8_t i = 0; i < floats_length; i++){
 800f3cc:	463a      	mov	r2, r7
 800f3ce:	e7e1      	b.n	800f394 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x74>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 800f3d0:	5d77      	ldrb	r7, [r6, r5]
      if(strings_lengthT > strings_length)
 800f3d2:	7f23      	ldrb	r3, [r4, #28]
 800f3d4:	42bb      	cmp	r3, r7
 800f3d6:	d204      	bcs.n	800f3e2 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xc2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800f3d8:	00b9      	lsls	r1, r7, #2
 800f3da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3dc:	f001 ff32 	bl	8011244 <realloc>
 800f3e0:	6260      	str	r0, [r4, #36]	; 0x24
      offset += 3;
 800f3e2:	1d2b      	adds	r3, r5, #4
      strings_length = strings_lengthT;
 800f3e4:	2500      	movs	r5, #0
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f3e6:	46ae      	mov	lr, r5
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
 800f3e8:	7727      	strb	r7, [r4, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 800f3ea:	7f22      	ldrb	r2, [r4, #28]
 800f3ec:	b2ef      	uxtb	r7, r5
 800f3ee:	42ba      	cmp	r2, r7
 800f3f0:	d919      	bls.n	800f426 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x106>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800f3f2:	58f0      	ldr	r0, [r6, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f3f4:	1d1a      	adds	r2, r3, #4
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800f3f6:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f3f8:	9b01      	ldr	r3, [sp, #4]
 800f3fa:	18b1      	adds	r1, r6, r2
 800f3fc:	4413      	add	r3, r2
 800f3fe:	1b88      	subs	r0, r1, r6
 800f400:	4283      	cmp	r3, r0
 800f402:	d904      	bls.n	800f40e <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xee>
          inbuffer[k-1]=inbuffer[k];
 800f404:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f408:	f801 0c02 	strb.w	r0, [r1, #-2]
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f40c:	e7f7      	b.n	800f3fe <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xde>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
 800f40e:	3a01      	subs	r2, #1
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f410:	18f1      	adds	r1, r6, r3
      this->st_strings = (char *)(inbuffer + offset-1);
 800f412:	4432      	add	r2, r6
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f414:	f801 ec01 	strb.w	lr, [r1, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 800f418:	6222      	str	r2, [r4, #32]
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800f41a:	6a21      	ldr	r1, [r4, #32]
 800f41c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f41e:	3501      	adds	r5, #1
 800f420:	f842 1027 	str.w	r1, [r2, r7, lsl #2]
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
 800f424:	e7e1      	b.n	800f3ea <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xca>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
 800f426:	4618      	mov	r0, r3
 800f428:	b003      	add	sp, #12
 800f42a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f42c <std_msgs::MultiArrayLayout::deserialize(unsigned char*)>:
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    {
      int offset = 0;
      uint8_t dim_lengthT = *(inbuffer + offset++);
 800f430:	780d      	ldrb	r5, [r1, #0]
      if(dim_lengthT > dim_length)
 800f432:	7903      	ldrb	r3, [r0, #4]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f434:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
 800f436:	42ab      	cmp	r3, r5
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f438:	460f      	mov	r7, r1
    {
      int offset = 0;
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
 800f43a:	d204      	bcs.n	800f446 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x1a>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800f43c:	0129      	lsls	r1, r5, #4
 800f43e:	6980      	ldr	r0, [r0, #24]
 800f440:	f001 ff00 	bl	8011244 <realloc>
 800f444:	61a0      	str	r0, [r4, #24]
      offset += 3;
      dim_length = dim_lengthT;
 800f446:	7125      	strb	r5, [r4, #4]
 800f448:	2300      	movs	r3, #0
    {
      int offset = 0;
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      offset += 3;
 800f44a:	2604      	movs	r6, #4
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
      offset += this->st_dim.deserialize(inbuffer + offset);
 800f44c:	f104 0808 	add.w	r8, r4, #8
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800f450:	f104 0a18 	add.w	sl, r4, #24
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      offset += 3;
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
 800f454:	7922      	ldrb	r2, [r4, #4]
 800f456:	b2dd      	uxtb	r5, r3
 800f458:	42aa      	cmp	r2, r5
 800f45a:	f103 0901 	add.w	r9, r3, #1
 800f45e:	eb07 0106 	add.w	r1, r7, r6
 800f462:	d90f      	bls.n	800f484 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x58>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800f464:	4640      	mov	r0, r8
 800f466:	f7ff ff27 	bl	800f2b8 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)>
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800f46a:	4642      	mov	r2, r8
 800f46c:	69a3      	ldr	r3, [r4, #24]
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      offset += 3;
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
      offset += this->st_dim.deserialize(inbuffer + offset);
 800f46e:	4406      	add	r6, r0
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800f470:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800f474:	f852 1b04 	ldr.w	r1, [r2], #4
 800f478:	4552      	cmp	r2, sl
 800f47a:	f843 1b04 	str.w	r1, [r3], #4
 800f47e:	d1f9      	bne.n	800f474 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x48>
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      offset += 3;
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
 800f480:	464b      	mov	r3, r9
 800f482:	e7e7      	b.n	800f454 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x28>
      offset += this->st_dim.deserialize(inbuffer + offset);
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800f484:	5dbb      	ldrb	r3, [r7, r6]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data_offset);
     return offset;
    }
 800f486:	1d30      	adds	r0, r6, #4
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
      offset += this->st_dim.deserialize(inbuffer + offset);
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800f488:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f48a:	784a      	ldrb	r2, [r1, #1]
 800f48c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f490:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f492:	788a      	ldrb	r2, [r1, #2]
 800f494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f498:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f49a:	78ca      	ldrb	r2, [r1, #3]
 800f49c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f4a0:	61e3      	str	r3, [r4, #28]
      offset += sizeof(this->data_offset);
     return offset;
    }
 800f4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f4a6 <std_msgs::Float32MultiArray::deserialize(unsigned char*)>:
      offset += sizeof(this->data[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4a8:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
 800f4aa:	3004      	adds	r0, #4
      offset += sizeof(this->data[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f4ac:	460d      	mov	r5, r1
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
 800f4ae:	f7ff ffbd 	bl	800f42c <std_msgs::MultiArrayLayout::deserialize(unsigned char*)>
      uint8_t data_lengthT = *(inbuffer + offset++);
      if(data_lengthT > data_length)
 800f4b2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
      uint8_t data_lengthT = *(inbuffer + offset++);
 800f4b6:	5c2f      	ldrb	r7, [r5, r0]
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
 800f4b8:	4606      	mov	r6, r0
      uint8_t data_lengthT = *(inbuffer + offset++);
      if(data_lengthT > data_length)
 800f4ba:	42bb      	cmp	r3, r7
 800f4bc:	d204      	bcs.n	800f4c8 <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x22>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 800f4be:	00b9      	lsls	r1, r7, #2
 800f4c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f4c2:	f001 febf 	bl	8011244 <realloc>
 800f4c6:	62e0      	str	r0, [r4, #44]	; 0x2c
 800f4c8:	1d33      	adds	r3, r6, #4
      offset += 3;
      data_length = data_lengthT;
 800f4ca:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800f4ce:	442b      	add	r3, r5
 800f4d0:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < data_length; i++){
 800f4d2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800f4d6:	1c56      	adds	r6, r2, #1
 800f4d8:	b2d2      	uxtb	r2, r2
 800f4da:	4291      	cmp	r1, r2
 800f4dc:	eba3 0005 	sub.w	r0, r3, r5
 800f4e0:	f103 0304 	add.w	r3, r3, #4
 800f4e4:	d914      	bls.n	800f510 <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x6a>
      } u_st_data;
      u_st_data.base = 0;
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f4e6:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800f4ea:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800f4ee:	0409      	lsls	r1, r1, #16
 800f4f0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800f4f4:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800f4f8:	4301      	orrs	r1, r0
 800f4fa:	f813 0c01 	ldrb.w	r0, [r3, #-1]
      this->st_data = u_st_data.real;
 800f4fe:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800f502:	62a1      	str	r1, [r4, #40]	; 0x28
      offset += sizeof(this->st_data);
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 800f504:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f506:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f508:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      uint8_t data_lengthT = *(inbuffer + offset++);
      if(data_lengthT > data_length)
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
      offset += 3;
      data_length = data_lengthT;
      for( uint8_t i = 0; i < data_length; i++){
 800f50c:	4632      	mov	r2, r6
 800f50e:	e7e0      	b.n	800f4d2 <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x2c>
      this->st_data = u_st_data.real;
      offset += sizeof(this->st_data);
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
      }
     return offset;
    }
 800f510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f512 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f512:	b538      	push	{r3, r4, r5, lr}
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800f514:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f518:	4605      	mov	r5, r0
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800f51a:	460a      	mov	r2, r1
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f51c:	4608      	mov	r0, r1
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
    if (exp != 0)
 800f51e:	b10b      	cbz	r3, 800f524 <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x12>
    {
      exp += 1023 - 127;
 800f520:	f503 7360 	add.w	r3, r3, #896	; 0x380
    }

    int32_t sig = *val;
    *(outbuffer++) = 0;
 800f524:	2100      	movs	r1, #0
 800f526:	7029      	strb	r1, [r5, #0]
    *(outbuffer++) = 0;
 800f528:	7069      	strb	r1, [r5, #1]
    *(outbuffer++) = 0;
 800f52a:	70a9      	strb	r1, [r5, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 800f52c:	0151      	lsls	r1, r2, #5
 800f52e:	70e9      	strb	r1, [r5, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800f530:	10d1      	asrs	r1, r2, #3
 800f532:	7129      	strb	r1, [r5, #4]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800f534:	12d1      	asrs	r1, r2, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800f536:	f3c2 42c3 	ubfx	r2, r2, #19, #4
 800f53a:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    *(outbuffer++) = 0;
    *(outbuffer++) = 0;
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
 800f53e:	7169      	strb	r1, [r5, #5]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800f540:	71aa      	strb	r2, [r5, #6]
    *(outbuffer++) = (exp >> 4) & 0x7F;

    // Mark negative bit as necessary.
    if (f < 0)
 800f542:	2100      	movs	r1, #0
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800f544:	f3c3 1407 	ubfx	r4, r3, #4, #8

    // Mark negative bit as necessary.
    if (f < 0)
 800f548:	f7f6 fa5e 	bl	8005a08 <__aeabi_fcmplt>
 800f54c:	b908      	cbnz	r0, 800f552 <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x40>
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800f54e:	71ec      	strb	r4, [r5, #7]
 800f550:	e002      	b.n	800f558 <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x46>

    // Mark negative bit as necessary.
    if (f < 0)
    {
      *(outbuffer - 1) |= 0x80;
 800f552:	f064 037f 	orn	r3, r4, #127	; 0x7f
 800f556:	71eb      	strb	r3, [r5, #7]
    }

    return 8;
  }
 800f558:	2008      	movs	r0, #8
 800f55a:	bd38      	pop	{r3, r4, r5, pc}

0800f55c <roberto_msgs::MotorState::serialize(unsigned char*) const>:
      acceleration(0),
      mode(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f560:	3004      	adds	r0, #4
      acceleration(0),
      mode(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f562:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f564:	f7ff fca0 	bl	800eea8 <std_msgs::Header::serialize(unsigned char*) const>
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 800f568:	69a9      	ldr	r1, [r5, #24]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f56a:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 800f56c:	1830      	adds	r0, r6, r0
 800f56e:	f7ff ffd0 	bl	800f512 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f572:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_velocity);
 800f574:	69e9      	ldr	r1, [r5, #28]
 800f576:	1930      	adds	r0, r6, r4
 800f578:	f7ff ffcb 	bl	800f512 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f57c:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 800f57e:	6a29      	ldr	r1, [r5, #32]
 800f580:	1930      	adds	r0, r6, r4
 800f582:	f7ff ffc6 	bl	800f512 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f586:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->acceleration);
 800f588:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800f58a:	1930      	adds	r0, r6, r4
 800f58c:	f7ff ffc1 	bl	800f512 <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
 800f590:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800f594:	4420      	add	r0, r4
 800f596:	5433      	strb	r3, [r6, r0]
      offset += sizeof(this->mode);
      return offset;
    }
 800f598:	3001      	adds	r0, #1
 800f59a:	bd70      	pop	{r4, r5, r6, pc}

0800f59c <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800f59c:	b530      	push	{r4, r5, lr}
  {
    uint32_t* val = (uint32_t*)f;
    inbuffer += 3;

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 800f59e:	78c3      	ldrb	r3, [r0, #3]
 800f5a0:	095b      	lsrs	r3, r3, #5
 800f5a2:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 800f5a4:	7902      	ldrb	r2, [r0, #4]
 800f5a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f5aa:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 800f5ac:	7942      	ldrb	r2, [r0, #5]
 800f5ae:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 800f5b2:	600a      	str	r2, [r1, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 800f5b4:	7983      	ldrb	r3, [r0, #6]
 800f5b6:	04db      	lsls	r3, r3, #19
 800f5b8:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	600b      	str	r3, [r1, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800f5c0:	79c4      	ldrb	r4, [r0, #7]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
 800f5c2:	7985      	ldrb	r5, [r0, #6]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800f5c4:	0124      	lsls	r4, r4, #4
 800f5c6:	f404 62fe 	and.w	r2, r4, #2032	; 0x7f0
    if (exp != 0)
 800f5ca:	ea52 1215 	orrs.w	r2, r2, r5, lsr #4
    {
      *val |= ((exp) - 1023 + 127) << 23;
 800f5ce:	bf1e      	ittt	ne
 800f5d0:	f5a2 7260 	subne.w	r2, r2, #896	; 0x380
 800f5d4:	ea43 53c2 	orrne.w	r3, r3, r2, lsl #23
 800f5d8:	600b      	strne	r3, [r1, #0]
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800f5da:	79c3      	ldrb	r3, [r0, #7]

    return 8;
  }
 800f5dc:	2008      	movs	r0, #8
    {
      *val |= ((exp) - 1023 + 127) << 23;
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800f5de:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800f5e2:	680b      	ldr	r3, [r1, #0]
 800f5e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f5e8:	600b      	str	r3, [r1, #0]

    return 8;
  }
 800f5ea:	bd30      	pop	{r4, r5, pc}

0800f5ec <roberto_msgs::MotorState::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f5ec:	b570      	push	{r4, r5, r6, lr}
 800f5ee:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f5f0:	3004      	adds	r0, #4
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
      offset += sizeof(this->mode);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f5f2:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f5f4:	f7ff fdae 	bl	800f154 <std_msgs::Header::deserialize(unsigned char*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800f5f8:	f105 0118 	add.w	r1, r5, #24
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f5fc:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800f5fe:	1830      	adds	r0, r6, r0
 800f600:	f7ff ffcc 	bl	800f59c <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f604:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
 800f606:	f105 011c 	add.w	r1, r5, #28
 800f60a:	1930      	adds	r0, r6, r4
 800f60c:	f7ff ffc6 	bl	800f59c <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f610:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 800f612:	f105 0120 	add.w	r1, r5, #32
 800f616:	1930      	adds	r0, r6, r4
 800f618:	f7ff ffc0 	bl	800f59c <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f61c:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
 800f61e:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f622:	1930      	adds	r0, r6, r4
 800f624:	f7ff ffba 	bl	800f59c <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 800f628:	4420      	add	r0, r4
 800f62a:	5c33      	ldrb	r3, [r6, r0]
      offset += sizeof(this->mode);
     return offset;
    }
 800f62c:	3001      	adds	r0, #1
      offset += this->header.deserialize(inbuffer + offset);
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 800f62e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
      offset += sizeof(this->mode);
     return offset;
    }
 800f632:	bd70      	pop	{r4, r5, r6, pc}

0800f634 <ros::Subscriber<roberto_msgs::MotorState>::callback(unsigned char*)>:
        endpoint_(endpoint)
      {
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 800f634:	b570      	push	{r4, r5, r6, lr}
 800f636:	4605      	mov	r5, r0
        msg.deserialize(data);
 800f638:	f100 040c 	add.w	r4, r0, #12
 800f63c:	4620      	mov	r0, r4
 800f63e:	f7ff ffd5 	bl	800f5ec <roberto_msgs::MotorState::deserialize(unsigned char*)>
        this->cb_(msg);
 800f642:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f644:	4620      	mov	r0, r4
      }
 800f646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 800f64a:	4718      	bx	r3

0800f64c <ArduinoHardware::init()>:
      this->baud_= baud;
    }
  
    int getBaud(){return baud_;}

    void init(){
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	4604      	mov	r4, r0
 800f650:	b086      	sub	sp, #24
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f652:	4d21      	ldr	r5, [pc, #132]	; (800f6d8 <ArduinoHardware::init()+0x8c>)
      /* Bit configuration structure for GPIOA PIN9 and PIN10 */
      GPIO_InitTypeDef gpioa_init_struct;

      /* Enalbe clock for USART1, AFIO and GPIOA */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | 
                           RCC_APB2Periph_GPIOA, ENABLE);
 800f654:	2101      	movs	r1, #1
 800f656:	f244 0005 	movw	r0, #16389	; 0x4005
 800f65a:	f7f3 fa05 	bl	8002a68 <RCC_APB2PeriphClockCmd>
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 800f65e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f662:	f8ad 3004 	strh.w	r3, [sp, #4]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800f666:	2603      	movs	r6, #3
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800f668:	2318      	movs	r3, #24
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f66a:	a901      	add	r1, sp, #4
 800f66c:	4628      	mov	r0, r5
                           RCC_APB2Periph_GPIOA, ENABLE);
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800f66e:	f88d 3007 	strb.w	r3, [sp, #7]
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_AFIO | 
                           RCC_APB2Periph_GPIOA, ENABLE);
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800f672:	f88d 6006 	strb.w	r6, [sp, #6]
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f676:	f7f2 fd98 	bl	80021aa <GPIO_Init>
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 800f67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f67e:	f8ad 3004 	strh.w	r3, [sp, #4]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800f682:	2304      	movs	r3, #4
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f684:	eb0d 0103 	add.w	r1, sp, r3
 800f688:	4628      	mov	r0, r5
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800f68a:	f88d 3007 	strb.w	r3, [sp, #7]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800f68e:	f88d 6006 	strb.w	r6, [sp, #6]
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f692:	f7f2 fd8a 	bl	80021aa <GPIO_Init>

      /* Enable USART1 */
      USART_Cmd(iostream, ENABLE);  
 800f696:	6820      	ldr	r0, [r4, #0]
 800f698:	2101      	movs	r1, #1
 800f69a:	f7f3 fc8e 	bl	8002fba <USART_Cmd>
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
 800f69e:	6863      	ldr	r3, [r4, #4]
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800f6a0:	220c      	movs	r2, #12
      /* Enable USART1 */
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
 800f6a2:	9302      	str	r3, [sp, #8]
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800f6a4:	a902      	add	r1, sp, #8
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 800f6a6:	2300      	movs	r3, #0
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800f6a8:	6820      	ldr	r0, [r4, #0]
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 115200, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 800f6aa:	f8ad 300c 	strh.w	r3, [sp, #12]
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
 800f6ae:	f8ad 300e 	strh.w	r3, [sp, #14]
      usart1_init_struct.USART_Parity = USART_Parity_No ;
 800f6b2:	f8ad 3010 	strh.w	r3, [sp, #16]
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800f6b6:	f8ad 3014 	strh.w	r3, [sp, #20]
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800f6ba:	f8ad 2012 	strh.w	r2, [sp, #18]
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800f6be:	f7f3 fc07 	bl	8002ed0 <USART_Init>
      /* Enable RXNE interrupt */
      USART_ITConfig(iostream, USART_IT_RXNE, ENABLE);
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	f240 5125 	movw	r1, #1317	; 0x525
 800f6c8:	6820      	ldr	r0, [r4, #0]
 800f6ca:	f7f3 fc82 	bl	8002fd2 <USART_ITConfig>
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800f6ce:	4b03      	ldr	r3, [pc, #12]	; (800f6dc <ArduinoHardware::init()+0x90>)
 800f6d0:	2220      	movs	r2, #32
 800f6d2:	605a      	str	r2, [r3, #4]
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }
 800f6d4:	b006      	add	sp, #24
 800f6d6:	bd70      	pop	{r4, r5, r6, pc}
 800f6d8:	40010800 	.word	0x40010800
 800f6dc:	e000e100 	.word	0xe000e100

0800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>:
        log(rosserial_msgs::Log::INFO, msg);
      }
      void logwarn(const char *msg){
        log(rosserial_msgs::Log::WARN, msg);
      }
      void logerror(const char*msg){
 800f6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
 800f6e2:	4b07      	ldr	r3, [pc, #28]	; (800f700 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)+0x20>)

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
        l.msg = (char*)msg;
 800f6e4:	9103      	str	r1, [sp, #12]
 800f6e6:	9301      	str	r3, [sp, #4]
       */

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	f88d 3008 	strb.w	r3, [sp, #8]
        l.msg = (char*)msg;
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800f6ee:	6803      	ldr	r3, [r0, #0]
 800f6f0:	aa01      	add	r2, sp, #4
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2107      	movs	r1, #7
 800f6f6:	4798      	blx	r3
      void logwarn(const char *msg){
        log(rosserial_msgs::Log::WARN, msg);
      }
      void logerror(const char*msg){
        log(rosserial_msgs::Log::ERROR, msg);
      }
 800f6f8:	b005      	add	sp, #20
 800f6fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6fe:	bf00      	nop
 800f700:	08013018 	.word	0x08013018

0800f704 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)>:
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
      {
        if(id >= 100 && !configured_)
 800f704:	2963      	cmp	r1, #99	; 0x63
          }
        }
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
 800f706:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f70a:	4604      	mov	r4, r0
 800f70c:	460e      	mov	r6, r1
      {
        if(id >= 100 && !configured_)
 800f70e:	dd03      	ble.n	800f718 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x14>
 800f710:	f890 54f4 	ldrb.w	r5, [r0, #1268]	; 0x4f4
 800f714:	2d00      	cmp	r5, #0
 800f716:	d04f      	beq.n	800f7b8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xb4>
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 800f718:	6813      	ldr	r3, [r2, #0]
 800f71a:	f204 211f 	addw	r1, r4, #543	; 0x21f
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4610      	mov	r0, r2
 800f722:	4798      	blx	r3

        /* setup the header */
        message_out[0] = 0xff;
 800f724:	22ff      	movs	r2, #255	; 0xff
 800f726:	f884 2218 	strb.w	r2, [r4, #536]	; 0x218
        message_out[1] = PROTOCOL_VER;
 800f72a:	22fe      	movs	r2, #254	; 0xfe
      {
        if(id >= 100 && !configured_)
	  return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 800f72c:	b283      	uxth	r3, r0

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
 800f72e:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800f732:	b2c2      	uxtb	r2, r0
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
 800f734:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f738:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800f73c:	4410      	add	r0, r2
 800f73e:	43c0      	mvns	r0, r0
        message_out[5] = (uint8_t) ((int16_t)id&255);
 800f740:	f884 621d 	strb.w	r6, [r4, #541]	; 0x21d
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 800f744:	f346 2607 	sbfx	r6, r6, #8, #8
        uint16_t l = msg->serialize(message_out+7);

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800f748:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800f74c:	f884 021c 	strb.w	r0, [r4, #540]	; 0x21c
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 800f750:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
 800f754:	f504 7007 	add.w	r0, r4, #540	; 0x21c

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800f758:	2105      	movs	r1, #5
	message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
 800f75a:	2200      	movs	r2, #0
        for(int i =5; i<l+7; i++)
 800f75c:	1d9e      	adds	r6, r3, #6
 800f75e:	42b1      	cmp	r1, r6
 800f760:	dc04      	bgt.n	800f76c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x68>
          chk += message_out[i];
 800f762:	f810 5f01 	ldrb.w	r5, [r0, #1]!
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800f766:	3101      	adds	r1, #1
          chk += message_out[i];
 800f768:	442a      	add	r2, r5
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800f76a:	e7f8      	b.n	800f75e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x5a>
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 800f76c:	43d2      	mvns	r2, r2
 800f76e:	f103 0608 	add.w	r6, r3, #8
 800f772:	3307      	adds	r3, #7
 800f774:	b2b6      	uxth	r6, r6
 800f776:	b29b      	uxth	r3, r3
 800f778:	4423      	add	r3, r4

        if( l <= OUTPUT_SIZE ){
 800f77a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 800f77e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

        if( l <= OUTPUT_SIZE ){
 800f782:	d813      	bhi.n	800f7ac <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xa8>
          hardware_.write(message_out, l);
 800f784:	f504 7806 	add.w	r8, r4, #536	; 0x218
 800f788:	4635      	mov	r5, r6
 800f78a:	4647      	mov	r7, r8
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
        while( !(USART1->SR & 0x00000040) );
 800f78c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 800f7c4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xc0>
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
 800f790:	ebc8 0307 	rsb	r3, r8, r7
 800f794:	429e      	cmp	r6, r3
 800f796:	dd0f      	ble.n	800f7b8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xb4>
        while( !(USART1->SR & 0x00000040) );
 800f798:	f8b9 3000 	ldrh.w	r3, [r9]
 800f79c:	065b      	lsls	r3, r3, #25
 800f79e:	d5fb      	bpl.n	800f798 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x94>
        USART_SendData(iostream, data[i]);
 800f7a0:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f7a4:	6860      	ldr	r0, [r4, #4]
 800f7a6:	f7f3 fc6e 	bl	8003086 <USART_SendData>
 800f7aa:	e7f1      	b.n	800f790 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0x8c>
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
 800f7ac:	4904      	ldr	r1, [pc, #16]	; (800f7c0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::publish(int, ros::Msg const*)+0xbc>)
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f7ff ff96 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
          return -1;
 800f7b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        }
      }
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7be:	bf00      	nop
 800f7c0:	0801335a 	.word	0x0801335a
 800f7c4:	40013800 	.word	0x40013800

0800f7c8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestParam(char const*, int)>:

    private:
      bool param_recieved;
      rosserial_msgs::RequestParamResponse req_param_resp;

      bool requestParam(const char * name, int time_out =  1000){
 800f7c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
        param_recieved = false;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	f880 3504 	strb.w	r3, [r0, #1284]	; 0x504
  {
    public:
      const char* name;

    RequestParamRequest():
      name("")
 800f7d0:	4b0d      	ldr	r3, [pc, #52]	; (800f808 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestParam(char const*, int)+0x40>)
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
 800f7d2:	9101      	str	r1, [sp, #4]
 800f7d4:	9300      	str	r3, [sp, #0]
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800f7d6:	6803      	ldr	r3, [r0, #0]

    private:
      bool param_recieved;
      rosserial_msgs::RequestParamResponse req_param_resp;

      bool requestParam(const char * name, int time_out =  1000){
 800f7d8:	4614      	mov	r4, r2
        param_recieved = false;
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	466a      	mov	r2, sp
 800f7de:	2106      	movs	r1, #6

    private:
      bool param_recieved;
      rosserial_msgs::RequestParamResponse req_param_resp;

      bool requestParam(const char * name, int time_out =  1000){
 800f7e0:	4605      	mov	r5, r0
        param_recieved = false;
        rosserial_msgs::RequestParamRequest req;
        req.name  = (char*)name;
        publish(TopicInfo::ID_PARAMETER_REQUEST, &req);
 800f7e2:	4798      	blx	r3
      }
    }

    uint32_t time(){
      return millis();
 800f7e4:	f7f0 ff76 	bl	80006d4 <millis>
        uint16_t end_time = hardware_.time() + time_out;
 800f7e8:	4420      	add	r0, r4
 800f7ea:	b284      	uxth	r4, r0
        while(!param_recieved ){
 800f7ec:	f895 6504 	ldrb.w	r6, [r5, #1284]	; 0x504
 800f7f0:	b93e      	cbnz	r6, 800f802 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestParam(char const*, int)+0x3a>
          spinOnce();
 800f7f2:	682b      	ldr	r3, [r5, #0]
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	4798      	blx	r3
 800f7fa:	f7f0 ff6b 	bl	80006d4 <millis>
          if (hardware_.time() > end_time) return false;
 800f7fe:	42a0      	cmp	r0, r4
 800f800:	d9f4      	bls.n	800f7ec <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestParam(char const*, int)+0x24>
        }
        return true;
      }
 800f802:	4630      	mov	r0, r6
 800f804:	b002      	add	sp, #8
 800f806:	bd70      	pop	{r4, r5, r6, pc}
 800f808:	08013030 	.word	0x08013030

0800f80c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>:
            return true;
          }
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	4615      	mov	r5, r2
        if (requestParam(name) ){
 800f810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
            return true;
          }
        }
        return false;
      }
      bool getParam(const char* name, float* param, int length=1){
 800f814:	4604      	mov	r4, r0
 800f816:	461e      	mov	r6, r3
        if (requestParam(name) ){
 800f818:	f7ff ffd6 	bl	800f7c8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestParam(char const*, int)>
 800f81c:	b178      	cbz	r0, 800f83e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x32>
          if (length == req_param_resp.floats_length){
 800f81e:	f894 2518 	ldrb.w	r2, [r4, #1304]	; 0x518
 800f822:	42b2      	cmp	r2, r6
 800f824:	d10a      	bne.n	800f83c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x30>
 800f826:	2300      	movs	r3, #0
            //copy it over
            for(int i=0; i<length; i++)
 800f828:	429a      	cmp	r2, r3
 800f82a:	dd08      	ble.n	800f83e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x32>
              param[i] = req_param_resp.floats[i];
 800f82c:	f8d4 1520 	ldr.w	r1, [r4, #1312]	; 0x520
 800f830:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f834:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
      }
      bool getParam(const char* name, float* param, int length=1){
        if (requestParam(name) ){
          if (length == req_param_resp.floats_length){
            //copy it over
            for(int i=0; i<length; i++)
 800f838:	3301      	adds	r3, #1
 800f83a:	e7f5      	b.n	800f828 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)+0x1c>
              param[i] = req_param_resp.floats[i];
            return true;
          }
        }
        return false;
 800f83c:	2000      	movs	r0, #0
      }
 800f83e:	bd70      	pop	{r4, r5, r6, pc}

0800f840 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>:

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 800f840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  {
    public:
      ros::Time data;

    Time():
      data()
 800f842:	4b08      	ldr	r3, [pc, #32]	; (800f864 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()+0x24>)
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 800f844:	aa01      	add	r2, sp, #4
 800f846:	9301      	str	r3, [sp, #4]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 800f848:	2300      	movs	r3, #0
 800f84a:	9302      	str	r3, [sp, #8]
 800f84c:	9303      	str	r3, [sp, #12]
 800f84e:	6803      	ldr	r3, [r0, #0]
 800f850:	210a      	movs	r1, #10
 800f852:	681b      	ldr	r3, [r3, #0]

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 800f854:	4604      	mov	r4, r0
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 800f856:	4798      	blx	r3
 800f858:	f7f0 ff3c 	bl	80006d4 <millis>
        rt_time = hardware_.time();
 800f85c:	60e0      	str	r0, [r4, #12]
      }
 800f85e:	b004      	add	sp, #16
 800f860:	bd10      	pop	{r4, pc}
 800f862:	bf00      	nop
 800f864:	08012fe8 	.word	0x08012fe8

0800f868 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()>:
          }
        }
        return false;
      }

      void negotiateTopics()
 800f868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f86c:	4604      	mov	r4, r0
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800f86e:	4b2b      	ldr	r3, [pc, #172]	; (800f91c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xb4>)
 800f870:	b086      	sub	sp, #24
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	4b2a      	ldr	r3, [pc, #168]	; (800f920 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xb8>)
 800f876:	2200      	movs	r2, #0
 800f878:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f87c:	9302      	str	r3, [sp, #8]
 800f87e:	9303      	str	r3, [sp, #12]
 800f880:	9304      	str	r3, [sp, #16]
 800f882:	9205      	str	r2, [sp, #20]
 800f884:	f200 4614 	addw	r6, r0, #1044	; 0x414
 800f888:	f500 658f 	add.w	r5, r0, #1144	; 0x478
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
 800f88c:	f44f 7700 	mov.w	r7, #512	; 0x200
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
 800f890:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800f894:	b1bb      	cbz	r3, 800f8c6 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x5e>
          {
            ti.topic_id = publishers[i]->id_;
 800f896:	689a      	ldr	r2, [r3, #8]
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800f898:	6858      	ldr	r0, [r3, #4]
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
 800f89a:	f8ad 2004 	strh.w	r2, [sp, #4]
            ti.topic_name = (char *) publishers[i]->topic_;
 800f89e:	681a      	ldr	r2, [r3, #0]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800f8a0:	6803      	ldr	r3, [r0, #0]
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
 800f8a2:	9202      	str	r2, [sp, #8]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800f8a4:	689b      	ldr	r3, [r3, #8]
 800f8a6:	4798      	blx	r3
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800f8a8:	6833      	ldr	r3, [r6, #0]
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800f8aa:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800f8ac:	6858      	ldr	r0, [r3, #4]
 800f8ae:	6803      	ldr	r3, [r0, #0]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	4798      	blx	r3
 800f8b4:	6831      	ldr	r1, [r6, #0]
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
 800f8b6:	6823      	ldr	r3, [r4, #0]
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800f8b8:	9004      	str	r0, [sp, #16]
            ti.buffer_size = OUTPUT_SIZE;
 800f8ba:	9705      	str	r7, [sp, #20]
            publish( publishers[i]->getEndpointType(), &ti );
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	466a      	mov	r2, sp
 800f8c0:	6909      	ldr	r1, [r1, #16]
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	4798      	blx	r3

      void negotiateTopics()
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
 800f8c6:	42ae      	cmp	r6, r5
 800f8c8:	d1e2      	bne.n	800f890 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x28>
 800f8ca:	f204 46dc 	addw	r6, r4, #1244	; 0x4dc
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 800f8ce:	f44f 7700 	mov.w	r7, #512	; 0x200
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
 800f8d2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f8d6:	b1c8      	cbz	r0, 800f90c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0xa4>
          {
            ti.topic_id = subscribers[i]->id_;
 800f8d8:	6843      	ldr	r3, [r0, #4]
 800f8da:	f8ad 3004 	strh.w	r3, [sp, #4]
            ti.topic_name = (char *) subscribers[i]->topic_;
 800f8de:	6883      	ldr	r3, [r0, #8]
 800f8e0:	9302      	str	r3, [sp, #8]
            ti.message_type = (char *) subscribers[i]->getMsgType();
 800f8e2:	6803      	ldr	r3, [r0, #0]
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	4798      	blx	r3
 800f8e8:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800f8ea:	6828      	ldr	r0, [r5, #0]
 800f8ec:	6803      	ldr	r3, [r0, #0]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	4798      	blx	r3
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800f8f2:	6823      	ldr	r3, [r4, #0]
          if(subscribers[i] != 0) // non-empty slot
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800f8f4:	9004      	str	r0, [sp, #16]
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800f8f6:	6828      	ldr	r0, [r5, #0]
 800f8f8:	f8d3 8000 	ldr.w	r8, [r3]
 800f8fc:	6803      	ldr	r3, [r0, #0]
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 800f8fe:	9705      	str	r7, [sp, #20]
            publish( subscribers[i]->getEndpointType(), &ti );
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	4798      	blx	r3
 800f904:	466a      	mov	r2, sp
 800f906:	4601      	mov	r1, r0
 800f908:	4620      	mov	r0, r4
 800f90a:	47c0      	blx	r8
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
 800f90c:	42ae      	cmp	r6, r5
 800f90e:	d1e0      	bne.n	800f8d2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()+0x6a>
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
          }
        }
        configured_ = true;
 800f910:	2301      	movs	r3, #1
 800f912:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
      }
 800f916:	b006      	add	sp, #24
 800f918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f91c:	08013000 	.word	0x08013000
 800f920:	0801349a 	.word	0x0801349a

0800f924 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)>:
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
        rt_time = hardware_.time();
      }

      void syncTime(uint8_t * data)
 800f924:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f926:	4b1c      	ldr	r3, [pc, #112]	; (800f998 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x74>)
 800f928:	4604      	mov	r4, r0
 800f92a:	9301      	str	r3, [sp, #4]
 800f92c:	2300      	movs	r3, #0
 800f92e:	9302      	str	r3, [sp, #8]
 800f930:	9303      	str	r3, [sp, #12]
 800f932:	460d      	mov	r5, r1
 800f934:	f7f0 fece 	bl	80006d4 <millis>
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 800f938:	68e2      	ldr	r2, [r4, #12]

        t.deserialize(data);
 800f93a:	4629      	mov	r1, r5
      }

      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 800f93c:	1a86      	subs	r6, r0, r2

        t.deserialize(data);
        t.data.sec += offset/1000;
 800f93e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
 800f942:	a801      	add	r0, sp, #4
 800f944:	f7ff f9c3 	bl	800ecce <std_msgs::Time::deserialize(unsigned char*)>
        t.data.sec += offset/1000;
 800f948:	fbb6 f2f5 	udiv	r2, r6, r5
 800f94c:	9b02      	ldr	r3, [sp, #8]
 800f94e:	4413      	add	r3, r2
        t.data.nsec += (offset%1000)*1000000UL;
 800f950:	fb05 6212 	mls	r2, r5, r2, r6
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
        t.data.sec += offset/1000;
 800f954:	9302      	str	r3, [sp, #8]
        t.data.nsec += (offset%1000)*1000000UL;
 800f956:	4e11      	ldr	r6, [pc, #68]	; (800f99c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x78>)
 800f958:	9b03      	ldr	r3, [sp, #12]
 800f95a:	fb06 3202 	mla	r2, r6, r2, r3
 800f95e:	9203      	str	r2, [sp, #12]
 800f960:	f7f0 feb8 	bl	80006d4 <millis>
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 800f964:	fbb0 f3f5 	udiv	r3, r0, r5
 800f968:	9a02      	ldr	r2, [sp, #8]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800f96a:	9903      	ldr	r1, [sp, #12]
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 800f96c:	3a01      	subs	r2, #1
 800f96e:	1ad2      	subs	r2, r2, r3
 800f970:	6122      	str	r2, [r4, #16]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800f972:	4a0b      	ldr	r2, [pc, #44]	; (800f9a0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)+0x7c>)
 800f974:	fb05 0013 	mls	r0, r5, r3, r0
 800f978:	440a      	add	r2, r1
 800f97a:	4621      	mov	r1, r4
 800f97c:	fb06 2310 	mls	r3, r6, r0, r2
        normalizeSecNSec(sec_offset, nsec_offset);
 800f980:	f104 0010 	add.w	r0, r4, #16

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800f984:	f841 3f14 	str.w	r3, [r1, #20]!
        normalizeSecNSec(sec_offset, nsec_offset);
 800f988:	f7f5 f88e 	bl	8004aa8 <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 800f98c:	f7f0 fea2 	bl	80006d4 <millis>
        t.deserialize(data);
        t.data.sec += offset/1000;
        t.data.nsec += (offset%1000)*1000000UL;

        this->setNow(t.data);
        last_sync_receive_time = hardware_.time();
 800f990:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
      }
 800f994:	b004      	add	sp, #16
 800f996:	bd70      	pop	{r4, r5, r6, pc}
 800f998:	08012fe8 	.word	0x08012fe8
 800f99c:	000f4240 	.word	0x000f4240
 800f9a0:	3b9aca00 	.word	0x3b9aca00

0800f9a4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>:
      /* This function goes in your loop() function, it handles
       *  serial input and callbacks for subscribers.
       */


      virtual int spinOnce(){
 800f9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	f7f0 fe93 	bl	80006d4 <millis>

        /* restart if timed out */
        uint32_t c_time = hardware_.time();
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 800f9ae:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800f9b2:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	1ac3      	subs	r3, r0, r3
 800f9ba:	4293      	cmp	r3, r2
            configured_ = false;
 800f9bc:	bf84      	itt	hi
 800f9be:	2300      	movhi	r3, #0
 800f9c0:	f884 34f4 	strbhi.w	r3, [r4, #1268]	; 0x4f4
         }

        /* reset if message has timed out */
        if ( mode_ != MODE_FIRST_FF){
 800f9c4:	f8d4 34e0 	ldr.w	r3, [r4, #1248]	; 0x4e0
 800f9c8:	b133      	cbz	r3, 800f9d8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x34>
          if (c_time > last_msg_timeout_time){
 800f9ca:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 800f9ce:	4283      	cmp	r3, r0
            mode_ = MODE_FIRST_FF;
 800f9d0:	bf3c      	itt	cc
 800f9d2:	2300      	movcc	r3, #0
 800f9d4:	f8c4 34e0 	strcc.w	r3, [r4, #1248]	; 0x4e0
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }

    int read(){
      if(USART_CNTIN == USART_CNTOUT)
 800f9d8:	4f74      	ldr	r7, [pc, #464]	; (800fbac <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x208>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800f9da:	f04f 0800 	mov.w	r8, #0
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
              }else{
                if(subscribers[topic_-100])
                  subscribers[topic_-100]->callback( message_in );
 800f9de:	f104 0918 	add.w	r9, r4, #24
 800f9e2:	69fa      	ldr	r2, [r7, #28]
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	f000 80cc 	beq.w	800fb84 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1e0>
        return -1;
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800f9ec:	69bb      	ldr	r3, [r7, #24]
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800f9ee:	f8d4 54e0 	ldr.w	r5, [r4, #1248]	; 0x4e0
 800f9f2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f9f6:	8c1b      	ldrh	r3, [r3, #32]
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800f9f8:	69ba      	ldr	r2, [r7, #24]

    int read(){
      if(USART_CNTIN == USART_CNTOUT)
        return -1;
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800f9fa:	b29b      	uxth	r3, r3
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800f9fc:	3201      	adds	r2, #1
 800f9fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fa02:	61ba      	str	r2, [r7, #24]
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 800fa04:	f8d4 24f0 	ldr.w	r2, [r4, #1264]	; 0x4f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fa08:	2d07      	cmp	r5, #7
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 800fa0a:	441a      	add	r2, r3
 800fa0c:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fa10:	d10f      	bne.n	800fa32 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x8e>
            message_in[index_++] = data;
 800fa12:	f8d4 24ec 	ldr.w	r2, [r4, #1260]	; 0x4ec
 800fa16:	1c51      	adds	r1, r2, #1
 800fa18:	4422      	add	r2, r4
 800fa1a:	f8c4 14ec 	str.w	r1, [r4, #1260]	; 0x4ec
 800fa1e:	7613      	strb	r3, [r2, #24]
            bytes_--;
 800fa20:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 800fa24:	3b01      	subs	r3, #1
 800fa26:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1d9      	bne.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              mode_ = MODE_MSG_CHECKSUM;
 800fa2e:	2308      	movs	r3, #8
 800fa30:	e01a      	b.n	800fa68 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
          }else if( mode_ == MODE_FIRST_FF ){
 800fa32:	b9a5      	cbnz	r5, 800fa5e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xba>
            if(data == 0xff){
 800fa34:	2bff      	cmp	r3, #255	; 0xff
 800fa36:	d107      	bne.n	800fa48 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xa4>
              mode_++;
 800fa38:	2301      	movs	r3, #1
 800fa3a:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 800fa3e:	f106 0314 	add.w	r3, r6, #20
 800fa42:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
 800fa46:	e7cc      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 800fa48:	f7f0 fe44 	bl	80006d4 <millis>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 800fa4c:	1b80      	subs	r0, r0, r6
 800fa4e:	2805      	cmp	r0, #5
 800fa50:	d9c7      	bls.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
 800fa52:	f884 54f4 	strb.w	r5, [r4, #1268]	; 0x4f4
              return -2;
 800fa56:	f06f 0001 	mvn.w	r0, #1
 800fa5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
 800fa5e:	2d01      	cmp	r5, #1
 800fa60:	d10f      	bne.n	800fa82 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xde>
            if(data == PROTOCOL_VER){
 800fa62:	2bfe      	cmp	r3, #254	; 0xfe
 800fa64:	d103      	bne.n	800fa6e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xca>
              mode_++;
 800fa66:	2302      	movs	r3, #2
 800fa68:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 800fa6c:	e7b9      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }else{
              mode_ = MODE_FIRST_FF;
              if (configured_ == false)
 800fa6e:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
            if(data == PROTOCOL_VER){
              mode_++;
            }else{
              mode_ = MODE_FIRST_FF;
 800fa72:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
              if (configured_ == false)
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1b3      	bne.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f7ff fee0 	bl	800f840 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
 800fa80:	e7af      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 800fa82:	2d02      	cmp	r5, #2
 800fa84:	d105      	bne.n	800fa92 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xee>
            bytes_ = data;
 800fa86:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
            index_ = 0;
 800fa8a:	f8c4 84ec 	str.w	r8, [r4, #1260]	; 0x4ec
            mode_++;
 800fa8e:	2203      	movs	r2, #3
 800fa90:	e020      	b.n	800fad4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x130>
            checksum_ = data;               /* first byte for calculating size checksum */
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 800fa92:	2d03      	cmp	r5, #3
 800fa94:	d107      	bne.n	800faa6 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x102>
            bytes_ += data<<8;
 800fa96:	f8d4 24e4 	ldr.w	r2, [r4, #1252]	; 0x4e4
 800fa9a:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800fa9e:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
	    mode_++;
 800faa2:	2304      	movs	r3, #4
 800faa4:	e7e0      	b.n	800fa68 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 800faa6:	2d04      	cmp	r5, #4
 800faa8:	d10f      	bne.n	800faca <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x126>
            if( (checksum_%256) == 255)
 800faaa:	4b41      	ldr	r3, [pc, #260]	; (800fbb0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x20c>)
 800faac:	4013      	ands	r3, r2
 800faae:	2b00      	cmp	r3, #0
 800fab0:	bfbe      	ittt	lt
 800fab2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800fab6:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800faba:	3301      	addlt	r3, #1
 800fabc:	2bff      	cmp	r3, #255	; 0xff
 800fabe:	d101      	bne.n	800fac4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x120>
	      mode_++;
 800fac0:	2305      	movs	r3, #5
 800fac2:	e7d1      	b.n	800fa68 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0xc4>
	    else
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800fac4:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
 800fac8:	e78b      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 800faca:	2d05      	cmp	r5, #5
 800facc:	d107      	bne.n	800fade <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x13a>
            topic_ = data;
 800face:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            mode_++;
 800fad2:	2206      	movs	r2, #6
 800fad4:	f8c4 24e0 	str.w	r2, [r4, #1248]	; 0x4e0
            checksum_ = data;               /* first byte included in checksum */
 800fad8:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
 800fadc:	e781      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 800fade:	2d06      	cmp	r5, #6
 800fae0:	d10b      	bne.n	800fafa <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x156>
            topic_ += data<<8;
 800fae2:	f8d4 24e8 	ldr.w	r2, [r4, #1256]	; 0x4e8
 800fae6:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800faea:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
            mode_ = MODE_MESSAGE;
 800faee:	2307      	movs	r3, #7
 800faf0:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
            if(bytes_ == 0)
 800faf4:	f8d4 34e4 	ldr.w	r3, [r4, #1252]	; 0x4e4
 800faf8:	e797      	b.n	800fa2a <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x86>
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 800fafa:	2d08      	cmp	r5, #8
 800fafc:	f47f af71 	bne.w	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
 800fb00:	4b2b      	ldr	r3, [pc, #172]	; (800fbb0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x20c>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800fb02:	f8c4 84e0 	str.w	r8, [r4, #1248]	; 0x4e0
            if( (checksum_%256) == 255){
 800fb06:	4013      	ands	r3, r2
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	bfbe      	ittt	lt
 800fb0c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800fb10:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800fb14:	3301      	addlt	r3, #1
 800fb16:	2bff      	cmp	r3, #255	; 0xff
 800fb18:	f47f af63 	bne.w	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 800fb1c:	f8d4 34e8 	ldr.w	r3, [r4, #1256]	; 0x4e8
 800fb20:	b96b      	cbnz	r3, 800fb3e <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x19a>
                requestSyncTime();
 800fb22:	4620      	mov	r0, r4
 800fb24:	f7ff fe8c 	bl	800f840 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
                negotiateTopics();
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f7ff fe9d 	bl	800f868 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::negotiateTopics()>
                last_sync_time = c_time;
 800fb2e:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
                last_sync_receive_time = c_time;
 800fb32:	f8c4 64fc 	str.w	r6, [r4, #1276]	; 0x4fc
                return -1;
 800fb36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
              }else if(topic_ == TopicInfo::ID_TIME){
 800fb3e:	2b0a      	cmp	r3, #10
 800fb40:	d104      	bne.n	800fb4c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1a8>
                syncTime(message_in);
 800fb42:	4649      	mov	r1, r9
 800fb44:	4620      	mov	r0, r4
 800fb46:	f7ff feed 	bl	800f924 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::syncTime(unsigned char*)>
 800fb4a:	e74a      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 800fb4c:	2b06      	cmp	r3, #6
 800fb4e:	d108      	bne.n	800fb62 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1be>
                  req_param_resp.deserialize(message_in);
 800fb50:	4649      	mov	r1, r9
 800fb52:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
 800fb56:	f7ff fbe3 	bl	800f320 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>
                  param_recieved= true;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	f884 3504 	strb.w	r3, [r4, #1284]	; 0x504
 800fb60:	e73f      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 800fb62:	2b0b      	cmp	r3, #11
 800fb64:	d102      	bne.n	800fb6c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1c8>
                  configured_ = false;
 800fb66:	f884 84f4 	strb.w	r8, [r4, #1268]	; 0x4f4
 800fb6a:	e73a      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
              }else{
                if(subscribers[topic_-100])
 800fb6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fb70:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800fb74:	2800      	cmp	r0, #0
 800fb76:	f43f af34 	beq.w	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
                  subscribers[topic_-100]->callback( message_in );
 800fb7a:	6803      	ldr	r3, [r0, #0]
 800fb7c:	4649      	mov	r1, r9
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4798      	blx	r3
 800fb82:	e72e      	b.n	800f9e2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x3e>
            }
          }
        }

        /* occasionally sync time */
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 800fb84:	f894 04f4 	ldrb.w	r0, [r4, #1268]	; 0x4f4
 800fb88:	b170      	cbz	r0, 800fba8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x204>
 800fb8a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800fb8e:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 800fb92:	1af3      	subs	r3, r6, r3
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d904      	bls.n	800fba2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()+0x1fe>
          requestSyncTime();
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f7ff fe51 	bl	800f840 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestSyncTime()>
          last_sync_time = c_time;
 800fb9e:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
        }

        return 0;
 800fba2:	2000      	movs	r0, #0
 800fba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
 800fba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbac:	200000bc 	.word	0x200000bc
 800fbb0:	800000ff 	.word	0x800000ff
 800fbb4:	00000000 	.word	0x00000000

0800fbb8 <main>:
ros::Subscriber<std_msgs::UInt8> led_sub("led", &led_cb);

std_msgs::Float32MultiArray str_msg;
ros::Publisher chatter("encoder", &str_msg);

int main(){
 800fbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbbc:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
  /* System Clocks Configuration */
  RCC_Configuration();
 800fbc0:	f7f0 fd8e 	bl	80006e0 <RCC_Configuration>

  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	4852      	ldr	r0, [pc, #328]	; (800fd10 <main+0x158>)
 800fbc8:	f7f2 fb82 	bl	80022d0 <GPIO_PinRemapConfig>
  I2C1_Init();
 800fbcc:	f7f0 fc4c 	bl	8000468 <I2C1_Init>
  SysTick_Init();
 800fbd0:	f7f0 fd56 	bl	8000680 <SysTick_Init>
  DEBUG_Init();
 800fbd4:	f7f0 fc21 	bl	800041a <DEBUG_Init>
  LED_Init();
 800fbd8:	f7f0 fbdc 	bl	8000394 <LED_Init>

  str_msg.data = (float *)malloc(sizeof(float)*4);
 800fbdc:	2010      	movs	r0, #16
 800fbde:	f001 fa67 	bl	80110b0 <malloc>
 800fbe2:	4c4c      	ldr	r4, [pc, #304]	; (800fd14 <main+0x15c>)
  str_msg.data_length = 4;
 800fbe4:	2304      	movs	r3, #4
  I2C1_Init();
  SysTick_Init();
  DEBUG_Init();
  LED_Init();

  str_msg.data = (float *)malloc(sizeof(float)*4);
 800fbe6:	f8c4 044c 	str.w	r0, [r4, #1100]	; 0x44c
        return &hardware_;
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
 800fbea:	f204 4054 	addw	r0, r4, #1108	; 0x454
  str_msg.data_length = 4;
 800fbee:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
 800fbf2:	f7ff fd2b 	bl	800f64c <ArduinoHardware::init()>
 800fbf6:	f604 02c8 	addw	r2, r4, #2248	; 0x8c8
        mode_ = 0;
        bytes_ = 0;
        index_ = 0;
        topic_ = 0;
 800fbfa:	4611      	mov	r1, r2
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
        mode_ = 0;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f8c4 3930 	str.w	r3, [r4, #2352]	; 0x930
        bytes_ = 0;
 800fc02:	f8c4 3934 	str.w	r3, [r4, #2356]	; 0x934
        index_ = 0;
 800fc06:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
        topic_ = 0;
 800fc0a:	f8c4 3938 	str.w	r3, [r4, #2360]	; 0x938

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
 800fc0e:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800fc12:	b940      	cbnz	r0, 800fc26 <main+0x6e>
            subscribers[i] = (Subscriber_*) &s;
 800fc14:	4840      	ldr	r0, [pc, #256]	; (800fd18 <main+0x160>)
 800fc16:	eb04 0183 	add.w	r1, r4, r3, lsl #2
            s.id_ = i+100;
 800fc1a:	3364      	adds	r3, #100	; 0x64
      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
            subscribers[i] = (Subscriber_*) &s;
 800fc1c:	f8c1 08cc 	str.w	r0, [r1, #2252]	; 0x8cc
            s.id_ = i+100;
 800fc20:	f8c4 3984 	str.w	r3, [r4, #2436]	; 0x984
 800fc24:	e002      	b.n	800fc2c <main+0x74>
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800fc26:	3301      	adds	r3, #1
 800fc28:	2b19      	cmp	r3, #25
 800fc2a:	d1f0      	bne.n	800fc0e <main+0x56>
 800fc2c:	2300      	movs	r3, #0
          if(subscribers[i] == 0){ // empty slot
 800fc2e:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800fc32:	b941      	cbnz	r1, 800fc46 <main+0x8e>
            subscribers[i] = (Subscriber_*) &s;
 800fc34:	4939      	ldr	r1, [pc, #228]	; (800fd1c <main+0x164>)
 800fc36:	eb04 0283 	add.w	r2, r4, r3, lsl #2
            s.id_ = i+100;
 800fc3a:	3364      	adds	r3, #100	; 0x64
      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
            subscribers[i] = (Subscriber_*) &s;
 800fc3c:	f8c2 18cc 	str.w	r1, [r2, #2252]	; 0x8cc
            s.id_ = i+100;
 800fc40:	f8c4 39c4 	str.w	r3, [r4, #2500]	; 0x9c4
 800fc44:	e002      	b.n	800fc4c <main+0x94>
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800fc46:	3301      	adds	r3, #1
 800fc48:	2b19      	cmp	r3, #25
 800fc4a:	d1f0      	bne.n	800fc2e <main+0x76>
 800fc4c:	4a34      	ldr	r2, [pc, #208]	; (800fd20 <main+0x168>)
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 800fc4e:	2300      	movs	r3, #0
          if(publishers[i] == 0){ // empty slot
 800fc50:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800fc54:	b961      	cbnz	r1, 800fc70 <main+0xb8>
            publishers[i] = &p;
 800fc56:	4a33      	ldr	r2, [pc, #204]	; (800fd24 <main+0x16c>)
 800fc58:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800fc5c:	f8c1 2868 	str.w	r2, [r1, #2152]	; 0x868
            p.id_ = i+100+MAX_SUBSCRIBERS;
 800fc60:	337d      	adds	r3, #125	; 0x7d
            p.nh_ = this;
 800fc62:	f2a2 528c 	subw	r2, r2, #1420	; 0x58c
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
            publishers[i] = &p;
            p.id_ = i+100+MAX_SUBSCRIBERS;
 800fc66:	f8c4 39e4 	str.w	r3, [r4, #2532]	; 0x9e4
            p.nh_ = this;
 800fc6a:	f8c4 29e8 	str.w	r2, [r4, #2536]	; 0x9e8
 800fc6e:	e002      	b.n	800fc76 <main+0xbe>
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 800fc70:	3301      	adds	r3, #1
 800fc72:	2b19      	cmp	r3, #25
 800fc74:	d1ec      	bne.n	800fc50 <main+0x98>
  nh.subscribe(led_sub);
  nh.advertise(chatter);
  

  float KP;
  if(!nh.getParam("serial_node/KP", &KP, 1)){
 800fc76:	2301      	movs	r3, #1
 800fc78:	aa09      	add	r2, sp, #36	; 0x24
 800fc7a:	492b      	ldr	r1, [pc, #172]	; (800fd28 <main+0x170>)
 800fc7c:	482b      	ldr	r0, [pc, #172]	; (800fd2c <main+0x174>)
 800fc7e:	f7ff fdc5 	bl	800f80c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 800fc82:	b908      	cbnz	r0, 800fc88 <main+0xd0>
    KP = 5000;
 800fc84:	4b2a      	ldr	r3, [pc, #168]	; (800fd30 <main+0x178>)
 800fc86:	9309      	str	r3, [sp, #36]	; 0x24
  }
  float KI;
  if(!nh.getParam("serial_node/KI", &KI, 1)){
 800fc88:	2301      	movs	r3, #1
 800fc8a:	aa0a      	add	r2, sp, #40	; 0x28
 800fc8c:	4929      	ldr	r1, [pc, #164]	; (800fd34 <main+0x17c>)
 800fc8e:	4827      	ldr	r0, [pc, #156]	; (800fd2c <main+0x174>)
 800fc90:	f7ff fdbc 	bl	800f80c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 800fc94:	b908      	cbnz	r0, 800fc9a <main+0xe2>
    KI = 5000;
 800fc96:	4b26      	ldr	r3, [pc, #152]	; (800fd30 <main+0x178>)
 800fc98:	930a      	str	r3, [sp, #40]	; 0x28
  }
  float KD;
  if(!nh.getParam("serial_node/KD", &KD, 1)){
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	aa0b      	add	r2, sp, #44	; 0x2c
 800fc9e:	4926      	ldr	r1, [pc, #152]	; (800fd38 <main+0x180>)
 800fca0:	4822      	ldr	r0, [pc, #136]	; (800fd2c <main+0x174>)
 800fca2:	f7ff fdb3 	bl	800f80c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 800fca6:	b910      	cbnz	r0, 800fcae <main+0xf6>
    KD = 4;
 800fca8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800fcac:	930b      	str	r3, [sp, #44]	; 0x2c
  }
  float integralSaturation;
  if(!nh.getParam("serial_node/integralSaturation", &integralSaturation, 1)){
 800fcae:	2301      	movs	r3, #1
 800fcb0:	aa0c      	add	r2, sp, #48	; 0x30
 800fcb2:	4922      	ldr	r1, [pc, #136]	; (800fd3c <main+0x184>)
 800fcb4:	481d      	ldr	r0, [pc, #116]	; (800fd2c <main+0x174>)
 800fcb6:	f7ff fda9 	bl	800f80c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 800fcba:	b908      	cbnz	r0, 800fcc0 <main+0x108>
    integralSaturation = 10000;
 800fcbc:	4b20      	ldr	r3, [pc, #128]	; (800fd40 <main+0x188>)
 800fcbe:	930c      	str	r3, [sp, #48]	; 0x30
  }
  float wheelRadius;
  if(!nh.getParam("serial_node/wheelRadius", &wheelRadius, 1)){
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	aa0d      	add	r2, sp, #52	; 0x34
 800fcc4:	491f      	ldr	r1, [pc, #124]	; (800fd44 <main+0x18c>)
 800fcc6:	4819      	ldr	r0, [pc, #100]	; (800fd2c <main+0x174>)
 800fcc8:	f7ff fda0 	bl	800f80c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 800fccc:	b908      	cbnz	r0, 800fcd2 <main+0x11a>
    wheelRadius = 0.04;
 800fcce:	4b1e      	ldr	r3, [pc, #120]	; (800fd48 <main+0x190>)
 800fcd0:	930d      	str	r3, [sp, #52]	; 0x34
  }

  if(!nh.getParam("serial_node/wheelSeperation", &wheelSeperation, 1)){
 800fcd2:	4c10      	ldr	r4, [pc, #64]	; (800fd14 <main+0x15c>)
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	f504 621f 	add.w	r2, r4, #2544	; 0x9f0
 800fcda:	491c      	ldr	r1, [pc, #112]	; (800fd4c <main+0x194>)
 800fcdc:	f504 608a 	add.w	r0, r4, #1104	; 0x450
 800fce0:	f7ff fd94 	bl	800f80c <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::getParam(char const*, float*, int)>
 800fce4:	b910      	cbnz	r0, 800fcec <main+0x134>
    wheelSeperation = 0.3;
 800fce6:	4b1a      	ldr	r3, [pc, #104]	; (800fd50 <main+0x198>)
 800fce8:	f8c4 39f0 	str.w	r3, [r4, #2544]	; 0x9f0
        return true;
      }

    public:
      bool getParam(const char* name, int* param, int length =1){
        if (requestParam(name) ){
 800fcec:	4c09      	ldr	r4, [pc, #36]	; (800fd14 <main+0x15c>)
 800fcee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fcf2:	4918      	ldr	r1, [pc, #96]	; (800fd54 <main+0x19c>)
 800fcf4:	f504 608a 	add.w	r0, r4, #1104	; 0x450
 800fcf8:	f7ff fd66 	bl	800f7c8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::requestParam(char const*, int)>
 800fcfc:	b360      	cbz	r0, 800fd58 <main+0x1a0>
          if (length == req_param_resp.ints_length){
 800fcfe:	f894 395c 	ldrb.w	r3, [r4, #2396]	; 0x95c
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d128      	bne.n	800fd58 <main+0x1a0>
            //copy it over
            for(int i=0; i<length; i++)
              param[i] = req_param_resp.ints[i];
 800fd06:	f8d4 3964 	ldr.w	r3, [r4, #2404]	; 0x964
 800fd0a:	681e      	ldr	r6, [r3, #0]
 800fd0c:	e025      	b.n	800fd5a <main+0x1a2>
 800fd0e:	bf00      	nop
 800fd10:	00300200 	.word	0x00300200
 800fd14:	200000bc 	.word	0x200000bc
 800fd18:	20000a3c 	.word	0x20000a3c
 800fd1c:	20000a7c 	.word	0x20000a7c
 800fd20:	20000920 	.word	0x20000920
 800fd24:	20000a98 	.word	0x20000a98
 800fd28:	08013393 	.word	0x08013393
 800fd2c:	2000050c 	.word	0x2000050c
 800fd30:	459c4000 	.word	0x459c4000
 800fd34:	080133a2 	.word	0x080133a2
 800fd38:	080133b1 	.word	0x080133b1
 800fd3c:	080133c0 	.word	0x080133c0
 800fd40:	461c4000 	.word	0x461c4000
 800fd44:	080133df 	.word	0x080133df
 800fd48:	3d23d70a 	.word	0x3d23d70a
 800fd4c:	080133f7 	.word	0x080133f7
 800fd50:	3e99999a 	.word	0x3e99999a
 800fd54:	08013413 	.word	0x08013413
  }

  int enc_timeout;
  if(!nh.getParam("serial_node/encoderTimeout", &enc_timeout, 1)){
    enc_timeout = 10;
 800fd58:	260a      	movs	r6, #10
  }

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 800fd5a:	2704      	movs	r7, #4
  int enc_timeout;
  if(!nh.getParam("serial_node/encoderTimeout", &enc_timeout, 1)){
    enc_timeout = 10;
  }

  delay(1000);
 800fd5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fd60:	f7f0 fcae 	bl	80006c0 <delay>

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 800fd64:	4ba2      	ldr	r3, [pc, #648]	; (800fff0 <main+0x438>)
 800fd66:	4aa3      	ldr	r2, [pc, #652]	; (800fff4 <main+0x43c>)
 800fd68:	2101      	movs	r1, #1
 800fd6a:	9700      	str	r7, [sp, #0]
 800fd6c:	a80e      	add	r0, sp, #56	; 0x38
 800fd6e:	f7f4 fe22 	bl	80049b6 <motorSettings::motorSettings(int, char*, TIM_TypeDef*, int)>
  SL.m_ServoPin = GPIO_Pin_9;
 800fd72:	f44f 7300 	mov.w	r3, #512	; 0x200
  SL.m_ServoPort = GPIOB;
 800fd76:	4ca0      	ldr	r4, [pc, #640]	; (800fff8 <main+0x440>)
  }

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
 800fd78:	9314      	str	r3, [sp, #80]	; 0x50
  SL.m_ServoPort = GPIOB;
  SL.encoder_timeout = enc_timeout;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 800fd7a:	2303      	movs	r3, #3
  SR.m_ServoPin = GPIO_Pin_8;
 800fd7c:	f44f 7980 	mov.w	r9, #256	; 0x100
  SR.m_ServoPort = GPIOB;
  SR.encoder_timeout = enc_timeout;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 800fd80:	f04f 0801 	mov.w	r8, #1
  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;
  SL.encoder_timeout = enc_timeout;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 800fd84:	9300      	str	r3, [sp, #0]
 800fd86:	4a9d      	ldr	r2, [pc, #628]	; (800fffc <main+0x444>)
 800fd88:	4b99      	ldr	r3, [pc, #612]	; (800fff0 <main+0x438>)
 800fd8a:	2101      	movs	r1, #1
 800fd8c:	a827      	add	r0, sp, #156	; 0x9c

  delay(1000);

  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;
 800fd8e:	9415      	str	r4, [sp, #84]	; 0x54
  SL.encoder_timeout = enc_timeout;
 800fd90:	9621      	str	r6, [sp, #132]	; 0x84

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 800fd92:	f7f4 fe10 	bl	80049b6 <motorSettings::motorSettings(int, char*, TIM_TypeDef*, int)>
  SR.m_ServoPin = GPIO_Pin_8;
  SR.m_ServoPort = GPIOB;
  SR.encoder_timeout = enc_timeout;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 800fd96:	f8cd 8000 	str.w	r8, [sp]
 800fd9a:	4b99      	ldr	r3, [pc, #612]	; (8010000 <main+0x448>)
 800fd9c:	4a99      	ldr	r2, [pc, #612]	; (8010004 <main+0x44c>)
 800fd9e:	2102      	movs	r1, #2
 800fda0:	eb0d 0009 	add.w	r0, sp, r9
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
 800fda4:	4d98      	ldr	r5, [pc, #608]	; (8010008 <main+0x450>)
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;
  SL.encoder_timeout = enc_timeout;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
  SR.m_ServoPin = GPIO_Pin_8;
 800fda6:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
  SR.m_ServoPort = GPIOB;
 800fdaa:	942e      	str	r4, [sp, #184]	; 0xb8
  SR.encoder_timeout = enc_timeout;
 800fdac:	963a      	str	r6, [sp, #232]	; 0xe8

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 800fdae:	f7f4 fe02 	bl	80049b6 <motorSettings::motorSettings(int, char*, TIM_TypeDef*, int)>
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
 800fdb2:	4a96      	ldr	r2, [pc, #600]	; (801000c <main+0x454>)
 800fdb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdb8:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 800fdbc:	eb0d 0009 	add.w	r0, sp, r9
 800fdc0:	f8cd 9014 	str.w	r9, [sp, #20]
 800fdc4:	9202      	str	r2, [sp, #8]
 800fdc6:	e88d 0104 	stmia.w	sp, {r2, r8}
 800fdca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fdce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fdd2:	9506      	str	r5, [sp, #24]
 800fdd4:	9504      	str	r5, [sp, #16]
 800fdd6:	f7f4 fdf4 	bl	80049c2 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FR.encoderAddr = (0x10 | 0x08);
 800fdda:	2318      	movs	r3, #24
 800fddc:	f8ad 3148 	strh.w	r3, [sp, #328]	; 0x148
  FR.setRegulator(KP,KI,KD,integralSaturation);
 800fde0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fde2:	eb0d 0009 	add.w	r0, sp, r9
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fdea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fdee:	f7f4 fdfa 	bl	80049e6 <motorSettings::setRegulator(float, float, float, float)>
  FR.wheelRadius = wheelRadius;
 800fdf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  FR.encoder_timeout = enc_timeout;

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 800fdf4:	4a86      	ldr	r2, [pc, #536]	; (8010010 <main+0x458>)
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
  FR.encoderAddr = (0x10 | 0x08);
  FR.setRegulator(KP,KI,KD,integralSaturation);
  FR.wheelRadius = wheelRadius;
 800fdf6:	9358      	str	r3, [sp, #352]	; 0x160
  FR.encoder_timeout = enc_timeout;

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 800fdf8:	2102      	movs	r1, #2
 800fdfa:	4b86      	ldr	r3, [pc, #536]	; (8010014 <main+0x45c>)
 800fdfc:	9700      	str	r7, [sp, #0]
 800fdfe:	a859      	add	r0, sp, #356	; 0x164
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
 800fe00:	f04f 0902 	mov.w	r9, #2
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
  FR.encoderAddr = (0x10 | 0x08);
  FR.setRegulator(KP,KI,KD,integralSaturation);
  FR.wheelRadius = wheelRadius;
  FR.encoder_timeout = enc_timeout;
 800fe04:	9653      	str	r6, [sp, #332]	; 0x14c

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
 800fe06:	f04f 0a10 	mov.w	sl, #16
  FR.encoderAddr = (0x10 | 0x08);
  FR.setRegulator(KP,KI,KD,integralSaturation);
  FR.wheelRadius = wheelRadius;
  FR.encoder_timeout = enc_timeout;

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 800fe0a:	f7f4 fdd4 	bl	80049b6 <motorSettings::motorSettings(int, char*, TIM_TypeDef*, int)>
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
 800fe0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe12:	4622      	mov	r2, r4
 800fe14:	9406      	str	r4, [sp, #24]
 800fe16:	9404      	str	r4, [sp, #16]
 800fe18:	9303      	str	r3, [sp, #12]
 800fe1a:	4639      	mov	r1, r7
 800fe1c:	2320      	movs	r3, #32
 800fe1e:	a859      	add	r0, sp, #356	; 0x164
 800fe20:	f8cd 9014 	str.w	r9, [sp, #20]
 800fe24:	9502      	str	r5, [sp, #8]
 800fe26:	e88d 0420 	stmia.w	sp, {r5, sl}
 800fe2a:	f7f4 fdca 	bl	80049c2 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FL.encoderAddr = (0x10);
  FL.setRegulator(KP,KI,KD,integralSaturation);
 800fe2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe38:	a859      	add	r0, sp, #356	; 0x164

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
 800fe3a:	f8ad a1ac 	strh.w	sl, [sp, #428]	; 0x1ac
  FL.setRegulator(KP,KI,KD,integralSaturation);
 800fe3e:	f7f4 fdd2 	bl	80049e6 <motorSettings::setRegulator(float, float, float, float)>
  FL.wheelRadius = wheelRadius;
 800fe42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  FL.encoder_timeout = enc_timeout;

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 800fe44:	4a74      	ldr	r2, [pc, #464]	; (8010018 <main+0x460>)
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
  FL.setRegulator(KP,KI,KD,integralSaturation);
  FL.wheelRadius = wheelRadius;
 800fe46:	9371      	str	r3, [sp, #452]	; 0x1c4
  FL.encoder_timeout = enc_timeout;

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 800fe48:	4649      	mov	r1, r9
 800fe4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe4e:	9700      	str	r7, [sp, #0]
 800fe50:	a872      	add	r0, sp, #456	; 0x1c8
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
  FL.setRegulator(KP,KI,KD,integralSaturation);
  FL.wheelRadius = wheelRadius;
  FL.encoder_timeout = enc_timeout;
 800fe52:	966c      	str	r6, [sp, #432]	; 0x1b0

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 800fe54:	f7f4 fdaf 	bl	80049b6 <motorSettings::motorSettings(int, char*, TIM_TypeDef*, int)>
  RL.setDCPins(GPIO_Pin_11, GPIOB, GPIO_Pin_12, GPIOB,
    GPIO_Pin_13, GPIOB, GPIO_Pin_14, GPIOB,
    GPIO_Pin_3, GPIOA);
 800fe58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fe5c:	2608      	movs	r6, #8
 800fe5e:	9303      	str	r3, [sp, #12]
 800fe60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe64:	4622      	mov	r2, r4
 800fe66:	9404      	str	r4, [sp, #16]
 800fe68:	9402      	str	r4, [sp, #8]
 800fe6a:	9301      	str	r3, [sp, #4]
 800fe6c:	9400      	str	r4, [sp, #0]
 800fe6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fe72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fe76:	a872      	add	r0, sp, #456	; 0x1c8
 800fe78:	9506      	str	r5, [sp, #24]
 800fe7a:	9605      	str	r6, [sp, #20]
 800fe7c:	f7f4 fda1 	bl	80049c2 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RL.encoderAddr = (0x10 | 0x04);
 800fe80:	2314      	movs	r3, #20
 800fe82:	f8ad 3210 	strh.w	r3, [sp, #528]	; 0x210
  RL.setRegulator(KP,KI,KD,integralSaturation);
 800fe86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe8a:	9300      	str	r3, [sp, #0]
 800fe8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe90:	a872      	add	r0, sp, #456	; 0x1c8
 800fe92:	f7f4 fda8 	bl	80049e6 <motorSettings::setRegulator(float, float, float, float)>
  RL.wheelRadius = wheelRadius;
 800fe96:	9b0d      	ldr	r3, [sp, #52]	; 0x34

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 800fe98:	4a60      	ldr	r2, [pc, #384]	; (801001c <main+0x464>)
  RL.setDCPins(GPIO_Pin_11, GPIOB, GPIO_Pin_12, GPIOB,
    GPIO_Pin_13, GPIOB, GPIO_Pin_14, GPIOB,
    GPIO_Pin_3, GPIOA);
  RL.encoderAddr = (0x10 | 0x04);
  RL.setRegulator(KP,KI,KD,integralSaturation);
  RL.wheelRadius = wheelRadius;
 800fe9a:	938a      	str	r3, [sp, #552]	; 0x228

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 800fe9c:	4649      	mov	r1, r9
 800fe9e:	4b58      	ldr	r3, [pc, #352]	; (8010000 <main+0x448>)
 800fea0:	9700      	str	r7, [sp, #0]
 800fea2:	a88b      	add	r0, sp, #556	; 0x22c
 800fea4:	f7f4 fd87 	bl	80049b6 <motorSettings::motorSettings(int, char*, TIM_TypeDef*, int)>
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
 800fea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800feac:	4622      	mov	r2, r4
 800feae:	9305      	str	r3, [sp, #20]
 800feb0:	9404      	str	r4, [sp, #16]
 800feb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800feb6:	4641      	mov	r1, r8
 800feb8:	a88b      	add	r0, sp, #556	; 0x22c
 800feba:	9506      	str	r5, [sp, #24]
 800febc:	9603      	str	r6, [sp, #12]
 800febe:	9502      	str	r5, [sp, #8]
 800fec0:	e88d 0120 	stmia.w	sp, {r5, r8}
 800fec4:	f7f4 fd7d 	bl	80049c2 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
 800fec8:	231c      	movs	r3, #28
 800feca:	f8ad 3274 	strh.w	r3, [sp, #628]	; 0x274
  RR.setRegulator(KP,KI,KD,integralSaturation);
 800fece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fed8:	a88b      	add	r0, sp, #556	; 0x22c
 800feda:	f7f4 fd84 	bl	80049e6 <motorSettings::setRegulator(float, float, float, float)>
  RR.wheelRadius = wheelRadius;
 800fede:	9b0d      	ldr	r3, [sp, #52]	; 0x34

  char error[150];
  servo_left = motor::createMotor(&SL);
 800fee0:	a80e      	add	r0, sp, #56	; 0x38
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
  RR.setRegulator(KP,KI,KD,integralSaturation);
  RR.wheelRadius = wheelRadius;
 800fee2:	93a3      	str	r3, [sp, #652]	; 0x28c

  char error[150];
  servo_left = motor::createMotor(&SL);
 800fee4:	f7f4 fa10 	bl	8004308 <motor::createMotor(motorSettings*)>
 800fee8:	4c4d      	ldr	r4, [pc, #308]	; (8010020 <main+0x468>)
  if(!servo_left->motorInit()){
 800feea:	6803      	ldr	r3, [r0, #0]
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
  RR.setRegulator(KP,KI,KD,integralSaturation);
  RR.wheelRadius = wheelRadius;

  char error[150];
  servo_left = motor::createMotor(&SL);
 800feec:	6120      	str	r0, [r4, #16]
  if(!servo_left->motorInit()){
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	4798      	blx	r3
 800fef2:	b968      	cbnz	r0, 800ff10 <main+0x358>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
 800fef4:	6920      	ldr	r0, [r4, #16]
 800fef6:	6803      	ldr	r3, [r0, #0]
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	4798      	blx	r3
 800fefc:	4949      	ldr	r1, [pc, #292]	; (8010024 <main+0x46c>)
 800fefe:	4602      	mov	r2, r0
 800ff00:	a8a4      	add	r0, sp, #656	; 0x290
 800ff02:	f001 fa87 	bl	8011414 <siprintf>
    nh.logerror(error);
 800ff06:	a9a4      	add	r1, sp, #656	; 0x290
 800ff08:	f504 608a 	add.w	r0, r4, #1104	; 0x450
 800ff0c:	f7ff fbe8 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  servo_right = motor::createMotor(&SR);
 800ff10:	a827      	add	r0, sp, #156	; 0x9c
 800ff12:	f7f4 f9f9 	bl	8004308 <motor::createMotor(motorSettings*)>
  if(!servo_right->motorInit()){
 800ff16:	6803      	ldr	r3, [r0, #0]
  if(!servo_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
    nh.logerror(error);
  }

  servo_right = motor::createMotor(&SR);
 800ff18:	6160      	str	r0, [r4, #20]
  if(!servo_right->motorInit()){
 800ff1a:	68db      	ldr	r3, [r3, #12]
  if(!servo_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
    nh.logerror(error);
  }

  servo_right = motor::createMotor(&SR);
 800ff1c:	4d40      	ldr	r5, [pc, #256]	; (8010020 <main+0x468>)
  if(!servo_right->motorInit()){
 800ff1e:	4798      	blx	r3
 800ff20:	b968      	cbnz	r0, 800ff3e <main+0x386>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
 800ff22:	6968      	ldr	r0, [r5, #20]
 800ff24:	6803      	ldr	r3, [r0, #0]
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	4798      	blx	r3
 800ff2a:	493e      	ldr	r1, [pc, #248]	; (8010024 <main+0x46c>)
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	a8a4      	add	r0, sp, #656	; 0x290
 800ff30:	f001 fa70 	bl	8011414 <siprintf>
    nh.logerror(error);
 800ff34:	a9a4      	add	r1, sp, #656	; 0x290
 800ff36:	f505 608a 	add.w	r0, r5, #1104	; 0x450
 800ff3a:	f7ff fbd1 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  front_left = motor::createMotor(&FL);
 800ff3e:	a859      	add	r0, sp, #356	; 0x164
 800ff40:	f7f4 f9e2 	bl	8004308 <motor::createMotor(motorSettings*)>
  if(!front_left->motorInit()){
 800ff44:	6803      	ldr	r3, [r0, #0]
  if(!servo_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
    nh.logerror(error);
  }

  front_left = motor::createMotor(&FL);
 800ff46:	6060      	str	r0, [r4, #4]
  if(!front_left->motorInit()){
 800ff48:	68db      	ldr	r3, [r3, #12]
  if(!servo_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
    nh.logerror(error);
  }

  front_left = motor::createMotor(&FL);
 800ff4a:	4d35      	ldr	r5, [pc, #212]	; (8010020 <main+0x468>)
  if(!front_left->motorInit()){
 800ff4c:	4798      	blx	r3
 800ff4e:	b968      	cbnz	r0, 800ff6c <main+0x3b4>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
 800ff50:	6868      	ldr	r0, [r5, #4]
 800ff52:	6803      	ldr	r3, [r0, #0]
 800ff54:	691b      	ldr	r3, [r3, #16]
 800ff56:	4798      	blx	r3
 800ff58:	4932      	ldr	r1, [pc, #200]	; (8010024 <main+0x46c>)
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	a8a4      	add	r0, sp, #656	; 0x290
 800ff5e:	f001 fa59 	bl	8011414 <siprintf>
    nh.logerror(error);
 800ff62:	a9a4      	add	r1, sp, #656	; 0x290
 800ff64:	f505 608a 	add.w	r0, r5, #1104	; 0x450
 800ff68:	f7ff fbba 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  front_right = motor::createMotor(&FR);
 800ff6c:	a840      	add	r0, sp, #256	; 0x100
 800ff6e:	f7f4 f9cb 	bl	8004308 <motor::createMotor(motorSettings*)>
  if(!front_right->motorInit()){
 800ff72:	6803      	ldr	r3, [r0, #0]
  if(!front_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
    nh.logerror(error);
  }

  front_right = motor::createMotor(&FR);
 800ff74:	6020      	str	r0, [r4, #0]
  if(!front_right->motorInit()){
 800ff76:	68db      	ldr	r3, [r3, #12]
  if(!front_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
    nh.logerror(error);
  }

  front_right = motor::createMotor(&FR);
 800ff78:	4d29      	ldr	r5, [pc, #164]	; (8010020 <main+0x468>)
  if(!front_right->motorInit()){
 800ff7a:	4798      	blx	r3
 800ff7c:	b968      	cbnz	r0, 800ff9a <main+0x3e2>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
 800ff7e:	6828      	ldr	r0, [r5, #0]
 800ff80:	6803      	ldr	r3, [r0, #0]
 800ff82:	691b      	ldr	r3, [r3, #16]
 800ff84:	4798      	blx	r3
 800ff86:	4927      	ldr	r1, [pc, #156]	; (8010024 <main+0x46c>)
 800ff88:	4602      	mov	r2, r0
 800ff8a:	a8a4      	add	r0, sp, #656	; 0x290
 800ff8c:	f001 fa42 	bl	8011414 <siprintf>
    nh.logerror(error);
 800ff90:	a9a4      	add	r1, sp, #656	; 0x290
 800ff92:	f505 608a 	add.w	r0, r5, #1104	; 0x450
 800ff96:	f7ff fba3 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  rear_left = motor::createMotor(&RL);
 800ff9a:	a872      	add	r0, sp, #456	; 0x1c8
 800ff9c:	f7f4 f9b4 	bl	8004308 <motor::createMotor(motorSettings*)>
  if(!rear_left->motorInit()){
 800ffa0:	6803      	ldr	r3, [r0, #0]
  if(!front_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
    nh.logerror(error);
  }

  rear_left = motor::createMotor(&RL);
 800ffa2:	60e0      	str	r0, [r4, #12]
  if(!rear_left->motorInit()){
 800ffa4:	68db      	ldr	r3, [r3, #12]
  if(!front_right->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
    nh.logerror(error);
  }

  rear_left = motor::createMotor(&RL);
 800ffa6:	4d1e      	ldr	r5, [pc, #120]	; (8010020 <main+0x468>)
  if(!rear_left->motorInit()){
 800ffa8:	4798      	blx	r3
 800ffaa:	b968      	cbnz	r0, 800ffc8 <main+0x410>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
 800ffac:	68e8      	ldr	r0, [r5, #12]
 800ffae:	6803      	ldr	r3, [r0, #0]
 800ffb0:	691b      	ldr	r3, [r3, #16]
 800ffb2:	4798      	blx	r3
 800ffb4:	491b      	ldr	r1, [pc, #108]	; (8010024 <main+0x46c>)
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	a8a4      	add	r0, sp, #656	; 0x290
 800ffba:	f001 fa2b 	bl	8011414 <siprintf>
    nh.logerror(error);
 800ffbe:	a9a4      	add	r1, sp, #656	; 0x290
 800ffc0:	f505 608a 	add.w	r0, r5, #1104	; 0x450
 800ffc4:	f7ff fb8c 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  rear_right = motor::createMotor(&RR);
 800ffc8:	a88b      	add	r0, sp, #556	; 0x22c
 800ffca:	f7f4 f99d 	bl	8004308 <motor::createMotor(motorSettings*)>
  if(!rear_right->motorInit()){
 800ffce:	6803      	ldr	r3, [r0, #0]
  if(!rear_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
    nh.logerror(error);
  }

  rear_right = motor::createMotor(&RR);
 800ffd0:	60a0      	str	r0, [r4, #8]
  if(!rear_right->motorInit()){
 800ffd2:	68db      	ldr	r3, [r3, #12]
  if(!rear_left->motorInit()){
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
    nh.logerror(error);
  }

  rear_right = motor::createMotor(&RR);
 800ffd4:	4d12      	ldr	r5, [pc, #72]	; (8010020 <main+0x468>)
  if(!rear_right->motorInit()){
 800ffd6:	4798      	blx	r3
 800ffd8:	bb50      	cbnz	r0, 8010030 <main+0x478>
    sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_right->motorName());
 800ffda:	68a8      	ldr	r0, [r5, #8]
 800ffdc:	6803      	ldr	r3, [r0, #0]
 800ffde:	691b      	ldr	r3, [r3, #16]
 800ffe0:	4798      	blx	r3
 800ffe2:	4910      	ldr	r1, [pc, #64]	; (8010024 <main+0x46c>)
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	a8a4      	add	r0, sp, #656	; 0x290
 800ffe8:	f001 fa14 	bl	8011414 <siprintf>
    nh.logerror(error);
 800ffec:	a9a4      	add	r1, sp, #656	; 0x290
 800ffee:	e01b      	b.n	8010028 <main+0x470>
 800fff0:	40000800 	.word	0x40000800
 800fff4:	0801342e 	.word	0x0801342e
 800fff8:	40010c00 	.word	0x40010c00
 800fffc:	08013439 	.word	0x08013439
 8010000:	40012c00 	.word	0x40012c00
 8010004:	08013445 	.word	0x08013445
 8010008:	40010800 	.word	0x40010800
 801000c:	40011000 	.word	0x40011000
 8010010:	08013451 	.word	0x08013451
 8010014:	40000400 	.word	0x40000400
 8010018:	0801345c 	.word	0x0801345c
 801001c:	08013466 	.word	0x08013466
 8010020:	200000bc 	.word	0x200000bc
 8010024:	08013471 	.word	0x08013471
 8010028:	f505 608a 	add.w	r0, r5, #1104	; 0x450
 801002c:	f7ff fb58 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
  }

  

  
  led_set(0);
 8010030:	2000      	movs	r0, #0
 8010032:	f7f0 f9e7 	bl	8000404 <led_set>

  servo_left->setReference(0);
 8010036:	6920      	ldr	r0, [r4, #16]
 8010038:	2100      	movs	r1, #0
 801003a:	6803      	ldr	r3, [r0, #0]
  servo_right->setReference(0);
  front_right->setReference(0);
  front_left->setReference(0);
  rear_right->setReference(0);
  rear_left->setReference(0);
 801003c:	2600      	movs	r6, #0
  

  
  led_set(0);

  servo_left->setReference(0);
 801003e:	695b      	ldr	r3, [r3, #20]
 8010040:	4798      	blx	r3
  servo_right->setReference(0);
 8010042:	6960      	ldr	r0, [r4, #20]
 8010044:	2100      	movs	r1, #0
 8010046:	6803      	ldr	r3, [r0, #0]
 8010048:	695b      	ldr	r3, [r3, #20]
 801004a:	4798      	blx	r3
  front_right->setReference(0);
 801004c:	6820      	ldr	r0, [r4, #0]
 801004e:	2100      	movs	r1, #0
 8010050:	6803      	ldr	r3, [r0, #0]
 8010052:	695b      	ldr	r3, [r3, #20]
 8010054:	4798      	blx	r3
  front_left->setReference(0);
 8010056:	6860      	ldr	r0, [r4, #4]
 8010058:	2100      	movs	r1, #0
 801005a:	6803      	ldr	r3, [r0, #0]
 801005c:	695b      	ldr	r3, [r3, #20]
 801005e:	4798      	blx	r3
  rear_right->setReference(0);
 8010060:	68a0      	ldr	r0, [r4, #8]
 8010062:	2100      	movs	r1, #0
 8010064:	6803      	ldr	r3, [r0, #0]
 8010066:	695b      	ldr	r3, [r3, #20]
 8010068:	4798      	blx	r3
  rear_left->setReference(0);
 801006a:	68e0      	ldr	r0, [r4, #12]
 801006c:	2100      	movs	r1, #0
 801006e:	6803      	ldr	r3, [r0, #0]
 8010070:	695b      	ldr	r3, [r3, #20]
 8010072:	4798      	blx	r3
  int cnt = 0;
  float start_time;
  float dt = 0.02;

  while (1){
    start_time = ((int)millis()) / 1000.0;
 8010074:	f7f0 fb2e 	bl	80006d4 <millis>
 8010078:	f7f4 fea2 	bl	8004dc0 <__aeabi_i2d>
 801007c:	4b42      	ldr	r3, [pc, #264]	; (8010188 <main+0x5d0>)
 801007e:	2200      	movs	r2, #0
 8010080:	f7f5 f82e 	bl	80050e0 <__aeabi_ddiv>
 8010084:	f7f5 f9c4 	bl	8005410 <__aeabi_d2f>
    connected = nh.connected();
    if(cnt++%5==0)
 8010088:	2305      	movs	r3, #5
 801008a:	fb96 f3f3 	sdiv	r3, r6, r3
 801008e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010092:	429e      	cmp	r6, r3
  int cnt = 0;
  float start_time;
  float dt = 0.02;

  while (1){
    start_time = ((int)millis()) / 1000.0;
 8010094:	4680      	mov	r8, r0
      }


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
 8010096:	f894 5944 	ldrb.w	r5, [r4, #2372]	; 0x944
    connected = nh.connected();
    if(cnt++%5==0)
 801009a:	f106 0701 	add.w	r7, r6, #1
 801009e:	d101      	bne.n	80100a4 <main+0x4ec>
      debug_toggle();
 80100a0:	f7f0 f9ce 	bl	8000440 <debug_toggle>

        
    servo_left->update(0.1, connected);
 80100a4:	6920      	ldr	r0, [r4, #16]
 80100a6:	462a      	mov	r2, r5
 80100a8:	6803      	ldr	r3, [r0, #0]
 80100aa:	4938      	ldr	r1, [pc, #224]	; (801018c <main+0x5d4>)
 80100ac:	69db      	ldr	r3, [r3, #28]
 80100ae:	4798      	blx	r3
    servo_right->update(0.1, connected);
 80100b0:	6960      	ldr	r0, [r4, #20]
 80100b2:	462a      	mov	r2, r5
 80100b4:	6803      	ldr	r3, [r0, #0]
 80100b6:	4935      	ldr	r1, [pc, #212]	; (801018c <main+0x5d4>)
 80100b8:	69db      	ldr	r3, [r3, #28]
 80100ba:	4798      	blx	r3
    str_msg.data[0] = front_right->update(0.1, connected);
 80100bc:	6820      	ldr	r0, [r4, #0]
 80100be:	462a      	mov	r2, r5
 80100c0:	6803      	ldr	r3, [r0, #0]
 80100c2:	4932      	ldr	r1, [pc, #200]	; (801018c <main+0x5d4>)
 80100c4:	69db      	ldr	r3, [r3, #28]
 80100c6:	f8d4 644c 	ldr.w	r6, [r4, #1100]	; 0x44c
 80100ca:	4798      	blx	r3
 80100cc:	6030      	str	r0, [r6, #0]
    str_msg.data[1] = front_left->update(0.1, connected);
 80100ce:	6860      	ldr	r0, [r4, #4]
 80100d0:	462a      	mov	r2, r5
 80100d2:	6803      	ldr	r3, [r0, #0]
 80100d4:	492d      	ldr	r1, [pc, #180]	; (801018c <main+0x5d4>)
 80100d6:	69db      	ldr	r3, [r3, #28]
 80100d8:	f8d4 644c 	ldr.w	r6, [r4, #1100]	; 0x44c
 80100dc:	4798      	blx	r3
 80100de:	6070      	str	r0, [r6, #4]
    str_msg.data[2] = rear_left->update(0.1, connected);
 80100e0:	68e0      	ldr	r0, [r4, #12]
 80100e2:	462a      	mov	r2, r5
 80100e4:	6803      	ldr	r3, [r0, #0]
 80100e6:	4929      	ldr	r1, [pc, #164]	; (801018c <main+0x5d4>)
 80100e8:	69db      	ldr	r3, [r3, #28]
 80100ea:	f8d4 644c 	ldr.w	r6, [r4, #1100]	; 0x44c
 80100ee:	4798      	blx	r3
 80100f0:	60b0      	str	r0, [r6, #8]
    str_msg.data[3] = rear_right->update(0.1, connected);
 80100f2:	68a0      	ldr	r0, [r4, #8]
 80100f4:	462a      	mov	r2, r5
 80100f6:	6803      	ldr	r3, [r0, #0]
 80100f8:	4924      	ldr	r1, [pc, #144]	; (801018c <main+0x5d4>)
 80100fa:	69db      	ldr	r3, [r3, #28]
 80100fc:	f8d4 644c 	ldr.w	r6, [r4, #1100]	; 0x44c
 8010100:	4798      	blx	r3
 8010102:	60f0      	str	r0, [r6, #12]
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 8010104:	f8d4 09e8 	ldr.w	r0, [r4, #2536]	; 0x9e8
 8010108:	4a21      	ldr	r2, [pc, #132]	; (8010190 <main+0x5d8>)
 801010a:	6803      	ldr	r3, [r0, #0]
 801010c:	f8d4 19e4 	ldr.w	r1, [r4, #2532]	; 0x9e4
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4798      	blx	r3
    //servo_left->setReference(180);
    //servo_right->setReference(180);

    chatter.publish( &str_msg );

    nh.spinOnce();
 8010114:	481f      	ldr	r0, [pc, #124]	; (8010194 <main+0x5dc>)
 8010116:	f7ff fc45 	bl	800f9a4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::spinOnce()>

    //delay(20);
    if((((int)millis()) / 1000.0) - start_time > dt){
 801011a:	f7f0 fadb 	bl	80006d4 <millis>
 801011e:	4605      	mov	r5, r0
 8010120:	4640      	mov	r0, r8
 8010122:	f7f4 fe5f 	bl	8004de4 <__aeabi_f2d>
 8010126:	4680      	mov	r8, r0
 8010128:	4689      	mov	r9, r1
 801012a:	4628      	mov	r0, r5
 801012c:	f7f4 fe48 	bl	8004dc0 <__aeabi_i2d>
 8010130:	2200      	movs	r2, #0
 8010132:	4b15      	ldr	r3, [pc, #84]	; (8010188 <main+0x5d0>)
 8010134:	f7f4 ffd4 	bl	80050e0 <__aeabi_ddiv>
 8010138:	4642      	mov	r2, r8
 801013a:	464b      	mov	r3, r9
 801013c:	f7f4 fcf2 	bl	8004b24 <__aeabi_dsub>
 8010140:	a30f      	add	r3, pc, #60	; (adr r3, 8010180 <main+0x5c8>)
 8010142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010146:	f7f5 f931 	bl	80053ac <__aeabi_dcmpgt>
 801014a:	b128      	cbz	r0, 8010158 <main+0x5a0>
      nh.logerror("Main loop running slower than expected!");
 801014c:	4912      	ldr	r1, [pc, #72]	; (8010198 <main+0x5e0>)
 801014e:	4811      	ldr	r0, [pc, #68]	; (8010194 <main+0x5dc>)
 8010150:	f7ff fac6 	bl	800f6e0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 512, 512>::logerror(char const*)>
    wheelSeperation = 0.3;
  }

  int enc_timeout;
  if(!nh.getParam("serial_node/encoderTimeout", &enc_timeout, 1)){
    enc_timeout = 10;
 8010154:	463e      	mov	r6, r7
 8010156:	e78d      	b.n	8010074 <main+0x4bc>

    //delay(20);
    if((((int)millis()) / 1000.0) - start_time > dt){
      nh.logerror("Main loop running slower than expected!");
    }else{
      while( (((int)millis()) / 1000.0) - start_time < dt){}
 8010158:	f7f0 fabc 	bl	80006d4 <millis>
 801015c:	f7f4 fe30 	bl	8004dc0 <__aeabi_i2d>
 8010160:	2200      	movs	r2, #0
 8010162:	4b09      	ldr	r3, [pc, #36]	; (8010188 <main+0x5d0>)
 8010164:	f7f4 ffbc 	bl	80050e0 <__aeabi_ddiv>
 8010168:	4642      	mov	r2, r8
 801016a:	464b      	mov	r3, r9
 801016c:	f7f4 fcda 	bl	8004b24 <__aeabi_dsub>
 8010170:	a303      	add	r3, pc, #12	; (adr r3, 8010180 <main+0x5c8>)
 8010172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010176:	f7f5 f8fb 	bl	8005370 <__aeabi_dcmplt>
 801017a:	2800      	cmp	r0, #0
 801017c:	d1ec      	bne.n	8010158 <main+0x5a0>
 801017e:	e7e9      	b.n	8010154 <main+0x59c>
 8010180:	40000000 	.word	0x40000000
 8010184:	3f947ae1 	.word	0x3f947ae1
 8010188:	408f4000 	.word	0x408f4000
 801018c:	3dcccccd 	.word	0x3dcccccd
 8010190:	200004dc 	.word	0x200004dc
 8010194:	2000050c 	.word	0x2000050c
 8010198:	0801349b 	.word	0x0801349b

0801019c <_GLOBAL__sub_I_USART_FIFO>:

      /*
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {
 801019c:	4b4e      	ldr	r3, [pc, #312]	; (80102d8 <_GLOBAL__sub_I_USART_FIFO+0x13c>)
 801019e:	4a4f      	ldr	r2, [pc, #316]	; (80102dc <_GLOBAL__sub_I_USART_FIFO+0x140>)
  while (1){
    debug_toggle();
    delay(100);
    nh.spinOnce();
  }
}
 80101a0:	b530      	push	{r4, r5, lr}
 80101a2:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
      USART_CNTOUT = 0;
    }
    ArduinoHardware()
    {
      /* Leonardo support */
      iostream = USART1;
 80101a6:	4a4e      	ldr	r2, [pc, #312]	; (80102e0 <_GLOBAL__sub_I_USART_FIFO+0x144>)
      char* * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80101a8:	494e      	ldr	r1, [pc, #312]	; (80102e4 <_GLOBAL__sub_I_USART_FIFO+0x148>)
 80101aa:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
      baud_ = 115200;
 80101ae:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80101b2:	f8c3 2458 	str.w	r2, [r3, #1112]	; 0x458
      USART_CNTIN = 0;
 80101b6:	2200      	movs	r2, #0
 80101b8:	61da      	str	r2, [r3, #28]
 80101ba:	f8c3 1958 	str.w	r1, [r3, #2392]	; 0x958
      USART_CNTOUT = 0;
 80101be:	619a      	str	r2, [r3, #24]
 80101c0:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 80101c4:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 80101c8:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
 80101cc:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 80101d0:	f8c3 2970 	str.w	r2, [r3, #2416]	; 0x970
 80101d4:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 80101d8:	f8c3 297c 	str.w	r2, [r3, #2428]	; 0x97c
 80101dc:	f603 0164 	addw	r1, r3, #2148	; 0x864
 80101e0:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;
 80101e4:	f841 2f04 	str.w	r2, [r1, #4]!
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 80101e8:	428b      	cmp	r3, r1
 80101ea:	d1fb      	bne.n	80101e4 <_GLOBAL__sub_I_USART_FIFO+0x48>
 80101ec:	4a3e      	ldr	r2, [pc, #248]	; (80102e8 <_GLOBAL__sub_I_USART_FIFO+0x14c>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;
 80101ee:	2100      	movs	r1, #0
 80101f0:	f843 1f04 	str.w	r1, [r3, #4]!
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d1fb      	bne.n	80101f0 <_GLOBAL__sub_I_USART_FIFO+0x54>
 80101f8:	2300      	movs	r3, #0
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;
 80101fa:	4619      	mov	r1, r3
 80101fc:	483b      	ldr	r0, [pc, #236]	; (80102ec <_GLOBAL__sub_I_USART_FIFO+0x150>)
 80101fe:	18c2      	adds	r2, r0, r3
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010200:	3301      	adds	r3, #1
 8010202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
	   message_in[i] = 0;
 8010206:	7611      	strb	r1, [r2, #24]
 8010208:	4d38      	ldr	r5, [pc, #224]	; (80102ec <_GLOBAL__sub_I_USART_FIFO+0x150>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 801020a:	d1f8      	bne.n	80101fe <_GLOBAL__sub_I_USART_FIFO+0x62>
 801020c:	2100      	movs	r1, #0
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
	   message_out[i] = 0;
 801020e:	460c      	mov	r4, r1
 8010210:	1868      	adds	r0, r5, r1
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8010212:	3101      	adds	r1, #1
 8010214:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	   message_out[i] = 0;
 8010218:	4b2f      	ldr	r3, [pc, #188]	; (80102d8 <_GLOBAL__sub_I_USART_FIFO+0x13c>)
 801021a:	f04f 0200 	mov.w	r2, #0
 801021e:	f880 4218 	strb.w	r4, [r0, #536]	; 0x218
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 8010222:	d1f5      	bne.n	8010210 <_GLOBAL__sub_I_USART_FIFO+0x74>
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010224:	4932      	ldr	r1, [pc, #200]	; (80102f0 <_GLOBAL__sub_I_USART_FIFO+0x154>)
      {
        topic_ = topic_name;
 8010226:	4c33      	ldr	r4, [pc, #204]	; (80102f4 <_GLOBAL__sub_I_USART_FIFO+0x158>)
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010228:	f8c3 1980 	str.w	r1, [r3, #2432]	; 0x980
      header(),
      heading_angle(0),
      heading_velocity(0),
      speed(0),
      acceleration(0),
      mode(0)
 801022c:	4932      	ldr	r1, [pc, #200]	; (80102f8 <_GLOBAL__sub_I_USART_FIFO+0x15c>)
      {
        topic_ = topic_name;
 801022e:	f8c3 4988 	str.w	r4, [r3, #2440]	; 0x988
 8010232:	f8c3 198c 	str.w	r1, [r3, #2444]	; 0x98c
      const char* frame_id;

    Header():
      seq(0),
      stamp(),
      frame_id("")
 8010236:	4931      	ldr	r1, [pc, #196]	; (80102fc <_GLOBAL__sub_I_USART_FIFO+0x160>)
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010238:	4c31      	ldr	r4, [pc, #196]	; (8010300 <_GLOBAL__sub_I_USART_FIFO+0x164>)
 801023a:	f8c3 1990 	str.w	r1, [r3, #2448]	; 0x990
 801023e:	2100      	movs	r1, #0
 8010240:	f8c3 19a4 	str.w	r1, [r3, #2468]	; 0x9a4
 8010244:	f8c3 19a8 	str.w	r1, [r3, #2472]	; 0x9a8
 8010248:	f8c3 19ac 	str.w	r1, [r3, #2476]	; 0x9ac
 801024c:	f8c3 19b0 	str.w	r1, [r3, #2480]	; 0x9b0
 8010250:	492c      	ldr	r1, [pc, #176]	; (8010304 <_GLOBAL__sub_I_USART_FIFO+0x168>)
 8010252:	f8c3 49c0 	str.w	r4, [r3, #2496]	; 0x9c0
 8010256:	f8c3 19b8 	str.w	r1, [r3, #2488]	; 0x9b8
 801025a:	2101      	movs	r1, #1
 801025c:	f8c3 19bc 	str.w	r1, [r3, #2492]	; 0x9bc
 8010260:	f8c3 19d8 	str.w	r1, [r3, #2520]	; 0x9d8
      {
        topic_ = topic_name;
 8010264:	4928      	ldr	r1, [pc, #160]	; (8010308 <_GLOBAL__sub_I_USART_FIFO+0x16c>)
  {
    public:
      uint8_t data;

    UInt8():
      data(0)
 8010266:	4c29      	ldr	r4, [pc, #164]	; (801030c <_GLOBAL__sub_I_USART_FIFO+0x170>)
 8010268:	f8c3 19c8 	str.w	r1, [r3, #2504]	; 0x9c8
      float st_data;
      float * data;

    Float32MultiArray():
      layout(),
      data_length(0), data(NULL)
 801026c:	4928      	ldr	r1, [pc, #160]	; (8010310 <_GLOBAL__sub_I_USART_FIFO+0x174>)
 801026e:	4829      	ldr	r0, [pc, #164]	; (8010314 <_GLOBAL__sub_I_USART_FIFO+0x178>)
 8010270:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
      std_msgs::MultiArrayDimension * dim;
      uint32_t data_offset;

    MultiArrayLayout():
      dim_length(0), dim(NULL),
      data_offset(0)
 8010274:	4928      	ldr	r1, [pc, #160]	; (8010318 <_GLOBAL__sub_I_USART_FIFO+0x17c>)
 8010276:	f8c3 49cc 	str.w	r4, [r3, #2508]	; 0x9cc
 801027a:	f8c3 1424 	str.w	r1, [r3, #1060]	; 0x424
      uint32_t stride;

    MultiArrayDimension():
      label(""),
      size(0),
      stride(0)
 801027e:	4927      	ldr	r1, [pc, #156]	; (801031c <_GLOBAL__sub_I_USART_FIFO+0x180>)
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 8010280:	4c27      	ldr	r4, [pc, #156]	; (8010320 <_GLOBAL__sub_I_USART_FIFO+0x184>)
 8010282:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
  {
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};
 8010286:	4927      	ldr	r1, [pc, #156]	; (8010324 <_GLOBAL__sub_I_USART_FIFO+0x188>)
 8010288:	f8c3 2994 	str.w	r2, [r3, #2452]	; 0x994
 801028c:	f8c3 2998 	str.w	r2, [r3, #2456]	; 0x998
 8010290:	f8c3 299c 	str.w	r2, [r3, #2460]	; 0x99c
 8010294:	f8c3 09a0 	str.w	r0, [r3, #2464]	; 0x9a0
 8010298:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 801029c:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 80102a0:	f8c3 49d4 	str.w	r4, [r3, #2516]	; 0x9d4
 80102a4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 80102a8:	f8c3 0430 	str.w	r0, [r3, #1072]	; 0x430
 80102ac:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
 80102b0:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
 80102b4:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 80102b8:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 80102bc:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 80102c0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
 80102c4:	f8c3 19dc 	str.w	r1, [r3, #2524]	; 0x9dc
 80102c8:	f503 6184 	add.w	r1, r3, #1056	; 0x420
 80102cc:	f8c3 19e0 	str.w	r1, [r3, #2528]	; 0x9e0
 80102d0:	f8c3 29ec 	str.w	r2, [r3, #2540]	; 0x9ec
 80102d4:	bd30      	pop	{r4, r5, pc}
 80102d6:	bf00      	nop
 80102d8:	200000bc 	.word	0x200000bc
 80102dc:	080130f0 	.word	0x080130f0
 80102e0:	40013800 	.word	0x40013800
 80102e4:	08013048 	.word	0x08013048
 80102e8:	200009e8 	.word	0x200009e8
 80102ec:	2000050c 	.word	0x2000050c
 80102f0:	08013104 	.word	0x08013104
 80102f4:	080134f0 	.word	0x080134f0
 80102f8:	080130d8 	.word	0x080130d8
 80102fc:	080130c0 	.word	0x080130c0
 8010300:	0801311c 	.word	0x0801311c
 8010304:	0800420f 	.word	0x0800420f
 8010308:	08013502 	.word	0x08013502
 801030c:	080130a8 	.word	0x080130a8
 8010310:	08013090 	.word	0x08013090
 8010314:	0801349a 	.word	0x0801349a
 8010318:	08013078 	.word	0x08013078
 801031c:	08013060 	.word	0x08013060
 8010320:	08004209 	.word	0x08004209
 8010324:	08013506 	.word	0x08013506

08010328 <servo::motorType()>:
    virtual void setReference(float setPoint);
    virtual float getReference();
    virtual char* motorName();
    virtual float update(float dt, bool connected);

    virtual int motorType() { return MOTOR_TYPE_SERVO; }
 8010328:	2001      	movs	r0, #1
 801032a:	4770      	bx	lr

0801032c <DCMotor::motorType()>:
    virtual void setReference(float setPoint);
    virtual float getReference();
    virtual char* motorName();
    virtual float update(float dt, bool connected);

    virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
 801032c:	2002      	movs	r0, #2
 801032e:	4770      	bx	lr

08010330 <operator delete(void*)>:
 8010330:	f000 bec6 	b.w	80110c0 <free>

08010334 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8010334:	b510      	push	{r4, lr}
 8010336:	4604      	mov	r4, r0
 8010338:	4b02      	ldr	r3, [pc, #8]	; (8010344 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
 801033a:	6003      	str	r3, [r0, #0]
 801033c:	f000 fc62 	bl	8010c04 <__cxxabiv1::__class_type_info::~__class_type_info()>
 8010340:	4620      	mov	r0, r4
 8010342:	bd10      	pop	{r4, pc}
 8010344:	08013518 	.word	0x08013518

08010348 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 8010348:	b510      	push	{r4, lr}
 801034a:	4604      	mov	r4, r0
 801034c:	f7ff fff2 	bl	8010334 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
 8010350:	4620      	mov	r0, r4
 8010352:	f7ff ffed 	bl	8010330 <operator delete(void*)>
 8010356:	4620      	mov	r0, r4
 8010358:	bd10      	pop	{r4, pc}

0801035a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 801035a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801035e:	460e      	mov	r6, r1
 8010360:	4619      	mov	r1, r3
 8010362:	4683      	mov	fp, r0
 8010364:	4617      	mov	r7, r2
 8010366:	4699      	mov	r9, r3
 8010368:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801036a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801036e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010372:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010374:	f000 fb58 	bl	8010a28 <std::type_info::operator==(std::type_info const&) const>
 8010378:	b178      	cbz	r0, 801039a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
 801037a:	2e00      	cmp	r6, #0
 801037c:	602c      	str	r4, [r5, #0]
 801037e:	712f      	strb	r7, [r5, #4]
 8010380:	db06      	blt.n	8010390 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x36>
 8010382:	4434      	add	r4, r6
 8010384:	45a0      	cmp	r8, r4
 8010386:	bf0c      	ite	eq
 8010388:	2406      	moveq	r4, #6
 801038a:	2401      	movne	r4, #1
 801038c:	71ac      	strb	r4, [r5, #6]
 801038e:	e01e      	b.n	80103ce <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8010390:	3602      	adds	r6, #2
 8010392:	d11c      	bne.n	80103ce <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8010394:	2301      	movs	r3, #1
 8010396:	71ab      	strb	r3, [r5, #6]
 8010398:	e019      	b.n	80103ce <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 801039a:	4544      	cmp	r4, r8
 801039c:	d104      	bne.n	80103a8 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x4e>
 801039e:	4651      	mov	r1, sl
 80103a0:	4658      	mov	r0, fp
 80103a2:	f000 fb41 	bl	8010a28 <std::type_info::operator==(std::type_info const&) const>
 80103a6:	b988      	cbnz	r0, 80103cc <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x72>
 80103a8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80103ac:	463a      	mov	r2, r7
 80103ae:	6803      	ldr	r3, [r0, #0]
 80103b0:	950d      	str	r5, [sp, #52]	; 0x34
 80103b2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80103b6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80103ba:	940a      	str	r4, [sp, #40]	; 0x28
 80103bc:	69dc      	ldr	r4, [r3, #28]
 80103be:	4631      	mov	r1, r6
 80103c0:	464b      	mov	r3, r9
 80103c2:	46a4      	mov	ip, r4
 80103c4:	b001      	add	sp, #4
 80103c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ca:	4760      	bx	ip
 80103cc:	716f      	strb	r7, [r5, #5]
 80103ce:	2000      	movs	r0, #0
 80103d0:	b001      	add	sp, #4
 80103d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103d6 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 80103d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103da:	9e06      	ldr	r6, [sp, #24]
 80103dc:	4680      	mov	r8, r0
 80103de:	4296      	cmp	r6, r2
 80103e0:	460f      	mov	r7, r1
 80103e2:	4614      	mov	r4, r2
 80103e4:	461d      	mov	r5, r3
 80103e6:	d103      	bne.n	80103f0 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1a>
 80103e8:	4619      	mov	r1, r3
 80103ea:	f000 fb1d 	bl	8010a28 <std::type_info::operator==(std::type_info const&) const>
 80103ee:	b958      	cbnz	r0, 8010408 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x32>
 80103f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80103f4:	4622      	mov	r2, r4
 80103f6:	6803      	ldr	r3, [r0, #0]
 80103f8:	9606      	str	r6, [sp, #24]
 80103fa:	6a1e      	ldr	r6, [r3, #32]
 80103fc:	4639      	mov	r1, r7
 80103fe:	462b      	mov	r3, r5
 8010400:	46b4      	mov	ip, r6
 8010402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010406:	4760      	bx	ip
 8010408:	2006      	movs	r0, #6
 801040a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801040e <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 801040e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010412:	4604      	mov	r4, r0
 8010414:	460d      	mov	r5, r1
 8010416:	4616      	mov	r6, r2
 8010418:	461f      	mov	r7, r3
 801041a:	f000 fc06 	bl	8010c2a <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
 801041e:	b948      	cbnz	r0, 8010434 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
 8010420:	68a0      	ldr	r0, [r4, #8]
 8010422:	4632      	mov	r2, r6
 8010424:	6803      	ldr	r3, [r0, #0]
 8010426:	4629      	mov	r1, r5
 8010428:	699c      	ldr	r4, [r3, #24]
 801042a:	463b      	mov	r3, r7
 801042c:	46a4      	mov	ip, r4
 801042e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010432:	4760      	bx	ip
 8010434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010438 <read_uleb128(unsigned char const*, unsigned long*)>:
 8010438:	b570      	push	{r4, r5, r6, lr}
 801043a:	2300      	movs	r3, #0
 801043c:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8010440:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8010444:	f810 5b01 	ldrb.w	r5, [r0], #1
 8010448:	1994      	adds	r4, r2, r6
 801044a:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 801044e:	40a2      	lsls	r2, r4
 8010450:	4313      	orrs	r3, r2
 8010452:	062a      	lsls	r2, r5, #24
 8010454:	d4f4      	bmi.n	8010440 <read_uleb128(unsigned char const*, unsigned long*)+0x8>
 8010456:	600b      	str	r3, [r1, #0]
 8010458:	bd70      	pop	{r4, r5, r6, pc}

0801045a <read_sleb128(unsigned char const*, long*)>:
 801045a:	2300      	movs	r3, #0
 801045c:	461a      	mov	r2, r3
 801045e:	b530      	push	{r4, r5, lr}
 8010460:	f810 4b01 	ldrb.w	r4, [r0], #1
 8010464:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8010468:	4095      	lsls	r5, r2
 801046a:	432b      	orrs	r3, r5
 801046c:	0625      	lsls	r5, r4, #24
 801046e:	f102 0207 	add.w	r2, r2, #7
 8010472:	d4f5      	bmi.n	8010460 <read_sleb128(unsigned char const*, long*)+0x6>
 8010474:	2a1f      	cmp	r2, #31
 8010476:	d806      	bhi.n	8010486 <read_sleb128(unsigned char const*, long*)+0x2c>
 8010478:	0664      	lsls	r4, r4, #25
 801047a:	bf42      	ittt	mi
 801047c:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8010480:	fa04 f202 	lslmi.w	r2, r4, r2
 8010484:	4313      	orrmi	r3, r2
 8010486:	600b      	str	r3, [r1, #0]
 8010488:	bd30      	pop	{r4, r5, pc}

0801048a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
 801048a:	2850      	cmp	r0, #80	; 0x50
 801048c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801048e:	4605      	mov	r5, r0
 8010490:	460f      	mov	r7, r1
 8010492:	4614      	mov	r4, r2
 8010494:	461e      	mov	r6, r3
 8010496:	d105      	bne.n	80104a4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x1a>
 8010498:	1cd0      	adds	r0, r2, #3
 801049a:	f020 0003 	bic.w	r0, r0, #3
 801049e:	f850 3b04 	ldr.w	r3, [r0], #4
 80104a2:	e033      	b.n	801050c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x82>
 80104a4:	f000 030f 	and.w	r3, r0, #15
 80104a8:	2b0c      	cmp	r3, #12
 80104aa:	d823      	bhi.n	80104f4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6a>
 80104ac:	e8df f003 	tbb	[pc, r3]
 80104b0:	1a12071a 	.word	0x1a12071a
 80104b4:	2222221e 	.word	0x2222221e
 80104b8:	1a160c22 	.word	0x1a160c22
 80104bc:	1e          	.byte	0x1e
 80104bd:	00          	.byte	0x00
 80104be:	a901      	add	r1, sp, #4
 80104c0:	4620      	mov	r0, r4
 80104c2:	f7ff ffb9 	bl	8010438 <read_uleb128(unsigned char const*, unsigned long*)>
 80104c6:	e003      	b.n	80104d0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x46>
 80104c8:	a901      	add	r1, sp, #4
 80104ca:	4620      	mov	r0, r4
 80104cc:	f7ff ffc5 	bl	801045a <read_sleb128(unsigned char const*, long*)>
 80104d0:	9b01      	ldr	r3, [sp, #4]
 80104d2:	e011      	b.n	80104f8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 80104d4:	4620      	mov	r0, r4
 80104d6:	f830 3b02 	ldrh.w	r3, [r0], #2
 80104da:	e00d      	b.n	80104f8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 80104dc:	4620      	mov	r0, r4
 80104de:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80104e2:	e009      	b.n	80104f8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 80104e4:	4620      	mov	r0, r4
 80104e6:	f850 3b04 	ldr.w	r3, [r0], #4
 80104ea:	e005      	b.n	80104f8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 80104ec:	4620      	mov	r0, r4
 80104ee:	f850 3b08 	ldr.w	r3, [r0], #8
 80104f2:	e001      	b.n	80104f8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 80104f4:	f000 fd3f 	bl	8010f76 <abort>
 80104f8:	b143      	cbz	r3, 801050c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x82>
 80104fa:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80104fe:	2a10      	cmp	r2, #16
 8010500:	bf18      	it	ne
 8010502:	463c      	movne	r4, r7
 8010504:	062a      	lsls	r2, r5, #24
 8010506:	4423      	add	r3, r4
 8010508:	bf48      	it	mi
 801050a:	681b      	ldrmi	r3, [r3, #0]
 801050c:	6033      	str	r3, [r6, #0]
 801050e:	b003      	add	sp, #12
 8010510:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010512 <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
 8010512:	b508      	push	{r3, lr}
 8010514:	4603      	mov	r3, r0
 8010516:	2bff      	cmp	r3, #255	; 0xff
 8010518:	4608      	mov	r0, r1
 801051a:	d01c      	beq.n	8010556 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 801051c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010520:	2b20      	cmp	r3, #32
 8010522:	d00e      	beq.n	8010542 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x30>
 8010524:	d803      	bhi.n	801052e <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1c>
 8010526:	b1b3      	cbz	r3, 8010556 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010528:	2b10      	cmp	r3, #16
 801052a:	d112      	bne.n	8010552 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 801052c:	e013      	b.n	8010556 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 801052e:	2b40      	cmp	r3, #64	; 0x40
 8010530:	d00b      	beq.n	801054a <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
 8010532:	2b50      	cmp	r3, #80	; 0x50
 8010534:	d00f      	beq.n	8010556 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 8010536:	2b30      	cmp	r3, #48	; 0x30
 8010538:	d10b      	bne.n	8010552 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 801053a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801053e:	f7f6 ba1f 	b.w	8006980 <_Unwind_GetDataRelBase>
 8010542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010546:	f7f6 ba17 	b.w	8006978 <_Unwind_GetTextRelBase>
 801054a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801054e:	f7f6 ba03 	b.w	8006958 <_Unwind_GetRegionStart>
 8010552:	f000 fd10 	bl	8010f76 <abort>
 8010556:	2000      	movs	r0, #0
 8010558:	bd08      	pop	{r3, pc}

0801055a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>:
 801055a:	b570      	push	{r4, r5, r6, lr}
 801055c:	460c      	mov	r4, r1
 801055e:	4601      	mov	r1, r0
 8010560:	4620      	mov	r0, r4
 8010562:	4615      	mov	r5, r2
 8010564:	461e      	mov	r6, r3
 8010566:	f7ff ffd4 	bl	8010512 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 801056a:	4633      	mov	r3, r6
 801056c:	462a      	mov	r2, r5
 801056e:	4601      	mov	r1, r0
 8010570:	4620      	mov	r0, r4
 8010572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010576:	f7ff bf88 	b.w	801048a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>

0801057a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
 801057a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801057c:	460e      	mov	r6, r1
 801057e:	4614      	mov	r4, r2
 8010580:	4605      	mov	r5, r0
 8010582:	b110      	cbz	r0, 801058a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>
 8010584:	f7f6 f9e8 	bl	8006958 <_Unwind_GetRegionStart>
 8010588:	e7ff      	b.n	801058a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>
 801058a:	6020      	str	r0, [r4, #0]
 801058c:	7831      	ldrb	r1, [r6, #0]
 801058e:	1c72      	adds	r2, r6, #1
 8010590:	29ff      	cmp	r1, #255	; 0xff
 8010592:	d005      	beq.n	80105a0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x26>
 8010594:	1d23      	adds	r3, r4, #4
 8010596:	4628      	mov	r0, r5
 8010598:	f7ff ffdf 	bl	801055a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 801059c:	4602      	mov	r2, r0
 801059e:	e000      	b.n	80105a2 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x28>
 80105a0:	6060      	str	r0, [r4, #4]
 80105a2:	7813      	ldrb	r3, [r2, #0]
 80105a4:	1c50      	adds	r0, r2, #1
 80105a6:	2bff      	cmp	r3, #255	; 0xff
 80105a8:	7523      	strb	r3, [r4, #20]
 80105aa:	d007      	beq.n	80105bc <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x42>
 80105ac:	2310      	movs	r3, #16
 80105ae:	7523      	strb	r3, [r4, #20]
 80105b0:	a901      	add	r1, sp, #4
 80105b2:	f7ff ff41 	bl	8010438 <read_uleb128(unsigned char const*, unsigned long*)>
 80105b6:	9b01      	ldr	r3, [sp, #4]
 80105b8:	4403      	add	r3, r0
 80105ba:	e000      	b.n	80105be <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x44>
 80105bc:	2300      	movs	r3, #0
 80105be:	60e3      	str	r3, [r4, #12]
 80105c0:	7803      	ldrb	r3, [r0, #0]
 80105c2:	a901      	add	r1, sp, #4
 80105c4:	7563      	strb	r3, [r4, #21]
 80105c6:	3001      	adds	r0, #1
 80105c8:	f7ff ff36 	bl	8010438 <read_uleb128(unsigned char const*, unsigned long*)>
 80105cc:	9b01      	ldr	r3, [sp, #4]
 80105ce:	4403      	add	r3, r0
 80105d0:	6123      	str	r3, [r4, #16]
 80105d2:	b002      	add	sp, #8
 80105d4:	bd70      	pop	{r4, r5, r6, pc}

080105d6 <_Unwind_GetGR>:
 80105d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105d8:	ab03      	add	r3, sp, #12
 80105da:	9300      	str	r3, [sp, #0]
 80105dc:	2300      	movs	r3, #0
 80105de:	460a      	mov	r2, r1
 80105e0:	4619      	mov	r1, r3
 80105e2:	f7f5 fc2f 	bl	8005e44 <_Unwind_VRS_Get>
 80105e6:	9803      	ldr	r0, [sp, #12]
 80105e8:	b005      	add	sp, #20
 80105ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080105f0 <__gxx_personality_v0>:
 80105f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f4:	2300      	movs	r3, #0
 80105f6:	b091      	sub	sp, #68	; 0x44
 80105f8:	9304      	str	r3, [sp, #16]
 80105fa:	f000 0303 	and.w	r3, r0, #3
 80105fe:	2b01      	cmp	r3, #1
 8010600:	4607      	mov	r7, r0
 8010602:	460c      	mov	r4, r1
 8010604:	4615      	mov	r5, r2
 8010606:	d00e      	beq.n	8010626 <__gxx_personality_v0+0x36>
 8010608:	d302      	bcc.n	8010610 <__gxx_personality_v0+0x20>
 801060a:	2b02      	cmp	r3, #2
 801060c:	d002      	beq.n	8010614 <__gxx_personality_v0+0x24>
 801060e:	e0ef      	b.n	80107f0 <__gxx_personality_v0+0x200>
 8010610:	0702      	lsls	r2, r0, #28
 8010612:	d517      	bpl.n	8010644 <__gxx_personality_v0+0x54>
 8010614:	4629      	mov	r1, r5
 8010616:	4620      	mov	r0, r4
 8010618:	f7f6 f98a 	bl	8006930 <__gnu_unwind_frame>
 801061c:	b108      	cbz	r0, 8010622 <__gxx_personality_v0+0x32>
 801061e:	2009      	movs	r0, #9
 8010620:	e19f      	b.n	8010962 <__gxx_personality_v0+0x372>
 8010622:	2008      	movs	r0, #8
 8010624:	e19d      	b.n	8010962 <__gxx_personality_v0+0x372>
 8010626:	f000 0208 	and.w	r2, r0, #8
 801062a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 801062e:	b95a      	cbnz	r2, 8010648 <__gxx_personality_v0+0x58>
 8010630:	f8d1 8020 	ldr.w	r8, [r1, #32]
 8010634:	4628      	mov	r0, r5
 8010636:	210d      	movs	r1, #13
 8010638:	f7ff ffcd 	bl	80105d6 <_Unwind_GetGR>
 801063c:	4580      	cmp	r8, r0
 801063e:	d120      	bne.n	8010682 <__gxx_personality_v0+0x92>
 8010640:	2606      	movs	r6, #6
 8010642:	e002      	b.n	801064a <__gxx_personality_v0+0x5a>
 8010644:	2601      	movs	r6, #1
 8010646:	e000      	b.n	801064a <__gxx_personality_v0+0x5a>
 8010648:	2602      	movs	r6, #2
 801064a:	ab10      	add	r3, sp, #64	; 0x40
 801064c:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	f007 0708 	and.w	r7, r7, #8
 8010656:	2300      	movs	r3, #0
 8010658:	433e      	orrs	r6, r7
 801065a:	220c      	movs	r2, #12
 801065c:	4619      	mov	r1, r3
 801065e:	4628      	mov	r0, r5
 8010660:	f7f5 fc16 	bl	8005e90 <_Unwind_VRS_Set>
 8010664:	2e06      	cmp	r6, #6
 8010666:	d117      	bne.n	8010698 <__gxx_personality_v0+0xa8>
 8010668:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 801066c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801066e:	f1b8 0f00 	cmp.w	r8, #0
 8010672:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 8010676:	bf0c      	ite	eq
 8010678:	f04f 0a01 	moveq.w	sl, #1
 801067c:	f04f 0a03 	movne.w	sl, #3
 8010680:	e105      	b.n	801088e <__gxx_personality_v0+0x29e>
 8010682:	aa10      	add	r2, sp, #64	; 0x40
 8010684:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8010688:	9200      	str	r2, [sp, #0]
 801068a:	4633      	mov	r3, r6
 801068c:	4631      	mov	r1, r6
 801068e:	220c      	movs	r2, #12
 8010690:	4628      	mov	r0, r5
 8010692:	f7f5 fbfd 	bl	8005e90 <_Unwind_VRS_Set>
 8010696:	2602      	movs	r6, #2
 8010698:	4628      	mov	r0, r5
 801069a:	f7f6 f963 	bl	8006964 <_Unwind_GetLanguageSpecificData>
 801069e:	4681      	mov	r9, r0
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d0b7      	beq.n	8010614 <__gxx_personality_v0+0x24>
 80106a4:	aa0a      	add	r2, sp, #40	; 0x28
 80106a6:	4601      	mov	r1, r0
 80106a8:	4628      	mov	r0, r5
 80106aa:	f7ff ff66 	bl	801057a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 80106ae:	4629      	mov	r1, r5
 80106b0:	4680      	mov	r8, r0
 80106b2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80106b6:	f7ff ff2c 	bl	8010512 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 80106ba:	210f      	movs	r1, #15
 80106bc:	900c      	str	r0, [sp, #48]	; 0x30
 80106be:	4628      	mov	r0, r5
 80106c0:	f7ff ff89 	bl	80105d6 <_Unwind_GetGR>
 80106c4:	f020 0001 	bic.w	r0, r0, #1
 80106c8:	1e47      	subs	r7, r0, #1
 80106ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106cc:	4598      	cmp	r8, r3
 80106ce:	f080 813f 	bcs.w	8010950 <__gxx_personality_v0+0x360>
 80106d2:	4642      	mov	r2, r8
 80106d4:	ab06      	add	r3, sp, #24
 80106d6:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80106da:	2000      	movs	r0, #0
 80106dc:	f7ff ff3d 	bl	801055a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 80106e0:	ab07      	add	r3, sp, #28
 80106e2:	4602      	mov	r2, r0
 80106e4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80106e8:	2000      	movs	r0, #0
 80106ea:	f7ff ff36 	bl	801055a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 80106ee:	ab08      	add	r3, sp, #32
 80106f0:	4602      	mov	r2, r0
 80106f2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80106f6:	2000      	movs	r0, #0
 80106f8:	f7ff ff2f 	bl	801055a <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 80106fc:	a909      	add	r1, sp, #36	; 0x24
 80106fe:	f7ff fe9b 	bl	8010438 <read_uleb128(unsigned char const*, unsigned long*)>
 8010702:	9b06      	ldr	r3, [sp, #24]
 8010704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010706:	4680      	mov	r8, r0
 8010708:	4413      	add	r3, r2
 801070a:	429f      	cmp	r7, r3
 801070c:	d202      	bcs.n	8010714 <__gxx_personality_v0+0x124>
 801070e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8010712:	e7da      	b.n	80106ca <__gxx_personality_v0+0xda>
 8010714:	9a07      	ldr	r2, [sp, #28]
 8010716:	4413      	add	r3, r2
 8010718:	429f      	cmp	r7, r3
 801071a:	d2d6      	bcs.n	80106ca <__gxx_personality_v0+0xda>
 801071c:	9808      	ldr	r0, [sp, #32]
 801071e:	b118      	cbz	r0, 8010728 <__gxx_personality_v0+0x138>
 8010720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010722:	eb00 0803 	add.w	r8, r0, r3
 8010726:	e000      	b.n	801072a <__gxx_personality_v0+0x13a>
 8010728:	4680      	mov	r8, r0
 801072a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801072c:	b110      	cbz	r0, 8010734 <__gxx_personality_v0+0x144>
 801072e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010730:	3801      	subs	r0, #1
 8010732:	4438      	add	r0, r7
 8010734:	f1b8 0f00 	cmp.w	r8, #0
 8010738:	f43f af6c 	beq.w	8010614 <__gxx_personality_v0+0x24>
 801073c:	2800      	cmp	r0, #0
 801073e:	f000 810c 	beq.w	801095a <__gxx_personality_v0+0x36a>
 8010742:	f016 0308 	ands.w	r3, r6, #8
 8010746:	9302      	str	r3, [sp, #8]
 8010748:	d014      	beq.n	8010774 <__gxx_personality_v0+0x184>
 801074a:	2347      	movs	r3, #71	; 0x47
 801074c:	7023      	strb	r3, [r4, #0]
 801074e:	234e      	movs	r3, #78	; 0x4e
 8010750:	7063      	strb	r3, [r4, #1]
 8010752:	2355      	movs	r3, #85	; 0x55
 8010754:	70a3      	strb	r3, [r4, #2]
 8010756:	2343      	movs	r3, #67	; 0x43
 8010758:	70e3      	strb	r3, [r4, #3]
 801075a:	2346      	movs	r3, #70	; 0x46
 801075c:	7123      	strb	r3, [r4, #4]
 801075e:	234f      	movs	r3, #79	; 0x4f
 8010760:	7163      	strb	r3, [r4, #5]
 8010762:	2352      	movs	r3, #82	; 0x52
 8010764:	71a3      	strb	r3, [r4, #6]
 8010766:	2300      	movs	r3, #0
 8010768:	71e3      	strb	r3, [r4, #7]
 801076a:	f04f 0a00 	mov.w	sl, #0
 801076e:	f06f 0b03 	mvn.w	fp, #3
 8010772:	e01b      	b.n	80107ac <__gxx_personality_v0+0x1bc>
 8010774:	79e3      	ldrb	r3, [r4, #7]
 8010776:	2b01      	cmp	r3, #1
 8010778:	bf0c      	ite	eq
 801077a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 801077e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8010782:	9304      	str	r3, [sp, #16]
 8010784:	e7f1      	b.n	801076a <__gxx_personality_v0+0x17a>
 8010786:	2704      	movs	r7, #4
 8010788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801078a:	ab09      	add	r3, sp, #36	; 0x24
 801078c:	fb07 2211 	mls	r2, r7, r1, r2
 8010790:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010792:	f7ff fe7a 	bl	801048a <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8010796:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010798:	2900      	cmp	r1, #0
 801079a:	f000 80d5 	beq.w	8010948 <__gxx_personality_v0+0x358>
 801079e:	bb6c      	cbnz	r4, 80107fc <__gxx_personality_v0+0x20c>
 80107a0:	9f08      	ldr	r7, [sp, #32]
 80107a2:	2f00      	cmp	r7, #0
 80107a4:	d059      	beq.n	801085a <__gxx_personality_v0+0x26a>
 80107a6:	9b03      	ldr	r3, [sp, #12]
 80107a8:	443b      	add	r3, r7
 80107aa:	4618      	mov	r0, r3
 80107ac:	a907      	add	r1, sp, #28
 80107ae:	f7ff fe54 	bl	801045a <read_sleb128(unsigned char const*, long*)>
 80107b2:	a908      	add	r1, sp, #32
 80107b4:	9003      	str	r0, [sp, #12]
 80107b6:	f7ff fe50 	bl	801045a <read_sleb128(unsigned char const*, long*)>
 80107ba:	9907      	ldr	r1, [sp, #28]
 80107bc:	2900      	cmp	r1, #0
 80107be:	d049      	beq.n	8010854 <__gxx_personality_v0+0x264>
 80107c0:	dd25      	ble.n	801080e <__gxx_personality_v0+0x21e>
 80107c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80107c6:	28ff      	cmp	r0, #255	; 0xff
 80107c8:	d014      	beq.n	80107f4 <__gxx_personality_v0+0x204>
 80107ca:	f000 0307 	and.w	r3, r0, #7
 80107ce:	2b04      	cmp	r3, #4
 80107d0:	d80e      	bhi.n	80107f0 <__gxx_personality_v0+0x200>
 80107d2:	a201      	add	r2, pc, #4	; (adr r2, 80107d8 <__gxx_personality_v0+0x1e8>)
 80107d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d8:	08010787 	.word	0x08010787
 80107dc:	080107f1 	.word	0x080107f1
 80107e0:	080107f9 	.word	0x080107f9
 80107e4:	08010787 	.word	0x08010787
 80107e8:	080107ed 	.word	0x080107ed
 80107ec:	2708      	movs	r7, #8
 80107ee:	e7cb      	b.n	8010788 <__gxx_personality_v0+0x198>
 80107f0:	f000 fbc1 	bl	8010f76 <abort>
 80107f4:	2700      	movs	r7, #0
 80107f6:	e7c7      	b.n	8010788 <__gxx_personality_v0+0x198>
 80107f8:	2702      	movs	r7, #2
 80107fa:	e7c5      	b.n	8010788 <__gxx_personality_v0+0x198>
 80107fc:	ab04      	add	r3, sp, #16
 80107fe:	2200      	movs	r2, #0
 8010800:	4620      	mov	r0, r4
 8010802:	f000 f94d 	bl	8010aa0 <__cxa_type_match>
 8010806:	2800      	cmp	r0, #0
 8010808:	f040 809e 	bne.w	8010948 <__gxx_personality_v0+0x358>
 801080c:	e7c8      	b.n	80107a0 <__gxx_personality_v0+0x1b0>
 801080e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010810:	1c4a      	adds	r2, r1, #1
 8010812:	b1b4      	cbz	r4, 8010842 <__gxx_personality_v0+0x252>
 8010814:	9b02      	ldr	r3, [sp, #8]
 8010816:	b9a3      	cbnz	r3, 8010842 <__gxx_personality_v0+0x252>
 8010818:	fb0b 7202 	mla	r2, fp, r2, r7
 801081c:	9b04      	ldr	r3, [sp, #16]
 801081e:	1f17      	subs	r7, r2, #4
 8010820:	9306      	str	r3, [sp, #24]
 8010822:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8010826:	b141      	cbz	r1, 801083a <__gxx_personality_v0+0x24a>
 8010828:	ab06      	add	r3, sp, #24
 801082a:	2200      	movs	r2, #0
 801082c:	4439      	add	r1, r7
 801082e:	4620      	mov	r0, r4
 8010830:	f000 f936 	bl	8010aa0 <__cxa_type_match>
 8010834:	2800      	cmp	r0, #0
 8010836:	d0f4      	beq.n	8010822 <__gxx_personality_v0+0x232>
 8010838:	2101      	movs	r1, #1
 801083a:	f081 0101 	eor.w	r1, r1, #1
 801083e:	b2c9      	uxtb	r1, r1
 8010840:	e005      	b.n	801084e <__gxx_personality_v0+0x25e>
 8010842:	fb0b f202 	mul.w	r2, fp, r2
 8010846:	58b9      	ldr	r1, [r7, r2]
 8010848:	fab1 f181 	clz	r1, r1
 801084c:	0949      	lsrs	r1, r1, #5
 801084e:	2900      	cmp	r1, #0
 8010850:	d0a6      	beq.n	80107a0 <__gxx_personality_v0+0x1b0>
 8010852:	e079      	b.n	8010948 <__gxx_personality_v0+0x358>
 8010854:	f04f 0a01 	mov.w	sl, #1
 8010858:	e7a2      	b.n	80107a0 <__gxx_personality_v0+0x1b0>
 801085a:	f1ba 0f00 	cmp.w	sl, #0
 801085e:	f43f aed9 	beq.w	8010614 <__gxx_personality_v0+0x24>
 8010862:	f04f 0a02 	mov.w	sl, #2
 8010866:	07f3      	lsls	r3, r6, #31
 8010868:	d511      	bpl.n	801088e <__gxx_personality_v0+0x29e>
 801086a:	f1ba 0f02 	cmp.w	sl, #2
 801086e:	f43f aed1 	beq.w	8010614 <__gxx_personality_v0+0x24>
 8010872:	210d      	movs	r1, #13
 8010874:	4628      	mov	r0, r5
 8010876:	9e04      	ldr	r6, [sp, #16]
 8010878:	f7ff fead 	bl	80105d6 <_Unwind_GetGR>
 801087c:	6266      	str	r6, [r4, #36]	; 0x24
 801087e:	6220      	str	r0, [r4, #32]
 8010880:	62a7      	str	r7, [r4, #40]	; 0x28
 8010882:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8010886:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 801088a:	2006      	movs	r0, #6
 801088c:	e069      	b.n	8010962 <__gxx_personality_v0+0x372>
 801088e:	f016 0608 	ands.w	r6, r6, #8
 8010892:	d008      	beq.n	80108a6 <__gxx_personality_v0+0x2b6>
 8010894:	f1ba 0f01 	cmp.w	sl, #1
 8010898:	d101      	bne.n	801089e <__gxx_personality_v0+0x2ae>
 801089a:	f000 f893 	bl	80109c4 <std::terminate()>
 801089e:	2f00      	cmp	r7, #0
 80108a0:	da24      	bge.n	80108ec <__gxx_personality_v0+0x2fc>
 80108a2:	f000 f8b1 	bl	8010a08 <std::unexpected()>
 80108a6:	f1ba 0f01 	cmp.w	sl, #1
 80108aa:	d102      	bne.n	80108b2 <__gxx_personality_v0+0x2c2>
 80108ac:	4620      	mov	r0, r4
 80108ae:	f000 fa2a 	bl	8010d06 <__cxa_call_terminate>
 80108b2:	2f00      	cmp	r7, #0
 80108b4:	da1a      	bge.n	80108ec <__gxx_personality_v0+0x2fc>
 80108b6:	aa0a      	add	r2, sp, #40	; 0x28
 80108b8:	4649      	mov	r1, r9
 80108ba:	4628      	mov	r0, r5
 80108bc:	f7ff fe5d 	bl	801057a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 80108c0:	4629      	mov	r1, r5
 80108c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80108c6:	f7ff fe24 	bl	8010512 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 80108ca:	f06f 0303 	mvn.w	r3, #3
 80108ce:	fb07 3303 	mla	r3, r7, r3, r3
 80108d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80108d4:	900c      	str	r0, [sp, #48]	; 0x30
 80108d6:	4413      	add	r3, r2
 80108d8:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80108dc:	b10a      	cbz	r2, 80108e2 <__gxx_personality_v0+0x2f2>
 80108de:	3601      	adds	r6, #1
 80108e0:	e7fa      	b.n	80108d8 <__gxx_personality_v0+0x2e8>
 80108e2:	2204      	movs	r2, #4
 80108e4:	62a6      	str	r6, [r4, #40]	; 0x28
 80108e6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80108e8:	6322      	str	r2, [r4, #48]	; 0x30
 80108ea:	6363      	str	r3, [r4, #52]	; 0x34
 80108ec:	ab10      	add	r3, sp, #64	; 0x40
 80108ee:	f843 4d1c 	str.w	r4, [r3, #-28]!
 80108f2:	9300      	str	r3, [sp, #0]
 80108f4:	2300      	movs	r3, #0
 80108f6:	461a      	mov	r2, r3
 80108f8:	4619      	mov	r1, r3
 80108fa:	4628      	mov	r0, r5
 80108fc:	f7f5 fac8 	bl	8005e90 <_Unwind_VRS_Set>
 8010900:	ab10      	add	r3, sp, #64	; 0x40
 8010902:	f843 7d20 	str.w	r7, [r3, #-32]!
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	2300      	movs	r3, #0
 801090a:	4619      	mov	r1, r3
 801090c:	2201      	movs	r2, #1
 801090e:	4628      	mov	r0, r5
 8010910:	f7f5 fabe 	bl	8005e90 <_Unwind_VRS_Set>
 8010914:	210f      	movs	r1, #15
 8010916:	4628      	mov	r0, r5
 8010918:	f7ff fe5d 	bl	80105d6 <_Unwind_GetGR>
 801091c:	f000 0001 	and.w	r0, r0, #1
 8010920:	ab10      	add	r3, sp, #64	; 0x40
 8010922:	ea40 0008 	orr.w	r0, r0, r8
 8010926:	f843 0d24 	str.w	r0, [r3, #-36]!
 801092a:	9300      	str	r3, [sp, #0]
 801092c:	2300      	movs	r3, #0
 801092e:	220f      	movs	r2, #15
 8010930:	4619      	mov	r1, r3
 8010932:	4628      	mov	r0, r5
 8010934:	f7f5 faac 	bl	8005e90 <_Unwind_VRS_Set>
 8010938:	f1ba 0f02 	cmp.w	sl, #2
 801093c:	d102      	bne.n	8010944 <__gxx_personality_v0+0x354>
 801093e:	4620      	mov	r0, r4
 8010940:	f000 f90a 	bl	8010b58 <__cxa_begin_cleanup>
 8010944:	2007      	movs	r0, #7
 8010946:	e00c      	b.n	8010962 <__gxx_personality_v0+0x372>
 8010948:	9f07      	ldr	r7, [sp, #28]
 801094a:	f04f 0a03 	mov.w	sl, #3
 801094e:	e78a      	b.n	8010866 <__gxx_personality_v0+0x276>
 8010950:	f04f 0800 	mov.w	r8, #0
 8010954:	f04f 0a01 	mov.w	sl, #1
 8010958:	e001      	b.n	801095e <__gxx_personality_v0+0x36e>
 801095a:	f04f 0a02 	mov.w	sl, #2
 801095e:	2700      	movs	r7, #0
 8010960:	e781      	b.n	8010866 <__gxx_personality_v0+0x276>
 8010962:	b011      	add	sp, #68	; 0x44
 8010964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010968 <operator new(unsigned int)>:
 8010968:	b510      	push	{r4, lr}
 801096a:	2800      	cmp	r0, #0
 801096c:	bf14      	ite	ne
 801096e:	4604      	movne	r4, r0
 8010970:	2401      	moveq	r4, #1
 8010972:	4620      	mov	r0, r4
 8010974:	f000 fb9c 	bl	80110b0 <malloc>
 8010978:	b930      	cbnz	r0, 8010988 <operator new(unsigned int)+0x20>
 801097a:	f000 f9f7 	bl	8010d6c <std::get_new_handler()>
 801097e:	b908      	cbnz	r0, 8010984 <operator new(unsigned int)+0x1c>
 8010980:	f000 faf9 	bl	8010f76 <abort>
 8010984:	4780      	blx	r0
 8010986:	e7f4      	b.n	8010972 <operator new(unsigned int)+0xa>
 8010988:	bd10      	pop	{r4, pc}

0801098a <__cxxabiv1::__terminate(void (*)())>:
 801098a:	b508      	push	{r3, lr}
 801098c:	4780      	blx	r0
 801098e:	f000 faf2 	bl	8010f76 <abort>
	...

08010994 <std::set_terminate(void (*)())>:
 8010994:	4602      	mov	r2, r0
 8010996:	f3bf 8f5f 	dmb	sy
 801099a:	4b05      	ldr	r3, [pc, #20]	; (80109b0 <std::set_terminate(void (*)())+0x1c>)
 801099c:	e853 0f00 	ldrex	r0, [r3]
 80109a0:	e843 2100 	strex	r1, r2, [r3]
 80109a4:	2900      	cmp	r1, #0
 80109a6:	d1f9      	bne.n	801099c <std::set_terminate(void (*)())+0x8>
 80109a8:	f3bf 8f5f 	dmb	sy
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	2000002c 	.word	0x2000002c

080109b4 <std::get_terminate()>:
 80109b4:	4b02      	ldr	r3, [pc, #8]	; (80109c0 <std::get_terminate()+0xc>)
 80109b6:	6818      	ldr	r0, [r3, #0]
 80109b8:	f3bf 8f5f 	dmb	sy
 80109bc:	4770      	bx	lr
 80109be:	bf00      	nop
 80109c0:	2000002c 	.word	0x2000002c

080109c4 <std::terminate()>:
 80109c4:	b508      	push	{r3, lr}
 80109c6:	f7ff fff5 	bl	80109b4 <std::get_terminate()>
 80109ca:	f7ff ffde 	bl	801098a <__cxxabiv1::__terminate(void (*)())>

080109ce <__cxxabiv1::__unexpected(void (*)())>:
 80109ce:	b508      	push	{r3, lr}
 80109d0:	4780      	blx	r0
 80109d2:	f7ff fff7 	bl	80109c4 <std::terminate()>
	...

080109d8 <std::set_unexpected(void (*)())>:
 80109d8:	4602      	mov	r2, r0
 80109da:	f3bf 8f5f 	dmb	sy
 80109de:	4b05      	ldr	r3, [pc, #20]	; (80109f4 <std::set_unexpected(void (*)())+0x1c>)
 80109e0:	e853 0f00 	ldrex	r0, [r3]
 80109e4:	e843 2100 	strex	r1, r2, [r3]
 80109e8:	2900      	cmp	r1, #0
 80109ea:	d1f9      	bne.n	80109e0 <std::set_unexpected(void (*)())+0x8>
 80109ec:	f3bf 8f5f 	dmb	sy
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	20000030 	.word	0x20000030

080109f8 <std::get_unexpected()>:
 80109f8:	4b02      	ldr	r3, [pc, #8]	; (8010a04 <std::get_unexpected()+0xc>)
 80109fa:	6818      	ldr	r0, [r3, #0]
 80109fc:	f3bf 8f5f 	dmb	sy
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	20000030 	.word	0x20000030

08010a08 <std::unexpected()>:
 8010a08:	b508      	push	{r3, lr}
 8010a0a:	f7ff fff5 	bl	80109f8 <std::get_unexpected()>
 8010a0e:	f7ff ffde 	bl	80109ce <__cxxabiv1::__unexpected(void (*)())>

08010a12 <std::type_info::~type_info()>:
 8010a12:	4770      	bx	lr

08010a14 <std::type_info::__is_pointer_p() const>:
 8010a14:	2000      	movs	r0, #0
 8010a16:	4770      	bx	lr

08010a18 <std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8010a18:	2000      	movs	r0, #0
 8010a1a:	4770      	bx	lr

08010a1c <std::type_info::~type_info()>:
 8010a1c:	b510      	push	{r4, lr}
 8010a1e:	4604      	mov	r4, r0
 8010a20:	f7ff fc86 	bl	8010330 <operator delete(void*)>
 8010a24:	4620      	mov	r0, r4
 8010a26:	bd10      	pop	{r4, pc}

08010a28 <std::type_info::operator==(std::type_info const&) const>:
 8010a28:	4281      	cmp	r1, r0
 8010a2a:	b508      	push	{r3, lr}
 8010a2c:	d00e      	beq.n	8010a4c <std::type_info::operator==(std::type_info const&) const+0x24>
 8010a2e:	6840      	ldr	r0, [r0, #4]
 8010a30:	7803      	ldrb	r3, [r0, #0]
 8010a32:	2b2a      	cmp	r3, #42	; 0x2a
 8010a34:	d00c      	beq.n	8010a50 <std::type_info::operator==(std::type_info const&) const+0x28>
 8010a36:	6849      	ldr	r1, [r1, #4]
 8010a38:	780b      	ldrb	r3, [r1, #0]
 8010a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8010a3c:	bf08      	it	eq
 8010a3e:	3101      	addeq	r1, #1
 8010a40:	f7fe f8fa 	bl	800ec38 <strcmp>
 8010a44:	fab0 f080 	clz	r0, r0
 8010a48:	0940      	lsrs	r0, r0, #5
 8010a4a:	bd08      	pop	{r3, pc}
 8010a4c:	2001      	movs	r0, #1
 8010a4e:	bd08      	pop	{r3, pc}
 8010a50:	2000      	movs	r0, #0
 8010a52:	bd08      	pop	{r3, pc}

08010a54 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 8010a54:	f7ff bfe8 	b.w	8010a28 <std::type_info::operator==(std::type_info const&) const>

08010a58 <__cxa_end_cleanup>:
 8010a58:	b41e      	push	{r1, r2, r3, r4}
 8010a5a:	f000 f89a 	bl	8010b92 <__gnu_end_cleanup>
 8010a5e:	bc1e      	pop	{r1, r2, r3, r4}
 8010a60:	f7f5 fda0 	bl	80065a4 <_Unwind_Resume>

08010a64 <__cxxabiv1::__is_gxx_exception_class(char*)>:
 8010a64:	7803      	ldrb	r3, [r0, #0]
 8010a66:	2b47      	cmp	r3, #71	; 0x47
 8010a68:	d117      	bne.n	8010a9a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010a6a:	7843      	ldrb	r3, [r0, #1]
 8010a6c:	2b4e      	cmp	r3, #78	; 0x4e
 8010a6e:	d114      	bne.n	8010a9a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010a70:	7883      	ldrb	r3, [r0, #2]
 8010a72:	2b55      	cmp	r3, #85	; 0x55
 8010a74:	d111      	bne.n	8010a9a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010a76:	78c3      	ldrb	r3, [r0, #3]
 8010a78:	2b43      	cmp	r3, #67	; 0x43
 8010a7a:	d10e      	bne.n	8010a9a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010a7c:	7903      	ldrb	r3, [r0, #4]
 8010a7e:	2b43      	cmp	r3, #67	; 0x43
 8010a80:	d10b      	bne.n	8010a9a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010a82:	7943      	ldrb	r3, [r0, #5]
 8010a84:	2b2b      	cmp	r3, #43	; 0x2b
 8010a86:	d108      	bne.n	8010a9a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010a88:	7983      	ldrb	r3, [r0, #6]
 8010a8a:	2b2b      	cmp	r3, #43	; 0x2b
 8010a8c:	d105      	bne.n	8010a9a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010a8e:	79c0      	ldrb	r0, [r0, #7]
 8010a90:	2801      	cmp	r0, #1
 8010a92:	bf8c      	ite	hi
 8010a94:	2000      	movhi	r0, #0
 8010a96:	2001      	movls	r0, #1
 8010a98:	4770      	bx	lr
 8010a9a:	2000      	movs	r0, #0
 8010a9c:	4770      	bx	lr
	...

08010aa0 <__cxa_type_match>:
 8010aa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010aa4:	461d      	mov	r5, r3
 8010aa6:	7803      	ldrb	r3, [r0, #0]
 8010aa8:	460e      	mov	r6, r1
 8010aaa:	2b47      	cmp	r3, #71	; 0x47
 8010aac:	4602      	mov	r2, r0
 8010aae:	79c1      	ldrb	r1, [r0, #7]
 8010ab0:	d143      	bne.n	8010b3a <__cxa_type_match+0x9a>
 8010ab2:	7843      	ldrb	r3, [r0, #1]
 8010ab4:	2b4e      	cmp	r3, #78	; 0x4e
 8010ab6:	d140      	bne.n	8010b3a <__cxa_type_match+0x9a>
 8010ab8:	7883      	ldrb	r3, [r0, #2]
 8010aba:	2b55      	cmp	r3, #85	; 0x55
 8010abc:	d13d      	bne.n	8010b3a <__cxa_type_match+0x9a>
 8010abe:	78c3      	ldrb	r3, [r0, #3]
 8010ac0:	2b43      	cmp	r3, #67	; 0x43
 8010ac2:	d13a      	bne.n	8010b3a <__cxa_type_match+0x9a>
 8010ac4:	7903      	ldrb	r3, [r0, #4]
 8010ac6:	2b46      	cmp	r3, #70	; 0x46
 8010ac8:	d137      	bne.n	8010b3a <__cxa_type_match+0x9a>
 8010aca:	7943      	ldrb	r3, [r0, #5]
 8010acc:	2b4f      	cmp	r3, #79	; 0x4f
 8010ace:	d134      	bne.n	8010b3a <__cxa_type_match+0x9a>
 8010ad0:	7983      	ldrb	r3, [r0, #6]
 8010ad2:	2b52      	cmp	r3, #82	; 0x52
 8010ad4:	d131      	bne.n	8010b3a <__cxa_type_match+0x9a>
 8010ad6:	2900      	cmp	r1, #0
 8010ad8:	d12f      	bne.n	8010b3a <__cxa_type_match+0x9a>
 8010ada:	4608      	mov	r0, r1
 8010adc:	2301      	movs	r3, #1
 8010ade:	2400      	movs	r4, #0
 8010ae0:	9401      	str	r4, [sp, #4]
 8010ae2:	b97b      	cbnz	r3, 8010b04 <__cxa_type_match+0x64>
 8010ae4:	b980      	cbnz	r0, 8010b08 <__cxa_type_match+0x68>
 8010ae6:	2901      	cmp	r1, #1
 8010ae8:	bf0a      	itet	eq
 8010aea:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8010aee:	f1a2 0320 	subne.w	r3, r2, #32
 8010af2:	3b78      	subeq	r3, #120	; 0x78
 8010af4:	2901      	cmp	r1, #1
 8010af6:	bf0c      	ite	eq
 8010af8:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8010afc:	3258      	addne	r2, #88	; 0x58
 8010afe:	681c      	ldr	r4, [r3, #0]
 8010b00:	9201      	str	r2, [sp, #4]
 8010b02:	e002      	b.n	8010b0a <__cxa_type_match+0x6a>
 8010b04:	4c12      	ldr	r4, [pc, #72]	; (8010b50 <__cxa_type_match+0xb0>)
 8010b06:	e000      	b.n	8010b0a <__cxa_type_match+0x6a>
 8010b08:	4c12      	ldr	r4, [pc, #72]	; (8010b54 <__cxa_type_match+0xb4>)
 8010b0a:	6823      	ldr	r3, [r4, #0]
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	689b      	ldr	r3, [r3, #8]
 8010b10:	4798      	blx	r3
 8010b12:	b120      	cbz	r0, 8010b1e <__cxa_type_match+0x7e>
 8010b14:	9b01      	ldr	r3, [sp, #4]
 8010b16:	2702      	movs	r7, #2
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	9301      	str	r3, [sp, #4]
 8010b1c:	e000      	b.n	8010b20 <__cxa_type_match+0x80>
 8010b1e:	2701      	movs	r7, #1
 8010b20:	6833      	ldr	r3, [r6, #0]
 8010b22:	aa01      	add	r2, sp, #4
 8010b24:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8010b28:	4621      	mov	r1, r4
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	4630      	mov	r0, r6
 8010b2e:	47c0      	blx	r8
 8010b30:	b158      	cbz	r0, 8010b4a <__cxa_type_match+0xaa>
 8010b32:	9b01      	ldr	r3, [sp, #4]
 8010b34:	4638      	mov	r0, r7
 8010b36:	602b      	str	r3, [r5, #0]
 8010b38:	e007      	b.n	8010b4a <__cxa_type_match+0xaa>
 8010b3a:	4610      	mov	r0, r2
 8010b3c:	f7ff ff92 	bl	8010a64 <__cxxabiv1::__is_gxx_exception_class(char*)>
 8010b40:	f080 0001 	eor.w	r0, r0, #1
 8010b44:	b2c0      	uxtb	r0, r0
 8010b46:	2300      	movs	r3, #0
 8010b48:	e7c9      	b.n	8010ade <__cxa_type_match+0x3e>
 8010b4a:	b002      	add	sp, #8
 8010b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b50:	08013688 	.word	0x08013688
 8010b54:	080136e0 	.word	0x080136e0

08010b58 <__cxa_begin_cleanup>:
 8010b58:	b510      	push	{r4, lr}
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	f000 f988 	bl	8010e70 <__cxa_get_globals>
 8010b60:	4602      	mov	r2, r0
 8010b62:	4620      	mov	r0, r4
 8010b64:	f1a4 0120 	sub.w	r1, r4, #32
 8010b68:	f7ff ff7c 	bl	8010a64 <__cxxabiv1::__is_gxx_exception_class(char*)>
 8010b6c:	b150      	cbz	r0, 8010b84 <__cxa_begin_cleanup+0x2c>
 8010b6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010b72:	3301      	adds	r3, #1
 8010b74:	2b01      	cmp	r3, #1
 8010b76:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b7a:	d108      	bne.n	8010b8e <__cxa_begin_cleanup+0x36>
 8010b7c:	6893      	ldr	r3, [r2, #8]
 8010b7e:	f844 3c08 	str.w	r3, [r4, #-8]
 8010b82:	e003      	b.n	8010b8c <__cxa_begin_cleanup+0x34>
 8010b84:	6893      	ldr	r3, [r2, #8]
 8010b86:	b10b      	cbz	r3, 8010b8c <__cxa_begin_cleanup+0x34>
 8010b88:	f7ff ff1c 	bl	80109c4 <std::terminate()>
 8010b8c:	6091      	str	r1, [r2, #8]
 8010b8e:	2001      	movs	r0, #1
 8010b90:	bd10      	pop	{r4, pc}

08010b92 <__gnu_end_cleanup>:
 8010b92:	b510      	push	{r4, lr}
 8010b94:	f000 f96c 	bl	8010e70 <__cxa_get_globals>
 8010b98:	6882      	ldr	r2, [r0, #8]
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	b90a      	cbnz	r2, 8010ba2 <__gnu_end_cleanup+0x10>
 8010b9e:	f7ff ff11 	bl	80109c4 <std::terminate()>
 8010ba2:	f102 0420 	add.w	r4, r2, #32
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f7ff ff5c 	bl	8010a64 <__cxxabiv1::__is_gxx_exception_class(char*)>
 8010bac:	b138      	cbz	r0, 8010bbe <__gnu_end_cleanup+0x2c>
 8010bae:	69d3      	ldr	r3, [r2, #28]
 8010bb0:	3b01      	subs	r3, #1
 8010bb2:	61d3      	str	r3, [r2, #28]
 8010bb4:	b923      	cbnz	r3, 8010bc0 <__gnu_end_cleanup+0x2e>
 8010bb6:	6990      	ldr	r0, [r2, #24]
 8010bb8:	6088      	str	r0, [r1, #8]
 8010bba:	6193      	str	r3, [r2, #24]
 8010bbc:	e000      	b.n	8010bc0 <__gnu_end_cleanup+0x2e>
 8010bbe:	6088      	str	r0, [r1, #8]
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	bd10      	pop	{r4, pc}

08010bc4 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8010bc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010bc6:	2310      	movs	r3, #16
 8010bc8:	9302      	str	r3, [sp, #8]
 8010bca:	6803      	ldr	r3, [r0, #0]
 8010bcc:	2400      	movs	r4, #0
 8010bce:	4615      	mov	r5, r2
 8010bd0:	699e      	ldr	r6, [r3, #24]
 8010bd2:	9400      	str	r4, [sp, #0]
 8010bd4:	466b      	mov	r3, sp
 8010bd6:	f88d 4004 	strb.w	r4, [sp, #4]
 8010bda:	9403      	str	r4, [sp, #12]
 8010bdc:	6812      	ldr	r2, [r2, #0]
 8010bde:	47b0      	blx	r6
 8010be0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010be4:	f003 0306 	and.w	r3, r3, #6
 8010be8:	2b06      	cmp	r3, #6
 8010bea:	bf11      	iteee	ne
 8010bec:	4620      	movne	r0, r4
 8010bee:	9b00      	ldreq	r3, [sp, #0]
 8010bf0:	2001      	moveq	r0, #1
 8010bf2:	602b      	streq	r3, [r5, #0]
 8010bf4:	b004      	add	sp, #16
 8010bf6:	bd70      	pop	{r4, r5, r6, pc}

08010bf8 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8010bf8:	9800      	ldr	r0, [sp, #0]
 8010bfa:	4290      	cmp	r0, r2
 8010bfc:	bf0c      	ite	eq
 8010bfe:	2006      	moveq	r0, #6
 8010c00:	2001      	movne	r0, #1
 8010c02:	4770      	bx	lr

08010c04 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8010c04:	b510      	push	{r4, lr}
 8010c06:	4604      	mov	r4, r0
 8010c08:	4b02      	ldr	r3, [pc, #8]	; (8010c14 <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
 8010c0a:	6003      	str	r3, [r0, #0]
 8010c0c:	f7ff ff01 	bl	8010a12 <std::type_info::~type_info()>
 8010c10:	4620      	mov	r0, r4
 8010c12:	bd10      	pop	{r4, pc}
 8010c14:	080135b0 	.word	0x080135b0

08010c18 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8010c18:	b510      	push	{r4, lr}
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	f7ff fff2 	bl	8010c04 <__cxxabiv1::__class_type_info::~__class_type_info()>
 8010c20:	4620      	mov	r0, r4
 8010c22:	f7ff fb85 	bl	8010330 <operator delete(void*)>
 8010c26:	4620      	mov	r0, r4
 8010c28:	bd10      	pop	{r4, pc}

08010c2a <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8010c2a:	b538      	push	{r3, r4, r5, lr}
 8010c2c:	4615      	mov	r5, r2
 8010c2e:	461c      	mov	r4, r3
 8010c30:	f7ff fefa 	bl	8010a28 <std::type_info::operator==(std::type_info const&) const>
 8010c34:	b120      	cbz	r0, 8010c40 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x16>
 8010c36:	2308      	movs	r3, #8
 8010c38:	60e3      	str	r3, [r4, #12]
 8010c3a:	2306      	movs	r3, #6
 8010c3c:	6025      	str	r5, [r4, #0]
 8010c3e:	7123      	strb	r3, [r4, #4]
 8010c40:	bd38      	pop	{r3, r4, r5, pc}

08010c42 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8010c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c46:	9e06      	ldr	r6, [sp, #24]
 8010c48:	4698      	mov	r8, r3
 8010c4a:	9b08      	ldr	r3, [sp, #32]
 8010c4c:	4607      	mov	r7, r0
 8010c4e:	429e      	cmp	r6, r3
 8010c50:	4615      	mov	r5, r2
 8010c52:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010c54:	d103      	bne.n	8010c5e <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x1c>
 8010c56:	9907      	ldr	r1, [sp, #28]
 8010c58:	f7ff fee6 	bl	8010a28 <std::type_info::operator==(std::type_info const&) const>
 8010c5c:	b948      	cbnz	r0, 8010c72 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x30>
 8010c5e:	4641      	mov	r1, r8
 8010c60:	4638      	mov	r0, r7
 8010c62:	f7ff fee1 	bl	8010a28 <std::type_info::operator==(std::type_info const&) const>
 8010c66:	b128      	cbz	r0, 8010c74 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	6026      	str	r6, [r4, #0]
 8010c6c:	7125      	strb	r5, [r4, #4]
 8010c6e:	71a3      	strb	r3, [r4, #6]
 8010c70:	e000      	b.n	8010c74 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8010c72:	7165      	strb	r5, [r4, #5]
 8010c74:	2000      	movs	r0, #0
 8010c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010c7a <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 8010c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c7e:	4605      	mov	r5, r0
 8010c80:	460c      	mov	r4, r1
 8010c82:	4616      	mov	r6, r2
 8010c84:	461f      	mov	r7, r3
 8010c86:	f7ff fecf 	bl	8010a28 <std::type_info::operator==(std::type_info const&) const>
 8010c8a:	b948      	cbnz	r0, 8010ca0 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 8010c8c:	2f03      	cmp	r7, #3
 8010c8e:	d807      	bhi.n	8010ca0 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	4632      	mov	r2, r6
 8010c94:	4629      	mov	r1, r5
 8010c96:	4620      	mov	r0, r4
 8010c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c9c:	695b      	ldr	r3, [r3, #20]
 8010c9e:	4718      	bx	r3
 8010ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ca4 <__cxa_pure_virtual>:
 8010ca4:	b508      	push	{r3, lr}
 8010ca6:	221b      	movs	r2, #27
 8010ca8:	4902      	ldr	r1, [pc, #8]	; (8010cb4 <__cxa_pure_virtual+0x10>)
 8010caa:	2002      	movs	r0, #2
 8010cac:	f000 fc06 	bl	80114bc <write>
 8010cb0:	f7ff fe88 	bl	80109c4 <std::terminate()>
 8010cb4:	08013602 	.word	0x08013602

08010cb8 <__cxa_deleted_virtual>:
 8010cb8:	b508      	push	{r3, lr}
 8010cba:	221e      	movs	r2, #30
 8010cbc:	4902      	ldr	r1, [pc, #8]	; (8010cc8 <__cxa_deleted_virtual+0x10>)
 8010cbe:	2002      	movs	r0, #2
 8010cc0:	f000 fbfc 	bl	80114bc <write>
 8010cc4:	f7ff fe7e 	bl	80109c4 <std::terminate()>
 8010cc8:	0801361e 	.word	0x0801361e

08010ccc <__cxxabiv1::__is_gxx_exception_class(char*)>:
 8010ccc:	7803      	ldrb	r3, [r0, #0]
 8010cce:	2b47      	cmp	r3, #71	; 0x47
 8010cd0:	d117      	bne.n	8010d02 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010cd2:	7843      	ldrb	r3, [r0, #1]
 8010cd4:	2b4e      	cmp	r3, #78	; 0x4e
 8010cd6:	d114      	bne.n	8010d02 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010cd8:	7883      	ldrb	r3, [r0, #2]
 8010cda:	2b55      	cmp	r3, #85	; 0x55
 8010cdc:	d111      	bne.n	8010d02 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010cde:	78c3      	ldrb	r3, [r0, #3]
 8010ce0:	2b43      	cmp	r3, #67	; 0x43
 8010ce2:	d10e      	bne.n	8010d02 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010ce4:	7903      	ldrb	r3, [r0, #4]
 8010ce6:	2b43      	cmp	r3, #67	; 0x43
 8010ce8:	d10b      	bne.n	8010d02 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010cea:	7943      	ldrb	r3, [r0, #5]
 8010cec:	2b2b      	cmp	r3, #43	; 0x2b
 8010cee:	d108      	bne.n	8010d02 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010cf0:	7983      	ldrb	r3, [r0, #6]
 8010cf2:	2b2b      	cmp	r3, #43	; 0x2b
 8010cf4:	d105      	bne.n	8010d02 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010cf6:	79c0      	ldrb	r0, [r0, #7]
 8010cf8:	2801      	cmp	r0, #1
 8010cfa:	bf8c      	ite	hi
 8010cfc:	2000      	movhi	r0, #0
 8010cfe:	2001      	movls	r0, #1
 8010d00:	4770      	bx	lr
 8010d02:	2000      	movs	r0, #0
 8010d04:	4770      	bx	lr

08010d06 <__cxa_call_terminate>:
 8010d06:	b510      	push	{r4, lr}
 8010d08:	4604      	mov	r4, r0
 8010d0a:	b148      	cbz	r0, 8010d20 <__cxa_call_terminate+0x1a>
 8010d0c:	f000 f855 	bl	8010dba <__cxa_begin_catch>
 8010d10:	4620      	mov	r0, r4
 8010d12:	f7ff ffdb 	bl	8010ccc <__cxxabiv1::__is_gxx_exception_class(char*)>
 8010d16:	b118      	cbz	r0, 8010d20 <__cxa_call_terminate+0x1a>
 8010d18:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8010d1c:	f7ff fe35 	bl	801098a <__cxxabiv1::__terminate(void (*)())>
 8010d20:	f7ff fe50 	bl	80109c4 <std::terminate()>

08010d24 <__cxa_call_unexpected>:
 8010d24:	b538      	push	{r3, r4, r5, lr}
 8010d26:	4602      	mov	r2, r0
 8010d28:	f7ff ffd0 	bl	8010ccc <__cxxabiv1::__is_gxx_exception_class(char*)>
 8010d2c:	b118      	cbz	r0, 8010d36 <__cxa_call_unexpected+0x12>
 8010d2e:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8010d32:	2500      	movs	r5, #0
 8010d34:	e001      	b.n	8010d3a <__cxa_call_unexpected+0x16>
 8010d36:	4604      	mov	r4, r0
 8010d38:	2501      	movs	r5, #1
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	f000 f83d 	bl	8010dba <__cxa_begin_catch>
 8010d40:	b10d      	cbz	r5, 8010d46 <__cxa_call_unexpected+0x22>
 8010d42:	f7ff fe61 	bl	8010a08 <std::unexpected()>
 8010d46:	4620      	mov	r0, r4
 8010d48:	f7ff fe41 	bl	80109ce <__cxxabiv1::__unexpected(void (*)())>

08010d4c <std::set_new_handler(void (*)())>:
 8010d4c:	4602      	mov	r2, r0
 8010d4e:	f3bf 8f5f 	dmb	sy
 8010d52:	4b05      	ldr	r3, [pc, #20]	; (8010d68 <std::set_new_handler(void (*)())+0x1c>)
 8010d54:	e853 0f00 	ldrex	r0, [r3]
 8010d58:	e843 2100 	strex	r1, r2, [r3]
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	d1f9      	bne.n	8010d54 <std::set_new_handler(void (*)())+0x8>
 8010d60:	f3bf 8f5f 	dmb	sy
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	20000abc 	.word	0x20000abc

08010d6c <std::get_new_handler()>:
 8010d6c:	4b02      	ldr	r3, [pc, #8]	; (8010d78 <std::get_new_handler()+0xc>)
 8010d6e:	6818      	ldr	r0, [r3, #0]
 8010d70:	f3bf 8f5f 	dmb	sy
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop
 8010d78:	20000abc 	.word	0x20000abc

08010d7c <__cxxabiv1::__is_gxx_exception_class(char*)>:
 8010d7c:	7803      	ldrb	r3, [r0, #0]
 8010d7e:	2b47      	cmp	r3, #71	; 0x47
 8010d80:	d117      	bne.n	8010db2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010d82:	7843      	ldrb	r3, [r0, #1]
 8010d84:	2b4e      	cmp	r3, #78	; 0x4e
 8010d86:	d114      	bne.n	8010db2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010d88:	7883      	ldrb	r3, [r0, #2]
 8010d8a:	2b55      	cmp	r3, #85	; 0x55
 8010d8c:	d111      	bne.n	8010db2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010d8e:	78c3      	ldrb	r3, [r0, #3]
 8010d90:	2b43      	cmp	r3, #67	; 0x43
 8010d92:	d10e      	bne.n	8010db2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010d94:	7903      	ldrb	r3, [r0, #4]
 8010d96:	2b43      	cmp	r3, #67	; 0x43
 8010d98:	d10b      	bne.n	8010db2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010d9a:	7943      	ldrb	r3, [r0, #5]
 8010d9c:	2b2b      	cmp	r3, #43	; 0x2b
 8010d9e:	d108      	bne.n	8010db2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010da0:	7983      	ldrb	r3, [r0, #6]
 8010da2:	2b2b      	cmp	r3, #43	; 0x2b
 8010da4:	d105      	bne.n	8010db2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8010da6:	79c0      	ldrb	r0, [r0, #7]
 8010da8:	2801      	cmp	r0, #1
 8010daa:	bf8c      	ite	hi
 8010dac:	2000      	movhi	r0, #0
 8010dae:	2001      	movls	r0, #1
 8010db0:	4770      	bx	lr
 8010db2:	2000      	movs	r0, #0
 8010db4:	4770      	bx	lr

08010db6 <__cxa_get_exception_ptr>:
 8010db6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8010db8:	4770      	bx	lr

08010dba <__cxa_begin_catch>:
 8010dba:	b538      	push	{r3, r4, r5, lr}
 8010dbc:	4605      	mov	r5, r0
 8010dbe:	f000 f857 	bl	8010e70 <__cxa_get_globals>
 8010dc2:	4601      	mov	r1, r0
 8010dc4:	6802      	ldr	r2, [r0, #0]
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f1a5 0420 	sub.w	r4, r5, #32
 8010dcc:	f7ff ffd6 	bl	8010d7c <__cxxabiv1::__is_gxx_exception_class(char*)>
 8010dd0:	b928      	cbnz	r0, 8010dde <__cxa_begin_catch+0x24>
 8010dd2:	b10a      	cbz	r2, 8010dd8 <__cxa_begin_catch+0x1e>
 8010dd4:	f7ff fdf6 	bl	80109c4 <std::terminate()>
 8010dd8:	600c      	str	r4, [r1, #0]
 8010dda:	4614      	mov	r4, r2
 8010ddc:	e015      	b.n	8010e0a <__cxa_begin_catch+0x50>
 8010dde:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8010de2:	4628      	mov	r0, r5
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	bfb4      	ite	lt
 8010de8:	f1c3 0301 	rsblt	r3, r3, #1
 8010dec:	3301      	addge	r3, #1
 8010dee:	f845 3c0c 	str.w	r3, [r5, #-12]
 8010df2:	684b      	ldr	r3, [r1, #4]
 8010df4:	42a2      	cmp	r2, r4
 8010df6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010dfa:	604b      	str	r3, [r1, #4]
 8010dfc:	bf1c      	itt	ne
 8010dfe:	f845 2c10 	strne.w	r2, [r5, #-16]
 8010e02:	600c      	strne	r4, [r1, #0]
 8010e04:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8010e06:	f7f5 f815 	bl	8005e34 <_Unwind_Complete>
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	bd38      	pop	{r3, r4, r5, pc}

08010e0e <__cxa_end_catch>:
 8010e0e:	b510      	push	{r4, lr}
 8010e10:	f000 f82a 	bl	8010e68 <__cxa_get_globals_fast>
 8010e14:	6802      	ldr	r2, [r0, #0]
 8010e16:	4601      	mov	r1, r0
 8010e18:	b1ea      	cbz	r2, 8010e56 <__cxa_end_catch+0x48>
 8010e1a:	f102 0420 	add.w	r4, r2, #32
 8010e1e:	4620      	mov	r0, r4
 8010e20:	f7ff ffac 	bl	8010d7c <__cxxabiv1::__is_gxx_exception_class(char*)>
 8010e24:	b908      	cbnz	r0, 8010e2a <__cxa_end_catch+0x1c>
 8010e26:	6008      	str	r0, [r1, #0]
 8010e28:	e00b      	b.n	8010e42 <__cxa_end_catch+0x34>
 8010e2a:	6953      	ldr	r3, [r2, #20]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	da04      	bge.n	8010e3a <__cxa_end_catch+0x2c>
 8010e30:	3301      	adds	r3, #1
 8010e32:	d10f      	bne.n	8010e54 <__cxa_end_catch+0x46>
 8010e34:	6910      	ldr	r0, [r2, #16]
 8010e36:	6008      	str	r0, [r1, #0]
 8010e38:	e00c      	b.n	8010e54 <__cxa_end_catch+0x46>
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	d106      	bne.n	8010e4c <__cxa_end_catch+0x3e>
 8010e3e:	6913      	ldr	r3, [r2, #16]
 8010e40:	600b      	str	r3, [r1, #0]
 8010e42:	4620      	mov	r0, r4
 8010e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e48:	f7f4 bff6 	b.w	8005e38 <_Unwind_DeleteException>
 8010e4c:	1c59      	adds	r1, r3, #1
 8010e4e:	d101      	bne.n	8010e54 <__cxa_end_catch+0x46>
 8010e50:	f7ff fdb8 	bl	80109c4 <std::terminate()>
 8010e54:	6153      	str	r3, [r2, #20]
 8010e56:	bd10      	pop	{r4, pc}

08010e58 <std::uncaught_exception()>:
 8010e58:	b508      	push	{r3, lr}
 8010e5a:	f000 f809 	bl	8010e70 <__cxa_get_globals>
 8010e5e:	6840      	ldr	r0, [r0, #4]
 8010e60:	3000      	adds	r0, #0
 8010e62:	bf18      	it	ne
 8010e64:	2001      	movne	r0, #1
 8010e66:	bd08      	pop	{r3, pc}

08010e68 <__cxa_get_globals_fast>:
 8010e68:	4800      	ldr	r0, [pc, #0]	; (8010e6c <__cxa_get_globals_fast+0x4>)
 8010e6a:	4770      	bx	lr
 8010e6c:	20000ac0 	.word	0x20000ac0

08010e70 <__cxa_get_globals>:
 8010e70:	4800      	ldr	r0, [pc, #0]	; (8010e74 <__cxa_get_globals+0x4>)
 8010e72:	4770      	bx	lr
 8010e74:	20000ac0 	.word	0x20000ac0

08010e78 <std::exception::~exception()>:
 8010e78:	4770      	bx	lr

08010e7a <std::bad_exception::~bad_exception()>:
 8010e7a:	4770      	bx	lr

08010e7c <std::exception::what() const>:
 8010e7c:	4800      	ldr	r0, [pc, #0]	; (8010e80 <std::exception::what() const+0x4>)
 8010e7e:	4770      	bx	lr
 8010e80:	080136b4 	.word	0x080136b4

08010e84 <std::bad_exception::what() const>:
 8010e84:	4800      	ldr	r0, [pc, #0]	; (8010e88 <std::bad_exception::what() const+0x4>)
 8010e86:	4770      	bx	lr
 8010e88:	080136c3 	.word	0x080136c3

08010e8c <std::exception::~exception()>:
 8010e8c:	b510      	push	{r4, lr}
 8010e8e:	4604      	mov	r4, r0
 8010e90:	f7ff fa4e 	bl	8010330 <operator delete(void*)>
 8010e94:	4620      	mov	r0, r4
 8010e96:	bd10      	pop	{r4, pc}

08010e98 <std::bad_exception::~bad_exception()>:
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	f7ff fa48 	bl	8010330 <operator delete(void*)>
 8010ea0:	4620      	mov	r0, r4
 8010ea2:	bd10      	pop	{r4, pc}

08010ea4 <__cxxabiv1::__forced_unwind::~__forced_unwind()>:
 8010ea4:	4770      	bx	lr

08010ea6 <__cxxabiv1::__forced_unwind::~__forced_unwind()>:
 8010ea6:	b510      	push	{r4, lr}
 8010ea8:	4604      	mov	r4, r0
 8010eaa:	f7ff fa41 	bl	8010330 <operator delete(void*)>
 8010eae:	4620      	mov	r0, r4
 8010eb0:	bd10      	pop	{r4, pc}

08010eb2 <__cxxabiv1::__foreign_exception::~__foreign_exception()>:
 8010eb2:	4770      	bx	lr

08010eb4 <__cxxabiv1::__foreign_exception::~__foreign_exception()>:
 8010eb4:	b510      	push	{r4, lr}
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	f7ff fa3a 	bl	8010330 <operator delete(void*)>
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	bd10      	pop	{r4, pc}

08010ec0 <__gnu_cxx::__verbose_terminate_handler()>:
 8010ec0:	4b20      	ldr	r3, [pc, #128]	; (8010f44 <__gnu_cxx::__verbose_terminate_handler()+0x84>)
 8010ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ec4:	781a      	ldrb	r2, [r3, #0]
 8010ec6:	4d20      	ldr	r5, [pc, #128]	; (8010f48 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
 8010ec8:	b11a      	cbz	r2, 8010ed2 <__gnu_cxx::__verbose_terminate_handler()+0x12>
 8010eca:	682b      	ldr	r3, [r5, #0]
 8010ecc:	481f      	ldr	r0, [pc, #124]	; (8010f4c <__gnu_cxx::__verbose_terminate_handler()+0x8c>)
 8010ece:	68d9      	ldr	r1, [r3, #12]
 8010ed0:	e033      	b.n	8010f3a <__gnu_cxx::__verbose_terminate_handler()+0x7a>
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	701a      	strb	r2, [r3, #0]
 8010ed6:	f000 f841 	bl	8010f5c <__cxa_current_exception_type>
 8010eda:	b358      	cbz	r0, 8010f34 <__gnu_cxx::__verbose_terminate_handler()+0x74>
 8010edc:	6844      	ldr	r4, [r0, #4]
 8010ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ee2:	7823      	ldrb	r3, [r4, #0]
 8010ee4:	4f18      	ldr	r7, [pc, #96]	; (8010f48 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
 8010ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8010ee8:	ab02      	add	r3, sp, #8
 8010eea:	bf08      	it	eq
 8010eec:	3401      	addeq	r4, #1
 8010eee:	f843 2d04 	str.w	r2, [r3, #-4]!
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	4611      	mov	r1, r2
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f7fd fe2e 	bl	800eb58 <__cxa_demangle>
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	4606      	mov	r6, r0
 8010f00:	68d9      	ldr	r1, [r3, #12]
 8010f02:	4813      	ldr	r0, [pc, #76]	; (8010f50 <__gnu_cxx::__verbose_terminate_handler()+0x90>)
 8010f04:	f000 f8a6 	bl	8011054 <fputs>
 8010f08:	9b01      	ldr	r3, [sp, #4]
 8010f0a:	b91b      	cbnz	r3, 8010f14 <__gnu_cxx::__verbose_terminate_handler()+0x54>
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	4630      	mov	r0, r6
 8010f10:	68d9      	ldr	r1, [r3, #12]
 8010f12:	e002      	b.n	8010f1a <__gnu_cxx::__verbose_terminate_handler()+0x5a>
 8010f14:	4620      	mov	r0, r4
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	68d9      	ldr	r1, [r3, #12]
 8010f1a:	f000 f89b 	bl	8011054 <fputs>
 8010f1e:	682b      	ldr	r3, [r5, #0]
 8010f20:	480c      	ldr	r0, [pc, #48]	; (8010f54 <__gnu_cxx::__verbose_terminate_handler()+0x94>)
 8010f22:	68d9      	ldr	r1, [r3, #12]
 8010f24:	f000 f896 	bl	8011054 <fputs>
 8010f28:	9b01      	ldr	r3, [sp, #4]
 8010f2a:	b943      	cbnz	r3, 8010f3e <__gnu_cxx::__verbose_terminate_handler()+0x7e>
 8010f2c:	4630      	mov	r0, r6
 8010f2e:	f000 f8c7 	bl	80110c0 <free>
 8010f32:	e004      	b.n	8010f3e <__gnu_cxx::__verbose_terminate_handler()+0x7e>
 8010f34:	682b      	ldr	r3, [r5, #0]
 8010f36:	4808      	ldr	r0, [pc, #32]	; (8010f58 <__gnu_cxx::__verbose_terminate_handler()+0x98>)
 8010f38:	68d9      	ldr	r1, [r3, #12]
 8010f3a:	f000 f88b 	bl	8011054 <fputs>
 8010f3e:	f000 f81a 	bl	8010f76 <abort>
 8010f42:	bf00      	nop
 8010f44:	20000acc 	.word	0x20000acc
 8010f48:	20000094 	.word	0x20000094
 8010f4c:	0801373c 	.word	0x0801373c
 8010f50:	0801375a 	.word	0x0801375a
 8010f54:	0801378b 	.word	0x0801378b
 8010f58:	0801378e 	.word	0x0801378e

08010f5c <__cxa_current_exception_type>:
 8010f5c:	b508      	push	{r3, lr}
 8010f5e:	f7ff ff87 	bl	8010e70 <__cxa_get_globals>
 8010f62:	6800      	ldr	r0, [r0, #0]
 8010f64:	b130      	cbz	r0, 8010f74 <__cxa_current_exception_type+0x18>
 8010f66:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8010f6a:	2b01      	cmp	r3, #1
 8010f6c:	bf04      	itt	eq
 8010f6e:	6800      	ldreq	r0, [r0, #0]
 8010f70:	3878      	subeq	r0, #120	; 0x78
 8010f72:	6800      	ldr	r0, [r0, #0]
 8010f74:	bd08      	pop	{r3, pc}

08010f76 <abort>:
 8010f76:	b508      	push	{r3, lr}
 8010f78:	2006      	movs	r0, #6
 8010f7a:	f000 f9f9 	bl	8011370 <raise>
 8010f7e:	2001      	movs	r0, #1
 8010f80:	f001 faaa 	bl	80124d8 <_exit>

08010f84 <exit>:
 8010f84:	b508      	push	{r3, lr}
 8010f86:	4b07      	ldr	r3, [pc, #28]	; (8010fa4 <exit+0x20>)
 8010f88:	4604      	mov	r4, r0
 8010f8a:	b113      	cbz	r3, 8010f92 <exit+0xe>
 8010f8c:	2100      	movs	r1, #0
 8010f8e:	f3af 8000 	nop.w
 8010f92:	4b05      	ldr	r3, [pc, #20]	; (8010fa8 <exit+0x24>)
 8010f94:	6818      	ldr	r0, [r3, #0]
 8010f96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010f98:	b103      	cbz	r3, 8010f9c <exit+0x18>
 8010f9a:	4798      	blx	r3
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	f001 fa9b 	bl	80124d8 <_exit>
 8010fa2:	bf00      	nop
 8010fa4:	00000000 	.word	0x00000000
 8010fa8:	08013fb4 	.word	0x08013fb4

08010fac <_fputs_r>:
 8010fac:	b570      	push	{r4, r5, r6, lr}
 8010fae:	460d      	mov	r5, r1
 8010fb0:	4614      	mov	r4, r2
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	b118      	cbz	r0, 8010fbe <_fputs_r+0x12>
 8010fb6:	6983      	ldr	r3, [r0, #24]
 8010fb8:	b90b      	cbnz	r3, 8010fbe <_fputs_r+0x12>
 8010fba:	f000 fc6f 	bl	801189c <__sinit>
 8010fbe:	4b22      	ldr	r3, [pc, #136]	; (8011048 <_fputs_r+0x9c>)
 8010fc0:	429c      	cmp	r4, r3
 8010fc2:	d101      	bne.n	8010fc8 <_fputs_r+0x1c>
 8010fc4:	6874      	ldr	r4, [r6, #4]
 8010fc6:	e008      	b.n	8010fda <_fputs_r+0x2e>
 8010fc8:	4b20      	ldr	r3, [pc, #128]	; (801104c <_fputs_r+0xa0>)
 8010fca:	429c      	cmp	r4, r3
 8010fcc:	d101      	bne.n	8010fd2 <_fputs_r+0x26>
 8010fce:	68b4      	ldr	r4, [r6, #8]
 8010fd0:	e003      	b.n	8010fda <_fputs_r+0x2e>
 8010fd2:	4b1f      	ldr	r3, [pc, #124]	; (8011050 <_fputs_r+0xa4>)
 8010fd4:	429c      	cmp	r4, r3
 8010fd6:	bf08      	it	eq
 8010fd8:	68f4      	ldreq	r4, [r6, #12]
 8010fda:	89a3      	ldrh	r3, [r4, #12]
 8010fdc:	071a      	lsls	r2, r3, #28
 8010fde:	d501      	bpl.n	8010fe4 <_fputs_r+0x38>
 8010fe0:	6923      	ldr	r3, [r4, #16]
 8010fe2:	b99b      	cbnz	r3, 801100c <_fputs_r+0x60>
 8010fe4:	4621      	mov	r1, r4
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	f000 fae0 	bl	80115ac <__swsetup_r>
 8010fec:	b170      	cbz	r0, 801100c <_fputs_r+0x60>
 8010fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ff2:	bd70      	pop	{r4, r5, r6, pc}
 8010ff4:	68a3      	ldr	r3, [r4, #8]
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	60a3      	str	r3, [r4, #8]
 8010ffc:	db0b      	blt.n	8011016 <_fputs_r+0x6a>
 8010ffe:	6823      	ldr	r3, [r4, #0]
 8011000:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011004:	701a      	strb	r2, [r3, #0]
 8011006:	6823      	ldr	r3, [r4, #0]
 8011008:	3301      	adds	r3, #1
 801100a:	6023      	str	r3, [r4, #0]
 801100c:	f815 0b01 	ldrb.w	r0, [r5], #1
 8011010:	2800      	cmp	r0, #0
 8011012:	d1ef      	bne.n	8010ff4 <_fputs_r+0x48>
 8011014:	e016      	b.n	8011044 <_fputs_r+0x98>
 8011016:	69a2      	ldr	r2, [r4, #24]
 8011018:	4293      	cmp	r3, r2
 801101a:	db09      	blt.n	8011030 <_fputs_r+0x84>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011022:	701a      	strb	r2, [r3, #0]
 8011024:	6823      	ldr	r3, [r4, #0]
 8011026:	7819      	ldrb	r1, [r3, #0]
 8011028:	290a      	cmp	r1, #10
 801102a:	d1ed      	bne.n	8011008 <_fputs_r+0x5c>
 801102c:	4622      	mov	r2, r4
 801102e:	e002      	b.n	8011036 <_fputs_r+0x8a>
 8011030:	4622      	mov	r2, r4
 8011032:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011036:	4630      	mov	r0, r6
 8011038:	f000 fa4a 	bl	80114d0 <__swbuf_r>
 801103c:	1c43      	adds	r3, r0, #1
 801103e:	4258      	negs	r0, r3
 8011040:	4158      	adcs	r0, r3
 8011042:	e7d3      	b.n	8010fec <_fputs_r+0x40>
 8011044:	bd70      	pop	{r4, r5, r6, pc}
 8011046:	bf00      	nop
 8011048:	08013fb8 	.word	0x08013fb8
 801104c:	08013fd8 	.word	0x08013fd8
 8011050:	08013ff8 	.word	0x08013ff8

08011054 <fputs>:
 8011054:	4b02      	ldr	r3, [pc, #8]	; (8011060 <fputs+0xc>)
 8011056:	460a      	mov	r2, r1
 8011058:	4601      	mov	r1, r0
 801105a:	6818      	ldr	r0, [r3, #0]
 801105c:	f7ff bfa6 	b.w	8010fac <_fputs_r>
 8011060:	20000094 	.word	0x20000094

08011064 <__libc_init_array>:
 8011064:	4b0e      	ldr	r3, [pc, #56]	; (80110a0 <__libc_init_array+0x3c>)
 8011066:	b570      	push	{r4, r5, r6, lr}
 8011068:	461e      	mov	r6, r3
 801106a:	4c0e      	ldr	r4, [pc, #56]	; (80110a4 <__libc_init_array+0x40>)
 801106c:	2500      	movs	r5, #0
 801106e:	1ae4      	subs	r4, r4, r3
 8011070:	10a4      	asrs	r4, r4, #2
 8011072:	42a5      	cmp	r5, r4
 8011074:	d004      	beq.n	8011080 <__libc_init_array+0x1c>
 8011076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801107a:	4798      	blx	r3
 801107c:	3501      	adds	r5, #1
 801107e:	e7f8      	b.n	8011072 <__libc_init_array+0xe>
 8011080:	f001 fa2e 	bl	80124e0 <_init>
 8011084:	4b08      	ldr	r3, [pc, #32]	; (80110a8 <__libc_init_array+0x44>)
 8011086:	4c09      	ldr	r4, [pc, #36]	; (80110ac <__libc_init_array+0x48>)
 8011088:	461e      	mov	r6, r3
 801108a:	1ae4      	subs	r4, r4, r3
 801108c:	10a4      	asrs	r4, r4, #2
 801108e:	2500      	movs	r5, #0
 8011090:	42a5      	cmp	r5, r4
 8011092:	d004      	beq.n	801109e <__libc_init_array+0x3a>
 8011094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011098:	4798      	blx	r3
 801109a:	3501      	adds	r5, #1
 801109c:	e7f8      	b.n	8011090 <__libc_init_array+0x2c>
 801109e:	bd70      	pop	{r4, r5, r6, pc}
 80110a0:	08014244 	.word	0x08014244
 80110a4:	08014244 	.word	0x08014244
 80110a8:	08014244 	.word	0x08014244
 80110ac:	0801424c 	.word	0x0801424c

080110b0 <malloc>:
 80110b0:	4b02      	ldr	r3, [pc, #8]	; (80110bc <malloc+0xc>)
 80110b2:	4601      	mov	r1, r0
 80110b4:	6818      	ldr	r0, [r3, #0]
 80110b6:	f000 b871 	b.w	801119c <_malloc_r>
 80110ba:	bf00      	nop
 80110bc:	20000094 	.word	0x20000094

080110c0 <free>:
 80110c0:	4b02      	ldr	r3, [pc, #8]	; (80110cc <free+0xc>)
 80110c2:	4601      	mov	r1, r0
 80110c4:	6818      	ldr	r0, [r3, #0]
 80110c6:	f000 b825 	b.w	8011114 <_free_r>
 80110ca:	bf00      	nop
 80110cc:	20000094 	.word	0x20000094

080110d0 <memcmp>:
 80110d0:	b510      	push	{r4, lr}
 80110d2:	3901      	subs	r1, #1
 80110d4:	4402      	add	r2, r0
 80110d6:	4290      	cmp	r0, r2
 80110d8:	d007      	beq.n	80110ea <memcmp+0x1a>
 80110da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80110de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80110e2:	42a3      	cmp	r3, r4
 80110e4:	d0f7      	beq.n	80110d6 <memcmp+0x6>
 80110e6:	1b18      	subs	r0, r3, r4
 80110e8:	bd10      	pop	{r4, pc}
 80110ea:	2000      	movs	r0, #0
 80110ec:	bd10      	pop	{r4, pc}

080110ee <memcpy>:
 80110ee:	b510      	push	{r4, lr}
 80110f0:	1e43      	subs	r3, r0, #1
 80110f2:	440a      	add	r2, r1
 80110f4:	4291      	cmp	r1, r2
 80110f6:	d004      	beq.n	8011102 <memcpy+0x14>
 80110f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011100:	e7f8      	b.n	80110f4 <memcpy+0x6>
 8011102:	bd10      	pop	{r4, pc}

08011104 <memset>:
 8011104:	4603      	mov	r3, r0
 8011106:	4402      	add	r2, r0
 8011108:	4293      	cmp	r3, r2
 801110a:	d002      	beq.n	8011112 <memset+0xe>
 801110c:	f803 1b01 	strb.w	r1, [r3], #1
 8011110:	e7fa      	b.n	8011108 <memset+0x4>
 8011112:	4770      	bx	lr

08011114 <_free_r>:
 8011114:	b530      	push	{r4, r5, lr}
 8011116:	2900      	cmp	r1, #0
 8011118:	d03c      	beq.n	8011194 <_free_r+0x80>
 801111a:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801111e:	1f0b      	subs	r3, r1, #4
 8011120:	491d      	ldr	r1, [pc, #116]	; (8011198 <_free_r+0x84>)
 8011122:	2a00      	cmp	r2, #0
 8011124:	bfb8      	it	lt
 8011126:	189b      	addlt	r3, r3, r2
 8011128:	680a      	ldr	r2, [r1, #0]
 801112a:	460c      	mov	r4, r1
 801112c:	b912      	cbnz	r2, 8011134 <_free_r+0x20>
 801112e:	605a      	str	r2, [r3, #4]
 8011130:	600b      	str	r3, [r1, #0]
 8011132:	bd30      	pop	{r4, r5, pc}
 8011134:	429a      	cmp	r2, r3
 8011136:	d90d      	bls.n	8011154 <_free_r+0x40>
 8011138:	6819      	ldr	r1, [r3, #0]
 801113a:	1858      	adds	r0, r3, r1
 801113c:	4282      	cmp	r2, r0
 801113e:	bf01      	itttt	eq
 8011140:	6810      	ldreq	r0, [r2, #0]
 8011142:	6852      	ldreq	r2, [r2, #4]
 8011144:	1809      	addeq	r1, r1, r0
 8011146:	6019      	streq	r1, [r3, #0]
 8011148:	605a      	str	r2, [r3, #4]
 801114a:	6023      	str	r3, [r4, #0]
 801114c:	bd30      	pop	{r4, r5, pc}
 801114e:	4299      	cmp	r1, r3
 8011150:	d803      	bhi.n	801115a <_free_r+0x46>
 8011152:	460a      	mov	r2, r1
 8011154:	6851      	ldr	r1, [r2, #4]
 8011156:	2900      	cmp	r1, #0
 8011158:	d1f9      	bne.n	801114e <_free_r+0x3a>
 801115a:	6814      	ldr	r4, [r2, #0]
 801115c:	1915      	adds	r5, r2, r4
 801115e:	429d      	cmp	r5, r3
 8011160:	d10a      	bne.n	8011178 <_free_r+0x64>
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	4423      	add	r3, r4
 8011166:	18d0      	adds	r0, r2, r3
 8011168:	4281      	cmp	r1, r0
 801116a:	6013      	str	r3, [r2, #0]
 801116c:	d112      	bne.n	8011194 <_free_r+0x80>
 801116e:	6808      	ldr	r0, [r1, #0]
 8011170:	4403      	add	r3, r0
 8011172:	6013      	str	r3, [r2, #0]
 8011174:	684b      	ldr	r3, [r1, #4]
 8011176:	e00c      	b.n	8011192 <_free_r+0x7e>
 8011178:	d902      	bls.n	8011180 <_free_r+0x6c>
 801117a:	230c      	movs	r3, #12
 801117c:	6003      	str	r3, [r0, #0]
 801117e:	bd30      	pop	{r4, r5, pc}
 8011180:	6818      	ldr	r0, [r3, #0]
 8011182:	181c      	adds	r4, r3, r0
 8011184:	42a1      	cmp	r1, r4
 8011186:	bf01      	itttt	eq
 8011188:	680c      	ldreq	r4, [r1, #0]
 801118a:	6849      	ldreq	r1, [r1, #4]
 801118c:	1900      	addeq	r0, r0, r4
 801118e:	6018      	streq	r0, [r3, #0]
 8011190:	6059      	str	r1, [r3, #4]
 8011192:	6053      	str	r3, [r2, #4]
 8011194:	bd30      	pop	{r4, r5, pc}
 8011196:	bf00      	nop
 8011198:	20000ad4 	.word	0x20000ad4

0801119c <_malloc_r>:
 801119c:	b570      	push	{r4, r5, r6, lr}
 801119e:	1ccd      	adds	r5, r1, #3
 80111a0:	f025 0503 	bic.w	r5, r5, #3
 80111a4:	3508      	adds	r5, #8
 80111a6:	2d0c      	cmp	r5, #12
 80111a8:	bf38      	it	cc
 80111aa:	250c      	movcc	r5, #12
 80111ac:	2d00      	cmp	r5, #0
 80111ae:	4606      	mov	r6, r0
 80111b0:	da03      	bge.n	80111ba <_malloc_r+0x1e>
 80111b2:	230c      	movs	r3, #12
 80111b4:	6033      	str	r3, [r6, #0]
 80111b6:	2000      	movs	r0, #0
 80111b8:	bd70      	pop	{r4, r5, r6, pc}
 80111ba:	42a9      	cmp	r1, r5
 80111bc:	d8f9      	bhi.n	80111b2 <_malloc_r+0x16>
 80111be:	4b1f      	ldr	r3, [pc, #124]	; (801123c <_malloc_r+0xa0>)
 80111c0:	681c      	ldr	r4, [r3, #0]
 80111c2:	461a      	mov	r2, r3
 80111c4:	4621      	mov	r1, r4
 80111c6:	b1a1      	cbz	r1, 80111f2 <_malloc_r+0x56>
 80111c8:	680b      	ldr	r3, [r1, #0]
 80111ca:	1b5b      	subs	r3, r3, r5
 80111cc:	d40e      	bmi.n	80111ec <_malloc_r+0x50>
 80111ce:	2b0b      	cmp	r3, #11
 80111d0:	d903      	bls.n	80111da <_malloc_r+0x3e>
 80111d2:	600b      	str	r3, [r1, #0]
 80111d4:	18cc      	adds	r4, r1, r3
 80111d6:	50cd      	str	r5, [r1, r3]
 80111d8:	e01e      	b.n	8011218 <_malloc_r+0x7c>
 80111da:	428c      	cmp	r4, r1
 80111dc:	bf0b      	itete	eq
 80111de:	6863      	ldreq	r3, [r4, #4]
 80111e0:	684b      	ldrne	r3, [r1, #4]
 80111e2:	6013      	streq	r3, [r2, #0]
 80111e4:	6063      	strne	r3, [r4, #4]
 80111e6:	bf18      	it	ne
 80111e8:	460c      	movne	r4, r1
 80111ea:	e015      	b.n	8011218 <_malloc_r+0x7c>
 80111ec:	460c      	mov	r4, r1
 80111ee:	6849      	ldr	r1, [r1, #4]
 80111f0:	e7e9      	b.n	80111c6 <_malloc_r+0x2a>
 80111f2:	4c13      	ldr	r4, [pc, #76]	; (8011240 <_malloc_r+0xa4>)
 80111f4:	6823      	ldr	r3, [r4, #0]
 80111f6:	b91b      	cbnz	r3, 8011200 <_malloc_r+0x64>
 80111f8:	4630      	mov	r0, r6
 80111fa:	f000 f82b 	bl	8011254 <_sbrk_r>
 80111fe:	6020      	str	r0, [r4, #0]
 8011200:	4629      	mov	r1, r5
 8011202:	4630      	mov	r0, r6
 8011204:	f000 f826 	bl	8011254 <_sbrk_r>
 8011208:	1c43      	adds	r3, r0, #1
 801120a:	d0d2      	beq.n	80111b2 <_malloc_r+0x16>
 801120c:	1cc4      	adds	r4, r0, #3
 801120e:	f024 0403 	bic.w	r4, r4, #3
 8011212:	42a0      	cmp	r0, r4
 8011214:	d10a      	bne.n	801122c <_malloc_r+0x90>
 8011216:	6025      	str	r5, [r4, #0]
 8011218:	f104 000b 	add.w	r0, r4, #11
 801121c:	1d23      	adds	r3, r4, #4
 801121e:	f020 0007 	bic.w	r0, r0, #7
 8011222:	1ac3      	subs	r3, r0, r3
 8011224:	d009      	beq.n	801123a <_malloc_r+0x9e>
 8011226:	425a      	negs	r2, r3
 8011228:	50e2      	str	r2, [r4, r3]
 801122a:	bd70      	pop	{r4, r5, r6, pc}
 801122c:	1a21      	subs	r1, r4, r0
 801122e:	4630      	mov	r0, r6
 8011230:	f000 f810 	bl	8011254 <_sbrk_r>
 8011234:	3001      	adds	r0, #1
 8011236:	d1ee      	bne.n	8011216 <_malloc_r+0x7a>
 8011238:	e7bb      	b.n	80111b2 <_malloc_r+0x16>
 801123a:	bd70      	pop	{r4, r5, r6, pc}
 801123c:	20000ad4 	.word	0x20000ad4
 8011240:	20000ad0 	.word	0x20000ad0

08011244 <realloc>:
 8011244:	4b02      	ldr	r3, [pc, #8]	; (8011250 <realloc+0xc>)
 8011246:	460a      	mov	r2, r1
 8011248:	4601      	mov	r1, r0
 801124a:	6818      	ldr	r0, [r3, #0]
 801124c:	f000 bc30 	b.w	8011ab0 <_realloc_r>
 8011250:	20000094 	.word	0x20000094

08011254 <_sbrk_r>:
 8011254:	b538      	push	{r3, r4, r5, lr}
 8011256:	4c06      	ldr	r4, [pc, #24]	; (8011270 <_sbrk_r+0x1c>)
 8011258:	2300      	movs	r3, #0
 801125a:	4605      	mov	r5, r0
 801125c:	4608      	mov	r0, r1
 801125e:	6023      	str	r3, [r4, #0]
 8011260:	f001 f924 	bl	80124ac <_sbrk>
 8011264:	1c43      	adds	r3, r0, #1
 8011266:	d102      	bne.n	801126e <_sbrk_r+0x1a>
 8011268:	6823      	ldr	r3, [r4, #0]
 801126a:	b103      	cbz	r3, 801126e <_sbrk_r+0x1a>
 801126c:	602b      	str	r3, [r5, #0]
 801126e:	bd38      	pop	{r3, r4, r5, pc}
 8011270:	20000af8 	.word	0x20000af8

08011274 <_init_signal_r>:
 8011274:	b538      	push	{r3, r4, r5, lr}
 8011276:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8011278:	4605      	mov	r5, r0
 801127a:	b10c      	cbz	r4, 8011280 <_init_signal_r+0xc>
 801127c:	2000      	movs	r0, #0
 801127e:	bd38      	pop	{r3, r4, r5, pc}
 8011280:	2180      	movs	r1, #128	; 0x80
 8011282:	f7ff ff8b 	bl	801119c <_malloc_r>
 8011286:	6468      	str	r0, [r5, #68]	; 0x44
 8011288:	b138      	cbz	r0, 801129a <_init_signal_r+0x26>
 801128a:	4623      	mov	r3, r4
 801128c:	4621      	mov	r1, r4
 801128e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8011290:	50d1      	str	r1, [r2, r3]
 8011292:	3304      	adds	r3, #4
 8011294:	2b80      	cmp	r3, #128	; 0x80
 8011296:	d1fa      	bne.n	801128e <_init_signal_r+0x1a>
 8011298:	e7f0      	b.n	801127c <_init_signal_r+0x8>
 801129a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801129e:	bd38      	pop	{r3, r4, r5, pc}

080112a0 <_signal_r>:
 80112a0:	291f      	cmp	r1, #31
 80112a2:	b570      	push	{r4, r5, r6, lr}
 80112a4:	4604      	mov	r4, r0
 80112a6:	460d      	mov	r5, r1
 80112a8:	4616      	mov	r6, r2
 80112aa:	d902      	bls.n	80112b2 <_signal_r+0x12>
 80112ac:	2316      	movs	r3, #22
 80112ae:	6003      	str	r3, [r0, #0]
 80112b0:	e00b      	b.n	80112ca <_signal_r+0x2a>
 80112b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80112b4:	b12b      	cbz	r3, 80112c2 <_signal_r+0x22>
 80112b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80112b8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112bc:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 80112c0:	bd70      	pop	{r4, r5, r6, pc}
 80112c2:	f7ff ffd7 	bl	8011274 <_init_signal_r>
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d0f5      	beq.n	80112b6 <_signal_r+0x16>
 80112ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112ce:	bd70      	pop	{r4, r5, r6, pc}

080112d0 <_raise_r>:
 80112d0:	291f      	cmp	r1, #31
 80112d2:	b538      	push	{r3, r4, r5, lr}
 80112d4:	4604      	mov	r4, r0
 80112d6:	460d      	mov	r5, r1
 80112d8:	d904      	bls.n	80112e4 <_raise_r+0x14>
 80112da:	2316      	movs	r3, #22
 80112dc:	6003      	str	r3, [r0, #0]
 80112de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112e2:	bd38      	pop	{r3, r4, r5, pc}
 80112e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80112e6:	b112      	cbz	r2, 80112ee <_raise_r+0x1e>
 80112e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80112ec:	b94b      	cbnz	r3, 8011302 <_raise_r+0x32>
 80112ee:	4620      	mov	r0, r4
 80112f0:	f000 f86e 	bl	80113d0 <_getpid_r>
 80112f4:	462a      	mov	r2, r5
 80112f6:	4601      	mov	r1, r0
 80112f8:	4620      	mov	r0, r4
 80112fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112fe:	f000 b855 	b.w	80113ac <_kill_r>
 8011302:	2b01      	cmp	r3, #1
 8011304:	d00c      	beq.n	8011320 <_raise_r+0x50>
 8011306:	1c59      	adds	r1, r3, #1
 8011308:	d103      	bne.n	8011312 <_raise_r+0x42>
 801130a:	2316      	movs	r3, #22
 801130c:	6003      	str	r3, [r0, #0]
 801130e:	2001      	movs	r0, #1
 8011310:	bd38      	pop	{r3, r4, r5, pc}
 8011312:	2400      	movs	r4, #0
 8011314:	4628      	mov	r0, r5
 8011316:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801131a:	4798      	blx	r3
 801131c:	4620      	mov	r0, r4
 801131e:	bd38      	pop	{r3, r4, r5, pc}
 8011320:	2000      	movs	r0, #0
 8011322:	bd38      	pop	{r3, r4, r5, pc}

08011324 <__sigtramp_r>:
 8011324:	291f      	cmp	r1, #31
 8011326:	b538      	push	{r3, r4, r5, lr}
 8011328:	4604      	mov	r4, r0
 801132a:	460d      	mov	r5, r1
 801132c:	d902      	bls.n	8011334 <__sigtramp_r+0x10>
 801132e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011332:	bd38      	pop	{r3, r4, r5, pc}
 8011334:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011336:	b123      	cbz	r3, 8011342 <__sigtramp_r+0x1e>
 8011338:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801133a:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 801133e:	b92b      	cbnz	r3, 801134c <__sigtramp_r+0x28>
 8011340:	e00f      	b.n	8011362 <__sigtramp_r+0x3e>
 8011342:	f7ff ff97 	bl	8011274 <_init_signal_r>
 8011346:	2800      	cmp	r0, #0
 8011348:	d0f6      	beq.n	8011338 <__sigtramp_r+0x14>
 801134a:	e7f0      	b.n	801132e <__sigtramp_r+0xa>
 801134c:	1c59      	adds	r1, r3, #1
 801134e:	d00a      	beq.n	8011366 <__sigtramp_r+0x42>
 8011350:	2b01      	cmp	r3, #1
 8011352:	d00a      	beq.n	801136a <__sigtramp_r+0x46>
 8011354:	2400      	movs	r4, #0
 8011356:	4628      	mov	r0, r5
 8011358:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801135c:	4798      	blx	r3
 801135e:	4620      	mov	r0, r4
 8011360:	bd38      	pop	{r3, r4, r5, pc}
 8011362:	2001      	movs	r0, #1
 8011364:	bd38      	pop	{r3, r4, r5, pc}
 8011366:	2002      	movs	r0, #2
 8011368:	bd38      	pop	{r3, r4, r5, pc}
 801136a:	2003      	movs	r0, #3
 801136c:	bd38      	pop	{r3, r4, r5, pc}
	...

08011370 <raise>:
 8011370:	4b02      	ldr	r3, [pc, #8]	; (801137c <raise+0xc>)
 8011372:	4601      	mov	r1, r0
 8011374:	6818      	ldr	r0, [r3, #0]
 8011376:	f7ff bfab 	b.w	80112d0 <_raise_r>
 801137a:	bf00      	nop
 801137c:	20000094 	.word	0x20000094

08011380 <signal>:
 8011380:	4b02      	ldr	r3, [pc, #8]	; (801138c <signal+0xc>)
 8011382:	460a      	mov	r2, r1
 8011384:	4601      	mov	r1, r0
 8011386:	6818      	ldr	r0, [r3, #0]
 8011388:	f7ff bf8a 	b.w	80112a0 <_signal_r>
 801138c:	20000094 	.word	0x20000094

08011390 <_init_signal>:
 8011390:	4b01      	ldr	r3, [pc, #4]	; (8011398 <_init_signal+0x8>)
 8011392:	6818      	ldr	r0, [r3, #0]
 8011394:	f7ff bf6e 	b.w	8011274 <_init_signal_r>
 8011398:	20000094 	.word	0x20000094

0801139c <__sigtramp>:
 801139c:	4b02      	ldr	r3, [pc, #8]	; (80113a8 <__sigtramp+0xc>)
 801139e:	4601      	mov	r1, r0
 80113a0:	6818      	ldr	r0, [r3, #0]
 80113a2:	f7ff bfbf 	b.w	8011324 <__sigtramp_r>
 80113a6:	bf00      	nop
 80113a8:	20000094 	.word	0x20000094

080113ac <_kill_r>:
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	4c07      	ldr	r4, [pc, #28]	; (80113cc <_kill_r+0x20>)
 80113b0:	2300      	movs	r3, #0
 80113b2:	4605      	mov	r5, r0
 80113b4:	4608      	mov	r0, r1
 80113b6:	4611      	mov	r1, r2
 80113b8:	6023      	str	r3, [r4, #0]
 80113ba:	f001 f85f 	bl	801247c <_kill>
 80113be:	1c43      	adds	r3, r0, #1
 80113c0:	d102      	bne.n	80113c8 <_kill_r+0x1c>
 80113c2:	6823      	ldr	r3, [r4, #0]
 80113c4:	b103      	cbz	r3, 80113c8 <_kill_r+0x1c>
 80113c6:	602b      	str	r3, [r5, #0]
 80113c8:	bd38      	pop	{r3, r4, r5, pc}
 80113ca:	bf00      	nop
 80113cc:	20000af8 	.word	0x20000af8

080113d0 <_getpid_r>:
 80113d0:	f001 b844 	b.w	801245c <_getpid>

080113d4 <_siprintf_r>:
 80113d4:	b40c      	push	{r2, r3}
 80113d6:	b510      	push	{r4, lr}
 80113d8:	b09c      	sub	sp, #112	; 0x70
 80113da:	9102      	str	r1, [sp, #8]
 80113dc:	9106      	str	r1, [sp, #24]
 80113de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80113e2:	9104      	str	r1, [sp, #16]
 80113e4:	9107      	str	r1, [sp, #28]
 80113e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80113ea:	ab1e      	add	r3, sp, #120	; 0x78
 80113ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80113f0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80113f4:	f44f 7402 	mov.w	r4, #520	; 0x208
 80113f8:	a902      	add	r1, sp, #8
 80113fa:	9301      	str	r3, [sp, #4]
 80113fc:	f8ad 4014 	strh.w	r4, [sp, #20]
 8011400:	f000 fc54 	bl	8011cac <_svfiprintf_r>
 8011404:	9b02      	ldr	r3, [sp, #8]
 8011406:	2200      	movs	r2, #0
 8011408:	701a      	strb	r2, [r3, #0]
 801140a:	b01c      	add	sp, #112	; 0x70
 801140c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011410:	b002      	add	sp, #8
 8011412:	4770      	bx	lr

08011414 <siprintf>:
 8011414:	b40e      	push	{r1, r2, r3}
 8011416:	b500      	push	{lr}
 8011418:	f44f 7102 	mov.w	r1, #520	; 0x208
 801141c:	b09c      	sub	sp, #112	; 0x70
 801141e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011422:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011426:	9104      	str	r1, [sp, #16]
 8011428:	9107      	str	r1, [sp, #28]
 801142a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801142e:	ab1d      	add	r3, sp, #116	; 0x74
 8011430:	9002      	str	r0, [sp, #8]
 8011432:	9006      	str	r0, [sp, #24]
 8011434:	4808      	ldr	r0, [pc, #32]	; (8011458 <siprintf+0x44>)
 8011436:	f853 2b04 	ldr.w	r2, [r3], #4
 801143a:	f8ad 1016 	strh.w	r1, [sp, #22]
 801143e:	6800      	ldr	r0, [r0, #0]
 8011440:	a902      	add	r1, sp, #8
 8011442:	9301      	str	r3, [sp, #4]
 8011444:	f000 fc32 	bl	8011cac <_svfiprintf_r>
 8011448:	9b02      	ldr	r3, [sp, #8]
 801144a:	2200      	movs	r2, #0
 801144c:	701a      	strb	r2, [r3, #0]
 801144e:	b01c      	add	sp, #112	; 0x70
 8011450:	f85d eb04 	ldr.w	lr, [sp], #4
 8011454:	b003      	add	sp, #12
 8011456:	4770      	bx	lr
 8011458:	20000094 	.word	0x20000094

0801145c <strncmp>:
 801145c:	b530      	push	{r4, r5, lr}
 801145e:	b182      	cbz	r2, 8011482 <strncmp+0x26>
 8011460:	1e45      	subs	r5, r0, #1
 8011462:	3901      	subs	r1, #1
 8011464:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8011468:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801146c:	42a3      	cmp	r3, r4
 801146e:	d106      	bne.n	801147e <strncmp+0x22>
 8011470:	43ec      	mvns	r4, r5
 8011472:	4414      	add	r4, r2
 8011474:	42e0      	cmn	r0, r4
 8011476:	d001      	beq.n	801147c <strncmp+0x20>
 8011478:	2b00      	cmp	r3, #0
 801147a:	d1f3      	bne.n	8011464 <strncmp+0x8>
 801147c:	461c      	mov	r4, r3
 801147e:	1b18      	subs	r0, r3, r4
 8011480:	bd30      	pop	{r4, r5, pc}
 8011482:	4610      	mov	r0, r2
 8011484:	bd30      	pop	{r4, r5, pc}

08011486 <strstr>:
 8011486:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011488:	7803      	ldrb	r3, [r0, #0]
 801148a:	b963      	cbnz	r3, 80114a6 <strstr+0x20>
 801148c:	780b      	ldrb	r3, [r1, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	bf18      	it	ne
 8011492:	2000      	movne	r0, #0
 8011494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011496:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801149a:	b162      	cbz	r2, 80114b6 <strstr+0x30>
 801149c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80114a0:	4630      	mov	r0, r6
 80114a2:	4297      	cmp	r7, r2
 80114a4:	d0f7      	beq.n	8011496 <strstr+0x10>
 80114a6:	4603      	mov	r3, r0
 80114a8:	1c46      	adds	r6, r0, #1
 80114aa:	7800      	ldrb	r0, [r0, #0]
 80114ac:	b110      	cbz	r0, 80114b4 <strstr+0x2e>
 80114ae:	1e4d      	subs	r5, r1, #1
 80114b0:	1e5c      	subs	r4, r3, #1
 80114b2:	e7f0      	b.n	8011496 <strstr+0x10>
 80114b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114b6:	4618      	mov	r0, r3
 80114b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080114bc <write>:
 80114bc:	4613      	mov	r3, r2
 80114be:	460a      	mov	r2, r1
 80114c0:	4601      	mov	r1, r0
 80114c2:	4802      	ldr	r0, [pc, #8]	; (80114cc <write+0x10>)
 80114c4:	6800      	ldr	r0, [r0, #0]
 80114c6:	f000 b85f 	b.w	8011588 <_write_r>
 80114ca:	bf00      	nop
 80114cc:	20000094 	.word	0x20000094

080114d0 <__swbuf_r>:
 80114d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114d2:	460f      	mov	r7, r1
 80114d4:	4614      	mov	r4, r2
 80114d6:	4606      	mov	r6, r0
 80114d8:	b118      	cbz	r0, 80114e2 <__swbuf_r+0x12>
 80114da:	6983      	ldr	r3, [r0, #24]
 80114dc:	b90b      	cbnz	r3, 80114e2 <__swbuf_r+0x12>
 80114de:	f000 f9dd 	bl	801189c <__sinit>
 80114e2:	4b22      	ldr	r3, [pc, #136]	; (801156c <__swbuf_r+0x9c>)
 80114e4:	429c      	cmp	r4, r3
 80114e6:	d101      	bne.n	80114ec <__swbuf_r+0x1c>
 80114e8:	6874      	ldr	r4, [r6, #4]
 80114ea:	e008      	b.n	80114fe <__swbuf_r+0x2e>
 80114ec:	4b20      	ldr	r3, [pc, #128]	; (8011570 <__swbuf_r+0xa0>)
 80114ee:	429c      	cmp	r4, r3
 80114f0:	d101      	bne.n	80114f6 <__swbuf_r+0x26>
 80114f2:	68b4      	ldr	r4, [r6, #8]
 80114f4:	e003      	b.n	80114fe <__swbuf_r+0x2e>
 80114f6:	4b1f      	ldr	r3, [pc, #124]	; (8011574 <__swbuf_r+0xa4>)
 80114f8:	429c      	cmp	r4, r3
 80114fa:	bf08      	it	eq
 80114fc:	68f4      	ldreq	r4, [r6, #12]
 80114fe:	69a3      	ldr	r3, [r4, #24]
 8011500:	60a3      	str	r3, [r4, #8]
 8011502:	89a3      	ldrh	r3, [r4, #12]
 8011504:	071a      	lsls	r2, r3, #28
 8011506:	d509      	bpl.n	801151c <__swbuf_r+0x4c>
 8011508:	6923      	ldr	r3, [r4, #16]
 801150a:	b13b      	cbz	r3, 801151c <__swbuf_r+0x4c>
 801150c:	6823      	ldr	r3, [r4, #0]
 801150e:	6920      	ldr	r0, [r4, #16]
 8011510:	b2fd      	uxtb	r5, r7
 8011512:	1a18      	subs	r0, r3, r0
 8011514:	6963      	ldr	r3, [r4, #20]
 8011516:	4298      	cmp	r0, r3
 8011518:	db0f      	blt.n	801153a <__swbuf_r+0x6a>
 801151a:	e008      	b.n	801152e <__swbuf_r+0x5e>
 801151c:	4621      	mov	r1, r4
 801151e:	4630      	mov	r0, r6
 8011520:	f000 f844 	bl	80115ac <__swsetup_r>
 8011524:	2800      	cmp	r0, #0
 8011526:	d0f1      	beq.n	801150c <__swbuf_r+0x3c>
 8011528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801152e:	4621      	mov	r1, r4
 8011530:	4630      	mov	r0, r6
 8011532:	f000 f92d 	bl	8011790 <_fflush_r>
 8011536:	2800      	cmp	r0, #0
 8011538:	d1f6      	bne.n	8011528 <__swbuf_r+0x58>
 801153a:	68a3      	ldr	r3, [r4, #8]
 801153c:	3b01      	subs	r3, #1
 801153e:	60a3      	str	r3, [r4, #8]
 8011540:	6823      	ldr	r3, [r4, #0]
 8011542:	1c5a      	adds	r2, r3, #1
 8011544:	6022      	str	r2, [r4, #0]
 8011546:	701f      	strb	r7, [r3, #0]
 8011548:	6962      	ldr	r2, [r4, #20]
 801154a:	1c43      	adds	r3, r0, #1
 801154c:	4293      	cmp	r3, r2
 801154e:	d004      	beq.n	801155a <__swbuf_r+0x8a>
 8011550:	89a3      	ldrh	r3, [r4, #12]
 8011552:	07db      	lsls	r3, r3, #31
 8011554:	d507      	bpl.n	8011566 <__swbuf_r+0x96>
 8011556:	2d0a      	cmp	r5, #10
 8011558:	d105      	bne.n	8011566 <__swbuf_r+0x96>
 801155a:	4621      	mov	r1, r4
 801155c:	4630      	mov	r0, r6
 801155e:	f000 f917 	bl	8011790 <_fflush_r>
 8011562:	2800      	cmp	r0, #0
 8011564:	d1e0      	bne.n	8011528 <__swbuf_r+0x58>
 8011566:	4628      	mov	r0, r5
 8011568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801156a:	bf00      	nop
 801156c:	08013fb8 	.word	0x08013fb8
 8011570:	08013fd8 	.word	0x08013fd8
 8011574:	08013ff8 	.word	0x08013ff8

08011578 <__swbuf>:
 8011578:	4b02      	ldr	r3, [pc, #8]	; (8011584 <__swbuf+0xc>)
 801157a:	460a      	mov	r2, r1
 801157c:	4601      	mov	r1, r0
 801157e:	6818      	ldr	r0, [r3, #0]
 8011580:	f7ff bfa6 	b.w	80114d0 <__swbuf_r>
 8011584:	20000094 	.word	0x20000094

08011588 <_write_r>:
 8011588:	b538      	push	{r3, r4, r5, lr}
 801158a:	4c07      	ldr	r4, [pc, #28]	; (80115a8 <_write_r+0x20>)
 801158c:	4605      	mov	r5, r0
 801158e:	4608      	mov	r0, r1
 8011590:	4611      	mov	r1, r2
 8011592:	2200      	movs	r2, #0
 8011594:	6022      	str	r2, [r4, #0]
 8011596:	461a      	mov	r2, r3
 8011598:	f000 ff96 	bl	80124c8 <_write>
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d102      	bne.n	80115a6 <_write_r+0x1e>
 80115a0:	6823      	ldr	r3, [r4, #0]
 80115a2:	b103      	cbz	r3, 80115a6 <_write_r+0x1e>
 80115a4:	602b      	str	r3, [r5, #0]
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	20000af8 	.word	0x20000af8

080115ac <__swsetup_r>:
 80115ac:	4b31      	ldr	r3, [pc, #196]	; (8011674 <__swsetup_r+0xc8>)
 80115ae:	b570      	push	{r4, r5, r6, lr}
 80115b0:	681d      	ldr	r5, [r3, #0]
 80115b2:	4606      	mov	r6, r0
 80115b4:	460c      	mov	r4, r1
 80115b6:	b125      	cbz	r5, 80115c2 <__swsetup_r+0x16>
 80115b8:	69ab      	ldr	r3, [r5, #24]
 80115ba:	b913      	cbnz	r3, 80115c2 <__swsetup_r+0x16>
 80115bc:	4628      	mov	r0, r5
 80115be:	f000 f96d 	bl	801189c <__sinit>
 80115c2:	4b2d      	ldr	r3, [pc, #180]	; (8011678 <__swsetup_r+0xcc>)
 80115c4:	429c      	cmp	r4, r3
 80115c6:	d101      	bne.n	80115cc <__swsetup_r+0x20>
 80115c8:	686c      	ldr	r4, [r5, #4]
 80115ca:	e008      	b.n	80115de <__swsetup_r+0x32>
 80115cc:	4b2b      	ldr	r3, [pc, #172]	; (801167c <__swsetup_r+0xd0>)
 80115ce:	429c      	cmp	r4, r3
 80115d0:	d101      	bne.n	80115d6 <__swsetup_r+0x2a>
 80115d2:	68ac      	ldr	r4, [r5, #8]
 80115d4:	e003      	b.n	80115de <__swsetup_r+0x32>
 80115d6:	4b2a      	ldr	r3, [pc, #168]	; (8011680 <__swsetup_r+0xd4>)
 80115d8:	429c      	cmp	r4, r3
 80115da:	bf08      	it	eq
 80115dc:	68ec      	ldreq	r4, [r5, #12]
 80115de:	89a3      	ldrh	r3, [r4, #12]
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	0711      	lsls	r1, r2, #28
 80115e4:	d41d      	bmi.n	8011622 <__swsetup_r+0x76>
 80115e6:	06d5      	lsls	r5, r2, #27
 80115e8:	d402      	bmi.n	80115f0 <__swsetup_r+0x44>
 80115ea:	2209      	movs	r2, #9
 80115ec:	6032      	str	r2, [r6, #0]
 80115ee:	e038      	b.n	8011662 <__swsetup_r+0xb6>
 80115f0:	0750      	lsls	r0, r2, #29
 80115f2:	d512      	bpl.n	801161a <__swsetup_r+0x6e>
 80115f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115f6:	b141      	cbz	r1, 801160a <__swsetup_r+0x5e>
 80115f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115fc:	4299      	cmp	r1, r3
 80115fe:	d002      	beq.n	8011606 <__swsetup_r+0x5a>
 8011600:	4630      	mov	r0, r6
 8011602:	f7ff fd87 	bl	8011114 <_free_r>
 8011606:	2300      	movs	r3, #0
 8011608:	6363      	str	r3, [r4, #52]	; 0x34
 801160a:	89a3      	ldrh	r3, [r4, #12]
 801160c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011610:	81a3      	strh	r3, [r4, #12]
 8011612:	2300      	movs	r3, #0
 8011614:	6063      	str	r3, [r4, #4]
 8011616:	6923      	ldr	r3, [r4, #16]
 8011618:	6023      	str	r3, [r4, #0]
 801161a:	89a3      	ldrh	r3, [r4, #12]
 801161c:	f043 0308 	orr.w	r3, r3, #8
 8011620:	81a3      	strh	r3, [r4, #12]
 8011622:	6923      	ldr	r3, [r4, #16]
 8011624:	b94b      	cbnz	r3, 801163a <__swsetup_r+0x8e>
 8011626:	89a3      	ldrh	r3, [r4, #12]
 8011628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801162c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011630:	d003      	beq.n	801163a <__swsetup_r+0x8e>
 8011632:	4621      	mov	r1, r4
 8011634:	4630      	mov	r0, r6
 8011636:	f000 f9ef 	bl	8011a18 <__smakebuf_r>
 801163a:	89a3      	ldrh	r3, [r4, #12]
 801163c:	f013 0201 	ands.w	r2, r3, #1
 8011640:	d005      	beq.n	801164e <__swsetup_r+0xa2>
 8011642:	2200      	movs	r2, #0
 8011644:	60a2      	str	r2, [r4, #8]
 8011646:	6962      	ldr	r2, [r4, #20]
 8011648:	4252      	negs	r2, r2
 801164a:	61a2      	str	r2, [r4, #24]
 801164c:	e003      	b.n	8011656 <__swsetup_r+0xaa>
 801164e:	0799      	lsls	r1, r3, #30
 8011650:	bf58      	it	pl
 8011652:	6962      	ldrpl	r2, [r4, #20]
 8011654:	60a2      	str	r2, [r4, #8]
 8011656:	6922      	ldr	r2, [r4, #16]
 8011658:	b94a      	cbnz	r2, 801166e <__swsetup_r+0xc2>
 801165a:	f003 0080 	and.w	r0, r3, #128	; 0x80
 801165e:	b280      	uxth	r0, r0
 8011660:	b130      	cbz	r0, 8011670 <__swsetup_r+0xc4>
 8011662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011666:	81a3      	strh	r3, [r4, #12]
 8011668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801166c:	bd70      	pop	{r4, r5, r6, pc}
 801166e:	2000      	movs	r0, #0
 8011670:	bd70      	pop	{r4, r5, r6, pc}
 8011672:	bf00      	nop
 8011674:	20000094 	.word	0x20000094
 8011678:	08013fb8 	.word	0x08013fb8
 801167c:	08013fd8 	.word	0x08013fd8
 8011680:	08013ff8 	.word	0x08013ff8

08011684 <__sflush_r>:
 8011684:	898a      	ldrh	r2, [r1, #12]
 8011686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801168a:	4605      	mov	r5, r0
 801168c:	0710      	lsls	r0, r2, #28
 801168e:	460c      	mov	r4, r1
 8011690:	d459      	bmi.n	8011746 <__sflush_r+0xc2>
 8011692:	684b      	ldr	r3, [r1, #4]
 8011694:	2b00      	cmp	r3, #0
 8011696:	dc02      	bgt.n	801169e <__sflush_r+0x1a>
 8011698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801169a:	2b00      	cmp	r3, #0
 801169c:	dd17      	ble.n	80116ce <__sflush_r+0x4a>
 801169e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116a0:	b1ae      	cbz	r6, 80116ce <__sflush_r+0x4a>
 80116a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80116a6:	2300      	movs	r3, #0
 80116a8:	b292      	uxth	r2, r2
 80116aa:	682f      	ldr	r7, [r5, #0]
 80116ac:	602b      	str	r3, [r5, #0]
 80116ae:	b10a      	cbz	r2, 80116b4 <__sflush_r+0x30>
 80116b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80116b2:	e015      	b.n	80116e0 <__sflush_r+0x5c>
 80116b4:	6a21      	ldr	r1, [r4, #32]
 80116b6:	2301      	movs	r3, #1
 80116b8:	4628      	mov	r0, r5
 80116ba:	47b0      	blx	r6
 80116bc:	1c41      	adds	r1, r0, #1
 80116be:	d10f      	bne.n	80116e0 <__sflush_r+0x5c>
 80116c0:	682b      	ldr	r3, [r5, #0]
 80116c2:	b16b      	cbz	r3, 80116e0 <__sflush_r+0x5c>
 80116c4:	2b1d      	cmp	r3, #29
 80116c6:	d001      	beq.n	80116cc <__sflush_r+0x48>
 80116c8:	2b16      	cmp	r3, #22
 80116ca:	d103      	bne.n	80116d4 <__sflush_r+0x50>
 80116cc:	602f      	str	r7, [r5, #0]
 80116ce:	2000      	movs	r0, #0
 80116d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d4:	89a3      	ldrh	r3, [r4, #12]
 80116d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116da:	81a3      	strh	r3, [r4, #12]
 80116dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116e0:	89a3      	ldrh	r3, [r4, #12]
 80116e2:	075a      	lsls	r2, r3, #29
 80116e4:	d505      	bpl.n	80116f2 <__sflush_r+0x6e>
 80116e6:	6863      	ldr	r3, [r4, #4]
 80116e8:	1ac0      	subs	r0, r0, r3
 80116ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116ec:	b10b      	cbz	r3, 80116f2 <__sflush_r+0x6e>
 80116ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80116f0:	1ac0      	subs	r0, r0, r3
 80116f2:	2300      	movs	r3, #0
 80116f4:	4602      	mov	r2, r0
 80116f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80116f8:	6a21      	ldr	r1, [r4, #32]
 80116fa:	4628      	mov	r0, r5
 80116fc:	47b0      	blx	r6
 80116fe:	1c43      	adds	r3, r0, #1
 8011700:	89a3      	ldrh	r3, [r4, #12]
 8011702:	d106      	bne.n	8011712 <__sflush_r+0x8e>
 8011704:	6829      	ldr	r1, [r5, #0]
 8011706:	291d      	cmp	r1, #29
 8011708:	d839      	bhi.n	801177e <__sflush_r+0xfa>
 801170a:	4a20      	ldr	r2, [pc, #128]	; (801178c <__sflush_r+0x108>)
 801170c:	40ca      	lsrs	r2, r1
 801170e:	07d6      	lsls	r6, r2, #31
 8011710:	d535      	bpl.n	801177e <__sflush_r+0xfa>
 8011712:	2200      	movs	r2, #0
 8011714:	6062      	str	r2, [r4, #4]
 8011716:	6922      	ldr	r2, [r4, #16]
 8011718:	04d9      	lsls	r1, r3, #19
 801171a:	6022      	str	r2, [r4, #0]
 801171c:	d504      	bpl.n	8011728 <__sflush_r+0xa4>
 801171e:	1c42      	adds	r2, r0, #1
 8011720:	d101      	bne.n	8011726 <__sflush_r+0xa2>
 8011722:	682b      	ldr	r3, [r5, #0]
 8011724:	b903      	cbnz	r3, 8011728 <__sflush_r+0xa4>
 8011726:	6560      	str	r0, [r4, #84]	; 0x54
 8011728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801172a:	602f      	str	r7, [r5, #0]
 801172c:	2900      	cmp	r1, #0
 801172e:	d0ce      	beq.n	80116ce <__sflush_r+0x4a>
 8011730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011734:	4299      	cmp	r1, r3
 8011736:	d002      	beq.n	801173e <__sflush_r+0xba>
 8011738:	4628      	mov	r0, r5
 801173a:	f7ff fceb 	bl	8011114 <_free_r>
 801173e:	2000      	movs	r0, #0
 8011740:	6360      	str	r0, [r4, #52]	; 0x34
 8011742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011746:	690f      	ldr	r7, [r1, #16]
 8011748:	2f00      	cmp	r7, #0
 801174a:	d0c0      	beq.n	80116ce <__sflush_r+0x4a>
 801174c:	0793      	lsls	r3, r2, #30
 801174e:	680e      	ldr	r6, [r1, #0]
 8011750:	bf0c      	ite	eq
 8011752:	694b      	ldreq	r3, [r1, #20]
 8011754:	2300      	movne	r3, #0
 8011756:	ebc7 0806 	rsb	r8, r7, r6
 801175a:	600f      	str	r7, [r1, #0]
 801175c:	608b      	str	r3, [r1, #8]
 801175e:	e002      	b.n	8011766 <__sflush_r+0xe2>
 8011760:	4407      	add	r7, r0
 8011762:	ebc0 0808 	rsb	r8, r0, r8
 8011766:	f1b8 0f00 	cmp.w	r8, #0
 801176a:	ddb0      	ble.n	80116ce <__sflush_r+0x4a>
 801176c:	4643      	mov	r3, r8
 801176e:	463a      	mov	r2, r7
 8011770:	6a21      	ldr	r1, [r4, #32]
 8011772:	4628      	mov	r0, r5
 8011774:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011776:	47b0      	blx	r6
 8011778:	2800      	cmp	r0, #0
 801177a:	dcf1      	bgt.n	8011760 <__sflush_r+0xdc>
 801177c:	89a3      	ldrh	r3, [r4, #12]
 801177e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011782:	81a3      	strh	r3, [r4, #12]
 8011784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801178c:	20400001 	.word	0x20400001

08011790 <_fflush_r>:
 8011790:	b538      	push	{r3, r4, r5, lr}
 8011792:	690b      	ldr	r3, [r1, #16]
 8011794:	4605      	mov	r5, r0
 8011796:	460c      	mov	r4, r1
 8011798:	b1db      	cbz	r3, 80117d2 <_fflush_r+0x42>
 801179a:	b118      	cbz	r0, 80117a4 <_fflush_r+0x14>
 801179c:	6983      	ldr	r3, [r0, #24]
 801179e:	b90b      	cbnz	r3, 80117a4 <_fflush_r+0x14>
 80117a0:	f000 f87c 	bl	801189c <__sinit>
 80117a4:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <_fflush_r+0x48>)
 80117a6:	429c      	cmp	r4, r3
 80117a8:	d101      	bne.n	80117ae <_fflush_r+0x1e>
 80117aa:	686c      	ldr	r4, [r5, #4]
 80117ac:	e008      	b.n	80117c0 <_fflush_r+0x30>
 80117ae:	4b0b      	ldr	r3, [pc, #44]	; (80117dc <_fflush_r+0x4c>)
 80117b0:	429c      	cmp	r4, r3
 80117b2:	d101      	bne.n	80117b8 <_fflush_r+0x28>
 80117b4:	68ac      	ldr	r4, [r5, #8]
 80117b6:	e003      	b.n	80117c0 <_fflush_r+0x30>
 80117b8:	4b09      	ldr	r3, [pc, #36]	; (80117e0 <_fflush_r+0x50>)
 80117ba:	429c      	cmp	r4, r3
 80117bc:	bf08      	it	eq
 80117be:	68ec      	ldreq	r4, [r5, #12]
 80117c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117c4:	b12b      	cbz	r3, 80117d2 <_fflush_r+0x42>
 80117c6:	4621      	mov	r1, r4
 80117c8:	4628      	mov	r0, r5
 80117ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117ce:	f7ff bf59 	b.w	8011684 <__sflush_r>
 80117d2:	2000      	movs	r0, #0
 80117d4:	bd38      	pop	{r3, r4, r5, pc}
 80117d6:	bf00      	nop
 80117d8:	08013fb8 	.word	0x08013fb8
 80117dc:	08013fd8 	.word	0x08013fd8
 80117e0:	08013ff8 	.word	0x08013ff8

080117e4 <fflush>:
 80117e4:	4601      	mov	r1, r0
 80117e6:	b920      	cbnz	r0, 80117f2 <fflush+0xe>
 80117e8:	4b04      	ldr	r3, [pc, #16]	; (80117fc <fflush+0x18>)
 80117ea:	4905      	ldr	r1, [pc, #20]	; (8011800 <fflush+0x1c>)
 80117ec:	6818      	ldr	r0, [r3, #0]
 80117ee:	f000 b8f5 	b.w	80119dc <_fwalk_reent>
 80117f2:	4b04      	ldr	r3, [pc, #16]	; (8011804 <fflush+0x20>)
 80117f4:	6818      	ldr	r0, [r3, #0]
 80117f6:	f7ff bfcb 	b.w	8011790 <_fflush_r>
 80117fa:	bf00      	nop
 80117fc:	08013fb4 	.word	0x08013fb4
 8011800:	08011791 	.word	0x08011791
 8011804:	20000094 	.word	0x20000094

08011808 <__fp_unlock>:
 8011808:	2000      	movs	r0, #0
 801180a:	4770      	bx	lr

0801180c <_cleanup_r>:
 801180c:	4901      	ldr	r1, [pc, #4]	; (8011814 <_cleanup_r+0x8>)
 801180e:	f000 b8e5 	b.w	80119dc <_fwalk_reent>
 8011812:	bf00      	nop
 8011814:	08011791 	.word	0x08011791

08011818 <std.isra.0>:
 8011818:	b510      	push	{r4, lr}
 801181a:	4604      	mov	r4, r0
 801181c:	2300      	movs	r3, #0
 801181e:	6003      	str	r3, [r0, #0]
 8011820:	6043      	str	r3, [r0, #4]
 8011822:	6083      	str	r3, [r0, #8]
 8011824:	8181      	strh	r1, [r0, #12]
 8011826:	6643      	str	r3, [r0, #100]	; 0x64
 8011828:	81c2      	strh	r2, [r0, #14]
 801182a:	6103      	str	r3, [r0, #16]
 801182c:	6143      	str	r3, [r0, #20]
 801182e:	6183      	str	r3, [r0, #24]
 8011830:	4619      	mov	r1, r3
 8011832:	2208      	movs	r2, #8
 8011834:	305c      	adds	r0, #92	; 0x5c
 8011836:	f7ff fc65 	bl	8011104 <memset>
 801183a:	4b05      	ldr	r3, [pc, #20]	; (8011850 <std.isra.0+0x38>)
 801183c:	6224      	str	r4, [r4, #32]
 801183e:	6263      	str	r3, [r4, #36]	; 0x24
 8011840:	4b04      	ldr	r3, [pc, #16]	; (8011854 <std.isra.0+0x3c>)
 8011842:	62a3      	str	r3, [r4, #40]	; 0x28
 8011844:	4b04      	ldr	r3, [pc, #16]	; (8011858 <std.isra.0+0x40>)
 8011846:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011848:	4b04      	ldr	r3, [pc, #16]	; (801185c <std.isra.0+0x44>)
 801184a:	6323      	str	r3, [r4, #48]	; 0x30
 801184c:	bd10      	pop	{r4, pc}
 801184e:	bf00      	nop
 8011850:	0801229d 	.word	0x0801229d
 8011854:	080122c3 	.word	0x080122c3
 8011858:	080122fb 	.word	0x080122fb
 801185c:	0801231f 	.word	0x0801231f

08011860 <__fp_lock>:
 8011860:	2000      	movs	r0, #0
 8011862:	4770      	bx	lr

08011864 <__sfmoreglue>:
 8011864:	b570      	push	{r4, r5, r6, lr}
 8011866:	2368      	movs	r3, #104	; 0x68
 8011868:	1e4d      	subs	r5, r1, #1
 801186a:	435d      	muls	r5, r3
 801186c:	460e      	mov	r6, r1
 801186e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011872:	f7ff fc93 	bl	801119c <_malloc_r>
 8011876:	4604      	mov	r4, r0
 8011878:	b140      	cbz	r0, 801188c <__sfmoreglue+0x28>
 801187a:	2100      	movs	r1, #0
 801187c:	e880 0042 	stmia.w	r0, {r1, r6}
 8011880:	300c      	adds	r0, #12
 8011882:	60a0      	str	r0, [r4, #8]
 8011884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011888:	f7ff fc3c 	bl	8011104 <memset>
 801188c:	4620      	mov	r0, r4
 801188e:	bd70      	pop	{r4, r5, r6, pc}

08011890 <_cleanup>:
 8011890:	4b01      	ldr	r3, [pc, #4]	; (8011898 <_cleanup+0x8>)
 8011892:	6818      	ldr	r0, [r3, #0]
 8011894:	f7ff bfba 	b.w	801180c <_cleanup_r>
 8011898:	08013fb4 	.word	0x08013fb4

0801189c <__sinit>:
 801189c:	6983      	ldr	r3, [r0, #24]
 801189e:	b510      	push	{r4, lr}
 80118a0:	4604      	mov	r4, r0
 80118a2:	bb33      	cbnz	r3, 80118f2 <__sinit+0x56>
 80118a4:	6483      	str	r3, [r0, #72]	; 0x48
 80118a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80118a8:	6503      	str	r3, [r0, #80]	; 0x50
 80118aa:	4b12      	ldr	r3, [pc, #72]	; (80118f4 <__sinit+0x58>)
 80118ac:	4a12      	ldr	r2, [pc, #72]	; (80118f8 <__sinit+0x5c>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	6282      	str	r2, [r0, #40]	; 0x28
 80118b2:	4298      	cmp	r0, r3
 80118b4:	bf04      	itt	eq
 80118b6:	2301      	moveq	r3, #1
 80118b8:	6183      	streq	r3, [r0, #24]
 80118ba:	f000 f81f 	bl	80118fc <__sfp>
 80118be:	6060      	str	r0, [r4, #4]
 80118c0:	4620      	mov	r0, r4
 80118c2:	f000 f81b 	bl	80118fc <__sfp>
 80118c6:	60a0      	str	r0, [r4, #8]
 80118c8:	4620      	mov	r0, r4
 80118ca:	f000 f817 	bl	80118fc <__sfp>
 80118ce:	2200      	movs	r2, #0
 80118d0:	60e0      	str	r0, [r4, #12]
 80118d2:	2104      	movs	r1, #4
 80118d4:	6860      	ldr	r0, [r4, #4]
 80118d6:	f7ff ff9f 	bl	8011818 <std.isra.0>
 80118da:	2201      	movs	r2, #1
 80118dc:	2109      	movs	r1, #9
 80118de:	68a0      	ldr	r0, [r4, #8]
 80118e0:	f7ff ff9a 	bl	8011818 <std.isra.0>
 80118e4:	2202      	movs	r2, #2
 80118e6:	2112      	movs	r1, #18
 80118e8:	68e0      	ldr	r0, [r4, #12]
 80118ea:	f7ff ff95 	bl	8011818 <std.isra.0>
 80118ee:	2301      	movs	r3, #1
 80118f0:	61a3      	str	r3, [r4, #24]
 80118f2:	bd10      	pop	{r4, pc}
 80118f4:	08013fb4 	.word	0x08013fb4
 80118f8:	0801180d 	.word	0x0801180d

080118fc <__sfp>:
 80118fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118fe:	4b1c      	ldr	r3, [pc, #112]	; (8011970 <__sfp+0x74>)
 8011900:	4607      	mov	r7, r0
 8011902:	681e      	ldr	r6, [r3, #0]
 8011904:	69b3      	ldr	r3, [r6, #24]
 8011906:	b913      	cbnz	r3, 801190e <__sfp+0x12>
 8011908:	4630      	mov	r0, r6
 801190a:	f7ff ffc7 	bl	801189c <__sinit>
 801190e:	3648      	adds	r6, #72	; 0x48
 8011910:	68b4      	ldr	r4, [r6, #8]
 8011912:	6873      	ldr	r3, [r6, #4]
 8011914:	3b01      	subs	r3, #1
 8011916:	d404      	bmi.n	8011922 <__sfp+0x26>
 8011918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801191c:	b17d      	cbz	r5, 801193e <__sfp+0x42>
 801191e:	3468      	adds	r4, #104	; 0x68
 8011920:	e7f8      	b.n	8011914 <__sfp+0x18>
 8011922:	6833      	ldr	r3, [r6, #0]
 8011924:	b10b      	cbz	r3, 801192a <__sfp+0x2e>
 8011926:	6836      	ldr	r6, [r6, #0]
 8011928:	e7f2      	b.n	8011910 <__sfp+0x14>
 801192a:	2104      	movs	r1, #4
 801192c:	4638      	mov	r0, r7
 801192e:	f7ff ff99 	bl	8011864 <__sfmoreglue>
 8011932:	6030      	str	r0, [r6, #0]
 8011934:	2800      	cmp	r0, #0
 8011936:	d1f6      	bne.n	8011926 <__sfp+0x2a>
 8011938:	230c      	movs	r3, #12
 801193a:	603b      	str	r3, [r7, #0]
 801193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801193e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011942:	81e3      	strh	r3, [r4, #14]
 8011944:	2301      	movs	r3, #1
 8011946:	81a3      	strh	r3, [r4, #12]
 8011948:	6665      	str	r5, [r4, #100]	; 0x64
 801194a:	6025      	str	r5, [r4, #0]
 801194c:	60a5      	str	r5, [r4, #8]
 801194e:	6065      	str	r5, [r4, #4]
 8011950:	6125      	str	r5, [r4, #16]
 8011952:	6165      	str	r5, [r4, #20]
 8011954:	61a5      	str	r5, [r4, #24]
 8011956:	2208      	movs	r2, #8
 8011958:	4629      	mov	r1, r5
 801195a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801195e:	f7ff fbd1 	bl	8011104 <memset>
 8011962:	6365      	str	r5, [r4, #52]	; 0x34
 8011964:	63a5      	str	r5, [r4, #56]	; 0x38
 8011966:	64a5      	str	r5, [r4, #72]	; 0x48
 8011968:	64e5      	str	r5, [r4, #76]	; 0x4c
 801196a:	4620      	mov	r0, r4
 801196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801196e:	bf00      	nop
 8011970:	08013fb4 	.word	0x08013fb4

08011974 <__sfp_lock_acquire>:
 8011974:	4770      	bx	lr

08011976 <__sfp_lock_release>:
 8011976:	4770      	bx	lr

08011978 <__sinit_lock_acquire>:
 8011978:	4770      	bx	lr

0801197a <__sinit_lock_release>:
 801197a:	4770      	bx	lr

0801197c <__fp_lock_all>:
 801197c:	4b02      	ldr	r3, [pc, #8]	; (8011988 <__fp_lock_all+0xc>)
 801197e:	4903      	ldr	r1, [pc, #12]	; (801198c <__fp_lock_all+0x10>)
 8011980:	6818      	ldr	r0, [r3, #0]
 8011982:	f000 b80f 	b.w	80119a4 <_fwalk>
 8011986:	bf00      	nop
 8011988:	20000094 	.word	0x20000094
 801198c:	08011861 	.word	0x08011861

08011990 <__fp_unlock_all>:
 8011990:	4b02      	ldr	r3, [pc, #8]	; (801199c <__fp_unlock_all+0xc>)
 8011992:	4903      	ldr	r1, [pc, #12]	; (80119a0 <__fp_unlock_all+0x10>)
 8011994:	6818      	ldr	r0, [r3, #0]
 8011996:	f000 b805 	b.w	80119a4 <_fwalk>
 801199a:	bf00      	nop
 801199c:	20000094 	.word	0x20000094
 80119a0:	08011809 	.word	0x08011809

080119a4 <_fwalk>:
 80119a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a8:	4688      	mov	r8, r1
 80119aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80119ae:	2600      	movs	r6, #0
 80119b0:	b18c      	cbz	r4, 80119d6 <_fwalk+0x32>
 80119b2:	68a5      	ldr	r5, [r4, #8]
 80119b4:	6867      	ldr	r7, [r4, #4]
 80119b6:	3f01      	subs	r7, #1
 80119b8:	d40b      	bmi.n	80119d2 <_fwalk+0x2e>
 80119ba:	89ab      	ldrh	r3, [r5, #12]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d906      	bls.n	80119ce <_fwalk+0x2a>
 80119c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119c4:	3301      	adds	r3, #1
 80119c6:	d002      	beq.n	80119ce <_fwalk+0x2a>
 80119c8:	4628      	mov	r0, r5
 80119ca:	47c0      	blx	r8
 80119cc:	4306      	orrs	r6, r0
 80119ce:	3568      	adds	r5, #104	; 0x68
 80119d0:	e7f1      	b.n	80119b6 <_fwalk+0x12>
 80119d2:	6824      	ldr	r4, [r4, #0]
 80119d4:	e7ec      	b.n	80119b0 <_fwalk+0xc>
 80119d6:	4630      	mov	r0, r6
 80119d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119dc <_fwalk_reent>:
 80119dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119e0:	4680      	mov	r8, r0
 80119e2:	4689      	mov	r9, r1
 80119e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80119e8:	2600      	movs	r6, #0
 80119ea:	b194      	cbz	r4, 8011a12 <_fwalk_reent+0x36>
 80119ec:	68a5      	ldr	r5, [r4, #8]
 80119ee:	6867      	ldr	r7, [r4, #4]
 80119f0:	3f01      	subs	r7, #1
 80119f2:	d40c      	bmi.n	8011a0e <_fwalk_reent+0x32>
 80119f4:	89ab      	ldrh	r3, [r5, #12]
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d907      	bls.n	8011a0a <_fwalk_reent+0x2e>
 80119fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80119fe:	3301      	adds	r3, #1
 8011a00:	d003      	beq.n	8011a0a <_fwalk_reent+0x2e>
 8011a02:	4629      	mov	r1, r5
 8011a04:	4640      	mov	r0, r8
 8011a06:	47c8      	blx	r9
 8011a08:	4306      	orrs	r6, r0
 8011a0a:	3568      	adds	r5, #104	; 0x68
 8011a0c:	e7f0      	b.n	80119f0 <_fwalk_reent+0x14>
 8011a0e:	6824      	ldr	r4, [r4, #0]
 8011a10:	e7eb      	b.n	80119ea <_fwalk_reent+0xe>
 8011a12:	4630      	mov	r0, r6
 8011a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011a18 <__smakebuf_r>:
 8011a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a1a:	898b      	ldrh	r3, [r1, #12]
 8011a1c:	b091      	sub	sp, #68	; 0x44
 8011a1e:	079d      	lsls	r5, r3, #30
 8011a20:	4606      	mov	r6, r0
 8011a22:	460c      	mov	r4, r1
 8011a24:	d425      	bmi.n	8011a72 <__smakebuf_r+0x5a>
 8011a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a2a:	2900      	cmp	r1, #0
 8011a2c:	da08      	bge.n	8011a40 <__smakebuf_r+0x28>
 8011a2e:	89a3      	ldrh	r3, [r4, #12]
 8011a30:	2500      	movs	r5, #0
 8011a32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011a36:	bf14      	ite	ne
 8011a38:	2740      	movne	r7, #64	; 0x40
 8011a3a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8011a3e:	e00d      	b.n	8011a5c <__smakebuf_r+0x44>
 8011a40:	aa01      	add	r2, sp, #4
 8011a42:	f000 fc81 	bl	8012348 <_fstat_r>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	dbf1      	blt.n	8011a2e <__smakebuf_r+0x16>
 8011a4a:	9d02      	ldr	r5, [sp, #8]
 8011a4c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8011a50:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8011a54:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8011a58:	424d      	negs	r5, r1
 8011a5a:	414d      	adcs	r5, r1
 8011a5c:	4639      	mov	r1, r7
 8011a5e:	4630      	mov	r0, r6
 8011a60:	f7ff fb9c 	bl	801119c <_malloc_r>
 8011a64:	b960      	cbnz	r0, 8011a80 <__smakebuf_r+0x68>
 8011a66:	89a3      	ldrh	r3, [r4, #12]
 8011a68:	059a      	lsls	r2, r3, #22
 8011a6a:	d41d      	bmi.n	8011aa8 <__smakebuf_r+0x90>
 8011a6c:	f043 0302 	orr.w	r3, r3, #2
 8011a70:	81a3      	strh	r3, [r4, #12]
 8011a72:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a76:	6023      	str	r3, [r4, #0]
 8011a78:	6123      	str	r3, [r4, #16]
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	6163      	str	r3, [r4, #20]
 8011a7e:	e013      	b.n	8011aa8 <__smakebuf_r+0x90>
 8011a80:	4b0a      	ldr	r3, [pc, #40]	; (8011aac <__smakebuf_r+0x94>)
 8011a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a84:	89a3      	ldrh	r3, [r4, #12]
 8011a86:	6020      	str	r0, [r4, #0]
 8011a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a8c:	81a3      	strh	r3, [r4, #12]
 8011a8e:	6120      	str	r0, [r4, #16]
 8011a90:	6167      	str	r7, [r4, #20]
 8011a92:	b14d      	cbz	r5, 8011aa8 <__smakebuf_r+0x90>
 8011a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a98:	4630      	mov	r0, r6
 8011a9a:	f000 fc67 	bl	801236c <_isatty_r>
 8011a9e:	b118      	cbz	r0, 8011aa8 <__smakebuf_r+0x90>
 8011aa0:	89a3      	ldrh	r3, [r4, #12]
 8011aa2:	f043 0301 	orr.w	r3, r3, #1
 8011aa6:	81a3      	strh	r3, [r4, #12]
 8011aa8:	b011      	add	sp, #68	; 0x44
 8011aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aac:	0801180d 	.word	0x0801180d

08011ab0 <_realloc_r>:
 8011ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ab2:	4607      	mov	r7, r0
 8011ab4:	4615      	mov	r5, r2
 8011ab6:	460e      	mov	r6, r1
 8011ab8:	b921      	cbnz	r1, 8011ac4 <_realloc_r+0x14>
 8011aba:	4611      	mov	r1, r2
 8011abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011ac0:	f7ff bb6c 	b.w	801119c <_malloc_r>
 8011ac4:	b91a      	cbnz	r2, 8011ace <_realloc_r+0x1e>
 8011ac6:	f7ff fb25 	bl	8011114 <_free_r>
 8011aca:	4628      	mov	r0, r5
 8011acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ace:	f000 fc98 	bl	8012402 <_malloc_usable_size_r>
 8011ad2:	4285      	cmp	r5, r0
 8011ad4:	d90e      	bls.n	8011af4 <_realloc_r+0x44>
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4638      	mov	r0, r7
 8011ada:	f7ff fb5f 	bl	801119c <_malloc_r>
 8011ade:	4604      	mov	r4, r0
 8011ae0:	b150      	cbz	r0, 8011af8 <_realloc_r+0x48>
 8011ae2:	4631      	mov	r1, r6
 8011ae4:	462a      	mov	r2, r5
 8011ae6:	f7ff fb02 	bl	80110ee <memcpy>
 8011aea:	4631      	mov	r1, r6
 8011aec:	4638      	mov	r0, r7
 8011aee:	f7ff fb11 	bl	8011114 <_free_r>
 8011af2:	e001      	b.n	8011af8 <_realloc_r+0x48>
 8011af4:	4630      	mov	r0, r6
 8011af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011af8:	4620      	mov	r0, r4
 8011afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011afc <__ssputs_r>:
 8011afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b00:	688e      	ldr	r6, [r1, #8]
 8011b02:	4682      	mov	sl, r0
 8011b04:	429e      	cmp	r6, r3
 8011b06:	460c      	mov	r4, r1
 8011b08:	4691      	mov	r9, r2
 8011b0a:	4698      	mov	r8, r3
 8011b0c:	d83e      	bhi.n	8011b8c <__ssputs_r+0x90>
 8011b0e:	898a      	ldrh	r2, [r1, #12]
 8011b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b14:	d03a      	beq.n	8011b8c <__ssputs_r+0x90>
 8011b16:	6825      	ldr	r5, [r4, #0]
 8011b18:	6909      	ldr	r1, [r1, #16]
 8011b1a:	2302      	movs	r3, #2
 8011b1c:	1a6f      	subs	r7, r5, r1
 8011b1e:	6965      	ldr	r5, [r4, #20]
 8011b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b24:	fb95 f5f3 	sdiv	r5, r5, r3
 8011b28:	1c7b      	adds	r3, r7, #1
 8011b2a:	4443      	add	r3, r8
 8011b2c:	429d      	cmp	r5, r3
 8011b2e:	bf38      	it	cc
 8011b30:	461d      	movcc	r5, r3
 8011b32:	0553      	lsls	r3, r2, #21
 8011b34:	d50f      	bpl.n	8011b56 <__ssputs_r+0x5a>
 8011b36:	4629      	mov	r1, r5
 8011b38:	f7ff fb30 	bl	801119c <_malloc_r>
 8011b3c:	4606      	mov	r6, r0
 8011b3e:	b198      	cbz	r0, 8011b68 <__ssputs_r+0x6c>
 8011b40:	463a      	mov	r2, r7
 8011b42:	6921      	ldr	r1, [r4, #16]
 8011b44:	f7ff fad3 	bl	80110ee <memcpy>
 8011b48:	89a3      	ldrh	r3, [r4, #12]
 8011b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b52:	81a3      	strh	r3, [r4, #12]
 8011b54:	e013      	b.n	8011b7e <__ssputs_r+0x82>
 8011b56:	462a      	mov	r2, r5
 8011b58:	f7ff ffaa 	bl	8011ab0 <_realloc_r>
 8011b5c:	4606      	mov	r6, r0
 8011b5e:	b970      	cbnz	r0, 8011b7e <__ssputs_r+0x82>
 8011b60:	6921      	ldr	r1, [r4, #16]
 8011b62:	4650      	mov	r0, sl
 8011b64:	f7ff fad6 	bl	8011114 <_free_r>
 8011b68:	230c      	movs	r3, #12
 8011b6a:	f8ca 3000 	str.w	r3, [sl]
 8011b6e:	89a3      	ldrh	r3, [r4, #12]
 8011b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b78:	81a3      	strh	r3, [r4, #12]
 8011b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b7e:	6126      	str	r6, [r4, #16]
 8011b80:	443e      	add	r6, r7
 8011b82:	6026      	str	r6, [r4, #0]
 8011b84:	4646      	mov	r6, r8
 8011b86:	6165      	str	r5, [r4, #20]
 8011b88:	1bed      	subs	r5, r5, r7
 8011b8a:	60a5      	str	r5, [r4, #8]
 8011b8c:	4546      	cmp	r6, r8
 8011b8e:	bf28      	it	cs
 8011b90:	4646      	movcs	r6, r8
 8011b92:	4649      	mov	r1, r9
 8011b94:	4632      	mov	r2, r6
 8011b96:	6820      	ldr	r0, [r4, #0]
 8011b98:	f000 fc18 	bl	80123cc <memmove>
 8011b9c:	68a3      	ldr	r3, [r4, #8]
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	1b9b      	subs	r3, r3, r6
 8011ba2:	60a3      	str	r3, [r4, #8]
 8011ba4:	6823      	ldr	r3, [r4, #0]
 8011ba6:	441e      	add	r6, r3
 8011ba8:	6026      	str	r6, [r4, #0]
 8011baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011bae <__ssprint_r>:
 8011bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb2:	4693      	mov	fp, r2
 8011bb4:	6892      	ldr	r2, [r2, #8]
 8011bb6:	4681      	mov	r9, r0
 8011bb8:	460c      	mov	r4, r1
 8011bba:	b34a      	cbz	r2, 8011c10 <__ssprint_r+0x62>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	f8db a000 	ldr.w	sl, [fp]
 8011bc2:	9301      	str	r3, [sp, #4]
 8011bc4:	461f      	mov	r7, r3
 8011bc6:	e006      	b.n	8011bd6 <__ssprint_r+0x28>
 8011bc8:	f8da 3000 	ldr.w	r3, [sl]
 8011bcc:	f8da 7004 	ldr.w	r7, [sl, #4]
 8011bd0:	9301      	str	r3, [sp, #4]
 8011bd2:	f10a 0a08 	add.w	sl, sl, #8
 8011bd6:	2f00      	cmp	r7, #0
 8011bd8:	d0f6      	beq.n	8011bc8 <__ssprint_r+0x1a>
 8011bda:	68a6      	ldr	r6, [r4, #8]
 8011bdc:	42b7      	cmp	r7, r6
 8011bde:	d360      	bcc.n	8011ca2 <__ssprint_r+0xf4>
 8011be0:	89a0      	ldrh	r0, [r4, #12]
 8011be2:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8011be6:	d117      	bne.n	8011c18 <__ssprint_r+0x6a>
 8011be8:	42b7      	cmp	r7, r6
 8011bea:	d35a      	bcc.n	8011ca2 <__ssprint_r+0xf4>
 8011bec:	4632      	mov	r2, r6
 8011bee:	9901      	ldr	r1, [sp, #4]
 8011bf0:	6820      	ldr	r0, [r4, #0]
 8011bf2:	f000 fbeb 	bl	80123cc <memmove>
 8011bf6:	68a2      	ldr	r2, [r4, #8]
 8011bf8:	1b92      	subs	r2, r2, r6
 8011bfa:	60a2      	str	r2, [r4, #8]
 8011bfc:	6822      	ldr	r2, [r4, #0]
 8011bfe:	4416      	add	r6, r2
 8011c00:	f8db 2008 	ldr.w	r2, [fp, #8]
 8011c04:	6026      	str	r6, [r4, #0]
 8011c06:	1bd7      	subs	r7, r2, r7
 8011c08:	f8cb 7008 	str.w	r7, [fp, #8]
 8011c0c:	2f00      	cmp	r7, #0
 8011c0e:	d1db      	bne.n	8011bc8 <__ssprint_r+0x1a>
 8011c10:	2000      	movs	r0, #0
 8011c12:	f8cb 0004 	str.w	r0, [fp, #4]
 8011c16:	e046      	b.n	8011ca6 <__ssprint_r+0xf8>
 8011c18:	6825      	ldr	r5, [r4, #0]
 8011c1a:	6921      	ldr	r1, [r4, #16]
 8011c1c:	2302      	movs	r3, #2
 8011c1e:	ebc1 0805 	rsb	r8, r1, r5
 8011c22:	6965      	ldr	r5, [r4, #20]
 8011c24:	f108 0201 	add.w	r2, r8, #1
 8011c28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c2c:	fb95 f5f3 	sdiv	r5, r5, r3
 8011c30:	443a      	add	r2, r7
 8011c32:	4295      	cmp	r5, r2
 8011c34:	bf38      	it	cc
 8011c36:	4615      	movcc	r5, r2
 8011c38:	0543      	lsls	r3, r0, #21
 8011c3a:	d510      	bpl.n	8011c5e <__ssprint_r+0xb0>
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	4648      	mov	r0, r9
 8011c40:	f7ff faac 	bl	801119c <_malloc_r>
 8011c44:	4606      	mov	r6, r0
 8011c46:	b1a0      	cbz	r0, 8011c72 <__ssprint_r+0xc4>
 8011c48:	4642      	mov	r2, r8
 8011c4a:	6921      	ldr	r1, [r4, #16]
 8011c4c:	f7ff fa4f 	bl	80110ee <memcpy>
 8011c50:	89a2      	ldrh	r2, [r4, #12]
 8011c52:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8011c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011c5a:	81a2      	strh	r2, [r4, #12]
 8011c5c:	e018      	b.n	8011c90 <__ssprint_r+0xe2>
 8011c5e:	462a      	mov	r2, r5
 8011c60:	4648      	mov	r0, r9
 8011c62:	f7ff ff25 	bl	8011ab0 <_realloc_r>
 8011c66:	4606      	mov	r6, r0
 8011c68:	b990      	cbnz	r0, 8011c90 <__ssprint_r+0xe2>
 8011c6a:	6921      	ldr	r1, [r4, #16]
 8011c6c:	4648      	mov	r0, r9
 8011c6e:	f7ff fa51 	bl	8011114 <_free_r>
 8011c72:	220c      	movs	r2, #12
 8011c74:	f8c9 2000 	str.w	r2, [r9]
 8011c78:	89a2      	ldrh	r2, [r4, #12]
 8011c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c82:	81a2      	strh	r2, [r4, #12]
 8011c84:	2200      	movs	r2, #0
 8011c86:	f8cb 2008 	str.w	r2, [fp, #8]
 8011c8a:	f8cb 2004 	str.w	r2, [fp, #4]
 8011c8e:	e00a      	b.n	8011ca6 <__ssprint_r+0xf8>
 8011c90:	6126      	str	r6, [r4, #16]
 8011c92:	6165      	str	r5, [r4, #20]
 8011c94:	4446      	add	r6, r8
 8011c96:	ebc8 0505 	rsb	r5, r8, r5
 8011c9a:	6026      	str	r6, [r4, #0]
 8011c9c:	60a5      	str	r5, [r4, #8]
 8011c9e:	463e      	mov	r6, r7
 8011ca0:	e7a2      	b.n	8011be8 <__ssprint_r+0x3a>
 8011ca2:	463e      	mov	r6, r7
 8011ca4:	e7a2      	b.n	8011bec <__ssprint_r+0x3e>
 8011ca6:	b003      	add	sp, #12
 8011ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011cac <_svfiprintf_r>:
 8011cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cb0:	b09d      	sub	sp, #116	; 0x74
 8011cb2:	9303      	str	r3, [sp, #12]
 8011cb4:	898b      	ldrh	r3, [r1, #12]
 8011cb6:	4680      	mov	r8, r0
 8011cb8:	061c      	lsls	r4, r3, #24
 8011cba:	460d      	mov	r5, r1
 8011cbc:	4616      	mov	r6, r2
 8011cbe:	d50d      	bpl.n	8011cdc <_svfiprintf_r+0x30>
 8011cc0:	690b      	ldr	r3, [r1, #16]
 8011cc2:	b95b      	cbnz	r3, 8011cdc <_svfiprintf_r+0x30>
 8011cc4:	2140      	movs	r1, #64	; 0x40
 8011cc6:	f7ff fa69 	bl	801119c <_malloc_r>
 8011cca:	6028      	str	r0, [r5, #0]
 8011ccc:	6128      	str	r0, [r5, #16]
 8011cce:	b918      	cbnz	r0, 8011cd8 <_svfiprintf_r+0x2c>
 8011cd0:	230c      	movs	r3, #12
 8011cd2:	f8c8 3000 	str.w	r3, [r8]
 8011cd6:	e0cd      	b.n	8011e74 <_svfiprintf_r+0x1c8>
 8011cd8:	2340      	movs	r3, #64	; 0x40
 8011cda:	616b      	str	r3, [r5, #20]
 8011cdc:	2300      	movs	r3, #0
 8011cde:	9309      	str	r3, [sp, #36]	; 0x24
 8011ce0:	2320      	movs	r3, #32
 8011ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ce6:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8011e84 <_svfiprintf_r+0x1d8>
 8011cea:	2330      	movs	r3, #48	; 0x30
 8011cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011cf0:	4637      	mov	r7, r6
 8011cf2:	463c      	mov	r4, r7
 8011cf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011cf8:	b91b      	cbnz	r3, 8011d02 <_svfiprintf_r+0x56>
 8011cfa:	ebb7 0906 	subs.w	r9, r7, r6
 8011cfe:	d010      	beq.n	8011d22 <_svfiprintf_r+0x76>
 8011d00:	e003      	b.n	8011d0a <_svfiprintf_r+0x5e>
 8011d02:	2b25      	cmp	r3, #37	; 0x25
 8011d04:	d0f9      	beq.n	8011cfa <_svfiprintf_r+0x4e>
 8011d06:	4627      	mov	r7, r4
 8011d08:	e7f3      	b.n	8011cf2 <_svfiprintf_r+0x46>
 8011d0a:	464b      	mov	r3, r9
 8011d0c:	4632      	mov	r2, r6
 8011d0e:	4629      	mov	r1, r5
 8011d10:	4640      	mov	r0, r8
 8011d12:	f7ff fef3 	bl	8011afc <__ssputs_r>
 8011d16:	3001      	adds	r0, #1
 8011d18:	f000 80a7 	beq.w	8011e6a <_svfiprintf_r+0x1be>
 8011d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d1e:	444b      	add	r3, r9
 8011d20:	9309      	str	r3, [sp, #36]	; 0x24
 8011d22:	783b      	ldrb	r3, [r7, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f000 80a0 	beq.w	8011e6a <_svfiprintf_r+0x1be>
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d30:	9304      	str	r3, [sp, #16]
 8011d32:	9307      	str	r3, [sp, #28]
 8011d34:	9205      	str	r2, [sp, #20]
 8011d36:	9306      	str	r3, [sp, #24]
 8011d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8011d3e:	2601      	movs	r6, #1
 8011d40:	2205      	movs	r2, #5
 8011d42:	7821      	ldrb	r1, [r4, #0]
 8011d44:	484e      	ldr	r0, [pc, #312]	; (8011e80 <_svfiprintf_r+0x1d4>)
 8011d46:	f000 fb33 	bl	80123b0 <memchr>
 8011d4a:	1c67      	adds	r7, r4, #1
 8011d4c:	9b04      	ldr	r3, [sp, #16]
 8011d4e:	b138      	cbz	r0, 8011d60 <_svfiprintf_r+0xb4>
 8011d50:	4a4b      	ldr	r2, [pc, #300]	; (8011e80 <_svfiprintf_r+0x1d4>)
 8011d52:	463c      	mov	r4, r7
 8011d54:	1a80      	subs	r0, r0, r2
 8011d56:	fa06 f000 	lsl.w	r0, r6, r0
 8011d5a:	4318      	orrs	r0, r3
 8011d5c:	9004      	str	r0, [sp, #16]
 8011d5e:	e7ef      	b.n	8011d40 <_svfiprintf_r+0x94>
 8011d60:	06d9      	lsls	r1, r3, #27
 8011d62:	bf44      	itt	mi
 8011d64:	2220      	movmi	r2, #32
 8011d66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d6a:	071a      	lsls	r2, r3, #28
 8011d6c:	bf44      	itt	mi
 8011d6e:	222b      	movmi	r2, #43	; 0x2b
 8011d70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d74:	7822      	ldrb	r2, [r4, #0]
 8011d76:	2a2a      	cmp	r2, #42	; 0x2a
 8011d78:	d003      	beq.n	8011d82 <_svfiprintf_r+0xd6>
 8011d7a:	9a07      	ldr	r2, [sp, #28]
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	200a      	movs	r0, #10
 8011d80:	e00b      	b.n	8011d9a <_svfiprintf_r+0xee>
 8011d82:	9a03      	ldr	r2, [sp, #12]
 8011d84:	1d11      	adds	r1, r2, #4
 8011d86:	6812      	ldr	r2, [r2, #0]
 8011d88:	9103      	str	r1, [sp, #12]
 8011d8a:	2a00      	cmp	r2, #0
 8011d8c:	da10      	bge.n	8011db0 <_svfiprintf_r+0x104>
 8011d8e:	4252      	negs	r2, r2
 8011d90:	f043 0002 	orr.w	r0, r3, #2
 8011d94:	9207      	str	r2, [sp, #28]
 8011d96:	9004      	str	r0, [sp, #16]
 8011d98:	e00b      	b.n	8011db2 <_svfiprintf_r+0x106>
 8011d9a:	4627      	mov	r7, r4
 8011d9c:	783b      	ldrb	r3, [r7, #0]
 8011d9e:	3401      	adds	r4, #1
 8011da0:	3b30      	subs	r3, #48	; 0x30
 8011da2:	2b09      	cmp	r3, #9
 8011da4:	d803      	bhi.n	8011dae <_svfiprintf_r+0x102>
 8011da6:	fb00 3202 	mla	r2, r0, r2, r3
 8011daa:	2101      	movs	r1, #1
 8011dac:	e7f5      	b.n	8011d9a <_svfiprintf_r+0xee>
 8011dae:	b101      	cbz	r1, 8011db2 <_svfiprintf_r+0x106>
 8011db0:	9207      	str	r2, [sp, #28]
 8011db2:	783b      	ldrb	r3, [r7, #0]
 8011db4:	2b2e      	cmp	r3, #46	; 0x2e
 8011db6:	d11e      	bne.n	8011df6 <_svfiprintf_r+0x14a>
 8011db8:	787b      	ldrb	r3, [r7, #1]
 8011dba:	2b2a      	cmp	r3, #42	; 0x2a
 8011dbc:	d10a      	bne.n	8011dd4 <_svfiprintf_r+0x128>
 8011dbe:	9b03      	ldr	r3, [sp, #12]
 8011dc0:	3702      	adds	r7, #2
 8011dc2:	1d1a      	adds	r2, r3, #4
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	9203      	str	r2, [sp, #12]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	bfb8      	it	lt
 8011dcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011dd0:	9305      	str	r3, [sp, #20]
 8011dd2:	e010      	b.n	8011df6 <_svfiprintf_r+0x14a>
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	9305      	str	r3, [sp, #20]
 8011dda:	1c78      	adds	r0, r7, #1
 8011ddc:	240a      	movs	r4, #10
 8011dde:	4607      	mov	r7, r0
 8011de0:	783a      	ldrb	r2, [r7, #0]
 8011de2:	3001      	adds	r0, #1
 8011de4:	3a30      	subs	r2, #48	; 0x30
 8011de6:	2a09      	cmp	r2, #9
 8011de8:	d803      	bhi.n	8011df2 <_svfiprintf_r+0x146>
 8011dea:	fb04 2101 	mla	r1, r4, r1, r2
 8011dee:	2301      	movs	r3, #1
 8011df0:	e7f5      	b.n	8011dde <_svfiprintf_r+0x132>
 8011df2:	b103      	cbz	r3, 8011df6 <_svfiprintf_r+0x14a>
 8011df4:	9105      	str	r1, [sp, #20]
 8011df6:	2203      	movs	r2, #3
 8011df8:	7839      	ldrb	r1, [r7, #0]
 8011dfa:	4822      	ldr	r0, [pc, #136]	; (8011e84 <_svfiprintf_r+0x1d8>)
 8011dfc:	f000 fad8 	bl	80123b0 <memchr>
 8011e00:	b140      	cbz	r0, 8011e14 <_svfiprintf_r+0x168>
 8011e02:	2340      	movs	r3, #64	; 0x40
 8011e04:	ebcb 0000 	rsb	r0, fp, r0
 8011e08:	fa03 f000 	lsl.w	r0, r3, r0
 8011e0c:	9b04      	ldr	r3, [sp, #16]
 8011e0e:	3701      	adds	r7, #1
 8011e10:	4318      	orrs	r0, r3
 8011e12:	9004      	str	r0, [sp, #16]
 8011e14:	7839      	ldrb	r1, [r7, #0]
 8011e16:	2206      	movs	r2, #6
 8011e18:	481b      	ldr	r0, [pc, #108]	; (8011e88 <_svfiprintf_r+0x1dc>)
 8011e1a:	1c7e      	adds	r6, r7, #1
 8011e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e20:	f000 fac6 	bl	80123b0 <memchr>
 8011e24:	b188      	cbz	r0, 8011e4a <_svfiprintf_r+0x19e>
 8011e26:	4b19      	ldr	r3, [pc, #100]	; (8011e8c <_svfiprintf_r+0x1e0>)
 8011e28:	b933      	cbnz	r3, 8011e38 <_svfiprintf_r+0x18c>
 8011e2a:	9b03      	ldr	r3, [sp, #12]
 8011e2c:	3307      	adds	r3, #7
 8011e2e:	f023 0307 	bic.w	r3, r3, #7
 8011e32:	3308      	adds	r3, #8
 8011e34:	9303      	str	r3, [sp, #12]
 8011e36:	e014      	b.n	8011e62 <_svfiprintf_r+0x1b6>
 8011e38:	ab03      	add	r3, sp, #12
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	462a      	mov	r2, r5
 8011e3e:	4b14      	ldr	r3, [pc, #80]	; (8011e90 <_svfiprintf_r+0x1e4>)
 8011e40:	a904      	add	r1, sp, #16
 8011e42:	4640      	mov	r0, r8
 8011e44:	f3af 8000 	nop.w
 8011e48:	e007      	b.n	8011e5a <_svfiprintf_r+0x1ae>
 8011e4a:	ab03      	add	r3, sp, #12
 8011e4c:	9300      	str	r3, [sp, #0]
 8011e4e:	462a      	mov	r2, r5
 8011e50:	4b0f      	ldr	r3, [pc, #60]	; (8011e90 <_svfiprintf_r+0x1e4>)
 8011e52:	a904      	add	r1, sp, #16
 8011e54:	4640      	mov	r0, r8
 8011e56:	f000 f893 	bl	8011f80 <_printf_i>
 8011e5a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011e5e:	4682      	mov	sl, r0
 8011e60:	d003      	beq.n	8011e6a <_svfiprintf_r+0x1be>
 8011e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e64:	4453      	add	r3, sl
 8011e66:	9309      	str	r3, [sp, #36]	; 0x24
 8011e68:	e742      	b.n	8011cf0 <_svfiprintf_r+0x44>
 8011e6a:	89ab      	ldrh	r3, [r5, #12]
 8011e6c:	065b      	lsls	r3, r3, #25
 8011e6e:	d401      	bmi.n	8011e74 <_svfiprintf_r+0x1c8>
 8011e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e72:	e001      	b.n	8011e78 <_svfiprintf_r+0x1cc>
 8011e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e78:	b01d      	add	sp, #116	; 0x74
 8011e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e7e:	bf00      	nop
 8011e80:	08014018 	.word	0x08014018
 8011e84:	0801401e 	.word	0x0801401e
 8011e88:	08014022 	.word	0x08014022
 8011e8c:	00000000 	.word	0x00000000
 8011e90:	08011afd 	.word	0x08011afd

08011e94 <_printf_common>:
 8011e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e98:	4691      	mov	r9, r2
 8011e9a:	461f      	mov	r7, r3
 8011e9c:	690a      	ldr	r2, [r1, #16]
 8011e9e:	688b      	ldr	r3, [r1, #8]
 8011ea0:	4606      	mov	r6, r0
 8011ea2:	4293      	cmp	r3, r2
 8011ea4:	bfb8      	it	lt
 8011ea6:	4613      	movlt	r3, r2
 8011ea8:	f8c9 3000 	str.w	r3, [r9]
 8011eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011eb0:	460c      	mov	r4, r1
 8011eb2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011eb6:	b112      	cbz	r2, 8011ebe <_printf_common+0x2a>
 8011eb8:	3301      	adds	r3, #1
 8011eba:	f8c9 3000 	str.w	r3, [r9]
 8011ebe:	6823      	ldr	r3, [r4, #0]
 8011ec0:	0699      	lsls	r1, r3, #26
 8011ec2:	bf42      	ittt	mi
 8011ec4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011ec8:	3302      	addmi	r3, #2
 8011eca:	f8c9 3000 	strmi.w	r3, [r9]
 8011ece:	6825      	ldr	r5, [r4, #0]
 8011ed0:	f015 0506 	ands.w	r5, r5, #6
 8011ed4:	d110      	bne.n	8011ef8 <_printf_common+0x64>
 8011ed6:	f104 0a19 	add.w	sl, r4, #25
 8011eda:	e007      	b.n	8011eec <_printf_common+0x58>
 8011edc:	2301      	movs	r3, #1
 8011ede:	4652      	mov	r2, sl
 8011ee0:	4639      	mov	r1, r7
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	47c0      	blx	r8
 8011ee6:	3001      	adds	r0, #1
 8011ee8:	d01a      	beq.n	8011f20 <_printf_common+0x8c>
 8011eea:	3501      	adds	r5, #1
 8011eec:	68e3      	ldr	r3, [r4, #12]
 8011eee:	f8d9 2000 	ldr.w	r2, [r9]
 8011ef2:	1a9b      	subs	r3, r3, r2
 8011ef4:	429d      	cmp	r5, r3
 8011ef6:	dbf1      	blt.n	8011edc <_printf_common+0x48>
 8011ef8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011efc:	6822      	ldr	r2, [r4, #0]
 8011efe:	3300      	adds	r3, #0
 8011f00:	bf18      	it	ne
 8011f02:	2301      	movne	r3, #1
 8011f04:	0692      	lsls	r2, r2, #26
 8011f06:	d50f      	bpl.n	8011f28 <_printf_common+0x94>
 8011f08:	18e1      	adds	r1, r4, r3
 8011f0a:	2030      	movs	r0, #48	; 0x30
 8011f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f10:	1c5a      	adds	r2, r3, #1
 8011f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f16:	4422      	add	r2, r4
 8011f18:	3302      	adds	r3, #2
 8011f1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f1e:	e003      	b.n	8011f28 <_printf_common+0x94>
 8011f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f2c:	4639      	mov	r1, r7
 8011f2e:	4630      	mov	r0, r6
 8011f30:	47c0      	blx	r8
 8011f32:	3001      	adds	r0, #1
 8011f34:	d0f4      	beq.n	8011f20 <_printf_common+0x8c>
 8011f36:	6822      	ldr	r2, [r4, #0]
 8011f38:	f8d9 5000 	ldr.w	r5, [r9]
 8011f3c:	68e3      	ldr	r3, [r4, #12]
 8011f3e:	f002 0206 	and.w	r2, r2, #6
 8011f42:	2a04      	cmp	r2, #4
 8011f44:	bf08      	it	eq
 8011f46:	1b5d      	subeq	r5, r3, r5
 8011f48:	6922      	ldr	r2, [r4, #16]
 8011f4a:	68a3      	ldr	r3, [r4, #8]
 8011f4c:	bf0c      	ite	eq
 8011f4e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f52:	2500      	movne	r5, #0
 8011f54:	4293      	cmp	r3, r2
 8011f56:	bfc4      	itt	gt
 8011f58:	1a9b      	subgt	r3, r3, r2
 8011f5a:	18ed      	addgt	r5, r5, r3
 8011f5c:	f04f 0900 	mov.w	r9, #0
 8011f60:	341a      	adds	r4, #26
 8011f62:	454d      	cmp	r5, r9
 8011f64:	d009      	beq.n	8011f7a <_printf_common+0xe6>
 8011f66:	2301      	movs	r3, #1
 8011f68:	4622      	mov	r2, r4
 8011f6a:	4639      	mov	r1, r7
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	47c0      	blx	r8
 8011f70:	3001      	adds	r0, #1
 8011f72:	d0d5      	beq.n	8011f20 <_printf_common+0x8c>
 8011f74:	f109 0901 	add.w	r9, r9, #1
 8011f78:	e7f3      	b.n	8011f62 <_printf_common+0xce>
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011f80 <_printf_i>:
 8011f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f84:	4617      	mov	r7, r2
 8011f86:	7e0a      	ldrb	r2, [r1, #24]
 8011f88:	b085      	sub	sp, #20
 8011f8a:	2a6e      	cmp	r2, #110	; 0x6e
 8011f8c:	4698      	mov	r8, r3
 8011f8e:	4606      	mov	r6, r0
 8011f90:	460c      	mov	r4, r1
 8011f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f94:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8011f98:	f000 80ae 	beq.w	80120f8 <_printf_i+0x178>
 8011f9c:	d811      	bhi.n	8011fc2 <_printf_i+0x42>
 8011f9e:	2a63      	cmp	r2, #99	; 0x63
 8011fa0:	d022      	beq.n	8011fe8 <_printf_i+0x68>
 8011fa2:	d809      	bhi.n	8011fb8 <_printf_i+0x38>
 8011fa4:	2a00      	cmp	r2, #0
 8011fa6:	f000 80bb 	beq.w	8012120 <_printf_i+0x1a0>
 8011faa:	2a58      	cmp	r2, #88	; 0x58
 8011fac:	f040 80ca 	bne.w	8012144 <_printf_i+0x1c4>
 8011fb0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8011fb4:	4983      	ldr	r1, [pc, #524]	; (80121c4 <_printf_i+0x244>)
 8011fb6:	e055      	b.n	8012064 <_printf_i+0xe4>
 8011fb8:	2a64      	cmp	r2, #100	; 0x64
 8011fba:	d01e      	beq.n	8011ffa <_printf_i+0x7a>
 8011fbc:	2a69      	cmp	r2, #105	; 0x69
 8011fbe:	d01c      	beq.n	8011ffa <_printf_i+0x7a>
 8011fc0:	e0c0      	b.n	8012144 <_printf_i+0x1c4>
 8011fc2:	2a73      	cmp	r2, #115	; 0x73
 8011fc4:	f000 80b0 	beq.w	8012128 <_printf_i+0x1a8>
 8011fc8:	d809      	bhi.n	8011fde <_printf_i+0x5e>
 8011fca:	2a6f      	cmp	r2, #111	; 0x6f
 8011fcc:	d02e      	beq.n	801202c <_printf_i+0xac>
 8011fce:	2a70      	cmp	r2, #112	; 0x70
 8011fd0:	f040 80b8 	bne.w	8012144 <_printf_i+0x1c4>
 8011fd4:	680a      	ldr	r2, [r1, #0]
 8011fd6:	f042 0220 	orr.w	r2, r2, #32
 8011fda:	600a      	str	r2, [r1, #0]
 8011fdc:	e03e      	b.n	801205c <_printf_i+0xdc>
 8011fde:	2a75      	cmp	r2, #117	; 0x75
 8011fe0:	d024      	beq.n	801202c <_printf_i+0xac>
 8011fe2:	2a78      	cmp	r2, #120	; 0x78
 8011fe4:	d03a      	beq.n	801205c <_printf_i+0xdc>
 8011fe6:	e0ad      	b.n	8012144 <_printf_i+0x1c4>
 8011fe8:	681a      	ldr	r2, [r3, #0]
 8011fea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8011fee:	1d11      	adds	r1, r2, #4
 8011ff0:	6019      	str	r1, [r3, #0]
 8011ff2:	6813      	ldr	r3, [r2, #0]
 8011ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ff8:	e0a8      	b.n	801214c <_printf_i+0x1cc>
 8011ffa:	6821      	ldr	r1, [r4, #0]
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012002:	d002      	beq.n	801200a <_printf_i+0x8a>
 8012004:	1d11      	adds	r1, r2, #4
 8012006:	6019      	str	r1, [r3, #0]
 8012008:	e008      	b.n	801201c <_printf_i+0x9c>
 801200a:	f011 0f40 	tst.w	r1, #64	; 0x40
 801200e:	f102 0104 	add.w	r1, r2, #4
 8012012:	6019      	str	r1, [r3, #0]
 8012014:	d002      	beq.n	801201c <_printf_i+0x9c>
 8012016:	f9b2 3000 	ldrsh.w	r3, [r2]
 801201a:	e000      	b.n	801201e <_printf_i+0x9e>
 801201c:	6813      	ldr	r3, [r2, #0]
 801201e:	2b00      	cmp	r3, #0
 8012020:	da3c      	bge.n	801209c <_printf_i+0x11c>
 8012022:	222d      	movs	r2, #45	; 0x2d
 8012024:	425b      	negs	r3, r3
 8012026:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801202a:	e037      	b.n	801209c <_printf_i+0x11c>
 801202c:	6821      	ldr	r1, [r4, #0]
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	f011 0f80 	tst.w	r1, #128	; 0x80
 8012034:	d002      	beq.n	801203c <_printf_i+0xbc>
 8012036:	1d11      	adds	r1, r2, #4
 8012038:	6019      	str	r1, [r3, #0]
 801203a:	e007      	b.n	801204c <_printf_i+0xcc>
 801203c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8012040:	f102 0104 	add.w	r1, r2, #4
 8012044:	6019      	str	r1, [r3, #0]
 8012046:	d001      	beq.n	801204c <_printf_i+0xcc>
 8012048:	8813      	ldrh	r3, [r2, #0]
 801204a:	e000      	b.n	801204e <_printf_i+0xce>
 801204c:	6813      	ldr	r3, [r2, #0]
 801204e:	7e22      	ldrb	r2, [r4, #24]
 8012050:	495c      	ldr	r1, [pc, #368]	; (80121c4 <_printf_i+0x244>)
 8012052:	2a6f      	cmp	r2, #111	; 0x6f
 8012054:	bf14      	ite	ne
 8012056:	220a      	movne	r2, #10
 8012058:	2208      	moveq	r2, #8
 801205a:	e01b      	b.n	8012094 <_printf_i+0x114>
 801205c:	2278      	movs	r2, #120	; 0x78
 801205e:	495a      	ldr	r1, [pc, #360]	; (80121c8 <_printf_i+0x248>)
 8012060:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012064:	6822      	ldr	r2, [r4, #0]
 8012066:	6818      	ldr	r0, [r3, #0]
 8012068:	f012 0f80 	tst.w	r2, #128	; 0x80
 801206c:	f100 0504 	add.w	r5, r0, #4
 8012070:	601d      	str	r5, [r3, #0]
 8012072:	d103      	bne.n	801207c <_printf_i+0xfc>
 8012074:	0655      	lsls	r5, r2, #25
 8012076:	d501      	bpl.n	801207c <_printf_i+0xfc>
 8012078:	8803      	ldrh	r3, [r0, #0]
 801207a:	e000      	b.n	801207e <_printf_i+0xfe>
 801207c:	6803      	ldr	r3, [r0, #0]
 801207e:	07d0      	lsls	r0, r2, #31
 8012080:	bf44      	itt	mi
 8012082:	f042 0220 	orrmi.w	r2, r2, #32
 8012086:	6022      	strmi	r2, [r4, #0]
 8012088:	b91b      	cbnz	r3, 8012092 <_printf_i+0x112>
 801208a:	6822      	ldr	r2, [r4, #0]
 801208c:	f022 0220 	bic.w	r2, r2, #32
 8012090:	6022      	str	r2, [r4, #0]
 8012092:	2210      	movs	r2, #16
 8012094:	2000      	movs	r0, #0
 8012096:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801209a:	e001      	b.n	80120a0 <_printf_i+0x120>
 801209c:	4949      	ldr	r1, [pc, #292]	; (80121c4 <_printf_i+0x244>)
 801209e:	220a      	movs	r2, #10
 80120a0:	6865      	ldr	r5, [r4, #4]
 80120a2:	2d00      	cmp	r5, #0
 80120a4:	60a5      	str	r5, [r4, #8]
 80120a6:	db08      	blt.n	80120ba <_printf_i+0x13a>
 80120a8:	6820      	ldr	r0, [r4, #0]
 80120aa:	f020 0004 	bic.w	r0, r0, #4
 80120ae:	6020      	str	r0, [r4, #0]
 80120b0:	b92b      	cbnz	r3, 80120be <_printf_i+0x13e>
 80120b2:	2d00      	cmp	r5, #0
 80120b4:	d17d      	bne.n	80121b2 <_printf_i+0x232>
 80120b6:	4675      	mov	r5, lr
 80120b8:	e00c      	b.n	80120d4 <_printf_i+0x154>
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d079      	beq.n	80121b2 <_printf_i+0x232>
 80120be:	4675      	mov	r5, lr
 80120c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80120c4:	fb02 3310 	mls	r3, r2, r0, r3
 80120c8:	5ccb      	ldrb	r3, [r1, r3]
 80120ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80120ce:	4603      	mov	r3, r0
 80120d0:	2800      	cmp	r0, #0
 80120d2:	d1f5      	bne.n	80120c0 <_printf_i+0x140>
 80120d4:	2a08      	cmp	r2, #8
 80120d6:	d10b      	bne.n	80120f0 <_printf_i+0x170>
 80120d8:	6823      	ldr	r3, [r4, #0]
 80120da:	07da      	lsls	r2, r3, #31
 80120dc:	d508      	bpl.n	80120f0 <_printf_i+0x170>
 80120de:	6923      	ldr	r3, [r4, #16]
 80120e0:	6862      	ldr	r2, [r4, #4]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	bfde      	ittt	le
 80120e6:	2330      	movle	r3, #48	; 0x30
 80120e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80120ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80120f0:	ebc5 030e 	rsb	r3, r5, lr
 80120f4:	6123      	str	r3, [r4, #16]
 80120f6:	e02e      	b.n	8012156 <_printf_i+0x1d6>
 80120f8:	6808      	ldr	r0, [r1, #0]
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012100:	6949      	ldr	r1, [r1, #20]
 8012102:	d003      	beq.n	801210c <_printf_i+0x18c>
 8012104:	1d10      	adds	r0, r2, #4
 8012106:	6018      	str	r0, [r3, #0]
 8012108:	6813      	ldr	r3, [r2, #0]
 801210a:	e008      	b.n	801211e <_printf_i+0x19e>
 801210c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012110:	f102 0004 	add.w	r0, r2, #4
 8012114:	6018      	str	r0, [r3, #0]
 8012116:	6813      	ldr	r3, [r2, #0]
 8012118:	d001      	beq.n	801211e <_printf_i+0x19e>
 801211a:	8019      	strh	r1, [r3, #0]
 801211c:	e000      	b.n	8012120 <_printf_i+0x1a0>
 801211e:	6019      	str	r1, [r3, #0]
 8012120:	2300      	movs	r3, #0
 8012122:	6123      	str	r3, [r4, #16]
 8012124:	4675      	mov	r5, lr
 8012126:	e016      	b.n	8012156 <_printf_i+0x1d6>
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	1d11      	adds	r1, r2, #4
 801212c:	6019      	str	r1, [r3, #0]
 801212e:	6815      	ldr	r5, [r2, #0]
 8012130:	2100      	movs	r1, #0
 8012132:	6862      	ldr	r2, [r4, #4]
 8012134:	4628      	mov	r0, r5
 8012136:	f000 f93b 	bl	80123b0 <memchr>
 801213a:	b108      	cbz	r0, 8012140 <_printf_i+0x1c0>
 801213c:	1b40      	subs	r0, r0, r5
 801213e:	6060      	str	r0, [r4, #4]
 8012140:	6863      	ldr	r3, [r4, #4]
 8012142:	e004      	b.n	801214e <_printf_i+0x1ce>
 8012144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012148:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 801214c:	2301      	movs	r3, #1
 801214e:	6123      	str	r3, [r4, #16]
 8012150:	2300      	movs	r3, #0
 8012152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012156:	f8cd 8000 	str.w	r8, [sp]
 801215a:	463b      	mov	r3, r7
 801215c:	aa03      	add	r2, sp, #12
 801215e:	4621      	mov	r1, r4
 8012160:	4630      	mov	r0, r6
 8012162:	f7ff fe97 	bl	8011e94 <_printf_common>
 8012166:	3001      	adds	r0, #1
 8012168:	d102      	bne.n	8012170 <_printf_i+0x1f0>
 801216a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801216e:	e026      	b.n	80121be <_printf_i+0x23e>
 8012170:	6923      	ldr	r3, [r4, #16]
 8012172:	462a      	mov	r2, r5
 8012174:	4639      	mov	r1, r7
 8012176:	4630      	mov	r0, r6
 8012178:	47c0      	blx	r8
 801217a:	3001      	adds	r0, #1
 801217c:	d0f5      	beq.n	801216a <_printf_i+0x1ea>
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	079b      	lsls	r3, r3, #30
 8012182:	d510      	bpl.n	80121a6 <_printf_i+0x226>
 8012184:	2500      	movs	r5, #0
 8012186:	f104 0919 	add.w	r9, r4, #25
 801218a:	e007      	b.n	801219c <_printf_i+0x21c>
 801218c:	2301      	movs	r3, #1
 801218e:	464a      	mov	r2, r9
 8012190:	4639      	mov	r1, r7
 8012192:	4630      	mov	r0, r6
 8012194:	47c0      	blx	r8
 8012196:	3001      	adds	r0, #1
 8012198:	d0e7      	beq.n	801216a <_printf_i+0x1ea>
 801219a:	3501      	adds	r5, #1
 801219c:	68e3      	ldr	r3, [r4, #12]
 801219e:	9a03      	ldr	r2, [sp, #12]
 80121a0:	1a9b      	subs	r3, r3, r2
 80121a2:	429d      	cmp	r5, r3
 80121a4:	dbf2      	blt.n	801218c <_printf_i+0x20c>
 80121a6:	68e0      	ldr	r0, [r4, #12]
 80121a8:	9b03      	ldr	r3, [sp, #12]
 80121aa:	4298      	cmp	r0, r3
 80121ac:	bfb8      	it	lt
 80121ae:	4618      	movlt	r0, r3
 80121b0:	e005      	b.n	80121be <_printf_i+0x23e>
 80121b2:	780b      	ldrb	r3, [r1, #0]
 80121b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80121bc:	e78a      	b.n	80120d4 <_printf_i+0x154>
 80121be:	b005      	add	sp, #20
 80121c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121c4:	08014029 	.word	0x08014029
 80121c8:	0801403a 	.word	0x0801403a

080121cc <cleanup_glue>:
 80121cc:	b538      	push	{r3, r4, r5, lr}
 80121ce:	460c      	mov	r4, r1
 80121d0:	6809      	ldr	r1, [r1, #0]
 80121d2:	4605      	mov	r5, r0
 80121d4:	b109      	cbz	r1, 80121da <cleanup_glue+0xe>
 80121d6:	f7ff fff9 	bl	80121cc <cleanup_glue>
 80121da:	4621      	mov	r1, r4
 80121dc:	4628      	mov	r0, r5
 80121de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121e2:	f7fe bf97 	b.w	8011114 <_free_r>
	...

080121e8 <_reclaim_reent>:
 80121e8:	4b2b      	ldr	r3, [pc, #172]	; (8012298 <_reclaim_reent+0xb0>)
 80121ea:	b570      	push	{r4, r5, r6, lr}
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	4604      	mov	r4, r0
 80121f0:	4283      	cmp	r3, r0
 80121f2:	d050      	beq.n	8012296 <_reclaim_reent+0xae>
 80121f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80121f6:	b1d3      	cbz	r3, 801222e <_reclaim_reent+0x46>
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	b193      	cbz	r3, 8012222 <_reclaim_reent+0x3a>
 80121fc:	2500      	movs	r5, #0
 80121fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	5959      	ldr	r1, [r3, r5]
 8012204:	b129      	cbz	r1, 8012212 <_reclaim_reent+0x2a>
 8012206:	680e      	ldr	r6, [r1, #0]
 8012208:	4620      	mov	r0, r4
 801220a:	f7fe ff83 	bl	8011114 <_free_r>
 801220e:	4631      	mov	r1, r6
 8012210:	e7f8      	b.n	8012204 <_reclaim_reent+0x1c>
 8012212:	3504      	adds	r5, #4
 8012214:	2d80      	cmp	r5, #128	; 0x80
 8012216:	d1f2      	bne.n	80121fe <_reclaim_reent+0x16>
 8012218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801221a:	4620      	mov	r0, r4
 801221c:	68d9      	ldr	r1, [r3, #12]
 801221e:	f7fe ff79 	bl	8011114 <_free_r>
 8012222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012224:	6819      	ldr	r1, [r3, #0]
 8012226:	b111      	cbz	r1, 801222e <_reclaim_reent+0x46>
 8012228:	4620      	mov	r0, r4
 801222a:	f7fe ff73 	bl	8011114 <_free_r>
 801222e:	6961      	ldr	r1, [r4, #20]
 8012230:	b111      	cbz	r1, 8012238 <_reclaim_reent+0x50>
 8012232:	4620      	mov	r0, r4
 8012234:	f7fe ff6e 	bl	8011114 <_free_r>
 8012238:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801223a:	b111      	cbz	r1, 8012242 <_reclaim_reent+0x5a>
 801223c:	4620      	mov	r0, r4
 801223e:	f7fe ff69 	bl	8011114 <_free_r>
 8012242:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012244:	b111      	cbz	r1, 801224c <_reclaim_reent+0x64>
 8012246:	4620      	mov	r0, r4
 8012248:	f7fe ff64 	bl	8011114 <_free_r>
 801224c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801224e:	b111      	cbz	r1, 8012256 <_reclaim_reent+0x6e>
 8012250:	4620      	mov	r0, r4
 8012252:	f7fe ff5f 	bl	8011114 <_free_r>
 8012256:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012258:	b111      	cbz	r1, 8012260 <_reclaim_reent+0x78>
 801225a:	4620      	mov	r0, r4
 801225c:	f7fe ff5a 	bl	8011114 <_free_r>
 8012260:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012262:	b111      	cbz	r1, 801226a <_reclaim_reent+0x82>
 8012264:	4620      	mov	r0, r4
 8012266:	f7fe ff55 	bl	8011114 <_free_r>
 801226a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801226c:	b111      	cbz	r1, 8012274 <_reclaim_reent+0x8c>
 801226e:	4620      	mov	r0, r4
 8012270:	f7fe ff50 	bl	8011114 <_free_r>
 8012274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012276:	b111      	cbz	r1, 801227e <_reclaim_reent+0x96>
 8012278:	4620      	mov	r0, r4
 801227a:	f7fe ff4b 	bl	8011114 <_free_r>
 801227e:	69a3      	ldr	r3, [r4, #24]
 8012280:	b14b      	cbz	r3, 8012296 <_reclaim_reent+0xae>
 8012282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012284:	4620      	mov	r0, r4
 8012286:	4798      	blx	r3
 8012288:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801228a:	b121      	cbz	r1, 8012296 <_reclaim_reent+0xae>
 801228c:	4620      	mov	r0, r4
 801228e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012292:	f7ff bf9b 	b.w	80121cc <cleanup_glue>
 8012296:	bd70      	pop	{r4, r5, r6, pc}
 8012298:	20000094 	.word	0x20000094

0801229c <__sread>:
 801229c:	b510      	push	{r4, lr}
 801229e:	460c      	mov	r4, r1
 80122a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122a4:	f000 f8b8 	bl	8012418 <_read_r>
 80122a8:	2800      	cmp	r0, #0
 80122aa:	bfab      	itete	ge
 80122ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122ae:	89a3      	ldrhlt	r3, [r4, #12]
 80122b0:	181b      	addge	r3, r3, r0
 80122b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122b6:	bfac      	ite	ge
 80122b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80122ba:	81a3      	strhlt	r3, [r4, #12]
 80122bc:	bd10      	pop	{r4, pc}

080122be <__seofread>:
 80122be:	2000      	movs	r0, #0
 80122c0:	4770      	bx	lr

080122c2 <__swrite>:
 80122c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c6:	461f      	mov	r7, r3
 80122c8:	898b      	ldrh	r3, [r1, #12]
 80122ca:	4605      	mov	r5, r0
 80122cc:	05db      	lsls	r3, r3, #23
 80122ce:	460c      	mov	r4, r1
 80122d0:	4616      	mov	r6, r2
 80122d2:	d505      	bpl.n	80122e0 <__swrite+0x1e>
 80122d4:	2302      	movs	r3, #2
 80122d6:	2200      	movs	r2, #0
 80122d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122dc:	f000 f856 	bl	801238c <_lseek_r>
 80122e0:	89a3      	ldrh	r3, [r4, #12]
 80122e2:	4632      	mov	r2, r6
 80122e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122e8:	81a3      	strh	r3, [r4, #12]
 80122ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122ee:	463b      	mov	r3, r7
 80122f0:	4628      	mov	r0, r5
 80122f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122f6:	f7ff b947 	b.w	8011588 <_write_r>

080122fa <__sseek>:
 80122fa:	b510      	push	{r4, lr}
 80122fc:	460c      	mov	r4, r1
 80122fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012302:	f000 f843 	bl	801238c <_lseek_r>
 8012306:	1c43      	adds	r3, r0, #1
 8012308:	89a3      	ldrh	r3, [r4, #12]
 801230a:	bf15      	itete	ne
 801230c:	6560      	strne	r0, [r4, #84]	; 0x54
 801230e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012316:	81a3      	strheq	r3, [r4, #12]
 8012318:	bf18      	it	ne
 801231a:	81a3      	strhne	r3, [r4, #12]
 801231c:	bd10      	pop	{r4, pc}

0801231e <__sclose>:
 801231e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012322:	f000 b801 	b.w	8012328 <_close_r>
	...

08012328 <_close_r>:
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	4c06      	ldr	r4, [pc, #24]	; (8012344 <_close_r+0x1c>)
 801232c:	2300      	movs	r3, #0
 801232e:	4605      	mov	r5, r0
 8012330:	4608      	mov	r0, r1
 8012332:	6023      	str	r3, [r4, #0]
 8012334:	f000 f882 	bl	801243c <_close>
 8012338:	1c43      	adds	r3, r0, #1
 801233a:	d102      	bne.n	8012342 <_close_r+0x1a>
 801233c:	6823      	ldr	r3, [r4, #0]
 801233e:	b103      	cbz	r3, 8012342 <_close_r+0x1a>
 8012340:	602b      	str	r3, [r5, #0]
 8012342:	bd38      	pop	{r3, r4, r5, pc}
 8012344:	20000af8 	.word	0x20000af8

08012348 <_fstat_r>:
 8012348:	b538      	push	{r3, r4, r5, lr}
 801234a:	4c07      	ldr	r4, [pc, #28]	; (8012368 <_fstat_r+0x20>)
 801234c:	2300      	movs	r3, #0
 801234e:	4605      	mov	r5, r0
 8012350:	4608      	mov	r0, r1
 8012352:	4611      	mov	r1, r2
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	f000 f879 	bl	801244c <_fstat>
 801235a:	1c43      	adds	r3, r0, #1
 801235c:	d102      	bne.n	8012364 <_fstat_r+0x1c>
 801235e:	6823      	ldr	r3, [r4, #0]
 8012360:	b103      	cbz	r3, 8012364 <_fstat_r+0x1c>
 8012362:	602b      	str	r3, [r5, #0]
 8012364:	bd38      	pop	{r3, r4, r5, pc}
 8012366:	bf00      	nop
 8012368:	20000af8 	.word	0x20000af8

0801236c <_isatty_r>:
 801236c:	b538      	push	{r3, r4, r5, lr}
 801236e:	4c06      	ldr	r4, [pc, #24]	; (8012388 <_isatty_r+0x1c>)
 8012370:	2300      	movs	r3, #0
 8012372:	4605      	mov	r5, r0
 8012374:	4608      	mov	r0, r1
 8012376:	6023      	str	r3, [r4, #0]
 8012378:	f000 f878 	bl	801246c <_isatty>
 801237c:	1c43      	adds	r3, r0, #1
 801237e:	d102      	bne.n	8012386 <_isatty_r+0x1a>
 8012380:	6823      	ldr	r3, [r4, #0]
 8012382:	b103      	cbz	r3, 8012386 <_isatty_r+0x1a>
 8012384:	602b      	str	r3, [r5, #0]
 8012386:	bd38      	pop	{r3, r4, r5, pc}
 8012388:	20000af8 	.word	0x20000af8

0801238c <_lseek_r>:
 801238c:	b538      	push	{r3, r4, r5, lr}
 801238e:	4c07      	ldr	r4, [pc, #28]	; (80123ac <_lseek_r+0x20>)
 8012390:	4605      	mov	r5, r0
 8012392:	4608      	mov	r0, r1
 8012394:	4611      	mov	r1, r2
 8012396:	2200      	movs	r2, #0
 8012398:	6022      	str	r2, [r4, #0]
 801239a:	461a      	mov	r2, r3
 801239c:	f000 f876 	bl	801248c <_lseek>
 80123a0:	1c43      	adds	r3, r0, #1
 80123a2:	d102      	bne.n	80123aa <_lseek_r+0x1e>
 80123a4:	6823      	ldr	r3, [r4, #0]
 80123a6:	b103      	cbz	r3, 80123aa <_lseek_r+0x1e>
 80123a8:	602b      	str	r3, [r5, #0]
 80123aa:	bd38      	pop	{r3, r4, r5, pc}
 80123ac:	20000af8 	.word	0x20000af8

080123b0 <memchr>:
 80123b0:	b510      	push	{r4, lr}
 80123b2:	b2c9      	uxtb	r1, r1
 80123b4:	4402      	add	r2, r0
 80123b6:	4290      	cmp	r0, r2
 80123b8:	4603      	mov	r3, r0
 80123ba:	d005      	beq.n	80123c8 <memchr+0x18>
 80123bc:	781c      	ldrb	r4, [r3, #0]
 80123be:	3001      	adds	r0, #1
 80123c0:	428c      	cmp	r4, r1
 80123c2:	d1f8      	bne.n	80123b6 <memchr+0x6>
 80123c4:	4618      	mov	r0, r3
 80123c6:	bd10      	pop	{r4, pc}
 80123c8:	2000      	movs	r0, #0
 80123ca:	bd10      	pop	{r4, pc}

080123cc <memmove>:
 80123cc:	4288      	cmp	r0, r1
 80123ce:	b510      	push	{r4, lr}
 80123d0:	eb01 0302 	add.w	r3, r1, r2
 80123d4:	d801      	bhi.n	80123da <memmove+0xe>
 80123d6:	1e42      	subs	r2, r0, #1
 80123d8:	e00b      	b.n	80123f2 <memmove+0x26>
 80123da:	4298      	cmp	r0, r3
 80123dc:	d2fb      	bcs.n	80123d6 <memmove+0xa>
 80123de:	1881      	adds	r1, r0, r2
 80123e0:	1ad2      	subs	r2, r2, r3
 80123e2:	42d3      	cmn	r3, r2
 80123e4:	d004      	beq.n	80123f0 <memmove+0x24>
 80123e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80123ee:	e7f8      	b.n	80123e2 <memmove+0x16>
 80123f0:	bd10      	pop	{r4, pc}
 80123f2:	4299      	cmp	r1, r3
 80123f4:	d004      	beq.n	8012400 <memmove+0x34>
 80123f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80123fe:	e7f8      	b.n	80123f2 <memmove+0x26>
 8012400:	bd10      	pop	{r4, pc}

08012402 <_malloc_usable_size_r>:
 8012402:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012406:	2800      	cmp	r0, #0
 8012408:	bfbe      	ittt	lt
 801240a:	1809      	addlt	r1, r1, r0
 801240c:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8012410:	18c0      	addlt	r0, r0, r3
 8012412:	3804      	subs	r0, #4
 8012414:	4770      	bx	lr
	...

08012418 <_read_r>:
 8012418:	b538      	push	{r3, r4, r5, lr}
 801241a:	4c07      	ldr	r4, [pc, #28]	; (8012438 <_read_r+0x20>)
 801241c:	4605      	mov	r5, r0
 801241e:	4608      	mov	r0, r1
 8012420:	4611      	mov	r1, r2
 8012422:	2200      	movs	r2, #0
 8012424:	6022      	str	r2, [r4, #0]
 8012426:	461a      	mov	r2, r3
 8012428:	f000 f838 	bl	801249c <_read>
 801242c:	1c43      	adds	r3, r0, #1
 801242e:	d102      	bne.n	8012436 <_read_r+0x1e>
 8012430:	6823      	ldr	r3, [r4, #0]
 8012432:	b103      	cbz	r3, 8012436 <_read_r+0x1e>
 8012434:	602b      	str	r3, [r5, #0]
 8012436:	bd38      	pop	{r3, r4, r5, pc}
 8012438:	20000af8 	.word	0x20000af8

0801243c <_close>:
 801243c:	4b02      	ldr	r3, [pc, #8]	; (8012448 <_close+0xc>)
 801243e:	2258      	movs	r2, #88	; 0x58
 8012440:	601a      	str	r2, [r3, #0]
 8012442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012446:	4770      	bx	lr
 8012448:	20000af8 	.word	0x20000af8

0801244c <_fstat>:
 801244c:	4b02      	ldr	r3, [pc, #8]	; (8012458 <_fstat+0xc>)
 801244e:	2258      	movs	r2, #88	; 0x58
 8012450:	601a      	str	r2, [r3, #0]
 8012452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012456:	4770      	bx	lr
 8012458:	20000af8 	.word	0x20000af8

0801245c <_getpid>:
 801245c:	4b02      	ldr	r3, [pc, #8]	; (8012468 <_getpid+0xc>)
 801245e:	2258      	movs	r2, #88	; 0x58
 8012460:	601a      	str	r2, [r3, #0]
 8012462:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012466:	4770      	bx	lr
 8012468:	20000af8 	.word	0x20000af8

0801246c <_isatty>:
 801246c:	4b02      	ldr	r3, [pc, #8]	; (8012478 <_isatty+0xc>)
 801246e:	2258      	movs	r2, #88	; 0x58
 8012470:	601a      	str	r2, [r3, #0]
 8012472:	2000      	movs	r0, #0
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	20000af8 	.word	0x20000af8

0801247c <_kill>:
 801247c:	4b02      	ldr	r3, [pc, #8]	; (8012488 <_kill+0xc>)
 801247e:	2258      	movs	r2, #88	; 0x58
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012486:	4770      	bx	lr
 8012488:	20000af8 	.word	0x20000af8

0801248c <_lseek>:
 801248c:	4b02      	ldr	r3, [pc, #8]	; (8012498 <_lseek+0xc>)
 801248e:	2258      	movs	r2, #88	; 0x58
 8012490:	601a      	str	r2, [r3, #0]
 8012492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012496:	4770      	bx	lr
 8012498:	20000af8 	.word	0x20000af8

0801249c <_read>:
 801249c:	4b02      	ldr	r3, [pc, #8]	; (80124a8 <_read+0xc>)
 801249e:	2258      	movs	r2, #88	; 0x58
 80124a0:	601a      	str	r2, [r3, #0]
 80124a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124a6:	4770      	bx	lr
 80124a8:	20000af8 	.word	0x20000af8

080124ac <_sbrk>:
 80124ac:	4a04      	ldr	r2, [pc, #16]	; (80124c0 <_sbrk+0x14>)
 80124ae:	4905      	ldr	r1, [pc, #20]	; (80124c4 <_sbrk+0x18>)
 80124b0:	6813      	ldr	r3, [r2, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	bf08      	it	eq
 80124b6:	460b      	moveq	r3, r1
 80124b8:	4418      	add	r0, r3
 80124ba:	6010      	str	r0, [r2, #0]
 80124bc:	4618      	mov	r0, r3
 80124be:	4770      	bx	lr
 80124c0:	20000ad8 	.word	0x20000ad8
 80124c4:	20000afc 	.word	0x20000afc

080124c8 <_write>:
 80124c8:	4b02      	ldr	r3, [pc, #8]	; (80124d4 <_write+0xc>)
 80124ca:	2258      	movs	r2, #88	; 0x58
 80124cc:	601a      	str	r2, [r3, #0]
 80124ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124d2:	4770      	bx	lr
 80124d4:	20000af8 	.word	0x20000af8

080124d8 <_exit>:
 80124d8:	e7fe      	b.n	80124d8 <_exit>
 80124da:	bf00      	nop

080124dc <__EH_FRAME_BEGIN__>:
 80124dc:	0000 0000                                   ....

080124e0 <_init>:
 80124e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e2:	bf00      	nop
 80124e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124e6:	bc08      	pop	{r3}
 80124e8:	469e      	mov	lr, r3
 80124ea:	4770      	bx	lr

080124ec <_fini>:
 80124ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ee:	bf00      	nop
 80124f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124f2:	bc08      	pop	{r3}
 80124f4:	469e      	mov	lr, r3
 80124f6:	4770      	bx	lr
