
motors.none-eabi:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001460c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b64  08014720  08014720  00024720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000005c  08016284  08016284  00026284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001c0  080162e0  080162e0  000262e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  080164a0  080164a0  000264a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080164a8  080164a8  000264a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000001b0  20000000  080164ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .jcr          00000004  200001b0  0801665c  000301b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f48  200001b4  08016660  000301b4  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200010fc  08016660  000310fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020740  00000000  00000000  000301dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000056c5  00000000  00000000  0005091d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b3cc  00000000  00000000  00055fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000005d0  00000000  00000000  000613ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006a0  00000000  00000000  0006197e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000068f0  00000000  00000000  0006201e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000988a  00000000  00000000  0006890e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000006e  00000000  00000000  00072198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005430  00000000  00000000  00072208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <deregister_tm_clones>:
 8000110:	4b04      	ldr	r3, [pc, #16]	; (8000124 <deregister_tm_clones+0x14>)
 8000112:	4805      	ldr	r0, [pc, #20]	; (8000128 <deregister_tm_clones+0x18>)
 8000114:	1a1b      	subs	r3, r3, r0
 8000116:	2b06      	cmp	r3, #6
 8000118:	d902      	bls.n	8000120 <deregister_tm_clones+0x10>
 800011a:	4b04      	ldr	r3, [pc, #16]	; (800012c <deregister_tm_clones+0x1c>)
 800011c:	b103      	cbz	r3, 8000120 <deregister_tm_clones+0x10>
 800011e:	4718      	bx	r3
 8000120:	4770      	bx	lr
 8000122:	bf00      	nop
 8000124:	200001b7 	.word	0x200001b7
 8000128:	200001b4 	.word	0x200001b4
 800012c:	00000000 	.word	0x00000000

08000130 <register_tm_clones>:
 8000130:	4905      	ldr	r1, [pc, #20]	; (8000148 <register_tm_clones+0x18>)
 8000132:	4806      	ldr	r0, [pc, #24]	; (800014c <register_tm_clones+0x1c>)
 8000134:	1a09      	subs	r1, r1, r0
 8000136:	1089      	asrs	r1, r1, #2
 8000138:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800013c:	1049      	asrs	r1, r1, #1
 800013e:	d002      	beq.n	8000146 <register_tm_clones+0x16>
 8000140:	4b03      	ldr	r3, [pc, #12]	; (8000150 <register_tm_clones+0x20>)
 8000142:	b103      	cbz	r3, 8000146 <register_tm_clones+0x16>
 8000144:	4718      	bx	r3
 8000146:	4770      	bx	lr
 8000148:	200001b4 	.word	0x200001b4
 800014c:	200001b4 	.word	0x200001b4
 8000150:	00000000 	.word	0x00000000

08000154 <__do_global_dtors_aux>:
 8000154:	b510      	push	{r4, lr}
 8000156:	4c06      	ldr	r4, [pc, #24]	; (8000170 <__do_global_dtors_aux+0x1c>)
 8000158:	7823      	ldrb	r3, [r4, #0]
 800015a:	b943      	cbnz	r3, 800016e <__do_global_dtors_aux+0x1a>
 800015c:	f7ff ffd8 	bl	8000110 <deregister_tm_clones>
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__do_global_dtors_aux+0x20>)
 8000162:	b113      	cbz	r3, 800016a <__do_global_dtors_aux+0x16>
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <__do_global_dtors_aux+0x24>)
 8000166:	f3af 8000 	nop.w
 800016a:	2301      	movs	r3, #1
 800016c:	7023      	strb	r3, [r4, #0]
 800016e:	bd10      	pop	{r4, pc}
 8000170:	200001b4 	.word	0x200001b4
 8000174:	00000000 	.word	0x00000000
 8000178:	08014700 	.word	0x08014700

0800017c <frame_dummy>:
 800017c:	b508      	push	{r3, lr}
 800017e:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <frame_dummy+0x24>)
 8000180:	b11b      	cbz	r3, 800018a <frame_dummy+0xe>
 8000182:	4908      	ldr	r1, [pc, #32]	; (80001a4 <frame_dummy+0x28>)
 8000184:	4808      	ldr	r0, [pc, #32]	; (80001a8 <frame_dummy+0x2c>)
 8000186:	f3af 8000 	nop.w
 800018a:	4808      	ldr	r0, [pc, #32]	; (80001ac <frame_dummy+0x30>)
 800018c:	6803      	ldr	r3, [r0, #0]
 800018e:	b913      	cbnz	r3, 8000196 <frame_dummy+0x1a>
 8000190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000194:	e7cc      	b.n	8000130 <register_tm_clones>
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <frame_dummy+0x34>)
 8000198:	2b00      	cmp	r3, #0
 800019a:	d0f9      	beq.n	8000190 <frame_dummy+0x14>
 800019c:	4798      	blx	r3
 800019e:	e7f7      	b.n	8000190 <frame_dummy+0x14>
 80001a0:	00000000 	.word	0x00000000
 80001a4:	200001b8 	.word	0x200001b8
 80001a8:	08014700 	.word	0x08014700
 80001ac:	200001b0 	.word	0x200001b0
 80001b0:	00000000 	.word	0x00000000

080001b4 <_mainCRTStartup>:
 80001b4:	2016      	movs	r0, #22
 80001b6:	a130      	add	r1, pc, #192	; (adr r1, 8000278 <_mainCRTStartup+0xc4>)
 80001b8:	beab      	bkpt	0x00ab
 80001ba:	482f      	ldr	r0, [pc, #188]	; (8000278 <_mainCRTStartup+0xc4>)
 80001bc:	6841      	ldr	r1, [r0, #4]
 80001be:	4a36      	ldr	r2, [pc, #216]	; (8000298 <_mainCRTStartup+0xe4>)
 80001c0:	6011      	str	r1, [r2, #0]
 80001c2:	6801      	ldr	r1, [r0, #0]
 80001c4:	2900      	cmp	r1, #0
 80001c6:	d101      	bne.n	80001cc <_mainCRTStartup+0x18>
 80001c8:	4932      	ldr	r1, [pc, #200]	; (8000294 <_mainCRTStartup+0xe0>)
 80001ca:	6001      	str	r1, [r0, #0]
 80001cc:	6881      	ldr	r1, [r0, #8]
 80001ce:	68c2      	ldr	r2, [r0, #12]
 80001d0:	2900      	cmp	r1, #0
 80001d2:	d000      	beq.n	80001d6 <_mainCRTStartup+0x22>
 80001d4:	468d      	mov	sp, r1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d001      	beq.n	80001de <_mainCRTStartup+0x2a>
 80001da:	f502 7a80 	add.w	sl, r2, #256	; 0x100
 80001de:	2100      	movs	r1, #0
 80001e0:	468b      	mov	fp, r1
 80001e2:	460f      	mov	r7, r1
 80001e4:	4825      	ldr	r0, [pc, #148]	; (800027c <_mainCRTStartup+0xc8>)
 80001e6:	4a26      	ldr	r2, [pc, #152]	; (8000280 <_mainCRTStartup+0xcc>)
 80001e8:	1a12      	subs	r2, r2, r0
 80001ea:	f010 fb1a 	bl	8010822 <memset>
 80001ee:	f010 fd51 	bl	8010c94 <initialise_monitor_handles>
 80001f2:	2015      	movs	r0, #21
 80001f4:	a125      	add	r1, pc, #148	; (adr r1, 800028c <_mainCRTStartup+0xd8>)
 80001f6:	beab      	bkpt	0x00ab
 80001f8:	4924      	ldr	r1, [pc, #144]	; (800028c <_mainCRTStartup+0xd8>)
 80001fa:	2000      	movs	r0, #0
 80001fc:	b401      	push	{r0}
 80001fe:	780b      	ldrb	r3, [r1, #0]
 8000200:	3101      	adds	r1, #1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d015      	beq.n	8000232 <_mainCRTStartup+0x7e>
 8000206:	2b20      	cmp	r3, #32
 8000208:	d0f9      	beq.n	80001fe <_mainCRTStartup+0x4a>
 800020a:	2b22      	cmp	r3, #34	; 0x22
 800020c:	d001      	beq.n	8000212 <_mainCRTStartup+0x5e>
 800020e:	2b27      	cmp	r3, #39	; 0x27
 8000210:	d101      	bne.n	8000216 <_mainCRTStartup+0x62>
 8000212:	001a      	movs	r2, r3
 8000214:	e001      	b.n	800021a <_mainCRTStartup+0x66>
 8000216:	2220      	movs	r2, #32
 8000218:	3901      	subs	r1, #1
 800021a:	b402      	push	{r1}
 800021c:	3001      	adds	r0, #1
 800021e:	780b      	ldrb	r3, [r1, #0]
 8000220:	3101      	adds	r1, #1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d005      	beq.n	8000232 <_mainCRTStartup+0x7e>
 8000226:	429a      	cmp	r2, r3
 8000228:	d1f9      	bne.n	800021e <_mainCRTStartup+0x6a>
 800022a:	2200      	movs	r2, #0
 800022c:	1e4b      	subs	r3, r1, #1
 800022e:	701a      	strb	r2, [r3, #0]
 8000230:	e7e5      	b.n	80001fe <_mainCRTStartup+0x4a>
 8000232:	4669      	mov	r1, sp
 8000234:	0002      	movs	r2, r0
 8000236:	0092      	lsls	r2, r2, #2
 8000238:	446a      	add	r2, sp
 800023a:	466b      	mov	r3, sp
 800023c:	429a      	cmp	r2, r3
 800023e:	d906      	bls.n	800024e <_mainCRTStartup+0x9a>
 8000240:	3a04      	subs	r2, #4
 8000242:	6814      	ldr	r4, [r2, #0]
 8000244:	681d      	ldr	r5, [r3, #0]
 8000246:	6015      	str	r5, [r2, #0]
 8000248:	601c      	str	r4, [r3, #0]
 800024a:	3304      	adds	r3, #4
 800024c:	e7f6      	b.n	800023c <_mainCRTStartup+0x88>
 800024e:	466c      	mov	r4, sp
 8000250:	2507      	movs	r5, #7
 8000252:	43ac      	bics	r4, r5
 8000254:	46a5      	mov	sp, r4
 8000256:	0004      	movs	r4, r0
 8000258:	000d      	movs	r5, r1
 800025a:	480a      	ldr	r0, [pc, #40]	; (8000284 <_mainCRTStartup+0xd0>)
 800025c:	2800      	cmp	r0, #0
 800025e:	d002      	beq.n	8000266 <_mainCRTStartup+0xb2>
 8000260:	4809      	ldr	r0, [pc, #36]	; (8000288 <_mainCRTStartup+0xd4>)
 8000262:	f3af 8000 	nop.w
 8000266:	f010 faab 	bl	80107c0 <__libc_init_array>
 800026a:	0020      	movs	r0, r4
 800026c:	0029      	movs	r1, r5
 800026e:	f00f fd5b 	bl	800fd28 <main>
 8000272:	f010 fa91 	bl	8010798 <exit>
 8000276:	bf00      	nop
 8000278:	20000004 	.word	0x20000004
 800027c:	200001b4 	.word	0x200001b4
 8000280:	200010fc 	.word	0x200010fc
	...
 800028c:	20000014 	.word	0x20000014
 8000290:	000000ff 	.word	0x000000ff
 8000294:	200010fc 	.word	0x200010fc
 8000298:	200001a0 	.word	0x200001a0
 800029c:	080164ac 	.word	0x080164ac
 80002a0:	20000000 	.word	0x20000000
 80002a4:	200001b0 	.word	0x200001b0
 80002a8:	200001b4 	.word	0x200001b4
 80002ac:	200010fc 	.word	0x200010fc

080002b0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002b0:	4b38      	ldr	r3, [pc, #224]	; (8000394 <SystemInit+0xe4>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002b2:	b082      	sub	sp, #8
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	f042 0201 	orr.w	r2, r2, #1
 80002ba:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80002bc:	6859      	ldr	r1, [r3, #4]
 80002be:	4a36      	ldr	r2, [pc, #216]	; (8000398 <SystemInit+0xe8>)
 80002c0:	400a      	ands	r2, r1
 80002c2:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80002ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80002ce:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80002d8:	685a      	ldr	r2, [r3, #4]
 80002da:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80002de:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80002e0:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80002e4:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80002e6:	2200      	movs	r2, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80002f2:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80002fa:	9201      	str	r2, [sp, #4]
    StartUpCounter++;  
 80002fc:	9a00      	ldr	r2, [sp, #0]
 80002fe:	3201      	adds	r2, #1
 8000300:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000302:	9a01      	ldr	r2, [sp, #4]
 8000304:	b91a      	cbnz	r2, 800030e <SystemInit+0x5e>
 8000306:	9a00      	ldr	r2, [sp, #0]
 8000308:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800030c:	d1f2      	bne.n	80002f4 <SystemInit+0x44>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000314:	bf18      	it	ne
 8000316:	2201      	movne	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000318:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800031a:	9a01      	ldr	r2, [sp, #4]
 800031c:	2a01      	cmp	r2, #1
 800031e:	d005      	beq.n	800032c <SystemInit+0x7c>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <SystemInit+0xec>)
 8000322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000326:	609a      	str	r2, [r3, #8]
#endif 
}
 8000328:	b002      	add	sp, #8
 800032a:	4770      	bx	lr
  }  

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800032c:	4a1c      	ldr	r2, [pc, #112]	; (80003a0 <SystemInit+0xf0>)
 800032e:	6811      	ldr	r1, [r2, #0]
 8000330:	f041 0110 	orr.w	r1, r1, #16
 8000334:	6011      	str	r1, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000336:	6811      	ldr	r1, [r2, #0]
 8000338:	f021 0103 	bic.w	r1, r1, #3
 800033c:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800033e:	6811      	ldr	r1, [r2, #0]
 8000340:	f041 0102 	orr.w	r1, r1, #2
 8000344:	6011      	str	r1, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000346:	685a      	ldr	r2, [r3, #4]
 8000348:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800034a:	685a      	ldr	r2, [r3, #4]
 800034c:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800034e:	685a      	ldr	r2, [r3, #4]
 8000350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000354:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800035c:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 800035e:	685a      	ldr	r2, [r3, #4]
 8000360:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000364:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800036c:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800036e:	6819      	ldr	r1, [r3, #0]
 8000370:	4a08      	ldr	r2, [pc, #32]	; (8000394 <SystemInit+0xe4>)
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	d5fb      	bpl.n	800036e <SystemInit+0xbe>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000376:	6851      	ldr	r1, [r2, #4]
 8000378:	f021 0103 	bic.w	r1, r1, #3
 800037c:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800037e:	6851      	ldr	r1, [r2, #4]
 8000380:	f041 0102 	orr.w	r1, r1, #2
 8000384:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000386:	685a      	ldr	r2, [r3, #4]
 8000388:	f002 020c 	and.w	r2, r2, #12
 800038c:	2a08      	cmp	r2, #8
 800038e:	d1fa      	bne.n	8000386 <SystemInit+0xd6>
 8000390:	e7c6      	b.n	8000320 <SystemInit+0x70>
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	f8ff0000 	.word	0xf8ff0000
 800039c:	e000ed00 	.word	0xe000ed00
 80003a0:	40022000 	.word	0x40022000

080003a4 <SystemCoreClockUpdate>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003a4:	4a13      	ldr	r2, [pc, #76]	; (80003f4 <SystemCoreClockUpdate+0x50>)
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <SystemCoreClockUpdate+0x54>)
 80003a8:	6851      	ldr	r1, [r2, #4]
  
  switch (tmp)
 80003aa:	f001 010c 	and.w	r1, r1, #12
 80003ae:	2904      	cmp	r1, #4
 80003b0:	d003      	beq.n	80003ba <SystemCoreClockUpdate+0x16>
 80003b2:	2908      	cmp	r1, #8
 80003b4:	d003      	beq.n	80003be <SystemCoreClockUpdate+0x1a>
 80003b6:	4911      	ldr	r1, [pc, #68]	; (80003fc <SystemCoreClockUpdate+0x58>)
 80003b8:	e011      	b.n	80003de <SystemCoreClockUpdate+0x3a>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80003ba:	4911      	ldr	r1, [pc, #68]	; (8000400 <SystemCoreClockUpdate+0x5c>)
 80003bc:	e00f      	b.n	80003de <SystemCoreClockUpdate+0x3a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80003be:	6851      	ldr	r1, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80003c0:	6850      	ldr	r0, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80003c2:	f3c1 4183 	ubfx	r1, r1, #18, #4
      
      if (pllsource == 0x00)
 80003c6:	03c0      	lsls	r0, r0, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80003c8:	f101 0102 	add.w	r1, r1, #2
      
      if (pllsource == 0x00)
 80003cc:	d401      	bmi.n	80003d2 <SystemCoreClockUpdate+0x2e>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80003ce:	480d      	ldr	r0, [pc, #52]	; (8000404 <SystemCoreClockUpdate+0x60>)
 80003d0:	e004      	b.n	80003dc <SystemCoreClockUpdate+0x38>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80003d2:	6850      	ldr	r0, [r2, #4]
 80003d4:	0380      	lsls	r0, r0, #14
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80003d6:	bf4c      	ite	mi
 80003d8:	4808      	ldrmi	r0, [pc, #32]	; (80003fc <SystemCoreClockUpdate+0x58>)
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
 80003da:	4809      	ldrpl	r0, [pc, #36]	; (8000400 <SystemCoreClockUpdate+0x5c>)
 80003dc:	4341      	muls	r1, r0
 80003de:	6019      	str	r1, [r3, #0]
      break;
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003e0:	6852      	ldr	r2, [r2, #4]
 80003e2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80003e6:	441a      	add	r2, r3
 80003e8:	7911      	ldrb	r1, [r2, #4]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	40ca      	lsrs	r2, r1
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	20000114 	.word	0x20000114
 80003fc:	007a1200 	.word	0x007a1200
 8000400:	00f42400 	.word	0x00f42400
 8000404:	003d0900 	.word	0x003d0900

08000408 <LED_Init>:
TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
TIM_OCInitTypeDef  TIM_OCInitStructure;



void LED_Init(){
 8000408:	b537      	push	{r0, r1, r2, r4, r5, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800040a:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 800040c:	4c18      	ldr	r4, [pc, #96]	; (8000470 <LED_Init+0x68>)
void LED_Init(){

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 800040e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000412:	2318      	movs	r3, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000414:	a901      	add	r1, sp, #4

	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000416:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800041a:	4816      	ldr	r0, [pc, #88]	; (8000474 <LED_Init+0x6c>)
	GPIO_InitTypeDef GPIO_InitStructure;

	/*Configure GPIO pin : PA1 */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800041c:	2303      	movs	r3, #3
 800041e:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000422:	f001 feac 	bl	800217e <GPIO_Init>


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 8000426:	4620      	mov	r0, r4
 8000428:	f003 f972 	bl	8003710 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800042c:	2360      	movs	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800042e:	2501      	movs	r5, #1


	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000430:	8023      	strh	r3, [r4, #0]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8000432:	4621      	mov	r1, r4
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 8000434:	2300      	movs	r3, #0
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8000436:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 800043a:	80e3      	strh	r3, [r4, #6]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800043c:	8123      	strh	r3, [r4, #8]

	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800043e:	8065      	strh	r5, [r4, #2]
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
 8000440:	f003 f892 	bl	8003568 <TIM_OC2Init>
	
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000444:	2108      	movs	r1, #8
 8000446:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800044a:	f003 fa81 	bl	8003950 <TIM_OC2PreloadConfig>

	TIM_ARRPreloadConfig(TIM2, ENABLE);
 800044e:	4629      	mov	r1, r5
 8000450:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000454:	f003 fa44 	bl	80038e0 <TIM_ARRPreloadConfig>


	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 8000458:	4629      	mov	r1, r5
 800045a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800045e:	f003 f97e 	bl	800375e <TIM_CtrlPWMOutputs>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 8000462:	4629      	mov	r1, r5
 8000464:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000468:	f003 f96d 	bl	8003746 <TIM_Cmd>
}
 800046c:	b003      	add	sp, #12
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	200010e8 	.word	0x200010e8
 8000474:	40010800 	.word	0x40010800

08000478 <led_set>:


void led_set(uint8_t val){
	TIM2->CCR2 = val*TIM2->ARR/255;
 8000478:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800047c:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800047e:	b29b      	uxth	r3, r3
 8000480:	4358      	muls	r0, r3
 8000482:	23ff      	movs	r3, #255	; 0xff
 8000484:	fb90 f0f3 	sdiv	r0, r0, r3
 8000488:	b280      	uxth	r0, r0
 800048a:	8710      	strh	r0, [r2, #56]	; 0x38
 800048c:	4770      	bx	lr

0800048e <DEBUG_Init>:
}

void DEBUG_Init(){
 800048e:	b507      	push	{r0, r1, r2, lr}
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8000490:	2330      	movs	r3, #48	; 0x30
 8000492:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000496:	2303      	movs	r3, #3
 8000498:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800049c:	a901      	add	r1, sp, #4
void DEBUG_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800049e:	2310      	movs	r3, #16
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <DEBUG_Init+0x22>)
void DEBUG_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80004a2:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004a6:	f001 fe6a 	bl	800217e <GPIO_Init>
}
 80004aa:	b003      	add	sp, #12
 80004ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <debug_toggle>:

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 80004b4:	2120      	movs	r1, #32
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
}

void debug_toggle(void){
 80004b6:	b508      	push	{r3, lr}
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <debug_toggle+0x24>)
 80004ba:	f001 fec3 	bl	8002244 <GPIO_ReadOutputDataBit>
    if(led_bit == (uint8_t)Bit_SET)
 80004be:	2801      	cmp	r0, #1
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 80004c0:	f04f 0120 	mov.w	r1, #32
 80004c4:	4804      	ldr	r0, [pc, #16]	; (80004d8 <debug_toggle+0x24>)
	GPIO_Init(GPIOB, &GPIO_InitStructure);
}

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
 80004c6:	d103      	bne.n	80004d0 <debug_toggle+0x1c>
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
}
 80004c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
 80004cc:	f001 bec5 	b.w	800225a <GPIO_ResetBits>
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
}
 80004d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void debug_toggle(void){
    uint8_t led_bit = GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_5);
    if(led_bit == (uint8_t)Bit_SET)
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
    else
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
 80004d4:	f001 bebf 	b.w	8002256 <GPIO_SetBits>
 80004d8:	40010c00 	.word	0x40010c00

080004dc <SHUTDOWN_Init>:
}

void SHUTDOWN_Init(){
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	b085      	sub	sp, #20

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004e0:	4669      	mov	r1, sp
}

void SHUTDOWN_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 80004e2:	2404      	movs	r4, #4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004e4:	2303      	movs	r3, #3
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <SHUTDOWN_Init+0x58>)
void SHUTDOWN_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004e8:	f88d 3002 	strb.w	r3, [sp, #2]

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 80004ec:	2508      	movs	r5, #8
}

void SHUTDOWN_Init(){
	GPIO_InitTypeDef  GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 80004ee:	f8ad 4000 	strh.w	r4, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80004f2:	f88d 4003 	strb.w	r4, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004f6:	f001 fe42 	bl	800217e <GPIO_Init>

	//SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
 80004fa:	a802      	add	r0, sp, #8
 80004fc:	f001 f91c 	bl	8001738 <EXTI_StructInit>
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000500:	2300      	movs	r3, #0

	//SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
 8000502:	9402      	str	r4, [sp, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
 8000504:	eb0d 0005 	add.w	r0, sp, r5
	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000508:	2401      	movs	r4, #1
	//SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource2);

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_StructInit(&EXTI_InitStructure);
	EXTI_InitStructure.EXTI_Line = EXTI_Line2;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800050a:	f88d 300c 	strb.w	r3, [sp, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 800050e:	f88d 500d 	strb.w	r5, [sp, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000512:	f88d 400e 	strb.w	r4, [sp, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000516:	f001 f8d5 	bl	80016c4 <EXTI_Init>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800051a:	a801      	add	r0, sp, #4
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI2_IRQn;
 800051c:	f88d 5004 	strb.w	r5, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 8000520:	f88d 4005 	strb.w	r4, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 8000524:	f88d 4006 	strb.w	r4, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000528:	f88d 4007 	strb.w	r4, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 800052c:	f003 fdfe 	bl	800412c <NVIC_Init>
}
 8000530:	b005      	add	sp, #20
 8000532:	bd30      	pop	{r4, r5, pc}
 8000534:	40010800 	.word	0x40010800

08000538 <I2C1_Init>:

#include <stm32f10x.h>
#include "encoder.h"


void I2C1_Init(void){
 8000538:	b510      	push	{r4, lr}
    GPIO_InitTypeDef  GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

    /* I2C1 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800053a:	2101      	movs	r1, #1

#include <stm32f10x.h>
#include "encoder.h"


void I2C1_Init(void){
 800053c:	b086      	sub	sp, #24
    GPIO_InitTypeDef  GPIO_InitStructure;
    I2C_InitTypeDef  I2C_InitStructure;

    /* I2C1 clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 800053e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000542:	f002 fa87 	bl	8002a54 <RCC_APB1PeriphClockCmd>

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000546:	23c0      	movs	r3, #192	; 0xc0
 8000548:	f8ad 3004 	strh.w	r3, [sp, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800054c:	2303      	movs	r3, #3
 800054e:	f88d 3006 	strb.w	r3, [sp, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000552:	a901      	add	r1, sp, #4
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8000554:	231c      	movs	r3, #28
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000556:	4812      	ldr	r0, [pc, #72]	; (80005a0 <I2C1_Init+0x68>)
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

    /* I2C1 SDA and SCL configuration */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
 8000558:	f88d 3007 	strb.w	r3, [sp, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 800055c:	f001 fe0f 	bl	800217e <GPIO_Init>
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8000560:	f64b 72ff 	movw	r2, #49151	; 0xbfff
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8000564:	2300      	movs	r3, #0
 8000566:	f8ad 300c 	strh.w	r3, [sp, #12]
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
 800056a:	f8ad 3010 	strh.w	r3, [sp, #16]
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800056e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000572:	f8ad 3012 	strh.w	r3, [sp, #18]
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000576:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800057a:	f8ad 3014 	strh.w	r3, [sp, #20]
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
    I2C_Init(I2C1, &I2C_InitStructure);
 800057e:	4c09      	ldr	r4, [pc, #36]	; (80005a4 <I2C1_Init+0x6c>)
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <I2C1_Init+0x70>)
 8000582:	a906      	add	r1, sp, #24
 8000584:	f841 3d10 	str.w	r3, [r1, #-16]!
    I2C_Init(I2C1, &I2C_InitStructure);
 8000588:	4620      	mov	r0, r4
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    /*SCL is pin06 and SDA is pin 07 for I2C1*/

    /* I2C1 configuration */
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800058a:	f8ad 200e 	strh.w	r2, [sp, #14]
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = 100000;    // 100 kHz operation
    I2C_Init(I2C1, &I2C_InitStructure);
 800058e:	f001 feed 	bl	800236c <I2C_Init>

     /*enable I2C*/
    I2C_Cmd(I2C1,ENABLE);
 8000592:	2101      	movs	r1, #1
 8000594:	4620      	mov	r0, r4
 8000596:	f001 ff61 	bl	800245c <I2C_Cmd>

    //NVIC_EnableIRQ(I2C1_EV_IRQn);
}
 800059a:	b006      	add	sp, #24
 800059c:	bd10      	pop	{r4, pc}
 800059e:	bf00      	nop
 80005a0:	40010c00 	.word	0x40010c00
 80005a4:	40005400 	.word	0x40005400
 80005a8:	000186a0 	.word	0x000186a0

080005ac <SysTick_Init>:
#include <stm32f10x.h>
#include "stm32_time.h"

static __IO uint32_t sysTickCounter;
 
void SysTick_Init(void) {
 80005ac:	b508      	push	{r3, lr}
	/****************************************
	 *SystemFrequency/1000      1ms         *
	 *SystemFrequency/100000    10us        *
	 *SystemFrequency/1000000   1us         *
	 *****************************************/
	SystemCoreClockUpdate();
 80005ae:	f7ff fef9 	bl	80003a4 <SystemCoreClockUpdate>
	while (SysTick_Config(SystemCoreClock / 1000000) != 0); // One SysTick interrupt now equals 1us
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <SysTick_Init+0x28>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <SysTick_Init+0x2c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80005b8:	21f0      	movs	r1, #240	; 0xf0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80005ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SysTick_Init+0x30>)
 80005c0:	3b01      	subs	r3, #1
 80005c2:	6053      	str	r3, [r2, #4]
 * Note: The priority cannot be set for every core interrupt.
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <SysTick_Init+0x34>)
 80005c6:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
{ 
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
                                                               
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80005ca:	2300      	movs	r3, #0
 80005cc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 80005ce:	2307      	movs	r3, #7
 80005d0:	6013      	str	r3, [r2, #0]
 80005d2:	bd08      	pop	{r3, pc}
 80005d4:	20000114 	.word	0x20000114
 80005d8:	000f4240 	.word	0x000f4240
 80005dc:	e000e010 	.word	0xe000e010
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <SysTick_Handler>:

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 80005e4:	b672      	cpsid	i
 * This method needs to be called in the SysTick_Handler
 */

void SysTick_Handler(void) {
	__disable_irq();
	sysTickCounter++;
 80005e6:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <SysTick_Handler+0x10>)
 80005e8:	6813      	ldr	r3, [r2, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	6013      	str	r3, [r2, #0]


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80005ee:	b662      	cpsie	i
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200001d0 	.word	0x200001d0

080005f8 <delay>:
	while ((micros() - i) < (n));
}


uint32_t millis(void){
	return sysTickCounter/1000;
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <delay+0x20>)
/*void delay_nus(uint32_t n) {
	uint32_t i = sysTickCounter;
	while (sysTickCounter - i < n);
}*/
 
void delay(uint32_t n) {
 80005fa:	b510      	push	{r4, lr}
	while ((micros() - i) < (n));
}


uint32_t millis(void){
	return sysTickCounter/1000;
 80005fc:	6814      	ldr	r4, [r2, #0]
 80005fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000602:	4611      	mov	r1, r2
 8000604:	fbb4 f4f3 	udiv	r4, r4, r3
	while (sysTickCounter - i < n);
}*/
 
void delay(uint32_t n) {
	uint32_t i = millis();
	while ((millis() - i) < (n));
 8000608:	461a      	mov	r2, r3
	while ((micros() - i) < (n));
}


uint32_t millis(void){
	return sysTickCounter/1000;
 800060a:	680b      	ldr	r3, [r1, #0]
	while (sysTickCounter - i < n);
}*/
 
void delay(uint32_t n) {
	uint32_t i = millis();
	while ((millis() - i) < (n));
 800060c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000610:	1b1b      	subs	r3, r3, r4
 8000612:	4283      	cmp	r3, r0
 8000614:	d3f9      	bcc.n	800060a <delay+0x12>
}
 8000616:	bd10      	pop	{r4, pc}
 8000618:	200001d0 	.word	0x200001d0

0800061c <udelay>:
uint32_t millis(void){
	return sysTickCounter/1000;
}

uint32_t micros(void){
	return sysTickCounter;
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <udelay+0x10>)
 800061e:	6819      	ldr	r1, [r3, #0]
 8000620:	681a      	ldr	r2, [r3, #0]
	while ((millis() - i) < (n));
}

void udelay(uint32_t n) {
	uint32_t i = micros();
	while ((micros() - i) < (n));
 8000622:	1a52      	subs	r2, r2, r1
 8000624:	4282      	cmp	r2, r0
 8000626:	d3fb      	bcc.n	8000620 <udelay+0x4>
}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	200001d0 	.word	0x200001d0

08000630 <millis>:


uint32_t millis(void){
	return sysTickCounter/1000;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <millis+0x10>)
 8000632:	6818      	ldr	r0, [r3, #0]
}
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	fbb0 f0f3 	udiv	r0, r0, r3
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	200001d0 	.word	0x200001d0

08000644 <micros>:

uint32_t micros(void){
	return sysTickCounter;
 8000644:	4b01      	ldr	r3, [pc, #4]	; (800064c <micros+0x8>)
 8000646:	6818      	ldr	r0, [r3, #0]
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200001d0 	.word	0x200001d0

08000650 <RCC_Configuration>:

void RCC_Configuration(void){
 8000650:	b510      	push	{r4, lr}
//#if 0
	ErrorStatus HSEStartUpStatus;
	RCC_DeInit();
 8000652:	f002 f8d5 	bl	8002800 <RCC_DeInit>

	/* Enable HSE */
 	RCC_HSEConfig(RCC_HSE_ON);
 8000656:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800065a:	f002 f8f1 	bl	8002840 <RCC_HSEConfig>
 	/* Wait till HSE is ready */
 	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 800065e:	f002 fa43 	bl	8002ae8 <RCC_WaitForHSEStartUp>
 
 	if(HSEStartUpStatus == SUCCESS){
 8000662:	2801      	cmp	r0, #1
	RCC_DeInit();

	/* Enable HSE */
 	RCC_HSEConfig(RCC_HSE_ON);
 	/* Wait till HSE is ready */
 	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 8000664:	4604      	mov	r4, r0
 
 	if(HSEStartUpStatus == SUCCESS){
 8000666:	d00e      	beq.n	8000686 <RCC_Configuration+0x36>
 	}
//#endif
  /* PCLK1 = HCLK/4 */
  //RCC_PCLK1Config(RCC_HCLK_Div2);

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, ENABLE);
 8000668:	2101      	movs	r1, #1
 800066a:	2007      	movs	r0, #7
 800066c:	f002 f9f2 	bl	8002a54 <RCC_APB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000670:	2101      	movs	r1, #1
 8000672:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000676:	f002 f9e1 	bl	8002a3c <RCC_APB2PeriphClockCmd>
 
 
  /* GPIOA, GPIOB and GPIOC clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 800067a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 
 
  /* GPIOA, GPIOB and GPIOC clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
 800067e:	2101      	movs	r1, #1
 8000680:	201d      	movs	r0, #29
 8000682:	f002 b9db 	b.w	8002a3c <RCC_APB2PeriphClockCmd>
 	/* Wait till HSE is ready */
 	HSEStartUpStatus = RCC_WaitForHSEStartUp();
 
 	if(HSEStartUpStatus == SUCCESS){
		 /* HCLK = SYSCLK */
		 RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8000686:	2000      	movs	r0, #0
 8000688:	f002 f928 	bl	80028dc <RCC_HCLKConfig>

		 /* PCLK2 = HCLK */
		 RCC_PCLK2Config(RCC_HCLK_Div1);
 800068c:	2000      	movs	r0, #0
 800068e:	f002 f939 	bl	8002904 <RCC_PCLK2Config>

		 /* PCLK1 = HCLK/2 */
		 RCC_PCLK1Config(RCC_HCLK_Div4);
 8000692:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000696:	f002 f92b 	bl	80028f0 <RCC_PCLK1Config>

		 /* ADCCLK = PCLK2/4 */
		 RCC_ADCCLKConfig(RCC_PCLK2_Div4);
 800069a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800069e:	f002 f94d 	bl	800293c <RCC_ADCCLKConfig>

		 /* Flash 2 wait state */
		 FLASH_SetLatency(FLASH_Latency_2);
 80006a2:	2002      	movs	r0, #2
 80006a4:	f001 f87a 	bl	800179c <FLASH_SetLatency>

		 /* Enable Prefetch Buffer */
		 FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 80006a8:	2010      	movs	r0, #16
 80006aa:	f001 f88d 	bl	80017c8 <FLASH_PrefetchBufferCmd>

		 /* PLLCLK = 8MHz * 9 = 72 MHz */
		 RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 80006ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006b2:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80006b6:	f002 f8ef 	bl	8002898 <RCC_PLLConfig>

		 /* Enable PLL */
		 RCC_PLLCmd(ENABLE);
 80006ba:	4620      	mov	r0, r4
 80006bc:	f002 f8f6 	bl	80028ac <RCC_PLLCmd>

		 /* Wait till PLL is ready */
		 while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 80006c0:	2039      	movs	r0, #57	; 0x39
 80006c2:	f002 f9fd 	bl	8002ac0 <RCC_GetFlagStatus>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	d0fa      	beq.n	80006c0 <RCC_Configuration+0x70>

		 /* Select PLL as system clock source */
		 RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f002 f8f4 	bl	80028b8 <RCC_SYSCLKConfig>
		 /* Wait till PLL is used as system clock source */
		 while(RCC_GetSYSCLKSource() != 0x08);
 80006d0:	f002 f8fc 	bl	80028cc <RCC_GetSYSCLKSource>
 80006d4:	2808      	cmp	r0, #8
 80006d6:	d1fb      	bne.n	80006d0 <RCC_Configuration+0x80>
 80006d8:	e7c6      	b.n	8000668 <RCC_Configuration+0x18>
 80006da:	bf00      	nop

080006dc <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 80006dc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <ADC_DeInit+0x54>)
 80006e0:	4298      	cmp	r0, r3
 80006e2:	d108      	bne.n	80006f6 <ADC_DeInit+0x1a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 80006e4:	2101      	movs	r1, #1
 80006e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ea:	f002 f9bf 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 80006ee:	2100      	movs	r1, #0
 80006f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f4:	e016      	b.n	8000724 <ADC_DeInit+0x48>
  }
  else if (ADCx == ADC2)
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <ADC_DeInit+0x58>)
 80006f8:	4298      	cmp	r0, r3
 80006fa:	d108      	bne.n	800070e <ADC_DeInit+0x32>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
 80006fc:	2101      	movs	r1, #1
 80006fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000702:	f002 f9b3 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
 8000706:	2100      	movs	r1, #0
 8000708:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800070c:	e00a      	b.n	8000724 <ADC_DeInit+0x48>
  }
  else
  {
    if (ADCx == ADC3)
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <ADC_DeInit+0x5c>)
 8000710:	4298      	cmp	r0, r3
 8000712:	d10b      	bne.n	800072c <ADC_DeInit+0x50>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
 8000714:	2101      	movs	r1, #1
 8000716:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800071a:	f002 f9a7 	bl	8002a6c <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 800071e:	2100      	movs	r1, #0
 8000720:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }
  }
}
 8000724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (ADCx == ADC3)
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
 8000728:	f002 b9a0 	b.w	8002a6c <RCC_APB2PeriphResetCmd>
 800072c:	bd08      	pop	{r3, pc}
 800072e:	bf00      	nop
 8000730:	40012400 	.word	0x40012400
 8000734:	40012800 	.word	0x40012800
 8000738:	40013c00 	.word	0x40013c00

0800073c <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800073c:	6843      	ldr	r3, [r0, #4]
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800073e:	b510      	push	{r4, lr}
 8000740:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8000744:	680b      	ldr	r3, [r1, #0]
 8000746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800074a:	4313      	orrs	r3, r2
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 800074c:	790a      	ldrb	r2, [r1, #4]
 800074e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000752:	6043      	str	r3, [r0, #4]
 8000754:	68ca      	ldr	r2, [r1, #12]
 8000756:	688b      	ldr	r3, [r1, #8]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000758:	6884      	ldr	r4, [r0, #8]
 800075a:	431a      	orrs	r2, r3
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <ADC_Init+0x44>)
 800075e:	4023      	ands	r3, r4
 8000760:	4313      	orrs	r3, r2
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 8000762:	794a      	ldrb	r2, [r1, #5]
 8000764:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000768:	6083      	str	r3, [r0, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800076a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800076c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000770:	7c0b      	ldrb	r3, [r1, #16]
 8000772:	3b01      	subs	r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800077a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800077c:	bd10      	pop	{r4, pc}
 800077e:	bf00      	nop
 8000780:	fff1f7fd 	.word	0xfff1f7fd

08000784 <ADC_StructInit>:
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
 8000784:	2300      	movs	r3, #0
 8000786:	6003      	str	r3, [r0, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000788:	7103      	strb	r3, [r0, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800078a:	7143      	strb	r3, [r0, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800078c:	6083      	str	r3, [r0, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800078e:	60c3      	str	r3, [r0, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
 8000790:	2301      	movs	r3, #1
 8000792:	7403      	strb	r3, [r0, #16]
 8000794:	4770      	bx	lr

08000796 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000796:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000798:	b111      	cbz	r1, 80007a0 <ADC_Cmd+0xa>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	e001      	b.n	80007a4 <ADC_Cmd+0xe>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
 80007a0:	f023 0301 	bic.w	r3, r3, #1
 80007a4:	6083      	str	r3, [r0, #8]
 80007a6:	4770      	bx	lr

080007a8 <ADC_DMACmd>:
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 80007a8:	6883      	ldr	r3, [r0, #8]
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007aa:	b111      	cbz	r1, 80007b2 <ADC_DMACmd+0xa>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 80007ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b0:	e001      	b.n	80007b6 <ADC_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
 80007b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007b6:	6083      	str	r3, [r0, #8]
 80007b8:	4770      	bx	lr

080007ba <ADC_ITConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80007ba:	b2c9      	uxtb	r1, r1
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80007bc:	6843      	ldr	r3, [r0, #4]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  if (NewState != DISABLE)
 80007be:	b10a      	cbz	r2, 80007c4 <ADC_ITConfig+0xa>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80007c0:	4319      	orrs	r1, r3
 80007c2:	e001      	b.n	80007c8 <ADC_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80007c4:	ea23 0101 	bic.w	r1, r3, r1
 80007c8:	6041      	str	r1, [r0, #4]
 80007ca:	4770      	bx	lr

080007cc <ADC_ResetCalibration>:
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 80007cc:	6883      	ldr	r3, [r0, #8]
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	6083      	str	r3, [r0, #8]
 80007d4:	4770      	bx	lr

080007d6 <ADC_GetResetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 80007d6:	6880      	ldr	r0, [r0, #8]
    /* RSTCAL bit is reset */
    bitstatus = RESET;
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
}
 80007d8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80007dc:	4770      	bx	lr

080007de <ADC_StartCalibration>:
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 80007de:	6883      	ldr	r3, [r0, #8]
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6083      	str	r3, [r0, #8]
 80007e6:	4770      	bx	lr

080007e8 <ADC_GetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 80007e8:	6880      	ldr	r0, [r0, #8]
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
  }
  /* Return the CAL bit status */
  return  bitstatus;
}
 80007ea:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80007ee:	4770      	bx	lr

080007f0 <ADC_SoftwareStartConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80007f0:	6883      	ldr	r3, [r0, #8]
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007f2:	b111      	cbz	r1, 80007fa <ADC_SoftwareStartConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 80007f4:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80007f8:	e001      	b.n	80007fe <ADC_SoftwareStartConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 80007fa:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
 80007fe:	6083      	str	r3, [r0, #8]
 8000800:	4770      	bx	lr

08000802 <ADC_GetSoftwareStartConvStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
 8000802:	6880      	ldr	r0, [r0, #8]
    /* SWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 8000804:	f3c0 5080 	ubfx	r0, r0, #22, #1
 8000808:	4770      	bx	lr

0800080a <ADC_DiscModeChannelCountConfig>:
  uint32_t tmpreg2 = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 800080a:	6843      	ldr	r3, [r0, #4]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 800080c:	3901      	subs	r1, #1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
 800080e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 8000812:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8000816:	6043      	str	r3, [r0, #4]
 8000818:	4770      	bx	lr

0800081a <ADC_DiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 800081a:	6843      	ldr	r3, [r0, #4]
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800081c:	b111      	cbz	r1, 8000824 <ADC_DiscModeCmd+0xa>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
 800081e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000822:	e001      	b.n	8000828 <ADC_DiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
 8000824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000828:	6043      	str	r3, [r0, #4]
 800082a:	4770      	bx	lr

0800082c <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800082c:	2909      	cmp	r1, #9
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800082e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000830:	d90d      	bls.n	800084e <ADC_RegularChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000832:	f1a1 040a 	sub.w	r4, r1, #10
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000836:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 8000838:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 800083c:	2507      	movs	r5, #7
 800083e:	40a5      	lsls	r5, r4
 8000840:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000844:	fa03 f404 	lsl.w	r4, r3, r4
 8000848:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800084a:	60c4      	str	r4, [r0, #12]
 800084c:	e00a      	b.n	8000864 <ADC_RegularChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800084e:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 8000850:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000854:	2507      	movs	r5, #7
 8000856:	40a5      	lsls	r5, r4
 8000858:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 800085c:	fa03 f404 	lsl.w	r4, r3, r4
 8000860:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000862:	6104      	str	r4, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000864:	2a06      	cmp	r2, #6
 8000866:	d80c      	bhi.n	8000882 <ADC_RegularChannelConfig+0x56>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000868:	3a01      	subs	r2, #1
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 800086a:	6b44      	ldr	r4, [r0, #52]	; 0x34
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800086c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000870:	231f      	movs	r3, #31
 8000872:	4093      	lsls	r3, r2
 8000874:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800087e:	6342      	str	r2, [r0, #52]	; 0x34
 8000880:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000882:	2a0c      	cmp	r2, #12
 8000884:	d80c      	bhi.n	80008a0 <ADC_RegularChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8000886:	3a07      	subs	r2, #7
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000888:	6b04      	ldr	r4, [r0, #48]	; 0x30
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 800088a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800088e:	231f      	movs	r3, #31
 8000890:	4093      	lsls	r3, r2
 8000892:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000896:	fa01 f202 	lsl.w	r2, r1, r2
 800089a:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800089c:	6302      	str	r2, [r0, #48]	; 0x30
 800089e:	bd70      	pop	{r4, r5, r6, pc}
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80008a0:	3a0d      	subs	r2, #13
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80008a2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80008a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008a8:	231f      	movs	r3, #31
 80008aa:	4093      	lsls	r3, r2
 80008ac:	ea24 0303 	bic.w	r3, r4, r3
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	431a      	orrs	r2, r3
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80008b6:	62c2      	str	r2, [r0, #44]	; 0x2c
 80008b8:	bd70      	pop	{r4, r5, r6, pc}

080008ba <ADC_ExternalTrigConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 80008ba:	6883      	ldr	r3, [r0, #8]
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008bc:	b111      	cbz	r1, 80008c4 <ADC_ExternalTrigConvCmd+0xa>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
 80008be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008c2:	e001      	b.n	80008c8 <ADC_ExternalTrigConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
 80008c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80008c8:	6083      	str	r3, [r0, #8]
 80008ca:	4770      	bx	lr

080008cc <ADC_GetConversionValue>:
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80008cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 80008ce:	b280      	uxth	r0, r0
 80008d0:	4770      	bx	lr

080008d2 <ADC_GetDualModeConversionValue>:
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
 80008d2:	4b01      	ldr	r3, [pc, #4]	; (80008d8 <ADC_GetDualModeConversionValue+0x6>)
 80008d4:	6818      	ldr	r0, [r3, #0]
}
 80008d6:	4770      	bx	lr
 80008d8:	4001244c 	.word	0x4001244c

080008dc <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 80008dc:	6843      	ldr	r3, [r0, #4]
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008de:	b111      	cbz	r1, 80008e6 <ADC_AutoInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
 80008e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008e4:	e001      	b.n	80008ea <ADC_AutoInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
 80008e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008ea:	6043      	str	r3, [r0, #4]
 80008ec:	4770      	bx	lr

080008ee <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 80008ee:	6843      	ldr	r3, [r0, #4]
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008f0:	b111      	cbz	r1, 80008f8 <ADC_InjectedDiscModeCmd+0xa>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
 80008f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008f6:	e001      	b.n	80008fc <ADC_InjectedDiscModeCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
 80008f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008fc:	6043      	str	r3, [r0, #4]
 80008fe:	4770      	bx	lr

08000900 <ADC_ExternalTrigInjectedConvConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000900:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
 8000902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8000906:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000908:	6081      	str	r1, [r0, #8]
 800090a:	4770      	bx	lr

0800090c <ADC_ExternalTrigInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 800090c:	6883      	ldr	r3, [r0, #8]
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800090e:	b111      	cbz	r1, 8000916 <ADC_ExternalTrigInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
 8000910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000914:	e001      	b.n	800091a <ADC_ExternalTrigInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
 8000916:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800091a:	6083      	str	r3, [r0, #8]
 800091c:	4770      	bx	lr

0800091e <ADC_SoftwareStartInjectedConvCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 800091e:	6883      	ldr	r3, [r0, #8]
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000920:	b111      	cbz	r1, 8000928 <ADC_SoftwareStartInjectedConvCmd+0xa>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
 8000922:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
 8000926:	e001      	b.n	800092c <ADC_SoftwareStartInjectedConvCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
 8000928:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
 800092c:	6083      	str	r3, [r0, #8]
 800092e:	4770      	bx	lr

08000930 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
 8000930:	6880      	ldr	r0, [r0, #8]
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 8000932:	f3c0 5040 	ubfx	r0, r0, #21, #1
 8000936:	4770      	bx	lr

08000938 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000938:	2909      	cmp	r1, #9
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800093a:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800093c:	d90d      	bls.n	800095a <ADC_InjectedChannelConfig+0x22>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 800093e:	f1a1 040a 	sub.w	r4, r1, #10
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000942:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
 8000944:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000948:	2507      	movs	r5, #7
 800094a:	40a5      	lsls	r5, r4
 800094c:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000950:	fa03 f404 	lsl.w	r4, r3, r4
 8000954:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000956:	60c4      	str	r4, [r0, #12]
 8000958:	e00a      	b.n	8000970 <ADC_InjectedChannelConfig+0x38>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800095a:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 800095c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000960:	2507      	movs	r5, #7
 8000962:	40a5      	lsls	r5, r4
 8000964:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000968:	fa03 f404 	lsl.w	r4, r3, r4
 800096c:	432c      	orrs	r4, r5
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800096e:	6104      	str	r4, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000970:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000972:	3202      	adds	r2, #2
 8000974:	f3c3 5401 	ubfx	r4, r3, #20, #2
 8000978:	1b12      	subs	r2, r2, r4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000980:	241f      	movs	r4, #31
 8000982:	4094      	lsls	r4, r2
 8000984:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000988:	4091      	lsls	r1, r2
 800098a:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800098c:	6381      	str	r1, [r0, #56]	; 0x38
 800098e:	bd70      	pop	{r4, r5, r6, pc}

08000990 <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000990:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8000992:	3901      	subs	r1, #1
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
 8000994:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8000998:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800099c:	6383      	str	r3, [r0, #56]	; 0x38
 800099e:	4770      	bx	lr

080009a0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 80009a0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
 80009a6:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 80009a8:	9b01      	ldr	r3, [sp, #4]
 80009aa:	4419      	add	r1, r3
 80009ac:	9101      	str	r1, [sp, #4]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80009ae:	9b01      	ldr	r3, [sp, #4]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	b002      	add	sp, #8
 80009b4:	4770      	bx	lr

080009b6 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 80009b6:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80009bc:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_Offset;
 80009be:	9b01      	ldr	r3, [sp, #4]
 80009c0:	3328      	adds	r3, #40	; 0x28
 80009c2:	4419      	add	r1, r3
 80009c4:	9101      	str	r1, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
 80009c6:	9b01      	ldr	r3, [sp, #4]
 80009c8:	6818      	ldr	r0, [r3, #0]
}
 80009ca:	b280      	uxth	r0, r0
 80009cc:	b002      	add	sp, #8
 80009ce:	4770      	bx	lr

080009d0 <ADC_AnalogWatchdogCmd>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80009d0:	6843      	ldr	r3, [r0, #4]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
 80009d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80009d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 80009da:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80009dc:	6041      	str	r1, [r0, #4]
 80009de:	4770      	bx	lr

080009e0 <ADC_AnalogWatchdogThresholdsConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 80009e0:	6241      	str	r1, [r0, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 80009e2:	6282      	str	r2, [r0, #40]	; 0x28
 80009e4:	4770      	bx	lr

080009e6 <ADC_AnalogWatchdogSingleChannelConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80009e6:	6843      	ldr	r3, [r0, #4]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
 80009e8:	f023 031f 	bic.w	r3, r3, #31
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 80009ec:	4319      	orrs	r1, r3
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80009ee:	6041      	str	r1, [r0, #4]
 80009f0:	4770      	bx	lr

080009f2 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <ADC_TempSensorVrefintCmd+0x16>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 80009f4:	689a      	ldr	r2, [r3, #8]
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009f6:	b110      	cbz	r0, 80009fe <ADC_TempSensorVrefintCmd+0xc>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
 80009f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80009fc:	e001      	b.n	8000a02 <ADC_TempSensorVrefintCmd+0x10>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
 80009fe:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40012400 	.word	0x40012400

08000a0c <ADC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000a0c:	6803      	ldr	r3, [r0, #0]
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000a0e:	4219      	tst	r1, r3
}
 8000a10:	bf14      	ite	ne
 8000a12:	2001      	movne	r0, #1
 8000a14:	2000      	moveq	r0, #0
 8000a16:	4770      	bx	lr

08000a18 <ADC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8000a18:	43c9      	mvns	r1, r1
 8000a1a:	6001      	str	r1, [r0, #0]
 8000a1c:	4770      	bx	lr

08000a1e <ADC_GetITStatus>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
 8000a1e:	6843      	ldr	r3, [r0, #4]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000a20:	6800      	ldr	r0, [r0, #0]
 8000a22:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 8000a26:	d004      	beq.n	8000a32 <ADC_GetITStatus+0x14>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4219      	tst	r1, r3
 8000a2c:	bf14      	ite	ne
 8000a2e:	2001      	movne	r0, #1
 8000a30:	2000      	moveq	r0, #0
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 8000a32:	4770      	bx	lr

08000a34 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000a34:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8000a38:	6001      	str	r1, [r0, #0]
 8000a3a:	4770      	bx	lr

08000a3c <BKP_DeInit>:
  * @brief  Deinitializes the BKP peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void BKP_DeInit(void)
{
 8000a3c:	b508      	push	{r3, lr}
  RCC_BackupResetCmd(ENABLE);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f002 f82c 	bl	8002a9c <RCC_BackupResetCmd>
  RCC_BackupResetCmd(DISABLE);
}
 8000a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void BKP_DeInit(void)
{
  RCC_BackupResetCmd(ENABLE);
  RCC_BackupResetCmd(DISABLE);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f002 b827 	b.w	8002a9c <RCC_BackupResetCmd>

08000a4e <BKP_TamperPinLevelConfig>:
  */
void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
{
  /* Check the parameters */
  assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
  *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
 8000a4e:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <BKP_TamperPinLevelConfig+0x6>)
 8000a50:	6018      	str	r0, [r3, #0]
 8000a52:	4770      	bx	lr
 8000a54:	420d8604 	.word	0x420d8604

08000a58 <BKP_TamperPinCmd>:
  */
void BKP_TamperPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
 8000a58:	4b01      	ldr	r3, [pc, #4]	; (8000a60 <BKP_TamperPinCmd+0x8>)
 8000a5a:	6018      	str	r0, [r3, #0]
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	420d8600 	.word	0x420d8600

08000a64 <BKP_ITConfig>:
  */
void BKP_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
 8000a64:	4b01      	ldr	r3, [pc, #4]	; (8000a6c <BKP_ITConfig+0x8>)
 8000a66:	6018      	str	r0, [r3, #0]
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	420d8688 	.word	0x420d8688

08000a70 <BKP_RTCOutputConfig>:
void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
{
  uint16_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
  tmpreg = BKP->RTCCR;
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <BKP_RTCOutputConfig+0x14>)
 8000a72:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
  /* Clear CCO, ASOE and ASOS bits */
  tmpreg &= RTCCR_MASK;
 8000a74:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	0c1b      	lsrs	r3, r3, #16
  
  /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
  tmpreg |= BKP_RTCOutputSource;
 8000a7c:	4318      	orrs	r0, r3
  /* Store the new value */
  BKP->RTCCR = tmpreg;
 8000a7e:	8590      	strh	r0, [r2, #44]	; 0x2c
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40006c00 	.word	0x40006c00

08000a88 <BKP_SetRTCCalibrationValue>:
void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
{
  uint16_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
  tmpreg = BKP->RTCCR;
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <BKP_SetRTCCalibrationValue+0x14>)
 8000a8a:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
  /* Clear CAL[6:0] bits */
  tmpreg &= RTCCR_CAL_MASK;
 8000a8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a90:	041b      	lsls	r3, r3, #16
 8000a92:	0c1b      	lsrs	r3, r3, #16
  /* Set CAL[6:0] bits according to CalibrationValue value */
  tmpreg |= CalibrationValue;
 8000a94:	4318      	orrs	r0, r3
  /* Store the new value */
  BKP->RTCCR = tmpreg;
 8000a96:	8590      	strh	r0, [r2, #44]	; 0x2c
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40006c00 	.word	0x40006c00

08000aa0 <BKP_WriteBackupRegister>:
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @param  Data: data to write
  * @retval None
  */
void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
{
 8000aa0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <BKP_WriteBackupRegister+0x18>)
 8000aa8:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 8000aaa:	9b01      	ldr	r3, [sp, #4]
 8000aac:	4418      	add	r0, r3
 8000aae:	9001      	str	r0, [sp, #4]

  *(__IO uint32_t *) tmp = Data;
 8000ab0:	9b01      	ldr	r3, [sp, #4]
 8000ab2:	6019      	str	r1, [r3, #0]
}
 8000ab4:	b002      	add	sp, #8
 8000ab6:	4770      	bx	lr
 8000ab8:	40006c00 	.word	0x40006c00

08000abc <BKP_ReadBackupRegister>:
  * @param  BKP_DR: specifies the Data Backup Register.
  *   This parameter can be BKP_DRx where x:[1, 42]
  * @retval The content of the specified Data Backup Register
  */
uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
{
 8000abc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_BKP_DR(BKP_DR));

  tmp = (uint32_t)BKP_BASE; 
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <BKP_ReadBackupRegister+0x1c>)
 8000ac4:	9301      	str	r3, [sp, #4]
  tmp += BKP_DR;
 8000ac6:	9b01      	ldr	r3, [sp, #4]
 8000ac8:	4418      	add	r0, r3
 8000aca:	9001      	str	r0, [sp, #4]

  return (*(__IO uint16_t *) tmp);
 8000acc:	9b01      	ldr	r3, [sp, #4]
 8000ace:	8818      	ldrh	r0, [r3, #0]
}
 8000ad0:	b280      	uxth	r0, r0
 8000ad2:	b002      	add	sp, #8
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40006c00 	.word	0x40006c00

08000adc <BKP_GetFlagStatus>:
  * @param  None
  * @retval The new state of the Tamper Pin Event flag (SET or RESET).
  */
FlagStatus BKP_GetFlagStatus(void)
{
  return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
 8000adc:	4b01      	ldr	r3, [pc, #4]	; (8000ae4 <BKP_GetFlagStatus+0x8>)
 8000ade:	6818      	ldr	r0, [r3, #0]
}
 8000ae0:	b2c0      	uxtb	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	420d86a0 	.word	0x420d86a0

08000ae8 <BKP_ClearFlag>:
  * @retval None
  */
void BKP_ClearFlag(void)
{
  /* Set CTE bit to clear Tamper Pin Event flag */
  BKP->CSR |= BKP_CSR_CTE;
 8000ae8:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <BKP_ClearFlag+0x10>)
 8000aea:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	8693      	strh	r3, [r2, #52]	; 0x34
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40006c00 	.word	0x40006c00

08000afc <BKP_GetITStatus>:
  * @param  None
  * @retval The new state of the Tamper Pin Interrupt (SET or RESET).
  */
ITStatus BKP_GetITStatus(void)
{
  return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
 8000afc:	4b01      	ldr	r3, [pc, #4]	; (8000b04 <BKP_GetITStatus+0x8>)
 8000afe:	6818      	ldr	r0, [r3, #0]
}
 8000b00:	b2c0      	uxtb	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	420d86a4 	.word	0x420d86a4

08000b08 <BKP_ClearITPendingBit>:
  * @retval None
  */
void BKP_ClearITPendingBit(void)
{
  /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
  BKP->CSR |= BKP_CSR_CTI;
 8000b08:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <BKP_ClearITPendingBit+0x10>)
 8000b0a:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	f043 0302 	orr.w	r3, r3, #2
 8000b12:	8693      	strh	r3, [r2, #52]	; 0x34
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40006c00 	.word	0x40006c00

08000b1c <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000b1c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <CAN_DeInit+0x30>)
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000b20:	2101      	movs	r1, #1
void CAN_DeInit(CAN_TypeDef* CANx)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000b22:	4298      	cmp	r0, r3
 8000b24:	d107      	bne.n	8000b36 <CAN_DeInit+0x1a>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000b26:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000b2a:	f001 ffab 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000b34:	e006      	b.n	8000b44 <CAN_DeInit+0x28>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8000b36:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b3a:	f001 ffa3 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  }
}
 8000b44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000b48:	f001 bf9c 	b.w	8002a84 <RCC_APB1PeriphResetCmd>
 8000b4c:	40006400 	.word	0x40006400

08000b50 <CAN_Init>:
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000b50:	6803      	ldr	r3, [r0, #0]
 8000b52:	f023 0302 	bic.w	r3, r3, #2
 8000b56:	6003      	str	r3, [r0, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000b58:	6803      	ldr	r3, [r0, #0]
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6003      	str	r3, [r0, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b64:	6842      	ldr	r2, [r0, #4]
 8000b66:	07d2      	lsls	r2, r2, #31
 8000b68:	d401      	bmi.n	8000b6e <CAN_Init+0x1e>
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	d1fa      	bne.n	8000b64 <CAN_Init+0x14>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000b6e:	6843      	ldr	r3, [r0, #4]
 8000b70:	f013 0301 	ands.w	r3, r3, #1
 8000b74:	d055      	beq.n	8000c22 <CAN_Init+0xd2>
    InitStatus = CAN_InitStatus_Failed;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000b76:	798b      	ldrb	r3, [r1, #6]
 8000b78:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000b7a:	6803      	ldr	r3, [r0, #0]
 8000b7c:	bf0c      	ite	eq
 8000b7e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000b82:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8000b86:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000b88:	79cb      	ldrb	r3, [r1, #7]
 8000b8a:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000b8c:	6803      	ldr	r3, [r0, #0]
 8000b8e:	bf0c      	ite	eq
 8000b90:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000b94:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000b98:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000b9a:	7a0b      	ldrb	r3, [r1, #8]
 8000b9c:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000b9e:	6803      	ldr	r3, [r0, #0]
 8000ba0:	bf0c      	ite	eq
 8000ba2:	f043 0320 	orreq.w	r3, r3, #32
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000ba6:	f023 0320 	bicne.w	r3, r3, #32
 8000baa:	6003      	str	r3, [r0, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000bac:	7a4b      	ldrb	r3, [r1, #9]
 8000bae:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_NART;
 8000bb0:	6803      	ldr	r3, [r0, #0]
 8000bb2:	bf0c      	ite	eq
 8000bb4:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000bb8:	f023 0310 	bicne.w	r3, r3, #16
 8000bbc:	6003      	str	r3, [r0, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000bbe:	7a8b      	ldrb	r3, [r1, #10]
 8000bc0:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000bc2:	6803      	ldr	r3, [r0, #0]
 8000bc4:	bf0c      	ite	eq
 8000bc6:	f043 0308 	orreq.w	r3, r3, #8
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000bca:	f023 0308 	bicne.w	r3, r3, #8
 8000bce:	6003      	str	r3, [r0, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000bd0:	7acb      	ldrb	r3, [r1, #11]
 8000bd2:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000bd4:	6803      	ldr	r3, [r0, #0]
 8000bd6:	bf0c      	ite	eq
 8000bd8:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000bdc:	f023 0304 	bicne.w	r3, r3, #4
 8000be0:	6003      	str	r3, [r0, #0]

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000be2:	78cb      	ldrb	r3, [r1, #3]
 8000be4:	788a      	ldrb	r2, [r1, #2]
 8000be6:	061b      	lsls	r3, r3, #24
 8000be8:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000bec:	790a      	ldrb	r2, [r1, #4]
 8000bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf2:	794a      	ldrb	r2, [r1, #5]
 8000bf4:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8000bf8:	880a      	ldrh	r2, [r1, #0]
 8000bfa:	3a01      	subs	r2, #1
 8000bfc:	4313      	orrs	r3, r2
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000bfe:	61c3      	str	r3, [r0, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000c00:	6803      	ldr	r3, [r0, #0]
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6003      	str	r3, [r0, #0]

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0c:	6842      	ldr	r2, [r0, #4]
 8000c0e:	07d2      	lsls	r2, r2, #31
 8000c10:	d501      	bpl.n	8000c16 <CAN_Init+0xc6>
 8000c12:	3b01      	subs	r3, #1
 8000c14:	d1fa      	bne.n	8000c0c <CAN_Init+0xbc>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000c16:	6840      	ldr	r0, [r0, #4]
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  {
    InitStatus = CAN_InitStatus_Failed;
 8000c18:	f000 0001 	and.w	r0, r0, #1
 8000c1c:	f080 0001 	eor.w	r0, r0, #1
 8000c20:	4770      	bx	lr
 8000c22:	4618      	mov	r0, r3
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
}
 8000c24:	4770      	bx	lr

08000c26 <CAN_FilterInit>:
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000c26:	7a83      	ldrb	r3, [r0, #10]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
  *                               structure that contains the configuration 
  *                               information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000c2e:	b570      	push	{r4, r5, r6, lr}

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000c30:	43dc      	mvns	r4, r3
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000c32:	4a33      	ldr	r2, [pc, #204]	; (8000d00 <CAN_FilterInit+0xda>)
 8000c34:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8000c38:	f041 0101 	orr.w	r1, r1, #1
 8000c3c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000c40:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000c44:	4021      	ands	r1, r4
 8000c46:	f8c2 121c 	str.w	r1, [r2, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8000c4a:	7b01      	ldrb	r1, [r0, #12]
 8000c4c:	b9a1      	cbnz	r1, 8000c78 <CAN_FilterInit+0x52>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000c4e:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000c52:	88c6      	ldrh	r6, [r0, #6]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000c54:	4021      	ands	r1, r4
 8000c56:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000c5a:	7a81      	ldrb	r1, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000c5c:	8845      	ldrh	r5, [r0, #2]
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000c5e:	3148      	adds	r1, #72	; 0x48
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000c60:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000c64:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000c68:	8802      	ldrh	r2, [r0, #0]
 8000c6a:	8881      	ldrh	r1, [r0, #4]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000c6c:	7a85      	ldrb	r5, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000c6e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000c72:	4a24      	ldr	r2, [pc, #144]	; (8000d04 <CAN_FilterInit+0xde>)
 8000c74:	00ed      	lsls	r5, r5, #3
 8000c76:	5151      	str	r1, [r2, r5]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000c78:	7b02      	ldrb	r2, [r0, #12]
 8000c7a:	2a01      	cmp	r2, #1
 8000c7c:	d115      	bne.n	8000caa <CAN_FilterInit+0x84>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <CAN_FilterInit+0xda>)
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000c80:	8806      	ldrh	r6, [r0, #0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000c82:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000c86:	8845      	ldrh	r5, [r0, #2]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000c88:	4319      	orrs	r1, r3
 8000c8a:	f8c2 120c 	str.w	r1, [r2, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000c8e:	7a81      	ldrb	r1, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000c90:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000c94:	3148      	adds	r1, #72	; 0x48
 8000c96:	f842 5031 	str.w	r5, [r2, r1, lsl #3]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000c9a:	88c2      	ldrh	r2, [r0, #6]
 8000c9c:	8881      	ldrh	r1, [r0, #4]
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000c9e:	7a85      	ldrb	r5, [r0, #10]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000ca0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <CAN_FilterInit+0xde>)
 8000ca6:	00ed      	lsls	r5, r5, #3
 8000ca8:	5151      	str	r1, [r2, r5]
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000caa:	7ac2      	ldrb	r2, [r0, #11]
 8000cac:	4914      	ldr	r1, [pc, #80]	; (8000d00 <CAN_FilterInit+0xda>)
 8000cae:	b91a      	cbnz	r2, 8000cb8 <CAN_FilterInit+0x92>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000cb0:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 8000cb4:	4022      	ands	r2, r4
 8000cb6:	e002      	b.n	8000cbe <CAN_FilterInit+0x98>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000cb8:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 8000cbc:	431a      	orrs	r2, r3
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000cbe:	8905      	ldrh	r5, [r0, #8]
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000cc0:	f8c1 2204 	str.w	r2, [r1, #516]	; 0x204
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <CAN_FilterInit+0xda>)
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000cc6:	b92d      	cbnz	r5, 8000cd4 <CAN_FilterInit+0xae>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000cc8:	f8d1 5214 	ldr.w	r5, [r1, #532]	; 0x214
 8000ccc:	402c      	ands	r4, r5
 8000cce:	f8c1 4214 	str.w	r4, [r1, #532]	; 0x214
 8000cd2:	e006      	b.n	8000ce2 <CAN_FilterInit+0xbc>
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000cd4:	2d01      	cmp	r5, #1
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000cd6:	bf02      	ittt	eq
 8000cd8:	f8d2 1214 	ldreq.w	r1, [r2, #532]	; 0x214
 8000cdc:	4319      	orreq	r1, r3
 8000cde:	f8c2 1214 	streq.w	r1, [r2, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8000ce2:	7b41      	ldrb	r1, [r0, #13]
 8000ce4:	2901      	cmp	r1, #1
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000ce6:	bf02      	ittt	eq
 8000ce8:	f8d2 121c 	ldreq.w	r1, [r2, #540]	; 0x21c
 8000cec:	430b      	orreq	r3, r1
 8000cee:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000cf2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000cf6:	f023 0301 	bic.w	r3, r3, #1
 8000cfa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}
 8000d00:	40006400 	.word	0x40006400
 8000d04:	40006644 	.word	0x40006644

08000d08 <CAN_StructInit>:
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	7183      	strb	r3, [r0, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8000d0c:	71c3      	strb	r3, [r0, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8000d0e:	7203      	strb	r3, [r0, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8000d10:	7243      	strb	r3, [r0, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8000d12:	7283      	strb	r3, [r0, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8000d14:	72c3      	strb	r3, [r0, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8000d16:	7083      	strb	r3, [r0, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8000d18:	70c3      	strb	r3, [r0, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	7103      	strb	r3, [r0, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	7143      	strb	r3, [r0, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	8003      	strh	r3, [r0, #0]
 8000d26:	4770      	bx	lr

08000d28 <CAN_SlaveStartBank>:
{
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <CAN_SlaveStartBank+0x38>)
 8000d2a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8000d36:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d3a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000d3e:	f022 020e 	bic.w	r2, r2, #14
 8000d42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8000d46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d4a:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000d4e:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000d52:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d56:	f022 0201 	bic.w	r2, r2, #1
 8000d5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000d5e:	4770      	bx	lr
 8000d60:	40006400 	.word	0x40006400

08000d64 <CAN_DBGFreeze>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000d64:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d66:	b111      	cbz	r1, 8000d6e <CAN_DBGFreeze+0xa>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8000d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6c:	e001      	b.n	8000d72 <CAN_DBGFreeze+0xe>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8000d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d72:	6003      	str	r3, [r0, #0]
 8000d74:	4770      	bx	lr

08000d76 <CAN_TTComModeCmd>:
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000d76:	6803      	ldr	r3, [r0, #0]
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d78:	b199      	cbz	r1, 8000da2 <CAN_TTComModeCmd+0x2c>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7e:	6003      	str	r3, [r0, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8000d80:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8000d8c:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8000d98:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	e012      	b.n	8000dc8 <CAN_TTComModeCmd+0x52>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8000da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000da6:	6003      	str	r3, [r0, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8000da8:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 8000dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000db0:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8000db4:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dbc:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8000dc0:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc8:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 8000dcc:	4770      	bx	lr

08000dce <CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000dce:	6883      	ldr	r3, [r0, #8]
  *                    DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission
  *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000dd2:	015c      	lsls	r4, r3, #5
 8000dd4:	d407      	bmi.n	8000de6 <CAN_Transmit+0x18>
  {
    transmit_mailbox = 0;
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000dd6:	6883      	ldr	r3, [r0, #8]
 8000dd8:	011a      	lsls	r2, r3, #4
 8000dda:	d406      	bmi.n	8000dea <CAN_Transmit+0x1c>
  {
    transmit_mailbox = 1;
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000ddc:	6883      	ldr	r3, [r0, #8]
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	d405      	bmi.n	8000dee <CAN_Transmit+0x20>
  {
    transmit_mailbox = 2;
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000de2:	2404      	movs	r4, #4
 8000de4:	e03e      	b.n	8000e64 <CAN_Transmit+0x96>
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
  {
    transmit_mailbox = 0;
 8000de6:	2400      	movs	r4, #0
 8000de8:	e002      	b.n	8000df0 <CAN_Transmit+0x22>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
  {
    transmit_mailbox = 1;
 8000dea:	2401      	movs	r4, #1
 8000dec:	e000      	b.n	8000df0 <CAN_Transmit+0x22>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
  {
    transmit_mailbox = 2;
 8000dee:	2402      	movs	r4, #2
 8000df0:	0125      	lsls	r5, r4, #4
 8000df2:	1943      	adds	r3, r0, r5
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8000df4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000df8:	f002 0201 	and.w	r2, r2, #1
 8000dfc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    if (TxMessage->IDE == CAN_Id_Standard)
 8000e00:	7a0e      	ldrb	r6, [r1, #8]
 8000e02:	7a4a      	ldrb	r2, [r1, #9]
 8000e04:	b92e      	cbnz	r6, 8000e12 <CAN_Transmit+0x44>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000e06:	680f      	ldr	r7, [r1, #0]
 8000e08:	f8d3 6180 	ldr.w	r6, [r3, #384]	; 0x180
 8000e0c:	ea42 5247 	orr.w	r2, r2, r7, lsl #21
 8000e10:	e006      	b.n	8000e20 <CAN_Transmit+0x52>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000e12:	684f      	ldr	r7, [r1, #4]
 8000e14:	f8d3 e180 	ldr.w	lr, [r3, #384]	; 0x180
 8000e18:	ea46 06c7 	orr.w	r6, r6, r7, lsl #3
 8000e1c:	ea46 060e 	orr.w	r6, r6, lr
 8000e20:	4332      	orrs	r2, r6
 8000e22:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000e26:	7a8a      	ldrb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000e28:	4428      	add	r0, r5
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8000e2a:	f002 020f 	and.w	r2, r2, #15
 8000e2e:	728a      	strb	r2, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8000e30:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000e34:	f022 020f 	bic.w	r2, r2, #15
 8000e38:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8000e3c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000e40:	7a8e      	ldrb	r6, [r1, #10]
 8000e42:	4332      	orrs	r2, r6
 8000e44:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8000e48:	f8d1 200b 	ldr.w	r2, [r1, #11]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8000e4c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8000e50:	f8d1 200f 	ldr.w	r2, [r1, #15]
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8000e54:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8000e58:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000e5c:	f042 0201 	orr.w	r2, r2, #1
 8000e60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
  return transmit_mailbox;
}
 8000e64:	4620      	mov	r0, r4
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e68 <CAN_TransmitStatus>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8000e68:	2901      	cmp	r1, #1
 8000e6a:	d008      	beq.n	8000e7e <CAN_TransmitStatus+0x16>
 8000e6c:	d304      	bcc.n	8000e78 <CAN_TransmitStatus+0x10>
 8000e6e:	2902      	cmp	r1, #2
 8000e70:	d118      	bne.n	8000ea4 <CAN_TransmitStatus+0x3c>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000e72:	6882      	ldr	r2, [r0, #8]
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <CAN_TransmitStatus+0x40>)
 8000e76:	e004      	b.n	8000e82 <CAN_TransmitStatus+0x1a>
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8000e78:	6882      	ldr	r2, [r0, #8]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <CAN_TransmitStatus+0x44>)
 8000e7c:	e001      	b.n	8000e82 <CAN_TransmitStatus+0x1a>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8000e7e:	6882      	ldr	r2, [r0, #8]
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <CAN_TransmitStatus+0x48>)
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000e82:	4013      	ands	r3, r2
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 8000e84:	4a09      	ldr	r2, [pc, #36]	; (8000eac <CAN_TransmitStatus+0x44>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00a      	beq.n	8000ea0 <CAN_TransmitStatus+0x38>
 8000e8a:	d801      	bhi.n	8000e90 <CAN_TransmitStatus+0x28>
 8000e8c:	b933      	cbnz	r3, 8000e9c <CAN_TransmitStatus+0x34>
 8000e8e:	e009      	b.n	8000ea4 <CAN_TransmitStatus+0x3c>
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <CAN_TransmitStatus+0x48>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d004      	beq.n	8000ea0 <CAN_TransmitStatus+0x38>
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <CAN_TransmitStatus+0x40>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d001      	beq.n	8000ea0 <CAN_TransmitStatus+0x38>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
      break;
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	4770      	bx	lr
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8000ea0:	2001      	movs	r0, #1
      break;
 8000ea2:	4770      	bx	lr
      break;
  }
  switch (state)
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8000ea4:	2002      	movs	r0, #2
      break;
    default: state = CAN_TxStatus_Failed;
      break;
  }
  return (uint8_t) state;
}
 8000ea6:	4770      	bx	lr
 8000ea8:	10030000 	.word	0x10030000
 8000eac:	04000003 	.word	0x04000003
 8000eb0:	08000300 	.word	0x08000300

08000eb4 <CAN_CancelTransmit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8000eb4:	2901      	cmp	r1, #1
 8000eb6:	d007      	beq.n	8000ec8 <CAN_CancelTransmit+0x14>
 8000eb8:	d302      	bcc.n	8000ec0 <CAN_CancelTransmit+0xc>
 8000eba:	2902      	cmp	r1, #2
 8000ebc:	d008      	beq.n	8000ed0 <CAN_CancelTransmit+0x1c>
 8000ebe:	4770      	bx	lr
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8000ec0:	6883      	ldr	r3, [r0, #8]
 8000ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec6:	e006      	b.n	8000ed6 <CAN_CancelTransmit+0x22>
      break;
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8000ec8:	6883      	ldr	r3, [r0, #8]
 8000eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ece:	e002      	b.n	8000ed6 <CAN_CancelTransmit+0x22>
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8000ed0:	6883      	ldr	r3, [r0, #8]
 8000ed2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ed6:	6083      	str	r3, [r0, #8]
 8000ed8:	4770      	bx	lr

08000eda <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000eda:	010b      	lsls	r3, r1, #4
 8000edc:	b530      	push	{r4, r5, lr}
 8000ede:	18c4      	adds	r4, r0, r3
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000ee0:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000ee4:	f005 0504 	and.w	r5, r5, #4
 8000ee8:	b2ed      	uxtb	r5, r5
 8000eea:	7215      	strb	r5, [r2, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000eec:	b925      	cbnz	r5, 8000ef8 <CAN_Receive+0x1e>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000eee:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000ef2:	0d6d      	lsrs	r5, r5, #21
 8000ef4:	6015      	str	r5, [r2, #0]
 8000ef6:	e003      	b.n	8000f00 <CAN_Receive+0x26>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000ef8:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000efc:	08ed      	lsrs	r5, r5, #3
 8000efe:	6055      	str	r5, [r2, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000f00:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000f04:	4403      	add	r3, r0
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000f06:	f005 0502 	and.w	r5, r5, #2
 8000f0a:	7255      	strb	r5, [r2, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000f0c:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
 8000f10:	f005 050f 	and.w	r5, r5, #15
 8000f14:	7295      	strb	r5, [r2, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000f16:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
 8000f1a:	0a24      	lsrs	r4, r4, #8
 8000f1c:	74d4      	strb	r4, [r2, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000f1e:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000f22:	72d4      	strb	r4, [r2, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000f24:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000f28:	0a24      	lsrs	r4, r4, #8
 8000f2a:	7314      	strb	r4, [r2, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000f2c:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000f30:	0c24      	lsrs	r4, r4, #16
 8000f32:	7354      	strb	r4, [r2, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000f34:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000f38:	0e24      	lsrs	r4, r4, #24
 8000f3a:	7394      	strb	r4, [r2, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000f3c:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000f40:	73d4      	strb	r4, [r2, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000f42:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000f46:	0a24      	lsrs	r4, r4, #8
 8000f48:	7414      	strb	r4, [r2, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000f4a:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000f4e:	0c24      	lsrs	r4, r4, #16
 8000f50:	7454      	strb	r4, [r2, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000f52:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000f56:	0e1b      	lsrs	r3, r3, #24
 8000f58:	7493      	strb	r3, [r2, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000f5a:	b921      	cbnz	r1, 8000f66 <CAN_Receive+0x8c>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000f5c:	68c3      	ldr	r3, [r0, #12]
 8000f5e:	f043 0320 	orr.w	r3, r3, #32
 8000f62:	60c3      	str	r3, [r0, #12]
 8000f64:	bd30      	pop	{r4, r5, pc}
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000f66:	6903      	ldr	r3, [r0, #16]
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6103      	str	r3, [r0, #16]
 8000f6e:	bd30      	pop	{r4, r5, pc}

08000f70 <CAN_FIFORelease>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000f70:	b921      	cbnz	r1, 8000f7c <CAN_FIFORelease+0xc>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000f72:	68c3      	ldr	r3, [r0, #12]
 8000f74:	f043 0320 	orr.w	r3, r3, #32
 8000f78:	60c3      	str	r3, [r0, #12]
 8000f7a:	4770      	bx	lr
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000f7c:	6903      	ldr	r3, [r0, #16]
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	6103      	str	r3, [r0, #16]
 8000f84:	4770      	bx	lr

08000f86 <CAN_MessagePending>:
{
  uint8_t message_pending=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8000f86:	b909      	cbnz	r1, 8000f8c <CAN_MessagePending+0x6>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8000f88:	68c0      	ldr	r0, [r0, #12]
 8000f8a:	e002      	b.n	8000f92 <CAN_MessagePending+0xc>
  }
  else if (FIFONumber == CAN_FIFO1)
 8000f8c:	2901      	cmp	r1, #1
 8000f8e:	d103      	bne.n	8000f98 <CAN_MessagePending+0x12>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8000f90:	6900      	ldr	r0, [r0, #16]
 8000f92:	f000 0003 	and.w	r0, r0, #3
 8000f96:	4770      	bx	lr
  }
  else
  {
    message_pending = 0;
 8000f98:	2000      	movs	r0, #0
  }
  return message_pending;
}
 8000f9a:	4770      	bx	lr

08000f9c <CAN_OperatingModeRequest>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8000f9c:	b999      	cbnz	r1, 8000fc6 <CAN_OperatingModeRequest+0x2a>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8000f9e:	6803      	ldr	r3, [r0, #0]
 8000fa0:	f023 0303 	bic.w	r3, r3, #3
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	6842      	ldr	r2, [r0, #4]
 8000fb0:	f002 0203 	and.w	r2, r2, #3
 8000fb4:	2a01      	cmp	r2, #1
 8000fb6:	d001      	beq.n	8000fbc <CAN_OperatingModeRequest+0x20>
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	d1f8      	bne.n	8000fae <CAN_OperatingModeRequest+0x12>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8000fbc:	6840      	ldr	r0, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000fbe:	f000 0003 	and.w	r0, r0, #3
 8000fc2:	2801      	cmp	r0, #1
 8000fc4:	e028      	b.n	8001018 <CAN_OperatingModeRequest+0x7c>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8000fc6:	2901      	cmp	r1, #1
 8000fc8:	d111      	bne.n	8000fee <CAN_OperatingModeRequest+0x52>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8000fca:	6803      	ldr	r3, [r0, #0]
 8000fcc:	f023 0303 	bic.w	r3, r3, #3
 8000fd0:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8000fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd6:	6842      	ldr	r2, [r0, #4]
 8000fd8:	0792      	lsls	r2, r2, #30
 8000fda:	d001      	beq.n	8000fe0 <CAN_OperatingModeRequest+0x44>
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	d1fa      	bne.n	8000fd6 <CAN_OperatingModeRequest+0x3a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8000fe0:	6843      	ldr	r3, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000fe2:	f013 0f03 	tst.w	r3, #3
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2001      	moveq	r0, #1
 8000fea:	2000      	movne	r0, #0
 8000fec:	4770      	bx	lr
    else
    {
      status = CAN_ModeStatus_Success;
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8000fee:	2902      	cmp	r1, #2
 8000ff0:	d116      	bne.n	8001020 <CAN_OperatingModeRequest+0x84>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	f023 0303 	bic.w	r3, r3, #3
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8000ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001002:	6842      	ldr	r2, [r0, #4]
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	2a02      	cmp	r2, #2
 800100a:	d001      	beq.n	8001010 <CAN_OperatingModeRequest+0x74>
 800100c:	3b01      	subs	r3, #1
 800100e:	d1f8      	bne.n	8001002 <CAN_OperatingModeRequest+0x66>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8001010:	6840      	ldr	r0, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8001012:	f000 0003 	and.w	r0, r0, #3
 8001016:	2802      	cmp	r0, #2
 8001018:	bf14      	ite	ne
 800101a:	2000      	movne	r0, #0
 800101c:	2001      	moveq	r0, #1
 800101e:	4770      	bx	lr
      status = CAN_ModeStatus_Success;
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8001020:	2000      	movs	r0, #0
  }

  return  (uint8_t) status;
}
 8001022:	4770      	bx	lr

08001024 <CAN_Sleep>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8001024:	6803      	ldr	r3, [r0, #0]
 8001026:	f023 0303 	bic.w	r3, r3, #3
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6003      	str	r3, [r0, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8001030:	6840      	ldr	r0, [r0, #4]
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 8001032:	f000 0003 	and.w	r0, r0, #3
}
 8001036:	1e83      	subs	r3, r0, #2
 8001038:	4258      	negs	r0, r3
 800103a:	4158      	adcs	r0, r3
 800103c:	4770      	bx	lr

0800103e <CAN_WakeUp>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 800103e:	6803      	ldr	r3, [r0, #0]
 8001040:	f023 0302 	bic.w	r3, r3, #2
 8001044:	6003      	str	r3, [r0, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8001046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104a:	6842      	ldr	r2, [r0, #4]
 800104c:	0792      	lsls	r2, r2, #30
 800104e:	d501      	bpl.n	8001054 <CAN_WakeUp+0x16>
 8001050:	3b01      	subs	r3, #1
 8001052:	d1fa      	bne.n	800104a <CAN_WakeUp+0xc>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8001054:	6840      	ldr	r0, [r0, #4]
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8001056:	f080 0002 	eor.w	r0, r0, #2
}
 800105a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800105e:	4770      	bx	lr

08001060 <CAN_GetLastErrorCode>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8001060:	6980      	ldr	r0, [r0, #24]
  
  /* Return the error code*/
  return errorcode;
}
 8001062:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001066:	4770      	bx	lr

08001068 <CAN_GetReceiveErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8001068:	6980      	ldr	r0, [r0, #24]
  
  /* Return the Receive Error Counter*/
  return counter;
}
 800106a:	0e00      	lsrs	r0, r0, #24
 800106c:	4770      	bx	lr

0800106e <CAN_GetLSBTransmitErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 800106e:	6980      	ldr	r0, [r0, #24]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
}
 8001070:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001074:	4770      	bx	lr

08001076 <CAN_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8001076:	6943      	ldr	r3, [r0, #20]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001078:	b10a      	cbz	r2, 800107e <CAN_ITConfig+0x8>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 800107a:	4319      	orrs	r1, r3
 800107c:	e001      	b.n	8001082 <CAN_ITConfig+0xc>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 800107e:	ea23 0101 	bic.w	r1, r3, r1
 8001082:	6141      	str	r1, [r0, #20]
 8001084:	4770      	bx	lr

08001086 <CAN_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8001086:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800108a:	d001      	beq.n	8001090 <CAN_GetFlagStatus+0xa>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800108c:	6983      	ldr	r3, [r0, #24]
 800108e:	e00b      	b.n	80010a8 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8001090:	01cb      	lsls	r3, r1, #7
 8001092:	d501      	bpl.n	8001098 <CAN_GetFlagStatus+0x12>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8001094:	6843      	ldr	r3, [r0, #4]
 8001096:	e007      	b.n	80010a8 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8001098:	010a      	lsls	r2, r1, #4
 800109a:	d501      	bpl.n	80010a0 <CAN_GetFlagStatus+0x1a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800109c:	6883      	ldr	r3, [r0, #8]
 800109e:	e003      	b.n	80010a8 <CAN_GetFlagStatus+0x22>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 80010a0:	018b      	lsls	r3, r1, #6
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80010a2:	bf4c      	ite	mi
 80010a4:	68c3      	ldrmi	r3, [r0, #12]
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80010a6:	6903      	ldrpl	r3, [r0, #16]
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80010a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010ac:	420b      	tst	r3, r1
 80010ae:	bf14      	ite	ne
 80010b0:	2001      	movne	r0, #1
 80010b2:	2000      	moveq	r0, #0
      bitstatus = RESET;
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
}
 80010b4:	4770      	bx	lr

080010b6 <CAN_ClearFlag>:
  uint32_t flagtmp=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <CAN_ClearFlag+0x2a>)
 80010b8:	4299      	cmp	r1, r3
 80010ba:	d102      	bne.n	80010c2 <CAN_ClearFlag+0xc>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	6183      	str	r3, [r0, #24]
 80010c0:	4770      	bx	lr
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 80010c2:	018a      	lsls	r2, r1, #6
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 80010c4:	f3c1 0313 	ubfx	r3, r1, #0, #20

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 80010c8:	d501      	bpl.n	80010ce <CAN_ClearFlag+0x18>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 80010ca:	60c3      	str	r3, [r0, #12]
 80010cc:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 80010ce:	014a      	lsls	r2, r1, #5
 80010d0:	d501      	bpl.n	80010d6 <CAN_ClearFlag+0x20>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 80010d2:	6103      	str	r3, [r0, #16]
 80010d4:	4770      	bx	lr
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 80010d6:	010a      	lsls	r2, r1, #4
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 80010d8:	bf4c      	ite	mi
 80010da:	6083      	strmi	r3, [r0, #8]
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 80010dc:	6043      	strpl	r3, [r0, #4]
 80010de:	4770      	bx	lr
 80010e0:	30f00070 	.word	0x30f00070

080010e4 <CAN_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 80010e4:	6943      	ldr	r3, [r0, #20]
 80010e6:	400b      	ands	r3, r1
 80010e8:	d05c      	beq.n	80011a4 <CAN_GetITStatus+0xc0>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 80010ea:	2940      	cmp	r1, #64	; 0x40
 80010ec:	d042      	beq.n	8001174 <CAN_GetITStatus+0x90>
 80010ee:	d810      	bhi.n	8001112 <CAN_GetITStatus+0x2e>
 80010f0:	2904      	cmp	r1, #4
 80010f2:	d033      	beq.n	800115c <CAN_GetITStatus+0x78>
 80010f4:	d805      	bhi.n	8001102 <CAN_GetITStatus+0x1e>
 80010f6:	2901      	cmp	r1, #1
 80010f8:	d027      	beq.n	800114a <CAN_GetITStatus+0x66>
 80010fa:	2902      	cmp	r1, #2
 80010fc:	d154      	bne.n	80011a8 <CAN_GetITStatus+0xc4>
               /* Check CAN_TSR_RQCPx bits */
	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
	      break;
      case CAN_IT_FMP0:
               /* Check CAN_RF0R_FMP0 bit */
	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80010fe:	68c0      	ldr	r0, [r0, #12]
 8001100:	e02f      	b.n	8001162 <CAN_GetITStatus+0x7e>
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001102:	2910      	cmp	r1, #16
 8001104:	d02c      	beq.n	8001160 <CAN_GetITStatus+0x7c>
 8001106:	2920      	cmp	r1, #32
 8001108:	d030      	beq.n	800116c <CAN_GetITStatus+0x88>
 800110a:	2908      	cmp	r1, #8
 800110c:	d14c      	bne.n	80011a8 <CAN_GetITStatus+0xc4>
               /* Check CAN_RF0R_FULL0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
	      break;
      case CAN_IT_FOV0:
               /* Check CAN_RF0R_FOVR0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 800110e:	68c0      	ldr	r0, [r0, #12]
 8001110:	e035      	b.n	800117e <CAN_GetITStatus+0x9a>
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001112:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001116:	d03b      	beq.n	8001190 <CAN_GetITStatus+0xac>
 8001118:	d80c      	bhi.n	8001134 <CAN_GetITStatus+0x50>
 800111a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800111e:	d031      	beq.n	8001184 <CAN_GetITStatus+0xa0>
 8001120:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001124:	d032      	beq.n	800118c <CAN_GetITStatus+0xa8>
 8001126:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800112a:	d13d      	bne.n	80011a8 <CAN_GetITStatus+0xc4>
               /* Check CAN_MSR_SLAKI bit */
	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
	      break;
      case CAN_IT_EWG:
               /* Check CAN_ESR_EWGF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 800112c:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800112e:	f000 0001 	and.w	r0, r0, #1
 8001132:	4770      	bx	lr
  
  /* check the enable interrupt bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8001134:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001138:	d01e      	beq.n	8001178 <CAN_GetITStatus+0x94>
 800113a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800113e:	d01d      	beq.n	800117c <CAN_GetITStatus+0x98>
 8001140:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001144:	d130      	bne.n	80011a8 <CAN_GetITStatus+0xc4>
               /* Check CAN_ESR_LEC bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
	      break;
      case CAN_IT_ERR:
               /* Check CAN_MSR_ERRI bit */ 
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8001146:	6840      	ldr	r0, [r0, #4]
 8001148:	e029      	b.n	800119e <CAN_GetITStatus+0xba>
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
    {
      case CAN_IT_TME:
               /* Check CAN_TSR_RQCPx bits */
	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 800114a:	6880      	ldr	r0, [r0, #8]
  ITStatus pendingbitstatus = RESET;
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 800114c:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8001150:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 8001154:	3000      	adds	r0, #0
 8001156:	bf18      	it	ne
 8001158:	2001      	movne	r0, #1
 800115a:	4770      	bx	lr
               /* Check CAN_RF0R_FMP0 bit */
	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
	      break;
      case CAN_IT_FF0:
               /* Check CAN_RF0R_FULL0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800115c:	68c0      	ldr	r0, [r0, #12]
 800115e:	e006      	b.n	800116e <CAN_GetITStatus+0x8a>
               /* Check CAN_RF0R_FOVR0 bit */
               itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
	      break;
      case CAN_IT_FMP1:
               /* Check CAN_RF1R_FMP1 bit */
               itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8001160:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001162:	f010 0003 	ands.w	r0, r0, #3
 8001166:	bf18      	it	ne
 8001168:	2001      	movne	r0, #1
 800116a:	4770      	bx	lr
               /* Check CAN_RF1R_FMP1 bit */
               itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
	      break;
      case CAN_IT_FF1:
               /* Check CAN_RF1R_FULL1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 800116c:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800116e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8001172:	4770      	bx	lr
               /* Check CAN_RF1R_FULL1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
	      break;
      case CAN_IT_FOV1:
               /* Check CAN_RF1R_FOVR1 bit */
	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8001174:	6900      	ldr	r0, [r0, #16]
 8001176:	e002      	b.n	800117e <CAN_GetITStatus+0x9a>
	      break;
      case CAN_IT_WKU:
               /* Check CAN_MSR_WKUI bit */
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8001178:	6840      	ldr	r0, [r0, #4]
 800117a:	e7f8      	b.n	800116e <CAN_GetITStatus+0x8a>
	      break;
      case CAN_IT_SLK:
               /* Check CAN_MSR_SLAKI bit */
	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 800117c:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800117e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8001182:	4770      	bx	lr
               /* Check CAN_ESR_EWGF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
	      break;
      case CAN_IT_EPV:
               /* Check CAN_ESR_EPVF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8001184:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001186:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800118a:	4770      	bx	lr
               /* Check CAN_ESR_EPVF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
	      break;
      case CAN_IT_BOF:
               /* Check CAN_ESR_BOFF bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 800118c:	6980      	ldr	r0, [r0, #24]
 800118e:	e006      	b.n	800119e <CAN_GetITStatus+0xba>
	      break;
      case CAN_IT_LEC:
               /* Check CAN_ESR_LEC bit */
	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8001190:	6983      	ldr	r3, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8001192:	f013 0f70 	tst.w	r3, #112	; 0x70
 8001196:	bf14      	ite	ne
 8001198:	2001      	movne	r0, #1
 800119a:	2000      	moveq	r0, #0
 800119c:	4770      	bx	lr
 800119e:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80011a2:	4770      	bx	lr
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80011a4:	4618      	mov	r0, r3
 80011a6:	4770      	bx	lr
               /* Check CAN_MSR_ERRI bit */ 
               itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
	      break;
      default :
               /* in case of error, return RESET */
              itstatus = RESET;
 80011a8:	2000      	movs	r0, #0
    itstatus  = RESET;
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
}
 80011aa:	4770      	bx	lr

080011ac <CAN_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 80011ac:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80011b0:	d035      	beq.n	800121e <CAN_ClearITPendingBit+0x72>
 80011b2:	d80c      	bhi.n	80011ce <CAN_ClearITPendingBit+0x22>
 80011b4:	2908      	cmp	r1, #8
 80011b6:	d024      	beq.n	8001202 <CAN_ClearITPendingBit+0x56>
 80011b8:	d804      	bhi.n	80011c4 <CAN_ClearITPendingBit+0x18>
 80011ba:	2901      	cmp	r1, #1
 80011bc:	d01c      	beq.n	80011f8 <CAN_ClearITPendingBit+0x4c>
 80011be:	2904      	cmp	r1, #4
 80011c0:	d01d      	beq.n	80011fe <CAN_ClearITPendingBit+0x52>
 80011c2:	4770      	bx	lr
 80011c4:	2920      	cmp	r1, #32
 80011c6:	d01f      	beq.n	8001208 <CAN_ClearITPendingBit+0x5c>
 80011c8:	2940      	cmp	r1, #64	; 0x40
 80011ca:	d01f      	beq.n	800120c <CAN_ClearITPendingBit+0x60>
 80011cc:	4770      	bx	lr
 80011ce:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80011d2:	d022      	beq.n	800121a <CAN_ClearITPendingBit+0x6e>
 80011d4:	d806      	bhi.n	80011e4 <CAN_ClearITPendingBit+0x38>
 80011d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80011da:	d020      	beq.n	800121e <CAN_ClearITPendingBit+0x72>
 80011dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80011e0:	d01d      	beq.n	800121e <CAN_ClearITPendingBit+0x72>
 80011e2:	4770      	bx	lr
 80011e4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80011e8:	d013      	beq.n	8001212 <CAN_ClearITPendingBit+0x66>
 80011ea:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80011ee:	d012      	beq.n	8001216 <CAN_ClearITPendingBit+0x6a>
 80011f0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80011f4:	d115      	bne.n	8001222 <CAN_ClearITPendingBit+0x76>
 80011f6:	e010      	b.n	800121a <CAN_ClearITPendingBit+0x6e>
  {
      case CAN_IT_TME:
              /* Clear CAN_TSR_RQCPx (rc_w1)*/
	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <CAN_ClearITPendingBit+0x78>)
 80011fa:	6083      	str	r3, [r0, #8]
	      break;
 80011fc:	4770      	bx	lr
      case CAN_IT_FF0:
              /* Clear CAN_RF0R_FULL0 (rc_w1)*/
	      CANx->RF0R = CAN_RF0R_FULL0; 
 80011fe:	2308      	movs	r3, #8
 8001200:	e000      	b.n	8001204 <CAN_ClearITPendingBit+0x58>
	      break;
      case CAN_IT_FOV0:
              /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
	      CANx->RF0R = CAN_RF0R_FOVR0; 
 8001202:	2310      	movs	r3, #16
 8001204:	60c3      	str	r3, [r0, #12]
	      break;
 8001206:	4770      	bx	lr
      case CAN_IT_FF1:
              /* Clear CAN_RF1R_FULL1 (rc_w1)*/
	      CANx->RF1R = CAN_RF1R_FULL1;  
 8001208:	2308      	movs	r3, #8
 800120a:	e000      	b.n	800120e <CAN_ClearITPendingBit+0x62>
	      break;
      case CAN_IT_FOV1:
              /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
	      CANx->RF1R = CAN_RF1R_FOVR1; 
 800120c:	2310      	movs	r3, #16
 800120e:	6103      	str	r3, [r0, #16]
	      break;
 8001210:	4770      	bx	lr
      case CAN_IT_WKU:
              /* Clear CAN_MSR_WKUI (rc_w1)*/
	      CANx->MSR = CAN_MSR_WKUI;  
 8001212:	2308      	movs	r3, #8
 8001214:	e004      	b.n	8001220 <CAN_ClearITPendingBit+0x74>
	      break;
      case CAN_IT_SLK:
              /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
	      CANx->MSR = CAN_MSR_SLAKI;   
 8001216:	2310      	movs	r3, #16
 8001218:	e002      	b.n	8001220 <CAN_ClearITPendingBit+0x74>
              /* Clear CAN_MSR_ERRI (rc_w1) */
	      CANx->MSR = CAN_MSR_ERRI; 
	      break;
      case CAN_IT_ERR:
              /*Clear LEC bits */
	      CANx->ESR = RESET; 
 800121a:	2300      	movs	r3, #0
 800121c:	6183      	str	r3, [r0, #24]
              /* Clear CAN_MSR_ERRI (rc_w1) */
	      CANx->MSR = CAN_MSR_ERRI; 
 800121e:	2304      	movs	r3, #4
 8001220:	6043      	str	r3, [r0, #4]
 8001222:	4770      	bx	lr
 8001224:	00010101 	.word	0x00010101

08001228 <CEC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void CEC_DeInit(void)
{
 8001228:	b508      	push	{r3, lr}
  /* Enable CEC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
 800122a:	2101      	movs	r1, #1
 800122c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001230:	f001 fc28 	bl	8002a84 <RCC_APB1PeriphResetCmd>
  /* Release CEC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
}
 8001234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CEC_DeInit(void)
{
  /* Enable CEC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, ENABLE);  
  /* Release CEC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CEC, DISABLE); 
 8001238:	2100      	movs	r1, #0
 800123a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800123e:	f001 bc21 	b.w	8002a84 <RCC_APB1PeriphResetCmd>

08001242 <CEC_Init>:
  *         contains the configuration information for the specified
  *         CEC peripheral.
  * @retval None
  */
void CEC_Init(CEC_InitTypeDef* CEC_InitStruct)
{
 8001242:	b510      	push	{r4, lr}
  assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
  assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
     
  /*---------------------------- CEC CFGR Configuration -----------------*/
  /* Get the CEC CFGR value */
  tmpreg = CEC->CFGR;
 8001244:	4c05      	ldr	r4, [pc, #20]	; (800125c <CEC_Init+0x1a>)
  
  /* Configure CEC: Bit Timing Error and Bit Period Error */
  tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);

  /* Write to CEC CFGR  register*/
  CEC->CFGR = tmpreg;
 8001246:	8842      	ldrh	r2, [r0, #2]
  assert_param(IS_CEC_BIT_TIMING_ERROR_MODE(CEC_InitStruct->CEC_BitTimingMode)); 
  assert_param(IS_CEC_BIT_PERIOD_ERROR_MODE(CEC_InitStruct->CEC_BitPeriodMode));
     
  /*---------------------------- CEC CFGR Configuration -----------------*/
  /* Get the CEC CFGR value */
  tmpreg = CEC->CFGR;
 8001248:	6823      	ldr	r3, [r4, #0]
  
  /* Clear BTEM and BPEM bits */
  tmpreg &= CFGR_CLEAR_Mask;
 800124a:	f003 01f3 	and.w	r1, r3, #243	; 0xf3
  
  /* Configure CEC: Bit Timing Error and Bit Period Error */
  tmpreg |= (uint16_t)(CEC_InitStruct->CEC_BitTimingMode | CEC_InitStruct->CEC_BitPeriodMode);

  /* Write to CEC CFGR  register*/
  CEC->CFGR = tmpreg;
 800124e:	8803      	ldrh	r3, [r0, #0]
 8001250:	4313      	orrs	r3, r2
 8001252:	430b      	orrs	r3, r1
 8001254:	b29b      	uxth	r3, r3
 8001256:	6023      	str	r3, [r4, #0]
 8001258:	bd10      	pop	{r4, pc}
 800125a:	bf00      	nop
 800125c:	40007800 	.word	0x40007800

08001260 <CEC_Cmd>:
void CEC_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CFGR_PE_BB = (uint32_t)NewState;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <CEC_Cmd+0x10>)
 8001262:	6018      	str	r0, [r3, #0]

  if(NewState == DISABLE)
 8001264:	b918      	cbnz	r0, 800126e <CEC_Cmd+0xe>
  {
    /* Wait until the PE bit is cleared by hardware (Idle Line detected) */
    while((CEC->CFGR & CEC_CFGR_PE) != (uint32_t)RESET)
 8001266:	4a03      	ldr	r2, [pc, #12]	; (8001274 <CEC_Cmd+0x14>)
 8001268:	6813      	ldr	r3, [r2, #0]
 800126a:	07db      	lsls	r3, r3, #31
 800126c:	d4fc      	bmi.n	8001268 <CEC_Cmd+0x8>
 800126e:	4770      	bx	lr
 8001270:	420f0000 	.word	0x420f0000
 8001274:	40007800 	.word	0x40007800

08001278 <CEC_ITConfig>:
void CEC_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CFGR_IE_BB = (uint32_t)NewState;
 8001278:	4b01      	ldr	r3, [pc, #4]	; (8001280 <CEC_ITConfig+0x8>)
 800127a:	6018      	str	r0, [r3, #0]
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	420f0004 	.word	0x420f0004

08001284 <CEC_OwnAddressConfig>:
{
  /* Check the parameters */
  assert_param(IS_CEC_ADDRESS(CEC_OwnAddress));

  /* Set the CEC own address */
  CEC->OAR = CEC_OwnAddress;
 8001284:	4b01      	ldr	r3, [pc, #4]	; (800128c <CEC_OwnAddressConfig+0x8>)
 8001286:	6058      	str	r0, [r3, #4]
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40007800 	.word	0x40007800

08001290 <CEC_SetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_CEC_PRESCALER(CEC_Prescaler));

  /* Set the  Prescaler value*/
  CEC->PRES = CEC_Prescaler;
 8001290:	4b01      	ldr	r3, [pc, #4]	; (8001298 <CEC_SetPrescaler+0x8>)
 8001292:	6098      	str	r0, [r3, #8]
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007800 	.word	0x40007800

0800129c <CEC_SendDataByte>:
  * @retval None
  */
void CEC_SendDataByte(uint8_t Data)
{  
  /* Transmit Data */
  CEC->TXD = Data ;
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <CEC_SendDataByte+0x8>)
 800129e:	6158      	str	r0, [r3, #20]
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40007800 	.word	0x40007800

080012a8 <CEC_ReceiveDataByte>:
  * @retval The received data.
  */
uint8_t CEC_ReceiveDataByte(void)
{
  /* Receive Data */
  return (uint8_t)(CEC->RXD);
 80012a8:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <CEC_ReceiveDataByte+0x8>)
 80012aa:	6998      	ldr	r0, [r3, #24]
}
 80012ac:	b2c0      	uxtb	r0, r0
 80012ae:	4770      	bx	lr
 80012b0:	40007800 	.word	0x40007800

080012b4 <CEC_StartOfMessage>:
  * @retval None
  */
void CEC_StartOfMessage(void)
{  
  /* Starts of new message */
  *(__IO uint32_t *) CSR_TSOM_BB = (uint32_t)0x1;
 80012b4:	4b01      	ldr	r3, [pc, #4]	; (80012bc <CEC_StartOfMessage+0x8>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	4770      	bx	lr
 80012bc:	420f0200 	.word	0x420f0200

080012c0 <CEC_EndOfMessageCmd>:
{   
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* The data byte will be transmitted with or without an EOM bit*/
  *(__IO uint32_t *) CSR_TEOM_BB = (uint32_t)NewState;
 80012c0:	4b01      	ldr	r3, [pc, #4]	; (80012c8 <CEC_EndOfMessageCmd+0x8>)
 80012c2:	6018      	str	r0, [r3, #0]
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	420f0204 	.word	0x420f0204

080012cc <CEC_GetFlagStatus>:
  cecreg = CEC_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  CEC_FLAG &= FLAG_Mask;
  
  if(cecreg != 0)
 80012cc:	0f02      	lsrs	r2, r0, #28
  {
    /* Flag in CEC ESR Register */
    CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
    
    /* Get the CEC ESR register address */
    cecbase += 0xC;
 80012ce:	bf14      	ite	ne
 80012d0:	4a05      	ldrne	r2, [pc, #20]	; (80012e8 <CEC_GetFlagStatus+0x1c>)
  }
  else
  {
    /* Get the CEC CSR register address */
    cecbase += 0x10;
 80012d2:	4a06      	ldreq	r2, [pc, #24]	; (80012ec <CEC_GetFlagStatus+0x20>)
  
  /* Read flag register index */
  cecreg = CEC_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  CEC_FLAG &= FLAG_Mask;
 80012d4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
  {
    /* Get the CEC CSR register address */
    cecbase += 0x10;
  }
  
  if(((*(__IO uint32_t *)cecbase) & CEC_FLAG) != (uint32_t)RESET)
 80012d8:	6812      	ldr	r2, [r2, #0]
  CEC_FLAG &= FLAG_Mask;
  
  if(cecreg != 0)
  {
    /* Flag in CEC ESR Register */
    CEC_FLAG = (uint32_t)(CEC_FLAG >> 16);
 80012da:	bf18      	it	ne
 80012dc:	0c1b      	lsrne	r3, r3, #16
    /* CEC_FLAG is reset */
    bitstatus = RESET;
  }
  
  /* Return the CEC_FLAG status */
  return  bitstatus;
 80012de:	4213      	tst	r3, r2
}
 80012e0:	bf14      	ite	ne
 80012e2:	2001      	movne	r0, #1
 80012e4:	2000      	moveq	r0, #0
 80012e6:	4770      	bx	lr
 80012e8:	4000780c 	.word	0x4000780c
 80012ec:	40007810 	.word	0x40007810

080012f0 <CEC_ClearFlag>:
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 80012f0:	43c0      	mvns	r0, r0
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <CEC_ClearFlag+0x18>)
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 80012f4:	f020 0003 	bic.w	r0, r0, #3
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_CLEAR_FLAG(CEC_FLAG));

  tmp = CEC->CSR & 0x2;
 80012f8:	6913      	ldr	r3, [r2, #16]
       
  /* Clear the selected CEC flags */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_FLAG) & 0xFFFFFFFC) | tmp);
 80012fa:	6911      	ldr	r1, [r2, #16]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	4303      	orrs	r3, r0
 8001302:	400b      	ands	r3, r1
 8001304:	6113      	str	r3, [r2, #16]
 8001306:	4770      	bx	lr
 8001308:	40007800 	.word	0x40007800

0800130c <CEC_GetITStatus>:
  
  /* Check the parameters */
   assert_param(IS_CEC_GET_IT(CEC_IT));
   
  /* Get the CEC IT enable bit status */
  enablestatus = (CEC->CFGR & (uint8_t)CEC_CFGR_IE) ;
 800130c:	4a03      	ldr	r2, [pc, #12]	; (800131c <CEC_GetITStatus+0x10>)
 800130e:	6811      	ldr	r1, [r2, #0]
  
  /* Check the status of the specified CEC interrupt */
  if (((CEC->CSR & CEC_IT) != (uint32_t)RESET) && enablestatus)
 8001310:	6913      	ldr	r3, [r2, #16]
 8001312:	4018      	ands	r0, r3
  {
    /* CEC_IT is set */
    bitstatus = SET;
 8001314:	bf18      	it	ne
 8001316:	f3c1 0040 	ubfxne	r0, r1, #1, #1
    /* CEC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the CEC_IT status */
  return  bitstatus;
}
 800131a:	4770      	bx	lr
 800131c:	40007800 	.word	0x40007800

08001320 <CEC_ClearITPendingBit>:
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 8001320:	43c0      	mvns	r0, r0
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <CEC_ClearITPendingBit+0x18>)
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 8001324:	f020 0003 	bic.w	r0, r0, #3
  uint32_t tmp = 0x0;
  
  /* Check the parameters */
  assert_param(IS_CEC_GET_IT(CEC_IT));
  
  tmp = CEC->CSR & 0x2;
 8001328:	6913      	ldr	r3, [r2, #16]
  
  /* Clear the selected CEC interrupt pending bits */
  CEC->CSR &= (uint32_t)(((~(uint32_t)CEC_IT) & 0xFFFFFFFC) | tmp);
 800132a:	6911      	ldr	r1, [r2, #16]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	4303      	orrs	r3, r0
 8001332:	400b      	ands	r3, r1
 8001334:	6113      	str	r3, [r2, #16]
 8001336:	4770      	bx	lr
 8001338:	40007800 	.word	0x40007800

0800133c <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <CRC_ResetDR+0x8>)
 800133e:	2201      	movs	r2, #1
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	4770      	bx	lr
 8001344:	40023000 	.word	0x40023000

08001348 <CRC_CalcCRC>:
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
  CRC->DR = Data;
 8001348:	4b01      	ldr	r3, [pc, #4]	; (8001350 <CRC_CalcCRC+0x8>)
 800134a:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 800134c:	6818      	ldr	r0, [r3, #0]
}
 800134e:	4770      	bx	lr
 8001350:	40023000 	.word	0x40023000

08001354 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <CRC_CalcBlockCRC+0x18>)
 8001356:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 800135a:	4288      	cmp	r0, r1
 800135c:	d003      	beq.n	8001366 <CRC_CalcBlockCRC+0x12>
  {
    CRC->DR = pBuffer[index];
 800135e:	f850 2b04 	ldr.w	r2, [r0], #4
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e7f9      	b.n	800135a <CRC_CalcBlockCRC+0x6>
  }
  return (CRC->DR);
 8001366:	4b01      	ldr	r3, [pc, #4]	; (800136c <CRC_CalcBlockCRC+0x18>)
 8001368:	6818      	ldr	r0, [r3, #0]
}
 800136a:	4770      	bx	lr
 800136c:	40023000 	.word	0x40023000

08001370 <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <CRC_GetCRC+0x8>)
 8001372:	6818      	ldr	r0, [r3, #0]
}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023000 	.word	0x40023000

0800137c <CRC_SetIDRegister>:
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
  CRC->IDR = IDValue;
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <CRC_SetIDRegister+0x8>)
 800137e:	7118      	strb	r0, [r3, #4]
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023000 	.word	0x40023000

08001388 <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 8001388:	4b01      	ldr	r3, [pc, #4]	; (8001390 <CRC_GetIDRegister+0x8>)
 800138a:	7918      	ldrb	r0, [r3, #4]
}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023000 	.word	0x40023000

08001394 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8001394:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8001396:	2101      	movs	r1, #1
 8001398:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800139c:	f001 fb72 	bl	8002a84 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
}
 80013a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DAC_DeInit(void)
{
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 80013a4:	2100      	movs	r1, #0
 80013a6:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80013aa:	f001 bb6b 	b.w	8002a84 <RCC_APB1PeriphResetCmd>

080013ae <DAC_Init>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80013ae:	f640 73fe 	movw	r3, #4094	; 0xffe
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 80013b2:	b530      	push	{r4, r5, lr}
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80013b4:	4d08      	ldr	r5, [pc, #32]	; (80013d8 <DAC_Init+0x2a>)
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80013b6:	4083      	lsls	r3, r0
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80013b8:	682a      	ldr	r2, [r5, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80013ba:	ea22 0303 	bic.w	r3, r2, r3
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80013be:	e891 0014 	ldmia.w	r1, {r2, r4}
 80013c2:	4314      	orrs	r4, r2
 80013c4:	688a      	ldr	r2, [r1, #8]
 80013c6:	4314      	orrs	r4, r2
 80013c8:	68ca      	ldr	r2, [r1, #12]
 80013ca:	4322      	orrs	r2, r4
 80013cc:	fa02 f000 	lsl.w	r0, r2, r0
 80013d0:	4318      	orrs	r0, r3
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80013d2:	6028      	str	r0, [r5, #0]
 80013d4:	bd30      	pop	{r4, r5, pc}
 80013d6:	bf00      	nop
 80013d8:	40007400 	.word	0x40007400

080013dc <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 80013dc:	2300      	movs	r3, #0
 80013de:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 80013e0:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 80013e2:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80013e4:	60c3      	str	r3, [r0, #12]
 80013e6:	4770      	bx	lr

080013e8 <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <DAC_Cmd+0x1c>)
 80013ea:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013ec:	b119      	cbz	r1, 80013f6 <DAC_Cmd+0xe>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80013ee:	6811      	ldr	r1, [r2, #0]
 80013f0:	4083      	lsls	r3, r0
 80013f2:	430b      	orrs	r3, r1
 80013f4:	e003      	b.n	80013fe <DAC_Cmd+0x16>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
 80013f6:	6811      	ldr	r1, [r2, #0]
 80013f8:	4083      	lsls	r3, r0
 80013fa:	ea21 0303 	bic.w	r3, r1, r3
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40007400 	.word	0x40007400

08001408 <DAC_DMACmd>:
  * @param  NewState: new state of the selected DAC channel DMA request.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <DAC_DMACmd+0x1c>)
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800140e:	b119      	cbz	r1, 8001418 <DAC_DMACmd+0x10>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8001410:	6811      	ldr	r1, [r2, #0]
 8001412:	4083      	lsls	r3, r0
 8001414:	430b      	orrs	r3, r1
 8001416:	e003      	b.n	8001420 <DAC_DMACmd+0x18>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
 8001418:	6811      	ldr	r1, [r2, #0]
 800141a:	4083      	lsls	r3, r0
 800141c:	ea21 0303 	bic.w	r3, r1, r3
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4770      	bx	lr
 8001424:	40007400 	.word	0x40007400

08001428 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <DAC_SoftwareTriggerCmd+0x1c>)
 800142a:	0900      	lsrs	r0, r0, #4
 800142c:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800142e:	b119      	cbz	r1, 8001438 <DAC_SoftwareTriggerCmd+0x10>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8001430:	6851      	ldr	r1, [r2, #4]
 8001432:	4083      	lsls	r3, r0
 8001434:	430b      	orrs	r3, r1
 8001436:	e003      	b.n	8001440 <DAC_SoftwareTriggerCmd+0x18>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8001438:	6851      	ldr	r1, [r2, #4]
 800143a:	4083      	lsls	r3, r0
 800143c:	ea21 0303 	bic.w	r3, r1, r3
 8001440:	6053      	str	r3, [r2, #4]
 8001442:	4770      	bx	lr
 8001444:	40007400 	.word	0x40007400

08001448 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <DAC_DualSoftwareTriggerCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
 800144a:	685a      	ldr	r2, [r3, #4]
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800144c:	b110      	cbz	r0, 8001454 <DAC_DualSoftwareTriggerCmd+0xc>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
 800144e:	f042 0203 	orr.w	r2, r2, #3
 8001452:	e001      	b.n	8001458 <DAC_DualSoftwareTriggerCmd+0x10>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8001454:	f022 0203 	bic.w	r2, r2, #3
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	4770      	bx	lr
 800145c:	40007400 	.word	0x40007400

08001460 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <DAC_WaveGenerationCmd+0x18>)
 8001462:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001464:	b112      	cbz	r2, 800146c <DAC_WaveGenerationCmd+0xc>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4311      	orrs	r1, r2
 800146a:	e002      	b.n	8001472 <DAC_WaveGenerationCmd+0x12>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	ea22 0101 	bic.w	r1, r2, r1
 8001472:	6019      	str	r1, [r3, #0]
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40007400 	.word	0x40007400

0800147c <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800147c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <DAC_SetChannel1Data+0x1c>)
 8001484:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001486:	9b01      	ldr	r3, [sp, #4]
 8001488:	3308      	adds	r3, #8
 800148a:	4418      	add	r0, r3
 800148c:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800148e:	9b01      	ldr	r3, [sp, #4]
 8001490:	6019      	str	r1, [r3, #0]
}
 8001492:	b002      	add	sp, #8
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40007400 	.word	0x40007400

0800149c <DAC_SetChannel2Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 800149c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <DAC_SetChannel2Data+0x1c>)
 80014a4:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 80014a6:	9b01      	ldr	r3, [sp, #4]
 80014a8:	3314      	adds	r3, #20
 80014aa:	4418      	add	r0, r3
 80014ac:	9001      	str	r0, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80014ae:	9b01      	ldr	r3, [sp, #4]
 80014b0:	6019      	str	r1, [r3, #0]
}
 80014b2:	b002      	add	sp, #8
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40007400 	.word	0x40007400

080014bc <DAC_SetDualChannelData>:
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 80014bc:	2808      	cmp	r0, #8
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <DAC_SetDualChannelData+0x14>)
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 80014c0:	bf0c      	ite	eq
 80014c2:	ea42 2201 	orreq.w	r2, r2, r1, lsl #8
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 80014c6:	ea42 4201 	orrne.w	r2, r2, r1, lsl #16
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80014ca:	50c2      	str	r2, [r0, r3]
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40007420 	.word	0x40007420

080014d4 <DAC_GetDataOutputValue>:
  *     @arg DAC_Channel_1: DAC Channel1 selected
  *     @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 80014d4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <DAC_GetDataOutputValue+0x20>)
 80014dc:	9301      	str	r3, [sp, #4]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 80014de:	9b01      	ldr	r3, [sp, #4]
 80014e0:	332c      	adds	r3, #44	; 0x2c
 80014e2:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 80014e6:	9001      	str	r0, [sp, #4]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 80014e8:	9b01      	ldr	r3, [sp, #4]
 80014ea:	6818      	ldr	r0, [r3, #0]
}
 80014ec:	b280      	uxth	r0, r0
 80014ee:	b002      	add	sp, #8
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40007400 	.word	0x40007400

080014f8 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80014f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80014fc:	6802      	ldr	r2, [r0, #0]
 80014fe:	4013      	ands	r3, r2
 8001500:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8001506:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8001508:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 800150a:	60c3      	str	r3, [r0, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <DMA_DeInit+0xb8>)
 800150e:	4298      	cmp	r0, r3
 8001510:	d101      	bne.n	8001516 <DMA_DeInit+0x1e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8001512:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <DMA_DeInit+0xbc>)
 8001514:	e027      	b.n	8001566 <DMA_DeInit+0x6e>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <DMA_DeInit+0xc0>)
 8001518:	4298      	cmp	r0, r3
 800151a:	d101      	bne.n	8001520 <DMA_DeInit+0x28>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 800151c:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <DMA_DeInit+0xbc>)
 800151e:	e02a      	b.n	8001576 <DMA_DeInit+0x7e>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <DMA_DeInit+0xc4>)
 8001522:	4298      	cmp	r0, r3
 8001524:	d101      	bne.n	800152a <DMA_DeInit+0x32>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8001526:	4a23      	ldr	r2, [pc, #140]	; (80015b4 <DMA_DeInit+0xbc>)
 8001528:	e02d      	b.n	8001586 <DMA_DeInit+0x8e>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <DMA_DeInit+0xc8>)
 800152c:	4298      	cmp	r0, r3
 800152e:	d101      	bne.n	8001534 <DMA_DeInit+0x3c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8001530:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <DMA_DeInit+0xbc>)
 8001532:	e030      	b.n	8001596 <DMA_DeInit+0x9e>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <DMA_DeInit+0xcc>)
 8001536:	4298      	cmp	r0, r3
 8001538:	d101      	bne.n	800153e <DMA_DeInit+0x46>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <DMA_DeInit+0xbc>)
 800153c:	e033      	b.n	80015a6 <DMA_DeInit+0xae>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <DMA_DeInit+0xd0>)
 8001540:	4298      	cmp	r0, r3
 8001542:	d104      	bne.n	800154e <DMA_DeInit+0x56>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <DMA_DeInit+0xbc>)
 8001546:	6853      	ldr	r3, [r2, #4]
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	e02e      	b.n	80015ac <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <DMA_DeInit+0xd4>)
 8001550:	4298      	cmp	r0, r3
 8001552:	d104      	bne.n	800155e <DMA_DeInit+0x66>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <DMA_DeInit+0xbc>)
 8001556:	6853      	ldr	r3, [r2, #4]
 8001558:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800155c:	e026      	b.n	80015ac <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <DMA_DeInit+0xd8>)
 8001560:	4298      	cmp	r0, r3
 8001562:	d104      	bne.n	800156e <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <DMA_DeInit+0xdc>)
 8001566:	6853      	ldr	r3, [r2, #4]
 8001568:	f043 030f 	orr.w	r3, r3, #15
 800156c:	e01e      	b.n	80015ac <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <DMA_DeInit+0xe0>)
 8001570:	4298      	cmp	r0, r3
 8001572:	d104      	bne.n	800157e <DMA_DeInit+0x86>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <DMA_DeInit+0xdc>)
 8001576:	6853      	ldr	r3, [r2, #4]
 8001578:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800157c:	e016      	b.n	80015ac <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <DMA_DeInit+0xe4>)
 8001580:	4298      	cmp	r0, r3
 8001582:	d104      	bne.n	800158e <DMA_DeInit+0x96>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <DMA_DeInit+0xdc>)
 8001586:	6853      	ldr	r3, [r2, #4]
 8001588:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 800158c:	e00e      	b.n	80015ac <DMA_DeInit+0xb4>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <DMA_DeInit+0xe8>)
 8001590:	4298      	cmp	r0, r3
 8001592:	d104      	bne.n	800159e <DMA_DeInit+0xa6>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <DMA_DeInit+0xdc>)
 8001596:	6853      	ldr	r3, [r2, #4]
 8001598:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800159c:	e006      	b.n	80015ac <DMA_DeInit+0xb4>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <DMA_DeInit+0xec>)
 80015a0:	4298      	cmp	r0, r3
 80015a2:	d104      	bne.n	80015ae <DMA_DeInit+0xb6>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <DMA_DeInit+0xdc>)
 80015a6:	6853      	ldr	r3, [r2, #4]
 80015a8:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 80015ac:	6053      	str	r3, [r2, #4]
 80015ae:	4770      	bx	lr
 80015b0:	40020008 	.word	0x40020008
 80015b4:	40020000 	.word	0x40020000
 80015b8:	4002001c 	.word	0x4002001c
 80015bc:	40020030 	.word	0x40020030
 80015c0:	40020044 	.word	0x40020044
 80015c4:	40020058 	.word	0x40020058
 80015c8:	4002006c 	.word	0x4002006c
 80015cc:	40020080 	.word	0x40020080
 80015d0:	40020408 	.word	0x40020408
 80015d4:	40020400 	.word	0x40020400
 80015d8:	4002041c 	.word	0x4002041c
 80015dc:	40020430 	.word	0x40020430
 80015e0:	40020444 	.word	0x40020444
 80015e4:	40020458 	.word	0x40020458

080015e8 <DMA_Init>:
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80015e8:	6a0a      	ldr	r2, [r1, #32]
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80015ea:	b510      	push	{r4, lr}
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80015ec:	688c      	ldr	r4, [r1, #8]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80015ee:	6803      	ldr	r3, [r0, #0]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80015f0:	4314      	orrs	r4, r2
 80015f2:	690a      	ldr	r2, [r1, #16]

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80015f4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80015f8:	4314      	orrs	r4, r2
 80015fa:	694a      	ldr	r2, [r1, #20]

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80015fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8001600:	4314      	orrs	r4, r2
 8001602:	698a      	ldr	r2, [r1, #24]
 8001604:	4314      	orrs	r4, r2
 8001606:	69ca      	ldr	r2, [r1, #28]
 8001608:	4314      	orrs	r4, r2
 800160a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800160c:	4314      	orrs	r4, r2
 800160e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001610:	4322      	orrs	r2, r4
 8001612:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8001614:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8001616:	68cb      	ldr	r3, [r1, #12]
 8001618:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800161a:	680b      	ldr	r3, [r1, #0]
 800161c:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 800161e:	684b      	ldr	r3, [r1, #4]
 8001620:	60c3      	str	r3, [r0, #12]
 8001622:	bd10      	pop	{r4, pc}

08001624 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	6003      	str	r3, [r0, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 8001628:	6043      	str	r3, [r0, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 800162a:	6083      	str	r3, [r0, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800162c:	60c3      	str	r3, [r0, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800162e:	6103      	str	r3, [r0, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8001630:	6143      	str	r3, [r0, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001632:	6183      	str	r3, [r0, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001634:	61c3      	str	r3, [r0, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8001636:	6203      	str	r3, [r0, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001638:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 800163a:	6283      	str	r3, [r0, #40]	; 0x28
 800163c:	4770      	bx	lr

0800163e <DMA_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800163e:	b119      	cbz	r1, 8001648 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8001640:	6803      	ldr	r3, [r0, #0]
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	e003      	b.n	8001650 <DMA_Cmd+0x12>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8001648:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800164c:	6802      	ldr	r2, [r0, #0]
 800164e:	4013      	ands	r3, r2
 8001650:	6003      	str	r3, [r0, #0]
 8001652:	4770      	bx	lr

08001654 <DMA_ITConfig>:
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001654:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001656:	b10a      	cbz	r2, 800165c <DMA_ITConfig+0x8>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001658:	4319      	orrs	r1, r3
 800165a:	e001      	b.n	8001660 <DMA_ITConfig+0xc>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 800165c:	ea23 0101 	bic.w	r1, r3, r1
 8001660:	6001      	str	r1, [r0, #0]
 8001662:	4770      	bx	lr

08001664 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8001664:	6041      	str	r1, [r0, #4]
 8001666:	4770      	bx	lr

08001668 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8001668:	6840      	ldr	r0, [r0, #4]
}
 800166a:	b280      	uxth	r0, r0
 800166c:	4770      	bx	lr

0800166e <DMA_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMA */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 800166e:	00c3      	lsls	r3, r0, #3
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8001670:	bf4c      	ite	mi
 8001672:	4b04      	ldrmi	r3, [pc, #16]	; (8001684 <DMA_GetITStatus+0x16>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8001674:	4b04      	ldrpl	r3, [pc, #16]	; (8001688 <DMA_GetITStatus+0x1a>)
 8001676:	681b      	ldr	r3, [r3, #0]
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DMA_IT status */
  return  bitstatus;
 8001678:	4203      	tst	r3, r0
}
 800167a:	bf14      	ite	ne
 800167c:	2001      	movne	r0, #1
 800167e:	2000      	moveq	r0, #0
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40020400 	.word	0x40020400
 8001688:	40020000 	.word	0x40020000

0800168c <DMA_GetFlagStatus>:
 800168c:	f7ff bfef 	b.w	800166e <DMA_GetITStatus>

08001690 <DMA_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 8001690:	00c3      	lsls	r3, r0, #3
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 8001692:	bf4c      	ite	mi
 8001694:	4b01      	ldrmi	r3, [pc, #4]	; (800169c <DMA_ClearITPendingBit+0xc>)
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 8001696:	4b02      	ldrpl	r3, [pc, #8]	; (80016a0 <DMA_ClearITPendingBit+0x10>)
 8001698:	6058      	str	r0, [r3, #4]
 800169a:	4770      	bx	lr
 800169c:	40020400 	.word	0x40020400
 80016a0:	40020000 	.word	0x40020000

080016a4 <DMA_ClearFlag>:
 80016a4:	f7ff bff4 	b.w	8001690 <DMA_ClearITPendingBit>

080016a8 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <EXTI_DeInit+0x14>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80016ae:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
 80016b0:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
 80016b2:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
 80016b4:	4a02      	ldr	r2, [pc, #8]	; (80016c0 <EXTI_DeInit+0x18>)
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40010400 	.word	0x40010400
 80016c0:	000fffff 	.word	0x000fffff

080016c4 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80016c4:	7982      	ldrb	r2, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80016c6:	b570      	push	{r4, r5, r6, lr}
 80016c8:	6801      	ldr	r1, [r0, #0]
 80016ca:	7903      	ldrb	r3, [r0, #4]
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80016cc:	b342      	cbz	r2, 8001720 <EXTI_Init+0x5c>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80016ce:	43ce      	mvns	r6, r1
 80016d0:	4a18      	ldr	r2, [pc, #96]	; (8001734 <EXTI_Init+0x70>)
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80016d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80016d6:	6815      	ldr	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80016d8:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80016dc:	4035      	ands	r5, r6
 80016de:	6015      	str	r5, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80016e0:	6854      	ldr	r4, [r2, #4]
 80016e2:	4034      	ands	r4, r6
 80016e4:	6054      	str	r4, [r2, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80016e6:	681c      	ldr	r4, [r3, #0]
 80016e8:	4321      	orrs	r1, r4
 80016ea:	6019      	str	r1, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80016ec:	6801      	ldr	r1, [r0, #0]
 80016ee:	6894      	ldr	r4, [r2, #8]
 80016f0:	43cd      	mvns	r5, r1
 80016f2:	402c      	ands	r4, r5
 80016f4:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80016f6:	68d3      	ldr	r3, [r2, #12]
 80016f8:	402b      	ands	r3, r5
 80016fa:	60d3      	str	r3, [r2, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80016fc:	7943      	ldrb	r3, [r0, #5]
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d106      	bne.n	8001710 <EXTI_Init+0x4c>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8001702:	6893      	ldr	r3, [r2, #8]
 8001704:	430b      	orrs	r3, r1
 8001706:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8001708:	68d3      	ldr	r3, [r2, #12]
 800170a:	4319      	orrs	r1, r3
 800170c:	60d1      	str	r1, [r2, #12]
 800170e:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001710:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001714:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4311      	orrs	r1, r2
 800171c:	6019      	str	r1, [r3, #0]
 800171e:	bd70      	pop	{r4, r5, r6, pc}
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001720:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001724:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	ea22 0201 	bic.w	r2, r2, r1
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	bd70      	pop	{r4, r5, r6, pc}
 8001732:	bf00      	nop
 8001734:	40010400 	.word	0x40010400

08001738 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8001738:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800173a:	220c      	movs	r2, #12
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800173c:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800173e:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8001740:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8001742:	7183      	strb	r3, [r0, #6]
 8001744:	4770      	bx	lr

08001746 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8001746:	4a02      	ldr	r2, [pc, #8]	; (8001750 <EXTI_GenerateSWInterrupt+0xa>)
 8001748:	6913      	ldr	r3, [r2, #16]
 800174a:	4318      	orrs	r0, r3
 800174c:	6110      	str	r0, [r2, #16]
 800174e:	4770      	bx	lr
 8001750:	40010400 	.word	0x40010400

08001754 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <EXTI_GetFlagStatus+0x10>)
 8001756:	695b      	ldr	r3, [r3, #20]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001758:	4203      	tst	r3, r0
}
 800175a:	bf14      	ite	ne
 800175c:	2001      	movne	r0, #1
 800175e:	2000      	moveq	r0, #0
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40010400 	.word	0x40010400

08001768 <EXTI_ClearFlag>:
 8001768:	4b01      	ldr	r3, [pc, #4]	; (8001770 <EXTI_ClearFlag+0x8>)
 800176a:	6158      	str	r0, [r3, #20]
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40010400 	.word	0x40010400

08001774 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <EXTI_GetITStatus+0x18>)
 8001776:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4003      	ands	r3, r0
 800177c:	d004      	beq.n	8001788 <EXTI_GetITStatus+0x14>
  {
    bitstatus = SET;
 800177e:	4202      	tst	r2, r0
 8001780:	bf14      	ite	ne
 8001782:	2001      	movne	r0, #1
 8001784:	2000      	moveq	r0, #0
 8001786:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 8001788:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 800178a:	4770      	bx	lr
 800178c:	40010400 	.word	0x40010400

08001790 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001790:	4b01      	ldr	r3, [pc, #4]	; (8001798 <EXTI_ClearITPendingBit+0x8>)
 8001792:	6158      	str	r0, [r3, #20]
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40010400 	.word	0x40010400

0800179c <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 800179c:	4a03      	ldr	r2, [pc, #12]	; (80017ac <FLASH_SetLatency+0x10>)
 800179e:	6813      	ldr	r3, [r2, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 80017a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
  tmpreg |= FLASH_Latency;
 80017a4:	4318      	orrs	r0, r3
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 80017a6:	6010      	str	r0, [r2, #0]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40022000 	.word	0x40022000

080017b0 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <FLASH_HalfCycleAccessCmd+0x14>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	f022 0208 	bic.w	r2, r2, #8
 80017b8:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4310      	orrs	r0, r2
 80017be:	6018      	str	r0, [r3, #0]
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000

080017c8 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <FLASH_PrefetchBufferCmd+0x14>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f022 0210 	bic.w	r2, r2, #16
 80017d0:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4310      	orrs	r0, r2
 80017d6:	6018      	str	r0, [r3, #0]
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000

080017e0 <FLASH_UnlockBank1>:
  * @retval None
  */
void FLASH_UnlockBank1(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <FLASH_UnlockBank1+0x10>)
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <FLASH_UnlockBank1+0x14>)
 80017e4:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 80017e6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000
 80017f4:	45670123 	.word	0x45670123

080017f8 <FLASH_Unlock>:
 80017f8:	f7ff bff2 	b.w	80017e0 <FLASH_UnlockBank1>

080017fc <FLASH_LockBank1>:
  * @retval None
  */
void FLASH_LockBank1(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 80017fc:	4a02      	ldr	r2, [pc, #8]	; (8001808 <FLASH_LockBank1+0xc>)
 80017fe:	6913      	ldr	r3, [r2, #16]
 8001800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001804:	6113      	str	r3, [r2, #16]
 8001806:	4770      	bx	lr
 8001808:	40022000 	.word	0x40022000

0800180c <FLASH_Lock>:
 800180c:	f7ff bff6 	b.w	80017fc <FLASH_LockBank1>

08001810 <FLASH_GetUserOptionByte>:
  *         and RST_STDBY(Bit2).
  */
uint32_t FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (uint32_t)(FLASH->OBR >> 2);
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <FLASH_GetUserOptionByte+0x8>)
 8001812:	69d8      	ldr	r0, [r3, #28]
}
 8001814:	0880      	lsrs	r0, r0, #2
 8001816:	4770      	bx	lr
 8001818:	40022000 	.word	0x40022000

0800181c <FLASH_GetWriteProtectionOptionByte>:
  * @retval The FLASH Write Protection  Option Bytes Register value
  */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Flash write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <FLASH_GetWriteProtectionOptionByte+0x8>)
 800181e:	6a18      	ldr	r0, [r3, #32]
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000

08001828 <FLASH_GetReadOutProtectionStatus>:
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;
  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 8001828:	4b02      	ldr	r3, [pc, #8]	; (8001834 <FLASH_GetReadOutProtectionStatus+0xc>)
 800182a:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 800182c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000

08001838 <FLASH_GetPrefetchBufferStatus>:
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <FLASH_GetPrefetchBufferStatus+0xc>)
 800183a:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 800183c:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40022000 	.word	0x40022000

08001848 <FLASH_ITConfig>:
  * @param  NewState: new state of the specified Flash interrupts.
  *   This parameter can be: ENABLE or DISABLE.      
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <FLASH_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800184a:	691a      	ldr	r2, [r3, #16]
#else
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800184c:	b109      	cbz	r1, 8001852 <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800184e:	4310      	orrs	r0, r2
 8001850:	e001      	b.n	8001856 <FLASH_ITConfig+0xe>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8001852:	ea22 0000 	bic.w	r0, r2, r0
 8001856:	6118      	str	r0, [r3, #16]
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <FLASH_GetFlagStatus>:
    }
  }
#else
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8001860:	2801      	cmp	r0, #1
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <FLASH_GetFlagStatus+0x1c>)
 8001864:	d103      	bne.n	800186e <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 8001866:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8001868:	f000 0001 	and.w	r0, r0, #1
 800186c:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800186e:	68db      	ldr	r3, [r3, #12]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8001870:	4218      	tst	r0, r3
 8001872:	bf14      	ite	ne
 8001874:	2001      	movne	r0, #1
 8001876:	2000      	moveq	r0, #0
  }
#endif /* STM32F10X_XL */

  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40022000 	.word	0x40022000

08001880 <FLASH_ClearFlag>:
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8001880:	4b01      	ldr	r3, [pc, #4]	; (8001888 <FLASH_ClearFlag+0x8>)
 8001882:	60d8      	str	r0, [r3, #12]
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40022000 	.word	0x40022000

0800188c <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <FLASH_GetStatus+0x24>)
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	07d1      	lsls	r1, r2, #31
 8001892:	d409      	bmi.n	80018a8 <FLASH_GetStatus+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	0752      	lsls	r2, r2, #29
 8001898:	d408      	bmi.n	80018ac <FLASH_GetStatus+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80018a0:	bf14      	ite	ne
 80018a2:	2003      	movne	r0, #3
 80018a4:	2004      	moveq	r0, #4
 80018a6:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80018a8:	2001      	movs	r0, #1
 80018aa:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 80018ac:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80018ae:	4770      	bx	lr
 80018b0:	40022000 	.word	0x40022000

080018b4 <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <FLASH_GetBank1Status+0x24>)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	07d1      	lsls	r1, r2, #31
 80018ba:	d409      	bmi.n	80018d0 <FLASH_GetBank1Status+0x1c>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	0752      	lsls	r2, r2, #29
 80018c0:	d408      	bmi.n	80018d4 <FLASH_GetBank1Status+0x20>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f013 0f10 	tst.w	r3, #16
      {
        flashstatus = FLASH_ERROR_WRP;
      }
      else
      {
        flashstatus = FLASH_COMPLETE;
 80018c8:	bf14      	ite	ne
 80018ca:	2003      	movne	r0, #3
 80018cc:	2004      	moveq	r0, #4
 80018ce:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80018d0:	2001      	movs	r0, #1
 80018d2:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 80018d4:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80018d6:	4770      	bx	lr
 80018d8:	40022000 	.word	0x40022000

080018dc <FLASH_WaitForLastBank1Operation>:
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
{ 
 80018dc:	b510      	push	{r4, lr}
 80018de:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 80018e0:	f7ff ffe8 	bl	80018b4 <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80018e4:	2801      	cmp	r0, #1
 80018e6:	d106      	bne.n	80018f6 <FLASH_WaitForLastBank1Operation+0x1a>
 80018e8:	b11c      	cbz	r4, 80018f2 <FLASH_WaitForLastBank1Operation+0x16>
  {
    status = FLASH_GetBank1Status();
 80018ea:	f7ff ffe3 	bl	80018b4 <FLASH_GetBank1Status>
    Timeout--;
 80018ee:	3c01      	subs	r4, #1
 80018f0:	e7f8      	b.n	80018e4 <FLASH_WaitForLastBank1Operation+0x8>
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 80018f2:	2005      	movs	r0, #5
 80018f4:	bd10      	pop	{r4, pc}
 80018f6:	2c00      	cmp	r4, #0
 80018f8:	bf08      	it	eq
 80018fa:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 80018fc:	bd10      	pop	{r4, pc}

080018fe <FLASH_EraseAllBank1Pages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllBank1Pages(void)
{
 80018fe:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 8001900:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001904:	f7ff ffea 	bl	80018dc <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001908:	2804      	cmp	r0, #4
 800190a:	d111      	bne.n	8001930 <FLASH_EraseAllBank1Pages+0x32>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800190c:	4c09      	ldr	r4, [pc, #36]	; (8001934 <FLASH_EraseAllBank1Pages+0x36>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 800190e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8001912:	6923      	ldr	r3, [r4, #16]
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 800191a:	6923      	ldr	r3, [r4, #16]
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 8001922:	f7ff ffdb 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    
    /* Disable the MER Bit */
    FLASH->CR &= CR_MER_Reset;
 8001926:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 800192a:	6922      	ldr	r2, [r4, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	6123      	str	r3, [r4, #16]
  }    
  /* Return the Erase Status */
  return status;
}
 8001930:	bd10      	pop	{r4, pc}
 8001932:	bf00      	nop
 8001934:	40022000 	.word	0x40022000

08001938 <FLASH_EraseAllPages>:
 8001938:	f7ff bfe1 	b.w	80018fe <FLASH_EraseAllBank1Pages>

0800193c <FLASH_UserOptionByteConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800193e:	4d13      	ldr	r5, [pc, #76]	; (800198c <FLASH_UserOptionByteConfig+0x50>)
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <FLASH_UserOptionByteConfig+0x54>)
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 8001942:	4604      	mov	r4, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8001944:	60ab      	str	r3, [r5, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8001946:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 800194a:	60ab      	str	r3, [r5, #8]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800194c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 8001950:	460f      	mov	r7, r1
 8001952:	4616      	mov	r6, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001954:	f7ff ffc2 	bl	80018dc <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001958:	2804      	cmp	r0, #4
 800195a:	d116      	bne.n	800198a <FLASH_UserOptionByteConfig+0x4e>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800195c:	692b      	ldr	r3, [r5, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 800195e:	f044 04f8 	orr.w	r4, r4, #248	; 0xf8
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001962:	f043 0310 	orr.w	r3, r3, #16
 8001966:	612b      	str	r3, [r5, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8001968:	ea47 0104 	orr.w	r1, r7, r4
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <FLASH_UserOptionByteConfig+0x58>)
 800196e:	ea46 0201 	orr.w	r2, r6, r1
 8001972:	805a      	strh	r2, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001974:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001978:	f7ff ffb0 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    if(status != FLASH_TIMEOUT)
 800197c:	2805      	cmp	r0, #5
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800197e:	bf1f      	itttt	ne
 8001980:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001984:	692a      	ldrne	r2, [r5, #16]
 8001986:	4013      	andne	r3, r2
 8001988:	612b      	strne	r3, [r5, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 800198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800198c:	40022000 	.word	0x40022000
 8001990:	45670123 	.word	0x45670123
 8001994:	1ffff800 	.word	0x1ffff800

08001998 <FLASH_ReadOutProtection>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8001998:	b538      	push	{r3, r4, r5, lr}
 800199a:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800199c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80019a0:	f7ff ff9c 	bl	80018dc <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 80019a4:	2804      	cmp	r0, #4
 80019a6:	d136      	bne.n	8001a16 <FLASH_ReadOutProtection+0x7e>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80019a8:	4c1b      	ldr	r4, [pc, #108]	; (8001a18 <FLASH_ReadOutProtection+0x80>)
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <FLASH_ReadOutProtection+0x84>)
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80019ac:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80019b0:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80019b2:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80019b6:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 80019b8:	6923      	ldr	r3, [r4, #16]
 80019ba:	f043 0320 	orr.w	r3, r3, #32
 80019be:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80019c0:	6923      	ldr	r3, [r4, #16]
 80019c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c6:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80019c8:	f7ff ff88 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    if(status == FLASH_COMPLETE)
 80019cc:	2804      	cmp	r0, #4
 80019ce:	d11b      	bne.n	8001a08 <FLASH_ReadOutProtection+0x70>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80019d0:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80019d4:	6922      	ldr	r2, [r4, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	6123      	str	r3, [r4, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80019da:	6923      	ldr	r3, [r4, #16]
 80019dc:	f043 0310 	orr.w	r3, r3, #16
 80019e0:	6123      	str	r3, [r4, #16]
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <FLASH_ReadOutProtection+0x88>)
      if(NewState != DISABLE)
 80019e4:	b10d      	cbz	r5, 80019ea <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 80019e6:	2200      	movs	r2, #0
 80019e8:	e000      	b.n	80019ec <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 80019ea:	22a5      	movs	r2, #165	; 0xa5
 80019ec:	801a      	strh	r2, [r3, #0]
      }
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80019ee:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80019f2:	f7ff ff73 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    
      if(status != FLASH_TIMEOUT)
 80019f6:	2805      	cmp	r0, #5
 80019f8:	d00d      	beq.n	8001a16 <FLASH_ReadOutProtection+0x7e>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80019fa:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80019fe:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <FLASH_ReadOutProtection+0x80>)
 8001a00:	6911      	ldr	r1, [r2, #16]
 8001a02:	400b      	ands	r3, r1
 8001a04:	6113      	str	r3, [r2, #16]
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 8001a08:	2805      	cmp	r0, #5
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 8001a0a:	bf1f      	itttt	ne
 8001a0c:	f641 73df 	movwne	r3, #8159	; 0x1fdf
 8001a10:	6922      	ldrne	r2, [r4, #16]
 8001a12:	4013      	andne	r3, r2
 8001a14:	6123      	strne	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;       
}
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	45670123 	.word	0x45670123
 8001a20:	1ffff800 	.word	0x1ffff800

08001a24 <FLASH_EnableWriteProtection>:
  *     @arg FLASH_WRProt_AllPages
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
{
 8001a24:	b510      	push	{r4, lr}
 8001a26:	4604      	mov	r4, r0
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a2c:	f7ff ff56 	bl	80018dc <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001a30:	2804      	cmp	r0, #4
 8001a32:	d143      	bne.n	8001abc <FLASH_EnableWriteProtection+0x98>
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
 8001a34:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <FLASH_EnableWriteProtection+0x9c>)
 8001a38:	4a22      	ldr	r2, [pc, #136]	; (8001ac4 <FLASH_EnableWriteProtection+0xa0>)
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 8001a3a:	b2e1      	uxtb	r1, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001a3c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001a3e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001a42:	609a      	str	r2, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 8001a44:	691a      	ldr	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 8001a46:	29ff      	cmp	r1, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 8001a48:	f042 0210 	orr.w	r2, r2, #16
 8001a4c:	611a      	str	r2, [r3, #16]
    if(WRP0_Data != 0xFF)
 8001a4e:	d104      	bne.n	8001a5a <FLASH_EnableWriteProtection+0x36>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 8001a50:	f3c4 2307 	ubfx	r3, r4, #8, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001a54:	2bff      	cmp	r3, #255	; 0xff
 8001a56:	d109      	bne.n	8001a6c <FLASH_EnableWriteProtection+0x48>
 8001a58:	e010      	b.n	8001a7c <FLASH_EnableWriteProtection+0x58>
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 8001a60:	8119      	strh	r1, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a62:	f7ff ff3b 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8001a66:	2804      	cmp	r0, #4
 8001a68:	d120      	bne.n	8001aac <FLASH_EnableWriteProtection+0x88>
 8001a6a:	e7f1      	b.n	8001a50 <FLASH_EnableWriteProtection+0x2c>
    {
      OB->WRP1 = WRP1_Data;
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a6e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8001a72:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a74:	f7ff ff32 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8001a78:	2804      	cmp	r0, #4
 8001a7a:	d117      	bne.n	8001aac <FLASH_EnableWriteProtection+0x88>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 8001a7c:	f3c4 4307 	ubfx	r3, r4, #16, #8
      OB->WRP1 = WRP1_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d007      	beq.n	8001a94 <FLASH_EnableWriteProtection+0x70>
    {
      OB->WRP2 = WRP2_Data;
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8001a8a:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001a8c:	f7ff ff26 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8001a90:	2804      	cmp	r0, #4
 8001a92:	d10b      	bne.n	8001aac <FLASH_EnableWriteProtection+0x88>
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8001a94:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8001a96:	2cff      	cmp	r4, #255	; 0xff
 8001a98:	d101      	bne.n	8001a9e <FLASH_EnableWriteProtection+0x7a>
 8001a9a:	2004      	movs	r0, #4
 8001a9c:	e008      	b.n	8001ab0 <FLASH_EnableWriteProtection+0x8c>
    {
      OB->WRP3 = WRP3_Data;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <FLASH_EnableWriteProtection+0xa4>)
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 8001aa0:	b2a4      	uxth	r4, r4
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 8001aa2:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001aa4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001aa8:	f7ff ff18 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    }
          
    if(status != FLASH_TIMEOUT)
 8001aac:	2805      	cmp	r0, #5
 8001aae:	d005      	beq.n	8001abc <FLASH_EnableWriteProtection+0x98>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8001ab0:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8001ab4:	4a02      	ldr	r2, [pc, #8]	; (8001ac0 <FLASH_EnableWriteProtection+0x9c>)
 8001ab6:	6911      	ldr	r1, [r2, #16]
 8001ab8:	400b      	ands	r3, r1
 8001aba:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 8001abc:	bd10      	pop	{r4, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	45670123 	.word	0x45670123
 8001ac8:	1ffff800 	.word	0x1ffff800

08001acc <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	4606      	mov	r6, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 8001ad4:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001ad6:	f7ff ff01 	bl	80018dc <FLASH_WaitForLastBank1Operation>

  if(status == FLASH_COMPLETE)
 8001ada:	2804      	cmp	r0, #4
 8001adc:	d116      	bne.n	8001b0c <FLASH_ProgramOptionByteData+0x40>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001ade:	4c0c      	ldr	r4, [pc, #48]	; (8001b10 <FLASH_ProgramOptionByteData+0x44>)
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <FLASH_ProgramOptionByteData+0x48>)
    FLASH->OPTKEYR = FLASH_KEY2;
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(__IO uint16_t*)Address = Data;
 8001ae2:	b2ad      	uxth	r5, r5
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001ae4:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001ae6:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001aea:	60a3      	str	r3, [r4, #8]
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001aec:	6923      	ldr	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001aee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8001af8:	8035      	strh	r5, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001afa:	f7ff feef 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    if(status != FLASH_TIMEOUT)
 8001afe:	2805      	cmp	r0, #5
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 8001b00:	bf1f      	itttt	ne
 8001b02:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001b06:	6922      	ldrne	r2, [r4, #16]
 8001b08:	4013      	andne	r3, r2
 8001b0a:	6123      	strne	r3, [r4, #16]
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
}
 8001b0c:	bd70      	pop	{r4, r5, r6, pc}
 8001b0e:	bf00      	nop
 8001b10:	40022000 	.word	0x40022000
 8001b14:	45670123 	.word	0x45670123

08001b18 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8001b20:	460e      	mov	r6, r1
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b22:	f7ff fedb 	bl	80018dc <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001b26:	2804      	cmp	r0, #4
 8001b28:	d10e      	bne.n	8001b48 <FLASH_ProgramHalfWord+0x30>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8001b2a:	4c08      	ldr	r4, [pc, #32]	; (8001b4c <FLASH_ProgramHalfWord+0x34>)
  
    *(__IO uint16_t*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8001b30:	6923      	ldr	r3, [r4, #16]
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = Data;
 8001b38:	802e      	strh	r6, [r5, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b3a:	f7ff fecf 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8001b3e:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001b42:	6922      	ldr	r2, [r4, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	6123      	str	r3, [r4, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
}
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40022000 	.word	0x40022000

08001b50 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001b50:	b573      	push	{r0, r1, r4, r5, r6, lr}
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 8001b52:	2300      	movs	r3, #0
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001b54:	4606      	mov	r6, r0
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b56:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8001b5a:	460d      	mov	r5, r1
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 8001b5c:	9301      	str	r3, [sp, #4]
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b5e:	f7ff febd 	bl	80018dc <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001b62:	2804      	cmp	r0, #4
 8001b64:	d11a      	bne.n	8001b9c <FLASH_ProgramWord+0x4c>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8001b66:	4c0e      	ldr	r4, [pc, #56]	; (8001ba0 <FLASH_ProgramWord+0x50>)
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8001b6c:	6923      	ldr	r3, [r4, #16]
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6123      	str	r3, [r4, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8001b74:	b2ab      	uxth	r3, r5
 8001b76:	8033      	strh	r3, [r6, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b78:	f7ff feb0 	bl	80018dc <FLASH_WaitForLastBank1Operation>
 
    if(status == FLASH_COMPLETE)
 8001b7c:	2804      	cmp	r0, #4
 8001b7e:	d108      	bne.n	8001b92 <FLASH_ProgramWord+0x42>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 8001b80:	3602      	adds	r6, #2
 8001b82:	9601      	str	r6, [sp, #4]

      *(__IO uint16_t*) tmp = Data >> 16;
 8001b84:	9b01      	ldr	r3, [sp, #4]
 8001b86:	0c2d      	lsrs	r5, r5, #16
 8001b88:	801d      	strh	r5, [r3, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001b8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b8e:	f7ff fea5 	bl	80018dc <FLASH_WaitForLastBank1Operation>
      FLASH->CR &= CR_PG_Reset;
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 8001b92:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001b96:	6922      	ldr	r2, [r4, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	6123      	str	r3, [r4, #16]
  }         
#endif /* STM32F10X_XL */
   
  /* Return the Program Status */
  return status;
}
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ba0:	40022000 	.word	0x40022000

08001ba4 <FLASH_EraseOptionBytes>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseOptionBytes(void)
{
 8001ba4:	b538      	push	{r3, r4, r5, lr}
  uint16_t rdptmp = RDP_Key;

  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
 8001ba6:	f7ff fe3f 	bl	8001828 <FLASH_GetReadOutProtectionStatus>
  {
    rdptmp = 0x00;  
 8001baa:	2800      	cmp	r0, #0
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001bac:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
  {
    rdptmp = 0x00;  
 8001bb0:	bf0c      	ite	eq
 8001bb2:	25a5      	moveq	r5, #165	; 0xa5
 8001bb4:	2500      	movne	r5, #0
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001bb6:	f7ff fe91 	bl	80018dc <FLASH_WaitForLastBank1Operation>
  if(status == FLASH_COMPLETE)
 8001bba:	2804      	cmp	r0, #4
 8001bbc:	d129      	bne.n	8001c12 <FLASH_EraseOptionBytes+0x6e>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001bbe:	4c15      	ldr	r4, [pc, #84]	; (8001c14 <FLASH_EraseOptionBytes+0x70>)
 8001bc0:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <FLASH_EraseOptionBytes+0x74>)
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001bc2:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8001bc6:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8001bc8:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8001bcc:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 8001bce:	6923      	ldr	r3, [r4, #16]
 8001bd0:	f043 0320 	orr.w	r3, r3, #32
 8001bd4:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 8001bd6:	6923      	ldr	r3, [r4, #16]
 8001bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bdc:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001bde:	f7ff fe7d 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    
    if(status == FLASH_COMPLETE)
 8001be2:	2804      	cmp	r0, #4
 8001be4:	d10e      	bne.n	8001c04 <FLASH_EraseOptionBytes+0x60>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8001be6:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8001bea:	6922      	ldr	r2, [r4, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001bec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    status = FLASH_WaitForLastOperation(EraseTimeout);
    
    if(status == FLASH_COMPLETE)
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 8001bf4:	6923      	ldr	r3, [r4, #16]
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	6123      	str	r3, [r4, #16]
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <FLASH_EraseOptionBytes+0x78>)
 8001bfe:	801d      	strh	r5, [r3, #0]
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8001c00:	f7ff fe6c 	bl	80018dc <FLASH_WaitForLastBank1Operation>
        FLASH->CR &= CR_OPTPG_Reset;
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
 8001c04:	2805      	cmp	r0, #5
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8001c06:	bf1f      	itttt	ne
 8001c08:	f641 73ef 	movwne	r3, #8175	; 0x1fef
 8001c0c:	6922      	ldrne	r2, [r4, #16]
 8001c0e:	4013      	andne	r3, r2
 8001c10:	6123      	strne	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
 8001c14:	40022000 	.word	0x40022000
 8001c18:	45670123 	.word	0x45670123
 8001c1c:	1ffff800 	.word	0x1ffff800

08001c20 <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 8001c20:	b538      	push	{r3, r4, r5, lr}
 8001c22:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c24:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8001c28:	f7ff fe58 	bl	80018dc <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 8001c2c:	2804      	cmp	r0, #4
 8001c2e:	d112      	bne.n	8001c56 <FLASH_ErasePage+0x36>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001c30:	4c09      	ldr	r4, [pc, #36]	; (8001c58 <FLASH_ErasePage+0x38>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c32:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8001c36:	6923      	ldr	r3, [r4, #16]
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 8001c3e:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 8001c40:	6923      	ldr	r3, [r4, #16]
 8001c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c46:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8001c48:	f7ff fe48 	bl	80018dc <FLASH_WaitForLastBank1Operation>
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8001c4c:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 8001c50:	6922      	ldr	r2, [r4, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	6123      	str	r3, [r4, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
}
 8001c56:	bd38      	pop	{r3, r4, r5, pc}
 8001c58:	40022000 	.word	0x40022000

08001c5c <FLASH_WaitForLastOperation>:
 8001c5c:	f7ff be3e 	b.w	80018dc <FLASH_WaitForLastBank1Operation>

08001c60 <FSMC_NORSRAMDeInit>:
  *     @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *     @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 8001c60:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8001c64:	b918      	cbnz	r0, 8001c6e <FSMC_NORSRAMDeInit+0xe>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8001c66:	f243 02db 	movw	r2, #12507	; 0x30db
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e003      	b.n	8001c76 <FSMC_NORSRAMDeInit+0x16>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 8001c6e:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c72:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8001c76:	0080      	lsls	r0, r0, #2
 8001c78:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8001c7c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001c80:	6043      	str	r3, [r0, #4]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8001c82:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8001c86:	4770      	bx	lr

08001c88 <FSMC_NANDDeInit>:
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8001c88:	2810      	cmp	r0, #16
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8001c8a:	bf0c      	ite	eq
 8001c8c:	4b05      	ldreq	r3, [pc, #20]	; (8001ca4 <FSMC_NANDDeInit+0x1c>)
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8001c8e:	4b06      	ldrne	r3, [pc, #24]	; (8001ca8 <FSMC_NANDDeInit+0x20>)
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	2118      	movs	r1, #24
 8001c94:	6019      	str	r1, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8001c96:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8001c98:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001c9c:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	a0000060 	.word	0xa0000060
 8001ca8:	a0000080 	.word	0xa0000080

08001cac <FSMC_PCCARDDeInit>:
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <FSMC_PCCARDDeInit+0x18>)
 8001cae:	2218      	movs	r2, #24
 8001cb0:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8001cb6:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8001cba:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8001cbc:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8001cbe:	611a      	str	r2, [r3, #16]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	a00000a0 	.word	0xa00000a0

08001cc8 <FSMC_NORSRAMInit>:
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8001cc8:	6881      	ldr	r1, [r0, #8]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001cca:	6843      	ldr	r3, [r0, #4]
  *         structure that contains the configuration information for 
  *        the FSMC NOR/SRAM specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8001ccc:	b530      	push	{r4, r5, lr}
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001cce:	ea41 0203 	orr.w	r2, r1, r3
 8001cd2:	68c3      	ldr	r3, [r0, #12]
 8001cd4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	6903      	ldr	r3, [r0, #16]
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;

  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8001cda:	2908      	cmp	r1, #8
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001cdc:	ea42 0203 	orr.w	r2, r2, r3
 8001ce0:	6943      	ldr	r3, [r0, #20]
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
  }
  
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8001ce2:	6b41      	ldr	r1, [r0, #52]	; 0x34
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001ce4:	ea42 0203 	orr.w	r2, r2, r3
 8001ce8:	6983      	ldr	r3, [r0, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001cea:	680d      	ldr	r5, [r1, #0]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8001cec:	ea42 0203 	orr.w	r2, r2, r3
 8001cf0:	69c3      	ldr	r3, [r0, #28]
 8001cf2:	ea42 0203 	orr.w	r2, r2, r3
 8001cf6:	6a03      	ldr	r3, [r0, #32]
 8001cf8:	ea42 0203 	orr.w	r2, r2, r3
 8001cfc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cfe:	ea42 0203 	orr.w	r2, r2, r3
 8001d02:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d04:	ea43 0302 	orr.w	r3, r3, r2
 8001d08:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001d0a:	ea43 0304 	orr.w	r3, r3, r4
 8001d0e:	ea43 0302 	orr.w	r3, r3, r2
 8001d12:	6802      	ldr	r2, [r0, #0]
 8001d14:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8001d18:	f102 4220 	add.w	r2, r2, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8001d1c:	6013      	str	r3, [r2, #0]
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;

  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
 8001d1e:	bf02      	ittt	eq
 8001d20:	6813      	ldreq	r3, [r2, #0]
 8001d22:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8001d26:	6013      	streq	r3, [r2, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001d28:	698b      	ldr	r3, [r1, #24]
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8001d2a:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8001d2e:	ea43 0305 	orr.w	r3, r3, r5
 8001d32:	684d      	ldr	r5, [r1, #4]
 8001d34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001d38:	688d      	ldr	r5, [r1, #8]
 8001d3a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001d3e:	68cd      	ldr	r5, [r1, #12]
 8001d40:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001d44:	690d      	ldr	r5, [r1, #16]
 8001d46:	6949      	ldr	r1, [r1, #20]
 8001d48:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8001d4c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
  }
  
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8001d50:	6053      	str	r3, [r2, #4]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8001d52:	d110      	bne.n	8001d76 <FSMC_NORSRAMInit+0xae>
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8001d54:	6b81      	ldr	r1, [r0, #56]	; 0x38
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8001d56:	6808      	ldr	r0, [r1, #0]
 8001d58:	698b      	ldr	r3, [r1, #24]
 8001d5a:	4303      	orrs	r3, r0
 8001d5c:	6848      	ldr	r0, [r1, #4]
 8001d5e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8001d62:	6888      	ldr	r0, [r1, #8]
 8001d64:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001d68:	6908      	ldr	r0, [r1, #16]
 8001d6a:	6949      	ldr	r1, [r1, #20]
 8001d6c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8001d70:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001d74:	e001      	b.n	8001d7a <FSMC_NORSRAMInit+0xb2>
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8001d76:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001d7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8001d7e:	bd30      	pop	{r4, r5, pc}

08001d80 <FSMC_NANDInit>:
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001d80:	6842      	ldr	r2, [r0, #4]
 8001d82:	6883      	ldr	r3, [r0, #8]
  *         structure that contains the configuration information for the FSMC 
  *         NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8001d84:	b530      	push	{r4, r5, lr}
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001d86:	4313      	orrs	r3, r2
 8001d88:	68c2      	ldr	r2, [r0, #12]
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	6903      	ldr	r3, [r0, #16]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001d92:	69c4      	ldr	r4, [r0, #28]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001d94:	4313      	orrs	r3, r2
 8001d96:	6942      	ldr	r2, [r0, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001d98:	6861      	ldr	r1, [r4, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001d9a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001d9e:	6982      	ldr	r2, [r0, #24]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001da0:	6a05      	ldr	r5, [r0, #32]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8001da2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001da6:	68a2      	ldr	r2, [r4, #8]
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8001da8:	6800      	ldr	r0, [r0, #0]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001daa:	0412      	lsls	r2, r2, #16
 8001dac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001db0:	6821      	ldr	r1, [r4, #0]
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8001db2:	2810      	cmp	r0, #16
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001db4:	ea42 0201 	orr.w	r2, r2, r1
 8001db8:	68e1      	ldr	r1, [r4, #12]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001dba:	68ac      	ldr	r4, [r5, #8]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001dbc:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001dc0:	686a      	ldr	r2, [r5, #4]
 8001dc2:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8001dc6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001dca:	682a      	ldr	r2, [r5, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8001dcc:	bf08      	it	eq
 8001dce:	4806      	ldreq	r0, [pc, #24]	; (8001de8 <FSMC_NANDInit+0x68>)
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001dd0:	ea42 0204 	orr.w	r2, r2, r4
 8001dd4:	68ec      	ldr	r4, [r5, #12]
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8001dd6:	bf18      	it	ne
 8001dd8:	4804      	ldrne	r0, [pc, #16]	; (8001dec <FSMC_NANDInit+0x6c>)
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001dda:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8001dde:	6003      	str	r3, [r0, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8001de0:	6081      	str	r1, [r0, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8001de2:	60c2      	str	r2, [r0, #12]
 8001de4:	bd30      	pop	{r4, r5, pc}
 8001de6:	bf00      	nop
 8001de8:	a0000060 	.word	0xa0000060
 8001dec:	a0000080 	.word	0xa0000080

08001df0 <FSMC_PCCARDInit>:
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8001df0:	6803      	ldr	r3, [r0, #0]
 8001df2:	6842      	ldr	r2, [r0, #4]
 8001df4:	f043 0310 	orr.w	r3, r3, #16
 8001df8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8001dfc:	6882      	ldr	r2, [r0, #8]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8001dfe:	4915      	ldr	r1, [pc, #84]	; (8001e54 <FSMC_PCCARDInit+0x64>)
  *         structure that contains the configuration information for the FSMC 
  *         PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8001e00:	b510      	push	{r4, lr}
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8001e02:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e06:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8001e08:	600b      	str	r3, [r1, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e0a:	68a2      	ldr	r2, [r4, #8]
 8001e0c:	6863      	ldr	r3, [r4, #4]
 8001e0e:	0412      	lsls	r2, r2, #16
 8001e10:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	68e2      	ldr	r2, [r4, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e1a:	6904      	ldr	r4, [r0, #16]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8001e20:	608b      	str	r3, [r1, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e22:	68a2      	ldr	r2, [r4, #8]
 8001e24:	6863      	ldr	r3, [r4, #4]
 8001e26:	0412      	lsls	r2, r2, #16
 8001e28:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e2c:	6823      	ldr	r3, [r4, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8001e2e:	6940      	ldr	r0, [r0, #20]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e30:	4313      	orrs	r3, r2
 8001e32:	68e2      	ldr	r2, [r4, #12]
 8001e34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8001e38:	60cb      	str	r3, [r1, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8001e3a:	6882      	ldr	r2, [r0, #8]
 8001e3c:	6843      	ldr	r3, [r0, #4]
 8001e3e:	0412      	lsls	r2, r2, #16
 8001e40:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001e44:	6803      	ldr	r3, [r0, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	68c2      	ldr	r2, [r0, #12]
 8001e4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8001e4e:	610b      	str	r3, [r1, #16]
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	bf00      	nop
 8001e54:	a00000a0 	.word	0xa00000a0

08001e58 <FSMC_NORSRAMStructInit>:
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8001e58:	2202      	movs	r2, #2
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8001e5a:	b510      	push	{r4, lr}
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8001e5c:	6042      	str	r2, [r0, #4]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8001e5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e62:	6242      	str	r2, [r0, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001e64:	6b41      	ldr	r1, [r0, #52]	; 0x34
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8001e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e6a:	6282      	str	r2, [r0, #40]	; 0x28
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8001e6c:	2300      	movs	r3, #0
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001e6e:	220f      	movs	r2, #15
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001e70:	24ff      	movs	r4, #255	; 0xff
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8001e72:	6003      	str	r3, [r0, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8001e74:	6083      	str	r3, [r0, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8001e76:	60c3      	str	r3, [r0, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8001e78:	6103      	str	r3, [r0, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8001e7a:	6143      	str	r3, [r0, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8001e7c:	6183      	str	r3, [r0, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8001e7e:	61c3      	str	r3, [r0, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8001e80:	6203      	str	r3, [r0, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8001e82:	62c3      	str	r3, [r0, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8001e84:	6303      	str	r3, [r0, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001e86:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8001e88:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001e8a:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8001e8c:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8001e8e:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8001e90:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8001e92:	618b      	str	r3, [r1, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8001e94:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001e96:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8001e98:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8001e9a:	608c      	str	r4, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8001e9c:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8001e9e:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8001ea0:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8001ea2:	618b      	str	r3, [r1, #24]
 8001ea4:	bd10      	pop	{r4, pc}

08001ea6 <FSMC_NANDStructInit>:
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	6003      	str	r3, [r0, #0]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001eaa:	69c2      	ldr	r2, [r0, #28]
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8001eac:	2300      	movs	r3, #0
 8001eae:	6043      	str	r3, [r0, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8001eb0:	6083      	str	r3, [r0, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8001eb2:	60c3      	str	r3, [r0, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8001eb4:	6103      	str	r3, [r0, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8001eb6:	6143      	str	r3, [r0, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8001eb8:	6183      	str	r3, [r0, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001eba:	23fc      	movs	r3, #252	; 0xfc
 8001ebc:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001ebe:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001ec0:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001ec2:	60d3      	str	r3, [r2, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001ec4:	6a02      	ldr	r2, [r0, #32]
 8001ec6:	6013      	str	r3, [r2, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001ec8:	6053      	str	r3, [r2, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001eca:	6093      	str	r3, [r2, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8001ecc:	60d3      	str	r3, [r2, #12]
 8001ece:	4770      	bx	lr

08001ed0 <FSMC_PCCARDStructInit>:
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001ed0:	68c2      	ldr	r2, [r0, #12]
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6003      	str	r3, [r0, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8001ed6:	6043      	str	r3, [r0, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8001ed8:	6083      	str	r3, [r0, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001eda:	23fc      	movs	r3, #252	; 0xfc
 8001edc:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001ede:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001ee0:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001ee2:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001ee4:	6902      	ldr	r2, [r0, #16]
 8001ee6:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001ee8:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001eea:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8001eec:	60d3      	str	r3, [r2, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8001eee:	6942      	ldr	r2, [r0, #20]
 8001ef0:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8001ef2:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8001ef4:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8001ef6:	60d3      	str	r3, [r2, #12]
 8001ef8:	4770      	bx	lr

08001efa <FSMC_NORSRAMCmd>:
  *     @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8001efa:	0080      	lsls	r0, r0, #2
 8001efc:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f00:	b119      	cbz	r1, 8001f0a <FSMC_NORSRAMCmd+0x10>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	e002      	b.n	8001f10 <FSMC_NORSRAMCmd+0x16>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
 8001f0a:	6802      	ldr	r2, [r0, #0]
 8001f0c:	4b01      	ldr	r3, [pc, #4]	; (8001f14 <FSMC_NORSRAMCmd+0x1a>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	6003      	str	r3, [r0, #0]
 8001f12:	4770      	bx	lr
 8001f14:	000ffffe 	.word	0x000ffffe

08001f18 <FSMC_NANDCmd>:
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f18:	b139      	cbz	r1, 8001f2a <FSMC_NANDCmd+0x12>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001f1a:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
 8001f1c:	bf0c      	ite	eq
 8001f1e:	4a07      	ldreq	r2, [pc, #28]	; (8001f3c <FSMC_NANDCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
 8001f20:	4a07      	ldrne	r2, [pc, #28]	; (8001f40 <FSMC_NANDCmd+0x28>)
 8001f22:	6813      	ldr	r3, [r2, #0]
 8001f24:	f043 0304 	orr.w	r3, r3, #4
 8001f28:	e006      	b.n	8001f38 <FSMC_NANDCmd+0x20>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001f2a:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
 8001f2c:	bf0c      	ite	eq
 8001f2e:	4a03      	ldreq	r2, [pc, #12]	; (8001f3c <FSMC_NANDCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
 8001f30:	4a03      	ldrne	r2, [pc, #12]	; (8001f40 <FSMC_NANDCmd+0x28>)
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <FSMC_NANDCmd+0x2c>)
 8001f34:	6811      	ldr	r1, [r2, #0]
 8001f36:	400b      	ands	r3, r1
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4770      	bx	lr
 8001f3c:	a0000060 	.word	0xa0000060
 8001f40:	a0000080 	.word	0xa0000080
 8001f44:	000ffffb 	.word	0x000ffffb

08001f48 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <FSMC_PCCARDCmd+0x18>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f4a:	b118      	cbz	r0, 8001f54 <FSMC_PCCARDCmd+0xc>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f042 0204 	orr.w	r2, r2, #4
 8001f52:	e002      	b.n	8001f5a <FSMC_PCCARDCmd+0x12>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
 8001f54:	6819      	ldr	r1, [r3, #0]
 8001f56:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <FSMC_PCCARDCmd+0x1c>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	a00000a0 	.word	0xa00000a0
 8001f64:	000ffffb 	.word	0x000ffffb

08001f68 <FSMC_NANDECCCmd>:
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001f68:	b139      	cbz	r1, 8001f7a <FSMC_NANDECCCmd+0x12>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001f6a:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
 8001f6c:	bf0c      	ite	eq
 8001f6e:	4a07      	ldreq	r2, [pc, #28]	; (8001f8c <FSMC_NANDECCCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
 8001f70:	4a07      	ldrne	r2, [pc, #28]	; (8001f90 <FSMC_NANDECCCmd+0x28>)
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f78:	e006      	b.n	8001f88 <FSMC_NANDECCCmd+0x20>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001f7a:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
 8001f7c:	bf0c      	ite	eq
 8001f7e:	4a03      	ldreq	r2, [pc, #12]	; (8001f8c <FSMC_NANDECCCmd+0x24>)
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
 8001f80:	4a03      	ldrne	r2, [pc, #12]	; (8001f90 <FSMC_NANDECCCmd+0x28>)
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <FSMC_NANDECCCmd+0x2c>)
 8001f84:	6811      	ldr	r1, [r2, #0]
 8001f86:	400b      	ands	r3, r1
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4770      	bx	lr
 8001f8c:	a0000060 	.word	0xa0000060
 8001f90:	a0000080 	.word	0xa0000080
 8001f94:	000fffbf 	.word	0x000fffbf

08001f98 <FSMC_GetECC>:
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8001f98:	2810      	cmp	r0, #16
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8001f9a:	bf0c      	ite	eq
 8001f9c:	4b01      	ldreq	r3, [pc, #4]	; (8001fa4 <FSMC_GetECC+0xc>)
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8001f9e:	4b02      	ldrne	r3, [pc, #8]	; (8001fa8 <FSMC_GetECC+0x10>)
 8001fa0:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 8001fa2:	4770      	bx	lr
 8001fa4:	a0000060 	.word	0xa0000060
 8001fa8:	a0000080 	.word	0xa0000080

08001fac <FSMC_ITConfig>:
{
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001fac:	b17a      	cbz	r2, 8001fce <FSMC_ITConfig+0x22>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001fae:	2810      	cmp	r0, #16
 8001fb0:	d101      	bne.n	8001fb6 <FSMC_ITConfig+0xa>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <FSMC_ITConfig+0x40>)
 8001fb4:	e008      	b.n	8001fc8 <FSMC_ITConfig+0x1c>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8001fb6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001fba:	d104      	bne.n	8001fc6 <FSMC_ITConfig+0x1a>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <FSMC_ITConfig+0x44>)
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4311      	orrs	r1, r2
 8001fc2:	6059      	str	r1, [r3, #4]
 8001fc4:	4770      	bx	lr
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <FSMC_ITConfig+0x48>)
 8001fc8:	6853      	ldr	r3, [r2, #4]
 8001fca:	4319      	orrs	r1, r3
 8001fcc:	e00c      	b.n	8001fe8 <FSMC_ITConfig+0x3c>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8001fce:	2810      	cmp	r0, #16
 8001fd0:	ea6f 0101 	mvn.w	r1, r1
 8001fd4:	d101      	bne.n	8001fda <FSMC_ITConfig+0x2e>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <FSMC_ITConfig+0x40>)
 8001fd8:	e004      	b.n	8001fe4 <FSMC_ITConfig+0x38>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8001fda:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8001fde:	bf0c      	ite	eq
 8001fe0:	4a03      	ldreq	r2, [pc, #12]	; (8001ff0 <FSMC_ITConfig+0x44>)
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8001fe2:	4a04      	ldrne	r2, [pc, #16]	; (8001ff4 <FSMC_ITConfig+0x48>)
 8001fe4:	6853      	ldr	r3, [r2, #4]
 8001fe6:	4019      	ands	r1, r3
 8001fe8:	6051      	str	r1, [r2, #4]
 8001fea:	4770      	bx	lr
 8001fec:	a0000060 	.word	0xa0000060
 8001ff0:	a0000080 	.word	0xa0000080
 8001ff4:	a00000a0 	.word	0xa00000a0

08001ff8 <FSMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8001ff8:	2810      	cmp	r0, #16
 8001ffa:	d101      	bne.n	8002000 <FSMC_GetFlagStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <FSMC_GetFlagStatus+0x20>)
 8001ffe:	e004      	b.n	800200a <FSMC_GetFlagStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002000:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 8002004:	bf0c      	ite	eq
 8002006:	4b05      	ldreq	r3, [pc, #20]	; (800201c <FSMC_GetFlagStatus+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002008:	4b05      	ldrne	r3, [pc, #20]	; (8002020 <FSMC_GetFlagStatus+0x28>)
 800200a:	685b      	ldr	r3, [r3, #4]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 800200c:	420b      	tst	r3, r1
}
 800200e:	bf14      	ite	ne
 8002010:	2001      	movne	r0, #1
 8002012:	2000      	moveq	r0, #0
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	a0000060 	.word	0xa0000060
 800201c:	a0000080 	.word	0xa0000080
 8002020:	a00000a0 	.word	0xa00000a0

08002024 <FSMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002024:	2810      	cmp	r0, #16
 8002026:	ea6f 0101 	mvn.w	r1, r1
 800202a:	d101      	bne.n	8002030 <FSMC_ClearFlag+0xc>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 800202c:	4a05      	ldr	r2, [pc, #20]	; (8002044 <FSMC_ClearFlag+0x20>)
 800202e:	e004      	b.n	800203a <FSMC_ClearFlag+0x16>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002030:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8002034:	bf0c      	ite	eq
 8002036:	4a04      	ldreq	r2, [pc, #16]	; (8002048 <FSMC_ClearFlag+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8002038:	4a04      	ldrne	r2, [pc, #16]	; (800204c <FSMC_ClearFlag+0x28>)
 800203a:	6853      	ldr	r3, [r2, #4]
 800203c:	4019      	ands	r1, r3
 800203e:	6051      	str	r1, [r2, #4]
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	a0000060 	.word	0xa0000060
 8002048:	a0000080 	.word	0xa0000080
 800204c:	a00000a0 	.word	0xa00000a0

08002050 <FSMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002050:	2810      	cmp	r0, #16
 8002052:	d101      	bne.n	8002058 <FSMC_GetITStatus+0x8>
  {
    tmpsr = FSMC_Bank2->SR2;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <FSMC_GetITStatus+0x28>)
 8002056:	e004      	b.n	8002062 <FSMC_GetITStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002058:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpsr = FSMC_Bank3->SR3;
 800205c:	bf0c      	ite	eq
 800205e:	4b07      	ldreq	r3, [pc, #28]	; (800207c <FSMC_GetITStatus+0x2c>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002060:	4b07      	ldrne	r3, [pc, #28]	; (8002080 <FSMC_GetITStatus+0x30>)
 8002062:	685b      	ldr	r3, [r3, #4]
  } 
  
  itstatus = tmpsr & FSMC_IT;
  
  itenable = tmpsr & (FSMC_IT >> 3);
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8002064:	ea13 0001 	ands.w	r0, r3, r1
 8002068:	d004      	beq.n	8002074 <FSMC_GetITStatus+0x24>
  {
    bitstatus = SET;
 800206a:	ea13 03d1 	ands.w	r3, r3, r1, lsr #3
 800206e:	bf14      	ite	ne
 8002070:	2001      	movne	r0, #1
 8002072:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	a0000060 	.word	0xa0000060
 800207c:	a0000080 	.word	0xa0000080
 8002080:	a00000a0 	.word	0xa00000a0

08002084 <FSMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002084:	2810      	cmp	r0, #16
 8002086:	ea4f 01d1 	mov.w	r1, r1, lsr #3
 800208a:	d101      	bne.n	8002090 <FSMC_ClearITPendingBit+0xc>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800208c:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <FSMC_ClearITPendingBit+0x20>)
 800208e:	e004      	b.n	800209a <FSMC_ClearITPendingBit+0x16>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002090:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8002094:	bf0c      	ite	eq
 8002096:	4a04      	ldreq	r2, [pc, #16]	; (80020a8 <FSMC_ClearITPendingBit+0x24>)
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8002098:	4a04      	ldrne	r2, [pc, #16]	; (80020ac <FSMC_ClearITPendingBit+0x28>)
 800209a:	6853      	ldr	r3, [r2, #4]
 800209c:	ea23 0101 	bic.w	r1, r3, r1
 80020a0:	6051      	str	r1, [r2, #4]
 80020a2:	4770      	bx	lr
 80020a4:	a0000060 	.word	0xa0000060
 80020a8:	a0000080 	.word	0xa0000080
 80020ac:	a00000a0 	.word	0xa00000a0

080020b0 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80020b0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <GPIO_DeInit+0x9c>)
 80020b4:	4298      	cmp	r0, r3
 80020b6:	d106      	bne.n	80020c6 <GPIO_DeInit+0x16>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80020b8:	2101      	movs	r1, #1
 80020ba:	2004      	movs	r0, #4
 80020bc:	f000 fcd6 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 80020c0:	2100      	movs	r1, #0
 80020c2:	2004      	movs	r0, #4
 80020c4:	e03c      	b.n	8002140 <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOB)
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <GPIO_DeInit+0xa0>)
 80020c8:	4298      	cmp	r0, r3
 80020ca:	d106      	bne.n	80020da <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80020cc:	2101      	movs	r1, #1
 80020ce:	2008      	movs	r0, #8
 80020d0:	f000 fccc 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 80020d4:	2100      	movs	r1, #0
 80020d6:	2008      	movs	r0, #8
 80020d8:	e032      	b.n	8002140 <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOC)
 80020da:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <GPIO_DeInit+0xa4>)
 80020dc:	4298      	cmp	r0, r3
 80020de:	d106      	bne.n	80020ee <GPIO_DeInit+0x3e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80020e0:	2101      	movs	r1, #1
 80020e2:	2010      	movs	r0, #16
 80020e4:	f000 fcc2 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 80020e8:	2100      	movs	r1, #0
 80020ea:	2010      	movs	r0, #16
 80020ec:	e028      	b.n	8002140 <GPIO_DeInit+0x90>
  }
  else if (GPIOx == GPIOD)
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <GPIO_DeInit+0xa8>)
 80020f0:	4298      	cmp	r0, r3
 80020f2:	d106      	bne.n	8002102 <GPIO_DeInit+0x52>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 80020f4:	2101      	movs	r1, #1
 80020f6:	2020      	movs	r0, #32
 80020f8:	f000 fcb8 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 80020fc:	2100      	movs	r1, #0
 80020fe:	2020      	movs	r0, #32
 8002100:	e01e      	b.n	8002140 <GPIO_DeInit+0x90>
  }    
  else if (GPIOx == GPIOE)
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <GPIO_DeInit+0xac>)
 8002104:	4298      	cmp	r0, r3
 8002106:	d106      	bne.n	8002116 <GPIO_DeInit+0x66>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8002108:	2101      	movs	r1, #1
 800210a:	2040      	movs	r0, #64	; 0x40
 800210c:	f000 fcae 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8002110:	2100      	movs	r1, #0
 8002112:	2040      	movs	r0, #64	; 0x40
 8002114:	e014      	b.n	8002140 <GPIO_DeInit+0x90>
  } 
  else if (GPIOx == GPIOF)
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <GPIO_DeInit+0xb0>)
 8002118:	4298      	cmp	r0, r3
 800211a:	d106      	bne.n	800212a <GPIO_DeInit+0x7a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 800211c:	2101      	movs	r1, #1
 800211e:	2080      	movs	r0, #128	; 0x80
 8002120:	f000 fca4 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8002124:	2100      	movs	r1, #0
 8002126:	2080      	movs	r0, #128	; 0x80
 8002128:	e00a      	b.n	8002140 <GPIO_DeInit+0x90>
  }
  else
  {
    if (GPIOx == GPIOG)
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <GPIO_DeInit+0xb4>)
 800212c:	4298      	cmp	r0, r3
 800212e:	d10b      	bne.n	8002148 <GPIO_DeInit+0x98>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 8002130:	2101      	movs	r1, #1
 8002132:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002136:	f000 fc99 	bl	8002a6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 800213a:	2100      	movs	r1, #0
 800213c:	f44f 7080 	mov.w	r0, #256	; 0x100
    }
  }
}
 8002140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOG)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8002144:	f000 bc92 	b.w	8002a6c <RCC_APB2PeriphResetCmd>
 8002148:	bd08      	pop	{r3, pc}
 800214a:	bf00      	nop
 800214c:	40010800 	.word	0x40010800
 8002150:	40010c00 	.word	0x40010c00
 8002154:	40011000 	.word	0x40011000
 8002158:	40011400 	.word	0x40011400
 800215c:	40011800 	.word	0x40011800
 8002160:	40011c00 	.word	0x40011c00
 8002164:	40012000 	.word	0x40012000

08002168 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 8002168:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 800216a:	2101      	movs	r1, #1
 800216c:	4608      	mov	r0, r1
 800216e:	f000 fc7d 	bl	8002a6c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
}
 8002172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 8002176:	2100      	movs	r1, #0
 8002178:	2001      	movs	r0, #1
 800217a:	f000 bc77 	b.w	8002a6c <RCC_APB2PeriphResetCmd>

0800217e <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800217e:	78ca      	ldrb	r2, [r1, #3]
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8002184:	06d4      	lsls	r4, r2, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002186:	bf48      	it	mi
 8002188:	788c      	ldrbmi	r4, [r1, #2]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 800218a:	880e      	ldrh	r6, [r1, #0]
 800218c:	f002 030f 	and.w	r3, r2, #15
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8002190:	bf48      	it	mi
 8002192:	4323      	orrmi	r3, r4
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8002194:	f016 0fff 	tst.w	r6, #255	; 0xff
 8002198:	d01e      	beq.n	80021d8 <GPIO_Init+0x5a>
  {
    tmpreg = GPIOx->CRL;
 800219a:	6801      	ldr	r1, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800219c:	2400      	movs	r4, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 800219e:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80021a2:	f04f 0c0f 	mov.w	ip, #15
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
 80021a6:	fa0e f704 	lsl.w	r7, lr, r4
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80021aa:	ea37 0506 	bics.w	r5, r7, r6
 80021ae:	d10f      	bne.n	80021d0 <GPIO_Init+0x52>
      {
        pos = pinpos << 2;
 80021b0:	00a5      	lsls	r5, r4, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80021b2:	fa0c f805 	lsl.w	r8, ip, r5
 80021b6:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80021ba:	fa03 f505 	lsl.w	r5, r3, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80021be:	2a28      	cmp	r2, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80021c0:	ea41 0105 	orr.w	r1, r1, r5
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80021c4:	d101      	bne.n	80021ca <GPIO_Init+0x4c>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80021c6:	6147      	str	r7, [r0, #20]
 80021c8:	e002      	b.n	80021d0 <GPIO_Init+0x52>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80021ca:	2a48      	cmp	r2, #72	; 0x48
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80021cc:	bf08      	it	eq
 80021ce:	6107      	streq	r7, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80021d0:	3401      	adds	r4, #1
 80021d2:	2c08      	cmp	r4, #8
 80021d4:	d1e7      	bne.n	80021a6 <GPIO_Init+0x28>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80021d6:	6001      	str	r1, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80021d8:	2eff      	cmp	r6, #255	; 0xff
 80021da:	d920      	bls.n	800221e <GPIO_Init+0xa0>
  {
    tmpreg = GPIOx->CRH;
 80021dc:	6841      	ldr	r1, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80021de:	2400      	movs	r4, #0
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80021e0:	f04f 0e01 	mov.w	lr, #1
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80021e4:	f04f 0c0f 	mov.w	ip, #15
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80021e8:	f104 0508 	add.w	r5, r4, #8
 80021ec:	fa0e f505 	lsl.w	r5, lr, r5
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 80021f0:	ea35 0706 	bics.w	r7, r5, r6
 80021f4:	d10f      	bne.n	8002216 <GPIO_Init+0x98>
      {
        pos = pinpos << 2;
 80021f6:	00a7      	lsls	r7, r4, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80021f8:	fa0c f807 	lsl.w	r8, ip, r7
 80021fc:	ea21 0108 	bic.w	r1, r1, r8
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002200:	fa03 f707 	lsl.w	r7, r3, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8002204:	2a28      	cmp	r2, #40	; 0x28
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8002206:	ea41 0107 	orr.w	r1, r1, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800220a:	d101      	bne.n	8002210 <GPIO_Init+0x92>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800220c:	6145      	str	r5, [r0, #20]
 800220e:	e002      	b.n	8002216 <GPIO_Init+0x98>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8002210:	2a48      	cmp	r2, #72	; 0x48
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8002212:	bf08      	it	eq
 8002214:	6105      	streq	r5, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8002216:	3401      	adds	r4, #1
 8002218:	2c08      	cmp	r4, #8
 800221a:	d1e5      	bne.n	80021e8 <GPIO_Init+0x6a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800221c:	6041      	str	r1, [r0, #4]
 800221e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002222 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8002222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002226:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8002228:	2302      	movs	r3, #2
 800222a:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800222c:	2304      	movs	r3, #4
 800222e:	70c3      	strb	r3, [r0, #3]
 8002230:	4770      	bx	lr

08002232 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002232:	6883      	ldr	r3, [r0, #8]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8002234:	4219      	tst	r1, r3
}
 8002236:	bf14      	ite	ne
 8002238:	2001      	movne	r0, #1
 800223a:	2000      	moveq	r0, #0
 800223c:	4770      	bx	lr

0800223e <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 800223e:	6880      	ldr	r0, [r0, #8]
}
 8002240:	b280      	uxth	r0, r0
 8002242:	4770      	bx	lr

08002244 <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8002244:	68c3      	ldr	r3, [r0, #12]
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8002246:	4219      	tst	r1, r3
}
 8002248:	bf14      	ite	ne
 800224a:	2001      	movne	r0, #1
 800224c:	2000      	moveq	r0, #0
 800224e:	4770      	bx	lr

08002250 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8002250:	68c0      	ldr	r0, [r0, #12]
}
 8002252:	b280      	uxth	r0, r0
 8002254:	4770      	bx	lr

08002256 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8002256:	6101      	str	r1, [r0, #16]
 8002258:	4770      	bx	lr

0800225a <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800225a:	6141      	str	r1, [r0, #20]
 800225c:	4770      	bx	lr

0800225e <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800225e:	b10a      	cbz	r2, 8002264 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002260:	6101      	str	r1, [r0, #16]
 8002262:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8002264:	6141      	str	r1, [r0, #20]
 8002266:	4770      	bx	lr

08002268 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8002268:	60c1      	str	r1, [r0, #12]
 800226a:	4770      	bx	lr

0800226c <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 800226c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002270:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8002272:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8002274:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002276:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8002278:	6983      	ldr	r3, [r0, #24]
 800227a:	4770      	bx	lr

0800227c <GPIO_EventOutputConfig>:
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 800227c:	4a05      	ldr	r2, [pc, #20]	; (8002294 <GPIO_EventOutputConfig+0x18>)
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	4319      	orrs	r1, r3
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 800228a:	ea41 1000 	orr.w	r0, r1, r0, lsl #4
  AFIO->EVCR = tmpreg;
 800228e:	6010      	str	r0, [r2, #0]
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40010000 	.word	0x40010000

08002298 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 8002298:	4b01      	ldr	r3, [pc, #4]	; (80022a0 <GPIO_EventOutputCmd+0x8>)
 800229a:	6018      	str	r0, [r3, #0]
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	4220001c 	.word	0x4220001c

080022a4 <GPIO_PinRemapConfig>:

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80022a4:	2800      	cmp	r0, #0
 80022a6:	4a16      	ldr	r2, [pc, #88]	; (8002300 <GPIO_PinRemapConfig+0x5c>)
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80022a8:	b530      	push	{r4, r5, lr}
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80022aa:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    tmpreg = AFIO->MAPR2;
 80022ae:	bfb4      	ite	lt
 80022b0:	69d3      	ldrlt	r3, [r2, #28]
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80022b2:	6853      	ldrge	r3, [r2, #4]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80022b4:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 80022b8:	b284      	uxth	r4, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80022ba:	d106      	bne.n	80022ca <GPIO_PinRemapConfig+0x26>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80022bc:	6855      	ldr	r5, [r2, #4]
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80022be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80022c2:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80022c6:	6055      	str	r5, [r2, #4]
 80022c8:	e00e      	b.n	80022e8 <GPIO_PinRemapConfig+0x44>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80022ca:	02c2      	lsls	r2, r0, #11
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80022cc:	bf55      	itete	pl
 80022ce:	0d42      	lsrpl	r2, r0, #21
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 80022d0:	2203      	movmi	r2, #3
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80022d2:	0112      	lslpl	r2, r2, #4
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    tmpreg &= ~tmp1;
 80022d4:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80022d8:	bf4c      	ite	mi
 80022da:	40aa      	lslmi	r2, r5
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80022dc:	fa04 f202 	lslpl.w	r2, r4, r2
 80022e0:	ea23 0302 	bic.w	r3, r3, r2
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80022e4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 80022e8:	b119      	cbz	r1, 80022f2 <GPIO_PinRemapConfig+0x4e>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80022ea:	0d42      	lsrs	r2, r0, #21
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	4094      	lsls	r4, r2
 80022f0:	4323      	orrs	r3, r4
 80022f2:	4a03      	ldr	r2, [pc, #12]	; (8002300 <GPIO_PinRemapConfig+0x5c>)
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80022f4:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 80022f6:	bfb4      	ite	lt
 80022f8:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 80022fa:	6053      	strge	r3, [r2, #4]
 80022fc:	bd30      	pop	{r4, r5, pc}
 80022fe:	bf00      	nop
 8002300:	40010000 	.word	0x40010000

08002304 <GPIO_EXTILineConfig>:
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8002304:	f001 0303 	and.w	r3, r1, #3
 8002308:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 800230c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002310:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8002314:	b510      	push	{r4, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8002316:	009b      	lsls	r3, r3, #2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8002318:	688c      	ldr	r4, [r1, #8]
 800231a:	220f      	movs	r2, #15
 800231c:	409a      	lsls	r2, r3
 800231e:	ea24 0202 	bic.w	r2, r4, r2
 8002322:	608a      	str	r2, [r1, #8]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8002324:	688a      	ldr	r2, [r1, #8]
 8002326:	4098      	lsls	r0, r3
 8002328:	4310      	orrs	r0, r2
 800232a:	6088      	str	r0, [r1, #8]
 800232c:	bd10      	pop	{r4, pc}

0800232e <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 800232e:	4b01      	ldr	r3, [pc, #4]	; (8002334 <GPIO_ETH_MediaInterfaceConfig+0x6>)
 8002330:	6018      	str	r0, [r3, #0]
 8002332:	4770      	bx	lr
 8002334:	422000dc 	.word	0x422000dc

08002338 <I2C_DeInit>:
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8002338:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <I2C_DeInit+0x30>)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800233c:	2101      	movs	r1, #1
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800233e:	4298      	cmp	r0, r3
 8002340:	d107      	bne.n	8002352 <I2C_DeInit+0x1a>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8002342:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002346:	f000 fb9d 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 800234a:	2100      	movs	r1, #0
 800234c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002350:	e006      	b.n	8002360 <I2C_DeInit+0x28>
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8002352:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002356:	f000 fb95 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 800235a:	2100      	movs	r1, #0
 800235c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8002360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8002364:	f000 bb8e 	b.w	8002a84 <RCC_APB1PeriphResetCmd>
 8002368:	40005400 	.word	0x40005400

0800236c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8002372:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8002374:	a801      	add	r0, sp, #4
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8002376:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8002378:	f000 fb0e 	bl	8002998 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800237c:	9a03      	ldr	r2, [sp, #12]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800237e:	482e      	ldr	r0, [pc, #184]	; (8002438 <I2C_Init+0xcc>)

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8002380:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8002384:	fbb2 f0f0 	udiv	r0, r2, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8002388:	0436      	lsls	r6, r6, #16
 800238a:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800238c:	b281      	uxth	r1, r0
  tmpreg |= freqrange;
 800238e:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8002390:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8002392:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8002394:	4e29      	ldr	r6, [pc, #164]	; (800243c <I2C_Init+0xd0>)
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	041b      	lsls	r3, r3, #16
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	42b3      	cmp	r3, r6
 80023a4:	d80a      	bhi.n	80023bc <I2C_Init+0x50>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80023ac:	3101      	adds	r1, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80023ae:	b29b      	uxth	r3, r3
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80023b0:	2b03      	cmp	r3, #3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80023b2:	b289      	uxth	r1, r1
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80023b4:	bf98      	it	ls
 80023b6:	2304      	movls	r3, #4
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80023b8:	8421      	strh	r1, [r4, #32]
 80023ba:	e023      	b.n	8002404 <I2C_Init+0x98>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80023bc:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 80023c0:	88ee      	ldrh	r6, [r5, #6]
 80023c2:	428e      	cmp	r6, r1
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80023c4:	bf1b      	ittet	ne
 80023c6:	2119      	movne	r1, #25
 80023c8:	434b      	mulne	r3, r1
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80023ca:	eb03 0343 	addeq.w	r3, r3, r3, lsl #1
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80023ce:	fbb2 f3f3 	udivne	r3, r2, r3
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80023d2:	bf0b      	itete	eq
 80023d4:	fbb2 f3f3 	udiveq	r3, r2, r3
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80023d8:	b29b      	uxthne	r3, r3
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80023da:	b29b      	uxtheq	r3, r3
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 80023dc:	f443 4380 	orrne.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80023e0:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80023e4:	b90a      	cbnz	r2, 80023ea <I2C_Init+0x7e>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80023e6:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80023ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80023ee:	fb01 f200 	mul.w	r2, r1, r0
 80023f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023f6:	fb92 f2f1 	sdiv	r2, r2, r1
 80023fa:	3201      	adds	r2, #1
 80023fc:	b292      	uxth	r2, r2
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80023fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8002402:	8422      	strh	r2, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8002404:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8002406:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8002408:	88a9      	ldrh	r1, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800240a:	b29b      	uxth	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8002412:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8002414:	896a      	ldrh	r2, [r5, #10]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002416:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800241a:	f023 0302 	bic.w	r3, r3, #2
 800241e:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8002420:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002422:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8002424:	4313      	orrs	r3, r2
 8002426:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8002428:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800242a:	89aa      	ldrh	r2, [r5, #12]
 800242c:	892b      	ldrh	r3, [r5, #8]
 800242e:	4313      	orrs	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	8123      	strh	r3, [r4, #8]
}
 8002434:	b006      	add	sp, #24
 8002436:	bd70      	pop	{r4, r5, r6, pc}
 8002438:	000f4240 	.word	0x000f4240
 800243c:	000186a0 	.word	0x000186a0

08002440 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8002440:	f241 3388 	movw	r3, #5000	; 0x1388
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8002444:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8002448:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800244a:	2300      	movs	r3, #0
 800244c:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800244e:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8002450:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002452:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8002456:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002458:	8183      	strh	r3, [r0, #12]
 800245a:	4770      	bx	lr

0800245c <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800245c:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800245e:	b119      	cbz	r1, 8002468 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8002460:	b29b      	uxth	r3, r3
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	e003      	b.n	8002470 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	0c1b      	lsrs	r3, r3, #16
 8002470:	8003      	strh	r3, [r0, #0]
 8002472:	4770      	bx	lr

08002474 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8002474:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002476:	b119      	cbz	r1, 8002480 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8002478:	b29b      	uxth	r3, r3
 800247a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800247e:	e003      	b.n	8002488 <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 8002480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	8083      	strh	r3, [r0, #4]
 800248a:	4770      	bx	lr

0800248c <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 800248c:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800248e:	b119      	cbz	r1, 8002498 <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 8002490:	b29b      	uxth	r3, r3
 8002492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002496:	e003      	b.n	80024a0 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= CR2_LAST_Reset;
 8002498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	8083      	strh	r3, [r0, #4]
 80024a2:	4770      	bx	lr

080024a4 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80024a4:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024a6:	b119      	cbz	r1, 80024b0 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ae:	e003      	b.n	80024b8 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 80024b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	8003      	strh	r3, [r0, #0]
 80024ba:	4770      	bx	lr

080024bc <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80024bc:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024be:	b119      	cbz	r1, 80024c8 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024c6:	e003      	b.n	80024d0 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 80024c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	8003      	strh	r3, [r0, #0]
 80024d2:	4770      	bx	lr

080024d4 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 80024d4:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80024d6:	b119      	cbz	r1, 80024e0 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024de:	e003      	b.n	80024e8 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 80024e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	0c1b      	lsrs	r3, r3, #16
 80024e8:	8003      	strh	r3, [r0, #0]
 80024ea:	4770      	bx	lr

080024ec <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80024ec:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80024ee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80024f2:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80024f4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80024f8:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80024fa:	8183      	strh	r3, [r0, #12]
 80024fc:	4770      	bx	lr

080024fe <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 80024fe:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002500:	b119      	cbz	r1, 800250a <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 8002502:	b29b      	uxth	r3, r3
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	e003      	b.n	8002512 <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	8183      	strh	r3, [r0, #12]
 8002514:	4770      	bx	lr

08002516 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= CR1_ENGC_Set;
 8002516:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002518:	b119      	cbz	r1, 8002522 <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= CR1_ENGC_Set;
 800251a:	b29b      	uxth	r3, r3
 800251c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002520:	e003      	b.n	800252a <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= CR1_ENGC_Reset;
 8002522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002526:	041b      	lsls	r3, r3, #16
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	8003      	strh	r3, [r0, #0]
 800252c:	4770      	bx	lr

0800252e <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800252e:	8883      	ldrh	r3, [r0, #4]
 8002530:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8002532:	b10a      	cbz	r2, 8002538 <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8002534:	4319      	orrs	r1, r3
 8002536:	e001      	b.n	800253c <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8002538:	ea23 0101 	bic.w	r1, r3, r1
 800253c:	8081      	strh	r1, [r0, #4]
 800253e:	4770      	bx	lr

08002540 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8002540:	8201      	strh	r1, [r0, #16]
 8002542:	4770      	bx	lr

08002544 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8002544:	8a00      	ldrh	r0, [r0, #16]
}
 8002546:	b2c0      	uxtb	r0, r0
 8002548:	4770      	bx	lr

0800254a <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800254a:	b112      	cbz	r2, 8002552 <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 800254c:	f041 0101 	orr.w	r1, r1, #1
 8002550:	e001      	b.n	8002556 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8002552:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8002556:	b289      	uxth	r1, r1
 8002558:	8201      	strh	r1, [r0, #16]
 800255a:	4770      	bx	lr

0800255c <I2C_ReadRegister>:
  *     @arg I2C_Register_CCR:   CCR register.
  *     @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800255c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8002562:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8002564:	9b01      	ldr	r3, [sp, #4]
 8002566:	4419      	add	r1, r3
 8002568:	9101      	str	r1, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800256a:	9b01      	ldr	r3, [sp, #4]
 800256c:	8818      	ldrh	r0, [r3, #0]
}
 800256e:	b280      	uxth	r0, r0
 8002570:	b002      	add	sp, #8
 8002572:	4770      	bx	lr

08002574 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= CR1_SWRST_Set;
 8002574:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002576:	b129      	cbz	r1, 8002584 <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= CR1_SWRST_Set;
 8002578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800257c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002580:	b29b      	uxth	r3, r3
 8002582:	e001      	b.n	8002588 <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= CR1_SWRST_Reset;
 8002584:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002588:	8003      	strh	r3, [r0, #0]
 800258a:	4770      	bx	lr

0800258c <I2C_SMBusAlertConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800258c:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800258e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8002592:	bf15      	itete	ne
 8002594:	f423 5300 	bicne.w	r3, r3, #8192	; 0x2000
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8002598:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800259a:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800259c:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80025a0:	bf18      	it	ne
 80025a2:	0c1b      	lsrne	r3, r3, #16
 80025a4:	8003      	strh	r3, [r0, #0]
 80025a6:	4770      	bx	lr

080025a8 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= CR1_PEC_Set;
 80025a8:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025aa:	b119      	cbz	r1, 80025b4 <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= CR1_PEC_Set;
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b2:	e003      	b.n	80025bc <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= CR1_PEC_Reset;
 80025b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	8003      	strh	r3, [r0, #0]
 80025be:	4770      	bx	lr

080025c0 <I2C_PECPositionConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80025c0:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 80025c2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80025c6:	bf15      	itete	ne
 80025c8:	f423 6300 	bicne.w	r3, r3, #2048	; 0x800
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80025cc:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80025ce:	041b      	lslne	r3, r3, #16
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 80025d0:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 80025d4:	bf18      	it	ne
 80025d6:	0c1b      	lsrne	r3, r3, #16
 80025d8:	8003      	strh	r3, [r0, #0]
 80025da:	4770      	bx	lr

080025dc <I2C_NACKPositionConfig>:
 80025dc:	f7ff bff0 	b.w	80025c0 <I2C_PECPositionConfig>

080025e0 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= CR1_ENPEC_Set;
 80025e0:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80025e2:	b119      	cbz	r1, 80025ec <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= CR1_ENPEC_Set;
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f043 0320 	orr.w	r3, r3, #32
 80025ea:	e003      	b.n	80025f4 <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= CR1_ENPEC_Reset;
 80025ec:	f023 0320 	bic.w	r3, r3, #32
 80025f0:	041b      	lsls	r3, r3, #16
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	8003      	strh	r3, [r0, #0]
 80025f6:	4770      	bx	lr

080025f8 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80025f8:	8b00      	ldrh	r0, [r0, #24]
}
 80025fa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80025fe:	4770      	bx	lr

08002600 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= CR1_ENARP_Set;
 8002600:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002602:	b119      	cbz	r1, 800260c <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= CR1_ENARP_Set;
 8002604:	b29b      	uxth	r3, r3
 8002606:	f043 0310 	orr.w	r3, r3, #16
 800260a:	e003      	b.n	8002614 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= CR1_ENARP_Reset;
 800260c:	f023 0310 	bic.w	r3, r3, #16
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	0c1b      	lsrs	r3, r3, #16
 8002614:	8003      	strh	r3, [r0, #0]
 8002616:	4770      	bx	lr

08002618 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 8002618:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800261a:	b919      	cbnz	r1, 8002624 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 800261c:	b29b      	uxth	r3, r3
 800261e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002622:	e003      	b.n	800262c <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 8002624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	8003      	strh	r3, [r0, #0]
 800262e:	4770      	bx	lr

08002630 <I2C_FastModeDutyCycleConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8002630:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8002632:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8002636:	bf1b      	ittet	ne
 8002638:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
 800263c:	041b      	lslne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800263e:	b29b      	uxtheq	r3, r3
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8002640:	0c1b      	lsrne	r3, r3, #16
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8002642:	bf08      	it	eq
 8002644:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8002648:	8383      	strh	r3, [r0, #28]
 800264a:	4770      	bx	lr

0800264c <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800264c:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 800264e:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002650:	b29b      	uxth	r3, r3
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
 8002652:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002656:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800265a:	ea03 0002 	and.w	r0, r3, r2
}
 800265e:	1a43      	subs	r3, r0, r1
 8002660:	4258      	negs	r0, r3
 8002662:	4158      	adcs	r0, r3
 8002664:	4770      	bx	lr

08002666 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8002666:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8002668:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800266a:	b29b      	uxth	r3, r3

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;

  /* Return status */
  return lastevent;
 800266c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
}
 8002670:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002674:	4770      	bx	lr

08002676 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8002676:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800267e:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8002680:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8002682:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
  
  if(i2creg != 0)
 8002684:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8002686:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 800268a:	b113      	cbz	r3, 8002692 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800268c:	9b01      	ldr	r3, [sp, #4]
 800268e:	3314      	adds	r3, #20
 8002690:	e002      	b.n	8002698 <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8002692:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8002694:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8002696:	3318      	adds	r3, #24
 8002698:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800269a:	9b01      	ldr	r3, [sp, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
    /* I2C_FLAG is reset */
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800269e:	4219      	tst	r1, r3
}
 80026a0:	bf14      	ite	ne
 80026a2:	2001      	movne	r0, #1
 80026a4:	2000      	moveq	r0, #0
 80026a6:	b002      	add	sp, #8
 80026a8:	4770      	bx	lr

080026aa <I2C_ClearFlag>:
 80026aa:	43c9      	mvns	r1, r1
 80026ac:	b289      	uxth	r1, r1
 80026ae:	8281      	strh	r1, [r0, #20]
 80026b0:	4770      	bx	lr

080026b2 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 80026b2:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80026b4:	8a80      	ldrh	r0, [r0, #20]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 80026b6:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80026b8:	b280      	uxth	r0, r0
 80026ba:	4008      	ands	r0, r1
 80026bc:	d006      	beq.n	80026cc <I2C_GetITStatus+0x1a>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80026be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026c2:	ea13 4311 	ands.w	r3, r3, r1, lsr #16
 80026c6:	bf14      	ite	ne
 80026c8:	2001      	movne	r0, #1
 80026ca:	2000      	moveq	r0, #0
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 80026cc:	4770      	bx	lr

080026ce <I2C_ClearITPendingBit>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_Mask;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80026ce:	43c9      	mvns	r1, r1
 80026d0:	b289      	uxth	r1, r1
 80026d2:	8281      	strh	r1, [r0, #20]
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop

080026d8 <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 80026d8:	4b01      	ldr	r3, [pc, #4]	; (80026e0 <IWDG_WriteAccessCmd+0x8>)
 80026da:	6018      	str	r0, [r3, #0]
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40003000 	.word	0x40003000

080026e4 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <IWDG_SetPrescaler+0x8>)
 80026e6:	6058      	str	r0, [r3, #4]
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40003000 	.word	0x40003000

080026f0 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 80026f0:	4b01      	ldr	r3, [pc, #4]	; (80026f8 <IWDG_SetReload+0x8>)
 80026f2:	6098      	str	r0, [r3, #8]
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40003000 	.word	0x40003000

080026fc <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_Reload;
 80026fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002700:	4b01      	ldr	r3, [pc, #4]	; (8002708 <IWDG_ReloadCounter+0xc>)
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40003000 	.word	0x40003000

0800270c <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_Enable;
 800270c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <IWDG_Enable+0xc>)
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40003000 	.word	0x40003000

0800271c <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <IWDG_GetFlagStatus+0x10>)
 800271e:	68db      	ldr	r3, [r3, #12]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8002720:	4218      	tst	r0, r3
}
 8002722:	bf14      	ite	ne
 8002724:	2001      	movne	r0, #1
 8002726:	2000      	moveq	r0, #0
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40003000 	.word	0x40003000

08002730 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8002730:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8002732:	2101      	movs	r1, #1
 8002734:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002738:	f000 f9a4 	bl	8002a84 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
}
 800273c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8002740:	2100      	movs	r1, #0
 8002742:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002746:	f000 b99d 	b.w	8002a84 <RCC_APB1PeriphResetCmd>

0800274a <PWR_BackupAccessCmd>:
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800274a:	4b01      	ldr	r3, [pc, #4]	; (8002750 <PWR_BackupAccessCmd+0x6>)
 800274c:	6018      	str	r0, [r3, #0]
 800274e:	4770      	bx	lr
 8002750:	420e0020 	.word	0x420e0020

08002754 <PWR_PVDCmd>:
  */
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8002754:	4b01      	ldr	r3, [pc, #4]	; (800275c <PWR_PVDCmd+0x8>)
 8002756:	6018      	str	r0, [r3, #0]
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	420e0010 	.word	0x420e0010

08002760 <PWR_PVDLevelConfig>:
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  tmpreg = PWR->CR;
 8002760:	4a03      	ldr	r2, [pc, #12]	; (8002770 <PWR_PVDLevelConfig+0x10>)
 8002762:	6813      	ldr	r3, [r2, #0]
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8002764:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8002768:	4318      	orrs	r0, r3
  /* Store the new value */
  PWR->CR = tmpreg;
 800276a:	6010      	str	r0, [r2, #0]
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40007000 	.word	0x40007000

08002774 <PWR_WakeUpPinCmd>:
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8002774:	4b01      	ldr	r3, [pc, #4]	; (800277c <PWR_WakeUpPinCmd+0x8>)
 8002776:	6018      	str	r0, [r3, #0]
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	420e00a0 	.word	0x420e00a0

08002780 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <PWR_EnterSTOPMode+0x2c>)
  PWR->CR = tmpreg;
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8002782:	2901      	cmp	r1, #1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002784:	6813      	ldr	r3, [r2, #0]
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
 8002786:	f023 0303 	bic.w	r3, r3, #3
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800278a:	ea40 0003 	orr.w	r0, r0, r3
  /* Store the new value */
  PWR->CR = tmpreg;
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 800278e:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <PWR_EnterSTOPMode+0x30>)
  /* Clear PDDS and LPDS bits */
  tmpreg &= CR_DS_MASK;
  /* Set LPDS bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
  /* Store the new value */
  PWR->CR = tmpreg;
 8002790:	6010      	str	r0, [r2, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	f042 0204 	orr.w	r2, r2, #4
 8002798:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800279a:	d101      	bne.n	80027a0 <PWR_EnterSTOPMode+0x20>

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 800279c:	bf30      	wfi
 800279e:	e000      	b.n	80027a2 <PWR_EnterSTOPMode+0x22>
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 80027a0:	bf20      	wfe
    /* Request Wait For Event */
    __WFE();
  }
  
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	f022 0204 	bic.w	r2, r2, #4
 80027a8:	611a      	str	r2, [r3, #16]
 80027aa:	4770      	bx	lr
 80027ac:	40007000 	.word	0x40007000
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <PWR_EnterSTANDBYMode>:
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wake-up flag */
  PWR->CR |= PWR_CR_CWUF;
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <PWR_EnterSTANDBYMode+0x20>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f042 0204 	orr.w	r2, r2, #4
 80027bc:	601a      	str	r2, [r3, #0]
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	f042 0202 	orr.w	r2, r2, #2
 80027c4:	601a      	str	r2, [r3, #0]
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP;
 80027c6:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <PWR_EnterSTANDBYMode+0x24>)
 80027c8:	6913      	ldr	r3, [r2, #16]
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6113      	str	r3, [r2, #16]

static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }

static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 80027d0:	bf30      	wfi
 80027d2:	4770      	bx	lr
 80027d4:	40007000 	.word	0x40007000
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <PWR_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <PWR_GetFlagStatus+0x10>)
 80027de:	685b      	ldr	r3, [r3, #4]
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 80027e0:	4203      	tst	r3, r0
}
 80027e2:	bf14      	ite	ne
 80027e4:	2001      	movne	r0, #1
 80027e6:	2000      	moveq	r0, #0
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40007000 	.word	0x40007000

080027f0 <PWR_ClearFlag>:
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 80027f0:	4a02      	ldr	r2, [pc, #8]	; (80027fc <PWR_ClearFlag+0xc>)
 80027f2:	6813      	ldr	r3, [r2, #0]
 80027f4:	ea43 0080 	orr.w	r0, r3, r0, lsl #2
 80027f8:	6010      	str	r0, [r2, #0]
 80027fa:	4770      	bx	lr
 80027fc:	40007000 	.word	0x40007000

08002800 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <RCC_DeInit+0x38>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <RCC_DeInit+0x3c>)
 800280e:	400a      	ands	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002818:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800281c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002824:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800282c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800282e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	f8ff0000 	.word	0xf8ff0000

08002840 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8002842:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800284c:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002854:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8002856:	d003      	beq.n	8002860 <RCC_HSEConfig+0x20>
 8002858:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800285c:	d004      	beq.n	8002868 <RCC_HSEConfig+0x28>
 800285e:	4770      	bx	lr
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002866:	e002      	b.n	800286e <RCC_HSEConfig+0x2e>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000

08002878 <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8002878:	4a03      	ldr	r2, [pc, #12]	; (8002888 <RCC_AdjustHSICalibrationValue+0x10>)
 800287a:	6813      	ldr	r3, [r2, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 800287c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8002880:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 8002884:	6010      	str	r0, [r2, #0]
 8002886:	4770      	bx	lr
 8002888:	40021000 	.word	0x40021000

0800288c <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800288c:	4b01      	ldr	r3, [pc, #4]	; (8002894 <RCC_HSICmd+0x8>)
 800288e:	6018      	str	r0, [r3, #0]
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	42420000 	.word	0x42420000

08002898 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8002898:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <RCC_PLLConfig+0x10>)
 800289a:	6853      	ldr	r3, [r2, #4]
 800289c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80028a0:	4319      	orrs	r1, r3
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 80028a2:	4308      	orrs	r0, r1
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80028a4:	6050      	str	r0, [r2, #4]
 80028a6:	4770      	bx	lr
 80028a8:	40021000 	.word	0x40021000

080028ac <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80028ac:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <RCC_PLLCmd+0x8>)
 80028ae:	6018      	str	r0, [r3, #0]
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	42420060 	.word	0x42420060

080028b8 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 80028b8:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <RCC_SYSCLKConfig+0x10>)
 80028ba:	6853      	ldr	r3, [r2, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80028bc:	f023 0303 	bic.w	r3, r3, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80028c0:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80028c2:	6050      	str	r0, [r2, #4]
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 80028cc:	4b02      	ldr	r3, [pc, #8]	; (80028d8 <RCC_GetSYSCLKSource+0xc>)
 80028ce:	6858      	ldr	r0, [r3, #4]
}
 80028d0:	f000 000c 	and.w	r0, r0, #12
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000

080028dc <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 80028dc:	4a03      	ldr	r2, [pc, #12]	; (80028ec <RCC_HCLKConfig+0x10>)
 80028de:	6853      	ldr	r3, [r2, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 80028e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80028e4:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80028e6:	6050      	str	r0, [r2, #4]
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000

080028f0 <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 80028f0:	4a03      	ldr	r2, [pc, #12]	; (8002900 <RCC_PCLK1Config+0x10>)
 80028f2:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 80028f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80028f8:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80028fa:	6050      	str	r0, [r2, #4]
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8002904:	4a03      	ldr	r2, [pc, #12]	; (8002914 <RCC_PCLK2Config+0x10>)
 8002906:	6853      	ldr	r3, [r2, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8002908:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800290c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002910:	6050      	str	r0, [r2, #4]
 8002912:	4770      	bx	lr
 8002914:	40021000 	.word	0x40021000

08002918 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800291a:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800291c:	b109      	cbz	r1, 8002922 <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800291e:	4310      	orrs	r0, r2
 8002920:	e001      	b.n	8002926 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8002922:	ea22 0000 	bic.w	r0, r2, r0
 8002926:	7018      	strb	r0, [r3, #0]
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021009 	.word	0x40021009

08002930 <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8002930:	4b01      	ldr	r3, [pc, #4]	; (8002938 <RCC_USBCLKConfig+0x8>)
 8002932:	6018      	str	r0, [r3, #0]
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	424200d8 	.word	0x424200d8

0800293c <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <RCC_ADCCLKConfig+0x10>)
 800293e:	6853      	ldr	r3, [r2, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8002940:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8002944:	4318      	orrs	r0, r3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002946:	6050      	str	r0, [r2, #4]
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000

08002950 <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <RCC_LSEConfig+0x1c>)
 8002952:	2200      	movs	r2, #0
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8002954:	2801      	cmp	r0, #1
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002956:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8002958:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800295a:	d002      	beq.n	8002962 <RCC_LSEConfig+0x12>
 800295c:	2804      	cmp	r0, #4
 800295e:	d002      	beq.n	8002966 <RCC_LSEConfig+0x16>
 8002960:	4770      	bx	lr
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8002962:	7018      	strb	r0, [r3, #0]
      break;
 8002964:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8002966:	2205      	movs	r2, #5
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	4770      	bx	lr
 800296c:	40021020 	.word	0x40021020

08002970 <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <RCC_LSICmd+0x8>)
 8002972:	6018      	str	r0, [r3, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	42420480 	.word	0x42420480

0800297c <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 800297c:	4a02      	ldr	r2, [pc, #8]	; (8002988 <RCC_RTCCLKConfig+0xc>)
 800297e:	6a13      	ldr	r3, [r2, #32]
 8002980:	4318      	orrs	r0, r3
 8002982:	6210      	str	r0, [r2, #32]
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000

0800298c <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800298c:	4b01      	ldr	r3, [pc, #4]	; (8002994 <RCC_RTCCLKCmd+0x8>)
 800298e:	6018      	str	r0, [r3, #0]
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	4242043c 	.word	0x4242043c

08002998 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8002998:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <RCC_GetClocksFreq+0x78>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800299a:	b510      	push	{r4, lr}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800299c:	6853      	ldr	r3, [r2, #4]
  
  switch (tmp)
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d003      	beq.n	80029ae <RCC_GetClocksFreq+0x16>
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d003      	beq.n	80029b2 <RCC_GetClocksFreq+0x1a>
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <RCC_GetClocksFreq+0x7c>)
 80029ac:	e011      	b.n	80029d2 <RCC_GetClocksFreq+0x3a>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <RCC_GetClocksFreq+0x80>)
 80029b0:	e00f      	b.n	80029d2 <RCC_GetClocksFreq+0x3a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80029b2:	6853      	ldr	r3, [r2, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80029b4:	6851      	ldr	r1, [r2, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80029b6:	f3c3 4383 	ubfx	r3, r3, #18, #4
      
      if (pllsource == 0x00)
 80029ba:	03cc      	lsls	r4, r1, #15
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80029bc:	f103 0302 	add.w	r3, r3, #2
      
      if (pllsource == 0x00)
 80029c0:	d401      	bmi.n	80029c6 <RCC_GetClocksFreq+0x2e>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80029c2:	4916      	ldr	r1, [pc, #88]	; (8002a1c <RCC_GetClocksFreq+0x84>)
 80029c4:	e004      	b.n	80029d0 <RCC_GetClocksFreq+0x38>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80029c6:	6851      	ldr	r1, [r2, #4]
 80029c8:	0389      	lsls	r1, r1, #14
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80029ca:	bf4c      	ite	mi
 80029cc:	4911      	ldrmi	r1, [pc, #68]	; (8002a14 <RCC_GetClocksFreq+0x7c>)
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80029ce:	4912      	ldrpl	r1, [pc, #72]	; (8002a18 <RCC_GetClocksFreq+0x80>)
 80029d0:	434b      	muls	r3, r1
 80029d2:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80029d4:	6853      	ldr	r3, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 80029d6:	4912      	ldr	r1, [pc, #72]	; (8002a20 <RCC_GetClocksFreq+0x88>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 80029d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 80029dc:	5ccc      	ldrb	r4, [r1, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80029de:	6803      	ldr	r3, [r0, #0]
 80029e0:	40e3      	lsrs	r3, r4
 80029e2:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80029e4:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 8;
 80029e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  presc = APBAHBPrescTable[tmp];
 80029ea:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80029ec:	fa23 f404 	lsr.w	r4, r3, r4
 80029f0:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80029f2:	6854      	ldr	r4, [r2, #4]
  tmp = tmp >> 11;
 80029f4:	f3c4 24c2 	ubfx	r4, r4, #11, #3
  presc = APBAHBPrescTable[tmp];
 80029f8:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80029fa:	40e3      	lsrs	r3, r4
 80029fc:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80029fe:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8002a00:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8002a04:	440a      	add	r2, r1
 8002a06:	7c12      	ldrb	r2, [r2, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8002a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a0c:	6103      	str	r3, [r0, #16]
 8002a0e:	bd10      	pop	{r4, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	007a1200 	.word	0x007a1200
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	003d0900 	.word	0x003d0900
 8002a20:	20000128 	.word	0x20000128

08002a24 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <RCC_AHBPeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002a26:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002a28:	b109      	cbz	r1, 8002a2e <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8002a2a:	4310      	orrs	r0, r2
 8002a2c:	e001      	b.n	8002a32 <RCC_AHBPeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8002a2e:	ea22 0000 	bic.w	r0, r2, r0
 8002a32:	6158      	str	r0, [r3, #20]
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002a3e:	699a      	ldr	r2, [r3, #24]
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a40:	b109      	cbz	r1, 8002a46 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8002a42:	4310      	orrs	r0, r2
 8002a44:	e001      	b.n	8002a4a <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8002a46:	ea22 0000 	bic.w	r0, r2, r0
 8002a4a:	6198      	str	r0, [r3, #24]
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000

08002a54 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002a56:	69da      	ldr	r2, [r3, #28]
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a58:	b109      	cbz	r1, 8002a5e <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002a5a:	4310      	orrs	r0, r2
 8002a5c:	e001      	b.n	8002a62 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002a5e:	ea22 0000 	bic.w	r0, r2, r0
 8002a62:	61d8      	str	r0, [r3, #28]
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002a6e:	68da      	ldr	r2, [r3, #12]
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a70:	b109      	cbz	r1, 8002a76 <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8002a72:	4310      	orrs	r0, r2
 8002a74:	e001      	b.n	8002a7a <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8002a76:	ea22 0000 	bic.w	r0, r2, r0
 8002a7a:	60d8      	str	r0, [r3, #12]
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000

08002a84 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002a86:	691a      	ldr	r2, [r3, #16]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a88:	b109      	cbz	r1, 8002a8e <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8002a8a:	4310      	orrs	r0, r2
 8002a8c:	e001      	b.n	8002a92 <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8002a8e:	ea22 0000 	bic.w	r0, r2, r0
 8002a92:	6118      	str	r0, [r3, #16]
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000

08002a9c <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8002a9c:	4b01      	ldr	r3, [pc, #4]	; (8002aa4 <RCC_BackupResetCmd+0x8>)
 8002a9e:	6018      	str	r0, [r3, #0]
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	42420440 	.word	0x42420440

08002aa8 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8002aa8:	4b01      	ldr	r3, [pc, #4]	; (8002ab0 <RCC_ClockSecuritySystemCmd+0x8>)
 8002aaa:	6018      	str	r0, [r3, #0]
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	4242004c 	.word	0x4242004c

08002ab4 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8002ab4:	4b01      	ldr	r3, [pc, #4]	; (8002abc <RCC_MCOConfig+0x8>)
 8002ab6:	7018      	strb	r0, [r3, #0]
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40021007 	.word	0x40021007

08002ac0 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8002ac0:	0942      	lsrs	r2, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8002ac2:	2a01      	cmp	r2, #1
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <RCC_GetFlagStatus+0x24>)
 8002ac6:	d101      	bne.n	8002acc <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e003      	b.n	8002ad4 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8002acc:	2a02      	cmp	r2, #2
  {
    statusreg = RCC->BDCR;
 8002ace:	bf0c      	ite	eq
 8002ad0:	6a1b      	ldreq	r3, [r3, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8002ad2:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
  {
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
 8002ad4:	f000 001f 	and.w	r0, r0, #31
 8002ad8:	fa23 f000 	lsr.w	r0, r3, r0
}
 8002adc:	f000 0001 	and.w	r0, r0, #1
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8002ae8:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8002aee:	2031      	movs	r0, #49	; 0x31
 8002af0:	f7ff ffe6 	bl	8002ac0 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8002af4:	9b01      	ldr	r3, [sp, #4]
 8002af6:	3301      	adds	r3, #1
 8002af8:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8002afa:	9b01      	ldr	r3, [sp, #4]
 8002afc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b00:	d001      	beq.n	8002b06 <RCC_WaitForHSEStartUp+0x1e>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d0f3      	beq.n	8002aee <RCC_WaitForHSEStartUp+0x6>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8002b06:	2031      	movs	r0, #49	; 0x31
 8002b08:	f7ff ffda 	bl	8002ac0 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 8002b0c:	3000      	adds	r0, #0
 8002b0e:	bf18      	it	ne
 8002b10:	2001      	movne	r0, #1
 8002b12:	b003      	add	sp, #12
 8002b14:	f85d fb04 	ldr.w	pc, [sp], #4

08002b18 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8002b18:	4a02      	ldr	r2, [pc, #8]	; (8002b24 <RCC_ClearFlag+0xc>)
 8002b1a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002b1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b20:	6253      	str	r3, [r2, #36]	; 0x24
 8002b22:	4770      	bx	lr
 8002b24:	40021000 	.word	0x40021000

08002b28 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <RCC_GetITStatus+0x10>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
  {
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
 8002b2c:	4218      	tst	r0, r3
}
 8002b2e:	bf14      	ite	ne
 8002b30:	2001      	movne	r0, #1
 8002b32:	2000      	moveq	r0, #0
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000

08002b3c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8002b3c:	4b01      	ldr	r3, [pc, #4]	; (8002b44 <RCC_ClearITPendingBit+0x8>)
 8002b3e:	7018      	strb	r0, [r3, #0]
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	4002100a 	.word	0x4002100a

08002b48 <SPI_I2S_DeInit>:
  *         reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8002b48:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <SPI_I2S_DeInit+0x58>)
 8002b4c:	4298      	cmp	r0, r3
 8002b4e:	d10b      	bne.n	8002b68 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8002b50:	2101      	movs	r1, #1
 8002b52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b56:	f7ff ff89 	bl	8002a6c <RCC_APB2PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8002b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b64:	f7ff bf82 	b.w	8002a6c <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8002b68:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <SPI_I2S_DeInit+0x5c>)
 8002b6a:	4298      	cmp	r0, r3
 8002b6c:	d108      	bne.n	8002b80 <SPI_I2S_DeInit+0x38>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8002b6e:	2101      	movs	r1, #1
 8002b70:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b74:	f7ff ff86 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8002b78:	2100      	movs	r1, #0
 8002b7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b7e:	e00a      	b.n	8002b96 <SPI_I2S_DeInit+0x4e>
  }
  else
  {
    if (SPIx == SPI3)
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <SPI_I2S_DeInit+0x60>)
 8002b82:	4298      	cmp	r0, r3
 8002b84:	d10b      	bne.n	8002b9e <SPI_I2S_DeInit+0x56>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8002b86:	2101      	movs	r1, #1
 8002b88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b8c:	f7ff ff7a 	bl	8002a84 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002b90:	2100      	movs	r1, #0
 8002b92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }
  }
}
 8002b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8002b9a:	f7ff bf73 	b.w	8002a84 <RCC_APB1PeriphResetCmd>
 8002b9e:	bd08      	pop	{r3, pc}
 8002ba0:	40013000 	.word	0x40013000
 8002ba4:	40003800 	.word	0x40003800
 8002ba8:	40003c00 	.word	0x40003c00

08002bac <SPI_Init>:
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8002bac:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002bae:	880a      	ldrh	r2, [r1, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8002bb0:	b510      	push	{r4, lr}

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8002bb2:	f403 5441 	and.w	r4, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8002bb6:	884b      	ldrh	r3, [r1, #2]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	888a      	ldrh	r2, [r1, #4]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	88ca      	ldrh	r2, [r1, #6]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	890a      	ldrh	r2, [r1, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	894a      	ldrh	r2, [r1, #10]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	898a      	ldrh	r2, [r1, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	89ca      	ldrh	r2, [r1, #14]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	4323      	orrs	r3, r4
 8002bd4:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8002bd6:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8002bd8:	8b83      	ldrh	r3, [r0, #28]
 8002bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8002be4:	8a0b      	ldrh	r3, [r1, #16]
 8002be6:	8203      	strh	r3, [r0, #16]
 8002be8:	bd10      	pop	{r4, pc}

08002bea <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8002bea:	8b83      	ldrh	r3, [r0, #28]
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8002bee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bf2:	f023 030f 	bic.w	r3, r3, #15
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002c00:	688b      	ldr	r3, [r1, #8]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002c02:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002c04:	2b02      	cmp	r3, #2
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8002c06:	b087      	sub	sp, #28
 8002c08:	4605      	mov	r5, r0
 8002c0a:	460c      	mov	r4, r1
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8002c0c:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8002c0e:	d023      	beq.n	8002c58 <I2S_Init+0x6e>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002c10:	888b      	ldrh	r3, [r1, #4]
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8002c12:	a801      	add	r0, sp, #4
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8002c14:	2b00      	cmp	r3, #0
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8002c16:	bf14      	ite	ne
 8002c18:	2702      	movne	r7, #2
 8002c1a:	2701      	moveq	r7, #1
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 8002c1c:	f7ff febc 	bl	8002998 <RCC_GetClocksFreq>
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002c20:	88e3      	ldrh	r3, [r4, #6]
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
      
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 8002c22:	9901      	ldr	r1, [sp, #4]
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002c28:	bf1c      	itt	ne
 8002c2a:	017f      	lslne	r7, r7, #5
 8002c2c:	fbb1 f1f7 	udivne	r1, r1, r7
 8002c30:	f04f 020a 	mov.w	r2, #10

    /* Compute the Real divider depending on the MCLK output state with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002c34:	bf08      	it	eq
 8002c36:	0a09      	lsreq	r1, r1, #8
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002c38:	434a      	muls	r2, r1
 8002c3a:	68a3      	ldr	r3, [r4, #8]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	3305      	adds	r3, #5
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;  
 8002c42:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8002c44:	b29b      	uxth	r3, r3
    }
    
    /* Remove the floating point */
    tmp = tmp / 10;  
 8002c46:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002c4a:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002c4e:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8002c50:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8002c54:	b292      	uxth	r2, r2
 8002c56:	e000      	b.n	8002c5a <I2S_Init+0x70>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8002c58:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8002c5a:	1e99      	subs	r1, r3, #2
 8002c5c:	b289      	uxth	r1, r1
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8002c5e:	29fe      	cmp	r1, #254	; 0xfe
 8002c60:	bf24      	itt	cs
 8002c62:	2200      	movcs	r2, #0
 8002c64:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 8002c66:	4313      	orrs	r3, r2
 8002c68:	88e2      	ldrh	r2, [r4, #6]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	842b      	strh	r3, [r5, #32]
 8002c70:	8823      	ldrh	r3, [r4, #0]
 8002c72:	88a2      	ldrh	r2, [r4, #4]
 8002c74:	431e      	orrs	r6, r3
 8002c76:	8863      	ldrh	r3, [r4, #2]
 8002c78:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
 8002c7c:	4333      	orrs	r3, r6
 8002c7e:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8002c80:	89a2      	ldrh	r2, [r4, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
 8002c86:	83ab      	strh	r3, [r5, #28]
}
 8002c88:	b007      	add	sp, #28
 8002c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c8c <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8002c90:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8002c92:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8002c94:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8002c96:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8002c98:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8002c9a:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8002c9c:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	8203      	strh	r3, [r0, #16]
 8002ca2:	4770      	bx	lr

08002ca4 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8002ca4:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8002ca6:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8002ca8:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8002caa:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8002cac:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8002cae:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8002cb0:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8002cb2:	8183      	strh	r3, [r0, #12]
 8002cb4:	4770      	bx	lr

08002cb6 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8002cb6:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002cb8:	b119      	cbz	r1, 8002cc2 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc0:	e003      	b.n	8002cca <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8002cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc6:	041b      	lsls	r3, r3, #16
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	8003      	strh	r3, [r0, #0]
 8002ccc:	4770      	bx	lr

08002cce <I2S_Cmd>:
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 8002cce:	8b83      	ldrh	r3, [r0, #28]
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002cd0:	b119      	cbz	r1, 8002cda <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd8:	e003      	b.n	8002ce2 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
 8002cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cde:	041b      	lsls	r3, r3, #16
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	8383      	strh	r3, [r0, #28]
 8002ce4:	4770      	bx	lr

08002ce6 <SPI_I2S_ITConfig>:

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	0909      	lsrs	r1, r1, #4
 8002cea:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002cee:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8002cf0:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002cf2:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8002cf4:	b10a      	cbz	r2, 8002cfa <SPI_I2S_ITConfig+0x14>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8002cf6:	4319      	orrs	r1, r3
 8002cf8:	e001      	b.n	8002cfe <SPI_I2S_ITConfig+0x18>
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8002cfa:	ea23 0101 	bic.w	r1, r3, r1
 8002cfe:	8081      	strh	r1, [r0, #4]
 8002d00:	4770      	bx	lr

08002d02 <SPI_I2S_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002d02:	8883      	ldrh	r3, [r0, #4]
 8002d04:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 8002d06:	b10a      	cbz	r2, 8002d0c <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8002d08:	4319      	orrs	r1, r3
 8002d0a:	e001      	b.n	8002d10 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8002d0c:	ea23 0101 	bic.w	r1, r3, r1
 8002d10:	8081      	strh	r1, [r0, #4]
 8002d12:	4770      	bx	lr

08002d14 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002d14:	8181      	strh	r1, [r0, #12]
 8002d16:	4770      	bx	lr

08002d18 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8002d18:	8980      	ldrh	r0, [r0, #12]
}
 8002d1a:	b280      	uxth	r0, r0
 8002d1c:	4770      	bx	lr

08002d1e <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8002d1e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8002d22:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002d24:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002d26:	bf0b      	itete	eq
 8002d28:	f423 7380 	biceq.w	r3, r3, #256	; 0x100
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002d2c:	b29b      	uxthne	r3, r3
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002d2e:	041b      	lsleq	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8002d30:	f443 7380 	orrne.w	r3, r3, #256	; 0x100
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8002d34:	bf08      	it	eq
 8002d36:	0c1b      	lsreq	r3, r3, #16
 8002d38:	8003      	strh	r3, [r0, #0]
 8002d3a:	4770      	bx	lr

08002d3c <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8002d3c:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d3e:	b119      	cbz	r1, 8002d48 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	e003      	b.n	8002d50 <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 8002d48:	f023 0304 	bic.w	r3, r3, #4
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	8083      	strh	r3, [r0, #4]
 8002d52:	4770      	bx	lr

08002d54 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8002d54:	8803      	ldrh	r3, [r0, #0]
 8002d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8002d60:	8803      	ldrh	r3, [r0, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4319      	orrs	r1, r3
 8002d66:	8001      	strh	r1, [r0, #0]
 8002d68:	4770      	bx	lr

08002d6a <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= CR1_CRCNext_Set;
 8002d6a:	8803      	ldrh	r3, [r0, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d72:	8003      	strh	r3, [r0, #0]
 8002d74:	4770      	bx	lr

08002d76 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8002d76:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d78:	b119      	cbz	r1, 8002d82 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d80:	e003      	b.n	8002d8a <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
 8002d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	8003      	strh	r3, [r0, #0]
 8002d8c:	4770      	bx	lr

08002d8e <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8002d8e:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8002d90:	bf14      	ite	ne
 8002d92:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8002d94:	8a80      	ldrheq	r0, [r0, #20]
 8002d96:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8002d98:	4770      	bx	lr

08002d9a <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8002d9a:	8a00      	ldrh	r0, [r0, #16]
}
 8002d9c:	b280      	uxth	r0, r0
 8002d9e:	4770      	bx	lr

08002da0 <SPI_BiDirectionalLineConfig>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002da0:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8002da2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002da6:	bf15      	itete	ne
 8002da8:	f423 4380 	bicne.w	r3, r3, #16384	; 0x4000
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002dac:	b29b      	uxtheq	r3, r3
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002dae:	041b      	lslne	r3, r3, #16
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8002db0:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8002db4:	bf18      	it	ne
 8002db6:	0c1b      	lsrne	r3, r3, #16
 8002db8:	8003      	strh	r3, [r0, #0]
 8002dba:	4770      	bx	lr

08002dbc <SPI_I2S_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002dbc:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002dbe:	4219      	tst	r1, r3
}
 8002dc0:	bf14      	ite	ne
 8002dc2:	2001      	movne	r0, #1
 8002dc4:	2000      	moveq	r0, #0
 8002dc6:	4770      	bx	lr

08002dc8 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8002dc8:	43c9      	mvns	r1, r1
 8002dca:	b289      	uxth	r1, r1
 8002dcc:	8101      	strh	r1, [r0, #8]
 8002dce:	4770      	bx	lr

08002dd0 <SPI_I2S_GetITStatus>:
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8002dd0:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002dd2:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002dd4:	8903      	ldrh	r3, [r0, #8]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f001 000f 	and.w	r0, r1, #15
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	fa02 f000 	lsl.w	r0, r2, r0
 8002de2:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8002de4:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8002de6:	d005      	beq.n	8002df4 <SPI_I2S_GetITStatus+0x24>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8002de8:	0909      	lsrs	r1, r1, #4
 8002dea:	408a      	lsls	r2, r1
 8002dec:	4214      	tst	r4, r2
 8002dee:	bf14      	ite	ne
 8002df0:	2001      	movne	r0, #1
 8002df2:	2000      	moveq	r0, #0
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8002df4:	bd10      	pop	{r4, pc}

08002df6 <SPI_I2S_ClearITPendingBit>:

  /* Get the SPI IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8002df6:	f001 010f 	and.w	r1, r1, #15
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	fa03 f101 	lsl.w	r1, r3, r1
 8002e00:	43c9      	mvns	r1, r1
 8002e02:	b289      	uxth	r1, r1
 8002e04:	8101      	strh	r1, [r0, #8]
 8002e06:	4770      	bx	lr

08002e08 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002e08:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002e0a:	4b21      	ldr	r3, [pc, #132]	; (8002e90 <USART_DeInit+0x88>)
 8002e0c:	4298      	cmp	r0, r3
 8002e0e:	d10b      	bne.n	8002e28 <USART_DeInit+0x20>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002e10:	2101      	movs	r1, #1
 8002e12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e16:	f7ff fe29 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    }
  }
}
 8002e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e24:	f7ff be22 	b.w	8002a6c <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <USART_DeInit+0x8c>)
 8002e2a:	4298      	cmp	r0, r3
 8002e2c:	d108      	bne.n	8002e40 <USART_DeInit+0x38>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002e2e:	2101      	movs	r1, #1
 8002e30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e34:	f7ff fe26 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002e38:	2100      	movs	r1, #0
 8002e3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e3e:	e022      	b.n	8002e86 <USART_DeInit+0x7e>
  }
  else if (USARTx == USART3)
 8002e40:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <USART_DeInit+0x90>)
 8002e42:	4298      	cmp	r0, r3
 8002e44:	d108      	bne.n	8002e58 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002e46:	2101      	movs	r1, #1
 8002e48:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e4c:	f7ff fe1a 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002e50:	2100      	movs	r1, #0
 8002e52:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e56:	e016      	b.n	8002e86 <USART_DeInit+0x7e>
  }    
  else if (USARTx == UART4)
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <USART_DeInit+0x94>)
 8002e5a:	4298      	cmp	r0, r3
 8002e5c:	d108      	bne.n	8002e70 <USART_DeInit+0x68>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002e5e:	2101      	movs	r1, #1
 8002e60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e64:	f7ff fe0e 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e6e:	e00a      	b.n	8002e86 <USART_DeInit+0x7e>
  }    
  else
  {
    if (USARTx == UART5)
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <USART_DeInit+0x98>)
 8002e72:	4298      	cmp	r0, r3
 8002e74:	d10b      	bne.n	8002e8e <USART_DeInit+0x86>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002e76:	2101      	movs	r1, #1
 8002e78:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002e7c:	f7ff fe02 	bl	8002a84 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002e80:	2100      	movs	r1, #0
 8002e82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    }
  }
}
 8002e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == UART5)
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002e8a:	f7ff bdfb 	b.w	8002a84 <RCC_APB1PeriphResetCmd>
 8002e8e:	bd08      	pop	{r3, pc}
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40004400 	.word	0x40004400
 8002e98:	40004800 	.word	0x40004800
 8002e9c:	40004c00 	.word	0x40004c00
 8002ea0:	40005000 	.word	0x40005000

08002ea4 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	460e      	mov	r6, r1
 8002ea8:	4604      	mov	r4, r0
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002eaa:	8a03      	ldrh	r3, [r0, #16]
 8002eac:	88ca      	ldrh	r2, [r1, #6]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eb4:	4313      	orrs	r3, r2
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002eb6:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002eb8:	8982      	ldrh	r2, [r0, #12]
 8002eba:	8889      	ldrh	r1, [r1, #4]
 8002ebc:	8933      	ldrh	r3, [r6, #8]
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	8971      	ldrh	r1, [r6, #10]
 8002ec4:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	f022 020c 	bic.w	r2, r2, #12
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002ed2:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002ed4:	8a83      	ldrh	r3, [r0, #20]
 8002ed6:	89b2      	ldrh	r2, [r6, #12]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002ede:	b086      	sub	sp, #24
 8002ee0:	4313      	orrs	r3, r2
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002ee2:	8283      	strh	r3, [r0, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002ee4:	a801      	add	r0, sp, #4
 8002ee6:	f7ff fd57 	bl	8002998 <RCC_GetClocksFreq>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002eea:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <USART_Init+0xa4>)
 8002eec:	9b03      	ldr	r3, [sp, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002eee:	9d04      	ldr	r5, [sp, #16]
 8002ef0:	6831      	ldr	r1, [r6, #0]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002ef2:	4294      	cmp	r4, r2
 8002ef4:	bf18      	it	ne
 8002ef6:	461d      	movne	r5, r3
 8002ef8:	2219      	movs	r2, #25
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002efa:	436a      	muls	r2, r5
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002efc:	89a3      	ldrh	r3, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002efe:	2664      	movs	r6, #100	; 0x64
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f00:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002f04:	bf14      	ite	ne
 8002f06:	004d      	lslne	r5, r1, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002f08:	008d      	lsleq	r5, r1, #2
 8002f0a:	fbb2 f5f5 	udiv	r5, r2, r5
  }
  tmpreg = (integerdivider / 100) << 4;
 8002f0e:	fbb5 f0f6 	udiv	r0, r5, r6

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f12:	89a2      	ldrh	r2, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002f14:	0100      	lsls	r0, r0, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002f16:	0901      	lsrs	r1, r0, #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f18:	0412      	lsls	r2, r2, #16
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002f1a:	fb06 5311 	mls	r3, r6, r1, r5

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8002f1e:	d507      	bpl.n	8002f30 <USART_Init+0x8c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002f20:	00d9      	lsls	r1, r3, #3
 8002f22:	3132      	adds	r1, #50	; 0x32
 8002f24:	fbb1 f2f6 	udiv	r2, r1, r6
 8002f28:	f002 0207 	and.w	r2, r2, #7
 8002f2c:	4310      	orrs	r0, r2
 8002f2e:	e006      	b.n	8002f3e <USART_Init+0x9a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002f30:	011a      	lsls	r2, r3, #4
 8002f32:	3232      	adds	r2, #50	; 0x32
 8002f34:	fbb2 f3f6 	udiv	r3, r2, r6
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	4318      	orrs	r0, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8002f3e:	b280      	uxth	r0, r0
 8002f40:	8120      	strh	r0, [r4, #8]
}
 8002f42:	b006      	add	sp, #24
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
 8002f46:	bf00      	nop
 8002f48:	40013800 	.word	0x40013800

08002f4c <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002f4c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002f50:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002f52:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002f54:	2300      	movs	r3, #0
 8002f56:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002f58:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002f5a:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002f5c:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002f5e:	8183      	strh	r3, [r0, #12]
 8002f60:	4770      	bx	lr

08002f62 <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002f62:	884b      	ldrh	r3, [r1, #2]
 8002f64:	b510      	push	{r4, lr}
 8002f66:	880c      	ldrh	r4, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002f68:	8a02      	ldrh	r2, [r0, #16]
 8002f6a:	4323      	orrs	r3, r4
 8002f6c:	888c      	ldrh	r4, [r1, #4]
 8002f6e:	88c9      	ldrh	r1, [r1, #6]
 8002f70:	b292      	uxth	r2, r2
 8002f72:	4323      	orrs	r3, r4
 8002f74:	430b      	orrs	r3, r1
 8002f76:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002f7e:	8203      	strh	r3, [r0, #16]
 8002f80:	bd10      	pop	{r4, pc}

08002f82 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002f82:	2300      	movs	r3, #0
 8002f84:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002f86:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002f88:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002f8a:	80c3      	strh	r3, [r0, #6]
 8002f8c:	4770      	bx	lr

08002f8e <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002f8e:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002f90:	b119      	cbz	r1, 8002f9a <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f98:	e003      	b.n	8002fa2 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8002f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	8183      	strh	r3, [r0, #12]
 8002fa4:	4770      	bx	lr

08002fa6 <USART_ITConfig>:
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8002fa6:	2301      	movs	r3, #1
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002fa8:	b510      	push	{r4, lr}
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002faa:	f3c1 1442 	ubfx	r4, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002fae:	429c      	cmp	r4, r3
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8002fb0:	f001 011f 	and.w	r1, r1, #31
 8002fb4:	fa03 f101 	lsl.w	r1, r3, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002fb8:	d101      	bne.n	8002fbe <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002fba:	300c      	adds	r0, #12
 8002fbc:	e003      	b.n	8002fc6 <USART_ITConfig+0x20>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002fbe:	2c02      	cmp	r4, #2
  {
    usartxbase += 0x10;
 8002fc0:	bf0c      	ite	eq
 8002fc2:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002fc4:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002fc6:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002fc8:	b10a      	cbz	r2, 8002fce <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002fca:	4319      	orrs	r1, r3
 8002fcc:	e001      	b.n	8002fd2 <USART_ITConfig+0x2c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002fce:	ea23 0101 	bic.w	r1, r3, r1
 8002fd2:	6001      	str	r1, [r0, #0]
 8002fd4:	bd10      	pop	{r4, pc}

08002fd6 <USART_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002fd6:	8a83      	ldrh	r3, [r0, #20]
 8002fd8:	b29b      	uxth	r3, r3
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
 8002fda:	b10a      	cbz	r2, 8002fe0 <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002fdc:	4319      	orrs	r1, r3
 8002fde:	e001      	b.n	8002fe4 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002fe0:	ea23 0101 	bic.w	r1, r3, r1
 8002fe4:	8281      	strh	r1, [r0, #20]
 8002fe6:	4770      	bx	lr

08002fe8 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
 8002fe8:	8a03      	ldrh	r3, [r0, #16]
 8002fea:	f023 030f 	bic.w	r3, r3, #15
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002ff4:	8a03      	ldrh	r3, [r0, #16]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4319      	orrs	r1, r3
 8002ffa:	8201      	strh	r1, [r0, #16]
 8002ffc:	4770      	bx	lr

08002ffe <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
 8002ffe:	8983      	ldrh	r3, [r0, #12]
 8003000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003004:	041b      	lsls	r3, r3, #16
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 800300a:	8983      	ldrh	r3, [r0, #12]
 800300c:	b29b      	uxth	r3, r3
 800300e:	4319      	orrs	r1, r3
 8003010:	8181      	strh	r1, [r0, #12]
 8003012:	4770      	bx	lr

08003014 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8003014:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8003016:	b119      	cbz	r1, 8003020 <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
 8003018:	b29b      	uxth	r3, r3
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	e003      	b.n	8003028 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
 8003020:	f023 0302 	bic.w	r3, r3, #2
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	8183      	strh	r3, [r0, #12]
 800302a:	4770      	bx	lr

0800302c <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
 800302c:	8a03      	ldrh	r3, [r0, #16]
 800302e:	f023 0320 	bic.w	r3, r3, #32
 8003032:	041b      	lsls	r3, r3, #16
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8003038:	8a03      	ldrh	r3, [r0, #16]
 800303a:	b29b      	uxth	r3, r3
 800303c:	4319      	orrs	r1, r3
 800303e:	8201      	strh	r1, [r0, #16]
 8003040:	4770      	bx	lr

08003042 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8003042:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003044:	b119      	cbz	r1, 800304e <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
 8003046:	b29b      	uxth	r3, r3
 8003048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800304c:	e003      	b.n	8003056 <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
 800304e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	8203      	strh	r3, [r0, #16]
 8003058:	4770      	bx	lr

0800305a <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800305a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800305e:	8081      	strh	r1, [r0, #4]
 8003060:	4770      	bx	lr

08003062 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8003062:	8880      	ldrh	r0, [r0, #4]
}
 8003064:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8003068:	4770      	bx	lr

0800306a <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
 800306a:	8983      	ldrh	r3, [r0, #12]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	8183      	strh	r3, [r0, #12]
 8003074:	4770      	bx	lr

08003076 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
 8003076:	8b03      	ldrh	r3, [r0, #24]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800307c:	8b03      	ldrh	r3, [r0, #24]
 800307e:	b29b      	uxth	r3, r3
 8003080:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003084:	8301      	strh	r1, [r0, #24]
 8003086:	4770      	bx	lr

08003088 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
 8003088:	8b03      	ldrh	r3, [r0, #24]
 800308a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800308e:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8003090:	8b03      	ldrh	r3, [r0, #24]
 8003092:	b29b      	uxth	r3, r3
 8003094:	4319      	orrs	r1, r3
 8003096:	8301      	strh	r1, [r0, #24]
 8003098:	4770      	bx	lr

0800309a <USART_SmartCardCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800309a:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800309c:	b119      	cbz	r1, 80030a6 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f043 0320 	orr.w	r3, r3, #32
 80030a4:	e003      	b.n	80030ae <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
 80030a6:	f023 0320 	bic.w	r3, r3, #32
 80030aa:	041b      	lsls	r3, r3, #16
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	8283      	strh	r3, [r0, #20]
 80030b0:	4770      	bx	lr

080030b2 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80030b2:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80030b4:	b119      	cbz	r1, 80030be <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f043 0310 	orr.w	r3, r3, #16
 80030bc:	e003      	b.n	80030c6 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
 80030be:	f023 0310 	bic.w	r3, r3, #16
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	8283      	strh	r3, [r0, #20]
 80030c8:	4770      	bx	lr

080030ca <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80030ca:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80030cc:	b119      	cbz	r1, 80030d6 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	e003      	b.n	80030de <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
 80030d6:	f023 0308 	bic.w	r3, r3, #8
 80030da:	041b      	lsls	r3, r3, #16
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	8283      	strh	r3, [r0, #20]
 80030e0:	4770      	bx	lr

080030e2 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 80030e2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80030e4:	b129      	cbz	r1, 80030f2 <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
 80030e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	e001      	b.n	80030f6 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
 80030f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80030f6:	8183      	strh	r3, [r0, #12]
 80030f8:	4770      	bx	lr

080030fa <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80030fa:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80030fc:	b119      	cbz	r1, 8003106 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003104:	e003      	b.n	800310e <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
 8003106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	8283      	strh	r3, [r0, #20]
 8003110:	4770      	bx	lr

08003112 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
 8003112:	8a83      	ldrh	r3, [r0, #20]
 8003114:	f023 0304 	bic.w	r3, r3, #4
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	0c1b      	lsrs	r3, r3, #16
 800311c:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800311e:	8a83      	ldrh	r3, [r0, #20]
 8003120:	b29b      	uxth	r3, r3
 8003122:	4319      	orrs	r1, r3
 8003124:	8281      	strh	r1, [r0, #20]
 8003126:	4770      	bx	lr

08003128 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 8003128:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800312a:	b119      	cbz	r1, 8003134 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
 800312c:	b29b      	uxth	r3, r3
 800312e:	f043 0302 	orr.w	r3, r3, #2
 8003132:	e003      	b.n	800313c <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
 8003134:	f023 0302 	bic.w	r3, r3, #2
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	0c1b      	lsrs	r3, r3, #16
 800313c:	8283      	strh	r3, [r0, #20]
 800313e:	4770      	bx	lr

08003140 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8003140:	8803      	ldrh	r3, [r0, #0]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8003142:	4219      	tst	r1, r3
}
 8003144:	bf14      	ite	ne
 8003146:	2001      	movne	r0, #1
 8003148:	2000      	moveq	r0, #0
 800314a:	4770      	bx	lr

0800314c <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 800314c:	43c9      	mvns	r1, r1
 800314e:	b289      	uxth	r1, r1
 8003150:	8001      	strh	r1, [r0, #0]
 8003152:	4770      	bx	lr

08003154 <USART_GetITStatus>:
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8003154:	2301      	movs	r3, #1
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003156:	b510      	push	{r4, lr}
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003158:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 800315c:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003160:	429c      	cmp	r4, r3
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8003162:	fa03 f202 	lsl.w	r2, r3, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003166:	d101      	bne.n	800316c <USART_GetITStatus+0x18>
  {
    itmask &= USARTx->CR1;
 8003168:	8983      	ldrh	r3, [r0, #12]
 800316a:	e003      	b.n	8003174 <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800316c:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 800316e:	bf0c      	ite	eq
 8003170:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003172:	8a83      	ldrhne	r3, [r0, #20]
 8003174:	b29b      	uxth	r3, r3
 8003176:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8003178:	8802      	ldrh	r2, [r0, #0]
 800317a:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800317c:	b143      	cbz	r3, 8003190 <USART_GetITStatus+0x3c>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 800317e:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8003180:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8003182:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8003186:	420a      	tst	r2, r1
 8003188:	bf14      	ite	ne
 800318a:	4618      	movne	r0, r3
 800318c:	2000      	moveq	r0, #0
 800318e:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8003190:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8003192:	bd10      	pop	{r4, pc}

08003194 <USART_ClearITPendingBit>:
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
  USARTx->SR = (uint16_t)~itmask;
 8003194:	0a09      	lsrs	r1, r1, #8
 8003196:	2301      	movs	r3, #1
 8003198:	fa03 f101 	lsl.w	r1, r3, r1
 800319c:	43c9      	mvns	r1, r1
 800319e:	b289      	uxth	r1, r1
 80031a0:	8001      	strh	r1, [r0, #0]
 80031a2:	4770      	bx	lr

080031a4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80031a4:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80031a6:	8c05      	ldrh	r5, [r0, #32]
 80031a8:	f025 0501 	bic.w	r5, r5, #1
 80031ac:	042d      	lsls	r5, r5, #16
 80031ae:	0c2d      	lsrs	r5, r5, #16
 80031b0:	8405      	strh	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b2:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80031b4:	8c04      	ldrh	r4, [r0, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
 80031b6:	b2ad      	uxth	r5, r5
 80031b8:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 80031bc:	432a      	orrs	r2, r5
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80031be:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80031c2:	b29a      	uxth	r2, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <TI1_Config+0x64>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80031c6:	b2a4      	uxth	r4, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80031c8:	4298      	cmp	r0, r3
 80031ca:	d012      	beq.n	80031f2 <TI1_Config+0x4e>
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	4298      	cmp	r0, r3
 80031d2:	d00e      	beq.n	80031f2 <TI1_Config+0x4e>
 80031d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80031d8:	d00b      	beq.n	80031f2 <TI1_Config+0x4e>
 80031da:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 80031de:	4298      	cmp	r0, r3
 80031e0:	d007      	beq.n	80031f2 <TI1_Config+0x4e>
 80031e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e6:	4298      	cmp	r0, r3
 80031e8:	d003      	beq.n	80031f2 <TI1_Config+0x4e>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80031ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ee:	4298      	cmp	r0, r3
 80031f0:	d102      	bne.n	80031f8 <TI1_Config+0x54>
 80031f2:	f024 0402 	bic.w	r4, r4, #2
 80031f6:	e001      	b.n	80031fc <TI1_Config+0x58>
 80031f8:	f024 040a 	bic.w	r4, r4, #10
 80031fc:	f044 0401 	orr.w	r4, r4, #1
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8003200:	4321      	orrs	r1, r4
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003202:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003204:	8401      	strh	r1, [r0, #32]
 8003206:	bd30      	pop	{r4, r5, pc}
 8003208:	40012c00 	.word	0x40012c00

0800320c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800320c:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800320e:	8c04      	ldrh	r4, [r0, #32]
 8003210:	f024 0410 	bic.w	r4, r4, #16
 8003214:	0424      	lsls	r4, r4, #16
 8003216:	0c24      	lsrs	r4, r4, #16
 8003218:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800321a:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800321c:	8c04      	ldrh	r4, [r0, #32]
 800321e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 8003222:	052d      	lsls	r5, r5, #20
 8003224:	0d2d      	lsrs	r5, r5, #20
 8003226:	ea45 2202 	orr.w	r2, r5, r2, lsl #8
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800322a:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <TI2_Config+0x74>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8003230:	b2a4      	uxth	r4, r4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003232:	4290      	cmp	r0, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8003234:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003236:	d012      	beq.n	800325e <TI2_Config+0x52>
 8003238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800323c:	4290      	cmp	r0, r2
 800323e:	d00e      	beq.n	800325e <TI2_Config+0x52>
 8003240:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003244:	d00b      	beq.n	800325e <TI2_Config+0x52>
 8003246:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800324a:	4290      	cmp	r0, r2
 800324c:	d007      	beq.n	800325e <TI2_Config+0x52>
 800324e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003252:	4290      	cmp	r0, r2
 8003254:	d003      	beq.n	800325e <TI2_Config+0x52>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800325a:	4290      	cmp	r0, r2
 800325c:	d107      	bne.n	800326e <TI2_Config+0x62>
 800325e:	f024 0420 	bic.w	r4, r4, #32
 8003262:	f044 0410 	orr.w	r4, r4, #16
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8003266:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
 800326a:	b289      	uxth	r1, r1
 800326c:	e004      	b.n	8003278 <TI2_Config+0x6c>
 800326e:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
 8003272:	f044 0410 	orr.w	r4, r4, #16
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8003276:	4321      	orrs	r1, r4
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003278:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800327a:	8401      	strh	r1, [r0, #32]
 800327c:	bd30      	pop	{r4, r5, pc}
 800327e:	bf00      	nop
 8003280:	40012c00 	.word	0x40012c00

08003284 <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8003284:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8003286:	4b61      	ldr	r3, [pc, #388]	; (800340c <TIM_DeInit+0x188>)
 8003288:	4298      	cmp	r0, r3
 800328a:	d108      	bne.n	800329e <TIM_DeInit+0x1a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800328c:	2101      	movs	r1, #1
 800328e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003292:	f7ff fbeb 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8003296:	2100      	movs	r1, #0
 8003298:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800329c:	e0b1      	b.n	8003402 <TIM_DeInit+0x17e>
  }     
  else if (TIMx == TIM2)
 800329e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032a2:	d106      	bne.n	80032b2 <TIM_DeInit+0x2e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 80032a4:	2101      	movs	r1, #1
 80032a6:	4608      	mov	r0, r1
 80032a8:	f7ff fbec 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 80032ac:	2100      	movs	r1, #0
 80032ae:	2001      	movs	r0, #1
 80032b0:	e008      	b.n	80032c4 <TIM_DeInit+0x40>
  }
  else if (TIMx == TIM3)
 80032b2:	4b57      	ldr	r3, [pc, #348]	; (8003410 <TIM_DeInit+0x18c>)
 80032b4:	4298      	cmp	r0, r3
 80032b6:	d109      	bne.n	80032cc <TIM_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 80032b8:	2101      	movs	r1, #1
 80032ba:	2002      	movs	r0, #2
 80032bc:	f7ff fbe2 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80032c0:	2100      	movs	r1, #0
 80032c2:	2002      	movs	r0, #2
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
}
 80032c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 80032c8:	f7ff bbdc 	b.w	8002a84 <RCC_APB1PeriphResetCmd>
  }
  else if (TIMx == TIM4)
 80032cc:	4b51      	ldr	r3, [pc, #324]	; (8003414 <TIM_DeInit+0x190>)
 80032ce:	4298      	cmp	r0, r3
 80032d0:	d106      	bne.n	80032e0 <TIM_DeInit+0x5c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 80032d2:	2101      	movs	r1, #1
 80032d4:	2004      	movs	r0, #4
 80032d6:	f7ff fbd5 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 80032da:	2100      	movs	r1, #0
 80032dc:	2004      	movs	r0, #4
 80032de:	e7f1      	b.n	80032c4 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM5)
 80032e0:	4b4d      	ldr	r3, [pc, #308]	; (8003418 <TIM_DeInit+0x194>)
 80032e2:	4298      	cmp	r0, r3
 80032e4:	d106      	bne.n	80032f4 <TIM_DeInit+0x70>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80032e6:	2101      	movs	r1, #1
 80032e8:	2008      	movs	r0, #8
 80032ea:	f7ff fbcb 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80032ee:	2100      	movs	r1, #0
 80032f0:	2008      	movs	r0, #8
 80032f2:	e7e7      	b.n	80032c4 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM6)
 80032f4:	4b49      	ldr	r3, [pc, #292]	; (800341c <TIM_DeInit+0x198>)
 80032f6:	4298      	cmp	r0, r3
 80032f8:	d106      	bne.n	8003308 <TIM_DeInit+0x84>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80032fa:	2101      	movs	r1, #1
 80032fc:	2010      	movs	r0, #16
 80032fe:	f7ff fbc1 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8003302:	2100      	movs	r1, #0
 8003304:	2010      	movs	r0, #16
 8003306:	e7dd      	b.n	80032c4 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM7)
 8003308:	4b45      	ldr	r3, [pc, #276]	; (8003420 <TIM_DeInit+0x19c>)
 800330a:	4298      	cmp	r0, r3
 800330c:	d106      	bne.n	800331c <TIM_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800330e:	2101      	movs	r1, #1
 8003310:	2020      	movs	r0, #32
 8003312:	f7ff fbb7 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8003316:	2100      	movs	r1, #0
 8003318:	2020      	movs	r0, #32
 800331a:	e7d3      	b.n	80032c4 <TIM_DeInit+0x40>
  } 
  else if (TIMx == TIM8)
 800331c:	4b41      	ldr	r3, [pc, #260]	; (8003424 <TIM_DeInit+0x1a0>)
 800331e:	4298      	cmp	r0, r3
 8003320:	d108      	bne.n	8003334 <TIM_DeInit+0xb0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8003322:	2101      	movs	r1, #1
 8003324:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003328:	f7ff fba0 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 800332c:	2100      	movs	r1, #0
 800332e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003332:	e066      	b.n	8003402 <TIM_DeInit+0x17e>
  }
  else if (TIMx == TIM9)
 8003334:	4b3c      	ldr	r3, [pc, #240]	; (8003428 <TIM_DeInit+0x1a4>)
 8003336:	4298      	cmp	r0, r3
 8003338:	d108      	bne.n	800334c <TIM_DeInit+0xc8>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800333a:	2101      	movs	r1, #1
 800333c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003340:	f7ff fb94 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8003344:	2100      	movs	r1, #0
 8003346:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800334a:	e05a      	b.n	8003402 <TIM_DeInit+0x17e>
   }  
  else if (TIMx == TIM10)
 800334c:	4b37      	ldr	r3, [pc, #220]	; (800342c <TIM_DeInit+0x1a8>)
 800334e:	4298      	cmp	r0, r3
 8003350:	d108      	bne.n	8003364 <TIM_DeInit+0xe0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8003352:	2101      	movs	r1, #1
 8003354:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003358:	f7ff fb88 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800335c:	2100      	movs	r1, #0
 800335e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003362:	e04e      	b.n	8003402 <TIM_DeInit+0x17e>
  }  
  else if (TIMx == TIM11) 
 8003364:	4b32      	ldr	r3, [pc, #200]	; (8003430 <TIM_DeInit+0x1ac>)
 8003366:	4298      	cmp	r0, r3
 8003368:	d108      	bne.n	800337c <TIM_DeInit+0xf8>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800336a:	2101      	movs	r1, #1
 800336c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003370:	f7ff fb7c 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8003374:	2100      	movs	r1, #0
 8003376:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800337a:	e042      	b.n	8003402 <TIM_DeInit+0x17e>
  }  
  else if (TIMx == TIM12)
 800337c:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <TIM_DeInit+0x1b0>)
 800337e:	4298      	cmp	r0, r3
 8003380:	d106      	bne.n	8003390 <TIM_DeInit+0x10c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8003382:	2101      	movs	r1, #1
 8003384:	2040      	movs	r0, #64	; 0x40
 8003386:	f7ff fb7d 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800338a:	2100      	movs	r1, #0
 800338c:	2040      	movs	r0, #64	; 0x40
 800338e:	e799      	b.n	80032c4 <TIM_DeInit+0x40>
  }  
  else if (TIMx == TIM13) 
 8003390:	4b29      	ldr	r3, [pc, #164]	; (8003438 <TIM_DeInit+0x1b4>)
 8003392:	4298      	cmp	r0, r3
 8003394:	d106      	bne.n	80033a4 <TIM_DeInit+0x120>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8003396:	2101      	movs	r1, #1
 8003398:	2080      	movs	r0, #128	; 0x80
 800339a:	f7ff fb73 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800339e:	2100      	movs	r1, #0
 80033a0:	2080      	movs	r0, #128	; 0x80
 80033a2:	e78f      	b.n	80032c4 <TIM_DeInit+0x40>
  }
  else if (TIMx == TIM14) 
 80033a4:	4b25      	ldr	r3, [pc, #148]	; (800343c <TIM_DeInit+0x1b8>)
 80033a6:	4298      	cmp	r0, r3
 80033a8:	d108      	bne.n	80033bc <TIM_DeInit+0x138>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80033aa:	2101      	movs	r1, #1
 80033ac:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033b0:	f7ff fb68 	bl	8002a84 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 80033b4:	2100      	movs	r1, #0
 80033b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033ba:	e783      	b.n	80032c4 <TIM_DeInit+0x40>
  }        
  else if (TIMx == TIM15)
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <TIM_DeInit+0x1bc>)
 80033be:	4298      	cmp	r0, r3
 80033c0:	d108      	bne.n	80033d4 <TIM_DeInit+0x150>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 80033c2:	2101      	movs	r1, #1
 80033c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80033c8:	f7ff fb50 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 80033cc:	2100      	movs	r1, #0
 80033ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80033d2:	e016      	b.n	8003402 <TIM_DeInit+0x17e>
  } 
  else if (TIMx == TIM16)
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <TIM_DeInit+0x1c0>)
 80033d6:	4298      	cmp	r0, r3
 80033d8:	d108      	bne.n	80033ec <TIM_DeInit+0x168>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 80033da:	2101      	movs	r1, #1
 80033dc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80033e0:	f7ff fb44 	bl	8002a6c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 80033e4:	2100      	movs	r1, #0
 80033e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80033ea:	e00a      	b.n	8003402 <TIM_DeInit+0x17e>
  } 
  else
  {
    if (TIMx == TIM17)
 80033ec:	4b16      	ldr	r3, [pc, #88]	; (8003448 <TIM_DeInit+0x1c4>)
 80033ee:	4298      	cmp	r0, r3
 80033f0:	d10b      	bne.n	800340a <TIM_DeInit+0x186>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 80033f2:	2101      	movs	r1, #1
 80033f4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80033f8:	f7ff fb38 	bl	8002a6c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 80033fc:	2100      	movs	r1, #0
 80033fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    }  
  }
}
 8003402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (TIMx == TIM17)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 8003406:	f7ff bb31 	b.w	8002a6c <RCC_APB2PeriphResetCmd>
 800340a:	bd08      	pop	{r3, pc}
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40001000 	.word	0x40001000
 8003420:	40001400 	.word	0x40001400
 8003424:	40013400 	.word	0x40013400
 8003428:	40014c00 	.word	0x40014c00
 800342c:	40015000 	.word	0x40015000
 8003430:	40015400 	.word	0x40015400
 8003434:	40001800 	.word	0x40001800
 8003438:	40001c00 	.word	0x40001c00
 800343c:	40002000 	.word	0x40002000
 8003440:	40014000 	.word	0x40014000
 8003444:	40014400 	.word	0x40014400
 8003448:	40014800 	.word	0x40014800

0800344c <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800344c:	4a22      	ldr	r2, [pc, #136]	; (80034d8 <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800344e:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8003450:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003452:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8003454:	d012      	beq.n	800347c <TIM_TimeBaseInit+0x30>
 8003456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800345a:	4290      	cmp	r0, r2
 800345c:	d00e      	beq.n	800347c <TIM_TimeBaseInit+0x30>
 800345e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003462:	d00b      	beq.n	800347c <TIM_TimeBaseInit+0x30>
 8003464:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003468:	4290      	cmp	r0, r2
 800346a:	d007      	beq.n	800347c <TIM_TimeBaseInit+0x30>
 800346c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003470:	4290      	cmp	r0, r2
 8003472:	d003      	beq.n	800347c <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8003474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003478:	4290      	cmp	r0, r2
 800347a:	d103      	bne.n	8003484 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800347c:	884a      	ldrh	r2, [r1, #2]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003482:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8003484:	4a15      	ldr	r2, [pc, #84]	; (80034dc <TIM_TimeBaseInit+0x90>)
 8003486:	4290      	cmp	r0, r2
 8003488:	d008      	beq.n	800349c <TIM_TimeBaseInit+0x50>
 800348a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800348e:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8003490:	bf1f      	itttt	ne
 8003492:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003496:	88ca      	ldrhne	r2, [r1, #6]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8003498:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800349a:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 800349c:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800349e:	888b      	ldrh	r3, [r1, #4]
 80034a0:	8583      	strh	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80034a2:	880b      	ldrh	r3, [r1, #0]
 80034a4:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <TIM_TimeBaseInit+0x8c>)
 80034a8:	4298      	cmp	r0, r3
 80034aa:	d00f      	beq.n	80034cc <TIM_TimeBaseInit+0x80>
 80034ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b0:	4298      	cmp	r0, r3
 80034b2:	d00b      	beq.n	80034cc <TIM_TimeBaseInit+0x80>
 80034b4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80034b8:	4298      	cmp	r0, r3
 80034ba:	d007      	beq.n	80034cc <TIM_TimeBaseInit+0x80>
 80034bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c0:	4298      	cmp	r0, r3
 80034c2:	d003      	beq.n	80034cc <TIM_TimeBaseInit+0x80>
 80034c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034c8:	4298      	cmp	r0, r3
 80034ca:	d101      	bne.n	80034d0 <TIM_TimeBaseInit+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80034cc:	7a0b      	ldrb	r3, [r1, #8]
 80034ce:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80034d0:	2301      	movs	r3, #1
 80034d2:	8283      	strh	r3, [r0, #20]
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40001000 	.word	0x40001000

080034e0 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80034e0:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80034e2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	8403      	strh	r3, [r0, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	8886      	ldrh	r6, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f2:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80034f4:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 80034f6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	0c1b      	lsrs	r3, r3, #16

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80034fe:	431d      	orrs	r5, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8003500:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003504:	890c      	ldrh	r4, [r1, #8]
 8003506:	884b      	ldrh	r3, [r1, #2]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8003508:	0412      	lsls	r2, r2, #16
 800350a:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800350c:	4323      	orrs	r3, r4
 800350e:	4313      	orrs	r3, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8003510:	4a14      	ldr	r2, [pc, #80]	; (8003564 <TIM_OC1Init+0x84>)
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003512:	b2b6      	uxth	r6, r6
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8003514:	4290      	cmp	r0, r2
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8003516:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8003518:	d00f      	beq.n	800353a <TIM_OC1Init+0x5a>
 800351a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800351e:	4290      	cmp	r0, r2
 8003520:	d00b      	beq.n	800353a <TIM_OC1Init+0x5a>
 8003522:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003526:	4290      	cmp	r0, r2
 8003528:	d007      	beq.n	800353a <TIM_OC1Init+0x5a>
 800352a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800352e:	4290      	cmp	r0, r2
 8003530:	d003      	beq.n	800353a <TIM_OC1Init+0x5a>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8003532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003536:	4290      	cmp	r0, r2
 8003538:	d10e      	bne.n	8003558 <TIM_OC1Init+0x78>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800353a:	894c      	ldrh	r4, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 800353c:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8003540:	431c      	orrs	r4, r3
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8003542:	888b      	ldrh	r3, [r1, #4]
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8003544:	f024 0404 	bic.w	r4, r4, #4
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8003548:	f426 7240 	bic.w	r2, r6, #768	; 0x300
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800354c:	4323      	orrs	r3, r4
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800354e:	898e      	ldrh	r6, [r1, #12]
 8003550:	89cc      	ldrh	r4, [r1, #14]
 8003552:	4334      	orrs	r4, r6
 8003554:	4322      	orrs	r2, r4
 8003556:	b296      	uxth	r6, r2
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8003558:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355a:	8086      	strh	r6, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800355c:	8305      	strh	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 800355e:	8682      	strh	r2, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003560:	8403      	strh	r3, [r0, #32]
 8003562:	bd70      	pop	{r4, r5, r6, pc}
 8003564:	40012c00 	.word	0x40012c00

08003568 <TIM_OC2Init>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8003568:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800356a:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 800356c:	f023 0310 	bic.w	r3, r3, #16
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8003576:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	8885      	ldrh	r5, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357a:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800357c:	880c      	ldrh	r4, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 800357e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8003582:	0412      	lsls	r2, r2, #16
 8003584:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003586:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 800358a:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800358e:	b294      	uxth	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8003590:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8003592:	890a      	ldrh	r2, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8003594:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8003596:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800359a:	884a      	ldrh	r2, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359c:	b2ad      	uxth	r5, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800359e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80035a2:	4a12      	ldr	r2, [pc, #72]	; (80035ec <TIM_OC2Init+0x84>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80035a4:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80035a6:	4290      	cmp	r0, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_OC2Init+0x4a>
 80035aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ae:	4290      	cmp	r0, r2
 80035b0:	d115      	bne.n	80035de <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80035b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80035b6:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 80035b8:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80035ba:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 80035be:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80035c2:	4013      	ands	r3, r2
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80035c4:	888a      	ldrh	r2, [r1, #4]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 80035c6:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80035ca:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80035ce:	898a      	ldrh	r2, [r1, #12]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80035d0:	b29b      	uxth	r3, r3
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80035d2:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80035d6:	89ca      	ldrh	r2, [r1, #14]
 80035d8:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
 80035dc:	b2ad      	uxth	r5, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80035de:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e0:	8085      	strh	r5, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035e2:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80035e4:	8702      	strh	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e6:	8403      	strh	r3, [r0, #32]
 80035e8:	bd30      	pop	{r4, r5, pc}
 80035ea:	bf00      	nop
 80035ec:	40012c00 	.word	0x40012c00

080035f0 <TIM_OC3Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80035f0:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80035f2:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 80035f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003602:	8b82      	ldrh	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003604:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8003606:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800360a:	0412      	lsls	r2, r2, #16
 800360c:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 800360e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8003612:	4315      	orrs	r5, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8003614:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8003616:	890a      	ldrh	r2, [r1, #8]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8003618:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800361a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800361e:	884a      	ldrh	r2, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8003622:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <TIM_OC3Init+0x80>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8003628:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800362a:	4290      	cmp	r0, r2
 800362c:	d003      	beq.n	8003636 <TIM_OC3Init+0x46>
 800362e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003632:	4290      	cmp	r0, r2
 8003634:	d115      	bne.n	8003662 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8003636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800363a:	894a      	ldrh	r2, [r1, #10]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 800363c:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800363e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8003642:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8003646:	4013      	ands	r3, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003648:	888a      	ldrh	r2, [r1, #4]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 800364a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800364e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003652:	898a      	ldrh	r2, [r1, #12]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003654:	b29b      	uxth	r3, r3
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003656:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800365a:	89ca      	ldrh	r2, [r1, #14]
 800365c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003660:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8003662:	88ca      	ldrh	r2, [r1, #6]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003666:	8385      	strh	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8003668:	8782      	strh	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	8403      	strh	r3, [r0, #32]
 800366c:	bd30      	pop	{r4, r5, pc}
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00

08003674 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8003674:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003676:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8003678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800367c:	041b      	lsls	r3, r3, #16
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003686:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003688:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 800368a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800368e:	0412      	lsls	r2, r2, #16
 8003690:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8003692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8003696:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800369a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800369c:	890d      	ldrh	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 800369e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80036a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80036a4:	884d      	ldrh	r5, [r1, #2]
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a6:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80036a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036ac:	4d0a      	ldr	r5, [pc, #40]	; (80036d8 <TIM_OC4Init+0x64>)
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80036ae:	b292      	uxth	r2, r2
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036b0:	42a8      	cmp	r0, r5
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80036b2:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036b4:	d003      	beq.n	80036be <TIM_OC4Init+0x4a>
 80036b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80036ba:	42a8      	cmp	r0, r5
 80036bc:	d105      	bne.n	80036ca <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80036be:	898d      	ldrh	r5, [r1, #12]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 80036c0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80036c4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80036c8:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80036cc:	8382      	strh	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80036ce:	88ca      	ldrh	r2, [r1, #6]
 80036d0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d4:	8403      	strh	r3, [r0, #32]
 80036d6:	bd30      	pop	{r4, r5, pc}
 80036d8:	40012c00 	.word	0x40012c00

080036dc <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80036dc:	880a      	ldrh	r2, [r1, #0]
 80036de:	884b      	ldrh	r3, [r1, #2]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	888a      	ldrh	r2, [r1, #4]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	88ca      	ldrh	r2, [r1, #6]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	890a      	ldrh	r2, [r1, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	894a      	ldrh	r2, [r1, #10]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	898a      	ldrh	r2, [r1, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80036fc:	4770      	bx	lr

080036fe <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 80036fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003702:	8083      	strh	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8003704:	2300      	movs	r3, #0
 8003706:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8003708:	80c3      	strh	r3, [r0, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800370a:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800370c:	7203      	strb	r3, [r0, #8]
 800370e:	4770      	bx	lr

08003710 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8003710:	2300      	movs	r3, #0
 8003712:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8003714:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8003716:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
 8003718:	80c3      	strh	r3, [r0, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800371a:	8103      	strh	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800371c:	8143      	strh	r3, [r0, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800371e:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8003720:	81c3      	strh	r3, [r0, #14]
 8003722:	4770      	bx	lr

08003724 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003724:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8003726:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8003728:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800372a:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800372c:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800372e:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8003730:	8103      	strh	r3, [r0, #8]
 8003732:	4770      	bx	lr

08003734 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8003734:	2300      	movs	r3, #0
 8003736:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8003738:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800373a:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800373c:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800373e:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8003740:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8003742:	8183      	strh	r3, [r0, #12]
 8003744:	4770      	bx	lr

08003746 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003746:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003748:	b119      	cbz	r1, 8003752 <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800374a:	b29b      	uxth	r3, r3
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	e003      	b.n	800375a <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	8003      	strh	r3, [r0, #0]
 800375c:	4770      	bx	lr

0800375e <TIM_CtrlPWMOutputs>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800375e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003762:	b129      	cbz	r1, 8003770 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8003764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376c:	b29b      	uxth	r3, r3
 800376e:	e001      	b.n	8003774 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8003770:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003774:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 8003778:	4770      	bx	lr

0800377a <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800377a:	8281      	strh	r1, [r0, #20]
 800377c:	4770      	bx	lr

0800377e <TIM_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800377e:	430a      	orrs	r2, r1
 8003780:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
 8003784:	4770      	bx	lr

08003786 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003786:	8983      	ldrh	r3, [r0, #12]
 8003788:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800378a:	b10a      	cbz	r2, 8003790 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800378c:	4319      	orrs	r1, r3
 800378e:	e001      	b.n	8003794 <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003790:	ea23 0101 	bic.w	r1, r3, r1
 8003794:	8181      	strh	r1, [r0, #12]
 8003796:	4770      	bx	lr

08003798 <TIM_ITConfig>:
 8003798:	f7ff bff5 	b.w	8003786 <TIM_DMACmd>

0800379c <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800379c:	8903      	ldrh	r3, [r0, #8]
 800379e:	f023 0307 	bic.w	r3, r3, #7
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	8103      	strh	r3, [r0, #8]
 80037a8:	4770      	bx	lr

080037aa <TIM_ITRxExternalClockConfig>:
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037aa:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80037b4:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b6:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80037b8:	8903      	ldrh	r3, [r0, #8]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f043 0307 	orr.w	r3, r3, #7
 80037c0:	8103      	strh	r3, [r0, #8]
 80037c2:	4770      	bx	lr

080037c4 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	460d      	mov	r5, r1
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80037c8:	2d60      	cmp	r5, #96	; 0x60
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80037ca:	4611      	mov	r1, r2
 80037cc:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80037ce:	f04f 0201 	mov.w	r2, #1
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80037d2:	d102      	bne.n	80037da <TIM_TIxExternalClockConfig+0x16>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80037d4:	f7ff fd1a 	bl	800320c <TI2_Config>
 80037d8:	e001      	b.n	80037de <TIM_TIxExternalClockConfig+0x1a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80037da:	f7ff fce3 	bl	80031a4 <TI1_Config>
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037de:	8921      	ldrh	r1, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80037e0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80037e4:	0409      	lsls	r1, r1, #16
 80037e6:	0c09      	lsrs	r1, r1, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80037e8:	4329      	orrs	r1, r5
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ea:	8121      	strh	r1, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80037ec:	8923      	ldrh	r3, [r4, #8]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f043 0307 	orr.w	r3, r3, #7
 80037f4:	8123      	strh	r3, [r4, #8]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}

080037f8 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 80037f8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
 80037fa:	8904      	ldrh	r4, [r0, #8]
 80037fc:	b2e4      	uxtb	r4, r4
 80037fe:	4321      	orrs	r1, r4
 8003800:	430a      	orrs	r2, r1
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8003802:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003806:	b299      	uxth	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003808:	8101      	strh	r1, [r0, #8]
 800380a:	bd10      	pop	{r4, pc}

0800380c <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 800380c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800380e:	f7ff fff3 	bl	80037f8 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003812:	8903      	ldrh	r3, [r0, #8]
 8003814:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003818:	041b      	lsls	r3, r3, #16
 800381a:	0c1b      	lsrs	r3, r3, #16
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
  tmpsmcr |= TIM_TS_ETRF;
 800381c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003820:	8103      	strh	r3, [r0, #8]
 8003822:	bd10      	pop	{r4, pc}

08003824 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8003824:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8003826:	f7ff ffe7 	bl	80037f8 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800382a:	8903      	ldrh	r3, [r0, #8]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003832:	8103      	strh	r3, [r0, #8]
 8003834:	bd10      	pop	{r4, pc}

08003836 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8003836:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8003838:	8282      	strh	r2, [r0, #20]
 800383a:	4770      	bx	lr

0800383c <TIM_CounterModeConfig>:
{
  uint16_t tmpcr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
 800383c:	8803      	ldrh	r3, [r0, #0]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 800383e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003842:	041b      	lsls	r3, r3, #16
 8003844:	0c1b      	lsrs	r3, r3, #16
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8003846:	4319      	orrs	r1, r3
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8003848:	8001      	strh	r1, [r0, #0]
 800384a:	4770      	bx	lr

0800384c <TIM_SelectInputTrigger>:
  uint16_t tmpsmcr = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800384c:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800384e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	0c1b      	lsrs	r3, r3, #16
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8003856:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003858:	8101      	strh	r1, [r0, #8]
 800385a:	4770      	bx	lr

0800385c <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800385c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385e:	8906      	ldrh	r6, [r0, #8]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003860:	8b04      	ldrh	r4, [r0, #24]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003862:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8003864:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003868:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800386a:	f024 0403 	bic.w	r4, r4, #3
 800386e:	f025 0522 	bic.w	r5, r5, #34	; 0x22
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8003872:	f026 0607 	bic.w	r6, r6, #7
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8003876:	0424      	lsls	r4, r4, #16
 8003878:	432a      	orrs	r2, r5
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800387a:	0436      	lsls	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 800387c:	0c24      	lsrs	r4, r4, #16
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 800387e:	0c36      	lsrs	r6, r6, #16
  tmpsmcr |= TIM_EncoderMode;
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8003880:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8003884:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
 8003888:	4331      	orrs	r1, r6
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800388a:	f044 0401 	orr.w	r4, r4, #1
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800388e:	b29d      	uxth	r5, r3
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003890:	8101      	strh	r1, [r0, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003892:	8304      	strh	r4, [r0, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003894:	8405      	strh	r5, [r0, #32]
 8003896:	bd70      	pop	{r4, r5, r6, pc}

08003898 <TIM_ForcedOC1Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8003898:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80038a2:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80038a4:	8301      	strh	r1, [r0, #24]
 80038a6:	4770      	bx	lr

080038a8 <TIM_ForcedOC2Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80038a8:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 80038aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80038b2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80038b6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80038b8:	8301      	strh	r1, [r0, #24]
 80038ba:	4770      	bx	lr

080038bc <TIM_ForcedOC3Config>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80038bc:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80038c6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80038c8:	8381      	strh	r1, [r0, #28]
 80038ca:	4770      	bx	lr

080038cc <TIM_ForcedOC4Config>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 80038cc:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 80038ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	0c1b      	lsrs	r3, r3, #16
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 80038d6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80038da:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80038dc:	8381      	strh	r1, [r0, #28]
 80038de:	4770      	bx	lr

080038e0 <TIM_ARRPreloadConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80038e0:	8803      	ldrh	r3, [r0, #0]
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038e2:	b119      	cbz	r1, 80038ec <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ea:	e003      	b.n	80038f4 <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 80038ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	0c1b      	lsrs	r3, r3, #16
 80038f4:	8003      	strh	r3, [r0, #0]
 80038f6:	4770      	bx	lr

080038f8 <TIM_SelectCOM>:
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80038f8:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80038fa:	b119      	cbz	r1, 8003904 <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	e003      	b.n	800390c <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	8083      	strh	r3, [r0, #4]
 800390e:	4770      	bx	lr

08003910 <TIM_SelectCCDMA>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003910:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003912:	b119      	cbz	r1, 800391c <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8003914:	b29b      	uxth	r3, r3
 8003916:	f043 0308 	orr.w	r3, r3, #8
 800391a:	e003      	b.n	8003924 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 800391c:	f023 0308 	bic.w	r3, r3, #8
 8003920:	041b      	lsls	r3, r3, #16
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	8083      	strh	r3, [r0, #4]
 8003926:	4770      	bx	lr

08003928 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8003928:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800392a:	b119      	cbz	r1, 8003934 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800392c:	b29b      	uxth	r3, r3
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	e003      	b.n	800393c <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	041b      	lsls	r3, r3, #16
 800393a:	0c1b      	lsrs	r3, r3, #16
 800393c:	8083      	strh	r3, [r0, #4]
 800393e:	4770      	bx	lr

08003940 <TIM_OC1PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8003940:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8003942:	f023 0308 	bic.w	r3, r3, #8
 8003946:	041b      	lsls	r3, r3, #16
 8003948:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800394a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800394c:	8301      	strh	r1, [r0, #24]
 800394e:	4770      	bx	lr

08003950 <TIM_OC2PreloadConfig>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8003950:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8003952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800395a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800395e:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8003960:	8301      	strh	r1, [r0, #24]
 8003962:	4770      	bx	lr

08003964 <TIM_OC3PreloadConfig>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8003964:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8003966:	f023 0308 	bic.w	r3, r3, #8
 800396a:	041b      	lsls	r3, r3, #16
 800396c:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800396e:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003970:	8381      	strh	r1, [r0, #28]
 8003972:	4770      	bx	lr

08003974 <TIM_OC4PreloadConfig>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8003974:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8003976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800397e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003982:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003984:	8381      	strh	r1, [r0, #28]
 8003986:	4770      	bx	lr

08003988 <TIM_OC1FastConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003988:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 800398a:	f023 0304 	bic.w	r3, r3, #4
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8003992:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8003994:	8301      	strh	r1, [r0, #24]
 8003996:	4770      	bx	lr

08003998 <TIM_OC2FastConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8003998:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 800399a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80039a2:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80039a6:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80039a8:	8301      	strh	r1, [r0, #24]
 80039aa:	4770      	bx	lr

080039ac <TIM_OC3FastConfig>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80039ac:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80039b6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80039b8:	8381      	strh	r1, [r0, #28]
 80039ba:	4770      	bx	lr

080039bc <TIM_OC4FastConfig>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80039bc:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 80039be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80039c6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80039ca:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80039cc:	8381      	strh	r1, [r0, #28]
 80039ce:	4770      	bx	lr

080039d0 <TIM_ClearOC1Ref>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80039d0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 80039d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80039da:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80039dc:	8301      	strh	r1, [r0, #24]
 80039de:	4770      	bx	lr

080039e0 <TIM_ClearOC2Ref>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
 80039e0:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 80039e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80039e6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 80039ea:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80039ec:	8301      	strh	r1, [r0, #24]
 80039ee:	4770      	bx	lr

080039f0 <TIM_ClearOC3Ref>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 80039f0:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 80039f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	0c1b      	lsrs	r3, r3, #16
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80039fa:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80039fc:	8381      	strh	r1, [r0, #28]
 80039fe:	4770      	bx	lr

08003a00 <TIM_ClearOC4Ref>:
{
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
 8003a00:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8003a02:	f3c3 030e 	ubfx	r3, r3, #0, #15
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8003a06:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a0a:	b289      	uxth	r1, r1
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003a0c:	8381      	strh	r1, [r0, #28]
 8003a0e:	4770      	bx	lr

08003a10 <TIM_OC1PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003a10:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8003a12:	f023 0302 	bic.w	r3, r3, #2
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8003a1a:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a1c:	8401      	strh	r1, [r0, #32]
 8003a1e:	4770      	bx	lr

08003a20 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8003a20:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8003a22:	f023 0308 	bic.w	r3, r3, #8
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8003a2a:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a2c:	8401      	strh	r1, [r0, #32]
 8003a2e:	4770      	bx	lr

08003a30 <TIM_OC2PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003a30:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8003a32:	f023 0320 	bic.w	r3, r3, #32
 8003a36:	041b      	lsls	r3, r3, #16
 8003a38:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8003a3a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003a3e:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a40:	8401      	strh	r1, [r0, #32]
 8003a42:	4770      	bx	lr

08003a44 <TIM_OC2NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8003a44:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8003a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4a:	041b      	lsls	r3, r3, #16
 8003a4c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8003a4e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003a52:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a54:	8401      	strh	r1, [r0, #32]
 8003a56:	4770      	bx	lr

08003a58 <TIM_OC3PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003a58:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8003a5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8003a62:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a66:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a68:	8401      	strh	r1, [r0, #32]
 8003a6a:	4770      	bx	lr

08003a6c <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8003a6c:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8003a6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8003a76:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003a7a:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a7c:	8401      	strh	r1, [r0, #32]
 8003a7e:	4770      	bx	lr

08003a80 <TIM_OC4PolarityConfig>:
{
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
 8003a80:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8003a82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8003a8a:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8003a8e:	b289      	uxth	r1, r1
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8003a90:	8401      	strh	r1, [r0, #32]
 8003a92:	4770      	bx	lr

08003a94 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8003a94:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8003a96:	8c04      	ldrh	r4, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003a98:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8003a9a:	b2a5      	uxth	r5, r4
 8003a9c:	2401      	movs	r4, #1
 8003a9e:	408c      	lsls	r4, r1
 8003aa0:	ea25 0404 	bic.w	r4, r5, r4
 8003aa4:	8404      	strh	r4, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8003aa6:	8c03      	ldrh	r3, [r0, #32]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	8403      	strh	r3, [r0, #32]
 8003aae:	bd30      	pop	{r4, r5, pc}

08003ab0 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8003ab0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003ab2:	8c04      	ldrh	r4, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003ab4:	408a      	lsls	r2, r1
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8003ab6:	b2a5      	uxth	r5, r4
 8003ab8:	2404      	movs	r4, #4
 8003aba:	408c      	lsls	r4, r1
 8003abc:	ea25 0404 	bic.w	r4, r5, r4
 8003ac0:	8404      	strh	r4, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8003ac2:	8c03      	ldrh	r3, [r0, #32]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	8403      	strh	r3, [r0, #32]
 8003aca:	bd30      	pop	{r4, r5, pc}

08003acc <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8003acc:	b530      	push	{r4, r5, lr}
  tmp += CCMR_Offset;

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003ace:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_Offset;
 8003ad0:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8003ad4:	b2a5      	uxth	r5, r4
 8003ad6:	2401      	movs	r4, #1
 8003ad8:	408c      	lsls	r4, r1
 8003ada:	ea25 0404 	bic.w	r4, r5, r4
 8003ade:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8003ae0:	f021 0008 	bic.w	r0, r1, #8
 8003ae4:	b930      	cbnz	r0, 8003af4 <TIM_SelectOCxM+0x28>
  {
    tmp += (TIM_Channel>>1);

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8003ae6:	0849      	lsrs	r1, r1, #1
 8003ae8:	58c8      	ldr	r0, [r1, r3]
 8003aea:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8003aee:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8003af0:	58c8      	ldr	r0, [r1, r3]
 8003af2:	e009      	b.n	8003b08 <TIM_SelectOCxM+0x3c>
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8003af4:	3904      	subs	r1, #4
 8003af6:	f3c1 014e 	ubfx	r1, r1, #1, #15
 8003afa:	58c8      	ldr	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8003afc:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8003afe:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
 8003b02:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8003b04:	58c8      	ldr	r0, [r1, r3]
 8003b06:	b292      	uxth	r2, r2
 8003b08:	4302      	orrs	r2, r0
 8003b0a:	50ca      	str	r2, [r1, r3]
 8003b0c:	bd30      	pop	{r4, r5, pc}

08003b0e <TIM_UpdateDisableConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8003b0e:	8803      	ldrh	r3, [r0, #0]
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b10:	b119      	cbz	r1, 8003b1a <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f043 0302 	orr.w	r3, r3, #2
 8003b18:	e003      	b.n	8003b22 <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8003b1a:	f023 0302 	bic.w	r3, r3, #2
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	8003      	strh	r3, [r0, #0]
 8003b24:	4770      	bx	lr

08003b26 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003b26:	8803      	ldrh	r3, [r0, #0]
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8003b28:	b119      	cbz	r1, 8003b32 <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	e003      	b.n	8003b3a <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8003b32:	f023 0304 	bic.w	r3, r3, #4
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	8003      	strh	r3, [r0, #0]
 8003b3c:	4770      	bx	lr

08003b3e <TIM_SelectHallSensor>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003b3e:	8883      	ldrh	r3, [r0, #4]
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b40:	b119      	cbz	r1, 8003b4a <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b48:	e003      	b.n	8003b52 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 8003b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	8083      	strh	r3, [r0, #4]
 8003b54:	4770      	bx	lr

08003b56 <TIM_SelectOnePulseMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8003b56:	8803      	ldrh	r3, [r0, #0]
 8003b58:	f023 0308 	bic.w	r3, r3, #8
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	8003      	strh	r3, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8003b62:	8803      	ldrh	r3, [r0, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4319      	orrs	r1, r3
 8003b68:	8001      	strh	r1, [r0, #0]
 8003b6a:	4770      	bx	lr

08003b6c <TIM_SelectOutputTrigger>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 8003b6c:	8883      	ldrh	r3, [r0, #4]
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	041b      	lsls	r3, r3, #16
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8003b78:	8883      	ldrh	r3, [r0, #4]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	4319      	orrs	r1, r3
 8003b7e:	8081      	strh	r1, [r0, #4]
 8003b80:	4770      	bx	lr

08003b82 <TIM_SelectSlaveMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8003b82:	8903      	ldrh	r3, [r0, #8]
 8003b84:	f023 0307 	bic.w	r3, r3, #7
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	8103      	strh	r3, [r0, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8003b8e:	8903      	ldrh	r3, [r0, #8]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	4319      	orrs	r1, r3
 8003b94:	8101      	strh	r1, [r0, #8]
 8003b96:	4770      	bx	lr

08003b98 <TIM_SelectMasterSlaveMode>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8003b98:	8903      	ldrh	r3, [r0, #8]
 8003b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8003ba4:	8903      	ldrh	r3, [r0, #8]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	4319      	orrs	r1, r3
 8003baa:	8101      	strh	r1, [r0, #8]
 8003bac:	4770      	bx	lr

08003bae <TIM_SetCounter>:
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8003bae:	8481      	strh	r1, [r0, #36]	; 0x24
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_SetAutoreload>:
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8003bb2:	8581      	strh	r1, [r0, #44]	; 0x2c
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_SetCompare1>:
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8003bb6:	8681      	strh	r1, [r0, #52]	; 0x34
 8003bb8:	4770      	bx	lr

08003bba <TIM_SetCompare2>:
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8003bba:	8701      	strh	r1, [r0, #56]	; 0x38
 8003bbc:	4770      	bx	lr

08003bbe <TIM_SetCompare3>:
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8003bbe:	8781      	strh	r1, [r0, #60]	; 0x3c
 8003bc0:	4770      	bx	lr

08003bc2 <TIM_SetCompare4>:
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8003bc2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8003bc6:	4770      	bx	lr

08003bc8 <TIM_SetIC1Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8003bc8:	8b03      	ldrh	r3, [r0, #24]
 8003bca:	f023 030c 	bic.w	r3, r3, #12
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8003bd4:	8b03      	ldrh	r3, [r0, #24]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	4319      	orrs	r1, r3
 8003bda:	8301      	strh	r1, [r0, #24]
 8003bdc:	4770      	bx	lr

08003bde <TIM_SetIC2Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8003bde:	8b03      	ldrh	r3, [r0, #24]
 8003be0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003be4:	041b      	lsls	r3, r3, #16
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8003bea:	8b03      	ldrh	r3, [r0, #24]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003bf2:	b289      	uxth	r1, r1
 8003bf4:	8301      	strh	r1, [r0, #24]
 8003bf6:	4770      	bx	lr

08003bf8 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	460c      	mov	r4, r1
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003bfc:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003bfe:	88a2      	ldrh	r2, [r4, #4]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8003c00:	2900      	cmp	r1, #0
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003c02:	f8b4 e000 	ldrh.w	lr, [r4]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8003c06:	bf0c      	ite	eq
 8003c08:	2602      	moveq	r6, #2
 8003c0a:	2600      	movne	r6, #0
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8003c0c:	2a01      	cmp	r2, #1
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8003c0e:	bf0c      	ite	eq
 8003c10:	2702      	moveq	r7, #2
 8003c12:	2701      	movne	r7, #1
 8003c14:	8923      	ldrh	r3, [r4, #8]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003c16:	f1be 0f00 	cmp.w	lr, #0
 8003c1a:	d10e      	bne.n	8003c3a <TIM_PWMIConfig+0x42>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003c1c:	f7ff fac2 	bl	80031a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c20:	88e1      	ldrh	r1, [r4, #6]
 8003c22:	f7ff ffd1 	bl	8003bc8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003c26:	4631      	mov	r1, r6
 8003c28:	8923      	ldrh	r3, [r4, #8]
 8003c2a:	463a      	mov	r2, r7
 8003c2c:	f7ff faee 	bl	800320c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c30:	88e1      	ldrh	r1, [r4, #6]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c36:	f7ff bfd2 	b.w	8003bde <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8003c3a:	f7ff fae7 	bl	800320c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c3e:	88e1      	ldrh	r1, [r4, #6]
 8003c40:	f7ff ffcd 	bl	8003bde <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8003c44:	4631      	mov	r1, r6
 8003c46:	8923      	ldrh	r3, [r4, #8]
 8003c48:	463a      	mov	r2, r7
 8003c4a:	f7ff faab 	bl	80031a4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c4e:	88e1      	ldrh	r1, [r4, #6]
  }
}
 8003c50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c54:	f7ff bfb8 	b.w	8003bc8 <TIM_SetIC1Prescaler>

08003c58 <TIM_SetIC3Prescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8003c58:	8b83      	ldrh	r3, [r0, #28]
 8003c5a:	f023 030c 	bic.w	r3, r3, #12
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8003c64:	8b83      	ldrh	r3, [r0, #28]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	4319      	orrs	r1, r3
 8003c6a:	8381      	strh	r1, [r0, #28]
 8003c6c:	4770      	bx	lr

08003c6e <TIM_SetIC4Prescaler>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8003c6e:	8b83      	ldrh	r3, [r0, #28]
 8003c70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	0c1b      	lsrs	r3, r3, #16
 8003c78:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8003c7a:	8b83      	ldrh	r3, [r0, #28]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003c82:	b289      	uxth	r1, r1
 8003c84:	8381      	strh	r1, [r0, #28]
 8003c86:	4770      	bx	lr

08003c88 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003c8a:	880e      	ldrh	r6, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8003c8c:	460d      	mov	r5, r1
 8003c8e:	890b      	ldrh	r3, [r1, #8]
 8003c90:	888a      	ldrh	r2, [r1, #4]
 8003c92:	4604      	mov	r4, r0
 8003c94:	8849      	ldrh	r1, [r1, #2]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8003c96:	b936      	cbnz	r6, 8003ca6 <TIM_ICInit+0x1e>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003c98:	f7ff fa84 	bl	80031a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003c9c:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003c9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003ca2:	f7ff bf91 	b.w	8003bc8 <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8003ca6:	2e04      	cmp	r6, #4
 8003ca8:	d106      	bne.n	8003cb8 <TIM_ICInit+0x30>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8003caa:	f7ff faaf 	bl	800320c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cae:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003cb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003cb4:	f7ff bf93 	b.w	8003bde <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003cb8:	2e08      	cmp	r6, #8
 8003cba:	88ef      	ldrh	r7, [r5, #6]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8003cbc:	8c00      	ldrh	r0, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8003cbe:	d139      	bne.n	8003d34 <TIM_ICInit+0xac>
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8003cc0:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8003cc4:	0400      	lsls	r0, r0, #16
 8003cc6:	0c00      	lsrs	r0, r0, #16
 8003cc8:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cca:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8003ccc:	8c20      	ldrh	r0, [r4, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
 8003cce:	b2b6      	uxth	r6, r6
 8003cd0:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
 8003cd4:	ea46 1303 	orr.w	r3, r6, r3, lsl #4
 8003cd8:	b29b      	uxth	r3, r3
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8003cda:	431a      	orrs	r2, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003cdc:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <TIM_ICInit+0x12c>)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8003cde:	b280      	uxth	r0, r0
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d012      	beq.n	8003d0a <TIM_ICInit+0x82>
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d00e      	beq.n	8003d0a <TIM_ICInit+0x82>
 8003cec:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003cf0:	d00b      	beq.n	8003d0a <TIM_ICInit+0x82>
 8003cf2:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8003cf6:	429c      	cmp	r4, r3
 8003cf8:	d007      	beq.n	8003d0a <TIM_ICInit+0x82>
 8003cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cfe:	429c      	cmp	r4, r3
 8003d00:	d003      	beq.n	8003d0a <TIM_ICInit+0x82>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d107      	bne.n	8003d1a <TIM_ICInit+0x92>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8003d0a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8003d0e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8003d12:	b280      	uxth	r0, r0
 8003d14:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8003d18:	e004      	b.n	8003d24 <TIM_ICInit+0x9c>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d1a:	f420 6320 	bic.w	r3, r0, #2560	; 0xa00
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 8003d1e:	f441 7080 	orr.w	r0, r1, #256	; 0x100
 8003d22:	4318      	orrs	r0, r3
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d24:	83a2      	strh	r2, [r4, #28]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d26:	4639      	mov	r1, r7
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 8003d28:	8420      	strh	r0, [r4, #32]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d2a:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8003d2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003d30:	f7ff bf92 	b.w	8003c58 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8003d34:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003d38:	0400      	lsls	r0, r0, #16
 8003d3a:	0c00      	lsrs	r0, r0, #16
 8003d3c:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d3e:	8ba6      	ldrh	r6, [r4, #28]
  tmpccer = TIMx->CCER;
 8003d40:	f8b4 e020 	ldrh.w	lr, [r4, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8003d44:	f426 7540 	bic.w	r5, r6, #768	; 0x300
 8003d48:	052d      	lsls	r5, r5, #20
 8003d4a:	0d2d      	lsrs	r5, r5, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8003d4c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <TIM_ICInit+0x12c>)
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003d52:	ea45 3303 	orr.w	r3, r5, r3, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d56:	4294      	cmp	r4, r2
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8003d58:	fa1f fe8e 	uxth.w	lr, lr
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8003d5c:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8003d5e:	d012      	beq.n	8003d86 <TIM_ICInit+0xfe>
 8003d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d64:	4294      	cmp	r4, r2
 8003d66:	d00e      	beq.n	8003d86 <TIM_ICInit+0xfe>
 8003d68:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8003d6c:	d00b      	beq.n	8003d86 <TIM_ICInit+0xfe>
 8003d6e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003d72:	4294      	cmp	r4, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_ICInit+0xfe>
 8003d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d7a:	4294      	cmp	r4, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_ICInit+0xfe>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8003d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d82:	4294      	cmp	r4, r2
 8003d84:	d107      	bne.n	8003d96 <TIM_ICInit+0x10e>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8003d86:	f42e 5000 	bic.w	r0, lr, #8192	; 0x2000
 8003d8a:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
 8003d8e:	b280      	uxth	r0, r0
 8003d90:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8003d94:	e006      	b.n	8003da4 <TIM_ICInit+0x11c>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8003d96:	f647 52ff 	movw	r2, #32255	; 0x7dff
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8003d9a:	f441 5080 	orr.w	r0, r1, #4096	; 0x1000
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8003d9e:	ea0e 0202 	and.w	r2, lr, r2
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8003da2:	4310      	orrs	r0, r2
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003da4:	83a3      	strh	r3, [r4, #28]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003da6:	4639      	mov	r1, r7
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  TIMx->CCER = tmpccer;
 8003da8:	8420      	strh	r0, [r4, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003daa:	4620      	mov	r0, r4
  }
}
 8003dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8003db0:	f7ff bf5d 	b.w	8003c6e <TIM_SetIC4Prescaler>
 8003db4:	40012c00 	.word	0x40012c00

08003db8 <TIM_SetClockDivision>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8003db8:	8803      	ldrh	r3, [r0, #0]
 8003dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	8003      	strh	r3, [r0, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8003dc4:	8803      	ldrh	r3, [r0, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4319      	orrs	r1, r3
 8003dca:	8001      	strh	r1, [r0, #0]
 8003dcc:	4770      	bx	lr

08003dce <TIM_GetCapture1>:
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8003dce:	8e80      	ldrh	r0, [r0, #52]	; 0x34
}
 8003dd0:	b280      	uxth	r0, r0
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_GetCapture2>:
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8003dd4:	8f00      	ldrh	r0, [r0, #56]	; 0x38
}
 8003dd6:	b280      	uxth	r0, r0
 8003dd8:	4770      	bx	lr

08003dda <TIM_GetCapture3>:
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8003dda:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
}
 8003ddc:	b280      	uxth	r0, r0
 8003dde:	4770      	bx	lr

08003de0 <TIM_GetCapture4>:
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8003de0:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
}
 8003de4:	b280      	uxth	r0, r0
 8003de6:	4770      	bx	lr

08003de8 <TIM_GetCounter>:
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
 8003de8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
}
 8003dea:	b280      	uxth	r0, r0
 8003dec:	4770      	bx	lr

08003dee <TIM_GetPrescaler>:
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8003dee:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8003df0:	b280      	uxth	r0, r0
 8003df2:	4770      	bx	lr

08003df4 <TIM_GetFlagStatus>:
  ITStatus bitstatus = RESET;  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8003df4:	8a03      	ldrh	r3, [r0, #16]
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8003df6:	4219      	tst	r1, r3
}
 8003df8:	bf14      	ite	ne
 8003dfa:	2001      	movne	r0, #1
 8003dfc:	2000      	moveq	r0, #0
 8003dfe:	4770      	bx	lr

08003e00 <TIM_ClearFlag>:
 8003e00:	43c9      	mvns	r1, r1
 8003e02:	b289      	uxth	r1, r1
 8003e04:	8201      	strh	r1, [r0, #16]
 8003e06:	4770      	bx	lr

08003e08 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8003e08:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8003e0a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003e0c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8003e10:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8003e12:	d003      	beq.n	8003e1c <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8003e14:	4211      	tst	r1, r2
 8003e16:	bf14      	ite	ne
 8003e18:	2001      	movne	r0, #1
 8003e1a:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8003e1c:	4770      	bx	lr

08003e1e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003e1e:	43c9      	mvns	r1, r1
 8003e20:	b289      	uxth	r1, r1
 8003e22:	8201      	strh	r1, [r0, #16]
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop

08003e28 <SDIO_DeInit>:
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
  SDIO->POWER = 0x00000000;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <SDIO_DeInit+0x1c>)
  SDIO->ARG = 0x00000000;
  SDIO->CMD = 0x00000000;
  SDIO->DTIMER = 0x00000000;
  SDIO->DLEN = 0x00000000;
  SDIO->DCTRL = 0x00000000;
  SDIO->ICR = 0x00C007FF;
 8003e2a:	4907      	ldr	r1, [pc, #28]	; (8003e48 <SDIO_DeInit+0x20>)
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
  SDIO->POWER = 0x00000000;
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
  SDIO->CLKCR = 0x00000000;
 8003e30:	605a      	str	r2, [r3, #4]
  SDIO->ARG = 0x00000000;
 8003e32:	609a      	str	r2, [r3, #8]
  SDIO->CMD = 0x00000000;
 8003e34:	60da      	str	r2, [r3, #12]
  SDIO->DTIMER = 0x00000000;
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
  SDIO->DLEN = 0x00000000;
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
  SDIO->DCTRL = 0x00000000;
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  SDIO->ICR = 0x00C007FF;
 8003e3c:	6399      	str	r1, [r3, #56]	; 0x38
  SDIO->MASK = 0x00000000;
 8003e3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40018000 	.word	0x40018000
 8003e48:	00c007ff 	.word	0x00c007ff

08003e4c <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8003e4c:	6843      	ldr	r3, [r0, #4]
 8003e4e:	6881      	ldr	r1, [r0, #8]
 8003e50:	b510      	push	{r4, lr}
 8003e52:	4319      	orrs	r1, r3
 8003e54:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8003e56:	4c08      	ldr	r4, [pc, #32]	; (8003e78 <SDIO_Init+0x2c>)
 8003e58:	4319      	orrs	r1, r3
 8003e5a:	6803      	ldr	r3, [r0, #0]
 8003e5c:	6862      	ldr	r2, [r4, #4]
 8003e5e:	4319      	orrs	r1, r3
 8003e60:	6903      	ldr	r3, [r0, #16]
 8003e62:	4319      	orrs	r1, r3
 8003e64:	f422 43fd 	bic.w	r3, r2, #32384	; 0x7e80
 8003e68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8003e6c:	7d02      	ldrb	r2, [r0, #20]
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	4313      	orrs	r3, r2
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8003e72:	6063      	str	r3, [r4, #4]
 8003e74:	bd10      	pop	{r4, pc}
 8003e76:	bf00      	nop
 8003e78:	40018000 	.word	0x40018000

08003e7c <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8003e80:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8003e82:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8003e84:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8003e86:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8003e88:	6103      	str	r3, [r0, #16]
 8003e8a:	4770      	bx	lr

08003e8c <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8003e8c:	4b01      	ldr	r3, [pc, #4]	; (8003e94 <SDIO_ClockCmd+0x8>)
 8003e8e:	6018      	str	r0, [r3, #0]
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	423000a0 	.word	0x423000a0

08003e98 <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER &= PWR_PWRCTRL_MASK;
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <SDIO_SetPowerState+0x14>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f022 0203 	bic.w	r2, r2, #3
 8003ea0:	601a      	str	r2, [r3, #0]
  SDIO->POWER |= SDIO_PowerState;
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4310      	orrs	r0, r2
 8003ea6:	6018      	str	r0, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40018000 	.word	0x40018000

08003eb0 <SDIO_GetPowerState>:
  * - 0x02: Power UP
  * - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8003eb0:	4b02      	ldr	r3, [pc, #8]	; (8003ebc <SDIO_GetPowerState+0xc>)
 8003eb2:	6818      	ldr	r0, [r3, #0]
}
 8003eb4:	f000 0003 	and.w	r0, r0, #3
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40018000 	.word	0x40018000

08003ec0 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <SDIO_ITConfig+0x14>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8003ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003ec4:	b109      	cbz	r1, 8003eca <SDIO_ITConfig+0xa>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8003ec6:	4310      	orrs	r0, r2
 8003ec8:	e001      	b.n	8003ece <SDIO_ITConfig+0xe>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8003eca:	ea22 0000 	bic.w	r0, r2, r0
 8003ece:	63d8      	str	r0, [r3, #60]	; 0x3c
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40018000 	.word	0x40018000

08003ed8 <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 8003ed8:	4b01      	ldr	r3, [pc, #4]	; (8003ee0 <SDIO_DMACmd+0x8>)
 8003eda:	6018      	str	r0, [r3, #0]
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	4230058c 	.word	0x4230058c

08003ee4 <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8003ee4:	6803      	ldr	r3, [r0, #0]
 8003ee6:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <SDIO_SendCommand+0x28>)
  * @param  SDIO_CmdInitStruct : pointer to a SDIO_CmdInitTypeDef 
  *         structure that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8003ee8:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8003eea:	6093      	str	r3, [r2, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003eec:	6881      	ldr	r1, [r0, #8]
 8003eee:	6844      	ldr	r4, [r0, #4]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8003ef0:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003ef2:	430c      	orrs	r4, r1
 8003ef4:	68c1      	ldr	r1, [r0, #12]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8003ef6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003efa:	430c      	orrs	r4, r1
 8003efc:	6901      	ldr	r1, [r0, #16]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8003efe:	f023 0307 	bic.w	r3, r3, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8003f02:	4321      	orrs	r1, r4
 8003f04:	430b      	orrs	r3, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8003f06:	60d3      	str	r3, [r2, #12]
 8003f08:	bd10      	pop	{r4, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40018000 	.word	0x40018000

08003f10 <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8003f10:	2300      	movs	r3, #0
 8003f12:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8003f14:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8003f16:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8003f18:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8003f1a:	6103      	str	r3, [r0, #16]
 8003f1c:	4770      	bx	lr

08003f1e <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 8003f1e:	4b02      	ldr	r3, [pc, #8]	; (8003f28 <SDIO_GetCommandResponse+0xa>)
 8003f20:	6918      	ldr	r0, [r3, #16]
}
 8003f22:	b2c0      	uxtb	r0, r0
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40018000 	.word	0x40018000

08003f2c <SDIO_GetResponse>:
  *     @arg SDIO_RESP3: Response Register 3
  *     @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8003f2c:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8003f32:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <SDIO_GetResponse+0x14>)
 8003f34:	4403      	add	r3, r0
 8003f36:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 8003f38:	9b01      	ldr	r3, [sp, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
}
 8003f3c:	b002      	add	sp, #8
 8003f3e:	4770      	bx	lr
 8003f40:	40018014 	.word	0x40018014

08003f44 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8003f44:	6803      	ldr	r3, [r0, #0]
 8003f46:	4909      	ldr	r1, [pc, #36]	; (8003f6c <SDIO_DataConfig+0x28>)
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure that
  *   contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8003f48:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8003f4a:	624b      	str	r3, [r1, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8003f4c:	6843      	ldr	r3, [r0, #4]
 8003f4e:	628b      	str	r3, [r1, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8003f50:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8003f52:	6884      	ldr	r4, [r0, #8]

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8003f54:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8003f58:	68c3      	ldr	r3, [r0, #12]
 8003f5a:	431c      	orrs	r4, r3
 8003f5c:	6903      	ldr	r3, [r0, #16]
 8003f5e:	6940      	ldr	r0, [r0, #20]
 8003f60:	4323      	orrs	r3, r4
 8003f62:	4303      	orrs	r3, r0
 8003f64:	4313      	orrs	r3, r2
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8003f66:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003f68:	bd10      	pop	{r4, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40018000 	.word	0x40018000

08003f70 <SDIO_DataStructInit>:
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f74:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8003f76:	2300      	movs	r3, #0
 8003f78:	6043      	str	r3, [r0, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8003f7a:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8003f7c:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8003f7e:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8003f80:	6143      	str	r3, [r0, #20]
 8003f82:	4770      	bx	lr

08003f84 <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 8003f84:	4b01      	ldr	r3, [pc, #4]	; (8003f8c <SDIO_GetDataCounter+0x8>)
 8003f86:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40018000 	.word	0x40018000

08003f90 <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 8003f90:	4b01      	ldr	r3, [pc, #4]	; (8003f98 <SDIO_ReadData+0x8>)
 8003f92:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8003f96:	4770      	bx	lr
 8003f98:	40018000 	.word	0x40018000

08003f9c <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 8003f9c:	4b01      	ldr	r3, [pc, #4]	; (8003fa4 <SDIO_WriteData+0x8>)
 8003f9e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8003fa2:	4770      	bx	lr
 8003fa4:	40018000 	.word	0x40018000

08003fa8 <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 8003fa8:	4b01      	ldr	r3, [pc, #4]	; (8003fb0 <SDIO_GetFIFOCount+0x8>)
 8003faa:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40018000 	.word	0x40018000

08003fb4 <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8003fb4:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <SDIO_StartSDIOReadWait+0x8>)
 8003fb6:	6018      	str	r0, [r3, #0]
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	423005a0 	.word	0x423005a0

08003fc0 <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <SDIO_StopSDIOReadWait+0x8>)
 8003fc2:	6018      	str	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	423005a4 	.word	0x423005a4

08003fcc <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8003fcc:	4b01      	ldr	r3, [pc, #4]	; (8003fd4 <SDIO_SetSDIOReadWaitMode+0x8>)
 8003fce:	6018      	str	r0, [r3, #0]
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	423005a8 	.word	0x423005a8

08003fd8 <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8003fd8:	4b01      	ldr	r3, [pc, #4]	; (8003fe0 <SDIO_SetSDIOOperation+0x8>)
 8003fda:	6018      	str	r0, [r3, #0]
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	423005ac 	.word	0x423005ac

08003fe4 <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8003fe4:	4b01      	ldr	r3, [pc, #4]	; (8003fec <SDIO_SendSDIOSuspendCmd+0x8>)
 8003fe6:	6018      	str	r0, [r3, #0]
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	423001ac 	.word	0x423001ac

08003ff0 <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8003ff0:	4b01      	ldr	r3, [pc, #4]	; (8003ff8 <SDIO_CommandCompletionCmd+0x8>)
 8003ff2:	6018      	str	r0, [r3, #0]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	423001b0 	.word	0x423001b0

08003ffc <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8003ffc:	f000 0001 	and.w	r0, r0, #1
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <SDIO_CEATAITCmd+0x10>)
 8004002:	f080 0001 	eor.w	r0, r0, #1
 8004006:	6018      	str	r0, [r3, #0]
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	423001b4 	.word	0x423001b4

08004010 <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8004010:	4b01      	ldr	r3, [pc, #4]	; (8004018 <SDIO_SendCEATACmd+0x8>)
 8004012:	6018      	str	r0, [r3, #0]
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	423001b8 	.word	0x423001b8

0800401c <SDIO_ClearFlag>:
 800401c:	4b01      	ldr	r3, [pc, #4]	; (8004024 <SDIO_ClearFlag+0x8>)
 800401e:	6398      	str	r0, [r3, #56]	; 0x38
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40018000 	.word	0x40018000

08004028 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8004028:	4b03      	ldr	r3, [pc, #12]	; (8004038 <SDIO_GetITStatus+0x10>)
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 800402c:	4203      	tst	r3, r0
}
 800402e:	bf14      	ite	ne
 8004030:	2001      	movne	r0, #1
 8004032:	2000      	moveq	r0, #0
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40018000 	.word	0x40018000

0800403c <SDIO_GetFlagStatus>:
 800403c:	f7ff bff4 	b.w	8004028 <SDIO_GetITStatus>

08004040 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8004040:	4b01      	ldr	r3, [pc, #4]	; (8004048 <SDIO_ClearITPendingBit+0x8>)
 8004042:	6398      	str	r0, [r3, #56]	; 0x38
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40018000 	.word	0x40018000

0800404c <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800404c:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800404e:	2101      	movs	r1, #1
 8004050:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004054:	f7fe fd16 	bl	8002a84 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
}
 8004058:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800405c:	2100      	movs	r1, #0
 800405e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004062:	f7fe bd0f 	b.w	8002a84 <RCC_APB1PeriphResetCmd>

08004066 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
 8004066:	4a03      	ldr	r2, [pc, #12]	; (8004074 <WWDG_SetPrescaler+0xe>)
 8004068:	6853      	ldr	r3, [r2, #4]
 800406a:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800406e:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8004070:	6050      	str	r0, [r2, #4]
 8004072:	4770      	bx	lr
 8004074:	40002c00 	.word	0x40002c00

08004078 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8004078:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <WWDG_SetWindowValue+0x24>)
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 8004080:	6853      	ldr	r3, [r2, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
 8004082:	f000 007f 	and.w	r0, r0, #127	; 0x7f

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_Mask;
 8004086:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800408a:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_Mask;
 800408c:	9b01      	ldr	r3, [sp, #4]
 800408e:	4303      	orrs	r3, r0
 8004090:	9301      	str	r3, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8004092:	9b01      	ldr	r3, [sp, #4]
 8004094:	6053      	str	r3, [r2, #4]
}
 8004096:	b002      	add	sp, #8
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40002c00 	.word	0x40002c00

080040a0 <WWDG_EnableIT>:
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 80040a0:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <WWDG_EnableIT+0x8>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	4770      	bx	lr
 80040a8:	420580a4 	.word	0x420580a4

080040ac <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_Mask;
 80040ac:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <WWDG_SetCounter+0xc>)
 80040ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80040b2:	6018      	str	r0, [r3, #0]
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40002c00 	.word	0x40002c00

080040bc <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = CR_WDGA_Set | Counter;
 80040bc:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <WWDG_Enable+0xc>)
 80040be:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80040c2:	6018      	str	r0, [r3, #0]
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40002c00 	.word	0x40002c00

080040cc <WWDG_GetFlagStatus>:
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  return (FlagStatus)(WWDG->SR);
 80040cc:	4b01      	ldr	r3, [pc, #4]	; (80040d4 <WWDG_GetFlagStatus+0x8>)
 80040ce:	6898      	ldr	r0, [r3, #8]
}
 80040d0:	b2c0      	uxtb	r0, r0
 80040d2:	4770      	bx	lr
 80040d4:	40002c00 	.word	0x40002c00

080040d8 <WWDG_ClearFlag>:
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <WWDG_ClearFlag+0x8>)
 80040da:	2200      	movs	r2, #0
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	4770      	bx	lr
 80040e0:	40002c00 	.word	0x40002c00

080040e4 <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 80040e4:	4b01      	ldr	r3, [pc, #4]	; (80040ec <DBGMCU_GetREVID+0x8>)
 80040e6:	6818      	ldr	r0, [r3, #0]
}
 80040e8:	0c00      	lsrs	r0, r0, #16
 80040ea:	4770      	bx	lr
 80040ec:	e0042000 	.word	0xe0042000

080040f0 <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 80040f0:	4b02      	ldr	r3, [pc, #8]	; (80040fc <DBGMCU_GetDEVID+0xc>)
 80040f2:	6818      	ldr	r0, [r3, #0]
}
 80040f4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	e0042000 	.word	0xe0042000

08004100 <DBGMCU_Config>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8004100:	4b04      	ldr	r3, [pc, #16]	; (8004114 <DBGMCU_Config+0x14>)
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8004102:	685a      	ldr	r2, [r3, #4]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004104:	b109      	cbz	r1, 800410a <DBGMCU_Config+0xa>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8004106:	4310      	orrs	r0, r2
 8004108:	e001      	b.n	800410e <DBGMCU_Config+0xe>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 800410a:	ea22 0000 	bic.w	r0, r2, r0
 800410e:	6058      	str	r0, [r3, #4]
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e0042000 	.word	0xe0042000

08004118 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8004118:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <NVIC_PriorityGroupConfig+0x10>)
 800411e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8004122:	60d8      	str	r0, [r3, #12]
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800412c:	78c2      	ldrb	r2, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800412e:	b510      	push	{r4, lr}
 8004130:	7803      	ldrb	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8004132:	b30a      	cbz	r2, 8004178 <NVIC_Init+0x4c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <NVIC_Init+0x64>)

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004136:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800413a:	68d1      	ldr	r1, [r2, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800413c:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800413e:	43c9      	mvns	r1, r1
 8004140:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 8004144:	f1c1 0404 	rsb	r4, r1, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004148:	fa02 f404 	lsl.w	r4, r2, r4
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800414c:	220f      	movs	r2, #15
 800414e:	40ca      	lsrs	r2, r1
 8004150:	7881      	ldrb	r1, [r0, #2]
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004152:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004156:	400a      	ands	r2, r1
 8004158:	4322      	orrs	r2, r4
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004162:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004164:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004166:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004170:	4a08      	ldr	r2, [pc, #32]	; (8004194 <NVIC_Init+0x68>)
 8004172:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004176:	bd10      	pop	{r4, pc}
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004178:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800417a:	2101      	movs	r1, #1
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <NVIC_Init+0x68>)
 8004186:	3220      	adds	r2, #32
 8004188:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800418c:	bd10      	pop	{r4, pc}
 800418e:	bf00      	nop
 8004190:	e000ed00 	.word	0xe000ed00
 8004194:	e000e100 	.word	0xe000e100

08004198 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8004198:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 800419c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80041a0:	4b01      	ldr	r3, [pc, #4]	; (80041a8 <NVIC_SetVectorTable+0x10>)
 80041a2:	4308      	orrs	r0, r1
 80041a4:	6098      	str	r0, [r3, #8]
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80041ae:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80041b0:	b109      	cbz	r1, 80041b6 <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 80041b2:	4310      	orrs	r0, r2
 80041b4:	e001      	b.n	80041ba <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80041b6:	ea22 0000 	bic.w	r0, r2, r0
 80041ba:	6118      	str	r0, [r3, #16]
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80041c6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	bf0c      	ite	eq
 80041cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80041d0:	f022 0204 	bicne.w	r2, r2, #4
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	4770      	bx	lr
 80041d8:	e000e010 	.word	0xe000e010
 80041dc:	00000000 	.word	0x00000000

080041e0 <motor_cb(roberto_msgs::MotorState const&)>:
  led_set(cmd_msg.data);
}*/



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 80041e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(!initialized)
 80041e4:	4c8c      	ldr	r4, [pc, #560]	; (8004418 <motor_cb(roberto_msgs::MotorState const&)+0x238>)
  led_set(cmd_msg.data);
}*/



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 80041e6:	b085      	sub	sp, #20
  if(!initialized)
 80041e8:	7823      	ldrb	r3, [r4, #0]
  led_set(cmd_msg.data);
}*/



void motor_cb( const roberto_msgs::MotorState& cmd_msg){
 80041ea:	4607      	mov	r7, r0
  if(!initialized)
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8105 	beq.w	80043fc <motor_cb(roberto_msgs::MotorState const&)+0x21c>
    return;
  lastMsg = millis();
 80041f2:	f7fc fa1d 	bl	8000630 <millis>
  uint8_t intMode = cmd_msg.mode;
  if(intMode == cmd_msg.DRIVE_MODE_AUTO){

  }

  if(currentMode != intMode){
 80041f6:	7a23      	ldrb	r3, [r4, #8]

void motor_cb( const roberto_msgs::MotorState& cmd_msg){
  if(!initialized)
    return;
  lastMsg = millis();
  uint8_t intMode = cmd_msg.mode;
 80041f8:	f897 6028 	ldrb.w	r6, [r7, #40]	; 0x28


void motor_cb( const roberto_msgs::MotorState& cmd_msg){
  if(!initialized)
    return;
  lastMsg = millis();
 80041fc:	6060      	str	r0, [r4, #4]
  uint8_t intMode = cmd_msg.mode;
  if(intMode == cmd_msg.DRIVE_MODE_AUTO){

  }

  if(currentMode != intMode){
 80041fe:	42b3      	cmp	r3, r6
    waitForServos = true;
 8004200:	bf1c      	itt	ne
 8004202:	2301      	movne	r3, #1
 8004204:	7263      	strbne	r3, [r4, #9]
  }

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
 8004206:	2e01      	cmp	r6, #1
 8004208:	f040 80d0 	bne.w	80043ac <motor_cb(roberto_msgs::MotorState const&)+0x1cc>
    float speedMult[2] = {1,1};
    float angle[2] = {0, 0};
    if (cmd_msg.heading_angle != 0){
 800420c:	f8d7 a018 	ldr.w	sl, [r7, #24]
 8004210:	2100      	movs	r1, #0
 8004212:	4650      	mov	r0, sl
 8004214:	f001 fca8 	bl	8005b68 <__aeabi_fcmpeq>
 8004218:	2800      	cmp	r0, #0
 800421a:	d17f      	bne.n	800431c <motor_cb(roberto_msgs::MotorState const&)+0x13c>
      float R = 0.05/sin(cmd_msg.heading_angle*M_PI/360);
 800421c:	4650      	mov	r0, sl
 800421e:	f000 ff23 	bl	8005068 <__aeabi_f2d>
 8004222:	a379      	add	r3, pc, #484	; (adr r3, 8004408 <motor_cb(roberto_msgs::MotorState const&)+0x228>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	e9cd 0100 	strd	r0, r1, [sp]
 800422c:	f000 ff70 	bl	8005110 <__aeabi_dmul>
 8004230:	2200      	movs	r2, #0
 8004232:	4b7a      	ldr	r3, [pc, #488]	; (800441c <motor_cb(roberto_msgs::MotorState const&)+0x23c>)
 8004234:	f001 f896 	bl	8005364 <__aeabi_ddiv>
 8004238:	f00d ffe0 	bl	80121fc <sin>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	a173      	add	r1, pc, #460	; (adr r1, 8004410 <motor_cb(roberto_msgs::MotorState const&)+0x230>)
 8004242:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004246:	f001 f88d 	bl	8005364 <__aeabi_ddiv>
 800424a:	f001 f99b 	bl	8005584 <__aeabi_d2f>
      speedMult[0] = (2*R)/(2*R - (L/2 + d));
 800424e:	4601      	mov	r1, r0

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
    float speedMult[2] = {1,1};
    float angle[2] = {0, 0};
    if (cmd_msg.heading_angle != 0){
      float R = 0.05/sin(cmd_msg.heading_angle*M_PI/360);
 8004250:	4683      	mov	fp, r0
      speedMult[0] = (2*R)/(2*R - (L/2 + d));
 8004252:	f001 f9ed 	bl	8005630 <__addsf3>
 8004256:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800425a:	4605      	mov	r5, r0
 800425c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004260:	4640      	mov	r0, r8
 8004262:	f001 faed 	bl	8005840 <__aeabi_fmul>
 8004266:	6921      	ldr	r1, [r4, #16]
 8004268:	f001 f9e2 	bl	8005630 <__addsf3>
 800426c:	4601      	mov	r1, r0
 800426e:	9003      	str	r0, [sp, #12]
 8004270:	4628      	mov	r0, r5
 8004272:	f001 f9db 	bl	800562c <__aeabi_fsub>
 8004276:	4601      	mov	r1, r0
 8004278:	4628      	mov	r0, r5
 800427a:	f001 fb95 	bl	80059a8 <__aeabi_fdiv>
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
 800427e:	9b03      	ldr	r3, [sp, #12]
  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
    float speedMult[2] = {1,1};
    float angle[2] = {0, 0};
    if (cmd_msg.heading_angle != 0){
      float R = 0.05/sin(cmd_msg.heading_angle*M_PI/360);
      speedMult[0] = (2*R)/(2*R - (L/2 + d));
 8004280:	4681      	mov	r9, r0
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
 8004282:	4619      	mov	r1, r3
 8004284:	4628      	mov	r0, r5
 8004286:	f001 f9d3 	bl	8005630 <__addsf3>
 800428a:	4601      	mov	r1, r0
 800428c:	4628      	mov	r0, r5
 800428e:	f001 fb8b 	bl	80059a8 <__aeabi_fdiv>
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
 8004292:	4641      	mov	r1, r8
    float speedMult[2] = {1,1};
    float angle[2] = {0, 0};
    if (cmd_msg.heading_angle != 0){
      float R = 0.05/sin(cmd_msg.heading_angle*M_PI/360);
      speedMult[0] = (2*R)/(2*R - (L/2 + d));
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
 8004294:	9003      	str	r0, [sp, #12]
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
 8004296:	4658      	mov	r0, fp
 8004298:	f001 f9ca 	bl	8005630 <__addsf3>
 800429c:	4601      	mov	r1, r0
 800429e:	4640      	mov	r0, r8
 80042a0:	f001 fb82 	bl	80059a8 <__aeabi_fdiv>
 80042a4:	f000 fee0 	bl	8005068 <__aeabi_f2d>
 80042a8:	f00d fdbe 	bl	8011e28 <atan>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042b4:	f000 fd7a 	bl	8004dac <__adddf3>
 80042b8:	f001 f964 	bl	8005584 <__aeabi_d2f>
      angle[1] = cmd_msg.heading_angle + atan(L/(L-R));
 80042bc:	4659      	mov	r1, fp
    if (cmd_msg.heading_angle != 0){
      float R = 0.05/sin(cmd_msg.heading_angle*M_PI/360);
      speedMult[0] = (2*R)/(2*R - (L/2 + d));
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
 80042be:	4605      	mov	r5, r0
      angle[1] = cmd_msg.heading_angle + atan(L/(L-R));
 80042c0:	4640      	mov	r0, r8
 80042c2:	f001 f9b3 	bl	800562c <__aeabi_fsub>
 80042c6:	4601      	mov	r1, r0
 80042c8:	4640      	mov	r0, r8
 80042ca:	f001 fb6d 	bl	80059a8 <__aeabi_fdiv>
 80042ce:	f000 fecb 	bl	8005068 <__aeabi_f2d>
 80042d2:	f00d fda9 	bl	8011e28 <atan>
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042de:	f000 fd65 	bl	8004dac <__adddf3>
 80042e2:	f001 f94f 	bl	8005584 <__aeabi_d2f>
    }else{
      angle[0] = 0;
      angle[1] = 0;
    }

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 80042e6:	494e      	ldr	r1, [pc, #312]	; (8004420 <motor_cb(roberto_msgs::MotorState const&)+0x240>)
      float R = 0.05/sin(cmd_msg.heading_angle*M_PI/360);
      speedMult[0] = (2*R)/(2*R - (L/2 + d));
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
      angle[1] = cmd_msg.heading_angle + atan(L/(L-R));
 80042e8:	4680      	mov	r8, r0
    }else{
      angle[0] = 0;
      angle[1] = 0;
    }

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
 80042ea:	4628      	mov	r0, r5
 80042ec:	f001 fc64 	bl	8005bb8 <__aeabi_fcmpgt>
 80042f0:	b930      	cbnz	r0, 8004300 <motor_cb(roberto_msgs::MotorState const&)+0x120>
 80042f2:	494c      	ldr	r1, [pc, #304]	; (8004424 <motor_cb(roberto_msgs::MotorState const&)+0x244>)
 80042f4:	4628      	mov	r0, r5
 80042f6:	f001 fc41 	bl	8005b7c <__aeabi_fcmplt>
 80042fa:	b110      	cbz	r0, 8004302 <motor_cb(roberto_msgs::MotorState const&)+0x122>
 80042fc:	4d49      	ldr	r5, [pc, #292]	; (8004424 <motor_cb(roberto_msgs::MotorState const&)+0x244>)
 80042fe:	e000      	b.n	8004302 <motor_cb(roberto_msgs::MotorState const&)+0x122>
 8004300:	4d47      	ldr	r5, [pc, #284]	; (8004420 <motor_cb(roberto_msgs::MotorState const&)+0x240>)
    angle[1] = angle[1] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[1] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[1]);
 8004302:	4947      	ldr	r1, [pc, #284]	; (8004420 <motor_cb(roberto_msgs::MotorState const&)+0x240>)
 8004304:	4640      	mov	r0, r8
 8004306:	f001 fc57 	bl	8005bb8 <__aeabi_fcmpgt>
 800430a:	b970      	cbnz	r0, 800432a <motor_cb(roberto_msgs::MotorState const&)+0x14a>
 800430c:	4945      	ldr	r1, [pc, #276]	; (8004424 <motor_cb(roberto_msgs::MotorState const&)+0x244>)
 800430e:	4640      	mov	r0, r8
 8004310:	f001 fc34 	bl	8005b7c <__aeabi_fcmplt>
 8004314:	b158      	cbz	r0, 800432e <motor_cb(roberto_msgs::MotorState const&)+0x14e>
 8004316:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8004424 <motor_cb(roberto_msgs::MotorState const&)+0x244>
 800431a:	e008      	b.n	800432e <motor_cb(roberto_msgs::MotorState const&)+0x14e>
  if(currentMode != intMode){
    waitForServos = true;
  }

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
    float speedMult[2] = {1,1};
 800431c:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
      speedMult[1] = (2*R)/(2*R + (L/2 + d));
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
      angle[1] = cmd_msg.heading_angle + atan(L/(L-R));
    }else{
      angle[0] = 0;
 8004320:	2500      	movs	r5, #0
  if(currentMode != intMode){
    waitForServos = true;
  }

  if(intMode == cmd_msg.DRIVE_MODE_PIVOT){
    float speedMult[2] = {1,1};
 8004322:	f8cd 900c 	str.w	r9, [sp, #12]
      //angle[0] = atan(L/(B+R));   // B=L as robot is quadratic
      angle[0] = cmd_msg.heading_angle + atan(L/(L+R));
      angle[1] = cmd_msg.heading_angle + atan(L/(L-R));
    }else{
      angle[0] = 0;
      angle[1] = 0;
 8004326:	46a8      	mov	r8, r5
 8004328:	e001      	b.n	800432e <motor_cb(roberto_msgs::MotorState const&)+0x14e>
    }

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
    angle[1] = angle[1] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[1] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[1]);
 800432a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8004420 <motor_cb(roberto_msgs::MotorState const&)+0x240>

    if(cmd_msg.heading_angle > 0){
 800432e:	2100      	movs	r1, #0
 8004330:	4650      	mov	r0, sl
 8004332:	f001 fc41 	bl	8005bb8 <__aeabi_fcmpgt>
      servo_left->setReference(angle[0]+135);
 8004336:	f8d4 a014 	ldr.w	sl, [r4, #20]
 800433a:	493b      	ldr	r1, [pc, #236]	; (8004428 <motor_cb(roberto_msgs::MotorState const&)+0x248>)
    }

    angle[0] = angle[0] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[0] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[0]);
    angle[1] = angle[1] > MAX_ANGLE_PIVOT? MAX_ANGLE_PIVOT : ( angle[1] < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : angle[1]);

    if(cmd_msg.heading_angle > 0){
 800433c:	b190      	cbz	r0, 8004364 <motor_cb(roberto_msgs::MotorState const&)+0x184>
      servo_left->setReference(angle[0]+135);
 800433e:	4628      	mov	r0, r5
 8004340:	f001 f976 	bl	8005630 <__addsf3>
 8004344:	f8da 3000 	ldr.w	r3, [sl]
 8004348:	4601      	mov	r1, r0
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	4650      	mov	r0, sl
 800434e:	4798      	blx	r3
      servo_right->setReference(-angle[1]+135);
 8004350:	4641      	mov	r1, r8
 8004352:	4835      	ldr	r0, [pc, #212]	; (8004428 <motor_cb(roberto_msgs::MotorState const&)+0x248>)
 8004354:	f001 f96a 	bl	800562c <__aeabi_fsub>
 8004358:	69a5      	ldr	r5, [r4, #24]
 800435a:	4601      	mov	r1, r0
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	4628      	mov	r0, r5
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	e013      	b.n	800438c <motor_cb(roberto_msgs::MotorState const&)+0x1ac>
    }else{
      servo_left->setReference(angle[1]+135);
 8004364:	4640      	mov	r0, r8
 8004366:	f001 f963 	bl	8005630 <__addsf3>
 800436a:	f8da 3000 	ldr.w	r3, [sl]
 800436e:	4601      	mov	r1, r0
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	4650      	mov	r0, sl
 8004374:	4798      	blx	r3
      servo_right->setReference(-angle[0]+135);
 8004376:	4629      	mov	r1, r5
 8004378:	482b      	ldr	r0, [pc, #172]	; (8004428 <motor_cb(roberto_msgs::MotorState const&)+0x248>)
 800437a:	f001 f957 	bl	800562c <__aeabi_fsub>
 800437e:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8004382:	4601      	mov	r1, r0
 8004384:	4640      	mov	r0, r8
 8004386:	f8d8 3000 	ldr.w	r3, [r8]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	4798      	blx	r3
    }
    motorCmd[0] = cmd_msg.speed*speedMult[0];
 800438e:	6a3f      	ldr	r7, [r7, #32]
 8004390:	4649      	mov	r1, r9
 8004392:	4638      	mov	r0, r7
 8004394:	f001 fa54 	bl	8005840 <__aeabi_fmul>
    motorCmd[1] = cmd_msg.speed*speedMult[1];
 8004398:	9903      	ldr	r1, [sp, #12]
      servo_right->setReference(-angle[1]+135);
    }else{
      servo_left->setReference(angle[1]+135);
      servo_right->setReference(-angle[0]+135);
    }
    motorCmd[0] = cmd_msg.speed*speedMult[0];
 800439a:	4605      	mov	r5, r0
 800439c:	61e0      	str	r0, [r4, #28]
    motorCmd[1] = cmd_msg.speed*speedMult[1];
 800439e:	4638      	mov	r0, r7
 80043a0:	f001 fa4e 	bl	8005840 <__aeabi_fmul>
    motorCmd[2] = cmd_msg.speed*speedMult[1];
    motorCmd[3] = cmd_msg.speed*speedMult[0];
 80043a4:	62a5      	str	r5, [r4, #40]	; 0x28
    }else{
      servo_left->setReference(angle[1]+135);
      servo_right->setReference(-angle[0]+135);
    }
    motorCmd[0] = cmd_msg.speed*speedMult[0];
    motorCmd[1] = cmd_msg.speed*speedMult[1];
 80043a6:	6220      	str	r0, [r4, #32]
    motorCmd[2] = cmd_msg.speed*speedMult[1];
 80043a8:	6260      	str	r0, [r4, #36]	; 0x24
 80043aa:	e026      	b.n	80043fa <motor_cb(roberto_msgs::MotorState const&)+0x21a>
    /*angle[0] = cmd_msg.heading_angle;
    angle[1] = cmd_msg.heading_angle;
    servo_left->setReference(135+angle[0]);
    servo_right->setReference(135-angle[1]);*/

  }else if(intMode == cmd_msg.DRIVE_MODE_SPIN){
 80043ac:	2e02      	cmp	r6, #2
 80043ae:	d111      	bne.n	80043d4 <motor_cb(roberto_msgs::MotorState const&)+0x1f4>
    float h = 90;
    servo_left->setReference(h);
 80043b0:	6960      	ldr	r0, [r4, #20]
 80043b2:	491e      	ldr	r1, [pc, #120]	; (800442c <motor_cb(roberto_msgs::MotorState const&)+0x24c>)
 80043b4:	6803      	ldr	r3, [r0, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	4798      	blx	r3
    servo_right->setReference(h);
 80043ba:	69a0      	ldr	r0, [r4, #24]
 80043bc:	491b      	ldr	r1, [pc, #108]	; (800442c <motor_cb(roberto_msgs::MotorState const&)+0x24c>)
 80043be:	6803      	ldr	r3, [r0, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4798      	blx	r3

    motorCmd[0] = cmd_msg.speed;
 80043c4:	6a3b      	ldr	r3, [r7, #32]
    motorCmd[1] = -cmd_msg.speed;
 80043c6:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
  }else if(intMode == cmd_msg.DRIVE_MODE_SPIN){
    float h = 90;
    servo_left->setReference(h);
    servo_right->setReference(h);

    motorCmd[0] = cmd_msg.speed;
 80043ca:	61e3      	str	r3, [r4, #28]
    motorCmd[1] = -cmd_msg.speed;
 80043cc:	6222      	str	r2, [r4, #32]
    motorCmd[2] = -cmd_msg.speed;
 80043ce:	6262      	str	r2, [r4, #36]	; 0x24
    motorCmd[3] = cmd_msg.speed;
 80043d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80043d2:	e012      	b.n	80043fa <motor_cb(roberto_msgs::MotorState const&)+0x21a>

  }else if(intMode == cmd_msg.DRIVE_MODE_SIDEWAYS){
 80043d4:	2e03      	cmp	r6, #3
 80043d6:	d110      	bne.n	80043fa <motor_cb(roberto_msgs::MotorState const&)+0x21a>
    float h = 45;
    servo_left->setReference(h);
 80043d8:	6960      	ldr	r0, [r4, #20]
 80043da:	4915      	ldr	r1, [pc, #84]	; (8004430 <motor_cb(roberto_msgs::MotorState const&)+0x250>)
 80043dc:	6803      	ldr	r3, [r0, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	4798      	blx	r3
    servo_right->setReference(h);
 80043e2:	69a0      	ldr	r0, [r4, #24]
 80043e4:	4912      	ldr	r1, [pc, #72]	; (8004430 <motor_cb(roberto_msgs::MotorState const&)+0x250>)
 80043e6:	6803      	ldr	r3, [r0, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	4798      	blx	r3

    motorCmd[0] = cmd_msg.speed;  //FR
 80043ec:	6a3b      	ldr	r3, [r7, #32]
    motorCmd[1] = -cmd_msg.speed; //FL
 80043ee:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
  }else if(intMode == cmd_msg.DRIVE_MODE_SIDEWAYS){
    float h = 45;
    servo_left->setReference(h);
    servo_right->setReference(h);

    motorCmd[0] = cmd_msg.speed;  //FR
 80043f2:	61e3      	str	r3, [r4, #28]
    motorCmd[1] = -cmd_msg.speed; //FL
 80043f4:	6222      	str	r2, [r4, #32]
    motorCmd[2] = cmd_msg.speed; //RL
 80043f6:	6263      	str	r3, [r4, #36]	; 0x24
    motorCmd[3] = -cmd_msg.speed;  //RR
 80043f8:	62a2      	str	r2, [r4, #40]	; 0x28
  }
  currentMode = intMode;
 80043fa:	7226      	strb	r6, [r4, #8]
}
 80043fc:	b005      	add	sp, #20
 80043fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004402:	bf00      	nop
 8004404:	f3af 8000 	nop.w
 8004408:	54442d18 	.word	0x54442d18
 800440c:	400921fb 	.word	0x400921fb
 8004410:	9999999a 	.word	0x9999999a
 8004414:	3fa99999 	.word	0x3fa99999
 8004418:	200001d4 	.word	0x200001d4
 800441c:	40768000 	.word	0x40768000
 8004420:	41700000 	.word	0x41700000
 8004424:	c1700000 	.word	0xc1700000
 8004428:	43070000 	.word	0x43070000
 800442c:	42b40000 	.word	0x42b40000
 8004430:	42340000 	.word	0x42340000

08004434 <USART1_IRQHandler>:
};



extern "C"{
  void USART1_IRQHandler(void){
 8004434:	b538      	push	{r3, r4, r5, lr}

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){
 8004436:	f240 5125 	movw	r1, #1317	; 0x525
 800443a:	4810      	ldr	r0, [pc, #64]	; (800447c <USART1_IRQHandler+0x48>)
 800443c:	f7fe fe8a 	bl	8003154 <USART_GetITStatus>
 8004440:	b140      	cbz	r0, 8004454 <USART1_IRQHandler+0x20>
 8004442:	4c0f      	ldr	r4, [pc, #60]	; (8004480 <USART1_IRQHandler+0x4c>)
 8004444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004446:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004448:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800444c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004450:	4293      	cmp	r3, r2
 8004452:	d104      	bne.n	800445e <USART1_IRQHandler+0x2a>
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear interupt flag by reading byte
    }
  }   
 8004454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

      USART_FIFO[USART_CNTIN] = (uint8_t)USART_ReceiveData(USART1);
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
    }else{
      // Should NEVER reach this point!
      (void)USART_ReceiveData(USART1);  // Clear interupt flag by reading byte
 8004458:	4808      	ldr	r0, [pc, #32]	; (800447c <USART1_IRQHandler+0x48>)
 800445a:	f7fe be02 	b.w	8003062 <USART_ReceiveData>
extern "C"{
  void USART1_IRQHandler(void){

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET && USART_CNTIN != (( USART_CNTOUT - 1 + BUFFER_SIZE) % BUFFER_SIZE)){

      USART_FIFO[USART_CNTIN] = (uint8_t)USART_ReceiveData(USART1);
 800445e:	4807      	ldr	r0, [pc, #28]	; (800447c <USART1_IRQHandler+0x48>)
 8004460:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004462:	f7fe fdfe 	bl	8003062 <USART_ReceiveData>
 8004466:	4425      	add	r5, r4
 8004468:	b2c0      	uxtb	r0, r0
 800446a:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      USART_CNTIN = (USART_CNTIN + 1) % BUFFER_SIZE;
 800446e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004470:	3301      	adds	r3, #1
 8004472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004476:	6323      	str	r3, [r4, #48]	; 0x30
 8004478:	bd38      	pop	{r3, r4, r5, pc}
 800447a:	bf00      	nop
 800447c:	40013800 	.word	0x40013800
 8004480:	200001d4 	.word	0x200001d4

08004484 <reader(std_msgs::Float32MultiArray)>:

float reader(std_msgs::Float32MultiArray msg){
 8004484:	b510      	push	{r4, lr}
  //printf("1:%d", (int)(msg.data[0]*1000));
  //printf("2:%d\r\n", (int)(msg.data[1]*1000));
  //printf("3:%d\r\n", (int)(msg.data[2]*1000));
  return msg.data[0] + msg.data[1] + msg.data[2];
 8004486:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004488:	6861      	ldr	r1, [r4, #4]
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	f001 f8d0 	bl	8005630 <__addsf3>
 8004490:	68a1      	ldr	r1, [r4, #8]
 8004492:	f001 f8cd 	bl	8005630 <__addsf3>
}
 8004496:	bd10      	pop	{r4, pc}

08004498 <EXTI2_IRQHandler>:
  }
  //delete odom_msg.data;
  return 0;
}

extern "C" void EXTI2_IRQHandler(void){
 8004498:	b508      	push	{r3, lr}
  if(EXTI_GetITStatus(EXTI_Line2) != RESET){
 800449a:	2004      	movs	r0, #4
 800449c:	f7fd f96a 	bl	8001774 <EXTI_GetITStatus>
 80044a0:	b140      	cbz	r0, 80044b4 <EXTI2_IRQHandler+0x1c>
    shuttingDown = true;
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <EXTI2_IRQHandler+0x20>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
    EXTI_ClearITPendingBit(EXTI_Line2);
 80044aa:	2004      	movs	r0, #4
  }
}
 80044ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

extern "C" void EXTI2_IRQHandler(void){
  if(EXTI_GetITStatus(EXTI_Line2) != RESET){
    shuttingDown = true;
    EXTI_ClearITPendingBit(EXTI_Line2);
 80044b0:	f7fd b96e 	b.w	8001790 <EXTI_ClearITPendingBit>
 80044b4:	bd08      	pop	{r3, pc}
 80044b6:	bf00      	nop
 80044b8:	200001d4 	.word	0x200001d4

080044bc <HardFault_Handler>:
                        "MRS    R0, PSP \n"
                        "B      hard_fault_handler_c      \n"
                "_MSP:  \n"
                        "MRS    R0, MSP \n"
                        "B      hard_fault_handler_c      \n"
                ".syntax divided\n") ;
 80044bc:	2004      	movs	r0, #4
 80044be:	4671      	mov	r1, lr
 80044c0:	4208      	tst	r0, r1
 80044c2:	d003      	beq.n	80044cc <_MSP>
 80044c4:	f3ef 8009 	mrs	r0, PSP
 80044c8:	f000 b804 	b.w	80044d4 <hard_fault_handler_c>

080044cc <_MSP>:
 80044cc:	f3ef 8008 	mrs	r0, MSP
 80044d0:	f000 b800 	b.w	80044d4 <hard_fault_handler_c>

080044d4 <hard_fault_handler_c>:
}


extern "C" void hard_fault_handler_c (unsigned int * hardfault_args)
{
 80044d4:	b508      	push	{r3, lr}
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3 | RCC_APB1Periph_TIM4, DISABLE);
 80044d6:	2100      	movs	r1, #0
 80044d8:	2007      	movs	r0, #7
 80044da:	f7fe fabb 	bl	8002a54 <RCC_APB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, DISABLE);
 80044de:	2100      	movs	r1, #0
 80044e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80044e4:	f7fe faaa 	bl	8002a3c <RCC_APB2PeriphClockCmd>
 * Initiate a system reset request to reset the MCU
 */
static __INLINE void NVIC_SystemReset(void)
{
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) | 
 80044e8:	4904      	ldr	r1, [pc, #16]	; (80044fc <hard_fault_handler_c+0x28>)
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <hard_fault_handler_c+0x2c>)
 80044ec:	68ca      	ldr	r2, [r1, #12]
 80044ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80044f2:	4313      	orrs	r3, r2
                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
 80044f4:	60cb      	str	r3, [r1, #12]
static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	e7fe      	b.n	80044fa <hard_fault_handler_c+0x26>
 80044fc:	e000ed00 	.word	0xe000ed00
 8004500:	05fa0004 	.word	0x05fa0004

08004504 <assert_failed(unsigned char*, unsigned long)>:
  
  NVIC_SystemReset();
}


void assert_failed(uint8_t* file, uint32_t line){
 8004504:	b508      	push	{r3, lr}
  /*char str[150];

  sprintf(str, "Wrong parameters value: file %s on line %u\r\n", file, (unsigned int)line);
  nh.logerror(str);*/
  while (1){
    debug_toggle();
 8004506:	f7fb ffd5 	bl	80004b4 <debug_toggle>
    delay(100);
 800450a:	2064      	movs	r0, #100	; 0x64
 800450c:	f7fc f874 	bl	80005f8 <delay>
 8004510:	e7f9      	b.n	8004506 <assert_failed(unsigned char*, unsigned long)+0x2>
 8004512:	bf00      	nop

08004514 <motor::createMotor(motorSettings*)>:
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 8004514:	b538      	push	{r3, r4, r5, lr}
    switch (settings->m_motorType) {
 8004516:	6803      	ldr	r3, [r0, #0]
#include "motorSettings.h"

#include "servo.h"
#include "DCMotor.h"

motor *motor::createMotor(motorSettings *settings){
 8004518:	4605      	mov	r5, r0
    switch (settings->m_motorType) {
 800451a:	2b01      	cmp	r3, #1
 800451c:	d002      	beq.n	8004524 <motor::createMotor(motorSettings*)+0x10>
 800451e:	2b02      	cmp	r3, #2
 8004520:	d008      	beq.n	8004534 <motor::createMotor(motorSettings*)+0x20>
 8004522:	e00f      	b.n	8004544 <motor::createMotor(motorSettings*)+0x30>
	    case MOTOR_TYPE_SERVO:
	    	/*settings->m_ServoLimitMax = 7000;
  			settings->m_ServoLimitMin = 2000;*/
	        return new servo(settings);
 8004524:	204c      	movs	r0, #76	; 0x4c
 8004526:	f00d f975 	bl	8011814 <operator new(unsigned int)>
 800452a:	4629      	mov	r1, r5
 800452c:	4604      	mov	r4, r0
 800452e:	f000 f8e3 	bl	80046f8 <servo::servo(motorSettings*)>
 8004532:	e009      	b.n	8004548 <motor::createMotor(motorSettings*)+0x34>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);
 8004534:	2030      	movs	r0, #48	; 0x30
 8004536:	f00d f96d 	bl	8011814 <operator new(unsigned int)>
 800453a:	4629      	mov	r1, r5
 800453c:	4604      	mov	r4, r0
 800453e:	f000 fa1d 	bl	800497c <DCMotor::DCMotor(motorSettings*)>
 8004542:	e001      	b.n	8004548 <motor::createMotor(motorSettings*)+0x34>

	    default:
	        return 0;
 8004544:	2000      	movs	r0, #0
 8004546:	bd38      	pop	{r3, r4, r5, pc}
motor *motor::createMotor(motorSettings *settings){
    switch (settings->m_motorType) {
	    case MOTOR_TYPE_SERVO:
	    	/*settings->m_ServoLimitMax = 7000;
  			settings->m_ServoLimitMin = 2000;*/
	        return new servo(settings);
 8004548:	4620      	mov	r0, r4
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	e7ff      	b.n	800454e <motor::createMotor(motorSettings*)+0x3a>
			
	    case MOTOR_TYPE_DC_MOTOR:
	        return new DCMotor(settings);
 800454e:	4620      	mov	r0, r4
 8004550:	f00c fe44 	bl	80111dc <operator delete(void*)>
 8004554:	f00d f9d8 	bl	8011908 <__cxa_end_cleanup>

08004558 <motor::motor(motorSettings*)>:
	        return 0;
    }
}


motor::motor(motorSettings *settings){
 8004558:	4a01      	ldr	r2, [pc, #4]	; (8004560 <motor::motor(motorSettings*)+0x8>)
    m_settings = settings;
 800455a:	6041      	str	r1, [r0, #4]
	        return 0;
    }
}


motor::motor(motorSettings *settings){
 800455c:	6002      	str	r2, [r0, #0]
    m_settings = settings;
}
 800455e:	4770      	bx	lr
 8004560:	08014754 	.word	0x08014754

08004564 <motor::~motor()>:

motor::~motor()
{
 8004564:	4770      	bx	lr

08004566 <motor::~motor()>:

motor::motor(motorSettings *settings){
    m_settings = settings;
}

motor::~motor()
 8004566:	b510      	push	{r4, lr}
 8004568:	4604      	mov	r4, r0
{
 800456a:	f00c fe37 	bl	80111dc <operator delete(void*)>
 800456e:	4620      	mov	r0, r4
 8004570:	bd10      	pop	{r4, pc}
 8004572:	bf00      	nop

08004574 <servo::setReference(float)>:
	std::copy(u_, u_ + 3, u);

	return true;
}

void servo::setReference(float setPoint){
 8004574:	b510      	push	{r4, lr}
 8004576:	4604      	mov	r4, r0
	pos = (int) setPoint;
 8004578:	4608      	mov	r0, r1
 800457a:	f001 fb27 	bl	8005bcc <__aeabi_f2iz>
 800457e:	60a0      	str	r0, [r4, #8]
 8004580:	bd10      	pop	{r4, pc}

08004582 <servo::getReference()>:
	//pos = (int)setPoint > 90? 90 : ( (int)setPoint < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : (int)setPoint);
}

float servo::getReference(){
 8004582:	b508      	push	{r3, lr}
	return (float)pos;
 8004584:	6880      	ldr	r0, [r0, #8]
 8004586:	f001 f907 	bl	8005798 <__aeabi_i2f>
}
 800458a:	bd08      	pop	{r3, pc}

0800458c <servo::motorName()>:
const char* servo::motorName(){
	return m_settings->m_motorName;
 800458c:	6843      	ldr	r3, [r0, #4]
}
 800458e:	6858      	ldr	r0, [r3, #4]
 8004590:	4770      	bx	lr

08004592 <servo::~servo()>:
servo::servo(motorSettings *settings) : motor(settings)
{

}

servo::~servo()
 8004592:	b510      	push	{r4, lr}
 8004594:	4604      	mov	r4, r0
 8004596:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <servo::~servo()+0x12>)
 8004598:	6003      	str	r3, [r0, #0]
 800459a:	f7ff ffe3 	bl	8004564 <motor::~motor()>
{
}
 800459e:	4620      	mov	r0, r4
 80045a0:	bd10      	pop	{r4, pc}
 80045a2:	bf00      	nop
 80045a4:	0801478c 	.word	0x0801478c

080045a8 <servo::~servo()>:
servo::servo(motorSettings *settings) : motor(settings)
{

}

servo::~servo()
 80045a8:	b510      	push	{r4, lr}
 80045aa:	4604      	mov	r4, r0
{
}
 80045ac:	f7ff fff1 	bl	8004592 <servo::~servo()>
 80045b0:	4620      	mov	r0, r4
 80045b2:	f00c fe13 	bl	80111dc <operator delete(void*)>
 80045b6:	4620      	mov	r0, r4
 80045b8:	bd10      	pop	{r4, pc}

080045ba <servo::motorInit()>:

bool servo::motorInit()
{
 80045ba:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80045bc:	6843      	ldr	r3, [r0, #4]
servo::~servo()
{
}

bool servo::motorInit()
{
 80045be:	b094      	sub	sp, #80	; 0x50

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80045c0:	699a      	ldr	r2, [r3, #24]
servo::~servo()
{
}

bool servo::motorInit()
{
 80045c2:	4604      	mov	r4, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 80045c4:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80045c8:	2218      	movs	r2, #24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 80045ca:	69d8      	ldr	r0, [r3, #28]
{

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80045cc:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 80045d0:	4669      	mov	r1, sp

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80045d2:	2203      	movs	r2, #3
 80045d4:	f88d 2002 	strb.w	r2, [sp, #2]
	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 80045d8:	f7fd fdd1 	bl	800217e <GPIO_Init>




	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
 80045dc:	f64e 235f 	movw	r3, #59999	; 0xea5f
 80045e0:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
 80045e4:	2317      	movs	r3, #23
 80045e6:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80045ea:	6863      	ldr	r3, [r4, #4]


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80045ec:	2500      	movs	r5, #0
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80045ee:	6898      	ldr	r0, [r3, #8]
 80045f0:	a901      	add	r1, sp, #4


	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
	TIM_TimeBaseStructure.TIM_Prescaler = 23;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80045f2:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80045f6:	f8ad 5006 	strh.w	r5, [sp, #6]

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80045fa:	f7fe ff27 	bl	800344c <TIM_TimeBaseInit>


	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 80045fe:	a810      	add	r0, sp, #64	; 0x40
 8004600:	f7ff f886 	bl	8003710 <TIM_OCStructInit>

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8004604:	2360      	movs	r3, #96	; 0x60
 8004606:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800460a:	2301      	movs	r3, #1
 800460c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 8004610:	6863      	ldr	r3, [r4, #4]
	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 8004612:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 8004616:	68da      	ldr	r2, [r3, #12]

	/* PWM1 Mode configuration: Channel1 */
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x0000;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8004618:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48

	switch(m_settings->m_TimerChannel){
 800461c:	3a01      	subs	r2, #1
 800461e:	2a03      	cmp	r2, #3
 8004620:	d865      	bhi.n	80046ee <servo::motorInit()+0x134>
 8004622:	e8df f002 	tbb	[pc, r2]
 8004626:	0c02      	.short	0x0c02
 8004628:	2016      	.short	0x2016
		case 1:
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 800462a:	a910      	add	r1, sp, #64	; 0x40
 800462c:	6898      	ldr	r0, [r3, #8]
 800462e:	f7fe ff57 	bl	80034e0 <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004632:	6863      	ldr	r3, [r4, #4]
 8004634:	2108      	movs	r1, #8
 8004636:	6898      	ldr	r0, [r3, #8]
 8004638:	f7ff f982 	bl	8003940 <TIM_OC1PreloadConfig>
 800463c:	e01c      	b.n	8004678 <servo::motorInit()+0xbe>
			break;
		case 2:
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 800463e:	a910      	add	r1, sp, #64	; 0x40
 8004640:	6898      	ldr	r0, [r3, #8]
 8004642:	f7fe ff91 	bl	8003568 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 8004646:	6863      	ldr	r3, [r4, #4]
 8004648:	2108      	movs	r1, #8
 800464a:	6898      	ldr	r0, [r3, #8]
 800464c:	f7ff f980 	bl	8003950 <TIM_OC2PreloadConfig>
 8004650:	e012      	b.n	8004678 <servo::motorInit()+0xbe>
			break;
		case 3:
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004652:	a910      	add	r1, sp, #64	; 0x40
 8004654:	6898      	ldr	r0, [r3, #8]
 8004656:	f7fe ffcb 	bl	80035f0 <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800465a:	6863      	ldr	r3, [r4, #4]
 800465c:	2108      	movs	r1, #8
 800465e:	6898      	ldr	r0, [r3, #8]
 8004660:	f7ff f980 	bl	8003964 <TIM_OC3PreloadConfig>
 8004664:	e008      	b.n	8004678 <servo::motorInit()+0xbe>
			break;
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004666:	6898      	ldr	r0, [r3, #8]
 8004668:	a910      	add	r1, sp, #64	; 0x40
 800466a:	f7ff f803 	bl	8003674 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800466e:	6863      	ldr	r3, [r4, #4]
 8004670:	2108      	movs	r1, #8
 8004672:	6898      	ldr	r0, [r3, #8]
 8004674:	f7ff f97e 	bl	8003974 <TIM_OC4PreloadConfig>
		default:
			return false;
	}


	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 8004678:	6863      	ldr	r3, [r4, #4]
 800467a:	2101      	movs	r1, #1
 800467c:	6898      	ldr	r0, [r3, #8]
 800467e:	f7ff f92f 	bl	80038e0 <TIM_ARRPreloadConfig>

	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 8004682:	6863      	ldr	r3, [r4, #4]
 8004684:	2101      	movs	r1, #1
 8004686:	6898      	ldr	r0, [r3, #8]
 8004688:	f7ff f869 	bl	800375e <TIM_CtrlPWMOutputs>

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 800468c:	6863      	ldr	r3, [r4, #4]

	// Setup Controller
	float b_[] = {0.0201,    0.0402,    0.0201};
 800468e:	4e19      	ldr	r6, [pc, #100]	; (80046f4 <servo::motorInit()+0x13a>)

	/* TIM Main Output Enable */
	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);
 8004690:	6898      	ldr	r0, [r3, #8]
 8004692:	2101      	movs	r1, #1
 8004694:	f7ff f857 	bl	8003746 <TIM_Cmd>

	// Setup Controller
	float b_[] = {0.0201,    0.0402,    0.0201};
 8004698:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800469c:	ad04      	add	r5, sp, #16
	float a_[] = {1.0000,   -1.561,    0.6414};
 800469e:	ab07      	add	r3, sp, #28
 80046a0:	360c      	adds	r6, #12

	/* TIM enable counter */
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	// Setup Controller
	float b_[] = {0.0201,    0.0402,    0.0201};
 80046a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	float a_[] = {1.0000,   -1.561,    0.6414};
 80046a6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80046aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float y_[] = {0, 0, 0};
 80046ae:	2200      	movs	r2, #0
 80046b0:	920a      	str	r2, [sp, #40]	; 0x28
 80046b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80046b4:	920c      	str	r2, [sp, #48]	; 0x30
	float u_[] = {0, 0, 0};
 80046b6:	920d      	str	r2, [sp, #52]	; 0x34
 80046b8:	920e      	str	r2, [sp, #56]	; 0x38
 80046ba:	920f      	str	r2, [sp, #60]	; 0x3c
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80046bc:	462a      	mov	r2, r5
 80046be:	ca03      	ldmia	r2!, {r0, r1}
 80046c0:	62e0      	str	r0, [r4, #44]	; 0x2c
 80046c2:	6810      	ldr	r0, [r2, #0]
 80046c4:	6321      	str	r1, [r4, #48]	; 0x30
 80046c6:	6360      	str	r0, [r4, #52]	; 0x34
 80046c8:	cb03      	ldmia	r3!, {r0, r1}
 80046ca:	63e0      	str	r0, [r4, #60]	; 0x3c
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	ab0a      	add	r3, sp, #40	; 0x28
 80046d0:	6421      	str	r1, [r4, #64]	; 0x40
 80046d2:	6460      	str	r0, [r4, #68]	; 0x44
 80046d4:	cb03      	ldmia	r3!, {r0, r1}
 80046d6:	61e0      	str	r0, [r4, #28]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	ab0d      	add	r3, sp, #52	; 0x34
 80046dc:	6221      	str	r1, [r4, #32]
 80046de:	6260      	str	r0, [r4, #36]	; 0x24
 80046e0:	cb03      	ldmia	r3!, {r0, r1}
 80046e2:	60e0      	str	r0, [r4, #12]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	6121      	str	r1, [r4, #16]
 80046e8:	6160      	str	r0, [r4, #20]
	std::copy(b_, b_ + 3, b);
	std::copy(a_, a_ + 3, a);
	std::copy(y_, y_ + 3, y);
	std::copy(u_, u_ + 3, u);

	return true;
 80046ea:	2001      	movs	r0, #1
 80046ec:	e000      	b.n	80046f0 <servo::motorInit()+0x136>
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
			break;
		default:
			return false;
 80046ee:	2000      	movs	r0, #0
	std::copy(a_, a_ + 3, a);
	std::copy(y_, y_ + 3, y);
	std::copy(u_, u_ + 3, u);

	return true;
}
 80046f0:	b014      	add	sp, #80	; 0x50
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	080147ac 	.word	0x080147ac

080046f8 <servo::servo(motorSettings*)>:

#include "servo.h"
#include "motorSettings.h"


servo::servo(motorSettings *settings) : motor(settings)
 80046f8:	b510      	push	{r4, lr}
 80046fa:	4604      	mov	r4, r0
 80046fc:	f7ff ff2c 	bl	8004558 <motor::motor(motorSettings*)>
 8004700:	4b01      	ldr	r3, [pc, #4]	; (8004708 <servo::servo(motorSettings*)+0x10>)
{

}
 8004702:	4620      	mov	r0, r4

#include "servo.h"
#include "motorSettings.h"


servo::servo(motorSettings *settings) : motor(settings)
 8004704:	6023      	str	r3, [r4, #0]
{

}
 8004706:	bd10      	pop	{r4, pc}
 8004708:	0801478c 	.word	0x0801478c

0800470c <servo::filterUpdate(float)>:
	}
	__enable_irq();
	return (float)spDeg;//std::make_tuple(y0, 0, sp, 0);
}

float servo::filterUpdate(float sp){
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	4604      	mov	r4, r0
	int i;
	for(i = 2; i > 0; i--){
		u[i] = u[i-1]; 
 8004710:	6903      	ldr	r3, [r0, #16]
 8004712:	f100 0628 	add.w	r6, r0, #40	; 0x28
 8004716:	6143      	str	r3, [r0, #20]
 8004718:	68c3      	ldr	r3, [r0, #12]
	}
	u[0] = sp; 
	
	float Y = 0;
 800471a:	2500      	movs	r5, #0
}

float servo::filterUpdate(float sp){
	int i;
	for(i = 2; i > 0; i--){
		u[i] = u[i-1]; 
 800471c:	6103      	str	r3, [r0, #16]
	}
	u[0] = sp; 
 800471e:	60c1      	str	r1, [r0, #12]
	
	float Y = 0;
	for(i = 0; i<3; i++){
 8004720:	2700      	movs	r7, #0
 8004722:	3604      	adds	r6, #4
		Y += b[i]*u[i];
 8004724:	f856 1c20 	ldr.w	r1, [r6, #-32]
 8004728:	6830      	ldr	r0, [r6, #0]
 800472a:	f001 f889 	bl	8005840 <__aeabi_fmul>
 800472e:	4601      	mov	r1, r0
 8004730:	4628      	mov	r0, r5
 8004732:	f000 ff7d 	bl	8005630 <__addsf3>
		if(i < 2)
 8004736:	2f02      	cmp	r7, #2
	}
	u[0] = sp; 
	
	float Y = 0;
	for(i = 0; i<3; i++){
		Y += b[i]*u[i];
 8004738:	4605      	mov	r5, r0
		if(i < 2)
 800473a:	d009      	beq.n	8004750 <servo::filterUpdate(float)+0x44>
			Y -= a[i+1]*y[i];
 800473c:	f856 1c10 	ldr.w	r1, [r6, #-16]
 8004740:	6970      	ldr	r0, [r6, #20]
 8004742:	f001 f87d 	bl	8005840 <__aeabi_fmul>
 8004746:	4601      	mov	r1, r0
 8004748:	4628      	mov	r0, r5
 800474a:	f000 ff6f 	bl	800562c <__aeabi_fsub>
 800474e:	4605      	mov	r5, r0
		u[i] = u[i-1]; 
	}
	u[0] = sp; 
	
	float Y = 0;
	for(i = 0; i<3; i++){
 8004750:	3701      	adds	r7, #1
 8004752:	2f03      	cmp	r7, #3
 8004754:	d1e5      	bne.n	8004722 <servo::filterUpdate(float)+0x16>
			Y -= a[i+1]*y[i];
	}
	//Y /= a[0];

	for(i = 2; i > 0; i--){
		y[i] = y[i-1]; 
 8004756:	6a23      	ldr	r3, [r4, #32]
	}
	y[0] = Y;
	return Y;
 8004758:	4628      	mov	r0, r5
			Y -= a[i+1]*y[i];
	}
	//Y /= a[0];

	for(i = 2; i > 0; i--){
		y[i] = y[i-1]; 
 800475a:	6263      	str	r3, [r4, #36]	; 0x24
 800475c:	69e3      	ldr	r3, [r4, #28]
	}
	y[0] = Y;
 800475e:	61e5      	str	r5, [r4, #28]
			Y -= a[i+1]*y[i];
	}
	//Y /= a[0];

	for(i = 2; i > 0; i--){
		y[i] = y[i-1]; 
 8004760:	6223      	str	r3, [r4, #32]
	}
	y[0] = Y;
	return Y;
 8004762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004764 <servo::update(float, bool, bool)>:
const char* servo::motorName(){
	return m_settings->m_motorName;
}

//std::tuple<float, int, int, int> servo::update(float dt, bool connected){
float servo::update(float dt, bool connected, bool enable){
 8004764:	b510      	push	{r4, lr}
 8004766:	4604      	mov	r4, r0
	int spDeg = (int)filterUpdate(pos);
 8004768:	6880      	ldr	r0, [r0, #8]
 800476a:	f001 f815 	bl	8005798 <__aeabi_i2f>
 800476e:	4601      	mov	r1, r0
 8004770:	4620      	mov	r0, r4
 8004772:	f7ff ffcb 	bl	800470c <servo::filterUpdate(float)>
 8004776:	f001 fa29 	bl	8005bcc <__aeabi_f2iz>
	int sp = spDeg * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_ServoLimitMin;	
 800477a:	6861      	ldr	r1, [r4, #4]
 800477c:	24b4      	movs	r4, #180	; 0xb4
 800477e:	694a      	ldr	r2, [r1, #20]
 8004780:	690b      	ldr	r3, [r1, #16]
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	4343      	muls	r3, r0
 8004786:	fb93 f3f4 	sdiv	r3, r3, r4
 800478a:	4413      	add	r3, r2

#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 800478c:	b672      	cpsid	i

	__disable_irq();
	switch(m_settings->m_TimerChannel){
 800478e:	68ca      	ldr	r2, [r1, #12]
 8004790:	3a01      	subs	r2, #1
 8004792:	2a03      	cmp	r2, #3
 8004794:	d813      	bhi.n	80047be <servo::update(float, bool, bool)+0x5a>
 8004796:	e8df f002 	tbb	[pc, r2]
 800479a:	0602      	.short	0x0602
 800479c:	0e0a      	.short	0x0e0a
		case 1:
			(m_settings->m_Timer)->CCR1 = sp;
 800479e:	688a      	ldr	r2, [r1, #8]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8693      	strh	r3, [r2, #52]	; 0x34
			break;
 80047a4:	e00b      	b.n	80047be <servo::update(float, bool, bool)+0x5a>
		case 2:
			(m_settings->m_Timer)->CCR2 = sp;
 80047a6:	688a      	ldr	r2, [r1, #8]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8713      	strh	r3, [r2, #56]	; 0x38
			break;
 80047ac:	e007      	b.n	80047be <servo::update(float, bool, bool)+0x5a>
		case 3:
			(m_settings->m_Timer)->CCR3 = sp;
 80047ae:	688a      	ldr	r2, [r1, #8]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	8793      	strh	r3, [r2, #60]	; 0x3c
			break;
 80047b4:	e003      	b.n	80047be <servo::update(float, bool, bool)+0x5a>
		case 4:
			(m_settings->m_Timer)->CCR4 = sp;
 80047b6:	688a      	ldr	r2, [r1, #8]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40


#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
/* GNU gcc specific functions */

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80047be:	b662      	cpsie	i
			break;
	}
	__enable_irq();
	return (float)spDeg;//std::make_tuple(y0, 0, sp, 0);
 80047c0:	f000 ffea 	bl	8005798 <__aeabi_i2f>
}
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	bf00      	nop

080047c8 <DCMotor::setReference(float)>:

	return true;
}

void DCMotor::setReference(float setPoint){
	speed = setPoint;
 80047c8:	6081      	str	r1, [r0, #8]
 80047ca:	4770      	bx	lr

080047cc <DCMotor::getReference()>:
	return true;
}

float DCMotor::getReference(){
	return speed;
}
 80047cc:	6880      	ldr	r0, [r0, #8]
 80047ce:	4770      	bx	lr

080047d0 <DCMotor::motorName()>:

const char* DCMotor::motorName(){
	return m_settings->m_motorName;
 80047d0:	6843      	ldr	r3, [r0, #4]
}
 80047d2:	6858      	ldr	r0, [r3, #4]
 80047d4:	4770      	bx	lr

080047d6 <DCMotor::~DCMotor()>:
DCMotor::DCMotor(motorSettings *settings) : motor(settings)
{

}

DCMotor::~DCMotor()
 80047d6:	b510      	push	{r4, lr}
 80047d8:	4604      	mov	r4, r0
 80047da:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <DCMotor::~DCMotor()+0x12>)
 80047dc:	6003      	str	r3, [r0, #0]
 80047de:	f7ff fec1 	bl	8004564 <motor::~motor()>
{
}
 80047e2:	4620      	mov	r0, r4
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	bf00      	nop
 80047e8:	080147e0 	.word	0x080147e0

080047ec <DCMotor::~DCMotor()>:
DCMotor::DCMotor(motorSettings *settings) : motor(settings)
{

}

DCMotor::~DCMotor()
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4604      	mov	r4, r0
{
}
 80047f0:	f7ff fff1 	bl	80047d6 <DCMotor::~DCMotor()>
 80047f4:	4620      	mov	r0, r4
 80047f6:	f00c fcf1 	bl	80111dc <operator delete(void*)>
 80047fa:	4620      	mov	r0, r4
 80047fc:	bd10      	pop	{r4, pc}

080047fe <DCMotor::motorInit()>:

bool DCMotor::motorInit()
{
 80047fe:	b570      	push	{r4, r5, r6, lr}
 8004800:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 8004802:	6843      	ldr	r3, [r0, #4]
DCMotor::~DCMotor()
{
}

bool DCMotor::motorInit()
{
 8004804:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 8004806:	6a1a      	ldr	r2, [r3, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004808:	2503      	movs	r5, #3
bool DCMotor::motorInit()
{
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800480a:	2610      	movs	r6, #16
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 800480c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800480e:	4669      	mov	r1, sp

bool DCMotor::motorInit()
{
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
 8004810:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8004814:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004818:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 800481c:	f7fd fcaf 	bl	800217e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 8004820:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 8004822:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 8004824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 8004826:	6b58      	ldr	r0, [r3, #52]	; 0x34
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
 8004828:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800482c:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004830:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 8004834:	f7fd fca3 	bl	800217e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 8004838:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800483a:	2614      	movs	r6, #20
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 800483c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 800483e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004840:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
 8004842:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004846:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 800484a:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 800484e:	f7fd fc96 	bl	800217e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 8004852:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 8004854:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 8004856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 8004858:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
 800485a:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800485e:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 8004862:	f88d 6003 	strb.w	r6, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 8004866:	f7fd fc8a 	bl	800217e <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 800486a:	6863      	ldr	r3, [r4, #4]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 800486c:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 800486e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 8004870:	6c58      	ldr	r0, [r3, #68]	; 0x44
	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
 8004872:	f8ad 2000 	strh.w	r2, [sp]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004876:	2218      	movs	r2, #24
 8004878:	f88d 2003 	strb.w	r2, [sp, #3]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800487c:	f88d 5002 	strb.w	r5, [sp, #2]
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 8004880:	f7fd fc7d 	bl	800217e <GPIO_Init>

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 8004884:	6863      	ldr	r3, [r4, #4]
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 8004886:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 8004888:	6898      	ldr	r0, [r3, #8]
 800488a:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <DCMotor::motorInit()+0x17a>)
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 800488c:	a901      	add	r1, sp, #4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
 800488e:	4298      	cmp	r0, r3
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 8004890:	bf0c      	ite	eq
 8004892:	f247 037e 	movweq	r3, #28798	; 0x707e
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
 8004896:	f643 033f 	movwne	r3, #14399	; 0x383f
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 800489a:	f8ad 5004 	strh.w	r5, [sp, #4]

	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	if(m_settings->m_Timer == TIM1)
		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
	else
		TIM_TimeBaseStructure.TIM_Period = PERIOD;
 800489e:	f8ad 3008 	strh.w	r3, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 80048a2:	f8ad 500a 	strh.w	r5, [sp, #10]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80048a6:	f8ad 5006 	strh.w	r5, [sp, #6]

	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 80048aa:	f7fe fdcf 	bl	800344c <TIM_TimeBaseInit>

	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure);
 80048ae:	a804      	add	r0, sp, #16
 80048b0:	f7fe ff2e 	bl	8003710 <TIM_OCStructInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80048b4:	2360      	movs	r3, #96	; 0x60
 80048b6:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80048ba:	2301      	movs	r3, #1
 80048bc:	f8ad 3012 	strh.w	r3, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = 0x00;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 80048c0:	6863      	ldr	r3, [r4, #4]
	TIM_OCInitTypeDef TIM_OCInitStructure;
	TIM_OCStructInit(&TIM_OCInitStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x00;
 80048c2:	f8ad 5016 	strh.w	r5, [sp, #22]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	switch(m_settings->m_TimerChannel){
 80048c6:	68da      	ldr	r2, [r3, #12]
	TIM_OCStructInit(&TIM_OCInitStructure);

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = 0x00;
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 80048c8:	f8ad 5018 	strh.w	r5, [sp, #24]

	switch(m_settings->m_TimerChannel){
 80048cc:	3a01      	subs	r2, #1
 80048ce:	2a03      	cmp	r2, #3
 80048d0:	d84e      	bhi.n	8004970 <DCMotor::motorInit()+0x172>
 80048d2:	e8df f002 	tbb	[pc, r2]
 80048d6:	0c02      	.short	0x0c02
 80048d8:	2016      	.short	0x2016
		case 1:
			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80048da:	a904      	add	r1, sp, #16
 80048dc:	6898      	ldr	r0, [r3, #8]
 80048de:	f7fe fdff 	bl	80034e0 <TIM_OC1Init>
			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	2108      	movs	r1, #8
 80048e6:	6898      	ldr	r0, [r3, #8]
 80048e8:	f7ff f82a 	bl	8003940 <TIM_OC1PreloadConfig>
 80048ec:	e01c      	b.n	8004928 <DCMotor::motorInit()+0x12a>
			break;
		case 2:
			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 80048ee:	a904      	add	r1, sp, #16
 80048f0:	6898      	ldr	r0, [r3, #8]
 80048f2:	f7fe fe39 	bl	8003568 <TIM_OC2Init>
			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 80048f6:	6863      	ldr	r3, [r4, #4]
 80048f8:	2108      	movs	r1, #8
 80048fa:	6898      	ldr	r0, [r3, #8]
 80048fc:	f7ff f828 	bl	8003950 <TIM_OC2PreloadConfig>
 8004900:	e012      	b.n	8004928 <DCMotor::motorInit()+0x12a>
			break;
		case 3:
			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004902:	a904      	add	r1, sp, #16
 8004904:	6898      	ldr	r0, [r3, #8]
 8004906:	f7fe fe73 	bl	80035f0 <TIM_OC3Init>
			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800490a:	6863      	ldr	r3, [r4, #4]
 800490c:	2108      	movs	r1, #8
 800490e:	6898      	ldr	r0, [r3, #8]
 8004910:	f7ff f828 	bl	8003964 <TIM_OC3PreloadConfig>
 8004914:	e008      	b.n	8004928 <DCMotor::motorInit()+0x12a>
			break;
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 8004916:	6898      	ldr	r0, [r3, #8]
 8004918:	a904      	add	r1, sp, #16
 800491a:	f7fe feab 	bl	8003674 <TIM_OC4Init>
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 800491e:	6863      	ldr	r3, [r4, #4]
 8004920:	2108      	movs	r1, #8
 8004922:	6898      	ldr	r0, [r3, #8]
 8004924:	f7ff f826 	bl	8003974 <TIM_OC4PreloadConfig>
			break;
		default:
			return false;
	}

	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	2101      	movs	r1, #1
 800492c:	6898      	ldr	r0, [r3, #8]
 800492e:	f7fe ffd7 	bl	80038e0 <TIM_ARRPreloadConfig>

	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 8004932:	6863      	ldr	r3, [r4, #4]
 8004934:	2101      	movs	r1, #1
 8004936:	6898      	ldr	r0, [r3, #8]
 8004938:	f7fe ff11 	bl	800375e <TIM_CtrlPWMOutputs>

	TIM_Cmd(m_settings->m_Timer, ENABLE);
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	2101      	movs	r1, #1
 8004940:	6898      	ldr	r0, [r3, #8]
 8004942:	f7fe ff00 	bl	8003746 <TIM_Cmd>

	// Initialize encoder
	initEncoder(m_settings->encoderAddr);
 8004946:	6863      	ldr	r3, [r4, #4]
	KP = m_settings->KP;
	KI = m_settings->KI;
	KD = m_settings->KD;
	integralSaturation = m_settings->integralSaturation;

	return true;
 8004948:	2001      	movs	r0, #1
const char* DCMotor::motorName(){
	return m_settings->m_motorName;
}

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
 800494a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800494e:	7322      	strb	r2, [r4, #12]
	TIM_Cmd(m_settings->m_Timer, ENABLE);

	// Initialize encoder
	initEncoder(m_settings->encoderAddr);

	integral = 0;
 8004950:	2200      	movs	r2, #0
 8004952:	62e2      	str	r2, [r4, #44]	; 0x2c
	error = 0;
 8004954:	62a2      	str	r2, [r4, #40]	; 0x28

	wheelRadius = m_settings->wheelRadius;
 8004956:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004958:	6122      	str	r2, [r4, #16]
	FF = m_settings->FF;
 800495a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800495c:	6162      	str	r2, [r4, #20]
	KP = m_settings->KP;
 800495e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004960:	61a2      	str	r2, [r4, #24]
	KI = m_settings->KI;
 8004962:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004964:	61e2      	str	r2, [r4, #28]
	KD = m_settings->KD;
 8004966:	6dda      	ldr	r2, [r3, #92]	; 0x5c
	integralSaturation = m_settings->integralSaturation;
 8004968:	6e1b      	ldr	r3, [r3, #96]	; 0x60

	wheelRadius = m_settings->wheelRadius;
	FF = m_settings->FF;
	KP = m_settings->KP;
	KI = m_settings->KI;
	KD = m_settings->KD;
 800496a:	6222      	str	r2, [r4, #32]
	integralSaturation = m_settings->integralSaturation;
 800496c:	6263      	str	r3, [r4, #36]	; 0x24

	return true;
 800496e:	e000      	b.n	8004972 <DCMotor::motorInit()+0x174>
		case 4:
			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
			break;
		default:
			return false;
 8004970:	2000      	movs	r0, #0
	KI = m_settings->KI;
	KD = m_settings->KD;
	integralSaturation = m_settings->integralSaturation;

	return true;
}
 8004972:	b008      	add	sp, #32
 8004974:	bd70      	pop	{r4, r5, r6, pc}
 8004976:	bf00      	nop
 8004978:	40012c00 	.word	0x40012c00

0800497c <DCMotor::DCMotor(motorSettings*)>:
#define CLOCKDIV 0

#define ABS(x) (((x)>0)? (x) : -(x))


DCMotor::DCMotor(motorSettings *settings) : motor(settings)
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	f7ff fdea 	bl	8004558 <motor::motor(motorSettings*)>
 8004984:	4b01      	ldr	r3, [pc, #4]	; (800498c <DCMotor::DCMotor(motorSettings*)+0x10>)
{

}
 8004986:	4620      	mov	r0, r4
#define CLOCKDIV 0

#define ABS(x) (((x)>0)? (x) : -(x))


DCMotor::DCMotor(motorSettings *settings) : motor(settings)
 8004988:	6023      	str	r3, [r4, #0]
{

}
 800498a:	bd10      	pop	{r4, pc}
 800498c:	080147e0 	.word	0x080147e0

08004990 <DCMotor::setSpeed(int, bool)>:
	speed = setPoint;
}

bool DCMotor::setSpeed(int s, bool enable){

	if(s < -PERIOD)
 8004990:	4b34      	ldr	r3, [pc, #208]	; (8004a64 <DCMotor::setSpeed(int, bool)+0xd4>)

void DCMotor::setReference(float setPoint){
	speed = setPoint;
}

bool DCMotor::setSpeed(int s, bool enable){
 8004992:	b570      	push	{r4, r5, r6, lr}

	if(s < -PERIOD)
 8004994:	4299      	cmp	r1, r3

void DCMotor::setReference(float setPoint){
	speed = setPoint;
}

bool DCMotor::setSpeed(int s, bool enable){
 8004996:	4605      	mov	r5, r0
 8004998:	460c      	mov	r4, r1
 800499a:	4616      	mov	r6, r2

	if(s < -PERIOD)
 800499c:	db05      	blt.n	80049aa <DCMotor::setSpeed(int, bool)+0x1a>
		s = -PERIOD;

	if(s > PERIOD)
		s = PERIOD;
 800499e:	f643 033f 	movw	r3, #14399	; 0x383f
 80049a2:	4299      	cmp	r1, r3
 80049a4:	bfa8      	it	ge
 80049a6:	461c      	movge	r4, r3
 80049a8:	e000      	b.n	80049ac <DCMotor::setSpeed(int, bool)+0x1c>
}

bool DCMotor::setSpeed(int s, bool enable){

	if(s < -PERIOD)
		s = -PERIOD;
 80049aa:	461c      	mov	r4, r3
 80049ac:	686b      	ldr	r3, [r5, #4]

	if(s > PERIOD)
		s = PERIOD;

	if(!enable){
 80049ae:	b956      	cbnz	r6, 80049c6 <DCMotor::setSpeed(int, bool)+0x36>
		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 80049b0:	8c19      	ldrh	r1, [r3, #32]
 80049b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049b4:	f7fd fc51 	bl	800225a <GPIO_ResetBits>
		GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 80049b8:	686b      	ldr	r3, [r5, #4]
		s = 0;
 80049ba:	4634      	mov	r4, r6
	if(s > PERIOD)
		s = PERIOD;

	if(!enable){
		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
		GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 80049bc:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80049be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049c0:	f7fd fc49 	bl	8002256 <GPIO_SetBits>
 80049c4:	e020      	b.n	8004a08 <DCMotor::setSpeed(int, bool)+0x78>
		s = 0;
	}else{
		//if(ABS(s) > 3000){
			GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 80049c6:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80049c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80049ca:	f7fd fc44 	bl	8002256 <GPIO_SetBits>
			GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 80049ce:	686b      	ldr	r3, [r5, #4]
 80049d0:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80049d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80049d4:	f7fd fc3f 	bl	8002256 <GPIO_SetBits>

			if(s > 0){
 80049d8:	2c00      	cmp	r4, #0
 80049da:	dd0a      	ble.n	80049f2 <DCMotor::setSpeed(int, bool)+0x62>
				GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 80049dc:	686b      	ldr	r3, [r5, #4]
 80049de:	8c19      	ldrh	r1, [r3, #32]
 80049e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049e2:	f7fd fc38 	bl	8002256 <GPIO_SetBits>
				GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 80049e6:	686b      	ldr	r3, [r5, #4]
 80049e8:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80049ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80049ec:	f7fd fc35 	bl	800225a <GPIO_ResetBits>
 80049f0:	e00a      	b.n	8004a08 <DCMotor::setSpeed(int, bool)+0x78>
			}else if(s < 0){
 80049f2:	d032      	beq.n	8004a5a <DCMotor::setSpeed(int, bool)+0xca>
				GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 80049f4:	686b      	ldr	r3, [r5, #4]
 80049f6:	8c19      	ldrh	r1, [r3, #32]
 80049f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049fa:	f7fd fc2e 	bl	800225a <GPIO_ResetBits>
				GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 80049fe:	686b      	ldr	r3, [r5, #4]
 8004a00:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8004a02:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a04:	f7fd fc27 	bl	8002256 <GPIO_SetBits>
			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
		}*/
	}
	

	if(m_settings->m_Timer == TIM1)
 8004a08:	686a      	ldr	r2, [r5, #4]
 8004a0a:	4917      	ldr	r1, [pc, #92]	; (8004a68 <DCMotor::setSpeed(int, bool)+0xd8>)
 8004a0c:	6893      	ldr	r3, [r2, #8]
		s = s * 2;

	switch(m_settings->m_TimerChannel){
 8004a0e:	68d2      	ldr	r2, [r2, #12]
			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
		}*/
	}
	

	if(m_settings->m_Timer == TIM1)
 8004a10:	428b      	cmp	r3, r1
		s = s * 2;

	switch(m_settings->m_TimerChannel){
 8004a12:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
		}*/
	}
	

	if(m_settings->m_Timer == TIM1)
		s = s * 2;
 8004a16:	bf08      	it	eq
 8004a18:	0064      	lsleq	r4, r4, #1

	switch(m_settings->m_TimerChannel){
 8004a1a:	2a03      	cmp	r2, #3
 8004a1c:	d81f      	bhi.n	8004a5e <DCMotor::setSpeed(int, bool)+0xce>
 8004a1e:	e8df f002 	tbb	[pc, r2]
 8004a22:	0802      	.short	0x0802
 8004a24:	140e      	.short	0x140e
		case 1:
			(m_settings->m_Timer)->CCR1 = (uint16_t)ABS(s);
 8004a26:	2c00      	cmp	r4, #0
 8004a28:	bfb8      	it	lt
 8004a2a:	4264      	neglt	r4, r4
 8004a2c:	b2a4      	uxth	r4, r4
 8004a2e:	869c      	strh	r4, [r3, #52]	; 0x34
 8004a30:	e011      	b.n	8004a56 <DCMotor::setSpeed(int, bool)+0xc6>
			break;
		case 2:
			(m_settings->m_Timer)->CCR2 = (uint16_t)ABS(s);
 8004a32:	2c00      	cmp	r4, #0
 8004a34:	bfb8      	it	lt
 8004a36:	4264      	neglt	r4, r4
 8004a38:	b2a4      	uxth	r4, r4
 8004a3a:	871c      	strh	r4, [r3, #56]	; 0x38
 8004a3c:	e00b      	b.n	8004a56 <DCMotor::setSpeed(int, bool)+0xc6>
			break;
		case 3:
			(m_settings->m_Timer)->CCR3 = (uint16_t)ABS(s);
 8004a3e:	2c00      	cmp	r4, #0
 8004a40:	bfb8      	it	lt
 8004a42:	4264      	neglt	r4, r4
 8004a44:	b2a4      	uxth	r4, r4
 8004a46:	879c      	strh	r4, [r3, #60]	; 0x3c
 8004a48:	e005      	b.n	8004a56 <DCMotor::setSpeed(int, bool)+0xc6>
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint16_t)ABS(s);
 8004a4a:	2c00      	cmp	r4, #0
 8004a4c:	bfb8      	it	lt
 8004a4e:	4264      	neglt	r4, r4
 8004a50:	b2a4      	uxth	r4, r4
 8004a52:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
			break;
		default:
			return false;
	}

	return true;
 8004a56:	2001      	movs	r0, #1
		case 3:
			(m_settings->m_Timer)->CCR3 = (uint16_t)ABS(s);
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint16_t)ABS(s);
			break;
 8004a58:	bd70      	pop	{r4, r5, r6, pc}
				GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
			}else if(s < 0){
				GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
				GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
			}else{
				return false;
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
			break;
		case 4:
			(m_settings->m_Timer)->CCR4 = (uint16_t)ABS(s);
			break;
		default:
			return false;
 8004a5e:	2000      	movs	r0, #0
	}

	return true;
}
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
 8004a62:	bf00      	nop
 8004a64:	ffffc7c1 	.word	0xffffc7c1
 8004a68:	40012c00 	.word	0x40012c00

08004a6c <DCMotor::initEncoder(unsigned short)>:
const char* DCMotor::motorName(){
	return m_settings->m_motorName;
}

void DCMotor::initEncoder(uint16_t addr){
	encAddr = addr;
 8004a6c:	7301      	strb	r1, [r0, #12]
 8004a6e:	4770      	bx	lr

08004a70 <DCMotor::readEncoder()>:
}

int32_t DCMotor::readEncoder(){
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	4604      	mov	r4, r0
    uint8_t Rx_Idx = 0;
    uint8_t RxBuffer[4] = {0};


    // START
    while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 8004a74:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8004a78:	482f      	ldr	r0, [pc, #188]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004a7a:	f7fd fdfc 	bl	8002676 <I2C_GetFlagStatus>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d1f8      	bne.n	8004a74 <DCMotor::readEncoder()+0x4>
    I2C_GenerateSTART(I2C1, ENABLE);
 8004a82:	2101      	movs	r1, #1
 8004a84:	482c      	ldr	r0, [pc, #176]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004a86:	f7fd fd0d 	bl	80024a4 <I2C_GenerateSTART>
	// wait for I2C1 EV5 --> Slave has acknowledged start condition
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8004a8a:	492c      	ldr	r1, [pc, #176]	; (8004b3c <DCMotor::readEncoder()+0xcc>)
 8004a8c:	482a      	ldr	r0, [pc, #168]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004a8e:	f7fd fddd 	bl	800264c <I2C_CheckEvent>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d0f9      	beq.n	8004a8a <DCMotor::readEncoder()+0x1a>
    I2C_Send7bitAddress(I2C1, encAddr<<1, I2C_Direction_Receiver);
 8004a96:	7b21      	ldrb	r1, [r4, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	0049      	lsls	r1, r1, #1
 8004a9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8004aa0:	4825      	ldr	r0, [pc, #148]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004aa2:	f7fd fd52 	bl	800254a <I2C_Send7bitAddress>
	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8004aa6:	4926      	ldr	r1, [pc, #152]	; (8004b40 <DCMotor::readEncoder()+0xd0>)
 8004aa8:	4823      	ldr	r0, [pc, #140]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004aaa:	f7fd fdcf 	bl	800264c <I2C_CheckEvent>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d0f9      	beq.n	8004aa6 <DCMotor::readEncoder()+0x36>



    // ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4820      	ldr	r0, [pc, #128]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004ab6:	f7fd fd0d 	bl	80024d4 <I2C_AcknowledgeConfig>
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 8004aba:	4922      	ldr	r1, [pc, #136]	; (8004b44 <DCMotor::readEncoder()+0xd4>)
 8004abc:	481e      	ldr	r0, [pc, #120]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004abe:	f7fd fdc5 	bl	800264c <I2C_CheckEvent>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0f9      	beq.n	8004aba <DCMotor::readEncoder()+0x4a>
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 8004ac6:	481c      	ldr	r0, [pc, #112]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004ac8:	f7fd fd3c 	bl	8002544 <I2C_ReceiveData>

	// ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8004acc:	2101      	movs	r1, #1


    // ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 8004ace:	4606      	mov	r6, r0

	// ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8004ad0:	4819      	ldr	r0, [pc, #100]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004ad2:	f7fd fcff 	bl	80024d4 <I2C_AcknowledgeConfig>
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 8004ad6:	491b      	ldr	r1, [pc, #108]	; (8004b44 <DCMotor::readEncoder()+0xd4>)
 8004ad8:	4817      	ldr	r0, [pc, #92]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004ada:	f7fd fdb7 	bl	800264c <I2C_CheckEvent>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d0f9      	beq.n	8004ad6 <DCMotor::readEncoder()+0x66>
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 8004ae2:	4815      	ldr	r0, [pc, #84]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004ae4:	f7fd fd2e 	bl	8002544 <I2C_ReceiveData>


    // ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8004ae8:	2101      	movs	r1, #1
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);

	// ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 8004aea:	4604      	mov	r4, r0


    // ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 8004aec:	4812      	ldr	r0, [pc, #72]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004aee:	f7fd fcf1 	bl	80024d4 <I2C_AcknowledgeConfig>
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 8004af2:	4914      	ldr	r1, [pc, #80]	; (8004b44 <DCMotor::readEncoder()+0xd4>)
 8004af4:	4810      	ldr	r0, [pc, #64]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004af6:	f7fd fda9 	bl	800264c <I2C_CheckEvent>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d0f9      	beq.n	8004af2 <DCMotor::readEncoder()+0x82>
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 8004afe:	480e      	ldr	r0, [pc, #56]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004b00:	f7fd fd20 	bl	8002544 <I2C_ReceiveData>


    // NACK
    I2C_AcknowledgeConfig(I2C1, DISABLE);
 8004b04:	2100      	movs	r1, #0


    // ACK
	I2C_AcknowledgeConfig(I2C1, ENABLE);
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 8004b06:	4605      	mov	r5, r0


    // NACK
    I2C_AcknowledgeConfig(I2C1, DISABLE);
 8004b08:	480b      	ldr	r0, [pc, #44]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004b0a:	f7fd fce3 	bl	80024d4 <I2C_AcknowledgeConfig>
	I2C_GenerateSTOP(I2C1, ENABLE);
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4809      	ldr	r0, [pc, #36]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004b12:	f7fd fcd3 	bl	80024bc <I2C_GenerateSTOP>
	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 8004b16:	490b      	ldr	r1, [pc, #44]	; (8004b44 <DCMotor::readEncoder()+0xd4>)
 8004b18:	4807      	ldr	r0, [pc, #28]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004b1a:	f7fd fd97 	bl	800264c <I2C_CheckEvent>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0f9      	beq.n	8004b16 <DCMotor::readEncoder()+0xa6>
	RxBuffer[Rx_Idx] = I2C_ReceiveData(I2C1);
 8004b22:	4805      	ldr	r0, [pc, #20]	; (8004b38 <DCMotor::readEncoder()+0xc8>)
 8004b24:	f7fd fd0e 	bl	8002544 <I2C_ReceiveData>

   
	return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
 8004b28:	0423      	lsls	r3, r4, #16
 8004b2a:	ea43 6406 	orr.w	r4, r3, r6, lsl #24
 8004b2e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
}
 8004b32:	4320      	orrs	r0, r4
 8004b34:	bd70      	pop	{r4, r5, r6, pc}
 8004b36:	bf00      	nop
 8004b38:	40005400 	.word	0x40005400
 8004b3c:	00030001 	.word	0x00030001
 8004b40:	00030002 	.word	0x00030002
 8004b44:	00030040 	.word	0x00030040

08004b48 <DCMotor::updateRegulator(float, float, float)>:

float DCMotor::updateRegulator(float enc, float sp, float dt){
 8004b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	461f      	mov	r7, r3
	float error_new = sp-enc;		// m/s
 8004b50:	4610      	mov	r0, r2

   
	return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
}

float DCMotor::updateRegulator(float enc, float sp, float dt){
 8004b52:	4690      	mov	r8, r2
	float error_new = sp-enc;		// m/s
 8004b54:	f000 fd6a 	bl	800562c <__aeabi_fsub>
	
	integral += error_new*dt;
 8004b58:	4639      	mov	r1, r7
   
	return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
}

float DCMotor::updateRegulator(float enc, float sp, float dt){
	float error_new = sp-enc;		// m/s
 8004b5a:	4606      	mov	r6, r0
	
	integral += error_new*dt;
 8004b5c:	f000 fe70 	bl	8005840 <__aeabi_fmul>
 8004b60:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b62:	f000 fd65 	bl	8005630 <__addsf3>
	
	if (integral > integralSaturation){
 8004b66:	6a65      	ldr	r5, [r4, #36]	; 0x24
}

float DCMotor::updateRegulator(float enc, float sp, float dt){
	float error_new = sp-enc;		// m/s
	
	integral += error_new*dt;
 8004b68:	62e0      	str	r0, [r4, #44]	; 0x2c
	
	if (integral > integralSaturation){
 8004b6a:	4629      	mov	r1, r5
}

float DCMotor::updateRegulator(float enc, float sp, float dt){
	float error_new = sp-enc;		// m/s
	
	integral += error_new*dt;
 8004b6c:	4681      	mov	r9, r0
	
	if (integral > integralSaturation){
 8004b6e:	f001 f823 	bl	8005bb8 <__aeabi_fcmpgt>
 8004b72:	b930      	cbnz	r0, 8004b82 <DCMotor::updateRegulator(float, float, float)+0x3a>
		integral = integralSaturation;
	}else if (integral < -(integralSaturation)){
 8004b74:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004b78:	4629      	mov	r1, r5
 8004b7a:	4648      	mov	r0, r9
 8004b7c:	f000 fffe 	bl	8005b7c <__aeabi_fcmplt>
 8004b80:	b100      	cbz	r0, 8004b84 <DCMotor::updateRegulator(float, float, float)+0x3c>
		integral = -(integralSaturation);
 8004b82:	62e5      	str	r5, [r4, #44]	; 0x2c
	}
	
	float derivative = (error_new-error)/dt;
	float output = (FF*sp + KP*error_new + KI*integral + KD*derivative);
 8004b84:	6961      	ldr	r1, [r4, #20]
 8004b86:	4640      	mov	r0, r8
 8004b88:	f000 fe5a 	bl	8005840 <__aeabi_fmul>
 8004b8c:	69a1      	ldr	r1, [r4, #24]
 8004b8e:	4605      	mov	r5, r0
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 fe55 	bl	8005840 <__aeabi_fmul>
 8004b96:	4601      	mov	r1, r0
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 fd49 	bl	8005630 <__addsf3>
 8004b9e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	69e0      	ldr	r0, [r4, #28]
 8004ba4:	f000 fe4c 	bl	8005840 <__aeabi_fmul>
 8004ba8:	4601      	mov	r1, r0
 8004baa:	4628      	mov	r0, r5
 8004bac:	f000 fd40 	bl	8005630 <__addsf3>
 8004bb0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	f000 fd39 	bl	800562c <__aeabi_fsub>
 8004bba:	4639      	mov	r1, r7
 8004bbc:	f000 fef4 	bl	80059a8 <__aeabi_fdiv>
 8004bc0:	6a21      	ldr	r1, [r4, #32]
 8004bc2:	f000 fe3d 	bl	8005840 <__aeabi_fmul>
 8004bc6:	4601      	mov	r1, r0
 8004bc8:	4628      	mov	r0, r5
 8004bca:	f000 fd31 	bl	8005630 <__addsf3>
	error = error_new;
 8004bce:	62a6      	str	r6, [r4, #40]	; 0x28
	return output;
}
 8004bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004bd4 <DCMotor::update(float, bool, bool)>:

//std::tuple<float, int, int, int> DCMotor::update(float dt, bool connected){
float DCMotor::update(float dt, bool connected, bool enable){
 8004bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd8:	4605      	mov	r5, r0
 8004bda:	4688      	mov	r8, r1
 8004bdc:	461f      	mov	r7, r3
	
	int s = 0;
	float speed_si = -1;
	int32_t encoder_speed = 0;
	float sp = 0.0;
	if(connected){
 8004bde:	b10a      	cbz	r2, 8004be4 <DCMotor::update(float, bool, bool)+0x10>
		sp = speed;
 8004be0:	6886      	ldr	r6, [r0, #8]
 8004be2:	e000      	b.n	8004be6 <DCMotor::update(float, bool, bool)+0x12>
	// Read encoder
	
	int s = 0;
	float speed_si = -1;
	int32_t encoder_speed = 0;
	float sp = 0.0;
 8004be4:	2600      	movs	r6, #0
	if(connected){
		sp = speed;
	}
	//std::tie(encoder_speed, retryCount, busyCount) = readEncoder();
	encoder_speed = readEncoder();
 8004be6:	4628      	mov	r0, r5
 8004be8:	f7ff ff42 	bl	8004a70 <DCMotor::readEncoder()>
	// (2 * pi * F)/(2^14 * N)	[N = 8][F = 2Khz]
	float encSpeed = encoder_speed*0.479368996f;		// rad/s
	speed_si = encSpeed * wheelRadius;	// m/s
 8004bec:	f000 fdd4 	bl	8005798 <__aeabi_i2f>
 8004bf0:	490e      	ldr	r1, [pc, #56]	; (8004c2c <DCMotor::update(float, bool, bool)+0x58>)
 8004bf2:	f000 fe25 	bl	8005840 <__aeabi_fmul>
 8004bf6:	6929      	ldr	r1, [r5, #16]
 8004bf8:	f000 fe22 	bl	8005840 <__aeabi_fmul>
 8004bfc:	4604      	mov	r4, r0
	/*if(strstr(m_settings->m_motorName, "left") > 0)
		speed_si = speed_si * -1;*/

	if(encAddr == 0x10 || encAddr == (0x10 | 0x04)){
 8004bfe:	7b2b      	ldrb	r3, [r5, #12]
		speed_si *= -1;
	}

	// Update PID regulator
	s = (int) updateRegulator(speed_si, sp, dt);		// m/s*/
 8004c00:	4632      	mov	r2, r6
	float encSpeed = encoder_speed*0.479368996f;		// rad/s
	speed_si = encSpeed * wheelRadius;	// m/s
	/*if(strstr(m_settings->m_motorName, "left") > 0)
		speed_si = speed_si * -1;*/

	if(encAddr == 0x10 || encAddr == (0x10 | 0x04)){
 8004c02:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8004c06:	2b10      	cmp	r3, #16
		speed_si *= -1;
 8004c08:	bf08      	it	eq
 8004c0a:	f100 4400 	addeq.w	r4, r0, #2147483648	; 0x80000000
	}

	// Update PID regulator
	s = (int) updateRegulator(speed_si, sp, dt);		// m/s*/
 8004c0e:	4643      	mov	r3, r8
 8004c10:	4621      	mov	r1, r4
 8004c12:	4628      	mov	r0, r5
 8004c14:	f7ff ff98 	bl	8004b48 <DCMotor::updateRegulator(float, float, float)>
	// Set motor speed to process value
	
	setSpeed(s, enable);		// m/s
 8004c18:	f000 ffd8 	bl	8005bcc <__aeabi_f2iz>
 8004c1c:	463a      	mov	r2, r7
 8004c1e:	4601      	mov	r1, r0
 8004c20:	4628      	mov	r0, r5
 8004c22:	f7ff feb5 	bl	8004990 <DCMotor::setSpeed(int, bool)>
	
	// Return encoder values for publishing to localization
	return speed_si;
}
 8004c26:	4620      	mov	r0, r4
 8004c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c2c:	3ef56fda 	.word	0x3ef56fda

08004c30 <motorSettings::motorSettings()>:

motorSettings::motorSettings()
{
    //  preset general defaults

    m_motorType = 0;
 8004c30:	2200      	movs	r2, #0
 8004c32:	6002      	str	r2, [r0, #0]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 8004c34:	4770      	bx	lr

08004c36 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>:

motorSettings::motorSettings(int type, const char* name, TIM_TypeDef* timer, int timerChannel)
 8004c36:	b510      	push	{r4, lr}
{
    //  preset general defaults

    m_motorType = type;
    m_motorName = name;
    m_Timer = timer;
 8004c38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    m_TimerChannel = timerChannel;
 8004c3c:	9b02      	ldr	r3, [sp, #8]
 8004c3e:	60c3      	str	r3, [r0, #12]
    /*m_MPU9150GyroAccelSampleRate = 50;
    m_MPU9150CompassSampleRate = 25;
    m_MPU9150GyroAccelLpf = MPU9150_LPF_20;
    m_MPU9150GyroFsr = MPU9150_GYROFSR_1000;
    m_MPU9150AccelFsr = MPU9150_ACCELFSR_8;*/
}
 8004c40:	bd10      	pop	{r4, pc}

08004c42 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>:
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
 8004c42:	6283      	str	r3, [r0, #40]	; 0x28
    m_DCEnAPort = m_DCEnAPort_;
 8004c44:	9b00      	ldr	r3, [sp, #0]

void motorSettings::setDCPins(int m_DCInAPin_, GPIO_TypeDef* m_DCInAPort_, int m_DCEnAPin_, GPIO_TypeDef* m_DCEnAPort_,
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
 8004c46:	6201      	str	r1, [r0, #32]
    m_DCInAPort = m_DCInAPort_;
    m_DCEnAPin = m_DCEnAPin_;
    m_DCEnAPort = m_DCEnAPort_;
 8004c48:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_DCInBPin = m_DCInBPin_;
 8004c4a:	9b01      	ldr	r3, [sp, #4]
void motorSettings::setDCPins(int m_DCInAPin_, GPIO_TypeDef* m_DCInAPort_, int m_DCEnAPin_, GPIO_TypeDef* m_DCEnAPort_,
                                 int m_DCInBPin_, GPIO_TypeDef* m_DCInBPort_, int m_DCEnBPin_, 
                                 GPIO_TypeDef* m_DCEnBPort_, int m_DCPWMPin_, GPIO_TypeDef* m_DCPWMPort_){

    m_DCInAPin = m_DCInAPin_;
    m_DCInAPort = m_DCInAPort_;
 8004c4c:	6242      	str	r2, [r0, #36]	; 0x24
    m_DCEnAPin = m_DCEnAPin_;
    m_DCEnAPort = m_DCEnAPort_;
    m_DCInBPin = m_DCInBPin_;
 8004c4e:	6303      	str	r3, [r0, #48]	; 0x30
    m_DCInBPort = m_DCInBPort_;
 8004c50:	9b02      	ldr	r3, [sp, #8]
 8004c52:	6343      	str	r3, [r0, #52]	; 0x34
    m_DCEnBPin = m_DCEnBPin_;
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	6383      	str	r3, [r0, #56]	; 0x38
    m_DCEnBPort = m_DCEnBPort_;
 8004c58:	9b04      	ldr	r3, [sp, #16]
 8004c5a:	63c3      	str	r3, [r0, #60]	; 0x3c
    m_DCPWMPin = m_DCPWMPin_;
 8004c5c:	9b05      	ldr	r3, [sp, #20]
 8004c5e:	6403      	str	r3, [r0, #64]	; 0x40
    m_DCPWMPort = m_DCPWMPort_;
 8004c60:	9b06      	ldr	r3, [sp, #24]
 8004c62:	6443      	str	r3, [r0, #68]	; 0x44
 8004c64:	4770      	bx	lr

08004c66 <motorSettings::setRegulator(float, float, float, float, float)>:
}

void motorSettings::setRegulator(float FF_, float KP_, float KI_, float KD_, float integralSaturation_){
    FF = FF_;
    KP = KP_;
    KI = KI_;
 8004c66:	6583      	str	r3, [r0, #88]	; 0x58
    KD = KD_;
 8004c68:	9b00      	ldr	r3, [sp, #0]
    m_DCPWMPin = m_DCPWMPin_;
    m_DCPWMPort = m_DCPWMPort_;
}

void motorSettings::setRegulator(float FF_, float KP_, float KI_, float KD_, float integralSaturation_){
    FF = FF_;
 8004c6a:	6501      	str	r1, [r0, #80]	; 0x50
    KP = KP_;
    KI = KI_;
    KD = KD_;
 8004c6c:	65c3      	str	r3, [r0, #92]	; 0x5c
    integralSaturation = integralSaturation_;
 8004c6e:	9b01      	ldr	r3, [sp, #4]
    m_DCPWMPort = m_DCPWMPort_;
}

void motorSettings::setRegulator(float FF_, float KP_, float KI_, float KD_, float integralSaturation_){
    FF = FF_;
    KP = KP_;
 8004c70:	6542      	str	r2, [r0, #84]	; 0x54
    KI = KI_;
    KD = KD_;
    integralSaturation = integralSaturation_;
 8004c72:	6603      	str	r3, [r0, #96]	; 0x60
 8004c74:	4770      	bx	lr
	...

08004c78 <ros::normalizeSecNSecSigned(long&, long&)>:
#include "ros/duration.h"

namespace ros
{
  void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
  {
 8004c78:	b510      	push	{r4, lr}
    int32_t nsec_part = nsec;
 8004c7a:	680b      	ldr	r3, [r1, #0]
    int32_t sec_part = sec;
 8004c7c:	6802      	ldr	r2, [r0, #0]

    while (nsec_part > 1000000000L)
 8004c7e:	4c0c      	ldr	r4, [pc, #48]	; (8004cb0 <ros::normalizeSecNSecSigned(long&, long&)+0x38>)
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	dd07      	ble.n	8004c94 <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
    {
      nsec_part -= 1000000000L;
 8004c84:	f103 4344 	add.w	r3, r3, #3288334336	; 0xc4000000
 8004c88:	f503 03ca 	add.w	r3, r3, #6619136	; 0x650000
 8004c8c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
      ++sec_part;
 8004c90:	3201      	adds	r2, #1
  void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
  {
    int32_t nsec_part = nsec;
    int32_t sec_part = sec;

    while (nsec_part > 1000000000L)
 8004c92:	e7f5      	b.n	8004c80 <ros::normalizeSecNSecSigned(long&, long&)+0x8>
    {
      nsec_part -= 1000000000L;
      ++sec_part;
    }
    while (nsec_part < 0)
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da07      	bge.n	8004ca8 <ros::normalizeSecNSecSigned(long&, long&)+0x30>
    {
      nsec_part += 1000000000L;
 8004c98:	f103 536e 	add.w	r3, r3, #998244352	; 0x3b800000
 8004c9c:	f503 13d6 	add.w	r3, r3, #1753088	; 0x1ac000
 8004ca0:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
      --sec_part;
 8004ca4:	3a01      	subs	r2, #1
    while (nsec_part > 1000000000L)
    {
      nsec_part -= 1000000000L;
      ++sec_part;
    }
    while (nsec_part < 0)
 8004ca6:	e7f5      	b.n	8004c94 <ros::normalizeSecNSecSigned(long&, long&)+0x1c>
    {
      nsec_part += 1000000000L;
      --sec_part;
    }
    sec = sec_part;
 8004ca8:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004caa:	600b      	str	r3, [r1, #0]
 8004cac:	bd10      	pop	{r4, pc}
 8004cae:	bf00      	nop
 8004cb0:	3b9aca00 	.word	0x3b9aca00

08004cb4 <ros::Duration::operator+=(ros::Duration const&)>:
  }

  Duration& Duration::operator+=(const Duration &rhs)
  {
    sec += rhs.sec;
 8004cb4:	6802      	ldr	r2, [r0, #0]
 8004cb6:	680b      	ldr	r3, [r1, #0]
    sec = sec_part;
    nsec = nsec_part;
  }

  Duration& Duration::operator+=(const Duration &rhs)
  {
 8004cb8:	b510      	push	{r4, lr}
    sec += rhs.sec;
 8004cba:	4413      	add	r3, r2
 8004cbc:	6003      	str	r3, [r0, #0]
    nsec += rhs.nsec;
 8004cbe:	684b      	ldr	r3, [r1, #4]
 8004cc0:	4601      	mov	r1, r0
 8004cc2:	6842      	ldr	r2, [r0, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004cca:	f7ff ffd5 	bl	8004c78 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004cce:	bd10      	pop	{r4, pc}

08004cd0 <ros::Duration::operator-=(ros::Duration const&)>:

  Duration& Duration::operator-=(const Duration &rhs){
    sec += -rhs.sec;
 8004cd0:	6803      	ldr	r3, [r0, #0]
 8004cd2:	680a      	ldr	r2, [r1, #0]
    nsec += rhs.nsec;
    normalizeSecNSecSigned(sec, nsec);
    return *this;
  }

  Duration& Duration::operator-=(const Duration &rhs){
 8004cd4:	b510      	push	{r4, lr}
    sec += -rhs.sec;
 8004cd6:	1a9b      	subs	r3, r3, r2
    nsec += -rhs.nsec;
 8004cd8:	684a      	ldr	r2, [r1, #4]
 8004cda:	4601      	mov	r1, r0
    normalizeSecNSecSigned(sec, nsec);
    return *this;
  }

  Duration& Duration::operator-=(const Duration &rhs){
    sec += -rhs.sec;
 8004cdc:	6003      	str	r3, [r0, #0]
    nsec += -rhs.nsec;
 8004cde:	6843      	ldr	r3, [r0, #4]
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004ce6:	f7ff ffc7 	bl	8004c78 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004cea:	bd10      	pop	{r4, pc}

08004cec <ros::Duration::operator*=(double)>:

  Duration& Duration::operator*=(double scale){
 8004cec:	b5d0      	push	{r4, r6, r7, lr}
 8004cee:	4616      	mov	r6, r2
 8004cf0:	461f      	mov	r7, r3
 8004cf2:	4604      	mov	r4, r0
    sec *= scale;
 8004cf4:	6800      	ldr	r0, [r0, #0]
 8004cf6:	f000 f9a5 	bl	8005044 <__aeabi_i2d>
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	f000 fa07 	bl	8005110 <__aeabi_dmul>
 8004d02:	f000 fc17 	bl	8005534 <__aeabi_d2iz>
 8004d06:	6020      	str	r0, [r4, #0]
    nsec *= scale;
 8004d08:	6860      	ldr	r0, [r4, #4]
 8004d0a:	f000 f99b 	bl	8005044 <__aeabi_i2d>
 8004d0e:	4632      	mov	r2, r6
 8004d10:	463b      	mov	r3, r7
 8004d12:	f000 f9fd 	bl	8005110 <__aeabi_dmul>
 8004d16:	f000 fc0d 	bl	8005534 <__aeabi_d2iz>
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	f841 0f04 	str.w	r0, [r1, #4]!
    normalizeSecNSecSigned(sec, nsec);
 8004d20:	4620      	mov	r0, r4
 8004d22:	f7ff ffa9 	bl	8004c78 <ros::normalizeSecNSecSigned(long&, long&)>
    return *this;
  }
 8004d26:	4620      	mov	r0, r4
 8004d28:	bdd0      	pop	{r4, r6, r7, pc}
 8004d2a:	bf00      	nop

08004d2c <ros::normalizeSecNSec(unsigned long&, unsigned long&)>:

#include "ros/time.h"

namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
 8004d2c:	b530      	push	{r4, r5, lr}
    uint32_t nsec_part= nsec % 1000000000UL;
 8004d2e:	680d      	ldr	r5, [r1, #0]
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 8004d30:	4c04      	ldr	r4, [pc, #16]	; (8004d44 <ros::normalizeSecNSec(unsigned long&, unsigned long&)+0x18>)
 8004d32:	6802      	ldr	r2, [r0, #0]
 8004d34:	fbb5 f3f4 	udiv	r3, r5, r4
 8004d38:	441a      	add	r2, r3
    nsec = nsec_part;
 8004d3a:	fb04 5313 	mls	r3, r4, r3, r5
namespace ros
{
  void normalizeSecNSec(uint32_t& sec, uint32_t& nsec){
    uint32_t nsec_part= nsec % 1000000000UL;
    uint32_t sec_part = nsec / 1000000000UL;
    sec += sec_part;
 8004d3e:	6002      	str	r2, [r0, #0]
    nsec = nsec_part;
 8004d40:	600b      	str	r3, [r1, #0]
 8004d42:	bd30      	pop	{r4, r5, pc}
 8004d44:	3b9aca00 	.word	0x3b9aca00

08004d48 <ros::Time::fromNSec(long)>:
  }

  Time& Time::fromNSec(int32_t t)
  {
    sec = t / 1000000000;
 8004d48:	4a06      	ldr	r2, [pc, #24]	; (8004d64 <ros::Time::fromNSec(long)+0x1c>)
    sec += sec_part;
    nsec = nsec_part;
  }

  Time& Time::fromNSec(int32_t t)
  {
 8004d4a:	b510      	push	{r4, lr}
    sec = t / 1000000000;
 8004d4c:	fb91 f3f2 	sdiv	r3, r1, r2
 8004d50:	6003      	str	r3, [r0, #0]
    nsec = t % 1000000000;
 8004d52:	fb02 1313 	mls	r3, r2, r3, r1
 8004d56:	4601      	mov	r1, r0
 8004d58:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004d5c:	f7ff ffe6 	bl	8004d2c <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004d60:	bd10      	pop	{r4, pc}
 8004d62:	bf00      	nop
 8004d64:	3b9aca00 	.word	0x3b9aca00

08004d68 <ros::Time::operator+=(ros::Duration const&)>:

  Time& Time::operator +=(const Duration &rhs)
  {
    sec += rhs.sec;
 8004d68:	6802      	ldr	r2, [r0, #0]
 8004d6a:	680b      	ldr	r3, [r1, #0]
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator +=(const Duration &rhs)
  {
 8004d6c:	b510      	push	{r4, lr}
    sec += rhs.sec;
 8004d6e:	4413      	add	r3, r2
 8004d70:	6003      	str	r3, [r0, #0]
    nsec += rhs.nsec;
 8004d72:	684b      	ldr	r3, [r1, #4]
 8004d74:	4601      	mov	r1, r0
 8004d76:	6842      	ldr	r2, [r0, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004d7e:	f7ff ffd5 	bl	8004d2c <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <ros::Time::operator-=(ros::Duration const&)>:

  Time& Time::operator -=(const Duration &rhs){
    sec += -rhs.sec;
 8004d84:	6803      	ldr	r3, [r0, #0]
 8004d86:	680a      	ldr	r2, [r1, #0]
    nsec += rhs.nsec;
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator -=(const Duration &rhs){
 8004d88:	b510      	push	{r4, lr}
    sec += -rhs.sec;
 8004d8a:	1a9b      	subs	r3, r3, r2
    nsec += -rhs.nsec;
 8004d8c:	684a      	ldr	r2, [r1, #4]
 8004d8e:	4601      	mov	r1, r0
    normalizeSecNSec(sec, nsec);
    return *this;
  }

  Time& Time::operator -=(const Duration &rhs){
    sec += -rhs.sec;
 8004d90:	6003      	str	r3, [r0, #0]
    nsec += -rhs.nsec;
 8004d92:	6843      	ldr	r3, [r0, #4]
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	f841 3f04 	str.w	r3, [r1, #4]!
    normalizeSecNSec(sec, nsec);
 8004d9a:	f7ff ffc7 	bl	8004d2c <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
    return *this;
  }
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <__aeabi_drsub>:
 8004da0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004da4:	e002      	b.n	8004dac <__adddf3>
 8004da6:	bf00      	nop

08004da8 <__aeabi_dsub>:
 8004da8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004dac <__adddf3>:
 8004dac:	b530      	push	{r4, r5, lr}
 8004dae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004db2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004db6:	ea94 0f05 	teq	r4, r5
 8004dba:	bf08      	it	eq
 8004dbc:	ea90 0f02 	teqeq	r0, r2
 8004dc0:	bf1f      	itttt	ne
 8004dc2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004dc6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8004dca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004dce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004dd2:	f000 80e2 	beq.w	8004f9a <__adddf3+0x1ee>
 8004dd6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8004dda:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004dde:	bfb8      	it	lt
 8004de0:	426d      	neglt	r5, r5
 8004de2:	dd0c      	ble.n	8004dfe <__adddf3+0x52>
 8004de4:	442c      	add	r4, r5
 8004de6:	ea80 0202 	eor.w	r2, r0, r2
 8004dea:	ea81 0303 	eor.w	r3, r1, r3
 8004dee:	ea82 0000 	eor.w	r0, r2, r0
 8004df2:	ea83 0101 	eor.w	r1, r3, r1
 8004df6:	ea80 0202 	eor.w	r2, r0, r2
 8004dfa:	ea81 0303 	eor.w	r3, r1, r3
 8004dfe:	2d36      	cmp	r5, #54	; 0x36
 8004e00:	bf88      	it	hi
 8004e02:	bd30      	pophi	{r4, r5, pc}
 8004e04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004e08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004e0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8004e10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8004e14:	d002      	beq.n	8004e1c <__adddf3+0x70>
 8004e16:	4240      	negs	r0, r0
 8004e18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004e1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8004e20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004e24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8004e28:	d002      	beq.n	8004e30 <__adddf3+0x84>
 8004e2a:	4252      	negs	r2, r2
 8004e2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004e30:	ea94 0f05 	teq	r4, r5
 8004e34:	f000 80a7 	beq.w	8004f86 <__adddf3+0x1da>
 8004e38:	f1a4 0401 	sub.w	r4, r4, #1
 8004e3c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004e40:	db0d      	blt.n	8004e5e <__adddf3+0xb2>
 8004e42:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004e46:	fa22 f205 	lsr.w	r2, r2, r5
 8004e4a:	1880      	adds	r0, r0, r2
 8004e4c:	f141 0100 	adc.w	r1, r1, #0
 8004e50:	fa03 f20e 	lsl.w	r2, r3, lr
 8004e54:	1880      	adds	r0, r0, r2
 8004e56:	fa43 f305 	asr.w	r3, r3, r5
 8004e5a:	4159      	adcs	r1, r3
 8004e5c:	e00e      	b.n	8004e7c <__adddf3+0xd0>
 8004e5e:	f1a5 0520 	sub.w	r5, r5, #32
 8004e62:	f10e 0e20 	add.w	lr, lr, #32
 8004e66:	2a01      	cmp	r2, #1
 8004e68:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004e6c:	bf28      	it	cs
 8004e6e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004e72:	fa43 f305 	asr.w	r3, r3, r5
 8004e76:	18c0      	adds	r0, r0, r3
 8004e78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004e7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004e80:	d507      	bpl.n	8004e92 <__adddf3+0xe6>
 8004e82:	f04f 0e00 	mov.w	lr, #0
 8004e86:	f1dc 0c00 	rsbs	ip, ip, #0
 8004e8a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004e8e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004e92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004e96:	d31b      	bcc.n	8004ed0 <__adddf3+0x124>
 8004e98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004e9c:	d30c      	bcc.n	8004eb8 <__adddf3+0x10c>
 8004e9e:	0849      	lsrs	r1, r1, #1
 8004ea0:	ea5f 0030 	movs.w	r0, r0, rrx
 8004ea4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004ea8:	f104 0401 	add.w	r4, r4, #1
 8004eac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004eb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004eb4:	f080 809a 	bcs.w	8004fec <__adddf3+0x240>
 8004eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004ebc:	bf08      	it	eq
 8004ebe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004ec2:	f150 0000 	adcs.w	r0, r0, #0
 8004ec6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004eca:	ea41 0105 	orr.w	r1, r1, r5
 8004ece:	bd30      	pop	{r4, r5, pc}
 8004ed0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004ed4:	4140      	adcs	r0, r0
 8004ed6:	eb41 0101 	adc.w	r1, r1, r1
 8004eda:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004ede:	f1a4 0401 	sub.w	r4, r4, #1
 8004ee2:	d1e9      	bne.n	8004eb8 <__adddf3+0x10c>
 8004ee4:	f091 0f00 	teq	r1, #0
 8004ee8:	bf04      	itt	eq
 8004eea:	4601      	moveq	r1, r0
 8004eec:	2000      	moveq	r0, #0
 8004eee:	fab1 f381 	clz	r3, r1
 8004ef2:	bf08      	it	eq
 8004ef4:	3320      	addeq	r3, #32
 8004ef6:	f1a3 030b 	sub.w	r3, r3, #11
 8004efa:	f1b3 0220 	subs.w	r2, r3, #32
 8004efe:	da0c      	bge.n	8004f1a <__adddf3+0x16e>
 8004f00:	320c      	adds	r2, #12
 8004f02:	dd08      	ble.n	8004f16 <__adddf3+0x16a>
 8004f04:	f102 0c14 	add.w	ip, r2, #20
 8004f08:	f1c2 020c 	rsb	r2, r2, #12
 8004f0c:	fa01 f00c 	lsl.w	r0, r1, ip
 8004f10:	fa21 f102 	lsr.w	r1, r1, r2
 8004f14:	e00c      	b.n	8004f30 <__adddf3+0x184>
 8004f16:	f102 0214 	add.w	r2, r2, #20
 8004f1a:	bfd8      	it	le
 8004f1c:	f1c2 0c20 	rsble	ip, r2, #32
 8004f20:	fa01 f102 	lsl.w	r1, r1, r2
 8004f24:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004f28:	bfdc      	itt	le
 8004f2a:	ea41 010c 	orrle.w	r1, r1, ip
 8004f2e:	4090      	lslle	r0, r2
 8004f30:	1ae4      	subs	r4, r4, r3
 8004f32:	bfa2      	ittt	ge
 8004f34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004f38:	4329      	orrge	r1, r5
 8004f3a:	bd30      	popge	{r4, r5, pc}
 8004f3c:	ea6f 0404 	mvn.w	r4, r4
 8004f40:	3c1f      	subs	r4, #31
 8004f42:	da1c      	bge.n	8004f7e <__adddf3+0x1d2>
 8004f44:	340c      	adds	r4, #12
 8004f46:	dc0e      	bgt.n	8004f66 <__adddf3+0x1ba>
 8004f48:	f104 0414 	add.w	r4, r4, #20
 8004f4c:	f1c4 0220 	rsb	r2, r4, #32
 8004f50:	fa20 f004 	lsr.w	r0, r0, r4
 8004f54:	fa01 f302 	lsl.w	r3, r1, r2
 8004f58:	ea40 0003 	orr.w	r0, r0, r3
 8004f5c:	fa21 f304 	lsr.w	r3, r1, r4
 8004f60:	ea45 0103 	orr.w	r1, r5, r3
 8004f64:	bd30      	pop	{r4, r5, pc}
 8004f66:	f1c4 040c 	rsb	r4, r4, #12
 8004f6a:	f1c4 0220 	rsb	r2, r4, #32
 8004f6e:	fa20 f002 	lsr.w	r0, r0, r2
 8004f72:	fa01 f304 	lsl.w	r3, r1, r4
 8004f76:	ea40 0003 	orr.w	r0, r0, r3
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	bd30      	pop	{r4, r5, pc}
 8004f7e:	fa21 f004 	lsr.w	r0, r1, r4
 8004f82:	4629      	mov	r1, r5
 8004f84:	bd30      	pop	{r4, r5, pc}
 8004f86:	f094 0f00 	teq	r4, #0
 8004f8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004f8e:	bf06      	itte	eq
 8004f90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004f94:	3401      	addeq	r4, #1
 8004f96:	3d01      	subne	r5, #1
 8004f98:	e74e      	b.n	8004e38 <__adddf3+0x8c>
 8004f9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004f9e:	bf18      	it	ne
 8004fa0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004fa4:	d029      	beq.n	8004ffa <__adddf3+0x24e>
 8004fa6:	ea94 0f05 	teq	r4, r5
 8004faa:	bf08      	it	eq
 8004fac:	ea90 0f02 	teqeq	r0, r2
 8004fb0:	d005      	beq.n	8004fbe <__adddf3+0x212>
 8004fb2:	ea54 0c00 	orrs.w	ip, r4, r0
 8004fb6:	bf04      	itt	eq
 8004fb8:	4619      	moveq	r1, r3
 8004fba:	4610      	moveq	r0, r2
 8004fbc:	bd30      	pop	{r4, r5, pc}
 8004fbe:	ea91 0f03 	teq	r1, r3
 8004fc2:	bf1e      	ittt	ne
 8004fc4:	2100      	movne	r1, #0
 8004fc6:	2000      	movne	r0, #0
 8004fc8:	bd30      	popne	{r4, r5, pc}
 8004fca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004fce:	d105      	bne.n	8004fdc <__adddf3+0x230>
 8004fd0:	0040      	lsls	r0, r0, #1
 8004fd2:	4149      	adcs	r1, r1
 8004fd4:	bf28      	it	cs
 8004fd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8004fda:	bd30      	pop	{r4, r5, pc}
 8004fdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004fe0:	bf3c      	itt	cc
 8004fe2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8004fe6:	bd30      	popcc	{r4, r5, pc}
 8004fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004fec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004ff0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ff4:	f04f 0000 	mov.w	r0, #0
 8004ff8:	bd30      	pop	{r4, r5, pc}
 8004ffa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004ffe:	bf1a      	itte	ne
 8005000:	4619      	movne	r1, r3
 8005002:	4610      	movne	r0, r2
 8005004:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005008:	bf1c      	itt	ne
 800500a:	460b      	movne	r3, r1
 800500c:	4602      	movne	r2, r0
 800500e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005012:	bf06      	itte	eq
 8005014:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005018:	ea91 0f03 	teqeq	r1, r3
 800501c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005020:	bd30      	pop	{r4, r5, pc}
 8005022:	bf00      	nop

08005024 <__aeabi_ui2d>:
 8005024:	f090 0f00 	teq	r0, #0
 8005028:	bf04      	itt	eq
 800502a:	2100      	moveq	r1, #0
 800502c:	4770      	bxeq	lr
 800502e:	b530      	push	{r4, r5, lr}
 8005030:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005034:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005038:	f04f 0500 	mov.w	r5, #0
 800503c:	f04f 0100 	mov.w	r1, #0
 8005040:	e750      	b.n	8004ee4 <__adddf3+0x138>
 8005042:	bf00      	nop

08005044 <__aeabi_i2d>:
 8005044:	f090 0f00 	teq	r0, #0
 8005048:	bf04      	itt	eq
 800504a:	2100      	moveq	r1, #0
 800504c:	4770      	bxeq	lr
 800504e:	b530      	push	{r4, r5, lr}
 8005050:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005054:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005058:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800505c:	bf48      	it	mi
 800505e:	4240      	negmi	r0, r0
 8005060:	f04f 0100 	mov.w	r1, #0
 8005064:	e73e      	b.n	8004ee4 <__adddf3+0x138>
 8005066:	bf00      	nop

08005068 <__aeabi_f2d>:
 8005068:	0042      	lsls	r2, r0, #1
 800506a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800506e:	ea4f 0131 	mov.w	r1, r1, rrx
 8005072:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005076:	bf1f      	itttt	ne
 8005078:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800507c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005080:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005084:	4770      	bxne	lr
 8005086:	f092 0f00 	teq	r2, #0
 800508a:	bf14      	ite	ne
 800508c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005090:	4770      	bxeq	lr
 8005092:	b530      	push	{r4, r5, lr}
 8005094:	f44f 7460 	mov.w	r4, #896	; 0x380
 8005098:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800509c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80050a0:	e720      	b.n	8004ee4 <__adddf3+0x138>
 80050a2:	bf00      	nop

080050a4 <__aeabi_ul2d>:
 80050a4:	ea50 0201 	orrs.w	r2, r0, r1
 80050a8:	bf08      	it	eq
 80050aa:	4770      	bxeq	lr
 80050ac:	b530      	push	{r4, r5, lr}
 80050ae:	f04f 0500 	mov.w	r5, #0
 80050b2:	e00a      	b.n	80050ca <__aeabi_l2d+0x16>

080050b4 <__aeabi_l2d>:
 80050b4:	ea50 0201 	orrs.w	r2, r0, r1
 80050b8:	bf08      	it	eq
 80050ba:	4770      	bxeq	lr
 80050bc:	b530      	push	{r4, r5, lr}
 80050be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80050c2:	d502      	bpl.n	80050ca <__aeabi_l2d+0x16>
 80050c4:	4240      	negs	r0, r0
 80050c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80050ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80050ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80050d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80050d6:	f43f aedc 	beq.w	8004e92 <__adddf3+0xe6>
 80050da:	f04f 0203 	mov.w	r2, #3
 80050de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80050e2:	bf18      	it	ne
 80050e4:	3203      	addne	r2, #3
 80050e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80050ea:	bf18      	it	ne
 80050ec:	3203      	addne	r2, #3
 80050ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80050f2:	f1c2 0320 	rsb	r3, r2, #32
 80050f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80050fa:	fa20 f002 	lsr.w	r0, r0, r2
 80050fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8005102:	ea40 000e 	orr.w	r0, r0, lr
 8005106:	fa21 f102 	lsr.w	r1, r1, r2
 800510a:	4414      	add	r4, r2
 800510c:	e6c1      	b.n	8004e92 <__adddf3+0xe6>
 800510e:	bf00      	nop

08005110 <__aeabi_dmul>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005116:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800511a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800511e:	bf1d      	ittte	ne
 8005120:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005124:	ea94 0f0c 	teqne	r4, ip
 8005128:	ea95 0f0c 	teqne	r5, ip
 800512c:	f000 f8de 	bleq	80052ec <__aeabi_dmul+0x1dc>
 8005130:	442c      	add	r4, r5
 8005132:	ea81 0603 	eor.w	r6, r1, r3
 8005136:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800513a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800513e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005142:	bf18      	it	ne
 8005144:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005148:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800514c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005150:	d038      	beq.n	80051c4 <__aeabi_dmul+0xb4>
 8005152:	fba0 ce02 	umull	ip, lr, r0, r2
 8005156:	f04f 0500 	mov.w	r5, #0
 800515a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800515e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005162:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005166:	f04f 0600 	mov.w	r6, #0
 800516a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800516e:	f09c 0f00 	teq	ip, #0
 8005172:	bf18      	it	ne
 8005174:	f04e 0e01 	orrne.w	lr, lr, #1
 8005178:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800517c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005180:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005184:	d204      	bcs.n	8005190 <__aeabi_dmul+0x80>
 8005186:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800518a:	416d      	adcs	r5, r5
 800518c:	eb46 0606 	adc.w	r6, r6, r6
 8005190:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8005194:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8005198:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800519c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80051a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80051a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80051a8:	bf88      	it	hi
 80051aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80051ae:	d81e      	bhi.n	80051ee <__aeabi_dmul+0xde>
 80051b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80051b4:	bf08      	it	eq
 80051b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80051ba:	f150 0000 	adcs.w	r0, r0, #0
 80051be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80051c8:	ea46 0101 	orr.w	r1, r6, r1
 80051cc:	ea40 0002 	orr.w	r0, r0, r2
 80051d0:	ea81 0103 	eor.w	r1, r1, r3
 80051d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80051d8:	bfc2      	ittt	gt
 80051da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80051de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80051e2:	bd70      	popgt	{r4, r5, r6, pc}
 80051e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80051e8:	f04f 0e00 	mov.w	lr, #0
 80051ec:	3c01      	subs	r4, #1
 80051ee:	f300 80ab 	bgt.w	8005348 <__aeabi_dmul+0x238>
 80051f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80051f6:	bfde      	ittt	le
 80051f8:	2000      	movle	r0, #0
 80051fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80051fe:	bd70      	pople	{r4, r5, r6, pc}
 8005200:	f1c4 0400 	rsb	r4, r4, #0
 8005204:	3c20      	subs	r4, #32
 8005206:	da35      	bge.n	8005274 <__aeabi_dmul+0x164>
 8005208:	340c      	adds	r4, #12
 800520a:	dc1b      	bgt.n	8005244 <__aeabi_dmul+0x134>
 800520c:	f104 0414 	add.w	r4, r4, #20
 8005210:	f1c4 0520 	rsb	r5, r4, #32
 8005214:	fa00 f305 	lsl.w	r3, r0, r5
 8005218:	fa20 f004 	lsr.w	r0, r0, r4
 800521c:	fa01 f205 	lsl.w	r2, r1, r5
 8005220:	ea40 0002 	orr.w	r0, r0, r2
 8005224:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8005228:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800522c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005230:	fa21 f604 	lsr.w	r6, r1, r4
 8005234:	eb42 0106 	adc.w	r1, r2, r6
 8005238:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800523c:	bf08      	it	eq
 800523e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	f1c4 040c 	rsb	r4, r4, #12
 8005248:	f1c4 0520 	rsb	r5, r4, #32
 800524c:	fa00 f304 	lsl.w	r3, r0, r4
 8005250:	fa20 f005 	lsr.w	r0, r0, r5
 8005254:	fa01 f204 	lsl.w	r2, r1, r4
 8005258:	ea40 0002 	orr.w	r0, r0, r2
 800525c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005260:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005264:	f141 0100 	adc.w	r1, r1, #0
 8005268:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800526c:	bf08      	it	eq
 800526e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	f1c4 0520 	rsb	r5, r4, #32
 8005278:	fa00 f205 	lsl.w	r2, r0, r5
 800527c:	ea4e 0e02 	orr.w	lr, lr, r2
 8005280:	fa20 f304 	lsr.w	r3, r0, r4
 8005284:	fa01 f205 	lsl.w	r2, r1, r5
 8005288:	ea43 0302 	orr.w	r3, r3, r2
 800528c:	fa21 f004 	lsr.w	r0, r1, r4
 8005290:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005294:	fa21 f204 	lsr.w	r2, r1, r4
 8005298:	ea20 0002 	bic.w	r0, r0, r2
 800529c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80052a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80052a4:	bf08      	it	eq
 80052a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f094 0f00 	teq	r4, #0
 80052b0:	d10f      	bne.n	80052d2 <__aeabi_dmul+0x1c2>
 80052b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80052b6:	0040      	lsls	r0, r0, #1
 80052b8:	eb41 0101 	adc.w	r1, r1, r1
 80052bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80052c0:	bf08      	it	eq
 80052c2:	3c01      	subeq	r4, #1
 80052c4:	d0f7      	beq.n	80052b6 <__aeabi_dmul+0x1a6>
 80052c6:	ea41 0106 	orr.w	r1, r1, r6
 80052ca:	f095 0f00 	teq	r5, #0
 80052ce:	bf18      	it	ne
 80052d0:	4770      	bxne	lr
 80052d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80052d6:	0052      	lsls	r2, r2, #1
 80052d8:	eb43 0303 	adc.w	r3, r3, r3
 80052dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80052e0:	bf08      	it	eq
 80052e2:	3d01      	subeq	r5, #1
 80052e4:	d0f7      	beq.n	80052d6 <__aeabi_dmul+0x1c6>
 80052e6:	ea43 0306 	orr.w	r3, r3, r6
 80052ea:	4770      	bx	lr
 80052ec:	ea94 0f0c 	teq	r4, ip
 80052f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80052f4:	bf18      	it	ne
 80052f6:	ea95 0f0c 	teqne	r5, ip
 80052fa:	d00c      	beq.n	8005316 <__aeabi_dmul+0x206>
 80052fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005300:	bf18      	it	ne
 8005302:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005306:	d1d1      	bne.n	80052ac <__aeabi_dmul+0x19c>
 8005308:	ea81 0103 	eor.w	r1, r1, r3
 800530c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005310:	f04f 0000 	mov.w	r0, #0
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800531a:	bf06      	itte	eq
 800531c:	4610      	moveq	r0, r2
 800531e:	4619      	moveq	r1, r3
 8005320:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005324:	d019      	beq.n	800535a <__aeabi_dmul+0x24a>
 8005326:	ea94 0f0c 	teq	r4, ip
 800532a:	d102      	bne.n	8005332 <__aeabi_dmul+0x222>
 800532c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005330:	d113      	bne.n	800535a <__aeabi_dmul+0x24a>
 8005332:	ea95 0f0c 	teq	r5, ip
 8005336:	d105      	bne.n	8005344 <__aeabi_dmul+0x234>
 8005338:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800533c:	bf1c      	itt	ne
 800533e:	4610      	movne	r0, r2
 8005340:	4619      	movne	r1, r3
 8005342:	d10a      	bne.n	800535a <__aeabi_dmul+0x24a>
 8005344:	ea81 0103 	eor.w	r1, r1, r3
 8005348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800534c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	bd70      	pop	{r4, r5, r6, pc}
 800535a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800535e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005362:	bd70      	pop	{r4, r5, r6, pc}

08005364 <__aeabi_ddiv>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800536a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800536e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005372:	bf1d      	ittte	ne
 8005374:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005378:	ea94 0f0c 	teqne	r4, ip
 800537c:	ea95 0f0c 	teqne	r5, ip
 8005380:	f000 f8a7 	bleq	80054d2 <__aeabi_ddiv+0x16e>
 8005384:	eba4 0405 	sub.w	r4, r4, r5
 8005388:	ea81 0e03 	eor.w	lr, r1, r3
 800538c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005390:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005394:	f000 8088 	beq.w	80054a8 <__aeabi_ddiv+0x144>
 8005398:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800539c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80053a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80053a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80053a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80053ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80053b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80053b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80053b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80053bc:	429d      	cmp	r5, r3
 80053be:	bf08      	it	eq
 80053c0:	4296      	cmpeq	r6, r2
 80053c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80053c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80053ca:	d202      	bcs.n	80053d2 <__aeabi_ddiv+0x6e>
 80053cc:	085b      	lsrs	r3, r3, #1
 80053ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80053d2:	1ab6      	subs	r6, r6, r2
 80053d4:	eb65 0503 	sbc.w	r5, r5, r3
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	ea4f 0232 	mov.w	r2, r2, rrx
 80053de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80053e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80053e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80053ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80053ee:	bf22      	ittt	cs
 80053f0:	1ab6      	subcs	r6, r6, r2
 80053f2:	4675      	movcs	r5, lr
 80053f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80053fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8005402:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005406:	bf22      	ittt	cs
 8005408:	1ab6      	subcs	r6, r6, r2
 800540a:	4675      	movcs	r5, lr
 800540c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	ea4f 0232 	mov.w	r2, r2, rrx
 8005416:	ebb6 0e02 	subs.w	lr, r6, r2
 800541a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800541e:	bf22      	ittt	cs
 8005420:	1ab6      	subcs	r6, r6, r2
 8005422:	4675      	movcs	r5, lr
 8005424:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	ea4f 0232 	mov.w	r2, r2, rrx
 800542e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005432:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005436:	bf22      	ittt	cs
 8005438:	1ab6      	subcs	r6, r6, r2
 800543a:	4675      	movcs	r5, lr
 800543c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005440:	ea55 0e06 	orrs.w	lr, r5, r6
 8005444:	d018      	beq.n	8005478 <__aeabi_ddiv+0x114>
 8005446:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800544a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800544e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005452:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005456:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800545a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800545e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005462:	d1c0      	bne.n	80053e6 <__aeabi_ddiv+0x82>
 8005464:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005468:	d10b      	bne.n	8005482 <__aeabi_ddiv+0x11e>
 800546a:	ea41 0100 	orr.w	r1, r1, r0
 800546e:	f04f 0000 	mov.w	r0, #0
 8005472:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005476:	e7b6      	b.n	80053e6 <__aeabi_ddiv+0x82>
 8005478:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800547c:	bf04      	itt	eq
 800547e:	4301      	orreq	r1, r0
 8005480:	2000      	moveq	r0, #0
 8005482:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005486:	bf88      	it	hi
 8005488:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800548c:	f63f aeaf 	bhi.w	80051ee <__aeabi_dmul+0xde>
 8005490:	ebb5 0c03 	subs.w	ip, r5, r3
 8005494:	bf04      	itt	eq
 8005496:	ebb6 0c02 	subseq.w	ip, r6, r2
 800549a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800549e:	f150 0000 	adcs.w	r0, r0, #0
 80054a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80054ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80054b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80054b4:	bfc2      	ittt	gt
 80054b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80054ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80054be:	bd70      	popgt	{r4, r5, r6, pc}
 80054c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80054c4:	f04f 0e00 	mov.w	lr, #0
 80054c8:	3c01      	subs	r4, #1
 80054ca:	e690      	b.n	80051ee <__aeabi_dmul+0xde>
 80054cc:	ea45 0e06 	orr.w	lr, r5, r6
 80054d0:	e68d      	b.n	80051ee <__aeabi_dmul+0xde>
 80054d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80054d6:	ea94 0f0c 	teq	r4, ip
 80054da:	bf08      	it	eq
 80054dc:	ea95 0f0c 	teqeq	r5, ip
 80054e0:	f43f af3b 	beq.w	800535a <__aeabi_dmul+0x24a>
 80054e4:	ea94 0f0c 	teq	r4, ip
 80054e8:	d10a      	bne.n	8005500 <__aeabi_ddiv+0x19c>
 80054ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80054ee:	f47f af34 	bne.w	800535a <__aeabi_dmul+0x24a>
 80054f2:	ea95 0f0c 	teq	r5, ip
 80054f6:	f47f af25 	bne.w	8005344 <__aeabi_dmul+0x234>
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	e72c      	b.n	800535a <__aeabi_dmul+0x24a>
 8005500:	ea95 0f0c 	teq	r5, ip
 8005504:	d106      	bne.n	8005514 <__aeabi_ddiv+0x1b0>
 8005506:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800550a:	f43f aefd 	beq.w	8005308 <__aeabi_dmul+0x1f8>
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	e722      	b.n	800535a <__aeabi_dmul+0x24a>
 8005514:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005518:	bf18      	it	ne
 800551a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800551e:	f47f aec5 	bne.w	80052ac <__aeabi_dmul+0x19c>
 8005522:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005526:	f47f af0d 	bne.w	8005344 <__aeabi_dmul+0x234>
 800552a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800552e:	f47f aeeb 	bne.w	8005308 <__aeabi_dmul+0x1f8>
 8005532:	e712      	b.n	800535a <__aeabi_dmul+0x24a>

08005534 <__aeabi_d2iz>:
 8005534:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005538:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800553c:	d215      	bcs.n	800556a <__aeabi_d2iz+0x36>
 800553e:	d511      	bpl.n	8005564 <__aeabi_d2iz+0x30>
 8005540:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8005544:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005548:	d912      	bls.n	8005570 <__aeabi_d2iz+0x3c>
 800554a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800554e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005552:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005556:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800555a:	fa23 f002 	lsr.w	r0, r3, r2
 800555e:	bf18      	it	ne
 8005560:	4240      	negne	r0, r0
 8005562:	4770      	bx	lr
 8005564:	f04f 0000 	mov.w	r0, #0
 8005568:	4770      	bx	lr
 800556a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800556e:	d105      	bne.n	800557c <__aeabi_d2iz+0x48>
 8005570:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8005574:	bf08      	it	eq
 8005576:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800557a:	4770      	bx	lr
 800557c:	f04f 0000 	mov.w	r0, #0
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop

08005584 <__aeabi_d2f>:
 8005584:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005588:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800558c:	bf24      	itt	cs
 800558e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005592:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005596:	d90d      	bls.n	80055b4 <__aeabi_d2f+0x30>
 8005598:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800559c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80055a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80055a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80055a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80055ac:	bf08      	it	eq
 80055ae:	f020 0001 	biceq.w	r0, r0, #1
 80055b2:	4770      	bx	lr
 80055b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80055b8:	d121      	bne.n	80055fe <__aeabi_d2f+0x7a>
 80055ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80055be:	bfbc      	itt	lt
 80055c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80055c4:	4770      	bxlt	lr
 80055c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80055ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80055ce:	f1c2 0218 	rsb	r2, r2, #24
 80055d2:	f1c2 0c20 	rsb	ip, r2, #32
 80055d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80055da:	fa20 f002 	lsr.w	r0, r0, r2
 80055de:	bf18      	it	ne
 80055e0:	f040 0001 	orrne.w	r0, r0, #1
 80055e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80055e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80055ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80055f0:	ea40 000c 	orr.w	r0, r0, ip
 80055f4:	fa23 f302 	lsr.w	r3, r3, r2
 80055f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80055fc:	e7cc      	b.n	8005598 <__aeabi_d2f+0x14>
 80055fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005602:	d107      	bne.n	8005614 <__aeabi_d2f+0x90>
 8005604:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005608:	bf1e      	ittt	ne
 800560a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800560e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005612:	4770      	bxne	lr
 8005614:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005618:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800561c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop

08005624 <__aeabi_frsub>:
 8005624:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8005628:	e002      	b.n	8005630 <__addsf3>
 800562a:	bf00      	nop

0800562c <__aeabi_fsub>:
 800562c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08005630 <__addsf3>:
 8005630:	0042      	lsls	r2, r0, #1
 8005632:	bf1f      	itttt	ne
 8005634:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8005638:	ea92 0f03 	teqne	r2, r3
 800563c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8005640:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005644:	d06a      	beq.n	800571c <__addsf3+0xec>
 8005646:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800564a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800564e:	bfc1      	itttt	gt
 8005650:	18d2      	addgt	r2, r2, r3
 8005652:	4041      	eorgt	r1, r0
 8005654:	4048      	eorgt	r0, r1
 8005656:	4041      	eorgt	r1, r0
 8005658:	bfb8      	it	lt
 800565a:	425b      	neglt	r3, r3
 800565c:	2b19      	cmp	r3, #25
 800565e:	bf88      	it	hi
 8005660:	4770      	bxhi	lr
 8005662:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800566a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800566e:	bf18      	it	ne
 8005670:	4240      	negne	r0, r0
 8005672:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005676:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800567a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800567e:	bf18      	it	ne
 8005680:	4249      	negne	r1, r1
 8005682:	ea92 0f03 	teq	r2, r3
 8005686:	d03f      	beq.n	8005708 <__addsf3+0xd8>
 8005688:	f1a2 0201 	sub.w	r2, r2, #1
 800568c:	fa41 fc03 	asr.w	ip, r1, r3
 8005690:	eb10 000c 	adds.w	r0, r0, ip
 8005694:	f1c3 0320 	rsb	r3, r3, #32
 8005698:	fa01 f103 	lsl.w	r1, r1, r3
 800569c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80056a0:	d502      	bpl.n	80056a8 <__addsf3+0x78>
 80056a2:	4249      	negs	r1, r1
 80056a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80056a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80056ac:	d313      	bcc.n	80056d6 <__addsf3+0xa6>
 80056ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80056b2:	d306      	bcc.n	80056c2 <__addsf3+0x92>
 80056b4:	0840      	lsrs	r0, r0, #1
 80056b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80056ba:	f102 0201 	add.w	r2, r2, #1
 80056be:	2afe      	cmp	r2, #254	; 0xfe
 80056c0:	d251      	bcs.n	8005766 <__addsf3+0x136>
 80056c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80056c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80056ca:	bf08      	it	eq
 80056cc:	f020 0001 	biceq.w	r0, r0, #1
 80056d0:	ea40 0003 	orr.w	r0, r0, r3
 80056d4:	4770      	bx	lr
 80056d6:	0049      	lsls	r1, r1, #1
 80056d8:	eb40 0000 	adc.w	r0, r0, r0
 80056dc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80056e0:	f1a2 0201 	sub.w	r2, r2, #1
 80056e4:	d1ed      	bne.n	80056c2 <__addsf3+0x92>
 80056e6:	fab0 fc80 	clz	ip, r0
 80056ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80056ee:	ebb2 020c 	subs.w	r2, r2, ip
 80056f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80056f6:	bfaa      	itet	ge
 80056f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80056fc:	4252      	neglt	r2, r2
 80056fe:	4318      	orrge	r0, r3
 8005700:	bfbc      	itt	lt
 8005702:	40d0      	lsrlt	r0, r2
 8005704:	4318      	orrlt	r0, r3
 8005706:	4770      	bx	lr
 8005708:	f092 0f00 	teq	r2, #0
 800570c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8005710:	bf06      	itte	eq
 8005712:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8005716:	3201      	addeq	r2, #1
 8005718:	3b01      	subne	r3, #1
 800571a:	e7b5      	b.n	8005688 <__addsf3+0x58>
 800571c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005724:	bf18      	it	ne
 8005726:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800572a:	d021      	beq.n	8005770 <__addsf3+0x140>
 800572c:	ea92 0f03 	teq	r2, r3
 8005730:	d004      	beq.n	800573c <__addsf3+0x10c>
 8005732:	f092 0f00 	teq	r2, #0
 8005736:	bf08      	it	eq
 8005738:	4608      	moveq	r0, r1
 800573a:	4770      	bx	lr
 800573c:	ea90 0f01 	teq	r0, r1
 8005740:	bf1c      	itt	ne
 8005742:	2000      	movne	r0, #0
 8005744:	4770      	bxne	lr
 8005746:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800574a:	d104      	bne.n	8005756 <__addsf3+0x126>
 800574c:	0040      	lsls	r0, r0, #1
 800574e:	bf28      	it	cs
 8005750:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8005754:	4770      	bx	lr
 8005756:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800575a:	bf3c      	itt	cc
 800575c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8005760:	4770      	bxcc	lr
 8005762:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8005766:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800576a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800576e:	4770      	bx	lr
 8005770:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8005774:	bf16      	itet	ne
 8005776:	4608      	movne	r0, r1
 8005778:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800577c:	4601      	movne	r1, r0
 800577e:	0242      	lsls	r2, r0, #9
 8005780:	bf06      	itte	eq
 8005782:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8005786:	ea90 0f01 	teqeq	r0, r1
 800578a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800578e:	4770      	bx	lr

08005790 <__aeabi_ui2f>:
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e004      	b.n	80057a0 <__aeabi_i2f+0x8>
 8005796:	bf00      	nop

08005798 <__aeabi_i2f>:
 8005798:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800579c:	bf48      	it	mi
 800579e:	4240      	negmi	r0, r0
 80057a0:	ea5f 0c00 	movs.w	ip, r0
 80057a4:	bf08      	it	eq
 80057a6:	4770      	bxeq	lr
 80057a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80057ac:	4601      	mov	r1, r0
 80057ae:	f04f 0000 	mov.w	r0, #0
 80057b2:	e01c      	b.n	80057ee <__aeabi_l2f+0x2a>

080057b4 <__aeabi_ul2f>:
 80057b4:	ea50 0201 	orrs.w	r2, r0, r1
 80057b8:	bf08      	it	eq
 80057ba:	4770      	bxeq	lr
 80057bc:	f04f 0300 	mov.w	r3, #0
 80057c0:	e00a      	b.n	80057d8 <__aeabi_l2f+0x14>
 80057c2:	bf00      	nop

080057c4 <__aeabi_l2f>:
 80057c4:	ea50 0201 	orrs.w	r2, r0, r1
 80057c8:	bf08      	it	eq
 80057ca:	4770      	bxeq	lr
 80057cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80057d0:	d502      	bpl.n	80057d8 <__aeabi_l2f+0x14>
 80057d2:	4240      	negs	r0, r0
 80057d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80057d8:	ea5f 0c01 	movs.w	ip, r1
 80057dc:	bf02      	ittt	eq
 80057de:	4684      	moveq	ip, r0
 80057e0:	4601      	moveq	r1, r0
 80057e2:	2000      	moveq	r0, #0
 80057e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80057e8:	bf08      	it	eq
 80057ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80057ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80057f2:	fabc f28c 	clz	r2, ip
 80057f6:	3a08      	subs	r2, #8
 80057f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80057fc:	db10      	blt.n	8005820 <__aeabi_l2f+0x5c>
 80057fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8005802:	4463      	add	r3, ip
 8005804:	fa00 fc02 	lsl.w	ip, r0, r2
 8005808:	f1c2 0220 	rsb	r2, r2, #32
 800580c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005810:	fa20 f202 	lsr.w	r2, r0, r2
 8005814:	eb43 0002 	adc.w	r0, r3, r2
 8005818:	bf08      	it	eq
 800581a:	f020 0001 	biceq.w	r0, r0, #1
 800581e:	4770      	bx	lr
 8005820:	f102 0220 	add.w	r2, r2, #32
 8005824:	fa01 fc02 	lsl.w	ip, r1, r2
 8005828:	f1c2 0220 	rsb	r2, r2, #32
 800582c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8005830:	fa21 f202 	lsr.w	r2, r1, r2
 8005834:	eb43 0002 	adc.w	r0, r3, r2
 8005838:	bf08      	it	eq
 800583a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800583e:	4770      	bx	lr

08005840 <__aeabi_fmul>:
 8005840:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005844:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8005848:	bf1e      	ittt	ne
 800584a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800584e:	ea92 0f0c 	teqne	r2, ip
 8005852:	ea93 0f0c 	teqne	r3, ip
 8005856:	d06f      	beq.n	8005938 <__aeabi_fmul+0xf8>
 8005858:	441a      	add	r2, r3
 800585a:	ea80 0c01 	eor.w	ip, r0, r1
 800585e:	0240      	lsls	r0, r0, #9
 8005860:	bf18      	it	ne
 8005862:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8005866:	d01e      	beq.n	80058a6 <__aeabi_fmul+0x66>
 8005868:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800586c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8005870:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8005874:	fba0 3101 	umull	r3, r1, r0, r1
 8005878:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800587c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005880:	bf3e      	ittt	cc
 8005882:	0049      	lslcc	r1, r1, #1
 8005884:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8005888:	005b      	lslcc	r3, r3, #1
 800588a:	ea40 0001 	orr.w	r0, r0, r1
 800588e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8005892:	2afd      	cmp	r2, #253	; 0xfd
 8005894:	d81d      	bhi.n	80058d2 <__aeabi_fmul+0x92>
 8005896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800589e:	bf08      	it	eq
 80058a0:	f020 0001 	biceq.w	r0, r0, #1
 80058a4:	4770      	bx	lr
 80058a6:	f090 0f00 	teq	r0, #0
 80058aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80058ae:	bf08      	it	eq
 80058b0:	0249      	lsleq	r1, r1, #9
 80058b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80058b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80058ba:	3a7f      	subs	r2, #127	; 0x7f
 80058bc:	bfc2      	ittt	gt
 80058be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80058c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80058c6:	4770      	bxgt	lr
 80058c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	3a01      	subs	r2, #1
 80058d2:	dc5d      	bgt.n	8005990 <__aeabi_fmul+0x150>
 80058d4:	f112 0f19 	cmn.w	r2, #25
 80058d8:	bfdc      	itt	le
 80058da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80058de:	4770      	bxle	lr
 80058e0:	f1c2 0200 	rsb	r2, r2, #0
 80058e4:	0041      	lsls	r1, r0, #1
 80058e6:	fa21 f102 	lsr.w	r1, r1, r2
 80058ea:	f1c2 0220 	rsb	r2, r2, #32
 80058ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80058f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80058f6:	f140 0000 	adc.w	r0, r0, #0
 80058fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80058fe:	bf08      	it	eq
 8005900:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8005904:	4770      	bx	lr
 8005906:	f092 0f00 	teq	r2, #0
 800590a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800590e:	bf02      	ittt	eq
 8005910:	0040      	lsleq	r0, r0, #1
 8005912:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005916:	3a01      	subeq	r2, #1
 8005918:	d0f9      	beq.n	800590e <__aeabi_fmul+0xce>
 800591a:	ea40 000c 	orr.w	r0, r0, ip
 800591e:	f093 0f00 	teq	r3, #0
 8005922:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005926:	bf02      	ittt	eq
 8005928:	0049      	lsleq	r1, r1, #1
 800592a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800592e:	3b01      	subeq	r3, #1
 8005930:	d0f9      	beq.n	8005926 <__aeabi_fmul+0xe6>
 8005932:	ea41 010c 	orr.w	r1, r1, ip
 8005936:	e78f      	b.n	8005858 <__aeabi_fmul+0x18>
 8005938:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800593c:	ea92 0f0c 	teq	r2, ip
 8005940:	bf18      	it	ne
 8005942:	ea93 0f0c 	teqne	r3, ip
 8005946:	d00a      	beq.n	800595e <__aeabi_fmul+0x11e>
 8005948:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800594c:	bf18      	it	ne
 800594e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005952:	d1d8      	bne.n	8005906 <__aeabi_fmul+0xc6>
 8005954:	ea80 0001 	eor.w	r0, r0, r1
 8005958:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800595c:	4770      	bx	lr
 800595e:	f090 0f00 	teq	r0, #0
 8005962:	bf17      	itett	ne
 8005964:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8005968:	4608      	moveq	r0, r1
 800596a:	f091 0f00 	teqne	r1, #0
 800596e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8005972:	d014      	beq.n	800599e <__aeabi_fmul+0x15e>
 8005974:	ea92 0f0c 	teq	r2, ip
 8005978:	d101      	bne.n	800597e <__aeabi_fmul+0x13e>
 800597a:	0242      	lsls	r2, r0, #9
 800597c:	d10f      	bne.n	800599e <__aeabi_fmul+0x15e>
 800597e:	ea93 0f0c 	teq	r3, ip
 8005982:	d103      	bne.n	800598c <__aeabi_fmul+0x14c>
 8005984:	024b      	lsls	r3, r1, #9
 8005986:	bf18      	it	ne
 8005988:	4608      	movne	r0, r1
 800598a:	d108      	bne.n	800599e <__aeabi_fmul+0x15e>
 800598c:	ea80 0001 	eor.w	r0, r0, r1
 8005990:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005994:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005998:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800599c:	4770      	bx	lr
 800599e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80059a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80059a6:	4770      	bx	lr

080059a8 <__aeabi_fdiv>:
 80059a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80059ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80059b0:	bf1e      	ittt	ne
 80059b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80059b6:	ea92 0f0c 	teqne	r2, ip
 80059ba:	ea93 0f0c 	teqne	r3, ip
 80059be:	d069      	beq.n	8005a94 <__aeabi_fdiv+0xec>
 80059c0:	eba2 0203 	sub.w	r2, r2, r3
 80059c4:	ea80 0c01 	eor.w	ip, r0, r1
 80059c8:	0249      	lsls	r1, r1, #9
 80059ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80059ce:	d037      	beq.n	8005a40 <__aeabi_fdiv+0x98>
 80059d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80059d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80059dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80059e0:	428b      	cmp	r3, r1
 80059e2:	bf38      	it	cc
 80059e4:	005b      	lslcc	r3, r3, #1
 80059e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80059ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80059ee:	428b      	cmp	r3, r1
 80059f0:	bf24      	itt	cs
 80059f2:	1a5b      	subcs	r3, r3, r1
 80059f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80059f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80059fc:	bf24      	itt	cs
 80059fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8005a02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005a06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8005a0a:	bf24      	itt	cs
 8005a0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8005a10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005a14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8005a18:	bf24      	itt	cs
 8005a1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8005a1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	bf18      	it	ne
 8005a26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8005a2a:	d1e0      	bne.n	80059ee <__aeabi_fdiv+0x46>
 8005a2c:	2afd      	cmp	r2, #253	; 0xfd
 8005a2e:	f63f af50 	bhi.w	80058d2 <__aeabi_fmul+0x92>
 8005a32:	428b      	cmp	r3, r1
 8005a34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8005a38:	bf08      	it	eq
 8005a3a:	f020 0001 	biceq.w	r0, r0, #1
 8005a3e:	4770      	bx	lr
 8005a40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8005a44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8005a48:	327f      	adds	r2, #127	; 0x7f
 8005a4a:	bfc2      	ittt	gt
 8005a4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8005a50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8005a54:	4770      	bxgt	lr
 8005a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	3a01      	subs	r2, #1
 8005a60:	e737      	b.n	80058d2 <__aeabi_fmul+0x92>
 8005a62:	f092 0f00 	teq	r2, #0
 8005a66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8005a6a:	bf02      	ittt	eq
 8005a6c:	0040      	lsleq	r0, r0, #1
 8005a6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8005a72:	3a01      	subeq	r2, #1
 8005a74:	d0f9      	beq.n	8005a6a <__aeabi_fdiv+0xc2>
 8005a76:	ea40 000c 	orr.w	r0, r0, ip
 8005a7a:	f093 0f00 	teq	r3, #0
 8005a7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005a82:	bf02      	ittt	eq
 8005a84:	0049      	lsleq	r1, r1, #1
 8005a86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8005a8a:	3b01      	subeq	r3, #1
 8005a8c:	d0f9      	beq.n	8005a82 <__aeabi_fdiv+0xda>
 8005a8e:	ea41 010c 	orr.w	r1, r1, ip
 8005a92:	e795      	b.n	80059c0 <__aeabi_fdiv+0x18>
 8005a94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8005a98:	ea92 0f0c 	teq	r2, ip
 8005a9c:	d108      	bne.n	8005ab0 <__aeabi_fdiv+0x108>
 8005a9e:	0242      	lsls	r2, r0, #9
 8005aa0:	f47f af7d 	bne.w	800599e <__aeabi_fmul+0x15e>
 8005aa4:	ea93 0f0c 	teq	r3, ip
 8005aa8:	f47f af70 	bne.w	800598c <__aeabi_fmul+0x14c>
 8005aac:	4608      	mov	r0, r1
 8005aae:	e776      	b.n	800599e <__aeabi_fmul+0x15e>
 8005ab0:	ea93 0f0c 	teq	r3, ip
 8005ab4:	d104      	bne.n	8005ac0 <__aeabi_fdiv+0x118>
 8005ab6:	024b      	lsls	r3, r1, #9
 8005ab8:	f43f af4c 	beq.w	8005954 <__aeabi_fmul+0x114>
 8005abc:	4608      	mov	r0, r1
 8005abe:	e76e      	b.n	800599e <__aeabi_fmul+0x15e>
 8005ac0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8005ac4:	bf18      	it	ne
 8005ac6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8005aca:	d1ca      	bne.n	8005a62 <__aeabi_fdiv+0xba>
 8005acc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8005ad0:	f47f af5c 	bne.w	800598c <__aeabi_fmul+0x14c>
 8005ad4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005ad8:	f47f af3c 	bne.w	8005954 <__aeabi_fmul+0x114>
 8005adc:	e75f      	b.n	800599e <__aeabi_fmul+0x15e>
 8005ade:	bf00      	nop

08005ae0 <__gesf2>:
 8005ae0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005ae4:	e006      	b.n	8005af4 <__cmpsf2+0x4>
 8005ae6:	bf00      	nop

08005ae8 <__lesf2>:
 8005ae8:	f04f 0c01 	mov.w	ip, #1
 8005aec:	e002      	b.n	8005af4 <__cmpsf2+0x4>
 8005aee:	bf00      	nop

08005af0 <__cmpsf2>:
 8005af0:	f04f 0c01 	mov.w	ip, #1
 8005af4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005af8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005afc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8005b00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b04:	bf18      	it	ne
 8005b06:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8005b0a:	d011      	beq.n	8005b30 <__cmpsf2+0x40>
 8005b0c:	b001      	add	sp, #4
 8005b0e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8005b12:	bf18      	it	ne
 8005b14:	ea90 0f01 	teqne	r0, r1
 8005b18:	bf58      	it	pl
 8005b1a:	ebb2 0003 	subspl.w	r0, r2, r3
 8005b1e:	bf88      	it	hi
 8005b20:	17c8      	asrhi	r0, r1, #31
 8005b22:	bf38      	it	cc
 8005b24:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8005b28:	bf18      	it	ne
 8005b2a:	f040 0001 	orrne.w	r0, r0, #1
 8005b2e:	4770      	bx	lr
 8005b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8005b34:	d102      	bne.n	8005b3c <__cmpsf2+0x4c>
 8005b36:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8005b3a:	d105      	bne.n	8005b48 <__cmpsf2+0x58>
 8005b3c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8005b40:	d1e4      	bne.n	8005b0c <__cmpsf2+0x1c>
 8005b42:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8005b46:	d0e1      	beq.n	8005b0c <__cmpsf2+0x1c>
 8005b48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop

08005b50 <__aeabi_cfrcmple>:
 8005b50:	4684      	mov	ip, r0
 8005b52:	4608      	mov	r0, r1
 8005b54:	4661      	mov	r1, ip
 8005b56:	e7ff      	b.n	8005b58 <__aeabi_cfcmpeq>

08005b58 <__aeabi_cfcmpeq>:
 8005b58:	b50f      	push	{r0, r1, r2, r3, lr}
 8005b5a:	f7ff ffc9 	bl	8005af0 <__cmpsf2>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	bf48      	it	mi
 8005b62:	f110 0f00 	cmnmi.w	r0, #0
 8005b66:	bd0f      	pop	{r0, r1, r2, r3, pc}

08005b68 <__aeabi_fcmpeq>:
 8005b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b6c:	f7ff fff4 	bl	8005b58 <__aeabi_cfcmpeq>
 8005b70:	bf0c      	ite	eq
 8005b72:	2001      	moveq	r0, #1
 8005b74:	2000      	movne	r0, #0
 8005b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8005b7a:	bf00      	nop

08005b7c <__aeabi_fcmplt>:
 8005b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b80:	f7ff ffea 	bl	8005b58 <__aeabi_cfcmpeq>
 8005b84:	bf34      	ite	cc
 8005b86:	2001      	movcc	r0, #1
 8005b88:	2000      	movcs	r0, #0
 8005b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005b8e:	bf00      	nop

08005b90 <__aeabi_fcmple>:
 8005b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005b94:	f7ff ffe0 	bl	8005b58 <__aeabi_cfcmpeq>
 8005b98:	bf94      	ite	ls
 8005b9a:	2001      	movls	r0, #1
 8005b9c:	2000      	movhi	r0, #0
 8005b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005ba2:	bf00      	nop

08005ba4 <__aeabi_fcmpge>:
 8005ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005ba8:	f7ff ffd2 	bl	8005b50 <__aeabi_cfrcmple>
 8005bac:	bf94      	ite	ls
 8005bae:	2001      	movls	r0, #1
 8005bb0:	2000      	movhi	r0, #0
 8005bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bb6:	bf00      	nop

08005bb8 <__aeabi_fcmpgt>:
 8005bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005bbc:	f7ff ffc8 	bl	8005b50 <__aeabi_cfrcmple>
 8005bc0:	bf34      	ite	cc
 8005bc2:	2001      	movcc	r0, #1
 8005bc4:	2000      	movcs	r0, #0
 8005bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8005bca:	bf00      	nop

08005bcc <__aeabi_f2iz>:
 8005bcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8005bd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8005bd4:	d30f      	bcc.n	8005bf6 <__aeabi_f2iz+0x2a>
 8005bd6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8005bda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8005bde:	d90d      	bls.n	8005bfc <__aeabi_f2iz+0x30>
 8005be0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8005be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005be8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8005bec:	fa23 f002 	lsr.w	r0, r3, r2
 8005bf0:	bf18      	it	ne
 8005bf2:	4240      	negne	r0, r0
 8005bf4:	4770      	bx	lr
 8005bf6:	f04f 0000 	mov.w	r0, #0
 8005bfa:	4770      	bx	lr
 8005bfc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8005c00:	d101      	bne.n	8005c06 <__aeabi_f2iz+0x3a>
 8005c02:	0242      	lsls	r2, r0, #9
 8005c04:	d105      	bne.n	8005c12 <__aeabi_f2iz+0x46>
 8005c06:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8005c0a:	bf08      	it	eq
 8005c0c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8005c10:	4770      	bx	lr
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	4770      	bx	lr

08005c18 <selfrel_offset31>:
 8005c18:	6803      	ldr	r3, [r0, #0]
 8005c1a:	005a      	lsls	r2, r3, #1
 8005c1c:	bf4c      	ite	mi
 8005c1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005c22:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8005c26:	4418      	add	r0, r3
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop

08005c2c <search_EIT_table>:
 8005c2c:	b361      	cbz	r1, 8005c88 <search_EIT_table+0x5c>
 8005c2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c32:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8005c36:	4690      	mov	r8, r2
 8005c38:	4606      	mov	r6, r0
 8005c3a:	46d1      	mov	r9, sl
 8005c3c:	2700      	movs	r7, #0
 8005c3e:	eb07 0409 	add.w	r4, r7, r9
 8005c42:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8005c46:	1064      	asrs	r4, r4, #1
 8005c48:	00e5      	lsls	r5, r4, #3
 8005c4a:	1971      	adds	r1, r6, r5
 8005c4c:	4608      	mov	r0, r1
 8005c4e:	f7ff ffe3 	bl	8005c18 <selfrel_offset31>
 8005c52:	45a2      	cmp	sl, r4
 8005c54:	4683      	mov	fp, r0
 8005c56:	f105 0008 	add.w	r0, r5, #8
 8005c5a:	4430      	add	r0, r6
 8005c5c:	d009      	beq.n	8005c72 <search_EIT_table+0x46>
 8005c5e:	f7ff ffdb 	bl	8005c18 <selfrel_offset31>
 8005c62:	45c3      	cmp	fp, r8
 8005c64:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8005c68:	d805      	bhi.n	8005c76 <search_EIT_table+0x4a>
 8005c6a:	4540      	cmp	r0, r8
 8005c6c:	d209      	bcs.n	8005c82 <search_EIT_table+0x56>
 8005c6e:	1c67      	adds	r7, r4, #1
 8005c70:	e7e5      	b.n	8005c3e <search_EIT_table+0x12>
 8005c72:	45c3      	cmp	fp, r8
 8005c74:	d905      	bls.n	8005c82 <search_EIT_table+0x56>
 8005c76:	42a7      	cmp	r7, r4
 8005c78:	d002      	beq.n	8005c80 <search_EIT_table+0x54>
 8005c7a:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8005c7e:	e7de      	b.n	8005c3e <search_EIT_table+0x12>
 8005c80:	2100      	movs	r1, #0
 8005c82:	4608      	mov	r0, r1
 8005c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c88:	4608      	mov	r0, r1
 8005c8a:	4770      	bx	lr

08005c8c <__gnu_unwind_get_pr_addr>:
 8005c8c:	2801      	cmp	r0, #1
 8005c8e:	d007      	beq.n	8005ca0 <__gnu_unwind_get_pr_addr+0x14>
 8005c90:	2802      	cmp	r0, #2
 8005c92:	d007      	beq.n	8005ca4 <__gnu_unwind_get_pr_addr+0x18>
 8005c94:	4b04      	ldr	r3, [pc, #16]	; (8005ca8 <__gnu_unwind_get_pr_addr+0x1c>)
 8005c96:	2800      	cmp	r0, #0
 8005c98:	bf0c      	ite	eq
 8005c9a:	4618      	moveq	r0, r3
 8005c9c:	2000      	movne	r0, #0
 8005c9e:	4770      	bx	lr
 8005ca0:	4802      	ldr	r0, [pc, #8]	; (8005cac <__gnu_unwind_get_pr_addr+0x20>)
 8005ca2:	4770      	bx	lr
 8005ca4:	4802      	ldr	r0, [pc, #8]	; (8005cb0 <__gnu_unwind_get_pr_addr+0x24>)
 8005ca6:	4770      	bx	lr
 8005ca8:	080063a1 	.word	0x080063a1
 8005cac:	080063a5 	.word	0x080063a5
 8005cb0:	080063a9 	.word	0x080063a9

08005cb4 <get_eit_entry>:
 8005cb4:	b530      	push	{r4, r5, lr}
 8005cb6:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <get_eit_entry+0x98>)
 8005cb8:	b083      	sub	sp, #12
 8005cba:	4604      	mov	r4, r0
 8005cbc:	1e8d      	subs	r5, r1, #2
 8005cbe:	b37b      	cbz	r3, 8005d20 <get_eit_entry+0x6c>
 8005cc0:	a901      	add	r1, sp, #4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f3af 8000 	nop.w
 8005cc8:	b320      	cbz	r0, 8005d14 <get_eit_entry+0x60>
 8005cca:	9901      	ldr	r1, [sp, #4]
 8005ccc:	462a      	mov	r2, r5
 8005cce:	f7ff ffad 	bl	8005c2c <search_EIT_table>
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	b1f0      	cbz	r0, 8005d14 <get_eit_entry+0x60>
 8005cd6:	f7ff ff9f 	bl	8005c18 <selfrel_offset31>
 8005cda:	684b      	ldr	r3, [r1, #4]
 8005cdc:	64a0      	str	r0, [r4, #72]	; 0x48
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d012      	beq.n	8005d08 <get_eit_entry+0x54>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f101 0004 	add.w	r0, r1, #4
 8005ce8:	db21      	blt.n	8005d2e <get_eit_entry+0x7a>
 8005cea:	f7ff ff95 	bl	8005c18 <selfrel_offset31>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005cf2:	6523      	str	r3, [r4, #80]	; 0x50
 8005cf4:	6803      	ldr	r3, [r0, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	db1d      	blt.n	8005d36 <get_eit_entry+0x82>
 8005cfa:	f7ff ff8d 	bl	8005c18 <selfrel_offset31>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	6120      	str	r0, [r4, #16]
 8005d02:	4618      	mov	r0, r3
 8005d04:	b003      	add	sp, #12
 8005d06:	bd30      	pop	{r4, r5, pc}
 8005d08:	2300      	movs	r3, #0
 8005d0a:	6123      	str	r3, [r4, #16]
 8005d0c:	2305      	movs	r3, #5
 8005d0e:	4618      	mov	r0, r3
 8005d10:	b003      	add	sp, #12
 8005d12:	bd30      	pop	{r4, r5, pc}
 8005d14:	2300      	movs	r3, #0
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	2309      	movs	r3, #9
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	b003      	add	sp, #12
 8005d1e:	bd30      	pop	{r4, r5, pc}
 8005d20:	490b      	ldr	r1, [pc, #44]	; (8005d50 <get_eit_entry+0x9c>)
 8005d22:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <get_eit_entry+0xa0>)
 8005d24:	4608      	mov	r0, r1
 8005d26:	1a59      	subs	r1, r3, r1
 8005d28:	10c9      	asrs	r1, r1, #3
 8005d2a:	9101      	str	r1, [sp, #4]
 8005d2c:	e7ce      	b.n	8005ccc <get_eit_entry+0x18>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	64e0      	str	r0, [r4, #76]	; 0x4c
 8005d32:	6523      	str	r3, [r4, #80]	; 0x50
 8005d34:	e7de      	b.n	8005cf4 <get_eit_entry+0x40>
 8005d36:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8005d3a:	f7ff ffa7 	bl	8005c8c <__gnu_unwind_get_pr_addr>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	6120      	str	r0, [r4, #16]
 8005d42:	bf14      	ite	ne
 8005d44:	2300      	movne	r3, #0
 8005d46:	2309      	moveq	r3, #9
 8005d48:	e7db      	b.n	8005d02 <get_eit_entry+0x4e>
 8005d4a:	bf00      	nop
 8005d4c:	00000000 	.word	0x00000000
 8005d50:	080162e0 	.word	0x080162e0
 8005d54:	080164a0 	.word	0x080164a0

08005d58 <restore_non_core_regs>:
 8005d58:	6803      	ldr	r3, [r0, #0]
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	07da      	lsls	r2, r3, #31
 8005d5e:	4604      	mov	r4, r0
 8005d60:	d406      	bmi.n	8005d70 <restore_non_core_regs+0x18>
 8005d62:	079b      	lsls	r3, r3, #30
 8005d64:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8005d68:	d509      	bpl.n	8005d7e <restore_non_core_regs+0x26>
 8005d6a:	f000 fc5b 	bl	8006624 <__gnu_Unwind_Restore_VFP_D>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	0759      	lsls	r1, r3, #29
 8005d72:	d509      	bpl.n	8005d88 <restore_non_core_regs+0x30>
 8005d74:	071a      	lsls	r2, r3, #28
 8005d76:	d50e      	bpl.n	8005d96 <restore_non_core_regs+0x3e>
 8005d78:	06db      	lsls	r3, r3, #27
 8005d7a:	d513      	bpl.n	8005da4 <restore_non_core_regs+0x4c>
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	f000 fc49 	bl	8006614 <__gnu_Unwind_Restore_VFP>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	0759      	lsls	r1, r3, #29
 8005d86:	d4f5      	bmi.n	8005d74 <restore_non_core_regs+0x1c>
 8005d88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005d8c:	f000 fc52 	bl	8006634 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	071a      	lsls	r2, r3, #28
 8005d94:	d4f0      	bmi.n	8005d78 <restore_non_core_regs+0x20>
 8005d96:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8005d9a:	f000 fc53 	bl	8006644 <__gnu_Unwind_Restore_WMMXD>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	06db      	lsls	r3, r3, #27
 8005da2:	d4eb      	bmi.n	8005d7c <restore_non_core_regs+0x24>
 8005da4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8005da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dac:	f000 bc8e 	b.w	80066cc <__gnu_Unwind_Restore_WMMXC>

08005db0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8005db0:	6803      	ldr	r3, [r0, #0]
 8005db2:	b10b      	cbz	r3, 8005db8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8005db4:	4418      	add	r0, r3
 8005db6:	4770      	bx	lr
 8005db8:	4618      	mov	r0, r3
 8005dba:	4770      	bx	lr

08005dbc <__gnu_unwind_24bit.isra.1>:
 8005dbc:	2009      	movs	r0, #9
 8005dbe:	4770      	bx	lr

08005dc0 <_Unwind_DebugHook>:
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop

08005dc4 <unwind_phase2>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	460d      	mov	r5, r1
 8005dca:	e008      	b.n	8005dde <unwind_phase2+0x1a>
 8005dcc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	6162      	str	r2, [r4, #20]
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	462a      	mov	r2, r5
 8005dd6:	2001      	movs	r0, #1
 8005dd8:	4798      	blx	r3
 8005dda:	2808      	cmp	r0, #8
 8005ddc:	d108      	bne.n	8005df0 <unwind_phase2+0x2c>
 8005dde:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005de0:	4620      	mov	r0, r4
 8005de2:	f7ff ff67 	bl	8005cb4 <get_eit_entry>
 8005de6:	4606      	mov	r6, r0
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d0ef      	beq.n	8005dcc <unwind_phase2+0x8>
 8005dec:	f00a fccc 	bl	8010788 <abort>
 8005df0:	2807      	cmp	r0, #7
 8005df2:	d1fb      	bne.n	8005dec <unwind_phase2+0x28>
 8005df4:	4630      	mov	r0, r6
 8005df6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005df8:	f7ff ffe2 	bl	8005dc0 <_Unwind_DebugHook>
 8005dfc:	1d28      	adds	r0, r5, #4
 8005dfe:	f000 fbfd 	bl	80065fc <__restore_core_regs>
 8005e02:	bf00      	nop

08005e04 <unwind_phase2_forced>:
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	4606      	mov	r6, r0
 8005e0a:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8005e0e:	ad03      	add	r5, sp, #12
 8005e10:	1d0c      	adds	r4, r1, #4
 8005e12:	4617      	mov	r7, r2
 8005e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005e24:	ac02      	add	r4, sp, #8
 8005e26:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8005e2a:	f8d6 9018 	ldr.w	r9, [r6, #24]
 8005e2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005e32:	2300      	movs	r3, #0
 8005e34:	4630      	mov	r0, r6
 8005e36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	f7ff ff3b 	bl	8005cb4 <get_eit_entry>
 8005e3e:	4605      	mov	r5, r0
 8005e40:	2f00      	cmp	r7, #0
 8005e42:	bf14      	ite	ne
 8005e44:	270a      	movne	r7, #10
 8005e46:	2709      	moveq	r7, #9
 8005e48:	b17d      	cbz	r5, 8005e6a <unwind_phase2_forced+0x66>
 8005e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e4c:	f047 0110 	orr.w	r1, r7, #16
 8005e50:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005e54:	4632      	mov	r2, r6
 8005e56:	6463      	str	r3, [r4, #68]	; 0x44
 8005e58:	2001      	movs	r0, #1
 8005e5a:	4633      	mov	r3, r6
 8005e5c:	47c0      	blx	r8
 8005e5e:	bb78      	cbnz	r0, 8005ec0 <unwind_phase2_forced+0xbc>
 8005e60:	4628      	mov	r0, r5
 8005e62:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005e70:	6173      	str	r3, [r6, #20]
 8005e72:	4621      	mov	r1, r4
 8005e74:	a87a      	add	r0, sp, #488	; 0x1e8
 8005e76:	f00a fcc9 	bl	801080c <memcpy>
 8005e7a:	6933      	ldr	r3, [r6, #16]
 8005e7c:	aa7a      	add	r2, sp, #488	; 0x1e8
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4638      	mov	r0, r7
 8005e82:	4798      	blx	r3
 8005e84:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8005e86:	4682      	mov	sl, r0
 8005e88:	e88d 0210 	stmia.w	sp, {r4, r9}
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	6463      	str	r3, [r4, #68]	; 0x44
 8005e90:	4632      	mov	r2, r6
 8005e92:	4633      	mov	r3, r6
 8005e94:	2001      	movs	r0, #1
 8005e96:	47c0      	blx	r8
 8005e98:	b990      	cbnz	r0, 8005ec0 <unwind_phase2_forced+0xbc>
 8005e9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005e9e:	a97a      	add	r1, sp, #488	; 0x1e8
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f00a fcb3 	bl	801080c <memcpy>
 8005ea6:	f1ba 0f08 	cmp.w	sl, #8
 8005eaa:	d106      	bne.n	8005eba <unwind_phase2_forced+0xb6>
 8005eac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f7ff ff00 	bl	8005cb4 <get_eit_entry>
 8005eb4:	2709      	movs	r7, #9
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	e7c6      	b.n	8005e48 <unwind_phase2_forced+0x44>
 8005eba:	f1ba 0f07 	cmp.w	sl, #7
 8005ebe:	d004      	beq.n	8005eca <unwind_phase2_forced+0xc6>
 8005ec0:	2009      	movs	r0, #9
 8005ec2:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8005ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eca:	4628      	mov	r0, r5
 8005ecc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005ece:	f7ff ff77 	bl	8005dc0 <_Unwind_DebugHook>
 8005ed2:	a803      	add	r0, sp, #12
 8005ed4:	f000 fb92 	bl	80065fc <__restore_core_regs>

08005ed8 <_Unwind_GetCFA>:
 8005ed8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005eda:	4770      	bx	lr

08005edc <__gnu_Unwind_RaiseException>:
 8005edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ede:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005ee0:	b0f9      	sub	sp, #484	; 0x1e4
 8005ee2:	640b      	str	r3, [r1, #64]	; 0x40
 8005ee4:	1d0e      	adds	r6, r1, #4
 8005ee6:	ad01      	add	r5, sp, #4
 8005ee8:	460f      	mov	r7, r1
 8005eea:	4604      	mov	r4, r0
 8005eec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ef0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ef4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ef8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005efc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005f00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005f04:	9600      	str	r6, [sp, #0]
 8005f06:	e006      	b.n	8005f16 <__gnu_Unwind_RaiseException+0x3a>
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	466a      	mov	r2, sp
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4798      	blx	r3
 8005f10:	2808      	cmp	r0, #8
 8005f12:	4605      	mov	r5, r0
 8005f14:	d108      	bne.n	8005f28 <__gnu_Unwind_RaiseException+0x4c>
 8005f16:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7ff fecb 	bl	8005cb4 <get_eit_entry>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d0f2      	beq.n	8005f08 <__gnu_Unwind_RaiseException+0x2c>
 8005f22:	2009      	movs	r0, #9
 8005f24:	b079      	add	sp, #484	; 0x1e4
 8005f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f28:	4668      	mov	r0, sp
 8005f2a:	f7ff ff15 	bl	8005d58 <restore_non_core_regs>
 8005f2e:	2d06      	cmp	r5, #6
 8005f30:	d1f7      	bne.n	8005f22 <__gnu_Unwind_RaiseException+0x46>
 8005f32:	4639      	mov	r1, r7
 8005f34:	4620      	mov	r0, r4
 8005f36:	f7ff ff45 	bl	8005dc4 <unwind_phase2>
 8005f3a:	bf00      	nop

08005f3c <__gnu_Unwind_ForcedUnwind>:
 8005f3c:	b430      	push	{r4, r5}
 8005f3e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8005f40:	60c1      	str	r1, [r0, #12]
 8005f42:	6182      	str	r2, [r0, #24]
 8005f44:	4619      	mov	r1, r3
 8005f46:	641d      	str	r5, [r3, #64]	; 0x40
 8005f48:	2200      	movs	r2, #0
 8005f4a:	bc30      	pop	{r4, r5}
 8005f4c:	e75a      	b.n	8005e04 <unwind_phase2_forced>
 8005f4e:	bf00      	nop

08005f50 <__gnu_Unwind_Resume>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	6943      	ldr	r3, [r0, #20]
 8005f54:	68c6      	ldr	r6, [r0, #12]
 8005f56:	640b      	str	r3, [r1, #64]	; 0x40
 8005f58:	b126      	cbz	r6, 8005f64 <__gnu_Unwind_Resume+0x14>
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f7ff ff52 	bl	8005e04 <unwind_phase2_forced>
 8005f60:	f00a fc12 	bl	8010788 <abort>
 8005f64:	6903      	ldr	r3, [r0, #16]
 8005f66:	460a      	mov	r2, r1
 8005f68:	4604      	mov	r4, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	4601      	mov	r1, r0
 8005f6e:	2002      	movs	r0, #2
 8005f70:	4798      	blx	r3
 8005f72:	2807      	cmp	r0, #7
 8005f74:	d007      	beq.n	8005f86 <__gnu_Unwind_Resume+0x36>
 8005f76:	2808      	cmp	r0, #8
 8005f78:	d103      	bne.n	8005f82 <__gnu_Unwind_Resume+0x32>
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f7ff ff21 	bl	8005dc4 <unwind_phase2>
 8005f82:	f00a fc01 	bl	8010788 <abort>
 8005f86:	4630      	mov	r0, r6
 8005f88:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005f8a:	f7ff ff19 	bl	8005dc0 <_Unwind_DebugHook>
 8005f8e:	1d28      	adds	r0, r5, #4
 8005f90:	f000 fb34 	bl	80065fc <__restore_core_regs>

08005f94 <__gnu_Unwind_Resume_or_Rethrow>:
 8005f94:	68c2      	ldr	r2, [r0, #12]
 8005f96:	b12a      	cbz	r2, 8005fa4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8005f98:	b410      	push	{r4}
 8005f9a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	640c      	str	r4, [r1, #64]	; 0x40
 8005fa0:	bc10      	pop	{r4}
 8005fa2:	e72f      	b.n	8005e04 <unwind_phase2_forced>
 8005fa4:	e79a      	b.n	8005edc <__gnu_Unwind_RaiseException>
 8005fa6:	bf00      	nop

08005fa8 <_Unwind_Complete>:
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop

08005fac <_Unwind_DeleteException>:
 8005fac:	6883      	ldr	r3, [r0, #8]
 8005fae:	b113      	cbz	r3, 8005fb6 <_Unwind_DeleteException+0xa>
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	4718      	bx	r3
 8005fb6:	4770      	bx	lr

08005fb8 <_Unwind_VRS_Get>:
 8005fb8:	b500      	push	{lr}
 8005fba:	2904      	cmp	r1, #4
 8005fbc:	d807      	bhi.n	8005fce <_Unwind_VRS_Get+0x16>
 8005fbe:	e8df f001 	tbb	[pc, r1]
 8005fc2:	0903      	.short	0x0903
 8005fc4:	0906      	.short	0x0906
 8005fc6:	09          	.byte	0x09
 8005fc7:	00          	.byte	0x00
 8005fc8:	b90b      	cbnz	r3, 8005fce <_Unwind_VRS_Get+0x16>
 8005fca:	2a0f      	cmp	r2, #15
 8005fcc:	d905      	bls.n	8005fda <_Unwind_VRS_Get+0x22>
 8005fce:	2002      	movs	r0, #2
 8005fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fda:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005fde:	6852      	ldr	r2, [r2, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	9b01      	ldr	r3, [sp, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fea:	bf00      	nop

08005fec <_Unwind_GetGR>:
 8005fec:	b510      	push	{r4, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	ac03      	add	r4, sp, #12
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	9400      	str	r4, [sp, #0]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f7ff ffdd 	bl	8005fb8 <_Unwind_VRS_Get>
 8005ffe:	9803      	ldr	r0, [sp, #12]
 8006000:	b004      	add	sp, #16
 8006002:	bd10      	pop	{r4, pc}

08006004 <_Unwind_VRS_Set>:
 8006004:	b500      	push	{lr}
 8006006:	2904      	cmp	r1, #4
 8006008:	d807      	bhi.n	800601a <_Unwind_VRS_Set+0x16>
 800600a:	e8df f001 	tbb	[pc, r1]
 800600e:	0903      	.short	0x0903
 8006010:	0906      	.short	0x0906
 8006012:	09          	.byte	0x09
 8006013:	00          	.byte	0x00
 8006014:	b90b      	cbnz	r3, 800601a <_Unwind_VRS_Set+0x16>
 8006016:	2a0f      	cmp	r2, #15
 8006018:	d905      	bls.n	8006026 <_Unwind_VRS_Set+0x22>
 800601a:	2002      	movs	r0, #2
 800601c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006020:	2001      	movs	r0, #1
 8006022:	f85d fb04 	ldr.w	pc, [sp], #4
 8006026:	9901      	ldr	r1, [sp, #4]
 8006028:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800602c:	6809      	ldr	r1, [r1, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	6051      	str	r1, [r2, #4]
 8006032:	f85d fb04 	ldr.w	pc, [sp], #4
 8006036:	bf00      	nop

08006038 <_Unwind_SetGR>:
 8006038:	b510      	push	{r4, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	ac04      	add	r4, sp, #16
 800603e:	f844 2d04 	str.w	r2, [r4, #-4]!
 8006042:	2300      	movs	r3, #0
 8006044:	460a      	mov	r2, r1
 8006046:	9400      	str	r4, [sp, #0]
 8006048:	4619      	mov	r1, r3
 800604a:	f7ff ffdb 	bl	8006004 <_Unwind_VRS_Set>
 800604e:	b004      	add	sp, #16
 8006050:	bd10      	pop	{r4, pc}
 8006052:	bf00      	nop

08006054 <__gnu_Unwind_Backtrace>:
 8006054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006056:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006058:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800605c:	6413      	str	r3, [r2, #64]	; 0x40
 800605e:	1d15      	adds	r5, r2, #4
 8006060:	ac17      	add	r4, sp, #92	; 0x5c
 8006062:	4607      	mov	r7, r0
 8006064:	460e      	mov	r6, r1
 8006066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800606a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800606c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800606e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006072:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006076:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800607a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800607e:	9516      	str	r5, [sp, #88]	; 0x58
 8006080:	e011      	b.n	80060a6 <__gnu_Unwind_Backtrace+0x52>
 8006082:	a816      	add	r0, sp, #88	; 0x58
 8006084:	466a      	mov	r2, sp
 8006086:	f7ff ffd7 	bl	8006038 <_Unwind_SetGR>
 800608a:	4631      	mov	r1, r6
 800608c:	a816      	add	r0, sp, #88	; 0x58
 800608e:	47b8      	blx	r7
 8006090:	b980      	cbnz	r0, 80060b4 <__gnu_Unwind_Backtrace+0x60>
 8006092:	9b04      	ldr	r3, [sp, #16]
 8006094:	aa16      	add	r2, sp, #88	; 0x58
 8006096:	4669      	mov	r1, sp
 8006098:	2008      	movs	r0, #8
 800609a:	4798      	blx	r3
 800609c:	2805      	cmp	r0, #5
 800609e:	4604      	mov	r4, r0
 80060a0:	d009      	beq.n	80060b6 <__gnu_Unwind_Backtrace+0x62>
 80060a2:	2809      	cmp	r0, #9
 80060a4:	d006      	beq.n	80060b4 <__gnu_Unwind_Backtrace+0x60>
 80060a6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80060a8:	4668      	mov	r0, sp
 80060aa:	f7ff fe03 	bl	8005cb4 <get_eit_entry>
 80060ae:	210c      	movs	r1, #12
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d0e6      	beq.n	8006082 <__gnu_Unwind_Backtrace+0x2e>
 80060b4:	2409      	movs	r4, #9
 80060b6:	a816      	add	r0, sp, #88	; 0x58
 80060b8:	f7ff fe4e 	bl	8005d58 <restore_non_core_regs>
 80060bc:	4620      	mov	r0, r4
 80060be:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80060c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060c4 <__gnu_unwind_pr_common>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 80060ca:	4691      	mov	r9, r2
 80060cc:	6822      	ldr	r2, [r4, #0]
 80060ce:	b08b      	sub	sp, #44	; 0x2c
 80060d0:	3404      	adds	r4, #4
 80060d2:	460d      	mov	r5, r1
 80060d4:	9207      	str	r2, [sp, #28]
 80060d6:	9408      	str	r4, [sp, #32]
 80060d8:	f000 0b03 	and.w	fp, r0, #3
 80060dc:	461e      	mov	r6, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d164      	bne.n	80061ac <__gnu_unwind_pr_common+0xe8>
 80060e2:	0212      	lsls	r2, r2, #8
 80060e4:	2303      	movs	r3, #3
 80060e6:	9207      	str	r2, [sp, #28]
 80060e8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80060ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80060f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80060f2:	f1bb 0f02 	cmp.w	fp, #2
 80060f6:	bf08      	it	eq
 80060f8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80060fa:	f013 0301 	ands.w	r3, r3, #1
 80060fe:	d143      	bne.n	8006188 <__gnu_unwind_pr_common+0xc4>
 8006100:	f000 0008 	and.w	r0, r0, #8
 8006104:	b2c2      	uxtb	r2, r0
 8006106:	9203      	str	r2, [sp, #12]
 8006108:	9301      	str	r3, [sp, #4]
 800610a:	6827      	ldr	r7, [r4, #0]
 800610c:	2f00      	cmp	r7, #0
 800610e:	d03d      	beq.n	800618c <__gnu_unwind_pr_common+0xc8>
 8006110:	2e02      	cmp	r6, #2
 8006112:	d047      	beq.n	80061a4 <__gnu_unwind_pr_common+0xe0>
 8006114:	8827      	ldrh	r7, [r4, #0]
 8006116:	f8b4 8002 	ldrh.w	r8, [r4, #2]
 800611a:	3404      	adds	r4, #4
 800611c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800611e:	f028 0a01 	bic.w	sl, r8, #1
 8006122:	210f      	movs	r1, #15
 8006124:	4648      	mov	r0, r9
 8006126:	449a      	add	sl, r3
 8006128:	f7ff ff60 	bl	8005fec <_Unwind_GetGR>
 800612c:	4582      	cmp	sl, r0
 800612e:	d837      	bhi.n	80061a0 <__gnu_unwind_pr_common+0xdc>
 8006130:	f027 0301 	bic.w	r3, r7, #1
 8006134:	449a      	add	sl, r3
 8006136:	4550      	cmp	r0, sl
 8006138:	bf2c      	ite	cs
 800613a:	2000      	movcs	r0, #0
 800613c:	2001      	movcc	r0, #1
 800613e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8006142:	f008 0802 	and.w	r8, r8, #2
 8006146:	f007 0701 	and.w	r7, r7, #1
 800614a:	ea48 0807 	orr.w	r8, r8, r7
 800614e:	f1b8 0f01 	cmp.w	r8, #1
 8006152:	d041      	beq.n	80061d8 <__gnu_unwind_pr_common+0x114>
 8006154:	d338      	bcc.n	80061c8 <__gnu_unwind_pr_common+0x104>
 8006156:	f1b8 0f02 	cmp.w	r8, #2
 800615a:	d11d      	bne.n	8006198 <__gnu_unwind_pr_common+0xd4>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006162:	9202      	str	r2, [sp, #8]
 8006164:	f1bb 0f00 	cmp.w	fp, #0
 8006168:	d179      	bne.n	800625e <__gnu_unwind_pr_common+0x19a>
 800616a:	b130      	cbz	r0, 800617a <__gnu_unwind_pr_common+0xb6>
 800616c:	9903      	ldr	r1, [sp, #12]
 800616e:	2900      	cmp	r1, #0
 8006170:	f000 8081 	beq.w	8006276 <__gnu_unwind_pr_common+0x1b2>
 8006174:	2a00      	cmp	r2, #0
 8006176:	f000 80a8 	beq.w	80062ca <__gnu_unwind_pr_common+0x206>
 800617a:	2b00      	cmp	r3, #0
 800617c:	db79      	blt.n	8006272 <__gnu_unwind_pr_common+0x1ae>
 800617e:	9b02      	ldr	r3, [sp, #8]
 8006180:	3301      	adds	r3, #1
 8006182:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006186:	e7c0      	b.n	800610a <__gnu_unwind_pr_common+0x46>
 8006188:	2300      	movs	r3, #0
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	2e02      	cmp	r6, #2
 800618e:	dd40      	ble.n	8006212 <__gnu_unwind_pr_common+0x14e>
 8006190:	f7ff fe14 	bl	8005dbc <__gnu_unwind_24bit.isra.1>
 8006194:	2800      	cmp	r0, #0
 8006196:	d042      	beq.n	800621e <__gnu_unwind_pr_common+0x15a>
 8006198:	2009      	movs	r0, #9
 800619a:	b00b      	add	sp, #44	; 0x2c
 800619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a0:	2000      	movs	r0, #0
 80061a2:	e7cc      	b.n	800613e <__gnu_unwind_pr_common+0x7a>
 80061a4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80061a8:	3408      	adds	r4, #8
 80061aa:	e7b7      	b.n	800611c <__gnu_unwind_pr_common+0x58>
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	dc9f      	bgt.n	80060f0 <__gnu_unwind_pr_common+0x2c>
 80061b0:	0c13      	lsrs	r3, r2, #16
 80061b2:	b2d9      	uxtb	r1, r3
 80061b4:	0412      	lsls	r2, r2, #16
 80061b6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80061ba:	2302      	movs	r3, #2
 80061bc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80061c0:	9207      	str	r2, [sp, #28]
 80061c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80061c6:	e793      	b.n	80060f0 <__gnu_unwind_pr_common+0x2c>
 80061c8:	f1bb 0f00 	cmp.w	fp, #0
 80061cc:	d002      	beq.n	80061d4 <__gnu_unwind_pr_common+0x110>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	f040 80b0 	bne.w	8006334 <__gnu_unwind_pr_common+0x270>
 80061d4:	3404      	adds	r4, #4
 80061d6:	e798      	b.n	800610a <__gnu_unwind_pr_common+0x46>
 80061d8:	f1bb 0f00 	cmp.w	fp, #0
 80061dc:	d126      	bne.n	800622c <__gnu_unwind_pr_common+0x168>
 80061de:	b1b0      	cbz	r0, 800620e <__gnu_unwind_pr_common+0x14a>
 80061e0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80061e4:	1c99      	adds	r1, r3, #2
 80061e6:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80061ea:	d0d5      	beq.n	8006198 <__gnu_unwind_pr_common+0xd4>
 80061ec:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80061f0:	3301      	adds	r3, #1
 80061f2:	9106      	str	r1, [sp, #24]
 80061f4:	f000 8094 	beq.w	8006320 <__gnu_unwind_pr_common+0x25c>
 80061f8:	1d20      	adds	r0, r4, #4
 80061fa:	f7ff fdd9 	bl	8005db0 <_Unwind_decode_typeinfo_ptr.isra.0>
 80061fe:	ab06      	add	r3, sp, #24
 8006200:	4601      	mov	r1, r0
 8006202:	4628      	mov	r0, r5
 8006204:	f00b fba4 	bl	8011950 <__cxa_type_match>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 80b8 	bne.w	800637e <__gnu_unwind_pr_common+0x2ba>
 800620e:	3408      	adds	r4, #8
 8006210:	e77b      	b.n	800610a <__gnu_unwind_pr_common+0x46>
 8006212:	a907      	add	r1, sp, #28
 8006214:	4648      	mov	r0, r9
 8006216:	f000 faf3 	bl	8006800 <__gnu_unwind_execute>
 800621a:	2800      	cmp	r0, #0
 800621c:	d1bc      	bne.n	8006198 <__gnu_unwind_pr_common+0xd4>
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d15c      	bne.n	80062de <__gnu_unwind_pr_common+0x21a>
 8006224:	2008      	movs	r0, #8
 8006226:	b00b      	add	sp, #44	; 0x2c
 8006228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622c:	210d      	movs	r1, #13
 800622e:	4648      	mov	r0, r9
 8006230:	6a2f      	ldr	r7, [r5, #32]
 8006232:	f7ff fedb 	bl	8005fec <_Unwind_GetGR>
 8006236:	4287      	cmp	r7, r0
 8006238:	d1e9      	bne.n	800620e <__gnu_unwind_pr_common+0x14a>
 800623a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800623c:	429c      	cmp	r4, r3
 800623e:	d1e6      	bne.n	800620e <__gnu_unwind_pr_common+0x14a>
 8006240:	4620      	mov	r0, r4
 8006242:	f7ff fce9 	bl	8005c18 <selfrel_offset31>
 8006246:	210f      	movs	r1, #15
 8006248:	4602      	mov	r2, r0
 800624a:	4648      	mov	r0, r9
 800624c:	f7ff fef4 	bl	8006038 <_Unwind_SetGR>
 8006250:	4648      	mov	r0, r9
 8006252:	462a      	mov	r2, r5
 8006254:	2100      	movs	r1, #0
 8006256:	f7ff feef 	bl	8006038 <_Unwind_SetGR>
 800625a:	2007      	movs	r0, #7
 800625c:	e79d      	b.n	800619a <__gnu_unwind_pr_common+0xd6>
 800625e:	210d      	movs	r1, #13
 8006260:	4648      	mov	r0, r9
 8006262:	6a2f      	ldr	r7, [r5, #32]
 8006264:	f7ff fec2 	bl	8005fec <_Unwind_GetGR>
 8006268:	4287      	cmp	r7, r0
 800626a:	d048      	beq.n	80062fe <__gnu_unwind_pr_common+0x23a>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	da85      	bge.n	800617e <__gnu_unwind_pr_common+0xba>
 8006272:	3404      	adds	r4, #4
 8006274:	e783      	b.n	800617e <__gnu_unwind_pr_common+0xba>
 8006276:	9b02      	ldr	r3, [sp, #8]
 8006278:	b33b      	cbz	r3, 80062ca <__gnu_unwind_pr_common+0x206>
 800627a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800627e:	1d27      	adds	r7, r4, #4
 8006280:	f8cd b010 	str.w	fp, [sp, #16]
 8006284:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006288:	46a3      	mov	fp, r4
 800628a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800628e:	461c      	mov	r4, r3
 8006290:	9605      	str	r6, [sp, #20]
 8006292:	e002      	b.n	800629a <__gnu_unwind_pr_common+0x1d6>
 8006294:	45b2      	cmp	sl, r6
 8006296:	46b0      	mov	r8, r6
 8006298:	d016      	beq.n	80062c8 <__gnu_unwind_pr_common+0x204>
 800629a:	4638      	mov	r0, r7
 800629c:	9406      	str	r4, [sp, #24]
 800629e:	f7ff fd87 	bl	8005db0 <_Unwind_decode_typeinfo_ptr.isra.0>
 80062a2:	ab06      	add	r3, sp, #24
 80062a4:	4601      	mov	r1, r0
 80062a6:	2200      	movs	r2, #0
 80062a8:	4628      	mov	r0, r5
 80062aa:	f00b fb51 	bl	8011950 <__cxa_type_match>
 80062ae:	f108 0601 	add.w	r6, r8, #1
 80062b2:	3704      	adds	r7, #4
 80062b4:	2800      	cmp	r0, #0
 80062b6:	d0ed      	beq.n	8006294 <__gnu_unwind_pr_common+0x1d0>
 80062b8:	9b02      	ldr	r3, [sp, #8]
 80062ba:	465c      	mov	r4, fp
 80062bc:	4543      	cmp	r3, r8
 80062be:	f8dd b010 	ldr.w	fp, [sp, #16]
 80062c2:	9e05      	ldr	r6, [sp, #20]
 80062c4:	d1d2      	bne.n	800626c <__gnu_unwind_pr_common+0x1a8>
 80062c6:	e000      	b.n	80062ca <__gnu_unwind_pr_common+0x206>
 80062c8:	465c      	mov	r4, fp
 80062ca:	4648      	mov	r0, r9
 80062cc:	210d      	movs	r1, #13
 80062ce:	f7ff fe8d 	bl	8005fec <_Unwind_GetGR>
 80062d2:	9b06      	ldr	r3, [sp, #24]
 80062d4:	6228      	str	r0, [r5, #32]
 80062d6:	62ac      	str	r4, [r5, #40]	; 0x28
 80062d8:	626b      	str	r3, [r5, #36]	; 0x24
 80062da:	2006      	movs	r0, #6
 80062dc:	e75d      	b.n	800619a <__gnu_unwind_pr_common+0xd6>
 80062de:	210f      	movs	r1, #15
 80062e0:	4648      	mov	r0, r9
 80062e2:	f7ff fe83 	bl	8005fec <_Unwind_GetGR>
 80062e6:	210e      	movs	r1, #14
 80062e8:	4602      	mov	r2, r0
 80062ea:	4648      	mov	r0, r9
 80062ec:	f7ff fea4 	bl	8006038 <_Unwind_SetGR>
 80062f0:	4648      	mov	r0, r9
 80062f2:	4a2a      	ldr	r2, [pc, #168]	; (800639c <__gnu_unwind_pr_common+0x2d8>)
 80062f4:	210f      	movs	r1, #15
 80062f6:	f7ff fe9f 	bl	8006038 <_Unwind_SetGR>
 80062fa:	2007      	movs	r0, #7
 80062fc:	e74d      	b.n	800619a <__gnu_unwind_pr_common+0xd6>
 80062fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006300:	429c      	cmp	r4, r3
 8006302:	d1b3      	bne.n	800626c <__gnu_unwind_pr_common+0x1a8>
 8006304:	2204      	movs	r2, #4
 8006306:	9902      	ldr	r1, [sp, #8]
 8006308:	2700      	movs	r7, #0
 800630a:	18a3      	adds	r3, r4, r2
 800630c:	62a9      	str	r1, [r5, #40]	; 0x28
 800630e:	62ef      	str	r7, [r5, #44]	; 0x2c
 8006310:	632a      	str	r2, [r5, #48]	; 0x30
 8006312:	636b      	str	r3, [r5, #52]	; 0x34
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	42bb      	cmp	r3, r7
 8006318:	db1f      	blt.n	800635a <__gnu_unwind_pr_common+0x296>
 800631a:	2301      	movs	r3, #1
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	e72e      	b.n	800617e <__gnu_unwind_pr_common+0xba>
 8006320:	4648      	mov	r0, r9
 8006322:	210d      	movs	r1, #13
 8006324:	f7ff fe62 	bl	8005fec <_Unwind_GetGR>
 8006328:	6228      	str	r0, [r5, #32]
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	626b      	str	r3, [r5, #36]	; 0x24
 800632e:	62ac      	str	r4, [r5, #40]	; 0x28
 8006330:	2006      	movs	r0, #6
 8006332:	e732      	b.n	800619a <__gnu_unwind_pr_common+0xd6>
 8006334:	4620      	mov	r0, r4
 8006336:	f7ff fc6f 	bl	8005c18 <selfrel_offset31>
 800633a:	3404      	adds	r4, #4
 800633c:	4606      	mov	r6, r0
 800633e:	63ac      	str	r4, [r5, #56]	; 0x38
 8006340:	4628      	mov	r0, r5
 8006342:	f00b fb61 	bl	8011a08 <__cxa_begin_cleanup>
 8006346:	2800      	cmp	r0, #0
 8006348:	f43f af26 	beq.w	8006198 <__gnu_unwind_pr_common+0xd4>
 800634c:	4648      	mov	r0, r9
 800634e:	4632      	mov	r2, r6
 8006350:	210f      	movs	r1, #15
 8006352:	f7ff fe71 	bl	8006038 <_Unwind_SetGR>
 8006356:	2007      	movs	r0, #7
 8006358:	e71f      	b.n	800619a <__gnu_unwind_pr_common+0xd6>
 800635a:	4608      	mov	r0, r1
 800635c:	3001      	adds	r0, #1
 800635e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8006362:	f7ff fc59 	bl	8005c18 <selfrel_offset31>
 8006366:	210f      	movs	r1, #15
 8006368:	4602      	mov	r2, r0
 800636a:	4648      	mov	r0, r9
 800636c:	f7ff fe64 	bl	8006038 <_Unwind_SetGR>
 8006370:	4648      	mov	r0, r9
 8006372:	462a      	mov	r2, r5
 8006374:	4639      	mov	r1, r7
 8006376:	f7ff fe5f 	bl	8006038 <_Unwind_SetGR>
 800637a:	2007      	movs	r0, #7
 800637c:	e70d      	b.n	800619a <__gnu_unwind_pr_common+0xd6>
 800637e:	4607      	mov	r7, r0
 8006380:	210d      	movs	r1, #13
 8006382:	4648      	mov	r0, r9
 8006384:	f7ff fe32 	bl	8005fec <_Unwind_GetGR>
 8006388:	2f02      	cmp	r7, #2
 800638a:	6228      	str	r0, [r5, #32]
 800638c:	d1cd      	bne.n	800632a <__gnu_unwind_pr_common+0x266>
 800638e:	462b      	mov	r3, r5
 8006390:	9a06      	ldr	r2, [sp, #24]
 8006392:	f843 2f2c 	str.w	r2, [r3, #44]!
 8006396:	626b      	str	r3, [r5, #36]	; 0x24
 8006398:	e7c9      	b.n	800632e <__gnu_unwind_pr_common+0x26a>
 800639a:	bf00      	nop
 800639c:	08011bd5 	.word	0x08011bd5

080063a0 <__aeabi_unwind_cpp_pr0>:
 80063a0:	2300      	movs	r3, #0
 80063a2:	e68f      	b.n	80060c4 <__gnu_unwind_pr_common>

080063a4 <__aeabi_unwind_cpp_pr1>:
 80063a4:	2301      	movs	r3, #1
 80063a6:	e68d      	b.n	80060c4 <__gnu_unwind_pr_common>

080063a8 <__aeabi_unwind_cpp_pr2>:
 80063a8:	2302      	movs	r3, #2
 80063aa:	e68b      	b.n	80060c4 <__gnu_unwind_pr_common>

080063ac <_Unwind_VRS_Pop>:
 80063ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ae:	4604      	mov	r4, r0
 80063b0:	b0c5      	sub	sp, #276	; 0x114
 80063b2:	2904      	cmp	r1, #4
 80063b4:	d80d      	bhi.n	80063d2 <_Unwind_VRS_Pop+0x26>
 80063b6:	e8df f001 	tbb	[pc, r1]
 80063ba:	0357      	.short	0x0357
 80063bc:	310c      	.short	0x310c
 80063be:	0f          	.byte	0x0f
 80063bf:	00          	.byte	0x00
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80063c6:	b295      	uxth	r5, r2
 80063c8:	d166      	bne.n	8006498 <_Unwind_VRS_Pop+0xec>
 80063ca:	1972      	adds	r2, r6, r5
 80063cc:	2a10      	cmp	r2, #16
 80063ce:	f240 809f 	bls.w	8006510 <_Unwind_VRS_Pop+0x164>
 80063d2:	2002      	movs	r0, #2
 80063d4:	b045      	add	sp, #276	; 0x114
 80063d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1fa      	bne.n	80063d2 <_Unwind_VRS_Pop+0x26>
 80063dc:	2a10      	cmp	r2, #16
 80063de:	d8f8      	bhi.n	80063d2 <_Unwind_VRS_Pop+0x26>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	06d8      	lsls	r0, r3, #27
 80063e4:	f100 80c9 	bmi.w	800657a <_Unwind_VRS_Pop+0x1ce>
 80063e8:	ae22      	add	r6, sp, #136	; 0x88
 80063ea:	4630      	mov	r0, r6
 80063ec:	9201      	str	r2, [sp, #4]
 80063ee:	f000 f977 	bl	80066e0 <__gnu_Unwind_Save_WMMXC>
 80063f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063f4:	9a01      	ldr	r2, [sp, #4]
 80063f6:	2300      	movs	r3, #0
 80063f8:	2501      	movs	r5, #1
 80063fa:	fa05 f103 	lsl.w	r1, r5, r3
 80063fe:	4211      	tst	r1, r2
 8006400:	d003      	beq.n	800640a <_Unwind_VRS_Pop+0x5e>
 8006402:	6801      	ldr	r1, [r0, #0]
 8006404:	3004      	adds	r0, #4
 8006406:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800640a:	3301      	adds	r3, #1
 800640c:	2b04      	cmp	r3, #4
 800640e:	d1f4      	bne.n	80063fa <_Unwind_VRS_Pop+0x4e>
 8006410:	63a0      	str	r0, [r4, #56]	; 0x38
 8006412:	4630      	mov	r0, r6
 8006414:	f000 f95a 	bl	80066cc <__gnu_Unwind_Restore_WMMXC>
 8006418:	2000      	movs	r0, #0
 800641a:	e7db      	b.n	80063d4 <_Unwind_VRS_Pop+0x28>
 800641c:	2b03      	cmp	r3, #3
 800641e:	d1d8      	bne.n	80063d2 <_Unwind_VRS_Pop+0x26>
 8006420:	0c15      	lsrs	r5, r2, #16
 8006422:	b297      	uxth	r7, r2
 8006424:	19eb      	adds	r3, r5, r7
 8006426:	2b10      	cmp	r3, #16
 8006428:	d8d3      	bhi.n	80063d2 <_Unwind_VRS_Pop+0x26>
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	071e      	lsls	r6, r3, #28
 800642e:	f100 80b8 	bmi.w	80065a2 <_Unwind_VRS_Pop+0x1f6>
 8006432:	ae22      	add	r6, sp, #136	; 0x88
 8006434:	4630      	mov	r0, r6
 8006436:	007f      	lsls	r7, r7, #1
 8006438:	f000 f926 	bl	8006688 <__gnu_Unwind_Save_WMMXD>
 800643c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8006440:	1e7b      	subs	r3, r7, #1
 8006442:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006444:	b157      	cbz	r7, 800645c <_Unwind_VRS_Pop+0xb0>
 8006446:	4629      	mov	r1, r5
 8006448:	3a04      	subs	r2, #4
 800644a:	f851 0b04 	ldr.w	r0, [r1], #4
 800644e:	3b01      	subs	r3, #1
 8006450:	f842 0f04 	str.w	r0, [r2, #4]!
 8006454:	1c58      	adds	r0, r3, #1
 8006456:	d1f8      	bne.n	800644a <_Unwind_VRS_Pop+0x9e>
 8006458:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800645c:	4630      	mov	r0, r6
 800645e:	63a5      	str	r5, [r4, #56]	; 0x38
 8006460:	f000 f8f0 	bl	8006644 <__gnu_Unwind_Restore_WMMXD>
 8006464:	2000      	movs	r0, #0
 8006466:	e7b5      	b.n	80063d4 <_Unwind_VRS_Pop+0x28>
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1b2      	bne.n	80063d2 <_Unwind_VRS_Pop+0x26>
 800646c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800646e:	b297      	uxth	r7, r2
 8006470:	1d20      	adds	r0, r4, #4
 8006472:	2601      	movs	r6, #1
 8006474:	fa06 f103 	lsl.w	r1, r6, r3
 8006478:	4239      	tst	r1, r7
 800647a:	f103 0301 	add.w	r3, r3, #1
 800647e:	d002      	beq.n	8006486 <_Unwind_VRS_Pop+0xda>
 8006480:	6829      	ldr	r1, [r5, #0]
 8006482:	3504      	adds	r5, #4
 8006484:	6001      	str	r1, [r0, #0]
 8006486:	2b10      	cmp	r3, #16
 8006488:	f100 0004 	add.w	r0, r0, #4
 800648c:	d1f2      	bne.n	8006474 <_Unwind_VRS_Pop+0xc8>
 800648e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8006492:	d13b      	bne.n	800650c <_Unwind_VRS_Pop+0x160>
 8006494:	63a5      	str	r5, [r4, #56]	; 0x38
 8006496:	e79d      	b.n	80063d4 <_Unwind_VRS_Pop+0x28>
 8006498:	2b05      	cmp	r3, #5
 800649a:	d19a      	bne.n	80063d2 <_Unwind_VRS_Pop+0x26>
 800649c:	1977      	adds	r7, r6, r5
 800649e:	2f20      	cmp	r7, #32
 80064a0:	d897      	bhi.n	80063d2 <_Unwind_VRS_Pop+0x26>
 80064a2:	2e0f      	cmp	r6, #15
 80064a4:	d965      	bls.n	8006572 <_Unwind_VRS_Pop+0x1c6>
 80064a6:	462f      	mov	r7, r5
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	d148      	bne.n	800653e <_Unwind_VRS_Pop+0x192>
 80064ac:	462a      	mov	r2, r5
 80064ae:	2700      	movs	r7, #0
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80064b4:	dd71      	ble.n	800659a <_Unwind_VRS_Pop+0x1ee>
 80064b6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80064ba:	4601      	mov	r1, r0
 80064bc:	a844      	add	r0, sp, #272	; 0x110
 80064be:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80064c2:	388c      	subs	r0, #140	; 0x8c
 80064c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80064c8:	4291      	cmp	r1, r2
 80064ca:	f840 5f04 	str.w	r5, [r0, #4]!
 80064ce:	d1f9      	bne.n	80064c4 <_Unwind_VRS_Pop+0x118>
 80064d0:	4608      	mov	r0, r1
 80064d2:	b197      	cbz	r7, 80064fa <_Unwind_VRS_Pop+0x14e>
 80064d4:	4632      	mov	r2, r6
 80064d6:	2e10      	cmp	r6, #16
 80064d8:	a944      	add	r1, sp, #272	; 0x110
 80064da:	bf38      	it	cc
 80064dc:	2210      	movcc	r2, #16
 80064de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80064e2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 80064e6:	0079      	lsls	r1, r7, #1
 80064e8:	3a04      	subs	r2, #4
 80064ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064ee:	f850 5b04 	ldr.w	r5, [r0], #4
 80064f2:	4281      	cmp	r1, r0
 80064f4:	f842 5f04 	str.w	r5, [r2, #4]!
 80064f8:	d1f9      	bne.n	80064ee <_Unwind_VRS_Pop+0x142>
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d047      	beq.n	800658e <_Unwind_VRS_Pop+0x1e2>
 80064fe:	2e0f      	cmp	r6, #15
 8006500:	63a1      	str	r1, [r4, #56]	; 0x38
 8006502:	d932      	bls.n	800656a <_Unwind_VRS_Pop+0x1be>
 8006504:	b117      	cbz	r7, 800650c <_Unwind_VRS_Pop+0x160>
 8006506:	a802      	add	r0, sp, #8
 8006508:	f000 f894 	bl	8006634 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800650c:	2000      	movs	r0, #0
 800650e:	e761      	b.n	80063d4 <_Unwind_VRS_Pop+0x28>
 8006510:	2e0f      	cmp	r6, #15
 8006512:	f63f af5e 	bhi.w	80063d2 <_Unwind_VRS_Pop+0x26>
 8006516:	2700      	movs	r7, #0
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	07d1      	lsls	r1, r2, #31
 800651c:	d50d      	bpl.n	800653a <_Unwind_VRS_Pop+0x18e>
 800651e:	f022 0101 	bic.w	r1, r2, #1
 8006522:	2b05      	cmp	r3, #5
 8006524:	6021      	str	r1, [r4, #0]
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	4620      	mov	r0, r4
 800652a:	d052      	beq.n	80065d2 <_Unwind_VRS_Pop+0x226>
 800652c:	f022 0203 	bic.w	r2, r2, #3
 8006530:	f840 2b48 	str.w	r2, [r0], #72
 8006534:	f000 f872 	bl	800661c <__gnu_Unwind_Save_VFP>
 8006538:	9b01      	ldr	r3, [sp, #4]
 800653a:	2f00      	cmp	r7, #0
 800653c:	d051      	beq.n	80065e2 <_Unwind_VRS_Pop+0x236>
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	0751      	lsls	r1, r2, #29
 8006542:	d436      	bmi.n	80065b2 <_Unwind_VRS_Pop+0x206>
 8006544:	2b01      	cmp	r3, #1
 8006546:	d03e      	beq.n	80065c6 <_Unwind_VRS_Pop+0x21a>
 8006548:	2e0f      	cmp	r6, #15
 800654a:	d806      	bhi.n	800655a <_Unwind_VRS_Pop+0x1ae>
 800654c:	a822      	add	r0, sp, #136	; 0x88
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	f000 f86c 	bl	800662c <__gnu_Unwind_Save_VFP_D>
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	2f00      	cmp	r7, #0
 8006558:	d0a8      	beq.n	80064ac <_Unwind_VRS_Pop+0x100>
 800655a:	a802      	add	r0, sp, #8
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	f000 f86d 	bl	800663c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8006562:	9b01      	ldr	r3, [sp, #4]
 8006564:	f1c6 0210 	rsb	r2, r6, #16
 8006568:	e7a2      	b.n	80064b0 <_Unwind_VRS_Pop+0x104>
 800656a:	a822      	add	r0, sp, #136	; 0x88
 800656c:	f000 f85a 	bl	8006624 <__gnu_Unwind_Restore_VFP_D>
 8006570:	e7c8      	b.n	8006504 <_Unwind_VRS_Pop+0x158>
 8006572:	2f10      	cmp	r7, #16
 8006574:	d9cf      	bls.n	8006516 <_Unwind_VRS_Pop+0x16a>
 8006576:	3f10      	subs	r7, #16
 8006578:	e7ce      	b.n	8006518 <_Unwind_VRS_Pop+0x16c>
 800657a:	f023 0310 	bic.w	r3, r3, #16
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8006584:	9201      	str	r2, [sp, #4]
 8006586:	f000 f8ab 	bl	80066e0 <__gnu_Unwind_Save_WMMXC>
 800658a:	9a01      	ldr	r2, [sp, #4]
 800658c:	e72c      	b.n	80063e8 <_Unwind_VRS_Pop+0x3c>
 800658e:	3104      	adds	r1, #4
 8006590:	63a1      	str	r1, [r4, #56]	; 0x38
 8006592:	a822      	add	r0, sp, #136	; 0x88
 8006594:	f000 f83e 	bl	8006614 <__gnu_Unwind_Restore_VFP>
 8006598:	e7b8      	b.n	800650c <_Unwind_VRS_Pop+0x160>
 800659a:	2f00      	cmp	r7, #0
 800659c:	d19a      	bne.n	80064d4 <_Unwind_VRS_Pop+0x128>
 800659e:	4601      	mov	r1, r0
 80065a0:	e7ab      	b.n	80064fa <_Unwind_VRS_Pop+0x14e>
 80065a2:	f023 0308 	bic.w	r3, r3, #8
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80065ac:	f000 f86c 	bl	8006688 <__gnu_Unwind_Save_WMMXD>
 80065b0:	e73f      	b.n	8006432 <_Unwind_VRS_Pop+0x86>
 80065b2:	4620      	mov	r0, r4
 80065b4:	f022 0204 	bic.w	r2, r2, #4
 80065b8:	f840 2bd0 	str.w	r2, [r0], #208
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	f000 f83d 	bl	800663c <__gnu_Unwind_Save_VFP_D_16_to_31>
 80065c2:	9b01      	ldr	r3, [sp, #4]
 80065c4:	e7be      	b.n	8006544 <_Unwind_VRS_Pop+0x198>
 80065c6:	a822      	add	r0, sp, #136	; 0x88
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	f000 f827 	bl	800661c <__gnu_Unwind_Save_VFP>
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	e7c8      	b.n	8006564 <_Unwind_VRS_Pop+0x1b8>
 80065d2:	f041 0102 	orr.w	r1, r1, #2
 80065d6:	f840 1b48 	str.w	r1, [r0], #72
 80065da:	f000 f827 	bl	800662c <__gnu_Unwind_Save_VFP_D>
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	e7ab      	b.n	800653a <_Unwind_VRS_Pop+0x18e>
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d003      	beq.n	80065ee <_Unwind_VRS_Pop+0x242>
 80065e6:	2e0f      	cmp	r6, #15
 80065e8:	f63f af60 	bhi.w	80064ac <_Unwind_VRS_Pop+0x100>
 80065ec:	e7ae      	b.n	800654c <_Unwind_VRS_Pop+0x1a0>
 80065ee:	a822      	add	r0, sp, #136	; 0x88
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	f000 f813 	bl	800661c <__gnu_Unwind_Save_VFP>
 80065f6:	9b01      	ldr	r3, [sp, #4]
 80065f8:	e758      	b.n	80064ac <_Unwind_VRS_Pop+0x100>
 80065fa:	bf00      	nop

080065fc <__restore_core_regs>:
 80065fc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8006600:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8006604:	469c      	mov	ip, r3
 8006606:	46a6      	mov	lr, r4
 8006608:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800660c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8006610:	46e5      	mov	sp, ip
 8006612:	bd00      	pop	{pc}

08006614 <__gnu_Unwind_Restore_VFP>:
 8006614:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop

0800661c <__gnu_Unwind_Save_VFP>:
 800661c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop

08006624 <__gnu_Unwind_Restore_VFP_D>:
 8006624:	ec90 0b20 	vldmia	r0, {d0-d15}
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop

0800662c <__gnu_Unwind_Save_VFP_D>:
 800662c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop

08006634 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8006634:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop

0800663c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800663c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop

08006644 <__gnu_Unwind_Restore_WMMXD>:
 8006644:	ecf0 0102 	ldfe	f0, [r0], #8
 8006648:	ecf0 1102 	ldfe	f1, [r0], #8
 800664c:	ecf0 2102 	ldfe	f2, [r0], #8
 8006650:	ecf0 3102 	ldfe	f3, [r0], #8
 8006654:	ecf0 4102 	ldfe	f4, [r0], #8
 8006658:	ecf0 5102 	ldfe	f5, [r0], #8
 800665c:	ecf0 6102 	ldfe	f6, [r0], #8
 8006660:	ecf0 7102 	ldfe	f7, [r0], #8
 8006664:	ecf0 8102 	ldfp	f0, [r0], #8
 8006668:	ecf0 9102 	ldfp	f1, [r0], #8
 800666c:	ecf0 a102 	ldfp	f2, [r0], #8
 8006670:	ecf0 b102 	ldfp	f3, [r0], #8
 8006674:	ecf0 c102 	ldfp	f4, [r0], #8
 8006678:	ecf0 d102 	ldfp	f5, [r0], #8
 800667c:	ecf0 e102 	ldfp	f6, [r0], #8
 8006680:	ecf0 f102 	ldfp	f7, [r0], #8
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop

08006688 <__gnu_Unwind_Save_WMMXD>:
 8006688:	ece0 0102 	stfe	f0, [r0], #8
 800668c:	ece0 1102 	stfe	f1, [r0], #8
 8006690:	ece0 2102 	stfe	f2, [r0], #8
 8006694:	ece0 3102 	stfe	f3, [r0], #8
 8006698:	ece0 4102 	stfe	f4, [r0], #8
 800669c:	ece0 5102 	stfe	f5, [r0], #8
 80066a0:	ece0 6102 	stfe	f6, [r0], #8
 80066a4:	ece0 7102 	stfe	f7, [r0], #8
 80066a8:	ece0 8102 	stfp	f0, [r0], #8
 80066ac:	ece0 9102 	stfp	f1, [r0], #8
 80066b0:	ece0 a102 	stfp	f2, [r0], #8
 80066b4:	ece0 b102 	stfp	f3, [r0], #8
 80066b8:	ece0 c102 	stfp	f4, [r0], #8
 80066bc:	ece0 d102 	stfp	f5, [r0], #8
 80066c0:	ece0 e102 	stfp	f6, [r0], #8
 80066c4:	ece0 f102 	stfp	f7, [r0], #8
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop

080066cc <__gnu_Unwind_Restore_WMMXC>:
 80066cc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80066d0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80066d4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80066d8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop

080066e0 <__gnu_Unwind_Save_WMMXC>:
 80066e0:	fca0 8101 	stc2	1, cr8, [r0], #4
 80066e4:	fca0 9101 	stc2	1, cr9, [r0], #4
 80066e8:	fca0 a101 	stc2	1, cr10, [r0], #4
 80066ec:	fca0 b101 	stc2	1, cr11, [r0], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop

080066f4 <_Unwind_RaiseException>:
 80066f4:	46ec      	mov	ip, sp
 80066f6:	b500      	push	{lr}
 80066f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80066fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006708:	a901      	add	r1, sp, #4
 800670a:	f7ff fbe7 	bl	8005edc <__gnu_Unwind_RaiseException>
 800670e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006712:	b012      	add	sp, #72	; 0x48
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop

08006718 <_Unwind_Resume>:
 8006718:	46ec      	mov	ip, sp
 800671a:	b500      	push	{lr}
 800671c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006720:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	e92d 000c 	stmdb	sp!, {r2, r3}
 800672c:	a901      	add	r1, sp, #4
 800672e:	f7ff fc0f 	bl	8005f50 <__gnu_Unwind_Resume>
 8006732:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006736:	b012      	add	sp, #72	; 0x48
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop

0800673c <_Unwind_Resume_or_Rethrow>:
 800673c:	46ec      	mov	ip, sp
 800673e:	b500      	push	{lr}
 8006740:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006744:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006750:	a901      	add	r1, sp, #4
 8006752:	f7ff fc1f 	bl	8005f94 <__gnu_Unwind_Resume_or_Rethrow>
 8006756:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800675a:	b012      	add	sp, #72	; 0x48
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop

08006760 <_Unwind_ForcedUnwind>:
 8006760:	46ec      	mov	ip, sp
 8006762:	b500      	push	{lr}
 8006764:	e92d 5000 	stmdb	sp!, {ip, lr}
 8006768:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006774:	ab01      	add	r3, sp, #4
 8006776:	f7ff fbe1 	bl	8005f3c <__gnu_Unwind_ForcedUnwind>
 800677a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800677e:	b012      	add	sp, #72	; 0x48
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop

08006784 <_Unwind_Backtrace>:
 8006784:	46ec      	mov	ip, sp
 8006786:	b500      	push	{lr}
 8006788:	e92d 5000 	stmdb	sp!, {ip, lr}
 800678c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	e92d 000c 	stmdb	sp!, {r2, r3}
 8006798:	aa01      	add	r2, sp, #4
 800679a:	f7ff fc5b 	bl	8006054 <__gnu_Unwind_Backtrace>
 800679e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80067a2:	b012      	add	sp, #72	; 0x48
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop

080067a8 <next_unwind_byte>:
 80067a8:	7a03      	ldrb	r3, [r0, #8]
 80067aa:	b91b      	cbnz	r3, 80067b4 <next_unwind_byte+0xc>
 80067ac:	7a43      	ldrb	r3, [r0, #9]
 80067ae:	b943      	cbnz	r3, 80067c2 <next_unwind_byte+0x1a>
 80067b0:	20b0      	movs	r0, #176	; 0xb0
 80067b2:	4770      	bx	lr
 80067b4:	1e5a      	subs	r2, r3, #1
 80067b6:	6803      	ldr	r3, [r0, #0]
 80067b8:	7202      	strb	r2, [r0, #8]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	6002      	str	r2, [r0, #0]
 80067be:	0e18      	lsrs	r0, r3, #24
 80067c0:	4770      	bx	lr
 80067c2:	6842      	ldr	r2, [r0, #4]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b410      	push	{r4}
 80067c8:	7243      	strb	r3, [r0, #9]
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	2103      	movs	r1, #3
 80067ce:	1d14      	adds	r4, r2, #4
 80067d0:	7201      	strb	r1, [r0, #8]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	6044      	str	r4, [r0, #4]
 80067d6:	6002      	str	r2, [r0, #0]
 80067d8:	bc10      	pop	{r4}
 80067da:	0e18      	lsrs	r0, r3, #24
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop

080067e0 <_Unwind_GetGR.constprop.0>:
 80067e0:	b500      	push	{lr}
 80067e2:	b085      	sub	sp, #20
 80067e4:	aa03      	add	r2, sp, #12
 80067e6:	2300      	movs	r3, #0
 80067e8:	9200      	str	r2, [sp, #0]
 80067ea:	4619      	mov	r1, r3
 80067ec:	220c      	movs	r2, #12
 80067ee:	f7ff fbe3 	bl	8005fb8 <_Unwind_VRS_Get>
 80067f2:	9803      	ldr	r0, [sp, #12]
 80067f4:	b005      	add	sp, #20
 80067f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80067fa:	bf00      	nop

080067fc <unwind_UCB_from_context>:
 80067fc:	e7f0      	b.n	80067e0 <_Unwind_GetGR.constprop.0>
 80067fe:	bf00      	nop

08006800 <__gnu_unwind_execute>:
 8006800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006804:	4606      	mov	r6, r0
 8006806:	460d      	mov	r5, r1
 8006808:	b085      	sub	sp, #20
 800680a:	f04f 0800 	mov.w	r8, #0
 800680e:	4628      	mov	r0, r5
 8006810:	f7ff ffca 	bl	80067a8 <next_unwind_byte>
 8006814:	28b0      	cmp	r0, #176	; 0xb0
 8006816:	4604      	mov	r4, r0
 8006818:	f000 80b4 	beq.w	8006984 <__gnu_unwind_execute+0x184>
 800681c:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
 8006820:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8006824:	d020      	beq.n	8006868 <__gnu_unwind_execute+0x68>
 8006826:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800682a:	2b80      	cmp	r3, #128	; 0x80
 800682c:	d07a      	beq.n	8006924 <__gnu_unwind_execute+0x124>
 800682e:	2b90      	cmp	r3, #144	; 0x90
 8006830:	d035      	beq.n	800689e <__gnu_unwind_execute+0x9e>
 8006832:	2ba0      	cmp	r3, #160	; 0xa0
 8006834:	d048      	beq.n	80068c8 <__gnu_unwind_execute+0xc8>
 8006836:	2bb0      	cmp	r3, #176	; 0xb0
 8006838:	d05c      	beq.n	80068f4 <__gnu_unwind_execute+0xf4>
 800683a:	2bc0      	cmp	r3, #192	; 0xc0
 800683c:	f000 8089 	beq.w	8006952 <__gnu_unwind_execute+0x152>
 8006840:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8006844:	2bd0      	cmp	r3, #208	; 0xd0
 8006846:	d10b      	bne.n	8006860 <__gnu_unwind_execute+0x60>
 8006848:	f000 0207 	and.w	r2, r0, #7
 800684c:	3201      	adds	r2, #1
 800684e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006852:	2305      	movs	r3, #5
 8006854:	2101      	movs	r1, #1
 8006856:	4630      	mov	r0, r6
 8006858:	f7ff fda8 	bl	80063ac <_Unwind_VRS_Pop>
 800685c:	2800      	cmp	r0, #0
 800685e:	d0d6      	beq.n	800680e <__gnu_unwind_execute+0xe>
 8006860:	2009      	movs	r0, #9
 8006862:	b005      	add	sp, #20
 8006864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006868:	f10d 090c 	add.w	r9, sp, #12
 800686c:	4619      	mov	r1, r3
 800686e:	0087      	lsls	r7, r0, #2
 8006870:	f8cd 9000 	str.w	r9, [sp]
 8006874:	220d      	movs	r2, #13
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff fb9e 	bl	8005fb8 <_Unwind_VRS_Get>
 800687c:	b2ff      	uxtb	r7, r7
 800687e:	9b03      	ldr	r3, [sp, #12]
 8006880:	3704      	adds	r7, #4
 8006882:	0660      	lsls	r0, r4, #25
 8006884:	bf4c      	ite	mi
 8006886:	1bdf      	submi	r7, r3, r7
 8006888:	18ff      	addpl	r7, r7, r3
 800688a:	2300      	movs	r3, #0
 800688c:	f8cd 9000 	str.w	r9, [sp]
 8006890:	4619      	mov	r1, r3
 8006892:	220d      	movs	r2, #13
 8006894:	4630      	mov	r0, r6
 8006896:	9703      	str	r7, [sp, #12]
 8006898:	f7ff fbb4 	bl	8006004 <_Unwind_VRS_Set>
 800689c:	e7b7      	b.n	800680e <__gnu_unwind_execute+0xe>
 800689e:	f000 030d 	and.w	r3, r0, #13
 80068a2:	2b0d      	cmp	r3, #13
 80068a4:	d0dc      	beq.n	8006860 <__gnu_unwind_execute+0x60>
 80068a6:	af03      	add	r7, sp, #12
 80068a8:	2300      	movs	r3, #0
 80068aa:	f000 020f 	and.w	r2, r0, #15
 80068ae:	4619      	mov	r1, r3
 80068b0:	9700      	str	r7, [sp, #0]
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff fb80 	bl	8005fb8 <_Unwind_VRS_Get>
 80068b8:	2300      	movs	r3, #0
 80068ba:	9700      	str	r7, [sp, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	220d      	movs	r2, #13
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7ff fb9f 	bl	8006004 <_Unwind_VRS_Set>
 80068c6:	e7a2      	b.n	800680e <__gnu_unwind_execute+0xe>
 80068c8:	43c2      	mvns	r2, r0
 80068ca:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 80068ce:	f002 0207 	and.w	r2, r2, #7
 80068d2:	fa43 f202 	asr.w	r2, r3, r2
 80068d6:	0701      	lsls	r1, r0, #28
 80068d8:	ea02 0203 	and.w	r2, r2, r3
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	bf48      	it	mi
 80068e2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80068e6:	4619      	mov	r1, r3
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff fd5f 	bl	80063ac <_Unwind_VRS_Pop>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d1b6      	bne.n	8006860 <__gnu_unwind_execute+0x60>
 80068f2:	e78c      	b.n	800680e <__gnu_unwind_execute+0xe>
 80068f4:	28b1      	cmp	r0, #177	; 0xb1
 80068f6:	d04a      	beq.n	800698e <__gnu_unwind_execute+0x18e>
 80068f8:	28b2      	cmp	r0, #178	; 0xb2
 80068fa:	d053      	beq.n	80069a4 <__gnu_unwind_execute+0x1a4>
 80068fc:	28b3      	cmp	r0, #179	; 0xb3
 80068fe:	f000 8081 	beq.w	8006a04 <__gnu_unwind_execute+0x204>
 8006902:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8006906:	2bb4      	cmp	r3, #180	; 0xb4
 8006908:	d0aa      	beq.n	8006860 <__gnu_unwind_execute+0x60>
 800690a:	f000 0207 	and.w	r2, r0, #7
 800690e:	3201      	adds	r2, #1
 8006910:	2301      	movs	r3, #1
 8006912:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006916:	4619      	mov	r1, r3
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff fd47 	bl	80063ac <_Unwind_VRS_Pop>
 800691e:	2800      	cmp	r0, #0
 8006920:	d19e      	bne.n	8006860 <__gnu_unwind_execute+0x60>
 8006922:	e774      	b.n	800680e <__gnu_unwind_execute+0xe>
 8006924:	4628      	mov	r0, r5
 8006926:	f7ff ff3f 	bl	80067a8 <next_unwind_byte>
 800692a:	0224      	lsls	r4, r4, #8
 800692c:	4320      	orrs	r0, r4
 800692e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006932:	d095      	beq.n	8006860 <__gnu_unwind_execute+0x60>
 8006934:	0104      	lsls	r4, r0, #4
 8006936:	2300      	movs	r3, #0
 8006938:	b2a2      	uxth	r2, r4
 800693a:	4619      	mov	r1, r3
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff fd35 	bl	80063ac <_Unwind_VRS_Pop>
 8006942:	2800      	cmp	r0, #0
 8006944:	d18c      	bne.n	8006860 <__gnu_unwind_execute+0x60>
 8006946:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 800694a:	bf18      	it	ne
 800694c:	f04f 0801 	movne.w	r8, #1
 8006950:	e75d      	b.n	800680e <__gnu_unwind_execute+0xe>
 8006952:	28c6      	cmp	r0, #198	; 0xc6
 8006954:	d062      	beq.n	8006a1c <__gnu_unwind_execute+0x21c>
 8006956:	28c7      	cmp	r0, #199	; 0xc7
 8006958:	d06c      	beq.n	8006a34 <__gnu_unwind_execute+0x234>
 800695a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800695e:	2bc0      	cmp	r3, #192	; 0xc0
 8006960:	d07b      	beq.n	8006a5a <__gnu_unwind_execute+0x25a>
 8006962:	28c8      	cmp	r0, #200	; 0xc8
 8006964:	f000 8091 	beq.w	8006a8a <__gnu_unwind_execute+0x28a>
 8006968:	28c9      	cmp	r0, #201	; 0xc9
 800696a:	f47f af79 	bne.w	8006860 <__gnu_unwind_execute+0x60>
 800696e:	4628      	mov	r0, r5
 8006970:	f7ff ff1a 	bl	80067a8 <next_unwind_byte>
 8006974:	0302      	lsls	r2, r0, #12
 8006976:	f000 000f 	and.w	r0, r0, #15
 800697a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800697e:	3001      	adds	r0, #1
 8006980:	4302      	orrs	r2, r0
 8006982:	e766      	b.n	8006852 <__gnu_unwind_execute+0x52>
 8006984:	f1b8 0f00 	cmp.w	r8, #0
 8006988:	d06e      	beq.n	8006a68 <__gnu_unwind_execute+0x268>
 800698a:	2000      	movs	r0, #0
 800698c:	e769      	b.n	8006862 <__gnu_unwind_execute+0x62>
 800698e:	4628      	mov	r0, r5
 8006990:	f7ff ff0a 	bl	80067a8 <next_unwind_byte>
 8006994:	4602      	mov	r2, r0
 8006996:	2800      	cmp	r0, #0
 8006998:	f43f af62 	beq.w	8006860 <__gnu_unwind_execute+0x60>
 800699c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80069a0:	d0b9      	beq.n	8006916 <__gnu_unwind_execute+0x116>
 80069a2:	e75d      	b.n	8006860 <__gnu_unwind_execute+0x60>
 80069a4:	2300      	movs	r3, #0
 80069a6:	f10d 090c 	add.w	r9, sp, #12
 80069aa:	220d      	movs	r2, #13
 80069ac:	4619      	mov	r1, r3
 80069ae:	f8cd 9000 	str.w	r9, [sp]
 80069b2:	4630      	mov	r0, r6
 80069b4:	f7ff fb00 	bl	8005fb8 <_Unwind_VRS_Get>
 80069b8:	4628      	mov	r0, r5
 80069ba:	f7ff fef5 	bl	80067a8 <next_unwind_byte>
 80069be:	0602      	lsls	r2, r0, #24
 80069c0:	f04f 0402 	mov.w	r4, #2
 80069c4:	d50c      	bpl.n	80069e0 <__gnu_unwind_execute+0x1e0>
 80069c6:	9b03      	ldr	r3, [sp, #12]
 80069c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80069cc:	40a0      	lsls	r0, r4
 80069ce:	4403      	add	r3, r0
 80069d0:	4628      	mov	r0, r5
 80069d2:	9303      	str	r3, [sp, #12]
 80069d4:	f7ff fee8 	bl	80067a8 <next_unwind_byte>
 80069d8:	0603      	lsls	r3, r0, #24
 80069da:	f104 0407 	add.w	r4, r4, #7
 80069de:	d4f2      	bmi.n	80069c6 <__gnu_unwind_execute+0x1c6>
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80069e6:	fa00 f204 	lsl.w	r2, r0, r4
 80069ea:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80069ee:	2300      	movs	r3, #0
 80069f0:	4414      	add	r4, r2
 80069f2:	f8cd 9000 	str.w	r9, [sp]
 80069f6:	4619      	mov	r1, r3
 80069f8:	220d      	movs	r2, #13
 80069fa:	4630      	mov	r0, r6
 80069fc:	9403      	str	r4, [sp, #12]
 80069fe:	f7ff fb01 	bl	8006004 <_Unwind_VRS_Set>
 8006a02:	e704      	b.n	800680e <__gnu_unwind_execute+0xe>
 8006a04:	4628      	mov	r0, r5
 8006a06:	f7ff fecf 	bl	80067a8 <next_unwind_byte>
 8006a0a:	0301      	lsls	r1, r0, #12
 8006a0c:	f000 000f 	and.w	r0, r0, #15
 8006a10:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8006a14:	1c42      	adds	r2, r0, #1
 8006a16:	2301      	movs	r3, #1
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	e77c      	b.n	8006916 <__gnu_unwind_execute+0x116>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	f7ff fec3 	bl	80067a8 <next_unwind_byte>
 8006a22:	0301      	lsls	r1, r0, #12
 8006a24:	f000 000f 	and.w	r0, r0, #15
 8006a28:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8006a2c:	1c42      	adds	r2, r0, #1
 8006a2e:	2303      	movs	r3, #3
 8006a30:	430a      	orrs	r2, r1
 8006a32:	e770      	b.n	8006916 <__gnu_unwind_execute+0x116>
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff feb7 	bl	80067a8 <next_unwind_byte>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f43f af0f 	beq.w	8006860 <__gnu_unwind_execute+0x60>
 8006a42:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8006a46:	f47f af0b 	bne.w	8006860 <__gnu_unwind_execute+0x60>
 8006a4a:	2104      	movs	r1, #4
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7ff fcad 	bl	80063ac <_Unwind_VRS_Pop>
 8006a52:	2800      	cmp	r0, #0
 8006a54:	f47f af04 	bne.w	8006860 <__gnu_unwind_execute+0x60>
 8006a58:	e6d9      	b.n	800680e <__gnu_unwind_execute+0xe>
 8006a5a:	f000 020f 	and.w	r2, r0, #15
 8006a5e:	3201      	adds	r2, #1
 8006a60:	2303      	movs	r3, #3
 8006a62:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8006a66:	e756      	b.n	8006916 <__gnu_unwind_execute+0x116>
 8006a68:	ac03      	add	r4, sp, #12
 8006a6a:	4643      	mov	r3, r8
 8006a6c:	220e      	movs	r2, #14
 8006a6e:	4641      	mov	r1, r8
 8006a70:	9400      	str	r4, [sp, #0]
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff faa0 	bl	8005fb8 <_Unwind_VRS_Get>
 8006a78:	9400      	str	r4, [sp, #0]
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	4643      	mov	r3, r8
 8006a7e:	220f      	movs	r2, #15
 8006a80:	4641      	mov	r1, r8
 8006a82:	f7ff fabf 	bl	8006004 <_Unwind_VRS_Set>
 8006a86:	4640      	mov	r0, r8
 8006a88:	e6eb      	b.n	8006862 <__gnu_unwind_execute+0x62>
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f7ff fe8c 	bl	80067a8 <next_unwind_byte>
 8006a90:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8006a94:	f000 030f 	and.w	r3, r0, #15
 8006a98:	3210      	adds	r2, #16
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8006aa0:	e6d7      	b.n	8006852 <__gnu_unwind_execute+0x52>
 8006aa2:	bf00      	nop

08006aa4 <__gnu_unwind_frame>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	2003      	movs	r0, #3
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	f88d 000c 	strb.w	r0, [sp, #12]
 8006ab2:	79dc      	ldrb	r4, [r3, #7]
 8006ab4:	0212      	lsls	r2, r2, #8
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	4608      	mov	r0, r1
 8006aba:	a901      	add	r1, sp, #4
 8006abc:	9201      	str	r2, [sp, #4]
 8006abe:	f88d 400d 	strb.w	r4, [sp, #13]
 8006ac2:	9302      	str	r3, [sp, #8]
 8006ac4:	f7ff fe9c 	bl	8006800 <__gnu_unwind_execute>
 8006ac8:	b004      	add	sp, #16
 8006aca:	bd10      	pop	{r4, pc}

08006acc <_Unwind_GetRegionStart>:
 8006acc:	b508      	push	{r3, lr}
 8006ace:	f7ff fe95 	bl	80067fc <unwind_UCB_from_context>
 8006ad2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8006ad4:	bd08      	pop	{r3, pc}
 8006ad6:	bf00      	nop

08006ad8 <_Unwind_GetLanguageSpecificData>:
 8006ad8:	b508      	push	{r3, lr}
 8006ada:	f7ff fe8f 	bl	80067fc <unwind_UCB_from_context>
 8006ade:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006ae0:	79d8      	ldrb	r0, [r3, #7]
 8006ae2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ae6:	3008      	adds	r0, #8
 8006ae8:	bd08      	pop	{r3, pc}
 8006aea:	bf00      	nop

08006aec <_Unwind_GetTextRelBase>:
 8006aec:	b508      	push	{r3, lr}
 8006aee:	f009 fe4b 	bl	8010788 <abort>
 8006af2:	bf00      	nop

08006af4 <_Unwind_GetDataRelBase>:
 8006af4:	b508      	push	{r3, lr}
 8006af6:	f7ff fff9 	bl	8006aec <_Unwind_GetTextRelBase>
 8006afa:	bf00      	nop

08006afc <strlen>:
 8006afc:	4603      	mov	r3, r0
 8006afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	d1fb      	bne.n	8006afe <strlen+0x2>
 8006b06:	1a18      	subs	r0, r3, r0
 8006b08:	3801      	subs	r0, #1
 8006b0a:	4770      	bx	lr

08006b0c <d_make_comp>:
 8006b0c:	b470      	push	{r4, r5, r6}
 8006b0e:	1e4c      	subs	r4, r1, #1
 8006b10:	2c4a      	cmp	r4, #74	; 0x4a
 8006b12:	d82c      	bhi.n	8006b6e <d_make_comp+0x62>
 8006b14:	e8df f004 	tbb	[pc, r4]
 8006b18:	3c3c3c3c 	.word	0x3c3c3c3c
 8006b1c:	2b2b2b2b 	.word	0x2b2b2b2b
 8006b20:	263c2626 	.word	0x263c2626
 8006b24:	26262626 	.word	0x26262626
 8006b28:	26262626 	.word	0x26262626
 8006b2c:	2b262626 	.word	0x2b262626
 8006b30:	27272727 	.word	0x27272727
 8006b34:	27272727 	.word	0x27272727
 8006b38:	2626263c 	.word	0x2626263c
 8006b3c:	262b2626 	.word	0x262b2626
 8006b40:	2b3c3d27 	.word	0x2b3c3d27
 8006b44:	3d27273c 	.word	0x3d27273c
 8006b48:	26262b2b 	.word	0x26262b2b
 8006b4c:	3c3c3c3c 	.word	0x3c3c3c3c
 8006b50:	3c3c263c 	.word	0x3c3c263c
 8006b54:	2b2b3c26 	.word	0x2b2b3c26
 8006b58:	2b262626 	.word	0x2b262626
 8006b5c:	26262b2b 	.word	0x26262b2b
 8006b60:	3c26      	.short	0x3c26
 8006b62:	3c          	.byte	0x3c
 8006b63:	00          	.byte	0x00
 8006b64:	b1ca      	cbz	r2, 8006b9a <d_make_comp+0x8e>
 8006b66:	6944      	ldr	r4, [r0, #20]
 8006b68:	6985      	ldr	r5, [r0, #24]
 8006b6a:	42ac      	cmp	r4, r5
 8006b6c:	db02      	blt.n	8006b74 <d_make_comp+0x68>
 8006b6e:	2000      	movs	r0, #0
 8006b70:	bc70      	pop	{r4, r5, r6}
 8006b72:	4770      	bx	lr
 8006b74:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8006b78:	6906      	ldr	r6, [r0, #16]
 8006b7a:	3401      	adds	r4, #1
 8006b7c:	00ad      	lsls	r5, r5, #2
 8006b7e:	6144      	str	r4, [r0, #20]
 8006b80:	1974      	adds	r4, r6, r5
 8006b82:	d00c      	beq.n	8006b9e <d_make_comp+0x92>
 8006b84:	5571      	strb	r1, [r6, r5]
 8006b86:	6062      	str	r2, [r4, #4]
 8006b88:	60a3      	str	r3, [r4, #8]
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	bc70      	pop	{r4, r5, r6}
 8006b8e:	4770      	bx	lr
 8006b90:	b11a      	cbz	r2, 8006b9a <d_make_comp+0x8e>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e7      	bne.n	8006b66 <d_make_comp+0x5a>
 8006b96:	4618      	mov	r0, r3
 8006b98:	e7ea      	b.n	8006b70 <d_make_comp+0x64>
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	e7e8      	b.n	8006b70 <d_make_comp+0x64>
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	e7e6      	b.n	8006b70 <d_make_comp+0x64>
 8006ba2:	bf00      	nop

08006ba4 <d_cv_qualifiers>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	68c3      	ldr	r3, [r0, #12]
 8006baa:	f1b2 0a00 	subs.w	sl, r2, #0
 8006bae:	4604      	mov	r4, r0
 8006bb0:	460f      	mov	r7, r1
 8006bb2:	781a      	ldrb	r2, [r3, #0]
 8006bb4:	bf15      	itete	ne
 8006bb6:	f04f 081c 	movne.w	r8, #28
 8006bba:	f04f 0819 	moveq.w	r8, #25
 8006bbe:	f04f 091d 	movne.w	r9, #29
 8006bc2:	f04f 091a 	moveq.w	r9, #26
 8006bc6:	bf14      	ite	ne
 8006bc8:	261e      	movne	r6, #30
 8006bca:	261b      	moveq	r6, #27
 8006bcc:	460d      	mov	r5, r1
 8006bce:	e012      	b.n	8006bf6 <d_cv_qualifiers+0x52>
 8006bd0:	2a56      	cmp	r2, #86	; 0x56
 8006bd2:	d01b      	beq.n	8006c0c <d_cv_qualifiers+0x68>
 8006bd4:	2a4b      	cmp	r2, #75	; 0x4b
 8006bd6:	d122      	bne.n	8006c1e <d_cv_qualifiers+0x7a>
 8006bd8:	60e1      	str	r1, [r4, #12]
 8006bda:	4631      	mov	r1, r6
 8006bdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bde:	3306      	adds	r3, #6
 8006be0:	6323      	str	r3, [r4, #48]	; 0x30
 8006be2:	2300      	movs	r3, #0
 8006be4:	461a      	mov	r2, r3
 8006be6:	4620      	mov	r0, r4
 8006be8:	f7ff ff90 	bl	8006b0c <d_make_comp>
 8006bec:	6028      	str	r0, [r5, #0]
 8006bee:	b1a0      	cbz	r0, 8006c1a <d_cv_qualifiers+0x76>
 8006bf0:	68e3      	ldr	r3, [r4, #12]
 8006bf2:	1d05      	adds	r5, r0, #4
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	2a72      	cmp	r2, #114	; 0x72
 8006bf8:	f103 0101 	add.w	r1, r3, #1
 8006bfc:	d1e8      	bne.n	8006bd0 <d_cv_qualifiers+0x2c>
 8006bfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c00:	3301      	adds	r3, #1
 8006c02:	3209      	adds	r2, #9
 8006c04:	60e3      	str	r3, [r4, #12]
 8006c06:	6322      	str	r2, [r4, #48]	; 0x30
 8006c08:	4641      	mov	r1, r8
 8006c0a:	e7ea      	b.n	8006be2 <d_cv_qualifiers+0x3e>
 8006c0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c0e:	3301      	adds	r3, #1
 8006c10:	3209      	adds	r2, #9
 8006c12:	60e3      	str	r3, [r4, #12]
 8006c14:	6322      	str	r2, [r4, #48]	; 0x30
 8006c16:	4649      	mov	r1, r9
 8006c18:	e7e3      	b.n	8006be2 <d_cv_qualifiers+0x3e>
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	f1ba 0f00 	cmp.w	sl, #0
 8006c22:	d101      	bne.n	8006c28 <d_cv_qualifiers+0x84>
 8006c24:	2a46      	cmp	r2, #70	; 0x46
 8006c26:	d002      	beq.n	8006c2e <d_cv_qualifiers+0x8a>
 8006c28:	4628      	mov	r0, r5
 8006c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2e:	42bd      	cmp	r5, r7
 8006c30:	d0fa      	beq.n	8006c28 <d_cv_qualifiers+0x84>
 8006c32:	201d      	movs	r0, #29
 8006c34:	211e      	movs	r1, #30
 8006c36:	221c      	movs	r2, #28
 8006c38:	e007      	b.n	8006c4a <d_cv_qualifiers+0xa6>
 8006c3a:	2b1b      	cmp	r3, #27
 8006c3c:	d00b      	beq.n	8006c56 <d_cv_qualifiers+0xb2>
 8006c3e:	2b19      	cmp	r3, #25
 8006c40:	d100      	bne.n	8006c44 <d_cv_qualifiers+0xa0>
 8006c42:	703a      	strb	r2, [r7, #0]
 8006c44:	3704      	adds	r7, #4
 8006c46:	42bd      	cmp	r5, r7
 8006c48:	d0ee      	beq.n	8006c28 <d_cv_qualifiers+0x84>
 8006c4a:	683f      	ldr	r7, [r7, #0]
 8006c4c:	783b      	ldrb	r3, [r7, #0]
 8006c4e:	2b1a      	cmp	r3, #26
 8006c50:	d1f3      	bne.n	8006c3a <d_cv_qualifiers+0x96>
 8006c52:	7038      	strb	r0, [r7, #0]
 8006c54:	e7f6      	b.n	8006c44 <d_cv_qualifiers+0xa0>
 8006c56:	7039      	strb	r1, [r7, #0]
 8006c58:	e7f4      	b.n	8006c44 <d_cv_qualifiers+0xa0>
 8006c5a:	bf00      	nop

08006c5c <d_ref_qualifier>:
 8006c5c:	b410      	push	{r4}
 8006c5e:	68c3      	ldr	r3, [r0, #12]
 8006c60:	460a      	mov	r2, r1
 8006c62:	781c      	ldrb	r4, [r3, #0]
 8006c64:	2c52      	cmp	r4, #82	; 0x52
 8006c66:	d00d      	beq.n	8006c84 <d_ref_qualifier+0x28>
 8006c68:	2c4f      	cmp	r4, #79	; 0x4f
 8006c6a:	d002      	beq.n	8006c72 <d_ref_qualifier+0x16>
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	bc10      	pop	{r4}
 8006c70:	4770      	bx	lr
 8006c72:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006c74:	2120      	movs	r1, #32
 8006c76:	3403      	adds	r4, #3
 8006c78:	6304      	str	r4, [r0, #48]	; 0x30
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	60c3      	str	r3, [r0, #12]
 8006c7e:	bc10      	pop	{r4}
 8006c80:	2300      	movs	r3, #0
 8006c82:	e743      	b.n	8006b0c <d_make_comp>
 8006c84:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006c86:	211f      	movs	r1, #31
 8006c88:	3402      	adds	r4, #2
 8006c8a:	6304      	str	r4, [r0, #48]	; 0x30
 8006c8c:	e7f5      	b.n	8006c7a <d_ref_qualifier+0x1e>
 8006c8e:	bf00      	nop

08006c90 <d_count_templates_scopes>:
 8006c90:	2a00      	cmp	r2, #0
 8006c92:	d04c      	beq.n	8006d2e <d_count_templates_scopes+0x9e>
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	4605      	mov	r5, r0
 8006c98:	460e      	mov	r6, r1
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	7823      	ldrb	r3, [r4, #0]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	2b4a      	cmp	r3, #74	; 0x4a
 8006ca2:	d82a      	bhi.n	8006cfa <d_count_templates_scopes+0x6a>
 8006ca4:	e8df f003 	tbb	[pc, r3]
 8006ca8:	3e353535 	.word	0x3e353535
 8006cac:	26262929 	.word	0x26262929
 8006cb0:	35353535 	.word	0x35353535
 8006cb4:	35353535 	.word	0x35353535
 8006cb8:	35353535 	.word	0x35353535
 8006cbc:	29353535 	.word	0x29353535
 8006cc0:	35353535 	.word	0x35353535
 8006cc4:	35353535 	.word	0x35353535
 8006cc8:	2e2e3535 	.word	0x2e2e3535
 8006ccc:	35293535 	.word	0x35293535
 8006cd0:	2a353535 	.word	0x2a353535
 8006cd4:	35353535 	.word	0x35353535
 8006cd8:	35352629 	.word	0x35352629
 8006cdc:	35353535 	.word	0x35353535
 8006ce0:	35353535 	.word	0x35353535
 8006ce4:	29293535 	.word	0x29293535
 8006ce8:	2a2a2a35 	.word	0x2a2a2a35
 8006cec:	3535292a 	.word	0x3535292a
 8006cf0:	3535      	.short	0x3535
 8006cf2:	35          	.byte	0x35
 8006cf3:	00          	.byte	0x00
 8006cf4:	68a4      	ldr	r4, [r4, #8]
 8006cf6:	2c00      	cmp	r4, #0
 8006cf8:	d1d0      	bne.n	8006c9c <d_count_templates_scopes+0xc>
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	6864      	ldr	r4, [r4, #4]
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	d1cc      	bne.n	8006c9c <d_count_templates_scopes+0xc>
 8006d02:	e7fa      	b.n	8006cfa <d_count_templates_scopes+0x6a>
 8006d04:	6862      	ldr	r2, [r4, #4]
 8006d06:	7813      	ldrb	r3, [r2, #0]
 8006d08:	2b05      	cmp	r3, #5
 8006d0a:	d103      	bne.n	8006d14 <d_count_templates_scopes+0x84>
 8006d0c:	6833      	ldr	r3, [r6, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	6862      	ldr	r2, [r4, #4]
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	f7ff ffba 	bl	8006c90 <d_count_templates_scopes>
 8006d1c:	68a4      	ldr	r4, [r4, #8]
 8006d1e:	2c00      	cmp	r4, #0
 8006d20:	d1bc      	bne.n	8006c9c <d_count_templates_scopes+0xc>
 8006d22:	e7ea      	b.n	8006cfa <d_count_templates_scopes+0x6a>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	6862      	ldr	r2, [r4, #4]
 8006d2c:	e7f2      	b.n	8006d14 <d_count_templates_scopes+0x84>
 8006d2e:	4770      	bx	lr

08006d30 <d_append_buffer>:
 8006d30:	b382      	cbz	r2, 8006d94 <d_append_buffer+0x64>
 8006d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d36:	460d      	mov	r5, r1
 8006d38:	4604      	mov	r4, r0
 8006d3a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006d3e:	18af      	adds	r7, r5, r2
 8006d40:	f04f 0800 	mov.w	r8, #0
 8006d44:	e009      	b.n	8006d5a <d_append_buffer+0x2a>
 8006d46:	460b      	mov	r3, r1
 8006d48:	42bd      	cmp	r5, r7
 8006d4a:	f101 0101 	add.w	r1, r1, #1
 8006d4e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006d52:	54e6      	strb	r6, [r4, r3]
 8006d54:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006d58:	d01a      	beq.n	8006d90 <d_append_buffer+0x60>
 8006d5a:	29ff      	cmp	r1, #255	; 0xff
 8006d5c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006d60:	d1f1      	bne.n	8006d46 <d_append_buffer+0x16>
 8006d62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006d66:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006d6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4798      	blx	r3
 8006d72:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006d76:	2101      	movs	r1, #1
 8006d78:	440b      	add	r3, r1
 8006d7a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8006d7e:	42bd      	cmp	r5, r7
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006d88:	54e6      	strb	r6, [r4, r3]
 8006d8a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006d8e:	d1e4      	bne.n	8006d5a <d_append_buffer+0x2a>
 8006d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop

08006d98 <d_number.isra.0>:
 8006d98:	b430      	push	{r4, r5}
 8006d9a:	6803      	ldr	r3, [r0, #0]
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	2a6e      	cmp	r2, #110	; 0x6e
 8006da2:	d015      	beq.n	8006dd0 <d_number.isra.0+0x38>
 8006da4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006da8:	2909      	cmp	r1, #9
 8006daa:	d81b      	bhi.n	8006de4 <d_number.isra.0+0x4c>
 8006dac:	2500      	movs	r5, #0
 8006dae:	2000      	movs	r0, #0
 8006db0:	3301      	adds	r3, #1
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006db8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8006dbc:	781a      	ldrb	r2, [r3, #0]
 8006dbe:	3830      	subs	r0, #48	; 0x30
 8006dc0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006dc4:	2909      	cmp	r1, #9
 8006dc6:	d9f3      	bls.n	8006db0 <d_number.isra.0+0x18>
 8006dc8:	b105      	cbz	r5, 8006dcc <d_number.isra.0+0x34>
 8006dca:	4240      	negs	r0, r0
 8006dcc:	bc30      	pop	{r4, r5}
 8006dce:	4770      	bx	lr
 8006dd0:	1c59      	adds	r1, r3, #1
 8006dd2:	6001      	str	r1, [r0, #0]
 8006dd4:	785a      	ldrb	r2, [r3, #1]
 8006dd6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006dda:	2b09      	cmp	r3, #9
 8006ddc:	d802      	bhi.n	8006de4 <d_number.isra.0+0x4c>
 8006dde:	460b      	mov	r3, r1
 8006de0:	2501      	movs	r5, #1
 8006de2:	e7e4      	b.n	8006dae <d_number.isra.0+0x16>
 8006de4:	2000      	movs	r0, #0
 8006de6:	e7f1      	b.n	8006dcc <d_number.isra.0+0x34>

08006de8 <d_number_component>:
 8006de8:	6943      	ldr	r3, [r0, #20]
 8006dea:	6982      	ldr	r2, [r0, #24]
 8006dec:	4293      	cmp	r3, r2
 8006dee:	da14      	bge.n	8006e1a <d_number_component+0x32>
 8006df0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006df4:	6901      	ldr	r1, [r0, #16]
 8006df6:	0092      	lsls	r2, r2, #2
 8006df8:	b510      	push	{r4, lr}
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	188c      	adds	r4, r1, r2
 8006dfe:	6143      	str	r3, [r0, #20]
 8006e00:	d008      	beq.n	8006e14 <d_number_component+0x2c>
 8006e02:	2340      	movs	r3, #64	; 0x40
 8006e04:	548b      	strb	r3, [r1, r2]
 8006e06:	300c      	adds	r0, #12
 8006e08:	f7ff ffc6 	bl	8006d98 <d_number.isra.0>
 8006e0c:	4623      	mov	r3, r4
 8006e0e:	6060      	str	r0, [r4, #4]
 8006e10:	4618      	mov	r0, r3
 8006e12:	bd10      	pop	{r4, pc}
 8006e14:	4623      	mov	r3, r4
 8006e16:	4618      	mov	r0, r3
 8006e18:	bd10      	pop	{r4, pc}
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	4770      	bx	lr

08006e20 <d_compact_number>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	68c3      	ldr	r3, [r0, #12]
 8006e24:	4604      	mov	r4, r0
 8006e26:	781a      	ldrb	r2, [r3, #0]
 8006e28:	2a5f      	cmp	r2, #95	; 0x5f
 8006e2a:	d00b      	beq.n	8006e44 <d_compact_number+0x24>
 8006e2c:	2a6e      	cmp	r2, #110	; 0x6e
 8006e2e:	d006      	beq.n	8006e3e <d_compact_number+0x1e>
 8006e30:	300c      	adds	r0, #12
 8006e32:	f7ff ffb1 	bl	8006d98 <d_number.isra.0>
 8006e36:	68e3      	ldr	r3, [r4, #12]
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	2a5f      	cmp	r2, #95	; 0x5f
 8006e3c:	d006      	beq.n	8006e4c <d_compact_number+0x2c>
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e42:	bd10      	pop	{r4, pc}
 8006e44:	2000      	movs	r0, #0
 8006e46:	3301      	adds	r3, #1
 8006e48:	60e3      	str	r3, [r4, #12]
 8006e4a:	bd10      	pop	{r4, pc}
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	e7fa      	b.n	8006e46 <d_compact_number+0x26>

08006e50 <d_template_param>:
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	68c3      	ldr	r3, [r0, #12]
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	2a54      	cmp	r2, #84	; 0x54
 8006e58:	d001      	beq.n	8006e5e <d_template_param+0xe>
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	bd38      	pop	{r3, r4, r5, pc}
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60c3      	str	r3, [r0, #12]
 8006e62:	4604      	mov	r4, r0
 8006e64:	f7ff ffdc 	bl	8006e20 <d_compact_number>
 8006e68:	1e05      	subs	r5, r0, #0
 8006e6a:	dbf6      	blt.n	8006e5a <d_template_param+0xa>
 8006e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e6e:	6963      	ldr	r3, [r4, #20]
 8006e70:	69a1      	ldr	r1, [r4, #24]
 8006e72:	3201      	adds	r2, #1
 8006e74:	428b      	cmp	r3, r1
 8006e76:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e78:	daef      	bge.n	8006e5a <d_template_param+0xa>
 8006e7a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006e7e:	6921      	ldr	r1, [r4, #16]
 8006e80:	3301      	adds	r3, #1
 8006e82:	0092      	lsls	r2, r2, #2
 8006e84:	6163      	str	r3, [r4, #20]
 8006e86:	188b      	adds	r3, r1, r2
 8006e88:	d0e7      	beq.n	8006e5a <d_template_param+0xa>
 8006e8a:	2005      	movs	r0, #5
 8006e8c:	5488      	strb	r0, [r1, r2]
 8006e8e:	605d      	str	r5, [r3, #4]
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd38      	pop	{r3, r4, r5, pc}

08006e94 <d_source_name>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	4604      	mov	r4, r0
 8006e98:	300c      	adds	r0, #12
 8006e9a:	f7ff ff7d 	bl	8006d98 <d_number.isra.0>
 8006e9e:	1e06      	subs	r6, r0, #0
 8006ea0:	dd4f      	ble.n	8006f42 <d_source_name+0xae>
 8006ea2:	68e5      	ldr	r5, [r4, #12]
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	1b5b      	subs	r3, r3, r5
 8006ea8:	429e      	cmp	r6, r3
 8006eaa:	dc2c      	bgt.n	8006f06 <d_source_name+0x72>
 8006eac:	68a2      	ldr	r2, [r4, #8]
 8006eae:	19ab      	adds	r3, r5, r6
 8006eb0:	0752      	lsls	r2, r2, #29
 8006eb2:	60e3      	str	r3, [r4, #12]
 8006eb4:	d504      	bpl.n	8006ec0 <d_source_name+0x2c>
 8006eb6:	5daa      	ldrb	r2, [r5, r6]
 8006eb8:	2a24      	cmp	r2, #36	; 0x24
 8006eba:	bf04      	itt	eq
 8006ebc:	3301      	addeq	r3, #1
 8006ebe:	60e3      	streq	r3, [r4, #12]
 8006ec0:	2e09      	cmp	r6, #9
 8006ec2:	dd0c      	ble.n	8006ede <d_source_name+0x4a>
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	4920      	ldr	r1, [pc, #128]	; (8006f48 <d_source_name+0xb4>)
 8006ec8:	4628      	mov	r0, r5
 8006eca:	f00c fd91 	bl	80139f0 <memcmp>
 8006ece:	b930      	cbnz	r0, 8006ede <d_source_name+0x4a>
 8006ed0:	7a2b      	ldrb	r3, [r5, #8]
 8006ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ed4:	d01a      	beq.n	8006f0c <d_source_name+0x78>
 8006ed6:	2b5f      	cmp	r3, #95	; 0x5f
 8006ed8:	d018      	beq.n	8006f0c <d_source_name+0x78>
 8006eda:	2b24      	cmp	r3, #36	; 0x24
 8006edc:	d016      	beq.n	8006f0c <d_source_name+0x78>
 8006ede:	6963      	ldr	r3, [r4, #20]
 8006ee0:	69a2      	ldr	r2, [r4, #24]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	da0f      	bge.n	8006f06 <d_source_name+0x72>
 8006ee6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006eea:	6921      	ldr	r1, [r4, #16]
 8006eec:	3301      	adds	r3, #1
 8006eee:	0092      	lsls	r2, r2, #2
 8006ef0:	6163      	str	r3, [r4, #20]
 8006ef2:	188b      	adds	r3, r1, r2
 8006ef4:	d007      	beq.n	8006f06 <d_source_name+0x72>
 8006ef6:	b135      	cbz	r5, 8006f06 <d_source_name+0x72>
 8006ef8:	4618      	mov	r0, r3
 8006efa:	2700      	movs	r7, #0
 8006efc:	548f      	strb	r7, [r1, r2]
 8006efe:	605d      	str	r5, [r3, #4]
 8006f00:	609e      	str	r6, [r3, #8]
 8006f02:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f06:	2000      	movs	r0, #0
 8006f08:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0c:	7a6b      	ldrb	r3, [r5, #9]
 8006f0e:	2b4e      	cmp	r3, #78	; 0x4e
 8006f10:	d1e5      	bne.n	8006ede <d_source_name+0x4a>
 8006f12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f14:	6962      	ldr	r2, [r4, #20]
 8006f16:	69a1      	ldr	r1, [r4, #24]
 8006f18:	3316      	adds	r3, #22
 8006f1a:	1b9e      	subs	r6, r3, r6
 8006f1c:	428a      	cmp	r2, r1
 8006f1e:	6326      	str	r6, [r4, #48]	; 0x30
 8006f20:	daf1      	bge.n	8006f06 <d_source_name+0x72>
 8006f22:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006f26:	6921      	ldr	r1, [r4, #16]
 8006f28:	3201      	adds	r2, #1
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	6162      	str	r2, [r4, #20]
 8006f2e:	18ca      	adds	r2, r1, r3
 8006f30:	d0e9      	beq.n	8006f06 <d_source_name+0x72>
 8006f32:	4e06      	ldr	r6, [pc, #24]	; (8006f4c <d_source_name+0xb8>)
 8006f34:	2000      	movs	r0, #0
 8006f36:	2515      	movs	r5, #21
 8006f38:	54c8      	strb	r0, [r1, r3]
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	6056      	str	r6, [r2, #4]
 8006f3e:	6095      	str	r5, [r2, #8]
 8006f40:	e7e2      	b.n	8006f08 <d_source_name+0x74>
 8006f42:	2000      	movs	r0, #0
 8006f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f46:	bf00      	nop
 8006f48:	080157dc 	.word	0x080157dc
 8006f4c:	080157e8 	.word	0x080157e8

08006f50 <d_abi_tags>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	68c3      	ldr	r3, [r0, #12]
 8006f54:	460d      	mov	r5, r1
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	2a42      	cmp	r2, #66	; 0x42
 8006f5a:	d110      	bne.n	8006f7e <d_abi_tags+0x2e>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60e3      	str	r3, [r4, #12]
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7ff ff96 	bl	8006e94 <d_source_name>
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	214a      	movs	r1, #74	; 0x4a
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f7ff fdcc 	bl	8006b0c <d_make_comp>
 8006f74:	68e3      	ldr	r3, [r4, #12]
 8006f76:	4605      	mov	r5, r0
 8006f78:	781a      	ldrb	r2, [r3, #0]
 8006f7a:	2a42      	cmp	r2, #66	; 0x42
 8006f7c:	d0ef      	beq.n	8006f5e <d_abi_tags+0xe>
 8006f7e:	4628      	mov	r0, r5
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	bf00      	nop

08006f84 <d_substitution>:
 8006f84:	68c2      	ldr	r2, [r0, #12]
 8006f86:	7813      	ldrb	r3, [r2, #0]
 8006f88:	2b53      	cmp	r3, #83	; 0x53
 8006f8a:	d002      	beq.n	8006f92 <d_substitution+0xe>
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4608      	mov	r0, r1
 8006f90:	4770      	bx	lr
 8006f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f96:	1c53      	adds	r3, r2, #1
 8006f98:	60c3      	str	r3, [r0, #12]
 8006f9a:	7853      	ldrb	r3, [r2, #1]
 8006f9c:	b18b      	cbz	r3, 8006fc2 <d_substitution+0x3e>
 8006f9e:	1c93      	adds	r3, r2, #2
 8006fa0:	60c3      	str	r3, [r0, #12]
 8006fa2:	7854      	ldrb	r4, [r2, #1]
 8006fa4:	2c5f      	cmp	r4, #95	; 0x5f
 8006fa6:	d12d      	bne.n	8007004 <d_substitution+0x80>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	6a02      	ldr	r2, [r0, #32]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d21c      	bcs.n	8006fea <d_substitution+0x66>
 8006fb0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006fb2:	69c1      	ldr	r1, [r0, #28]
 8006fb4:	3201      	adds	r2, #1
 8006fb6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fba:	6282      	str	r2, [r0, #40]	; 0x28
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc2:	461c      	mov	r4, r3
 8006fc4:	6883      	ldr	r3, [r0, #8]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bf14      	ite	ne
 8006fce:	2501      	movne	r5, #1
 8006fd0:	2500      	moveq	r5, #0
 8006fd2:	d00e      	beq.n	8006ff2 <d_substitution+0x6e>
 8006fd4:	4b4d      	ldr	r3, [pc, #308]	; (800710c <d_substitution+0x188>)
 8006fd6:	2274      	movs	r2, #116	; 0x74
 8006fd8:	f103 01c4 	add.w	r1, r3, #196	; 0xc4
 8006fdc:	e000      	b.n	8006fe0 <d_substitution+0x5c>
 8006fde:	781a      	ldrb	r2, [r3, #0]
 8006fe0:	4294      	cmp	r4, r2
 8006fe2:	d038      	beq.n	8007056 <d_substitution+0xd2>
 8006fe4:	331c      	adds	r3, #28
 8006fe6:	428b      	cmp	r3, r1
 8006fe8:	d3f9      	bcc.n	8006fde <d_substitution+0x5a>
 8006fea:	2100      	movs	r1, #0
 8006fec:	4608      	mov	r0, r1
 8006fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	d0ee      	beq.n	8006fd4 <d_substitution+0x50>
 8006ff6:	68c3      	ldr	r3, [r0, #12]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	3b43      	subs	r3, #67	; 0x43
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	bf98      	it	ls
 8007000:	2501      	movls	r5, #1
 8007002:	e7e7      	b.n	8006fd4 <d_substitution+0x50>
 8007004:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8007008:	b2eb      	uxtb	r3, r5
 800700a:	2b09      	cmp	r3, #9
 800700c:	d879      	bhi.n	8007102 <d_substitution+0x17e>
 800700e:	2100      	movs	r1, #0
 8007010:	e00d      	b.n	800702e <d_substitution+0xaa>
 8007012:	3b30      	subs	r3, #48	; 0x30
 8007014:	4299      	cmp	r1, r3
 8007016:	d8e8      	bhi.n	8006fea <d_substitution+0x66>
 8007018:	68c2      	ldr	r2, [r0, #12]
 800701a:	7814      	ldrb	r4, [r2, #0]
 800701c:	1c51      	adds	r1, r2, #1
 800701e:	b11c      	cbz	r4, 8007028 <d_substitution+0xa4>
 8007020:	60c1      	str	r1, [r0, #12]
 8007022:	7814      	ldrb	r4, [r2, #0]
 8007024:	2c5f      	cmp	r4, #95	; 0x5f
 8007026:	d014      	beq.n	8007052 <d_substitution+0xce>
 8007028:	4619      	mov	r1, r3
 800702a:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 800702e:	b2ed      	uxtb	r5, r5
 8007030:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8007034:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8007038:	2d09      	cmp	r5, #9
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007040:	d9e7      	bls.n	8007012 <d_substitution+0x8e>
 8007042:	2a19      	cmp	r2, #25
 8007044:	d8d1      	bhi.n	8006fea <d_substitution+0x66>
 8007046:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 800704a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800704e:	3b37      	subs	r3, #55	; 0x37
 8007050:	e7e0      	b.n	8007014 <d_substitution+0x90>
 8007052:	3301      	adds	r3, #1
 8007054:	e7a9      	b.n	8006faa <d_substitution+0x26>
 8007056:	695c      	ldr	r4, [r3, #20]
 8007058:	2c00      	cmp	r4, #0
 800705a:	d049      	beq.n	80070f0 <d_substitution+0x16c>
 800705c:	6942      	ldr	r2, [r0, #20]
 800705e:	6981      	ldr	r1, [r0, #24]
 8007060:	428a      	cmp	r2, r1
 8007062:	da43      	bge.n	80070ec <d_substitution+0x168>
 8007064:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8007068:	f8d0 e010 	ldr.w	lr, [r0, #16]
 800706c:	00b6      	lsls	r6, r6, #2
 800706e:	3201      	adds	r2, #1
 8007070:	eb1e 0706 	adds.w	r7, lr, r6
 8007074:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8007078:	6142      	str	r2, [r0, #20]
 800707a:	d040      	beq.n	80070fe <d_substitution+0x17a>
 800707c:	f04f 0c18 	mov.w	ip, #24
 8007080:	f80e c006 	strb.w	ip, [lr, r6]
 8007084:	463e      	mov	r6, r7
 8007086:	607c      	str	r4, [r7, #4]
 8007088:	f8c7 8008 	str.w	r8, [r7, #8]
 800708c:	62c6      	str	r6, [r0, #44]	; 0x2c
 800708e:	b345      	cbz	r5, 80070e2 <d_substitution+0x15e>
 8007090:	68de      	ldr	r6, [r3, #12]
 8007092:	691c      	ldr	r4, [r3, #16]
 8007094:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007096:	4291      	cmp	r1, r2
 8007098:	4423      	add	r3, r4
 800709a:	6303      	str	r3, [r0, #48]	; 0x30
 800709c:	dd24      	ble.n	80070e8 <d_substitution+0x164>
 800709e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80070a2:	6905      	ldr	r5, [r0, #16]
 80070a4:	0089      	lsls	r1, r1, #2
 80070a6:	3201      	adds	r2, #1
 80070a8:	186b      	adds	r3, r5, r1
 80070aa:	6142      	str	r2, [r0, #20]
 80070ac:	d025      	beq.n	80070fa <d_substitution+0x176>
 80070ae:	2218      	movs	r2, #24
 80070b0:	546a      	strb	r2, [r5, r1]
 80070b2:	4619      	mov	r1, r3
 80070b4:	605e      	str	r6, [r3, #4]
 80070b6:	609c      	str	r4, [r3, #8]
 80070b8:	68c3      	ldr	r3, [r0, #12]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b42      	cmp	r3, #66	; 0x42
 80070be:	f47f af7d 	bne.w	8006fbc <d_substitution+0x38>
 80070c2:	4604      	mov	r4, r0
 80070c4:	f7ff ff44 	bl	8006f50 <d_abi_tags>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d08e      	beq.n	8006fea <d_substitution+0x66>
 80070cc:	6a23      	ldr	r3, [r4, #32]
 80070ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80070d0:	4293      	cmp	r3, r2
 80070d2:	da10      	bge.n	80070f6 <d_substitution+0x172>
 80070d4:	69e1      	ldr	r1, [r4, #28]
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80070dc:	4601      	mov	r1, r0
 80070de:	6222      	str	r2, [r4, #32]
 80070e0:	e76c      	b.n	8006fbc <d_substitution+0x38>
 80070e2:	685e      	ldr	r6, [r3, #4]
 80070e4:	689c      	ldr	r4, [r3, #8]
 80070e6:	e7d5      	b.n	8007094 <d_substitution+0x110>
 80070e8:	2100      	movs	r1, #0
 80070ea:	e7e5      	b.n	80070b8 <d_substitution+0x134>
 80070ec:	2600      	movs	r6, #0
 80070ee:	e7cd      	b.n	800708c <d_substitution+0x108>
 80070f0:	6981      	ldr	r1, [r0, #24]
 80070f2:	6942      	ldr	r2, [r0, #20]
 80070f4:	e7cb      	b.n	800708e <d_substitution+0x10a>
 80070f6:	4601      	mov	r1, r0
 80070f8:	e760      	b.n	8006fbc <d_substitution+0x38>
 80070fa:	4619      	mov	r1, r3
 80070fc:	e7dc      	b.n	80070b8 <d_substitution+0x134>
 80070fe:	463e      	mov	r6, r7
 8007100:	e7c4      	b.n	800708c <d_substitution+0x108>
 8007102:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007106:	2b19      	cmp	r3, #25
 8007108:	d981      	bls.n	800700e <d_substitution+0x8a>
 800710a:	e75b      	b.n	8006fc4 <d_substitution+0x40>
 800710c:	08014818 	.word	0x08014818

08007110 <d_call_offset>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4604      	mov	r4, r0
 8007114:	b929      	cbnz	r1, 8007122 <d_call_offset+0x12>
 8007116:	68c3      	ldr	r3, [r0, #12]
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	b132      	cbz	r2, 800712a <d_call_offset+0x1a>
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	60c2      	str	r2, [r0, #12]
 8007120:	7819      	ldrb	r1, [r3, #0]
 8007122:	2968      	cmp	r1, #104	; 0x68
 8007124:	d019      	beq.n	800715a <d_call_offset+0x4a>
 8007126:	2976      	cmp	r1, #118	; 0x76
 8007128:	d001      	beq.n	800712e <d_call_offset+0x1e>
 800712a:	2000      	movs	r0, #0
 800712c:	bd38      	pop	{r3, r4, r5, pc}
 800712e:	f104 050c 	add.w	r5, r4, #12
 8007132:	4628      	mov	r0, r5
 8007134:	f7ff fe30 	bl	8006d98 <d_number.isra.0>
 8007138:	68e3      	ldr	r3, [r4, #12]
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	2a5f      	cmp	r2, #95	; 0x5f
 800713e:	d1f4      	bne.n	800712a <d_call_offset+0x1a>
 8007140:	3301      	adds	r3, #1
 8007142:	60e3      	str	r3, [r4, #12]
 8007144:	4628      	mov	r0, r5
 8007146:	f7ff fe27 	bl	8006d98 <d_number.isra.0>
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	781a      	ldrb	r2, [r3, #0]
 800714e:	2a5f      	cmp	r2, #95	; 0x5f
 8007150:	d1eb      	bne.n	800712a <d_call_offset+0x1a>
 8007152:	3301      	adds	r3, #1
 8007154:	60e3      	str	r3, [r4, #12]
 8007156:	2001      	movs	r0, #1
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	f104 000c 	add.w	r0, r4, #12
 800715e:	f7ff fe1b 	bl	8006d98 <d_number.isra.0>
 8007162:	e7f2      	b.n	800714a <d_call_offset+0x3a>

08007164 <d_lookup_template_argument.isra.6>:
 8007164:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8007168:	4602      	mov	r2, r0
 800716a:	b1c3      	cbz	r3, 800719e <d_lookup_template_argument.isra.6+0x3a>
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	680b      	ldr	r3, [r1, #0]
 8007170:	6890      	ldr	r0, [r2, #8]
 8007172:	b170      	cbz	r0, 8007192 <d_lookup_template_argument.isra.6+0x2e>
 8007174:	7802      	ldrb	r2, [r0, #0]
 8007176:	2a2f      	cmp	r2, #47	; 0x2f
 8007178:	d10d      	bne.n	8007196 <d_lookup_template_argument.isra.6+0x32>
 800717a:	2b00      	cmp	r3, #0
 800717c:	dc04      	bgt.n	8007188 <d_lookup_template_argument.isra.6+0x24>
 800717e:	e009      	b.n	8007194 <d_lookup_template_argument.isra.6+0x30>
 8007180:	7802      	ldrb	r2, [r0, #0]
 8007182:	2a2f      	cmp	r2, #47	; 0x2f
 8007184:	d107      	bne.n	8007196 <d_lookup_template_argument.isra.6+0x32>
 8007186:	b143      	cbz	r3, 800719a <d_lookup_template_argument.isra.6+0x36>
 8007188:	6880      	ldr	r0, [r0, #8]
 800718a:	3b01      	subs	r3, #1
 800718c:	2800      	cmp	r0, #0
 800718e:	d1f7      	bne.n	8007180 <d_lookup_template_argument.isra.6+0x1c>
 8007190:	4770      	bx	lr
 8007192:	4770      	bx	lr
 8007194:	d001      	beq.n	800719a <d_lookup_template_argument.isra.6+0x36>
 8007196:	2000      	movs	r0, #0
 8007198:	4770      	bx	lr
 800719a:	6840      	ldr	r0, [r0, #4]
 800719c:	4770      	bx	lr
 800719e:	2101      	movs	r1, #1
 80071a0:	4618      	mov	r0, r3
 80071a2:	f8c2 1118 	str.w	r1, [r2, #280]	; 0x118
 80071a6:	4770      	bx	lr

080071a8 <d_find_pack>:
 80071a8:	2900      	cmp	r1, #0
 80071aa:	d041      	beq.n	8007230 <d_find_pack+0x88>
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4605      	mov	r5, r0
 80071b0:	460c      	mov	r4, r1
 80071b2:	7823      	ldrb	r3, [r4, #0]
 80071b4:	2b4a      	cmp	r3, #74	; 0x4a
 80071b6:	d827      	bhi.n	8007208 <d_find_pack+0x60>
 80071b8:	e8df f003 	tbb	[pc, r3]
 80071bc:	2626262e 	.word	0x2626262e
 80071c0:	2b2e3026 	.word	0x2b2e3026
 80071c4:	2626262b 	.word	0x2626262b
 80071c8:	26262626 	.word	0x26262626
 80071cc:	26262626 	.word	0x26262626
 80071d0:	26262626 	.word	0x26262626
 80071d4:	2626262e 	.word	0x2626262e
 80071d8:	26262626 	.word	0x26262626
 80071dc:	26262626 	.word	0x26262626
 80071e0:	2e262626 	.word	0x2e262626
 80071e4:	26262626 	.word	0x26262626
 80071e8:	26262626 	.word	0x26262626
 80071ec:	262b2e26 	.word	0x262b2e26
 80071f0:	26262626 	.word	0x26262626
 80071f4:	26262626 	.word	0x26262626
 80071f8:	2e262626 	.word	0x2e262626
 80071fc:	26262626 	.word	0x26262626
 8007200:	262e262e 	.word	0x262e262e
 8007204:	2e26      	.short	0x2e26
 8007206:	2e          	.byte	0x2e
 8007207:	00          	.byte	0x00
 8007208:	6861      	ldr	r1, [r4, #4]
 800720a:	4628      	mov	r0, r5
 800720c:	f7ff ffcc 	bl	80071a8 <d_find_pack>
 8007210:	b918      	cbnz	r0, 800721a <d_find_pack+0x72>
 8007212:	68a4      	ldr	r4, [r4, #8]
 8007214:	2c00      	cmp	r4, #0
 8007216:	d1cc      	bne.n	80071b2 <d_find_pack+0xa>
 8007218:	2000      	movs	r0, #0
 800721a:	bd38      	pop	{r3, r4, r5, pc}
 800721c:	1d21      	adds	r1, r4, #4
 800721e:	4628      	mov	r0, r5
 8007220:	f7ff ffa0 	bl	8007164 <d_lookup_template_argument.isra.6>
 8007224:	2800      	cmp	r0, #0
 8007226:	d0f7      	beq.n	8007218 <d_find_pack+0x70>
 8007228:	7803      	ldrb	r3, [r0, #0]
 800722a:	2b2f      	cmp	r3, #47	; 0x2f
 800722c:	d1f4      	bne.n	8007218 <d_find_pack+0x70>
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	2000      	movs	r0, #0
 8007232:	4770      	bx	lr

08007234 <d_growable_string_callback_adapter>:
 8007234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007236:	6853      	ldr	r3, [r2, #4]
 8007238:	6894      	ldr	r4, [r2, #8]
 800723a:	3301      	adds	r3, #1
 800723c:	440b      	add	r3, r1
 800723e:	42a3      	cmp	r3, r4
 8007240:	b083      	sub	sp, #12
 8007242:	4615      	mov	r5, r2
 8007244:	460e      	mov	r6, r1
 8007246:	4607      	mov	r7, r0
 8007248:	d813      	bhi.n	8007272 <d_growable_string_callback_adapter+0x3e>
 800724a:	68ec      	ldr	r4, [r5, #12]
 800724c:	b10c      	cbz	r4, 8007252 <d_growable_string_callback_adapter+0x1e>
 800724e:	b003      	add	sp, #12
 8007250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007252:	e895 0009 	ldmia.w	r5, {r0, r3}
 8007256:	4632      	mov	r2, r6
 8007258:	4639      	mov	r1, r7
 800725a:	4418      	add	r0, r3
 800725c:	f009 fad6 	bl	801080c <memcpy>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	686a      	ldr	r2, [r5, #4]
 8007264:	4433      	add	r3, r6
 8007266:	549c      	strb	r4, [r3, r2]
 8007268:	686b      	ldr	r3, [r5, #4]
 800726a:	441e      	add	r6, r3
 800726c:	606e      	str	r6, [r5, #4]
 800726e:	b003      	add	sp, #12
 8007270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007272:	68d2      	ldr	r2, [r2, #12]
 8007274:	2a00      	cmp	r2, #0
 8007276:	d1ea      	bne.n	800724e <d_growable_string_callback_adapter+0x1a>
 8007278:	b91c      	cbnz	r4, 8007282 <d_growable_string_callback_adapter+0x4e>
 800727a:	2b02      	cmp	r3, #2
 800727c:	f04f 0402 	mov.w	r4, #2
 8007280:	d902      	bls.n	8007288 <d_growable_string_callback_adapter+0x54>
 8007282:	0064      	lsls	r4, r4, #1
 8007284:	42a3      	cmp	r3, r4
 8007286:	d8fc      	bhi.n	8007282 <d_growable_string_callback_adapter+0x4e>
 8007288:	4621      	mov	r1, r4
 800728a:	6828      	ldr	r0, [r5, #0]
 800728c:	f009 fad2 	bl	8010834 <realloc>
 8007290:	b110      	cbz	r0, 8007298 <d_growable_string_callback_adapter+0x64>
 8007292:	6028      	str	r0, [r5, #0]
 8007294:	60ac      	str	r4, [r5, #8]
 8007296:	e7d8      	b.n	800724a <d_growable_string_callback_adapter+0x16>
 8007298:	9001      	str	r0, [sp, #4]
 800729a:	6828      	ldr	r0, [r5, #0]
 800729c:	f00c fba0 	bl	80139e0 <free>
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	606b      	str	r3, [r5, #4]
 80072a8:	60ab      	str	r3, [r5, #8]
 80072aa:	60ea      	str	r2, [r5, #12]
 80072ac:	e7cf      	b.n	800724e <d_growable_string_callback_adapter+0x1a>
 80072ae:	bf00      	nop

080072b0 <d_print_comp_inner>:
 80072b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b4:	4604      	mov	r4, r0
 80072b6:	b095      	sub	sp, #84	; 0x54
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	f000 80c3 	beq.w	8007444 <d_print_comp_inner+0x194>
 80072be:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f040 80b6 	bne.w	8007434 <d_print_comp_inner+0x184>
 80072c8:	7813      	ldrb	r3, [r2, #0]
 80072ca:	460f      	mov	r7, r1
 80072cc:	4615      	mov	r5, r2
 80072ce:	2b4b      	cmp	r3, #75	; 0x4b
 80072d0:	f201 81ec 	bhi.w	80086ac <d_print_comp_inner+0x13fc>
 80072d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80072d8:	094c096d 	.word	0x094c096d
 80072dc:	08bf094c 	.word	0x08bf094c
 80072e0:	09cd087b 	.word	0x09cd087b
 80072e4:	09e509a2 	.word	0x09e509a2
 80072e8:	085407c7 	.word	0x085407c7
 80072ec:	0806082d 	.word	0x0806082d
 80072f0:	05d607df 	.word	0x05d607df
 80072f4:	057a05af 	.word	0x057a05af
 80072f8:	07100553 	.word	0x07100553
 80072fc:	06c206e9 	.word	0x06c206e9
 8007300:	0674069b 	.word	0x0674069b
 8007304:	0626064d 	.word	0x0626064d
 8007308:	07ad05fd 	.word	0x07ad05fd
 800730c:	07ad07ad 	.word	0x07ad07ad
 8007310:	07a807a8 	.word	0x07a807a8
 8007314:	07a807a8 	.word	0x07a807a8
 8007318:	07a807a8 	.word	0x07a807a8
 800731c:	077607a8 	.word	0x077607a8
 8007320:	07a80776 	.word	0x07a80776
 8007324:	073707a8 	.word	0x073707a8
 8007328:	04fd07da 	.word	0x04fd07da
 800732c:	04760491 	.word	0x04760491
 8007330:	047603d4 	.word	0x047603d4
 8007334:	03940394 	.word	0x03940394
 8007338:	03470371 	.word	0x03470371
 800733c:	02f90320 	.word	0x02f90320
 8007340:	02c702f5 	.word	0x02c702f5
 8007344:	0472004c 	.word	0x0472004c
 8007348:	04170512 	.word	0x04170512
 800734c:	04420417 	.word	0x04420417
 8007350:	041b0442 	.word	0x041b0442
 8007354:	02b102be 	.word	0x02b102be
 8007358:	0233025a 	.word	0x0233025a
 800735c:	01d001f7 	.word	0x01d001f7
 8007360:	09ea01a9 	.word	0x09ea01a9
 8007364:	028a0183 	.word	0x028a0183
 8007368:	0110015c 	.word	0x0110015c
 800736c:	00bc00e6 	.word	0x00bc00e6
 8007370:	68ae      	ldr	r6, [r5, #8]
 8007372:	7833      	ldrb	r3, [r6, #0]
 8007374:	2b37      	cmp	r3, #55	; 0x37
 8007376:	d165      	bne.n	8007444 <d_print_comp_inner+0x194>
 8007378:	686a      	ldr	r2, [r5, #4]
 800737a:	6853      	ldr	r3, [r2, #4]
 800737c:	6819      	ldr	r1, [r3, #0]
 800737e:	7848      	ldrb	r0, [r1, #1]
 8007380:	2863      	cmp	r0, #99	; 0x63
 8007382:	f002 8089 	beq.w	8009498 <d_print_comp_inner+0x21e8>
 8007386:	7811      	ldrb	r1, [r2, #0]
 8007388:	2931      	cmp	r1, #49	; 0x31
 800738a:	f002 815e 	beq.w	800964a <d_print_comp_inner+0x239a>
 800738e:	6853      	ldr	r3, [r2, #4]
 8007390:	49d1      	ldr	r1, [pc, #836]	; (80076d8 <d_print_comp_inner+0x428>)
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	f007 fd12 	bl	800edbc <strcmp>
 8007398:	6872      	ldr	r2, [r6, #4]
 800739a:	b918      	cbnz	r0, 80073a4 <d_print_comp_inner+0xf4>
 800739c:	7813      	ldrb	r3, [r2, #0]
 800739e:	2b03      	cmp	r3, #3
 80073a0:	f002 81ed 	beq.w	800977e <d_print_comp_inner+0x24ce>
 80073a4:	4639      	mov	r1, r7
 80073a6:	4620      	mov	r0, r4
 80073a8:	f003 fa4c 	bl	800a844 <d_print_subexpr>
 80073ac:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80073b0:	49ca      	ldr	r1, [pc, #808]	; (80076dc <d_print_comp_inner+0x42c>)
 80073b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80073b6:	f8d3 9000 	ldr.w	r9, [r3]
 80073ba:	4648      	mov	r0, r9
 80073bc:	f007 fcfe 	bl	800edbc <strcmp>
 80073c0:	4606      	mov	r6, r0
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f041 87ee 	bne.w	80093a4 <d_print_comp_inner+0x20f4>
 80073c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80073cc:	29ff      	cmp	r1, #255	; 0xff
 80073ce:	f002 827c 	beq.w	80098ca <d_print_comp_inner+0x261a>
 80073d2:	1c4a      	adds	r2, r1, #1
 80073d4:	235b      	movs	r3, #91	; 0x5b
 80073d6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80073da:	5463      	strb	r3, [r4, r1]
 80073dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80073e0:	68ab      	ldr	r3, [r5, #8]
 80073e2:	4639      	mov	r1, r7
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	4620      	mov	r0, r4
 80073e8:	f002 fb7a 	bl	8009ae0 <d_print_comp>
 80073ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80073f0:	29ff      	cmp	r1, #255	; 0xff
 80073f2:	f002 827a 	beq.w	80098ea <d_print_comp_inner+0x263a>
 80073f6:	235d      	movs	r3, #93	; 0x5d
 80073f8:	1c4a      	adds	r2, r1, #1
 80073fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80073fe:	5463      	strb	r3, [r4, r1]
 8007400:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007404:	686b      	ldr	r3, [r5, #4]
 8007406:	781a      	ldrb	r2, [r3, #0]
 8007408:	2a31      	cmp	r2, #49	; 0x31
 800740a:	d113      	bne.n	8007434 <d_print_comp_inner+0x184>
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	2a01      	cmp	r2, #1
 8007412:	d10f      	bne.n	8007434 <d_print_comp_inner+0x184>
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b3e      	cmp	r3, #62	; 0x3e
 800741a:	d10b      	bne.n	8007434 <d_print_comp_inner+0x184>
 800741c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007420:	29ff      	cmp	r1, #255	; 0xff
 8007422:	f002 8323 	beq.w	8009a6c <d_print_comp_inner+0x27bc>
 8007426:	2329      	movs	r3, #41	; 0x29
 8007428:	1c4a      	adds	r2, r1, #1
 800742a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800742e:	5463      	strb	r3, [r4, r1]
 8007430:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007434:	b015      	add	sp, #84	; 0x54
 8007436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743a:	f1b8 0f00 	cmp.w	r8, #0
 800743e:	d001      	beq.n	8007444 <d_print_comp_inner+0x194>
 8007440:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8007444:	2301      	movs	r3, #1
 8007446:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800744a:	b015      	add	sp, #84	; 0x54
 800744c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007450:	4ea3      	ldr	r6, [pc, #652]	; (80076e0 <d_print_comp_inner+0x430>)
 8007452:	686a      	ldr	r2, [r5, #4]
 8007454:	f002 fb44 	bl	8009ae0 <d_print_comp>
 8007458:	f106 0a08 	add.w	sl, r6, #8
 800745c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007460:	f04f 0900 	mov.w	r9, #0
 8007464:	e00a      	b.n	800747c <d_print_comp_inner+0x1cc>
 8007466:	460b      	mov	r3, r1
 8007468:	3101      	adds	r1, #1
 800746a:	45b2      	cmp	sl, r6
 800746c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007470:	f804 8003 	strb.w	r8, [r4, r3]
 8007474:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007478:	f001 8299 	beq.w	80089ae <d_print_comp_inner+0x16fe>
 800747c:	29ff      	cmp	r1, #255	; 0xff
 800747e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007482:	d1f0      	bne.n	8007466 <d_print_comp_inner+0x1b6>
 8007484:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007488:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800748c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007490:	4620      	mov	r0, r4
 8007492:	4798      	blx	r3
 8007494:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007498:	2101      	movs	r1, #1
 800749a:	440b      	add	r3, r1
 800749c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80074a0:	2300      	movs	r3, #0
 80074a2:	e7e2      	b.n	800746a <d_print_comp_inner+0x1ba>
 80074a4:	4e8f      	ldr	r6, [pc, #572]	; (80076e4 <d_print_comp_inner+0x434>)
 80074a6:	686a      	ldr	r2, [r5, #4]
 80074a8:	f002 fb1a 	bl	8009ae0 <d_print_comp>
 80074ac:	f106 0a05 	add.w	sl, r6, #5
 80074b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80074b4:	f04f 0900 	mov.w	r9, #0
 80074b8:	e00a      	b.n	80074d0 <d_print_comp_inner+0x220>
 80074ba:	460b      	mov	r3, r1
 80074bc:	3101      	adds	r1, #1
 80074be:	45b2      	cmp	sl, r6
 80074c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80074c4:	f804 8003 	strb.w	r8, [r4, r3]
 80074c8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80074cc:	f001 8248 	beq.w	8008960 <d_print_comp_inner+0x16b0>
 80074d0:	29ff      	cmp	r1, #255	; 0xff
 80074d2:	f816 8b01 	ldrb.w	r8, [r6], #1
 80074d6:	d1f0      	bne.n	80074ba <d_print_comp_inner+0x20a>
 80074d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80074dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80074e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80074e4:	4620      	mov	r0, r4
 80074e6:	4798      	blx	r3
 80074e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80074ec:	2101      	movs	r1, #1
 80074ee:	440b      	add	r3, r1
 80074f0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80074f4:	2300      	movs	r3, #0
 80074f6:	e7e2      	b.n	80074be <d_print_comp_inner+0x20e>
 80074f8:	6869      	ldr	r1, [r5, #4]
 80074fa:	f7ff fe55 	bl	80071a8 <d_find_pack>
 80074fe:	f04f 0900 	mov.w	r9, #0
 8007502:	2800      	cmp	r0, #0
 8007504:	f002 8149 	beq.w	800979a <d_print_comp_inner+0x24ea>
 8007508:	7803      	ldrb	r3, [r0, #0]
 800750a:	2b2f      	cmp	r3, #47	; 0x2f
 800750c:	f041 8315 	bne.w	8008b3a <d_print_comp_inner+0x188a>
 8007510:	6843      	ldr	r3, [r0, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	f001 8311 	beq.w	8008b3a <d_print_comp_inner+0x188a>
 8007518:	6880      	ldr	r0, [r0, #8]
 800751a:	f109 0901 	add.w	r9, r9, #1
 800751e:	2800      	cmp	r0, #0
 8007520:	d1f2      	bne.n	8007508 <d_print_comp_inner+0x258>
 8007522:	686b      	ldr	r3, [r5, #4]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	f04f 0b00 	mov.w	fp, #0
 800752a:	46da      	mov	sl, fp
 800752c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	f8c4 b11c 	str.w	fp, [r4, #284]	; 0x11c
 8007536:	9a00      	ldr	r2, [sp, #0]
 8007538:	4639      	mov	r1, r7
 800753a:	4620      	mov	r0, r4
 800753c:	f002 fad0 	bl	8009ae0 <d_print_comp>
 8007540:	9b01      	ldr	r3, [sp, #4]
 8007542:	455b      	cmp	r3, fp
 8007544:	f341 80b7 	ble.w	80086b6 <d_print_comp_inner+0x1406>
 8007548:	4d67      	ldr	r5, [pc, #412]	; (80076e8 <d_print_comp_inner+0x438>)
 800754a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800754e:	f105 0802 	add.w	r8, r5, #2
 8007552:	e009      	b.n	8007568 <d_print_comp_inner+0x2b8>
 8007554:	460b      	mov	r3, r1
 8007556:	3101      	adds	r1, #1
 8007558:	45a8      	cmp	r8, r5
 800755a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800755e:	54e6      	strb	r6, [r4, r3]
 8007560:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007564:	f001 80a7 	beq.w	80086b6 <d_print_comp_inner+0x1406>
 8007568:	29ff      	cmp	r1, #255	; 0xff
 800756a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800756e:	d1f1      	bne.n	8007554 <d_print_comp_inner+0x2a4>
 8007570:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007574:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8007578:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800757c:	4620      	mov	r0, r4
 800757e:	4798      	blx	r3
 8007580:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007584:	2101      	movs	r1, #1
 8007586:	440b      	add	r3, r1
 8007588:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800758c:	2300      	movs	r3, #0
 800758e:	e7e3      	b.n	8007558 <d_print_comp_inner+0x2a8>
 8007590:	4e56      	ldr	r6, [pc, #344]	; (80076ec <d_print_comp_inner+0x43c>)
 8007592:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007596:	f106 0a1a 	add.w	sl, r6, #26
 800759a:	f04f 0900 	mov.w	r9, #0
 800759e:	e00a      	b.n	80075b6 <d_print_comp_inner+0x306>
 80075a0:	460b      	mov	r3, r1
 80075a2:	3101      	adds	r1, #1
 80075a4:	45b2      	cmp	sl, r6
 80075a6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80075aa:	f804 8003 	strb.w	r8, [r4, r3]
 80075ae:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80075b2:	f001 81e8 	beq.w	8008986 <d_print_comp_inner+0x16d6>
 80075b6:	29ff      	cmp	r1, #255	; 0xff
 80075b8:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80075bc:	d1f0      	bne.n	80075a0 <d_print_comp_inner+0x2f0>
 80075be:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80075c2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80075c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80075ca:	4620      	mov	r0, r4
 80075cc:	4798      	blx	r3
 80075ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80075d2:	2101      	movs	r1, #1
 80075d4:	440b      	add	r3, r1
 80075d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80075da:	2300      	movs	r3, #0
 80075dc:	e7e2      	b.n	80075a4 <d_print_comp_inner+0x2f4>
 80075de:	4e44      	ldr	r6, [pc, #272]	; (80076f0 <d_print_comp_inner+0x440>)
 80075e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80075e4:	f106 090e 	add.w	r9, r6, #14
 80075e8:	f04f 0800 	mov.w	r8, #0
 80075ec:	e009      	b.n	8007602 <d_print_comp_inner+0x352>
 80075ee:	460b      	mov	r3, r1
 80075f0:	3101      	adds	r1, #1
 80075f2:	45b1      	cmp	r9, r6
 80075f4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80075f8:	54e7      	strb	r7, [r4, r3]
 80075fa:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80075fe:	f001 80b1 	beq.w	8008764 <d_print_comp_inner+0x14b4>
 8007602:	29ff      	cmp	r1, #255	; 0xff
 8007604:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8007608:	d1f1      	bne.n	80075ee <d_print_comp_inner+0x33e>
 800760a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800760e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007612:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007616:	4620      	mov	r0, r4
 8007618:	4798      	blx	r3
 800761a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800761e:	2101      	movs	r1, #1
 8007620:	440b      	add	r3, r1
 8007622:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007626:	2300      	movs	r3, #0
 8007628:	e7e3      	b.n	80075f2 <d_print_comp_inner+0x342>
 800762a:	4e32      	ldr	r6, [pc, #200]	; (80076f4 <d_print_comp_inner+0x444>)
 800762c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007630:	f106 0a08 	add.w	sl, r6, #8
 8007634:	f04f 0900 	mov.w	r9, #0
 8007638:	e00a      	b.n	8007650 <d_print_comp_inner+0x3a0>
 800763a:	460b      	mov	r3, r1
 800763c:	3101      	adds	r1, #1
 800763e:	45b2      	cmp	sl, r6
 8007640:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007644:	f804 8003 	strb.w	r8, [r4, r3]
 8007648:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800764c:	f001 80c6 	beq.w	80087dc <d_print_comp_inner+0x152c>
 8007650:	29ff      	cmp	r1, #255	; 0xff
 8007652:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007656:	d1f0      	bne.n	800763a <d_print_comp_inner+0x38a>
 8007658:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800765c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007660:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007664:	4620      	mov	r0, r4
 8007666:	4798      	blx	r3
 8007668:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800766c:	2101      	movs	r1, #1
 800766e:	440b      	add	r3, r1
 8007670:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007674:	2300      	movs	r3, #0
 8007676:	e7e2      	b.n	800763e <d_print_comp_inner+0x38e>
 8007678:	4e1f      	ldr	r6, [pc, #124]	; (80076f8 <d_print_comp_inner+0x448>)
 800767a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800767e:	f106 0a1c 	add.w	sl, r6, #28
 8007682:	f04f 0900 	mov.w	r9, #0
 8007686:	e00a      	b.n	800769e <d_print_comp_inner+0x3ee>
 8007688:	460b      	mov	r3, r1
 800768a:	3101      	adds	r1, #1
 800768c:	45b2      	cmp	sl, r6
 800768e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007692:	f804 8003 	strb.w	r8, [r4, r3]
 8007696:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800769a:	f001 805c 	beq.w	8008756 <d_print_comp_inner+0x14a6>
 800769e:	29ff      	cmp	r1, #255	; 0xff
 80076a0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80076a4:	d1f0      	bne.n	8007688 <d_print_comp_inner+0x3d8>
 80076a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80076aa:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80076ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80076b2:	4620      	mov	r0, r4
 80076b4:	4798      	blx	r3
 80076b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80076ba:	2101      	movs	r1, #1
 80076bc:	440b      	add	r3, r1
 80076be:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80076c2:	2300      	movs	r3, #0
 80076c4:	e7e2      	b.n	800768c <d_print_comp_inner+0x3dc>
 80076c6:	4e0d      	ldr	r6, [pc, #52]	; (80076fc <d_print_comp_inner+0x44c>)
 80076c8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80076cc:	f106 0a1d 	add.w	sl, r6, #29
 80076d0:	f04f 0900 	mov.w	r9, #0
 80076d4:	e01f      	b.n	8007716 <d_print_comp_inner+0x466>
 80076d6:	bf00      	nop
 80076d8:	080159b8 	.word	0x080159b8
 80076dc:	080159bc 	.word	0x080159bc
 80076e0:	08015a7b 	.word	0x08015a7b
 80076e4:	08015800 	.word	0x08015800
 80076e8:	08015990 	.word	0x08015990
 80076ec:	0801595b 	.word	0x0801595b
 80076f0:	08015a6b 	.word	0x08015a6b
 80076f4:	08015a5b 	.word	0x08015a5b
 80076f8:	08015a3b 	.word	0x08015a3b
 80076fc:	08015a1b 	.word	0x08015a1b
 8007700:	460b      	mov	r3, r1
 8007702:	3101      	adds	r1, #1
 8007704:	45b2      	cmp	sl, r6
 8007706:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800770a:	f804 8003 	strb.w	r8, [r4, r3]
 800770e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007712:	f001 80db 	beq.w	80088cc <d_print_comp_inner+0x161c>
 8007716:	29ff      	cmp	r1, #255	; 0xff
 8007718:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800771c:	d1f0      	bne.n	8007700 <d_print_comp_inner+0x450>
 800771e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007722:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007726:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800772a:	4620      	mov	r0, r4
 800772c:	4798      	blx	r3
 800772e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007732:	2101      	movs	r1, #1
 8007734:	440b      	add	r3, r1
 8007736:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800773a:	2300      	movs	r3, #0
 800773c:	e7e2      	b.n	8007704 <d_print_comp_inner+0x454>
 800773e:	4eca      	ldr	r6, [pc, #808]	; (8007a68 <d_print_comp_inner+0x7b8>)
 8007740:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007744:	f106 0a0a 	add.w	sl, r6, #10
 8007748:	f04f 0900 	mov.w	r9, #0
 800774c:	e00a      	b.n	8007764 <d_print_comp_inner+0x4b4>
 800774e:	460b      	mov	r3, r1
 8007750:	3101      	adds	r1, #1
 8007752:	45b2      	cmp	sl, r6
 8007754:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007758:	f804 8003 	strb.w	r8, [r4, r3]
 800775c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007760:	f000 87e6 	beq.w	8008730 <d_print_comp_inner+0x1480>
 8007764:	29ff      	cmp	r1, #255	; 0xff
 8007766:	f816 8b01 	ldrb.w	r8, [r6], #1
 800776a:	d1f0      	bne.n	800774e <d_print_comp_inner+0x49e>
 800776c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007770:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007774:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007778:	4620      	mov	r0, r4
 800777a:	4798      	blx	r3
 800777c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007780:	2101      	movs	r1, #1
 8007782:	440b      	add	r3, r1
 8007784:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007788:	2300      	movs	r3, #0
 800778a:	e7e2      	b.n	8007752 <d_print_comp_inner+0x4a2>
 800778c:	686a      	ldr	r2, [r5, #4]
 800778e:	a804      	add	r0, sp, #16
 8007790:	49b6      	ldr	r1, [pc, #728]	; (8007a6c <d_print_comp_inner+0x7bc>)
 8007792:	f00c f95d 	bl	8013a50 <siprintf>
 8007796:	a804      	add	r0, sp, #16
 8007798:	f7ff f9b0 	bl	8006afc <strlen>
 800779c:	2800      	cmp	r0, #0
 800779e:	f43f ae49 	beq.w	8007434 <d_print_comp_inner+0x184>
 80077a2:	ad04      	add	r5, sp, #16
 80077a4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80077a8:	182f      	adds	r7, r5, r0
 80077aa:	f04f 0800 	mov.w	r8, #0
 80077ae:	e009      	b.n	80077c4 <d_print_comp_inner+0x514>
 80077b0:	460b      	mov	r3, r1
 80077b2:	3101      	adds	r1, #1
 80077b4:	42af      	cmp	r7, r5
 80077b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80077ba:	54e6      	strb	r6, [r4, r3]
 80077bc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80077c0:	f43f ae38 	beq.w	8007434 <d_print_comp_inner+0x184>
 80077c4:	29ff      	cmp	r1, #255	; 0xff
 80077c6:	f815 6b01 	ldrb.w	r6, [r5], #1
 80077ca:	d1f1      	bne.n	80077b0 <d_print_comp_inner+0x500>
 80077cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80077d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80077d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80077d8:	4620      	mov	r0, r4
 80077da:	4798      	blx	r3
 80077dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80077e0:	2101      	movs	r1, #1
 80077e2:	440b      	add	r3, r1
 80077e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80077e8:	2300      	movs	r3, #0
 80077ea:	e7e3      	b.n	80077b4 <d_print_comp_inner+0x504>
 80077ec:	4ea0      	ldr	r6, [pc, #640]	; (8007a70 <d_print_comp_inner+0x7c0>)
 80077ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80077f2:	f106 0a16 	add.w	sl, r6, #22
 80077f6:	f04f 0900 	mov.w	r9, #0
 80077fa:	e00a      	b.n	8007812 <d_print_comp_inner+0x562>
 80077fc:	460b      	mov	r3, r1
 80077fe:	3101      	adds	r1, #1
 8007800:	45b2      	cmp	sl, r6
 8007802:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007806:	f804 8003 	strb.w	r8, [r4, r3]
 800780a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800780e:	f001 8056 	beq.w	80088be <d_print_comp_inner+0x160e>
 8007812:	29ff      	cmp	r1, #255	; 0xff
 8007814:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007818:	d1f0      	bne.n	80077fc <d_print_comp_inner+0x54c>
 800781a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800781e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007822:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007826:	4620      	mov	r0, r4
 8007828:	4798      	blx	r3
 800782a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800782e:	2101      	movs	r1, #1
 8007830:	440b      	add	r3, r1
 8007832:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007836:	2300      	movs	r3, #0
 8007838:	e7e2      	b.n	8007800 <d_print_comp_inner+0x550>
 800783a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800783e:	792d      	ldrb	r5, [r5, #4]
 8007840:	29ff      	cmp	r1, #255	; 0xff
 8007842:	f001 846d 	beq.w	8009120 <d_print_comp_inner+0x1e70>
 8007846:	1c4b      	adds	r3, r1, #1
 8007848:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800784c:	5465      	strb	r5, [r4, r1]
 800784e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8007852:	e5ef      	b.n	8007434 <d_print_comp_inner+0x184>
 8007854:	686a      	ldr	r2, [r5, #4]
 8007856:	f002 f943 	bl	8009ae0 <d_print_comp>
 800785a:	68aa      	ldr	r2, [r5, #8]
 800785c:	4639      	mov	r1, r7
 800785e:	4620      	mov	r0, r4
 8007860:	f002 f93e 	bl	8009ae0 <d_print_comp>
 8007864:	e5e6      	b.n	8007434 <d_print_comp_inner+0x184>
 8007866:	686e      	ldr	r6, [r5, #4]
 8007868:	68ad      	ldr	r5, [r5, #8]
 800786a:	7833      	ldrb	r3, [r6, #0]
 800786c:	2b31      	cmp	r3, #49	; 0x31
 800786e:	f001 82b9 	beq.w	8008de4 <d_print_comp_inner+0x1b34>
 8007872:	2b33      	cmp	r3, #51	; 0x33
 8007874:	f041 83fc 	bne.w	8009070 <d_print_comp_inner+0x1dc0>
 8007878:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800787c:	2bff      	cmp	r3, #255	; 0xff
 800787e:	f001 872f 	beq.w	80096e0 <d_print_comp_inner+0x2430>
 8007882:	1c59      	adds	r1, r3, #1
 8007884:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8007888:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800788c:	1d32      	adds	r2, r6, #4
 800788e:	4639      	mov	r1, r7
 8007890:	f804 e003 	strb.w	lr, [r4, r3]
 8007894:	4620      	mov	r0, r4
 8007896:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 800789a:	f002 fec1 	bl	800a620 <d_print_cast.isra.12>
 800789e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80078a2:	29ff      	cmp	r1, #255	; 0xff
 80078a4:	f001 870b 	beq.w	80096be <d_print_comp_inner+0x240e>
 80078a8:	2329      	movs	r3, #41	; 0x29
 80078aa:	1c4a      	adds	r2, r1, #1
 80078ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80078b0:	5463      	strb	r3, [r4, r1]
 80078b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80078b6:	462a      	mov	r2, r5
 80078b8:	4639      	mov	r1, r7
 80078ba:	4620      	mov	r0, r4
 80078bc:	f002 ffc2 	bl	800a844 <d_print_subexpr>
 80078c0:	e5b8      	b.n	8007434 <d_print_comp_inner+0x184>
 80078c2:	686a      	ldr	r2, [r5, #4]
 80078c4:	f002 ff80 	bl	800a7c8 <d_print_expr_op>
 80078c8:	e5b4      	b.n	8007434 <d_print_comp_inner+0x184>
 80078ca:	4e6a      	ldr	r6, [pc, #424]	; (8007a74 <d_print_comp_inner+0x7c4>)
 80078cc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80078d0:	f106 0a09 	add.w	sl, r6, #9
 80078d4:	f04f 0900 	mov.w	r9, #0
 80078d8:	e00a      	b.n	80078f0 <d_print_comp_inner+0x640>
 80078da:	460b      	mov	r3, r1
 80078dc:	3101      	adds	r1, #1
 80078de:	45b2      	cmp	sl, r6
 80078e0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80078e4:	f804 8003 	strb.w	r8, [r4, r3]
 80078e8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80078ec:	f001 8031 	beq.w	8008952 <d_print_comp_inner+0x16a2>
 80078f0:	29ff      	cmp	r1, #255	; 0xff
 80078f2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80078f6:	d1f0      	bne.n	80078da <d_print_comp_inner+0x62a>
 80078f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80078fc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007900:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007904:	4620      	mov	r0, r4
 8007906:	4798      	blx	r3
 8007908:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800790c:	2101      	movs	r1, #1
 800790e:	440b      	add	r3, r1
 8007910:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007914:	2300      	movs	r3, #0
 8007916:	e7e2      	b.n	80078de <d_print_comp_inner+0x62e>
 8007918:	4e56      	ldr	r6, [pc, #344]	; (8007a74 <d_print_comp_inner+0x7c4>)
 800791a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800791e:	f106 0a09 	add.w	sl, r6, #9
 8007922:	f04f 0900 	mov.w	r9, #0
 8007926:	e00a      	b.n	800793e <d_print_comp_inner+0x68e>
 8007928:	460b      	mov	r3, r1
 800792a:	3101      	adds	r1, #1
 800792c:	45b2      	cmp	sl, r6
 800792e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007932:	f804 8003 	strb.w	r8, [r4, r3]
 8007936:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800793a:	f001 8031 	beq.w	80089a0 <d_print_comp_inner+0x16f0>
 800793e:	29ff      	cmp	r1, #255	; 0xff
 8007940:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007944:	d1f0      	bne.n	8007928 <d_print_comp_inner+0x678>
 8007946:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800794a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800794e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007952:	4620      	mov	r0, r4
 8007954:	4798      	blx	r3
 8007956:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800795a:	2101      	movs	r1, #1
 800795c:	440b      	add	r3, r1
 800795e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007962:	2300      	movs	r3, #0
 8007964:	e7e2      	b.n	800792c <d_print_comp_inner+0x67c>
 8007966:	f8d5 a004 	ldr.w	sl, [r5, #4]
 800796a:	4d43      	ldr	r5, [pc, #268]	; (8007a78 <d_print_comp_inner+0x7c8>)
 800796c:	f8da 7008 	ldr.w	r7, [sl, #8]
 8007970:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007974:	f105 0808 	add.w	r8, r5, #8
 8007978:	f04f 0900 	mov.w	r9, #0
 800797c:	e009      	b.n	8007992 <d_print_comp_inner+0x6e2>
 800797e:	460b      	mov	r3, r1
 8007980:	3101      	adds	r1, #1
 8007982:	45a8      	cmp	r8, r5
 8007984:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007988:	54e6      	strb	r6, [r4, r3]
 800798a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800798e:	f000 8756 	beq.w	800883e <d_print_comp_inner+0x158e>
 8007992:	29ff      	cmp	r1, #255	; 0xff
 8007994:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007998:	d1f1      	bne.n	800797e <d_print_comp_inner+0x6ce>
 800799a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800799e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80079a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80079a6:	4620      	mov	r0, r4
 80079a8:	4798      	blx	r3
 80079aa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80079ae:	2101      	movs	r1, #1
 80079b0:	440b      	add	r3, r1
 80079b2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80079b6:	2300      	movs	r3, #0
 80079b8:	e7e3      	b.n	8007982 <d_print_comp_inner+0x6d2>
 80079ba:	686a      	ldr	r2, [r5, #4]
 80079bc:	68ae      	ldr	r6, [r5, #8]
 80079be:	b10a      	cbz	r2, 80079c4 <d_print_comp_inner+0x714>
 80079c0:	f002 f88e 	bl	8009ae0 <d_print_comp>
 80079c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80079c8:	2bff      	cmp	r3, #255	; 0xff
 80079ca:	f001 8484 	beq.w	80092d6 <d_print_comp_inner+0x2026>
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	257b      	movs	r5, #123	; 0x7b
 80079d2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80079d6:	4639      	mov	r1, r7
 80079d8:	54e5      	strb	r5, [r4, r3]
 80079da:	4632      	mov	r2, r6
 80079dc:	4620      	mov	r0, r4
 80079de:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80079e2:	f002 f87d 	bl	8009ae0 <d_print_comp>
 80079e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80079ea:	29ff      	cmp	r1, #255	; 0xff
 80079ec:	f001 8367 	beq.w	80090be <d_print_comp_inner+0x1e0e>
 80079f0:	1c4a      	adds	r2, r1, #1
 80079f2:	237d      	movs	r3, #125	; 0x7d
 80079f4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80079f8:	5463      	strb	r3, [r4, r1]
 80079fa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80079fe:	e519      	b.n	8007434 <d_print_comp_inner+0x184>
 8007a00:	686a      	ldr	r2, [r5, #4]
 8007a02:	b10a      	cbz	r2, 8007a08 <d_print_comp_inner+0x758>
 8007a04:	f002 f86c 	bl	8009ae0 <d_print_comp>
 8007a08:	68ab      	ldr	r3, [r5, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f43f ad12 	beq.w	8007434 <d_print_comp_inner+0x184>
 8007a10:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 8007a14:	2efd      	cmp	r6, #253	; 0xfd
 8007a16:	f201 830b 	bhi.w	8009030 <d_print_comp_inner+0x1d80>
 8007a1a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007a7c <d_print_comp_inner+0x7cc>
 8007a1e:	f04f 0a00 	mov.w	sl, #0
 8007a22:	f108 0b02 	add.w	fp, r8, #2
 8007a26:	4631      	mov	r1, r6
 8007a28:	e009      	b.n	8007a3e <d_print_comp_inner+0x78e>
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	3101      	adds	r1, #1
 8007a2e:	45c3      	cmp	fp, r8
 8007a30:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007a34:	54e6      	strb	r6, [r4, r3]
 8007a36:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007a3a:	f001 8060 	beq.w	8008afe <d_print_comp_inner+0x184e>
 8007a3e:	29ff      	cmp	r1, #255	; 0xff
 8007a40:	f818 6b01 	ldrb.w	r6, [r8], #1
 8007a44:	d1f1      	bne.n	8007a2a <d_print_comp_inner+0x77a>
 8007a46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007a4a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8007a4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007a52:	4620      	mov	r0, r4
 8007a54:	4798      	blx	r3
 8007a56:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	440b      	add	r3, r1
 8007a5e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007a62:	2300      	movs	r3, #0
 8007a64:	e7e3      	b.n	8007a2e <d_print_comp_inner+0x77e>
 8007a66:	bf00      	nop
 8007a68:	080159fc 	.word	0x080159fc
 8007a6c:	0801581c 	.word	0x0801581c
 8007a70:	0801595f 	.word	0x0801595f
 8007a74:	0801599f 	.word	0x0801599f
 8007a78:	08015993 	.word	0x08015993
 8007a7c:	08015990 	.word	0x08015990
 8007a80:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f041 8186 	bne.w	8008d96 <d_print_comp_inner+0x1ae6>
 8007a8a:	686a      	ldr	r2, [r5, #4]
 8007a8c:	4bd3      	ldr	r3, [pc, #844]	; (8007ddc <d_print_comp_inner+0xb2c>)
 8007a8e:	6851      	ldr	r1, [r2, #4]
 8007a90:	4299      	cmp	r1, r3
 8007a92:	f001 817c 	beq.w	8008d8e <d_print_comp_inner+0x1ade>
 8007a96:	4639      	mov	r1, r7
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f002 f821 	bl	8009ae0 <d_print_comp>
 8007a9e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007aa2:	2bff      	cmp	r3, #255	; 0xff
 8007aa4:	f001 85be 	beq.w	8009624 <d_print_comp_inner+0x2374>
 8007aa8:	1c59      	adds	r1, r3, #1
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ab0:	54e2      	strb	r2, [r4, r3]
 8007ab2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007ab6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f001 8100 	beq.w	8008cc0 <d_print_comp_inner+0x1a10>
 8007ac0:	4dc7      	ldr	r5, [pc, #796]	; (8007de0 <d_print_comp_inner+0xb30>)
 8007ac2:	f04f 0800 	mov.w	r8, #0
 8007ac6:	1daf      	adds	r7, r5, #6
 8007ac8:	e009      	b.n	8007ade <d_print_comp_inner+0x82e>
 8007aca:	460b      	mov	r3, r1
 8007acc:	3101      	adds	r1, #1
 8007ace:	42bd      	cmp	r5, r7
 8007ad0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ad4:	54e6      	strb	r6, [r4, r3]
 8007ad6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007ada:	f43f acab 	beq.w	8007434 <d_print_comp_inner+0x184>
 8007ade:	29ff      	cmp	r1, #255	; 0xff
 8007ae0:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007ae4:	d1f1      	bne.n	8007aca <d_print_comp_inner+0x81a>
 8007ae6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007aea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007aee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007af2:	4620      	mov	r0, r4
 8007af4:	4798      	blx	r3
 8007af6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007afa:	2101      	movs	r1, #1
 8007afc:	440b      	add	r3, r1
 8007afe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007b02:	2300      	movs	r3, #0
 8007b04:	e7e3      	b.n	8007ace <d_print_comp_inner+0x81e>
 8007b06:	2301      	movs	r3, #1
 8007b08:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007b0c:	e492      	b.n	8007434 <d_print_comp_inner+0x184>
 8007b0e:	4eb5      	ldr	r6, [pc, #724]	; (8007de4 <d_print_comp_inner+0xb34>)
 8007b10:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007b14:	f106 0a0e 	add.w	sl, r6, #14
 8007b18:	f04f 0900 	mov.w	r9, #0
 8007b1c:	e00a      	b.n	8007b34 <d_print_comp_inner+0x884>
 8007b1e:	460b      	mov	r3, r1
 8007b20:	3101      	adds	r1, #1
 8007b22:	45b2      	cmp	sl, r6
 8007b24:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007b28:	f804 8003 	strb.w	r8, [r4, r3]
 8007b2c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007b30:	f000 867e 	beq.w	8008830 <d_print_comp_inner+0x1580>
 8007b34:	29ff      	cmp	r1, #255	; 0xff
 8007b36:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007b3a:	d1f0      	bne.n	8007b1e <d_print_comp_inner+0x86e>
 8007b3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007b40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007b44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4798      	blx	r3
 8007b4c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007b50:	2101      	movs	r1, #1
 8007b52:	440b      	add	r3, r1
 8007b54:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e7e2      	b.n	8007b22 <d_print_comp_inner+0x872>
 8007b5c:	686a      	ldr	r2, [r5, #4]
 8007b5e:	7811      	ldrb	r1, [r2, #0]
 8007b60:	2927      	cmp	r1, #39	; 0x27
 8007b62:	f001 81a6 	beq.w	8008eb2 <d_print_comp_inner+0x1c02>
 8007b66:	2600      	movs	r6, #0
 8007b68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007b6c:	29ff      	cmp	r1, #255	; 0xff
 8007b6e:	f001 8428 	beq.w	80093c2 <d_print_comp_inner+0x2112>
 8007b72:	1c4a      	adds	r2, r1, #1
 8007b74:	2328      	movs	r3, #40	; 0x28
 8007b76:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007b7a:	5463      	strb	r3, [r4, r1]
 8007b7c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007b80:	686a      	ldr	r2, [r5, #4]
 8007b82:	4639      	mov	r1, r7
 8007b84:	4620      	mov	r0, r4
 8007b86:	f001 ffab 	bl	8009ae0 <d_print_comp>
 8007b8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007b8e:	2bff      	cmp	r3, #255	; 0xff
 8007b90:	f001 83ed 	beq.w	800936e <d_print_comp_inner+0x20be>
 8007b94:	1c59      	adds	r1, r3, #1
 8007b96:	2229      	movs	r2, #41	; 0x29
 8007b98:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007b9c:	54e2      	strb	r2, [r4, r3]
 8007b9e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8007ba2:	782b      	ldrb	r3, [r5, #0]
 8007ba4:	2b3c      	cmp	r3, #60	; 0x3c
 8007ba6:	f001 827e 	beq.w	80090a6 <d_print_comp_inner+0x1df6>
 8007baa:	2e08      	cmp	r6, #8
 8007bac:	f001 8221 	beq.w	8008ff2 <d_print_comp_inner+0x1d42>
 8007bb0:	68aa      	ldr	r2, [r5, #8]
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f001 ff93 	bl	8009ae0 <d_print_comp>
 8007bba:	e43b      	b.n	8007434 <d_print_comp_inner+0x184>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8007bc2:	e437      	b.n	8007434 <d_print_comp_inner+0x184>
 8007bc4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8007bc8:	ab14      	add	r3, sp, #80	; 0x50
 8007bca:	f843 2d40 	str.w	r2, [r3, #-64]!
 8007bce:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8007bd2:	f8d0 6110 	ldr.w	r6, [r0, #272]	; 0x110
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	68aa      	ldr	r2, [r5, #8]
 8007bda:	9306      	str	r3, [sp, #24]
 8007bdc:	9505      	str	r5, [sp, #20]
 8007bde:	9607      	str	r6, [sp, #28]
 8007be0:	f001 ff7e 	bl	8009ae0 <d_print_comp>
 8007be4:	9b06      	ldr	r3, [sp, #24]
 8007be6:	b923      	cbnz	r3, 8007bf2 <d_print_comp_inner+0x942>
 8007be8:	462a      	mov	r2, r5
 8007bea:	4639      	mov	r1, r7
 8007bec:	4620      	mov	r0, r4
 8007bee:	f001 ff87 	bl	8009b00 <d_print_mod>
 8007bf2:	9b04      	ldr	r3, [sp, #16]
 8007bf4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8007bf8:	e41c      	b.n	8007434 <d_print_comp_inner+0x184>
 8007bfa:	f8d0 a114 	ldr.w	sl, [r0, #276]	; 0x114
 8007bfe:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 8007c02:	4656      	mov	r6, sl
 8007c04:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8007c08:	f849 ad40 	str.w	sl, [r9, #-64]!
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f8cd a000 	str.w	sl, [sp]
 8007c12:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8007c16:	9505      	str	r5, [sp, #20]
 8007c18:	9207      	str	r2, [sp, #28]
 8007c1a:	9306      	str	r3, [sp, #24]
 8007c1c:	2e00      	cmp	r6, #0
 8007c1e:	f001 8585 	beq.w	800972c <d_print_comp_inner+0x247c>
 8007c22:	6873      	ldr	r3, [r6, #4]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	3b19      	subs	r3, #25
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	f201 857f 	bhi.w	800972c <d_print_comp_inner+0x247c>
 8007c2e:	46ac      	mov	ip, r5
 8007c30:	f04f 0801 	mov.w	r8, #1
 8007c34:	464d      	mov	r5, r9
 8007c36:	e004      	b.n	8007c42 <d_print_comp_inner+0x992>
 8007c38:	6873      	ldr	r3, [r6, #4]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	3b19      	subs	r3, #25
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d81e      	bhi.n	8007c80 <d_print_comp_inner+0x9d0>
 8007c42:	68b3      	ldr	r3, [r6, #8]
 8007c44:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007c48:	b9bb      	cbnz	r3, 8007c7a <d_print_comp_inner+0x9ca>
 8007c4a:	f1b8 0f03 	cmp.w	r8, #3
 8007c4e:	f201 82d0 	bhi.w	80091f2 <d_print_comp_inner+0x1f42>
 8007c52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007c56:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 8007c5a:	eb0e 0b0a 	add.w	fp, lr, sl
 8007c5e:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
 8007c62:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8007c66:	f84b 5c40 	str.w	r5, [fp, #-64]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	eb09 050a 	add.w	r5, r9, sl
 8007c70:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8007c74:	f108 0801 	add.w	r8, r8, #1
 8007c78:	60b3      	str	r3, [r6, #8]
 8007c7a:	6836      	ldr	r6, [r6, #0]
 8007c7c:	2e00      	cmp	r6, #0
 8007c7e:	d1db      	bne.n	8007c38 <d_print_comp_inner+0x988>
 8007c80:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8007c84:	4639      	mov	r1, r7
 8007c86:	4620      	mov	r0, r4
 8007c88:	4665      	mov	r5, ip
 8007c8a:	f001 ff29 	bl	8009ae0 <d_print_comp>
 8007c8e:	9a00      	ldr	r2, [sp, #0]
 8007c90:	9b06      	ldr	r3, [sp, #24]
 8007c92:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f47f abcc 	bne.w	8007434 <d_print_comp_inner+0x184>
 8007c9c:	f1b8 0f01 	cmp.w	r8, #1
 8007ca0:	d00e      	beq.n	8007cc0 <d_print_comp_inner+0xa10>
 8007ca2:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 8007ca6:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8007caa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007cae:	4639      	mov	r1, r7
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f001 ff25 	bl	8009b00 <d_print_mod>
 8007cb6:	f1b8 0f01 	cmp.w	r8, #1
 8007cba:	f1a9 0910 	sub.w	r9, r9, #16
 8007cbe:	d1f2      	bne.n	8007ca6 <d_print_comp_inner+0x9f6>
 8007cc0:	1d2a      	adds	r2, r5, #4
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f002 fad7 	bl	800a27c <d_print_array_type.isra.10>
 8007cce:	f7ff bbb1 	b.w	8007434 <d_print_comp_inner+0x184>
 8007cd2:	068b      	lsls	r3, r1, #26
 8007cd4:	f101 8048 	bmi.w	8008d68 <d_print_comp_inner+0x1ab8>
 8007cd8:	686b      	ldr	r3, [r5, #4]
 8007cda:	b11b      	cbz	r3, 8007ce4 <d_print_comp_inner+0xa34>
 8007cdc:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8007ce0:	f001 82ca 	beq.w	8009278 <d_print_comp_inner+0x1fc8>
 8007ce4:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 8007ce8:	f105 0208 	add.w	r2, r5, #8
 8007cec:	4639      	mov	r1, r7
 8007cee:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f002 fb9e 	bl	800a434 <d_print_function_type.isra.11>
 8007cf8:	f7ff bb9c 	b.w	8007434 <d_print_comp_inner+0x184>
 8007cfc:	68ab      	ldr	r3, [r5, #8]
 8007cfe:	781a      	ldrb	r2, [r3, #0]
 8007d00:	2a39      	cmp	r2, #57	; 0x39
 8007d02:	f47f ab9f 	bne.w	8007444 <d_print_comp_inner+0x194>
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	7811      	ldrb	r1, [r2, #0]
 8007d0a:	293a      	cmp	r1, #58	; 0x3a
 8007d0c:	f47f ab9a 	bne.w	8007444 <d_print_comp_inner+0x194>
 8007d10:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8007d14:	4934      	ldr	r1, [pc, #208]	; (8007de8 <d_print_comp_inner+0xb38>)
 8007d16:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8007d1a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007d1e:	6800      	ldr	r0, [r0, #0]
 8007d20:	6856      	ldr	r6, [r2, #4]
 8007d22:	6895      	ldr	r5, [r2, #8]
 8007d24:	f007 f84a 	bl	800edbc <strcmp>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	f001 850d 	beq.w	8009748 <d_print_comp_inner+0x2498>
 8007d2e:	2204      	movs	r2, #4
 8007d30:	492e      	ldr	r1, [pc, #184]	; (8007dec <d_print_comp_inner+0xb3c>)
 8007d32:	4620      	mov	r0, r4
 8007d34:	f7fe fffc 	bl	8006d30 <d_append_buffer>
 8007d38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d3c:	b183      	cbz	r3, 8007d60 <d_print_comp_inner+0xab0>
 8007d3e:	4639      	mov	r1, r7
 8007d40:	4642      	mov	r2, r8
 8007d42:	4620      	mov	r0, r4
 8007d44:	f002 fd7e 	bl	800a844 <d_print_subexpr>
 8007d48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8007d4c:	29ff      	cmp	r1, #255	; 0xff
 8007d4e:	f001 8628 	beq.w	80099a2 <d_print_comp_inner+0x26f2>
 8007d52:	2320      	movs	r3, #32
 8007d54:	1c4a      	adds	r2, r1, #1
 8007d56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007d5a:	5463      	strb	r3, [r4, r1]
 8007d5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8007d60:	4632      	mov	r2, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	4620      	mov	r0, r4
 8007d66:	f001 febb 	bl	8009ae0 <d_print_comp>
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	f43f ab62 	beq.w	8007434 <d_print_comp_inner+0x184>
 8007d70:	462a      	mov	r2, r5
 8007d72:	4639      	mov	r1, r7
 8007d74:	4620      	mov	r0, r4
 8007d76:	f002 fd65 	bl	800a844 <d_print_subexpr>
 8007d7a:	f7ff bb5b 	b.w	8007434 <d_print_comp_inner+0x184>
 8007d7e:	4e1c      	ldr	r6, [pc, #112]	; (8007df0 <d_print_comp_inner+0xb40>)
 8007d80:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007d84:	f106 0a11 	add.w	sl, r6, #17
 8007d88:	f04f 0900 	mov.w	r9, #0
 8007d8c:	e00a      	b.n	8007da4 <d_print_comp_inner+0xaf4>
 8007d8e:	460b      	mov	r3, r1
 8007d90:	3101      	adds	r1, #1
 8007d92:	4556      	cmp	r6, sl
 8007d94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007d98:	f804 8003 	strb.w	r8, [r4, r3]
 8007d9c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007da0:	f000 84bf 	beq.w	8008722 <d_print_comp_inner+0x1472>
 8007da4:	29ff      	cmp	r1, #255	; 0xff
 8007da6:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007daa:	d1f0      	bne.n	8007d8e <d_print_comp_inner+0xade>
 8007dac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007db0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007db4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007db8:	4620      	mov	r0, r4
 8007dba:	4798      	blx	r3
 8007dbc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	440b      	add	r3, r1
 8007dc4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e7e2      	b.n	8007d92 <d_print_comp_inner+0xae2>
 8007dcc:	4e09      	ldr	r6, [pc, #36]	; (8007df4 <d_print_comp_inner+0xb44>)
 8007dce:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007dd2:	f106 0a15 	add.w	sl, r6, #21
 8007dd6:	f04f 0900 	mov.w	r9, #0
 8007dda:	e018      	b.n	8007e0e <d_print_comp_inner+0xb5e>
 8007ddc:	0801497c 	.word	0x0801497c
 8007de0:	08015980 	.word	0x08015980
 8007de4:	080159eb 	.word	0x080159eb
 8007de8:	080159c0 	.word	0x080159c0
 8007dec:	080159c8 	.word	0x080159c8
 8007df0:	080158a7 	.word	0x080158a7
 8007df4:	080158a3 	.word	0x080158a3
 8007df8:	460b      	mov	r3, r1
 8007dfa:	3101      	adds	r1, #1
 8007dfc:	45b2      	cmp	sl, r6
 8007dfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e02:	f804 8003 	strb.w	r8, [r4, r3]
 8007e06:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007e0a:	f000 8483 	beq.w	8008714 <d_print_comp_inner+0x1464>
 8007e0e:	29ff      	cmp	r1, #255	; 0xff
 8007e10:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007e14:	d1f0      	bne.n	8007df8 <d_print_comp_inner+0xb48>
 8007e16:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e1a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007e1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007e22:	4620      	mov	r0, r4
 8007e24:	4798      	blx	r3
 8007e26:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	440b      	add	r3, r1
 8007e2e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007e32:	2300      	movs	r3, #0
 8007e34:	e7e2      	b.n	8007dfc <d_print_comp_inner+0xb4c>
 8007e36:	4eda      	ldr	r6, [pc, #872]	; (80081a0 <d_print_comp_inner+0xef0>)
 8007e38:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007e3c:	f106 0a10 	add.w	sl, r6, #16
 8007e40:	f04f 0900 	mov.w	r9, #0
 8007e44:	e00a      	b.n	8007e5c <d_print_comp_inner+0xbac>
 8007e46:	460b      	mov	r3, r1
 8007e48:	3101      	adds	r1, #1
 8007e4a:	45b2      	cmp	sl, r6
 8007e4c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e50:	f804 8003 	strb.w	r8, [r4, r3]
 8007e54:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007e58:	f000 8455 	beq.w	8008706 <d_print_comp_inner+0x1456>
 8007e5c:	29ff      	cmp	r1, #255	; 0xff
 8007e5e:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007e62:	d1f0      	bne.n	8007e46 <d_print_comp_inner+0xb96>
 8007e64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007e68:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007e6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007e70:	4620      	mov	r0, r4
 8007e72:	4798      	blx	r3
 8007e74:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007e78:	2101      	movs	r1, #1
 8007e7a:	440b      	add	r3, r1
 8007e7c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007e80:	2300      	movs	r3, #0
 8007e82:	e7e2      	b.n	8007e4a <d_print_comp_inner+0xb9a>
 8007e84:	4ec7      	ldr	r6, [pc, #796]	; (80081a4 <d_print_comp_inner+0xef4>)
 8007e86:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007e8a:	f106 0a12 	add.w	sl, r6, #18
 8007e8e:	f04f 0900 	mov.w	r9, #0
 8007e92:	e00a      	b.n	8007eaa <d_print_comp_inner+0xbfa>
 8007e94:	460b      	mov	r3, r1
 8007e96:	3101      	adds	r1, #1
 8007e98:	45b2      	cmp	sl, r6
 8007e9a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007e9e:	f804 8003 	strb.w	r8, [r4, r3]
 8007ea2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007ea6:	f000 85d5 	beq.w	8008a54 <d_print_comp_inner+0x17a4>
 8007eaa:	29ff      	cmp	r1, #255	; 0xff
 8007eac:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007eb0:	d1f0      	bne.n	8007e94 <d_print_comp_inner+0xbe4>
 8007eb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007eb6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007eba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4798      	blx	r3
 8007ec2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	440b      	add	r3, r1
 8007eca:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e7e2      	b.n	8007e98 <d_print_comp_inner+0xbe8>
 8007ed2:	68af      	ldr	r7, [r5, #8]
 8007ed4:	686d      	ldr	r5, [r5, #4]
 8007ed6:	2f00      	cmp	r7, #0
 8007ed8:	f43f aaac 	beq.w	8007434 <d_print_comp_inner+0x184>
 8007edc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007ee0:	442f      	add	r7, r5
 8007ee2:	f04f 0800 	mov.w	r8, #0
 8007ee6:	e009      	b.n	8007efc <d_print_comp_inner+0xc4c>
 8007ee8:	460b      	mov	r3, r1
 8007eea:	3101      	adds	r1, #1
 8007eec:	42af      	cmp	r7, r5
 8007eee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007ef2:	54e6      	strb	r6, [r4, r3]
 8007ef4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8007ef8:	f43f aa9c 	beq.w	8007434 <d_print_comp_inner+0x184>
 8007efc:	29ff      	cmp	r1, #255	; 0xff
 8007efe:	f815 6b01 	ldrb.w	r6, [r5], #1
 8007f02:	d1f1      	bne.n	8007ee8 <d_print_comp_inner+0xc38>
 8007f04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f08:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8007f0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f10:	4620      	mov	r0, r4
 8007f12:	4798      	blx	r3
 8007f14:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f18:	2101      	movs	r1, #1
 8007f1a:	440b      	add	r3, r1
 8007f1c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f20:	2300      	movs	r3, #0
 8007f22:	e7e3      	b.n	8007eec <d_print_comp_inner+0xc3c>
 8007f24:	4ea0      	ldr	r6, [pc, #640]	; (80081a8 <d_print_comp_inner+0xef8>)
 8007f26:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f2a:	f106 0a11 	add.w	sl, r6, #17
 8007f2e:	f04f 0900 	mov.w	r9, #0
 8007f32:	e00a      	b.n	8007f4a <d_print_comp_inner+0xc9a>
 8007f34:	460b      	mov	r3, r1
 8007f36:	3101      	adds	r1, #1
 8007f38:	45b2      	cmp	sl, r6
 8007f3a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f3e:	f804 8003 	strb.w	r8, [r4, r3]
 8007f42:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007f46:	f000 858c 	beq.w	8008a62 <d_print_comp_inner+0x17b2>
 8007f4a:	29ff      	cmp	r1, #255	; 0xff
 8007f4c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007f50:	d1f0      	bne.n	8007f34 <d_print_comp_inner+0xc84>
 8007f52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007f56:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007f5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4798      	blx	r3
 8007f62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007f66:	2101      	movs	r1, #1
 8007f68:	440b      	add	r3, r1
 8007f6a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e7e2      	b.n	8007f38 <d_print_comp_inner+0xc88>
 8007f72:	4e8e      	ldr	r6, [pc, #568]	; (80081ac <d_print_comp_inner+0xefc>)
 8007f74:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007f78:	f106 0a15 	add.w	sl, r6, #21
 8007f7c:	f04f 0900 	mov.w	r9, #0
 8007f80:	e00a      	b.n	8007f98 <d_print_comp_inner+0xce8>
 8007f82:	460b      	mov	r3, r1
 8007f84:	3101      	adds	r1, #1
 8007f86:	45b2      	cmp	sl, r6
 8007f88:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007f8c:	f804 8003 	strb.w	r8, [r4, r3]
 8007f90:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007f94:	f000 8533 	beq.w	80089fe <d_print_comp_inner+0x174e>
 8007f98:	29ff      	cmp	r1, #255	; 0xff
 8007f9a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007f9e:	d1f0      	bne.n	8007f82 <d_print_comp_inner+0xcd2>
 8007fa0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007fa4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007fa8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007fac:	4620      	mov	r0, r4
 8007fae:	4798      	blx	r3
 8007fb0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	440b      	add	r3, r1
 8007fb8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e7e2      	b.n	8007f86 <d_print_comp_inner+0xcd6>
 8007fc0:	4e7b      	ldr	r6, [pc, #492]	; (80081b0 <d_print_comp_inner+0xf00>)
 8007fc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8007fc6:	f106 0a19 	add.w	sl, r6, #25
 8007fca:	f04f 0900 	mov.w	r9, #0
 8007fce:	e00a      	b.n	8007fe6 <d_print_comp_inner+0xd36>
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	3101      	adds	r1, #1
 8007fd4:	45b2      	cmp	sl, r6
 8007fd6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8007fda:	f804 8003 	strb.w	r8, [r4, r3]
 8007fde:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8007fe2:	f000 8545 	beq.w	8008a70 <d_print_comp_inner+0x17c0>
 8007fe6:	29ff      	cmp	r1, #255	; 0xff
 8007fe8:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8007fec:	d1f0      	bne.n	8007fd0 <d_print_comp_inner+0xd20>
 8007fee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8007ff2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8007ff6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	4798      	blx	r3
 8007ffe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008002:	2101      	movs	r1, #1
 8008004:	440b      	add	r3, r1
 8008006:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800800a:	2300      	movs	r3, #0
 800800c:	e7e2      	b.n	8007fd4 <d_print_comp_inner+0xd24>
 800800e:	4e69      	ldr	r6, [pc, #420]	; (80081b4 <d_print_comp_inner+0xf04>)
 8008010:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008014:	f106 0a16 	add.w	sl, r6, #22
 8008018:	f04f 0900 	mov.w	r9, #0
 800801c:	e00a      	b.n	8008034 <d_print_comp_inner+0xd84>
 800801e:	460b      	mov	r3, r1
 8008020:	3101      	adds	r1, #1
 8008022:	45b2      	cmp	sl, r6
 8008024:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008028:	f804 8003 	strb.w	r8, [r4, r3]
 800802c:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008030:	f000 84d7 	beq.w	80089e2 <d_print_comp_inner+0x1732>
 8008034:	29ff      	cmp	r1, #255	; 0xff
 8008036:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800803a:	d1f0      	bne.n	800801e <d_print_comp_inner+0xd6e>
 800803c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008040:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008044:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008048:	4620      	mov	r0, r4
 800804a:	4798      	blx	r3
 800804c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008050:	2101      	movs	r1, #1
 8008052:	440b      	add	r3, r1
 8008054:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008058:	2300      	movs	r3, #0
 800805a:	e7e2      	b.n	8008022 <d_print_comp_inner+0xd72>
 800805c:	4e56      	ldr	r6, [pc, #344]	; (80081b8 <d_print_comp_inner+0xf08>)
 800805e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008062:	f106 0a13 	add.w	sl, r6, #19
 8008066:	f04f 0900 	mov.w	r9, #0
 800806a:	e00a      	b.n	8008082 <d_print_comp_inner+0xdd2>
 800806c:	460b      	mov	r3, r1
 800806e:	3101      	adds	r1, #1
 8008070:	4556      	cmp	r6, sl
 8008072:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008076:	f804 8003 	strb.w	r8, [r4, r3]
 800807a:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800807e:	f000 84b7 	beq.w	80089f0 <d_print_comp_inner+0x1740>
 8008082:	29ff      	cmp	r1, #255	; 0xff
 8008084:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008088:	d1f0      	bne.n	800806c <d_print_comp_inner+0xdbc>
 800808a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800808e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008092:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008096:	4620      	mov	r0, r4
 8008098:	4798      	blx	r3
 800809a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800809e:	2101      	movs	r1, #1
 80080a0:	440b      	add	r3, r1
 80080a2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80080a6:	2300      	movs	r3, #0
 80080a8:	e7e2      	b.n	8008070 <d_print_comp_inner+0xdc0>
 80080aa:	4e44      	ldr	r6, [pc, #272]	; (80081bc <d_print_comp_inner+0xf0c>)
 80080ac:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80080b0:	f106 0a0f 	add.w	sl, r6, #15
 80080b4:	f04f 0900 	mov.w	r9, #0
 80080b8:	e00a      	b.n	80080d0 <d_print_comp_inner+0xe20>
 80080ba:	460b      	mov	r3, r1
 80080bc:	3101      	adds	r1, #1
 80080be:	4556      	cmp	r6, sl
 80080c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80080c4:	f804 8003 	strb.w	r8, [r4, r3]
 80080c8:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80080cc:	f000 830d 	beq.w	80086ea <d_print_comp_inner+0x143a>
 80080d0:	29ff      	cmp	r1, #255	; 0xff
 80080d2:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 80080d6:	d1f0      	bne.n	80080ba <d_print_comp_inner+0xe0a>
 80080d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80080dc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80080e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80080e4:	4620      	mov	r0, r4
 80080e6:	4798      	blx	r3
 80080e8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80080ec:	2101      	movs	r1, #1
 80080ee:	440b      	add	r3, r1
 80080f0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80080f4:	2300      	movs	r3, #0
 80080f6:	e7e2      	b.n	80080be <d_print_comp_inner+0xe0e>
 80080f8:	4e31      	ldr	r6, [pc, #196]	; (80081c0 <d_print_comp_inner+0xf10>)
 80080fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80080fe:	f106 0a1a 	add.w	sl, r6, #26
 8008102:	f04f 0900 	mov.w	r9, #0
 8008106:	e00a      	b.n	800811e <d_print_comp_inner+0xe6e>
 8008108:	460b      	mov	r3, r1
 800810a:	3101      	adds	r1, #1
 800810c:	4556      	cmp	r6, sl
 800810e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008112:	f804 8003 	strb.w	r8, [r4, r3]
 8008116:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 800811a:	f000 82ed 	beq.w	80086f8 <d_print_comp_inner+0x1448>
 800811e:	29ff      	cmp	r1, #255	; 0xff
 8008120:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008124:	d1f0      	bne.n	8008108 <d_print_comp_inner+0xe58>
 8008126:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800812a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800812e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008132:	4620      	mov	r0, r4
 8008134:	4798      	blx	r3
 8008136:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800813a:	2101      	movs	r1, #1
 800813c:	440b      	add	r3, r1
 800813e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008142:	2300      	movs	r3, #0
 8008144:	e7e2      	b.n	800810c <d_print_comp_inner+0xe5c>
 8008146:	f011 0704 	ands.w	r7, r1, #4
 800814a:	f040 8539 	bne.w	8008bc0 <d_print_comp_inner+0x1910>
 800814e:	686a      	ldr	r2, [r5, #4]
 8008150:	6853      	ldr	r3, [r2, #4]
 8008152:	6815      	ldr	r5, [r2, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f43f a96d 	beq.w	8007434 <d_print_comp_inner+0x184>
 800815a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800815e:	eb05 0803 	add.w	r8, r5, r3
 8008162:	e009      	b.n	8008178 <d_print_comp_inner+0xec8>
 8008164:	460b      	mov	r3, r1
 8008166:	3101      	adds	r1, #1
 8008168:	4545      	cmp	r5, r8
 800816a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800816e:	54e6      	strb	r6, [r4, r3]
 8008170:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008174:	f43f a95e 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008178:	29ff      	cmp	r1, #255	; 0xff
 800817a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800817e:	d1f1      	bne.n	8008164 <d_print_comp_inner+0xeb4>
 8008180:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008184:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8008188:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800818c:	4620      	mov	r0, r4
 800818e:	4798      	blx	r3
 8008190:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008194:	2101      	movs	r1, #1
 8008196:	440b      	add	r3, r1
 8008198:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800819c:	2300      	movs	r3, #0
 800819e:	e7e3      	b.n	8008168 <d_print_comp_inner+0xeb8>
 80081a0:	0801588f 	.word	0x0801588f
 80081a4:	0801587b 	.word	0x0801587b
 80081a8:	08015947 	.word	0x08015947
 80081ac:	0801592f 	.word	0x0801592f
 80081b0:	08015913 	.word	0x08015913
 80081b4:	080158fb 	.word	0x080158fb
 80081b8:	080158e7 	.word	0x080158e7
 80081bc:	080158d7 	.word	0x080158d7
 80081c0:	080158bb 	.word	0x080158bb
 80081c4:	6868      	ldr	r0, [r5, #4]
 80081c6:	7803      	ldrb	r3, [r0, #0]
 80081c8:	2b05      	cmp	r3, #5
 80081ca:	f000 8697 	beq.w	8008efc <d_print_comp_inner+0x1c4c>
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	2b23      	cmp	r3, #35	; 0x23
 80081d4:	f000 8596 	beq.w	8008d04 <d_print_comp_inner+0x1a54>
 80081d8:	782a      	ldrb	r2, [r5, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	f000 8592 	beq.w	8008d04 <d_print_comp_inner+0x1a54>
 80081e0:	2b24      	cmp	r3, #36	; 0x24
 80081e2:	f001 808b 	beq.w	80092fc <d_print_comp_inner+0x204c>
 80081e6:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 80081ea:	ab14      	add	r3, sp, #80	; 0x50
 80081ec:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80081f0:	f843 0d40 	str.w	r0, [r3, #-64]!
 80081f4:	2200      	movs	r2, #0
 80081f6:	9505      	str	r5, [sp, #20]
 80081f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80081fc:	9107      	str	r1, [sp, #28]
 80081fe:	9206      	str	r2, [sp, #24]
 8008200:	686a      	ldr	r2, [r5, #4]
 8008202:	4639      	mov	r1, r7
 8008204:	4620      	mov	r0, r4
 8008206:	f001 fc6b 	bl	8009ae0 <d_print_comp>
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 848d 	beq.w	8008b2c <d_print_comp_inner+0x187c>
 8008212:	9b04      	ldr	r3, [sp, #16]
 8008214:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8008218:	f1b8 0f00 	cmp.w	r8, #0
 800821c:	f43f a90a 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008220:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8008224:	f7ff b906 	b.w	8007434 <d_print_comp_inner+0x184>
 8008228:	f8d0 0114 	ldr.w	r0, [r0, #276]	; 0x114
 800822c:	f04f 0800 	mov.w	r8, #0
 8008230:	e7db      	b.n	80081ea <d_print_comp_inner+0xf3a>
 8008232:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8008236:	f1bc 0f00 	cmp.w	ip, #0
 800823a:	f001 831f 	beq.w	800987c <d_print_comp_inner+0x25cc>
 800823e:	4662      	mov	r2, ip
 8008240:	6891      	ldr	r1, [r2, #8]
 8008242:	b951      	cbnz	r1, 800825a <d_print_comp_inner+0xfaa>
 8008244:	6850      	ldr	r0, [r2, #4]
 8008246:	7800      	ldrb	r0, [r0, #0]
 8008248:	f1a0 0e19 	sub.w	lr, r0, #25
 800824c:	f1be 0f02 	cmp.w	lr, #2
 8008250:	f200 8703 	bhi.w	800905a <d_print_comp_inner+0x1daa>
 8008254:	4283      	cmp	r3, r0
 8008256:	f000 8704 	beq.w	8009062 <d_print_comp_inner+0x1db2>
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	2a00      	cmp	r2, #0
 800825e:	d1ef      	bne.n	8008240 <d_print_comp_inner+0xf90>
 8008260:	4660      	mov	r0, ip
 8008262:	4690      	mov	r8, r2
 8008264:	e7c1      	b.n	80081ea <d_print_comp_inner+0xf3a>
 8008266:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800826a:	29ff      	cmp	r1, #255	; 0xff
 800826c:	f000 8769 	beq.w	8009142 <d_print_comp_inner+0x1e92>
 8008270:	1c4a      	adds	r2, r1, #1
 8008272:	237e      	movs	r3, #126	; 0x7e
 8008274:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008278:	5463      	strb	r3, [r4, r1]
 800827a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800827e:	4639      	mov	r1, r7
 8008280:	68aa      	ldr	r2, [r5, #8]
 8008282:	4620      	mov	r0, r4
 8008284:	f001 fc2c 	bl	8009ae0 <d_print_comp>
 8008288:	f7ff b8d4 	b.w	8007434 <d_print_comp_inner+0x184>
 800828c:	686a      	ldr	r2, [r5, #4]
 800828e:	f001 fc27 	bl	8009ae0 <d_print_comp>
 8008292:	f7ff b8cf 	b.w	8007434 <d_print_comp_inner+0x184>
 8008296:	4edd      	ldr	r6, [pc, #884]	; (800860c <d_print_comp_inner+0x135c>)
 8008298:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800829c:	f106 0a0d 	add.w	sl, r6, #13
 80082a0:	f04f 0900 	mov.w	r9, #0
 80082a4:	e00a      	b.n	80082bc <d_print_comp_inner+0x100c>
 80082a6:	460b      	mov	r3, r1
 80082a8:	3101      	adds	r1, #1
 80082aa:	45b2      	cmp	sl, r6
 80082ac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80082b0:	f804 8003 	strb.w	r8, [r4, r3]
 80082b4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80082b8:	f000 83e8 	beq.w	8008a8c <d_print_comp_inner+0x17dc>
 80082bc:	29ff      	cmp	r1, #255	; 0xff
 80082be:	f816 8b01 	ldrb.w	r8, [r6], #1
 80082c2:	d1f0      	bne.n	80082a6 <d_print_comp_inner+0xff6>
 80082c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80082c8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80082cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80082d0:	4620      	mov	r0, r4
 80082d2:	4798      	blx	r3
 80082d4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80082d8:	2101      	movs	r1, #1
 80082da:	440b      	add	r3, r1
 80082dc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80082e0:	2300      	movs	r3, #0
 80082e2:	e7e2      	b.n	80082aa <d_print_comp_inner+0xffa>
 80082e4:	4eca      	ldr	r6, [pc, #808]	; (8008610 <d_print_comp_inner+0x1360>)
 80082e6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80082ea:	f106 0a18 	add.w	sl, r6, #24
 80082ee:	f04f 0900 	mov.w	r9, #0
 80082f2:	e00a      	b.n	800830a <d_print_comp_inner+0x105a>
 80082f4:	460b      	mov	r3, r1
 80082f6:	3101      	adds	r1, #1
 80082f8:	45b2      	cmp	sl, r6
 80082fa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80082fe:	f804 8003 	strb.w	r8, [r4, r3]
 8008302:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008306:	f000 83c8 	beq.w	8008a9a <d_print_comp_inner+0x17ea>
 800830a:	29ff      	cmp	r1, #255	; 0xff
 800830c:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008310:	d1f0      	bne.n	80082f4 <d_print_comp_inner+0x1044>
 8008312:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008316:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800831a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800831e:	4620      	mov	r0, r4
 8008320:	4798      	blx	r3
 8008322:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008326:	2101      	movs	r1, #1
 8008328:	440b      	add	r3, r1
 800832a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800832e:	2300      	movs	r3, #0
 8008330:	e7e2      	b.n	80082f8 <d_print_comp_inner+0x1048>
 8008332:	4eb8      	ldr	r6, [pc, #736]	; (8008614 <d_print_comp_inner+0x1364>)
 8008334:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008338:	f106 0a08 	add.w	sl, r6, #8
 800833c:	f04f 0900 	mov.w	r9, #0
 8008340:	e00a      	b.n	8008358 <d_print_comp_inner+0x10a8>
 8008342:	460b      	mov	r3, r1
 8008344:	3101      	adds	r1, #1
 8008346:	45b2      	cmp	sl, r6
 8008348:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800834c:	f804 8003 	strb.w	r8, [r4, r3]
 8008350:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008354:	f000 833e 	beq.w	80089d4 <d_print_comp_inner+0x1724>
 8008358:	29ff      	cmp	r1, #255	; 0xff
 800835a:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 800835e:	d1f0      	bne.n	8008342 <d_print_comp_inner+0x1092>
 8008360:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008364:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008368:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800836c:	4620      	mov	r0, r4
 800836e:	4798      	blx	r3
 8008370:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008374:	2101      	movs	r1, #1
 8008376:	440b      	add	r3, r1
 8008378:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800837c:	2300      	movs	r3, #0
 800837e:	e7e2      	b.n	8008346 <d_print_comp_inner+0x1096>
 8008380:	4ea5      	ldr	r6, [pc, #660]	; (8008618 <d_print_comp_inner+0x1368>)
 8008382:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008386:	f106 0a0b 	add.w	sl, r6, #11
 800838a:	f04f 0900 	mov.w	r9, #0
 800838e:	e00a      	b.n	80083a6 <d_print_comp_inner+0x10f6>
 8008390:	460b      	mov	r3, r1
 8008392:	3101      	adds	r1, #1
 8008394:	45b2      	cmp	sl, r6
 8008396:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800839a:	f804 8003 	strb.w	r8, [r4, r3]
 800839e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 80083a2:	f000 819b 	beq.w	80086dc <d_print_comp_inner+0x142c>
 80083a6:	29ff      	cmp	r1, #255	; 0xff
 80083a8:	f816 8b01 	ldrb.w	r8, [r6], #1
 80083ac:	d1f0      	bne.n	8008390 <d_print_comp_inner+0x10e0>
 80083ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80083b2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80083b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80083ba:	4620      	mov	r0, r4
 80083bc:	4798      	blx	r3
 80083be:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80083c2:	2101      	movs	r1, #1
 80083c4:	440b      	add	r3, r1
 80083c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80083ca:	2300      	movs	r3, #0
 80083cc:	e7e2      	b.n	8008394 <d_print_comp_inner+0x10e4>
 80083ce:	2300      	movs	r3, #0
 80083d0:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 80083d4:	f8d0 8140 	ldr.w	r8, [r0, #320]	; 0x140
 80083d8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80083dc:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
 80083e0:	074a      	lsls	r2, r1, #29
 80083e2:	686e      	ldr	r6, [r5, #4]
 80083e4:	d505      	bpl.n	80083f2 <d_print_comp_inner+0x1142>
 80083e6:	7833      	ldrb	r3, [r6, #0]
 80083e8:	b91b      	cbnz	r3, 80083f2 <d_print_comp_inner+0x1142>
 80083ea:	68b2      	ldr	r2, [r6, #8]
 80083ec:	2a06      	cmp	r2, #6
 80083ee:	f001 808b 	beq.w	8009508 <d_print_comp_inner+0x2258>
 80083f2:	4632      	mov	r2, r6
 80083f4:	4639      	mov	r1, r7
 80083f6:	4620      	mov	r0, r4
 80083f8:	f001 fb72 	bl	8009ae0 <d_print_comp>
 80083fc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8008400:	2b3c      	cmp	r3, #60	; 0x3c
 8008402:	f000 85e8 	beq.w	8008fd6 <d_print_comp_inner+0x1d26>
 8008406:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800840a:	2bff      	cmp	r3, #255	; 0xff
 800840c:	f000 879c 	beq.w	8009348 <d_print_comp_inner+0x2098>
 8008410:	1c59      	adds	r1, r3, #1
 8008412:	223c      	movs	r2, #60	; 0x3c
 8008414:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008418:	54e2      	strb	r2, [r4, r3]
 800841a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800841e:	4639      	mov	r1, r7
 8008420:	68aa      	ldr	r2, [r5, #8]
 8008422:	4620      	mov	r0, r4
 8008424:	f001 fb5c 	bl	8009ae0 <d_print_comp>
 8008428:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800842c:	2b3e      	cmp	r3, #62	; 0x3e
 800842e:	f000 85c4 	beq.w	8008fba <d_print_comp_inner+0x1d0a>
 8008432:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008436:	2bff      	cmp	r3, #255	; 0xff
 8008438:	f000 8773 	beq.w	8009322 <d_print_comp_inner+0x2072>
 800843c:	1c59      	adds	r1, r3, #1
 800843e:	223e      	movs	r2, #62	; 0x3e
 8008440:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008444:	54e2      	strb	r2, [r4, r3]
 8008446:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800844a:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800844e:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 8008452:	f7fe bfef 	b.w	8007434 <d_print_comp_inner+0x184>
 8008456:	2300      	movs	r3, #0
 8008458:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 800845c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8008460:	686e      	ldr	r6, [r5, #4]
 8008462:	9200      	str	r2, [sp, #0]
 8008464:	2e00      	cmp	r6, #0
 8008466:	f000 8134 	beq.w	80086d2 <d_print_comp_inner+0x1422>
 800846a:	f10d 0910 	add.w	r9, sp, #16
 800846e:	469e      	mov	lr, r3
 8008470:	4618      	mov	r0, r3
 8008472:	464a      	mov	r2, r9
 8008474:	f8d4 c110 	ldr.w	ip, [r4, #272]	; 0x110
 8008478:	7831      	ldrb	r1, [r6, #0]
 800847a:	f10e 0801 	add.w	r8, lr, #1
 800847e:	f1a1 0a1c 	sub.w	sl, r1, #28
 8008482:	f1ba 0f04 	cmp.w	sl, #4
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800848c:	6056      	str	r6, [r2, #4]
 800848e:	6090      	str	r0, [r2, #8]
 8008490:	f8c2 c00c 	str.w	ip, [r2, #12]
 8008494:	4613      	mov	r3, r2
 8008496:	f102 0210 	add.w	r2, r2, #16
 800849a:	f240 8113 	bls.w	80086c4 <d_print_comp_inner+0x1414>
 800849e:	2904      	cmp	r1, #4
 80084a0:	f001 8193 	beq.w	80097ca <d_print_comp_inner+0x251a>
 80084a4:	2902      	cmp	r1, #2
 80084a6:	d137      	bne.n	8008518 <d_print_comp_inner+0x1268>
 80084a8:	f8d6 b008 	ldr.w	fp, [r6, #8]
 80084ac:	f89b 3000 	ldrb.w	r3, [fp]
 80084b0:	2b45      	cmp	r3, #69	; 0x45
 80084b2:	bf08      	it	eq
 80084b4:	f8db b004 	ldreq.w	fp, [fp, #4]
 80084b8:	f89b 3000 	ldrb.w	r3, [fp]
 80084bc:	3b1c      	subs	r3, #28
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d82a      	bhi.n	8008518 <d_print_comp_inner+0x1268>
 80084c2:	f1b8 0f04 	cmp.w	r8, #4
 80084c6:	f000 8104 	beq.w	80086d2 <d_print_comp_inner+0x1422>
 80084ca:	462b      	mov	r3, r5
 80084cc:	eb09 1e0e 	add.w	lr, r9, lr, lsl #4
 80084d0:	46b2      	mov	sl, r6
 80084d2:	465d      	mov	r5, fp
 80084d4:	4666      	mov	r6, ip
 80084d6:	469b      	mov	fp, r3
 80084d8:	46a4      	mov	ip, r4
 80084da:	4674      	mov	r4, lr
 80084dc:	e003      	b.n	80084e6 <d_print_comp_inner+0x1236>
 80084de:	f1b8 0f04 	cmp.w	r8, #4
 80084e2:	f001 81b7 	beq.w	8009854 <d_print_comp_inner+0x25a4>
 80084e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80084ea:	f104 0e10 	add.w	lr, r4, #16
 80084ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80084f2:	4623      	mov	r3, r4
 80084f4:	2200      	movs	r2, #0
 80084f6:	611c      	str	r4, [r3, #16]
 80084f8:	605d      	str	r5, [r3, #4]
 80084fa:	609a      	str	r2, [r3, #8]
 80084fc:	60de      	str	r6, [r3, #12]
 80084fe:	f8cc e114 	str.w	lr, [ip, #276]	; 0x114
 8008502:	686d      	ldr	r5, [r5, #4]
 8008504:	4674      	mov	r4, lr
 8008506:	782b      	ldrb	r3, [r5, #0]
 8008508:	f108 0801 	add.w	r8, r8, #1
 800850c:	3b1c      	subs	r3, #28
 800850e:	2b04      	cmp	r3, #4
 8008510:	d9e5      	bls.n	80084de <d_print_comp_inner+0x122e>
 8008512:	4656      	mov	r6, sl
 8008514:	4664      	mov	r4, ip
 8008516:	465d      	mov	r5, fp
 8008518:	68aa      	ldr	r2, [r5, #8]
 800851a:	4639      	mov	r1, r7
 800851c:	4620      	mov	r0, r4
 800851e:	f001 fadf 	bl	8009ae0 <d_print_comp>
 8008522:	7833      	ldrb	r3, [r6, #0]
 8008524:	2b04      	cmp	r3, #4
 8008526:	f001 8190 	beq.w	800984a <d_print_comp_inner+0x259a>
 800852a:	eb09 1908 	add.w	r9, r9, r8, lsl #4
 800852e:	4645      	mov	r5, r8
 8008530:	46b8      	mov	r8, r7
 8008532:	2620      	movs	r6, #32
 8008534:	f859 7c08 	ldr.w	r7, [r9, #-8]
 8008538:	3d01      	subs	r5, #1
 800853a:	b987      	cbnz	r7, 800855e <d_print_comp_inner+0x12ae>
 800853c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008540:	29ff      	cmp	r1, #255	; 0xff
 8008542:	f001 8172 	beq.w	800982a <d_print_comp_inner+0x257a>
 8008546:	1c4b      	adds	r3, r1, #1
 8008548:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800854c:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 8008550:	5466      	strb	r6, [r4, r1]
 8008552:	4620      	mov	r0, r4
 8008554:	4641      	mov	r1, r8
 8008556:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800855a:	f001 fad1 	bl	8009b00 <d_print_mod>
 800855e:	f1a9 0910 	sub.w	r9, r9, #16
 8008562:	2d00      	cmp	r5, #0
 8008564:	d1e6      	bne.n	8008534 <d_print_comp_inner+0x1284>
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800856c:	f7fe bf62 	b.w	8007434 <d_print_comp_inner+0x184>
 8008570:	686a      	ldr	r2, [r5, #4]
 8008572:	f001 fab5 	bl	8009ae0 <d_print_comp>
 8008576:	f017 0904 	ands.w	r9, r7, #4
 800857a:	f000 8475 	beq.w	8008e68 <d_print_comp_inner+0x1bb8>
 800857e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008582:	29ff      	cmp	r1, #255	; 0xff
 8008584:	f000 87d3 	beq.w	800952e <d_print_comp_inner+0x227e>
 8008588:	1c4a      	adds	r2, r1, #1
 800858a:	232e      	movs	r3, #46	; 0x2e
 800858c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008590:	5463      	strb	r3, [r4, r1]
 8008592:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008596:	f8d5 8008 	ldr.w	r8, [r5, #8]
 800859a:	f898 3000 	ldrb.w	r3, [r8]
 800859e:	2b45      	cmp	r3, #69	; 0x45
 80085a0:	f000 862c 	beq.w	80091fc <d_print_comp_inner+0x1f4c>
 80085a4:	4642      	mov	r2, r8
 80085a6:	4639      	mov	r1, r7
 80085a8:	4620      	mov	r0, r4
 80085aa:	f001 fa99 	bl	8009ae0 <d_print_comp>
 80085ae:	f7fe bf41 	b.w	8007434 <d_print_comp_inner+0x184>
 80085b2:	f011 0704 	ands.w	r7, r1, #4
 80085b6:	f040 832d 	bne.w	8008c14 <d_print_comp_inner+0x1964>
 80085ba:	68ab      	ldr	r3, [r5, #8]
 80085bc:	686d      	ldr	r5, [r5, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f43e af38 	beq.w	8007434 <d_print_comp_inner+0x184>
 80085c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80085c8:	eb05 0803 	add.w	r8, r5, r3
 80085cc:	e009      	b.n	80085e2 <d_print_comp_inner+0x1332>
 80085ce:	460b      	mov	r3, r1
 80085d0:	3101      	adds	r1, #1
 80085d2:	45a8      	cmp	r8, r5
 80085d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80085d8:	54e6      	strb	r6, [r4, r3]
 80085da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80085de:	f43e af29 	beq.w	8007434 <d_print_comp_inner+0x184>
 80085e2:	29ff      	cmp	r1, #255	; 0xff
 80085e4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80085e8:	d1f1      	bne.n	80085ce <d_print_comp_inner+0x131e>
 80085ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80085ee:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80085f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80085f6:	4620      	mov	r0, r4
 80085f8:	4798      	blx	r3
 80085fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80085fe:	2101      	movs	r1, #1
 8008600:	440b      	add	r3, r1
 8008602:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008606:	2300      	movs	r3, #0
 8008608:	e7e3      	b.n	80085d2 <d_print_comp_inner+0x1322>
 800860a:	bf00      	nop
 800860c:	0801586c 	.word	0x0801586c
 8008610:	08015847 	.word	0x08015847
 8008614:	0801583b 	.word	0x0801583b
 8008618:	08015830 	.word	0x08015830
 800861c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008620:	f1b9 0f00 	cmp.w	r9, #0
 8008624:	f000 8373 	beq.w	8008d0e <d_print_comp_inner+0x1a5e>
 8008628:	4dda      	ldr	r5, [pc, #872]	; (8008994 <d_print_comp_inner+0x16e4>)
 800862a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800862e:	1daf      	adds	r7, r5, #6
 8008630:	f04f 0800 	mov.w	r8, #0
 8008634:	e009      	b.n	800864a <d_print_comp_inner+0x139a>
 8008636:	460b      	mov	r3, r1
 8008638:	3101      	adds	r1, #1
 800863a:	42bd      	cmp	r5, r7
 800863c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008640:	54e6      	strb	r6, [r4, r3]
 8008642:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008646:	f000 8280 	beq.w	8008b4a <d_print_comp_inner+0x189a>
 800864a:	29ff      	cmp	r1, #255	; 0xff
 800864c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008650:	d1f1      	bne.n	8008636 <d_print_comp_inner+0x1386>
 8008652:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008656:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800865a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800865e:	4620      	mov	r0, r4
 8008660:	4798      	blx	r3
 8008662:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008666:	2101      	movs	r1, #1
 8008668:	440b      	add	r3, r1
 800866a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800866e:	2300      	movs	r3, #0
 8008670:	e7e3      	b.n	800863a <d_print_comp_inner+0x138a>
 8008672:	1d29      	adds	r1, r5, #4
 8008674:	f7fe fd76 	bl	8007164 <d_lookup_template_argument.isra.6>
 8008678:	2800      	cmp	r0, #0
 800867a:	f43e aee3 	beq.w	8007444 <d_print_comp_inner+0x194>
 800867e:	7803      	ldrb	r3, [r0, #0]
 8008680:	2b2f      	cmp	r3, #47	; 0x2f
 8008682:	f000 84fa 	beq.w	800907a <d_print_comp_inner+0x1dca>
 8008686:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800868a:	4602      	mov	r2, r0
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	4639      	mov	r1, r7
 8008690:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8008694:	4620      	mov	r0, r4
 8008696:	f001 fa23 	bl	8009ae0 <d_print_comp>
 800869a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800869e:	f7fe bec9 	b.w	8007434 <d_print_comp_inner+0x184>
 80086a2:	68aa      	ldr	r2, [r5, #8]
 80086a4:	f001 fa1c 	bl	8009ae0 <d_print_comp>
 80086a8:	f7fe bec4 	b.w	8007434 <d_print_comp_inner+0x184>
 80086ac:	2301      	movs	r3, #1
 80086ae:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80086b2:	f7fe bebf 	b.w	8007434 <d_print_comp_inner+0x184>
 80086b6:	f10b 0b01 	add.w	fp, fp, #1
 80086ba:	45cb      	cmp	fp, r9
 80086bc:	f47e af39 	bne.w	8007532 <d_print_comp_inner+0x282>
 80086c0:	f7fe beb8 	b.w	8007434 <d_print_comp_inner+0x184>
 80086c4:	6876      	ldr	r6, [r6, #4]
 80086c6:	b126      	cbz	r6, 80086d2 <d_print_comp_inner+0x1422>
 80086c8:	f1b8 0f04 	cmp.w	r8, #4
 80086cc:	46c6      	mov	lr, r8
 80086ce:	f47f aed3 	bne.w	8008478 <d_print_comp_inner+0x11c8>
 80086d2:	2301      	movs	r3, #1
 80086d4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80086d8:	f7fe beac 	b.w	8007434 <d_print_comp_inner+0x184>
 80086dc:	686a      	ldr	r2, [r5, #4]
 80086de:	4639      	mov	r1, r7
 80086e0:	4620      	mov	r0, r4
 80086e2:	f001 f9fd 	bl	8009ae0 <d_print_comp>
 80086e6:	f7fe bea5 	b.w	8007434 <d_print_comp_inner+0x184>
 80086ea:	686a      	ldr	r2, [r5, #4]
 80086ec:	4639      	mov	r1, r7
 80086ee:	4620      	mov	r0, r4
 80086f0:	f001 f9f6 	bl	8009ae0 <d_print_comp>
 80086f4:	f7fe be9e 	b.w	8007434 <d_print_comp_inner+0x184>
 80086f8:	686a      	ldr	r2, [r5, #4]
 80086fa:	4639      	mov	r1, r7
 80086fc:	4620      	mov	r0, r4
 80086fe:	f001 f9ef 	bl	8009ae0 <d_print_comp>
 8008702:	f7fe be97 	b.w	8007434 <d_print_comp_inner+0x184>
 8008706:	686a      	ldr	r2, [r5, #4]
 8008708:	4639      	mov	r1, r7
 800870a:	4620      	mov	r0, r4
 800870c:	f001 f9e8 	bl	8009ae0 <d_print_comp>
 8008710:	f7fe be90 	b.w	8007434 <d_print_comp_inner+0x184>
 8008714:	686a      	ldr	r2, [r5, #4]
 8008716:	4639      	mov	r1, r7
 8008718:	4620      	mov	r0, r4
 800871a:	f001 f9e1 	bl	8009ae0 <d_print_comp>
 800871e:	f7fe be89 	b.w	8007434 <d_print_comp_inner+0x184>
 8008722:	686a      	ldr	r2, [r5, #4]
 8008724:	4639      	mov	r1, r7
 8008726:	4620      	mov	r0, r4
 8008728:	f001 f9da 	bl	8009ae0 <d_print_comp>
 800872c:	f7fe be82 	b.w	8007434 <d_print_comp_inner+0x184>
 8008730:	4639      	mov	r1, r7
 8008732:	686a      	ldr	r2, [r5, #4]
 8008734:	4620      	mov	r0, r4
 8008736:	f001 f9d3 	bl	8009ae0 <d_print_comp>
 800873a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800873e:	29ff      	cmp	r1, #255	; 0xff
 8008740:	f000 84cf 	beq.w	80090e2 <d_print_comp_inner+0x1e32>
 8008744:	1c4a      	adds	r2, r1, #1
 8008746:	2329      	movs	r3, #41	; 0x29
 8008748:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800874c:	5463      	strb	r3, [r4, r1]
 800874e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008752:	f7fe be6f 	b.w	8007434 <d_print_comp_inner+0x184>
 8008756:	686a      	ldr	r2, [r5, #4]
 8008758:	4639      	mov	r1, r7
 800875a:	4620      	mov	r0, r4
 800875c:	f001 f9c0 	bl	8009ae0 <d_print_comp>
 8008760:	f7fe be68 	b.w	8007434 <d_print_comp_inner+0x184>
 8008764:	686a      	ldr	r2, [r5, #4]
 8008766:	a804      	add	r0, sp, #16
 8008768:	3201      	adds	r2, #1
 800876a:	498b      	ldr	r1, [pc, #556]	; (8008998 <d_print_comp_inner+0x16e8>)
 800876c:	f00b f970 	bl	8013a50 <siprintf>
 8008770:	a804      	add	r0, sp, #16
 8008772:	f7fe f9c3 	bl	8006afc <strlen>
 8008776:	b318      	cbz	r0, 80087c0 <d_print_comp_inner+0x1510>
 8008778:	ad04      	add	r5, sp, #16
 800877a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800877e:	182f      	adds	r7, r5, r0
 8008780:	f04f 0800 	mov.w	r8, #0
 8008784:	e008      	b.n	8008798 <d_print_comp_inner+0x14e8>
 8008786:	460b      	mov	r3, r1
 8008788:	3101      	adds	r1, #1
 800878a:	42af      	cmp	r7, r5
 800878c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008790:	54e6      	strb	r6, [r4, r3]
 8008792:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008796:	d015      	beq.n	80087c4 <d_print_comp_inner+0x1514>
 8008798:	29ff      	cmp	r1, #255	; 0xff
 800879a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800879e:	d1f2      	bne.n	8008786 <d_print_comp_inner+0x14d6>
 80087a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80087a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80087a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80087ac:	4620      	mov	r0, r4
 80087ae:	4798      	blx	r3
 80087b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80087b4:	2101      	movs	r1, #1
 80087b6:	440b      	add	r3, r1
 80087b8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80087bc:	2300      	movs	r3, #0
 80087be:	e7e4      	b.n	800878a <d_print_comp_inner+0x14da>
 80087c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80087c4:	29ff      	cmp	r1, #255	; 0xff
 80087c6:	f000 84cd 	beq.w	8009164 <d_print_comp_inner+0x1eb4>
 80087ca:	1c4a      	adds	r2, r1, #1
 80087cc:	237d      	movs	r3, #125	; 0x7d
 80087ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80087d2:	5463      	strb	r3, [r4, r1]
 80087d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80087d8:	f7fe be2c 	b.w	8007434 <d_print_comp_inner+0x184>
 80087dc:	4e6f      	ldr	r6, [pc, #444]	; (800899c <d_print_comp_inner+0x16ec>)
 80087de:	4639      	mov	r1, r7
 80087e0:	686a      	ldr	r2, [r5, #4]
 80087e2:	4620      	mov	r0, r4
 80087e4:	f001 f97c 	bl	8009ae0 <d_print_comp>
 80087e8:	f106 0902 	add.w	r9, r6, #2
 80087ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80087f0:	f04f 0800 	mov.w	r8, #0
 80087f4:	e008      	b.n	8008808 <d_print_comp_inner+0x1558>
 80087f6:	460b      	mov	r3, r1
 80087f8:	3101      	adds	r1, #1
 80087fa:	45b1      	cmp	r9, r6
 80087fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008800:	54e7      	strb	r7, [r4, r3]
 8008802:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8008806:	d068      	beq.n	80088da <d_print_comp_inner+0x162a>
 8008808:	29ff      	cmp	r1, #255	; 0xff
 800880a:	f816 7b01 	ldrb.w	r7, [r6], #1
 800880e:	d1f2      	bne.n	80087f6 <d_print_comp_inner+0x1546>
 8008810:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008814:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008818:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800881c:	4620      	mov	r0, r4
 800881e:	4798      	blx	r3
 8008820:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008824:	2101      	movs	r1, #1
 8008826:	440b      	add	r3, r1
 8008828:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800882c:	2300      	movs	r3, #0
 800882e:	e7e4      	b.n	80087fa <d_print_comp_inner+0x154a>
 8008830:	686a      	ldr	r2, [r5, #4]
 8008832:	4639      	mov	r1, r7
 8008834:	4620      	mov	r0, r4
 8008836:	f001 f953 	bl	8009ae0 <d_print_comp>
 800883a:	f7fe bdfb 	b.w	8007434 <d_print_comp_inner+0x184>
 800883e:	f8da 5004 	ldr.w	r5, [sl, #4]
 8008842:	782b      	ldrb	r3, [r5, #0]
 8008844:	3b61      	subs	r3, #97	; 0x61
 8008846:	2b19      	cmp	r3, #25
 8008848:	d80b      	bhi.n	8008862 <d_print_comp_inner+0x15b2>
 800884a:	29ff      	cmp	r1, #255	; 0xff
 800884c:	f000 8726 	beq.w	800969c <d_print_comp_inner+0x23ec>
 8008850:	2320      	movs	r3, #32
 8008852:	1c4a      	adds	r2, r1, #1
 8008854:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008858:	5463      	strb	r3, [r4, r1]
 800885a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800885e:	f8da 5004 	ldr.w	r5, [sl, #4]
 8008862:	19eb      	adds	r3, r5, r7
 8008864:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008868:	2b20      	cmp	r3, #32
 800886a:	bf08      	it	eq
 800886c:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 8008870:	2f00      	cmp	r7, #0
 8008872:	f43e addf 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008876:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800887a:	442f      	add	r7, r5
 800887c:	f04f 0800 	mov.w	r8, #0
 8008880:	e009      	b.n	8008896 <d_print_comp_inner+0x15e6>
 8008882:	460b      	mov	r3, r1
 8008884:	3101      	adds	r1, #1
 8008886:	42af      	cmp	r7, r5
 8008888:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800888c:	54e6      	strb	r6, [r4, r3]
 800888e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008892:	f43e adcf 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008896:	29ff      	cmp	r1, #255	; 0xff
 8008898:	f815 6b01 	ldrb.w	r6, [r5], #1
 800889c:	d1f1      	bne.n	8008882 <d_print_comp_inner+0x15d2>
 800889e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80088a2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80088a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80088aa:	4620      	mov	r0, r4
 80088ac:	4798      	blx	r3
 80088ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80088b2:	2101      	movs	r1, #1
 80088b4:	440b      	add	r3, r1
 80088b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80088ba:	2300      	movs	r3, #0
 80088bc:	e7e3      	b.n	8008886 <d_print_comp_inner+0x15d6>
 80088be:	686a      	ldr	r2, [r5, #4]
 80088c0:	4639      	mov	r1, r7
 80088c2:	4620      	mov	r0, r4
 80088c4:	f001 f90c 	bl	8009ae0 <d_print_comp>
 80088c8:	f7fe bdb4 	b.w	8007434 <d_print_comp_inner+0x184>
 80088cc:	686a      	ldr	r2, [r5, #4]
 80088ce:	4639      	mov	r1, r7
 80088d0:	4620      	mov	r0, r4
 80088d2:	f001 f905 	bl	8009ae0 <d_print_comp>
 80088d6:	f7fe bdad 	b.w	8007434 <d_print_comp_inner+0x184>
 80088da:	68aa      	ldr	r2, [r5, #8]
 80088dc:	a804      	add	r0, sp, #16
 80088de:	3201      	adds	r2, #1
 80088e0:	492d      	ldr	r1, [pc, #180]	; (8008998 <d_print_comp_inner+0x16e8>)
 80088e2:	f00b f8b5 	bl	8013a50 <siprintf>
 80088e6:	a804      	add	r0, sp, #16
 80088e8:	f7fe f908 	bl	8006afc <strlen>
 80088ec:	b318      	cbz	r0, 8008936 <d_print_comp_inner+0x1686>
 80088ee:	ad04      	add	r5, sp, #16
 80088f0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80088f4:	182f      	adds	r7, r5, r0
 80088f6:	f04f 0800 	mov.w	r8, #0
 80088fa:	e008      	b.n	800890e <d_print_comp_inner+0x165e>
 80088fc:	460b      	mov	r3, r1
 80088fe:	3101      	adds	r1, #1
 8008900:	42af      	cmp	r7, r5
 8008902:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008906:	54e6      	strb	r6, [r4, r3]
 8008908:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800890c:	d015      	beq.n	800893a <d_print_comp_inner+0x168a>
 800890e:	29ff      	cmp	r1, #255	; 0xff
 8008910:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008914:	d1f2      	bne.n	80088fc <d_print_comp_inner+0x164c>
 8008916:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800891a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800891e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008922:	4620      	mov	r0, r4
 8008924:	4798      	blx	r3
 8008926:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800892a:	2101      	movs	r1, #1
 800892c:	440b      	add	r3, r1
 800892e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008932:	2300      	movs	r3, #0
 8008934:	e7e4      	b.n	8008900 <d_print_comp_inner+0x1650>
 8008936:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800893a:	29ff      	cmp	r1, #255	; 0xff
 800893c:	f000 8447 	beq.w	80091ce <d_print_comp_inner+0x1f1e>
 8008940:	1c4a      	adds	r2, r1, #1
 8008942:	237d      	movs	r3, #125	; 0x7d
 8008944:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008948:	5463      	strb	r3, [r4, r1]
 800894a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800894e:	f7fe bd71 	b.w	8007434 <d_print_comp_inner+0x184>
 8008952:	1d2a      	adds	r2, r5, #4
 8008954:	4639      	mov	r1, r7
 8008956:	4620      	mov	r0, r4
 8008958:	f001 fe62 	bl	800a620 <d_print_cast.isra.12>
 800895c:	f7fe bd6a 	b.w	8007434 <d_print_comp_inner+0x184>
 8008960:	4639      	mov	r1, r7
 8008962:	68aa      	ldr	r2, [r5, #8]
 8008964:	4620      	mov	r0, r4
 8008966:	f001 f8bb 	bl	8009ae0 <d_print_comp>
 800896a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800896e:	29ff      	cmp	r1, #255	; 0xff
 8008970:	f000 841b 	beq.w	80091aa <d_print_comp_inner+0x1efa>
 8008974:	1c4a      	adds	r2, r1, #1
 8008976:	235d      	movs	r3, #93	; 0x5d
 8008978:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800897c:	5463      	strb	r3, [r4, r1]
 800897e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008982:	f7fe bd57 	b.w	8007434 <d_print_comp_inner+0x184>
 8008986:	686a      	ldr	r2, [r5, #4]
 8008988:	4639      	mov	r1, r7
 800898a:	4620      	mov	r0, r4
 800898c:	f001 f8a8 	bl	8009ae0 <d_print_comp>
 8008990:	f7fe bd50 	b.w	8007434 <d_print_comp_inner+0x184>
 8008994:	08015a14 	.word	0x08015a14
 8008998:	0801581c 	.word	0x0801581c
 800899c:	08015a68 	.word	0x08015a68
 80089a0:	68aa      	ldr	r2, [r5, #8]
 80089a2:	4639      	mov	r1, r7
 80089a4:	4620      	mov	r0, r4
 80089a6:	f001 f89b 	bl	8009ae0 <d_print_comp>
 80089aa:	f7fe bd43 	b.w	8007434 <d_print_comp_inner+0x184>
 80089ae:	4639      	mov	r1, r7
 80089b0:	68aa      	ldr	r2, [r5, #8]
 80089b2:	4620      	mov	r0, r4
 80089b4:	f001 f894 	bl	8009ae0 <d_print_comp>
 80089b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80089bc:	29ff      	cmp	r1, #255	; 0xff
 80089be:	f000 83e3 	beq.w	8009188 <d_print_comp_inner+0x1ed8>
 80089c2:	1c4a      	adds	r2, r1, #1
 80089c4:	235d      	movs	r3, #93	; 0x5d
 80089c6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80089ca:	5463      	strb	r3, [r4, r1]
 80089cc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80089d0:	f7fe bd30 	b.w	8007434 <d_print_comp_inner+0x184>
 80089d4:	686a      	ldr	r2, [r5, #4]
 80089d6:	4639      	mov	r1, r7
 80089d8:	4620      	mov	r0, r4
 80089da:	f001 f881 	bl	8009ae0 <d_print_comp>
 80089de:	f7fe bd29 	b.w	8007434 <d_print_comp_inner+0x184>
 80089e2:	686a      	ldr	r2, [r5, #4]
 80089e4:	4639      	mov	r1, r7
 80089e6:	4620      	mov	r0, r4
 80089e8:	f001 f87a 	bl	8009ae0 <d_print_comp>
 80089ec:	f7fe bd22 	b.w	8007434 <d_print_comp_inner+0x184>
 80089f0:	686a      	ldr	r2, [r5, #4]
 80089f2:	4639      	mov	r1, r7
 80089f4:	4620      	mov	r0, r4
 80089f6:	f001 f873 	bl	8009ae0 <d_print_comp>
 80089fa:	f7fe bd1b 	b.w	8007434 <d_print_comp_inner+0x184>
 80089fe:	4ed5      	ldr	r6, [pc, #852]	; (8008d54 <d_print_comp_inner+0x1aa4>)
 8008a00:	4639      	mov	r1, r7
 8008a02:	68aa      	ldr	r2, [r5, #8]
 8008a04:	4620      	mov	r0, r4
 8008a06:	f001 f86b 	bl	8009ae0 <d_print_comp>
 8008a0a:	f106 0a05 	add.w	sl, r6, #5
 8008a0e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008a12:	f04f 0900 	mov.w	r9, #0
 8008a16:	e009      	b.n	8008a2c <d_print_comp_inner+0x177c>
 8008a18:	460b      	mov	r3, r1
 8008a1a:	3101      	adds	r1, #1
 8008a1c:	45b2      	cmp	sl, r6
 8008a1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008a22:	f804 8003 	strb.w	r8, [r4, r3]
 8008a26:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008a2a:	d028      	beq.n	8008a7e <d_print_comp_inner+0x17ce>
 8008a2c:	29ff      	cmp	r1, #255	; 0xff
 8008a2e:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008a32:	d1f1      	bne.n	8008a18 <d_print_comp_inner+0x1768>
 8008a34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008a38:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008a3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008a40:	4620      	mov	r0, r4
 8008a42:	4798      	blx	r3
 8008a44:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008a48:	2101      	movs	r1, #1
 8008a4a:	440b      	add	r3, r1
 8008a4c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008a50:	2300      	movs	r3, #0
 8008a52:	e7e3      	b.n	8008a1c <d_print_comp_inner+0x176c>
 8008a54:	686a      	ldr	r2, [r5, #4]
 8008a56:	4639      	mov	r1, r7
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f001 f841 	bl	8009ae0 <d_print_comp>
 8008a5e:	f7fe bce9 	b.w	8007434 <d_print_comp_inner+0x184>
 8008a62:	686a      	ldr	r2, [r5, #4]
 8008a64:	4639      	mov	r1, r7
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 f83a 	bl	8009ae0 <d_print_comp>
 8008a6c:	f7fe bce2 	b.w	8007434 <d_print_comp_inner+0x184>
 8008a70:	686a      	ldr	r2, [r5, #4]
 8008a72:	4639      	mov	r1, r7
 8008a74:	4620      	mov	r0, r4
 8008a76:	f001 f833 	bl	8009ae0 <d_print_comp>
 8008a7a:	f7fe bcdb 	b.w	8007434 <d_print_comp_inner+0x184>
 8008a7e:	686a      	ldr	r2, [r5, #4]
 8008a80:	4639      	mov	r1, r7
 8008a82:	4620      	mov	r0, r4
 8008a84:	f001 f82c 	bl	8009ae0 <d_print_comp>
 8008a88:	f7fe bcd4 	b.w	8007434 <d_print_comp_inner+0x184>
 8008a8c:	686a      	ldr	r2, [r5, #4]
 8008a8e:	4639      	mov	r1, r7
 8008a90:	4620      	mov	r0, r4
 8008a92:	f001 f825 	bl	8009ae0 <d_print_comp>
 8008a96:	f7fe bccd 	b.w	8007434 <d_print_comp_inner+0x184>
 8008a9a:	4eaf      	ldr	r6, [pc, #700]	; (8008d58 <d_print_comp_inner+0x1aa8>)
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	686a      	ldr	r2, [r5, #4]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f001 f81d 	bl	8009ae0 <d_print_comp>
 8008aa6:	f106 0a04 	add.w	sl, r6, #4
 8008aaa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008aae:	f04f 0900 	mov.w	r9, #0
 8008ab2:	e009      	b.n	8008ac8 <d_print_comp_inner+0x1818>
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	3101      	adds	r1, #1
 8008ab8:	4556      	cmp	r6, sl
 8008aba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008abe:	f804 8003 	strb.w	r8, [r4, r3]
 8008ac2:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008ac6:	d013      	beq.n	8008af0 <d_print_comp_inner+0x1840>
 8008ac8:	29ff      	cmp	r1, #255	; 0xff
 8008aca:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008ace:	d1f1      	bne.n	8008ab4 <d_print_comp_inner+0x1804>
 8008ad0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008ad4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008ad8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008adc:	4620      	mov	r0, r4
 8008ade:	4798      	blx	r3
 8008ae0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	440b      	add	r3, r1
 8008ae8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008aec:	2300      	movs	r3, #0
 8008aee:	e7e3      	b.n	8008ab8 <d_print_comp_inner+0x1808>
 8008af0:	68aa      	ldr	r2, [r5, #8]
 8008af2:	4639      	mov	r1, r7
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fff3 	bl	8009ae0 <d_print_comp>
 8008afa:	f7fe bc9b 	b.w	8007434 <d_print_comp_inner+0x184>
 8008afe:	68aa      	ldr	r2, [r5, #8]
 8008b00:	460e      	mov	r6, r1
 8008b02:	4620      	mov	r0, r4
 8008b04:	4639      	mov	r1, r7
 8008b06:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8008b0a:	f000 ffe9 	bl	8009ae0 <d_print_comp>
 8008b0e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008b12:	429d      	cmp	r5, r3
 8008b14:	f47e ac8e 	bne.w	8007434 <d_print_comp_inner+0x184>
 8008b18:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008b1c:	42b3      	cmp	r3, r6
 8008b1e:	f47e ac89 	bne.w	8007434 <d_print_comp_inner+0x184>
 8008b22:	3e02      	subs	r6, #2
 8008b24:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8008b28:	f7fe bc84 	b.w	8007434 <d_print_comp_inner+0x184>
 8008b2c:	462a      	mov	r2, r5
 8008b2e:	4639      	mov	r1, r7
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 ffe5 	bl	8009b00 <d_print_mod>
 8008b36:	f7ff bb6c 	b.w	8008212 <d_print_comp_inner+0xf62>
 8008b3a:	686b      	ldr	r3, [r5, #4]
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	f1b9 0f00 	cmp.w	r9, #0
 8008b42:	f47e acf0 	bne.w	8007526 <d_print_comp_inner+0x276>
 8008b46:	f7fe bc75 	b.w	8007434 <d_print_comp_inner+0x184>
 8008b4a:	464a      	mov	r2, r9
 8008b4c:	a804      	add	r0, sp, #16
 8008b4e:	4983      	ldr	r1, [pc, #524]	; (8008d5c <d_print_comp_inner+0x1aac>)
 8008b50:	f00a ff7e 	bl	8013a50 <siprintf>
 8008b54:	a804      	add	r0, sp, #16
 8008b56:	f7fd ffd1 	bl	8006afc <strlen>
 8008b5a:	b318      	cbz	r0, 8008ba4 <d_print_comp_inner+0x18f4>
 8008b5c:	ad04      	add	r5, sp, #16
 8008b5e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008b62:	182f      	adds	r7, r5, r0
 8008b64:	f04f 0800 	mov.w	r8, #0
 8008b68:	e008      	b.n	8008b7c <d_print_comp_inner+0x18cc>
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	42bd      	cmp	r5, r7
 8008b70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008b74:	54e6      	strb	r6, [r4, r3]
 8008b76:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008b7a:	d015      	beq.n	8008ba8 <d_print_comp_inner+0x18f8>
 8008b7c:	29ff      	cmp	r1, #255	; 0xff
 8008b7e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008b82:	d1f2      	bne.n	8008b6a <d_print_comp_inner+0x18ba>
 8008b84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008b88:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008b8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008b90:	4620      	mov	r0, r4
 8008b92:	4798      	blx	r3
 8008b94:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008b98:	2101      	movs	r1, #1
 8008b9a:	440b      	add	r3, r1
 8008b9c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e7e4      	b.n	8008b6e <d_print_comp_inner+0x18be>
 8008ba4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008ba8:	29ff      	cmp	r1, #255	; 0xff
 8008baa:	f000 841d 	beq.w	80093e8 <d_print_comp_inner+0x2138>
 8008bae:	1c4a      	adds	r2, r1, #1
 8008bb0:	237d      	movs	r3, #125	; 0x7d
 8008bb2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008bb6:	5463      	strb	r3, [r4, r1]
 8008bb8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008bbc:	f7fe bc3a 	b.w	8007434 <d_print_comp_inner+0x184>
 8008bc0:	686b      	ldr	r3, [r5, #4]
 8008bc2:	68df      	ldr	r7, [r3, #12]
 8008bc4:	689d      	ldr	r5, [r3, #8]
 8008bc6:	2f00      	cmp	r7, #0
 8008bc8:	f43e ac34 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008bcc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008bd0:	442f      	add	r7, r5
 8008bd2:	f04f 0800 	mov.w	r8, #0
 8008bd6:	e009      	b.n	8008bec <d_print_comp_inner+0x193c>
 8008bd8:	460b      	mov	r3, r1
 8008bda:	3101      	adds	r1, #1
 8008bdc:	42af      	cmp	r7, r5
 8008bde:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008be2:	54e6      	strb	r6, [r4, r3]
 8008be4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008be8:	f43e ac24 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008bec:	29ff      	cmp	r1, #255	; 0xff
 8008bee:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008bf2:	d1f1      	bne.n	8008bd8 <d_print_comp_inner+0x1928>
 8008bf4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008bf8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008bfc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008c00:	4620      	mov	r0, r4
 8008c02:	4798      	blx	r3
 8008c04:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008c08:	2101      	movs	r1, #1
 8008c0a:	440b      	add	r3, r1
 8008c0c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008c10:	2300      	movs	r3, #0
 8008c12:	e7e3      	b.n	8008bdc <d_print_comp_inner+0x192c>
 8008c14:	686e      	ldr	r6, [r5, #4]
 8008c16:	68af      	ldr	r7, [r5, #8]
 8008c18:	4437      	add	r7, r6
 8008c1a:	42be      	cmp	r6, r7
 8008c1c:	f4be ac0a 	bcs.w	8007434 <d_print_comp_inner+0x184>
 8008c20:	f04f 0800 	mov.w	r8, #0
 8008c24:	e00d      	b.n	8008c42 <d_print_comp_inner+0x1992>
 8008c26:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008c2a:	29ff      	cmp	r1, #255	; 0xff
 8008c2c:	d038      	beq.n	8008ca0 <d_print_comp_inner+0x19f0>
 8008c2e:	1c4b      	adds	r3, r1, #1
 8008c30:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008c34:	5465      	strb	r5, [r4, r1]
 8008c36:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8008c3a:	3601      	adds	r6, #1
 8008c3c:	42b7      	cmp	r7, r6
 8008c3e:	f67e abf9 	bls.w	8007434 <d_print_comp_inner+0x184>
 8008c42:	1bbb      	subs	r3, r7, r6
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	7835      	ldrb	r5, [r6, #0]
 8008c48:	dded      	ble.n	8008c26 <d_print_comp_inner+0x1976>
 8008c4a:	2d5f      	cmp	r5, #95	; 0x5f
 8008c4c:	d1eb      	bne.n	8008c26 <d_print_comp_inner+0x1976>
 8008c4e:	7872      	ldrb	r2, [r6, #1]
 8008c50:	2a5f      	cmp	r2, #95	; 0x5f
 8008c52:	d1e8      	bne.n	8008c26 <d_print_comp_inner+0x1976>
 8008c54:	78b3      	ldrb	r3, [r6, #2]
 8008c56:	2b55      	cmp	r3, #85	; 0x55
 8008c58:	d001      	beq.n	8008c5e <d_print_comp_inner+0x19ae>
 8008c5a:	4615      	mov	r5, r2
 8008c5c:	e7e3      	b.n	8008c26 <d_print_comp_inner+0x1976>
 8008c5e:	1cf3      	adds	r3, r6, #3
 8008c60:	429f      	cmp	r7, r3
 8008c62:	d9fa      	bls.n	8008c5a <d_print_comp_inner+0x19aa>
 8008c64:	2000      	movs	r0, #0
 8008c66:	e006      	b.n	8008c76 <d_print_comp_inner+0x19c6>
 8008c68:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8008c6c:	42bb      	cmp	r3, r7
 8008c6e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8008c72:	f000 8558 	beq.w	8009726 <d_print_comp_inner+0x2476>
 8008c76:	4699      	mov	r9, r3
 8008c78:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008c7c:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8008c80:	b2d1      	uxtb	r1, r2
 8008c82:	2909      	cmp	r1, #9
 8008c84:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8008c88:	d9f0      	bls.n	8008c6c <d_print_comp_inner+0x19bc>
 8008c8a:	f1be 0f05 	cmp.w	lr, #5
 8008c8e:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 8008c92:	d9e9      	bls.n	8008c68 <d_print_comp_inner+0x19b8>
 8008c94:	2a05      	cmp	r2, #5
 8008c96:	f200 869a 	bhi.w	80099ce <d_print_comp_inner+0x271e>
 8008c9a:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8008c9e:	e7e5      	b.n	8008c6c <d_print_comp_inner+0x19bc>
 8008ca0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008ca4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008ca8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008cac:	4620      	mov	r0, r4
 8008cae:	4798      	blx	r3
 8008cb0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	441a      	add	r2, r3
 8008cb8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	e7b7      	b.n	8008c30 <d_print_comp_inner+0x1980>
 8008cc0:	4d27      	ldr	r5, [pc, #156]	; (8008d60 <d_print_comp_inner+0x1ab0>)
 8008cc2:	4698      	mov	r8, r3
 8008cc4:	1daf      	adds	r7, r5, #6
 8008cc6:	e009      	b.n	8008cdc <d_print_comp_inner+0x1a2c>
 8008cc8:	460b      	mov	r3, r1
 8008cca:	3101      	adds	r1, #1
 8008ccc:	42af      	cmp	r7, r5
 8008cce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008cd2:	54e6      	strb	r6, [r4, r3]
 8008cd4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008cd8:	f43e abac 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008cdc:	29ff      	cmp	r1, #255	; 0xff
 8008cde:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008ce2:	d1f1      	bne.n	8008cc8 <d_print_comp_inner+0x1a18>
 8008ce4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008ce8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8008cec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	4798      	blx	r3
 8008cf4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	440b      	add	r3, r1
 8008cfc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008d00:	2300      	movs	r3, #0
 8008d02:	e7e3      	b.n	8008ccc <d_print_comp_inner+0x1a1c>
 8008d04:	4605      	mov	r5, r0
 8008d06:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8008d0a:	f7ff ba6e 	b.w	80081ea <d_print_comp_inner+0xf3a>
 8008d0e:	4d15      	ldr	r5, [pc, #84]	; (8008d64 <d_print_comp_inner+0x1ab4>)
 8008d10:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008d14:	1d2f      	adds	r7, r5, #4
 8008d16:	e009      	b.n	8008d2c <d_print_comp_inner+0x1a7c>
 8008d18:	460b      	mov	r3, r1
 8008d1a:	3101      	adds	r1, #1
 8008d1c:	42bd      	cmp	r5, r7
 8008d1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008d22:	54e6      	strb	r6, [r4, r3]
 8008d24:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008d28:	f43e ab84 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008d2c:	29ff      	cmp	r1, #255	; 0xff
 8008d2e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008d32:	d1f1      	bne.n	8008d18 <d_print_comp_inner+0x1a68>
 8008d34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008d38:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008d3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008d40:	4620      	mov	r0, r4
 8008d42:	4798      	blx	r3
 8008d44:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008d48:	2101      	movs	r1, #1
 8008d4a:	440b      	add	r3, r1
 8008d4c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008d50:	2300      	movs	r3, #0
 8008d52:	e7e3      	b.n	8008d1c <d_print_comp_inner+0x1a6c>
 8008d54:	08015928 	.word	0x08015928
 8008d58:	08015864 	.word	0x08015864
 8008d5c:	0801581c 	.word	0x0801581c
 8008d60:	08015988 	.word	0x08015988
 8008d64:	08015a0c 	.word	0x08015a0c
 8008d68:	f021 0760 	bic.w	r7, r1, #96	; 0x60
 8008d6c:	f105 0208 	add.w	r2, r5, #8
 8008d70:	4639      	mov	r1, r7
 8008d72:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8008d76:	f001 fb5d 	bl	800a434 <d_print_function_type.isra.11>
 8008d7a:	686a      	ldr	r2, [r5, #4]
 8008d7c:	2a00      	cmp	r2, #0
 8008d7e:	f43e ab59 	beq.w	8007434 <d_print_comp_inner+0x184>
 8008d82:	4639      	mov	r1, r7
 8008d84:	4620      	mov	r0, r4
 8008d86:	f000 feab 	bl	8009ae0 <d_print_comp>
 8008d8a:	f7fe bb53 	b.w	8007434 <d_print_comp_inner+0x184>
 8008d8e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008d92:	f7fe be90 	b.w	8007ab6 <d_print_comp_inner+0x806>
 8008d96:	4edc      	ldr	r6, [pc, #880]	; (8009108 <d_print_comp_inner+0x1e58>)
 8008d98:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8008d9c:	f106 0a05 	add.w	sl, r6, #5
 8008da0:	f04f 0900 	mov.w	r9, #0
 8008da4:	e00a      	b.n	8008dbc <d_print_comp_inner+0x1b0c>
 8008da6:	460b      	mov	r3, r1
 8008da8:	3101      	adds	r1, #1
 8008daa:	4556      	cmp	r6, sl
 8008dac:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008db0:	f804 8003 	strb.w	r8, [r4, r3]
 8008db4:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008db8:	f43e ae67 	beq.w	8007a8a <d_print_comp_inner+0x7da>
 8008dbc:	29ff      	cmp	r1, #255	; 0xff
 8008dbe:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008dc2:	d1f0      	bne.n	8008da6 <d_print_comp_inner+0x1af6>
 8008dc4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008dc8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008dcc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	4798      	blx	r3
 8008dd4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008dd8:	2101      	movs	r1, #1
 8008dda:	440b      	add	r3, r1
 8008ddc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008de0:	2300      	movs	r3, #0
 8008de2:	e7e2      	b.n	8008daa <d_print_comp_inner+0x1afa>
 8008de4:	6873      	ldr	r3, [r6, #4]
 8008de6:	49c9      	ldr	r1, [pc, #804]	; (800910c <d_print_comp_inner+0x1e5c>)
 8008de8:	f8d3 8000 	ldr.w	r8, [r3]
 8008dec:	4640      	mov	r0, r8
 8008dee:	f005 ffe5 	bl	800edbc <strcmp>
 8008df2:	782b      	ldrb	r3, [r5, #0]
 8008df4:	b910      	cbnz	r0, 8008dfc <d_print_comp_inner+0x1b4c>
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	f000 84db 	beq.w	80097b2 <d_print_comp_inner+0x2502>
 8008dfc:	2b37      	cmp	r3, #55	; 0x37
 8008dfe:	f000 8585 	beq.w	800990c <d_print_comp_inner+0x265c>
 8008e02:	4639      	mov	r1, r7
 8008e04:	4620      	mov	r0, r4
 8008e06:	4632      	mov	r2, r6
 8008e08:	f001 fcde 	bl	800a7c8 <d_print_expr_op>
 8008e0c:	49c0      	ldr	r1, [pc, #768]	; (8009110 <d_print_comp_inner+0x1e60>)
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f005 ffd4 	bl	800edbc <strcmp>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f000 8257 	beq.w	80092c8 <d_print_comp_inner+0x2018>
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	49bd      	ldr	r1, [pc, #756]	; (8009114 <d_print_comp_inner+0x1e64>)
 8008e1e:	f005 ffcd 	bl	800edbc <strcmp>
 8008e22:	4606      	mov	r6, r0
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f47e ad46 	bne.w	80078b6 <d_print_comp_inner+0x606>
 8008e2a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8008e2e:	2bff      	cmp	r3, #255	; 0xff
 8008e30:	f000 8468 	beq.w	8009704 <d_print_comp_inner+0x2454>
 8008e34:	1c58      	adds	r0, r3, #1
 8008e36:	2628      	movs	r6, #40	; 0x28
 8008e38:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	54e6      	strb	r6, [r4, r3]
 8008e40:	462a      	mov	r2, r5
 8008e42:	4620      	mov	r0, r4
 8008e44:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8008e48:	f000 fe4a 	bl	8009ae0 <d_print_comp>
 8008e4c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e50:	29ff      	cmp	r1, #255	; 0xff
 8008e52:	f000 83d6 	beq.w	8009602 <d_print_comp_inner+0x2352>
 8008e56:	1c4a      	adds	r2, r1, #1
 8008e58:	2329      	movs	r3, #41	; 0x29
 8008e5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8008e5e:	5463      	strb	r3, [r4, r1]
 8008e60:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8008e64:	f7fe bae6 	b.w	8007434 <d_print_comp_inner+0x184>
 8008e68:	4eab      	ldr	r6, [pc, #684]	; (8009118 <d_print_comp_inner+0x1e68>)
 8008e6a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008e6e:	f106 0a02 	add.w	sl, r6, #2
 8008e72:	e00a      	b.n	8008e8a <d_print_comp_inner+0x1bda>
 8008e74:	460b      	mov	r3, r1
 8008e76:	3101      	adds	r1, #1
 8008e78:	4556      	cmp	r6, sl
 8008e7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8008e7e:	f804 8003 	strb.w	r8, [r4, r3]
 8008e82:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
 8008e86:	f43f ab86 	beq.w	8008596 <d_print_comp_inner+0x12e6>
 8008e8a:	29ff      	cmp	r1, #255	; 0xff
 8008e8c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8008e90:	d1f0      	bne.n	8008e74 <d_print_comp_inner+0x1bc4>
 8008e92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8008e96:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8008e9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4798      	blx	r3
 8008ea2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	440b      	add	r3, r1
 8008eaa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8008eae:	2300      	movs	r3, #0
 8008eb0:	e7e2      	b.n	8008e78 <d_print_comp_inner+0x1bc8>
 8008eb2:	6852      	ldr	r2, [r2, #4]
 8008eb4:	7c16      	ldrb	r6, [r2, #16]
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	f43e ae56 	beq.w	8007b68 <d_print_comp_inner+0x8b8>
 8008ebc:	2e06      	cmp	r6, #6
 8008ebe:	f240 8357 	bls.w	8009570 <d_print_comp_inner+0x22c0>
 8008ec2:	2e07      	cmp	r6, #7
 8008ec4:	f47e ae50 	bne.w	8007b68 <d_print_comp_inner+0x8b8>
 8008ec8:	68aa      	ldr	r2, [r5, #8]
 8008eca:	7811      	ldrb	r1, [r2, #0]
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	f47e ae4b 	bne.w	8007b68 <d_print_comp_inner+0x8b8>
 8008ed2:	6891      	ldr	r1, [r2, #8]
 8008ed4:	2901      	cmp	r1, #1
 8008ed6:	f47e ae47 	bne.w	8007b68 <d_print_comp_inner+0x8b8>
 8008eda:	2b3b      	cmp	r3, #59	; 0x3b
 8008edc:	f47e ae44 	bne.w	8007b68 <d_print_comp_inner+0x8b8>
 8008ee0:	6853      	ldr	r3, [r2, #4]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b30      	cmp	r3, #48	; 0x30
 8008ee6:	f000 85bb 	beq.w	8009a60 <d_print_comp_inner+0x27b0>
 8008eea:	2b31      	cmp	r3, #49	; 0x31
 8008eec:	f47e ae3c 	bne.w	8007b68 <d_print_comp_inner+0x8b8>
 8008ef0:	2204      	movs	r2, #4
 8008ef2:	498a      	ldr	r1, [pc, #552]	; (800911c <d_print_comp_inner+0x1e6c>)
 8008ef4:	f7fd ff1c 	bl	8006d30 <d_append_buffer>
 8008ef8:	f7fe ba9c 	b.w	8007434 <d_print_comp_inner+0x184>
 8008efc:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
 8008f00:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
 8008f04:	f1bc 0f00 	cmp.w	ip, #0
 8008f08:	dd14      	ble.n	8008f34 <d_print_comp_inner+0x1c84>
 8008f0a:	680b      	ldr	r3, [r1, #0]
 8008f0c:	4298      	cmp	r0, r3
 8008f0e:	f000 855c 	beq.w	80099ca <d_print_comp_inner+0x271a>
 8008f12:	f101 0208 	add.w	r2, r1, #8
 8008f16:	2300      	movs	r3, #0
 8008f18:	46a6      	mov	lr, r4
 8008f1a:	e007      	b.n	8008f2c <d_print_comp_inner+0x1c7c>
 8008f1c:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8008f20:	4690      	mov	r8, r2
 8008f22:	42a0      	cmp	r0, r4
 8008f24:	f102 0208 	add.w	r2, r2, #8
 8008f28:	f000 8270 	beq.w	800940c <d_print_comp_inner+0x215c>
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	459c      	cmp	ip, r3
 8008f30:	d1f4      	bne.n	8008f1c <d_print_comp_inner+0x1c6c>
 8008f32:	4674      	mov	r4, lr
 8008f34:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8008f38:	459c      	cmp	ip, r3
 8008f3a:	f280 84f5 	bge.w	8009928 <d_print_comp_inner+0x2678>
 8008f3e:	f10c 0301 	add.w	r3, ip, #1
 8008f42:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
 8008f46:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
 8008f4a:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
 8008f4e:	f841 003c 	str.w	r0, [r1, ip, lsl #3]
 8008f52:	f103 0e04 	add.w	lr, r3, #4
 8008f56:	f1b8 0f00 	cmp.w	r8, #0
 8008f5a:	d021      	beq.n	8008fa0 <d_print_comp_inner+0x1cf0>
 8008f5c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8008f60:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8008f64:	4299      	cmp	r1, r3
 8008f66:	f340 84df 	ble.w	8009928 <d_print_comp_inner+0x2678>
 8008f6a:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8008f6e:	4681      	mov	r9, r0
 8008f70:	e002      	b.n	8008f78 <d_print_comp_inner+0x1cc8>
 8008f72:	4299      	cmp	r1, r3
 8008f74:	f000 84d6 	beq.w	8009924 <d_print_comp_inner+0x2674>
 8008f78:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 8008f7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f80:	4462      	add	r2, ip
 8008f82:	6050      	str	r0, [r2, #4]
 8008f84:	f8ce 2000 	str.w	r2, [lr]
 8008f88:	f8d8 8000 	ldr.w	r8, [r8]
 8008f8c:	f10c 0c08 	add.w	ip, ip, #8
 8008f90:	3301      	adds	r3, #1
 8008f92:	4696      	mov	lr, r2
 8008f94:	f1b8 0f00 	cmp.w	r8, #0
 8008f98:	d1eb      	bne.n	8008f72 <d_print_comp_inner+0x1cc2>
 8008f9a:	4648      	mov	r0, r9
 8008f9c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8008fa0:	f04f 0800 	mov.w	r8, #0
 8008fa4:	1d01      	adds	r1, r0, #4
 8008fa6:	f8ce 8000 	str.w	r8, [lr]
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7fe f8da 	bl	8007164 <d_lookup_template_argument.isra.6>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	f040 8246 	bne.w	8009442 <d_print_comp_inner+0x2192>
 8008fb6:	f7fe ba45 	b.w	8007444 <d_print_comp_inner+0x194>
 8008fba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008fbe:	29ff      	cmp	r1, #255	; 0xff
 8008fc0:	f000 8411 	beq.w	80097e6 <d_print_comp_inner+0x2536>
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	1c4b      	adds	r3, r1, #1
 8008fc8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008fcc:	5462      	strb	r2, [r4, r1]
 8008fce:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8008fd2:	f7ff ba30 	b.w	8008436 <d_print_comp_inner+0x1186>
 8008fd6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008fda:	29ff      	cmp	r1, #255	; 0xff
 8008fdc:	f000 843d 	beq.w	800985a <d_print_comp_inner+0x25aa>
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	1c4b      	adds	r3, r1, #1
 8008fe4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8008fe8:	5462      	strb	r2, [r4, r1]
 8008fea:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8008fee:	f7ff ba0c 	b.w	800840a <d_print_comp_inner+0x115a>
 8008ff2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8008ff6:	29ff      	cmp	r1, #255	; 0xff
 8008ff8:	f000 8444 	beq.w	8009884 <d_print_comp_inner+0x25d4>
 8008ffc:	1c4a      	adds	r2, r1, #1
 8008ffe:	235b      	movs	r3, #91	; 0x5b
 8009000:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009004:	5463      	strb	r3, [r4, r1]
 8009006:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800900a:	4639      	mov	r1, r7
 800900c:	68aa      	ldr	r2, [r5, #8]
 800900e:	4620      	mov	r0, r4
 8009010:	f000 fd66 	bl	8009ae0 <d_print_comp>
 8009014:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009018:	29ff      	cmp	r1, #255	; 0xff
 800901a:	f000 832f 	beq.w	800967c <d_print_comp_inner+0x23cc>
 800901e:	235d      	movs	r3, #93	; 0x5d
 8009020:	1c4a      	adds	r2, r1, #1
 8009022:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009026:	5463      	strb	r3, [r4, r1]
 8009028:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800902c:	f7fe ba02 	b.w	8007434 <d_print_comp_inner+0x184>
 8009030:	f04f 0800 	mov.w	r8, #0
 8009034:	f804 8006 	strb.w	r8, [r4, r6]
 8009038:	4631      	mov	r1, r6
 800903a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800903e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009042:	4620      	mov	r0, r4
 8009044:	4798      	blx	r3
 8009046:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800904a:	4646      	mov	r6, r8
 800904c:	3301      	adds	r3, #1
 800904e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009052:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009056:	f7fe bce0 	b.w	8007a1a <d_print_comp_inner+0x76a>
 800905a:	4660      	mov	r0, ip
 800905c:	4688      	mov	r8, r1
 800905e:	f7ff b8c4 	b.w	80081ea <d_print_comp_inner+0xf3a>
 8009062:	686a      	ldr	r2, [r5, #4]
 8009064:	4639      	mov	r1, r7
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fd3a 	bl	8009ae0 <d_print_comp>
 800906c:	f7fe b9e2 	b.w	8007434 <d_print_comp_inner+0x184>
 8009070:	4632      	mov	r2, r6
 8009072:	f001 fba9 	bl	800a7c8 <d_print_expr_op>
 8009076:	f7fe bc1e 	b.w	80078b6 <d_print_comp_inner+0x606>
 800907a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800907e:	e008      	b.n	8009092 <d_print_comp_inner+0x1de2>
 8009080:	6880      	ldr	r0, [r0, #8]
 8009082:	3b01      	subs	r3, #1
 8009084:	2800      	cmp	r0, #0
 8009086:	f43e a9dd 	beq.w	8007444 <d_print_comp_inner+0x194>
 800908a:	7802      	ldrb	r2, [r0, #0]
 800908c:	2a2f      	cmp	r2, #47	; 0x2f
 800908e:	f47e a9d9 	bne.w	8007444 <d_print_comp_inner+0x194>
 8009092:	2b00      	cmp	r3, #0
 8009094:	dcf4      	bgt.n	8009080 <d_print_comp_inner+0x1dd0>
 8009096:	f47e a9d5 	bne.w	8007444 <d_print_comp_inner+0x194>
 800909a:	6840      	ldr	r0, [r0, #4]
 800909c:	2800      	cmp	r0, #0
 800909e:	f47f aaf2 	bne.w	8008686 <d_print_comp_inner+0x13d6>
 80090a2:	f7fe b9cf 	b.w	8007444 <d_print_comp_inner+0x194>
 80090a6:	29ff      	cmp	r1, #255	; 0xff
 80090a8:	f000 83ae 	beq.w	8009808 <d_print_comp_inner+0x2558>
 80090ac:	232d      	movs	r3, #45	; 0x2d
 80090ae:	1c4a      	adds	r2, r1, #1
 80090b0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80090b4:	5463      	strb	r3, [r4, r1]
 80090b6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80090ba:	f7fe bd76 	b.w	8007baa <d_print_comp_inner+0x8fa>
 80090be:	2500      	movs	r5, #0
 80090c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80090c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80090c8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80090cc:	4620      	mov	r0, r4
 80090ce:	4798      	blx	r3
 80090d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80090d4:	2201      	movs	r2, #1
 80090d6:	4413      	add	r3, r2
 80090d8:	4629      	mov	r1, r5
 80090da:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80090de:	f7fe bc88 	b.w	80079f2 <d_print_comp_inner+0x742>
 80090e2:	2500      	movs	r5, #0
 80090e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80090e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80090ec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80090f0:	4620      	mov	r0, r4
 80090f2:	4798      	blx	r3
 80090f4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80090f8:	2201      	movs	r2, #1
 80090fa:	4413      	add	r3, r2
 80090fc:	4629      	mov	r1, r5
 80090fe:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009102:	f7ff bb20 	b.w	8008746 <d_print_comp_inner+0x1496>
 8009106:	bf00      	nop
 8009108:	08015978 	.word	0x08015978
 800910c:	080159ac 	.word	0x080159ac
 8009110:	080159b0 	.word	0x080159b0
 8009114:	08015cc8 	.word	0x08015cc8
 8009118:	08015808 	.word	0x08015808
 800911c:	080159e4 	.word	0x080159e4
 8009120:	2600      	movs	r6, #0
 8009122:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009126:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800912a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 800912e:	4798      	blx	r3
 8009130:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009134:	2301      	movs	r3, #1
 8009136:	441a      	add	r2, r3
 8009138:	4631      	mov	r1, r6
 800913a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800913e:	f7fe bb83 	b.w	8007848 <d_print_comp_inner+0x598>
 8009142:	2600      	movs	r6, #0
 8009144:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009148:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800914c:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009150:	4798      	blx	r3
 8009152:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009156:	2201      	movs	r2, #1
 8009158:	4413      	add	r3, r2
 800915a:	4631      	mov	r1, r6
 800915c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009160:	f7ff b887 	b.w	8008272 <d_print_comp_inner+0xfc2>
 8009164:	2500      	movs	r5, #0
 8009166:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800916a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800916e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009172:	4620      	mov	r0, r4
 8009174:	4798      	blx	r3
 8009176:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800917a:	2201      	movs	r2, #1
 800917c:	4413      	add	r3, r2
 800917e:	4629      	mov	r1, r5
 8009180:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009184:	f7ff bb22 	b.w	80087cc <d_print_comp_inner+0x151c>
 8009188:	2500      	movs	r5, #0
 800918a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800918e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009192:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009196:	4620      	mov	r0, r4
 8009198:	4798      	blx	r3
 800919a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800919e:	2201      	movs	r2, #1
 80091a0:	4413      	add	r3, r2
 80091a2:	4629      	mov	r1, r5
 80091a4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80091a8:	e40c      	b.n	80089c4 <d_print_comp_inner+0x1714>
 80091aa:	2500      	movs	r5, #0
 80091ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091b4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80091b8:	4620      	mov	r0, r4
 80091ba:	4798      	blx	r3
 80091bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80091c0:	2201      	movs	r2, #1
 80091c2:	4413      	add	r3, r2
 80091c4:	4629      	mov	r1, r5
 80091c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80091ca:	f7ff bbd4 	b.w	8008976 <d_print_comp_inner+0x16c6>
 80091ce:	2500      	movs	r5, #0
 80091d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80091d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80091d8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80091dc:	4620      	mov	r0, r4
 80091de:	4798      	blx	r3
 80091e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80091e4:	2201      	movs	r2, #1
 80091e6:	4413      	add	r3, r2
 80091e8:	4629      	mov	r1, r5
 80091ea:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80091ee:	f7ff bba8 	b.w	8008942 <d_print_comp_inner+0x1692>
 80091f2:	2301      	movs	r3, #1
 80091f4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80091f8:	f7fe b91c 	b.w	8007434 <d_print_comp_inner+0x184>
 80091fc:	220d      	movs	r2, #13
 80091fe:	49d5      	ldr	r1, [pc, #852]	; (8009554 <d_print_comp_inner+0x22a4>)
 8009200:	4620      	mov	r0, r4
 8009202:	f7fd fd95 	bl	8006d30 <d_append_buffer>
 8009206:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800920a:	a804      	add	r0, sp, #16
 800920c:	3201      	adds	r2, #1
 800920e:	49d2      	ldr	r1, [pc, #840]	; (8009558 <d_print_comp_inner+0x22a8>)
 8009210:	f00a fc1e 	bl	8013a50 <siprintf>
 8009214:	a804      	add	r0, sp, #16
 8009216:	f7fd fc71 	bl	8006afc <strlen>
 800921a:	b320      	cbz	r0, 8009266 <d_print_comp_inner+0x1fb6>
 800921c:	ad04      	add	r5, sp, #16
 800921e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009222:	eb05 0a00 	add.w	sl, r5, r0
 8009226:	f04f 0900 	mov.w	r9, #0
 800922a:	e008      	b.n	800923e <d_print_comp_inner+0x1f8e>
 800922c:	460b      	mov	r3, r1
 800922e:	3101      	adds	r1, #1
 8009230:	45aa      	cmp	sl, r5
 8009232:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009236:	54e6      	strb	r6, [r4, r3]
 8009238:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800923c:	d013      	beq.n	8009266 <d_print_comp_inner+0x1fb6>
 800923e:	29ff      	cmp	r1, #255	; 0xff
 8009240:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009244:	d1f2      	bne.n	800922c <d_print_comp_inner+0x1f7c>
 8009246:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800924a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800924e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009252:	4620      	mov	r0, r4
 8009254:	4798      	blx	r3
 8009256:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800925a:	2101      	movs	r1, #1
 800925c:	440b      	add	r3, r1
 800925e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009262:	2300      	movs	r3, #0
 8009264:	e7e4      	b.n	8009230 <d_print_comp_inner+0x1f80>
 8009266:	2203      	movs	r2, #3
 8009268:	49bc      	ldr	r1, [pc, #752]	; (800955c <d_print_comp_inner+0x22ac>)
 800926a:	4620      	mov	r0, r4
 800926c:	f7fd fd60 	bl	8006d30 <d_append_buffer>
 8009270:	f8d8 8004 	ldr.w	r8, [r8, #4]
 8009274:	f7ff b996 	b.w	80085a4 <d_print_comp_inner+0x12f4>
 8009278:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 800927c:	aa14      	add	r2, sp, #80	; 0x50
 800927e:	f842 1d40 	str.w	r1, [r2, #-64]!
 8009282:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8009286:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800928a:	f027 0760 	bic.w	r7, r7, #96	; 0x60
 800928e:	686a      	ldr	r2, [r5, #4]
 8009290:	4639      	mov	r1, r7
 8009292:	4620      	mov	r0, r4
 8009294:	9306      	str	r3, [sp, #24]
 8009296:	9607      	str	r6, [sp, #28]
 8009298:	9505      	str	r5, [sp, #20]
 800929a:	f000 fc21 	bl	8009ae0 <d_print_comp>
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	9e06      	ldr	r6, [sp, #24]
 80092a2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80092a6:	2e00      	cmp	r6, #0
 80092a8:	f47e a8c4 	bne.w	8007434 <d_print_comp_inner+0x184>
 80092ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80092b0:	29ff      	cmp	r1, #255	; 0xff
 80092b2:	f000 8349 	beq.w	8009948 <d_print_comp_inner+0x2698>
 80092b6:	2320      	movs	r3, #32
 80092b8:	1c4a      	adds	r2, r1, #1
 80092ba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80092be:	5463      	strb	r3, [r4, r1]
 80092c0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80092c4:	f7fe bd10 	b.w	8007ce8 <d_print_comp_inner+0xa38>
 80092c8:	462a      	mov	r2, r5
 80092ca:	4639      	mov	r1, r7
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fc07 	bl	8009ae0 <d_print_comp>
 80092d2:	f7fe b8af 	b.w	8007434 <d_print_comp_inner+0x184>
 80092d6:	2500      	movs	r5, #0
 80092d8:	4619      	mov	r1, r3
 80092da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80092de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80092e2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80092e6:	4620      	mov	r0, r4
 80092e8:	4798      	blx	r3
 80092ea:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 80092ee:	2201      	movs	r2, #1
 80092f0:	4411      	add	r1, r2
 80092f2:	462b      	mov	r3, r5
 80092f4:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 80092f8:	f7fe bb6a 	b.w	80079d0 <d_print_comp_inner+0x720>
 80092fc:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8009300:	6842      	ldr	r2, [r0, #4]
 8009302:	ab14      	add	r3, sp, #80	; 0x50
 8009304:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
 8009308:	f843 1d40 	str.w	r1, [r3, #-64]!
 800930c:	2100      	movs	r1, #0
 800930e:	9505      	str	r5, [sp, #20]
 8009310:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8009314:	9007      	str	r0, [sp, #28]
 8009316:	9106      	str	r1, [sp, #24]
 8009318:	2a00      	cmp	r2, #0
 800931a:	f47e af72 	bne.w	8008202 <d_print_comp_inner+0xf52>
 800931e:	f7fe bf6f 	b.w	8008200 <d_print_comp_inner+0xf50>
 8009322:	2500      	movs	r5, #0
 8009324:	4619      	mov	r1, r3
 8009326:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800932a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800932e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009332:	4620      	mov	r0, r4
 8009334:	4798      	blx	r3
 8009336:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800933a:	2101      	movs	r1, #1
 800933c:	440a      	add	r2, r1
 800933e:	462b      	mov	r3, r5
 8009340:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009344:	f7ff b87b 	b.w	800843e <d_print_comp_inner+0x118e>
 8009348:	2600      	movs	r6, #0
 800934a:	4619      	mov	r1, r3
 800934c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009350:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009354:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009358:	4620      	mov	r0, r4
 800935a:	4798      	blx	r3
 800935c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009360:	2101      	movs	r1, #1
 8009362:	440a      	add	r2, r1
 8009364:	4633      	mov	r3, r6
 8009366:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800936a:	f7ff b852 	b.w	8008412 <d_print_comp_inner+0x1162>
 800936e:	2200      	movs	r2, #0
 8009370:	4619      	mov	r1, r3
 8009372:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8009376:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800937a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800937e:	4620      	mov	r0, r4
 8009380:	4798      	blx	r3
 8009382:	2329      	movs	r3, #41	; 0x29
 8009384:	7023      	strb	r3, [r4, #0]
 8009386:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800938a:	782a      	ldrb	r2, [r5, #0]
 800938c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009390:	2101      	movs	r1, #1
 8009392:	3301      	adds	r3, #1
 8009394:	2a3c      	cmp	r2, #60	; 0x3c
 8009396:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800939a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800939e:	f47e ac04 	bne.w	8007baa <d_print_comp_inner+0x8fa>
 80093a2:	e683      	b.n	80090ac <d_print_comp_inner+0x1dfc>
 80093a4:	4648      	mov	r0, r9
 80093a6:	496e      	ldr	r1, [pc, #440]	; (8009560 <d_print_comp_inner+0x22b0>)
 80093a8:	f005 fd08 	bl	800edbc <strcmp>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f040 8214 	bne.w	80097da <d_print_comp_inner+0x252a>
 80093b2:	68ab      	ldr	r3, [r5, #8]
 80093b4:	4639      	mov	r1, r7
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	4620      	mov	r0, r4
 80093ba:	f001 fa43 	bl	800a844 <d_print_subexpr>
 80093be:	f7fe b821 	b.w	8007404 <d_print_comp_inner+0x154>
 80093c2:	f04f 0800 	mov.w	r8, #0
 80093c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80093ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80093ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80093d2:	4620      	mov	r0, r4
 80093d4:	4798      	blx	r3
 80093d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80093da:	2201      	movs	r2, #1
 80093dc:	4413      	add	r3, r2
 80093de:	4641      	mov	r1, r8
 80093e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80093e4:	f7fe bbc6 	b.w	8007b74 <d_print_comp_inner+0x8c4>
 80093e8:	2500      	movs	r5, #0
 80093ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80093ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80093f2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80093f6:	4620      	mov	r0, r4
 80093f8:	4798      	blx	r3
 80093fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80093fe:	2201      	movs	r2, #1
 8009400:	4413      	add	r3, r2
 8009402:	4629      	mov	r1, r5
 8009404:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009408:	f7ff bbd2 	b.w	8008bb0 <d_print_comp_inner+0x1900>
 800940c:	4674      	mov	r4, lr
 800940e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
 8009412:	b389      	cbz	r1, 8009478 <d_print_comp_inner+0x21c8>
 8009414:	680a      	ldr	r2, [r1, #0]
 8009416:	4290      	cmp	r0, r2
 8009418:	d00a      	beq.n	8009430 <d_print_comp_inner+0x2180>
 800941a:	460b      	mov	r3, r1
 800941c:	e004      	b.n	8009428 <d_print_comp_inner+0x2178>
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	b353      	cbz	r3, 8009478 <d_print_comp_inner+0x21c8>
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	4290      	cmp	r0, r2
 8009426:	d003      	beq.n	8009430 <d_print_comp_inner+0x2180>
 8009428:	4295      	cmp	r5, r2
 800942a:	d1f8      	bne.n	800941e <d_print_comp_inner+0x216e>
 800942c:	4299      	cmp	r1, r3
 800942e:	d0f6      	beq.n	800941e <d_print_comp_inner+0x216e>
 8009430:	1d01      	adds	r1, r0, #4
 8009432:	4620      	mov	r0, r4
 8009434:	f7fd fe96 	bl	8007164 <d_lookup_template_argument.isra.6>
 8009438:	f04f 0800 	mov.w	r8, #0
 800943c:	2800      	cmp	r0, #0
 800943e:	f43e a801 	beq.w	8007444 <d_print_comp_inner+0x194>
 8009442:	7803      	ldrb	r3, [r0, #0]
 8009444:	2b2f      	cmp	r3, #47	; 0x2f
 8009446:	f47e aec4 	bne.w	80081d2 <d_print_comp_inner+0xf22>
 800944a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800944e:	e008      	b.n	8009462 <d_print_comp_inner+0x21b2>
 8009450:	6880      	ldr	r0, [r0, #8]
 8009452:	3b01      	subs	r3, #1
 8009454:	2800      	cmp	r0, #0
 8009456:	f43d aff0 	beq.w	800743a <d_print_comp_inner+0x18a>
 800945a:	7802      	ldrb	r2, [r0, #0]
 800945c:	2a2f      	cmp	r2, #47	; 0x2f
 800945e:	f47d afec 	bne.w	800743a <d_print_comp_inner+0x18a>
 8009462:	2b00      	cmp	r3, #0
 8009464:	dcf4      	bgt.n	8009450 <d_print_comp_inner+0x21a0>
 8009466:	f47d afe8 	bne.w	800743a <d_print_comp_inner+0x18a>
 800946a:	6840      	ldr	r0, [r0, #4]
 800946c:	2800      	cmp	r0, #0
 800946e:	f43d afe4 	beq.w	800743a <d_print_comp_inner+0x18a>
 8009472:	7803      	ldrb	r3, [r0, #0]
 8009474:	f7fe bead 	b.w	80081d2 <d_print_comp_inner+0xf22>
 8009478:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800947c:	1d01      	adds	r1, r0, #4
 800947e:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8009482:	4620      	mov	r0, r4
 8009484:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8009488:	f7fd fe6c 	bl	8007164 <d_lookup_template_argument.isra.6>
 800948c:	2800      	cmp	r0, #0
 800948e:	f43d afd7 	beq.w	8007440 <d_print_comp_inner+0x190>
 8009492:	f04f 0801 	mov.w	r8, #1
 8009496:	e7d4      	b.n	8009442 <d_print_comp_inner+0x2192>
 8009498:	7809      	ldrb	r1, [r1, #0]
 800949a:	f1a1 0063 	sub.w	r0, r1, #99	; 0x63
 800949e:	2801      	cmp	r0, #1
 80094a0:	d903      	bls.n	80094aa <d_print_comp_inner+0x21fa>
 80094a2:	3972      	subs	r1, #114	; 0x72
 80094a4:	2901      	cmp	r1, #1
 80094a6:	f63d af6e 	bhi.w	8007386 <d_print_comp_inner+0xd6>
 80094aa:	4639      	mov	r1, r7
 80094ac:	4620      	mov	r0, r4
 80094ae:	f001 f98b 	bl	800a7c8 <d_print_expr_op>
 80094b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80094b6:	29ff      	cmp	r1, #255	; 0xff
 80094b8:	f000 8263 	beq.w	8009982 <d_print_comp_inner+0x26d2>
 80094bc:	1c4a      	adds	r2, r1, #1
 80094be:	233c      	movs	r3, #60	; 0x3c
 80094c0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80094c4:	5463      	strb	r3, [r4, r1]
 80094c6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80094ca:	68ab      	ldr	r3, [r5, #8]
 80094cc:	4639      	mov	r1, r7
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fb05 	bl	8009ae0 <d_print_comp>
 80094d6:	2202      	movs	r2, #2
 80094d8:	4922      	ldr	r1, [pc, #136]	; (8009564 <d_print_comp_inner+0x22b4>)
 80094da:	4620      	mov	r0, r4
 80094dc:	f7fd fc28 	bl	8006d30 <d_append_buffer>
 80094e0:	68ab      	ldr	r3, [r5, #8]
 80094e2:	4639      	mov	r1, r7
 80094e4:	689a      	ldr	r2, [r3, #8]
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 fafa 	bl	8009ae0 <d_print_comp>
 80094ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80094f0:	29ff      	cmp	r1, #255	; 0xff
 80094f2:	f000 81d8 	beq.w	80098a6 <d_print_comp_inner+0x25f6>
 80094f6:	2329      	movs	r3, #41	; 0x29
 80094f8:	1c4a      	adds	r2, r1, #1
 80094fa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80094fe:	5463      	strb	r3, [r4, r1]
 8009500:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009504:	f7fd bf96 	b.w	8007434 <d_print_comp_inner+0x184>
 8009508:	4917      	ldr	r1, [pc, #92]	; (8009568 <d_print_comp_inner+0x22b8>)
 800950a:	6870      	ldr	r0, [r6, #4]
 800950c:	f00a fb09 	bl	8013b22 <strncmp>
 8009510:	2800      	cmp	r0, #0
 8009512:	f47e af6e 	bne.w	80083f2 <d_print_comp_inner+0x1142>
 8009516:	68aa      	ldr	r2, [r5, #8]
 8009518:	4639      	mov	r1, r7
 800951a:	4620      	mov	r0, r4
 800951c:	f000 fae0 	bl	8009ae0 <d_print_comp>
 8009520:	2202      	movs	r2, #2
 8009522:	4912      	ldr	r1, [pc, #72]	; (800956c <d_print_comp_inner+0x22bc>)
 8009524:	4620      	mov	r0, r4
 8009526:	f7fd fc03 	bl	8006d30 <d_append_buffer>
 800952a:	f7fe bf8e 	b.w	800844a <d_print_comp_inner+0x119a>
 800952e:	2600      	movs	r6, #0
 8009530:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009534:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009538:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800953c:	4620      	mov	r0, r4
 800953e:	4798      	blx	r3
 8009540:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009544:	2201      	movs	r2, #1
 8009546:	4413      	add	r3, r2
 8009548:	4631      	mov	r1, r6
 800954a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800954e:	f7ff b81c 	b.w	800858a <d_print_comp_inner+0x12da>
 8009552:	bf00      	nop
 8009554:	0801580c 	.word	0x0801580c
 8009558:	0801581c 	.word	0x0801581c
 800955c:	08015820 	.word	0x08015820
 8009560:	080159b8 	.word	0x080159b8
 8009564:	080159b4 	.word	0x080159b4
 8009568:	08015824 	.word	0x08015824
 800956c:	0801582c 	.word	0x0801582c
 8009570:	68aa      	ldr	r2, [r5, #8]
 8009572:	f892 8000 	ldrb.w	r8, [r2]
 8009576:	f1b8 0f00 	cmp.w	r8, #0
 800957a:	f47e aaf5 	bne.w	8007b68 <d_print_comp_inner+0x8b8>
 800957e:	2b3c      	cmp	r3, #60	; 0x3c
 8009580:	f000 81f3 	beq.w	800996a <d_print_comp_inner+0x26ba>
 8009584:	68aa      	ldr	r2, [r5, #8]
 8009586:	4639      	mov	r1, r7
 8009588:	4620      	mov	r0, r4
 800958a:	3e02      	subs	r6, #2
 800958c:	f000 faa8 	bl	8009ae0 <d_print_comp>
 8009590:	2e04      	cmp	r6, #4
 8009592:	f63d af4f 	bhi.w	8007434 <d_print_comp_inner+0x184>
 8009596:	e8df f006 	tbb	[pc, r6]
 800959a:	1826      	.short	0x1826
 800959c:	0a11      	.short	0x0a11
 800959e:	03          	.byte	0x03
 800959f:	00          	.byte	0x00
 80095a0:	4620      	mov	r0, r4
 80095a2:	2203      	movs	r2, #3
 80095a4:	49e3      	ldr	r1, [pc, #908]	; (8009934 <d_print_comp_inner+0x2684>)
 80095a6:	f7fd fbc3 	bl	8006d30 <d_append_buffer>
 80095aa:	f7fd bf43 	b.w	8007434 <d_print_comp_inner+0x184>
 80095ae:	4620      	mov	r0, r4
 80095b0:	2202      	movs	r2, #2
 80095b2:	49e1      	ldr	r1, [pc, #900]	; (8009938 <d_print_comp_inner+0x2688>)
 80095b4:	f7fd fbbc 	bl	8006d30 <d_append_buffer>
 80095b8:	f7fd bf3c 	b.w	8007434 <d_print_comp_inner+0x184>
 80095bc:	4620      	mov	r0, r4
 80095be:	2202      	movs	r2, #2
 80095c0:	49de      	ldr	r1, [pc, #888]	; (800993c <d_print_comp_inner+0x268c>)
 80095c2:	f7fd fbb5 	bl	8006d30 <d_append_buffer>
 80095c6:	f7fd bf35 	b.w	8007434 <d_print_comp_inner+0x184>
 80095ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80095ce:	29ff      	cmp	r1, #255	; 0xff
 80095d0:	f000 825f 	beq.w	8009a92 <d_print_comp_inner+0x27e2>
 80095d4:	236c      	movs	r3, #108	; 0x6c
 80095d6:	1c4a      	adds	r2, r1, #1
 80095d8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80095dc:	5463      	strb	r3, [r4, r1]
 80095de:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80095e2:	f7fd bf27 	b.w	8007434 <d_print_comp_inner+0x184>
 80095e6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80095ea:	29ff      	cmp	r1, #255	; 0xff
 80095ec:	f000 8263 	beq.w	8009ab6 <d_print_comp_inner+0x2806>
 80095f0:	2375      	movs	r3, #117	; 0x75
 80095f2:	1c4a      	adds	r2, r1, #1
 80095f4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80095f8:	5463      	strb	r3, [r4, r1]
 80095fa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80095fe:	f7fd bf19 	b.w	8007434 <d_print_comp_inner+0x184>
 8009602:	2500      	movs	r5, #0
 8009604:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009608:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800960c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009610:	4620      	mov	r0, r4
 8009612:	4798      	blx	r3
 8009614:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009618:	2201      	movs	r2, #1
 800961a:	4413      	add	r3, r2
 800961c:	4629      	mov	r1, r5
 800961e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009622:	e419      	b.n	8008e58 <d_print_comp_inner+0x1ba8>
 8009624:	2600      	movs	r6, #0
 8009626:	4619      	mov	r1, r3
 8009628:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800962c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009630:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009634:	4620      	mov	r0, r4
 8009636:	4798      	blx	r3
 8009638:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800963c:	2101      	movs	r1, #1
 800963e:	440a      	add	r2, r1
 8009640:	4633      	mov	r3, r6
 8009642:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009646:	f7fe ba30 	b.w	8007aaa <d_print_comp_inner+0x7fa>
 800964a:	6899      	ldr	r1, [r3, #8]
 800964c:	2901      	cmp	r1, #1
 800964e:	f47d ae9e 	bne.w	800738e <d_print_comp_inner+0xde>
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b3e      	cmp	r3, #62	; 0x3e
 8009658:	f47d ae99 	bne.w	800738e <d_print_comp_inner+0xde>
 800965c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009660:	29ff      	cmp	r1, #255	; 0xff
 8009662:	f000 81eb 	beq.w	8009a3c <d_print_comp_inner+0x278c>
 8009666:	1c4a      	adds	r2, r1, #1
 8009668:	2328      	movs	r3, #40	; 0x28
 800966a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800966e:	5463      	strb	r3, [r4, r1]
 8009670:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009674:	686a      	ldr	r2, [r5, #4]
 8009676:	68ae      	ldr	r6, [r5, #8]
 8009678:	f7fd be89 	b.w	800738e <d_print_comp_inner+0xde>
 800967c:	2500      	movs	r5, #0
 800967e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009682:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009686:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800968a:	4620      	mov	r0, r4
 800968c:	4798      	blx	r3
 800968e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009692:	4629      	mov	r1, r5
 8009694:	3301      	adds	r3, #1
 8009696:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800969a:	e4c0      	b.n	800901e <d_print_comp_inner+0x1d6e>
 800969c:	2500      	movs	r5, #0
 800969e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80096a2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80096a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80096aa:	4620      	mov	r0, r4
 80096ac:	4798      	blx	r3
 80096ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80096b2:	4629      	mov	r1, r5
 80096b4:	3301      	adds	r3, #1
 80096b6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80096ba:	f7ff b8c9 	b.w	8008850 <d_print_comp_inner+0x15a0>
 80096be:	2600      	movs	r6, #0
 80096c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80096c4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80096c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80096cc:	4620      	mov	r0, r4
 80096ce:	4798      	blx	r3
 80096d0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80096d4:	4631      	mov	r1, r6
 80096d6:	3301      	adds	r3, #1
 80096d8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80096dc:	f7fe b8e4 	b.w	80078a8 <d_print_comp_inner+0x5f8>
 80096e0:	f04f 0800 	mov.w	r8, #0
 80096e4:	4619      	mov	r1, r3
 80096e6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80096ea:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80096ee:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 80096f2:	4798      	blx	r3
 80096f4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80096f8:	4643      	mov	r3, r8
 80096fa:	3201      	adds	r2, #1
 80096fc:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009700:	f7fe b8bf 	b.w	8007882 <d_print_comp_inner+0x5d2>
 8009704:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8009708:	4619      	mov	r1, r3
 800970a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800970e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009712:	4620      	mov	r0, r4
 8009714:	4798      	blx	r3
 8009716:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800971a:	4633      	mov	r3, r6
 800971c:	3201      	adds	r2, #1
 800971e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009722:	f7ff bb87 	b.w	8008e34 <d_print_comp_inner+0x1b84>
 8009726:	255f      	movs	r5, #95	; 0x5f
 8009728:	f7ff ba7d 	b.w	8008c26 <d_print_comp_inner+0x1976>
 800972c:	68aa      	ldr	r2, [r5, #8]
 800972e:	4639      	mov	r1, r7
 8009730:	4620      	mov	r0, r4
 8009732:	f000 f9d5 	bl	8009ae0 <d_print_comp>
 8009736:	9a00      	ldr	r2, [sp, #0]
 8009738:	9b06      	ldr	r3, [sp, #24]
 800973a:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800973e:	2b00      	cmp	r3, #0
 8009740:	f43e aabe 	beq.w	8007cc0 <d_print_comp_inner+0xa10>
 8009744:	f7fd be76 	b.w	8007434 <d_print_comp_inner+0x184>
 8009748:	4642      	mov	r2, r8
 800974a:	4639      	mov	r1, r7
 800974c:	4620      	mov	r0, r4
 800974e:	f001 f879 	bl	800a844 <d_print_subexpr>
 8009752:	464a      	mov	r2, r9
 8009754:	4639      	mov	r1, r7
 8009756:	4620      	mov	r0, r4
 8009758:	f001 f836 	bl	800a7c8 <d_print_expr_op>
 800975c:	4632      	mov	r2, r6
 800975e:	4639      	mov	r1, r7
 8009760:	4620      	mov	r0, r4
 8009762:	f001 f86f 	bl	800a844 <d_print_subexpr>
 8009766:	4620      	mov	r0, r4
 8009768:	2203      	movs	r2, #3
 800976a:	4975      	ldr	r1, [pc, #468]	; (8009940 <d_print_comp_inner+0x2690>)
 800976c:	f7fd fae0 	bl	8006d30 <d_append_buffer>
 8009770:	462a      	mov	r2, r5
 8009772:	4639      	mov	r1, r7
 8009774:	4620      	mov	r0, r4
 8009776:	f001 f865 	bl	800a844 <d_print_subexpr>
 800977a:	f7fd be5b 	b.w	8007434 <d_print_comp_inner+0x184>
 800977e:	6893      	ldr	r3, [r2, #8]
 8009780:	4639      	mov	r1, r7
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	4620      	mov	r0, r4
 8009786:	2b29      	cmp	r3, #41	; 0x29
 8009788:	bf1c      	itt	ne
 800978a:	2301      	movne	r3, #1
 800978c:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 8009790:	6852      	ldr	r2, [r2, #4]
 8009792:	f001 f857 	bl	800a844 <d_print_subexpr>
 8009796:	f7fd be09 	b.w	80073ac <d_print_comp_inner+0xfc>
 800979a:	686a      	ldr	r2, [r5, #4]
 800979c:	4639      	mov	r1, r7
 800979e:	4620      	mov	r0, r4
 80097a0:	f001 f850 	bl	800a844 <d_print_subexpr>
 80097a4:	4620      	mov	r0, r4
 80097a6:	2203      	movs	r2, #3
 80097a8:	4966      	ldr	r1, [pc, #408]	; (8009944 <d_print_comp_inner+0x2694>)
 80097aa:	f7fd fac1 	bl	8006d30 <d_append_buffer>
 80097ae:	f7fd be41 	b.w	8007434 <d_print_comp_inner+0x184>
 80097b2:	686b      	ldr	r3, [r5, #4]
 80097b4:	781a      	ldrb	r2, [r3, #0]
 80097b6:	2a01      	cmp	r2, #1
 80097b8:	f47f ab23 	bne.w	8008e02 <d_print_comp_inner+0x1b52>
 80097bc:	68aa      	ldr	r2, [r5, #8]
 80097be:	7812      	ldrb	r2, [r2, #0]
 80097c0:	2a29      	cmp	r2, #41	; 0x29
 80097c2:	bf08      	it	eq
 80097c4:	461d      	moveq	r5, r3
 80097c6:	f7ff bb1c 	b.w	8008e02 <d_print_comp_inner+0x1b52>
 80097ca:	ab14      	add	r3, sp, #80	; 0x50
 80097cc:	f843 cd48 	str.w	ip, [r3, #-72]!
 80097d0:	9603      	str	r6, [sp, #12]
 80097d2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80097d6:	f7fe be9f 	b.w	8008518 <d_print_comp_inner+0x1268>
 80097da:	4642      	mov	r2, r8
 80097dc:	4639      	mov	r1, r7
 80097de:	4620      	mov	r0, r4
 80097e0:	f000 fff2 	bl	800a7c8 <d_print_expr_op>
 80097e4:	e5e5      	b.n	80093b2 <d_print_comp_inner+0x2102>
 80097e6:	2500      	movs	r5, #0
 80097e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80097ec:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80097f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80097f4:	4620      	mov	r0, r4
 80097f6:	4798      	blx	r3
 80097f8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80097fc:	4629      	mov	r1, r5
 80097fe:	3301      	adds	r3, #1
 8009800:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009804:	f7ff bbde 	b.w	8008fc4 <d_print_comp_inner+0x1d14>
 8009808:	f04f 0800 	mov.w	r8, #0
 800980c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009810:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009814:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009818:	4620      	mov	r0, r4
 800981a:	4798      	blx	r3
 800981c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009820:	4641      	mov	r1, r8
 8009822:	3301      	adds	r3, #1
 8009824:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009828:	e440      	b.n	80090ac <d_print_comp_inner+0x1dfc>
 800982a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800982e:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8009832:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009836:	4620      	mov	r0, r4
 8009838:	4798      	blx	r3
 800983a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800983e:	4639      	mov	r1, r7
 8009840:	3301      	adds	r3, #1
 8009842:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009846:	f7fe be7e 	b.w	8008546 <d_print_comp_inner+0x1296>
 800984a:	9b02      	ldr	r3, [sp, #8]
 800984c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8009850:	f7fe be6b 	b.w	800852a <d_print_comp_inner+0x127a>
 8009854:	4664      	mov	r4, ip
 8009856:	f7fe bf3c 	b.w	80086d2 <d_print_comp_inner+0x1422>
 800985a:	2600      	movs	r6, #0
 800985c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009860:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009864:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009868:	4620      	mov	r0, r4
 800986a:	4798      	blx	r3
 800986c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009870:	4631      	mov	r1, r6
 8009872:	3301      	adds	r3, #1
 8009874:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009878:	f7ff bbb2 	b.w	8008fe0 <d_print_comp_inner+0x1d30>
 800987c:	4660      	mov	r0, ip
 800987e:	46e0      	mov	r8, ip
 8009880:	f7fe bcb3 	b.w	80081ea <d_print_comp_inner+0xf3a>
 8009884:	2600      	movs	r6, #0
 8009886:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800988a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800988e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009892:	4620      	mov	r0, r4
 8009894:	4798      	blx	r3
 8009896:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800989a:	4631      	mov	r1, r6
 800989c:	3301      	adds	r3, #1
 800989e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098a2:	f7ff bbab 	b.w	8008ffc <d_print_comp_inner+0x1d4c>
 80098a6:	2500      	movs	r5, #0
 80098a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098ac:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80098b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098b4:	4620      	mov	r0, r4
 80098b6:	4798      	blx	r3
 80098b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098bc:	4629      	mov	r1, r5
 80098be:	3301      	adds	r3, #1
 80098c0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 80098c4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098c8:	e615      	b.n	80094f6 <d_print_comp_inner+0x2246>
 80098ca:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 80098ce:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098d6:	4620      	mov	r0, r4
 80098d8:	4798      	blx	r3
 80098da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80098de:	4631      	mov	r1, r6
 80098e0:	3301      	adds	r3, #1
 80098e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80098e6:	f7fd bd74 	b.w	80073d2 <d_print_comp_inner+0x122>
 80098ea:	2600      	movs	r6, #0
 80098ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80098f0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80098f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80098f8:	4620      	mov	r0, r4
 80098fa:	4798      	blx	r3
 80098fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009900:	4631      	mov	r1, r6
 8009902:	3301      	adds	r3, #1
 8009904:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009908:	f7fd bd75 	b.w	80073f6 <d_print_comp_inner+0x146>
 800990c:	686a      	ldr	r2, [r5, #4]
 800990e:	4639      	mov	r1, r7
 8009910:	4620      	mov	r0, r4
 8009912:	f000 ff97 	bl	800a844 <d_print_subexpr>
 8009916:	4632      	mov	r2, r6
 8009918:	4639      	mov	r1, r7
 800991a:	4620      	mov	r0, r4
 800991c:	f000 ff54 	bl	800a7c8 <d_print_expr_op>
 8009920:	f7fd bd88 	b.w	8007434 <d_print_comp_inner+0x184>
 8009924:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
 8009928:	2301      	movs	r3, #1
 800992a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 800992e:	f7fd bd81 	b.w	8007434 <d_print_comp_inner+0x184>
 8009932:	bf00      	nop
 8009934:	080159d8 	.word	0x080159d8
 8009938:	080159d4 	.word	0x080159d4
 800993c:	080159d0 	.word	0x080159d0
 8009940:	080159c4 	.word	0x080159c4
 8009944:	08015a08 	.word	0x08015a08
 8009948:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800994c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009950:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009954:	4620      	mov	r0, r4
 8009956:	4798      	blx	r3
 8009958:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800995c:	4631      	mov	r1, r6
 800995e:	3301      	adds	r3, #1
 8009960:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8009964:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009968:	e4a5      	b.n	80092b6 <d_print_comp_inner+0x2006>
 800996a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800996e:	29ff      	cmp	r1, #255	; 0xff
 8009970:	d054      	beq.n	8009a1c <d_print_comp_inner+0x276c>
 8009972:	232d      	movs	r3, #45	; 0x2d
 8009974:	1c4a      	adds	r2, r1, #1
 8009976:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800997a:	5463      	strb	r3, [r4, r1]
 800997c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009980:	e600      	b.n	8009584 <d_print_comp_inner+0x22d4>
 8009982:	2600      	movs	r6, #0
 8009984:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009988:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800998c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009990:	4620      	mov	r0, r4
 8009992:	4798      	blx	r3
 8009994:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009998:	4631      	mov	r1, r6
 800999a:	3301      	adds	r3, #1
 800999c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80099a0:	e58c      	b.n	80094bc <d_print_comp_inner+0x220c>
 80099a2:	f04f 0800 	mov.w	r8, #0
 80099a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80099aa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80099ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80099b2:	4620      	mov	r0, r4
 80099b4:	4798      	blx	r3
 80099b6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80099ba:	4641      	mov	r1, r8
 80099bc:	3301      	adds	r3, #1
 80099be:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80099c2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80099c6:	f7fe b9c4 	b.w	8007d52 <d_print_comp_inner+0xaa2>
 80099ca:	4688      	mov	r8, r1
 80099cc:	e51f      	b.n	800940e <d_print_comp_inner+0x215e>
 80099ce:	454f      	cmp	r7, r9
 80099d0:	f67f aea9 	bls.w	8009726 <d_print_comp_inner+0x2476>
 80099d4:	2d5f      	cmp	r5, #95	; 0x5f
 80099d6:	f47f aea6 	bne.w	8009726 <d_print_comp_inner+0x2476>
 80099da:	28ff      	cmp	r0, #255	; 0xff
 80099dc:	f63f a923 	bhi.w	8008c26 <d_print_comp_inner+0x1976>
 80099e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80099e4:	b2c5      	uxtb	r5, r0
 80099e6:	29ff      	cmp	r1, #255	; 0xff
 80099e8:	d10f      	bne.n	8009a0a <d_print_comp_inner+0x275a>
 80099ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80099ee:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80099f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80099f6:	4620      	mov	r0, r4
 80099f8:	4798      	blx	r3
 80099fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80099fe:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009a02:	3301      	adds	r3, #1
 8009a04:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a08:	2100      	movs	r1, #0
 8009a0a:	1c4b      	adds	r3, r1, #1
 8009a0c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8009a10:	464e      	mov	r6, r9
 8009a12:	5465      	strb	r5, [r4, r1]
 8009a14:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8009a18:	f7ff b90f 	b.w	8008c3a <d_print_comp_inner+0x198a>
 8009a1c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009a20:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8009a24:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009a28:	4798      	blx	r3
 8009a2a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a2e:	4641      	mov	r1, r8
 8009a30:	3301      	adds	r3, #1
 8009a32:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 8009a36:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a3a:	e79a      	b.n	8009972 <d_print_comp_inner+0x26c2>
 8009a3c:	2600      	movs	r6, #0
 8009a3e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a42:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8009a46:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	4798      	blx	r3
 8009a4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a52:	4631      	mov	r1, r6
 8009a54:	3301      	adds	r3, #1
 8009a56:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8009a5a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a5e:	e602      	b.n	8009666 <d_print_comp_inner+0x23b6>
 8009a60:	2205      	movs	r2, #5
 8009a62:	491e      	ldr	r1, [pc, #120]	; (8009adc <d_print_comp_inner+0x282c>)
 8009a64:	f7fd f964 	bl	8006d30 <d_append_buffer>
 8009a68:	f7fd bce4 	b.w	8007434 <d_print_comp_inner+0x184>
 8009a6c:	2500      	movs	r5, #0
 8009a6e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a72:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009a76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	4798      	blx	r3
 8009a7e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009a82:	4629      	mov	r1, r5
 8009a84:	3301      	adds	r3, #1
 8009a86:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009a8a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009a8e:	f7fd bcca 	b.w	8007426 <d_print_comp_inner+0x176>
 8009a92:	2500      	movs	r5, #0
 8009a94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009a98:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009a9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	4798      	blx	r3
 8009aa4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	3301      	adds	r3, #1
 8009aac:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009ab0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009ab4:	e58e      	b.n	80095d4 <d_print_comp_inner+0x2324>
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009abc:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009ac0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	4798      	blx	r3
 8009ac8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009acc:	4629      	mov	r1, r5
 8009ace:	3301      	adds	r3, #1
 8009ad0:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8009ad4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009ad8:	e58a      	b.n	80095f0 <d_print_comp_inner+0x2340>
 8009ada:	bf00      	nop
 8009adc:	080159dc 	.word	0x080159dc

08009ae0 <d_print_comp>:
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8009aec:	4604      	mov	r4, r0
 8009aee:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009af2:	f7fd fbdd 	bl	80072b0 <d_print_comp_inner>
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009afc:	b002      	add	sp, #8
 8009afe:	bd10      	pop	{r4, pc}

08009b00 <d_print_mod>:
 8009b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b04:	7813      	ldrb	r3, [r2, #0]
 8009b06:	b082      	sub	sp, #8
 8009b08:	3b03      	subs	r3, #3
 8009b0a:	4615      	mov	r5, r2
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4688      	mov	r8, r1
 8009b10:	2b2a      	cmp	r3, #42	; 0x2a
 8009b12:	f200 81d2 	bhi.w	8009eba <d_print_mod+0x3ba>
 8009b16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b1a:	0051      	.short	0x0051
 8009b1c:	01d001d0 	.word	0x01d001d0
 8009b20:	01d001d0 	.word	0x01d001d0
 8009b24:	01d001d0 	.word	0x01d001d0
 8009b28:	01d001d0 	.word	0x01d001d0
 8009b2c:	01d001d0 	.word	0x01d001d0
 8009b30:	01d001d0 	.word	0x01d001d0
 8009b34:	01d001d0 	.word	0x01d001d0
 8009b38:	01d001d0 	.word	0x01d001d0
 8009b3c:	01d001d0 	.word	0x01d001d0
 8009b40:	01d001d0 	.word	0x01d001d0
 8009b44:	006201d0 	.word	0x006201d0
 8009b48:	00ac0087 	.word	0x00ac0087
 8009b4c:	00870062 	.word	0x00870062
 8009b50:	00d000ac 	.word	0x00d000ac
 8009b54:	011800e9 	.word	0x011800e9
 8009b58:	013b012a 	.word	0x013b012a
 8009b5c:	0141013e 	.word	0x0141013e
 8009b60:	01d00167 	.word	0x01d00167
 8009b64:	01d001d0 	.word	0x01d001d0
 8009b68:	018d01d0 	.word	0x018d01d0
 8009b6c:	002b01d0 	.word	0x002b01d0
 8009b70:	4ed8      	ldr	r6, [pc, #864]	; (8009ed4 <d_print_mod+0x3d4>)
 8009b72:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009b76:	f106 0a0a 	add.w	sl, r6, #10
 8009b7a:	f04f 0900 	mov.w	r9, #0
 8009b7e:	e009      	b.n	8009b94 <d_print_mod+0x94>
 8009b80:	460b      	mov	r3, r1
 8009b82:	3101      	adds	r1, #1
 8009b84:	45b2      	cmp	sl, r6
 8009b86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009b8a:	54e7      	strb	r7, [r4, r3]
 8009b8c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8009b90:	f000 81b0 	beq.w	8009ef4 <d_print_mod+0x3f4>
 8009b94:	29ff      	cmp	r1, #255	; 0xff
 8009b96:	f816 7b01 	ldrb.w	r7, [r6], #1
 8009b9a:	d1f1      	bne.n	8009b80 <d_print_mod+0x80>
 8009b9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009ba0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8009ba4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ba8:	4620      	mov	r0, r4
 8009baa:	4798      	blx	r3
 8009bac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	440b      	add	r3, r1
 8009bb4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009bb8:	2300      	movs	r3, #0
 8009bba:	e7e3      	b.n	8009b84 <d_print_mod+0x84>
 8009bbc:	686b      	ldr	r3, [r5, #4]
 8009bbe:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009bc8:	4620      	mov	r0, r4
 8009bca:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009bce:	f7fd fb6f 	bl	80072b0 <d_print_comp_inner>
 8009bd2:	9b01      	ldr	r3, [sp, #4]
 8009bd4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009bd8:	b002      	add	sp, #8
 8009bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bde:	4dbe      	ldr	r5, [pc, #760]	; (8009ed8 <d_print_mod+0x3d8>)
 8009be0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009be4:	f105 0709 	add.w	r7, r5, #9
 8009be8:	f04f 0800 	mov.w	r8, #0
 8009bec:	e008      	b.n	8009c00 <d_print_mod+0x100>
 8009bee:	460b      	mov	r3, r1
 8009bf0:	3101      	adds	r1, #1
 8009bf2:	42af      	cmp	r7, r5
 8009bf4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009bf8:	54e6      	strb	r6, [r4, r3]
 8009bfa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009bfe:	d0eb      	beq.n	8009bd8 <d_print_mod+0xd8>
 8009c00:	29ff      	cmp	r1, #255	; 0xff
 8009c02:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c06:	d1f2      	bne.n	8009bee <d_print_mod+0xee>
 8009c08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c0c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009c10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009c14:	4620      	mov	r0, r4
 8009c16:	4798      	blx	r3
 8009c18:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	440b      	add	r3, r1
 8009c20:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009c24:	2300      	movs	r3, #0
 8009c26:	e7e4      	b.n	8009bf2 <d_print_mod+0xf2>
 8009c28:	4dac      	ldr	r5, [pc, #688]	; (8009edc <d_print_mod+0x3dc>)
 8009c2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c2e:	f105 0709 	add.w	r7, r5, #9
 8009c32:	f04f 0800 	mov.w	r8, #0
 8009c36:	e008      	b.n	8009c4a <d_print_mod+0x14a>
 8009c38:	460b      	mov	r3, r1
 8009c3a:	3101      	adds	r1, #1
 8009c3c:	42af      	cmp	r7, r5
 8009c3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009c42:	54e6      	strb	r6, [r4, r3]
 8009c44:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009c48:	d0c6      	beq.n	8009bd8 <d_print_mod+0xd8>
 8009c4a:	29ff      	cmp	r1, #255	; 0xff
 8009c4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c50:	d1f2      	bne.n	8009c38 <d_print_mod+0x138>
 8009c52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c56:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009c5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009c5e:	4620      	mov	r0, r4
 8009c60:	4798      	blx	r3
 8009c62:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009c66:	2101      	movs	r1, #1
 8009c68:	440b      	add	r3, r1
 8009c6a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009c6e:	2300      	movs	r3, #0
 8009c70:	e7e4      	b.n	8009c3c <d_print_mod+0x13c>
 8009c72:	4d9b      	ldr	r5, [pc, #620]	; (8009ee0 <d_print_mod+0x3e0>)
 8009c74:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009c78:	1daf      	adds	r7, r5, #6
 8009c7a:	f04f 0800 	mov.w	r8, #0
 8009c7e:	e008      	b.n	8009c92 <d_print_mod+0x192>
 8009c80:	460b      	mov	r3, r1
 8009c82:	3101      	adds	r1, #1
 8009c84:	42af      	cmp	r7, r5
 8009c86:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009c8a:	54e6      	strb	r6, [r4, r3]
 8009c8c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009c90:	d0a2      	beq.n	8009bd8 <d_print_mod+0xd8>
 8009c92:	29ff      	cmp	r1, #255	; 0xff
 8009c94:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009c98:	d1f2      	bne.n	8009c80 <d_print_mod+0x180>
 8009c9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009c9e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009ca2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4798      	blx	r3
 8009caa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009cae:	2101      	movs	r1, #1
 8009cb0:	440b      	add	r3, r1
 8009cb2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e7e4      	b.n	8009c84 <d_print_mod+0x184>
 8009cba:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009cbe:	2bff      	cmp	r3, #255	; 0xff
 8009cc0:	f000 8175 	beq.w	8009fae <d_print_mod+0x4ae>
 8009cc4:	1c59      	adds	r1, r3, #1
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009ccc:	54e2      	strb	r2, [r4, r3]
 8009cce:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009cd2:	29ff      	cmp	r1, #255	; 0xff
 8009cd4:	f000 8139 	beq.w	8009f4a <d_print_mod+0x44a>
 8009cd8:	1c4a      	adds	r2, r1, #1
 8009cda:	2326      	movs	r3, #38	; 0x26
 8009cdc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009ce0:	5463      	strb	r3, [r4, r1]
 8009ce2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009ce6:	b002      	add	sp, #8
 8009ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009cf0:	2bff      	cmp	r3, #255	; 0xff
 8009cf2:	f000 816d 	beq.w	8009fd0 <d_print_mod+0x4d0>
 8009cf6:	1c59      	adds	r1, r3, #1
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009cfe:	54e2      	strb	r2, [r4, r3]
 8009d00:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8009d04:	4d77      	ldr	r5, [pc, #476]	; (8009ee4 <d_print_mod+0x3e4>)
 8009d06:	f04f 0800 	mov.w	r8, #0
 8009d0a:	1caf      	adds	r7, r5, #2
 8009d0c:	e009      	b.n	8009d22 <d_print_mod+0x222>
 8009d0e:	460b      	mov	r3, r1
 8009d10:	3101      	adds	r1, #1
 8009d12:	42af      	cmp	r7, r5
 8009d14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009d18:	54e6      	strb	r6, [r4, r3]
 8009d1a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009d1e:	f43f af5b 	beq.w	8009bd8 <d_print_mod+0xd8>
 8009d22:	29ff      	cmp	r1, #255	; 0xff
 8009d24:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009d28:	d1f1      	bne.n	8009d0e <d_print_mod+0x20e>
 8009d2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009d2e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009d32:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009d36:	4620      	mov	r0, r4
 8009d38:	4798      	blx	r3
 8009d3a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009d3e:	2101      	movs	r1, #1
 8009d40:	440b      	add	r3, r1
 8009d42:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009d46:	2300      	movs	r3, #0
 8009d48:	e7e3      	b.n	8009d12 <d_print_mod+0x212>
 8009d4a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009d4e:	29ff      	cmp	r1, #255	; 0xff
 8009d50:	f000 810c 	beq.w	8009f6c <d_print_mod+0x46c>
 8009d54:	1c4a      	adds	r2, r1, #1
 8009d56:	2320      	movs	r3, #32
 8009d58:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009d5c:	5463      	strb	r3, [r4, r1]
 8009d5e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009d62:	68ab      	ldr	r3, [r5, #8]
 8009d64:	4641      	mov	r1, r8
 8009d66:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	e72a      	b.n	8009bc4 <d_print_mod+0xc4>
 8009d6e:	f011 0804 	ands.w	r8, r1, #4
 8009d72:	f47f af31 	bne.w	8009bd8 <d_print_mod+0xd8>
 8009d76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009d7a:	29ff      	cmp	r1, #255	; 0xff
 8009d7c:	f000 8139 	beq.w	8009ff2 <d_print_mod+0x4f2>
 8009d80:	1c4a      	adds	r2, r1, #1
 8009d82:	232a      	movs	r3, #42	; 0x2a
 8009d84:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009d88:	5463      	strb	r3, [r4, r1]
 8009d8a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009d8e:	e723      	b.n	8009bd8 <d_print_mod+0xd8>
 8009d90:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009d94:	e79d      	b.n	8009cd2 <d_print_mod+0x1d2>
 8009d96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009d9a:	e7b3      	b.n	8009d04 <d_print_mod+0x204>
 8009d9c:	4d52      	ldr	r5, [pc, #328]	; (8009ee8 <d_print_mod+0x3e8>)
 8009d9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009da2:	f105 0708 	add.w	r7, r5, #8
 8009da6:	f04f 0800 	mov.w	r8, #0
 8009daa:	e009      	b.n	8009dc0 <d_print_mod+0x2c0>
 8009dac:	460b      	mov	r3, r1
 8009dae:	3101      	adds	r1, #1
 8009db0:	42af      	cmp	r7, r5
 8009db2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009db6:	54e6      	strb	r6, [r4, r3]
 8009db8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009dbc:	f43f af0c 	beq.w	8009bd8 <d_print_mod+0xd8>
 8009dc0:	29ff      	cmp	r1, #255	; 0xff
 8009dc2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009dc6:	d1f1      	bne.n	8009dac <d_print_mod+0x2ac>
 8009dc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009dcc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009dd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4798      	blx	r3
 8009dd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009ddc:	2101      	movs	r1, #1
 8009dde:	440b      	add	r3, r1
 8009de0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009de4:	2300      	movs	r3, #0
 8009de6:	e7e3      	b.n	8009db0 <d_print_mod+0x2b0>
 8009de8:	4d40      	ldr	r5, [pc, #256]	; (8009eec <d_print_mod+0x3ec>)
 8009dea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009dee:	f105 070a 	add.w	r7, r5, #10
 8009df2:	f04f 0800 	mov.w	r8, #0
 8009df6:	e009      	b.n	8009e0c <d_print_mod+0x30c>
 8009df8:	460b      	mov	r3, r1
 8009dfa:	3101      	adds	r1, #1
 8009dfc:	42af      	cmp	r7, r5
 8009dfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009e02:	54e6      	strb	r6, [r4, r3]
 8009e04:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009e08:	f43f aee6 	beq.w	8009bd8 <d_print_mod+0xd8>
 8009e0c:	29ff      	cmp	r1, #255	; 0xff
 8009e0e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009e12:	d1f1      	bne.n	8009df8 <d_print_mod+0x2f8>
 8009e14:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009e18:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009e1c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009e20:	4620      	mov	r0, r4
 8009e22:	4798      	blx	r3
 8009e24:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009e28:	2101      	movs	r1, #1
 8009e2a:	440b      	add	r3, r1
 8009e2c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009e30:	2300      	movs	r3, #0
 8009e32:	e7e3      	b.n	8009dfc <d_print_mod+0x2fc>
 8009e34:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8009e38:	2b28      	cmp	r3, #40	; 0x28
 8009e3a:	d00a      	beq.n	8009e52 <d_print_mod+0x352>
 8009e3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009e40:	29ff      	cmp	r1, #255	; 0xff
 8009e42:	d072      	beq.n	8009f2a <d_print_mod+0x42a>
 8009e44:	1c4a      	adds	r2, r1, #1
 8009e46:	2320      	movs	r3, #32
 8009e48:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009e4c:	5463      	strb	r3, [r4, r1]
 8009e4e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009e52:	686b      	ldr	r3, [r5, #4]
 8009e54:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009e58:	4641      	mov	r1, r8
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009e60:	4620      	mov	r0, r4
 8009e62:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009e66:	f7fd fa23 	bl	80072b0 <d_print_comp_inner>
 8009e6a:	4d21      	ldr	r5, [pc, #132]	; (8009ef0 <d_print_mod+0x3f0>)
 8009e6c:	9b01      	ldr	r3, [sp, #4]
 8009e6e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009e72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009e76:	1cef      	adds	r7, r5, #3
 8009e78:	f04f 0800 	mov.w	r8, #0
 8009e7c:	e009      	b.n	8009e92 <d_print_mod+0x392>
 8009e7e:	460b      	mov	r3, r1
 8009e80:	3101      	adds	r1, #1
 8009e82:	42af      	cmp	r7, r5
 8009e84:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8009e88:	54e6      	strb	r6, [r4, r3]
 8009e8a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8009e8e:	f43f aea3 	beq.w	8009bd8 <d_print_mod+0xd8>
 8009e92:	29ff      	cmp	r1, #255	; 0xff
 8009e94:	f815 6b01 	ldrb.w	r6, [r5], #1
 8009e98:	d1f1      	bne.n	8009e7e <d_print_mod+0x37e>
 8009e9a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009e9e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8009ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	4798      	blx	r3
 8009eaa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009eae:	2101      	movs	r1, #1
 8009eb0:	440b      	add	r3, r1
 8009eb2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e7e3      	b.n	8009e82 <d_print_mod+0x382>
 8009eba:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	9500      	str	r5, [sp, #0]
 8009ec8:	f7fd f9f2 	bl	80072b0 <d_print_comp_inner>
 8009ecc:	9b01      	ldr	r3, [sp, #4]
 8009ece:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009ed2:	e681      	b.n	8009bd8 <d_print_mod+0xd8>
 8009ed4:	08015ac8 	.word	0x08015ac8
 8009ed8:	08015a87 	.word	0x08015a87
 8009edc:	08015a93 	.word	0x08015a93
 8009ee0:	08015aa0 	.word	0x08015aa0
 8009ee4:	08015aa8 	.word	0x08015aa8
 8009ee8:	08015aab 	.word	0x08015aab
 8009eec:	08015ab8 	.word	0x08015ab8
 8009ef0:	08015ac4 	.word	0x08015ac4
 8009ef4:	686b      	ldr	r3, [r5, #4]
 8009ef6:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 8009efa:	461a      	mov	r2, r3
 8009efc:	4641      	mov	r1, r8
 8009efe:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 8009f02:	4620      	mov	r0, r4
 8009f04:	e88d 0028 	stmia.w	sp, {r3, r5}
 8009f08:	f7fd f9d2 	bl	80072b0 <d_print_comp_inner>
 8009f0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8009f10:	9b01      	ldr	r3, [sp, #4]
 8009f12:	29ff      	cmp	r1, #255	; 0xff
 8009f14:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8009f18:	d038      	beq.n	8009f8c <d_print_mod+0x48c>
 8009f1a:	1c4a      	adds	r2, r1, #1
 8009f1c:	2329      	movs	r3, #41	; 0x29
 8009f1e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8009f22:	5463      	strb	r3, [r4, r1]
 8009f24:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8009f28:	e656      	b.n	8009bd8 <d_print_mod+0xd8>
 8009f2a:	2600      	movs	r6, #0
 8009f2c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009f30:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009f34:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009f38:	4798      	blx	r3
 8009f3a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009f3e:	2201      	movs	r2, #1
 8009f40:	4413      	add	r3, r2
 8009f42:	4631      	mov	r1, r6
 8009f44:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009f48:	e77d      	b.n	8009e46 <d_print_mod+0x346>
 8009f4a:	2500      	movs	r5, #0
 8009f4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009f50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009f54:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009f58:	4620      	mov	r0, r4
 8009f5a:	4798      	blx	r3
 8009f5c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009f60:	2201      	movs	r2, #1
 8009f62:	4413      	add	r3, r2
 8009f64:	4629      	mov	r1, r5
 8009f66:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009f6a:	e6b6      	b.n	8009cda <d_print_mod+0x1da>
 8009f6c:	2600      	movs	r6, #0
 8009f6e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009f72:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009f76:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8009f7a:	4798      	blx	r3
 8009f7c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009f80:	2201      	movs	r2, #1
 8009f82:	4413      	add	r3, r2
 8009f84:	4631      	mov	r1, r6
 8009f86:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009f8a:	e6e4      	b.n	8009d56 <d_print_mod+0x256>
 8009f8c:	2500      	movs	r5, #0
 8009f8e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8009f92:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8009f96:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4798      	blx	r3
 8009f9e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	4413      	add	r3, r2
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 8009fac:	e7b6      	b.n	8009f1c <d_print_mod+0x41c>
 8009fae:	2500      	movs	r5, #0
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009fb6:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009fba:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8009fbe:	4798      	blx	r3
 8009fc0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	440a      	add	r2, r1
 8009fc8:	462b      	mov	r3, r5
 8009fca:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009fce:	e67a      	b.n	8009cc6 <d_print_mod+0x1c6>
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009fd8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009fdc:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8009fe0:	4798      	blx	r3
 8009fe2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	440a      	add	r2, r1
 8009fea:	462b      	mov	r3, r5
 8009fec:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 8009ff0:	e682      	b.n	8009cf8 <d_print_mod+0x1f8>
 8009ff2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8009ff6:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8009ffa:	f880 80ff 	strb.w	r8, [r0, #255]	; 0xff
 8009ffe:	4798      	blx	r3
 800a000:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a004:	2201      	movs	r2, #1
 800a006:	4413      	add	r3, r2
 800a008:	4641      	mov	r1, r8
 800a00a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a00e:	e6b8      	b.n	8009d82 <d_print_mod+0x282>

0800a010 <d_print_mod_list>:
 800a010:	2a00      	cmp	r2, #0
 800a012:	f000 809c 	beq.w	800a14e <d_print_mod_list+0x13e>
 800a016:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01a:	461e      	mov	r6, r3
 800a01c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 800a020:	b089      	sub	sp, #36	; 0x24
 800a022:	4605      	mov	r5, r0
 800a024:	bb33      	cbnz	r3, 800a074 <d_print_mod_list+0x64>
 800a026:	460f      	mov	r7, r1
 800a028:	4614      	mov	r4, r2
 800a02a:	f04f 0801 	mov.w	r8, #1
 800a02e:	e002      	b.n	800a036 <d_print_mod_list+0x26>
 800a030:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 800a034:	b9f3      	cbnz	r3, 800a074 <d_print_mod_list+0x64>
 800a036:	68a3      	ldr	r3, [r4, #8]
 800a038:	b9cb      	cbnz	r3, 800a06e <d_print_mod_list+0x5e>
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	7813      	ldrb	r3, [r2, #0]
 800a03e:	b91e      	cbnz	r6, 800a048 <d_print_mod_list+0x38>
 800a040:	f1a3 011c 	sub.w	r1, r3, #28
 800a044:	2904      	cmp	r1, #4
 800a046:	d912      	bls.n	800a06e <d_print_mod_list+0x5e>
 800a048:	68e1      	ldr	r1, [r4, #12]
 800a04a:	2b29      	cmp	r3, #41	; 0x29
 800a04c:	f8c4 8008 	str.w	r8, [r4, #8]
 800a050:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 800a054:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 800a058:	d00f      	beq.n	800a07a <d_print_mod_list+0x6a>
 800a05a:	2b2a      	cmp	r3, #42	; 0x2a
 800a05c:	d018      	beq.n	800a090 <d_print_mod_list+0x80>
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d021      	beq.n	800a0a6 <d_print_mod_list+0x96>
 800a062:	4639      	mov	r1, r7
 800a064:	4628      	mov	r0, r5
 800a066:	f7ff fd4b 	bl	8009b00 <d_print_mod>
 800a06a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a06e:	6824      	ldr	r4, [r4, #0]
 800a070:	2c00      	cmp	r4, #0
 800a072:	d1dd      	bne.n	800a030 <d_print_mod_list+0x20>
 800a074:	b009      	add	sp, #36	; 0x24
 800a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	3208      	adds	r2, #8
 800a07e:	4639      	mov	r1, r7
 800a080:	4628      	mov	r0, r5
 800a082:	f000 f9d7 	bl	800a434 <d_print_function_type.isra.11>
 800a086:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a08a:	b009      	add	sp, #36	; 0x24
 800a08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	3204      	adds	r2, #4
 800a094:	4639      	mov	r1, r7
 800a096:	4628      	mov	r0, r5
 800a098:	f000 f8f0 	bl	800a27c <d_print_array_type.isra.10>
 800a09c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a0a0:	b009      	add	sp, #36	; 0x24
 800a0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a6:	2600      	movs	r6, #0
 800a0a8:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 800a0ac:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 800a0b0:	6852      	ldr	r2, [r2, #4]
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f7ff fd13 	bl	8009ae0 <d_print_comp>
 800a0ba:	f017 0b04 	ands.w	fp, r7, #4
 800a0be:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 800a0c2:	d020      	beq.n	800a106 <d_print_mod_list+0xf6>
 800a0c4:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a0c8:	29ff      	cmp	r1, #255	; 0xff
 800a0ca:	f000 80be 	beq.w	800a24a <d_print_mod_list+0x23a>
 800a0ce:	1c4a      	adds	r2, r1, #1
 800a0d0:	232e      	movs	r3, #46	; 0x2e
 800a0d2:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 800a0d6:	546b      	strb	r3, [r5, r1]
 800a0d8:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 800a0dc:	6863      	ldr	r3, [r4, #4]
 800a0de:	689c      	ldr	r4, [r3, #8]
 800a0e0:	7823      	ldrb	r3, [r4, #0]
 800a0e2:	2b45      	cmp	r3, #69	; 0x45
 800a0e4:	d102      	bne.n	800a0ec <d_print_mod_list+0xdc>
 800a0e6:	e033      	b.n	800a150 <d_print_mod_list+0x140>
 800a0e8:	6864      	ldr	r4, [r4, #4]
 800a0ea:	7823      	ldrb	r3, [r4, #0]
 800a0ec:	3b1c      	subs	r3, #28
 800a0ee:	2b04      	cmp	r3, #4
 800a0f0:	d9fa      	bls.n	800a0e8 <d_print_mod_list+0xd8>
 800a0f2:	4622      	mov	r2, r4
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f7ff fcf2 	bl	8009ae0 <d_print_comp>
 800a0fc:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 800a100:	b009      	add	sp, #36	; 0x24
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	4e59      	ldr	r6, [pc, #356]	; (800a26c <d_print_mod_list+0x25c>)
 800a108:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a10c:	f106 0a02 	add.w	sl, r6, #2
 800a110:	e009      	b.n	800a126 <d_print_mod_list+0x116>
 800a112:	460b      	mov	r3, r1
 800a114:	3101      	adds	r1, #1
 800a116:	45b2      	cmp	sl, r6
 800a118:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a11c:	f805 8003 	strb.w	r8, [r5, r3]
 800a120:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a124:	d0da      	beq.n	800a0dc <d_print_mod_list+0xcc>
 800a126:	29ff      	cmp	r1, #255	; 0xff
 800a128:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a12c:	d1f1      	bne.n	800a112 <d_print_mod_list+0x102>
 800a12e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a132:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a136:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a13a:	4628      	mov	r0, r5
 800a13c:	4798      	blx	r3
 800a13e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a142:	2101      	movs	r1, #1
 800a144:	440b      	add	r3, r1
 800a146:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a14a:	2300      	movs	r3, #0
 800a14c:	e7e3      	b.n	800a116 <d_print_mod_list+0x106>
 800a14e:	4770      	bx	lr
 800a150:	4e47      	ldr	r6, [pc, #284]	; (800a270 <d_print_mod_list+0x260>)
 800a152:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a156:	f106 0a0d 	add.w	sl, r6, #13
 800a15a:	f04f 0b00 	mov.w	fp, #0
 800a15e:	e009      	b.n	800a174 <d_print_mod_list+0x164>
 800a160:	460b      	mov	r3, r1
 800a162:	3101      	adds	r1, #1
 800a164:	45b2      	cmp	sl, r6
 800a166:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a16a:	f805 8003 	strb.w	r8, [r5, r3]
 800a16e:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a172:	d013      	beq.n	800a19c <d_print_mod_list+0x18c>
 800a174:	29ff      	cmp	r1, #255	; 0xff
 800a176:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a17a:	d1f1      	bne.n	800a160 <d_print_mod_list+0x150>
 800a17c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a180:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a184:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a188:	4628      	mov	r0, r5
 800a18a:	4798      	blx	r3
 800a18c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a190:	2101      	movs	r1, #1
 800a192:	440b      	add	r3, r1
 800a194:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a198:	2300      	movs	r3, #0
 800a19a:	e7e3      	b.n	800a164 <d_print_mod_list+0x154>
 800a19c:	68a2      	ldr	r2, [r4, #8]
 800a19e:	a801      	add	r0, sp, #4
 800a1a0:	3201      	adds	r2, #1
 800a1a2:	4934      	ldr	r1, [pc, #208]	; (800a274 <d_print_mod_list+0x264>)
 800a1a4:	f009 fc54 	bl	8013a50 <siprintf>
 800a1a8:	a801      	add	r0, sp, #4
 800a1aa:	f7fc fca7 	bl	8006afc <strlen>
 800a1ae:	b328      	cbz	r0, 800a1fc <d_print_mod_list+0x1ec>
 800a1b0:	ae01      	add	r6, sp, #4
 800a1b2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a1b6:	eb06 0a00 	add.w	sl, r6, r0
 800a1ba:	f04f 0b00 	mov.w	fp, #0
 800a1be:	e009      	b.n	800a1d4 <d_print_mod_list+0x1c4>
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	3101      	adds	r1, #1
 800a1c4:	45b2      	cmp	sl, r6
 800a1c6:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a1ca:	f805 8003 	strb.w	r8, [r5, r3]
 800a1ce:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a1d2:	d015      	beq.n	800a200 <d_print_mod_list+0x1f0>
 800a1d4:	29ff      	cmp	r1, #255	; 0xff
 800a1d6:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a1da:	d1f1      	bne.n	800a1c0 <d_print_mod_list+0x1b0>
 800a1dc:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a1e0:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a1e4:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	4798      	blx	r3
 800a1ec:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a1f0:	2101      	movs	r1, #1
 800a1f2:	440b      	add	r3, r1
 800a1f4:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	e7e3      	b.n	800a1c4 <d_print_mod_list+0x1b4>
 800a1fc:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 800a200:	4e1d      	ldr	r6, [pc, #116]	; (800a278 <d_print_mod_list+0x268>)
 800a202:	f04f 0b00 	mov.w	fp, #0
 800a206:	f106 0a03 	add.w	sl, r6, #3
 800a20a:	e00a      	b.n	800a222 <d_print_mod_list+0x212>
 800a20c:	460b      	mov	r3, r1
 800a20e:	3101      	adds	r1, #1
 800a210:	4556      	cmp	r6, sl
 800a212:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 800a216:	f805 8003 	strb.w	r8, [r5, r3]
 800a21a:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 800a21e:	f43f af63 	beq.w	800a0e8 <d_print_mod_list+0xd8>
 800a222:	29ff      	cmp	r1, #255	; 0xff
 800a224:	f816 8b01 	ldrb.w	r8, [r6], #1
 800a228:	d1f0      	bne.n	800a20c <d_print_mod_list+0x1fc>
 800a22a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a22e:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 800a232:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a236:	4628      	mov	r0, r5
 800a238:	4798      	blx	r3
 800a23a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a23e:	2101      	movs	r1, #1
 800a240:	440b      	add	r3, r1
 800a242:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a246:	2300      	movs	r3, #0
 800a248:	e7e2      	b.n	800a210 <d_print_mod_list+0x200>
 800a24a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 800a24e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 800a252:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 800a256:	4628      	mov	r0, r5
 800a258:	4798      	blx	r3
 800a25a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800a25e:	2201      	movs	r2, #1
 800a260:	4413      	add	r3, r2
 800a262:	4631      	mov	r1, r6
 800a264:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
 800a268:	e732      	b.n	800a0d0 <d_print_mod_list+0xc0>
 800a26a:	bf00      	nop
 800a26c:	08015808 	.word	0x08015808
 800a270:	0801580c 	.word	0x0801580c
 800a274:	0801581c 	.word	0x0801581c
 800a278:	08015820 	.word	0x08015820

0800a27c <d_print_array_type.isra.10>:
 800a27c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	4604      	mov	r4, r0
 800a282:	460f      	mov	r7, r1
 800a284:	4690      	mov	r8, r2
 800a286:	b163      	cbz	r3, 800a2a2 <d_print_array_type.isra.10+0x26>
 800a288:	461e      	mov	r6, r3
 800a28a:	461a      	mov	r2, r3
 800a28c:	6893      	ldr	r3, [r2, #8]
 800a28e:	b393      	cbz	r3, 800a2f6 <d_print_array_type.isra.10+0x7a>
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	2a00      	cmp	r2, #0
 800a294:	d1fa      	bne.n	800a28c <d_print_array_type.isra.10+0x10>
 800a296:	4613      	mov	r3, r2
 800a298:	4639      	mov	r1, r7
 800a29a:	4632      	mov	r2, r6
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7ff feb7 	bl	800a010 <d_print_mod_list>
 800a2a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a2a6:	29ff      	cmp	r1, #255	; 0xff
 800a2a8:	f000 808e 	beq.w	800a3c8 <d_print_array_type.isra.10+0x14c>
 800a2ac:	1c4b      	adds	r3, r1, #1
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	2bff      	cmp	r3, #255	; 0xff
 800a2b2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800a2b6:	5462      	strb	r2, [r4, r1]
 800a2b8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a2bc:	d069      	beq.n	800a392 <d_print_array_type.isra.10+0x116>
 800a2be:	225b      	movs	r2, #91	; 0x5b
 800a2c0:	1c59      	adds	r1, r3, #1
 800a2c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a2c6:	54e2      	strb	r2, [r4, r3]
 800a2c8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a2cc:	f8d8 2000 	ldr.w	r2, [r8]
 800a2d0:	b12a      	cbz	r2, 800a2de <d_print_array_type.isra.10+0x62>
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f7ff fc03 	bl	8009ae0 <d_print_comp>
 800a2da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a2de:	29ff      	cmp	r1, #255	; 0xff
 800a2e0:	f000 8083 	beq.w	800a3ea <d_print_array_type.isra.10+0x16e>
 800a2e4:	1c4a      	adds	r2, r1, #1
 800a2e6:	235d      	movs	r3, #93	; 0x5d
 800a2e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a2ec:	5463      	strb	r3, [r4, r1]
 800a2ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a2f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f6:	6852      	ldr	r2, [r2, #4]
 800a2f8:	7812      	ldrb	r2, [r2, #0]
 800a2fa:	2a2a      	cmp	r2, #42	; 0x2a
 800a2fc:	d040      	beq.n	800a380 <d_print_array_type.isra.10+0x104>
 800a2fe:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a430 <d_print_array_type.isra.10+0x1b4>
 800a302:	461d      	mov	r5, r3
 800a304:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a308:	f109 0b02 	add.w	fp, r9, #2
 800a30c:	e00a      	b.n	800a324 <d_print_array_type.isra.10+0xa8>
 800a30e:	460b      	mov	r3, r1
 800a310:	45cb      	cmp	fp, r9
 800a312:	f101 0101 	add.w	r1, r1, #1
 800a316:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a31a:	f804 a003 	strb.w	sl, [r4, r3]
 800a31e:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800a322:	d01b      	beq.n	800a35c <d_print_array_type.isra.10+0xe0>
 800a324:	29ff      	cmp	r1, #255	; 0xff
 800a326:	f819 ab01 	ldrb.w	sl, [r9], #1
 800a32a:	d1f0      	bne.n	800a30e <d_print_array_type.isra.10+0x92>
 800a32c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a330:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a334:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a338:	4620      	mov	r0, r4
 800a33a:	4798      	blx	r3
 800a33c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a340:	2101      	movs	r1, #1
 800a342:	440b      	add	r3, r1
 800a344:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a348:	45cb      	cmp	fp, r9
 800a34a:	f04f 0300 	mov.w	r3, #0
 800a34e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a352:	f804 a003 	strb.w	sl, [r4, r3]
 800a356:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 800a35a:	d1e3      	bne.n	800a324 <d_print_array_type.isra.10+0xa8>
 800a35c:	2300      	movs	r3, #0
 800a35e:	4632      	mov	r2, r6
 800a360:	4639      	mov	r1, r7
 800a362:	4620      	mov	r0, r4
 800a364:	f7ff fe54 	bl	800a010 <d_print_mod_list>
 800a368:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a36c:	2bff      	cmp	r3, #255	; 0xff
 800a36e:	d04d      	beq.n	800a40c <d_print_array_type.isra.10+0x190>
 800a370:	1c59      	adds	r1, r3, #1
 800a372:	2229      	movs	r2, #41	; 0x29
 800a374:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a378:	54e2      	strb	r2, [r4, r3]
 800a37a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a37e:	e792      	b.n	800a2a6 <d_print_array_type.isra.10+0x2a>
 800a380:	4632      	mov	r2, r6
 800a382:	4639      	mov	r1, r7
 800a384:	4620      	mov	r0, r4
 800a386:	f7ff fe43 	bl	800a010 <d_print_mod_list>
 800a38a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a38e:	2bff      	cmp	r3, #255	; 0xff
 800a390:	d195      	bne.n	800a2be <d_print_array_type.isra.10+0x42>
 800a392:	2200      	movs	r2, #0
 800a394:	4619      	mov	r1, r3
 800a396:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 800a39a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a39e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4798      	blx	r3
 800a3a6:	235b      	movs	r3, #91	; 0x5b
 800a3a8:	7023      	strb	r3, [r4, #0]
 800a3aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a3ae:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a3b2:	f8d8 2000 	ldr.w	r2, [r8]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a3be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	d185      	bne.n	800a2d2 <d_print_array_type.isra.10+0x56>
 800a3c6:	e78d      	b.n	800a2e4 <d_print_array_type.isra.10+0x68>
 800a3c8:	2500      	movs	r5, #0
 800a3ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a3ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a3d2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4798      	blx	r3
 800a3da:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a3de:	2301      	movs	r3, #1
 800a3e0:	441a      	add	r2, r3
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a3e8:	e761      	b.n	800a2ae <d_print_array_type.isra.10+0x32>
 800a3ea:	2500      	movs	r5, #0
 800a3ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a3f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a3f4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4798      	blx	r3
 800a3fc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a400:	2201      	movs	r2, #1
 800a402:	4413      	add	r3, r2
 800a404:	4629      	mov	r1, r5
 800a406:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a40a:	e76c      	b.n	800a2e6 <d_print_array_type.isra.10+0x6a>
 800a40c:	2500      	movs	r5, #0
 800a40e:	4619      	mov	r1, r3
 800a410:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a414:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a418:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a41c:	4620      	mov	r0, r4
 800a41e:	4798      	blx	r3
 800a420:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a424:	2101      	movs	r1, #1
 800a426:	440a      	add	r2, r1
 800a428:	462b      	mov	r3, r5
 800a42a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a42e:	e7a0      	b.n	800a372 <d_print_array_type.isra.10+0xf6>
 800a430:	08015a04 	.word	0x08015a04

0800a434 <d_print_function_type.isra.11>:
 800a434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a438:	4604      	mov	r4, r0
 800a43a:	b083      	sub	sp, #12
 800a43c:	460e      	mov	r6, r1
 800a43e:	4617      	mov	r7, r2
 800a440:	461d      	mov	r5, r3
 800a442:	b353      	cbz	r3, 800a49a <d_print_function_type.isra.11+0x66>
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	bb43      	cbnz	r3, 800a49a <d_print_function_type.isra.11+0x66>
 800a448:	462a      	mov	r2, r5
 800a44a:	f04f 0e01 	mov.w	lr, #1
 800a44e:	e006      	b.n	800a45e <d_print_function_type.isra.11+0x2a>
 800a450:	f410 6f60 	tst.w	r0, #3584	; 0xe00
 800a454:	d15d      	bne.n	800a512 <d_print_function_type.isra.11+0xde>
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	b1fa      	cbz	r2, 800a49a <d_print_function_type.isra.11+0x66>
 800a45a:	6893      	ldr	r3, [r2, #8]
 800a45c:	b9eb      	cbnz	r3, 800a49a <d_print_function_type.isra.11+0x66>
 800a45e:	6853      	ldr	r3, [r2, #4]
 800a460:	496e      	ldr	r1, [pc, #440]	; (800a61c <d_print_function_type.isra.11+0x1e8>)
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	3b19      	subs	r3, #25
 800a466:	b2db      	uxtb	r3, r3
 800a468:	fa0e f003 	lsl.w	r0, lr, r3
 800a46c:	2b12      	cmp	r3, #18
 800a46e:	ea01 0100 	and.w	r1, r1, r0
 800a472:	d8f0      	bhi.n	800a456 <d_print_function_type.isra.11+0x22>
 800a474:	2900      	cmp	r1, #0
 800a476:	d0eb      	beq.n	800a450 <d_print_function_type.isra.11+0x1c>
 800a478:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a47c:	2b20      	cmp	r3, #32
 800a47e:	d04e      	beq.n	800a51e <d_print_function_type.isra.11+0xea>
 800a480:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a484:	2bff      	cmp	r3, #255	; 0xff
 800a486:	f000 80b5 	beq.w	800a5f4 <d_print_function_type.isra.11+0x1c0>
 800a48a:	1c59      	adds	r1, r3, #1
 800a48c:	2220      	movs	r2, #32
 800a48e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a492:	54e2      	strb	r2, [r4, r3]
 800a494:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a498:	e043      	b.n	800a522 <d_print_function_type.isra.11+0xee>
 800a49a:	2200      	movs	r2, #0
 800a49c:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	f7ff fdb0 	bl	800a010 <d_print_mod_list>
 800a4b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a4b4:	29ff      	cmp	r1, #255	; 0xff
 800a4b6:	d056      	beq.n	800a566 <d_print_function_type.isra.11+0x132>
 800a4b8:	1c4b      	adds	r3, r1, #1
 800a4ba:	2228      	movs	r2, #40	; 0x28
 800a4bc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800a4c0:	5462      	strb	r2, [r4, r1]
 800a4c2:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a4c6:	6838      	ldr	r0, [r7, #0]
 800a4c8:	b178      	cbz	r0, 800a4ea <d_print_function_type.isra.11+0xb6>
 800a4ca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	9000      	str	r0, [sp, #0]
 800a4d2:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4620      	mov	r0, r4
 800a4da:	9301      	str	r3, [sp, #4]
 800a4dc:	f7fc fee8 	bl	80072b0 <d_print_comp_inner>
 800a4e0:	9a01      	ldr	r2, [sp, #4]
 800a4e2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a4e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a4ea:	2bff      	cmp	r3, #255	; 0xff
 800a4ec:	d04d      	beq.n	800a58a <d_print_function_type.isra.11+0x156>
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	2029      	movs	r0, #41	; 0x29
 800a4f2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	54e0      	strb	r0, [r4, r3]
 800a4fa:	462a      	mov	r2, r5
 800a4fc:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 800a500:	2301      	movs	r3, #1
 800a502:	4620      	mov	r0, r4
 800a504:	f7ff fd84 	bl	800a010 <d_print_mod_list>
 800a508:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 800a50c:	b003      	add	sp, #12
 800a50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a512:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a516:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800a51a:	2a28      	cmp	r2, #40	; 0x28
 800a51c:	d1ae      	bne.n	800a47c <d_print_function_type.isra.11+0x48>
 800a51e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a522:	29ff      	cmp	r1, #255	; 0xff
 800a524:	d054      	beq.n	800a5d0 <d_print_function_type.isra.11+0x19c>
 800a526:	1c4a      	adds	r2, r1, #1
 800a528:	2328      	movs	r3, #40	; 0x28
 800a52a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a52e:	f04f 0900 	mov.w	r9, #0
 800a532:	5463      	strb	r3, [r4, r1]
 800a534:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 800a538:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a53c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800a540:	464b      	mov	r3, r9
 800a542:	462a      	mov	r2, r5
 800a544:	4631      	mov	r1, r6
 800a546:	4620      	mov	r0, r4
 800a548:	f7ff fd62 	bl	800a010 <d_print_mod_list>
 800a54c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a550:	2bff      	cmp	r3, #255	; 0xff
 800a552:	d02c      	beq.n	800a5ae <d_print_function_type.isra.11+0x17a>
 800a554:	1c59      	adds	r1, r3, #1
 800a556:	2229      	movs	r2, #41	; 0x29
 800a558:	29ff      	cmp	r1, #255	; 0xff
 800a55a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a55e:	54e2      	strb	r2, [r4, r3]
 800a560:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a564:	d1a8      	bne.n	800a4b8 <d_print_function_type.isra.11+0x84>
 800a566:	f04f 0900 	mov.w	r9, #0
 800a56a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a56e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a572:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800a576:	4620      	mov	r0, r4
 800a578:	4798      	blx	r3
 800a57a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a57e:	2301      	movs	r3, #1
 800a580:	441a      	add	r2, r3
 800a582:	4649      	mov	r1, r9
 800a584:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a588:	e797      	b.n	800a4ba <d_print_function_type.isra.11+0x86>
 800a58a:	2700      	movs	r7, #0
 800a58c:	4619      	mov	r1, r3
 800a58e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a592:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a596:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800a59a:	4620      	mov	r0, r4
 800a59c:	4798      	blx	r3
 800a59e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	4411      	add	r1, r2
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
 800a5ac:	e7a0      	b.n	800a4f0 <d_print_function_type.isra.11+0xbc>
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a5b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a5b8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800a5bc:	4620      	mov	r0, r4
 800a5be:	4798      	blx	r3
 800a5c0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	440a      	add	r2, r1
 800a5c8:	464b      	mov	r3, r9
 800a5ca:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a5ce:	e7c2      	b.n	800a556 <d_print_function_type.isra.11+0x122>
 800a5d0:	f04f 0800 	mov.w	r8, #0
 800a5d4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a5d8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a5dc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	4798      	blx	r3
 800a5e4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	4413      	add	r3, r2
 800a5ec:	4641      	mov	r1, r8
 800a5ee:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a5f2:	e799      	b.n	800a528 <d_print_function_type.isra.11+0xf4>
 800a5f4:	f04f 0800 	mov.w	r8, #0
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a5fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a602:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a606:	4620      	mov	r0, r4
 800a608:	4798      	blx	r3
 800a60a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a60e:	2101      	movs	r1, #1
 800a610:	440a      	add	r2, r1
 800a612:	4643      	mov	r3, r8
 800a614:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a618:	e738      	b.n	800a48c <d_print_function_type.isra.11+0x58>
 800a61a:	bf00      	nop
 800a61c:	00043107 	.word	0x00043107

0800a620 <d_print_cast.isra.12>:
 800a620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a624:	4604      	mov	r4, r0
 800a626:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800a62a:	b084      	sub	sp, #16
 800a62c:	460e      	mov	r6, r1
 800a62e:	4615      	mov	r5, r2
 800a630:	b138      	cbz	r0, 800a642 <d_print_cast.isra.12+0x22>
 800a632:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 800a636:	ab04      	add	r3, sp, #16
 800a638:	f843 2d10 	str.w	r2, [r3, #-16]!
 800a63c:	9001      	str	r0, [sp, #4]
 800a63e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a642:	682b      	ldr	r3, [r5, #0]
 800a644:	781a      	ldrb	r2, [r3, #0]
 800a646:	2a04      	cmp	r2, #4
 800a648:	d017      	beq.n	800a67a <d_print_cast.isra.12+0x5a>
 800a64a:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 800a64e:	a802      	add	r0, sp, #8
 800a650:	461a      	mov	r2, r3
 800a652:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 800a656:	4631      	mov	r1, r6
 800a658:	4620      	mov	r0, r4
 800a65a:	9302      	str	r3, [sp, #8]
 800a65c:	9503      	str	r5, [sp, #12]
 800a65e:	f7fc fe27 	bl	80072b0 <d_print_comp_inner>
 800a662:	9a03      	ldr	r2, [sp, #12]
 800a664:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800a668:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a66c:	b113      	cbz	r3, 800a674 <d_print_cast.isra.12+0x54>
 800a66e:	9b00      	ldr	r3, [sp, #0]
 800a670:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a674:	b004      	add	sp, #16
 800a676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a67a:	6858      	ldr	r0, [r3, #4]
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a682:	4602      	mov	r2, r0
 800a684:	9002      	str	r0, [sp, #8]
 800a686:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 800a68a:	4631      	mov	r1, r6
 800a68c:	4620      	mov	r0, r4
 800a68e:	9303      	str	r3, [sp, #12]
 800a690:	f7fc fe0e 	bl	80072b0 <d_print_comp_inner>
 800a694:	9a03      	ldr	r2, [sp, #12]
 800a696:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
 800a69a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a69e:	b113      	cbz	r3, 800a6a6 <d_print_cast.isra.12+0x86>
 800a6a0:	9b00      	ldr	r3, [sp, #0]
 800a6a2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800a6a6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a6aa:	2b3c      	cmp	r3, #60	; 0x3c
 800a6ac:	d02c      	beq.n	800a708 <d_print_cast.isra.12+0xe8>
 800a6ae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a6b2:	29ff      	cmp	r1, #255	; 0xff
 800a6b4:	d051      	beq.n	800a75a <d_print_cast.isra.12+0x13a>
 800a6b6:	1c4a      	adds	r2, r1, #1
 800a6b8:	233c      	movs	r3, #60	; 0x3c
 800a6ba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a6be:	5463      	strb	r3, [r4, r1]
 800a6c0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	9302      	str	r3, [sp, #8]
 800a6d8:	9503      	str	r5, [sp, #12]
 800a6da:	f7fc fde9 	bl	80072b0 <d_print_comp_inner>
 800a6de:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800a6e2:	9a03      	ldr	r2, [sp, #12]
 800a6e4:	2b3e      	cmp	r3, #62	; 0x3e
 800a6e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800a6ea:	d019      	beq.n	800a720 <d_print_cast.isra.12+0x100>
 800a6ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a6f0:	29ff      	cmp	r1, #255	; 0xff
 800a6f2:	d021      	beq.n	800a738 <d_print_cast.isra.12+0x118>
 800a6f4:	1c4a      	adds	r2, r1, #1
 800a6f6:	233e      	movs	r3, #62	; 0x3e
 800a6f8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a6fc:	5463      	strb	r3, [r4, r1]
 800a6fe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a702:	b004      	add	sp, #16
 800a704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a708:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a70c:	2bff      	cmp	r3, #255	; 0xff
 800a70e:	d048      	beq.n	800a7a2 <d_print_cast.isra.12+0x182>
 800a710:	1c59      	adds	r1, r3, #1
 800a712:	2220      	movs	r2, #32
 800a714:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a718:	54e2      	strb	r2, [r4, r3]
 800a71a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a71e:	e7c8      	b.n	800a6b2 <d_print_cast.isra.12+0x92>
 800a720:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800a724:	2bff      	cmp	r3, #255	; 0xff
 800a726:	d02a      	beq.n	800a77e <d_print_cast.isra.12+0x15e>
 800a728:	1c59      	adds	r1, r3, #1
 800a72a:	2220      	movs	r2, #32
 800a72c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a730:	54e2      	strb	r2, [r4, r3]
 800a732:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800a736:	e7db      	b.n	800a6f0 <d_print_cast.isra.12+0xd0>
 800a738:	2500      	movs	r5, #0
 800a73a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a73e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a742:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a746:	4620      	mov	r0, r4
 800a748:	4798      	blx	r3
 800a74a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a74e:	2201      	movs	r2, #1
 800a750:	4413      	add	r3, r2
 800a752:	4629      	mov	r1, r5
 800a754:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a758:	e7cd      	b.n	800a6f6 <d_print_cast.isra.12+0xd6>
 800a75a:	f04f 0800 	mov.w	r8, #0
 800a75e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a762:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a766:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a76a:	4620      	mov	r0, r4
 800a76c:	4798      	blx	r3
 800a76e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a772:	2201      	movs	r2, #1
 800a774:	4413      	add	r3, r2
 800a776:	4641      	mov	r1, r8
 800a778:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a77c:	e79c      	b.n	800a6b8 <d_print_cast.isra.12+0x98>
 800a77e:	2500      	movs	r5, #0
 800a780:	4619      	mov	r1, r3
 800a782:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a786:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a78a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a78e:	4620      	mov	r0, r4
 800a790:	4798      	blx	r3
 800a792:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a796:	2101      	movs	r1, #1
 800a798:	440a      	add	r2, r1
 800a79a:	462b      	mov	r3, r5
 800a79c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a7a0:	e7c3      	b.n	800a72a <d_print_cast.isra.12+0x10a>
 800a7a2:	f04f 0800 	mov.w	r8, #0
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a7ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a7b0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	4798      	blx	r3
 800a7b8:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a7bc:	2101      	movs	r1, #1
 800a7be:	440a      	add	r2, r1
 800a7c0:	4643      	mov	r3, r8
 800a7c2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
 800a7c6:	e7a4      	b.n	800a712 <d_print_cast.isra.12+0xf2>

0800a7c8 <d_print_expr_op>:
 800a7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7cc:	7815      	ldrb	r5, [r2, #0]
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	2d31      	cmp	r5, #49	; 0x31
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	d00d      	beq.n	800a7f4 <d_print_expr_op+0x2c>
 800a7d8:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
 800a7dc:	f8c0 d124 	str.w	sp, [r0, #292]	; 0x124
 800a7e0:	e88d 0028 	stmia.w	sp, {r3, r5}
 800a7e4:	f7fc fd64 	bl	80072b0 <d_print_comp_inner>
 800a7e8:	9b01      	ldr	r3, [sp, #4]
 800a7ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a7ee:	b002      	add	sp, #8
 800a7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f4:	6853      	ldr	r3, [r2, #4]
 800a7f6:	689f      	ldr	r7, [r3, #8]
 800a7f8:	685d      	ldr	r5, [r3, #4]
 800a7fa:	2f00      	cmp	r7, #0
 800a7fc:	d0f7      	beq.n	800a7ee <d_print_expr_op+0x26>
 800a7fe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800a802:	442f      	add	r7, r5
 800a804:	f04f 0800 	mov.w	r8, #0
 800a808:	e008      	b.n	800a81c <d_print_expr_op+0x54>
 800a80a:	460b      	mov	r3, r1
 800a80c:	3101      	adds	r1, #1
 800a80e:	42bd      	cmp	r5, r7
 800a810:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800a814:	54e6      	strb	r6, [r4, r3]
 800a816:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800a81a:	d0e8      	beq.n	800a7ee <d_print_expr_op+0x26>
 800a81c:	29ff      	cmp	r1, #255	; 0xff
 800a81e:	f815 6b01 	ldrb.w	r6, [r5], #1
 800a822:	d1f2      	bne.n	800a80a <d_print_expr_op+0x42>
 800a824:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a828:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800a82c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a830:	4620      	mov	r0, r4
 800a832:	4798      	blx	r3
 800a834:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a838:	2101      	movs	r1, #1
 800a83a:	440b      	add	r3, r1
 800a83c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a840:	2300      	movs	r3, #0
 800a842:	e7e4      	b.n	800a80e <d_print_expr_op+0x46>

0800a844 <d_print_subexpr>:
 800a844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a846:	7813      	ldrb	r3, [r2, #0]
 800a848:	b083      	sub	sp, #12
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	4615      	mov	r5, r2
 800a84e:	460e      	mov	r6, r1
 800a850:	4604      	mov	r4, r0
 800a852:	d929      	bls.n	800a8a8 <d_print_subexpr+0x64>
 800a854:	2b30      	cmp	r3, #48	; 0x30
 800a856:	d027      	beq.n	800a8a8 <d_print_subexpr+0x64>
 800a858:	2b06      	cmp	r3, #6
 800a85a:	d025      	beq.n	800a8a8 <d_print_subexpr+0x64>
 800a85c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800a860:	29ff      	cmp	r1, #255	; 0xff
 800a862:	d031      	beq.n	800a8c8 <d_print_subexpr+0x84>
 800a864:	1c4a      	adds	r2, r1, #1
 800a866:	2328      	movs	r3, #40	; 0x28
 800a868:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a86c:	5463      	strb	r3, [r4, r1]
 800a86e:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
 800a872:	4631      	mov	r1, r6
 800a874:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a878:	462a      	mov	r2, r5
 800a87a:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a87e:	4620      	mov	r0, r4
 800a880:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800a884:	f7fc fd14 	bl	80072b0 <d_print_comp_inner>
 800a888:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	29ff      	cmp	r1, #255	; 0xff
 800a890:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a894:	d028      	beq.n	800a8e8 <d_print_subexpr+0xa4>
 800a896:	1c4a      	adds	r2, r1, #1
 800a898:	2329      	movs	r3, #41	; 0x29
 800a89a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800a89e:	5463      	strb	r3, [r4, r1]
 800a8a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800a8a4:	b003      	add	sp, #12
 800a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800a8ac:	4631      	mov	r1, r6
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	f8c4 d124 	str.w	sp, [r4, #292]	; 0x124
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	9500      	str	r5, [sp, #0]
 800a8ba:	f7fc fcf9 	bl	80072b0 <d_print_comp_inner>
 800a8be:	9b01      	ldr	r3, [sp, #4]
 800a8c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800a8c4:	b003      	add	sp, #12
 800a8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c8:	2700      	movs	r7, #0
 800a8ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a8ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a8d2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800a8d6:	4798      	blx	r3
 800a8d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a8dc:	2201      	movs	r2, #1
 800a8de:	4413      	add	r3, r2
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a8e6:	e7be      	b.n	800a866 <d_print_subexpr+0x22>
 800a8e8:	2500      	movs	r5, #0
 800a8ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800a8ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800a8f2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4798      	blx	r3
 800a8fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a8fe:	2201      	movs	r2, #1
 800a900:	4413      	add	r3, r2
 800a902:	4629      	mov	r1, r5
 800a904:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 800a908:	e7c6      	b.n	800a898 <d_print_subexpr+0x54>
 800a90a:	bf00      	nop

0800a90c <d_template_args>:
 800a90c:	68c1      	ldr	r1, [r0, #12]
 800a90e:	780b      	ldrb	r3, [r1, #0]
 800a910:	3b49      	subs	r3, #73	; 0x49
 800a912:	2b01      	cmp	r3, #1
 800a914:	f200 80ac 	bhi.w	800aa70 <d_template_args+0x164>
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	1c4a      	adds	r2, r1, #1
 800a91e:	60c2      	str	r2, [r0, #12]
 800a920:	784b      	ldrb	r3, [r1, #1]
 800a922:	b085      	sub	sp, #20
 800a924:	2b45      	cmp	r3, #69	; 0x45
 800a926:	4604      	mov	r4, r0
 800a928:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 800a92c:	f000 8166 	beq.w	800abfc <d_template_args+0x2f0>
 800a930:	ae04      	add	r6, sp, #16
 800a932:	2100      	movs	r1, #0
 800a934:	f846 1d04 	str.w	r1, [r6, #-4]!
 800a938:	3b49      	subs	r3, #73	; 0x49
 800a93a:	2b0f      	cmp	r3, #15
 800a93c:	d854      	bhi.n	800a9e8 <d_template_args+0xdc>
 800a93e:	e8df f003 	tbb	[pc, r3]
 800a942:	4e4e      	.short	0x4e4e
 800a944:	53533253 	.word	0x53533253
 800a948:	53535353 	.word	0x53535353
 800a94c:	53535353 	.word	0x53535353
 800a950:	0853      	.short	0x0853
 800a952:	1c53      	adds	r3, r2, #1
 800a954:	2501      	movs	r5, #1
 800a956:	60e3      	str	r3, [r4, #12]
 800a958:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800a95a:	6365      	str	r5, [r4, #52]	; 0x34
 800a95c:	7853      	ldrb	r3, [r2, #1]
 800a95e:	2b4c      	cmp	r3, #76	; 0x4c
 800a960:	f000 8088 	beq.w	800aa74 <d_template_args+0x168>
 800a964:	2b54      	cmp	r3, #84	; 0x54
 800a966:	f000 808b 	beq.w	800aa80 <d_template_args+0x174>
 800a96a:	2b73      	cmp	r3, #115	; 0x73
 800a96c:	d044      	beq.n	800a9f8 <d_template_args+0xec>
 800a96e:	2b66      	cmp	r3, #102	; 0x66
 800a970:	d060      	beq.n	800aa34 <d_template_args+0x128>
 800a972:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a976:	2909      	cmp	r1, #9
 800a978:	f200 81b1 	bhi.w	800acde <d_template_args+0x3d2>
 800a97c:	4620      	mov	r0, r4
 800a97e:	f003 f927 	bl	800dbd0 <d_unqualified_name>
 800a982:	4605      	mov	r5, r0
 800a984:	2800      	cmp	r0, #0
 800a986:	f000 821f 	beq.w	800adc8 <d_template_args+0x4bc>
 800a98a:	68e3      	ldr	r3, [r4, #12]
 800a98c:	781a      	ldrb	r2, [r3, #0]
 800a98e:	2a49      	cmp	r2, #73	; 0x49
 800a990:	f000 8128 	beq.w	800abe4 <d_template_args+0x2d8>
 800a994:	4602      	mov	r2, r0
 800a996:	6367      	str	r7, [r4, #52]	; 0x34
 800a998:	7819      	ldrb	r1, [r3, #0]
 800a99a:	2945      	cmp	r1, #69	; 0x45
 800a99c:	d029      	beq.n	800a9f2 <d_template_args+0xe6>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	b005      	add	sp, #20
 800a9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f003 ff8e 	bl	800e8c8 <d_expr_primary>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	d0f5      	beq.n	800a99e <d_template_args+0x92>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	212f      	movs	r1, #47	; 0x2f
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7fc f8a8 	bl	8006b0c <d_make_comp>
 800a9bc:	6030      	str	r0, [r6, #0]
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0ed      	beq.n	800a99e <d_template_args+0x92>
 800a9c2:	68e2      	ldr	r2, [r4, #12]
 800a9c4:	f100 0608 	add.w	r6, r0, #8
 800a9c8:	7813      	ldrb	r3, [r2, #0]
 800a9ca:	2b45      	cmp	r3, #69	; 0x45
 800a9cc:	d1b4      	bne.n	800a938 <d_template_args+0x2c>
 800a9ce:	9803      	ldr	r0, [sp, #12]
 800a9d0:	3201      	adds	r2, #1
 800a9d2:	60e2      	str	r2, [r4, #12]
 800a9d4:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800a9d8:	b005      	add	sp, #20
 800a9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7ff ff94 	bl	800a90c <d_template_args>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	e7e2      	b.n	800a9ae <d_template_args+0xa2>
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f002 fc75 	bl	800d2d8 <d_type>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	e7dd      	b.n	800a9ae <d_template_args+0xa2>
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	60e3      	str	r3, [r4, #12]
 800a9f6:	e7da      	b.n	800a9ae <d_template_args+0xa2>
 800a9f8:	7893      	ldrb	r3, [r2, #2]
 800a9fa:	2b72      	cmp	r3, #114	; 0x72
 800a9fc:	f000 8149 	beq.w	800ac92 <d_template_args+0x386>
 800aa00:	2b70      	cmp	r3, #112	; 0x70
 800aa02:	f000 81aa 	beq.w	800ad5a <d_template_args+0x44e>
 800aa06:	4620      	mov	r0, r4
 800aa08:	f003 f822 	bl	800da50 <d_operator_name>
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f000 81da 	beq.w	800adc8 <d_template_args+0x4bc>
 800aa14:	f890 9000 	ldrb.w	r9, [r0]
 800aa18:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800aa1c:	d036      	beq.n	800aa8c <d_template_args+0x180>
 800aa1e:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 800aa22:	f000 80cf 	beq.w	800abc4 <d_template_args+0x2b8>
 800aa26:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 800aa2a:	f000 8172 	beq.w	800ad12 <d_template_args+0x406>
 800aa2e:	68e3      	ldr	r3, [r4, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	e7b0      	b.n	800a996 <d_template_args+0x8a>
 800aa34:	7893      	ldrb	r3, [r2, #2]
 800aa36:	2b70      	cmp	r3, #112	; 0x70
 800aa38:	d1e5      	bne.n	800aa06 <d_template_args+0xfa>
 800aa3a:	1cd3      	adds	r3, r2, #3
 800aa3c:	60e3      	str	r3, [r4, #12]
 800aa3e:	78d3      	ldrb	r3, [r2, #3]
 800aa40:	2b54      	cmp	r3, #84	; 0x54
 800aa42:	f040 813c 	bne.w	800acbe <d_template_args+0x3b2>
 800aa46:	3204      	adds	r2, #4
 800aa48:	60e2      	str	r2, [r4, #12]
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	6963      	ldr	r3, [r4, #20]
 800aa4e:	69a1      	ldr	r1, [r4, #24]
 800aa50:	428b      	cmp	r3, r1
 800aa52:	daec      	bge.n	800aa2e <d_template_args+0x122>
 800aa54:	6921      	ldr	r1, [r4, #16]
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aa5c:	6162      	str	r2, [r4, #20]
 800aa5e:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800aa62:	d06d      	beq.n	800ab40 <d_template_args+0x234>
 800aa64:	2506      	movs	r5, #6
 800aa66:	f801 5023 	strb.w	r5, [r1, r3, lsl #2]
 800aa6a:	6050      	str	r0, [r2, #4]
 800aa6c:	68e3      	ldr	r3, [r4, #12]
 800aa6e:	e792      	b.n	800a996 <d_template_args+0x8a>
 800aa70:	2000      	movs	r0, #0
 800aa72:	4770      	bx	lr
 800aa74:	4620      	mov	r0, r4
 800aa76:	f003 ff27 	bl	800e8c8 <d_expr_primary>
 800aa7a:	68e3      	ldr	r3, [r4, #12]
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	e78a      	b.n	800a996 <d_template_args+0x8a>
 800aa80:	4620      	mov	r0, r4
 800aa82:	f7fc f9e5 	bl	8006e50 <d_template_param>
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	4602      	mov	r2, r0
 800aa8a:	e784      	b.n	800a996 <d_template_args+0x8a>
 800aa8c:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800aa90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800aa92:	f8db 3008 	ldr.w	r3, [fp, #8]
 800aa96:	f8db a000 	ldr.w	sl, [fp]
 800aa9a:	3b02      	subs	r3, #2
 800aa9c:	441a      	add	r2, r3
 800aa9e:	6322      	str	r2, [r4, #48]	; 0x30
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	49cb      	ldr	r1, [pc, #812]	; (800add0 <d_template_args+0x4c4>)
 800aaa4:	f004 f98a 	bl	800edbc <strcmp>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	f000 8188 	beq.w	800adbe <d_template_args+0x4b2>
 800aaae:	f8db 300c 	ldr.w	r3, [fp, #12]
 800aab2:	2b03      	cmp	r3, #3
 800aab4:	d8bb      	bhi.n	800aa2e <d_template_args+0x122>
 800aab6:	e8df f003 	tbb	[pc, r3]
 800aaba:	ab7c      	.short	0xab7c
 800aabc:	0447      	.short	0x0447
 800aabe:	f04f 0a00 	mov.w	sl, #0
 800aac2:	49c4      	ldr	r1, [pc, #784]	; (800add4 <d_template_args+0x4c8>)
 800aac4:	4650      	mov	r0, sl
 800aac6:	f004 f979 	bl	800edbc <strcmp>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	f000 819e 	beq.w	800ae0c <d_template_args+0x500>
 800aad0:	f89a 3000 	ldrb.w	r3, [sl]
 800aad4:	2b6e      	cmp	r3, #110	; 0x6e
 800aad6:	d1aa      	bne.n	800aa2e <d_template_args+0x122>
 800aad8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800aadc:	2b77      	cmp	r3, #119	; 0x77
 800aade:	d001      	beq.n	800aae4 <d_template_args+0x1d8>
 800aae0:	2b61      	cmp	r3, #97	; 0x61
 800aae2:	d1a4      	bne.n	800aa2e <d_template_args+0x122>
 800aae4:	215f      	movs	r1, #95	; 0x5f
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fd86 	bl	800b5f8 <d_exprlist>
 800aaec:	4681      	mov	r9, r0
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f002 fbf2 	bl	800d2d8 <d_type>
 800aaf4:	68e3      	ldr	r3, [r4, #12]
 800aaf6:	4682      	mov	sl, r0
 800aaf8:	7819      	ldrb	r1, [r3, #0]
 800aafa:	2945      	cmp	r1, #69	; 0x45
 800aafc:	f000 825e 	beq.w	800afbc <d_template_args+0x6b0>
 800ab00:	2970      	cmp	r1, #112	; 0x70
 800ab02:	f000 8343 	beq.w	800b18c <d_template_args+0x880>
 800ab06:	2969      	cmp	r1, #105	; 0x69
 800ab08:	f040 824e 	bne.w	800afa8 <d_template_args+0x69c>
 800ab0c:	785a      	ldrb	r2, [r3, #1]
 800ab0e:	2a6c      	cmp	r2, #108	; 0x6c
 800ab10:	f040 824a 	bne.w	800afa8 <d_template_args+0x69c>
 800ab14:	4620      	mov	r0, r4
 800ab16:	f002 fa0d 	bl	800cf34 <d_expression_1>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	4652      	mov	r2, sl
 800ab1e:	213a      	movs	r1, #58	; 0x3a
 800ab20:	4620      	mov	r0, r4
 800ab22:	f7fb fff3 	bl	8006b0c <d_make_comp>
 800ab26:	464a      	mov	r2, r9
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2139      	movs	r1, #57	; 0x39
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f7fb ffed 	bl	8006b0c <d_make_comp>
 800ab32:	462a      	mov	r2, r5
 800ab34:	4603      	mov	r3, r0
 800ab36:	2138      	movs	r1, #56	; 0x38
 800ab38:	4620      	mov	r0, r4
 800ab3a:	f7fb ffe7 	bl	8006b0c <d_make_comp>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	68e3      	ldr	r3, [r4, #12]
 800ab42:	e728      	b.n	800a996 <d_template_args+0x8a>
 800ab44:	f04f 0a00 	mov.w	sl, #0
 800ab48:	686b      	ldr	r3, [r5, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	785a      	ldrb	r2, [r3, #1]
 800ab4e:	2a63      	cmp	r2, #99	; 0x63
 800ab50:	f000 814e 	beq.w	800adf0 <d_template_args+0x4e4>
 800ab54:	4620      	mov	r0, r4
 800ab56:	f002 f9ed 	bl	800cf34 <d_expression_1>
 800ab5a:	4681      	mov	r9, r0
 800ab5c:	499e      	ldr	r1, [pc, #632]	; (800add8 <d_template_args+0x4cc>)
 800ab5e:	4650      	mov	r0, sl
 800ab60:	f004 f92c 	bl	800edbc <strcmp>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	f000 813d 	beq.w	800ade4 <d_template_args+0x4d8>
 800ab6a:	499c      	ldr	r1, [pc, #624]	; (800addc <d_template_args+0x4d0>)
 800ab6c:	4650      	mov	r0, sl
 800ab6e:	f004 f925 	bl	800edbc <strcmp>
 800ab72:	b130      	cbz	r0, 800ab82 <d_template_args+0x276>
 800ab74:	4650      	mov	r0, sl
 800ab76:	499a      	ldr	r1, [pc, #616]	; (800ade0 <d_template_args+0x4d4>)
 800ab78:	f004 f920 	bl	800edbc <strcmp>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f040 8215 	bne.w	800afac <d_template_args+0x6a0>
 800ab82:	4620      	mov	r0, r4
 800ab84:	f003 f824 	bl	800dbd0 <d_unqualified_name>
 800ab88:	68e3      	ldr	r3, [r4, #12]
 800ab8a:	4682      	mov	sl, r0
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b49      	cmp	r3, #73	; 0x49
 800ab90:	f000 82d3 	beq.w	800b13a <d_template_args+0x82e>
 800ab94:	4653      	mov	r3, sl
 800ab96:	464a      	mov	r2, r9
 800ab98:	2137      	movs	r1, #55	; 0x37
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f7fb ffb6 	bl	8006b0c <d_make_comp>
 800aba0:	462a      	mov	r2, r5
 800aba2:	4603      	mov	r3, r0
 800aba4:	2136      	movs	r1, #54	; 0x36
 800aba6:	4620      	mov	r0, r4
 800aba8:	f7fb ffb0 	bl	8006b0c <d_make_comp>
 800abac:	68e3      	ldr	r3, [r4, #12]
 800abae:	4602      	mov	r2, r0
 800abb0:	e6f1      	b.n	800a996 <d_template_args+0x8a>
 800abb2:	462a      	mov	r2, r5
 800abb4:	2300      	movs	r3, #0
 800abb6:	2134      	movs	r1, #52	; 0x34
 800abb8:	4620      	mov	r0, r4
 800abba:	f7fb ffa7 	bl	8006b0c <d_make_comp>
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	4602      	mov	r2, r0
 800abc2:	e6e8      	b.n	800a996 <d_template_args+0x8a>
 800abc4:	686b      	ldr	r3, [r5, #4]
 800abc6:	2b03      	cmp	r3, #3
 800abc8:	f63f af31 	bhi.w	800aa2e <d_template_args+0x122>
 800abcc:	a201      	add	r2, pc, #4	; (adr r2, 800abd4 <d_template_args+0x2c8>)
 800abce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd2:	bf00      	nop
 800abd4:	0800abb3 	.word	0x0800abb3
 800abd8:	0800accf 	.word	0x0800accf
 800abdc:	0800ab45 	.word	0x0800ab45
 800abe0:	0800aabf 	.word	0x0800aabf
 800abe4:	4620      	mov	r0, r4
 800abe6:	f7ff fe91 	bl	800a90c <d_template_args>
 800abea:	462a      	mov	r2, r5
 800abec:	4603      	mov	r3, r0
 800abee:	2104      	movs	r1, #4
 800abf0:	4620      	mov	r0, r4
 800abf2:	f7fb ff8b 	bl	8006b0c <d_make_comp>
 800abf6:	68e3      	ldr	r3, [r4, #12]
 800abf8:	4602      	mov	r2, r0
 800abfa:	e6cc      	b.n	800a996 <d_template_args+0x8a>
 800abfc:	2300      	movs	r3, #0
 800abfe:	461a      	mov	r2, r3
 800ac00:	3102      	adds	r1, #2
 800ac02:	60c1      	str	r1, [r0, #12]
 800ac04:	212f      	movs	r1, #47	; 0x2f
 800ac06:	b005      	add	sp, #20
 800ac08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	f7fb bf7e 	b.w	8006b0c <d_make_comp>
 800ac10:	f1ba 0f00 	cmp.w	sl, #0
 800ac14:	d05b      	beq.n	800acce <d_template_args+0x3c2>
 800ac16:	f89a 3000 	ldrb.w	r3, [sl]
 800ac1a:	2b70      	cmp	r3, #112	; 0x70
 800ac1c:	d001      	beq.n	800ac22 <d_template_args+0x316>
 800ac1e:	2b6d      	cmp	r3, #109	; 0x6d
 800ac20:	d155      	bne.n	800acce <d_template_args+0x3c2>
 800ac22:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d151      	bne.n	800acce <d_template_args+0x3c2>
 800ac2a:	68e2      	ldr	r2, [r4, #12]
 800ac2c:	7813      	ldrb	r3, [r2, #0]
 800ac2e:	2b5f      	cmp	r3, #95	; 0x5f
 800ac30:	f000 8336 	beq.w	800b2a0 <d_template_args+0x994>
 800ac34:	f04f 0a01 	mov.w	sl, #1
 800ac38:	2b4c      	cmp	r3, #76	; 0x4c
 800ac3a:	f000 82c1 	beq.w	800b1c0 <d_template_args+0x8b4>
 800ac3e:	2b54      	cmp	r3, #84	; 0x54
 800ac40:	f000 82b0 	beq.w	800b1a4 <d_template_args+0x898>
 800ac44:	2b73      	cmp	r3, #115	; 0x73
 800ac46:	f000 80ee 	beq.w	800ae26 <d_template_args+0x51a>
 800ac4a:	2b66      	cmp	r3, #102	; 0x66
 800ac4c:	f000 818c 	beq.w	800af68 <d_template_args+0x65c>
 800ac50:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ac54:	2909      	cmp	r1, #9
 800ac56:	f200 8402 	bhi.w	800b45e <d_template_args+0xb52>
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f002 ffb8 	bl	800dbd0 <d_unqualified_name>
 800ac60:	4681      	mov	r9, r0
 800ac62:	b118      	cbz	r0, 800ac6c <d_template_args+0x360>
 800ac64:	68e3      	ldr	r3, [r4, #12]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b49      	cmp	r3, #73	; 0x49
 800ac6a:	d064      	beq.n	800ad36 <d_template_args+0x42a>
 800ac6c:	f1ba 0f00 	cmp.w	sl, #0
 800ac70:	f000 80a3 	beq.w	800adba <d_template_args+0x4ae>
 800ac74:	464b      	mov	r3, r9
 800ac76:	464a      	mov	r2, r9
 800ac78:	2137      	movs	r1, #55	; 0x37
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f7fb ff46 	bl	8006b0c <d_make_comp>
 800ac80:	4603      	mov	r3, r0
 800ac82:	462a      	mov	r2, r5
 800ac84:	2135      	movs	r1, #53	; 0x35
 800ac86:	4620      	mov	r0, r4
 800ac88:	f7fb ff40 	bl	8006b0c <d_make_comp>
 800ac8c:	68e3      	ldr	r3, [r4, #12]
 800ac8e:	4602      	mov	r2, r0
 800ac90:	e681      	b.n	800a996 <d_template_args+0x8a>
 800ac92:	3203      	adds	r2, #3
 800ac94:	60e2      	str	r2, [r4, #12]
 800ac96:	4620      	mov	r0, r4
 800ac98:	f002 fb1e 	bl	800d2d8 <d_type>
 800ac9c:	4681      	mov	r9, r0
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f002 ff96 	bl	800dbd0 <d_unqualified_name>
 800aca4:	68e3      	ldr	r3, [r4, #12]
 800aca6:	4682      	mov	sl, r0
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	2b49      	cmp	r3, #73	; 0x49
 800acac:	d038      	beq.n	800ad20 <d_template_args+0x414>
 800acae:	4603      	mov	r3, r0
 800acb0:	464a      	mov	r2, r9
 800acb2:	4629      	mov	r1, r5
 800acb4:	4620      	mov	r0, r4
 800acb6:	f7fb ff29 	bl	8006b0c <d_make_comp>
 800acba:	4602      	mov	r2, r0
 800acbc:	e740      	b.n	800ab40 <d_template_args+0x234>
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7fc f8ae 	bl	8006e20 <d_compact_number>
 800acc4:	3001      	adds	r0, #1
 800acc6:	f47f aec1 	bne.w	800aa4c <d_template_args+0x140>
 800acca:	4602      	mov	r2, r0
 800accc:	e738      	b.n	800ab40 <d_template_args+0x234>
 800acce:	f1b9 0f33 	cmp.w	r9, #51	; 0x33
 800acd2:	68e2      	ldr	r2, [r4, #12]
 800acd4:	d01e      	beq.n	800ad14 <d_template_args+0x408>
 800acd6:	7813      	ldrb	r3, [r2, #0]
 800acd8:	f04f 0a00 	mov.w	sl, #0
 800acdc:	e7ac      	b.n	800ac38 <d_template_args+0x32c>
 800acde:	2b6f      	cmp	r3, #111	; 0x6f
 800ace0:	d034      	beq.n	800ad4c <d_template_args+0x440>
 800ace2:	2b69      	cmp	r3, #105	; 0x69
 800ace4:	f040 8423 	bne.w	800b52e <d_template_args+0xc22>
 800ace8:	7893      	ldrb	r3, [r2, #2]
 800acea:	2b6c      	cmp	r3, #108	; 0x6c
 800acec:	f47f ae8b 	bne.w	800aa06 <d_template_args+0xfa>
 800acf0:	2500      	movs	r5, #0
 800acf2:	68e3      	ldr	r3, [r4, #12]
 800acf4:	2145      	movs	r1, #69	; 0x45
 800acf6:	3302      	adds	r3, #2
 800acf8:	60e3      	str	r3, [r4, #12]
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 fc7c 	bl	800b5f8 <d_exprlist>
 800ad00:	462a      	mov	r2, r5
 800ad02:	4603      	mov	r3, r0
 800ad04:	2130      	movs	r1, #48	; 0x30
 800ad06:	4620      	mov	r0, r4
 800ad08:	f7fb ff00 	bl	8006b0c <d_make_comp>
 800ad0c:	68e3      	ldr	r3, [r4, #12]
 800ad0e:	4602      	mov	r2, r0
 800ad10:	e641      	b.n	800a996 <d_template_args+0x8a>
 800ad12:	68e2      	ldr	r2, [r4, #12]
 800ad14:	7813      	ldrb	r3, [r2, #0]
 800ad16:	2b5f      	cmp	r3, #95	; 0x5f
 800ad18:	d048      	beq.n	800adac <d_template_args+0x4a0>
 800ad1a:	f04f 0a00 	mov.w	sl, #0
 800ad1e:	e78b      	b.n	800ac38 <d_template_args+0x32c>
 800ad20:	4620      	mov	r0, r4
 800ad22:	f7ff fdf3 	bl	800a90c <d_template_args>
 800ad26:	4652      	mov	r2, sl
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2104      	movs	r1, #4
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f7fb feed 	bl	8006b0c <d_make_comp>
 800ad32:	4603      	mov	r3, r0
 800ad34:	e7bc      	b.n	800acb0 <d_template_args+0x3a4>
 800ad36:	4620      	mov	r0, r4
 800ad38:	f7ff fde8 	bl	800a90c <d_template_args>
 800ad3c:	464a      	mov	r2, r9
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2104      	movs	r1, #4
 800ad42:	4620      	mov	r0, r4
 800ad44:	f7fb fee2 	bl	8006b0c <d_make_comp>
 800ad48:	4681      	mov	r9, r0
 800ad4a:	e78f      	b.n	800ac6c <d_template_args+0x360>
 800ad4c:	7893      	ldrb	r3, [r2, #2]
 800ad4e:	2b6e      	cmp	r3, #110	; 0x6e
 800ad50:	f47f ae59 	bne.w	800aa06 <d_template_args+0xfa>
 800ad54:	3203      	adds	r2, #3
 800ad56:	60e2      	str	r2, [r4, #12]
 800ad58:	e610      	b.n	800a97c <d_template_args+0x70>
 800ad5a:	1cd3      	adds	r3, r2, #3
 800ad5c:	60e3      	str	r3, [r4, #12]
 800ad5e:	78d3      	ldrb	r3, [r2, #3]
 800ad60:	2b4c      	cmp	r3, #76	; 0x4c
 800ad62:	f000 825b 	beq.w	800b21c <d_template_args+0x910>
 800ad66:	2b54      	cmp	r3, #84	; 0x54
 800ad68:	f000 8275 	beq.w	800b256 <d_template_args+0x94a>
 800ad6c:	2b73      	cmp	r3, #115	; 0x73
 800ad6e:	f000 8129 	beq.w	800afc4 <d_template_args+0x6b8>
 800ad72:	2b66      	cmp	r3, #102	; 0x66
 800ad74:	f000 81c2 	beq.w	800b0fc <d_template_args+0x7f0>
 800ad78:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ad7c:	2909      	cmp	r1, #9
 800ad7e:	f200 83e3 	bhi.w	800b548 <d_template_args+0xc3c>
 800ad82:	4620      	mov	r0, r4
 800ad84:	f002 ff24 	bl	800dbd0 <d_unqualified_name>
 800ad88:	4605      	mov	r5, r0
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	f000 8244 	beq.w	800b218 <d_template_args+0x90c>
 800ad90:	68e3      	ldr	r3, [r4, #12]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	2b49      	cmp	r3, #73	; 0x49
 800ad96:	f000 8286 	beq.w	800b2a6 <d_template_args+0x99a>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	2149      	movs	r1, #73	; 0x49
 800ada0:	4620      	mov	r0, r4
 800ada2:	f7fb feb3 	bl	8006b0c <d_make_comp>
 800ada6:	68e3      	ldr	r3, [r4, #12]
 800ada8:	4602      	mov	r2, r0
 800adaa:	e5f4      	b.n	800a996 <d_template_args+0x8a>
 800adac:	3201      	adds	r2, #1
 800adae:	60e2      	str	r2, [r4, #12]
 800adb0:	2145      	movs	r1, #69	; 0x45
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 fc20 	bl	800b5f8 <d_exprlist>
 800adb8:	4681      	mov	r9, r0
 800adba:	464b      	mov	r3, r9
 800adbc:	e761      	b.n	800ac82 <d_template_args+0x376>
 800adbe:	4620      	mov	r0, r4
 800adc0:	f002 fa8a 	bl	800d2d8 <d_type>
 800adc4:	4603      	mov	r3, r0
 800adc6:	e75c      	b.n	800ac82 <d_template_args+0x376>
 800adc8:	462a      	mov	r2, r5
 800adca:	68e3      	ldr	r3, [r4, #12]
 800adcc:	e5e3      	b.n	800a996 <d_template_args+0x8a>
 800adce:	bf00      	nop
 800add0:	08015cc8 	.word	0x08015cc8
 800add4:	080159c0 	.word	0x080159c0
 800add8:	080159b8 	.word	0x080159b8
 800addc:	08015ad4 	.word	0x08015ad4
 800ade0:	08015ad8 	.word	0x08015ad8
 800ade4:	2145      	movs	r1, #69	; 0x45
 800ade6:	4620      	mov	r0, r4
 800ade8:	f000 fc06 	bl	800b5f8 <d_exprlist>
 800adec:	4682      	mov	sl, r0
 800adee:	e6d1      	b.n	800ab94 <d_template_args+0x288>
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800adf6:	2a01      	cmp	r2, #1
 800adf8:	d903      	bls.n	800ae02 <d_template_args+0x4f6>
 800adfa:	3b72      	subs	r3, #114	; 0x72
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	f63f aea9 	bhi.w	800ab54 <d_template_args+0x248>
 800ae02:	4620      	mov	r0, r4
 800ae04:	f002 fa68 	bl	800d2d8 <d_type>
 800ae08:	4681      	mov	r9, r0
 800ae0a:	e6a7      	b.n	800ab5c <d_template_args+0x250>
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f002 f891 	bl	800cf34 <d_expression_1>
 800ae12:	4681      	mov	r9, r0
 800ae14:	4620      	mov	r0, r4
 800ae16:	f002 f88d 	bl	800cf34 <d_expression_1>
 800ae1a:	4682      	mov	sl, r0
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f002 f889 	bl	800cf34 <d_expression_1>
 800ae22:	4603      	mov	r3, r0
 800ae24:	e67a      	b.n	800ab1c <d_template_args+0x210>
 800ae26:	7853      	ldrb	r3, [r2, #1]
 800ae28:	2b72      	cmp	r3, #114	; 0x72
 800ae2a:	f000 8266 	beq.w	800b2fa <d_template_args+0x9ee>
 800ae2e:	2b70      	cmp	r3, #112	; 0x70
 800ae30:	f000 82a3 	beq.w	800b37a <d_template_args+0xa6e>
 800ae34:	4620      	mov	r0, r4
 800ae36:	f002 fe0b 	bl	800da50 <d_operator_name>
 800ae3a:	4681      	mov	r9, r0
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f43f af15 	beq.w	800ac6c <d_template_args+0x360>
 800ae42:	7803      	ldrb	r3, [r0, #0]
 800ae44:	2b31      	cmp	r3, #49	; 0x31
 800ae46:	f000 81c0 	beq.w	800b1ca <d_template_args+0x8be>
 800ae4a:	2b32      	cmp	r3, #50	; 0x32
 800ae4c:	f040 8180 	bne.w	800b150 <d_template_args+0x844>
 800ae50:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	f200 80ae 	bhi.w	800afb6 <d_template_args+0x6aa>
 800ae5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ae5e:	0004      	.short	0x0004
 800ae60:	004e0181 	.word	0x004e0181
 800ae64:	000c      	.short	0x000c
 800ae66:	464a      	mov	r2, r9
 800ae68:	2300      	movs	r3, #0
 800ae6a:	2134      	movs	r1, #52	; 0x34
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f7fb fe4d 	bl	8006b0c <d_make_comp>
 800ae72:	4681      	mov	r9, r0
 800ae74:	e6fa      	b.n	800ac6c <d_template_args+0x360>
 800ae76:	f04f 0b00 	mov.w	fp, #0
 800ae7a:	49cd      	ldr	r1, [pc, #820]	; (800b1b0 <d_template_args+0x8a4>)
 800ae7c:	4658      	mov	r0, fp
 800ae7e:	f003 ff9d 	bl	800edbc <strcmp>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f000 82a3 	beq.w	800b3ce <d_template_args+0xac2>
 800ae88:	f89b 2000 	ldrb.w	r2, [fp]
 800ae8c:	2a6e      	cmp	r2, #110	; 0x6e
 800ae8e:	f040 8092 	bne.w	800afb6 <d_template_args+0x6aa>
 800ae92:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800ae96:	2b77      	cmp	r3, #119	; 0x77
 800ae98:	d002      	beq.n	800aea0 <d_template_args+0x594>
 800ae9a:	2b61      	cmp	r3, #97	; 0x61
 800ae9c:	f040 808b 	bne.w	800afb6 <d_template_args+0x6aa>
 800aea0:	215f      	movs	r1, #95	; 0x5f
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 fba8 	bl	800b5f8 <d_exprlist>
 800aea8:	9001      	str	r0, [sp, #4]
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f002 fa14 	bl	800d2d8 <d_type>
 800aeb0:	68e3      	ldr	r3, [r4, #12]
 800aeb2:	4683      	mov	fp, r0
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	2a45      	cmp	r2, #69	; 0x45
 800aeb8:	f000 8317 	beq.w	800b4ea <d_template_args+0xbde>
 800aebc:	2a70      	cmp	r2, #112	; 0x70
 800aebe:	f000 8309 	beq.w	800b4d4 <d_template_args+0xbc8>
 800aec2:	2a69      	cmp	r2, #105	; 0x69
 800aec4:	d177      	bne.n	800afb6 <d_template_args+0x6aa>
 800aec6:	785b      	ldrb	r3, [r3, #1]
 800aec8:	2b6c      	cmp	r3, #108	; 0x6c
 800aeca:	d174      	bne.n	800afb6 <d_template_args+0x6aa>
 800aecc:	4620      	mov	r0, r4
 800aece:	f002 f831 	bl	800cf34 <d_expression_1>
 800aed2:	4603      	mov	r3, r0
 800aed4:	465a      	mov	r2, fp
 800aed6:	213a      	movs	r1, #58	; 0x3a
 800aed8:	4620      	mov	r0, r4
 800aeda:	f7fb fe17 	bl	8006b0c <d_make_comp>
 800aede:	9a01      	ldr	r2, [sp, #4]
 800aee0:	4603      	mov	r3, r0
 800aee2:	2139      	movs	r1, #57	; 0x39
 800aee4:	4620      	mov	r0, r4
 800aee6:	f7fb fe11 	bl	8006b0c <d_make_comp>
 800aeea:	464a      	mov	r2, r9
 800aeec:	4603      	mov	r3, r0
 800aeee:	2138      	movs	r1, #56	; 0x38
 800aef0:	4620      	mov	r0, r4
 800aef2:	f7fb fe0b 	bl	8006b0c <d_make_comp>
 800aef6:	4681      	mov	r9, r0
 800aef8:	e6b8      	b.n	800ac6c <d_template_args+0x360>
 800aefa:	f04f 0b00 	mov.w	fp, #0
 800aefe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800af02:	6812      	ldr	r2, [r2, #0]
 800af04:	7851      	ldrb	r1, [r2, #1]
 800af06:	2963      	cmp	r1, #99	; 0x63
 800af08:	f000 8296 	beq.w	800b438 <d_template_args+0xb2c>
 800af0c:	4620      	mov	r0, r4
 800af0e:	f002 f811 	bl	800cf34 <d_expression_1>
 800af12:	9001      	str	r0, [sp, #4]
 800af14:	49a7      	ldr	r1, [pc, #668]	; (800b1b4 <d_template_args+0x8a8>)
 800af16:	4658      	mov	r0, fp
 800af18:	f003 ff50 	bl	800edbc <strcmp>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	f000 8244 	beq.w	800b3aa <d_template_args+0xa9e>
 800af22:	49a5      	ldr	r1, [pc, #660]	; (800b1b8 <d_template_args+0x8ac>)
 800af24:	4658      	mov	r0, fp
 800af26:	f003 ff49 	bl	800edbc <strcmp>
 800af2a:	b130      	cbz	r0, 800af3a <d_template_args+0x62e>
 800af2c:	4658      	mov	r0, fp
 800af2e:	49a3      	ldr	r1, [pc, #652]	; (800b1bc <d_template_args+0x8b0>)
 800af30:	f003 ff44 	bl	800edbc <strcmp>
 800af34:	2800      	cmp	r0, #0
 800af36:	f040 828d 	bne.w	800b454 <d_template_args+0xb48>
 800af3a:	4620      	mov	r0, r4
 800af3c:	f002 fe48 	bl	800dbd0 <d_unqualified_name>
 800af40:	68e3      	ldr	r3, [r4, #12]
 800af42:	4683      	mov	fp, r0
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b49      	cmp	r3, #73	; 0x49
 800af48:	f000 833e 	beq.w	800b5c8 <d_template_args+0xcbc>
 800af4c:	465b      	mov	r3, fp
 800af4e:	9a01      	ldr	r2, [sp, #4]
 800af50:	2137      	movs	r1, #55	; 0x37
 800af52:	4620      	mov	r0, r4
 800af54:	f7fb fdda 	bl	8006b0c <d_make_comp>
 800af58:	464a      	mov	r2, r9
 800af5a:	4603      	mov	r3, r0
 800af5c:	2136      	movs	r1, #54	; 0x36
 800af5e:	4620      	mov	r0, r4
 800af60:	f7fb fdd4 	bl	8006b0c <d_make_comp>
 800af64:	4681      	mov	r9, r0
 800af66:	e681      	b.n	800ac6c <d_template_args+0x360>
 800af68:	7853      	ldrb	r3, [r2, #1]
 800af6a:	2b70      	cmp	r3, #112	; 0x70
 800af6c:	f47f af62 	bne.w	800ae34 <d_template_args+0x528>
 800af70:	1c93      	adds	r3, r2, #2
 800af72:	60e3      	str	r3, [r4, #12]
 800af74:	7893      	ldrb	r3, [r2, #2]
 800af76:	2b54      	cmp	r3, #84	; 0x54
 800af78:	f040 81b7 	bne.w	800b2ea <d_template_args+0x9de>
 800af7c:	3203      	adds	r2, #3
 800af7e:	60e2      	str	r2, [r4, #12]
 800af80:	2000      	movs	r0, #0
 800af82:	6963      	ldr	r3, [r4, #20]
 800af84:	69a2      	ldr	r2, [r4, #24]
 800af86:	4293      	cmp	r3, r2
 800af88:	da15      	bge.n	800afb6 <d_template_args+0x6aa>
 800af8a:	6922      	ldr	r2, [r4, #16]
 800af8c:	1c59      	adds	r1, r3, #1
 800af8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800af92:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 800af96:	6161      	str	r1, [r4, #20]
 800af98:	f43f ae68 	beq.w	800ac6c <d_template_args+0x360>
 800af9c:	2106      	movs	r1, #6
 800af9e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800afa2:	f8c9 0004 	str.w	r0, [r9, #4]
 800afa6:	e661      	b.n	800ac6c <d_template_args+0x360>
 800afa8:	2200      	movs	r2, #0
 800afaa:	e4f4      	b.n	800a996 <d_template_args+0x8a>
 800afac:	4620      	mov	r0, r4
 800afae:	f001 ffc1 	bl	800cf34 <d_expression_1>
 800afb2:	4682      	mov	sl, r0
 800afb4:	e5ee      	b.n	800ab94 <d_template_args+0x288>
 800afb6:	f04f 0900 	mov.w	r9, #0
 800afba:	e657      	b.n	800ac6c <d_template_args+0x360>
 800afbc:	3301      	adds	r3, #1
 800afbe:	60e3      	str	r3, [r4, #12]
 800afc0:	2300      	movs	r3, #0
 800afc2:	e5ab      	b.n	800ab1c <d_template_args+0x210>
 800afc4:	7913      	ldrb	r3, [r2, #4]
 800afc6:	2b72      	cmp	r3, #114	; 0x72
 800afc8:	f000 81ad 	beq.w	800b326 <d_template_args+0xa1a>
 800afcc:	2b70      	cmp	r3, #112	; 0x70
 800afce:	f000 8223 	beq.w	800b418 <d_template_args+0xb0c>
 800afd2:	4620      	mov	r0, r4
 800afd4:	f002 fd3c 	bl	800da50 <d_operator_name>
 800afd8:	4681      	mov	r9, r0
 800afda:	2800      	cmp	r0, #0
 800afdc:	f000 811c 	beq.w	800b218 <d_template_args+0x90c>
 800afe0:	7803      	ldrb	r3, [r0, #0]
 800afe2:	2b31      	cmp	r3, #49	; 0x31
 800afe4:	f000 813b 	beq.w	800b25e <d_template_args+0x952>
 800afe8:	2b32      	cmp	r3, #50	; 0x32
 800afea:	f040 811b 	bne.w	800b224 <d_template_args+0x918>
 800afee:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	f200 8110 	bhi.w	800b218 <d_template_args+0x90c>
 800aff8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800affc:	011b0004 	.word	0x011b0004
 800b000:	000b004b 	.word	0x000b004b
 800b004:	464a      	mov	r2, r9
 800b006:	2300      	movs	r3, #0
 800b008:	2134      	movs	r1, #52	; 0x34
 800b00a:	4620      	mov	r0, r4
 800b00c:	f7fb fd7e 	bl	8006b0c <d_make_comp>
 800b010:	e6c3      	b.n	800ad9a <d_template_args+0x48e>
 800b012:	2500      	movs	r5, #0
 800b014:	4966      	ldr	r1, [pc, #408]	; (800b1b0 <d_template_args+0x8a4>)
 800b016:	4628      	mov	r0, r5
 800b018:	f003 fed0 	bl	800edbc <strcmp>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	f000 81ca 	beq.w	800b3b6 <d_template_args+0xaaa>
 800b022:	782b      	ldrb	r3, [r5, #0]
 800b024:	2b6e      	cmp	r3, #110	; 0x6e
 800b026:	f040 80f7 	bne.w	800b218 <d_template_args+0x90c>
 800b02a:	786b      	ldrb	r3, [r5, #1]
 800b02c:	2b77      	cmp	r3, #119	; 0x77
 800b02e:	d002      	beq.n	800b036 <d_template_args+0x72a>
 800b030:	2b61      	cmp	r3, #97	; 0x61
 800b032:	f040 80f1 	bne.w	800b218 <d_template_args+0x90c>
 800b036:	215f      	movs	r1, #95	; 0x5f
 800b038:	4620      	mov	r0, r4
 800b03a:	f000 fadd 	bl	800b5f8 <d_exprlist>
 800b03e:	4605      	mov	r5, r0
 800b040:	4620      	mov	r0, r4
 800b042:	f002 f949 	bl	800d2d8 <d_type>
 800b046:	68e3      	ldr	r3, [r4, #12]
 800b048:	4682      	mov	sl, r0
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	2a45      	cmp	r2, #69	; 0x45
 800b04e:	f000 82b7 	beq.w	800b5c0 <d_template_args+0xcb4>
 800b052:	2a70      	cmp	r2, #112	; 0x70
 800b054:	f000 82a9 	beq.w	800b5aa <d_template_args+0xc9e>
 800b058:	2a69      	cmp	r2, #105	; 0x69
 800b05a:	f040 80dd 	bne.w	800b218 <d_template_args+0x90c>
 800b05e:	785b      	ldrb	r3, [r3, #1]
 800b060:	2b6c      	cmp	r3, #108	; 0x6c
 800b062:	f040 80d9 	bne.w	800b218 <d_template_args+0x90c>
 800b066:	4620      	mov	r0, r4
 800b068:	f001 ff64 	bl	800cf34 <d_expression_1>
 800b06c:	4603      	mov	r3, r0
 800b06e:	4652      	mov	r2, sl
 800b070:	213a      	movs	r1, #58	; 0x3a
 800b072:	4620      	mov	r0, r4
 800b074:	f7fb fd4a 	bl	8006b0c <d_make_comp>
 800b078:	462a      	mov	r2, r5
 800b07a:	4603      	mov	r3, r0
 800b07c:	2139      	movs	r1, #57	; 0x39
 800b07e:	4620      	mov	r0, r4
 800b080:	f7fb fd44 	bl	8006b0c <d_make_comp>
 800b084:	464a      	mov	r2, r9
 800b086:	4603      	mov	r3, r0
 800b088:	2138      	movs	r1, #56	; 0x38
 800b08a:	4620      	mov	r0, r4
 800b08c:	f7fb fd3e 	bl	8006b0c <d_make_comp>
 800b090:	e683      	b.n	800ad9a <d_template_args+0x48e>
 800b092:	2500      	movs	r5, #0
 800b094:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	785a      	ldrb	r2, [r3, #1]
 800b09c:	2a63      	cmp	r2, #99	; 0x63
 800b09e:	f000 81a8 	beq.w	800b3f2 <d_template_args+0xae6>
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f001 ff46 	bl	800cf34 <d_expression_1>
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	4942      	ldr	r1, [pc, #264]	; (800b1b4 <d_template_args+0x8a8>)
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f003 fe85 	bl	800edbc <strcmp>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	f000 8197 	beq.w	800b3e6 <d_template_args+0xada>
 800b0b8:	493f      	ldr	r1, [pc, #252]	; (800b1b8 <d_template_args+0x8ac>)
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f003 fe7e 	bl	800edbc <strcmp>
 800b0c0:	b130      	cbz	r0, 800b0d0 <d_template_args+0x7c4>
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	493d      	ldr	r1, [pc, #244]	; (800b1bc <d_template_args+0x8b0>)
 800b0c6:	f003 fe79 	bl	800edbc <strcmp>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f040 822a 	bne.w	800b524 <d_template_args+0xc18>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f002 fd7d 	bl	800dbd0 <d_unqualified_name>
 800b0d6:	68e3      	ldr	r3, [r4, #12]
 800b0d8:	4605      	mov	r5, r0
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2b49      	cmp	r3, #73	; 0x49
 800b0de:	f000 820b 	beq.w	800b4f8 <d_template_args+0xbec>
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	4652      	mov	r2, sl
 800b0e6:	2137      	movs	r1, #55	; 0x37
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f7fb fd0f 	bl	8006b0c <d_make_comp>
 800b0ee:	464a      	mov	r2, r9
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2136      	movs	r1, #54	; 0x36
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f7fb fd09 	bl	8006b0c <d_make_comp>
 800b0fa:	e64e      	b.n	800ad9a <d_template_args+0x48e>
 800b0fc:	7913      	ldrb	r3, [r2, #4]
 800b0fe:	2b70      	cmp	r3, #112	; 0x70
 800b100:	f47f af67 	bne.w	800afd2 <d_template_args+0x6c6>
 800b104:	1d53      	adds	r3, r2, #5
 800b106:	60e3      	str	r3, [r4, #12]
 800b108:	7953      	ldrb	r3, [r2, #5]
 800b10a:	2b54      	cmp	r3, #84	; 0x54
 800b10c:	d17e      	bne.n	800b20c <d_template_args+0x900>
 800b10e:	3206      	adds	r2, #6
 800b110:	60e2      	str	r2, [r4, #12]
 800b112:	2500      	movs	r5, #0
 800b114:	6963      	ldr	r3, [r4, #20]
 800b116:	69a2      	ldr	r2, [r4, #24]
 800b118:	4293      	cmp	r3, r2
 800b11a:	da7d      	bge.n	800b218 <d_template_args+0x90c>
 800b11c:	6921      	ldr	r1, [r4, #16]
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b124:	6162      	str	r2, [r4, #20]
 800b126:	eb11 0283 	adds.w	r2, r1, r3, lsl #2
 800b12a:	f000 8238 	beq.w	800b59e <d_template_args+0xc92>
 800b12e:	2006      	movs	r0, #6
 800b130:	f801 0023 	strb.w	r0, [r1, r3, lsl #2]
 800b134:	4610      	mov	r0, r2
 800b136:	6055      	str	r5, [r2, #4]
 800b138:	e62f      	b.n	800ad9a <d_template_args+0x48e>
 800b13a:	4620      	mov	r0, r4
 800b13c:	f7ff fbe6 	bl	800a90c <d_template_args>
 800b140:	4652      	mov	r2, sl
 800b142:	4603      	mov	r3, r0
 800b144:	2104      	movs	r1, #4
 800b146:	4620      	mov	r0, r4
 800b148:	f7fb fce0 	bl	8006b0c <d_make_comp>
 800b14c:	4682      	mov	sl, r0
 800b14e:	e521      	b.n	800ab94 <d_template_args+0x288>
 800b150:	2b33      	cmp	r3, #51	; 0x33
 800b152:	f47f af30 	bne.w	800afb6 <d_template_args+0x6aa>
 800b156:	68e3      	ldr	r3, [r4, #12]
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	2a5f      	cmp	r2, #95	; 0x5f
 800b15c:	f000 81a2 	beq.w	800b4a4 <d_template_args+0xb98>
 800b160:	f04f 0b00 	mov.w	fp, #0
 800b164:	4620      	mov	r0, r4
 800b166:	f001 fee5 	bl	800cf34 <d_expression_1>
 800b16a:	4603      	mov	r3, r0
 800b16c:	f1bb 0f00 	cmp.w	fp, #0
 800b170:	d005      	beq.n	800b17e <d_template_args+0x872>
 800b172:	4602      	mov	r2, r0
 800b174:	2137      	movs	r1, #55	; 0x37
 800b176:	4620      	mov	r0, r4
 800b178:	f7fb fcc8 	bl	8006b0c <d_make_comp>
 800b17c:	4603      	mov	r3, r0
 800b17e:	464a      	mov	r2, r9
 800b180:	2135      	movs	r1, #53	; 0x35
 800b182:	4620      	mov	r0, r4
 800b184:	f7fb fcc2 	bl	8006b0c <d_make_comp>
 800b188:	4681      	mov	r9, r0
 800b18a:	e56f      	b.n	800ac6c <d_template_args+0x360>
 800b18c:	785a      	ldrb	r2, [r3, #1]
 800b18e:	2a69      	cmp	r2, #105	; 0x69
 800b190:	f47f af0a 	bne.w	800afa8 <d_template_args+0x69c>
 800b194:	3302      	adds	r3, #2
 800b196:	60e3      	str	r3, [r4, #12]
 800b198:	2145      	movs	r1, #69	; 0x45
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 fa2c 	bl	800b5f8 <d_exprlist>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	e4bb      	b.n	800ab1c <d_template_args+0x210>
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f7fb fe53 	bl	8006e50 <d_template_param>
 800b1aa:	4681      	mov	r9, r0
 800b1ac:	e55e      	b.n	800ac6c <d_template_args+0x360>
 800b1ae:	bf00      	nop
 800b1b0:	080159c0 	.word	0x080159c0
 800b1b4:	080159b8 	.word	0x080159b8
 800b1b8:	08015ad4 	.word	0x08015ad4
 800b1bc:	08015ad8 	.word	0x08015ad8
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f003 fb81 	bl	800e8c8 <d_expr_primary>
 800b1c6:	4681      	mov	r9, r0
 800b1c8:	e550      	b.n	800ac6c <d_template_args+0x360>
 800b1ca:	6843      	ldr	r3, [r0, #4]
 800b1cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b1ce:	689a      	ldr	r2, [r3, #8]
 800b1d0:	f8d3 b000 	ldr.w	fp, [r3]
 800b1d4:	3a02      	subs	r2, #2
 800b1d6:	440a      	add	r2, r1
 800b1d8:	6322      	str	r2, [r4, #48]	; 0x30
 800b1da:	4658      	mov	r0, fp
 800b1dc:	49d0      	ldr	r1, [pc, #832]	; (800b520 <d_template_args+0xc14>)
 800b1de:	9301      	str	r3, [sp, #4]
 800b1e0:	f003 fdec 	bl	800edbc <strcmp>
 800b1e4:	9b01      	ldr	r3, [sp, #4]
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f000 8111 	beq.w	800b40e <d_template_args+0xb02>
 800b1ec:	68da      	ldr	r2, [r3, #12]
 800b1ee:	2a03      	cmp	r2, #3
 800b1f0:	f63f aee1 	bhi.w	800afb6 <d_template_args+0x6aa>
 800b1f4:	a301      	add	r3, pc, #4	; (adr r3, 800b1fc <d_template_args+0x8f0>)
 800b1f6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800b1fa:	bf00      	nop
 800b1fc:	0800ae67 	.word	0x0800ae67
 800b200:	0800b2bb 	.word	0x0800b2bb
 800b204:	0800aeff 	.word	0x0800aeff
 800b208:	0800ae7b 	.word	0x0800ae7b
 800b20c:	4620      	mov	r0, r4
 800b20e:	f7fb fe07 	bl	8006e20 <d_compact_number>
 800b212:	1c45      	adds	r5, r0, #1
 800b214:	f47f af7e 	bne.w	800b114 <d_template_args+0x808>
 800b218:	2000      	movs	r0, #0
 800b21a:	e5be      	b.n	800ad9a <d_template_args+0x48e>
 800b21c:	4620      	mov	r0, r4
 800b21e:	f003 fb53 	bl	800e8c8 <d_expr_primary>
 800b222:	e5ba      	b.n	800ad9a <d_template_args+0x48e>
 800b224:	2b33      	cmp	r3, #51	; 0x33
 800b226:	d1f7      	bne.n	800b218 <d_template_args+0x90c>
 800b228:	68e3      	ldr	r3, [r4, #12]
 800b22a:	781a      	ldrb	r2, [r3, #0]
 800b22c:	2a5f      	cmp	r2, #95	; 0x5f
 800b22e:	f000 816e 	beq.w	800b50e <d_template_args+0xc02>
 800b232:	2500      	movs	r5, #0
 800b234:	4620      	mov	r0, r4
 800b236:	f001 fe7d 	bl	800cf34 <d_expression_1>
 800b23a:	4603      	mov	r3, r0
 800b23c:	b12d      	cbz	r5, 800b24a <d_template_args+0x93e>
 800b23e:	4602      	mov	r2, r0
 800b240:	2137      	movs	r1, #55	; 0x37
 800b242:	4620      	mov	r0, r4
 800b244:	f7fb fc62 	bl	8006b0c <d_make_comp>
 800b248:	4603      	mov	r3, r0
 800b24a:	464a      	mov	r2, r9
 800b24c:	2135      	movs	r1, #53	; 0x35
 800b24e:	4620      	mov	r0, r4
 800b250:	f7fb fc5c 	bl	8006b0c <d_make_comp>
 800b254:	e5a1      	b.n	800ad9a <d_template_args+0x48e>
 800b256:	4620      	mov	r0, r4
 800b258:	f7fb fdfa 	bl	8006e50 <d_template_param>
 800b25c:	e59d      	b.n	800ad9a <d_template_args+0x48e>
 800b25e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800b262:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b264:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b268:	f8da 5000 	ldr.w	r5, [sl]
 800b26c:	3b02      	subs	r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	6323      	str	r3, [r4, #48]	; 0x30
 800b272:	4628      	mov	r0, r5
 800b274:	49aa      	ldr	r1, [pc, #680]	; (800b520 <d_template_args+0xc14>)
 800b276:	f003 fda1 	bl	800edbc <strcmp>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	f000 80d8 	beq.w	800b430 <d_template_args+0xb24>
 800b280:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b284:	2b03      	cmp	r3, #3
 800b286:	d8c7      	bhi.n	800b218 <d_template_args+0x90c>
 800b288:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <d_template_args+0x984>)
 800b28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28e:	bf00      	nop
 800b290:	0800b005 	.word	0x0800b005
 800b294:	0800b353 	.word	0x0800b353
 800b298:	0800b095 	.word	0x0800b095
 800b29c:	0800b015 	.word	0x0800b015
 800b2a0:	3201      	adds	r2, #1
 800b2a2:	60e2      	str	r2, [r4, #12]
 800b2a4:	e517      	b.n	800acd6 <d_template_args+0x3ca>
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7ff fb30 	bl	800a90c <d_template_args>
 800b2ac:	462a      	mov	r2, r5
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2104      	movs	r1, #4
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f7fb fc2a 	bl	8006b0c <d_make_comp>
 800b2b8:	e56f      	b.n	800ad9a <d_template_args+0x48e>
 800b2ba:	f1bb 0f00 	cmp.w	fp, #0
 800b2be:	f43f af4f 	beq.w	800b160 <d_template_args+0x854>
 800b2c2:	f89b 2000 	ldrb.w	r2, [fp]
 800b2c6:	2a70      	cmp	r2, #112	; 0x70
 800b2c8:	d002      	beq.n	800b2d0 <d_template_args+0x9c4>
 800b2ca:	2a6d      	cmp	r2, #109	; 0x6d
 800b2cc:	f47f af48 	bne.w	800b160 <d_template_args+0x854>
 800b2d0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	f47f af43 	bne.w	800b160 <d_template_args+0x854>
 800b2da:	68e3      	ldr	r3, [r4, #12]
 800b2dc:	781a      	ldrb	r2, [r3, #0]
 800b2de:	2a5f      	cmp	r2, #95	; 0x5f
 800b2e0:	f000 8107 	beq.w	800b4f2 <d_template_args+0xbe6>
 800b2e4:	f04f 0b01 	mov.w	fp, #1
 800b2e8:	e73c      	b.n	800b164 <d_template_args+0x858>
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f7fb fd98 	bl	8006e20 <d_compact_number>
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	f47f ae46 	bne.w	800af82 <d_template_args+0x676>
 800b2f6:	4681      	mov	r9, r0
 800b2f8:	e4b8      	b.n	800ac6c <d_template_args+0x360>
 800b2fa:	3202      	adds	r2, #2
 800b2fc:	60e2      	str	r2, [r4, #12]
 800b2fe:	4620      	mov	r0, r4
 800b300:	f001 ffea 	bl	800d2d8 <d_type>
 800b304:	4681      	mov	r9, r0
 800b306:	4620      	mov	r0, r4
 800b308:	f002 fc62 	bl	800dbd0 <d_unqualified_name>
 800b30c:	68e3      	ldr	r3, [r4, #12]
 800b30e:	4683      	mov	fp, r0
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b49      	cmp	r3, #73	; 0x49
 800b314:	d03e      	beq.n	800b394 <d_template_args+0xa88>
 800b316:	4603      	mov	r3, r0
 800b318:	464a      	mov	r2, r9
 800b31a:	2101      	movs	r1, #1
 800b31c:	4620      	mov	r0, r4
 800b31e:	f7fb fbf5 	bl	8006b0c <d_make_comp>
 800b322:	4681      	mov	r9, r0
 800b324:	e4a2      	b.n	800ac6c <d_template_args+0x360>
 800b326:	3205      	adds	r2, #5
 800b328:	60e2      	str	r2, [r4, #12]
 800b32a:	4620      	mov	r0, r4
 800b32c:	f001 ffd4 	bl	800d2d8 <d_type>
 800b330:	4605      	mov	r5, r0
 800b332:	4620      	mov	r0, r4
 800b334:	f002 fc4c 	bl	800dbd0 <d_unqualified_name>
 800b338:	68e3      	ldr	r3, [r4, #12]
 800b33a:	4681      	mov	r9, r0
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b49      	cmp	r3, #73	; 0x49
 800b340:	f000 80b8 	beq.w	800b4b4 <d_template_args+0xba8>
 800b344:	4603      	mov	r3, r0
 800b346:	462a      	mov	r2, r5
 800b348:	2101      	movs	r1, #1
 800b34a:	4620      	mov	r0, r4
 800b34c:	f7fb fbde 	bl	8006b0c <d_make_comp>
 800b350:	e523      	b.n	800ad9a <d_template_args+0x48e>
 800b352:	2d00      	cmp	r5, #0
 800b354:	f43f af6d 	beq.w	800b232 <d_template_args+0x926>
 800b358:	782b      	ldrb	r3, [r5, #0]
 800b35a:	2b70      	cmp	r3, #112	; 0x70
 800b35c:	d002      	beq.n	800b364 <d_template_args+0xa58>
 800b35e:	2b6d      	cmp	r3, #109	; 0x6d
 800b360:	f47f af67 	bne.w	800b232 <d_template_args+0x926>
 800b364:	786a      	ldrb	r2, [r5, #1]
 800b366:	429a      	cmp	r2, r3
 800b368:	f47f af63 	bne.w	800b232 <d_template_args+0x926>
 800b36c:	68e3      	ldr	r3, [r4, #12]
 800b36e:	781a      	ldrb	r2, [r3, #0]
 800b370:	2a5f      	cmp	r2, #95	; 0x5f
 800b372:	f000 8117 	beq.w	800b5a4 <d_template_args+0xc98>
 800b376:	2501      	movs	r5, #1
 800b378:	e75c      	b.n	800b234 <d_template_args+0x928>
 800b37a:	3202      	adds	r2, #2
 800b37c:	60e2      	str	r2, [r4, #12]
 800b37e:	4620      	mov	r0, r4
 800b380:	f001 fdd8 	bl	800cf34 <d_expression_1>
 800b384:	2300      	movs	r3, #0
 800b386:	4602      	mov	r2, r0
 800b388:	2149      	movs	r1, #73	; 0x49
 800b38a:	4620      	mov	r0, r4
 800b38c:	f7fb fbbe 	bl	8006b0c <d_make_comp>
 800b390:	4681      	mov	r9, r0
 800b392:	e46b      	b.n	800ac6c <d_template_args+0x360>
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff fab9 	bl	800a90c <d_template_args>
 800b39a:	465a      	mov	r2, fp
 800b39c:	4603      	mov	r3, r0
 800b39e:	2104      	movs	r1, #4
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f7fb fbb3 	bl	8006b0c <d_make_comp>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	e7b6      	b.n	800b318 <d_template_args+0xa0c>
 800b3aa:	2145      	movs	r1, #69	; 0x45
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 f923 	bl	800b5f8 <d_exprlist>
 800b3b2:	4683      	mov	fp, r0
 800b3b4:	e5ca      	b.n	800af4c <d_template_args+0x640>
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 fdbc 	bl	800cf34 <d_expression_1>
 800b3bc:	4605      	mov	r5, r0
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f001 fdb8 	bl	800cf34 <d_expression_1>
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f001 fdb4 	bl	800cf34 <d_expression_1>
 800b3cc:	e64e      	b.n	800b06c <d_template_args+0x760>
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f001 fdb0 	bl	800cf34 <d_expression_1>
 800b3d4:	9001      	str	r0, [sp, #4]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f001 fdac 	bl	800cf34 <d_expression_1>
 800b3dc:	4683      	mov	fp, r0
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f001 fda8 	bl	800cf34 <d_expression_1>
 800b3e4:	e575      	b.n	800aed2 <d_template_args+0x5c6>
 800b3e6:	2145      	movs	r1, #69	; 0x45
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	f000 f905 	bl	800b5f8 <d_exprlist>
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	e677      	b.n	800b0e2 <d_template_args+0x7d6>
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800b3f8:	2a01      	cmp	r2, #1
 800b3fa:	d903      	bls.n	800b404 <d_template_args+0xaf8>
 800b3fc:	3b72      	subs	r3, #114	; 0x72
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	f63f ae4f 	bhi.w	800b0a2 <d_template_args+0x796>
 800b404:	4620      	mov	r0, r4
 800b406:	f001 ff67 	bl	800d2d8 <d_type>
 800b40a:	4682      	mov	sl, r0
 800b40c:	e64d      	b.n	800b0aa <d_template_args+0x79e>
 800b40e:	4620      	mov	r0, r4
 800b410:	f001 ff62 	bl	800d2d8 <d_type>
 800b414:	4603      	mov	r3, r0
 800b416:	e6b2      	b.n	800b17e <d_template_args+0x872>
 800b418:	3205      	adds	r2, #5
 800b41a:	60e2      	str	r2, [r4, #12]
 800b41c:	4620      	mov	r0, r4
 800b41e:	f001 fd89 	bl	800cf34 <d_expression_1>
 800b422:	2300      	movs	r3, #0
 800b424:	4602      	mov	r2, r0
 800b426:	2149      	movs	r1, #73	; 0x49
 800b428:	4620      	mov	r0, r4
 800b42a:	f7fb fb6f 	bl	8006b0c <d_make_comp>
 800b42e:	e4b4      	b.n	800ad9a <d_template_args+0x48e>
 800b430:	4620      	mov	r0, r4
 800b432:	f001 ff51 	bl	800d2d8 <d_type>
 800b436:	e707      	b.n	800b248 <d_template_args+0x93c>
 800b438:	7812      	ldrb	r2, [r2, #0]
 800b43a:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800b43e:	2901      	cmp	r1, #1
 800b440:	d903      	bls.n	800b44a <d_template_args+0xb3e>
 800b442:	3a72      	subs	r2, #114	; 0x72
 800b444:	2a01      	cmp	r2, #1
 800b446:	f63f ad61 	bhi.w	800af0c <d_template_args+0x600>
 800b44a:	4620      	mov	r0, r4
 800b44c:	f001 ff44 	bl	800d2d8 <d_type>
 800b450:	9001      	str	r0, [sp, #4]
 800b452:	e55f      	b.n	800af14 <d_template_args+0x608>
 800b454:	4620      	mov	r0, r4
 800b456:	f001 fd6d 	bl	800cf34 <d_expression_1>
 800b45a:	4683      	mov	fp, r0
 800b45c:	e576      	b.n	800af4c <d_template_args+0x640>
 800b45e:	2b6f      	cmp	r3, #111	; 0x6f
 800b460:	d018      	beq.n	800b494 <d_template_args+0xb88>
 800b462:	2b69      	cmp	r3, #105	; 0x69
 800b464:	f040 80bb 	bne.w	800b5de <d_template_args+0xcd2>
 800b468:	7853      	ldrb	r3, [r2, #1]
 800b46a:	2b6c      	cmp	r3, #108	; 0x6c
 800b46c:	f47f ace2 	bne.w	800ae34 <d_template_args+0x528>
 800b470:	f04f 0900 	mov.w	r9, #0
 800b474:	68e3      	ldr	r3, [r4, #12]
 800b476:	2145      	movs	r1, #69	; 0x45
 800b478:	3302      	adds	r3, #2
 800b47a:	60e3      	str	r3, [r4, #12]
 800b47c:	4620      	mov	r0, r4
 800b47e:	f000 f8bb 	bl	800b5f8 <d_exprlist>
 800b482:	464a      	mov	r2, r9
 800b484:	4603      	mov	r3, r0
 800b486:	2130      	movs	r1, #48	; 0x30
 800b488:	4620      	mov	r0, r4
 800b48a:	f7fb fb3f 	bl	8006b0c <d_make_comp>
 800b48e:	4681      	mov	r9, r0
 800b490:	f7ff bbec 	b.w	800ac6c <d_template_args+0x360>
 800b494:	7853      	ldrb	r3, [r2, #1]
 800b496:	2b6e      	cmp	r3, #110	; 0x6e
 800b498:	f47f accc 	bne.w	800ae34 <d_template_args+0x528>
 800b49c:	3202      	adds	r2, #2
 800b49e:	60e2      	str	r2, [r4, #12]
 800b4a0:	f7ff bbdb 	b.w	800ac5a <d_template_args+0x34e>
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	60e3      	str	r3, [r4, #12]
 800b4a8:	2145      	movs	r1, #69	; 0x45
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 f8a4 	bl	800b5f8 <d_exprlist>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	e664      	b.n	800b17e <d_template_args+0x872>
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f7ff fa29 	bl	800a90c <d_template_args>
 800b4ba:	464a      	mov	r2, r9
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2104      	movs	r1, #4
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f7fb fb23 	bl	8006b0c <d_make_comp>
 800b4c6:	462a      	mov	r2, r5
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	f7fb fb1d 	bl	8006b0c <d_make_comp>
 800b4d2:	e462      	b.n	800ad9a <d_template_args+0x48e>
 800b4d4:	785a      	ldrb	r2, [r3, #1]
 800b4d6:	2a69      	cmp	r2, #105	; 0x69
 800b4d8:	f47f ad6d 	bne.w	800afb6 <d_template_args+0x6aa>
 800b4dc:	3302      	adds	r3, #2
 800b4de:	60e3      	str	r3, [r4, #12]
 800b4e0:	2145      	movs	r1, #69	; 0x45
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f888 	bl	800b5f8 <d_exprlist>
 800b4e8:	e4f3      	b.n	800aed2 <d_template_args+0x5c6>
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	60e3      	str	r3, [r4, #12]
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e4ef      	b.n	800aed2 <d_template_args+0x5c6>
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	60e3      	str	r3, [r4, #12]
 800b4f6:	e633      	b.n	800b160 <d_template_args+0x854>
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f7ff fa07 	bl	800a90c <d_template_args>
 800b4fe:	462a      	mov	r2, r5
 800b500:	4603      	mov	r3, r0
 800b502:	2104      	movs	r1, #4
 800b504:	4620      	mov	r0, r4
 800b506:	f7fb fb01 	bl	8006b0c <d_make_comp>
 800b50a:	4605      	mov	r5, r0
 800b50c:	e5e9      	b.n	800b0e2 <d_template_args+0x7d6>
 800b50e:	3301      	adds	r3, #1
 800b510:	60e3      	str	r3, [r4, #12]
 800b512:	2145      	movs	r1, #69	; 0x45
 800b514:	4620      	mov	r0, r4
 800b516:	f000 f86f 	bl	800b5f8 <d_exprlist>
 800b51a:	4603      	mov	r3, r0
 800b51c:	e695      	b.n	800b24a <d_template_args+0x93e>
 800b51e:	bf00      	nop
 800b520:	08015cc8 	.word	0x08015cc8
 800b524:	4620      	mov	r0, r4
 800b526:	f001 fd05 	bl	800cf34 <d_expression_1>
 800b52a:	4605      	mov	r5, r0
 800b52c:	e5d9      	b.n	800b0e2 <d_template_args+0x7d6>
 800b52e:	2b74      	cmp	r3, #116	; 0x74
 800b530:	f47f aa69 	bne.w	800aa06 <d_template_args+0xfa>
 800b534:	7893      	ldrb	r3, [r2, #2]
 800b536:	2b6c      	cmp	r3, #108	; 0x6c
 800b538:	f47f aa65 	bne.w	800aa06 <d_template_args+0xfa>
 800b53c:	4620      	mov	r0, r4
 800b53e:	f001 fecb 	bl	800d2d8 <d_type>
 800b542:	4605      	mov	r5, r0
 800b544:	f7ff bbd5 	b.w	800acf2 <d_template_args+0x3e6>
 800b548:	2b6f      	cmp	r3, #111	; 0x6f
 800b54a:	d014      	beq.n	800b576 <d_template_args+0xc6a>
 800b54c:	2b69      	cmp	r3, #105	; 0x69
 800b54e:	d11a      	bne.n	800b586 <d_template_args+0xc7a>
 800b550:	7913      	ldrb	r3, [r2, #4]
 800b552:	2b6c      	cmp	r3, #108	; 0x6c
 800b554:	f47f ad3d 	bne.w	800afd2 <d_template_args+0x6c6>
 800b558:	2500      	movs	r5, #0
 800b55a:	68e3      	ldr	r3, [r4, #12]
 800b55c:	2145      	movs	r1, #69	; 0x45
 800b55e:	3302      	adds	r3, #2
 800b560:	60e3      	str	r3, [r4, #12]
 800b562:	4620      	mov	r0, r4
 800b564:	f000 f848 	bl	800b5f8 <d_exprlist>
 800b568:	462a      	mov	r2, r5
 800b56a:	4603      	mov	r3, r0
 800b56c:	2130      	movs	r1, #48	; 0x30
 800b56e:	4620      	mov	r0, r4
 800b570:	f7fb facc 	bl	8006b0c <d_make_comp>
 800b574:	e411      	b.n	800ad9a <d_template_args+0x48e>
 800b576:	7913      	ldrb	r3, [r2, #4]
 800b578:	2b6e      	cmp	r3, #110	; 0x6e
 800b57a:	f47f ad2a 	bne.w	800afd2 <d_template_args+0x6c6>
 800b57e:	3205      	adds	r2, #5
 800b580:	60e2      	str	r2, [r4, #12]
 800b582:	f7ff bbfe 	b.w	800ad82 <d_template_args+0x476>
 800b586:	2b74      	cmp	r3, #116	; 0x74
 800b588:	f47f ad23 	bne.w	800afd2 <d_template_args+0x6c6>
 800b58c:	7913      	ldrb	r3, [r2, #4]
 800b58e:	2b6c      	cmp	r3, #108	; 0x6c
 800b590:	f47f ad1f 	bne.w	800afd2 <d_template_args+0x6c6>
 800b594:	4620      	mov	r0, r4
 800b596:	f001 fe9f 	bl	800d2d8 <d_type>
 800b59a:	4605      	mov	r5, r0
 800b59c:	e7dd      	b.n	800b55a <d_template_args+0xc4e>
 800b59e:	4610      	mov	r0, r2
 800b5a0:	f7ff bbfb 	b.w	800ad9a <d_template_args+0x48e>
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	60e3      	str	r3, [r4, #12]
 800b5a8:	e643      	b.n	800b232 <d_template_args+0x926>
 800b5aa:	785a      	ldrb	r2, [r3, #1]
 800b5ac:	2a69      	cmp	r2, #105	; 0x69
 800b5ae:	f47f ae33 	bne.w	800b218 <d_template_args+0x90c>
 800b5b2:	3302      	adds	r3, #2
 800b5b4:	60e3      	str	r3, [r4, #12]
 800b5b6:	2145      	movs	r1, #69	; 0x45
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 f81d 	bl	800b5f8 <d_exprlist>
 800b5be:	e555      	b.n	800b06c <d_template_args+0x760>
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	60e3      	str	r3, [r4, #12]
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	e551      	b.n	800b06c <d_template_args+0x760>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f7ff f99f 	bl	800a90c <d_template_args>
 800b5ce:	465a      	mov	r2, fp
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2104      	movs	r1, #4
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f7fb fa99 	bl	8006b0c <d_make_comp>
 800b5da:	4683      	mov	fp, r0
 800b5dc:	e4b6      	b.n	800af4c <d_template_args+0x640>
 800b5de:	2b74      	cmp	r3, #116	; 0x74
 800b5e0:	f47f ac28 	bne.w	800ae34 <d_template_args+0x528>
 800b5e4:	7853      	ldrb	r3, [r2, #1]
 800b5e6:	2b6c      	cmp	r3, #108	; 0x6c
 800b5e8:	f47f ac24 	bne.w	800ae34 <d_template_args+0x528>
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f001 fe73 	bl	800d2d8 <d_type>
 800b5f2:	4681      	mov	r9, r0
 800b5f4:	e73e      	b.n	800b474 <d_template_args+0xb68>
 800b5f6:	bf00      	nop

0800b5f8 <d_exprlist>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	68c2      	ldr	r2, [r0, #12]
 800b5fe:	b085      	sub	sp, #20
 800b600:	7815      	ldrb	r5, [r2, #0]
 800b602:	2300      	movs	r3, #0
 800b604:	428d      	cmp	r5, r1
 800b606:	4604      	mov	r4, r0
 800b608:	9303      	str	r3, [sp, #12]
 800b60a:	f000 8261 	beq.w	800bad0 <d_exprlist+0x4d8>
 800b60e:	460f      	mov	r7, r1
 800b610:	ae03      	add	r6, sp, #12
 800b612:	e022      	b.n	800b65a <d_exprlist+0x62>
 800b614:	2b66      	cmp	r3, #102	; 0x66
 800b616:	d04b      	beq.n	800b6b0 <d_exprlist+0xb8>
 800b618:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b61c:	2909      	cmp	r1, #9
 800b61e:	f201 8454 	bhi.w	800ceca <d_exprlist+0x18d2>
 800b622:	4620      	mov	r0, r4
 800b624:	f002 fad4 	bl	800dbd0 <d_unqualified_name>
 800b628:	4680      	mov	r8, r0
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d064      	beq.n	800b6f8 <d_exprlist+0x100>
 800b62e:	68e3      	ldr	r3, [r4, #12]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	2b49      	cmp	r3, #73	; 0x49
 800b634:	f000 808b 	beq.w	800b74e <d_exprlist+0x156>
 800b638:	4602      	mov	r2, r0
 800b63a:	6365      	str	r5, [r4, #52]	; 0x34
 800b63c:	2300      	movs	r3, #0
 800b63e:	212e      	movs	r1, #46	; 0x2e
 800b640:	4620      	mov	r0, r4
 800b642:	f7fb fa63 	bl	8006b0c <d_make_comp>
 800b646:	6030      	str	r0, [r6, #0]
 800b648:	2800      	cmp	r0, #0
 800b64a:	d056      	beq.n	800b6fa <d_exprlist+0x102>
 800b64c:	68e2      	ldr	r2, [r4, #12]
 800b64e:	f100 0608 	add.w	r6, r0, #8
 800b652:	7813      	ldrb	r3, [r2, #0]
 800b654:	42bb      	cmp	r3, r7
 800b656:	f000 8179 	beq.w	800b94c <d_exprlist+0x354>
 800b65a:	f04f 0801 	mov.w	r8, #1
 800b65e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b660:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
 800b664:	7813      	ldrb	r3, [r2, #0]
 800b666:	2b4c      	cmp	r3, #76	; 0x4c
 800b668:	d04b      	beq.n	800b702 <d_exprlist+0x10a>
 800b66a:	2b54      	cmp	r3, #84	; 0x54
 800b66c:	d051      	beq.n	800b712 <d_exprlist+0x11a>
 800b66e:	2b73      	cmp	r3, #115	; 0x73
 800b670:	d1d0      	bne.n	800b614 <d_exprlist+0x1c>
 800b672:	7853      	ldrb	r3, [r2, #1]
 800b674:	2b72      	cmp	r3, #114	; 0x72
 800b676:	f000 8152 	beq.w	800b91e <d_exprlist+0x326>
 800b67a:	2b70      	cmp	r3, #112	; 0x70
 800b67c:	f000 816c 	beq.w	800b958 <d_exprlist+0x360>
 800b680:	4620      	mov	r0, r4
 800b682:	f002 f9e5 	bl	800da50 <d_operator_name>
 800b686:	4680      	mov	r8, r0
 800b688:	2800      	cmp	r0, #0
 800b68a:	d035      	beq.n	800b6f8 <d_exprlist+0x100>
 800b68c:	f890 a000 	ldrb.w	sl, [r0]
 800b690:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800b694:	d042      	beq.n	800b71c <d_exprlist+0x124>
 800b696:	f1ba 0f32 	cmp.w	sl, #50	; 0x32
 800b69a:	d129      	bne.n	800b6f0 <d_exprlist+0xf8>
 800b69c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6a0:	2b03      	cmp	r3, #3
 800b6a2:	d829      	bhi.n	800b6f8 <d_exprlist+0x100>
 800b6a4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b6a8:	01080062 	.word	0x01080062
 800b6ac:	006a00ac 	.word	0x006a00ac
 800b6b0:	7853      	ldrb	r3, [r2, #1]
 800b6b2:	2b70      	cmp	r3, #112	; 0x70
 800b6b4:	d1e4      	bne.n	800b680 <d_exprlist+0x88>
 800b6b6:	1c93      	adds	r3, r2, #2
 800b6b8:	60e3      	str	r3, [r4, #12]
 800b6ba:	7893      	ldrb	r3, [r2, #2]
 800b6bc:	2b54      	cmp	r3, #84	; 0x54
 800b6be:	d051      	beq.n	800b764 <d_exprlist+0x16c>
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f7fb fbad 	bl	8006e20 <d_compact_number>
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d016      	beq.n	800b6f8 <d_exprlist+0x100>
 800b6ca:	6963      	ldr	r3, [r4, #20]
 800b6cc:	69a2      	ldr	r2, [r4, #24]
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	da12      	bge.n	800b6f8 <d_exprlist+0x100>
 800b6d2:	6922      	ldr	r2, [r4, #16]
 800b6d4:	1c59      	adds	r1, r3, #1
 800b6d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b6da:	6161      	str	r1, [r4, #20]
 800b6dc:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800b6e0:	d00a      	beq.n	800b6f8 <d_exprlist+0x100>
 800b6e2:	f04f 0e06 	mov.w	lr, #6
 800b6e6:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800b6ea:	460a      	mov	r2, r1
 800b6ec:	6048      	str	r0, [r1, #4]
 800b6ee:	e7a4      	b.n	800b63a <d_exprlist+0x42>
 800b6f0:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 800b6f4:	f000 8158 	beq.w	800b9a8 <d_exprlist+0x3b0>
 800b6f8:	6365      	str	r5, [r4, #52]	; 0x34
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	b005      	add	sp, #20
 800b6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b702:	4620      	mov	r0, r4
 800b704:	f003 f8e0 	bl	800e8c8 <d_expr_primary>
 800b708:	4602      	mov	r2, r0
 800b70a:	6365      	str	r5, [r4, #52]	; 0x34
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	d195      	bne.n	800b63c <d_exprlist+0x44>
 800b710:	e7f3      	b.n	800b6fa <d_exprlist+0x102>
 800b712:	4620      	mov	r0, r4
 800b714:	f7fb fb9c 	bl	8006e50 <d_template_param>
 800b718:	4602      	mov	r2, r0
 800b71a:	e7f6      	b.n	800b70a <d_exprlist+0x112>
 800b71c:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800b720:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b722:	f8db 3008 	ldr.w	r3, [fp, #8]
 800b726:	f8db 9000 	ldr.w	r9, [fp]
 800b72a:	3b02      	subs	r3, #2
 800b72c:	4413      	add	r3, r2
 800b72e:	6323      	str	r3, [r4, #48]	; 0x30
 800b730:	4648      	mov	r0, r9
 800b732:	49ae      	ldr	r1, [pc, #696]	; (800b9ec <d_exprlist+0x3f4>)
 800b734:	f003 fb42 	bl	800edbc <strcmp>
 800b738:	2800      	cmp	r0, #0
 800b73a:	f000 8152 	beq.w	800b9e2 <d_exprlist+0x3ea>
 800b73e:	f8db 300c 	ldr.w	r3, [fp, #12]
 800b742:	2b03      	cmp	r3, #3
 800b744:	d8d8      	bhi.n	800b6f8 <d_exprlist+0x100>
 800b746:	e8df f003 	tbb	[pc, r3]
 800b74a:	ad11      	.short	0xad11
 800b74c:	1b5d      	.short	0x1b5d
 800b74e:	4620      	mov	r0, r4
 800b750:	f7ff f8dc 	bl	800a90c <d_template_args>
 800b754:	4642      	mov	r2, r8
 800b756:	4603      	mov	r3, r0
 800b758:	2104      	movs	r1, #4
 800b75a:	4620      	mov	r0, r4
 800b75c:	f7fb f9d6 	bl	8006b0c <d_make_comp>
 800b760:	4602      	mov	r2, r0
 800b762:	e7d2      	b.n	800b70a <d_exprlist+0x112>
 800b764:	3203      	adds	r2, #3
 800b766:	60e2      	str	r2, [r4, #12]
 800b768:	2000      	movs	r0, #0
 800b76a:	e7ae      	b.n	800b6ca <d_exprlist+0xd2>
 800b76c:	4642      	mov	r2, r8
 800b76e:	2300      	movs	r3, #0
 800b770:	2134      	movs	r1, #52	; 0x34
 800b772:	4620      	mov	r0, r4
 800b774:	f7fb f9ca 	bl	8006b0c <d_make_comp>
 800b778:	4602      	mov	r2, r0
 800b77a:	e7c6      	b.n	800b70a <d_exprlist+0x112>
 800b77c:	f04f 0900 	mov.w	r9, #0
 800b780:	499b      	ldr	r1, [pc, #620]	; (800b9f0 <d_exprlist+0x3f8>)
 800b782:	4648      	mov	r0, r9
 800b784:	f003 fb1a 	bl	800edbc <strcmp>
 800b788:	4683      	mov	fp, r0
 800b78a:	2800      	cmp	r0, #0
 800b78c:	f000 8138 	beq.w	800ba00 <d_exprlist+0x408>
 800b790:	f899 3000 	ldrb.w	r3, [r9]
 800b794:	2b6e      	cmp	r3, #110	; 0x6e
 800b796:	d1af      	bne.n	800b6f8 <d_exprlist+0x100>
 800b798:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b79c:	2b77      	cmp	r3, #119	; 0x77
 800b79e:	d001      	beq.n	800b7a4 <d_exprlist+0x1ac>
 800b7a0:	2b61      	cmp	r3, #97	; 0x61
 800b7a2:	d1a9      	bne.n	800b6f8 <d_exprlist+0x100>
 800b7a4:	215f      	movs	r1, #95	; 0x5f
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f7ff ff26 	bl	800b5f8 <d_exprlist>
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f001 fd92 	bl	800d2d8 <d_type>
 800b7b4:	68e3      	ldr	r3, [r4, #12]
 800b7b6:	4681      	mov	r9, r0
 800b7b8:	781a      	ldrb	r2, [r3, #0]
 800b7ba:	2a45      	cmp	r2, #69	; 0x45
 800b7bc:	f000 81cf 	beq.w	800bb5e <d_exprlist+0x566>
 800b7c0:	2a70      	cmp	r2, #112	; 0x70
 800b7c2:	f000 84c9 	beq.w	800c158 <d_exprlist+0xb60>
 800b7c6:	2a69      	cmp	r2, #105	; 0x69
 800b7c8:	d196      	bne.n	800b6f8 <d_exprlist+0x100>
 800b7ca:	785b      	ldrb	r3, [r3, #1]
 800b7cc:	2b6c      	cmp	r3, #108	; 0x6c
 800b7ce:	d193      	bne.n	800b6f8 <d_exprlist+0x100>
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f001 fbaf 	bl	800cf34 <d_expression_1>
 800b7d6:	4683      	mov	fp, r0
 800b7d8:	465b      	mov	r3, fp
 800b7da:	464a      	mov	r2, r9
 800b7dc:	213a      	movs	r1, #58	; 0x3a
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f7fb f994 	bl	8006b0c <d_make_comp>
 800b7e4:	4652      	mov	r2, sl
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2139      	movs	r1, #57	; 0x39
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f7fb f98e 	bl	8006b0c <d_make_comp>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2138      	movs	r1, #56	; 0x38
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f7fb f988 	bl	8006b0c <d_make_comp>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	e784      	b.n	800b70a <d_exprlist+0x112>
 800b800:	f04f 0900 	mov.w	r9, #0
 800b804:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	785a      	ldrb	r2, [r3, #1]
 800b80c:	2a63      	cmp	r2, #99	; 0x63
 800b80e:	f000 8146 	beq.w	800ba9e <d_exprlist+0x4a6>
 800b812:	68e1      	ldr	r1, [r4, #12]
 800b814:	780b      	ldrb	r3, [r1, #0]
 800b816:	2b4c      	cmp	r3, #76	; 0x4c
 800b818:	f000 861e 	beq.w	800c458 <d_exprlist+0xe60>
 800b81c:	2b54      	cmp	r3, #84	; 0x54
 800b81e:	f000 81fd 	beq.w	800bc1c <d_exprlist+0x624>
 800b822:	2b73      	cmp	r3, #115	; 0x73
 800b824:	f000 8437 	beq.w	800c096 <d_exprlist+0xa9e>
 800b828:	2b66      	cmp	r3, #102	; 0x66
 800b82a:	f000 8475 	beq.w	800c118 <d_exprlist+0xb20>
 800b82e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b832:	2a09      	cmp	r2, #9
 800b834:	f200 81bf 	bhi.w	800bbb6 <d_exprlist+0x5be>
 800b838:	4620      	mov	r0, r4
 800b83a:	f002 f9c9 	bl	800dbd0 <d_unqualified_name>
 800b83e:	4682      	mov	sl, r0
 800b840:	2800      	cmp	r0, #0
 800b842:	f000 84a8 	beq.w	800c196 <d_exprlist+0xb9e>
 800b846:	68e3      	ldr	r3, [r4, #12]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	2b49      	cmp	r3, #73	; 0x49
 800b84c:	f000 870e 	beq.w	800c66c <d_exprlist+0x1074>
 800b850:	4968      	ldr	r1, [pc, #416]	; (800b9f4 <d_exprlist+0x3fc>)
 800b852:	4648      	mov	r0, r9
 800b854:	f003 fab2 	bl	800edbc <strcmp>
 800b858:	2800      	cmp	r0, #0
 800b85a:	f000 811a 	beq.w	800ba92 <d_exprlist+0x49a>
 800b85e:	4966      	ldr	r1, [pc, #408]	; (800b9f8 <d_exprlist+0x400>)
 800b860:	4648      	mov	r0, r9
 800b862:	f003 faab 	bl	800edbc <strcmp>
 800b866:	b130      	cbz	r0, 800b876 <d_exprlist+0x27e>
 800b868:	4648      	mov	r0, r9
 800b86a:	4964      	ldr	r1, [pc, #400]	; (800b9fc <d_exprlist+0x404>)
 800b86c:	f003 faa6 	bl	800edbc <strcmp>
 800b870:	2800      	cmp	r0, #0
 800b872:	f040 816f 	bne.w	800bb54 <d_exprlist+0x55c>
 800b876:	4620      	mov	r0, r4
 800b878:	f002 f9aa 	bl	800dbd0 <d_unqualified_name>
 800b87c:	68e3      	ldr	r3, [r4, #12]
 800b87e:	4681      	mov	r9, r0
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	2b49      	cmp	r3, #73	; 0x49
 800b884:	f000 843c 	beq.w	800c100 <d_exprlist+0xb08>
 800b888:	464b      	mov	r3, r9
 800b88a:	4652      	mov	r2, sl
 800b88c:	2137      	movs	r1, #55	; 0x37
 800b88e:	4620      	mov	r0, r4
 800b890:	f7fb f93c 	bl	8006b0c <d_make_comp>
 800b894:	4642      	mov	r2, r8
 800b896:	4603      	mov	r3, r0
 800b898:	2136      	movs	r1, #54	; 0x36
 800b89a:	4620      	mov	r0, r4
 800b89c:	f7fb f936 	bl	8006b0c <d_make_comp>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	e732      	b.n	800b70a <d_exprlist+0x112>
 800b8a4:	f1b9 0f00 	cmp.w	r9, #0
 800b8a8:	d006      	beq.n	800b8b8 <d_exprlist+0x2c0>
 800b8aa:	f899 3000 	ldrb.w	r3, [r9]
 800b8ae:	2b70      	cmp	r3, #112	; 0x70
 800b8b0:	f000 8081 	beq.w	800b9b6 <d_exprlist+0x3be>
 800b8b4:	2b6d      	cmp	r3, #109	; 0x6d
 800b8b6:	d07e      	beq.n	800b9b6 <d_exprlist+0x3be>
 800b8b8:	f1ba 0f33 	cmp.w	sl, #51	; 0x33
 800b8bc:	68e1      	ldr	r1, [r4, #12]
 800b8be:	d074      	beq.n	800b9aa <d_exprlist+0x3b2>
 800b8c0:	780b      	ldrb	r3, [r1, #0]
 800b8c2:	f04f 0a00 	mov.w	sl, #0
 800b8c6:	2b4c      	cmp	r3, #76	; 0x4c
 800b8c8:	f000 8453 	beq.w	800c172 <d_exprlist+0xb7a>
 800b8cc:	2b54      	cmp	r3, #84	; 0x54
 800b8ce:	f000 8466 	beq.w	800c19e <d_exprlist+0xba6>
 800b8d2:	2b73      	cmp	r3, #115	; 0x73
 800b8d4:	f000 8105 	beq.w	800bae2 <d_exprlist+0x4ea>
 800b8d8:	2b66      	cmp	r3, #102	; 0x66
 800b8da:	f000 811c 	beq.w	800bb16 <d_exprlist+0x51e>
 800b8de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b8e2:	2a09      	cmp	r2, #9
 800b8e4:	f201 82b2 	bhi.w	800ce4c <d_exprlist+0x1854>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f002 f971 	bl	800dbd0 <d_unqualified_name>
 800b8ee:	4681      	mov	r9, r0
 800b8f0:	b120      	cbz	r0, 800b8fc <d_exprlist+0x304>
 800b8f2:	68e3      	ldr	r3, [r4, #12]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b49      	cmp	r3, #73	; 0x49
 800b8f8:	f000 8185 	beq.w	800bc06 <d_exprlist+0x60e>
 800b8fc:	f1ba 0f00 	cmp.w	sl, #0
 800b900:	d06d      	beq.n	800b9de <d_exprlist+0x3e6>
 800b902:	464b      	mov	r3, r9
 800b904:	464a      	mov	r2, r9
 800b906:	2137      	movs	r1, #55	; 0x37
 800b908:	4620      	mov	r0, r4
 800b90a:	f7fb f8ff 	bl	8006b0c <d_make_comp>
 800b90e:	4603      	mov	r3, r0
 800b910:	4642      	mov	r2, r8
 800b912:	2135      	movs	r1, #53	; 0x35
 800b914:	4620      	mov	r0, r4
 800b916:	f7fb f8f9 	bl	8006b0c <d_make_comp>
 800b91a:	4602      	mov	r2, r0
 800b91c:	e6f5      	b.n	800b70a <d_exprlist+0x112>
 800b91e:	3202      	adds	r2, #2
 800b920:	60e2      	str	r2, [r4, #12]
 800b922:	4620      	mov	r0, r4
 800b924:	f001 fcd8 	bl	800d2d8 <d_type>
 800b928:	4681      	mov	r9, r0
 800b92a:	4620      	mov	r0, r4
 800b92c:	f002 f950 	bl	800dbd0 <d_unqualified_name>
 800b930:	68e3      	ldr	r3, [r4, #12]
 800b932:	4682      	mov	sl, r0
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	2b49      	cmp	r3, #73	; 0x49
 800b938:	f000 80bf 	beq.w	800baba <d_exprlist+0x4c2>
 800b93c:	4603      	mov	r3, r0
 800b93e:	464a      	mov	r2, r9
 800b940:	4641      	mov	r1, r8
 800b942:	4620      	mov	r0, r4
 800b944:	f7fb f8e2 	bl	8006b0c <d_make_comp>
 800b948:	4602      	mov	r2, r0
 800b94a:	e6de      	b.n	800b70a <d_exprlist+0x112>
 800b94c:	9803      	ldr	r0, [sp, #12]
 800b94e:	3201      	adds	r2, #1
 800b950:	60e2      	str	r2, [r4, #12]
 800b952:	b005      	add	sp, #20
 800b954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b958:	1c91      	adds	r1, r2, #2
 800b95a:	60e1      	str	r1, [r4, #12]
 800b95c:	7893      	ldrb	r3, [r2, #2]
 800b95e:	2b4c      	cmp	r3, #76	; 0x4c
 800b960:	f000 814c 	beq.w	800bbfc <d_exprlist+0x604>
 800b964:	2b54      	cmp	r3, #84	; 0x54
 800b966:	f000 857d 	beq.w	800c464 <d_exprlist+0xe6c>
 800b96a:	2b73      	cmp	r3, #115	; 0x73
 800b96c:	f000 82e7 	beq.w	800bf3e <d_exprlist+0x946>
 800b970:	2b66      	cmp	r3, #102	; 0x66
 800b972:	f000 83a5 	beq.w	800c0c0 <d_exprlist+0xac8>
 800b976:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800b97a:	2809      	cmp	r0, #9
 800b97c:	f201 820c 	bhi.w	800cd98 <d_exprlist+0x17a0>
 800b980:	4620      	mov	r0, r4
 800b982:	f002 f925 	bl	800dbd0 <d_unqualified_name>
 800b986:	4680      	mov	r8, r0
 800b988:	2800      	cmp	r0, #0
 800b98a:	f000 83fd 	beq.w	800c188 <d_exprlist+0xb90>
 800b98e:	68e3      	ldr	r3, [r4, #12]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b49      	cmp	r3, #73	; 0x49
 800b994:	f000 8639 	beq.w	800c60a <d_exprlist+0x1012>
 800b998:	4602      	mov	r2, r0
 800b99a:	2300      	movs	r3, #0
 800b99c:	2149      	movs	r1, #73	; 0x49
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f7fb f8b4 	bl	8006b0c <d_make_comp>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	e6b0      	b.n	800b70a <d_exprlist+0x112>
 800b9a8:	68e1      	ldr	r1, [r4, #12]
 800b9aa:	780b      	ldrb	r3, [r1, #0]
 800b9ac:	2b5f      	cmp	r3, #95	; 0x5f
 800b9ae:	d00f      	beq.n	800b9d0 <d_exprlist+0x3d8>
 800b9b0:	f04f 0a00 	mov.w	sl, #0
 800b9b4:	e787      	b.n	800b8c6 <d_exprlist+0x2ce>
 800b9b6:	f899 2001 	ldrb.w	r2, [r9, #1]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	f47f af7c 	bne.w	800b8b8 <d_exprlist+0x2c0>
 800b9c0:	68e1      	ldr	r1, [r4, #12]
 800b9c2:	780b      	ldrb	r3, [r1, #0]
 800b9c4:	2b5f      	cmp	r3, #95	; 0x5f
 800b9c6:	f000 85b8 	beq.w	800c53a <d_exprlist+0xf42>
 800b9ca:	f04f 0a01 	mov.w	sl, #1
 800b9ce:	e77a      	b.n	800b8c6 <d_exprlist+0x2ce>
 800b9d0:	3101      	adds	r1, #1
 800b9d2:	60e1      	str	r1, [r4, #12]
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	2145      	movs	r1, #69	; 0x45
 800b9d8:	f7ff fe0e 	bl	800b5f8 <d_exprlist>
 800b9dc:	4681      	mov	r9, r0
 800b9de:	464b      	mov	r3, r9
 800b9e0:	e796      	b.n	800b910 <d_exprlist+0x318>
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f001 fc78 	bl	800d2d8 <d_type>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	e791      	b.n	800b910 <d_exprlist+0x318>
 800b9ec:	08015cc8 	.word	0x08015cc8
 800b9f0:	080159c0 	.word	0x080159c0
 800b9f4:	080159b8 	.word	0x080159b8
 800b9f8:	08015ad4 	.word	0x08015ad4
 800b9fc:	08015ad8 	.word	0x08015ad8
 800ba00:	4620      	mov	r0, r4
 800ba02:	f001 fa97 	bl	800cf34 <d_expression_1>
 800ba06:	4682      	mov	sl, r0
 800ba08:	68e0      	ldr	r0, [r4, #12]
 800ba0a:	7803      	ldrb	r3, [r0, #0]
 800ba0c:	2b4c      	cmp	r3, #76	; 0x4c
 800ba0e:	f000 861f 	beq.w	800c650 <d_exprlist+0x1058>
 800ba12:	2b54      	cmp	r3, #84	; 0x54
 800ba14:	f000 8636 	beq.w	800c684 <d_exprlist+0x108c>
 800ba18:	2b73      	cmp	r3, #115	; 0x73
 800ba1a:	f000 84a6 	beq.w	800c36a <d_exprlist+0xd72>
 800ba1e:	2b66      	cmp	r3, #102	; 0x66
 800ba20:	f000 80ac 	beq.w	800bb7c <d_exprlist+0x584>
 800ba24:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ba28:	2909      	cmp	r1, #9
 800ba2a:	f201 819a 	bhi.w	800cd62 <d_exprlist+0x176a>
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f002 f8ce 	bl	800dbd0 <d_unqualified_name>
 800ba34:	68e2      	ldr	r2, [r4, #12]
 800ba36:	4681      	mov	r9, r0
 800ba38:	7813      	ldrb	r3, [r2, #0]
 800ba3a:	b110      	cbz	r0, 800ba42 <d_exprlist+0x44a>
 800ba3c:	2b49      	cmp	r3, #73	; 0x49
 800ba3e:	f000 86f5 	beq.w	800c82c <d_exprlist+0x1234>
 800ba42:	2b4c      	cmp	r3, #76	; 0x4c
 800ba44:	f000 85ed 	beq.w	800c622 <d_exprlist+0x102a>
 800ba48:	2b54      	cmp	r3, #84	; 0x54
 800ba4a:	f000 8609 	beq.w	800c660 <d_exprlist+0x1068>
 800ba4e:	2b73      	cmp	r3, #115	; 0x73
 800ba50:	f000 83cc 	beq.w	800c1ec <d_exprlist+0xbf4>
 800ba54:	2b66      	cmp	r3, #102	; 0x66
 800ba56:	f000 8498 	beq.w	800c38a <d_exprlist+0xd92>
 800ba5a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ba5e:	2909      	cmp	r1, #9
 800ba60:	f201 812f 	bhi.w	800ccc2 <d_exprlist+0x16ca>
 800ba64:	4620      	mov	r0, r4
 800ba66:	f002 f8b3 	bl	800dbd0 <d_unqualified_name>
 800ba6a:	4683      	mov	fp, r0
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	f43f aeb3 	beq.w	800b7d8 <d_exprlist+0x1e0>
 800ba72:	68e3      	ldr	r3, [r4, #12]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b49      	cmp	r3, #73	; 0x49
 800ba78:	f47f aeae 	bne.w	800b7d8 <d_exprlist+0x1e0>
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f7fe ff45 	bl	800a90c <d_template_args>
 800ba82:	465a      	mov	r2, fp
 800ba84:	4603      	mov	r3, r0
 800ba86:	2104      	movs	r1, #4
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f7fb f83f 	bl	8006b0c <d_make_comp>
 800ba8e:	4683      	mov	fp, r0
 800ba90:	e6a2      	b.n	800b7d8 <d_exprlist+0x1e0>
 800ba92:	2145      	movs	r1, #69	; 0x45
 800ba94:	4620      	mov	r0, r4
 800ba96:	f7ff fdaf 	bl	800b5f8 <d_exprlist>
 800ba9a:	4681      	mov	r9, r0
 800ba9c:	e6f4      	b.n	800b888 <d_exprlist+0x290>
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800baa4:	2a01      	cmp	r2, #1
 800baa6:	d903      	bls.n	800bab0 <d_exprlist+0x4b8>
 800baa8:	3b72      	subs	r3, #114	; 0x72
 800baaa:	2b01      	cmp	r3, #1
 800baac:	f63f aeb1 	bhi.w	800b812 <d_exprlist+0x21a>
 800bab0:	4620      	mov	r0, r4
 800bab2:	f001 fc11 	bl	800d2d8 <d_type>
 800bab6:	4682      	mov	sl, r0
 800bab8:	e6ca      	b.n	800b850 <d_exprlist+0x258>
 800baba:	4620      	mov	r0, r4
 800babc:	f7fe ff26 	bl	800a90c <d_template_args>
 800bac0:	4652      	mov	r2, sl
 800bac2:	4603      	mov	r3, r0
 800bac4:	2104      	movs	r1, #4
 800bac6:	4620      	mov	r0, r4
 800bac8:	f7fb f820 	bl	8006b0c <d_make_comp>
 800bacc:	4603      	mov	r3, r0
 800bace:	e736      	b.n	800b93e <d_exprlist+0x346>
 800bad0:	3201      	adds	r2, #1
 800bad2:	60c2      	str	r2, [r0, #12]
 800bad4:	461a      	mov	r2, r3
 800bad6:	212e      	movs	r1, #46	; 0x2e
 800bad8:	b005      	add	sp, #20
 800bada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bade:	f7fb b815 	b.w	8006b0c <d_make_comp>
 800bae2:	784b      	ldrb	r3, [r1, #1]
 800bae4:	2b72      	cmp	r3, #114	; 0x72
 800bae6:	f000 8546 	beq.w	800c576 <d_exprlist+0xf7e>
 800baea:	2b70      	cmp	r3, #112	; 0x70
 800baec:	f000 8614 	beq.w	800c718 <d_exprlist+0x1120>
 800baf0:	4620      	mov	r0, r4
 800baf2:	f001 ffad 	bl	800da50 <d_operator_name>
 800baf6:	4681      	mov	r9, r0
 800baf8:	2800      	cmp	r0, #0
 800bafa:	f43f aeff 	beq.w	800b8fc <d_exprlist+0x304>
 800bafe:	7803      	ldrb	r3, [r0, #0]
 800bb00:	2b31      	cmp	r3, #49	; 0x31
 800bb02:	f000 8352 	beq.w	800c1aa <d_exprlist+0xbb2>
 800bb06:	2b32      	cmp	r3, #50	; 0x32
 800bb08:	d02e      	beq.n	800bb68 <d_exprlist+0x570>
 800bb0a:	2b33      	cmp	r3, #51	; 0x33
 800bb0c:	f000 864c 	beq.w	800c7a8 <d_exprlist+0x11b0>
 800bb10:	f04f 0900 	mov.w	r9, #0
 800bb14:	e6f2      	b.n	800b8fc <d_exprlist+0x304>
 800bb16:	784b      	ldrb	r3, [r1, #1]
 800bb18:	2b70      	cmp	r3, #112	; 0x70
 800bb1a:	d1e9      	bne.n	800baf0 <d_exprlist+0x4f8>
 800bb1c:	1c8b      	adds	r3, r1, #2
 800bb1e:	60e3      	str	r3, [r4, #12]
 800bb20:	788b      	ldrb	r3, [r1, #2]
 800bb22:	2b54      	cmp	r3, #84	; 0x54
 800bb24:	f040 8583 	bne.w	800c62e <d_exprlist+0x1036>
 800bb28:	3103      	adds	r1, #3
 800bb2a:	60e1      	str	r1, [r4, #12]
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	6963      	ldr	r3, [r4, #20]
 800bb30:	69a2      	ldr	r2, [r4, #24]
 800bb32:	4293      	cmp	r3, r2
 800bb34:	daec      	bge.n	800bb10 <d_exprlist+0x518>
 800bb36:	6922      	ldr	r2, [r4, #16]
 800bb38:	1c59      	adds	r1, r3, #1
 800bb3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bb3e:	eb12 0983 	adds.w	r9, r2, r3, lsl #2
 800bb42:	6161      	str	r1, [r4, #20]
 800bb44:	f43f aeda 	beq.w	800b8fc <d_exprlist+0x304>
 800bb48:	2106      	movs	r1, #6
 800bb4a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800bb4e:	f8c9 0004 	str.w	r0, [r9, #4]
 800bb52:	e6d3      	b.n	800b8fc <d_exprlist+0x304>
 800bb54:	4620      	mov	r0, r4
 800bb56:	f001 f9ed 	bl	800cf34 <d_expression_1>
 800bb5a:	4681      	mov	r9, r0
 800bb5c:	e694      	b.n	800b888 <d_exprlist+0x290>
 800bb5e:	3301      	adds	r3, #1
 800bb60:	60e3      	str	r3, [r4, #12]
 800bb62:	f04f 0b00 	mov.w	fp, #0
 800bb66:	e637      	b.n	800b7d8 <d_exprlist+0x1e0>
 800bb68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d8cf      	bhi.n	800bb10 <d_exprlist+0x518>
 800bb70:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb74:	04cc0059 	.word	0x04cc0059
 800bb78:	006100a5 	.word	0x006100a5
 800bb7c:	7843      	ldrb	r3, [r0, #1]
 800bb7e:	2b70      	cmp	r3, #112	; 0x70
 800bb80:	f000 85d8 	beq.w	800c734 <d_exprlist+0x113c>
 800bb84:	4620      	mov	r0, r4
 800bb86:	f001 ff63 	bl	800da50 <d_operator_name>
 800bb8a:	4681      	mov	r9, r0
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f000 8157 	beq.w	800be40 <d_exprlist+0x848>
 800bb92:	7803      	ldrb	r3, [r0, #0]
 800bb94:	2b31      	cmp	r3, #49	; 0x31
 800bb96:	f000 859f 	beq.w	800c6d8 <d_exprlist+0x10e0>
 800bb9a:	2b32      	cmp	r3, #50	; 0x32
 800bb9c:	f040 84d1 	bne.w	800c542 <d_exprlist+0xf4a>
 800bba0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	f200 8489 	bhi.w	800c4bc <d_exprlist+0xec4>
 800bbaa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bbae:	0142      	.short	0x0142
 800bbb0:	018c04d1 	.word	0x018c04d1
 800bbb4:	014c      	.short	0x014c
 800bbb6:	2b6f      	cmp	r3, #111	; 0x6f
 800bbb8:	f000 8446 	beq.w	800c448 <d_exprlist+0xe50>
 800bbbc:	2b69      	cmp	r3, #105	; 0x69
 800bbbe:	f041 8177 	bne.w	800ceb0 <d_exprlist+0x18b8>
 800bbc2:	784b      	ldrb	r3, [r1, #1]
 800bbc4:	2b6c      	cmp	r3, #108	; 0x6c
 800bbc6:	f001 80bb 	beq.w	800cd40 <d_exprlist+0x1748>
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f001 ff40 	bl	800da50 <d_operator_name>
 800bbd0:	4682      	mov	sl, r0
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	f000 82df 	beq.w	800c196 <d_exprlist+0xb9e>
 800bbd8:	7803      	ldrb	r3, [r0, #0]
 800bbda:	2b31      	cmp	r3, #49	; 0x31
 800bbdc:	f000 8474 	beq.w	800c4c8 <d_exprlist+0xed0>
 800bbe0:	2b32      	cmp	r3, #50	; 0x32
 800bbe2:	f040 8412 	bne.w	800c40a <d_exprlist+0xe12>
 800bbe6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	f200 82d3 	bhi.w	800c196 <d_exprlist+0xb9e>
 800bbf0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bbf4:	0413009c 	.word	0x0413009c
 800bbf8:	00a400e8 	.word	0x00a400e8
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f002 fe63 	bl	800e8c8 <d_expr_primary>
 800bc02:	4602      	mov	r2, r0
 800bc04:	e6c9      	b.n	800b99a <d_exprlist+0x3a2>
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7fe fe80 	bl	800a90c <d_template_args>
 800bc0c:	464a      	mov	r2, r9
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2104      	movs	r1, #4
 800bc12:	4620      	mov	r0, r4
 800bc14:	f7fa ff7a 	bl	8006b0c <d_make_comp>
 800bc18:	4681      	mov	r9, r0
 800bc1a:	e66f      	b.n	800b8fc <d_exprlist+0x304>
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f7fb f917 	bl	8006e50 <d_template_param>
 800bc22:	4682      	mov	sl, r0
 800bc24:	e614      	b.n	800b850 <d_exprlist+0x258>
 800bc26:	464a      	mov	r2, r9
 800bc28:	2300      	movs	r3, #0
 800bc2a:	2134      	movs	r1, #52	; 0x34
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f7fa ff6d 	bl	8006b0c <d_make_comp>
 800bc32:	4681      	mov	r9, r0
 800bc34:	e662      	b.n	800b8fc <d_exprlist+0x304>
 800bc36:	f04f 0b00 	mov.w	fp, #0
 800bc3a:	49d1      	ldr	r1, [pc, #836]	; (800bf80 <d_exprlist+0x988>)
 800bc3c:	4658      	mov	r0, fp
 800bc3e:	f003 f8bd 	bl	800edbc <strcmp>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	f000 8621 	beq.w	800c88a <d_exprlist+0x1292>
 800bc48:	f89b 2000 	ldrb.w	r2, [fp]
 800bc4c:	2a6e      	cmp	r2, #110	; 0x6e
 800bc4e:	f47f af5f 	bne.w	800bb10 <d_exprlist+0x518>
 800bc52:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bc56:	2b77      	cmp	r3, #119	; 0x77
 800bc58:	d002      	beq.n	800bc60 <d_exprlist+0x668>
 800bc5a:	2b61      	cmp	r3, #97	; 0x61
 800bc5c:	f47f af58 	bne.w	800bb10 <d_exprlist+0x518>
 800bc60:	215f      	movs	r1, #95	; 0x5f
 800bc62:	4620      	mov	r0, r4
 800bc64:	f7ff fcc8 	bl	800b5f8 <d_exprlist>
 800bc68:	9000      	str	r0, [sp, #0]
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	f001 fb34 	bl	800d2d8 <d_type>
 800bc70:	68e3      	ldr	r3, [r4, #12]
 800bc72:	4683      	mov	fp, r0
 800bc74:	781a      	ldrb	r2, [r3, #0]
 800bc76:	2a45      	cmp	r2, #69	; 0x45
 800bc78:	f000 8744 	beq.w	800cb04 <d_exprlist+0x150c>
 800bc7c:	2a70      	cmp	r2, #112	; 0x70
 800bc7e:	f000 8798 	beq.w	800cbb2 <d_exprlist+0x15ba>
 800bc82:	2a69      	cmp	r2, #105	; 0x69
 800bc84:	f47f af44 	bne.w	800bb10 <d_exprlist+0x518>
 800bc88:	785b      	ldrb	r3, [r3, #1]
 800bc8a:	2b6c      	cmp	r3, #108	; 0x6c
 800bc8c:	f47f af40 	bne.w	800bb10 <d_exprlist+0x518>
 800bc90:	4620      	mov	r0, r4
 800bc92:	f001 f94f 	bl	800cf34 <d_expression_1>
 800bc96:	4603      	mov	r3, r0
 800bc98:	465a      	mov	r2, fp
 800bc9a:	213a      	movs	r1, #58	; 0x3a
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f7fa ff35 	bl	8006b0c <d_make_comp>
 800bca2:	9a00      	ldr	r2, [sp, #0]
 800bca4:	4603      	mov	r3, r0
 800bca6:	2139      	movs	r1, #57	; 0x39
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f7fa ff2f 	bl	8006b0c <d_make_comp>
 800bcae:	464a      	mov	r2, r9
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2138      	movs	r1, #56	; 0x38
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f7fa ff29 	bl	8006b0c <d_make_comp>
 800bcba:	4681      	mov	r9, r0
 800bcbc:	e61e      	b.n	800b8fc <d_exprlist+0x304>
 800bcbe:	f04f 0b00 	mov.w	fp, #0
 800bcc2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bcc6:	6812      	ldr	r2, [r2, #0]
 800bcc8:	7851      	ldrb	r1, [r2, #1]
 800bcca:	2963      	cmp	r1, #99	; 0x63
 800bccc:	f000 85ce 	beq.w	800c86c <d_exprlist+0x1274>
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f001 f92f 	bl	800cf34 <d_expression_1>
 800bcd6:	9000      	str	r0, [sp, #0]
 800bcd8:	49aa      	ldr	r1, [pc, #680]	; (800bf84 <d_exprlist+0x98c>)
 800bcda:	4658      	mov	r0, fp
 800bcdc:	f003 f86e 	bl	800edbc <strcmp>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	f000 8631 	beq.w	800c948 <d_exprlist+0x1350>
 800bce6:	49a8      	ldr	r1, [pc, #672]	; (800bf88 <d_exprlist+0x990>)
 800bce8:	4658      	mov	r0, fp
 800bcea:	f003 f867 	bl	800edbc <strcmp>
 800bcee:	b130      	cbz	r0, 800bcfe <d_exprlist+0x706>
 800bcf0:	4658      	mov	r0, fp
 800bcf2:	49a6      	ldr	r1, [pc, #664]	; (800bf8c <d_exprlist+0x994>)
 800bcf4:	f003 f862 	bl	800edbc <strcmp>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	f040 86dc 	bne.w	800cab6 <d_exprlist+0x14be>
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f001 ff66 	bl	800dbd0 <d_unqualified_name>
 800bd04:	68e3      	ldr	r3, [r4, #12]
 800bd06:	4683      	mov	fp, r0
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b49      	cmp	r3, #73	; 0x49
 800bd0c:	f000 86d9 	beq.w	800cac2 <d_exprlist+0x14ca>
 800bd10:	465b      	mov	r3, fp
 800bd12:	9a00      	ldr	r2, [sp, #0]
 800bd14:	2137      	movs	r1, #55	; 0x37
 800bd16:	4620      	mov	r0, r4
 800bd18:	f7fa fef8 	bl	8006b0c <d_make_comp>
 800bd1c:	464a      	mov	r2, r9
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2136      	movs	r1, #54	; 0x36
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7fa fef2 	bl	8006b0c <d_make_comp>
 800bd28:	4681      	mov	r9, r0
 800bd2a:	e5e7      	b.n	800b8fc <d_exprlist+0x304>
 800bd2c:	4652      	mov	r2, sl
 800bd2e:	2300      	movs	r3, #0
 800bd30:	2134      	movs	r1, #52	; 0x34
 800bd32:	4620      	mov	r0, r4
 800bd34:	f7fa feea 	bl	8006b0c <d_make_comp>
 800bd38:	4682      	mov	sl, r0
 800bd3a:	e589      	b.n	800b850 <d_exprlist+0x258>
 800bd3c:	f04f 0b00 	mov.w	fp, #0
 800bd40:	498f      	ldr	r1, [pc, #572]	; (800bf80 <d_exprlist+0x988>)
 800bd42:	4658      	mov	r0, fp
 800bd44:	f003 f83a 	bl	800edbc <strcmp>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	f000 86c6 	beq.w	800cada <d_exprlist+0x14e2>
 800bd4e:	f89b 2000 	ldrb.w	r2, [fp]
 800bd52:	2a6e      	cmp	r2, #110	; 0x6e
 800bd54:	f040 821f 	bne.w	800c196 <d_exprlist+0xb9e>
 800bd58:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800bd5c:	2b77      	cmp	r3, #119	; 0x77
 800bd5e:	d002      	beq.n	800bd66 <d_exprlist+0x76e>
 800bd60:	2b61      	cmp	r3, #97	; 0x61
 800bd62:	f040 8218 	bne.w	800c196 <d_exprlist+0xb9e>
 800bd66:	215f      	movs	r1, #95	; 0x5f
 800bd68:	4620      	mov	r0, r4
 800bd6a:	f7ff fc45 	bl	800b5f8 <d_exprlist>
 800bd6e:	9000      	str	r0, [sp, #0]
 800bd70:	4620      	mov	r0, r4
 800bd72:	f001 fab1 	bl	800d2d8 <d_type>
 800bd76:	68e3      	ldr	r3, [r4, #12]
 800bd78:	4683      	mov	fp, r0
 800bd7a:	781a      	ldrb	r2, [r3, #0]
 800bd7c:	2a45      	cmp	r2, #69	; 0x45
 800bd7e:	f000 86d2 	beq.w	800cb26 <d_exprlist+0x152e>
 800bd82:	2a70      	cmp	r2, #112	; 0x70
 800bd84:	f000 86c3 	beq.w	800cb0e <d_exprlist+0x1516>
 800bd88:	2a69      	cmp	r2, #105	; 0x69
 800bd8a:	f040 8204 	bne.w	800c196 <d_exprlist+0xb9e>
 800bd8e:	785b      	ldrb	r3, [r3, #1]
 800bd90:	2b6c      	cmp	r3, #108	; 0x6c
 800bd92:	f040 8200 	bne.w	800c196 <d_exprlist+0xb9e>
 800bd96:	4620      	mov	r0, r4
 800bd98:	f001 f8cc 	bl	800cf34 <d_expression_1>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	465a      	mov	r2, fp
 800bda0:	213a      	movs	r1, #58	; 0x3a
 800bda2:	4620      	mov	r0, r4
 800bda4:	f7fa feb2 	bl	8006b0c <d_make_comp>
 800bda8:	9a00      	ldr	r2, [sp, #0]
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2139      	movs	r1, #57	; 0x39
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f7fa feac 	bl	8006b0c <d_make_comp>
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2138      	movs	r1, #56	; 0x38
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f7fa fea6 	bl	8006b0c <d_make_comp>
 800bdc0:	4682      	mov	sl, r0
 800bdc2:	e545      	b.n	800b850 <d_exprlist+0x258>
 800bdc4:	f04f 0b00 	mov.w	fp, #0
 800bdc8:	f8da 2004 	ldr.w	r2, [sl, #4]
 800bdcc:	6812      	ldr	r2, [r2, #0]
 800bdce:	7851      	ldrb	r1, [r2, #1]
 800bdd0:	2963      	cmp	r1, #99	; 0x63
 800bdd2:	f000 8634 	beq.w	800ca3e <d_exprlist+0x1446>
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f001 f8ac 	bl	800cf34 <d_expression_1>
 800bddc:	9000      	str	r0, [sp, #0]
 800bdde:	4969      	ldr	r1, [pc, #420]	; (800bf84 <d_exprlist+0x98c>)
 800bde0:	4658      	mov	r0, fp
 800bde2:	f002 ffeb 	bl	800edbc <strcmp>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	f000 8643 	beq.w	800ca72 <d_exprlist+0x147a>
 800bdec:	4966      	ldr	r1, [pc, #408]	; (800bf88 <d_exprlist+0x990>)
 800bdee:	4658      	mov	r0, fp
 800bdf0:	f002 ffe4 	bl	800edbc <strcmp>
 800bdf4:	b130      	cbz	r0, 800be04 <d_exprlist+0x80c>
 800bdf6:	4658      	mov	r0, fp
 800bdf8:	4964      	ldr	r1, [pc, #400]	; (800bf8c <d_exprlist+0x994>)
 800bdfa:	f002 ffdf 	bl	800edbc <strcmp>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	f040 8696 	bne.w	800cb30 <d_exprlist+0x1538>
 800be04:	4620      	mov	r0, r4
 800be06:	f001 fee3 	bl	800dbd0 <d_unqualified_name>
 800be0a:	68e3      	ldr	r3, [r4, #12]
 800be0c:	4683      	mov	fp, r0
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	2b49      	cmp	r3, #73	; 0x49
 800be12:	f000 86da 	beq.w	800cbca <d_exprlist+0x15d2>
 800be16:	465b      	mov	r3, fp
 800be18:	9a00      	ldr	r2, [sp, #0]
 800be1a:	2137      	movs	r1, #55	; 0x37
 800be1c:	4620      	mov	r0, r4
 800be1e:	f7fa fe75 	bl	8006b0c <d_make_comp>
 800be22:	4652      	mov	r2, sl
 800be24:	4603      	mov	r3, r0
 800be26:	2136      	movs	r1, #54	; 0x36
 800be28:	4620      	mov	r0, r4
 800be2a:	f7fa fe6f 	bl	8006b0c <d_make_comp>
 800be2e:	4682      	mov	sl, r0
 800be30:	e50e      	b.n	800b850 <d_exprlist+0x258>
 800be32:	464a      	mov	r2, r9
 800be34:	2300      	movs	r3, #0
 800be36:	2134      	movs	r1, #52	; 0x34
 800be38:	4620      	mov	r0, r4
 800be3a:	f7fa fe67 	bl	8006b0c <d_make_comp>
 800be3e:	4681      	mov	r9, r0
 800be40:	68e2      	ldr	r2, [r4, #12]
 800be42:	7813      	ldrb	r3, [r2, #0]
 800be44:	e5fd      	b.n	800ba42 <d_exprlist+0x44a>
 800be46:	f04f 0b00 	mov.w	fp, #0
 800be4a:	494d      	ldr	r1, [pc, #308]	; (800bf80 <d_exprlist+0x988>)
 800be4c:	4658      	mov	r0, fp
 800be4e:	f002 ffb5 	bl	800edbc <strcmp>
 800be52:	2800      	cmp	r0, #0
 800be54:	f000 86e7 	beq.w	800cc26 <d_exprlist+0x162e>
 800be58:	f89b 2000 	ldrb.w	r2, [fp]
 800be5c:	2a6e      	cmp	r2, #110	; 0x6e
 800be5e:	f040 832d 	bne.w	800c4bc <d_exprlist+0xec4>
 800be62:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800be66:	2b77      	cmp	r3, #119	; 0x77
 800be68:	d002      	beq.n	800be70 <d_exprlist+0x878>
 800be6a:	2b61      	cmp	r3, #97	; 0x61
 800be6c:	f040 8326 	bne.w	800c4bc <d_exprlist+0xec4>
 800be70:	215f      	movs	r1, #95	; 0x5f
 800be72:	4620      	mov	r0, r4
 800be74:	f7ff fbc0 	bl	800b5f8 <d_exprlist>
 800be78:	9000      	str	r0, [sp, #0]
 800be7a:	4620      	mov	r0, r4
 800be7c:	f001 fa2c 	bl	800d2d8 <d_type>
 800be80:	68e2      	ldr	r2, [r4, #12]
 800be82:	4683      	mov	fp, r0
 800be84:	7813      	ldrb	r3, [r2, #0]
 800be86:	2b45      	cmp	r3, #69	; 0x45
 800be88:	f000 86da 	beq.w	800cc40 <d_exprlist+0x1648>
 800be8c:	2b70      	cmp	r3, #112	; 0x70
 800be8e:	f000 87c2 	beq.w	800ce16 <d_exprlist+0x181e>
 800be92:	2b69      	cmp	r3, #105	; 0x69
 800be94:	f041 804a 	bne.w	800cf2c <d_exprlist+0x1934>
 800be98:	7853      	ldrb	r3, [r2, #1]
 800be9a:	2b6c      	cmp	r3, #108	; 0x6c
 800be9c:	f041 8043 	bne.w	800cf26 <d_exprlist+0x192e>
 800bea0:	4620      	mov	r0, r4
 800bea2:	f001 f847 	bl	800cf34 <d_expression_1>
 800bea6:	4603      	mov	r3, r0
 800bea8:	465a      	mov	r2, fp
 800beaa:	213a      	movs	r1, #58	; 0x3a
 800beac:	4620      	mov	r0, r4
 800beae:	f7fa fe2d 	bl	8006b0c <d_make_comp>
 800beb2:	9a00      	ldr	r2, [sp, #0]
 800beb4:	4603      	mov	r3, r0
 800beb6:	2139      	movs	r1, #57	; 0x39
 800beb8:	4620      	mov	r0, r4
 800beba:	f7fa fe27 	bl	8006b0c <d_make_comp>
 800bebe:	464a      	mov	r2, r9
 800bec0:	4603      	mov	r3, r0
 800bec2:	2138      	movs	r1, #56	; 0x38
 800bec4:	e7b8      	b.n	800be38 <d_exprlist+0x840>
 800bec6:	f04f 0b00 	mov.w	fp, #0
 800beca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800bece:	6812      	ldr	r2, [r2, #0]
 800bed0:	7851      	ldrb	r1, [r2, #1]
 800bed2:	2963      	cmp	r1, #99	; 0x63
 800bed4:	f000 865e 	beq.w	800cb94 <d_exprlist+0x159c>
 800bed8:	4620      	mov	r0, r4
 800beda:	f001 f82b 	bl	800cf34 <d_expression_1>
 800bede:	9000      	str	r0, [sp, #0]
 800bee0:	4928      	ldr	r1, [pc, #160]	; (800bf84 <d_exprlist+0x98c>)
 800bee2:	4658      	mov	r0, fp
 800bee4:	f002 ff6a 	bl	800edbc <strcmp>
 800bee8:	2800      	cmp	r0, #0
 800beea:	f000 864c 	beq.w	800cb86 <d_exprlist+0x158e>
 800beee:	4926      	ldr	r1, [pc, #152]	; (800bf88 <d_exprlist+0x990>)
 800bef0:	4658      	mov	r0, fp
 800bef2:	f002 ff63 	bl	800edbc <strcmp>
 800bef6:	b130      	cbz	r0, 800bf06 <d_exprlist+0x90e>
 800bef8:	4658      	mov	r0, fp
 800befa:	4924      	ldr	r1, [pc, #144]	; (800bf8c <d_exprlist+0x994>)
 800befc:	f002 ff5e 	bl	800edbc <strcmp>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f040 861b 	bne.w	800cb3c <d_exprlist+0x1544>
 800bf06:	4620      	mov	r0, r4
 800bf08:	f001 fe62 	bl	800dbd0 <d_unqualified_name>
 800bf0c:	68e3      	ldr	r3, [r4, #12]
 800bf0e:	4683      	mov	fp, r0
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b49      	cmp	r3, #73	; 0x49
 800bf14:	d109      	bne.n	800bf2a <d_exprlist+0x932>
 800bf16:	4620      	mov	r0, r4
 800bf18:	f7fe fcf8 	bl	800a90c <d_template_args>
 800bf1c:	465a      	mov	r2, fp
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2104      	movs	r1, #4
 800bf22:	4620      	mov	r0, r4
 800bf24:	f7fa fdf2 	bl	8006b0c <d_make_comp>
 800bf28:	4683      	mov	fp, r0
 800bf2a:	465b      	mov	r3, fp
 800bf2c:	9a00      	ldr	r2, [sp, #0]
 800bf2e:	2137      	movs	r1, #55	; 0x37
 800bf30:	4620      	mov	r0, r4
 800bf32:	f7fa fdeb 	bl	8006b0c <d_make_comp>
 800bf36:	464a      	mov	r2, r9
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2136      	movs	r1, #54	; 0x36
 800bf3c:	e77c      	b.n	800be38 <d_exprlist+0x840>
 800bf3e:	78d3      	ldrb	r3, [r2, #3]
 800bf40:	2b72      	cmp	r3, #114	; 0x72
 800bf42:	f000 8456 	beq.w	800c7f2 <d_exprlist+0x11fa>
 800bf46:	2b70      	cmp	r3, #112	; 0x70
 800bf48:	f000 84ac 	beq.w	800c8a4 <d_exprlist+0x12ac>
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f001 fd7f 	bl	800da50 <d_operator_name>
 800bf52:	4680      	mov	r8, r0
 800bf54:	2800      	cmp	r0, #0
 800bf56:	f000 8117 	beq.w	800c188 <d_exprlist+0xb90>
 800bf5a:	7803      	ldrb	r3, [r0, #0]
 800bf5c:	2b31      	cmp	r3, #49	; 0x31
 800bf5e:	f000 828b 	beq.w	800c478 <d_exprlist+0xe80>
 800bf62:	2b32      	cmp	r3, #50	; 0x32
 800bf64:	f040 8232 	bne.w	800c3cc <d_exprlist+0xdd4>
 800bf68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf6c:	2b03      	cmp	r3, #3
 800bf6e:	f200 810b 	bhi.w	800c188 <d_exprlist+0xb90>
 800bf72:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bf76:	000d      	.short	0x000d
 800bf78:	00590233 	.word	0x00590233
 800bf7c:	0015      	.short	0x0015
 800bf7e:	bf00      	nop
 800bf80:	080159c0 	.word	0x080159c0
 800bf84:	080159b8 	.word	0x080159b8
 800bf88:	08015ad4 	.word	0x08015ad4
 800bf8c:	08015ad8 	.word	0x08015ad8
 800bf90:	4642      	mov	r2, r8
 800bf92:	2300      	movs	r3, #0
 800bf94:	2134      	movs	r1, #52	; 0x34
 800bf96:	4620      	mov	r0, r4
 800bf98:	f7fa fdb8 	bl	8006b0c <d_make_comp>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	e4fc      	b.n	800b99a <d_exprlist+0x3a2>
 800bfa0:	f04f 0900 	mov.w	r9, #0
 800bfa4:	49c8      	ldr	r1, [pc, #800]	; (800c2c8 <d_exprlist+0xcd0>)
 800bfa6:	4648      	mov	r0, r9
 800bfa8:	f002 ff08 	bl	800edbc <strcmp>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	f000 8575 	beq.w	800ca9c <d_exprlist+0x14a4>
 800bfb2:	f899 3000 	ldrb.w	r3, [r9]
 800bfb6:	2b6e      	cmp	r3, #110	; 0x6e
 800bfb8:	f040 80e6 	bne.w	800c188 <d_exprlist+0xb90>
 800bfbc:	f899 3001 	ldrb.w	r3, [r9, #1]
 800bfc0:	2b77      	cmp	r3, #119	; 0x77
 800bfc2:	d002      	beq.n	800bfca <d_exprlist+0x9d2>
 800bfc4:	2b61      	cmp	r3, #97	; 0x61
 800bfc6:	f040 80df 	bne.w	800c188 <d_exprlist+0xb90>
 800bfca:	215f      	movs	r1, #95	; 0x5f
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7ff fb13 	bl	800b5f8 <d_exprlist>
 800bfd2:	4681      	mov	r9, r0
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f001 f97f 	bl	800d2d8 <d_type>
 800bfda:	68e3      	ldr	r3, [r4, #12]
 800bfdc:	4682      	mov	sl, r0
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	2a45      	cmp	r2, #69	; 0x45
 800bfe2:	f000 85cb 	beq.w	800cb7c <d_exprlist+0x1584>
 800bfe6:	2a70      	cmp	r2, #112	; 0x70
 800bfe8:	f000 85bc 	beq.w	800cb64 <d_exprlist+0x156c>
 800bfec:	2a69      	cmp	r2, #105	; 0x69
 800bfee:	f040 80cb 	bne.w	800c188 <d_exprlist+0xb90>
 800bff2:	785b      	ldrb	r3, [r3, #1]
 800bff4:	2b6c      	cmp	r3, #108	; 0x6c
 800bff6:	f040 80c7 	bne.w	800c188 <d_exprlist+0xb90>
 800bffa:	4620      	mov	r0, r4
 800bffc:	f000 ff9a 	bl	800cf34 <d_expression_1>
 800c000:	4603      	mov	r3, r0
 800c002:	4652      	mov	r2, sl
 800c004:	213a      	movs	r1, #58	; 0x3a
 800c006:	4620      	mov	r0, r4
 800c008:	f7fa fd80 	bl	8006b0c <d_make_comp>
 800c00c:	464a      	mov	r2, r9
 800c00e:	4603      	mov	r3, r0
 800c010:	2139      	movs	r1, #57	; 0x39
 800c012:	4620      	mov	r0, r4
 800c014:	f7fa fd7a 	bl	8006b0c <d_make_comp>
 800c018:	4642      	mov	r2, r8
 800c01a:	4603      	mov	r3, r0
 800c01c:	2138      	movs	r1, #56	; 0x38
 800c01e:	4620      	mov	r0, r4
 800c020:	f7fa fd74 	bl	8006b0c <d_make_comp>
 800c024:	4602      	mov	r2, r0
 800c026:	e4b8      	b.n	800b99a <d_exprlist+0x3a2>
 800c028:	f04f 0900 	mov.w	r9, #0
 800c02c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	785a      	ldrb	r2, [r3, #1]
 800c034:	2a63      	cmp	r2, #99	; 0x63
 800c036:	f000 84dd 	beq.w	800c9f4 <d_exprlist+0x13fc>
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 ff7a 	bl	800cf34 <d_expression_1>
 800c040:	4682      	mov	sl, r0
 800c042:	49a2      	ldr	r1, [pc, #648]	; (800c2cc <d_exprlist+0xcd4>)
 800c044:	4648      	mov	r0, r9
 800c046:	f002 feb9 	bl	800edbc <strcmp>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	f000 84c9 	beq.w	800c9e2 <d_exprlist+0x13ea>
 800c050:	499f      	ldr	r1, [pc, #636]	; (800c2d0 <d_exprlist+0xcd8>)
 800c052:	4648      	mov	r0, r9
 800c054:	f002 feb2 	bl	800edbc <strcmp>
 800c058:	b130      	cbz	r0, 800c068 <d_exprlist+0xa70>
 800c05a:	4648      	mov	r0, r9
 800c05c:	499d      	ldr	r1, [pc, #628]	; (800c2d4 <d_exprlist+0xcdc>)
 800c05e:	f002 fead 	bl	800edbc <strcmp>
 800c062:	2800      	cmp	r0, #0
 800c064:	f040 8578 	bne.w	800cb58 <d_exprlist+0x1560>
 800c068:	4620      	mov	r0, r4
 800c06a:	f001 fdb1 	bl	800dbd0 <d_unqualified_name>
 800c06e:	68e3      	ldr	r3, [r4, #12]
 800c070:	4681      	mov	r9, r0
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2b49      	cmp	r3, #73	; 0x49
 800c076:	f000 85ca 	beq.w	800cc0e <d_exprlist+0x1616>
 800c07a:	464b      	mov	r3, r9
 800c07c:	4652      	mov	r2, sl
 800c07e:	2137      	movs	r1, #55	; 0x37
 800c080:	4620      	mov	r0, r4
 800c082:	f7fa fd43 	bl	8006b0c <d_make_comp>
 800c086:	4642      	mov	r2, r8
 800c088:	4603      	mov	r3, r0
 800c08a:	2136      	movs	r1, #54	; 0x36
 800c08c:	4620      	mov	r0, r4
 800c08e:	f7fa fd3d 	bl	8006b0c <d_make_comp>
 800c092:	4602      	mov	r2, r0
 800c094:	e481      	b.n	800b99a <d_exprlist+0x3a2>
 800c096:	784b      	ldrb	r3, [r1, #1]
 800c098:	2b72      	cmp	r3, #114	; 0x72
 800c09a:	f000 83cf 	beq.w	800c83c <d_exprlist+0x1244>
 800c09e:	2b70      	cmp	r3, #112	; 0x70
 800c0a0:	f47f ad93 	bne.w	800bbca <d_exprlist+0x5d2>
 800c0a4:	3102      	adds	r1, #2
 800c0a6:	60e1      	str	r1, [r4, #12]
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f000 ff43 	bl	800cf34 <d_expression_1>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	2149      	movs	r1, #73	; 0x49
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f7fa fd29 	bl	8006b0c <d_make_comp>
 800c0ba:	4682      	mov	sl, r0
 800c0bc:	f7ff bbc8 	b.w	800b850 <d_exprlist+0x258>
 800c0c0:	78d3      	ldrb	r3, [r2, #3]
 800c0c2:	2b70      	cmp	r3, #112	; 0x70
 800c0c4:	f47f af42 	bne.w	800bf4c <d_exprlist+0x954>
 800c0c8:	1d13      	adds	r3, r2, #4
 800c0ca:	60e3      	str	r3, [r4, #12]
 800c0cc:	7913      	ldrb	r3, [r2, #4]
 800c0ce:	2b54      	cmp	r3, #84	; 0x54
 800c0d0:	d155      	bne.n	800c17e <d_exprlist+0xb86>
 800c0d2:	3205      	adds	r2, #5
 800c0d4:	60e2      	str	r2, [r4, #12]
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	6963      	ldr	r3, [r4, #20]
 800c0da:	69a2      	ldr	r2, [r4, #24]
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	da53      	bge.n	800c188 <d_exprlist+0xb90>
 800c0e0:	6922      	ldr	r2, [r4, #16]
 800c0e2:	1c59      	adds	r1, r3, #1
 800c0e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c0e8:	6161      	str	r1, [r4, #20]
 800c0ea:	eb12 0183 	adds.w	r1, r2, r3, lsl #2
 800c0ee:	f000 8616 	beq.w	800cd1e <d_exprlist+0x1726>
 800c0f2:	f04f 0e06 	mov.w	lr, #6
 800c0f6:	f802 e023 	strb.w	lr, [r2, r3, lsl #2]
 800c0fa:	460a      	mov	r2, r1
 800c0fc:	6048      	str	r0, [r1, #4]
 800c0fe:	e44c      	b.n	800b99a <d_exprlist+0x3a2>
 800c100:	4620      	mov	r0, r4
 800c102:	f7fe fc03 	bl	800a90c <d_template_args>
 800c106:	464a      	mov	r2, r9
 800c108:	4603      	mov	r3, r0
 800c10a:	2104      	movs	r1, #4
 800c10c:	4620      	mov	r0, r4
 800c10e:	f7fa fcfd 	bl	8006b0c <d_make_comp>
 800c112:	4681      	mov	r9, r0
 800c114:	f7ff bbb8 	b.w	800b888 <d_exprlist+0x290>
 800c118:	784b      	ldrb	r3, [r1, #1]
 800c11a:	2b70      	cmp	r3, #112	; 0x70
 800c11c:	f47f ad55 	bne.w	800bbca <d_exprlist+0x5d2>
 800c120:	1c8b      	adds	r3, r1, #2
 800c122:	60e3      	str	r3, [r4, #12]
 800c124:	788b      	ldrb	r3, [r1, #2]
 800c126:	2b54      	cmp	r3, #84	; 0x54
 800c128:	d130      	bne.n	800c18c <d_exprlist+0xb94>
 800c12a:	3103      	adds	r1, #3
 800c12c:	60e1      	str	r1, [r4, #12]
 800c12e:	2000      	movs	r0, #0
 800c130:	6963      	ldr	r3, [r4, #20]
 800c132:	69a2      	ldr	r2, [r4, #24]
 800c134:	4293      	cmp	r3, r2
 800c136:	da2e      	bge.n	800c196 <d_exprlist+0xb9e>
 800c138:	6922      	ldr	r2, [r4, #16]
 800c13a:	1c59      	adds	r1, r3, #1
 800c13c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c140:	eb12 0a83 	adds.w	sl, r2, r3, lsl #2
 800c144:	6161      	str	r1, [r4, #20]
 800c146:	f43f ab83 	beq.w	800b850 <d_exprlist+0x258>
 800c14a:	2106      	movs	r1, #6
 800c14c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800c150:	f8ca 0004 	str.w	r0, [sl, #4]
 800c154:	f7ff bb7c 	b.w	800b850 <d_exprlist+0x258>
 800c158:	785a      	ldrb	r2, [r3, #1]
 800c15a:	2a69      	cmp	r2, #105	; 0x69
 800c15c:	f47f aacc 	bne.w	800b6f8 <d_exprlist+0x100>
 800c160:	3302      	adds	r3, #2
 800c162:	60e3      	str	r3, [r4, #12]
 800c164:	2145      	movs	r1, #69	; 0x45
 800c166:	4620      	mov	r0, r4
 800c168:	f7ff fa46 	bl	800b5f8 <d_exprlist>
 800c16c:	4683      	mov	fp, r0
 800c16e:	f7ff bb33 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c172:	4620      	mov	r0, r4
 800c174:	f002 fba8 	bl	800e8c8 <d_expr_primary>
 800c178:	4681      	mov	r9, r0
 800c17a:	f7ff bbbf 	b.w	800b8fc <d_exprlist+0x304>
 800c17e:	4620      	mov	r0, r4
 800c180:	f7fa fe4e 	bl	8006e20 <d_compact_number>
 800c184:	3001      	adds	r0, #1
 800c186:	d1a7      	bne.n	800c0d8 <d_exprlist+0xae0>
 800c188:	2200      	movs	r2, #0
 800c18a:	e406      	b.n	800b99a <d_exprlist+0x3a2>
 800c18c:	4620      	mov	r0, r4
 800c18e:	f7fa fe47 	bl	8006e20 <d_compact_number>
 800c192:	3001      	adds	r0, #1
 800c194:	d1cc      	bne.n	800c130 <d_exprlist+0xb38>
 800c196:	f04f 0a00 	mov.w	sl, #0
 800c19a:	f7ff bb59 	b.w	800b850 <d_exprlist+0x258>
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f7fa fe56 	bl	8006e50 <d_template_param>
 800c1a4:	4681      	mov	r9, r0
 800c1a6:	f7ff bba9 	b.w	800b8fc <d_exprlist+0x304>
 800c1aa:	6843      	ldr	r3, [r0, #4]
 800c1ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	f8d3 b000 	ldr.w	fp, [r3]
 800c1b4:	3a02      	subs	r2, #2
 800c1b6:	440a      	add	r2, r1
 800c1b8:	6322      	str	r2, [r4, #48]	; 0x30
 800c1ba:	4658      	mov	r0, fp
 800c1bc:	4946      	ldr	r1, [pc, #280]	; (800c2d8 <d_exprlist+0xce0>)
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	f002 fdfc 	bl	800edbc <strcmp>
 800c1c4:	9b00      	ldr	r3, [sp, #0]
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	f000 832b 	beq.w	800c822 <d_exprlist+0x122a>
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	2a03      	cmp	r2, #3
 800c1d0:	f63f ac9e 	bhi.w	800bb10 <d_exprlist+0x518>
 800c1d4:	a301      	add	r3, pc, #4	; (adr r3, 800c1dc <d_exprlist+0xbe4>)
 800c1d6:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c1da:	bf00      	nop
 800c1dc:	0800bc27 	.word	0x0800bc27
 800c1e0:	0800c5e3 	.word	0x0800c5e3
 800c1e4:	0800bcc3 	.word	0x0800bcc3
 800c1e8:	0800bc3b 	.word	0x0800bc3b
 800c1ec:	7853      	ldrb	r3, [r2, #1]
 800c1ee:	2b72      	cmp	r3, #114	; 0x72
 800c1f0:	f000 838a 	beq.w	800c908 <d_exprlist+0x1310>
 800c1f4:	2b70      	cmp	r3, #112	; 0x70
 800c1f6:	f000 8443 	beq.w	800ca80 <d_exprlist+0x1488>
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f001 fc28 	bl	800da50 <d_operator_name>
 800c200:	4683      	mov	fp, r0
 800c202:	2800      	cmp	r0, #0
 800c204:	f43f aae8 	beq.w	800b7d8 <d_exprlist+0x1e0>
 800c208:	7803      	ldrb	r3, [r0, #0]
 800c20a:	2b31      	cmp	r3, #49	; 0x31
 800c20c:	f000 8242 	beq.w	800c694 <d_exprlist+0x109c>
 800c210:	2b32      	cmp	r3, #50	; 0x32
 800c212:	f040 81c8 	bne.w	800c5a6 <d_exprlist+0xfae>
 800c216:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	f200 8128 	bhi.w	800c470 <d_exprlist+0xe78>
 800c220:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c224:	01c90004 	.word	0x01c90004
 800c228:	000d005c 	.word	0x000d005c
 800c22c:	465a      	mov	r2, fp
 800c22e:	2300      	movs	r3, #0
 800c230:	2134      	movs	r1, #52	; 0x34
 800c232:	4620      	mov	r0, r4
 800c234:	f7fa fc6a 	bl	8006b0c <d_make_comp>
 800c238:	4683      	mov	fp, r0
 800c23a:	f7ff bacd 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c23e:	2300      	movs	r3, #0
 800c240:	4618      	mov	r0, r3
 800c242:	4921      	ldr	r1, [pc, #132]	; (800c2c8 <d_exprlist+0xcd0>)
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	f002 fdb9 	bl	800edbc <strcmp>
 800c24a:	9b00      	ldr	r3, [sp, #0]
 800c24c:	2800      	cmp	r0, #0
 800c24e:	f000 850d 	beq.w	800cc6c <d_exprlist+0x1674>
 800c252:	781a      	ldrb	r2, [r3, #0]
 800c254:	2a6e      	cmp	r2, #110	; 0x6e
 800c256:	f040 810b 	bne.w	800c470 <d_exprlist+0xe78>
 800c25a:	785b      	ldrb	r3, [r3, #1]
 800c25c:	2b77      	cmp	r3, #119	; 0x77
 800c25e:	d002      	beq.n	800c266 <d_exprlist+0xc6e>
 800c260:	2b61      	cmp	r3, #97	; 0x61
 800c262:	f040 8105 	bne.w	800c470 <d_exprlist+0xe78>
 800c266:	215f      	movs	r1, #95	; 0x5f
 800c268:	4620      	mov	r0, r4
 800c26a:	f7ff f9c5 	bl	800b5f8 <d_exprlist>
 800c26e:	9000      	str	r0, [sp, #0]
 800c270:	4620      	mov	r0, r4
 800c272:	f001 f831 	bl	800d2d8 <d_type>
 800c276:	68e3      	ldr	r3, [r4, #12]
 800c278:	9001      	str	r0, [sp, #4]
 800c27a:	781a      	ldrb	r2, [r3, #0]
 800c27c:	2a45      	cmp	r2, #69	; 0x45
 800c27e:	f000 84e4 	beq.w	800cc4a <d_exprlist+0x1652>
 800c282:	2a70      	cmp	r2, #112	; 0x70
 800c284:	f000 85ce 	beq.w	800ce24 <d_exprlist+0x182c>
 800c288:	2a69      	cmp	r2, #105	; 0x69
 800c28a:	f040 80f1 	bne.w	800c470 <d_exprlist+0xe78>
 800c28e:	785b      	ldrb	r3, [r3, #1]
 800c290:	2b6c      	cmp	r3, #108	; 0x6c
 800c292:	f040 80ed 	bne.w	800c470 <d_exprlist+0xe78>
 800c296:	4620      	mov	r0, r4
 800c298:	f000 fe4c 	bl	800cf34 <d_expression_1>
 800c29c:	4603      	mov	r3, r0
 800c29e:	9a01      	ldr	r2, [sp, #4]
 800c2a0:	213a      	movs	r1, #58	; 0x3a
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f7fa fc32 	bl	8006b0c <d_make_comp>
 800c2a8:	9a00      	ldr	r2, [sp, #0]
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2139      	movs	r1, #57	; 0x39
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f7fa fc2c 	bl	8006b0c <d_make_comp>
 800c2b4:	465a      	mov	r2, fp
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2138      	movs	r1, #56	; 0x38
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	f7fa fc26 	bl	8006b0c <d_make_comp>
 800c2c0:	4683      	mov	fp, r0
 800c2c2:	f7ff ba89 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c2c6:	bf00      	nop
 800c2c8:	080159c0 	.word	0x080159c0
 800c2cc:	080159b8 	.word	0x080159b8
 800c2d0:	08015ad4 	.word	0x08015ad4
 800c2d4:	08015ad8 	.word	0x08015ad8
 800c2d8:	08015cc8 	.word	0x08015cc8
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f8db 2004 	ldr.w	r2, [fp, #4]
 800c2e2:	6812      	ldr	r2, [r2, #0]
 800c2e4:	7851      	ldrb	r1, [r2, #1]
 800c2e6:	2963      	cmp	r1, #99	; 0x63
 800c2e8:	f000 84d4 	beq.w	800cc94 <d_exprlist+0x169c>
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	f000 fe20 	bl	800cf34 <d_expression_1>
 800c2f4:	9b01      	ldr	r3, [sp, #4]
 800c2f6:	9000      	str	r0, [sp, #0]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	49d1      	ldr	r1, [pc, #836]	; (800c640 <d_exprlist+0x1048>)
 800c2fc:	9301      	str	r3, [sp, #4]
 800c2fe:	f002 fd5d 	bl	800edbc <strcmp>
 800c302:	9b01      	ldr	r3, [sp, #4]
 800c304:	2800      	cmp	r0, #0
 800c306:	f000 84be 	beq.w	800cc86 <d_exprlist+0x168e>
 800c30a:	49ce      	ldr	r1, [pc, #824]	; (800c644 <d_exprlist+0x104c>)
 800c30c:	4618      	mov	r0, r3
 800c30e:	9301      	str	r3, [sp, #4]
 800c310:	f002 fd54 	bl	800edbc <strcmp>
 800c314:	b138      	cbz	r0, 800c326 <d_exprlist+0xd2e>
 800c316:	9b01      	ldr	r3, [sp, #4]
 800c318:	49cb      	ldr	r1, [pc, #812]	; (800c648 <d_exprlist+0x1050>)
 800c31a:	4618      	mov	r0, r3
 800c31c:	f002 fd4e 	bl	800edbc <strcmp>
 800c320:	2800      	cmp	r0, #0
 800c322:	f040 84c8 	bne.w	800ccb6 <d_exprlist+0x16be>
 800c326:	4620      	mov	r0, r4
 800c328:	f001 fc52 	bl	800dbd0 <d_unqualified_name>
 800c32c:	68e3      	ldr	r3, [r4, #12]
 800c32e:	4602      	mov	r2, r0
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	2b49      	cmp	r3, #73	; 0x49
 800c334:	d10a      	bne.n	800c34c <d_exprlist+0xd54>
 800c336:	9001      	str	r0, [sp, #4]
 800c338:	4620      	mov	r0, r4
 800c33a:	f7fe fae7 	bl	800a90c <d_template_args>
 800c33e:	9a01      	ldr	r2, [sp, #4]
 800c340:	4603      	mov	r3, r0
 800c342:	2104      	movs	r1, #4
 800c344:	4620      	mov	r0, r4
 800c346:	f7fa fbe1 	bl	8006b0c <d_make_comp>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4613      	mov	r3, r2
 800c34e:	2137      	movs	r1, #55	; 0x37
 800c350:	9a00      	ldr	r2, [sp, #0]
 800c352:	4620      	mov	r0, r4
 800c354:	f7fa fbda 	bl	8006b0c <d_make_comp>
 800c358:	465a      	mov	r2, fp
 800c35a:	4603      	mov	r3, r0
 800c35c:	2136      	movs	r1, #54	; 0x36
 800c35e:	4620      	mov	r0, r4
 800c360:	f7fa fbd4 	bl	8006b0c <d_make_comp>
 800c364:	4683      	mov	fp, r0
 800c366:	f7ff ba37 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c36a:	7843      	ldrb	r3, [r0, #1]
 800c36c:	2b72      	cmp	r3, #114	; 0x72
 800c36e:	f000 82a7 	beq.w	800c8c0 <d_exprlist+0x12c8>
 800c372:	2b70      	cmp	r3, #112	; 0x70
 800c374:	f47f ac06 	bne.w	800bb84 <d_exprlist+0x58c>
 800c378:	1c82      	adds	r2, r0, #2
 800c37a:	60e2      	str	r2, [r4, #12]
 800c37c:	4620      	mov	r0, r4
 800c37e:	f000 fdd9 	bl	800cf34 <d_expression_1>
 800c382:	465b      	mov	r3, fp
 800c384:	4602      	mov	r2, r0
 800c386:	2149      	movs	r1, #73	; 0x49
 800c388:	e556      	b.n	800be38 <d_exprlist+0x840>
 800c38a:	7853      	ldrb	r3, [r2, #1]
 800c38c:	2b70      	cmp	r3, #112	; 0x70
 800c38e:	f47f af34 	bne.w	800c1fa <d_exprlist+0xc02>
 800c392:	1c93      	adds	r3, r2, #2
 800c394:	60e3      	str	r3, [r4, #12]
 800c396:	7893      	ldrb	r3, [r2, #2]
 800c398:	2b54      	cmp	r3, #84	; 0x54
 800c39a:	f040 82cc 	bne.w	800c936 <d_exprlist+0x133e>
 800c39e:	3203      	adds	r2, #3
 800c3a0:	60e2      	str	r2, [r4, #12]
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	6963      	ldr	r3, [r4, #20]
 800c3a6:	69a2      	ldr	r2, [r4, #24]
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	da61      	bge.n	800c470 <d_exprlist+0xe78>
 800c3ac:	6922      	ldr	r2, [r4, #16]
 800c3ae:	1c59      	adds	r1, r3, #1
 800c3b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c3b4:	eb12 0b83 	adds.w	fp, r2, r3, lsl #2
 800c3b8:	6161      	str	r1, [r4, #20]
 800c3ba:	f43f aa0d 	beq.w	800b7d8 <d_exprlist+0x1e0>
 800c3be:	2106      	movs	r1, #6
 800c3c0:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 800c3c4:	f8cb 0004 	str.w	r0, [fp, #4]
 800c3c8:	f7ff ba06 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c3cc:	2b33      	cmp	r3, #51	; 0x33
 800c3ce:	f47f aedb 	bne.w	800c188 <d_exprlist+0xb90>
 800c3d2:	68e3      	ldr	r3, [r4, #12]
 800c3d4:	781a      	ldrb	r2, [r3, #0]
 800c3d6:	2a5f      	cmp	r2, #95	; 0x5f
 800c3d8:	f000 83b6 	beq.w	800cb48 <d_exprlist+0x1550>
 800c3dc:	f04f 0900 	mov.w	r9, #0
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f000 fda7 	bl	800cf34 <d_expression_1>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	f1b9 0f00 	cmp.w	r9, #0
 800c3ec:	d005      	beq.n	800c3fa <d_exprlist+0xe02>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	2137      	movs	r1, #55	; 0x37
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f7fa fb8a 	bl	8006b0c <d_make_comp>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	4642      	mov	r2, r8
 800c3fc:	2135      	movs	r1, #53	; 0x35
 800c3fe:	4620      	mov	r0, r4
 800c400:	f7fa fb84 	bl	8006b0c <d_make_comp>
 800c404:	4602      	mov	r2, r0
 800c406:	f7ff bac8 	b.w	800b99a <d_exprlist+0x3a2>
 800c40a:	2b33      	cmp	r3, #51	; 0x33
 800c40c:	f47f aec3 	bne.w	800c196 <d_exprlist+0xb9e>
 800c410:	68e3      	ldr	r3, [r4, #12]
 800c412:	781a      	ldrb	r2, [r3, #0]
 800c414:	2a5f      	cmp	r2, #95	; 0x5f
 800c416:	f000 83e4 	beq.w	800cbe2 <d_exprlist+0x15ea>
 800c41a:	f04f 0b00 	mov.w	fp, #0
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 fd88 	bl	800cf34 <d_expression_1>
 800c424:	4603      	mov	r3, r0
 800c426:	f1bb 0f00 	cmp.w	fp, #0
 800c42a:	d005      	beq.n	800c438 <d_exprlist+0xe40>
 800c42c:	4602      	mov	r2, r0
 800c42e:	2137      	movs	r1, #55	; 0x37
 800c430:	4620      	mov	r0, r4
 800c432:	f7fa fb6b 	bl	8006b0c <d_make_comp>
 800c436:	4603      	mov	r3, r0
 800c438:	4652      	mov	r2, sl
 800c43a:	2135      	movs	r1, #53	; 0x35
 800c43c:	4620      	mov	r0, r4
 800c43e:	f7fa fb65 	bl	8006b0c <d_make_comp>
 800c442:	4682      	mov	sl, r0
 800c444:	f7ff ba04 	b.w	800b850 <d_exprlist+0x258>
 800c448:	784b      	ldrb	r3, [r1, #1]
 800c44a:	2b6e      	cmp	r3, #110	; 0x6e
 800c44c:	f47f abbd 	bne.w	800bbca <d_exprlist+0x5d2>
 800c450:	3102      	adds	r1, #2
 800c452:	60e1      	str	r1, [r4, #12]
 800c454:	f7ff b9f0 	b.w	800b838 <d_exprlist+0x240>
 800c458:	4620      	mov	r0, r4
 800c45a:	f002 fa35 	bl	800e8c8 <d_expr_primary>
 800c45e:	4682      	mov	sl, r0
 800c460:	f7ff b9f6 	b.w	800b850 <d_exprlist+0x258>
 800c464:	4620      	mov	r0, r4
 800c466:	f7fa fcf3 	bl	8006e50 <d_template_param>
 800c46a:	4602      	mov	r2, r0
 800c46c:	f7ff ba95 	b.w	800b99a <d_exprlist+0x3a2>
 800c470:	f04f 0b00 	mov.w	fp, #0
 800c474:	f7ff b9b0 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c478:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800c47c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c47e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800c482:	f8da 9000 	ldr.w	r9, [sl]
 800c486:	3b02      	subs	r3, #2
 800c488:	4413      	add	r3, r2
 800c48a:	6323      	str	r3, [r4, #48]	; 0x30
 800c48c:	4648      	mov	r0, r9
 800c48e:	496f      	ldr	r1, [pc, #444]	; (800c64c <d_exprlist+0x1054>)
 800c490:	f002 fc94 	bl	800edbc <strcmp>
 800c494:	2800      	cmp	r0, #0
 800c496:	f000 8281 	beq.w	800c99c <d_exprlist+0x13a4>
 800c49a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800c49e:	2b03      	cmp	r3, #3
 800c4a0:	f63f ae72 	bhi.w	800c188 <d_exprlist+0xb90>
 800c4a4:	a201      	add	r2, pc, #4	; (adr r2, 800c4ac <d_exprlist+0xeb4>)
 800c4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4aa:	bf00      	nop
 800c4ac:	0800bf91 	.word	0x0800bf91
 800c4b0:	0800c779 	.word	0x0800c779
 800c4b4:	0800c02d 	.word	0x0800c02d
 800c4b8:	0800bfa5 	.word	0x0800bfa5
 800c4bc:	68e2      	ldrge	r2, [r4, #12]
 800c4be:	f04f 0900 	movlt.w	r9, #0
 800c4c2:	7813      	ldrbge	r3, [r2, #0]
 800c4c4:	f7ff babd 	b.w	800ba42 <d_exprlist+0x44a>
 800c4c8:	6843      	ldr	r3, [r0, #4]
 800c4ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c4cc:	689a      	ldr	r2, [r3, #8]
 800c4ce:	f8d3 b000 	ldr.w	fp, [r3]
 800c4d2:	3a02      	subs	r2, #2
 800c4d4:	440a      	add	r2, r1
 800c4d6:	6322      	str	r2, [r4, #48]	; 0x30
 800c4d8:	4658      	mov	r0, fp
 800c4da:	495c      	ldr	r1, [pc, #368]	; (800c64c <d_exprlist+0x1054>)
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	f002 fc6d 	bl	800edbc <strcmp>
 800c4e2:	9b00      	ldr	r3, [sp, #0]
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f000 8272 	beq.w	800c9ce <d_exprlist+0x13d6>
 800c4ea:	68da      	ldr	r2, [r3, #12]
 800c4ec:	2a03      	cmp	r2, #3
 800c4ee:	f63f ae52 	bhi.w	800c196 <d_exprlist+0xb9e>
 800c4f2:	a301      	add	r3, pc, #4	; (adr r3, 800c4f8 <d_exprlist+0xf00>)
 800c4f4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c4f8:	0800bd2d 	.word	0x0800bd2d
 800c4fc:	0800c7c3 	.word	0x0800c7c3
 800c500:	0800bdc9 	.word	0x0800bdc9
 800c504:	0800bd41 	.word	0x0800bd41
 800c508:	3301      	adds	r3, #1
 800c50a:	60e3      	str	r3, [r4, #12]
 800c50c:	f04f 0b00 	mov.w	fp, #0
 800c510:	4620      	mov	r0, r4
 800c512:	f000 fd0f 	bl	800cf34 <d_expression_1>
 800c516:	4603      	mov	r3, r0
 800c518:	f1bb 0f00 	cmp.w	fp, #0
 800c51c:	d005      	beq.n	800c52a <d_exprlist+0xf32>
 800c51e:	4602      	mov	r2, r0
 800c520:	2137      	movs	r1, #55	; 0x37
 800c522:	4620      	mov	r0, r4
 800c524:	f7fa faf2 	bl	8006b0c <d_make_comp>
 800c528:	4603      	mov	r3, r0
 800c52a:	464a      	mov	r2, r9
 800c52c:	2135      	movs	r1, #53	; 0x35
 800c52e:	4620      	mov	r0, r4
 800c530:	f7fa faec 	bl	8006b0c <d_make_comp>
 800c534:	4681      	mov	r9, r0
 800c536:	f7ff b9e1 	b.w	800b8fc <d_exprlist+0x304>
 800c53a:	3101      	adds	r1, #1
 800c53c:	60e1      	str	r1, [r4, #12]
 800c53e:	f7ff b9bf 	b.w	800b8c0 <d_exprlist+0x2c8>
 800c542:	2b33      	cmp	r3, #51	; 0x33
 800c544:	d1ba      	bne.n	800c4bc <d_exprlist+0xec4>
 800c546:	68e3      	ldr	r3, [r4, #12]
 800c548:	781a      	ldrb	r2, [r3, #0]
 800c54a:	2a5f      	cmp	r2, #95	; 0x5f
 800c54c:	f000 8286 	beq.w	800ca5c <d_exprlist+0x1464>
 800c550:	f04f 0b00 	mov.w	fp, #0
 800c554:	4620      	mov	r0, r4
 800c556:	f000 fced 	bl	800cf34 <d_expression_1>
 800c55a:	4603      	mov	r3, r0
 800c55c:	f1bb 0f00 	cmp.w	fp, #0
 800c560:	f000 8283 	beq.w	800ca6a <d_exprlist+0x1472>
 800c564:	4602      	mov	r2, r0
 800c566:	2137      	movs	r1, #55	; 0x37
 800c568:	4620      	mov	r0, r4
 800c56a:	f7fa facf 	bl	8006b0c <d_make_comp>
 800c56e:	464a      	mov	r2, r9
 800c570:	4603      	mov	r3, r0
 800c572:	2135      	movs	r1, #53	; 0x35
 800c574:	e460      	b.n	800be38 <d_exprlist+0x840>
 800c576:	3102      	adds	r1, #2
 800c578:	60e1      	str	r1, [r4, #12]
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 feac 	bl	800d2d8 <d_type>
 800c580:	4681      	mov	r9, r0
 800c582:	4620      	mov	r0, r4
 800c584:	f001 fb24 	bl	800dbd0 <d_unqualified_name>
 800c588:	68e3      	ldr	r3, [r4, #12]
 800c58a:	4683      	mov	fp, r0
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	2b49      	cmp	r3, #73	; 0x49
 800c590:	f000 81e1 	beq.w	800c956 <d_exprlist+0x135e>
 800c594:	4603      	mov	r3, r0
 800c596:	464a      	mov	r2, r9
 800c598:	2101      	movs	r1, #1
 800c59a:	4620      	mov	r0, r4
 800c59c:	f7fa fab6 	bl	8006b0c <d_make_comp>
 800c5a0:	4681      	mov	r9, r0
 800c5a2:	f7ff b9ab 	b.w	800b8fc <d_exprlist+0x304>
 800c5a6:	2b33      	cmp	r3, #51	; 0x33
 800c5a8:	f47f af62 	bne.w	800c470 <d_exprlist+0xe78>
 800c5ac:	68e3      	ldr	r3, [r4, #12]
 800c5ae:	781a      	ldrb	r2, [r3, #0]
 800c5b0:	2a5f      	cmp	r2, #95	; 0x5f
 800c5b2:	f000 83b7 	beq.w	800cd24 <d_exprlist+0x172c>
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	9200      	str	r2, [sp, #0]
 800c5bc:	f000 fcba 	bl	800cf34 <d_expression_1>
 800c5c0:	9a00      	ldr	r2, [sp, #0]
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	b12a      	cbz	r2, 800c5d2 <d_exprlist+0xfda>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	2137      	movs	r1, #55	; 0x37
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f7fa fa9e 	bl	8006b0c <d_make_comp>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	465a      	mov	r2, fp
 800c5d4:	2135      	movs	r1, #53	; 0x35
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7fa fa98 	bl	8006b0c <d_make_comp>
 800c5dc:	4683      	mov	fp, r0
 800c5de:	f7ff b8fb 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c5e2:	f1bb 0f00 	cmp.w	fp, #0
 800c5e6:	d091      	beq.n	800c50c <d_exprlist+0xf14>
 800c5e8:	f89b 2000 	ldrb.w	r2, [fp]
 800c5ec:	2a70      	cmp	r2, #112	; 0x70
 800c5ee:	d001      	beq.n	800c5f4 <d_exprlist+0xffc>
 800c5f0:	2a6d      	cmp	r2, #109	; 0x6d
 800c5f2:	d18b      	bne.n	800c50c <d_exprlist+0xf14>
 800c5f4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d187      	bne.n	800c50c <d_exprlist+0xf14>
 800c5fc:	68e3      	ldr	r3, [r4, #12]
 800c5fe:	781a      	ldrb	r2, [r3, #0]
 800c600:	2a5f      	cmp	r2, #95	; 0x5f
 800c602:	d081      	beq.n	800c508 <d_exprlist+0xf10>
 800c604:	f04f 0b01 	mov.w	fp, #1
 800c608:	e782      	b.n	800c510 <d_exprlist+0xf18>
 800c60a:	4620      	mov	r0, r4
 800c60c:	f7fe f97e 	bl	800a90c <d_template_args>
 800c610:	4642      	mov	r2, r8
 800c612:	4603      	mov	r3, r0
 800c614:	2104      	movs	r1, #4
 800c616:	4620      	mov	r0, r4
 800c618:	f7fa fa78 	bl	8006b0c <d_make_comp>
 800c61c:	4602      	mov	r2, r0
 800c61e:	f7ff b9bc 	b.w	800b99a <d_exprlist+0x3a2>
 800c622:	4620      	mov	r0, r4
 800c624:	f002 f950 	bl	800e8c8 <d_expr_primary>
 800c628:	4683      	mov	fp, r0
 800c62a:	f7ff b8d5 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c62e:	4620      	mov	r0, r4
 800c630:	f7fa fbf6 	bl	8006e20 <d_compact_number>
 800c634:	3001      	adds	r0, #1
 800c636:	f47f aa7a 	bne.w	800bb2e <d_exprlist+0x536>
 800c63a:	4681      	mov	r9, r0
 800c63c:	f7ff b95e 	b.w	800b8fc <d_exprlist+0x304>
 800c640:	080159b8 	.word	0x080159b8
 800c644:	08015ad4 	.word	0x08015ad4
 800c648:	08015ad8 	.word	0x08015ad8
 800c64c:	08015cc8 	.word	0x08015cc8
 800c650:	4620      	mov	r0, r4
 800c652:	f002 f939 	bl	800e8c8 <d_expr_primary>
 800c656:	68e2      	ldr	r2, [r4, #12]
 800c658:	4681      	mov	r9, r0
 800c65a:	7813      	ldrb	r3, [r2, #0]
 800c65c:	f7ff b9f1 	b.w	800ba42 <d_exprlist+0x44a>
 800c660:	4620      	mov	r0, r4
 800c662:	f7fa fbf5 	bl	8006e50 <d_template_param>
 800c666:	4683      	mov	fp, r0
 800c668:	f7ff b8b6 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c66c:	4620      	mov	r0, r4
 800c66e:	f7fe f94d 	bl	800a90c <d_template_args>
 800c672:	4652      	mov	r2, sl
 800c674:	4603      	mov	r3, r0
 800c676:	2104      	movs	r1, #4
 800c678:	4620      	mov	r0, r4
 800c67a:	f7fa fa47 	bl	8006b0c <d_make_comp>
 800c67e:	4682      	mov	sl, r0
 800c680:	f7ff b8e6 	b.w	800b850 <d_exprlist+0x258>
 800c684:	4620      	mov	r0, r4
 800c686:	f7fa fbe3 	bl	8006e50 <d_template_param>
 800c68a:	68e2      	ldr	r2, [r4, #12]
 800c68c:	4681      	mov	r9, r0
 800c68e:	7813      	ldrb	r3, [r2, #0]
 800c690:	f7ff b9d7 	b.w	800ba42 <d_exprlist+0x44a>
 800c694:	6842      	ldr	r2, [r0, #4]
 800c696:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c698:	6891      	ldr	r1, [r2, #8]
 800c69a:	6813      	ldr	r3, [r2, #0]
 800c69c:	3902      	subs	r1, #2
 800c69e:	4401      	add	r1, r0
 800c6a0:	6321      	str	r1, [r4, #48]	; 0x30
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	49d2      	ldr	r1, [pc, #840]	; (800c9f0 <d_exprlist+0x13f8>)
 800c6a6:	9201      	str	r2, [sp, #4]
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	f002 fb87 	bl	800edbc <strcmp>
 800c6ae:	9b00      	ldr	r3, [sp, #0]
 800c6b0:	9a01      	ldr	r2, [sp, #4]
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	f000 8190 	beq.w	800c9d8 <d_exprlist+0x13e0>
 800c6b8:	68d2      	ldr	r2, [r2, #12]
 800c6ba:	2a03      	cmp	r2, #3
 800c6bc:	f63f aed8 	bhi.w	800c470 <d_exprlist+0xe78>
 800c6c0:	a101      	add	r1, pc, #4	; (adr r1, 800c6c8 <d_exprlist+0x10d0>)
 800c6c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6c6:	bf00      	nop
 800c6c8:	0800c22d 	.word	0x0800c22d
 800c6cc:	0800c9a7 	.word	0x0800c9a7
 800c6d0:	0800c2df 	.word	0x0800c2df
 800c6d4:	0800c241 	.word	0x0800c241
 800c6d8:	6843      	ldr	r3, [r0, #4]
 800c6da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c6dc:	689a      	ldr	r2, [r3, #8]
 800c6de:	f8d3 b000 	ldr.w	fp, [r3]
 800c6e2:	3a02      	subs	r2, #2
 800c6e4:	440a      	add	r2, r1
 800c6e6:	6322      	str	r2, [r4, #48]	; 0x30
 800c6e8:	4658      	mov	r0, fp
 800c6ea:	49c1      	ldr	r1, [pc, #772]	; (800c9f0 <d_exprlist+0x13f8>)
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	f002 fb65 	bl	800edbc <strcmp>
 800c6f2:	9b00      	ldr	r3, [sp, #0]
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	f000 81fd 	beq.w	800caf4 <d_exprlist+0x14fc>
 800c6fa:	68da      	ldr	r2, [r3, #12]
 800c6fc:	2a03      	cmp	r2, #3
 800c6fe:	f63f aedd 	bhi.w	800c4bc <d_exprlist+0xec4>
 800c702:	a301      	add	r3, pc, #4	; (adr r3, 800c708 <d_exprlist+0x1110>)
 800c704:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800c708:	0800be33 	.word	0x0800be33
 800c70c:	0800c96d 	.word	0x0800c96d
 800c710:	0800becb 	.word	0x0800becb
 800c714:	0800be4b 	.word	0x0800be4b
 800c718:	3102      	adds	r1, #2
 800c71a:	60e1      	str	r1, [r4, #12]
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 fc09 	bl	800cf34 <d_expression_1>
 800c722:	2300      	movs	r3, #0
 800c724:	4602      	mov	r2, r0
 800c726:	2149      	movs	r1, #73	; 0x49
 800c728:	4620      	mov	r0, r4
 800c72a:	f7fa f9ef 	bl	8006b0c <d_make_comp>
 800c72e:	4681      	mov	r9, r0
 800c730:	f7ff b8e4 	b.w	800b8fc <d_exprlist+0x304>
 800c734:	1c83      	adds	r3, r0, #2
 800c736:	60e3      	str	r3, [r4, #12]
 800c738:	7883      	ldrb	r3, [r0, #2]
 800c73a:	2b54      	cmp	r3, #84	; 0x54
 800c73c:	f040 80d9 	bne.w	800c8f2 <d_exprlist+0x12fa>
 800c740:	1cc2      	adds	r2, r0, #3
 800c742:	4658      	mov	r0, fp
 800c744:	60e2      	str	r2, [r4, #12]
 800c746:	6963      	ldr	r3, [r4, #20]
 800c748:	69a1      	ldr	r1, [r4, #24]
 800c74a:	428b      	cmp	r3, r1
 800c74c:	f280 80cc 	bge.w	800c8e8 <d_exprlist+0x12f0>
 800c750:	6921      	ldr	r1, [r4, #16]
 800c752:	f103 0e01 	add.w	lr, r3, #1
 800c756:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c75a:	eb11 0983 	adds.w	r9, r1, r3, lsl #2
 800c75e:	f8c4 e014 	str.w	lr, [r4, #20]
 800c762:	f43f ab6e 	beq.w	800be42 <d_exprlist+0x84a>
 800c766:	f04f 0e06 	mov.w	lr, #6
 800c76a:	f801 e023 	strb.w	lr, [r1, r3, lsl #2]
 800c76e:	f8c9 0004 	str.w	r0, [r9, #4]
 800c772:	7813      	ldrb	r3, [r2, #0]
 800c774:	f7ff b965 	b.w	800ba42 <d_exprlist+0x44a>
 800c778:	f1b9 0f00 	cmp.w	r9, #0
 800c77c:	f43f ae2e 	beq.w	800c3dc <d_exprlist+0xde4>
 800c780:	f899 3000 	ldrb.w	r3, [r9]
 800c784:	2b70      	cmp	r3, #112	; 0x70
 800c786:	d002      	beq.n	800c78e <d_exprlist+0x1196>
 800c788:	2b6d      	cmp	r3, #109	; 0x6d
 800c78a:	f47f ae27 	bne.w	800c3dc <d_exprlist+0xde4>
 800c78e:	f899 2001 	ldrb.w	r2, [r9, #1]
 800c792:	429a      	cmp	r2, r3
 800c794:	f47f ae22 	bne.w	800c3dc <d_exprlist+0xde4>
 800c798:	68e3      	ldr	r3, [r4, #12]
 800c79a:	781a      	ldrb	r2, [r3, #0]
 800c79c:	2a5f      	cmp	r2, #95	; 0x5f
 800c79e:	f000 8376 	beq.w	800ce8e <d_exprlist+0x1896>
 800c7a2:	f04f 0901 	mov.w	r9, #1
 800c7a6:	e61b      	b.n	800c3e0 <d_exprlist+0xde8>
 800c7a8:	68e3      	ldr	r3, [r4, #12]
 800c7aa:	781a      	ldrb	r2, [r3, #0]
 800c7ac:	2a5f      	cmp	r2, #95	; 0x5f
 800c7ae:	f47f aead 	bne.w	800c50c <d_exprlist+0xf14>
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	60e3      	str	r3, [r4, #12]
 800c7b6:	2145      	movs	r1, #69	; 0x45
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f7fe ff1d 	bl	800b5f8 <d_exprlist>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	e6b3      	b.n	800c52a <d_exprlist+0xf32>
 800c7c2:	f1bb 0f00 	cmp.w	fp, #0
 800c7c6:	f43f ae28 	beq.w	800c41a <d_exprlist+0xe22>
 800c7ca:	f89b 2000 	ldrb.w	r2, [fp]
 800c7ce:	2a70      	cmp	r2, #112	; 0x70
 800c7d0:	d002      	beq.n	800c7d8 <d_exprlist+0x11e0>
 800c7d2:	2a6d      	cmp	r2, #109	; 0x6d
 800c7d4:	f47f ae21 	bne.w	800c41a <d_exprlist+0xe22>
 800c7d8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	f47f ae1c 	bne.w	800c41a <d_exprlist+0xe22>
 800c7e2:	68e3      	ldr	r3, [r4, #12]
 800c7e4:	781a      	ldrb	r2, [r3, #0]
 800c7e6:	2a5f      	cmp	r2, #95	; 0x5f
 800c7e8:	f000 82f7 	beq.w	800cdda <d_exprlist+0x17e2>
 800c7ec:	f04f 0b01 	mov.w	fp, #1
 800c7f0:	e615      	b.n	800c41e <d_exprlist+0xe26>
 800c7f2:	3204      	adds	r2, #4
 800c7f4:	60e2      	str	r2, [r4, #12]
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f000 fd6e 	bl	800d2d8 <d_type>
 800c7fc:	4680      	mov	r8, r0
 800c7fe:	4620      	mov	r0, r4
 800c800:	f001 f9e6 	bl	800dbd0 <d_unqualified_name>
 800c804:	68e3      	ldr	r3, [r4, #12]
 800c806:	4681      	mov	r9, r0
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	2b49      	cmp	r3, #73	; 0x49
 800c80c:	f000 810c 	beq.w	800ca28 <d_exprlist+0x1430>
 800c810:	4603      	mov	r3, r0
 800c812:	4642      	mov	r2, r8
 800c814:	2101      	movs	r1, #1
 800c816:	4620      	mov	r0, r4
 800c818:	f7fa f978 	bl	8006b0c <d_make_comp>
 800c81c:	4602      	mov	r2, r0
 800c81e:	f7ff b8bc 	b.w	800b99a <d_exprlist+0x3a2>
 800c822:	4620      	mov	r0, r4
 800c824:	f000 fd58 	bl	800d2d8 <d_type>
 800c828:	4603      	mov	r3, r0
 800c82a:	e67e      	b.n	800c52a <d_exprlist+0xf32>
 800c82c:	4620      	mov	r0, r4
 800c82e:	f7fe f86d 	bl	800a90c <d_template_args>
 800c832:	464a      	mov	r2, r9
 800c834:	4603      	mov	r3, r0
 800c836:	2104      	movs	r1, #4
 800c838:	f7ff bafe 	b.w	800be38 <d_exprlist+0x840>
 800c83c:	3102      	adds	r1, #2
 800c83e:	60e1      	str	r1, [r4, #12]
 800c840:	4620      	mov	r0, r4
 800c842:	f000 fd49 	bl	800d2d8 <d_type>
 800c846:	4682      	mov	sl, r0
 800c848:	4620      	mov	r0, r4
 800c84a:	f001 f9c1 	bl	800dbd0 <d_unqualified_name>
 800c84e:	68e3      	ldr	r3, [r4, #12]
 800c850:	4683      	mov	fp, r0
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	2b49      	cmp	r3, #73	; 0x49
 800c856:	f000 80dc 	beq.w	800ca12 <d_exprlist+0x141a>
 800c85a:	4603      	mov	r3, r0
 800c85c:	4652      	mov	r2, sl
 800c85e:	2101      	movs	r1, #1
 800c860:	4620      	mov	r0, r4
 800c862:	f7fa f953 	bl	8006b0c <d_make_comp>
 800c866:	4682      	mov	sl, r0
 800c868:	f7fe bff2 	b.w	800b850 <d_exprlist+0x258>
 800c86c:	7812      	ldrb	r2, [r2, #0]
 800c86e:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800c872:	2901      	cmp	r1, #1
 800c874:	d903      	bls.n	800c87e <d_exprlist+0x1286>
 800c876:	3a72      	subs	r2, #114	; 0x72
 800c878:	2a01      	cmp	r2, #1
 800c87a:	f63f aa29 	bhi.w	800bcd0 <d_exprlist+0x6d8>
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 fd2a 	bl	800d2d8 <d_type>
 800c884:	9000      	str	r0, [sp, #0]
 800c886:	f7ff ba27 	b.w	800bcd8 <d_exprlist+0x6e0>
 800c88a:	4620      	mov	r0, r4
 800c88c:	f000 fb52 	bl	800cf34 <d_expression_1>
 800c890:	9000      	str	r0, [sp, #0]
 800c892:	4620      	mov	r0, r4
 800c894:	f000 fb4e 	bl	800cf34 <d_expression_1>
 800c898:	4683      	mov	fp, r0
 800c89a:	4620      	mov	r0, r4
 800c89c:	f000 fb4a 	bl	800cf34 <d_expression_1>
 800c8a0:	f7ff b9f9 	b.w	800bc96 <d_exprlist+0x69e>
 800c8a4:	3204      	adds	r2, #4
 800c8a6:	60e2      	str	r2, [r4, #12]
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f000 fb43 	bl	800cf34 <d_expression_1>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	2149      	movs	r1, #73	; 0x49
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	f7fa f929 	bl	8006b0c <d_make_comp>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	f7ff b86d 	b.w	800b99a <d_exprlist+0x3a2>
 800c8c0:	1c82      	adds	r2, r0, #2
 800c8c2:	60e2      	str	r2, [r4, #12]
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f000 fd07 	bl	800d2d8 <d_type>
 800c8ca:	4681      	mov	r9, r0
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f001 f97f 	bl	800dbd0 <d_unqualified_name>
 800c8d2:	68e3      	ldr	r3, [r4, #12]
 800c8d4:	4683      	mov	fp, r0
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b49      	cmp	r3, #73	; 0x49
 800c8da:	f000 818a 	beq.w	800cbf2 <d_exprlist+0x15fa>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	464a      	mov	r2, r9
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	f7ff baa8 	b.w	800be38 <d_exprlist+0x840>
 800c8e8:	7813      	ldrb	r3, [r2, #0]
 800c8ea:	f04f 0900 	mov.w	r9, #0
 800c8ee:	f7ff b8a8 	b.w	800ba42 <d_exprlist+0x44a>
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f7fa fa94 	bl	8006e20 <d_compact_number>
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	68e2      	ldr	r2, [r4, #12]
 800c8fc:	f47f af23 	bne.w	800c746 <d_exprlist+0x114e>
 800c900:	4681      	mov	r9, r0
 800c902:	7813      	ldrb	r3, [r2, #0]
 800c904:	f7ff b89d 	b.w	800ba42 <d_exprlist+0x44a>
 800c908:	3202      	adds	r2, #2
 800c90a:	60e2      	str	r2, [r4, #12]
 800c90c:	4620      	mov	r0, r4
 800c90e:	f000 fce3 	bl	800d2d8 <d_type>
 800c912:	4683      	mov	fp, r0
 800c914:	4620      	mov	r0, r4
 800c916:	f001 f95b 	bl	800dbd0 <d_unqualified_name>
 800c91a:	68e3      	ldr	r3, [r4, #12]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b49      	cmp	r3, #73	; 0x49
 800c920:	f000 8198 	beq.w	800cc54 <d_exprlist+0x165c>
 800c924:	4603      	mov	r3, r0
 800c926:	465a      	mov	r2, fp
 800c928:	2101      	movs	r1, #1
 800c92a:	4620      	mov	r0, r4
 800c92c:	f7fa f8ee 	bl	8006b0c <d_make_comp>
 800c930:	4683      	mov	fp, r0
 800c932:	f7fe bf51 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c936:	4620      	mov	r0, r4
 800c938:	f7fa fa72 	bl	8006e20 <d_compact_number>
 800c93c:	3001      	adds	r0, #1
 800c93e:	f47f ad31 	bne.w	800c3a4 <d_exprlist+0xdac>
 800c942:	4683      	mov	fp, r0
 800c944:	f7fe bf48 	b.w	800b7d8 <d_exprlist+0x1e0>
 800c948:	2145      	movs	r1, #69	; 0x45
 800c94a:	4620      	mov	r0, r4
 800c94c:	f7fe fe54 	bl	800b5f8 <d_exprlist>
 800c950:	4683      	mov	fp, r0
 800c952:	f7ff b9dd 	b.w	800bd10 <d_exprlist+0x718>
 800c956:	4620      	mov	r0, r4
 800c958:	f7fd ffd8 	bl	800a90c <d_template_args>
 800c95c:	465a      	mov	r2, fp
 800c95e:	4603      	mov	r3, r0
 800c960:	2104      	movs	r1, #4
 800c962:	4620      	mov	r0, r4
 800c964:	f7fa f8d2 	bl	8006b0c <d_make_comp>
 800c968:	4603      	mov	r3, r0
 800c96a:	e614      	b.n	800c596 <d_exprlist+0xf9e>
 800c96c:	f1bb 0f00 	cmp.w	fp, #0
 800c970:	f43f adee 	beq.w	800c550 <d_exprlist+0xf58>
 800c974:	f89b 2000 	ldrb.w	r2, [fp]
 800c978:	2a70      	cmp	r2, #112	; 0x70
 800c97a:	d002      	beq.n	800c982 <d_exprlist+0x138a>
 800c97c:	2a6d      	cmp	r2, #109	; 0x6d
 800c97e:	f47f ade7 	bne.w	800c550 <d_exprlist+0xf58>
 800c982:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800c986:	4293      	cmp	r3, r2
 800c988:	f47f ade2 	bne.w	800c550 <d_exprlist+0xf58>
 800c98c:	68e3      	ldr	r3, [r4, #12]
 800c98e:	781a      	ldrb	r2, [r3, #0]
 800c990:	2a5f      	cmp	r2, #95	; 0x5f
 800c992:	f000 81cf 	beq.w	800cd34 <d_exprlist+0x173c>
 800c996:	f04f 0b01 	mov.w	fp, #1
 800c99a:	e5db      	b.n	800c554 <d_exprlist+0xf5c>
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 fc9b 	bl	800d2d8 <d_type>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	e529      	b.n	800c3fa <d_exprlist+0xe02>
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f43f ae05 	beq.w	800c5b6 <d_exprlist+0xfbe>
 800c9ac:	781a      	ldrb	r2, [r3, #0]
 800c9ae:	2a70      	cmp	r2, #112	; 0x70
 800c9b0:	d002      	beq.n	800c9b8 <d_exprlist+0x13c0>
 800c9b2:	2a6d      	cmp	r2, #109	; 0x6d
 800c9b4:	f47f adff 	bne.w	800c5b6 <d_exprlist+0xfbe>
 800c9b8:	785b      	ldrb	r3, [r3, #1]
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	f47f adfb 	bne.w	800c5b6 <d_exprlist+0xfbe>
 800c9c0:	68e3      	ldr	r3, [r4, #12]
 800c9c2:	781a      	ldrb	r2, [r3, #0]
 800c9c4:	2a5f      	cmp	r2, #95	; 0x5f
 800c9c6:	f000 81b8 	beq.w	800cd3a <d_exprlist+0x1742>
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	e5f4      	b.n	800c5b8 <d_exprlist+0xfc0>
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 fc82 	bl	800d2d8 <d_type>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	e52f      	b.n	800c438 <d_exprlist+0xe40>
 800c9d8:	4620      	mov	r0, r4
 800c9da:	f000 fc7d 	bl	800d2d8 <d_type>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	e5f7      	b.n	800c5d2 <d_exprlist+0xfda>
 800c9e2:	2145      	movs	r1, #69	; 0x45
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f7fe fe07 	bl	800b5f8 <d_exprlist>
 800c9ea:	4681      	mov	r9, r0
 800c9ec:	f7ff bb45 	b.w	800c07a <d_exprlist+0xa82>
 800c9f0:	08015cc8 	.word	0x08015cc8
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800c9fa:	2a01      	cmp	r2, #1
 800c9fc:	d903      	bls.n	800ca06 <d_exprlist+0x140e>
 800c9fe:	3b72      	subs	r3, #114	; 0x72
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	f63f ab1a 	bhi.w	800c03a <d_exprlist+0xa42>
 800ca06:	4620      	mov	r0, r4
 800ca08:	f000 fc66 	bl	800d2d8 <d_type>
 800ca0c:	4682      	mov	sl, r0
 800ca0e:	f7ff bb18 	b.w	800c042 <d_exprlist+0xa4a>
 800ca12:	4620      	mov	r0, r4
 800ca14:	f7fd ff7a 	bl	800a90c <d_template_args>
 800ca18:	465a      	mov	r2, fp
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2104      	movs	r1, #4
 800ca1e:	4620      	mov	r0, r4
 800ca20:	f7fa f874 	bl	8006b0c <d_make_comp>
 800ca24:	4603      	mov	r3, r0
 800ca26:	e719      	b.n	800c85c <d_exprlist+0x1264>
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f7fd ff6f 	bl	800a90c <d_template_args>
 800ca2e:	464a      	mov	r2, r9
 800ca30:	4603      	mov	r3, r0
 800ca32:	2104      	movs	r1, #4
 800ca34:	4620      	mov	r0, r4
 800ca36:	f7fa f869 	bl	8006b0c <d_make_comp>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	e6e9      	b.n	800c812 <d_exprlist+0x121a>
 800ca3e:	7812      	ldrb	r2, [r2, #0]
 800ca40:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800ca44:	2901      	cmp	r1, #1
 800ca46:	d903      	bls.n	800ca50 <d_exprlist+0x1458>
 800ca48:	3a72      	subs	r2, #114	; 0x72
 800ca4a:	2a01      	cmp	r2, #1
 800ca4c:	f63f a9c3 	bhi.w	800bdd6 <d_exprlist+0x7de>
 800ca50:	4620      	mov	r0, r4
 800ca52:	f000 fc41 	bl	800d2d8 <d_type>
 800ca56:	9000      	str	r0, [sp, #0]
 800ca58:	f7ff b9c1 	b.w	800bdde <d_exprlist+0x7e6>
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	60e3      	str	r3, [r4, #12]
 800ca60:	2145      	movs	r1, #69	; 0x45
 800ca62:	4620      	mov	r0, r4
 800ca64:	f7fe fdc8 	bl	800b5f8 <d_exprlist>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	464a      	mov	r2, r9
 800ca6c:	2135      	movs	r1, #53	; 0x35
 800ca6e:	f7ff b9e3 	b.w	800be38 <d_exprlist+0x840>
 800ca72:	2145      	movs	r1, #69	; 0x45
 800ca74:	4620      	mov	r0, r4
 800ca76:	f7fe fdbf 	bl	800b5f8 <d_exprlist>
 800ca7a:	4683      	mov	fp, r0
 800ca7c:	f7ff b9cb 	b.w	800be16 <d_exprlist+0x81e>
 800ca80:	3202      	adds	r2, #2
 800ca82:	60e2      	str	r2, [r4, #12]
 800ca84:	4620      	mov	r0, r4
 800ca86:	f000 fa55 	bl	800cf34 <d_expression_1>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	2149      	movs	r1, #73	; 0x49
 800ca90:	4620      	mov	r0, r4
 800ca92:	f7fa f83b 	bl	8006b0c <d_make_comp>
 800ca96:	4683      	mov	fp, r0
 800ca98:	f7fe be9e 	b.w	800b7d8 <d_exprlist+0x1e0>
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f000 fa49 	bl	800cf34 <d_expression_1>
 800caa2:	4681      	mov	r9, r0
 800caa4:	4620      	mov	r0, r4
 800caa6:	f000 fa45 	bl	800cf34 <d_expression_1>
 800caaa:	4682      	mov	sl, r0
 800caac:	4620      	mov	r0, r4
 800caae:	f000 fa41 	bl	800cf34 <d_expression_1>
 800cab2:	f7ff baa5 	b.w	800c000 <d_exprlist+0xa08>
 800cab6:	4620      	mov	r0, r4
 800cab8:	f000 fa3c 	bl	800cf34 <d_expression_1>
 800cabc:	4683      	mov	fp, r0
 800cabe:	f7ff b927 	b.w	800bd10 <d_exprlist+0x718>
 800cac2:	4620      	mov	r0, r4
 800cac4:	f7fd ff22 	bl	800a90c <d_template_args>
 800cac8:	465a      	mov	r2, fp
 800caca:	4603      	mov	r3, r0
 800cacc:	2104      	movs	r1, #4
 800cace:	4620      	mov	r0, r4
 800cad0:	f7fa f81c 	bl	8006b0c <d_make_comp>
 800cad4:	4683      	mov	fp, r0
 800cad6:	f7ff b91b 	b.w	800bd10 <d_exprlist+0x718>
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 fa2a 	bl	800cf34 <d_expression_1>
 800cae0:	9000      	str	r0, [sp, #0]
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 fa26 	bl	800cf34 <d_expression_1>
 800cae8:	4683      	mov	fp, r0
 800caea:	4620      	mov	r0, r4
 800caec:	f000 fa22 	bl	800cf34 <d_expression_1>
 800caf0:	f7ff b954 	b.w	800bd9c <d_exprlist+0x7a4>
 800caf4:	4620      	mov	r0, r4
 800caf6:	f000 fbef 	bl	800d2d8 <d_type>
 800cafa:	464a      	mov	r2, r9
 800cafc:	4603      	mov	r3, r0
 800cafe:	2135      	movs	r1, #53	; 0x35
 800cb00:	f7ff b99a 	b.w	800be38 <d_exprlist+0x840>
 800cb04:	3301      	adds	r3, #1
 800cb06:	60e3      	str	r3, [r4, #12]
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f7ff b8c4 	b.w	800bc96 <d_exprlist+0x69e>
 800cb0e:	785a      	ldrb	r2, [r3, #1]
 800cb10:	2a69      	cmp	r2, #105	; 0x69
 800cb12:	f47f ab40 	bne.w	800c196 <d_exprlist+0xb9e>
 800cb16:	3302      	adds	r3, #2
 800cb18:	60e3      	str	r3, [r4, #12]
 800cb1a:	2145      	movs	r1, #69	; 0x45
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f7fe fd6b 	bl	800b5f8 <d_exprlist>
 800cb22:	f7ff b93b 	b.w	800bd9c <d_exprlist+0x7a4>
 800cb26:	3301      	adds	r3, #1
 800cb28:	60e3      	str	r3, [r4, #12]
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	f7ff b936 	b.w	800bd9c <d_exprlist+0x7a4>
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 f9ff 	bl	800cf34 <d_expression_1>
 800cb36:	4683      	mov	fp, r0
 800cb38:	f7ff b96d 	b.w	800be16 <d_exprlist+0x81e>
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f000 f9f9 	bl	800cf34 <d_expression_1>
 800cb42:	4683      	mov	fp, r0
 800cb44:	f7ff b9f1 	b.w	800bf2a <d_exprlist+0x932>
 800cb48:	3301      	adds	r3, #1
 800cb4a:	60e3      	str	r3, [r4, #12]
 800cb4c:	2145      	movs	r1, #69	; 0x45
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f7fe fd52 	bl	800b5f8 <d_exprlist>
 800cb54:	4603      	mov	r3, r0
 800cb56:	e450      	b.n	800c3fa <d_exprlist+0xe02>
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f000 f9eb 	bl	800cf34 <d_expression_1>
 800cb5e:	4681      	mov	r9, r0
 800cb60:	f7ff ba8b 	b.w	800c07a <d_exprlist+0xa82>
 800cb64:	785a      	ldrb	r2, [r3, #1]
 800cb66:	2a69      	cmp	r2, #105	; 0x69
 800cb68:	f47f ab0e 	bne.w	800c188 <d_exprlist+0xb90>
 800cb6c:	3302      	adds	r3, #2
 800cb6e:	60e3      	str	r3, [r4, #12]
 800cb70:	2145      	movs	r1, #69	; 0x45
 800cb72:	4620      	mov	r0, r4
 800cb74:	f7fe fd40 	bl	800b5f8 <d_exprlist>
 800cb78:	f7ff ba42 	b.w	800c000 <d_exprlist+0xa08>
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	60e3      	str	r3, [r4, #12]
 800cb80:	2000      	movs	r0, #0
 800cb82:	f7ff ba3d 	b.w	800c000 <d_exprlist+0xa08>
 800cb86:	2145      	movs	r1, #69	; 0x45
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f7fe fd35 	bl	800b5f8 <d_exprlist>
 800cb8e:	4683      	mov	fp, r0
 800cb90:	f7ff b9cb 	b.w	800bf2a <d_exprlist+0x932>
 800cb94:	7812      	ldrb	r2, [r2, #0]
 800cb96:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800cb9a:	2901      	cmp	r1, #1
 800cb9c:	d903      	bls.n	800cba6 <d_exprlist+0x15ae>
 800cb9e:	3a72      	subs	r2, #114	; 0x72
 800cba0:	2a01      	cmp	r2, #1
 800cba2:	f63f a999 	bhi.w	800bed8 <d_exprlist+0x8e0>
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 fb96 	bl	800d2d8 <d_type>
 800cbac:	9000      	str	r0, [sp, #0]
 800cbae:	f7ff b997 	b.w	800bee0 <d_exprlist+0x8e8>
 800cbb2:	785a      	ldrb	r2, [r3, #1]
 800cbb4:	2a69      	cmp	r2, #105	; 0x69
 800cbb6:	f47e afab 	bne.w	800bb10 <d_exprlist+0x518>
 800cbba:	3302      	adds	r3, #2
 800cbbc:	60e3      	str	r3, [r4, #12]
 800cbbe:	2145      	movs	r1, #69	; 0x45
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f7fe fd19 	bl	800b5f8 <d_exprlist>
 800cbc6:	f7ff b866 	b.w	800bc96 <d_exprlist+0x69e>
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7fd fe9e 	bl	800a90c <d_template_args>
 800cbd0:	465a      	mov	r2, fp
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2104      	movs	r1, #4
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f7f9 ff98 	bl	8006b0c <d_make_comp>
 800cbdc:	4683      	mov	fp, r0
 800cbde:	f7ff b91a 	b.w	800be16 <d_exprlist+0x81e>
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	60e3      	str	r3, [r4, #12]
 800cbe6:	2145      	movs	r1, #69	; 0x45
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f7fe fd05 	bl	800b5f8 <d_exprlist>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	e422      	b.n	800c438 <d_exprlist+0xe40>
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f7fd fe8a 	bl	800a90c <d_template_args>
 800cbf8:	465a      	mov	r2, fp
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2104      	movs	r1, #4
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f7f9 ff84 	bl	8006b0c <d_make_comp>
 800cc04:	464a      	mov	r2, r9
 800cc06:	4603      	mov	r3, r0
 800cc08:	2101      	movs	r1, #1
 800cc0a:	f7ff b915 	b.w	800be38 <d_exprlist+0x840>
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f7fd fe7c 	bl	800a90c <d_template_args>
 800cc14:	464a      	mov	r2, r9
 800cc16:	4603      	mov	r3, r0
 800cc18:	2104      	movs	r1, #4
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f7f9 ff76 	bl	8006b0c <d_make_comp>
 800cc20:	4681      	mov	r9, r0
 800cc22:	f7ff ba2a 	b.w	800c07a <d_exprlist+0xa82>
 800cc26:	4620      	mov	r0, r4
 800cc28:	f000 f984 	bl	800cf34 <d_expression_1>
 800cc2c:	9000      	str	r0, [sp, #0]
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f000 f980 	bl	800cf34 <d_expression_1>
 800cc34:	4683      	mov	fp, r0
 800cc36:	4620      	mov	r0, r4
 800cc38:	f000 f97c 	bl	800cf34 <d_expression_1>
 800cc3c:	f7ff b933 	b.w	800bea6 <d_exprlist+0x8ae>
 800cc40:	3201      	adds	r2, #1
 800cc42:	60e2      	str	r2, [r4, #12]
 800cc44:	2000      	movs	r0, #0
 800cc46:	f7ff b92e 	b.w	800bea6 <d_exprlist+0x8ae>
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	60e3      	str	r3, [r4, #12]
 800cc4e:	2000      	movs	r0, #0
 800cc50:	f7ff bb24 	b.w	800c29c <d_exprlist+0xca4>
 800cc54:	9000      	str	r0, [sp, #0]
 800cc56:	4620      	mov	r0, r4
 800cc58:	f7fd fe58 	bl	800a90c <d_template_args>
 800cc5c:	9a00      	ldr	r2, [sp, #0]
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2104      	movs	r1, #4
 800cc62:	4620      	mov	r0, r4
 800cc64:	f7f9 ff52 	bl	8006b0c <d_make_comp>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	e65c      	b.n	800c926 <d_exprlist+0x132e>
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	f000 f961 	bl	800cf34 <d_expression_1>
 800cc72:	9000      	str	r0, [sp, #0]
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 f95d 	bl	800cf34 <d_expression_1>
 800cc7a:	9001      	str	r0, [sp, #4]
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f000 f959 	bl	800cf34 <d_expression_1>
 800cc82:	f7ff bb0b 	b.w	800c29c <d_exprlist+0xca4>
 800cc86:	2145      	movs	r1, #69	; 0x45
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f7fe fcb5 	bl	800b5f8 <d_exprlist>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	f7ff bb5c 	b.w	800c34c <d_exprlist+0xd54>
 800cc94:	7812      	ldrb	r2, [r2, #0]
 800cc96:	f1a2 0163 	sub.w	r1, r2, #99	; 0x63
 800cc9a:	2901      	cmp	r1, #1
 800cc9c:	d903      	bls.n	800cca6 <d_exprlist+0x16ae>
 800cc9e:	3a72      	subs	r2, #114	; 0x72
 800cca0:	2a01      	cmp	r2, #1
 800cca2:	f63f ab23 	bhi.w	800c2ec <d_exprlist+0xcf4>
 800cca6:	4620      	mov	r0, r4
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	f000 fb15 	bl	800d2d8 <d_type>
 800ccae:	9b01      	ldr	r3, [sp, #4]
 800ccb0:	9000      	str	r0, [sp, #0]
 800ccb2:	f7ff bb21 	b.w	800c2f8 <d_exprlist+0xd00>
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f000 f93c 	bl	800cf34 <d_expression_1>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	f7ff bb45 	b.w	800c34c <d_exprlist+0xd54>
 800ccc2:	2b6f      	cmp	r3, #111	; 0x6f
 800ccc4:	d017      	beq.n	800ccf6 <d_exprlist+0x16fe>
 800ccc6:	2b69      	cmp	r3, #105	; 0x69
 800ccc8:	d11d      	bne.n	800cd06 <d_exprlist+0x170e>
 800ccca:	7853      	ldrb	r3, [r2, #1]
 800cccc:	2b6c      	cmp	r3, #108	; 0x6c
 800ccce:	f47f aa94 	bne.w	800c1fa <d_exprlist+0xc02>
 800ccd2:	f04f 0b00 	mov.w	fp, #0
 800ccd6:	68e3      	ldr	r3, [r4, #12]
 800ccd8:	2145      	movs	r1, #69	; 0x45
 800ccda:	3302      	adds	r3, #2
 800ccdc:	60e3      	str	r3, [r4, #12]
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7fe fc8a 	bl	800b5f8 <d_exprlist>
 800cce4:	465a      	mov	r2, fp
 800cce6:	4603      	mov	r3, r0
 800cce8:	2130      	movs	r1, #48	; 0x30
 800ccea:	4620      	mov	r0, r4
 800ccec:	f7f9 ff0e 	bl	8006b0c <d_make_comp>
 800ccf0:	4683      	mov	fp, r0
 800ccf2:	f7fe bd71 	b.w	800b7d8 <d_exprlist+0x1e0>
 800ccf6:	7853      	ldrb	r3, [r2, #1]
 800ccf8:	2b6e      	cmp	r3, #110	; 0x6e
 800ccfa:	f47f aa7e 	bne.w	800c1fa <d_exprlist+0xc02>
 800ccfe:	3202      	adds	r2, #2
 800cd00:	60e2      	str	r2, [r4, #12]
 800cd02:	f7fe beaf 	b.w	800ba64 <d_exprlist+0x46c>
 800cd06:	2b74      	cmp	r3, #116	; 0x74
 800cd08:	f47f aa77 	bne.w	800c1fa <d_exprlist+0xc02>
 800cd0c:	7853      	ldrb	r3, [r2, #1]
 800cd0e:	2b6c      	cmp	r3, #108	; 0x6c
 800cd10:	f47f aa73 	bne.w	800c1fa <d_exprlist+0xc02>
 800cd14:	4620      	mov	r0, r4
 800cd16:	f000 fadf 	bl	800d2d8 <d_type>
 800cd1a:	4683      	mov	fp, r0
 800cd1c:	e7db      	b.n	800ccd6 <d_exprlist+0x16de>
 800cd1e:	460a      	mov	r2, r1
 800cd20:	f7fe be3b 	b.w	800b99a <d_exprlist+0x3a2>
 800cd24:	3301      	adds	r3, #1
 800cd26:	60e3      	str	r3, [r4, #12]
 800cd28:	2145      	movs	r1, #69	; 0x45
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f7fe fc64 	bl	800b5f8 <d_exprlist>
 800cd30:	4603      	mov	r3, r0
 800cd32:	e44e      	b.n	800c5d2 <d_exprlist+0xfda>
 800cd34:	3301      	adds	r3, #1
 800cd36:	60e3      	str	r3, [r4, #12]
 800cd38:	e40a      	b.n	800c550 <d_exprlist+0xf58>
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	60e3      	str	r3, [r4, #12]
 800cd3e:	e43a      	b.n	800c5b6 <d_exprlist+0xfbe>
 800cd40:	f04f 0a00 	mov.w	sl, #0
 800cd44:	3102      	adds	r1, #2
 800cd46:	60e1      	str	r1, [r4, #12]
 800cd48:	4620      	mov	r0, r4
 800cd4a:	2145      	movs	r1, #69	; 0x45
 800cd4c:	f7fe fc54 	bl	800b5f8 <d_exprlist>
 800cd50:	4652      	mov	r2, sl
 800cd52:	4603      	mov	r3, r0
 800cd54:	2130      	movs	r1, #48	; 0x30
 800cd56:	4620      	mov	r0, r4
 800cd58:	f7f9 fed8 	bl	8006b0c <d_make_comp>
 800cd5c:	4682      	mov	sl, r0
 800cd5e:	f7fe bd77 	b.w	800b850 <d_exprlist+0x258>
 800cd62:	2b6f      	cmp	r3, #111	; 0x6f
 800cd64:	d010      	beq.n	800cd88 <d_exprlist+0x1790>
 800cd66:	2b69      	cmp	r3, #105	; 0x69
 800cd68:	d13b      	bne.n	800cde2 <d_exprlist+0x17ea>
 800cd6a:	7843      	ldrb	r3, [r0, #1]
 800cd6c:	2b6c      	cmp	r3, #108	; 0x6c
 800cd6e:	f47e af09 	bne.w	800bb84 <d_exprlist+0x58c>
 800cd72:	1c82      	adds	r2, r0, #2
 800cd74:	60e2      	str	r2, [r4, #12]
 800cd76:	2145      	movs	r1, #69	; 0x45
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f7fe fc3d 	bl	800b5f8 <d_exprlist>
 800cd7e:	465a      	mov	r2, fp
 800cd80:	4603      	mov	r3, r0
 800cd82:	2130      	movs	r1, #48	; 0x30
 800cd84:	f7ff b858 	b.w	800be38 <d_exprlist+0x840>
 800cd88:	7843      	ldrb	r3, [r0, #1]
 800cd8a:	2b6e      	cmp	r3, #110	; 0x6e
 800cd8c:	f47e aefa 	bne.w	800bb84 <d_exprlist+0x58c>
 800cd90:	1c82      	adds	r2, r0, #2
 800cd92:	60e2      	str	r2, [r4, #12]
 800cd94:	f7fe be4b 	b.w	800ba2e <d_exprlist+0x436>
 800cd98:	2b6f      	cmp	r3, #111	; 0x6f
 800cd9a:	d016      	beq.n	800cdca <d_exprlist+0x17d2>
 800cd9c:	2b69      	cmp	r3, #105	; 0x69
 800cd9e:	d12d      	bne.n	800cdfc <d_exprlist+0x1804>
 800cda0:	78d3      	ldrb	r3, [r2, #3]
 800cda2:	2b6c      	cmp	r3, #108	; 0x6c
 800cda4:	f47f a8d2 	bne.w	800bf4c <d_exprlist+0x954>
 800cda8:	f04f 0800 	mov.w	r8, #0
 800cdac:	3102      	adds	r1, #2
 800cdae:	60e1      	str	r1, [r4, #12]
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	2145      	movs	r1, #69	; 0x45
 800cdb4:	f7fe fc20 	bl	800b5f8 <d_exprlist>
 800cdb8:	4642      	mov	r2, r8
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2130      	movs	r1, #48	; 0x30
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f7f9 fea4 	bl	8006b0c <d_make_comp>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	f7fe bde8 	b.w	800b99a <d_exprlist+0x3a2>
 800cdca:	78d3      	ldrb	r3, [r2, #3]
 800cdcc:	2b6e      	cmp	r3, #110	; 0x6e
 800cdce:	f47f a8bd 	bne.w	800bf4c <d_exprlist+0x954>
 800cdd2:	3204      	adds	r2, #4
 800cdd4:	60e2      	str	r2, [r4, #12]
 800cdd6:	f7fe bdd3 	b.w	800b980 <d_exprlist+0x388>
 800cdda:	3301      	adds	r3, #1
 800cddc:	60e3      	str	r3, [r4, #12]
 800cdde:	f7ff bb1c 	b.w	800c41a <d_exprlist+0xe22>
 800cde2:	2b74      	cmp	r3, #116	; 0x74
 800cde4:	f47e aece 	bne.w	800bb84 <d_exprlist+0x58c>
 800cde8:	7843      	ldrb	r3, [r0, #1]
 800cdea:	2b6c      	cmp	r3, #108	; 0x6c
 800cdec:	f47e aeca 	bne.w	800bb84 <d_exprlist+0x58c>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 fa71 	bl	800d2d8 <d_type>
 800cdf6:	4683      	mov	fp, r0
 800cdf8:	68e0      	ldr	r0, [r4, #12]
 800cdfa:	e7ba      	b.n	800cd72 <d_exprlist+0x177a>
 800cdfc:	2b74      	cmp	r3, #116	; 0x74
 800cdfe:	f47f a8a5 	bne.w	800bf4c <d_exprlist+0x954>
 800ce02:	78d3      	ldrb	r3, [r2, #3]
 800ce04:	2b6c      	cmp	r3, #108	; 0x6c
 800ce06:	f47f a8a1 	bne.w	800bf4c <d_exprlist+0x954>
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	f000 fa64 	bl	800d2d8 <d_type>
 800ce10:	68e1      	ldr	r1, [r4, #12]
 800ce12:	4680      	mov	r8, r0
 800ce14:	e7ca      	b.n	800cdac <d_exprlist+0x17b4>
 800ce16:	7853      	ldrb	r3, [r2, #1]
 800ce18:	2b69      	cmp	r3, #105	; 0x69
 800ce1a:	d00f      	beq.n	800ce3c <d_exprlist+0x1844>
 800ce1c:	f04f 0900 	mov.w	r9, #0
 800ce20:	f7ff b9eb 	b.w	800c1fa <d_exprlist+0xc02>
 800ce24:	785a      	ldrb	r2, [r3, #1]
 800ce26:	2a69      	cmp	r2, #105	; 0x69
 800ce28:	f47f ab22 	bne.w	800c470 <d_exprlist+0xe78>
 800ce2c:	3302      	adds	r3, #2
 800ce2e:	60e3      	str	r3, [r4, #12]
 800ce30:	2145      	movs	r1, #69	; 0x45
 800ce32:	4620      	mov	r0, r4
 800ce34:	f7fe fbe0 	bl	800b5f8 <d_exprlist>
 800ce38:	f7ff ba30 	b.w	800c29c <d_exprlist+0xca4>
 800ce3c:	3202      	adds	r2, #2
 800ce3e:	60e2      	str	r2, [r4, #12]
 800ce40:	2145      	movs	r1, #69	; 0x45
 800ce42:	4620      	mov	r0, r4
 800ce44:	f7fe fbd8 	bl	800b5f8 <d_exprlist>
 800ce48:	f7ff b82d 	b.w	800bea6 <d_exprlist+0x8ae>
 800ce4c:	2b6f      	cmp	r3, #111	; 0x6f
 800ce4e:	d016      	beq.n	800ce7e <d_exprlist+0x1886>
 800ce50:	2b69      	cmp	r3, #105	; 0x69
 800ce52:	d120      	bne.n	800ce96 <d_exprlist+0x189e>
 800ce54:	784b      	ldrb	r3, [r1, #1]
 800ce56:	2b6c      	cmp	r3, #108	; 0x6c
 800ce58:	f47e ae4a 	bne.w	800baf0 <d_exprlist+0x4f8>
 800ce5c:	f04f 0900 	mov.w	r9, #0
 800ce60:	3102      	adds	r1, #2
 800ce62:	60e1      	str	r1, [r4, #12]
 800ce64:	4620      	mov	r0, r4
 800ce66:	2145      	movs	r1, #69	; 0x45
 800ce68:	f7fe fbc6 	bl	800b5f8 <d_exprlist>
 800ce6c:	464a      	mov	r2, r9
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2130      	movs	r1, #48	; 0x30
 800ce72:	4620      	mov	r0, r4
 800ce74:	f7f9 fe4a 	bl	8006b0c <d_make_comp>
 800ce78:	4681      	mov	r9, r0
 800ce7a:	f7fe bd3f 	b.w	800b8fc <d_exprlist+0x304>
 800ce7e:	784b      	ldrb	r3, [r1, #1]
 800ce80:	2b6e      	cmp	r3, #110	; 0x6e
 800ce82:	f47e ae35 	bne.w	800baf0 <d_exprlist+0x4f8>
 800ce86:	3102      	adds	r1, #2
 800ce88:	60e1      	str	r1, [r4, #12]
 800ce8a:	f7fe bd2d 	b.w	800b8e8 <d_exprlist+0x2f0>
 800ce8e:	3301      	adds	r3, #1
 800ce90:	60e3      	str	r3, [r4, #12]
 800ce92:	f7ff baa3 	b.w	800c3dc <d_exprlist+0xde4>
 800ce96:	2b74      	cmp	r3, #116	; 0x74
 800ce98:	f47e ae2a 	bne.w	800baf0 <d_exprlist+0x4f8>
 800ce9c:	784b      	ldrb	r3, [r1, #1]
 800ce9e:	2b6c      	cmp	r3, #108	; 0x6c
 800cea0:	f47e ae26 	bne.w	800baf0 <d_exprlist+0x4f8>
 800cea4:	4620      	mov	r0, r4
 800cea6:	f000 fa17 	bl	800d2d8 <d_type>
 800ceaa:	68e1      	ldr	r1, [r4, #12]
 800ceac:	4681      	mov	r9, r0
 800ceae:	e7d7      	b.n	800ce60 <d_exprlist+0x1868>
 800ceb0:	2b74      	cmp	r3, #116	; 0x74
 800ceb2:	f47e ae8a 	bne.w	800bbca <d_exprlist+0x5d2>
 800ceb6:	784b      	ldrb	r3, [r1, #1]
 800ceb8:	2b6c      	cmp	r3, #108	; 0x6c
 800ceba:	f47e ae86 	bne.w	800bbca <d_exprlist+0x5d2>
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 fa0a 	bl	800d2d8 <d_type>
 800cec4:	68e1      	ldr	r1, [r4, #12]
 800cec6:	4682      	mov	sl, r0
 800cec8:	e73c      	b.n	800cd44 <d_exprlist+0x174c>
 800ceca:	2b6f      	cmp	r3, #111	; 0x6f
 800cecc:	d016      	beq.n	800cefc <d_exprlist+0x1904>
 800cece:	2b69      	cmp	r3, #105	; 0x69
 800ced0:	d11c      	bne.n	800cf0c <d_exprlist+0x1914>
 800ced2:	7853      	ldrb	r3, [r2, #1]
 800ced4:	2b6c      	cmp	r3, #108	; 0x6c
 800ced6:	f47e abd3 	bne.w	800b680 <d_exprlist+0x88>
 800ceda:	f04f 0800 	mov.w	r8, #0
 800cede:	3202      	adds	r2, #2
 800cee0:	60e2      	str	r2, [r4, #12]
 800cee2:	2145      	movs	r1, #69	; 0x45
 800cee4:	4620      	mov	r0, r4
 800cee6:	f7fe fb87 	bl	800b5f8 <d_exprlist>
 800ceea:	4642      	mov	r2, r8
 800ceec:	4603      	mov	r3, r0
 800ceee:	2130      	movs	r1, #48	; 0x30
 800cef0:	4620      	mov	r0, r4
 800cef2:	f7f9 fe0b 	bl	8006b0c <d_make_comp>
 800cef6:	4602      	mov	r2, r0
 800cef8:	f7fe bc07 	b.w	800b70a <d_exprlist+0x112>
 800cefc:	7853      	ldrb	r3, [r2, #1]
 800cefe:	2b6e      	cmp	r3, #110	; 0x6e
 800cf00:	f47e abbe 	bne.w	800b680 <d_exprlist+0x88>
 800cf04:	3202      	adds	r2, #2
 800cf06:	60e2      	str	r2, [r4, #12]
 800cf08:	f7fe bb8b 	b.w	800b622 <d_exprlist+0x2a>
 800cf0c:	2b74      	cmp	r3, #116	; 0x74
 800cf0e:	f47e abb7 	bne.w	800b680 <d_exprlist+0x88>
 800cf12:	7853      	ldrb	r3, [r2, #1]
 800cf14:	2b6c      	cmp	r3, #108	; 0x6c
 800cf16:	f47e abb3 	bne.w	800b680 <d_exprlist+0x88>
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f000 f9dc 	bl	800d2d8 <d_type>
 800cf20:	68e2      	ldr	r2, [r4, #12]
 800cf22:	4680      	mov	r8, r0
 800cf24:	e7db      	b.n	800cede <d_exprlist+0x18e6>
 800cf26:	f04f 0900 	mov.w	r9, #0
 800cf2a:	e6ce      	b.n	800ccca <d_exprlist+0x16d2>
 800cf2c:	f04f 0900 	mov.w	r9, #0
 800cf30:	f7fe bd87 	b.w	800ba42 <d_exprlist+0x44a>

0800cf34 <d_expression_1>:
 800cf34:	68c2      	ldr	r2, [r0, #12]
 800cf36:	7813      	ldrb	r3, [r2, #0]
 800cf38:	2b4c      	cmp	r3, #76	; 0x4c
 800cf3a:	d060      	beq.n	800cffe <d_expression_1+0xca>
 800cf3c:	2b54      	cmp	r3, #84	; 0x54
 800cf3e:	d060      	beq.n	800d002 <d_expression_1+0xce>
 800cf40:	2b73      	cmp	r3, #115	; 0x73
 800cf42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	4604      	mov	r4, r0
 800cf48:	d024      	beq.n	800cf94 <d_expression_1+0x60>
 800cf4a:	2b66      	cmp	r3, #102	; 0x66
 800cf4c:	d00f      	beq.n	800cf6e <d_expression_1+0x3a>
 800cf4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cf52:	2909      	cmp	r1, #9
 800cf54:	f200 818b 	bhi.w	800d26e <d_expression_1+0x33a>
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 fe39 	bl	800dbd0 <d_unqualified_name>
 800cf5e:	4605      	mov	r5, r0
 800cf60:	b1a8      	cbz	r0, 800cf8e <d_expression_1+0x5a>
 800cf62:	68e3      	ldr	r3, [r4, #12]
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	2b49      	cmp	r3, #73	; 0x49
 800cf68:	d062      	beq.n	800d030 <d_expression_1+0xfc>
 800cf6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf6e:	7853      	ldrb	r3, [r2, #1]
 800cf70:	2b70      	cmp	r3, #112	; 0x70
 800cf72:	d029      	beq.n	800cfc8 <d_expression_1+0x94>
 800cf74:	4620      	mov	r0, r4
 800cf76:	f000 fd6b 	bl	800da50 <d_operator_name>
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	b138      	cbz	r0, 800cf8e <d_expression_1+0x5a>
 800cf7e:	7803      	ldrb	r3, [r0, #0]
 800cf80:	2b31      	cmp	r3, #49	; 0x31
 800cf82:	d040      	beq.n	800d006 <d_expression_1+0xd2>
 800cf84:	2b32      	cmp	r3, #50	; 0x32
 800cf86:	d016      	beq.n	800cfb6 <d_expression_1+0x82>
 800cf88:	2b33      	cmp	r3, #51	; 0x33
 800cf8a:	f000 8115 	beq.w	800d1b8 <d_expression_1+0x284>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf94:	7853      	ldrb	r3, [r2, #1]
 800cf96:	2b72      	cmp	r3, #114	; 0x72
 800cf98:	d055      	beq.n	800d046 <d_expression_1+0x112>
 800cf9a:	2b70      	cmp	r3, #112	; 0x70
 800cf9c:	d1ea      	bne.n	800cf74 <d_expression_1+0x40>
 800cf9e:	3202      	adds	r2, #2
 800cfa0:	60c2      	str	r2, [r0, #12]
 800cfa2:	f7ff ffc7 	bl	800cf34 <d_expression_1>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	2149      	movs	r1, #73	; 0x49
 800cfac:	4620      	mov	r0, r4
 800cfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb2:	f7f9 bdab 	b.w	8006b0c <d_make_comp>
 800cfb6:	686b      	ldr	r3, [r5, #4]
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d8e8      	bhi.n	800cf8e <d_expression_1+0x5a>
 800cfbc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cfc0:	00d9005d 	.word	0x00d9005d
 800cfc4:	006500a6 	.word	0x006500a6
 800cfc8:	1c93      	adds	r3, r2, #2
 800cfca:	60c3      	str	r3, [r0, #12]
 800cfcc:	7893      	ldrb	r3, [r2, #2]
 800cfce:	2b54      	cmp	r3, #84	; 0x54
 800cfd0:	d04f      	beq.n	800d072 <d_expression_1+0x13e>
 800cfd2:	f7f9 ff25 	bl	8006e20 <d_compact_number>
 800cfd6:	1c45      	adds	r5, r0, #1
 800cfd8:	d0d9      	beq.n	800cf8e <d_expression_1+0x5a>
 800cfda:	6963      	ldr	r3, [r4, #20]
 800cfdc:	69a2      	ldr	r2, [r4, #24]
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	dad5      	bge.n	800cf8e <d_expression_1+0x5a>
 800cfe2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cfe6:	6921      	ldr	r1, [r4, #16]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	0092      	lsls	r2, r2, #2
 800cfec:	6163      	str	r3, [r4, #20]
 800cfee:	188b      	adds	r3, r1, r2
 800cff0:	d0cd      	beq.n	800cf8e <d_expression_1+0x5a>
 800cff2:	2006      	movs	r0, #6
 800cff4:	5488      	strb	r0, [r1, r2]
 800cff6:	605d      	str	r5, [r3, #4]
 800cff8:	4618      	mov	r0, r3
 800cffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cffe:	f001 bc63 	b.w	800e8c8 <d_expr_primary>
 800d002:	f7f9 bf25 	b.w	8006e50 <d_template_param>
 800d006:	6847      	ldr	r7, [r0, #4]
 800d008:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	683e      	ldr	r6, [r7, #0]
 800d00e:	3b02      	subs	r3, #2
 800d010:	4413      	add	r3, r2
 800d012:	6323      	str	r3, [r4, #48]	; 0x30
 800d014:	4630      	mov	r0, r6
 800d016:	49ab      	ldr	r1, [pc, #684]	; (800d2c4 <d_expression_1+0x390>)
 800d018:	f001 fed0 	bl	800edbc <strcmp>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f000 80d7 	beq.w	800d1d0 <d_expression_1+0x29c>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2b03      	cmp	r3, #3
 800d026:	d8b2      	bhi.n	800cf8e <d_expression_1+0x5a>
 800d028:	e8df f003 	tbb	[pc, r3]
 800d02c:	3071b627 	.word	0x3071b627
 800d030:	4620      	mov	r0, r4
 800d032:	f7fd fc6b 	bl	800a90c <d_template_args>
 800d036:	462a      	mov	r2, r5
 800d038:	4603      	mov	r3, r0
 800d03a:	2104      	movs	r1, #4
 800d03c:	4620      	mov	r0, r4
 800d03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d042:	f7f9 bd63 	b.w	8006b0c <d_make_comp>
 800d046:	3202      	adds	r2, #2
 800d048:	60c2      	str	r2, [r0, #12]
 800d04a:	f000 f945 	bl	800d2d8 <d_type>
 800d04e:	4605      	mov	r5, r0
 800d050:	4620      	mov	r0, r4
 800d052:	f000 fdbd 	bl	800dbd0 <d_unqualified_name>
 800d056:	68e3      	ldr	r3, [r4, #12]
 800d058:	4606      	mov	r6, r0
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b49      	cmp	r3, #73	; 0x49
 800d05e:	f000 80db 	beq.w	800d218 <d_expression_1+0x2e4>
 800d062:	4603      	mov	r3, r0
 800d064:	462a      	mov	r2, r5
 800d066:	4620      	mov	r0, r4
 800d068:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d06c:	2101      	movs	r1, #1
 800d06e:	f7f9 bd4d 	b.w	8006b0c <d_make_comp>
 800d072:	3203      	adds	r2, #3
 800d074:	60c2      	str	r2, [r0, #12]
 800d076:	2500      	movs	r5, #0
 800d078:	e7af      	b.n	800cfda <d_expression_1+0xa6>
 800d07a:	462a      	mov	r2, r5
 800d07c:	4620      	mov	r0, r4
 800d07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d082:	2300      	movs	r3, #0
 800d084:	2134      	movs	r1, #52	; 0x34
 800d086:	f7f9 bd41 	b.w	8006b0c <d_make_comp>
 800d08a:	2600      	movs	r6, #0
 800d08c:	498e      	ldr	r1, [pc, #568]	; (800d2c8 <d_expression_1+0x394>)
 800d08e:	4630      	mov	r0, r6
 800d090:	f001 fe94 	bl	800edbc <strcmp>
 800d094:	2800      	cmp	r0, #0
 800d096:	f000 809f 	beq.w	800d1d8 <d_expression_1+0x2a4>
 800d09a:	7833      	ldrb	r3, [r6, #0]
 800d09c:	2b6e      	cmp	r3, #110	; 0x6e
 800d09e:	f47f af76 	bne.w	800cf8e <d_expression_1+0x5a>
 800d0a2:	7873      	ldrb	r3, [r6, #1]
 800d0a4:	2b77      	cmp	r3, #119	; 0x77
 800d0a6:	d002      	beq.n	800d0ae <d_expression_1+0x17a>
 800d0a8:	2b61      	cmp	r3, #97	; 0x61
 800d0aa:	f47f af70 	bne.w	800cf8e <d_expression_1+0x5a>
 800d0ae:	215f      	movs	r1, #95	; 0x5f
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f7fe faa1 	bl	800b5f8 <d_exprlist>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f000 f90d 	bl	800d2d8 <d_type>
 800d0be:	68e3      	ldr	r3, [r4, #12]
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	7819      	ldrb	r1, [r3, #0]
 800d0c4:	2945      	cmp	r1, #69	; 0x45
 800d0c6:	f000 80b7 	beq.w	800d238 <d_expression_1+0x304>
 800d0ca:	2970      	cmp	r1, #112	; 0x70
 800d0cc:	f000 80c3 	beq.w	800d256 <d_expression_1+0x322>
 800d0d0:	2969      	cmp	r1, #105	; 0x69
 800d0d2:	f47f af5c 	bne.w	800cf8e <d_expression_1+0x5a>
 800d0d6:	785b      	ldrb	r3, [r3, #1]
 800d0d8:	2b6c      	cmp	r3, #108	; 0x6c
 800d0da:	f47f af58 	bne.w	800cf8e <d_expression_1+0x5a>
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f7ff ff28 	bl	800cf34 <d_expression_1>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	463a      	mov	r2, r7
 800d0e8:	213a      	movs	r1, #58	; 0x3a
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f7f9 fd0e 	bl	8006b0c <d_make_comp>
 800d0f0:	4632      	mov	r2, r6
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2139      	movs	r1, #57	; 0x39
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7f9 fd08 	bl	8006b0c <d_make_comp>
 800d0fc:	462a      	mov	r2, r5
 800d0fe:	4603      	mov	r3, r0
 800d100:	2138      	movs	r1, #56	; 0x38
 800d102:	4620      	mov	r0, r4
 800d104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d108:	f7f9 bd00 	b.w	8006b0c <d_make_comp>
 800d10c:	2600      	movs	r6, #0
 800d10e:	686b      	ldr	r3, [r5, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	785a      	ldrb	r2, [r3, #1]
 800d114:	2a63      	cmp	r2, #99	; 0x63
 800d116:	d072      	beq.n	800d1fe <d_expression_1+0x2ca>
 800d118:	4620      	mov	r0, r4
 800d11a:	f7ff ff0b 	bl	800cf34 <d_expression_1>
 800d11e:	4607      	mov	r7, r0
 800d120:	496a      	ldr	r1, [pc, #424]	; (800d2cc <d_expression_1+0x398>)
 800d122:	4630      	mov	r0, r6
 800d124:	f001 fe4a 	bl	800edbc <strcmp>
 800d128:	2800      	cmp	r0, #0
 800d12a:	d062      	beq.n	800d1f2 <d_expression_1+0x2be>
 800d12c:	4968      	ldr	r1, [pc, #416]	; (800d2d0 <d_expression_1+0x39c>)
 800d12e:	4630      	mov	r0, r6
 800d130:	f001 fe44 	bl	800edbc <strcmp>
 800d134:	b128      	cbz	r0, 800d142 <d_expression_1+0x20e>
 800d136:	4630      	mov	r0, r6
 800d138:	4966      	ldr	r1, [pc, #408]	; (800d2d4 <d_expression_1+0x3a0>)
 800d13a:	f001 fe3f 	bl	800edbc <strcmp>
 800d13e:	2800      	cmp	r0, #0
 800d140:	d175      	bne.n	800d22e <d_expression_1+0x2fa>
 800d142:	4620      	mov	r0, r4
 800d144:	f000 fd44 	bl	800dbd0 <d_unqualified_name>
 800d148:	68e3      	ldr	r3, [r4, #12]
 800d14a:	4606      	mov	r6, r0
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b49      	cmp	r3, #73	; 0x49
 800d150:	d076      	beq.n	800d240 <d_expression_1+0x30c>
 800d152:	4633      	mov	r3, r6
 800d154:	463a      	mov	r2, r7
 800d156:	2137      	movs	r1, #55	; 0x37
 800d158:	4620      	mov	r0, r4
 800d15a:	f7f9 fcd7 	bl	8006b0c <d_make_comp>
 800d15e:	462a      	mov	r2, r5
 800d160:	4603      	mov	r3, r0
 800d162:	2136      	movs	r1, #54	; 0x36
 800d164:	4620      	mov	r0, r4
 800d166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d16a:	f7f9 bccf 	b.w	8006b0c <d_make_comp>
 800d16e:	3301      	adds	r3, #1
 800d170:	60e3      	str	r3, [r4, #12]
 800d172:	2600      	movs	r6, #0
 800d174:	4620      	mov	r0, r4
 800d176:	f7ff fedd 	bl	800cf34 <d_expression_1>
 800d17a:	4603      	mov	r3, r0
 800d17c:	b12e      	cbz	r6, 800d18a <d_expression_1+0x256>
 800d17e:	4602      	mov	r2, r0
 800d180:	2137      	movs	r1, #55	; 0x37
 800d182:	4620      	mov	r0, r4
 800d184:	f7f9 fcc2 	bl	8006b0c <d_make_comp>
 800d188:	4603      	mov	r3, r0
 800d18a:	462a      	mov	r2, r5
 800d18c:	4620      	mov	r0, r4
 800d18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d192:	2135      	movs	r1, #53	; 0x35
 800d194:	f7f9 bcba 	b.w	8006b0c <d_make_comp>
 800d198:	2e00      	cmp	r6, #0
 800d19a:	d0ea      	beq.n	800d172 <d_expression_1+0x23e>
 800d19c:	7833      	ldrb	r3, [r6, #0]
 800d19e:	2b70      	cmp	r3, #112	; 0x70
 800d1a0:	d001      	beq.n	800d1a6 <d_expression_1+0x272>
 800d1a2:	2b6d      	cmp	r3, #109	; 0x6d
 800d1a4:	d1e5      	bne.n	800d172 <d_expression_1+0x23e>
 800d1a6:	7872      	ldrb	r2, [r6, #1]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d1e2      	bne.n	800d172 <d_expression_1+0x23e>
 800d1ac:	68e3      	ldr	r3, [r4, #12]
 800d1ae:	781a      	ldrb	r2, [r3, #0]
 800d1b0:	2a5f      	cmp	r2, #95	; 0x5f
 800d1b2:	d0dc      	beq.n	800d16e <d_expression_1+0x23a>
 800d1b4:	2601      	movs	r6, #1
 800d1b6:	e7dd      	b.n	800d174 <d_expression_1+0x240>
 800d1b8:	68e3      	ldr	r3, [r4, #12]
 800d1ba:	781a      	ldrb	r2, [r3, #0]
 800d1bc:	2a5f      	cmp	r2, #95	; 0x5f
 800d1be:	d1d8      	bne.n	800d172 <d_expression_1+0x23e>
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	60e3      	str	r3, [r4, #12]
 800d1c4:	2145      	movs	r1, #69	; 0x45
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f7fe fa16 	bl	800b5f8 <d_exprlist>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	e7dc      	b.n	800d18a <d_expression_1+0x256>
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 f881 	bl	800d2d8 <d_type>
 800d1d6:	e7d7      	b.n	800d188 <d_expression_1+0x254>
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f7ff feab 	bl	800cf34 <d_expression_1>
 800d1de:	4606      	mov	r6, r0
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f7ff fea7 	bl	800cf34 <d_expression_1>
 800d1e6:	4607      	mov	r7, r0
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f7ff fea3 	bl	800cf34 <d_expression_1>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	e779      	b.n	800d0e6 <d_expression_1+0x1b2>
 800d1f2:	2145      	movs	r1, #69	; 0x45
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f7fe f9ff 	bl	800b5f8 <d_exprlist>
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	e7a9      	b.n	800d152 <d_expression_1+0x21e>
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 800d204:	2a01      	cmp	r2, #1
 800d206:	d902      	bls.n	800d20e <d_expression_1+0x2da>
 800d208:	3b72      	subs	r3, #114	; 0x72
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d884      	bhi.n	800d118 <d_expression_1+0x1e4>
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 f862 	bl	800d2d8 <d_type>
 800d214:	4607      	mov	r7, r0
 800d216:	e783      	b.n	800d120 <d_expression_1+0x1ec>
 800d218:	4620      	mov	r0, r4
 800d21a:	f7fd fb77 	bl	800a90c <d_template_args>
 800d21e:	4632      	mov	r2, r6
 800d220:	4603      	mov	r3, r0
 800d222:	2104      	movs	r1, #4
 800d224:	4620      	mov	r0, r4
 800d226:	f7f9 fc71 	bl	8006b0c <d_make_comp>
 800d22a:	4603      	mov	r3, r0
 800d22c:	e71a      	b.n	800d064 <d_expression_1+0x130>
 800d22e:	4620      	mov	r0, r4
 800d230:	f7ff fe80 	bl	800cf34 <d_expression_1>
 800d234:	4606      	mov	r6, r0
 800d236:	e78c      	b.n	800d152 <d_expression_1+0x21e>
 800d238:	3301      	adds	r3, #1
 800d23a:	60e3      	str	r3, [r4, #12]
 800d23c:	2300      	movs	r3, #0
 800d23e:	e752      	b.n	800d0e6 <d_expression_1+0x1b2>
 800d240:	4620      	mov	r0, r4
 800d242:	f7fd fb63 	bl	800a90c <d_template_args>
 800d246:	4632      	mov	r2, r6
 800d248:	4603      	mov	r3, r0
 800d24a:	2104      	movs	r1, #4
 800d24c:	4620      	mov	r0, r4
 800d24e:	f7f9 fc5d 	bl	8006b0c <d_make_comp>
 800d252:	4606      	mov	r6, r0
 800d254:	e77d      	b.n	800d152 <d_expression_1+0x21e>
 800d256:	785a      	ldrb	r2, [r3, #1]
 800d258:	2a69      	cmp	r2, #105	; 0x69
 800d25a:	f47f ae98 	bne.w	800cf8e <d_expression_1+0x5a>
 800d25e:	3302      	adds	r3, #2
 800d260:	60e3      	str	r3, [r4, #12]
 800d262:	2145      	movs	r1, #69	; 0x45
 800d264:	4620      	mov	r0, r4
 800d266:	f7fe f9c7 	bl	800b5f8 <d_exprlist>
 800d26a:	4603      	mov	r3, r0
 800d26c:	e73b      	b.n	800d0e6 <d_expression_1+0x1b2>
 800d26e:	2b6f      	cmp	r3, #111	; 0x6f
 800d270:	d014      	beq.n	800d29c <d_expression_1+0x368>
 800d272:	2b69      	cmp	r3, #105	; 0x69
 800d274:	d119      	bne.n	800d2aa <d_expression_1+0x376>
 800d276:	7853      	ldrb	r3, [r2, #1]
 800d278:	2b6c      	cmp	r3, #108	; 0x6c
 800d27a:	f47f ae7b 	bne.w	800cf74 <d_expression_1+0x40>
 800d27e:	2500      	movs	r5, #0
 800d280:	3202      	adds	r2, #2
 800d282:	60e2      	str	r2, [r4, #12]
 800d284:	2145      	movs	r1, #69	; 0x45
 800d286:	4620      	mov	r0, r4
 800d288:	f7fe f9b6 	bl	800b5f8 <d_exprlist>
 800d28c:	462a      	mov	r2, r5
 800d28e:	4603      	mov	r3, r0
 800d290:	2130      	movs	r1, #48	; 0x30
 800d292:	4620      	mov	r0, r4
 800d294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d298:	f7f9 bc38 	b.w	8006b0c <d_make_comp>
 800d29c:	7853      	ldrb	r3, [r2, #1]
 800d29e:	2b6e      	cmp	r3, #110	; 0x6e
 800d2a0:	f47f ae68 	bne.w	800cf74 <d_expression_1+0x40>
 800d2a4:	3202      	adds	r2, #2
 800d2a6:	60c2      	str	r2, [r0, #12]
 800d2a8:	e656      	b.n	800cf58 <d_expression_1+0x24>
 800d2aa:	2b74      	cmp	r3, #116	; 0x74
 800d2ac:	f47f ae62 	bne.w	800cf74 <d_expression_1+0x40>
 800d2b0:	7853      	ldrb	r3, [r2, #1]
 800d2b2:	2b6c      	cmp	r3, #108	; 0x6c
 800d2b4:	f47f ae5e 	bne.w	800cf74 <d_expression_1+0x40>
 800d2b8:	f000 f80e 	bl	800d2d8 <d_type>
 800d2bc:	68e2      	ldr	r2, [r4, #12]
 800d2be:	4605      	mov	r5, r0
 800d2c0:	e7de      	b.n	800d280 <d_expression_1+0x34c>
 800d2c2:	bf00      	nop
 800d2c4:	08015cc8 	.word	0x08015cc8
 800d2c8:	080159c0 	.word	0x080159c0
 800d2cc:	080159b8 	.word	0x080159b8
 800d2d0:	08015ad4 	.word	0x08015ad4
 800d2d4:	08015ad8 	.word	0x08015ad8

0800d2d8 <d_type>:
 800d2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2dc:	68c1      	ldr	r1, [r0, #12]
 800d2de:	b083      	sub	sp, #12
 800d2e0:	780b      	ldrb	r3, [r1, #0]
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	2b72      	cmp	r3, #114	; 0x72
 800d2e6:	d055      	beq.n	800d394 <d_type+0xbc>
 800d2e8:	2b56      	cmp	r3, #86	; 0x56
 800d2ea:	d053      	beq.n	800d394 <d_type+0xbc>
 800d2ec:	2b4b      	cmp	r3, #75	; 0x4b
 800d2ee:	d051      	beq.n	800d394 <d_type+0xbc>
 800d2f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d2f4:	2a4a      	cmp	r2, #74	; 0x4a
 800d2f6:	f200 808a 	bhi.w	800d40e <d_type+0x136>
 800d2fa:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d2fe:	00b2      	.short	0x00b2
 800d300:	00b200b2 	.word	0x00b200b2
 800d304:	00b200b2 	.word	0x00b200b2
 800d308:	00b200b2 	.word	0x00b200b2
 800d30c:	00b200b2 	.word	0x00b200b2
 800d310:	008800b2 	.word	0x008800b2
 800d314:	00880088 	.word	0x00880088
 800d318:	00880088 	.word	0x00880088
 800d31c:	00880088 	.word	0x00880088
 800d320:	008800b8 	.word	0x008800b8
 800d324:	010300e1 	.word	0x010300e1
 800d328:	00ef0088 	.word	0x00ef0088
 800d32c:	008800f5 	.word	0x008800f5
 800d330:	00880088 	.word	0x00880088
 800d334:	00880088 	.word	0x00880088
 800d338:	00b20175 	.word	0x00b20175
 800d33c:	019b018d 	.word	0x019b018d
 800d340:	01a90088 	.word	0x01a90088
 800d344:	020f01b7 	.word	0x020f01b7
 800d348:	008801d8 	.word	0x008801d8
 800d34c:	00880088 	.word	0x00880088
 800d350:	00b20088 	.word	0x00b20088
 800d354:	00880088 	.word	0x00880088
 800d358:	00880088 	.word	0x00880088
 800d35c:	00880088 	.word	0x00880088
 800d360:	01ea01ea 	.word	0x01ea01ea
 800d364:	01ea01ea 	.word	0x01ea01ea
 800d368:	01ea01ea 	.word	0x01ea01ea
 800d36c:	01ea01ea 	.word	0x01ea01ea
 800d370:	01ea01ea 	.word	0x01ea01ea
 800d374:	01ea0088 	.word	0x01ea0088
 800d378:	01ea01ea 	.word	0x01ea01ea
 800d37c:	008801ea 	.word	0x008801ea
 800d380:	00880088 	.word	0x00880088
 800d384:	01ea01ea 	.word	0x01ea01ea
 800d388:	01ea0098 	.word	0x01ea0098
 800d38c:	01ea01ea 	.word	0x01ea01ea
 800d390:	01ea01ea 	.word	0x01ea01ea
 800d394:	2200      	movs	r2, #0
 800d396:	a901      	add	r1, sp, #4
 800d398:	4620      	mov	r0, r4
 800d39a:	f7f9 fc03 	bl	8006ba4 <d_cv_qualifiers>
 800d39e:	4605      	mov	r5, r0
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d034      	beq.n	800d40e <d_type+0x136>
 800d3a4:	68e3      	ldr	r3, [r4, #12]
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	2b46      	cmp	r3, #70	; 0x46
 800d3ac:	d034      	beq.n	800d418 <d_type+0x140>
 800d3ae:	f7ff ff93 	bl	800d2d8 <d_type>
 800d3b2:	6028      	str	r0, [r5, #0]
 800d3b4:	b358      	cbz	r0, 800d40e <d_type+0x136>
 800d3b6:	7803      	ldrb	r3, [r0, #0]
 800d3b8:	3b1f      	subs	r3, #31
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d930      	bls.n	800d420 <d_type+0x148>
 800d3be:	9a01      	ldr	r2, [sp, #4]
 800d3c0:	b32a      	cbz	r2, 800d40e <d_type+0x136>
 800d3c2:	6a23      	ldr	r3, [r4, #32]
 800d3c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d3c6:	428b      	cmp	r3, r1
 800d3c8:	da21      	bge.n	800d40e <d_type+0x136>
 800d3ca:	69e0      	ldr	r0, [r4, #28]
 800d3cc:	1c59      	adds	r1, r3, #1
 800d3ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800d3d2:	9d01      	ldr	r5, [sp, #4]
 800d3d4:	6221      	str	r1, [r4, #32]
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	b003      	add	sp, #12
 800d3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3de:	2301      	movs	r3, #1
 800d3e0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	6363      	str	r3, [r4, #52]	; 0x34
 800d3e6:	f7ff fda5 	bl	800cf34 <d_expression_1>
 800d3ea:	6365      	str	r5, [r4, #52]	; 0x34
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	2141      	movs	r1, #65	; 0x41
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f7f9 fb8a 	bl	8006b0c <d_make_comp>
 800d3f8:	4605      	mov	r5, r0
 800d3fa:	9001      	str	r0, [sp, #4]
 800d3fc:	b138      	cbz	r0, 800d40e <d_type+0x136>
 800d3fe:	68e3      	ldr	r3, [r4, #12]
 800d400:	781a      	ldrb	r2, [r3, #0]
 800d402:	b122      	cbz	r2, 800d40e <d_type+0x136>
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	60e2      	str	r2, [r4, #12]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	2b45      	cmp	r3, #69	; 0x45
 800d40c:	d01e      	beq.n	800d44c <d_type+0x174>
 800d40e:	2500      	movs	r5, #0
 800d410:	4628      	mov	r0, r5
 800d412:	b003      	add	sp, #12
 800d414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d418:	f000 fd30 	bl	800de7c <d_function_type>
 800d41c:	6028      	str	r0, [r5, #0]
 800d41e:	e7c9      	b.n	800d3b4 <d_type+0xdc>
 800d420:	9a01      	ldr	r2, [sp, #4]
 800d422:	6843      	ldr	r3, [r0, #4]
 800d424:	6042      	str	r2, [r0, #4]
 800d426:	682a      	ldr	r2, [r5, #0]
 800d428:	9201      	str	r2, [sp, #4]
 800d42a:	602b      	str	r3, [r5, #0]
 800d42c:	e7c7      	b.n	800d3be <d_type+0xe6>
 800d42e:	3101      	adds	r1, #1
 800d430:	60e1      	str	r1, [r4, #12]
 800d432:	4620      	mov	r0, r4
 800d434:	f7f9 fd2e 	bl	8006e94 <d_source_name>
 800d438:	2300      	movs	r3, #0
 800d43a:	4602      	mov	r2, r0
 800d43c:	2128      	movs	r1, #40	; 0x28
 800d43e:	4620      	mov	r0, r4
 800d440:	f7f9 fb64 	bl	8006b0c <d_make_comp>
 800d444:	4605      	mov	r5, r0
 800d446:	9001      	str	r0, [sp, #4]
 800d448:	2d00      	cmp	r5, #0
 800d44a:	d0e0      	beq.n	800d40e <d_type+0x136>
 800d44c:	6a23      	ldr	r3, [r4, #32]
 800d44e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d450:	4293      	cmp	r3, r2
 800d452:	dadc      	bge.n	800d40e <d_type+0x136>
 800d454:	69e1      	ldr	r1, [r4, #28]
 800d456:	1c5a      	adds	r2, r3, #1
 800d458:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800d45c:	9d01      	ldr	r5, [sp, #4]
 800d45e:	6222      	str	r2, [r4, #32]
 800d460:	e7d6      	b.n	800d410 <d_type+0x138>
 800d462:	4620      	mov	r0, r4
 800d464:	f000 fd2a 	bl	800debc <d_name>
 800d468:	4605      	mov	r5, r0
 800d46a:	9001      	str	r0, [sp, #4]
 800d46c:	e7ec      	b.n	800d448 <d_type+0x170>
 800d46e:	1c48      	adds	r0, r1, #1
 800d470:	60e0      	str	r0, [r4, #12]
 800d472:	784b      	ldrb	r3, [r1, #1]
 800d474:	2b5f      	cmp	r3, #95	; 0x5f
 800d476:	f000 8273 	beq.w	800d960 <d_type+0x688>
 800d47a:	3b30      	subs	r3, #48	; 0x30
 800d47c:	2b09      	cmp	r3, #9
 800d47e:	f200 827d 	bhi.w	800d97c <d_type+0x6a4>
 800d482:	4603      	mov	r3, r0
 800d484:	3301      	adds	r3, #1
 800d486:	60e3      	str	r3, [r4, #12]
 800d488:	781a      	ldrb	r2, [r3, #0]
 800d48a:	3a30      	subs	r2, #48	; 0x30
 800d48c:	2a09      	cmp	r2, #9
 800d48e:	d9f9      	bls.n	800d484 <d_type+0x1ac>
 800d490:	6962      	ldr	r2, [r4, #20]
 800d492:	69a1      	ldr	r1, [r4, #24]
 800d494:	428a      	cmp	r2, r1
 800d496:	da11      	bge.n	800d4bc <d_type+0x1e4>
 800d498:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d49c:	6926      	ldr	r6, [r4, #16]
 800d49e:	0089      	lsls	r1, r1, #2
 800d4a0:	3201      	adds	r2, #1
 800d4a2:	1875      	adds	r5, r6, r1
 800d4a4:	6162      	str	r2, [r4, #20]
 800d4a6:	d009      	beq.n	800d4bc <d_type+0x1e4>
 800d4a8:	1a1a      	subs	r2, r3, r0
 800d4aa:	d007      	beq.n	800d4bc <d_type+0x1e4>
 800d4ac:	2700      	movs	r7, #0
 800d4ae:	5477      	strb	r7, [r6, r1]
 800d4b0:	6068      	str	r0, [r5, #4]
 800d4b2:	60aa      	str	r2, [r5, #8]
 800d4b4:	781a      	ldrb	r2, [r3, #0]
 800d4b6:	2a5f      	cmp	r2, #95	; 0x5f
 800d4b8:	f000 82c7 	beq.w	800da4a <d_type+0x772>
 800d4bc:	2500      	movs	r5, #0
 800d4be:	e0a9      	b.n	800d614 <d_type+0x33c>
 800d4c0:	3101      	adds	r1, #1
 800d4c2:	60e1      	str	r1, [r4, #12]
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f7ff ff07 	bl	800d2d8 <d_type>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	2125      	movs	r1, #37	; 0x25
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f7f9 fb1b 	bl	8006b0c <d_make_comp>
 800d4d6:	4605      	mov	r5, r0
 800d4d8:	9001      	str	r0, [sp, #4]
 800d4da:	e7b5      	b.n	800d448 <d_type+0x170>
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 fccd 	bl	800de7c <d_function_type>
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	9001      	str	r0, [sp, #4]
 800d4e6:	e7af      	b.n	800d448 <d_type+0x170>
 800d4e8:	3101      	adds	r1, #1
 800d4ea:	60e1      	str	r1, [r4, #12]
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f7ff fef3 	bl	800d2d8 <d_type>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	2126      	movs	r1, #38	; 0x26
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f7f9 fb07 	bl	8006b0c <d_make_comp>
 800d4fe:	4605      	mov	r5, r0
 800d500:	9001      	str	r0, [sp, #4]
 800d502:	e7a1      	b.n	800d448 <d_type+0x170>
 800d504:	1c4b      	adds	r3, r1, #1
 800d506:	60e3      	str	r3, [r4, #12]
 800d508:	784b      	ldrb	r3, [r1, #1]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f43f af7f 	beq.w	800d40e <d_type+0x136>
 800d510:	1c8b      	adds	r3, r1, #2
 800d512:	60e3      	str	r3, [r4, #12]
 800d514:	784b      	ldrb	r3, [r1, #1]
 800d516:	3b46      	subs	r3, #70	; 0x46
 800d518:	2b30      	cmp	r3, #48	; 0x30
 800d51a:	f63f af78 	bhi.w	800d40e <d_type+0x136>
 800d51e:	a201      	add	r2, pc, #4	; (adr r2, 800d524 <d_type+0x24c>)
 800d520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d524:	0800d8f1 	.word	0x0800d8f1
 800d528:	0800d40f 	.word	0x0800d40f
 800d52c:	0800d40f 	.word	0x0800d40f
 800d530:	0800d40f 	.word	0x0800d40f
 800d534:	0800d40f 	.word	0x0800d40f
 800d538:	0800d40f 	.word	0x0800d40f
 800d53c:	0800d40f 	.word	0x0800d40f
 800d540:	0800d40f 	.word	0x0800d40f
 800d544:	0800d40f 	.word	0x0800d40f
 800d548:	0800d40f 	.word	0x0800d40f
 800d54c:	0800d40f 	.word	0x0800d40f
 800d550:	0800d40f 	.word	0x0800d40f
 800d554:	0800d40f 	.word	0x0800d40f
 800d558:	0800d40f 	.word	0x0800d40f
 800d55c:	0800d3df 	.word	0x0800d3df
 800d560:	0800d40f 	.word	0x0800d40f
 800d564:	0800d40f 	.word	0x0800d40f
 800d568:	0800d40f 	.word	0x0800d40f
 800d56c:	0800d40f 	.word	0x0800d40f
 800d570:	0800d40f 	.word	0x0800d40f
 800d574:	0800d40f 	.word	0x0800d40f
 800d578:	0800d40f 	.word	0x0800d40f
 800d57c:	0800d40f 	.word	0x0800d40f
 800d580:	0800d40f 	.word	0x0800d40f
 800d584:	0800d40f 	.word	0x0800d40f
 800d588:	0800d40f 	.word	0x0800d40f
 800d58c:	0800d40f 	.word	0x0800d40f
 800d590:	0800d8c5 	.word	0x0800d8c5
 800d594:	0800d40f 	.word	0x0800d40f
 800d598:	0800d40f 	.word	0x0800d40f
 800d59c:	0800d8a9 	.word	0x0800d8a9
 800d5a0:	0800d7e5 	.word	0x0800d7e5
 800d5a4:	0800d7b9 	.word	0x0800d7b9
 800d5a8:	0800d40f 	.word	0x0800d40f
 800d5ac:	0800d78d 	.word	0x0800d78d
 800d5b0:	0800d761 	.word	0x0800d761
 800d5b4:	0800d40f 	.word	0x0800d40f
 800d5b8:	0800d40f 	.word	0x0800d40f
 800d5bc:	0800d40f 	.word	0x0800d40f
 800d5c0:	0800d40f 	.word	0x0800d40f
 800d5c4:	0800d881 	.word	0x0800d881
 800d5c8:	0800d40f 	.word	0x0800d40f
 800d5cc:	0800d869 	.word	0x0800d869
 800d5d0:	0800d40f 	.word	0x0800d40f
 800d5d4:	0800d40f 	.word	0x0800d40f
 800d5d8:	0800d84b 	.word	0x0800d84b
 800d5dc:	0800d3df 	.word	0x0800d3df
 800d5e0:	0800d40f 	.word	0x0800d40f
 800d5e4:	0800d811 	.word	0x0800d811
 800d5e8:	3101      	adds	r1, #1
 800d5ea:	60e1      	str	r1, [r4, #12]
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f7ff fe73 	bl	800d2d8 <d_type>
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f43f af61 	beq.w	800d4bc <d_type+0x1e4>
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f7ff fe6c 	bl	800d2d8 <d_type>
 800d600:	2800      	cmp	r0, #0
 800d602:	f43f af5b 	beq.w	800d4bc <d_type+0x1e4>
 800d606:	4603      	mov	r3, r0
 800d608:	462a      	mov	r2, r5
 800d60a:	212b      	movs	r1, #43	; 0x2b
 800d60c:	4620      	mov	r0, r4
 800d60e:	f7f9 fa7d 	bl	8006b0c <d_make_comp>
 800d612:	4605      	mov	r5, r0
 800d614:	9501      	str	r5, [sp, #4]
 800d616:	e717      	b.n	800d448 <d_type+0x170>
 800d618:	3101      	adds	r1, #1
 800d61a:	60e1      	str	r1, [r4, #12]
 800d61c:	4620      	mov	r0, r4
 800d61e:	f7ff fe5b 	bl	800d2d8 <d_type>
 800d622:	2300      	movs	r3, #0
 800d624:	4602      	mov	r2, r0
 800d626:	2124      	movs	r1, #36	; 0x24
 800d628:	4620      	mov	r0, r4
 800d62a:	f7f9 fa6f 	bl	8006b0c <d_make_comp>
 800d62e:	4605      	mov	r5, r0
 800d630:	9001      	str	r0, [sp, #4]
 800d632:	e709      	b.n	800d448 <d_type+0x170>
 800d634:	3101      	adds	r1, #1
 800d636:	60e1      	str	r1, [r4, #12]
 800d638:	4620      	mov	r0, r4
 800d63a:	f7ff fe4d 	bl	800d2d8 <d_type>
 800d63e:	2300      	movs	r3, #0
 800d640:	4602      	mov	r2, r0
 800d642:	2122      	movs	r1, #34	; 0x22
 800d644:	4620      	mov	r0, r4
 800d646:	f7f9 fa61 	bl	8006b0c <d_make_comp>
 800d64a:	4605      	mov	r5, r0
 800d64c:	9001      	str	r0, [sp, #4]
 800d64e:	e6fb      	b.n	800d448 <d_type+0x170>
 800d650:	3101      	adds	r1, #1
 800d652:	60e1      	str	r1, [r4, #12]
 800d654:	4620      	mov	r0, r4
 800d656:	f7ff fe3f 	bl	800d2d8 <d_type>
 800d65a:	2300      	movs	r3, #0
 800d65c:	4602      	mov	r2, r0
 800d65e:	2123      	movs	r1, #35	; 0x23
 800d660:	4620      	mov	r0, r4
 800d662:	f7f9 fa53 	bl	8006b0c <d_make_comp>
 800d666:	4605      	mov	r5, r0
 800d668:	9001      	str	r0, [sp, #4]
 800d66a:	e6ed      	b.n	800d448 <d_type+0x170>
 800d66c:	784b      	ldrb	r3, [r1, #1]
 800d66e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d672:	2a09      	cmp	r2, #9
 800d674:	d905      	bls.n	800d682 <d_type+0x3aa>
 800d676:	2b5f      	cmp	r3, #95	; 0x5f
 800d678:	d003      	beq.n	800d682 <d_type+0x3aa>
 800d67a:	3b41      	subs	r3, #65	; 0x41
 800d67c:	2b19      	cmp	r3, #25
 800d67e:	f200 818a 	bhi.w	800d996 <d_type+0x6be>
 800d682:	2100      	movs	r1, #0
 800d684:	4620      	mov	r0, r4
 800d686:	f7f9 fc7d 	bl	8006f84 <d_substitution>
 800d68a:	68e3      	ldr	r3, [r4, #12]
 800d68c:	9001      	str	r0, [sp, #4]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	4605      	mov	r5, r0
 800d692:	2b49      	cmp	r3, #73	; 0x49
 800d694:	f47f aebc 	bne.w	800d410 <d_type+0x138>
 800d698:	4620      	mov	r0, r4
 800d69a:	f7fd f937 	bl	800a90c <d_template_args>
 800d69e:	462a      	mov	r2, r5
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2104      	movs	r1, #4
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f7f9 fa31 	bl	8006b0c <d_make_comp>
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	e7b2      	b.n	800d614 <d_type+0x33c>
 800d6ae:	3101      	adds	r1, #1
 800d6b0:	60e1      	str	r1, [r4, #12]
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f7f9 fbee 	bl	8006e94 <d_source_name>
 800d6b8:	9001      	str	r0, [sp, #4]
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f7ff fe0c 	bl	800d2d8 <d_type>
 800d6c0:	9b01      	ldr	r3, [sp, #4]
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	2121      	movs	r1, #33	; 0x21
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f7f9 fa20 	bl	8006b0c <d_make_comp>
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	9001      	str	r0, [sp, #4]
 800d6d0:	e6ba      	b.n	800d448 <d_type+0x170>
 800d6d2:	3b61      	subs	r3, #97	; 0x61
 800d6d4:	4fb6      	ldr	r7, [pc, #728]	; (800d9b0 <d_type+0x6d8>)
 800d6d6:	6962      	ldr	r2, [r4, #20]
 800d6d8:	69a5      	ldr	r5, [r4, #24]
 800d6da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 800d6e4:	42aa      	cmp	r2, r5
 800d6e6:	4418      	add	r0, r3
 800d6e8:	f280 8136 	bge.w	800d958 <d_type+0x680>
 800d6ec:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800d6f0:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800d6f4:	00b6      	lsls	r6, r6, #2
 800d6f6:	3201      	adds	r2, #1
 800d6f8:	eb1e 0506 	adds.w	r5, lr, r6
 800d6fc:	6162      	str	r2, [r4, #20]
 800d6fe:	f000 812b 	beq.w	800d958 <d_type+0x680>
 800d702:	2227      	movs	r2, #39	; 0x27
 800d704:	f80e 2006 	strb.w	r2, [lr, r6]
 800d708:	443b      	add	r3, r7
 800d70a:	6068      	str	r0, [r5, #4]
 800d70c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d70e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d712:	3101      	adds	r1, #1
 800d714:	4413      	add	r3, r2
 800d716:	60e1      	str	r1, [r4, #12]
 800d718:	6323      	str	r3, [r4, #48]	; 0x30
 800d71a:	e679      	b.n	800d410 <d_type+0x138>
 800d71c:	4620      	mov	r0, r4
 800d71e:	f7f9 fb97 	bl	8006e50 <d_template_param>
 800d722:	68e6      	ldr	r6, [r4, #12]
 800d724:	9001      	str	r0, [sp, #4]
 800d726:	7833      	ldrb	r3, [r6, #0]
 800d728:	4605      	mov	r5, r0
 800d72a:	2b49      	cmp	r3, #73	; 0x49
 800d72c:	f47f ae8c 	bne.w	800d448 <d_type+0x170>
 800d730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d732:	2b00      	cmp	r3, #0
 800d734:	f040 814e 	bne.w	800d9d4 <d_type+0x6fc>
 800d738:	2800      	cmp	r0, #0
 800d73a:	f43f ae68 	beq.w	800d40e <d_type+0x136>
 800d73e:	6a23      	ldr	r3, [r4, #32]
 800d740:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d742:	4293      	cmp	r3, r2
 800d744:	f6bf ae63 	bge.w	800d40e <d_type+0x136>
 800d748:	69e1      	ldr	r1, [r4, #28]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800d750:	6222      	str	r2, [r4, #32]
 800d752:	4620      	mov	r0, r4
 800d754:	9d01      	ldr	r5, [sp, #4]
 800d756:	f7fd f8d9 	bl	800a90c <d_template_args>
 800d75a:	462a      	mov	r2, r5
 800d75c:	4603      	mov	r3, r0
 800d75e:	e7a0      	b.n	800d6a2 <d_type+0x3ca>
 800d760:	6963      	ldr	r3, [r4, #20]
 800d762:	69a2      	ldr	r2, [r4, #24]
 800d764:	4293      	cmp	r3, r2
 800d766:	f280 80f7 	bge.w	800d958 <d_type+0x680>
 800d76a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d76e:	6922      	ldr	r2, [r4, #16]
 800d770:	0089      	lsls	r1, r1, #2
 800d772:	3301      	adds	r3, #1
 800d774:	1855      	adds	r5, r2, r1
 800d776:	6163      	str	r3, [r4, #20]
 800d778:	f000 80ee 	beq.w	800d958 <d_type+0x680>
 800d77c:	4b8d      	ldr	r3, [pc, #564]	; (800d9b4 <d_type+0x6dc>)
 800d77e:	2027      	movs	r0, #39	; 0x27
 800d780:	5450      	strb	r0, [r2, r1]
 800d782:	606b      	str	r3, [r5, #4]
 800d784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d786:	3308      	adds	r3, #8
 800d788:	6323      	str	r3, [r4, #48]	; 0x30
 800d78a:	e641      	b.n	800d410 <d_type+0x138>
 800d78c:	6963      	ldr	r3, [r4, #20]
 800d78e:	69a2      	ldr	r2, [r4, #24]
 800d790:	4293      	cmp	r3, r2
 800d792:	f280 80e1 	bge.w	800d958 <d_type+0x680>
 800d796:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d79a:	6922      	ldr	r2, [r4, #16]
 800d79c:	0089      	lsls	r1, r1, #2
 800d79e:	3301      	adds	r3, #1
 800d7a0:	1855      	adds	r5, r2, r1
 800d7a2:	6163      	str	r3, [r4, #20]
 800d7a4:	f000 80d8 	beq.w	800d958 <d_type+0x680>
 800d7a8:	4b83      	ldr	r3, [pc, #524]	; (800d9b8 <d_type+0x6e0>)
 800d7aa:	2027      	movs	r0, #39	; 0x27
 800d7ac:	5450      	strb	r0, [r2, r1]
 800d7ae:	606b      	str	r3, [r5, #4]
 800d7b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d7b2:	3304      	adds	r3, #4
 800d7b4:	6323      	str	r3, [r4, #48]	; 0x30
 800d7b6:	e62b      	b.n	800d410 <d_type+0x138>
 800d7b8:	6963      	ldr	r3, [r4, #20]
 800d7ba:	69a2      	ldr	r2, [r4, #24]
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	f280 80cb 	bge.w	800d958 <d_type+0x680>
 800d7c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d7c6:	6922      	ldr	r2, [r4, #16]
 800d7c8:	0089      	lsls	r1, r1, #2
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	1855      	adds	r5, r2, r1
 800d7ce:	6163      	str	r3, [r4, #20]
 800d7d0:	f000 80c2 	beq.w	800d958 <d_type+0x680>
 800d7d4:	4b79      	ldr	r3, [pc, #484]	; (800d9bc <d_type+0x6e4>)
 800d7d6:	2027      	movs	r0, #39	; 0x27
 800d7d8:	5450      	strb	r0, [r2, r1]
 800d7da:	606b      	str	r3, [r5, #4]
 800d7dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d7de:	3309      	adds	r3, #9
 800d7e0:	6323      	str	r3, [r4, #48]	; 0x30
 800d7e2:	e615      	b.n	800d410 <d_type+0x138>
 800d7e4:	6963      	ldr	r3, [r4, #20]
 800d7e6:	69a2      	ldr	r2, [r4, #24]
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	f280 80b5 	bge.w	800d958 <d_type+0x680>
 800d7ee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d7f2:	6922      	ldr	r2, [r4, #16]
 800d7f4:	0089      	lsls	r1, r1, #2
 800d7f6:	3301      	adds	r3, #1
 800d7f8:	1855      	adds	r5, r2, r1
 800d7fa:	6163      	str	r3, [r4, #20]
 800d7fc:	f000 80ac 	beq.w	800d958 <d_type+0x680>
 800d800:	4b6f      	ldr	r3, [pc, #444]	; (800d9c0 <d_type+0x6e8>)
 800d802:	2027      	movs	r0, #39	; 0x27
 800d804:	5450      	strb	r0, [r2, r1]
 800d806:	606b      	str	r3, [r5, #4]
 800d808:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d80a:	330a      	adds	r3, #10
 800d80c:	6323      	str	r3, [r4, #48]	; 0x30
 800d80e:	e5ff      	b.n	800d410 <d_type+0x138>
 800d810:	788b      	ldrb	r3, [r1, #2]
 800d812:	2b5f      	cmp	r3, #95	; 0x5f
 800d814:	f000 80fd 	beq.w	800da12 <d_type+0x73a>
 800d818:	4620      	mov	r0, r4
 800d81a:	f7f9 fae5 	bl	8006de8 <d_number_component>
 800d81e:	4605      	mov	r5, r0
 800d820:	2d00      	cmp	r5, #0
 800d822:	f43f aef7 	beq.w	800d614 <d_type+0x33c>
 800d826:	68e3      	ldr	r3, [r4, #12]
 800d828:	781a      	ldrb	r2, [r3, #0]
 800d82a:	2a5f      	cmp	r2, #95	; 0x5f
 800d82c:	f47f ae46 	bne.w	800d4bc <d_type+0x1e4>
 800d830:	3301      	adds	r3, #1
 800d832:	60e3      	str	r3, [r4, #12]
 800d834:	4620      	mov	r0, r4
 800d836:	f7ff fd4f 	bl	800d2d8 <d_type>
 800d83a:	462a      	mov	r2, r5
 800d83c:	4603      	mov	r3, r0
 800d83e:	212d      	movs	r1, #45	; 0x2d
 800d840:	4620      	mov	r0, r4
 800d842:	f7f9 f963 	bl	8006b0c <d_make_comp>
 800d846:	4605      	mov	r5, r0
 800d848:	e6e4      	b.n	800d614 <d_type+0x33c>
 800d84a:	6963      	ldr	r3, [r4, #20]
 800d84c:	69a2      	ldr	r2, [r4, #24]
 800d84e:	4293      	cmp	r3, r2
 800d850:	f280 8082 	bge.w	800d958 <d_type+0x680>
 800d854:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d858:	6922      	ldr	r2, [r4, #16]
 800d85a:	0089      	lsls	r1, r1, #2
 800d85c:	3301      	adds	r3, #1
 800d85e:	1855      	adds	r5, r2, r1
 800d860:	6163      	str	r3, [r4, #20]
 800d862:	d079      	beq.n	800d958 <d_type+0x680>
 800d864:	4b57      	ldr	r3, [pc, #348]	; (800d9c4 <d_type+0x6ec>)
 800d866:	e78a      	b.n	800d77e <d_type+0x4a6>
 800d868:	4620      	mov	r0, r4
 800d86a:	f7ff fd35 	bl	800d2d8 <d_type>
 800d86e:	2300      	movs	r3, #0
 800d870:	4602      	mov	r2, r0
 800d872:	2149      	movs	r1, #73	; 0x49
 800d874:	4620      	mov	r0, r4
 800d876:	f7f9 f949 	bl	8006b0c <d_make_comp>
 800d87a:	4605      	mov	r5, r0
 800d87c:	9001      	str	r0, [sp, #4]
 800d87e:	e5e3      	b.n	800d448 <d_type+0x170>
 800d880:	6963      	ldr	r3, [r4, #20]
 800d882:	69a2      	ldr	r2, [r4, #24]
 800d884:	4293      	cmp	r3, r2
 800d886:	da67      	bge.n	800d958 <d_type+0x680>
 800d888:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d88c:	6922      	ldr	r2, [r4, #16]
 800d88e:	0089      	lsls	r1, r1, #2
 800d890:	3301      	adds	r3, #1
 800d892:	1855      	adds	r5, r2, r1
 800d894:	6163      	str	r3, [r4, #20]
 800d896:	d05f      	beq.n	800d958 <d_type+0x680>
 800d898:	4b4b      	ldr	r3, [pc, #300]	; (800d9c8 <d_type+0x6f0>)
 800d89a:	2027      	movs	r0, #39	; 0x27
 800d89c:	5450      	strb	r0, [r2, r1]
 800d89e:	606b      	str	r3, [r5, #4]
 800d8a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d8a2:	3311      	adds	r3, #17
 800d8a4:	6323      	str	r3, [r4, #48]	; 0x30
 800d8a6:	e5b3      	b.n	800d410 <d_type+0x138>
 800d8a8:	6963      	ldr	r3, [r4, #20]
 800d8aa:	69a2      	ldr	r2, [r4, #24]
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	da53      	bge.n	800d958 <d_type+0x680>
 800d8b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d8b4:	6922      	ldr	r2, [r4, #16]
 800d8b6:	0089      	lsls	r1, r1, #2
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	1855      	adds	r5, r2, r1
 800d8bc:	6163      	str	r3, [r4, #20]
 800d8be:	d04b      	beq.n	800d958 <d_type+0x680>
 800d8c0:	4b42      	ldr	r3, [pc, #264]	; (800d9cc <d_type+0x6f4>)
 800d8c2:	e788      	b.n	800d7d6 <d_type+0x4fe>
 800d8c4:	6963      	ldr	r3, [r4, #20]
 800d8c6:	69a2      	ldr	r2, [r4, #24]
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	f6bf ada0 	bge.w	800d40e <d_type+0x136>
 800d8ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d8d2:	6921      	ldr	r1, [r4, #16]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	0092      	lsls	r2, r2, #2
 800d8d8:	6163      	str	r3, [r4, #20]
 800d8da:	188b      	adds	r3, r1, r2
 800d8dc:	f43f ad97 	beq.w	800d40e <d_type+0x136>
 800d8e0:	4c3b      	ldr	r4, [pc, #236]	; (800d9d0 <d_type+0x6f8>)
 800d8e2:	2500      	movs	r5, #0
 800d8e4:	2004      	movs	r0, #4
 800d8e6:	548d      	strb	r5, [r1, r2]
 800d8e8:	461d      	mov	r5, r3
 800d8ea:	605c      	str	r4, [r3, #4]
 800d8ec:	6098      	str	r0, [r3, #8]
 800d8ee:	e58f      	b.n	800d410 <d_type+0x138>
 800d8f0:	6963      	ldr	r3, [r4, #20]
 800d8f2:	69a2      	ldr	r2, [r4, #24]
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	f280 8083 	bge.w	800da00 <d_type+0x728>
 800d8fa:	6925      	ldr	r5, [r4, #16]
 800d8fc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d900:	0080      	lsls	r0, r0, #2
 800d902:	3301      	adds	r3, #1
 800d904:	182a      	adds	r2, r5, r0
 800d906:	262c      	movs	r6, #44	; 0x2c
 800d908:	6163      	str	r3, [r4, #20]
 800d90a:	9201      	str	r2, [sp, #4]
 800d90c:	542e      	strb	r6, [r5, r0]
 800d90e:	788b      	ldrb	r3, [r1, #2]
 800d910:	3b30      	subs	r3, #48	; 0x30
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b09      	cmp	r3, #9
 800d916:	bf94      	ite	ls
 800d918:	2301      	movls	r3, #1
 800d91a:	2300      	movhi	r3, #0
 800d91c:	8113      	strh	r3, [r2, #8]
 800d91e:	d972      	bls.n	800da06 <d_type+0x72e>
 800d920:	4615      	mov	r5, r2
 800d922:	4620      	mov	r0, r4
 800d924:	f7ff fcd8 	bl	800d2d8 <d_type>
 800d928:	9b01      	ldr	r3, [sp, #4]
 800d92a:	6068      	str	r0, [r5, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f43f ad6d 	beq.w	800d40e <d_type+0x136>
 800d934:	f104 000c 	add.w	r0, r4, #12
 800d938:	f7f9 fa2e 	bl	8006d98 <d_number.isra.0>
 800d93c:	68e2      	ldr	r2, [r4, #12]
 800d93e:	7813      	ldrb	r3, [r2, #0]
 800d940:	b13b      	cbz	r3, 800d952 <d_type+0x67a>
 800d942:	1c53      	adds	r3, r2, #1
 800d944:	60e3      	str	r3, [r4, #12]
 800d946:	7813      	ldrb	r3, [r2, #0]
 800d948:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 800d94c:	fab3 f383 	clz	r3, r3
 800d950:	095b      	lsrs	r3, r3, #5
 800d952:	9d01      	ldr	r5, [sp, #4]
 800d954:	816b      	strh	r3, [r5, #10]
 800d956:	e55b      	b.n	800d410 <d_type+0x138>
 800d958:	2300      	movs	r3, #0
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	deff      	udf	#255	; 0xff
 800d960:	2500      	movs	r5, #0
 800d962:	3001      	adds	r0, #1
 800d964:	60e0      	str	r0, [r4, #12]
 800d966:	4620      	mov	r0, r4
 800d968:	f7ff fcb6 	bl	800d2d8 <d_type>
 800d96c:	462a      	mov	r2, r5
 800d96e:	4603      	mov	r3, r0
 800d970:	212a      	movs	r1, #42	; 0x2a
 800d972:	4620      	mov	r0, r4
 800d974:	f7f9 f8ca 	bl	8006b0c <d_make_comp>
 800d978:	4605      	mov	r5, r0
 800d97a:	e64b      	b.n	800d614 <d_type+0x33c>
 800d97c:	2301      	movs	r3, #1
 800d97e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800d980:	4620      	mov	r0, r4
 800d982:	6363      	str	r3, [r4, #52]	; 0x34
 800d984:	f7ff fad6 	bl	800cf34 <d_expression_1>
 800d988:	6365      	str	r5, [r4, #52]	; 0x34
 800d98a:	4605      	mov	r5, r0
 800d98c:	2800      	cmp	r0, #0
 800d98e:	f43f ad95 	beq.w	800d4bc <d_type+0x1e4>
 800d992:	68e3      	ldr	r3, [r4, #12]
 800d994:	e58e      	b.n	800d4b4 <d_type+0x1dc>
 800d996:	4620      	mov	r0, r4
 800d998:	f000 fa90 	bl	800debc <d_name>
 800d99c:	4605      	mov	r5, r0
 800d99e:	9001      	str	r0, [sp, #4]
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	f43f ad34 	beq.w	800d40e <d_type+0x136>
 800d9a6:	7803      	ldrb	r3, [r0, #0]
 800d9a8:	2b18      	cmp	r3, #24
 800d9aa:	f47f ad4f 	bne.w	800d44c <d_type+0x174>
 800d9ae:	e52f      	b.n	800d410 <d_type+0x138>
 800d9b0:	08014818 	.word	0x08014818
 800d9b4:	08014b48 	.word	0x08014b48
 800d9b8:	08014b20 	.word	0x08014b20
 800d9bc:	08014ae4 	.word	0x08014ae4
 800d9c0:	08014b0c 	.word	0x08014b0c
 800d9c4:	08014b34 	.word	0x08014b34
 800d9c8:	08014b5c 	.word	0x08014b5c
 800d9cc:	08014af8 	.word	0x08014af8
 800d9d0:	08015adc 	.word	0x08015adc
 800d9d4:	4620      	mov	r0, r4
 800d9d6:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800d9da:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800d9de:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800d9e0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d9e2:	f7fc ff93 	bl	800a90c <d_template_args>
 800d9e6:	68e2      	ldr	r2, [r4, #12]
 800d9e8:	7812      	ldrb	r2, [r2, #0]
 800d9ea:	2a49      	cmp	r2, #73	; 0x49
 800d9ec:	d01c      	beq.n	800da28 <d_type+0x750>
 800d9ee:	6325      	str	r5, [r4, #48]	; 0x30
 800d9f0:	60e6      	str	r6, [r4, #12]
 800d9f2:	f8c4 9014 	str.w	r9, [r4, #20]
 800d9f6:	f8c4 8020 	str.w	r8, [r4, #32]
 800d9fa:	62a7      	str	r7, [r4, #40]	; 0x28
 800d9fc:	9d01      	ldr	r5, [sp, #4]
 800d9fe:	e523      	b.n	800d448 <d_type+0x170>
 800da00:	2300      	movs	r3, #0
 800da02:	701b      	strb	r3, [r3, #0]
 800da04:	deff      	udf	#255	; 0xff
 800da06:	f104 000c 	add.w	r0, r4, #12
 800da0a:	f7f9 f9c5 	bl	8006d98 <d_number.isra.0>
 800da0e:	9d01      	ldr	r5, [sp, #4]
 800da10:	e787      	b.n	800d922 <d_type+0x64a>
 800da12:	3103      	adds	r1, #3
 800da14:	2301      	movs	r3, #1
 800da16:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800da18:	60e1      	str	r1, [r4, #12]
 800da1a:	6363      	str	r3, [r4, #52]	; 0x34
 800da1c:	4620      	mov	r0, r4
 800da1e:	f7ff fa89 	bl	800cf34 <d_expression_1>
 800da22:	6366      	str	r6, [r4, #52]	; 0x34
 800da24:	4605      	mov	r5, r0
 800da26:	e6fb      	b.n	800d820 <d_type+0x548>
 800da28:	9b01      	ldr	r3, [sp, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f43f acef 	beq.w	800d40e <d_type+0x136>
 800da30:	6a22      	ldr	r2, [r4, #32]
 800da32:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800da34:	428a      	cmp	r2, r1
 800da36:	f6bf acea 	bge.w	800d40e <d_type+0x136>
 800da3a:	69e5      	ldr	r5, [r4, #28]
 800da3c:	1c51      	adds	r1, r2, #1
 800da3e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 800da42:	9a01      	ldr	r2, [sp, #4]
 800da44:	4603      	mov	r3, r0
 800da46:	6221      	str	r1, [r4, #32]
 800da48:	e62b      	b.n	800d6a2 <d_type+0x3ca>
 800da4a:	4618      	mov	r0, r3
 800da4c:	e789      	b.n	800d962 <d_type+0x68a>
 800da4e:	bf00      	nop

0800da50 <d_operator_name>:
 800da50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da54:	68c3      	ldr	r3, [r0, #12]
 800da56:	4684      	mov	ip, r0
 800da58:	781f      	ldrb	r7, [r3, #0]
 800da5a:	b317      	cbz	r7, 800daa2 <d_operator_name+0x52>
 800da5c:	1c5a      	adds	r2, r3, #1
 800da5e:	60c2      	str	r2, [r0, #12]
 800da60:	785a      	ldrb	r2, [r3, #1]
 800da62:	781f      	ldrb	r7, [r3, #0]
 800da64:	2a00      	cmp	r2, #0
 800da66:	d059      	beq.n	800db1c <d_operator_name+0xcc>
 800da68:	1c9a      	adds	r2, r3, #2
 800da6a:	60c2      	str	r2, [r0, #12]
 800da6c:	2f76      	cmp	r7, #118	; 0x76
 800da6e:	4604      	mov	r4, r0
 800da70:	f893 e001 	ldrb.w	lr, [r3, #1]
 800da74:	d043      	beq.n	800dafe <d_operator_name+0xae>
 800da76:	2f63      	cmp	r7, #99	; 0x63
 800da78:	d114      	bne.n	800daa4 <d_operator_name+0x54>
 800da7a:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 800da7e:	d111      	bne.n	800daa4 <d_operator_name+0x54>
 800da80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800da82:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800da84:	fab3 f383 	clz	r3, r3
 800da88:	095b      	lsrs	r3, r3, #5
 800da8a:	6383      	str	r3, [r0, #56]	; 0x38
 800da8c:	f7ff fc24 	bl	800d2d8 <d_type>
 800da90:	63a5      	str	r5, [r4, #56]	; 0x38
 800da92:	4602      	mov	r2, r0
 800da94:	2300      	movs	r3, #0
 800da96:	4620      	mov	r0, r4
 800da98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da9c:	2133      	movs	r1, #51	; 0x33
 800da9e:	f7f9 b835 	b.w	8006b0c <d_make_comp>
 800daa2:	46be      	mov	lr, r7
 800daa4:	4d28      	ldr	r5, [pc, #160]	; (800db48 <d_operator_name+0xf8>)
 800daa6:	203d      	movs	r0, #61	; 0x3d
 800daa8:	2200      	movs	r2, #0
 800daaa:	e004      	b.n	800dab6 <d_operator_name+0x66>
 800daac:	bf8c      	ite	hi
 800daae:	4618      	movhi	r0, r3
 800dab0:	1c5a      	addls	r2, r3, #1
 800dab2:	4282      	cmp	r2, r0
 800dab4:	d02f      	beq.n	800db16 <d_operator_name+0xc6>
 800dab6:	1a83      	subs	r3, r0, r2
 800dab8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800dabc:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800dac0:	0119      	lsls	r1, r3, #4
 800dac2:	586c      	ldr	r4, [r5, r1]
 800dac4:	4429      	add	r1, r5
 800dac6:	7826      	ldrb	r6, [r4, #0]
 800dac8:	42be      	cmp	r6, r7
 800daca:	d1ef      	bne.n	800daac <d_operator_name+0x5c>
 800dacc:	7864      	ldrb	r4, [r4, #1]
 800dace:	4574      	cmp	r4, lr
 800dad0:	d1ec      	bne.n	800daac <d_operator_name+0x5c>
 800dad2:	f8dc 3014 	ldr.w	r3, [ip, #20]
 800dad6:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800dada:	4293      	cmp	r3, r2
 800dadc:	da1b      	bge.n	800db16 <d_operator_name+0xc6>
 800dade:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dae2:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800dae6:	3301      	adds	r3, #1
 800dae8:	0092      	lsls	r2, r2, #2
 800daea:	f8cc 3014 	str.w	r3, [ip, #20]
 800daee:	1883      	adds	r3, r0, r2
 800daf0:	d027      	beq.n	800db42 <d_operator_name+0xf2>
 800daf2:	2431      	movs	r4, #49	; 0x31
 800daf4:	5484      	strb	r4, [r0, r2]
 800daf6:	6059      	str	r1, [r3, #4]
 800daf8:	4618      	mov	r0, r3
 800dafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dafe:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 800db02:	b2eb      	uxtb	r3, r5
 800db04:	2b09      	cmp	r3, #9
 800db06:	d8cd      	bhi.n	800daa4 <d_operator_name+0x54>
 800db08:	f7f9 f9c4 	bl	8006e94 <d_source_name>
 800db0c:	6963      	ldr	r3, [r4, #20]
 800db0e:	69a2      	ldr	r2, [r4, #24]
 800db10:	4601      	mov	r1, r0
 800db12:	4293      	cmp	r3, r2
 800db14:	db04      	blt.n	800db20 <d_operator_name+0xd0>
 800db16:	2000      	movs	r0, #0
 800db18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db1c:	4696      	mov	lr, r2
 800db1e:	e7c1      	b.n	800daa4 <d_operator_name+0x54>
 800db20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800db24:	6920      	ldr	r0, [r4, #16]
 800db26:	3301      	adds	r3, #1
 800db28:	0092      	lsls	r2, r2, #2
 800db2a:	6163      	str	r3, [r4, #20]
 800db2c:	1883      	adds	r3, r0, r2
 800db2e:	d0f2      	beq.n	800db16 <d_operator_name+0xc6>
 800db30:	2900      	cmp	r1, #0
 800db32:	d0f0      	beq.n	800db16 <d_operator_name+0xc6>
 800db34:	2432      	movs	r4, #50	; 0x32
 800db36:	5484      	strb	r4, [r0, r2]
 800db38:	605d      	str	r5, [r3, #4]
 800db3a:	6099      	str	r1, [r3, #8]
 800db3c:	4618      	mov	r0, r3
 800db3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db42:	4618      	mov	r0, r3
 800db44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db48:	08014b70 	.word	0x08014b70

0800db4c <d_parmlist>:
 800db4c:	b530      	push	{r4, r5, lr}
 800db4e:	68c2      	ldr	r2, [r0, #12]
 800db50:	b083      	sub	sp, #12
 800db52:	7813      	ldrb	r3, [r2, #0]
 800db54:	2100      	movs	r1, #0
 800db56:	9101      	str	r1, [sp, #4]
 800db58:	b343      	cbz	r3, 800dbac <d_parmlist+0x60>
 800db5a:	2b45      	cmp	r3, #69	; 0x45
 800db5c:	d026      	beq.n	800dbac <d_parmlist+0x60>
 800db5e:	2b2e      	cmp	r3, #46	; 0x2e
 800db60:	d024      	beq.n	800dbac <d_parmlist+0x60>
 800db62:	4604      	mov	r4, r0
 800db64:	ad01      	add	r5, sp, #4
 800db66:	e016      	b.n	800db96 <d_parmlist+0x4a>
 800db68:	2b4f      	cmp	r3, #79	; 0x4f
 800db6a:	d016      	beq.n	800db9a <d_parmlist+0x4e>
 800db6c:	4620      	mov	r0, r4
 800db6e:	f7ff fbb3 	bl	800d2d8 <d_type>
 800db72:	2300      	movs	r3, #0
 800db74:	212e      	movs	r1, #46	; 0x2e
 800db76:	b1c8      	cbz	r0, 800dbac <d_parmlist+0x60>
 800db78:	4602      	mov	r2, r0
 800db7a:	4620      	mov	r0, r4
 800db7c:	f7f8 ffc6 	bl	8006b0c <d_make_comp>
 800db80:	6028      	str	r0, [r5, #0]
 800db82:	b198      	cbz	r0, 800dbac <d_parmlist+0x60>
 800db84:	68e2      	ldr	r2, [r4, #12]
 800db86:	f100 0508 	add.w	r5, r0, #8
 800db8a:	7813      	ldrb	r3, [r2, #0]
 800db8c:	b143      	cbz	r3, 800dba0 <d_parmlist+0x54>
 800db8e:	2b45      	cmp	r3, #69	; 0x45
 800db90:	d006      	beq.n	800dba0 <d_parmlist+0x54>
 800db92:	2b2e      	cmp	r3, #46	; 0x2e
 800db94:	d004      	beq.n	800dba0 <d_parmlist+0x54>
 800db96:	2b52      	cmp	r3, #82	; 0x52
 800db98:	d1e6      	bne.n	800db68 <d_parmlist+0x1c>
 800db9a:	7853      	ldrb	r3, [r2, #1]
 800db9c:	2b45      	cmp	r3, #69	; 0x45
 800db9e:	d1e5      	bne.n	800db6c <d_parmlist+0x20>
 800dba0:	9801      	ldr	r0, [sp, #4]
 800dba2:	b118      	cbz	r0, 800dbac <d_parmlist+0x60>
 800dba4:	6883      	ldr	r3, [r0, #8]
 800dba6:	b123      	cbz	r3, 800dbb2 <d_parmlist+0x66>
 800dba8:	b003      	add	sp, #12
 800dbaa:	bd30      	pop	{r4, r5, pc}
 800dbac:	2000      	movs	r0, #0
 800dbae:	b003      	add	sp, #12
 800dbb0:	bd30      	pop	{r4, r5, pc}
 800dbb2:	6842      	ldr	r2, [r0, #4]
 800dbb4:	7811      	ldrb	r1, [r2, #0]
 800dbb6:	2927      	cmp	r1, #39	; 0x27
 800dbb8:	d1f6      	bne.n	800dba8 <d_parmlist+0x5c>
 800dbba:	6852      	ldr	r2, [r2, #4]
 800dbbc:	7c11      	ldrb	r1, [r2, #16]
 800dbbe:	2909      	cmp	r1, #9
 800dbc0:	d1f2      	bne.n	800dba8 <d_parmlist+0x5c>
 800dbc2:	6851      	ldr	r1, [r2, #4]
 800dbc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800dbc6:	1a52      	subs	r2, r2, r1
 800dbc8:	6322      	str	r2, [r4, #48]	; 0x30
 800dbca:	6043      	str	r3, [r0, #4]
 800dbcc:	e7ec      	b.n	800dba8 <d_parmlist+0x5c>
 800dbce:	bf00      	nop

0800dbd0 <d_unqualified_name>:
 800dbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd2:	68c2      	ldr	r2, [r0, #12]
 800dbd4:	4604      	mov	r4, r0
 800dbd6:	7813      	ldrb	r3, [r2, #0]
 800dbd8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dbdc:	2909      	cmp	r1, #9
 800dbde:	d920      	bls.n	800dc22 <d_unqualified_name+0x52>
 800dbe0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 800dbe4:	2919      	cmp	r1, #25
 800dbe6:	d933      	bls.n	800dc50 <d_unqualified_name+0x80>
 800dbe8:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
 800dbec:	2901      	cmp	r1, #1
 800dbee:	d921      	bls.n	800dc34 <d_unqualified_name+0x64>
 800dbf0:	2b4c      	cmp	r3, #76	; 0x4c
 800dbf2:	f000 8089 	beq.w	800dd08 <d_unqualified_name+0x138>
 800dbf6:	2b55      	cmp	r3, #85	; 0x55
 800dbf8:	d128      	bne.n	800dc4c <d_unqualified_name+0x7c>
 800dbfa:	7853      	ldrb	r3, [r2, #1]
 800dbfc:	2b6c      	cmp	r3, #108	; 0x6c
 800dbfe:	d032      	beq.n	800dc66 <d_unqualified_name+0x96>
 800dc00:	2b74      	cmp	r3, #116	; 0x74
 800dc02:	d123      	bne.n	800dc4c <d_unqualified_name+0x7c>
 800dc04:	1c53      	adds	r3, r2, #1
 800dc06:	60c3      	str	r3, [r0, #12]
 800dc08:	7853      	ldrb	r3, [r2, #1]
 800dc0a:	2b74      	cmp	r3, #116	; 0x74
 800dc0c:	d05b      	beq.n	800dcc6 <d_unqualified_name+0xf6>
 800dc0e:	2b42      	cmp	r3, #66	; 0x42
 800dc10:	f04f 0500 	mov.w	r5, #0
 800dc14:	d10c      	bne.n	800dc30 <d_unqualified_name+0x60>
 800dc16:	4629      	mov	r1, r5
 800dc18:	4620      	mov	r0, r4
 800dc1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dc1e:	f7f9 b997 	b.w	8006f50 <d_abi_tags>
 800dc22:	f7f9 f937 	bl	8006e94 <d_source_name>
 800dc26:	4605      	mov	r5, r0
 800dc28:	68e3      	ldr	r3, [r4, #12]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b42      	cmp	r3, #66	; 0x42
 800dc2e:	d0f2      	beq.n	800dc16 <d_unqualified_name+0x46>
 800dc30:	4628      	mov	r0, r5
 800dc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc34:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dc36:	b121      	cbz	r1, 800dc42 <d_unqualified_name+0x72>
 800dc38:	7808      	ldrb	r0, [r1, #0]
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d078      	beq.n	800dd30 <d_unqualified_name+0x160>
 800dc3e:	2818      	cmp	r0, #24
 800dc40:	d076      	beq.n	800dd30 <d_unqualified_name+0x160>
 800dc42:	2b43      	cmp	r3, #67	; 0x43
 800dc44:	f000 80cd 	beq.w	800dde2 <d_unqualified_name+0x212>
 800dc48:	2b44      	cmp	r3, #68	; 0x44
 800dc4a:	d07b      	beq.n	800dd44 <d_unqualified_name+0x174>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc50:	f7ff fefe 	bl	800da50 <d_operator_name>
 800dc54:	4605      	mov	r5, r0
 800dc56:	b118      	cbz	r0, 800dc60 <d_unqualified_name+0x90>
 800dc58:	7803      	ldrb	r3, [r0, #0]
 800dc5a:	2b31      	cmp	r3, #49	; 0x31
 800dc5c:	f000 80a4 	beq.w	800dda8 <d_unqualified_name+0x1d8>
 800dc60:	68e3      	ldr	r3, [r4, #12]
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	e7e2      	b.n	800dc2c <d_unqualified_name+0x5c>
 800dc66:	1c53      	adds	r3, r2, #1
 800dc68:	60c3      	str	r3, [r0, #12]
 800dc6a:	7853      	ldrb	r3, [r2, #1]
 800dc6c:	2b6c      	cmp	r3, #108	; 0x6c
 800dc6e:	d1ce      	bne.n	800dc0e <d_unqualified_name+0x3e>
 800dc70:	3202      	adds	r2, #2
 800dc72:	60c2      	str	r2, [r0, #12]
 800dc74:	f7ff ff6a 	bl	800db4c <d_parmlist>
 800dc78:	4606      	mov	r6, r0
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f000 80da 	beq.w	800de34 <d_unqualified_name+0x264>
 800dc80:	68e2      	ldr	r2, [r4, #12]
 800dc82:	7813      	ldrb	r3, [r2, #0]
 800dc84:	2b45      	cmp	r3, #69	; 0x45
 800dc86:	d1c2      	bne.n	800dc0e <d_unqualified_name+0x3e>
 800dc88:	3201      	adds	r2, #1
 800dc8a:	60e2      	str	r2, [r4, #12]
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f7f9 f8c7 	bl	8006e20 <d_compact_number>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	db13      	blt.n	800dcbe <d_unqualified_name+0xee>
 800dc96:	6963      	ldr	r3, [r4, #20]
 800dc98:	69a2      	ldr	r2, [r4, #24]
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	da0f      	bge.n	800dcbe <d_unqualified_name+0xee>
 800dc9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dca2:	6921      	ldr	r1, [r4, #16]
 800dca4:	0092      	lsls	r2, r2, #2
 800dca6:	3301      	adds	r3, #1
 800dca8:	188d      	adds	r5, r1, r2
 800dcaa:	6163      	str	r3, [r4, #20]
 800dcac:	d007      	beq.n	800dcbe <d_unqualified_name+0xee>
 800dcae:	2344      	movs	r3, #68	; 0x44
 800dcb0:	548b      	strb	r3, [r1, r2]
 800dcb2:	606e      	str	r6, [r5, #4]
 800dcb4:	60a8      	str	r0, [r5, #8]
 800dcb6:	6a23      	ldr	r3, [r4, #32]
 800dcb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	db1c      	blt.n	800dcf8 <d_unqualified_name+0x128>
 800dcbe:	68e3      	ldr	r3, [r4, #12]
 800dcc0:	2500      	movs	r5, #0
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	e7b2      	b.n	800dc2c <d_unqualified_name+0x5c>
 800dcc6:	3202      	adds	r2, #2
 800dcc8:	60c2      	str	r2, [r0, #12]
 800dcca:	f7f9 f8a9 	bl	8006e20 <d_compact_number>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	dbf5      	blt.n	800dcbe <d_unqualified_name+0xee>
 800dcd2:	6963      	ldr	r3, [r4, #20]
 800dcd4:	69a2      	ldr	r2, [r4, #24]
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	daf1      	bge.n	800dcbe <d_unqualified_name+0xee>
 800dcda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800dcde:	6921      	ldr	r1, [r4, #16]
 800dce0:	0092      	lsls	r2, r2, #2
 800dce2:	3301      	adds	r3, #1
 800dce4:	188d      	adds	r5, r1, r2
 800dce6:	6163      	str	r3, [r4, #20]
 800dce8:	d0e9      	beq.n	800dcbe <d_unqualified_name+0xee>
 800dcea:	2346      	movs	r3, #70	; 0x46
 800dcec:	548b      	strb	r3, [r1, r2]
 800dcee:	6068      	str	r0, [r5, #4]
 800dcf0:	6a23      	ldr	r3, [r4, #32]
 800dcf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	dae2      	bge.n	800dcbe <d_unqualified_name+0xee>
 800dcf8:	69e1      	ldr	r1, [r4, #28]
 800dcfa:	1c5a      	adds	r2, r3, #1
 800dcfc:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800dd00:	68e3      	ldr	r3, [r4, #12]
 800dd02:	6222      	str	r2, [r4, #32]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	e791      	b.n	800dc2c <d_unqualified_name+0x5c>
 800dd08:	3201      	adds	r2, #1
 800dd0a:	60c2      	str	r2, [r0, #12]
 800dd0c:	f7f9 f8c2 	bl	8006e94 <d_source_name>
 800dd10:	4605      	mov	r5, r0
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d09a      	beq.n	800dc4c <d_unqualified_name+0x7c>
 800dd16:	68e2      	ldr	r2, [r4, #12]
 800dd18:	7813      	ldrb	r3, [r2, #0]
 800dd1a:	2b5f      	cmp	r3, #95	; 0x5f
 800dd1c:	d186      	bne.n	800dc2c <d_unqualified_name+0x5c>
 800dd1e:	4620      	mov	r0, r4
 800dd20:	3201      	adds	r2, #1
 800dd22:	f840 2f0c 	str.w	r2, [r0, #12]!
 800dd26:	f7f9 f837 	bl	8006d98 <d_number.isra.0>
 800dd2a:	2800      	cmp	r0, #0
 800dd2c:	da98      	bge.n	800dc60 <d_unqualified_name+0x90>
 800dd2e:	e78d      	b.n	800dc4c <d_unqualified_name+0x7c>
 800dd30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dd32:	688b      	ldr	r3, [r1, #8]
 800dd34:	4403      	add	r3, r0
 800dd36:	6323      	str	r3, [r4, #48]	; 0x30
 800dd38:	7813      	ldrb	r3, [r2, #0]
 800dd3a:	2b43      	cmp	r3, #67	; 0x43
 800dd3c:	d051      	beq.n	800dde2 <d_unqualified_name+0x212>
 800dd3e:	2b44      	cmp	r3, #68	; 0x44
 800dd40:	f47f af65 	bne.w	800dc0e <d_unqualified_name+0x3e>
 800dd44:	7853      	ldrb	r3, [r2, #1]
 800dd46:	3b30      	subs	r3, #48	; 0x30
 800dd48:	2b05      	cmp	r3, #5
 800dd4a:	f63f af7f 	bhi.w	800dc4c <d_unqualified_name+0x7c>
 800dd4e:	a001      	add	r0, pc, #4	; (adr r0, 800dd54 <d_unqualified_name+0x184>)
 800dd50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dd54:	0800dd9d 	.word	0x0800dd9d
 800dd58:	0800dd6d 	.word	0x0800dd6d
 800dd5c:	0800dd99 	.word	0x0800dd99
 800dd60:	0800dc4d 	.word	0x0800dc4d
 800dd64:	0800dda5 	.word	0x0800dda5
 800dd68:	0800dda1 	.word	0x0800dda1
 800dd6c:	2702      	movs	r7, #2
 800dd6e:	6963      	ldr	r3, [r4, #20]
 800dd70:	69a0      	ldr	r0, [r4, #24]
 800dd72:	1c95      	adds	r5, r2, #2
 800dd74:	4283      	cmp	r3, r0
 800dd76:	60e5      	str	r5, [r4, #12]
 800dd78:	da30      	bge.n	800dddc <d_unqualified_name+0x20c>
 800dd7a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800dd7e:	6926      	ldr	r6, [r4, #16]
 800dd80:	0080      	lsls	r0, r0, #2
 800dd82:	3301      	adds	r3, #1
 800dd84:	1835      	adds	r5, r6, r0
 800dd86:	6163      	str	r3, [r4, #20]
 800dd88:	d028      	beq.n	800dddc <d_unqualified_name+0x20c>
 800dd8a:	b339      	cbz	r1, 800dddc <d_unqualified_name+0x20c>
 800dd8c:	2308      	movs	r3, #8
 800dd8e:	5433      	strb	r3, [r6, r0]
 800dd90:	712f      	strb	r7, [r5, #4]
 800dd92:	60a9      	str	r1, [r5, #8]
 800dd94:	7893      	ldrb	r3, [r2, #2]
 800dd96:	e749      	b.n	800dc2c <d_unqualified_name+0x5c>
 800dd98:	2703      	movs	r7, #3
 800dd9a:	e7e8      	b.n	800dd6e <d_unqualified_name+0x19e>
 800dd9c:	2701      	movs	r7, #1
 800dd9e:	e7e6      	b.n	800dd6e <d_unqualified_name+0x19e>
 800dda0:	2705      	movs	r7, #5
 800dda2:	e7e4      	b.n	800dd6e <d_unqualified_name+0x19e>
 800dda4:	2704      	movs	r7, #4
 800dda6:	e7e2      	b.n	800dd6e <d_unqualified_name+0x19e>
 800dda8:	6842      	ldr	r2, [r0, #4]
 800ddaa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ddac:	6893      	ldr	r3, [r2, #8]
 800ddae:	6810      	ldr	r0, [r2, #0]
 800ddb0:	440b      	add	r3, r1
 800ddb2:	3307      	adds	r3, #7
 800ddb4:	6323      	str	r3, [r4, #48]	; 0x30
 800ddb6:	4921      	ldr	r1, [pc, #132]	; (800de3c <d_unqualified_name+0x26c>)
 800ddb8:	f001 f800 	bl	800edbc <strcmp>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	f47f af4f 	bne.w	800dc60 <d_unqualified_name+0x90>
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f7f9 f866 	bl	8006e94 <d_source_name>
 800ddc8:	462a      	mov	r2, r5
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2135      	movs	r1, #53	; 0x35
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f7f8 fe9c 	bl	8006b0c <d_make_comp>
 800ddd4:	68e3      	ldr	r3, [r4, #12]
 800ddd6:	4605      	mov	r5, r0
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	e727      	b.n	800dc2c <d_unqualified_name+0x5c>
 800dddc:	7893      	ldrb	r3, [r2, #2]
 800ddde:	2500      	movs	r5, #0
 800dde0:	e724      	b.n	800dc2c <d_unqualified_name+0x5c>
 800dde2:	7853      	ldrb	r3, [r2, #1]
 800dde4:	3b31      	subs	r3, #49	; 0x31
 800dde6:	2b04      	cmp	r3, #4
 800dde8:	f63f af30 	bhi.w	800dc4c <d_unqualified_name+0x7c>
 800ddec:	e8df f003 	tbb	[pc, r3]
 800ddf0:	1e20031a 	.word	0x1e20031a
 800ddf4:	1c          	.byte	0x1c
 800ddf5:	00          	.byte	0x00
 800ddf6:	2702      	movs	r7, #2
 800ddf8:	6963      	ldr	r3, [r4, #20]
 800ddfa:	69a0      	ldr	r0, [r4, #24]
 800ddfc:	1c95      	adds	r5, r2, #2
 800ddfe:	4283      	cmp	r3, r0
 800de00:	60e5      	str	r5, [r4, #12]
 800de02:	daeb      	bge.n	800dddc <d_unqualified_name+0x20c>
 800de04:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800de08:	6926      	ldr	r6, [r4, #16]
 800de0a:	0080      	lsls	r0, r0, #2
 800de0c:	3301      	adds	r3, #1
 800de0e:	1835      	adds	r5, r6, r0
 800de10:	6163      	str	r3, [r4, #20]
 800de12:	d0e3      	beq.n	800dddc <d_unqualified_name+0x20c>
 800de14:	2900      	cmp	r1, #0
 800de16:	d0e1      	beq.n	800dddc <d_unqualified_name+0x20c>
 800de18:	2307      	movs	r3, #7
 800de1a:	5433      	strb	r3, [r6, r0]
 800de1c:	712f      	strb	r7, [r5, #4]
 800de1e:	60a9      	str	r1, [r5, #8]
 800de20:	7893      	ldrb	r3, [r2, #2]
 800de22:	e703      	b.n	800dc2c <d_unqualified_name+0x5c>
 800de24:	2701      	movs	r7, #1
 800de26:	e7e7      	b.n	800ddf8 <d_unqualified_name+0x228>
 800de28:	2705      	movs	r7, #5
 800de2a:	e7e5      	b.n	800ddf8 <d_unqualified_name+0x228>
 800de2c:	2704      	movs	r7, #4
 800de2e:	e7e3      	b.n	800ddf8 <d_unqualified_name+0x228>
 800de30:	2703      	movs	r7, #3
 800de32:	e7e1      	b.n	800ddf8 <d_unqualified_name+0x228>
 800de34:	68e3      	ldr	r3, [r4, #12]
 800de36:	4605      	mov	r5, r0
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	e6f7      	b.n	800dc2c <d_unqualified_name+0x5c>
 800de3c:	08015ae4 	.word	0x08015ae4

0800de40 <d_bare_function_type>:
 800de40:	b570      	push	{r4, r5, r6, lr}
 800de42:	68c3      	ldr	r3, [r0, #12]
 800de44:	4604      	mov	r4, r0
 800de46:	781a      	ldrb	r2, [r3, #0]
 800de48:	2a4a      	cmp	r2, #74	; 0x4a
 800de4a:	d00d      	beq.n	800de68 <d_bare_function_type+0x28>
 800de4c:	b971      	cbnz	r1, 800de6c <d_bare_function_type+0x2c>
 800de4e:	460d      	mov	r5, r1
 800de50:	4620      	mov	r0, r4
 800de52:	f7ff fe7b 	bl	800db4c <d_parmlist>
 800de56:	b178      	cbz	r0, 800de78 <d_bare_function_type+0x38>
 800de58:	4603      	mov	r3, r0
 800de5a:	462a      	mov	r2, r5
 800de5c:	4620      	mov	r0, r4
 800de5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de62:	2129      	movs	r1, #41	; 0x29
 800de64:	f7f8 be52 	b.w	8006b0c <d_make_comp>
 800de68:	3301      	adds	r3, #1
 800de6a:	60c3      	str	r3, [r0, #12]
 800de6c:	4620      	mov	r0, r4
 800de6e:	f7ff fa33 	bl	800d2d8 <d_type>
 800de72:	4605      	mov	r5, r0
 800de74:	2800      	cmp	r0, #0
 800de76:	d1eb      	bne.n	800de50 <d_bare_function_type+0x10>
 800de78:	2000      	movs	r0, #0
 800de7a:	bd70      	pop	{r4, r5, r6, pc}

0800de7c <d_function_type>:
 800de7c:	68c3      	ldr	r3, [r0, #12]
 800de7e:	781a      	ldrb	r2, [r3, #0]
 800de80:	2a46      	cmp	r2, #70	; 0x46
 800de82:	d001      	beq.n	800de88 <d_function_type+0xc>
 800de84:	2000      	movs	r0, #0
 800de86:	4770      	bx	lr
 800de88:	b510      	push	{r4, lr}
 800de8a:	1c5a      	adds	r2, r3, #1
 800de8c:	60c2      	str	r2, [r0, #12]
 800de8e:	785a      	ldrb	r2, [r3, #1]
 800de90:	2101      	movs	r1, #1
 800de92:	2a59      	cmp	r2, #89	; 0x59
 800de94:	bf04      	itt	eq
 800de96:	3302      	addeq	r3, #2
 800de98:	60c3      	streq	r3, [r0, #12]
 800de9a:	4604      	mov	r4, r0
 800de9c:	f7ff ffd0 	bl	800de40 <d_bare_function_type>
 800dea0:	4601      	mov	r1, r0
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7f8 feda 	bl	8006c5c <d_ref_qualifier>
 800dea8:	68e3      	ldr	r3, [r4, #12]
 800deaa:	781a      	ldrb	r2, [r3, #0]
 800deac:	2a45      	cmp	r2, #69	; 0x45
 800deae:	d001      	beq.n	800deb4 <d_function_type+0x38>
 800deb0:	2000      	movs	r0, #0
 800deb2:	bd10      	pop	{r4, pc}
 800deb4:	3301      	adds	r3, #1
 800deb6:	60e3      	str	r3, [r4, #12]
 800deb8:	bd10      	pop	{r4, pc}
 800deba:	bf00      	nop

0800debc <d_name>:
 800debc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dec0:	68c2      	ldr	r2, [r0, #12]
 800dec2:	b083      	sub	sp, #12
 800dec4:	7813      	ldrb	r3, [r2, #0]
 800dec6:	4605      	mov	r5, r0
 800dec8:	3b4e      	subs	r3, #78	; 0x4e
 800deca:	2b0c      	cmp	r3, #12
 800decc:	d869      	bhi.n	800dfa2 <d_name+0xe6>
 800dece:	e8df f003 	tbb	[pc, r3]
 800ded2:	681b      	.short	0x681b
 800ded4:	59686868 	.word	0x59686868
 800ded8:	68681668 	.word	0x68681668
 800dedc:	6868      	.short	0x6868
 800dede:	07          	.byte	0x07
 800dedf:	00          	.byte	0x00
 800dee0:	3201      	adds	r2, #1
 800dee2:	2100      	movs	r1, #0
 800dee4:	60c2      	str	r2, [r0, #12]
 800dee6:	f000 f9af 	bl	800e248 <d_encoding>
 800deea:	68eb      	ldr	r3, [r5, #12]
 800deec:	4606      	mov	r6, r0
 800deee:	7819      	ldrb	r1, [r3, #0]
 800def0:	2945      	cmp	r1, #69	; 0x45
 800def2:	f000 809c 	beq.w	800e02e <d_name+0x172>
 800def6:	2000      	movs	r0, #0
 800def8:	b003      	add	sp, #12
 800defa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800defe:	f7ff fe67 	bl	800dbd0 <d_unqualified_name>
 800df02:	b003      	add	sp, #12
 800df04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df08:	3201      	adds	r2, #1
 800df0a:	60c2      	str	r2, [r0, #12]
 800df0c:	a901      	add	r1, sp, #4
 800df0e:	2201      	movs	r2, #1
 800df10:	f7f8 fe48 	bl	8006ba4 <d_cv_qualifiers>
 800df14:	4681      	mov	r9, r0
 800df16:	2800      	cmp	r0, #0
 800df18:	d0ed      	beq.n	800def6 <d_name+0x3a>
 800df1a:	2100      	movs	r1, #0
 800df1c:	4628      	mov	r0, r5
 800df1e:	f7f8 fe9d 	bl	8006c5c <d_ref_qualifier>
 800df22:	4680      	mov	r8, r0
 800df24:	68ea      	ldr	r2, [r5, #12]
 800df26:	4eba      	ldr	r6, [pc, #744]	; (800e210 <d_name+0x354>)
 800df28:	7814      	ldrb	r4, [r2, #0]
 800df2a:	2700      	movs	r7, #0
 800df2c:	2c00      	cmp	r4, #0
 800df2e:	f000 80f1 	beq.w	800e114 <d_name+0x258>
 800df32:	2c44      	cmp	r4, #68	; 0x44
 800df34:	f000 80d8 	beq.w	800e0e8 <d_name+0x22c>
 800df38:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	2b1c      	cmp	r3, #28
 800df40:	f240 80ae 	bls.w	800e0a0 <d_name+0x1e4>
 800df44:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b19      	cmp	r3, #25
 800df4c:	f240 80ad 	bls.w	800e0aa <d_name+0x1ee>
 800df50:	2c55      	cmp	r4, #85	; 0x55
 800df52:	f000 80e5 	beq.w	800e120 <d_name+0x264>
 800df56:	2c53      	cmp	r4, #83	; 0x53
 800df58:	f000 80f0 	beq.w	800e13c <d_name+0x280>
 800df5c:	2c49      	cmp	r4, #73	; 0x49
 800df5e:	f000 80e6 	beq.w	800e12e <d_name+0x272>
 800df62:	2c54      	cmp	r4, #84	; 0x54
 800df64:	f000 8122 	beq.w	800e1ac <d_name+0x2f0>
 800df68:	2c45      	cmp	r4, #69	; 0x45
 800df6a:	f000 8157 	beq.w	800e21c <d_name+0x360>
 800df6e:	2c4d      	cmp	r4, #77	; 0x4d
 800df70:	f040 80d0 	bne.w	800e114 <d_name+0x258>
 800df74:	2f00      	cmp	r7, #0
 800df76:	f000 80cd 	beq.w	800e114 <d_name+0x258>
 800df7a:	1c53      	adds	r3, r2, #1
 800df7c:	60eb      	str	r3, [r5, #12]
 800df7e:	7854      	ldrb	r4, [r2, #1]
 800df80:	461a      	mov	r2, r3
 800df82:	e7d3      	b.n	800df2c <d_name+0x70>
 800df84:	7853      	ldrb	r3, [r2, #1]
 800df86:	2b74      	cmp	r3, #116	; 0x74
 800df88:	d029      	beq.n	800dfde <d_name+0x122>
 800df8a:	2100      	movs	r1, #0
 800df8c:	f7f8 fffa 	bl	8006f84 <d_substitution>
 800df90:	68eb      	ldr	r3, [r5, #12]
 800df92:	4604      	mov	r4, r0
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b49      	cmp	r3, #73	; 0x49
 800df98:	d047      	beq.n	800e02a <d_name+0x16e>
 800df9a:	4620      	mov	r0, r4
 800df9c:	b003      	add	sp, #12
 800df9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfa2:	f7ff fe15 	bl	800dbd0 <d_unqualified_name>
 800dfa6:	68eb      	ldr	r3, [r5, #12]
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	2b49      	cmp	r3, #73	; 0x49
 800dfae:	d1f4      	bne.n	800df9a <d_name+0xde>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d0a0      	beq.n	800def6 <d_name+0x3a>
 800dfb4:	6a2b      	ldr	r3, [r5, #32]
 800dfb6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	da9c      	bge.n	800def6 <d_name+0x3a>
 800dfbc:	69e9      	ldr	r1, [r5, #28]
 800dfbe:	1c5a      	adds	r2, r3, #1
 800dfc0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	622a      	str	r2, [r5, #32]
 800dfc8:	f7fc fca0 	bl	800a90c <d_template_args>
 800dfcc:	4622      	mov	r2, r4
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2104      	movs	r1, #4
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	f7f8 fd9a 	bl	8006b0c <d_make_comp>
 800dfd8:	b003      	add	sp, #12
 800dfda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfde:	6943      	ldr	r3, [r0, #20]
 800dfe0:	6981      	ldr	r1, [r0, #24]
 800dfe2:	3202      	adds	r2, #2
 800dfe4:	428b      	cmp	r3, r1
 800dfe6:	60c2      	str	r2, [r0, #12]
 800dfe8:	f2c0 80b2 	blt.w	800e150 <d_name+0x294>
 800dfec:	2400      	movs	r4, #0
 800dfee:	4628      	mov	r0, r5
 800dff0:	f7ff fdee 	bl	800dbd0 <d_unqualified_name>
 800dff4:	4622      	mov	r2, r4
 800dff6:	4603      	mov	r3, r0
 800dff8:	2101      	movs	r1, #1
 800dffa:	4628      	mov	r0, r5
 800dffc:	f7f8 fd86 	bl	8006b0c <d_make_comp>
 800e000:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e002:	68ea      	ldr	r2, [r5, #12]
 800e004:	3303      	adds	r3, #3
 800e006:	632b      	str	r3, [r5, #48]	; 0x30
 800e008:	7813      	ldrb	r3, [r2, #0]
 800e00a:	4604      	mov	r4, r0
 800e00c:	2b49      	cmp	r3, #73	; 0x49
 800e00e:	d1c4      	bne.n	800df9a <d_name+0xde>
 800e010:	2800      	cmp	r0, #0
 800e012:	f43f af70 	beq.w	800def6 <d_name+0x3a>
 800e016:	6a2b      	ldr	r3, [r5, #32]
 800e018:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e01a:	4293      	cmp	r3, r2
 800e01c:	f6bf af6b 	bge.w	800def6 <d_name+0x3a>
 800e020:	69e9      	ldr	r1, [r5, #28]
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800e028:	622a      	str	r2, [r5, #32]
 800e02a:	4628      	mov	r0, r5
 800e02c:	e7cc      	b.n	800dfc8 <d_name+0x10c>
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	60ea      	str	r2, [r5, #12]
 800e032:	7859      	ldrb	r1, [r3, #1]
 800e034:	2973      	cmp	r1, #115	; 0x73
 800e036:	f000 80a0 	beq.w	800e17a <d_name+0x2be>
 800e03a:	2964      	cmp	r1, #100	; 0x64
 800e03c:	f000 80bd 	beq.w	800e1ba <d_name+0x2fe>
 800e040:	4628      	mov	r0, r5
 800e042:	f7ff ff3b 	bl	800debc <d_name>
 800e046:	4604      	mov	r4, r0
 800e048:	2800      	cmp	r0, #0
 800e04a:	f000 8092 	beq.w	800e172 <d_name+0x2b6>
 800e04e:	7803      	ldrb	r3, [r0, #0]
 800e050:	2b44      	cmp	r3, #68	; 0x44
 800e052:	f000 808e 	beq.w	800e172 <d_name+0x2b6>
 800e056:	2b46      	cmp	r3, #70	; 0x46
 800e058:	f000 808b 	beq.w	800e172 <d_name+0x2b6>
 800e05c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e060:	68eb      	ldr	r3, [r5, #12]
 800e062:	781a      	ldrb	r2, [r3, #0]
 800e064:	2a5f      	cmp	r2, #95	; 0x5f
 800e066:	f000 80bf 	beq.w	800e1e8 <d_name+0x32c>
 800e06a:	1c7b      	adds	r3, r7, #1
 800e06c:	f000 8081 	beq.w	800e172 <d_name+0x2b6>
 800e070:	696b      	ldr	r3, [r5, #20]
 800e072:	69aa      	ldr	r2, [r5, #24]
 800e074:	4293      	cmp	r3, r2
 800e076:	da7e      	bge.n	800e176 <d_name+0x2ba>
 800e078:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e07c:	6929      	ldr	r1, [r5, #16]
 800e07e:	3301      	adds	r3, #1
 800e080:	0092      	lsls	r2, r2, #2
 800e082:	616b      	str	r3, [r5, #20]
 800e084:	188b      	adds	r3, r1, r2
 800e086:	d003      	beq.n	800e090 <d_name+0x1d4>
 800e088:	2045      	movs	r0, #69	; 0x45
 800e08a:	5488      	strb	r0, [r1, r2]
 800e08c:	609f      	str	r7, [r3, #8]
 800e08e:	605c      	str	r4, [r3, #4]
 800e090:	4632      	mov	r2, r6
 800e092:	4628      	mov	r0, r5
 800e094:	2102      	movs	r1, #2
 800e096:	f7f8 fd39 	bl	8006b0c <d_make_comp>
 800e09a:	b003      	add	sp, #12
 800e09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0a0:	fa26 f303 	lsr.w	r3, r6, r3
 800e0a4:	07d9      	lsls	r1, r3, #31
 800e0a6:	f57f af4d 	bpl.w	800df44 <d_name+0x88>
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	f7ff fd90 	bl	800dbd0 <d_unqualified_name>
 800e0b0:	b377      	cbz	r7, 800e110 <d_name+0x254>
 800e0b2:	2101      	movs	r1, #1
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	463a      	mov	r2, r7
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	f7f8 fd27 	bl	8006b0c <d_make_comp>
 800e0be:	4607      	mov	r7, r0
 800e0c0:	2c53      	cmp	r4, #83	; 0x53
 800e0c2:	d01d      	beq.n	800e100 <d_name+0x244>
 800e0c4:	68ea      	ldr	r2, [r5, #12]
 800e0c6:	7814      	ldrb	r4, [r2, #0]
 800e0c8:	2c45      	cmp	r4, #69	; 0x45
 800e0ca:	f43f af35 	beq.w	800df38 <d_name+0x7c>
 800e0ce:	b30f      	cbz	r7, 800e114 <d_name+0x258>
 800e0d0:	6a2b      	ldr	r3, [r5, #32]
 800e0d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	da1d      	bge.n	800e114 <d_name+0x258>
 800e0d8:	69ea      	ldr	r2, [r5, #28]
 800e0da:	1c59      	adds	r1, r3, #1
 800e0dc:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
 800e0e0:	68ea      	ldr	r2, [r5, #12]
 800e0e2:	6229      	str	r1, [r5, #32]
 800e0e4:	7814      	ldrb	r4, [r2, #0]
 800e0e6:	e721      	b.n	800df2c <d_name+0x70>
 800e0e8:	7853      	ldrb	r3, [r2, #1]
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e0f0:	2b54      	cmp	r3, #84	; 0x54
 800e0f2:	d008      	beq.n	800e106 <d_name+0x24a>
 800e0f4:	f7ff fd6c 	bl	800dbd0 <d_unqualified_name>
 800e0f8:	2f00      	cmp	r7, #0
 800e0fa:	d1da      	bne.n	800e0b2 <d_name+0x1f6>
 800e0fc:	4607      	mov	r7, r0
 800e0fe:	e7e1      	b.n	800e0c4 <d_name+0x208>
 800e100:	68ea      	ldr	r2, [r5, #12]
 800e102:	7814      	ldrb	r4, [r2, #0]
 800e104:	e712      	b.n	800df2c <d_name+0x70>
 800e106:	f7ff f8e7 	bl	800d2d8 <d_type>
 800e10a:	2f00      	cmp	r7, #0
 800e10c:	d1d1      	bne.n	800e0b2 <d_name+0x1f6>
 800e10e:	e7f5      	b.n	800e0fc <d_name+0x240>
 800e110:	4607      	mov	r7, r0
 800e112:	e7d5      	b.n	800e0c0 <d_name+0x204>
 800e114:	2000      	movs	r0, #0
 800e116:	f8c9 0000 	str.w	r0, [r9]
 800e11a:	b003      	add	sp, #12
 800e11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e120:	4628      	mov	r0, r5
 800e122:	f7ff fd55 	bl	800dbd0 <d_unqualified_name>
 800e126:	2f00      	cmp	r7, #0
 800e128:	d1c3      	bne.n	800e0b2 <d_name+0x1f6>
 800e12a:	4607      	mov	r7, r0
 800e12c:	e7ca      	b.n	800e0c4 <d_name+0x208>
 800e12e:	2f00      	cmp	r7, #0
 800e130:	d0f0      	beq.n	800e114 <d_name+0x258>
 800e132:	4628      	mov	r0, r5
 800e134:	f7fc fbea 	bl	800a90c <d_template_args>
 800e138:	2104      	movs	r1, #4
 800e13a:	e7bb      	b.n	800e0b4 <d_name+0x1f8>
 800e13c:	2101      	movs	r1, #1
 800e13e:	4628      	mov	r0, r5
 800e140:	f7f8 ff20 	bl	8006f84 <d_substitution>
 800e144:	2f00      	cmp	r7, #0
 800e146:	d1b4      	bne.n	800e0b2 <d_name+0x1f6>
 800e148:	68ea      	ldr	r2, [r5, #12]
 800e14a:	4607      	mov	r7, r0
 800e14c:	7814      	ldrb	r4, [r2, #0]
 800e14e:	e6ed      	b.n	800df2c <d_name+0x70>
 800e150:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e154:	6902      	ldr	r2, [r0, #16]
 800e156:	3301      	adds	r3, #1
 800e158:	0089      	lsls	r1, r1, #2
 800e15a:	6143      	str	r3, [r0, #20]
 800e15c:	1853      	adds	r3, r2, r1
 800e15e:	f43f af45 	beq.w	800dfec <d_name+0x130>
 800e162:	4e2c      	ldr	r6, [pc, #176]	; (800e214 <d_name+0x358>)
 800e164:	2700      	movs	r7, #0
 800e166:	2003      	movs	r0, #3
 800e168:	5457      	strb	r7, [r2, r1]
 800e16a:	461c      	mov	r4, r3
 800e16c:	605e      	str	r6, [r3, #4]
 800e16e:	6098      	str	r0, [r3, #8]
 800e170:	e73d      	b.n	800dfee <d_name+0x132>
 800e172:	4623      	mov	r3, r4
 800e174:	e78c      	b.n	800e090 <d_name+0x1d4>
 800e176:	2300      	movs	r3, #0
 800e178:	e78a      	b.n	800e090 <d_name+0x1d4>
 800e17a:	1c9a      	adds	r2, r3, #2
 800e17c:	60ea      	str	r2, [r5, #12]
 800e17e:	789a      	ldrb	r2, [r3, #2]
 800e180:	2a5f      	cmp	r2, #95	; 0x5f
 800e182:	d03b      	beq.n	800e1fc <d_name+0x340>
 800e184:	696b      	ldr	r3, [r5, #20]
 800e186:	69aa      	ldr	r2, [r5, #24]
 800e188:	4293      	cmp	r3, r2
 800e18a:	daf4      	bge.n	800e176 <d_name+0x2ba>
 800e18c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e190:	6928      	ldr	r0, [r5, #16]
 800e192:	0089      	lsls	r1, r1, #2
 800e194:	3301      	adds	r3, #1
 800e196:	1842      	adds	r2, r0, r1
 800e198:	616b      	str	r3, [r5, #20]
 800e19a:	d0ec      	beq.n	800e176 <d_name+0x2ba>
 800e19c:	4c1e      	ldr	r4, [pc, #120]	; (800e218 <d_name+0x35c>)
 800e19e:	2700      	movs	r7, #0
 800e1a0:	5447      	strb	r7, [r0, r1]
 800e1a2:	210e      	movs	r1, #14
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	6054      	str	r4, [r2, #4]
 800e1a8:	6091      	str	r1, [r2, #8]
 800e1aa:	e771      	b.n	800e090 <d_name+0x1d4>
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	f7f8 fe4f 	bl	8006e50 <d_template_param>
 800e1b2:	2f00      	cmp	r7, #0
 800e1b4:	f47f af7d 	bne.w	800e0b2 <d_name+0x1f6>
 800e1b8:	e7a0      	b.n	800e0fc <d_name+0x240>
 800e1ba:	3302      	adds	r3, #2
 800e1bc:	60eb      	str	r3, [r5, #12]
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f7f8 fe2e 	bl	8006e20 <d_compact_number>
 800e1c4:	1e07      	subs	r7, r0, #0
 800e1c6:	f6ff ae96 	blt.w	800def6 <d_name+0x3a>
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f7ff fe76 	bl	800debc <d_name>
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	f43f af4c 	beq.w	800e070 <d_name+0x1b4>
 800e1d8:	7803      	ldrb	r3, [r0, #0]
 800e1da:	2b44      	cmp	r3, #68	; 0x44
 800e1dc:	f43f af48 	beq.w	800e070 <d_name+0x1b4>
 800e1e0:	2b46      	cmp	r3, #70	; 0x46
 800e1e2:	f43f af45 	beq.w	800e070 <d_name+0x1b4>
 800e1e6:	e73b      	b.n	800e060 <d_name+0x1a4>
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e1f0:	f7f8 fdd2 	bl	8006d98 <d_number.isra.0>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	f6bf af38 	bge.w	800e06a <d_name+0x1ae>
 800e1fa:	e67c      	b.n	800def6 <d_name+0x3a>
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	3303      	adds	r3, #3
 800e200:	f840 3f0c 	str.w	r3, [r0, #12]!
 800e204:	f7f8 fdc8 	bl	8006d98 <d_number.isra.0>
 800e208:	2800      	cmp	r0, #0
 800e20a:	dabb      	bge.n	800e184 <d_name+0x2c8>
 800e20c:	e673      	b.n	800def6 <d_name+0x3a>
 800e20e:	bf00      	nop
 800e210:	100803ff 	.word	0x100803ff
 800e214:	08015af8 	.word	0x08015af8
 800e218:	08015ae8 	.word	0x08015ae8
 800e21c:	f8c9 7000 	str.w	r7, [r9]
 800e220:	2f00      	cmp	r7, #0
 800e222:	f43f ae68 	beq.w	800def6 <d_name+0x3a>
 800e226:	f1b8 0f00 	cmp.w	r8, #0
 800e22a:	d004      	beq.n	800e236 <d_name+0x37a>
 800e22c:	9b01      	ldr	r3, [sp, #4]
 800e22e:	f8cd 8004 	str.w	r8, [sp, #4]
 800e232:	f8c8 3004 	str.w	r3, [r8, #4]
 800e236:	68eb      	ldr	r3, [r5, #12]
 800e238:	781a      	ldrb	r2, [r3, #0]
 800e23a:	2a45      	cmp	r2, #69	; 0x45
 800e23c:	f47f ae5b 	bne.w	800def6 <d_name+0x3a>
 800e240:	3301      	adds	r3, #1
 800e242:	60eb      	str	r3, [r5, #12]
 800e244:	9801      	ldr	r0, [sp, #4]
 800e246:	e65c      	b.n	800df02 <d_name+0x46>

0800e248 <d_encoding>:
 800e248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e24c:	68c3      	ldr	r3, [r0, #12]
 800e24e:	4605      	mov	r5, r0
 800e250:	781a      	ldrb	r2, [r3, #0]
 800e252:	2a47      	cmp	r2, #71	; 0x47
 800e254:	d029      	beq.n	800e2aa <d_encoding+0x62>
 800e256:	2a54      	cmp	r2, #84	; 0x54
 800e258:	d027      	beq.n	800e2aa <d_encoding+0x62>
 800e25a:	460e      	mov	r6, r1
 800e25c:	f7ff fe2e 	bl	800debc <d_name>
 800e260:	4604      	mov	r4, r0
 800e262:	b360      	cbz	r0, 800e2be <d_encoding+0x76>
 800e264:	b116      	cbz	r6, 800e26c <d_encoding+0x24>
 800e266:	68ab      	ldr	r3, [r5, #8]
 800e268:	07db      	lsls	r3, r3, #31
 800e26a:	d52c      	bpl.n	800e2c6 <d_encoding+0x7e>
 800e26c:	68eb      	ldr	r3, [r5, #12]
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	b38b      	cbz	r3, 800e2d6 <d_encoding+0x8e>
 800e272:	2b45      	cmp	r3, #69	; 0x45
 800e274:	d02f      	beq.n	800e2d6 <d_encoding+0x8e>
 800e276:	4621      	mov	r1, r4
 800e278:	780b      	ldrb	r3, [r1, #0]
 800e27a:	2b04      	cmp	r3, #4
 800e27c:	f1a3 021c 	sub.w	r2, r3, #28
 800e280:	f000 8118 	beq.w	800e4b4 <d_encoding+0x26c>
 800e284:	f0c0 8114 	bcc.w	800e4b0 <d_encoding+0x268>
 800e288:	2a04      	cmp	r2, #4
 800e28a:	f200 8111 	bhi.w	800e4b0 <d_encoding+0x268>
 800e28e:	6849      	ldr	r1, [r1, #4]
 800e290:	2900      	cmp	r1, #0
 800e292:	d1f1      	bne.n	800e278 <d_encoding+0x30>
 800e294:	4628      	mov	r0, r5
 800e296:	f7ff fdd3 	bl	800de40 <d_bare_function_type>
 800e29a:	4622      	mov	r2, r4
 800e29c:	4603      	mov	r3, r0
 800e29e:	2103      	movs	r1, #3
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2a6:	f7f8 bc31 	b.w	8006b0c <d_make_comp>
 800e2aa:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800e2ac:	f101 0214 	add.w	r2, r1, #20
 800e2b0:	632a      	str	r2, [r5, #48]	; 0x30
 800e2b2:	781a      	ldrb	r2, [r3, #0]
 800e2b4:	2a54      	cmp	r2, #84	; 0x54
 800e2b6:	d011      	beq.n	800e2dc <d_encoding+0x94>
 800e2b8:	2a47      	cmp	r2, #71	; 0x47
 800e2ba:	f000 8085 	beq.w	800e3c8 <d_encoding+0x180>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2c4:	6864      	ldr	r4, [r4, #4]
 800e2c6:	7823      	ldrb	r3, [r4, #0]
 800e2c8:	f1a3 021c 	sub.w	r2, r3, #28
 800e2cc:	2a04      	cmp	r2, #4
 800e2ce:	d9f9      	bls.n	800e2c4 <d_encoding+0x7c>
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	f000 815f 	beq.w	800e594 <d_encoding+0x34c>
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2dc:	1c5a      	adds	r2, r3, #1
 800e2de:	60ea      	str	r2, [r5, #12]
 800e2e0:	785a      	ldrb	r2, [r3, #1]
 800e2e2:	2a00      	cmp	r2, #0
 800e2e4:	d0eb      	beq.n	800e2be <d_encoding+0x76>
 800e2e6:	1c9a      	adds	r2, r3, #2
 800e2e8:	60ea      	str	r2, [r5, #12]
 800e2ea:	785b      	ldrb	r3, [r3, #1]
 800e2ec:	3b43      	subs	r3, #67	; 0x43
 800e2ee:	2b33      	cmp	r3, #51	; 0x33
 800e2f0:	d8e5      	bhi.n	800e2be <d_encoding+0x76>
 800e2f2:	a201      	add	r2, pc, #4	; (adr r2, 800e2f8 <d_encoding+0xb0>)
 800e2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f8:	0800e815 	.word	0x0800e815
 800e2fc:	0800e2bf 	.word	0x0800e2bf
 800e300:	0800e2bf 	.word	0x0800e2bf
 800e304:	0800e7ff 	.word	0x0800e7ff
 800e308:	0800e2bf 	.word	0x0800e2bf
 800e30c:	0800e7e9 	.word	0x0800e7e9
 800e310:	0800e7d3 	.word	0x0800e7d3
 800e314:	0800e7bd 	.word	0x0800e7bd
 800e318:	0800e2bf 	.word	0x0800e2bf
 800e31c:	0800e2bf 	.word	0x0800e2bf
 800e320:	0800e2bf 	.word	0x0800e2bf
 800e324:	0800e2bf 	.word	0x0800e2bf
 800e328:	0800e2bf 	.word	0x0800e2bf
 800e32c:	0800e2bf 	.word	0x0800e2bf
 800e330:	0800e2bf 	.word	0x0800e2bf
 800e334:	0800e2bf 	.word	0x0800e2bf
 800e338:	0800e7a7 	.word	0x0800e7a7
 800e33c:	0800e78d 	.word	0x0800e78d
 800e340:	0800e2bf 	.word	0x0800e2bf
 800e344:	0800e773 	.word	0x0800e773
 800e348:	0800e737 	.word	0x0800e737
 800e34c:	0800e2bf 	.word	0x0800e2bf
 800e350:	0800e2bf 	.word	0x0800e2bf
 800e354:	0800e2bf 	.word	0x0800e2bf
 800e358:	0800e2bf 	.word	0x0800e2bf
 800e35c:	0800e2bf 	.word	0x0800e2bf
 800e360:	0800e2bf 	.word	0x0800e2bf
 800e364:	0800e2bf 	.word	0x0800e2bf
 800e368:	0800e2bf 	.word	0x0800e2bf
 800e36c:	0800e2bf 	.word	0x0800e2bf
 800e370:	0800e2bf 	.word	0x0800e2bf
 800e374:	0800e2bf 	.word	0x0800e2bf
 800e378:	0800e703 	.word	0x0800e703
 800e37c:	0800e2bf 	.word	0x0800e2bf
 800e380:	0800e2bf 	.word	0x0800e2bf
 800e384:	0800e2bf 	.word	0x0800e2bf
 800e388:	0800e2bf 	.word	0x0800e2bf
 800e38c:	0800e74d 	.word	0x0800e74d
 800e390:	0800e2bf 	.word	0x0800e2bf
 800e394:	0800e2bf 	.word	0x0800e2bf
 800e398:	0800e2bf 	.word	0x0800e2bf
 800e39c:	0800e2bf 	.word	0x0800e2bf
 800e3a0:	0800e2bf 	.word	0x0800e2bf
 800e3a4:	0800e2bf 	.word	0x0800e2bf
 800e3a8:	0800e2bf 	.word	0x0800e2bf
 800e3ac:	0800e2bf 	.word	0x0800e2bf
 800e3b0:	0800e2bf 	.word	0x0800e2bf
 800e3b4:	0800e2bf 	.word	0x0800e2bf
 800e3b8:	0800e2bf 	.word	0x0800e2bf
 800e3bc:	0800e2bf 	.word	0x0800e2bf
 800e3c0:	0800e2bf 	.word	0x0800e2bf
 800e3c4:	0800e6dd 	.word	0x0800e6dd
 800e3c8:	1c5a      	adds	r2, r3, #1
 800e3ca:	60ea      	str	r2, [r5, #12]
 800e3cc:	785a      	ldrb	r2, [r3, #1]
 800e3ce:	2a00      	cmp	r2, #0
 800e3d0:	f43f af75 	beq.w	800e2be <d_encoding+0x76>
 800e3d4:	1c9a      	adds	r2, r3, #2
 800e3d6:	60ea      	str	r2, [r5, #12]
 800e3d8:	785a      	ldrb	r2, [r3, #1]
 800e3da:	3a41      	subs	r2, #65	; 0x41
 800e3dc:	2a31      	cmp	r2, #49	; 0x31
 800e3de:	f63f af6e 	bhi.w	800e2be <d_encoding+0x76>
 800e3e2:	a101      	add	r1, pc, #4	; (adr r1, 800e3e8 <d_encoding+0x1a0>)
 800e3e4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e3e8:	0800e699 	.word	0x0800e699
 800e3ec:	0800e2bf 	.word	0x0800e2bf
 800e3f0:	0800e2bf 	.word	0x0800e2bf
 800e3f4:	0800e2bf 	.word	0x0800e2bf
 800e3f8:	0800e2bf 	.word	0x0800e2bf
 800e3fc:	0800e2bf 	.word	0x0800e2bf
 800e400:	0800e2bf 	.word	0x0800e2bf
 800e404:	0800e2bf 	.word	0x0800e2bf
 800e408:	0800e2bf 	.word	0x0800e2bf
 800e40c:	0800e2bf 	.word	0x0800e2bf
 800e410:	0800e2bf 	.word	0x0800e2bf
 800e414:	0800e2bf 	.word	0x0800e2bf
 800e418:	0800e2bf 	.word	0x0800e2bf
 800e41c:	0800e2bf 	.word	0x0800e2bf
 800e420:	0800e2bf 	.word	0x0800e2bf
 800e424:	0800e2bf 	.word	0x0800e2bf
 800e428:	0800e2bf 	.word	0x0800e2bf
 800e42c:	0800e67b 	.word	0x0800e67b
 800e430:	0800e2bf 	.word	0x0800e2bf
 800e434:	0800e6b1 	.word	0x0800e6b1
 800e438:	0800e2bf 	.word	0x0800e2bf
 800e43c:	0800e665 	.word	0x0800e665
 800e440:	0800e2bf 	.word	0x0800e2bf
 800e444:	0800e2bf 	.word	0x0800e2bf
 800e448:	0800e2bf 	.word	0x0800e2bf
 800e44c:	0800e2bf 	.word	0x0800e2bf
 800e450:	0800e2bf 	.word	0x0800e2bf
 800e454:	0800e2bf 	.word	0x0800e2bf
 800e458:	0800e2bf 	.word	0x0800e2bf
 800e45c:	0800e2bf 	.word	0x0800e2bf
 800e460:	0800e2bf 	.word	0x0800e2bf
 800e464:	0800e2bf 	.word	0x0800e2bf
 800e468:	0800e2bf 	.word	0x0800e2bf
 800e46c:	0800e2bf 	.word	0x0800e2bf
 800e470:	0800e2bf 	.word	0x0800e2bf
 800e474:	0800e2bf 	.word	0x0800e2bf
 800e478:	0800e2bf 	.word	0x0800e2bf
 800e47c:	0800e2bf 	.word	0x0800e2bf
 800e480:	0800e2bf 	.word	0x0800e2bf
 800e484:	0800e2bf 	.word	0x0800e2bf
 800e488:	0800e2bf 	.word	0x0800e2bf
 800e48c:	0800e2bf 	.word	0x0800e2bf
 800e490:	0800e2bf 	.word	0x0800e2bf
 800e494:	0800e2bf 	.word	0x0800e2bf
 800e498:	0800e2bf 	.word	0x0800e2bf
 800e49c:	0800e2bf 	.word	0x0800e2bf
 800e4a0:	0800e2bf 	.word	0x0800e2bf
 800e4a4:	0800e2bf 	.word	0x0800e2bf
 800e4a8:	0800e2bf 	.word	0x0800e2bf
 800e4ac:	0800e5bb 	.word	0x0800e5bb
 800e4b0:	2100      	movs	r1, #0
 800e4b2:	e6ef      	b.n	800e294 <d_encoding+0x4c>
 800e4b4:	684a      	ldr	r2, [r1, #4]
 800e4b6:	2a00      	cmp	r2, #0
 800e4b8:	d07d      	beq.n	800e5b6 <d_encoding+0x36e>
 800e4ba:	7813      	ldrb	r3, [r2, #0]
 800e4bc:	3b01      	subs	r3, #1
 800e4be:	2b32      	cmp	r3, #50	; 0x32
 800e4c0:	d879      	bhi.n	800e5b6 <d_encoding+0x36e>
 800e4c2:	a101      	add	r1, pc, #4	; (adr r1, 800e4c8 <d_encoding+0x280>)
 800e4c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4c8:	0800e5b1 	.word	0x0800e5b1
 800e4cc:	0800e5b1 	.word	0x0800e5b1
 800e4d0:	0800e5b7 	.word	0x0800e5b7
 800e4d4:	0800e5b7 	.word	0x0800e5b7
 800e4d8:	0800e5b7 	.word	0x0800e5b7
 800e4dc:	0800e5b7 	.word	0x0800e5b7
 800e4e0:	0800e4b1 	.word	0x0800e4b1
 800e4e4:	0800e4b1 	.word	0x0800e4b1
 800e4e8:	0800e5b7 	.word	0x0800e5b7
 800e4ec:	0800e5b7 	.word	0x0800e5b7
 800e4f0:	0800e5b7 	.word	0x0800e5b7
 800e4f4:	0800e5b7 	.word	0x0800e5b7
 800e4f8:	0800e5b7 	.word	0x0800e5b7
 800e4fc:	0800e5b7 	.word	0x0800e5b7
 800e500:	0800e5b7 	.word	0x0800e5b7
 800e504:	0800e5b7 	.word	0x0800e5b7
 800e508:	0800e5b7 	.word	0x0800e5b7
 800e50c:	0800e5b7 	.word	0x0800e5b7
 800e510:	0800e5b7 	.word	0x0800e5b7
 800e514:	0800e5b7 	.word	0x0800e5b7
 800e518:	0800e5b7 	.word	0x0800e5b7
 800e51c:	0800e5b7 	.word	0x0800e5b7
 800e520:	0800e5b7 	.word	0x0800e5b7
 800e524:	0800e5b7 	.word	0x0800e5b7
 800e528:	0800e5b7 	.word	0x0800e5b7
 800e52c:	0800e5b7 	.word	0x0800e5b7
 800e530:	0800e5b7 	.word	0x0800e5b7
 800e534:	0800e5b7 	.word	0x0800e5b7
 800e538:	0800e5b7 	.word	0x0800e5b7
 800e53c:	0800e5b7 	.word	0x0800e5b7
 800e540:	0800e5b7 	.word	0x0800e5b7
 800e544:	0800e5b7 	.word	0x0800e5b7
 800e548:	0800e5b7 	.word	0x0800e5b7
 800e54c:	0800e5b7 	.word	0x0800e5b7
 800e550:	0800e5b7 	.word	0x0800e5b7
 800e554:	0800e5b7 	.word	0x0800e5b7
 800e558:	0800e5b7 	.word	0x0800e5b7
 800e55c:	0800e5b7 	.word	0x0800e5b7
 800e560:	0800e5b7 	.word	0x0800e5b7
 800e564:	0800e5b7 	.word	0x0800e5b7
 800e568:	0800e5b7 	.word	0x0800e5b7
 800e56c:	0800e5b7 	.word	0x0800e5b7
 800e570:	0800e5b7 	.word	0x0800e5b7
 800e574:	0800e5b7 	.word	0x0800e5b7
 800e578:	0800e5b7 	.word	0x0800e5b7
 800e57c:	0800e5b7 	.word	0x0800e5b7
 800e580:	0800e5b7 	.word	0x0800e5b7
 800e584:	0800e5b7 	.word	0x0800e5b7
 800e588:	0800e5b7 	.word	0x0800e5b7
 800e58c:	0800e5b7 	.word	0x0800e5b7
 800e590:	0800e4b1 	.word	0x0800e4b1
 800e594:	68a2      	ldr	r2, [r4, #8]
 800e596:	7813      	ldrb	r3, [r2, #0]
 800e598:	3b1c      	subs	r3, #28
 800e59a:	2b04      	cmp	r3, #4
 800e59c:	d804      	bhi.n	800e5a8 <d_encoding+0x360>
 800e59e:	6852      	ldr	r2, [r2, #4]
 800e5a0:	7813      	ldrb	r3, [r2, #0]
 800e5a2:	3b1c      	subs	r3, #28
 800e5a4:	2b04      	cmp	r3, #4
 800e5a6:	d9fa      	bls.n	800e59e <d_encoding+0x356>
 800e5a8:	60a2      	str	r2, [r4, #8]
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5b0:	6892      	ldr	r2, [r2, #8]
 800e5b2:	2a00      	cmp	r2, #0
 800e5b4:	d181      	bne.n	800e4ba <d_encoding+0x272>
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	e66c      	b.n	800e294 <d_encoding+0x4c>
 800e5ba:	f105 000c 	add.w	r0, r5, #12
 800e5be:	f7f8 fbeb 	bl	8006d98 <d_number.isra.0>
 800e5c2:	2801      	cmp	r0, #1
 800e5c4:	f77f ae7b 	ble.w	800e2be <d_encoding+0x76>
 800e5c8:	68eb      	ldr	r3, [r5, #12]
 800e5ca:	781a      	ldrb	r2, [r3, #0]
 800e5cc:	2a00      	cmp	r2, #0
 800e5ce:	f43f ae76 	beq.w	800e2be <d_encoding+0x76>
 800e5d2:	1c5f      	adds	r7, r3, #1
 800e5d4:	60ef      	str	r7, [r5, #12]
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	2b5f      	cmp	r3, #95	; 0x5f
 800e5da:	f47f ae70 	bne.w	800e2be <d_encoding+0x76>
 800e5de:	2200      	movs	r2, #0
 800e5e0:	4690      	mov	r8, r2
 800e5e2:	1e46      	subs	r6, r0, #1
 800e5e4:	f04f 093f 	mov.w	r9, #63	; 0x3f
 800e5e8:	783b      	ldrb	r3, [r7, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f43f ae67 	beq.w	800e2be <d_encoding+0x76>
 800e5f0:	2b24      	cmp	r3, #36	; 0x24
 800e5f2:	f000 8135 	beq.w	800e860 <d_encoding+0x618>
 800e5f6:	463c      	mov	r4, r7
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	e004      	b.n	800e606 <d_encoding+0x3be>
 800e5fc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e600:	b123      	cbz	r3, 800e60c <d_encoding+0x3c4>
 800e602:	2b24      	cmp	r3, #36	; 0x24
 800e604:	d002      	beq.n	800e60c <d_encoding+0x3c4>
 800e606:	3101      	adds	r1, #1
 800e608:	42b1      	cmp	r1, r6
 800e60a:	dbf7      	blt.n	800e5fc <d_encoding+0x3b4>
 800e60c:	696b      	ldr	r3, [r5, #20]
 800e60e:	69a8      	ldr	r0, [r5, #24]
 800e610:	4283      	cmp	r3, r0
 800e612:	f280 811f 	bge.w	800e854 <d_encoding+0x60c>
 800e616:	6928      	ldr	r0, [r5, #16]
 800e618:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e61c:	f103 0e01 	add.w	lr, r3, #1
 800e620:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 800e624:	f8c5 e014 	str.w	lr, [r5, #20]
 800e628:	f000 8114 	beq.w	800e854 <d_encoding+0x60c>
 800e62c:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 800e630:	605f      	str	r7, [r3, #4]
 800e632:	6099      	str	r1, [r3, #8]
 800e634:	68ef      	ldr	r7, [r5, #12]
 800e636:	1a76      	subs	r6, r6, r1
 800e638:	440f      	add	r7, r1
 800e63a:	60ef      	str	r7, [r5, #12]
 800e63c:	2a00      	cmp	r2, #0
 800e63e:	f000 812c 	beq.w	800e89a <d_encoding+0x652>
 800e642:	213e      	movs	r1, #62	; 0x3e
 800e644:	4628      	mov	r0, r5
 800e646:	f7f8 fa61 	bl	8006b0c <d_make_comp>
 800e64a:	4602      	mov	r2, r0
 800e64c:	2800      	cmp	r0, #0
 800e64e:	f43f ae36 	beq.w	800e2be <d_encoding+0x76>
 800e652:	2e00      	cmp	r6, #0
 800e654:	dcc8      	bgt.n	800e5e8 <d_encoding+0x3a0>
 800e656:	4628      	mov	r0, r5
 800e658:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e65c:	2300      	movs	r3, #0
 800e65e:	213d      	movs	r1, #61	; 0x3d
 800e660:	f7f8 ba54 	b.w	8006b0c <d_make_comp>
 800e664:	4628      	mov	r0, r5
 800e666:	f7ff fc29 	bl	800debc <d_name>
 800e66a:	2300      	movs	r3, #0
 800e66c:	4602      	mov	r2, r0
 800e66e:	2113      	movs	r1, #19
 800e670:	4628      	mov	r0, r5
 800e672:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e676:	f7f8 ba49 	b.w	8006b0c <d_make_comp>
 800e67a:	4628      	mov	r0, r5
 800e67c:	f7ff fc1e 	bl	800debc <d_name>
 800e680:	4604      	mov	r4, r0
 800e682:	4628      	mov	r0, r5
 800e684:	f7f8 fbb0 	bl	8006de8 <d_number_component>
 800e688:	4622      	mov	r2, r4
 800e68a:	4603      	mov	r3, r0
 800e68c:	2116      	movs	r1, #22
 800e68e:	4628      	mov	r0, r5
 800e690:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e694:	f7f8 ba3a 	b.w	8006b0c <d_make_comp>
 800e698:	2100      	movs	r1, #0
 800e69a:	4628      	mov	r0, r5
 800e69c:	f7ff fdd4 	bl	800e248 <d_encoding>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	2117      	movs	r1, #23
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ac:	f7f8 ba2e 	b.w	8006b0c <d_make_comp>
 800e6b0:	789a      	ldrb	r2, [r3, #2]
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	2a00      	cmp	r2, #0
 800e6b8:	f000 80f1 	beq.w	800e89e <d_encoding+0x656>
 800e6bc:	1cda      	adds	r2, r3, #3
 800e6be:	60ea      	str	r2, [r5, #12]
 800e6c0:	789b      	ldrb	r3, [r3, #2]
 800e6c2:	2b6e      	cmp	r3, #110	; 0x6e
 800e6c4:	f040 80eb 	bne.w	800e89e <d_encoding+0x656>
 800e6c8:	f7ff fdbe 	bl	800e248 <d_encoding>
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	2148      	movs	r1, #72	; 0x48
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6d8:	f7f8 ba18 	b.w	8006b0c <d_make_comp>
 800e6dc:	2176      	movs	r1, #118	; 0x76
 800e6de:	4628      	mov	r0, r5
 800e6e0:	f7f8 fd16 	bl	8007110 <d_call_offset>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	f43f adea 	beq.w	800e2be <d_encoding+0x76>
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	f7ff fdab 	bl	800e248 <d_encoding>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	2110      	movs	r1, #16
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6fe:	f7f8 ba05 	b.w	8006b0c <d_make_comp>
 800e702:	2100      	movs	r1, #0
 800e704:	4628      	mov	r0, r5
 800e706:	f7f8 fd03 	bl	8007110 <d_call_offset>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	f43f add7 	beq.w	800e2be <d_encoding+0x76>
 800e710:	2100      	movs	r1, #0
 800e712:	4628      	mov	r0, r5
 800e714:	f7f8 fcfc 	bl	8007110 <d_call_offset>
 800e718:	2800      	cmp	r0, #0
 800e71a:	f43f add0 	beq.w	800e2be <d_encoding+0x76>
 800e71e:	2100      	movs	r1, #0
 800e720:	4628      	mov	r0, r5
 800e722:	f7ff fd91 	bl	800e248 <d_encoding>
 800e726:	2300      	movs	r3, #0
 800e728:	4602      	mov	r2, r0
 800e72a:	2111      	movs	r1, #17
 800e72c:	4628      	mov	r0, r5
 800e72e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e732:	f7f8 b9eb 	b.w	8006b0c <d_make_comp>
 800e736:	4628      	mov	r0, r5
 800e738:	f7ff fbc0 	bl	800debc <d_name>
 800e73c:	2300      	movs	r3, #0
 800e73e:	4602      	mov	r2, r0
 800e740:	2115      	movs	r1, #21
 800e742:	4628      	mov	r0, r5
 800e744:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e748:	f7f8 b9e0 	b.w	8006b0c <d_make_comp>
 800e74c:	2168      	movs	r1, #104	; 0x68
 800e74e:	4628      	mov	r0, r5
 800e750:	f7f8 fcde 	bl	8007110 <d_call_offset>
 800e754:	2800      	cmp	r0, #0
 800e756:	f43f adb2 	beq.w	800e2be <d_encoding+0x76>
 800e75a:	2100      	movs	r1, #0
 800e75c:	4628      	mov	r0, r5
 800e75e:	f7ff fd73 	bl	800e248 <d_encoding>
 800e762:	2300      	movs	r3, #0
 800e764:	4602      	mov	r2, r0
 800e766:	210f      	movs	r1, #15
 800e768:	4628      	mov	r0, r5
 800e76a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e76e:	f7f8 b9cd 	b.w	8006b0c <d_make_comp>
 800e772:	310f      	adds	r1, #15
 800e774:	6329      	str	r1, [r5, #48]	; 0x30
 800e776:	4628      	mov	r0, r5
 800e778:	f7fe fdae 	bl	800d2d8 <d_type>
 800e77c:	2300      	movs	r3, #0
 800e77e:	4602      	mov	r2, r0
 800e780:	2109      	movs	r1, #9
 800e782:	4628      	mov	r0, r5
 800e784:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e788:	f7f8 b9c0 	b.w	8006b0c <d_make_comp>
 800e78c:	310a      	adds	r1, #10
 800e78e:	6329      	str	r1, [r5, #48]	; 0x30
 800e790:	4628      	mov	r0, r5
 800e792:	f7fe fda1 	bl	800d2d8 <d_type>
 800e796:	2300      	movs	r3, #0
 800e798:	4602      	mov	r2, r0
 800e79a:	210a      	movs	r1, #10
 800e79c:	4628      	mov	r0, r5
 800e79e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a2:	f7f8 b9b3 	b.w	8006b0c <d_make_comp>
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f7fe fd96 	bl	800d2d8 <d_type>
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	210d      	movs	r1, #13
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b8:	f7f8 b9a8 	b.w	8006b0c <d_make_comp>
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f7fe fd8b 	bl	800d2d8 <d_type>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	2112      	movs	r1, #18
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7ce:	f7f8 b99d 	b.w	8006b0c <d_make_comp>
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f7fe fd80 	bl	800d2d8 <d_type>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	4602      	mov	r2, r0
 800e7dc:	210c      	movs	r1, #12
 800e7de:	4628      	mov	r0, r5
 800e7e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e4:	f7f8 b992 	b.w	8006b0c <d_make_comp>
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	f7ff fb67 	bl	800debc <d_name>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	2114      	movs	r1, #20
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fa:	f7f8 b987 	b.w	8006b0c <d_make_comp>
 800e7fe:	4628      	mov	r0, r5
 800e800:	f7fe fd6a 	bl	800d2d8 <d_type>
 800e804:	2300      	movs	r3, #0
 800e806:	4602      	mov	r2, r0
 800e808:	210e      	movs	r1, #14
 800e80a:	4628      	mov	r0, r5
 800e80c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e810:	f7f8 b97c 	b.w	8006b0c <d_make_comp>
 800e814:	4628      	mov	r0, r5
 800e816:	f7fe fd5f 	bl	800d2d8 <d_type>
 800e81a:	4604      	mov	r4, r0
 800e81c:	f105 000c 	add.w	r0, r5, #12
 800e820:	f7f8 faba 	bl	8006d98 <d_number.isra.0>
 800e824:	2800      	cmp	r0, #0
 800e826:	f6ff ad4a 	blt.w	800e2be <d_encoding+0x76>
 800e82a:	68eb      	ldr	r3, [r5, #12]
 800e82c:	781a      	ldrb	r2, [r3, #0]
 800e82e:	2a5f      	cmp	r2, #95	; 0x5f
 800e830:	f47f ad45 	bne.w	800e2be <d_encoding+0x76>
 800e834:	3301      	adds	r3, #1
 800e836:	60eb      	str	r3, [r5, #12]
 800e838:	4628      	mov	r0, r5
 800e83a:	f7fe fd4d 	bl	800d2d8 <d_type>
 800e83e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e840:	4602      	mov	r2, r0
 800e842:	1d59      	adds	r1, r3, #5
 800e844:	6329      	str	r1, [r5, #48]	; 0x30
 800e846:	4623      	mov	r3, r4
 800e848:	4628      	mov	r0, r5
 800e84a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e84e:	210b      	movs	r1, #11
 800e850:	f7f8 b95c 	b.w	8006b0c <d_make_comp>
 800e854:	68eb      	ldr	r3, [r5, #12]
 800e856:	2000      	movs	r0, #0
 800e858:	4419      	add	r1, r3
 800e85a:	60e9      	str	r1, [r5, #12]
 800e85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e860:	787b      	ldrb	r3, [r7, #1]
 800e862:	2b53      	cmp	r3, #83	; 0x53
 800e864:	d027      	beq.n	800e8b6 <d_encoding+0x66e>
 800e866:	2b5f      	cmp	r3, #95	; 0x5f
 800e868:	d023      	beq.n	800e8b2 <d_encoding+0x66a>
 800e86a:	2b24      	cmp	r3, #36	; 0x24
 800e86c:	f47f ad27 	bne.w	800e2be <d_encoding+0x76>
 800e870:	4618      	mov	r0, r3
 800e872:	696b      	ldr	r3, [r5, #20]
 800e874:	69a9      	ldr	r1, [r5, #24]
 800e876:	428b      	cmp	r3, r1
 800e878:	da1f      	bge.n	800e8ba <d_encoding+0x672>
 800e87a:	692c      	ldr	r4, [r5, #16]
 800e87c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e880:	1c5f      	adds	r7, r3, #1
 800e882:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 800e886:	616f      	str	r7, [r5, #20]
 800e888:	d017      	beq.n	800e8ba <d_encoding+0x672>
 800e88a:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 800e88e:	6058      	str	r0, [r3, #4]
 800e890:	68ef      	ldr	r7, [r5, #12]
 800e892:	3e02      	subs	r6, #2
 800e894:	3702      	adds	r7, #2
 800e896:	60ef      	str	r7, [r5, #12]
 800e898:	e6d0      	b.n	800e63c <d_encoding+0x3f4>
 800e89a:	461a      	mov	r2, r3
 800e89c:	e6d9      	b.n	800e652 <d_encoding+0x40a>
 800e89e:	f7ff fcd3 	bl	800e248 <d_encoding>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	2147      	movs	r1, #71	; 0x47
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8ae:	f7f8 b92d 	b.w	8006b0c <d_make_comp>
 800e8b2:	202e      	movs	r0, #46	; 0x2e
 800e8b4:	e7dd      	b.n	800e872 <d_encoding+0x62a>
 800e8b6:	202f      	movs	r0, #47	; 0x2f
 800e8b8:	e7db      	b.n	800e872 <d_encoding+0x62a>
 800e8ba:	68eb      	ldr	r3, [r5, #12]
 800e8bc:	2000      	movs	r0, #0
 800e8be:	3302      	adds	r3, #2
 800e8c0:	60eb      	str	r3, [r5, #12]
 800e8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8c6:	bf00      	nop

0800e8c8 <d_expr_primary>:
 800e8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ca:	68c2      	ldr	r2, [r0, #12]
 800e8cc:	7813      	ldrb	r3, [r2, #0]
 800e8ce:	2b4c      	cmp	r3, #76	; 0x4c
 800e8d0:	d001      	beq.n	800e8d6 <d_expr_primary+0xe>
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8d6:	1c53      	adds	r3, r2, #1
 800e8d8:	60c3      	str	r3, [r0, #12]
 800e8da:	7851      	ldrb	r1, [r2, #1]
 800e8dc:	4605      	mov	r5, r0
 800e8de:	295f      	cmp	r1, #95	; 0x5f
 800e8e0:	d03e      	beq.n	800e960 <d_expr_primary+0x98>
 800e8e2:	295a      	cmp	r1, #90	; 0x5a
 800e8e4:	d043      	beq.n	800e96e <d_expr_primary+0xa6>
 800e8e6:	f7fe fcf7 	bl	800d2d8 <d_type>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d0f1      	beq.n	800e8d2 <d_expr_primary+0xa>
 800e8ee:	7803      	ldrb	r3, [r0, #0]
 800e8f0:	2b27      	cmp	r3, #39	; 0x27
 800e8f2:	d04a      	beq.n	800e98a <d_expr_primary+0xc2>
 800e8f4:	68ee      	ldr	r6, [r5, #12]
 800e8f6:	7833      	ldrb	r3, [r6, #0]
 800e8f8:	2b6e      	cmp	r3, #110	; 0x6e
 800e8fa:	d04f      	beq.n	800e99c <d_expr_primary+0xd4>
 800e8fc:	213b      	movs	r1, #59	; 0x3b
 800e8fe:	2b45      	cmp	r3, #69	; 0x45
 800e900:	d052      	beq.n	800e9a8 <d_expr_primary+0xe0>
 800e902:	2b00      	cmp	r3, #0
 800e904:	d0e5      	beq.n	800e8d2 <d_expr_primary+0xa>
 800e906:	4633      	mov	r3, r6
 800e908:	e001      	b.n	800e90e <d_expr_primary+0x46>
 800e90a:	2c00      	cmp	r4, #0
 800e90c:	d0e1      	beq.n	800e8d2 <d_expr_primary+0xa>
 800e90e:	3301      	adds	r3, #1
 800e910:	60eb      	str	r3, [r5, #12]
 800e912:	781c      	ldrb	r4, [r3, #0]
 800e914:	2c45      	cmp	r4, #69	; 0x45
 800e916:	d1f8      	bne.n	800e90a <d_expr_primary+0x42>
 800e918:	1b9c      	subs	r4, r3, r6
 800e91a:	696b      	ldr	r3, [r5, #20]
 800e91c:	69aa      	ldr	r2, [r5, #24]
 800e91e:	4293      	cmp	r3, r2
 800e920:	da31      	bge.n	800e986 <d_expr_primary+0xbe>
 800e922:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e926:	692f      	ldr	r7, [r5, #16]
 800e928:	0092      	lsls	r2, r2, #2
 800e92a:	3301      	adds	r3, #1
 800e92c:	eb17 0e02 	adds.w	lr, r7, r2
 800e930:	616b      	str	r3, [r5, #20]
 800e932:	d028      	beq.n	800e986 <d_expr_primary+0xbe>
 800e934:	b33e      	cbz	r6, 800e986 <d_expr_primary+0xbe>
 800e936:	b334      	cbz	r4, 800e986 <d_expr_primary+0xbe>
 800e938:	4673      	mov	r3, lr
 800e93a:	f04f 0c00 	mov.w	ip, #0
 800e93e:	f807 c002 	strb.w	ip, [r7, r2]
 800e942:	f8ce 6004 	str.w	r6, [lr, #4]
 800e946:	f8ce 4008 	str.w	r4, [lr, #8]
 800e94a:	4602      	mov	r2, r0
 800e94c:	4628      	mov	r0, r5
 800e94e:	f7f8 f8dd 	bl	8006b0c <d_make_comp>
 800e952:	68eb      	ldr	r3, [r5, #12]
 800e954:	781a      	ldrb	r2, [r3, #0]
 800e956:	2a45      	cmp	r2, #69	; 0x45
 800e958:	d1bb      	bne.n	800e8d2 <d_expr_primary+0xa>
 800e95a:	3301      	adds	r3, #1
 800e95c:	60eb      	str	r3, [r5, #12]
 800e95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e960:	1c93      	adds	r3, r2, #2
 800e962:	60c3      	str	r3, [r0, #12]
 800e964:	7892      	ldrb	r2, [r2, #2]
 800e966:	2a5a      	cmp	r2, #90	; 0x5a
 800e968:	bf18      	it	ne
 800e96a:	2000      	movne	r0, #0
 800e96c:	d107      	bne.n	800e97e <d_expr_primary+0xb6>
 800e96e:	3301      	adds	r3, #1
 800e970:	60eb      	str	r3, [r5, #12]
 800e972:	2100      	movs	r1, #0
 800e974:	4628      	mov	r0, r5
 800e976:	f7ff fc67 	bl	800e248 <d_encoding>
 800e97a:	68eb      	ldr	r3, [r5, #12]
 800e97c:	781a      	ldrb	r2, [r3, #0]
 800e97e:	2a45      	cmp	r2, #69	; 0x45
 800e980:	d0eb      	beq.n	800e95a <d_expr_primary+0x92>
 800e982:	2000      	movs	r0, #0
 800e984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e986:	2300      	movs	r3, #0
 800e988:	e7df      	b.n	800e94a <d_expr_primary+0x82>
 800e98a:	6843      	ldr	r3, [r0, #4]
 800e98c:	7c1a      	ldrb	r2, [r3, #16]
 800e98e:	2a00      	cmp	r2, #0
 800e990:	d0b0      	beq.n	800e8f4 <d_expr_primary+0x2c>
 800e992:	685a      	ldr	r2, [r3, #4]
 800e994:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800e996:	1a9b      	subs	r3, r3, r2
 800e998:	632b      	str	r3, [r5, #48]	; 0x30
 800e99a:	e7ab      	b.n	800e8f4 <d_expr_primary+0x2c>
 800e99c:	1c72      	adds	r2, r6, #1
 800e99e:	60ea      	str	r2, [r5, #12]
 800e9a0:	7873      	ldrb	r3, [r6, #1]
 800e9a2:	213c      	movs	r1, #60	; 0x3c
 800e9a4:	4616      	mov	r6, r2
 800e9a6:	e7aa      	b.n	800e8fe <d_expr_primary+0x36>
 800e9a8:	2400      	movs	r4, #0
 800e9aa:	e7b6      	b.n	800e91a <d_expr_primary+0x52>

0800e9ac <d_demangle_callback.constprop.15>:
 800e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b0:	b0e5      	sub	sp, #404	; 0x194
 800e9b2:	f890 9000 	ldrb.w	r9, [r0]
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800e9bc:	4605      	mov	r5, r0
 800e9be:	460e      	mov	r6, r1
 800e9c0:	607a      	str	r2, [r7, #4]
 800e9c2:	f000 80ec 	beq.w	800eb9e <d_demangle_callback.constprop.15+0x1f2>
 800e9c6:	2208      	movs	r2, #8
 800e9c8:	49c3      	ldr	r1, [pc, #780]	; (800ecd8 <d_demangle_callback.constprop.15+0x32c>)
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	f005 f8a9 	bl	8013b22 <strncmp>
 800e9d0:	b978      	cbnz	r0, 800e9f2 <d_demangle_callback.constprop.15+0x46>
 800e9d2:	7a2b      	ldrb	r3, [r5, #8]
 800e9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800e9d6:	d005      	beq.n	800e9e4 <d_demangle_callback.constprop.15+0x38>
 800e9d8:	2b5f      	cmp	r3, #95	; 0x5f
 800e9da:	d003      	beq.n	800e9e4 <d_demangle_callback.constprop.15+0x38>
 800e9dc:	2b24      	cmp	r3, #36	; 0x24
 800e9de:	d001      	beq.n	800e9e4 <d_demangle_callback.constprop.15+0x38>
 800e9e0:	4680      	mov	r8, r0
 800e9e2:	e008      	b.n	800e9f6 <d_demangle_callback.constprop.15+0x4a>
 800e9e4:	7a6b      	ldrb	r3, [r5, #9]
 800e9e6:	2b44      	cmp	r3, #68	; 0x44
 800e9e8:	f000 80e9 	beq.w	800ebbe <d_demangle_callback.constprop.15+0x212>
 800e9ec:	2b49      	cmp	r3, #73	; 0x49
 800e9ee:	f000 80e6 	beq.w	800ebbe <d_demangle_callback.constprop.15+0x212>
 800e9f2:	f04f 0800 	mov.w	r8, #0
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f7f8 f880 	bl	8006afc <strlen>
 800e9fc:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 800ea00:	0083      	lsls	r3, r0, #2
 800ea02:	eb03 020a 	add.w	r2, r3, sl
 800ea06:	0092      	lsls	r2, r2, #2
 800ea08:	3208      	adds	r2, #8
 800ea0a:	ebad 0d02 	sub.w	sp, sp, r2
 800ea0e:	46eb      	mov	fp, sp
 800ea10:	330a      	adds	r3, #10
 800ea12:	f023 0307 	bic.w	r3, r3, #7
 800ea16:	2400      	movs	r4, #0
 800ea18:	ebad 0d03 	sub.w	sp, sp, r3
 800ea1c:	182a      	adds	r2, r5, r0
 800ea1e:	2311      	movs	r3, #17
 800ea20:	f1b8 0f01 	cmp.w	r8, #1
 800ea24:	f8c7 b020 	str.w	fp, [r7, #32]
 800ea28:	f8c7 d02c 	str.w	sp, [r7, #44]	; 0x2c
 800ea2c:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800ea30:	613d      	str	r5, [r7, #16]
 800ea32:	61fd      	str	r5, [r7, #28]
 800ea34:	6378      	str	r0, [r7, #52]	; 0x34
 800ea36:	617a      	str	r2, [r7, #20]
 800ea38:	61bb      	str	r3, [r7, #24]
 800ea3a:	627c      	str	r4, [r7, #36]	; 0x24
 800ea3c:	633c      	str	r4, [r7, #48]	; 0x30
 800ea3e:	63bc      	str	r4, [r7, #56]	; 0x38
 800ea40:	63fc      	str	r4, [r7, #60]	; 0x3c
 800ea42:	643c      	str	r4, [r7, #64]	; 0x40
 800ea44:	647c      	str	r4, [r7, #68]	; 0x44
 800ea46:	64bc      	str	r4, [r7, #72]	; 0x48
 800ea48:	f000 80b0 	beq.w	800ebac <d_demangle_callback.constprop.15+0x200>
 800ea4c:	f0c0 80cf 	bcc.w	800ebee <d_demangle_callback.constprop.15+0x242>
 800ea50:	f1b8 0f03 	cmp.w	r8, #3
 800ea54:	f200 80cb 	bhi.w	800ebee <d_demangle_callback.constprop.15+0x242>
 800ea58:	7aea      	ldrb	r2, [r5, #11]
 800ea5a:	f1b8 0f02 	cmp.w	r8, #2
 800ea5e:	f105 030b 	add.w	r3, r5, #11
 800ea62:	bf14      	ite	ne
 800ea64:	f04f 0943 	movne.w	r9, #67	; 0x43
 800ea68:	f04f 0942 	moveq.w	r9, #66	; 0x42
 800ea6c:	2a5f      	cmp	r2, #95	; 0x5f
 800ea6e:	61fb      	str	r3, [r7, #28]
 800ea70:	f000 80b0 	beq.w	800ebd4 <d_demangle_callback.constprop.15+0x228>
 800ea74:	4618      	mov	r0, r3
 800ea76:	603b      	str	r3, [r7, #0]
 800ea78:	f7f8 f840 	bl	8006afc <strlen>
 800ea7c:	f1ba 0f00 	cmp.w	sl, #0
 800ea80:	f340 80be 	ble.w	800ec00 <d_demangle_callback.constprop.15+0x254>
 800ea84:	2201      	movs	r2, #1
 800ea86:	627a      	str	r2, [r7, #36]	; 0x24
 800ea88:	f1bb 0f00 	cmp.w	fp, #0
 800ea8c:	f000 80b8 	beq.w	800ec00 <d_demangle_callback.constprop.15+0x254>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	f000 80b5 	beq.w	800ec00 <d_demangle_callback.constprop.15+0x254>
 800ea96:	2200      	movs	r2, #0
 800ea98:	f88b 2000 	strb.w	r2, [fp]
 800ea9c:	465a      	mov	r2, fp
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	f8cb 0008 	str.w	r0, [fp, #8]
 800eaa4:	f8cb 3004 	str.w	r3, [fp, #4]
 800eaa8:	4649      	mov	r1, r9
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f107 0010 	add.w	r0, r7, #16
 800eab0:	f7f8 f82c 	bl	8006b0c <d_make_comp>
 800eab4:	69fc      	ldr	r4, [r7, #28]
 800eab6:	4605      	mov	r5, r0
 800eab8:	4620      	mov	r0, r4
 800eaba:	f7f8 f81f 	bl	8006afc <strlen>
 800eabe:	1823      	adds	r3, r4, r0
 800eac0:	61fb      	str	r3, [r7, #28]
 800eac2:	f814 9000 	ldrb.w	r9, [r4, r0]
 800eac6:	f1b9 0f00 	cmp.w	r9, #0
 800eaca:	d172      	bne.n	800ebb2 <d_demangle_callback.constprop.15+0x206>
 800eacc:	2d00      	cmp	r5, #0
 800eace:	d070      	beq.n	800ebb2 <d_demangle_callback.constprop.15+0x206>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800ead6:	462a      	mov	r2, r5
 800ead8:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800eadc:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 800eae0:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 800eae4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 800eae8:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800eaec:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 800eaf0:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 800eaf4:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800eaf8:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 800eafc:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 800eb00:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 800eb04:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 800eb08:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 800eb0c:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 800eb10:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 800eb14:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 800eb18:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 800eb1c:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 800eb20:	f7f8 f8b6 	bl	8006c90 <d_count_templates_scopes>
 800eb24:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
 800eb28:	466e      	mov	r6, sp
 800eb2a:	00cb      	lsls	r3, r1, #3
 800eb2c:	3308      	adds	r3, #8
 800eb2e:	ebad 0d03 	sub.w	sp, sp, r3
 800eb32:	4668      	mov	r0, sp
 800eb34:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800eb38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800eb3c:	fb02 f101 	mul.w	r1, r2, r1
 800eb40:	00ca      	lsls	r2, r1, #3
 800eb42:	3208      	adds	r2, #8
 800eb44:	ebad 0d02 	sub.w	sp, sp, r2
 800eb48:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 800eb4c:	462a      	mov	r2, r5
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f8c4 113c 	str.w	r1, [r4, #316]	; 0x13c
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	2111      	movs	r1, #17
 800eb58:	f107 0308 	add.w	r3, r7, #8
 800eb5c:	f8c4 d134 	str.w	sp, [r4, #308]	; 0x134
 800eb60:	60bd      	str	r5, [r7, #8]
 800eb62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800eb66:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 800eb6a:	f7f8 fba1 	bl	80072b0 <d_print_comp_inner>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	4620      	mov	r0, r4
 800eb72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800eb76:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800eb7a:	46b5      	mov	sp, r6
 800eb7c:	f804 9001 	strb.w	r9, [r4, r1]
 800eb80:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800eb84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800eb88:	4798      	blx	r3
 800eb8a:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800eb8e:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800eb92:	fab0 f080 	clz	r0, r0
 800eb96:	0940      	lsrs	r0, r0, #5
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb9e:	7843      	ldrb	r3, [r0, #1]
 800eba0:	2b5a      	cmp	r3, #90	; 0x5a
 800eba2:	f47f af10 	bne.w	800e9c6 <d_demangle_callback.constprop.15+0x1a>
 800eba6:	f04f 0801 	mov.w	r8, #1
 800ebaa:	e724      	b.n	800e9f6 <d_demangle_callback.constprop.15+0x4a>
 800ebac:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 800ebb0:	d028      	beq.n	800ec04 <d_demangle_callback.constprop.15+0x258>
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebbe:	7aaa      	ldrb	r2, [r5, #10]
 800ebc0:	2a5f      	cmp	r2, #95	; 0x5f
 800ebc2:	f47f af16 	bne.w	800e9f2 <d_demangle_callback.constprop.15+0x46>
 800ebc6:	2b49      	cmp	r3, #73	; 0x49
 800ebc8:	bf14      	ite	ne
 800ebca:	f04f 0803 	movne.w	r8, #3
 800ebce:	f04f 0802 	moveq.w	r8, #2
 800ebd2:	e710      	b.n	800e9f6 <d_demangle_callback.constprop.15+0x4a>
 800ebd4:	7b2a      	ldrb	r2, [r5, #12]
 800ebd6:	2a5a      	cmp	r2, #90	; 0x5a
 800ebd8:	f47f af4c 	bne.w	800ea74 <d_demangle_callback.constprop.15+0xc8>
 800ebdc:	350d      	adds	r5, #13
 800ebde:	4621      	mov	r1, r4
 800ebe0:	f107 0010 	add.w	r0, r7, #16
 800ebe4:	61fd      	str	r5, [r7, #28]
 800ebe6:	f7ff fb2f 	bl	800e248 <d_encoding>
 800ebea:	4602      	mov	r2, r0
 800ebec:	e75c      	b.n	800eaa8 <d_demangle_callback.constprop.15+0xfc>
 800ebee:	f107 0010 	add.w	r0, r7, #16
 800ebf2:	f7fe fb71 	bl	800d2d8 <d_type>
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	4605      	mov	r5, r0
 800ebfa:	f893 9000 	ldrb.w	r9, [r3]
 800ebfe:	e762      	b.n	800eac6 <d_demangle_callback.constprop.15+0x11a>
 800ec00:	2200      	movs	r2, #0
 800ec02:	e751      	b.n	800eaa8 <d_demangle_callback.constprop.15+0xfc>
 800ec04:	786b      	ldrb	r3, [r5, #1]
 800ec06:	2b5a      	cmp	r3, #90	; 0x5a
 800ec08:	d1d3      	bne.n	800ebb2 <d_demangle_callback.constprop.15+0x206>
 800ec0a:	3502      	adds	r5, #2
 800ec0c:	4641      	mov	r1, r8
 800ec0e:	f107 0010 	add.w	r0, r7, #16
 800ec12:	61fd      	str	r5, [r7, #28]
 800ec14:	f7ff fb18 	bl	800e248 <d_encoding>
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	4605      	mov	r5, r0
 800ec1c:	07db      	lsls	r3, r3, #31
 800ec1e:	d556      	bpl.n	800ecce <d_demangle_callback.constprop.15+0x322>
 800ec20:	69f8      	ldr	r0, [r7, #28]
 800ec22:	f890 9000 	ldrb.w	r9, [r0]
 800ec26:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 800ec2a:	f47f af4c 	bne.w	800eac6 <d_demangle_callback.constprop.15+0x11a>
 800ec2e:	7843      	ldrb	r3, [r0, #1]
 800ec30:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ec34:	2a19      	cmp	r2, #25
 800ec36:	d93d      	bls.n	800ecb4 <d_demangle_callback.constprop.15+0x308>
 800ec38:	2b5f      	cmp	r3, #95	; 0x5f
 800ec3a:	d03b      	beq.n	800ecb4 <d_demangle_callback.constprop.15+0x308>
 800ec3c:	3b30      	subs	r3, #48	; 0x30
 800ec3e:	2b09      	cmp	r3, #9
 800ec40:	d845      	bhi.n	800ecce <d_demangle_callback.constprop.15+0x322>
 800ec42:	4603      	mov	r3, r0
 800ec44:	7802      	ldrb	r2, [r0, #0]
 800ec46:	2a2e      	cmp	r2, #46	; 0x2e
 800ec48:	d111      	bne.n	800ec6e <d_demangle_callback.constprop.15+0x2c2>
 800ec4a:	785a      	ldrb	r2, [r3, #1]
 800ec4c:	3a30      	subs	r2, #48	; 0x30
 800ec4e:	2a09      	cmp	r2, #9
 800ec50:	d80d      	bhi.n	800ec6e <d_demangle_callback.constprop.15+0x2c2>
 800ec52:	789a      	ldrb	r2, [r3, #2]
 800ec54:	3302      	adds	r3, #2
 800ec56:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ec5a:	2909      	cmp	r1, #9
 800ec5c:	d8f3      	bhi.n	800ec46 <d_demangle_callback.constprop.15+0x29a>
 800ec5e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800ec62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ec66:	2909      	cmp	r1, #9
 800ec68:	d9f9      	bls.n	800ec5e <d_demangle_callback.constprop.15+0x2b2>
 800ec6a:	2a2e      	cmp	r2, #46	; 0x2e
 800ec6c:	d0ed      	beq.n	800ec4a <d_demangle_callback.constprop.15+0x29e>
 800ec6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec72:	61fb      	str	r3, [r7, #28]
 800ec74:	428a      	cmp	r2, r1
 800ec76:	da1b      	bge.n	800ecb0 <d_demangle_callback.constprop.15+0x304>
 800ec78:	6a39      	ldr	r1, [r7, #32]
 800ec7a:	f102 0e01 	add.w	lr, r2, #1
 800ec7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ec82:	f8c7 e024 	str.w	lr, [r7, #36]	; 0x24
 800ec86:	eb11 0e82 	adds.w	lr, r1, r2, lsl #2
 800ec8a:	d011      	beq.n	800ecb0 <d_demangle_callback.constprop.15+0x304>
 800ec8c:	ebb3 0c00 	subs.w	ip, r3, r0
 800ec90:	d00e      	beq.n	800ecb0 <d_demangle_callback.constprop.15+0x304>
 800ec92:	4673      	mov	r3, lr
 800ec94:	f801 4022 	strb.w	r4, [r1, r2, lsl #2]
 800ec98:	f8ce 0004 	str.w	r0, [lr, #4]
 800ec9c:	f8ce c008 	str.w	ip, [lr, #8]
 800eca0:	462a      	mov	r2, r5
 800eca2:	214b      	movs	r1, #75	; 0x4b
 800eca4:	f107 0010 	add.w	r0, r7, #16
 800eca8:	f7f7 ff30 	bl	8006b0c <d_make_comp>
 800ecac:	4605      	mov	r5, r0
 800ecae:	e7b7      	b.n	800ec20 <d_demangle_callback.constprop.15+0x274>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e7f5      	b.n	800eca0 <d_demangle_callback.constprop.15+0x2f4>
 800ecb4:	1c81      	adds	r1, r0, #2
 800ecb6:	780a      	ldrb	r2, [r1, #0]
 800ecb8:	460b      	mov	r3, r1
 800ecba:	f1a2 0e61 	sub.w	lr, r2, #97	; 0x61
 800ecbe:	f1be 0f19 	cmp.w	lr, #25
 800ecc2:	f101 0101 	add.w	r1, r1, #1
 800ecc6:	d9f6      	bls.n	800ecb6 <d_demangle_callback.constprop.15+0x30a>
 800ecc8:	2a5f      	cmp	r2, #95	; 0x5f
 800ecca:	d0f4      	beq.n	800ecb6 <d_demangle_callback.constprop.15+0x30a>
 800eccc:	e7bb      	b.n	800ec46 <d_demangle_callback.constprop.15+0x29a>
 800ecce:	69fb      	ldr	r3, [r7, #28]
 800ecd0:	f893 9000 	ldrb.w	r9, [r3]
 800ecd4:	e6f7      	b.n	800eac6 <d_demangle_callback.constprop.15+0x11a>
 800ecd6:	bf00      	nop
 800ecd8:	080157dc 	.word	0x080157dc

0800ecdc <__cxa_demangle>:
 800ecdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece0:	b084      	sub	sp, #16
 800ece2:	b370      	cbz	r0, 800ed42 <__cxa_demangle+0x66>
 800ece4:	b101      	cbz	r1, 800ece8 <__cxa_demangle+0xc>
 800ece6:	b362      	cbz	r2, 800ed42 <__cxa_demangle+0x66>
 800ece8:	2400      	movs	r4, #0
 800ecea:	4617      	mov	r7, r2
 800ecec:	460d      	mov	r5, r1
 800ecee:	466a      	mov	r2, sp
 800ecf0:	4928      	ldr	r1, [pc, #160]	; (800ed94 <__cxa_demangle+0xb8>)
 800ecf2:	461e      	mov	r6, r3
 800ecf4:	9400      	str	r4, [sp, #0]
 800ecf6:	9401      	str	r4, [sp, #4]
 800ecf8:	9402      	str	r4, [sp, #8]
 800ecfa:	9403      	str	r4, [sp, #12]
 800ecfc:	f7ff fe56 	bl	800e9ac <d_demangle_callback.constprop.15>
 800ed00:	b368      	cbz	r0, 800ed5e <__cxa_demangle+0x82>
 800ed02:	9b03      	ldr	r3, [sp, #12]
 800ed04:	b1d3      	cbz	r3, 800ed3c <__cxa_demangle+0x60>
 800ed06:	f04f 0801 	mov.w	r8, #1
 800ed0a:	9c00      	ldr	r4, [sp, #0]
 800ed0c:	b3ac      	cbz	r4, 800ed7a <__cxa_demangle+0x9e>
 800ed0e:	b38d      	cbz	r5, 800ed74 <__cxa_demangle+0x98>
 800ed10:	4620      	mov	r0, r4
 800ed12:	f7f7 fef3 	bl	8006afc <strlen>
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	4298      	cmp	r0, r3
 800ed1a:	d21a      	bcs.n	800ed52 <__cxa_demangle+0x76>
 800ed1c:	1c42      	adds	r2, r0, #1
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4628      	mov	r0, r5
 800ed22:	f001 fd73 	bl	801080c <memcpy>
 800ed26:	4620      	mov	r0, r4
 800ed28:	f004 fe5a 	bl	80139e0 <free>
 800ed2c:	462c      	mov	r4, r5
 800ed2e:	b376      	cbz	r6, 800ed8e <__cxa_demangle+0xb2>
 800ed30:	4620      	mov	r0, r4
 800ed32:	2300      	movs	r3, #0
 800ed34:	6033      	str	r3, [r6, #0]
 800ed36:	b004      	add	sp, #16
 800ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed3c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ed40:	e7e3      	b.n	800ed0a <__cxa_demangle+0x2e>
 800ed42:	b19b      	cbz	r3, 800ed6c <__cxa_demangle+0x90>
 800ed44:	f06f 0202 	mvn.w	r2, #2
 800ed48:	2000      	movs	r0, #0
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	b004      	add	sp, #16
 800ed4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed52:	4628      	mov	r0, r5
 800ed54:	f004 fe44 	bl	80139e0 <free>
 800ed58:	f8c7 8000 	str.w	r8, [r7]
 800ed5c:	e7e7      	b.n	800ed2e <__cxa_demangle+0x52>
 800ed5e:	9800      	ldr	r0, [sp, #0]
 800ed60:	f004 fe3e 	bl	80139e0 <free>
 800ed64:	b116      	cbz	r6, 800ed6c <__cxa_demangle+0x90>
 800ed66:	f06f 0301 	mvn.w	r3, #1
 800ed6a:	6033      	str	r3, [r6, #0]
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	b004      	add	sp, #16
 800ed70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed74:	2f00      	cmp	r7, #0
 800ed76:	d1ef      	bne.n	800ed58 <__cxa_demangle+0x7c>
 800ed78:	e7d9      	b.n	800ed2e <__cxa_demangle+0x52>
 800ed7a:	2e00      	cmp	r6, #0
 800ed7c:	d0f6      	beq.n	800ed6c <__cxa_demangle+0x90>
 800ed7e:	f1b8 0f01 	cmp.w	r8, #1
 800ed82:	d1f0      	bne.n	800ed66 <__cxa_demangle+0x8a>
 800ed84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed88:	4620      	mov	r0, r4
 800ed8a:	6033      	str	r3, [r6, #0]
 800ed8c:	e7d3      	b.n	800ed36 <__cxa_demangle+0x5a>
 800ed8e:	4620      	mov	r0, r4
 800ed90:	e7d1      	b.n	800ed36 <__cxa_demangle+0x5a>
 800ed92:	bf00      	nop
 800ed94:	08007235 	.word	0x08007235

0800ed98 <__gcclibcxx_demangle_callback>:
 800ed98:	b160      	cbz	r0, 800edb4 <__gcclibcxx_demangle_callback+0x1c>
 800ed9a:	b508      	push	{r3, lr}
 800ed9c:	b139      	cbz	r1, 800edae <__gcclibcxx_demangle_callback+0x16>
 800ed9e:	f7ff fe05 	bl	800e9ac <d_demangle_callback.constprop.15>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	bf0c      	ite	eq
 800eda6:	f06f 0001 	mvneq.w	r0, #1
 800edaa:	2000      	movne	r0, #0
 800edac:	bd08      	pop	{r3, pc}
 800edae:	f06f 0002 	mvn.w	r0, #2
 800edb2:	bd08      	pop	{r3, pc}
 800edb4:	f06f 0002 	mvn.w	r0, #2
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop

0800edbc <strcmp>:
 800edbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edc4:	2a01      	cmp	r2, #1
 800edc6:	bf28      	it	cs
 800edc8:	429a      	cmpcs	r2, r3
 800edca:	d0f7      	beq.n	800edbc <strcmp>
 800edcc:	1ad0      	subs	r0, r2, r3
 800edce:	4770      	bx	lr

0800edd0 <__gedf2>:
 800edd0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800edd4:	e006      	b.n	800ede4 <__cmpdf2+0x4>
 800edd6:	bf00      	nop

0800edd8 <__ledf2>:
 800edd8:	f04f 0c01 	mov.w	ip, #1
 800eddc:	e002      	b.n	800ede4 <__cmpdf2+0x4>
 800edde:	bf00      	nop

0800ede0 <__cmpdf2>:
 800ede0:	f04f 0c01 	mov.w	ip, #1
 800ede4:	f84d cd04 	str.w	ip, [sp, #-4]!
 800ede8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800edec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800edf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800edf4:	bf18      	it	ne
 800edf6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800edfa:	d01b      	beq.n	800ee34 <__cmpdf2+0x54>
 800edfc:	b001      	add	sp, #4
 800edfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800ee02:	bf0c      	ite	eq
 800ee04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800ee08:	ea91 0f03 	teqne	r1, r3
 800ee0c:	bf02      	ittt	eq
 800ee0e:	ea90 0f02 	teqeq	r0, r2
 800ee12:	2000      	moveq	r0, #0
 800ee14:	4770      	bxeq	lr
 800ee16:	f110 0f00 	cmn.w	r0, #0
 800ee1a:	ea91 0f03 	teq	r1, r3
 800ee1e:	bf58      	it	pl
 800ee20:	4299      	cmppl	r1, r3
 800ee22:	bf08      	it	eq
 800ee24:	4290      	cmpeq	r0, r2
 800ee26:	bf2c      	ite	cs
 800ee28:	17d8      	asrcs	r0, r3, #31
 800ee2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800ee2e:	f040 0001 	orr.w	r0, r0, #1
 800ee32:	4770      	bx	lr
 800ee34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800ee38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ee3c:	d102      	bne.n	800ee44 <__cmpdf2+0x64>
 800ee3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800ee42:	d107      	bne.n	800ee54 <__cmpdf2+0x74>
 800ee44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800ee48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800ee4c:	d1d6      	bne.n	800edfc <__cmpdf2+0x1c>
 800ee4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800ee52:	d0d3      	beq.n	800edfc <__cmpdf2+0x1c>
 800ee54:	f85d 0b04 	ldr.w	r0, [sp], #4
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop

0800ee5c <__aeabi_cdrcmple>:
 800ee5c:	4684      	mov	ip, r0
 800ee5e:	4610      	mov	r0, r2
 800ee60:	4662      	mov	r2, ip
 800ee62:	468c      	mov	ip, r1
 800ee64:	4619      	mov	r1, r3
 800ee66:	4663      	mov	r3, ip
 800ee68:	e000      	b.n	800ee6c <__aeabi_cdcmpeq>
 800ee6a:	bf00      	nop

0800ee6c <__aeabi_cdcmpeq>:
 800ee6c:	b501      	push	{r0, lr}
 800ee6e:	f7ff ffb7 	bl	800ede0 <__cmpdf2>
 800ee72:	2800      	cmp	r0, #0
 800ee74:	bf48      	it	mi
 800ee76:	f110 0f00 	cmnmi.w	r0, #0
 800ee7a:	bd01      	pop	{r0, pc}

0800ee7c <__aeabi_dcmpeq>:
 800ee7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ee80:	f7ff fff4 	bl	800ee6c <__aeabi_cdcmpeq>
 800ee84:	bf0c      	ite	eq
 800ee86:	2001      	moveq	r0, #1
 800ee88:	2000      	movne	r0, #0
 800ee8a:	f85d fb08 	ldr.w	pc, [sp], #8
 800ee8e:	bf00      	nop

0800ee90 <__aeabi_dcmplt>:
 800ee90:	f84d ed08 	str.w	lr, [sp, #-8]!
 800ee94:	f7ff ffea 	bl	800ee6c <__aeabi_cdcmpeq>
 800ee98:	bf34      	ite	cc
 800ee9a:	2001      	movcc	r0, #1
 800ee9c:	2000      	movcs	r0, #0
 800ee9e:	f85d fb08 	ldr.w	pc, [sp], #8
 800eea2:	bf00      	nop

0800eea4 <__aeabi_dcmple>:
 800eea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eea8:	f7ff ffe0 	bl	800ee6c <__aeabi_cdcmpeq>
 800eeac:	bf94      	ite	ls
 800eeae:	2001      	movls	r0, #1
 800eeb0:	2000      	movhi	r0, #0
 800eeb2:	f85d fb08 	ldr.w	pc, [sp], #8
 800eeb6:	bf00      	nop

0800eeb8 <__aeabi_dcmpge>:
 800eeb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eebc:	f7ff ffce 	bl	800ee5c <__aeabi_cdrcmple>
 800eec0:	bf94      	ite	ls
 800eec2:	2001      	movls	r0, #1
 800eec4:	2000      	movhi	r0, #0
 800eec6:	f85d fb08 	ldr.w	pc, [sp], #8
 800eeca:	bf00      	nop

0800eecc <__aeabi_dcmpgt>:
 800eecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 800eed0:	f7ff ffc4 	bl	800ee5c <__aeabi_cdrcmple>
 800eed4:	bf34      	ite	cc
 800eed6:	2001      	movcc	r0, #1
 800eed8:	2000      	movcs	r0, #0
 800eeda:	f85d fb08 	ldr.w	pc, [sp], #8
 800eede:	bf00      	nop

0800eee0 <Reset_Handler>:
 800eee0:	2100      	movs	r1, #0
 800eee2:	e003      	b.n	800eeec <LoopCopyDataInit>

0800eee4 <CopyDataInit>:
 800eee4:	4b0b      	ldr	r3, [pc, #44]	; (800ef14 <LoopFillZerobss+0x14>)
 800eee6:	585b      	ldr	r3, [r3, r1]
 800eee8:	5043      	str	r3, [r0, r1]
 800eeea:	3104      	adds	r1, #4

0800eeec <LoopCopyDataInit>:
 800eeec:	480a      	ldr	r0, [pc, #40]	; (800ef18 <LoopFillZerobss+0x18>)
 800eeee:	4b0b      	ldr	r3, [pc, #44]	; (800ef1c <LoopFillZerobss+0x1c>)
 800eef0:	1842      	adds	r2, r0, r1
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d3f6      	bcc.n	800eee4 <CopyDataInit>
 800eef6:	4a0a      	ldr	r2, [pc, #40]	; (800ef20 <LoopFillZerobss+0x20>)
 800eef8:	e002      	b.n	800ef00 <LoopFillZerobss>

0800eefa <FillZerobss>:
 800eefa:	2300      	movs	r3, #0
 800eefc:	f842 3b04 	str.w	r3, [r2], #4

0800ef00 <LoopFillZerobss>:
 800ef00:	4b08      	ldr	r3, [pc, #32]	; (800ef24 <LoopFillZerobss+0x24>)
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d3f9      	bcc.n	800eefa <FillZerobss>
 800ef06:	f7f1 f9d3 	bl	80002b0 <SystemInit>
 800ef0a:	f001 fc59 	bl	80107c0 <__libc_init_array>
 800ef0e:	f000 ff0b 	bl	800fd28 <main>
 800ef12:	4770      	bx	lr
 800ef14:	080164ac 	.word	0x080164ac
 800ef18:	20000000 	.word	0x20000000
 800ef1c:	200001b0 	.word	0x200001b0
 800ef20:	200001b4 	.word	0x200001b4
 800ef24:	200010fc 	.word	0x200010fc

0800ef28 <ADC1_2_IRQHandler>:
 800ef28:	e7fe      	b.n	800ef28 <ADC1_2_IRQHandler>

0800ef2a <std_msgs::Time::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800ef2a:	6843      	ldr	r3, [r0, #4]
 800ef2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800ef2e:	6843      	ldr	r3, [r0, #4]
 800ef30:	0a1b      	lsrs	r3, r3, #8
 800ef32:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800ef34:	88c3      	ldrh	r3, [r0, #6]
 800ef36:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800ef38:	79c3      	ldrb	r3, [r0, #7]
 800ef3a:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800ef3c:	6883      	ldr	r3, [r0, #8]
 800ef3e:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800ef40:	6883      	ldr	r3, [r0, #8]
 800ef42:	0a1b      	lsrs	r3, r3, #8
 800ef44:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800ef46:	8943      	ldrh	r3, [r0, #10]
 800ef48:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800ef4a:	7ac3      	ldrb	r3, [r0, #11]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800ef4c:	2008      	movs	r0, #8
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800ef4e:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
 800ef50:	4770      	bx	lr

0800ef52 <std_msgs::Time::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800ef52:	780b      	ldrb	r3, [r1, #0]
 800ef54:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ef56:	784a      	ldrb	r2, [r1, #1]
 800ef58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef5c:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ef5e:	788a      	ldrb	r2, [r1, #2]
 800ef60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef64:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ef66:	78ca      	ldrb	r2, [r1, #3]
 800ef68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef6c:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800ef6e:	790b      	ldrb	r3, [r1, #4]
 800ef70:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ef72:	794a      	ldrb	r2, [r1, #5]
 800ef74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef78:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ef7a:	798a      	ldrb	r2, [r1, #6]
 800ef7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef80:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ef82:	79ca      	ldrb	r2, [r1, #7]
 800ef84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef88:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
 800ef8a:	2008      	movs	r0, #8
 800ef8c:	4770      	bx	lr
	...

0800ef90 <std_msgs::Time::getType()>:

    const char * getType(){ return "std_msgs/Time"; };
 800ef90:	4800      	ldr	r0, [pc, #0]	; (800ef94 <std_msgs::Time::getType()+0x4>)
 800ef92:	4770      	bx	lr
 800ef94:	080152ac 	.word	0x080152ac

0800ef98 <std_msgs::Time::getMD5()>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800ef98:	4800      	ldr	r0, [pc, #0]	; (800ef9c <std_msgs::Time::getMD5()+0x4>)
 800ef9a:	4770      	bx	lr
 800ef9c:	080152ba 	.word	0x080152ba

0800efa0 <rosserial_msgs::TopicInfo::getType()>:
      this->buffer_size = u_buffer_size.real;
      offset += sizeof(this->buffer_size);
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800efa0:	4800      	ldr	r0, [pc, #0]	; (800efa4 <rosserial_msgs::TopicInfo::getType()+0x4>)
 800efa2:	4770      	bx	lr
 800efa4:	080152db 	.word	0x080152db

0800efa8 <rosserial_msgs::TopicInfo::getMD5()>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800efa8:	4800      	ldr	r0, [pc, #0]	; (800efac <rosserial_msgs::TopicInfo::getMD5()+0x4>)
 800efaa:	4770      	bx	lr
 800efac:	080152f4 	.word	0x080152f4

0800efb0 <rosserial_msgs::Log::getType()>:
      this->msg = (char *)(inbuffer + offset-1);
      offset += length_msg;
     return offset;
    }

    const char * getType(){ return "rosserial_msgs/Log"; };
 800efb0:	4800      	ldr	r0, [pc, #0]	; (800efb4 <rosserial_msgs::Log::getType()+0x4>)
 800efb2:	4770      	bx	lr
 800efb4:	08015315 	.word	0x08015315

0800efb8 <rosserial_msgs::Log::getMD5()>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800efb8:	4800      	ldr	r0, [pc, #0]	; (800efbc <rosserial_msgs::Log::getMD5()+0x4>)
 800efba:	4770      	bx	lr
 800efbc:	08015328 	.word	0x08015328

0800efc0 <rosserial_msgs::RequestParamResponse::getType()>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
 800efc0:	4800      	ldr	r0, [pc, #0]	; (800efc4 <rosserial_msgs::RequestParamResponse::getType()+0x4>)
 800efc2:	4770      	bx	lr
 800efc4:	08014720 	.word	0x08014720

0800efc8 <rosserial_msgs::RequestParamResponse::getMD5()>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800efc8:	4800      	ldr	r0, [pc, #0]	; (800efcc <rosserial_msgs::RequestParamResponse::getMD5()+0x4>)
 800efca:	4770      	bx	lr
 800efcc:	08015349 	.word	0x08015349

0800efd0 <std_msgs::MultiArrayDimension::getType()>:
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stride);
     return offset;
    }

    const char * getType(){ return "std_msgs/MultiArrayDimension"; };
 800efd0:	4800      	ldr	r0, [pc, #0]	; (800efd4 <std_msgs::MultiArrayDimension::getType()+0x4>)
 800efd2:	4770      	bx	lr
 800efd4:	0801536a 	.word	0x0801536a

0800efd8 <std_msgs::MultiArrayDimension::getMD5()>:
    const char * getMD5(){ return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 800efd8:	4800      	ldr	r0, [pc, #0]	; (800efdc <std_msgs::MultiArrayDimension::getMD5()+0x4>)
 800efda:	4770      	bx	lr
 800efdc:	08015387 	.word	0x08015387

0800efe0 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const>:
      dim_length(0), dim(NULL),
      data_offset(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800efe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe2:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
 800efe4:	7903      	ldrb	r3, [r0, #4]
      dim_length(0), dim(NULL),
      data_offset(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800efe6:	4604      	mov	r4, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
      *(outbuffer + offset++) = 0;
 800efe8:	2000      	movs	r0, #0
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
 800efea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 800efec:	7048      	strb	r0, [r1, #1]
      *(outbuffer + offset++) = 0;
 800efee:	7088      	strb	r0, [r1, #2]
      *(outbuffer + offset++) = 0;
 800eff0:	70c8      	strb	r0, [r1, #3]
 800eff2:	2604      	movs	r6, #4
      for( uint8_t i = 0; i < dim_length; i++){
 800eff4:	7923      	ldrb	r3, [r4, #4]
 800eff6:	1c47      	adds	r7, r0, #1
 800eff8:	b2c0      	uxtb	r0, r0
 800effa:	4283      	cmp	r3, r0
 800effc:	eb05 0106 	add.w	r1, r5, r6
 800f000:	d908      	bls.n	800f014 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const+0x34>
      offset += this->dim[i].serialize(outbuffer + offset);
 800f002:	69a3      	ldr	r3, [r4, #24]
 800f004:	0100      	lsls	r0, r0, #4
 800f006:	581a      	ldr	r2, [r3, r0]
 800f008:	4418      	add	r0, r3
 800f00a:	6812      	ldr	r2, [r2, #0]
 800f00c:	4790      	blx	r2
 800f00e:	4406      	add	r6, r0
      int offset = 0;
      *(outbuffer + offset++) = dim_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < dim_length; i++){
 800f010:	4638      	mov	r0, r7
 800f012:	e7ef      	b.n	800eff4 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const+0x14>
      offset += this->dim[i].serialize(outbuffer + offset);
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 800f014:	69e3      	ldr	r3, [r4, #28]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }
 800f016:	1d30      	adds	r0, r6, #4
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < dim_length; i++){
      offset += this->dim[i].serialize(outbuffer + offset);
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 800f018:	55ab      	strb	r3, [r5, r6]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800f01a:	69e3      	ldr	r3, [r4, #28]
 800f01c:	0a1b      	lsrs	r3, r3, #8
 800f01e:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 800f020:	8be3      	ldrh	r3, [r4, #30]
 800f022:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 800f024:	7fe3      	ldrb	r3, [r4, #31]
 800f026:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data_offset);
      return offset;
    }
 800f028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f02c <std_msgs::MultiArrayLayout::getType()>:
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data_offset);
     return offset;
    }

    const char * getType(){ return "std_msgs/MultiArrayLayout"; };
 800f02c:	4800      	ldr	r0, [pc, #0]	; (800f030 <std_msgs::MultiArrayLayout::getType()+0x4>)
 800f02e:	4770      	bx	lr
 800f030:	080153a8 	.word	0x080153a8

0800f034 <std_msgs::MultiArrayLayout::getMD5()>:
    const char * getMD5(){ return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 800f034:	4800      	ldr	r0, [pc, #0]	; (800f038 <std_msgs::MultiArrayLayout::getMD5()+0x4>)
 800f036:	4770      	bx	lr
 800f038:	080153c2 	.word	0x080153c2

0800f03c <std_msgs::Float32MultiArray::serialize(unsigned char*) const>:
      layout(),
      data_length(0), data(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f03c:	b570      	push	{r4, r5, r6, lr}
 800f03e:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->layout.serialize(outbuffer + offset);
 800f040:	3004      	adds	r0, #4
      layout(),
      data_length(0), data(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f042:	460d      	mov	r5, r1
    {
      int offset = 0;
      offset += this->layout.serialize(outbuffer + offset);
 800f044:	f7ff ffcc 	bl	800efe0 <std_msgs::MultiArrayLayout::serialize(unsigned char*) const>
      *(outbuffer + offset++) = data_length;
 800f048:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      *(outbuffer + offset++) = 0;
 800f04c:	2200      	movs	r2, #0

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->layout.serialize(outbuffer + offset);
      *(outbuffer + offset++) = data_length;
 800f04e:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset++) = 0;
 800f050:	182b      	adds	r3, r5, r0
 800f052:	3004      	adds	r0, #4
 800f054:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset++) = 0;
 800f056:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset++) = 0;
 800f058:	70da      	strb	r2, [r3, #3]
 800f05a:	182b      	adds	r3, r5, r0
      for( uint8_t i = 0; i < data_length; i++){
 800f05c:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
 800f060:	1c51      	adds	r1, r2, #1
 800f062:	b2d2      	uxtb	r2, r2
 800f064:	4296      	cmp	r6, r2
 800f066:	eba3 0005 	sub.w	r0, r3, r5
 800f06a:	f103 0304 	add.w	r3, r3, #4
 800f06e:	d90f      	bls.n	800f090 <std_msgs::Float32MultiArray::serialize(unsigned char*) const+0x54>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800f070:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800f072:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 800f076:	0a10      	lsrs	r0, r2, #8
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800f078:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 800f07c:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 800f080:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 800f082:	0e12      	lsrs	r2, r2, #24
 800f084:	f803 2c01 	strb.w	r2, [r3, #-1]
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 800f088:	f803 0c02 	strb.w	r0, [r3, #-2]
      offset += this->layout.serialize(outbuffer + offset);
      *(outbuffer + offset++) = data_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < data_length; i++){
 800f08c:	460a      	mov	r2, r1
 800f08e:	e7e5      	b.n	800f05c <std_msgs::Float32MultiArray::serialize(unsigned char*) const+0x20>
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data[i]);
      }
      return offset;
    }
 800f090:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f094 <std_msgs::Float32MultiArray::getType()>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
      }
     return offset;
    }

    const char * getType(){ return "std_msgs/Float32MultiArray"; };
 800f094:	4800      	ldr	r0, [pc, #0]	; (800f098 <std_msgs::Float32MultiArray::getType()+0x4>)
 800f096:	4770      	bx	lr
 800f098:	080153e3 	.word	0x080153e3

0800f09c <std_msgs::Float32MultiArray::getMD5()>:
    const char * getMD5(){ return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 800f09c:	4800      	ldr	r0, [pc, #0]	; (800f0a0 <std_msgs::Float32MultiArray::getMD5()+0x4>)
 800f09e:	4770      	bx	lr
 800f0a0:	080153fe 	.word	0x080153fe

0800f0a4 <std_msgs::Header::getType()>:
      this->frame_id = (char *)(inbuffer + offset-1);
      offset += length_frame_id;
     return offset;
    }

    const char * getType(){ return "std_msgs/Header"; };
 800f0a4:	4800      	ldr	r0, [pc, #0]	; (800f0a8 <std_msgs::Header::getType()+0x4>)
 800f0a6:	4770      	bx	lr
 800f0a8:	0801541f 	.word	0x0801541f

0800f0ac <std_msgs::Header::getMD5()>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800f0ac:	4800      	ldr	r0, [pc, #0]	; (800f0b0 <std_msgs::Header::getMD5()+0x4>)
 800f0ae:	4770      	bx	lr
 800f0b0:	0801542f 	.word	0x0801542f

0800f0b4 <roberto_msgs::MotorState::getType()>:
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->mode);
     return offset;
    }

    const char * getType(){ return "roberto_msgs/MotorState"; };
 800f0b4:	4800      	ldr	r0, [pc, #0]	; (800f0b8 <roberto_msgs::MotorState::getType()+0x4>)
 800f0b6:	4770      	bx	lr
 800f0b8:	08015450 	.word	0x08015450

0800f0bc <roberto_msgs::MotorState::getMD5()>:
    const char * getMD5(){ return "e8b5d1162b85151c49e02b8224796c0e"; };
 800f0bc:	4800      	ldr	r0, [pc, #0]	; (800f0c0 <roberto_msgs::MotorState::getMD5()+0x4>)
 800f0be:	4770      	bx	lr
 800f0c0:	08015468 	.word	0x08015468

0800f0c4 <ros::Subscriber<roberto_msgs::MotorState>::getEndpointType()>:
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
      virtual int getEndpointType(){ return endpoint_; }
 800f0c4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800f0c6:	4770      	bx	lr

0800f0c8 <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()>:
      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
      }

      virtual const char * getMsgType(){ return this->msg.getType(); }
 800f0c8:	4800      	ldr	r0, [pc, #0]	; (800f0cc <ros::Subscriber<roberto_msgs::MotorState>::getMsgType()+0x4>)
 800f0ca:	4770      	bx	lr
 800f0cc:	08015450 	.word	0x08015450

0800f0d0 <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()>:
      virtual const char * getMsgMD5(){ return this->msg.getMD5(); }
 800f0d0:	4800      	ldr	r0, [pc, #0]	; (800f0d4 <ros::Subscriber<roberto_msgs::MotorState>::getMsgMD5()+0x4>)
 800f0d2:	4770      	bx	lr
 800f0d4:	08015468 	.word	0x08015468

0800f0d8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::connected()>:


      /* Are we connected to the PC? */
      virtual bool connected() {
        return configured_;
      };
 800f0d8:	f890 08f4 	ldrb.w	r0, [r0, #2292]	; 0x8f4
 800f0dc:	4770      	bx	lr

0800f0de <std_msgs::Header::serialize(unsigned char*) const>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800f0de:	6843      	ldr	r3, [r0, #4]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800f0e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800f0e4:	6843      	ldr	r3, [r0, #4]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0e6:	4605      	mov	r5, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 800f0e8:	0a1b      	lsrs	r3, r3, #8
 800f0ea:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800f0ec:	88c3      	ldrh	r3, [r0, #6]
      stamp(),
      frame_id("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f0ee:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800f0f0:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800f0f2:	79c3      	ldrb	r3, [r0, #7]
 800f0f4:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->seq);
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800f0f6:	6883      	ldr	r3, [r0, #8]
 800f0f8:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800f0fa:	6883      	ldr	r3, [r0, #8]
 800f0fc:	0a1b      	lsrs	r3, r3, #8
 800f0fe:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800f100:	8943      	ldrh	r3, [r0, #10]
 800f102:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800f104:	7ac3      	ldrb	r3, [r0, #11]
 800f106:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800f108:	68c3      	ldr	r3, [r0, #12]
 800f10a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 800f10c:	68c3      	ldr	r3, [r0, #12]
 800f10e:	0a1b      	lsrs	r3, r3, #8
 800f110:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 800f112:	89c3      	ldrh	r3, [r0, #14]
 800f114:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 800f116:	7bc3      	ldrb	r3, [r0, #15]
 800f118:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id = strlen(this->frame_id);
 800f11a:	6900      	ldr	r0, [r0, #16]
 800f11c:	f7f7 fcee 	bl	8006afc <strlen>
 800f120:	4606      	mov	r6, r0
 800f122:	ab02      	add	r3, sp, #8
 800f124:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 800f128:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800f12a:	4632      	mov	r2, r6
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id = strlen(this->frame_id);
      memcpy(outbuffer + offset, &length_frame_id, sizeof(uint32_t));
 800f12c:	60e0      	str	r0, [r4, #12]
      offset += 4;
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 800f12e:	6929      	ldr	r1, [r5, #16]
 800f130:	f104 0010 	add.w	r0, r4, #16
 800f134:	f001 fb6a 	bl	801080c <memcpy>
      offset += length_frame_id;
      return offset;
    }
 800f138:	f106 0010 	add.w	r0, r6, #16
 800f13c:	b002      	add	sp, #8
 800f13e:	bd70      	pop	{r4, r5, r6, pc}

0800f140 <std_msgs::MultiArrayDimension::serialize(unsigned char*) const>:
      size(0),
      stride(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f140:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f142:	4605      	mov	r5, r0
    {
      int offset = 0;
      uint32_t length_label = strlen(this->label);
 800f144:	6840      	ldr	r0, [r0, #4]
      size(0),
      stride(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f146:	460c      	mov	r4, r1
    {
      int offset = 0;
      uint32_t length_label = strlen(this->label);
 800f148:	f7f7 fcd8 	bl	8006afc <strlen>
 800f14c:	ab02      	add	r3, sp, #8
 800f14e:	f843 0d04 	str.w	r0, [r3, #-4]!
 800f152:	4606      	mov	r6, r0
      memcpy(outbuffer + offset, &length_label, sizeof(uint32_t));
 800f154:	6818      	ldr	r0, [r3, #0]
 800f156:	4623      	mov	r3, r4
 800f158:	f843 0b04 	str.w	r0, [r3], #4
      offset += 4;
      memcpy(outbuffer + offset, this->label, length_label);
 800f15c:	6869      	ldr	r1, [r5, #4]
 800f15e:	4632      	mov	r2, r6
 800f160:	4618      	mov	r0, r3
 800f162:	f001 fb53 	bl	801080c <memcpy>
      offset += length_label;
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800f166:	68ab      	ldr	r3, [r5, #8]
 800f168:	19a1      	adds	r1, r4, r6
 800f16a:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800f16c:	68ab      	ldr	r3, [r5, #8]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stride);
      return offset;
    }
 800f16e:	f106 000c 	add.w	r0, r6, #12
      memcpy(outbuffer + offset, &length_label, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->label, length_label);
      offset += length_label;
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800f172:	0a1b      	lsrs	r3, r3, #8
 800f174:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800f176:	896b      	ldrh	r3, [r5, #10]
 800f178:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800f17a:	7aeb      	ldrb	r3, [r5, #11]
 800f17c:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->size);
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 800f17e:	68eb      	ldr	r3, [r5, #12]
 800f180:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 800f182:	68eb      	ldr	r3, [r5, #12]
 800f184:	0a1b      	lsrs	r3, r3, #8
 800f186:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800f188:	89eb      	ldrh	r3, [r5, #14]
 800f18a:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 800f18c:	7beb      	ldrb	r3, [r5, #15]
 800f18e:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->stride);
      return offset;
    }
 800f190:	b002      	add	sp, #8
 800f192:	bd70      	pop	{r4, r5, r6, pc}

0800f194 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const>:
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 800f198:	7903      	ldrb	r3, [r0, #4]
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f19a:	4607      	mov	r7, r0
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
 800f19c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset++) = 0;
 800f19e:	2300      	movs	r3, #0
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
 800f1a0:	461a      	mov	r2, r3
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f1a2:	460c      	mov	r4, r1
    {
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
 800f1a4:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset++) = 0;
 800f1a6:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset++) = 0;
 800f1a8:	70cb      	strb	r3, [r1, #3]
 800f1aa:	3104      	adds	r1, #4
      for( uint8_t i = 0; i < ints_length; i++){
 800f1ac:	793d      	ldrb	r5, [r7, #4]
 800f1ae:	1c50      	adds	r0, r2, #1
 800f1b0:	b2d2      	uxtb	r2, r2
 800f1b2:	4295      	cmp	r5, r2
 800f1b4:	eba1 0304 	sub.w	r3, r1, r4
 800f1b8:	f101 0104 	add.w	r1, r1, #4
 800f1bc:	d90f      	bls.n	800f1de <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x4a>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800f1c4:	0a1a      	lsrs	r2, r3, #8
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800f1c6:	f801 3c04 	strb.w	r3, [r1, #-4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800f1ca:	f801 2c03 	strb.w	r2, [r1, #-3]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800f1ce:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800f1d0:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800f1d2:	f801 2c02 	strb.w	r2, [r1, #-2]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800f1d6:	f801 3c01 	strb.w	r3, [r1, #-1]
      int offset = 0;
      *(outbuffer + offset++) = ints_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < ints_length; i++){
 800f1da:	4602      	mov	r2, r0
 800f1dc:	e7e6      	b.n	800f1ac <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x18>
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800f1de:	7c3a      	ldrb	r2, [r7, #16]
      *(outbuffer + offset++) = 0;
 800f1e0:	18e1      	adds	r1, r4, r3
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->ints[i]);
      }
      *(outbuffer + offset++) = floats_length;
 800f1e2:	54e2      	strb	r2, [r4, r3]
      *(outbuffer + offset++) = 0;
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	3304      	adds	r3, #4
 800f1e8:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset++) = 0;
 800f1ea:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset++) = 0;
 800f1ec:	70ca      	strb	r2, [r1, #3]
 800f1ee:	4423      	add	r3, r4
      for( uint8_t i = 0; i < floats_length; i++){
 800f1f0:	7c38      	ldrb	r0, [r7, #16]
 800f1f2:	1c51      	adds	r1, r2, #1
 800f1f4:	b2d2      	uxtb	r2, r2
 800f1f6:	4290      	cmp	r0, r2
 800f1f8:	eba3 0604 	sub.w	r6, r3, r4
 800f1fc:	f103 0304 	add.w	r3, r3, #4
 800f200:	d90f      	bls.n	800f222 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x8e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800f202:	69b8      	ldr	r0, [r7, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800f204:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800f208:	0a10      	lsrs	r0, r2, #8
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800f20a:	f803 2c04 	strb.w	r2, [r3, #-4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800f20e:	f803 0c03 	strb.w	r0, [r3, #-3]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800f212:	0c10      	lsrs	r0, r2, #16
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800f214:	0e12      	lsrs	r2, r2, #24
 800f216:	f803 2c01 	strb.w	r2, [r3, #-1]
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800f21a:	f803 0c02 	strb.w	r0, [r3, #-2]
      }
      *(outbuffer + offset++) = floats_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < floats_length; i++){
 800f21e:	460a      	mov	r2, r1
 800f220:	e7e6      	b.n	800f1f0 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x5c>
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 800f222:	7f3b      	ldrb	r3, [r7, #28]
      *(outbuffer + offset++) = 0;
 800f224:	19a2      	adds	r2, r4, r6
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->floats[i]);
      }
      *(outbuffer + offset++) = strings_length;
 800f226:	55a3      	strb	r3, [r4, r6]
      *(outbuffer + offset++) = 0;
 800f228:	2300      	movs	r3, #0
 800f22a:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset++) = 0;
 800f22c:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset++) = 0;
 800f22e:	3604      	adds	r6, #4
 800f230:	70d3      	strb	r3, [r2, #3]
      for( uint8_t i = 0; i < strings_length; i++){
 800f232:	7f3a      	ldrb	r2, [r7, #28]
 800f234:	b2dd      	uxtb	r5, r3
 800f236:	42aa      	cmp	r2, r5
 800f238:	f103 0901 	add.w	r9, r3, #1
 800f23c:	d915      	bls.n	800f26a <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0xd6>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f240:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f244:	f7f7 fc5a 	bl	8006afc <strlen>
 800f248:	4680      	mov	r8, r0
 800f24a:	ab02      	add	r3, sp, #8
 800f24c:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 800f250:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800f252:	4642      	mov	r2, r8
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_stringsi = strlen(this->strings[i]);
      memcpy(outbuffer + offset, &length_stringsi, sizeof(uint32_t));
 800f254:	51a0      	str	r0, [r4, r6]
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800f256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f258:	3604      	adds	r6, #4
 800f25a:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800f25e:	19a0      	adds	r0, r4, r6
 800f260:	f001 fad4 	bl	801080c <memcpy>
      offset += length_stringsi;
 800f264:	4446      	add	r6, r8
      }
      *(outbuffer + offset++) = strings_length;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      for( uint8_t i = 0; i < strings_length; i++){
 800f266:	464b      	mov	r3, r9
 800f268:	e7e3      	b.n	800f232 <rosserial_msgs::RequestParamResponse::serialize(unsigned char*) const+0x9e>
      offset += 4;
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
      offset += length_stringsi;
      }
      return offset;
    }
 800f26a:	4630      	mov	r0, r6
 800f26c:	b003      	add	sp, #12
 800f26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f272 <rosserial_msgs::Log::serialize(unsigned char*) const>:
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f272:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800f274:	7903      	ldrb	r3, [r0, #4]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f276:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800f278:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 800f27a:	6880      	ldr	r0, [r0, #8]
      level(0),
      msg("")
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f27c:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
 800f27e:	f7f7 fc3d 	bl	8006afc <strlen>
 800f282:	4604      	mov	r4, r0
 800f284:	ab02      	add	r3, sp, #8
 800f286:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 800f28a:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800f28c:	4622      	mov	r2, r4
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
      offset += sizeof(this->level);
      uint32_t length_msg = strlen(this->msg);
      memcpy(outbuffer + offset, &length_msg, sizeof(uint32_t));
 800f28e:	f8c5 0001 	str.w	r0, [r5, #1]
      offset += 4;
      memcpy(outbuffer + offset, this->msg, length_msg);
 800f292:	68b1      	ldr	r1, [r6, #8]
 800f294:	1d68      	adds	r0, r5, #5
 800f296:	f001 fab9 	bl	801080c <memcpy>
      offset += length_msg;
      return offset;
    }
 800f29a:	1d60      	adds	r0, r4, #5
 800f29c:	b002      	add	sp, #8
 800f29e:	bd70      	pop	{r4, r5, r6, pc}

0800f2a0 <rosserial_msgs::TopicInfo::serialize(unsigned char*) const>:
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f2a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f2a4:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f2a6:	4606      	mov	r6, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f2a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f2aa:	8883      	ldrh	r3, [r0, #4]
      md5sum(""),
      buffer_size(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f2ac:	460d      	mov	r5, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f2ae:	0a1b      	lsrs	r3, r3, #8
 800f2b0:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
 800f2b2:	6880      	ldr	r0, [r0, #8]
 800f2b4:	f7f7 fc22 	bl	8006afc <strlen>
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	ab04      	add	r3, sp, #16
 800f2bc:	f843 0d0c 	str.w	r0, [r3, #-12]!
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800f2c0:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f2c2:	4622      	mov	r2, r4
      int offset = 0;
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
 800f2c4:	f8c5 0002 	str.w	r0, [r5, #2]
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f2c8:	68b1      	ldr	r1, [r6, #8]
 800f2ca:	1da8      	adds	r0, r5, #6
 800f2cc:	f001 fa9e 	bl	801080c <memcpy>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
 800f2d0:	68f0      	ldr	r0, [r6, #12]
 800f2d2:	f7f7 fc13 	bl	8006afc <strlen>
 800f2d6:	4607      	mov	r7, r0
 800f2d8:	ab04      	add	r3, sp, #16
 800f2da:	f843 0d08 	str.w	r0, [r3, #-8]!
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800f2de:	6818      	ldr	r0, [r3, #0]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name = strlen(this->topic_name);
      memcpy(outbuffer + offset, &length_topic_name, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
      offset += length_topic_name;
 800f2e0:	f104 0806 	add.w	r8, r4, #6
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
 800f2e4:	f845 0008 	str.w	r0, [r5, r8]
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800f2e8:	340a      	adds	r4, #10
 800f2ea:	463a      	mov	r2, r7
 800f2ec:	68f1      	ldr	r1, [r6, #12]
 800f2ee:	1928      	adds	r0, r5, r4
 800f2f0:	f001 fa8c 	bl	801080c <memcpy>
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
 800f2f4:	6930      	ldr	r0, [r6, #16]
 800f2f6:	f7f7 fc01 	bl	8006afc <strlen>
      offset += length_topic_name;
      uint32_t length_message_type = strlen(this->message_type);
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
 800f2fa:	443c      	add	r4, r7
      uint32_t length_md5sum = strlen(this->md5sum);
 800f2fc:	4607      	mov	r7, r0
 800f2fe:	ab04      	add	r3, sp, #16
 800f300:	f843 0d04 	str.w	r0, [r3, #-4]!
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800f304:	6818      	ldr	r0, [r3, #0]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f306:	463a      	mov	r2, r7
      memcpy(outbuffer + offset, &length_message_type, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->message_type, length_message_type);
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
 800f308:	5128      	str	r0, [r5, r4]
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f30a:	3404      	adds	r4, #4
 800f30c:	1928      	adds	r0, r5, r4
 800f30e:	6931      	ldr	r1, [r6, #16]
 800f310:	f001 fa7c 	bl	801080c <memcpy>
      offset += length_md5sum;
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800f314:	6973      	ldr	r3, [r6, #20]
      offset += length_message_type;
      uint32_t length_md5sum = strlen(this->md5sum);
      memcpy(outbuffer + offset, &length_md5sum, sizeof(uint32_t));
      offset += 4;
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
      offset += length_md5sum;
 800f316:	1938      	adds	r0, r7, r4
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800f318:	542b      	strb	r3, [r5, r0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800f31a:	0a1a      	lsrs	r2, r3, #8
 800f31c:	4405      	add	r5, r0
 800f31e:	706a      	strb	r2, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }
 800f320:	3004      	adds	r0, #4
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f322:	0c1a      	lsrs	r2, r3, #16
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f324:	0e1b      	lsrs	r3, r3, #24
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f326:	70aa      	strb	r2, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f328:	70eb      	strb	r3, [r5, #3]
      offset += sizeof(this->buffer_size);
      return offset;
    }
 800f32a:	b004      	add	sp, #16
 800f32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f330 <rosserial_msgs::Log::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f330:	460b      	mov	r3, r1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f332:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f334:	f813 2b01 	ldrb.w	r2, [r3], #1
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f338:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800f33a:	7102      	strb	r2, [r0, #4]
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
 800f33c:	6818      	ldr	r0, [r3, #0]
 800f33e:	1d4a      	adds	r2, r1, #5
 800f340:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800f342:	9b01      	ldr	r3, [sp, #4]
 800f344:	1d58      	adds	r0, r3, #5
 800f346:	1a55      	subs	r5, r2, r1
 800f348:	42a8      	cmp	r0, r5
 800f34a:	d904      	bls.n	800f356 <rosserial_msgs::Log::deserialize(unsigned char*)+0x26>
          inbuffer[k-1]=inbuffer[k];
 800f34c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f350:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
      offset += sizeof(this->level);
      uint32_t length_msg;
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800f354:	e7f7      	b.n	800f346 <rosserial_msgs::Log::deserialize(unsigned char*)+0x16>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 800f356:	440b      	add	r3, r1
 800f358:	2200      	movs	r2, #0
      this->msg = (char *)(inbuffer + offset-1);
 800f35a:	3104      	adds	r1, #4
      memcpy(&length_msg, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_msg-1]=0;
 800f35c:	711a      	strb	r2, [r3, #4]
      this->msg = (char *)(inbuffer + offset-1);
 800f35e:	60a1      	str	r1, [r4, #8]
      offset += length_msg;
     return offset;
    }
 800f360:	b003      	add	sp, #12
 800f362:	bd30      	pop	{r4, r5, pc}

0800f364 <std_msgs::Header::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f364:	4603      	mov	r3, r0
 800f366:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
      int offset = 0;
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800f368:	780a      	ldrb	r2, [r1, #0]
 800f36a:	f101 0410 	add.w	r4, r1, #16
 800f36e:	6042      	str	r2, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f370:	7848      	ldrb	r0, [r1, #1]
 800f372:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f376:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f378:	7888      	ldrb	r0, [r1, #2]
 800f37a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f37e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f380:	78c8      	ldrb	r0, [r1, #3]
 800f382:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f386:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 800f388:	790a      	ldrb	r2, [r1, #4]
 800f38a:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f38c:	7948      	ldrb	r0, [r1, #5]
 800f38e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f392:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f394:	7988      	ldrb	r0, [r1, #6]
 800f396:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f39a:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f39c:	79c8      	ldrb	r0, [r1, #7]
 800f39e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f3a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800f3a4:	7a0a      	ldrb	r2, [r1, #8]
 800f3a6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f3a8:	7a48      	ldrb	r0, [r1, #9]
 800f3aa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f3ae:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f3b0:	7a88      	ldrb	r0, [r1, #10]
 800f3b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800f3b6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f3b8:	7ac8      	ldrb	r0, [r1, #11]
 800f3ba:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800f3be:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
 800f3c0:	68c8      	ldr	r0, [r1, #12]
 800f3c2:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800f3c4:	9a01      	ldr	r2, [sp, #4]
 800f3c6:	f102 0010 	add.w	r0, r2, #16
 800f3ca:	1a65      	subs	r5, r4, r1
 800f3cc:	42a8      	cmp	r0, r5
 800f3ce:	d904      	bls.n	800f3da <std_msgs::Header::deserialize(unsigned char*)+0x76>
          inbuffer[k-1]=inbuffer[k];
 800f3d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f3d4:	f804 5c02 	strb.w	r5, [r4, #-2]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800f3d8:	e7f7      	b.n	800f3ca <std_msgs::Header::deserialize(unsigned char*)+0x66>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 800f3da:	440a      	add	r2, r1
 800f3dc:	2400      	movs	r4, #0
      this->frame_id = (char *)(inbuffer + offset-1);
 800f3de:	310f      	adds	r1, #15
      memcpy(&length_frame_id, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_frame_id-1]=0;
 800f3e0:	73d4      	strb	r4, [r2, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
 800f3e2:	6119      	str	r1, [r3, #16]
      offset += length_frame_id;
     return offset;
    }
 800f3e4:	b003      	add	sp, #12
 800f3e6:	bd30      	pop	{r4, r5, pc}

0800f3e8 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f3e8:	780b      	ldrb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f3ea:	b530      	push	{r4, r5, lr}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f3ec:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f3ee:	784a      	ldrb	r2, [r1, #1]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f3f0:	4604      	mov	r4, r0
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f3f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f3f6:	8083      	strh	r3, [r0, #4]
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800f3f8:	f8d1 0002 	ldr.w	r0, [r1, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f3fc:	b085      	sub	sp, #20
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
 800f3fe:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f400:	9d01      	ldr	r5, [sp, #4]
 800f402:	1d8a      	adds	r2, r1, #6
 800f404:	1dab      	adds	r3, r5, #6
 800f406:	1a50      	subs	r0, r2, r1
 800f408:	4283      	cmp	r3, r0
 800f40a:	d904      	bls.n	800f416 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x2e>
          inbuffer[k-1]=inbuffer[k];
 800f40c:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f410:	f802 0c02 	strb.w	r0, [r2, #-2]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      memcpy(&length_topic_name, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f414:	e7f7      	b.n	800f406 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x1e>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_topic_name-1]=0;
 800f416:	194a      	adds	r2, r1, r5
 800f418:	2000      	movs	r0, #0
 800f41a:	7150      	strb	r0, [r2, #5]
      this->topic_name = (char *)(inbuffer + offset-1);
 800f41c:	1d4a      	adds	r2, r1, #5
 800f41e:	60a2      	str	r2, [r4, #8]
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800f420:	58c8      	ldr	r0, [r1, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f422:	1d1a      	adds	r2, r3, #4
      }
      inbuffer[offset+length_topic_name-1]=0;
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
 800f424:	9002      	str	r0, [sp, #8]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f426:	9b02      	ldr	r3, [sp, #8]
 800f428:	f105 000a 	add.w	r0, r5, #10
 800f42c:	4413      	add	r3, r2
 800f42e:	4408      	add	r0, r1
 800f430:	1a45      	subs	r5, r0, r1
 800f432:	42ab      	cmp	r3, r5
 800f434:	d904      	bls.n	800f440 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x58>
          inbuffer[k-1]=inbuffer[k];
 800f436:	f810 5b01 	ldrb.w	r5, [r0], #1
 800f43a:	f800 5c02 	strb.w	r5, [r0, #-2]
      this->topic_name = (char *)(inbuffer + offset-1);
      offset += length_topic_name;
      uint32_t length_message_type;
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f43e:	e7f7      	b.n	800f430 <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x48>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
 800f440:	3a01      	subs	r2, #1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800f442:	18c8      	adds	r0, r1, r3
      this->message_type = (char *)(inbuffer + offset-1);
 800f444:	440a      	add	r2, r1
      memcpy(&length_message_type, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_message_type-1]=0;
 800f446:	2500      	movs	r5, #0
 800f448:	f800 5c01 	strb.w	r5, [r0, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
 800f44c:	60e2      	str	r2, [r4, #12]
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800f44e:	6800      	ldr	r0, [r0, #0]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f450:	3304      	adds	r3, #4
      }
      inbuffer[offset+length_message_type-1]=0;
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
 800f452:	9003      	str	r0, [sp, #12]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f454:	9803      	ldr	r0, [sp, #12]
 800f456:	18ca      	adds	r2, r1, r3
 800f458:	4418      	add	r0, r3
 800f45a:	1a55      	subs	r5, r2, r1
 800f45c:	42a8      	cmp	r0, r5
 800f45e:	d904      	bls.n	800f46a <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x82>
          inbuffer[k-1]=inbuffer[k];
 800f460:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f464:	f802 5c02 	strb.w	r5, [r2, #-2]
      this->message_type = (char *)(inbuffer + offset-1);
      offset += length_message_type;
      uint32_t length_md5sum;
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f468:	e7f7      	b.n	800f45a <rosserial_msgs::TopicInfo::deserialize(unsigned char*)+0x72>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
      this->md5sum = (char *)(inbuffer + offset-1);
 800f46a:	3b01      	subs	r3, #1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f46c:	180d      	adds	r5, r1, r0
      this->md5sum = (char *)(inbuffer + offset-1);
 800f46e:	440b      	add	r3, r1
      memcpy(&length_md5sum, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f470:	2200      	movs	r2, #0
 800f472:	f805 2c01 	strb.w	r2, [r5, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
 800f476:	6123      	str	r3, [r4, #16]
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800f478:	78ab      	ldrb	r3, [r5, #2]
 800f47a:	786a      	ldrb	r2, [r5, #1]
 800f47c:	041b      	lsls	r3, r3, #16
 800f47e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f482:	5c0a      	ldrb	r2, [r1, r0]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800f484:	3004      	adds	r0, #4
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->buffer_size = u_buffer_size.real;
 800f486:	4313      	orrs	r3, r2
 800f488:	78ea      	ldrb	r2, [r5, #3]
 800f48a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f48e:	6163      	str	r3, [r4, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
 800f490:	b005      	add	sp, #20
 800f492:	bd30      	pop	{r4, r5, pc}

0800f494 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t length_label;
      memcpy(&length_label, (inbuffer + offset), sizeof(uint32_t));
 800f494:	460b      	mov	r3, r1
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
      offset += sizeof(this->stride);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f496:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f498:	4602      	mov	r2, r0
    {
      int offset = 0;
      uint32_t length_label;
      memcpy(&length_label, (inbuffer + offset), sizeof(uint32_t));
 800f49a:	f853 0b04 	ldr.w	r0, [r3], #4
 800f49e:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800f4a0:	9801      	ldr	r0, [sp, #4]
 800f4a2:	1d05      	adds	r5, r0, #4
 800f4a4:	1a5c      	subs	r4, r3, r1
 800f4a6:	42a5      	cmp	r5, r4
 800f4a8:	d904      	bls.n	800f4b4 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)+0x20>
          inbuffer[k-1]=inbuffer[k];
 800f4aa:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f4ae:	f803 4c02 	strb.w	r4, [r3, #-2]
    {
      int offset = 0;
      uint32_t length_label;
      memcpy(&length_label, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800f4b2:	e7f7      	b.n	800f4a4 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)+0x10>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_label-1]=0;
 800f4b4:	180c      	adds	r4, r1, r0
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	70e3      	strb	r3, [r4, #3]
      this->label = (char *)(inbuffer + offset-1);
 800f4ba:	1ccb      	adds	r3, r1, #3
 800f4bc:	6053      	str	r3, [r2, #4]
      offset += length_label;
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800f4be:	5d4b      	ldrb	r3, [r1, r5]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->stride);
     return offset;
    }
 800f4c0:	300c      	adds	r0, #12
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_label-1]=0;
      this->label = (char *)(inbuffer + offset-1);
      offset += length_label;
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800f4c2:	6093      	str	r3, [r2, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f4c4:	7961      	ldrb	r1, [r4, #5]
 800f4c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f4ca:	6093      	str	r3, [r2, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f4cc:	79a1      	ldrb	r1, [r4, #6]
 800f4ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f4d2:	6093      	str	r3, [r2, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f4d4:	79e1      	ldrb	r1, [r4, #7]
 800f4d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f4da:	6093      	str	r3, [r2, #8]
      offset += sizeof(this->size);
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 800f4dc:	7a23      	ldrb	r3, [r4, #8]
 800f4de:	60d3      	str	r3, [r2, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f4e0:	7a61      	ldrb	r1, [r4, #9]
 800f4e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f4e6:	60d3      	str	r3, [r2, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f4e8:	7aa1      	ldrb	r1, [r4, #10]
 800f4ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f4ee:	60d3      	str	r3, [r2, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f4f0:	7ae1      	ldrb	r1, [r4, #11]
 800f4f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f4f6:	60d3      	str	r3, [r2, #12]
      offset += sizeof(this->stride);
     return offset;
    }
 800f4f8:	b003      	add	sp, #12
 800f4fa:	bd30      	pop	{r4, r5, pc}

0800f4fc <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
 800f4fe:	780d      	ldrb	r5, [r1, #0]
      if(ints_lengthT > ints_length)
 800f500:	7903      	ldrb	r3, [r0, #4]
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f502:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 800f504:	42ab      	cmp	r3, r5
      offset += length_stringsi;
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f506:	460e      	mov	r6, r1
    {
      int offset = 0;
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
 800f508:	d204      	bcs.n	800f514 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x18>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800f50a:	00a9      	lsls	r1, r5, #2
 800f50c:	68c0      	ldr	r0, [r0, #12]
 800f50e:	f001 f991 	bl	8010834 <realloc>
 800f512:	60e0      	str	r0, [r4, #12]
      offset += 3;
      ints_length = ints_lengthT;
 800f514:	7125      	strb	r5, [r4, #4]
 800f516:	1d32      	adds	r2, r6, #4
 800f518:	2100      	movs	r1, #0
      for( uint8_t i = 0; i < ints_length; i++){
 800f51a:	7923      	ldrb	r3, [r4, #4]
 800f51c:	1c4f      	adds	r7, r1, #1
 800f51e:	b2c9      	uxtb	r1, r1
 800f520:	428b      	cmp	r3, r1
 800f522:	eba2 0506 	sub.w	r5, r2, r6
 800f526:	f102 0204 	add.w	r2, r2, #4
 800f52a:	d914      	bls.n	800f556 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x5a>
      u_st_ints.base = 0;
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
 800f52c:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 800f530:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800f534:	041b      	lsls	r3, r3, #16
 800f536:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800f53a:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 800f53e:	4303      	orrs	r3, r0
 800f540:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800f544:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800f548:	60a3      	str	r3, [r4, #8]
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800f54a:	68a0      	ldr	r0, [r4, #8]
 800f54c:	68e3      	ldr	r3, [r4, #12]
 800f54e:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
      uint8_t ints_lengthT = *(inbuffer + offset++);
      if(ints_lengthT > ints_length)
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
      offset += 3;
      ints_length = ints_lengthT;
      for( uint8_t i = 0; i < ints_length; i++){
 800f552:	4639      	mov	r1, r7
 800f554:	e7e1      	b.n	800f51a <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x1e>
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_ints = u_st_ints.real;
      offset += sizeof(this->st_ints);
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
      }
      uint8_t floats_lengthT = *(inbuffer + offset++);
 800f556:	5d77      	ldrb	r7, [r6, r5]
      if(floats_lengthT > floats_length)
 800f558:	7c23      	ldrb	r3, [r4, #16]
 800f55a:	42bb      	cmp	r3, r7
 800f55c:	d204      	bcs.n	800f568 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x6c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800f55e:	00b9      	lsls	r1, r7, #2
 800f560:	69a0      	ldr	r0, [r4, #24]
 800f562:	f001 f967 	bl	8010834 <realloc>
 800f566:	61a0      	str	r0, [r4, #24]
 800f568:	1d2b      	adds	r3, r5, #4
      offset += 3;
      floats_length = floats_lengthT;
 800f56a:	7427      	strb	r7, [r4, #16]
 800f56c:	4433      	add	r3, r6
 800f56e:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < floats_length; i++){
 800f570:	7c21      	ldrb	r1, [r4, #16]
 800f572:	1c57      	adds	r7, r2, #1
 800f574:	b2d2      	uxtb	r2, r2
 800f576:	4291      	cmp	r1, r2
 800f578:	eba3 0506 	sub.w	r5, r3, r6
 800f57c:	f103 0304 	add.w	r3, r3, #4
 800f580:	d914      	bls.n	800f5ac <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xb0>
      } u_st_floats;
      u_st_floats.base = 0;
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f582:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800f586:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800f58a:	0409      	lsls	r1, r1, #16
 800f58c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800f590:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800f594:	4301      	orrs	r1, r0
 800f596:	f813 0c01 	ldrb.w	r0, [r3, #-1]
      this->st_floats = u_st_floats.real;
 800f59a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800f59e:	6161      	str	r1, [r4, #20]
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800f5a0:	6960      	ldr	r0, [r4, #20]
 800f5a2:	69a1      	ldr	r1, [r4, #24]
 800f5a4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      uint8_t floats_lengthT = *(inbuffer + offset++);
      if(floats_lengthT > floats_length)
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
      offset += 3;
      floats_length = floats_lengthT;
      for( uint8_t i = 0; i < floats_length; i++){
 800f5a8:	463a      	mov	r2, r7
 800f5aa:	e7e1      	b.n	800f570 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x74>
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      this->st_floats = u_st_floats.real;
      offset += sizeof(this->st_floats);
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
 800f5ac:	5d77      	ldrb	r7, [r6, r5]
      if(strings_lengthT > strings_length)
 800f5ae:	7f23      	ldrb	r3, [r4, #28]
 800f5b0:	42bb      	cmp	r3, r7
 800f5b2:	d204      	bcs.n	800f5be <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xc2>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800f5b4:	00b9      	lsls	r1, r7, #2
 800f5b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f5b8:	f001 f93c 	bl	8010834 <realloc>
 800f5bc:	6260      	str	r0, [r4, #36]	; 0x24
      offset += 3;
 800f5be:	1d2b      	adds	r3, r5, #4
      strings_length = strings_lengthT;
 800f5c0:	2500      	movs	r5, #0
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f5c2:	46ae      	mov	lr, r5
      }
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
 800f5c4:	7727      	strb	r7, [r4, #28]
      for( uint8_t i = 0; i < strings_length; i++){
 800f5c6:	7f22      	ldrb	r2, [r4, #28]
 800f5c8:	b2ef      	uxtb	r7, r5
 800f5ca:	42ba      	cmp	r2, r7
 800f5cc:	d919      	bls.n	800f602 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0x106>
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800f5ce:	58f0      	ldr	r0, [r6, r3]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f5d0:	1d1a      	adds	r2, r3, #4
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
 800f5d2:	9001      	str	r0, [sp, #4]
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f5d4:	9b01      	ldr	r3, [sp, #4]
 800f5d6:	18b1      	adds	r1, r6, r2
 800f5d8:	4413      	add	r3, r2
 800f5da:	1b88      	subs	r0, r1, r6
 800f5dc:	4283      	cmp	r3, r0
 800f5de:	d904      	bls.n	800f5ea <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xee>
          inbuffer[k-1]=inbuffer[k];
 800f5e0:	f811 0b01 	ldrb.w	r0, [r1], #1
 800f5e4:	f801 0c02 	strb.w	r0, [r1, #-2]
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
      uint32_t length_st_strings;
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f5e8:	e7f7      	b.n	800f5da <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xde>
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
      this->st_strings = (char *)(inbuffer + offset-1);
 800f5ea:	3a01      	subs	r2, #1
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f5ec:	18f1      	adds	r1, r6, r3
      this->st_strings = (char *)(inbuffer + offset-1);
 800f5ee:	4432      	add	r2, r6
      memcpy(&length_st_strings, (inbuffer + offset), sizeof(uint32_t));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
          inbuffer[k-1]=inbuffer[k];
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f5f0:	f801 ec01 	strb.w	lr, [r1, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
 800f5f4:	6222      	str	r2, [r4, #32]
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800f5f6:	6a21      	ldr	r1, [r4, #32]
 800f5f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f5fa:	3501      	adds	r5, #1
 800f5fc:	f842 1027 	str.w	r1, [r2, r7, lsl #2]
      uint8_t strings_lengthT = *(inbuffer + offset++);
      if(strings_lengthT > strings_length)
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
      offset += 3;
      strings_length = strings_lengthT;
      for( uint8_t i = 0; i < strings_length; i++){
 800f600:	e7e1      	b.n	800f5c6 <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)+0xca>
      this->st_strings = (char *)(inbuffer + offset-1);
      offset += length_st_strings;
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }
 800f602:	4618      	mov	r0, r3
 800f604:	b003      	add	sp, #12
 800f606:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f608 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)>:
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    {
      int offset = 0;
      uint8_t dim_lengthT = *(inbuffer + offset++);
 800f60c:	780d      	ldrb	r5, [r1, #0]
      if(dim_lengthT > dim_length)
 800f60e:	7903      	ldrb	r3, [r0, #4]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f610:	4604      	mov	r4, r0
    {
      int offset = 0;
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
 800f612:	42ab      	cmp	r3, r5
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
      offset += sizeof(this->data_offset);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f614:	460f      	mov	r7, r1
    {
      int offset = 0;
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
 800f616:	d204      	bcs.n	800f622 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x1a>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800f618:	0129      	lsls	r1, r5, #4
 800f61a:	6980      	ldr	r0, [r0, #24]
 800f61c:	f001 f90a 	bl	8010834 <realloc>
 800f620:	61a0      	str	r0, [r4, #24]
      offset += 3;
      dim_length = dim_lengthT;
 800f622:	7125      	strb	r5, [r4, #4]
 800f624:	2300      	movs	r3, #0
    {
      int offset = 0;
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      offset += 3;
 800f626:	2604      	movs	r6, #4
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
      offset += this->st_dim.deserialize(inbuffer + offset);
 800f628:	f104 0808 	add.w	r8, r4, #8
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800f62c:	f104 0a18 	add.w	sl, r4, #24
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      offset += 3;
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
 800f630:	7922      	ldrb	r2, [r4, #4]
 800f632:	b2dd      	uxtb	r5, r3
 800f634:	42aa      	cmp	r2, r5
 800f636:	f103 0901 	add.w	r9, r3, #1
 800f63a:	eb07 0106 	add.w	r1, r7, r6
 800f63e:	d90f      	bls.n	800f660 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x58>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800f640:	4640      	mov	r0, r8
 800f642:	f7ff ff27 	bl	800f494 <std_msgs::MultiArrayDimension::deserialize(unsigned char*)>
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800f646:	4642      	mov	r2, r8
 800f648:	69a3      	ldr	r3, [r4, #24]
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      offset += 3;
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
      offset += this->st_dim.deserialize(inbuffer + offset);
 800f64a:	4406      	add	r6, r0
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800f64c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
 800f650:	f852 1b04 	ldr.w	r1, [r2], #4
 800f654:	4552      	cmp	r2, sl
 800f656:	f843 1b04 	str.w	r1, [r3], #4
 800f65a:	d1f9      	bne.n	800f650 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x48>
      uint8_t dim_lengthT = *(inbuffer + offset++);
      if(dim_lengthT > dim_length)
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
      offset += 3;
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
 800f65c:	464b      	mov	r3, r9
 800f65e:	e7e7      	b.n	800f630 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)+0x28>
      offset += this->st_dim.deserialize(inbuffer + offset);
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800f660:	5dbb      	ldrb	r3, [r7, r6]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
      offset += sizeof(this->data_offset);
     return offset;
    }
 800f662:	1d30      	adds	r0, r6, #4
      dim_length = dim_lengthT;
      for( uint8_t i = 0; i < dim_length; i++){
      offset += this->st_dim.deserialize(inbuffer + offset);
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 800f664:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f666:	784a      	ldrb	r2, [r1, #1]
 800f668:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f66c:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f66e:	788a      	ldrb	r2, [r1, #2]
 800f670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f674:	61e3      	str	r3, [r4, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f676:	78ca      	ldrb	r2, [r1, #3]
 800f678:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f67c:	61e3      	str	r3, [r4, #28]
      offset += sizeof(this->data_offset);
     return offset;
    }
 800f67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f682 <std_msgs::Float32MultiArray::deserialize(unsigned char*)>:
      offset += sizeof(this->data[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f684:	4604      	mov	r4, r0
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
 800f686:	3004      	adds	r0, #4
      offset += sizeof(this->data[i]);
      }
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f688:	460d      	mov	r5, r1
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
 800f68a:	f7ff ffbd 	bl	800f608 <std_msgs::MultiArrayLayout::deserialize(unsigned char*)>
      uint8_t data_lengthT = *(inbuffer + offset++);
      if(data_lengthT > data_length)
 800f68e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
      uint8_t data_lengthT = *(inbuffer + offset++);
 800f692:	5c2f      	ldrb	r7, [r5, r0]
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->layout.deserialize(inbuffer + offset);
 800f694:	4606      	mov	r6, r0
      uint8_t data_lengthT = *(inbuffer + offset++);
      if(data_lengthT > data_length)
 800f696:	42bb      	cmp	r3, r7
 800f698:	d204      	bcs.n	800f6a4 <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x22>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 800f69a:	00b9      	lsls	r1, r7, #2
 800f69c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f69e:	f001 f8c9 	bl	8010834 <realloc>
 800f6a2:	62e0      	str	r0, [r4, #44]	; 0x2c
 800f6a4:	1d33      	adds	r3, r6, #4
      offset += 3;
      data_length = data_lengthT;
 800f6a6:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800f6aa:	442b      	add	r3, r5
 800f6ac:	2200      	movs	r2, #0
      for( uint8_t i = 0; i < data_length; i++){
 800f6ae:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800f6b2:	1c56      	adds	r6, r2, #1
 800f6b4:	b2d2      	uxtb	r2, r2
 800f6b6:	4291      	cmp	r1, r2
 800f6b8:	eba3 0005 	sub.w	r0, r3, r5
 800f6bc:	f103 0304 	add.w	r3, r3, #4
 800f6c0:	d914      	bls.n	800f6ec <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x6a>
      } u_st_data;
      u_st_data.base = 0;
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f6c2:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 800f6c6:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800f6ca:	0409      	lsls	r1, r1, #16
 800f6cc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800f6d0:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 800f6d4:	4301      	orrs	r1, r0
 800f6d6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
      this->st_data = u_st_data.real;
 800f6da:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800f6de:	62a1      	str	r1, [r4, #40]	; 0x28
      offset += sizeof(this->st_data);
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 800f6e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f6e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f6e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      uint8_t data_lengthT = *(inbuffer + offset++);
      if(data_lengthT > data_length)
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
      offset += 3;
      data_length = data_lengthT;
      for( uint8_t i = 0; i < data_length; i++){
 800f6e8:	4632      	mov	r2, r6
 800f6ea:	e7e0      	b.n	800f6ae <std_msgs::Float32MultiArray::deserialize(unsigned char*)+0x2c>
      this->st_data = u_st_data.real;
      offset += sizeof(this->st_data);
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
      }
     return offset;
    }
 800f6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f6f0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)>:
          }
        }
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
 800f6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      {
        if(id >= 100 && !configured_)
 800f6f4:	2963      	cmp	r1, #99	; 0x63
          }
        }
        configured_ = true;
      }

      virtual int publish(int id, const Msg * msg)
 800f6f6:	b085      	sub	sp, #20
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	460e      	mov	r6, r1
      {
        if(id >= 100 && !configured_)
 800f6fc:	dd03      	ble.n	800f706 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x16>
 800f6fe:	f890 58f4 	ldrb.w	r5, [r0, #2292]	; 0x8f4
 800f702:	2d00      	cmp	r5, #0
 800f704:	d058      	beq.n	800f7b8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0xc8>
          return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 800f706:	6813      	ldr	r3, [r2, #0]
 800f708:	f204 411f 	addw	r1, r4, #1055	; 0x41f
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4610      	mov	r0, r2
 800f710:	4798      	blx	r3

        /* setup the header */
        message_out[0] = 0xff;
 800f712:	22ff      	movs	r2, #255	; 0xff
 800f714:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
        message_out[1] = PROTOCOL_VER;
 800f718:	22fe      	movs	r2, #254	; 0xfe
      {
        if(id >= 100 && !configured_)
          return 0;

        /* serialize message */
        uint16_t l = msg->serialize(message_out+7);
 800f71a:	b283      	uxth	r3, r0

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
 800f71c:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800f720:	b2c2      	uxtb	r2, r0
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
 800f722:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f726:	f884 041b 	strb.w	r0, [r4, #1051]	; 0x41b
        message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800f72a:	4410      	add	r0, r2
 800f72c:	43c0      	mvns	r0, r0
        message_out[5] = (uint8_t) ((int16_t)id&255);
 800f72e:	f884 641d 	strb.w	r6, [r4, #1053]	; 0x41d
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 800f732:	f346 2607 	sbfx	r6, r6, #8, #8
        uint16_t l = msg->serialize(message_out+7);

        /* setup the header */
        message_out[0] = 0xff;
        message_out[1] = PROTOCOL_VER;
        message_out[2] = (uint8_t) ((uint16_t)l&255);
 800f736:	f884 241a 	strb.w	r2, [r4, #1050]	; 0x41a
        message_out[3] = (uint8_t) ((uint16_t)l>>8);
        message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
 800f73a:	f884 041c 	strb.w	r0, [r4, #1052]	; 0x41c
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);
 800f73e:	f884 641e 	strb.w	r6, [r4, #1054]	; 0x41e
 800f742:	f204 401c 	addw	r0, r4, #1052	; 0x41c

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800f746:	2105      	movs	r1, #5
        message_out[4] = 255 - ((message_out[2] + message_out[3])%256);
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
 800f748:	2200      	movs	r2, #0
        for(int i =5; i<l+7; i++)
 800f74a:	1d9e      	adds	r6, r3, #6
 800f74c:	42b1      	cmp	r1, r6
 800f74e:	dc04      	bgt.n	800f75a <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x6a>
          chk += message_out[i];
 800f750:	f810 5f01 	ldrb.w	r5, [r0, #1]!
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800f754:	3101      	adds	r1, #1
          chk += message_out[i];
 800f756:	442a      	add	r2, r5
        message_out[5] = (uint8_t) ((int16_t)id&255);
        message_out[6] = (uint8_t) ((int16_t)id>>8);

        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
 800f758:	e7f8      	b.n	800f74c <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x5c>
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 800f75a:	43d2      	mvns	r2, r2
 800f75c:	f103 0608 	add.w	r6, r3, #8
 800f760:	3307      	adds	r3, #7
 800f762:	b2b6      	uxth	r6, r6
 800f764:	b29b      	uxth	r3, r3
 800f766:	4423      	add	r3, r4

        if( l <= OUTPUT_SIZE ){
 800f768:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
        /* calculate checksum */
        int chk = 0;
        for(int i =5; i<l+7; i++)
          chk += message_out[i];
        l += 7;
        message_out[l++] = 255 - (chk%256);
 800f76c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        if( l <= OUTPUT_SIZE ){
 800f770:	d813      	bhi.n	800f79a <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0xaa>
          hardware_.write(message_out, l);
 800f772:	f504 6883 	add.w	r8, r4, #1048	; 0x418
 800f776:	4635      	mov	r5, r6
 800f778:	4647      	mov	r7, r8
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
        while( !(USART1->SR & 0x00000040) );
 800f77a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800f7c8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0xd8>
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
      return returnVal;
    }

    void write(uint8_t* data, int length){
      for(int i=0; i<length; i++){
 800f77e:	ebc8 0307 	rsb	r3, r8, r7
 800f782:	429e      	cmp	r6, r3
 800f784:	dd18      	ble.n	800f7b8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0xc8>
        while( !(USART1->SR & 0x00000040) );
 800f786:	f8b9 3000 	ldrh.w	r3, [r9]
 800f78a:	065b      	lsls	r3, r3, #25
 800f78c:	d5fb      	bpl.n	800f786 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x96>
        USART_SendData(iostream, data[i]);
 800f78e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f792:	6860      	ldr	r0, [r4, #4]
 800f794:	f7f3 fc61 	bl	800305a <USART_SendData>
 800f798:	e7f1      	b.n	800f77e <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0x8e>
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
      level(0),
      msg("")
 800f79a:	4b09      	ldr	r3, [pc, #36]	; (800f7c0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0xd0>)
    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
        l.msg = (char*)msg;
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800f79c:	aa01      	add	r2, sp, #4
 800f79e:	9301      	str	r3, [sp, #4]
       */

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
 800f7a0:	2303      	movs	r3, #3
 800f7a2:	f88d 3008 	strb.w	r3, [sp, #8]
        l.msg = (char*)msg;
 800f7a6:	4b07      	ldr	r3, [pc, #28]	; (800f7c4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::publish(int, ros::Msg const*)+0xd4>)
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800f7a8:	2107      	movs	r1, #7

    private:
      void log(char byte, const char * msg){
        rosserial_msgs::Log l;
        l.level= byte;
        l.msg = (char*)msg;
 800f7aa:	9303      	str	r3, [sp, #12]
        publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4798      	blx	r3
        if( l <= OUTPUT_SIZE ){
          hardware_.write(message_out, l);
          return l;
        }else{
          logerror("Message from device dropped: message larger than buffer.");
          return -1;
 800f7b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        }
      }
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	b005      	add	sp, #20
 800f7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7c0:	080151e0 	.word	0x080151e0
 800f7c4:	08015489 	.word	0x08015489
 800f7c8:	40013800 	.word	0x40013800

0800f7cc <ros::Msg::serializeAvrFloat64(unsigned char*, float)>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f7cc:	b538      	push	{r3, r4, r5, lr}
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800f7ce:	f3c1 53c7 	ubfx	r3, r1, #23, #8
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f7d2:	4605      	mov	r5, r0
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
 800f7d4:	460a      	mov	r2, r1
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 800f7d6:	4608      	mov	r0, r1
  {
    const int32_t* val = (int32_t*) &f;
    int32_t exp = ((*val >> 23) & 255);
    if (exp != 0)
 800f7d8:	b10b      	cbz	r3, 800f7de <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x12>
    {
      exp += 1023 - 127;
 800f7da:	f503 7360 	add.w	r3, r3, #896	; 0x380
    }

    int32_t sig = *val;
    *(outbuffer++) = 0;
 800f7de:	2100      	movs	r1, #0
 800f7e0:	7029      	strb	r1, [r5, #0]
    *(outbuffer++) = 0;
 800f7e2:	7069      	strb	r1, [r5, #1]
    *(outbuffer++) = 0;
 800f7e4:	70a9      	strb	r1, [r5, #2]
    *(outbuffer++) = (sig << 5) & 0xff;
 800f7e6:	0151      	lsls	r1, r2, #5
 800f7e8:	70e9      	strb	r1, [r5, #3]
    *(outbuffer++) = (sig >> 3) & 0xff;
 800f7ea:	10d1      	asrs	r1, r2, #3
 800f7ec:	7129      	strb	r1, [r5, #4]
    *(outbuffer++) = (sig >> 11) & 0xff;
 800f7ee:	12d1      	asrs	r1, r2, #11
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800f7f0:	f3c2 42c3 	ubfx	r2, r2, #19, #4
 800f7f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    *(outbuffer++) = 0;
    *(outbuffer++) = 0;
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
 800f7f8:	7169      	strb	r1, [r5, #5]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 800f7fa:	71aa      	strb	r2, [r5, #6]
    *(outbuffer++) = (exp >> 4) & 0x7F;

    // Mark negative bit as necessary.
    if (f < 0)
 800f7fc:	2100      	movs	r1, #0
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800f7fe:	f3c3 1407 	ubfx	r4, r3, #4, #8

    // Mark negative bit as necessary.
    if (f < 0)
 800f802:	f7f6 f9bb 	bl	8005b7c <__aeabi_fcmplt>
 800f806:	b908      	cbnz	r0, 800f80c <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x40>
    *(outbuffer++) = 0;
    *(outbuffer++) = (sig << 5) & 0xff;
    *(outbuffer++) = (sig >> 3) & 0xff;
    *(outbuffer++) = (sig >> 11) & 0xff;
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
    *(outbuffer++) = (exp >> 4) & 0x7F;
 800f808:	71ec      	strb	r4, [r5, #7]
 800f80a:	e002      	b.n	800f812 <ros::Msg::serializeAvrFloat64(unsigned char*, float)+0x46>

    // Mark negative bit as necessary.
    if (f < 0)
    {
      *(outbuffer - 1) |= 0x80;
 800f80c:	f064 037f 	orn	r3, r4, #127	; 0x7f
 800f810:	71eb      	strb	r3, [r5, #7]
    }

    return 8;
  }
 800f812:	2008      	movs	r0, #8
 800f814:	bd38      	pop	{r3, r4, r5, pc}

0800f816 <roberto_msgs::MotorState::serialize(unsigned char*) const>:
      acceleration(0),
      mode(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f816:	b570      	push	{r4, r5, r6, lr}
 800f818:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f81a:	3004      	adds	r0, #4
      acceleration(0),
      mode(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
 800f81c:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f81e:	f7ff fc5e 	bl	800f0de <std_msgs::Header::serialize(unsigned char*) const>
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 800f822:	69a9      	ldr	r1, [r5, #24]
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      offset += this->header.serialize(outbuffer + offset);
 800f824:	4604      	mov	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_angle);
 800f826:	1830      	adds	r0, r6, r0
 800f828:	f7ff ffd0 	bl	800f7cc <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f82c:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->heading_velocity);
 800f82e:	69e9      	ldr	r1, [r5, #28]
 800f830:	1930      	adds	r0, r6, r4
 800f832:	f7ff ffcb 	bl	800f7cc <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f836:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 800f838:	6a29      	ldr	r1, [r5, #32]
 800f83a:	1930      	adds	r0, r6, r4
 800f83c:	f7ff ffc6 	bl	800f7cc <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
 800f840:	4404      	add	r4, r0
      offset += serializeAvrFloat64(outbuffer + offset, this->acceleration);
 800f842:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800f844:	1930      	adds	r0, r6, r4
 800f846:	f7ff ffc1 	bl	800f7cc <ros::Msg::serializeAvrFloat64(unsigned char*, float)>
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
 800f84a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800f84e:	4420      	add	r0, r4
 800f850:	5433      	strb	r3, [r6, r0]
      offset += sizeof(this->mode);
      return offset;
    }
 800f852:	3001      	adds	r0, #1
 800f854:	bd70      	pop	{r4, r5, r6, pc}

0800f856 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800f856:	b530      	push	{r4, r5, lr}
  {
    uint32_t* val = (uint32_t*)f;
    inbuffer += 3;

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 800f858:	78c3      	ldrb	r3, [r0, #3]
 800f85a:	095b      	lsrs	r3, r3, #5
 800f85c:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 800f85e:	7902      	ldrb	r2, [r0, #4]
 800f860:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f864:	600b      	str	r3, [r1, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 800f866:	7942      	ldrb	r2, [r0, #5]
 800f868:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
 800f86c:	600a      	str	r2, [r1, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 800f86e:	7983      	ldrb	r3, [r0, #6]
 800f870:	04db      	lsls	r3, r3, #19
 800f872:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 800f876:	4313      	orrs	r3, r2
 800f878:	600b      	str	r3, [r1, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800f87a:	79c4      	ldrb	r4, [r0, #7]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0)>>4;
 800f87c:	7985      	ldrb	r5, [r0, #6]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 800f87e:	0124      	lsls	r4, r4, #4
 800f880:	f404 62fe 	and.w	r2, r4, #2032	; 0x7f0
    if (exp != 0)
 800f884:	ea52 1215 	orrs.w	r2, r2, r5, lsr #4
    {
      *val |= ((exp) - 1023 + 127) << 23;
 800f888:	bf1e      	ittt	ne
 800f88a:	f5a2 7260 	subne.w	r2, r2, #896	; 0x380
 800f88e:	ea43 53c2 	orrne.w	r3, r3, r2, lsl #23
 800f892:	600b      	strne	r3, [r1, #0]
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800f894:	79c3      	ldrb	r3, [r0, #7]

    return 8;
  }
 800f896:	2008      	movs	r0, #8
    {
      *val |= ((exp) - 1023 + 127) << 23;
    }  

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 800f898:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800f89c:	680b      	ldr	r3, [r1, #0]
 800f89e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f8a2:	600b      	str	r3, [r1, #0]

    return 8;
  }
 800f8a4:	bd30      	pop	{r4, r5, pc}

0800f8a6 <roberto_msgs::MotorState::deserialize(unsigned char*)>:

    virtual int deserialize(unsigned char *inbuffer)
 800f8a6:	b570      	push	{r4, r5, r6, lr}
 800f8a8:	4605      	mov	r5, r0
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f8aa:	3004      	adds	r0, #4
      *(outbuffer + offset + 0) = (this->mode >> (8 * 0)) & 0xFF;
      offset += sizeof(this->mode);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
 800f8ac:	460e      	mov	r6, r1
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f8ae:	f7ff fd59 	bl	800f364 <std_msgs::Header::deserialize(unsigned char*)>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800f8b2:	f105 0118 	add.w	r1, r5, #24
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      offset += this->header.deserialize(inbuffer + offset);
 800f8b6:	4604      	mov	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
 800f8b8:	1830      	adds	r0, r6, r0
 800f8ba:	f7ff ffcc 	bl	800f856 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f8be:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
 800f8c0:	f105 011c 	add.w	r1, r5, #28
 800f8c4:	1930      	adds	r0, r6, r4
 800f8c6:	f7ff ffc6 	bl	800f856 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f8ca:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 800f8cc:	f105 0120 	add.w	r1, r5, #32
 800f8d0:	1930      	adds	r0, r6, r4
 800f8d2:	f7ff ffc0 	bl	800f856 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
 800f8d6:	4404      	add	r4, r0
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
 800f8d8:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800f8dc:	1930      	adds	r0, r6, r4
 800f8de:	f7ff ffba 	bl	800f856 <ros::Msg::deserializeAvrFloat64(unsigned char const*, float*)>
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 800f8e2:	4420      	add	r0, r4
 800f8e4:	5c33      	ldrb	r3, [r6, r0]
      offset += sizeof(this->mode);
     return offset;
    }
 800f8e6:	3001      	adds	r0, #1
      offset += this->header.deserialize(inbuffer + offset);
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_angle));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->heading_velocity));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->acceleration));
      this->mode =  ((uint8_t) (*(inbuffer + offset)));
 800f8e8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
      offset += sizeof(this->mode);
     return offset;
    }
 800f8ec:	bd70      	pop	{r4, r5, r6, pc}

0800f8ee <ros::Subscriber<roberto_msgs::MotorState>::callback(unsigned char*)>:
        endpoint_(endpoint)
      {
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
 800f8ee:	b570      	push	{r4, r5, r6, lr}
 800f8f0:	4605      	mov	r5, r0
        msg.deserialize(data);
 800f8f2:	f100 040c 	add.w	r4, r0, #12
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f7ff ffd5 	bl	800f8a6 <roberto_msgs::MotorState::deserialize(unsigned char*)>
        this->cb_(msg);
 800f8fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f8fe:	4620      	mov	r0, r4
      }
 800f900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        topic_ = topic_name;
      };

      virtual void callback(unsigned char* data){
        msg.deserialize(data);
        this->cb_(msg);
 800f904:	4718      	bx	r3

0800f906 <ros::Publisher::publish(ros::Msg const*)>:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};

      int publish( const Msg * msg ) { return nh_->publish(id_, msg); };
 800f906:	68c3      	ldr	r3, [r0, #12]
 800f908:	b410      	push	{r4}
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	6814      	ldr	r4, [r2, #0]
 800f90e:	460a      	mov	r2, r1
 800f910:	6881      	ldr	r1, [r0, #8]
 800f912:	4618      	mov	r0, r3
 800f914:	4623      	mov	r3, r4
 800f916:	bc10      	pop	{r4}
 800f918:	4718      	bx	r3
	...

0800f91c <ArduinoHardware::init()>:
      this->baud_= baud;
    }
  
    int getBaud(){return baud_;}

    void init(){
 800f91c:	b570      	push	{r4, r5, r6, lr}
 800f91e:	4604      	mov	r4, r0
 800f920:	b086      	sub	sp, #24
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f922:	4d21      	ldr	r5, [pc, #132]	; (800f9a8 <ArduinoHardware::init()+0x8c>)
      USART_InitTypeDef usart1_init_struct;
      /* Bit configuration structure for GPIOA PIN9 and PIN10 */
      GPIO_InitTypeDef gpioa_init_struct;

      /* Enalbe clock for USART1, AFIO and GPIOA */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 800f924:	2101      	movs	r1, #1
 800f926:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f92a:	f7f3 f887 	bl	8002a3c <RCC_APB2PeriphClockCmd>
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
 800f92e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f932:	f8ad 3004 	strh.w	r3, [sp, #4]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800f936:	2603      	movs	r6, #3
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800f938:	2318      	movs	r3, #24
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f93a:	a901      	add	r1, sp, #4
 800f93c:	4628      	mov	r0, r5
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
 800f93e:	f88d 3007 	strb.w	r3, [sp, #7]
      /* Enalbe clock for USART1, AFIO and GPIOA */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
                            
      /* GPIOA PIN9 alternative function Tx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_9;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800f942:	f88d 6006 	strb.w	r6, [sp, #6]
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f946:	f7f2 fc1a 	bl	800217e <GPIO_Init>
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
 800f94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f94e:	f8ad 3004 	strh.w	r3, [sp, #4]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800f952:	2304      	movs	r3, #4
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f954:	eb0d 0103 	add.w	r1, sp, r3
 800f958:	4628      	mov	r0, r5
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800f95a:	f88d 3007 	strb.w	r3, [sp, #7]
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_AF_PP;
      GPIO_Init(GPIOA, &gpioa_init_struct);
      /* GPIOA PIN9 alternative function Rx */
      gpioa_init_struct.GPIO_Pin = GPIO_Pin_10;
      gpioa_init_struct.GPIO_Speed = GPIO_Speed_50MHz;
 800f95e:	f88d 6006 	strb.w	r6, [sp, #6]
      gpioa_init_struct.GPIO_Mode = GPIO_Mode_IN_FLOATING;
      GPIO_Init(GPIOA, &gpioa_init_struct);
 800f962:	f7f2 fc0c 	bl	800217e <GPIO_Init>

      /* Enable USART1 */
      USART_Cmd(iostream, ENABLE);  
 800f966:	6820      	ldr	r0, [r4, #0]
 800f968:	2101      	movs	r1, #1
 800f96a:	f7f3 fb10 	bl	8002f8e <USART_Cmd>
      /* Baud rate 230400, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
 800f96e:	6863      	ldr	r3, [r4, #4]
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800f970:	220c      	movs	r2, #12
      /* Enable USART1 */
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 230400, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
 800f972:	9302      	str	r3, [sp, #8]
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800f974:	a902      	add	r1, sp, #8
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 230400, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 800f976:	2300      	movs	r3, #0
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800f978:	6820      	ldr	r0, [r4, #0]
      USART_Cmd(iostream, ENABLE);  
      /* Baud rate 230400, 8-bit data, One stop bit
      * No parity, Do both Rx and Tx, No HW flow control
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
 800f97a:	f8ad 300c 	strh.w	r3, [sp, #12]
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
 800f97e:	f8ad 300e 	strh.w	r3, [sp, #14]
      usart1_init_struct.USART_Parity = USART_Parity_No ;
 800f982:	f8ad 3010 	strh.w	r3, [sp, #16]
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800f986:	f8ad 3014 	strh.w	r3, [sp, #20]
      */
      usart1_init_struct.USART_BaudRate = baud_;   
      usart1_init_struct.USART_WordLength = USART_WordLength_8b;  
      usart1_init_struct.USART_StopBits = USART_StopBits_1;   
      usart1_init_struct.USART_Parity = USART_Parity_No ;
      usart1_init_struct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800f98a:	f8ad 2012 	strh.w	r2, [sp, #18]
      usart1_init_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
      /* Configure USART1 */
      USART_Init(iostream, &usart1_init_struct);
 800f98e:	f7f3 fa89 	bl	8002ea4 <USART_Init>
      /* Enable RXNE interrupt */
      USART_ITConfig(iostream, USART_IT_RXNE, ENABLE);
 800f992:	2201      	movs	r2, #1
 800f994:	f240 5125 	movw	r1, #1317	; 0x525
 800f998:	6820      	ldr	r0, [r4, #0]
 800f99a:	f7f3 fb04 	bl	8002fa6 <USART_ITConfig>
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800f99e:	4b03      	ldr	r3, [pc, #12]	; (800f9ac <ArduinoHardware::init()+0x90>)
 800f9a0:	2220      	movs	r2, #32
 800f9a2:	605a      	str	r2, [r3, #4]
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }
 800f9a4:	b006      	add	sp, #24
 800f9a6:	bd70      	pop	{r4, r5, r6, pc}
 800f9a8:	40010800 	.word	0x40010800
 800f9ac:	e000e100 	.word	0xe000e100

0800f9b0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::requestSyncTime()>:

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 800f9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  {
    public:
      ros::Time data;

    Time():
      data()
 800f9b2:	4b08      	ldr	r3, [pc, #32]	; (800f9d4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::requestSyncTime()+0x24>)
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 800f9b4:	aa01      	add	r2, sp, #4
 800f9b6:	9301      	str	r3, [sp, #4]
  class Time
  {
    public:
      uint32_t sec, nsec;

      Time() : sec(0), nsec(0) {}
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	9302      	str	r3, [sp, #8]
 800f9bc:	9303      	str	r3, [sp, #12]
 800f9be:	6803      	ldr	r3, [r0, #0]
 800f9c0:	210a      	movs	r1, #10
 800f9c2:	681b      	ldr	r3, [r3, #0]

      /********************************************************************
       * Time functions
       */

      void requestSyncTime()
 800f9c4:	4604      	mov	r4, r0
      {
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
 800f9c6:	4798      	blx	r3
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 800f9c8:	f7f0 fe32 	bl	8000630 <millis>
        rt_time = hardware_.time();
 800f9cc:	60e0      	str	r0, [r4, #12]
      }
 800f9ce:	b004      	add	sp, #16
 800f9d0:	bd10      	pop	{r4, pc}
 800f9d2:	bf00      	nop
 800f9d4:	080151b0 	.word	0x080151b0

0800f9d8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::negotiateTopics()>:
          }
        }
        return false;
      }

      void negotiateTopics()
 800f9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9dc:	4604      	mov	r4, r0
    TopicInfo():
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800f9de:	4b2b      	ldr	r3, [pc, #172]	; (800fa8c <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::negotiateTopics()+0xb4>)
 800f9e0:	b086      	sub	sp, #24
 800f9e2:	9300      	str	r3, [sp, #0]
 800f9e4:	4b2a      	ldr	r3, [pc, #168]	; (800fa90 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::negotiateTopics()+0xb8>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f9ec:	9302      	str	r3, [sp, #8]
 800f9ee:	9303      	str	r3, [sp, #12]
 800f9f0:	9304      	str	r3, [sp, #16]
 800f9f2:	9205      	str	r2, [sp, #20]
 800f9f4:	f600 0614 	addw	r6, r0, #2068	; 0x814
 800f9f8:	f600 0578 	addw	r5, r0, #2168	; 0x878
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
 800f9fc:	f44f 6780 	mov.w	r7, #1024	; 0x400
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
 800fa00:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800fa04:	b1bb      	cbz	r3, 800fa36 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::negotiateTopics()+0x5e>
          {
            ti.topic_id = publishers[i]->id_;
 800fa06:	689a      	ldr	r2, [r3, #8]
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fa08:	6858      	ldr	r0, [r3, #4]
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
 800fa0a:	f8ad 2004 	strh.w	r2, [sp, #4]
            ti.topic_name = (char *) publishers[i]->topic_;
 800fa0e:	681a      	ldr	r2, [r3, #0]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fa10:	6803      	ldr	r3, [r0, #0]
        for(i = 0; i < MAX_PUBLISHERS; i++)
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
 800fa12:	9202      	str	r2, [sp, #8]
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	4798      	blx	r3
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fa18:	6833      	ldr	r3, [r6, #0]
        {
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
 800fa1a:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fa1c:	6858      	ldr	r0, [r3, #4]
 800fa1e:	6803      	ldr	r3, [r0, #0]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	4798      	blx	r3
 800fa24:	6831      	ldr	r1, [r6, #0]
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
 800fa26:	6823      	ldr	r3, [r4, #0]
          if(publishers[i] != 0) // non-empty slot
          {
            ti.topic_id = publishers[i]->id_;
            ti.topic_name = (char *) publishers[i]->topic_;
            ti.message_type = (char *) publishers[i]->msg_->getType();
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fa28:	9004      	str	r0, [sp, #16]
            ti.buffer_size = OUTPUT_SIZE;
 800fa2a:	9705      	str	r7, [sp, #20]
            publish( publishers[i]->getEndpointType(), &ti );
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	466a      	mov	r2, sp
 800fa30:	6909      	ldr	r1, [r1, #16]
 800fa32:	4620      	mov	r0, r4
 800fa34:	4798      	blx	r3

      void negotiateTopics()
      {
        rosserial_msgs::TopicInfo ti;
        int i;
        for(i = 0; i < MAX_PUBLISHERS; i++)
 800fa36:	42ae      	cmp	r6, r5
 800fa38:	d1e2      	bne.n	800fa00 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::negotiateTopics()+0x28>
 800fa3a:	f604 06dc 	addw	r6, r4, #2268	; 0x8dc
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 800fa3e:	f44f 6780 	mov.w	r7, #1024	; 0x400
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
        {
          if(subscribers[i] != 0) // non-empty slot
 800fa42:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800fa46:	b1c8      	cbz	r0, 800fa7c <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::negotiateTopics()+0xa4>
          {
            ti.topic_id = subscribers[i]->id_;
 800fa48:	6843      	ldr	r3, [r0, #4]
 800fa4a:	f8ad 3004 	strh.w	r3, [sp, #4]
            ti.topic_name = (char *) subscribers[i]->topic_;
 800fa4e:	6883      	ldr	r3, [r0, #8]
 800fa50:	9302      	str	r3, [sp, #8]
            ti.message_type = (char *) subscribers[i]->getMsgType();
 800fa52:	6803      	ldr	r3, [r0, #0]
 800fa54:	689b      	ldr	r3, [r3, #8]
 800fa56:	4798      	blx	r3
 800fa58:	9003      	str	r0, [sp, #12]
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800fa5a:	6828      	ldr	r0, [r5, #0]
 800fa5c:	6803      	ldr	r3, [r0, #0]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	4798      	blx	r3
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800fa62:	6823      	ldr	r3, [r4, #0]
          if(subscribers[i] != 0) // non-empty slot
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800fa64:	9004      	str	r0, [sp, #16]
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
 800fa66:	6828      	ldr	r0, [r5, #0]
 800fa68:	f8d3 8000 	ldr.w	r8, [r3]
 800fa6c:	6803      	ldr	r3, [r0, #0]
          {
            ti.topic_id = subscribers[i]->id_;
            ti.topic_name = (char *) subscribers[i]->topic_;
            ti.message_type = (char *) subscribers[i]->getMsgType();
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
 800fa6e:	9705      	str	r7, [sp, #20]
            publish( subscribers[i]->getEndpointType(), &ti );
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	4798      	blx	r3
 800fa74:	466a      	mov	r2, sp
 800fa76:	4601      	mov	r1, r0
 800fa78:	4620      	mov	r0, r4
 800fa7a:	47c0      	blx	r8
            ti.md5sum = (char *) publishers[i]->msg_->getMD5();
            ti.buffer_size = OUTPUT_SIZE;
            publish( publishers[i]->getEndpointType(), &ti );
          }
        }
        for(i = 0; i < MAX_SUBSCRIBERS; i++)
 800fa7c:	42ae      	cmp	r6, r5
 800fa7e:	d1e0      	bne.n	800fa42 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::negotiateTopics()+0x6a>
            ti.md5sum = (char *) subscribers[i]->getMsgMD5();
            ti.buffer_size = INPUT_SIZE;
            publish( subscribers[i]->getEndpointType(), &ti );
          }
        }
        configured_ = true;
 800fa80:	2301      	movs	r3, #1
 800fa82:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
      }
 800fa86:	b006      	add	sp, #24
 800fa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa8c:	080151c8 	.word	0x080151c8
 800fa90:	080157ad 	.word	0x080157ad

0800fa94 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)>:
        std_msgs::Time t;
        publish(TopicInfo::ID_TIME, &t);
        rt_time = hardware_.time();
      }

      void syncTime(uint8_t * data)
 800fa94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fa96:	4b1c      	ldr	r3, [pc, #112]	; (800fb08 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)+0x74>)
 800fa98:	4604      	mov	r4, r0
 800fa9a:	9301      	str	r3, [sp, #4]
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	9302      	str	r3, [sp, #8]
 800faa0:	9303      	str	r3, [sp, #12]
 800faa2:	460d      	mov	r5, r1
 800faa4:	f7f0 fdc4 	bl	8000630 <millis>
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 800faa8:	68e2      	ldr	r2, [r4, #12]

        t.deserialize(data);
 800faaa:	4629      	mov	r1, r5
      }

      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;
 800faac:	1a86      	subs	r6, r0, r2

        t.deserialize(data);
        t.data.sec += offset/1000;
 800faae:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
      void syncTime(uint8_t * data)
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
 800fab2:	a801      	add	r0, sp, #4
 800fab4:	f7ff fa4d 	bl	800ef52 <std_msgs::Time::deserialize(unsigned char*)>
        t.data.sec += offset/1000;
 800fab8:	fbb6 f2f5 	udiv	r2, r6, r5
 800fabc:	9b02      	ldr	r3, [sp, #8]
 800fabe:	4413      	add	r3, r2
        t.data.nsec += (offset%1000)*1000000UL;
 800fac0:	fb05 6212 	mls	r2, r5, r2, r6
      {
        std_msgs::Time t;
        uint32_t offset = hardware_.time() - rt_time;

        t.deserialize(data);
        t.data.sec += offset/1000;
 800fac4:	9302      	str	r3, [sp, #8]
        t.data.nsec += (offset%1000)*1000000UL;
 800fac6:	4e11      	ldr	r6, [pc, #68]	; (800fb0c <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)+0x78>)
 800fac8:	9b03      	ldr	r3, [sp, #12]
 800faca:	fb06 3202 	mla	r2, r6, r2, r3
 800face:	9203      	str	r2, [sp, #12]
 800fad0:	f7f0 fdae 	bl	8000630 <millis>
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 800fad4:	fbb0 f3f5 	udiv	r3, r0, r5
 800fad8:	9a02      	ldr	r2, [sp, #8]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800fada:	9903      	ldr	r1, [sp, #12]
      }

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
 800fadc:	3a01      	subs	r2, #1
 800fade:	1ad2      	subs	r2, r2, r3
 800fae0:	6122      	str	r2, [r4, #16]
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800fae2:	4a0b      	ldr	r2, [pc, #44]	; (800fb10 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)+0x7c>)
 800fae4:	fb05 0013 	mls	r0, r5, r3, r0
 800fae8:	440a      	add	r2, r1
 800faea:	4621      	mov	r1, r4
 800faec:	fb06 2310 	mls	r3, r6, r0, r2
        normalizeSecNSec(sec_offset, nsec_offset);
 800faf0:	f104 0010 	add.w	r0, r4, #16

      void setNow( Time & new_now )
      {
        uint32_t ms = hardware_.time();
        sec_offset = new_now.sec - ms/1000 - 1;
        nsec_offset = new_now.nsec - (ms%1000)*1000000UL + 1000000000UL;
 800faf4:	f841 3f14 	str.w	r3, [r1, #20]!
        normalizeSecNSec(sec_offset, nsec_offset);
 800faf8:	f7f5 f918 	bl	8004d2c <ros::normalizeSecNSec(unsigned long&, unsigned long&)>
 800fafc:	f7f0 fd98 	bl	8000630 <millis>
        t.deserialize(data);
        t.data.sec += offset/1000;
        t.data.nsec += (offset%1000)*1000000UL;

        this->setNow(t.data);
        last_sync_receive_time = hardware_.time();
 800fb00:	f8c4 08fc 	str.w	r0, [r4, #2300]	; 0x8fc
      }
 800fb04:	b004      	add	sp, #16
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
 800fb08:	080151b0 	.word	0x080151b0
 800fb0c:	000f4240 	.word	0x000f4240
 800fb10:	3b9aca00 	.word	0x3b9aca00

0800fb14 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()>:
      /* This function goes in your loop() function, it handles
       *  serial input and callbacks for subscribers.
       */


      virtual int spinOnce(){
 800fb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb18:	4604      	mov	r4, r0
 800fb1a:	f7f0 fd89 	bl	8000630 <millis>

        /* restart if timed out */
        uint32_t c_time = hardware_.time();
        if( (c_time - last_sync_receive_time) > (SYNC_SECONDS*2200) ){
 800fb1e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800fb22:	f8d4 38fc 	ldr.w	r3, [r4, #2300]	; 0x8fc
 800fb26:	4606      	mov	r6, r0
 800fb28:	1ac3      	subs	r3, r0, r3
 800fb2a:	4293      	cmp	r3, r2
            configured_ = false;
 800fb2c:	bf84      	itt	hi
 800fb2e:	2300      	movhi	r3, #0
 800fb30:	f884 38f4 	strbhi.w	r3, [r4, #2292]	; 0x8f4
         }

        /* reset if message has timed out */
        if ( mode_ != MODE_FIRST_FF){
 800fb34:	f8d4 38e0 	ldr.w	r3, [r4, #2272]	; 0x8e0
 800fb38:	b133      	cbz	r3, 800fb48 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x34>
          if (c_time > last_msg_timeout_time){
 800fb3a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800fb3e:	4283      	cmp	r3, r0
            mode_ = MODE_FIRST_FF;
 800fb40:	bf3c      	itt	cc
 800fb42:	2300      	movcc	r3, #0
 800fb44:	f8c4 38e0 	strcc.w	r3, [r4, #2272]	; 0x8e0
      /* Enable USART1 global interrupt */
      NVIC_EnableIRQ(USART1_IRQn);
    }

    int read(){
      if(USART_CNTIN == USART_CNTOUT){
 800fb48:	4f74      	ldr	r7, [pc, #464]	; (800fd1c <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x208>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800fb4a:	f04f 0800 	mov.w	r8, #0
                  param_recieved= true;
              }else if(topic_ == TopicInfo::ID_TX_STOP){
                  configured_ = false;
              }else{
                if(subscribers[topic_-100])
                  subscribers[topic_-100]->callback( message_in );
 800fb4e:	f104 0918 	add.w	r9, r4, #24
 800fb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	429a      	cmp	r2, r3
 800fb58:	f000 80cc 	beq.w	800fcf4 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x1e0>
        return -1;
      }
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800fb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fb5e:	f8d4 58e0 	ldr.w	r5, [r4, #2272]	; 0x8e0
 800fb62:	443b      	add	r3, r7
 800fb64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800fb68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    int read(){
      if(USART_CNTIN == USART_CNTOUT){
        return -1;
      }
      
      int returnVal = USART_FIFO[USART_CNTOUT];
 800fb6a:	b2db      	uxtb	r3, r3
      USART_CNTOUT = (USART_CNTOUT + 1) % BUFFER_SIZE;
 800fb6c:	3201      	adds	r2, #1
 800fb6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fb72:	62fa      	str	r2, [r7, #44]	; 0x2c
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 800fb74:	f8d4 28f0 	ldr.w	r2, [r4, #2288]	; 0x8f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fb78:	2d07      	cmp	r5, #7
        while( true )
        {
          int data = hardware_.read();
          if( data < 0 )
            break;
          checksum_ += data;
 800fb7a:	441a      	add	r2, r3
 800fb7c:	f8c4 28f0 	str.w	r2, [r4, #2288]	; 0x8f0
          if( mode_ == MODE_MESSAGE ){        /* message data being recieved */
 800fb80:	d10f      	bne.n	800fba2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x8e>
            message_in[index_++] = data;
 800fb82:	f8d4 28ec 	ldr.w	r2, [r4, #2284]	; 0x8ec
 800fb86:	1c51      	adds	r1, r2, #1
 800fb88:	4422      	add	r2, r4
 800fb8a:	f8c4 18ec 	str.w	r1, [r4, #2284]	; 0x8ec
 800fb8e:	7613      	strb	r3, [r2, #24]
            bytes_--;
 800fb90:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 800fb94:	3b01      	subs	r3, #1
 800fb96:	f8c4 38e4 	str.w	r3, [r4, #2276]	; 0x8e4
            if(bytes_ == 0)                  /* is message complete? if so, checksum */
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d1d9      	bne.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
              mode_ = MODE_MSG_CHECKSUM;
 800fb9e:	2308      	movs	r3, #8
 800fba0:	e01a      	b.n	800fbd8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0xc4>
          }else if( mode_ == MODE_FIRST_FF ){
 800fba2:	b9a5      	cbnz	r5, 800fbce <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0xba>
            if(data == 0xff){
 800fba4:	2bff      	cmp	r3, #255	; 0xff
 800fba6:	d107      	bne.n	800fbb8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0xa4>
              mode_++;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
              last_msg_timeout_time = c_time + MSG_TIMEOUT;
 800fbae:	f106 0314 	add.w	r3, r6, #20
 800fbb2:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800fbb6:	e7cc      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
        USART_SendData(iostream, data[i]);
      }
    }

    uint32_t time(){
      return millis();
 800fbb8:	f7f0 fd3a 	bl	8000630 <millis>
            }
            else if( hardware_.time() - c_time > (SYNC_SECONDS)){
 800fbbc:	1b80      	subs	r0, r0, r6
 800fbbe:	2805      	cmp	r0, #5
 800fbc0:	d9c7      	bls.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
              /* We have been stuck in spinOnce too long, return error */
              configured_=false;
 800fbc2:	f884 58f4 	strb.w	r5, [r4, #2292]	; 0x8f4
              return -2;
 800fbc6:	f06f 0001 	mvn.w	r0, #1
 800fbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
 800fbce:	2d01      	cmp	r5, #1
 800fbd0:	d10f      	bne.n	800fbf2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0xde>
            if(data == PROTOCOL_VER){
 800fbd2:	2bfe      	cmp	r3, #254	; 0xfe
 800fbd4:	d103      	bne.n	800fbde <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0xca>
              mode_++;
 800fbd6:	2302      	movs	r3, #2
 800fbd8:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
 800fbdc:	e7b9      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
            }else{
              mode_ = MODE_FIRST_FF;
              if (configured_ == false)
 800fbde:	f894 38f4 	ldrb.w	r3, [r4, #2292]	; 0x8f4
            }
          }else if( mode_ == MODE_PROTOCOL_VER ){
            if(data == PROTOCOL_VER){
              mode_++;
            }else{
              mode_ = MODE_FIRST_FF;
 800fbe2:	f8c4 88e0 	str.w	r8, [r4, #2272]	; 0x8e0
              if (configured_ == false)
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d1b3      	bne.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
                  requestSyncTime(); 	/* send a msg back showing our protocol version */
 800fbea:	4620      	mov	r0, r4
 800fbec:	f7ff fee0 	bl	800f9b0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::requestSyncTime()>
 800fbf0:	e7af      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
            }
	  }else if( mode_ == MODE_SIZE_L ){   /* bottom half of message size */
 800fbf2:	2d02      	cmp	r5, #2
 800fbf4:	d105      	bne.n	800fc02 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0xee>
            bytes_ = data;
 800fbf6:	f8c4 38e4 	str.w	r3, [r4, #2276]	; 0x8e4
            index_ = 0;
 800fbfa:	f8c4 88ec 	str.w	r8, [r4, #2284]	; 0x8ec
            mode_++;
 800fbfe:	2203      	movs	r2, #3
 800fc00:	e020      	b.n	800fc44 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x130>
            checksum_ = data;               /* first byte for calculating size checksum */
          }else if( mode_ == MODE_SIZE_H ){   /* top half of message size */
 800fc02:	2d03      	cmp	r5, #3
 800fc04:	d107      	bne.n	800fc16 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x102>
            bytes_ += data<<8;
 800fc06:	f8d4 28e4 	ldr.w	r2, [r4, #2276]	; 0x8e4
 800fc0a:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800fc0e:	f8c4 38e4 	str.w	r3, [r4, #2276]	; 0x8e4
	    mode_++;
 800fc12:	2304      	movs	r3, #4
 800fc14:	e7e0      	b.n	800fbd8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0xc4>
          }else if( mode_ == MODE_SIZE_CHECKSUM ){
 800fc16:	2d04      	cmp	r5, #4
 800fc18:	d10f      	bne.n	800fc3a <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x126>
            if( (checksum_%256) == 255)
 800fc1a:	4b41      	ldr	r3, [pc, #260]	; (800fd20 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x20c>)
 800fc1c:	4013      	ands	r3, r2
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	bfbe      	ittt	lt
 800fc22:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800fc26:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800fc2a:	3301      	addlt	r3, #1
 800fc2c:	2bff      	cmp	r3, #255	; 0xff
 800fc2e:	d101      	bne.n	800fc34 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x120>
	      mode_++;
 800fc30:	2305      	movs	r3, #5
 800fc32:	e7d1      	b.n	800fbd8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0xc4>
	    else
	      mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800fc34:	f8c4 88e0 	str.w	r8, [r4, #2272]	; 0x8e0
 800fc38:	e78b      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
	  }else if( mode_ == MODE_TOPIC_L ){  /* bottom half of topic id */
 800fc3a:	2d05      	cmp	r5, #5
 800fc3c:	d107      	bne.n	800fc4e <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x13a>
            topic_ = data;
 800fc3e:	f8c4 38e8 	str.w	r3, [r4, #2280]	; 0x8e8
            mode_++;
 800fc42:	2206      	movs	r2, #6
 800fc44:	f8c4 28e0 	str.w	r2, [r4, #2272]	; 0x8e0
            checksum_ = data;               /* first byte included in checksum */
 800fc48:	f8c4 38f0 	str.w	r3, [r4, #2288]	; 0x8f0
 800fc4c:	e781      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
          }else if( mode_ == MODE_TOPIC_H ){  /* top half of topic id */
 800fc4e:	2d06      	cmp	r5, #6
 800fc50:	d10b      	bne.n	800fc6a <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x156>
            topic_ += data<<8;
 800fc52:	f8d4 28e8 	ldr.w	r2, [r4, #2280]	; 0x8e8
 800fc56:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 800fc5a:	f8c4 38e8 	str.w	r3, [r4, #2280]	; 0x8e8
            mode_ = MODE_MESSAGE;
 800fc5e:	2307      	movs	r3, #7
 800fc60:	f8c4 38e0 	str.w	r3, [r4, #2272]	; 0x8e0
            if(bytes_ == 0)
 800fc64:	f8d4 38e4 	ldr.w	r3, [r4, #2276]	; 0x8e4
 800fc68:	e797      	b.n	800fb9a <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x86>
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
 800fc6a:	2d08      	cmp	r5, #8
 800fc6c:	f47f af71 	bne.w	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
            mode_ = MODE_FIRST_FF;
            if( (checksum_%256) == 255){
 800fc70:	4b2b      	ldr	r3, [pc, #172]	; (800fd20 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x20c>)
            topic_ += data<<8;
            mode_ = MODE_MESSAGE;
            if(bytes_ == 0)
              mode_ = MODE_MSG_CHECKSUM;
          }else if( mode_ == MODE_MSG_CHECKSUM ){ /* do checksum */
            mode_ = MODE_FIRST_FF;
 800fc72:	f8c4 88e0 	str.w	r8, [r4, #2272]	; 0x8e0
            if( (checksum_%256) == 255){
 800fc76:	4013      	ands	r3, r2
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	bfbe      	ittt	lt
 800fc7c:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800fc80:	f063 03ff 	ornlt	r3, r3, #255	; 0xff
 800fc84:	3301      	addlt	r3, #1
 800fc86:	2bff      	cmp	r3, #255	; 0xff
 800fc88:	f47f af63 	bne.w	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
              if(topic_ == TopicInfo::ID_PUBLISHER){
 800fc8c:	f8d4 38e8 	ldr.w	r3, [r4, #2280]	; 0x8e8
 800fc90:	b96b      	cbnz	r3, 800fcae <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x19a>
                requestSyncTime();
 800fc92:	4620      	mov	r0, r4
 800fc94:	f7ff fe8c 	bl	800f9b0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::requestSyncTime()>
                negotiateTopics();
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f7ff fe9d 	bl	800f9d8 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::negotiateTopics()>
                last_sync_time = c_time;
 800fc9e:	f8c4 68f8 	str.w	r6, [r4, #2296]	; 0x8f8
                last_sync_receive_time = c_time;
 800fca2:	f8c4 68fc 	str.w	r6, [r4, #2300]	; 0x8fc
                return -1;
 800fca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
              }else if(topic_ == TopicInfo::ID_TIME){
 800fcae:	2b0a      	cmp	r3, #10
 800fcb0:	d104      	bne.n	800fcbc <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x1a8>
                syncTime(message_in);
 800fcb2:	4649      	mov	r1, r9
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f7ff feed 	bl	800fa94 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::syncTime(unsigned char*)>
 800fcba:	e74a      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
              }else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST){
 800fcbc:	2b06      	cmp	r3, #6
 800fcbe:	d108      	bne.n	800fcd2 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x1be>
                  req_param_resp.deserialize(message_in);
 800fcc0:	4649      	mov	r1, r9
 800fcc2:	f604 1008 	addw	r0, r4, #2312	; 0x908
 800fcc6:	f7ff fc19 	bl	800f4fc <rosserial_msgs::RequestParamResponse::deserialize(unsigned char*)>
                  param_recieved= true;
 800fcca:	2301      	movs	r3, #1
 800fccc:	f884 3904 	strb.w	r3, [r4, #2308]	; 0x904
 800fcd0:	e73f      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
              }else if(topic_ == TopicInfo::ID_TX_STOP){
 800fcd2:	2b0b      	cmp	r3, #11
 800fcd4:	d102      	bne.n	800fcdc <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x1c8>
                  configured_ = false;
 800fcd6:	f884 88f4 	strb.w	r8, [r4, #2292]	; 0x8f4
 800fcda:	e73a      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
              }else{
                if(subscribers[topic_-100])
 800fcdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fce0:	f8d3 06ec 	ldr.w	r0, [r3, #1772]	; 0x6ec
 800fce4:	2800      	cmp	r0, #0
 800fce6:	f43f af34 	beq.w	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
                  subscribers[topic_-100]->callback( message_in );
 800fcea:	6803      	ldr	r3, [r0, #0]
 800fcec:	4649      	mov	r1, r9
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4798      	blx	r3
 800fcf2:	e72e      	b.n	800fb52 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x3e>
            }
          }
        }

        /* occasionally sync time */
        if( configured_ && ((c_time-last_sync_time) > (SYNC_SECONDS*500) )){
 800fcf4:	f894 08f4 	ldrb.w	r0, [r4, #2292]	; 0x8f4
 800fcf8:	b170      	cbz	r0, 800fd18 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x204>
 800fcfa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800fcfe:	f8d4 38f8 	ldr.w	r3, [r4, #2296]	; 0x8f8
 800fd02:	1af3      	subs	r3, r6, r3
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d904      	bls.n	800fd12 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()+0x1fe>
          requestSyncTime();
 800fd08:	4620      	mov	r0, r4
 800fd0a:	f7ff fe51 	bl	800f9b0 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::requestSyncTime()>
          last_sync_time = c_time;
 800fd0e:	f8c4 68f8 	str.w	r6, [r4, #2296]	; 0x8f8
        }

        return 0;
 800fd12:	2000      	movs	r0, #0
 800fd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      }
 800fd18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd1c:	200001d4 	.word	0x200001d4
 800fd20:	800000ff 	.word	0x800000ff
 800fd24:	00000000 	.word	0x00000000

0800fd28 <main>:
ros::Publisher debug_pub("debug", &debug_msg);

std_msgs::Float32MultiArray odom_msg;
ros::Publisher odom_pub("odom_vel", &odom_msg);

int main(){
 800fd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return &hardware_;
      }

      /* Start serial, initialize buffers */
      void initNode(){
        hardware_.init();
 800fd2c:	4c2b      	ldr	r4, [pc, #172]	; (800fddc <main+0xb4>)
 800fd2e:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
  #ifdef DEBUG
  initialise_monitor_handles(); /* initialize handles */
  #endif
  /* System Clocks Configuration */
  RCC_Configuration();
 800fd32:	f7f0 fc8d 	bl	8000650 <RCC_Configuration>
  SysTick_Init();
 800fd36:	f7f0 fc39 	bl	80005ac <SysTick_Init>

  GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 800fd3a:	2101      	movs	r1, #1
 800fd3c:	4828      	ldr	r0, [pc, #160]	; (800fde0 <main+0xb8>)
 800fd3e:	f7f2 fab1 	bl	80022a4 <GPIO_PinRemapConfig>
  I2C1_Init();
 800fd42:	f7f0 fbf9 	bl	8000538 <I2C1_Init>
  DEBUG_Init();
 800fd46:	f7f0 fba2 	bl	800048e <DEBUG_Init>
  SHUTDOWN_Init();
 800fd4a:	f7f0 fbc7 	bl	80004dc <SHUTDOWN_Init>
  LED_Init();
 800fd4e:	f7f0 fb5b 	bl	8000408 <LED_Init>
 800fd52:	f204 403c 	addw	r0, r4, #1084	; 0x43c
 800fd56:	f7ff fde1 	bl	800f91c <ArduinoHardware::init()>
        mode_ = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	f8c4 3d18 	str.w	r3, [r4, #3352]	; 0xd18
        bytes_ = 0;
 800fd60:	f8c4 3d1c 	str.w	r3, [r4, #3356]	; 0xd1c
        index_ = 0;
 800fd64:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
        topic_ = 0;
 800fd68:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
 800fd6c:	f504 624b 	add.w	r2, r4, #3248	; 0xcb0

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
 800fd70:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800fd74:	b941      	cbnz	r1, 800fd88 <main+0x60>
            subscribers[i] = (Subscriber_*) &s;
 800fd76:	491b      	ldr	r1, [pc, #108]	; (800fde4 <main+0xbc>)
 800fd78:	eb04 0283 	add.w	r2, r4, r3, lsl #2
            s.id_ = i+100;
 800fd7c:	3364      	adds	r3, #100	; 0x64
      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
          if(subscribers[i] == 0){ // empty slot
            subscribers[i] = (Subscriber_*) &s;
 800fd7e:	f8c2 1cb4 	str.w	r1, [r2, #3252]	; 0xcb4
            s.id_ = i+100;
 800fd82:	f8c4 3d6c 	str.w	r3, [r4, #3436]	; 0xd6c
 800fd86:	e002      	b.n	800fd8e <main+0x66>
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800fd88:	3301      	adds	r3, #1
 800fd8a:	2b19      	cmp	r3, #25
 800fd8c:	d1f0      	bne.n	800fd70 <main+0x48>
 800fd8e:	4916      	ldr	r1, [pc, #88]	; (800fde8 <main+0xc0>)
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 800fd90:	2300      	movs	r3, #0
      }

      /* Register a new subscriber */
      template<typename MsgT>
      bool subscribe(Subscriber< MsgT> & s){
        for(int i = 0; i < MAX_SUBSCRIBERS; i++){
 800fd92:	460a      	mov	r2, r1

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
 800fd94:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fd98:	b960      	cbnz	r0, 800fdb4 <main+0x8c>
            publishers[i] = &p;
 800fd9a:	4a14      	ldr	r2, [pc, #80]	; (800fdec <main+0xc4>)
 800fd9c:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 800fda0:	f8c0 2c50 	str.w	r2, [r0, #3152]	; 0xc50
            p.id_ = i+100+MAX_SUBSCRIBERS;
 800fda4:	337d      	adds	r3, #125	; 0x7d
            p.nh_ = this;
 800fda6:	f5a2 6217 	sub.w	r2, r2, #2416	; 0x970
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
            publishers[i] = &p;
            p.id_ = i+100+MAX_SUBSCRIBERS;
 800fdaa:	f8c4 3db0 	str.w	r3, [r4, #3504]	; 0xdb0
            p.nh_ = this;
 800fdae:	f8c4 2db4 	str.w	r2, [r4, #3508]	; 0xdb4
 800fdb2:	e002      	b.n	800fdba <main+0x92>
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	2b19      	cmp	r3, #25
 800fdb8:	d1ec      	bne.n	800fd94 <main+0x6c>
 800fdba:	2300      	movs	r3, #0
          if(publishers[i] == 0){ // empty slot
 800fdbc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800fdc0:	b9c2      	cbnz	r2, 800fdf4 <main+0xcc>
            publishers[i] = &p;
 800fdc2:	4a0b      	ldr	r2, [pc, #44]	; (800fdf0 <main+0xc8>)
 800fdc4:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800fdc8:	f8c1 2c50 	str.w	r2, [r1, #3152]	; 0xc50
            p.id_ = i+100+MAX_SUBSCRIBERS;
 800fdcc:	337d      	adds	r3, #125	; 0x7d
            p.nh_ = this;
 800fdce:	f6a2 1284 	subw	r2, r2, #2436	; 0x984
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
          if(publishers[i] == 0){ // empty slot
            publishers[i] = &p;
            p.id_ = i+100+MAX_SUBSCRIBERS;
 800fdd2:	f8c4 3dc4 	str.w	r3, [r4, #3524]	; 0xdc4
            p.nh_ = this;
 800fdd6:	f8c4 2dc8 	str.w	r2, [r4, #3528]	; 0xdc8
 800fdda:	e00e      	b.n	800fdfa <main+0xd2>
 800fddc:	200001d4 	.word	0x200001d4
 800fde0:	00300200 	.word	0x00300200
 800fde4:	20000f3c 	.word	0x20000f3c
 800fde8:	20000e20 	.word	0x20000e20
 800fdec:	20000f7c 	.word	0x20000f7c
 800fdf0:	20000f90 	.word	0x20000f90
       */

      /* Register a new publisher */
      bool advertise(Publisher & p)
      {
        for(int i = 0; i < MAX_PUBLISHERS; i++){
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	2b19      	cmp	r3, #25
 800fdf8:	d1e0      	bne.n	800fdbc <main+0x94>

  /*while(!nh.connected()){
    nh.spinOnce();
  }*/

  shuttingDown = false;
 800fdfa:	f04f 0300 	mov.w	r3, #0


  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;
  SL.m_ServoLimitMax = 2025;
 800fdfe:	f240 76e9 	movw	r6, #2025	; 0x7e9
  SL.m_ServoLimitMin = 7925;
 800fe02:	f641 68f5 	movw	r8, #7925	; 0x1ef5

  /*while(!nh.connected()){
    nh.spinOnce();
  }*/

  shuttingDown = false;
 800fe06:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
  //if(!nh.getParam("serial_node/wheelRadius", &wheelRadius, 1)){
    wheelRadius = 0.04;
  //}

  //if(!nh.getParam("serial_node/widthBetweenMotorPivotPoints", &L, 1)){
    L = 0.17;
 800fe0a:	4bb9      	ldr	r3, [pc, #740]	; (80100f0 <main+0x3c8>)
  //}

  delay(1000);


  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 800fe0c:	2704      	movs	r7, #4
  //if(!nh.getParam("serial_node/wheelRadius", &wheelRadius, 1)){
    wheelRadius = 0.04;
  //}

  //if(!nh.getParam("serial_node/widthBetweenMotorPivotPoints", &L, 1)){
    L = 0.17;
 800fe0e:	60e3      	str	r3, [r4, #12]
  //}

  //if(!nh.getParam("serial_node/motorPivotPointToWheel", &d, 1)){
    d = 0.045;
 800fe10:	4bb8      	ldr	r3, [pc, #736]	; (80100f4 <main+0x3cc>)
  //}

  delay(1000);
 800fe12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  //if(!nh.getParam("serial_node/widthBetweenMotorPivotPoints", &L, 1)){
    L = 0.17;
  //}

  //if(!nh.getParam("serial_node/motorPivotPointToWheel", &d, 1)){
    d = 0.045;
 800fe16:	6123      	str	r3, [r4, #16]
  //}

  delay(1000);
 800fe18:	f7f0 fbee 	bl	80005f8 <delay>


  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
 800fe1c:	4bb6      	ldr	r3, [pc, #728]	; (80100f8 <main+0x3d0>)
 800fe1e:	4ab7      	ldr	r2, [pc, #732]	; (80100fc <main+0x3d4>)
 800fe20:	2101      	movs	r1, #1
 800fe22:	9700      	str	r7, [sp, #0]
 800fe24:	a826      	add	r0, sp, #152	; 0x98
 800fe26:	f7f4 ff06 	bl	8004c36 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  SL.m_ServoPin = GPIO_Pin_9;
 800fe2a:	f44f 7300 	mov.w	r3, #512	; 0x200
  SL.m_ServoPort = GPIOB;
 800fe2e:	4db4      	ldr	r5, [pc, #720]	; (8010100 <main+0x3d8>)

  delay(1000);


  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
 800fe30:	932c      	str	r3, [sp, #176]	; 0xb0
  SL.m_ServoPort = GPIOB;
  SL.m_ServoLimitMax = 2025;
  SL.m_ServoLimitMin = 7925;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 800fe32:	2303      	movs	r3, #3
 800fe34:	9300      	str	r3, [sp, #0]
 800fe36:	4ab3      	ldr	r2, [pc, #716]	; (8010104 <main+0x3dc>)
 800fe38:	4baf      	ldr	r3, [pc, #700]	; (80100f8 <main+0x3d0>)
 800fe3a:	2101      	movs	r1, #1
 800fe3c:	a840      	add	r0, sp, #256	; 0x100


  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;
  SL.m_ServoLimitMax = 2025;
 800fe3e:	962a      	str	r6, [sp, #168]	; 0xa8
  SL.m_ServoLimitMin = 7925;
 800fe40:	f8cd 80ac 	str.w	r8, [sp, #172]	; 0xac
  delay(1000);


  motorSettings SL(MOTOR_TYPE_SERVO, "servo_left", TIM4, 4);
  SL.m_ServoPin = GPIO_Pin_9;
  SL.m_ServoPort = GPIOB;
 800fe44:	952d      	str	r5, [sp, #180]	; 0xb4
  SL.m_ServoLimitMax = 2025;
  SL.m_ServoLimitMin = 7925;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
 800fe46:	f7f4 fef6 	bl	8004c36 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  SR.m_ServoPin = GPIO_Pin_8;
  SR.m_ServoPort = GPIOB;
  SR.m_ServoLimitMax = 7925;
 800fe4a:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
  SR.m_ServoLimitMin = 2025;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 800fe4e:	f04f 0801 	mov.w	r8, #1
  SL.m_ServoPort = GPIOB;
  SL.m_ServoLimitMax = 2025;
  SL.m_ServoLimitMin = 7925;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
  SR.m_ServoPin = GPIO_Pin_8;
 800fe52:	f44f 7980 	mov.w	r9, #256	; 0x100
  SR.m_ServoPort = GPIOB;
  SR.m_ServoLimitMax = 7925;
  SR.m_ServoLimitMin = 2025;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 800fe56:	f8cd 8000 	str.w	r8, [sp]
 800fe5a:	4bab      	ldr	r3, [pc, #684]	; (8010108 <main+0x3e0>)
 800fe5c:	4aab      	ldr	r2, [pc, #684]	; (801010c <main+0x3e4>)
 800fe5e:	2102      	movs	r1, #2
 800fe60:	a85a      	add	r0, sp, #360	; 0x168
  SL.m_ServoPort = GPIOB;
  SL.m_ServoLimitMax = 2025;
  SL.m_ServoLimitMin = 7925;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
  SR.m_ServoPin = GPIO_Pin_8;
 800fe62:	f8cd 9118 	str.w	r9, [sp, #280]	; 0x118
  SR.m_ServoPort = GPIOB;
  SR.m_ServoLimitMax = 7925;
  SR.m_ServoLimitMin = 2025;
 800fe66:	9645      	str	r6, [sp, #276]	; 0x114
  SL.m_ServoLimitMax = 2025;
  SL.m_ServoLimitMin = 7925;

  motorSettings SR(MOTOR_TYPE_SERVO, "servo_right", TIM4, 3);
  SR.m_ServoPin = GPIO_Pin_8;
  SR.m_ServoPort = GPIOB;
 800fe68:	9547      	str	r5, [sp, #284]	; 0x11c
  SR.m_ServoLimitMin = 2025;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
 800fe6a:	4ea9      	ldr	r6, [pc, #676]	; (8010110 <main+0x3e8>)
  SR.m_ServoPin = GPIO_Pin_8;
  SR.m_ServoPort = GPIOB;
  SR.m_ServoLimitMax = 7925;
  SR.m_ServoLimitMin = 2025;

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
 800fe6c:	f7f4 fee3 	bl	8004c36 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
 800fe70:	4aa8      	ldr	r2, [pc, #672]	; (8010114 <main+0x3ec>)
 800fe72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe76:	e88d 000c 	stmia.w	sp, {r2, r3}
 800fe7a:	9606      	str	r6, [sp, #24]
 800fe7c:	f8cd 9014 	str.w	r9, [sp, #20]
 800fe80:	9604      	str	r6, [sp, #16]
 800fe82:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe86:	9202      	str	r2, [sp, #8]
 800fe88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fe8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fe90:	a85a      	add	r0, sp, #360	; 0x168
 800fe92:	f7f4 fed6 	bl	8004c42 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FR.encoderAddr = (0x10 | 0x08);
 800fe96:	f04f 0318 	mov.w	r3, #24
  FR.setRegulator(FF,KP,KI,KD,integralSaturation);
 800fe9a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8010144 <main+0x41c>
 800fe9e:	f8df a2a8 	ldr.w	sl, [pc, #680]	; 8010148 <main+0x420>
  FR.wheelRadius = wheelRadius;
 800fea2:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 801014c <main+0x424>

  motorSettings FR(MOTOR_TYPE_DC_MOTOR, "front_right", TIM1, 1);
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
  FR.encoderAddr = (0x10 | 0x08);
 800fea6:	f8ad 31b0 	strh.w	r3, [sp, #432]	; 0x1b0
  FR.setRegulator(FF,KP,KI,KD,integralSaturation);
 800feaa:	4a9b      	ldr	r2, [pc, #620]	; (8010118 <main+0x3f0>)
 800feac:	4b9b      	ldr	r3, [pc, #620]	; (801011c <main+0x3f4>)
 800feae:	499c      	ldr	r1, [pc, #624]	; (8010120 <main+0x3f8>)
 800feb0:	a85a      	add	r0, sp, #360	; 0x168
 800feb2:	f8cd 9004 	str.w	r9, [sp, #4]
 800feb6:	f8cd a000 	str.w	sl, [sp]
 800feba:	f7f4 fed4 	bl	8004c66 <motorSettings::setRegulator(float, float, float, float, float)>
  FR.wheelRadius = wheelRadius;

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 800febe:	4b99      	ldr	r3, [pc, #612]	; (8010124 <main+0x3fc>)
 800fec0:	4a99      	ldr	r2, [pc, #612]	; (8010128 <main+0x400>)
 800fec2:	2102      	movs	r1, #2
 800fec4:	9700      	str	r7, [sp, #0]
 800fec6:	a874      	add	r0, sp, #464	; 0x1d0
  FR.setDCPins(GPIO_Pin_13, GPIOC, GPIO_Pin_14, GPIOC,
              GPIO_Pin_15, GPIOC, GPIO_Pin_0, GPIOA,
              GPIO_Pin_8, GPIOA);
  FR.encoderAddr = (0x10 | 0x08);
  FR.setRegulator(FF,KP,KI,KD,integralSaturation);
  FR.wheelRadius = wheelRadius;
 800fec8:	f8cd 81cc 	str.w	r8, [sp, #460]	; 0x1cc

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
 800fecc:	f7f4 feb3 	bl	8004c36 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
 800fed0:	2302      	movs	r3, #2
 800fed2:	f04f 0b10 	mov.w	fp, #16
 800fed6:	9305      	str	r3, [sp, #20]
 800fed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fedc:	e88d 0840 	stmia.w	sp, {r6, fp}
 800fee0:	9303      	str	r3, [sp, #12]
 800fee2:	9602      	str	r6, [sp, #8]
 800fee4:	2320      	movs	r3, #32
 800fee6:	462a      	mov	r2, r5
 800fee8:	4639      	mov	r1, r7
 800feea:	a874      	add	r0, sp, #464	; 0x1d0
 800feec:	9506      	str	r5, [sp, #24]
 800feee:	9504      	str	r5, [sp, #16]
 800fef0:	f7f4 fea7 	bl	8004c42 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  FL.encoderAddr = (0x10);
  FL.setRegulator(FF,KP,KI,KD,integralSaturation);
 800fef4:	4b89      	ldr	r3, [pc, #548]	; (801011c <main+0x3f4>)
 800fef6:	4a88      	ldr	r2, [pc, #544]	; (8010118 <main+0x3f0>)
 800fef8:	4989      	ldr	r1, [pc, #548]	; (8010120 <main+0x3f8>)
 800fefa:	a874      	add	r0, sp, #464	; 0x1d0
 800fefc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff00:	f8cd a000 	str.w	sl, [sp]

  motorSettings FL(MOTOR_TYPE_DC_MOTOR, "front_left", TIM3, 4);
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
 800ff04:	f8ad b218 	strh.w	fp, [sp, #536]	; 0x218
  FL.setRegulator(FF,KP,KI,KD,integralSaturation);
 800ff08:	f7f4 fead 	bl	8004c66 <motorSettings::setRegulator(float, float, float, float, float)>
  FL.wheelRadius = wheelRadius;

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 800ff0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff10:	4a86      	ldr	r2, [pc, #536]	; (801012c <main+0x404>)
 800ff12:	2102      	movs	r1, #2
 800ff14:	9700      	str	r7, [sp, #0]
 800ff16:	a88e      	add	r0, sp, #568	; 0x238
  FL.setDCPins(GPIO_Pin_2,GPIOB, GPIO_Pin_5,GPIOA,
              GPIO_Pin_4, GPIOA,GPIO_Pin_10,GPIOB,
              GPIO_Pin_1, GPIOB);
  FL.encoderAddr = (0x10);
  FL.setRegulator(FF,KP,KI,KD,integralSaturation);
  FL.wheelRadius = wheelRadius;
 800ff18:	f8cd 8234 	str.w	r8, [sp, #564]	; 0x234

  motorSettings RL(MOTOR_TYPE_DC_MOTOR, "rear_left", TIM2, 4);
 800ff1c:	f7f4 fe8b 	bl	8004c36 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  RL.setDCPins(GPIO_Pin_11, GPIOB, GPIO_Pin_12, GPIOB,
    GPIO_Pin_13, GPIOB, GPIO_Pin_14, GPIOB,
    GPIO_Pin_3, GPIOA);
 800ff20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ff24:	f04f 0b08 	mov.w	fp, #8
 800ff28:	9303      	str	r3, [sp, #12]
 800ff2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff2e:	9606      	str	r6, [sp, #24]
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	462a      	mov	r2, r5
 800ff34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ff3c:	a88e      	add	r0, sp, #568	; 0x238
 800ff3e:	f8cd b014 	str.w	fp, [sp, #20]
 800ff42:	9504      	str	r5, [sp, #16]
 800ff44:	9502      	str	r5, [sp, #8]
 800ff46:	9500      	str	r5, [sp, #0]
 800ff48:	f7f4 fe7b 	bl	8004c42 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RL.encoderAddr = (0x10 | 0x04);
 800ff4c:	2314      	movs	r3, #20
 800ff4e:	f8ad 3280 	strh.w	r3, [sp, #640]	; 0x280
  RL.setRegulator(FF,KP,KI,KD,integralSaturation);
 800ff52:	4a71      	ldr	r2, [pc, #452]	; (8010118 <main+0x3f0>)
 800ff54:	4b71      	ldr	r3, [pc, #452]	; (801011c <main+0x3f4>)
 800ff56:	4972      	ldr	r1, [pc, #456]	; (8010120 <main+0x3f8>)
 800ff58:	a88e      	add	r0, sp, #568	; 0x238
 800ff5a:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff5e:	f8cd a000 	str.w	sl, [sp]
 800ff62:	f7f4 fe80 	bl	8004c66 <motorSettings::setRegulator(float, float, float, float, float)>
  RL.wheelRadius = wheelRadius;

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 800ff66:	4b68      	ldr	r3, [pc, #416]	; (8010108 <main+0x3e0>)
 800ff68:	4a71      	ldr	r2, [pc, #452]	; (8010130 <main+0x408>)
 800ff6a:	2102      	movs	r1, #2
 800ff6c:	9700      	str	r7, [sp, #0]
 800ff6e:	a8a8      	add	r0, sp, #672	; 0x2a0
  RL.setDCPins(GPIO_Pin_11, GPIOB, GPIO_Pin_12, GPIOB,
    GPIO_Pin_13, GPIOB, GPIO_Pin_14, GPIOB,
    GPIO_Pin_3, GPIOA);
  RL.encoderAddr = (0x10 | 0x04);
  RL.setRegulator(FF,KP,KI,KD,integralSaturation);
  RL.wheelRadius = wheelRadius;
 800ff70:	f8cd 829c 	str.w	r8, [sp, #668]	; 0x29c

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
 800ff74:	f7f4 fe5f 	bl	8004c36 <motorSettings::motorSettings(int, char const*, TIM_TypeDef*, int)>
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
 800ff78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff7c:	9305      	str	r3, [sp, #20]
 800ff7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff82:	9606      	str	r6, [sp, #24]
 800ff84:	9602      	str	r6, [sp, #8]
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	9600      	str	r6, [sp, #0]
 800ff8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff8e:	462a      	mov	r2, r5
 800ff90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ff94:	a8a8      	add	r0, sp, #672	; 0x2a0
 800ff96:	9504      	str	r5, [sp, #16]
 800ff98:	f8cd b00c 	str.w	fp, [sp, #12]
 800ff9c:	f7f4 fe51 	bl	8004c42 <motorSettings::setDCPins(int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*, int, GPIO_TypeDef*)>
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
 800ffa0:	231c      	movs	r3, #28
  RR.setRegulator(FF,KP,KI,KD,integralSaturation);
 800ffa2:	4a5d      	ldr	r2, [pc, #372]	; (8010118 <main+0x3f0>)
 800ffa4:	495e      	ldr	r1, [pc, #376]	; (8010120 <main+0x3f8>)

  motorSettings RR(MOTOR_TYPE_DC_MOTOR, "rear_right", TIM1, 4);
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
 800ffa6:	f8ad 32e8 	strh.w	r3, [sp, #744]	; 0x2e8
  RR.setRegulator(FF,KP,KI,KD,integralSaturation);
 800ffaa:	a8a8      	add	r0, sp, #672	; 0x2a0
 800ffac:	4b5b      	ldr	r3, [pc, #364]	; (801011c <main+0x3f4>)
 800ffae:	f8cd 9004 	str.w	r9, [sp, #4]
 800ffb2:	f8cd a000 	str.w	sl, [sp]
 800ffb6:	f7f4 fe56 	bl	8004c66 <motorSettings::setRegulator(float, float, float, float, float)>
  RR.wheelRadius = wheelRadius;

  //char error[60];
  servo_left = motor::createMotor(&SL);
 800ffba:	a826      	add	r0, sp, #152	; 0x98
  RR.setDCPins(GPIO_Pin_15, GPIOB, GPIO_Pin_12,GPIOA,
              GPIO_Pin_15, GPIOA, GPIO_Pin_3, GPIOB,
              GPIO_Pin_11, GPIOA);
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
  RR.setRegulator(FF,KP,KI,KD,integralSaturation);
  RR.wheelRadius = wheelRadius;
 800ffbc:	f8cd 8304 	str.w	r8, [sp, #772]	; 0x304

  //char error[60];
  servo_left = motor::createMotor(&SL);
 800ffc0:	f7f4 faa8 	bl	8004514 <motor::createMotor(motorSettings*)>
  if(!servo_left->motorInit()){
 800ffc4:	6803      	ldr	r3, [r0, #0]
  RR.encoderAddr = (0x10 | 0x04 | 0x08);
  RR.setRegulator(FF,KP,KI,KD,integralSaturation);
  RR.wheelRadius = wheelRadius;

  //char error[60];
  servo_left = motor::createMotor(&SL);
 800ffc6:	6160      	str	r0, [r4, #20]
  if(!servo_left->motorInit()){
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	4798      	blx	r3
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
    //nh.logerror(error);
  }

  servo_right = motor::createMotor(&SR);
 800ffcc:	a840      	add	r0, sp, #256	; 0x100
 800ffce:	f7f4 faa1 	bl	8004514 <motor::createMotor(motorSettings*)>
  if(!servo_right->motorInit()){
 800ffd2:	6803      	ldr	r3, [r0, #0]
  if(!servo_left->motorInit()){
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_left->motorName());
    //nh.logerror(error);
  }

  servo_right = motor::createMotor(&SR);
 800ffd4:	61a0      	str	r0, [r4, #24]
  if(!servo_right->motorInit()){
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	4798      	blx	r3
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
    //nh.logerror(error);
  }

  front_left = motor::createMotor(&FL);
 800ffda:	a874      	add	r0, sp, #464	; 0x1d0
 800ffdc:	f7f4 fa9a 	bl	8004514 <motor::createMotor(motorSettings*)>
  if(!front_left->motorInit()){
 800ffe0:	6803      	ldr	r3, [r0, #0]
  if(!servo_right->motorInit()){
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", servo_right->motorName());
    //nh.logerror(error);
  }

  front_left = motor::createMotor(&FL);
 800ffe2:	f8c4 0dd0 	str.w	r0, [r4, #3536]	; 0xdd0
  if(!front_left->motorInit()){
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	4798      	blx	r3
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
    //nh.logerror(error);
  }

  front_right = motor::createMotor(&FR);
 800ffea:	a85a      	add	r0, sp, #360	; 0x168
 800ffec:	f7f4 fa92 	bl	8004514 <motor::createMotor(motorSettings*)>
  if(!front_right->motorInit()){
 800fff0:	6803      	ldr	r3, [r0, #0]
  if(!front_left->motorInit()){
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_left->motorName());
    //nh.logerror(error);
  }

  front_right = motor::createMotor(&FR);
 800fff2:	f8c4 0dd4 	str.w	r0, [r4, #3540]	; 0xdd4
  if(!front_right->motorInit()){
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	4798      	blx	r3
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
    //nh.logerror(error);
  }

  rear_left = motor::createMotor(&RL);
 800fffa:	a88e      	add	r0, sp, #568	; 0x238
 800fffc:	f7f4 fa8a 	bl	8004514 <motor::createMotor(motorSettings*)>
  if(!rear_left->motorInit()){
 8010000:	6803      	ldr	r3, [r0, #0]
  if(!front_right->motorInit()){
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", front_right->motorName());
    //nh.logerror(error);
  }

  rear_left = motor::createMotor(&RL);
 8010002:	f8c4 0dd8 	str.w	r0, [r4, #3544]	; 0xdd8
  if(!rear_left->motorInit()){
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	4798      	blx	r3
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
    //nh.logerror(error);
  }

  rear_right = motor::createMotor(&RR);
 801000a:	a8a8      	add	r0, sp, #672	; 0x2a0
 801000c:	f7f4 fa82 	bl	8004514 <motor::createMotor(motorSettings*)>
  if(!rear_right->motorInit()){
 8010010:	6803      	ldr	r3, [r0, #0]
  if(!rear_left->motorInit()){
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_left->motorName());
    //nh.logerror(error);
  }

  rear_right = motor::createMotor(&RR);
 8010012:	f8c4 0ddc 	str.w	r0, [r4, #3548]	; 0xddc
  if(!rear_right->motorInit()){
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	4798      	blx	r3
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_right->motorName());
    //nh.logerror(error);
  }

  odom_msg.data = new float[3];
 801001a:	200c      	movs	r0, #12
 801001c:	f001 fc0b 	bl	8011836 <operator new[](unsigned int)>
  odom_msg.data_length = 3;
 8010020:	f04f 0303 	mov.w	r3, #3
  if(!rear_right->motorInit()){
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_right->motorName());
    //nh.logerror(error);
  }

  odom_msg.data = new float[3];
 8010024:	f8c4 0e0c 	str.w	r0, [r4, #3596]	; 0xe0c
  odom_msg.data_length = 3;

  debug_msg.data = new float[6];
 8010028:	2018      	movs	r0, #24
    //sprintf(error, "Unable to initialize motor: %s - [FAIL]\r\n", rear_right->motorName());
    //nh.logerror(error);
  }

  odom_msg.data = new float[3];
  odom_msg.data_length = 3;
 801002a:	f884 3e04 	strb.w	r3, [r4, #3588]	; 0xe04

  debug_msg.data = new float[6];
 801002e:	f001 fc02 	bl	8011836 <operator new[](unsigned int)>
  debug_msg.data_length = 6;
 8010032:	2306      	movs	r3, #6
  }

  odom_msg.data = new float[3];
  odom_msg.data_length = 3;

  debug_msg.data = new float[6];
 8010034:	f8c4 0e3c 	str.w	r0, [r4, #3644]	; 0xe3c
  debug_msg.data_length = 6;
  
  

  servo_left->setReference(135);
 8010038:	6960      	ldr	r0, [r4, #20]

  odom_msg.data = new float[3];
  odom_msg.data_length = 3;

  debug_msg.data = new float[6];
  debug_msg.data_length = 6;
 801003a:	f884 3e34 	strb.w	r3, [r4, #3636]	; 0xe34
  
  

  servo_left->setReference(135);
 801003e:	6803      	ldr	r3, [r0, #0]
 8010040:	493c      	ldr	r1, [pc, #240]	; (8010134 <main+0x40c>)
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	4798      	blx	r3
  servo_right->setReference(135);
 8010046:	69a0      	ldr	r0, [r4, #24]
 8010048:	493a      	ldr	r1, [pc, #232]	; (8010134 <main+0x40c>)
 801004a:	6803      	ldr	r3, [r0, #0]
 801004c:	4e3a      	ldr	r6, [pc, #232]	; (8010138 <main+0x410>)
 801004e:	695b      	ldr	r3, [r3, #20]
 8010050:	4798      	blx	r3
  front_right->setReference(0);
 8010052:	f8d4 0dd4 	ldr.w	r0, [r4, #3540]	; 0xdd4
 8010056:	2100      	movs	r1, #0
 8010058:	6803      	ldr	r3, [r0, #0]
 801005a:	695b      	ldr	r3, [r3, #20]
 801005c:	4798      	blx	r3
  front_left->setReference(0);
 801005e:	f8d4 0dd0 	ldr.w	r0, [r4, #3536]	; 0xdd0
 8010062:	2100      	movs	r1, #0
 8010064:	6803      	ldr	r3, [r0, #0]
 8010066:	695b      	ldr	r3, [r3, #20]
 8010068:	4798      	blx	r3
  rear_right->setReference(0);
 801006a:	f8d4 0ddc 	ldr.w	r0, [r4, #3548]	; 0xddc
 801006e:	2100      	movs	r1, #0
 8010070:	6803      	ldr	r3, [r0, #0]
 8010072:	695b      	ldr	r3, [r3, #20]
 8010074:	4798      	blx	r3
  rear_left->setReference(0);
 8010076:	f8d4 0dd8 	ldr.w	r0, [r4, #3544]	; 0xdd8
 801007a:	2100      	movs	r1, #0
 801007c:	6803      	ldr	r3, [r0, #0]

  int cnt = 0;
 801007e:	2400      	movs	r4, #0
  servo_left->setReference(135);
  servo_right->setReference(135);
  front_right->setReference(0);
  front_left->setReference(0);
  rear_right->setReference(0);
  rear_left->setReference(0);
 8010080:	695b      	ldr	r3, [r3, #20]
 8010082:	4798      	blx	r3
  //debug_toggle();


  // Initialize the servos one by one in order not to kill the ODroid
  while(cnt < 100){
    start_time = millis();
 8010084:	f7f0 fad4 	bl	8000630 <millis>
    if(cnt < 50)
 8010088:	2c31      	cmp	r4, #49	; 0x31
  //debug_toggle();


  // Initialize the servos one by one in order not to kill the ODroid
  while(cnt < 100){
    start_time = millis();
 801008a:	4607      	mov	r7, r0
    if(cnt < 50)
      servo_left->update(dt_s, connected, true);
 801008c:	bfd4      	ite	le
 801008e:	6970      	ldrle	r0, [r6, #20]
    else
      servo_right->update(dt_s, connected, true);
 8010090:	69b0      	ldrgt	r0, [r6, #24]
 8010092:	2200      	movs	r2, #0
 8010094:	6803      	ldr	r3, [r0, #0]
 8010096:	4929      	ldr	r1, [pc, #164]	; (801013c <main+0x414>)
 8010098:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801009c:	2301      	movs	r3, #1
 801009e:	4d26      	ldr	r5, [pc, #152]	; (8010138 <main+0x410>)
 80100a0:	47c0      	blx	r8
    while( millis() - start_time < dt);
 80100a2:	f7f0 fac5 	bl	8000630 <millis>
 80100a6:	1bc0      	subs	r0, r0, r7
 80100a8:	2813      	cmp	r0, #19
 80100aa:	d9fa      	bls.n	80100a2 <main+0x37a>
    cnt++;
 80100ac:	3401      	adds	r4, #1

  //debug_toggle();


  // Initialize the servos one by one in order not to kill the ODroid
  while(cnt < 100){
 80100ae:	2c64      	cmp	r4, #100	; 0x64
 80100b0:	d1e8      	bne.n	8010084 <main+0x35c>
      servo_right->update(dt_s, connected, true);
    while( millis() - start_time < dt);
    cnt++;
  }

  led_set(255);
 80100b2:	20ff      	movs	r0, #255	; 0xff
 80100b4:	f7f0 f9e0 	bl	8000478 <led_set>


  double x = 0.0;
  double y = 0.0;
  double th = 0.0;
  float l = sqrt(pow((L/2),2)*2);
 80100b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80100bc:	68e8      	ldr	r0, [r5, #12]
 80100be:	f7f5 fbbf 	bl	8005840 <__aeabi_fmul>
 80100c2:	f7f4 ffd1 	bl	8005068 <__aeabi_f2d>
 80100c6:	4602      	mov	r2, r0
 80100c8:	460b      	mov	r3, r1
 80100ca:	f7f5 f821 	bl	8005110 <__aeabi_dmul>
 80100ce:	4602      	mov	r2, r0
 80100d0:	460b      	mov	r3, r1
 80100d2:	f7f4 fe6b 	bl	8004dac <__adddf3>
 80100d6:	f002 f8d9 	bl	801228c <sqrt>
 80100da:	f7f5 fa53 	bl	8005584 <__aeabi_d2f>

  //{fr, fl, rl, rr};
  float alpha[4] = {-M_PI/4, M_PI/4, 3*M_PI/4, -3*M_PI/4};
 80100de:	4b18      	ldr	r3, [pc, #96]	; (8010140 <main+0x418>)
 80100e0:	ac1a      	add	r4, sp, #104	; 0x68


  double x = 0.0;
  double y = 0.0;
  double th = 0.0;
  float l = sqrt(pow((L/2),2)*2);
 80100e2:	9014      	str	r0, [sp, #80]	; 0x50

  //{fr, fl, rl, rr};
  float alpha[4] = {-M_PI/4, M_PI/4, 3*M_PI/4, -3*M_PI/4};
 80100e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t elapsed;
  initialized = true;
 80100ea:	2301      	movs	r3, #1
 80100ec:	e030      	b.n	8010150 <main+0x428>
 80100ee:	bf00      	nop
 80100f0:	3e2e147b 	.word	0x3e2e147b
 80100f4:	3d3851ec 	.word	0x3d3851ec
 80100f8:	40000800 	.word	0x40000800
 80100fc:	080154c2 	.word	0x080154c2
 8010100:	40010c00 	.word	0x40010c00
 8010104:	080154cd 	.word	0x080154cd
 8010108:	40012c00 	.word	0x40012c00
 801010c:	080154d9 	.word	0x080154d9
 8010110:	40010800 	.word	0x40010800
 8010114:	40011000 	.word	0x40011000
 8010118:	453b8000 	.word	0x453b8000
 801011c:	44fa0000 	.word	0x44fa0000
 8010120:	45480000 	.word	0x45480000
 8010124:	40000400 	.word	0x40000400
 8010128:	080154e5 	.word	0x080154e5
 801012c:	080154f0 	.word	0x080154f0
 8010130:	080154fa 	.word	0x080154fa
 8010134:	43070000 	.word	0x43070000
 8010138:	200001d4 	.word	0x200001d4
 801013c:	3ca3d70b 	.word	0x3ca3d70b
 8010140:	0801473c 	.word	0x0801473c
 8010144:	41200000 	.word	0x41200000
 8010148:	42200000 	.word	0x42200000
 801014c:	3d23d70a 	.word	0x3d23d70a
 8010150:	702b      	strb	r3, [r5, #0]
    cnt++;
  }

  led_set(255);

  cnt = 0;
 8010152:	2400      	movs	r4, #0


  while (1){
   //printf("HELLOO!!!!");

    start_time = millis();
 8010154:	f7f0 fa6c 	bl	8000630 <millis>

    /*if(shuttingDown){
      connected = false;
      // TODO: Advertise shutdown??
    }else{*/
    if(cnt++%50 == 0)
 8010158:	1c63      	adds	r3, r4, #1
 801015a:	2232      	movs	r2, #50	; 0x32
 801015c:	9315      	str	r3, [sp, #84]	; 0x54
 801015e:	fb94 f3f2 	sdiv	r3, r4, r2
 8010162:	fb02 4413 	mls	r4, r2, r3, r4


  while (1){
   //printf("HELLOO!!!!");

    start_time = millis();
 8010166:	9009      	str	r0, [sp, #36]	; 0x24

    /*if(shuttingDown){
      connected = false;
      // TODO: Advertise shutdown??
    }else{*/
    if(cnt++%50 == 0)
 8010168:	b90c      	cbnz	r4, 801016e <main+0x446>
      debug_toggle();
 801016a:	f7f0 f9a3 	bl	80004b4 <debug_toggle>
    connected = true;//nh.connected();
    //}

    float sl = servo_left->update(dt_s, connected, true);
 801016e:	4c1c      	ldr	r4, [pc, #112]	; (80101e0 <main+0x4b8>)
 8010170:	491c      	ldr	r1, [pc, #112]	; (80101e4 <main+0x4bc>)
 8010172:	6960      	ldr	r0, [r4, #20]
 8010174:	6803      	ldr	r3, [r0, #0]
 8010176:	69dd      	ldr	r5, [r3, #28]
 8010178:	2301      	movs	r3, #1
 801017a:	461a      	mov	r2, r3
 801017c:	47a8      	blx	r5
 801017e:	4607      	mov	r7, r0
    float sr = servo_right->update(dt_s, connected, true);
 8010180:	69a0      	ldr	r0, [r4, #24]
 8010182:	4918      	ldr	r1, [pc, #96]	; (80101e4 <main+0x4bc>)
 8010184:	6803      	ldr	r3, [r0, #0]
 8010186:	69dd      	ldr	r5, [r3, #28]
 8010188:	2301      	movs	r3, #1
 801018a:	461a      	mov	r2, r3
 801018c:	47a8      	blx	r5

    debug_msg.data[0] = (float)sl;
 801018e:	f8d4 3e3c 	ldr.w	r3, [r4, #3644]	; 0xe3c
      debug_toggle();
    connected = true;//nh.connected();
    //}

    float sl = servo_left->update(dt_s, connected, true);
    float sr = servo_right->update(dt_s, connected, true);
 8010192:	4605      	mov	r5, r0

    debug_msg.data[0] = (float)sl;
 8010194:	601f      	str	r7, [r3, #0]
    debug_msg.data[1] = (float)sr;
 8010196:	6058      	str	r0, [r3, #4]

    bool enable = true;

    if((waitForServos && ((int)sr == (int)servo_right->getReference() && (int)sl == (int)servo_left->getReference())) || lastMsg + CMDMSGTIMEOUT > start_time){
 8010198:	7a63      	ldrb	r3, [r4, #9]
 801019a:	bb2b      	cbnz	r3, 80101e8 <main+0x4c0>
 801019c:	6863      	ldr	r3, [r4, #4]
 801019e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80101a4:	429a      	cmp	r2, r3
 80101a6:	4e0e      	ldr	r6, [pc, #56]	; (80101e0 <main+0x4b8>)
 80101a8:	d33a      	bcc.n	8010220 <main+0x4f8>
      front_left->setReference(motorCmd[1]);
      rear_left->setReference(motorCmd[2]);
      rear_right->setReference(motorCmd[3]);
    }else{
      enable = false;
      front_right->setReference(0);
 80101aa:	f8d6 0dd4 	ldr.w	r0, [r6, #3540]	; 0xdd4
 80101ae:	2100      	movs	r1, #0
 80101b0:	6803      	ldr	r3, [r0, #0]
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	4798      	blx	r3
      front_left->setReference(0);
 80101b6:	f8d6 0dd0 	ldr.w	r0, [r6, #3536]	; 0xdd0
 80101ba:	2100      	movs	r1, #0
 80101bc:	6803      	ldr	r3, [r0, #0]
 80101be:	695b      	ldr	r3, [r3, #20]
 80101c0:	4798      	blx	r3
      rear_left->setReference(0);
 80101c2:	f8d6 0dd8 	ldr.w	r0, [r6, #3544]	; 0xdd8
 80101c6:	2100      	movs	r1, #0
 80101c8:	6803      	ldr	r3, [r0, #0]
 80101ca:	695b      	ldr	r3, [r3, #20]
 80101cc:	4798      	blx	r3
      rear_right->setReference(0);
 80101ce:	f8d6 0ddc 	ldr.w	r0, [r6, #3548]	; 0xddc
 80101d2:	2100      	movs	r1, #0
 80101d4:	6803      	ldr	r3, [r0, #0]
      front_right->setReference(motorCmd[0]);
      front_left->setReference(motorCmd[1]);
      rear_left->setReference(motorCmd[2]);
      rear_right->setReference(motorCmd[3]);
    }else{
      enable = false;
 80101d6:	2600      	movs	r6, #0
      front_right->setReference(0);
      front_left->setReference(0);
      rear_left->setReference(0);
      rear_right->setReference(0);
 80101d8:	695b      	ldr	r3, [r3, #20]
 80101da:	4798      	blx	r3
 80101dc:	e03b      	b.n	8010256 <main+0x52e>
 80101de:	bf00      	nop
 80101e0:	200001d4 	.word	0x200001d4
 80101e4:	3ca3d70b 	.word	0x3ca3d70b
    debug_msg.data[0] = (float)sl;
    debug_msg.data[1] = (float)sr;

    bool enable = true;

    if((waitForServos && ((int)sr == (int)servo_right->getReference() && (int)sl == (int)servo_left->getReference())) || lastMsg + CMDMSGTIMEOUT > start_time){
 80101e8:	69a0      	ldr	r0, [r4, #24]
 80101ea:	6803      	ldr	r3, [r0, #0]
 80101ec:	699b      	ldr	r3, [r3, #24]
 80101ee:	4798      	blx	r3
 80101f0:	4680      	mov	r8, r0
 80101f2:	4628      	mov	r0, r5
 80101f4:	f7f5 fcea 	bl	8005bcc <__aeabi_f2iz>
 80101f8:	4606      	mov	r6, r0
 80101fa:	4640      	mov	r0, r8
 80101fc:	f7f5 fce6 	bl	8005bcc <__aeabi_f2iz>
 8010200:	4286      	cmp	r6, r0
 8010202:	d1cb      	bne.n	801019c <main+0x474>
 8010204:	6960      	ldr	r0, [r4, #20]
 8010206:	6803      	ldr	r3, [r0, #0]
 8010208:	699b      	ldr	r3, [r3, #24]
 801020a:	4798      	blx	r3
 801020c:	4680      	mov	r8, r0
 801020e:	4638      	mov	r0, r7
 8010210:	f7f5 fcdc 	bl	8005bcc <__aeabi_f2iz>
 8010214:	4606      	mov	r6, r0
 8010216:	4640      	mov	r0, r8
 8010218:	f7f5 fcd8 	bl	8005bcc <__aeabi_f2iz>
 801021c:	4286      	cmp	r6, r0
 801021e:	d1bd      	bne.n	801019c <main+0x474>
      waitForServos = false;
      front_right->setReference(motorCmd[0]);
 8010220:	f8d4 0dd4 	ldr.w	r0, [r4, #3540]	; 0xdd4
    debug_msg.data[1] = (float)sr;

    bool enable = true;

    if((waitForServos && ((int)sr == (int)servo_right->getReference() && (int)sl == (int)servo_left->getReference())) || lastMsg + CMDMSGTIMEOUT > start_time){
      waitForServos = false;
 8010224:	2300      	movs	r3, #0
 8010226:	7263      	strb	r3, [r4, #9]
      front_right->setReference(motorCmd[0]);
 8010228:	6803      	ldr	r3, [r0, #0]
 801022a:	69e1      	ldr	r1, [r4, #28]
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	4798      	blx	r3
      front_left->setReference(motorCmd[1]);
 8010230:	f8d4 0dd0 	ldr.w	r0, [r4, #3536]	; 0xdd0
 8010234:	6a21      	ldr	r1, [r4, #32]
 8010236:	6803      	ldr	r3, [r0, #0]
    float sr = servo_right->update(dt_s, connected, true);

    debug_msg.data[0] = (float)sl;
    debug_msg.data[1] = (float)sr;

    bool enable = true;
 8010238:	2601      	movs	r6, #1

    if((waitForServos && ((int)sr == (int)servo_right->getReference() && (int)sl == (int)servo_left->getReference())) || lastMsg + CMDMSGTIMEOUT > start_time){
      waitForServos = false;
      front_right->setReference(motorCmd[0]);
      front_left->setReference(motorCmd[1]);
 801023a:	695b      	ldr	r3, [r3, #20]
 801023c:	4798      	blx	r3
      rear_left->setReference(motorCmd[2]);
 801023e:	f8d4 0dd8 	ldr.w	r0, [r4, #3544]	; 0xdd8
 8010242:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010244:	6803      	ldr	r3, [r0, #0]
 8010246:	695b      	ldr	r3, [r3, #20]
 8010248:	4798      	blx	r3
      rear_right->setReference(motorCmd[3]);
 801024a:	f8d4 0ddc 	ldr.w	r0, [r4, #3548]	; 0xddc
 801024e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010250:	6803      	ldr	r3, [r0, #0]
 8010252:	695b      	ldr	r3, [r3, #20]
 8010254:	4798      	blx	r3
      front_left->setReference(0);
      rear_left->setReference(0);
      rear_right->setReference(0);
    }
    
    float fr = front_right->update(dt_s, connected, enable);
 8010256:	f8d4 0dd4 	ldr.w	r0, [r4, #3540]	; 0xdd4
 801025a:	2201      	movs	r2, #1
 801025c:	6803      	ldr	r3, [r0, #0]
 801025e:	49c4      	ldr	r1, [pc, #784]	; (8010570 <main+0x848>)
 8010260:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8010264:	4633      	mov	r3, r6
 8010266:	47c0      	blx	r8
 8010268:	4682      	mov	sl, r0
    //udelay(500);
    float fl = front_left->update(dt_s, connected, enable);
 801026a:	f8d4 0dd0 	ldr.w	r0, [r4, #3536]	; 0xdd0
 801026e:	2201      	movs	r2, #1
 8010270:	6803      	ldr	r3, [r0, #0]
 8010272:	49bf      	ldr	r1, [pc, #764]	; (8010570 <main+0x848>)
 8010274:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8010278:	4633      	mov	r3, r6
 801027a:	47c0      	blx	r8
 801027c:	4681      	mov	r9, r0
    //udelay(500);
    float rl = rear_left->update(dt_s, connected, enable);
 801027e:	f8d4 0dd8 	ldr.w	r0, [r4, #3544]	; 0xdd8
 8010282:	2201      	movs	r2, #1
 8010284:	6803      	ldr	r3, [r0, #0]
 8010286:	49ba      	ldr	r1, [pc, #744]	; (8010570 <main+0x848>)
 8010288:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801028c:	4633      	mov	r3, r6
 801028e:	47c0      	blx	r8
 8010290:	4680      	mov	r8, r0
    //udelay(500);
    float rr = rear_right->update(dt_s, connected, enable);
 8010292:	f8d4 0ddc 	ldr.w	r0, [r4, #3548]	; 0xddc
 8010296:	2201      	movs	r2, #1
 8010298:	6803      	ldr	r3, [r0, #0]
 801029a:	49b5      	ldr	r1, [pc, #724]	; (8010570 <main+0x848>)
 801029c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80102a0:	4633      	mov	r3, r6
 80102a2:	47d8      	blx	fp
    //udelay(1000);



    debug_msg.data[2] = fr;
 80102a4:	f8d4 3e3c 	ldr.w	r3, [r4, #3644]	; 0xe3c
    debug_msg.data[3] = fl;
    debug_msg.data[4] = rl;
    debug_msg.data[5] = rr;

    float speeds[4] = {fr, fl, rl, rr};
 80102a8:	9021      	str	r0, [sp, #132]	; 0x84
    float rr = rear_right->update(dt_s, connected, enable);
    //udelay(1000);



    debug_msg.data[2] = fr;
 80102aa:	f8c3 a008 	str.w	sl, [r3, #8]
    debug_msg.data[3] = fl;
    debug_msg.data[4] = rl;
    debug_msg.data[5] = rr;
 80102ae:	6158      	str	r0, [r3, #20]
    //udelay(1000);



    debug_msg.data[2] = fr;
    debug_msg.data[3] = fl;
 80102b0:	f8c3 900c 	str.w	r9, [r3, #12]
    debug_msg.data[4] = rl;
 80102b4:	f8c3 8010 	str.w	r8, [r3, #16]
    debug_msg.data[5] = rr;

    float speeds[4] = {fr, fl, rl, rr};
    float angles[4] = {sr-90, -sl+90, sl+90, -sr-90};
 80102b8:	49ae      	ldr	r1, [pc, #696]	; (8010574 <main+0x84c>)
 80102ba:	4628      	mov	r0, r5
    debug_msg.data[2] = fr;
    debug_msg.data[3] = fl;
    debug_msg.data[4] = rl;
    debug_msg.data[5] = rr;

    float speeds[4] = {fr, fl, rl, rr};
 80102bc:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
 80102c0:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 80102c4:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
    float angles[4] = {sr-90, -sl+90, sl+90, -sr-90};
 80102c8:	f7f5 f9b0 	bl	800562c <__aeabi_fsub>
 80102cc:	4639      	mov	r1, r7
 80102ce:	9022      	str	r0, [sp, #136]	; 0x88
 80102d0:	48a8      	ldr	r0, [pc, #672]	; (8010574 <main+0x84c>)
 80102d2:	f7f5 f9ab 	bl	800562c <__aeabi_fsub>
 80102d6:	49a7      	ldr	r1, [pc, #668]	; (8010574 <main+0x84c>)
 80102d8:	9023      	str	r0, [sp, #140]	; 0x8c
 80102da:	4638      	mov	r0, r7
 80102dc:	f7f5 f9a8 	bl	8005630 <__addsf3>
 80102e0:	49a4      	ldr	r1, [pc, #656]	; (8010574 <main+0x84c>)
 80102e2:	9024      	str	r0, [sp, #144]	; 0x90
 80102e4:	f105 4000 	add.w	r0, r5, #2147483648	; 0x80000000
 80102e8:	f7f5 f9a0 	bl	800562c <__aeabi_fsub>

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
 80102ec:	f04f 0b00 	mov.w	fp, #0
    debug_msg.data[3] = fl;
    debug_msg.data[4] = rl;
    debug_msg.data[5] = rr;

    float speeds[4] = {fr, fl, rl, rr};
    float angles[4] = {sr-90, -sl+90, sl+90, -sr-90};
 80102f0:	9025      	str	r0, [sp, #148]	; 0x94

    int i;
    float x_dot = 0;
    float y_dot = 0;
 80102f2:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c

    float speeds[4] = {fr, fl, rl, rr};
    float angles[4] = {sr-90, -sl+90, sl+90, -sr-90};

    int i;
    float x_dot = 0;
 80102f6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 80102fa:	f04f 0a00 	mov.w	sl, #0
      angles[i] = angles[i]*M_PI/180;
 80102fe:	ac22      	add	r4, sp, #136	; 0x88
 8010300:	f854 002a 	ldr.w	r0, [r4, sl, lsl #2]
 8010304:	f7f4 feb0 	bl	8005068 <__aeabi_f2d>
 8010308:	a393      	add	r3, pc, #588	; (adr r3, 8010558 <main+0x830>)
 801030a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801030e:	f7f4 feff 	bl	8005110 <__aeabi_dmul>
 8010312:	2200      	movs	r2, #0
 8010314:	4b98      	ldr	r3, [pc, #608]	; (8010578 <main+0x850>)
 8010316:	f7f5 f825 	bl	8005364 <__aeabi_ddiv>
 801031a:	f7f5 f933 	bl	8005584 <__aeabi_d2f>
      
      float wheelAngle = alpha[i]+angles[i];
 801031e:	ab1a      	add	r3, sp, #104	; 0x68
    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
      angles[i] = angles[i]*M_PI/180;
 8010320:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
      
      float wheelAngle = alpha[i]+angles[i];
 8010324:	f853 402a 	ldr.w	r4, [r3, sl, lsl #2]
 8010328:	4621      	mov	r1, r4
 801032a:	f7f5 f981 	bl	8005630 <__addsf3>
 801032e:	4605      	mov	r5, r0
      x_dot += cos(wheelAngle)*speeds[i];
 8010330:	f7f4 fe9a 	bl	8005068 <__aeabi_f2d>
 8010334:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010338:	f001 ff14 	bl	8012164 <cos>
 801033c:	ab1e      	add	r3, sp, #120	; 0x78
 801033e:	4606      	mov	r6, r0
 8010340:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010344:	460f      	mov	r7, r1
 8010346:	f7f4 fe8f 	bl	8005068 <__aeabi_f2d>
 801034a:	4602      	mov	r2, r0
 801034c:	460b      	mov	r3, r1
 801034e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010352:	4630      	mov	r0, r6
 8010354:	4639      	mov	r1, r7
 8010356:	f7f4 fedb 	bl	8005110 <__aeabi_dmul>
 801035a:	4606      	mov	r6, r0
 801035c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801035e:	460f      	mov	r7, r1
 8010360:	f7f4 fe82 	bl	8005068 <__aeabi_f2d>
 8010364:	4602      	mov	r2, r0
 8010366:	460b      	mov	r3, r1
 8010368:	4630      	mov	r0, r6
 801036a:	4639      	mov	r1, r7
 801036c:	f7f4 fd1e 	bl	8004dac <__adddf3>
 8010370:	f7f5 f908 	bl	8005584 <__aeabi_d2f>
 8010374:	900e      	str	r0, [sp, #56]	; 0x38
      y_dot += sin(wheelAngle)*speeds[i];
 8010376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801037a:	f001 ff3f 	bl	80121fc <sin>
 801037e:	4602      	mov	r2, r0
 8010380:	460b      	mov	r3, r1
 8010382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010386:	f7f4 fec3 	bl	8005110 <__aeabi_dmul>
 801038a:	4606      	mov	r6, r0
 801038c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801038e:	460f      	mov	r7, r1
 8010390:	f7f4 fe6a 	bl	8005068 <__aeabi_f2d>
 8010394:	460b      	mov	r3, r1
 8010396:	4602      	mov	r2, r0
 8010398:	4639      	mov	r1, r7
 801039a:	4630      	mov	r0, r6
 801039c:	f7f4 fd06 	bl	8004dac <__adddf3>
 80103a0:	f7f5 f8f0 	bl	8005584 <__aeabi_d2f>
      
      float motorAngle = wheelAngle;
      if(i==2 || i==3){
 80103a4:	f1aa 0302 	sub.w	r3, sl, #2
 80103a8:	2b01      	cmp	r3, #1
    for(i = 0; i < 4; i++){
      angles[i] = angles[i]*M_PI/180;
      
      float wheelAngle = alpha[i]+angles[i];
      x_dot += cos(wheelAngle)*speeds[i];
      y_dot += sin(wheelAngle)*speeds[i];
 80103aa:	900f      	str	r0, [sp, #60]	; 0x3c
      
      float motorAngle = wheelAngle;
      if(i==2 || i==3){
 80103ac:	d809      	bhi.n	80103c2 <main+0x69a>
        motorAngle += M_PI;
 80103ae:	a36a      	add	r3, pc, #424	; (adr r3, 8010558 <main+0x830>)
 80103b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80103b8:	f7f4 fcf8 	bl	8004dac <__adddf3>
 80103bc:	f7f5 f8e2 	bl	8005584 <__aeabi_d2f>
 80103c0:	4605      	mov	r5, r0
      }
      float deltaX = -(l*sin(alpha[i]) + d*sin(motorAngle));
 80103c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80103c4:	f7f4 fe50 	bl	8005068 <__aeabi_f2d>
 80103c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80103cc:	4620      	mov	r0, r4
 80103ce:	f7f4 fe4b 	bl	8005068 <__aeabi_f2d>
 80103d2:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80103d6:	f001 ff11 	bl	80121fc <sin>
 80103da:	4c68      	ldr	r4, [pc, #416]	; (801057c <main+0x854>)
 80103dc:	4606      	mov	r6, r0
 80103de:	6920      	ldr	r0, [r4, #16]
 80103e0:	460f      	mov	r7, r1
 80103e2:	f7f4 fe41 	bl	8005068 <__aeabi_f2d>
 80103e6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80103ea:	4628      	mov	r0, r5
 80103ec:	f7f4 fe3c 	bl	8005068 <__aeabi_f2d>
 80103f0:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80103f4:	f001 ff02 	bl	80121fc <sin>
 80103f8:	4632      	mov	r2, r6
 80103fa:	4680      	mov	r8, r0
 80103fc:	4689      	mov	r9, r1
 80103fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010402:	463b      	mov	r3, r7
 8010404:	f7f4 fe84 	bl	8005110 <__aeabi_dmul>
 8010408:	4642      	mov	r2, r8
 801040a:	4606      	mov	r6, r0
 801040c:	460f      	mov	r7, r1
 801040e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8010412:	464b      	mov	r3, r9
 8010414:	f7f4 fe7c 	bl	8005110 <__aeabi_dmul>
 8010418:	4602      	mov	r2, r0
 801041a:	460b      	mov	r3, r1
 801041c:	4630      	mov	r0, r6
 801041e:	4639      	mov	r1, r7
 8010420:	f7f4 fcc4 	bl	8004dac <__adddf3>
 8010424:	f7f5 f8ae 	bl	8005584 <__aeabi_d2f>
 8010428:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
      float deltaY = l*cos(alpha[i]) + d*cos(motorAngle);
 801042c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8010430:	f001 fe98 	bl	8012164 <cos>
 8010434:	4606      	mov	r6, r0
 8010436:	460f      	mov	r7, r1
 8010438:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 801043c:	f001 fe92 	bl	8012164 <cos>
 8010440:	4632      	mov	r2, r6
 8010442:	4680      	mov	r8, r0
 8010444:	4689      	mov	r9, r1
 8010446:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801044a:	463b      	mov	r3, r7
 801044c:	f7f4 fe60 	bl	8005110 <__aeabi_dmul>
 8010450:	4642      	mov	r2, r8
 8010452:	4606      	mov	r6, r0
 8010454:	460f      	mov	r7, r1
 8010456:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801045a:	464b      	mov	r3, r9
 801045c:	f7f4 fe58 	bl	8005110 <__aeabi_dmul>
 8010460:	4602      	mov	r2, r0
 8010462:	460b      	mov	r3, r1
 8010464:	4630      	mov	r0, r6
 8010466:	4639      	mov	r1, r7
 8010468:	f7f4 fca0 	bl	8004dac <__adddf3>
 801046c:	f7f5 f88a 	bl	8005584 <__aeabi_d2f>

      float deltaNorm = sqrt(deltaX*deltaX + deltaY*deltaY);
 8010470:	4629      	mov	r1, r5
      float motorAngle = wheelAngle;
      if(i==2 || i==3){
        motorAngle += M_PI;
      }
      float deltaX = -(l*sin(alpha[i]) + d*sin(motorAngle));
      float deltaY = l*cos(alpha[i]) + d*cos(motorAngle);
 8010472:	4681      	mov	r9, r0

      float deltaNorm = sqrt(deltaX*deltaX + deltaY*deltaY);
 8010474:	4628      	mov	r0, r5
 8010476:	f7f5 f9e3 	bl	8005840 <__aeabi_fmul>
 801047a:	4649      	mov	r1, r9
 801047c:	4606      	mov	r6, r0
 801047e:	4648      	mov	r0, r9
 8010480:	f7f5 f9de 	bl	8005840 <__aeabi_fmul>
 8010484:	4601      	mov	r1, r0
 8010486:	4630      	mov	r0, r6
 8010488:	f7f5 f8d2 	bl	8005630 <__addsf3>
 801048c:	f7f4 fdec 	bl	8005068 <__aeabi_f2d>
 8010490:	f001 fefc 	bl	801228c <sqrt>
 8010494:	f7f5 f876 	bl	8005584 <__aeabi_d2f>
      float deltaXNorm = deltaX/deltaNorm;
      float deltaYNorm = deltaY/deltaNorm;

      float wAngle = wheelAngle+M_PI/2;
      float wX = cos(wAngle);
 8010498:	a331      	add	r3, pc, #196	; (adr r3, 8010560 <main+0x838>)
 801049a:	e9d3 2300 	ldrd	r2, r3, [r3]
        motorAngle += M_PI;
      }
      float deltaX = -(l*sin(alpha[i]) + d*sin(motorAngle));
      float deltaY = l*cos(alpha[i]) + d*cos(motorAngle);

      float deltaNorm = sqrt(deltaX*deltaX + deltaY*deltaY);
 801049e:	4680      	mov	r8, r0
      float deltaXNorm = deltaX/deltaNorm;
      float deltaYNorm = deltaY/deltaNorm;

      float wAngle = wheelAngle+M_PI/2;
      float wX = cos(wAngle);
 80104a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80104a4:	f7f4 fc82 	bl	8004dac <__adddf3>
 80104a8:	f7f5 f86c 	bl	8005584 <__aeabi_d2f>
 80104ac:	f7f4 fddc 	bl	8005068 <__aeabi_f2d>
 80104b0:	4606      	mov	r6, r0
 80104b2:	460f      	mov	r7, r1
 80104b4:	f001 fe56 	bl	8012164 <cos>
 80104b8:	f7f5 f864 	bl	8005584 <__aeabi_d2f>
      float wY = sin(wAngle);
 80104bc:	4639      	mov	r1, r7
      float deltaNorm = sqrt(deltaX*deltaX + deltaY*deltaY);
      float deltaXNorm = deltaX/deltaNorm;
      float deltaYNorm = deltaY/deltaNorm;

      float wAngle = wheelAngle+M_PI/2;
      float wX = cos(wAngle);
 80104be:	900a      	str	r0, [sp, #40]	; 0x28
      float wY = sin(wAngle);
 80104c0:	4630      	mov	r0, r6
 80104c2:	f001 fe9b 	bl	80121fc <sin>
 80104c6:	4606      	mov	r6, r0
 80104c8:	460f      	mov	r7, r1

      theta_dot += ((deltaXNorm*wX + deltaYNorm*wY)*wX)/(2*M_PI*deltaNorm)*speeds[i];
 80104ca:	4628      	mov	r0, r5
 80104cc:	4641      	mov	r1, r8
 80104ce:	f7f5 fa6b 	bl	80059a8 <__aeabi_fdiv>
 80104d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80104d4:	f7f5 f9b4 	bl	8005840 <__aeabi_fmul>
 80104d8:	4641      	mov	r1, r8
 80104da:	4605      	mov	r5, r0
 80104dc:	4648      	mov	r0, r9
 80104de:	f7f5 fa63 	bl	80059a8 <__aeabi_fdiv>
 80104e2:	4639      	mov	r1, r7
 80104e4:	4681      	mov	r9, r0
 80104e6:	4630      	mov	r0, r6
 80104e8:	f7f5 f84c 	bl	8005584 <__aeabi_d2f>
 80104ec:	4601      	mov	r1, r0
 80104ee:	4648      	mov	r0, r9
 80104f0:	f7f5 f9a6 	bl	8005840 <__aeabi_fmul>
 80104f4:	4601      	mov	r1, r0
 80104f6:	4628      	mov	r0, r5
 80104f8:	f7f5 f89a 	bl	8005630 <__addsf3>
 80104fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80104fe:	f7f5 f99f 	bl	8005840 <__aeabi_fmul>
 8010502:	f7f4 fdb1 	bl	8005068 <__aeabi_f2d>
 8010506:	4606      	mov	r6, r0
 8010508:	4640      	mov	r0, r8
 801050a:	460f      	mov	r7, r1
 801050c:	f7f4 fdac 	bl	8005068 <__aeabi_f2d>
 8010510:	a315      	add	r3, pc, #84	; (adr r3, 8010568 <main+0x840>)
 8010512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010516:	f7f4 fdfb 	bl	8005110 <__aeabi_dmul>
 801051a:	4602      	mov	r2, r0
 801051c:	460b      	mov	r3, r1
 801051e:	4630      	mov	r0, r6
 8010520:	4639      	mov	r1, r7
 8010522:	f7f4 ff1f 	bl	8005364 <__aeabi_ddiv>
 8010526:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801052a:	f7f4 fdf1 	bl	8005110 <__aeabi_dmul>
 801052e:	4606      	mov	r6, r0
 8010530:	4658      	mov	r0, fp
 8010532:	460f      	mov	r7, r1
 8010534:	f7f4 fd98 	bl	8005068 <__aeabi_f2d>
 8010538:	4602      	mov	r2, r0
 801053a:	460b      	mov	r3, r1
 801053c:	4630      	mov	r0, r6
 801053e:	4639      	mov	r1, r7
 8010540:	f7f4 fc34 	bl	8004dac <__adddf3>
 8010544:	f7f5 f81e 	bl	8005584 <__aeabi_d2f>

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 8010548:	f10a 0a01 	add.w	sl, sl, #1
 801054c:	f1ba 0f04 	cmp.w	sl, #4

      float wAngle = wheelAngle+M_PI/2;
      float wX = cos(wAngle);
      float wY = sin(wAngle);

      theta_dot += ((deltaXNorm*wX + deltaYNorm*wY)*wX)/(2*M_PI*deltaNorm)*speeds[i];
 8010550:	4683      	mov	fp, r0

    int i;
    float x_dot = 0;
    float y_dot = 0;
    float theta_dot = 0;
    for(i = 0; i < 4; i++){
 8010552:	f47f aed4 	bne.w	80102fe <main+0x5d6>
 8010556:	e013      	b.n	8010580 <main+0x858>
 8010558:	54442d18 	.word	0x54442d18
 801055c:	400921fb 	.word	0x400921fb
 8010560:	54442d18 	.word	0x54442d18
 8010564:	3ff921fb 	.word	0x3ff921fb
 8010568:	54442d18 	.word	0x54442d18
 801056c:	401921fb 	.word	0x401921fb
 8010570:	3ca3d70b 	.word	0x3ca3d70b
 8010574:	42b40000 	.word	0x42b40000
 8010578:	40668000 	.word	0x40668000
 801057c:	200001d4 	.word	0x200001d4
    x_dot /= 4;
    y_dot /= 4;
    theta_dot /= 4;


    odom_msg.data[0] = x_dot;
 8010580:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8010584:	980e      	ldr	r0, [sp, #56]	; 0x38
 8010586:	f7f5 f95b 	bl	8005840 <__aeabi_fmul>
 801058a:	f8d4 5e0c 	ldr.w	r5, [r4, #3596]	; 0xe0c
    odom_msg.data[1] = y_dot;
 801058e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    x_dot /= 4;
    y_dot /= 4;
    theta_dot /= 4;


    odom_msg.data[0] = x_dot;
 8010592:	6028      	str	r0, [r5, #0]
    odom_msg.data[1] = y_dot;
 8010594:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010596:	f7f5 f953 	bl	8005840 <__aeabi_fmul>
    odom_msg.data[2] = theta_dot;
 801059a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    y_dot /= 4;
    theta_dot /= 4;


    odom_msg.data[0] = x_dot;
    odom_msg.data[1] = y_dot;
 801059e:	6068      	str	r0, [r5, #4]
    odom_msg.data[2] = theta_dot;
 80105a0:	4658      	mov	r0, fp
 80105a2:	f7f5 f94d 	bl	8005840 <__aeabi_fmul>

    //reader(odom_msg);
    //if(odom_msg.data[0] != NULL && odom_msg.data[1] != NULL && odom_msg.data[2] != NULL)
    odom_pub.publish(&odom_msg);
 80105a6:	f504 615e 	add.w	r1, r4, #3552	; 0xde0
    theta_dot /= 4;


    odom_msg.data[0] = x_dot;
    odom_msg.data[1] = y_dot;
    odom_msg.data[2] = theta_dot;
 80105aa:	60a8      	str	r0, [r5, #8]

    //reader(odom_msg);
    //if(odom_msg.data[0] != NULL && odom_msg.data[1] != NULL && odom_msg.data[2] != NULL)
    odom_pub.publish(&odom_msg);
 80105ac:	f604 50a8 	addw	r0, r4, #3496	; 0xda8
 80105b0:	f7ff f9a9 	bl	800f906 <ros::Publisher::publish(ros::Msg const*)>
    debug_pub.publish(&debug_msg);
 80105b4:	f504 6161 	add.w	r1, r4, #3600	; 0xe10
 80105b8:	f604 50bc 	addw	r0, r4, #3516	; 0xdbc
 80105bc:	f7ff f9a3 	bl	800f906 <ros::Publisher::publish(ros::Msg const*)>

    nh.spinOnce();
 80105c0:	f504 6087 	add.w	r0, r4, #1080	; 0x438
 80105c4:	f7ff faa6 	bl	800fb14 <ros::NodeHandle_<ArduinoHardware, 25, 25, 1024, 1024>::spinOnce()>

    elapsed = millis() - start_time;
 80105c8:	f7f0 f832 	bl	8000630 <millis>
    if(elapsed > dt){
 80105cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ce:	1ac0      	subs	r0, r0, r3
 80105d0:	2814      	cmp	r0, #20
 80105d2:	d901      	bls.n	80105d8 <main+0x8b0>

    /*if(shuttingDown){
      connected = false;
      // TODO: Advertise shutdown??
    }else{*/
    if(cnt++%50 == 0)
 80105d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
  float alpha[4] = {-M_PI/4, M_PI/4, 3*M_PI/4, -3*M_PI/4};
  uint32_t elapsed;
  initialized = true;


  while (1){
 80105d6:	e5bd      	b.n	8010154 <main+0x42c>
      //nh.logerror(elapsed_msg);
    }else{
      /*char elapsed_msg2[8];
      sprintf(elapsed_msg2, "%u", elapsed);
      nh.logerror(elapsed_msg2);*/
      while( (millis() - start_time) < dt){}
 80105d8:	f7f0 f82a 	bl	8000630 <millis>
 80105dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105de:	1ac0      	subs	r0, r0, r3
 80105e0:	2813      	cmp	r0, #19
 80105e2:	e7f6      	b.n	80105d2 <main+0x8aa>

080105e4 <_GLOBAL__sub_I_USART_FIFO>:

      /*
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {
 80105e4:	4b55      	ldr	r3, [pc, #340]	; (801073c <_GLOBAL__sub_I_USART_FIFO+0x158>)
 80105e6:	4a56      	ldr	r2, [pc, #344]	; (8010740 <_GLOBAL__sub_I_USART_FIFO+0x15c>)
  while (1){
    debug_toggle();
    delay(100);
    //nh.spinOnce();
  }
}
 80105e8:	b570      	push	{r4, r5, r6, lr}
 80105ea:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
      USART_CNTOUT = 0;
    }
    ArduinoHardware()
    {
      /* Leonardo support */
      iostream = USART1;
 80105ee:	4a55      	ldr	r2, [pc, #340]	; (8010744 <_GLOBAL__sub_I_USART_FIFO+0x160>)
      char* * strings;

    RequestParamResponse():
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80105f0:	4955      	ldr	r1, [pc, #340]	; (8010748 <_GLOBAL__sub_I_USART_FIFO+0x164>)
 80105f2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
      baud_ = 230400;
 80105f6:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80105fa:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
      USART_CNTIN = 0;
 80105fe:	2200      	movs	r2, #0
 8010600:	631a      	str	r2, [r3, #48]	; 0x30
 8010602:	f8c3 1d40 	str.w	r1, [r3, #3392]	; 0xd40
      USART_CNTOUT = 0;
 8010606:	62da      	str	r2, [r3, #44]	; 0x2c
 8010608:	f883 2d2c 	strb.w	r2, [r3, #3372]	; 0xd2c
 801060c:	f883 2d44 	strb.w	r2, [r3, #3396]	; 0xd44
 8010610:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
 8010614:	f883 2d50 	strb.w	r2, [r3, #3408]	; 0xd50
 8010618:	f8c3 2d58 	str.w	r2, [r3, #3416]	; 0xd58
 801061c:	f883 2d5c 	strb.w	r2, [r3, #3420]	; 0xd5c
 8010620:	f8c3 2d64 	str.w	r2, [r3, #3428]	; 0xd64
 8010624:	f603 414c 	addw	r1, r3, #3148	; 0xc4c
 8010628:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;
 801062c:	f841 2f04 	str.w	r2, [r1, #4]!
       * Setup Functions
       */
    public:
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
 8010630:	428b      	cmp	r3, r1
 8010632:	d1fb      	bne.n	801062c <_GLOBAL__sub_I_USART_FIFO+0x48>
 8010634:	4a45      	ldr	r2, [pc, #276]	; (801074c <_GLOBAL__sub_I_USART_FIFO+0x168>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;
 8010636:	2100      	movs	r1, #0
 8010638:	f843 1f04 	str.w	r1, [r3, #4]!
      NodeHandle_() : configured_(false) {

        for(unsigned int i=0; i< MAX_PUBLISHERS; i++)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
 801063c:	429a      	cmp	r2, r3
 801063e:	d1fb      	bne.n	8010638 <_GLOBAL__sub_I_USART_FIFO+0x54>
 8010640:	2300      	movs	r3, #0
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;
 8010642:	4619      	mov	r1, r3
 8010644:	4842      	ldr	r0, [pc, #264]	; (8010750 <_GLOBAL__sub_I_USART_FIFO+0x16c>)
 8010646:	18c2      	adds	r2, r0, r3
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010648:	3301      	adds	r3, #1
 801064a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
	   message_in[i] = 0;
 801064e:	7611      	strb	r1, [r2, #24]
 8010650:	4d3f      	ldr	r5, [pc, #252]	; (8010750 <_GLOBAL__sub_I_USART_FIFO+0x16c>)
	   publishers[i] = 0;

        for(unsigned int i=0; i< MAX_SUBSCRIBERS; i++)
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
 8010652:	d1f8      	bne.n	8010646 <_GLOBAL__sub_I_USART_FIFO+0x62>
 8010654:	2100      	movs	r1, #0
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
	   message_out[i] = 0;
 8010656:	460c      	mov	r4, r1
 8010658:	1868      	adds	r0, r5, r1
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 801065a:	3101      	adds	r1, #1
 801065c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
	   message_out[i] = 0;
 8010660:	4b36      	ldr	r3, [pc, #216]	; (801073c <_GLOBAL__sub_I_USART_FIFO+0x158>)
 8010662:	f04f 0200 	mov.w	r2, #0
 8010666:	f880 4418 	strb.w	r4, [r0, #1048]	; 0x418
	   subscribers[i] = 0;

        for(unsigned int i=0; i< INPUT_SIZE; i++)
	   message_in[i] = 0;

        for(unsigned int i=0; i< OUTPUT_SIZE; i++)
 801066a:	d1f5      	bne.n	8010658 <_GLOBAL__sub_I_USART_FIFO+0x74>
      typedef void(*CallbackT)(const MsgT&);
      MsgT msg;

      Subscriber(const char * topic_name, CallbackT cb, int endpoint=rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
        cb_(cb),
        endpoint_(endpoint)
 801066c:	4939      	ldr	r1, [pc, #228]	; (8010754 <_GLOBAL__sub_I_USART_FIFO+0x170>)
      const char* frame_id;

    Header():
      seq(0),
      stamp(),
      frame_id("")
 801066e:	483a      	ldr	r0, [pc, #232]	; (8010758 <_GLOBAL__sub_I_USART_FIFO+0x174>)
 8010670:	f8c3 1d68 	str.w	r1, [r3, #3432]	; 0xd68
      header(),
      heading_angle(0),
      heading_velocity(0),
      speed(0),
      acceleration(0),
      mode(0)
 8010674:	4939      	ldr	r1, [pc, #228]	; (801075c <_GLOBAL__sub_I_USART_FIFO+0x178>)
      float st_data;
      float * data;

    Float32MultiArray():
      layout(),
      data_length(0), data(NULL)
 8010676:	4e3a      	ldr	r6, [pc, #232]	; (8010760 <_GLOBAL__sub_I_USART_FIFO+0x17c>)
 8010678:	f8c3 1d74 	str.w	r1, [r3, #3444]	; 0xd74
 801067c:	4939      	ldr	r1, [pc, #228]	; (8010764 <_GLOBAL__sub_I_USART_FIFO+0x180>)
      std_msgs::MultiArrayDimension * dim;
      uint32_t data_offset;

    MultiArrayLayout():
      dim_length(0), dim(NULL),
      data_offset(0)
 801067e:	4d3a      	ldr	r5, [pc, #232]	; (8010768 <_GLOBAL__sub_I_USART_FIFO+0x184>)
 8010680:	f8c3 1d78 	str.w	r1, [r3, #3448]	; 0xd78
 8010684:	2100      	movs	r1, #0
 8010686:	f8c3 1d8c 	str.w	r1, [r3, #3468]	; 0xd8c
 801068a:	f8c3 1d90 	str.w	r1, [r3, #3472]	; 0xd90
 801068e:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
 8010692:	f8c3 1d98 	str.w	r1, [r3, #3480]	; 0xd98
 8010696:	4935      	ldr	r1, [pc, #212]	; (801076c <_GLOBAL__sub_I_USART_FIFO+0x188>)
      uint32_t stride;

    MultiArrayDimension():
      label(""),
      size(0),
      stride(0)
 8010698:	4c35      	ldr	r4, [pc, #212]	; (8010770 <_GLOBAL__sub_I_USART_FIFO+0x18c>)
 801069a:	f8c3 1da0 	str.w	r1, [r3, #3488]	; 0xda0
 801069e:	2101      	movs	r1, #1
 80106a0:	f8c3 1da4 	str.w	r1, [r3, #3492]	; 0xda4
      {
        topic_ = topic_name;
 80106a4:	4933      	ldr	r1, [pc, #204]	; (8010774 <_GLOBAL__sub_I_USART_FIFO+0x190>)
 80106a6:	f8c3 0d88 	str.w	r0, [r3, #3464]	; 0xd88
 80106aa:	f8c3 1d70 	str.w	r1, [r3, #3440]	; 0xd70
  {
    public:
      Publisher( const char * topic_name, Msg * msg, int endpoint=rosserial_msgs::TopicInfo::ID_PUBLISHER) :
        topic_(topic_name), 
        msg_(msg),
        endpoint_(endpoint) {};
 80106ae:	4932      	ldr	r1, [pc, #200]	; (8010778 <_GLOBAL__sub_I_USART_FIFO+0x194>)
 80106b0:	f8c3 0e20 	str.w	r0, [r3, #3616]	; 0xe20
 80106b4:	f8c3 1dbc 	str.w	r1, [r3, #3516]	; 0xdbc
 80106b8:	f503 6161 	add.w	r1, r3, #3600	; 0xe10
 80106bc:	f8c3 1dc0 	str.w	r1, [r3, #3520]	; 0xdc0
 80106c0:	f8c3 2d7c 	str.w	r2, [r3, #3452]	; 0xd7c
 80106c4:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
 80106c8:	f8c3 2d84 	str.w	r2, [r3, #3460]	; 0xd84
 80106cc:	f883 2d9c 	strb.w	r2, [r3, #3484]	; 0xd9c
 80106d0:	f8c3 6e10 	str.w	r6, [r3, #3600]	; 0xe10
 80106d4:	f8c3 5e14 	str.w	r5, [r3, #3604]	; 0xe14
 80106d8:	f883 2e18 	strb.w	r2, [r3, #3608]	; 0xe18
 80106dc:	f8c3 4e1c 	str.w	r4, [r3, #3612]	; 0xe1c
 80106e0:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
 80106e4:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
 80106e8:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
 80106ec:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
 80106f0:	f883 2e34 	strb.w	r2, [r3, #3636]	; 0xe34
 80106f4:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
 80106f8:	f8c3 2dcc 	str.w	r2, [r3, #3532]	; 0xdcc
 80106fc:	f8c3 6de0 	str.w	r6, [r3, #3552]	; 0xde0
 8010700:	f8c3 5de4 	str.w	r5, [r3, #3556]	; 0xde4
 8010704:	f883 2de8 	strb.w	r2, [r3, #3560]	; 0xde8
 8010708:	f8c3 4dec 	str.w	r4, [r3, #3564]	; 0xdec
 801070c:	f8c3 0df0 	str.w	r0, [r3, #3568]	; 0xdf0
 8010710:	481a      	ldr	r0, [pc, #104]	; (801077c <_GLOBAL__sub_I_USART_FIFO+0x198>)
 8010712:	f503 615e 	add.w	r1, r3, #3552	; 0xde0
 8010716:	f883 2e04 	strb.w	r2, [r3, #3588]	; 0xe04
 801071a:	f8c3 2df4 	str.w	r2, [r3, #3572]	; 0xdf4
 801071e:	f8c3 2df8 	str.w	r2, [r3, #3576]	; 0xdf8
 8010722:	f8c3 2dfc 	str.w	r2, [r3, #3580]	; 0xdfc
 8010726:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
 801072a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
 801072e:	f8c3 0da8 	str.w	r0, [r3, #3496]	; 0xda8
 8010732:	f8c3 1dac 	str.w	r1, [r3, #3500]	; 0xdac
 8010736:	f8c3 2db8 	str.w	r2, [r3, #3512]	; 0xdb8
 801073a:	bd70      	pop	{r4, r5, r6, pc}
 801073c:	200001d4 	.word	0x200001d4
 8010740:	08015288 	.word	0x08015288
 8010744:	40013800 	.word	0x40013800
 8010748:	080151f8 	.word	0x080151f8
 801074c:	20000ee8 	.word	0x20000ee8
 8010750:	2000060c 	.word	0x2000060c
 8010754:	0801529c 	.word	0x0801529c
 8010758:	080157ad 	.word	0x080157ad
 801075c:	08015270 	.word	0x08015270
 8010760:	08015240 	.word	0x08015240
 8010764:	08015258 	.word	0x08015258
 8010768:	08015228 	.word	0x08015228
 801076c:	080041e1 	.word	0x080041e1
 8010770:	08015210 	.word	0x08015210
 8010774:	08015505 	.word	0x08015505
 8010778:	08015517 	.word	0x08015517
 801077c:	0801551d 	.word	0x0801551d

08010780 <servo::motorType()>:
    virtual float getReference();
    virtual const char* motorName();
    //virtual std::tuple<float, int, int, int> update(float dt, bool connected);
    virtual float update(float dt, bool connected, bool enable);

    virtual int motorType() { return MOTOR_TYPE_SERVO; }
 8010780:	2001      	movs	r0, #1
 8010782:	4770      	bx	lr

08010784 <DCMotor::motorType()>:
    virtual float getReference();
    virtual const char* motorName();
    //virtual std::tuple<float, int, int, int> update(float dt, bool connected);
    virtual float update(float dt, bool connected, bool enable);

    virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
 8010784:	2002      	movs	r0, #2
 8010786:	4770      	bx	lr

08010788 <abort>:
 8010788:	b508      	push	{r3, lr}
 801078a:	2006      	movs	r0, #6
 801078c:	f000 f8d8 	bl	8010940 <raise>
 8010790:	2001      	movs	r0, #1
 8010792:	f000 fd0f 	bl	80111b4 <_exit>
	...

08010798 <exit>:
 8010798:	b508      	push	{r3, lr}
 801079a:	4b07      	ldr	r3, [pc, #28]	; (80107b8 <exit+0x20>)
 801079c:	4604      	mov	r4, r0
 801079e:	b113      	cbz	r3, 80107a6 <exit+0xe>
 80107a0:	2100      	movs	r1, #0
 80107a2:	f3af 8000 	nop.w
 80107a6:	4b05      	ldr	r3, [pc, #20]	; (80107bc <exit+0x24>)
 80107a8:	6818      	ldr	r0, [r3, #0]
 80107aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80107ac:	b103      	cbz	r3, 80107b0 <exit+0x18>
 80107ae:	4798      	blx	r3
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 fcff 	bl	80111b4 <_exit>
 80107b6:	bf00      	nop
 80107b8:	00000000 	.word	0x00000000
 80107bc:	08015528 	.word	0x08015528

080107c0 <__libc_init_array>:
 80107c0:	4b0e      	ldr	r3, [pc, #56]	; (80107fc <__libc_init_array+0x3c>)
 80107c2:	b570      	push	{r4, r5, r6, lr}
 80107c4:	461e      	mov	r6, r3
 80107c6:	4c0e      	ldr	r4, [pc, #56]	; (8010800 <__libc_init_array+0x40>)
 80107c8:	2500      	movs	r5, #0
 80107ca:	1ae4      	subs	r4, r4, r3
 80107cc:	10a4      	asrs	r4, r4, #2
 80107ce:	42a5      	cmp	r5, r4
 80107d0:	d004      	beq.n	80107dc <__libc_init_array+0x1c>
 80107d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80107d6:	4798      	blx	r3
 80107d8:	3501      	adds	r5, #1
 80107da:	e7f8      	b.n	80107ce <__libc_init_array+0xe>
 80107dc:	f003 ff92 	bl	8014704 <_init>
 80107e0:	4b08      	ldr	r3, [pc, #32]	; (8010804 <__libc_init_array+0x44>)
 80107e2:	4c09      	ldr	r4, [pc, #36]	; (8010808 <__libc_init_array+0x48>)
 80107e4:	461e      	mov	r6, r3
 80107e6:	1ae4      	subs	r4, r4, r3
 80107e8:	10a4      	asrs	r4, r4, #2
 80107ea:	2500      	movs	r5, #0
 80107ec:	42a5      	cmp	r5, r4
 80107ee:	d004      	beq.n	80107fa <__libc_init_array+0x3a>
 80107f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80107f4:	4798      	blx	r3
 80107f6:	3501      	adds	r5, #1
 80107f8:	e7f8      	b.n	80107ec <__libc_init_array+0x2c>
 80107fa:	bd70      	pop	{r4, r5, r6, pc}
 80107fc:	080164a0 	.word	0x080164a0
 8010800:	080164a0 	.word	0x080164a0
 8010804:	080164a0 	.word	0x080164a0
 8010808:	080164a8 	.word	0x080164a8

0801080c <memcpy>:
 801080c:	b510      	push	{r4, lr}
 801080e:	1e43      	subs	r3, r0, #1
 8010810:	440a      	add	r2, r1
 8010812:	4291      	cmp	r1, r2
 8010814:	d004      	beq.n	8010820 <memcpy+0x14>
 8010816:	f811 4b01 	ldrb.w	r4, [r1], #1
 801081a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801081e:	e7f8      	b.n	8010812 <memcpy+0x6>
 8010820:	bd10      	pop	{r4, pc}

08010822 <memset>:
 8010822:	4603      	mov	r3, r0
 8010824:	4402      	add	r2, r0
 8010826:	4293      	cmp	r3, r2
 8010828:	d002      	beq.n	8010830 <memset+0xe>
 801082a:	f803 1b01 	strb.w	r1, [r3], #1
 801082e:	e7fa      	b.n	8010826 <memset+0x4>
 8010830:	4770      	bx	lr
	...

08010834 <realloc>:
 8010834:	4b02      	ldr	r3, [pc, #8]	; (8010840 <realloc+0xc>)
 8010836:	460a      	mov	r2, r1
 8010838:	4601      	mov	r1, r0
 801083a:	6818      	ldr	r0, [r3, #0]
 801083c:	f000 b906 	b.w	8010a4c <_realloc_r>
 8010840:	2000019c 	.word	0x2000019c

08010844 <_init_signal_r>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8010848:	4605      	mov	r5, r0
 801084a:	b10c      	cbz	r4, 8010850 <_init_signal_r+0xc>
 801084c:	2000      	movs	r0, #0
 801084e:	bd38      	pop	{r3, r4, r5, pc}
 8010850:	2180      	movs	r1, #128	; 0x80
 8010852:	f000 f8a7 	bl	80109a4 <_malloc_r>
 8010856:	6468      	str	r0, [r5, #68]	; 0x44
 8010858:	b138      	cbz	r0, 801086a <_init_signal_r+0x26>
 801085a:	4623      	mov	r3, r4
 801085c:	4621      	mov	r1, r4
 801085e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8010860:	50d1      	str	r1, [r2, r3]
 8010862:	3304      	adds	r3, #4
 8010864:	2b80      	cmp	r3, #128	; 0x80
 8010866:	d1fa      	bne.n	801085e <_init_signal_r+0x1a>
 8010868:	e7f0      	b.n	801084c <_init_signal_r+0x8>
 801086a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801086e:	bd38      	pop	{r3, r4, r5, pc}

08010870 <_signal_r>:
 8010870:	291f      	cmp	r1, #31
 8010872:	b570      	push	{r4, r5, r6, lr}
 8010874:	4604      	mov	r4, r0
 8010876:	460d      	mov	r5, r1
 8010878:	4616      	mov	r6, r2
 801087a:	d902      	bls.n	8010882 <_signal_r+0x12>
 801087c:	2316      	movs	r3, #22
 801087e:	6003      	str	r3, [r0, #0]
 8010880:	e00b      	b.n	801089a <_signal_r+0x2a>
 8010882:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010884:	b12b      	cbz	r3, 8010892 <_signal_r+0x22>
 8010886:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010888:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801088c:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 8010890:	bd70      	pop	{r4, r5, r6, pc}
 8010892:	f7ff ffd7 	bl	8010844 <_init_signal_r>
 8010896:	2800      	cmp	r0, #0
 8010898:	d0f5      	beq.n	8010886 <_signal_r+0x16>
 801089a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801089e:	bd70      	pop	{r4, r5, r6, pc}

080108a0 <_raise_r>:
 80108a0:	291f      	cmp	r1, #31
 80108a2:	b538      	push	{r3, r4, r5, lr}
 80108a4:	4604      	mov	r4, r0
 80108a6:	460d      	mov	r5, r1
 80108a8:	d904      	bls.n	80108b4 <_raise_r+0x14>
 80108aa:	2316      	movs	r3, #22
 80108ac:	6003      	str	r3, [r0, #0]
 80108ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108b2:	bd38      	pop	{r3, r4, r5, pc}
 80108b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80108b6:	b112      	cbz	r2, 80108be <_raise_r+0x1e>
 80108b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108bc:	b94b      	cbnz	r3, 80108d2 <_raise_r+0x32>
 80108be:	4620      	mov	r0, r4
 80108c0:	f000 f86e 	bl	80109a0 <_getpid_r>
 80108c4:	462a      	mov	r2, r5
 80108c6:	4601      	mov	r1, r0
 80108c8:	4620      	mov	r0, r4
 80108ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108ce:	f000 b855 	b.w	801097c <_kill_r>
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d00c      	beq.n	80108f0 <_raise_r+0x50>
 80108d6:	1c59      	adds	r1, r3, #1
 80108d8:	d103      	bne.n	80108e2 <_raise_r+0x42>
 80108da:	2316      	movs	r3, #22
 80108dc:	6003      	str	r3, [r0, #0]
 80108de:	2001      	movs	r0, #1
 80108e0:	bd38      	pop	{r3, r4, r5, pc}
 80108e2:	2400      	movs	r4, #0
 80108e4:	4628      	mov	r0, r5
 80108e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108ea:	4798      	blx	r3
 80108ec:	4620      	mov	r0, r4
 80108ee:	bd38      	pop	{r3, r4, r5, pc}
 80108f0:	2000      	movs	r0, #0
 80108f2:	bd38      	pop	{r3, r4, r5, pc}

080108f4 <__sigtramp_r>:
 80108f4:	291f      	cmp	r1, #31
 80108f6:	b538      	push	{r3, r4, r5, lr}
 80108f8:	4604      	mov	r4, r0
 80108fa:	460d      	mov	r5, r1
 80108fc:	d902      	bls.n	8010904 <__sigtramp_r+0x10>
 80108fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010902:	bd38      	pop	{r3, r4, r5, pc}
 8010904:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010906:	b123      	cbz	r3, 8010912 <__sigtramp_r+0x1e>
 8010908:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801090a:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 801090e:	b92b      	cbnz	r3, 801091c <__sigtramp_r+0x28>
 8010910:	e00f      	b.n	8010932 <__sigtramp_r+0x3e>
 8010912:	f7ff ff97 	bl	8010844 <_init_signal_r>
 8010916:	2800      	cmp	r0, #0
 8010918:	d0f6      	beq.n	8010908 <__sigtramp_r+0x14>
 801091a:	e7f0      	b.n	80108fe <__sigtramp_r+0xa>
 801091c:	1c59      	adds	r1, r3, #1
 801091e:	d00a      	beq.n	8010936 <__sigtramp_r+0x42>
 8010920:	2b01      	cmp	r3, #1
 8010922:	d00a      	beq.n	801093a <__sigtramp_r+0x46>
 8010924:	2400      	movs	r4, #0
 8010926:	4628      	mov	r0, r5
 8010928:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801092c:	4798      	blx	r3
 801092e:	4620      	mov	r0, r4
 8010930:	bd38      	pop	{r3, r4, r5, pc}
 8010932:	2001      	movs	r0, #1
 8010934:	bd38      	pop	{r3, r4, r5, pc}
 8010936:	2002      	movs	r0, #2
 8010938:	bd38      	pop	{r3, r4, r5, pc}
 801093a:	2003      	movs	r0, #3
 801093c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010940 <raise>:
 8010940:	4b02      	ldr	r3, [pc, #8]	; (801094c <raise+0xc>)
 8010942:	4601      	mov	r1, r0
 8010944:	6818      	ldr	r0, [r3, #0]
 8010946:	f7ff bfab 	b.w	80108a0 <_raise_r>
 801094a:	bf00      	nop
 801094c:	2000019c 	.word	0x2000019c

08010950 <signal>:
 8010950:	4b02      	ldr	r3, [pc, #8]	; (801095c <signal+0xc>)
 8010952:	460a      	mov	r2, r1
 8010954:	4601      	mov	r1, r0
 8010956:	6818      	ldr	r0, [r3, #0]
 8010958:	f7ff bf8a 	b.w	8010870 <_signal_r>
 801095c:	2000019c 	.word	0x2000019c

08010960 <_init_signal>:
 8010960:	4b01      	ldr	r3, [pc, #4]	; (8010968 <_init_signal+0x8>)
 8010962:	6818      	ldr	r0, [r3, #0]
 8010964:	f7ff bf6e 	b.w	8010844 <_init_signal_r>
 8010968:	2000019c 	.word	0x2000019c

0801096c <__sigtramp>:
 801096c:	4b02      	ldr	r3, [pc, #8]	; (8010978 <__sigtramp+0xc>)
 801096e:	4601      	mov	r1, r0
 8010970:	6818      	ldr	r0, [r3, #0]
 8010972:	f7ff bfbf 	b.w	80108f4 <__sigtramp_r>
 8010976:	bf00      	nop
 8010978:	2000019c 	.word	0x2000019c

0801097c <_kill_r>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	4c07      	ldr	r4, [pc, #28]	; (801099c <_kill_r+0x20>)
 8010980:	2300      	movs	r3, #0
 8010982:	4605      	mov	r5, r0
 8010984:	4608      	mov	r0, r1
 8010986:	4611      	mov	r1, r2
 8010988:	6023      	str	r3, [r4, #0]
 801098a:	f000 fc17 	bl	80111bc <_kill>
 801098e:	1c43      	adds	r3, r0, #1
 8010990:	d102      	bne.n	8010998 <_kill_r+0x1c>
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	b103      	cbz	r3, 8010998 <_kill_r+0x1c>
 8010996:	602b      	str	r3, [r5, #0]
 8010998:	bd38      	pop	{r3, r4, r5, pc}
 801099a:	bf00      	nop
 801099c:	200010f8 	.word	0x200010f8

080109a0 <_getpid_r>:
 80109a0:	f000 ba98 	b.w	8010ed4 <_getpid>

080109a4 <_malloc_r>:
 80109a4:	b570      	push	{r4, r5, r6, lr}
 80109a6:	1ccd      	adds	r5, r1, #3
 80109a8:	f025 0503 	bic.w	r5, r5, #3
 80109ac:	3508      	adds	r5, #8
 80109ae:	2d0c      	cmp	r5, #12
 80109b0:	bf38      	it	cc
 80109b2:	250c      	movcc	r5, #12
 80109b4:	2d00      	cmp	r5, #0
 80109b6:	4606      	mov	r6, r0
 80109b8:	da03      	bge.n	80109c2 <_malloc_r+0x1e>
 80109ba:	230c      	movs	r3, #12
 80109bc:	6033      	str	r3, [r6, #0]
 80109be:	2000      	movs	r0, #0
 80109c0:	bd70      	pop	{r4, r5, r6, pc}
 80109c2:	42a9      	cmp	r1, r5
 80109c4:	d8f9      	bhi.n	80109ba <_malloc_r+0x16>
 80109c6:	4b1f      	ldr	r3, [pc, #124]	; (8010a44 <_malloc_r+0xa0>)
 80109c8:	681c      	ldr	r4, [r3, #0]
 80109ca:	461a      	mov	r2, r3
 80109cc:	4621      	mov	r1, r4
 80109ce:	b1a1      	cbz	r1, 80109fa <_malloc_r+0x56>
 80109d0:	680b      	ldr	r3, [r1, #0]
 80109d2:	1b5b      	subs	r3, r3, r5
 80109d4:	d40e      	bmi.n	80109f4 <_malloc_r+0x50>
 80109d6:	2b0b      	cmp	r3, #11
 80109d8:	d903      	bls.n	80109e2 <_malloc_r+0x3e>
 80109da:	600b      	str	r3, [r1, #0]
 80109dc:	18cc      	adds	r4, r1, r3
 80109de:	50cd      	str	r5, [r1, r3]
 80109e0:	e01e      	b.n	8010a20 <_malloc_r+0x7c>
 80109e2:	428c      	cmp	r4, r1
 80109e4:	bf0b      	itete	eq
 80109e6:	6863      	ldreq	r3, [r4, #4]
 80109e8:	684b      	ldrne	r3, [r1, #4]
 80109ea:	6013      	streq	r3, [r2, #0]
 80109ec:	6063      	strne	r3, [r4, #4]
 80109ee:	bf18      	it	ne
 80109f0:	460c      	movne	r4, r1
 80109f2:	e015      	b.n	8010a20 <_malloc_r+0x7c>
 80109f4:	460c      	mov	r4, r1
 80109f6:	6849      	ldr	r1, [r1, #4]
 80109f8:	e7e9      	b.n	80109ce <_malloc_r+0x2a>
 80109fa:	4c13      	ldr	r4, [pc, #76]	; (8010a48 <_malloc_r+0xa4>)
 80109fc:	6823      	ldr	r3, [r4, #0]
 80109fe:	b91b      	cbnz	r3, 8010a08 <_malloc_r+0x64>
 8010a00:	4630      	mov	r0, r6
 8010a02:	f000 f8b1 	bl	8010b68 <_sbrk_r>
 8010a06:	6020      	str	r0, [r4, #0]
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f000 f8ac 	bl	8010b68 <_sbrk_r>
 8010a10:	1c43      	adds	r3, r0, #1
 8010a12:	d0d2      	beq.n	80109ba <_malloc_r+0x16>
 8010a14:	1cc4      	adds	r4, r0, #3
 8010a16:	f024 0403 	bic.w	r4, r4, #3
 8010a1a:	42a0      	cmp	r0, r4
 8010a1c:	d10a      	bne.n	8010a34 <_malloc_r+0x90>
 8010a1e:	6025      	str	r5, [r4, #0]
 8010a20:	f104 000b 	add.w	r0, r4, #11
 8010a24:	1d23      	adds	r3, r4, #4
 8010a26:	f020 0007 	bic.w	r0, r0, #7
 8010a2a:	1ac3      	subs	r3, r0, r3
 8010a2c:	d009      	beq.n	8010a42 <_malloc_r+0x9e>
 8010a2e:	425a      	negs	r2, r3
 8010a30:	50e2      	str	r2, [r4, r3]
 8010a32:	bd70      	pop	{r4, r5, r6, pc}
 8010a34:	1a21      	subs	r1, r4, r0
 8010a36:	4630      	mov	r0, r6
 8010a38:	f000 f896 	bl	8010b68 <_sbrk_r>
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	d1ee      	bne.n	8010a1e <_malloc_r+0x7a>
 8010a40:	e7bb      	b.n	80109ba <_malloc_r+0x16>
 8010a42:	bd70      	pop	{r4, r5, r6, pc}
 8010a44:	20001018 	.word	0x20001018
 8010a48:	20001014 	.word	0x20001014

08010a4c <_realloc_r>:
 8010a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4e:	4607      	mov	r7, r0
 8010a50:	4615      	mov	r5, r2
 8010a52:	460e      	mov	r6, r1
 8010a54:	b921      	cbnz	r1, 8010a60 <_realloc_r+0x14>
 8010a56:	4611      	mov	r1, r2
 8010a58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010a5c:	f7ff bfa2 	b.w	80109a4 <_malloc_r>
 8010a60:	b91a      	cbnz	r2, 8010a6a <_realloc_r+0x1e>
 8010a62:	f000 f891 	bl	8010b88 <_free_r>
 8010a66:	4628      	mov	r0, r5
 8010a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6a:	f000 f8d1 	bl	8010c10 <_malloc_usable_size_r>
 8010a6e:	4285      	cmp	r5, r0
 8010a70:	d90e      	bls.n	8010a90 <_realloc_r+0x44>
 8010a72:	4629      	mov	r1, r5
 8010a74:	4638      	mov	r0, r7
 8010a76:	f7ff ff95 	bl	80109a4 <_malloc_r>
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	b150      	cbz	r0, 8010a94 <_realloc_r+0x48>
 8010a7e:	4631      	mov	r1, r6
 8010a80:	462a      	mov	r2, r5
 8010a82:	f7ff fec3 	bl	801080c <memcpy>
 8010a86:	4631      	mov	r1, r6
 8010a88:	4638      	mov	r0, r7
 8010a8a:	f000 f87d 	bl	8010b88 <_free_r>
 8010a8e:	e001      	b.n	8010a94 <_realloc_r+0x48>
 8010a90:	4630      	mov	r0, r6
 8010a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a94:	4620      	mov	r0, r4
 8010a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a98 <cleanup_glue>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	460c      	mov	r4, r1
 8010a9c:	6809      	ldr	r1, [r1, #0]
 8010a9e:	4605      	mov	r5, r0
 8010aa0:	b109      	cbz	r1, 8010aa6 <cleanup_glue+0xe>
 8010aa2:	f7ff fff9 	bl	8010a98 <cleanup_glue>
 8010aa6:	4621      	mov	r1, r4
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010aae:	f000 b86b 	b.w	8010b88 <_free_r>
	...

08010ab4 <_reclaim_reent>:
 8010ab4:	4b2b      	ldr	r3, [pc, #172]	; (8010b64 <_reclaim_reent+0xb0>)
 8010ab6:	b570      	push	{r4, r5, r6, lr}
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	4604      	mov	r4, r0
 8010abc:	4283      	cmp	r3, r0
 8010abe:	d050      	beq.n	8010b62 <_reclaim_reent+0xae>
 8010ac0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010ac2:	b1d3      	cbz	r3, 8010afa <_reclaim_reent+0x46>
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	b193      	cbz	r3, 8010aee <_reclaim_reent+0x3a>
 8010ac8:	2500      	movs	r5, #0
 8010aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	5959      	ldr	r1, [r3, r5]
 8010ad0:	b129      	cbz	r1, 8010ade <_reclaim_reent+0x2a>
 8010ad2:	680e      	ldr	r6, [r1, #0]
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f000 f857 	bl	8010b88 <_free_r>
 8010ada:	4631      	mov	r1, r6
 8010adc:	e7f8      	b.n	8010ad0 <_reclaim_reent+0x1c>
 8010ade:	3504      	adds	r5, #4
 8010ae0:	2d80      	cmp	r5, #128	; 0x80
 8010ae2:	d1f2      	bne.n	8010aca <_reclaim_reent+0x16>
 8010ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	68d9      	ldr	r1, [r3, #12]
 8010aea:	f000 f84d 	bl	8010b88 <_free_r>
 8010aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010af0:	6819      	ldr	r1, [r3, #0]
 8010af2:	b111      	cbz	r1, 8010afa <_reclaim_reent+0x46>
 8010af4:	4620      	mov	r0, r4
 8010af6:	f000 f847 	bl	8010b88 <_free_r>
 8010afa:	6961      	ldr	r1, [r4, #20]
 8010afc:	b111      	cbz	r1, 8010b04 <_reclaim_reent+0x50>
 8010afe:	4620      	mov	r0, r4
 8010b00:	f000 f842 	bl	8010b88 <_free_r>
 8010b04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010b06:	b111      	cbz	r1, 8010b0e <_reclaim_reent+0x5a>
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f000 f83d 	bl	8010b88 <_free_r>
 8010b0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010b10:	b111      	cbz	r1, 8010b18 <_reclaim_reent+0x64>
 8010b12:	4620      	mov	r0, r4
 8010b14:	f000 f838 	bl	8010b88 <_free_r>
 8010b18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010b1a:	b111      	cbz	r1, 8010b22 <_reclaim_reent+0x6e>
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	f000 f833 	bl	8010b88 <_free_r>
 8010b22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010b24:	b111      	cbz	r1, 8010b2c <_reclaim_reent+0x78>
 8010b26:	4620      	mov	r0, r4
 8010b28:	f000 f82e 	bl	8010b88 <_free_r>
 8010b2c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010b2e:	b111      	cbz	r1, 8010b36 <_reclaim_reent+0x82>
 8010b30:	4620      	mov	r0, r4
 8010b32:	f000 f829 	bl	8010b88 <_free_r>
 8010b36:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010b38:	b111      	cbz	r1, 8010b40 <_reclaim_reent+0x8c>
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f000 f824 	bl	8010b88 <_free_r>
 8010b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b42:	b111      	cbz	r1, 8010b4a <_reclaim_reent+0x96>
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 f81f 	bl	8010b88 <_free_r>
 8010b4a:	69a3      	ldr	r3, [r4, #24]
 8010b4c:	b14b      	cbz	r3, 8010b62 <_reclaim_reent+0xae>
 8010b4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010b50:	4620      	mov	r0, r4
 8010b52:	4798      	blx	r3
 8010b54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010b56:	b121      	cbz	r1, 8010b62 <_reclaim_reent+0xae>
 8010b58:	4620      	mov	r0, r4
 8010b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b5e:	f7ff bf9b 	b.w	8010a98 <cleanup_glue>
 8010b62:	bd70      	pop	{r4, r5, r6, pc}
 8010b64:	2000019c 	.word	0x2000019c

08010b68 <_sbrk_r>:
 8010b68:	b538      	push	{r3, r4, r5, lr}
 8010b6a:	4c06      	ldr	r4, [pc, #24]	; (8010b84 <_sbrk_r+0x1c>)
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	4605      	mov	r5, r0
 8010b70:	4608      	mov	r0, r1
 8010b72:	6023      	str	r3, [r4, #0]
 8010b74:	f000 f9b0 	bl	8010ed8 <_sbrk>
 8010b78:	1c43      	adds	r3, r0, #1
 8010b7a:	d102      	bne.n	8010b82 <_sbrk_r+0x1a>
 8010b7c:	6823      	ldr	r3, [r4, #0]
 8010b7e:	b103      	cbz	r3, 8010b82 <_sbrk_r+0x1a>
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	bd38      	pop	{r3, r4, r5, pc}
 8010b84:	200010f8 	.word	0x200010f8

08010b88 <_free_r>:
 8010b88:	b530      	push	{r4, r5, lr}
 8010b8a:	2900      	cmp	r1, #0
 8010b8c:	d03c      	beq.n	8010c08 <_free_r+0x80>
 8010b8e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8010b92:	1f0b      	subs	r3, r1, #4
 8010b94:	491d      	ldr	r1, [pc, #116]	; (8010c0c <_free_r+0x84>)
 8010b96:	2a00      	cmp	r2, #0
 8010b98:	bfb8      	it	lt
 8010b9a:	189b      	addlt	r3, r3, r2
 8010b9c:	680a      	ldr	r2, [r1, #0]
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	b912      	cbnz	r2, 8010ba8 <_free_r+0x20>
 8010ba2:	605a      	str	r2, [r3, #4]
 8010ba4:	600b      	str	r3, [r1, #0]
 8010ba6:	bd30      	pop	{r4, r5, pc}
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d90d      	bls.n	8010bc8 <_free_r+0x40>
 8010bac:	6819      	ldr	r1, [r3, #0]
 8010bae:	1858      	adds	r0, r3, r1
 8010bb0:	4282      	cmp	r2, r0
 8010bb2:	bf01      	itttt	eq
 8010bb4:	6810      	ldreq	r0, [r2, #0]
 8010bb6:	6852      	ldreq	r2, [r2, #4]
 8010bb8:	1809      	addeq	r1, r1, r0
 8010bba:	6019      	streq	r1, [r3, #0]
 8010bbc:	605a      	str	r2, [r3, #4]
 8010bbe:	6023      	str	r3, [r4, #0]
 8010bc0:	bd30      	pop	{r4, r5, pc}
 8010bc2:	4299      	cmp	r1, r3
 8010bc4:	d803      	bhi.n	8010bce <_free_r+0x46>
 8010bc6:	460a      	mov	r2, r1
 8010bc8:	6851      	ldr	r1, [r2, #4]
 8010bca:	2900      	cmp	r1, #0
 8010bcc:	d1f9      	bne.n	8010bc2 <_free_r+0x3a>
 8010bce:	6814      	ldr	r4, [r2, #0]
 8010bd0:	1915      	adds	r5, r2, r4
 8010bd2:	429d      	cmp	r5, r3
 8010bd4:	d10a      	bne.n	8010bec <_free_r+0x64>
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4423      	add	r3, r4
 8010bda:	18d0      	adds	r0, r2, r3
 8010bdc:	4281      	cmp	r1, r0
 8010bde:	6013      	str	r3, [r2, #0]
 8010be0:	d112      	bne.n	8010c08 <_free_r+0x80>
 8010be2:	6808      	ldr	r0, [r1, #0]
 8010be4:	4403      	add	r3, r0
 8010be6:	6013      	str	r3, [r2, #0]
 8010be8:	684b      	ldr	r3, [r1, #4]
 8010bea:	e00c      	b.n	8010c06 <_free_r+0x7e>
 8010bec:	d902      	bls.n	8010bf4 <_free_r+0x6c>
 8010bee:	230c      	movs	r3, #12
 8010bf0:	6003      	str	r3, [r0, #0]
 8010bf2:	bd30      	pop	{r4, r5, pc}
 8010bf4:	6818      	ldr	r0, [r3, #0]
 8010bf6:	181c      	adds	r4, r3, r0
 8010bf8:	42a1      	cmp	r1, r4
 8010bfa:	bf01      	itttt	eq
 8010bfc:	680c      	ldreq	r4, [r1, #0]
 8010bfe:	6849      	ldreq	r1, [r1, #4]
 8010c00:	1900      	addeq	r0, r0, r4
 8010c02:	6018      	streq	r0, [r3, #0]
 8010c04:	6059      	str	r1, [r3, #4]
 8010c06:	6053      	str	r3, [r2, #4]
 8010c08:	bd30      	pop	{r4, r5, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20001018 	.word	0x20001018

08010c10 <_malloc_usable_size_r>:
 8010c10:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8010c14:	2800      	cmp	r0, #0
 8010c16:	bfbe      	ittt	lt
 8010c18:	1809      	addlt	r1, r1, r0
 8010c1a:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8010c1e:	18c0      	addlt	r0, r0, r3
 8010c20:	3804      	subs	r0, #4
 8010c22:	4770      	bx	lr

08010c24 <findslot>:
 8010c24:	4b0a      	ldr	r3, [pc, #40]	; (8010c50 <findslot+0x2c>)
 8010c26:	b510      	push	{r4, lr}
 8010c28:	4604      	mov	r4, r0
 8010c2a:	6818      	ldr	r0, [r3, #0]
 8010c2c:	b118      	cbz	r0, 8010c36 <findslot+0x12>
 8010c2e:	6983      	ldr	r3, [r0, #24]
 8010c30:	b90b      	cbnz	r3, 8010c36 <findslot+0x12>
 8010c32:	f002 fdb3 	bl	801379c <__sinit>
 8010c36:	2c13      	cmp	r4, #19
 8010c38:	d807      	bhi.n	8010c4a <findslot+0x26>
 8010c3a:	4806      	ldr	r0, [pc, #24]	; (8010c54 <findslot+0x30>)
 8010c3c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8010c40:	3301      	adds	r3, #1
 8010c42:	d002      	beq.n	8010c4a <findslot+0x26>
 8010c44:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8010c48:	bd10      	pop	{r4, pc}
 8010c4a:	2000      	movs	r0, #0
 8010c4c:	bd10      	pop	{r4, pc}
 8010c4e:	bf00      	nop
 8010c50:	2000019c 	.word	0x2000019c
 8010c54:	2000102c 	.word	0x2000102c

08010c58 <checkerror>:
 8010c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5a:	1c43      	adds	r3, r0, #1
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	d109      	bne.n	8010c74 <checkerror+0x1c>
 8010c60:	f002 fd4c 	bl	80136fc <__errno>
 8010c64:	2700      	movs	r7, #0
 8010c66:	4606      	mov	r6, r0
 8010c68:	2413      	movs	r4, #19
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	4639      	mov	r1, r7
 8010c6e:	beab      	bkpt	0x00ab
 8010c70:	4604      	mov	r4, r0
 8010c72:	6034      	str	r4, [r6, #0]
 8010c74:	4628      	mov	r0, r5
 8010c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c78 <error>:
 8010c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c7a:	4605      	mov	r5, r0
 8010c7c:	f002 fd3e 	bl	80136fc <__errno>
 8010c80:	2700      	movs	r7, #0
 8010c82:	4606      	mov	r6, r0
 8010c84:	2413      	movs	r4, #19
 8010c86:	4620      	mov	r0, r4
 8010c88:	4639      	mov	r1, r7
 8010c8a:	beab      	bkpt	0x00ab
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	6034      	str	r4, [r6, #0]
 8010c90:	4628      	mov	r0, r5
 8010c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c94 <initialise_monitor_handles>:
 8010c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c98:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8010d38 <initialise_monitor_handles+0xa4>
 8010c9c:	f04f 0803 	mov.w	r8, #3
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ca6:	2401      	movs	r4, #1
 8010ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cac:	af01      	add	r7, sp, #4
 8010cae:	9302      	str	r3, [sp, #8]
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	4639      	mov	r1, r7
 8010cb4:	beab      	bkpt	0x00ab
 8010cb6:	4605      	mov	r5, r0
 8010cb8:	4e1b      	ldr	r6, [pc, #108]	; (8010d28 <initialise_monitor_handles+0x94>)
 8010cba:	2304      	movs	r3, #4
 8010cbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8010cc0:	6035      	str	r5, [r6, #0]
 8010cc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cc6:	9302      	str	r3, [sp, #8]
 8010cc8:	4620      	mov	r0, r4
 8010cca:	4639      	mov	r1, r7
 8010ccc:	beab      	bkpt	0x00ab
 8010cce:	4682      	mov	sl, r0
 8010cd0:	4d16      	ldr	r5, [pc, #88]	; (8010d2c <initialise_monitor_handles+0x98>)
 8010cd2:	2308      	movs	r3, #8
 8010cd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8010cd8:	f8c5 a000 	str.w	sl, [r5]
 8010cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ce0:	9302      	str	r3, [sp, #8]
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	beab      	bkpt	0x00ab
 8010ce8:	4604      	mov	r4, r0
 8010cea:	4a11      	ldr	r2, [pc, #68]	; (8010d30 <initialise_monitor_handles+0x9c>)
 8010cec:	4811      	ldr	r0, [pc, #68]	; (8010d34 <initialise_monitor_handles+0xa0>)
 8010cee:	6014      	str	r4, [r2, #0]
 8010cf0:	3401      	adds	r4, #1
 8010cf2:	bf08      	it	eq
 8010cf4:	682b      	ldreq	r3, [r5, #0]
 8010cf6:	f04f 0100 	mov.w	r1, #0
 8010cfa:	bf08      	it	eq
 8010cfc:	6013      	streq	r3, [r2, #0]
 8010cfe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010d02:	f840 4031 	str.w	r4, [r0, r1, lsl #3]
 8010d06:	3101      	adds	r1, #1
 8010d08:	2914      	cmp	r1, #20
 8010d0a:	4b0a      	ldr	r3, [pc, #40]	; (8010d34 <initialise_monitor_handles+0xa0>)
 8010d0c:	d1f9      	bne.n	8010d02 <initialise_monitor_handles+0x6e>
 8010d0e:	6831      	ldr	r1, [r6, #0]
 8010d10:	6828      	ldr	r0, [r5, #0]
 8010d12:	6812      	ldr	r2, [r2, #0]
 8010d14:	6019      	str	r1, [r3, #0]
 8010d16:	2100      	movs	r1, #0
 8010d18:	6059      	str	r1, [r3, #4]
 8010d1a:	6098      	str	r0, [r3, #8]
 8010d1c:	60d9      	str	r1, [r3, #12]
 8010d1e:	611a      	str	r2, [r3, #16]
 8010d20:	6159      	str	r1, [r3, #20]
 8010d22:	b004      	add	sp, #16
 8010d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d28:	20001020 	.word	0x20001020
 8010d2c:	2000101c 	.word	0x2000101c
 8010d30:	20001028 	.word	0x20001028
 8010d34:	2000102c 	.word	0x2000102c
 8010d38:	0801552c 	.word	0x0801552c

08010d3c <_swiread>:
 8010d3c:	b530      	push	{r4, r5, lr}
 8010d3e:	b085      	sub	sp, #20
 8010d40:	9001      	str	r0, [sp, #4]
 8010d42:	9102      	str	r1, [sp, #8]
 8010d44:	9203      	str	r2, [sp, #12]
 8010d46:	ad01      	add	r5, sp, #4
 8010d48:	2406      	movs	r4, #6
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	beab      	bkpt	0x00ab
 8010d50:	4604      	mov	r4, r0
 8010d52:	4620      	mov	r0, r4
 8010d54:	f7ff ff80 	bl	8010c58 <checkerror>
 8010d58:	b005      	add	sp, #20
 8010d5a:	bd30      	pop	{r4, r5, pc}

08010d5c <_read>:
 8010d5c:	b570      	push	{r4, r5, r6, lr}
 8010d5e:	460e      	mov	r6, r1
 8010d60:	4615      	mov	r5, r2
 8010d62:	f7ff ff5f 	bl	8010c24 <findslot>
 8010d66:	4604      	mov	r4, r0
 8010d68:	b930      	cbnz	r0, 8010d78 <_read+0x1c>
 8010d6a:	f002 fcc7 	bl	80136fc <__errno>
 8010d6e:	2309      	movs	r3, #9
 8010d70:	6003      	str	r3, [r0, #0]
 8010d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d76:	bd70      	pop	{r4, r5, r6, pc}
 8010d78:	462a      	mov	r2, r5
 8010d7a:	4631      	mov	r1, r6
 8010d7c:	6800      	ldr	r0, [r0, #0]
 8010d7e:	f7ff ffdd 	bl	8010d3c <_swiread>
 8010d82:	1c43      	adds	r3, r0, #1
 8010d84:	bf1f      	itttt	ne
 8010d86:	6863      	ldrne	r3, [r4, #4]
 8010d88:	1a28      	subne	r0, r5, r0
 8010d8a:	181b      	addne	r3, r3, r0
 8010d8c:	6063      	strne	r3, [r4, #4]
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}

08010d90 <_swilseek>:
 8010d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d92:	460c      	mov	r4, r1
 8010d94:	4616      	mov	r6, r2
 8010d96:	f7ff ff45 	bl	8010c24 <findslot>
 8010d9a:	4605      	mov	r5, r0
 8010d9c:	b918      	cbnz	r0, 8010da6 <_swilseek+0x16>
 8010d9e:	f002 fcad 	bl	80136fc <__errno>
 8010da2:	2309      	movs	r3, #9
 8010da4:	e004      	b.n	8010db0 <_swilseek+0x20>
 8010da6:	2e02      	cmp	r6, #2
 8010da8:	d906      	bls.n	8010db8 <_swilseek+0x28>
 8010daa:	f002 fca7 	bl	80136fc <__errno>
 8010dae:	2316      	movs	r3, #22
 8010db0:	6003      	str	r3, [r0, #0]
 8010db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010db6:	e026      	b.n	8010e06 <_swilseek+0x76>
 8010db8:	2e01      	cmp	r6, #1
 8010dba:	d103      	bne.n	8010dc4 <_swilseek+0x34>
 8010dbc:	6843      	ldr	r3, [r0, #4]
 8010dbe:	18e4      	adds	r4, r4, r3
 8010dc0:	d511      	bpl.n	8010de6 <_swilseek+0x56>
 8010dc2:	e7f2      	b.n	8010daa <_swilseek+0x1a>
 8010dc4:	2e02      	cmp	r6, #2
 8010dc6:	d10e      	bne.n	8010de6 <_swilseek+0x56>
 8010dc8:	6803      	ldr	r3, [r0, #0]
 8010dca:	af02      	add	r7, sp, #8
 8010dcc:	f847 3d08 	str.w	r3, [r7, #-8]!
 8010dd0:	260c      	movs	r6, #12
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	4639      	mov	r1, r7
 8010dd6:	beab      	bkpt	0x00ab
 8010dd8:	4606      	mov	r6, r0
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f7ff ff3c 	bl	8010c58 <checkerror>
 8010de0:	1c43      	adds	r3, r0, #1
 8010de2:	d0e6      	beq.n	8010db2 <_swilseek+0x22>
 8010de4:	4404      	add	r4, r0
 8010de6:	682b      	ldr	r3, [r5, #0]
 8010de8:	466f      	mov	r7, sp
 8010dea:	e88d 0018 	stmia.w	sp, {r3, r4}
 8010dee:	260a      	movs	r6, #10
 8010df0:	4630      	mov	r0, r6
 8010df2:	4639      	mov	r1, r7
 8010df4:	beab      	bkpt	0x00ab
 8010df6:	4606      	mov	r6, r0
 8010df8:	4630      	mov	r0, r6
 8010dfa:	f7ff ff2d 	bl	8010c58 <checkerror>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	dbd7      	blt.n	8010db2 <_swilseek+0x22>
 8010e02:	4620      	mov	r0, r4
 8010e04:	606c      	str	r4, [r5, #4]
 8010e06:	b003      	add	sp, #12
 8010e08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e0a <_lseek>:
 8010e0a:	f7ff bfc1 	b.w	8010d90 <_swilseek>

08010e0e <_swiwrite>:
 8010e0e:	b530      	push	{r4, r5, lr}
 8010e10:	b085      	sub	sp, #20
 8010e12:	9001      	str	r0, [sp, #4]
 8010e14:	9102      	str	r1, [sp, #8]
 8010e16:	9203      	str	r2, [sp, #12]
 8010e18:	ad01      	add	r5, sp, #4
 8010e1a:	2405      	movs	r4, #5
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	4629      	mov	r1, r5
 8010e20:	beab      	bkpt	0x00ab
 8010e22:	4604      	mov	r4, r0
 8010e24:	4620      	mov	r0, r4
 8010e26:	f7ff ff17 	bl	8010c58 <checkerror>
 8010e2a:	b005      	add	sp, #20
 8010e2c:	bd30      	pop	{r4, r5, pc}

08010e2e <_write>:
 8010e2e:	b570      	push	{r4, r5, r6, lr}
 8010e30:	460e      	mov	r6, r1
 8010e32:	4615      	mov	r5, r2
 8010e34:	f7ff fef6 	bl	8010c24 <findslot>
 8010e38:	4604      	mov	r4, r0
 8010e3a:	b920      	cbnz	r0, 8010e46 <_write+0x18>
 8010e3c:	f002 fc5e 	bl	80136fc <__errno>
 8010e40:	2309      	movs	r3, #9
 8010e42:	6003      	str	r3, [r0, #0]
 8010e44:	e011      	b.n	8010e6a <_write+0x3c>
 8010e46:	462a      	mov	r2, r5
 8010e48:	4631      	mov	r1, r6
 8010e4a:	6800      	ldr	r0, [r0, #0]
 8010e4c:	f7ff ffdf 	bl	8010e0e <_swiwrite>
 8010e50:	1e02      	subs	r2, r0, #0
 8010e52:	db0a      	blt.n	8010e6a <_write+0x3c>
 8010e54:	6863      	ldr	r3, [r4, #4]
 8010e56:	1aa8      	subs	r0, r5, r2
 8010e58:	4403      	add	r3, r0
 8010e5a:	4295      	cmp	r5, r2
 8010e5c:	6063      	str	r3, [r4, #4]
 8010e5e:	d106      	bne.n	8010e6e <_write+0x40>
 8010e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e64:	2000      	movs	r0, #0
 8010e66:	f7ff bf07 	b.w	8010c78 <error>
 8010e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e6e:	bd70      	pop	{r4, r5, r6, pc}

08010e70 <_swiclose>:
 8010e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e72:	ad02      	add	r5, sp, #8
 8010e74:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010e78:	2402      	movs	r4, #2
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	4629      	mov	r1, r5
 8010e7e:	beab      	bkpt	0x00ab
 8010e80:	4604      	mov	r4, r0
 8010e82:	4620      	mov	r0, r4
 8010e84:	f7ff fee8 	bl	8010c58 <checkerror>
 8010e88:	b003      	add	sp, #12
 8010e8a:	bd30      	pop	{r4, r5, pc}

08010e8c <_close>:
 8010e8c:	b538      	push	{r3, r4, r5, lr}
 8010e8e:	4605      	mov	r5, r0
 8010e90:	f7ff fec8 	bl	8010c24 <findslot>
 8010e94:	4604      	mov	r4, r0
 8010e96:	b930      	cbnz	r0, 8010ea6 <_close+0x1a>
 8010e98:	f002 fc30 	bl	80136fc <__errno>
 8010e9c:	2309      	movs	r3, #9
 8010e9e:	6003      	str	r3, [r0, #0]
 8010ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ea4:	bd38      	pop	{r3, r4, r5, pc}
 8010ea6:	3d01      	subs	r5, #1
 8010ea8:	2d01      	cmp	r5, #1
 8010eaa:	d809      	bhi.n	8010ec0 <_close+0x34>
 8010eac:	4b08      	ldr	r3, [pc, #32]	; (8010ed0 <_close+0x44>)
 8010eae:	689a      	ldr	r2, [r3, #8]
 8010eb0:	691b      	ldr	r3, [r3, #16]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d104      	bne.n	8010ec0 <_close+0x34>
 8010eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010eba:	6003      	str	r3, [r0, #0]
 8010ebc:	2000      	movs	r0, #0
 8010ebe:	bd38      	pop	{r3, r4, r5, pc}
 8010ec0:	6820      	ldr	r0, [r4, #0]
 8010ec2:	f7ff ffd5 	bl	8010e70 <_swiclose>
 8010ec6:	b910      	cbnz	r0, 8010ece <_close+0x42>
 8010ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ecc:	6023      	str	r3, [r4, #0]
 8010ece:	bd38      	pop	{r3, r4, r5, pc}
 8010ed0:	2000102c 	.word	0x2000102c

08010ed4 <_getpid>:
 8010ed4:	2001      	movs	r0, #1
 8010ed6:	4770      	bx	lr

08010ed8 <_sbrk>:
 8010ed8:	4b0d      	ldr	r3, [pc, #52]	; (8010f10 <_sbrk+0x38>)
 8010eda:	b510      	push	{r4, lr}
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	b90a      	cbnz	r2, 8010ee4 <_sbrk+0xc>
 8010ee0:	4a0c      	ldr	r2, [pc, #48]	; (8010f14 <_sbrk+0x3c>)
 8010ee2:	601a      	str	r2, [r3, #0]
 8010ee4:	4669      	mov	r1, sp
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	4410      	add	r0, r2
 8010eea:	4288      	cmp	r0, r1
 8010eec:	d806      	bhi.n	8010efc <_sbrk+0x24>
 8010eee:	490a      	ldr	r1, [pc, #40]	; (8010f18 <_sbrk+0x40>)
 8010ef0:	4c0a      	ldr	r4, [pc, #40]	; (8010f1c <_sbrk+0x44>)
 8010ef2:	6809      	ldr	r1, [r1, #0]
 8010ef4:	42a1      	cmp	r1, r4
 8010ef6:	d008      	beq.n	8010f0a <_sbrk+0x32>
 8010ef8:	4288      	cmp	r0, r1
 8010efa:	d906      	bls.n	8010f0a <_sbrk+0x32>
 8010efc:	f002 fbfe 	bl	80136fc <__errno>
 8010f00:	230c      	movs	r3, #12
 8010f02:	6003      	str	r3, [r0, #0]
 8010f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f08:	bd10      	pop	{r4, pc}
 8010f0a:	6018      	str	r0, [r3, #0]
 8010f0c:	4610      	mov	r0, r2
 8010f0e:	bd10      	pop	{r4, pc}
 8010f10:	20001024 	.word	0x20001024
 8010f14:	200010fc 	.word	0x200010fc
 8010f18:	200001a0 	.word	0x200001a0
 8010f1c:	cafedead 	.word	0xcafedead

08010f20 <_swistat>:
 8010f20:	b570      	push	{r4, r5, r6, lr}
 8010f22:	460c      	mov	r4, r1
 8010f24:	f7ff fe7e 	bl	8010c24 <findslot>
 8010f28:	4606      	mov	r6, r0
 8010f2a:	b930      	cbnz	r0, 8010f3a <_swistat+0x1a>
 8010f2c:	f002 fbe6 	bl	80136fc <__errno>
 8010f30:	2309      	movs	r3, #9
 8010f32:	6003      	str	r3, [r0, #0]
 8010f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f38:	bd70      	pop	{r4, r5, r6, pc}
 8010f3a:	6863      	ldr	r3, [r4, #4]
 8010f3c:	250c      	movs	r5, #12
 8010f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010f42:	6063      	str	r3, [r4, #4]
 8010f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	4631      	mov	r1, r6
 8010f4e:	beab      	bkpt	0x00ab
 8010f50:	4605      	mov	r5, r0
 8010f52:	4628      	mov	r0, r5
 8010f54:	f7ff fe80 	bl	8010c58 <checkerror>
 8010f58:	1c43      	adds	r3, r0, #1
 8010f5a:	bf1c      	itt	ne
 8010f5c:	6120      	strne	r0, [r4, #16]
 8010f5e:	2000      	movne	r0, #0
 8010f60:	bd70      	pop	{r4, r5, r6, pc}

08010f62 <_fstat>:
 8010f62:	b538      	push	{r3, r4, r5, lr}
 8010f64:	460c      	mov	r4, r1
 8010f66:	4605      	mov	r5, r0
 8010f68:	2100      	movs	r1, #0
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	223c      	movs	r2, #60	; 0x3c
 8010f6e:	f7ff fc58 	bl	8010822 <memset>
 8010f72:	4621      	mov	r1, r4
 8010f74:	4628      	mov	r0, r5
 8010f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f7a:	f7ff bfd1 	b.w	8010f20 <_swistat>

08010f7e <_stat>:
 8010f7e:	b538      	push	{r3, r4, r5, lr}
 8010f80:	460d      	mov	r5, r1
 8010f82:	4604      	mov	r4, r0
 8010f84:	223c      	movs	r2, #60	; 0x3c
 8010f86:	2100      	movs	r1, #0
 8010f88:	4628      	mov	r0, r5
 8010f8a:	f7ff fc4a 	bl	8010822 <memset>
 8010f8e:	4620      	mov	r0, r4
 8010f90:	2100      	movs	r1, #0
 8010f92:	f000 f811 	bl	8010fb8 <_swiopen>
 8010f96:	1c43      	adds	r3, r0, #1
 8010f98:	4604      	mov	r4, r0
 8010f9a:	d00b      	beq.n	8010fb4 <_stat+0x36>
 8010f9c:	686b      	ldr	r3, [r5, #4]
 8010f9e:	4629      	mov	r1, r5
 8010fa0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010fa4:	606b      	str	r3, [r5, #4]
 8010fa6:	f7ff ffbb 	bl	8010f20 <_swistat>
 8010faa:	4605      	mov	r5, r0
 8010fac:	4620      	mov	r0, r4
 8010fae:	f7ff ff6d 	bl	8010e8c <_close>
 8010fb2:	462c      	mov	r4, r5
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	bd38      	pop	{r3, r4, r5, pc}

08010fb8 <_swiopen>:
 8010fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fbc:	4682      	mov	sl, r0
 8010fbe:	460e      	mov	r6, r1
 8010fc0:	4b2b      	ldr	r3, [pc, #172]	; (8011070 <_swiopen+0xb8>)
 8010fc2:	b090      	sub	sp, #64	; 0x40
 8010fc4:	2500      	movs	r5, #0
 8010fc6:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8010fca:	00ef      	lsls	r7, r5, #3
 8010fcc:	1c61      	adds	r1, r4, #1
 8010fce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8011070 <_swiopen+0xb8>
 8010fd2:	d009      	beq.n	8010fe8 <_swiopen+0x30>
 8010fd4:	3501      	adds	r5, #1
 8010fd6:	2d14      	cmp	r5, #20
 8010fd8:	d1f5      	bne.n	8010fc6 <_swiopen+0xe>
 8010fda:	f002 fb8f 	bl	80136fc <__errno>
 8010fde:	2318      	movs	r3, #24
 8010fe0:	6003      	str	r3, [r0, #0]
 8010fe2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010fe6:	e03e      	b.n	8011066 <_swiopen+0xae>
 8010fe8:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8010fec:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8010ff0:	f10d 0904 	add.w	r9, sp, #4
 8010ff4:	d10a      	bne.n	801100c <_swiopen+0x54>
 8010ff6:	4649      	mov	r1, r9
 8010ff8:	4650      	mov	r0, sl
 8010ffa:	f7ff ffc0 	bl	8010f7e <_stat>
 8010ffe:	3001      	adds	r0, #1
 8011000:	d004      	beq.n	801100c <_swiopen+0x54>
 8011002:	f002 fb7b 	bl	80136fc <__errno>
 8011006:	2311      	movs	r3, #17
 8011008:	6003      	str	r3, [r0, #0]
 801100a:	e02c      	b.n	8011066 <_swiopen+0xae>
 801100c:	f240 6301 	movw	r3, #1537	; 0x601
 8011010:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8011014:	07b2      	lsls	r2, r6, #30
 8011016:	ea03 0306 	and.w	r3, r3, r6
 801101a:	bf48      	it	mi
 801101c:	f044 0402 	orrmi.w	r4, r4, #2
 8011020:	b10b      	cbz	r3, 8011026 <_swiopen+0x6e>
 8011022:	f044 0404 	orr.w	r4, r4, #4
 8011026:	0733      	lsls	r3, r6, #28
 8011028:	bf48      	it	mi
 801102a:	f024 0404 	bicmi.w	r4, r4, #4
 801102e:	4650      	mov	r0, sl
 8011030:	bf48      	it	mi
 8011032:	f044 0408 	orrmi.w	r4, r4, #8
 8011036:	f8cd a004 	str.w	sl, [sp, #4]
 801103a:	f7f5 fd5f 	bl	8006afc <strlen>
 801103e:	9402      	str	r4, [sp, #8]
 8011040:	9003      	str	r0, [sp, #12]
 8011042:	2401      	movs	r4, #1
 8011044:	4620      	mov	r0, r4
 8011046:	4649      	mov	r1, r9
 8011048:	beab      	bkpt	0x00ab
 801104a:	4604      	mov	r4, r0
 801104c:	2c00      	cmp	r4, #0
 801104e:	db06      	blt.n	801105e <_swiopen+0xa6>
 8011050:	4447      	add	r7, r8
 8011052:	2300      	movs	r3, #0
 8011054:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8011058:	607b      	str	r3, [r7, #4]
 801105a:	462c      	mov	r4, r5
 801105c:	e003      	b.n	8011066 <_swiopen+0xae>
 801105e:	4620      	mov	r0, r4
 8011060:	f7ff fe0a 	bl	8010c78 <error>
 8011064:	4604      	mov	r4, r0
 8011066:	4620      	mov	r0, r4
 8011068:	b010      	add	sp, #64	; 0x40
 801106a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801106e:	bf00      	nop
 8011070:	2000102c 	.word	0x2000102c

08011074 <_open>:
 8011074:	b40e      	push	{r1, r2, r3}
 8011076:	b500      	push	{lr}
 8011078:	9901      	ldr	r1, [sp, #4]
 801107a:	f7ff ff9d 	bl	8010fb8 <_swiopen>
 801107e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011082:	b003      	add	sp, #12
 8011084:	4770      	bx	lr

08011086 <_link>:
 8011086:	b508      	push	{r3, lr}
 8011088:	f002 fb38 	bl	80136fc <__errno>
 801108c:	2358      	movs	r3, #88	; 0x58
 801108e:	6003      	str	r3, [r0, #0]
 8011090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011094:	bd08      	pop	{r3, pc}

08011096 <_unlink>:
 8011096:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011098:	9000      	str	r0, [sp, #0]
 801109a:	f7f5 fd2f 	bl	8006afc <strlen>
 801109e:	240e      	movs	r4, #14
 80110a0:	9001      	str	r0, [sp, #4]
 80110a2:	466d      	mov	r5, sp
 80110a4:	4620      	mov	r0, r4
 80110a6:	4629      	mov	r1, r5
 80110a8:	beab      	bkpt	0x00ab
 80110aa:	4604      	mov	r4, r0
 80110ac:	1c63      	adds	r3, r4, #1
 80110ae:	d103      	bne.n	80110b8 <_unlink+0x22>
 80110b0:	4620      	mov	r0, r4
 80110b2:	f7ff fde1 	bl	8010c78 <error>
 80110b6:	e000      	b.n	80110ba <_unlink+0x24>
 80110b8:	2000      	movs	r0, #0
 80110ba:	b003      	add	sp, #12
 80110bc:	bd30      	pop	{r4, r5, pc}

080110be <_gettimeofday>:
 80110be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110c0:	460c      	mov	r4, r1
 80110c2:	4605      	mov	r5, r0
 80110c4:	b138      	cbz	r0, 80110d6 <_gettimeofday+0x18>
 80110c6:	2700      	movs	r7, #0
 80110c8:	2611      	movs	r6, #17
 80110ca:	4630      	mov	r0, r6
 80110cc:	4639      	mov	r1, r7
 80110ce:	beab      	bkpt	0x00ab
 80110d0:	4606      	mov	r6, r0
 80110d2:	e885 00c0 	stmia.w	r5, {r6, r7}
 80110d6:	b114      	cbz	r4, 80110de <_gettimeofday+0x20>
 80110d8:	2300      	movs	r3, #0
 80110da:	6023      	str	r3, [r4, #0]
 80110dc:	6063      	str	r3, [r4, #4]
 80110de:	2000      	movs	r0, #0
 80110e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080110e2 <_clock>:
 80110e2:	b530      	push	{r4, r5, lr}
 80110e4:	2500      	movs	r5, #0
 80110e6:	2410      	movs	r4, #16
 80110e8:	4620      	mov	r0, r4
 80110ea:	4629      	mov	r1, r5
 80110ec:	beab      	bkpt	0x00ab
 80110ee:	4604      	mov	r4, r0
 80110f0:	4620      	mov	r0, r4
 80110f2:	bd30      	pop	{r4, r5, pc}

080110f4 <_times>:
 80110f4:	b510      	push	{r4, lr}
 80110f6:	4604      	mov	r4, r0
 80110f8:	f7ff fff3 	bl	80110e2 <_clock>
 80110fc:	b124      	cbz	r4, 8011108 <_times+0x14>
 80110fe:	2300      	movs	r3, #0
 8011100:	6020      	str	r0, [r4, #0]
 8011102:	6063      	str	r3, [r4, #4]
 8011104:	60a3      	str	r3, [r4, #8]
 8011106:	60e3      	str	r3, [r4, #12]
 8011108:	bd10      	pop	{r4, pc}

0801110a <_isatty>:
 801110a:	b570      	push	{r4, r5, r6, lr}
 801110c:	f7ff fd8a 	bl	8010c24 <findslot>
 8011110:	2509      	movs	r5, #9
 8011112:	4604      	mov	r4, r0
 8011114:	b918      	cbnz	r0, 801111e <_isatty+0x14>
 8011116:	f002 faf1 	bl	80136fc <__errno>
 801111a:	6005      	str	r5, [r0, #0]
 801111c:	e00f      	b.n	801113e <_isatty+0x34>
 801111e:	4628      	mov	r0, r5
 8011120:	4621      	mov	r1, r4
 8011122:	beab      	bkpt	0x00ab
 8011124:	4604      	mov	r4, r0
 8011126:	2c01      	cmp	r4, #1
 8011128:	d009      	beq.n	801113e <_isatty+0x34>
 801112a:	f002 fae7 	bl	80136fc <__errno>
 801112e:	2400      	movs	r4, #0
 8011130:	4606      	mov	r6, r0
 8011132:	2513      	movs	r5, #19
 8011134:	4628      	mov	r0, r5
 8011136:	4621      	mov	r1, r4
 8011138:	beab      	bkpt	0x00ab
 801113a:	4605      	mov	r5, r0
 801113c:	6035      	str	r5, [r6, #0]
 801113e:	4620      	mov	r0, r4
 8011140:	bd70      	pop	{r4, r5, r6, pc}

08011142 <_system>:
 8011142:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011144:	b1b0      	cbz	r0, 8011174 <_system+0x32>
 8011146:	9000      	str	r0, [sp, #0]
 8011148:	f7f5 fcd8 	bl	8006afc <strlen>
 801114c:	2412      	movs	r4, #18
 801114e:	9001      	str	r0, [sp, #4]
 8011150:	466d      	mov	r5, sp
 8011152:	4620      	mov	r0, r4
 8011154:	4629      	mov	r1, r5
 8011156:	beab      	bkpt	0x00ab
 8011158:	4604      	mov	r4, r0
 801115a:	4620      	mov	r0, r4
 801115c:	f7ff fd7c 	bl	8010c58 <checkerror>
 8011160:	28ff      	cmp	r0, #255	; 0xff
 8011162:	d80a      	bhi.n	801117a <_system+0x38>
 8011164:	4603      	mov	r3, r0
 8011166:	b13b      	cbz	r3, 8011178 <_system+0x36>
 8011168:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801116c:	4290      	cmp	r0, r2
 801116e:	d003      	beq.n	8011178 <_system+0x36>
 8011170:	005b      	lsls	r3, r3, #1
 8011172:	e7f8      	b.n	8011166 <_system+0x24>
 8011174:	2001      	movs	r0, #1
 8011176:	e000      	b.n	801117a <_system+0x38>
 8011178:	4618      	mov	r0, r3
 801117a:	b003      	add	sp, #12
 801117c:	bd30      	pop	{r4, r5, pc}

0801117e <_rename>:
 801117e:	b530      	push	{r4, r5, lr}
 8011180:	b085      	sub	sp, #20
 8011182:	460c      	mov	r4, r1
 8011184:	9000      	str	r0, [sp, #0]
 8011186:	f7f5 fcb9 	bl	8006afc <strlen>
 801118a:	9001      	str	r0, [sp, #4]
 801118c:	4620      	mov	r0, r4
 801118e:	9402      	str	r4, [sp, #8]
 8011190:	f7f5 fcb4 	bl	8006afc <strlen>
 8011194:	240f      	movs	r4, #15
 8011196:	9003      	str	r0, [sp, #12]
 8011198:	466d      	mov	r5, sp
 801119a:	4620      	mov	r0, r4
 801119c:	4629      	mov	r1, r5
 801119e:	beab      	bkpt	0x00ab
 80111a0:	4604      	mov	r4, r0
 80111a2:	4620      	mov	r0, r4
 80111a4:	f7ff fd58 	bl	8010c58 <checkerror>
 80111a8:	3000      	adds	r0, #0
 80111aa:	bf18      	it	ne
 80111ac:	2001      	movne	r0, #1
 80111ae:	4240      	negs	r0, r0
 80111b0:	b005      	add	sp, #20
 80111b2:	bd30      	pop	{r4, r5, pc}

080111b4 <_exit>:
 80111b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80111b8:	f000 b800 	b.w	80111bc <_kill>

080111bc <_kill>:
 80111bc:	2906      	cmp	r1, #6
 80111be:	b530      	push	{r4, r5, lr}
 80111c0:	bf0c      	ite	eq
 80111c2:	4d04      	ldreq	r5, [pc, #16]	; (80111d4 <_kill+0x18>)
 80111c4:	4d04      	ldrne	r5, [pc, #16]	; (80111d8 <_kill+0x1c>)
 80111c6:	2418      	movs	r4, #24
 80111c8:	4620      	mov	r0, r4
 80111ca:	4629      	mov	r1, r5
 80111cc:	beab      	bkpt	0x00ab
 80111ce:	4604      	mov	r4, r0
 80111d0:	4620      	mov	r0, r4
 80111d2:	bd30      	pop	{r4, r5, pc}
 80111d4:	00020023 	.word	0x00020023
 80111d8:	00020026 	.word	0x00020026

080111dc <operator delete(void*)>:
 80111dc:	f002 bc00 	b.w	80139e0 <free>

080111e0 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 80111e0:	b510      	push	{r4, lr}
 80111e2:	4604      	mov	r4, r0
 80111e4:	4b02      	ldr	r3, [pc, #8]	; (80111f0 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
 80111e6:	6003      	str	r3, [r0, #0]
 80111e8:	f000 fc64 	bl	8011ab4 <__cxxabiv1::__class_type_info::~__class_type_info()>
 80111ec:	4620      	mov	r0, r4
 80111ee:	bd10      	pop	{r4, pc}
 80111f0:	08015538 	.word	0x08015538

080111f4 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
 80111f4:	b510      	push	{r4, lr}
 80111f6:	4604      	mov	r4, r0
 80111f8:	f7ff fff2 	bl	80111e0 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
 80111fc:	4620      	mov	r0, r4
 80111fe:	f7ff ffed 	bl	80111dc <operator delete(void*)>
 8011202:	4620      	mov	r0, r4
 8011204:	bd10      	pop	{r4, pc}

08011206 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8011206:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120a:	460e      	mov	r6, r1
 801120c:	4619      	mov	r1, r3
 801120e:	4683      	mov	fp, r0
 8011210:	4617      	mov	r7, r2
 8011212:	4699      	mov	r9, r3
 8011214:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011216:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801121a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801121e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011220:	f000 fb5a 	bl	80118d8 <std::type_info::operator==(std::type_info const&) const>
 8011224:	b178      	cbz	r0, 8011246 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
 8011226:	2e00      	cmp	r6, #0
 8011228:	602c      	str	r4, [r5, #0]
 801122a:	712f      	strb	r7, [r5, #4]
 801122c:	db06      	blt.n	801123c <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x36>
 801122e:	4434      	add	r4, r6
 8011230:	45a0      	cmp	r8, r4
 8011232:	bf0c      	ite	eq
 8011234:	2406      	moveq	r4, #6
 8011236:	2401      	movne	r4, #1
 8011238:	71ac      	strb	r4, [r5, #6]
 801123a:	e01e      	b.n	801127a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 801123c:	3602      	adds	r6, #2
 801123e:	d11c      	bne.n	801127a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8011240:	2301      	movs	r3, #1
 8011242:	71ab      	strb	r3, [r5, #6]
 8011244:	e019      	b.n	801127a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x74>
 8011246:	4544      	cmp	r4, r8
 8011248:	d104      	bne.n	8011254 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x4e>
 801124a:	4651      	mov	r1, sl
 801124c:	4658      	mov	r0, fp
 801124e:	f000 fb43 	bl	80118d8 <std::type_info::operator==(std::type_info const&) const>
 8011252:	b988      	cbnz	r0, 8011278 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x72>
 8011254:	f8db 0008 	ldr.w	r0, [fp, #8]
 8011258:	463a      	mov	r2, r7
 801125a:	6803      	ldr	r3, [r0, #0]
 801125c:	950d      	str	r5, [sp, #52]	; 0x34
 801125e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8011262:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8011266:	940a      	str	r4, [sp, #40]	; 0x28
 8011268:	69dc      	ldr	r4, [r3, #28]
 801126a:	4631      	mov	r1, r6
 801126c:	464b      	mov	r3, r9
 801126e:	46a4      	mov	ip, r4
 8011270:	b001      	add	sp, #4
 8011272:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011276:	4760      	bx	ip
 8011278:	716f      	strb	r7, [r5, #5]
 801127a:	2000      	movs	r0, #0
 801127c:	b001      	add	sp, #4
 801127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011282 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8011282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011286:	9e06      	ldr	r6, [sp, #24]
 8011288:	4680      	mov	r8, r0
 801128a:	4296      	cmp	r6, r2
 801128c:	460f      	mov	r7, r1
 801128e:	4614      	mov	r4, r2
 8011290:	461d      	mov	r5, r3
 8011292:	d103      	bne.n	801129c <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1a>
 8011294:	4619      	mov	r1, r3
 8011296:	f000 fb1f 	bl	80118d8 <std::type_info::operator==(std::type_info const&) const>
 801129a:	b958      	cbnz	r0, 80112b4 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x32>
 801129c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80112a0:	4622      	mov	r2, r4
 80112a2:	6803      	ldr	r3, [r0, #0]
 80112a4:	9606      	str	r6, [sp, #24]
 80112a6:	6a1e      	ldr	r6, [r3, #32]
 80112a8:	4639      	mov	r1, r7
 80112aa:	462b      	mov	r3, r5
 80112ac:	46b4      	mov	ip, r6
 80112ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112b2:	4760      	bx	ip
 80112b4:	2006      	movs	r0, #6
 80112b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080112ba <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 80112ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112be:	4604      	mov	r4, r0
 80112c0:	460d      	mov	r5, r1
 80112c2:	4616      	mov	r6, r2
 80112c4:	461f      	mov	r7, r3
 80112c6:	f000 fc08 	bl	8011ada <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
 80112ca:	b948      	cbnz	r0, 80112e0 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
 80112cc:	68a0      	ldr	r0, [r4, #8]
 80112ce:	4632      	mov	r2, r6
 80112d0:	6803      	ldr	r3, [r0, #0]
 80112d2:	4629      	mov	r1, r5
 80112d4:	699c      	ldr	r4, [r3, #24]
 80112d6:	463b      	mov	r3, r7
 80112d8:	46a4      	mov	ip, r4
 80112da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112de:	4760      	bx	ip
 80112e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080112e4 <read_uleb128(unsigned char const*, unsigned long*)>:
 80112e4:	b570      	push	{r4, r5, r6, lr}
 80112e6:	2300      	movs	r3, #0
 80112e8:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 80112ec:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 80112f0:	f810 5b01 	ldrb.w	r5, [r0], #1
 80112f4:	1994      	adds	r4, r2, r6
 80112f6:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 80112fa:	40a2      	lsls	r2, r4
 80112fc:	4313      	orrs	r3, r2
 80112fe:	062a      	lsls	r2, r5, #24
 8011300:	d4f4      	bmi.n	80112ec <read_uleb128(unsigned char const*, unsigned long*)+0x8>
 8011302:	600b      	str	r3, [r1, #0]
 8011304:	bd70      	pop	{r4, r5, r6, pc}

08011306 <read_sleb128(unsigned char const*, long*)>:
 8011306:	2300      	movs	r3, #0
 8011308:	461a      	mov	r2, r3
 801130a:	b530      	push	{r4, r5, lr}
 801130c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8011310:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8011314:	4095      	lsls	r5, r2
 8011316:	432b      	orrs	r3, r5
 8011318:	0625      	lsls	r5, r4, #24
 801131a:	f102 0207 	add.w	r2, r2, #7
 801131e:	d4f5      	bmi.n	801130c <read_sleb128(unsigned char const*, long*)+0x6>
 8011320:	2a1f      	cmp	r2, #31
 8011322:	d806      	bhi.n	8011332 <read_sleb128(unsigned char const*, long*)+0x2c>
 8011324:	0664      	lsls	r4, r4, #25
 8011326:	bf42      	ittt	mi
 8011328:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 801132c:	fa04 f202 	lslmi.w	r2, r4, r2
 8011330:	4313      	orrmi	r3, r2
 8011332:	600b      	str	r3, [r1, #0]
 8011334:	bd30      	pop	{r4, r5, pc}

08011336 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
 8011336:	2850      	cmp	r0, #80	; 0x50
 8011338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801133a:	4605      	mov	r5, r0
 801133c:	460f      	mov	r7, r1
 801133e:	4614      	mov	r4, r2
 8011340:	461e      	mov	r6, r3
 8011342:	d105      	bne.n	8011350 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x1a>
 8011344:	1cd0      	adds	r0, r2, #3
 8011346:	f020 0003 	bic.w	r0, r0, #3
 801134a:	f850 3b04 	ldr.w	r3, [r0], #4
 801134e:	e033      	b.n	80113b8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x82>
 8011350:	f000 030f 	and.w	r3, r0, #15
 8011354:	2b0c      	cmp	r3, #12
 8011356:	d823      	bhi.n	80113a0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6a>
 8011358:	e8df f003 	tbb	[pc, r3]
 801135c:	1a12071a 	.word	0x1a12071a
 8011360:	2222221e 	.word	0x2222221e
 8011364:	1a160c22 	.word	0x1a160c22
 8011368:	1e          	.byte	0x1e
 8011369:	00          	.byte	0x00
 801136a:	a901      	add	r1, sp, #4
 801136c:	4620      	mov	r0, r4
 801136e:	f7ff ffb9 	bl	80112e4 <read_uleb128(unsigned char const*, unsigned long*)>
 8011372:	e003      	b.n	801137c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x46>
 8011374:	a901      	add	r1, sp, #4
 8011376:	4620      	mov	r0, r4
 8011378:	f7ff ffc5 	bl	8011306 <read_sleb128(unsigned char const*, long*)>
 801137c:	9b01      	ldr	r3, [sp, #4]
 801137e:	e011      	b.n	80113a4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8011380:	4620      	mov	r0, r4
 8011382:	f830 3b02 	ldrh.w	r3, [r0], #2
 8011386:	e00d      	b.n	80113a4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8011388:	4620      	mov	r0, r4
 801138a:	f930 3b02 	ldrsh.w	r3, [r0], #2
 801138e:	e009      	b.n	80113a4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8011390:	4620      	mov	r0, r4
 8011392:	f850 3b04 	ldr.w	r3, [r0], #4
 8011396:	e005      	b.n	80113a4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 8011398:	4620      	mov	r0, r4
 801139a:	f850 3b08 	ldr.w	r3, [r0], #8
 801139e:	e001      	b.n	80113a4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
 80113a0:	f7ff f9f2 	bl	8010788 <abort>
 80113a4:	b143      	cbz	r3, 80113b8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x82>
 80113a6:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80113aa:	2a10      	cmp	r2, #16
 80113ac:	bf18      	it	ne
 80113ae:	463c      	movne	r4, r7
 80113b0:	062a      	lsls	r2, r5, #24
 80113b2:	4423      	add	r3, r4
 80113b4:	bf48      	it	mi
 80113b6:	681b      	ldrmi	r3, [r3, #0]
 80113b8:	6033      	str	r3, [r6, #0]
 80113ba:	b003      	add	sp, #12
 80113bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080113be <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
 80113be:	b508      	push	{r3, lr}
 80113c0:	4603      	mov	r3, r0
 80113c2:	2bff      	cmp	r3, #255	; 0xff
 80113c4:	4608      	mov	r0, r1
 80113c6:	d01c      	beq.n	8011402 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 80113c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80113cc:	2b20      	cmp	r3, #32
 80113ce:	d00e      	beq.n	80113ee <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x30>
 80113d0:	d803      	bhi.n	80113da <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x1c>
 80113d2:	b1b3      	cbz	r3, 8011402 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 80113d4:	2b10      	cmp	r3, #16
 80113d6:	d112      	bne.n	80113fe <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 80113d8:	e013      	b.n	8011402 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 80113da:	2b40      	cmp	r3, #64	; 0x40
 80113dc:	d00b      	beq.n	80113f6 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
 80113de:	2b50      	cmp	r3, #80	; 0x50
 80113e0:	d00f      	beq.n	8011402 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x44>
 80113e2:	2b30      	cmp	r3, #48	; 0x30
 80113e4:	d10b      	bne.n	80113fe <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
 80113e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80113ea:	f7f5 bb83 	b.w	8006af4 <_Unwind_GetDataRelBase>
 80113ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80113f2:	f7f5 bb7b 	b.w	8006aec <_Unwind_GetTextRelBase>
 80113f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80113fa:	f7f5 bb67 	b.w	8006acc <_Unwind_GetRegionStart>
 80113fe:	f7ff f9c3 	bl	8010788 <abort>
 8011402:	2000      	movs	r0, #0
 8011404:	bd08      	pop	{r3, pc}

08011406 <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>:
 8011406:	b570      	push	{r4, r5, r6, lr}
 8011408:	460c      	mov	r4, r1
 801140a:	4601      	mov	r1, r0
 801140c:	4620      	mov	r0, r4
 801140e:	4615      	mov	r5, r2
 8011410:	461e      	mov	r6, r3
 8011412:	f7ff ffd4 	bl	80113be <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8011416:	4633      	mov	r3, r6
 8011418:	462a      	mov	r2, r5
 801141a:	4601      	mov	r1, r0
 801141c:	4620      	mov	r0, r4
 801141e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011422:	f7ff bf88 	b.w	8011336 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>

08011426 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
 8011426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011428:	460e      	mov	r6, r1
 801142a:	4614      	mov	r4, r2
 801142c:	4605      	mov	r5, r0
 801142e:	b110      	cbz	r0, 8011436 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>
 8011430:	f7f5 fb4c 	bl	8006acc <_Unwind_GetRegionStart>
 8011434:	e7ff      	b.n	8011436 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x10>
 8011436:	6020      	str	r0, [r4, #0]
 8011438:	7831      	ldrb	r1, [r6, #0]
 801143a:	1c72      	adds	r2, r6, #1
 801143c:	29ff      	cmp	r1, #255	; 0xff
 801143e:	d005      	beq.n	801144c <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x26>
 8011440:	1d23      	adds	r3, r4, #4
 8011442:	4628      	mov	r0, r5
 8011444:	f7ff ffdf 	bl	8011406 <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 8011448:	4602      	mov	r2, r0
 801144a:	e000      	b.n	801144e <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x28>
 801144c:	6060      	str	r0, [r4, #4]
 801144e:	7813      	ldrb	r3, [r2, #0]
 8011450:	1c50      	adds	r0, r2, #1
 8011452:	2bff      	cmp	r3, #255	; 0xff
 8011454:	7523      	strb	r3, [r4, #20]
 8011456:	d007      	beq.n	8011468 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x42>
 8011458:	2310      	movs	r3, #16
 801145a:	7523      	strb	r3, [r4, #20]
 801145c:	a901      	add	r1, sp, #4
 801145e:	f7ff ff41 	bl	80112e4 <read_uleb128(unsigned char const*, unsigned long*)>
 8011462:	9b01      	ldr	r3, [sp, #4]
 8011464:	4403      	add	r3, r0
 8011466:	e000      	b.n	801146a <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x44>
 8011468:	2300      	movs	r3, #0
 801146a:	60e3      	str	r3, [r4, #12]
 801146c:	7803      	ldrb	r3, [r0, #0]
 801146e:	a901      	add	r1, sp, #4
 8011470:	7563      	strb	r3, [r4, #21]
 8011472:	3001      	adds	r0, #1
 8011474:	f7ff ff36 	bl	80112e4 <read_uleb128(unsigned char const*, unsigned long*)>
 8011478:	9b01      	ldr	r3, [sp, #4]
 801147a:	4403      	add	r3, r0
 801147c:	6123      	str	r3, [r4, #16]
 801147e:	b002      	add	sp, #8
 8011480:	bd70      	pop	{r4, r5, r6, pc}

08011482 <_Unwind_GetGR>:
 8011482:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011484:	ab03      	add	r3, sp, #12
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	2300      	movs	r3, #0
 801148a:	460a      	mov	r2, r1
 801148c:	4619      	mov	r1, r3
 801148e:	f7f4 fd93 	bl	8005fb8 <_Unwind_VRS_Get>
 8011492:	9803      	ldr	r0, [sp, #12]
 8011494:	b005      	add	sp, #20
 8011496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801149c <__gxx_personality_v0>:
 801149c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a0:	2300      	movs	r3, #0
 80114a2:	b091      	sub	sp, #68	; 0x44
 80114a4:	9304      	str	r3, [sp, #16]
 80114a6:	f000 0303 	and.w	r3, r0, #3
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	4607      	mov	r7, r0
 80114ae:	460c      	mov	r4, r1
 80114b0:	4615      	mov	r5, r2
 80114b2:	d00e      	beq.n	80114d2 <__gxx_personality_v0+0x36>
 80114b4:	d302      	bcc.n	80114bc <__gxx_personality_v0+0x20>
 80114b6:	2b02      	cmp	r3, #2
 80114b8:	d002      	beq.n	80114c0 <__gxx_personality_v0+0x24>
 80114ba:	e0ef      	b.n	801169c <__gxx_personality_v0+0x200>
 80114bc:	0702      	lsls	r2, r0, #28
 80114be:	d517      	bpl.n	80114f0 <__gxx_personality_v0+0x54>
 80114c0:	4629      	mov	r1, r5
 80114c2:	4620      	mov	r0, r4
 80114c4:	f7f5 faee 	bl	8006aa4 <__gnu_unwind_frame>
 80114c8:	b108      	cbz	r0, 80114ce <__gxx_personality_v0+0x32>
 80114ca:	2009      	movs	r0, #9
 80114cc:	e19f      	b.n	801180e <__gxx_personality_v0+0x372>
 80114ce:	2008      	movs	r0, #8
 80114d0:	e19d      	b.n	801180e <__gxx_personality_v0+0x372>
 80114d2:	f000 0208 	and.w	r2, r0, #8
 80114d6:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 80114da:	b95a      	cbnz	r2, 80114f4 <__gxx_personality_v0+0x58>
 80114dc:	f8d1 8020 	ldr.w	r8, [r1, #32]
 80114e0:	4628      	mov	r0, r5
 80114e2:	210d      	movs	r1, #13
 80114e4:	f7ff ffcd 	bl	8011482 <_Unwind_GetGR>
 80114e8:	4580      	cmp	r8, r0
 80114ea:	d120      	bne.n	801152e <__gxx_personality_v0+0x92>
 80114ec:	2606      	movs	r6, #6
 80114ee:	e002      	b.n	80114f6 <__gxx_personality_v0+0x5a>
 80114f0:	2601      	movs	r6, #1
 80114f2:	e000      	b.n	80114f6 <__gxx_personality_v0+0x5a>
 80114f4:	2602      	movs	r6, #2
 80114f6:	ab10      	add	r3, sp, #64	; 0x40
 80114f8:	f843 4d2c 	str.w	r4, [r3, #-44]!
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	f007 0708 	and.w	r7, r7, #8
 8011502:	2300      	movs	r3, #0
 8011504:	433e      	orrs	r6, r7
 8011506:	220c      	movs	r2, #12
 8011508:	4619      	mov	r1, r3
 801150a:	4628      	mov	r0, r5
 801150c:	f7f4 fd7a 	bl	8006004 <_Unwind_VRS_Set>
 8011510:	2e06      	cmp	r6, #6
 8011512:	d117      	bne.n	8011544 <__gxx_personality_v0+0xa8>
 8011514:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8011518:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 801151a:	f1b8 0f00 	cmp.w	r8, #0
 801151e:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
 8011522:	bf0c      	ite	eq
 8011524:	f04f 0a01 	moveq.w	sl, #1
 8011528:	f04f 0a03 	movne.w	sl, #3
 801152c:	e105      	b.n	801173a <__gxx_personality_v0+0x29e>
 801152e:	aa10      	add	r2, sp, #64	; 0x40
 8011530:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8011534:	9200      	str	r2, [sp, #0]
 8011536:	4633      	mov	r3, r6
 8011538:	4631      	mov	r1, r6
 801153a:	220c      	movs	r2, #12
 801153c:	4628      	mov	r0, r5
 801153e:	f7f4 fd61 	bl	8006004 <_Unwind_VRS_Set>
 8011542:	2602      	movs	r6, #2
 8011544:	4628      	mov	r0, r5
 8011546:	f7f5 fac7 	bl	8006ad8 <_Unwind_GetLanguageSpecificData>
 801154a:	4681      	mov	r9, r0
 801154c:	2800      	cmp	r0, #0
 801154e:	d0b7      	beq.n	80114c0 <__gxx_personality_v0+0x24>
 8011550:	aa0a      	add	r2, sp, #40	; 0x28
 8011552:	4601      	mov	r1, r0
 8011554:	4628      	mov	r0, r5
 8011556:	f7ff ff66 	bl	8011426 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 801155a:	4629      	mov	r1, r5
 801155c:	4680      	mov	r8, r0
 801155e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011562:	f7ff ff2c 	bl	80113be <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8011566:	210f      	movs	r1, #15
 8011568:	900c      	str	r0, [sp, #48]	; 0x30
 801156a:	4628      	mov	r0, r5
 801156c:	f7ff ff89 	bl	8011482 <_Unwind_GetGR>
 8011570:	f020 0001 	bic.w	r0, r0, #1
 8011574:	1e47      	subs	r7, r0, #1
 8011576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011578:	4598      	cmp	r8, r3
 801157a:	f080 813f 	bcs.w	80117fc <__gxx_personality_v0+0x360>
 801157e:	4642      	mov	r2, r8
 8011580:	ab06      	add	r3, sp, #24
 8011582:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8011586:	2000      	movs	r0, #0
 8011588:	f7ff ff3d 	bl	8011406 <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 801158c:	ab07      	add	r3, sp, #28
 801158e:	4602      	mov	r2, r0
 8011590:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8011594:	2000      	movs	r0, #0
 8011596:	f7ff ff36 	bl	8011406 <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 801159a:	ab08      	add	r3, sp, #32
 801159c:	4602      	mov	r2, r0
 801159e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80115a2:	2000      	movs	r0, #0
 80115a4:	f7ff ff2f 	bl	8011406 <read_encoded_value(_Unwind_Context*, unsigned char, unsigned char const*, unsigned int*)>
 80115a8:	a909      	add	r1, sp, #36	; 0x24
 80115aa:	f7ff fe9b 	bl	80112e4 <read_uleb128(unsigned char const*, unsigned long*)>
 80115ae:	9b06      	ldr	r3, [sp, #24]
 80115b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115b2:	4680      	mov	r8, r0
 80115b4:	4413      	add	r3, r2
 80115b6:	429f      	cmp	r7, r3
 80115b8:	d202      	bcs.n	80115c0 <__gxx_personality_v0+0x124>
 80115ba:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80115be:	e7da      	b.n	8011576 <__gxx_personality_v0+0xda>
 80115c0:	9a07      	ldr	r2, [sp, #28]
 80115c2:	4413      	add	r3, r2
 80115c4:	429f      	cmp	r7, r3
 80115c6:	d2d6      	bcs.n	8011576 <__gxx_personality_v0+0xda>
 80115c8:	9808      	ldr	r0, [sp, #32]
 80115ca:	b118      	cbz	r0, 80115d4 <__gxx_personality_v0+0x138>
 80115cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115ce:	eb00 0803 	add.w	r8, r0, r3
 80115d2:	e000      	b.n	80115d6 <__gxx_personality_v0+0x13a>
 80115d4:	4680      	mov	r8, r0
 80115d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115d8:	b110      	cbz	r0, 80115e0 <__gxx_personality_v0+0x144>
 80115da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80115dc:	3801      	subs	r0, #1
 80115de:	4438      	add	r0, r7
 80115e0:	f1b8 0f00 	cmp.w	r8, #0
 80115e4:	f43f af6c 	beq.w	80114c0 <__gxx_personality_v0+0x24>
 80115e8:	2800      	cmp	r0, #0
 80115ea:	f000 810c 	beq.w	8011806 <__gxx_personality_v0+0x36a>
 80115ee:	f016 0308 	ands.w	r3, r6, #8
 80115f2:	9302      	str	r3, [sp, #8]
 80115f4:	d014      	beq.n	8011620 <__gxx_personality_v0+0x184>
 80115f6:	2347      	movs	r3, #71	; 0x47
 80115f8:	7023      	strb	r3, [r4, #0]
 80115fa:	234e      	movs	r3, #78	; 0x4e
 80115fc:	7063      	strb	r3, [r4, #1]
 80115fe:	2355      	movs	r3, #85	; 0x55
 8011600:	70a3      	strb	r3, [r4, #2]
 8011602:	2343      	movs	r3, #67	; 0x43
 8011604:	70e3      	strb	r3, [r4, #3]
 8011606:	2346      	movs	r3, #70	; 0x46
 8011608:	7123      	strb	r3, [r4, #4]
 801160a:	234f      	movs	r3, #79	; 0x4f
 801160c:	7163      	strb	r3, [r4, #5]
 801160e:	2352      	movs	r3, #82	; 0x52
 8011610:	71a3      	strb	r3, [r4, #6]
 8011612:	2300      	movs	r3, #0
 8011614:	71e3      	strb	r3, [r4, #7]
 8011616:	f04f 0a00 	mov.w	sl, #0
 801161a:	f06f 0b03 	mvn.w	fp, #3
 801161e:	e01b      	b.n	8011658 <__gxx_personality_v0+0x1bc>
 8011620:	79e3      	ldrb	r3, [r4, #7]
 8011622:	2b01      	cmp	r3, #1
 8011624:	bf0c      	ite	eq
 8011626:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 801162a:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 801162e:	9304      	str	r3, [sp, #16]
 8011630:	e7f1      	b.n	8011616 <__gxx_personality_v0+0x17a>
 8011632:	2704      	movs	r7, #4
 8011634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011636:	ab09      	add	r3, sp, #36	; 0x24
 8011638:	fb07 2211 	mls	r2, r7, r1, r2
 801163c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801163e:	f7ff fe7a 	bl	8011336 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
 8011642:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011644:	2900      	cmp	r1, #0
 8011646:	f000 80d5 	beq.w	80117f4 <__gxx_personality_v0+0x358>
 801164a:	bb6c      	cbnz	r4, 80116a8 <__gxx_personality_v0+0x20c>
 801164c:	9f08      	ldr	r7, [sp, #32]
 801164e:	2f00      	cmp	r7, #0
 8011650:	d059      	beq.n	8011706 <__gxx_personality_v0+0x26a>
 8011652:	9b03      	ldr	r3, [sp, #12]
 8011654:	443b      	add	r3, r7
 8011656:	4618      	mov	r0, r3
 8011658:	a907      	add	r1, sp, #28
 801165a:	f7ff fe54 	bl	8011306 <read_sleb128(unsigned char const*, long*)>
 801165e:	a908      	add	r1, sp, #32
 8011660:	9003      	str	r0, [sp, #12]
 8011662:	f7ff fe50 	bl	8011306 <read_sleb128(unsigned char const*, long*)>
 8011666:	9907      	ldr	r1, [sp, #28]
 8011668:	2900      	cmp	r1, #0
 801166a:	d049      	beq.n	8011700 <__gxx_personality_v0+0x264>
 801166c:	dd25      	ble.n	80116ba <__gxx_personality_v0+0x21e>
 801166e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011672:	28ff      	cmp	r0, #255	; 0xff
 8011674:	d014      	beq.n	80116a0 <__gxx_personality_v0+0x204>
 8011676:	f000 0307 	and.w	r3, r0, #7
 801167a:	2b04      	cmp	r3, #4
 801167c:	d80e      	bhi.n	801169c <__gxx_personality_v0+0x200>
 801167e:	a201      	add	r2, pc, #4	; (adr r2, 8011684 <__gxx_personality_v0+0x1e8>)
 8011680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011684:	08011633 	.word	0x08011633
 8011688:	0801169d 	.word	0x0801169d
 801168c:	080116a5 	.word	0x080116a5
 8011690:	08011633 	.word	0x08011633
 8011694:	08011699 	.word	0x08011699
 8011698:	2708      	movs	r7, #8
 801169a:	e7cb      	b.n	8011634 <__gxx_personality_v0+0x198>
 801169c:	f7ff f874 	bl	8010788 <abort>
 80116a0:	2700      	movs	r7, #0
 80116a2:	e7c7      	b.n	8011634 <__gxx_personality_v0+0x198>
 80116a4:	2702      	movs	r7, #2
 80116a6:	e7c5      	b.n	8011634 <__gxx_personality_v0+0x198>
 80116a8:	ab04      	add	r3, sp, #16
 80116aa:	2200      	movs	r2, #0
 80116ac:	4620      	mov	r0, r4
 80116ae:	f000 f94f 	bl	8011950 <__cxa_type_match>
 80116b2:	2800      	cmp	r0, #0
 80116b4:	f040 809e 	bne.w	80117f4 <__gxx_personality_v0+0x358>
 80116b8:	e7c8      	b.n	801164c <__gxx_personality_v0+0x1b0>
 80116ba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80116bc:	1c4a      	adds	r2, r1, #1
 80116be:	b1b4      	cbz	r4, 80116ee <__gxx_personality_v0+0x252>
 80116c0:	9b02      	ldr	r3, [sp, #8]
 80116c2:	b9a3      	cbnz	r3, 80116ee <__gxx_personality_v0+0x252>
 80116c4:	fb0b 7202 	mla	r2, fp, r2, r7
 80116c8:	9b04      	ldr	r3, [sp, #16]
 80116ca:	1f17      	subs	r7, r2, #4
 80116cc:	9306      	str	r3, [sp, #24]
 80116ce:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80116d2:	b141      	cbz	r1, 80116e6 <__gxx_personality_v0+0x24a>
 80116d4:	ab06      	add	r3, sp, #24
 80116d6:	2200      	movs	r2, #0
 80116d8:	4439      	add	r1, r7
 80116da:	4620      	mov	r0, r4
 80116dc:	f000 f938 	bl	8011950 <__cxa_type_match>
 80116e0:	2800      	cmp	r0, #0
 80116e2:	d0f4      	beq.n	80116ce <__gxx_personality_v0+0x232>
 80116e4:	2101      	movs	r1, #1
 80116e6:	f081 0101 	eor.w	r1, r1, #1
 80116ea:	b2c9      	uxtb	r1, r1
 80116ec:	e005      	b.n	80116fa <__gxx_personality_v0+0x25e>
 80116ee:	fb0b f202 	mul.w	r2, fp, r2
 80116f2:	58b9      	ldr	r1, [r7, r2]
 80116f4:	fab1 f181 	clz	r1, r1
 80116f8:	0949      	lsrs	r1, r1, #5
 80116fa:	2900      	cmp	r1, #0
 80116fc:	d0a6      	beq.n	801164c <__gxx_personality_v0+0x1b0>
 80116fe:	e079      	b.n	80117f4 <__gxx_personality_v0+0x358>
 8011700:	f04f 0a01 	mov.w	sl, #1
 8011704:	e7a2      	b.n	801164c <__gxx_personality_v0+0x1b0>
 8011706:	f1ba 0f00 	cmp.w	sl, #0
 801170a:	f43f aed9 	beq.w	80114c0 <__gxx_personality_v0+0x24>
 801170e:	f04f 0a02 	mov.w	sl, #2
 8011712:	07f3      	lsls	r3, r6, #31
 8011714:	d511      	bpl.n	801173a <__gxx_personality_v0+0x29e>
 8011716:	f1ba 0f02 	cmp.w	sl, #2
 801171a:	f43f aed1 	beq.w	80114c0 <__gxx_personality_v0+0x24>
 801171e:	210d      	movs	r1, #13
 8011720:	4628      	mov	r0, r5
 8011722:	9e04      	ldr	r6, [sp, #16]
 8011724:	f7ff fead 	bl	8011482 <_Unwind_GetGR>
 8011728:	6266      	str	r6, [r4, #36]	; 0x24
 801172a:	6220      	str	r0, [r4, #32]
 801172c:	62a7      	str	r7, [r4, #40]	; 0x28
 801172e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8011732:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8011736:	2006      	movs	r0, #6
 8011738:	e069      	b.n	801180e <__gxx_personality_v0+0x372>
 801173a:	f016 0608 	ands.w	r6, r6, #8
 801173e:	d008      	beq.n	8011752 <__gxx_personality_v0+0x2b6>
 8011740:	f1ba 0f01 	cmp.w	sl, #1
 8011744:	d101      	bne.n	801174a <__gxx_personality_v0+0x2ae>
 8011746:	f000 f895 	bl	8011874 <std::terminate()>
 801174a:	2f00      	cmp	r7, #0
 801174c:	da24      	bge.n	8011798 <__gxx_personality_v0+0x2fc>
 801174e:	f000 f8b3 	bl	80118b8 <std::unexpected()>
 8011752:	f1ba 0f01 	cmp.w	sl, #1
 8011756:	d102      	bne.n	801175e <__gxx_personality_v0+0x2c2>
 8011758:	4620      	mov	r0, r4
 801175a:	f000 fa2c 	bl	8011bb6 <__cxa_call_terminate>
 801175e:	2f00      	cmp	r7, #0
 8011760:	da1a      	bge.n	8011798 <__gxx_personality_v0+0x2fc>
 8011762:	aa0a      	add	r2, sp, #40	; 0x28
 8011764:	4649      	mov	r1, r9
 8011766:	4628      	mov	r0, r5
 8011768:	f7ff fe5d 	bl	8011426 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
 801176c:	4629      	mov	r1, r5
 801176e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011772:	f7ff fe24 	bl	80113be <base_of_encoded_value(unsigned char, _Unwind_Context*)>
 8011776:	f06f 0303 	mvn.w	r3, #3
 801177a:	fb07 3303 	mla	r3, r7, r3, r3
 801177e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011780:	900c      	str	r0, [sp, #48]	; 0x30
 8011782:	4413      	add	r3, r2
 8011784:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8011788:	b10a      	cbz	r2, 801178e <__gxx_personality_v0+0x2f2>
 801178a:	3601      	adds	r6, #1
 801178c:	e7fa      	b.n	8011784 <__gxx_personality_v0+0x2e8>
 801178e:	2204      	movs	r2, #4
 8011790:	62a6      	str	r6, [r4, #40]	; 0x28
 8011792:	62e0      	str	r0, [r4, #44]	; 0x2c
 8011794:	6322      	str	r2, [r4, #48]	; 0x30
 8011796:	6363      	str	r3, [r4, #52]	; 0x34
 8011798:	ab10      	add	r3, sp, #64	; 0x40
 801179a:	f843 4d1c 	str.w	r4, [r3, #-28]!
 801179e:	9300      	str	r3, [sp, #0]
 80117a0:	2300      	movs	r3, #0
 80117a2:	461a      	mov	r2, r3
 80117a4:	4619      	mov	r1, r3
 80117a6:	4628      	mov	r0, r5
 80117a8:	f7f4 fc2c 	bl	8006004 <_Unwind_VRS_Set>
 80117ac:	ab10      	add	r3, sp, #64	; 0x40
 80117ae:	f843 7d20 	str.w	r7, [r3, #-32]!
 80117b2:	9300      	str	r3, [sp, #0]
 80117b4:	2300      	movs	r3, #0
 80117b6:	4619      	mov	r1, r3
 80117b8:	2201      	movs	r2, #1
 80117ba:	4628      	mov	r0, r5
 80117bc:	f7f4 fc22 	bl	8006004 <_Unwind_VRS_Set>
 80117c0:	210f      	movs	r1, #15
 80117c2:	4628      	mov	r0, r5
 80117c4:	f7ff fe5d 	bl	8011482 <_Unwind_GetGR>
 80117c8:	f000 0001 	and.w	r0, r0, #1
 80117cc:	ab10      	add	r3, sp, #64	; 0x40
 80117ce:	ea40 0008 	orr.w	r0, r0, r8
 80117d2:	f843 0d24 	str.w	r0, [r3, #-36]!
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	2300      	movs	r3, #0
 80117da:	220f      	movs	r2, #15
 80117dc:	4619      	mov	r1, r3
 80117de:	4628      	mov	r0, r5
 80117e0:	f7f4 fc10 	bl	8006004 <_Unwind_VRS_Set>
 80117e4:	f1ba 0f02 	cmp.w	sl, #2
 80117e8:	d102      	bne.n	80117f0 <__gxx_personality_v0+0x354>
 80117ea:	4620      	mov	r0, r4
 80117ec:	f000 f90c 	bl	8011a08 <__cxa_begin_cleanup>
 80117f0:	2007      	movs	r0, #7
 80117f2:	e00c      	b.n	801180e <__gxx_personality_v0+0x372>
 80117f4:	9f07      	ldr	r7, [sp, #28]
 80117f6:	f04f 0a03 	mov.w	sl, #3
 80117fa:	e78a      	b.n	8011712 <__gxx_personality_v0+0x276>
 80117fc:	f04f 0800 	mov.w	r8, #0
 8011800:	f04f 0a01 	mov.w	sl, #1
 8011804:	e001      	b.n	801180a <__gxx_personality_v0+0x36e>
 8011806:	f04f 0a02 	mov.w	sl, #2
 801180a:	2700      	movs	r7, #0
 801180c:	e781      	b.n	8011712 <__gxx_personality_v0+0x276>
 801180e:	b011      	add	sp, #68	; 0x44
 8011810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011814 <operator new(unsigned int)>:
 8011814:	b510      	push	{r4, lr}
 8011816:	2800      	cmp	r0, #0
 8011818:	bf14      	ite	ne
 801181a:	4604      	movne	r4, r0
 801181c:	2401      	moveq	r4, #1
 801181e:	4620      	mov	r0, r4
 8011820:	f002 f8d6 	bl	80139d0 <malloc>
 8011824:	b930      	cbnz	r0, 8011834 <operator new(unsigned int)+0x20>
 8011826:	f000 f9f9 	bl	8011c1c <std::get_new_handler()>
 801182a:	b908      	cbnz	r0, 8011830 <operator new(unsigned int)+0x1c>
 801182c:	f7fe ffac 	bl	8010788 <abort>
 8011830:	4780      	blx	r0
 8011832:	e7f4      	b.n	801181e <operator new(unsigned int)+0xa>
 8011834:	bd10      	pop	{r4, pc}

08011836 <operator new[](unsigned int)>:
 8011836:	f7ff bfed 	b.w	8011814 <operator new(unsigned int)>

0801183a <__cxxabiv1::__terminate(void (*)())>:
 801183a:	b508      	push	{r3, lr}
 801183c:	4780      	blx	r0
 801183e:	f7fe ffa3 	bl	8010788 <abort>
	...

08011844 <std::set_terminate(void (*)())>:
 8011844:	4602      	mov	r2, r0
 8011846:	f3bf 8f5f 	dmb	sy
 801184a:	4b05      	ldr	r3, [pc, #20]	; (8011860 <std::set_terminate(void (*)())+0x1c>)
 801184c:	e853 0f00 	ldrex	r0, [r3]
 8011850:	e843 2100 	strex	r1, r2, [r3]
 8011854:	2900      	cmp	r1, #0
 8011856:	d1f9      	bne.n	801184c <std::set_terminate(void (*)())+0x8>
 8011858:	f3bf 8f5f 	dmb	sy
 801185c:	4770      	bx	lr
 801185e:	bf00      	nop
 8011860:	200001a4 	.word	0x200001a4

08011864 <std::get_terminate()>:
 8011864:	4b02      	ldr	r3, [pc, #8]	; (8011870 <std::get_terminate()+0xc>)
 8011866:	6818      	ldr	r0, [r3, #0]
 8011868:	f3bf 8f5f 	dmb	sy
 801186c:	4770      	bx	lr
 801186e:	bf00      	nop
 8011870:	200001a4 	.word	0x200001a4

08011874 <std::terminate()>:
 8011874:	b508      	push	{r3, lr}
 8011876:	f7ff fff5 	bl	8011864 <std::get_terminate()>
 801187a:	f7ff ffde 	bl	801183a <__cxxabiv1::__terminate(void (*)())>

0801187e <__cxxabiv1::__unexpected(void (*)())>:
 801187e:	b508      	push	{r3, lr}
 8011880:	4780      	blx	r0
 8011882:	f7ff fff7 	bl	8011874 <std::terminate()>
	...

08011888 <std::set_unexpected(void (*)())>:
 8011888:	4602      	mov	r2, r0
 801188a:	f3bf 8f5f 	dmb	sy
 801188e:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <std::set_unexpected(void (*)())+0x1c>)
 8011890:	e853 0f00 	ldrex	r0, [r3]
 8011894:	e843 2100 	strex	r1, r2, [r3]
 8011898:	2900      	cmp	r1, #0
 801189a:	d1f9      	bne.n	8011890 <std::set_unexpected(void (*)())+0x8>
 801189c:	f3bf 8f5f 	dmb	sy
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	200001a8 	.word	0x200001a8

080118a8 <std::get_unexpected()>:
 80118a8:	4b02      	ldr	r3, [pc, #8]	; (80118b4 <std::get_unexpected()+0xc>)
 80118aa:	6818      	ldr	r0, [r3, #0]
 80118ac:	f3bf 8f5f 	dmb	sy
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	200001a8 	.word	0x200001a8

080118b8 <std::unexpected()>:
 80118b8:	b508      	push	{r3, lr}
 80118ba:	f7ff fff5 	bl	80118a8 <std::get_unexpected()>
 80118be:	f7ff ffde 	bl	801187e <__cxxabiv1::__unexpected(void (*)())>

080118c2 <std::type_info::~type_info()>:
 80118c2:	4770      	bx	lr

080118c4 <std::type_info::__is_pointer_p() const>:
 80118c4:	2000      	movs	r0, #0
 80118c6:	4770      	bx	lr

080118c8 <std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 80118c8:	2000      	movs	r0, #0
 80118ca:	4770      	bx	lr

080118cc <std::type_info::~type_info()>:
 80118cc:	b510      	push	{r4, lr}
 80118ce:	4604      	mov	r4, r0
 80118d0:	f7ff fc84 	bl	80111dc <operator delete(void*)>
 80118d4:	4620      	mov	r0, r4
 80118d6:	bd10      	pop	{r4, pc}

080118d8 <std::type_info::operator==(std::type_info const&) const>:
 80118d8:	4281      	cmp	r1, r0
 80118da:	b508      	push	{r3, lr}
 80118dc:	d00e      	beq.n	80118fc <std::type_info::operator==(std::type_info const&) const+0x24>
 80118de:	6840      	ldr	r0, [r0, #4]
 80118e0:	7803      	ldrb	r3, [r0, #0]
 80118e2:	2b2a      	cmp	r3, #42	; 0x2a
 80118e4:	d00c      	beq.n	8011900 <std::type_info::operator==(std::type_info const&) const+0x28>
 80118e6:	6849      	ldr	r1, [r1, #4]
 80118e8:	780b      	ldrb	r3, [r1, #0]
 80118ea:	2b2a      	cmp	r3, #42	; 0x2a
 80118ec:	bf08      	it	eq
 80118ee:	3101      	addeq	r1, #1
 80118f0:	f7fd fa64 	bl	800edbc <strcmp>
 80118f4:	fab0 f080 	clz	r0, r0
 80118f8:	0940      	lsrs	r0, r0, #5
 80118fa:	bd08      	pop	{r3, pc}
 80118fc:	2001      	movs	r0, #1
 80118fe:	bd08      	pop	{r3, pc}
 8011900:	2000      	movs	r0, #0
 8011902:	bd08      	pop	{r3, pc}

08011904 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 8011904:	f7ff bfe8 	b.w	80118d8 <std::type_info::operator==(std::type_info const&) const>

08011908 <__cxa_end_cleanup>:
 8011908:	b41e      	push	{r1, r2, r3, r4}
 801190a:	f000 f89a 	bl	8011a42 <__gnu_end_cleanup>
 801190e:	bc1e      	pop	{r1, r2, r3, r4}
 8011910:	f7f4 ff02 	bl	8006718 <_Unwind_Resume>

08011914 <__cxxabiv1::__is_gxx_exception_class(char*)>:
 8011914:	7803      	ldrb	r3, [r0, #0]
 8011916:	2b47      	cmp	r3, #71	; 0x47
 8011918:	d117      	bne.n	801194a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801191a:	7843      	ldrb	r3, [r0, #1]
 801191c:	2b4e      	cmp	r3, #78	; 0x4e
 801191e:	d114      	bne.n	801194a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011920:	7883      	ldrb	r3, [r0, #2]
 8011922:	2b55      	cmp	r3, #85	; 0x55
 8011924:	d111      	bne.n	801194a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011926:	78c3      	ldrb	r3, [r0, #3]
 8011928:	2b43      	cmp	r3, #67	; 0x43
 801192a:	d10e      	bne.n	801194a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801192c:	7903      	ldrb	r3, [r0, #4]
 801192e:	2b43      	cmp	r3, #67	; 0x43
 8011930:	d10b      	bne.n	801194a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011932:	7943      	ldrb	r3, [r0, #5]
 8011934:	2b2b      	cmp	r3, #43	; 0x2b
 8011936:	d108      	bne.n	801194a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011938:	7983      	ldrb	r3, [r0, #6]
 801193a:	2b2b      	cmp	r3, #43	; 0x2b
 801193c:	d105      	bne.n	801194a <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 801193e:	79c0      	ldrb	r0, [r0, #7]
 8011940:	2801      	cmp	r0, #1
 8011942:	bf8c      	ite	hi
 8011944:	2000      	movhi	r0, #0
 8011946:	2001      	movls	r0, #1
 8011948:	4770      	bx	lr
 801194a:	2000      	movs	r0, #0
 801194c:	4770      	bx	lr
	...

08011950 <__cxa_type_match>:
 8011950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011954:	461d      	mov	r5, r3
 8011956:	7803      	ldrb	r3, [r0, #0]
 8011958:	460e      	mov	r6, r1
 801195a:	2b47      	cmp	r3, #71	; 0x47
 801195c:	4602      	mov	r2, r0
 801195e:	79c1      	ldrb	r1, [r0, #7]
 8011960:	d143      	bne.n	80119ea <__cxa_type_match+0x9a>
 8011962:	7843      	ldrb	r3, [r0, #1]
 8011964:	2b4e      	cmp	r3, #78	; 0x4e
 8011966:	d140      	bne.n	80119ea <__cxa_type_match+0x9a>
 8011968:	7883      	ldrb	r3, [r0, #2]
 801196a:	2b55      	cmp	r3, #85	; 0x55
 801196c:	d13d      	bne.n	80119ea <__cxa_type_match+0x9a>
 801196e:	78c3      	ldrb	r3, [r0, #3]
 8011970:	2b43      	cmp	r3, #67	; 0x43
 8011972:	d13a      	bne.n	80119ea <__cxa_type_match+0x9a>
 8011974:	7903      	ldrb	r3, [r0, #4]
 8011976:	2b46      	cmp	r3, #70	; 0x46
 8011978:	d137      	bne.n	80119ea <__cxa_type_match+0x9a>
 801197a:	7943      	ldrb	r3, [r0, #5]
 801197c:	2b4f      	cmp	r3, #79	; 0x4f
 801197e:	d134      	bne.n	80119ea <__cxa_type_match+0x9a>
 8011980:	7983      	ldrb	r3, [r0, #6]
 8011982:	2b52      	cmp	r3, #82	; 0x52
 8011984:	d131      	bne.n	80119ea <__cxa_type_match+0x9a>
 8011986:	2900      	cmp	r1, #0
 8011988:	d12f      	bne.n	80119ea <__cxa_type_match+0x9a>
 801198a:	4608      	mov	r0, r1
 801198c:	2301      	movs	r3, #1
 801198e:	2400      	movs	r4, #0
 8011990:	9401      	str	r4, [sp, #4]
 8011992:	b97b      	cbnz	r3, 80119b4 <__cxa_type_match+0x64>
 8011994:	b980      	cbnz	r0, 80119b8 <__cxa_type_match+0x68>
 8011996:	2901      	cmp	r1, #1
 8011998:	bf0a      	itet	eq
 801199a:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 801199e:	f1a2 0320 	subne.w	r3, r2, #32
 80119a2:	3b78      	subeq	r3, #120	; 0x78
 80119a4:	2901      	cmp	r1, #1
 80119a6:	bf0c      	ite	eq
 80119a8:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 80119ac:	3258      	addne	r2, #88	; 0x58
 80119ae:	681c      	ldr	r4, [r3, #0]
 80119b0:	9201      	str	r2, [sp, #4]
 80119b2:	e002      	b.n	80119ba <__cxa_type_match+0x6a>
 80119b4:	4c12      	ldr	r4, [pc, #72]	; (8011a00 <__cxa_type_match+0xb0>)
 80119b6:	e000      	b.n	80119ba <__cxa_type_match+0x6a>
 80119b8:	4c12      	ldr	r4, [pc, #72]	; (8011a04 <__cxa_type_match+0xb4>)
 80119ba:	6823      	ldr	r3, [r4, #0]
 80119bc:	4620      	mov	r0, r4
 80119be:	689b      	ldr	r3, [r3, #8]
 80119c0:	4798      	blx	r3
 80119c2:	b120      	cbz	r0, 80119ce <__cxa_type_match+0x7e>
 80119c4:	9b01      	ldr	r3, [sp, #4]
 80119c6:	2702      	movs	r7, #2
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	9301      	str	r3, [sp, #4]
 80119cc:	e000      	b.n	80119d0 <__cxa_type_match+0x80>
 80119ce:	2701      	movs	r7, #1
 80119d0:	6833      	ldr	r3, [r6, #0]
 80119d2:	aa01      	add	r2, sp, #4
 80119d4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80119d8:	4621      	mov	r1, r4
 80119da:	2301      	movs	r3, #1
 80119dc:	4630      	mov	r0, r6
 80119de:	47c0      	blx	r8
 80119e0:	b158      	cbz	r0, 80119fa <__cxa_type_match+0xaa>
 80119e2:	9b01      	ldr	r3, [sp, #4]
 80119e4:	4638      	mov	r0, r7
 80119e6:	602b      	str	r3, [r5, #0]
 80119e8:	e007      	b.n	80119fa <__cxa_type_match+0xaa>
 80119ea:	4610      	mov	r0, r2
 80119ec:	f7ff ff92 	bl	8011914 <__cxxabiv1::__is_gxx_exception_class(char*)>
 80119f0:	f080 0001 	eor.w	r0, r0, #1
 80119f4:	b2c0      	uxtb	r0, r0
 80119f6:	2300      	movs	r3, #0
 80119f8:	e7c9      	b.n	801198e <__cxa_type_match+0x3e>
 80119fa:	b002      	add	sp, #8
 80119fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a00:	080156a8 	.word	0x080156a8
 8011a04:	08015700 	.word	0x08015700

08011a08 <__cxa_begin_cleanup>:
 8011a08:	b510      	push	{r4, lr}
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	f000 f988 	bl	8011d20 <__cxa_get_globals>
 8011a10:	4602      	mov	r2, r0
 8011a12:	4620      	mov	r0, r4
 8011a14:	f1a4 0120 	sub.w	r1, r4, #32
 8011a18:	f7ff ff7c 	bl	8011914 <__cxxabiv1::__is_gxx_exception_class(char*)>
 8011a1c:	b150      	cbz	r0, 8011a34 <__cxa_begin_cleanup+0x2c>
 8011a1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011a22:	3301      	adds	r3, #1
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a2a:	d108      	bne.n	8011a3e <__cxa_begin_cleanup+0x36>
 8011a2c:	6893      	ldr	r3, [r2, #8]
 8011a2e:	f844 3c08 	str.w	r3, [r4, #-8]
 8011a32:	e003      	b.n	8011a3c <__cxa_begin_cleanup+0x34>
 8011a34:	6893      	ldr	r3, [r2, #8]
 8011a36:	b10b      	cbz	r3, 8011a3c <__cxa_begin_cleanup+0x34>
 8011a38:	f7ff ff1c 	bl	8011874 <std::terminate()>
 8011a3c:	6091      	str	r1, [r2, #8]
 8011a3e:	2001      	movs	r0, #1
 8011a40:	bd10      	pop	{r4, pc}

08011a42 <__gnu_end_cleanup>:
 8011a42:	b510      	push	{r4, lr}
 8011a44:	f000 f96c 	bl	8011d20 <__cxa_get_globals>
 8011a48:	6882      	ldr	r2, [r0, #8]
 8011a4a:	4601      	mov	r1, r0
 8011a4c:	b90a      	cbnz	r2, 8011a52 <__gnu_end_cleanup+0x10>
 8011a4e:	f7ff ff11 	bl	8011874 <std::terminate()>
 8011a52:	f102 0420 	add.w	r4, r2, #32
 8011a56:	4620      	mov	r0, r4
 8011a58:	f7ff ff5c 	bl	8011914 <__cxxabiv1::__is_gxx_exception_class(char*)>
 8011a5c:	b138      	cbz	r0, 8011a6e <__gnu_end_cleanup+0x2c>
 8011a5e:	69d3      	ldr	r3, [r2, #28]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	61d3      	str	r3, [r2, #28]
 8011a64:	b923      	cbnz	r3, 8011a70 <__gnu_end_cleanup+0x2e>
 8011a66:	6990      	ldr	r0, [r2, #24]
 8011a68:	6088      	str	r0, [r1, #8]
 8011a6a:	6193      	str	r3, [r2, #24]
 8011a6c:	e000      	b.n	8011a70 <__gnu_end_cleanup+0x2e>
 8011a6e:	6088      	str	r0, [r1, #8]
 8011a70:	4620      	mov	r0, r4
 8011a72:	bd10      	pop	{r4, pc}

08011a74 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
 8011a74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011a76:	2310      	movs	r3, #16
 8011a78:	9302      	str	r3, [sp, #8]
 8011a7a:	6803      	ldr	r3, [r0, #0]
 8011a7c:	2400      	movs	r4, #0
 8011a7e:	4615      	mov	r5, r2
 8011a80:	699e      	ldr	r6, [r3, #24]
 8011a82:	9400      	str	r4, [sp, #0]
 8011a84:	466b      	mov	r3, sp
 8011a86:	f88d 4004 	strb.w	r4, [sp, #4]
 8011a8a:	9403      	str	r4, [sp, #12]
 8011a8c:	6812      	ldr	r2, [r2, #0]
 8011a8e:	47b0      	blx	r6
 8011a90:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011a94:	f003 0306 	and.w	r3, r3, #6
 8011a98:	2b06      	cmp	r3, #6
 8011a9a:	bf11      	iteee	ne
 8011a9c:	4620      	movne	r0, r4
 8011a9e:	9b00      	ldreq	r3, [sp, #0]
 8011aa0:	2001      	moveq	r0, #1
 8011aa2:	602b      	streq	r3, [r5, #0]
 8011aa4:	b004      	add	sp, #16
 8011aa6:	bd70      	pop	{r4, r5, r6, pc}

08011aa8 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
 8011aa8:	9800      	ldr	r0, [sp, #0]
 8011aaa:	4290      	cmp	r0, r2
 8011aac:	bf0c      	ite	eq
 8011aae:	2006      	moveq	r0, #6
 8011ab0:	2001      	movne	r0, #1
 8011ab2:	4770      	bx	lr

08011ab4 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8011ab4:	b510      	push	{r4, lr}
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	4b02      	ldr	r3, [pc, #8]	; (8011ac4 <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
 8011aba:	6003      	str	r3, [r0, #0]
 8011abc:	f7ff ff01 	bl	80118c2 <std::type_info::~type_info()>
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	bd10      	pop	{r4, pc}
 8011ac4:	080155d0 	.word	0x080155d0

08011ac8 <__cxxabiv1::__class_type_info::~__class_type_info()>:
 8011ac8:	b510      	push	{r4, lr}
 8011aca:	4604      	mov	r4, r0
 8011acc:	f7ff fff2 	bl	8011ab4 <__cxxabiv1::__class_type_info::~__class_type_info()>
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7ff fb83 	bl	80111dc <operator delete(void*)>
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	bd10      	pop	{r4, pc}

08011ada <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
 8011ada:	b538      	push	{r3, r4, r5, lr}
 8011adc:	4615      	mov	r5, r2
 8011ade:	461c      	mov	r4, r3
 8011ae0:	f7ff fefa 	bl	80118d8 <std::type_info::operator==(std::type_info const&) const>
 8011ae4:	b120      	cbz	r0, 8011af0 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x16>
 8011ae6:	2308      	movs	r3, #8
 8011ae8:	60e3      	str	r3, [r4, #12]
 8011aea:	2306      	movs	r3, #6
 8011aec:	6025      	str	r5, [r4, #0]
 8011aee:	7123      	strb	r3, [r4, #4]
 8011af0:	bd38      	pop	{r3, r4, r5, pc}

08011af2 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
 8011af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011af6:	9e06      	ldr	r6, [sp, #24]
 8011af8:	4698      	mov	r8, r3
 8011afa:	9b08      	ldr	r3, [sp, #32]
 8011afc:	4607      	mov	r7, r0
 8011afe:	429e      	cmp	r6, r3
 8011b00:	4615      	mov	r5, r2
 8011b02:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011b04:	d103      	bne.n	8011b0e <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x1c>
 8011b06:	9907      	ldr	r1, [sp, #28]
 8011b08:	f7ff fee6 	bl	80118d8 <std::type_info::operator==(std::type_info const&) const>
 8011b0c:	b948      	cbnz	r0, 8011b22 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x30>
 8011b0e:	4641      	mov	r1, r8
 8011b10:	4638      	mov	r0, r7
 8011b12:	f7ff fee1 	bl	80118d8 <std::type_info::operator==(std::type_info const&) const>
 8011b16:	b128      	cbz	r0, 8011b24 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8011b18:	2301      	movs	r3, #1
 8011b1a:	6026      	str	r6, [r4, #0]
 8011b1c:	7125      	strb	r5, [r4, #4]
 8011b1e:	71a3      	strb	r3, [r4, #6]
 8011b20:	e000      	b.n	8011b24 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x32>
 8011b22:	7165      	strb	r5, [r4, #5]
 8011b24:	2000      	movs	r0, #0
 8011b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b2a <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
 8011b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2e:	4605      	mov	r5, r0
 8011b30:	460c      	mov	r4, r1
 8011b32:	4616      	mov	r6, r2
 8011b34:	461f      	mov	r7, r3
 8011b36:	f7ff fecf 	bl	80118d8 <std::type_info::operator==(std::type_info const&) const>
 8011b3a:	b948      	cbnz	r0, 8011b50 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 8011b3c:	2f03      	cmp	r7, #3
 8011b3e:	d807      	bhi.n	8011b50 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
 8011b40:	6823      	ldr	r3, [r4, #0]
 8011b42:	4632      	mov	r2, r6
 8011b44:	4629      	mov	r1, r5
 8011b46:	4620      	mov	r0, r4
 8011b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b4c:	695b      	ldr	r3, [r3, #20]
 8011b4e:	4718      	bx	r3
 8011b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b54 <__cxa_pure_virtual>:
 8011b54:	b508      	push	{r3, lr}
 8011b56:	221b      	movs	r2, #27
 8011b58:	4902      	ldr	r1, [pc, #8]	; (8011b64 <__cxa_pure_virtual+0x10>)
 8011b5a:	2002      	movs	r0, #2
 8011b5c:	f001 fff6 	bl	8013b4c <write>
 8011b60:	f7ff fe88 	bl	8011874 <std::terminate()>
 8011b64:	08015622 	.word	0x08015622

08011b68 <__cxa_deleted_virtual>:
 8011b68:	b508      	push	{r3, lr}
 8011b6a:	221e      	movs	r2, #30
 8011b6c:	4902      	ldr	r1, [pc, #8]	; (8011b78 <__cxa_deleted_virtual+0x10>)
 8011b6e:	2002      	movs	r0, #2
 8011b70:	f001 ffec 	bl	8013b4c <write>
 8011b74:	f7ff fe7e 	bl	8011874 <std::terminate()>
 8011b78:	0801563e 	.word	0x0801563e

08011b7c <__cxxabiv1::__is_gxx_exception_class(char*)>:
 8011b7c:	7803      	ldrb	r3, [r0, #0]
 8011b7e:	2b47      	cmp	r3, #71	; 0x47
 8011b80:	d117      	bne.n	8011bb2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011b82:	7843      	ldrb	r3, [r0, #1]
 8011b84:	2b4e      	cmp	r3, #78	; 0x4e
 8011b86:	d114      	bne.n	8011bb2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011b88:	7883      	ldrb	r3, [r0, #2]
 8011b8a:	2b55      	cmp	r3, #85	; 0x55
 8011b8c:	d111      	bne.n	8011bb2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011b8e:	78c3      	ldrb	r3, [r0, #3]
 8011b90:	2b43      	cmp	r3, #67	; 0x43
 8011b92:	d10e      	bne.n	8011bb2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011b94:	7903      	ldrb	r3, [r0, #4]
 8011b96:	2b43      	cmp	r3, #67	; 0x43
 8011b98:	d10b      	bne.n	8011bb2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011b9a:	7943      	ldrb	r3, [r0, #5]
 8011b9c:	2b2b      	cmp	r3, #43	; 0x2b
 8011b9e:	d108      	bne.n	8011bb2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011ba0:	7983      	ldrb	r3, [r0, #6]
 8011ba2:	2b2b      	cmp	r3, #43	; 0x2b
 8011ba4:	d105      	bne.n	8011bb2 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011ba6:	79c0      	ldrb	r0, [r0, #7]
 8011ba8:	2801      	cmp	r0, #1
 8011baa:	bf8c      	ite	hi
 8011bac:	2000      	movhi	r0, #0
 8011bae:	2001      	movls	r0, #1
 8011bb0:	4770      	bx	lr
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	4770      	bx	lr

08011bb6 <__cxa_call_terminate>:
 8011bb6:	b510      	push	{r4, lr}
 8011bb8:	4604      	mov	r4, r0
 8011bba:	b148      	cbz	r0, 8011bd0 <__cxa_call_terminate+0x1a>
 8011bbc:	f000 f855 	bl	8011c6a <__cxa_begin_catch>
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f7ff ffdb 	bl	8011b7c <__cxxabiv1::__is_gxx_exception_class(char*)>
 8011bc6:	b118      	cbz	r0, 8011bd0 <__cxa_call_terminate+0x1a>
 8011bc8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8011bcc:	f7ff fe35 	bl	801183a <__cxxabiv1::__terminate(void (*)())>
 8011bd0:	f7ff fe50 	bl	8011874 <std::terminate()>

08011bd4 <__cxa_call_unexpected>:
 8011bd4:	b538      	push	{r3, r4, r5, lr}
 8011bd6:	4602      	mov	r2, r0
 8011bd8:	f7ff ffd0 	bl	8011b7c <__cxxabiv1::__is_gxx_exception_class(char*)>
 8011bdc:	b118      	cbz	r0, 8011be6 <__cxa_call_unexpected+0x12>
 8011bde:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8011be2:	2500      	movs	r5, #0
 8011be4:	e001      	b.n	8011bea <__cxa_call_unexpected+0x16>
 8011be6:	4604      	mov	r4, r0
 8011be8:	2501      	movs	r5, #1
 8011bea:	4610      	mov	r0, r2
 8011bec:	f000 f83d 	bl	8011c6a <__cxa_begin_catch>
 8011bf0:	b10d      	cbz	r5, 8011bf6 <__cxa_call_unexpected+0x22>
 8011bf2:	f7ff fe61 	bl	80118b8 <std::unexpected()>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f7ff fe41 	bl	801187e <__cxxabiv1::__unexpected(void (*)())>

08011bfc <std::set_new_handler(void (*)())>:
 8011bfc:	4602      	mov	r2, r0
 8011bfe:	f3bf 8f5f 	dmb	sy
 8011c02:	4b05      	ldr	r3, [pc, #20]	; (8011c18 <std::set_new_handler(void (*)())+0x1c>)
 8011c04:	e853 0f00 	ldrex	r0, [r3]
 8011c08:	e843 2100 	strex	r1, r2, [r3]
 8011c0c:	2900      	cmp	r1, #0
 8011c0e:	d1f9      	bne.n	8011c04 <std::set_new_handler(void (*)())+0x8>
 8011c10:	f3bf 8f5f 	dmb	sy
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	200010cc 	.word	0x200010cc

08011c1c <std::get_new_handler()>:
 8011c1c:	4b02      	ldr	r3, [pc, #8]	; (8011c28 <std::get_new_handler()+0xc>)
 8011c1e:	6818      	ldr	r0, [r3, #0]
 8011c20:	f3bf 8f5f 	dmb	sy
 8011c24:	4770      	bx	lr
 8011c26:	bf00      	nop
 8011c28:	200010cc 	.word	0x200010cc

08011c2c <__cxxabiv1::__is_gxx_exception_class(char*)>:
 8011c2c:	7803      	ldrb	r3, [r0, #0]
 8011c2e:	2b47      	cmp	r3, #71	; 0x47
 8011c30:	d117      	bne.n	8011c62 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011c32:	7843      	ldrb	r3, [r0, #1]
 8011c34:	2b4e      	cmp	r3, #78	; 0x4e
 8011c36:	d114      	bne.n	8011c62 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011c38:	7883      	ldrb	r3, [r0, #2]
 8011c3a:	2b55      	cmp	r3, #85	; 0x55
 8011c3c:	d111      	bne.n	8011c62 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011c3e:	78c3      	ldrb	r3, [r0, #3]
 8011c40:	2b43      	cmp	r3, #67	; 0x43
 8011c42:	d10e      	bne.n	8011c62 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011c44:	7903      	ldrb	r3, [r0, #4]
 8011c46:	2b43      	cmp	r3, #67	; 0x43
 8011c48:	d10b      	bne.n	8011c62 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011c4a:	7943      	ldrb	r3, [r0, #5]
 8011c4c:	2b2b      	cmp	r3, #43	; 0x2b
 8011c4e:	d108      	bne.n	8011c62 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011c50:	7983      	ldrb	r3, [r0, #6]
 8011c52:	2b2b      	cmp	r3, #43	; 0x2b
 8011c54:	d105      	bne.n	8011c62 <__cxxabiv1::__is_gxx_exception_class(char*)+0x36>
 8011c56:	79c0      	ldrb	r0, [r0, #7]
 8011c58:	2801      	cmp	r0, #1
 8011c5a:	bf8c      	ite	hi
 8011c5c:	2000      	movhi	r0, #0
 8011c5e:	2001      	movls	r0, #1
 8011c60:	4770      	bx	lr
 8011c62:	2000      	movs	r0, #0
 8011c64:	4770      	bx	lr

08011c66 <__cxa_get_exception_ptr>:
 8011c66:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011c68:	4770      	bx	lr

08011c6a <__cxa_begin_catch>:
 8011c6a:	b538      	push	{r3, r4, r5, lr}
 8011c6c:	4605      	mov	r5, r0
 8011c6e:	f000 f857 	bl	8011d20 <__cxa_get_globals>
 8011c72:	4601      	mov	r1, r0
 8011c74:	6802      	ldr	r2, [r0, #0]
 8011c76:	4628      	mov	r0, r5
 8011c78:	f1a5 0420 	sub.w	r4, r5, #32
 8011c7c:	f7ff ffd6 	bl	8011c2c <__cxxabiv1::__is_gxx_exception_class(char*)>
 8011c80:	b928      	cbnz	r0, 8011c8e <__cxa_begin_catch+0x24>
 8011c82:	b10a      	cbz	r2, 8011c88 <__cxa_begin_catch+0x1e>
 8011c84:	f7ff fdf6 	bl	8011874 <std::terminate()>
 8011c88:	600c      	str	r4, [r1, #0]
 8011c8a:	4614      	mov	r4, r2
 8011c8c:	e015      	b.n	8011cba <__cxa_begin_catch+0x50>
 8011c8e:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8011c92:	4628      	mov	r0, r5
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	bfb4      	ite	lt
 8011c98:	f1c3 0301 	rsblt	r3, r3, #1
 8011c9c:	3301      	addge	r3, #1
 8011c9e:	f845 3c0c 	str.w	r3, [r5, #-12]
 8011ca2:	684b      	ldr	r3, [r1, #4]
 8011ca4:	42a2      	cmp	r2, r4
 8011ca6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011caa:	604b      	str	r3, [r1, #4]
 8011cac:	bf1c      	itt	ne
 8011cae:	f845 2c10 	strne.w	r2, [r5, #-16]
 8011cb2:	600c      	strne	r4, [r1, #0]
 8011cb4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8011cb6:	f7f4 f977 	bl	8005fa8 <_Unwind_Complete>
 8011cba:	4620      	mov	r0, r4
 8011cbc:	bd38      	pop	{r3, r4, r5, pc}

08011cbe <__cxa_end_catch>:
 8011cbe:	b510      	push	{r4, lr}
 8011cc0:	f000 f82a 	bl	8011d18 <__cxa_get_globals_fast>
 8011cc4:	6802      	ldr	r2, [r0, #0]
 8011cc6:	4601      	mov	r1, r0
 8011cc8:	b1ea      	cbz	r2, 8011d06 <__cxa_end_catch+0x48>
 8011cca:	f102 0420 	add.w	r4, r2, #32
 8011cce:	4620      	mov	r0, r4
 8011cd0:	f7ff ffac 	bl	8011c2c <__cxxabiv1::__is_gxx_exception_class(char*)>
 8011cd4:	b908      	cbnz	r0, 8011cda <__cxa_end_catch+0x1c>
 8011cd6:	6008      	str	r0, [r1, #0]
 8011cd8:	e00b      	b.n	8011cf2 <__cxa_end_catch+0x34>
 8011cda:	6953      	ldr	r3, [r2, #20]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	da04      	bge.n	8011cea <__cxa_end_catch+0x2c>
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	d10f      	bne.n	8011d04 <__cxa_end_catch+0x46>
 8011ce4:	6910      	ldr	r0, [r2, #16]
 8011ce6:	6008      	str	r0, [r1, #0]
 8011ce8:	e00c      	b.n	8011d04 <__cxa_end_catch+0x46>
 8011cea:	3b01      	subs	r3, #1
 8011cec:	d106      	bne.n	8011cfc <__cxa_end_catch+0x3e>
 8011cee:	6913      	ldr	r3, [r2, #16]
 8011cf0:	600b      	str	r3, [r1, #0]
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cf8:	f7f4 b958 	b.w	8005fac <_Unwind_DeleteException>
 8011cfc:	1c59      	adds	r1, r3, #1
 8011cfe:	d101      	bne.n	8011d04 <__cxa_end_catch+0x46>
 8011d00:	f7ff fdb8 	bl	8011874 <std::terminate()>
 8011d04:	6153      	str	r3, [r2, #20]
 8011d06:	bd10      	pop	{r4, pc}

08011d08 <std::uncaught_exception()>:
 8011d08:	b508      	push	{r3, lr}
 8011d0a:	f000 f809 	bl	8011d20 <__cxa_get_globals>
 8011d0e:	6840      	ldr	r0, [r0, #4]
 8011d10:	3000      	adds	r0, #0
 8011d12:	bf18      	it	ne
 8011d14:	2001      	movne	r0, #1
 8011d16:	bd08      	pop	{r3, pc}

08011d18 <__cxa_get_globals_fast>:
 8011d18:	4800      	ldr	r0, [pc, #0]	; (8011d1c <__cxa_get_globals_fast+0x4>)
 8011d1a:	4770      	bx	lr
 8011d1c:	200010d0 	.word	0x200010d0

08011d20 <__cxa_get_globals>:
 8011d20:	4800      	ldr	r0, [pc, #0]	; (8011d24 <__cxa_get_globals+0x4>)
 8011d22:	4770      	bx	lr
 8011d24:	200010d0 	.word	0x200010d0

08011d28 <std::exception::~exception()>:
 8011d28:	4770      	bx	lr

08011d2a <std::bad_exception::~bad_exception()>:
 8011d2a:	4770      	bx	lr

08011d2c <std::exception::what() const>:
 8011d2c:	4800      	ldr	r0, [pc, #0]	; (8011d30 <std::exception::what() const+0x4>)
 8011d2e:	4770      	bx	lr
 8011d30:	080156d4 	.word	0x080156d4

08011d34 <std::bad_exception::what() const>:
 8011d34:	4800      	ldr	r0, [pc, #0]	; (8011d38 <std::bad_exception::what() const+0x4>)
 8011d36:	4770      	bx	lr
 8011d38:	080156e3 	.word	0x080156e3

08011d3c <std::exception::~exception()>:
 8011d3c:	b510      	push	{r4, lr}
 8011d3e:	4604      	mov	r4, r0
 8011d40:	f7ff fa4c 	bl	80111dc <operator delete(void*)>
 8011d44:	4620      	mov	r0, r4
 8011d46:	bd10      	pop	{r4, pc}

08011d48 <std::bad_exception::~bad_exception()>:
 8011d48:	b510      	push	{r4, lr}
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	f7ff fa46 	bl	80111dc <operator delete(void*)>
 8011d50:	4620      	mov	r0, r4
 8011d52:	bd10      	pop	{r4, pc}

08011d54 <__cxxabiv1::__forced_unwind::~__forced_unwind()>:
 8011d54:	4770      	bx	lr

08011d56 <__cxxabiv1::__forced_unwind::~__forced_unwind()>:
 8011d56:	b510      	push	{r4, lr}
 8011d58:	4604      	mov	r4, r0
 8011d5a:	f7ff fa3f 	bl	80111dc <operator delete(void*)>
 8011d5e:	4620      	mov	r0, r4
 8011d60:	bd10      	pop	{r4, pc}

08011d62 <__cxxabiv1::__foreign_exception::~__foreign_exception()>:
 8011d62:	4770      	bx	lr

08011d64 <__cxxabiv1::__foreign_exception::~__foreign_exception()>:
 8011d64:	b510      	push	{r4, lr}
 8011d66:	4604      	mov	r4, r0
 8011d68:	f7ff fa38 	bl	80111dc <operator delete(void*)>
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	bd10      	pop	{r4, pc}

08011d70 <__gnu_cxx::__verbose_terminate_handler()>:
 8011d70:	4b20      	ldr	r3, [pc, #128]	; (8011df4 <__gnu_cxx::__verbose_terminate_handler()+0x84>)
 8011d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011d74:	781a      	ldrb	r2, [r3, #0]
 8011d76:	4d20      	ldr	r5, [pc, #128]	; (8011df8 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
 8011d78:	b11a      	cbz	r2, 8011d82 <__gnu_cxx::__verbose_terminate_handler()+0x12>
 8011d7a:	682b      	ldr	r3, [r5, #0]
 8011d7c:	481f      	ldr	r0, [pc, #124]	; (8011dfc <__gnu_cxx::__verbose_terminate_handler()+0x8c>)
 8011d7e:	68d9      	ldr	r1, [r3, #12]
 8011d80:	e033      	b.n	8011dea <__gnu_cxx::__verbose_terminate_handler()+0x7a>
 8011d82:	2201      	movs	r2, #1
 8011d84:	701a      	strb	r2, [r3, #0]
 8011d86:	f000 f841 	bl	8011e0c <__cxa_current_exception_type>
 8011d8a:	b358      	cbz	r0, 8011de4 <__gnu_cxx::__verbose_terminate_handler()+0x74>
 8011d8c:	6844      	ldr	r4, [r0, #4]
 8011d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d92:	7823      	ldrb	r3, [r4, #0]
 8011d94:	4f18      	ldr	r7, [pc, #96]	; (8011df8 <__gnu_cxx::__verbose_terminate_handler()+0x88>)
 8011d96:	2b2a      	cmp	r3, #42	; 0x2a
 8011d98:	ab02      	add	r3, sp, #8
 8011d9a:	bf08      	it	eq
 8011d9c:	3401      	addeq	r4, #1
 8011d9e:	f843 2d04 	str.w	r2, [r3, #-4]!
 8011da2:	2200      	movs	r2, #0
 8011da4:	4611      	mov	r1, r2
 8011da6:	4620      	mov	r0, r4
 8011da8:	f7fc ff98 	bl	800ecdc <__cxa_demangle>
 8011dac:	682b      	ldr	r3, [r5, #0]
 8011dae:	4606      	mov	r6, r0
 8011db0:	68d9      	ldr	r1, [r3, #12]
 8011db2:	4813      	ldr	r0, [pc, #76]	; (8011e00 <__gnu_cxx::__verbose_terminate_handler()+0x90>)
 8011db4:	f001 fdca 	bl	801394c <fputs>
 8011db8:	9b01      	ldr	r3, [sp, #4]
 8011dba:	b91b      	cbnz	r3, 8011dc4 <__gnu_cxx::__verbose_terminate_handler()+0x54>
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	68d9      	ldr	r1, [r3, #12]
 8011dc2:	e002      	b.n	8011dca <__gnu_cxx::__verbose_terminate_handler()+0x5a>
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	68d9      	ldr	r1, [r3, #12]
 8011dca:	f001 fdbf 	bl	801394c <fputs>
 8011dce:	682b      	ldr	r3, [r5, #0]
 8011dd0:	480c      	ldr	r0, [pc, #48]	; (8011e04 <__gnu_cxx::__verbose_terminate_handler()+0x94>)
 8011dd2:	68d9      	ldr	r1, [r3, #12]
 8011dd4:	f001 fdba 	bl	801394c <fputs>
 8011dd8:	9b01      	ldr	r3, [sp, #4]
 8011dda:	b943      	cbnz	r3, 8011dee <__gnu_cxx::__verbose_terminate_handler()+0x7e>
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f001 fdff 	bl	80139e0 <free>
 8011de2:	e004      	b.n	8011dee <__gnu_cxx::__verbose_terminate_handler()+0x7e>
 8011de4:	682b      	ldr	r3, [r5, #0]
 8011de6:	4808      	ldr	r0, [pc, #32]	; (8011e08 <__gnu_cxx::__verbose_terminate_handler()+0x98>)
 8011de8:	68d9      	ldr	r1, [r3, #12]
 8011dea:	f001 fdaf 	bl	801394c <fputs>
 8011dee:	f7fe fccb 	bl	8010788 <abort>
 8011df2:	bf00      	nop
 8011df4:	200010dc 	.word	0x200010dc
 8011df8:	2000019c 	.word	0x2000019c
 8011dfc:	0801575c 	.word	0x0801575c
 8011e00:	0801577a 	.word	0x0801577a
 8011e04:	080157ab 	.word	0x080157ab
 8011e08:	080157ae 	.word	0x080157ae

08011e0c <__cxa_current_exception_type>:
 8011e0c:	b508      	push	{r3, lr}
 8011e0e:	f7ff ff87 	bl	8011d20 <__cxa_get_globals>
 8011e12:	6800      	ldr	r0, [r0, #0]
 8011e14:	b130      	cbz	r0, 8011e24 <__cxa_current_exception_type+0x18>
 8011e16:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8011e1a:	2b01      	cmp	r3, #1
 8011e1c:	bf04      	itt	eq
 8011e1e:	6800      	ldreq	r0, [r0, #0]
 8011e20:	3878      	subeq	r0, #120	; 0x78
 8011e22:	6800      	ldr	r0, [r0, #0]
 8011e24:	bd08      	pop	{r3, pc}
	...

08011e28 <atan>:
 8011e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e2c:	4bc0      	ldr	r3, [pc, #768]	; (8012130 <atan+0x308>)
 8011e2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011e32:	429e      	cmp	r6, r3
 8011e34:	460d      	mov	r5, r1
 8011e36:	468a      	mov	sl, r1
 8011e38:	4604      	mov	r4, r0
 8011e3a:	dd0f      	ble.n	8011e5c <atan+0x34>
 8011e3c:	4bbd      	ldr	r3, [pc, #756]	; (8012134 <atan+0x30c>)
 8011e3e:	429e      	cmp	r6, r3
 8011e40:	f300 80b2 	bgt.w	8011fa8 <atan+0x180>
 8011e44:	f000 80ad 	beq.w	8011fa2 <atan+0x17a>
 8011e48:	4bbb      	ldr	r3, [pc, #748]	; (8012138 <atan+0x310>)
 8011e4a:	49bc      	ldr	r1, [pc, #752]	; (801213c <atan+0x314>)
 8011e4c:	4cbc      	ldr	r4, [pc, #752]	; (8012140 <atan+0x318>)
 8011e4e:	f1ba 0f00 	cmp.w	sl, #0
 8011e52:	bfc8      	it	gt
 8011e54:	4619      	movgt	r1, r3
 8011e56:	4620      	mov	r0, r4
 8011e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e5c:	4bb9      	ldr	r3, [pc, #740]	; (8012144 <atan+0x31c>)
 8011e5e:	429e      	cmp	r6, r3
 8011e60:	f300 80bc 	bgt.w	8011fdc <atan+0x1b4>
 8011e64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011e68:	429e      	cmp	r6, r3
 8011e6a:	f340 80a7 	ble.w	8011fbc <atan+0x194>
 8011e6e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011e72:	4622      	mov	r2, r4
 8011e74:	462b      	mov	r3, r5
 8011e76:	4620      	mov	r0, r4
 8011e78:	4629      	mov	r1, r5
 8011e7a:	f7f3 f949 	bl	8005110 <__aeabi_dmul>
 8011e7e:	4602      	mov	r2, r0
 8011e80:	460b      	mov	r3, r1
 8011e82:	4680      	mov	r8, r0
 8011e84:	4689      	mov	r9, r1
 8011e86:	f7f3 f943 	bl	8005110 <__aeabi_dmul>
 8011e8a:	a391      	add	r3, pc, #580	; (adr r3, 80120d0 <atan+0x2a8>)
 8011e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e90:	4606      	mov	r6, r0
 8011e92:	460f      	mov	r7, r1
 8011e94:	f7f3 f93c 	bl	8005110 <__aeabi_dmul>
 8011e98:	a38f      	add	r3, pc, #572	; (adr r3, 80120d8 <atan+0x2b0>)
 8011e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9e:	f7f2 ff85 	bl	8004dac <__adddf3>
 8011ea2:	4632      	mov	r2, r6
 8011ea4:	463b      	mov	r3, r7
 8011ea6:	f7f3 f933 	bl	8005110 <__aeabi_dmul>
 8011eaa:	a38d      	add	r3, pc, #564	; (adr r3, 80120e0 <atan+0x2b8>)
 8011eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb0:	f7f2 ff7c 	bl	8004dac <__adddf3>
 8011eb4:	4632      	mov	r2, r6
 8011eb6:	463b      	mov	r3, r7
 8011eb8:	f7f3 f92a 	bl	8005110 <__aeabi_dmul>
 8011ebc:	a38a      	add	r3, pc, #552	; (adr r3, 80120e8 <atan+0x2c0>)
 8011ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec2:	f7f2 ff73 	bl	8004dac <__adddf3>
 8011ec6:	4632      	mov	r2, r6
 8011ec8:	463b      	mov	r3, r7
 8011eca:	f7f3 f921 	bl	8005110 <__aeabi_dmul>
 8011ece:	a388      	add	r3, pc, #544	; (adr r3, 80120f0 <atan+0x2c8>)
 8011ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed4:	f7f2 ff6a 	bl	8004dac <__adddf3>
 8011ed8:	4632      	mov	r2, r6
 8011eda:	463b      	mov	r3, r7
 8011edc:	f7f3 f918 	bl	8005110 <__aeabi_dmul>
 8011ee0:	a385      	add	r3, pc, #532	; (adr r3, 80120f8 <atan+0x2d0>)
 8011ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee6:	f7f2 ff61 	bl	8004dac <__adddf3>
 8011eea:	4642      	mov	r2, r8
 8011eec:	464b      	mov	r3, r9
 8011eee:	f7f3 f90f 	bl	8005110 <__aeabi_dmul>
 8011ef2:	a383      	add	r3, pc, #524	; (adr r3, 8012100 <atan+0x2d8>)
 8011ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef8:	4680      	mov	r8, r0
 8011efa:	4689      	mov	r9, r1
 8011efc:	4630      	mov	r0, r6
 8011efe:	4639      	mov	r1, r7
 8011f00:	f7f3 f906 	bl	8005110 <__aeabi_dmul>
 8011f04:	a380      	add	r3, pc, #512	; (adr r3, 8012108 <atan+0x2e0>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	f7f2 ff4d 	bl	8004da8 <__aeabi_dsub>
 8011f0e:	4632      	mov	r2, r6
 8011f10:	463b      	mov	r3, r7
 8011f12:	f7f3 f8fd 	bl	8005110 <__aeabi_dmul>
 8011f16:	a37e      	add	r3, pc, #504	; (adr r3, 8012110 <atan+0x2e8>)
 8011f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1c:	f7f2 ff44 	bl	8004da8 <__aeabi_dsub>
 8011f20:	4632      	mov	r2, r6
 8011f22:	463b      	mov	r3, r7
 8011f24:	f7f3 f8f4 	bl	8005110 <__aeabi_dmul>
 8011f28:	a37b      	add	r3, pc, #492	; (adr r3, 8012118 <atan+0x2f0>)
 8011f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2e:	f7f2 ff3b 	bl	8004da8 <__aeabi_dsub>
 8011f32:	4632      	mov	r2, r6
 8011f34:	463b      	mov	r3, r7
 8011f36:	f7f3 f8eb 	bl	8005110 <__aeabi_dmul>
 8011f3a:	a379      	add	r3, pc, #484	; (adr r3, 8012120 <atan+0x2f8>)
 8011f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f40:	f7f2 ff32 	bl	8004da8 <__aeabi_dsub>
 8011f44:	4632      	mov	r2, r6
 8011f46:	463b      	mov	r3, r7
 8011f48:	f7f3 f8e2 	bl	8005110 <__aeabi_dmul>
 8011f4c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8011f50:	4602      	mov	r2, r0
 8011f52:	460b      	mov	r3, r1
 8011f54:	d069      	beq.n	801202a <atan+0x202>
 8011f56:	4640      	mov	r0, r8
 8011f58:	4649      	mov	r1, r9
 8011f5a:	f7f2 ff27 	bl	8004dac <__adddf3>
 8011f5e:	4622      	mov	r2, r4
 8011f60:	462b      	mov	r3, r5
 8011f62:	f7f3 f8d5 	bl	8005110 <__aeabi_dmul>
 8011f66:	4e78      	ldr	r6, [pc, #480]	; (8012148 <atan+0x320>)
 8011f68:	4b78      	ldr	r3, [pc, #480]	; (801214c <atan+0x324>)
 8011f6a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011f6e:	445e      	add	r6, fp
 8011f70:	449b      	add	fp, r3
 8011f72:	e9db 2300 	ldrd	r2, r3, [fp]
 8011f76:	f7f2 ff17 	bl	8004da8 <__aeabi_dsub>
 8011f7a:	4622      	mov	r2, r4
 8011f7c:	462b      	mov	r3, r5
 8011f7e:	f7f2 ff13 	bl	8004da8 <__aeabi_dsub>
 8011f82:	4602      	mov	r2, r0
 8011f84:	460b      	mov	r3, r1
 8011f86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011f8a:	f7f2 ff0d 	bl	8004da8 <__aeabi_dsub>
 8011f8e:	f1ba 0f00 	cmp.w	sl, #0
 8011f92:	4604      	mov	r4, r0
 8011f94:	f6bf af5f 	bge.w	8011e56 <atan+0x2e>
 8011f98:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	f43f af50 	beq.w	8011e48 <atan+0x20>
 8011fa8:	4622      	mov	r2, r4
 8011faa:	4620      	mov	r0, r4
 8011fac:	462b      	mov	r3, r5
 8011fae:	4629      	mov	r1, r5
 8011fb0:	f7f2 fefc 	bl	8004dac <__adddf3>
 8011fb4:	4604      	mov	r4, r0
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fbc:	a35a      	add	r3, pc, #360	; (adr r3, 8012128 <atan+0x300>)
 8011fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc2:	f7f2 fef3 	bl	8004dac <__adddf3>
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	4b61      	ldr	r3, [pc, #388]	; (8012150 <atan+0x328>)
 8011fca:	f7fc ff7f 	bl	800eecc <__aeabi_dcmpgt>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	f43f af4d 	beq.w	8011e6e <atan+0x46>
 8011fd4:	4629      	mov	r1, r5
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fdc:	f000 f90a 	bl	80121f4 <fabs>
 8011fe0:	4b5c      	ldr	r3, [pc, #368]	; (8012154 <atan+0x32c>)
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	429e      	cmp	r6, r3
 8011fe6:	460d      	mov	r5, r1
 8011fe8:	dc2f      	bgt.n	801204a <atan+0x222>
 8011fea:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011fee:	429e      	cmp	r6, r3
 8011ff0:	dc54      	bgt.n	801209c <atan+0x274>
 8011ff2:	4602      	mov	r2, r0
 8011ff4:	460b      	mov	r3, r1
 8011ff6:	f7f2 fed9 	bl	8004dac <__adddf3>
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4b54      	ldr	r3, [pc, #336]	; (8012150 <atan+0x328>)
 8011ffe:	f7f2 fed3 	bl	8004da8 <__aeabi_dsub>
 8012002:	2200      	movs	r2, #0
 8012004:	4606      	mov	r6, r0
 8012006:	460f      	mov	r7, r1
 8012008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801200c:	4620      	mov	r0, r4
 801200e:	4629      	mov	r1, r5
 8012010:	f7f2 fecc 	bl	8004dac <__adddf3>
 8012014:	4602      	mov	r2, r0
 8012016:	460b      	mov	r3, r1
 8012018:	4630      	mov	r0, r6
 801201a:	4639      	mov	r1, r7
 801201c:	f7f3 f9a2 	bl	8005364 <__aeabi_ddiv>
 8012020:	f04f 0b00 	mov.w	fp, #0
 8012024:	4604      	mov	r4, r0
 8012026:	460d      	mov	r5, r1
 8012028:	e723      	b.n	8011e72 <atan+0x4a>
 801202a:	4640      	mov	r0, r8
 801202c:	4649      	mov	r1, r9
 801202e:	f7f2 febd 	bl	8004dac <__adddf3>
 8012032:	4622      	mov	r2, r4
 8012034:	462b      	mov	r3, r5
 8012036:	f7f3 f86b 	bl	8005110 <__aeabi_dmul>
 801203a:	4602      	mov	r2, r0
 801203c:	460b      	mov	r3, r1
 801203e:	4620      	mov	r0, r4
 8012040:	4629      	mov	r1, r5
 8012042:	f7f2 feb1 	bl	8004da8 <__aeabi_dsub>
 8012046:	4604      	mov	r4, r0
 8012048:	e705      	b.n	8011e56 <atan+0x2e>
 801204a:	4b43      	ldr	r3, [pc, #268]	; (8012158 <atan+0x330>)
 801204c:	429e      	cmp	r6, r3
 801204e:	dc1a      	bgt.n	8012086 <atan+0x25e>
 8012050:	2200      	movs	r2, #0
 8012052:	4b42      	ldr	r3, [pc, #264]	; (801215c <atan+0x334>)
 8012054:	f7f2 fea8 	bl	8004da8 <__aeabi_dsub>
 8012058:	2200      	movs	r2, #0
 801205a:	4606      	mov	r6, r0
 801205c:	460f      	mov	r7, r1
 801205e:	4b3f      	ldr	r3, [pc, #252]	; (801215c <atan+0x334>)
 8012060:	4620      	mov	r0, r4
 8012062:	4629      	mov	r1, r5
 8012064:	f7f3 f854 	bl	8005110 <__aeabi_dmul>
 8012068:	2200      	movs	r2, #0
 801206a:	4b39      	ldr	r3, [pc, #228]	; (8012150 <atan+0x328>)
 801206c:	f7f2 fe9e 	bl	8004dac <__adddf3>
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4630      	mov	r0, r6
 8012076:	4639      	mov	r1, r7
 8012078:	f7f3 f974 	bl	8005364 <__aeabi_ddiv>
 801207c:	f04f 0b02 	mov.w	fp, #2
 8012080:	4604      	mov	r4, r0
 8012082:	460d      	mov	r5, r1
 8012084:	e6f5      	b.n	8011e72 <atan+0x4a>
 8012086:	4602      	mov	r2, r0
 8012088:	460b      	mov	r3, r1
 801208a:	2000      	movs	r0, #0
 801208c:	4934      	ldr	r1, [pc, #208]	; (8012160 <atan+0x338>)
 801208e:	f7f3 f969 	bl	8005364 <__aeabi_ddiv>
 8012092:	f04f 0b03 	mov.w	fp, #3
 8012096:	4604      	mov	r4, r0
 8012098:	460d      	mov	r5, r1
 801209a:	e6ea      	b.n	8011e72 <atan+0x4a>
 801209c:	2200      	movs	r2, #0
 801209e:	4b2c      	ldr	r3, [pc, #176]	; (8012150 <atan+0x328>)
 80120a0:	f7f2 fe82 	bl	8004da8 <__aeabi_dsub>
 80120a4:	2200      	movs	r2, #0
 80120a6:	4606      	mov	r6, r0
 80120a8:	460f      	mov	r7, r1
 80120aa:	4b29      	ldr	r3, [pc, #164]	; (8012150 <atan+0x328>)
 80120ac:	4620      	mov	r0, r4
 80120ae:	4629      	mov	r1, r5
 80120b0:	f7f2 fe7c 	bl	8004dac <__adddf3>
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	4630      	mov	r0, r6
 80120ba:	4639      	mov	r1, r7
 80120bc:	f7f3 f952 	bl	8005364 <__aeabi_ddiv>
 80120c0:	f04f 0b01 	mov.w	fp, #1
 80120c4:	4604      	mov	r4, r0
 80120c6:	460d      	mov	r5, r1
 80120c8:	e6d3      	b.n	8011e72 <atan+0x4a>
 80120ca:	bf00      	nop
 80120cc:	f3af 8000 	nop.w
 80120d0:	e322da11 	.word	0xe322da11
 80120d4:	3f90ad3a 	.word	0x3f90ad3a
 80120d8:	24760deb 	.word	0x24760deb
 80120dc:	3fa97b4b 	.word	0x3fa97b4b
 80120e0:	a0d03d51 	.word	0xa0d03d51
 80120e4:	3fb10d66 	.word	0x3fb10d66
 80120e8:	c54c206e 	.word	0xc54c206e
 80120ec:	3fb745cd 	.word	0x3fb745cd
 80120f0:	920083ff 	.word	0x920083ff
 80120f4:	3fc24924 	.word	0x3fc24924
 80120f8:	5555550d 	.word	0x5555550d
 80120fc:	3fd55555 	.word	0x3fd55555
 8012100:	2c6a6c2f 	.word	0x2c6a6c2f
 8012104:	bfa2b444 	.word	0xbfa2b444
 8012108:	52defd9a 	.word	0x52defd9a
 801210c:	3fadde2d 	.word	0x3fadde2d
 8012110:	af749a6d 	.word	0xaf749a6d
 8012114:	3fb3b0f2 	.word	0x3fb3b0f2
 8012118:	fe231671 	.word	0xfe231671
 801211c:	3fbc71c6 	.word	0x3fbc71c6
 8012120:	9998ebc4 	.word	0x9998ebc4
 8012124:	3fc99999 	.word	0x3fc99999
 8012128:	8800759c 	.word	0x8800759c
 801212c:	7e37e43c 	.word	0x7e37e43c
 8012130:	440fffff 	.word	0x440fffff
 8012134:	7ff00000 	.word	0x7ff00000
 8012138:	3ff921fb 	.word	0x3ff921fb
 801213c:	bff921fb 	.word	0xbff921fb
 8012140:	54442d18 	.word	0x54442d18
 8012144:	3fdbffff 	.word	0x3fdbffff
 8012148:	08015ff0 	.word	0x08015ff0
 801214c:	08015fd0 	.word	0x08015fd0
 8012150:	3ff00000 	.word	0x3ff00000
 8012154:	3ff2ffff 	.word	0x3ff2ffff
 8012158:	40037fff 	.word	0x40037fff
 801215c:	3ff80000 	.word	0x3ff80000
 8012160:	bff00000 	.word	0xbff00000

08012164 <cos>:
 8012164:	b530      	push	{r4, r5, lr}
 8012166:	4a21      	ldr	r2, [pc, #132]	; (80121ec <cos+0x88>)
 8012168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801216c:	4293      	cmp	r3, r2
 801216e:	b087      	sub	sp, #28
 8012170:	dd1b      	ble.n	80121aa <cos+0x46>
 8012172:	4a1f      	ldr	r2, [pc, #124]	; (80121f0 <cos+0x8c>)
 8012174:	4293      	cmp	r3, r2
 8012176:	dd05      	ble.n	8012184 <cos+0x20>
 8012178:	4602      	mov	r2, r0
 801217a:	460b      	mov	r3, r1
 801217c:	f7f2 fe14 	bl	8004da8 <__aeabi_dsub>
 8012180:	b007      	add	sp, #28
 8012182:	bd30      	pop	{r4, r5, pc}
 8012184:	aa02      	add	r2, sp, #8
 8012186:	f000 f8d7 	bl	8012338 <__ieee754_rem_pio2>
 801218a:	f000 0003 	and.w	r0, r0, #3
 801218e:	2801      	cmp	r0, #1
 8012190:	d01a      	beq.n	80121c8 <cos+0x64>
 8012192:	2802      	cmp	r0, #2
 8012194:	d00f      	beq.n	80121b6 <cos+0x52>
 8012196:	b308      	cbz	r0, 80121dc <cos+0x78>
 8012198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801219c:	2301      	movs	r3, #1
 801219e:	9300      	str	r3, [sp, #0]
 80121a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121a4:	f001 f8c4 	bl	8013330 <__kernel_sin>
 80121a8:	e7ea      	b.n	8012180 <cos+0x1c>
 80121aa:	2200      	movs	r2, #0
 80121ac:	2300      	movs	r3, #0
 80121ae:	f000 fb9f 	bl	80128f0 <__kernel_cos>
 80121b2:	b007      	add	sp, #28
 80121b4:	bd30      	pop	{r4, r5, pc}
 80121b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121be:	f000 fb97 	bl	80128f0 <__kernel_cos>
 80121c2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80121c6:	e7db      	b.n	8012180 <cos+0x1c>
 80121c8:	9000      	str	r0, [sp, #0]
 80121ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121d2:	f001 f8ad 	bl	8013330 <__kernel_sin>
 80121d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80121da:	e7d1      	b.n	8012180 <cos+0x1c>
 80121dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121e4:	f000 fb84 	bl	80128f0 <__kernel_cos>
 80121e8:	e7ca      	b.n	8012180 <cos+0x1c>
 80121ea:	bf00      	nop
 80121ec:	3fe921fb 	.word	0x3fe921fb
 80121f0:	7fefffff 	.word	0x7fefffff

080121f4 <fabs>:
 80121f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop

080121fc <sin>:
 80121fc:	b530      	push	{r4, r5, lr}
 80121fe:	4a21      	ldr	r2, [pc, #132]	; (8012284 <sin+0x88>)
 8012200:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012204:	4293      	cmp	r3, r2
 8012206:	b087      	sub	sp, #28
 8012208:	dd1b      	ble.n	8012242 <sin+0x46>
 801220a:	4a1f      	ldr	r2, [pc, #124]	; (8012288 <sin+0x8c>)
 801220c:	4293      	cmp	r3, r2
 801220e:	dd05      	ble.n	801221c <sin+0x20>
 8012210:	4602      	mov	r2, r0
 8012212:	460b      	mov	r3, r1
 8012214:	f7f2 fdc8 	bl	8004da8 <__aeabi_dsub>
 8012218:	b007      	add	sp, #28
 801221a:	bd30      	pop	{r4, r5, pc}
 801221c:	aa02      	add	r2, sp, #8
 801221e:	f000 f88b 	bl	8012338 <__ieee754_rem_pio2>
 8012222:	f000 0003 	and.w	r0, r0, #3
 8012226:	2801      	cmp	r0, #1
 8012228:	d01e      	beq.n	8012268 <sin+0x6c>
 801222a:	2802      	cmp	r0, #2
 801222c:	d011      	beq.n	8012252 <sin+0x56>
 801222e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012232:	b300      	cbz	r0, 8012276 <sin+0x7a>
 8012234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012238:	f000 fb5a 	bl	80128f0 <__kernel_cos>
 801223c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8012240:	e7ea      	b.n	8012218 <sin+0x1c>
 8012242:	2300      	movs	r3, #0
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	2200      	movs	r2, #0
 8012248:	2300      	movs	r3, #0
 801224a:	f001 f871 	bl	8013330 <__kernel_sin>
 801224e:	b007      	add	sp, #28
 8012250:	bd30      	pop	{r4, r5, pc}
 8012252:	2301      	movs	r3, #1
 8012254:	9300      	str	r3, [sp, #0]
 8012256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801225a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801225e:	f001 f867 	bl	8013330 <__kernel_sin>
 8012262:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8012266:	e7d7      	b.n	8012218 <sin+0x1c>
 8012268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801226c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012270:	f000 fb3e 	bl	80128f0 <__kernel_cos>
 8012274:	e7d0      	b.n	8012218 <sin+0x1c>
 8012276:	2401      	movs	r4, #1
 8012278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801227c:	9400      	str	r4, [sp, #0]
 801227e:	f001 f857 	bl	8013330 <__kernel_sin>
 8012282:	e7c9      	b.n	8012218 <sin+0x1c>
 8012284:	3fe921fb 	.word	0x3fe921fb
 8012288:	7fefffff 	.word	0x7fefffff

0801228c <sqrt>:
 801228c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012290:	b08a      	sub	sp, #40	; 0x28
 8012292:	4606      	mov	r6, r0
 8012294:	460f      	mov	r7, r1
 8012296:	f000 fa65 	bl	8012764 <__ieee754_sqrt>
 801229a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8012334 <sqrt+0xa8>
 801229e:	4604      	mov	r4, r0
 80122a0:	f99a 3000 	ldrsb.w	r3, [sl]
 80122a4:	460d      	mov	r5, r1
 80122a6:	3301      	adds	r3, #1
 80122a8:	d00f      	beq.n	80122ca <sqrt+0x3e>
 80122aa:	4630      	mov	r0, r6
 80122ac:	4639      	mov	r1, r7
 80122ae:	f001 f97f 	bl	80135b0 <__fpclassifyd>
 80122b2:	b150      	cbz	r0, 80122ca <sqrt+0x3e>
 80122b4:	f04f 0800 	mov.w	r8, #0
 80122b8:	f04f 0900 	mov.w	r9, #0
 80122bc:	4630      	mov	r0, r6
 80122be:	4639      	mov	r1, r7
 80122c0:	4642      	mov	r2, r8
 80122c2:	464b      	mov	r3, r9
 80122c4:	f7fc fde4 	bl	800ee90 <__aeabi_dcmplt>
 80122c8:	b920      	cbnz	r0, 80122d4 <sqrt+0x48>
 80122ca:	4620      	mov	r0, r4
 80122cc:	4629      	mov	r1, r5
 80122ce:	b00a      	add	sp, #40	; 0x28
 80122d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122d4:	4916      	ldr	r1, [pc, #88]	; (8012330 <sqrt+0xa4>)
 80122d6:	f89a 4000 	ldrb.w	r4, [sl]
 80122da:	2201      	movs	r2, #1
 80122dc:	2300      	movs	r3, #0
 80122de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80122e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80122e6:	9101      	str	r1, [sp, #4]
 80122e8:	9200      	str	r2, [sp, #0]
 80122ea:	9308      	str	r3, [sp, #32]
 80122ec:	b964      	cbnz	r4, 8012308 <sqrt+0x7c>
 80122ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80122f2:	4668      	mov	r0, sp
 80122f4:	f001 f986 	bl	8013604 <matherr>
 80122f8:	b180      	cbz	r0, 801231c <sqrt+0x90>
 80122fa:	9b08      	ldr	r3, [sp, #32]
 80122fc:	b99b      	cbnz	r3, 8012326 <sqrt+0x9a>
 80122fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012302:	b00a      	add	sp, #40	; 0x28
 8012304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012308:	4642      	mov	r2, r8
 801230a:	464b      	mov	r3, r9
 801230c:	4640      	mov	r0, r8
 801230e:	4649      	mov	r1, r9
 8012310:	f7f3 f828 	bl	8005364 <__aeabi_ddiv>
 8012314:	2c02      	cmp	r4, #2
 8012316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801231a:	d1ea      	bne.n	80122f2 <sqrt+0x66>
 801231c:	f001 f9ee 	bl	80136fc <__errno>
 8012320:	2321      	movs	r3, #33	; 0x21
 8012322:	6003      	str	r3, [r0, #0]
 8012324:	e7e9      	b.n	80122fa <sqrt+0x6e>
 8012326:	f001 f9e9 	bl	80136fc <__errno>
 801232a:	9b08      	ldr	r3, [sp, #32]
 801232c:	6003      	str	r3, [r0, #0]
 801232e:	e7e6      	b.n	80122fe <sqrt+0x72>
 8012330:	08016010 	.word	0x08016010
 8012334:	200001ac 	.word	0x200001ac

08012338 <__ieee754_rem_pio2>:
 8012338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801233c:	4c94      	ldr	r4, [pc, #592]	; (8012590 <__ieee754_rem_pio2+0x258>)
 801233e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8012342:	42a7      	cmp	r7, r4
 8012344:	b08f      	sub	sp, #60	; 0x3c
 8012346:	f340 8081 	ble.w	801244c <__ieee754_rem_pio2+0x114>
 801234a:	4614      	mov	r4, r2
 801234c:	4a91      	ldr	r2, [pc, #580]	; (8012594 <__ieee754_rem_pio2+0x25c>)
 801234e:	460e      	mov	r6, r1
 8012350:	4297      	cmp	r7, r2
 8012352:	dc26      	bgt.n	80123a2 <__ieee754_rem_pio2+0x6a>
 8012354:	a384      	add	r3, pc, #528	; (adr r3, 8012568 <__ieee754_rem_pio2+0x230>)
 8012356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235a:	2900      	cmp	r1, #0
 801235c:	f340 81a0 	ble.w	80126a0 <__ieee754_rem_pio2+0x368>
 8012360:	f7f2 fd22 	bl	8004da8 <__aeabi_dsub>
 8012364:	4b8c      	ldr	r3, [pc, #560]	; (8012598 <__ieee754_rem_pio2+0x260>)
 8012366:	4680      	mov	r8, r0
 8012368:	429f      	cmp	r7, r3
 801236a:	4689      	mov	r9, r1
 801236c:	f000 8083 	beq.w	8012476 <__ieee754_rem_pio2+0x13e>
 8012370:	a37f      	add	r3, pc, #508	; (adr r3, 8012570 <__ieee754_rem_pio2+0x238>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	f7f2 fd17 	bl	8004da8 <__aeabi_dsub>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	4640      	mov	r0, r8
 8012380:	e9c4 2300 	strd	r2, r3, [r4]
 8012384:	4649      	mov	r1, r9
 8012386:	f7f2 fd0f 	bl	8004da8 <__aeabi_dsub>
 801238a:	a379      	add	r3, pc, #484	; (adr r3, 8012570 <__ieee754_rem_pio2+0x238>)
 801238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012390:	f7f2 fd0a 	bl	8004da8 <__aeabi_dsub>
 8012394:	2501      	movs	r5, #1
 8012396:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801239a:	4628      	mov	r0, r5
 801239c:	b00f      	add	sp, #60	; 0x3c
 801239e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a2:	4a7e      	ldr	r2, [pc, #504]	; (801259c <__ieee754_rem_pio2+0x264>)
 80123a4:	4297      	cmp	r7, r2
 80123a6:	f340 8083 	ble.w	80124b0 <__ieee754_rem_pio2+0x178>
 80123aa:	4a7d      	ldr	r2, [pc, #500]	; (80125a0 <__ieee754_rem_pio2+0x268>)
 80123ac:	4297      	cmp	r7, r2
 80123ae:	dc58      	bgt.n	8012462 <__ieee754_rem_pio2+0x12a>
 80123b0:	153d      	asrs	r5, r7, #20
 80123b2:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80123b6:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
 80123ba:	468b      	mov	fp, r1
 80123bc:	4682      	mov	sl, r0
 80123be:	f7f3 f8b9 	bl	8005534 <__aeabi_d2iz>
 80123c2:	f7f2 fe3f 	bl	8005044 <__aeabi_i2d>
 80123c6:	4680      	mov	r8, r0
 80123c8:	4689      	mov	r9, r1
 80123ca:	4642      	mov	r2, r8
 80123cc:	464b      	mov	r3, r9
 80123ce:	4650      	mov	r0, sl
 80123d0:	4659      	mov	r1, fp
 80123d2:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80123d6:	f7f2 fce7 	bl	8004da8 <__aeabi_dsub>
 80123da:	2200      	movs	r2, #0
 80123dc:	4b71      	ldr	r3, [pc, #452]	; (80125a4 <__ieee754_rem_pio2+0x26c>)
 80123de:	f7f2 fe97 	bl	8005110 <__aeabi_dmul>
 80123e2:	468b      	mov	fp, r1
 80123e4:	4682      	mov	sl, r0
 80123e6:	f7f3 f8a5 	bl	8005534 <__aeabi_d2iz>
 80123ea:	f7f2 fe2b 	bl	8005044 <__aeabi_i2d>
 80123ee:	4680      	mov	r8, r0
 80123f0:	4689      	mov	r9, r1
 80123f2:	4642      	mov	r2, r8
 80123f4:	464b      	mov	r3, r9
 80123f6:	4650      	mov	r0, sl
 80123f8:	4659      	mov	r1, fp
 80123fa:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80123fe:	f7f2 fcd3 	bl	8004da8 <__aeabi_dsub>
 8012402:	2200      	movs	r2, #0
 8012404:	4b67      	ldr	r3, [pc, #412]	; (80125a4 <__ieee754_rem_pio2+0x26c>)
 8012406:	f7f2 fe83 	bl	8005110 <__aeabi_dmul>
 801240a:	2200      	movs	r2, #0
 801240c:	2300      	movs	r3, #0
 801240e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012412:	f7fc fd33 	bl	800ee7c <__aeabi_dcmpeq>
 8012416:	2800      	cmp	r0, #0
 8012418:	f000 816a 	beq.w	80126f0 <__ieee754_rem_pio2+0x3b8>
 801241c:	2300      	movs	r3, #0
 801241e:	4640      	mov	r0, r8
 8012420:	4649      	mov	r1, r9
 8012422:	2200      	movs	r2, #0
 8012424:	f7fc fd2a 	bl	800ee7c <__aeabi_dcmpeq>
 8012428:	2800      	cmp	r0, #0
 801242a:	bf14      	ite	ne
 801242c:	2301      	movne	r3, #1
 801242e:	2302      	moveq	r3, #2
 8012430:	485d      	ldr	r0, [pc, #372]	; (80125a8 <__ieee754_rem_pio2+0x270>)
 8012432:	2102      	movs	r1, #2
 8012434:	9001      	str	r0, [sp, #4]
 8012436:	9100      	str	r1, [sp, #0]
 8012438:	462a      	mov	r2, r5
 801243a:	4621      	mov	r1, r4
 801243c:	a808      	add	r0, sp, #32
 801243e:	f000 fb7b 	bl	8012b38 <__kernel_rem_pio2>
 8012442:	2e00      	cmp	r6, #0
 8012444:	f2c0 814a 	blt.w	80126dc <__ieee754_rem_pio2+0x3a4>
 8012448:	4605      	mov	r5, r0
 801244a:	e006      	b.n	801245a <__ieee754_rem_pio2+0x122>
 801244c:	e9c2 0100 	strd	r0, r1, [r2]
 8012450:	2500      	movs	r5, #0
 8012452:	2400      	movs	r4, #0
 8012454:	e9c2 4502 	strd	r4, r5, [r2, #8]
 8012458:	2500      	movs	r5, #0
 801245a:	4628      	mov	r0, r5
 801245c:	b00f      	add	sp, #60	; 0x3c
 801245e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012462:	4602      	mov	r2, r0
 8012464:	460b      	mov	r3, r1
 8012466:	f7f2 fc9f 	bl	8004da8 <__aeabi_dsub>
 801246a:	2500      	movs	r5, #0
 801246c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012470:	e9c4 0100 	strd	r0, r1, [r4]
 8012474:	e7f1      	b.n	801245a <__ieee754_rem_pio2+0x122>
 8012476:	a340      	add	r3, pc, #256	; (adr r3, 8012578 <__ieee754_rem_pio2+0x240>)
 8012478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247c:	f7f2 fc94 	bl	8004da8 <__aeabi_dsub>
 8012480:	a33f      	add	r3, pc, #252	; (adr r3, 8012580 <__ieee754_rem_pio2+0x248>)
 8012482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012486:	4606      	mov	r6, r0
 8012488:	460f      	mov	r7, r1
 801248a:	f7f2 fc8d 	bl	8004da8 <__aeabi_dsub>
 801248e:	4602      	mov	r2, r0
 8012490:	460b      	mov	r3, r1
 8012492:	4630      	mov	r0, r6
 8012494:	e9c4 2300 	strd	r2, r3, [r4]
 8012498:	4639      	mov	r1, r7
 801249a:	f7f2 fc85 	bl	8004da8 <__aeabi_dsub>
 801249e:	a338      	add	r3, pc, #224	; (adr r3, 8012580 <__ieee754_rem_pio2+0x248>)
 80124a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a4:	f7f2 fc80 	bl	8004da8 <__aeabi_dsub>
 80124a8:	2501      	movs	r5, #1
 80124aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80124ae:	e7d4      	b.n	801245a <__ieee754_rem_pio2+0x122>
 80124b0:	f7ff fea0 	bl	80121f4 <fabs>
 80124b4:	a334      	add	r3, pc, #208	; (adr r3, 8012588 <__ieee754_rem_pio2+0x250>)
 80124b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ba:	4680      	mov	r8, r0
 80124bc:	4689      	mov	r9, r1
 80124be:	f7f2 fe27 	bl	8005110 <__aeabi_dmul>
 80124c2:	2200      	movs	r2, #0
 80124c4:	4b39      	ldr	r3, [pc, #228]	; (80125ac <__ieee754_rem_pio2+0x274>)
 80124c6:	f7f2 fc71 	bl	8004dac <__adddf3>
 80124ca:	f7f3 f833 	bl	8005534 <__aeabi_d2iz>
 80124ce:	4605      	mov	r5, r0
 80124d0:	f7f2 fdb8 	bl	8005044 <__aeabi_i2d>
 80124d4:	a324      	add	r3, pc, #144	; (adr r3, 8012568 <__ieee754_rem_pio2+0x230>)
 80124d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124de:	f7f2 fe17 	bl	8005110 <__aeabi_dmul>
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	4640      	mov	r0, r8
 80124e8:	4649      	mov	r1, r9
 80124ea:	f7f2 fc5d 	bl	8004da8 <__aeabi_dsub>
 80124ee:	a320      	add	r3, pc, #128	; (adr r3, 8012570 <__ieee754_rem_pio2+0x238>)
 80124f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f4:	4682      	mov	sl, r0
 80124f6:	468b      	mov	fp, r1
 80124f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124fc:	f7f2 fe08 	bl	8005110 <__aeabi_dmul>
 8012500:	2d1f      	cmp	r5, #31
 8012502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012506:	dc55      	bgt.n	80125b4 <__ieee754_rem_pio2+0x27c>
 8012508:	4b29      	ldr	r3, [pc, #164]	; (80125b0 <__ieee754_rem_pio2+0x278>)
 801250a:	1e6a      	subs	r2, r5, #1
 801250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012510:	429f      	cmp	r7, r3
 8012512:	d04f      	beq.n	80125b4 <__ieee754_rem_pio2+0x27c>
 8012514:	4602      	mov	r2, r0
 8012516:	460b      	mov	r3, r1
 8012518:	4650      	mov	r0, sl
 801251a:	4659      	mov	r1, fp
 801251c:	f7f2 fc44 	bl	8004da8 <__aeabi_dsub>
 8012520:	4602      	mov	r2, r0
 8012522:	460b      	mov	r3, r1
 8012524:	4681      	mov	r9, r0
 8012526:	4688      	mov	r8, r1
 8012528:	e9c4 2300 	strd	r2, r3, [r4]
 801252c:	464a      	mov	r2, r9
 801252e:	4643      	mov	r3, r8
 8012530:	4650      	mov	r0, sl
 8012532:	4659      	mov	r1, fp
 8012534:	f7f2 fc38 	bl	8004da8 <__aeabi_dsub>
 8012538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801253c:	f7f2 fc34 	bl	8004da8 <__aeabi_dsub>
 8012540:	4602      	mov	r2, r0
 8012542:	460b      	mov	r3, r1
 8012544:	2e00      	cmp	r6, #0
 8012546:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801254a:	da86      	bge.n	801245a <__ieee754_rem_pio2+0x122>
 801254c:	464a      	mov	r2, r9
 801254e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8012552:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8012556:	e884 000c 	stmia.w	r4, {r2, r3}
 801255a:	60e1      	str	r1, [r4, #12]
 801255c:	60a0      	str	r0, [r4, #8]
 801255e:	426d      	negs	r5, r5
 8012560:	e77b      	b.n	801245a <__ieee754_rem_pio2+0x122>
 8012562:	bf00      	nop
 8012564:	f3af 8000 	nop.w
 8012568:	54400000 	.word	0x54400000
 801256c:	3ff921fb 	.word	0x3ff921fb
 8012570:	1a626331 	.word	0x1a626331
 8012574:	3dd0b461 	.word	0x3dd0b461
 8012578:	1a600000 	.word	0x1a600000
 801257c:	3dd0b461 	.word	0x3dd0b461
 8012580:	2e037073 	.word	0x2e037073
 8012584:	3ba3198a 	.word	0x3ba3198a
 8012588:	6dc9c883 	.word	0x6dc9c883
 801258c:	3fe45f30 	.word	0x3fe45f30
 8012590:	3fe921fb 	.word	0x3fe921fb
 8012594:	4002d97b 	.word	0x4002d97b
 8012598:	3ff921fb 	.word	0x3ff921fb
 801259c:	413921fb 	.word	0x413921fb
 80125a0:	7fefffff 	.word	0x7fefffff
 80125a4:	41700000 	.word	0x41700000
 80125a8:	08016098 	.word	0x08016098
 80125ac:	3fe00000 	.word	0x3fe00000
 80125b0:	08016018 	.word	0x08016018
 80125b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80125b8:	4650      	mov	r0, sl
 80125ba:	4659      	mov	r1, fp
 80125bc:	f7f2 fbf4 	bl	8004da8 <__aeabi_dsub>
 80125c0:	153f      	asrs	r7, r7, #20
 80125c2:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80125c6:	1afb      	subs	r3, r7, r3
 80125c8:	2b10      	cmp	r3, #16
 80125ca:	4681      	mov	r9, r0
 80125cc:	4688      	mov	r8, r1
 80125ce:	e9c4 0100 	strd	r0, r1, [r4]
 80125d2:	ddab      	ble.n	801252c <__ieee754_rem_pio2+0x1f4>
 80125d4:	a358      	add	r3, pc, #352	; (adr r3, 8012738 <__ieee754_rem_pio2+0x400>)
 80125d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80125de:	f7f2 fd97 	bl	8005110 <__aeabi_dmul>
 80125e2:	4680      	mov	r8, r0
 80125e4:	4689      	mov	r9, r1
 80125e6:	4602      	mov	r2, r0
 80125e8:	460b      	mov	r3, r1
 80125ea:	4650      	mov	r0, sl
 80125ec:	4659      	mov	r1, fp
 80125ee:	f7f2 fbdb 	bl	8004da8 <__aeabi_dsub>
 80125f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80125f6:	4602      	mov	r2, r0
 80125f8:	460b      	mov	r3, r1
 80125fa:	4650      	mov	r0, sl
 80125fc:	4659      	mov	r1, fp
 80125fe:	f7f2 fbd3 	bl	8004da8 <__aeabi_dsub>
 8012602:	4642      	mov	r2, r8
 8012604:	464b      	mov	r3, r9
 8012606:	f7f2 fbcf 	bl	8004da8 <__aeabi_dsub>
 801260a:	a34d      	add	r3, pc, #308	; (adr r3, 8012740 <__ieee754_rem_pio2+0x408>)
 801260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012610:	4680      	mov	r8, r0
 8012612:	4689      	mov	r9, r1
 8012614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012618:	f7f2 fd7a 	bl	8005110 <__aeabi_dmul>
 801261c:	4642      	mov	r2, r8
 801261e:	464b      	mov	r3, r9
 8012620:	f7f2 fbc2 	bl	8004da8 <__aeabi_dsub>
 8012624:	4602      	mov	r2, r0
 8012626:	460b      	mov	r3, r1
 8012628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801262c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012630:	f7f2 fbba 	bl	8004da8 <__aeabi_dsub>
 8012634:	460b      	mov	r3, r1
 8012636:	4602      	mov	r2, r0
 8012638:	4688      	mov	r8, r1
 801263a:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801263e:	1a7f      	subs	r7, r7, r1
 8012640:	2f31      	cmp	r7, #49	; 0x31
 8012642:	4681      	mov	r9, r0
 8012644:	e9c4 2300 	strd	r2, r3, [r4]
 8012648:	dd72      	ble.n	8012730 <__ieee754_rem_pio2+0x3f8>
 801264a:	a33f      	add	r3, pc, #252	; (adr r3, 8012748 <__ieee754_rem_pio2+0x410>)
 801264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012650:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012654:	f7f2 fd5c 	bl	8005110 <__aeabi_dmul>
 8012658:	4680      	mov	r8, r0
 801265a:	4689      	mov	r9, r1
 801265c:	4602      	mov	r2, r0
 801265e:	460b      	mov	r3, r1
 8012660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012664:	f7f2 fba0 	bl	8004da8 <__aeabi_dsub>
 8012668:	4602      	mov	r2, r0
 801266a:	460b      	mov	r3, r1
 801266c:	4682      	mov	sl, r0
 801266e:	468b      	mov	fp, r1
 8012670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012674:	f7f2 fb98 	bl	8004da8 <__aeabi_dsub>
 8012678:	4642      	mov	r2, r8
 801267a:	464b      	mov	r3, r9
 801267c:	f7f2 fb94 	bl	8004da8 <__aeabi_dsub>
 8012680:	a333      	add	r3, pc, #204	; (adr r3, 8012750 <__ieee754_rem_pio2+0x418>)
 8012682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012686:	4680      	mov	r8, r0
 8012688:	4689      	mov	r9, r1
 801268a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801268e:	f7f2 fd3f 	bl	8005110 <__aeabi_dmul>
 8012692:	4642      	mov	r2, r8
 8012694:	464b      	mov	r3, r9
 8012696:	f7f2 fb87 	bl	8004da8 <__aeabi_dsub>
 801269a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801269e:	e739      	b.n	8012514 <__ieee754_rem_pio2+0x1dc>
 80126a0:	f7f2 fb84 	bl	8004dac <__adddf3>
 80126a4:	4b2e      	ldr	r3, [pc, #184]	; (8012760 <__ieee754_rem_pio2+0x428>)
 80126a6:	4680      	mov	r8, r0
 80126a8:	429f      	cmp	r7, r3
 80126aa:	4689      	mov	r9, r1
 80126ac:	d022      	beq.n	80126f4 <__ieee754_rem_pio2+0x3bc>
 80126ae:	a32a      	add	r3, pc, #168	; (adr r3, 8012758 <__ieee754_rem_pio2+0x420>)
 80126b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b4:	f7f2 fb7a 	bl	8004dac <__adddf3>
 80126b8:	4602      	mov	r2, r0
 80126ba:	460b      	mov	r3, r1
 80126bc:	4640      	mov	r0, r8
 80126be:	e9c4 2300 	strd	r2, r3, [r4]
 80126c2:	4649      	mov	r1, r9
 80126c4:	f7f2 fb70 	bl	8004da8 <__aeabi_dsub>
 80126c8:	a323      	add	r3, pc, #140	; (adr r3, 8012758 <__ieee754_rem_pio2+0x420>)
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	f7f2 fb6d 	bl	8004dac <__adddf3>
 80126d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80126d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80126da:	e6be      	b.n	801245a <__ieee754_rem_pio2+0x122>
 80126dc:	6862      	ldr	r2, [r4, #4]
 80126de:	68e3      	ldr	r3, [r4, #12]
 80126e0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80126e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80126e8:	4245      	negs	r5, r0
 80126ea:	6062      	str	r2, [r4, #4]
 80126ec:	60e3      	str	r3, [r4, #12]
 80126ee:	e6b4      	b.n	801245a <__ieee754_rem_pio2+0x122>
 80126f0:	2303      	movs	r3, #3
 80126f2:	e69d      	b.n	8012430 <__ieee754_rem_pio2+0xf8>
 80126f4:	a310      	add	r3, pc, #64	; (adr r3, 8012738 <__ieee754_rem_pio2+0x400>)
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	f7f2 fb57 	bl	8004dac <__adddf3>
 80126fe:	a310      	add	r3, pc, #64	; (adr r3, 8012740 <__ieee754_rem_pio2+0x408>)
 8012700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012704:	4606      	mov	r6, r0
 8012706:	460f      	mov	r7, r1
 8012708:	f7f2 fb50 	bl	8004dac <__adddf3>
 801270c:	4602      	mov	r2, r0
 801270e:	460b      	mov	r3, r1
 8012710:	4630      	mov	r0, r6
 8012712:	e9c4 2300 	strd	r2, r3, [r4]
 8012716:	4639      	mov	r1, r7
 8012718:	f7f2 fb46 	bl	8004da8 <__aeabi_dsub>
 801271c:	a308      	add	r3, pc, #32	; (adr r3, 8012740 <__ieee754_rem_pio2+0x408>)
 801271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012722:	f7f2 fb43 	bl	8004dac <__adddf3>
 8012726:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801272a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801272e:	e694      	b.n	801245a <__ieee754_rem_pio2+0x122>
 8012730:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012734:	e6fa      	b.n	801252c <__ieee754_rem_pio2+0x1f4>
 8012736:	bf00      	nop
 8012738:	1a600000 	.word	0x1a600000
 801273c:	3dd0b461 	.word	0x3dd0b461
 8012740:	2e037073 	.word	0x2e037073
 8012744:	3ba3198a 	.word	0x3ba3198a
 8012748:	2e000000 	.word	0x2e000000
 801274c:	3ba3198a 	.word	0x3ba3198a
 8012750:	252049c1 	.word	0x252049c1
 8012754:	397b839a 	.word	0x397b839a
 8012758:	1a626331 	.word	0x1a626331
 801275c:	3dd0b461 	.word	0x3dd0b461
 8012760:	3ff921fb 	.word	0x3ff921fb

08012764 <__ieee754_sqrt>:
 8012764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012768:	4e5f      	ldr	r6, [pc, #380]	; (80128e8 <__ieee754_sqrt+0x184>)
 801276a:	460c      	mov	r4, r1
 801276c:	46b6      	mov	lr, r6
 801276e:	400e      	ands	r6, r1
 8012770:	4576      	cmp	r6, lr
 8012772:	4605      	mov	r5, r0
 8012774:	f000 8098 	beq.w	80128a8 <__ieee754_sqrt+0x144>
 8012778:	2900      	cmp	r1, #0
 801277a:	460b      	mov	r3, r1
 801277c:	4602      	mov	r2, r0
 801277e:	dd74      	ble.n	801286a <__ieee754_sqrt+0x106>
 8012780:	ea5f 5e21 	movs.w	lr, r1, asr #20
 8012784:	d07f      	beq.n	8012886 <__ieee754_sqrt+0x122>
 8012786:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 801278a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801278e:	f01e 0f01 	tst.w	lr, #1
 8012792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012796:	d163      	bne.n	8012860 <__ieee754_sqrt+0xfc>
 8012798:	2700      	movs	r7, #0
 801279a:	463e      	mov	r6, r7
 801279c:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80127a0:	440b      	add	r3, r1
 80127a2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80127a6:	0052      	lsls	r2, r2, #1
 80127a8:	2016      	movs	r0, #22
 80127aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80127ae:	1874      	adds	r4, r6, r1
 80127b0:	429c      	cmp	r4, r3
 80127b2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80127b6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80127ba:	dc02      	bgt.n	80127c2 <__ieee754_sqrt+0x5e>
 80127bc:	1b1b      	subs	r3, r3, r4
 80127be:	1866      	adds	r6, r4, r1
 80127c0:	440f      	add	r7, r1
 80127c2:	3801      	subs	r0, #1
 80127c4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80127c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80127cc:	d1ef      	bne.n	80127ae <__ieee754_sqrt+0x4a>
 80127ce:	4684      	mov	ip, r0
 80127d0:	2420      	movs	r4, #32
 80127d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80127d6:	e009      	b.n	80127ec <__ieee754_sqrt+0x88>
 80127d8:	d020      	beq.n	801281c <__ieee754_sqrt+0xb8>
 80127da:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80127de:	3c01      	subs	r4, #1
 80127e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80127e4:	442b      	add	r3, r5
 80127e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80127ea:	d020      	beq.n	801282e <__ieee754_sqrt+0xca>
 80127ec:	429e      	cmp	r6, r3
 80127ee:	eb01 050c 	add.w	r5, r1, ip
 80127f2:	daf1      	bge.n	80127d8 <__ieee754_sqrt+0x74>
 80127f4:	2d00      	cmp	r5, #0
 80127f6:	eb05 0c01 	add.w	ip, r5, r1
 80127fa:	db09      	blt.n	8012810 <__ieee754_sqrt+0xac>
 80127fc:	46b0      	mov	r8, r6
 80127fe:	4295      	cmp	r5, r2
 8012800:	eba3 0306 	sub.w	r3, r3, r6
 8012804:	d900      	bls.n	8012808 <__ieee754_sqrt+0xa4>
 8012806:	3b01      	subs	r3, #1
 8012808:	4646      	mov	r6, r8
 801280a:	1b52      	subs	r2, r2, r5
 801280c:	4408      	add	r0, r1
 801280e:	e7e4      	b.n	80127da <__ieee754_sqrt+0x76>
 8012810:	f1bc 0f00 	cmp.w	ip, #0
 8012814:	dbf2      	blt.n	80127fc <__ieee754_sqrt+0x98>
 8012816:	f106 0801 	add.w	r8, r6, #1
 801281a:	e7f0      	b.n	80127fe <__ieee754_sqrt+0x9a>
 801281c:	4295      	cmp	r5, r2
 801281e:	d817      	bhi.n	8012850 <__ieee754_sqrt+0xec>
 8012820:	2d00      	cmp	r5, #0
 8012822:	eb05 0c01 	add.w	ip, r5, r1
 8012826:	db49      	blt.n	80128bc <__ieee754_sqrt+0x158>
 8012828:	4698      	mov	r8, r3
 801282a:	2300      	movs	r3, #0
 801282c:	e7ec      	b.n	8012808 <__ieee754_sqrt+0xa4>
 801282e:	4313      	orrs	r3, r2
 8012830:	d110      	bne.n	8012854 <__ieee754_sqrt+0xf0>
 8012832:	0840      	lsrs	r0, r0, #1
 8012834:	107b      	asrs	r3, r7, #1
 8012836:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801283a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801283e:	07fa      	lsls	r2, r7, #31
 8012840:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 8012844:	4639      	mov	r1, r7
 8012846:	bf48      	it	mi
 8012848:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 801284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012850:	4633      	mov	r3, r6
 8012852:	e7c2      	b.n	80127da <__ieee754_sqrt+0x76>
 8012854:	1c41      	adds	r1, r0, #1
 8012856:	d035      	beq.n	80128c4 <__ieee754_sqrt+0x160>
 8012858:	f000 0301 	and.w	r3, r0, #1
 801285c:	4418      	add	r0, r3
 801285e:	e7e8      	b.n	8012832 <__ieee754_sqrt+0xce>
 8012860:	005b      	lsls	r3, r3, #1
 8012862:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012866:	0052      	lsls	r2, r2, #1
 8012868:	e796      	b.n	8012798 <__ieee754_sqrt+0x34>
 801286a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801286e:	4306      	orrs	r6, r0
 8012870:	d0ec      	beq.n	801284c <__ieee754_sqrt+0xe8>
 8012872:	bb79      	cbnz	r1, 80128d4 <__ieee754_sqrt+0x170>
 8012874:	468e      	mov	lr, r1
 8012876:	0ad3      	lsrs	r3, r2, #11
 8012878:	f1ae 0e15 	sub.w	lr, lr, #21
 801287c:	0552      	lsls	r2, r2, #21
 801287e:	2b00      	cmp	r3, #0
 8012880:	d0f9      	beq.n	8012876 <__ieee754_sqrt+0x112>
 8012882:	02dd      	lsls	r5, r3, #11
 8012884:	d421      	bmi.n	80128ca <__ieee754_sqrt+0x166>
 8012886:	2100      	movs	r1, #0
 8012888:	e000      	b.n	801288c <__ieee754_sqrt+0x128>
 801288a:	4601      	mov	r1, r0
 801288c:	005b      	lsls	r3, r3, #1
 801288e:	02dc      	lsls	r4, r3, #11
 8012890:	f101 0001 	add.w	r0, r1, #1
 8012894:	d5f9      	bpl.n	801288a <__ieee754_sqrt+0x126>
 8012896:	f1c0 0420 	rsb	r4, r0, #32
 801289a:	fa22 f404 	lsr.w	r4, r2, r4
 801289e:	4323      	orrs	r3, r4
 80128a0:	ebc1 0e0e 	rsb	lr, r1, lr
 80128a4:	4082      	lsls	r2, r0
 80128a6:	e76e      	b.n	8012786 <__ieee754_sqrt+0x22>
 80128a8:	4602      	mov	r2, r0
 80128aa:	460b      	mov	r3, r1
 80128ac:	f7f2 fc30 	bl	8005110 <__aeabi_dmul>
 80128b0:	462a      	mov	r2, r5
 80128b2:	4623      	mov	r3, r4
 80128b4:	f7f2 fa7a 	bl	8004dac <__adddf3>
 80128b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128bc:	f1bc 0f00 	cmp.w	ip, #0
 80128c0:	dbb2      	blt.n	8012828 <__ieee754_sqrt+0xc4>
 80128c2:	e7a8      	b.n	8012816 <__ieee754_sqrt+0xb2>
 80128c4:	3701      	adds	r7, #1
 80128c6:	4620      	mov	r0, r4
 80128c8:	e7b4      	b.n	8012834 <__ieee754_sqrt+0xd0>
 80128ca:	2420      	movs	r4, #32
 80128cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80128d0:	2000      	movs	r0, #0
 80128d2:	e7e2      	b.n	801289a <__ieee754_sqrt+0x136>
 80128d4:	4602      	mov	r2, r0
 80128d6:	460b      	mov	r3, r1
 80128d8:	f7f2 fa66 	bl	8004da8 <__aeabi_dsub>
 80128dc:	4602      	mov	r2, r0
 80128de:	460b      	mov	r3, r1
 80128e0:	f7f2 fd40 	bl	8005364 <__aeabi_ddiv>
 80128e4:	e7b2      	b.n	801284c <__ieee754_sqrt+0xe8>
 80128e6:	bf00      	nop
 80128e8:	7ff00000 	.word	0x7ff00000
 80128ec:	00000000 	.word	0x00000000

080128f0 <__kernel_cos>:
 80128f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80128f8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80128fc:	b085      	sub	sp, #20
 80128fe:	460c      	mov	r4, r1
 8012900:	4692      	mov	sl, r2
 8012902:	469b      	mov	fp, r3
 8012904:	4605      	mov	r5, r0
 8012906:	da6b      	bge.n	80129e0 <__kernel_cos+0xf0>
 8012908:	f7f2 fe14 	bl	8005534 <__aeabi_d2iz>
 801290c:	2800      	cmp	r0, #0
 801290e:	f000 80e7 	beq.w	8012ae0 <__kernel_cos+0x1f0>
 8012912:	462a      	mov	r2, r5
 8012914:	4623      	mov	r3, r4
 8012916:	4628      	mov	r0, r5
 8012918:	4621      	mov	r1, r4
 801291a:	f7f2 fbf9 	bl	8005110 <__aeabi_dmul>
 801291e:	a374      	add	r3, pc, #464	; (adr r3, 8012af0 <__kernel_cos+0x200>)
 8012920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012924:	4680      	mov	r8, r0
 8012926:	4689      	mov	r9, r1
 8012928:	f7f2 fbf2 	bl	8005110 <__aeabi_dmul>
 801292c:	a372      	add	r3, pc, #456	; (adr r3, 8012af8 <__kernel_cos+0x208>)
 801292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012932:	f7f2 fa3b 	bl	8004dac <__adddf3>
 8012936:	4642      	mov	r2, r8
 8012938:	464b      	mov	r3, r9
 801293a:	f7f2 fbe9 	bl	8005110 <__aeabi_dmul>
 801293e:	a370      	add	r3, pc, #448	; (adr r3, 8012b00 <__kernel_cos+0x210>)
 8012940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012944:	f7f2 fa30 	bl	8004da8 <__aeabi_dsub>
 8012948:	4642      	mov	r2, r8
 801294a:	464b      	mov	r3, r9
 801294c:	f7f2 fbe0 	bl	8005110 <__aeabi_dmul>
 8012950:	a36d      	add	r3, pc, #436	; (adr r3, 8012b08 <__kernel_cos+0x218>)
 8012952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012956:	f7f2 fa29 	bl	8004dac <__adddf3>
 801295a:	4642      	mov	r2, r8
 801295c:	464b      	mov	r3, r9
 801295e:	f7f2 fbd7 	bl	8005110 <__aeabi_dmul>
 8012962:	a36b      	add	r3, pc, #428	; (adr r3, 8012b10 <__kernel_cos+0x220>)
 8012964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012968:	f7f2 fa1e 	bl	8004da8 <__aeabi_dsub>
 801296c:	4642      	mov	r2, r8
 801296e:	464b      	mov	r3, r9
 8012970:	f7f2 fbce 	bl	8005110 <__aeabi_dmul>
 8012974:	a368      	add	r3, pc, #416	; (adr r3, 8012b18 <__kernel_cos+0x228>)
 8012976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297a:	f7f2 fa17 	bl	8004dac <__adddf3>
 801297e:	4642      	mov	r2, r8
 8012980:	464b      	mov	r3, r9
 8012982:	f7f2 fbc5 	bl	8005110 <__aeabi_dmul>
 8012986:	e9cd 0100 	strd	r0, r1, [sp]
 801298a:	2200      	movs	r2, #0
 801298c:	4b64      	ldr	r3, [pc, #400]	; (8012b20 <__kernel_cos+0x230>)
 801298e:	4640      	mov	r0, r8
 8012990:	4649      	mov	r1, r9
 8012992:	f7f2 fbbd 	bl	8005110 <__aeabi_dmul>
 8012996:	e9dd 2300 	ldrd	r2, r3, [sp]
 801299a:	4606      	mov	r6, r0
 801299c:	460f      	mov	r7, r1
 801299e:	4640      	mov	r0, r8
 80129a0:	4649      	mov	r1, r9
 80129a2:	f7f2 fbb5 	bl	8005110 <__aeabi_dmul>
 80129a6:	4652      	mov	r2, sl
 80129a8:	4680      	mov	r8, r0
 80129aa:	4689      	mov	r9, r1
 80129ac:	465b      	mov	r3, fp
 80129ae:	4628      	mov	r0, r5
 80129b0:	4621      	mov	r1, r4
 80129b2:	f7f2 fbad 	bl	8005110 <__aeabi_dmul>
 80129b6:	4602      	mov	r2, r0
 80129b8:	460b      	mov	r3, r1
 80129ba:	4640      	mov	r0, r8
 80129bc:	4649      	mov	r1, r9
 80129be:	f7f2 f9f3 	bl	8004da8 <__aeabi_dsub>
 80129c2:	4602      	mov	r2, r0
 80129c4:	460b      	mov	r3, r1
 80129c6:	4630      	mov	r0, r6
 80129c8:	4639      	mov	r1, r7
 80129ca:	f7f2 f9ed 	bl	8004da8 <__aeabi_dsub>
 80129ce:	4602      	mov	r2, r0
 80129d0:	460b      	mov	r3, r1
 80129d2:	2000      	movs	r0, #0
 80129d4:	4953      	ldr	r1, [pc, #332]	; (8012b24 <__kernel_cos+0x234>)
 80129d6:	f7f2 f9e7 	bl	8004da8 <__aeabi_dsub>
 80129da:	b005      	add	sp, #20
 80129dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e0:	4602      	mov	r2, r0
 80129e2:	460b      	mov	r3, r1
 80129e4:	f7f2 fb94 	bl	8005110 <__aeabi_dmul>
 80129e8:	a341      	add	r3, pc, #260	; (adr r3, 8012af0 <__kernel_cos+0x200>)
 80129ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ee:	4680      	mov	r8, r0
 80129f0:	4689      	mov	r9, r1
 80129f2:	f7f2 fb8d 	bl	8005110 <__aeabi_dmul>
 80129f6:	a340      	add	r3, pc, #256	; (adr r3, 8012af8 <__kernel_cos+0x208>)
 80129f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fc:	f7f2 f9d6 	bl	8004dac <__adddf3>
 8012a00:	4642      	mov	r2, r8
 8012a02:	464b      	mov	r3, r9
 8012a04:	f7f2 fb84 	bl	8005110 <__aeabi_dmul>
 8012a08:	a33d      	add	r3, pc, #244	; (adr r3, 8012b00 <__kernel_cos+0x210>)
 8012a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0e:	f7f2 f9cb 	bl	8004da8 <__aeabi_dsub>
 8012a12:	4642      	mov	r2, r8
 8012a14:	464b      	mov	r3, r9
 8012a16:	f7f2 fb7b 	bl	8005110 <__aeabi_dmul>
 8012a1a:	a33b      	add	r3, pc, #236	; (adr r3, 8012b08 <__kernel_cos+0x218>)
 8012a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a20:	f7f2 f9c4 	bl	8004dac <__adddf3>
 8012a24:	4642      	mov	r2, r8
 8012a26:	464b      	mov	r3, r9
 8012a28:	f7f2 fb72 	bl	8005110 <__aeabi_dmul>
 8012a2c:	a338      	add	r3, pc, #224	; (adr r3, 8012b10 <__kernel_cos+0x220>)
 8012a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a32:	f7f2 f9b9 	bl	8004da8 <__aeabi_dsub>
 8012a36:	4642      	mov	r2, r8
 8012a38:	464b      	mov	r3, r9
 8012a3a:	f7f2 fb69 	bl	8005110 <__aeabi_dmul>
 8012a3e:	a336      	add	r3, pc, #216	; (adr r3, 8012b18 <__kernel_cos+0x228>)
 8012a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a44:	f7f2 f9b2 	bl	8004dac <__adddf3>
 8012a48:	464b      	mov	r3, r9
 8012a4a:	4642      	mov	r2, r8
 8012a4c:	f7f2 fb60 	bl	8005110 <__aeabi_dmul>
 8012a50:	4b35      	ldr	r3, [pc, #212]	; (8012b28 <__kernel_cos+0x238>)
 8012a52:	e9cd 0100 	strd	r0, r1, [sp]
 8012a56:	429e      	cmp	r6, r3
 8012a58:	dd97      	ble.n	801298a <__kernel_cos+0x9a>
 8012a5a:	4b34      	ldr	r3, [pc, #208]	; (8012b2c <__kernel_cos+0x23c>)
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	429e      	cmp	r6, r3
 8012a60:	dc38      	bgt.n	8012ad4 <__kernel_cos+0x1e4>
 8012a62:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 8012a66:	2000      	movs	r0, #0
 8012a68:	492e      	ldr	r1, [pc, #184]	; (8012b24 <__kernel_cos+0x234>)
 8012a6a:	4616      	mov	r6, r2
 8012a6c:	461f      	mov	r7, r3
 8012a6e:	f7f2 f99b 	bl	8004da8 <__aeabi_dsub>
 8012a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a76:	2200      	movs	r2, #0
 8012a78:	4b29      	ldr	r3, [pc, #164]	; (8012b20 <__kernel_cos+0x230>)
 8012a7a:	4640      	mov	r0, r8
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	f7f2 fb47 	bl	8005110 <__aeabi_dmul>
 8012a82:	4632      	mov	r2, r6
 8012a84:	463b      	mov	r3, r7
 8012a86:	f7f2 f98f 	bl	8004da8 <__aeabi_dsub>
 8012a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a8e:	4606      	mov	r6, r0
 8012a90:	460f      	mov	r7, r1
 8012a92:	4640      	mov	r0, r8
 8012a94:	4649      	mov	r1, r9
 8012a96:	f7f2 fb3b 	bl	8005110 <__aeabi_dmul>
 8012a9a:	4652      	mov	r2, sl
 8012a9c:	4680      	mov	r8, r0
 8012a9e:	4689      	mov	r9, r1
 8012aa0:	465b      	mov	r3, fp
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	f7f2 fb33 	bl	8005110 <__aeabi_dmul>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	460b      	mov	r3, r1
 8012aae:	4640      	mov	r0, r8
 8012ab0:	4649      	mov	r1, r9
 8012ab2:	f7f2 f979 	bl	8004da8 <__aeabi_dsub>
 8012ab6:	4602      	mov	r2, r0
 8012ab8:	460b      	mov	r3, r1
 8012aba:	4630      	mov	r0, r6
 8012abc:	4639      	mov	r1, r7
 8012abe:	f7f2 f973 	bl	8004da8 <__aeabi_dsub>
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012aca:	f7f2 f96d 	bl	8004da8 <__aeabi_dsub>
 8012ace:	b005      	add	sp, #20
 8012ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad4:	4b16      	ldr	r3, [pc, #88]	; (8012b30 <__kernel_cos+0x240>)
 8012ad6:	2600      	movs	r6, #0
 8012ad8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012adc:	4f15      	ldr	r7, [pc, #84]	; (8012b34 <__kernel_cos+0x244>)
 8012ade:	e7ca      	b.n	8012a76 <__kernel_cos+0x186>
 8012ae0:	4910      	ldr	r1, [pc, #64]	; (8012b24 <__kernel_cos+0x234>)
 8012ae2:	2000      	movs	r0, #0
 8012ae4:	b005      	add	sp, #20
 8012ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aea:	bf00      	nop
 8012aec:	f3af 8000 	nop.w
 8012af0:	be8838d4 	.word	0xbe8838d4
 8012af4:	bda8fae9 	.word	0xbda8fae9
 8012af8:	bdb4b1c4 	.word	0xbdb4b1c4
 8012afc:	3e21ee9e 	.word	0x3e21ee9e
 8012b00:	809c52ad 	.word	0x809c52ad
 8012b04:	3e927e4f 	.word	0x3e927e4f
 8012b08:	19cb1590 	.word	0x19cb1590
 8012b0c:	3efa01a0 	.word	0x3efa01a0
 8012b10:	16c15177 	.word	0x16c15177
 8012b14:	3f56c16c 	.word	0x3f56c16c
 8012b18:	5555554c 	.word	0x5555554c
 8012b1c:	3fa55555 	.word	0x3fa55555
 8012b20:	3fe00000 	.word	0x3fe00000
 8012b24:	3ff00000 	.word	0x3ff00000
 8012b28:	3fd33332 	.word	0x3fd33332
 8012b2c:	3fe90000 	.word	0x3fe90000
 8012b30:	3fe70000 	.word	0x3fe70000
 8012b34:	3fd20000 	.word	0x3fd20000

08012b38 <__kernel_rem_pio2>:
 8012b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3c:	4c7a      	ldr	r4, [pc, #488]	; (8012d28 <__kernel_rem_pio2+0x1f0>)
 8012b3e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8012b42:	461f      	mov	r7, r3
 8012b44:	930c      	str	r3, [sp, #48]	; 0x30
 8012b46:	1ed3      	subs	r3, r2, #3
 8012b48:	fb84 5403 	smull	r5, r4, r4, r3
 8012b4c:	17db      	asrs	r3, r3, #31
 8012b4e:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 8012b52:	9ea6      	ldr	r6, [sp, #664]	; 0x298
 8012b54:	4c75      	ldr	r4, [pc, #468]	; (8012d2c <__kernel_rem_pio2+0x1f4>)
 8012b56:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8012b5a:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 8012b5e:	1c6b      	adds	r3, r5, #1
 8012b60:	4626      	mov	r6, r4
 8012b62:	9409      	str	r4, [sp, #36]	; 0x24
 8012b64:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 8012b68:	1e7c      	subs	r4, r7, #1
 8012b6a:	950d      	str	r5, [sp, #52]	; 0x34
 8012b6c:	9402      	str	r4, [sp, #8]
 8012b6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012b72:	1b2d      	subs	r5, r5, r4
 8012b74:	1934      	adds	r4, r6, r4
 8012b76:	9004      	str	r0, [sp, #16]
 8012b78:	910a      	str	r1, [sp, #40]	; 0x28
 8012b7a:	9308      	str	r3, [sp, #32]
 8012b7c:	d416      	bmi.n	8012bac <__kernel_rem_pio2+0x74>
 8012b7e:	442c      	add	r4, r5
 8012b80:	3401      	adds	r4, #1
 8012b82:	ae22      	add	r6, sp, #136	; 0x88
 8012b84:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
 8012b86:	e008      	b.n	8012b9a <__kernel_rem_pio2+0x62>
 8012b88:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8012b8c:	f7f2 fa5a 	bl	8005044 <__aeabi_i2d>
 8012b90:	3501      	adds	r5, #1
 8012b92:	42a5      	cmp	r5, r4
 8012b94:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8012b98:	d008      	beq.n	8012bac <__kernel_rem_pio2+0x74>
 8012b9a:	2d00      	cmp	r5, #0
 8012b9c:	daf4      	bge.n	8012b88 <__kernel_rem_pio2+0x50>
 8012b9e:	3501      	adds	r5, #1
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	42a5      	cmp	r5, r4
 8012ba6:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 8012baa:	d1f6      	bne.n	8012b9a <__kernel_rem_pio2+0x62>
 8012bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	db31      	blt.n	8012c16 <__kernel_rem_pio2+0xde>
 8012bb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012bb6:	a974      	add	r1, sp, #464	; 0x1d0
 8012bb8:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
 8012bbc:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 8012bc0:	9a02      	ldr	r2, [sp, #8]
 8012bc2:	a924      	add	r1, sp, #144	; 0x90
 8012bc4:	00db      	lsls	r3, r3, #3
 8012bc6:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 8012bca:	9301      	str	r3, [sp, #4]
 8012bcc:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 8012bd0:	9b02      	ldr	r3, [sp, #8]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	f2c0 8190 	blt.w	8012ef8 <__kernel_rem_pio2+0x3c0>
 8012bd8:	464c      	mov	r4, r9
 8012bda:	9b04      	ldr	r3, [sp, #16]
 8012bdc:	2600      	movs	r6, #0
 8012bde:	f1a3 0508 	sub.w	r5, r3, #8
 8012be2:	9b01      	ldr	r3, [sp, #4]
 8012be4:	2700      	movs	r7, #0
 8012be6:	eb09 0803 	add.w	r8, r9, r3
 8012bea:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8012bee:	e874 0102 	ldrd	r0, r1, [r4], #-8
 8012bf2:	f7f2 fa8d 	bl	8005110 <__aeabi_dmul>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	460b      	mov	r3, r1
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	4639      	mov	r1, r7
 8012bfe:	f7f2 f8d5 	bl	8004dac <__adddf3>
 8012c02:	4544      	cmp	r4, r8
 8012c04:	4606      	mov	r6, r0
 8012c06:	460f      	mov	r7, r1
 8012c08:	d1ef      	bne.n	8012bea <__kernel_rem_pio2+0xb2>
 8012c0a:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8012c0e:	45da      	cmp	sl, fp
 8012c10:	f109 0908 	add.w	r9, r9, #8
 8012c14:	d1dc      	bne.n	8012bd0 <__kernel_rem_pio2+0x98>
 8012c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c18:	a910      	add	r1, sp, #64	; 0x40
 8012c1a:	461d      	mov	r5, r3
 8012c1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012c20:	3b02      	subs	r3, #2
 8012c22:	009b      	lsls	r3, r3, #2
 8012c24:	1d1a      	adds	r2, r3, #4
 8012c26:	440a      	add	r2, r1
 8012c28:	440b      	add	r3, r1
 8012c2a:	920f      	str	r2, [sp, #60]	; 0x3c
 8012c2c:	930e      	str	r3, [sp, #56]	; 0x38
 8012c2e:	ab9c      	add	r3, sp, #624	; 0x270
 8012c30:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012c34:	2d00      	cmp	r5, #0
 8012c36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8012c3a:	dd2b      	ble.n	8012c94 <__kernel_rem_pio2+0x15c>
 8012c3c:	ab9c      	add	r3, sp, #624	; 0x270
 8012c3e:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
 8012c42:	3ca8      	subs	r4, #168	; 0xa8
 8012c44:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8012c48:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	4b38      	ldr	r3, [pc, #224]	; (8012d30 <__kernel_rem_pio2+0x1f8>)
 8012c50:	4630      	mov	r0, r6
 8012c52:	4639      	mov	r1, r7
 8012c54:	f7f2 fa5c 	bl	8005110 <__aeabi_dmul>
 8012c58:	f7f2 fc6c 	bl	8005534 <__aeabi_d2iz>
 8012c5c:	f7f2 f9f2 	bl	8005044 <__aeabi_i2d>
 8012c60:	2200      	movs	r2, #0
 8012c62:	4b34      	ldr	r3, [pc, #208]	; (8012d34 <__kernel_rem_pio2+0x1fc>)
 8012c64:	4680      	mov	r8, r0
 8012c66:	4689      	mov	r9, r1
 8012c68:	f7f2 fa52 	bl	8005110 <__aeabi_dmul>
 8012c6c:	4602      	mov	r2, r0
 8012c6e:	460b      	mov	r3, r1
 8012c70:	4630      	mov	r0, r6
 8012c72:	4639      	mov	r1, r7
 8012c74:	f7f2 f898 	bl	8004da8 <__aeabi_dsub>
 8012c78:	f7f2 fc5c 	bl	8005534 <__aeabi_d2iz>
 8012c7c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8012c80:	f84a 0f04 	str.w	r0, [sl, #4]!
 8012c84:	4649      	mov	r1, r9
 8012c86:	4640      	mov	r0, r8
 8012c88:	f7f2 f890 	bl	8004dac <__adddf3>
 8012c8c:	455c      	cmp	r4, fp
 8012c8e:	4606      	mov	r6, r0
 8012c90:	460f      	mov	r7, r1
 8012c92:	d1db      	bne.n	8012c4c <__kernel_rem_pio2+0x114>
 8012c94:	9c08      	ldr	r4, [sp, #32]
 8012c96:	4630      	mov	r0, r6
 8012c98:	4639      	mov	r1, r7
 8012c9a:	4622      	mov	r2, r4
 8012c9c:	f000 fcb4 	bl	8013608 <scalbn>
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012ca6:	4606      	mov	r6, r0
 8012ca8:	460f      	mov	r7, r1
 8012caa:	f7f2 fa31 	bl	8005110 <__aeabi_dmul>
 8012cae:	f000 fbf7 	bl	80134a0 <floor>
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	4b20      	ldr	r3, [pc, #128]	; (8012d38 <__kernel_rem_pio2+0x200>)
 8012cb6:	f7f2 fa2b 	bl	8005110 <__aeabi_dmul>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	4639      	mov	r1, r7
 8012cc2:	f7f2 f871 	bl	8004da8 <__aeabi_dsub>
 8012cc6:	460f      	mov	r7, r1
 8012cc8:	4606      	mov	r6, r0
 8012cca:	f7f2 fc33 	bl	8005534 <__aeabi_d2iz>
 8012cce:	4681      	mov	r9, r0
 8012cd0:	f7f2 f9b8 	bl	8005044 <__aeabi_i2d>
 8012cd4:	4602      	mov	r2, r0
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	4630      	mov	r0, r6
 8012cda:	4639      	mov	r1, r7
 8012cdc:	f7f2 f864 	bl	8004da8 <__aeabi_dsub>
 8012ce0:	2c00      	cmp	r4, #0
 8012ce2:	4606      	mov	r6, r0
 8012ce4:	460f      	mov	r7, r1
 8012ce6:	f340 80ee 	ble.w	8012ec6 <__kernel_rem_pio2+0x38e>
 8012cea:	1e68      	subs	r0, r5, #1
 8012cec:	ab10      	add	r3, sp, #64	; 0x40
 8012cee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012cf2:	f1c4 0218 	rsb	r2, r4, #24
 8012cf6:	fa43 f102 	asr.w	r1, r3, r2
 8012cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8012cfe:	1a9b      	subs	r3, r3, r2
 8012d00:	f1c4 0817 	rsb	r8, r4, #23
 8012d04:	aa10      	add	r2, sp, #64	; 0x40
 8012d06:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8012d0a:	4489      	add	r9, r1
 8012d0c:	fa43 f808 	asr.w	r8, r3, r8
 8012d10:	f1b8 0f00 	cmp.w	r8, #0
 8012d14:	dd3d      	ble.n	8012d92 <__kernel_rem_pio2+0x25a>
 8012d16:	2d00      	cmp	r5, #0
 8012d18:	f109 0901 	add.w	r9, r9, #1
 8012d1c:	f340 82d5 	ble.w	80132ca <__kernel_rem_pio2+0x792>
 8012d20:	2200      	movs	r2, #0
 8012d22:	4614      	mov	r4, r2
 8012d24:	a90f      	add	r1, sp, #60	; 0x3c
 8012d26:	e011      	b.n	8012d4c <__kernel_rem_pio2+0x214>
 8012d28:	2aaaaaab 	.word	0x2aaaaaab
 8012d2c:	080161a0 	.word	0x080161a0
 8012d30:	3e700000 	.word	0x3e700000
 8012d34:	41700000 	.word	0x41700000
 8012d38:	40200000 	.word	0x40200000
 8012d3c:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 8012d40:	b10b      	cbz	r3, 8012d46 <__kernel_rem_pio2+0x20e>
 8012d42:	6008      	str	r0, [r1, #0]
 8012d44:	2401      	movs	r4, #1
 8012d46:	3201      	adds	r2, #1
 8012d48:	4295      	cmp	r5, r2
 8012d4a:	dd0d      	ble.n	8012d68 <__kernel_rem_pio2+0x230>
 8012d4c:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8012d50:	2c00      	cmp	r4, #0
 8012d52:	d0f3      	beq.n	8012d3c <__kernel_rem_pio2+0x204>
 8012d54:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8012d58:	3201      	adds	r2, #1
 8012d5a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8012d5e:	4295      	cmp	r5, r2
 8012d60:	600b      	str	r3, [r1, #0]
 8012d62:	f04f 0401 	mov.w	r4, #1
 8012d66:	dcf1      	bgt.n	8012d4c <__kernel_rem_pio2+0x214>
 8012d68:	9b08      	ldr	r3, [sp, #32]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	dd0d      	ble.n	8012d8a <__kernel_rem_pio2+0x252>
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	f000 80b1 	beq.w	8012ed6 <__kernel_rem_pio2+0x39e>
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d108      	bne.n	8012d8a <__kernel_rem_pio2+0x252>
 8012d78:	1e6a      	subs	r2, r5, #1
 8012d7a:	ab10      	add	r3, sp, #64	; 0x40
 8012d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d80:	a910      	add	r1, sp, #64	; 0x40
 8012d82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012d86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012d8a:	f1b8 0f02 	cmp.w	r8, #2
 8012d8e:	f000 8081 	beq.w	8012e94 <__kernel_rem_pio2+0x35c>
 8012d92:	2200      	movs	r2, #0
 8012d94:	2300      	movs	r3, #0
 8012d96:	4630      	mov	r0, r6
 8012d98:	4639      	mov	r1, r7
 8012d9a:	f7fc f86f 	bl	800ee7c <__aeabi_dcmpeq>
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	f000 825d 	beq.w	801325e <__kernel_rem_pio2+0x726>
 8012da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012da6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8012daa:	455b      	cmp	r3, fp
 8012dac:	dc10      	bgt.n	8012dd0 <__kernel_rem_pio2+0x298>
 8012dae:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8012db2:	aa10      	add	r2, sp, #64	; 0x40
 8012db4:	3b01      	subs	r3, #1
 8012db6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012db8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f853 1904 	ldr.w	r1, [r3], #-4
 8012dc2:	4283      	cmp	r3, r0
 8012dc4:	ea42 0201 	orr.w	r2, r2, r1
 8012dc8:	d1f9      	bne.n	8012dbe <__kernel_rem_pio2+0x286>
 8012dca:	2a00      	cmp	r2, #0
 8012dcc:	f040 80b1 	bne.w	8012f32 <__kernel_rem_pio2+0x3fa>
 8012dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dd2:	aa10      	add	r2, sp, #64	; 0x40
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	f040 8273 	bne.w	80132c6 <__kernel_rem_pio2+0x78e>
 8012de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012de2:	2301      	movs	r3, #1
 8012de4:	f852 1904 	ldr.w	r1, [r2], #-4
 8012de8:	3301      	adds	r3, #1
 8012dea:	2900      	cmp	r1, #0
 8012dec:	d0fa      	beq.n	8012de4 <__kernel_rem_pio2+0x2ac>
 8012dee:	18e9      	adds	r1, r5, r3
 8012df0:	1c6a      	adds	r2, r5, #1
 8012df2:	428a      	cmp	r2, r1
 8012df4:	910b      	str	r1, [sp, #44]	; 0x2c
 8012df6:	dc4b      	bgt.n	8012e90 <__kernel_rem_pio2+0x358>
 8012df8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012dfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012dfc:	1851      	adds	r1, r2, r1
 8012dfe:	00db      	lsls	r3, r3, #3
 8012e00:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8012e04:	9305      	str	r3, [sp, #20]
 8012e06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012e08:	4405      	add	r5, r0
 8012e0a:	3901      	subs	r1, #1
 8012e0c:	00e8      	lsls	r0, r5, #3
 8012e0e:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 8012e12:	ab24      	add	r3, sp, #144	; 0x90
 8012e14:	00d2      	lsls	r2, r2, #3
 8012e16:	eb03 0b00 	add.w	fp, r3, r0
 8012e1a:	ab74      	add	r3, sp, #464	; 0x1d0
 8012e1c:	4413      	add	r3, r2
 8012e1e:	9301      	str	r3, [sp, #4]
 8012e20:	f1a2 0308 	sub.w	r3, r2, #8
 8012e24:	9006      	str	r0, [sp, #24]
 8012e26:	9307      	str	r3, [sp, #28]
 8012e28:	f04f 0900 	mov.w	r9, #0
 8012e2c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8012e30:	f7f2 f908 	bl	8005044 <__aeabi_i2d>
 8012e34:	9b02      	ldr	r3, [sp, #8]
 8012e36:	e8eb 0102 	strd	r0, r1, [fp], #8
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f04f 0600 	mov.w	r6, #0
 8012e40:	f04f 0700 	mov.w	r7, #0
 8012e44:	db1b      	blt.n	8012e7e <__kernel_rem_pio2+0x346>
 8012e46:	9b06      	ldr	r3, [sp, #24]
 8012e48:	eb03 0409 	add.w	r4, r3, r9
 8012e4c:	9b07      	ldr	r3, [sp, #28]
 8012e4e:	eb09 0803 	add.w	r8, r9, r3
 8012e52:	ab24      	add	r3, sp, #144	; 0x90
 8012e54:	441c      	add	r4, r3
 8012e56:	4498      	add	r8, r3
 8012e58:	9b04      	ldr	r3, [sp, #16]
 8012e5a:	f1a3 0508 	sub.w	r5, r3, #8
 8012e5e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8012e62:	e874 0102 	ldrd	r0, r1, [r4], #-8
 8012e66:	f7f2 f953 	bl	8005110 <__aeabi_dmul>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	4630      	mov	r0, r6
 8012e70:	4639      	mov	r1, r7
 8012e72:	f7f1 ff9b 	bl	8004dac <__adddf3>
 8012e76:	4544      	cmp	r4, r8
 8012e78:	4606      	mov	r6, r0
 8012e7a:	460f      	mov	r7, r1
 8012e7c:	d1ef      	bne.n	8012e5e <__kernel_rem_pio2+0x326>
 8012e7e:	9b01      	ldr	r3, [sp, #4]
 8012e80:	f109 0908 	add.w	r9, r9, #8
 8012e84:	e8e3 6702 	strd	r6, r7, [r3], #8
 8012e88:	9301      	str	r3, [sp, #4]
 8012e8a:	9b05      	ldr	r3, [sp, #20]
 8012e8c:	4599      	cmp	r9, r3
 8012e8e:	d1cd      	bne.n	8012e2c <__kernel_rem_pio2+0x2f4>
 8012e90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012e92:	e6cc      	b.n	8012c2e <__kernel_rem_pio2+0xf6>
 8012e94:	4632      	mov	r2, r6
 8012e96:	463b      	mov	r3, r7
 8012e98:	2000      	movs	r0, #0
 8012e9a:	49b1      	ldr	r1, [pc, #708]	; (8013160 <__kernel_rem_pio2+0x628>)
 8012e9c:	f7f1 ff84 	bl	8004da8 <__aeabi_dsub>
 8012ea0:	4606      	mov	r6, r0
 8012ea2:	460f      	mov	r7, r1
 8012ea4:	2c00      	cmp	r4, #0
 8012ea6:	f43f af74 	beq.w	8012d92 <__kernel_rem_pio2+0x25a>
 8012eaa:	9a08      	ldr	r2, [sp, #32]
 8012eac:	2000      	movs	r0, #0
 8012eae:	49ac      	ldr	r1, [pc, #688]	; (8013160 <__kernel_rem_pio2+0x628>)
 8012eb0:	f000 fbaa 	bl	8013608 <scalbn>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	460b      	mov	r3, r1
 8012eb8:	4630      	mov	r0, r6
 8012eba:	4639      	mov	r1, r7
 8012ebc:	f7f1 ff74 	bl	8004da8 <__aeabi_dsub>
 8012ec0:	4606      	mov	r6, r0
 8012ec2:	460f      	mov	r7, r1
 8012ec4:	e765      	b.n	8012d92 <__kernel_rem_pio2+0x25a>
 8012ec6:	d110      	bne.n	8012eea <__kernel_rem_pio2+0x3b2>
 8012ec8:	1e6b      	subs	r3, r5, #1
 8012eca:	aa10      	add	r2, sp, #64	; 0x40
 8012ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ed0:	ea4f 58e3 	mov.w	r8, r3, asr #23
 8012ed4:	e71c      	b.n	8012d10 <__kernel_rem_pio2+0x1d8>
 8012ed6:	1e6a      	subs	r2, r5, #1
 8012ed8:	ab10      	add	r3, sp, #64	; 0x40
 8012eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ede:	a910      	add	r1, sp, #64	; 0x40
 8012ee0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012ee4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012ee8:	e74f      	b.n	8012d8a <__kernel_rem_pio2+0x252>
 8012eea:	2200      	movs	r2, #0
 8012eec:	4b9d      	ldr	r3, [pc, #628]	; (8013164 <__kernel_rem_pio2+0x62c>)
 8012eee:	f7fb ffe3 	bl	800eeb8 <__aeabi_dcmpge>
 8012ef2:	b958      	cbnz	r0, 8012f0c <__kernel_rem_pio2+0x3d4>
 8012ef4:	4680      	mov	r8, r0
 8012ef6:	e74c      	b.n	8012d92 <__kernel_rem_pio2+0x25a>
 8012ef8:	2600      	movs	r6, #0
 8012efa:	2700      	movs	r7, #0
 8012efc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8012f00:	45da      	cmp	sl, fp
 8012f02:	f109 0908 	add.w	r9, r9, #8
 8012f06:	f47f ae63 	bne.w	8012bd0 <__kernel_rem_pio2+0x98>
 8012f0a:	e684      	b.n	8012c16 <__kernel_rem_pio2+0xde>
 8012f0c:	2d00      	cmp	r5, #0
 8012f0e:	f109 0901 	add.w	r9, r9, #1
 8012f12:	bfc8      	it	gt
 8012f14:	f04f 0802 	movgt.w	r8, #2
 8012f18:	f73f af02 	bgt.w	8012d20 <__kernel_rem_pio2+0x1e8>
 8012f1c:	4632      	mov	r2, r6
 8012f1e:	463b      	mov	r3, r7
 8012f20:	2000      	movs	r0, #0
 8012f22:	498f      	ldr	r1, [pc, #572]	; (8013160 <__kernel_rem_pio2+0x628>)
 8012f24:	f7f1 ff40 	bl	8004da8 <__aeabi_dsub>
 8012f28:	f04f 0802 	mov.w	r8, #2
 8012f2c:	4606      	mov	r6, r0
 8012f2e:	460f      	mov	r7, r1
 8012f30:	e72f      	b.n	8012d92 <__kernel_rem_pio2+0x25a>
 8012f32:	9a08      	ldr	r2, [sp, #32]
 8012f34:	ab10      	add	r3, sp, #64	; 0x40
 8012f36:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8012f3a:	3a18      	subs	r2, #24
 8012f3c:	f8cd 9014 	str.w	r9, [sp, #20]
 8012f40:	f8cd 8004 	str.w	r8, [sp, #4]
 8012f44:	9208      	str	r2, [sp, #32]
 8012f46:	b96b      	cbnz	r3, 8012f64 <__kernel_rem_pio2+0x42c>
 8012f48:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 8012f4c:	3b01      	subs	r3, #1
 8012f4e:	a910      	add	r1, sp, #64	; 0x40
 8012f50:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012f54:	f853 1904 	ldr.w	r1, [r3], #-4
 8012f58:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012f5c:	3a18      	subs	r2, #24
 8012f5e:	2900      	cmp	r1, #0
 8012f60:	d0f8      	beq.n	8012f54 <__kernel_rem_pio2+0x41c>
 8012f62:	9208      	str	r2, [sp, #32]
 8012f64:	9a08      	ldr	r2, [sp, #32]
 8012f66:	2000      	movs	r0, #0
 8012f68:	497d      	ldr	r1, [pc, #500]	; (8013160 <__kernel_rem_pio2+0x628>)
 8012f6a:	f000 fb4d 	bl	8013608 <scalbn>
 8012f6e:	f1bb 0f00 	cmp.w	fp, #0
 8012f72:	4604      	mov	r4, r0
 8012f74:	460d      	mov	r5, r1
 8012f76:	f2c0 81b8 	blt.w	80132ea <__kernel_rem_pio2+0x7b2>
 8012f7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012f7e:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
 8012f82:	aa10      	add	r2, sp, #64	; 0x40
 8012f84:	eb02 068b 	add.w	r6, r2, fp, lsl #2
 8012f88:	eb08 0903 	add.w	r9, r8, r3
 8012f8c:	9304      	str	r3, [sp, #16]
 8012f8e:	3604      	adds	r6, #4
 8012f90:	f109 0708 	add.w	r7, r9, #8
 8012f94:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 8012f98:	f7f2 f854 	bl	8005044 <__aeabi_i2d>
 8012f9c:	4622      	mov	r2, r4
 8012f9e:	462b      	mov	r3, r5
 8012fa0:	f7f2 f8b6 	bl	8005110 <__aeabi_dmul>
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8012faa:	4b6f      	ldr	r3, [pc, #444]	; (8013168 <__kernel_rem_pio2+0x630>)
 8012fac:	4620      	mov	r0, r4
 8012fae:	4629      	mov	r1, r5
 8012fb0:	f7f2 f8ae 	bl	8005110 <__aeabi_dmul>
 8012fb4:	45b8      	cmp	r8, r7
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	460d      	mov	r5, r1
 8012fba:	d1eb      	bne.n	8012f94 <__kernel_rem_pio2+0x45c>
 8012fbc:	464b      	mov	r3, r9
 8012fbe:	f8cd b018 	str.w	fp, [sp, #24]
 8012fc2:	469b      	mov	fp, r3
 8012fc4:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 8012fc8:	f8cd a008 	str.w	sl, [sp, #8]
 8012fcc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012fd0:	f04f 0900 	mov.w	r9, #0
 8012fd4:	f1ba 0f00 	cmp.w	sl, #0
 8012fd8:	f2c0 8128 	blt.w	801322c <__kernel_rem_pio2+0x6f4>
 8012fdc:	a35e      	add	r3, pc, #376	; (adr r3, 8013158 <__kernel_rem_pio2+0x620>)
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	f8df 8188 	ldr.w	r8, [pc, #392]	; 801316c <__kernel_rem_pio2+0x634>
 8012fe6:	465d      	mov	r5, fp
 8012fe8:	2600      	movs	r6, #0
 8012fea:	2700      	movs	r7, #0
 8012fec:	2400      	movs	r4, #0
 8012fee:	e003      	b.n	8012ff8 <__kernel_rem_pio2+0x4c0>
 8012ff0:	45a1      	cmp	r9, r4
 8012ff2:	db10      	blt.n	8013016 <__kernel_rem_pio2+0x4de>
 8012ff4:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8012ff8:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012ffc:	f7f2 f888 	bl	8005110 <__aeabi_dmul>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	4630      	mov	r0, r6
 8013006:	4639      	mov	r1, r7
 8013008:	f7f1 fed0 	bl	8004dac <__adddf3>
 801300c:	3401      	adds	r4, #1
 801300e:	45a2      	cmp	sl, r4
 8013010:	4606      	mov	r6, r0
 8013012:	460f      	mov	r7, r1
 8013014:	daec      	bge.n	8012ff0 <__kernel_rem_pio2+0x4b8>
 8013016:	9b02      	ldr	r3, [sp, #8]
 8013018:	f1ab 0b08 	sub.w	fp, fp, #8
 801301c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013020:	e9c3 6700 	strd	r6, r7, [r3]
 8013024:	ab72      	add	r3, sp, #456	; 0x1c8
 8013026:	455b      	cmp	r3, fp
 8013028:	f109 0901 	add.w	r9, r9, #1
 801302c:	d1d2      	bne.n	8012fd4 <__kernel_rem_pio2+0x49c>
 801302e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8013030:	f8dd b018 	ldr.w	fp, [sp, #24]
 8013034:	f8dd a008 	ldr.w	sl, [sp, #8]
 8013038:	2b03      	cmp	r3, #3
 801303a:	f200 8083 	bhi.w	8013144 <__kernel_rem_pio2+0x60c>
 801303e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013042:	00d3      	.short	0x00d3
 8013044:	00970097 	.word	0x00970097
 8013048:	0004      	.short	0x0004
 801304a:	f1bb 0f00 	cmp.w	fp, #0
 801304e:	f340 8156 	ble.w	80132fe <__kernel_rem_pio2+0x7c6>
 8013052:	9b04      	ldr	r3, [sp, #16]
 8013054:	f8cd b008 	str.w	fp, [sp, #8]
 8013058:	4453      	add	r3, sl
 801305a:	4698      	mov	r8, r3
 801305c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013060:	46d3      	mov	fp, sl
 8013062:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
 8013066:	4632      	mov	r2, r6
 8013068:	463b      	mov	r3, r7
 801306a:	4648      	mov	r0, r9
 801306c:	4651      	mov	r1, sl
 801306e:	f7f1 fe9d 	bl	8004dac <__adddf3>
 8013072:	4604      	mov	r4, r0
 8013074:	460d      	mov	r5, r1
 8013076:	4602      	mov	r2, r0
 8013078:	460b      	mov	r3, r1
 801307a:	4648      	mov	r0, r9
 801307c:	4651      	mov	r1, sl
 801307e:	f7f1 fe93 	bl	8004da8 <__aeabi_dsub>
 8013082:	4632      	mov	r2, r6
 8013084:	463b      	mov	r3, r7
 8013086:	f7f1 fe91 	bl	8004dac <__adddf3>
 801308a:	e9c8 0100 	strd	r0, r1, [r8]
 801308e:	e968 4502 	strd	r4, r5, [r8, #-8]!
 8013092:	45c3      	cmp	fp, r8
 8013094:	4626      	mov	r6, r4
 8013096:	462f      	mov	r7, r5
 8013098:	d1e3      	bne.n	8013062 <__kernel_rem_pio2+0x52a>
 801309a:	46da      	mov	sl, fp
 801309c:	f8dd b008 	ldr.w	fp, [sp, #8]
 80130a0:	f1bb 0f01 	cmp.w	fp, #1
 80130a4:	f340 812b 	ble.w	80132fe <__kernel_rem_pio2+0x7c6>
 80130a8:	9b04      	ldr	r3, [sp, #16]
 80130aa:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80130ae:	4453      	add	r3, sl
 80130b0:	4698      	mov	r8, r3
 80130b2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80130b6:	4699      	mov	r9, r3
 80130b8:	e959 3402 	ldrd	r3, r4, [r9, #-8]
 80130bc:	4630      	mov	r0, r6
 80130be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80130c2:	461a      	mov	r2, r3
 80130c4:	4639      	mov	r1, r7
 80130c6:	4623      	mov	r3, r4
 80130c8:	f7f1 fe70 	bl	8004dac <__adddf3>
 80130cc:	4604      	mov	r4, r0
 80130ce:	460d      	mov	r5, r1
 80130d0:	4602      	mov	r2, r0
 80130d2:	460b      	mov	r3, r1
 80130d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130d8:	f7f1 fe66 	bl	8004da8 <__aeabi_dsub>
 80130dc:	4632      	mov	r2, r6
 80130de:	463b      	mov	r3, r7
 80130e0:	f7f1 fe64 	bl	8004dac <__adddf3>
 80130e4:	e9c9 0100 	strd	r0, r1, [r9]
 80130e8:	e969 4502 	strd	r4, r5, [r9, #-8]!
 80130ec:	45cb      	cmp	fp, r9
 80130ee:	4626      	mov	r6, r4
 80130f0:	462f      	mov	r7, r5
 80130f2:	d1e1      	bne.n	80130b8 <__kernel_rem_pio2+0x580>
 80130f4:	2300      	movs	r3, #0
 80130f6:	461d      	mov	r5, r3
 80130f8:	f108 0808 	add.w	r8, r8, #8
 80130fc:	ac50      	add	r4, sp, #320	; 0x140
 80130fe:	4618      	mov	r0, r3
 8013100:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8013104:	4629      	mov	r1, r5
 8013106:	f7f1 fe51 	bl	8004dac <__adddf3>
 801310a:	4544      	cmp	r4, r8
 801310c:	4603      	mov	r3, r0
 801310e:	460d      	mov	r5, r1
 8013110:	d1f5      	bne.n	80130fe <__kernel_rem_pio2+0x5c6>
 8013112:	9a01      	ldr	r2, [sp, #4]
 8013114:	2a00      	cmp	r2, #0
 8013116:	f000 80da 	beq.w	80132ce <__kernel_rem_pio2+0x796>
 801311a:	f8da 4004 	ldr.w	r4, [sl, #4]
 801311e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8013122:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013124:	f8da 1000 	ldr.w	r1, [sl]
 8013128:	f8da 0008 	ldr.w	r0, [sl, #8]
 801312c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8013130:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8013134:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8013138:	617d      	str	r5, [r7, #20]
 801313a:	613b      	str	r3, [r7, #16]
 801313c:	607c      	str	r4, [r7, #4]
 801313e:	60fa      	str	r2, [r7, #12]
 8013140:	6039      	str	r1, [r7, #0]
 8013142:	60b8      	str	r0, [r7, #8]
 8013144:	9b05      	ldr	r3, [sp, #20]
 8013146:	f003 0007 	and.w	r0, r3, #7
 801314a:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 801314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013152:	bf00      	nop
 8013154:	f3af 8000 	nop.w
 8013158:	40000000 	.word	0x40000000
 801315c:	3ff921fb 	.word	0x3ff921fb
 8013160:	3ff00000 	.word	0x3ff00000
 8013164:	3fe00000 	.word	0x3fe00000
 8013168:	3e700000 	.word	0x3e700000
 801316c:	080161b0 	.word	0x080161b0
 8013170:	2400      	movs	r4, #0
 8013172:	4621      	mov	r1, r4
 8013174:	9d04      	ldr	r5, [sp, #16]
 8013176:	3508      	adds	r5, #8
 8013178:	4455      	add	r5, sl
 801317a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801317e:	4620      	mov	r0, r4
 8013180:	f7f1 fe14 	bl	8004dac <__adddf3>
 8013184:	4555      	cmp	r5, sl
 8013186:	4604      	mov	r4, r0
 8013188:	d1f7      	bne.n	801317a <__kernel_rem_pio2+0x642>
 801318a:	9b01      	ldr	r3, [sp, #4]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d050      	beq.n	8013232 <__kernel_rem_pio2+0x6fa>
 8013190:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013192:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8013196:	460b      	mov	r3, r1
 8013198:	e9da 0100 	ldrd	r0, r1, [sl]
 801319c:	e887 0030 	stmia.w	r7, {r4, r5}
 80131a0:	4622      	mov	r2, r4
 80131a2:	f7f1 fe01 	bl	8004da8 <__aeabi_dsub>
 80131a6:	f1bb 0f00 	cmp.w	fp, #0
 80131aa:	4603      	mov	r3, r0
 80131ac:	460d      	mov	r5, r1
 80131ae:	dd0d      	ble.n	80131cc <__kernel_rem_pio2+0x694>
 80131b0:	2401      	movs	r4, #1
 80131b2:	4618      	mov	r0, r3
 80131b4:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 80131b8:	4629      	mov	r1, r5
 80131ba:	f7f1 fdf7 	bl	8004dac <__adddf3>
 80131be:	3401      	adds	r4, #1
 80131c0:	45a3      	cmp	fp, r4
 80131c2:	4603      	mov	r3, r0
 80131c4:	460d      	mov	r5, r1
 80131c6:	daf4      	bge.n	80131b2 <__kernel_rem_pio2+0x67a>
 80131c8:	9a01      	ldr	r2, [sp, #4]
 80131ca:	b10a      	cbz	r2, 80131d0 <__kernel_rem_pio2+0x698>
 80131cc:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80131d0:	4618      	mov	r0, r3
 80131d2:	4629      	mov	r1, r5
 80131d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131d6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80131da:	9b05      	ldr	r3, [sp, #20]
 80131dc:	f003 0007 	and.w	r0, r3, #7
 80131e0:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80131e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e8:	2300      	movs	r3, #0
 80131ea:	461c      	mov	r4, r3
 80131ec:	9a04      	ldr	r2, [sp, #16]
 80131ee:	3208      	adds	r2, #8
 80131f0:	4492      	add	sl, r2
 80131f2:	4618      	mov	r0, r3
 80131f4:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80131f8:	4621      	mov	r1, r4
 80131fa:	f7f1 fdd7 	bl	8004dac <__adddf3>
 80131fe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013202:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8013206:	4603      	mov	r3, r0
 8013208:	460c      	mov	r4, r1
 801320a:	d1f2      	bne.n	80131f2 <__kernel_rem_pio2+0x6ba>
 801320c:	9a01      	ldr	r2, [sp, #4]
 801320e:	b10a      	cbz	r2, 8013214 <__kernel_rem_pio2+0x6dc>
 8013210:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8013214:	4618      	mov	r0, r3
 8013216:	4621      	mov	r1, r4
 8013218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801321a:	e9c3 0100 	strd	r0, r1, [r3]
 801321e:	9b05      	ldr	r3, [sp, #20]
 8013220:	f003 0007 	and.w	r0, r3, #7
 8013224:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 8013228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801322c:	2600      	movs	r6, #0
 801322e:	2700      	movs	r7, #0
 8013230:	e6f1      	b.n	8013016 <__kernel_rem_pio2+0x4de>
 8013232:	4626      	mov	r6, r4
 8013234:	460f      	mov	r7, r1
 8013236:	4622      	mov	r2, r4
 8013238:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801323a:	460b      	mov	r3, r1
 801323c:	e9da 0100 	ldrd	r0, r1, [sl]
 8013240:	e9c4 6700 	strd	r6, r7, [r4]
 8013244:	f7f1 fdb0 	bl	8004da8 <__aeabi_dsub>
 8013248:	f1bb 0f00 	cmp.w	fp, #0
 801324c:	4603      	mov	r3, r0
 801324e:	460d      	mov	r5, r1
 8013250:	dcae      	bgt.n	80131b0 <__kernel_rem_pio2+0x678>
 8013252:	4618      	mov	r0, r3
 8013254:	4629      	mov	r1, r5
 8013256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013258:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801325c:	e7bd      	b.n	80131da <__kernel_rem_pio2+0x6a2>
 801325e:	9b08      	ldr	r3, [sp, #32]
 8013260:	4630      	mov	r0, r6
 8013262:	425a      	negs	r2, r3
 8013264:	4639      	mov	r1, r7
 8013266:	f8cd 9014 	str.w	r9, [sp, #20]
 801326a:	f8cd 8004 	str.w	r8, [sp, #4]
 801326e:	f000 f9cb 	bl	8013608 <scalbn>
 8013272:	2200      	movs	r2, #0
 8013274:	4b2c      	ldr	r3, [pc, #176]	; (8013328 <__kernel_rem_pio2+0x7f0>)
 8013276:	4606      	mov	r6, r0
 8013278:	460f      	mov	r7, r1
 801327a:	f7fb fe1d 	bl	800eeb8 <__aeabi_dcmpge>
 801327e:	2800      	cmp	r0, #0
 8013280:	d040      	beq.n	8013304 <__kernel_rem_pio2+0x7cc>
 8013282:	2200      	movs	r2, #0
 8013284:	4b29      	ldr	r3, [pc, #164]	; (801332c <__kernel_rem_pio2+0x7f4>)
 8013286:	4630      	mov	r0, r6
 8013288:	4639      	mov	r1, r7
 801328a:	f7f1 ff41 	bl	8005110 <__aeabi_dmul>
 801328e:	f7f2 f951 	bl	8005534 <__aeabi_d2iz>
 8013292:	4604      	mov	r4, r0
 8013294:	f7f1 fed6 	bl	8005044 <__aeabi_i2d>
 8013298:	2200      	movs	r2, #0
 801329a:	4b23      	ldr	r3, [pc, #140]	; (8013328 <__kernel_rem_pio2+0x7f0>)
 801329c:	f7f1 ff38 	bl	8005110 <__aeabi_dmul>
 80132a0:	460b      	mov	r3, r1
 80132a2:	4602      	mov	r2, r0
 80132a4:	4639      	mov	r1, r7
 80132a6:	4630      	mov	r0, r6
 80132a8:	f7f1 fd7e 	bl	8004da8 <__aeabi_dsub>
 80132ac:	f7f2 f942 	bl	8005534 <__aeabi_d2iz>
 80132b0:	9b08      	ldr	r3, [sp, #32]
 80132b2:	f105 0b01 	add.w	fp, r5, #1
 80132b6:	3318      	adds	r3, #24
 80132b8:	9308      	str	r3, [sp, #32]
 80132ba:	ab10      	add	r3, sp, #64	; 0x40
 80132bc:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80132c0:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
 80132c4:	e64e      	b.n	8012f64 <__kernel_rem_pio2+0x42c>
 80132c6:	2301      	movs	r3, #1
 80132c8:	e591      	b.n	8012dee <__kernel_rem_pio2+0x2b6>
 80132ca:	2400      	movs	r4, #0
 80132cc:	e54c      	b.n	8012d68 <__kernel_rem_pio2+0x230>
 80132ce:	4618      	mov	r0, r3
 80132d0:	e9da 6700 	ldrd	r6, r7, [sl]
 80132d4:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80132d8:	4629      	mov	r1, r5
 80132da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80132dc:	e9c5 6700 	strd	r6, r7, [r5]
 80132e0:	e9c5 0104 	strd	r0, r1, [r5, #16]
 80132e4:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80132e8:	e72c      	b.n	8013144 <__kernel_rem_pio2+0x60c>
 80132ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80132ec:	2b03      	cmp	r3, #3
 80132ee:	f63f af29 	bhi.w	8013144 <__kernel_rem_pio2+0x60c>
 80132f2:	e8df f003 	tbb	[pc, r3]
 80132f6:	1015      	.short	0x1015
 80132f8:	0210      	.short	0x0210
 80132fa:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80132fe:	2300      	movs	r3, #0
 8013300:	461d      	mov	r5, r3
 8013302:	e706      	b.n	8013112 <__kernel_rem_pio2+0x5da>
 8013304:	4630      	mov	r0, r6
 8013306:	4639      	mov	r1, r7
 8013308:	f7f2 f914 	bl	8005534 <__aeabi_d2iz>
 801330c:	ab10      	add	r3, sp, #64	; 0x40
 801330e:	46ab      	mov	fp, r5
 8013310:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013314:	e626      	b.n	8012f64 <__kernel_rem_pio2+0x42c>
 8013316:	2400      	movs	r4, #0
 8013318:	4621      	mov	r1, r4
 801331a:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 801331e:	e734      	b.n	801318a <__kernel_rem_pio2+0x652>
 8013320:	2300      	movs	r3, #0
 8013322:	461c      	mov	r4, r3
 8013324:	e772      	b.n	801320c <__kernel_rem_pio2+0x6d4>
 8013326:	bf00      	nop
 8013328:	41700000 	.word	0x41700000
 801332c:	3e700000 	.word	0x3e700000

08013330 <__kernel_sin>:
 8013330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013334:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013338:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 801333c:	b085      	sub	sp, #20
 801333e:	460c      	mov	r4, r1
 8013340:	4690      	mov	r8, r2
 8013342:	4699      	mov	r9, r3
 8013344:	4605      	mov	r5, r0
 8013346:	da04      	bge.n	8013352 <__kernel_sin+0x22>
 8013348:	f7f2 f8f4 	bl	8005534 <__aeabi_d2iz>
 801334c:	2800      	cmp	r0, #0
 801334e:	f000 8085 	beq.w	801345c <__kernel_sin+0x12c>
 8013352:	462a      	mov	r2, r5
 8013354:	4623      	mov	r3, r4
 8013356:	4628      	mov	r0, r5
 8013358:	4621      	mov	r1, r4
 801335a:	f7f1 fed9 	bl	8005110 <__aeabi_dmul>
 801335e:	4606      	mov	r6, r0
 8013360:	460f      	mov	r7, r1
 8013362:	4602      	mov	r2, r0
 8013364:	460b      	mov	r3, r1
 8013366:	4628      	mov	r0, r5
 8013368:	4621      	mov	r1, r4
 801336a:	f7f1 fed1 	bl	8005110 <__aeabi_dmul>
 801336e:	a33e      	add	r3, pc, #248	; (adr r3, 8013468 <__kernel_sin+0x138>)
 8013370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013374:	4682      	mov	sl, r0
 8013376:	468b      	mov	fp, r1
 8013378:	4630      	mov	r0, r6
 801337a:	4639      	mov	r1, r7
 801337c:	f7f1 fec8 	bl	8005110 <__aeabi_dmul>
 8013380:	a33b      	add	r3, pc, #236	; (adr r3, 8013470 <__kernel_sin+0x140>)
 8013382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013386:	f7f1 fd0f 	bl	8004da8 <__aeabi_dsub>
 801338a:	4632      	mov	r2, r6
 801338c:	463b      	mov	r3, r7
 801338e:	f7f1 febf 	bl	8005110 <__aeabi_dmul>
 8013392:	a339      	add	r3, pc, #228	; (adr r3, 8013478 <__kernel_sin+0x148>)
 8013394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013398:	f7f1 fd08 	bl	8004dac <__adddf3>
 801339c:	4632      	mov	r2, r6
 801339e:	463b      	mov	r3, r7
 80133a0:	f7f1 feb6 	bl	8005110 <__aeabi_dmul>
 80133a4:	a336      	add	r3, pc, #216	; (adr r3, 8013480 <__kernel_sin+0x150>)
 80133a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133aa:	f7f1 fcfd 	bl	8004da8 <__aeabi_dsub>
 80133ae:	4632      	mov	r2, r6
 80133b0:	463b      	mov	r3, r7
 80133b2:	f7f1 fead 	bl	8005110 <__aeabi_dmul>
 80133b6:	a334      	add	r3, pc, #208	; (adr r3, 8013488 <__kernel_sin+0x158>)
 80133b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133bc:	f7f1 fcf6 	bl	8004dac <__adddf3>
 80133c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133c2:	e9cd 0100 	strd	r0, r1, [sp]
 80133c6:	b39b      	cbz	r3, 8013430 <__kernel_sin+0x100>
 80133c8:	2200      	movs	r2, #0
 80133ca:	4b33      	ldr	r3, [pc, #204]	; (8013498 <__kernel_sin+0x168>)
 80133cc:	4640      	mov	r0, r8
 80133ce:	4649      	mov	r1, r9
 80133d0:	f7f1 fe9e 	bl	8005110 <__aeabi_dmul>
 80133d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80133d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80133dc:	4650      	mov	r0, sl
 80133de:	4659      	mov	r1, fp
 80133e0:	f7f1 fe96 	bl	8005110 <__aeabi_dmul>
 80133e4:	4602      	mov	r2, r0
 80133e6:	460b      	mov	r3, r1
 80133e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133ec:	f7f1 fcdc 	bl	8004da8 <__aeabi_dsub>
 80133f0:	4632      	mov	r2, r6
 80133f2:	463b      	mov	r3, r7
 80133f4:	f7f1 fe8c 	bl	8005110 <__aeabi_dmul>
 80133f8:	4642      	mov	r2, r8
 80133fa:	464b      	mov	r3, r9
 80133fc:	f7f1 fcd4 	bl	8004da8 <__aeabi_dsub>
 8013400:	a323      	add	r3, pc, #140	; (adr r3, 8013490 <__kernel_sin+0x160>)
 8013402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013406:	4606      	mov	r6, r0
 8013408:	460f      	mov	r7, r1
 801340a:	4650      	mov	r0, sl
 801340c:	4659      	mov	r1, fp
 801340e:	f7f1 fe7f 	bl	8005110 <__aeabi_dmul>
 8013412:	4602      	mov	r2, r0
 8013414:	460b      	mov	r3, r1
 8013416:	4630      	mov	r0, r6
 8013418:	4639      	mov	r1, r7
 801341a:	f7f1 fcc7 	bl	8004dac <__adddf3>
 801341e:	4602      	mov	r2, r0
 8013420:	460b      	mov	r3, r1
 8013422:	4628      	mov	r0, r5
 8013424:	4621      	mov	r1, r4
 8013426:	f7f1 fcbf 	bl	8004da8 <__aeabi_dsub>
 801342a:	b005      	add	sp, #20
 801342c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013430:	4602      	mov	r2, r0
 8013432:	460b      	mov	r3, r1
 8013434:	4630      	mov	r0, r6
 8013436:	4639      	mov	r1, r7
 8013438:	f7f1 fe6a 	bl	8005110 <__aeabi_dmul>
 801343c:	a314      	add	r3, pc, #80	; (adr r3, 8013490 <__kernel_sin+0x160>)
 801343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013442:	f7f1 fcb1 	bl	8004da8 <__aeabi_dsub>
 8013446:	4652      	mov	r2, sl
 8013448:	465b      	mov	r3, fp
 801344a:	f7f1 fe61 	bl	8005110 <__aeabi_dmul>
 801344e:	462a      	mov	r2, r5
 8013450:	4623      	mov	r3, r4
 8013452:	f7f1 fcab 	bl	8004dac <__adddf3>
 8013456:	b005      	add	sp, #20
 8013458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801345c:	4628      	mov	r0, r5
 801345e:	4621      	mov	r1, r4
 8013460:	b005      	add	sp, #20
 8013462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013466:	bf00      	nop
 8013468:	5acfd57c 	.word	0x5acfd57c
 801346c:	3de5d93a 	.word	0x3de5d93a
 8013470:	8a2b9ceb 	.word	0x8a2b9ceb
 8013474:	3e5ae5e6 	.word	0x3e5ae5e6
 8013478:	57b1fe7d 	.word	0x57b1fe7d
 801347c:	3ec71de3 	.word	0x3ec71de3
 8013480:	19c161d5 	.word	0x19c161d5
 8013484:	3f2a01a0 	.word	0x3f2a01a0
 8013488:	1110f8a6 	.word	0x1110f8a6
 801348c:	3f811111 	.word	0x3f811111
 8013490:	55555549 	.word	0x55555549
 8013494:	3fc55555 	.word	0x3fc55555
 8013498:	3fe00000 	.word	0x3fe00000
 801349c:	00000000 	.word	0x00000000

080134a0 <floor>:
 80134a0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80134a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134a8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80134ac:	2e13      	cmp	r6, #19
 80134ae:	460b      	mov	r3, r1
 80134b0:	4604      	mov	r4, r0
 80134b2:	460d      	mov	r5, r1
 80134b4:	4688      	mov	r8, r1
 80134b6:	4607      	mov	r7, r0
 80134b8:	dc1c      	bgt.n	80134f4 <floor+0x54>
 80134ba:	2e00      	cmp	r6, #0
 80134bc:	db3f      	blt.n	801353e <floor+0x9e>
 80134be:	4a3a      	ldr	r2, [pc, #232]	; (80135a8 <floor+0x108>)
 80134c0:	4686      	mov	lr, r0
 80134c2:	fa42 f906 	asr.w	r9, r2, r6
 80134c6:	ea01 0209 	and.w	r2, r1, r9
 80134ca:	4302      	orrs	r2, r0
 80134cc:	d017      	beq.n	80134fe <floor+0x5e>
 80134ce:	a334      	add	r3, pc, #208	; (adr r3, 80135a0 <floor+0x100>)
 80134d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d4:	f7f1 fc6a 	bl	8004dac <__adddf3>
 80134d8:	2200      	movs	r2, #0
 80134da:	2300      	movs	r3, #0
 80134dc:	f7fb fcf6 	bl	800eecc <__aeabi_dcmpgt>
 80134e0:	b120      	cbz	r0, 80134ec <floor+0x4c>
 80134e2:	2d00      	cmp	r5, #0
 80134e4:	db40      	blt.n	8013568 <floor+0xc8>
 80134e6:	ea28 0509 	bic.w	r5, r8, r9
 80134ea:	2700      	movs	r7, #0
 80134ec:	4638      	mov	r0, r7
 80134ee:	4629      	mov	r1, r5
 80134f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134f4:	2e33      	cmp	r6, #51	; 0x33
 80134f6:	dd06      	ble.n	8013506 <floor+0x66>
 80134f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80134fc:	d02f      	beq.n	801355e <floor+0xbe>
 80134fe:	4620      	mov	r0, r4
 8013500:	4619      	mov	r1, r3
 8013502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013506:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801350a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801350e:	fa29 f902 	lsr.w	r9, r9, r2
 8013512:	ea10 0f09 	tst.w	r0, r9
 8013516:	d0f2      	beq.n	80134fe <floor+0x5e>
 8013518:	a321      	add	r3, pc, #132	; (adr r3, 80135a0 <floor+0x100>)
 801351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351e:	f7f1 fc45 	bl	8004dac <__adddf3>
 8013522:	2200      	movs	r2, #0
 8013524:	2300      	movs	r3, #0
 8013526:	f7fb fcd1 	bl	800eecc <__aeabi_dcmpgt>
 801352a:	2800      	cmp	r0, #0
 801352c:	d0de      	beq.n	80134ec <floor+0x4c>
 801352e:	2d00      	cmp	r5, #0
 8013530:	db20      	blt.n	8013574 <floor+0xd4>
 8013532:	4645      	mov	r5, r8
 8013534:	ea27 0709 	bic.w	r7, r7, r9
 8013538:	4638      	mov	r0, r7
 801353a:	4629      	mov	r1, r5
 801353c:	e7d8      	b.n	80134f0 <floor+0x50>
 801353e:	a318      	add	r3, pc, #96	; (adr r3, 80135a0 <floor+0x100>)
 8013540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013544:	f7f1 fc32 	bl	8004dac <__adddf3>
 8013548:	2200      	movs	r2, #0
 801354a:	2300      	movs	r3, #0
 801354c:	f7fb fcbe 	bl	800eecc <__aeabi_dcmpgt>
 8013550:	2800      	cmp	r0, #0
 8013552:	d0cb      	beq.n	80134ec <floor+0x4c>
 8013554:	2d00      	cmp	r5, #0
 8013556:	db18      	blt.n	801358a <floor+0xea>
 8013558:	2700      	movs	r7, #0
 801355a:	463d      	mov	r5, r7
 801355c:	e7c6      	b.n	80134ec <floor+0x4c>
 801355e:	4602      	mov	r2, r0
 8013560:	460b      	mov	r3, r1
 8013562:	f7f1 fc23 	bl	8004dac <__adddf3>
 8013566:	e7cc      	b.n	8013502 <floor+0x62>
 8013568:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801356c:	fa43 f606 	asr.w	r6, r3, r6
 8013570:	44b0      	add	r8, r6
 8013572:	e7b8      	b.n	80134e6 <floor+0x46>
 8013574:	2e14      	cmp	r6, #20
 8013576:	d010      	beq.n	801359a <floor+0xfa>
 8013578:	2301      	movs	r3, #1
 801357a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801357e:	fa03 f606 	lsl.w	r6, r3, r6
 8013582:	1937      	adds	r7, r6, r4
 8013584:	bf28      	it	cs
 8013586:	4498      	addcs	r8, r3
 8013588:	e7d3      	b.n	8013532 <floor+0x92>
 801358a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801358e:	4b07      	ldr	r3, [pc, #28]	; (80135ac <floor+0x10c>)
 8013590:	4322      	orrs	r2, r4
 8013592:	bf18      	it	ne
 8013594:	461d      	movne	r5, r3
 8013596:	2700      	movs	r7, #0
 8013598:	e7a8      	b.n	80134ec <floor+0x4c>
 801359a:	f105 0801 	add.w	r8, r5, #1
 801359e:	e7c8      	b.n	8013532 <floor+0x92>
 80135a0:	8800759c 	.word	0x8800759c
 80135a4:	7e37e43c 	.word	0x7e37e43c
 80135a8:	000fffff 	.word	0x000fffff
 80135ac:	bff00000 	.word	0xbff00000

080135b0 <__fpclassifyd>:
 80135b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80135b4:	b410      	push	{r4}
 80135b6:	d007      	beq.n	80135c8 <__fpclassifyd+0x18>
 80135b8:	4a10      	ldr	r2, [pc, #64]	; (80135fc <__fpclassifyd+0x4c>)
 80135ba:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 80135be:	4294      	cmp	r4, r2
 80135c0:	d806      	bhi.n	80135d0 <__fpclassifyd+0x20>
 80135c2:	2004      	movs	r0, #4
 80135c4:	bc10      	pop	{r4}
 80135c6:	4770      	bx	lr
 80135c8:	b910      	cbnz	r0, 80135d0 <__fpclassifyd+0x20>
 80135ca:	2002      	movs	r0, #2
 80135cc:	bc10      	pop	{r4}
 80135ce:	4770      	bx	lr
 80135d0:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 80135d4:	4a09      	ldr	r2, [pc, #36]	; (80135fc <__fpclassifyd+0x4c>)
 80135d6:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 80135da:	4291      	cmp	r1, r2
 80135dc:	d9f1      	bls.n	80135c2 <__fpclassifyd+0x12>
 80135de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135e2:	d201      	bcs.n	80135e8 <__fpclassifyd+0x38>
 80135e4:	2003      	movs	r0, #3
 80135e6:	e7ed      	b.n	80135c4 <__fpclassifyd+0x14>
 80135e8:	4a05      	ldr	r2, [pc, #20]	; (8013600 <__fpclassifyd+0x50>)
 80135ea:	4293      	cmp	r3, r2
 80135ec:	d001      	beq.n	80135f2 <__fpclassifyd+0x42>
 80135ee:	2000      	movs	r0, #0
 80135f0:	e7e8      	b.n	80135c4 <__fpclassifyd+0x14>
 80135f2:	fab0 f080 	clz	r0, r0
 80135f6:	0940      	lsrs	r0, r0, #5
 80135f8:	e7e4      	b.n	80135c4 <__fpclassifyd+0x14>
 80135fa:	bf00      	nop
 80135fc:	7fdfffff 	.word	0x7fdfffff
 8013600:	7ff00000 	.word	0x7ff00000

08013604 <matherr>:
 8013604:	2000      	movs	r0, #0
 8013606:	4770      	bx	lr

08013608 <scalbn>:
 8013608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801360a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 801360e:	4604      	mov	r4, r0
 8013610:	460d      	mov	r5, r1
 8013612:	460b      	mov	r3, r1
 8013614:	4617      	mov	r7, r2
 8013616:	bb06      	cbnz	r6, 801365a <scalbn+0x52>
 8013618:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801361c:	4303      	orrs	r3, r0
 801361e:	d025      	beq.n	801366c <scalbn+0x64>
 8013620:	2200      	movs	r2, #0
 8013622:	4b2f      	ldr	r3, [pc, #188]	; (80136e0 <scalbn+0xd8>)
 8013624:	f7f1 fd74 	bl	8005110 <__aeabi_dmul>
 8013628:	4a2e      	ldr	r2, [pc, #184]	; (80136e4 <scalbn+0xdc>)
 801362a:	4604      	mov	r4, r0
 801362c:	4297      	cmp	r7, r2
 801362e:	460d      	mov	r5, r1
 8013630:	460b      	mov	r3, r1
 8013632:	db2a      	blt.n	801368a <scalbn+0x82>
 8013634:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8013638:	3e36      	subs	r6, #54	; 0x36
 801363a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 801363e:	443e      	add	r6, r7
 8013640:	4296      	cmp	r6, r2
 8013642:	dc28      	bgt.n	8013696 <scalbn+0x8e>
 8013644:	2e00      	cmp	r6, #0
 8013646:	dd12      	ble.n	801366e <scalbn+0x66>
 8013648:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801364c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013650:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8013654:	4620      	mov	r0, r4
 8013656:	4629      	mov	r1, r5
 8013658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801365a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801365e:	4296      	cmp	r6, r2
 8013660:	d1eb      	bne.n	801363a <scalbn+0x32>
 8013662:	4602      	mov	r2, r0
 8013664:	460b      	mov	r3, r1
 8013666:	f7f1 fba1 	bl	8004dac <__adddf3>
 801366a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801366e:	f116 0f35 	cmn.w	r6, #53	; 0x35
 8013672:	da1d      	bge.n	80136b0 <scalbn+0xa8>
 8013674:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013678:	429f      	cmp	r7, r3
 801367a:	dc0c      	bgt.n	8013696 <scalbn+0x8e>
 801367c:	a114      	add	r1, pc, #80	; (adr r1, 80136d0 <scalbn+0xc8>)
 801367e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013682:	4622      	mov	r2, r4
 8013684:	462b      	mov	r3, r5
 8013686:	f000 f831 	bl	80136ec <copysign>
 801368a:	a311      	add	r3, pc, #68	; (adr r3, 80136d0 <scalbn+0xc8>)
 801368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013690:	f7f1 fd3e 	bl	8005110 <__aeabi_dmul>
 8013694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013696:	4622      	mov	r2, r4
 8013698:	a10f      	add	r1, pc, #60	; (adr r1, 80136d8 <scalbn+0xd0>)
 801369a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801369e:	462b      	mov	r3, r5
 80136a0:	f000 f824 	bl	80136ec <copysign>
 80136a4:	a30c      	add	r3, pc, #48	; (adr r3, 80136d8 <scalbn+0xd0>)
 80136a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136aa:	f7f1 fd31 	bl	8005110 <__aeabi_dmul>
 80136ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80136b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80136b8:	3636      	adds	r6, #54	; 0x36
 80136ba:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80136be:	4620      	mov	r0, r4
 80136c0:	4629      	mov	r1, r5
 80136c2:	2200      	movs	r2, #0
 80136c4:	4b08      	ldr	r3, [pc, #32]	; (80136e8 <scalbn+0xe0>)
 80136c6:	f7f1 fd23 	bl	8005110 <__aeabi_dmul>
 80136ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136cc:	f3af 8000 	nop.w
 80136d0:	c2f8f359 	.word	0xc2f8f359
 80136d4:	01a56e1f 	.word	0x01a56e1f
 80136d8:	8800759c 	.word	0x8800759c
 80136dc:	7e37e43c 	.word	0x7e37e43c
 80136e0:	43500000 	.word	0x43500000
 80136e4:	ffff3cb0 	.word	0xffff3cb0
 80136e8:	3c900000 	.word	0x3c900000

080136ec <copysign>:
 80136ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80136f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80136f4:	ea42 0103 	orr.w	r1, r2, r3
 80136f8:	4770      	bx	lr
 80136fa:	bf00      	nop

080136fc <__errno>:
 80136fc:	4b01      	ldr	r3, [pc, #4]	; (8013704 <__errno+0x8>)
 80136fe:	6818      	ldr	r0, [r3, #0]
 8013700:	4770      	bx	lr
 8013702:	bf00      	nop
 8013704:	2000019c 	.word	0x2000019c

08013708 <__fp_unlock>:
 8013708:	2000      	movs	r0, #0
 801370a:	4770      	bx	lr

0801370c <_cleanup_r>:
 801370c:	4901      	ldr	r1, [pc, #4]	; (8013714 <_cleanup_r+0x8>)
 801370e:	f000 b941 	b.w	8013994 <_fwalk_reent>
 8013712:	bf00      	nop
 8013714:	08013e41 	.word	0x08013e41

08013718 <std.isra.0>:
 8013718:	b510      	push	{r4, lr}
 801371a:	4604      	mov	r4, r0
 801371c:	2300      	movs	r3, #0
 801371e:	6003      	str	r3, [r0, #0]
 8013720:	6043      	str	r3, [r0, #4]
 8013722:	6083      	str	r3, [r0, #8]
 8013724:	8181      	strh	r1, [r0, #12]
 8013726:	6643      	str	r3, [r0, #100]	; 0x64
 8013728:	81c2      	strh	r2, [r0, #14]
 801372a:	6103      	str	r3, [r0, #16]
 801372c:	6143      	str	r3, [r0, #20]
 801372e:	6183      	str	r3, [r0, #24]
 8013730:	4619      	mov	r1, r3
 8013732:	2208      	movs	r2, #8
 8013734:	305c      	adds	r0, #92	; 0x5c
 8013736:	f7fd f874 	bl	8010822 <memset>
 801373a:	4b05      	ldr	r3, [pc, #20]	; (8013750 <std.isra.0+0x38>)
 801373c:	6224      	str	r4, [r4, #32]
 801373e:	6263      	str	r3, [r4, #36]	; 0x24
 8013740:	4b04      	ldr	r3, [pc, #16]	; (8013754 <std.isra.0+0x3c>)
 8013742:	62a3      	str	r3, [r4, #40]	; 0x28
 8013744:	4b04      	ldr	r3, [pc, #16]	; (8013758 <std.isra.0+0x40>)
 8013746:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013748:	4b04      	ldr	r3, [pc, #16]	; (801375c <std.isra.0+0x44>)
 801374a:	6323      	str	r3, [r4, #48]	; 0x30
 801374c:	bd10      	pop	{r4, pc}
 801374e:	bf00      	nop
 8013750:	08013a99 	.word	0x08013a99
 8013754:	08013abf 	.word	0x08013abf
 8013758:	08013af7 	.word	0x08013af7
 801375c:	08013b1b 	.word	0x08013b1b

08013760 <__fp_lock>:
 8013760:	2000      	movs	r0, #0
 8013762:	4770      	bx	lr

08013764 <__sfmoreglue>:
 8013764:	b570      	push	{r4, r5, r6, lr}
 8013766:	2368      	movs	r3, #104	; 0x68
 8013768:	1e4d      	subs	r5, r1, #1
 801376a:	435d      	muls	r5, r3
 801376c:	460e      	mov	r6, r1
 801376e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013772:	f7fd f917 	bl	80109a4 <_malloc_r>
 8013776:	4604      	mov	r4, r0
 8013778:	b140      	cbz	r0, 801378c <__sfmoreglue+0x28>
 801377a:	2100      	movs	r1, #0
 801377c:	e880 0042 	stmia.w	r0, {r1, r6}
 8013780:	300c      	adds	r0, #12
 8013782:	60a0      	str	r0, [r4, #8]
 8013784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013788:	f7fd f84b 	bl	8010822 <memset>
 801378c:	4620      	mov	r0, r4
 801378e:	bd70      	pop	{r4, r5, r6, pc}

08013790 <_cleanup>:
 8013790:	4b01      	ldr	r3, [pc, #4]	; (8013798 <_cleanup+0x8>)
 8013792:	6818      	ldr	r0, [r3, #0]
 8013794:	f7ff bfba 	b.w	801370c <_cleanup_r>
 8013798:	08015528 	.word	0x08015528

0801379c <__sinit>:
 801379c:	6983      	ldr	r3, [r0, #24]
 801379e:	b510      	push	{r4, lr}
 80137a0:	4604      	mov	r4, r0
 80137a2:	bb33      	cbnz	r3, 80137f2 <__sinit+0x56>
 80137a4:	6483      	str	r3, [r0, #72]	; 0x48
 80137a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80137a8:	6503      	str	r3, [r0, #80]	; 0x50
 80137aa:	4b12      	ldr	r3, [pc, #72]	; (80137f4 <__sinit+0x58>)
 80137ac:	4a12      	ldr	r2, [pc, #72]	; (80137f8 <__sinit+0x5c>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	6282      	str	r2, [r0, #40]	; 0x28
 80137b2:	4298      	cmp	r0, r3
 80137b4:	bf04      	itt	eq
 80137b6:	2301      	moveq	r3, #1
 80137b8:	6183      	streq	r3, [r0, #24]
 80137ba:	f000 f81f 	bl	80137fc <__sfp>
 80137be:	6060      	str	r0, [r4, #4]
 80137c0:	4620      	mov	r0, r4
 80137c2:	f000 f81b 	bl	80137fc <__sfp>
 80137c6:	60a0      	str	r0, [r4, #8]
 80137c8:	4620      	mov	r0, r4
 80137ca:	f000 f817 	bl	80137fc <__sfp>
 80137ce:	2200      	movs	r2, #0
 80137d0:	60e0      	str	r0, [r4, #12]
 80137d2:	2104      	movs	r1, #4
 80137d4:	6860      	ldr	r0, [r4, #4]
 80137d6:	f7ff ff9f 	bl	8013718 <std.isra.0>
 80137da:	2201      	movs	r2, #1
 80137dc:	2109      	movs	r1, #9
 80137de:	68a0      	ldr	r0, [r4, #8]
 80137e0:	f7ff ff9a 	bl	8013718 <std.isra.0>
 80137e4:	2202      	movs	r2, #2
 80137e6:	2112      	movs	r1, #18
 80137e8:	68e0      	ldr	r0, [r4, #12]
 80137ea:	f7ff ff95 	bl	8013718 <std.isra.0>
 80137ee:	2301      	movs	r3, #1
 80137f0:	61a3      	str	r3, [r4, #24]
 80137f2:	bd10      	pop	{r4, pc}
 80137f4:	08015528 	.word	0x08015528
 80137f8:	0801370d 	.word	0x0801370d

080137fc <__sfp>:
 80137fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137fe:	4b1c      	ldr	r3, [pc, #112]	; (8013870 <__sfp+0x74>)
 8013800:	4607      	mov	r7, r0
 8013802:	681e      	ldr	r6, [r3, #0]
 8013804:	69b3      	ldr	r3, [r6, #24]
 8013806:	b913      	cbnz	r3, 801380e <__sfp+0x12>
 8013808:	4630      	mov	r0, r6
 801380a:	f7ff ffc7 	bl	801379c <__sinit>
 801380e:	3648      	adds	r6, #72	; 0x48
 8013810:	68b4      	ldr	r4, [r6, #8]
 8013812:	6873      	ldr	r3, [r6, #4]
 8013814:	3b01      	subs	r3, #1
 8013816:	d404      	bmi.n	8013822 <__sfp+0x26>
 8013818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801381c:	b17d      	cbz	r5, 801383e <__sfp+0x42>
 801381e:	3468      	adds	r4, #104	; 0x68
 8013820:	e7f8      	b.n	8013814 <__sfp+0x18>
 8013822:	6833      	ldr	r3, [r6, #0]
 8013824:	b10b      	cbz	r3, 801382a <__sfp+0x2e>
 8013826:	6836      	ldr	r6, [r6, #0]
 8013828:	e7f2      	b.n	8013810 <__sfp+0x14>
 801382a:	2104      	movs	r1, #4
 801382c:	4638      	mov	r0, r7
 801382e:	f7ff ff99 	bl	8013764 <__sfmoreglue>
 8013832:	6030      	str	r0, [r6, #0]
 8013834:	2800      	cmp	r0, #0
 8013836:	d1f6      	bne.n	8013826 <__sfp+0x2a>
 8013838:	230c      	movs	r3, #12
 801383a:	603b      	str	r3, [r7, #0]
 801383c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801383e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013842:	81e3      	strh	r3, [r4, #14]
 8013844:	2301      	movs	r3, #1
 8013846:	81a3      	strh	r3, [r4, #12]
 8013848:	6665      	str	r5, [r4, #100]	; 0x64
 801384a:	6025      	str	r5, [r4, #0]
 801384c:	60a5      	str	r5, [r4, #8]
 801384e:	6065      	str	r5, [r4, #4]
 8013850:	6125      	str	r5, [r4, #16]
 8013852:	6165      	str	r5, [r4, #20]
 8013854:	61a5      	str	r5, [r4, #24]
 8013856:	2208      	movs	r2, #8
 8013858:	4629      	mov	r1, r5
 801385a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801385e:	f7fc ffe0 	bl	8010822 <memset>
 8013862:	6365      	str	r5, [r4, #52]	; 0x34
 8013864:	63a5      	str	r5, [r4, #56]	; 0x38
 8013866:	64a5      	str	r5, [r4, #72]	; 0x48
 8013868:	64e5      	str	r5, [r4, #76]	; 0x4c
 801386a:	4620      	mov	r0, r4
 801386c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801386e:	bf00      	nop
 8013870:	08015528 	.word	0x08015528

08013874 <__sfp_lock_acquire>:
 8013874:	4770      	bx	lr

08013876 <__sfp_lock_release>:
 8013876:	4770      	bx	lr

08013878 <__sinit_lock_acquire>:
 8013878:	4770      	bx	lr

0801387a <__sinit_lock_release>:
 801387a:	4770      	bx	lr

0801387c <__fp_lock_all>:
 801387c:	4b02      	ldr	r3, [pc, #8]	; (8013888 <__fp_lock_all+0xc>)
 801387e:	4903      	ldr	r1, [pc, #12]	; (801388c <__fp_lock_all+0x10>)
 8013880:	6818      	ldr	r0, [r3, #0]
 8013882:	f000 b86b 	b.w	801395c <_fwalk>
 8013886:	bf00      	nop
 8013888:	2000019c 	.word	0x2000019c
 801388c:	08013761 	.word	0x08013761

08013890 <__fp_unlock_all>:
 8013890:	4b02      	ldr	r3, [pc, #8]	; (801389c <__fp_unlock_all+0xc>)
 8013892:	4903      	ldr	r1, [pc, #12]	; (80138a0 <__fp_unlock_all+0x10>)
 8013894:	6818      	ldr	r0, [r3, #0]
 8013896:	f000 b861 	b.w	801395c <_fwalk>
 801389a:	bf00      	nop
 801389c:	2000019c 	.word	0x2000019c
 80138a0:	08013709 	.word	0x08013709

080138a4 <_fputs_r>:
 80138a4:	b570      	push	{r4, r5, r6, lr}
 80138a6:	460d      	mov	r5, r1
 80138a8:	4614      	mov	r4, r2
 80138aa:	4606      	mov	r6, r0
 80138ac:	b118      	cbz	r0, 80138b6 <_fputs_r+0x12>
 80138ae:	6983      	ldr	r3, [r0, #24]
 80138b0:	b90b      	cbnz	r3, 80138b6 <_fputs_r+0x12>
 80138b2:	f7ff ff73 	bl	801379c <__sinit>
 80138b6:	4b22      	ldr	r3, [pc, #136]	; (8013940 <_fputs_r+0x9c>)
 80138b8:	429c      	cmp	r4, r3
 80138ba:	d101      	bne.n	80138c0 <_fputs_r+0x1c>
 80138bc:	6874      	ldr	r4, [r6, #4]
 80138be:	e008      	b.n	80138d2 <_fputs_r+0x2e>
 80138c0:	4b20      	ldr	r3, [pc, #128]	; (8013944 <_fputs_r+0xa0>)
 80138c2:	429c      	cmp	r4, r3
 80138c4:	d101      	bne.n	80138ca <_fputs_r+0x26>
 80138c6:	68b4      	ldr	r4, [r6, #8]
 80138c8:	e003      	b.n	80138d2 <_fputs_r+0x2e>
 80138ca:	4b1f      	ldr	r3, [pc, #124]	; (8013948 <_fputs_r+0xa4>)
 80138cc:	429c      	cmp	r4, r3
 80138ce:	bf08      	it	eq
 80138d0:	68f4      	ldreq	r4, [r6, #12]
 80138d2:	89a3      	ldrh	r3, [r4, #12]
 80138d4:	071a      	lsls	r2, r3, #28
 80138d6:	d501      	bpl.n	80138dc <_fputs_r+0x38>
 80138d8:	6923      	ldr	r3, [r4, #16]
 80138da:	b99b      	cbnz	r3, 8013904 <_fputs_r+0x60>
 80138dc:	4621      	mov	r1, r4
 80138de:	4630      	mov	r0, r6
 80138e0:	f000 f9ac 	bl	8013c3c <__swsetup_r>
 80138e4:	b170      	cbz	r0, 8013904 <_fputs_r+0x60>
 80138e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138ea:	bd70      	pop	{r4, r5, r6, pc}
 80138ec:	68a3      	ldr	r3, [r4, #8]
 80138ee:	3b01      	subs	r3, #1
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	60a3      	str	r3, [r4, #8]
 80138f4:	db0b      	blt.n	801390e <_fputs_r+0x6a>
 80138f6:	6823      	ldr	r3, [r4, #0]
 80138f8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80138fc:	701a      	strb	r2, [r3, #0]
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	3301      	adds	r3, #1
 8013902:	6023      	str	r3, [r4, #0]
 8013904:	f815 0b01 	ldrb.w	r0, [r5], #1
 8013908:	2800      	cmp	r0, #0
 801390a:	d1ef      	bne.n	80138ec <_fputs_r+0x48>
 801390c:	e016      	b.n	801393c <_fputs_r+0x98>
 801390e:	69a2      	ldr	r2, [r4, #24]
 8013910:	4293      	cmp	r3, r2
 8013912:	db09      	blt.n	8013928 <_fputs_r+0x84>
 8013914:	6823      	ldr	r3, [r4, #0]
 8013916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801391a:	701a      	strb	r2, [r3, #0]
 801391c:	6823      	ldr	r3, [r4, #0]
 801391e:	7819      	ldrb	r1, [r3, #0]
 8013920:	290a      	cmp	r1, #10
 8013922:	d1ed      	bne.n	8013900 <_fputs_r+0x5c>
 8013924:	4622      	mov	r2, r4
 8013926:	e002      	b.n	801392e <_fputs_r+0x8a>
 8013928:	4622      	mov	r2, r4
 801392a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801392e:	4630      	mov	r0, r6
 8013930:	f000 f916 	bl	8013b60 <__swbuf_r>
 8013934:	1c43      	adds	r3, r0, #1
 8013936:	4258      	negs	r0, r3
 8013938:	4158      	adcs	r0, r3
 801393a:	e7d3      	b.n	80138e4 <_fputs_r+0x40>
 801393c:	bd70      	pop	{r4, r5, r6, pc}
 801393e:	bf00      	nop
 8013940:	080161f0 	.word	0x080161f0
 8013944:	08016210 	.word	0x08016210
 8013948:	08016230 	.word	0x08016230

0801394c <fputs>:
 801394c:	4b02      	ldr	r3, [pc, #8]	; (8013958 <fputs+0xc>)
 801394e:	460a      	mov	r2, r1
 8013950:	4601      	mov	r1, r0
 8013952:	6818      	ldr	r0, [r3, #0]
 8013954:	f7ff bfa6 	b.w	80138a4 <_fputs_r>
 8013958:	2000019c 	.word	0x2000019c

0801395c <_fwalk>:
 801395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013960:	4688      	mov	r8, r1
 8013962:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013966:	2600      	movs	r6, #0
 8013968:	b18c      	cbz	r4, 801398e <_fwalk+0x32>
 801396a:	68a5      	ldr	r5, [r4, #8]
 801396c:	6867      	ldr	r7, [r4, #4]
 801396e:	3f01      	subs	r7, #1
 8013970:	d40b      	bmi.n	801398a <_fwalk+0x2e>
 8013972:	89ab      	ldrh	r3, [r5, #12]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d906      	bls.n	8013986 <_fwalk+0x2a>
 8013978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801397c:	3301      	adds	r3, #1
 801397e:	d002      	beq.n	8013986 <_fwalk+0x2a>
 8013980:	4628      	mov	r0, r5
 8013982:	47c0      	blx	r8
 8013984:	4306      	orrs	r6, r0
 8013986:	3568      	adds	r5, #104	; 0x68
 8013988:	e7f1      	b.n	801396e <_fwalk+0x12>
 801398a:	6824      	ldr	r4, [r4, #0]
 801398c:	e7ec      	b.n	8013968 <_fwalk+0xc>
 801398e:	4630      	mov	r0, r6
 8013990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013994 <_fwalk_reent>:
 8013994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013998:	4680      	mov	r8, r0
 801399a:	4689      	mov	r9, r1
 801399c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80139a0:	2600      	movs	r6, #0
 80139a2:	b194      	cbz	r4, 80139ca <_fwalk_reent+0x36>
 80139a4:	68a5      	ldr	r5, [r4, #8]
 80139a6:	6867      	ldr	r7, [r4, #4]
 80139a8:	3f01      	subs	r7, #1
 80139aa:	d40c      	bmi.n	80139c6 <_fwalk_reent+0x32>
 80139ac:	89ab      	ldrh	r3, [r5, #12]
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d907      	bls.n	80139c2 <_fwalk_reent+0x2e>
 80139b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80139b6:	3301      	adds	r3, #1
 80139b8:	d003      	beq.n	80139c2 <_fwalk_reent+0x2e>
 80139ba:	4629      	mov	r1, r5
 80139bc:	4640      	mov	r0, r8
 80139be:	47c8      	blx	r9
 80139c0:	4306      	orrs	r6, r0
 80139c2:	3568      	adds	r5, #104	; 0x68
 80139c4:	e7f0      	b.n	80139a8 <_fwalk_reent+0x14>
 80139c6:	6824      	ldr	r4, [r4, #0]
 80139c8:	e7eb      	b.n	80139a2 <_fwalk_reent+0xe>
 80139ca:	4630      	mov	r0, r6
 80139cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080139d0 <malloc>:
 80139d0:	4b02      	ldr	r3, [pc, #8]	; (80139dc <malloc+0xc>)
 80139d2:	4601      	mov	r1, r0
 80139d4:	6818      	ldr	r0, [r3, #0]
 80139d6:	f7fc bfe5 	b.w	80109a4 <_malloc_r>
 80139da:	bf00      	nop
 80139dc:	2000019c 	.word	0x2000019c

080139e0 <free>:
 80139e0:	4b02      	ldr	r3, [pc, #8]	; (80139ec <free+0xc>)
 80139e2:	4601      	mov	r1, r0
 80139e4:	6818      	ldr	r0, [r3, #0]
 80139e6:	f7fd b8cf 	b.w	8010b88 <_free_r>
 80139ea:	bf00      	nop
 80139ec:	2000019c 	.word	0x2000019c

080139f0 <memcmp>:
 80139f0:	b510      	push	{r4, lr}
 80139f2:	3901      	subs	r1, #1
 80139f4:	4402      	add	r2, r0
 80139f6:	4290      	cmp	r0, r2
 80139f8:	d007      	beq.n	8013a0a <memcmp+0x1a>
 80139fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80139fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013a02:	42a3      	cmp	r3, r4
 8013a04:	d0f7      	beq.n	80139f6 <memcmp+0x6>
 8013a06:	1b18      	subs	r0, r3, r4
 8013a08:	bd10      	pop	{r4, pc}
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	bd10      	pop	{r4, pc}

08013a0e <_siprintf_r>:
 8013a0e:	b40c      	push	{r2, r3}
 8013a10:	b510      	push	{r4, lr}
 8013a12:	b09c      	sub	sp, #112	; 0x70
 8013a14:	9102      	str	r1, [sp, #8]
 8013a16:	9106      	str	r1, [sp, #24]
 8013a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a1c:	9104      	str	r1, [sp, #16]
 8013a1e:	9107      	str	r1, [sp, #28]
 8013a20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013a24:	ab1e      	add	r3, sp, #120	; 0x78
 8013a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a2a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013a2e:	f44f 7402 	mov.w	r4, #520	; 0x208
 8013a32:	a902      	add	r1, sp, #8
 8013a34:	9301      	str	r3, [sp, #4]
 8013a36:	f8ad 4014 	strh.w	r4, [sp, #20]
 8013a3a:	f000 fb73 	bl	8014124 <_svfiprintf_r>
 8013a3e:	9b02      	ldr	r3, [sp, #8]
 8013a40:	2200      	movs	r2, #0
 8013a42:	701a      	strb	r2, [r3, #0]
 8013a44:	b01c      	add	sp, #112	; 0x70
 8013a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a4a:	b002      	add	sp, #8
 8013a4c:	4770      	bx	lr
	...

08013a50 <siprintf>:
 8013a50:	b40e      	push	{r1, r2, r3}
 8013a52:	b500      	push	{lr}
 8013a54:	f44f 7102 	mov.w	r1, #520	; 0x208
 8013a58:	b09c      	sub	sp, #112	; 0x70
 8013a5a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013a5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013a62:	9104      	str	r1, [sp, #16]
 8013a64:	9107      	str	r1, [sp, #28]
 8013a66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8013a6c:	9002      	str	r0, [sp, #8]
 8013a6e:	9006      	str	r0, [sp, #24]
 8013a70:	4808      	ldr	r0, [pc, #32]	; (8013a94 <siprintf+0x44>)
 8013a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a76:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013a7a:	6800      	ldr	r0, [r0, #0]
 8013a7c:	a902      	add	r1, sp, #8
 8013a7e:	9301      	str	r3, [sp, #4]
 8013a80:	f000 fb50 	bl	8014124 <_svfiprintf_r>
 8013a84:	9b02      	ldr	r3, [sp, #8]
 8013a86:	2200      	movs	r2, #0
 8013a88:	701a      	strb	r2, [r3, #0]
 8013a8a:	b01c      	add	sp, #112	; 0x70
 8013a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a90:	b003      	add	sp, #12
 8013a92:	4770      	bx	lr
 8013a94:	2000019c 	.word	0x2000019c

08013a98 <__sread>:
 8013a98:	b510      	push	{r4, lr}
 8013a9a:	460c      	mov	r4, r1
 8013a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aa0:	f000 fdd0 	bl	8014644 <_read_r>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	bfab      	itete	ge
 8013aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8013aac:	181b      	addge	r3, r3, r0
 8013aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013ab2:	bfac      	ite	ge
 8013ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8013ab6:	81a3      	strhlt	r3, [r4, #12]
 8013ab8:	bd10      	pop	{r4, pc}

08013aba <__seofread>:
 8013aba:	2000      	movs	r0, #0
 8013abc:	4770      	bx	lr

08013abe <__swrite>:
 8013abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ac2:	461f      	mov	r7, r3
 8013ac4:	898b      	ldrh	r3, [r1, #12]
 8013ac6:	4605      	mov	r5, r0
 8013ac8:	05db      	lsls	r3, r3, #23
 8013aca:	460c      	mov	r4, r1
 8013acc:	4616      	mov	r6, r2
 8013ace:	d505      	bpl.n	8013adc <__swrite+0x1e>
 8013ad0:	2302      	movs	r3, #2
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad8:	f000 f9ee 	bl	8013eb8 <_lseek_r>
 8013adc:	89a3      	ldrh	r3, [r4, #12]
 8013ade:	4632      	mov	r2, r6
 8013ae0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ae4:	81a3      	strh	r3, [r4, #12]
 8013ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013aea:	463b      	mov	r3, r7
 8013aec:	4628      	mov	r0, r5
 8013aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013af2:	f000 b891 	b.w	8013c18 <_write_r>

08013af6 <__sseek>:
 8013af6:	b510      	push	{r4, lr}
 8013af8:	460c      	mov	r4, r1
 8013afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013afe:	f000 f9db 	bl	8013eb8 <_lseek_r>
 8013b02:	1c43      	adds	r3, r0, #1
 8013b04:	89a3      	ldrh	r3, [r4, #12]
 8013b06:	bf15      	itete	ne
 8013b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8013b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013b12:	81a3      	strheq	r3, [r4, #12]
 8013b14:	bf18      	it	ne
 8013b16:	81a3      	strhne	r3, [r4, #12]
 8013b18:	bd10      	pop	{r4, pc}

08013b1a <__sclose>:
 8013b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b1e:	f000 b8f9 	b.w	8013d14 <_close_r>

08013b22 <strncmp>:
 8013b22:	b530      	push	{r4, r5, lr}
 8013b24:	b182      	cbz	r2, 8013b48 <strncmp+0x26>
 8013b26:	1e45      	subs	r5, r0, #1
 8013b28:	3901      	subs	r1, #1
 8013b2a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8013b2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013b32:	42a3      	cmp	r3, r4
 8013b34:	d106      	bne.n	8013b44 <strncmp+0x22>
 8013b36:	43ec      	mvns	r4, r5
 8013b38:	4414      	add	r4, r2
 8013b3a:	42e0      	cmn	r0, r4
 8013b3c:	d001      	beq.n	8013b42 <strncmp+0x20>
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d1f3      	bne.n	8013b2a <strncmp+0x8>
 8013b42:	461c      	mov	r4, r3
 8013b44:	1b18      	subs	r0, r3, r4
 8013b46:	bd30      	pop	{r4, r5, pc}
 8013b48:	4610      	mov	r0, r2
 8013b4a:	bd30      	pop	{r4, r5, pc}

08013b4c <write>:
 8013b4c:	4613      	mov	r3, r2
 8013b4e:	460a      	mov	r2, r1
 8013b50:	4601      	mov	r1, r0
 8013b52:	4802      	ldr	r0, [pc, #8]	; (8013b5c <write+0x10>)
 8013b54:	6800      	ldr	r0, [r0, #0]
 8013b56:	f000 b85f 	b.w	8013c18 <_write_r>
 8013b5a:	bf00      	nop
 8013b5c:	2000019c 	.word	0x2000019c

08013b60 <__swbuf_r>:
 8013b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b62:	460f      	mov	r7, r1
 8013b64:	4614      	mov	r4, r2
 8013b66:	4606      	mov	r6, r0
 8013b68:	b118      	cbz	r0, 8013b72 <__swbuf_r+0x12>
 8013b6a:	6983      	ldr	r3, [r0, #24]
 8013b6c:	b90b      	cbnz	r3, 8013b72 <__swbuf_r+0x12>
 8013b6e:	f7ff fe15 	bl	801379c <__sinit>
 8013b72:	4b22      	ldr	r3, [pc, #136]	; (8013bfc <__swbuf_r+0x9c>)
 8013b74:	429c      	cmp	r4, r3
 8013b76:	d101      	bne.n	8013b7c <__swbuf_r+0x1c>
 8013b78:	6874      	ldr	r4, [r6, #4]
 8013b7a:	e008      	b.n	8013b8e <__swbuf_r+0x2e>
 8013b7c:	4b20      	ldr	r3, [pc, #128]	; (8013c00 <__swbuf_r+0xa0>)
 8013b7e:	429c      	cmp	r4, r3
 8013b80:	d101      	bne.n	8013b86 <__swbuf_r+0x26>
 8013b82:	68b4      	ldr	r4, [r6, #8]
 8013b84:	e003      	b.n	8013b8e <__swbuf_r+0x2e>
 8013b86:	4b1f      	ldr	r3, [pc, #124]	; (8013c04 <__swbuf_r+0xa4>)
 8013b88:	429c      	cmp	r4, r3
 8013b8a:	bf08      	it	eq
 8013b8c:	68f4      	ldreq	r4, [r6, #12]
 8013b8e:	69a3      	ldr	r3, [r4, #24]
 8013b90:	60a3      	str	r3, [r4, #8]
 8013b92:	89a3      	ldrh	r3, [r4, #12]
 8013b94:	071a      	lsls	r2, r3, #28
 8013b96:	d509      	bpl.n	8013bac <__swbuf_r+0x4c>
 8013b98:	6923      	ldr	r3, [r4, #16]
 8013b9a:	b13b      	cbz	r3, 8013bac <__swbuf_r+0x4c>
 8013b9c:	6823      	ldr	r3, [r4, #0]
 8013b9e:	6920      	ldr	r0, [r4, #16]
 8013ba0:	b2fd      	uxtb	r5, r7
 8013ba2:	1a18      	subs	r0, r3, r0
 8013ba4:	6963      	ldr	r3, [r4, #20]
 8013ba6:	4298      	cmp	r0, r3
 8013ba8:	db0f      	blt.n	8013bca <__swbuf_r+0x6a>
 8013baa:	e008      	b.n	8013bbe <__swbuf_r+0x5e>
 8013bac:	4621      	mov	r1, r4
 8013bae:	4630      	mov	r0, r6
 8013bb0:	f000 f844 	bl	8013c3c <__swsetup_r>
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	d0f1      	beq.n	8013b9c <__swbuf_r+0x3c>
 8013bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bbe:	4621      	mov	r1, r4
 8013bc0:	4630      	mov	r0, r6
 8013bc2:	f000 f93d 	bl	8013e40 <_fflush_r>
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	d1f6      	bne.n	8013bb8 <__swbuf_r+0x58>
 8013bca:	68a3      	ldr	r3, [r4, #8]
 8013bcc:	3b01      	subs	r3, #1
 8013bce:	60a3      	str	r3, [r4, #8]
 8013bd0:	6823      	ldr	r3, [r4, #0]
 8013bd2:	1c5a      	adds	r2, r3, #1
 8013bd4:	6022      	str	r2, [r4, #0]
 8013bd6:	701f      	strb	r7, [r3, #0]
 8013bd8:	6962      	ldr	r2, [r4, #20]
 8013bda:	1c43      	adds	r3, r0, #1
 8013bdc:	4293      	cmp	r3, r2
 8013bde:	d004      	beq.n	8013bea <__swbuf_r+0x8a>
 8013be0:	89a3      	ldrh	r3, [r4, #12]
 8013be2:	07db      	lsls	r3, r3, #31
 8013be4:	d507      	bpl.n	8013bf6 <__swbuf_r+0x96>
 8013be6:	2d0a      	cmp	r5, #10
 8013be8:	d105      	bne.n	8013bf6 <__swbuf_r+0x96>
 8013bea:	4621      	mov	r1, r4
 8013bec:	4630      	mov	r0, r6
 8013bee:	f000 f927 	bl	8013e40 <_fflush_r>
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	d1e0      	bne.n	8013bb8 <__swbuf_r+0x58>
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	080161f0 	.word	0x080161f0
 8013c00:	08016210 	.word	0x08016210
 8013c04:	08016230 	.word	0x08016230

08013c08 <__swbuf>:
 8013c08:	4b02      	ldr	r3, [pc, #8]	; (8013c14 <__swbuf+0xc>)
 8013c0a:	460a      	mov	r2, r1
 8013c0c:	4601      	mov	r1, r0
 8013c0e:	6818      	ldr	r0, [r3, #0]
 8013c10:	f7ff bfa6 	b.w	8013b60 <__swbuf_r>
 8013c14:	2000019c 	.word	0x2000019c

08013c18 <_write_r>:
 8013c18:	b538      	push	{r3, r4, r5, lr}
 8013c1a:	4c07      	ldr	r4, [pc, #28]	; (8013c38 <_write_r+0x20>)
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	4608      	mov	r0, r1
 8013c20:	4611      	mov	r1, r2
 8013c22:	2200      	movs	r2, #0
 8013c24:	6022      	str	r2, [r4, #0]
 8013c26:	461a      	mov	r2, r3
 8013c28:	f7fd f901 	bl	8010e2e <_write>
 8013c2c:	1c43      	adds	r3, r0, #1
 8013c2e:	d102      	bne.n	8013c36 <_write_r+0x1e>
 8013c30:	6823      	ldr	r3, [r4, #0]
 8013c32:	b103      	cbz	r3, 8013c36 <_write_r+0x1e>
 8013c34:	602b      	str	r3, [r5, #0]
 8013c36:	bd38      	pop	{r3, r4, r5, pc}
 8013c38:	200010f8 	.word	0x200010f8

08013c3c <__swsetup_r>:
 8013c3c:	4b31      	ldr	r3, [pc, #196]	; (8013d04 <__swsetup_r+0xc8>)
 8013c3e:	b570      	push	{r4, r5, r6, lr}
 8013c40:	681d      	ldr	r5, [r3, #0]
 8013c42:	4606      	mov	r6, r0
 8013c44:	460c      	mov	r4, r1
 8013c46:	b125      	cbz	r5, 8013c52 <__swsetup_r+0x16>
 8013c48:	69ab      	ldr	r3, [r5, #24]
 8013c4a:	b913      	cbnz	r3, 8013c52 <__swsetup_r+0x16>
 8013c4c:	4628      	mov	r0, r5
 8013c4e:	f7ff fda5 	bl	801379c <__sinit>
 8013c52:	4b2d      	ldr	r3, [pc, #180]	; (8013d08 <__swsetup_r+0xcc>)
 8013c54:	429c      	cmp	r4, r3
 8013c56:	d101      	bne.n	8013c5c <__swsetup_r+0x20>
 8013c58:	686c      	ldr	r4, [r5, #4]
 8013c5a:	e008      	b.n	8013c6e <__swsetup_r+0x32>
 8013c5c:	4b2b      	ldr	r3, [pc, #172]	; (8013d0c <__swsetup_r+0xd0>)
 8013c5e:	429c      	cmp	r4, r3
 8013c60:	d101      	bne.n	8013c66 <__swsetup_r+0x2a>
 8013c62:	68ac      	ldr	r4, [r5, #8]
 8013c64:	e003      	b.n	8013c6e <__swsetup_r+0x32>
 8013c66:	4b2a      	ldr	r3, [pc, #168]	; (8013d10 <__swsetup_r+0xd4>)
 8013c68:	429c      	cmp	r4, r3
 8013c6a:	bf08      	it	eq
 8013c6c:	68ec      	ldreq	r4, [r5, #12]
 8013c6e:	89a3      	ldrh	r3, [r4, #12]
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	0711      	lsls	r1, r2, #28
 8013c74:	d41d      	bmi.n	8013cb2 <__swsetup_r+0x76>
 8013c76:	06d5      	lsls	r5, r2, #27
 8013c78:	d402      	bmi.n	8013c80 <__swsetup_r+0x44>
 8013c7a:	2209      	movs	r2, #9
 8013c7c:	6032      	str	r2, [r6, #0]
 8013c7e:	e038      	b.n	8013cf2 <__swsetup_r+0xb6>
 8013c80:	0750      	lsls	r0, r2, #29
 8013c82:	d512      	bpl.n	8013caa <__swsetup_r+0x6e>
 8013c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c86:	b141      	cbz	r1, 8013c9a <__swsetup_r+0x5e>
 8013c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c8c:	4299      	cmp	r1, r3
 8013c8e:	d002      	beq.n	8013c96 <__swsetup_r+0x5a>
 8013c90:	4630      	mov	r0, r6
 8013c92:	f7fc ff79 	bl	8010b88 <_free_r>
 8013c96:	2300      	movs	r3, #0
 8013c98:	6363      	str	r3, [r4, #52]	; 0x34
 8013c9a:	89a3      	ldrh	r3, [r4, #12]
 8013c9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ca0:	81a3      	strh	r3, [r4, #12]
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	6063      	str	r3, [r4, #4]
 8013ca6:	6923      	ldr	r3, [r4, #16]
 8013ca8:	6023      	str	r3, [r4, #0]
 8013caa:	89a3      	ldrh	r3, [r4, #12]
 8013cac:	f043 0308 	orr.w	r3, r3, #8
 8013cb0:	81a3      	strh	r3, [r4, #12]
 8013cb2:	6923      	ldr	r3, [r4, #16]
 8013cb4:	b94b      	cbnz	r3, 8013cca <__swsetup_r+0x8e>
 8013cb6:	89a3      	ldrh	r3, [r4, #12]
 8013cb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cc0:	d003      	beq.n	8013cca <__swsetup_r+0x8e>
 8013cc2:	4621      	mov	r1, r4
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f000 f909 	bl	8013edc <__smakebuf_r>
 8013cca:	89a3      	ldrh	r3, [r4, #12]
 8013ccc:	f013 0201 	ands.w	r2, r3, #1
 8013cd0:	d005      	beq.n	8013cde <__swsetup_r+0xa2>
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	60a2      	str	r2, [r4, #8]
 8013cd6:	6962      	ldr	r2, [r4, #20]
 8013cd8:	4252      	negs	r2, r2
 8013cda:	61a2      	str	r2, [r4, #24]
 8013cdc:	e003      	b.n	8013ce6 <__swsetup_r+0xaa>
 8013cde:	0799      	lsls	r1, r3, #30
 8013ce0:	bf58      	it	pl
 8013ce2:	6962      	ldrpl	r2, [r4, #20]
 8013ce4:	60a2      	str	r2, [r4, #8]
 8013ce6:	6922      	ldr	r2, [r4, #16]
 8013ce8:	b94a      	cbnz	r2, 8013cfe <__swsetup_r+0xc2>
 8013cea:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8013cee:	b280      	uxth	r0, r0
 8013cf0:	b130      	cbz	r0, 8013d00 <__swsetup_r+0xc4>
 8013cf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cf6:	81a3      	strh	r3, [r4, #12]
 8013cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013cfc:	bd70      	pop	{r4, r5, r6, pc}
 8013cfe:	2000      	movs	r0, #0
 8013d00:	bd70      	pop	{r4, r5, r6, pc}
 8013d02:	bf00      	nop
 8013d04:	2000019c 	.word	0x2000019c
 8013d08:	080161f0 	.word	0x080161f0
 8013d0c:	08016210 	.word	0x08016210
 8013d10:	08016230 	.word	0x08016230

08013d14 <_close_r>:
 8013d14:	b538      	push	{r3, r4, r5, lr}
 8013d16:	4c06      	ldr	r4, [pc, #24]	; (8013d30 <_close_r+0x1c>)
 8013d18:	2300      	movs	r3, #0
 8013d1a:	4605      	mov	r5, r0
 8013d1c:	4608      	mov	r0, r1
 8013d1e:	6023      	str	r3, [r4, #0]
 8013d20:	f7fd f8b4 	bl	8010e8c <_close>
 8013d24:	1c43      	adds	r3, r0, #1
 8013d26:	d102      	bne.n	8013d2e <_close_r+0x1a>
 8013d28:	6823      	ldr	r3, [r4, #0]
 8013d2a:	b103      	cbz	r3, 8013d2e <_close_r+0x1a>
 8013d2c:	602b      	str	r3, [r5, #0]
 8013d2e:	bd38      	pop	{r3, r4, r5, pc}
 8013d30:	200010f8 	.word	0x200010f8

08013d34 <__sflush_r>:
 8013d34:	898a      	ldrh	r2, [r1, #12]
 8013d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d3a:	4605      	mov	r5, r0
 8013d3c:	0710      	lsls	r0, r2, #28
 8013d3e:	460c      	mov	r4, r1
 8013d40:	d459      	bmi.n	8013df6 <__sflush_r+0xc2>
 8013d42:	684b      	ldr	r3, [r1, #4]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	dc02      	bgt.n	8013d4e <__sflush_r+0x1a>
 8013d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	dd17      	ble.n	8013d7e <__sflush_r+0x4a>
 8013d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013d50:	b1ae      	cbz	r6, 8013d7e <__sflush_r+0x4a>
 8013d52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8013d56:	2300      	movs	r3, #0
 8013d58:	b292      	uxth	r2, r2
 8013d5a:	682f      	ldr	r7, [r5, #0]
 8013d5c:	602b      	str	r3, [r5, #0]
 8013d5e:	b10a      	cbz	r2, 8013d64 <__sflush_r+0x30>
 8013d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013d62:	e015      	b.n	8013d90 <__sflush_r+0x5c>
 8013d64:	6a21      	ldr	r1, [r4, #32]
 8013d66:	2301      	movs	r3, #1
 8013d68:	4628      	mov	r0, r5
 8013d6a:	47b0      	blx	r6
 8013d6c:	1c41      	adds	r1, r0, #1
 8013d6e:	d10f      	bne.n	8013d90 <__sflush_r+0x5c>
 8013d70:	682b      	ldr	r3, [r5, #0]
 8013d72:	b16b      	cbz	r3, 8013d90 <__sflush_r+0x5c>
 8013d74:	2b1d      	cmp	r3, #29
 8013d76:	d001      	beq.n	8013d7c <__sflush_r+0x48>
 8013d78:	2b16      	cmp	r3, #22
 8013d7a:	d103      	bne.n	8013d84 <__sflush_r+0x50>
 8013d7c:	602f      	str	r7, [r5, #0]
 8013d7e:	2000      	movs	r0, #0
 8013d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d84:	89a3      	ldrh	r3, [r4, #12]
 8013d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d8a:	81a3      	strh	r3, [r4, #12]
 8013d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d90:	89a3      	ldrh	r3, [r4, #12]
 8013d92:	075a      	lsls	r2, r3, #29
 8013d94:	d505      	bpl.n	8013da2 <__sflush_r+0x6e>
 8013d96:	6863      	ldr	r3, [r4, #4]
 8013d98:	1ac0      	subs	r0, r0, r3
 8013d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013d9c:	b10b      	cbz	r3, 8013da2 <__sflush_r+0x6e>
 8013d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013da0:	1ac0      	subs	r0, r0, r3
 8013da2:	2300      	movs	r3, #0
 8013da4:	4602      	mov	r2, r0
 8013da6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013da8:	6a21      	ldr	r1, [r4, #32]
 8013daa:	4628      	mov	r0, r5
 8013dac:	47b0      	blx	r6
 8013dae:	1c43      	adds	r3, r0, #1
 8013db0:	89a3      	ldrh	r3, [r4, #12]
 8013db2:	d106      	bne.n	8013dc2 <__sflush_r+0x8e>
 8013db4:	6829      	ldr	r1, [r5, #0]
 8013db6:	291d      	cmp	r1, #29
 8013db8:	d839      	bhi.n	8013e2e <__sflush_r+0xfa>
 8013dba:	4a20      	ldr	r2, [pc, #128]	; (8013e3c <__sflush_r+0x108>)
 8013dbc:	40ca      	lsrs	r2, r1
 8013dbe:	07d6      	lsls	r6, r2, #31
 8013dc0:	d535      	bpl.n	8013e2e <__sflush_r+0xfa>
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	6062      	str	r2, [r4, #4]
 8013dc6:	6922      	ldr	r2, [r4, #16]
 8013dc8:	04d9      	lsls	r1, r3, #19
 8013dca:	6022      	str	r2, [r4, #0]
 8013dcc:	d504      	bpl.n	8013dd8 <__sflush_r+0xa4>
 8013dce:	1c42      	adds	r2, r0, #1
 8013dd0:	d101      	bne.n	8013dd6 <__sflush_r+0xa2>
 8013dd2:	682b      	ldr	r3, [r5, #0]
 8013dd4:	b903      	cbnz	r3, 8013dd8 <__sflush_r+0xa4>
 8013dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8013dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013dda:	602f      	str	r7, [r5, #0]
 8013ddc:	2900      	cmp	r1, #0
 8013dde:	d0ce      	beq.n	8013d7e <__sflush_r+0x4a>
 8013de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013de4:	4299      	cmp	r1, r3
 8013de6:	d002      	beq.n	8013dee <__sflush_r+0xba>
 8013de8:	4628      	mov	r0, r5
 8013dea:	f7fc fecd 	bl	8010b88 <_free_r>
 8013dee:	2000      	movs	r0, #0
 8013df0:	6360      	str	r0, [r4, #52]	; 0x34
 8013df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df6:	690f      	ldr	r7, [r1, #16]
 8013df8:	2f00      	cmp	r7, #0
 8013dfa:	d0c0      	beq.n	8013d7e <__sflush_r+0x4a>
 8013dfc:	0793      	lsls	r3, r2, #30
 8013dfe:	680e      	ldr	r6, [r1, #0]
 8013e00:	bf0c      	ite	eq
 8013e02:	694b      	ldreq	r3, [r1, #20]
 8013e04:	2300      	movne	r3, #0
 8013e06:	ebc7 0806 	rsb	r8, r7, r6
 8013e0a:	600f      	str	r7, [r1, #0]
 8013e0c:	608b      	str	r3, [r1, #8]
 8013e0e:	e002      	b.n	8013e16 <__sflush_r+0xe2>
 8013e10:	4407      	add	r7, r0
 8013e12:	ebc0 0808 	rsb	r8, r0, r8
 8013e16:	f1b8 0f00 	cmp.w	r8, #0
 8013e1a:	ddb0      	ble.n	8013d7e <__sflush_r+0x4a>
 8013e1c:	4643      	mov	r3, r8
 8013e1e:	463a      	mov	r2, r7
 8013e20:	6a21      	ldr	r1, [r4, #32]
 8013e22:	4628      	mov	r0, r5
 8013e24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013e26:	47b0      	blx	r6
 8013e28:	2800      	cmp	r0, #0
 8013e2a:	dcf1      	bgt.n	8013e10 <__sflush_r+0xdc>
 8013e2c:	89a3      	ldrh	r3, [r4, #12]
 8013e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e32:	81a3      	strh	r3, [r4, #12]
 8013e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e3c:	20400001 	.word	0x20400001

08013e40 <_fflush_r>:
 8013e40:	b538      	push	{r3, r4, r5, lr}
 8013e42:	690b      	ldr	r3, [r1, #16]
 8013e44:	4605      	mov	r5, r0
 8013e46:	460c      	mov	r4, r1
 8013e48:	b1db      	cbz	r3, 8013e82 <_fflush_r+0x42>
 8013e4a:	b118      	cbz	r0, 8013e54 <_fflush_r+0x14>
 8013e4c:	6983      	ldr	r3, [r0, #24]
 8013e4e:	b90b      	cbnz	r3, 8013e54 <_fflush_r+0x14>
 8013e50:	f7ff fca4 	bl	801379c <__sinit>
 8013e54:	4b0c      	ldr	r3, [pc, #48]	; (8013e88 <_fflush_r+0x48>)
 8013e56:	429c      	cmp	r4, r3
 8013e58:	d101      	bne.n	8013e5e <_fflush_r+0x1e>
 8013e5a:	686c      	ldr	r4, [r5, #4]
 8013e5c:	e008      	b.n	8013e70 <_fflush_r+0x30>
 8013e5e:	4b0b      	ldr	r3, [pc, #44]	; (8013e8c <_fflush_r+0x4c>)
 8013e60:	429c      	cmp	r4, r3
 8013e62:	d101      	bne.n	8013e68 <_fflush_r+0x28>
 8013e64:	68ac      	ldr	r4, [r5, #8]
 8013e66:	e003      	b.n	8013e70 <_fflush_r+0x30>
 8013e68:	4b09      	ldr	r3, [pc, #36]	; (8013e90 <_fflush_r+0x50>)
 8013e6a:	429c      	cmp	r4, r3
 8013e6c:	bf08      	it	eq
 8013e6e:	68ec      	ldreq	r4, [r5, #12]
 8013e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e74:	b12b      	cbz	r3, 8013e82 <_fflush_r+0x42>
 8013e76:	4621      	mov	r1, r4
 8013e78:	4628      	mov	r0, r5
 8013e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e7e:	f7ff bf59 	b.w	8013d34 <__sflush_r>
 8013e82:	2000      	movs	r0, #0
 8013e84:	bd38      	pop	{r3, r4, r5, pc}
 8013e86:	bf00      	nop
 8013e88:	080161f0 	.word	0x080161f0
 8013e8c:	08016210 	.word	0x08016210
 8013e90:	08016230 	.word	0x08016230

08013e94 <fflush>:
 8013e94:	4601      	mov	r1, r0
 8013e96:	b920      	cbnz	r0, 8013ea2 <fflush+0xe>
 8013e98:	4b04      	ldr	r3, [pc, #16]	; (8013eac <fflush+0x18>)
 8013e9a:	4905      	ldr	r1, [pc, #20]	; (8013eb0 <fflush+0x1c>)
 8013e9c:	6818      	ldr	r0, [r3, #0]
 8013e9e:	f7ff bd79 	b.w	8013994 <_fwalk_reent>
 8013ea2:	4b04      	ldr	r3, [pc, #16]	; (8013eb4 <fflush+0x20>)
 8013ea4:	6818      	ldr	r0, [r3, #0]
 8013ea6:	f7ff bfcb 	b.w	8013e40 <_fflush_r>
 8013eaa:	bf00      	nop
 8013eac:	08015528 	.word	0x08015528
 8013eb0:	08013e41 	.word	0x08013e41
 8013eb4:	2000019c 	.word	0x2000019c

08013eb8 <_lseek_r>:
 8013eb8:	b538      	push	{r3, r4, r5, lr}
 8013eba:	4c07      	ldr	r4, [pc, #28]	; (8013ed8 <_lseek_r+0x20>)
 8013ebc:	4605      	mov	r5, r0
 8013ebe:	4608      	mov	r0, r1
 8013ec0:	4611      	mov	r1, r2
 8013ec2:	2200      	movs	r2, #0
 8013ec4:	6022      	str	r2, [r4, #0]
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	f7fc ff9f 	bl	8010e0a <_lseek>
 8013ecc:	1c43      	adds	r3, r0, #1
 8013ece:	d102      	bne.n	8013ed6 <_lseek_r+0x1e>
 8013ed0:	6823      	ldr	r3, [r4, #0]
 8013ed2:	b103      	cbz	r3, 8013ed6 <_lseek_r+0x1e>
 8013ed4:	602b      	str	r3, [r5, #0]
 8013ed6:	bd38      	pop	{r3, r4, r5, pc}
 8013ed8:	200010f8 	.word	0x200010f8

08013edc <__smakebuf_r>:
 8013edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ede:	898b      	ldrh	r3, [r1, #12]
 8013ee0:	b091      	sub	sp, #68	; 0x44
 8013ee2:	079d      	lsls	r5, r3, #30
 8013ee4:	4606      	mov	r6, r0
 8013ee6:	460c      	mov	r4, r1
 8013ee8:	d425      	bmi.n	8013f36 <__smakebuf_r+0x5a>
 8013eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eee:	2900      	cmp	r1, #0
 8013ef0:	da08      	bge.n	8013f04 <__smakebuf_r+0x28>
 8013ef2:	89a3      	ldrh	r3, [r4, #12]
 8013ef4:	2500      	movs	r5, #0
 8013ef6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013efa:	bf14      	ite	ne
 8013efc:	2740      	movne	r7, #64	; 0x40
 8013efe:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8013f02:	e00d      	b.n	8013f20 <__smakebuf_r+0x44>
 8013f04:	aa01      	add	r2, sp, #4
 8013f06:	f000 fbaf 	bl	8014668 <_fstat_r>
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	dbf1      	blt.n	8013ef2 <__smakebuf_r+0x16>
 8013f0e:	9d02      	ldr	r5, [sp, #8]
 8013f10:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8013f14:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8013f18:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8013f1c:	424d      	negs	r5, r1
 8013f1e:	414d      	adcs	r5, r1
 8013f20:	4639      	mov	r1, r7
 8013f22:	4630      	mov	r0, r6
 8013f24:	f7fc fd3e 	bl	80109a4 <_malloc_r>
 8013f28:	b960      	cbnz	r0, 8013f44 <__smakebuf_r+0x68>
 8013f2a:	89a3      	ldrh	r3, [r4, #12]
 8013f2c:	059a      	lsls	r2, r3, #22
 8013f2e:	d41d      	bmi.n	8013f6c <__smakebuf_r+0x90>
 8013f30:	f043 0302 	orr.w	r3, r3, #2
 8013f34:	81a3      	strh	r3, [r4, #12]
 8013f36:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f3a:	6023      	str	r3, [r4, #0]
 8013f3c:	6123      	str	r3, [r4, #16]
 8013f3e:	2301      	movs	r3, #1
 8013f40:	6163      	str	r3, [r4, #20]
 8013f42:	e013      	b.n	8013f6c <__smakebuf_r+0x90>
 8013f44:	4b0a      	ldr	r3, [pc, #40]	; (8013f70 <__smakebuf_r+0x94>)
 8013f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f48:	89a3      	ldrh	r3, [r4, #12]
 8013f4a:	6020      	str	r0, [r4, #0]
 8013f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f50:	81a3      	strh	r3, [r4, #12]
 8013f52:	6120      	str	r0, [r4, #16]
 8013f54:	6167      	str	r7, [r4, #20]
 8013f56:	b14d      	cbz	r5, 8013f6c <__smakebuf_r+0x90>
 8013f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	f000 fb95 	bl	801468c <_isatty_r>
 8013f62:	b118      	cbz	r0, 8013f6c <__smakebuf_r+0x90>
 8013f64:	89a3      	ldrh	r3, [r4, #12]
 8013f66:	f043 0301 	orr.w	r3, r3, #1
 8013f6a:	81a3      	strh	r3, [r4, #12]
 8013f6c:	b011      	add	sp, #68	; 0x44
 8013f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f70:	0801370d 	.word	0x0801370d

08013f74 <__ssputs_r>:
 8013f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f78:	688e      	ldr	r6, [r1, #8]
 8013f7a:	4682      	mov	sl, r0
 8013f7c:	429e      	cmp	r6, r3
 8013f7e:	460c      	mov	r4, r1
 8013f80:	4691      	mov	r9, r2
 8013f82:	4698      	mov	r8, r3
 8013f84:	d83e      	bhi.n	8014004 <__ssputs_r+0x90>
 8013f86:	898a      	ldrh	r2, [r1, #12]
 8013f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f8c:	d03a      	beq.n	8014004 <__ssputs_r+0x90>
 8013f8e:	6825      	ldr	r5, [r4, #0]
 8013f90:	6909      	ldr	r1, [r1, #16]
 8013f92:	2302      	movs	r3, #2
 8013f94:	1a6f      	subs	r7, r5, r1
 8013f96:	6965      	ldr	r5, [r4, #20]
 8013f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8013fa0:	1c7b      	adds	r3, r7, #1
 8013fa2:	4443      	add	r3, r8
 8013fa4:	429d      	cmp	r5, r3
 8013fa6:	bf38      	it	cc
 8013fa8:	461d      	movcc	r5, r3
 8013faa:	0553      	lsls	r3, r2, #21
 8013fac:	d50f      	bpl.n	8013fce <__ssputs_r+0x5a>
 8013fae:	4629      	mov	r1, r5
 8013fb0:	f7fc fcf8 	bl	80109a4 <_malloc_r>
 8013fb4:	4606      	mov	r6, r0
 8013fb6:	b198      	cbz	r0, 8013fe0 <__ssputs_r+0x6c>
 8013fb8:	463a      	mov	r2, r7
 8013fba:	6921      	ldr	r1, [r4, #16]
 8013fbc:	f7fc fc26 	bl	801080c <memcpy>
 8013fc0:	89a3      	ldrh	r3, [r4, #12]
 8013fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fca:	81a3      	strh	r3, [r4, #12]
 8013fcc:	e013      	b.n	8013ff6 <__ssputs_r+0x82>
 8013fce:	462a      	mov	r2, r5
 8013fd0:	f7fc fd3c 	bl	8010a4c <_realloc_r>
 8013fd4:	4606      	mov	r6, r0
 8013fd6:	b970      	cbnz	r0, 8013ff6 <__ssputs_r+0x82>
 8013fd8:	6921      	ldr	r1, [r4, #16]
 8013fda:	4650      	mov	r0, sl
 8013fdc:	f7fc fdd4 	bl	8010b88 <_free_r>
 8013fe0:	230c      	movs	r3, #12
 8013fe2:	f8ca 3000 	str.w	r3, [sl]
 8013fe6:	89a3      	ldrh	r3, [r4, #12]
 8013fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ff0:	81a3      	strh	r3, [r4, #12]
 8013ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ff6:	6126      	str	r6, [r4, #16]
 8013ff8:	443e      	add	r6, r7
 8013ffa:	6026      	str	r6, [r4, #0]
 8013ffc:	4646      	mov	r6, r8
 8013ffe:	6165      	str	r5, [r4, #20]
 8014000:	1bed      	subs	r5, r5, r7
 8014002:	60a5      	str	r5, [r4, #8]
 8014004:	4546      	cmp	r6, r8
 8014006:	bf28      	it	cs
 8014008:	4646      	movcs	r6, r8
 801400a:	4649      	mov	r1, r9
 801400c:	4632      	mov	r2, r6
 801400e:	6820      	ldr	r0, [r4, #0]
 8014010:	f000 fb5a 	bl	80146c8 <memmove>
 8014014:	68a3      	ldr	r3, [r4, #8]
 8014016:	2000      	movs	r0, #0
 8014018:	1b9b      	subs	r3, r3, r6
 801401a:	60a3      	str	r3, [r4, #8]
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	441e      	add	r6, r3
 8014020:	6026      	str	r6, [r4, #0]
 8014022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014026 <__ssprint_r>:
 8014026:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801402a:	4693      	mov	fp, r2
 801402c:	6892      	ldr	r2, [r2, #8]
 801402e:	4681      	mov	r9, r0
 8014030:	460c      	mov	r4, r1
 8014032:	b34a      	cbz	r2, 8014088 <__ssprint_r+0x62>
 8014034:	2300      	movs	r3, #0
 8014036:	f8db a000 	ldr.w	sl, [fp]
 801403a:	9301      	str	r3, [sp, #4]
 801403c:	461f      	mov	r7, r3
 801403e:	e006      	b.n	801404e <__ssprint_r+0x28>
 8014040:	f8da 3000 	ldr.w	r3, [sl]
 8014044:	f8da 7004 	ldr.w	r7, [sl, #4]
 8014048:	9301      	str	r3, [sp, #4]
 801404a:	f10a 0a08 	add.w	sl, sl, #8
 801404e:	2f00      	cmp	r7, #0
 8014050:	d0f6      	beq.n	8014040 <__ssprint_r+0x1a>
 8014052:	68a6      	ldr	r6, [r4, #8]
 8014054:	42b7      	cmp	r7, r6
 8014056:	d360      	bcc.n	801411a <__ssprint_r+0xf4>
 8014058:	89a0      	ldrh	r0, [r4, #12]
 801405a:	f410 6f90 	tst.w	r0, #1152	; 0x480
 801405e:	d117      	bne.n	8014090 <__ssprint_r+0x6a>
 8014060:	42b7      	cmp	r7, r6
 8014062:	d35a      	bcc.n	801411a <__ssprint_r+0xf4>
 8014064:	4632      	mov	r2, r6
 8014066:	9901      	ldr	r1, [sp, #4]
 8014068:	6820      	ldr	r0, [r4, #0]
 801406a:	f000 fb2d 	bl	80146c8 <memmove>
 801406e:	68a2      	ldr	r2, [r4, #8]
 8014070:	1b92      	subs	r2, r2, r6
 8014072:	60a2      	str	r2, [r4, #8]
 8014074:	6822      	ldr	r2, [r4, #0]
 8014076:	4416      	add	r6, r2
 8014078:	f8db 2008 	ldr.w	r2, [fp, #8]
 801407c:	6026      	str	r6, [r4, #0]
 801407e:	1bd7      	subs	r7, r2, r7
 8014080:	f8cb 7008 	str.w	r7, [fp, #8]
 8014084:	2f00      	cmp	r7, #0
 8014086:	d1db      	bne.n	8014040 <__ssprint_r+0x1a>
 8014088:	2000      	movs	r0, #0
 801408a:	f8cb 0004 	str.w	r0, [fp, #4]
 801408e:	e046      	b.n	801411e <__ssprint_r+0xf8>
 8014090:	6825      	ldr	r5, [r4, #0]
 8014092:	6921      	ldr	r1, [r4, #16]
 8014094:	2302      	movs	r3, #2
 8014096:	ebc1 0805 	rsb	r8, r1, r5
 801409a:	6965      	ldr	r5, [r4, #20]
 801409c:	f108 0201 	add.w	r2, r8, #1
 80140a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80140a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80140a8:	443a      	add	r2, r7
 80140aa:	4295      	cmp	r5, r2
 80140ac:	bf38      	it	cc
 80140ae:	4615      	movcc	r5, r2
 80140b0:	0543      	lsls	r3, r0, #21
 80140b2:	d510      	bpl.n	80140d6 <__ssprint_r+0xb0>
 80140b4:	4629      	mov	r1, r5
 80140b6:	4648      	mov	r0, r9
 80140b8:	f7fc fc74 	bl	80109a4 <_malloc_r>
 80140bc:	4606      	mov	r6, r0
 80140be:	b1a0      	cbz	r0, 80140ea <__ssprint_r+0xc4>
 80140c0:	4642      	mov	r2, r8
 80140c2:	6921      	ldr	r1, [r4, #16]
 80140c4:	f7fc fba2 	bl	801080c <memcpy>
 80140c8:	89a2      	ldrh	r2, [r4, #12]
 80140ca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80140ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80140d2:	81a2      	strh	r2, [r4, #12]
 80140d4:	e018      	b.n	8014108 <__ssprint_r+0xe2>
 80140d6:	462a      	mov	r2, r5
 80140d8:	4648      	mov	r0, r9
 80140da:	f7fc fcb7 	bl	8010a4c <_realloc_r>
 80140de:	4606      	mov	r6, r0
 80140e0:	b990      	cbnz	r0, 8014108 <__ssprint_r+0xe2>
 80140e2:	6921      	ldr	r1, [r4, #16]
 80140e4:	4648      	mov	r0, r9
 80140e6:	f7fc fd4f 	bl	8010b88 <_free_r>
 80140ea:	220c      	movs	r2, #12
 80140ec:	f8c9 2000 	str.w	r2, [r9]
 80140f0:	89a2      	ldrh	r2, [r4, #12]
 80140f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80140fa:	81a2      	strh	r2, [r4, #12]
 80140fc:	2200      	movs	r2, #0
 80140fe:	f8cb 2008 	str.w	r2, [fp, #8]
 8014102:	f8cb 2004 	str.w	r2, [fp, #4]
 8014106:	e00a      	b.n	801411e <__ssprint_r+0xf8>
 8014108:	6126      	str	r6, [r4, #16]
 801410a:	6165      	str	r5, [r4, #20]
 801410c:	4446      	add	r6, r8
 801410e:	ebc8 0505 	rsb	r5, r8, r5
 8014112:	6026      	str	r6, [r4, #0]
 8014114:	60a5      	str	r5, [r4, #8]
 8014116:	463e      	mov	r6, r7
 8014118:	e7a2      	b.n	8014060 <__ssprint_r+0x3a>
 801411a:	463e      	mov	r6, r7
 801411c:	e7a2      	b.n	8014064 <__ssprint_r+0x3e>
 801411e:	b003      	add	sp, #12
 8014120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014124 <_svfiprintf_r>:
 8014124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014128:	b09d      	sub	sp, #116	; 0x74
 801412a:	9303      	str	r3, [sp, #12]
 801412c:	898b      	ldrh	r3, [r1, #12]
 801412e:	4680      	mov	r8, r0
 8014130:	061c      	lsls	r4, r3, #24
 8014132:	460d      	mov	r5, r1
 8014134:	4616      	mov	r6, r2
 8014136:	d50d      	bpl.n	8014154 <_svfiprintf_r+0x30>
 8014138:	690b      	ldr	r3, [r1, #16]
 801413a:	b95b      	cbnz	r3, 8014154 <_svfiprintf_r+0x30>
 801413c:	2140      	movs	r1, #64	; 0x40
 801413e:	f7fc fc31 	bl	80109a4 <_malloc_r>
 8014142:	6028      	str	r0, [r5, #0]
 8014144:	6128      	str	r0, [r5, #16]
 8014146:	b918      	cbnz	r0, 8014150 <_svfiprintf_r+0x2c>
 8014148:	230c      	movs	r3, #12
 801414a:	f8c8 3000 	str.w	r3, [r8]
 801414e:	e0cd      	b.n	80142ec <_svfiprintf_r+0x1c8>
 8014150:	2340      	movs	r3, #64	; 0x40
 8014152:	616b      	str	r3, [r5, #20]
 8014154:	2300      	movs	r3, #0
 8014156:	9309      	str	r3, [sp, #36]	; 0x24
 8014158:	2320      	movs	r3, #32
 801415a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801415e:	f8df b19c 	ldr.w	fp, [pc, #412]	; 80142fc <_svfiprintf_r+0x1d8>
 8014162:	2330      	movs	r3, #48	; 0x30
 8014164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014168:	4637      	mov	r7, r6
 801416a:	463c      	mov	r4, r7
 801416c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014170:	b91b      	cbnz	r3, 801417a <_svfiprintf_r+0x56>
 8014172:	ebb7 0906 	subs.w	r9, r7, r6
 8014176:	d010      	beq.n	801419a <_svfiprintf_r+0x76>
 8014178:	e003      	b.n	8014182 <_svfiprintf_r+0x5e>
 801417a:	2b25      	cmp	r3, #37	; 0x25
 801417c:	d0f9      	beq.n	8014172 <_svfiprintf_r+0x4e>
 801417e:	4627      	mov	r7, r4
 8014180:	e7f3      	b.n	801416a <_svfiprintf_r+0x46>
 8014182:	464b      	mov	r3, r9
 8014184:	4632      	mov	r2, r6
 8014186:	4629      	mov	r1, r5
 8014188:	4640      	mov	r0, r8
 801418a:	f7ff fef3 	bl	8013f74 <__ssputs_r>
 801418e:	3001      	adds	r0, #1
 8014190:	f000 80a7 	beq.w	80142e2 <_svfiprintf_r+0x1be>
 8014194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014196:	444b      	add	r3, r9
 8014198:	9309      	str	r3, [sp, #36]	; 0x24
 801419a:	783b      	ldrb	r3, [r7, #0]
 801419c:	2b00      	cmp	r3, #0
 801419e:	f000 80a0 	beq.w	80142e2 <_svfiprintf_r+0x1be>
 80141a2:	2300      	movs	r3, #0
 80141a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141a8:	9304      	str	r3, [sp, #16]
 80141aa:	9307      	str	r3, [sp, #28]
 80141ac:	9205      	str	r2, [sp, #20]
 80141ae:	9306      	str	r3, [sp, #24]
 80141b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141b4:	931a      	str	r3, [sp, #104]	; 0x68
 80141b6:	2601      	movs	r6, #1
 80141b8:	2205      	movs	r2, #5
 80141ba:	7821      	ldrb	r1, [r4, #0]
 80141bc:	484e      	ldr	r0, [pc, #312]	; (80142f8 <_svfiprintf_r+0x1d4>)
 80141be:	f000 fa75 	bl	80146ac <memchr>
 80141c2:	1c67      	adds	r7, r4, #1
 80141c4:	9b04      	ldr	r3, [sp, #16]
 80141c6:	b138      	cbz	r0, 80141d8 <_svfiprintf_r+0xb4>
 80141c8:	4a4b      	ldr	r2, [pc, #300]	; (80142f8 <_svfiprintf_r+0x1d4>)
 80141ca:	463c      	mov	r4, r7
 80141cc:	1a80      	subs	r0, r0, r2
 80141ce:	fa06 f000 	lsl.w	r0, r6, r0
 80141d2:	4318      	orrs	r0, r3
 80141d4:	9004      	str	r0, [sp, #16]
 80141d6:	e7ef      	b.n	80141b8 <_svfiprintf_r+0x94>
 80141d8:	06d9      	lsls	r1, r3, #27
 80141da:	bf44      	itt	mi
 80141dc:	2220      	movmi	r2, #32
 80141de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80141e2:	071a      	lsls	r2, r3, #28
 80141e4:	bf44      	itt	mi
 80141e6:	222b      	movmi	r2, #43	; 0x2b
 80141e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80141ec:	7822      	ldrb	r2, [r4, #0]
 80141ee:	2a2a      	cmp	r2, #42	; 0x2a
 80141f0:	d003      	beq.n	80141fa <_svfiprintf_r+0xd6>
 80141f2:	9a07      	ldr	r2, [sp, #28]
 80141f4:	2100      	movs	r1, #0
 80141f6:	200a      	movs	r0, #10
 80141f8:	e00b      	b.n	8014212 <_svfiprintf_r+0xee>
 80141fa:	9a03      	ldr	r2, [sp, #12]
 80141fc:	1d11      	adds	r1, r2, #4
 80141fe:	6812      	ldr	r2, [r2, #0]
 8014200:	9103      	str	r1, [sp, #12]
 8014202:	2a00      	cmp	r2, #0
 8014204:	da10      	bge.n	8014228 <_svfiprintf_r+0x104>
 8014206:	4252      	negs	r2, r2
 8014208:	f043 0002 	orr.w	r0, r3, #2
 801420c:	9207      	str	r2, [sp, #28]
 801420e:	9004      	str	r0, [sp, #16]
 8014210:	e00b      	b.n	801422a <_svfiprintf_r+0x106>
 8014212:	4627      	mov	r7, r4
 8014214:	783b      	ldrb	r3, [r7, #0]
 8014216:	3401      	adds	r4, #1
 8014218:	3b30      	subs	r3, #48	; 0x30
 801421a:	2b09      	cmp	r3, #9
 801421c:	d803      	bhi.n	8014226 <_svfiprintf_r+0x102>
 801421e:	fb00 3202 	mla	r2, r0, r2, r3
 8014222:	2101      	movs	r1, #1
 8014224:	e7f5      	b.n	8014212 <_svfiprintf_r+0xee>
 8014226:	b101      	cbz	r1, 801422a <_svfiprintf_r+0x106>
 8014228:	9207      	str	r2, [sp, #28]
 801422a:	783b      	ldrb	r3, [r7, #0]
 801422c:	2b2e      	cmp	r3, #46	; 0x2e
 801422e:	d11e      	bne.n	801426e <_svfiprintf_r+0x14a>
 8014230:	787b      	ldrb	r3, [r7, #1]
 8014232:	2b2a      	cmp	r3, #42	; 0x2a
 8014234:	d10a      	bne.n	801424c <_svfiprintf_r+0x128>
 8014236:	9b03      	ldr	r3, [sp, #12]
 8014238:	3702      	adds	r7, #2
 801423a:	1d1a      	adds	r2, r3, #4
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	9203      	str	r2, [sp, #12]
 8014240:	2b00      	cmp	r3, #0
 8014242:	bfb8      	it	lt
 8014244:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014248:	9305      	str	r3, [sp, #20]
 801424a:	e010      	b.n	801426e <_svfiprintf_r+0x14a>
 801424c:	2300      	movs	r3, #0
 801424e:	4619      	mov	r1, r3
 8014250:	9305      	str	r3, [sp, #20]
 8014252:	1c78      	adds	r0, r7, #1
 8014254:	240a      	movs	r4, #10
 8014256:	4607      	mov	r7, r0
 8014258:	783a      	ldrb	r2, [r7, #0]
 801425a:	3001      	adds	r0, #1
 801425c:	3a30      	subs	r2, #48	; 0x30
 801425e:	2a09      	cmp	r2, #9
 8014260:	d803      	bhi.n	801426a <_svfiprintf_r+0x146>
 8014262:	fb04 2101 	mla	r1, r4, r1, r2
 8014266:	2301      	movs	r3, #1
 8014268:	e7f5      	b.n	8014256 <_svfiprintf_r+0x132>
 801426a:	b103      	cbz	r3, 801426e <_svfiprintf_r+0x14a>
 801426c:	9105      	str	r1, [sp, #20]
 801426e:	2203      	movs	r2, #3
 8014270:	7839      	ldrb	r1, [r7, #0]
 8014272:	4822      	ldr	r0, [pc, #136]	; (80142fc <_svfiprintf_r+0x1d8>)
 8014274:	f000 fa1a 	bl	80146ac <memchr>
 8014278:	b140      	cbz	r0, 801428c <_svfiprintf_r+0x168>
 801427a:	2340      	movs	r3, #64	; 0x40
 801427c:	ebcb 0000 	rsb	r0, fp, r0
 8014280:	fa03 f000 	lsl.w	r0, r3, r0
 8014284:	9b04      	ldr	r3, [sp, #16]
 8014286:	3701      	adds	r7, #1
 8014288:	4318      	orrs	r0, r3
 801428a:	9004      	str	r0, [sp, #16]
 801428c:	7839      	ldrb	r1, [r7, #0]
 801428e:	2206      	movs	r2, #6
 8014290:	481b      	ldr	r0, [pc, #108]	; (8014300 <_svfiprintf_r+0x1dc>)
 8014292:	1c7e      	adds	r6, r7, #1
 8014294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014298:	f000 fa08 	bl	80146ac <memchr>
 801429c:	b188      	cbz	r0, 80142c2 <_svfiprintf_r+0x19e>
 801429e:	4b19      	ldr	r3, [pc, #100]	; (8014304 <_svfiprintf_r+0x1e0>)
 80142a0:	b933      	cbnz	r3, 80142b0 <_svfiprintf_r+0x18c>
 80142a2:	9b03      	ldr	r3, [sp, #12]
 80142a4:	3307      	adds	r3, #7
 80142a6:	f023 0307 	bic.w	r3, r3, #7
 80142aa:	3308      	adds	r3, #8
 80142ac:	9303      	str	r3, [sp, #12]
 80142ae:	e014      	b.n	80142da <_svfiprintf_r+0x1b6>
 80142b0:	ab03      	add	r3, sp, #12
 80142b2:	9300      	str	r3, [sp, #0]
 80142b4:	462a      	mov	r2, r5
 80142b6:	4b14      	ldr	r3, [pc, #80]	; (8014308 <_svfiprintf_r+0x1e4>)
 80142b8:	a904      	add	r1, sp, #16
 80142ba:	4640      	mov	r0, r8
 80142bc:	f3af 8000 	nop.w
 80142c0:	e007      	b.n	80142d2 <_svfiprintf_r+0x1ae>
 80142c2:	ab03      	add	r3, sp, #12
 80142c4:	9300      	str	r3, [sp, #0]
 80142c6:	462a      	mov	r2, r5
 80142c8:	4b0f      	ldr	r3, [pc, #60]	; (8014308 <_svfiprintf_r+0x1e4>)
 80142ca:	a904      	add	r1, sp, #16
 80142cc:	4640      	mov	r0, r8
 80142ce:	f000 f893 	bl	80143f8 <_printf_i>
 80142d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80142d6:	4682      	mov	sl, r0
 80142d8:	d003      	beq.n	80142e2 <_svfiprintf_r+0x1be>
 80142da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142dc:	4453      	add	r3, sl
 80142de:	9309      	str	r3, [sp, #36]	; 0x24
 80142e0:	e742      	b.n	8014168 <_svfiprintf_r+0x44>
 80142e2:	89ab      	ldrh	r3, [r5, #12]
 80142e4:	065b      	lsls	r3, r3, #25
 80142e6:	d401      	bmi.n	80142ec <_svfiprintf_r+0x1c8>
 80142e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80142ea:	e001      	b.n	80142f0 <_svfiprintf_r+0x1cc>
 80142ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142f0:	b01d      	add	sp, #116	; 0x74
 80142f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142f6:	bf00      	nop
 80142f8:	08016250 	.word	0x08016250
 80142fc:	08016256 	.word	0x08016256
 8014300:	0801625a 	.word	0x0801625a
 8014304:	00000000 	.word	0x00000000
 8014308:	08013f75 	.word	0x08013f75

0801430c <_printf_common>:
 801430c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014310:	4691      	mov	r9, r2
 8014312:	461f      	mov	r7, r3
 8014314:	690a      	ldr	r2, [r1, #16]
 8014316:	688b      	ldr	r3, [r1, #8]
 8014318:	4606      	mov	r6, r0
 801431a:	4293      	cmp	r3, r2
 801431c:	bfb8      	it	lt
 801431e:	4613      	movlt	r3, r2
 8014320:	f8c9 3000 	str.w	r3, [r9]
 8014324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014328:	460c      	mov	r4, r1
 801432a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801432e:	b112      	cbz	r2, 8014336 <_printf_common+0x2a>
 8014330:	3301      	adds	r3, #1
 8014332:	f8c9 3000 	str.w	r3, [r9]
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	0699      	lsls	r1, r3, #26
 801433a:	bf42      	ittt	mi
 801433c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014340:	3302      	addmi	r3, #2
 8014342:	f8c9 3000 	strmi.w	r3, [r9]
 8014346:	6825      	ldr	r5, [r4, #0]
 8014348:	f015 0506 	ands.w	r5, r5, #6
 801434c:	d110      	bne.n	8014370 <_printf_common+0x64>
 801434e:	f104 0a19 	add.w	sl, r4, #25
 8014352:	e007      	b.n	8014364 <_printf_common+0x58>
 8014354:	2301      	movs	r3, #1
 8014356:	4652      	mov	r2, sl
 8014358:	4639      	mov	r1, r7
 801435a:	4630      	mov	r0, r6
 801435c:	47c0      	blx	r8
 801435e:	3001      	adds	r0, #1
 8014360:	d01a      	beq.n	8014398 <_printf_common+0x8c>
 8014362:	3501      	adds	r5, #1
 8014364:	68e3      	ldr	r3, [r4, #12]
 8014366:	f8d9 2000 	ldr.w	r2, [r9]
 801436a:	1a9b      	subs	r3, r3, r2
 801436c:	429d      	cmp	r5, r3
 801436e:	dbf1      	blt.n	8014354 <_printf_common+0x48>
 8014370:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014374:	6822      	ldr	r2, [r4, #0]
 8014376:	3300      	adds	r3, #0
 8014378:	bf18      	it	ne
 801437a:	2301      	movne	r3, #1
 801437c:	0692      	lsls	r2, r2, #26
 801437e:	d50f      	bpl.n	80143a0 <_printf_common+0x94>
 8014380:	18e1      	adds	r1, r4, r3
 8014382:	2030      	movs	r0, #48	; 0x30
 8014384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014388:	1c5a      	adds	r2, r3, #1
 801438a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801438e:	4422      	add	r2, r4
 8014390:	3302      	adds	r3, #2
 8014392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014396:	e003      	b.n	80143a0 <_printf_common+0x94>
 8014398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80143a4:	4639      	mov	r1, r7
 80143a6:	4630      	mov	r0, r6
 80143a8:	47c0      	blx	r8
 80143aa:	3001      	adds	r0, #1
 80143ac:	d0f4      	beq.n	8014398 <_printf_common+0x8c>
 80143ae:	6822      	ldr	r2, [r4, #0]
 80143b0:	f8d9 5000 	ldr.w	r5, [r9]
 80143b4:	68e3      	ldr	r3, [r4, #12]
 80143b6:	f002 0206 	and.w	r2, r2, #6
 80143ba:	2a04      	cmp	r2, #4
 80143bc:	bf08      	it	eq
 80143be:	1b5d      	subeq	r5, r3, r5
 80143c0:	6922      	ldr	r2, [r4, #16]
 80143c2:	68a3      	ldr	r3, [r4, #8]
 80143c4:	bf0c      	ite	eq
 80143c6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80143ca:	2500      	movne	r5, #0
 80143cc:	4293      	cmp	r3, r2
 80143ce:	bfc4      	itt	gt
 80143d0:	1a9b      	subgt	r3, r3, r2
 80143d2:	18ed      	addgt	r5, r5, r3
 80143d4:	f04f 0900 	mov.w	r9, #0
 80143d8:	341a      	adds	r4, #26
 80143da:	454d      	cmp	r5, r9
 80143dc:	d009      	beq.n	80143f2 <_printf_common+0xe6>
 80143de:	2301      	movs	r3, #1
 80143e0:	4622      	mov	r2, r4
 80143e2:	4639      	mov	r1, r7
 80143e4:	4630      	mov	r0, r6
 80143e6:	47c0      	blx	r8
 80143e8:	3001      	adds	r0, #1
 80143ea:	d0d5      	beq.n	8014398 <_printf_common+0x8c>
 80143ec:	f109 0901 	add.w	r9, r9, #1
 80143f0:	e7f3      	b.n	80143da <_printf_common+0xce>
 80143f2:	2000      	movs	r0, #0
 80143f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080143f8 <_printf_i>:
 80143f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143fc:	4617      	mov	r7, r2
 80143fe:	7e0a      	ldrb	r2, [r1, #24]
 8014400:	b085      	sub	sp, #20
 8014402:	2a6e      	cmp	r2, #110	; 0x6e
 8014404:	4698      	mov	r8, r3
 8014406:	4606      	mov	r6, r0
 8014408:	460c      	mov	r4, r1
 801440a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801440c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8014410:	f000 80ae 	beq.w	8014570 <_printf_i+0x178>
 8014414:	d811      	bhi.n	801443a <_printf_i+0x42>
 8014416:	2a63      	cmp	r2, #99	; 0x63
 8014418:	d022      	beq.n	8014460 <_printf_i+0x68>
 801441a:	d809      	bhi.n	8014430 <_printf_i+0x38>
 801441c:	2a00      	cmp	r2, #0
 801441e:	f000 80bb 	beq.w	8014598 <_printf_i+0x1a0>
 8014422:	2a58      	cmp	r2, #88	; 0x58
 8014424:	f040 80ca 	bne.w	80145bc <_printf_i+0x1c4>
 8014428:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 801442c:	4983      	ldr	r1, [pc, #524]	; (801463c <_printf_i+0x244>)
 801442e:	e055      	b.n	80144dc <_printf_i+0xe4>
 8014430:	2a64      	cmp	r2, #100	; 0x64
 8014432:	d01e      	beq.n	8014472 <_printf_i+0x7a>
 8014434:	2a69      	cmp	r2, #105	; 0x69
 8014436:	d01c      	beq.n	8014472 <_printf_i+0x7a>
 8014438:	e0c0      	b.n	80145bc <_printf_i+0x1c4>
 801443a:	2a73      	cmp	r2, #115	; 0x73
 801443c:	f000 80b0 	beq.w	80145a0 <_printf_i+0x1a8>
 8014440:	d809      	bhi.n	8014456 <_printf_i+0x5e>
 8014442:	2a6f      	cmp	r2, #111	; 0x6f
 8014444:	d02e      	beq.n	80144a4 <_printf_i+0xac>
 8014446:	2a70      	cmp	r2, #112	; 0x70
 8014448:	f040 80b8 	bne.w	80145bc <_printf_i+0x1c4>
 801444c:	680a      	ldr	r2, [r1, #0]
 801444e:	f042 0220 	orr.w	r2, r2, #32
 8014452:	600a      	str	r2, [r1, #0]
 8014454:	e03e      	b.n	80144d4 <_printf_i+0xdc>
 8014456:	2a75      	cmp	r2, #117	; 0x75
 8014458:	d024      	beq.n	80144a4 <_printf_i+0xac>
 801445a:	2a78      	cmp	r2, #120	; 0x78
 801445c:	d03a      	beq.n	80144d4 <_printf_i+0xdc>
 801445e:	e0ad      	b.n	80145bc <_printf_i+0x1c4>
 8014460:	681a      	ldr	r2, [r3, #0]
 8014462:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8014466:	1d11      	adds	r1, r2, #4
 8014468:	6019      	str	r1, [r3, #0]
 801446a:	6813      	ldr	r3, [r2, #0]
 801446c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014470:	e0a8      	b.n	80145c4 <_printf_i+0x1cc>
 8014472:	6821      	ldr	r1, [r4, #0]
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	f011 0f80 	tst.w	r1, #128	; 0x80
 801447a:	d002      	beq.n	8014482 <_printf_i+0x8a>
 801447c:	1d11      	adds	r1, r2, #4
 801447e:	6019      	str	r1, [r3, #0]
 8014480:	e008      	b.n	8014494 <_printf_i+0x9c>
 8014482:	f011 0f40 	tst.w	r1, #64	; 0x40
 8014486:	f102 0104 	add.w	r1, r2, #4
 801448a:	6019      	str	r1, [r3, #0]
 801448c:	d002      	beq.n	8014494 <_printf_i+0x9c>
 801448e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014492:	e000      	b.n	8014496 <_printf_i+0x9e>
 8014494:	6813      	ldr	r3, [r2, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	da3c      	bge.n	8014514 <_printf_i+0x11c>
 801449a:	222d      	movs	r2, #45	; 0x2d
 801449c:	425b      	negs	r3, r3
 801449e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80144a2:	e037      	b.n	8014514 <_printf_i+0x11c>
 80144a4:	6821      	ldr	r1, [r4, #0]
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80144ac:	d002      	beq.n	80144b4 <_printf_i+0xbc>
 80144ae:	1d11      	adds	r1, r2, #4
 80144b0:	6019      	str	r1, [r3, #0]
 80144b2:	e007      	b.n	80144c4 <_printf_i+0xcc>
 80144b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80144b8:	f102 0104 	add.w	r1, r2, #4
 80144bc:	6019      	str	r1, [r3, #0]
 80144be:	d001      	beq.n	80144c4 <_printf_i+0xcc>
 80144c0:	8813      	ldrh	r3, [r2, #0]
 80144c2:	e000      	b.n	80144c6 <_printf_i+0xce>
 80144c4:	6813      	ldr	r3, [r2, #0]
 80144c6:	7e22      	ldrb	r2, [r4, #24]
 80144c8:	495c      	ldr	r1, [pc, #368]	; (801463c <_printf_i+0x244>)
 80144ca:	2a6f      	cmp	r2, #111	; 0x6f
 80144cc:	bf14      	ite	ne
 80144ce:	220a      	movne	r2, #10
 80144d0:	2208      	moveq	r2, #8
 80144d2:	e01b      	b.n	801450c <_printf_i+0x114>
 80144d4:	2278      	movs	r2, #120	; 0x78
 80144d6:	495a      	ldr	r1, [pc, #360]	; (8014640 <_printf_i+0x248>)
 80144d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80144dc:	6822      	ldr	r2, [r4, #0]
 80144de:	6818      	ldr	r0, [r3, #0]
 80144e0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80144e4:	f100 0504 	add.w	r5, r0, #4
 80144e8:	601d      	str	r5, [r3, #0]
 80144ea:	d103      	bne.n	80144f4 <_printf_i+0xfc>
 80144ec:	0655      	lsls	r5, r2, #25
 80144ee:	d501      	bpl.n	80144f4 <_printf_i+0xfc>
 80144f0:	8803      	ldrh	r3, [r0, #0]
 80144f2:	e000      	b.n	80144f6 <_printf_i+0xfe>
 80144f4:	6803      	ldr	r3, [r0, #0]
 80144f6:	07d0      	lsls	r0, r2, #31
 80144f8:	bf44      	itt	mi
 80144fa:	f042 0220 	orrmi.w	r2, r2, #32
 80144fe:	6022      	strmi	r2, [r4, #0]
 8014500:	b91b      	cbnz	r3, 801450a <_printf_i+0x112>
 8014502:	6822      	ldr	r2, [r4, #0]
 8014504:	f022 0220 	bic.w	r2, r2, #32
 8014508:	6022      	str	r2, [r4, #0]
 801450a:	2210      	movs	r2, #16
 801450c:	2000      	movs	r0, #0
 801450e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8014512:	e001      	b.n	8014518 <_printf_i+0x120>
 8014514:	4949      	ldr	r1, [pc, #292]	; (801463c <_printf_i+0x244>)
 8014516:	220a      	movs	r2, #10
 8014518:	6865      	ldr	r5, [r4, #4]
 801451a:	2d00      	cmp	r5, #0
 801451c:	60a5      	str	r5, [r4, #8]
 801451e:	db08      	blt.n	8014532 <_printf_i+0x13a>
 8014520:	6820      	ldr	r0, [r4, #0]
 8014522:	f020 0004 	bic.w	r0, r0, #4
 8014526:	6020      	str	r0, [r4, #0]
 8014528:	b92b      	cbnz	r3, 8014536 <_printf_i+0x13e>
 801452a:	2d00      	cmp	r5, #0
 801452c:	d17d      	bne.n	801462a <_printf_i+0x232>
 801452e:	4675      	mov	r5, lr
 8014530:	e00c      	b.n	801454c <_printf_i+0x154>
 8014532:	2b00      	cmp	r3, #0
 8014534:	d079      	beq.n	801462a <_printf_i+0x232>
 8014536:	4675      	mov	r5, lr
 8014538:	fbb3 f0f2 	udiv	r0, r3, r2
 801453c:	fb02 3310 	mls	r3, r2, r0, r3
 8014540:	5ccb      	ldrb	r3, [r1, r3]
 8014542:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014546:	4603      	mov	r3, r0
 8014548:	2800      	cmp	r0, #0
 801454a:	d1f5      	bne.n	8014538 <_printf_i+0x140>
 801454c:	2a08      	cmp	r2, #8
 801454e:	d10b      	bne.n	8014568 <_printf_i+0x170>
 8014550:	6823      	ldr	r3, [r4, #0]
 8014552:	07da      	lsls	r2, r3, #31
 8014554:	d508      	bpl.n	8014568 <_printf_i+0x170>
 8014556:	6923      	ldr	r3, [r4, #16]
 8014558:	6862      	ldr	r2, [r4, #4]
 801455a:	429a      	cmp	r2, r3
 801455c:	bfde      	ittt	le
 801455e:	2330      	movle	r3, #48	; 0x30
 8014560:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014564:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014568:	ebc5 030e 	rsb	r3, r5, lr
 801456c:	6123      	str	r3, [r4, #16]
 801456e:	e02e      	b.n	80145ce <_printf_i+0x1d6>
 8014570:	6808      	ldr	r0, [r1, #0]
 8014572:	681a      	ldr	r2, [r3, #0]
 8014574:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014578:	6949      	ldr	r1, [r1, #20]
 801457a:	d003      	beq.n	8014584 <_printf_i+0x18c>
 801457c:	1d10      	adds	r0, r2, #4
 801457e:	6018      	str	r0, [r3, #0]
 8014580:	6813      	ldr	r3, [r2, #0]
 8014582:	e008      	b.n	8014596 <_printf_i+0x19e>
 8014584:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014588:	f102 0004 	add.w	r0, r2, #4
 801458c:	6018      	str	r0, [r3, #0]
 801458e:	6813      	ldr	r3, [r2, #0]
 8014590:	d001      	beq.n	8014596 <_printf_i+0x19e>
 8014592:	8019      	strh	r1, [r3, #0]
 8014594:	e000      	b.n	8014598 <_printf_i+0x1a0>
 8014596:	6019      	str	r1, [r3, #0]
 8014598:	2300      	movs	r3, #0
 801459a:	6123      	str	r3, [r4, #16]
 801459c:	4675      	mov	r5, lr
 801459e:	e016      	b.n	80145ce <_printf_i+0x1d6>
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	1d11      	adds	r1, r2, #4
 80145a4:	6019      	str	r1, [r3, #0]
 80145a6:	6815      	ldr	r5, [r2, #0]
 80145a8:	2100      	movs	r1, #0
 80145aa:	6862      	ldr	r2, [r4, #4]
 80145ac:	4628      	mov	r0, r5
 80145ae:	f000 f87d 	bl	80146ac <memchr>
 80145b2:	b108      	cbz	r0, 80145b8 <_printf_i+0x1c0>
 80145b4:	1b40      	subs	r0, r0, r5
 80145b6:	6060      	str	r0, [r4, #4]
 80145b8:	6863      	ldr	r3, [r4, #4]
 80145ba:	e004      	b.n	80145c6 <_printf_i+0x1ce>
 80145bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80145c4:	2301      	movs	r3, #1
 80145c6:	6123      	str	r3, [r4, #16]
 80145c8:	2300      	movs	r3, #0
 80145ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145ce:	f8cd 8000 	str.w	r8, [sp]
 80145d2:	463b      	mov	r3, r7
 80145d4:	aa03      	add	r2, sp, #12
 80145d6:	4621      	mov	r1, r4
 80145d8:	4630      	mov	r0, r6
 80145da:	f7ff fe97 	bl	801430c <_printf_common>
 80145de:	3001      	adds	r0, #1
 80145e0:	d102      	bne.n	80145e8 <_printf_i+0x1f0>
 80145e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145e6:	e026      	b.n	8014636 <_printf_i+0x23e>
 80145e8:	6923      	ldr	r3, [r4, #16]
 80145ea:	462a      	mov	r2, r5
 80145ec:	4639      	mov	r1, r7
 80145ee:	4630      	mov	r0, r6
 80145f0:	47c0      	blx	r8
 80145f2:	3001      	adds	r0, #1
 80145f4:	d0f5      	beq.n	80145e2 <_printf_i+0x1ea>
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	079b      	lsls	r3, r3, #30
 80145fa:	d510      	bpl.n	801461e <_printf_i+0x226>
 80145fc:	2500      	movs	r5, #0
 80145fe:	f104 0919 	add.w	r9, r4, #25
 8014602:	e007      	b.n	8014614 <_printf_i+0x21c>
 8014604:	2301      	movs	r3, #1
 8014606:	464a      	mov	r2, r9
 8014608:	4639      	mov	r1, r7
 801460a:	4630      	mov	r0, r6
 801460c:	47c0      	blx	r8
 801460e:	3001      	adds	r0, #1
 8014610:	d0e7      	beq.n	80145e2 <_printf_i+0x1ea>
 8014612:	3501      	adds	r5, #1
 8014614:	68e3      	ldr	r3, [r4, #12]
 8014616:	9a03      	ldr	r2, [sp, #12]
 8014618:	1a9b      	subs	r3, r3, r2
 801461a:	429d      	cmp	r5, r3
 801461c:	dbf2      	blt.n	8014604 <_printf_i+0x20c>
 801461e:	68e0      	ldr	r0, [r4, #12]
 8014620:	9b03      	ldr	r3, [sp, #12]
 8014622:	4298      	cmp	r0, r3
 8014624:	bfb8      	it	lt
 8014626:	4618      	movlt	r0, r3
 8014628:	e005      	b.n	8014636 <_printf_i+0x23e>
 801462a:	780b      	ldrb	r3, [r1, #0]
 801462c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014634:	e78a      	b.n	801454c <_printf_i+0x154>
 8014636:	b005      	add	sp, #20
 8014638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801463c:	08016261 	.word	0x08016261
 8014640:	08016272 	.word	0x08016272

08014644 <_read_r>:
 8014644:	b538      	push	{r3, r4, r5, lr}
 8014646:	4c07      	ldr	r4, [pc, #28]	; (8014664 <_read_r+0x20>)
 8014648:	4605      	mov	r5, r0
 801464a:	4608      	mov	r0, r1
 801464c:	4611      	mov	r1, r2
 801464e:	2200      	movs	r2, #0
 8014650:	6022      	str	r2, [r4, #0]
 8014652:	461a      	mov	r2, r3
 8014654:	f7fc fb82 	bl	8010d5c <_read>
 8014658:	1c43      	adds	r3, r0, #1
 801465a:	d102      	bne.n	8014662 <_read_r+0x1e>
 801465c:	6823      	ldr	r3, [r4, #0]
 801465e:	b103      	cbz	r3, 8014662 <_read_r+0x1e>
 8014660:	602b      	str	r3, [r5, #0]
 8014662:	bd38      	pop	{r3, r4, r5, pc}
 8014664:	200010f8 	.word	0x200010f8

08014668 <_fstat_r>:
 8014668:	b538      	push	{r3, r4, r5, lr}
 801466a:	4c07      	ldr	r4, [pc, #28]	; (8014688 <_fstat_r+0x20>)
 801466c:	2300      	movs	r3, #0
 801466e:	4605      	mov	r5, r0
 8014670:	4608      	mov	r0, r1
 8014672:	4611      	mov	r1, r2
 8014674:	6023      	str	r3, [r4, #0]
 8014676:	f7fc fc74 	bl	8010f62 <_fstat>
 801467a:	1c43      	adds	r3, r0, #1
 801467c:	d102      	bne.n	8014684 <_fstat_r+0x1c>
 801467e:	6823      	ldr	r3, [r4, #0]
 8014680:	b103      	cbz	r3, 8014684 <_fstat_r+0x1c>
 8014682:	602b      	str	r3, [r5, #0]
 8014684:	bd38      	pop	{r3, r4, r5, pc}
 8014686:	bf00      	nop
 8014688:	200010f8 	.word	0x200010f8

0801468c <_isatty_r>:
 801468c:	b538      	push	{r3, r4, r5, lr}
 801468e:	4c06      	ldr	r4, [pc, #24]	; (80146a8 <_isatty_r+0x1c>)
 8014690:	2300      	movs	r3, #0
 8014692:	4605      	mov	r5, r0
 8014694:	4608      	mov	r0, r1
 8014696:	6023      	str	r3, [r4, #0]
 8014698:	f7fc fd37 	bl	801110a <_isatty>
 801469c:	1c43      	adds	r3, r0, #1
 801469e:	d102      	bne.n	80146a6 <_isatty_r+0x1a>
 80146a0:	6823      	ldr	r3, [r4, #0]
 80146a2:	b103      	cbz	r3, 80146a6 <_isatty_r+0x1a>
 80146a4:	602b      	str	r3, [r5, #0]
 80146a6:	bd38      	pop	{r3, r4, r5, pc}
 80146a8:	200010f8 	.word	0x200010f8

080146ac <memchr>:
 80146ac:	b510      	push	{r4, lr}
 80146ae:	b2c9      	uxtb	r1, r1
 80146b0:	4402      	add	r2, r0
 80146b2:	4290      	cmp	r0, r2
 80146b4:	4603      	mov	r3, r0
 80146b6:	d005      	beq.n	80146c4 <memchr+0x18>
 80146b8:	781c      	ldrb	r4, [r3, #0]
 80146ba:	3001      	adds	r0, #1
 80146bc:	428c      	cmp	r4, r1
 80146be:	d1f8      	bne.n	80146b2 <memchr+0x6>
 80146c0:	4618      	mov	r0, r3
 80146c2:	bd10      	pop	{r4, pc}
 80146c4:	2000      	movs	r0, #0
 80146c6:	bd10      	pop	{r4, pc}

080146c8 <memmove>:
 80146c8:	4288      	cmp	r0, r1
 80146ca:	b510      	push	{r4, lr}
 80146cc:	eb01 0302 	add.w	r3, r1, r2
 80146d0:	d801      	bhi.n	80146d6 <memmove+0xe>
 80146d2:	1e42      	subs	r2, r0, #1
 80146d4:	e00b      	b.n	80146ee <memmove+0x26>
 80146d6:	4298      	cmp	r0, r3
 80146d8:	d2fb      	bcs.n	80146d2 <memmove+0xa>
 80146da:	1881      	adds	r1, r0, r2
 80146dc:	1ad2      	subs	r2, r2, r3
 80146de:	42d3      	cmn	r3, r2
 80146e0:	d004      	beq.n	80146ec <memmove+0x24>
 80146e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80146e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80146ea:	e7f8      	b.n	80146de <memmove+0x16>
 80146ec:	bd10      	pop	{r4, pc}
 80146ee:	4299      	cmp	r1, r3
 80146f0:	d004      	beq.n	80146fc <memmove+0x34>
 80146f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80146fa:	e7f8      	b.n	80146ee <memmove+0x26>
 80146fc:	bd10      	pop	{r4, pc}
	...

08014700 <__EH_FRAME_BEGIN__>:
 8014700:	0000 0000                                   ....

08014704 <_init>:
 8014704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014706:	bf00      	nop
 8014708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801470a:	bc08      	pop	{r3}
 801470c:	469e      	mov	lr, r3
 801470e:	4770      	bx	lr

08014710 <_fini>:
 8014710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014712:	bf00      	nop
 8014714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014716:	bc08      	pop	{r3}
 8014718:	469e      	mov	lr, r3
 801471a:	4770      	bx	lr
