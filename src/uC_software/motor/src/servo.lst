   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"servo.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN5servo9motorTypeEv,"axG",%progbits,_ZN5servo9motorTypeEv,comdat
  20              		.align	1
  21              		.weak	_ZN5servo9motorTypeEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN5servo9motorTypeEv:
  26              		.fnstart
  27              	.LFB1021:
  28              		.file 1 "./inc/servo.h"
   1:./inc/servo.h **** 
   2:./inc/servo.h **** #ifndef _servo_H
   3:./inc/servo.h **** #define	_servo_H
   4:./inc/servo.h **** 
   5:./inc/servo.h **** #include <stm32f10x.h>
   6:./inc/servo.h **** #include "motor.h"
   7:./inc/servo.h **** 
   8:./inc/servo.h **** class servo : public motor
   9:./inc/servo.h **** {
  10:./inc/servo.h **** public:
  11:./inc/servo.h ****     servo(motorSettings *settings);
  12:./inc/servo.h ****     ~servo();
  13:./inc/servo.h **** 
  14:./inc/servo.h ****     virtual void setReference(float setPoint);
  15:./inc/servo.h ****     virtual float getReference();
  16:./inc/servo.h ****     virtual const char* motorName();
  17:./inc/servo.h ****     virtual std::tuple<float, float, int, int> update(float dt, bool connected);
  18:./inc/servo.h **** 
  19:./inc/servo.h ****     virtual int motorType() { return MOTOR_TYPE_SERVO; }
  29              		.loc 1 19 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              		.loc 1 19 0
  36 0000 0120     		movs	r0, #1
  37              	.LVL1:
  38 0002 7047     		bx	lr
  39              		.cfi_endproc
  40              	.LFE1021:
  41              		.cantunwind
  42              		.fnend
  44              		.text
  45              		.align	1
  46              		.global	_ZN5servo12setReferenceEf
  47              		.thumb
  48              		.thumb_func
  50              	_ZN5servo12setReferenceEf:
  51              		.fnstart
  52              	.LFB1030:
  53              		.file 2 "src/servo.cpp"
   1:src/servo.cpp **** 
   2:src/servo.cpp **** #include "servo.h"
   3:src/servo.cpp **** #include "motorSettings.h"
   4:src/servo.cpp **** 
   5:src/servo.cpp **** 
   6:src/servo.cpp **** servo::servo(motorSettings *settings) : motor(settings)
   7:src/servo.cpp **** {
   8:src/servo.cpp **** 
   9:src/servo.cpp **** }
  10:src/servo.cpp **** 
  11:src/servo.cpp **** servo::~servo()
  12:src/servo.cpp **** {
  13:src/servo.cpp **** }
  14:src/servo.cpp **** 
  15:src/servo.cpp **** bool servo::motorInit()
  16:src/servo.cpp **** {
  17:src/servo.cpp **** 
  18:src/servo.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
  19:src/servo.cpp **** 
  20:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
  21:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  22:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  23:src/servo.cpp **** 	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
  24:src/servo.cpp **** 
  25:src/servo.cpp **** 
  26:src/servo.cpp **** 
  27:src/servo.cpp **** 
  28:src/servo.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  29:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
  30:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 23;
  31:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  32:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  33:src/servo.cpp **** 
  34:src/servo.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
  35:src/servo.cpp **** 
  36:src/servo.cpp **** 
  37:src/servo.cpp **** 	TIM_OCInitTypeDef TIM_OCInitStructure;
  38:src/servo.cpp **** 	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
  39:src/servo.cpp **** 
  40:src/servo.cpp **** 	/* PWM1 Mode configuration: Channel1 */
  41:src/servo.cpp **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  42:src/servo.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  43:src/servo.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
  44:src/servo.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  45:src/servo.cpp **** 
  46:src/servo.cpp **** 	switch(m_settings->m_TimerChannel){
  47:src/servo.cpp **** 		case 1:
  48:src/servo.cpp **** 			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
  49:src/servo.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  50:src/servo.cpp **** 			break;
  51:src/servo.cpp **** 		case 2:
  52:src/servo.cpp **** 			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
  53:src/servo.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  54:src/servo.cpp **** 			break;
  55:src/servo.cpp **** 		case 3:
  56:src/servo.cpp **** 			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
  57:src/servo.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  58:src/servo.cpp **** 			break;
  59:src/servo.cpp **** 		case 4:
  60:src/servo.cpp **** 			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
  61:src/servo.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  62:src/servo.cpp **** 			break;
  63:src/servo.cpp **** 		default:
  64:src/servo.cpp **** 			return false;
  65:src/servo.cpp **** 	}
  66:src/servo.cpp **** 
  67:src/servo.cpp **** 
  68:src/servo.cpp **** 	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
  69:src/servo.cpp **** 
  70:src/servo.cpp **** 	/* TIM Main Output Enable */
  71:src/servo.cpp **** 	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
  72:src/servo.cpp **** 
  73:src/servo.cpp **** 	/* TIM enable counter */
  74:src/servo.cpp **** 	TIM_Cmd(m_settings->m_Timer, ENABLE);
  75:src/servo.cpp **** 
  76:src/servo.cpp **** 	return true;
  77:src/servo.cpp **** }
  78:src/servo.cpp **** 
  79:src/servo.cpp **** void servo::setReference(float setPoint){
  54              		.loc 2 79 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.LVL2:
  60 0000 7047     		bx	lr
  61              		.cfi_endproc
  62              	.LFE1030:
  63              		.cantunwind
  64              		.fnend
  66              		.global	__aeabi_i2f
  67              		.align	1
  68              		.global	_ZN5servo12getReferenceEv
  69              		.thumb
  70              		.thumb_func
  72              	_ZN5servo12getReferenceEv:
  73              		.fnstart
  74              	.LFB1031:
  80:src/servo.cpp **** 	//pos = (int)setPoint > 90? 90 : ( (int)setPoint < -MAX_ANGLE_PIVOT? -MAX_ANGLE_PIVOT : (int)setPo
  81:src/servo.cpp **** }
  82:src/servo.cpp **** 
  83:src/servo.cpp **** float servo::getReference(){
  75              		.loc 2 83 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL3:
  80              		.loc 2 83 0
  81 0002 08B5     		push	{r3, lr}
  82              	.LCFI0:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 3, -8
  85              		.cfi_offset 14, -4
  84:src/servo.cpp **** 	return (float)pos;
  86              		.loc 2 84 0
  87 0004 8068     		ldr	r0, [r0, #8]
  88              	.LVL4:
  89 0006 FFF7FEFF 		bl	__aeabi_i2f
  90              	.LVL5:
  85:src/servo.cpp **** }
  91              		.loc 2 85 0
  92 000a 08BD     		pop	{r3, pc}
  93              		.cfi_endproc
  94              	.LFE1031:
  95              		.cantunwind
  96              		.fnend
  98              		.align	1
  99              		.global	_ZN5servo9motorNameEv
 100              		.thumb
 101              		.thumb_func
 103              	_ZN5servo9motorNameEv:
 104              		.fnstart
 105              	.LFB1032:
  86:src/servo.cpp **** const char* servo::motorName(){
 106              		.loc 2 86 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111              	.LVL6:
  87:src/servo.cpp **** 	return m_settings->m_motorName;
 112              		.loc 2 87 0
 113 000c 4368     		ldr	r3, [r0, #4]
  88:src/servo.cpp **** }
 114              		.loc 2 88 0
 115 000e 5868     		ldr	r0, [r3, #4]
 116              	.LVL7:
 117 0010 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE1032:
 120              		.cantunwind
 121              		.fnend
 123              		.global	__aeabi_fmul
 124              		.global	__aeabi_fsub
 125              		.global	__aeabi_f2iz
 126              		.align	1
 127              		.global	_ZN5servo6updateEfb
 128              		.thumb
 129              		.thumb_func
 131              	_ZN5servo6updateEfb:
 132              		.fnstart
 133              	.LFB1033:
  89:src/servo.cpp **** 
  90:src/servo.cpp **** std::tuple<float, float, int, int> servo::update(float dt, bool connected){
 134              		.loc 2 90 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              	.LVL8:
  91:src/servo.cpp **** 	float LPF_Beta = 0.06;
  92:src/servo.cpp **** 	int sp = pos * (m_settings->m_ServoLimitMax - m_settings->m_ServoLimitMin) / 180 + m_settings->m_S
 139              		.loc 2 92 0
 140 0012 4A68     		ldr	r2, [r1, #4]
 141              	.LVL9:
  90:src/servo.cpp **** 	float LPF_Beta = 0.06;
 142              		.loc 2 90 0
 143 0014 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 144              	.LCFI1:
 145              		.cfi_def_cfa_offset 24
 146              		.cfi_offset 4, -24
 147              		.cfi_offset 5, -20
 148              		.cfi_offset 6, -16
 149              		.cfi_offset 7, -12
 150              		.cfi_offset 8, -8
 151              		.cfi_offset 14, -4
 152              		.loc 2 92 0
 153 0018 5769     		ldr	r7, [r2, #20]
  90:src/servo.cpp **** 	float LPF_Beta = 0.06;
 154              		.loc 2 90 0
 155 001a 0546     		mov	r5, r0
 156              		.loc 2 92 0
 157 001c 1069     		ldr	r0, [r2, #16]
 158              	.LVL10:
 159 001e B424     		movs	r4, #180
 160 0020 C61B     		subs	r6, r0, r7
 161 0022 8868     		ldr	r0, [r1, #8]
 162 0024 00FB06F1 		mul	r1, r0, r6
 163              	.LVL11:
 164 0028 91FBF4F1 		sdiv	r1, r1, r4
 165 002c CC19     		adds	r4, r1, r7
 166              	.LVL12:
  93:src/servo.cpp **** 	int curr, newVal;
  94:src/servo.cpp **** 	switch(m_settings->m_TimerChannel){
 167              		.loc 2 94 0
 168 002e D168     		ldr	r1, [r2, #12]
 169 0030 0139     		subs	r1, r1, #1
 170 0032 0329     		cmp	r1, #3
 171 0034 60D8     		bhi	.L6
 172 0036 DFE801F0 		tbb	[pc, r1]
 173              	.L8:
 174 003a 02       		.byte	(.L7-.L8)/2
 175 003b 19       		.byte	(.L9-.L8)/2
 176 003c 30       		.byte	(.L10-.L8)/2
 177 003d 47       		.byte	(.L11-.L8)/2
 178              		.p2align 1
 179              	.L7:
  95:src/servo.cpp **** 		case 1:
  96:src/servo.cpp **** 			curr = (m_settings->m_Timer)->CCR1;
 180              		.loc 2 96 0
 181 003e 9768     		ldr	r7, [r2, #8]
 182 0040 BE8E     		ldrh	r6, [r7, #52]
 183 0042 B6B2     		uxth	r6, r6
 184              	.LVL13:
  97:src/servo.cpp **** 			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 185              		.loc 2 97 0
 186 0044 3046     		mov	r0, r6
 187 0046 FFF7FEFF 		bl	__aeabi_i2f
 188              	.LVL14:
 189 004a 8046     		mov	r8, r0
 190 004c 301B     		subs	r0, r6, r4
 191 004e FFF7FEFF 		bl	__aeabi_i2f
 192              	.LVL15:
 193 0052 2E49     		ldr	r1, .L13
 194 0054 FFF7FEFF 		bl	__aeabi_fmul
 195              	.LVL16:
 196 0058 0146     		mov	r1, r0
 197 005a 4046     		mov	r0, r8
 198 005c FFF7FEFF 		bl	__aeabi_fsub
 199              	.LVL17:
 200 0060 FFF7FEFF 		bl	__aeabi_f2iz
 201              	.LVL18:
  98:src/servo.cpp **** 			(m_settings->m_Timer)->CCR1 = newVal;
 202              		.loc 2 98 0
 203 0064 82B2     		uxth	r2, r0
  97:src/servo.cpp **** 			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 204              		.loc 2 97 0
 205 0066 0346     		mov	r3, r0
 206              	.LVL19:
 207              		.loc 2 98 0
 208 0068 BA86     		strh	r2, [r7, #52]	@ movhi
  99:src/servo.cpp **** 			break;
 209              		.loc 2 99 0
 210 006a 45E0     		b	.L6
 211              	.LVL20:
 212              	.L9:
 100:src/servo.cpp **** 		case 2:
 101:src/servo.cpp **** 			curr = (m_settings->m_Timer)->CCR2;
 213              		.loc 2 101 0
 214 006c 9768     		ldr	r7, [r2, #8]
 215 006e 3E8F     		ldrh	r6, [r7, #56]
 216 0070 B6B2     		uxth	r6, r6
 217              	.LVL21:
 102:src/servo.cpp **** 			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 218              		.loc 2 102 0
 219 0072 3046     		mov	r0, r6
 220 0074 FFF7FEFF 		bl	__aeabi_i2f
 221              	.LVL22:
 222 0078 8046     		mov	r8, r0
 223 007a 301B     		subs	r0, r6, r4
 224 007c FFF7FEFF 		bl	__aeabi_i2f
 225              	.LVL23:
 226 0080 2249     		ldr	r1, .L13
 227 0082 FFF7FEFF 		bl	__aeabi_fmul
 228              	.LVL24:
 229 0086 0146     		mov	r1, r0
 230 0088 4046     		mov	r0, r8
 231 008a FFF7FEFF 		bl	__aeabi_fsub
 232              	.LVL25:
 233 008e FFF7FEFF 		bl	__aeabi_f2iz
 234              	.LVL26:
 103:src/servo.cpp **** 			(m_settings->m_Timer)->CCR2 = newVal;
 235              		.loc 2 103 0
 236 0092 82B2     		uxth	r2, r0
 102:src/servo.cpp **** 			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 237              		.loc 2 102 0
 238 0094 0346     		mov	r3, r0
 239              	.LVL27:
 240              		.loc 2 103 0
 241 0096 3A87     		strh	r2, [r7, #56]	@ movhi
 104:src/servo.cpp **** 			break;
 242              		.loc 2 104 0
 243 0098 2EE0     		b	.L6
 244              	.LVL28:
 245              	.L10:
 105:src/servo.cpp **** 		case 3:
 106:src/servo.cpp **** 			curr = (m_settings->m_Timer)->CCR3;
 246              		.loc 2 106 0
 247 009a 9768     		ldr	r7, [r2, #8]
 248 009c BE8F     		ldrh	r6, [r7, #60]
 249 009e B6B2     		uxth	r6, r6
 250              	.LVL29:
 107:src/servo.cpp **** 			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 251              		.loc 2 107 0
 252 00a0 3046     		mov	r0, r6
 253 00a2 FFF7FEFF 		bl	__aeabi_i2f
 254              	.LVL30:
 255 00a6 8046     		mov	r8, r0
 256 00a8 301B     		subs	r0, r6, r4
 257 00aa FFF7FEFF 		bl	__aeabi_i2f
 258              	.LVL31:
 259 00ae 1749     		ldr	r1, .L13
 260 00b0 FFF7FEFF 		bl	__aeabi_fmul
 261              	.LVL32:
 262 00b4 0146     		mov	r1, r0
 263 00b6 4046     		mov	r0, r8
 264 00b8 FFF7FEFF 		bl	__aeabi_fsub
 265              	.LVL33:
 266 00bc FFF7FEFF 		bl	__aeabi_f2iz
 267              	.LVL34:
 108:src/servo.cpp **** 			(m_settings->m_Timer)->CCR3 = newVal;
 268              		.loc 2 108 0
 269 00c0 82B2     		uxth	r2, r0
 107:src/servo.cpp **** 			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 270              		.loc 2 107 0
 271 00c2 0346     		mov	r3, r0
 272              	.LVL35:
 273              		.loc 2 108 0
 274 00c4 BA87     		strh	r2, [r7, #60]	@ movhi
 109:src/servo.cpp **** 			break;
 275              		.loc 2 109 0
 276 00c6 17E0     		b	.L6
 277              	.LVL36:
 278              	.L11:
 110:src/servo.cpp **** 		case 4:
 111:src/servo.cpp **** 			curr = (m_settings->m_Timer)->CCR4;
 279              		.loc 2 111 0
 280 00c8 9768     		ldr	r7, [r2, #8]
 281 00ca B7F84060 		ldrh	r6, [r7, #64]
 282 00ce B6B2     		uxth	r6, r6
 283              	.LVL37:
 112:src/servo.cpp **** 			newVal = (int)(curr - (LPF_Beta * (curr - sp)));
 284              		.loc 2 112 0
 285 00d0 3046     		mov	r0, r6
 286 00d2 FFF7FEFF 		bl	__aeabi_i2f
 287              	.LVL38:
 288 00d6 8046     		mov	r8, r0
 289 00d8 301B     		subs	r0, r6, r4
 290 00da FFF7FEFF 		bl	__aeabi_i2f
 291              	.LVL39:
 292 00de 0B49     		ldr	r1, .L13
 293 00e0 FFF7FEFF 		bl	__aeabi_fmul
 294              	.LVL40:
 295 00e4 0146     		mov	r1, r0
 296 00e6 4046     		mov	r0, r8
 297 00e8 FFF7FEFF 		bl	__aeabi_fsub
 298              	.LVL41:
 299 00ec FFF7FEFF 		bl	__aeabi_f2iz
 300              	.LVL42:
 301 00f0 0346     		mov	r3, r0
 302              	.LVL43:
 113:src/servo.cpp **** 			(m_settings->m_Timer)->CCR4 = newVal;
 303              		.loc 2 113 0
 304 00f2 82B2     		uxth	r2, r0
 305 00f4 A7F84020 		strh	r2, [r7, #64]	@ movhi
 306              	.LVL44:
 307              	.L6:
 308              	.LBB537:
 309              	.LBB538:
 310              	.LBB539:
 311              	.LBB540:
 312              	.LBB541:
 313              	.LBB542:
 314              	.LBB543:
 315              	.LBB544:
 316              	.LBB545:
 317              	.LBB546:
 318              	.LBB547:
 319              	.LBB548:
 320              	.LBB549:
 321              		.file 3 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple"
   1:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // <tuple> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
   3:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // Copyright (C) 2007-2015 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** //
   5:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // any later version.
  10:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  11:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  16:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  20:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  25:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** /** @file include/tuple
  26:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****  *  This is a Standard C++ Library header.
  27:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****  */
  28:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  29:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #ifndef _GLIBCXX_TUPLE
  30:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #define _GLIBCXX_TUPLE 1
  31:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  32:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  34:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** # include <bits/c++0x_warning.h>
  36:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #else
  37:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  38:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #include <utility>
  39:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #include <array>
  40:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #include <bits/uses_allocator.h>
  41:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  42:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** {
  44:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  46:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   /**
  47:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    *  @addtogroup utilities
  48:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    *  @{
  49:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    */
  50:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  51:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>
  52:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Head_base;
  53:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  54:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename _Head>
  55:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Head_base<_Idx, _Head, true>
  56:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     : public _Head
  57:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     {
  58:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base()
  59:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Head() { }
  60:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  61:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(const _Head& __h)
  62:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Head(__h) { }
  63:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  64:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(const _Head_base&) = default;
  65:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(_Head_base&&) = default;
  66:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  67:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
  68:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Head_base(_UHead&& __h)
  69:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(std::forward<_UHead>(__h)) { }
  70:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  71:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
  72:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Head() { }
  73:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  74:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
  75:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
  76:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(allocator_arg, *__a._M_a) { }
  77:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  78:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
  79:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
  80:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(*__a._M_a) { }
  81:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  82:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
  83:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
  84:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(std::forward<_UHead>(__uhead)) { }
  85:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  86:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
  87:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
  88:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }
  89:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  90:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
  91:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
  92:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }
  93:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  94:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr _Head&
  95:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(_Head_base& __b) noexcept { return __b; }
  96:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  97:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr const _Head&
  98:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b; }
  99:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     };
 100:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 101:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename _Head>
 102:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Head_base<_Idx, _Head, false>
 103:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     {
 104:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base()
 105:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _M_head_impl() { }
 106:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 107:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(const _Head& __h)
 108:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _M_head_impl(__h) { }
 109:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 110:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(const _Head_base&) = default;
 111:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(_Head_base&&) = default;
 112:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 113:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
 114:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Head_base(_UHead&& __h)
 115:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__h)) { }
 322              		.loc 3 115 0
 323 00f8 0022     		movs	r2, #0
 324              	.LBE549:
 325              	.LBE548:
 326              	.LBE547:
 327              	.LBE546:
 328              	.LBE545:
 329              	.LBB550:
 330              	.LBB551:
 331              	.LBB552:
 332 00fa 85E80C00 		stmia	r5, {r2, r3}
 333              	.LVL45:
 334              	.LBE552:
 335              	.LBE551:
 336              	.LBE550:
 337              	.LBE544:
 338              	.LBE543:
 339              	.LBB553:
 340              	.LBB554:
 341              	.LBB555:
 342 00fe 0023     		movs	r3, #0
 343              	.LVL46:
 344 0100 AB60     		str	r3, [r5, #8]	@ float
 345              	.LVL47:
 346              	.LBE555:
 347              	.LBE554:
 348              	.LBE553:
 349              	.LBE542:
 350              	.LBE541:
 351              	.LBB556:
 352              	.LBB557:
 353              	.LBB558:
 354 0102 EB60     		str	r3, [r5, #12]	@ float
 355              	.LVL48:
 356              	.LBE558:
 357              	.LBE557:
 358              	.LBE556:
 359              	.LBE540:
 360              	.LBE539:
 361              	.LBE538:
 362              	.LBE537:
 114:src/servo.cpp **** 			break;
 115:src/servo.cpp **** 	}
 116:src/servo.cpp **** 	return std::make_tuple(0, 0.0, newVal, 0);
 117:src/servo.cpp **** }...
 363              		.loc 2 117 0
 364 0104 2846     		mov	r0, r5
 365 0106 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 366              	.LVL49:
 367              	.L14:
 368 010a 00BF     		.align	2
 369              	.L13:
 370 010c 8FC2753D 		.word	1031127695
 371              		.cfi_endproc
 372              	.LFE1033:
 373              		.cantunwind
 374              		.fnend
 376              		.align	1
 377              		.global	_ZN5servoD2Ev
 378              		.thumb
 379              		.thumb_func
 381              	_ZN5servoD2Ev:
 382              		.fnstart
 383              	.LFB1026:
  11:src/servo.cpp **** servo::~servo()
 384              		.loc 2 11 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL50:
 389 0110 10B5     		push	{r4, lr}
 390              	.LCFI2:
 391              		.cfi_def_cfa_offset 8
 392              		.cfi_offset 4, -8
 393              		.cfi_offset 14, -4
  11:src/servo.cpp **** servo::~servo()
 394              		.loc 2 11 0
 395 0112 0446     		mov	r4, r0
 396              	.LBB559:
 397 0114 024B     		ldr	r3, .L16
 398 0116 0360     		str	r3, [r0]
 399 0118 FFF7FEFF 		bl	_ZN5motorD2Ev
 400              	.LVL51:
 401              	.LBE559:
  13:src/servo.cpp **** }
 402              		.loc 2 13 0
 403 011c 2046     		mov	r0, r4
 404 011e 10BD     		pop	{r4, pc}
 405              	.LVL52:
 406              	.L17:
 407              		.align	2
 408              	.L16:
 409 0120 08000000 		.word	.LANCHOR0+8
 410              		.cfi_endproc
 411              	.LFE1026:
 412              		.cantunwind
 413              		.fnend
 415              		.global	_ZN5servoD1Ev
 416              		.thumb_set _ZN5servoD1Ev,_ZN5servoD2Ev
 417              		.align	1
 418              		.global	_ZN5servoD0Ev
 419              		.thumb
 420              		.thumb_func
 422              	_ZN5servoD0Ev:
 423              		.fnstart
 424              	.LFB1028:
  11:src/servo.cpp **** servo::~servo()
 425              		.loc 2 11 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              	.LVL53:
 430 0124 10B5     		push	{r4, lr}
 431              	.LCFI3:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 4, -8
 434              		.cfi_offset 14, -4
  11:src/servo.cpp **** servo::~servo()
 435              		.loc 2 11 0
 436 0126 0446     		mov	r4, r0
  13:src/servo.cpp **** }
 437              		.loc 2 13 0
 438 0128 FFF7FEFF 		bl	_ZN5servoD1Ev
 439              	.LVL54:
 440 012c 2046     		mov	r0, r4
 441 012e FFF7FEFF 		bl	_ZdlPv
 442              	.LVL55:
 443 0132 2046     		mov	r0, r4
 444 0134 10BD     		pop	{r4, pc}
 445              		.cfi_endproc
 446              	.LFE1028:
 447              		.cantunwind
 448              		.fnend
 450              		.align	1
 451              		.global	_ZN5servo9motorInitEv
 452              		.thumb
 453              		.thumb_func
 455              	_ZN5servo9motorInitEv:
 456              		.fnstart
 457              	.LFB1029:
  16:src/servo.cpp **** {
 458              		.loc 2 16 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 32
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              	.LVL56:
 463 0136 30B5     		push	{r4, r5, lr}
 464              		.save {r4, r5, lr}
 465              	.LCFI4:
 466              		.cfi_def_cfa_offset 12
 467              		.cfi_offset 4, -12
 468              		.cfi_offset 5, -8
 469              		.cfi_offset 14, -4
  20:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 470              		.loc 2 20 0
 471 0138 4368     		ldr	r3, [r0, #4]
  16:src/servo.cpp **** {
 472              		.loc 2 16 0
 473              		.pad #36
 474 013a 89B0     		sub	sp, sp, #36
 475              	.LCFI5:
 476              		.cfi_def_cfa_offset 48
  20:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 477              		.loc 2 20 0
 478 013c 9A69     		ldr	r2, [r3, #24]
  16:src/servo.cpp **** {
 479              		.loc 2 16 0
 480 013e 0446     		mov	r4, r0
  20:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_ServoPin;
 481              		.loc 2 20 0
 482 0140 ADF80020 		strh	r2, [sp]	@ movhi
  21:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 483              		.loc 2 21 0
 484 0144 1822     		movs	r2, #24
  23:src/servo.cpp **** 	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 485              		.loc 2 23 0
 486 0146 D869     		ldr	r0, [r3, #28]
 487              	.LVL57:
  21:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 488              		.loc 2 21 0
 489 0148 8DF80320 		strb	r2, [sp, #3]
  23:src/servo.cpp **** 	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 490              		.loc 2 23 0
 491 014c 6946     		mov	r1, sp
  22:src/servo.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 492              		.loc 2 22 0
 493 014e 0322     		movs	r2, #3
 494 0150 8DF80220 		strb	r2, [sp, #2]
  23:src/servo.cpp **** 	GPIO_Init(m_settings->m_ServoPort, &GPIO_InitStructure);
 495              		.loc 2 23 0
 496 0154 FFF7FEFF 		bl	GPIO_Init
 497              	.LVL58:
  29:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_Period = 59999; // ie 0..29999
 498              		.loc 2 29 0
 499 0158 4EF65F23 		movw	r3, #59999
 500 015c ADF80830 		strh	r3, [sp, #8]	@ movhi
  30:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = 23;
 501              		.loc 2 30 0
 502 0160 1723     		movs	r3, #23
 503 0162 ADF80430 		strh	r3, [sp, #4]	@ movhi
  34:src/servo.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 504              		.loc 2 34 0
 505 0166 6368     		ldr	r3, [r4, #4]
  31:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 506              		.loc 2 31 0
 507 0168 0025     		movs	r5, #0
  34:src/servo.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 508              		.loc 2 34 0
 509 016a 9868     		ldr	r0, [r3, #8]
 510 016c 01A9     		add	r1, sp, #4
  31:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 511              		.loc 2 31 0
 512 016e ADF80A50 		strh	r5, [sp, #10]	@ movhi
  32:src/servo.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 513              		.loc 2 32 0
 514 0172 ADF80650 		strh	r5, [sp, #6]	@ movhi
  34:src/servo.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
 515              		.loc 2 34 0
 516 0176 FFF7FEFF 		bl	TIM_TimeBaseInit
 517              	.LVL59:
  38:src/servo.cpp **** 	TIM_OCStructInit(&TIM_OCInitStructure); // clears the other 4 fields not used here
 518              		.loc 2 38 0
 519 017a 04A8     		add	r0, sp, #16
 520 017c FFF7FEFF 		bl	TIM_OCStructInit
 521              	.LVL60:
  41:src/servo.cpp **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 522              		.loc 2 41 0
 523 0180 6023     		movs	r3, #96
 524 0182 ADF81030 		strh	r3, [sp, #16]	@ movhi
  42:src/servo.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 525              		.loc 2 42 0
 526 0186 0123     		movs	r3, #1
 527 0188 ADF81230 		strh	r3, [sp, #18]	@ movhi
  46:src/servo.cpp **** 	switch(m_settings->m_TimerChannel){
 528              		.loc 2 46 0
 529 018c 6368     		ldr	r3, [r4, #4]
  43:src/servo.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 530              		.loc 2 43 0
 531 018e ADF81650 		strh	r5, [sp, #22]	@ movhi
  46:src/servo.cpp **** 	switch(m_settings->m_TimerChannel){
 532              		.loc 2 46 0
 533 0192 DA68     		ldr	r2, [r3, #12]
  44:src/servo.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 534              		.loc 2 44 0
 535 0194 ADF81850 		strh	r5, [sp, #24]	@ movhi
  46:src/servo.cpp **** 	switch(m_settings->m_TimerChannel){
 536              		.loc 2 46 0
 537 0198 013A     		subs	r2, r2, #1
 538 019a 032A     		cmp	r2, #3
 539 019c 3BD8     		bhi	.L27
 540 019e DFE802F0 		tbb	[pc, r2]
 541              	.L22:
 542 01a2 02       		.byte	(.L21-.L22)/2
 543 01a3 0C       		.byte	(.L23-.L22)/2
 544 01a4 16       		.byte	(.L24-.L22)/2
 545 01a5 20       		.byte	(.L25-.L22)/2
 546              		.p2align 1
 547              	.L21:
  48:src/servo.cpp **** 			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
 548              		.loc 2 48 0
 549 01a6 04A9     		add	r1, sp, #16
 550 01a8 9868     		ldr	r0, [r3, #8]
 551 01aa FFF7FEFF 		bl	TIM_OC1Init
 552              	.LVL61:
  49:src/servo.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 553              		.loc 2 49 0
 554 01ae 6368     		ldr	r3, [r4, #4]
 555 01b0 0821     		movs	r1, #8
 556 01b2 9868     		ldr	r0, [r3, #8]
 557 01b4 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 558              	.LVL62:
 559 01b8 1CE0     		b	.L26
 560              	.L23:
  52:src/servo.cpp **** 			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
 561              		.loc 2 52 0
 562 01ba 04A9     		add	r1, sp, #16
 563 01bc 9868     		ldr	r0, [r3, #8]
 564 01be FFF7FEFF 		bl	TIM_OC2Init
 565              	.LVL63:
  53:src/servo.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 566              		.loc 2 53 0
 567 01c2 6368     		ldr	r3, [r4, #4]
 568 01c4 0821     		movs	r1, #8
 569 01c6 9868     		ldr	r0, [r3, #8]
 570 01c8 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 571              	.LVL64:
 572 01cc 12E0     		b	.L26
 573              	.L24:
  56:src/servo.cpp **** 			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
 574              		.loc 2 56 0
 575 01ce 04A9     		add	r1, sp, #16
 576 01d0 9868     		ldr	r0, [r3, #8]
 577 01d2 FFF7FEFF 		bl	TIM_OC3Init
 578              	.LVL65:
  57:src/servo.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 579              		.loc 2 57 0
 580 01d6 6368     		ldr	r3, [r4, #4]
 581 01d8 0821     		movs	r1, #8
 582 01da 9868     		ldr	r0, [r3, #8]
 583 01dc FFF7FEFF 		bl	TIM_OC3PreloadConfig
 584              	.LVL66:
 585 01e0 08E0     		b	.L26
 586              	.L25:
  60:src/servo.cpp **** 			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
 587              		.loc 2 60 0
 588 01e2 9868     		ldr	r0, [r3, #8]
 589 01e4 04A9     		add	r1, sp, #16
 590 01e6 FFF7FEFF 		bl	TIM_OC4Init
 591              	.LVL67:
  61:src/servo.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 592              		.loc 2 61 0
 593 01ea 6368     		ldr	r3, [r4, #4]
 594 01ec 0821     		movs	r1, #8
 595 01ee 9868     		ldr	r0, [r3, #8]
 596 01f0 FFF7FEFF 		bl	TIM_OC4PreloadConfig
 597              	.LVL68:
 598              	.L26:
  68:src/servo.cpp **** 	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
 599              		.loc 2 68 0
 600 01f4 6368     		ldr	r3, [r4, #4]
 601 01f6 0121     		movs	r1, #1
 602 01f8 9868     		ldr	r0, [r3, #8]
 603 01fa FFF7FEFF 		bl	TIM_ARRPreloadConfig
 604              	.LVL69:
  71:src/servo.cpp **** 	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
 605              		.loc 2 71 0
 606 01fe 6368     		ldr	r3, [r4, #4]
 607 0200 0121     		movs	r1, #1
 608 0202 9868     		ldr	r0, [r3, #8]
 609 0204 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 610              	.LVL70:
  74:src/servo.cpp **** 	TIM_Cmd(m_settings->m_Timer, ENABLE);
 611              		.loc 2 74 0
 612 0208 6368     		ldr	r3, [r4, #4]
 613 020a 0121     		movs	r1, #1
 614 020c 9868     		ldr	r0, [r3, #8]
 615 020e FFF7FEFF 		bl	TIM_Cmd
 616              	.LVL71:
  76:src/servo.cpp **** 	return true;
 617              		.loc 2 76 0
 618 0212 0120     		movs	r0, #1
 619 0214 00E0     		b	.L20
 620              	.L27:
  64:src/servo.cpp **** 			return false;
 621              		.loc 2 64 0
 622 0216 0020     		movs	r0, #0
 623              	.L20:
  77:src/servo.cpp **** }
 624              		.loc 2 77 0
 625 0218 09B0     		add	sp, sp, #36
 626              	.LCFI6:
 627              		.cfi_def_cfa_offset 12
 628              		@ sp needed
 629 021a 30BD     		pop	{r4, r5, pc}
 630              		.cfi_endproc
 631              	.LFE1029:
 632              		.fnend
 634              		.align	1
 635              		.global	_ZN5servoC2EP13motorSettings
 636              		.thumb
 637              		.thumb_func
 639              	_ZN5servoC2EP13motorSettings:
 640              		.fnstart
 641              	.LFB1023:
   6:src/servo.cpp **** servo::servo(motorSettings *settings) : motor(settings)
 642              		.loc 2 6 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              	.LVL72:
 647 021c 10B5     		push	{r4, lr}
 648              		.save {r4, lr}
 649              	.LCFI7:
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 4, -8
 652              		.cfi_offset 14, -4
   6:src/servo.cpp **** servo::servo(motorSettings *settings) : motor(settings)
 653              		.loc 2 6 0
 654 021e 0446     		mov	r4, r0
 655              	.LBB560:
 656 0220 FFF7FEFF 		bl	_ZN5motorC2EP13motorSettings
 657              	.LVL73:
 658 0224 014B     		ldr	r3, .L29
 659              	.LBE560:
   9:src/servo.cpp **** }
 660              		.loc 2 9 0
 661 0226 2046     		mov	r0, r4
 662              	.LBB561:
   6:src/servo.cpp **** servo::servo(motorSettings *settings) : motor(settings)
 663              		.loc 2 6 0
 664 0228 2360     		str	r3, [r4]
 665              	.LBE561:
   9:src/servo.cpp **** }
 666              		.loc 2 9 0
 667 022a 10BD     		pop	{r4, pc}
 668              	.LVL74:
 669              	.L30:
 670              		.align	2
 671              	.L29:
 672 022c 08000000 		.word	.LANCHOR0+8
 673              		.cfi_endproc
 674              	.LFE1023:
 675              		.fnend
 677              		.global	_ZN5servoC1EP13motorSettings
 678              		.thumb_set _ZN5servoC1EP13motorSettings,_ZN5servoC2EP13motorSettings
 679              		.global	_ZTS5servo
 680              		.global	_ZTI5servo
 681              		.global	_ZTV5servo
 682              		.section	.rodata
 683              		.align	2
 684              		.set	.LANCHOR0,. + 0
 687              	_ZTV5servo:
 688 0000 00000000 		.word	0
 689 0004 00000000 		.word	_ZTI5servo
 690 0008 00000000 		.word	_ZN5servoD1Ev
 691 000c 00000000 		.word	_ZN5servoD0Ev
 692 0010 00000000 		.word	_ZN5servo9motorTypeEv
 693 0014 00000000 		.word	_ZN5servo9motorInitEv
 694 0018 00000000 		.word	_ZN5servo9motorNameEv
 695 001c 00000000 		.word	_ZN5servo12setReferenceEf
 696 0020 00000000 		.word	_ZN5servo12getReferenceEv
 697 0024 00000000 		.word	_ZN5servo6updateEfb
 700              	_ZTS5servo:
 701 0028 35736572 		.ascii	"5servo\000"
 701      766F00
 702 002f 00       		.space	1
 705              	_ZTI5servo:
 706 0030 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 707 0034 00000000 		.word	_ZTS5servo
 708 0038 00000000 		.word	_ZTI5motor
 709              		.text
 710              	.Letext0:
 711              		.file 4 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types.h"
 712              		.file 5 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 713              		.file 6 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/stdint.h"
 714              		.file 7 "./lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 715              		.file 8 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 716              		.file 9 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 717              		.file 10 "/opt/gcc-arm-none-eabi-5_2-2015q4/lib/gcc/arm-none-eabi/5.2.1/include/stddef.h"
 718              		.file 11 "/opt/gcc-arm-none-eabi-5_2-2015q4/lib/gcc/arm-none-eabi/5.2.1/include/stdarg.h"
 719              		.file 12 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/lock.h"
 720              		.file 13 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_types.h"
 721              		.file 14 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/reent.h"
 722              		.file 15 "<built-in>"
 723              		.file 16 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/type_traits"
 724              		.file 17 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/exception_ptr.h"
 725              		.file 18 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/arm-none-eabi/armv7-m/
 726              		.file 19 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/debug/debug.h"
 727              		.file 20 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/cwchar"
 728              		.file 21 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/cstdint"
 729              		.file 22 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/clocale"
 730              		.file 23 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/stl_pair.h"
 731              		.file 24 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/uses_allocator.h"
 732              		.file 25 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/move.h"
 733              		.file 26 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/predefined_ops.h"
 734              		.file 27 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/ext/new_allocator.h"
 735              		.file 28 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/ext/numeric_traits.h"
 736              		.file 29 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/wchar.h"
 737              		.file 30 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/locale.h"
 738              		.file 31 "./inc/motorSettings.h"
 739              		.file 32 "./lib/CMSIS/CM3/CoreSupport/core_cm3.h"
 740              		.file 33 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/new"
DEFINED SYMBOLS
                            *ABS*:00000000 servo.cpp
     /tmp/ccDGZyTI.s:20     .text._ZN5servo9motorTypeEv:00000000 $t
     /tmp/ccDGZyTI.s:25     .text._ZN5servo9motorTypeEv:00000000 _ZN5servo9motorTypeEv
.ARM.exidx.text._ZN5servo9motorTypeEv:00000000 $d
     /tmp/ccDGZyTI.s:45     .text:00000000 $t
     /tmp/ccDGZyTI.s:50     .text:00000000 _ZN5servo12setReferenceEf
                       .ARM.exidx:00000000 $d
     /tmp/ccDGZyTI.s:72     .text:00000002 _ZN5servo12getReferenceEv
     /tmp/ccDGZyTI.s:103    .text:0000000c _ZN5servo9motorNameEv
     /tmp/ccDGZyTI.s:131    .text:00000012 _ZN5servo6updateEfb
     /tmp/ccDGZyTI.s:174    .text:0000003a $d
     /tmp/ccDGZyTI.s:178    .text:0000003e $t
     /tmp/ccDGZyTI.s:370    .text:0000010c $d
     /tmp/ccDGZyTI.s:376    .text:00000110 $t
     /tmp/ccDGZyTI.s:381    .text:00000110 _ZN5servoD2Ev
     /tmp/ccDGZyTI.s:409    .text:00000120 $d
     /tmp/ccDGZyTI.s:381    .text:00000110 _ZN5servoD1Ev
     /tmp/ccDGZyTI.s:417    .text:00000124 $t
     /tmp/ccDGZyTI.s:422    .text:00000124 _ZN5servoD0Ev
     /tmp/ccDGZyTI.s:455    .text:00000136 _ZN5servo9motorInitEv
     /tmp/ccDGZyTI.s:542    .text:000001a2 $d
     /tmp/ccDGZyTI.s:546    .text:000001a6 $t
     /tmp/ccDGZyTI.s:639    .text:0000021c _ZN5servoC2EP13motorSettings
     /tmp/ccDGZyTI.s:672    .text:0000022c $d
     /tmp/ccDGZyTI.s:639    .text:0000021c _ZN5servoC1EP13motorSettings
     /tmp/ccDGZyTI.s:700    .rodata:00000028 _ZTS5servo
     /tmp/ccDGZyTI.s:705    .rodata:00000030 _ZTI5servo
     /tmp/ccDGZyTI.s:687    .rodata:00000000 _ZTV5servo
     /tmp/ccDGZyTI.s:683    .rodata:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fmul
__aeabi_fsub
__aeabi_f2iz
_ZN5motorD2Ev
_ZdlPv
GPIO_Init
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_ARRPreloadConfig
TIM_CtrlPWMOutputs
TIM_Cmd
__aeabi_unwind_cpp_pr0
_ZN5motorC2EP13motorSettings
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI5motor
