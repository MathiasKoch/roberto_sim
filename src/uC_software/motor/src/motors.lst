   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"motors.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	1
  20              		.global	motor_set_speed
  21              		.thumb
  22              		.thumb_func
  24              	motor_set_speed:
  25              	.LFB30:
  26              		.file 1 "src/motors.c"
   1:src/motors.c  **** 
   2:src/motors.c  **** 
   3:src/motors.c  **** #include <stdio.h>
   4:src/motors.c  **** #include <stdbool.h>
   5:src/motors.c  **** #include <stdint.h>
   6:src/motors.c  **** 
   7:src/motors.c  **** #include <stm32f10x.h>
   8:src/motors.c  **** #include "motors.h"
   9:src/motors.c  **** 
  10:src/motors.c  **** 
  11:src/motors.c  **** #define DEBUG_PRINT(args...) printf(args)
  12:src/motors.c  **** 
  13:src/motors.c  **** TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  14:src/motors.c  **** TIM_OCInitTypeDef  TIM_OCInitStructure;
  15:src/motors.c  **** 
  16:src/motors.c  **** #define PERIOD 14399
  17:src/motors.c  **** #define PRESCALER 0
  18:src/motors.c  **** #define CLOCKDIV 0
  19:src/motors.c  **** 
  20:src/motors.c  **** void MOTOR_Init(void){
  21:src/motors.c  **** 
  22:src/motors.c  **** 	GPIO_InitTypeDef GPIO_InitStructure;
  23:src/motors.c  **** 
  24:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
  25:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  26:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  27:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
  28:src/motors.c  **** 
  29:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
  30:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  31:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  32:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
  33:src/motors.c  **** 
  34:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
  35:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  36:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  37:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
  38:src/motors.c  **** 
  39:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
  40:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  41:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  42:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
  43:src/motors.c  **** 
  44:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
  45:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  46:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  47:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
  48:src/motors.c  **** 
  49:src/motors.c  **** 
  50:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD;
  51:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
  52:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
  53:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  54:src/motors.c  **** 
  55:src/motors.c  **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
  56:src/motors.c  **** 
  57:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure);
  58:src/motors.c  **** 
  59:src/motors.c  **** 	/* PWM1 Mode configuration: Channel1 */
  60:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  61:src/motors.c  **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  62:src/motors.c  **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
  63:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  64:src/motors.c  **** 
  65:src/motors.c  **** 	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
  66:src/motors.c  **** 	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
  67:src/motors.c  **** 
  68:src/motors.c  **** 	TIM_ARRPreloadConfig(TIM1, ENABLE);
  69:src/motors.c  **** 
  70:src/motors.c  **** 	TIM_CtrlPWMOutputs(TIM1, ENABLE);
  71:src/motors.c  **** 
  72:src/motors.c  **** 	TIM_Cmd(TIM1, ENABLE);
  73:src/motors.c  **** 
  74:src/motors.c  **** 
  75:src/motors.c  **** 
  76:src/motors.c  **** 
  77:src/motors.c  **** 	// IN2_A
  78:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
  79:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  80:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  81:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
  82:src/motors.c  **** 
  83:src/motors.c  **** 	// IN2_B
  84:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  85:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  86:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  87:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
  88:src/motors.c  **** 
  89:src/motors.c  **** 	// EN2_A
  90:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
  91:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  92:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  93:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
  94:src/motors.c  **** 
  95:src/motors.c  **** 	// EN2_B
  96:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  97:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  98:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  99:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 100:src/motors.c  **** 
 101:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 102:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 103:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 104:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 105:src/motors.c  **** 
 106:src/motors.c  **** 
 107:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD;
 108:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 109:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 110:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 111:src/motors.c  **** 
 112:src/motors.c  **** 	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 113:src/motors.c  **** 
 114:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure); 
 115:src/motors.c  **** 
 116:src/motors.c  **** 	/* PWM1 Mode configuration: Channel4 */
 117:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 118:src/motors.c  **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 119:src/motors.c  **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 120:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 121:src/motors.c  **** 
 122:src/motors.c  **** 	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 123:src/motors.c  **** 	TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
 124:src/motors.c  **** 
 125:src/motors.c  **** 	TIM_ARRPreloadConfig(TIM3, ENABLE);
 126:src/motors.c  **** 
 127:src/motors.c  **** 	TIM_CtrlPWMOutputs(TIM3, ENABLE);
 128:src/motors.c  **** 
 129:src/motors.c  **** 	TIM_Cmd(TIM3, ENABLE);
 130:src/motors.c  **** 
 131:src/motors.c  **** 
 132:src/motors.c  **** 
 133:src/motors.c  **** 
 134:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 135:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 136:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 137:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 138:src/motors.c  **** 
 139:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 140:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 141:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 142:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 143:src/motors.c  **** 
 144:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 145:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 146:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 147:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 148:src/motors.c  **** 
 149:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 150:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 151:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 152:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 153:src/motors.c  **** 
 154:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 155:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 156:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 157:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 158:src/motors.c  **** 
 159:src/motors.c  **** 
 160:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD; 
 161:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 162:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 163:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 164:src/motors.c  **** 
 165:src/motors.c  **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 166:src/motors.c  **** 
 167:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure); 
 168:src/motors.c  **** 
 169:src/motors.c  **** 	/* PWM1 Mode configuration: Channel4 */
 170:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 171:src/motors.c  **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 172:src/motors.c  **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 173:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 174:src/motors.c  **** 
 175:src/motors.c  **** 	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 176:src/motors.c  **** 	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 177:src/motors.c  **** 
 178:src/motors.c  **** 	TIM_ARRPreloadConfig(TIM2, ENABLE);
 179:src/motors.c  **** 
 180:src/motors.c  **** 	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 181:src/motors.c  **** 
 182:src/motors.c  **** 	TIM_Cmd(TIM2, ENABLE);
 183:src/motors.c  **** 
 184:src/motors.c  **** 
 185:src/motors.c  **** 	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 186:src/motors.c  **** 
 187:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 188:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 189:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 190:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 191:src/motors.c  **** 
 192:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 193:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 194:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 195:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 196:src/motors.c  **** 
 197:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 198:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 199:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 200:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 201:src/motors.c  **** 
 202:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 203:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 204:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 205:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 206:src/motors.c  **** 
 207:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 208:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 209:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 210:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 211:src/motors.c  **** 
 212:src/motors.c  **** 
 213:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD*2; 
 214:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 215:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 216:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 217:src/motors.c  **** 
 218:src/motors.c  **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 219:src/motors.c  **** 
 220:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure);
 221:src/motors.c  **** 
 222:src/motors.c  **** 	/* PWM1 Mode configuration: Channel4 */
 223:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 224:src/motors.c  **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 225:src/motors.c  **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 226:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 227:src/motors.c  **** 
 228:src/motors.c  **** 	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 229:src/motors.c  **** 	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 230:src/motors.c  **** 
 231:src/motors.c  **** 	TIM_ARRPreloadConfig(TIM1, ENABLE);
 232:src/motors.c  **** 
 233:src/motors.c  **** 	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 234:src/motors.c  **** 
 235:src/motors.c  **** 	TIM_Cmd(TIM1, ENABLE);
 236:src/motors.c  **** 
 237:src/motors.c  **** 
 238:src/motors.c  **** 	motor_set_speed(0, 0, DIR_FORWARD);
 239:src/motors.c  **** 	motor_set_speed(1, 0, DIR_FORWARD);
 240:src/motors.c  **** 	motor_set_speed(2, 0, DIR_FORWARD);
 241:src/motors.c  **** 	motor_set_speed(3, 0, DIR_FORWARD);
 242:src/motors.c  **** }
 243:src/motors.c  **** 
 244:src/motors.c  **** uint8_t motor_set_speed(int motor_id, uint16_t speed, int dir){
  27              		.loc 1 244 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
 245:src/motors.c  **** 	if(speed < 0)
 246:src/motors.c  **** 		speed = 0;
 247:src/motors.c  **** 	if(speed > PERIOD)
  32              		.loc 1 247 0
  33 0000 B1F5615F 		cmp	r1, #14400
 244:src/motors.c  **** 	if(speed < 0)
  34              		.loc 1 244 0
  35 0004 38B5     		push	{r3, r4, r5, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 3, -16
  39              		.cfi_offset 4, -12
  40              		.cfi_offset 5, -8
  41              		.cfi_offset 14, -4
 244:src/motors.c  **** 	if(speed < 0)
  42              		.loc 1 244 0
  43 0006 0C46     		mov	r4, r1
  44 0008 1546     		mov	r5, r2
  45              		.loc 1 247 0
  46 000a 03D2     		bcs	.L2
 248:src/motors.c  **** 		speed = PERIOD;
 249:src/motors.c  **** 
 250:src/motors.c  **** 	if(motor_id == 0){
  47              		.loc 1 250 0
  48 000c 0028     		cmp	r0, #0
  49 000e 3CD1     		bne	.L3
 251:src/motors.c  **** 		if(speed > 0){
  50              		.loc 1 251 0
  51 0010 19B3     		cbz	r1, .L4
  52 0012 03E0     		b	.L21
  53              	.L2:
  54              	.LVL1:
 250:src/motors.c  **** 		if(speed > 0){
  55              		.loc 1 250 0
  56 0014 0028     		cmp	r0, #0
  57 0016 3CD1     		bne	.L39
 248:src/motors.c  **** 		speed = PERIOD;
  58              		.loc 1 248 0
  59 0018 43F63F04 		movw	r4, #14399
  60              	.LVL2:
  61              	.L21:
 252:src/motors.c  **** 			GPIO_SetBits(GPIOC, GPIO_Pin_14);
  62              		.loc 1 252 0
  63 001c 4FF48041 		mov	r1, #16384
  64 0020 7448     		ldr	r0, .L42
  65              	.LVL3:
  66 0022 FFF7FEFF 		bl	GPIO_SetBits
  67              	.LVL4:
 253:src/motors.c  **** 			GPIO_SetBits(GPIOA, GPIO_Pin_0);
  68              		.loc 1 253 0
  69 0026 0121     		movs	r1, #1
  70 0028 7348     		ldr	r0, .L42+4
  71 002a FFF7FEFF 		bl	GPIO_SetBits
  72              	.LVL5:
 254:src/motors.c  **** 
 255:src/motors.c  **** 			if(dir == DIR_FORWARD){
  73              		.loc 1 255 0
  74 002e 2DB9     		cbnz	r5, .L5
 256:src/motors.c  **** 				GPIO_SetBits(GPIOC, GPIO_Pin_13);
  75              		.loc 1 256 0
  76 0030 4FF40051 		mov	r1, #8192
  77 0034 6F48     		ldr	r0, .L42
  78 0036 FFF7FEFF 		bl	GPIO_SetBits
  79              	.LVL6:
  80 003a 1CE0     		b	.L31
  81              	.L5:
 257:src/motors.c  **** 				GPIO_ResetBits(GPIOC, GPIO_Pin_15);
 258:src/motors.c  **** 			}else if(dir == DIR_REVERSE){
  82              		.loc 1 258 0
  83 003c 012D     		cmp	r5, #1
  84 003e 01D0     		beq	.L7
  85              	.L13:
 259:src/motors.c  **** 				GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 260:src/motors.c  **** 				GPIO_SetBits(GPIOC, GPIO_Pin_15);
 261:src/motors.c  **** 			}else{
 262:src/motors.c  **** 				return ERROR_DIR_INAVAILABLE;
  86              		.loc 1 262 0
  87 0040 0220     		movs	r0, #2
  88 0042 38BD     		pop	{r3, r4, r5, pc}
  89              	.LVL7:
  90              	.L7:
 259:src/motors.c  **** 				GPIO_ResetBits(GPIOC, GPIO_Pin_13);
  91              		.loc 1 259 0
  92 0044 4FF40051 		mov	r1, #8192
  93 0048 6A48     		ldr	r0, .L42
  94 004a FFF7FEFF 		bl	GPIO_ResetBits
  95              	.LVL8:
 260:src/motors.c  **** 			}else{
  96              		.loc 1 260 0
  97 004e 4FF40041 		mov	r1, #32768
  98 0052 6848     		ldr	r0, .L42
  99 0054 FFF7FEFF 		bl	GPIO_SetBits
 100              	.LVL9:
 101 0058 12E0     		b	.L6
 102              	.LVL10:
 103              	.L4:
 263:src/motors.c  **** 			}
 264:src/motors.c  **** 		}else{
 265:src/motors.c  **** 			GPIO_SetBits(GPIOC, GPIO_Pin_14);
 104              		.loc 1 265 0
 105 005a 4FF48041 		mov	r1, #16384
 106              	.LVL11:
 107 005e 6548     		ldr	r0, .L42
 108              	.LVL12:
 109 0060 FFF7FEFF 		bl	GPIO_SetBits
 110              	.LVL13:
 266:src/motors.c  **** 			GPIO_SetBits(GPIOA, GPIO_Pin_0);
 111              		.loc 1 266 0
 112 0064 0121     		movs	r1, #1
 113 0066 6448     		ldr	r0, .L42+4
 114 0068 FFF7FEFF 		bl	GPIO_SetBits
 115              	.LVL14:
 267:src/motors.c  **** 
 268:src/motors.c  **** 			// Break to GND
 269:src/motors.c  **** 			GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 116              		.loc 1 269 0
 117 006c 4FF40051 		mov	r1, #8192
 118 0070 6048     		ldr	r0, .L42
 119 0072 FFF7FEFF 		bl	GPIO_ResetBits
 120              	.LVL15:
 121              	.L31:
 270:src/motors.c  **** 			GPIO_ResetBits(GPIOC, GPIO_Pin_15);
 122              		.loc 1 270 0
 123 0076 4FF40041 		mov	r1, #32768
 124 007a 5E48     		ldr	r0, .L42
 125 007c FFF7FEFF 		bl	GPIO_ResetBits
 126              	.LVL16:
 127              	.L6:
 271:src/motors.c  **** 		}
 272:src/motors.c  **** 
 273:src/motors.c  **** 
 274:src/motors.c  **** 		TIM1->CCR1 = (uint32_t)speed*2;
 128              		.loc 1 274 0
 129 0080 6400     		lsls	r4, r4, #1
 130 0082 5E4B     		ldr	r3, .L42+8
 131 0084 A4B2     		uxth	r4, r4
 132 0086 9C86     		strh	r4, [r3, #52]	@ movhi
 133 0088 AFE0     		b	.L35
 134              	.LVL17:
 135              	.L3:
 275:src/motors.c  **** 	}else if(motor_id == 1){
 136              		.loc 1 275 0
 137 008a 0128     		cmp	r0, #1
 138 008c 32D1     		bne	.L9
 276:src/motors.c  **** 		if(speed != 0){
 139              		.loc 1 276 0
 140 008e F1B1     		cbz	r1, .L10
 141 0090 03E0     		b	.L22
 142              	.LVL18:
 143              	.L39:
 275:src/motors.c  **** 	}else if(motor_id == 1){
 144              		.loc 1 275 0
 145 0092 0128     		cmp	r0, #1
 146 0094 32D1     		bne	.L40
 248:src/motors.c  **** 
 147              		.loc 1 248 0
 148 0096 43F63F04 		movw	r4, #14399
 149              	.LVL19:
 150              	.L22:
 277:src/motors.c  **** 			GPIO_SetBits(GPIOA, GPIO_Pin_5);
 151              		.loc 1 277 0
 152 009a 2021     		movs	r1, #32
 153 009c 5648     		ldr	r0, .L42+4
 154              	.LVL20:
 155 009e FFF7FEFF 		bl	GPIO_SetBits
 156              	.LVL21:
 278:src/motors.c  **** 			GPIO_SetBits(GPIOB, GPIO_Pin_10);
 157              		.loc 1 278 0
 158 00a2 4FF48061 		mov	r1, #1024
 159 00a6 5648     		ldr	r0, .L42+12
 160 00a8 FFF7FEFF 		bl	GPIO_SetBits
 161              	.LVL22:
 279:src/motors.c  **** 
 280:src/motors.c  **** 			if(dir == DIR_FORWARD){
 162              		.loc 1 280 0
 163 00ac 25B9     		cbnz	r5, .L11
 281:src/motors.c  **** 				GPIO_SetBits(GPIOA, GPIO_Pin_4);
 164              		.loc 1 281 0
 165 00ae 1021     		movs	r1, #16
 166 00b0 5148     		ldr	r0, .L42+4
 167 00b2 FFF7FEFF 		bl	GPIO_SetBits
 168              	.LVL23:
 169 00b6 17E0     		b	.L32
 170              	.L11:
 282:src/motors.c  **** 				GPIO_ResetBits(GPIOB, GPIO_Pin_2);
 283:src/motors.c  **** 			}else if(dir == DIR_REVERSE){
 171              		.loc 1 283 0
 172 00b8 012D     		cmp	r5, #1
 173 00ba C1D1     		bne	.L13
 284:src/motors.c  **** 				GPIO_ResetBits(GPIOA, GPIO_Pin_4);
 174              		.loc 1 284 0
 175 00bc 1021     		movs	r1, #16
 176 00be 4E48     		ldr	r0, .L42+4
 177 00c0 FFF7FEFF 		bl	GPIO_ResetBits
 178              	.LVL24:
 285:src/motors.c  **** 				GPIO_SetBits(GPIOB, GPIO_Pin_2);
 179              		.loc 1 285 0
 180 00c4 0421     		movs	r1, #4
 181 00c6 4E48     		ldr	r0, .L42+12
 182 00c8 FFF7FEFF 		bl	GPIO_SetBits
 183              	.LVL25:
 184 00cc 10E0     		b	.L12
 185              	.LVL26:
 186              	.L10:
 286:src/motors.c  **** 			}else{
 287:src/motors.c  **** 				return ERROR_DIR_INAVAILABLE;
 288:src/motors.c  **** 			}	
 289:src/motors.c  **** 		}else{
 290:src/motors.c  **** 			GPIO_SetBits(GPIOA, GPIO_Pin_5);
 187              		.loc 1 290 0
 188 00ce 2021     		movs	r1, #32
 189              	.LVL27:
 190 00d0 4948     		ldr	r0, .L42+4
 191              	.LVL28:
 192 00d2 FFF7FEFF 		bl	GPIO_SetBits
 193              	.LVL29:
 291:src/motors.c  **** 			GPIO_SetBits(GPIOB, GPIO_Pin_10);
 194              		.loc 1 291 0
 195 00d6 4FF48061 		mov	r1, #1024
 196 00da 4948     		ldr	r0, .L42+12
 197 00dc FFF7FEFF 		bl	GPIO_SetBits
 198              	.LVL30:
 292:src/motors.c  **** 
 293:src/motors.c  **** 			// Break to GND
 294:src/motors.c  **** 			GPIO_ResetBits(GPIOA, GPIO_Pin_4);
 199              		.loc 1 294 0
 200 00e0 1021     		movs	r1, #16
 201 00e2 4548     		ldr	r0, .L42+4
 202 00e4 FFF7FEFF 		bl	GPIO_ResetBits
 203              	.LVL31:
 204              	.L32:
 295:src/motors.c  **** 			GPIO_ResetBits(GPIOB, GPIO_Pin_2);
 205              		.loc 1 295 0
 206 00e8 0421     		movs	r1, #4
 207 00ea 4548     		ldr	r0, .L42+12
 208 00ec FFF7FEFF 		bl	GPIO_ResetBits
 209              	.LVL32:
 210              	.L12:
 296:src/motors.c  **** 		}
 297:src/motors.c  **** 
 298:src/motors.c  **** 		TIM3->CCR4 = (uint32_t)speed;
 211              		.loc 1 298 0
 212 00f0 444B     		ldr	r3, .L42+16
 213 00f2 78E0     		b	.L37
 214              	.LVL33:
 215              	.L9:
 299:src/motors.c  **** 	}else if(motor_id == 2){
 216              		.loc 1 299 0
 217 00f4 0228     		cmp	r0, #2
 218 00f6 3AD1     		bne	.L14
 300:src/motors.c  **** 		if(speed != 0){
 219              		.loc 1 300 0
 220 00f8 11B3     		cbz	r1, .L15
 221 00fa 03E0     		b	.L23
 222              	.LVL34:
 223              	.L40:
 299:src/motors.c  **** 	}else if(motor_id == 2){
 224              		.loc 1 299 0
 225 00fc 0228     		cmp	r0, #2
 226 00fe 3AD1     		bne	.L41
 248:src/motors.c  **** 
 227              		.loc 1 248 0
 228 0100 43F63F04 		movw	r4, #14399
 229              	.LVL35:
 230              	.L23:
 301:src/motors.c  **** 			GPIO_SetBits(GPIOB, GPIO_Pin_12);
 231              		.loc 1 301 0
 232 0104 4FF48051 		mov	r1, #4096
 233 0108 3D48     		ldr	r0, .L42+12
 234              	.LVL36:
 235 010a FFF7FEFF 		bl	GPIO_SetBits
 236              	.LVL37:
 302:src/motors.c  **** 			GPIO_SetBits(GPIOB, GPIO_Pin_14);
 237              		.loc 1 302 0
 238 010e 4FF48041 		mov	r1, #16384
 239 0112 3B48     		ldr	r0, .L42+12
 240 0114 FFF7FEFF 		bl	GPIO_SetBits
 241              	.LVL38:
 303:src/motors.c  **** 
 304:src/motors.c  **** 			if(dir == DIR_FORWARD){
 242              		.loc 1 304 0
 243 0118 2DB9     		cbnz	r5, .L16
 305:src/motors.c  **** 				GPIO_SetBits(GPIOB, GPIO_Pin_11);
 244              		.loc 1 305 0
 245 011a 4FF40061 		mov	r1, #2048
 246 011e 3848     		ldr	r0, .L42+12
 247 0120 FFF7FEFF 		bl	GPIO_SetBits
 248              	.LVL39:
 249 0124 1BE0     		b	.L33
 250              	.L16:
 306:src/motors.c  **** 				GPIO_ResetBits(GPIOB, GPIO_Pin_13);
 307:src/motors.c  **** 			}else if(dir == DIR_REVERSE){
 251              		.loc 1 307 0
 252 0126 012D     		cmp	r5, #1
 253 0128 8AD1     		bne	.L13
 308:src/motors.c  **** 				GPIO_ResetBits(GPIOB, GPIO_Pin_11);
 254              		.loc 1 308 0
 255 012a 4FF40061 		mov	r1, #2048
 256 012e 3448     		ldr	r0, .L42+12
 257 0130 FFF7FEFF 		bl	GPIO_ResetBits
 258              	.LVL40:
 309:src/motors.c  **** 				GPIO_SetBits(GPIOB, GPIO_Pin_13);
 259              		.loc 1 309 0
 260 0134 4FF40051 		mov	r1, #8192
 261 0138 3148     		ldr	r0, .L42+12
 262 013a FFF7FEFF 		bl	GPIO_SetBits
 263              	.LVL41:
 264 013e 13E0     		b	.L17
 265              	.LVL42:
 266              	.L15:
 310:src/motors.c  **** 			}else{
 311:src/motors.c  **** 				return ERROR_DIR_INAVAILABLE;
 312:src/motors.c  **** 			}	
 313:src/motors.c  **** 		}else{
 314:src/motors.c  **** 			GPIO_SetBits(GPIOB, GPIO_Pin_12);
 267              		.loc 1 314 0
 268 0140 4FF48051 		mov	r1, #4096
 269              	.LVL43:
 270 0144 2E48     		ldr	r0, .L42+12
 271              	.LVL44:
 272 0146 FFF7FEFF 		bl	GPIO_SetBits
 273              	.LVL45:
 315:src/motors.c  **** 			GPIO_SetBits(GPIOB, GPIO_Pin_14);
 274              		.loc 1 315 0
 275 014a 4FF48041 		mov	r1, #16384
 276 014e 2C48     		ldr	r0, .L42+12
 277 0150 FFF7FEFF 		bl	GPIO_SetBits
 278              	.LVL46:
 316:src/motors.c  **** 
 317:src/motors.c  **** 			// Break to GND
 318:src/motors.c  **** 			GPIO_ResetBits(GPIOB, GPIO_Pin_11);
 279              		.loc 1 318 0
 280 0154 4FF40061 		mov	r1, #2048
 281 0158 2948     		ldr	r0, .L42+12
 282 015a FFF7FEFF 		bl	GPIO_ResetBits
 283              	.LVL47:
 284              	.L33:
 319:src/motors.c  **** 			GPIO_ResetBits(GPIOB, GPIO_Pin_13);
 285              		.loc 1 319 0
 286 015e 4FF40051 		mov	r1, #8192
 287 0162 2748     		ldr	r0, .L42+12
 288 0164 FFF7FEFF 		bl	GPIO_ResetBits
 289              	.LVL48:
 290              	.L17:
 320:src/motors.c  **** 		}
 321:src/motors.c  **** 
 322:src/motors.c  **** 		TIM2->CCR4 = (uint32_t)speed;
 291              		.loc 1 322 0
 292 0168 4FF08043 		mov	r3, #1073741824
 293 016c 3BE0     		b	.L37
 294              	.LVL49:
 295              	.L14:
 323:src/motors.c  **** 	}else if(motor_id == 3){
 296              		.loc 1 323 0
 297 016e 0328     		cmp	r0, #3
 298 0170 3DD1     		bne	.L36
 324:src/motors.c  **** 		if(speed != 0){
 299              		.loc 1 324 0
 300 0172 11B3     		cbz	r1, .L18
 301 0174 03E0     		b	.L24
 302              	.LVL50:
 303              	.L41:
 323:src/motors.c  **** 	}else if(motor_id == 3){
 304              		.loc 1 323 0
 305 0176 0328     		cmp	r0, #3
 306 0178 39D1     		bne	.L36
 248:src/motors.c  **** 
 307              		.loc 1 248 0
 308 017a 43F63F04 		movw	r4, #14399
 309              	.LVL51:
 310              	.L24:
 325:src/motors.c  **** 			GPIO_SetBits(GPIOA, GPIO_Pin_12);
 311              		.loc 1 325 0
 312 017e 4FF48051 		mov	r1, #4096
 313 0182 1D48     		ldr	r0, .L42+4
 314              	.LVL52:
 315 0184 FFF7FEFF 		bl	GPIO_SetBits
 316              	.LVL53:
 326:src/motors.c  **** 			GPIO_SetBits(GPIOB, GPIO_Pin_3);
 317              		.loc 1 326 0
 318 0188 0821     		movs	r1, #8
 319 018a 1D48     		ldr	r0, .L42+12
 320 018c FFF7FEFF 		bl	GPIO_SetBits
 321              	.LVL54:
 327:src/motors.c  **** 
 328:src/motors.c  **** 			if(dir == DIR_FORWARD){
 322              		.loc 1 328 0
 323 0190 2DB9     		cbnz	r5, .L19
 329:src/motors.c  **** 				GPIO_SetBits(GPIOB, GPIO_Pin_15);
 324              		.loc 1 329 0
 325 0192 4FF40041 		mov	r1, #32768
 326 0196 1A48     		ldr	r0, .L42+12
 327 0198 FFF7FEFF 		bl	GPIO_SetBits
 328              	.LVL55:
 329 019c 1BE0     		b	.L34
 330              	.L19:
 330:src/motors.c  **** 				GPIO_ResetBits(GPIOA, GPIO_Pin_15);
 331:src/motors.c  **** 			}else if(dir == DIR_REVERSE){
 331              		.loc 1 331 0
 332 019e 012D     		cmp	r5, #1
 333 01a0 7FF44EAF 		bne	.L13
 332:src/motors.c  **** 				GPIO_ResetBits(GPIOB, GPIO_Pin_15);
 334              		.loc 1 332 0
 335 01a4 4FF40041 		mov	r1, #32768
 336 01a8 1548     		ldr	r0, .L42+12
 337 01aa FFF7FEFF 		bl	GPIO_ResetBits
 338              	.LVL56:
 333:src/motors.c  **** 				GPIO_SetBits(GPIOA, GPIO_Pin_15);
 339              		.loc 1 333 0
 340 01ae 4FF40041 		mov	r1, #32768
 341 01b2 1148     		ldr	r0, .L42+4
 342 01b4 FFF7FEFF 		bl	GPIO_SetBits
 343              	.LVL57:
 344 01b8 12E0     		b	.L20
 345              	.LVL58:
 346              	.L18:
 334:src/motors.c  **** 			}else{
 335:src/motors.c  **** 				return ERROR_DIR_INAVAILABLE;
 336:src/motors.c  **** 			}
 337:src/motors.c  **** 		}else{
 338:src/motors.c  **** 			GPIO_SetBits(GPIOA, GPIO_Pin_12);
 347              		.loc 1 338 0
 348 01ba 4FF48051 		mov	r1, #4096
 349              	.LVL59:
 350 01be 0E48     		ldr	r0, .L42+4
 351              	.LVL60:
 352 01c0 FFF7FEFF 		bl	GPIO_SetBits
 353              	.LVL61:
 339:src/motors.c  **** 			GPIO_SetBits(GPIOB, GPIO_Pin_3);
 354              		.loc 1 339 0
 355 01c4 0821     		movs	r1, #8
 356 01c6 0E48     		ldr	r0, .L42+12
 357 01c8 FFF7FEFF 		bl	GPIO_SetBits
 358              	.LVL62:
 340:src/motors.c  **** 
 341:src/motors.c  **** 			// Break to GND
 342:src/motors.c  **** 			GPIO_ResetBits(GPIOB, GPIO_Pin_15);
 359              		.loc 1 342 0
 360 01cc 4FF40041 		mov	r1, #32768
 361 01d0 0B48     		ldr	r0, .L42+12
 362 01d2 FFF7FEFF 		bl	GPIO_ResetBits
 363              	.LVL63:
 364              	.L34:
 343:src/motors.c  **** 			GPIO_ResetBits(GPIOA, GPIO_Pin_15);
 365              		.loc 1 343 0
 366 01d6 4FF40041 		mov	r1, #32768
 367 01da 0748     		ldr	r0, .L42+4
 368 01dc FFF7FEFF 		bl	GPIO_ResetBits
 369              	.LVL64:
 370              	.L20:
 344:src/motors.c  **** 		}	
 345:src/motors.c  **** 
 346:src/motors.c  **** 		TIM1->CCR4 = (uint32_t)speed*2;
 371              		.loc 1 346 0
 372 01e0 6400     		lsls	r4, r4, #1
 373 01e2 064B     		ldr	r3, .L42+8
 374 01e4 A4B2     		uxth	r4, r4
 375              	.L37:
 376 01e6 A3F84040 		strh	r4, [r3, #64]	@ movhi
 377              	.L35:
 347:src/motors.c  **** 	}else{
 348:src/motors.c  **** 		return ERROR_MOTOR_NOT_EXISTING;
 349:src/motors.c  **** 	}
 350:src/motors.c  **** 
 351:src/motors.c  **** 	return SUCCESS;
 378              		.loc 1 351 0
 379 01ea 0020     		movs	r0, #0
 380 01ec 38BD     		pop	{r3, r4, r5, pc}
 381              	.LVL65:
 382              	.L36:
 348:src/motors.c  **** 	}
 383              		.loc 1 348 0
 384 01ee 0120     		movs	r0, #1
 385              	.LVL66:
 352:src/motors.c  **** }...
 386              		.loc 1 352 0
 387 01f0 38BD     		pop	{r3, r4, r5, pc}
 388              	.L43:
 389 01f2 00BF     		.align	2
 390              	.L42:
 391 01f4 00100140 		.word	1073811456
 392 01f8 00080140 		.word	1073809408
 393 01fc 002C0140 		.word	1073818624
 394 0200 000C0140 		.word	1073810432
 395 0204 00040040 		.word	1073742848
 396              		.cfi_endproc
 397              	.LFE30:
 399              		.align	1
 400              		.global	MOTOR_Init
 401              		.thumb
 402              		.thumb_func
 404              	MOTOR_Init:
 405              	.LFB29:
  20:src/motors.c  **** void MOTOR_Init(void){
 406              		.loc 1 20 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 16
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410 0208 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 411              	.LCFI1:
 412              		.cfi_def_cfa_offset 36
 413              		.cfi_offset 4, -36
 414              		.cfi_offset 5, -32
 415              		.cfi_offset 6, -28
 416              		.cfi_offset 7, -24
 417              		.cfi_offset 8, -20
 418              		.cfi_offset 9, -16
 419              		.cfi_offset 10, -12
 420              		.cfi_offset 11, -8
 421              		.cfi_offset 14, -4
  27:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 422              		.loc 1 27 0
 423 020c D94C     		ldr	r4, .L45
  20:src/motors.c  **** void MOTOR_Init(void){
 424              		.loc 1 20 0
 425 020e 85B0     		sub	sp, sp, #20
 426              	.LCFI2:
 427              		.cfi_def_cfa_offset 56
  26:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 428              		.loc 1 26 0
 429 0210 0326     		movs	r6, #3
  25:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 430              		.loc 1 25 0
 431 0212 4FF0100A 		mov	r10, #16
  24:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 432              		.loc 1 24 0
 433 0216 4FF40052 		mov	r2, #8192
  27:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 434              		.loc 1 27 0
 435 021a 03A9     		add	r1, sp, #12
 436 021c 2046     		mov	r0, r4
  24:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 437              		.loc 1 24 0
 438 021e ADF80C20 		strh	r2, [sp, #12]	@ movhi
 439 0222 0192     		str	r2, [sp, #4]
  25:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 440              		.loc 1 25 0
 441 0224 8DF80FA0 		strb	r10, [sp, #15]
  26:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 442              		.loc 1 26 0
 443 0228 8DF80E60 		strb	r6, [sp, #14]
  27:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 444              		.loc 1 27 0
 445 022c FFF7FEFF 		bl	GPIO_Init
 446              	.LVL67:
  29:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 447              		.loc 1 29 0
 448 0230 48F20003 		movw	r3, 32768	@ movhi
  32:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 449              		.loc 1 32 0
 450 0234 03A9     		add	r1, sp, #12
 451 0236 2046     		mov	r0, r4
  29:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 452              		.loc 1 29 0
 453 0238 ADF80C30 		strh	r3, [sp, #12]	@ movhi
  30:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 454              		.loc 1 30 0
 455 023c 8DF80FA0 		strb	r10, [sp, #15]
  31:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 456              		.loc 1 31 0
 457 0240 8DF80E60 		strb	r6, [sp, #14]
  32:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 458              		.loc 1 32 0
 459 0244 FFF7FEFF 		bl	GPIO_Init
 460              	.LVL68:
  34:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 461              		.loc 1 34 0
 462 0248 4FF48043 		mov	r3, #16384	@ movhi
 463 024c ADF80C30 		strh	r3, [sp, #12]	@ movhi
  35:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 464              		.loc 1 35 0
 465 0250 4FF01403 		mov	r3, #20
  37:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 466              		.loc 1 37 0
 467 0254 03A9     		add	r1, sp, #12
 468 0256 2046     		mov	r0, r4
  35:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 469              		.loc 1 35 0
 470 0258 8DF80F30 		strb	r3, [sp, #15]
  36:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 471              		.loc 1 36 0
 472 025c 8DF80E60 		strb	r6, [sp, #14]
  37:src/motors.c  **** 	GPIO_Init(GPIOC, &GPIO_InitStructure);
 473              		.loc 1 37 0
 474 0260 FFF7FEFF 		bl	GPIO_Init
 475              	.LVL69:
  40:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 476              		.loc 1 40 0
 477 0264 4FF01403 		mov	r3, #20
  39:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 478              		.loc 1 39 0
 479 0268 0127     		movs	r7, #1
  42:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 480              		.loc 1 42 0
 481 026a 03A9     		add	r1, sp, #12
 482 026c C248     		ldr	r0, .L45+4
  40:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 483              		.loc 1 40 0
 484 026e 8DF80F30 		strb	r3, [sp, #15]
  39:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 485              		.loc 1 39 0
 486 0272 ADF80C70 		strh	r7, [sp, #12]	@ movhi
  41:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 487              		.loc 1 41 0
 488 0276 8DF80E60 		strb	r6, [sp, #14]
  42:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 489              		.loc 1 42 0
 490 027a FFF7FEFF 		bl	GPIO_Init
 491              	.LVL70:
  44:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 492              		.loc 1 44 0
 493 027e 4FF48073 		mov	r3, #256
 494 0282 ADF80C30 		strh	r3, [sp, #12]	@ movhi
  45:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 495              		.loc 1 45 0
 496 0286 4FF01803 		mov	r3, #24
  47:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 497              		.loc 1 47 0
 498 028a 03A9     		add	r1, sp, #12
 499 028c BA48     		ldr	r0, .L45+4
  45:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 500              		.loc 1 45 0
 501 028e 8DF80F30 		strb	r3, [sp, #15]
  46:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 502              		.loc 1 46 0
 503 0292 8DF80E60 		strb	r6, [sp, #14]
  47:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 504              		.loc 1 47 0
 505 0296 FFF7FEFF 		bl	GPIO_Init
 506              	.LVL71:
  50:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD;
 507              		.loc 1 50 0
 508 029a 43F63F02 		movw	r2, 14399	@ movhi
  55:src/motors.c  **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 509              		.loc 1 55 0
 510 029e DFF8E882 		ldr	r8, .L45+20
  50:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD;
 511              		.loc 1 50 0
 512 02a2 B64B     		ldr	r3, .L45+8
  57:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure);
 513              		.loc 1 57 0
 514 02a4 B64D     		ldr	r5, .L45+12
  51:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 515              		.loc 1 51 0
 516 02a6 0024     		movs	r4, #0
  55:src/motors.c  **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 517              		.loc 1 55 0
 518 02a8 1946     		mov	r1, r3
 519 02aa 4046     		mov	r0, r8
  50:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD;
 520              		.loc 1 50 0
 521 02ac 9A80     		strh	r2, [r3, #4]	@ movhi
  51:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 522              		.loc 1 51 0
 523 02ae 1C80     		strh	r4, [r3]	@ movhi
  52:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 524              		.loc 1 52 0
 525 02b0 DC80     		strh	r4, [r3, #6]	@ movhi
  53:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 526              		.loc 1 53 0
 527 02b2 5C80     		strh	r4, [r3, #2]	@ movhi
  55:src/motors.c  **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 528              		.loc 1 55 0
 529 02b4 0093     		str	r3, [sp]
 530 02b6 FFF7FEFF 		bl	TIM_TimeBaseInit
 531              	.LVL72:
  57:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure);
 532              		.loc 1 57 0
 533 02ba 2846     		mov	r0, r5
 534 02bc FFF7FEFF 		bl	TIM_OCStructInit
 535              	.LVL73:
  60:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 536              		.loc 1 60 0
 537 02c0 4FF06003 		mov	r3, #96	@ movhi
  65:src/motors.c  **** 	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 538              		.loc 1 65 0
 539 02c4 2946     		mov	r1, r5
 540 02c6 4046     		mov	r0, r8
  60:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 541              		.loc 1 60 0
 542 02c8 2B80     		strh	r3, [r5]	@ movhi
  61:src/motors.c  **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 543              		.loc 1 61 0
 544 02ca 6F80     		strh	r7, [r5, #2]	@ movhi
  62:src/motors.c  **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 545              		.loc 1 62 0
 546 02cc EC80     		strh	r4, [r5, #6]	@ movhi
  63:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 547              		.loc 1 63 0
 548 02ce 2C81     		strh	r4, [r5, #8]	@ movhi
  65:src/motors.c  **** 	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 549              		.loc 1 65 0
 550 02d0 FFF7FEFF 		bl	TIM_OC1Init
 551              	.LVL74:
  66:src/motors.c  **** 	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 552              		.loc 1 66 0
 553 02d4 4046     		mov	r0, r8
 554 02d6 0821     		movs	r1, #8
 555 02d8 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 556              	.LVL75:
  68:src/motors.c  **** 	TIM_ARRPreloadConfig(TIM1, ENABLE);
 557              		.loc 1 68 0
 558 02dc 3946     		mov	r1, r7
 559 02de 4046     		mov	r0, r8
 560 02e0 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 561              	.LVL76:
  70:src/motors.c  **** 	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 562              		.loc 1 70 0
 563 02e4 3946     		mov	r1, r7
 564 02e6 4046     		mov	r0, r8
 565 02e8 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 566              	.LVL77:
  72:src/motors.c  **** 	TIM_Cmd(TIM1, ENABLE);
 567              		.loc 1 72 0
 568 02ec 3946     		mov	r1, r7
 569 02ee 4046     		mov	r0, r8
 570 02f0 FFF7FEFF 		bl	TIM_Cmd
 571              	.LVL78:
  87:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 572              		.loc 1 87 0
 573 02f4 DFF89492 		ldr	r9, .L45+24
  81:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 574              		.loc 1 81 0
 575 02f8 03A9     		add	r1, sp, #12
 576 02fa 9F48     		ldr	r0, .L45+4
  78:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 577              		.loc 1 78 0
 578 02fc ADF80CA0 		strh	r10, [sp, #12]	@ movhi
  79:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 579              		.loc 1 79 0
 580 0300 8DF80FA0 		strb	r10, [sp, #15]
  80:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 581              		.loc 1 80 0
 582 0304 8DF80E60 		strb	r6, [sp, #14]
  81:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 583              		.loc 1 81 0
 584 0308 FFF7FEFF 		bl	GPIO_Init
 585              	.LVL79:
  84:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 586              		.loc 1 84 0
 587 030c 0421     		movs	r1, #4
 588 030e ADF80C10 		strh	r1, [sp, #12]	@ movhi
  87:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 589              		.loc 1 87 0
 590 0312 4846     		mov	r0, r9
 591 0314 03A9     		add	r1, sp, #12
  85:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 592              		.loc 1 85 0
 593 0316 8DF80FA0 		strb	r10, [sp, #15]
  86:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 594              		.loc 1 86 0
 595 031a 8DF80E60 		strb	r6, [sp, #14]
  87:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 596              		.loc 1 87 0
 597 031e FFF7FEFF 		bl	GPIO_Init
 598              	.LVL80:
  91:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 599              		.loc 1 91 0
 600 0322 4FF01403 		mov	r3, #20
  90:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 601              		.loc 1 90 0
 602 0326 2021     		movs	r1, #32
 603 0328 ADF80C10 		strh	r1, [sp, #12]	@ movhi
  93:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 604              		.loc 1 93 0
 605 032c 9248     		ldr	r0, .L45+4
 606 032e 03A9     		add	r1, sp, #12
  91:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 607              		.loc 1 91 0
 608 0330 8DF80F30 		strb	r3, [sp, #15]
  92:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 609              		.loc 1 92 0
 610 0334 8DF80E60 		strb	r6, [sp, #14]
  93:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 611              		.loc 1 93 0
 612 0338 FFF7FEFF 		bl	GPIO_Init
 613              	.LVL81:
  97:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 614              		.loc 1 97 0
 615 033c 4FF01403 		mov	r3, #20
  96:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 616              		.loc 1 96 0
 617 0340 4FF48061 		mov	r1, #1024
 618 0344 ADF80C10 		strh	r1, [sp, #12]	@ movhi
  99:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 619              		.loc 1 99 0
 620 0348 4846     		mov	r0, r9
 621 034a 03A9     		add	r1, sp, #12
  97:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 622              		.loc 1 97 0
 623 034c 8DF80F30 		strb	r3, [sp, #15]
  98:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 624              		.loc 1 98 0
 625 0350 8DF80E60 		strb	r6, [sp, #14]
  99:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 626              		.loc 1 99 0
 627 0354 FFF7FEFF 		bl	GPIO_Init
 628              	.LVL82:
 101:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
 629              		.loc 1 101 0
 630 0358 4FF00203 		mov	r3, #2	@ movhi
 631 035c ADF80C30 		strh	r3, [sp, #12]	@ movhi
 102:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 632              		.loc 1 102 0
 633 0360 4FF01803 		mov	r3, #24
 104:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 634              		.loc 1 104 0
 635 0364 03A9     		add	r1, sp, #12
 636 0366 4846     		mov	r0, r9
 102:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 637              		.loc 1 102 0
 638 0368 8DF80F30 		strb	r3, [sp, #15]
 103:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 639              		.loc 1 103 0
 640 036c 8DF80E60 		strb	r6, [sp, #14]
 104:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 641              		.loc 1 104 0
 642 0370 FFF7FEFF 		bl	GPIO_Init
 643              	.LVL83:
 107:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD;
 644              		.loc 1 107 0
 645 0374 43F63F02 		movw	r2, 14399	@ movhi
 646 0378 009B     		ldr	r3, [sp]
 112:src/motors.c  **** 	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 647              		.loc 1 112 0
 648 037a DFF814B2 		ldr	fp, .L45+28
 649 037e 1946     		mov	r1, r3
 650 0380 5846     		mov	r0, fp
 107:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD;
 651              		.loc 1 107 0
 652 0382 9A80     		strh	r2, [r3, #4]	@ movhi
 108:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 653              		.loc 1 108 0
 654 0384 1C80     		strh	r4, [r3]	@ movhi
 109:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 655              		.loc 1 109 0
 656 0386 DC80     		strh	r4, [r3, #6]	@ movhi
 110:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 657              		.loc 1 110 0
 658 0388 5C80     		strh	r4, [r3, #2]	@ movhi
 112:src/motors.c  **** 	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 659              		.loc 1 112 0
 660 038a FFF7FEFF 		bl	TIM_TimeBaseInit
 661              	.LVL84:
 114:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure); 
 662              		.loc 1 114 0
 663 038e 2846     		mov	r0, r5
 664 0390 FFF7FEFF 		bl	TIM_OCStructInit
 665              	.LVL85:
 117:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 666              		.loc 1 117 0
 667 0394 4FF06003 		mov	r3, #96	@ movhi
 122:src/motors.c  **** 	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 668              		.loc 1 122 0
 669 0398 2946     		mov	r1, r5
 670 039a 5846     		mov	r0, fp
 117:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 671              		.loc 1 117 0
 672 039c 2B80     		strh	r3, [r5]	@ movhi
 118:src/motors.c  **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 673              		.loc 1 118 0
 674 039e 6F80     		strh	r7, [r5, #2]	@ movhi
 119:src/motors.c  **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 675              		.loc 1 119 0
 676 03a0 EC80     		strh	r4, [r5, #6]	@ movhi
 120:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 677              		.loc 1 120 0
 678 03a2 2C81     		strh	r4, [r5, #8]	@ movhi
 122:src/motors.c  **** 	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
 679              		.loc 1 122 0
 680 03a4 FFF7FEFF 		bl	TIM_OC4Init
 681              	.LVL86:
 123:src/motors.c  **** 	TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
 682              		.loc 1 123 0
 683 03a8 5846     		mov	r0, fp
 684 03aa 0821     		movs	r1, #8
 685 03ac FFF7FEFF 		bl	TIM_OC4PreloadConfig
 686              	.LVL87:
 125:src/motors.c  **** 	TIM_ARRPreloadConfig(TIM3, ENABLE);
 687              		.loc 1 125 0
 688 03b0 3946     		mov	r1, r7
 689 03b2 5846     		mov	r0, fp
 690 03b4 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 691              	.LVL88:
 127:src/motors.c  **** 	TIM_CtrlPWMOutputs(TIM3, ENABLE);
 692              		.loc 1 127 0
 693 03b8 3946     		mov	r1, r7
 694 03ba 5846     		mov	r0, fp
 695 03bc FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 696              	.LVL89:
 129:src/motors.c  **** 	TIM_Cmd(TIM3, ENABLE);
 697              		.loc 1 129 0
 698 03c0 3946     		mov	r1, r7
 699 03c2 5846     		mov	r0, fp
 700 03c4 FFF7FEFF 		bl	TIM_Cmd
 701              	.LVL90:
 134:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 702              		.loc 1 134 0
 703 03c8 4FF40063 		mov	r3, #2048	@ movhi
 137:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 704              		.loc 1 137 0
 705 03cc 03A9     		add	r1, sp, #12
 706 03ce 4846     		mov	r0, r9
 134:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 707              		.loc 1 134 0
 708 03d0 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 135:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 709              		.loc 1 135 0
 710 03d4 8DF80FA0 		strb	r10, [sp, #15]
 136:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 711              		.loc 1 136 0
 712 03d8 8DF80E60 		strb	r6, [sp, #14]
 137:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 713              		.loc 1 137 0
 714 03dc FFF7FEFF 		bl	GPIO_Init
 715              	.LVL91:
 139:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 716              		.loc 1 139 0
 717 03e0 019A     		ldr	r2, [sp, #4]
 142:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 718              		.loc 1 142 0
 719 03e2 03A9     		add	r1, sp, #12
 720 03e4 4846     		mov	r0, r9
 139:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 721              		.loc 1 139 0
 722 03e6 ADF80C20 		strh	r2, [sp, #12]	@ movhi
 140:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 723              		.loc 1 140 0
 724 03ea 8DF80FA0 		strb	r10, [sp, #15]
 141:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 725              		.loc 1 141 0
 726 03ee 8DF80E60 		strb	r6, [sp, #14]
 142:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 727              		.loc 1 142 0
 728 03f2 FFF7FEFF 		bl	GPIO_Init
 729              	.LVL92:
 145:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 730              		.loc 1 145 0
 731 03f6 4FF01403 		mov	r3, #20
 144:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 732              		.loc 1 144 0
 733 03fa 4FF48052 		mov	r2, #4096
 147:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 734              		.loc 1 147 0
 735 03fe 03A9     		add	r1, sp, #12
 736 0400 4846     		mov	r0, r9
 144:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 737              		.loc 1 144 0
 738 0402 ADF80C20 		strh	r2, [sp, #12]	@ movhi
 739 0406 0192     		str	r2, [sp, #4]
 145:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 740              		.loc 1 145 0
 741 0408 8DF80F30 		strb	r3, [sp, #15]
 146:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 742              		.loc 1 146 0
 743 040c 8DF80E60 		strb	r6, [sp, #14]
 147:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 744              		.loc 1 147 0
 745 0410 FFF7FEFF 		bl	GPIO_Init
 746              	.LVL93:
 149:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
 747              		.loc 1 149 0
 748 0414 4FF48043 		mov	r3, #16384	@ movhi
 749 0418 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 150:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 750              		.loc 1 150 0
 751 041c 4FF01403 		mov	r3, #20
 152:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 752              		.loc 1 152 0
 753 0420 03A9     		add	r1, sp, #12
 754 0422 4846     		mov	r0, r9
 150:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 755              		.loc 1 150 0
 756 0424 8DF80F30 		strb	r3, [sp, #15]
 151:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 757              		.loc 1 151 0
 758 0428 8DF80E60 		strb	r6, [sp, #14]
 152:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 759              		.loc 1 152 0
 760 042c FFF7FEFF 		bl	GPIO_Init
 761              	.LVL94:
 155:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 762              		.loc 1 155 0
 763 0430 4FF01803 		mov	r3, #24
 154:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 764              		.loc 1 154 0
 765 0434 4FF0080B 		mov	fp, #8
 157:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 766              		.loc 1 157 0
 767 0438 03A9     		add	r1, sp, #12
 768 043a 4F48     		ldr	r0, .L45+4
 155:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 769              		.loc 1 155 0
 770 043c 8DF80F30 		strb	r3, [sp, #15]
 154:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 771              		.loc 1 154 0
 772 0440 ADF80CB0 		strh	fp, [sp, #12]	@ movhi
 156:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 773              		.loc 1 156 0
 774 0444 8DF80E60 		strb	r6, [sp, #14]
 157:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 775              		.loc 1 157 0
 776 0448 FFF7FEFF 		bl	GPIO_Init
 777              	.LVL95:
 160:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD; 
 778              		.loc 1 160 0
 779 044c 43F63F02 		movw	r2, 14399	@ movhi
 780 0450 009B     		ldr	r3, [sp]
 165:src/motors.c  **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 781              		.loc 1 165 0
 782 0452 4FF08040 		mov	r0, #1073741824
 783 0456 1946     		mov	r1, r3
 160:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD; 
 784              		.loc 1 160 0
 785 0458 9A80     		strh	r2, [r3, #4]	@ movhi
 161:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 786              		.loc 1 161 0
 787 045a 1C80     		strh	r4, [r3]	@ movhi
 162:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 788              		.loc 1 162 0
 789 045c DC80     		strh	r4, [r3, #6]	@ movhi
 163:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 790              		.loc 1 163 0
 791 045e 5C80     		strh	r4, [r3, #2]	@ movhi
 165:src/motors.c  **** 	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 792              		.loc 1 165 0
 793 0460 FFF7FEFF 		bl	TIM_TimeBaseInit
 794              	.LVL96:
 167:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure); 
 795              		.loc 1 167 0
 796 0464 2846     		mov	r0, r5
 797 0466 FFF7FEFF 		bl	TIM_OCStructInit
 798              	.LVL97:
 170:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 799              		.loc 1 170 0
 800 046a 4FF06003 		mov	r3, #96	@ movhi
 175:src/motors.c  **** 	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 801              		.loc 1 175 0
 802 046e 2946     		mov	r1, r5
 803 0470 4FF08040 		mov	r0, #1073741824
 170:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 804              		.loc 1 170 0
 805 0474 2B80     		strh	r3, [r5]	@ movhi
 171:src/motors.c  **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 806              		.loc 1 171 0
 807 0476 6F80     		strh	r7, [r5, #2]	@ movhi
 172:src/motors.c  **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 808              		.loc 1 172 0
 809 0478 EC80     		strh	r4, [r5, #6]	@ movhi
 173:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 810              		.loc 1 173 0
 811 047a 2C81     		strh	r4, [r5, #8]	@ movhi
 175:src/motors.c  **** 	TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 812              		.loc 1 175 0
 813 047c FFF7FEFF 		bl	TIM_OC4Init
 814              	.LVL98:
 176:src/motors.c  **** 	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 815              		.loc 1 176 0
 816 0480 5946     		mov	r1, fp
 817 0482 4FF08040 		mov	r0, #1073741824
 818 0486 FFF7FEFF 		bl	TIM_OC4PreloadConfig
 819              	.LVL99:
 178:src/motors.c  **** 	TIM_ARRPreloadConfig(TIM2, ENABLE);
 820              		.loc 1 178 0
 821 048a 3946     		mov	r1, r7
 822 048c 4FF08040 		mov	r0, #1073741824
 823 0490 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 824              	.LVL100:
 180:src/motors.c  **** 	TIM_CtrlPWMOutputs(TIM2, ENABLE);
 825              		.loc 1 180 0
 826 0494 3946     		mov	r1, r7
 827 0496 4FF08040 		mov	r0, #1073741824
 828 049a FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 829              	.LVL101:
 182:src/motors.c  **** 	TIM_Cmd(TIM2, ENABLE);
 830              		.loc 1 182 0
 831 049e 3946     		mov	r1, r7
 832 04a0 4FF08040 		mov	r0, #1073741824
 833 04a4 FFF7FEFF 		bl	TIM_Cmd
 834              	.LVL102:
 185:src/motors.c  **** 	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 835              		.loc 1 185 0
 836 04a8 3946     		mov	r1, r7
 837 04aa 3648     		ldr	r0, .L45+16
 838 04ac FFF7FEFF 		bl	GPIO_PinRemapConfig
 839              	.LVL103:
 187:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 840              		.loc 1 187 0
 841 04b0 48F20003 		movw	r3, 32768	@ movhi
 190:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 842              		.loc 1 190 0
 843 04b4 03A9     		add	r1, sp, #12
 844 04b6 4846     		mov	r0, r9
 187:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 845              		.loc 1 187 0
 846 04b8 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 188:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 847              		.loc 1 188 0
 848 04bc 8DF80FA0 		strb	r10, [sp, #15]
 189:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 849              		.loc 1 189 0
 850 04c0 8DF80E60 		strb	r6, [sp, #14]
 190:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 851              		.loc 1 190 0
 852 04c4 FFF7FEFF 		bl	GPIO_Init
 853              	.LVL104:
 192:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 854              		.loc 1 192 0
 855 04c8 48F20003 		movw	r3, 32768	@ movhi
 195:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 856              		.loc 1 195 0
 857 04cc 03A9     		add	r1, sp, #12
 858 04ce 2A48     		ldr	r0, .L45+4
 192:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 859              		.loc 1 192 0
 860 04d0 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 193:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 861              		.loc 1 193 0
 862 04d4 8DF80FA0 		strb	r10, [sp, #15]
 194:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 863              		.loc 1 194 0
 864 04d8 8DF80E60 		strb	r6, [sp, #14]
 195:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 865              		.loc 1 195 0
 866 04dc FFF7FEFF 		bl	GPIO_Init
 867              	.LVL105:
 198:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 868              		.loc 1 198 0
 869 04e0 4FF01403 		mov	r3, #20
 197:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 870              		.loc 1 197 0
 871 04e4 019A     		ldr	r2, [sp, #4]
 200:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 872              		.loc 1 200 0
 873 04e6 03A9     		add	r1, sp, #12
 874 04e8 2348     		ldr	r0, .L45+4
 197:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 875              		.loc 1 197 0
 876 04ea ADF80C20 		strh	r2, [sp, #12]	@ movhi
 198:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 877              		.loc 1 198 0
 878 04ee 8DF80F30 		strb	r3, [sp, #15]
 199:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 879              		.loc 1 199 0
 880 04f2 8DF80E60 		strb	r6, [sp, #14]
 200:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 881              		.loc 1 200 0
 882 04f6 FFF7FEFF 		bl	GPIO_Init
 883              	.LVL106:
 203:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 884              		.loc 1 203 0
 885 04fa 4FF01403 		mov	r3, #20
 205:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 886              		.loc 1 205 0
 887 04fe 03A9     		add	r1, sp, #12
 888 0500 4846     		mov	r0, r9
 203:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 889              		.loc 1 203 0
 890 0502 8DF80F30 		strb	r3, [sp, #15]
 202:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 891              		.loc 1 202 0
 892 0506 ADF80CB0 		strh	fp, [sp, #12]	@ movhi
 204:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 893              		.loc 1 204 0
 894 050a 8DF80E60 		strb	r6, [sp, #14]
 205:src/motors.c  **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 895              		.loc 1 205 0
 896 050e FFF7FEFF 		bl	GPIO_Init
 897              	.LVL107:
 207:src/motors.c  **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 898              		.loc 1 207 0
 899 0512 4FF40063 		mov	r3, #2048	@ movhi
 900 0516 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 208:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 901              		.loc 1 208 0
 902 051a 4FF01803 		mov	r3, #24
 210:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 903              		.loc 1 210 0
 904 051e 03A9     		add	r1, sp, #12
 905 0520 1548     		ldr	r0, .L45+4
 208:src/motors.c  **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 906              		.loc 1 208 0
 907 0522 8DF80F30 		strb	r3, [sp, #15]
 209:src/motors.c  **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 908              		.loc 1 209 0
 909 0526 8DF80E60 		strb	r6, [sp, #14]
 210:src/motors.c  **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 910              		.loc 1 210 0
 911 052a FFF7FEFF 		bl	GPIO_Init
 912              	.LVL108:
 213:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD*2; 
 913              		.loc 1 213 0
 914 052e 47F27E02 		movw	r2, #28798
 915 0532 009B     		ldr	r3, [sp]
 218:src/motors.c  **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 916              		.loc 1 218 0
 917 0534 4046     		mov	r0, r8
 918 0536 1946     		mov	r1, r3
 213:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Period = PERIOD*2; 
 919              		.loc 1 213 0
 920 0538 9A80     		strh	r2, [r3, #4]	@ movhi
 214:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 921              		.loc 1 214 0
 922 053a 1C80     		strh	r4, [r3]	@ movhi
 215:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 923              		.loc 1 215 0
 924 053c DC80     		strh	r4, [r3, #6]	@ movhi
 216:src/motors.c  **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 925              		.loc 1 216 0
 926 053e 5C80     		strh	r4, [r3, #2]	@ movhi
 218:src/motors.c  **** 	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 927              		.loc 1 218 0
 928 0540 FFF7FEFF 		bl	TIM_TimeBaseInit
 929              	.LVL109:
 220:src/motors.c  **** 	TIM_OCStructInit(&TIM_OCInitStructure);
 930              		.loc 1 220 0
 931 0544 2846     		mov	r0, r5
 932 0546 FFF7FEFF 		bl	TIM_OCStructInit
 933              	.LVL110:
 223:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 934              		.loc 1 223 0
 935 054a 4FF06003 		mov	r3, #96	@ movhi
 228:src/motors.c  **** 	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 936              		.loc 1 228 0
 937 054e 2946     		mov	r1, r5
 938 0550 4046     		mov	r0, r8
 223:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 939              		.loc 1 223 0
 940 0552 2B80     		strh	r3, [r5]	@ movhi
 224:src/motors.c  **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 941              		.loc 1 224 0
 942 0554 6F80     		strh	r7, [r5, #2]	@ movhi
 225:src/motors.c  **** 	TIM_OCInitStructure.TIM_Pulse = 0x0000;
 943              		.loc 1 225 0
 944 0556 EC80     		strh	r4, [r5, #6]	@ movhi
 226:src/motors.c  **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 945              		.loc 1 226 0
 946 0558 2C81     		strh	r4, [r5, #8]	@ movhi
 228:src/motors.c  **** 	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 947              		.loc 1 228 0
 948 055a FFF7FEFF 		bl	TIM_OC4Init
 949              	.LVL111:
 229:src/motors.c  **** 	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 950              		.loc 1 229 0
 951 055e 5946     		mov	r1, fp
 952 0560 4046     		mov	r0, r8
 953 0562 FFF7FEFF 		bl	TIM_OC4PreloadConfig
 954              	.LVL112:
 231:src/motors.c  **** 	TIM_ARRPreloadConfig(TIM1, ENABLE);
 955              		.loc 1 231 0
 956 0566 3946     		mov	r1, r7
 957 0568 4046     		mov	r0, r8
 958 056a FFF7FEFF 		bl	TIM_ARRPreloadConfig
 959              	.LVL113:
 233:src/motors.c  **** 	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 960              		.loc 1 233 0
 961 056e 3946     		mov	r1, r7
 962 0570 4046     		mov	r0, r8
 963 0572 0FE0     		b	.L46
 964              	.L47:
 965              		.align	2
 966              	.L45:
 967 0574 00100140 		.word	1073811456
 968 0578 00080140 		.word	1073809408
 969 057c 00000000 		.word	TIM_TimeBaseStructure
 970 0580 00000000 		.word	TIM_OCInitStructure
 971 0584 00023000 		.word	3146240
 972 0588 002C0140 		.word	1073818624
 973 058c 000C0140 		.word	1073810432
 974 0590 00040040 		.word	1073742848
 975              	.L46:
 976 0594 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 977              	.LVL114:
 235:src/motors.c  **** 	TIM_Cmd(TIM1, ENABLE);
 978              		.loc 1 235 0
 979 0598 3946     		mov	r1, r7
 980 059a 4046     		mov	r0, r8
 981 059c FFF7FEFF 		bl	TIM_Cmd
 982              	.LVL115:
 238:src/motors.c  **** 	motor_set_speed(0, 0, DIR_FORWARD);
 983              		.loc 1 238 0
 984 05a0 2246     		mov	r2, r4
 985 05a2 2146     		mov	r1, r4
 986 05a4 2046     		mov	r0, r4
 987 05a6 FFF7FEFF 		bl	motor_set_speed
 988              	.LVL116:
 239:src/motors.c  **** 	motor_set_speed(1, 0, DIR_FORWARD);
 989              		.loc 1 239 0
 990 05aa 2246     		mov	r2, r4
 991 05ac 2146     		mov	r1, r4
 992 05ae 3846     		mov	r0, r7
 993 05b0 FFF7FEFF 		bl	motor_set_speed
 994              	.LVL117:
 240:src/motors.c  **** 	motor_set_speed(2, 0, DIR_FORWARD);
 995              		.loc 1 240 0
 996 05b4 2246     		mov	r2, r4
 997 05b6 2146     		mov	r1, r4
 998 05b8 0220     		movs	r0, #2
 999 05ba FFF7FEFF 		bl	motor_set_speed
 1000              	.LVL118:
 241:src/motors.c  **** 	motor_set_speed(3, 0, DIR_FORWARD);
 1001              		.loc 1 241 0
 1002 05be 2246     		mov	r2, r4
 1003 05c0 2146     		mov	r1, r4
 1004 05c2 3046     		mov	r0, r6
 1005 05c4 FFF7FEFF 		bl	motor_set_speed
 1006              	.LVL119:
 242:src/motors.c  **** }
 1007              		.loc 1 242 0
 1008 05c8 05B0     		add	sp, sp, #20
 1009              	.LCFI3:
 1010              		.cfi_def_cfa_offset 36
 1011              		@ sp needed
 1012 05ca BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1013              		.cfi_endproc
 1014              	.LFE29:
 1016              		.comm	TIM_OCInitStructure,16,2
 1017              		.comm	TIM_TimeBaseStructure,10,2
 1018              	.Letext0:
 1019              		.file 2 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types.h"
 1020              		.file 3 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1021              		.file 4 "./lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 1022              		.file 5 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1023              		.file 6 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 1024              		.file 7 "./lib/CMSIS/CM3/CoreSupport/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 motors.c
     /tmp/cc9fQMtc.s:19     .text:00000000 $t
     /tmp/cc9fQMtc.s:24     .text:00000000 motor_set_speed
     /tmp/cc9fQMtc.s:391    .text:000001f4 $d
     /tmp/cc9fQMtc.s:399    .text:00000208 $t
     /tmp/cc9fQMtc.s:404    .text:00000208 MOTOR_Init
     /tmp/cc9fQMtc.s:967    .text:00000574 $d
                            *COM*:0000000a TIM_TimeBaseStructure
                            *COM*:00000010 TIM_OCInitStructure
     /tmp/cc9fQMtc.s:976    .text:00000594 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
GPIO_SetBits
GPIO_ResetBits
GPIO_Init
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_ARRPreloadConfig
TIM_CtrlPWMOutputs
TIM_Cmd
TIM_OC4Init
TIM_OC4PreloadConfig
GPIO_PinRemapConfig
