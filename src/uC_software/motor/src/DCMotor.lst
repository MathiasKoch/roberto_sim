   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"DCMotor.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN7DCMotor9motorTypeEv,"axG",%progbits,_ZN7DCMotor9motorTypeEv,comdat
  20              		.align	1
  21              		.weak	_ZN7DCMotor9motorTypeEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN7DCMotor9motorTypeEv:
  26              		.fnstart
  27              	.LFB29:
  28              		.file 1 "./inc/DCMotor.h"
   1:./inc/DCMotor.h **** 
   2:./inc/DCMotor.h **** #ifndef _DCMotor_H
   3:./inc/DCMotor.h **** #define	_DCMotor_H
   4:./inc/DCMotor.h **** 
   5:./inc/DCMotor.h **** #include <stm32f10x.h>
   6:./inc/DCMotor.h **** #include <stdlib.h>
   7:./inc/DCMotor.h **** #include "motor.h"
   8:./inc/DCMotor.h **** #include "encoder.h"
   9:./inc/DCMotor.h **** 
  10:./inc/DCMotor.h **** 
  11:./inc/DCMotor.h **** class DCMotor : public motor
  12:./inc/DCMotor.h **** {
  13:./inc/DCMotor.h **** public:
  14:./inc/DCMotor.h ****     DCMotor(motorSettings *settings);
  15:./inc/DCMotor.h ****     ~DCMotor();
  16:./inc/DCMotor.h **** 
  17:./inc/DCMotor.h ****     virtual void setReference(float setPoint);
  18:./inc/DCMotor.h ****     virtual float getReference();
  19:./inc/DCMotor.h ****     virtual char* motorName();
  20:./inc/DCMotor.h ****     virtual uint16_t update(float dt);
  21:./inc/DCMotor.h **** 
  22:./inc/DCMotor.h ****     virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
  29              		.loc 1 22 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              		.loc 1 22 0
  36 0000 0220     		movs	r0, #2
  37              	.LVL1:
  38 0002 7047     		bx	lr
  39              		.cfi_endproc
  40              	.LFE29:
  41              		.cantunwind
  42              		.fnend
  44              		.global	__aeabi_fcmplt
  45              		.global	__aeabi_fcmpgt
  46              		.text
  47              		.align	1
  48              		.global	_ZN7DCMotor12setReferenceEf
  49              		.thumb
  50              		.thumb_func
  52              	_ZN7DCMotor12setReferenceEf:
  53              		.fnstart
  54              	.LFB38:
  55              		.file 2 "src/DCMotor.cpp"
   1:src/DCMotor.cpp **** 
   2:src/DCMotor.cpp **** #include "DCMotor.h"
   3:src/DCMotor.cpp **** #include "motorSettings.h"
   4:src/DCMotor.cpp **** 
   5:src/DCMotor.cpp **** #define PERIOD 14399
   6:src/DCMotor.cpp **** #define PRESCALER 0
   7:src/DCMotor.cpp **** #define CLOCKDIV 0
   8:src/DCMotor.cpp **** 
   9:src/DCMotor.cpp **** 
  10:src/DCMotor.cpp **** DCMotor::DCMotor(motorSettings *settings) : motor(settings)
  11:src/DCMotor.cpp **** {
  12:src/DCMotor.cpp **** 
  13:src/DCMotor.cpp **** }
  14:src/DCMotor.cpp **** 
  15:src/DCMotor.cpp **** DCMotor::~DCMotor()
  16:src/DCMotor.cpp **** {
  17:src/DCMotor.cpp **** }
  18:src/DCMotor.cpp **** 
  19:src/DCMotor.cpp **** bool DCMotor::motorInit()
  20:src/DCMotor.cpp **** {
  21:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
  22:src/DCMotor.cpp **** 
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  25:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  26:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
  27:src/DCMotor.cpp **** 
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
  29:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  30:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  31:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
  32:src/DCMotor.cpp **** 
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  35:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  36:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
  37:src/DCMotor.cpp **** 
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
  39:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  40:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  41:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
  42:src/DCMotor.cpp **** 
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
  44:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  45:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  46:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
  47:src/DCMotor.cpp **** 
  48:src/DCMotor.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  49:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
  50:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
  51:src/DCMotor.cpp **** 	else
  52:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD;
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
  54:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
  55:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  56:src/DCMotor.cpp **** 
  57:src/DCMotor.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
  58:src/DCMotor.cpp **** 
  59:src/DCMotor.cpp **** 	TIM_OCInitTypeDef TIM_OCInitStructure;
  60:src/DCMotor.cpp **** 	TIM_OCStructInit(&TIM_OCInitStructure);
  61:src/DCMotor.cpp **** 
  62:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  63:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  64:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
  65:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  66:src/DCMotor.cpp **** 
  67:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
  68:src/DCMotor.cpp **** 		case 1:
  69:src/DCMotor.cpp **** 			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
  70:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  71:src/DCMotor.cpp **** 			break;
  72:src/DCMotor.cpp **** 		case 2:
  73:src/DCMotor.cpp **** 			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
  74:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  75:src/DCMotor.cpp **** 			break;
  76:src/DCMotor.cpp **** 		case 3:
  77:src/DCMotor.cpp **** 			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
  78:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  79:src/DCMotor.cpp **** 			break;
  80:src/DCMotor.cpp **** 		case 4:
  81:src/DCMotor.cpp **** 			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
  82:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  83:src/DCMotor.cpp **** 			break;
  84:src/DCMotor.cpp **** 		default:
  85:src/DCMotor.cpp **** 			return false;
  86:src/DCMotor.cpp **** 	}
  87:src/DCMotor.cpp **** 
  88:src/DCMotor.cpp **** 	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
  89:src/DCMotor.cpp **** 
  90:src/DCMotor.cpp **** 	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
  91:src/DCMotor.cpp **** 
  92:src/DCMotor.cpp **** 	TIM_Cmd(m_settings->m_Timer, ENABLE);
  93:src/DCMotor.cpp **** 
  94:src/DCMotor.cpp **** 	// Initialize encoder
  95:src/DCMotor.cpp **** 	initEncoder(m_settings->encoderAddr);
  96:src/DCMotor.cpp **** 
  97:src/DCMotor.cpp **** 	// Initialize PID regulator
  98:src/DCMotor.cpp **** 	KP = m_settings->Kp;
  99:src/DCMotor.cpp **** 	KI = m_settings->Ki;
 100:src/DCMotor.cpp **** 	KD = m_settings->Kd;
 101:src/DCMotor.cpp **** 	max = m_settings->MAX;
 102:src/DCMotor.cpp **** 	min = m_settings->MIN;
 103:src/DCMotor.cpp **** 	integral = 0;
 104:src/DCMotor.cpp **** 	error = 0;
 105:src/DCMotor.cpp **** 
 106:src/DCMotor.cpp **** 	return true;
 107:src/DCMotor.cpp **** }
 108:src/DCMotor.cpp **** 
 109:src/DCMotor.cpp **** void DCMotor::setReference(float setPoint){
  56              		.loc 2 109 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              	.LVL2:
  61 0000 70B5     		push	{r4, r5, r6, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 16
  64              		.cfi_offset 4, -16
  65              		.cfi_offset 5, -12
  66              		.cfi_offset 6, -8
  67              		.cfi_offset 14, -4
  68              		.loc 2 109 0
  69 0002 0E46     		mov	r6, r1
 110:src/DCMotor.cpp **** 	speed = setPoint;
 111:src/DCMotor.cpp **** 	if(speed < 0)
  70              		.loc 2 111 0
  71 0004 0025     		movs	r5, #0
 109:src/DCMotor.cpp **** 	speed = setPoint;
  72              		.loc 2 109 0
  73 0006 0446     		mov	r4, r0
  74              		.loc 2 111 0
  75 0008 2946     		mov	r1, r5
  76              	.LVL3:
  77 000a 3046     		mov	r0, r6
  78              	.LVL4:
  79 000c FFF7FEFF 		bl	__aeabi_fcmplt
  80              	.LVL5:
  81 0010 08B9     		cbnz	r0, .L3
 110:src/DCMotor.cpp **** 	speed = setPoint;
  82              		.loc 2 110 0
  83 0012 A660     		str	r6, [r4, #8]	@ float
  84 0014 00E0     		b	.L4
  85              	.L3:
 112:src/DCMotor.cpp **** 		speed = 0;
  86              		.loc 2 112 0
  87 0016 A560     		str	r5, [r4, #8]	@ float
  88              	.L4:
 113:src/DCMotor.cpp **** 
 114:src/DCMotor.cpp **** 	if(speed > PERIOD)
  89              		.loc 2 114 0
  90 0018 034D     		ldr	r5, .L9
  91 001a A068     		ldr	r0, [r4, #8]	@ float
  92 001c 2946     		mov	r1, r5
  93 001e FFF7FEFF 		bl	__aeabi_fcmpgt
  94              	.LVL6:
  95 0022 00B1     		cbz	r0, .L2
 115:src/DCMotor.cpp **** 		speed = PERIOD;
  96              		.loc 2 115 0
  97 0024 A560     		str	r5, [r4, #8]	@ float
  98              	.L2:
  99 0026 70BD     		pop	{r4, r5, r6, pc}
 100              	.LVL7:
 101              	.L10:
 102              		.align	2
 103              	.L9:
 104 0028 00FC6046 		.word	1180761088
 105              		.cfi_endproc
 106              	.LFE38:
 107              		.cantunwind
 108              		.fnend
 110              		.align	1
 111              		.global	_ZN7DCMotor12getReferenceEv
 112              		.thumb
 113              		.thumb_func
 115              	_ZN7DCMotor12getReferenceEv:
 116              		.fnstart
 117              	.LFB40:
 116:src/DCMotor.cpp **** }
 117:src/DCMotor.cpp **** 
 118:src/DCMotor.cpp **** bool DCMotor::setSpeed(int s){
 119:src/DCMotor.cpp **** 
 120:src/DCMotor.cpp **** 	if(abs(s) > 0){
 121:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 122:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 123:src/DCMotor.cpp **** 
 124:src/DCMotor.cpp **** 		if(s > 0){
 125:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 126:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 127:src/DCMotor.cpp **** 		}else if(s < 0){
 128:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 129:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 130:src/DCMotor.cpp **** 		}else{
 131:src/DCMotor.cpp **** 			return false;
 132:src/DCMotor.cpp **** 		}
 133:src/DCMotor.cpp **** 	}else{
 134:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 135:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 136:src/DCMotor.cpp **** 
 137:src/DCMotor.cpp **** 		// Break to GND
 138:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 139:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 140:src/DCMotor.cpp **** 	}
 141:src/DCMotor.cpp **** 
 142:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
 143:src/DCMotor.cpp **** 		s = s*2;
 144:src/DCMotor.cpp **** 
 145:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
 146:src/DCMotor.cpp **** 		case 1:
 147:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR1 = (uint32_t)abs(s);
 148:src/DCMotor.cpp **** 			break;
 149:src/DCMotor.cpp **** 		case 2:
 150:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR2 = (uint32_t)abs(s);
 151:src/DCMotor.cpp **** 			break;
 152:src/DCMotor.cpp **** 		case 3:
 153:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR3 = (uint32_t)abs(s);
 154:src/DCMotor.cpp **** 			break;
 155:src/DCMotor.cpp **** 		case 4:
 156:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
 157:src/DCMotor.cpp **** 			break;
 158:src/DCMotor.cpp **** 		default:
 159:src/DCMotor.cpp **** 			return false;
 160:src/DCMotor.cpp **** 	}
 161:src/DCMotor.cpp **** 
 162:src/DCMotor.cpp **** 	return true;
 163:src/DCMotor.cpp **** }
 164:src/DCMotor.cpp **** 
 165:src/DCMotor.cpp **** float DCMotor::getReference(){
 118              		.loc 2 165 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LVL8:
 166:src/DCMotor.cpp **** 	return speed;
 167:src/DCMotor.cpp **** }
 124              		.loc 2 167 0
 125 002c 8068     		ldr	r0, [r0, #8]	@ float
 126              	.LVL9:
 127 002e 7047     		bx	lr
 128              		.cfi_endproc
 129              	.LFE40:
 130              		.cantunwind
 131              		.fnend
 133              		.align	1
 134              		.global	_ZN7DCMotor9motorNameEv
 135              		.thumb
 136              		.thumb_func
 138              	_ZN7DCMotor9motorNameEv:
 139              		.fnstart
 140              	.LFB41:
 168:src/DCMotor.cpp **** 
 169:src/DCMotor.cpp **** char* DCMotor::motorName(){
 141              		.loc 2 169 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
 146              	.LVL10:
 170:src/DCMotor.cpp **** 	return m_settings->m_motorName;
 147              		.loc 2 170 0
 148 0030 4368     		ldr	r3, [r0, #4]
 171:src/DCMotor.cpp **** }
 149              		.loc 2 171 0
 150 0032 5868     		ldr	r0, [r3, #4]
 151              	.LVL11:
 152 0034 7047     		bx	lr
 153              		.cfi_endproc
 154              	.LFE41:
 155              		.cantunwind
 156              		.fnend
 158              		.align	1
 159              		.global	_ZN7DCMotorD2Ev
 160              		.thumb
 161              		.thumb_func
 163              	_ZN7DCMotorD2Ev:
 164              		.fnstart
 165              	.LFB34:
  15:src/DCMotor.cpp **** {
 166              		.loc 2 15 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL12:
 171 0036 10B5     		push	{r4, lr}
 172              		.save {r4, lr}
 173              	.LCFI1:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 14, -4
  15:src/DCMotor.cpp **** {
 177              		.loc 2 15 0
 178 0038 0446     		mov	r4, r0
 179              	.LBB4:
 180 003a 034B     		ldr	r3, .L14
 181 003c 0360     		str	r3, [r0]
 182 003e FFF7FEFF 		bl	_ZN5motorD2Ev
 183              	.LVL13:
 184              	.LBE4:
  17:src/DCMotor.cpp **** 
 185              		.loc 2 17 0
 186 0042 2046     		mov	r0, r4
 187 0044 10BD     		pop	{r4, pc}
 188              	.LVL14:
 189              	.L15:
 190 0046 00BF     		.align	2
 191              	.L14:
 192 0048 08000000 		.word	.LANCHOR0+8
 193              		.cfi_endproc
 194              	.LFE34:
 195              		.fnend
 197              		.global	_ZN7DCMotorD1Ev
 198              		.thumb_set _ZN7DCMotorD1Ev,_ZN7DCMotorD2Ev
 199              		.align	1
 200              		.global	_ZN7DCMotorD0Ev
 201              		.thumb
 202              		.thumb_func
 204              	_ZN7DCMotorD0Ev:
 205              		.fnstart
 206              	.LFB36:
  15:src/DCMotor.cpp **** {
 207              		.loc 2 15 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              	.LVL15:
 212 004c 10B5     		push	{r4, lr}
 213              		.save {r4, lr}
 214              	.LCFI2:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 4, -8
 217              		.cfi_offset 14, -4
  15:src/DCMotor.cpp **** {
 218              		.loc 2 15 0
 219 004e 0446     		mov	r4, r0
  17:src/DCMotor.cpp **** 
 220              		.loc 2 17 0
 221 0050 FFF7FEFF 		bl	_ZN7DCMotorD1Ev
 222              	.LVL16:
 223 0054 2046     		mov	r0, r4
 224 0056 FFF7FEFF 		bl	_ZdlPv
 225              	.LVL17:
 226 005a 2046     		mov	r0, r4
 227 005c 10BD     		pop	{r4, pc}
 228              		.cfi_endproc
 229              	.LFE36:
 230              		.fnend
 232              		.align	1
 233              		.global	_ZN7DCMotor9motorInitEv
 234              		.thumb
 235              		.thumb_func
 237              	_ZN7DCMotor9motorInitEv:
 238              		.fnstart
 239              	.LFB37:
  20:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 240              		.loc 2 20 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 32
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              	.LVL18:
 245 005e 70B5     		push	{r4, r5, r6, lr}
 246              		.save {r4, r5, r6, lr}
 247              	.LCFI3:
 248              		.cfi_def_cfa_offset 16
 249              		.cfi_offset 4, -16
 250              		.cfi_offset 5, -12
 251              		.cfi_offset 6, -8
 252              		.cfi_offset 14, -4
 253 0060 0446     		mov	r4, r0
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 254              		.loc 2 23 0
 255 0062 4368     		ldr	r3, [r0, #4]
  20:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 256              		.loc 2 20 0
 257              		.pad #32
 258 0064 88B0     		sub	sp, sp, #32
 259              	.LCFI4:
 260              		.cfi_def_cfa_offset 48
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 261              		.loc 2 23 0
 262 0066 1A6A     		ldr	r2, [r3, #32]
  25:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 263              		.loc 2 25 0
 264 0068 0325     		movs	r5, #3
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 265              		.loc 2 24 0
 266 006a 1026     		movs	r6, #16
  26:src/DCMotor.cpp **** 
 267              		.loc 2 26 0
 268 006c 586A     		ldr	r0, [r3, #36]
 269              	.LVL19:
 270 006e 6946     		mov	r1, sp
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 271              		.loc 2 23 0
 272 0070 ADF80020 		strh	r2, [sp]	@ movhi
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 273              		.loc 2 24 0
 274 0074 8DF80360 		strb	r6, [sp, #3]
  25:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 275              		.loc 2 25 0
 276 0078 8DF80250 		strb	r5, [sp, #2]
  26:src/DCMotor.cpp **** 
 277              		.loc 2 26 0
 278 007c FFF7FEFF 		bl	GPIO_Init
 279              	.LVL20:
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 280              		.loc 2 28 0
 281 0080 6368     		ldr	r3, [r4, #4]
  31:src/DCMotor.cpp **** 
 282              		.loc 2 31 0
 283 0082 6946     		mov	r1, sp
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 284              		.loc 2 28 0
 285 0084 1A6B     		ldr	r2, [r3, #48]
  31:src/DCMotor.cpp **** 
 286              		.loc 2 31 0
 287 0086 586B     		ldr	r0, [r3, #52]
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 288              		.loc 2 28 0
 289 0088 ADF80020 		strh	r2, [sp]	@ movhi
  29:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 290              		.loc 2 29 0
 291 008c 8DF80360 		strb	r6, [sp, #3]
  30:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 292              		.loc 2 30 0
 293 0090 8DF80250 		strb	r5, [sp, #2]
  31:src/DCMotor.cpp **** 
 294              		.loc 2 31 0
 295 0094 FFF7FEFF 		bl	GPIO_Init
 296              	.LVL21:
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 297              		.loc 2 33 0
 298 0098 6368     		ldr	r3, [r4, #4]
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 299              		.loc 2 34 0
 300 009a 1426     		movs	r6, #20
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 301              		.loc 2 33 0
 302 009c 9A6A     		ldr	r2, [r3, #40]
  36:src/DCMotor.cpp **** 
 303              		.loc 2 36 0
 304 009e D86A     		ldr	r0, [r3, #44]
 305 00a0 6946     		mov	r1, sp
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 306              		.loc 2 33 0
 307 00a2 ADF80020 		strh	r2, [sp]	@ movhi
  35:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 308              		.loc 2 35 0
 309 00a6 8DF80250 		strb	r5, [sp, #2]
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 310              		.loc 2 34 0
 311 00aa 8DF80360 		strb	r6, [sp, #3]
  36:src/DCMotor.cpp **** 
 312              		.loc 2 36 0
 313 00ae FFF7FEFF 		bl	GPIO_Init
 314              	.LVL22:
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 315              		.loc 2 38 0
 316 00b2 6368     		ldr	r3, [r4, #4]
  41:src/DCMotor.cpp **** 
 317              		.loc 2 41 0
 318 00b4 6946     		mov	r1, sp
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 319              		.loc 2 38 0
 320 00b6 9A6B     		ldr	r2, [r3, #56]
  41:src/DCMotor.cpp **** 
 321              		.loc 2 41 0
 322 00b8 D86B     		ldr	r0, [r3, #60]
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 323              		.loc 2 38 0
 324 00ba ADF80020 		strh	r2, [sp]	@ movhi
  40:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 325              		.loc 2 40 0
 326 00be 8DF80250 		strb	r5, [sp, #2]
  39:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 327              		.loc 2 39 0
 328 00c2 8DF80360 		strb	r6, [sp, #3]
  41:src/DCMotor.cpp **** 
 329              		.loc 2 41 0
 330 00c6 FFF7FEFF 		bl	GPIO_Init
 331              	.LVL23:
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 332              		.loc 2 43 0
 333 00ca 6368     		ldr	r3, [r4, #4]
  46:src/DCMotor.cpp **** 
 334              		.loc 2 46 0
 335 00cc 6946     		mov	r1, sp
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 336              		.loc 2 43 0
 337 00ce 1A6C     		ldr	r2, [r3, #64]
  46:src/DCMotor.cpp **** 
 338              		.loc 2 46 0
 339 00d0 586C     		ldr	r0, [r3, #68]
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 340              		.loc 2 43 0
 341 00d2 ADF80020 		strh	r2, [sp]	@ movhi
  44:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 342              		.loc 2 44 0
 343 00d6 1822     		movs	r2, #24
 344 00d8 8DF80320 		strb	r2, [sp, #3]
  45:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 345              		.loc 2 45 0
 346 00dc 8DF80250 		strb	r5, [sp, #2]
  46:src/DCMotor.cpp **** 
 347              		.loc 2 46 0
 348 00e0 FFF7FEFF 		bl	GPIO_Init
 349              	.LVL24:
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 350              		.loc 2 49 0
 351 00e4 6368     		ldr	r3, [r4, #4]
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 352              		.loc 2 53 0
 353 00e6 0025     		movs	r5, #0
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 354              		.loc 2 49 0
 355 00e8 9868     		ldr	r0, [r3, #8]
 356 00ea 3A4B     		ldr	r3, .L29
  57:src/DCMotor.cpp **** 
 357              		.loc 2 57 0
 358 00ec 01A9     		add	r1, sp, #4
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 359              		.loc 2 49 0
 360 00ee 9842     		cmp	r0, r3
  50:src/DCMotor.cpp **** 	else
 361              		.loc 2 50 0
 362 00f0 0CBF     		ite	eq
 363 00f2 47F27E03 		movweq	r3, #28798
  52:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 364              		.loc 2 52 0
 365 00f6 43F63F03 		movwne	r3, #14399
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 366              		.loc 2 53 0
 367 00fa ADF80450 		strh	r5, [sp, #4]	@ movhi
  52:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 368              		.loc 2 52 0
 369 00fe ADF80830 		strh	r3, [sp, #8]	@ movhi
  54:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 370              		.loc 2 54 0
 371 0102 ADF80A50 		strh	r5, [sp, #10]	@ movhi
  55:src/DCMotor.cpp **** 
 372              		.loc 2 55 0
 373 0106 ADF80650 		strh	r5, [sp, #6]	@ movhi
  57:src/DCMotor.cpp **** 
 374              		.loc 2 57 0
 375 010a FFF7FEFF 		bl	TIM_TimeBaseInit
 376              	.LVL25:
  60:src/DCMotor.cpp **** 
 377              		.loc 2 60 0
 378 010e 04A8     		add	r0, sp, #16
 379 0110 FFF7FEFF 		bl	TIM_OCStructInit
 380              	.LVL26:
  62:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 381              		.loc 2 62 0
 382 0114 6023     		movs	r3, #96
 383 0116 ADF81030 		strh	r3, [sp, #16]	@ movhi
  63:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
 384              		.loc 2 63 0
 385 011a 0123     		movs	r3, #1
 386 011c ADF81230 		strh	r3, [sp, #18]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 387              		.loc 2 67 0
 388 0120 6368     		ldr	r3, [r4, #4]
  64:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 389              		.loc 2 64 0
 390 0122 ADF81650 		strh	r5, [sp, #22]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 391              		.loc 2 67 0
 392 0126 DA68     		ldr	r2, [r3, #12]
  65:src/DCMotor.cpp **** 
 393              		.loc 2 65 0
 394 0128 ADF81850 		strh	r5, [sp, #24]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 395              		.loc 2 67 0
 396 012c 013A     		subs	r2, r2, #1
 397 012e 032A     		cmp	r2, #3
 398 0130 4CD8     		bhi	.L27
 399 0132 DFE802F0 		tbb	[pc, r2]
 400              	.L22:
 401 0136 02       		.byte	(.L21-.L22)/2
 402 0137 0C       		.byte	(.L23-.L22)/2
 403 0138 16       		.byte	(.L24-.L22)/2
 404 0139 20       		.byte	(.L25-.L22)/2
 405              		.p2align 1
 406              	.L21:
  69:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 407              		.loc 2 69 0
 408 013a 04A9     		add	r1, sp, #16
 409 013c 9868     		ldr	r0, [r3, #8]
 410 013e FFF7FEFF 		bl	TIM_OC1Init
 411              	.LVL27:
  70:src/DCMotor.cpp **** 			break;
 412              		.loc 2 70 0
 413 0142 6368     		ldr	r3, [r4, #4]
 414 0144 0821     		movs	r1, #8
 415 0146 9868     		ldr	r0, [r3, #8]
 416 0148 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 417              	.LVL28:
 418 014c 1CE0     		b	.L26
 419              	.L23:
  73:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 420              		.loc 2 73 0
 421 014e 04A9     		add	r1, sp, #16
 422 0150 9868     		ldr	r0, [r3, #8]
 423 0152 FFF7FEFF 		bl	TIM_OC2Init
 424              	.LVL29:
  74:src/DCMotor.cpp **** 			break;
 425              		.loc 2 74 0
 426 0156 6368     		ldr	r3, [r4, #4]
 427 0158 0821     		movs	r1, #8
 428 015a 9868     		ldr	r0, [r3, #8]
 429 015c FFF7FEFF 		bl	TIM_OC2PreloadConfig
 430              	.LVL30:
 431 0160 12E0     		b	.L26
 432              	.L24:
  77:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 433              		.loc 2 77 0
 434 0162 04A9     		add	r1, sp, #16
 435 0164 9868     		ldr	r0, [r3, #8]
 436 0166 FFF7FEFF 		bl	TIM_OC3Init
 437              	.LVL31:
  78:src/DCMotor.cpp **** 			break;
 438              		.loc 2 78 0
 439 016a 6368     		ldr	r3, [r4, #4]
 440 016c 0821     		movs	r1, #8
 441 016e 9868     		ldr	r0, [r3, #8]
 442 0170 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 443              	.LVL32:
 444 0174 08E0     		b	.L26
 445              	.L25:
  81:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 446              		.loc 2 81 0
 447 0176 9868     		ldr	r0, [r3, #8]
 448 0178 04A9     		add	r1, sp, #16
 449 017a FFF7FEFF 		bl	TIM_OC4Init
 450              	.LVL33:
  82:src/DCMotor.cpp **** 			break;
 451              		.loc 2 82 0
 452 017e 6368     		ldr	r3, [r4, #4]
 453 0180 0821     		movs	r1, #8
 454 0182 9868     		ldr	r0, [r3, #8]
 455 0184 FFF7FEFF 		bl	TIM_OC4PreloadConfig
 456              	.LVL34:
 457              	.L26:
  88:src/DCMotor.cpp **** 
 458              		.loc 2 88 0
 459 0188 6368     		ldr	r3, [r4, #4]
 460 018a 0121     		movs	r1, #1
 461 018c 9868     		ldr	r0, [r3, #8]
 462 018e FFF7FEFF 		bl	TIM_ARRPreloadConfig
 463              	.LVL35:
  90:src/DCMotor.cpp **** 
 464              		.loc 2 90 0
 465 0192 6368     		ldr	r3, [r4, #4]
 466 0194 0121     		movs	r1, #1
 467 0196 9868     		ldr	r0, [r3, #8]
 468 0198 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 469              	.LVL36:
  92:src/DCMotor.cpp **** 
 470              		.loc 2 92 0
 471 019c 6368     		ldr	r3, [r4, #4]
 472 019e 0121     		movs	r1, #1
 473 01a0 9868     		ldr	r0, [r3, #8]
 474 01a2 FFF7FEFF 		bl	TIM_Cmd
 475              	.LVL37:
  95:src/DCMotor.cpp **** 
 476              		.loc 2 95 0
 477 01a6 6368     		ldr	r3, [r4, #4]
 478              	.LVL38:
 106:src/DCMotor.cpp **** }
 479              		.loc 2 106 0
 480 01a8 0120     		movs	r0, #1
 481              	.LBB5:
 482              	.LBB6:
 172:src/DCMotor.cpp **** 
 173:src/DCMotor.cpp **** void DCMotor::initEncoder(uint16_t addr){
 174:src/DCMotor.cpp **** 	encAddr = addr;
 483              		.loc 2 174 0
 484 01aa B3F84820 		ldrh	r2, [r3, #72]
 485 01ae 2273     		strb	r2, [r4, #12]
 486              	.LVL39:
 487              	.LBE6:
 488              	.LBE5:
  98:src/DCMotor.cpp **** 	KI = m_settings->Ki;
 489              		.loc 2 98 0
 490 01b0 DA6C     		ldr	r2, [r3, #76]	@ float
 491 01b2 6261     		str	r2, [r4, #20]	@ float
  99:src/DCMotor.cpp **** 	KD = m_settings->Kd;
 492              		.loc 2 99 0
 493 01b4 1A6D     		ldr	r2, [r3, #80]	@ float
 494 01b6 A261     		str	r2, [r4, #24]	@ float
 100:src/DCMotor.cpp **** 	max = m_settings->MAX;
 495              		.loc 2 100 0
 496 01b8 5A6D     		ldr	r2, [r3, #84]	@ float
 497 01ba E261     		str	r2, [r4, #28]	@ float
 101:src/DCMotor.cpp **** 	min = m_settings->MIN;
 498              		.loc 2 101 0
 499 01bc 9A6D     		ldr	r2, [r3, #88]	@ float
 102:src/DCMotor.cpp **** 	integral = 0;
 500              		.loc 2 102 0
 501 01be DB6D     		ldr	r3, [r3, #92]	@ float
 101:src/DCMotor.cpp **** 	min = m_settings->MIN;
 502              		.loc 2 101 0
 503 01c0 2262     		str	r2, [r4, #32]	@ float
 102:src/DCMotor.cpp **** 	integral = 0;
 504              		.loc 2 102 0
 505 01c2 6362     		str	r3, [r4, #36]	@ float
 103:src/DCMotor.cpp **** 	error = 0;
 506              		.loc 2 103 0
 507 01c4 0023     		movs	r3, #0
 508 01c6 E362     		str	r3, [r4, #44]	@ float
 104:src/DCMotor.cpp **** 
 509              		.loc 2 104 0
 510 01c8 A362     		str	r3, [r4, #40]	@ float
 106:src/DCMotor.cpp **** }
 511              		.loc 2 106 0
 512 01ca 00E0     		b	.L20
 513              	.L27:
  85:src/DCMotor.cpp **** 	}
 514              		.loc 2 85 0
 515 01cc 0020     		movs	r0, #0
 516              	.L20:
 107:src/DCMotor.cpp **** 
 517              		.loc 2 107 0
 518 01ce 08B0     		add	sp, sp, #32
 519              	.LCFI5:
 520              		.cfi_def_cfa_offset 16
 521              		@ sp needed
 522 01d0 70BD     		pop	{r4, r5, r6, pc}
 523              	.LVL40:
 524              	.L30:
 525 01d2 00BF     		.align	2
 526              	.L29:
 527 01d4 002C0140 		.word	1073818624
 528              		.cfi_endproc
 529              	.LFE37:
 530              		.fnend
 532              		.align	1
 533              		.global	_ZN7DCMotorC2EP13motorSettings
 534              		.thumb
 535              		.thumb_func
 537              	_ZN7DCMotorC2EP13motorSettings:
 538              		.fnstart
 539              	.LFB31:
  10:src/DCMotor.cpp **** {
 540              		.loc 2 10 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              	.LVL41:
 545 01d8 10B5     		push	{r4, lr}
 546              		.save {r4, lr}
 547              	.LCFI6:
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 4, -8
 550              		.cfi_offset 14, -4
  10:src/DCMotor.cpp **** {
 551              		.loc 2 10 0
 552 01da 0446     		mov	r4, r0
 553              	.LBB7:
 554 01dc FFF7FEFF 		bl	_ZN5motorC2EP13motorSettings
 555              	.LVL42:
 556 01e0 014B     		ldr	r3, .L32
 557              	.LBE7:
  13:src/DCMotor.cpp **** 
 558              		.loc 2 13 0
 559 01e2 2046     		mov	r0, r4
 560              	.LBB8:
  10:src/DCMotor.cpp **** {
 561              		.loc 2 10 0
 562 01e4 2360     		str	r3, [r4]
 563              	.LBE8:
  13:src/DCMotor.cpp **** 
 564              		.loc 2 13 0
 565 01e6 10BD     		pop	{r4, pc}
 566              	.LVL43:
 567              	.L33:
 568              		.align	2
 569              	.L32:
 570 01e8 08000000 		.word	.LANCHOR0+8
 571              		.cfi_endproc
 572              	.LFE31:
 573              		.fnend
 575              		.global	_ZN7DCMotorC1EP13motorSettings
 576              		.thumb_set _ZN7DCMotorC1EP13motorSettings,_ZN7DCMotorC2EP13motorSettings
 577              		.align	1
 578              		.global	_ZN7DCMotor8setSpeedEi
 579              		.thumb
 580              		.thumb_func
 582              	_ZN7DCMotor8setSpeedEi:
 583              		.fnstart
 584              	.LFB39:
 118:src/DCMotor.cpp **** 
 585              		.loc 2 118 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              	.LVL44:
 590 01ec 38B5     		push	{r3, r4, r5, lr}
 591              		.save {r3, r4, r5, lr}
 592              	.LCFI7:
 593              		.cfi_def_cfa_offset 16
 594              		.cfi_offset 3, -16
 595              		.cfi_offset 4, -12
 596              		.cfi_offset 5, -8
 597              		.cfi_offset 14, -4
 120:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 598              		.loc 2 120 0
 599 01ee 0C46     		mov	r4, r1
 600 01f0 4368     		ldr	r3, [r0, #4]
 118:src/DCMotor.cpp **** 
 601              		.loc 2 118 0
 602 01f2 0546     		mov	r5, r0
 121:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 603              		.loc 2 121 0
 604 01f4 198D     		ldrh	r1, [r3, #40]
 605              	.LVL45:
 606 01f6 D86A     		ldr	r0, [r3, #44]
 607              	.LVL46:
 120:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 608              		.loc 2 120 0
 609 01f8 B4B1     		cbz	r4, .L35
 121:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 610              		.loc 2 121 0
 611 01fa FFF7FEFF 		bl	GPIO_SetBits
 612              	.LVL47:
 122:src/DCMotor.cpp **** 
 613              		.loc 2 122 0
 614 01fe 6B68     		ldr	r3, [r5, #4]
 615 0200 198F     		ldrh	r1, [r3, #56]
 616 0202 D86B     		ldr	r0, [r3, #60]
 617 0204 FFF7FEFF 		bl	GPIO_SetBits
 618              	.LVL48:
 619 0208 6B68     		ldr	r3, [r5, #4]
 124:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 620              		.loc 2 124 0
 621 020a 002C     		cmp	r4, #0
 125:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 622              		.loc 2 125 0
 623 020c 198C     		ldrh	r1, [r3, #32]
 624 020e 586A     		ldr	r0, [r3, #36]
 124:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 625              		.loc 2 124 0
 626 0210 02DD     		ble	.L36
 125:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 627              		.loc 2 125 0
 628 0212 FFF7FEFF 		bl	GPIO_SetBits
 629              	.LVL49:
 630 0216 13E0     		b	.L46
 631              	.L36:
 128:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 632              		.loc 2 128 0
 633 0218 FFF7FEFF 		bl	GPIO_ResetBits
 634              	.LVL50:
 129:src/DCMotor.cpp **** 		}else{
 635              		.loc 2 129 0
 636 021c 6B68     		ldr	r3, [r5, #4]
 637 021e 198E     		ldrh	r1, [r3, #48]
 638 0220 586B     		ldr	r0, [r3, #52]
 639 0222 FFF7FEFF 		bl	GPIO_SetBits
 640              	.LVL51:
 641 0226 10E0     		b	.L37
 642              	.L35:
 134:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 643              		.loc 2 134 0
 644 0228 FFF7FEFF 		bl	GPIO_SetBits
 645              	.LVL52:
 135:src/DCMotor.cpp **** 
 646              		.loc 2 135 0
 647 022c 6B68     		ldr	r3, [r5, #4]
 648 022e 198F     		ldrh	r1, [r3, #56]
 649 0230 D86B     		ldr	r0, [r3, #60]
 650 0232 FFF7FEFF 		bl	GPIO_SetBits
 651              	.LVL53:
 138:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 652              		.loc 2 138 0
 653 0236 6B68     		ldr	r3, [r5, #4]
 654 0238 198C     		ldrh	r1, [r3, #32]
 655 023a 586A     		ldr	r0, [r3, #36]
 656 023c FFF7FEFF 		bl	GPIO_ResetBits
 657              	.LVL54:
 658              	.L46:
 139:src/DCMotor.cpp **** 	}
 659              		.loc 2 139 0
 660 0240 6B68     		ldr	r3, [r5, #4]
 661 0242 198E     		ldrh	r1, [r3, #48]
 662 0244 586B     		ldr	r0, [r3, #52]
 663 0246 FFF7FEFF 		bl	GPIO_ResetBits
 664              	.LVL55:
 665              	.L37:
 142:src/DCMotor.cpp **** 		s = s*2;
 666              		.loc 2 142 0
 667 024a 6A68     		ldr	r2, [r5, #4]
 668 024c 1449     		ldr	r1, .L48
 669 024e 9368     		ldr	r3, [r2, #8]
 145:src/DCMotor.cpp **** 		case 1:
 670              		.loc 2 145 0
 671 0250 D268     		ldr	r2, [r2, #12]
 142:src/DCMotor.cpp **** 		s = s*2;
 672              		.loc 2 142 0
 673 0252 8B42     		cmp	r3, r1
 145:src/DCMotor.cpp **** 		case 1:
 674              		.loc 2 145 0
 675 0254 02F1FF32 		add	r2, r2, #-1
 143:src/DCMotor.cpp **** 
 676              		.loc 2 143 0
 677 0258 08BF     		it	eq
 678 025a 6400     		lsleq	r4, r4, #1
 679              	.LVL56:
 145:src/DCMotor.cpp **** 		case 1:
 680              		.loc 2 145 0
 681 025c 032A     		cmp	r2, #3
 682 025e 1DD8     		bhi	.L45
 683 0260 DFE802F0 		tbb	[pc, r2]
 684              	.L41:
 685 0264 02       		.byte	(.L40-.L41)/2
 686 0265 08       		.byte	(.L42-.L41)/2
 687 0266 0E       		.byte	(.L43-.L41)/2
 688 0267 15       		.byte	(.L44-.L41)/2
 689              		.p2align 1
 690              	.L40:
 147:src/DCMotor.cpp **** 			break;
 691              		.loc 2 147 0
 692 0268 002C     		cmp	r4, #0
 693 026a B8BF     		it	lt
 694 026c 6442     		rsblt	r4, r4, #0
 695              	.LVL57:
 696 026e A4B2     		uxth	r4, r4
 697 0270 9C86     		strh	r4, [r3, #52]	@ movhi
 698 0272 0AE0     		b	.L47
 699              	.LVL58:
 700              	.L42:
 150:src/DCMotor.cpp **** 			break;
 701              		.loc 2 150 0
 702 0274 002C     		cmp	r4, #0
 703 0276 B8BF     		it	lt
 704 0278 6442     		rsblt	r4, r4, #0
 705              	.LVL59:
 706 027a A4B2     		uxth	r4, r4
 707 027c 1C87     		strh	r4, [r3, #56]	@ movhi
 708 027e 04E0     		b	.L47
 709              	.LVL60:
 710              	.L43:
 153:src/DCMotor.cpp **** 			break;
 711              		.loc 2 153 0
 712 0280 002C     		cmp	r4, #0
 713 0282 B8BF     		it	lt
 714 0284 6442     		rsblt	r4, r4, #0
 715              	.LVL61:
 716 0286 A4B2     		uxth	r4, r4
 717 0288 9C87     		strh	r4, [r3, #60]	@ movhi
 718              	.L47:
 162:src/DCMotor.cpp **** }
 719              		.loc 2 162 0
 720 028a 0120     		movs	r0, #1
 154:src/DCMotor.cpp **** 		case 4:
 721              		.loc 2 154 0
 722 028c 38BD     		pop	{r3, r4, r5, pc}
 723              	.LVL62:
 724              	.L44:
 156:src/DCMotor.cpp **** 			break;
 725              		.loc 2 156 0
 726 028e 002C     		cmp	r4, #0
 727 0290 B8BF     		it	lt
 728 0292 6442     		rsblt	r4, r4, #0
 729              	.LVL63:
 730 0294 A4B2     		uxth	r4, r4
 731 0296 A3F84040 		strh	r4, [r3, #64]	@ movhi
 732 029a F6E7     		b	.L47
 733              	.LVL64:
 734              	.L45:
 159:src/DCMotor.cpp **** 	}
 735              		.loc 2 159 0
 736 029c 0020     		movs	r0, #0
 163:src/DCMotor.cpp **** 
 737              		.loc 2 163 0
 738 029e 38BD     		pop	{r3, r4, r5, pc}
 739              	.LVL65:
 740              	.L49:
 741              		.align	2
 742              	.L48:
 743 02a0 002C0140 		.word	1073818624
 744              		.cfi_endproc
 745              	.LFE39:
 746              		.fnend
 748              		.align	1
 749              		.global	_ZN7DCMotor11initEncoderEt
 750              		.thumb
 751              		.thumb_func
 753              	_ZN7DCMotor11initEncoderEt:
 754              		.fnstart
 755              	.LFB42:
 173:src/DCMotor.cpp **** 	encAddr = addr;
 756              		.loc 2 173 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 0
 759              		@ frame_needed = 0, uses_anonymous_args = 0
 760              		@ link register save eliminated.
 761              	.LVL66:
 762              		.loc 2 174 0
 763 02a4 0173     		strb	r1, [r0, #12]
 764 02a6 7047     		bx	lr
 765              		.cfi_endproc
 766              	.LFE42:
 767              		.cantunwind
 768              		.fnend
 770              		.align	1
 771              		.global	_ZN7DCMotor11readEncoderEv
 772              		.thumb
 773              		.thumb_func
 775              	_ZN7DCMotor11readEncoderEv:
 776              		.fnstart
 777              	.LFB43:
 175:src/DCMotor.cpp **** }
 176:src/DCMotor.cpp **** 
 177:src/DCMotor.cpp **** uint16_t DCMotor::readEncoder(){
 778              		.loc 2 177 0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              	.LVL67:
 783 02a8 10B5     		push	{r4, lr}
 784              		.save {r4, lr}
 785              	.LCFI8:
 786              		.cfi_def_cfa_offset 8
 787              		.cfi_offset 4, -8
 788              		.cfi_offset 14, -4
 178:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 789              		.loc 2 178 0
 790 02aa 104B     		ldr	r3, .L54
 791 02ac 0222     		movs	r2, #2
 179:src/DCMotor.cpp ****     Rx_Idx = 0x00;
 792              		.loc 2 179 0
 793 02ae 104C     		ldr	r4, .L54+4
 178:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 794              		.loc 2 178 0
 795 02b0 1A70     		strb	r2, [r3]
 796              		.loc 2 179 0
 797 02b2 0023     		movs	r3, #0
 180:src/DCMotor.cpp **** 
 181:src/DCMotor.cpp ****     slaveAddress = encAddr;
 798              		.loc 2 181 0
 799 02b4 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 179:src/DCMotor.cpp ****     Rx_Idx = 0x00;
 800              		.loc 2 179 0
 801 02b6 2370     		strb	r3, [r4]
 802              		.loc 2 181 0
 803 02b8 0E4B     		ldr	r3, .L54+8
 182:src/DCMotor.cpp ****     
 183:src/DCMotor.cpp ****     I2C_ITConfig(I2C1, I2C_IT_EVT , ENABLE);
 804              		.loc 2 183 0
 805 02ba 4FF40071 		mov	r1, #512
 181:src/DCMotor.cpp ****     
 806              		.loc 2 181 0
 807 02be 1A70     		strb	r2, [r3]
 808              		.loc 2 183 0
 809 02c0 0D48     		ldr	r0, .L54+12
 810              	.LVL68:
 811 02c2 0122     		movs	r2, #1
 812 02c4 FFF7FEFF 		bl	I2C_ITConfig
 813              	.LVL69:
 184:src/DCMotor.cpp ****     I2C_AcknowledgeConfig(I2C1, ENABLE);
 814              		.loc 2 184 0
 815 02c8 0121     		movs	r1, #1
 816 02ca 0B48     		ldr	r0, .L54+12
 817 02cc FFF7FEFF 		bl	I2C_AcknowledgeConfig
 818              	.LVL70:
 185:src/DCMotor.cpp ****     I2C_GenerateSTART(I2C1, ENABLE);
 819              		.loc 2 185 0
 820 02d0 0121     		movs	r1, #1
 821 02d2 0948     		ldr	r0, .L54+12
 822 02d4 FFF7FEFF 		bl	I2C_GenerateSTART
 823              	.LVL71:
 824              	.L52:
 186:src/DCMotor.cpp **** 
 187:src/DCMotor.cpp **** 
 188:src/DCMotor.cpp ****     // TODO: Add timeout here
 189:src/DCMotor.cpp ****     while ((Rx_Idx < RXBUFFERSIZE)); 
 825              		.loc 2 189 0
 826 02d8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 827 02da 012B     		cmp	r3, #1
 828 02dc FCD9     		bls	.L52
 190:src/DCMotor.cpp **** 
 191:src/DCMotor.cpp ****     return ((int16_t)((RxBuffer[0] << 8) | RxBuffer[1]));
 829              		.loc 2 191 0
 830 02de 074B     		ldr	r3, .L54+16
 831 02e0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 832 02e2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 192:src/DCMotor.cpp **** }
 833              		.loc 2 192 0
 834 02e4 43EA0020 		orr	r0, r3, r0, lsl #8
 835 02e8 10BD     		pop	{r4, pc}
 836              	.L55:
 837 02ea 00BF     		.align	2
 838              	.L54:
 839 02ec 00000000 		.word	NumberOfByteToReceive
 840 02f0 00000000 		.word	Rx_Idx
 841 02f4 00000000 		.word	slaveAddress
 842 02f8 00540040 		.word	1073763328
 843 02fc 00000000 		.word	RxBuffer
 844              		.cfi_endproc
 845              	.LFE43:
 846              		.fnend
 848              		.align	1
 849              		.global	_ZN7DCMotor6updateEf
 850              		.thumb
 851              		.thumb_func
 853              	_ZN7DCMotor6updateEf:
 854              		.fnstart
 855              	.LFB45:
 193:src/DCMotor.cpp **** 
 194:src/DCMotor.cpp **** float DCMotor::updateRegulator(float enc, float dt){
 195:src/DCMotor.cpp **** 	float error_new = speed-enc;
 196:src/DCMotor.cpp **** 	integral += error_new*dt;
 197:src/DCMotor.cpp **** 	float derivative = (error_new-error)/dt;
 198:src/DCMotor.cpp **** 	float output = (KP*error + KI*integral + KD*derivative);
 199:src/DCMotor.cpp **** 	if(output > max){
 200:src/DCMotor.cpp **** 		output = max;
 201:src/DCMotor.cpp **** 	}else if(output < min){
 202:src/DCMotor.cpp **** 		output = min;
 203:src/DCMotor.cpp **** 	}
 204:src/DCMotor.cpp **** 	error = error_new;
 205:src/DCMotor.cpp **** 	return output;
 206:src/DCMotor.cpp **** }
 207:src/DCMotor.cpp **** 
 208:src/DCMotor.cpp **** uint16_t DCMotor::update(float dt){
 856              		.loc 2 208 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              	.LVL72:
 861 0300 38B5     		push	{r3, r4, r5, lr}
 862              		.save {r3, r4, r5, lr}
 863              	.LCFI9:
 864              		.cfi_def_cfa_offset 16
 865              		.cfi_offset 3, -16
 866              		.cfi_offset 4, -12
 867              		.cfi_offset 5, -8
 868              		.cfi_offset 14, -4
 869              		.loc 2 208 0
 870 0302 0546     		mov	r5, r0
 209:src/DCMotor.cpp **** 	// Read encoder
 210:src/DCMotor.cpp **** 	uint16_t encSpeed = readEncoder();		// rad/s
 871              		.loc 2 210 0
 872 0304 FFF7FEFF 		bl	_ZN7DCMotor11readEncoderEv
 873              	.LVL73:
 874 0308 0446     		mov	r4, r0
 875              	.LVL74:
 211:src/DCMotor.cpp **** 	//float speed_si = encSpeed * wheelRadius;	// m/s
 212:src/DCMotor.cpp **** 	// Update PID regulator
 213:src/DCMotor.cpp **** 	//int s = updateRegulator(speed_si, dt);		// m/s
 214:src/DCMotor.cpp **** 	// Set motor speed to process value
 215:src/DCMotor.cpp **** 	setSpeed(0);		// m/s
 876              		.loc 2 215 0
 877 030a 0021     		movs	r1, #0
 878 030c 2846     		mov	r0, r5
 879 030e FFF7FEFF 		bl	_ZN7DCMotor8setSpeedEi
 880              	.LVL75:
 216:src/DCMotor.cpp **** 	// Return encoder values for publishing to localization
 217:src/DCMotor.cpp **** 	return encSpeed;
 218:src/DCMotor.cpp **** }...
 881              		.loc 2 218 0
 882 0312 2046     		mov	r0, r4
 883 0314 38BD     		pop	{r3, r4, r5, pc}
 884              		.cfi_endproc
 885              	.LFE45:
 886              		.fnend
 888              		.global	__aeabi_fsub
 889              		.global	__aeabi_fmul
 890              		.global	__aeabi_fadd
 891              		.global	__aeabi_fdiv
 892              		.align	1
 893              		.global	_ZN7DCMotor15updateRegulatorEff
 894              		.thumb
 895              		.thumb_func
 897              	_ZN7DCMotor15updateRegulatorEff:
 898              		.fnstart
 899              	.LFB44:
 194:src/DCMotor.cpp **** float DCMotor::updateRegulator(float enc, float dt){
 900              		.loc 2 194 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 0
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 904              	.LVL76:
 905 0316 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 906              	.LCFI10:
 907              		.cfi_def_cfa_offset 32
 908              		.cfi_offset 3, -32
 909              		.cfi_offset 4, -28
 910              		.cfi_offset 5, -24
 911              		.cfi_offset 6, -20
 912              		.cfi_offset 7, -16
 913              		.cfi_offset 8, -12
 914              		.cfi_offset 9, -8
 915              		.cfi_offset 14, -4
 194:src/DCMotor.cpp **** float DCMotor::updateRegulator(float enc, float dt){
 916              		.loc 2 194 0
 917 031a 1546     		mov	r5, r2
 918 031c 0446     		mov	r4, r0
 195:src/DCMotor.cpp **** 	float error_new = speed-enc;
 919              		.loc 2 195 0
 920 031e 8068     		ldr	r0, [r0, #8]	@ float
 921              	.LVL77:
 922 0320 FFF7FEFF 		bl	__aeabi_fsub
 923              	.LVL78:
 196:src/DCMotor.cpp **** 	integral += error_new*dt;
 924              		.loc 2 196 0
 925 0324 2946     		mov	r1, r5
 195:src/DCMotor.cpp **** 	float error_new = speed-enc;
 926              		.loc 2 195 0
 927 0326 0646     		mov	r6, r0
 928              	.LVL79:
 196:src/DCMotor.cpp **** 	integral += error_new*dt;
 929              		.loc 2 196 0
 930 0328 FFF7FEFF 		bl	__aeabi_fmul
 931              	.LVL80:
 932 032c E16A     		ldr	r1, [r4, #44]	@ float
 933 032e FFF7FEFF 		bl	__aeabi_fadd
 934              	.LVL81:
 197:src/DCMotor.cpp **** 	float derivative = (error_new-error)/dt;
 935              		.loc 2 197 0
 936 0332 A76A     		ldr	r7, [r4, #40]	@ float
 937              	.LVL82:
 196:src/DCMotor.cpp **** 	integral += error_new*dt;
 938              		.loc 2 196 0
 939 0334 8046     		mov	r8, r0
 940 0336 E062     		str	r0, [r4, #44]	@ float
 198:src/DCMotor.cpp **** 	float output = (KP*error + KI*integral + KD*derivative);
 941              		.loc 2 198 0
 942 0338 6169     		ldr	r1, [r4, #20]	@ float
 943 033a 3846     		mov	r0, r7
 944 033c FFF7FEFF 		bl	__aeabi_fmul
 945              	.LVL83:
 946 0340 A169     		ldr	r1, [r4, #24]	@ float
 947 0342 8146     		mov	r9, r0
 948 0344 4046     		mov	r0, r8
 949 0346 FFF7FEFF 		bl	__aeabi_fmul
 950              	.LVL84:
 951 034a 0146     		mov	r1, r0
 952 034c 4846     		mov	r0, r9
 953 034e FFF7FEFF 		bl	__aeabi_fadd
 954              	.LVL85:
 955 0352 3946     		mov	r1, r7
 956 0354 8046     		mov	r8, r0
 957 0356 3046     		mov	r0, r6
 958 0358 FFF7FEFF 		bl	__aeabi_fsub
 959              	.LVL86:
 960 035c 2946     		mov	r1, r5
 961 035e FFF7FEFF 		bl	__aeabi_fdiv
 962              	.LVL87:
 963 0362 E169     		ldr	r1, [r4, #28]	@ float
 964 0364 FFF7FEFF 		bl	__aeabi_fmul
 965              	.LVL88:
 966 0368 0146     		mov	r1, r0
 967 036a 4046     		mov	r0, r8
 968 036c FFF7FEFF 		bl	__aeabi_fadd
 969              	.LVL89:
 199:src/DCMotor.cpp **** 	if(output > max){
 970              		.loc 2 199 0
 971 0370 276A     		ldr	r7, [r4, #32]	@ float
 972              	.LVL90:
 198:src/DCMotor.cpp **** 	float output = (KP*error + KI*integral + KD*derivative);
 973              		.loc 2 198 0
 974 0372 0546     		mov	r5, r0
 975              	.LVL91:
 199:src/DCMotor.cpp **** 	if(output > max){
 976              		.loc 2 199 0
 977 0374 3946     		mov	r1, r7
 978 0376 FFF7FEFF 		bl	__aeabi_fcmpgt
 979              	.LVL92:
 980 037a 28B9     		cbnz	r0, .L60
 201:src/DCMotor.cpp **** 	}else if(output < min){
 981              		.loc 2 201 0
 982 037c 676A     		ldr	r7, [r4, #36]	@ float
 983 037e 2846     		mov	r0, r5
 984 0380 3946     		mov	r1, r7
 985 0382 FFF7FEFF 		bl	__aeabi_fcmplt
 986              	.LVL93:
 987 0386 00B1     		cbz	r0, .L58
 988              	.L60:
 200:src/DCMotor.cpp **** 		output = max;
 989              		.loc 2 200 0
 990 0388 3D46     		mov	r5, r7
 991              	.LVL94:
 992              	.L58:
 204:src/DCMotor.cpp **** 	error = error_new;
 993              		.loc 2 204 0
 994 038a A662     		str	r6, [r4, #40]	@ float
 206:src/DCMotor.cpp **** }
 995              		.loc 2 206 0
 996 038c 2846     		mov	r0, r5
 997 038e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 998              		.cfi_endproc
 999              	.LFE44:
 1000              		.cantunwind
 1001              		.fnend
 1003              		.global	_ZTS7DCMotor
 1004              		.global	_ZTI7DCMotor
 1005              		.global	_ZTV7DCMotor
 1006              		.section	.rodata
 1007              		.align	2
 1008              		.set	.LANCHOR0,. + 0
 1011              	_ZTV7DCMotor:
 1012 0000 00000000 		.word	0
 1013 0004 00000000 		.word	_ZTI7DCMotor
 1014 0008 00000000 		.word	_ZN7DCMotorD1Ev
 1015 000c 00000000 		.word	_ZN7DCMotorD0Ev
 1016 0010 00000000 		.word	_ZN7DCMotor9motorTypeEv
 1017 0014 00000000 		.word	_ZN7DCMotor9motorInitEv
 1018 0018 00000000 		.word	_ZN7DCMotor9motorNameEv
 1019 001c 00000000 		.word	_ZN7DCMotor12setReferenceEf
 1020 0020 00000000 		.word	_ZN7DCMotor12getReferenceEv
 1021 0024 00000000 		.word	_ZN7DCMotor6updateEf
 1024              	_ZTS7DCMotor:
 1025 0028 3744434D 		.ascii	"7DCMotor\000"
 1025      6F746F72 
 1025      00
 1026 0031 000000   		.space	3
 1029              	_ZTI7DCMotor:
 1030 0034 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 1031 0038 00000000 		.word	_ZTS7DCMotor
 1032 003c 00000000 		.word	_ZTI5motor
 1033              		.text
 1034              	.Letext0:
 1035              		.file 3 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types.h"
 1036              		.file 4 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1037              		.file 5 "./lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 1038              		.file 6 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1039              		.file 7 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 1040              		.file 8 "./inc/motorSettings.h"
 1041              		.file 9 "./lib/CMSIS/CM3/CoreSupport/core_cm3.h"
 1042              		.file 10 "./inc/encoder.h"
 1043              		.file 11 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
DEFINED SYMBOLS
                            *ABS*:00000000 DCMotor.cpp
     /tmp/ccYWEOsy.s:20     .text._ZN7DCMotor9motorTypeEv:00000000 $t
     /tmp/ccYWEOsy.s:25     .text._ZN7DCMotor9motorTypeEv:00000000 _ZN7DCMotor9motorTypeEv
.ARM.exidx.text._ZN7DCMotor9motorTypeEv:00000000 $d
     /tmp/ccYWEOsy.s:47     .text:00000000 $t
     /tmp/ccYWEOsy.s:52     .text:00000000 _ZN7DCMotor12setReferenceEf
     /tmp/ccYWEOsy.s:104    .text:00000028 $d
                       .ARM.exidx:00000000 $d
     /tmp/ccYWEOsy.s:110    .text:0000002c $t
     /tmp/ccYWEOsy.s:115    .text:0000002c _ZN7DCMotor12getReferenceEv
     /tmp/ccYWEOsy.s:138    .text:00000030 _ZN7DCMotor9motorNameEv
     /tmp/ccYWEOsy.s:163    .text:00000036 _ZN7DCMotorD2Ev
     /tmp/ccYWEOsy.s:192    .text:00000048 $d
     /tmp/ccYWEOsy.s:163    .text:00000036 _ZN7DCMotorD1Ev
     /tmp/ccYWEOsy.s:199    .text:0000004c $t
     /tmp/ccYWEOsy.s:204    .text:0000004c _ZN7DCMotorD0Ev
     /tmp/ccYWEOsy.s:237    .text:0000005e _ZN7DCMotor9motorInitEv
     /tmp/ccYWEOsy.s:401    .text:00000136 $d
     /tmp/ccYWEOsy.s:405    .text:0000013a $t
     /tmp/ccYWEOsy.s:527    .text:000001d4 $d
     /tmp/ccYWEOsy.s:532    .text:000001d8 $t
     /tmp/ccYWEOsy.s:537    .text:000001d8 _ZN7DCMotorC2EP13motorSettings
     /tmp/ccYWEOsy.s:570    .text:000001e8 $d
     /tmp/ccYWEOsy.s:537    .text:000001d8 _ZN7DCMotorC1EP13motorSettings
     /tmp/ccYWEOsy.s:577    .text:000001ec $t
     /tmp/ccYWEOsy.s:582    .text:000001ec _ZN7DCMotor8setSpeedEi
     /tmp/ccYWEOsy.s:685    .text:00000264 $d
     /tmp/ccYWEOsy.s:689    .text:00000268 $t
     /tmp/ccYWEOsy.s:743    .text:000002a0 $d
     /tmp/ccYWEOsy.s:748    .text:000002a4 $t
     /tmp/ccYWEOsy.s:753    .text:000002a4 _ZN7DCMotor11initEncoderEt
     /tmp/ccYWEOsy.s:775    .text:000002a8 _ZN7DCMotor11readEncoderEv
     /tmp/ccYWEOsy.s:839    .text:000002ec $d
     /tmp/ccYWEOsy.s:848    .text:00000300 $t
     /tmp/ccYWEOsy.s:853    .text:00000300 _ZN7DCMotor6updateEf
     /tmp/ccYWEOsy.s:897    .text:00000316 _ZN7DCMotor15updateRegulatorEff
     /tmp/ccYWEOsy.s:1024   .rodata:00000028 _ZTS7DCMotor
     /tmp/ccYWEOsy.s:1029   .rodata:00000034 _ZTI7DCMotor
     /tmp/ccYWEOsy.s:1011   .rodata:00000000 _ZTV7DCMotor
     /tmp/ccYWEOsy.s:1007   .rodata:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fcmplt
__aeabi_fcmpgt
_ZN5motorD2Ev
__aeabi_unwind_cpp_pr0
_ZdlPv
GPIO_Init
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_ARRPreloadConfig
TIM_CtrlPWMOutputs
TIM_Cmd
_ZN5motorC2EP13motorSettings
GPIO_SetBits
GPIO_ResetBits
I2C_ITConfig
I2C_AcknowledgeConfig
I2C_GenerateSTART
NumberOfByteToReceive
Rx_Idx
slaveAddress
RxBuffer
__aeabi_fsub
__aeabi_fmul
__aeabi_fadd
__aeabi_fdiv
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI5motor
