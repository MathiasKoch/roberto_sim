   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"DCMotor.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN7DCMotor9motorTypeEv,"axG",%progbits,_ZN7DCMotor9motorTypeEv,comdat
  20              		.align	1
  21              		.weak	_ZN7DCMotor9motorTypeEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN7DCMotor9motorTypeEv:
  26              		.fnstart
  27              	.LFB1021:
  28              		.file 1 "./inc/DCMotor.h"
   1:./inc/DCMotor.h **** 
   2:./inc/DCMotor.h **** #ifndef _DCMotor_H
   3:./inc/DCMotor.h **** #define	_DCMotor_H
   4:./inc/DCMotor.h **** 
   5:./inc/DCMotor.h **** #include <stm32f10x.h>
   6:./inc/DCMotor.h **** #include <stdlib.h>
   7:./inc/DCMotor.h **** #include <stdio.h>
   8:./inc/DCMotor.h **** #include <string.h>
   9:./inc/DCMotor.h **** #include "motor.h"
  10:./inc/DCMotor.h **** #include "encoder.h"
  11:./inc/DCMotor.h **** #include "stm32_time.h"
  12:./inc/DCMotor.h **** 
  13:./inc/DCMotor.h **** 
  14:./inc/DCMotor.h **** class DCMotor : public motor
  15:./inc/DCMotor.h **** {
  16:./inc/DCMotor.h **** public:
  17:./inc/DCMotor.h ****     DCMotor(motorSettings *settings);
  18:./inc/DCMotor.h ****     ~DCMotor();
  19:./inc/DCMotor.h **** 
  20:./inc/DCMotor.h ****     virtual void setReference(float setPoint);
  21:./inc/DCMotor.h ****     virtual float getReference();
  22:./inc/DCMotor.h ****     virtual const char* motorName();
  23:./inc/DCMotor.h ****     //virtual std::tuple<float, int, int, int> update(float dt, bool connected);
  24:./inc/DCMotor.h ****     virtual float update(float dt, bool connected, bool enable);
  25:./inc/DCMotor.h **** 
  26:./inc/DCMotor.h ****     virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
  29              		.loc 1 26 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              		.loc 1 26 0
  36 0000 0220     		movs	r0, #2
  37              	.LVL1:
  38 0002 7047     		bx	lr
  39              		.cfi_endproc
  40              	.LFE1021:
  41              		.cantunwind
  42              		.fnend
  44              		.text
  45              		.align	1
  46              		.global	_ZN7DCMotor12setReferenceEf
  47              		.thumb
  48              		.thumb_func
  50              	_ZN7DCMotor12setReferenceEf:
  51              		.fnstart
  52              	.LFB1030:
  53              		.file 2 "src/DCMotor.cpp"
   1:src/DCMotor.cpp **** 
   2:src/DCMotor.cpp **** #include "DCMotor.h"
   3:src/DCMotor.cpp **** #include "motorSettings.h"
   4:src/DCMotor.cpp **** #include "led.h"
   5:src/DCMotor.cpp **** 
   6:src/DCMotor.cpp **** #define PERIOD 14399
   7:src/DCMotor.cpp **** #define PRESCALER 0
   8:src/DCMotor.cpp **** #define CLOCKDIV 0
   9:src/DCMotor.cpp **** 
  10:src/DCMotor.cpp **** #define ABS(x) (((x)>0)? (x) : -(x))
  11:src/DCMotor.cpp **** 
  12:src/DCMotor.cpp **** 
  13:src/DCMotor.cpp **** DCMotor::DCMotor(motorSettings *settings) : motor(settings)
  14:src/DCMotor.cpp **** {
  15:src/DCMotor.cpp **** 
  16:src/DCMotor.cpp **** }
  17:src/DCMotor.cpp **** 
  18:src/DCMotor.cpp **** DCMotor::~DCMotor()
  19:src/DCMotor.cpp **** {
  20:src/DCMotor.cpp **** }
  21:src/DCMotor.cpp **** 
  22:src/DCMotor.cpp **** bool DCMotor::motorInit()
  23:src/DCMotor.cpp **** {
  24:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
  25:src/DCMotor.cpp **** 
  26:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
  27:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  29:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
  30:src/DCMotor.cpp **** 
  31:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
  32:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  34:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
  35:src/DCMotor.cpp **** 
  36:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
  37:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  39:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
  40:src/DCMotor.cpp **** 
  41:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
  42:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  44:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
  45:src/DCMotor.cpp **** 
  46:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
  47:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  48:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  49:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
  50:src/DCMotor.cpp **** 
  51:src/DCMotor.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  52:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
  53:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
  54:src/DCMotor.cpp **** 	else
  55:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD;
  56:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
  57:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
  58:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  59:src/DCMotor.cpp **** 
  60:src/DCMotor.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
  61:src/DCMotor.cpp **** 
  62:src/DCMotor.cpp **** 	TIM_OCInitTypeDef TIM_OCInitStructure;
  63:src/DCMotor.cpp **** 	TIM_OCStructInit(&TIM_OCInitStructure);
  64:src/DCMotor.cpp **** 
  65:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  66:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  67:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
  68:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  69:src/DCMotor.cpp **** 
  70:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
  71:src/DCMotor.cpp **** 		case 1:
  72:src/DCMotor.cpp **** 			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
  73:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  74:src/DCMotor.cpp **** 			break;
  75:src/DCMotor.cpp **** 		case 2:
  76:src/DCMotor.cpp **** 			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
  77:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  78:src/DCMotor.cpp **** 			break;
  79:src/DCMotor.cpp **** 		case 3:
  80:src/DCMotor.cpp **** 			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
  81:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  82:src/DCMotor.cpp **** 			break;
  83:src/DCMotor.cpp **** 		case 4:
  84:src/DCMotor.cpp **** 			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
  85:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  86:src/DCMotor.cpp **** 			break;
  87:src/DCMotor.cpp **** 		default:
  88:src/DCMotor.cpp **** 			return false;
  89:src/DCMotor.cpp **** 	}
  90:src/DCMotor.cpp **** 
  91:src/DCMotor.cpp **** 	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
  92:src/DCMotor.cpp **** 
  93:src/DCMotor.cpp **** 	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
  94:src/DCMotor.cpp **** 
  95:src/DCMotor.cpp **** 	TIM_Cmd(m_settings->m_Timer, ENABLE);
  96:src/DCMotor.cpp **** 
  97:src/DCMotor.cpp **** 	// Initialize encoder
  98:src/DCMotor.cpp **** 	initEncoder(m_settings->encoderAddr);
  99:src/DCMotor.cpp **** 
 100:src/DCMotor.cpp **** 	integral = 0;
 101:src/DCMotor.cpp **** 	error = 0;
 102:src/DCMotor.cpp **** 
 103:src/DCMotor.cpp **** 	wheelRadius = m_settings->wheelRadius;
 104:src/DCMotor.cpp **** 	FF = m_settings->FF;
 105:src/DCMotor.cpp **** 	KP = m_settings->KP;
 106:src/DCMotor.cpp **** 	KI = m_settings->KI;
 107:src/DCMotor.cpp **** 	KD = m_settings->KD;
 108:src/DCMotor.cpp **** 	integralSaturation = m_settings->integralSaturation;
 109:src/DCMotor.cpp **** 
 110:src/DCMotor.cpp **** 	return true;
 111:src/DCMotor.cpp **** }
 112:src/DCMotor.cpp **** 
 113:src/DCMotor.cpp **** void DCMotor::setReference(float setPoint){
  54              		.loc 2 113 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.LVL2:
 114:src/DCMotor.cpp **** 	speed = setPoint;
  60              		.loc 2 114 0
  61 0000 8160     		str	r1, [r0, #8]	@ float
  62 0002 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE1030:
  65              		.cantunwind
  66              		.fnend
  68              		.align	1
  69              		.global	_ZN7DCMotor12getReferenceEv
  70              		.thumb
  71              		.thumb_func
  73              	_ZN7DCMotor12getReferenceEv:
  74              		.fnstart
  75              	.LFB1032:
 115:src/DCMotor.cpp **** }
 116:src/DCMotor.cpp **** 
 117:src/DCMotor.cpp **** bool DCMotor::setSpeed(int s, bool enable){
 118:src/DCMotor.cpp **** 
 119:src/DCMotor.cpp **** 	if(s < -PERIOD)
 120:src/DCMotor.cpp **** 		s = -PERIOD;
 121:src/DCMotor.cpp **** 
 122:src/DCMotor.cpp **** 	if(s > PERIOD)
 123:src/DCMotor.cpp **** 		s = PERIOD;
 124:src/DCMotor.cpp **** 
 125:src/DCMotor.cpp **** 	if(!enable){
 126:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 127:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 128:src/DCMotor.cpp **** 		s = 0;
 129:src/DCMotor.cpp **** 	}else{
 130:src/DCMotor.cpp **** 		//if(ABS(s) > 3000){
 131:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 132:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 133:src/DCMotor.cpp **** 
 134:src/DCMotor.cpp **** 			if(s > 0){
 135:src/DCMotor.cpp **** 				GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 136:src/DCMotor.cpp **** 				GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 137:src/DCMotor.cpp **** 			}else if(s < 0){
 138:src/DCMotor.cpp **** 				GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 139:src/DCMotor.cpp **** 				GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 140:src/DCMotor.cpp **** 			}else{
 141:src/DCMotor.cpp **** 				return false;
 142:src/DCMotor.cpp **** 			}
 143:src/DCMotor.cpp **** 		/*}else{
 144:src/DCMotor.cpp **** 			s = 0;
 145:src/DCMotor.cpp **** 
 146:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 147:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 148:src/DCMotor.cpp **** 
 149:src/DCMotor.cpp **** 			// Break to GND
 150:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 151:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 152:src/DCMotor.cpp **** 		}*/
 153:src/DCMotor.cpp **** 	}
 154:src/DCMotor.cpp **** 	
 155:src/DCMotor.cpp **** 
 156:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
 157:src/DCMotor.cpp **** 		s = s * 2;
 158:src/DCMotor.cpp **** 
 159:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
 160:src/DCMotor.cpp **** 		case 1:
 161:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR1 = (uint16_t)ABS(s);
 162:src/DCMotor.cpp **** 			break;
 163:src/DCMotor.cpp **** 		case 2:
 164:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR2 = (uint16_t)ABS(s);
 165:src/DCMotor.cpp **** 			break;
 166:src/DCMotor.cpp **** 		case 3:
 167:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR3 = (uint16_t)ABS(s);
 168:src/DCMotor.cpp **** 			break;
 169:src/DCMotor.cpp **** 		case 4:
 170:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR4 = (uint16_t)ABS(s);
 171:src/DCMotor.cpp **** 			break;
 172:src/DCMotor.cpp **** 		default:
 173:src/DCMotor.cpp **** 			return false;
 174:src/DCMotor.cpp **** 	}
 175:src/DCMotor.cpp **** 
 176:src/DCMotor.cpp **** 	return true;
 177:src/DCMotor.cpp **** }
 178:src/DCMotor.cpp **** 
 179:src/DCMotor.cpp **** float DCMotor::getReference(){
  76              		.loc 2 179 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.LVL3:
 180:src/DCMotor.cpp **** 	return speed;
 181:src/DCMotor.cpp **** }
  82              		.loc 2 181 0
  83 0004 8068     		ldr	r0, [r0, #8]	@ float
  84              	.LVL4:
  85 0006 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE1032:
  88              		.cantunwind
  89              		.fnend
  91              		.align	1
  92              		.global	_ZN7DCMotor9motorNameEv
  93              		.thumb
  94              		.thumb_func
  96              	_ZN7DCMotor9motorNameEv:
  97              		.fnstart
  98              	.LFB1033:
 182:src/DCMotor.cpp **** 
 183:src/DCMotor.cpp **** const char* DCMotor::motorName(){
  99              		.loc 2 183 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL5:
 184:src/DCMotor.cpp **** 	return m_settings->m_motorName;
 105              		.loc 2 184 0
 106 0008 4368     		ldr	r3, [r0, #4]
 185:src/DCMotor.cpp **** }
 107              		.loc 2 185 0
 108 000a 5868     		ldr	r0, [r3, #4]
 109              	.LVL6:
 110 000c 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE1033:
 113              		.cantunwind
 114              		.fnend
 116              		.align	1
 117              		.global	_ZN7DCMotorD2Ev
 118              		.thumb
 119              		.thumb_func
 121              	_ZN7DCMotorD2Ev:
 122              		.fnstart
 123              	.LFB1026:
  18:src/DCMotor.cpp **** {
 124              		.loc 2 18 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL7:
 129 000e 10B5     		push	{r4, lr}
 130              	.LCFI0:
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 4, -8
 133              		.cfi_offset 14, -4
  18:src/DCMotor.cpp **** {
 134              		.loc 2 18 0
 135 0010 0446     		mov	r4, r0
 136              	.LBB4:
 137 0012 034B     		ldr	r3, .L6
 138 0014 0360     		str	r3, [r0]
 139 0016 FFF7FEFF 		bl	_ZN5motorD2Ev
 140              	.LVL8:
 141              	.LBE4:
  20:src/DCMotor.cpp **** 
 142              		.loc 2 20 0
 143 001a 2046     		mov	r0, r4
 144 001c 10BD     		pop	{r4, pc}
 145              	.LVL9:
 146              	.L7:
 147 001e 00BF     		.align	2
 148              	.L6:
 149 0020 08000000 		.word	.LANCHOR0+8
 150              		.cfi_endproc
 151              	.LFE1026:
 152              		.cantunwind
 153              		.fnend
 155              		.global	_ZN7DCMotorD1Ev
 156              		.thumb_set _ZN7DCMotorD1Ev,_ZN7DCMotorD2Ev
 157              		.align	1
 158              		.global	_ZN7DCMotorD0Ev
 159              		.thumb
 160              		.thumb_func
 162              	_ZN7DCMotorD0Ev:
 163              		.fnstart
 164              	.LFB1028:
  18:src/DCMotor.cpp **** {
 165              		.loc 2 18 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              	.LVL10:
 170 0024 10B5     		push	{r4, lr}
 171              	.LCFI1:
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 4, -8
 174              		.cfi_offset 14, -4
  18:src/DCMotor.cpp **** {
 175              		.loc 2 18 0
 176 0026 0446     		mov	r4, r0
  20:src/DCMotor.cpp **** 
 177              		.loc 2 20 0
 178 0028 FFF7FEFF 		bl	_ZN7DCMotorD1Ev
 179              	.LVL11:
 180 002c 2046     		mov	r0, r4
 181 002e FFF7FEFF 		bl	_ZdlPv
 182              	.LVL12:
 183 0032 2046     		mov	r0, r4
 184 0034 10BD     		pop	{r4, pc}
 185              		.cfi_endproc
 186              	.LFE1028:
 187              		.cantunwind
 188              		.fnend
 190              		.align	1
 191              		.global	_ZN7DCMotor9motorInitEv
 192              		.thumb
 193              		.thumb_func
 195              	_ZN7DCMotor9motorInitEv:
 196              		.fnstart
 197              	.LFB1029:
  23:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 198              		.loc 2 23 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 32
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              	.LVL13:
 203 0036 70B5     		push	{r4, r5, r6, lr}
 204              		.save {r4, r5, r6, lr}
 205              	.LCFI2:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 4, -16
 208              		.cfi_offset 5, -12
 209              		.cfi_offset 6, -8
 210              		.cfi_offset 14, -4
 211 0038 0446     		mov	r4, r0
  26:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 212              		.loc 2 26 0
 213 003a 4368     		ldr	r3, [r0, #4]
  23:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 214              		.loc 2 23 0
 215              		.pad #32
 216 003c 88B0     		sub	sp, sp, #32
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 48
  26:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 219              		.loc 2 26 0
 220 003e 1A6A     		ldr	r2, [r3, #32]
  28:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 221              		.loc 2 28 0
 222 0040 0325     		movs	r5, #3
  27:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 223              		.loc 2 27 0
 224 0042 1026     		movs	r6, #16
  29:src/DCMotor.cpp **** 
 225              		.loc 2 29 0
 226 0044 586A     		ldr	r0, [r3, #36]
 227              	.LVL14:
 228 0046 6946     		mov	r1, sp
  26:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 229              		.loc 2 26 0
 230 0048 ADF80020 		strh	r2, [sp]	@ movhi
  27:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 231              		.loc 2 27 0
 232 004c 8DF80360 		strb	r6, [sp, #3]
  28:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 233              		.loc 2 28 0
 234 0050 8DF80250 		strb	r5, [sp, #2]
  29:src/DCMotor.cpp **** 
 235              		.loc 2 29 0
 236 0054 FFF7FEFF 		bl	GPIO_Init
 237              	.LVL15:
  31:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 238              		.loc 2 31 0
 239 0058 6368     		ldr	r3, [r4, #4]
  34:src/DCMotor.cpp **** 
 240              		.loc 2 34 0
 241 005a 6946     		mov	r1, sp
  31:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 242              		.loc 2 31 0
 243 005c 1A6B     		ldr	r2, [r3, #48]
  34:src/DCMotor.cpp **** 
 244              		.loc 2 34 0
 245 005e 586B     		ldr	r0, [r3, #52]
  31:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 246              		.loc 2 31 0
 247 0060 ADF80020 		strh	r2, [sp]	@ movhi
  32:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 248              		.loc 2 32 0
 249 0064 8DF80360 		strb	r6, [sp, #3]
  33:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 250              		.loc 2 33 0
 251 0068 8DF80250 		strb	r5, [sp, #2]
  34:src/DCMotor.cpp **** 
 252              		.loc 2 34 0
 253 006c FFF7FEFF 		bl	GPIO_Init
 254              	.LVL16:
  36:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 255              		.loc 2 36 0
 256 0070 6368     		ldr	r3, [r4, #4]
  37:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 257              		.loc 2 37 0
 258 0072 1426     		movs	r6, #20
  36:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 259              		.loc 2 36 0
 260 0074 9A6A     		ldr	r2, [r3, #40]
  39:src/DCMotor.cpp **** 
 261              		.loc 2 39 0
 262 0076 D86A     		ldr	r0, [r3, #44]
 263 0078 6946     		mov	r1, sp
  36:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 264              		.loc 2 36 0
 265 007a ADF80020 		strh	r2, [sp]	@ movhi
  38:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 266              		.loc 2 38 0
 267 007e 8DF80250 		strb	r5, [sp, #2]
  37:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 268              		.loc 2 37 0
 269 0082 8DF80360 		strb	r6, [sp, #3]
  39:src/DCMotor.cpp **** 
 270              		.loc 2 39 0
 271 0086 FFF7FEFF 		bl	GPIO_Init
 272              	.LVL17:
  41:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 273              		.loc 2 41 0
 274 008a 6368     		ldr	r3, [r4, #4]
  44:src/DCMotor.cpp **** 
 275              		.loc 2 44 0
 276 008c 6946     		mov	r1, sp
  41:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 277              		.loc 2 41 0
 278 008e 9A6B     		ldr	r2, [r3, #56]
  44:src/DCMotor.cpp **** 
 279              		.loc 2 44 0
 280 0090 D86B     		ldr	r0, [r3, #60]
  41:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 281              		.loc 2 41 0
 282 0092 ADF80020 		strh	r2, [sp]	@ movhi
  43:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 283              		.loc 2 43 0
 284 0096 8DF80250 		strb	r5, [sp, #2]
  42:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 285              		.loc 2 42 0
 286 009a 8DF80360 		strb	r6, [sp, #3]
  44:src/DCMotor.cpp **** 
 287              		.loc 2 44 0
 288 009e FFF7FEFF 		bl	GPIO_Init
 289              	.LVL18:
  46:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 290              		.loc 2 46 0
 291 00a2 6368     		ldr	r3, [r4, #4]
  49:src/DCMotor.cpp **** 
 292              		.loc 2 49 0
 293 00a4 6946     		mov	r1, sp
  46:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 294              		.loc 2 46 0
 295 00a6 1A6C     		ldr	r2, [r3, #64]
  49:src/DCMotor.cpp **** 
 296              		.loc 2 49 0
 297 00a8 586C     		ldr	r0, [r3, #68]
  46:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 298              		.loc 2 46 0
 299 00aa ADF80020 		strh	r2, [sp]	@ movhi
  47:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 300              		.loc 2 47 0
 301 00ae 1822     		movs	r2, #24
 302 00b0 8DF80320 		strb	r2, [sp, #3]
  48:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 303              		.loc 2 48 0
 304 00b4 8DF80250 		strb	r5, [sp, #2]
  49:src/DCMotor.cpp **** 
 305              		.loc 2 49 0
 306 00b8 FFF7FEFF 		bl	GPIO_Init
 307              	.LVL19:
  52:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 308              		.loc 2 52 0
 309 00bc 6368     		ldr	r3, [r4, #4]
  56:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 310              		.loc 2 56 0
 311 00be 0025     		movs	r5, #0
  52:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 312              		.loc 2 52 0
 313 00c0 9868     		ldr	r0, [r3, #8]
 314 00c2 3B4B     		ldr	r3, .L22
  60:src/DCMotor.cpp **** 
 315              		.loc 2 60 0
 316 00c4 01A9     		add	r1, sp, #4
  52:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 317              		.loc 2 52 0
 318 00c6 9842     		cmp	r0, r3
  53:src/DCMotor.cpp **** 	else
 319              		.loc 2 53 0
 320 00c8 0CBF     		ite	eq
 321 00ca 47F27E03 		movweq	r3, #28798
  55:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 322              		.loc 2 55 0
 323 00ce 43F63F03 		movwne	r3, #14399
  56:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 324              		.loc 2 56 0
 325 00d2 ADF80450 		strh	r5, [sp, #4]	@ movhi
  55:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 326              		.loc 2 55 0
 327 00d6 ADF80830 		strh	r3, [sp, #8]	@ movhi
  57:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 328              		.loc 2 57 0
 329 00da ADF80A50 		strh	r5, [sp, #10]	@ movhi
  58:src/DCMotor.cpp **** 
 330              		.loc 2 58 0
 331 00de ADF80650 		strh	r5, [sp, #6]	@ movhi
  60:src/DCMotor.cpp **** 
 332              		.loc 2 60 0
 333 00e2 FFF7FEFF 		bl	TIM_TimeBaseInit
 334              	.LVL20:
  63:src/DCMotor.cpp **** 
 335              		.loc 2 63 0
 336 00e6 04A8     		add	r0, sp, #16
 337 00e8 FFF7FEFF 		bl	TIM_OCStructInit
 338              	.LVL21:
  65:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 339              		.loc 2 65 0
 340 00ec 6023     		movs	r3, #96
 341 00ee ADF81030 		strh	r3, [sp, #16]	@ movhi
  66:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
 342              		.loc 2 66 0
 343 00f2 0123     		movs	r3, #1
 344 00f4 ADF81230 		strh	r3, [sp, #18]	@ movhi
  70:src/DCMotor.cpp **** 		case 1:
 345              		.loc 2 70 0
 346 00f8 6368     		ldr	r3, [r4, #4]
  67:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 347              		.loc 2 67 0
 348 00fa ADF81650 		strh	r5, [sp, #22]	@ movhi
  70:src/DCMotor.cpp **** 		case 1:
 349              		.loc 2 70 0
 350 00fe DA68     		ldr	r2, [r3, #12]
  68:src/DCMotor.cpp **** 
 351              		.loc 2 68 0
 352 0100 ADF81850 		strh	r5, [sp, #24]	@ movhi
  70:src/DCMotor.cpp **** 		case 1:
 353              		.loc 2 70 0
 354 0104 013A     		subs	r2, r2, #1
 355 0106 032A     		cmp	r2, #3
 356 0108 4ED8     		bhi	.L19
 357 010a DFE802F0 		tbb	[pc, r2]
 358              	.L14:
 359 010e 02       		.byte	(.L13-.L14)/2
 360 010f 0C       		.byte	(.L15-.L14)/2
 361 0110 16       		.byte	(.L16-.L14)/2
 362 0111 20       		.byte	(.L17-.L14)/2
 363              		.p2align 1
 364              	.L13:
  72:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 365              		.loc 2 72 0
 366 0112 04A9     		add	r1, sp, #16
 367 0114 9868     		ldr	r0, [r3, #8]
 368 0116 FFF7FEFF 		bl	TIM_OC1Init
 369              	.LVL22:
  73:src/DCMotor.cpp **** 			break;
 370              		.loc 2 73 0
 371 011a 6368     		ldr	r3, [r4, #4]
 372 011c 0821     		movs	r1, #8
 373 011e 9868     		ldr	r0, [r3, #8]
 374 0120 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 375              	.LVL23:
 376 0124 1CE0     		b	.L18
 377              	.L15:
  76:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 378              		.loc 2 76 0
 379 0126 04A9     		add	r1, sp, #16
 380 0128 9868     		ldr	r0, [r3, #8]
 381 012a FFF7FEFF 		bl	TIM_OC2Init
 382              	.LVL24:
  77:src/DCMotor.cpp **** 			break;
 383              		.loc 2 77 0
 384 012e 6368     		ldr	r3, [r4, #4]
 385 0130 0821     		movs	r1, #8
 386 0132 9868     		ldr	r0, [r3, #8]
 387 0134 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 388              	.LVL25:
 389 0138 12E0     		b	.L18
 390              	.L16:
  80:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 391              		.loc 2 80 0
 392 013a 04A9     		add	r1, sp, #16
 393 013c 9868     		ldr	r0, [r3, #8]
 394 013e FFF7FEFF 		bl	TIM_OC3Init
 395              	.LVL26:
  81:src/DCMotor.cpp **** 			break;
 396              		.loc 2 81 0
 397 0142 6368     		ldr	r3, [r4, #4]
 398 0144 0821     		movs	r1, #8
 399 0146 9868     		ldr	r0, [r3, #8]
 400 0148 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 401              	.LVL27:
 402 014c 08E0     		b	.L18
 403              	.L17:
  84:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 404              		.loc 2 84 0
 405 014e 9868     		ldr	r0, [r3, #8]
 406 0150 04A9     		add	r1, sp, #16
 407 0152 FFF7FEFF 		bl	TIM_OC4Init
 408              	.LVL28:
  85:src/DCMotor.cpp **** 			break;
 409              		.loc 2 85 0
 410 0156 6368     		ldr	r3, [r4, #4]
 411 0158 0821     		movs	r1, #8
 412 015a 9868     		ldr	r0, [r3, #8]
 413 015c FFF7FEFF 		bl	TIM_OC4PreloadConfig
 414              	.LVL29:
 415              	.L18:
  91:src/DCMotor.cpp **** 
 416              		.loc 2 91 0
 417 0160 6368     		ldr	r3, [r4, #4]
 418 0162 0121     		movs	r1, #1
 419 0164 9868     		ldr	r0, [r3, #8]
 420 0166 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 421              	.LVL30:
  93:src/DCMotor.cpp **** 
 422              		.loc 2 93 0
 423 016a 6368     		ldr	r3, [r4, #4]
 424 016c 0121     		movs	r1, #1
 425 016e 9868     		ldr	r0, [r3, #8]
 426 0170 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 427              	.LVL31:
  95:src/DCMotor.cpp **** 
 428              		.loc 2 95 0
 429 0174 6368     		ldr	r3, [r4, #4]
 430 0176 0121     		movs	r1, #1
 431 0178 9868     		ldr	r0, [r3, #8]
 432 017a FFF7FEFF 		bl	TIM_Cmd
 433              	.LVL32:
  98:src/DCMotor.cpp **** 
 434              		.loc 2 98 0
 435 017e 6368     		ldr	r3, [r4, #4]
 436              	.LVL33:
 110:src/DCMotor.cpp **** }
 437              		.loc 2 110 0
 438 0180 0120     		movs	r0, #1
 439              	.LBB5:
 440              	.LBB6:
 186:src/DCMotor.cpp **** 
 187:src/DCMotor.cpp **** void DCMotor::initEncoder(uint16_t addr){
 188:src/DCMotor.cpp **** 	encAddr = addr;
 441              		.loc 2 188 0
 442 0182 B3F84820 		ldrh	r2, [r3, #72]
 443 0186 2273     		strb	r2, [r4, #12]
 444              	.LVL34:
 445              	.LBE6:
 446              	.LBE5:
 100:src/DCMotor.cpp **** 	error = 0;
 447              		.loc 2 100 0
 448 0188 0022     		movs	r2, #0
 449 018a E262     		str	r2, [r4, #44]	@ float
 101:src/DCMotor.cpp **** 
 450              		.loc 2 101 0
 451 018c A262     		str	r2, [r4, #40]	@ float
 103:src/DCMotor.cpp **** 	FF = m_settings->FF;
 452              		.loc 2 103 0
 453 018e 5A6E     		ldr	r2, [r3, #100]	@ float
 454 0190 2261     		str	r2, [r4, #16]	@ float
 104:src/DCMotor.cpp **** 	KP = m_settings->KP;
 455              		.loc 2 104 0
 456 0192 1A6D     		ldr	r2, [r3, #80]	@ float
 457 0194 6261     		str	r2, [r4, #20]	@ float
 105:src/DCMotor.cpp **** 	KI = m_settings->KI;
 458              		.loc 2 105 0
 459 0196 5A6D     		ldr	r2, [r3, #84]	@ float
 460 0198 A261     		str	r2, [r4, #24]	@ float
 106:src/DCMotor.cpp **** 	KD = m_settings->KD;
 461              		.loc 2 106 0
 462 019a 9A6D     		ldr	r2, [r3, #88]	@ float
 463 019c E261     		str	r2, [r4, #28]	@ float
 107:src/DCMotor.cpp **** 	integralSaturation = m_settings->integralSaturation;
 464              		.loc 2 107 0
 465 019e DA6D     		ldr	r2, [r3, #92]	@ float
 108:src/DCMotor.cpp **** 
 466              		.loc 2 108 0
 467 01a0 1B6E     		ldr	r3, [r3, #96]	@ float
 107:src/DCMotor.cpp **** 	integralSaturation = m_settings->integralSaturation;
 468              		.loc 2 107 0
 469 01a2 2262     		str	r2, [r4, #32]	@ float
 108:src/DCMotor.cpp **** 
 470              		.loc 2 108 0
 471 01a4 6362     		str	r3, [r4, #36]	@ float
 110:src/DCMotor.cpp **** }
 472              		.loc 2 110 0
 473 01a6 00E0     		b	.L12
 474              	.L19:
  88:src/DCMotor.cpp **** 	}
 475              		.loc 2 88 0
 476 01a8 0020     		movs	r0, #0
 477              	.L12:
 111:src/DCMotor.cpp **** 
 478              		.loc 2 111 0
 479 01aa 08B0     		add	sp, sp, #32
 480              	.LCFI4:
 481              		.cfi_def_cfa_offset 16
 482              		@ sp needed
 483 01ac 70BD     		pop	{r4, r5, r6, pc}
 484              	.LVL35:
 485              	.L23:
 486 01ae 00BF     		.align	2
 487              	.L22:
 488 01b0 002C0140 		.word	1073818624
 489              		.cfi_endproc
 490              	.LFE1029:
 491              		.fnend
 493              		.align	1
 494              		.global	_ZN7DCMotorC2EP13motorSettings
 495              		.thumb
 496              		.thumb_func
 498              	_ZN7DCMotorC2EP13motorSettings:
 499              		.fnstart
 500              	.LFB1023:
  13:src/DCMotor.cpp **** {
 501              		.loc 2 13 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              	.LVL36:
 506 01b4 10B5     		push	{r4, lr}
 507              		.save {r4, lr}
 508              	.LCFI5:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
  13:src/DCMotor.cpp **** {
 512              		.loc 2 13 0
 513 01b6 0446     		mov	r4, r0
 514              	.LBB7:
 515 01b8 FFF7FEFF 		bl	_ZN5motorC2EP13motorSettings
 516              	.LVL37:
 517 01bc 014B     		ldr	r3, .L25
 518              	.LBE7:
  16:src/DCMotor.cpp **** 
 519              		.loc 2 16 0
 520 01be 2046     		mov	r0, r4
 521              	.LBB8:
  13:src/DCMotor.cpp **** {
 522              		.loc 2 13 0
 523 01c0 2360     		str	r3, [r4]
 524              	.LBE8:
  16:src/DCMotor.cpp **** 
 525              		.loc 2 16 0
 526 01c2 10BD     		pop	{r4, pc}
 527              	.LVL38:
 528              	.L26:
 529              		.align	2
 530              	.L25:
 531 01c4 08000000 		.word	.LANCHOR0+8
 532              		.cfi_endproc
 533              	.LFE1023:
 534              		.fnend
 536              		.global	_ZN7DCMotorC1EP13motorSettings
 537              		.thumb_set _ZN7DCMotorC1EP13motorSettings,_ZN7DCMotorC2EP13motorSettings
 538              		.align	1
 539              		.global	_ZN7DCMotor8setSpeedEib
 540              		.thumb
 541              		.thumb_func
 543              	_ZN7DCMotor8setSpeedEib:
 544              		.fnstart
 545              	.LFB1031:
 117:src/DCMotor.cpp **** 
 546              		.loc 2 117 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              	.LVL39:
 119:src/DCMotor.cpp **** 		s = -PERIOD;
 551              		.loc 2 119 0
 552 01c8 344B     		ldr	r3, .L45
 117:src/DCMotor.cpp **** 
 553              		.loc 2 117 0
 554 01ca 70B5     		push	{r4, r5, r6, lr}
 555              		.save {r4, r5, r6, lr}
 556              	.LCFI6:
 557              		.cfi_def_cfa_offset 16
 558              		.cfi_offset 4, -16
 559              		.cfi_offset 5, -12
 560              		.cfi_offset 6, -8
 561              		.cfi_offset 14, -4
 119:src/DCMotor.cpp **** 		s = -PERIOD;
 562              		.loc 2 119 0
 563 01cc 9942     		cmp	r1, r3
 117:src/DCMotor.cpp **** 
 564              		.loc 2 117 0
 565 01ce 0546     		mov	r5, r0
 566 01d0 0C46     		mov	r4, r1
 567 01d2 1646     		mov	r6, r2
 119:src/DCMotor.cpp **** 		s = -PERIOD;
 568              		.loc 2 119 0
 569 01d4 05DB     		blt	.L40
 123:src/DCMotor.cpp **** 
 570              		.loc 2 123 0
 571 01d6 43F63F03 		movw	r3, #14399
 572 01da 9942     		cmp	r1, r3
 573 01dc A8BF     		it	ge
 574 01de 1C46     		movge	r4, r3
 575 01e0 00E0     		b	.L29
 576              	.L40:
 120:src/DCMotor.cpp **** 
 577              		.loc 2 120 0
 578 01e2 1C46     		mov	r4, r3
 579              	.LVL40:
 580              	.L29:
 581 01e4 6B68     		ldr	r3, [r5, #4]
 125:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 582              		.loc 2 125 0
 583 01e6 56B9     		cbnz	r6, .L30
 126:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 584              		.loc 2 126 0
 585 01e8 198C     		ldrh	r1, [r3, #32]
 586 01ea 586A     		ldr	r0, [r3, #36]
 587              	.LVL41:
 588 01ec FFF7FEFF 		bl	GPIO_ResetBits
 589              	.LVL42:
 127:src/DCMotor.cpp **** 		s = 0;
 590              		.loc 2 127 0
 591 01f0 6B68     		ldr	r3, [r5, #4]
 128:src/DCMotor.cpp **** 	}else{
 592              		.loc 2 128 0
 593 01f2 3446     		mov	r4, r6
 594              	.LVL43:
 127:src/DCMotor.cpp **** 		s = 0;
 595              		.loc 2 127 0
 596 01f4 198E     		ldrh	r1, [r3, #48]
 597 01f6 586B     		ldr	r0, [r3, #52]
 598 01f8 FFF7FEFF 		bl	GPIO_SetBits
 599              	.LVL44:
 600 01fc 20E0     		b	.L31
 601              	.LVL45:
 602              	.L30:
 131:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 603              		.loc 2 131 0
 604 01fe 198D     		ldrh	r1, [r3, #40]
 605 0200 D86A     		ldr	r0, [r3, #44]
 606              	.LVL46:
 607 0202 FFF7FEFF 		bl	GPIO_SetBits
 608              	.LVL47:
 132:src/DCMotor.cpp **** 
 609              		.loc 2 132 0
 610 0206 6B68     		ldr	r3, [r5, #4]
 611 0208 198F     		ldrh	r1, [r3, #56]
 612 020a D86B     		ldr	r0, [r3, #60]
 613 020c FFF7FEFF 		bl	GPIO_SetBits
 614              	.LVL48:
 134:src/DCMotor.cpp **** 				GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 615              		.loc 2 134 0
 616 0210 002C     		cmp	r4, #0
 617 0212 0ADD     		ble	.L32
 135:src/DCMotor.cpp **** 				GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 618              		.loc 2 135 0
 619 0214 6B68     		ldr	r3, [r5, #4]
 620 0216 198C     		ldrh	r1, [r3, #32]
 621 0218 586A     		ldr	r0, [r3, #36]
 622 021a FFF7FEFF 		bl	GPIO_SetBits
 623              	.LVL49:
 136:src/DCMotor.cpp **** 			}else if(s < 0){
 624              		.loc 2 136 0
 625 021e 6B68     		ldr	r3, [r5, #4]
 626 0220 198E     		ldrh	r1, [r3, #48]
 627 0222 586B     		ldr	r0, [r3, #52]
 628 0224 FFF7FEFF 		bl	GPIO_ResetBits
 629              	.LVL50:
 630 0228 0AE0     		b	.L31
 631              	.L32:
 137:src/DCMotor.cpp **** 				GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 632              		.loc 2 137 0
 633 022a 32D0     		beq	.L42
 138:src/DCMotor.cpp **** 				GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 634              		.loc 2 138 0
 635 022c 6B68     		ldr	r3, [r5, #4]
 636 022e 198C     		ldrh	r1, [r3, #32]
 637 0230 586A     		ldr	r0, [r3, #36]
 638 0232 FFF7FEFF 		bl	GPIO_ResetBits
 639              	.LVL51:
 139:src/DCMotor.cpp **** 			}else{
 640              		.loc 2 139 0
 641 0236 6B68     		ldr	r3, [r5, #4]
 642 0238 198E     		ldrh	r1, [r3, #48]
 643 023a 586B     		ldr	r0, [r3, #52]
 644 023c FFF7FEFF 		bl	GPIO_SetBits
 645              	.LVL52:
 646              	.L31:
 156:src/DCMotor.cpp **** 		s = s * 2;
 647              		.loc 2 156 0
 648 0240 6A68     		ldr	r2, [r5, #4]
 649 0242 1749     		ldr	r1, .L45+4
 650 0244 9368     		ldr	r3, [r2, #8]
 159:src/DCMotor.cpp **** 		case 1:
 651              		.loc 2 159 0
 652 0246 D268     		ldr	r2, [r2, #12]
 156:src/DCMotor.cpp **** 		s = s * 2;
 653              		.loc 2 156 0
 654 0248 8B42     		cmp	r3, r1
 159:src/DCMotor.cpp **** 		case 1:
 655              		.loc 2 159 0
 656 024a 02F1FF32 		add	r2, r2, #-1
 157:src/DCMotor.cpp **** 
 657              		.loc 2 157 0
 658 024e 08BF     		it	eq
 659 0250 6400     		lsleq	r4, r4, #1
 660              	.LVL53:
 159:src/DCMotor.cpp **** 		case 1:
 661              		.loc 2 159 0
 662 0252 032A     		cmp	r2, #3
 663 0254 1FD8     		bhi	.L43
 664 0256 DFE802F0 		tbb	[pc, r2]
 665              	.L36:
 666 025a 02       		.byte	(.L35-.L36)/2
 667 025b 08       		.byte	(.L37-.L36)/2
 668 025c 0E       		.byte	(.L38-.L36)/2
 669 025d 14       		.byte	(.L39-.L36)/2
 670              		.p2align 1
 671              	.L35:
 161:src/DCMotor.cpp **** 			break;
 672              		.loc 2 161 0
 673 025e 002C     		cmp	r4, #0
 674 0260 B8BF     		it	lt
 675 0262 6442     		rsblt	r4, r4, #0
 676              	.LVL54:
 677 0264 A4B2     		uxth	r4, r4
 678 0266 9C86     		strh	r4, [r3, #52]	@ movhi
 679 0268 11E0     		b	.L44
 680              	.LVL55:
 681              	.L37:
 164:src/DCMotor.cpp **** 			break;
 682              		.loc 2 164 0
 683 026a 002C     		cmp	r4, #0
 684 026c B8BF     		it	lt
 685 026e 6442     		rsblt	r4, r4, #0
 686              	.LVL56:
 687 0270 A4B2     		uxth	r4, r4
 688 0272 1C87     		strh	r4, [r3, #56]	@ movhi
 689 0274 0BE0     		b	.L44
 690              	.LVL57:
 691              	.L38:
 167:src/DCMotor.cpp **** 			break;
 692              		.loc 2 167 0
 693 0276 002C     		cmp	r4, #0
 694 0278 B8BF     		it	lt
 695 027a 6442     		rsblt	r4, r4, #0
 696              	.LVL58:
 697 027c A4B2     		uxth	r4, r4
 698 027e 9C87     		strh	r4, [r3, #60]	@ movhi
 699 0280 05E0     		b	.L44
 700              	.LVL59:
 701              	.L39:
 170:src/DCMotor.cpp **** 			break;
 702              		.loc 2 170 0
 703 0282 002C     		cmp	r4, #0
 704 0284 B8BF     		it	lt
 705 0286 6442     		rsblt	r4, r4, #0
 706              	.LVL60:
 707 0288 A4B2     		uxth	r4, r4
 708 028a A3F84040 		strh	r4, [r3, #64]	@ movhi
 709              	.L44:
 176:src/DCMotor.cpp **** }
 710              		.loc 2 176 0
 711 028e 0120     		movs	r0, #1
 171:src/DCMotor.cpp **** 		default:
 712              		.loc 2 171 0
 713 0290 70BD     		pop	{r4, r5, r6, pc}
 714              	.LVL61:
 715              	.L42:
 141:src/DCMotor.cpp **** 			}
 716              		.loc 2 141 0
 717 0292 2046     		mov	r0, r4
 718 0294 70BD     		pop	{r4, r5, r6, pc}
 719              	.LVL62:
 720              	.L43:
 173:src/DCMotor.cpp **** 	}
 721              		.loc 2 173 0
 722 0296 0020     		movs	r0, #0
 177:src/DCMotor.cpp **** 
 723              		.loc 2 177 0
 724 0298 70BD     		pop	{r4, r5, r6, pc}
 725              	.LVL63:
 726              	.L46:
 727 029a 00BF     		.align	2
 728              	.L45:
 729 029c C1C7FFFF 		.word	-14399
 730 02a0 002C0140 		.word	1073818624
 731              		.cfi_endproc
 732              	.LFE1031:
 733              		.fnend
 735              		.align	1
 736              		.global	_ZN7DCMotor11initEncoderEt
 737              		.thumb
 738              		.thumb_func
 740              	_ZN7DCMotor11initEncoderEt:
 741              		.fnstart
 742              	.LFB1034:
 187:src/DCMotor.cpp **** 	encAddr = addr;
 743              		.loc 2 187 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748              	.LVL64:
 749              		.loc 2 188 0
 750 02a4 0173     		strb	r1, [r0, #12]
 751 02a6 7047     		bx	lr
 752              		.cfi_endproc
 753              	.LFE1034:
 754              		.cantunwind
 755              		.fnend
 757              		.align	1
 758              		.global	_ZN7DCMotor11readEncoderEv
 759              		.thumb
 760              		.thumb_func
 762              	_ZN7DCMotor11readEncoderEv:
 763              		.fnstart
 764              	.LFB1035:
 189:src/DCMotor.cpp **** }
 190:src/DCMotor.cpp **** 
 191:src/DCMotor.cpp **** int32_t DCMotor::readEncoder(){
 765              		.loc 2 191 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769              	.LVL65:
 770 02a8 70B5     		push	{r4, r5, r6, lr}
 771              		.save {r4, r5, r6, lr}
 772              	.LCFI7:
 773              		.cfi_def_cfa_offset 16
 774              		.cfi_offset 4, -16
 775              		.cfi_offset 5, -12
 776              		.cfi_offset 6, -8
 777              		.cfi_offset 14, -4
 778 02aa 0446     		mov	r4, r0
 779              	.LVL66:
 780              	.L49:
 192:src/DCMotor.cpp ****     uint8_t Rx_Idx = 0;
 193:src/DCMotor.cpp ****     uint8_t RxBuffer[4] = {0};
 194:src/DCMotor.cpp **** 
 195:src/DCMotor.cpp **** 
 196:src/DCMotor.cpp ****     // START
 197:src/DCMotor.cpp ****     while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 781              		.loc 2 197 0
 782 02ac 4FF40031 		mov	r1, #131072
 783 02b0 2F48     		ldr	r0, .L69
 784 02b2 FFF7FEFF 		bl	I2C_GetFlagStatus
 785              	.LVL67:
 786 02b6 0028     		cmp	r0, #0
 787 02b8 F8D1     		bne	.L49
 198:src/DCMotor.cpp ****     I2C_GenerateSTART(I2C1, ENABLE);
 788              		.loc 2 198 0
 789 02ba 0121     		movs	r1, #1
 790 02bc 2C48     		ldr	r0, .L69
 791 02be FFF7FEFF 		bl	I2C_GenerateSTART
 792              	.LVL68:
 793              	.L50:
 199:src/DCMotor.cpp **** 	// wait for I2C1 EV5 --> Slave has acknowledged start condition
 200:src/DCMotor.cpp **** 	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 794              		.loc 2 200 0
 795 02c2 2C49     		ldr	r1, .L69+4
 796 02c4 2A48     		ldr	r0, .L69
 797 02c6 FFF7FEFF 		bl	I2C_CheckEvent
 798              	.LVL69:
 799 02ca 0028     		cmp	r0, #0
 800 02cc F9D0     		beq	.L50
 201:src/DCMotor.cpp ****     I2C_Send7bitAddress(I2C1, encAddr<<1, I2C_Direction_Receiver);
 801              		.loc 2 201 0
 802 02ce 217B     		ldrb	r1, [r4, #12]	@ zero_extendqisi2
 803 02d0 0122     		movs	r2, #1
 804 02d2 4900     		lsls	r1, r1, #1
 805 02d4 01F0FE01 		and	r1, r1, #254
 806 02d8 2548     		ldr	r0, .L69
 807 02da FFF7FEFF 		bl	I2C_Send7bitAddress
 808              	.LVL70:
 809              	.L51:
 202:src/DCMotor.cpp **** 	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 810              		.loc 2 202 0
 811 02de 2649     		ldr	r1, .L69+8
 812 02e0 2348     		ldr	r0, .L69
 813 02e2 FFF7FEFF 		bl	I2C_CheckEvent
 814              	.LVL71:
 815 02e6 0028     		cmp	r0, #0
 816 02e8 F9D0     		beq	.L51
 203:src/DCMotor.cpp **** 
 204:src/DCMotor.cpp **** 
 205:src/DCMotor.cpp **** 
 206:src/DCMotor.cpp ****     // ACK
 207:src/DCMotor.cpp **** 	I2C_AcknowledgeConfig(I2C1, ENABLE);
 817              		.loc 2 207 0
 818 02ea 0121     		movs	r1, #1
 819 02ec 2048     		ldr	r0, .L69
 820 02ee FFF7FEFF 		bl	I2C_AcknowledgeConfig
 821              	.LVL72:
 822              	.L52:
 208:src/DCMotor.cpp **** 	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 823              		.loc 2 208 0
 824 02f2 2249     		ldr	r1, .L69+12
 825 02f4 1E48     		ldr	r0, .L69
 826 02f6 FFF7FEFF 		bl	I2C_CheckEvent
 827              	.LVL73:
 828 02fa 0028     		cmp	r0, #0
 829 02fc F9D0     		beq	.L52
 830              	.LVL74:
 209:src/DCMotor.cpp **** 	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 831              		.loc 2 209 0
 832 02fe 1C48     		ldr	r0, .L69
 833 0300 FFF7FEFF 		bl	I2C_ReceiveData
 834              	.LVL75:
 210:src/DCMotor.cpp **** 
 211:src/DCMotor.cpp **** 	// ACK
 212:src/DCMotor.cpp **** 	I2C_AcknowledgeConfig(I2C1, ENABLE);
 835              		.loc 2 212 0
 836 0304 0121     		movs	r1, #1
 209:src/DCMotor.cpp **** 	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 837              		.loc 2 209 0
 838 0306 0646     		mov	r6, r0
 839              	.LVL76:
 840              		.loc 2 212 0
 841 0308 1948     		ldr	r0, .L69
 842 030a FFF7FEFF 		bl	I2C_AcknowledgeConfig
 843              	.LVL77:
 844              	.L53:
 213:src/DCMotor.cpp **** 	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 845              		.loc 2 213 0
 846 030e 1B49     		ldr	r1, .L69+12
 847 0310 1748     		ldr	r0, .L69
 848 0312 FFF7FEFF 		bl	I2C_CheckEvent
 849              	.LVL78:
 850 0316 0028     		cmp	r0, #0
 851 0318 F9D0     		beq	.L53
 852              	.LVL79:
 214:src/DCMotor.cpp **** 	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 853              		.loc 2 214 0
 854 031a 1548     		ldr	r0, .L69
 855 031c FFF7FEFF 		bl	I2C_ReceiveData
 856              	.LVL80:
 215:src/DCMotor.cpp **** 
 216:src/DCMotor.cpp **** 
 217:src/DCMotor.cpp ****     // ACK
 218:src/DCMotor.cpp **** 	I2C_AcknowledgeConfig(I2C1, ENABLE);
 857              		.loc 2 218 0
 858 0320 0121     		movs	r1, #1
 214:src/DCMotor.cpp **** 	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 859              		.loc 2 214 0
 860 0322 0446     		mov	r4, r0
 861              	.LVL81:
 862              		.loc 2 218 0
 863 0324 1248     		ldr	r0, .L69
 864 0326 FFF7FEFF 		bl	I2C_AcknowledgeConfig
 865              	.LVL82:
 866              	.L54:
 219:src/DCMotor.cpp **** 	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 867              		.loc 2 219 0
 868 032a 1449     		ldr	r1, .L69+12
 869 032c 1048     		ldr	r0, .L69
 870 032e FFF7FEFF 		bl	I2C_CheckEvent
 871              	.LVL83:
 872 0332 0028     		cmp	r0, #0
 873 0334 F9D0     		beq	.L54
 874              	.LVL84:
 220:src/DCMotor.cpp **** 	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 875              		.loc 2 220 0
 876 0336 0E48     		ldr	r0, .L69
 877 0338 FFF7FEFF 		bl	I2C_ReceiveData
 878              	.LVL85:
 221:src/DCMotor.cpp **** 
 222:src/DCMotor.cpp **** 
 223:src/DCMotor.cpp ****     // NACK
 224:src/DCMotor.cpp ****     I2C_AcknowledgeConfig(I2C1, DISABLE);
 879              		.loc 2 224 0
 880 033c 0021     		movs	r1, #0
 220:src/DCMotor.cpp **** 	RxBuffer[Rx_Idx++] = I2C_ReceiveData(I2C1);
 881              		.loc 2 220 0
 882 033e 0546     		mov	r5, r0
 883              	.LVL86:
 884              		.loc 2 224 0
 885 0340 0B48     		ldr	r0, .L69
 886 0342 FFF7FEFF 		bl	I2C_AcknowledgeConfig
 887              	.LVL87:
 225:src/DCMotor.cpp **** 	I2C_GenerateSTOP(I2C1, ENABLE);
 888              		.loc 2 225 0
 889 0346 0121     		movs	r1, #1
 890 0348 0948     		ldr	r0, .L69
 891 034a FFF7FEFF 		bl	I2C_GenerateSTOP
 892              	.LVL88:
 893              	.L55:
 226:src/DCMotor.cpp **** 	while( !I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED) );
 894              		.loc 2 226 0
 895 034e 0B49     		ldr	r1, .L69+12
 896 0350 0748     		ldr	r0, .L69
 897 0352 FFF7FEFF 		bl	I2C_CheckEvent
 898              	.LVL89:
 899 0356 0028     		cmp	r0, #0
 900 0358 F9D0     		beq	.L55
 227:src/DCMotor.cpp **** 	RxBuffer[Rx_Idx] = I2C_ReceiveData(I2C1);
 901              		.loc 2 227 0
 902 035a 0548     		ldr	r0, .L69
 903 035c FFF7FEFF 		bl	I2C_ReceiveData
 904              	.LVL90:
 228:src/DCMotor.cpp **** 
 229:src/DCMotor.cpp ****    
 230:src/DCMotor.cpp **** 	return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
 905              		.loc 2 230 0
 906 0360 2304     		lsls	r3, r4, #16
 907 0362 43EA0664 		orr	r4, r3, r6, lsl #24
 908 0366 44EA0524 		orr	r4, r4, r5, lsl #8
 231:src/DCMotor.cpp **** }
 909              		.loc 2 231 0
 910 036a 2043     		orrs	r0, r0, r4
 911 036c 70BD     		pop	{r4, r5, r6, pc}
 912              	.L70:
 913 036e 00BF     		.align	2
 914              	.L69:
 915 0370 00540040 		.word	1073763328
 916 0374 01000300 		.word	196609
 917 0378 02000300 		.word	196610
 918 037c 40000300 		.word	196672
 919              		.cfi_endproc
 920              	.LFE1035:
 921              		.fnend
 923              		.global	__aeabi_fsub
 924              		.global	__aeabi_fmul
 925              		.global	__aeabi_fadd
 926              		.global	__aeabi_fcmpgt
 927              		.global	__aeabi_fcmplt
 928              		.global	__aeabi_fdiv
 929              		.align	1
 930              		.global	_ZN7DCMotor15updateRegulatorEfff
 931              		.thumb
 932              		.thumb_func
 934              	_ZN7DCMotor15updateRegulatorEfff:
 935              		.fnstart
 936              	.LFB1036:
 232:src/DCMotor.cpp **** 
 233:src/DCMotor.cpp **** float DCMotor::updateRegulator(float enc, float sp, float dt){
 937              		.loc 2 233 0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 0
 940              		@ frame_needed = 0, uses_anonymous_args = 0
 941              	.LVL91:
 942 0380 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 943              	.LCFI8:
 944              		.cfi_def_cfa_offset 32
 945              		.cfi_offset 3, -32
 946              		.cfi_offset 4, -28
 947              		.cfi_offset 5, -24
 948              		.cfi_offset 6, -20
 949              		.cfi_offset 7, -16
 950              		.cfi_offset 8, -12
 951              		.cfi_offset 9, -8
 952              		.cfi_offset 14, -4
 953              		.loc 2 233 0
 954 0384 0446     		mov	r4, r0
 955 0386 1F46     		mov	r7, r3
 234:src/DCMotor.cpp **** 	float error_new = sp-enc;		// m/s
 956              		.loc 2 234 0
 957 0388 1046     		mov	r0, r2
 958              	.LVL92:
 233:src/DCMotor.cpp **** 	float error_new = sp-enc;		// m/s
 959              		.loc 2 233 0
 960 038a 9046     		mov	r8, r2
 961              		.loc 2 234 0
 962 038c FFF7FEFF 		bl	__aeabi_fsub
 963              	.LVL93:
 235:src/DCMotor.cpp **** 	
 236:src/DCMotor.cpp **** 	integral += error_new*dt;
 964              		.loc 2 236 0
 965 0390 3946     		mov	r1, r7
 234:src/DCMotor.cpp **** 	
 966              		.loc 2 234 0
 967 0392 0646     		mov	r6, r0
 968              	.LVL94:
 969              		.loc 2 236 0
 970 0394 FFF7FEFF 		bl	__aeabi_fmul
 971              	.LVL95:
 972 0398 E16A     		ldr	r1, [r4, #44]	@ float
 973 039a FFF7FEFF 		bl	__aeabi_fadd
 974              	.LVL96:
 237:src/DCMotor.cpp **** 	
 238:src/DCMotor.cpp **** 	if (integral > integralSaturation){
 975              		.loc 2 238 0
 976 039e 656A     		ldr	r5, [r4, #36]	@ float
 236:src/DCMotor.cpp **** 	
 977              		.loc 2 236 0
 978 03a0 E062     		str	r0, [r4, #44]	@ float
 979              		.loc 2 238 0
 980 03a2 2946     		mov	r1, r5
 236:src/DCMotor.cpp **** 	
 981              		.loc 2 236 0
 982 03a4 8146     		mov	r9, r0
 983              		.loc 2 238 0
 984 03a6 FFF7FEFF 		bl	__aeabi_fcmpgt
 985              	.LVL97:
 986 03aa 30B9     		cbnz	r0, .L79
 239:src/DCMotor.cpp **** 		integral = integralSaturation;
 240:src/DCMotor.cpp **** 	}else if (integral < -(integralSaturation)){
 987              		.loc 2 240 0
 988 03ac 05F10045 		add	r5, r5, #-2147483648
 989 03b0 2946     		mov	r1, r5
 990 03b2 4846     		mov	r0, r9
 991 03b4 FFF7FEFF 		bl	__aeabi_fcmplt
 992              	.LVL98:
 993 03b8 00B1     		cbz	r0, .L74
 994              	.L79:
 241:src/DCMotor.cpp **** 		integral = -(integralSaturation);
 995              		.loc 2 241 0
 996 03ba E562     		str	r5, [r4, #44]	@ float
 997              	.L74:
 998              	.LVL99:
 242:src/DCMotor.cpp **** 	}
 243:src/DCMotor.cpp **** 	
 244:src/DCMotor.cpp **** 	float derivative = (error_new-error)/dt;
 245:src/DCMotor.cpp **** 	float output = (FF*sp + KP*error_new + KI*integral + KD*derivative);
 999              		.loc 2 245 0
 1000 03bc 6169     		ldr	r1, [r4, #20]	@ float
 1001 03be 4046     		mov	r0, r8
 1002 03c0 FFF7FEFF 		bl	__aeabi_fmul
 1003              	.LVL100:
 1004 03c4 A169     		ldr	r1, [r4, #24]	@ float
 1005 03c6 0546     		mov	r5, r0
 1006 03c8 3046     		mov	r0, r6
 1007 03ca FFF7FEFF 		bl	__aeabi_fmul
 1008              	.LVL101:
 1009 03ce 0146     		mov	r1, r0
 1010 03d0 2846     		mov	r0, r5
 1011 03d2 FFF7FEFF 		bl	__aeabi_fadd
 1012              	.LVL102:
 1013 03d6 E16A     		ldr	r1, [r4, #44]	@ float
 1014 03d8 0546     		mov	r5, r0
 1015 03da E069     		ldr	r0, [r4, #28]	@ float
 1016 03dc FFF7FEFF 		bl	__aeabi_fmul
 1017              	.LVL103:
 1018 03e0 0146     		mov	r1, r0
 1019 03e2 2846     		mov	r0, r5
 1020 03e4 FFF7FEFF 		bl	__aeabi_fadd
 1021              	.LVL104:
 1022 03e8 A16A     		ldr	r1, [r4, #40]	@ float
 1023              	.LVL105:
 1024 03ea 0546     		mov	r5, r0
 1025 03ec 3046     		mov	r0, r6
 1026 03ee FFF7FEFF 		bl	__aeabi_fsub
 1027              	.LVL106:
 1028 03f2 3946     		mov	r1, r7
 1029 03f4 FFF7FEFF 		bl	__aeabi_fdiv
 1030              	.LVL107:
 1031 03f8 216A     		ldr	r1, [r4, #32]	@ float
 1032 03fa FFF7FEFF 		bl	__aeabi_fmul
 1033              	.LVL108:
 1034 03fe 0146     		mov	r1, r0
 1035 0400 2846     		mov	r0, r5
 1036 0402 FFF7FEFF 		bl	__aeabi_fadd
 1037              	.LVL109:
 246:src/DCMotor.cpp **** 	error = error_new;
 1038              		.loc 2 246 0
 1039 0406 A662     		str	r6, [r4, #40]	@ float
 247:src/DCMotor.cpp **** 	return output;
 248:src/DCMotor.cpp **** }
 1040              		.loc 2 248 0
 1041 0408 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1042              		.cfi_endproc
 1043              	.LFE1036:
 1044              		.cantunwind
 1045              		.fnend
 1047              		.global	__aeabi_i2f
 1048              		.global	__aeabi_f2iz
 1049              		.align	1
 1050              		.global	_ZN7DCMotor6updateEfbb
 1051              		.thumb
 1052              		.thumb_func
 1054              	_ZN7DCMotor6updateEfbb:
 1055              		.fnstart
 1056              	.LFB1037:
 249:src/DCMotor.cpp **** 
 250:src/DCMotor.cpp **** //std::tuple<float, int, int, int> DCMotor::update(float dt, bool connected){
 251:src/DCMotor.cpp **** float DCMotor::update(float dt, bool connected, bool enable){
 1057              		.loc 2 251 0
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 0
 1060              		@ frame_needed = 0, uses_anonymous_args = 0
 1061              	.LVL110:
 1062 040c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1063              		.save {r4, r5, r6, r7, r8, lr}
 1064              	.LCFI9:
 1065              		.cfi_def_cfa_offset 24
 1066              		.cfi_offset 4, -24
 1067              		.cfi_offset 5, -20
 1068              		.cfi_offset 6, -16
 1069              		.cfi_offset 7, -12
 1070              		.cfi_offset 8, -8
 1071              		.cfi_offset 14, -4
 1072              		.loc 2 251 0
 1073 0410 0546     		mov	r5, r0
 1074 0412 8846     		mov	r8, r1
 1075 0414 1F46     		mov	r7, r3
 252:src/DCMotor.cpp **** 	// Read encoder
 253:src/DCMotor.cpp **** 	
 254:src/DCMotor.cpp **** 	int s = 0;
 255:src/DCMotor.cpp **** 	float speed_si = -1;
 256:src/DCMotor.cpp **** 	int32_t encoder_speed = 0;
 257:src/DCMotor.cpp **** 	float sp = 0.0;
 258:src/DCMotor.cpp **** 	if(connected){
 1076              		.loc 2 258 0
 1077 0416 0AB1     		cbz	r2, .L83
 259:src/DCMotor.cpp **** 		sp = speed;
 1078              		.loc 2 259 0
 1079 0418 8668     		ldr	r6, [r0, #8]	@ float
 1080              	.LVL111:
 1081 041a 00E0     		b	.L81
 1082              	.LVL112:
 1083              	.L83:
 257:src/DCMotor.cpp **** 	if(connected){
 1084              		.loc 2 257 0
 1085 041c 0026     		movs	r6, #0
 1086              	.LVL113:
 1087              	.L81:
 260:src/DCMotor.cpp **** 	}
 261:src/DCMotor.cpp **** 	//std::tie(encoder_speed, retryCount, busyCount) = readEncoder();
 262:src/DCMotor.cpp **** 	encoder_speed = readEncoder();
 1088              		.loc 2 262 0
 1089 041e 2846     		mov	r0, r5
 1090              	.LVL114:
 1091 0420 FFF7FEFF 		bl	_ZN7DCMotor11readEncoderEv
 1092              	.LVL115:
 263:src/DCMotor.cpp **** 	// (2 * pi * F)/(2^14 * N)	[N = 8][F = 2Khz]
 264:src/DCMotor.cpp **** 	float encSpeed = encoder_speed*0.479368996f;		// rad/s
 265:src/DCMotor.cpp **** 	speed_si = encSpeed * wheelRadius;	// m/s
 1093              		.loc 2 265 0
 1094 0424 FFF7FEFF 		bl	__aeabi_i2f
 1095              	.LVL116:
 1096 0428 0E49     		ldr	r1, .L84
 1097 042a FFF7FEFF 		bl	__aeabi_fmul
 1098              	.LVL117:
 1099 042e 2969     		ldr	r1, [r5, #16]	@ float
 1100 0430 FFF7FEFF 		bl	__aeabi_fmul
 1101              	.LVL118:
 1102 0434 0446     		mov	r4, r0
 1103              	.LVL119:
 266:src/DCMotor.cpp **** 	/*if(strstr(m_settings->m_motorName, "left") > 0)
 267:src/DCMotor.cpp **** 		speed_si = speed_si * -1;*/
 268:src/DCMotor.cpp **** 
 269:src/DCMotor.cpp **** 	if(encAddr == 0x10 || encAddr == (0x10 | 0x04)){
 1104              		.loc 2 269 0
 1105 0436 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 270:src/DCMotor.cpp **** 		speed_si *= -1;
 271:src/DCMotor.cpp **** 	}
 272:src/DCMotor.cpp **** 
 273:src/DCMotor.cpp **** 	// Update PID regulator
 274:src/DCMotor.cpp **** 	s = (int) updateRegulator(speed_si, sp, dt);		// m/s*/
 1106              		.loc 2 274 0
 1107 0438 3246     		mov	r2, r6
 269:src/DCMotor.cpp **** 		speed_si *= -1;
 1108              		.loc 2 269 0
 1109 043a 03F0FB03 		and	r3, r3, #251
 1110 043e 102B     		cmp	r3, #16
 270:src/DCMotor.cpp **** 		speed_si *= -1;
 1111              		.loc 2 270 0
 1112 0440 08BF     		it	eq
 1113 0442 00F10044 		addeq	r4, r0, #-2147483648
 1114              	.LVL120:
 1115              		.loc 2 274 0
 1116 0446 4346     		mov	r3, r8
 1117 0448 2146     		mov	r1, r4
 1118 044a 2846     		mov	r0, r5
 1119 044c FFF7FEFF 		bl	_ZN7DCMotor15updateRegulatorEfff
 1120              	.LVL121:
 275:src/DCMotor.cpp **** 	// Set motor speed to process value
 276:src/DCMotor.cpp **** 	
 277:src/DCMotor.cpp **** 	setSpeed(s, enable);		// m/s
 1121              		.loc 2 277 0
 1122 0450 FFF7FEFF 		bl	__aeabi_f2iz
 1123              	.LVL122:
 1124 0454 3A46     		mov	r2, r7
 1125 0456 0146     		mov	r1, r0
 1126 0458 2846     		mov	r0, r5
 1127 045a FFF7FEFF 		bl	_ZN7DCMotor8setSpeedEib
 1128              	.LVL123:
 278:src/DCMotor.cpp **** 	
 279:src/DCMotor.cpp **** 	// Return encoder values for publishing to localization
 280:src/DCMotor.cpp **** 	return speed_si;
 281:src/DCMotor.cpp **** }
 1129              		.loc 2 281 0
 1130 045e 2046     		mov	r0, r4
 1131 0460 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1132              	.LVL124:
 1133              	.L85:
 1134              		.align	2
 1135              	.L84:
 1136 0464 DA6FF53E 		.word	1056272346
 1137              		.cfi_endproc
 1138              	.LFE1037:
 1139              		.fnend
 1141              		.global	_ZTS7DCMotor
 1142              		.global	_ZTI7DCMotor
 1143              		.global	_ZTV7DCMotor
 1144              		.section	.rodata
 1145              		.align	2
 1146              		.set	.LANCHOR0,. + 0
 1149              	_ZTV7DCMotor:
 1150 0000 00000000 		.word	0
 1151 0004 00000000 		.word	_ZTI7DCMotor
 1152 0008 00000000 		.word	_ZN7DCMotorD1Ev
 1153 000c 00000000 		.word	_ZN7DCMotorD0Ev
 1154 0010 00000000 		.word	_ZN7DCMotor9motorTypeEv
 1155 0014 00000000 		.word	_ZN7DCMotor9motorInitEv
 1156 0018 00000000 		.word	_ZN7DCMotor9motorNameEv
 1157 001c 00000000 		.word	_ZN7DCMotor12setReferenceEf
 1158 0020 00000000 		.word	_ZN7DCMotor12getReferenceEv
 1159 0024 00000000 		.word	_ZN7DCMotor6updateEfbb
 1162              	_ZTS7DCMotor:
 1163 0028 3744434D 		.ascii	"7DCMotor\000"
 1163      6F746F72 
 1163      00
 1164 0031 000000   		.space	3
 1167              	_ZTI7DCMotor:
 1168 0034 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 1169 0038 00000000 		.word	_ZTS7DCMotor
 1170 003c 00000000 		.word	_ZTI5motor
 1171              		.text
 1172              	.Letext0:
 1173              		.file 3 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types.h"
 1174              		.file 4 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1175              		.file 5 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/stdint.h"
 1176              		.file 6 "./lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 1177              		.file 7 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1178              		.file 8 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 1179              		.file 9 "/opt/gcc-arm-none-eabi-5_2-2015q4/lib/gcc/arm-none-eabi/5.2.1/include/stddef.h"
 1180              		.file 10 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/lock.h"
 1181              		.file 11 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_types.h"
 1182              		.file 12 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/reent.h"
 1183              		.file 13 "/opt/gcc-arm-none-eabi-5_2-2015q4/lib/gcc/arm-none-eabi/5.2.1/include/stdarg.h"
 1184              		.file 14 "<built-in>"
 1185              		.file 15 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/type_traits"
 1186              		.file 16 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/exception_ptr.h"
 1187              		.file 17 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/arm-none-eabi/armv7-m/
 1188              		.file 18 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/debug/debug.h"
 1189              		.file 19 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/cwchar"
 1190              		.file 20 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/cstdint"
 1191              		.file 21 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/clocale"
 1192              		.file 22 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/stl_pair.h"
 1193              		.file 23 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/uses_allocator.h"
 1194              		.file 24 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple"
 1195              		.file 25 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/predefined_ops.h"
 1196              		.file 26 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/ext/new_allocator.h"
 1197              		.file 27 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/ext/numeric_traits.h"
 1198              		.file 28 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/wchar.h"
 1199              		.file 29 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/locale.h"
 1200              		.file 30 "./inc/motorSettings.h"
 1201              		.file 31 "./lib/CMSIS/CM3/CoreSupport/core_cm3.h"
 1202              		.file 32 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
 1203              		.file 33 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/new"
DEFINED SYMBOLS
                            *ABS*:00000000 DCMotor.cpp
     /tmp/cctutL3F.s:20     .text._ZN7DCMotor9motorTypeEv:00000000 $t
     /tmp/cctutL3F.s:25     .text._ZN7DCMotor9motorTypeEv:00000000 _ZN7DCMotor9motorTypeEv
.ARM.exidx.text._ZN7DCMotor9motorTypeEv:00000000 $d
     /tmp/cctutL3F.s:45     .text:00000000 $t
     /tmp/cctutL3F.s:50     .text:00000000 _ZN7DCMotor12setReferenceEf
                       .ARM.exidx:00000000 $d
     /tmp/cctutL3F.s:73     .text:00000004 _ZN7DCMotor12getReferenceEv
     /tmp/cctutL3F.s:96     .text:00000008 _ZN7DCMotor9motorNameEv
     /tmp/cctutL3F.s:121    .text:0000000e _ZN7DCMotorD2Ev
     /tmp/cctutL3F.s:149    .text:00000020 $d
     /tmp/cctutL3F.s:121    .text:0000000e _ZN7DCMotorD1Ev
     /tmp/cctutL3F.s:157    .text:00000024 $t
     /tmp/cctutL3F.s:162    .text:00000024 _ZN7DCMotorD0Ev
     /tmp/cctutL3F.s:195    .text:00000036 _ZN7DCMotor9motorInitEv
     /tmp/cctutL3F.s:359    .text:0000010e $d
     /tmp/cctutL3F.s:363    .text:00000112 $t
     /tmp/cctutL3F.s:488    .text:000001b0 $d
     /tmp/cctutL3F.s:493    .text:000001b4 $t
     /tmp/cctutL3F.s:498    .text:000001b4 _ZN7DCMotorC2EP13motorSettings
     /tmp/cctutL3F.s:531    .text:000001c4 $d
     /tmp/cctutL3F.s:498    .text:000001b4 _ZN7DCMotorC1EP13motorSettings
     /tmp/cctutL3F.s:538    .text:000001c8 $t
     /tmp/cctutL3F.s:543    .text:000001c8 _ZN7DCMotor8setSpeedEib
     /tmp/cctutL3F.s:666    .text:0000025a $d
     /tmp/cctutL3F.s:670    .text:0000025e $t
     /tmp/cctutL3F.s:729    .text:0000029c $d
     /tmp/cctutL3F.s:735    .text:000002a4 $t
     /tmp/cctutL3F.s:740    .text:000002a4 _ZN7DCMotor11initEncoderEt
     /tmp/cctutL3F.s:762    .text:000002a8 _ZN7DCMotor11readEncoderEv
     /tmp/cctutL3F.s:915    .text:00000370 $d
     /tmp/cctutL3F.s:929    .text:00000380 $t
     /tmp/cctutL3F.s:934    .text:00000380 _ZN7DCMotor15updateRegulatorEfff
     /tmp/cctutL3F.s:1054   .text:0000040c _ZN7DCMotor6updateEfbb
     /tmp/cctutL3F.s:1136   .text:00000464 $d
     /tmp/cctutL3F.s:1162   .rodata:00000028 _ZTS7DCMotor
     /tmp/cctutL3F.s:1167   .rodata:00000034 _ZTI7DCMotor
     /tmp/cctutL3F.s:1149   .rodata:00000000 _ZTV7DCMotor
     /tmp/cctutL3F.s:1145   .rodata:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN5motorD2Ev
_ZdlPv
GPIO_Init
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_ARRPreloadConfig
TIM_CtrlPWMOutputs
TIM_Cmd
__aeabi_unwind_cpp_pr0
_ZN5motorC2EP13motorSettings
GPIO_ResetBits
GPIO_SetBits
I2C_GetFlagStatus
I2C_GenerateSTART
I2C_CheckEvent
I2C_Send7bitAddress
I2C_AcknowledgeConfig
I2C_ReceiveData
I2C_GenerateSTOP
__aeabi_fsub
__aeabi_fmul
__aeabi_fadd
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fdiv
__aeabi_i2f
__aeabi_f2iz
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI5motor
