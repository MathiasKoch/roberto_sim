   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"DCMotor.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN7DCMotor9motorTypeEv,"axG",%progbits,_ZN7DCMotor9motorTypeEv,comdat
  20              		.align	1
  21              		.weak	_ZN7DCMotor9motorTypeEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN7DCMotor9motorTypeEv:
  26              		.fnstart
  27              	.LFB29:
  28              		.file 1 "./inc/DCMotor.h"
   1:./inc/DCMotor.h **** 
   2:./inc/DCMotor.h **** #ifndef _DCMotor_H
   3:./inc/DCMotor.h **** #define	_DCMotor_H
   4:./inc/DCMotor.h **** 
   5:./inc/DCMotor.h **** #include <stm32f10x.h>
   6:./inc/DCMotor.h **** #include <stdlib.h>
   7:./inc/DCMotor.h **** #include "motor.h"
   8:./inc/DCMotor.h **** #include "encoder.h"
   9:./inc/DCMotor.h **** 
  10:./inc/DCMotor.h **** 
  11:./inc/DCMotor.h **** class DCMotor : public motor
  12:./inc/DCMotor.h **** {
  13:./inc/DCMotor.h **** public:
  14:./inc/DCMotor.h ****     DCMotor(motorSettings *settings);
  15:./inc/DCMotor.h ****     ~DCMotor();
  16:./inc/DCMotor.h **** 
  17:./inc/DCMotor.h ****     virtual void setReference(float setPoint);
  18:./inc/DCMotor.h ****     virtual float getReference();
  19:./inc/DCMotor.h ****     virtual char* motorName();
  20:./inc/DCMotor.h ****     virtual float update(float dt);
  21:./inc/DCMotor.h **** 
  22:./inc/DCMotor.h ****     virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
  29              		.loc 1 22 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              		.loc 1 22 0
  36 0000 0220     		movs	r0, #2
  37              	.LVL1:
  38 0002 7047     		bx	lr
  39              		.cfi_endproc
  40              	.LFE29:
  41              		.cantunwind
  42              		.fnend
  44              		.text
  45              		.align	1
  46              		.global	_ZN7DCMotor12setReferenceEf
  47              		.thumb
  48              		.thumb_func
  50              	_ZN7DCMotor12setReferenceEf:
  51              		.fnstart
  52              	.LFB38:
  53              		.file 2 "src/DCMotor.cpp"
   1:src/DCMotor.cpp **** 
   2:src/DCMotor.cpp **** #include "DCMotor.h"
   3:src/DCMotor.cpp **** #include "motorSettings.h"
   4:src/DCMotor.cpp **** 
   5:src/DCMotor.cpp **** #define PERIOD 14399
   6:src/DCMotor.cpp **** #define PRESCALER 0
   7:src/DCMotor.cpp **** #define CLOCKDIV 0
   8:src/DCMotor.cpp **** 
   9:src/DCMotor.cpp **** 
  10:src/DCMotor.cpp **** DCMotor::DCMotor(motorSettings *settings) : motor(settings)
  11:src/DCMotor.cpp **** {
  12:src/DCMotor.cpp **** 
  13:src/DCMotor.cpp **** }
  14:src/DCMotor.cpp **** 
  15:src/DCMotor.cpp **** DCMotor::~DCMotor()
  16:src/DCMotor.cpp **** {
  17:src/DCMotor.cpp **** }
  18:src/DCMotor.cpp **** 
  19:src/DCMotor.cpp **** bool DCMotor::motorInit()
  20:src/DCMotor.cpp **** {
  21:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
  22:src/DCMotor.cpp **** 
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  25:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  26:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
  27:src/DCMotor.cpp **** 
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
  29:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  30:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  31:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
  32:src/DCMotor.cpp **** 
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  35:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  36:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
  37:src/DCMotor.cpp **** 
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
  39:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  40:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  41:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
  42:src/DCMotor.cpp **** 
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
  44:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  45:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  46:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
  47:src/DCMotor.cpp **** 
  48:src/DCMotor.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  49:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
  50:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
  51:src/DCMotor.cpp **** 	else
  52:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD;
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
  54:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
  55:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  56:src/DCMotor.cpp **** 
  57:src/DCMotor.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
  58:src/DCMotor.cpp **** 
  59:src/DCMotor.cpp **** 	TIM_OCInitTypeDef TIM_OCInitStructure;
  60:src/DCMotor.cpp **** 	TIM_OCStructInit(&TIM_OCInitStructure);
  61:src/DCMotor.cpp **** 
  62:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  63:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  64:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
  65:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  66:src/DCMotor.cpp **** 
  67:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
  68:src/DCMotor.cpp **** 		case 1:
  69:src/DCMotor.cpp **** 			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
  70:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  71:src/DCMotor.cpp **** 			break;
  72:src/DCMotor.cpp **** 		case 2:
  73:src/DCMotor.cpp **** 			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
  74:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  75:src/DCMotor.cpp **** 			break;
  76:src/DCMotor.cpp **** 		case 3:
  77:src/DCMotor.cpp **** 			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
  78:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  79:src/DCMotor.cpp **** 			break;
  80:src/DCMotor.cpp **** 		case 4:
  81:src/DCMotor.cpp **** 			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
  82:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  83:src/DCMotor.cpp **** 			break;
  84:src/DCMotor.cpp **** 		default:
  85:src/DCMotor.cpp **** 			return false;
  86:src/DCMotor.cpp **** 	}
  87:src/DCMotor.cpp **** 
  88:src/DCMotor.cpp **** 	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
  89:src/DCMotor.cpp **** 
  90:src/DCMotor.cpp **** 	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
  91:src/DCMotor.cpp **** 
  92:src/DCMotor.cpp **** 	TIM_Cmd(m_settings->m_Timer, ENABLE);
  93:src/DCMotor.cpp **** 
  94:src/DCMotor.cpp **** 	// Initialize encoder
  95:src/DCMotor.cpp **** 	initEncoder(m_settings->encoderAddr);
  96:src/DCMotor.cpp **** 
  97:src/DCMotor.cpp **** 	// Initialize PID regulator
  98:src/DCMotor.cpp **** 	KP = m_settings->KP;
  99:src/DCMotor.cpp **** 	KI = m_settings->KI;
 100:src/DCMotor.cpp **** 	KD = m_settings->KD;
 101:src/DCMotor.cpp **** 	integralSaturation = m_settings->integralSaturation;
 102:src/DCMotor.cpp **** 
 103:src/DCMotor.cpp **** 	integral = 0;
 104:src/DCMotor.cpp **** 	error = 0;
 105:src/DCMotor.cpp **** 
 106:src/DCMotor.cpp **** 	wheelRadius = m_settings->wheelRadius;
 107:src/DCMotor.cpp **** 
 108:src/DCMotor.cpp **** 	return true;
 109:src/DCMotor.cpp **** }
 110:src/DCMotor.cpp **** 
 111:src/DCMotor.cpp **** void DCMotor::setReference(float setPoint){
  54              		.loc 2 111 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.LVL2:
 112:src/DCMotor.cpp **** 	speed = setPoint;
  60              		.loc 2 112 0
  61 0000 8160     		str	r1, [r0, #8]	@ float
  62 0002 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE38:
  65              		.cantunwind
  66              		.fnend
  68              		.align	1
  69              		.global	_ZN7DCMotor12getReferenceEv
  70              		.thumb
  71              		.thumb_func
  73              	_ZN7DCMotor12getReferenceEv:
  74              		.fnstart
  75              	.LFB40:
 113:src/DCMotor.cpp **** 
 114:src/DCMotor.cpp **** }
 115:src/DCMotor.cpp **** 
 116:src/DCMotor.cpp **** bool DCMotor::setSpeed(int s){
 117:src/DCMotor.cpp **** 	if(s < 0)
 118:src/DCMotor.cpp **** 		s = 0;
 119:src/DCMotor.cpp **** 
 120:src/DCMotor.cpp **** 	if(s > PERIOD)
 121:src/DCMotor.cpp **** 		s = PERIOD;
 122:src/DCMotor.cpp **** 
 123:src/DCMotor.cpp **** 	if(abs(s) > 0){
 124:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 125:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 126:src/DCMotor.cpp **** 
 127:src/DCMotor.cpp **** 		if(s > 0){
 128:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 129:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 130:src/DCMotor.cpp **** 		}else if(s < 0){
 131:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 132:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 133:src/DCMotor.cpp **** 		}else{
 134:src/DCMotor.cpp **** 			return false;
 135:src/DCMotor.cpp **** 		}
 136:src/DCMotor.cpp **** 	}else{
 137:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 138:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 139:src/DCMotor.cpp **** 
 140:src/DCMotor.cpp **** 		// Break to GND
 141:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 142:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 143:src/DCMotor.cpp **** 	}
 144:src/DCMotor.cpp **** 
 145:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
 146:src/DCMotor.cpp **** 		s = s*2;
 147:src/DCMotor.cpp **** 
 148:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
 149:src/DCMotor.cpp **** 		case 1:
 150:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR1 = (uint32_t)abs(s);
 151:src/DCMotor.cpp **** 			break;
 152:src/DCMotor.cpp **** 		case 2:
 153:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR2 = (uint32_t)abs(s);
 154:src/DCMotor.cpp **** 			break;
 155:src/DCMotor.cpp **** 		case 3:
 156:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR3 = (uint32_t)abs(s);
 157:src/DCMotor.cpp **** 			break;
 158:src/DCMotor.cpp **** 		case 4:
 159:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
 160:src/DCMotor.cpp **** 			break;
 161:src/DCMotor.cpp **** 		default:
 162:src/DCMotor.cpp **** 			return false;
 163:src/DCMotor.cpp **** 	}
 164:src/DCMotor.cpp **** 
 165:src/DCMotor.cpp **** 	return true;
 166:src/DCMotor.cpp **** }
 167:src/DCMotor.cpp **** 
 168:src/DCMotor.cpp **** float DCMotor::getReference(){
  76              		.loc 2 168 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.LVL3:
 169:src/DCMotor.cpp **** 	return speed;
 170:src/DCMotor.cpp **** }
  82              		.loc 2 170 0
  83 0004 8068     		ldr	r0, [r0, #8]	@ float
  84              	.LVL4:
  85 0006 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE40:
  88              		.cantunwind
  89              		.fnend
  91              		.align	1
  92              		.global	_ZN7DCMotor9motorNameEv
  93              		.thumb
  94              		.thumb_func
  96              	_ZN7DCMotor9motorNameEv:
  97              		.fnstart
  98              	.LFB41:
 171:src/DCMotor.cpp **** 
 172:src/DCMotor.cpp **** char* DCMotor::motorName(){
  99              		.loc 2 172 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL5:
 173:src/DCMotor.cpp **** 	return m_settings->m_motorName;
 105              		.loc 2 173 0
 106 0008 4368     		ldr	r3, [r0, #4]
 174:src/DCMotor.cpp **** }
 107              		.loc 2 174 0
 108 000a 5868     		ldr	r0, [r3, #4]
 109              	.LVL6:
 110 000c 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE41:
 113              		.cantunwind
 114              		.fnend
 116              		.align	1
 117              		.global	_ZN7DCMotorD2Ev
 118              		.thumb
 119              		.thumb_func
 121              	_ZN7DCMotorD2Ev:
 122              		.fnstart
 123              	.LFB34:
  15:src/DCMotor.cpp **** {
 124              		.loc 2 15 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL7:
 129 000e 10B5     		push	{r4, lr}
 130              		.save {r4, lr}
 131              	.LCFI0:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 4, -8
 134              		.cfi_offset 14, -4
  15:src/DCMotor.cpp **** {
 135              		.loc 2 15 0
 136 0010 0446     		mov	r4, r0
 137              	.LBB4:
 138 0012 034B     		ldr	r3, .L6
 139 0014 0360     		str	r3, [r0]
 140 0016 FFF7FEFF 		bl	_ZN5motorD2Ev
 141              	.LVL8:
 142              	.LBE4:
  17:src/DCMotor.cpp **** 
 143              		.loc 2 17 0
 144 001a 2046     		mov	r0, r4
 145 001c 10BD     		pop	{r4, pc}
 146              	.LVL9:
 147              	.L7:
 148 001e 00BF     		.align	2
 149              	.L6:
 150 0020 08000000 		.word	.LANCHOR0+8
 151              		.cfi_endproc
 152              	.LFE34:
 153              		.fnend
 155              		.global	_ZN7DCMotorD1Ev
 156              		.thumb_set _ZN7DCMotorD1Ev,_ZN7DCMotorD2Ev
 157              		.align	1
 158              		.global	_ZN7DCMotorD0Ev
 159              		.thumb
 160              		.thumb_func
 162              	_ZN7DCMotorD0Ev:
 163              		.fnstart
 164              	.LFB36:
  15:src/DCMotor.cpp **** {
 165              		.loc 2 15 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              	.LVL10:
 170 0024 10B5     		push	{r4, lr}
 171              		.save {r4, lr}
 172              	.LCFI1:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 4, -8
 175              		.cfi_offset 14, -4
  15:src/DCMotor.cpp **** {
 176              		.loc 2 15 0
 177 0026 0446     		mov	r4, r0
  17:src/DCMotor.cpp **** 
 178              		.loc 2 17 0
 179 0028 FFF7FEFF 		bl	_ZN7DCMotorD1Ev
 180              	.LVL11:
 181 002c 2046     		mov	r0, r4
 182 002e FFF7FEFF 		bl	_ZdlPv
 183              	.LVL12:
 184 0032 2046     		mov	r0, r4
 185 0034 10BD     		pop	{r4, pc}
 186              		.cfi_endproc
 187              	.LFE36:
 188              		.fnend
 190              		.align	1
 191              		.global	_ZN7DCMotor9motorInitEv
 192              		.thumb
 193              		.thumb_func
 195              	_ZN7DCMotor9motorInitEv:
 196              		.fnstart
 197              	.LFB37:
  20:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 198              		.loc 2 20 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 32
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              	.LVL13:
 203 0036 70B5     		push	{r4, r5, r6, lr}
 204              		.save {r4, r5, r6, lr}
 205              	.LCFI2:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 4, -16
 208              		.cfi_offset 5, -12
 209              		.cfi_offset 6, -8
 210              		.cfi_offset 14, -4
 211 0038 0446     		mov	r4, r0
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 212              		.loc 2 23 0
 213 003a 4368     		ldr	r3, [r0, #4]
  20:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 214              		.loc 2 20 0
 215              		.pad #32
 216 003c 88B0     		sub	sp, sp, #32
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 48
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 219              		.loc 2 23 0
 220 003e 1A6A     		ldr	r2, [r3, #32]
  25:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 221              		.loc 2 25 0
 222 0040 0325     		movs	r5, #3
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 223              		.loc 2 24 0
 224 0042 1026     		movs	r6, #16
  26:src/DCMotor.cpp **** 
 225              		.loc 2 26 0
 226 0044 586A     		ldr	r0, [r3, #36]
 227              	.LVL14:
 228 0046 6946     		mov	r1, sp
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 229              		.loc 2 23 0
 230 0048 ADF80020 		strh	r2, [sp]	@ movhi
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 231              		.loc 2 24 0
 232 004c 8DF80360 		strb	r6, [sp, #3]
  25:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 233              		.loc 2 25 0
 234 0050 8DF80250 		strb	r5, [sp, #2]
  26:src/DCMotor.cpp **** 
 235              		.loc 2 26 0
 236 0054 FFF7FEFF 		bl	GPIO_Init
 237              	.LVL15:
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 238              		.loc 2 28 0
 239 0058 6368     		ldr	r3, [r4, #4]
  31:src/DCMotor.cpp **** 
 240              		.loc 2 31 0
 241 005a 6946     		mov	r1, sp
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 242              		.loc 2 28 0
 243 005c 1A6B     		ldr	r2, [r3, #48]
  31:src/DCMotor.cpp **** 
 244              		.loc 2 31 0
 245 005e 586B     		ldr	r0, [r3, #52]
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 246              		.loc 2 28 0
 247 0060 ADF80020 		strh	r2, [sp]	@ movhi
  29:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 248              		.loc 2 29 0
 249 0064 8DF80360 		strb	r6, [sp, #3]
  30:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 250              		.loc 2 30 0
 251 0068 8DF80250 		strb	r5, [sp, #2]
  31:src/DCMotor.cpp **** 
 252              		.loc 2 31 0
 253 006c FFF7FEFF 		bl	GPIO_Init
 254              	.LVL16:
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 255              		.loc 2 33 0
 256 0070 6368     		ldr	r3, [r4, #4]
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 257              		.loc 2 34 0
 258 0072 1426     		movs	r6, #20
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 259              		.loc 2 33 0
 260 0074 9A6A     		ldr	r2, [r3, #40]
  36:src/DCMotor.cpp **** 
 261              		.loc 2 36 0
 262 0076 D86A     		ldr	r0, [r3, #44]
 263 0078 6946     		mov	r1, sp
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 264              		.loc 2 33 0
 265 007a ADF80020 		strh	r2, [sp]	@ movhi
  35:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 266              		.loc 2 35 0
 267 007e 8DF80250 		strb	r5, [sp, #2]
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 268              		.loc 2 34 0
 269 0082 8DF80360 		strb	r6, [sp, #3]
  36:src/DCMotor.cpp **** 
 270              		.loc 2 36 0
 271 0086 FFF7FEFF 		bl	GPIO_Init
 272              	.LVL17:
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 273              		.loc 2 38 0
 274 008a 6368     		ldr	r3, [r4, #4]
  41:src/DCMotor.cpp **** 
 275              		.loc 2 41 0
 276 008c 6946     		mov	r1, sp
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 277              		.loc 2 38 0
 278 008e 9A6B     		ldr	r2, [r3, #56]
  41:src/DCMotor.cpp **** 
 279              		.loc 2 41 0
 280 0090 D86B     		ldr	r0, [r3, #60]
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 281              		.loc 2 38 0
 282 0092 ADF80020 		strh	r2, [sp]	@ movhi
  40:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 283              		.loc 2 40 0
 284 0096 8DF80250 		strb	r5, [sp, #2]
  39:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 285              		.loc 2 39 0
 286 009a 8DF80360 		strb	r6, [sp, #3]
  41:src/DCMotor.cpp **** 
 287              		.loc 2 41 0
 288 009e FFF7FEFF 		bl	GPIO_Init
 289              	.LVL18:
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 290              		.loc 2 43 0
 291 00a2 6368     		ldr	r3, [r4, #4]
  46:src/DCMotor.cpp **** 
 292              		.loc 2 46 0
 293 00a4 6946     		mov	r1, sp
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 294              		.loc 2 43 0
 295 00a6 1A6C     		ldr	r2, [r3, #64]
  46:src/DCMotor.cpp **** 
 296              		.loc 2 46 0
 297 00a8 586C     		ldr	r0, [r3, #68]
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 298              		.loc 2 43 0
 299 00aa ADF80020 		strh	r2, [sp]	@ movhi
  44:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 300              		.loc 2 44 0
 301 00ae 1822     		movs	r2, #24
 302 00b0 8DF80320 		strb	r2, [sp, #3]
  45:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 303              		.loc 2 45 0
 304 00b4 8DF80250 		strb	r5, [sp, #2]
  46:src/DCMotor.cpp **** 
 305              		.loc 2 46 0
 306 00b8 FFF7FEFF 		bl	GPIO_Init
 307              	.LVL19:
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 308              		.loc 2 49 0
 309 00bc 6368     		ldr	r3, [r4, #4]
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 310              		.loc 2 53 0
 311 00be 0025     		movs	r5, #0
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 312              		.loc 2 49 0
 313 00c0 9868     		ldr	r0, [r3, #8]
 314 00c2 3A4B     		ldr	r3, .L22
  57:src/DCMotor.cpp **** 
 315              		.loc 2 57 0
 316 00c4 01A9     		add	r1, sp, #4
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 317              		.loc 2 49 0
 318 00c6 9842     		cmp	r0, r3
  50:src/DCMotor.cpp **** 	else
 319              		.loc 2 50 0
 320 00c8 0CBF     		ite	eq
 321 00ca 47F27E03 		movweq	r3, #28798
  52:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 322              		.loc 2 52 0
 323 00ce 43F63F03 		movwne	r3, #14399
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 324              		.loc 2 53 0
 325 00d2 ADF80450 		strh	r5, [sp, #4]	@ movhi
  52:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 326              		.loc 2 52 0
 327 00d6 ADF80830 		strh	r3, [sp, #8]	@ movhi
  54:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 328              		.loc 2 54 0
 329 00da ADF80A50 		strh	r5, [sp, #10]	@ movhi
  55:src/DCMotor.cpp **** 
 330              		.loc 2 55 0
 331 00de ADF80650 		strh	r5, [sp, #6]	@ movhi
  57:src/DCMotor.cpp **** 
 332              		.loc 2 57 0
 333 00e2 FFF7FEFF 		bl	TIM_TimeBaseInit
 334              	.LVL20:
  60:src/DCMotor.cpp **** 
 335              		.loc 2 60 0
 336 00e6 04A8     		add	r0, sp, #16
 337 00e8 FFF7FEFF 		bl	TIM_OCStructInit
 338              	.LVL21:
  62:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 339              		.loc 2 62 0
 340 00ec 6023     		movs	r3, #96
 341 00ee ADF81030 		strh	r3, [sp, #16]	@ movhi
  63:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
 342              		.loc 2 63 0
 343 00f2 0123     		movs	r3, #1
 344 00f4 ADF81230 		strh	r3, [sp, #18]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 345              		.loc 2 67 0
 346 00f8 6368     		ldr	r3, [r4, #4]
  64:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 347              		.loc 2 64 0
 348 00fa ADF81650 		strh	r5, [sp, #22]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 349              		.loc 2 67 0
 350 00fe DA68     		ldr	r2, [r3, #12]
  65:src/DCMotor.cpp **** 
 351              		.loc 2 65 0
 352 0100 ADF81850 		strh	r5, [sp, #24]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 353              		.loc 2 67 0
 354 0104 013A     		subs	r2, r2, #1
 355 0106 032A     		cmp	r2, #3
 356 0108 4CD8     		bhi	.L19
 357 010a DFE802F0 		tbb	[pc, r2]
 358              	.L14:
 359 010e 02       		.byte	(.L13-.L14)/2
 360 010f 0C       		.byte	(.L15-.L14)/2
 361 0110 16       		.byte	(.L16-.L14)/2
 362 0111 20       		.byte	(.L17-.L14)/2
 363              		.p2align 1
 364              	.L13:
  69:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 365              		.loc 2 69 0
 366 0112 04A9     		add	r1, sp, #16
 367 0114 9868     		ldr	r0, [r3, #8]
 368 0116 FFF7FEFF 		bl	TIM_OC1Init
 369              	.LVL22:
  70:src/DCMotor.cpp **** 			break;
 370              		.loc 2 70 0
 371 011a 6368     		ldr	r3, [r4, #4]
 372 011c 0821     		movs	r1, #8
 373 011e 9868     		ldr	r0, [r3, #8]
 374 0120 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 375              	.LVL23:
 376 0124 1CE0     		b	.L18
 377              	.L15:
  73:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 378              		.loc 2 73 0
 379 0126 04A9     		add	r1, sp, #16
 380 0128 9868     		ldr	r0, [r3, #8]
 381 012a FFF7FEFF 		bl	TIM_OC2Init
 382              	.LVL24:
  74:src/DCMotor.cpp **** 			break;
 383              		.loc 2 74 0
 384 012e 6368     		ldr	r3, [r4, #4]
 385 0130 0821     		movs	r1, #8
 386 0132 9868     		ldr	r0, [r3, #8]
 387 0134 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 388              	.LVL25:
 389 0138 12E0     		b	.L18
 390              	.L16:
  77:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 391              		.loc 2 77 0
 392 013a 04A9     		add	r1, sp, #16
 393 013c 9868     		ldr	r0, [r3, #8]
 394 013e FFF7FEFF 		bl	TIM_OC3Init
 395              	.LVL26:
  78:src/DCMotor.cpp **** 			break;
 396              		.loc 2 78 0
 397 0142 6368     		ldr	r3, [r4, #4]
 398 0144 0821     		movs	r1, #8
 399 0146 9868     		ldr	r0, [r3, #8]
 400 0148 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 401              	.LVL27:
 402 014c 08E0     		b	.L18
 403              	.L17:
  81:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 404              		.loc 2 81 0
 405 014e 9868     		ldr	r0, [r3, #8]
 406 0150 04A9     		add	r1, sp, #16
 407 0152 FFF7FEFF 		bl	TIM_OC4Init
 408              	.LVL28:
  82:src/DCMotor.cpp **** 			break;
 409              		.loc 2 82 0
 410 0156 6368     		ldr	r3, [r4, #4]
 411 0158 0821     		movs	r1, #8
 412 015a 9868     		ldr	r0, [r3, #8]
 413 015c FFF7FEFF 		bl	TIM_OC4PreloadConfig
 414              	.LVL29:
 415              	.L18:
  88:src/DCMotor.cpp **** 
 416              		.loc 2 88 0
 417 0160 6368     		ldr	r3, [r4, #4]
 418 0162 0121     		movs	r1, #1
 419 0164 9868     		ldr	r0, [r3, #8]
 420 0166 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 421              	.LVL30:
  90:src/DCMotor.cpp **** 
 422              		.loc 2 90 0
 423 016a 6368     		ldr	r3, [r4, #4]
 424 016c 0121     		movs	r1, #1
 425 016e 9868     		ldr	r0, [r3, #8]
 426 0170 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 427              	.LVL31:
  92:src/DCMotor.cpp **** 
 428              		.loc 2 92 0
 429 0174 6368     		ldr	r3, [r4, #4]
 430 0176 0121     		movs	r1, #1
 431 0178 9868     		ldr	r0, [r3, #8]
 432 017a FFF7FEFF 		bl	TIM_Cmd
 433              	.LVL32:
  95:src/DCMotor.cpp **** 
 434              		.loc 2 95 0
 435 017e 6368     		ldr	r3, [r4, #4]
 436              	.LVL33:
 108:src/DCMotor.cpp **** }
 437              		.loc 2 108 0
 438 0180 0120     		movs	r0, #1
 439              	.LBB5:
 440              	.LBB6:
 175:src/DCMotor.cpp **** 
 176:src/DCMotor.cpp **** void DCMotor::initEncoder(uint16_t addr){
 177:src/DCMotor.cpp **** 	encAddr = addr;
 441              		.loc 2 177 0
 442 0182 B3F84820 		ldrh	r2, [r3, #72]
 443 0186 2273     		strb	r2, [r4, #12]
 444              	.LVL34:
 445              	.LBE6:
 446              	.LBE5:
  98:src/DCMotor.cpp **** 	KI = m_settings->KI;
 447              		.loc 2 98 0
 448 0188 DA6C     		ldr	r2, [r3, #76]	@ float
 449 018a 6261     		str	r2, [r4, #20]	@ float
  99:src/DCMotor.cpp **** 	KD = m_settings->KD;
 450              		.loc 2 99 0
 451 018c 1A6D     		ldr	r2, [r3, #80]	@ float
 452 018e A261     		str	r2, [r4, #24]	@ float
 100:src/DCMotor.cpp **** 	integralSaturation = m_settings->integralSaturation;
 453              		.loc 2 100 0
 454 0190 5A6D     		ldr	r2, [r3, #84]	@ float
 455 0192 E261     		str	r2, [r4, #28]	@ float
 101:src/DCMotor.cpp **** 
 456              		.loc 2 101 0
 457 0194 9A6D     		ldr	r2, [r3, #88]	@ float
 106:src/DCMotor.cpp **** 
 458              		.loc 2 106 0
 459 0196 DB6D     		ldr	r3, [r3, #92]	@ float
 101:src/DCMotor.cpp **** 
 460              		.loc 2 101 0
 461 0198 2262     		str	r2, [r4, #32]	@ float
 103:src/DCMotor.cpp **** 	error = 0;
 462              		.loc 2 103 0
 463 019a 0022     		movs	r2, #0
 464 019c A262     		str	r2, [r4, #40]	@ float
 104:src/DCMotor.cpp **** 
 465              		.loc 2 104 0
 466 019e 6262     		str	r2, [r4, #36]	@ float
 106:src/DCMotor.cpp **** 
 467              		.loc 2 106 0
 468 01a0 2361     		str	r3, [r4, #16]	@ float
 108:src/DCMotor.cpp **** }
 469              		.loc 2 108 0
 470 01a2 00E0     		b	.L12
 471              	.L19:
  85:src/DCMotor.cpp **** 	}
 472              		.loc 2 85 0
 473 01a4 0020     		movs	r0, #0
 474              	.L12:
 109:src/DCMotor.cpp **** 
 475              		.loc 2 109 0
 476 01a6 08B0     		add	sp, sp, #32
 477              	.LCFI4:
 478              		.cfi_def_cfa_offset 16
 479              		@ sp needed
 480 01a8 70BD     		pop	{r4, r5, r6, pc}
 481              	.LVL35:
 482              	.L23:
 483 01aa 00BF     		.align	2
 484              	.L22:
 485 01ac 002C0140 		.word	1073818624
 486              		.cfi_endproc
 487              	.LFE37:
 488              		.fnend
 490              		.align	1
 491              		.global	_ZN7DCMotorC2EP13motorSettings
 492              		.thumb
 493              		.thumb_func
 495              	_ZN7DCMotorC2EP13motorSettings:
 496              		.fnstart
 497              	.LFB31:
  10:src/DCMotor.cpp **** {
 498              		.loc 2 10 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 0
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502              	.LVL36:
 503 01b0 10B5     		push	{r4, lr}
 504              		.save {r4, lr}
 505              	.LCFI5:
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 4, -8
 508              		.cfi_offset 14, -4
  10:src/DCMotor.cpp **** {
 509              		.loc 2 10 0
 510 01b2 0446     		mov	r4, r0
 511              	.LBB7:
 512 01b4 FFF7FEFF 		bl	_ZN5motorC2EP13motorSettings
 513              	.LVL37:
 514 01b8 014B     		ldr	r3, .L25
 515              	.LBE7:
  13:src/DCMotor.cpp **** 
 516              		.loc 2 13 0
 517 01ba 2046     		mov	r0, r4
 518              	.LBB8:
  10:src/DCMotor.cpp **** {
 519              		.loc 2 10 0
 520 01bc 2360     		str	r3, [r4]
 521              	.LBE8:
  13:src/DCMotor.cpp **** 
 522              		.loc 2 13 0
 523 01be 10BD     		pop	{r4, pc}
 524              	.LVL38:
 525              	.L26:
 526              		.align	2
 527              	.L25:
 528 01c0 08000000 		.word	.LANCHOR0+8
 529              		.cfi_endproc
 530              	.LFE31:
 531              		.fnend
 533              		.global	_ZN7DCMotorC1EP13motorSettings
 534              		.thumb_set _ZN7DCMotorC1EP13motorSettings,_ZN7DCMotorC2EP13motorSettings
 535              		.align	1
 536              		.global	_ZN7DCMotor8setSpeedEi
 537              		.thumb
 538              		.thumb_func
 540              	_ZN7DCMotor8setSpeedEi:
 541              		.fnstart
 542              	.LFB39:
 116:src/DCMotor.cpp **** 	if(s < 0)
 543              		.loc 2 116 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              	.LVL39:
 548 01c4 38B5     		push	{r3, r4, r5, lr}
 549              		.save {r3, r4, r5, lr}
 550              	.LCFI6:
 551              		.cfi_def_cfa_offset 16
 552              		.cfi_offset 3, -16
 553              		.cfi_offset 4, -12
 554              		.cfi_offset 5, -8
 555              		.cfi_offset 14, -4
 117:src/DCMotor.cpp **** 		s = 0;
 556              		.loc 2 117 0
 557 01c6 0C1E     		subs	r4, r1, #0
 116:src/DCMotor.cpp **** 	if(s < 0)
 558              		.loc 2 116 0
 559 01c8 0546     		mov	r5, r0
 560 01ca 4368     		ldr	r3, [r0, #4]
 117:src/DCMotor.cpp **** 		s = 0;
 561              		.loc 2 117 0
 562 01cc 1ADB     		blt	.L28
 120:src/DCMotor.cpp **** 		s = PERIOD;
 563              		.loc 2 120 0
 564 01ce B4F5615F 		cmp	r4, #14400
 565 01d2 01DA     		bge	.L38
 123:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 566              		.loc 2 123 0
 567 01d4 14B9     		cbnz	r4, .L29
 568 01d6 15E0     		b	.L28
 569              	.L38:
 121:src/DCMotor.cpp **** 
 570              		.loc 2 121 0
 571 01d8 43F63F04 		movw	r4, #14399
 572              	.L29:
 573              	.LVL40:
 124:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 574              		.loc 2 124 0
 575 01dc 198D     		ldrh	r1, [r3, #40]
 576 01de D86A     		ldr	r0, [r3, #44]
 577              	.LVL41:
 578 01e0 FFF7FEFF 		bl	GPIO_SetBits
 579              	.LVL42:
 125:src/DCMotor.cpp **** 
 580              		.loc 2 125 0
 581 01e4 6B68     		ldr	r3, [r5, #4]
 582 01e6 198F     		ldrh	r1, [r3, #56]
 583 01e8 D86B     		ldr	r0, [r3, #60]
 584 01ea FFF7FEFF 		bl	GPIO_SetBits
 585              	.LVL43:
 128:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 586              		.loc 2 128 0
 587 01ee 6B68     		ldr	r3, [r5, #4]
 588 01f0 198C     		ldrh	r1, [r3, #32]
 589 01f2 586A     		ldr	r0, [r3, #36]
 590 01f4 FFF7FEFF 		bl	GPIO_SetBits
 591              	.LVL44:
 129:src/DCMotor.cpp **** 		}else if(s < 0){
 592              		.loc 2 129 0
 593 01f8 6B68     		ldr	r3, [r5, #4]
 594 01fa 198E     		ldrh	r1, [r3, #48]
 595 01fc 586B     		ldr	r0, [r3, #52]
 596 01fe FFF7FEFF 		bl	GPIO_ResetBits
 597              	.LVL45:
 598 0202 13E0     		b	.L30
 599              	.LVL46:
 600              	.L28:
 137:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 601              		.loc 2 137 0
 602 0204 198D     		ldrh	r1, [r3, #40]
 603 0206 D86A     		ldr	r0, [r3, #44]
 604              	.LVL47:
 605 0208 FFF7FEFF 		bl	GPIO_SetBits
 606              	.LVL48:
 138:src/DCMotor.cpp **** 
 607              		.loc 2 138 0
 608 020c 6B68     		ldr	r3, [r5, #4]
 142:src/DCMotor.cpp **** 	}
 609              		.loc 2 142 0
 610 020e 0024     		movs	r4, #0
 138:src/DCMotor.cpp **** 
 611              		.loc 2 138 0
 612 0210 198F     		ldrh	r1, [r3, #56]
 613 0212 D86B     		ldr	r0, [r3, #60]
 614 0214 FFF7FEFF 		bl	GPIO_SetBits
 615              	.LVL49:
 141:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 616              		.loc 2 141 0
 617 0218 6B68     		ldr	r3, [r5, #4]
 618 021a 198C     		ldrh	r1, [r3, #32]
 619 021c 586A     		ldr	r0, [r3, #36]
 620 021e FFF7FEFF 		bl	GPIO_ResetBits
 621              	.LVL50:
 142:src/DCMotor.cpp **** 	}
 622              		.loc 2 142 0
 623 0222 6B68     		ldr	r3, [r5, #4]
 624 0224 198E     		ldrh	r1, [r3, #48]
 625 0226 586B     		ldr	r0, [r3, #52]
 626 0228 FFF7FEFF 		bl	GPIO_ResetBits
 627              	.LVL51:
 628              	.L30:
 145:src/DCMotor.cpp **** 		s = s*2;
 629              		.loc 2 145 0
 630 022c 6A68     		ldr	r2, [r5, #4]
 631 022e 0F49     		ldr	r1, .L44
 632 0230 9368     		ldr	r3, [r2, #8]
 148:src/DCMotor.cpp **** 		case 1:
 633              		.loc 2 148 0
 634 0232 D268     		ldr	r2, [r2, #12]
 145:src/DCMotor.cpp **** 		s = s*2;
 635              		.loc 2 145 0
 636 0234 8B42     		cmp	r3, r1
 148:src/DCMotor.cpp **** 		case 1:
 637              		.loc 2 148 0
 638 0236 02F1FF32 		add	r2, r2, #-1
 146:src/DCMotor.cpp **** 
 639              		.loc 2 146 0
 640 023a 08BF     		it	eq
 641 023c 6400     		lsleq	r4, r4, #1
 642              	.LVL52:
 148:src/DCMotor.cpp **** 		case 1:
 643              		.loc 2 148 0
 644 023e 032A     		cmp	r2, #3
 645 0240 11D8     		bhi	.L39
 646 0242 DFE802F0 		tbb	[pc, r2]
 647              	.L34:
 648 0246 02       		.byte	(.L33-.L34)/2
 649 0247 05       		.byte	(.L35-.L34)/2
 650 0248 08       		.byte	(.L36-.L34)/2
 651 0249 0C       		.byte	(.L37-.L34)/2
 652              		.p2align 1
 653              	.L33:
 150:src/DCMotor.cpp **** 			break;
 654              		.loc 2 150 0
 655 024a A4B2     		uxth	r4, r4
 656              	.LVL53:
 657 024c 9C86     		strh	r4, [r3, #52]	@ movhi
 658 024e 04E0     		b	.L43
 659              	.LVL54:
 660              	.L35:
 153:src/DCMotor.cpp **** 			break;
 661              		.loc 2 153 0
 662 0250 A4B2     		uxth	r4, r4
 663              	.LVL55:
 664 0252 1C87     		strh	r4, [r3, #56]	@ movhi
 665 0254 01E0     		b	.L43
 666              	.LVL56:
 667              	.L36:
 156:src/DCMotor.cpp **** 			break;
 668              		.loc 2 156 0
 669 0256 A4B2     		uxth	r4, r4
 670              	.LVL57:
 671 0258 9C87     		strh	r4, [r3, #60]	@ movhi
 672              	.L43:
 165:src/DCMotor.cpp **** }
 673              		.loc 2 165 0
 674 025a 0120     		movs	r0, #1
 157:src/DCMotor.cpp **** 		case 4:
 675              		.loc 2 157 0
 676 025c 38BD     		pop	{r3, r4, r5, pc}
 677              	.LVL58:
 678              	.L37:
 159:src/DCMotor.cpp **** 			break;
 679              		.loc 2 159 0
 680 025e A4B2     		uxth	r4, r4
 681              	.LVL59:
 682 0260 A3F84040 		strh	r4, [r3, #64]	@ movhi
 683 0264 F9E7     		b	.L43
 684              	.LVL60:
 685              	.L39:
 162:src/DCMotor.cpp **** 	}
 686              		.loc 2 162 0
 687 0266 0020     		movs	r0, #0
 166:src/DCMotor.cpp **** 
 688              		.loc 2 166 0
 689 0268 38BD     		pop	{r3, r4, r5, pc}
 690              	.LVL61:
 691              	.L45:
 692 026a 00BF     		.align	2
 693              	.L44:
 694 026c 002C0140 		.word	1073818624
 695              		.cfi_endproc
 696              	.LFE39:
 697              		.fnend
 699              		.align	1
 700              		.global	_ZN7DCMotor11initEncoderEt
 701              		.thumb
 702              		.thumb_func
 704              	_ZN7DCMotor11initEncoderEt:
 705              		.fnstart
 706              	.LFB42:
 176:src/DCMotor.cpp **** 	encAddr = addr;
 707              		.loc 2 176 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712              	.LVL62:
 713              		.loc 2 177 0
 714 0270 0173     		strb	r1, [r0, #12]
 715 0272 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE42:
 718              		.cantunwind
 719              		.fnend
 721              		.align	1
 722              		.global	_ZN7DCMotor11readEncoderEv
 723              		.thumb
 724              		.thumb_func
 726              	_ZN7DCMotor11readEncoderEv:
 727              		.fnstart
 728              	.LFB43:
 178:src/DCMotor.cpp **** }
 179:src/DCMotor.cpp **** 
 180:src/DCMotor.cpp **** int32_t DCMotor::readEncoder(){
 729              		.loc 2 180 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              	.LVL63:
 734 0274 10B5     		push	{r4, lr}
 735              		.save {r4, lr}
 736              	.LCFI7:
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 4, -8
 739              		.cfi_offset 14, -4
 181:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 740              		.loc 2 181 0
 741 0276 134B     		ldr	r3, .L50
 742 0278 0422     		movs	r2, #4
 182:src/DCMotor.cpp ****     Rx_Idx = 0x00;
 743              		.loc 2 182 0
 744 027a 134C     		ldr	r4, .L50+4
 181:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 745              		.loc 2 181 0
 746 027c 1A70     		strb	r2, [r3]
 747              		.loc 2 182 0
 748 027e 0023     		movs	r3, #0
 183:src/DCMotor.cpp **** 
 184:src/DCMotor.cpp ****     slaveAddress = encAddr;
 749              		.loc 2 184 0
 750 0280 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 182:src/DCMotor.cpp ****     Rx_Idx = 0x00;
 751              		.loc 2 182 0
 752 0282 2370     		strb	r3, [r4]
 753              		.loc 2 184 0
 754 0284 114B     		ldr	r3, .L50+8
 185:src/DCMotor.cpp ****     
 186:src/DCMotor.cpp ****     I2C_ITConfig(I2C1, I2C_IT_EVT , ENABLE);
 755              		.loc 2 186 0
 756 0286 4FF40071 		mov	r1, #512
 184:src/DCMotor.cpp ****     
 757              		.loc 2 184 0
 758 028a 1A70     		strb	r2, [r3]
 759              		.loc 2 186 0
 760 028c 1048     		ldr	r0, .L50+12
 761              	.LVL64:
 762 028e 0122     		movs	r2, #1
 763 0290 FFF7FEFF 		bl	I2C_ITConfig
 764              	.LVL65:
 187:src/DCMotor.cpp ****     I2C_AcknowledgeConfig(I2C1, ENABLE);
 765              		.loc 2 187 0
 766 0294 0121     		movs	r1, #1
 767 0296 0E48     		ldr	r0, .L50+12
 768 0298 FFF7FEFF 		bl	I2C_AcknowledgeConfig
 769              	.LVL66:
 188:src/DCMotor.cpp ****     I2C_GenerateSTART(I2C1, ENABLE);
 770              		.loc 2 188 0
 771 029c 0121     		movs	r1, #1
 772 029e 0C48     		ldr	r0, .L50+12
 773 02a0 FFF7FEFF 		bl	I2C_GenerateSTART
 774              	.LVL67:
 775              	.L48:
 189:src/DCMotor.cpp **** 
 190:src/DCMotor.cpp **** 
 191:src/DCMotor.cpp ****     // TODO: Add timeout here
 192:src/DCMotor.cpp ****     while ((Rx_Idx < RXBUFFERSIZE)); 
 776              		.loc 2 192 0
 777 02a4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 778 02a6 032B     		cmp	r3, #3
 779 02a8 FCD9     		bls	.L48
 193:src/DCMotor.cpp **** 
 194:src/DCMotor.cpp ****     return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
 780              		.loc 2 194 0
 781 02aa 0A4A     		ldr	r2, .L50+16
 782 02ac 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 783 02ae 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 784 02b0 1B04     		lsls	r3, r3, #16
 785 02b2 43EA0063 		orr	r3, r3, r0, lsl #24
 786 02b6 D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
 787 02b8 0343     		orrs	r3, r3, r0
 788 02ba 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 195:src/DCMotor.cpp **** }
 789              		.loc 2 195 0
 790 02bc 43EA0020 		orr	r0, r3, r0, lsl #8
 791 02c0 10BD     		pop	{r4, pc}
 792              	.L51:
 793 02c2 00BF     		.align	2
 794              	.L50:
 795 02c4 00000000 		.word	NumberOfByteToReceive
 796 02c8 00000000 		.word	Rx_Idx
 797 02cc 00000000 		.word	slaveAddress
 798 02d0 00540040 		.word	1073763328
 799 02d4 00000000 		.word	RxBuffer
 800              		.cfi_endproc
 801              	.LFE43:
 802              		.fnend
 804              		.global	__aeabi_fsub
 805              		.global	__aeabi_fmul
 806              		.global	__aeabi_fadd
 807              		.global	__aeabi_fcmpgt
 808              		.global	__aeabi_fcmplt
 809              		.global	__aeabi_fdiv
 810              		.align	1
 811              		.global	_ZN7DCMotor15updateRegulatorEff
 812              		.thumb
 813              		.thumb_func
 815              	_ZN7DCMotor15updateRegulatorEff:
 816              		.fnstart
 817              	.LFB44:
 196:src/DCMotor.cpp **** 
 197:src/DCMotor.cpp **** float DCMotor::updateRegulator(float enc, float dt){
 818              		.loc 2 197 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 822              	.LVL68:
 823 02d8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 824              	.LCFI8:
 825              		.cfi_def_cfa_offset 24
 826              		.cfi_offset 4, -24
 827              		.cfi_offset 5, -20
 828              		.cfi_offset 6, -16
 829              		.cfi_offset 7, -12
 830              		.cfi_offset 8, -8
 831              		.cfi_offset 14, -4
 832              		.loc 2 197 0
 833 02dc 0446     		mov	r4, r0
 834 02de 1746     		mov	r7, r2
 198:src/DCMotor.cpp **** 	float error_new = speed-enc;
 835              		.loc 2 198 0
 836 02e0 8068     		ldr	r0, [r0, #8]	@ float
 837              	.LVL69:
 838 02e2 FFF7FEFF 		bl	__aeabi_fsub
 839              	.LVL70:
 199:src/DCMotor.cpp **** 	
 200:src/DCMotor.cpp **** 	integral += error_new*dt;
 840              		.loc 2 200 0
 841 02e6 3946     		mov	r1, r7
 198:src/DCMotor.cpp **** 	float error_new = speed-enc;
 842              		.loc 2 198 0
 843 02e8 0646     		mov	r6, r0
 844              	.LVL71:
 845              		.loc 2 200 0
 846 02ea FFF7FEFF 		bl	__aeabi_fmul
 847              	.LVL72:
 848 02ee A16A     		ldr	r1, [r4, #40]	@ float
 849 02f0 FFF7FEFF 		bl	__aeabi_fadd
 850              	.LVL73:
 201:src/DCMotor.cpp **** 	if (integral > integralSaturation){
 851              		.loc 2 201 0
 852 02f4 256A     		ldr	r5, [r4, #32]	@ float
 200:src/DCMotor.cpp **** 	if (integral > integralSaturation){
 853              		.loc 2 200 0
 854 02f6 A062     		str	r0, [r4, #40]	@ float
 855              		.loc 2 201 0
 856 02f8 2946     		mov	r1, r5
 200:src/DCMotor.cpp **** 	if (integral > integralSaturation){
 857              		.loc 2 200 0
 858 02fa 8046     		mov	r8, r0
 859              		.loc 2 201 0
 860 02fc FFF7FEFF 		bl	__aeabi_fcmpgt
 861              	.LVL74:
 862 0300 30B9     		cbnz	r0, .L60
 202:src/DCMotor.cpp **** 		integral = integralSaturation;
 203:src/DCMotor.cpp **** 	}else if (integral < -integralSaturation){
 863              		.loc 2 203 0
 864 0302 05F10045 		add	r5, r5, #-2147483648
 865 0306 2946     		mov	r1, r5
 866 0308 4046     		mov	r0, r8
 867 030a FFF7FEFF 		bl	__aeabi_fcmplt
 868              	.LVL75:
 869 030e 00B1     		cbz	r0, .L55
 870              	.L60:
 204:src/DCMotor.cpp **** 		integral = -integralSaturation;
 871              		.loc 2 204 0
 872 0310 A562     		str	r5, [r4, #40]	@ float
 873              	.L55:
 205:src/DCMotor.cpp **** 	}
 206:src/DCMotor.cpp **** 	
 207:src/DCMotor.cpp **** 	float derivative = (error_new-error)/dt;
 208:src/DCMotor.cpp **** 	float output = (KP*error + KI*integral + KD*derivative);
 874              		.loc 2 208 0
 875 0312 A16A     		ldr	r1, [r4, #40]	@ float
 876 0314 A069     		ldr	r0, [r4, #24]	@ float
 877 0316 FFF7FEFF 		bl	__aeabi_fmul
 878              	.LVL76:
 207:src/DCMotor.cpp **** 	float output = (KP*error + KI*integral + KD*derivative);
 879              		.loc 2 207 0
 880 031a 656A     		ldr	r5, [r4, #36]	@ float
 881              	.LVL77:
 882              		.loc 2 208 0
 883 031c 8046     		mov	r8, r0
 884 031e 6169     		ldr	r1, [r4, #20]	@ float
 885 0320 2846     		mov	r0, r5
 886 0322 FFF7FEFF 		bl	__aeabi_fmul
 887              	.LVL78:
 888 0326 0146     		mov	r1, r0
 889 0328 4046     		mov	r0, r8
 890 032a FFF7FEFF 		bl	__aeabi_fadd
 891              	.LVL79:
 892 032e 2946     		mov	r1, r5
 893 0330 8046     		mov	r8, r0
 894 0332 3046     		mov	r0, r6
 895 0334 FFF7FEFF 		bl	__aeabi_fsub
 896              	.LVL80:
 897 0338 3946     		mov	r1, r7
 898 033a FFF7FEFF 		bl	__aeabi_fdiv
 899              	.LVL81:
 900 033e E169     		ldr	r1, [r4, #28]	@ float
 901 0340 FFF7FEFF 		bl	__aeabi_fmul
 902              	.LVL82:
 903 0344 0146     		mov	r1, r0
 904 0346 4046     		mov	r0, r8
 905 0348 FFF7FEFF 		bl	__aeabi_fadd
 906              	.LVL83:
 209:src/DCMotor.cpp **** 	error = error_new;
 907              		.loc 2 209 0
 908 034c 6662     		str	r6, [r4, #36]	@ float
 210:src/DCMotor.cpp **** 	return output;
 211:src/DCMotor.cpp **** }
 909              		.loc 2 211 0
 910 034e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 911              		.cfi_endproc
 912              	.LFE44:
 913              		.cantunwind
 914              		.fnend
 916              		.global	__aeabi_i2d
 917              		.global	__aeabi_dmul
 918              		.global	__aeabi_d2f
 919              		.global	__aeabi_f2iz
 920              		.align	1
 921              		.global	_ZN7DCMotor6updateEf
 922              		.thumb
 923              		.thumb_func
 925              	_ZN7DCMotor6updateEf:
 926              		.fnstart
 927              	.LFB45:
 212:src/DCMotor.cpp **** 
 213:src/DCMotor.cpp **** float DCMotor::update(float dt){
 928              		.loc 2 213 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 0
 931              		@ frame_needed = 0, uses_anonymous_args = 0
 932              	.LVL84:
 933 0352 70B5     		push	{r4, r5, r6, lr}
 934              		.save {r4, r5, r6, lr}
 935              	.LCFI9:
 936              		.cfi_def_cfa_offset 16
 937              		.cfi_offset 4, -16
 938              		.cfi_offset 5, -12
 939              		.cfi_offset 6, -8
 940              		.cfi_offset 14, -4
 941              		.loc 2 213 0
 942 0354 0446     		mov	r4, r0
 943 0356 0E46     		mov	r6, r1
 214:src/DCMotor.cpp **** 	// Read encoder
 215:src/DCMotor.cpp **** 	float encSpeed = readEncoder()*0.04793689962;		// rad/s
 944              		.loc 2 215 0
 945 0358 FFF7FEFF 		bl	_ZN7DCMotor11readEncoderEv
 946              	.LVL85:
 216:src/DCMotor.cpp **** 	float speed_si = encSpeed * wheelRadius;	// m/s
 947              		.loc 2 216 0
 948 035c FFF7FEFF 		bl	__aeabi_i2d
 949              	.LVL86:
 950 0360 0BA3     		adr	r3, .L62
 951 0362 D3E90023 		ldrd	r2, [r3]
 952 0366 FFF7FEFF 		bl	__aeabi_dmul
 953              	.LVL87:
 954 036a FFF7FEFF 		bl	__aeabi_d2f
 955              	.LVL88:
 956 036e 2169     		ldr	r1, [r4, #16]	@ float
 957 0370 FFF7FEFF 		bl	__aeabi_fmul
 958              	.LVL89:
 217:src/DCMotor.cpp **** 	// Update PID regulator
 218:src/DCMotor.cpp **** 	int s = (int) updateRegulator(speed_si, dt);		// m/s
 959              		.loc 2 218 0
 960 0374 3246     		mov	r2, r6
 961 0376 0146     		mov	r1, r0
 216:src/DCMotor.cpp **** 	float speed_si = encSpeed * wheelRadius;	// m/s
 962              		.loc 2 216 0
 963 0378 0546     		mov	r5, r0
 964              	.LVL90:
 965              		.loc 2 218 0
 966 037a 2046     		mov	r0, r4
 967              	.LVL91:
 968 037c FFF7FEFF 		bl	_ZN7DCMotor15updateRegulatorEff
 969              	.LVL92:
 219:src/DCMotor.cpp **** 	// Set motor speed to process value
 220:src/DCMotor.cpp **** 	setSpeed(s);		// m/s
 970              		.loc 2 220 0
 971 0380 FFF7FEFF 		bl	__aeabi_f2iz
 972              	.LVL93:
 973 0384 0146     		mov	r1, r0
 974 0386 2046     		mov	r0, r4
 975 0388 FFF7FEFF 		bl	_ZN7DCMotor8setSpeedEi
 976              	.LVL94:
 221:src/DCMotor.cpp **** 	// Return encoder values for publishing to localization
 222:src/DCMotor.cpp **** 	return speed_si;
 223:src/DCMotor.cpp **** }...
 977              		.loc 2 223 0
 978 038c 2846     		mov	r0, r5
 979 038e 70BD     		pop	{r4, r5, r6, pc}
 980              	.LVL95:
 981              	.L63:
 982              		.align	3
 983              	.L62:
 984 0390 1C714770 		.word	1883730204
 985 0394 2F8BA83F 		.word	1068010287
 986              		.cfi_endproc
 987              	.LFE45:
 988              		.fnend
 990              		.global	_ZTS7DCMotor
 991              		.global	_ZTI7DCMotor
 992              		.global	_ZTV7DCMotor
 993              		.section	.rodata
 994              		.align	2
 995              		.set	.LANCHOR0,. + 0
 998              	_ZTV7DCMotor:
 999 0000 00000000 		.word	0
 1000 0004 00000000 		.word	_ZTI7DCMotor
 1001 0008 00000000 		.word	_ZN7DCMotorD1Ev
 1002 000c 00000000 		.word	_ZN7DCMotorD0Ev
 1003 0010 00000000 		.word	_ZN7DCMotor9motorTypeEv
 1004 0014 00000000 		.word	_ZN7DCMotor9motorInitEv
 1005 0018 00000000 		.word	_ZN7DCMotor9motorNameEv
 1006 001c 00000000 		.word	_ZN7DCMotor12setReferenceEf
 1007 0020 00000000 		.word	_ZN7DCMotor12getReferenceEv
 1008 0024 00000000 		.word	_ZN7DCMotor6updateEf
 1011              	_ZTS7DCMotor:
 1012 0028 3744434D 		.ascii	"7DCMotor\000"
 1012      6F746F72 
 1012      00
 1013 0031 000000   		.space	3
 1016              	_ZTI7DCMotor:
 1017 0034 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 1018 0038 00000000 		.word	_ZTS7DCMotor
 1019 003c 00000000 		.word	_ZTI5motor
 1020              		.text
 1021              	.Letext0:
 1022              		.file 3 "/media/emil/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1023              		.file 4 "/media/emil/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1024              		.file 5 "./lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 1025              		.file 6 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1026              		.file 7 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 1027              		.file 8 "./inc/motorSettings.h"
 1028              		.file 9 "./lib/CMSIS/CM3/CoreSupport/core_cm3.h"
 1029              		.file 10 "./inc/encoder.h"
 1030              		.file 11 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
DEFINED SYMBOLS
                            *ABS*:00000000 DCMotor.cpp
     /tmp/cc0nvlGI.s:20     .text._ZN7DCMotor9motorTypeEv:00000000 $t
     /tmp/cc0nvlGI.s:25     .text._ZN7DCMotor9motorTypeEv:00000000 _ZN7DCMotor9motorTypeEv
.ARM.exidx.text._ZN7DCMotor9motorTypeEv:00000000 $d
     /tmp/cc0nvlGI.s:45     .text:00000000 $t
     /tmp/cc0nvlGI.s:50     .text:00000000 _ZN7DCMotor12setReferenceEf
                       .ARM.exidx:00000000 $d
     /tmp/cc0nvlGI.s:73     .text:00000004 _ZN7DCMotor12getReferenceEv
     /tmp/cc0nvlGI.s:96     .text:00000008 _ZN7DCMotor9motorNameEv
     /tmp/cc0nvlGI.s:121    .text:0000000e _ZN7DCMotorD2Ev
     /tmp/cc0nvlGI.s:150    .text:00000020 $d
     /tmp/cc0nvlGI.s:121    .text:0000000e _ZN7DCMotorD1Ev
     /tmp/cc0nvlGI.s:157    .text:00000024 $t
     /tmp/cc0nvlGI.s:162    .text:00000024 _ZN7DCMotorD0Ev
     /tmp/cc0nvlGI.s:195    .text:00000036 _ZN7DCMotor9motorInitEv
     /tmp/cc0nvlGI.s:359    .text:0000010e $d
     /tmp/cc0nvlGI.s:363    .text:00000112 $t
     /tmp/cc0nvlGI.s:485    .text:000001ac $d
     /tmp/cc0nvlGI.s:490    .text:000001b0 $t
     /tmp/cc0nvlGI.s:495    .text:000001b0 _ZN7DCMotorC2EP13motorSettings
     /tmp/cc0nvlGI.s:528    .text:000001c0 $d
     /tmp/cc0nvlGI.s:495    .text:000001b0 _ZN7DCMotorC1EP13motorSettings
     /tmp/cc0nvlGI.s:535    .text:000001c4 $t
     /tmp/cc0nvlGI.s:540    .text:000001c4 _ZN7DCMotor8setSpeedEi
     /tmp/cc0nvlGI.s:648    .text:00000246 $d
     /tmp/cc0nvlGI.s:652    .text:0000024a $t
     /tmp/cc0nvlGI.s:694    .text:0000026c $d
     /tmp/cc0nvlGI.s:699    .text:00000270 $t
     /tmp/cc0nvlGI.s:704    .text:00000270 _ZN7DCMotor11initEncoderEt
     /tmp/cc0nvlGI.s:726    .text:00000274 _ZN7DCMotor11readEncoderEv
     /tmp/cc0nvlGI.s:795    .text:000002c4 $d
     /tmp/cc0nvlGI.s:810    .text:000002d8 $t
     /tmp/cc0nvlGI.s:815    .text:000002d8 _ZN7DCMotor15updateRegulatorEff
     /tmp/cc0nvlGI.s:925    .text:00000352 _ZN7DCMotor6updateEf
     /tmp/cc0nvlGI.s:984    .text:00000390 $d
     /tmp/cc0nvlGI.s:1011   .rodata:00000028 _ZTS7DCMotor
     /tmp/cc0nvlGI.s:1016   .rodata:00000034 _ZTI7DCMotor
     /tmp/cc0nvlGI.s:998    .rodata:00000000 _ZTV7DCMotor
     /tmp/cc0nvlGI.s:994    .rodata:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN5motorD2Ev
__aeabi_unwind_cpp_pr0
_ZdlPv
GPIO_Init
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_ARRPreloadConfig
TIM_CtrlPWMOutputs
TIM_Cmd
_ZN5motorC2EP13motorSettings
GPIO_SetBits
GPIO_ResetBits
I2C_ITConfig
I2C_AcknowledgeConfig
I2C_GenerateSTART
NumberOfByteToReceive
Rx_Idx
slaveAddress
RxBuffer
__aeabi_fsub
__aeabi_fmul
__aeabi_fadd
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fdiv
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2iz
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI5motor
