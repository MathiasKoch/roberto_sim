   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"DCMotor.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN7DCMotor9motorTypeEv,"axG",%progbits,_ZN7DCMotor9motorTypeEv,comdat
  20              		.align	1
  21              		.weak	_ZN7DCMotor9motorTypeEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN7DCMotor9motorTypeEv:
  26              		.fnstart
  27              	.LFB1021:
  28              		.file 1 "./inc/DCMotor.h"
   1:./inc/DCMotor.h **** 
   2:./inc/DCMotor.h **** #ifndef _DCMotor_H
   3:./inc/DCMotor.h **** #define	_DCMotor_H
   4:./inc/DCMotor.h **** 
   5:./inc/DCMotor.h **** #include <stm32f10x.h>
   6:./inc/DCMotor.h **** #include <stdlib.h>
   7:./inc/DCMotor.h **** #include <stdio.h>
   8:./inc/DCMotor.h **** #include <string.h>
   9:./inc/DCMotor.h **** #include "motor.h"
  10:./inc/DCMotor.h **** #include "encoder.h"
  11:./inc/DCMotor.h **** #include "stm32_time.h"
  12:./inc/DCMotor.h **** 
  13:./inc/DCMotor.h **** 
  14:./inc/DCMotor.h **** class DCMotor : public motor
  15:./inc/DCMotor.h **** {
  16:./inc/DCMotor.h **** public:
  17:./inc/DCMotor.h ****     DCMotor(motorSettings *settings);
  18:./inc/DCMotor.h ****     ~DCMotor();
  19:./inc/DCMotor.h **** 
  20:./inc/DCMotor.h ****     virtual void setReference(float setPoint);
  21:./inc/DCMotor.h ****     virtual float getReference();
  22:./inc/DCMotor.h ****     virtual const char* motorName();
  23:./inc/DCMotor.h ****     virtual std::tuple<float, float, int, int> update(float dt, bool connected);
  24:./inc/DCMotor.h **** 
  25:./inc/DCMotor.h ****     virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
  29              		.loc 1 25 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              		.loc 1 25 0
  36 0000 0220     		movs	r0, #2
  37              	.LVL1:
  38 0002 7047     		bx	lr
  39              		.cfi_endproc
  40              	.LFE1021:
  41              		.cantunwind
  42              		.fnend
  44              		.text
  45              		.align	1
  46              		.global	_ZN7DCMotor12setReferenceEf
  47              		.thumb
  48              		.thumb_func
  50              	_ZN7DCMotor12setReferenceEf:
  51              		.fnstart
  52              	.LFB1030:
  53              		.file 2 "src/DCMotor.cpp"
   1:src/DCMotor.cpp **** 
   2:src/DCMotor.cpp **** #include "DCMotor.h"
   3:src/DCMotor.cpp **** #include "motorSettings.h"
   4:src/DCMotor.cpp **** 
   5:src/DCMotor.cpp **** #define PERIOD 14399
   6:src/DCMotor.cpp **** #define PRESCALER 0
   7:src/DCMotor.cpp **** #define CLOCKDIV 0
   8:src/DCMotor.cpp **** 
   9:src/DCMotor.cpp **** 
  10:src/DCMotor.cpp **** DCMotor::DCMotor(motorSettings *settings) : motor(settings)
  11:src/DCMotor.cpp **** {
  12:src/DCMotor.cpp **** 
  13:src/DCMotor.cpp **** }
  14:src/DCMotor.cpp **** 
  15:src/DCMotor.cpp **** DCMotor::~DCMotor()
  16:src/DCMotor.cpp **** {
  17:src/DCMotor.cpp **** }
  18:src/DCMotor.cpp **** 
  19:src/DCMotor.cpp **** bool DCMotor::motorInit()
  20:src/DCMotor.cpp **** {
  21:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
  22:src/DCMotor.cpp **** 
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  25:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  26:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
  27:src/DCMotor.cpp **** 
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
  29:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  30:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  31:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
  32:src/DCMotor.cpp **** 
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  35:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  36:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
  37:src/DCMotor.cpp **** 
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
  39:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  40:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  41:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
  42:src/DCMotor.cpp **** 
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
  44:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  45:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  46:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
  47:src/DCMotor.cpp **** 
  48:src/DCMotor.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  49:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
  50:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
  51:src/DCMotor.cpp **** 	else
  52:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD;
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
  54:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
  55:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  56:src/DCMotor.cpp **** 
  57:src/DCMotor.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
  58:src/DCMotor.cpp **** 
  59:src/DCMotor.cpp **** 	TIM_OCInitTypeDef TIM_OCInitStructure;
  60:src/DCMotor.cpp **** 	TIM_OCStructInit(&TIM_OCInitStructure);
  61:src/DCMotor.cpp **** 
  62:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  63:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  64:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
  65:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  66:src/DCMotor.cpp **** 
  67:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
  68:src/DCMotor.cpp **** 		case 1:
  69:src/DCMotor.cpp **** 			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
  70:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  71:src/DCMotor.cpp **** 			break;
  72:src/DCMotor.cpp **** 		case 2:
  73:src/DCMotor.cpp **** 			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
  74:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  75:src/DCMotor.cpp **** 			break;
  76:src/DCMotor.cpp **** 		case 3:
  77:src/DCMotor.cpp **** 			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
  78:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  79:src/DCMotor.cpp **** 			break;
  80:src/DCMotor.cpp **** 		case 4:
  81:src/DCMotor.cpp **** 			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
  82:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  83:src/DCMotor.cpp **** 			break;
  84:src/DCMotor.cpp **** 		default:
  85:src/DCMotor.cpp **** 			return false;
  86:src/DCMotor.cpp **** 	}
  87:src/DCMotor.cpp **** 
  88:src/DCMotor.cpp **** 	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
  89:src/DCMotor.cpp **** 
  90:src/DCMotor.cpp **** 	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
  91:src/DCMotor.cpp **** 
  92:src/DCMotor.cpp **** 	TIM_Cmd(m_settings->m_Timer, ENABLE);
  93:src/DCMotor.cpp **** 
  94:src/DCMotor.cpp **** 	// Initialize encoder
  95:src/DCMotor.cpp **** 	initEncoder(m_settings->encoderAddr);
  96:src/DCMotor.cpp **** 
  97:src/DCMotor.cpp **** 	integral = 0;
  98:src/DCMotor.cpp **** 	error = 0;
  99:src/DCMotor.cpp **** 
 100:src/DCMotor.cpp **** 	wheelRadius = m_settings->wheelRadius;
 101:src/DCMotor.cpp **** 
 102:src/DCMotor.cpp **** 	return true;
 103:src/DCMotor.cpp **** }
 104:src/DCMotor.cpp **** 
 105:src/DCMotor.cpp **** void DCMotor::setReference(float setPoint){
  54              		.loc 2 105 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.LVL2:
 106:src/DCMotor.cpp **** 	speed = setPoint;
  60              		.loc 2 106 0
  61 0000 8160     		str	r1, [r0, #8]	@ float
  62 0002 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE1030:
  65              		.cantunwind
  66              		.fnend
  68              		.align	1
  69              		.global	_ZN7DCMotor12getReferenceEv
  70              		.thumb
  71              		.thumb_func
  73              	_ZN7DCMotor12getReferenceEv:
  74              		.fnstart
  75              	.LFB1032:
 107:src/DCMotor.cpp **** 
 108:src/DCMotor.cpp **** }
 109:src/DCMotor.cpp **** 
 110:src/DCMotor.cpp **** bool DCMotor::setSpeed(int s){
 111:src/DCMotor.cpp **** 	if(s < -PERIOD)
 112:src/DCMotor.cpp **** 		s = -PERIOD;
 113:src/DCMotor.cpp **** 
 114:src/DCMotor.cpp **** 	if(s > PERIOD)
 115:src/DCMotor.cpp **** 		s = PERIOD;
 116:src/DCMotor.cpp **** 
 117:src/DCMotor.cpp **** 	if(abs(s) > 0){
 118:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 119:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 120:src/DCMotor.cpp **** 
 121:src/DCMotor.cpp **** 		if(s > 0){
 122:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 123:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 124:src/DCMotor.cpp **** 		}else if(s < 0){
 125:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 126:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 127:src/DCMotor.cpp **** 		}else{
 128:src/DCMotor.cpp **** 			return false;
 129:src/DCMotor.cpp **** 		}
 130:src/DCMotor.cpp **** 	}else{
 131:src/DCMotor.cpp **** 		s = 0;
 132:src/DCMotor.cpp **** 
 133:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 134:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 135:src/DCMotor.cpp **** 
 136:src/DCMotor.cpp **** 		// Break to GND
 137:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 138:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 139:src/DCMotor.cpp **** 	}
 140:src/DCMotor.cpp **** 	
 141:src/DCMotor.cpp **** 
 142:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
 143:src/DCMotor.cpp **** 		s = s * 2;
 144:src/DCMotor.cpp **** 
 145:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
 146:src/DCMotor.cpp **** 		case 1:
 147:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR1 = (uint32_t)abs(s);
 148:src/DCMotor.cpp **** 			break;
 149:src/DCMotor.cpp **** 		case 2:
 150:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR2 = (uint32_t)abs(s);
 151:src/DCMotor.cpp **** 			break;
 152:src/DCMotor.cpp **** 		case 3:
 153:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR3 = (uint32_t)abs(s);
 154:src/DCMotor.cpp **** 			break;
 155:src/DCMotor.cpp **** 		case 4:
 156:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
 157:src/DCMotor.cpp **** 			break;
 158:src/DCMotor.cpp **** 		default:
 159:src/DCMotor.cpp **** 			return false;
 160:src/DCMotor.cpp **** 	}
 161:src/DCMotor.cpp **** 
 162:src/DCMotor.cpp **** 	return true;
 163:src/DCMotor.cpp **** }
 164:src/DCMotor.cpp **** 
 165:src/DCMotor.cpp **** float DCMotor::getReference(){
  76              		.loc 2 165 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.LVL3:
 166:src/DCMotor.cpp **** 	return speed;
 167:src/DCMotor.cpp **** }
  82              		.loc 2 167 0
  83 0004 8068     		ldr	r0, [r0, #8]	@ float
  84              	.LVL4:
  85 0006 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE1032:
  88              		.cantunwind
  89              		.fnend
  91              		.align	1
  92              		.global	_ZN7DCMotor9motorNameEv
  93              		.thumb
  94              		.thumb_func
  96              	_ZN7DCMotor9motorNameEv:
  97              		.fnstart
  98              	.LFB1033:
 168:src/DCMotor.cpp **** 
 169:src/DCMotor.cpp **** const char* DCMotor::motorName(){
  99              		.loc 2 169 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL5:
 170:src/DCMotor.cpp **** 	return m_settings->m_motorName;
 105              		.loc 2 170 0
 106 0008 4368     		ldr	r3, [r0, #4]
 171:src/DCMotor.cpp **** }
 107              		.loc 2 171 0
 108 000a 5868     		ldr	r0, [r3, #4]
 109              	.LVL6:
 110 000c 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE1033:
 113              		.cantunwind
 114              		.fnend
 116              		.align	1
 117              		.global	_ZN7DCMotorD2Ev
 118              		.thumb
 119              		.thumb_func
 121              	_ZN7DCMotorD2Ev:
 122              		.fnstart
 123              	.LFB1026:
  15:src/DCMotor.cpp **** {
 124              		.loc 2 15 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL7:
 129 000e 10B5     		push	{r4, lr}
 130              	.LCFI0:
 131              		.cfi_def_cfa_offset 8
 132              		.cfi_offset 4, -8
 133              		.cfi_offset 14, -4
  15:src/DCMotor.cpp **** {
 134              		.loc 2 15 0
 135 0010 0446     		mov	r4, r0
 136              	.LBB834:
 137 0012 034B     		ldr	r3, .L6
 138 0014 0360     		str	r3, [r0]
 139 0016 FFF7FEFF 		bl	_ZN5motorD2Ev
 140              	.LVL8:
 141              	.LBE834:
  17:src/DCMotor.cpp **** 
 142              		.loc 2 17 0
 143 001a 2046     		mov	r0, r4
 144 001c 10BD     		pop	{r4, pc}
 145              	.LVL9:
 146              	.L7:
 147 001e 00BF     		.align	2
 148              	.L6:
 149 0020 08000000 		.word	.LANCHOR0+8
 150              		.cfi_endproc
 151              	.LFE1026:
 152              		.cantunwind
 153              		.fnend
 155              		.global	_ZN7DCMotorD1Ev
 156              		.thumb_set _ZN7DCMotorD1Ev,_ZN7DCMotorD2Ev
 157              		.align	1
 158              		.global	_ZN7DCMotorD0Ev
 159              		.thumb
 160              		.thumb_func
 162              	_ZN7DCMotorD0Ev:
 163              		.fnstart
 164              	.LFB1028:
  15:src/DCMotor.cpp **** {
 165              		.loc 2 15 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              	.LVL10:
 170 0024 10B5     		push	{r4, lr}
 171              	.LCFI1:
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 4, -8
 174              		.cfi_offset 14, -4
  15:src/DCMotor.cpp **** {
 175              		.loc 2 15 0
 176 0026 0446     		mov	r4, r0
  17:src/DCMotor.cpp **** 
 177              		.loc 2 17 0
 178 0028 FFF7FEFF 		bl	_ZN7DCMotorD1Ev
 179              	.LVL11:
 180 002c 2046     		mov	r0, r4
 181 002e FFF7FEFF 		bl	_ZdlPv
 182              	.LVL12:
 183 0032 2046     		mov	r0, r4
 184 0034 10BD     		pop	{r4, pc}
 185              		.cfi_endproc
 186              	.LFE1028:
 187              		.cantunwind
 188              		.fnend
 190              		.align	1
 191              		.global	_ZN7DCMotor9motorInitEv
 192              		.thumb
 193              		.thumb_func
 195              	_ZN7DCMotor9motorInitEv:
 196              		.fnstart
 197              	.LFB1029:
  20:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 198              		.loc 2 20 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 32
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              	.LVL13:
 203 0036 70B5     		push	{r4, r5, r6, lr}
 204              		.save {r4, r5, r6, lr}
 205              	.LCFI2:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 4, -16
 208              		.cfi_offset 5, -12
 209              		.cfi_offset 6, -8
 210              		.cfi_offset 14, -4
 211 0038 0446     		mov	r4, r0
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 212              		.loc 2 23 0
 213 003a 4368     		ldr	r3, [r0, #4]
  20:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 214              		.loc 2 20 0
 215              		.pad #32
 216 003c 88B0     		sub	sp, sp, #32
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 48
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 219              		.loc 2 23 0
 220 003e 1A6A     		ldr	r2, [r3, #32]
  25:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 221              		.loc 2 25 0
 222 0040 0325     		movs	r5, #3
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 223              		.loc 2 24 0
 224 0042 1026     		movs	r6, #16
  26:src/DCMotor.cpp **** 
 225              		.loc 2 26 0
 226 0044 586A     		ldr	r0, [r3, #36]
 227              	.LVL14:
 228 0046 6946     		mov	r1, sp
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 229              		.loc 2 23 0
 230 0048 ADF80020 		strh	r2, [sp]	@ movhi
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 231              		.loc 2 24 0
 232 004c 8DF80360 		strb	r6, [sp, #3]
  25:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 233              		.loc 2 25 0
 234 0050 8DF80250 		strb	r5, [sp, #2]
  26:src/DCMotor.cpp **** 
 235              		.loc 2 26 0
 236 0054 FFF7FEFF 		bl	GPIO_Init
 237              	.LVL15:
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 238              		.loc 2 28 0
 239 0058 6368     		ldr	r3, [r4, #4]
  31:src/DCMotor.cpp **** 
 240              		.loc 2 31 0
 241 005a 6946     		mov	r1, sp
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 242              		.loc 2 28 0
 243 005c 1A6B     		ldr	r2, [r3, #48]
  31:src/DCMotor.cpp **** 
 244              		.loc 2 31 0
 245 005e 586B     		ldr	r0, [r3, #52]
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 246              		.loc 2 28 0
 247 0060 ADF80020 		strh	r2, [sp]	@ movhi
  29:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 248              		.loc 2 29 0
 249 0064 8DF80360 		strb	r6, [sp, #3]
  30:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 250              		.loc 2 30 0
 251 0068 8DF80250 		strb	r5, [sp, #2]
  31:src/DCMotor.cpp **** 
 252              		.loc 2 31 0
 253 006c FFF7FEFF 		bl	GPIO_Init
 254              	.LVL16:
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 255              		.loc 2 33 0
 256 0070 6368     		ldr	r3, [r4, #4]
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 257              		.loc 2 34 0
 258 0072 1426     		movs	r6, #20
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 259              		.loc 2 33 0
 260 0074 9A6A     		ldr	r2, [r3, #40]
  36:src/DCMotor.cpp **** 
 261              		.loc 2 36 0
 262 0076 D86A     		ldr	r0, [r3, #44]
 263 0078 6946     		mov	r1, sp
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 264              		.loc 2 33 0
 265 007a ADF80020 		strh	r2, [sp]	@ movhi
  35:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 266              		.loc 2 35 0
 267 007e 8DF80250 		strb	r5, [sp, #2]
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 268              		.loc 2 34 0
 269 0082 8DF80360 		strb	r6, [sp, #3]
  36:src/DCMotor.cpp **** 
 270              		.loc 2 36 0
 271 0086 FFF7FEFF 		bl	GPIO_Init
 272              	.LVL17:
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 273              		.loc 2 38 0
 274 008a 6368     		ldr	r3, [r4, #4]
  41:src/DCMotor.cpp **** 
 275              		.loc 2 41 0
 276 008c 6946     		mov	r1, sp
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 277              		.loc 2 38 0
 278 008e 9A6B     		ldr	r2, [r3, #56]
  41:src/DCMotor.cpp **** 
 279              		.loc 2 41 0
 280 0090 D86B     		ldr	r0, [r3, #60]
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 281              		.loc 2 38 0
 282 0092 ADF80020 		strh	r2, [sp]	@ movhi
  40:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 283              		.loc 2 40 0
 284 0096 8DF80250 		strb	r5, [sp, #2]
  39:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 285              		.loc 2 39 0
 286 009a 8DF80360 		strb	r6, [sp, #3]
  41:src/DCMotor.cpp **** 
 287              		.loc 2 41 0
 288 009e FFF7FEFF 		bl	GPIO_Init
 289              	.LVL18:
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 290              		.loc 2 43 0
 291 00a2 6368     		ldr	r3, [r4, #4]
  46:src/DCMotor.cpp **** 
 292              		.loc 2 46 0
 293 00a4 6946     		mov	r1, sp
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 294              		.loc 2 43 0
 295 00a6 1A6C     		ldr	r2, [r3, #64]
  46:src/DCMotor.cpp **** 
 296              		.loc 2 46 0
 297 00a8 586C     		ldr	r0, [r3, #68]
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 298              		.loc 2 43 0
 299 00aa ADF80020 		strh	r2, [sp]	@ movhi
  44:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 300              		.loc 2 44 0
 301 00ae 1822     		movs	r2, #24
 302 00b0 8DF80320 		strb	r2, [sp, #3]
  45:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 303              		.loc 2 45 0
 304 00b4 8DF80250 		strb	r5, [sp, #2]
  46:src/DCMotor.cpp **** 
 305              		.loc 2 46 0
 306 00b8 FFF7FEFF 		bl	GPIO_Init
 307              	.LVL19:
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 308              		.loc 2 49 0
 309 00bc 6368     		ldr	r3, [r4, #4]
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 310              		.loc 2 53 0
 311 00be 0025     		movs	r5, #0
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 312              		.loc 2 49 0
 313 00c0 9868     		ldr	r0, [r3, #8]
 314 00c2 364B     		ldr	r3, .L22
  57:src/DCMotor.cpp **** 
 315              		.loc 2 57 0
 316 00c4 01A9     		add	r1, sp, #4
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 317              		.loc 2 49 0
 318 00c6 9842     		cmp	r0, r3
  50:src/DCMotor.cpp **** 	else
 319              		.loc 2 50 0
 320 00c8 0CBF     		ite	eq
 321 00ca 47F27E03 		movweq	r3, #28798
  52:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 322              		.loc 2 52 0
 323 00ce 43F63F03 		movwne	r3, #14399
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 324              		.loc 2 53 0
 325 00d2 ADF80450 		strh	r5, [sp, #4]	@ movhi
  52:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 326              		.loc 2 52 0
 327 00d6 ADF80830 		strh	r3, [sp, #8]	@ movhi
  54:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 328              		.loc 2 54 0
 329 00da ADF80A50 		strh	r5, [sp, #10]	@ movhi
  55:src/DCMotor.cpp **** 
 330              		.loc 2 55 0
 331 00de ADF80650 		strh	r5, [sp, #6]	@ movhi
  57:src/DCMotor.cpp **** 
 332              		.loc 2 57 0
 333 00e2 FFF7FEFF 		bl	TIM_TimeBaseInit
 334              	.LVL20:
  60:src/DCMotor.cpp **** 
 335              		.loc 2 60 0
 336 00e6 04A8     		add	r0, sp, #16
 337 00e8 FFF7FEFF 		bl	TIM_OCStructInit
 338              	.LVL21:
  62:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 339              		.loc 2 62 0
 340 00ec 6023     		movs	r3, #96
 341 00ee ADF81030 		strh	r3, [sp, #16]	@ movhi
  63:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
 342              		.loc 2 63 0
 343 00f2 0123     		movs	r3, #1
 344 00f4 ADF81230 		strh	r3, [sp, #18]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 345              		.loc 2 67 0
 346 00f8 6368     		ldr	r3, [r4, #4]
  64:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 347              		.loc 2 64 0
 348 00fa ADF81650 		strh	r5, [sp, #22]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 349              		.loc 2 67 0
 350 00fe DA68     		ldr	r2, [r3, #12]
  65:src/DCMotor.cpp **** 
 351              		.loc 2 65 0
 352 0100 ADF81850 		strh	r5, [sp, #24]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 353              		.loc 2 67 0
 354 0104 013A     		subs	r2, r2, #1
 355 0106 032A     		cmp	r2, #3
 356 0108 44D8     		bhi	.L19
 357 010a DFE802F0 		tbb	[pc, r2]
 358              	.L14:
 359 010e 02       		.byte	(.L13-.L14)/2
 360 010f 0C       		.byte	(.L15-.L14)/2
 361 0110 16       		.byte	(.L16-.L14)/2
 362 0111 20       		.byte	(.L17-.L14)/2
 363              		.p2align 1
 364              	.L13:
  69:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 365              		.loc 2 69 0
 366 0112 04A9     		add	r1, sp, #16
 367 0114 9868     		ldr	r0, [r3, #8]
 368 0116 FFF7FEFF 		bl	TIM_OC1Init
 369              	.LVL22:
  70:src/DCMotor.cpp **** 			break;
 370              		.loc 2 70 0
 371 011a 6368     		ldr	r3, [r4, #4]
 372 011c 0821     		movs	r1, #8
 373 011e 9868     		ldr	r0, [r3, #8]
 374 0120 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 375              	.LVL23:
 376 0124 1CE0     		b	.L18
 377              	.L15:
  73:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 378              		.loc 2 73 0
 379 0126 04A9     		add	r1, sp, #16
 380 0128 9868     		ldr	r0, [r3, #8]
 381 012a FFF7FEFF 		bl	TIM_OC2Init
 382              	.LVL24:
  74:src/DCMotor.cpp **** 			break;
 383              		.loc 2 74 0
 384 012e 6368     		ldr	r3, [r4, #4]
 385 0130 0821     		movs	r1, #8
 386 0132 9868     		ldr	r0, [r3, #8]
 387 0134 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 388              	.LVL25:
 389 0138 12E0     		b	.L18
 390              	.L16:
  77:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 391              		.loc 2 77 0
 392 013a 04A9     		add	r1, sp, #16
 393 013c 9868     		ldr	r0, [r3, #8]
 394 013e FFF7FEFF 		bl	TIM_OC3Init
 395              	.LVL26:
  78:src/DCMotor.cpp **** 			break;
 396              		.loc 2 78 0
 397 0142 6368     		ldr	r3, [r4, #4]
 398 0144 0821     		movs	r1, #8
 399 0146 9868     		ldr	r0, [r3, #8]
 400 0148 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 401              	.LVL27:
 402 014c 08E0     		b	.L18
 403              	.L17:
  81:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 404              		.loc 2 81 0
 405 014e 9868     		ldr	r0, [r3, #8]
 406 0150 04A9     		add	r1, sp, #16
 407 0152 FFF7FEFF 		bl	TIM_OC4Init
 408              	.LVL28:
  82:src/DCMotor.cpp **** 			break;
 409              		.loc 2 82 0
 410 0156 6368     		ldr	r3, [r4, #4]
 411 0158 0821     		movs	r1, #8
 412 015a 9868     		ldr	r0, [r3, #8]
 413 015c FFF7FEFF 		bl	TIM_OC4PreloadConfig
 414              	.LVL29:
 415              	.L18:
  88:src/DCMotor.cpp **** 
 416              		.loc 2 88 0
 417 0160 6368     		ldr	r3, [r4, #4]
 418 0162 0121     		movs	r1, #1
 419 0164 9868     		ldr	r0, [r3, #8]
 420 0166 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 421              	.LVL30:
  90:src/DCMotor.cpp **** 
 422              		.loc 2 90 0
 423 016a 6368     		ldr	r3, [r4, #4]
 424 016c 0121     		movs	r1, #1
 425 016e 9868     		ldr	r0, [r3, #8]
 426 0170 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 427              	.LVL31:
  92:src/DCMotor.cpp **** 
 428              		.loc 2 92 0
 429 0174 6368     		ldr	r3, [r4, #4]
 430 0176 0121     		movs	r1, #1
 431 0178 9868     		ldr	r0, [r3, #8]
 432 017a FFF7FEFF 		bl	TIM_Cmd
 433              	.LVL32:
  95:src/DCMotor.cpp **** 
 434              		.loc 2 95 0
 435 017e 6368     		ldr	r3, [r4, #4]
 436              	.LVL33:
 102:src/DCMotor.cpp **** }
 437              		.loc 2 102 0
 438 0180 0120     		movs	r0, #1
 439              	.LBB835:
 440              	.LBB836:
 172:src/DCMotor.cpp **** 
 173:src/DCMotor.cpp **** void DCMotor::initEncoder(uint16_t addr){
 174:src/DCMotor.cpp **** 	encAddr = addr;
 441              		.loc 2 174 0
 442 0182 B3F84820 		ldrh	r2, [r3, #72]
 443 0186 2273     		strb	r2, [r4, #12]
 444              	.LVL34:
 445              	.LBE836:
 446              	.LBE835:
 100:src/DCMotor.cpp **** 
 447              		.loc 2 100 0
 448 0188 1B6E     		ldr	r3, [r3, #96]	@ float
  97:src/DCMotor.cpp **** 	error = 0;
 449              		.loc 2 97 0
 450 018a 0022     		movs	r2, #0
 451 018c A262     		str	r2, [r4, #40]	@ float
  98:src/DCMotor.cpp **** 
 452              		.loc 2 98 0
 453 018e 6262     		str	r2, [r4, #36]	@ float
 100:src/DCMotor.cpp **** 
 454              		.loc 2 100 0
 455 0190 2361     		str	r3, [r4, #16]	@ float
 102:src/DCMotor.cpp **** }
 456              		.loc 2 102 0
 457 0192 00E0     		b	.L12
 458              	.L19:
  85:src/DCMotor.cpp **** 	}
 459              		.loc 2 85 0
 460 0194 0020     		movs	r0, #0
 461              	.L12:
 103:src/DCMotor.cpp **** 
 462              		.loc 2 103 0
 463 0196 08B0     		add	sp, sp, #32
 464              	.LCFI4:
 465              		.cfi_def_cfa_offset 16
 466              		@ sp needed
 467 0198 70BD     		pop	{r4, r5, r6, pc}
 468              	.LVL35:
 469              	.L23:
 470 019a 00BF     		.align	2
 471              	.L22:
 472 019c 002C0140 		.word	1073818624
 473              		.cfi_endproc
 474              	.LFE1029:
 475              		.fnend
 477              		.align	1
 478              		.global	_ZN7DCMotorC2EP13motorSettings
 479              		.thumb
 480              		.thumb_func
 482              	_ZN7DCMotorC2EP13motorSettings:
 483              		.fnstart
 484              	.LFB1023:
  10:src/DCMotor.cpp **** {
 485              		.loc 2 10 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              	.LVL36:
 490 01a0 10B5     		push	{r4, lr}
 491              		.save {r4, lr}
 492              	.LCFI5:
 493              		.cfi_def_cfa_offset 8
 494              		.cfi_offset 4, -8
 495              		.cfi_offset 14, -4
  10:src/DCMotor.cpp **** {
 496              		.loc 2 10 0
 497 01a2 0446     		mov	r4, r0
 498              	.LBB837:
 499 01a4 FFF7FEFF 		bl	_ZN5motorC2EP13motorSettings
 500              	.LVL37:
 501 01a8 014B     		ldr	r3, .L25
 502              	.LBE837:
  13:src/DCMotor.cpp **** 
 503              		.loc 2 13 0
 504 01aa 2046     		mov	r0, r4
 505              	.LBB838:
  10:src/DCMotor.cpp **** {
 506              		.loc 2 10 0
 507 01ac 2360     		str	r3, [r4]
 508              	.LBE838:
  13:src/DCMotor.cpp **** 
 509              		.loc 2 13 0
 510 01ae 10BD     		pop	{r4, pc}
 511              	.LVL38:
 512              	.L26:
 513              		.align	2
 514              	.L25:
 515 01b0 08000000 		.word	.LANCHOR0+8
 516              		.cfi_endproc
 517              	.LFE1023:
 518              		.fnend
 520              		.global	_ZN7DCMotorC1EP13motorSettings
 521              		.thumb_set _ZN7DCMotorC1EP13motorSettings,_ZN7DCMotorC2EP13motorSettings
 522              		.align	1
 523              		.global	_ZN7DCMotor8setSpeedEi
 524              		.thumb
 525              		.thumb_func
 527              	_ZN7DCMotor8setSpeedEi:
 528              		.fnstart
 529              	.LFB1031:
 110:src/DCMotor.cpp **** 	if(s < -PERIOD)
 530              		.loc 2 110 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              	.LVL39:
 111:src/DCMotor.cpp **** 		s = -PERIOD;
 535              		.loc 2 111 0
 536 01b4 354A     		ldr	r2, .L44
 110:src/DCMotor.cpp **** 	if(s < -PERIOD)
 537              		.loc 2 110 0
 538 01b6 38B5     		push	{r3, r4, r5, lr}
 539              		.save {r3, r4, r5, lr}
 540              	.LCFI6:
 541              		.cfi_def_cfa_offset 16
 542              		.cfi_offset 3, -16
 543              		.cfi_offset 4, -12
 544              		.cfi_offset 5, -8
 545              		.cfi_offset 14, -4
 111:src/DCMotor.cpp **** 		s = -PERIOD;
 546              		.loc 2 111 0
 547 01b8 9142     		cmp	r1, r2
 110:src/DCMotor.cpp **** 	if(s < -PERIOD)
 548              		.loc 2 110 0
 549 01ba 0546     		mov	r5, r0
 550 01bc 4368     		ldr	r3, [r0, #4]
 111:src/DCMotor.cpp **** 		s = -PERIOD;
 551              		.loc 2 111 0
 552 01be 06DB     		blt	.L39
 553 01c0 43F63F04 		movw	r4, #14399
 554 01c4 8C42     		cmp	r4, r1
 555 01c6 A8BF     		it	ge
 556 01c8 0C46     		movge	r4, r1
 557              	.LVL40:
 117:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 558              		.loc 2 117 0
 559 01ca F4B1     		cbz	r4, .L29
 560 01cc 00E0     		b	.L28
 561              	.LVL41:
 562              	.L39:
 112:src/DCMotor.cpp **** 
 563              		.loc 2 112 0
 564 01ce 1446     		mov	r4, r2
 565              	.LVL42:
 566              	.L28:
 118:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 567              		.loc 2 118 0
 568 01d0 198D     		ldrh	r1, [r3, #40]
 569 01d2 D86A     		ldr	r0, [r3, #44]
 570              	.LVL43:
 571 01d4 FFF7FEFF 		bl	GPIO_SetBits
 572              	.LVL44:
 119:src/DCMotor.cpp **** 
 573              		.loc 2 119 0
 574 01d8 6B68     		ldr	r3, [r5, #4]
 575 01da 198F     		ldrh	r1, [r3, #56]
 576 01dc D86B     		ldr	r0, [r3, #60]
 577 01de FFF7FEFF 		bl	GPIO_SetBits
 578              	.LVL45:
 121:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 579              		.loc 2 121 0
 580 01e2 002C     		cmp	r4, #0
 581 01e4 05DD     		ble	.L30
 122:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 582              		.loc 2 122 0
 583 01e6 6B68     		ldr	r3, [r5, #4]
 584 01e8 198C     		ldrh	r1, [r3, #32]
 585 01ea 586A     		ldr	r0, [r3, #36]
 586 01ec FFF7FEFF 		bl	GPIO_SetBits
 587              	.LVL46:
 588 01f0 19E0     		b	.L42
 589              	.L30:
 124:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 590              		.loc 2 124 0
 591 01f2 46D0     		beq	.L40
 125:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 592              		.loc 2 125 0
 593 01f4 6B68     		ldr	r3, [r5, #4]
 594 01f6 198C     		ldrh	r1, [r3, #32]
 595 01f8 586A     		ldr	r0, [r3, #36]
 596 01fa FFF7FEFF 		bl	GPIO_ResetBits
 597              	.LVL47:
 126:src/DCMotor.cpp **** 		}else{
 598              		.loc 2 126 0
 599 01fe 6B68     		ldr	r3, [r5, #4]
 600 0200 198E     		ldrh	r1, [r3, #48]
 601 0202 586B     		ldr	r0, [r3, #52]
 602 0204 FFF7FEFF 		bl	GPIO_SetBits
 603              	.LVL48:
 604 0208 12E0     		b	.L31
 605              	.LVL49:
 606              	.L29:
 133:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 607              		.loc 2 133 0
 608 020a 198D     		ldrh	r1, [r3, #40]
 609 020c D86A     		ldr	r0, [r3, #44]
 610              	.LVL50:
 611 020e FFF7FEFF 		bl	GPIO_SetBits
 612              	.LVL51:
 134:src/DCMotor.cpp **** 
 613              		.loc 2 134 0
 614 0212 6B68     		ldr	r3, [r5, #4]
 615 0214 198F     		ldrh	r1, [r3, #56]
 616 0216 D86B     		ldr	r0, [r3, #60]
 617 0218 FFF7FEFF 		bl	GPIO_SetBits
 618              	.LVL52:
 137:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 619              		.loc 2 137 0
 620 021c 6B68     		ldr	r3, [r5, #4]
 621 021e 198C     		ldrh	r1, [r3, #32]
 622 0220 586A     		ldr	r0, [r3, #36]
 623 0222 FFF7FEFF 		bl	GPIO_ResetBits
 624              	.LVL53:
 625              	.L42:
 138:src/DCMotor.cpp **** 	}
 626              		.loc 2 138 0
 627 0226 6B68     		ldr	r3, [r5, #4]
 628 0228 198E     		ldrh	r1, [r3, #48]
 629 022a 586B     		ldr	r0, [r3, #52]
 630 022c FFF7FEFF 		bl	GPIO_ResetBits
 631              	.LVL54:
 632              	.L31:
 142:src/DCMotor.cpp **** 		s = s * 2;
 633              		.loc 2 142 0
 634 0230 6A68     		ldr	r2, [r5, #4]
 635 0232 1749     		ldr	r1, .L44+4
 636 0234 9368     		ldr	r3, [r2, #8]
 145:src/DCMotor.cpp **** 		case 1:
 637              		.loc 2 145 0
 638 0236 D268     		ldr	r2, [r2, #12]
 142:src/DCMotor.cpp **** 		s = s * 2;
 639              		.loc 2 142 0
 640 0238 8B42     		cmp	r3, r1
 145:src/DCMotor.cpp **** 		case 1:
 641              		.loc 2 145 0
 642 023a 02F1FF32 		add	r2, r2, #-1
 143:src/DCMotor.cpp **** 
 643              		.loc 2 143 0
 644 023e 08BF     		it	eq
 645 0240 6400     		lsleq	r4, r4, #1
 646              	.LVL55:
 145:src/DCMotor.cpp **** 		case 1:
 647              		.loc 2 145 0
 648 0242 032A     		cmp	r2, #3
 649 0244 1FD8     		bhi	.L41
 650 0246 DFE802F0 		tbb	[pc, r2]
 651              	.L35:
 652 024a 02       		.byte	(.L34-.L35)/2
 653 024b 08       		.byte	(.L36-.L35)/2
 654 024c 0E       		.byte	(.L37-.L35)/2
 655 024d 14       		.byte	(.L38-.L35)/2
 656              		.p2align 1
 657              	.L34:
 147:src/DCMotor.cpp **** 			break;
 658              		.loc 2 147 0
 659 024e 002C     		cmp	r4, #0
 660 0250 B8BF     		it	lt
 661 0252 6442     		rsblt	r4, r4, #0
 662              	.LVL56:
 663 0254 A4B2     		uxth	r4, r4
 664 0256 9C86     		strh	r4, [r3, #52]	@ movhi
 665 0258 11E0     		b	.L43
 666              	.LVL57:
 667              	.L36:
 150:src/DCMotor.cpp **** 			break;
 668              		.loc 2 150 0
 669 025a 002C     		cmp	r4, #0
 670 025c B8BF     		it	lt
 671 025e 6442     		rsblt	r4, r4, #0
 672              	.LVL58:
 673 0260 A4B2     		uxth	r4, r4
 674 0262 1C87     		strh	r4, [r3, #56]	@ movhi
 675 0264 0BE0     		b	.L43
 676              	.LVL59:
 677              	.L37:
 153:src/DCMotor.cpp **** 			break;
 678              		.loc 2 153 0
 679 0266 002C     		cmp	r4, #0
 680 0268 B8BF     		it	lt
 681 026a 6442     		rsblt	r4, r4, #0
 682              	.LVL60:
 683 026c A4B2     		uxth	r4, r4
 684 026e 9C87     		strh	r4, [r3, #60]	@ movhi
 685 0270 05E0     		b	.L43
 686              	.LVL61:
 687              	.L38:
 156:src/DCMotor.cpp **** 			break;
 688              		.loc 2 156 0
 689 0272 002C     		cmp	r4, #0
 690 0274 B8BF     		it	lt
 691 0276 6442     		rsblt	r4, r4, #0
 692              	.LVL62:
 693 0278 A4B2     		uxth	r4, r4
 694 027a A3F84040 		strh	r4, [r3, #64]	@ movhi
 695              	.L43:
 162:src/DCMotor.cpp **** }
 696              		.loc 2 162 0
 697 027e 0120     		movs	r0, #1
 157:src/DCMotor.cpp **** 		default:
 698              		.loc 2 157 0
 699 0280 38BD     		pop	{r3, r4, r5, pc}
 700              	.LVL63:
 701              	.L40:
 128:src/DCMotor.cpp **** 		}
 702              		.loc 2 128 0
 703 0282 2046     		mov	r0, r4
 704 0284 38BD     		pop	{r3, r4, r5, pc}
 705              	.LVL64:
 706              	.L41:
 159:src/DCMotor.cpp **** 	}
 707              		.loc 2 159 0
 708 0286 0020     		movs	r0, #0
 163:src/DCMotor.cpp **** 
 709              		.loc 2 163 0
 710 0288 38BD     		pop	{r3, r4, r5, pc}
 711              	.LVL65:
 712              	.L45:
 713 028a 00BF     		.align	2
 714              	.L44:
 715 028c C1C7FFFF 		.word	-14399
 716 0290 002C0140 		.word	1073818624
 717              		.cfi_endproc
 718              	.LFE1031:
 719              		.fnend
 721              		.align	1
 722              		.global	_ZN7DCMotor11initEncoderEt
 723              		.thumb
 724              		.thumb_func
 726              	_ZN7DCMotor11initEncoderEt:
 727              		.fnstart
 728              	.LFB1034:
 173:src/DCMotor.cpp **** 	encAddr = addr;
 729              		.loc 2 173 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734              	.LVL66:
 735              		.loc 2 174 0
 736 0294 0173     		strb	r1, [r0, #12]
 737 0296 7047     		bx	lr
 738              		.cfi_endproc
 739              	.LFE1034:
 740              		.cantunwind
 741              		.fnend
 743              		.align	1
 744              		.global	_ZN7DCMotor11readEncoderEv
 745              		.thumb
 746              		.thumb_func
 748              	_ZN7DCMotor11readEncoderEv:
 749              		.fnstart
 750              	.LFB1035:
 175:src/DCMotor.cpp **** }
 176:src/DCMotor.cpp **** 
 177:src/DCMotor.cpp **** std::tuple<int32_t, uint8_t, uint16_t> DCMotor::readEncoder(){
 751              		.loc 2 177 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              	.LVL67:
 756 0298 70B5     		push	{r4, r5, r6, lr}
 757              		.save {r4, r5, r6, lr}
 758              	.LCFI7:
 759              		.cfi_def_cfa_offset 16
 760              		.cfi_offset 4, -16
 761              		.cfi_offset 5, -12
 762              		.cfi_offset 6, -8
 763              		.cfi_offset 14, -4
 178:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 764              		.loc 2 178 0
 765 029a 1D4B     		ldr	r3, .L53
 766 029c 0722     		movs	r2, #7
 179:src/DCMotor.cpp ****     Rx_Idx = 0x00;
 767              		.loc 2 179 0
 768 029e 1D4D     		ldr	r5, .L53+4
 178:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 769              		.loc 2 178 0
 770 02a0 1A70     		strb	r2, [r3]
 771              		.loc 2 179 0
 772 02a2 0023     		movs	r3, #0
 180:src/DCMotor.cpp ****     int32_t ret = -1;
 181:src/DCMotor.cpp ****     uint16_t busyCount = 0;
 182:src/DCMotor.cpp **** 
 183:src/DCMotor.cpp ****     slaveAddress = encAddr;
 773              		.loc 2 183 0
 774 02a4 0A7B     		ldrb	r2, [r1, #12]	@ zero_extendqisi2
 179:src/DCMotor.cpp ****     Rx_Idx = 0x00;
 775              		.loc 2 179 0
 776 02a6 2B70     		strb	r3, [r5]
 777              	.LVL68:
 778              		.loc 2 183 0
 779 02a8 1B4B     		ldr	r3, .L53+8
 184:src/DCMotor.cpp ****     
 185:src/DCMotor.cpp ****     I2C_ITConfig(I2C1, I2C_IT_EVT , ENABLE);
 780              		.loc 2 185 0
 781 02aa 4FF40071 		mov	r1, #512
 782              	.LVL69:
 183:src/DCMotor.cpp ****     
 783              		.loc 2 183 0
 784 02ae 1A70     		strb	r2, [r3]
 177:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 785              		.loc 2 177 0
 786 02b0 0446     		mov	r4, r0
 787              		.loc 2 185 0
 788 02b2 0122     		movs	r2, #1
 789 02b4 1948     		ldr	r0, .L53+12
 790              	.LVL70:
 791 02b6 FFF7FEFF 		bl	I2C_ITConfig
 792              	.LVL71:
 186:src/DCMotor.cpp ****     I2C_AcknowledgeConfig(I2C1, ENABLE);
 793              		.loc 2 186 0
 794 02ba 0121     		movs	r1, #1
 795 02bc 1748     		ldr	r0, .L53+12
 796 02be FFF7FEFF 		bl	I2C_AcknowledgeConfig
 797              	.LVL72:
 187:src/DCMotor.cpp ****     I2C_GenerateSTART(I2C1, ENABLE);
 798              		.loc 2 187 0
 799 02c2 0121     		movs	r1, #1
 800 02c4 1548     		ldr	r0, .L53+12
 801 02c6 FFF7FEFF 		bl	I2C_GenerateSTART
 802              	.LVL73:
 188:src/DCMotor.cpp **** 
 189:src/DCMotor.cpp ****     // TODO: Implement actual error handling on timeout and retry count.. At the very least throw a
 190:src/DCMotor.cpp ****     uint32_t start = micros();
 803              		.loc 2 190 0
 804 02ca FFF7FEFF 		bl	micros
 805              	.LVL74:
 806 02ce 0646     		mov	r6, r0
 807              	.L49:
 191:src/DCMotor.cpp ****     while ((Rx_Idx < RXBUFFERSIZE)){
 808              		.loc 2 191 0
 809 02d0 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 810 02d2 062B     		cmp	r3, #6
 811 02d4 09D8     		bhi	.L48
 192:src/DCMotor.cpp ****     	if((micros() - start) >= (int32_t)2000){
 812              		.loc 2 192 0
 813 02d6 FFF7FEFF 		bl	micros
 814              	.LVL75:
 815 02da 801B     		subs	r0, r0, r6
 816 02dc B0F5FA6F 		cmp	r0, #2000
 817 02e0 F6D3     		bcc	.L49
 193:src/DCMotor.cpp ****     		ret = 0;
 194:src/DCMotor.cpp ****     		busyCount = 65535;
 818              		.loc 2 194 0
 819 02e2 4FF6FF72 		movw	r2, #65535
 820 02e6 0023     		movs	r3, #0
 821 02e8 0BE0     		b	.L50
 822              	.L48:
 195:src/DCMotor.cpp ****     		break;
 196:src/DCMotor.cpp ****     	}
 197:src/DCMotor.cpp ****     }
 198:src/DCMotor.cpp ****     if(ret == -1){
 199:src/DCMotor.cpp ****     	ret = ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
 823              		.loc 2 199 0
 824 02ea 0D48     		ldr	r0, .L53+16
 825 02ec 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 826 02ee 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 827 02f0 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
 828 02f2 1102     		lsls	r1, r2, #8
 829 02f4 1B04     		lsls	r3, r3, #16
 830 02f6 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 831 02f8 43EA0563 		orr	r3, r3, r5, lsl #24
 832 02fc 1343     		orrs	r3, r3, r2
 833 02fe 0B43     		orrs	r3, r3, r1
 834              	.LVL76:
 200:src/DCMotor.cpp ****     	busyCount = (uint16_t)((RxBuffer[2] << 8) | RxBuffer[3]);
 835              		.loc 2 200 0
 836 0300 0A43     		orrs	r2, r2, r1
 837              	.LVL77:
 838              	.L50:
 839              	.LBB839:
 840              	.LBB840:
 841              	.LBB841:
 842              	.LBB842:
 843              	.LBB843:
 844              	.LBB844:
 845              	.LBB845:
 846              	.LBB846:
 847              	.LBB847:
 848              	.LBB848:
 849              	.LBB849:
 850              	.LBB850:
 851              	.LBB851:
 852              		.file 3 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple"
   1:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // <tuple> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
   3:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // Copyright (C) 2007-2015 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** //
   5:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // any later version.
  10:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  11:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  16:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  20:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  25:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** /** @file include/tuple
  26:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****  *  This is a Standard C++ Library header.
  27:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****  */
  28:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  29:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #ifndef _GLIBCXX_TUPLE
  30:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #define _GLIBCXX_TUPLE 1
  31:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  32:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  34:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** # include <bits/c++0x_warning.h>
  36:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #else
  37:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  38:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #include <utility>
  39:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #include <array>
  40:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** #include <bits/uses_allocator.h>
  41:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  42:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** {
  44:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  46:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   /**
  47:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    *  @addtogroup utilities
  48:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    *  @{
  49:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    */
  50:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  51:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>
  52:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Head_base;
  53:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  54:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename _Head>
  55:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Head_base<_Idx, _Head, true>
  56:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     : public _Head
  57:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     {
  58:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base()
  59:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Head() { }
  60:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  61:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(const _Head& __h)
  62:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Head(__h) { }
  63:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  64:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(const _Head_base&) = default;
  65:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(_Head_base&&) = default;
  66:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  67:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
  68:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Head_base(_UHead&& __h)
  69:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(std::forward<_UHead>(__h)) { }
  70:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  71:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
  72:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Head() { }
  73:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  74:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
  75:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
  76:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(allocator_arg, *__a._M_a) { }
  77:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  78:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
  79:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
  80:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(*__a._M_a) { }
  81:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  82:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
  83:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
  84:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(std::forward<_UHead>(__uhead)) { }
  85:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  86:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
  87:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
  88:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }
  89:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  90:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
  91:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
  92:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }
  93:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  94:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr _Head&
  95:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(_Head_base& __b) noexcept { return __b; }
  96:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
  97:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr const _Head&
  98:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b; }
  99:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     };
 100:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 101:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename _Head>
 102:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Head_base<_Idx, _Head, false>
 103:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     {
 104:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base()
 105:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _M_head_impl() { }
 106:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 107:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(const _Head& __h)
 108:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _M_head_impl(__h) { }
 109:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 110:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(const _Head_base&) = default;
 111:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Head_base(_Head_base&&) = default;
 112:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 113:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
 114:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Head_base(_UHead&& __h)
 115:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__h)) { }
 853              		.loc 3 115 0
 854 0302 2280     		strh	r2, [r4]	@ movhi
 855              	.LVL78:
 856 0304 064A     		ldr	r2, .L53+16
 857              	.LVL79:
 858              	.LBE851:
 859              	.LBE850:
 860              	.LBE849:
 861              	.LBE848:
 862              	.LBE847:
 863              	.LBE846:
 864              	.LBE845:
 865              	.LBE844:
 866              	.LBE843:
 867              	.LBE842:
 868              	.LBE841:
 869              	.LBE840:
 870              	.LBE839:
 201:src/DCMotor.cpp ****     }
 202:src/DCMotor.cpp **** 
 203:src/DCMotor.cpp **** 
 204:src/DCMotor.cpp **** 
 205:src/DCMotor.cpp ****     return std::make_tuple(ret, RxBuffer[4], busyCount);
 206:src/DCMotor.cpp **** }
 871              		.loc 2 206 0
 872 0306 2046     		mov	r0, r4
 873 0308 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 874              	.LVL80:
 875              	.LBB865:
 876              	.LBB864:
 877              	.LBB863:
 878              	.LBB862:
 879              	.LBB861:
 880              	.LBB860:
 881              	.LBB856:
 882              	.LBB857:
 883              	.LBB858:
 884              		.loc 3 115 0
 885 030a 6360     		str	r3, [r4, #4]
 886              	.LBE858:
 887              	.LBE857:
 888              	.LBE856:
 889              	.LBB859:
 890              	.LBB855:
 891              	.LBB852:
 892              	.LBB853:
 893              	.LBB854:
 894 030c A270     		strb	r2, [r4, #2]
 895              	.LVL81:
 896              	.LBE854:
 897              	.LBE853:
 898              	.LBE852:
 899              	.LBE855:
 900              	.LBE859:
 901              	.LBE860:
 902              	.LBE861:
 903              	.LBE862:
 904              	.LBE863:
 905              	.LBE864:
 906              	.LBE865:
 907              		.loc 2 206 0
 908 030e 70BD     		pop	{r4, r5, r6, pc}
 909              	.LVL82:
 910              	.L54:
 911              		.align	2
 912              	.L53:
 913 0310 00000000 		.word	NumberOfByteToReceive
 914 0314 00000000 		.word	Rx_Idx
 915 0318 00000000 		.word	slaveAddress
 916 031c 00540040 		.word	1073763328
 917 0320 00000000 		.word	RxBuffer
 918              		.cfi_endproc
 919              	.LFE1035:
 920              		.fnend
 922              		.global	__aeabi_fsub
 923              		.global	__aeabi_fmul
 924              		.global	__aeabi_fadd
 925              		.global	__aeabi_fcmpgt
 926              		.global	__aeabi_fcmplt
 927              		.global	__aeabi_fdiv
 928              		.align	1
 929              		.global	_ZN7DCMotor15updateRegulatorEff
 930              		.thumb
 931              		.thumb_func
 933              	_ZN7DCMotor15updateRegulatorEff:
 934              		.fnstart
 935              	.LFB1095:
 207:src/DCMotor.cpp **** 
 208:src/DCMotor.cpp **** float DCMotor::updateRegulator(float enc, float dt){
 936              		.loc 2 208 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              	.LVL83:
 941 0324 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 942              	.LCFI8:
 943              		.cfi_def_cfa_offset 32
 944              		.cfi_offset 3, -32
 945              		.cfi_offset 4, -28
 946              		.cfi_offset 5, -24
 947              		.cfi_offset 6, -20
 948              		.cfi_offset 7, -16
 949              		.cfi_offset 8, -12
 950              		.cfi_offset 9, -8
 951              		.cfi_offset 14, -4
 952              		.loc 2 208 0
 953 0328 0446     		mov	r4, r0
 954 032a 9046     		mov	r8, r2
 209:src/DCMotor.cpp **** 	float error_new = speed-enc;
 955              		.loc 2 209 0
 956 032c 8068     		ldr	r0, [r0, #8]	@ float
 957              	.LVL84:
 958 032e FFF7FEFF 		bl	__aeabi_fsub
 959              	.LVL85:
 210:src/DCMotor.cpp **** 	
 211:src/DCMotor.cpp **** 	integral += error_new*dt;
 960              		.loc 2 211 0
 961 0332 4146     		mov	r1, r8
 209:src/DCMotor.cpp **** 	float error_new = speed-enc;
 962              		.loc 2 209 0
 963 0334 0746     		mov	r7, r0
 964              	.LVL86:
 965              		.loc 2 211 0
 966 0336 FFF7FEFF 		bl	__aeabi_fmul
 967              	.LVL87:
 968 033a A16A     		ldr	r1, [r4, #40]	@ float
 969 033c FFF7FEFF 		bl	__aeabi_fadd
 970              	.LVL88:
 212:src/DCMotor.cpp **** 	
 213:src/DCMotor.cpp **** 	if (integral > m_settings->integralSaturation){
 971              		.loc 2 213 0
 972 0340 6668     		ldr	r6, [r4, #4]
 211:src/DCMotor.cpp **** 	
 973              		.loc 2 211 0
 974 0342 A062     		str	r0, [r4, #40]	@ float
 975              		.loc 2 213 0
 976 0344 F56D     		ldr	r5, [r6, #92]	@ float
 211:src/DCMotor.cpp **** 	
 977              		.loc 2 211 0
 978 0346 8146     		mov	r9, r0
 979              		.loc 2 213 0
 980 0348 2946     		mov	r1, r5
 981 034a FFF7FEFF 		bl	__aeabi_fcmpgt
 982              	.LVL89:
 983 034e 30B9     		cbnz	r0, .L63
 214:src/DCMotor.cpp **** 		integral = m_settings->integralSaturation;
 215:src/DCMotor.cpp **** 	}else if (integral < -(m_settings->integralSaturation)){
 984              		.loc 2 215 0
 985 0350 05F10045 		add	r5, r5, #-2147483648
 986 0354 2946     		mov	r1, r5
 987 0356 4846     		mov	r0, r9
 988 0358 FFF7FEFF 		bl	__aeabi_fcmplt
 989              	.LVL90:
 990 035c 00B1     		cbz	r0, .L58
 991              	.L63:
 216:src/DCMotor.cpp **** 		integral = -(m_settings->integralSaturation);
 992              		.loc 2 216 0
 993 035e A562     		str	r5, [r4, #40]	@ float
 994              	.L58:
 217:src/DCMotor.cpp **** 	}
 218:src/DCMotor.cpp **** 	
 219:src/DCMotor.cpp **** 	float derivative = (error_new-error)/dt;
 220:src/DCMotor.cpp **** 	float output = (m_settings->KP*error + m_settings->KI*integral + m_settings->KD*derivative);
 995              		.loc 2 220 0
 996 0360 A16A     		ldr	r1, [r4, #40]	@ float
 997 0362 706D     		ldr	r0, [r6, #84]	@ float
 998 0364 FFF7FEFF 		bl	__aeabi_fmul
 999              	.LVL91:
 219:src/DCMotor.cpp **** 	float output = (m_settings->KP*error + m_settings->KI*integral + m_settings->KD*derivative);
 1000              		.loc 2 219 0
 1001 0368 656A     		ldr	r5, [r4, #36]	@ float
 1002              	.LVL92:
 1003              		.loc 2 220 0
 1004 036a 316D     		ldr	r1, [r6, #80]	@ float
 1005 036c 8146     		mov	r9, r0
 1006 036e 2846     		mov	r0, r5
 1007 0370 FFF7FEFF 		bl	__aeabi_fmul
 1008              	.LVL93:
 1009 0374 0146     		mov	r1, r0
 1010 0376 4846     		mov	r0, r9
 1011 0378 FFF7FEFF 		bl	__aeabi_fadd
 1012              	.LVL94:
 1013 037c 2946     		mov	r1, r5
 1014 037e 8146     		mov	r9, r0
 1015 0380 3846     		mov	r0, r7
 1016 0382 FFF7FEFF 		bl	__aeabi_fsub
 1017              	.LVL95:
 1018 0386 4146     		mov	r1, r8
 1019 0388 FFF7FEFF 		bl	__aeabi_fdiv
 1020              	.LVL96:
 1021 038c B16D     		ldr	r1, [r6, #88]	@ float
 1022 038e FFF7FEFF 		bl	__aeabi_fmul
 1023              	.LVL97:
 1024 0392 0146     		mov	r1, r0
 1025 0394 4846     		mov	r0, r9
 1026 0396 FFF7FEFF 		bl	__aeabi_fadd
 1027              	.LVL98:
 221:src/DCMotor.cpp **** 	error = error_new;
 1028              		.loc 2 221 0
 1029 039a 6762     		str	r7, [r4, #36]	@ float
 222:src/DCMotor.cpp **** 	return output;
 223:src/DCMotor.cpp **** }
 1030              		.loc 2 223 0
 1031 039c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1032              		.cfi_endproc
 1033              	.LFE1095:
 1034              		.cantunwind
 1035              		.fnend
 1037              		.global	__aeabi_i2d
 1038              		.global	__aeabi_dmul
 1039              		.global	__aeabi_d2f
 1040              		.global	__aeabi_f2iz
 1041              		.global	__aeabi_i2f
 1042              		.align	1
 1043              		.global	_ZN7DCMotor6updateEfb
 1044              		.thumb
 1045              		.thumb_func
 1047              	_ZN7DCMotor6updateEfb:
 1048              		.fnstart
 1049              	.LFB1096:
 224:src/DCMotor.cpp **** 
 225:src/DCMotor.cpp **** std::tuple<float, float, int, int> DCMotor::update(float dt, bool connected){
 1050              		.loc 2 225 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 8
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              	.LVL99:
 1055 03a0 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 1056              		.save {r4, r5, r6, r7, r8, r9, lr}
 1057              		.pad #12
 1058              	.LCFI9:
 1059              		.cfi_def_cfa_offset 40
 1060              		.cfi_offset 4, -28
 1061              		.cfi_offset 5, -24
 1062              		.cfi_offset 6, -20
 1063              		.cfi_offset 7, -16
 1064              		.cfi_offset 8, -12
 1065              		.cfi_offset 9, -8
 1066              		.cfi_offset 14, -4
 1067              		.loc 2 225 0
 1068 03a4 0746     		mov	r7, r0
 1069 03a6 8846     		mov	r8, r1
 1070 03a8 1646     		mov	r6, r2
 1071              	.LBB954:
 226:src/DCMotor.cpp **** 	// Read encoder
 227:src/DCMotor.cpp **** 	int s = 0;
 228:src/DCMotor.cpp **** 	float speed_si = -1;
 229:src/DCMotor.cpp **** 	int32_t encoder_speed = 0;
 230:src/DCMotor.cpp **** 	uint16_t busyCount = 0;
 231:src/DCMotor.cpp **** 	uint8_t retryCount = 0;
 232:src/DCMotor.cpp **** 	if(connected){
 1072              		.loc 2 232 0
 1073 03aa 3BB3     		cbz	r3, .L67
 1074              	.LBB955:
 233:src/DCMotor.cpp **** 		std::tie(encoder_speed, retryCount, busyCount) = readEncoder();
 1075              		.loc 2 233 0
 1076 03ac 6846     		mov	r0, sp
 1077              	.LVL100:
 1078 03ae FFF7FEFF 		bl	_ZN7DCMotor11readEncoderEv
 1079              	.LVL101:
 234:src/DCMotor.cpp **** 		float encSpeed = encoder_speed*0.04793689962;		// rad/s
 235:src/DCMotor.cpp **** 		speed_si = encSpeed * wheelRadius;	// m/s
 1080              		.loc 2 235 0
 1081 03b2 0198     		ldr	r0, [sp, #4]
 1082 03b4 FFF7FEFF 		bl	__aeabi_i2d
 1083              	.LVL102:
 1084 03b8 1BA3     		adr	r3, .L71
 1085 03ba D3E90023 		ldrd	r2, [r3]
 1086 03be FFF7FEFF 		bl	__aeabi_dmul
 1087              	.LVL103:
 1088 03c2 FFF7FEFF 		bl	__aeabi_d2f
 1089              	.LVL104:
 1090 03c6 D8F81010 		ldr	r1, [r8, #16]	@ float
 1091 03ca FFF7FEFF 		bl	__aeabi_fmul
 1092              	.LVL105:
 236:src/DCMotor.cpp **** 		if(strstr(m_settings->m_motorName, "left") > 0)
 1093              		.loc 2 236 0
 1094 03ce D8F80430 		ldr	r3, [r8, #4]
 235:src/DCMotor.cpp **** 		if(strstr(m_settings->m_motorName, "left") > 0)
 1095              		.loc 2 235 0
 1096 03d2 0446     		mov	r4, r0
 1097              		.loc 2 236 0
 1098 03d4 1649     		ldr	r1, .L71+8
 1099 03d6 5868     		ldr	r0, [r3, #4]
 1100              	.LBB956:
 1101              	.LBB957:
 1102              	.LBB958:
 1103              	.LBB959:
 1104              	.LBB960:
 116:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 117:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
 118:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _M_head_impl() { }
 119:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 120:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 121:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 122:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _M_head_impl(allocator_arg, *__a._M_a) { }
 123:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 124:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 125:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 126:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _M_head_impl(*__a._M_a) { }
 127:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 128:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
 129:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
 130:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__uhead)) { }
 131:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 132:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
 133:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 134:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 135:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	{ }
 136:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 137:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
 138:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 139:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
 140:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 141:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr _Head&
 142:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 143:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 144:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr const _Head&
 145:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 146:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 147:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Head _M_head_impl;
 148:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     };
 149:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 150:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   /**
 151:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * Contains the actual implementation of the @c tuple template, stored
 152:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * as a recursive inheritance hierarchy from the first element (most
 153:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * derived class) to the last (least derived class). The @c Idx
 154:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * parameter gives the 0-based index of the element stored at this
 155:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * point in the hierarchy; we use it to implement a constant-time
 156:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * get() operation.
 157:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    */
 158:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename... _Elements>
 159:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Tuple_impl; 
 160:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 161:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<typename _Tp>
 162:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct __is_empty_non_tuple : is_empty<_Tp> { };
 163:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 164:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   // Using EBO for elements that are tuples causes ambiguous base errors.
 165:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<typename _El0, typename... _El>
 166:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };
 167:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 168:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   // Use the Empty Base-class Optimization for empty, non-final types.
 169:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<typename _Tp>
 170:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     using __empty_not_final
 171:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     = typename conditional<__is_final(_Tp), false_type,
 172:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 			   __is_empty_non_tuple<_Tp>>::type;
 173:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 174:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   /**
 175:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * Recursive tuple implementation. Here we store the @c Head element
 176:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * and derive from a @c Tuple_impl containing the remaining elements
 177:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    * (which contains the @c Tail).
 178:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****    */
 179:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename _Head, typename... _Tail>
 180:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Tuple_impl<_Idx, _Head, _Tail...>
 181:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     : public _Tuple_impl<_Idx + 1, _Tail...>,
 182:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>
 183:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     {
 184:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<std::size_t, typename...> friend class _Tuple_impl;
 185:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 186:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
 187:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;
 188:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 189:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr _Head&  
 190:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 191:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 192:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr const _Head&
 193:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 194:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 195:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr _Inherited&
 196:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 197:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 198:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr const _Inherited&
 199:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_tail(const _Tuple_impl& __t) noexcept { return __t; }
 200:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 201:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Tuple_impl()
 202:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Inherited(), _Base() { }
 203:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 204:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       explicit 
 205:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 206:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Inherited(__tail...), _Base(__head) { }
 207:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 208:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead, typename... _UTail, typename = typename
 209:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****                enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
 210:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         explicit
 211:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 212:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(std::forward<_UTail>(__tail)...),
 213:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _Base(std::forward<_UHead>(__head)) { }
 214:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 215:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Tuple_impl(const _Tuple_impl&) = default;
 216:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 217:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr
 218:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Tuple_impl(_Tuple_impl&& __in)
 219:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       noexcept(__and_<is_nothrow_move_constructible<_Head>,
 220:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	              is_nothrow_move_constructible<_Inherited>>::value)
 221:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Inherited(std::move(_M_tail(__in))), 
 222:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Base(std::forward<_Head>(_M_head(__in))) { }
 223:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 224:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename... _UElements>
 225:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 226:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
 227:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }
 228:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 229:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead, typename... _UTails>
 230:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 231:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(std::move
 232:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
 233:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _Base(std::forward<_UHead>
 234:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }
 235:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 236:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 237:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 238:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(__tag, __a),
 239:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****           _Base(__tag, __use_alloc<_Head>(__a)) { }
 240:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 241:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 242:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 243:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		    const _Head& __head, const _Tail&... __tail)
 244:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(__tag, __a, __tail...),
 245:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }
 246:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 247:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead, typename... _UTail,
 248:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****                typename = typename enable_if<sizeof...(_Tail)
 249:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 					     == sizeof...(_UTail)>::type>
 250:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 251:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            _UHead&& __head, _UTail&&... __tail)
 252:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
 253:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 254:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	        std::forward<_UHead>(__head)) { }
 255:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 256:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 257:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 258:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            const _Tuple_impl& __in)
 259:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(__tag, __a, _M_tail(__in)), 
 260:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }
 261:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 262:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 263:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 264:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            _Tuple_impl&& __in)
 265:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(__tag, __a, std::move(_M_tail(__in))), 
 266:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 267:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	        std::forward<_Head>(_M_head(__in))) { }
 268:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 269:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename... _UElements>
 270:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 271:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            const _Tuple_impl<_Idx, _UElements...>& __in)
 272:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(__tag, __a,
 273:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		     _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
 274:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 275:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }
 276:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 277:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead, typename... _UTails>
 278:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 279:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 280:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Inherited(__tag, __a, std::move
 281:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
 282:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 283:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****                 std::forward<_UHead>
 284:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }
 285:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 286:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Tuple_impl&
 287:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       operator=(const _Tuple_impl& __in)
 288:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       {
 289:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_M_head(*this) = _M_head(__in);
 290:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_M_tail(*this) = _M_tail(__in);
 291:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	return *this;
 292:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       }
 293:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 294:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Tuple_impl&
 295:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       operator=(_Tuple_impl&& __in)
 296:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       noexcept(__and_<is_nothrow_move_assignable<_Head>,
 297:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	              is_nothrow_move_assignable<_Inherited>>::value)
 298:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       {
 299:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_M_head(*this) = std::forward<_Head>(_M_head(__in));
 300:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_M_tail(*this) = std::move(_M_tail(__in));
 301:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	return *this;
 302:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       }
 303:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 304:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename... _UElements>
 305:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         _Tuple_impl&
 306:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
 307:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         {
 308:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
 309:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);
 310:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  return *this;
 311:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	}
 312:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 313:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead, typename... _UTails>
 314:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         _Tuple_impl&
 315:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 316:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         {
 317:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _M_head(*this) = std::forward<_UHead>
 1105              		.loc 3 317 0
 1106 03d8 9DF80250 		ldrb	r5, [sp, #2]	@ zero_extendqisi2
 1107              	.LVL106:
 1108              	.LBB961:
 1109              	.LBB962:
 318:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
 319:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _M_tail(*this) = std::move
 320:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));
 321:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  return *this;
 322:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	}
 323:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 324:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     protected:
 325:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       void
 326:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_swap(_Tuple_impl& __in)
 327:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       noexcept(noexcept(swap(std::declval<_Head&>(),
 328:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 			     std::declval<_Head&>()))
 329:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	       && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
 330:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       {
 331:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	using std::swap;
 332:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	swap(_M_head(*this), _M_head(__in));
 333:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Inherited::_M_swap(_M_tail(__in));
 334:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       }
 335:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     };
 336:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 337:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   // Basis case of inheritance recursion.
 338:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****   template<std::size_t _Idx, typename _Head>
 339:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     struct _Tuple_impl<_Idx, _Head>
 340:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     : private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>
 341:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****     {
 342:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<std::size_t, typename...> friend class _Tuple_impl;
 343:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 344:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;
 345:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 346:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr _Head&
 347:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 348:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 349:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       static constexpr const _Head&
 350:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 351:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 352:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Tuple_impl()
 353:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Base() { }
 354:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 355:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       explicit
 356:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Tuple_impl(const _Head& __head)
 357:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Base(__head) { }
 358:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 359:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
 360:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         explicit
 361:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Tuple_impl(_UHead&& __head)
 362:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(std::forward<_UHead>(__head)) { }
 363:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 364:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr _Tuple_impl(const _Tuple_impl&) = default;
 365:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 366:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       constexpr
 367:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Tuple_impl(_Tuple_impl&& __in)
 368:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       noexcept(is_nothrow_move_constructible<_Head>::value)
 369:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       : _Base(std::forward<_Head>(_M_head(__in))) { }
 370:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 371:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
 372:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 373:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
 374:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 375:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
 376:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 377:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 378:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	{ }
 379:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 380:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 381:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 382:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(__tag, __use_alloc<_Head>(__a)) { }
 383:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 384:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 385:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 386:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		    const _Head& __head)
 387:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }
 388:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 389:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
 390:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 391:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            _UHead&& __head)
 392:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 393:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	        std::forward<_UHead>(__head)) { }
 394:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 395:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 396:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 397:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            const _Tuple_impl& __in)
 398:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }
 399:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 400:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc>
 401:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 402:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            _Tuple_impl&& __in)
 403:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 404:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	        std::forward<_Head>(_M_head(__in))) { }
 405:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 406:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
 407:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 408:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            const _Tuple_impl<_Idx, _UHead>& __in)
 409:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 410:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 		_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
 411:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 412:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _Alloc, typename _UHead>
 413:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 414:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	            _Tuple_impl<_Idx, _UHead>&& __in)
 415:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 416:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****                 std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 417:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	{ }
 418:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 419:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Tuple_impl&
 420:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       operator=(const _Tuple_impl& __in)
 421:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       {
 422:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_M_head(*this) = _M_head(__in);
 423:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	return *this;
 424:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       }
 425:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 426:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       _Tuple_impl&
 427:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       operator=(_Tuple_impl&& __in)
 428:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       noexcept(is_nothrow_move_assignable<_Head>::value)
 429:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       {
 430:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	_M_head(*this) = std::forward<_Head>(_M_head(__in));
 431:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	return *this;
 432:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       }
 433:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 434:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
 435:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         _Tuple_impl&
 436:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         operator=(const _Tuple_impl<_Idx, _UHead>& __in)
 437:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         {
 438:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 439:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  return *this;
 440:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	}
 441:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 442:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****       template<typename _UHead>
 443:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         _Tuple_impl&
 444:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         operator=(_Tuple_impl<_Idx, _UHead>&& __in)
 445:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple ****         {
 446:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 	  _M_head(*this)
 1110              		.loc 3 446 0
 1111 03dc BDF80090 		ldrh	r9, [sp]
 1112              	.LVL107:
 1113              	.LBE962:
 1114              	.LBE961:
 1115              	.LBE960:
 1116              	.LBE959:
 1117              	.LBE958:
 1118              	.LBE957:
 1119              	.LBE956:
 1120              		.loc 2 236 0
 1121 03e0 FFF7FEFF 		bl	strstr
 1122              	.LVL108:
 1123 03e4 08B1     		cbz	r0, .L66
 237:src/DCMotor.cpp **** 			speed_si = speed_si * -1;
 1124              		.loc 2 237 0
 1125 03e6 04F10044 		add	r4, r4, #-2147483648
 1126              	.LVL109:
 1127              	.L66:
 238:src/DCMotor.cpp **** 
 239:src/DCMotor.cpp **** 		// Update PID regulator
 240:src/DCMotor.cpp **** 		s = (int) updateRegulator(speed_si, dt);		// m/s*/
 1128              		.loc 2 240 0
 1129 03ea 3246     		mov	r2, r6
 1130 03ec 2146     		mov	r1, r4
 1131 03ee 4046     		mov	r0, r8
 1132 03f0 FFF7FEFF 		bl	_ZN7DCMotor15updateRegulatorEff
 1133              	.LVL110:
 1134 03f4 FFF7FEFF 		bl	__aeabi_f2iz
 1135              	.LVL111:
 1136 03f8 0646     		mov	r6, r0
 1137              	.LVL112:
 1138              	.LBE955:
 1139 03fa 03E0     		b	.L65
 1140              	.LVL113:
 1141              	.L67:
 1142              	.LBE954:
 231:src/DCMotor.cpp **** 	if(connected){
 1143              		.loc 2 231 0
 1144 03fc 1D46     		mov	r5, r3
 230:src/DCMotor.cpp **** 	uint8_t retryCount = 0;
 1145              		.loc 2 230 0
 1146 03fe 9946     		mov	r9, r3
 227:src/DCMotor.cpp **** 	float speed_si = -1;
 1147              		.loc 2 227 0
 1148 0400 1E46     		mov	r6, r3
 228:src/DCMotor.cpp **** 	int32_t encoder_speed = 0;
 1149              		.loc 2 228 0
 1150 0402 0C4C     		ldr	r4, .L71+12
 1151              	.LVL114:
 1152              	.L65:
 241:src/DCMotor.cpp **** 		// Set motor speed to process value
 242:src/DCMotor.cpp **** 	}
 243:src/DCMotor.cpp **** 	setSpeed(s);		// m/s
 1153              		.loc 2 243 0
 1154 0404 3146     		mov	r1, r6
 1155 0406 4046     		mov	r0, r8
 1156 0408 FFF7FEFF 		bl	_ZN7DCMotor8setSpeedEi
 1157              	.LVL115:
 1158              	.LBB963:
 1159              	.LBB964:
 1160              	.LBB965:
 1161              	.LBB966:
 1162              	.LBB967:
 1163              	.LBB968:
 1164              	.LBB969:
 1165              	.LBB970:
 1166              	.LBB971:
 1167              	.LBB972:
 1168              	.LBB973:
 1169              	.LBB974:
 1170              	.LBB975:
 115:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 1171              		.loc 3 115 0
 1172 040c C7F80090 		str	r9, [r7]
 1173              	.LVL116:
 1174              	.LBE975:
 1175              	.LBE974:
 1176              	.LBE973:
 1177              	.LBE972:
 1178              	.LBE971:
 1179              	.LBB976:
 1180              	.LBB977:
 1181              	.LBB978:
 1182 0410 7D60     		str	r5, [r7, #4]
 1183              	.LVL117:
 1184              	.LBE978:
 1185              	.LBE977:
 1186              	.LBE976:
 1187              	.LBE970:
 1188              	.LBE969:
 1189              	.LBB979:
 1190              	.LBB980:
 1191              	.LBB981:
 1192 0412 3046     		mov	r0, r6
 1193 0414 FFF7FEFF 		bl	__aeabi_i2f
 1194              	.LVL118:
 1195 0418 B860     		str	r0, [r7, #8]	@ float
 1196              	.LVL119:
 1197              	.LBE981:
 1198              	.LBE980:
 1199              	.LBE979:
 1200              	.LBE968:
 1201              	.LBE967:
 1202              	.LBE966:
 1203              	.LBE965:
 1204              	.LBE964:
 1205              	.LBE963:
 244:src/DCMotor.cpp **** 	// Return encoder values for publishing to localization
 245:src/DCMotor.cpp **** 	return std::make_tuple(speed_si, s, (int)retryCount, (int)busyCount);
 246:src/DCMotor.cpp **** }...
 1206              		.loc 2 246 0
 1207 041a 3846     		mov	r0, r7
 1208              	.LBB988:
 1209              	.LBB987:
 1210              	.LBB986:
 1211              	.LBB985:
 1212              	.LBB982:
 1213              	.LBB983:
 1214              	.LBB984:
 115:/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/tuple **** 
 1215              		.loc 3 115 0
 1216 041c FC60     		str	r4, [r7, #12]	@ float
 1217              	.LVL120:
 1218              	.LBE984:
 1219              	.LBE983:
 1220              	.LBE982:
 1221              	.LBE985:
 1222              	.LBE986:
 1223              	.LBE987:
 1224              	.LBE988:
 1225              		.loc 2 246 0
 1226 041e 03B0     		add	sp, sp, #12
 1227              	.LCFI10:
 1228              		.cfi_def_cfa_offset 28
 1229              		@ sp needed
 1230 0420 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1231              	.LVL121:
 1232              	.L72:
 1233 0424 AFF30080 		.align	3
 1234              	.L71:
 1235 0428 1C714770 		.word	1883730204
 1236 042c 2F8BA83F 		.word	1068010287
 1237 0430 00000000 		.word	.LC0
 1238 0434 000080BF 		.word	-1082130432
 1239              		.cfi_endproc
 1240              	.LFE1096:
 1241              		.fnend
 1243              		.global	_ZTS7DCMotor
 1244              		.global	_ZTI7DCMotor
 1245              		.global	_ZTV7DCMotor
 1246              		.section	.rodata
 1247              		.align	2
 1248              		.set	.LANCHOR0,. + 0
 1251              	_ZTV7DCMotor:
 1252 0000 00000000 		.word	0
 1253 0004 00000000 		.word	_ZTI7DCMotor
 1254 0008 00000000 		.word	_ZN7DCMotorD1Ev
 1255 000c 00000000 		.word	_ZN7DCMotorD0Ev
 1256 0010 00000000 		.word	_ZN7DCMotor9motorTypeEv
 1257 0014 00000000 		.word	_ZN7DCMotor9motorInitEv
 1258 0018 00000000 		.word	_ZN7DCMotor9motorNameEv
 1259 001c 00000000 		.word	_ZN7DCMotor12setReferenceEf
 1260 0020 00000000 		.word	_ZN7DCMotor12getReferenceEv
 1261 0024 00000000 		.word	_ZN7DCMotor6updateEfb
 1264              	_ZTS7DCMotor:
 1265 0028 3744434D 		.ascii	"7DCMotor\000"
 1265      6F746F72 
 1265      00
 1266 0031 000000   		.space	3
 1269              	_ZTI7DCMotor:
 1270 0034 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 1271 0038 00000000 		.word	_ZTS7DCMotor
 1272 003c 00000000 		.word	_ZTI5motor
 1273              		.section	.rodata.str1.1,"aMS",%progbits,1
 1274              	.LC0:
 1275 0000 6C656674 		.ascii	"left\000"
 1275      00
 1276              		.text
 1277              	.Letext0:
 1278              		.file 4 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types.h"
 1279              		.file 5 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1280              		.file 6 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/stdint.h"
 1281              		.file 7 "./lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 1282              		.file 8 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1283              		.file 9 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 1284              		.file 10 "/opt/gcc-arm-none-eabi-5_2-2015q4/lib/gcc/arm-none-eabi/5.2.1/include/stddef.h"
 1285              		.file 11 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/lock.h"
 1286              		.file 12 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_types.h"
 1287              		.file 13 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/reent.h"
 1288              		.file 14 "/opt/gcc-arm-none-eabi-5_2-2015q4/lib/gcc/arm-none-eabi/5.2.1/include/stdarg.h"
 1289              		.file 15 "<built-in>"
 1290              		.file 16 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/type_traits"
 1291              		.file 17 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/exception_ptr.h"
 1292              		.file 18 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/arm-none-eabi/armv7-m/
 1293              		.file 19 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/debug/debug.h"
 1294              		.file 20 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/cwchar"
 1295              		.file 21 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/cstdint"
 1296              		.file 22 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/clocale"
 1297              		.file 23 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/stl_pair.h"
 1298              		.file 24 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/uses_allocator.h"
 1299              		.file 25 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/move.h"
 1300              		.file 26 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/bits/predefined_ops.h"
 1301              		.file 27 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/ext/new_allocator.h"
 1302              		.file 28 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/ext/numeric_traits.h"
 1303              		.file 29 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/wchar.h"
 1304              		.file 30 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/locale.h"
 1305              		.file 31 "./inc/motorSettings.h"
 1306              		.file 32 "./lib/CMSIS/CM3/CoreSupport/core_cm3.h"
 1307              		.file 33 "./inc/encoder.h"
 1308              		.file 34 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
 1309              		.file 35 "./inc/stm32_time.h"
 1310              		.file 36 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/string.h"
 1311              		.file 37 "/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/c++/5.2.1/new"
DEFINED SYMBOLS
                            *ABS*:00000000 DCMotor.cpp
     /tmp/ccdyvYu7.s:20     .text._ZN7DCMotor9motorTypeEv:00000000 $t
     /tmp/ccdyvYu7.s:25     .text._ZN7DCMotor9motorTypeEv:00000000 _ZN7DCMotor9motorTypeEv
.ARM.exidx.text._ZN7DCMotor9motorTypeEv:00000000 $d
     /tmp/ccdyvYu7.s:45     .text:00000000 $t
     /tmp/ccdyvYu7.s:50     .text:00000000 _ZN7DCMotor12setReferenceEf
                       .ARM.exidx:00000000 $d
     /tmp/ccdyvYu7.s:73     .text:00000004 _ZN7DCMotor12getReferenceEv
     /tmp/ccdyvYu7.s:96     .text:00000008 _ZN7DCMotor9motorNameEv
     /tmp/ccdyvYu7.s:121    .text:0000000e _ZN7DCMotorD2Ev
     /tmp/ccdyvYu7.s:149    .text:00000020 $d
     /tmp/ccdyvYu7.s:121    .text:0000000e _ZN7DCMotorD1Ev
     /tmp/ccdyvYu7.s:157    .text:00000024 $t
     /tmp/ccdyvYu7.s:162    .text:00000024 _ZN7DCMotorD0Ev
     /tmp/ccdyvYu7.s:195    .text:00000036 _ZN7DCMotor9motorInitEv
     /tmp/ccdyvYu7.s:359    .text:0000010e $d
     /tmp/ccdyvYu7.s:363    .text:00000112 $t
     /tmp/ccdyvYu7.s:472    .text:0000019c $d
     /tmp/ccdyvYu7.s:477    .text:000001a0 $t
     /tmp/ccdyvYu7.s:482    .text:000001a0 _ZN7DCMotorC2EP13motorSettings
     /tmp/ccdyvYu7.s:515    .text:000001b0 $d
     /tmp/ccdyvYu7.s:482    .text:000001a0 _ZN7DCMotorC1EP13motorSettings
     /tmp/ccdyvYu7.s:522    .text:000001b4 $t
     /tmp/ccdyvYu7.s:527    .text:000001b4 _ZN7DCMotor8setSpeedEi
     /tmp/ccdyvYu7.s:652    .text:0000024a $d
     /tmp/ccdyvYu7.s:656    .text:0000024e $t
     /tmp/ccdyvYu7.s:715    .text:0000028c $d
     /tmp/ccdyvYu7.s:721    .text:00000294 $t
     /tmp/ccdyvYu7.s:726    .text:00000294 _ZN7DCMotor11initEncoderEt
     /tmp/ccdyvYu7.s:748    .text:00000298 _ZN7DCMotor11readEncoderEv
     /tmp/ccdyvYu7.s:913    .text:00000310 $d
     /tmp/ccdyvYu7.s:928    .text:00000324 $t
     /tmp/ccdyvYu7.s:933    .text:00000324 _ZN7DCMotor15updateRegulatorEff
     /tmp/ccdyvYu7.s:1047   .text:000003a0 _ZN7DCMotor6updateEfb
     /tmp/ccdyvYu7.s:1235   .text:00000428 $d
     /tmp/ccdyvYu7.s:1264   .rodata:00000028 _ZTS7DCMotor
     /tmp/ccdyvYu7.s:1269   .rodata:00000034 _ZTI7DCMotor
     /tmp/ccdyvYu7.s:1251   .rodata:00000000 _ZTV7DCMotor
     /tmp/ccdyvYu7.s:1247   .rodata:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN5motorD2Ev
_ZdlPv
GPIO_Init
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_ARRPreloadConfig
TIM_CtrlPWMOutputs
TIM_Cmd
__aeabi_unwind_cpp_pr0
_ZN5motorC2EP13motorSettings
GPIO_SetBits
GPIO_ResetBits
I2C_ITConfig
I2C_AcknowledgeConfig
I2C_GenerateSTART
micros
NumberOfByteToReceive
Rx_Idx
slaveAddress
RxBuffer
__aeabi_fsub
__aeabi_fmul
__aeabi_fadd
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fdiv
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2iz
__aeabi_i2f
strstr
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI5motor
