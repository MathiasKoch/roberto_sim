   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"DCMotor.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN7DCMotor9motorTypeEv,"axG",%progbits,_ZN7DCMotor9motorTypeEv,comdat
  20              		.align	1
  21              		.weak	_ZN7DCMotor9motorTypeEv
  22              		.thumb
  23              		.thumb_func
  25              	_ZN7DCMotor9motorTypeEv:
  26              		.fnstart
  27              	.LFB29:
  28              		.file 1 "./inc/DCMotor.h"
   1:./inc/DCMotor.h **** 
   2:./inc/DCMotor.h **** #ifndef _DCMotor_H
   3:./inc/DCMotor.h **** #define	_DCMotor_H
   4:./inc/DCMotor.h **** 
   5:./inc/DCMotor.h **** #include <stm32f10x.h>
   6:./inc/DCMotor.h **** #include <stdlib.h>
   7:./inc/DCMotor.h **** #include "motor.h"
   8:./inc/DCMotor.h **** #include "encoder.h"
   9:./inc/DCMotor.h **** 
  10:./inc/DCMotor.h **** 
  11:./inc/DCMotor.h **** class DCMotor : public motor
  12:./inc/DCMotor.h **** {
  13:./inc/DCMotor.h **** public:
  14:./inc/DCMotor.h ****     DCMotor(motorSettings *settings);
  15:./inc/DCMotor.h ****     ~DCMotor();
  16:./inc/DCMotor.h **** 
  17:./inc/DCMotor.h ****     virtual void setReference(float setPoint);
  18:./inc/DCMotor.h ****     virtual float getReference();
  19:./inc/DCMotor.h ****     virtual char* motorName();
  20:./inc/DCMotor.h ****     virtual float update(float dt);
  21:./inc/DCMotor.h **** 
  22:./inc/DCMotor.h ****     virtual int motorType() { return MOTOR_TYPE_DC_MOTOR; }
  29              		.loc 1 22 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              		.loc 1 22 0
  36 0000 0220     		movs	r0, #2
  37              	.LVL1:
  38 0002 7047     		bx	lr
  39              		.cfi_endproc
  40              	.LFE29:
  41              		.cantunwind
  42              		.fnend
  44              		.text
  45              		.align	1
  46              		.global	_ZN7DCMotor12setReferenceEf
  47              		.thumb
  48              		.thumb_func
  50              	_ZN7DCMotor12setReferenceEf:
  51              		.fnstart
  52              	.LFB38:
  53              		.file 2 "src/DCMotor.cpp"
   1:src/DCMotor.cpp **** 
   2:src/DCMotor.cpp **** #include "DCMotor.h"
   3:src/DCMotor.cpp **** #include "motorSettings.h"
   4:src/DCMotor.cpp **** 
   5:src/DCMotor.cpp **** #define PERIOD 14399
   6:src/DCMotor.cpp **** #define PRESCALER 0
   7:src/DCMotor.cpp **** #define CLOCKDIV 0
   8:src/DCMotor.cpp **** 
   9:src/DCMotor.cpp **** 
  10:src/DCMotor.cpp **** DCMotor::DCMotor(motorSettings *settings) : motor(settings)
  11:src/DCMotor.cpp **** {
  12:src/DCMotor.cpp **** 
  13:src/DCMotor.cpp **** }
  14:src/DCMotor.cpp **** 
  15:src/DCMotor.cpp **** DCMotor::~DCMotor()
  16:src/DCMotor.cpp **** {
  17:src/DCMotor.cpp **** }
  18:src/DCMotor.cpp **** 
  19:src/DCMotor.cpp **** bool DCMotor::motorInit()
  20:src/DCMotor.cpp **** {
  21:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
  22:src/DCMotor.cpp **** 
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInAPin;
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  25:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  26:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
  27:src/DCMotor.cpp **** 
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCInBPin;
  29:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  30:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  31:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
  32:src/DCMotor.cpp **** 
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnAPin;
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  35:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  36:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
  37:src/DCMotor.cpp **** 
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCEnBPin;
  39:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
  40:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  41:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
  42:src/DCMotor.cpp **** 
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Pin = m_settings->m_DCPWMPin;
  44:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  45:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  46:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
  47:src/DCMotor.cpp **** 
  48:src/DCMotor.cpp **** 	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
  49:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
  50:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
  51:src/DCMotor.cpp **** 	else
  52:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD;
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
  54:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
  55:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  56:src/DCMotor.cpp **** 
  57:src/DCMotor.cpp **** 	TIM_TimeBaseInit(m_settings->m_Timer, &TIM_TimeBaseStructure);
  58:src/DCMotor.cpp **** 
  59:src/DCMotor.cpp **** 	TIM_OCInitTypeDef TIM_OCInitStructure;
  60:src/DCMotor.cpp **** 	TIM_OCStructInit(&TIM_OCInitStructure);
  61:src/DCMotor.cpp **** 
  62:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  63:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  64:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
  65:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  66:src/DCMotor.cpp **** 
  67:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
  68:src/DCMotor.cpp **** 		case 1:
  69:src/DCMotor.cpp **** 			TIM_OC1Init(m_settings->m_Timer, &TIM_OCInitStructure);
  70:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  71:src/DCMotor.cpp **** 			break;
  72:src/DCMotor.cpp **** 		case 2:
  73:src/DCMotor.cpp **** 			TIM_OC2Init(m_settings->m_Timer, &TIM_OCInitStructure);
  74:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  75:src/DCMotor.cpp **** 			break;
  76:src/DCMotor.cpp **** 		case 3:
  77:src/DCMotor.cpp **** 			TIM_OC3Init(m_settings->m_Timer, &TIM_OCInitStructure);
  78:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  79:src/DCMotor.cpp **** 			break;
  80:src/DCMotor.cpp **** 		case 4:
  81:src/DCMotor.cpp **** 			TIM_OC4Init(m_settings->m_Timer, &TIM_OCInitStructure);
  82:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
  83:src/DCMotor.cpp **** 			break;
  84:src/DCMotor.cpp **** 		default:
  85:src/DCMotor.cpp **** 			return false;
  86:src/DCMotor.cpp **** 	}
  87:src/DCMotor.cpp **** 
  88:src/DCMotor.cpp **** 	TIM_ARRPreloadConfig(m_settings->m_Timer, ENABLE);
  89:src/DCMotor.cpp **** 
  90:src/DCMotor.cpp **** 	TIM_CtrlPWMOutputs(m_settings->m_Timer, ENABLE);
  91:src/DCMotor.cpp **** 
  92:src/DCMotor.cpp **** 	TIM_Cmd(m_settings->m_Timer, ENABLE);
  93:src/DCMotor.cpp **** 
  94:src/DCMotor.cpp **** 	// Initialize encoder
  95:src/DCMotor.cpp **** 	initEncoder(m_settings->encoderAddr);
  96:src/DCMotor.cpp **** 
  97:src/DCMotor.cpp **** 	integral = 0;
  98:src/DCMotor.cpp **** 	error = 0;
  99:src/DCMotor.cpp **** 
 100:src/DCMotor.cpp **** 	wheelRadius = m_settings->wheelRadius;
 101:src/DCMotor.cpp **** 
 102:src/DCMotor.cpp **** 	return true;
 103:src/DCMotor.cpp **** }
 104:src/DCMotor.cpp **** 
 105:src/DCMotor.cpp **** void DCMotor::setReference(float setPoint){
  54              		.loc 2 105 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.LVL2:
 106:src/DCMotor.cpp **** 	speed = setPoint;
  60              		.loc 2 106 0
  61 0000 8160     		str	r1, [r0, #8]	@ float
  62 0002 7047     		bx	lr
  63              		.cfi_endproc
  64              	.LFE38:
  65              		.cantunwind
  66              		.fnend
  68              		.align	1
  69              		.global	_ZN7DCMotor12getReferenceEv
  70              		.thumb
  71              		.thumb_func
  73              	_ZN7DCMotor12getReferenceEv:
  74              		.fnstart
  75              	.LFB40:
 107:src/DCMotor.cpp **** 
 108:src/DCMotor.cpp **** }
 109:src/DCMotor.cpp **** 
 110:src/DCMotor.cpp **** bool DCMotor::setSpeed(int s){
 111:src/DCMotor.cpp **** 	if(s < -PERIOD)
 112:src/DCMotor.cpp **** 		s = -PERIOD;
 113:src/DCMotor.cpp **** 
 114:src/DCMotor.cpp **** 	if(s > PERIOD)
 115:src/DCMotor.cpp **** 		s = PERIOD;
 116:src/DCMotor.cpp **** 
 117:src/DCMotor.cpp **** 	if(abs(s) > 0){
 118:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 119:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 120:src/DCMotor.cpp **** 
 121:src/DCMotor.cpp **** 		if(s > 0){
 122:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 123:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 124:src/DCMotor.cpp **** 		}else if(s < 0){
 125:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 126:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 127:src/DCMotor.cpp **** 		}else{
 128:src/DCMotor.cpp **** 			return false;
 129:src/DCMotor.cpp **** 		}
 130:src/DCMotor.cpp **** 	}else{
 131:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 132:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 133:src/DCMotor.cpp **** 
 134:src/DCMotor.cpp **** 		// Break to GND
 135:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 136:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 137:src/DCMotor.cpp **** 	}
 138:src/DCMotor.cpp **** 	
 139:src/DCMotor.cpp **** 
 140:src/DCMotor.cpp **** 	if(m_settings->m_Timer == TIM1)
 141:src/DCMotor.cpp **** 		s = s * 2;
 142:src/DCMotor.cpp **** 
 143:src/DCMotor.cpp **** 	switch(m_settings->m_TimerChannel){
 144:src/DCMotor.cpp **** 		case 1:
 145:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR1 = (uint32_t)abs(s);
 146:src/DCMotor.cpp **** 			break;
 147:src/DCMotor.cpp **** 		case 2:
 148:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR2 = (uint32_t)abs(s);
 149:src/DCMotor.cpp **** 			break;
 150:src/DCMotor.cpp **** 		case 3:
 151:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR3 = (uint32_t)abs(s);
 152:src/DCMotor.cpp **** 			break;
 153:src/DCMotor.cpp **** 		case 4:
 154:src/DCMotor.cpp **** 			(m_settings->m_Timer)->CCR4 = (uint32_t)abs(s);
 155:src/DCMotor.cpp **** 			break;
 156:src/DCMotor.cpp **** 		default:
 157:src/DCMotor.cpp **** 			return false;
 158:src/DCMotor.cpp **** 	}
 159:src/DCMotor.cpp **** 
 160:src/DCMotor.cpp **** 	return true;
 161:src/DCMotor.cpp **** }
 162:src/DCMotor.cpp **** 
 163:src/DCMotor.cpp **** float DCMotor::getReference(){
  76              		.loc 2 163 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.LVL3:
 164:src/DCMotor.cpp **** 	return speed;
 165:src/DCMotor.cpp **** }
  82              		.loc 2 165 0
  83 0004 8068     		ldr	r0, [r0, #8]	@ float
  84              	.LVL4:
  85 0006 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE40:
  88              		.cantunwind
  89              		.fnend
  91              		.align	1
  92              		.global	_ZN7DCMotor9motorNameEv
  93              		.thumb
  94              		.thumb_func
  96              	_ZN7DCMotor9motorNameEv:
  97              		.fnstart
  98              	.LFB41:
 166:src/DCMotor.cpp **** 
 167:src/DCMotor.cpp **** char* DCMotor::motorName(){
  99              		.loc 2 167 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL5:
 168:src/DCMotor.cpp **** 	return m_settings->m_motorName;
 105              		.loc 2 168 0
 106 0008 4368     		ldr	r3, [r0, #4]
 169:src/DCMotor.cpp **** }
 107              		.loc 2 169 0
 108 000a 5868     		ldr	r0, [r3, #4]
 109              	.LVL6:
 110 000c 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE41:
 113              		.cantunwind
 114              		.fnend
 116              		.align	1
 117              		.global	_ZN7DCMotorD2Ev
 118              		.thumb
 119              		.thumb_func
 121              	_ZN7DCMotorD2Ev:
 122              		.fnstart
 123              	.LFB34:
  15:src/DCMotor.cpp **** {
 124              		.loc 2 15 0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              	.LVL7:
 129 000e 10B5     		push	{r4, lr}
 130              		.save {r4, lr}
 131              	.LCFI0:
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 4, -8
 134              		.cfi_offset 14, -4
  15:src/DCMotor.cpp **** {
 135              		.loc 2 15 0
 136 0010 0446     		mov	r4, r0
 137              	.LBB4:
 138 0012 034B     		ldr	r3, .L6
 139 0014 0360     		str	r3, [r0]
 140 0016 FFF7FEFF 		bl	_ZN5motorD2Ev
 141              	.LVL8:
 142              	.LBE4:
  17:src/DCMotor.cpp **** 
 143              		.loc 2 17 0
 144 001a 2046     		mov	r0, r4
 145 001c 10BD     		pop	{r4, pc}
 146              	.LVL9:
 147              	.L7:
 148 001e 00BF     		.align	2
 149              	.L6:
 150 0020 08000000 		.word	.LANCHOR0+8
 151              		.cfi_endproc
 152              	.LFE34:
 153              		.fnend
 155              		.global	_ZN7DCMotorD1Ev
 156              		.thumb_set _ZN7DCMotorD1Ev,_ZN7DCMotorD2Ev
 157              		.align	1
 158              		.global	_ZN7DCMotorD0Ev
 159              		.thumb
 160              		.thumb_func
 162              	_ZN7DCMotorD0Ev:
 163              		.fnstart
 164              	.LFB36:
  15:src/DCMotor.cpp **** {
 165              		.loc 2 15 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              	.LVL10:
 170 0024 10B5     		push	{r4, lr}
 171              		.save {r4, lr}
 172              	.LCFI1:
 173              		.cfi_def_cfa_offset 8
 174              		.cfi_offset 4, -8
 175              		.cfi_offset 14, -4
  15:src/DCMotor.cpp **** {
 176              		.loc 2 15 0
 177 0026 0446     		mov	r4, r0
  17:src/DCMotor.cpp **** 
 178              		.loc 2 17 0
 179 0028 FFF7FEFF 		bl	_ZN7DCMotorD1Ev
 180              	.LVL11:
 181 002c 2046     		mov	r0, r4
 182 002e FFF7FEFF 		bl	_ZdlPv
 183              	.LVL12:
 184 0032 2046     		mov	r0, r4
 185 0034 10BD     		pop	{r4, pc}
 186              		.cfi_endproc
 187              	.LFE36:
 188              		.fnend
 190              		.align	1
 191              		.global	_ZN7DCMotor9motorInitEv
 192              		.thumb
 193              		.thumb_func
 195              	_ZN7DCMotor9motorInitEv:
 196              		.fnstart
 197              	.LFB37:
  20:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 198              		.loc 2 20 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 32
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              	.LVL13:
 203 0036 70B5     		push	{r4, r5, r6, lr}
 204              		.save {r4, r5, r6, lr}
 205              	.LCFI2:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 4, -16
 208              		.cfi_offset 5, -12
 209              		.cfi_offset 6, -8
 210              		.cfi_offset 14, -4
 211 0038 0446     		mov	r4, r0
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 212              		.loc 2 23 0
 213 003a 4368     		ldr	r3, [r0, #4]
  20:src/DCMotor.cpp **** 	GPIO_InitTypeDef GPIO_InitStructure;
 214              		.loc 2 20 0
 215              		.pad #32
 216 003c 88B0     		sub	sp, sp, #32
 217              	.LCFI3:
 218              		.cfi_def_cfa_offset 48
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 219              		.loc 2 23 0
 220 003e 1A6A     		ldr	r2, [r3, #32]
  25:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 221              		.loc 2 25 0
 222 0040 0325     		movs	r5, #3
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 223              		.loc 2 24 0
 224 0042 1026     		movs	r6, #16
  26:src/DCMotor.cpp **** 
 225              		.loc 2 26 0
 226 0044 586A     		ldr	r0, [r3, #36]
 227              	.LVL14:
 228 0046 6946     		mov	r1, sp
  23:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 229              		.loc 2 23 0
 230 0048 ADF80020 		strh	r2, [sp]	@ movhi
  24:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 231              		.loc 2 24 0
 232 004c 8DF80360 		strb	r6, [sp, #3]
  25:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInAPort, &GPIO_InitStructure);
 233              		.loc 2 25 0
 234 0050 8DF80250 		strb	r5, [sp, #2]
  26:src/DCMotor.cpp **** 
 235              		.loc 2 26 0
 236 0054 FFF7FEFF 		bl	GPIO_Init
 237              	.LVL15:
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 238              		.loc 2 28 0
 239 0058 6368     		ldr	r3, [r4, #4]
  31:src/DCMotor.cpp **** 
 240              		.loc 2 31 0
 241 005a 6946     		mov	r1, sp
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 242              		.loc 2 28 0
 243 005c 1A6B     		ldr	r2, [r3, #48]
  31:src/DCMotor.cpp **** 
 244              		.loc 2 31 0
 245 005e 586B     		ldr	r0, [r3, #52]
  28:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 246              		.loc 2 28 0
 247 0060 ADF80020 		strh	r2, [sp]	@ movhi
  29:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 248              		.loc 2 29 0
 249 0064 8DF80360 		strb	r6, [sp, #3]
  30:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCInBPort, &GPIO_InitStructure);
 250              		.loc 2 30 0
 251 0068 8DF80250 		strb	r5, [sp, #2]
  31:src/DCMotor.cpp **** 
 252              		.loc 2 31 0
 253 006c FFF7FEFF 		bl	GPIO_Init
 254              	.LVL16:
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 255              		.loc 2 33 0
 256 0070 6368     		ldr	r3, [r4, #4]
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 257              		.loc 2 34 0
 258 0072 1426     		movs	r6, #20
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 259              		.loc 2 33 0
 260 0074 9A6A     		ldr	r2, [r3, #40]
  36:src/DCMotor.cpp **** 
 261              		.loc 2 36 0
 262 0076 D86A     		ldr	r0, [r3, #44]
 263 0078 6946     		mov	r1, sp
  33:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 264              		.loc 2 33 0
 265 007a ADF80020 		strh	r2, [sp]	@ movhi
  35:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnAPort, &GPIO_InitStructure);
 266              		.loc 2 35 0
 267 007e 8DF80250 		strb	r5, [sp, #2]
  34:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 268              		.loc 2 34 0
 269 0082 8DF80360 		strb	r6, [sp, #3]
  36:src/DCMotor.cpp **** 
 270              		.loc 2 36 0
 271 0086 FFF7FEFF 		bl	GPIO_Init
 272              	.LVL17:
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 273              		.loc 2 38 0
 274 008a 6368     		ldr	r3, [r4, #4]
  41:src/DCMotor.cpp **** 
 275              		.loc 2 41 0
 276 008c 6946     		mov	r1, sp
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 277              		.loc 2 38 0
 278 008e 9A6B     		ldr	r2, [r3, #56]
  41:src/DCMotor.cpp **** 
 279              		.loc 2 41 0
 280 0090 D86B     		ldr	r0, [r3, #60]
  38:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
 281              		.loc 2 38 0
 282 0092 ADF80020 		strh	r2, [sp]	@ movhi
  40:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCEnBPort, &GPIO_InitStructure);
 283              		.loc 2 40 0
 284 0096 8DF80250 		strb	r5, [sp, #2]
  39:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 285              		.loc 2 39 0
 286 009a 8DF80360 		strb	r6, [sp, #3]
  41:src/DCMotor.cpp **** 
 287              		.loc 2 41 0
 288 009e FFF7FEFF 		bl	GPIO_Init
 289              	.LVL18:
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 290              		.loc 2 43 0
 291 00a2 6368     		ldr	r3, [r4, #4]
  46:src/DCMotor.cpp **** 
 292              		.loc 2 46 0
 293 00a4 6946     		mov	r1, sp
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 294              		.loc 2 43 0
 295 00a6 1A6C     		ldr	r2, [r3, #64]
  46:src/DCMotor.cpp **** 
 296              		.loc 2 46 0
 297 00a8 586C     		ldr	r0, [r3, #68]
  43:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 298              		.loc 2 43 0
 299 00aa ADF80020 		strh	r2, [sp]	@ movhi
  44:src/DCMotor.cpp **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 300              		.loc 2 44 0
 301 00ae 1822     		movs	r2, #24
 302 00b0 8DF80320 		strb	r2, [sp, #3]
  45:src/DCMotor.cpp **** 	GPIO_Init(m_settings->m_DCPWMPort, &GPIO_InitStructure);
 303              		.loc 2 45 0
 304 00b4 8DF80250 		strb	r5, [sp, #2]
  46:src/DCMotor.cpp **** 
 305              		.loc 2 46 0
 306 00b8 FFF7FEFF 		bl	GPIO_Init
 307              	.LVL19:
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 308              		.loc 2 49 0
 309 00bc 6368     		ldr	r3, [r4, #4]
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 310              		.loc 2 53 0
 311 00be 0025     		movs	r5, #0
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 312              		.loc 2 49 0
 313 00c0 9868     		ldr	r0, [r3, #8]
 314 00c2 364B     		ldr	r3, .L22
  57:src/DCMotor.cpp **** 
 315              		.loc 2 57 0
 316 00c4 01A9     		add	r1, sp, #4
  49:src/DCMotor.cpp **** 		TIM_TimeBaseStructure.TIM_Period = PERIOD*2;
 317              		.loc 2 49 0
 318 00c6 9842     		cmp	r0, r3
  50:src/DCMotor.cpp **** 	else
 319              		.loc 2 50 0
 320 00c8 0CBF     		ite	eq
 321 00ca 47F27E03 		movweq	r3, #28798
  52:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 322              		.loc 2 52 0
 323 00ce 43F63F03 		movwne	r3, #14399
  53:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_ClockDivision = CLOCKDIV;
 324              		.loc 2 53 0
 325 00d2 ADF80450 		strh	r5, [sp, #4]	@ movhi
  52:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_Prescaler = PRESCALER;
 326              		.loc 2 52 0
 327 00d6 ADF80830 		strh	r3, [sp, #8]	@ movhi
  54:src/DCMotor.cpp **** 	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 328              		.loc 2 54 0
 329 00da ADF80A50 		strh	r5, [sp, #10]	@ movhi
  55:src/DCMotor.cpp **** 
 330              		.loc 2 55 0
 331 00de ADF80650 		strh	r5, [sp, #6]	@ movhi
  57:src/DCMotor.cpp **** 
 332              		.loc 2 57 0
 333 00e2 FFF7FEFF 		bl	TIM_TimeBaseInit
 334              	.LVL20:
  60:src/DCMotor.cpp **** 
 335              		.loc 2 60 0
 336 00e6 04A8     		add	r0, sp, #16
 337 00e8 FFF7FEFF 		bl	TIM_OCStructInit
 338              	.LVL21:
  62:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 339              		.loc 2 62 0
 340 00ec 6023     		movs	r3, #96
 341 00ee ADF81030 		strh	r3, [sp, #16]	@ movhi
  63:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_Pulse = 0x00;
 342              		.loc 2 63 0
 343 00f2 0123     		movs	r3, #1
 344 00f4 ADF81230 		strh	r3, [sp, #18]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 345              		.loc 2 67 0
 346 00f8 6368     		ldr	r3, [r4, #4]
  64:src/DCMotor.cpp **** 	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 347              		.loc 2 64 0
 348 00fa ADF81650 		strh	r5, [sp, #22]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 349              		.loc 2 67 0
 350 00fe DA68     		ldr	r2, [r3, #12]
  65:src/DCMotor.cpp **** 
 351              		.loc 2 65 0
 352 0100 ADF81850 		strh	r5, [sp, #24]	@ movhi
  67:src/DCMotor.cpp **** 		case 1:
 353              		.loc 2 67 0
 354 0104 013A     		subs	r2, r2, #1
 355 0106 032A     		cmp	r2, #3
 356 0108 44D8     		bhi	.L19
 357 010a DFE802F0 		tbb	[pc, r2]
 358              	.L14:
 359 010e 02       		.byte	(.L13-.L14)/2
 360 010f 0C       		.byte	(.L15-.L14)/2
 361 0110 16       		.byte	(.L16-.L14)/2
 362 0111 20       		.byte	(.L17-.L14)/2
 363              		.p2align 1
 364              	.L13:
  69:src/DCMotor.cpp **** 			TIM_OC1PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 365              		.loc 2 69 0
 366 0112 04A9     		add	r1, sp, #16
 367 0114 9868     		ldr	r0, [r3, #8]
 368 0116 FFF7FEFF 		bl	TIM_OC1Init
 369              	.LVL22:
  70:src/DCMotor.cpp **** 			break;
 370              		.loc 2 70 0
 371 011a 6368     		ldr	r3, [r4, #4]
 372 011c 0821     		movs	r1, #8
 373 011e 9868     		ldr	r0, [r3, #8]
 374 0120 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 375              	.LVL23:
 376 0124 1CE0     		b	.L18
 377              	.L15:
  73:src/DCMotor.cpp **** 			TIM_OC2PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 378              		.loc 2 73 0
 379 0126 04A9     		add	r1, sp, #16
 380 0128 9868     		ldr	r0, [r3, #8]
 381 012a FFF7FEFF 		bl	TIM_OC2Init
 382              	.LVL24:
  74:src/DCMotor.cpp **** 			break;
 383              		.loc 2 74 0
 384 012e 6368     		ldr	r3, [r4, #4]
 385 0130 0821     		movs	r1, #8
 386 0132 9868     		ldr	r0, [r3, #8]
 387 0134 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 388              	.LVL25:
 389 0138 12E0     		b	.L18
 390              	.L16:
  77:src/DCMotor.cpp **** 			TIM_OC3PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 391              		.loc 2 77 0
 392 013a 04A9     		add	r1, sp, #16
 393 013c 9868     		ldr	r0, [r3, #8]
 394 013e FFF7FEFF 		bl	TIM_OC3Init
 395              	.LVL26:
  78:src/DCMotor.cpp **** 			break;
 396              		.loc 2 78 0
 397 0142 6368     		ldr	r3, [r4, #4]
 398 0144 0821     		movs	r1, #8
 399 0146 9868     		ldr	r0, [r3, #8]
 400 0148 FFF7FEFF 		bl	TIM_OC3PreloadConfig
 401              	.LVL27:
 402 014c 08E0     		b	.L18
 403              	.L17:
  81:src/DCMotor.cpp **** 			TIM_OC4PreloadConfig(m_settings->m_Timer, TIM_OCPreload_Enable);
 404              		.loc 2 81 0
 405 014e 9868     		ldr	r0, [r3, #8]
 406 0150 04A9     		add	r1, sp, #16
 407 0152 FFF7FEFF 		bl	TIM_OC4Init
 408              	.LVL28:
  82:src/DCMotor.cpp **** 			break;
 409              		.loc 2 82 0
 410 0156 6368     		ldr	r3, [r4, #4]
 411 0158 0821     		movs	r1, #8
 412 015a 9868     		ldr	r0, [r3, #8]
 413 015c FFF7FEFF 		bl	TIM_OC4PreloadConfig
 414              	.LVL29:
 415              	.L18:
  88:src/DCMotor.cpp **** 
 416              		.loc 2 88 0
 417 0160 6368     		ldr	r3, [r4, #4]
 418 0162 0121     		movs	r1, #1
 419 0164 9868     		ldr	r0, [r3, #8]
 420 0166 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 421              	.LVL30:
  90:src/DCMotor.cpp **** 
 422              		.loc 2 90 0
 423 016a 6368     		ldr	r3, [r4, #4]
 424 016c 0121     		movs	r1, #1
 425 016e 9868     		ldr	r0, [r3, #8]
 426 0170 FFF7FEFF 		bl	TIM_CtrlPWMOutputs
 427              	.LVL31:
  92:src/DCMotor.cpp **** 
 428              		.loc 2 92 0
 429 0174 6368     		ldr	r3, [r4, #4]
 430 0176 0121     		movs	r1, #1
 431 0178 9868     		ldr	r0, [r3, #8]
 432 017a FFF7FEFF 		bl	TIM_Cmd
 433              	.LVL32:
  95:src/DCMotor.cpp **** 
 434              		.loc 2 95 0
 435 017e 6368     		ldr	r3, [r4, #4]
 436              	.LVL33:
 102:src/DCMotor.cpp **** }
 437              		.loc 2 102 0
 438 0180 0120     		movs	r0, #1
 439              	.LBB5:
 440              	.LBB6:
 170:src/DCMotor.cpp **** 
 171:src/DCMotor.cpp **** void DCMotor::initEncoder(uint16_t addr){
 172:src/DCMotor.cpp **** 	encAddr = addr;
 441              		.loc 2 172 0
 442 0182 B3F84820 		ldrh	r2, [r3, #72]
 443 0186 2273     		strb	r2, [r4, #12]
 444              	.LVL34:
 445              	.LBE6:
 446              	.LBE5:
 100:src/DCMotor.cpp **** 
 447              		.loc 2 100 0
 448 0188 DB6D     		ldr	r3, [r3, #92]	@ float
  97:src/DCMotor.cpp **** 	error = 0;
 449              		.loc 2 97 0
 450 018a 0022     		movs	r2, #0
 451 018c A262     		str	r2, [r4, #40]	@ float
  98:src/DCMotor.cpp **** 
 452              		.loc 2 98 0
 453 018e 6262     		str	r2, [r4, #36]	@ float
 100:src/DCMotor.cpp **** 
 454              		.loc 2 100 0
 455 0190 2361     		str	r3, [r4, #16]	@ float
 102:src/DCMotor.cpp **** }
 456              		.loc 2 102 0
 457 0192 00E0     		b	.L12
 458              	.L19:
  85:src/DCMotor.cpp **** 	}
 459              		.loc 2 85 0
 460 0194 0020     		movs	r0, #0
 461              	.L12:
 103:src/DCMotor.cpp **** 
 462              		.loc 2 103 0
 463 0196 08B0     		add	sp, sp, #32
 464              	.LCFI4:
 465              		.cfi_def_cfa_offset 16
 466              		@ sp needed
 467 0198 70BD     		pop	{r4, r5, r6, pc}
 468              	.LVL35:
 469              	.L23:
 470 019a 00BF     		.align	2
 471              	.L22:
 472 019c 002C0140 		.word	1073818624
 473              		.cfi_endproc
 474              	.LFE37:
 475              		.fnend
 477              		.align	1
 478              		.global	_ZN7DCMotorC2EP13motorSettings
 479              		.thumb
 480              		.thumb_func
 482              	_ZN7DCMotorC2EP13motorSettings:
 483              		.fnstart
 484              	.LFB31:
  10:src/DCMotor.cpp **** {
 485              		.loc 2 10 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              	.LVL36:
 490 01a0 10B5     		push	{r4, lr}
 491              		.save {r4, lr}
 492              	.LCFI5:
 493              		.cfi_def_cfa_offset 8
 494              		.cfi_offset 4, -8
 495              		.cfi_offset 14, -4
  10:src/DCMotor.cpp **** {
 496              		.loc 2 10 0
 497 01a2 0446     		mov	r4, r0
 498              	.LBB7:
 499 01a4 FFF7FEFF 		bl	_ZN5motorC2EP13motorSettings
 500              	.LVL37:
 501 01a8 014B     		ldr	r3, .L25
 502              	.LBE7:
  13:src/DCMotor.cpp **** 
 503              		.loc 2 13 0
 504 01aa 2046     		mov	r0, r4
 505              	.LBB8:
  10:src/DCMotor.cpp **** {
 506              		.loc 2 10 0
 507 01ac 2360     		str	r3, [r4]
 508              	.LBE8:
  13:src/DCMotor.cpp **** 
 509              		.loc 2 13 0
 510 01ae 10BD     		pop	{r4, pc}
 511              	.LVL38:
 512              	.L26:
 513              		.align	2
 514              	.L25:
 515 01b0 08000000 		.word	.LANCHOR0+8
 516              		.cfi_endproc
 517              	.LFE31:
 518              		.fnend
 520              		.global	_ZN7DCMotorC1EP13motorSettings
 521              		.thumb_set _ZN7DCMotorC1EP13motorSettings,_ZN7DCMotorC2EP13motorSettings
 522              		.align	1
 523              		.global	_ZN7DCMotor8setSpeedEi
 524              		.thumb
 525              		.thumb_func
 527              	_ZN7DCMotor8setSpeedEi:
 528              		.fnstart
 529              	.LFB39:
 110:src/DCMotor.cpp **** 	if(s < -PERIOD)
 530              		.loc 2 110 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              	.LVL39:
 111:src/DCMotor.cpp **** 		s = -PERIOD;
 535              		.loc 2 111 0
 536 01b4 354A     		ldr	r2, .L44
 110:src/DCMotor.cpp **** 	if(s < -PERIOD)
 537              		.loc 2 110 0
 538 01b6 38B5     		push	{r3, r4, r5, lr}
 539              		.save {r3, r4, r5, lr}
 540              	.LCFI6:
 541              		.cfi_def_cfa_offset 16
 542              		.cfi_offset 3, -16
 543              		.cfi_offset 4, -12
 544              		.cfi_offset 5, -8
 545              		.cfi_offset 14, -4
 111:src/DCMotor.cpp **** 		s = -PERIOD;
 546              		.loc 2 111 0
 547 01b8 9142     		cmp	r1, r2
 110:src/DCMotor.cpp **** 	if(s < -PERIOD)
 548              		.loc 2 110 0
 549 01ba 0546     		mov	r5, r0
 550 01bc 4368     		ldr	r3, [r0, #4]
 111:src/DCMotor.cpp **** 		s = -PERIOD;
 551              		.loc 2 111 0
 552 01be 06DB     		blt	.L39
 553 01c0 43F63F04 		movw	r4, #14399
 554 01c4 8C42     		cmp	r4, r1
 555 01c6 A8BF     		it	ge
 556 01c8 0C46     		movge	r4, r1
 557              	.LVL40:
 117:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnAPort, m_settings->m_DCEnAPin);
 558              		.loc 2 117 0
 559 01ca F4B1     		cbz	r4, .L29
 560 01cc 00E0     		b	.L28
 561              	.LVL41:
 562              	.L39:
 112:src/DCMotor.cpp **** 
 563              		.loc 2 112 0
 564 01ce 1446     		mov	r4, r2
 565              	.LVL42:
 566              	.L28:
 118:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 567              		.loc 2 118 0
 568 01d0 198D     		ldrh	r1, [r3, #40]
 569 01d2 D86A     		ldr	r0, [r3, #44]
 570              	.LVL43:
 571 01d4 FFF7FEFF 		bl	GPIO_SetBits
 572              	.LVL44:
 119:src/DCMotor.cpp **** 
 573              		.loc 2 119 0
 574 01d8 6B68     		ldr	r3, [r5, #4]
 575 01da 198F     		ldrh	r1, [r3, #56]
 576 01dc D86B     		ldr	r0, [r3, #60]
 577 01de FFF7FEFF 		bl	GPIO_SetBits
 578              	.LVL45:
 121:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 579              		.loc 2 121 0
 580 01e2 002C     		cmp	r4, #0
 581 01e4 05DD     		ble	.L30
 122:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 582              		.loc 2 122 0
 583 01e6 6B68     		ldr	r3, [r5, #4]
 584 01e8 198C     		ldrh	r1, [r3, #32]
 585 01ea 586A     		ldr	r0, [r3, #36]
 586 01ec FFF7FEFF 		bl	GPIO_SetBits
 587              	.LVL46:
 588 01f0 19E0     		b	.L42
 589              	.L30:
 124:src/DCMotor.cpp **** 			GPIO_ResetBits(m_settings->m_DCInAPort, m_settings->m_DCInAPin);
 590              		.loc 2 124 0
 591 01f2 46D0     		beq	.L40
 125:src/DCMotor.cpp **** 			GPIO_SetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 592              		.loc 2 125 0
 593 01f4 6B68     		ldr	r3, [r5, #4]
 594 01f6 198C     		ldrh	r1, [r3, #32]
 595 01f8 586A     		ldr	r0, [r3, #36]
 596 01fa FFF7FEFF 		bl	GPIO_ResetBits
 597              	.LVL47:
 126:src/DCMotor.cpp **** 		}else{
 598              		.loc 2 126 0
 599 01fe 6B68     		ldr	r3, [r5, #4]
 600 0200 198E     		ldrh	r1, [r3, #48]
 601 0202 586B     		ldr	r0, [r3, #52]
 602 0204 FFF7FEFF 		bl	GPIO_SetBits
 603              	.LVL48:
 604 0208 12E0     		b	.L31
 605              	.LVL49:
 606              	.L29:
 131:src/DCMotor.cpp **** 		GPIO_SetBits(m_settings->m_DCEnBPort, m_settings->m_DCEnBPin);
 607              		.loc 2 131 0
 608 020a 198D     		ldrh	r1, [r3, #40]
 609 020c D86A     		ldr	r0, [r3, #44]
 610              	.LVL50:
 611 020e FFF7FEFF 		bl	GPIO_SetBits
 612              	.LVL51:
 132:src/DCMotor.cpp **** 
 613              		.loc 2 132 0
 614 0212 6B68     		ldr	r3, [r5, #4]
 615 0214 198F     		ldrh	r1, [r3, #56]
 616 0216 D86B     		ldr	r0, [r3, #60]
 617 0218 FFF7FEFF 		bl	GPIO_SetBits
 618              	.LVL52:
 135:src/DCMotor.cpp **** 		GPIO_ResetBits(m_settings->m_DCInBPort, m_settings->m_DCInBPin);
 619              		.loc 2 135 0
 620 021c 6B68     		ldr	r3, [r5, #4]
 621 021e 198C     		ldrh	r1, [r3, #32]
 622 0220 586A     		ldr	r0, [r3, #36]
 623 0222 FFF7FEFF 		bl	GPIO_ResetBits
 624              	.LVL53:
 625              	.L42:
 136:src/DCMotor.cpp **** 	}
 626              		.loc 2 136 0
 627 0226 6B68     		ldr	r3, [r5, #4]
 628 0228 198E     		ldrh	r1, [r3, #48]
 629 022a 586B     		ldr	r0, [r3, #52]
 630 022c FFF7FEFF 		bl	GPIO_ResetBits
 631              	.LVL54:
 632              	.L31:
 140:src/DCMotor.cpp **** 		s = s * 2;
 633              		.loc 2 140 0
 634 0230 6A68     		ldr	r2, [r5, #4]
 635 0232 1749     		ldr	r1, .L44+4
 636 0234 9368     		ldr	r3, [r2, #8]
 143:src/DCMotor.cpp **** 		case 1:
 637              		.loc 2 143 0
 638 0236 D268     		ldr	r2, [r2, #12]
 140:src/DCMotor.cpp **** 		s = s * 2;
 639              		.loc 2 140 0
 640 0238 8B42     		cmp	r3, r1
 143:src/DCMotor.cpp **** 		case 1:
 641              		.loc 2 143 0
 642 023a 02F1FF32 		add	r2, r2, #-1
 141:src/DCMotor.cpp **** 
 643              		.loc 2 141 0
 644 023e 08BF     		it	eq
 645 0240 6400     		lsleq	r4, r4, #1
 646              	.LVL55:
 143:src/DCMotor.cpp **** 		case 1:
 647              		.loc 2 143 0
 648 0242 032A     		cmp	r2, #3
 649 0244 1FD8     		bhi	.L41
 650 0246 DFE802F0 		tbb	[pc, r2]
 651              	.L35:
 652 024a 02       		.byte	(.L34-.L35)/2
 653 024b 08       		.byte	(.L36-.L35)/2
 654 024c 0E       		.byte	(.L37-.L35)/2
 655 024d 14       		.byte	(.L38-.L35)/2
 656              		.p2align 1
 657              	.L34:
 145:src/DCMotor.cpp **** 			break;
 658              		.loc 2 145 0
 659 024e 002C     		cmp	r4, #0
 660 0250 B8BF     		it	lt
 661 0252 6442     		rsblt	r4, r4, #0
 662              	.LVL56:
 663 0254 A4B2     		uxth	r4, r4
 664 0256 9C86     		strh	r4, [r3, #52]	@ movhi
 665 0258 11E0     		b	.L43
 666              	.LVL57:
 667              	.L36:
 148:src/DCMotor.cpp **** 			break;
 668              		.loc 2 148 0
 669 025a 002C     		cmp	r4, #0
 670 025c B8BF     		it	lt
 671 025e 6442     		rsblt	r4, r4, #0
 672              	.LVL58:
 673 0260 A4B2     		uxth	r4, r4
 674 0262 1C87     		strh	r4, [r3, #56]	@ movhi
 675 0264 0BE0     		b	.L43
 676              	.LVL59:
 677              	.L37:
 151:src/DCMotor.cpp **** 			break;
 678              		.loc 2 151 0
 679 0266 002C     		cmp	r4, #0
 680 0268 B8BF     		it	lt
 681 026a 6442     		rsblt	r4, r4, #0
 682              	.LVL60:
 683 026c A4B2     		uxth	r4, r4
 684 026e 9C87     		strh	r4, [r3, #60]	@ movhi
 685 0270 05E0     		b	.L43
 686              	.LVL61:
 687              	.L38:
 154:src/DCMotor.cpp **** 			break;
 688              		.loc 2 154 0
 689 0272 002C     		cmp	r4, #0
 690 0274 B8BF     		it	lt
 691 0276 6442     		rsblt	r4, r4, #0
 692              	.LVL62:
 693 0278 A4B2     		uxth	r4, r4
 694 027a A3F84040 		strh	r4, [r3, #64]	@ movhi
 695              	.L43:
 160:src/DCMotor.cpp **** }
 696              		.loc 2 160 0
 697 027e 0120     		movs	r0, #1
 155:src/DCMotor.cpp **** 		default:
 698              		.loc 2 155 0
 699 0280 38BD     		pop	{r3, r4, r5, pc}
 700              	.LVL63:
 701              	.L40:
 128:src/DCMotor.cpp **** 		}
 702              		.loc 2 128 0
 703 0282 2046     		mov	r0, r4
 704 0284 38BD     		pop	{r3, r4, r5, pc}
 705              	.LVL64:
 706              	.L41:
 157:src/DCMotor.cpp **** 	}
 707              		.loc 2 157 0
 708 0286 0020     		movs	r0, #0
 161:src/DCMotor.cpp **** 
 709              		.loc 2 161 0
 710 0288 38BD     		pop	{r3, r4, r5, pc}
 711              	.LVL65:
 712              	.L45:
 713 028a 00BF     		.align	2
 714              	.L44:
 715 028c C1C7FFFF 		.word	-14399
 716 0290 002C0140 		.word	1073818624
 717              		.cfi_endproc
 718              	.LFE39:
 719              		.fnend
 721              		.align	1
 722              		.global	_ZN7DCMotor11initEncoderEt
 723              		.thumb
 724              		.thumb_func
 726              	_ZN7DCMotor11initEncoderEt:
 727              		.fnstart
 728              	.LFB42:
 171:src/DCMotor.cpp **** 	encAddr = addr;
 729              		.loc 2 171 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734              	.LVL66:
 735              		.loc 2 172 0
 736 0294 0173     		strb	r1, [r0, #12]
 737 0296 7047     		bx	lr
 738              		.cfi_endproc
 739              	.LFE42:
 740              		.cantunwind
 741              		.fnend
 743              		.align	1
 744              		.global	_ZN7DCMotor11readEncoderEv
 745              		.thumb
 746              		.thumb_func
 748              	_ZN7DCMotor11readEncoderEv:
 749              		.fnstart
 750              	.LFB43:
 173:src/DCMotor.cpp **** }
 174:src/DCMotor.cpp **** 
 175:src/DCMotor.cpp **** int32_t DCMotor::readEncoder(){
 751              		.loc 2 175 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              	.LVL67:
 756 0298 10B5     		push	{r4, lr}
 757              		.save {r4, lr}
 758              	.LCFI7:
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 4, -8
 761              		.cfi_offset 14, -4
 176:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 762              		.loc 2 176 0
 763 029a 134B     		ldr	r3, .L50
 764 029c 0422     		movs	r2, #4
 177:src/DCMotor.cpp ****     Rx_Idx = 0x00;
 765              		.loc 2 177 0
 766 029e 134C     		ldr	r4, .L50+4
 176:src/DCMotor.cpp **** 	NumberOfByteToReceive = RXBUFFERSIZE;
 767              		.loc 2 176 0
 768 02a0 1A70     		strb	r2, [r3]
 769              		.loc 2 177 0
 770 02a2 0023     		movs	r3, #0
 178:src/DCMotor.cpp **** 
 179:src/DCMotor.cpp ****     slaveAddress = encAddr;
 771              		.loc 2 179 0
 772 02a4 027B     		ldrb	r2, [r0, #12]	@ zero_extendqisi2
 177:src/DCMotor.cpp ****     Rx_Idx = 0x00;
 773              		.loc 2 177 0
 774 02a6 2370     		strb	r3, [r4]
 775              		.loc 2 179 0
 776 02a8 114B     		ldr	r3, .L50+8
 180:src/DCMotor.cpp ****     
 181:src/DCMotor.cpp ****     I2C_ITConfig(I2C1, I2C_IT_EVT , ENABLE);
 777              		.loc 2 181 0
 778 02aa 4FF40071 		mov	r1, #512
 179:src/DCMotor.cpp ****     
 779              		.loc 2 179 0
 780 02ae 1A70     		strb	r2, [r3]
 781              		.loc 2 181 0
 782 02b0 1048     		ldr	r0, .L50+12
 783              	.LVL68:
 784 02b2 0122     		movs	r2, #1
 785 02b4 FFF7FEFF 		bl	I2C_ITConfig
 786              	.LVL69:
 182:src/DCMotor.cpp ****     I2C_AcknowledgeConfig(I2C1, ENABLE);
 787              		.loc 2 182 0
 788 02b8 0121     		movs	r1, #1
 789 02ba 0E48     		ldr	r0, .L50+12
 790 02bc FFF7FEFF 		bl	I2C_AcknowledgeConfig
 791              	.LVL70:
 183:src/DCMotor.cpp ****     I2C_GenerateSTART(I2C1, ENABLE);
 792              		.loc 2 183 0
 793 02c0 0121     		movs	r1, #1
 794 02c2 0C48     		ldr	r0, .L50+12
 795 02c4 FFF7FEFF 		bl	I2C_GenerateSTART
 796              	.LVL71:
 797              	.L48:
 184:src/DCMotor.cpp **** 
 185:src/DCMotor.cpp **** 
 186:src/DCMotor.cpp ****     // TODO: Add timeout here
 187:src/DCMotor.cpp ****     while ((Rx_Idx < RXBUFFERSIZE)); 
 798              		.loc 2 187 0
 799 02c8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 800 02ca 032B     		cmp	r3, #3
 801 02cc FCD9     		bls	.L48
 188:src/DCMotor.cpp **** 
 189:src/DCMotor.cpp ****     return ((int32_t)((RxBuffer[0] << 24)|(RxBuffer[1] << 16)|(RxBuffer[2] << 8) | RxBuffer[3]));
 802              		.loc 2 189 0
 803 02ce 0A4A     		ldr	r2, .L50+16
 804 02d0 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 805 02d2 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 806 02d4 1B04     		lsls	r3, r3, #16
 807 02d6 43EA0063 		orr	r3, r3, r0, lsl #24
 808 02da D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
 809 02dc 0343     		orrs	r3, r3, r0
 810 02de 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 190:src/DCMotor.cpp **** }
 811              		.loc 2 190 0
 812 02e0 43EA0020 		orr	r0, r3, r0, lsl #8
 813 02e4 10BD     		pop	{r4, pc}
 814              	.L51:
 815 02e6 00BF     		.align	2
 816              	.L50:
 817 02e8 00000000 		.word	NumberOfByteToReceive
 818 02ec 00000000 		.word	Rx_Idx
 819 02f0 00000000 		.word	slaveAddress
 820 02f4 00540040 		.word	1073763328
 821 02f8 00000000 		.word	RxBuffer
 822              		.cfi_endproc
 823              	.LFE43:
 824              		.fnend
 826              		.global	__aeabi_fsub
 827              		.global	__aeabi_fmul
 828              		.global	__aeabi_fadd
 829              		.global	__aeabi_fcmpgt
 830              		.global	__aeabi_fcmplt
 831              		.global	__aeabi_fdiv
 832              		.align	1
 833              		.global	_ZN7DCMotor15updateRegulatorEff
 834              		.thumb
 835              		.thumb_func
 837              	_ZN7DCMotor15updateRegulatorEff:
 838              		.fnstart
 839              	.LFB44:
 191:src/DCMotor.cpp **** 
 192:src/DCMotor.cpp **** float DCMotor::updateRegulator(float enc, float dt){
 840              		.loc 2 192 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL72:
 845 02fc 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 846              	.LCFI8:
 847              		.cfi_def_cfa_offset 32
 848              		.cfi_offset 3, -32
 849              		.cfi_offset 4, -28
 850              		.cfi_offset 5, -24
 851              		.cfi_offset 6, -20
 852              		.cfi_offset 7, -16
 853              		.cfi_offset 8, -12
 854              		.cfi_offset 9, -8
 855              		.cfi_offset 14, -4
 856              		.loc 2 192 0
 857 0300 0446     		mov	r4, r0
 858 0302 9046     		mov	r8, r2
 193:src/DCMotor.cpp **** 	float error_new = speed-enc;
 859              		.loc 2 193 0
 860 0304 8068     		ldr	r0, [r0, #8]	@ float
 861              	.LVL73:
 862 0306 FFF7FEFF 		bl	__aeabi_fsub
 863              	.LVL74:
 194:src/DCMotor.cpp **** 	
 195:src/DCMotor.cpp **** 	integral += error_new*dt;
 864              		.loc 2 195 0
 865 030a 4146     		mov	r1, r8
 193:src/DCMotor.cpp **** 	float error_new = speed-enc;
 866              		.loc 2 193 0
 867 030c 0746     		mov	r7, r0
 868              	.LVL75:
 869              		.loc 2 195 0
 870 030e FFF7FEFF 		bl	__aeabi_fmul
 871              	.LVL76:
 872 0312 A16A     		ldr	r1, [r4, #40]	@ float
 873 0314 FFF7FEFF 		bl	__aeabi_fadd
 874              	.LVL77:
 196:src/DCMotor.cpp **** 	
 197:src/DCMotor.cpp **** 	if (integral > m_settings->integralSaturation){
 875              		.loc 2 197 0
 876 0318 6668     		ldr	r6, [r4, #4]
 195:src/DCMotor.cpp **** 	
 877              		.loc 2 195 0
 878 031a A062     		str	r0, [r4, #40]	@ float
 879              		.loc 2 197 0
 880 031c B56D     		ldr	r5, [r6, #88]	@ float
 195:src/DCMotor.cpp **** 	
 881              		.loc 2 195 0
 882 031e 8146     		mov	r9, r0
 883              		.loc 2 197 0
 884 0320 2946     		mov	r1, r5
 885 0322 FFF7FEFF 		bl	__aeabi_fcmpgt
 886              	.LVL78:
 887 0326 30B9     		cbnz	r0, .L60
 198:src/DCMotor.cpp **** 		integral = m_settings->integralSaturation;
 199:src/DCMotor.cpp **** 	}else if (integral < -(m_settings->integralSaturation)){
 888              		.loc 2 199 0
 889 0328 05F10045 		add	r5, r5, #-2147483648
 890 032c 2946     		mov	r1, r5
 891 032e 4846     		mov	r0, r9
 892 0330 FFF7FEFF 		bl	__aeabi_fcmplt
 893              	.LVL79:
 894 0334 00B1     		cbz	r0, .L55
 895              	.L60:
 200:src/DCMotor.cpp **** 		integral = -(m_settings->integralSaturation);
 896              		.loc 2 200 0
 897 0336 A562     		str	r5, [r4, #40]	@ float
 898              	.L55:
 201:src/DCMotor.cpp **** 	}
 202:src/DCMotor.cpp **** 	
 203:src/DCMotor.cpp **** 	float derivative = (error_new-error)/dt;
 204:src/DCMotor.cpp **** 	float output = (m_settings->KP*error + m_settings->KI*integral + m_settings->KD*derivative);
 899              		.loc 2 204 0
 900 0338 A16A     		ldr	r1, [r4, #40]	@ float
 901 033a 306D     		ldr	r0, [r6, #80]	@ float
 902 033c FFF7FEFF 		bl	__aeabi_fmul
 903              	.LVL80:
 203:src/DCMotor.cpp **** 	float output = (m_settings->KP*error + m_settings->KI*integral + m_settings->KD*derivative);
 904              		.loc 2 203 0
 905 0340 656A     		ldr	r5, [r4, #36]	@ float
 906              	.LVL81:
 907              		.loc 2 204 0
 908 0342 F16C     		ldr	r1, [r6, #76]	@ float
 909 0344 8146     		mov	r9, r0
 910 0346 2846     		mov	r0, r5
 911 0348 FFF7FEFF 		bl	__aeabi_fmul
 912              	.LVL82:
 913 034c 0146     		mov	r1, r0
 914 034e 4846     		mov	r0, r9
 915 0350 FFF7FEFF 		bl	__aeabi_fadd
 916              	.LVL83:
 917 0354 2946     		mov	r1, r5
 918 0356 8146     		mov	r9, r0
 919 0358 3846     		mov	r0, r7
 920 035a FFF7FEFF 		bl	__aeabi_fsub
 921              	.LVL84:
 922 035e 4146     		mov	r1, r8
 923 0360 FFF7FEFF 		bl	__aeabi_fdiv
 924              	.LVL85:
 925 0364 716D     		ldr	r1, [r6, #84]	@ float
 926 0366 FFF7FEFF 		bl	__aeabi_fmul
 927              	.LVL86:
 928 036a 0146     		mov	r1, r0
 929 036c 4846     		mov	r0, r9
 930 036e FFF7FEFF 		bl	__aeabi_fadd
 931              	.LVL87:
 205:src/DCMotor.cpp **** 	error = error_new;
 932              		.loc 2 205 0
 933 0372 6762     		str	r7, [r4, #36]	@ float
 206:src/DCMotor.cpp **** 	return output;
 207:src/DCMotor.cpp **** }
 934              		.loc 2 207 0
 935 0374 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 936              		.cfi_endproc
 937              	.LFE44:
 938              		.cantunwind
 939              		.fnend
 941              		.global	__aeabi_i2d
 942              		.global	__aeabi_dmul
 943              		.global	__aeabi_d2f
 944              		.align	1
 945              		.global	_ZN7DCMotor6updateEf
 946              		.thumb
 947              		.thumb_func
 949              	_ZN7DCMotor6updateEf:
 950              		.fnstart
 951              	.LFB45:
 208:src/DCMotor.cpp **** 
 209:src/DCMotor.cpp **** float DCMotor::update(float dt){
 952              		.loc 2 209 0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 0
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              	.LVL88:
 957 0378 70B5     		push	{r4, r5, r6, lr}
 958              		.save {r4, r5, r6, lr}
 959              	.LCFI9:
 960              		.cfi_def_cfa_offset 16
 961              		.cfi_offset 4, -16
 962              		.cfi_offset 5, -12
 963              		.cfi_offset 6, -8
 964              		.cfi_offset 14, -4
 965              		.loc 2 209 0
 966 037a 0446     		mov	r4, r0
 967 037c 0E46     		mov	r6, r1
 210:src/DCMotor.cpp **** 	// Read encoder
 211:src/DCMotor.cpp **** 	float encSpeed = readEncoder()*0.004793689962;		// rad/s
 968              		.loc 2 211 0
 969 037e FFF7FEFF 		bl	_ZN7DCMotor11readEncoderEv
 970              	.LVL89:
 212:src/DCMotor.cpp **** 	float speed_si = encSpeed * wheelRadius;	// m/s
 971              		.loc 2 212 0
 972 0382 FFF7FEFF 		bl	__aeabi_i2d
 973              	.LVL90:
 974 0386 0CA3     		adr	r3, .L62
 975 0388 D3E90023 		ldrd	r2, [r3]
 976 038c FFF7FEFF 		bl	__aeabi_dmul
 977              	.LVL91:
 978 0390 FFF7FEFF 		bl	__aeabi_d2f
 979              	.LVL92:
 980 0394 2169     		ldr	r1, [r4, #16]	@ float
 981 0396 FFF7FEFF 		bl	__aeabi_fmul
 982              	.LVL93:
 983 039a 0546     		mov	r5, r0
 984              	.LVL94:
 213:src/DCMotor.cpp **** 	// Update PID regulator
 214:src/DCMotor.cpp **** 	int s = (int) updateRegulator(speed_si, dt);		// m/s
 985              		.loc 2 214 0
 986 039c 3246     		mov	r2, r6
 987 039e 0146     		mov	r1, r0
 988 03a0 2046     		mov	r0, r4
 989              	.LVL95:
 990 03a2 FFF7FEFF 		bl	_ZN7DCMotor15updateRegulatorEff
 991              	.LVL96:
 215:src/DCMotor.cpp **** 	// Set motor speed to process value
 216:src/DCMotor.cpp **** 	setSpeed(0);		// m/s
 992              		.loc 2 216 0
 993 03a6 0021     		movs	r1, #0
 994 03a8 2046     		mov	r0, r4
 995 03aa FFF7FEFF 		bl	_ZN7DCMotor8setSpeedEi
 996              	.LVL97:
 217:src/DCMotor.cpp **** 	// Return encoder values for publishing to localization
 218:src/DCMotor.cpp **** 	return speed_si;
 219:src/DCMotor.cpp **** }...
 997              		.loc 2 219 0
 998 03ae 2846     		mov	r0, r5
 999 03b0 70BD     		pop	{r4, r5, r6, pc}
 1000              	.LVL98:
 1001              	.L63:
 1002 03b2 00BFAFF3 		.align	3
 1002      0080
 1003              	.L62:
 1004 03b8 E3C0D259 		.word	1506984163
 1005 03bc 8CA2733F 		.word	1064542860
 1006              		.cfi_endproc
 1007              	.LFE45:
 1008              		.fnend
 1010              		.global	_ZTS7DCMotor
 1011              		.global	_ZTI7DCMotor
 1012              		.global	_ZTV7DCMotor
 1013              		.section	.rodata
 1014              		.align	2
 1015              		.set	.LANCHOR0,. + 0
 1018              	_ZTV7DCMotor:
 1019 0000 00000000 		.word	0
 1020 0004 00000000 		.word	_ZTI7DCMotor
 1021 0008 00000000 		.word	_ZN7DCMotorD1Ev
 1022 000c 00000000 		.word	_ZN7DCMotorD0Ev
 1023 0010 00000000 		.word	_ZN7DCMotor9motorTypeEv
 1024 0014 00000000 		.word	_ZN7DCMotor9motorInitEv
 1025 0018 00000000 		.word	_ZN7DCMotor9motorNameEv
 1026 001c 00000000 		.word	_ZN7DCMotor12setReferenceEf
 1027 0020 00000000 		.word	_ZN7DCMotor12getReferenceEv
 1028 0024 00000000 		.word	_ZN7DCMotor6updateEf
 1031              	_ZTS7DCMotor:
 1032 0028 3744434D 		.ascii	"7DCMotor\000"
 1032      6F746F72 
 1032      00
 1033 0031 000000   		.space	3
 1036              	_ZTI7DCMotor:
 1037 0034 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 1038 0038 00000000 		.word	_ZTS7DCMotor
 1039 003c 00000000 		.word	_ZTI5motor
 1040              		.text
 1041              	.Letext0:
 1042              		.file 3 "/media/emil/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/machine/_default_types
 1043              		.file 4 "/media/emil/opt/gcc-arm-none-eabi-5_2-2015q4/arm-none-eabi/include/sys/_stdint.h"
 1044              		.file 5 "./lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 1045              		.file 6 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_gpio.h"
 1046              		.file 7 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_tim.h"
 1047              		.file 8 "./inc/motorSettings.h"
 1048              		.file 9 "./lib/CMSIS/CM3/CoreSupport/core_cm3.h"
 1049              		.file 10 "./inc/encoder.h"
 1050              		.file 11 "./lib/STM32F10x_StdPeriph_Driver/inc/stm32f10x_i2c.h"
DEFINED SYMBOLS
                            *ABS*:00000000 DCMotor.cpp
     /tmp/ccBPxeEe.s:20     .text._ZN7DCMotor9motorTypeEv:00000000 $t
     /tmp/ccBPxeEe.s:25     .text._ZN7DCMotor9motorTypeEv:00000000 _ZN7DCMotor9motorTypeEv
.ARM.exidx.text._ZN7DCMotor9motorTypeEv:00000000 $d
     /tmp/ccBPxeEe.s:45     .text:00000000 $t
     /tmp/ccBPxeEe.s:50     .text:00000000 _ZN7DCMotor12setReferenceEf
                       .ARM.exidx:00000000 $d
     /tmp/ccBPxeEe.s:73     .text:00000004 _ZN7DCMotor12getReferenceEv
     /tmp/ccBPxeEe.s:96     .text:00000008 _ZN7DCMotor9motorNameEv
     /tmp/ccBPxeEe.s:121    .text:0000000e _ZN7DCMotorD2Ev
     /tmp/ccBPxeEe.s:150    .text:00000020 $d
     /tmp/ccBPxeEe.s:121    .text:0000000e _ZN7DCMotorD1Ev
     /tmp/ccBPxeEe.s:157    .text:00000024 $t
     /tmp/ccBPxeEe.s:162    .text:00000024 _ZN7DCMotorD0Ev
     /tmp/ccBPxeEe.s:195    .text:00000036 _ZN7DCMotor9motorInitEv
     /tmp/ccBPxeEe.s:359    .text:0000010e $d
     /tmp/ccBPxeEe.s:363    .text:00000112 $t
     /tmp/ccBPxeEe.s:472    .text:0000019c $d
     /tmp/ccBPxeEe.s:477    .text:000001a0 $t
     /tmp/ccBPxeEe.s:482    .text:000001a0 _ZN7DCMotorC2EP13motorSettings
     /tmp/ccBPxeEe.s:515    .text:000001b0 $d
     /tmp/ccBPxeEe.s:482    .text:000001a0 _ZN7DCMotorC1EP13motorSettings
     /tmp/ccBPxeEe.s:522    .text:000001b4 $t
     /tmp/ccBPxeEe.s:527    .text:000001b4 _ZN7DCMotor8setSpeedEi
     /tmp/ccBPxeEe.s:652    .text:0000024a $d
     /tmp/ccBPxeEe.s:656    .text:0000024e $t
     /tmp/ccBPxeEe.s:715    .text:0000028c $d
     /tmp/ccBPxeEe.s:721    .text:00000294 $t
     /tmp/ccBPxeEe.s:726    .text:00000294 _ZN7DCMotor11initEncoderEt
     /tmp/ccBPxeEe.s:748    .text:00000298 _ZN7DCMotor11readEncoderEv
     /tmp/ccBPxeEe.s:817    .text:000002e8 $d
     /tmp/ccBPxeEe.s:832    .text:000002fc $t
     /tmp/ccBPxeEe.s:837    .text:000002fc _ZN7DCMotor15updateRegulatorEff
     /tmp/ccBPxeEe.s:949    .text:00000378 _ZN7DCMotor6updateEf
     /tmp/ccBPxeEe.s:1004   .text:000003b8 $d
     /tmp/ccBPxeEe.s:1031   .rodata:00000028 _ZTS7DCMotor
     /tmp/ccBPxeEe.s:1036   .rodata:00000034 _ZTI7DCMotor
     /tmp/ccBPxeEe.s:1018   .rodata:00000000 _ZTV7DCMotor
     /tmp/ccBPxeEe.s:1014   .rodata:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN5motorD2Ev
__aeabi_unwind_cpp_pr0
_ZdlPv
GPIO_Init
TIM_TimeBaseInit
TIM_OCStructInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_OC3Init
TIM_OC3PreloadConfig
TIM_OC4Init
TIM_OC4PreloadConfig
TIM_ARRPreloadConfig
TIM_CtrlPWMOutputs
TIM_Cmd
_ZN5motorC2EP13motorSettings
GPIO_SetBits
GPIO_ResetBits
I2C_ITConfig
I2C_AcknowledgeConfig
I2C_GenerateSTART
NumberOfByteToReceive
Rx_Idx
slaveAddress
RxBuffer
__aeabi_fsub
__aeabi_fmul
__aeabi_fadd
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_fdiv
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI5motor
